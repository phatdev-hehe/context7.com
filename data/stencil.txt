TITLE: Defining a Stencil Component with @Component Decorator
DESCRIPTION: This snippet demonstrates how to use the @Component decorator to define a Stencil component. It shows the basic structure and syntax for creating a component class.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Creating and Configuring a Stencil Store
DESCRIPTION: Example of creating a store with initial state and setting up a change listener. This store manages clicks, seconds, and squared clicks, demonstrating basic state management and derived state.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Defining a Stencil Component in TypeScript
DESCRIPTION: This snippet shows the structure of a basic Stencil component. It includes the @Component decorator, props, and a render function that returns JSX.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Comprehensive Stencil Component Structure
DESCRIPTION: Complete example of a Stencil component implementation showing proper organization of properties, lifecycle methods, event handlers, and rendering logic following the newspaper metaphor.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {
  num: number;
  someText = 'default';

  @Element() el: HTMLElement;

  @State() isValidated: boolean;
  @State() status = 0;

  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Complete Stencil Component Structure Example
DESCRIPTION: Demonstrates the recommended organization of a Stencil component class, including decorators, lifecycle methods, and proper ordering of component elements.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {
  num: number;
  someText = 'default';

  @Element() el: HTMLElement;

  @State() isValidated: boolean;
  @State() status = 0;

  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Structuring a Complete Stencil Component in TypeScript
DESCRIPTION: This comprehensive example demonstrates the recommended structure for a Stencil component, including property declarations, lifecycle methods, event handling, and rendering. It follows the 'Newspaper Metaphor' for code organization.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {

  /**
   * 1. Own Properties
   * Always set the type if a default value has not
   * been set. If a default value is being set, then type
   * is already inferred. List the own properties in
   * alphabetical order. Note that because these properties
   * do not have the @Prop() decorator, they will not be exposed
   * publicly on the host element, but only used internally.
   */
  num: number;
  someText = 'default';

  /**
   * 2. Reference to host HTML element.
   * Inlined decorator
   */
  @Element() el: HTMLElement;

  /**
   * 3. State() variables
   * Inlined decorator, alphabetical order.
   */
  @State() isValidated: boolean;
  @State() status = 0;

  /**
   * 4. Public Property API
   * Inlined decorator, alphabetical order. These are
   * different than "own properties" in that public props
   * are exposed as properties and attributes on the host element.
   * Requires JSDocs for public API documentation.
   */
  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  /**
   * Prop lifecycle events SHOULD go just behind the Prop they listen to.
   * This makes sense since both statements are strongly connected.
   * - If renaming the instance variable name you must also update the name in @Watch()
   * - Code is easier to follow and maintain.
   */
  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  /**
   * 5. Events section
   * Inlined decorator, alphabetical order.
   * Requires JSDocs for public API documentation.
   */
  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  /**
   * 6. Component lifecycle events
   * Ordered by their natural call order, for example
   * WillLoad should go before DidLoad.
   */
  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  /**
   * 7. Listeners
   * It is ok to place them in a different location
   * if makes more sense in the context. Recommend
   * starting a listener method with "on".
   * Always use two lines.
   */
  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  /**
   * 8. Public methods API
   * These methods are exposed on the host element.
   * Always use two lines.
   * Public Methods must be async.
   * Requires JSDocs for public API documentation.
   */
  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  /**
   * 9. Local methods
   * Internal business logic. These methods cannot be
   * called from the host element.
   */
  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  /**
   * 10. render() function
   * Always the last public method in the class.
   * If private methods present, they are below public methods.
   */
  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Defining Properties in Stencil Components
DESCRIPTION: Shows how to define properties on a Stencil component using the @Prop() decorator.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Creating and Configuring a Stencil Store
DESCRIPTION: Example of creating a store with initial state and setting up a change listener. This store manages clicks, seconds, and squared clicks, demonstrating basic state management and derived state.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Basic Stencil Component Declaration
DESCRIPTION: Shows the basic structure of declaring a Stencil component using the @Component decorator with a required tag name.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Basic Stencil Component Declaration
DESCRIPTION: Shows the basic structure of declaring a Stencil component using the @Component decorator with a required tag name.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Initializing Stencil Project with npm
DESCRIPTION: Command to create a new Stencil project using the create-stencil CLI. This initializes a new project and provides options for different project types.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Defining a Stencil Component with @Component Decorator
DESCRIPTION: This snippet demonstrates how to use the @Component decorator to define a Stencil component. It shows the basic structure and syntax for creating a component class.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Basic State Management in Stencil Component
DESCRIPTION: Demonstrates basic usage of @State decorator to manage a simple timestamp state in a Stencil component. Shows how to declare state and use it in the render method.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Basic Stencil Config Example
DESCRIPTION: A minimal Stencil configuration example showing basic namespace and source directory settings.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Initializing a new Stencil project using create-stencil CLI
DESCRIPTION: This command starts the create-stencil CLI to scaffold a new Stencil project. It provides options for creating standalone components or entire apps.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Defining a Basic Stencil Component
DESCRIPTION: Demonstrates how to use the @Component decorator to define a basic Stencil component with a custom tag name.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Creating Stencil Component in TypeScript
DESCRIPTION: Example of a Stencil component written in TypeScript. It demonstrates the use of the @Component decorator, @Prop for properties, and the render function for JSX.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Rendering Basic JSX in Stencil Component
DESCRIPTION: Demonstrates how to use the render function to return a JSX tree representing the component's structure.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Stencil Component Structure Example
DESCRIPTION: Comprehensive example showing the recommended organization of a Stencil component class, including decorators, lifecycle methods, and proper ordering of elements

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {
  num: number;
  someText = 'default';

  @Element() el: HTMLElement;

  @State() isValidated: boolean;
  @State() status = 0;

  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Component File Structure Example
DESCRIPTION: Example directory structure for organizing Stencil component files, showing the recommended one-component-per-directory pattern with associated styles and tests.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Basic Stencil Component Implementation
DESCRIPTION: Example of a Stencil component implementation showing core features like @Component decorator, props, and rendering.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Defining Stencil Component Class Structure
DESCRIPTION: This comprehensive example illustrates the recommended structure for a Stencil component class, including property declarations, lifecycle methods, event handlers, and rendering logic.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {

  /**
   * 1. Own Properties
   * Always set the type if a default value has not
   * been set. If a default value is being set, then type
   * is already inferred. List the own properties in
   * alphabetical order. Note that because these properties
   * do not have the @Prop() decorator, they will not be exposed
   * publicly on the host element, but only used internally.
   */
  num: number;
  someText = 'default';

  /**
   * 2. Reference to host HTML element.
   * Inlined decorator
   */
  @Element() el: HTMLElement;

  /**
   * 3. State() variables
   * Inlined decorator, alphabetical order.
   */
  @State() isValidated: boolean;
  @State() status = 0;

  /**
   * 4. Public Property API
   * Inlined decorator, alphabetical order. These are
   * different than "own properties" in that public props
   * are exposed as properties and attributes on the host element.
   * Requires JSDocs for public API documentation.
   */
  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  /**
   * Prop lifecycle events SHOULD go just behind the Prop they listen to.
   * This makes sense since both statements are strongly connected.
   * - If renaming the instance variable name you must also update the name in @Watch()
   * - Code is easier to follow and maintain.
   */
  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  /**
   * 5. Events section
   * Inlined decorator, alphabetical order.
   * Requires JSDocs for public API documentation.
   */
  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  /**
   * 6. Component lifecycle events
   * Ordered by their natural call order, for example
   * WillLoad should go before DidLoad.
   */
  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  /**
   * 7. Listeners
   * It is ok to place them in a different location
   * if makes more sense in the context. Recommend
   * starting a listener method with "on".
   * Always use two lines.
   */
  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  /**
   * 8. Public methods API
   * These methods are exposed on the host element.
   * Always use two lines.
   * Public Methods must be async.
   * Requires JSDocs for public API documentation.
   */
  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  /**
   * 9. Local methods
   * Internal business logic. These methods cannot be
   * called from the host element.
   */
  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  /**
   * 10. render() function
   * Always the last public method in the class.
   * If private methods present, they are below public methods.
   */
  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Advanced Form Implementation in Stencil
DESCRIPTION: Implements a complex form with multiple input types including email and select dropdowns. Features email validation using the constraint validation API and handling of multiple select inputs.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Implementing @Watch Decorator in Stencil Component
DESCRIPTION: Demonstrates how to use the @Watch decorator to observe changes in @Prop and @State decorated class members, as well as watching multiple properties and native HTML attributes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Implementing Watch Decorator in Stencil Component
DESCRIPTION: Demonstrates how to use @Watch decorator to monitor changes in @Prop and @State decorated class members, including watching multiple properties and HTML attributes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Custom Clock Component Implementation in Stencil
DESCRIPTION: Complete example showing a clock component that uses lifecycle methods to manage a timer for updating time display.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Using forceUpdate() in TypeScript
DESCRIPTION: Shows how to use the forceUpdate() function to schedule a new render of a component instance or element, even if no state has changed. Note that forceUpdate() is not synchronous.

LANGUAGE: typescript
CODE:
import { forceUpdate } from '@stencil/core'

// inside a class component function
forceUpdate(this);

----------------------------------------

TITLE: Basic Stencil Component Declaration with TypeScript
DESCRIPTION: Shows the basic structure of declaring a Stencil component using the @Component decorator with minimal configuration.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Structuring a Stencil Component Class in TypeScript
DESCRIPTION: This comprehensive example demonstrates the recommended structure and organization for a Stencil component class, including decorators, lifecycle methods, and rendering.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {

  /**
   * 1. Own Properties
   * Always set the type if a default value has not
   * been set. If a default value is being set, then type
   * is already inferred. List the own properties in
   * alphabetical order. Note that because these properties
   * do not have the @Prop() decorator, they will not be exposed
   * publicly on the host element, but only used internally.
   */
  num: number;
  someText = 'default';

  /**
   * 2. Reference to host HTML element.
   * Inlined decorator
   */
  @Element() el: HTMLElement;

  /**
   * 3. State() variables
   * Inlined decorator, alphabetical order.
   */
  @State() isValidated: boolean;
  @State() status = 0;

  /**
   * 4. Public Property API
   * Inlined decorator, alphabetical order. These are
   * different than "own properties" in that public props
   * are exposed as properties and attributes on the host element.
   * Requires JSDocs for public API documentation.
   */
  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  /**
   * Prop lifecycle events SHOULD go just behind the Prop they listen to.
   * This makes sense since both statements are strongly connected.
   * - If renaming the instance variable name you must also update the name in @Watch()
   * - Code is easier to follow and maintain.
   */
  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  /**
   * 5. Events section
   * Inlined decorator, alphabetical order.
   * Requires JSDocs for public API documentation.
   */
  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  /**
   * 6. Component lifecycle events
   * Ordered by their natural call order, for example
   * WillLoad should go before DidLoad.
   */
  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  /**
   * 7. Listeners
   * It is ok to place them in a different location
   * if makes more sense in the context. Recommend
   * starting a listener method with "on".
   * Always use two lines.
   */
  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  /**
   * 8. Public methods API
   * These methods are exposed on the host element.
   * Always use two lines.
   * Public Methods must be async.
   * Requires JSDocs for public API documentation.
   */
  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  /**
   * 9. Local methods
   * Internal business logic. These methods cannot be
   * called from the host element.
   */
  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  /**
   * 10. render() function
   * Always the last public method in the class.
   * If private methods present, they are below public methods.
   */
  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Declaring Props in Stencil Component
DESCRIPTION: Shows how to declare properties in a Stencil component using the @Prop() decorator. The example demonstrates declaring a string prop and using it in the render method.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Implementing Advanced Form Handling in Stencil Component
DESCRIPTION: This snippet shows an advanced form implementation in a Stencil component. It includes multiple input types (text, email, select), form validation, and dynamic option rendering. It demonstrates handling different input events and managing complex component state.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Demonstrating connectedCallback and componentWillLoad in Stencil
DESCRIPTION: This snippet shows how connectedCallback and componentWillLoad are called when a component is added to the DOM. It illustrates that connectedCallback can be called multiple times, while componentWillLoad is only called once.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Defining a Stencil Component in TypeScript
DESCRIPTION: Example of a Stencil component definition using TypeScript and JSX. It demonstrates the use of the @Component decorator, props, and the render method.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Basic Stencil Config in TypeScript
DESCRIPTION: A simple example of a Stencil configuration file (stencil.config.ts) that sets the namespace and source directory for a project.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Using a Stencil Component with Props in TSX and HTML
DESCRIPTION: This snippet shows how to use a Stencil component with props in both TSX and HTML files. It demonstrates the slight difference in syntax between the two.

LANGUAGE: tsx
CODE:
<todo-list name={"Tuesday's To-Do List"}></todo-list>

LANGUAGE: html
CODE:
<todo-list name="Tuesday's To-Do List"></todo-list>

----------------------------------------

TITLE: Emitting Custom Events in Stencil Components
DESCRIPTION: Demonstrates how to use the @Event decorator to emit custom events from a Stencil component. The example shows a TodoList component that emits a 'todoCompleted' event.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Testing Component Rendering with newSpecPage in TypeScript
DESCRIPTION: Demonstrates how to use newSpecPage() to test a Stencil component's rendered HTML output. It sets up a test environment, renders the component, and checks the output using Jest's expect() function.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Using @Watch Decorator in Stencil Components
DESCRIPTION: Demonstrates how to use the @Watch decorator to observe changes in props and state within a Stencil component. It shows watching multiple properties and handling both prop and state changes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Implementing Lifecycle Methods in a Stencil Clock Component
DESCRIPTION: This example demonstrates the use of connectedCallback and disconnectedCallback to manage a timer in a clock component. The component updates the time every second when connected to the DOM and clears the timer when disconnected.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Custom Text Input Form-Associated Component Implementation
DESCRIPTION: Shows a complete implementation of a custom text input component that integrates with forms using ElementInternals. Includes state management, value setting, and event handling.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Advanced Form Implementation in Stencil
DESCRIPTION: Demonstrates a complex form with multiple input types including email validation and select dropdowns. Implements form validation using the browser's constraint validation API and handles multiple select inputs.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Implementing Basic Form Handling in Stencil Component
DESCRIPTION: This snippet demonstrates how to create a basic form within a Stencil component. It shows state management, form submission handling, and input change tracking.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Implementing Watch Decorator in Stencil Components
DESCRIPTION: Demonstrates how to use the @Watch decorator to monitor changes in @Prop and @State decorated class members. Shows multiple watch implementations including watching multiple properties and handling property changes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Complete Stencil Component Structure
DESCRIPTION: Comprehensive example showing the complete structure of a Stencil component following the style guide, including properties, lifecycle methods, and rendering.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {
  num: number;
  someText = 'default';

  @Element() el: HTMLElement;

  @State() isValidated: boolean;
  @State() status = 0;

  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Creating Basic Functional Component in Stencil
DESCRIPTION: Demonstrates the basic syntax for creating a functional component that accepts props and returns JSX.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Defining a Basic Stencil Component in TypeScript
DESCRIPTION: Example of a basic Stencil component defined in TypeScript. It includes the @Component decorator, props, a private method, and a render function.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Structuring Stencil Component Files
DESCRIPTION: Demonstrates the recommended file structure for Stencil components, showing how to organize multiple components and their associated files.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Complete Stencil Component Structure Example
DESCRIPTION: Comprehensive example showing the recommended organization of a Stencil component class, including decorators, lifecycle methods, properties, and rendering logic.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {
  num: number;
  someText = 'default';

  @Element() el: HTMLElement;

  @State() isValidated: boolean;
  @State() status = 0;

  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Defining a Stencil Component with @Component Decorator
DESCRIPTION: This snippet demonstrates how to use the @Component decorator to define a basic Stencil component. It shows the minimal required configuration with the 'tag' property.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Using @Watch Decorator in Stencil Component
DESCRIPTION: Demonstrates how to use the @Watch decorator to observe changes in @Prop and @State decorated class members. It also shows how to watch multiple properties with a single method.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Basic Stencil Component Implementation
DESCRIPTION: Example of a basic Stencil component with properties and rendering logic.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Defining a Stencil Component in TypeScript
DESCRIPTION: Example of a Stencil component definition in TypeScript. This component uses the @Component decorator to specify metadata and includes properties, a private method, and a render function.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Implementing Async Lifecycle Method in Stencil Component
DESCRIPTION: This example demonstrates how to use componentWillLoad as an async method to fetch data before rendering. It returns a Promise to ensure the parent component waits for the data to load.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Implementing Advanced Form with Multiple Inputs in Stencil
DESCRIPTION: This snippet shows an advanced form implementation in a Stencil component. It includes email input with validation, multiple select inputs, and demonstrates handling different input types and form submission.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Basic Component Declaration in Stencil
DESCRIPTION: Shows the basic structure of declaring a Stencil component using the @Component decorator with minimal configuration.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Basic Stencil Component Structure in TypeScript
DESCRIPTION: Example of a basic Stencil component structure in TypeScript. It demonstrates the use of the @Component decorator, @Prop decorators for properties, and the render function for JSX templating.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: CSS Parts Implementation
DESCRIPTION: Demonstrates using CSS parts for flexible component styling from outside the shadow DOM.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Comprehensive Example of a Well-Structured Stencil Component
DESCRIPTION: This extensive example demonstrates the recommended structure for a Stencil component, including property declarations, lifecycle methods, event handling, and rendering. It follows the 'Newspaper Metaphor' for code organization.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {

  /**
   * 1. Own Properties
   * Always set the type if a default value has not
   * been set. If a default value is being set, then type
   * is already inferred. List the own properties in
   * alphabetical order. Note that because these properties
   * do not have the @Prop() decorator, they will not be exposed
   * publicly on the host element, but only used internally.
   */
  num: number;
  someText = 'default';

  /**
   * 2. Reference to host HTML element.
   * Inlined decorator
   */
  @Element() el: HTMLElement;

  /**
   * 3. State() variables
   * Inlined decorator, alphabetical order.
   */
  @State() isValidated: boolean;
  @State() status = 0;

  /**
   * 4. Public Property API
   * Inlined decorator, alphabetical order. These are
   * different than "own properties" in that public props
   * are exposed as properties and attributes on the host element.
   * Requires JSDocs for public API documentation.
   */
  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  /**
   * Prop lifecycle events SHOULD go just behind the Prop they listen to.
   * This makes sense since both statements are strongly connected.
   * - If renaming the instance variable name you must also update the name in @Watch()
   * - Code is easier to follow and maintain.
   */
  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  /**
   * 5. Events section
   * Inlined decorator, alphabetical order.
   * Requires JSDocs for public API documentation.
   */
  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  /**
   * 6. Component lifecycle events
   * Ordered by their natural call order, for example
   * WillLoad should go before DidLoad.
   */
  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  /**
   * 7. Listeners
   * It is ok to place them in a different location
   * if makes more sense in the context. Recommend
   * starting a listener method with "on".
   * Always use two lines.
   */
  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  /**
   * 8. Public methods API
   * These methods are exposed on the host element.
   * Always use two lines.
   * Public Methods must be async.
   * Requires JSDocs for public API documentation.
   */
  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  /**
   * 9. Local methods
   * Internal business logic. These methods cannot be
   * called from the host element.
   */
  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  /**
   * 10. render() function
   * Always the last public method in the class.
   * If private methods present, they are below public methods.
   */
  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Defining Stencil Component in TypeScript
DESCRIPTION: Example of a basic Stencil component definition. This component uses the @Component decorator to specify metadata and includes props, a private method, and a render function.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Emitting Events with Event Decorator in Stencil
DESCRIPTION: Demonstrates how to use the @Event decorator to emit custom DOM events from a Stencil component. Shows basic implementation of an EventEmitter for a todo list component.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Handling User Input in Stencil
DESCRIPTION: Shows how to handle user input events, such as button clicks and input changes, in Stencil components.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Basic Stencil Component Implementation
DESCRIPTION: Example of a Stencil component implementation showing component decoration, props, and rendering using TypeScript and JSX.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Structuring Stencil Component Files
DESCRIPTION: Demonstrates the recommended file structure for Stencil components, showing how to organize component files, styles, and tests.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Defining a Basic Stencil Component with TypeScript
DESCRIPTION: This snippet demonstrates how to use the @Component decorator to define a basic Stencil component. It shows the minimal required configuration using the 'tag' property.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Defining a Stencil Component with @Component Decorator
DESCRIPTION: This snippet demonstrates how to use the @Component decorator to define a Stencil component. It shows the basic structure and usage of the decorator.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Using componentOnReady() in TypeScript
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code after a component's first render cycle. This method returns a promise that resolves after componentDidRender() on the initial render.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Basic Prop Declaration in Stencil
DESCRIPTION: Shows basic property declaration in a Stencil component using the @Prop() decorator

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Typed Functional Component
DESCRIPTION: Example of a functional component using TypeScript interface for props definition.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Demonstrating Complete Stencil Component Structure and Organization
DESCRIPTION: This comprehensive example illustrates the recommended structure and organization for a Stencil component, including property declarations, lifecycle methods, event handling, and rendering logic.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {

  /**
   * 1. Own Properties
   * Always set the type if a default value has not
   * been set. If a default value is being set, then type
   * is already inferred. List the own properties in
   * alphabetical order. Note that because these properties
   * do not have the @Prop() decorator, they will not be exposed
   * publicly on the host element, but only used internally.
   */
  num: number;
  someText = 'default';

  /**
   * 2. Reference to host HTML element.
   * Inlined decorator
   */
  @Element() el: HTMLElement;

  /**
   * 3. State() variables
   * Inlined decorator, alphabetical order.
   */
  @State() isValidated: boolean;
  @State() status = 0;

  /**
   * 4. Public Property API
   * Inlined decorator, alphabetical order. These are
   * different than "own properties" in that public props
   * are exposed as properties and attributes on the host element.
   * Requires JSDocs for public API documentation.
   */
  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  /**
   * Prop lifecycle events SHOULD go just behind the Prop they listen to.
   * This makes sense since both statements are strongly connected.
   * - If renaming the instance variable name you must also update the name in @Watch()
   * - Code is easier to follow and maintain.
   */
  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  /**
   * 5. Events section
   * Inlined decorator, alphabetical order.
   * Requires JSDocs for public API documentation.
   */
  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  /**
   * 6. Component lifecycle events
   * Ordered by their natural call order, for example
   * WillLoad should go before DidLoad.
   */
  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  /**
   * 7. Listeners
   * It is ok to place them in a different location
   * if makes more sense in the context. Recommend
   * starting a listener method with "on".
   * Always use two lines.
   */
  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  /**
   * 8. Public methods API
   * These methods are exposed on the host element.
   * Always use two lines.
   * Public Methods must be async.
   * Requires JSDocs for public API documentation.
   */
  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  /**
   * 9. Local methods
   * Internal business logic. These methods cannot be
   * called from the host element.
   */
  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  /**
   * 10. render() function
   * Always the last public method in the class.
   * If private methods present, they are below public methods.
   */
  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Implementing a Custom Text Input as a Form-Associated Component
DESCRIPTION: Shows a complete example of a custom text input component that interacts with a form using the ElementInternals API and the @AttachInternals decorator.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Defining Stencil Component Structure in TypeScript
DESCRIPTION: Provides a comprehensive example of how to structure a Stencil component in TypeScript, including decorators, lifecycle methods, and proper code organization.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {

  /**
   * 1. Own Properties
   * Always set the type if a default value has not
   * been set. If a default value is being set, then type
   * is already inferred. List the own properties in
   * alphabetical order. Note that because these properties
   * do not have the @Prop() decorator, they will not be exposed
   * publicly on the host element, but only used internally.
   */
  num: number;
  someText = 'default';

  /**
   * 2. Reference to host HTML element.
   * Inlined decorator
   */
  @Element() el: HTMLElement;

  /**
   * 3. State() variables
   * Inlined decorator, alphabetical order.
   */
  @State() isValidated: boolean;
  @State() status = 0;

  /**
   * 4. Public Property API
   * Inlined decorator, alphabetical order. These are
   * different than "own properties" in that public props
   * are exposed as properties and attributes on the host element.
   * Requires JSDocs for public API documentation.
   */
  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  /**
   * Prop lifecycle events SHOULD go just behind the Prop they listen to.
   * This makes sense since both statements are strongly connected.
   * - If renaming the instance variable name you must also update the name in @Watch()
   * - Code is easier to follow and maintain.
   */
  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  /**
   * 5. Events section
   * Inlined decorator, alphabetical order.
   * Requires JSDocs for public API documentation.
   */
  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  /**
   * 6. Component lifecycle events
   * Ordered by their natural call order, for example
   * WillLoad should go before DidLoad.
   */
  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  /**
   * 7. Listeners
   * It is ok to place them in a different location
   * if makes more sense in the context. Recommend
   * starting a listener method with "on".
   * Always use two lines.
   */
  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  /**
   * 8. Public methods API
   * These methods are exposed on the host element.
   * Always use two lines.
   * Public Methods must be async.
   * Requires JSDocs for public API documentation.
   */
  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  /**
   * 9. Local methods
   * Internal business logic. These methods cannot be
   * called from the host element.
   */
  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  /**
   * 10. render() function
   * Always the last public method in the class.
   * If private methods present, they are below public methods.
   */
  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Defining a Stencil Component in TypeScript
DESCRIPTION: Example of a Stencil component definition, including the @Component decorator, props, and render function.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Defining a Stencil Component with @Component Decorator
DESCRIPTION: This snippet demonstrates how to use the @Component decorator to define a Stencil component. It shows the basic structure and usage of the decorator.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Defining a Stencil Component with @Component Decorator
DESCRIPTION: This snippet demonstrates how to use the @Component decorator to define a Stencil component. It shows the basic structure and how to set the required 'tag' option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: JSX-Based Stencil Component Test
DESCRIPTION: Example test case using JSX syntax to render and test a Stencil component.

LANGUAGE: tsx
CODE:
/** @jsx createElement */
import { expect, test } from 'vitest'

import { createElement } from '../../utils/jsx'
import './my-component.js'

test('should render the component with jsx', async () => {
    const cmp = <my-component first="Stencil" last="'Don't call me a framework' JS"></my-component>
    document.body.appendChild(cmp)
    await new Promise((resolve) => requestIdleCallback(resolve))
    expect(cmp.shadowRoot?.querySelector('div')?.innerText)
        .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)
})

----------------------------------------

TITLE: Comprehensive Stencil Component Structure in TypeScript
DESCRIPTION: This extensive snippet demonstrates the recommended structure for a Stencil component, including property declarations, lifecycle methods, event handling, and rendering logic.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {

  /**
   * 1. Own Properties
   * Always set the type if a default value has not
   * been set. If a default value is being set, then type
   * is already inferred. List the own properties in
   * alphabetical order. Note that because these properties
   * do not have the @Prop() decorator, they will not be exposed
   * publicly on the host element, but only used internally.
   */
  num: number;
  someText = 'default';

  /**
   * 2. Reference to host HTML element.
   * Inlined decorator
   */
  @Element() el: HTMLElement;

  /**
   * 3. State() variables
   * Inlined decorator, alphabetical order.
   */
  @State() isValidated: boolean;
  @State() status = 0;

  /**
   * 4. Public Property API
   * Inlined decorator, alphabetical order. These are
   * different than "own properties" in that public props
   * are exposed as properties and attributes on the host element.
   * Requires JSDocs for public API documentation.
   */
  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  /**
   * Prop lifecycle events SHOULD go just behind the Prop they listen to.
   * This makes sense since both statements are strongly connected.
   * - If renaming the instance variable name you must also update the name in @Watch()
   * - Code is easier to follow and maintain.
   */
  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  /**
   * 5. Events section
   * Inlined decorator, alphabetical order.
   * Requires JSDocs for public API documentation.
   */
  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  /**
   * 6. Component lifecycle events
   * Ordered by their natural call order, for example
   * WillLoad should go before DidLoad.
   */
  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  /**
   * 7. Listeners
   * It is ok to place them in a different location
   * if makes more sense in the context. Recommend
   * starting a listener method with "on".
   * Always use two lines.
   */
  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  /**
   * 8. Public methods API
   * These methods are exposed on the host element.
   * Always use two lines.
   * Public Methods must be async.
   * Requires JSDocs for public API documentation.
   */
  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  /**
   * 9. Local methods
   * Internal business logic. These methods cannot be
   * called from the host element.
   */
  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  /**
   * 10. render() function
   * Always the last public method in the class.
   * If private methods present, they are below public methods.
   */
  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Custom Clock Component Example in TSX
DESCRIPTION: Complete example of a clock component implementing connectedCallback and disconnectedCallback to manage a timer.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Defining a Stencil Component with @Component Decorator
DESCRIPTION: This snippet demonstrates how to use the @Component decorator to define a basic Stencil component. It shows the minimal required configuration with the 'tag' property.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Form-Associated Custom Element in Stencil
DESCRIPTION: Shows how to create a form-associated custom element that integrates with external form elements. Uses the formAssociated property and ElementInternals for native form integration and validation.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css',
  formAssociated: true
})
export class MyName {
  @State() value: string;
  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.internals.setFormValue(event.target.value);
  }

  render() {
    return (
      <label>
        Name:
        <input
          type="text"
          value={this.value}
          onInput={(event) => this.handleChange(event)}
        />
      </label>
    );
  }
}

----------------------------------------

TITLE: Creating a Basic Stencil Component in TypeScript
DESCRIPTION: Example of a basic Stencil component with props, a utility function, and a render method. This component demonstrates the use of the @Component and @Prop decorators.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Testing Rendered HTML with newSpecPage in TypeScript
DESCRIPTION: Example showing how to test a Stencil component's rendered HTML output using newSpecPage() utility. Tests if the component renders with expected content.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Initializing Stencil Project with CLI
DESCRIPTION: Command to create a new Stencil project using the create-stencil CLI tool.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Conditional Rendering in Stencil
DESCRIPTION: Demonstrates different approaches to conditional rendering in JSX using if/else statements and ternary operators.

LANGUAGE: tsx
CODE:
render() {
  if (this.name) {
    return ( <div>Hello {this.name}</div> )
  } else {
    return ( <div>Hello, World</div> )
  }
}

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
    {this.name
      ? <p>Hello {this.name}</p>
      : <p>Hello World</p>
    }
    </div>
  );
}

----------------------------------------

TITLE: Creating Stencil Component in TypeScript
DESCRIPTION: Example of a basic Stencil component written in TypeScript. It demonstrates the use of @Component decorator, props, and the render function.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Comprehensive Stencil Component Structure in TypeScript
DESCRIPTION: This extensive code snippet illustrates the complete structure of a Stencil component, including decorators, lifecycle methods, props, state, events, and rendering. It demonstrates best practices for code organization within a component.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {

  /**
   * 1. Own Properties
   * Always set the type if a default value has not
   * been set. If a default value is being set, then type
   * is already inferred. List the own properties in
   * alphabetical order. Note that because these properties
   * do not have the @Prop() decorator, they will not be exposed
   * publicly on the host element, but only used internally.
   */
  num: number;
  someText = 'default';

  /**
   * 2. Reference to host HTML element.
   * Inlined decorator
   */
  @Element() el: HTMLElement;

  /**
   * 3. State() variables
   * Inlined decorator, alphabetical order.
   */
  @State() isValidated: boolean;
  @State() status = 0;

  /**
   * 4. Public Property API
   * Inlined decorator, alphabetical order. These are
   * different than "own properties" in that public props
   * are exposed as properties and attributes on the host element.
   * Requires JSDocs for public API documentation.
   */
  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  /**
   * Prop lifecycle events SHOULD go just behind the Prop they listen to.
   * This makes sense since both statements are strongly connected.
   * - If renaming the instance variable name you must also update the name in @Watch()
   * - Code is easier to follow and maintain.
   */
  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  /**
   * 5. Events section
   * Inlined decorator, alphabetical order.
   * Requires JSDocs for public API documentation.
   */
  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  /**
   * 6. Component lifecycle events
   * Ordered by their natural call order, for example
   * WillLoad should go before DidLoad.
   */
  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  /**
   * 7. Listeners
   * It is ok to place them in a different location
   * if makes more sense in the context. Recommend
   * starting a listener method with "on".
   * Always use two lines.
   */
  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  /**
   * 8. Public methods API
   * These methods are exposed on the host element.
   * Always use two lines.
   * Public Methods must be async.
   * Requires JSDocs for public API documentation.
   */
  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  /**
   * 9. Local methods
   * Internal business logic. These methods cannot be
   * called from the host element.
   */
  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  /**
   * 10. render() function
   * Always the last public method in the class.
   * If private methods present, they are below public methods.
   */
  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Declaring Props in a Stencil Component
DESCRIPTION: Example of declaring props in a Stencil component using the @Prop() decorator. Shows how to declare string, boolean, and object props.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    @Prop() isComplete: boolean;
    @Prop() thingToDo: string;
    @Prop() myHttpService: MyHttpService;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Testing a Stencil Component with JSX Template in newSpecPage()
DESCRIPTION: This example shows how to use the template option in newSpecPage() to test a Stencil component with JSX syntax. It demonstrates passing props to the component and verifying the rendered output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Creating a Form-Associated Stencil Component
DESCRIPTION: Demonstrates how to set up a basic form-associated component in Stencil using the formAssociated option in the @Component decorator.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Using Slots in Stencil Components
DESCRIPTION: Explains how to use slots to render dynamic children in specific locations within a component tree.

LANGUAGE: tsx
CODE:
// my-component.tsx

render() {
  return [
    <slot name="item-start" />,
    <h1>Here is my main content</h1>,
    <slot name="item-end" />
  ]
}

----------------------------------------

TITLE: Implementing a Custom Text Input with Form Association in Stencil
DESCRIPTION: Shows a complete example of a custom text input component that interacts with a form using ElementInternals. It demonstrates state management, event handling, and form value setting.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Basic Stencil Component Implementation
DESCRIPTION: Example of a Stencil component implementation showing component structure, props, and rendering logic using TypeScript and JSX.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Emitting Custom Events in Stencil Components
DESCRIPTION: Demonstrates how to use the @Event() decorator to emit custom DOM events from a Stencil component. It shows the basic usage and how to configure event options.

LANGUAGE: typescript
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

LANGUAGE: typescript
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Implementing Advanced Form Handling in Stencil Component
DESCRIPTION: This snippet showcases an advanced form implementation in a Stencil component. It includes multiple input types (email and select), state management for various form elements, input validation, and dynamic option rendering for select inputs.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Handling User Input in Stencil
DESCRIPTION: Shows how to handle user input events, such as button clicks and input changes, in Stencil components.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Basic Prop Declaration in Stencil
DESCRIPTION: Shows how to declare a basic string property in a Stencil component using the @Prop decorator

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Emitting Events with Event Decorator in TypeScript
DESCRIPTION: Demonstrates how to use @Event decorator to emit custom DOM events from a Stencil component. Shows basic implementation of an event emitter for a todo list component.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Defining a Stencil Component in TypeScript
DESCRIPTION: Example of a basic Stencil component written in TypeScript. It demonstrates the use of the @Component decorator, @Prop decorators for properties, and the render method for defining the component's view.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Watch Decorator Implementation in Stencil Component
DESCRIPTION: Demonstrates using the @Watch decorator to monitor changes in @Prop and @State decorated class members. Shows how to handle multiple watchers and access old/new values.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Using Stencil Components with Props in TSX and HTML
DESCRIPTION: Shows how to use a Stencil component with props in both TSX and HTML contexts.

LANGUAGE: typescript
CODE:
{/* Here we use the component in a TSX file */}
<todo-list name={"Tuesday's To-Do List"}></todo-list>

LANGUAGE: html
CODE:
<!-- Here we use the component in an HTML file -->
<todo-list name="Tuesday's To-Do List"></todo-list>

----------------------------------------

TITLE: Implementing Basic Form Handling in Stencil Component
DESCRIPTION: This snippet demonstrates a basic form implementation in a Stencil component. It includes state management for form input, event handling for form submission and input changes, and rendering of a simple form with a text input.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Basic Component Declaration in Stencil
DESCRIPTION: Shows the basic structure of declaring a Stencil component using the @Component decorator with a required tag name.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Implementing a Custom Text Input with Form Association
DESCRIPTION: This example shows a complete Stencil component implementing a custom text input that interacts with a form using the ElementInternals API. It demonstrates setting form values and handling user input.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Implementing Advanced Form in Stencil Component
DESCRIPTION: This snippet showcases an advanced form implementation in a Stencil component. It includes multiple input types, select elements, form validation, and dynamic option rendering.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Complex State Management with Arrays
DESCRIPTION: Demonstrates @State usage with complex types and array management, including proper state updates to trigger rerenders.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;
    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Stencil Component Class Structure Example
DESCRIPTION: Comprehensive example showing the recommended organization of a Stencil component class, including decorators, lifecycle methods, and proper ordering of component elements.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {
  num: number;
  someText = 'default';

  @Element() el: HTMLElement;

  @State() isValidated: boolean;
  @State() status = 0;

  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Creating a Form-Associated Custom Element in Stencil
DESCRIPTION: This example shows how to create a form-associated custom element using Stencil. It demonstrates the use of the formAssociated property and ElementInternals to integrate with native form features.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css',
  formAssociated: true
})
export class MyName {
  @State() value: string;
  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.internals.setFormValue(event.target.value);
  }

  render() {
    return (
      <label>
        Name:
        <input
          type="text"
          value={this.value}
          onInput={(event) => this.handleChange(event)}
        />
      </label>
    );
  }
}

----------------------------------------

TITLE: Listening for Component Ready Event in JavaScript
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code when a Stencil component has finished its first render cycle. This method returns a promise that resolves after componentDidRender() on the first render.

LANGUAGE: javascript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Accessing Typed Stencil Components in TypeScript
DESCRIPTION: Demonstrates how to access and manipulate a strongly-typed Stencil component using the automatically generated HTML element interface. Shows proper typing of a button element and setting its properties.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Asset Path Component Example in TSX
DESCRIPTION: Shows how to use getAssetPath() to resolve local asset paths in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Creating a Basic Stencil Component in TypeScript
DESCRIPTION: Example of a basic Stencil component written in TypeScript. It demonstrates the use of the @Component decorator, @Prop for properties, and the render method for defining the component's structure.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Implementing Auto-updating State with Lifecycle Methods
DESCRIPTION: Shows how to use component lifecycle methods with @State() to create an auto-updating clock component.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Demonstrating connectedCallback and componentWillLoad in Stencil
DESCRIPTION: This snippet shows how connectedCallback and componentWillLoad are called when a component is added to the DOM. It illustrates that connectedCallback can be called multiple times, while componentWillLoad is only called once.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Emitting Custom Events in Stencil Components
DESCRIPTION: Demonstrates how to use the @Event() decorator to emit custom DOM events from a Stencil component. The example shows a TodoList component emitting a 'todoCompleted' event.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Listening for Component Ready Event in JavaScript
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code when a Stencil component has finished its first render cycle. This method returns a promise that resolves after componentDidRender() on the first render.

LANGUAGE: javascript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Stencil Component Class Structure Example
DESCRIPTION: Comprehensive example showing the recommended organization of a Stencil component class, including decorators, lifecycle methods, and proper ordering of component elements.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {
  num: number;
  someText = 'default';

  @Element() el: HTMLElement;

  @State() isValidated: boolean;
  @State() status = 0;

  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Async ComponentWillLoad Example in Stencil
DESCRIPTION: Demonstrates how to implement an asynchronous componentWillLoad() method to fetch data before rendering.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Component Class Structure in TypeScript
DESCRIPTION: Complete example of a Stencil component class showing proper organization of properties, lifecycle methods, events, and rendering logic.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {
  num: number;
  someText = 'default';

  @Element() el: HTMLElement;

  @State() isValidated: boolean;
  @State() status = 0;

  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Using @Watch Decorator in Stencil Components
DESCRIPTION: Demonstrates how to use the @Watch() decorator to monitor changes in @Prop() and @State() decorated class members. It shows examples of watching single and multiple properties, including native HTML attributes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Async Component Loading Example in Stencil
DESCRIPTION: Demonstrates async data fetching in componentWillLoad() lifecycle method.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Emitting Custom Events in Stencil Components
DESCRIPTION: Demonstrates how to use the @Event decorator to emit custom DOM events from a Stencil component. The example shows a TodoList component emitting a 'todoCompleted' event.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Defining Stencil Component Structure in TypeScript
DESCRIPTION: This comprehensive example illustrates the recommended structure and organization of a Stencil component class, including decorators, lifecycle methods, and rendering logic.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {

  /**
   * 1. Own Properties
   * Always set the type if a default value has not
   * been set. If a default value is being set, then type
   * is already inferred. List the own properties in
   * alphabetical order. Note that because these properties
   * do not have the @Prop() decorator, they will not be exposed
   * publicly on the host element, but only used internally.
   */
  num: number;
  someText = 'default';

  /**
   * 2. Reference to host HTML element.
   * Inlined decorator
   */
  @Element() el: HTMLElement;

  /**
   * 3. State() variables
   * Inlined decorator, alphabetical order.
   */
  @State() isValidated: boolean;
  @State() status = 0;

  /**
   * 4. Public Property API
   * Inlined decorator, alphabetical order. These are
   * different than "own properties" in that public props
   * are exposed as properties and attributes on the host element.
   * Requires JSDocs for public API documentation.
   */
  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  /**
   * Prop lifecycle events SHOULD go just behind the Prop they listen to.
   * This makes sense since both statements are strongly connected.
   * - If renaming the instance variable name you must also update the name in @Watch()
   * - Code is easier to follow and maintain.
   */
  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  /**
   * 5. Events section
   * Inlined decorator, alphabetical order.
   * Requires JSDocs for public API documentation.
   */
  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  /**
   * 6. Component lifecycle events
   * Ordered by their natural call order, for example
   * WillLoad should go before DidLoad.
   */
  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  /**
   * 7. Listeners
   * It is ok to place them in a different location
   * if makes more sense in the context. Recommend
   * starting a listener method with "on".
   * Always use two lines.
   */
  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  /**
   * 8. Public methods API
   * These methods are exposed on the host element.
   * Always use two lines.
   * Public Methods must be async.
   * Requires JSDocs for public API documentation.
   */
  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  /**
   * 9. Local methods
   * Internal business logic. These methods cannot be
   * called from the host element.
   */
  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  /**
   * 10. render() function
   * Always the last public method in the class.
   * If private methods present, they are below public methods.
   */
  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Using Stencil Store in a Component
DESCRIPTION: Example of using the created store in a Stencil component. It shows how to access and update store values, as well as using them in the component's render method.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Using @State() with Component Lifecycle Methods
DESCRIPTION: This example shows how to use @State() in conjunction with component lifecycle methods to create a dynamic component that updates its state periodically.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Custom Clock Component Implementation
DESCRIPTION: Complete example of a clock component using lifecycle methods to manage a timer for updating time display.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Dynamic State Updates with Lifecycle Methods
DESCRIPTION: Shows how to properly update state using lifecycle methods, implementing a live-updating clock component with proper cleanup.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Basic Stencil Component Implementation
DESCRIPTION: Example of a basic Stencil component implementation with props and rendering logic using TypeScript and JSX.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Documenting Component Properties in Stencil with TypeScript
DESCRIPTION: Demonstrates how to add documentation for component properties using JSDocs comments with @Prop decorator in Stencil components.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Listening to Window Events in Stencil Components
DESCRIPTION: Shows how to use the @Listen decorator to handle events from the window object. The example demonstrates listening for the 'scroll' event on the window.

LANGUAGE: tsx
CODE:
  @Listen('scroll', { target: 'window' })
  handleScroll(ev) {
    console.log('the body was scrolled', ev);
  }

----------------------------------------

TITLE: Using Stencil Build Constants in Component
DESCRIPTION: Demonstrates how to use Stencil's Build constants to conditionally execute code in development/production environments and detect browser/server contexts. The example shows implementation within a component's lifecycle method using isDev and isBrowser flags.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Creating a Stencil Store in TypeScript
DESCRIPTION: Example of creating a store with initial state, defining a computed property, and exporting the state for use in components.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Array Handling in Stencil Components
DESCRIPTION: Shows proper techniques for updating arrays in Stencil components using immutable operations to trigger component updates and @Watch handlers.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Implementing Async componentWillLoad in Stencil
DESCRIPTION: This example demonstrates how to implement an asynchronous componentWillLoad method in Stencil. It fetches data from an API and sets it to a component property before rendering.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Basic @Method Implementation in Stencil
DESCRIPTION: Demonstrates the basic usage of @Method decorator to expose a public async method in a Stencil component.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Initializing a New Stencil Project with create-stencil CLI
DESCRIPTION: Command to start the create-stencil CLI for scaffolding a new Stencil project. This will provide options for different project types.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Defining a Stencil Component in TypeScript
DESCRIPTION: Example of a Stencil component definition in TypeScript. It demonstrates the use of the @Component decorator, @Prop decorators for properties, and the render method for JSX output.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Initializing Stencil Project with CLI
DESCRIPTION: Command to create a new Stencil project using the create-stencil CLI tool

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Implementing a Custom Text Input with Form Association
DESCRIPTION: Shows a more complete example of a form-associated Stencil component, implementing a custom text input that interacts with a form using the ElementInternals API.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Basic Stencil Component Implementation
DESCRIPTION: Example of a basic Stencil component with properties, utility functions, and render method using JSX

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Basic Prop Declaration in Stencil
DESCRIPTION: Demonstrates basic property declaration using @Prop() decorator with a simple string property

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Basic Stencil Component Implementation
DESCRIPTION: Example of a basic Stencil component with properties and rendering logic

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Creating a basic Stencil component in TypeScript
DESCRIPTION: This code defines a basic Stencil component using TypeScript and JSX. It demonstrates the use of the @Component decorator, @Prop for properties, and the render method for defining the component's structure.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Custom Clock Component Implementation in Stencil
DESCRIPTION: Complete example showing a clock component that updates every second, demonstrating proper usage of connected/disconnected callbacks and state management.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Using Element Decorator in Stencil Components
DESCRIPTION: This snippet demonstrates how to use the @Element() decorator to access the host element within a Stencil component class. It shows how to get a reference to the host element and use DOM methods on it.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Basic Method Decorator Usage in Stencil
DESCRIPTION: Demonstrates how to use the @Method decorator to expose a public method in a Stencil component. The example shows a TodoList component with a showPrompt method.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Implementing Advanced Form Handling in Stencil Component
DESCRIPTION: This snippet showcases an advanced form implementation in a Stencil component. It includes multiple input types (email and select), state management for various inputs, input validation, and dynamic option rendering for select inputs.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Interactive State Management with Timer
DESCRIPTION: Shows how to implement dynamic state updates using setInterval and proper lifecycle methods. Demonstrates updating state periodically and cleanup.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Complete Compiler Setup Example
DESCRIPTION: Example showing how to set up and use the Stencil compiler in a NodeJS environment, including config loading and build execution.

LANGUAGE: tsx
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Managing Object Updates in Stencil Components
DESCRIPTION: Demonstrates proper object updating techniques in Stencil using the spread operator to ensure reactivity. Shows how to manage complex state with TypeScript types.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Watch Decorator Implementation in Stencil
DESCRIPTION: Demonstrates usage of @Watch decorator to monitor changes in @Prop and @State decorated class members. Shows how to watch multiple properties and handle value changes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Demonstrating Component Lifecycle Hierarchy in Stencil
DESCRIPTION: This snippet illustrates the order in which lifecycle methods are called in a component hierarchy. It shows that child components complete their lifecycle methods before parent components.

LANGUAGE: markup
CODE:
  <cmp-a>
    <cmp-b>
      <cmp-c></cmp-c>
    </cmp-b>
  </cmp-a>

----------------------------------------

TITLE: Basic Usage of @State() Decorator in Stencil
DESCRIPTION: This snippet demonstrates the basic usage of the @State() decorator in a Stencil component to manage internal state and trigger rerenders when the state changes.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Connected Callback Example in Stencil
DESCRIPTION: Demonstrates how connectedCallback() is called when a component is attached to the DOM, including multiple attachments and removals.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Updating Arrays in Stencil Components
DESCRIPTION: Illustrates the correct way to update arrays in Stencil components to trigger re-renders and @Watch methods. It uses the spread operator to create a new array reference.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Implementing Watch Decorator in Stencil Component
DESCRIPTION: Demonstrates using @Watch() decorator to monitor changes in @Prop and @State decorated class members. Shows how to watch multiple properties and handle value changes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Basic Component Definition in Stencil
DESCRIPTION: Shows how to create a basic Stencil component using the @Component decorator with minimal configuration.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Defining a Basic Stencil Component
DESCRIPTION: Demonstrates how to use the @Component decorator to define a simple Stencil component. The example shows the basic structure and required 'tag' option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Running create-stencil CLI for Stencil Project Initialization
DESCRIPTION: Command to run the create-stencil CLI for scaffolding a new Stencil project. This command will prompt the user to choose the type of project to start.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Organizing Stencil Component Code Structure
DESCRIPTION: This comprehensive example demonstrates the recommended code organization for a Stencil component, including property declarations, lifecycle methods, event handlers, and rendering logic.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {

  /**
   * 1. Own Properties
   * Always set the type if a default value has not
   * been set. If a default value is being set, then type
   * is already inferred. List the own properties in
   * alphabetical order. Note that because these properties
   * do not have the @Prop() decorator, they will not be exposed
   * publicly on the host element, but only used internally.
   */
  num: number;
  someText = 'default';

  /**
   * 2. Reference to host HTML element.
   * Inlined decorator
   */
  @Element() el: HTMLElement;

  /**
   * 3. State() variables
   * Inlined decorator, alphabetical order.
   */
  @State() isValidated: boolean;
  @State() status = 0;

  /**
   * 4. Public Property API
   * Inlined decorator, alphabetical order. These are
   * different than "own properties" in that public props
   * are exposed as properties and attributes on the host element.
   * Requires JSDocs for public API documentation.
   */
  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  /**
   * Prop lifecycle events SHOULD go just behind the Prop they listen to.
   * This makes sense since both statements are strongly connected.
   * - If renaming the instance variable name you must also update the name in @Watch()
   * - Code is easier to follow and maintain.
   */
  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  /**
   * 5. Events section
   * Inlined decorator, alphabetical order.
   * Requires JSDocs for public API documentation.
   */
  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  /**
   * 6. Component lifecycle events
   * Ordered by their natural call order, for example
   * WillLoad should go before DidLoad.
   */
  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  /**
   * 7. Listeners
   * It is ok to place them in a different location
   * if makes more sense in the context. Recommend
   * starting a listener method with "on".
   * Always use two lines.
   */
  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  /**
   * 8. Public methods API
   * These methods are exposed on the host element.
   * Always use two lines.
   * Public Methods must be async.
   * Requires JSDocs for public API documentation.
   */
  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  /**
   * 9. Local methods
   * Internal business logic. These methods cannot be
   * called from the host element.
   */
  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  /**
   * 10. render() function
   * Always the last public method in the class.
   * If private methods present, they are below public methods.
   */
  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Complex E2E Test for Toggle Component
DESCRIPTION: Illustrates a more complex end-to-end test for a toggle component. It demonstrates setting content, spying on events, finding elements, setting properties, and making assertions about classes and event details.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Updating Arrays in Stencil Components
DESCRIPTION: Illustrates the correct way to update arrays in Stencil components to trigger re-renders and @Watch methods. It uses the spread operator to create a new array reference.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Defining a Stencil Component in TypeScript
DESCRIPTION: This snippet shows the definition of a Stencil component named 'my-component'. It demonstrates the component's structure, props, and rendering logic.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Rendering and Testing a Component with newSpecPage in Stencil
DESCRIPTION: Demonstrates how to use newSpecPage() to render a component and test its output. The test creates a spec page with the MyCmp component, renders it, and checks the resulting HTML.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Rendering Basic JSX in Stencil Component
DESCRIPTION: Demonstrates how to use the render function to output a tree of components using JSX syntax in a Stencil component.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Full Build Example with Stencil Compiler in NodeJS
DESCRIPTION: Demonstrates a complete example of running a full build using the Stencil Compiler in a NodeJS environment. It includes creating a logger, system, loading config, and running the build process.

LANGUAGE: typescript
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Testing Stencil Component Rendering with newSpecPage
DESCRIPTION: Example of using newSpecPage() to test a Stencil component's rendered HTML output. The test validates that the MyCmp component renders with expected content.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Watch Decorator Implementation in Stencil
DESCRIPTION: Demonstrates the usage of @Watch decorator to monitor changes in @Prop and @State decorated class members. Shows how to watch multiple properties and handle both old and new values.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Basic JSX Component Structure in Stencil
DESCRIPTION: Example showing the basic structure of a Stencil component using JSX with a render function that returns HTML elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Component File Structure Example
DESCRIPTION: Demonstrates recommended file organization for Stencil components, showing directory structure for a card component and related sub-components

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Defining a Stencil Component with @Component Decorator
DESCRIPTION: This snippet demonstrates how to use the @Component decorator to define a Stencil component. It shows the basic structure and syntax for creating a component class.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Basic Usage of @State() Decorator in Stencil
DESCRIPTION: This snippet demonstrates the basic usage of the @State() decorator in a Stencil component to manage internal state and trigger rerenders when the state changes.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Using Slots in Stencil Components
DESCRIPTION: Example of using slots to render dynamic children in specific locations within a component tree.

LANGUAGE: tsx
CODE:
render() {
  return [
    <slot name="item-start" />,
    <h1>Here is my main content</h1>,
    <slot name="item-end" />
  ]
}

----------------------------------------

TITLE: Basic Stencil Component Implementation
DESCRIPTION: Example of a basic Stencil component with props and rendering logic.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Basic Event Emission in Stencil
DESCRIPTION: Demonstrates how to emit custom DOM events using the @Event decorator and EventEmitter in a Stencil component.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Complex State Management with Arrays
DESCRIPTION: Demonstrates managing complex state with arrays and custom types, showing proper state mutation patterns to trigger rerenders.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Basic State Management in Stencil Component
DESCRIPTION: Demonstrates basic usage of @State decorator to manage a component's current time and trigger rerenders when the time updates.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    // Second, we decorate a class member with @State()
    // When `currentTime` changes, a rerender will be
    // triggered
    @State() currentTime: number = Date.now();

    render() {
        // Within the component's class, its members are
        // accessed via `this`. This allows us to render
        // the value stored in `currentTime`
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Using @Watch Decorator in Stencil Components
DESCRIPTION: Demonstrates how to use the @Watch decorator to monitor changes in @Prop and @State decorated class members, as well as watching multiple properties and native HTML attributes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Basic Property Decorator Implementation in Stencil
DESCRIPTION: Shows how to implement a basic property using the @Prop decorator in a Stencil component with a simple string property.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Basic Stencil Configuration Example
DESCRIPTION: Basic example of a Stencil configuration file showing namespace and source directory settings.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Async Component Loading Example (TSX)
DESCRIPTION: Demonstrates how to implement async data fetching in componentWillLoad lifecycle method, properly handling promises for component loading.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Organizing Stencil Component Code
DESCRIPTION: Provides a comprehensive example of a well-structured Stencil component, including property declarations, lifecycle methods, and rendering logic.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {

  /**
   * 1. Own Properties
   * Always set the type if a default value has not
   * been set. If a default value is being set, then type
   * is already inferred. List the own properties in
   * alphabetical order. Note that because these properties
   * do not have the @Prop() decorator, they will not be exposed
   * publicly on the host element, but only used internally.
   */
  num: number;
  someText = 'default';

  /**
   * 2. Reference to host HTML element.
   * Inlined decorator
   */
  @Element() el: HTMLElement;

  /**
   * 3. State() variables
   * Inlined decorator, alphabetical order.
   */
  @State() isValidated: boolean;
  @State() status = 0;

  /**
   * 4. Public Property API
   * Inlined decorator, alphabetical order. These are
   * different than "own properties" in that public props
   * are exposed as properties and attributes on the host element.
   * Requires JSDocs for public API documentation.
   */
  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  /**
   * Prop lifecycle events SHOULD go just behind the Prop they listen to.
   * This makes sense since both statements are strongly connected.
   * - If renaming the instance variable name you must also update the name in @Watch()
   * - Code is easier to follow and maintain.
   */
  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  /**
   * 5. Events section
   * Inlined decorator, alphabetical order.
   * Requires JSDocs for public API documentation.
   */
  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  /**
   * 6. Component lifecycle events
   * Ordered by their natural call order, for example
   * WillLoad should go before DidLoad.
   */
  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  /**
   * 7. Listeners
   * It is ok to place them in a different location
   * if makes more sense in the context. Recommend
   * starting a listener method with "on".
   * Always use two lines.
   */
  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  /**
   * 8. Public methods API
   * These methods are exposed on the host element.
   * Always use two lines.
   * Public Methods must be async.
   * Requires JSDocs for public API documentation.
   */
  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  /**
   * 9. Local methods
   * Internal business logic. These methods cannot be
   * called from the host element.
   */
  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  /**
   * 10. render() function
   * Always the last public method in the class.
   * If private methods present, they are below public methods.
   */
  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Implementing Basic Form in Stencil Component
DESCRIPTION: Demonstrates a basic form implementation in a Stencil component, including state management, form submission, and input handling.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Handling Keyboard Events in Stencil Components
DESCRIPTION: Demonstrates how to handle keyboard events in a Stencil component using the @Listen decorator. The example shows listening for the 'keydown' event and checking for a specific key press.

LANGUAGE: tsx
CODE:
@Listen('keydown')
handleKeyDown(ev: KeyboardEvent){
  if (ev.key === 'ArrowDown'){
    console.log('down arrow pressed')
  }
}

----------------------------------------

TITLE: Basic JSX Component Rendering in Stencil
DESCRIPTION: Demonstrates the basic structure of a Stencil component using JSX to render HTML elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Valid and Invalid Method Implementations
DESCRIPTION: Demonstrates various valid and invalid implementations of @Method() decorator usage, showing proper async patterns and return types.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Emitting Custom Events in Stencil Components
DESCRIPTION: Demonstrates how to use the @Event decorator to emit custom DOM events from a Stencil component. The example shows a TodoList component emitting a 'todoCompleted' event.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Implementing Custom Text Input with Form Association
DESCRIPTION: Complete implementation of a custom text input component that integrates with forms using ElementInternals and handles value changes.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Using Stencil Component Library Loader in TypeScript
DESCRIPTION: This snippet demonstrates how to use the loader generated by the 'dist' output target to register Stencil components in a TypeScript application. It imports helper functions, sets a nonce for CSP, applies polyfills, and defines custom elements.

LANGUAGE: ts
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Using Host Component in Stencil
DESCRIPTION: Demonstrates how to use the Host component to set attributes and event listeners on the host element. Shows conditional rendering of classes and aria attributes based on a prop.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Using Props in HTML and TSX
DESCRIPTION: Demonstrates how to use props when rendering a Stencil component in both HTML and TSX contexts.

LANGUAGE: tsx
CODE:
<todo-list name={"Tuesday's To-Do List"}></todo-list>

LANGUAGE: html
CODE:
<todo-list name="Tuesday's To-Do List"></todo-list>

----------------------------------------

TITLE: Basic Usage of @State() Decorator in Stencil
DESCRIPTION: This snippet demonstrates the basic usage of the @State() decorator in a Stencil component to manage internal state and trigger rerenders when the state changes.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Directory Structure Example for Stencil Components
DESCRIPTION: Example file structure showing recommended organization of component files, including implementation, styles, and tests.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Basic State Management in Stencil Component
DESCRIPTION: Demonstrates basic usage of @State() decorator to manage a component's internal state using a current time example. Shows how to declare state and use it in the render method.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Emitting Custom Events in Stencil Components
DESCRIPTION: Demonstrates how to use the @Event decorator to emit custom events from a Stencil component. The example shows a TodoList component that emits a 'todoCompleted' event.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Initializing a New Stencil Project with CLI
DESCRIPTION: Use the create-stencil CLI to scaffold a new Stencil project. This command initiates an interactive prompt to choose the type of project to start.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Rendering Basic JSX in Stencil Component
DESCRIPTION: Demonstrates the basic structure of a Stencil component using JSX to render a simple div with child elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: TypeScript Functional Component with Props Interface
DESCRIPTION: Shows how to use TypeScript with Functional Components by defining prop interfaces and using the FunctionalComponent generic type.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Using Host Component in Stencil TSX
DESCRIPTION: Demonstrates how to use the Host component to set attributes and event listeners on the host element. Shows conditional rendering of classes and aria attributes based on props.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Defining Props in Stencil Components
DESCRIPTION: Demonstrates how to define props using the @Prop() decorator in a Stencil component.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: HTML Form Integration Example
DESCRIPTION: Example showing how to use a custom form-associated component within an HTML form.

LANGUAGE: html
CODE:
<form>
  <custom-text-input name="my-custom-input"></custom-text-input>
</form>

----------------------------------------

TITLE: Using @State() with Complex Types in Stencil
DESCRIPTION: This example shows how to use @State() with a complex type (an array of objects). It demonstrates updating the state with new items and rendering the list, emphasizing the importance of reassignment for triggering rerenders.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Basic Stencil Config in TypeScript
DESCRIPTION: A minimal example of a Stencil configuration file that sets the namespace and source directory.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Implementing a Custom Text Input with Form Association
DESCRIPTION: This example shows a complete Stencil component for a custom text input that interacts with a form. It uses the AttachInternals decorator to access ElementInternals and demonstrates setting form values.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Basic Stencil Component Definition
DESCRIPTION: Shows the basic structure of defining a Stencil component using the @Component decorator with minimal configuration.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Implementing Async Lifecycle Method in Stencil
DESCRIPTION: This example demonstrates how to use componentWillLoad as an async method to fetch data before rendering. It returns a Promise to ensure the parent component waits for the data to load.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Advanced Form Handling in Stencil
DESCRIPTION: Implements a complex form with multiple input types including email and select elements. Features email validation using the constraint validation API and demonstrates handling of multiple select inputs with dynamic options.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Form-Associated Custom Element in Stencil
DESCRIPTION: Shows how to create a form-associated custom element using Stencil. This approach allows the component to integrate natively with surrounding form elements, leveraging built-in form features like validation and accessibility.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css',
  formAssociated: true
})
export class MyName {
  @State() value: string;
  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.internals.setFormValue(event.target.value);
  }

  render() {
    return (
      <label>
        Name:
        <input
          type="text"
          value={this.value}
          onInput={(event) => this.handleChange(event)}
        />
      </label>
    );
  }
}

----------------------------------------

TITLE: Using CSS Parts for Component Styling
DESCRIPTION: Example of implementing CSS parts to allow more flexible styling of component elements from outside the shadow DOM.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Initializing a Stencil Project with create-stencil CLI
DESCRIPTION: Command to start a new Stencil project using the create-stencil CLI. This will prompt the user to choose the type of project to create.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Updating Objects in Stencil Components
DESCRIPTION: Demonstrates the proper technique for updating objects in Stencil components using the spread operator. This approach ensures that @Watch decorators are triggered and component re-renders occur when object properties change.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Basic Form-Associated Component Setup in TypeScript
DESCRIPTION: Demonstrates the minimal setup required to create a form-associated component using the @Component decorator with formAssociated option.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Declaring Props in Stencil Components
DESCRIPTION: Example of declaring props in a Stencil component using the @Prop() decorator. Shows how to define props of different types and access them in the render method.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Basic Functional Component in Stencil
DESCRIPTION: Simple example of a functional component that renders a greeting with a name prop.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Using @Watch Decorator in Stencil Components
DESCRIPTION: Demonstrates how to use the @Watch decorator to monitor changes in @Prop and @State decorated class members. It shows how to watch multiple properties and handle changes to native HTML attributes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Basic Functional Component in Stencil
DESCRIPTION: Simple example of a functional component that renders a greeting with a name prop.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Defining Props with @Prop() Decorator in Stencil
DESCRIPTION: This snippet demonstrates how to use the @Prop() decorator to define properties in a Stencil component. It shows a basic TodoList component with a 'name' prop.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Testing Stencil Component with JSX Template
DESCRIPTION: Demonstrates testing a Stencil component using the template option with JSX syntax. Shows how to pass props and validate rendered output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Comprehensive E2E Test for Toggle Component
DESCRIPTION: Illustrates a more complex end-to-end test for a toggle component. It demonstrates setting content, spying on events, finding elements, setting properties, and making assertions about classes and event details.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Dynamic @State() Usage with Lifecycle Methods in Stencil
DESCRIPTION: Shows how to use @State() with lifecycle methods to create a dynamic component that updates and rerenders every second. It also demonstrates proper cleanup of timers.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Basic JSX Rendering in Stencil Component
DESCRIPTION: Demonstrates the basic structure of a Stencil component's render function using JSX to output HTML elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Basic E2E Test Setup in Stencil
DESCRIPTION: Demonstrates the basic structure of an E2E test in Stencil, including importing the newE2EPage function, setting up a test page, and asserting on rendered content.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Implementing Advanced Form Handling in Stencil Component
DESCRIPTION: This snippet showcases an advanced form implementation in a Stencil component. It includes multiple input types (text, email, select), state management for various form elements, input validation, and dynamic option rendering for select inputs.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Using Store in Stencil Component
DESCRIPTION: Example component implementing the store with a counter and timer. Shows how to consume and update store state within a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Basic Stencil Component Declaration in TypeScript
DESCRIPTION: Demonstrates the basic usage of @Component decorator to create a Stencil component with a custom element tag.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Basic JSX Component Rendering in Stencil
DESCRIPTION: Demonstrates the basic structure of a Stencil component using JSX to render HTML elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Using componentOnReady() in Stencil
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code after a component's first render cycle. This method returns a promise that resolves after componentDidRender() on the initial render.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Basic Prop Declaration in Stencil
DESCRIPTION: Basic example showing how to declare and use props in a Stencil component

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Complex State Management with Custom Types
DESCRIPTION: Demonstrates using @State with complex types and array manipulation in a todo list component.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Prop Validation in Stencil
DESCRIPTION: Shows how to implement prop validation using the @Watch decorator.

LANGUAGE: typescript
CODE:
import { Component, Prop, Watch, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class TodoList {
  @Prop() thingToDo!: string;

  @Watch('thingToDo')
  validateName(newValue: string, _oldValue: string) {
    const isBlank = typeof newValue !== 'string' || newValue === '';
    if (isBlank) { 
        throw new Error('thingToDo is a required property and cannot be empty') 
    };
    const has2chars = typeof newValue === 'string' && newValue.length >= 2;
    if (!has2chars) {
       throw new Error('thingToDo must have a length of more than 1 character')
    };
  }
}

----------------------------------------

TITLE: Testing Component Class Logic in Stencil
DESCRIPTION: This snippet demonstrates how to test the logic of a Stencil component class directly by instantiating it and calling its methods. It checks the state of a property before and after calling a method.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Basic Component Declaration in Stencil
DESCRIPTION: Demonstrates the basic usage of @Component decorator to create a Stencil component with a custom element tag.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Defining a Basic Stencil Component
DESCRIPTION: This code defines a basic Stencil component named 'my-component'. It demonstrates the use of the @Component decorator, @Prop for properties, and the render method for JSX output.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Using Host Component in Stencil TSX
DESCRIPTION: This snippet demonstrates how to use the Host component to set attributes and classes on the host element based on component properties.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Event Emitter Implementation in Stencil Component
DESCRIPTION: Demonstrates how to create and emit custom events using the @Event decorator in a Stencil component.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

export class TodoList {
  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Embedding Stencil Components
DESCRIPTION: This example demonstrates how to embed one Stencil component within another, showing the composition of components.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Component Toggle State Testing in Stencil
DESCRIPTION: Shows how to test a toggle component's state changes and event emissions using E2E testing

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Basic Usage of @State() Decorator in Stencil
DESCRIPTION: This snippet demonstrates the basic usage of the @State() decorator in a Stencil component. It shows how to import the decorator, apply it to a class member, and use the state in the render method.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Creating a Basic Functional Component in Stencil
DESCRIPTION: Demonstrates how to create a simple functional component that renders a greeting with a name prop.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Updating Objects in Stencil Components
DESCRIPTION: Shows how to properly update objects in Stencil components using the spread operator to ensure @Watch is triggered and the component re-renders.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Emitting Events with Event Decorator in Stencil
DESCRIPTION: Demonstrates how to use the @Event decorator to emit custom DOM events from a Stencil component using EventEmitter.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Basic Stencil Output Target Configuration
DESCRIPTION: Example configuration showing how to set up multiple output targets in a Stencil project's config file. Demonstrates configuring both 'dist' and 'www' output types.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Configuring Custom Event Options in Stencil
DESCRIPTION: Shows how to configure custom event options using the @Event decorator. The example demonstrates setting a custom event name, making the event composed, cancelable, and enabling bubbling.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Basic State Usage in Stencil Component
DESCRIPTION: Demonstrates basic usage of @State decorator to manage component state for displaying current time. Shows initialization and basic rendering.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Defining a Basic Stencil Component in TypeScript
DESCRIPTION: Example of a basic Stencil component written in TypeScript, demonstrating the use of @Component decorator, @Prop decorator, and the render function.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Basic Stencil Config Example
DESCRIPTION: Basic example of a Stencil configuration file showing namespace and source directory settings.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Demonstrating connectedCallback and componentWillLoad in Stencil
DESCRIPTION: This snippet shows how connectedCallback and componentWillLoad are called when a component is added to the DOM. It illustrates that connectedCallback can be called multiple times, while componentWillLoad is only called once.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Basic State Usage in Stencil Component
DESCRIPTION: Demonstrates basic usage of @State decorator to manage a simple time display component that updates every second.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Listening to Custom Events in Stencil Components
DESCRIPTION: Demonstrates how to use the @Listen decorator to handle custom events in a Stencil component. The example shows a TodoApp component listening for a 'todoCompleted' event.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Basic State Usage in Stencil Component
DESCRIPTION: Demonstrates basic usage of @State decorator to manage a simple time display component that updates every second.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Implementing Basic Form Handling in Stencil Component
DESCRIPTION: This snippet demonstrates a basic form implementation in a Stencil component. It includes state management for form input, handling form submission, and updating component state on input changes.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Using a Stencil Component in HTML and TSX
DESCRIPTION: Shows how to use a defined Stencil component in both HTML and TSX files after compilation.

LANGUAGE: html
CODE:
<!-- Here we use the component in an HTML file -->
<todo-list></todo-list>

LANGUAGE: tsx
CODE:
{/* Here we use the component in a TSX file */}
<todo-list></todo-list>

----------------------------------------

TITLE: Enabling Shadow DOM in Stencil Component
DESCRIPTION: Demonstrates how to enable Shadow DOM for a Stencil component by setting the 'shadow' option to true in the component decorator.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Configuring package.json for Stencil Component Library Distribution
DESCRIPTION: This JSON snippet demonstrates a common setup for a package.json file in a Stencil project. It includes various entry points for different module formats, type definitions, and file inclusions for npm distribution.

LANGUAGE: json
CODE:
{
  "main": "dist/index.cjs.js",
  "module": "dist/index.js",
  "es2015": "dist/esm/index.mjs",
  "es2017": "dist/esm/index.mjs",
  "types": "dist/types/components.d.ts",
  "unpkg": "dist/my-project-name/my-project-name.esm.js",
  "collection:main": "dist/collection/index.js",
  "collection": "dist/collection/collection-manifest.json",
  "files": [
    "dist/",
    "css/",
    "loader/"
  ]
}

----------------------------------------

TITLE: Basic Event Emission in Stencil Components
DESCRIPTION: Demonstrates how to emit custom DOM events using the @Event decorator and EventEmitter in a Stencil component.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Combining @State() with @Listen() for Event-Driven State Changes
DESCRIPTION: This snippet demonstrates how to use @State() in combination with @Listen() to create a component that updates its state in response to user interactions.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Creating Basic Functional Component in Stencil
DESCRIPTION: Demonstrates the simplest form of a functional component that accepts props and returns JSX markup.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Shadow DOM CSS Styling Example
DESCRIPTION: Demonstrates basic CSS styling within a Shadow DOM context, including usage of :host pseudo-class for styling the host element.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Defining Stencil Component Class Structure in TypeScript
DESCRIPTION: This comprehensive example demonstrates the recommended structure for a Stencil component class, including property declarations, lifecycle methods, event handling, and rendering logic.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {

  /**
   * 1. Own Properties
   * Always set the type if a default value has not
   * been set. If a default value is being set, then type
   * is already inferred. List the own properties in
   * alphabetical order. Note that because these properties
   * do not have the @Prop() decorator, they will not be exposed
   * publicly on the host element, but only used internally.
   */
  num: number;
  someText = 'default';

  /**
   * 2. Reference to host HTML element.
   * Inlined decorator
   */
  @Element() el: HTMLElement;

  /**
   * 3. State() variables
   * Inlined decorator, alphabetical order.
   */
  @State() isValidated: boolean;
  @State() status = 0;

  /**
   * 4. Public Property API
   * Inlined decorator, alphabetical order. These are
   * different than "own properties" in that public props
   * are exposed as properties and attributes on the host element.
   * Requires JSDocs for public API documentation.
   */
  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  /**
   * Prop lifecycle events SHOULD go just behind the Prop they listen to.
   * This makes sense since both statements are strongly connected.
   * - If renaming the instance variable name you must also update the name in @Watch()
   * - Code is easier to follow and maintain.
   */
  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  /**
   * 5. Events section
   * Inlined decorator, alphabetical order.
   * Requires JSDocs for public API documentation.
   */
  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  /**
   * 6. Component lifecycle events
   * Ordered by their natural call order, for example
   * WillLoad should go before DidLoad.
   */
  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  /**
   * 7. Listeners
   * It is ok to place them in a different location
   * if makes more sense in the context. Recommend
   * starting a listener method with "on".
   * Always use two lines.
   */
  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  /**
   * 8. Public methods API
   * These methods are exposed on the host element.
   * Always use two lines.
   * Public Methods must be async.
   * Requires JSDocs for public API documentation.
   */
  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  /**
   * 9. Local methods
   * Internal business logic. These methods cannot be
   * called from the host element.
   */
  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  /**
   * 10. render() function
   * Always the last public method in the class.
   * If private methods present, they are below public methods.
   */
  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Using componentOnReady() in TypeScript
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code when a Stencil component has finished its first render cycle. This method returns a promise that resolves after componentDidRender() on the first render cycle.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Basic Stencil Output Target Configuration in TypeScript
DESCRIPTION: Example configuration showing how to set up multiple output targets in a Stencil project using the Config interface. Demonstrates setting up both 'dist' and 'www' output types.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Basic Form Implementation in Stencil
DESCRIPTION: Demonstrates a simple form component with a single text input and submit handler. Shows basic state management and event handling for form submissions.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Declaring Props in Stencil Components
DESCRIPTION: Demonstrates how to declare properties in a Stencil component using the @Prop() decorator.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Defining a Public Method with @Method Decorator in Stencil
DESCRIPTION: Demonstrates how to use the @Method decorator to expose a public async method on a Stencil component. This example shows a 'showPrompt' method being defined on a TodoList component.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Defining a Public Method in Stencil Component
DESCRIPTION: Demonstrates how to use the @Method() decorator to expose a public method on a Stencil component. The method is async and can be called directly from the element.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Defining a Basic Stencil Component
DESCRIPTION: Example of a basic Stencil component definition. This component uses the @Component decorator to specify metadata and defines properties using the @Prop decorator.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Updating Arrays in Stencil Components
DESCRIPTION: Illustrates the correct way to update arrays in Stencil components to trigger @Watch() and component re-renders. It uses the spread operator to create a new array reference, which is necessary for Stencil to detect changes.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Querying Elements in Shadow DOM
DESCRIPTION: Illustrates how to query elements within the Shadow DOM of a Stencil component using the @Element decorator and shadowRoot property.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Rendering Basic JSX in Stencil Component
DESCRIPTION: Demonstrates how to use the render function to output a tree of components using JSX syntax in a Stencil component.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Basic JSX Component Rendering in Stencil
DESCRIPTION: Demonstrates the basic structure of a Stencil component using JSX to render HTML elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Using Watch Decorator with Props and State in Stencil
DESCRIPTION: Demonstrates how to use the @Watch decorator to monitor changes in component props and state. Shows multiple watch methods including watching multiple properties.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Testing Component Class Logic in TypeScript
DESCRIPTION: Illustrates how to test the logic of a Stencil component by directly instantiating the component class and calling its methods. This approach is useful for testing simple logic without rendering the component.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Implementing a Custom Text Input with Form Association
DESCRIPTION: Creates a custom text input component that interacts with a form using the ElementInternals API. It sets a default value and updates the form value on input changes.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Implementing Auto-updating State in Stencil
DESCRIPTION: Shows how to implement an auto-updating time display using @State with lifecycle methods. Demonstrates proper state updates and cleanup using connectedCallback and disconnectedCallback.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Demonstrating connectedCallback and componentWillLoad in Stencil
DESCRIPTION: This snippet shows how connectedCallback and componentWillLoad are called when a component is added to the DOM. It illustrates that connectedCallback can be called multiple times, while componentWillLoad is only called once.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Stencil Component Class Structure Example
DESCRIPTION: Comprehensive example of a well-structured Stencil component class following the style guide, including decorators, lifecycle methods, and proper organization.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {
  num: number;
  someText = 'default';

  @Element() el: HTMLElement;

  @State() isValidated: boolean;
  @State() status = 0;

  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Generating a Stencil Component using CLI
DESCRIPTION: Demonstrates how to use the Stencil CLI to generate a new component. It shows the command to generate a component named 'my-new-component' and explains the resulting directory structure.

LANGUAGE: bash
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Variable Casing Example
DESCRIPTION: Demonstrates how to handle camelCase prop names in both TSX and HTML usage

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() thingToDo: string;

    render() {
        return <div>{this.thingToDo}</div>;
    }
}

LANGUAGE: html
CODE:
<todo-list-item thing-to-do="Learn about Stencil Props"></todo-list-item>

----------------------------------------

TITLE: Using Store in Stencil Component
DESCRIPTION: Example of implementing store state management within a Stencil component, showing reactive updates and state consumption

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Using @Watch Decorator in Stencil Components
DESCRIPTION: Demonstrates how to use the @Watch decorator to monitor changes in @Prop and @State decorated class members. It shows how to watch multiple properties and handle both prop and state changes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Using a Stencil Component in HTML and TSX
DESCRIPTION: This snippet shows how to use a defined Stencil component in both HTML and TSX files after compilation.

LANGUAGE: html
CODE:
<!-- Here we use the component in an HTML file -->
<todo-list></todo-list>

LANGUAGE: typescript
CODE:
{/* Here we use the component in a TSX file */}
<todo-list></todo-list>

----------------------------------------

TITLE: Styling CSS Parts from Light DOM
DESCRIPTION: Demonstrates how to style CSS parts defined in a Stencil component from the light DOM.

LANGUAGE: css
CODE:
shadow-card::part(heading) {
  text-transform: uppercase;
}

----------------------------------------

TITLE: Using a Custom Form-Associated Component in HTML
DESCRIPTION: This HTML snippet shows how to use a custom form-associated component within a form element.

LANGUAGE: html
CODE:
<form>
  <custom-text-input name="my-custom-input"></custom-text-input>
</form>

----------------------------------------

TITLE: Structuring Stencil Component Files
DESCRIPTION: This snippet demonstrates the recommended file structure for organizing Stencil components, with each component having its own directory containing implementation, styles, and tests.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Emitting Events with Event Decorator in Stencil
DESCRIPTION: Demonstrates how to use the @Event decorator to emit custom DOM events from a Stencil component. Shows basic implementation of an EventEmitter for a todo list component.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Watch Decorator Implementation in Stencil Component
DESCRIPTION: Demonstrates using the @Watch decorator to monitor changes in @Prop and @State decorated class members. Shows how to watch multiple properties and handle value changes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Implementing Custom Text Input with Form Association
DESCRIPTION: Complete example of a custom text input component that integrates with forms using ElementInternals. Shows state management, value setting, and event handling.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Advanced Screenshot Comparison in Stencil E2E Test
DESCRIPTION: Comprehensive example of screenshot comparison testing in Stencil, including setting global styles, finding elements, and using different comparison methods with allowable mismatch thresholds.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    const results = await page.compareScreenshot();

    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Handling User Input in Stencil Components
DESCRIPTION: Shows how to handle user input events like button clicks and input changes using native DOM events in Stencil components.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Basic State Management in Stencil Component
DESCRIPTION: Demonstrates basic usage of @State() decorator to manage a simple numeric state value for displaying current time.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Custom Clock Component Implementation in Stencil
DESCRIPTION: Complete example showing how to implement a clock component using various lifecycle methods to manage a timer.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Interactive State Management with Lifecycle Methods
DESCRIPTION: Shows how to update state periodically using lifecycle methods connectedCallback and disconnectedCallback, demonstrating proper state management and cleanup.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;
    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Implementing Custom Text Input with Form Association
DESCRIPTION: Complete implementation of a custom text input component that integrates with forms using ElementInternals.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Advanced Form with Multiple Inputs in Stencil
DESCRIPTION: Implements a complex form with email validation, multiple select inputs, and dynamic options rendering. Demonstrates handling different input types and form validation.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Documenting Component Properties in TypeScript/Stencil
DESCRIPTION: Example showing how to add documentation to a Stencil component property using JSDoc comments. The @Prop decorator is used to define a component property with an optional description.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Defining Stencil Component Structure in TypeScript
DESCRIPTION: Demonstrates the recommended structure for a Stencil component class, including decorators, lifecycle methods, and render function.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {

  /**
   * 1. Own Properties
   * Always set the type if a default value has not
   * been set. If a default value is being set, then type
   * is already inferred. List the own properties in
   * alphabetical order. Note that because these properties
   * do not have the @Prop() decorator, they will not be exposed
   * publicly on the host element, but only used internally.
   */
  num: number;
  someText = 'default';

  /**
   * 2. Reference to host HTML element.
   * Inlined decorator
   */
  @Element() el: HTMLElement;

  /**
   * 3. State() variables
   * Inlined decorator, alphabetical order.
   */
  @State() isValidated: boolean;
  @State() status = 0;

  /**
   * 4. Public Property API
   * Inlined decorator, alphabetical order. These are
   * different than "own properties" in that public props
   * are exposed as properties and attributes on the host element.
   * Requires JSDocs for public API documentation.
   */
  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  /**
   * Prop lifecycle events SHOULD go just behind the Prop they listen to.
   * This makes sense since both statements are strongly connected.
   * - If renaming the instance variable name you must also update the name in @Watch()
   * - Code is easier to follow and maintain.
   */
  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  /**
   * 5. Events section
   * Inlined decorator, alphabetical order.
   * Requires JSDocs for public API documentation.
   */
  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  /**
   * 6. Component lifecycle events
   * Ordered by their natural call order, for example
   * WillLoad should go before DidLoad.
   */
  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  /**
   * 7. Listeners
   * It is ok to place them in a different location
   * if makes more sense in the context. Recommend
   * starting a listener method with "on".
   * Always use two lines.
   */
  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  /**
   * 8. Public methods API
   * These methods are exposed on the host element.
   * Always use two lines.
   * Public Methods must be async.
   * Requires JSDocs for public API documentation.
   */
  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  /**
   * 9. Local methods
   * Internal business logic. These methods cannot be
   * called from the host element.
   */
  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  /**
   * 10. render() function
   * Always the last public method in the class.
   * If private methods present, they are below public methods.
   */
  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Enabling Shadow DOM for a Stencil Component
DESCRIPTION: Shows two examples of enabling Shadow DOM for a Stencil component, with and without the delegatesFocus option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: true
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: { 
    delegatesFocus: true,
  }
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Defining a Basic Functional Component in Stencil
DESCRIPTION: Demonstrates the simplest form of a functional component that takes props and returns JSX.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Testing Rendered HTML with newSpecPage in TypeScript
DESCRIPTION: Demonstrates basic component testing using newSpecPage() to validate rendered HTML output. The test verifies if a component renders with expected content.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Dynamic @State Usage with Timer in Stencil Component
DESCRIPTION: Shows how to use @State with a timer to update the component's state and trigger rerenders periodically.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Implementing Custom Text Input with Form Association
DESCRIPTION: Complete implementation of a custom text input component that integrates with forms using ElementInternals.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Component Hierarchy Example in Stencil
DESCRIPTION: Shows the component hierarchy and the order of lifecycle method execution when nested components are used.

LANGUAGE: markup
CODE:
  <cmp-a>
    <cmp-b>
      <cmp-c></cmp-c>
    </cmp-b>
  </cmp-a>

----------------------------------------

TITLE: Using Refs for DOM Element References in Stencil
DESCRIPTION: Illustrates how to use refs in JSX to get direct references to DOM elements within Stencil components, useful for form handling and direct DOM manipulation.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'app-home',
})
export class AppHome {

  textInput!: HTMLInputElement;

  handleSubmit = (event: Event) => {
    event.preventDefault();
    console.log(this.textInput.value);
  }

  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <label>
          Name:
          <input type="text" ref={(el) => this.textInput = el as HTMLInputElement} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Testing Component Class Logic in TypeScript
DESCRIPTION: Demonstrates how to test a Stencil component's class logic directly by instantiating the component and calling its methods. This approach is useful for testing simple logic without rendering the component.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Using Host Component in Stencil
DESCRIPTION: Demonstrates how to use the Host functional component to set attributes and event listeners on the host element. Shows conditional rendering based on a prop value.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Basic Component Testing with newSpecPage
DESCRIPTION: Example showing how to test a basic Stencil component using newSpecPage() utility. Tests component rendering with HTML initialization.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Basic Stencil Config in TypeScript
DESCRIPTION: Example of a minimal stencil.config.ts file setting the namespace and source directory.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Using @Watch Decorator in Stencil Components
DESCRIPTION: Demonstrates how to use the @Watch decorator to observe changes in @Prop and @State decorated class members. It shows how to watch multiple properties and handle both prop and state changes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Implementing Async Lifecycle Method in Stencil
DESCRIPTION: This example shows how to use an async lifecycle method (componentWillLoad) to fetch data before rendering. It demonstrates returning a Promise to ensure the parent component waits for the data to load.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Implementing a Clock Component with Lifecycle Methods in Stencil
DESCRIPTION: This example demonstrates the use of connectedCallback and disconnectedCallback to create a clock component. The timer is started when the component is connected to the DOM and stopped when it's disconnected, showcasing proper resource management.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Basic Form Implementation in Stencil
DESCRIPTION: Demonstrates a simple form component with a single text input field and submit handler. The component uses State decoration for value management and includes basic event handling for form submission and input changes.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Implementing a Custom Text Input with Form Association
DESCRIPTION: Creates a custom text input component that interacts with a form using ElementInternals. It sets a default value and updates the form value on input changes.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Implementing Event Emitter in Stencil Component
DESCRIPTION: Demonstrates how to use the @Event decorator to emit custom DOM events from a Stencil component. Shows basic implementation of EventEmitter with a Todo type.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Declaring Props in Stencil Components
DESCRIPTION: Example of declaring properties on a Stencil component using the @Prop decorator. Shows how to define a string prop and use it in the render method.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Documenting Component Properties in Stencil using TypeScript
DESCRIPTION: Demonstrates how to add documentation to Stencil component properties using JSDoc comments. The example shows documenting an optional icon property with a description.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Implementing Event Emitter in Stencil Component
DESCRIPTION: Demonstrates how to use the @Event decorator to emit custom DOM events from a Stencil component. Shows basic implementation of EventEmitter with a Todo type.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Using @Watch Decorator in Stencil Components
DESCRIPTION: Demonstrates how to use the @Watch decorator to monitor changes in props and state within a Stencil component. It shows watching multiple properties and handling both prop and state changes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Defining a Basic Functional Component in Stencil
DESCRIPTION: Demonstrates the simplest form of a functional component in Stencil, which takes props and returns JSX.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Defining a Basic Functional Component in Stencil
DESCRIPTION: Demonstrates how to create a simple functional component that takes props and returns JSX.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Using Store in Stencil Component
DESCRIPTION: Implementation example showing how to integrate the store within a Stencil component. Demonstrates state usage, automatic updates, and component rendering with store values.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Advanced Form Implementation in Stencil TSX
DESCRIPTION: Demonstrates an advanced form with multiple input types including email and select fields. Includes email validation using the constraint validation API and handling of multiple select inputs.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Implementing Basic Form in Stencil Component
DESCRIPTION: This snippet demonstrates a basic form implementation in a Stencil component. It includes state management for form input, handling form submission, and updating state on input change.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Implementing Watch Decorator in Stencil Component
DESCRIPTION: Demonstrates how to use the @Watch decorator to monitor changes in @Prop and @State decorated class members. Shows methods for watching multiple properties and handling value changes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: Example demonstrating how to use Build.isDev conditional in a Stencil component to execute different code paths in development versus production environments. The component imports the Build utility from @stencil/core and uses it within the componentDidLoad lifecycle method.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Using CSS Custom Properties in Stencil
DESCRIPTION: Demonstrates the definition and usage of CSS custom properties (CSS variables) in Stencil components for style customization.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Creating a Stencil Store
DESCRIPTION: Example of creating a store with state management and change handlers. Demonstrates store initialization with multiple properties and implementing an onChange listener for derived state.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Prop Validation with @Watch Decorator
DESCRIPTION: Shows how to perform prop validation using the @Watch decorator in a Stencil component.

LANGUAGE: typescript
CODE:
import { Component, Prop, Watch, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class TodoList {
  @Prop() thingToDo!: string;

  @Watch('thingToDo')
  validateName(newValue: string, _oldValue: string) {
    const isBlank = typeof newValue !== 'string' || newValue === '';
    if (isBlank) { 
        throw new Error('thingToDo is a required property and cannot be empty') 
    };
    const has2chars = typeof newValue === 'string' && newValue.length >= 2;
    if (!has2chars) {
       throw new Error('thingToDo must have a length of more than 1 character')
    };
  }
}

----------------------------------------

TITLE: Testing Functional Components in Stencil
DESCRIPTION: Illustrates how to test functional components using newSpecPage(). It shows rendering of imported and inline-defined functional components, and asserting their combined output.

LANGUAGE: tsx
CODE:
import { Fragment, h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyFunctionalComponent } from '../my-functional-cmp';

it('should render my component', async () => {
  const AnotherFunctionalComponent = (props: any, children: typeof Fragment) => (
    <section>{children}</section>
  );

  const page = await newSpecPage({
    components: [],
    template: () => (
      <AnotherFunctionalComponent>
        <MyFunctionalComponent>Hello World!</MyFunctionalComponent>
      </AnotherFunctionalComponent>
    ),
  });
  expect(page.root).toEqualHtml(`
    <section>
      <div>
        Hello World!
      </div>
    </section>
  `);
});

----------------------------------------

TITLE: Stencil Component Class Structure Example
DESCRIPTION: Comprehensive example showing the recommended organization of a Stencil component class, including decorators, lifecycle methods, and proper ordering of different component elements.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {
  num: number;
  someText = 'default';

  @Element() el: HTMLElement;

  @State() isValidated: boolean;
  @State() status = 0;

  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Basic Stencil Component Implementation
DESCRIPTION: Example of a Stencil component with props and rendering logic using TypeScript and JSX

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Implementing Watch Decorator in Stencil Component
DESCRIPTION: Demonstrates how to use the @Watch decorator to monitor changes in @Prop and @State decorated class members. Shows multiple watch methods including watching multiple properties.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Using Functional Components with Props
DESCRIPTION: Example showing how to use a functional component with props in JSX.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Project Setup Commands
DESCRIPTION: Commands for setting up a new Stencil project after scaffolding.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Defining a Public Method with @Method() Decorator in Stencil
DESCRIPTION: This snippet demonstrates how to use the @Method() decorator to expose a public method on a Stencil component. The method must be async and can be called directly from the element.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Complex Template Content in Stencil
DESCRIPTION: Demonstrates how to return multiple top-level elements in the render function using an array or Fragment.

LANGUAGE: tsx
CODE:
import { Fragment } from '@stencil/core';
...
render() {
  return (<Fragment>
    <div class="container">
      <ul>
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
      </ul>
    </div>

    <div class="another-container">
      ... more html content ...
    </div>
  </Fragment>);
}

----------------------------------------

TITLE: Basic Prop Declaration in Stencil Component
DESCRIPTION: Example showing how to declare a basic string prop in a Stencil component using the @Prop decorator

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Creating a Form-Associated Stencil Component
DESCRIPTION: This snippet shows how to create a form-associated Stencil component using the 'formAssociated' option. This allows the component to participate in forms using the ElementInternals API.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Combining @State() with @Listen() in Stencil Component
DESCRIPTION: Demonstrates how to use @State() in conjunction with @Listen() to create an interactive toggle button component that responds to click events.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Using Stencil Store in Components
DESCRIPTION: Demonstration of how to use the store within a Stencil component, including state updates and rendering.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Basic State Usage in Stencil Component
DESCRIPTION: Demonstrates basic usage of @State decorator to manage current time in a component. Shows initial implementation without updates.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Event Type Conflict Resolution in Stencil
DESCRIPTION: Demonstrates two approaches to resolve conflicts between Stencil Event type and native web Event type using import aliasing or namespace qualification.

LANGUAGE: typescript
CODE:
import { Event as StencilEvent, EventEmitter } from '@stencil/core';

@StencilEvent() myEvent: EventEmitter<{value: string, ev: Event}>;

----------------------------------------

TITLE: Basic Stencil Component Implementation
DESCRIPTION: Example of a basic Stencil component with properties and rendering logic

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Using @Watch Decorator in Stencil Components
DESCRIPTION: Demonstrates how to use the @Watch decorator to monitor changes in @Prop and @State decorated class members, as well as native HTML attributes. It shows how to define watch handlers for single and multiple properties.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Setting Component Mode with setMode() in TypeScript
DESCRIPTION: Demonstrates how to use the setMode() utility to set the style mode of a component based on an attribute. This function is typically used in the component's initialization.

LANGUAGE: typescript
CODE:
import { setMode } from '@stencil/core'

// set mode based on a property
setMode((el) => el.getAttribute('mode'));

----------------------------------------

TITLE: Defining a Basic Functional Component in Stencil
DESCRIPTION: Demonstrates the simplest form of a functional component in Stencil, which takes props and returns JSX.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Generating Stencil Component Using CLI
DESCRIPTION: Command to generate a new Stencil component using the CLI generator. This command creates a component with the specified name in the src/components directory.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Using Functional Components with Props in Stencil
DESCRIPTION: Demonstrates how to use a functional component by passing props through attributes.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Generating a Stencil Component using CLI
DESCRIPTION: Demonstrates how to use the Stencil CLI to generate a new component. It shows both the interactive method and the direct command line approach for creating components, including specifying sub-folders.

LANGUAGE: shell
CODE:
stencil generate my-new-component

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Using Build Constants in Stencil Component
DESCRIPTION: This code snippet demonstrates how to use Build constants from @stencil/core to conditionally execute code based on development/production mode and browser/server environment. It imports the Build object and uses it within the componentDidLoad lifecycle method.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Using componentOnReady in TypeScript
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code after a component's first render cycle completes. This method returns a promise that resolves after componentDidRender() on the initial render.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Component Connection Example - Stencil TSX
DESCRIPTION: Demonstrates how connectedCallback() is called when a component is attached to the DOM, showing that it can be called multiple times while componentWillLoad() is only called once.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Basic Prop Declaration in Stencil Component
DESCRIPTION: Shows how to declare a basic property using @Prop() decorator and use it within a component

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Object Updates with Watch Decorator in Stencil
DESCRIPTION: Demonstrates proper object updates in Stencil components using the spread operator to ensure @Watch detection and component updates. Shows a timer-based example with object mutation.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Documenting Component Properties in Stencil (TSX)
DESCRIPTION: This snippet demonstrates how to add a description to a @Prop in Stencil using a JSDoc comment. The comment is placed on the line preceding the property declaration.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Form Associated Component
DESCRIPTION: Shows how to create a form-associated Stencil component that can participate in forms using ElementInternals API.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Configuring Stencil Dev Server in TypeScript
DESCRIPTION: This snippet demonstrates how to configure Stencil's dev server using TypeScript. It shows setting custom options like reload strategy, port, and HTTPS configuration using SSL certificates.

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8')
    }
  }
};

----------------------------------------

TITLE: Dynamic State Updates with @State() in Stencil
DESCRIPTION: This example shows how to update @State() decorated properties dynamically. It uses lifecycle methods to set up an interval that updates the state every second, triggering rerenders.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Using Build Constants in Stencil Component
DESCRIPTION: This code snippet demonstrates how to use Build constants from @stencil/core to conditionally execute code based on development/production mode and browser/server environment. It imports the Build object and uses it within the componentDidLoad lifecycle method.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Valid and Invalid Method Implementations in Stencil
DESCRIPTION: Examples of correct and incorrect implementations of public methods using the @Method decorator, demonstrating the async requirement.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Composing Stencil Components
DESCRIPTION: This example demonstrates how to compose Stencil components by embedding one component within another. It shows a parent component that includes a child component in its render function.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Implementing Basic Form in Stencil Component
DESCRIPTION: This snippet demonstrates a basic form implementation in a Stencil component. It includes a text input and submit button, with state management and event handling for form submission and input changes.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Basic Form Implementation in Stencil
DESCRIPTION: Demonstrates a basic form component implementation with a single text input field. Shows how to handle form submission and input changes using State decorator and event handlers.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Implementing Watch Decorator in Stencil Component
DESCRIPTION: Demonstrates how to use @Watch decorator to monitor changes in @Prop and @State decorated class members, including watching multiple properties and native HTML attributes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Defining Stencil Component Structure in TypeScript
DESCRIPTION: This comprehensive example illustrates the recommended structure for a Stencil component class, including property declarations, lifecycle methods, and render function.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {

  /**
   * 1. Own Properties
   * Always set the type if a default value has not
   * been set. If a default value is being set, then type
   * is already inferred. List the own properties in
   * alphabetical order. Note that because these properties
   * do not have the @Prop() decorator, they will not be exposed
   * publicly on the host element, but only used internally.
   */
  num: number;
  someText = 'default';

  /**
   * 2. Reference to host HTML element.
   * Inlined decorator
   */
  @Element() el: HTMLElement;

  /**
   * 3. State() variables
   * Inlined decorator, alphabetical order.
   */
  @State() isValidated: boolean;
  @State() status = 0;

  /**
   * 4. Public Property API
   * Inlined decorator, alphabetical order. These are
   * different than "own properties" in that public props
   * are exposed as properties and attributes on the host element.
   * Requires JSDocs for public API documentation.
   */
  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  /**
   * Prop lifecycle events SHOULD go just behind the Prop they listen to.
   * This makes sense since both statements are strongly connected.
   * - If renaming the instance variable name you must also update the name in @Watch()
   * - Code is easier to follow and maintain.
   */
  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  /**
   * 5. Events section
   * Inlined decorator, alphabetical order.
   * Requires JSDocs for public API documentation.
   */
  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  /**
   * 6. Component lifecycle events
   * Ordered by their natural call order, for example
   * WillLoad should go before DidLoad.
   */
  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  /**
   * 7. Listeners
   * It is ok to place them in a different location
   * if makes more sense in the context. Recommend
   * starting a listener method with "on".
   * Always use two lines.
   */
  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  /**
   * 8. Public methods API
   * These methods are exposed on the host element.
   * Always use two lines.
   * Public Methods must be async.
   * Requires JSDocs for public API documentation.
   */
  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  /**
   * 9. Local methods
   * Internal business logic. These methods cannot be
   * called from the host element.
   */
  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  /**
   * 10. render() function
   * Always the last public method in the class.
   * If private methods present, they are below public methods.
   */
  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Basic Functional Component Implementation in Stencil TSX
DESCRIPTION: Shows the basic syntax for creating a functional component that accepts props and renders JSX.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Enabling Shadow DOM in Stencil Component
DESCRIPTION: Demonstrates how to enable Shadow DOM for a Stencil component by setting the 'shadow' option to true in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Configuring Event Options in Stencil Components
DESCRIPTION: Shows how to configure custom event options using the @Event decorator in Stencil. The example sets the event name, composition, cancelability, and bubbling behavior.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Basic Form Implementation in Stencil
DESCRIPTION: Demonstrates a basic form implementation in a Stencil component with a single text input field. Shows state management and form submission handling.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Using @Watch Decorator in Stencil Components
DESCRIPTION: Demonstrates how to use the @Watch decorator to monitor changes in @Prop and @State decorated class members, as well as native HTML attributes. It shows how to define watch handlers for single and multiple properties.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Using Host Component for Attribute Rendering in Stencil
DESCRIPTION: Demonstrates how to use the Host component to set attributes and event listeners on the host element in a Stencil component. It shows conditional rendering of attributes based on component properties.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Accessing Typed Stencil Components in TypeScript
DESCRIPTION: Demonstrates how to access strongly-typed Stencil components using the automatically generated HTML element interfaces. Shows proper type annotation for an ion-button element using HTMLIonButtonElement interface.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Configuring Basic Stencil Output Targets in TypeScript
DESCRIPTION: Example configuration showing how to set up multiple output targets in a Stencil project's config file. Demonstrates setting up both 'dist' and 'www' output types.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Handling User Input in Stencil
DESCRIPTION: Demonstrates how to handle user input events like button clicks and input changes in Stencil components.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Configuring HTTPS for Stencil Dev Server in TypeScript
DESCRIPTION: Example configuration showing how to set up HTTPS for the Stencil dev server by providing SSL certificate and key files. The configuration also demonstrates setting a custom port and reload strategy.

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8'),
    },
  },
};

----------------------------------------

TITLE: Form-Associated Custom Element in Stencil
DESCRIPTION: Shows how to create a form-associated custom element that integrates natively with HTML forms. Includes form value setting and internal state management.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css',
  formAssociated: true
})
export class MyName {
  @State() value: string;
  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.internals.setFormValue(event.target.value);
  }

  render() {
    return (
      <label>
        Name:
        <input
          type="text"
          value={this.value}
          onInput={(event) => this.handleChange(event)}
        />
      </label>
    );
  }
}

----------------------------------------

TITLE: Basic E2E Test Setup in Stencil
DESCRIPTION: Demonstrates the basic structure of an E2E test using Stencil's testing utilities to render and verify a component.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Implementing a Custom Text Input with Form Association
DESCRIPTION: This example shows a complete Stencil component implementing a custom text input that interacts with a form. It uses the @AttachInternals decorator to access the ElementInternals object and demonstrates setting form values.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Using Host Component for Attribute Rendering in Stencil
DESCRIPTION: Demonstrates how to use the Host component to set attributes and event listeners on the host element in a Stencil component. It shows conditional rendering of attributes based on component properties.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Testing Rendered Component with newSpecPage
DESCRIPTION: Example showing how to test a rendered Stencil component using newSpecPage() utility. Tests component HTML output against expected result.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Form-Associated Custom Element in Stencil
DESCRIPTION: Shows how to create a form-associated custom element that integrates natively with form tags. Uses ElementInternals for form integration and value management.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css',
  formAssociated: true
})
export class MyName {
  @State() value: string;
  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.internals.setFormValue(event.target.value);
  }

  render() {
    return (
      <label>
        Name:
        <input
          type="text"
          value={this.value}
          onInput={(event) => this.handleChange(event)}
        />
      </label>
    );
  }
}

----------------------------------------

TITLE: Testing Component Rendering with newSpecPage in TypeScript
DESCRIPTION: Example showing how to test a Stencil component's rendered HTML output using newSpecPage() utility. The test validates that the component renders with expected content.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Querying Elements in Shadow DOM
DESCRIPTION: Illustrates how to query elements within a component's Shadow DOM using the @Element decorator and shadowRoot property.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Setting Up a New Stencil Project
DESCRIPTION: Commands to navigate to the project directory, install dependencies, and start the development server for a new Stencil project.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Event Listener Implementation in Stencil
DESCRIPTION: Demonstrates how to use the @Listen decorator to handle DOM events, including custom events emitted from child components.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Applying Styles to Stencil Components
DESCRIPTION: Demonstrates different ways to apply styles to Stencil components, including using styleUrl for external stylesheets, styleUrls for multiple stylesheets or mode-specific styles, and inline styles with the styles option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrl: './todo-list.css',
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrls: {
     ios: 'todo-list-1.ios.scss',
     md: 'todo-list-2.md.scss',
  }
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styles: 'div { background-color: #fff }'
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Emitting Custom DOM Events in Stencil Components
DESCRIPTION: Demonstrates how to use the @Event decorator to emit custom DOM events from a Stencil component. The example shows a TodoList component emitting a 'todoCompleted' event.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Using @Watch Decorator in Stencil Components
DESCRIPTION: Demonstrates how to use the @Watch decorator to observe changes in @Prop and @State decorated class members. It shows how to watch multiple properties and handle updates for both props and state.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Initializing a Stencil Project with create-stencil CLI
DESCRIPTION: Command to run the create-stencil CLI for scaffolding a new Stencil project. It provides options for creating standalone components or entire apps.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: CSS Custom Properties Documentation
DESCRIPTION: Example of documenting CSS custom properties using JSDoc comments in component styles

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Testing Components with JSX Template in TSX
DESCRIPTION: Demonstrates testing a component using the template option with JSX syntax. Shows how to pass props to a component and validate its rendered output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: CSS Custom Properties Documentation
DESCRIPTION: Example of documenting CSS custom properties using JSDoc comments in component styles

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Creating a Custom Clock Component in Stencil
DESCRIPTION: This example shows a complete Stencil component that implements a clock. It uses connectedCallback to start a timer and disconnectedCallback to clean it up. The component updates its state every second to display the current time.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Using componentOnReady in TypeScript
DESCRIPTION: Example showing how to use componentOnReady() to execute code after a component's first render cycle is complete.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Basic State Implementation in Stencil Component
DESCRIPTION: Demonstrates basic usage of @State() decorator to manage a component's internal state with a current time display example.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Array Updates with Watch in Stencil
DESCRIPTION: Shows how to properly update arrays in Stencil components using immutable operations to trigger component updates and @Watch handlers. Includes example with interval-based updates.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Basic Form-Associated Component Declaration in Stencil
DESCRIPTION: Demonstrates how to declare a basic form-associated component using the formAssociated option in the @Component decorator.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Updating Arrays in Stencil Component
DESCRIPTION: Illustrates how to update arrays in a Stencil component using non-mutable array operations to trigger component updates. It uses the spread operator to create a new array reference.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Rendering and Testing a Stencil Component with newSpecPage()
DESCRIPTION: This snippet demonstrates how to use newSpecPage() to render a Stencil component and test its output using Jest. It imports the component, creates a test page, and uses toEqualHtml() to verify the rendered HTML.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Handling User Input in Stencil Components
DESCRIPTION: Shows how to handle user input events like button clicks and input changes in Stencil components.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

LANGUAGE: tsx
CODE:
export class MyComponent {
  private inputChanged = (event: Event) => {
    console.log('input changed: ', (event.target as HTMLInputElement).value);
  }

  render() {
    return (
      <input onChange={this.inputChanged}/>
    );
  }
}

----------------------------------------

TITLE: Basic Prop Declaration
DESCRIPTION: Shows how to declare a basic string property using the @Prop decorator

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Basic Method Decorator Implementation in Stencil
DESCRIPTION: Demonstrates how to implement a basic public method using the @Method() decorator in a Stencil component. The method must be async and can be called from outside the component.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Testing Component with JSX Template in Stencil
DESCRIPTION: Shows how to use the template option in newSpecPage() to test a component initialized with properties using JSX syntax. This example tests the MyCmp component with a greeting property.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Documenting Properties in a Stencil Component
DESCRIPTION: This snippet demonstrates how to document properties in a Stencil component using the @Prop() decorator and JSDoc comments. This information will be used to generate the Properties section in the README.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * The first name
   */
  @Prop() first!: string; // the '!' denotes a required property
  /**
   * @deprecated since v2.1.0
   */
  @Prop() middle: string;
  @Prop() lastName = "Smith";

  // ...
}

----------------------------------------

TITLE: Calling a Public Method on a Stencil Component
DESCRIPTION: This snippet shows how to call a public method on a Stencil component. It ensures the component is defined using customElements.whenDefined before calling the method.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Conditional Rendering in JSX
DESCRIPTION: Demonstrates different approaches to conditional rendering including if/else statements and ternary operators.

LANGUAGE: tsx
CODE:
render() {
  if (this.name) {
    return ( <div>Hello {this.name}</div> )
  } else {
    return ( <div>Hello, World</div> )
  }
}

----------------------------------------

TITLE: Basic E2E Test Setup in Stencil
DESCRIPTION: Demonstrates the basic setup for an end-to-end test using newE2EPage to test component rendering.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Updating Objects Reactively in Stencil Components
DESCRIPTION: Shows how to update objects in a reactive way using the spread operator. This approach creates a new object reference, triggering @Watch and component re-render when the state changes.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Accessing Typed Stencil Components in TypeScript
DESCRIPTION: Demonstrates how to properly type and access a Stencil component using the automatically generated HTML element interfaces. The example shows accessing an ion-button element with full type support.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Basic Component Testing with newSpecPage in TypeScript
DESCRIPTION: Demonstrates basic component testing using newSpecPage() to validate rendered HTML output. The test creates a spec page with a single component and verifies its rendered content.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Basic Functional Component Implementation in Stencil TSX
DESCRIPTION: Shows the basic syntax for creating a functional component that accepts props and returns JSX.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Using Host Component in Stencil
DESCRIPTION: Example of using the Host component to set attributes and event listeners on the host element. Shows conditional class and aria attribute assignment based on a prop.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Generating a Stencil Component Using CLI
DESCRIPTION: Demonstrates how to use the Stencil CLI to generate a new component. It shows the command to create a component named 'my-new-component' and explains the resulting file structure.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Emitting Custom Events in Stencil Components
DESCRIPTION: Demonstrates how to use the @Event() decorator to emit custom events from a Stencil component. The example shows a TodoList component that emits a 'todoCompleted' event.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Component Composition Example
DESCRIPTION: Shows how to compose Stencil components by nesting them within each other using JSX syntax.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Basic Prop Implementation in Stencil
DESCRIPTION: Demonstrates basic usage of @Prop() decorator to declare component properties

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Prop Types in Stencil
DESCRIPTION: This example shows how to define props with different types in Stencil, including boolean, number, string, and custom object types.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() isComplete: boolean;
    @Prop() timesCompletedInPast: number;
    @Prop() thingToDo: string;
    @Prop() myHttpService: MyHttpService;
}

----------------------------------------

TITLE: Using a Callback-Enabled Web Worker in a Stencil Component
DESCRIPTION: Demonstrates how to use a Web Worker function with progress callbacks in a Stencil component, showing how to handle both progress updates and final results.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { countDown } from '../countdown.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    const startNum = 5;
    console.log('start', startNum);

    countDown(startNum, (p) => {
      console.log('progress', p);
    }).then(result => {
      console.log('finish', result);
    });
  }
}

----------------------------------------

TITLE: Defining a Public Method with @Method Decorator in Stencil
DESCRIPTION: This snippet demonstrates how to use the @Method decorator to expose a public method on a Stencil component. The method must be async and can be called directly from the element.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Stencil Project Setup Commands
DESCRIPTION: Series of commands to set up a new Stencil project after creation

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: Shows how to write CSS for a component using Shadow DOM, including the use of the :host pseudo-class selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Typed Functional Component in Stencil
DESCRIPTION: This snippet shows how to create a typed functional component using Stencil's FunctionalComponent generic type.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Complex Types with @State in Stencil
DESCRIPTION: Shows how to use @State with a complex type, creating a component that manages and renders a list of items. It demonstrates adding items to an array and triggering rerenders.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Implementing CSS Parts in Stencil Component
DESCRIPTION: Shows how to use the CSS ::part() pseudo-element to style specific parts of a Stencil component from outside the component.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Basic Stencil Component Implementation
DESCRIPTION: Example of a basic Stencil component with props and rendering logic.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Basic Usage of @State() Decorator in Stencil
DESCRIPTION: Demonstrates the basic usage of @State() decorator to trigger rerenders when a component's internal state changes.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Defining Props in Stencil Components
DESCRIPTION: Example of defining props using the @Prop() decorator in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Using @State() with @Listen() in Stencil
DESCRIPTION: Demonstrates how to use @State() in conjunction with @Listen() decorator to update component state based on events.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Creating an Advanced Form Component in Stencil
DESCRIPTION: This snippet demonstrates an advanced form component with multiple inputs including email and select elements. It showcases more complex state management, input validation, and dynamic option rendering.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Implementing Custom Text Input with Form Association
DESCRIPTION: Complete example of a custom text input component that integrates with forms using ElementInternals API.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Conditional Rendering in Stencil JSX
DESCRIPTION: Illustrates how to use JavaScript if/else statements and the ternary operator for conditional rendering in JSX.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
    {this.name
      ? <p>Hello {this.name}</p>
      : <p>Hello World</p>
    }
    </div>
  );
}

----------------------------------------

TITLE: Custom Clock Component Implementation
DESCRIPTION: Complete example of a clock component using lifecycle methods to manage a timer, demonstrating state management and cleanup.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Dynamic State Updates with Lifecycle Methods
DESCRIPTION: Shows how to update state periodically using lifecycle methods connectedCallback and disconnectedCallback, demonstrating proper cleanup of intervals.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Using @State with @Listen in Stencil
DESCRIPTION: Demonstrates how to use @State in conjunction with @Listen to create a toggle button component that updates its state on click events.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Basic JSX Component Rendering in Stencil
DESCRIPTION: Demonstrates the basic structure of a Stencil component using JSX to render a simple div with heading and paragraph elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Configuring Custom Rollup Plugins in Stencil
DESCRIPTION: Example configuration for adding custom Rollup plugins to the Stencil bundling process, demonstrating plugin placement before and after built-in plugins.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Defining a Basic Functional Component in Stencil
DESCRIPTION: Demonstrates the simplest form of a functional component in Stencil, which takes props and returns JSX.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: File Structure Example for Stencil Components
DESCRIPTION: This snippet demonstrates the recommended file structure for Stencil components, showing how to organize multiple components with their respective styles and test files.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Basic Stencil Config Example in TypeScript
DESCRIPTION: A simple example of a Stencil configuration file using TypeScript. It demonstrates how to import the Config type and set basic properties like namespace and source directory.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: DOM References in Stencil Components
DESCRIPTION: Shows how to get direct references to DOM elements using the ref attribute in JSX.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'app-home',
})
export class AppHome {
  textInput!: HTMLInputElement;

  handleSubmit = (event: Event) => {
    event.preventDefault();
    console.log(this.textInput.value);
  }

  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <label>
          Name:
          <input type="text" ref={(el) => this.textInput = el as HTMLInputElement} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Web Components
DESCRIPTION: This configuration sets up VS Code to debug Stencil components running in a Chrome browser. It connects to the default Stencil dev server port and enables source map support for accurate debugging.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:3333",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "*": "${webRoot}/*"
      }
    }
  ]
}

----------------------------------------

TITLE: Type-Safe Functional Component in Stencil
DESCRIPTION: Shows how to create a type-safe functional component using the FunctionalComponent generic type and an interface for props.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Form-Associated Component HTML Usage
DESCRIPTION: Example of using a form-associated custom element within an HTML form.

LANGUAGE: html
CODE:
<form>
  <custom-text-input name="my-custom-input"></custom-text-input>
</form>

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: Shows how to write CSS for a component using Shadow DOM, including the use of the :host pseudo-class selector for styling the host element.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Conditional Rendering in Stencil JSX
DESCRIPTION: Demonstrates conditional rendering using if/else statements and the ternary operator in JSX.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
    {this.name
      ? <p>Hello {this.name}</p>
      : <p>Hello World</p>
    }
    </div>
  );
}

----------------------------------------

TITLE: Demonstrating File Structure for Stencil Components
DESCRIPTION: This snippet shows the recommended file structure for Stencil components, including separate directories for each component and their associated styles and tests.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Using Stencil Components in Angular Template
DESCRIPTION: Use the Stencil components directly in Angular templates after importing the component library module. This example shows how to use a component with property bindings.

LANGUAGE: html
CODE:
<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Functional Component with Children Utilities
DESCRIPTION: Demonstrates how to manipulate child elements using the provided utility methods in a Functional Component.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Accessing Stencil Component Properties in TypeScript
DESCRIPTION: Demonstrates how to use the automatically generated HTML element interface to access properties of a Stencil component in TypeScript. This example shows querying a button element and setting its 'fill' property.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Basic Prop Declaration in Stencil
DESCRIPTION: Basic example of declaring and using properties in a Stencil component using the @Prop decorator.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Basic E2E Test Setup in Stencil
DESCRIPTION: Demonstrates the basic structure of an E2E test using newE2EPage to test a component's rendering

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: Shows how to write CSS for a component using Shadow DOM, including the use of the :host pseudo-class selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Typed Functional Component with FunctionalComponent Generic in Stencil
DESCRIPTION: Shows how to create a typed functional component using Stencil's FunctionalComponent generic type for prop validation.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Using @Watch Decorator in Stencil Components
DESCRIPTION: Demonstrates how to use the @Watch decorator to monitor changes in @Prop and @State decorated class members, as well as native HTML attributes. It shows how to handle multiple watchers and access old and new values.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Using CSS Custom Properties in Stencil
DESCRIPTION: Demonstrates how to define and use CSS custom properties (CSS variables) in a Stencil component.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Creating a Clock Component with Lifecycle Methods in Stencil
DESCRIPTION: This example shows a clock component that updates every second. It uses connectedCallback to start the timer when added to the DOM and disconnectedCallback to stop the timer when removed.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Configuring Custom Event Options in Stencil
DESCRIPTION: Shows how to configure custom event options using the @Event decorator. The example demonstrates setting the event name, composition, cancelability, and bubbling behavior.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: State Management with Event Listeners
DESCRIPTION: Demonstrates using @State() with @Listen() decorator to handle click events and toggle state.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Testing Components with JSX Templates in TSX
DESCRIPTION: Shows how to test components using JSX templates and props in a TSX file. This approach allows testing components with dynamic property values.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: React Component Usage Example
DESCRIPTION: Example of consuming generated React component wrappers in a React application

LANGUAGE: tsx
CODE:
// App.tsx
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Async Lifecycle Method Example in Stencil
DESCRIPTION: Demonstrates how to implement an async componentWillLoad method that fetches data before rendering.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Demonstrating connectedCallback and componentWillLoad in Stencil
DESCRIPTION: This snippet shows how connectedCallback() is called every time a component is connected to the DOM, while componentWillLoad() is only called the first time.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Defining a Basic Functional Component in Stencil
DESCRIPTION: Demonstrates the simplest form of a functional component that takes props and returns JSX.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Implementing Basic Form Handling in Stencil Component
DESCRIPTION: This snippet demonstrates a basic form implementation in a Stencil component. It includes state management for form input, event handling for form submission and input changes, and rendering of a simple form with a text input.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Basic E2E Test Setup in Stencil
DESCRIPTION: Demonstrates the basic structure of an E2E test using newE2EPage to test a component render.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Testing Component Class Logic
DESCRIPTION: Example of testing component class methods and properties directly by instantiating the component class.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Rendering Stencil Component for Unit Testing with WebdriverIO
DESCRIPTION: This snippet demonstrates how to import and render a Stencil component for unit testing using WebdriverIO's browser runner. It shows the setup for mounting the component to the DOM and writing a basic test assertion.

LANGUAGE: typescript
CODE:
import { render } from '@wdio/browser-runner/stencil';
import { MyComponent } from './my-component';

describe('MyComponent', () => {
    it('renders', async () => {
        const { $, expect } = await render({
            components: [MyComponent],
            template: () => <my-component first="Stencil" last="'Don't call me a framework' JS" />
        });

        const element = await $('my-component');
        await expect(element).toHaveText(
            `Hello, World! I'm Stencil 'Don't call me a framework' JS`
        );
    });
});

----------------------------------------

TITLE: Updating @State in Stencil Component Lifecycle
DESCRIPTION: Shows how to properly update a @State decorated property within component lifecycle methods to trigger rerenders. This example creates a current-time component that updates every second.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Creating a Clock Component with Lifecycle Methods in Stencil
DESCRIPTION: This example shows a complete clock component that uses connectedCallback to start a timer and disconnectedCallback to clean it up. It updates the time every second and renders it.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Basic Stencil Configuration in TypeScript
DESCRIPTION: A minimal example of a Stencil configuration file (stencil.config.ts) that sets the namespace and source directory for the project.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Configuring Custom Event Options in Stencil
DESCRIPTION: Shows how to use the EventOptions interface to configure custom event behavior, including setting the event name, bubbling, cancelable, and composed properties.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Configuring Stencil React Output Target
DESCRIPTION: Configuration example for the Stencil React output target, showing how to set up component wrapper generation in the stencil.config.ts file.

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    reactOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../react-library/lib/components/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Prop Options in Stencil
DESCRIPTION: This example illustrates the use of various options available with the @Prop() decorator in Stencil, including attribute naming, mutability, and reflection.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
   tag: 'todo-list-item',
})
export class ToDoListItem {
   @Prop({ attribute: 'complete' }) isComplete: boolean;
   @Prop({ attribute: 'thing' }) thingToDo: string;
   @Prop({ attribute: 'my-service' }) httpService: MyHttpService;
   @Prop({ mutable: true }) mutableProp: string;
   @Prop({ reflect: true }) reflectedProp: number;
}

----------------------------------------

TITLE: Implementing Basic Form in Stencil Component
DESCRIPTION: This snippet demonstrates a basic form implementation in a Stencil component. It includes a text input field and a submit button. The component manages form state, handles input changes, and processes form submission.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Testing Rendered HTML with newSpecPage() in Stencil
DESCRIPTION: This snippet demonstrates how to use newSpecPage() to test a Stencil component's rendered HTML. It creates a test page, renders a component, and uses the toEqualHtml() matcher to verify the output.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Async Data Fetching in ComponentWillLoad
DESCRIPTION: Demonstrates how to fetch data asynchronously in componentWillLoad lifecycle method using promises.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Using Element Decorator in Stencil Component
DESCRIPTION: Shows how to use the @Element() decorator to access the host element within the class instance. It also demonstrates how to use TypeScript's definite assignment assertion modifier when initializing a class member.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Using Build Constants in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Build Constants in a Stencil component to detect development/production mode and browser/server rendering. It imports the Build object from @stencil/core and uses isDev and isBrowser properties.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Listening to Events in Stencil Components
DESCRIPTION: Demonstrates how to use the @Listen decorator to handle DOM events, including custom events emitted by other components. The example shows a TodoApp component listening for a 'todoCompleted' event.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Basic State Usage in Stencil Component
DESCRIPTION: Demonstrates basic usage of @State decorator to manage a component's internal state with a current time example. Shows initial state setup and rendering.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Basic Event Emission in Stencil Components
DESCRIPTION: Demonstrates how to create and emit custom events using the @Event decorator in a Stencil component.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Basic JSX Component Rendering in Stencil
DESCRIPTION: Demonstrates the basic structure of a Stencil component using JSX to render HTML elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Using a Stencil Component in HTML and TSX
DESCRIPTION: This snippet shows how to use a defined Stencil component in both HTML and TSX files after compilation.

LANGUAGE: html
CODE:
<!-- Here we use the component in an HTML file -->
<todo-list></todo-list>

LANGUAGE: tsx
CODE:
{/* Here we use the component in a TSX file */}
<todo-list></todo-list>

----------------------------------------

TITLE: Component Hierarchy Example in Stencil
DESCRIPTION: Shows the component hierarchy and lifecycle method execution order when using nested components.

LANGUAGE: markup
CODE:
  <cmp-a>
    <cmp-b>
      <cmp-c></cmp-c>
    </cmp-b>
  </cmp-a>

----------------------------------------

TITLE: Rendering Stencil Component for Unit Testing with WebdriverIO
DESCRIPTION: Demonstrates how to import and render a Stencil component for unit testing using WebdriverIO's browser runner. It shows the setup for mounting the component to the DOM and writing a basic test case.

LANGUAGE: typescript
CODE:
import { render } from '@wdio/browser-runner/stencil';
import { MyComponent } from './my-component';

describe('MyComponent', () => {
    it('renders', async () => {
        const { root } = await render({
            components: [MyComponent],
            template: () => <my-component first="Stencil" last="'Don't call me a framework' JS" />
        });

        const element = await root.findByText(
            "Hello, World! I'm Stencil 'Don't call me a framework' JS"
        );
        expect(element).toBeInTheDocument();
    });
});

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Component Lifecycle
DESCRIPTION: This snippet demonstrates how to fetch data asynchronously in a Stencil component's componentWillLoad lifecycle method, ensuring the component waits for data before rendering.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Creating Form-Associated Custom Elements in Stencil
DESCRIPTION: This example shows how to create a form-associated custom element using Stencil. It demonstrates the use of the formAssociated property and ElementInternals to integrate the component with native form functionality.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css',
  formAssociated: true
})
export class MyName {
  @State() value: string;
  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.internals.setFormValue(event.target.value);
  }

  render() {
    return (
      <label>
        Name:
        <input
          type="text"
          value={this.value}
          onInput={(event) => this.handleChange(event)}
        />
      </label>
    );
  }
}

----------------------------------------

TITLE: Basic E2E Test Setup in Stencil
DESCRIPTION: Demonstrates the basic structure of an E2E test for a Stencil component using the newE2EPage utility. Shows how to set up a test page and verify component rendering.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Implementing CSS Parts in Stencil Component
DESCRIPTION: Shows how to use the CSS ::part() pseudo-element to create customizable parts in a Stencil component.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Using forceUpdate in Stencil Component
DESCRIPTION: Demonstrates how to use the forceUpdate function to schedule a new render of a component instance, even if no state has changed. This is useful for forcing re-renders in specific scenarios.

LANGUAGE: typescript
CODE:
import { forceUpdate } from '@stencil/core'

// inside a class component function
forceUpdate(this);

----------------------------------------

TITLE: Using Build Constants in Stencil Components
DESCRIPTION: Demonstrates how to use Build.isDev and Build.isBrowser constants to conditionally execute code based on the environment. The Build constants are imported from @stencil/core and can be used to detect development/production mode and browser/server rendering contexts.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Implementing a Custom Text Input with Form Association
DESCRIPTION: Creates a custom text input component that interacts with a form using the ElementInternals API. It sets form values and handles input changes.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Basic Stencil Config Example
DESCRIPTION: Basic example of a Stencil configuration file setting the namespace and source directory.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Testing Rendered HTML with newSpecPage() in Stencil
DESCRIPTION: This snippet demonstrates how to use newSpecPage() to test a Stencil component's rendered HTML. It creates a test page, renders a component, and checks the output using the toEqualHtml() matcher.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Basic Stencil Config in TypeScript
DESCRIPTION: A simple example of a Stencil configuration file with namespace and source directory settings.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Defining a Public Method with @Method Decorator in Stencil
DESCRIPTION: This snippet demonstrates how to use the @Method decorator to expose a public method in a Stencil component. The method is async and can be called directly from the element.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Basic JSX Component Rendering in Stencil
DESCRIPTION: Demonstrates the basic structure of a Stencil component using JSX to render HTML elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Basic E2E Test Structure in Stencil
DESCRIPTION: Demonstrates the basic structure of an E2E test in Stencil, including importing the necessary functions, setting up a test suite, and writing a simple test case.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: This snippet shows how to configure the 'dist' output target in a Stencil project's configuration file. It generates a reusable, self-lazy loading component library.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Using Host Component in Stencil TSX
DESCRIPTION: Demonstrates how to use the Host component to set attributes and event listeners on the host element of a Stencil component. Shows conditional rendering of classes and ARIA attributes.

LANGUAGE: tsx
CODE:
// Host is imported from '@stencil/core'
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Configuring Server Side Rendering
DESCRIPTION: Steps to enable server-side rendering for Stencil components in a Vue application.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-hydrate-script',
      dir: './hydrate',
    },
    // ...
  ]
};

LANGUAGE: json
CODE:
{
  "name": "component-library",
  ...
  "exports": {
    ...
    "./hydrate": {
      "types": "./hydrate/index.d.ts",
      "import": "./hydrate/index.js",
      "require": "./hydrate/index.cjs.js",
      "default": "./hydrate/index.js"
    },
    ...
  },
  ...
}

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  outputTargets: [
    vueOutputTarget({
      includeImportCustomElements: true,
      includePolyfills: false,
      includeDefineCustomElements: false,
      componentCorePackage: 'component-library',
      hydrateModule: 'component-library/hydrate',
      proxiesFile: '../component-library-vue/src/index.ts',
    }),
    // ...
  ]
};

----------------------------------------

TITLE: Using Web Worker Functions in Stencil Components
DESCRIPTION: Demonstrates how to import and use Web Worker functions within a Stencil component. The compiler automatically creates proxies for the imported functions to run them in a worker.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Props with Different Types
DESCRIPTION: This snippet demonstrates how to declare props with various types including boolean, number, string, and custom objects.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() isComplete: boolean;
    @Prop() timesCompletedInPast: number;
    @Prop() thingToDo: string;
    @Prop() myHttpService: MyHttpService;
}

----------------------------------------

TITLE: Calling a Public Method on a Stencil Component
DESCRIPTION: This snippet shows how to call a public method on a Stencil component. It uses the whenDefined method of the custom element registry to ensure the component is defined before calling the method.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Conditional Rendering in JSX
DESCRIPTION: Illustrates conditional rendering using if/else statements and the ternary operator in JSX.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
    {this.name
      ? <p>Hello {this.name}</p>
      : <p>Hello World</p>
    }
    </div>
  );
}

----------------------------------------

TITLE: Resolving Asset Paths with getAssetPath in Stencil
DESCRIPTION: Demonstrates how to use the getAssetPath API to resolve asset paths relative to the asset base path in a Stencil component.

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff'); 

----------------------------------------

TITLE: Using Host Component to Set Attributes in Stencil TSX
DESCRIPTION: Demonstrates how to use the Host functional component to set attributes and classes on the host element based on component properties.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Using Slots in Stencil Components
DESCRIPTION: Explains how to use slots to allow dynamic child content in Stencil components.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
      <h2>A Component</h2>
      <div><slot /></div>
    </div>
  );
}

----------------------------------------

TITLE: Listening to Window Events in Stencil
DESCRIPTION: Shows how to use the @Listen decorator to handle events on the window object, such as the 'scroll' event. The example demonstrates using the 'target' option to attach the listener to the window.

LANGUAGE: tsx
CODE:
  @Listen('scroll', { target: 'window' })
  handleScroll(ev) {
    console.log('the body was scrolled', ev);
  }

----------------------------------------

TITLE: Using Build Constants in Stencil Component
DESCRIPTION: This snippet demonstrates how to import and use Build constants from @stencil/core to conditionally execute code based on the development environment and rendering context. It shows checks for isDev and isBrowser within a component's lifecycle method.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Prop Types in Stencil
DESCRIPTION: Demonstrates various prop types available in Stencil, including boolean, number, string, Object, and Array. Shows how to declare props with different types.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() isComplete: boolean;
    @Prop() timesCompletedInPast: number;
    @Prop() thingToDo: string;
    @Prop() myHttpService: MyHttpService;
}

----------------------------------------

TITLE: Writing Basic Stencil Component Test
DESCRIPTION: Example test case showing how to create and test a Stencil component using DOM primitives

LANGUAGE: typescript
CODE:
import { expect, test } from 'vitest'

import '../src/components/my-component/my-component.js'

test('should render component correctly', async () => {
    const cmp = document.createElement('my-component')
    cmp.setAttribute('first', 'Stencil')
    cmp.setAttribute('last', `'Don't call me a framework' JS`)
    document.body.appendChild(cmp)

    await new Promise((resolve) => requestIdleCallback(resolve))
    expect(cmp.shadowRoot?.querySelector('div')?.innerText)
        .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)
})

----------------------------------------

TITLE: Initializing a Form-Associated Component in Stencil
DESCRIPTION: This snippet demonstrates how to set up a basic form-associated component in Stencil by setting the formAssociated option to true in the @Component decorator.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Declaring Props with @Prop() Decorator in Stencil
DESCRIPTION: Shows how to declare properties on a Stencil component using the @Prop() decorator and use them in the render method.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: Shows how to style elements within a Shadow DOM component, including the use of the :host pseudo-class selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Dynamic State Updates with Lifecycle Methods
DESCRIPTION: Shows how to update state periodically using lifecycle methods and proper cleanup of intervals.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;
    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Async ComponentWillLoad Example - TSX
DESCRIPTION: Example showing how to implement async data fetching in componentWillLoad using promises.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Connected Callback Example - TSX
DESCRIPTION: Example demonstrating how connectedCallback gets called when a component is added to the DOM. Shows that connectedCallback can be called multiple times while componentWillLoad only executes once.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Implementing formDisabledCallback in Stencil
DESCRIPTION: Demonstrates using the formDisabledCallback to update a CSS class based on the disabled state of the form.

LANGUAGE: typescript
CODE:
import { Component, h, State } from '@stencil/core';

@Component({
  tag: 'form-disabled-cb',
  formAssociated: true,
})
export class MyComponent {
  @State() cssClass: string = "";

  formDisabledCallback(disabled: boolean) {
    if (disabled) {
      this.cssClass = "background-mode";
    } else {
      this.cssClass = "";
    }
  }

  render() {
    return <input type="text" class={this.cssClass}></input>
  }
}

----------------------------------------

TITLE: Accessing Typed Stencil Component in TypeScript
DESCRIPTION: Demonstrates how to use the automatically generated HTML element interface for a Stencil component. This example shows how to query and manipulate a button component with strong typing.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Defining a Public Method with @Method() Decorator in Stencil
DESCRIPTION: This snippet demonstrates how to use the @Method() decorator to expose a public method on a Stencil component. The method is defined as async and can be called directly from the element.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Connected Callback Example in Stencil
DESCRIPTION: Demonstrates the usage of connectedCallback() lifecycle method showing when it gets called during DOM operations.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Using Host Component in Stencil
DESCRIPTION: Example of using the Host component to set attributes and class names conditionally on the host element.

LANGUAGE: tsx
CODE:
// Host is imported from '@stencil/core'
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Fragment Component Implementation in TSX
DESCRIPTION: Demonstrates how to use Fragment component to group elements without a wrapper node in a Stencil component

LANGUAGE: tsx
CODE:
import { Component, Fragment, h } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Basic Stencil Config in TypeScript
DESCRIPTION: A minimal example of a Stencil configuration file (stencil.config.ts) that sets the namespace and source directory for a project.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Basic E2E Test Structure in Stencil
DESCRIPTION: Demonstrates the basic structure of an end-to-end test in Stencil using Jest and Puppeteer. It shows how to create a new E2E page, set content, find elements, and make assertions.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Basic E2E Test Setup in Stencil
DESCRIPTION: Basic boilerplate for setting up an E2E test using Stencil's testing utilities. Shows how to create a new test page and verify component rendering.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Implementing Event Listening in Stencil
DESCRIPTION: Demonstrates how to use the @Listen decorator to handle DOM events in a Stencil component.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

export class TodoApp {
  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Basic Stencil Config Setup
DESCRIPTION: Minimal example showing basic Stencil configuration with namespace and source directory settings.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Defining a Public Method in Stencil
DESCRIPTION: Example of using the @Method decorator to define a public method on a Stencil component. The method is async and can be called directly from the element.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Using Element Decorator in Stencil Components
DESCRIPTION: Demonstrates how to use the @Element() decorator to access the host element within a Stencil component class. It shows how to get a reference to the host element and use DOM methods on it.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Initializing a Form-Associated Component in Stencil
DESCRIPTION: This snippet demonstrates how to create a basic form-associated component in Stencil by setting the formAssociated option to true in the @Component decorator.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project by configuring the @stencil/sass plugin in the Stencil configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Data Binding in JSX
DESCRIPTION: Demonstrates how to bind dynamic data within JSX using curly braces syntax.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

LANGUAGE: tsx
CODE:
//ES6
`Hello ${this.name}`

//JSX
Hello {this.name}

----------------------------------------

TITLE: Defining a Public Method with @Method() Decorator in Stencil
DESCRIPTION: Demonstrates how to use the @Method() decorator to expose a public method on a Stencil component. The method must be async and can be called directly from the element.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Basic Form Implementation in Stencil TSX
DESCRIPTION: Demonstrates a simple form component with a text input field and submit button. Includes state management and event handling for input changes and form submission.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Custom Clock Component - Stencil TSX
DESCRIPTION: Complete example showing a clock component that updates every second, demonstrating the use of connectedCallback and disconnectedCallback for timer management.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Installing Stencil Store using NPM
DESCRIPTION: Command to install @stencil/store as a development dependency in your project.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Testing Component with Template Option in TSX
DESCRIPTION: Shows how to use the template option in newSpecPage() to test a Stencil component with JSX syntax. It demonstrates passing props to the component and verifying the rendered output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Typed Functional Component with Generic Interface
DESCRIPTION: Demonstrates how to create a typed functional component using Stencil's FunctionalComponent generic type.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Basic State Implementation in Stencil Component
DESCRIPTION: Demonstrates basic usage of @State() decorator to track current time and trigger rerenders.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Defining a Public Method with @Method Decorator in Stencil
DESCRIPTION: This snippet demonstrates how to use the @Method decorator to define a public method in a Stencil component. The method is async and can be called directly from the element.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Using @Watch Decorator in Stencil Components
DESCRIPTION: Demonstrates how to use the @Watch decorator to monitor changes in @Prop and @State decorated class members, as well as native HTML attributes. It shows how to handle multiple watches and access old and new values.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}


----------------------------------------

TITLE: Using a Stencil Component in HTML and TSX
DESCRIPTION: This example shows how to use a Stencil component in both HTML and TSX files after it has been compiled.

LANGUAGE: html
CODE:
<!-- Here we use the component in an HTML file -->
<todo-list></todo-list>

LANGUAGE: tsx
CODE:
{/* Here we use the component in a TSX file */}
<todo-list></todo-list>

----------------------------------------

TITLE: Prop Validation with @Watch Decorator
DESCRIPTION: Shows how to implement property validation using the @Watch decorator in Stencil

LANGUAGE: tsx
CODE:
import { Component, Prop, Watch, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class TodoList {
  @Prop() thingToDo!: string;

  @Watch('thingToDo')
  validateName(newValue: string, _oldValue: string) {
    const isBlank = typeof newValue !== 'string' || newValue === '';
    if (isBlank) { throw new Error('thingToDo is required and cannot be empty') };
    const has2chars = typeof newValue === 'string' && newValue.length >= 2;
    if (!has2chars) { throw new Error('thingToDo must have length > 1') };
  }
}

----------------------------------------

TITLE: Using Stencil Component in HTML
DESCRIPTION: Example of how to use a Stencil component in HTML markup

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Creating a Clock Component with Lifecycle Methods in Stencil
DESCRIPTION: This example creates a clock component that updates every second. It uses connectedCallback to start the timer when the component is added to the DOM and disconnectedCallback to stop the timer when the component is removed.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Defining a Public Method in Stencil
DESCRIPTION: Example of using the @Method decorator to define a public method on a Stencil component. The method is async and can be called directly from the element.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Initializing a Form-Associated Stencil Component
DESCRIPTION: This snippet demonstrates how to set up a basic form-associated Stencil component by setting the formAssociated option to true in the @Component decorator.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Using Style Modes in Stencil Component
DESCRIPTION: Illustrates how to use style modes to create versatile designs for components with different styling configurations.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'simple-button',
  styleUrls: {
    md: './simple-button.md.css', // styles for Material Design
    ios: './simple-button.ios.css' // styles for iOS
  },
})
export class SimpleButton {
  // ...
}

----------------------------------------

TITLE: Prop Validation Using @Watch Decorator
DESCRIPTION: Example showing how to validate prop values using the @Watch decorator

LANGUAGE: typescript
CODE:
import { Component, Prop, Watch, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class TodoList {
  @Prop() thingToDo!: string;

  @Watch('thingToDo')
  validateName(newValue: string, _oldValue: string) {
    const isBlank = typeof newValue !== 'string' || newValue === '';
    if (isBlank) { 
        throw new Error('thingToDo is a required property and cannot be empty') 
    };
    const has2chars = typeof newValue === 'string' && newValue.length >= 2;
    if (!has2chars) {
       throw new Error('thingToDo must have a length of more than 1 character')
    };
  }
}

----------------------------------------

TITLE: Applying Styles to a Stencil Component
DESCRIPTION: These snippets show different ways to apply styles to a Stencil component, including using external stylesheets and inline styles.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrl: './todo-list.css',
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrls: ['./todo-list-1.css', './todo-list-2.css']
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrls: {
     ios: 'todo-list-1.ios.scss',
     md: 'todo-list-2.md.scss',
  }
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styles: 'div { background-color: #fff }'
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Using jest.mock() to Apply a Mock in Tests
DESCRIPTION: Demonstrates how to use jest.mock() to apply a mock for your own code in a test file. This example shows mocking the utils.ts file and testing the bar() function.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Listening to Events in Stencil Components (TypeScript)
DESCRIPTION: Demonstrates how to use the @Listen decorator to handle DOM events, including custom events emitted by other components. The example shows a TodoApp component listening for a 'todoCompleted' event.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Custom Clock Component Implementation
DESCRIPTION: Complete example of a clock component utilizing lifecycle methods for timer management.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Defining a Public Method with @Method() Decorator in Stencil
DESCRIPTION: This snippet demonstrates how to use the @Method() decorator to define a public method on a Stencil component. The method is async and can be called directly from the element.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Using componentOnReady() in JavaScript
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code after a Stencil component has finished its first render cycle.

LANGUAGE: javascript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Basic Functional Component Implementation in Stencil
DESCRIPTION: Simple example of a functional component that takes props and returns JSX. Shows the basic syntax for creating a functional component that accepts a name prop.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Configuring Asset Directories for a Stencil Component
DESCRIPTION: This example demonstrates how to configure asset directories for a Stencil component and use the getAssetPath() function to load images.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // 1. assetsDirs lists the 'assets' directory as a relative (sibling)
  // directory
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    // 2. the asset path is retrieved relative to the asset base path to use in
    // the <img> tag
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Test File with File-based Mock
DESCRIPTION: Test implementation showing how to use a file-based mock with Jest.mock().

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Defining a Stencil Component with @Component Decorator
DESCRIPTION: This snippet demonstrates how to use the @Component decorator to define a Stencil component. It shows the basic structure and syntax for creating a component class.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Writing Basic Stencil Component Test
DESCRIPTION: Example test case showing how to create and test a Stencil component using DOM primitives

LANGUAGE: typescript
CODE:
import { expect, test } from 'vitest'

import '../src/components/my-component/my-component.js'

test('should render component correctly', async () => {
    const cmp = document.createElement('my-component')
    cmp.setAttribute('first', 'Stencil')
    cmp.setAttribute('last', `'Don't call me a framework' JS`)
    document.body.appendChild(cmp)

    await new Promise((resolve) => requestIdleCallback(resolve))
    expect(cmp.shadowRoot?.querySelector('div')?.innerText)
        .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)
})

----------------------------------------

TITLE: Handling Keyboard Events in Stencil Components
DESCRIPTION: Demonstrates how to listen for and handle keyboard events in a Stencil component using the @Listen decorator and the KeyboardEvent interface.

LANGUAGE: tsx
CODE:
@Listen('keydown')
handleKeyDown(ev: KeyboardEvent){
  if (ev.key === 'ArrowDown'){
    console.log('down arrow pressed')
  }
}

----------------------------------------

TITLE: Testing Functional Components in TSX
DESCRIPTION: Demonstrates testing functional components without defining them in the components list. Includes nested functional components and validation of complex HTML structure.

LANGUAGE: tsx
CODE:
import { Fragment, h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyFunctionalComponent } from '../my-functional-cmp';

it('should render my component', async () => {
  const AnotherFunctionalComponent = (props: any, children: typeof Fragment) => (
    <section>{children}</section>
  );

  const page = await newSpecPage({
    components: [],
    template: () => (
      <AnotherFunctionalComponent>
        <MyFunctionalComponent>Hello World!</MyFunctionalComponent>
      </AnotherFunctionalComponent>
    ),
  });
  expect(page.root).toEqualHtml(`
    <section>
      <div>
        Hello World!
      </div>
    </section>
  `);
});

----------------------------------------

TITLE: Rendering Basic JSX in Stencil Component
DESCRIPTION: Demonstrates the basic structure of a Stencil component using JSX to render a simple div with child elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Using React Component Wrappers
DESCRIPTION: Example of how to import and use the generated React component wrappers in a React application.

LANGUAGE: tsx
CODE:
import './App.css';
import { MyComponent } from 'react-library';

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Retrieving Stencil Element and Using componentOnReady
DESCRIPTION: Shows how to use the getElement() function to retrieve a Stencil element from the DOM and then use componentOnReady() to execute code when the component is fully initialized.

LANGUAGE: typescript
CODE:
import { getElement } from '@stencil/core'

const stencilComponent = getElement(document.querySelector('my-cmp'))
if (stencilComponent) {
  stencilComponent.componentOnReady().then(() => { ... })
}

----------------------------------------

TITLE: Rendering Basic JSX in Stencil Component
DESCRIPTION: Demonstrates the basic structure of a Stencil component using JSX to render a simple div with child elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Configuring Stencil Angular Output Target
DESCRIPTION: Configuration for generating Angular component wrappers from Stencil components using the angularOutputTarget in stencil.config.ts

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Defining a Public Method with @Method() Decorator in Stencil
DESCRIPTION: Example of using the @Method() decorator to create a public async method 'showPrompt' in a Stencil component class.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Using getAssetPath() in JSX with TypeScript
DESCRIPTION: Demonstrates how to use the getAssetPath() utility to get the path to local assets within a Stencil component. This example shows its usage in the render method of a component to set an image source.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Valid and Invalid Public Method Implementations in Stencil
DESCRIPTION: Illustrates correct and incorrect ways to implement public methods using the @Method() decorator in Stencil. Public methods must be async or return a Promise.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Implementing Advanced Form in Stencil Component
DESCRIPTION: This snippet showcases an advanced form implementation in a Stencil component. It includes multiple input types (text, email, select), state management for different inputs, and basic form validation using the constraint validation API.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Conditional Rendering in JSX
DESCRIPTION: Shows different approaches to conditional rendering in JSX using if/else statements and ternary operators.

LANGUAGE: tsx
CODE:
render() {
  if (this.name) {
    return ( <div>Hello {this.name}</div> )
  } else {
    return ( <div>Hello, World</div> )
  }
}

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
    {this.name
      ? <p>Hello {this.name}</p>
      : <p>Hello World</p>
    }
    </div>
  );
}

----------------------------------------

TITLE: Testing Functional Components in Stencil with newSpecPage()
DESCRIPTION: This snippet demonstrates how to test functional components using newSpecPage(). It renders a custom functional component along with an imported one and checks the resulting HTML structure.

LANGUAGE: tsx
CODE:
import { Fragment, h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyFunctionalComponent } from '../my-functional-cmp';

it('should render my component', async () => {
  const AnotherFunctionalComponent = (props: any, children: typeof Fragment) => (
    <section>{children}</section>
  );

  const page = await newSpecPage({
    components: [],
    template: () => (
      <AnotherFunctionalComponent>
        <MyFunctionalComponent>Hello World!</MyFunctionalComponent>
      </AnotherFunctionalComponent>
    ),
  });
  expect(page.root).toEqualHtml(`
    <section>
      <div>
        Hello World!
      </div>
    </section>
  `);
});

----------------------------------------

TITLE: Implementing Basic Method Decorator in Stencil
DESCRIPTION: Demonstrates how to use the @Method() decorator to expose a public async method in a Stencil component. The example shows a simple TodoList component with a showPrompt method.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Setting Global Styles in Stencil Configuration
DESCRIPTION: Shows how to configure global styles in the Stencil configuration file (stencil.config.ts) using the globalStyle setting.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'app',
  globalStyle: 'src/global/global.css',
  outputTarget: [
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Conditional Rendering in Stencil
DESCRIPTION: Shows different approaches to conditional rendering in JSX including if/else statements and ternary operators.

LANGUAGE: tsx
CODE:
render() {
  if (this.name) {
    return ( <div>Hello {this.name}</div> )
  } else {
    return ( <div>Hello, World</div> )
  }
}

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
    {this.name
      ? <p>Hello {this.name}</p>
      : <p>Hello World</p>
    }
    </div>
  );
}

----------------------------------------

TITLE: Basic Stencil Config Example
DESCRIPTION: A minimal example of a Stencil configuration file that sets the namespace and source directory.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Binding Event Listeners in JSX for Stencil Components
DESCRIPTION: Shows how to bind event listeners directly in JSX for Stencil components, using the 'on' prefix for custom events.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

----------------------------------------

TITLE: Generating a Stencil Component with CLI
DESCRIPTION: Demonstrates how to use the Stencil CLI to generate a new component. The command creates a component with the specified name in the src/components directory.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Creating Stencil Store Configuration
DESCRIPTION: Demonstrates setting up a store with initial state and implementing an onChange handler for reactive state updates.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Defining a Public Method with @Method() Decorator in Stencil
DESCRIPTION: Demonstrates how to use the @Method() decorator to expose a public method on a Stencil component. The method must be async and can be called directly from the element.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Using Fragment in Stencil Component Rendering
DESCRIPTION: Shows how to use the Fragment component in a Stencil component's render method to group elements without a wrapper node. This example demonstrates the shorthand syntax for Fragment.

LANGUAGE: typescript
CODE:
import { Component, Fragment } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Documenting Component Properties in Stencil (TSX)
DESCRIPTION: Demonstrates how to add a description to a @Prop in Stencil using JSDoc comments. This approach allows developers to easily document component properties for auto-generation.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: This CSS snippet demonstrates how to style a component with Shadow DOM enabled, using simplified selectors and the :host pseudo-class.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Using componentOnReady() in TypeScript
DESCRIPTION: Example of using the componentOnReady() utility method to execute code after a component's first render cycle. This method returns a promise that resolves after componentDidRender() completes.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Using a Functional Component with Props in Stencil
DESCRIPTION: This example shows how to use a functional component by passing props as attributes.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Managing Object Updates in Stencil Components
DESCRIPTION: Demonstrates proper object update patterns in Stencil using the spread operator to ensure component reactivity. Shows how to trigger @Watch and re-renders when updating object properties.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Initializing Stencil Project with CLI
DESCRIPTION: Commands to create a new Stencil project using the create-stencil CLI tool.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project by configuring the Sass plugin in the Stencil configuration file. It imports the necessary modules and adds the Sass plugin to the plugins array.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Configuring Stencil Dev Server in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the Stencil dev server using TypeScript. It shows how to set custom options such as reload strategy, port, and HTTPS settings with SSL certificate and key.

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8')
    }
  }
};

----------------------------------------

TITLE: Basic Method Decorator Usage in Stencil
DESCRIPTION: Demonstrates how to use the @Method decorator to expose a public method in a Stencil component. The example shows a simple async method implementation in a TodoList component.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Initializing and Communicating with a Vanilla Web Worker in JavaScript
DESCRIPTION: Demonstrates how to create a new Web Worker instance and set up basic message passing between the main thread and the worker.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Basic JSX Component Rendering
DESCRIPTION: Example of a basic Stencil component using JSX to render HTML elements with static content.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: Demonstrates how to configure the 'dist' output target in a Stencil project's configuration file. This setup generates a reusable, tree-shakable component library.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Using Slots in Stencil Components
DESCRIPTION: Demonstrates how to use slots to allow dynamic child content placement in components.

LANGUAGE: tsx
CODE:
render() {
  return [
    <slot name="item-start" />,
    <h1>Here is my main content</h1>,
    <slot name="item-end" />
  ]
}

----------------------------------------

TITLE: Basic Event Emission in Stencil
DESCRIPTION: Demonstrates how to create and emit custom events using the @Event decorator in a Stencil component.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Setting Global Styles in Stencil Config
DESCRIPTION: Shows how to configure global styles in the Stencil config file, making them available to all components in the project.

LANGUAGE: tsx
CODE:
export const config: Config = {
  namespace: 'app',
  globalStyle: 'src/global/global.css',
  outputTarget: [
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Basic Stencil Component Declaration
DESCRIPTION: Demonstrates the basic usage of @Component decorator to create a Stencil component with minimal configuration.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Event Handling in JSX
DESCRIPTION: Examples of handling user input events like clicks and input changes using arrow functions.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Connected Callback Example in Stencil
DESCRIPTION: Demonstrates how connectedCallback() is called when a component is attached to the DOM, including multiple attachment scenarios.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Configuring Event Options in Stencil
DESCRIPTION: Shows the configuration options available for custom events including event name, bubbling, cancelable, and composition settings.

LANGUAGE: tsx
CODE:
export interface EventOptions {
  /**
   * A string custom event name to override the default.
   */
  eventName?: string;
  /**
   * A Boolean indicating whether the event bubbles up through the DOM or not.
   */
  bubbles?: boolean;

  /**
   * A Boolean indicating whether the event is cancelable.
   */
  cancelable?: boolean;

  /**
   * A Boolean value indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.
   */
  composed?: boolean;
}

----------------------------------------

TITLE: Conditional Rendering in Stencil
DESCRIPTION: Shows different approaches to conditional rendering using if/else statements and ternary operators.

LANGUAGE: tsx
CODE:
render() {
  if (this.name) {
    return ( <div>Hello {this.name}</div> )
  } else {
    return ( <div>Hello, World</div> )
  }
}

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: Shows how to write CSS for a component using Shadow DOM, demonstrating scoped styles and the :host pseudo-class selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Configuring Shadow DOM in Stencil Component
DESCRIPTION: Example of enabling Shadow DOM encapsulation in a Stencil component using the shadow option in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Basic E2E Test Setup in Stencil
DESCRIPTION: Demonstrates the basic structure of an end-to-end test in Stencil using Jest and Puppeteer. It shows how to create a new E2E page, set content, find elements, and make assertions.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Testing Functional Components in Stencil with newSpecPage
DESCRIPTION: Demonstrates how to test functional components using newSpecPage(). It includes rendering nested functional components and using custom functional components defined within the test.

LANGUAGE: tsx
CODE:
import { Fragment, h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyFunctionalComponent } from '../my-functional-cmp';

it('should render my component', async () => {
  const AnotherFunctionalComponent = (props: any, children: typeof Fragment) => (
    <section>{children}</section>
  );

  const page = await newSpecPage({
    components: [],
    template: () => (
      <AnotherFunctionalComponent>
        <MyFunctionalComponent>Hello World!</MyFunctionalComponent>
      </AnotherFunctionalComponent>
    ),
  });
  expect(page.root).toEqualHtml(`
    <section>
      <div>
        Hello World!
      </div>
    </section>
  `);
});

----------------------------------------

TITLE: Implementing Event Emission in Stencil TypeScript
DESCRIPTION: Demonstrates how to use the @Event decorator to emit custom events from a Stencil component. Shows basic usage of EventEmitter to dispatch custom DOM events.

LANGUAGE: typescript
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Managing Array Updates in Stencil Components
DESCRIPTION: Shows how to properly update arrays in Stencil components using immutable operations to trigger component updates. Demonstrates the use of spread operator for array updates with @Watch decorator.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Setting Props with External References in E2E Tests
DESCRIPTION: Shows how to set props on a component using external references in an E2E test, useful for importing data or reusing mock data across tests.

LANGUAGE: typescript
CODE:
const props = {
  first: 'Marty',
  lastName: 'McFly',
};

await page.setContent(`<prop-cmp></prop-cmp>`);

await page.$eval('prop-cmp',
  (elm: any, { first, lastName }) => {
    elm.first = first;
    elm.lastName = lastName;
  },
  props 
);

await page.waitForChanges();

----------------------------------------

TITLE: Configuring package.json for Stencil Component Library Distribution
DESCRIPTION: This JSON snippet demonstrates a common setup for a project's package.json file when distributing a Stencil component library. It includes various entry points for different module formats, type definitions, and specifies files to be included in the npm release.

LANGUAGE: json
CODE:
{
  "main": "dist/index.cjs.js",
  "module": "dist/index.js",
  "es2015": "dist/esm/index.mjs",
  "es2017": "dist/esm/index.mjs",
  "types": "dist/types/components.d.ts",
  "unpkg": "dist/my-project-name/my-project-name.esm.js",
  "collection:main": "dist/collection/index.js",
  "collection": "dist/collection/collection-manifest.json",
  "files": [
    "dist/",
    "css/",
    "loader/"
  ]
}

----------------------------------------

TITLE: Documenting Component Properties in Stencil TypeScript
DESCRIPTION: Example showing how to add documentation to a Stencil component property using JSDoc comments. The comment will be automatically extracted during build process to generate component documentation.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Component Hierarchy Example in Stencil
DESCRIPTION: Demonstrates the hierarchical structure of component lifecycle method execution in nested components.

LANGUAGE: markup
CODE:
  <cmp-a>
    <cmp-b>
      <cmp-c></cmp-c>
    </cmp-b>
  </cmp-a>

----------------------------------------

TITLE: Async Lifecycle Method Example in TSX
DESCRIPTION: Demonstrates how to implement an asynchronous componentWillLoad method that fetches data before rendering.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Object Updates with Watch Decorator in Stencil
DESCRIPTION: Demonstrates proper object updating techniques in Stencil components using the spread operator to ensure @Watch detection and component updates.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Using componentOnReady() in JavaScript
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code after a Stencil component has finished its first render cycle. This method returns a promise that resolves after componentDidRender() on the first render cycle.

LANGUAGE: javascript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Using Stencil Component in HTML
DESCRIPTION: Example of how to use a compiled Stencil component in HTML markup.

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Initializing Stencil Store State
DESCRIPTION: Creates a store instance with initial state and implements a change handler for reactive updates. Demonstrates store creation and computed value handling.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Initial Stencil Project Setup Commands
DESCRIPTION: Bash commands for setting up a new Stencil project after scaffolding. These commands change to the project directory, install dependencies, and start the development server.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Property Getters and Setters in Stencil
DESCRIPTION: Demonstrates the use of getters and setters with properties in Stencil components.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'get-set-props',
})
export class GetSetProps {
    private internalValue = 'should not change';
    @Prop()
    get readOnlyProp { return this.internalValue; }

    private safeValue: 'this' | 'or maybe this' = 'this';
    @Prop()
    get validatedProp {
      return this.safeValue;
    }
    set validatedProp (incomingDodgyValue: any) {
      if (['this', 'or maybe this'].includes(incomingDodgyValue)) {
        this.safeValue = incomingDodgyValue;
      }
    }

    private dateValue: Date = new Date();
    @Prop()
    get transformedProp {
      return this.dateValue;
    }
    set transformedProp (incomingStringVal: string) {
      this.dateValue = new Date(Date.parse(incomingStringVal));
    }
}

----------------------------------------

TITLE: Conditional Rendering in JSX
DESCRIPTION: Demonstrates different approaches to conditional rendering in Stencil components using if/else and ternary operators.

LANGUAGE: tsx
CODE:
render() {
  if (this.name) {
    return ( <div>Hello {this.name}</div> )
  } else {
    return ( <div>Hello, World</div> )
  }
}

----------------------------------------

TITLE: Form-Associated Custom Element in Stencil
DESCRIPTION: Shows how to create a form-associated custom element that integrates natively with HTML form elements. Uses the formAssociated component option and ElementInternals for form integration.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css',
  formAssociated: true
})
export class MyName {
  @State() value: string;
  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.internals.setFormValue(event.target.value);
  }

  render() {
    return (
      <label>
        Name:
        <input
          type="text"
          value={this.value}
          onInput={(event) => this.handleChange(event)}
        />
      </label>
    );
  }
}

----------------------------------------

TITLE: Using Shadow DOM in Stencil Components
DESCRIPTION: Shows how to enable Shadow DOM encapsulation for a Stencil component using the shadow option. It also demonstrates how to use the delegatesFocus property for focus management within the shadow DOM.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: { 
    delegatesFocus: true,
  }
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Defining a Basic Functional Component in Stencil
DESCRIPTION: Demonstrates the simplest form of a functional component in Stencil, which takes props and returns JSX.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Shadow DOM Query Selection in Stencil
DESCRIPTION: Shows how to query elements within Shadow DOM using the @Element decorator and shadowRoot property.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Watching and Parsing Object Props in Stencil Component
DESCRIPTION: This TypeScript code demonstrates how to watch for changes in string-based object props, parse them, and store the results in internal state variables. It uses @Watch decorators and lifecycle methods.

LANGUAGE: typescript
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

----------------------------------------

TITLE: Basic Functional Component in Stencil
DESCRIPTION: Simple example of a functional component that renders a hello message using props.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Initializing Basic Form-Associated Component in Stencil
DESCRIPTION: Basic setup of a form-associated component using the @Component decorator with formAssociated property set to true.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Generating Stencil Component Using CLI
DESCRIPTION: Command to generate a new Stencil component using the CLI generator. This will create component files in the src/components directory.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Installing Playwright Dependencies with NPM/Yarn
DESCRIPTION: Commands to install the Stencil Playwright adapter and Playwright test framework dependencies.

LANGUAGE: bash
CODE:
npm i @stencil/playwright @playwright/test --save-dev

----------------------------------------

TITLE: Using componentOnReady in TypeScript
DESCRIPTION: Demonstrates how to use componentOnReady() to execute code after a component's first render cycle. This method returns a promise that resolves after componentDidRender() completes.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Using Host Component in Stencil
DESCRIPTION: Demonstrates how to use the Host component to set attributes and event listeners on the host element. Shows conditional rendering of classes and aria attributes based on a prop.

LANGUAGE: tsx
CODE:
// Host is imported from '@stencil/core'
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Using a Functional Component with Children in Stencil JSX
DESCRIPTION: Demonstrates how to use a functional component that accepts children in JSX.

LANGUAGE: tsx
CODE:
<Hello name="World">
  <p>I'm a child element.</p>
</Hello>

----------------------------------------

TITLE: Configuring Vitest for Stencil Component Testing
DESCRIPTION: Configuration file for Vitest to enable browser testing for Stencil components using Chrome in headless mode.

LANGUAGE: typescript
CODE:
import stencil from 'unplugin-stencil/vite'
import { defineConfig } from 'vitest/config'

export default defineConfig({
    test: {
        browser: {
            enabled: true,
            headless: true,
            name: 'chrome'
        },
    },
    plugins: [stencil()]
})

----------------------------------------

TITLE: Defining CSS Custom Properties in Stencil
DESCRIPTION: Demonstrates how to define and use CSS custom properties (CSS variables) in a Stencil component.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: CSS Parts Implementation
DESCRIPTION: Demonstrates how to use CSS parts to enable styling from outside the component through the shadow DOM boundary.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Installing Angular Output Target
DESCRIPTION: Command to install the Stencil Angular output target in the Stencil component library.

LANGUAGE: bash
CODE:
npm install @stencil/angular-output-target --save-dev

----------------------------------------

TITLE: Basic E2E Test Structure in Stencil
DESCRIPTION: Demonstrates the basic structure of an E2E test in Stencil, including importing the necessary functions, setting up a test case, and performing basic assertions.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Getting Stencil Element in TypeScript
DESCRIPTION: Demonstrates how to use getElement() to retrieve a Stencil element for a given reference and use componentOnReady() on it.

LANGUAGE: typescript
CODE:
import { getElement } from '@stencil/core'

const stencilComponent = getElement(document.querySelector('my-cmp'))
if (stencilComponent) {
  stencilComponent.componentOnReady().then(() => { ... })
}

----------------------------------------

TITLE: Setting Up a New Stencil Project
DESCRIPTION: Commands to set up a new Stencil project after creation. This includes changing to the project directory, installing dependencies, and starting the development server.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Implementing Shadow DOM in Stencil Component
DESCRIPTION: Example showing how to enable Shadow DOM in a Stencil component using the shadow property in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Configuring Event Options in Stencil
DESCRIPTION: Shows how to configure custom event options using the @Event decorator. The example demonstrates setting a custom event name, making it composed, cancelable, and enabling bubbling.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Web Components
DESCRIPTION: This JSON configuration sets up VS Code to debug Stencil components running in a Chrome browser. It connects to the default Stencil dev server port and enables source map support for accurate debugging.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:3333",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "*": "${webRoot}/*"
      }
    }
  ]
}

----------------------------------------

TITLE: Creating a Stencil Store
DESCRIPTION: Example of creating a store using @stencil/store. It demonstrates initializing state, using onChange to react to state changes, and exporting the state for use in components.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Rendering Component with newSpecPage in TypeScript
DESCRIPTION: Demonstrates how to use newSpecPage() to render and test a Stencil component. It creates a test page, renders the component, and uses toEqualHtml() to verify the output.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Shadow DOM Component Styling
DESCRIPTION: Demonstrates styling the host element when using Shadow DOM with the :host selector.

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Basic Functional Component Implementation in Stencil
DESCRIPTION: Shows the simplest implementation of a Functional Component that takes props and returns JSX markup.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Using Store in Stencil Component
DESCRIPTION: Example component showing how to consume and update store state, including interval-based updates and event handling.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Initializing a Form-Associated Stencil Component
DESCRIPTION: This snippet demonstrates how to set up a basic form-associated component in Stencil using the formAssociated option in the @Component decorator.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Using Stencil Store in a Component
DESCRIPTION: Demonstration of using the store within a Stencil component, including updating and rendering state values.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: Shows how to apply styles within a Shadow DOM component, using the :host pseudo-class selector to target the host element.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Handling User Input in Stencil
DESCRIPTION: Shows how to handle user input events like button clicks and input changes in Stencil components.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Configuring NPM Test Scripts for Stencil
DESCRIPTION: Example NPM scripts configuration in package.json for running different types of Stencil tests including unit tests, watch mode, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Binding Event Listeners in JSX for Stencil Components
DESCRIPTION: Shows how to bind event listeners directly in JSX when using Stencil components. The example demonstrates listening to a custom 'todoCompleted' event on a TodoList component.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

----------------------------------------

TITLE: Using Slots in Stencil Components
DESCRIPTION: Explains how to use slots to allow dynamic child content in Stencil components.

LANGUAGE: tsx
CODE:
render() {
  return [
    <slot name="item-start" />,
    <h1>Here is my main content</h1>,
    <slot name="item-end" />
  ]
}

----------------------------------------

TITLE: Using componentOnReady in TypeScript
DESCRIPTION: Demonstrates how to use the componentOnReady() utility method to execute code after a component's first render cycle. Returns a promise that resolves after componentDidRender() on the initial render.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Basic Form Implementation in Stencil
DESCRIPTION: Demonstrates a simple form component with a single text input field and submit handler. The component uses State decorator for value management and includes basic event handling for form submission and input changes.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Event Handling in Stencil Components
DESCRIPTION: Demonstration of handling user input events like button clicks and input changes using arrow functions.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Using Web Worker Functions in Stencil Components
DESCRIPTION: Demonstrates how to import and use Web Worker functions in a Stencil component. The functions are called as if they were regular async functions, but they execute in a separate thread.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Prop Types in Stencil
DESCRIPTION: Demonstrates various prop types including boolean, number, string, and custom object types in Stencil components.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() isComplete: boolean;
    @Prop() timesCompletedInPast: number;
    @Prop() thingToDo: string;
    @Prop() myHttpService: MyHttpService;
}

----------------------------------------

TITLE: Generating Stencil Component Using CLI
DESCRIPTION: Command to generate a new Stencil component using the CLI generator with a specified component name.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Exporting Vue Component Wrappers and Plugin
DESCRIPTION: Export the generated component wrappers and Vue plugin to make them available for consumers.

LANGUAGE: typescript
CODE:
export * from './components';
export * from './plugin';

----------------------------------------

TITLE: Configuring Stencil Output Target for React
DESCRIPTION: This snippet shows how to configure the Stencil output target to generate React component wrappers. It sets up the reactOutputTarget in the Stencil config file.

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    reactOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../react-library/lib/components/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Rendering Stencil Component for Testing with WebdriverIO
DESCRIPTION: This code snippet demonstrates how to import and render a Stencil component for unit testing using WebdriverIO's browser runner and render method.

LANGUAGE: typescript
CODE:
import { render } from '@wdio/browser-runner/stencil';
import { MyComponent } from './my-component';

describe('MyComponent', () => {
    it('renders', async () => {
        const { root } = await render({
            components: [MyComponent],
            template: () => (
                <my-component first="Stencil" last="'Don't call me a framework' JS" />
            ),
        });

        await expect(root).toHaveText(
            "Hello, World! I'm Stencil 'Don't call me a framework' JS"
        );
    });
});

----------------------------------------

TITLE: Using Stencil Components with Props in TSX and HTML
DESCRIPTION: Demonstrates how to use a Stencil component with props in both TSX and HTML contexts.

LANGUAGE: tsx
CODE:
{/* Here we use the component in a TSX file */}
<todo-list name={"Tuesday's To-Do List"}></todo-list>

LANGUAGE: html
CODE:
<!-- Here we use the component in an HTML file -->
<todo-list name="Tuesday's To-Do List"></todo-list>

----------------------------------------

TITLE: Enabling Shadow DOM in Stencil Component
DESCRIPTION: Demonstrates how to enable Shadow DOM for a Stencil component by setting the 'shadow' option to true in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Form-Associated Custom Element in Stencil
DESCRIPTION: Shows how to create a form-associated custom element that integrates natively with HTML forms. Uses ElementInternals for form integration.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css',
  formAssociated: true
})
export class MyName {
  @State() value: string;
  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.internals.setFormValue(event.target.value);
  }

  render() {
    return (
      <label>
        Name:
        <input
          type="text"
          value={this.value}
          onInput={(event) => this.handleChange(event)}
        />
      </label>
    );
  }
}

----------------------------------------

TITLE: Configuring Stencil Output Targets in TypeScript
DESCRIPTION: This snippet demonstrates how to configure multiple output targets in a Stencil project's configuration file. It shows how to set up both 'dist' and 'www' output types.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Using Host Component in Stencil TSX
DESCRIPTION: Demonstrates how to use the Host component to set attributes and classes on the host element based on component properties.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Using CSS Custom Properties in Stencil
DESCRIPTION: Demonstrates how to define and use CSS custom properties (CSS variables) in a Stencil component for customizable styling.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Basic Functional Component in Stencil
DESCRIPTION: Simple example of a functional component that accepts props and returns JSX. Shows the basic syntax for creating a functional component that displays a greeting.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Basic E2E Test Setup in Stencil
DESCRIPTION: Demonstrates the basic structure of an E2E test in Stencil, including importing the necessary functions, setting up a test case, and performing a simple component render check.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Basic Form Implementation in Stencil TSX
DESCRIPTION: Demonstrates a basic form component with a single text input field. Shows how to handle form submission, manage input state, and bind event handlers.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Fragment Component Example in TSX
DESCRIPTION: Demonstration of using Fragment component to group elements without a wrapper node in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Fragment, h } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Implementing CSS Parts in Stencil Component
DESCRIPTION: Shows how to use CSS parts to allow greater styling flexibility from the light DOM, including the use of the 'part' attribute and ::part() pseudo-element.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Implementing Shadow DOM in Stencil Component
DESCRIPTION: Example of enabling Shadow DOM in a Stencil component using the shadow option in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Listening to Stencil Component Events in Plain JavaScript
DESCRIPTION: Demonstrates how to add event listeners to Stencil components using vanilla JavaScript, useful when not working within a JSX context.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: Shows how to write scoped CSS styles for a Shadow DOM component, including the use of the :host pseudo-class selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Using getAssetPath in TypeScript/JSX
DESCRIPTION: Shows how to use the getAssetPath() function to get the path to local assets within a Stencil component.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Basic Form Implementation in Stencil TSX
DESCRIPTION: Demonstrates a basic form component with a single text input field. Shows how to handle form submission, manage input state, and bind event handlers.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Using Slots in Stencil Components
DESCRIPTION: Demonstrates how to use slots to allow dynamic child content in Stencil components.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
      <h2>A Component</h2>
      <div><slot /></div>
    </div>
  );
}

----------------------------------------

TITLE: Basic Stencil Config Example
DESCRIPTION: A basic example of a Stencil configuration file that sets the namespace and source directory.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Custom Text Input Implementation with Form Association
DESCRIPTION: Implementation of a custom text input component that integrates with forms using ElementInternals and form value management.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Using Stencil Store in a Component
DESCRIPTION: Demonstration of using the store within a Stencil component, including updating and rendering state values.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Listening to DOM Events in Stencil Components
DESCRIPTION: Demonstrates the use of the @Listen() decorator to handle DOM events, including custom events emitted by child components.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Using Refs to Access DOM Elements
DESCRIPTION: Demonstrates how to use refs to get direct references to DOM elements in Stencil components.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'app-home',
})
export class AppHome {

  textInput!: HTMLInputElement;

  handleSubmit = (event: Event) => {
    event.preventDefault();
    console.log(this.textInput.value);
  }

  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <label>
          Name:
          <input type="text" ref={(el) => this.textInput = el as HTMLInputElement} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Array Updates with Stencil Watch Decorator
DESCRIPTION: Shows how to properly update arrays in Stencil components using immutable operations to trigger the Watch decorator and component updates.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: CSS Custom Properties Implementation
DESCRIPTION: Example of defining and using CSS custom properties in a Stencil component.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Implementing Async componentWillLoad in Stencil
DESCRIPTION: This example demonstrates how to use componentWillLoad() to asynchronously fetch data before rendering a component. It returns a Promise to ensure the parent component waits for the data to load.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Enabling Strict Mode for README Generation
DESCRIPTION: This snippet shows how to enable strict mode for README generation, which will output warnings for missing documentation, by configuring the 'docs-readme' output target in the Stencil configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      strict: true
    }
  ]
};

----------------------------------------

TITLE: Implementing Async componentWillLoad in Stencil
DESCRIPTION: This snippet demonstrates how to use componentWillLoad to asynchronously fetch data before rendering. It returns a Promise to ensure the parent component waits for the data to load.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Rendering Complex Templates in Stencil
DESCRIPTION: Demonstrates how to render multiple top-level elements using an array or Fragment in Stencil components.

LANGUAGE: tsx
CODE:
import { Fragment } from '@stencil/core';
...
render() {
  return (<Fragment>
    <div class="container">
      <ul>
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
      </ul>
    </div>

    <div class="another-container">
      ... more html content ...
    </div>
  </Fragment>);
}

----------------------------------------

TITLE: Importing Stencil Core Compiler in NodeJS
DESCRIPTION: Demonstrates how to import the Stencil Core Compiler module in a NodeJS environment using CommonJS syntax.

LANGUAGE: tsx
CODE:
// NodeJS (commonjs)
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Basic Usage of @State Decorator in Stencil
DESCRIPTION: Demonstrates how to use the @State() decorator to mark a class member for rerendering when its value changes. This example shows a component that displays the current time.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Handling Keyboard Events in Stencil Components
DESCRIPTION: Shows how to listen for and handle keyboard events in Stencil components using the @Listen decorator. The example listens for the 'keydown' event and checks for the arrow down key.

LANGUAGE: tsx
CODE:
@Listen('keydown')
handleKeyDown(ev: KeyboardEvent){
  if (ev.key === 'ArrowDown'){
    console.log('down arrow pressed')
  }
}

----------------------------------------

TITLE: Testing Functional Components in TSX
DESCRIPTION: Illustrates testing of functional components with nested children and custom templates. Shows how to test components without explicitly declaring them in the components list.

LANGUAGE: tsx
CODE:
import { Fragment, h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyFunctionalComponent } from '../my-functional-cmp';

it('should render my component', async () => {
  const AnotherFunctionalComponent = (props: any, children: typeof Fragment) => (
    <section>{children}</section>
  );

  const page = await newSpecPage({
    components: [],
    template: () => (
      <AnotherFunctionalComponent>
        <MyFunctionalComponent>Hello World!</MyFunctionalComponent>
      </AnotherFunctionalComponent>
    ),
  });
  expect(page.root).toEqualHtml(`
    <section>
      <div>
        Hello World!
      </div>
    </section>
  `);
});

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Component Lifecycle
DESCRIPTION: Shows how to use async/await in the componentWillLoad lifecycle method to fetch data from an API before rendering a component.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Setting Up a New Stencil Project
DESCRIPTION: Commands to change to the project directory, install dependencies, and start the development server after creating a new Stencil project.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Using componentOnReady in TypeScript
DESCRIPTION: Example of using the componentOnReady() method to execute code after a component's first render cycle is complete.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Using Slots in Stencil Components
DESCRIPTION: Illustrates how to use slots in Stencil components to allow dynamic content insertion.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
      <h2>A Component</h2>
      <div><slot /></div>
    </div>
  );
}

LANGUAGE: tsx
CODE:
render(){
  return [
    <slot name="item-start" />,
    <h1>Here is my main content</h1>,
    <slot name="item-end" />
  ]
}

----------------------------------------

TITLE: Using CSS Custom Properties in Stencil
DESCRIPTION: Demonstrates the definition and usage of CSS custom properties (CSS variables) in Stencil components.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Basic Prop Declaration in Stencil Component
DESCRIPTION: Shows how to declare a basic property in a Stencil component using the @Prop decorator

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Demonstrating Connected Callback Flow in Stencil
DESCRIPTION: Shows how connectedCallback is called when a component is attached to the DOM, including multiple attachment scenarios.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Configuring Stencil Output Target
DESCRIPTION: Configuration for the React output target in stencil.config.ts to enable React component wrapper generation

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    reactOutputTarget({
      outDir: '../react-library/lib/components/stencil-generated/',
    }),
    { type: 'dist-custom-elements' },
  ],
};

----------------------------------------

TITLE: Using componentOnReady() in TypeScript
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code after a component's first render cycle. This method returns a promise that resolves after componentDidRender() on the initial render.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Using componentOnReady in TypeScript
DESCRIPTION: Example of using the componentOnReady() method to execute code after a component's first render cycle is complete.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Importing Ionic Framework Components in Ember
DESCRIPTION: JavaScript code to import all components from the Ionic Framework in an Ember application's main app.js file.

LANGUAGE: javascript
CODE:
import '@ionic/core'; // installs all the components from Ionic Framework

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: This snippet shows how to configure the 'dist' output target in Stencil's configuration file. It generates a reusable, self-lazy loading component library.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Creating a Custom Clock Component in Stencil
DESCRIPTION: This example shows a clock component that updates the current time every second. It uses connectedCallback() to start the timer and disconnectedCallback() to stop it when the component is removed from the DOM.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Combining State with Event Listeners
DESCRIPTION: Example of using @State with @Listen decorator to create a toggle button component that updates state based on click events.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Variable Casing Example
DESCRIPTION: Demonstrates how to handle camelCase properties in both TSX and HTML contexts.

LANGUAGE: tsx
CODE:
<todo-list-item thingToDo={"Learn about Stencil Props"}></todo-list-item>

LANGUAGE: html
CODE:
<todo-list-item thing-to-do="Learn about Stencil Props"></todo-list-item>

----------------------------------------

TITLE: Rendering Basic JSX in Stencil Component
DESCRIPTION: Demonstrates the basic structure of a Stencil component using JSX to render a simple div with child elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Testing Component Class Logic in Stencil
DESCRIPTION: Illustrates how to test component class logic directly by instantiating the component class and calling its methods. This example tests the MyToggle component's checked property and a method that toggles it.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Updating Arrays in Stencil Components
DESCRIPTION: Illustrates the correct way to update arrays in Stencil components using immutable operations like the spread operator. This ensures that @Watch decorators are triggered and the component re-renders.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}


----------------------------------------

TITLE: Using Fragment in Stencil Component Render
DESCRIPTION: Demonstrates the use of Fragment (via <></> syntax) in a Stencil component's render method to group elements without a wrapper node. This requires specific TypeScript compiler options to be set.

LANGUAGE: typescript
CODE:
import { Component, Fragment } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Full Build Example with Stencil Compiler
DESCRIPTION: Demonstrates a complete example of setting up and running a full build using the Stencil Compiler in a NodeJS environment. It includes creating a logger, system, loading config, and executing the build.

LANGUAGE: tsx
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Demonstrating connectedCallback Usage in Stencil
DESCRIPTION: Example showing how connectedCallback is triggered when a component is attached to the DOM, including the relationship with componentWillLoad.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Shadow DOM Style Scoping Example
DESCRIPTION: Demonstrates how to write scoped styles within a Shadow DOM component using the :host selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Configuring Basic Workbox Service Worker in Stencil
DESCRIPTION: Default configuration for generating a service worker using Workbox in a Stencil project. Defines glob patterns for static assets to be cached.

LANGUAGE: typescript
CODE:
{
  globPatterns: [
    '**/*.{js,css,json,html}'
  ]
};

----------------------------------------

TITLE: Basic Component Lifecycle Example in TSX
DESCRIPTION: Demonstrates the basic usage of connectedCallback and componentWillLoad lifecycle methods using DOM manipulation.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Rendering and Testing a Stencil Component with newSpecPage
DESCRIPTION: Demonstrates how to use newSpecPage() to render a Stencil component and test its output using Jest. It includes setting up the test environment and using the toEqualHtml matcher.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Enabling Strict Mode for README Generation
DESCRIPTION: This snippet shows how to enable strict mode for README generation, which will output warnings for missing documentation, by configuring the 'docs-readme' output target in the Stencil configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      strict: true
    }
  ]
};

----------------------------------------

TITLE: Emitting Custom Events in Stencil Components
DESCRIPTION: This snippet demonstrates how to use the @Event decorator to emit custom events from a Stencil component. It shows the basic usage and how to configure event options.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Custom Text Input Implementation with Form Association
DESCRIPTION: Shows a complete implementation of a custom text input component that integrates with forms using ElementInternals.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Managing Array Updates in Stencil Components
DESCRIPTION: Shows how to properly update arrays in Stencil components using immutable operations to trigger state changes and component updates. Includes example with interval-based updates.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: File Structure Example in Stencil
DESCRIPTION: Demonstrates recommended file organization for Stencil components showing directory structure with separate files for different platforms and test cases.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Shadow DOM CSS Styling Example
DESCRIPTION: Demonstrates basic CSS styling within a Shadow DOM component using the :host selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: File Structure Example in Stencil
DESCRIPTION: Demonstrates recommended file organization for Stencil components showing directory structure with separate files for different platforms and test cases.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Configuring Output Targets in Stencil
DESCRIPTION: This snippet demonstrates how to configure multiple output targets in a Stencil project's configuration file. It shows setting up both 'dist' and 'www' output types.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Basic Usage of @State() Decorator in Stencil Component
DESCRIPTION: Demonstrates how to use the @State() decorator to mark a class member for triggering rerenders when its value changes. This example shows a simple current time component.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Using Events in JSX with Stencil Components
DESCRIPTION: Shows how to bind event listeners directly in JSX when using Stencil components. The example demonstrates listening to a 'todoCompleted' event on a <todo-list> component.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

----------------------------------------

TITLE: File Structure Example for Stencil Components
DESCRIPTION: Demonstrates the recommended directory structure for organizing Stencil components, showing how to separate components into their own directories with associated styles and tests.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Querying Typed Stencil Components with TypeScript
DESCRIPTION: Demonstrates how to properly type a reference to a Stencil Web Component using the automatically generated HTML element interfaces. Shows querying an ion-button component with proper TypeScript typing.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Valid and Invalid Method Implementations
DESCRIPTION: Examples of valid and invalid implementations of public methods using the @Method decorator, demonstrating the requirement for async returns.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Implementing Controlled Ionic Toggle in Ember Component
DESCRIPTION: Example of creating an Ember component with a controlled Ionic toggle, demonstrating event handling and state management.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Testing Component with JSX Template in TypeScript
DESCRIPTION: Shows how to use the template option in newSpecPage() to test a component with JSX syntax. It passes a prop to the component and verifies the rendered output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Creating a Basic Functional Component in Stencil
DESCRIPTION: Demonstrates how to create a simple functional component that renders a greeting using props.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Prop Options in Stencil: Attribute, Mutable, and Reflect
DESCRIPTION: This snippet shows how to use various options with the @Prop() decorator including attribute naming, mutability, and reflection.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
   tag: 'todo-list-item',
})
export class ToDoListItem {
   @Prop({ attribute: 'complete' }) isComplete: boolean;
   @Prop({ mutable: true }) thingToDo: string;
   @Prop({ reflect: true }) timesCompletedInPast: number = 2;
}

----------------------------------------

TITLE: Configuring Event Options in Stencil
DESCRIPTION: Shows how to configure event behavior using EventOptions interface, including customizing event name, bubbling, cancelable, and composition properties.

LANGUAGE: tsx
CODE:
export interface EventOptions {
  /**
   * A string custom event name to override the default.
   */
  eventName?: string;
  /**
   * A Boolean indicating whether the event bubbles up through the DOM or not.
   */
  bubbles?: boolean;

  /**
   * A Boolean indicating whether the event is cancelable.
   */
  cancelable?: boolean;

  /**
   * A Boolean value indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.
   */
  composed?: boolean;
}

----------------------------------------

TITLE: Using Element Decorator in Stencil TSX
DESCRIPTION: Demonstrates how to use the @Element() decorator to access the host element within the component class.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Testing Functional Components in TSX
DESCRIPTION: Illustrates testing of functional components with nested children and custom templates. Shows how to test components without explicitly declaring them in the components list.

LANGUAGE: tsx
CODE:
import { Fragment, h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyFunctionalComponent } from '../my-functional-cmp';

it('should render my component', async () => {
  const AnotherFunctionalComponent = (props: any, children: typeof Fragment) => (
    <section>{children}</section>
  );

  const page = await newSpecPage({
    components: [],
    template: () => (
      <AnotherFunctionalComponent>
        <MyFunctionalComponent>Hello World!</MyFunctionalComponent>
      </AnotherFunctionalComponent>
    ),
  });
  expect(page.root).toEqualHtml(`
    <section>
      <div>
        Hello World!
      </div>
    </section>
  `);
});

----------------------------------------

TITLE: Emitting Custom Events in Stencil Components (TypeScript)
DESCRIPTION: Demonstrates how to use the @Event decorator to emit custom DOM events from a Stencil component. The example shows a TodoList component emitting a 'todoCompleted' event.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Web Components
DESCRIPTION: This JSON configuration sets up VS Code to debug Stencil components running in a Chrome browser. It points to the localhost server typically used by Stencil's dev server and enables source map support for accurate debugging.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:3333",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "*": "${webRoot}/*"
      }
    }
  ]
}

----------------------------------------

TITLE: Object Updates with Watch in Stencil
DESCRIPTION: Demonstrates proper object mutation techniques in Stencil components using the spread operator to ensure @Watch triggers and component updates occur.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Installing Playwright Dependencies with NPM/Yarn
DESCRIPTION: Command to install the Stencil Playwright adapter and Playwright test dependencies

LANGUAGE: bash
CODE:
npm i @stencil/playwright @playwright/test --save-dev

----------------------------------------

TITLE: Basic Usage of @State Decorator in Stencil
DESCRIPTION: Demonstrates how to use the @State decorator to mark a class member for rerendering when its value changes. This example shows a simple current-time component that doesn't update after initial render.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Keyboard Event Handling in Stencil
DESCRIPTION: Demonstrates how to handle keyboard events using @Listen decorator with keydown event.

LANGUAGE: tsx
CODE:
@Listen('keydown')
handleKeyDown(ev: KeyboardEvent){
  if (ev.key === 'ArrowDown'){
    console.log('down arrow pressed')
  }
}

----------------------------------------

TITLE: Using Props in TSX and HTML
DESCRIPTION: Examples of how to use props when rendering Stencil components in TSX and HTML.

LANGUAGE: tsx
CODE:
<todo-list name={"Tuesday's To-Do List"}></todo-list>

LANGUAGE: html
CODE:
<todo-list name="Tuesday's To-Do List"></todo-list>

----------------------------------------

TITLE: CreateCompiler Function Implementation
DESCRIPTION: Example showing how to create and use a Stencil compiler instance in a NodeJS environment with proper configuration.

LANGUAGE: tsx
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Styling Host Element in CSS
DESCRIPTION: Shows how to style the host element using CSS for non-Shadow DOM components.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

----------------------------------------

TITLE: Basic E2E Test Structure in Stencil
DESCRIPTION: Demonstrates the basic structure of an end-to-end test in Stencil, including importing the necessary functions, setting up a test case, and performing simple assertions.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Async Data Fetching in ComponentWillLoad
DESCRIPTION: Example showing how to implement asynchronous data fetching in componentWillLoad using Promises.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Creating and Configuring a Stencil Store
DESCRIPTION: Example of creating a store with initial state, defining derived state, and exporting the store for use in components. Uses createStore function and onChange API.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Using Stencil Store in a Component
DESCRIPTION: Demonstrates how to use the store within a Stencil component, including updating and reading state values.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Implementing Async Lifecycle Method in Stencil
DESCRIPTION: This example demonstrates how to use componentWillLoad as an async method to fetch data before rendering a component.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Listening to Events with Listen Decorator
DESCRIPTION: Demonstrates how to use the @Listen decorator to handle DOM events, including custom events emitted by other components.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Importing Stencil Compiler in NodeJS
DESCRIPTION: Shows how to import the Stencil compiler module in a NodeJS environment using CommonJS require syntax.

LANGUAGE: tsx
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Prop Mutability and Reflection
DESCRIPTION: Example of configuring prop mutability and reflection using the @Prop() decorator options.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class ToDoListItem {
   @Prop({ mutable: true }) thingToDo: string;
   @Prop({ reflect: true }) timesCompletedInPast: number = 2;

   componentDidLoad() {
      this.thingToDo = 'Ah! A new value!';
   }
}

----------------------------------------

TITLE: Using Component with Child Elements
DESCRIPTION: Shows how to use a functional component while passing child elements.

LANGUAGE: tsx
CODE:
<Hello name="World">
  <p>I'm a child element.</p>
</Hello>

----------------------------------------

TITLE: Using getAssetPath in Stencil Component
DESCRIPTION: Illustrates how to use the getAssetPath() function in a Stencil component to get the path to local assets. This is useful for referencing assets like images within the component.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Rendering Component with newSpecPage in Stencil Unit Test
DESCRIPTION: Demonstrates how to use newSpecPage() to render a component and test its output. It imports the component, creates a test page, and uses toEqualHtml() to verify the rendered HTML.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Custom Clock Component Implementation
DESCRIPTION: Complete example showing a clock component that updates every second, demonstrating the use of connectedCallback and disconnectedCallback for timer management.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Event Type Conflict Resolution
DESCRIPTION: Demonstrates two approaches to resolve conflicts between Stencil Event type and native web Event type.

LANGUAGE: tsx
CODE:
import { Event as StencilEvent, EventEmitter } from '@stencil/core';

@StencilEvent() myEvent: EventEmitter<{value: string, ev: Event}>;

----------------------------------------

TITLE: Object Updates with Stencil Watch Decorator
DESCRIPTION: Demonstrates proper object update patterns in Stencil components using the spread operator to ensure Watch decorator triggers and component updates.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Using Refs in Stencil Components
DESCRIPTION: Shows how to use refs to get direct references to DOM elements in Stencil components.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'app-home',
})
export class AppHome {

  textInput!: HTMLInputElement;

  handleSubmit = (event: Event) => {
    event.preventDefault();
    console.log(this.textInput.value);
  }

  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <label>
          Name:
          <input type="text" ref={(el) => this.textInput = el as HTMLInputElement} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Styling Host Element in Stencil Components
DESCRIPTION: This example shows how to apply CSS styles to the host element of a Stencil component. It demonstrates the difference in styling between components with and without Shadow DOM.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Configuring Angular Output Target in Stencil Config
DESCRIPTION: This snippet shows how to configure the Angular output target in the Stencil config file. It includes setting up the output target with necessary options like componentCorePackage, outputType, and file paths for generated wrappers.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Watching Prop Changes in a Stencil Component
DESCRIPTION: This TypeScript code shows how to watch for changes in props within a Stencil component. It uses the @Watch decorator to define methods that parse string representations of objects and arrays into their respective types.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

----------------------------------------

TITLE: Property Usage in HTML and TSX
DESCRIPTION: Demonstrates how to use a Stencil component with properties in both HTML and TSX contexts

LANGUAGE: tsx
CODE:
{/* Here we use the component in a TSX file */}
<todo-list name={"Tuesday's To-Do List"}></todo-list>

LANGUAGE: html
CODE:
<!-- Here we use the component in an HTML file -->
<todo-list name="Tuesday's To-Do List"></todo-list>

----------------------------------------

TITLE: Using Element Decorator in Stencil TSX
DESCRIPTION: Demonstrates how to use the Element decorator to access the host element within the component class, including usage with TypeScript's definite assignment assertion.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

...
export class TodoList {

  @Element() el!: HTMLElement;

  private listHeight = this.el.getBoundingClientRect().height;
}

----------------------------------------

TITLE: Component Hierarchy Example in Stencil
DESCRIPTION: Shows the component hierarchy and lifecycle method execution order for nested components.

LANGUAGE: markup
CODE:
  <cmp-a>
    <cmp-b>
      <cmp-c></cmp-c>
    </cmp-b>
  </cmp-a>

----------------------------------------

TITLE: Setting Up a New Stencil Project
DESCRIPTION: Commands to set up a new Stencil project after scaffolding. This includes changing to the project directory, installing dependencies, and starting the development server.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Using Host Component in Stencil TSX
DESCRIPTION: Demonstrates how to use the Host functional component to set attributes and event listeners on the host element. It also shows how Host can be used as a Fragment to render multiple elements at the root level.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Basic Stencil Config in TypeScript
DESCRIPTION: A simple example of a Stencil configuration file defining the namespace and source directory.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Custom Service Worker with Update Handling (JavaScript)
DESCRIPTION: Custom Service Worker implementation that listens for skipWaiting messages to handle updates.

LANGUAGE: javascript
CODE:
importScripts("workbox-v4.3.1/workbox-sw.js");

self.addEventListener("message", ({ data }) => {
  if (data === "skipWaiting") {
    self.skipWaiting();
  }
});

self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Using Stencil Store in a Component
DESCRIPTION: Demonstrates how to use the store within a Stencil component, including updating state, accessing state properties, and creating a global counter component.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Form Usage Example with Custom Component
DESCRIPTION: Shows how to use the custom form-associated component within an HTML form structure.

LANGUAGE: html
CODE:
<form>
  <custom-text-input name="my-custom-input"></custom-text-input>
</form>

----------------------------------------

TITLE: Generating JSON Docs via CLI in Stencil
DESCRIPTION: Command to generate JSON documentation using Stencil CLI. This allows for flexible documentation generation.

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Dynamic State Updates with Lifecycle Methods
DESCRIPTION: Shows how to update state periodically using lifecycle methods connectedCallback and disconnectedCallback, demonstrating proper state management patterns.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;
    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Full Build Example with Stencil Core Compiler
DESCRIPTION: Demonstrates a complete example of running a full build in a NodeJS environment using the Stencil Core Compiler, including config loading and compiler creation.

LANGUAGE: typescript
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Using getAssetPath() in JSX with TypeScript
DESCRIPTION: Illustrates how to use the getAssetPath() function to retrieve the path to local assets within a Stencil component. This example shows its usage in the render method to set an image source.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Rendering Multiple Stencil Components for Testing
DESCRIPTION: This snippet shows how to render multiple interdependent Stencil components for testing. It demonstrates importing and passing multiple components to the render function.

LANGUAGE: typescript
CODE:
render({
    components: [ComponentA, ComponentB, ComponentC, ComponentD],
    template: () => <component-a first="Stencil" last="'Don't call me a framework' JS" />
});

----------------------------------------

TITLE: Conditional Rendering in JSX
DESCRIPTION: Demonstrates conditional rendering using if/else statements and the ternary operator in JSX.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
    {this.name
      ? <p>Hello {this.name}</p>
      : <p>Hello World</p>
    }
    </div>
  );
}

----------------------------------------

TITLE: Service Implementation Using Helper in TypeScript
DESCRIPTION: Service function that utilizes the getRandomInt helper function

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Embedding Stencil Components
DESCRIPTION: Demonstrates how to embed one Stencil component within another using JSX syntax.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Advanced Form Implementation in Stencil
DESCRIPTION: Demonstrates a complex form with multiple input types including email and select elements. Includes form validation, state management for multiple fields, and dynamic option rendering.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Using getAssetPath API
DESCRIPTION: Demonstrates how to use getAssetPath API to resolve asset paths relative to the build directory

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Documenting Component Properties in Stencil TypeScript
DESCRIPTION: Example showing how to add documentation to a Stencil component property using JSDoc comments. The @Prop decorator is used to define component properties with descriptive comments.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Configuring Output Targets in Stencil
DESCRIPTION: This snippet demonstrates how to configure multiple output targets in a Stencil project's configuration file. It shows setting up both 'dist' and 'www' output types.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Form-Associated Stencil Component
DESCRIPTION: Shows how to create a form-associated component that can participate in forms using the ElementInternals API.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Using @State() with Complex Types in Stencil
DESCRIPTION: Illustrates how to use @State() with a complex type (array of objects) to create a dynamic list component that adds items over time and triggers rerenders.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Testing Functional Components in Stencil
DESCRIPTION: Shows how to test functional components using newSpecPage, including nested components and direct functional component definitions.

LANGUAGE: tsx
CODE:
import { Fragment, h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyFunctionalComponent } from '../my-functional-cmp';

it('should render my component', async () => {
  const AnotherFunctionalComponent = (props: any, children: typeof Fragment) => (
    <section>{children}</section>
  );

  const page = await newSpecPage({
    components: [],
    template: () => (
      <AnotherFunctionalComponent>
        <MyFunctionalComponent>Hello World!</MyFunctionalComponent>
      </AnotherFunctionalComponent>
    ),
  });
  expect(page.root).toEqualHtml(`
    <section>
      <div>
        Hello World!
      </div>
    </section>
  `);
});

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: This snippet shows how to configure the 'dist' output target in a Stencil project's configuration file. It generates a reusable, self-lazy loading component library.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Using Host Component to Set Attributes in Stencil
DESCRIPTION: This snippet demonstrates how to use the Host functional component to set attributes and event listeners on the host element of a Stencil component. It shows how to conditionally apply classes and set ARIA attributes based on component props.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Using CSS Custom Properties in Stencil
DESCRIPTION: Demonstrates how to define and use CSS custom properties (CSS variables) in a Stencil component for customizable styling.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Basic Method Decorator Implementation in Stencil
DESCRIPTION: Demonstrates how to use the @Method decorator to create a public async method in a Stencil component. The example shows a simple TodoList component with a showPrompt method.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Enabling Shadow DOM in Stencil Component
DESCRIPTION: Demonstrates how to enable Shadow DOM for a Stencil component by setting the 'shadow' option to true in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Component Composition Example
DESCRIPTION: Demonstrates how to compose Stencil components by nesting them within each other.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Initializing Basic Form-Associated Component in Stencil
DESCRIPTION: Basic setup of a form-associated component using the formAssociated property in the Component decorator.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Initializing Stencil Project using CLI
DESCRIPTION: Command to run the create-stencil CLI for scaffolding a new Stencil project. It provides options for creating standalone components or entire apps.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Event Handling in JSX
DESCRIPTION: Demonstrates how to bind event listeners directly in JSX within Stencil components.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

----------------------------------------

TITLE: Using Stencil Store in a Component
DESCRIPTION: Demonstration of how to use the store within a Stencil component, including updating and rendering state values.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Setting Asset Path in Stencil Application
DESCRIPTION: Shows how to use the setAssetPath function to set the base path for resolving local assets in a Stencil application. This is typically done at the application level.

LANGUAGE: typescript
CODE:
import { setAssetPath } from '@stencil/core';
setAssetPath(`{window.location.origin}/`);

----------------------------------------

TITLE: Using componentOnReady() in TypeScript
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code after a Stencil component has finished its first render cycle. This method returns a promise that resolves after componentDidRender() on the first render cycle.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Rendering Multiple Stencil Components for Testing
DESCRIPTION: This snippet shows how to render multiple interdependent Stencil components for testing. It demonstrates importing and passing multiple components to the render function.

LANGUAGE: typescript
CODE:
render({
    components: [ComponentA, ComponentB, ComponentC, ComponentD],
    template: () => <component-a first="Stencil" last="'Don't call me a framework' JS" />
});

----------------------------------------

TITLE: Creating a Form-Associated Stencil Component
DESCRIPTION: This snippet shows how to create a minimal form-associated Stencil component using the formAssociated option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Event Listening in Stencil Components
DESCRIPTION: Demonstrates how to listen to custom events using the @Listen decorator in a Stencil component.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

export class TodoApp {
  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Event Handling in JSX
DESCRIPTION: Demonstrates how to bind event listeners directly in JSX within Stencil components.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

----------------------------------------

TITLE: Defining Props in a Stencil Component
DESCRIPTION: Example of using the @Prop decorator to define properties in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Resolving Asset Paths in Stencil Components
DESCRIPTION: Demonstrates how to use the getAssetPath API to resolve asset paths relative to the asset base path in a Stencil project.

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Using a Custom Form-Associated Component in HTML
DESCRIPTION: This HTML snippet shows how to use a custom form-associated component within a form element.

LANGUAGE: html
CODE:
<form>
  <custom-text-input name="my-custom-input"></custom-text-input>
</form>

----------------------------------------

TITLE: Using renderToString Function in JavaScript
DESCRIPTION: Example demonstrating the usage of renderToString for HTML hydration with configuration options, taken from Ionic Core

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(srcHtml, {
  prettyHtml: true,
  removeScripts: true
});

console.log(results.html);

----------------------------------------

TITLE: Applying Styles to a Stencil Component
DESCRIPTION: This snippet shows different ways to apply styles to a Stencil component using styleUrl, styleUrls, and inline styles options. It demonstrates using external stylesheets and inline CSS.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrl: './todo-list.css',
  styleUrls: ['./todo-list-1.css', './todo-list-2.css'],
  styles: 'div { background-color: #fff }'
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Testing Component Class Logic in Stencil
DESCRIPTION: Illustrates how to test component class logic by directly instantiating the component class and calling its methods. This approach is suitable for testing simple logic without rendering the component.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Testing Component Rendering with newSpecPage() in Stencil
DESCRIPTION: This snippet demonstrates how to use newSpecPage() to test a Stencil component's rendering. It creates a test page, renders a component, and checks if the rendered HTML matches the expected output.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Defining a Public Method with @Method() Decorator in Stencil
DESCRIPTION: This snippet demonstrates how to use the @Method() decorator to define a public method on a Stencil component. The method is async and can be called directly from the element.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Handling User Input in Stencil Components
DESCRIPTION: Shows how to handle user input events like button clicks and input changes using arrow functions.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Valid and Invalid @Method Implementations in Stencil
DESCRIPTION: Provides examples of valid and invalid implementations of public methods using the @Method decorator. Valid methods must be async or return a Promise, while non-public methods don't have this requirement.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Mocking Node Module Example in TypeScript
DESCRIPTION: Shows how to create a basic mock for an npm package (md5) by implementing a mock function that returns a static value.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Testing Stencil Component Rendering with newSpecPage
DESCRIPTION: Demonstrates basic component testing using newSpecPage() to validate rendered HTML output. Shows how to test a simple component that renders 'Success!' text.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Complex Types with @State in Stencil Component
DESCRIPTION: Illustrates using @State with a complex type (array of objects) to manage a dynamic list of items in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Managing Complex State with @State() in Stencil
DESCRIPTION: Illustrates how to use @State() with complex types and properly update the state to trigger rerenders.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Listening to Window Events in Stencil
DESCRIPTION: Demonstrates how to listen to global window events using the @Listen decorator with the 'target' option set to 'window'. The example shows listening to the 'scroll' event.

LANGUAGE: tsx
CODE:
  @Listen('scroll', { target: 'window' })
  handleScroll(ev) {
    console.log('the body was scrolled', ev);
  }

----------------------------------------

TITLE: Using Build Constants in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Build Constants in a Stencil component to detect development mode and browser environment. It imports the Build object from @stencil/core and uses isDev and isBrowser properties in the componentDidLoad lifecycle method.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Configuring Webapp Output Target in Stencil
DESCRIPTION: This snippet demonstrates how to configure the 'www' output target in a Stencil project's configuration. It sets the output target type to 'www'.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Custom Service Worker with Update Handling (JavaScript)
DESCRIPTION: Custom Service Worker implementation that listens for skipWaiting messages to handle updates.

LANGUAGE: javascript
CODE:
importScripts("workbox-v4.3.1/workbox-sw.js");

self.addEventListener("message", ({ data }) => {
  if (data === "skipWaiting") {
    self.skipWaiting();
  }
});

self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Writing a Vitest Test for a Stencil Component
DESCRIPTION: Example of a Vitest test case for a Stencil component, demonstrating how to create, render, and assert on the component's output.

LANGUAGE: typescript
CODE:
import { expect, test } from 'vitest'

import '../src/components/my-component/my-component.js'

test('should render component correctly', async () => {
    const cmp = document.createElement('my-component')
    cmp.setAttribute('first', 'Stencil')
    cmp.setAttribute('last', `'Don't call me a framework' JS`)
    document.body.appendChild(cmp)

    await new Promise((resolve) => requestIdleCallback(resolve))
    expect(cmp.shadowRoot?.querySelector('div')?.innerText)
        .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)
})

----------------------------------------

TITLE: Prop Validation in Stencil
DESCRIPTION: This snippet demonstrates how to use the @Watch decorator to perform validation on props in Stencil components.

LANGUAGE: tsx
CODE:
import { Component, Prop, Watch, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class TodoList {
  @Prop() thingToDo!: string;

  @Watch('thingToDo')
  validateName(newValue: string, _oldValue: string) {
    const isBlank = typeof newValue !== 'string' || newValue === '';
    if (isBlank) { 
        throw new Error('thingToDo is a required property and cannot be empty') 
    };
    const has2chars = typeof newValue === 'string' && newValue.length >= 2;
    if (!has2chars) {
       throw new Error('thingToDo must have a length of more than 1 character')
    };
  }
}

----------------------------------------

TITLE: Host Component Basic Usage in Stencil
DESCRIPTION: Demonstrates how to use the Host component to set attributes and event listeners on the host element. Shows conditional rendering based on a prop value.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Configuring NPM Test Script
DESCRIPTION: Package.json configuration to run both Stencil and Playwright tests

LANGUAGE: json
CODE:
{
  "scripts": {
    "test.e2e": "stencil test --e2e && playwright test"
  }
}

----------------------------------------

TITLE: Watch Decorator Implementation in Stencil Component
DESCRIPTION: Demonstrates using @Watch decorator to monitor changes in @Prop and @State decorated class members. Shows how to watch multiple properties and handle value changes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Type-Safe Functional Component in Stencil
DESCRIPTION: Shows how to create a type-safe functional component using Stencil's FunctionalComponent generic type.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Using Fragment in Stencil Component
DESCRIPTION: Demonstrates the use of Fragment to group elements without a wrapper node in a Stencil component's render function.

LANGUAGE: typescript
CODE:
import { Component, Fragment, h } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Conditional Rendering in Stencil JSX
DESCRIPTION: Illustrates conditional rendering techniques in JSX, including if/else statements and the ternary operator for inline conditionals.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
    {this.name
      ? <p>Hello {this.name}</p>
      : <p>Hello World</p>
    }
    </div>
  );
}

----------------------------------------

TITLE: Updating Arrays in Stencil Components
DESCRIPTION: Illustrates the correct way to update arrays in Stencil components to trigger re-renders and @Watch handlers. It uses the spread operator to create a new array reference, which is necessary for Stencil to detect changes.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Implementing SSR with Koa Server
DESCRIPTION: This snippet demonstrates how to use the hydrateComponents function within a Koa server to implement server-side rendering.

LANGUAGE: typescript
CODE:
import Koa from 'koa';

const app = new Koa();
app.use(async (ctx) => {
  const res = await hydrateComponents(`<!DOCTYPE html>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />
    <title>Document</title>
    <link rel=\"preconnect\" href=\"https://some-url.com\" />
    <style>
      // custom styles here
    </style>
  </head>
  <body>
    <app-root></app-root>
  </body>
</html>`)
  ctx.body = res
})

----------------------------------------

TITLE: Updating Objects in Stencil Component
DESCRIPTION: Shows how to update objects in a Stencil component using the spread operator to create a new object reference, triggering component updates and @Watch methods.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Configuring Test Scripts in package.json for Stencil
DESCRIPTION: Example npm scripts for running different types of Stencil tests, including unit tests, watched unit tests, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: This snippet shows how to add custom Rollup plugins to a Stencil project. It demonstrates the use of the rollupPlugins configuration option to inject plugins before node-resolve and after commonjs transform. This allows for fine-grained control over the Rollup build process.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Basic State Usage in Stencil Component
DESCRIPTION: Demonstrates basic usage of @State decorator to track current time in a component. Shows component structure and state initialization.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Defining a Public Method with @Method() Decorator in Stencil
DESCRIPTION: This snippet demonstrates how to use the @Method() decorator to define a public method in a Stencil component. The method 'showPrompt' is exposed on the public API and can be called directly from the element.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Accessing Compiler Dependencies
DESCRIPTION: Displays the property for accessing compiler dependencies, which provides information about the versions of dependencies used by the compiler.

LANGUAGE: typescript
CODE:
dependencies: CompilerDependency[]

----------------------------------------

TITLE: Querying Elements in Shadow DOM
DESCRIPTION: Illustrates how to query elements within the Shadow DOM of a Stencil component using the @Element decorator and shadowRoot property.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Creating a Stencil Compiler Instance
DESCRIPTION: Shows the function signature for createCompiler(), which creates a Compiler instance based on the provided configuration.

LANGUAGE: typescript
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Implementing Build Constants in Stencil Component
DESCRIPTION: Demonstrates how to use Build.isDev and Build.isBrowser constants to execute different code paths during development/production and browser/server rendering. The code shows implementation within a Stencil component's componentDidLoad lifecycle method.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Basic DOM Connection Example in Stencil
DESCRIPTION: Demonstrates the basic flow of connectedCallback and componentWillLoad lifecycle methods when an element is attached and detached from the DOM.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Basic E2E Test Setup in Stencil
DESCRIPTION: Demonstrates the basic structure of an E2E test in Stencil, including importing the necessary functions, setting up a test suite, and writing a simple test case.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Updating Objects in Stencil Components
DESCRIPTION: Demonstrates how to update objects in Stencil components using the spread operator to create a new object reference, triggering @Watch and component updates.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Creating Vue Plugin for Custom Elements
DESCRIPTION: Plugin implementation to register web components for lazy loading in Vue

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Basic E2E Test Setup in TypeScript
DESCRIPTION: Demonstrates the basic structure of an E2E test using Stencil's testing utilities to render and verify a component.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Setting Global Styles in Stencil Config
DESCRIPTION: Shows how to configure global styles in the Stencil config file, making styles available to all components in the project.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'app',
  globalStyle: 'src/global/global.css',
  outputTarget: [
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Invalid Component Module Structure in Stencil
DESCRIPTION: An example of an invalid component module structure in Stencil, where additional exports are present alongside the component class.

LANGUAGE: tsx
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Using Fragment Component in Stencil
DESCRIPTION: Demonstrates how to use Fragment component to group elements without a wrapper node in a Stencil component render method.

LANGUAGE: typescript
CODE:
import { Component, Fragment } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Using Build Constants in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Stencil's Build Constants within a component to execute different code in development and production environments, as well as distinguish between browser and server rendering.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Using CSS Custom Properties in Stencil
DESCRIPTION: This CSS snippet shows how to define and use CSS custom properties (CSS variables) in a Stencil component.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Resolving Asset Paths with getAssetPath in Stencil
DESCRIPTION: Demonstrates how to use the getAssetPath API to resolve asset paths relative to the asset base path in a Stencil project.

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Calling a Public Method on a Stencil Component
DESCRIPTION: This snippet shows how to call a public method on a Stencil component. It ensures the component is defined using customElements.whenDefined() before calling the method.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Watching and Parsing Object Props in Stencil Component
DESCRIPTION: This TypeScript code demonstrates how to watch for changes in object props and parse them in a Stencil component using @Watch decorator and componentWillLoad lifecycle method.

LANGUAGE: typescript
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

----------------------------------------

TITLE: Using Private Methods in Stencil Components
DESCRIPTION: This snippet demonstrates how to use private methods in Stencil components. Private methods do not need to be decorated with @Method() and are not required to return a Promise.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Displaying Stencil Component File Structure
DESCRIPTION: Shows the recommended file structure for Stencil components, including separate files for different style modes and test directories.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Configuring Playwright Tests for Stencil
DESCRIPTION: Example showing how to create and customize a Playwright test configuration for Stencil projects. Demonstrates overriding default config values using createConfig function.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

expect.extend(matchers);

export default createConfig({
  // Change which test files Playwright will execute
  testMatch: '*.spec.ts',

  webServer: {
    // Only wait max 30 seconds for server to start
    timeout: 30000,
  },
});

----------------------------------------

TITLE: Event Listening with @Listen Decorator
DESCRIPTION: Demonstrates how to listen to DOM events using the @Listen decorator in a Stencil component.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Configuring JSON Docs Output Target
DESCRIPTION: Configuration setup for automatically generating JSON documentation during build

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Defining a Public Method with @Method() Decorator in Stencil
DESCRIPTION: This snippet demonstrates how to use the @Method() decorator to expose a public method on a Stencil component. The method is async and can be called directly from the element.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Resolving Asset Paths in Stencil
DESCRIPTION: Demonstrates how to use the getAssetPath() API to resolve asset paths relative to the asset base path.

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Calling Stencil Component Methods
DESCRIPTION: Shows how to properly call a public method on a Stencil component from external code, including waiting for the component to be defined in the custom elements registry.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Using Functional Components with Child Elements
DESCRIPTION: Example of passing child elements to a functional component.

LANGUAGE: tsx
CODE:
<Hello name="World">
  <p>I'm a child element.</p>
</Hello>

----------------------------------------

TITLE: Configuring Stencil React Output Target
DESCRIPTION: Configuration for the Stencil output target to generate React component wrappers

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    reactOutputTarget({
      outDir: '../react-library/lib/components/stencil-generated/',
    }),
    { type: 'dist-custom-elements' },
  ],
};

----------------------------------------

TITLE: Configuring Custom Event Options in Stencil
DESCRIPTION: Shows how to use the EventOptions interface to configure custom event behavior, including setting the event name, bubbling, cancelable, and composed properties.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Configuring Event Listeners in Stencil Components (TypeScript)
DESCRIPTION: Shows how to use ListenOptions to configure event listeners, including targeting specific DOM elements, using passive listeners, and capturing events.

LANGUAGE: tsx
CODE:
  @Listen('scroll', { target: 'window' })
  handleScroll(ev) {
    console.log('the body was scrolled', ev);
  }

LANGUAGE: tsx
CODE:
  @Listen('click', { capture: true })
  handleClick(ev) {
    console.log('click');
  }

----------------------------------------

TITLE: Implementing Style Modes in Stencil Component
DESCRIPTION: Shows how to use style modes in a Stencil component to support multiple styling configurations, such as Material Design and iOS.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'simple-button',
  styleUrls: {
    md: './simple-button.md.css', // styles for Material Design
    ios: './simple-button.ios.css' // styles for iOS
  },
})
export class SimpleButton {
  // ...
}

----------------------------------------

TITLE: Configuring HTTPS Dev Server in Stencil
DESCRIPTION: Example configuration for setting up HTTPS in Stencil's dev server by providing SSL certificate and key files. Also demonstrates how to customize the port and reload strategy.

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8'),
    },
  },
};

----------------------------------------

TITLE: Object Updates with Watch in Stencil
DESCRIPTION: Demonstrates proper object mutation techniques in Stencil components using the spread operator to ensure @Watch triggers and component updates occur correctly.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Using getAssetPath in Stencil Components
DESCRIPTION: Shows how to use getAssetPath utility to resolve paths to local assets within a component.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Implementing a Custom Text Input as a Form-Associated Component
DESCRIPTION: This example shows a complete implementation of a custom text input as a form-associated component. It uses the @AttachInternals decorator to interact with the form, and demonstrates setting form values and handling user input.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Configuring Angular Output Target
DESCRIPTION: TypeScript code to configure the Angular output target in the Stencil config file.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: State with Event Listeners
DESCRIPTION: Example demonstrating @State() usage with @Listen() decorator to create a toggle button that responds to click events.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Initializing Shadow DOM Component in Stencil
DESCRIPTION: Example of creating a Stencil component with Shadow DOM enabled using the shadow option in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Using assetsDirs in Stencil Component
DESCRIPTION: This example shows how to use the assetsDirs option to specify a directory for static assets. It demonstrates loading an image using getAssetPath() within the component.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // 1. assetsDirs lists the 'assets' directory as a relative (sibling)
  // directory
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    // 2. the asset path is retrieved relative to the asset base path to use in
    // the <img> tag
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Implementing Advanced Forms with Multiple Inputs in Stencil
DESCRIPTION: This snippet showcases an advanced form implementation in Stencil, featuring multiple input types (text, email, select), state management for different inputs, and basic form validation using the browser's constraint validation API.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Prop Validation in Stencil
DESCRIPTION: Demonstrates how to use the @Watch decorator to perform validation on prop values in Stencil components.

LANGUAGE: tsx
CODE:
import { Component, Prop, Watch, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class TodoList {
  @Prop() thingToDo!: string;

  @Watch('thingToDo')
  validateName(newValue: string, _oldValue: string) {
    const isBlank = typeof newValue !== 'string' || newValue === '';
    if (isBlank) { 
        throw new Error('thingToDo is a required property and cannot be empty') 
    };
    const has2chars = typeof newValue === 'string' && newValue.length >= 2;
    if (!has2chars) {
       throw new Error('thingToDo must have a length of more than 1 character')
    };
  }
}

----------------------------------------

TITLE: Setting Props on a Component in E2E Tests
DESCRIPTION: Demonstrates how to set props on a component during an E2E test using page.$eval and waitForChanges.

LANGUAGE: typescript
CODE:
await page.setContent(`
      <prop-cmp></prop-cmp>
    `);

await page.$eval('prop-cmp', (elm: any) => {
  elm.first = 'Marty';
  elm.lastName = 'McFly';
});

await page.waitForChanges();

----------------------------------------

TITLE: Emitting Events with Event Decorator in Stencil
DESCRIPTION: Example of using @Event decorator to emit custom DOM events from a Stencil component. Shows basic implementation of an EventEmitter for a todo completion event.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Form-Associated Component with Lifecycle Callbacks
DESCRIPTION: Examples of implementing various form-associated lifecycle callbacks including formAssociatedCallback, formDisabledCallback, formResetCallback, and formStateRestoreCallback.

LANGUAGE: tsx
CODE:
import { Component, h, State, AttachInternals } from '@stencil/core';

@Component({
  tag: 'fa-date-picker',
  formAssociated: true,
})
export class MyDatePicker {
  @State() value: string = "";
  @State() view: "weeks" | "months" = "weeks";

  @AttachInternals()
  internals: ElementInternals;

  onInputChange(e) {
    e.preventDefault();
    const date = e.target.value;
    this.setValue(date);
  }

  setValue(date: string) {
    this.internals.setFormValue(date, `${date}#${this.view}`);
  }

  formStateRestoreCallback(state, _mode) {
    const [date, view] = state.split("#");
    this.view = view;
    this.setValue(date);
  }

  render() {
    return <div>
      Mock Date Picker, mode: {this.view}
      <input class="date-picker" onChange={e => this.onInputChange(e)}></input>
    </div>
  }
}

----------------------------------------

TITLE: Creating Node System in Stencil
DESCRIPTION: Creates a system instance for compiler operations using NodeJS APIs. Handles file system operations and content hashing using NodeJS crypto module.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Valid and Invalid Public Method Implementations in Stencil
DESCRIPTION: This snippet illustrates valid and invalid implementations of public methods using the @Method decorator. Public methods must be async or return a Promise.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Comprehensive E2E Test for Toggle Component
DESCRIPTION: Shows a more complex E2E test scenario, testing a toggle component's initial state, class changes, and event emission when interacted with.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Accessing Typed Stencil Components in TypeScript
DESCRIPTION: Demonstrates how to use the automatically generated TypeScript interfaces for Stencil components. It shows how to access a button component with strong typing, ensuring type safety for properties.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Querying Elements in Shadow DOM
DESCRIPTION: Illustrates how to query elements within a component's Shadow DOM using the @Element decorator and shadowRoot property.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Using Stencil Store in a Stencil Component
DESCRIPTION: Demonstration of how to use the store within a Stencil component, including updating state and rendering store values.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Using CSS Parts in Stencil Components
DESCRIPTION: Shows how to use CSS parts to allow more flexible styling of components from the light DOM.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Documenting Slots and Shadow Parts Using JSDoc
DESCRIPTION: This snippet shows how to document slots and shadow parts using custom JSDoc tags (@slot and @part). This information will be included in the generated README.

LANGUAGE: typescript
CODE:
/**
 * @slot - Content is placed between the named slots if provided without a slot.
 * @slot primary - Content is placed to the left of the main slotted-in text.
 * @slot secondary - Content is placed to the right of the main slotted-in text.
 * @part label - The label text describing the component.
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent {
  render() {
    return (
      <section>
        <slot name="primary"></slot>
        <div class="content">
          <slot></slot>
        </div>
        <slot name="secondary"></slot>
        <div part="label">
          <slot></slot>
        </div>
      </section>
    );
  }
}

----------------------------------------

TITLE: Configuring Stencil Testing in Config File
DESCRIPTION: Example of how to configure Stencil testing options in the project's config file. This snippet shows how to set Jest configuration options using the 'testing' property in the Stencil config.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  testing: {
    testPathIgnorePatterns: [...]
  }
};

----------------------------------------

TITLE: Conditional Rendering in JSX
DESCRIPTION: Demonstrates conditional rendering using if/else statements and the ternary operator in JSX.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
    {this.name
      ? <p>Hello {this.name}</p>
      : <p>Hello World</p>
    }
    </div>
  );
}

----------------------------------------

TITLE: Complex Types with @State() in Stencil
DESCRIPTION: Illustrates the use of @State() with complex types, demonstrating proper state updates to trigger rerenders.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Creating a Custom Clock Component in Stencil
DESCRIPTION: This example shows a complete Stencil component that implements a clock. It uses connectedCallback to start a timer and disconnectedCallback to clean it up.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Visual Testing Component Example
DESCRIPTION: Example test case demonstrating how to implement visual testing for a Stencil component using the toMatchElementSnapshot matcher.

LANGUAGE: typescript
CODE:
https://github.com/webdriverio/component-testing-examples/blob/2de295ab568b5163e67d716156221578b6536d9d/stencil-component-starter/src/components/my-component/my-component.test.tsx#L20-L28

----------------------------------------

TITLE: Querying Elements in Shadow DOM
DESCRIPTION: Demonstrates how to query elements within the Shadow DOM of a Stencil component using the @Element decorator and shadowRoot property.

LANGUAGE: typescript
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Configuring Package.json for Stencil Component Library
DESCRIPTION: Example package.json configuration for publishing a Stencil component library. Includes entry points for different module formats (CommonJS, ES modules), type definitions, and CDN distribution.

LANGUAGE: json
CODE:
{
  "main": "dist/index.cjs.js",
  "module": "dist/index.js",
  "es2015": "dist/esm/index.mjs",
  "es2017": "dist/esm/index.mjs",
  "types": "dist/types/components.d.ts",
  "unpkg": "dist/my-project-name/my-project-name.esm.js",
  "collection:main": "dist/collection/index.js",
  "collection": "dist/collection/collection-manifest.json",
  "files": [
    "dist/",
    "css/",
    "loader/"
  ]
}

----------------------------------------

TITLE: Using Worker Functions in a Stencil Component
DESCRIPTION: Demonstrates how to import and use worker functions within a Stencil component.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Defining Props with Different Types
DESCRIPTION: Example of defining props with different types in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() isComplete: boolean;
    @Prop() timesCompletedInPast: number;
    @Prop() thingToDo: string;
    @Prop() myHttpService: MyHttpService;
}

----------------------------------------

TITLE: Basic E2E Test Setup in Stencil
DESCRIPTION: Demonstrates the basic structure of an E2E test in Stencil, including importing the newE2EPage function, setting up a test case, and asserting the presence of a component.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Installing Stencil Store with NPM
DESCRIPTION: Command to install @stencil/store as a development dependency in your project.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Event Handling in JSX
DESCRIPTION: Example of how to bind event listeners directly in JSX within Stencil components.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

----------------------------------------

TITLE: Functional Component with Children
DESCRIPTION: Implementation of a functional component that accepts both props and children elements.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Testing a Stencil Component with JSX Template in newSpecPage
DESCRIPTION: Shows how to use the template option in newSpecPage() to test a Stencil component with JSX syntax. This approach allows passing props directly to the component.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Transpiling Code with Stencil Core Compiler
DESCRIPTION: Shows the function signature for transpile(), which takes source code as a string and optional TranspileOptions, returning a Promise of TranspileResults.

LANGUAGE: typescript
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Defining a Basic Functional Component in Stencil
DESCRIPTION: Demonstrates how to create a simple functional component that accepts props and returns JSX.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Complex State Management with Custom Types
DESCRIPTION: Shows how to manage complex state using custom types and arrays, demonstrating proper state updates and rendering of dynamic lists.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;
    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Testing Component Class Logic in Stencil
DESCRIPTION: This snippet demonstrates how to test the logic of a Stencil component class directly by instantiating it and calling its methods. It checks the state of a property before and after calling a method.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Basic Functional Component in Stencil
DESCRIPTION: Demonstrates the simplest form of a functional component that accepts props and returns JSX.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: State Management with Lifecycle Methods
DESCRIPTION: Shows how to combine @State() with component lifecycle methods to update state periodically and clean up resources.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;
    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Shadow DOM CSS Styling
DESCRIPTION: Demonstration of CSS styling within Shadow DOM context using the :host selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Loading Stencil Component via ES Module Import
DESCRIPTION: This snippet shows how to include Stencil components using an ES Module import statement in an HTML file.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Basic E2E Test Structure in Stencil
DESCRIPTION: Demonstrates the basic structure of an end-to-end test in Stencil using Jest and Puppeteer. It shows how to create a new E2E page, set content, and perform basic assertions.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Direct Component Class Testing in TypeScript
DESCRIPTION: Shows how to test component class logic directly by instantiating the component class and testing its methods and properties.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Event Listening with @Listen Decorator
DESCRIPTION: Demonstrates how to listen to DOM events using the @Listen decorator in a Stencil component.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Valid and Invalid Public Method Definitions in Stencil
DESCRIPTION: This snippet demonstrates valid and invalid ways to define public methods using the @Method() decorator in Stencil. Public methods must be async or return a Promise.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Implementing a Custom Text Input as a Form-Associated Component
DESCRIPTION: This example shows a complete implementation of a custom text input as a form-associated component. It uses the @AttachInternals decorator to interact with the form, and demonstrates setting form values and handling user input.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: This snippet shows how to add custom Rollup plugins to a Stencil project. It demonstrates the use of the rollupPlugins config option to inject plugins before node-resolve and after commonjs transform.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: This snippet shows how to configure the 'dist' output target in a Stencil project's configuration file. It specifies the output target type as 'dist'.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Using Rollup Plugin for Asset Copying in Stencil Config
DESCRIPTION: Shows how to use the rollup-plugin-copy NPM module in the Stencil configuration to copy assets to the distribution directory during build.

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Handling Arrays Reactively in Stencil Components
DESCRIPTION: Illustrates how to update arrays in a reactive manner using non-mutable array operations. It demonstrates the use of the spread operator to create a new array reference, triggering @Watch and component re-render.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Using Store in Stencil Component
DESCRIPTION: This example shows how to use the created store within a Stencil component. It demonstrates updating the store state, accessing store values, and creating a child component that interacts with the store.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Component Composition Example
DESCRIPTION: Demonstrates how to compose Stencil components by nesting them within each other, showing parent-child component relationship.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Structuring Stencil Component Files
DESCRIPTION: Demonstrates the recommended file structure for Stencil components, showing how to organize files for a component and its related styles and tests.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Using Functional Components with Props in Stencil
DESCRIPTION: Demonstrates how to use a functional component by passing props through attributes.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Custom Clock Component Implementation in TSX
DESCRIPTION: Complete example showing a clock component that implements multiple lifecycle methods to manage a timer.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Using Host as a Fragment in Stencil Components
DESCRIPTION: This example shows how to use the Host component as a fragment to render multiple elements at the root level of a Stencil component. It demonstrates rendering a title and a paragraph within the host element.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Emitting Events with Event Decorator in Stencil
DESCRIPTION: Example of using @Event decorator to emit custom DOM events from a Stencil component. Shows basic implementation of an EventEmitter for a todo completion event.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Basic Method Decorator Usage in Stencil
DESCRIPTION: Demonstrates how to use the @Method() decorator to expose a public method in a Stencil component. The example shows a TodoList component with a showPrompt method.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Using Stencil Components in Angular Template
DESCRIPTION: Use the Stencil components directly in Angular templates with Angular's template binding syntax.

LANGUAGE: HTML
CODE:
<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Configuring Stencil Documentation Generation in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the colors used in dependency graph mermaid diagrams for components in Stencil's documentation generation. It uses the 'docs.markdown.targetComponent' option to set custom text and background colors.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  docs: {
    markdown: {
      targetComponent: {
        textColor: '#fff',
        background: '#000',
      },
    },
  },
};

----------------------------------------

TITLE: Typed Functional Component
DESCRIPTION: Shows how to use the FunctionalComponent generic type with TypeScript interface for props.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Configuring Event Options in Stencil
DESCRIPTION: Shows how to configure event behavior using EventOptions interface, including custom event names, bubbling, cancelable, and composition settings.

LANGUAGE: tsx
CODE:
export interface EventOptions {
  /**
   * A string custom event name to override the default.
   */
  eventName?: string;
  /**
   * A Boolean indicating whether the event bubbles up through the DOM or not.
   */
  bubbles?: boolean;

  /**
   * A Boolean indicating whether the event is cancelable.
   */
  cancelable?: boolean;

  /**
   * A Boolean value indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.
   */
  composed?: boolean;
}

----------------------------------------

TITLE: Configuring VS Code Browser Debugger for Stencil
DESCRIPTION: Launch configuration for debugging Stencil components in Chrome browser. Sets up sourcemap handling and localhost connection for the Stencil dev server.

LANGUAGE: json
CODE:
{
  "type": "chrome",
  "request": "launch",
  "name": "Launch Chrome against localhost",
  "url": "http://localhost:3333",
  "sourceMaps": true,
  "sourceMapPathOverrides": {
    "*": "${webRoot}/*"
  }
}

----------------------------------------

TITLE: Configuring Stencil WWW Output Target in TSX
DESCRIPTION: Basic configuration example for setting up the 'www' output target in a Stencil project's configuration file. This is the default output target for web applications and websites that can benefit from prerendering and service workers.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Component Lifecycle
DESCRIPTION: This TypeScript code shows how to fetch dynamic data in a Stencil component's lifecycle method. It uses async/await to handle the Promise returned by the fetch operation.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Complex E2E Test Example with Toggle Component
DESCRIPTION: Shows a more complex E2E test example that includes component property manipulation, event spying, and class validation.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Setting Up Angular Module with Custom Elements
DESCRIPTION: Angular module configuration that handles the registration of custom elements during app initialization.

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Configuring HTTPS for Stencil Dev Server in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the Stencil dev server to use HTTPS by providing SSL certificate and key files. It also shows how to set a custom port and reload strategy.

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8'),
    },
  },
};

----------------------------------------

TITLE: Styling Host Element with Shadow DOM in CSS
DESCRIPTION: This snippet shows how to style the host element using CSS when shadow DOM is enabled.

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Rendering and Testing a Component with newSpecPage() in Stencil
DESCRIPTION: This snippet demonstrates how to use newSpecPage() to render a component and test its output using Jest. It creates a test page, renders the MyCmp component, and checks if the rendered HTML matches the expected output.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Configuring package.json for Stencil Component Library Distribution
DESCRIPTION: Example package.json configuration for a Stencil component library, including entry points for various module formats, types, and file paths for npm distribution.

LANGUAGE: json
CODE:
{
  "main": "dist/index.cjs.js",
  "module": "dist/index.js",
  "es2015": "dist/esm/index.mjs",
  "es2017": "dist/esm/index.mjs",
  "types": "dist/types/components.d.ts",
  "unpkg": "dist/my-project-name/my-project-name.esm.js",
  "collection:main": "dist/collection/index.js",
  "collection": "dist/collection/collection-manifest.json",
  "files": [
    "dist/",
    "css/",
    "loader/"
  ]
}

----------------------------------------

TITLE: Prop Options in Stencil
DESCRIPTION: Explains the various options available for the @Prop() decorator in Stencil, including 'attribute', 'mutable', and 'reflect'. Shows how to use these options to modify prop behavior.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
   tag: 'todo-list-item',
})
export class ToDoListItem {
   @Prop({ attribute: 'complete' }) isComplete: boolean;
   @Prop({ attribute: 'thing' }) thingToDo: string;
   @Prop({ attribute: 'my-service' }) httpService: MyHttpService;
}

----------------------------------------

TITLE: Loading Stencil Components via CDN in HTML
DESCRIPTION: This snippet demonstrates how to include a Stencil component in a simple HTML page using a CDN-hosted script. It shows the basic structure needed to use the component.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Configuring docs-custom Output Target in Stencil
DESCRIPTION: This snippet demonstrates how to add the 'docs-custom' output target to your Stencil configuration. It allows you to define a custom generator function that receives the generated docs JSON data as an argument.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Handling Service Worker Updates in Stencil
DESCRIPTION: Example of handling Service Worker updates in a Stencil component. This snippet shows how to listen for updates and prompt the user to reload.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    // If there is no waiting registration, this is the first service
    // worker being installed.
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Rendering Host Element Attributes with Host Component in Stencil
DESCRIPTION: Demonstrates how to use the Host functional component to set attributes and event listeners on the host element of a Stencil component. It shows conditional rendering of attributes based on component properties.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Functional Component with Children
DESCRIPTION: Demonstrates how to create a functional component that accepts both props and children elements.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Configuring NPM Scripts for Stencil Testing
DESCRIPTION: Example NPM scripts configuration in package.json for running different types of Stencil tests including unit tests, watch mode, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Configuring Default Service Worker in Stencil
DESCRIPTION: Example of the default Stencil configuration for generating a Service Worker using Workbox's generateSW mode. This config pre-caches all of the app's assets.

LANGUAGE: typescript
CODE:
{
  globPatterns: [
    '**/*.{js,css,json,html}'
  ]
};

----------------------------------------

TITLE: Configuring NPM Scripts for Stencil Testing
DESCRIPTION: Example NPM scripts configuration in package.json for running different types of Stencil tests including unit tests, watch mode, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Stencil Config with React Output Target
DESCRIPTION: Configuration for stencil.config.ts to enable React component wrapper generation using the reactOutputTarget.

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    reactOutputTarget({
      outDir: '../react-library/lib/components/stencil-generated/',
    }),
    { type: 'dist-custom-elements' },
  ],
};

----------------------------------------

TITLE: Typed Functional Component with FunctionalComponent Generic in Stencil
DESCRIPTION: Shows how to use the FunctionalComponent generic type to specify an interface for the component's properties.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Typed Functional Component in Stencil
DESCRIPTION: Shows how to create a typed functional component using Stencil's FunctionalComponent generic type.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the CopyTask configuration used in Stencil's output targets. It specifies the structure and options available for configuring file copy operations during the build process.

LANGUAGE: typescript
CODE:
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Using a Functional Component with Children in Stencil JSX
DESCRIPTION: Demonstrates how to use a functional component that accepts children in JSX.

LANGUAGE: tsx
CODE:
<Hello name="World">
  <p>I'm a child element.</p>
</Hello>

----------------------------------------

TITLE: Component with CSS Parts Implementation
DESCRIPTION: Demonstrates implementing CSS parts for enhanced component styling flexibility.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Initializing Shadow DOM Component in Stencil
DESCRIPTION: Basic setup of a Stencil component using Shadow DOM for style encapsulation by setting the shadow option to true in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Prop Types in Stencil
DESCRIPTION: Covers the various types that can be used for props in Stencil components.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() isComplete: boolean;
    @Prop() timesCompletedInPast: number;
    @Prop() thingToDo: string;
    @Prop() myHttpService: MyHttpService;
}

----------------------------------------

TITLE: Using a Functional Component with Props in Stencil JSX
DESCRIPTION: Shows how to use a functional component by passing props as attributes in JSX.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Component Testing with JSX Template
DESCRIPTION: Demonstrates testing a Stencil component using JSX template initialization with props.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Loading Stencil Components via CDN Script Tag
DESCRIPTION: Demonstrates how to load a Stencil component using a CDN script tag in a simple HTML page. This method is straightforward and works well for basic integration scenarios.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: This snippet shows how to configure the 'dist' output target in a Stencil project's configuration file. It generates a reusable, self-lazy loading component library.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Comprehensive E2E Test for Toggle Component
DESCRIPTION: Shows a more complex E2E test for a toggle component. It demonstrates setting content, spying on events, finding elements, checking classes, setting properties, and asserting on event details.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Testing Component Class Logic in TypeScript
DESCRIPTION: Demonstrates how to test the logic of a Stencil component by directly instantiating the component class. It creates an instance of MyToggle component and tests its method and property.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Configuring Custom Event Options in Stencil
DESCRIPTION: Shows how to use the EventOptions interface to configure custom event behavior, including setting the event name, bubbling, cancelable, and composed properties.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Configuring WWW Output Target in Stencil
DESCRIPTION: Basic configuration example for setting up the www output target in a Stencil project. This is the default output target type for webapps and websites that can benefit from prerendering and service workers.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Component Lifecycle
DESCRIPTION: Shows how to use async/await in the componentWillLoad lifecycle method to fetch data from an API before rendering a component.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Implementing formAssociatedCallback in Stencil
DESCRIPTION: This example demonstrates the use of the formAssociatedCallback lifecycle method to set an aria label when the component is associated with a form.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true,
})
export class FormAssociatedCmp {
  @AttachInternals()
  internals: ElementInternals;

  formAssociatedCallback(form) {
    form.ariaLabel = 'formAssociated called';
  }

  render() {
    return <input type="text" />;
  }
}

----------------------------------------

TITLE: Valid and Invalid Public Method Definitions in Stencil
DESCRIPTION: This snippet illustrates valid and invalid ways to define public methods using the @Method() decorator in Stencil. Public methods must be async or return a Promise.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Exporting Generated React Components
DESCRIPTION: Modify the React component library's entry file to export the generated Stencil component wrappers and the defineCustomElements function.

LANGUAGE: typescript
CODE:
export * from "./components/stencil-generated";
export { defineCustomElements } from "stencil-library/loader";

----------------------------------------

TITLE: Accessing Typed Stencil Component in TypeScript
DESCRIPTION: Demonstrates how to use the automatically generated HTMLElement interface for a Stencil component. This example shows accessing an ion-button element with strong typing.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Node Polyfills Plugin Configuration in TypeScript
DESCRIPTION: This example demonstrates how to install and configure the rollup-plugin-node-polyfills plugin in a Stencil project to handle Node.js APIs in the browser.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Configuring Stencil Output Target for Angular
DESCRIPTION: Configuration code for setting up the Angular output target in the Stencil config file to generate Angular component wrappers.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Creating Playwright Config for Stencil
DESCRIPTION: TypeScript code to create a Playwright configuration file using the Stencil Playwright adapter's createConfig function.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

// Add custom Stencil matchers to Playwright assertions
expect.extend(matchers);

export default createConfig({
  // Overwrite Playwright config options here
});

----------------------------------------

TITLE: Asset Directory Configuration in Stencil Component
DESCRIPTION: Shows how to configure and use asset directories in a Stencil component for loading static files like images.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Array Updates with Stencil State Management
DESCRIPTION: Shows proper patterns for updating arrays in Stencil components using immutable operations to trigger component updates and watch handlers.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Unit Testing with Mocked Helper in TypeScript
DESCRIPTION: Example of a unit test that uses the mocked 'getRandomInt' function. It demonstrates how to apply the mock and test the 'bar' function's behavior.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Implementing formStateRestoreCallback in Stencil
DESCRIPTION: Demonstrates using the formStateRestoreCallback to restore both the value and view state of a custom date picker component.

LANGUAGE: typescript
CODE:
import { Component, h, State, AttachInternals } from '@stencil/core';

@Component({
  tag: 'fa-date-picker',
  formAssociated: true,
})
export class MyDatePicker {
  @State() value: string = "";
  @State() view: "weeks" | "months" = "weeks";

  @AttachInternals()
  internals: ElementInternals;

  onInputChange(e) {
    e.preventDefault();
    const date = e.target.value;
    this.setValue(date);
  }

  setValue(date: string) {
    // second 'state' parameter is used to store both
    // the input value (`date`) _and_ the current view
    this.internals.setFormValue(date, `${date}#${this.view}`);
  }

  formStateRestoreCallback(state, _mode) {
    const [date, view] = state.split("#");
    this.view = view;
    this.setValue(date);
  }

  render() {
    return <div>
      Mock Date Picker, mode: {this.view}
      <input class="date-picker" onChange={e => this.onInputChange(e)}></input>
    </div>
  }
}

----------------------------------------

TITLE: Defining Stencil Component TypeScript Class
DESCRIPTION: This example shows how to properly define a Stencil component TypeScript class, demonstrating the correct naming convention without prefixes.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-button'
})
export class Button { ... }

@Component({
  tag: 'ion-menu'
})
export class Menu { ... }

----------------------------------------

TITLE: Using Stencil Component with String Props
DESCRIPTION: This snippet shows how to use a Stencil component with string props that will be parsed into objects and arrays.

LANGUAGE: tsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Form-Associated Component Example
DESCRIPTION: Demonstrates how to create a form-associated Stencil component using the formAssociated configuration option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Listening for appload Event in TypeScript
DESCRIPTION: Shows how to listen for the special 'appload' event on the window object. This event is emitted when the app and all its child components have finished loading. The event detail includes the namespace of the app that emitted the event.

LANGUAGE: typescript
CODE:
window.addEventListener('appload', (event) => {
  console.log(event.detail.namespace);
});

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: Demonstrates how to use Build.isDev conditional to execute different code paths in development versus production environments. The code imports the Build utility from @stencil/core and implements it within a component's lifecycle method.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Creating Form-Associated Custom Elements in Stencil
DESCRIPTION: This example shows how to create a form-associated custom element using Stencil. It demonstrates the use of the @AttachInternals decorator and the ElementInternals interface to integrate the component with native form functionality.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css',
  formAssociated: true
})
export class MyName {
  @State() value: string;
  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.internals.setFormValue(event.target.value);
  }

  render() {
    return (
      <label>
        Name:
        <input
          type="text"
          value={this.value}
          onInput={(event) => this.handleChange(event)}
        />
      </label>
    );
  }
}

----------------------------------------

TITLE: Configuring Global Styles in Stencil
DESCRIPTION: Shows how to set up global styles in a Stencil project by configuring the globalStyle option in the stencil.config.ts file.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'app',
  globalStyle: 'src/global/global.css',
  outputTarget: [
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Testing Component Rendering with newSpecPage in TypeScript
DESCRIPTION: Demonstrates how to use newSpecPage() to test a Stencil component's rendered HTML output. It imports the component, creates a test page, and uses the toEqualHtml() matcher to verify the rendered content.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Using Test Skip Functions
DESCRIPTION: Demonstrates how to use the skip utility to conditionally skip tests for specific browsers or component modes.

LANGUAGE: typescript
CODE:
test('my-test', ({ page, skip }) => {
    // Skip tests for certain browsers
    skip.browser('firefox', 'This behavior is not available on Firefox');

    // Skip tests for certain modes
    skip.mode('md', 'This behavior is not available in Material Design');

    ...
})

----------------------------------------

TITLE: Data Binding in JSX
DESCRIPTION: Shows how to bind dynamic data in JSX using curly braces {}.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

----------------------------------------

TITLE: Component Composition Example
DESCRIPTION: Shows how to compose Stencil components by nesting them within each other using props for data passing.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Implementing formAssociatedCallback in Stencil
DESCRIPTION: This example demonstrates the use of the formAssociatedCallback lifecycle method to set an aria label when the component is associated with a form.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true,
})
export class FormAssociatedCmp {
  @AttachInternals()
  internals: ElementInternals;

  formAssociatedCallback(form) {
    form.ariaLabel = 'formAssociated called';
  }

  render() {
    return <input type="text" />;
  }
}

----------------------------------------

TITLE: Rollup Configuration for Custom Elements
DESCRIPTION: Rollup configuration example demonstrating module bundling and asset handling for custom elements.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Running Visual Regression Tests in Stencil
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison in Stencil projects.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Data Binding in JSX for Stencil
DESCRIPTION: Shows how to bind dynamic data in JSX using curly braces {}.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

----------------------------------------

TITLE: Using Stencil Store in a Stencil Component
DESCRIPTION: Demonstrates how to use the store within a Stencil component, including updating state and rendering store values.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Listening to Stencil Component Events in Non-JSX Context
DESCRIPTION: Demonstrates how to add event listeners to Stencil components in a non-JSX context using vanilla JavaScript.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Configuring HTTPS for Stencil Dev Server in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the Stencil dev server to use HTTPS by providing SSL certificate and key files. It also shows how to set a custom port and reload strategy.

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8'),
    },
  },
};

----------------------------------------

TITLE: Comprehensive E2E Test for Toggle Component
DESCRIPTION: Shows a more complex E2E test scenario for a toggle component, including setting content, spying on events, checking classes, and verifying event details.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Shadow DOM CSS Styling Example
DESCRIPTION: Demonstrates basic CSS styling within a Shadow DOM component, including usage of :host selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Typed Functional Component with Stencil's FunctionalComponent
DESCRIPTION: Shows how to use Stencil's FunctionalComponent type to create a typed functional component with defined props.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Implementing Store in Stencil Component
DESCRIPTION: Shows how to use the store within a Stencil component, including state updates and rendering reactive values.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Structuring a Stencil Component Class in TypeScript
DESCRIPTION: This comprehensive example illustrates the recommended structure for a Stencil component class, including property declarations, lifecycle methods, and render function.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {

  /**
   * 1. Own Properties
   * Always set the type if a default value has not
   * been set. If a default value is being set, then type
   * is already inferred. List the own properties in
   * alphabetical order. Note that because these properties
   * do not have the @Prop() decorator, they will not be exposed
   * publicly on the host element, but only used internally.
   */
  num: number;
  someText = 'default';

  /**
   * 2. Reference to host HTML element.
   * Inlined decorator
   */
  @Element() el: HTMLElement;

  /**
   * 3. State() variables
   * Inlined decorator, alphabetical order.
   */
  @State() isValidated: boolean;
  @State() status = 0;

  /**
   * 4. Public Property API
   * Inlined decorator, alphabetical order. These are
   * different than "own properties" in that public props
   * are exposed as properties and attributes on the host element.
   * Requires JSDocs for public API documentation.
   */
  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  /**
   * Prop lifecycle events SHOULD go just behind the Prop they listen to.
   * This makes sense since both statements are strongly connected.
   * - If renaming the instance variable name you must also update the name in @Watch()
   * - Code is easier to follow and maintain.
   */
  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  /**
   * 5. Events section
   * Inlined decorator, alphabetical order.
   * Requires JSDocs for public API documentation.
   */
  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  /**
   * 6. Component lifecycle events
   * Ordered by their natural call order, for example
   * WillLoad should go before DidLoad.
   */
  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  /**
   * 7. Listeners
   * It is ok to place them in a different location
   * if makes more sense in the context. Recommend
   * starting a listener method with "on".
   * Always use two lines.
   */
  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  /**
   * 8. Public methods API
   * These methods are exposed on the host element.
   * Always use two lines.
   * Public Methods must be async.
   * Requires JSDocs for public API documentation.
   */
  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  /**
   * 9. Local methods
   * Internal business logic. These methods cannot be
   * called from the host element.
   */
  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  /**
   * 10. render() function
   * Always the last public method in the class.
   * If private methods present, they are below public methods.
   */
  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Using Style Modes in Stencil Component
DESCRIPTION: Demonstrates how to use style modes in a Stencil component to support multiple styling configurations, such as Material Design and iOS.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'simple-button',
  styleUrls: {
    md: './simple-button.md.css', // styles for Material Design
    ios: './simple-button.ios.css' // styles for iOS
  },
})
export class SimpleButton {
  // ...
}

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: Demonstrates how to add Sass support to a Stencil project by configuring the @stencil/sass plugin in the config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Object Updates with Spread Operator in Stencil
DESCRIPTION: Demonstrates proper object mutation patterns in Stencil components using the spread operator to ensure component updates and @Watch handler execution.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Configuring Stencil docs-vscode Output Target
DESCRIPTION: Configuration setup in stencil.config.ts to enable the docs-vscode output target. This generates a JSON file containing custom element information that VS Code can use for enhanced HTML editing features.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Styling Host Element in Shadow DOM CSS
DESCRIPTION: Demonstrates how to style the host element using CSS when using shadow DOM in a Stencil component.

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Configuring Shadow DOM for a Stencil Component
DESCRIPTION: These examples demonstrate how to enable Shadow DOM encapsulation for a Stencil component, including the option to delegate focus.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: true
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: { 
    delegatesFocus: true,
  }
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Rendering Dynamic Content in Light DOM for SSR in TSX
DESCRIPTION: This snippet shows a better approach for SSR compatibility by rendering dynamic content directly in the light DOM instead of passing it as props. This ensures proper rendering during server-side rendering.

LANGUAGE: tsx
CODE:
const menu = {
    'Overview': ['Introduction', 'Getting Started', 'Component API', 'Guides', 'FAQ'],
    'Docs': ['Framework Integrations', 'Static Site Generation', 'Config', 'Output Targets', 'Testing', 'Core Compiler API'],
    'Community': ['Blog', 'GitHub', 'X', 'Discord']
}
return (
    <nav>
        <footer-navigation>
            {Object.entries(menu).map(([section, links]) => (
                <footer-navigation-section>
                    <h2>{section}</h2>
                    {links.map(link => (
                        <footer-navigation-entry href="#/">{link}</footer-navigation-entry>
                    ))}
                </footer-navigation-section>
            ))}
        </footer-navigation>
    </nav>
)

----------------------------------------

TITLE: Using @State() with Lifecycle Methods in Stencil
DESCRIPTION: Illustrates how to use @State() in conjunction with component lifecycle methods. This example updates the current time every second and cleans up the interval when the component is disconnected.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Configuring Basic Service Worker in Stencil
DESCRIPTION: Default Workbox configuration for service worker generation in Stencil applications, specifying which file patterns to cache.

LANGUAGE: typescript
CODE:
{
  globPatterns: [
    '**/*.{js,css,json,html}'
  ]
};

----------------------------------------

TITLE: Importing Mocking Primitives in WebdriverIO for TypeScript
DESCRIPTION: This snippet shows how to import the necessary mocking functions from the @wdio/browser-runner package. These functions are used to create and manage mocks in WebdriverIO tests.

LANGUAGE: typescript
CODE:
import { mock, fn, unmock } from '@wdio/browser-runner'

----------------------------------------

TITLE: Applying Styles to a Stencil Component
DESCRIPTION: These snippets show different ways to apply styles to a Stencil component, including using external stylesheets and inline styles.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrl: './todo-list.css',
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrls: ['./todo-list-1.css', './todo-list-2.css']
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrls: {
     ios: 'todo-list-1.ios.scss',
     md: 'todo-list-2.md.scss',
  }
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styles: 'div { background-color: #fff }'
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: State Management with Event Listeners
DESCRIPTION: Demonstrates combining @State with @Listen decorator to handle click events and toggle component state, showing state management with user interactions.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Prop Validation in Stencil
DESCRIPTION: Shows how to implement prop validation in Stencil using the @Watch() decorator. The example validates a required string prop to ensure it's not empty and has a minimum length.

LANGUAGE: tsx
CODE:
import { Component, Prop, Watch, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class TodoList {
  @Prop() thingToDo!: string;

  @Watch('thingToDo')
  validateName(newValue: string, _oldValue: string) {
    const isBlank = typeof newValue !== 'string' || newValue === '';
    if (isBlank) { 
        throw new Error('thingToDo is a required property and cannot be empty') 
    };
    const has2chars = typeof newValue === 'string' && newValue.length >= 2;
    if (!has2chars) {
       throw new Error('thingToDo must have a length of more than 1 character')
    };
  }
}

----------------------------------------

TITLE: Creating a Form-Associated Stencil Component
DESCRIPTION: Shows how to create a form-associated Stencil component using the formAssociated option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Implementing Auto-updating State in Stencil
DESCRIPTION: Shows how to implement auto-updating state using lifecycle methods and intervals to create a live-updating time display.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;
    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Configuring Stencil's 'dist' Output Target
DESCRIPTION: This snippet shows how to configure the 'dist' output target in Stencil's configuration file. It generates the component(s) as a reusable library that can be self-lazy loading.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Slot Implementation in Components
DESCRIPTION: Shows how to use slots to create placeholders for dynamic child content in components.

LANGUAGE: tsx
CODE:
render() {
  return [
    <slot name="item-start" />,
    <h1>Here is my main content</h1>,
    <slot name="item-end" />
  ]
}

----------------------------------------

TITLE: Configuring Stencil React Output Target
DESCRIPTION: Configuration for generating React component wrappers from Stencil components

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    reactOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../react-library/lib/components/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Unit Testing with Mocked Helper in TypeScript
DESCRIPTION: Example of a unit test that uses the mocked 'getRandomInt' function. It demonstrates how to apply the mock and test the 'bar' function's behavior.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Using Host Component in Stencil TSX
DESCRIPTION: Demonstrates how to use the Host component to set attributes and classes on the host element based on component props.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: E2E Test Using page.goto()
DESCRIPTION: Example of E2E test implementation using page.goto() to load a pre-defined HTML template.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // The path here is the path to the www output relative to the dev server root directory
    await page.goto('/components/my-component/test/my-component.e2e.html');

    // Rest of test
    const component = await page.locator('my-component');
    await expect(component).toHaveText(`Hello World! I'm Stencil`);
  });
});

----------------------------------------

TITLE: E2E Test Using page.goto()
DESCRIPTION: Example of E2E test implementation using page.goto() to load a pre-defined HTML template.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // The path here is the path to the www output relative to the dev server root directory
    await page.goto('/components/my-component/test/my-component.e2e.html');

    // Rest of test
    const component = await page.locator('my-component');
    await expect(component).toHaveText(`Hello World! I'm Stencil`);
  });
});

----------------------------------------

TITLE: Configuring HTTPS for Stencil Dev Server in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the Stencil dev server to use HTTPS by providing SSL certificate and key files. It also shows how to set a custom port and reload strategy.

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8'),
    },
  },
};

----------------------------------------

TITLE: HTML Template for E2E Testing in Stencil
DESCRIPTION: Provides an example of an HTML template used for end-to-end testing, including the necessary script tags for loading Stencil components.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf8" />

    <!-- Replace with the path to your entrypoint -->
    <script src="../../../build/test-app.esm.js" type="module"></script>
    <script src="../../../build/test-app.js" nomodule></script>
  </head>
  <body>
    <my-component first="Stencil"></my-component>
  </body>
</html>

----------------------------------------

TITLE: Using React Wrapper Components in a React App
DESCRIPTION: This code snippet shows how to import and use the generated React wrapper components in a React application. It includes importing the component and the defineCustomElements function.

LANGUAGE: tsx
CODE:
// App.tsx
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Components in Browser
DESCRIPTION: This JSON configuration sets up VS Code to launch Chrome for debugging Stencil components running on localhost:3333. It enables source maps and provides path overrides for accurate debugging.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:3333",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "*": "${webRoot}/*"
      }
    }
  ]
}

----------------------------------------

TITLE: Testing Rendered Components with newSpecPage in TypeScript
DESCRIPTION: Example of using newSpecPage() to test a component's rendered HTML output. Shows how to validate that a component renders with expected content using the toEqualHtml matcher.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Component Hierarchy Example
DESCRIPTION: Demonstrates the hierarchical structure of component lifecycle method execution order.

LANGUAGE: markup
CODE:
  <cmp-a>
    <cmp-b>
      <cmp-c></cmp-c>
    </cmp-b>
  </cmp-a>

----------------------------------------

TITLE: Defining Props in Stencil Component
DESCRIPTION: Illustrates how to define object and array props in a Stencil component using the @Prop decorator. This is necessary for passing complex data to the component.

LANGUAGE: tsx
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Writing a Test with a Mocked Function in Stencil using TypeScript
DESCRIPTION: This snippet demonstrates how to write a test that uses a mocked function. It shows how to use jest.mock() to apply the mock and then tests if the mocked function returns the expected value.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Simulating User Input in E2E Tests
DESCRIPTION: Illustrates how to simulate user input in an E2E test, including typing and using modifier keys.

LANGUAGE: typescript
CODE:
const page = await newE2EPage({
  html: `
      <dom-interaction></dom-interaction>
    `
});

const input = await page.find('dom-interaction >>> .input');

let value = await input.getProperty('value');
expect(value).toBe('');

await input.press('8');
await input.press('8');
await input.press(' ');

await page.keyboard.down('Shift');
await input.press('KeyM');
await input.press('KeyP');
await input.press('KeyH');
await page.keyboard.up('Shift');

----------------------------------------

TITLE: Functional Components with Children
DESCRIPTION: Example showing how functional components can accept and render child elements using the children parameter.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Implementing CSP Nonce in Stencil Dist Output
DESCRIPTION: Example showing how to set a nonce value for all script and style tags in a Stencil dist output target within an Angular application's entrypoint. Uses the setNonce helper function exported from the loader.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Documenting CSS Variables in Stencil
DESCRIPTION: This example shows how to document CSS variables (CSS Custom Properties) in Stencil using JSDocs-style comments. The comment includes a @prop tag to specify the variable name and its description.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: Configuring Stencil Vue Output Target
DESCRIPTION: Add the vueOutputTarget configuration to the Stencil config file to generate Vue component wrappers.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Using Generated Component in Vue Template
DESCRIPTION: Example of using a generated component wrapper in a Vue template.

LANGUAGE: html
CODE:
<template>
  <my-component first="Your" last="Name"></my-component>
</template>

----------------------------------------

TITLE: Creating Node System in Stencil Core CLI
DESCRIPTION: Creates the system used by the compiler, based on NodeJS APIs. It handles file system operations and content hashing. The NodeJS 'process' object should be provided as an argument.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Configuring Stencil Testing Options
DESCRIPTION: Example of configuring testing options in Stencil's config file, showing how to set Jest configuration options through Stencil's testing property.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  testing: {
    testPathIgnorePatterns: [...]
  }
};

----------------------------------------

TITLE: Configuring Copy Tasks for WWW Output Target
DESCRIPTION: This example demonstrates how to configure copy tasks within the www output target to copy an entire directory from src/images to www/images.

LANGUAGE: typescript
CODE:
  outputTargets: [
    {
      type: 'www',
      copy: [
        { src: 'images' }
      ]
    }
  ]

----------------------------------------

TITLE: Mocking an External Library in TypeScript
DESCRIPTION: Example of mocking the 'md5' library by creating a mock file in the __mocks__ directory. This demonstrates how to create a simple mock that returns a fixed value.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Consuming Vue Wrapper Components
DESCRIPTION: Example of how to use the generated Vue component wrappers in a Vue application.

LANGUAGE: javascript
CODE:
// src/main.js
import { ComponentLibrary } from 'vue-library';

createApp(App).use(ComponentLibrary).mount('#app');

LANGUAGE: html
CODE:
<template>
  <my-component first="Your" last="Name"></my-component>
</template>

----------------------------------------

TITLE: Complex E2E Test Example with Toggle Component
DESCRIPTION: Shows a comprehensive E2E test example that tests a toggle component's functionality, including class checking and event spying.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Example Playwright Configuration Output
DESCRIPTION: Shows the resulting configuration object after applying custom overrides to the default Stencil Playwright configuration.

LANGUAGE: typescript
CODE:
{
  testMatch: '*.spec.ts',
  use: {
    baseURL: 'http://localhost:3333',
  },
  webServer: {
    command: 'stencil build --dev --watch --serve --no-open',
    url: 'http://localhost:3333/ping',
    reuseExistingServer: !process.env.CI,
    // Only timeout gets overridden, not the entire object
    timeout: 30000,
  },
}

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: Shows how to write CSS for a component using Shadow DOM, including the use of the :host pseudo-class selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Listening to Events in Stencil Components
DESCRIPTION: Demonstrates how to use the @Listen decorator to handle DOM events, including custom events emitted by other components. The example shows listening to a 'todoCompleted' event.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Calling Public Methods in Stencil Components
DESCRIPTION: Shows how to properly call a public method on a Stencil component using customElements.whenDefined() to ensure the component is loaded before method invocation.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: Basic configuration for the dist output target in a Stencil project config file to generate a reusable component library.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Using Build Constants in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Build constants from @stencil/core to conditionally execute code based on development mode and environment (browser or server). It shows checks for Build.isDev and Build.isBrowser within a component's lifecycle method.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Configuring Package.json for Stencil Component Library
DESCRIPTION: Example package.json configuration for publishing a Stencil component library to NPM. Defines entry points for different module formats, types, and files to be included in the package distribution.

LANGUAGE: json
CODE:
{
  "main": "dist/index.cjs.js",
  "module": "dist/index.js",
  "es2015": "dist/esm/index.mjs",
  "es2017": "dist/esm/index.mjs",
  "types": "dist/types/components.d.ts",
  "unpkg": "dist/my-project-name/my-project-name.esm.js",
  "collection:main": "dist/collection/index.js",
  "collection": "dist/collection/collection-manifest.json",
  "files": [
    "dist/",
    "css/",
    "loader/"
  ]
}

----------------------------------------

TITLE: Advanced Screenshot Comparison in Stencil E2E Tests
DESCRIPTION: Comprehensive example of screenshot comparison in Stencil, including setting global styles, finding elements, and using different comparison methods. It demonstrates how to test against hard pixels and percentage of changes.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    // In order to test against any global styles you may have, don't forget to set the link to the global css. You don't have to do this if your stencil.config.ts file doesn't build a global css file with globalStyle.
    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    // To start comparing the visual result, you first must run page.compareScreenshot; This will capture a screenshot, and save the file to "/screenshot/images". You'll be able to check that into your repo to provide those results to your team. You can only have one of these commands per test. 
    const results = await page.compareScreenshot();

    // Finally, we can test against the previous screenshots. 
    // Test against hard pixels
    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    // Test against the percentage of changes. if 'allowableMismatchedRatio' is above 20% changed, 
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Assets Directory Configuration
DESCRIPTION: Example showing how to configure and use asset directories in a Stencil component for static file management.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Event Listening in Stencil Components
DESCRIPTION: Shows how to listen to DOM events using the @Listen decorator, including handling custom events from child components.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Basic Component Connection Example in TSX
DESCRIPTION: Demonstrates how connectedCallback() is called when a component is added to the DOM, showing the relationship between different lifecycle methods.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Testing Component Class Logic in Stencil
DESCRIPTION: This snippet demonstrates how to test the logic of a Stencil component class directly, without rendering. It creates an instance of the component and tests its methods and properties.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Configuring HTTPS Dev Server in Stencil
DESCRIPTION: Example configuration for setting up HTTPS in Stencil's dev server using custom SSL certificates. Demonstrates how to configure the server port and HTTPS credentials using the Config interface.

LANGUAGE: tsx
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8'),
    },
  },
};

----------------------------------------

TITLE: Implementing formAssociatedCallback in Stencil
DESCRIPTION: This example demonstrates the use of the formAssociatedCallback to set an aria-label on the associated form when the component is connected.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true,
})
export class FormAssociatedCmp {
  @AttachInternals()
  internals: ElementInternals;

  formAssociatedCallback(form) {
    form.ariaLabel = 'formAssociated called';
  }

  render() {
    return <input type="text" />;
  }
}

----------------------------------------

TITLE: Functional Component with Child Manipulation in Stencil
DESCRIPTION: Illustrates a functional component that uses utility methods to manipulate child elements, adding a CSS class to each child.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Importing Test Function - Stencil Playwright
DESCRIPTION: Demonstrates the correct way to import the test function from @stencil/playwright instead of @playwright/test

LANGUAGE: typescript
CODE:
// THIS IS CORRECT
import { test } from '@stencil/playwright';

// THIS IS NOT!!
// import { test } from '@playwright/test';

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation in Stencil
DESCRIPTION: This snippet shows how to configure a Stencil project to validate the primary package output target. It sets the 'dist' output target as the primary target for validation and enables validation in the config.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Creating Vue Plugin for Component Registration
DESCRIPTION: Vue plugin implementation for registering custom elements.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Implementing Controlled Ionic Toggle Component in Ember
DESCRIPTION: Example of creating a controlled Ionic toggle component with state management in an Ember component.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Form Associated Component in Stencil
DESCRIPTION: Shows how to create a form-associated component using the formAssociated configuration option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Importing Test Function for Stencil Playwright Adapter
DESCRIPTION: Demonstrates the correct way to import the 'test' function from '@stencil/playwright' instead of '@playwright/test' for Stencil projects.

LANGUAGE: typescript
CODE:
// THIS IS CORRECT
import { test } from '@stencil/playwright';

// THIS IS NOT!!
// import { test } from '@playwright/test';

----------------------------------------

TITLE: Building Stencil Project with Docs Generation
DESCRIPTION: Command line commands for generating documentation using Stencil build or docs command

LANGUAGE: bash
CODE:
npx stencil build
npm stencil build --watch
npx stencil build --docs
npx stencil docs

----------------------------------------

TITLE: Basic E2E Test Setup in Stencil
DESCRIPTION: Demonstrates the basic structure of an E2E test using Stencil's testing utilities to render and validate a component.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Service Implementation Using Helper in TypeScript
DESCRIPTION: Example service that uses the getRandomInt helper function to generate a random number between 0 and 10.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Custom Text Input Implementation
DESCRIPTION: Implementation of a custom text input component that integrates with forms using ElementInternals and handles value changes.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Async Data Fetching Example - Stencil TSX
DESCRIPTION: Demonstrates how to fetch data asynchronously in componentWillLoad() by returning a Promise.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Event Handling with Listen Decorator
DESCRIPTION: Demonstrates how to use the @Listen decorator to handle DOM events, including custom events emitted by other components.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Creating an In-Memory Compiler System
DESCRIPTION: Function signature for createSystem(), which creates an in-memory CompilerSystem instance independent of any platform.

LANGUAGE: typescript
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Defining Object and Array Props in Stencil Component
DESCRIPTION: This TypeScript code defines a Stencil component class with object and array props. It uses the @Prop decorator to declare the props.

LANGUAGE: typescript
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Defining a Simple Functional Component in Stencil
DESCRIPTION: Demonstrates the basic syntax for creating a functional component that renders a greeting using props.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Stencil Component Test with SpecPage
DESCRIPTION: End-to-end test implementation using newSpecPage to test a Stencil component with mocked dependencies.

LANGUAGE: tsx
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Implementing Private Methods in Stencil Components
DESCRIPTION: Demonstrates how to implement private methods in Stencil components that don't require the @Method() decorator or async functionality. This example shows a private 'getData' method used within the component's render function.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Watching and Parsing Object Props in Stencil Component
DESCRIPTION: Shows how to watch for changes in object props and parse them into component state using the @Watch decorator and componentWillLoad lifecycle method.

LANGUAGE: typescript
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

----------------------------------------

TITLE: Variable Casing Property Example
DESCRIPTION: Demonstrates proper casing conventions when using properties in Stencil components

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() thingToDo: string;

    render() {
        return <div>{this.thingToDo}</div>;
    }
}

----------------------------------------

TITLE: Using a Stencil Component in HTML
DESCRIPTION: Example of how to use a Stencil component in HTML markup after it has been compiled.

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Creating a Form-Associated Stencil Component
DESCRIPTION: This example shows how to create a minimal form-associated Stencil component using the 'formAssociated' option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Rendering Stencil Component for Unit Testing
DESCRIPTION: Demonstrates how to use the '@wdio/browser-runner/stencil' package to render a Stencil component for unit testing. It shows importing the component and using the 'render' method to mount it to the DOM.

LANGUAGE: typescript
CODE:
import { render } from '@wdio/browser-runner/stencil';
import { MyComponent } from './my-component';

describe('MyComponent', () => {
    it('renders', async () => {
        const page = await render({
            components: [MyComponent],
            template: () => <my-component first="Stencil" last="'Don't call me a framework' JS"></my-component>
        });

        const element = await page.find('my-component');
        expect(element).toHaveClass('hydrated');

        const value = await element.getProperty('value');
        expect(value.toLowerCase()).toContain('stencil');
    });
});

----------------------------------------

TITLE: Creating a Stencil Store in TypeScript
DESCRIPTION: Example of creating a store with initial state and defining a change handler for the 'clicks' property.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Implementing a Custom Text Input as a Form-Associated Component
DESCRIPTION: This example shows a complete implementation of a custom text input as a form-associated component. It uses the AttachInternals decorator to interact with the form and implements state management and event handling.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Component Composition Example
DESCRIPTION: Demonstrates how to compose Stencil components by nesting them within each other.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Managing Object Updates in Stencil Components
DESCRIPTION: Demonstrates how to properly update objects in Stencil components using the spread operator to ensure state changes trigger component updates.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Stencil Primary Package Output Target Validation Configuration
DESCRIPTION: Configuration example showing how to set up primary package output target validation. Demonstrates enabling validation and marking a specific output target as primary for validation purposes.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Form Disabled Callback Implementation
DESCRIPTION: Example showing how to handle form disabled state changes using formDisabledCallback.

LANGUAGE: tsx
CODE:
import { Component, h, State } from '@stencil/core';

@Component({
  tag: 'form-disabled-cb',
  formAssociated: true,
})
export class MyComponent {
  @State() cssClass: string = "";

  formDisabledCallback(disabled: boolean) {
    if (disabled) {
      this.cssClass = "background-mode";
    } else {
      this.cssClass = "";
    }
  }

  render() {
    return <input type="text" class={this.cssClass}></input>
  }
}

----------------------------------------

TITLE: Updating Arrays in Stencil Components
DESCRIPTION: Illustrates the correct way to update arrays in Stencil components using non-mutable array operators and the spread operator to trigger @Watch and component re-renders.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Configuring Default Workbox Service Worker in Stencil
DESCRIPTION: Default configuration for service worker generation in Stencil using Workbox's generateSW mode. Defines glob patterns for asset caching.

LANGUAGE: typescript
CODE:
{
  globPatterns: [
    '**/*.{js,css,json,html}'
  ]
};

----------------------------------------

TITLE: Functional Component with Children in Stencil
DESCRIPTION: Illustrates how to define a functional component that accepts both props and children arguments.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Basic Form-Associated Component Setup in TypeScript
DESCRIPTION: Demonstrates the minimal setup required to create a form-associated component using the @Component decorator with formAssociated option.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Default Values for Props in Stencil
DESCRIPTION: This snippet shows how to set default values for props in a Stencil component.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'component-with-some-props',
})
export class ComponentWithSomeProps {
    @Prop() aNumber = 42;
    @Prop() aString = 'defaultValue';

    render() {
        return <div>The number is {this.aNumber} and the string is {this.aString}</div>
    }
}

----------------------------------------

TITLE: Manipulating Children in a Functional Component using Stencil Utils
DESCRIPTION: Demonstrates how to use the utils object provided by FunctionalComponent to transform child elements.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Conditional Rendering in Stencil JSX
DESCRIPTION: Demonstrates conditional rendering using if/else statements and the ternary operator in JSX.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
    {this.name
      ? <p>Hello {this.name}</p>
      : <p>Hello World</p>
    }
    </div>
  );
}

----------------------------------------

TITLE: Using Style Modes in Stencil Component
DESCRIPTION: Demonstrates how to implement style modes in a Stencil component to support different styling configurations, such as iOS and Material Design.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'simple-button',
  styleUrls: {
    md: './simple-button.md.css', // styles for Material Design
    ios: './simple-button.ios.css' // styles for iOS
  },
})
export class SimpleButton {
  // ...
}

----------------------------------------

TITLE: Configuring package.json for Stencil Component Distribution
DESCRIPTION: JSON configuration in package.json for defining entry points for different module systems when using the 'dist' output target.

LANGUAGE: json
CODE:
{
  "exports": "./dist/esm/my-design-system.js",
  "main": "./dist/cjs/my-design-system.js",
  "unpkg": "dist/my-design-system/my-design-system.esm.js"
}

----------------------------------------

TITLE: Enabling Static Site Generation in Stencil Build
DESCRIPTION: Command to enable prerendering during the Stencil build process using the --prerender flag.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Event Handling in JSX with Stencil
DESCRIPTION: Shows how to bind event listeners directly in JSX when using Stencil components, demonstrating the automatic 'on' prefix convention.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

----------------------------------------

TITLE: Creating a Store in Stencil
DESCRIPTION: This snippet demonstrates how to create a store using @stencil/store. It initializes a store with clicks, seconds, and squaredClicks properties, and sets up an onChange listener for the clicks property.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Setting Document Title Using Prerender Config in Stencil (TSX)
DESCRIPTION: This code snippet demonstrates how to use the afterHydrate hook in Stencil's Prerender Config to set the document title based on the URL pathname during static site generation. It imports PrerenderConfig from @stencil/core and defines a config object with an afterHydrate function.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Using Stencil Store in a Component
DESCRIPTION: Demonstrates how to use the store in a Stencil component, including updating state in lifecycle methods and rendering state values.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Setting Up a New Stencil Project
DESCRIPTION: Commands to set up a newly created Stencil project. This includes changing to the project directory, installing dependencies, and starting the development server.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Configuring package.json for Stencil Component Distribution
DESCRIPTION: Example package.json configuration for distributing a Stencil component library through NPM. Includes essential entry point definitions for different module formats, type definitions, and file distribution settings.

LANGUAGE: json
CODE:
{
  "main": "dist/index.cjs.js",
  "module": "dist/index.js",
  "es2015": "dist/esm/index.mjs",
  "es2017": "dist/esm/index.mjs",
  "types": "dist/types/components.d.ts",
  "unpkg": "dist/my-project-name/my-project-name.esm.js",
  "collection:main": "dist/collection/index.js",
  "collection": "dist/collection/collection-manifest.json",
  "files": [
    "dist/",
    "css/",
    "loader/"
  ]
}

----------------------------------------

TITLE: Creating a Stencil Compiler Instance
DESCRIPTION: Shows how to create a Stencil Compiler instance using a provided configuration. This is used for full builds of Stencil components.

LANGUAGE: typescript
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Consuming React Wrapper Components
DESCRIPTION: This example shows how to use the React wrapper components in a React application, including importing and registering custom elements.

LANGUAGE: tsx
CODE:
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Querying Typed Stencil Components in TypeScript
DESCRIPTION: Demonstrates how to properly type and query a Stencil-generated Web Component using TypeScript. Shows the automatic generation of HTML element interfaces with proper typing for component properties.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Basic E2E Test Structure in Stencil
DESCRIPTION: Demonstrates the basic structure of an end-to-end test in Stencil using Jest and Puppeteer. It shows how to create a new E2E page, set content, find elements, and make assertions.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Stencil Component Test with SpecPage
DESCRIPTION: End-to-end test implementation using newSpecPage to test a Stencil component with mocked dependencies.

LANGUAGE: tsx
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Implementing Basic Form in Stencil Component
DESCRIPTION: Demonstrates creation of a basic form component with a single text input field and submit handler. The component uses @State decorator for managing form value and includes input change handling.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Creating Playwright Configuration for Stencil
DESCRIPTION: TypeScript configuration file for Playwright in a Stencil project, including custom matchers and default config creation.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

// Add custom Stencil matchers to Playwright assertions
expect.extend(matchers);

export default createConfig({
  // Overwrite Playwright config options here
});

----------------------------------------

TITLE: Configuring Stencil Stats Generation in Package Scripts (TSX)
DESCRIPTION: Demonstrates how to add scripts to package.json for generating Stencil stats data using the --stats flag, with optional file path specification.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Configuring Basic Stencil Output Targets in TypeScript
DESCRIPTION: Example configuration showing how to set up multiple output targets in a Stencil project. Demonstrates configuring both 'dist' and 'www' output types.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Updating Arrays in Stencil Components
DESCRIPTION: Shows how to properly update arrays in Stencil components using immutable operations to trigger @Watch and re-renders. It uses the spread operator to create a new array reference.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Dynamic State Update with @State() in Stencil
DESCRIPTION: Shows how to dynamically update a @State() decorated property to trigger rerenders, using lifecycle methods for setup and cleanup.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Configuring Shadow DOM for a Stencil Component
DESCRIPTION: These examples demonstrate how to enable Shadow DOM encapsulation for a Stencil component, with and without the delegatesFocus option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: true
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: { 
    delegatesFocus: true,
  }
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Basic Component Testing with newSpecPage
DESCRIPTION: Shows how to test a basic Stencil component rendering using newSpecPage() utility with HTML initialization.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Asset Path Component Example in TSX
DESCRIPTION: Demonstrates usage of getAssetPath utility to resolve local asset paths within a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Event Listening in Stencil Components
DESCRIPTION: Shows how to listen to DOM events using the @Listen decorator, including handling custom events from child components.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Defining Props in Stencil Components
DESCRIPTION: Example of defining props using the @Prop() decorator in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Full Build Example with NodeJS
DESCRIPTION: Complete example showing how to set up and run a full Stencil build in a NodeJS environment using the compiler API.

LANGUAGE: tsx
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Stencil Primary Package Output Target Validation Configuration
DESCRIPTION: Configuration example showing how to set up primary package output target validation. Demonstrates enabling validation and marking a specific output target as primary for validation purposes.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Implementing Module and File Mocking
DESCRIPTION: Demonstrates how to mock both project files and external modules using WebdriverIO's mocking functions. Shows how to create mock implementations and replace original functionality with mock returns.

LANGUAGE: typescript
CODE:
import { mock, fn } from '@wdio/browser-runner'
import { format } from './utils/utils.ts'

// mock files within the project
mock('./utils/utils.ts', () => ({
    format: fn().mockReturnValue(42)
}))
// mock whole modules and replace functionality with what is defined in `./__mocks__/leftpad.ts`
mock('leftpad')

console.log(format()) // returns `42`

----------------------------------------

TITLE: Testing Component Class Logic in TypeScript
DESCRIPTION: Shows how to test component class methods and properties directly by instantiating the component class. Demonstrates simple logic testing without rendering.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Generating JSON Docs via CLI in Stencil
DESCRIPTION: Command to generate JSON documentation using the Stencil CLI.

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Setting Props on a Stencil Component in E2E Tests
DESCRIPTION: Illustrates how to set properties on a Stencil component during E2E testing using page.$eval. It shows creating a new page, setting content, and manipulating component properties.

LANGUAGE: typescript
CODE:
await page.setContent(`
      <prop-cmp></prop-cmp>
    `);

await page.$eval('prop-cmp', (elm: any) => {
  elm.first = 'Marty';
  elm.lastName = 'McFly';
});

await page.waitForChanges();

----------------------------------------

TITLE: Using Stencil Components with Props in TSX
DESCRIPTION: Example of using a Stencil component with props in a TSX file.

LANGUAGE: tsx
CODE:
<todo-list name={"Tuesday's To-Do List"}></todo-list>

----------------------------------------

TITLE: Advanced Screenshot Testing with Component Properties
DESCRIPTION: Comprehensive example demonstrating screenshot comparison testing with global styles, component properties, and different comparison methods including pixel and ratio-based matching.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    // In order to test against any global styles you may have, don't forget to set the link to the global css. You don't have to do this if your stencil.config.ts file doesn't build a global css file with globalStyle.
    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    // To start comparing the visual result, you first must run page.compareScreenshot; This will capture a screenshot, and save the file to "/screenshot/images". You'll be able to check that into your repo to provide those results to your team. You can only have one of these commands per test. 
    const results = await page.compareScreenshot();

    // Finally, we can test against the previous screenshots. 
    // Test against hard pixels
    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    // Test against the percentage of changes. if 'allowableMismatchedRatio' is above 20% changed, 
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Writing a Vitest Test Using JSX for Stencil Components
DESCRIPTION: This test demonstrates how to use JSX to render a Stencil component in a Vitest test, using the custom createElement function.

LANGUAGE: tsx
CODE:
/** @jsx createElement */
import { expect, test } from 'vitest'

import { createElement } from '../../utils/jsx'
import './my-component.js'

test('should render the component with jsx', async () => {
    const cmp = <my-component first="Stencil" last="'Don't call me a framework' JS"></my-component>
    document.body.appendChild(cmp)
    await new Promise((resolve) => requestIdleCallback(resolve))
    expect(cmp.shadowRoot?.querySelector('div')?.innerText)
        .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)
})

----------------------------------------

TITLE: Using renderToString for Component Serialization
DESCRIPTION: Example demonstrating how to use renderToString to convert components to HTML strings with various configuration options.

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(
  `<my-component first="Stencil" last="'Don't call me a framework' JS"></my-component>`,
  {
    fullDocument: false,
    serializeShadowRoot: true,
    prettyHtml: true,
  }
);

console.log(results.html);

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: Command to install the ember-cli-stencil addon for legacy Ember integration with Stencil components.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Using Stencil Store in a component
DESCRIPTION: Demonstration of how to use the store within a Stencil component. It shows updating the store, accessing store values, and creating a global counter component.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Correct Component Structure in TypeScript
DESCRIPTION: This set of snippets shows the correct way to structure components and utility functions in separate files to comply with Stencil's bundling requirements.

LANGUAGE: typescript
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: typescript
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: typescript
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Configuring Value Accessor Bindings
DESCRIPTION: Configuration for integrating Stencil components with Angular forms using ngModel value accessors.

LANGUAGE: typescript
CODE:
const angularValueAccessorBindings: ValueAccessorConfig[] = [
  {
    elementSelectors: ['my-input[type=text]'],
    event: 'myChange',
    targetAttr: 'value',
    type: 'text',
  },
];

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    angularOutputTarget({
      componentCorePackage: 'component-library',
      directivesProxyFile: '{path to your proxy file}',
      valueAccessorConfigs: angularValueAccessorBindings,
    }),
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
  ],
};

----------------------------------------

TITLE: Implementing Worker Functions in Stencil
DESCRIPTION: Shows how to create worker functions in a .worker.ts file that can be executed in a separate thread.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Creating Node System for Stencil Compiler in TypeScript
DESCRIPTION: Creates the system based on NodeJS APIs used by the Stencil compiler. It handles file system operations and content hashing using NodeJS modules. The NodeJS process object should be provided as an argument.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Using a Functional Component with Children in Stencil
DESCRIPTION: Demonstrates how to use a functional component that accepts children elements.

LANGUAGE: tsx
CODE:
<Hello name="World">
  <p>I'm a child element.</p>
</Hello>

----------------------------------------

TITLE: Importing Stencil Components in TypeScript
DESCRIPTION: Example of importing a Stencil component library in a TypeScript application.

LANGUAGE: typescript
CODE:
import 'my-design-system';

----------------------------------------

TITLE: Directory Structure Example
DESCRIPTION: Example directory structure showing the organization of assets in a Stencil project's build output

LANGUAGE: plaintext
CODE:
www/
├── build/
│   ├── assets/
│   │   ├── logo.png
│   │   └── scenery/
│   │       ├── beach.png
│   │       └── sunset.png
│   └── other-assets/
│       └── font.tiff
└── ...

----------------------------------------

TITLE: Creating Stencil Component Library in Monorepo
DESCRIPTION: Commands to generate a Stencil component library within the packages directory of the monorepo.

LANGUAGE: bash
CODE:
npm init stencil components stencil-library
cd stencil-library
npm install

----------------------------------------

TITLE: Importing Stencil Compiler in NodeJS
DESCRIPTION: Demonstrates how to import the Stencil compiler in a NodeJS environment using CommonJS require

LANGUAGE: tsx
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Form-Associated Component Example
DESCRIPTION: Shows how to create a form-associated component that can participate in HTML forms using the formAssociated option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Configuring Visual Service in WebdriverIO Configuration
DESCRIPTION: Example of adding the visual service to the services list in the WebdriverIO configuration file (wdio.conf.ts).

LANGUAGE: typescript
CODE:
export const config: WebdriverIO.Config = {
    // ...
    services: [
        ['visual', {
            baselineFolder: join(process.cwd(), './tests/visual/baseline'),
            formatImageName: '{tag}-{logName}-{width}x{height}',
            screenshotPath: join(process.cwd(), './tests/visual/latest'),
            savePerInstance: true,
            autoSaveBaseline: true,
        }]
    ],
    // ...
}

----------------------------------------

TITLE: Valid and Invalid Public Method Implementations in Stencil
DESCRIPTION: This snippet demonstrates valid and invalid ways to implement public methods using the @Method() decorator in Stencil. Public methods must be async or return a Promise.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Configuring Vitest for Stencil
DESCRIPTION: Configuration setup for Vitest to enable browser-based testing of Stencil components using Chrome in headless mode.

LANGUAGE: typescript
CODE:
import stencil from 'unplugin-stencil/vite'
import { defineConfig } from 'vitest/config'

export default defineConfig({
    test: {
        browser: {
            enabled: true,
            headless: true,
            name: 'chrome'
        },
    },
    plugins: [stencil()]
})

----------------------------------------

TITLE: Creating Mocks in TypeScript for WebdriverIO Tests
DESCRIPTION: This example demonstrates how to create mocks for both project files and external modules. It shows mocking a utility function to return a fixed value and mocking an entire external module.

LANGUAGE: typescript
CODE:
import { mock, fn } from '@wdio/browser-runner'
import { format } from './utils/utils.ts'

// mock files within the project
mock('./utils/utils.ts', () => ({
    format: fn().mockReturnValue(42)
}))
// mock whole modules and replace functionality with what is defined in `./__mocks__/leftpad.ts`
mock('leftpad')

console.log(format()) // returns `42`

----------------------------------------

TITLE: Using @State() with Complex Types in Stencil
DESCRIPTION: This example illustrates how to use @State() with complex types, such as arrays of custom objects, and how to properly update the state to trigger rerenders.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Getting DOM Element References in Stencil Components
DESCRIPTION: Illustrates how to get a reference to a DOM element using the ref attribute in JSX within a Stencil component.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'app-home',
})
export class AppHome {
  textInput!: HTMLInputElement;

  handleSubmit = (event: Event) => {
    event.preventDefault();
    console.log(this.textInput.value);
  }

  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <label>
          Name:
          <input type="text" ref={(el) => this.textInput = el as HTMLInputElement} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Example NodeJS Compiler Implementation
DESCRIPTION: Complete example showing how to set up and run a Stencil compiler build in a NodeJS environment.

LANGUAGE: tsx
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Creating a Form-Associated Stencil Component
DESCRIPTION: Shows how to create a form-associated Stencil component using the 'formAssociated' option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Creating Form-Associated Custom Elements in Stencil
DESCRIPTION: Shows how to create a form-associated custom element that integrates natively with HTML form elements. Uses the formAssociated component option and ElementInternals for form integration.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css',
  formAssociated: true
})
export class MyName {
  @State() value: string;
  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.internals.setFormValue(event.target.value);
  }

  render() {
    return (
      <label>
        Name:
        <input
          type="text"
          value={this.value}
          onInput={(event) => this.handleChange(event)}
        />
      </label>
    );
  }
}

----------------------------------------

TITLE: Binding Event Listeners in JSX (TypeScript)
DESCRIPTION: Shows how to bind event listeners directly in JSX for Stencil components. The example demonstrates listening to custom events emitted by a TodoList component.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

LANGUAGE: tsx
CODE:
<todo-list onTodoDeleted={ev => this.someOtherMethod(ev)} />

----------------------------------------

TITLE: Configuring Angular Output Target in Stencil Config
DESCRIPTION: Add the angularOutputTarget configuration to the Stencil config file to generate Angular component wrappers.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Stencil Configuration for E2E Testing
DESCRIPTION: Configuration setup in stencil.config.ts for handling e2e test files and output targets.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'test-app',
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null,
      copy: [{ src: '**/test/*.html' }, { src: '**/test/*.css' }],
    },
  ],
};

----------------------------------------

TITLE: Configuring Stencil Prerender for Debugging
DESCRIPTION: This TypeScript configuration sets up Stencil's prerender process for debugging. It disables URL crawling, specifies entry URLs, and enables runtime logging for better visibility during the debugging process.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Basic E2E Test Structure in Stencil
DESCRIPTION: Demonstrates the basic structure of an E2E test in Stencil, including importing the necessary function, setting up a test suite, and writing a simple test case.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Registering Custom Elements in React Library
DESCRIPTION: This snippet shows how to expose the method for registering custom elements in the React library's entry file.

LANGUAGE: typescript
CODE:
export * from "./components/stencil-generated";
export { defineCustomElements } from "stencil-library/loader";

----------------------------------------

TITLE: Async Data Fetching in ComponentWillLoad
DESCRIPTION: Example showing how to implement asynchronous data fetching in componentWillLoad lifecycle method using Promises.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Functional Component with Children
DESCRIPTION: Example showing how to handle children in a functional component.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Configuring React Output Target in Stencil
DESCRIPTION: Configuration setup for the Stencil React output target in stencil.config.ts to generate React component wrappers

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    reactOutputTarget({
      outDir: '../react-library/lib/components/stencil-generated/',
    }),
    { type: 'dist-custom-elements' },
  ],
};

----------------------------------------

TITLE: Testing Component Class Logic in Stencil
DESCRIPTION: This snippet demonstrates how to test the logic of a Stencil component class directly. It creates an instance of the component and tests its methods and properties without rendering.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Using renderToString Function
DESCRIPTION: Example showing how to use renderToString to hydrate and serialize a component with various options

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(
  `<my-component first="Stencil" last="'Don't call me a framework' JS"></my-component>`,
  {
    fullDocument: false,
    serializeShadowRoot: true,
    prettyHtml: true,
  }
);

console.log(results.html);

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class (JavaScript)
DESCRIPTION: This snippet demonstrates how to create a custom screenshot connector by extending the base ScreenshotConnector class from Stencil. It imports the necessary class and exports a new class that extends it.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Complex Template Content in Stencil Components
DESCRIPTION: Demonstrates how to return multiple top-level elements in a Stencil component's render function using arrays or fragments.

LANGUAGE: tsx
CODE:
render() {
  return ([
  <div class="container">
    <ul>
      <li>Item 1</li>
      <li>Item 2</li>
      <li>Item 3</li>
    </ul>
  </div>,
  <div class="another-container">
    ... more html content ...
  </div>
  ]);
}

LANGUAGE: tsx
CODE:
import { Fragment } from '@stencil/core';

render() {
  return (<Fragment>
    <div class="container">
      <ul>
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
      </ul>
    </div>
    <div class="another-container">
      ... more html content ...
    </div>
  </Fragment>);
}

----------------------------------------

TITLE: Component Property Usage Examples
DESCRIPTION: Shows how to use component properties in both TSX and HTML contexts

LANGUAGE: tsx
CODE:
<todo-list name={"Tuesday's To-Do List"}></todo-list>

LANGUAGE: html
CODE:
<todo-list name="Tuesday's To-Do List"></todo-list>

----------------------------------------

TITLE: Prop Getters and Setters in Stencil
DESCRIPTION: Demonstrates the use of getters and setters with props in Stencil components.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'get-set-props',
})
export class GetSetProps {
    private internalValue = 'should not change';
    @Prop()
    get readOnlyProp { return this.internalValue; }

    private safeValue: 'this' | 'or maybe this' = 'this';
    @Prop()
    get validatedProp {
      return this.safeValue;
    }
    set validatedProp (incomingDodgyValue: any) {
      if (['this', 'or maybe this'].includes(incomingDodgyValue)) {
        this.safeValue = incomingDodgyValue;
      }
    }

    private dateValue: Date = new Date();
    @Prop()
    get transformedProp {
      return this.dateValue;
    }
    set transformedProp (incomingStringVal: string) {
      this.dateValue = new Date(Date.parse(incomingStringVal));
    }
}

----------------------------------------

TITLE: Full Build Example with Stencil Compiler
DESCRIPTION: Provides a complete example of setting up and running a full build using the Stencil compiler in a NodeJS environment. It includes creating a logger, system, loading config, and executing the build.

LANGUAGE: tsx
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Accessing Components with ViewChild
DESCRIPTION: TypeScript code demonstrating how to access Stencil components using ViewChild in Angular.

LANGUAGE: typescript
CODE:
import { Component, ElementRef, ViewChild } from '@angular/core';

import { TestComponent } from 'test-components';

@Component({
  selector: 'app-home',
  template: `<test-components #test></test-components>`,
  styleUrls: ['./home.component.scss'],
})
export class HomeComponent {
  @ViewChild(TestComponent) myTestComponent: ElementRef<TestComponent>;

  async onAction() {
    await this.myTestComponent.nativeElement.testComponentMethod();
  }
}

----------------------------------------

TITLE: Enabling Shadow DOM in Stencil Component
DESCRIPTION: Demonstrates how to enable Shadow DOM for a Stencil component by setting the 'shadow' option to true in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Calling a Public Method on a Stencil Component
DESCRIPTION: Shows how to call a public method on a Stencil component from outside the component. It demonstrates using the 'whenDefined' method to ensure the component is loaded before calling the method.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Using @State() with Complex Types in Stencil
DESCRIPTION: This example illustrates how to use the @State() decorator with complex types, such as arrays of custom objects, and how to properly update the state to trigger rerenders.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Rollup Plugin Asset Copy Configuration
DESCRIPTION: Shows how to configure Rollup plugins to copy asset files in a Stencil project

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Using Host as a Fragment in Stencil TSX
DESCRIPTION: This example shows how to use the Host component to render multiple elements at the root level of a component.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Form Associated Component in Stencil
DESCRIPTION: Shows how to create a form-associated component using the formAssociated property.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Applying Multiple Stylesheets to a Stencil Component
DESCRIPTION: Shows how to use the 'styleUrls' option to apply multiple stylesheets or mode-specific styles to a Stencil component.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrls: ['./todo-list-1.css', './todo-list-2.css']
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrls: {
     ios: 'todo-list-1.ios.scss',
     md: 'todo-list-2.md.scss',
  }
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Rendering Stencil Components for Testing
DESCRIPTION: Example showing how to render and test a Stencil component using WebdriverIO's browser runner. The code demonstrates importing and mounting components for testing with proper component dependencies.

LANGUAGE: typescript
CODE:
render({
    components: [ComponentA, ComponentB, ComponentC, ComponentD],
    template: () => <component-a first="Stencil" last="'Don't call me a framework' JS" />
});

----------------------------------------

TITLE: Asset Directory Configuration in Stencil
DESCRIPTION: Demonstrates how to configure and use asset directories in a Stencil component for handling static files like images.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Using @State() with Complex Types in Stencil
DESCRIPTION: This example illustrates how to use @State() with complex types, such as arrays of custom objects, and how to properly update the state to trigger rerenders.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Basic Component Structure Example in TSX
DESCRIPTION: Example of a button component structure showing component definition and rendering

LANGUAGE: tsx
CODE:
import { Component, Fragment, h } from '@stencil/core'
@Component({
  tag: 'my-btn',
  styleUrl: './button.css'
})
export class MyBtn {
  render() {
    return (
      <>
        <button>...</button>
      </>
    );
  }
}

----------------------------------------

TITLE: Conditional Rendering in JSX
DESCRIPTION: Demonstrates different approaches to conditional rendering using if/else statements and ternary operators.

LANGUAGE: tsx
CODE:
render() {
  if (this.name) {
    return ( <div>Hello {this.name}</div> )
  } else {
    return ( <div>Hello, World</div> )
  }
}

----------------------------------------

TITLE: Displaying File Structure for Stencil Components
DESCRIPTION: This snippet shows the recommended file structure for organizing Stencil components, with separate directories for each component and related files.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Selecting Stencil Project Type
DESCRIPTION: The create-stencil CLI provides options for different types of Stencil projects. This snippet shows the interactive prompt for selecting a starter project.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Configuring Webapp Output Target in Stencil
DESCRIPTION: This snippet shows how to configure the 'www' output target in a Stencil project's configuration. It demonstrates the basic structure of the outputTargets array with a single 'www' type target.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Basic Screenshot Comparison in Stencil E2E Tests
DESCRIPTION: A simple example of how to set up a screenshot comparison test in a Stencil end-to-end test using Puppeteer. It demonstrates loading a component and comparing its screenshot.

LANGUAGE: javascript
CODE:
it('render something', async () => {
  const page: E2EPage = await newE2EPage();
  await page.setContent('<my-cmp></my-cmp>');
  await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
});

----------------------------------------

TITLE: Required Properties in Stencil
DESCRIPTION: Demonstrates how to mark a prop as required in a Stencil component.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class ToDoListItem {
   @Prop() thingToDo!: string;
}

----------------------------------------

TITLE: Resetting Stencil Store in Tests
DESCRIPTION: Example of how to reset the store state before each test using the dispose() method in a beforeEach hook.

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: Configuring Webapp Output Target in Stencil
DESCRIPTION: This snippet shows how to configure the 'www' output target in a Stencil project's configuration. It demonstrates the basic structure of the outputTargets array with a single 'www' type target.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Using Refs in Stencil Components
DESCRIPTION: Illustrates how to use refs to get direct references to DOM elements in Stencil components.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'app-home',
})
export class AppHome {

  textInput!: HTMLInputElement;

  handleSubmit = (event: Event) => {
    event.preventDefault();
    console.log(this.textInput.value);
  }

  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <label>
          Name:
          <input type="text" ref={(el) => this.textInput = el as HTMLInputElement} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Testing Component Rendering with newSpecPage in Stencil
DESCRIPTION: Demonstrates how to use newSpecPage() to test a component's rendered HTML output. The test creates a spec page with the MyCmp component and verifies its rendered content.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Configuring Stencil Testing in TypeScript
DESCRIPTION: Example of how to configure Stencil testing options using the 'testing' property in the Stencil config file. This snippet shows how to set test path ignore patterns.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  testing: {
    testPathIgnorePatterns: [...]
  }
};

----------------------------------------

TITLE: Functional Component with Children
DESCRIPTION: Example showing how to handle children in a functional component.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Event Handling in JSX
DESCRIPTION: Demonstrates how to bind event listeners directly in JSX within Stencil components.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

----------------------------------------

TITLE: Testing a Stencil Component with JSX Template in newSpecPage
DESCRIPTION: Shows how to use the template option in newSpecPage() to initialize a component with properties using JSX syntax. This approach is useful when testing components that require specific prop values.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Basic Stencil Config in TypeScript
DESCRIPTION: A minimal example of a Stencil configuration file, setting the namespace and source directory.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Creating Mocks in TypeScript for WebdriverIO Tests
DESCRIPTION: This example demonstrates how to create mocks for both project files and external modules. It shows mocking a utility function to return a fixed value and mocking an entire external module.

LANGUAGE: typescript
CODE:
import { mock, fn } from '@wdio/browser-runner'
import { format } from './utils/utils.ts'

// mock files within the project
mock('./utils/utils.ts', () => ({
    format: fn().mockReturnValue(42)
}))
// mock whole modules and replace functionality with what is defined in `./__mocks__/leftpad.ts`
mock('leftpad')

console.log(format()) // returns `42`

----------------------------------------

TITLE: Synchronous Transpilation with Stencil Core Compiler
DESCRIPTION: Displays the function signature for transpileSync(), which is the synchronous version of transpile(), requiring TypeScript to be globally available in browser environments.

LANGUAGE: typescript
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Configuring Testing Options in stencil.config.ts
DESCRIPTION: Configuration interface showing available testing options in Stencil projects. This interface extends Jest's configuration while adding Stencil-specific options for e2e testing setup.

LANGUAGE: typescript
CODE:
https://github.com/ionic-team/stencil/blob/32811591777de726f0374649a4f5e250a0a8e355/src/declarations/stencil-public-compiler.ts#L1968-L2119

----------------------------------------

TITLE: Example Version Creation Command
DESCRIPTION: Example command showing how to create version 4.1 of the Stencil documentation using Docusaurus versioning command.

LANGUAGE: bash
CODE:
npm run docusaurus docs:version v4.1

----------------------------------------

TITLE: Listening to Events in Stencil Components
DESCRIPTION: Demonstrates how to use the @Listen decorator to handle DOM events in Stencil components. The example listens for a 'todoCompleted' custom event.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: HTML Template for E2E Testing in Stencil
DESCRIPTION: Provides an example HTML template for end-to-end testing, including the necessary script tags for loading Stencil components.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf8" />

    <!-- Replace with the path to your entrypoint -->
    <script src="../../../build/test-app.esm.js" type="module"></script>
    <script src="../../../build/test-app.js" nomodule></script>
  </head>
  <body>
    <my-component first="Stencil"></my-component>
  </body>
</html>

----------------------------------------

TITLE: Implementing a Custom Text Input as a Form-Associated Component
DESCRIPTION: This example shows a complete implementation of a custom text input as a form-associated component. It uses the @AttachInternals decorator to interact with the surrounding form and updates the form value on input changes.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Fragment Component Example in TSX
DESCRIPTION: Demonstrates using Fragment component to group elements without a wrapper node in a Stencil component render method.

LANGUAGE: tsx
CODE:
import { Component, Fragment, h } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Testing Stencil Component with JSX Template
DESCRIPTION: Shows how to use the template option in newSpecPage() to test a component with JSX syntax. It passes a greeting prop to the component and verifies the rendered output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Configuring Event Options in Stencil
DESCRIPTION: Shows how to configure event options like bubbling, cancelable, and composition using the EventOptions interface.

LANGUAGE: tsx
CODE:
export interface EventOptions {
  /**
   * A string custom event name to override the default.
   */
  eventName?: string;
  /**
   * A Boolean indicating whether the event bubbles up through the DOM or not.
   */
  bubbles?: boolean;

  /**
   * A Boolean indicating whether the event is cancelable.
   */
  cancelable?: boolean;

  /**
   * A Boolean value indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.
   */
  composed?: boolean;
}

----------------------------------------

TITLE: Using componentOnReady in TypeScript
DESCRIPTION: Example showing how to use componentOnReady() to execute code after a component's first render cycle

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Creating a Stencil Compiler Instance
DESCRIPTION: Illustrates the function signature for creating a Stencil Compiler instance. It takes a config object and returns a Promise resolving to a Compiler instance.

LANGUAGE: typescript
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config
DESCRIPTION: Configuration code to specify a custom screenshot connector in the Stencil testing config.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Basic E2E Test Setup in Stencil
DESCRIPTION: Demonstrates the basic structure of an E2E test using Stencil's testing utilities to render and verify a component.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Stencil Project Structure Example
DESCRIPTION: Shows the typical file structure for a Stencil project with E2E test files.

LANGUAGE: tree
CODE:
stencil-project-root
└── src
    └── components
        ├── my.component.tsx
        └── test <-- directory containing test files
            ├── my-component.e2e.ts
            └── my-component.e2e.html

----------------------------------------

TITLE: Writing JSX-based Stencil Component Test
DESCRIPTION: Example test case showing how to create and test a Stencil component using JSX syntax

LANGUAGE: tsx
CODE:
/** @jsx createElement */
import { expect, test } from 'vitest'

import { createElement } from '../../utils/jsx'
import './my-component.js'

test('should render the component with jsx', async () => {
    const cmp = <my-component first="Stencil" last="'Don't call me a framework' JS"></my-component>
    document.body.appendChild(cmp)
    await new Promise((resolve) => requestIdleCallback(resolve))
    expect(cmp.shadowRoot?.querySelector('div')?.innerText)
        .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)
})

----------------------------------------

TITLE: Using hydrateDocument Function in JavaScript
DESCRIPTION: This example shows how to use the hydrateDocument function in a server's response logic. It takes a document object, hydrates it, and returns the results with the hydrated HTML.

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

export function hydrateComponents(doc) {
  return hydrateDocument(doc)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: Demonstrates how to document slots in Stencil components using the @slot JSDoc tag.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: ScreenshotConnector Interface Definition
DESCRIPTION: Interface definition showing the available methods that can be overridden in a custom screenshot connector.

LANGUAGE: tsx
CODE:
https://github.com/ionic-team/stencil/blob/a2e119d059ba0d0fa6155dbd3d82c17612630828/src/declarations/stencil-private.ts#L1631-L1645

----------------------------------------

TITLE: Using Stencil Store in a Stencil Component
DESCRIPTION: Demonstrates how to use the store within a Stencil component, including updating state and rendering based on store values.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Calling a Public Method on a Stencil Component
DESCRIPTION: This snippet shows how to call a public method on a Stencil component. It uses the whenDefined method of the custom element registry to ensure the component is defined before calling the method.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Linking Packages
DESCRIPTION: Bash commands to link the Stencil package to the Angular package for local development.

LANGUAGE: bash
CODE:
# From Stencil project directory
npm link

# From Angular component library directory
npm link name-of-your-stencil-package

----------------------------------------

TITLE: Configuring Meta Tags with Stencil Prerender Config
DESCRIPTION: Example showing how to use the afterHydrate hook in Stencil's PrerenderConfig to dynamically set document title based on URL pathname during static site generation. The hook receives document and URL objects as parameters and manipulates the DOM before HTML serialization.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Resolving Asset Paths with getAssetPath in TypeScript
DESCRIPTION: Demonstrates how to use the getAssetPath function to resolve asset paths relative to the asset base path in a Stencil component.

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Getting DOM References in Stencil Components
DESCRIPTION: Shows how to use the ref attribute to get direct references to DOM elements in Stencil components.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'app-home',
})
export class AppHome {

  textInput!: HTMLInputElement;

  handleSubmit = (event: Event) => {
    event.preventDefault();
    console.log(this.textInput.value);
  }

  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <label>
          Name:
          <input type="text" ref={(el) => this.textInput = el as HTMLInputElement} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Implementing Build Constants in Stencil Component
DESCRIPTION: Example demonstrating how to use Build constants in a Stencil component to detect development/production mode and browser/server rendering environments. Requires importing Build from @stencil/core.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Subscribing User to Push Service
DESCRIPTION: JavaScript function to subscribe a user to the browser's push service, necessary for receiving push notifications.

LANGUAGE: javascript
CODE:
async function subscribeUser() {
  if ('serviceWorker' in navigator) {
    const registration = await navigator.serviceWorker.ready;

    const subscription = await registration.pushManager
      .subscribe({ userVisibleOnly: true })
      .catch(console.error);

    if (!subscription) {
      return;
    }

    // the subscription object is what we want to send to our backend
    console.log(subscription.endpoint);
  }
}

----------------------------------------

TITLE: Using Stencil Component Library Loader in TypeScript
DESCRIPTION: Shows how to import and use the loader functions from a Stencil-generated component library. This includes setting a nonce for CSP, applying polyfills, and defining custom elements.

LANGUAGE: ts
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Initializing Lerna Workspace
DESCRIPTION: Commands to initialize a Lerna workspace and install necessary dependencies.

LANGUAGE: bash
CODE:
lerna init

npm install

npm install typescript @types/node --save-dev

----------------------------------------

TITLE: Component Composition Example
DESCRIPTION: Demonstrates how to compose Stencil components by nesting them within each other using JSX syntax.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Stencil Project Structure Example
DESCRIPTION: Shows the typical file structure for a Stencil project with E2E test files.

LANGUAGE: tree
CODE:
stencil-project-root
└── src
    └── components
        ├── my.component.tsx
        └── test <-- directory containing test files
            ├── my-component.e2e.ts
            └── my-component.e2e.html

----------------------------------------

TITLE: TranspileSync Function Signature
DESCRIPTION: Synchronous version of the transpile function for immediate code transformation. Requires TypeScript to be globally available in browser environments.

LANGUAGE: tsx
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: VS Code HTML Custom Data Configuration
DESCRIPTION: JSON configuration for VS Code's html.customData setting to enable custom element support. This tells VS Code where to find the generated custom elements documentation.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Defining TestingConfig Interface in TypeScript for Stencil
DESCRIPTION: This code snippet defines the TestingConfig interface, which extends JestConfig and includes additional Stencil-specific options for e2e testing. It covers settings for screenshot comparison, browser arguments, headless mode, emulation, and more.

LANGUAGE: typescript
CODE:
export interface TestingConfig extends JestConfig {
  /**
   * The `allowableMismatchedPixels` value is used to determine an acceptable
   * number of pixels that can be mismatched before the image is considered
   * to have changes. Realistically, two screenshots representing the same
   * content may have a small number of pixels that are not identical due to
   * anti-aliasing, which is perfectly normal. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedPixels?: number;

  /**
   * The `allowableMismatchedRatio` ranges from `0` to `1` and is used to
   * determine an acceptable ratio of pixels that can be mismatched before
   * the image is considered to have changes. Realistically, two screenshots
   * representing the same content may have a small number of pixels that
   * are not identical due to anti-aliasing, which is perfectly normal. The
   * `allowableMismatchedRatio` is the number of pixels that were mismatched,
   * divided by the total number of pixels in the screenshot. For example,
   * a ratio value of `0.06` means 6% of the pixels can be mismatched before
   * the image is considered to have changes. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedRatio?: number;

  /**
   * Matching threshold while comparing two screenshots. Value ranges from `0` to `1`.
   * Smaller values make the comparison more sensitive. The `pixelmatchThreshold`
   * value helps to ignore anti-aliasing. Default: `0.1`
   */
  pixelmatchThreshold?: number;

  /**
   * Additional arguments to pass to the browser instance.
   */
  browserArgs?: string[];

  /**
   * Path to a Chromium or Chrome executable to run instead of the bundled Chromium.
   */
  browserExecutablePath?: string;

  /**
   * Whether to run browser e2e tests in headless mode.
   *
   * `headless` is an argument passed through to Puppeteer (which is passed to Chrome) for
   * end-to-end testing. Prior to Chrome v112, `headless` was treated like a boolean flag.
   * Starting with Chrome v112, 'new' is an accepted option to support Chrome's new
   * headless mode.
   *
   * The following values are accepted:
   * - "new" - enables the "new" headless mode, starting with Chrome 112
   * - `true` - enables the "old" headless mode, prior to Chrome 112
   * - `false` - enables the "headful" mode
   *
   * Stencil will default to `true` (the old headless mode) if no value is provided.
   *
   * In the future, Chrome will enable the new headless mode by default, even when `true`
   * is provided.
   *
   * {@see https://developer.chrome.com/articles/new-headless/}
   */
  browserHeadless?: boolean;

  /**
   * Whether to auto-open a DevTools panel for each tab.
   * If this option is true, the headless option will be set false
   */
  browserDevtools?: boolean;

  /**
   * Slows down e2e browser operations by the specified amount of milliseconds.
   * Useful so that you can see what is going on.
   */
  browserSlowMo?: number;

  /**
   * Array of browser emulations to be used during _screenshot_ tests. A full screenshot
   * test is run for each emulation.
   * 
   * To emulate a device display for your e2e tests, use the `setViewport` method on a test's E2E page.
   */
  emulate?: EmulateConfig[];

  /**
   * Path to the Screenshot Connector module.
   */
  screenshotConnector?: string;
}

export interface EmulateConfig {
  /**
   * Predefined device descriptor name, such as "iPhone X" or "Nexus 10".
   * For a complete list please see: https://github.com/puppeteer/puppeteer/blob/main/src/DeviceDescriptors.ts
   */
  device?: string;

  /**
   * User-Agent to be used. Defaults to the user-agent of the installed Puppeteer version.
   */
  userAgent?: string;

  viewport?: EmulateViewport;
}


export interface EmulateViewport {

  /**
   * Page width in pixels.
   */
  width: number;

  /**
   * page height in pixels.
   */
  height: number;

  /**
   * Specify device scale factor (can be thought of as dpr). Defaults to 1.
   */
  deviceScaleFactor?: number;

  /**
   * Whether the meta viewport tag is taken into account. Defaults to false.
   */
  isMobile?: boolean;

  /**
   * Specifies if viewport supports touch events. Defaults to false
   */
  hasTouch?: boolean;

  /**
   * Specifies if viewport is in landscape mode. Defaults to false.
   */
  isLandscape?: boolean;

}

----------------------------------------

TITLE: Defining TestingConfig Interface in TypeScript for Stencil
DESCRIPTION: This code snippet defines the TestingConfig interface, which extends JestConfig and includes additional Stencil-specific options for e2e testing. It covers settings for screenshot comparison, browser arguments, headless mode, emulation, and more.

LANGUAGE: typescript
CODE:
export interface TestingConfig extends JestConfig {
  /**
   * The `allowableMismatchedPixels` value is used to determine an acceptable
   * number of pixels that can be mismatched before the image is considered
   * to have changes. Realistically, two screenshots representing the same
   * content may have a small number of pixels that are not identical due to
   * anti-aliasing, which is perfectly normal. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedPixels?: number;

  /**
   * The `allowableMismatchedRatio` ranges from `0` to `1` and is used to
   * determine an acceptable ratio of pixels that can be mismatched before
   * the image is considered to have changes. Realistically, two screenshots
   * representing the same content may have a small number of pixels that
   * are not identical due to anti-aliasing, which is perfectly normal. The
   * `allowableMismatchedRatio` is the number of pixels that were mismatched,
   * divided by the total number of pixels in the screenshot. For example,
   * a ratio value of `0.06` means 6% of the pixels can be mismatched before
   * the image is considered to have changes. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedRatio?: number;

  /**
   * Matching threshold while comparing two screenshots. Value ranges from `0` to `1`.
   * Smaller values make the comparison more sensitive. The `pixelmatchThreshold`
   * value helps to ignore anti-aliasing. Default: `0.1`
   */
  pixelmatchThreshold?: number;

  /**
   * Additional arguments to pass to the browser instance.
   */
  browserArgs?: string[];

  /**
   * Path to a Chromium or Chrome executable to run instead of the bundled Chromium.
   */
  browserExecutablePath?: string;

  /**
   * Whether to run browser e2e tests in headless mode.
   *
   * `headless` is an argument passed through to Puppeteer (which is passed to Chrome) for
   * end-to-end testing. Prior to Chrome v112, `headless` was treated like a boolean flag.
   * Starting with Chrome v112, 'new' is an accepted option to support Chrome's new
   * headless mode.
   *
   * The following values are accepted:
   * - "new" - enables the "new" headless mode, starting with Chrome 112
   * - `true` - enables the "old" headless mode, prior to Chrome 112
   * - `false` - enables the "headful" mode
   *
   * Stencil will default to `true` (the old headless mode) if no value is provided.
   *
   * In the future, Chrome will enable the new headless mode by default, even when `true`
   * is provided.
   *
   * {@see https://developer.chrome.com/articles/new-headless/}
   */
  browserHeadless?: boolean;

  /**
   * Whether to auto-open a DevTools panel for each tab.
   * If this option is true, the headless option will be set false
   */
  browserDevtools?: boolean;

  /**
   * Slows down e2e browser operations by the specified amount of milliseconds.
   * Useful so that you can see what is going on.
   */
  browserSlowMo?: number;

  /**
   * Array of browser emulations to be used during _screenshot_ tests. A full screenshot
   * test is run for each emulation.
   * 
   * To emulate a device display for your e2e tests, use the `setViewport` method on a test's E2E page.
   */
  emulate?: EmulateConfig[];

  /**
   * Path to the Screenshot Connector module.
   */
  screenshotConnector?: string;
}

export interface EmulateConfig {
  /**
   * Predefined device descriptor name, such as "iPhone X" or "Nexus 10".
   * For a complete list please see: https://github.com/puppeteer/puppeteer/blob/main/src/DeviceDescriptors.ts
   */
  device?: string;

  /**
   * User-Agent to be used. Defaults to the user-agent of the installed Puppeteer version.
   */
  userAgent?: string;

  viewport?: EmulateViewport;
}


export interface EmulateViewport {

  /**
   * Page width in pixels.
   */
  width: number;

  /**
   * page height in pixels.
   */
  height: number;

  /**
   * Specify device scale factor (can be thought of as dpr). Defaults to 1.
   */
  deviceScaleFactor?: number;

  /**
   * Whether the meta viewport tag is taken into account. Defaults to false.
   */
  isMobile?: boolean;

  /**
   * Specifies if viewport supports touch events. Defaults to false
   */
  hasTouch?: boolean;

  /**
   * Specifies if viewport is in landscape mode. Defaults to false.
   */
  isLandscape?: boolean;

}

----------------------------------------

TITLE: ScreenshotConnector Interface Definition
DESCRIPTION: Interface definition showing the available methods that can be overridden in a custom screenshot connector.

LANGUAGE: tsx
CODE:
https://github.com/ionic-team/stencil/blob/a2e119d059ba0d0fa6155dbd3d82c17612630828/src/declarations/stencil-private.ts#L1631-L1645

----------------------------------------

TITLE: Configuring TypeScript for WebdriverIO and Stencil
DESCRIPTION: JSON configuration to add to tsconfig.json to resolve type clashes between WebdriverIO (Mocha) and Stencil (Jest) by preferring Jest types.

LANGUAGE: json
CODE:
"types": ["jest"]

----------------------------------------

TITLE: HTML Template for E2E Testing in Stencil
DESCRIPTION: Provides an HTML template for end-to-end testing, including the necessary script tags for loading Stencil components.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf8" />

    <!-- Replace with the path to your entrypoint -->
    <script src="../../../build/test-app.esm.js" type="module"></script>
    <script src="../../../build/test-app.js" nomodule></script>
  </head>
  <body>
    <my-component first="Stencil"></my-component>
  </body>
</html>

----------------------------------------

TITLE: Installing Playwright Dependencies for Stencil
DESCRIPTION: Commands to install the Stencil Playwright adapter and required dependencies

LANGUAGE: bash
CODE:
npm i @stencil/playwright @playwright/test --save-dev

LANGUAGE: bash
CODE:
npx playwright install

----------------------------------------

TITLE: Setting Object Props Manually in JavaScript
DESCRIPTION: This HTML and JavaScript snippet shows how to manually set object props on a Stencil component in a non-JSX environment.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Create Compiler Function Declaration
DESCRIPTION: Function signature for creating a Stencil compiler instance from a configuration object.

LANGUAGE: tsx
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Handling User Input Events
DESCRIPTION: Examples of handling user input events like clicks and input changes using arrow functions.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Defining Web Worker Functions in Stencil
DESCRIPTION: Shows how to define functions in a Stencil Web Worker file. These functions can be asynchronous and will be automatically executed in a separate thread.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Using React Component Wrappers in a React App
DESCRIPTION: Import and use the generated React component wrappers in a React application. Also, call the defineCustomElements function to register the custom elements.

LANGUAGE: tsx
CODE:
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Embedding Stencil Components
DESCRIPTION: This example shows how to embed one Stencil component within another. It demonstrates the creation of a parent component that includes a child component, passing props to the child.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Custom Rollup Plugin Configuration
DESCRIPTION: Example showing how to configure custom Rollup plugins in Stencil's config file, demonstrating proper plugin ordering.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Basic E2E Test Structure in Stencil
DESCRIPTION: Demonstrates the basic structure of an end-to-end test in Stencil using Jest and Puppeteer. It shows how to create a new E2E page, set content, and perform basic assertions.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Rendering Multiple Elements with Host in Stencil
DESCRIPTION: This example shows how to use the Host component as a fragment to render multiple elements at the root level of a Stencil component.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Custom Rollup Plugin Configuration in Stencil
DESCRIPTION: Example showing how to configure custom Rollup plugins in stencil.config.ts, demonstrating the before and after plugin injection points.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Configuring Stencil for CI/CD E2E Testing
DESCRIPTION: Demonstrates how to configure Stencil for running E2E tests in CI/CD environments, specifically for Gitlab CI, by modifying the stencil.config.ts file.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'Foo',
  testing: {
    browserArgs: ['--no-sandbox', '--disable-setuid-sandbox'],
  },
  outputTargets: [
    { type: 'dist' },
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Git Repository Initialization
DESCRIPTION: Commands to initialize version control for a new Stencil project using git.

LANGUAGE: bash
CODE:
git init
git add -A
git commit -m "initialize project using stencil cli"

----------------------------------------

TITLE: Updating @State() in Stencil Component Lifecycle
DESCRIPTION: Shows how to update a @State() decorated property within component lifecycle methods to trigger rerenders periodically.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Querying Elements in Shadow DOM
DESCRIPTION: This snippet shows how to query elements within a Shadow DOM component using the @Element decorator and shadowRoot property.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Using Worker Callbacks in a Stencil Component
DESCRIPTION: This example shows how to use a Web Worker function with callbacks in a Stencil component. It demonstrates how to pass a progress callback and handle the final result.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { countDown } from '../countdown.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {

  componentWillLoad() {
    const startNum = 5;
    console.log('start', startNum);

    countDown(startNum, (p) => {
      console.log('progress', p);
    }).then(result => {
      console.log('finish', result);
    });
  }
}

----------------------------------------

TITLE: Declaring Props in Stencil Components
DESCRIPTION: This snippet demonstrates how to declare props in a Stencil component using the @Prop() decorator.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Using Element Decorator in Stencil TSX
DESCRIPTION: This snippet shows how to use the Element decorator to access the host element within a component class.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: JSX Utility Implementation
DESCRIPTION: Utility functions for enabling JSX support in Vitest tests with Stencil components.

LANGUAGE: typescript
CODE:
export const createElement = (tag, props, ...children) => {
    if (typeof tag === 'function') {
        return tag(props, ...children)
    }
    const element = document.createElement(tag)

    Object.entries(props || {}).forEach(([name, value]) => {
        if (name.startsWith('on') && name.toLowerCase() in window) {
            element.addEventListener(name.toLowerCase().substr(2), value)
        } else {
            element.setAttribute(name, value.toString())
        }
    })

    children.forEach((child) => {
        appendChild(element, child)
    })

    return element
}

export const appendChild = (parent, child) => {
    if (Array.isArray(child)) {
        child.forEach((nestedChild) => appendChild(parent, nestedChild))
    } else {
        parent.appendChild(child.nodeType ? child : document.createTextNode(child))
    }
}

export const createFragment = (_, ...children) => {
    return children
}

----------------------------------------

TITLE: Web Worker with External Dependencies
DESCRIPTION: Demonstrates how to use external dependencies and local modules within a Stencil Web Worker.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Using Slots in Stencil Components
DESCRIPTION: Shows how to implement slot functionality for dynamic content placement in components.

LANGUAGE: tsx
CODE:
render() {
  return [
    <slot name="item-start" />,
    <h1>Here is my main content</h1>,
    <slot name="item-end" />
  ]
}

----------------------------------------

TITLE: Conditional Rendering in Stencil JSX
DESCRIPTION: Illustrates conditional rendering using if/else statements and the ternary operator in JSX.

LANGUAGE: tsx
CODE:
render() {
  if (this.name) {
    return ( <div>Hello {this.name}</div> )
  } else {
    return ( <div>Hello, World</div> )
  }
}

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
    {this.name
      ? <p>Hello {this.name}</p>
      : <p>Hello World</p>
    }
    </div>
  );
}

----------------------------------------

TITLE: Running Stencil CLI with Options in TypeScript
DESCRIPTION: Executes the Stencil CLI with given options. This function is used by the default bin/stencil file but can also be used externally.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Conditional Rendering in Stencil
DESCRIPTION: Shows different approaches for conditional rendering in Stencil components using if/else statements and ternary operators.

LANGUAGE: tsx
CODE:
render() {
  if (this.name) {
    return ( <div>Hello {this.name}</div> )
  } else {
    return ( <div>Hello, World</div> )
  }
}

----------------------------------------

TITLE: Functional Component with Children in Stencil
DESCRIPTION: Illustrates how to create a functional component that accepts and renders child elements.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Creating a Stencil Compiler Instance
DESCRIPTION: Shows the function signature for creating a Stencil Compiler instance. It takes a Config object and returns a Promise resolving to a Compiler instance.

LANGUAGE: typescript
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Creating Vue Plugin for Custom Elements Registration
DESCRIPTION: Create a Vue plugin to register the custom elements for lazy-loading.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Running Stencil CLI with Options in TypeScript
DESCRIPTION: Executes the Stencil CLI with given options. This function is used by the default bin/stencil file but can also be used externally.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Basic State Usage in Stencil Component
DESCRIPTION: Basic example showing how to use @State() decorator to track current time in a component. Demonstrates initial state setup but without updates.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Using Skip Function in Playwright Tests
DESCRIPTION: Demonstrates how to use the skip function to conditionally skip tests based on browser type or component mode.

LANGUAGE: typescript
CODE:
test('my-test', ({ page, skip }) => {
    // Skip tests for certain browsers
    skip.browser('firefox', 'This behavior is not available on Firefox');

    // Skip tests for certain modes
    skip.mode('md', 'This behavior is not available in Material Design');

    ...
})

----------------------------------------

TITLE: Importing and Registering Standalone Stencil Components
DESCRIPTION: Demonstrates how to import and register standalone Stencil components using the 'dist-custom-elements' output target.

LANGUAGE: typescript
CODE:
import { MyComponent, defineCustomElementMyComponent } from 'my-design-system'

// register to CustomElementRegistry
defineCustomElementMyComponent()

// or extend custom element via
class MyCustomComponent extends MyComponent {
  // ...
}
define('my-custom-component', MyCustomComponent)

----------------------------------------

TITLE: Basic Form Implementation in Stencil
DESCRIPTION: Demonstrates a simple form component with a single text input field. Shows how to handle form submission and input changes using state management.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Custom Destination Copy Task Configuration
DESCRIPTION: Example demonstrating how to set a custom destination path for copied files using the dest property, copying from src/files/fonts to public/static/web-fonts.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]

----------------------------------------

TITLE: Configuring package.json for Stencil Component Library Distribution
DESCRIPTION: This JSON snippet demonstrates a common setup for a package.json file in a Stencil project, configured for optimal distribution. It includes various entry points for different module formats, type definitions, and specifies files to be included in the npm release.

LANGUAGE: json
CODE:
{
  "main": "dist/index.cjs.js",
  "module": "dist/index.js",
  "es2015": "dist/esm/index.mjs",
  "es2017": "dist/esm/index.mjs",
  "types": "dist/types/components.d.ts",
  "unpkg": "dist/my-project-name/my-project-name.esm.js",
  "collection:main": "dist/collection/index.js",
  "collection": "dist/collection/collection-manifest.json",
  "files": [
    "dist/",
    "css/",
    "loader/"
  ]
}

----------------------------------------

TITLE: Reflecting Props to Attributes in Stencil
DESCRIPTION: Shows how to use the reflect option to keep a prop in sync with an HTML attribute.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop({ reflect: false }) isComplete: boolean = false;
    @Prop({ reflect: true }) timesCompletedInPast: number = 2;
    @Prop({ reflect: true }) thingToDo: string = "Read Reflect Section of Stencil Docs";
}

----------------------------------------

TITLE: Dynamic State Updates with Lifecycle Methods
DESCRIPTION: Shows how to implement dynamic state updates using lifecycle methods connectedCallback and disconnectedCallback with proper interval cleanup.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: Example of how to add the dist-custom-elements output target to a Stencil project's configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Implementing Custom Text Input with Form Association
DESCRIPTION: Complete implementation of a custom text input component that integrates with HTML forms using ElementInternals. Demonstrates value management and form interaction.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals, State } from '@stencil/core';

@Component({
  tag: 'custom-text-input',
  shadow: true,
  formAssociated: true
})
export class CustomTextInput {
  @State() value: string;

  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.value = event.target.value;
    this.internals.setFormValue(event.target.value);
  }

  componentWillLoad() {
    this.internals.setFormValue("a default value");
  }

  render() {
    return (
      <input
        type="text"
        value={this.value}
        onInput={(event) => this.handleChange(event)}
      />
    )
  }
}

----------------------------------------

TITLE: Advanced Screenshot Comparison Test in Stencil
DESCRIPTION: Comprehensive example of a screenshot comparison test in Stencil, including global styles, multiple assertions, and different comparison methods.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    // In order to test against any global styles you may have, don't forget to set the link to the global css. You don't have to do this if your stencil.config.ts file doesn't build a global css file with globalStyle.
    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    // To start comparing the visual result, you first must run page.compareScreenshot; This will capture a screenshot, and save the file to "/screenshot/images". You'll be able to check that into your repo to provide those results to your team. You can only have one of these commands per test. 
    const results = await page.compareScreenshot();

    // Finally, we can test against the previous screenshots. 
    // Test against hard pixels
    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    // Test against the percentage of changes. if 'allowableMismatchedRatio' is above 20% changed, 
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Reflecting Props to Attributes in Stencil Components
DESCRIPTION: Example of reflecting props to attributes in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop({ reflect: false }) isComplete: boolean = false;
    @Prop({ reflect: true }) timesCompletedInPast: number = 2;
    @Prop({ reflect: true }) thingToDo: string = "Read Reflect Section of Stencil Docs";
}

----------------------------------------

TITLE: Mutable Props in Stencil
DESCRIPTION: This snippet demonstrates how to declare a mutable prop in a Stencil component.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class ToDoListItem {
   @Prop({ mutable: true }) thingToDo: string;

   componentDidLoad() {
      this.thingToDo = 'Ah! A new value!';
   }
}

----------------------------------------

TITLE: Requesting Notification Permissions
DESCRIPTION: Code snippet demonstrating how to request notification permissions from the user.

LANGUAGE: javascript
CODE:
if ('Notification' in window && 'serviceWorker' in navigator) {
  Notification.requestPermission(status => {
    // status will either be 'default', 'granted' or 'denied'
    console.log(`Notification permissions have been ${status}`);
  });
}

----------------------------------------

TITLE: CSS Custom Properties Implementation
DESCRIPTION: Demonstration of CSS custom properties usage for component customization and style configuration.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Conditional Rendering in Stencil
DESCRIPTION: Shows different approaches for conditional rendering in Stencil components using if/else statements and ternary operators.

LANGUAGE: tsx
CODE:
render() {
  if (this.name) {
    return ( <div>Hello {this.name}</div> )
  } else {
    return ( <div>Hello, World</div> )
  }
}

----------------------------------------

TITLE: Configuring Basic Project Structure
DESCRIPTION: Shows the recommended monorepo folder structure for a Stencil-React integration project.

LANGUAGE: plaintext
CODE:
top-most-directory/
└── packages/
    ├── stencil-library/
    │   ├── stencil.config.js
    │   └── src/components/
    └── react-library/
        └── src/
            ├── components/
            └── index.ts

----------------------------------------

TITLE: Initializing Stencil Project with CLI
DESCRIPTION: Command to run the create-stencil CLI for scaffolding a new Stencil project. This command prompts the user to select a starter project type.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Handling Service Worker Updates in Stencil Component
DESCRIPTION: Demonstrates how to listen for service worker updates and present a toast notification to the user, allowing them to reload for the latest version.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    // If there is no waiting registration, this is the first service
    // worker being installed.
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Implementing Private Methods in Stencil Components
DESCRIPTION: Demonstrates how to implement private methods in Stencil components that don't require the @Method decorator or async/Promise return types. These methods can be used for internal component logic.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Configuring Angular Output Target in Stencil
DESCRIPTION: Add the angularOutputTarget configuration to the Stencil config file to generate Angular component wrappers.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Using a Functional Component with Props in Stencil JSX
DESCRIPTION: Shows how to use a functional component in JSX, passing props as attributes.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Component Hierarchy Example in Stencil
DESCRIPTION: Shows the component hierarchy and order of lifecycle method execution for nested components.

LANGUAGE: markup
CODE:
  <cmp-a>
    <cmp-b>
      <cmp-c></cmp-c>
    </cmp-b>
  </cmp-a>

----------------------------------------

TITLE: Demonstrating connectedCallback and componentWillLoad in Stencil
DESCRIPTION: This snippet shows how connectedCallback and componentWillLoad are called when a component is added to the DOM. It illustrates that connectedCallback can be called multiple times, while componentWillLoad is only called once.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Testing Component Class Logic in TypeScript
DESCRIPTION: Shows how to test component class logic directly by instantiating the component class and testing its methods and properties.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: E2E Test HTML Template
DESCRIPTION: HTML template for end-to-end testing of Stencil components with proper script imports.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf8" />

    <!-- Replace with the path to your entrypoint -->
    <script src="../../../build/test-app.esm.js" type="module"></script>
    <script src="../../../build/test-app.js" nomodule></script>
  </head>
  <body>
    <my-component first="Stencil"></my-component>
  </body>
</html>

----------------------------------------

TITLE: Parsing Command Line Arguments
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object. Typically used with process.argv.slice(2) to handle CLI arguments.

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Prop Types in Stencil Components
DESCRIPTION: Shows various prop types that can be used in Stencil components, including boolean, number, string, and objects.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() isComplete: boolean;
    @Prop() timesCompletedInPast: number;
    @Prop() thingToDo: string;
    @Prop() myHttpService: MyHttpService;
}

----------------------------------------

TITLE: Testing Component with JSX Template in TSX
DESCRIPTION: Demonstrates testing a Stencil component using JSX template syntax in a TSX file. Shows how to test component with props passed through JSX.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Mocking a Library in Stencil with TypeScript
DESCRIPTION: This snippet demonstrates how to create a mock for a library imported from node_modules, specifically for the 'md5' package. It creates a simple mock that returns a fixed string instead of calculating a hash.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Using WebdriverIO Matchers for Assertions in Stencil Component Tests
DESCRIPTION: Illustrates the recommended approach for making assertions in WebdriverIO tests using WebdriverIO-specific matchers. These matchers allow for retries and make tests more resilient against flakiness.

LANGUAGE: typescript
CODE:
await expect($('my-component'))
    .toHaveText(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)

----------------------------------------

TITLE: Jest Test with File-based Mock in TypeScript
DESCRIPTION: Shows how to use Jest's mocking functionality with a file-based mock implementation.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Generating JSON Docs via CLI in Stencil
DESCRIPTION: Command to generate JSON documentation using the Stencil CLI. This creates a JSON file with component documentation at the specified path.

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Defining a Helper Function in Stencil with TypeScript
DESCRIPTION: This code defines a helper function 'getRandomInt' that generates a random integer between a minimum and maximum value. It's used to demonstrate mocking of custom code.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Event Listen Decorator Implementation
DESCRIPTION: Shows how to use the @Listen decorator to handle DOM events and custom events emitted by child components.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Documenting Component Properties with TypeScript Decorators
DESCRIPTION: Example showing how to add documentation to Stencil component properties using JSDoc comments with the @Prop decorator. This demonstrates the preferred way to document optional properties with descriptive comments.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Rendering Stencil Components for Testing
DESCRIPTION: Example showing how to render and test a Stencil component using WebdriverIO's browser runner. The test validates the component's text content and demonstrates proper component mounting.

LANGUAGE: typescript
CODE:
import { render } from '@wdio/browser-runner/stencil';
import { MyComponent } from './my-component';

describe('MyComponent', () => {
    it('renders', async () => {
        await render({
            components: [MyComponent],
            template: () => (
                <my-component first="Stencil" last="'Don't call me a framework' JS" />
            )
        });

        await expect($('my-component'))
            .toHaveText(`Hello, World! I'm Stencil 'Don't call me a framework' JS`);
    });
});

----------------------------------------

TITLE: Complex E2E Test Example with Toggle Component
DESCRIPTION: Shows a more complex E2E test that includes event spying, property manipulation, and class assertions.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Initializing WebdriverIO Project in Bash
DESCRIPTION: Command to initiate WebdriverIO's configuration wizard for project setup. It walks through options for testing type and framework selection.

LANGUAGE: bash
CODE:
npm init wdio@latest .

----------------------------------------

TITLE: Configuring Rollup Plugins for Stencil
DESCRIPTION: This snippet shows how to add custom Rollup plugins to a Stencil project. It demonstrates injecting plugins before node-resolve and after commonjs transform using the rollupPlugins configuration option.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Using Host Component in Stencil
DESCRIPTION: Demonstrates how to use the Host component to set attributes and event listeners on the host element. Shows conditional rendering of attributes based on component props.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Creating a Stencil Compiler Instance
DESCRIPTION: Shows the signature of the createCompiler() function, which creates a Compiler instance given a Config object. This is used for full builds of Stencil components.

LANGUAGE: tsx
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: E2E Test Using page.goto()
DESCRIPTION: Example of writing an end-to-end test using the page.goto() pattern to load a pre-defined HTML template.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // The path here is the path to the www output relative to the dev server root directory
    await page.goto('/components/my-component/test/my-component.e2e.html');

    // Rest of test
    const component = await page.locator('my-component');
    await expect(component).toHaveText(`Hello World! I'm Stencil`);
  });
});

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Prerendering
DESCRIPTION: This JSON configuration sets up VS Code to debug the Stencil prerendering process. It specifies the Node.js runtime, the Stencil CLI command for prerendering, and various arguments including the path to the hydrate script and the Stencil config file.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "node",
      "request": "launch",
      "name": "Prerender",
      "args": [
        "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
        "prerender",
        "${workspaceFolder}/dist/hydrate/index.js",
        "--max-workers=0",
        "--config=${workspaceFolder}/stencil.config.ts"
      ],
      "protocol": "inspector"
    }
  ]
}

----------------------------------------

TITLE: Using Web Worker Functions in a Stencil Component
DESCRIPTION: Demonstrates how to import and use Web Worker functions in a Stencil component. The functions are called as if they were regular async functions, but they execute in a separate thread.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Defining Global Styles in Stencil Project
DESCRIPTION: Shows how to define global styles using CSS custom properties in a global.css file.

LANGUAGE: css
CODE:
:root {
  --color-primary: blue;
}

----------------------------------------

TITLE: Configuring Playwright Tests for Stencil
DESCRIPTION: Example showing how to create and customize a Playwright test configuration for Stencil components. Demonstrates overriding default settings while maintaining core functionality.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

expect.extend(matchers);

export default createConfig({
  // Change which test files Playwright will execute
  testMatch: '*.spec.ts',

  webServer: {
    // Only wait max 30 seconds for server to start
    timeout: 30000,
  },
});

----------------------------------------

TITLE: Variable Casing and Props
DESCRIPTION: Example showing camelCase property naming and usage in components

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() thingToDo: string;

    render() {
        return <div>{this.thingToDo}</div>;
    }
}

----------------------------------------

TITLE: Using Scoped CSS in Stencil Component
DESCRIPTION: Shows how to use scoped CSS instead of Shadow DOM by setting the 'scoped' option to true in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'scoped-component',
  styleUrl: 'scoped-component.css',
  scoped: true,
})
export class ScopedComponent {}

----------------------------------------

TITLE: Importing Test Function - Stencil Playwright
DESCRIPTION: Demonstrates the correct way to import the test function from @stencil/playwright rather than @playwright/test for proper web component hydration support.

LANGUAGE: typescript
CODE:
// THIS IS CORRECT
import { test } from '@stencil/playwright';

// THIS IS NOT!!
// import { test } from '@playwright/test';

----------------------------------------

TITLE: Importing Dependencies in Stencil Web Workers
DESCRIPTION: Shows how to import both npm dependencies and local modules within a Stencil Web Worker, which are automatically bundled by the compiler.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Creating NodeJS System for Stencil Compiler
DESCRIPTION: Creates a system based on NodeJS APIs for file operations and cryptographic hashing. It requires the NodeJS 'process' object as an argument.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Creating and Exporting a Stencil Store
DESCRIPTION: Example of creating a store with initial state and defining an onChange handler for derived state.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Configuring Root TypeScript Settings
DESCRIPTION: Base TypeScript configuration for the monorepo root directory with common compiler options

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Defining Props in Stencil Component
DESCRIPTION: Demonstrates how to define object and array props in a Stencil component using the @Prop decorator.

LANGUAGE: typescript
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Configuring Stencil Output Target for VS Code Integration
DESCRIPTION: Configuration setup in stencil.config.ts to enable the docs-vscode output target. This generates a JSON file containing custom element information that VS Code can use for enhanced IDE features.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Basic Workbox Service Worker Configuration in Stencil
DESCRIPTION: Default configuration for generating a service worker using Workbox in a Stencil project. Defines glob patterns for asset caching.

LANGUAGE: typescript
CODE:
{
  globPatterns: [
    '**/*.{js,css,json,html}'
  ]
};

----------------------------------------

TITLE: Disabling Service Worker in Stencil
DESCRIPTION: Configuration to disable service worker generation in Stencil builds.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Stencil Config with Copy Tasks
DESCRIPTION: Configuration example showing how to set up copy tasks for assets in Stencil config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
};

----------------------------------------

TITLE: Mocking a Helper Function in TypeScript
DESCRIPTION: Creation of a mock for the getRandomInt helper function. This mock always returns 42 instead of a random number.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Using a Stencil Component in HTML
DESCRIPTION: Example of how to use a Stencil component in HTML markup. This demonstrates passing properties to the component.

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Creating Node Logger for Stencil Compiler in TypeScript
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the compiler and dev-server. It requires the NodeJS 'process' object as an argument.

LANGUAGE: typescript
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Setting Custom Elements Export Behavior in Stencil Config
DESCRIPTION: This snippet demonstrates how to set the 'customElementsExportBehavior' option in the Stencil config file. This option controls how components are exported and defined, with various behaviors available.

LANGUAGE: typescript
CODE:
// stencil.config.ts
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      customElementsExportBehavior: 'default' | 'auto-define-custom-elements' | 'bundle' | 'single-export-module',
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Optimizing CSS with Stencil Compiler
DESCRIPTION: Displays the function signature for optimizing CSS using the Stencil Compiler's utility function.

LANGUAGE: typescript
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Using Skip Function in Playwright Tests with Stencil
DESCRIPTION: Shows how to use the skip function provided by the Stencil Playwright adapter to conditionally skip tests based on browser type or component mode.

LANGUAGE: typescript
CODE:
test('my-test', ({ page, skip }) => {
    // Skip tests for certain browsers
    skip.browser('firefox', 'This behavior is not available on Firefox');

    // Skip tests for certain modes
    skip.mode('md', 'This behavior is not available in Material Design');

    ...
})

----------------------------------------

TITLE: Setting Global Styles in Stencil Config
DESCRIPTION: Shows how to configure global styles in the Stencil config file to make styles available to all components in the project.

LANGUAGE: tsx
CODE:
export const config: Config = {
  namespace: 'app',
  globalStyle: 'src/global/global.css',
  outputTarget: [
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Using Skip Function in Playwright Tests with Stencil
DESCRIPTION: Shows how to use the skip function provided by the Stencil Playwright adapter to conditionally skip tests based on browser type or component mode.

LANGUAGE: typescript
CODE:
test('my-test', ({ page, skip }) => {
    // Skip tests for certain browsers
    skip.browser('firefox', 'This behavior is not available on Firefox');

    // Skip tests for certain modes
    skip.mode('md', 'This behavior is not available in Material Design');

    ...
})

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: Example of how to add the dist-custom-elements output target to a Stencil project's configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Rendering Stencil Components for Testing
DESCRIPTION: Example showing how to render and test a Stencil component using WebDriverIO's browser runner. The test validates the component's text content using async matchers.

LANGUAGE: typescript
CODE:
render({
    components: [ComponentA, ComponentB, ComponentC, ComponentD],
    template: () => <component-a first="Stencil" last="'Don't call me a framework' JS" />
});

----------------------------------------

TITLE: Starting Stencil Dev Server in TypeScript
DESCRIPTION: This function starts the Stencil development server. It takes a configuration object, a logger, and an optional compiler watcher as parameters. It returns a Promise that resolves to a DevServer instance.

LANGUAGE: typescript
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Implementing formStateRestoreCallback in Stencil
DESCRIPTION: This example shows how to use the formStateRestoreCallback to restore a component's state, including both form value and visual state, when the browser auto-fills or restores a form.

LANGUAGE: typescript
CODE:
import { Component, h, State, AttachInternals } from '@stencil/core';

@Component({
  tag: 'fa-date-picker',
  formAssociated: true,
})
export class MyDatePicker {
  @State() value: string = "";
  @State() view: "weeks" | "months" = "weeks";

  @AttachInternals()
  internals: ElementInternals;

  onInputChange(e) {
    e.preventDefault();
    const date = e.target.value;
    this.setValue(date);
  }

  setValue(date: string) {
    // second 'state' parameter is used to store both
    // the input value (`date`) _and_ the current view
    this.internals.setFormValue(date, `${date}#${this.view}`);
  }

  formStateRestoreCallback(state, _mode) {
    const [date, view] = state.split("#");
    this.view = view;
    this.setValue(date);
  }

  render() {
    return <div>
      Mock Date Picker, mode: {this.view}
      <input class="date-picker" onChange={e => this.onInputChange(e)}></input>
    </div>
  }
}

----------------------------------------

TITLE: Custom Service Worker Implementation with Workbox
DESCRIPTION: Example of a custom service worker implementation using Workbox, including precaching configuration and update handling.

LANGUAGE: typescript
CODE:
importScripts('workbox-v4.3.1/workbox-sw.js');

self.addEventListener("message", ({ data }) => {
  if (data === "skipWaiting") {
    self.skipWaiting();
  }
});

self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Configuring WWW Output Target in Stencil
DESCRIPTION: Basic configuration example for setting up the www output target in a Stencil project. This is the default output target if none is specified and is useful for both webapp development and component library testing.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Loading Stencil Component via ES Module Import
DESCRIPTION: Shows how to load Stencil components using ES Modules in an HTML file. This approach allows for more modern JavaScript practices and better performance.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Using componentOnReady() in TypeScript
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code after a component's first render cycle. This method returns a promise that resolves after componentDidRender() on the initial render.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Configuring Testing Options in stencil.config.ts
DESCRIPTION: Reference to the TypeScript interface definitions for Stencil's testing configuration options. The code shows the structure for configuring Jest and e2e testing settings in a Stencil project.

LANGUAGE: typescript
CODE:
https://github.com/ionic-team/stencil/blob/32811591777de726f0374649a4f5e250a0a8e355/src/declarations/stencil-public-compiler.ts#L1968-L2119

----------------------------------------

TITLE: Defining Stencil Testing Configuration Interface in TypeScript
DESCRIPTION: This code snippet defines the TestingConfig interface which extends JestConfig. It includes various properties for configuring e2e tests, such as pixel matching thresholds, browser arguments, and emulation settings.

LANGUAGE: typescript
CODE:
export interface TestingConfig extends JestConfig {
  /**
   * The `allowableMismatchedPixels` value is used to determine an acceptable
   * number of pixels that can be mismatched before the image is considered
   * to have changes. Realistically, two screenshots representing the same
   * content may have a small number of pixels that are not identical due to
   * anti-aliasing, which is perfectly normal. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedPixels?: number;

  /**
   * The `allowableMismatchedRatio` ranges from `0` to `1` and is used to
   * determine an acceptable ratio of pixels that can be mismatched before
   * the image is considered to have changes. Realistically, two screenshots
   * representing the same content may have a small number of pixels that
   * are not identical due to anti-aliasing, which is perfectly normal. The
   * `allowableMismatchedRatio` is the number of pixels that were mismatched,
   * divided by the total number of pixels in the screenshot. For example,
   * a ratio value of `0.06` means 6% of the pixels can be mismatched before
   * the image is considered to have changes. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedRatio?: number;

  /**
   * Matching threshold while comparing two screenshots. Value ranges from `0` to `1`.
   * Smaller values make the comparison more sensitive. The `pixelmatchThreshold`
   * value helps to ignore anti-aliasing. Default: `0.1`
   */
  pixelmatchThreshold?: number;

  /**
   * Additional arguments to pass to the browser instance.
   */
  browserArgs?: string[];

  /**
   * Path to a Chromium or Chrome executable to run instead of the bundled Chromium.
   */
  browserExecutablePath?: string;

  /**
   * Whether to run browser e2e tests in headless mode.
   *
   * `headless` is an argument passed through to Puppeteer (which is passed to Chrome) for
   * end-to-end testing. Prior to Chrome v112, `headless` was treated like a boolean flag.
   * Starting with Chrome v112, 'new' is an accepted option to support Chrome's new
   * headless mode.
   *
   * The following values are accepted:
   * - "new" - enables the "new" headless mode, starting with Chrome 112
   * - `true` - enables the "old" headless mode, prior to Chrome 112
   * - `false` - enables the "headful" mode
   *
   * Stencil will default to `true` (the old headless mode) if no value is provided.
   *
   * In the future, Chrome will enable the new headless mode by default, even when `true`
   * is provided.
   *
   * {@see https://developer.chrome.com/articles/new-headless/}
   */
  browserHeadless?: boolean;

  /**
   * Whether to auto-open a DevTools panel for each tab.
   * If this option is true, the headless option will be set false
   */
  browserDevtools?: boolean;

  /**
   * Slows down e2e browser operations by the specified amount of milliseconds.
   * Useful so that you can see what is going on.
   */
  browserSlowMo?: number;

  /**
   * Array of browser emulations to be used during _screenshot_ tests. A full screenshot
   * test is run for each emulation.
   * 
   * To emulate a device display for your e2e tests, use the `setViewport` method on a test's E2E page.
   */
  emulate?: EmulateConfig[];

  /**
   * Path to the Screenshot Connector module.
   */
  screenshotConnector?: string;
}

export interface EmulateConfig {
  /**
   * Predefined device descriptor name, such as "iPhone X" or "Nexus 10".
   * For a complete list please see: https://github.com/puppeteer/puppeteer/blob/main/src/DeviceDescriptors.ts
   */
  device?: string;

  /**
   * User-Agent to be used. Defaults to the user-agent of the installed Puppeteer version.
   */
  userAgent?: string;

  viewport?: EmulateViewport;
}


export interface EmulateViewport {

  /**
   * Page width in pixels.
   */
  width: number;

  /**
   * page height in pixels.
   */
  height: number;

  /**
   * Specify device scale factor (can be thought of as dpr). Defaults to 1.
   */
  deviceScaleFactor?: number;

  /**
   * Whether the meta viewport tag is taken into account. Defaults to false.
   */
  isMobile?: boolean;

  /**
   * Specifies if viewport supports touch events. Defaults to false
   */
  hasTouch?: boolean;

  /**
   * Specifies if viewport is in landscape mode. Defaults to false.
   */
  isLandscape?: boolean;

}

----------------------------------------

TITLE: Rendering Complex Template Content in Stencil
DESCRIPTION: Shows how to render multiple top-level elements using an array or Fragment in Stencil components.

LANGUAGE: tsx
CODE:
render() {
  return ([
  <div class="container">
    <ul>
      <li>Item 1</li>
      <li>Item 2</li>
      <li>Item 3</li>
    </ul>
  </div>,

  <div class="another-container">
    ... more html content ...
  </div>
  ]);
}

LANGUAGE: tsx
CODE:
import { Fragment } from '@stencil/core';
...
render() {
  return (<Fragment>
    <div class="container">
      <ul>
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
      </ul>
    </div>

    <div class="another-container">
      ... more html content ...
    </div>
  </Fragment>);
}

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project by configuring the sass plugin in the Stencil config file. It imports the necessary dependencies and adds the sass plugin to the plugins array.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Initializing a Stencil Project with create-stencil CLI
DESCRIPTION: Command to run the create-stencil CLI for scaffolding a new Stencil project. This interactive CLI allows you to choose the type of project to start.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Configuring Value Accessor Bindings
DESCRIPTION: TypeScript code to configure value accessor bindings for form components.

LANGUAGE: typescript
CODE:
const angularValueAccessorBindings: ValueAccessorConfig[] = [
  {
    elementSelectors: ['my-input[type=text]'],
    event: 'myChange',
    targetAttr: 'value',
    type: 'text',
  },
];

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    angularOutputTarget({
      componentCorePackage: 'component-library',
      directivesProxyFile: '{path to your proxy file}',
      valueAccessorConfigs: angularValueAccessorBindings,
    }),
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
  ],
};

----------------------------------------

TITLE: State with Event Listening
DESCRIPTION: Demonstrates combining @State with @Listen decorator to create an interactive toggle button component that responds to click events.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Defining CSS Custom Properties in Stencil
DESCRIPTION: Demonstrates how to define and use CSS custom properties (CSS variables) in a Stencil component.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Configuring Stencil Testing Options
DESCRIPTION: Example of configuring test options in Stencil's config file using the testing property.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  testing: {
    testPathIgnorePatterns: [...]
  }
};

----------------------------------------

TITLE: Subscribing User to Push Notifications (JavaScript)
DESCRIPTION: Function to subscribe a user to push notifications using the browser's push service.

LANGUAGE: javascript
CODE:
async function subscribeUser() {
  if ('serviceWorker' in navigator) {
    const registration = await navigator.serviceWorker.ready;

    const subscription = await registration.pushManager
      .subscribe({ userVisibleOnly: true })
      .catch(console.error);

    if (!subscription) {
      return;
    }

    // the subscription object is what we want to send to our backend
    console.log(subscription.endpoint);
  }
}

----------------------------------------

TITLE: Customizing README Footer
DESCRIPTION: Add a custom footer to the generated README files by specifying the footer property in the output target configuration.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Using Slots in Stencil Components
DESCRIPTION: Illustrates how to use slots to allow dynamic child content in Stencil components.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
      <h2>A Component</h2>
      <div><slot /></div>
    </div>
  );
}

----------------------------------------

TITLE: Valid and Invalid Public Method Definitions in Stencil
DESCRIPTION: This snippet illustrates valid and invalid ways to define public methods using the @Method decorator in Stencil. Public methods must be async or return a Promise.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Using Slots in Stencil Components
DESCRIPTION: Explains how to use slots to render dynamic children in specific locations within a component.

LANGUAGE: tsx
CODE:
// my-component.tsx

render() {
  return (
    <div>
      <h2>A Component</h2>
      <div><slot /></div>
    </div>
  );
}

LANGUAGE: tsx
CODE:
render(){
  return(
    <my-component>
      <p>Child Element</p>
    </my-component>
  )
}

----------------------------------------

TITLE: Running Individual Stencil Tasks in TypeScript
DESCRIPTION: Executes individual tasks for Stencil, requiring NodeJS process, Stencil config, and task command. An optional system parameter can be provided for compiler use.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Creating Monorepo Project Structure
DESCRIPTION: Shows the recommended monorepo folder structure for a Stencil component library with Vue wrappers.

LANGUAGE: plaintext
CODE:
top-most-directory/
└── packages/
    ├── vue-library/
    │   └── lib/
    │       ├── plugin.ts
    │       └── index.ts
    └── stencil-library/
        ├── stencil.config.js
        └── src/components

----------------------------------------

TITLE: Updating Arrays Immutably in Stencil Components
DESCRIPTION: Shows how to update arrays immutably in Stencil components to trigger @Watch and component re-renders. It uses the spread operator to create a new array reference when adding items.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Importing Stencil Compiler in NodeJS
DESCRIPTION: Shows how to import the Stencil compiler in a NodeJS environment using CommonJS syntax.

LANGUAGE: tsx
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Dynamic State Updates with Lifecycle Methods
DESCRIPTION: Shows how to update @State() decorated properties using lifecycle methods to create a live-updating time display.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Installing @stencil/store with npm or yarn
DESCRIPTION: Command to install @stencil/store as a dev dependency in a project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Consuming React Wrapper Components
DESCRIPTION: This snippet demonstrates how to use the React wrapper components in a React application. It imports a component and the defineCustomElements function from the React library.

LANGUAGE: typescript
CODE:
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Implementing Basic Form in Stencil Component
DESCRIPTION: This snippet demonstrates a basic form implementation in a Stencil component. It shows how to handle form submission, manage input state, and bind event handlers.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Configuring NPM Scripts for Stencil Testing
DESCRIPTION: Example NPM scripts for running different types of Stencil tests, including unit tests, watched unit tests, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Documenting Component Properties in Stencil (TSX)
DESCRIPTION: Demonstrates how to add a description to a @Prop in Stencil using JSDoc comments. This example shows how to document an optional icon property.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Data Flow with Stencil Props
DESCRIPTION: This snippet demonstrates how data flows from a parent component to child components using props in Stencil.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
})
export class TodoList {
  render() {
    return (
      <div>
        <h1>To-Do List Name: Stencil To Do List</h1>
        <ul> 
           <todo-list-item thingToDo={"Learn about Stencil Props"}></todo-list-item>
           <todo-list-item thingToDo={"Write some Stencil Code with Props"}></todo-list-item>
           <todo-list-item thingToDo={"Dance Party"}></todo-list-item>
        </ul>
      </div>
    )
  }
}

----------------------------------------

TITLE: Illustrating Component Lifecycle Hierarchy in Stencil
DESCRIPTION: This markup snippet shows a simple component hierarchy to demonstrate the order in which lifecycle methods are called across parent and child components.

LANGUAGE: markup
CODE:
  <cmp-a>
    <cmp-b>
      <cmp-c></cmp-c>
    </cmp-b>
  </cmp-a>

----------------------------------------

TITLE: Root TypeScript Configuration
DESCRIPTION: Base TypeScript configuration for the monorepo workspace

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Creating a Stencil Compiler Instance
DESCRIPTION: Illustrates the function for creating a Stencil compiler instance. It takes a Config object and returns a Promise resolving to a Compiler instance.

LANGUAGE: typescript
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Event Handling in Stencil Components
DESCRIPTION: Examples of handling user input events like clicks and input changes using arrow functions.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Documenting Component Properties in Stencil TypeScript
DESCRIPTION: Example showing how to add descriptive documentation to Stencil component properties using JSDoc comments above @Prop decorators.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Data Binding in Stencil JSX
DESCRIPTION: Demonstrates how to bind dynamic data in JSX using curly braces syntax.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

----------------------------------------

TITLE: Accessing Typed Stencil Component in TypeScript
DESCRIPTION: Demonstrates how to use the automatically generated HTML element interface for a Stencil component. This example shows accessing an ion-button element with strong typing.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Global Script Configuration in JavaScript
DESCRIPTION: An example of how to define a global script in the Stencil configuration, which runs once before the app loads.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: Configuring Angular Output Target in Stencil Config
DESCRIPTION: Add the angularOutputTarget configuration to the outputTargets array in the Stencil project's config file. This setup generates Angular component wrappers for the Stencil components.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Using Fragment in Stencil Component Render
DESCRIPTION: Demonstrates the use of Fragment to group elements without a wrapper node in a Stencil component's render function. This requires specific TypeScript compiler options to be set.

LANGUAGE: typescript
CODE:
import { Component, Fragment, h } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Configuring Value Accessor Bindings
DESCRIPTION: Example configuration for integrating Stencil components with Angular forms and ngModel

LANGUAGE: typescript
CODE:
const angularValueAccessorBindings: ValueAccessorConfig[] = [
  {
    elementSelectors: ['my-input[type=text]'],
    event: 'myChange',
    targetAttr: 'value',
    type: 'text',
  },
];

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    angularOutputTarget({
      componentCorePackage: 'component-library',
      directivesProxyFile: '{path to your proxy file}',
      valueAccessorConfigs: angularValueAccessorBindings,
    }),
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
  ],
};

----------------------------------------

TITLE: Rendering Basic JSX in Stencil Component
DESCRIPTION: Demonstrates the basic structure of a Stencil component using JSX to render a simple div with child elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Comprehensive Toggle Component E2E Test
DESCRIPTION: Shows a complete E2E test example for an ion-toggle component, testing class presence and event emission.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Defining Stencil Component Class in TypeScript
DESCRIPTION: This snippet shows how to properly define a Stencil component class in TypeScript, including the @Component decorator and the class name without a prefix.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-button'
})
export class Button { ... }

@Component({
  tag: 'ion-menu'
})
export class Menu { ... }

----------------------------------------

TITLE: Starting Stencil Dev Server in TypeScript
DESCRIPTION: The start() function initializes the Stencil development server. It takes a StencilDevServerConfig object, a Logger instance, and an optional CompilerWatcher as parameters. The function returns a Promise that resolves to a DevServer instance.

LANGUAGE: typescript
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Using Scoped CSS in Stencil Component
DESCRIPTION: Shows how to enable scoped CSS for a Stencil component by setting the 'scoped' option to true in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'scoped-component',
  styleUrl: 'scoped-component.css',
  scoped: true,
})
export class ScopedComponent {}

----------------------------------------

TITLE: Component Testing with JSX Template in TSX
DESCRIPTION: Shows how to test a component using JSX template syntax in newSpecPage. Demonstrates passing props to components during testing.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: This snippet shows how to add the dist-custom-elements output target to a Stencil project's configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Configuring Testing Options in stencil.config.ts
DESCRIPTION: Reference to the TypeScript interface definitions for Stencil's testing configuration options. The code shows the structure for configuring Jest and e2e testing settings in a Stencil project.

LANGUAGE: typescript
CODE:
https://github.com/ionic-team/stencil/blob/32811591777de726f0374649a4f5e250a0a8e355/src/declarations/stencil-public-compiler.ts#L1968-L2119

----------------------------------------

TITLE: Creating a Stencil Store Instance
DESCRIPTION: Demonstrates how to create and configure a store with initial state and change handlers using createStore API

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config
DESCRIPTION: Configuration setup for specifying a custom screenshot connector in the Stencil config file.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Creating Playwright Config for Stencil in TypeScript
DESCRIPTION: Demonstrates how to create a Playwright configuration for a Stencil project using the createConfig function. It shows how to override default settings and extend matchers.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

expect.extend(matchers);

export default createConfig({
  // Change which test files Playwright will execute
  testMatch: '*.spec.ts',

  webServer: {
    // Only wait max 30 seconds for server to start
    timeout: 30000,
  },
});

----------------------------------------

TITLE: Configuring Event Options in Stencil
DESCRIPTION: Shows how to use the EventOptions interface to configure custom event behavior, including setting the event name, bubbling, cancelable, and composed properties.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Illustrating Proper HTML Tag Naming for Stencil Components
DESCRIPTION: This snippet demonstrates the correct way to name HTML tags for Stencil components, using a brand-specific prefix and avoiding the use of 'stencil' in the tag name.

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

----------------------------------------

TITLE: WebdriverIO Component Text Assertion Examples
DESCRIPTION: Demonstrates two approaches to asserting component text content - traditional expectation and WebdriverIO's recommended matcher approach for more resilient tests.

LANGUAGE: typescript
CODE:
expect(await $('my-component').getText())
    .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)

LANGUAGE: typescript
CODE:
await expect($('my-component'))
    .toHaveText(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project by configuring the @stencil/sass plugin in the Stencil configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Mutable Properties in Stencil
DESCRIPTION: Demonstrates how to use mutable properties in Stencil components.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class ToDoListItem {
   @Prop({ mutable: true }) thingToDo: string;

   componentDidLoad() {
      this.thingToDo = 'Ah! A new value!';
   }
}

----------------------------------------

TITLE: Asset Path Resolution Example in TypeScript
DESCRIPTION: Demonstrates how to use getAssetPath() to resolve asset paths relative to the build directory.

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Full Stencil Build in NodeJS
DESCRIPTION: Demonstrates a complete example of running a full Stencil build in a NodeJS environment, including importing necessary modules, creating a logger and system, loading config, and running the build.

LANGUAGE: typescript
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Synchronous Transpilation in Stencil
DESCRIPTION: Presents the synchronous version of the transpile function. It requires TypeScript to be globally available in browser environments.

LANGUAGE: typescript
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Using Slots in Stencil Components
DESCRIPTION: Examples of using slots to render dynamic child content in specific locations within a component.

LANGUAGE: tsx
CODE:
render() {
  return [
    <slot name="item-start" />,
    <h1>Here is my main content</h1>,
    <slot name="item-end" />
  ]
}

----------------------------------------

TITLE: Handling User Input in Stencil Components
DESCRIPTION: Demonstrates how to handle user input events like button clicks and input changes in Stencil components.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

LANGUAGE: tsx
CODE:
export class MyComponent {
  private inputChanged = (event: Event) => {
    console.log('input changed: ', (event.target as HTMLInputElement).value);
  }

  render() {
    return (
      <input onChange={this.inputChanged}/>
    );
  }
}

----------------------------------------

TITLE: Stencil Output Target Configuration
DESCRIPTION: Configuration for generating Vue component wrappers in Stencil config

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Custom Service Worker with Update Handling
DESCRIPTION: Implements a custom Service Worker that listens for a 'skipWaiting' message to activate the new version.

LANGUAGE: javascript
CODE:
importScripts("workbox-v4.3.1/workbox-sw.js");

self.addEventListener("message", ({ data }) => {
  if (data === "skipWaiting") {
    self.skipWaiting();
  }
});

self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Inline Mocking in Stencil Tests with TypeScript
DESCRIPTION: This snippet shows an alternative approach to mocking by providing an inline mock implementation using jest.mock(). It achieves the same result as creating a separate mock file.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Installing @stencil/store via npm or yarn
DESCRIPTION: Command to install @stencil/store as a development dependency in a project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Using hydrateDocument for Server-Side Rendering
DESCRIPTION: This example, taken from an Ionic Angular server, shows how to use the hydrateDocument function to hydrate components on the server. It takes a document object and returns a promise with the hydrated results.

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

export function hydrateComponents(doc) {
  return hydrateDocument(doc)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Multi-Component Stencil Test Setup
DESCRIPTION: Demonstrates how to set up tests for components with dependencies on other Stencil components by including all required components in the render configuration.

LANGUAGE: typescript
CODE:
render({
    components: [ComponentA, ComponentB, ComponentC, ComponentD],
    template: () => <component-a first="Stencil" last="'Don't call me a framework' JS" />
});

----------------------------------------

TITLE: Setting Props Manually in JavaScript
DESCRIPTION: Shows how to manually set object properties on a Stencil component using vanilla JavaScript.

LANGUAGE: markup
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Exporting Generated Angular Component Wrappers
DESCRIPTION: Import and export the generated component wrappers in the Angular library's main module.

LANGUAGE: typescript
CODE:
import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Auto-defining Stencil Custom Elements
DESCRIPTION: TypeScript example of importing and auto-defining a Stencil custom element when using the 'dist-custom-elements' output target with auto-define-custom-elements option.

LANGUAGE: typescript
CODE:
import 'my-design-system/my-component'

----------------------------------------

TITLE: Defining Web Worker Functions in Stencil
DESCRIPTION: This example shows how to define functions in a Stencil Web Worker file. It includes two functions: a simple sum operation and a more complex task that processes an ArrayBuffer.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Unit Testing a Stencil Component with WebdriverIO
DESCRIPTION: This snippet demonstrates how to set up a unit test for a Stencil component using WebdriverIO. It imports the necessary dependencies, renders the component, and performs assertions on the rendered output.

LANGUAGE: typescript
CODE:
import { render } from '@wdio/browser-runner/stencil';
import { MyComponent } from './my-component';

describe('MyComponent', () => {
    it('renders', async () => {
        const { $, expectWDIO } = await render({
            components: [MyComponent],
            template: () => <my-component first="Stencil" last="'Don't call me a framework' JS"></my-component>
        });

        const component = await $('my-component');
        await expectWDIO(component).toHaveText(
            `Hello, World! I'm Stencil 'Don't call me a framework' JS`
        );
    });
});

----------------------------------------

TITLE: Marking a Stencil Component as Internal
DESCRIPTION: This example shows how to use the @internal JSDoc tag to mark a Stencil component as internal, which will skip README generation for that component.

LANGUAGE: typescript
CODE:
/**
 * @internal
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Configuring package.json for TypeScript Support
DESCRIPTION: Shows how to configure package.json to specify the location of TypeScript declarations for consumers of the package.

LANGUAGE: json
CODE:
{
  "types": "dist/components/index.d.ts",
  "dependencies": {
    "@stencil/core": "latest"
  }
}

----------------------------------------

TITLE: Basic Dist Output Target Configuration in TypeScript
DESCRIPTION: Basic configuration setup for the dist output target in a Stencil configuration file.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Multi-Component Stencil Test Setup
DESCRIPTION: Demonstrates how to set up tests for components with dependencies on other Stencil components by including all required components in the render configuration.

LANGUAGE: typescript
CODE:
render({
    components: [ComponentA, ComponentB, ComponentC, ComponentD],
    template: () => <component-a first="Stencil" last="'Don't call me a framework' JS" />
});

----------------------------------------

TITLE: Typed Functional Component with TypeScript
DESCRIPTION: Example using Stencil's FunctionalComponent type with TypeScript interfaces for prop type safety.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Manipulating Children in Stencil Functional Components
DESCRIPTION: Demonstrates how to use the utilities provided by FunctionalComponent to safely manipulate child elements.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Creating NodeJS Logger in Stencil
DESCRIPTION: Creates a logger instance based on NodeJS APIs for use by the compiler and dev-server. Takes the NodeJS process object as an argument and returns a Logger object.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config
DESCRIPTION: Configuration example showing how to specify a custom screenshot connector in the Stencil testing config.

LANGUAGE: typescript
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Implementing CSS Parts in Stencil Components
DESCRIPTION: Shows how to use CSS parts to allow greater styling flexibility from the light DOM, including the use of the 'part' attribute and ::part() pseudo-element.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: React Component Usage Example
DESCRIPTION: Example showing how to use the generated React components in a React application

LANGUAGE: tsx
CODE:
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Using newSpecPage() with JSX Template in Stencil
DESCRIPTION: This example shows how to use the template option in newSpecPage() to test a component with JSX syntax. It passes a prop to the component and verifies the rendered output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Testing Component with JSX Template in Stencil
DESCRIPTION: This example shows how to use the template option in newSpecPage() to test a Stencil component. It uses JSX syntax to initialize the component with properties and verifies the rendered output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Non-Optimal Component Props Pattern in TSX
DESCRIPTION: Example showing problematic approach of passing complex objects as props during SSR

LANGUAGE: tsx
CODE:
const menu = {
    'Overview': ['Introduction', 'Getting Started', 'Component API', 'Guides', 'FAQ'],
    'Docs': ['Framework Integrations', 'Static Site Generation', 'Config', 'Output Targets', 'Testing', 'Core Compiler API'],
    'Community': ['Blog', 'GitHub', 'X', 'Discord']
}
return (
    <nav>
        <footer-navigation items={menu} />
    </nav>
)

----------------------------------------

TITLE: Property Options and Validation
DESCRIPTION: Shows how to use property options like mutability, reflection and validation in Stencil components

LANGUAGE: tsx
CODE:
import { Component, Prop, Watch, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class TodoList {
  @Prop({ mutable: true, reflect: true }) thingToDo!: string;

  @Watch('thingToDo')
  validateName(newValue: string, _oldValue: string) {
    const isBlank = typeof newValue !== 'string' || newValue === '';
    if (isBlank) { throw new Error('thingToDo cannot be empty') };
  }
}

----------------------------------------

TITLE: Shadow DOM QuerySelector Implementation
DESCRIPTION: Example showing how to query elements within Shadow DOM using the @Element decorator.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Using Stencil Components in Angular Template
DESCRIPTION: This HTML snippet demonstrates how to use a Stencil component in an Angular template using the generated wrapper.

LANGUAGE: html
CODE:
<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Creating a Monorepo with Lerna
DESCRIPTION: Commands to initialize a Lerna workspace and install dependencies.

LANGUAGE: bash
CODE:
lerna init

npm install

npm install typescript @types/node --save-dev

----------------------------------------

TITLE: Node Polyfills Configuration
DESCRIPTION: Configuration example showing how to set up rollup-plugin-node-polyfills in Stencil's config file to handle Node.js built-in APIs in the browser.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Component Asset Configuration Example
DESCRIPTION: Shows how to configure a component to use assets with assetsDirs and getAssetPath

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Configuring Project Structure with Monorepo
DESCRIPTION: Example directory structure for a monorepo containing both Stencil and React libraries

LANGUAGE: text
CODE:
top-most-directory/
└── packages/
    ├── stencil-library/
    │   ├── stencil.config.js
    │   └── src/components/
    └── react-library/
        └── src/
            ├── components/
            └── index.ts

----------------------------------------

TITLE: Parsing Command-line Arguments for Stencil Config
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object. It's typically used with process.argv.slice(2) as the argument.

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Using Host Component to Set Attributes in Stencil
DESCRIPTION: This snippet demonstrates how to use the Host functional component to set attributes and classes on the host element of a Stencil component. It shows conditional rendering based on a prop value.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Configuring Stencil for Vue Output
DESCRIPTION: Stencil configuration to generate Vue component wrappers.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Listening to Custom Events in JavaScript
DESCRIPTION: Demonstrates how to listen to custom events emitted by Stencil components using vanilla JavaScript. The example shows adding an event listener to a todo-list component.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Running Visual Regression Tests in Stencil
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison functionality in Stencil

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Checking Push Subscription Status in Stencil
DESCRIPTION: Example of checking the current push subscription status in a Stencil application.

LANGUAGE: typescript
CODE:
self.registration.pushManager.getSubscription().then(subscription => {
  if (!subscription) {
    // ask the user to register for push
    return;
  }

  // update the database
  console.log(subscription);
});

----------------------------------------

TITLE: Basic Prop Declaration in Stencil
DESCRIPTION: Basic example showing how to declare and use Props in a Stencil component using the @Prop decorator.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Documenting CSS Variables
DESCRIPTION: Example of documenting CSS variables using JSDoc-style comments

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Using renderToString Function
DESCRIPTION: Example of using renderToString to hydrate HTML content with formatting options, taken from Ionic Core.

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(srcHtml, {
  prettyHtml: true,
  removeScripts: true
});

console.log(results.html);

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: Example demonstrating how to use Build.isDev conditional to execute different code paths in development versus production environments. The code shows implementation within a Stencil component's lifecycle method componentDidLoad().

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Configuring Service Worker in Stencil
DESCRIPTION: Example of how to configure the Service Worker in a Stencil project's config file. This snippet demonstrates setting custom glob patterns for asset caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Angular Standalone Component Usage
DESCRIPTION: Example of using Stencil components in Angular standalone components

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { MyComponent } from 'component-library';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [MyComponent],
  templateUrl: './app.component.html'
})
export class AppComponent {}

----------------------------------------

TITLE: Handling User Input in Stencil Components
DESCRIPTION: Shows how to handle user input events like button clicks and input changes in Stencil components.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Using @State() with Complex Types in Stencil
DESCRIPTION: Demonstrates how to use @State() with a complex type (an array of custom objects). This example shows a component that adds items to a list every two seconds and rerenders the list.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: Shows how to write CSS for a component using Shadow DOM, including the use of the :host pseudo-class selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Server Implementation with Koa
DESCRIPTION: Example of using hydrateComponents in a Koa server implementation

LANGUAGE: typescript
CODE:
import Koa from 'koa';

const app = new Koa();
app.use(async (ctx) => {
  const res = await hydrateComponents(`<!DOCTYPE html>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />
    <title>Document</title>
    <link rel=\"preconnect\" href=\"https://some-url.com\" />
    <style>
      // custom styles here
    </style>
  </head>
  <body>
    <app-root></app-root>
  </body>
</html>`)
  ctx.body = res
})

----------------------------------------

TITLE: Correct Component Module Structure in TypeScript
DESCRIPTION: This set of snippets shows the correct way to structure component modules in Stencil. Shared functions are moved to a separate utility file, and components are exported individually.

LANGUAGE: typescript
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: typescript
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: typescript
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Starting Stencil Dev Server in TypeScript
DESCRIPTION: Function signature for starting the Stencil development server. It takes a configuration object, a logger, and an optional watcher as parameters, and returns a Promise that resolves to a DevServer instance.

LANGUAGE: typescript
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Testing Rendered HTML with newSpecPage in Stencil (TypeScript)
DESCRIPTION: Demonstrates how to use newSpecPage() to test a Stencil component's rendered HTML output. It imports the component, creates a test page, and uses the toEqualHtml matcher to verify the rendering.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Basic Form Implementation in Stencil
DESCRIPTION: Demonstrates a simple form component with a single text input field. Shows basic form submission and input handling with state management.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Installing Vue Output Target
DESCRIPTION: Command to install the Stencil Vue output target in the Stencil component library.

LANGUAGE: bash
CODE:
npm install @stencil/vue-output-target --save-dev

----------------------------------------

TITLE: Implementing formStateRestoreCallback in Stencil
DESCRIPTION: This snippet shows a pseudocode implementation of formStateRestoreCallback for a date picker component, demonstrating how to restore both the form value and component-specific state.

LANGUAGE: typescript
CODE:
import { Component, h, State, AttachInternals } from '@stencil/core';

@Component({
  tag: 'fa-date-picker',
  formAssociated: true,
})
export class MyDatePicker {
  @State() value: string = "";
  @State() view: "weeks" | "months" = "weeks";

  @AttachInternals()
  internals: ElementInternals;

  onInputChange(e) {
    e.preventDefault();
    const date = e.target.value;
    this.setValue(date);
  }

  setValue(date: string) {
    // second 'state' parameter is used to store both
    // the input value (`date`) _and_ the current view
    this.internals.setFormValue(date, `${date}#${this.view}`);
  }

  formStateRestoreCallback(state, _mode) {
    const [date, view] = state.split("#");
    this.view = view;
    this.setValue(date);
  }

  render() {
    return <div>
      Mock Date Picker, mode: {this.view}
      <input class="date-picker" onChange={e => this.onInputChange(e)}></input>
    </div>
  }
}

----------------------------------------

TITLE: Using Stencil Components in Angular Template
DESCRIPTION: Use the wrapped Stencil components directly in Angular templates with Angular's template binding syntax.

LANGUAGE: html
CODE:
<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Element Decorator Usage in Stencil
DESCRIPTION: Demonstrates how to use the @Element decorator to access the host element within a component class instance.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

export class TodoList {
  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Synchronous Transpilation with Stencil Core Compiler
DESCRIPTION: Presents the function signature for transpileSync(), a synchronous version of transpile() that requires TypeScript to be globally available in browser environments.

LANGUAGE: typescript
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Prop Types in Stencil
DESCRIPTION: Examples of different prop types including boolean, number, string, and complex types.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() isComplete: boolean;
    @Prop() timesCompletedInPast: number;
    @Prop() thingToDo: string;
    @Prop() myHttpService: MyHttpService;
}

----------------------------------------

TITLE: Complex Template Content in Stencil
DESCRIPTION: Demonstrates how to return multiple top-level elements in a Stencil component's render function using an array or Fragment.

LANGUAGE: tsx
CODE:
import { Fragment } from '@stencil/core';
...
render() {
  return (<Fragment>
    <div class="container">
      <ul>
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
      </ul>
    </div>

    <div class="another-container">
      ... more html content ...
    </div>
  </Fragment>);
}

----------------------------------------

TITLE: Transpiling Code with Stencil Compiler
DESCRIPTION: Shows the function signature for transpiling code using the Stencil compiler. It takes a string of code and optional transpile options, returning a Promise with the transpilation results.

LANGUAGE: tsx
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Running a Full Stencil Build in NodeJS
DESCRIPTION: Demonstrates how to set up and run a full Stencil build in a NodeJS environment using the createCompiler() function and other related utilities.

LANGUAGE: typescript
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Configuring Stencil Custom Docs Output Target
DESCRIPTION: Configuration example showing how to set up the docs-custom output target in Stencil. The config accepts a generator function that receives the generated docs JSON data for custom processing.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Basic Web Worker Implementation in TypeScript
DESCRIPTION: Example showing vanilla Web Worker usage in browser with event-based communication pattern

LANGUAGE: typescript
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Implementing Controlled Component Pattern with Ionic in Ember
DESCRIPTION: Example of using an Ionic toggle component with state management in an Ember component, demonstrating the controlled component pattern.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Starting Stencil Dev Server in TypeScript
DESCRIPTION: The start() function is used to initialize and run the Stencil development server. It takes configuration, logger, and optional watcher parameters, and returns a Promise that resolves to a DevServer instance.

LANGUAGE: typescript
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Basic Web Worker Implementation in TypeScript
DESCRIPTION: Example showing vanilla Web Worker usage in browser with event-based communication pattern

LANGUAGE: typescript
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Component Hierarchy Example in Stencil
DESCRIPTION: Demonstrates the order of lifecycle method execution in a nested component structure.

LANGUAGE: markup
CODE:
  <cmp-a>
    <cmp-b>
      <cmp-c></cmp-c>
    </cmp-b>
  </cmp-a>

----------------------------------------

TITLE: Implementing Worker Callbacks in Stencil
DESCRIPTION: Demonstrates how to use callbacks with Web Workers in Stencil for tasks that need to provide progress updates. This example shows a countdown function that reports progress every second.

LANGUAGE: typescript
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { countDown } from '../countdown.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    const startNum = 5;
    console.log('start', startNum);

    countDown(startNum, (p) => {
      console.log('progress', p);
    }).then(result => {
      console.log('finish', result);
    });
  }
}

----------------------------------------

TITLE: Initializing Shadow DOM Component in TypeScript/Stencil
DESCRIPTION: Example showing how to enable Shadow DOM in a Stencil component using the @Component decorator with shadow option.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Using Props with Different Types
DESCRIPTION: Demonstration of using props with boolean, number and string types in Stencil

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() isComplete: boolean;
    @Prop() timesCompletedInPast: number;
    @Prop() thingToDo: string;
}

----------------------------------------

TITLE: CSS Custom Properties Definition
DESCRIPTION: Demonstrates how to define and use CSS custom properties for component customization.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Stencil Component E2E Test with Mock
DESCRIPTION: End-to-end test implementation for a Stencil component using newSpecPage and mocked utilities

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Webpack Configuration for Stencil Custom Elements
DESCRIPTION: This snippet shows a webpack configuration for consuming Stencil custom elements, including asset copying.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Using forceUpdate in Stencil Component
DESCRIPTION: Shows how to use the forceUpdate() function to schedule a new render of a component instance even if no state has changed. This is not synchronous and may perform the DOM render in the next frame.

LANGUAGE: typescript
CODE:
import { forceUpdate } from '@stencil/core'

// inside a class component function
forceUpdate(this);

----------------------------------------

TITLE: Creating Vue Plugin for Component Registration
DESCRIPTION: Vue plugin implementation for registering custom web components with polyfills.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Using renderToString Function in JavaScript
DESCRIPTION: Example of using renderToString to hydrate HTML content with formatting options, taken from Ionic Core

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(srcHtml, {
  prettyHtml: true,
  removeScripts: true
});

console.log(results.html);

----------------------------------------

TITLE: Basic WWW Output Target Copy Configuration
DESCRIPTION: Example showing how to configure copy tasks for the www output target to copy an images directory.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      copy: [
        { src: 'images' }
      ]
    }
  ]

----------------------------------------

TITLE: Configuring Output Targets in Stencil
DESCRIPTION: This snippet demonstrates how to configure multiple output targets in a Stencil project's configuration file. It shows setting up both 'dist' and 'www' output types.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Configuring Playwright Tests for Stencil
DESCRIPTION: Example of creating a Playwright test configuration with custom overrides. Shows how to extend matchers and customize test settings while maintaining core Stencil integration.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

expect.extend(matchers);

export default createConfig({
  // Change which test files Playwright will execute
  testMatch: '*.spec.ts',

  webServer: {
    // Only wait max 30 seconds for server to start
    timeout: 30000,
  },
});

----------------------------------------

TITLE: Stencil Lifecycle DOM Events Configuration Example
DESCRIPTION: Example showing the available lifecycle DOM events that can be enabled through the lifecycleDOMEvents configuration option. These events are dispatched on the window object when enabled.

LANGUAGE: javascript
CODE:
{
  "stencil_componentWillLoad": "Dispatched for each component's componentWillLoad",
  "stencil_componentWillUpdate": "Dispatched for each component's componentWillUpdate",
  "stencil_componentWillRender": "Dispatched for each component's componentWillRender",
  "stencil_componentDidLoad": "Dispatched for each component's componentDidLoad",
  "stencil_componentDidUpdate": "Dispatched for each component's componentDidUpdate",
  "stencil_componentDidRender": "Dispatched for each component's componentDidRender"
}

----------------------------------------

TITLE: Implementing Controlled Component Pattern with Ionic in Ember
DESCRIPTION: Example of using an Ionic toggle component with state management in an Ember component, demonstrating the controlled component pattern.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Calling a Public Method on a Stencil Component
DESCRIPTION: Shows how to safely call a public method on a Stencil component. It demonstrates using the 'whenDefined' method to ensure the component is loaded before calling the method.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Implementing Callback-based Progress in a Stencil Web Worker
DESCRIPTION: This snippet demonstrates how to implement a callback-based progress system in a Stencil Web Worker, allowing for periodic updates during long-running tasks.

LANGUAGE: tsx
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

----------------------------------------

TITLE: React Component Usage Example
DESCRIPTION: Example of consuming generated React component wrappers in a React application

LANGUAGE: tsx
CODE:
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Implementing Build Constants in Stencil Component
DESCRIPTION: Demonstrates how to use Build constants from @stencil/core to detect development/production modes and browser/server environments. The example shows usage of Build.isDev and Build.isBrowser flags within a Stencil component's lifecycle method.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Configuring Service Worker in Stencil
DESCRIPTION: Example of how to configure the Service Worker in a Stencil project's config file. This snippet demonstrates setting custom glob patterns for asset caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Component Slot Documentation
DESCRIPTION: Demonstrates how to document component slots using JSDoc tags

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component (TypeScript)
DESCRIPTION: This code snippet demonstrates how to use Build Conditionals in a Stencil component. It imports the Build object from @stencil/core and uses the isDev property to conditionally execute code based on the build environment.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Defining CSS Custom Properties in Stencil
DESCRIPTION: Demonstrates how to define and use CSS custom properties (CSS variables) in a Stencil component.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Implementing Module and File Mocking in WebdriverIO
DESCRIPTION: Demonstrates how to mock both project files and external modules using WebdriverIO's mocking functions. Shows how to create mock implementations and replace actual functionality with mock returns.

LANGUAGE: typescript
CODE:
import { mock, fn } from '@wdio/browser-runner'
import { format } from './utils/utils.ts'

// mock files within the project
mock('./utils/utils.ts', () => ({
    format: fn().mockReturnValue(42)
}))
// mock whole modules and replace functionality with what is defined in `./__mocks__/leftpad.ts`
mock('leftpad')

console.log(format()) // returns `42`

----------------------------------------

TITLE: Implementing Environment Detection in Stencil Component
DESCRIPTION: Demonstrates how to use Stencil's Build constants to detect the current environment (development/production) and context (browser/server) within a component. The example shows usage of Build.isDev and Build.isBrowser flags for conditional code execution.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Writing Visual Test for Stencil Component
DESCRIPTION: Example of a visual test for a Stencil component using the toMatchElementSnapshot matcher provided by @wdio/visual-service.

LANGUAGE: typescript
CODE:
it('looks visually correct', async () => {
    const page = await browser.newPage();
    await page.setContent('<my-component first="Stencil" last="JS"></my-component>');
    await page.waitForSelector('my-component');
    const element = await page.$('my-component');
    await expect(element).toMatchElementSnapshot('MyComponent');
});

----------------------------------------

TITLE: Handling Keyboard Events in Stencil
DESCRIPTION: Demonstrates how to listen for keyboard events in a Stencil component using the @Listen() decorator and accessing key information from the event object.

LANGUAGE: tsx
CODE:
@Listen('keydown')
handleKeyDown(ev: KeyboardEvent){
  if (ev.key === 'ArrowDown'){
    console.log('down arrow pressed')
  }
}

----------------------------------------

TITLE: Implementing Callback-based Progress in a Stencil Web Worker
DESCRIPTION: Demonstrates how to create a Web Worker function that provides progress updates using a callback, allowing for periodic communication with the main thread.

LANGUAGE: typescript
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

----------------------------------------

TITLE: Loading Stencil Component via CDN Script
DESCRIPTION: Basic example of loading a Stencil component using a CDN script tag in an HTML page.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Enabling Static Site Generation Build in Stencil
DESCRIPTION: Command to enable prerendering during the Stencil build process using the --prerender flag.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Setting Asset Path for Custom Elements Build
DESCRIPTION: This snippet demonstrates how to set the asset path for custom elements builds using the setAssetPath function.

LANGUAGE: typescript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Form-Associated Stencil Component
DESCRIPTION: Shows how to create a form-associated Stencil component that can participate in forms using the ElementInternals API.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Implementing CSS Parts in Stencil Component
DESCRIPTION: Shows how to use the CSS ::part() pseudo-element to enable flexible styling of specific elements within a Shadow DOM component.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Creating and Using a Basic Web Worker in JavaScript
DESCRIPTION: Demonstrates how to create and interact with a vanilla Web Worker using the browser's Worker API. This snippet shows posting messages to the worker and handling responses.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Creating NodeJS Logger for Stencil Compiler
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the compiler and dev-server. It requires the NodeJS 'process' object as an argument.

LANGUAGE: typescript
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Creating Vue Plugin for Component Registration
DESCRIPTION: Vue plugin implementation for registering custom elements

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Reloading App on Service Worker Update
DESCRIPTION: Example of adding an event listener to reload the app when a new Service Worker takes control, typically added in a component's lifecycle method.

LANGUAGE: typescript
CODE:
componentWillLoad() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker
      .getRegistration()
      .then(registration => {
        if (registration?.active) {
          navigator.serviceWorker.addEventListener(
            'controllerchange',
            () => window.location.reload()
          );
        }
      })
  }
}

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Build Conditionals in a Stencil component. It imports the Build object from @stencil/core and uses the isDev constant to conditionally execute code based on whether the app is running in development or production mode.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Embedding Components in Stencil
DESCRIPTION: Demonstrates how to embed one Stencil component within another using JSX.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Defining Object Props in Stencil Component
DESCRIPTION: TypeScript class showing how to define object and array properties in a Stencil component using the @Prop decorator.

LANGUAGE: tsx
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Configuring Hydrate App Output Target in TypeScript
DESCRIPTION: Configuration snippet showing how to add the dist-hydrate-script output target to stencil.config.ts

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Configuring Copy Task with Custom Destination
DESCRIPTION: Example demonstrating how to set up a copy task with a custom destination path for web fonts, copying from src/files/fonts to public/static/web-fonts.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]

----------------------------------------

TITLE: Visual Testing Component Example
DESCRIPTION: Example test case showing how to implement visual testing for a StencilJS component using the toMatchElementSnapshot matcher

LANGUAGE: typescript
CODE:
it('should render updated H1 text content', async () => {
    const myComponent = await page.$(shadow('my-component'))
    await expect(myComponent).toMatchElementSnapshot({
        name: 'MyComponent'
    })
    const h1 = await page.$(shadow('h1'))
    expect(await h1.getText()).toBe('Hello World!')
})

----------------------------------------

TITLE: Transpiling Code with Stencil Core Compiler
DESCRIPTION: Shows the function signature for transpiling code using the Stencil Core Compiler. It takes source code as a string and optional transpile options, returning a Promise with the transpile results.

LANGUAGE: typescript
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Worker with External Dependencies
DESCRIPTION: Example of a Web Worker implementation with external library dependencies

LANGUAGE: typescript
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Conditional Rendering in Stencil
DESCRIPTION: Demonstrates conditional rendering using if/else statements and ternary operators in JSX.

LANGUAGE: tsx
CODE:
render() {
  if (this.name) {
    return ( <div>Hello {this.name}</div> )
  } else {
    return ( <div>Hello, World</div> )
  }
}

----------------------------------------

TITLE: Consuming Custom Elements Example
DESCRIPTION: Example showing how to define a custom element using the generated component class.

LANGUAGE: typescript
CODE:
import { defineCustomElement } from 'my-library/dist/components/hello-world';

defineCustomElement(); // Same as manually calling: customElements.define('hello-world', HelloWorld);

----------------------------------------

TITLE: Disabling Service Worker in Stencil Config
DESCRIPTION: Demonstrates how to disable the Service Worker generation in a Stencil project by setting the serviceWorker property to null in the config.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Configuring Component with shadow Option
DESCRIPTION: These examples demonstrate how to enable Shadow DOM encapsulation for a component using the 'shadow' option, including the use of delegatesFocus.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: true
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: { 
    delegatesFocus: true,
  }
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Implementing Module and File Mocking
DESCRIPTION: Demonstrates how to mock both local project files and external modules using WebdriverIO's mocking functions. Shows how to create mock implementations and return values for specific functions.

LANGUAGE: typescript
CODE:
import { mock, fn } from '@wdio/browser-runner'
import { format } from './utils/utils.ts'

// mock files within the project
mock('./utils/utils.ts', () => ({
    format: fn().mockReturnValue(42)
}))
// mock whole modules and replace functionality with what is defined in `./__mocks__/leftpad.ts`
mock('leftpad')

console.log(format()) // returns `42`

----------------------------------------

TITLE: Using Skip Function in Playwright Tests with Stencil
DESCRIPTION: Shows how to use the skip function provided by the Stencil Playwright adapter to conditionally skip tests based on browser type or component mode.

LANGUAGE: typescript
CODE:
test('my-test', ({ page, skip }) => {
    // Skip tests for certain browsers
    skip.browser('firefox', 'This behavior is not available on Firefox');

    // Skip tests for certain modes
    skip.mode('md', 'This behavior is not available in Material Design');

    ...
})

----------------------------------------

TITLE: Setting Custom Destination for Copy Tasks
DESCRIPTION: Example showing how to set a custom destination for copied files using the 'dest' option. This configuration copies fonts from src/files/fonts to public/static/web-fonts in a customized www output target.

LANGUAGE: typescript
CODE:
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]

----------------------------------------

TITLE: Configuring JSON Docs Output Target in Stencil
DESCRIPTION: Configuration for automatically generating JSON documentation in Stencil's config file.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Basic Stencil Component Test Example
DESCRIPTION: Example test case demonstrating how to create and test a Stencil component using basic DOM manipulation.

LANGUAGE: typescript
CODE:
import { expect, test } from 'vitest'

import '../src/components/my-component/my-component.js'

test('should render component correctly', async () => {
    const cmp = document.createElement('my-component')
    cmp.setAttribute('first', 'Stencil')
    cmp.setAttribute('last', `'Don't call me a framework' JS`)
    document.body.appendChild(cmp)

    await new Promise((resolve) => requestIdleCallback(resolve))
    expect(cmp.shadowRoot?.querySelector('div')?.innerText)
        .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)
})

----------------------------------------

TITLE: Setting up React Output Target in Stencil Config
DESCRIPTION: This code snippet shows how to configure the reactOutputTarget in the Stencil config file. It includes the necessary import and configuration options for generating React component wrappers.

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    reactOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../react-library/lib/components/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Configuring JSON Docs Output Target in Stencil
DESCRIPTION: Demonstrates how to configure the docs-json output target in the Stencil configuration file.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Binding to Custom Events in JSX
DESCRIPTION: Shows how to bind to custom events emitted by Stencil components when using them in JSX. The example demonstrates binding to the 'todoCompleted' and 'todoDeleted' events.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

<todo-list onTodoDeleted={ev => this.someOtherMethod(ev)} />

----------------------------------------

TITLE: Generating a Stencil Component with CLI
DESCRIPTION: Demonstrates how to use the Stencil CLI to generate a new component. The command creates a component with the specified name in the src/components directory, including necessary files like CSS, E2E tests, unit tests, and the main component file.

LANGUAGE: bash
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Vue Component Example Using Stencil Component
DESCRIPTION: Example of consuming a Stencil component wrapper in a Vue component template

LANGUAGE: html
CODE:
<template>
  <my-component first="Your" last="Name"></my-component>
</template>

<script lang="ts">
  import { MyComponent } from 'vue-library';
  import { defineComponent } from 'vue';

  export default defineComponent({
    components: { MyComponent },
  });
</script>

----------------------------------------

TITLE: Enabling Shadow DOM in Stencil Component
DESCRIPTION: Demonstrates how to enable Shadow DOM for a Stencil component by setting the 'shadow' option to true in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Defining CSS Custom Properties in Stencil
DESCRIPTION: Demonstrates how to define and use CSS custom properties (CSS variables) in a Stencil component.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Configuring Copy Tasks in Stencil Config
DESCRIPTION: Demonstrates how to set up copy tasks in the Stencil configuration to move assets to the distribution directory.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
  // ...
};

----------------------------------------

TITLE: Importing Stencil Compiler in NodeJS
DESCRIPTION: Example showing how to import the Stencil compiler in a NodeJS environment using CommonJS syntax.

LANGUAGE: tsx
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Configuring package.json for Standalone Components
DESCRIPTION: JSON configuration in package.json for defining export fields for standalone components using the 'dist-custom-elements' output target.

LANGUAGE: json
CODE:
{
  "exports": {
    ".": {
      "import": "./dist/components/index.js",
      "types": "./dist/components/index.d.ts"
    },
    "./my-component": {
      "import": "./dist/components/my-component.js",
      "types": "./dist/components/my-component.d.ts"
    }
  },
  "types": "dist/components/index.d.ts"
}

----------------------------------------

TITLE: Configuring Angular Output Target in Stencil Config
DESCRIPTION: Example of how to configure the Angular output target in the Stencil config file. This sets up the generation of Angular component wrappers for Stencil components.

LANGUAGE: TypeScript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Service Implementation Using Utility
DESCRIPTION: Demonstrates a service that utilizes the getRandomInt helper function.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Component Asset Configuration with assetsDirs
DESCRIPTION: Shows how to configure a component to use assets and resolve asset paths using getAssetPath.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }

----------------------------------------

TITLE: Configuring Basic Dist Output Target in Stencil
DESCRIPTION: Basic configuration example for setting up the dist output target in a Stencil project's configuration file.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Handling Push Events in Service Worker (JavaScript)
DESCRIPTION: Example of how to handle push events in a Service Worker, including showing notifications.

LANGUAGE: javascript
CODE:
self.addEventListener('push', event => {
  console.log(`Push received with data "${event.data.text()}"`);

  const title = 'Push Notification';
  const options = {
    body: `${event.data.text()}`,
    data: { href: '/users/donald' },
    actions: [
      { action: 'details', title: 'Details' },
      { action: 'dismiss', title: 'Dismiss' },
    ],
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

----------------------------------------

TITLE: Setting Up a New Stencil Project
DESCRIPTION: Commands to navigate to the project directory, install dependencies, and start the development server for a new Stencil project.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Service Worker Update Handler Component
DESCRIPTION: Component code for handling service worker updates and showing a reload toast using Ionic framework.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Using Events in JSX with Stencil Components
DESCRIPTION: Shows how to bind event listeners directly in JSX when using Stencil components. The example demonstrates listening to a 'todoCompleted' event on a TodoList component.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

----------------------------------------

TITLE: Resolving Asset Paths with getAssetPath in TypeScript
DESCRIPTION: Demonstrates how to use the getAssetPath API to resolve asset paths relative to the asset base path in a Stencil project.

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff'); 

----------------------------------------

TITLE: Using Style Modes in Stencil Component
DESCRIPTION: This snippet shows how to use style modes in a Stencil component to support different styling configurations, such as Material Design and iOS.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'simple-button',
  styleUrls: {
    md: './simple-button.md.css', // styles for Material Design
    ios: './simple-button.ios.css' // styles for iOS
  },
})
export class SimpleButton {
  // ...
}

----------------------------------------

TITLE: Handling Dynamic Data Fetching in Stencil Components
DESCRIPTION: Example showing how to fetch and render dynamic data during component initialization using async/await in componentWillLoad lifecycle method.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Enabling Shadow DOM in Stencil Component
DESCRIPTION: Demonstrates how to enable Shadow DOM for a Stencil component by setting the 'shadow' option to true in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Importing Hydrate Function in JavaScript
DESCRIPTION: Example of importing the hydrateDocument function from a published package

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Stencil Component with Worker Integration
DESCRIPTION: Example showing how to import and use Web Worker functions within a Stencil component.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result);
    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Configuring Output Targets in Stencil
DESCRIPTION: This snippet demonstrates how to configure multiple output targets in a Stencil project's configuration file. It shows setting up both 'dist' and 'www' output types.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Getting Stencil Element Reference
DESCRIPTION: Shows how to use the getElement() function to retrieve a Stencil element for a given reference. This example demonstrates getting a reference to a Stencil component and using componentOnReady() with it.

LANGUAGE: typescript
CODE:
import { getElement } from '@stencil/core'

const stencilComponent = getElement(document.querySelector('my-cmp'))
if (stencilComponent) {
  stencilComponent.componentOnReady().then(() => { ... })
}

----------------------------------------

TITLE: Asset Path Management in Stencil Components
DESCRIPTION: Demonstrates usage of getAssetPath utility to resolve local asset paths within a Stencil component.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Configuring Angular Output Target in Stencil Config
DESCRIPTION: Add the angularOutputTarget configuration to the Stencil config file to generate Angular component wrappers.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Form Association Example Usage
DESCRIPTION: HTML example showing how to use a form-associated custom element within a form.

LANGUAGE: html
CODE:
<form>
  <custom-text-input name="my-custom-input"></custom-text-input>
</form>

----------------------------------------

TITLE: Using React Component Wrappers
DESCRIPTION: Example of consuming generated React component wrappers in a React application

LANGUAGE: typescript
CODE:
// App.tsx
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

----------------------------------------

TITLE: Manipulating Children in Functional Components with Stencil Utils
DESCRIPTION: Shows how to use Stencil's utility functions to transform child elements in a functional component.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Documenting @Event() Decorators in Stencil
DESCRIPTION: This TypeScript snippet demonstrates how to document events using the @Event() decorator and JSDoc comments. The generated README will include a table with event details.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * Emitted when an event is completed
   */
  @Event() todoCompleted: EventEmitter<number>;
  /**
   * @deprecated
   */
  @Event() todoUndo: EventEmitter<number>;

  // ...
}

----------------------------------------

TITLE: Configuring NPM Scripts for Stencil Testing
DESCRIPTION: JSON configuration for package.json defining npm scripts to run different types of Stencil tests, including unit tests, watched unit tests, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Calling Public Methods in Stencil Components
DESCRIPTION: Shows how to properly call a public method on a Stencil component, ensuring the component is defined using customElements.whenDefined() before making the call.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Embedding Stencil Components
DESCRIPTION: This example demonstrates how to embed or nest Stencil components within each other. It shows a parent component using a child component in its render function.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Loading Stencil Components via CDN Script
DESCRIPTION: Demonstrates how to load Stencil components using a CDN script tag in a basic HTML page.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Calling a Public Method on a Stencil Component
DESCRIPTION: This snippet shows how to call a public method on a Stencil component. It uses the whenDefined method of the custom element registry to ensure the component is defined before calling the method.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Using Slots in Stencil Components
DESCRIPTION: Demonstrates how to use slots to allow dynamic content insertion in Stencil components.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
      <h2>A Component</h2>
      <div><slot /></div>
    </div>
  );
}

LANGUAGE: tsx
CODE:
render(){
  return [
    <slot name="item-start" />,
    <h1>Here is my main content</h1>,
    <slot name="item-end" />
  ]
}

----------------------------------------

TITLE: Variable Casing Example in Stencil Props
DESCRIPTION: Demonstrates the differences in property naming conventions between TSX and HTML usage of components.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() thingToDo: string;

    render() {
        return <div>{this.thingToDo}</div>;
    }
}

LANGUAGE: tsx
CODE:
<todo-list-item thingToDo={"Learn about Stencil Props"}></todo-list-item>

LANGUAGE: html
CODE:
<todo-list-item thing-to-do="Learn about Stencil Props"></todo-list-item>

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config (TSX)
DESCRIPTION: Shows how to add the stats output target to the stencil.config.ts file for automatic generation during builds.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Inline Mocking with jest.mock()
DESCRIPTION: Shows an alternative approach to mocking by providing a mock implementation directly in the jest.mock() call, without needing a separate mock file.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: State with Event Listening
DESCRIPTION: Example of combining @State with @Listen decorator to create a toggle button component that responds to click events.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Setting Component Mode in Stencil
DESCRIPTION: Demonstrates how to use the setMode() function to set the style mode of a Stencil component. This example sets the mode based on an attribute of the element.

LANGUAGE: typescript
CODE:
import { setMode } from '@stencil/core'

// set mode based on a property
setMode((el) => el.getAttribute('mode'));

----------------------------------------

TITLE: Rollup Configuration for Custom Elements
DESCRIPTION: Example Rollup configuration for consuming custom elements, including asset management.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Creating a Basic Form Component in Stencil
DESCRIPTION: This snippet demonstrates how to create a basic form component with a single text input and submit button. It shows state management, form submission handling, and input change handling.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Implementing Advanced Form Handling in Stencil Component
DESCRIPTION: This snippet showcases an advanced form implementation in a Stencil component. It includes multiple input types (text, email, select), state management for different inputs, and basic input validation using the constraint validation API.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Host Element Styling - Shadow DOM
DESCRIPTION: Demonstrates how to style the host element when using Shadow DOM with the :host selector.

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Initializing and Communicating with a Vanilla Web Worker in JavaScript
DESCRIPTION: This snippet demonstrates how to create a new Web Worker instance and set up basic communication using postMessage and onmessage event handlers.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Importing and Exporting Generated Angular Wrappers
DESCRIPTION: Shows how to import and export the generated Angular component wrappers in the main Angular module.

LANGUAGE: typescript
CODE:
import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Creating a Stencil Store in TypeScript
DESCRIPTION: Example of creating a store with initial state, defining a change handler, and exporting the state object.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Jest Test with Inline Mock Factory
DESCRIPTION: Test implementation using Jest's mock functionality with an inline mock factory approach.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Loading Stencil Configuration
DESCRIPTION: Presents the function signature for loadConfig(), which transforms raw config information into a usable config object for the compiler and dev-server.

LANGUAGE: typescript
CODE:
loadConfig(init?: LoadConfigInit): Promise<LoadConfigResults>

----------------------------------------

TITLE: Using CSS Parts in Stencil Components
DESCRIPTION: Shows how to use CSS parts to allow greater style customization from the light DOM, including the use of the 'part' attribute and ::part() pseudo-element.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: This snippet shows how to add the dist-custom-elements output target to a Stencil project's configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Skip Function Usage in Playwright Tests
DESCRIPTION: Demonstrates how to use the skip utility to conditionally skip tests based on browser type or component mode.

LANGUAGE: typescript
CODE:
test('my-test', ({ page, skip }) => {
    // Skip tests for certain browsers
    skip.browser('firefox', 'This behavior is not available on Firefox');

    // Skip tests for certain modes
    skip.mode('md', 'This behavior is not available in Material Design');

    ...
})

----------------------------------------

TITLE: Basic Web Worker Usage with TypeScript
DESCRIPTION: Example of vanilla Web Worker implementation using the browser's Worker API.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Custom Service Worker with Update Handling (JavaScript)
DESCRIPTION: Custom Service Worker implementation that listens for 'skipWaiting' message to handle updates.

LANGUAGE: javascript
CODE:
importScripts("workbox-v4.3.1/workbox-sw.js");

self.addEventListener("message", ({ data }) => {
  if (data === "skipWaiting") {
    self.skipWaiting();
  }
});

self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Prop Types in Stencil
DESCRIPTION: Examples of different prop types including boolean, number, string, and objects

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() isComplete: boolean;
    @Prop() timesCompletedInPast: number;
    @Prop() thingToDo: string;
    @Prop() myHttpService: MyHttpService;
}

----------------------------------------

TITLE: Configuring Project Structure with Monorepo
DESCRIPTION: Example directory structure for a monorepo containing Stencil and React libraries

LANGUAGE: plaintext
CODE:
top-most-directory/
└── packages/
    ├── stencil-library/
    │   ├── stencil.config.js
    │   └── src/components/
    └── react-library/
        └── src/
            ├── components/
            └── index.ts

----------------------------------------

TITLE: Configuring Visual Service in WebdriverIO Configuration
DESCRIPTION: Example of adding the visual service to the services list in the WebdriverIO configuration file (wdio.conf.ts).

LANGUAGE: typescript
CODE:
export const config: Options.Testrunner = {
    // ...
    services: [
        'visual',
        // other services...
    ],
    // ...
}

----------------------------------------

TITLE: Project Structure Example
DESCRIPTION: Example directory structure showing recommended monorepo layout for Stencil and Vue libraries

LANGUAGE: plaintext
CODE:
top-most-directory/
└── packages/
    ├── vue-library/
    │   └── lib/
    │       ├── plugin.ts
    │       └── index.ts
    └── stencil-library/
        ├── stencil.config.js
        └── src/components

----------------------------------------

TITLE: Testing with Mocked Function in Stencil using Jest
DESCRIPTION: Jest test that demonstrates mocking a custom utility function and testing a service that uses it. It shows how to use jest.mock() to apply the mock before importing the tested module.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: CSS Parts Implementation
DESCRIPTION: Demonstrates using CSS parts for enhanced component style customization from outside the shadow DOM.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Configuring VS Code Browser Debugging for Stencil
DESCRIPTION: Launch configuration for debugging Stencil components in Chrome browser. Sets up sourcemap handling and localhost connection on port 3333.

LANGUAGE: json
CODE:
{
  "type": "chrome",
  "request": "launch",
  "name": "Launch Chrome against localhost",
  "url": "http://localhost:3333",
  "sourceMaps": true,
  "sourceMapPathOverrides": {
    "*": "${webRoot}/*"
  }
}

----------------------------------------

TITLE: Subscribing User to Push Service
DESCRIPTION: Function to subscribe a user to the browser's push service, generating a subscription object to be sent to the backend for push notification handling.

LANGUAGE: javascript
CODE:
async function subscribeUser() {
  if ('serviceWorker' in navigator) {
    const registration = await navigator.serviceWorker.ready;

    const subscription = await registration.pushManager
      .subscribe({ userVisibleOnly: true })
      .catch(console.error);

    if (!subscription) {
      return;
    }

    // the subscription object is what we want to send to our backend
    console.log(subscription.endpoint);
  }
}

----------------------------------------

TITLE: Configuring Stencil Copy Task for Asset Management
DESCRIPTION: Demonstrates how to set up a Stencil copy task in the config file to copy asset files to the distribution directory during build.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
  // ...
};

----------------------------------------

TITLE: Component Asset Configuration with assetsDirs
DESCRIPTION: Shows how to configure a Stencil component to use assets from a specific directory using the assetsDirs property and getAssetPath.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Generating a Stencil Component via CLI
DESCRIPTION: Demonstrates how to use the Stencil CLI to generate a new component. The command creates a component with the specified name in the src/components directory.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Resolving Asset Paths with getAssetPath in TypeScript
DESCRIPTION: Demonstrates how to use getAssetPath to resolve different asset paths relative to the build directory.

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Worker with External Dependencies
DESCRIPTION: Example of creating a worker that imports external dependencies and local modules.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Example Telemetry Data Structure in JavaScript
DESCRIPTION: Sample JSON structure showing the telemetry data collected by Stencil CLI, including system information, build details, and usage metrics. Demonstrates the anonymous nature of collected data including command arguments, dependency versions, and system specifications.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Creating Vue Plugin for Component Registration
DESCRIPTION: Vue plugin implementation to register custom elements and apply polyfills.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Custom Rollup Plugin Configuration in Stencil
DESCRIPTION: This snippet demonstrates how to configure custom Rollup plugins in the Stencil config file. It shows how to add plugins before node-resolve and after commonjs transform.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Basic Component Testing with newSpecPage in TypeScript
DESCRIPTION: Demonstrates basic component testing using newSpecPage utility from Stencil. Shows how to test a component's rendered HTML output using Jest assertions.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Using Web Worker Functions in a Stencil Component
DESCRIPTION: Demonstrates how to import and use Web Worker functions within a Stencil component, leveraging Stencil's automatic worker proxying.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Testing a Stencil Component with JSX Template in newSpecPage()
DESCRIPTION: This example shows how to use the template option in newSpecPage() to test a component with JSX syntax. It renders the MyCmp component with a greeting prop and verifies the output HTML.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Running WebdriverIO Tests in Bash
DESCRIPTION: Command to execute WebdriverIO tests using the npm script created during setup.

LANGUAGE: bash
CODE:
npm run wdio

----------------------------------------

TITLE: Using Worker Callbacks in a Stencil Component
DESCRIPTION: Shows how to use a Web Worker function with a callback in a Stencil component to receive progress updates.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { countDown } from '../countdown.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    const startNum = 5;
    console.log('start', startNum);

    countDown(startNum, (p) => {
      console.log('progress', p);
    }).then(result => {
      console.log('finish', result);
    });
  }
}

----------------------------------------

TITLE: Dynamic State Updates with Lifecycle Methods
DESCRIPTION: Shows how to properly update @State() values using component lifecycle methods. Implements a timer to update the current time every second.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Configuring Vitest for Stencil
DESCRIPTION: Configuration setup for Vitest to enable browser testing with Stencil components

LANGUAGE: typescript
CODE:
import stencil from 'unplugin-stencil/vite'
import { defineConfig } from 'vitest/config'

export default defineConfig({
    test: {
        browser: {
            enabled: true,
            headless: true,
            name: 'chrome'
        },
    },
    plugins: [stencil()]
})

----------------------------------------

TITLE: Configuring Meta Tags with Stencil Prerender Hook
DESCRIPTION: Example showing how to use the afterHydrate prerender hook to dynamically set document title based on URL pathname. The hook receives document and URL objects as parameters and can modify the document before HTML serialization.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Installing Stencil Store with NPM
DESCRIPTION: Command to install @stencil/store package as a development dependency

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Manipulating Children in Stencil Functional Components
DESCRIPTION: Demonstrates how to use Stencil's utility functions to transform child elements within a functional component.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Configuring Stencil Output Target
DESCRIPTION: Configuration for the Vue output target in Stencil config to generate Vue component wrappers.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: CLI Command for JSON Documentation Generation
DESCRIPTION: Shows how to generate JSON documentation using the Stencil CLI command

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: CSS Parts Implementation
DESCRIPTION: Example of implementing CSS parts for flexible component styling from outside the shadow DOM

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Registering Custom Elements in Angular Module
DESCRIPTION: Example of registering Stencil custom elements during Angular app initialization

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Installing Ionic Framework Dependencies
DESCRIPTION: Command to install the Ionic Framework core package using npm or yarn

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Valid and Invalid Public Method Definitions in Stencil
DESCRIPTION: Examples of valid and invalid ways to define public methods using the @Method() decorator in Stencil. Public methods must be async or return a Promise.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Importing Stencil Core Compiler in NodeJS
DESCRIPTION: Demonstrates how to import the Stencil Core Compiler in a NodeJS environment using CommonJS syntax.

LANGUAGE: javascript
CODE:
// NodeJS (commonjs)
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Defining Web Worker Functions in Stencil (TypeScript)
DESCRIPTION: This example shows how to define functions in a Stencil Web Worker file. It includes an async sum function and an expensiveTask function that operates on an ArrayBuffer.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: CLI Command for JSON Documentation Generation
DESCRIPTION: Shows how to generate JSON documentation using the Stencil CLI command

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Initializing TypeScript Configuration for Vue Library
DESCRIPTION: Root TypeScript configuration file for the Vue component wrapper library project.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Configuring package.json for Stencil Component Library Distribution
DESCRIPTION: Example of a package.json configuration for a Stencil component library, including entry points for various module formats, types, and CDN access. This setup facilitates easy integration with different build tools and frameworks.

LANGUAGE: json
CODE:
{
  "main": "dist/index.cjs.js",
  "module": "dist/index.js",
  "es2015": "dist/esm/index.mjs",
  "es2017": "dist/esm/index.mjs",
  "types": "dist/types/components.d.ts",
  "unpkg": "dist/my-project-name/my-project-name.esm.js",
  "collection:main": "dist/collection/index.js",
  "collection": "dist/collection/collection-manifest.json",
  "files": [
    "dist/",
    "css/",
    "loader/"
  ]
}

----------------------------------------

TITLE: Configuring assetsDirs in Stencil Component
DESCRIPTION: Shows how to configure the assetsDirs option in a Stencil component to specify directories containing required assets.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Using Angular Wrapper Components
DESCRIPTION: Example of importing and using the generated Angular wrapper components in an application.

LANGUAGE: typescript
CODE:
import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

LANGUAGE: html
CODE:
<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Toggle Button State Management
DESCRIPTION: Example combining @State and @Listen decorators to create a toggle button component that updates its state based on click events.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Stencil Worker Module Implementation
DESCRIPTION: Example of a Stencil worker module with async functions that can be executed in a separate thread.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Writing a Jest Test with Mocked Utility in TypeScript
DESCRIPTION: Example of a Jest test that uses the mocked 'getRandomInt' function. It demonstrates how to apply the mock and test the 'bar' function that uses it.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Basic Stencil Component Definition in TypeScript
DESCRIPTION: Shows the basic structure of defining a Stencil component using the @Component decorator with minimal configuration.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Using Build Conditionals in Stencil for Prerendering
DESCRIPTION: This TSX code demonstrates how to use the Build.isBrowser conditional to differentiate between browser and prerendering environments in Stencil. It helps avoid running certain code during prerendering.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Running Specific Stencil Tests via Command Line
DESCRIPTION: Examples of running specific unit and end-to-end tests using Stencil's CLI with Jest options.

LANGUAGE: sh
CODE:
# run a single unit test
npx stencil test --spec -- src/components/my-component/my-component.spec.ts
# run a single e2e test
npx stencil test --e2e -- src/components/my-component/my-component.e2e.ts

----------------------------------------

TITLE: Writing Visual Test for StencilJS Component
DESCRIPTION: Example of a visual test for a StencilJS component using the toMatchElementSnapshot matcher provided by @wdio/visual-service.

LANGUAGE: typescript
CODE:
it('should match visual snapshot', async () => {
    const page = await browser.newPage();
    await page.setContent('<my-component first="Stencil" last="JS"></my-component>');
    await page.waitForSelector('my-component');
    const element = await page.$('my-component');
    await expect(element).toMatchElementSnapshot('MyComponent');
});

----------------------------------------

TITLE: Configuring Chrome Debugger for Stencil Components
DESCRIPTION: VS Code launch configuration for debugging Stencil components in Chrome browser. Sets up debugger to connect to localhost:3333 with source map support.

LANGUAGE: json
CODE:
{
  "type": "chrome",
  "request": "launch",
  "name": "Launch Chrome against localhost",
  "url": "http://localhost:3333",
  "sourceMaps": true,
  "sourceMapPathOverrides": {
    "*": "${webRoot}/*"
  }
}

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript interface for the CopyTask configuration used in Stencil's output targets. It defines the structure and available options for copy tasks.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Toggle Button State Management
DESCRIPTION: Example of combining @State() with @Listen() decorator to handle click events and toggle state in a button component.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Setting Component Props in E2E Tests
DESCRIPTION: Shows how to set properties on a component during an E2E test using Puppeteer's $eval method. This example sets 'first' and 'lastName' properties on a 'prop-cmp' component.

LANGUAGE: typescript
CODE:
await page.setContent(`
      <prop-cmp></prop-cmp>
    `);

await page.$eval('prop-cmp', (elm: any) => {
  elm.first = 'Marty';
  elm.lastName = 'McFly';
});

await page.waitForChanges();

----------------------------------------

TITLE: Custom Service Worker Boilerplate
DESCRIPTION: Basic boilerplate code for a custom Service Worker implementation using Workbox. This code imports Workbox and sets up precaching.

LANGUAGE: javascript
CODE:
// change to the version you get from `npm ls workbox-build`
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Initializing Basic Form-Associated Component in Stencil
DESCRIPTION: Basic setup of a form-associated component using the @Component decorator with formAssociated property set to true.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Handling Service Worker Updates in Stencil Component
DESCRIPTION: Implementation of a listener for Service Worker updates in a Stencil component. This code shows a toast notification when an update is available and handles the update process.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    // If there is no waiting registration, this is the first service
    // worker being installed.
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Unit Testing a Stencil Component with WebdriverIO
DESCRIPTION: This snippet demonstrates how to set up a unit test for a Stencil component using WebdriverIO. It shows importing the component, rendering it, and making assertions on its content.

LANGUAGE: typescript
CODE:
import { render } from '@wdio/browser-runner/stencil';
import { MyComponent } from './my-component';

describe('MyComponent', () => {
    it('should work', async () => {
        // Arrange
        const { root } = await render({
            components: [MyComponent],
            template: () => <my-component first="Stencil" last="'Don't call me a framework' JS" />
        });

        // Act
        const elem = await root.findElement('css selector', 'my-component');

        // Assert
        await expect(elem).toHaveText(`Hello, World! I'm Stencil 'Don't call me a framework' JS`);
    });
});

----------------------------------------

TITLE: Configuring Output Targets in Stencil
DESCRIPTION: This snippet demonstrates how to configure multiple output targets in a Stencil project's configuration file. It shows setting up both 'dist' and 'www' output types.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Using getAssetPath in a Stencil Component
DESCRIPTION: Illustrates how to use the getAssetPath() function to resolve local asset paths within a Stencil component. This is useful for loading images or other assets relative to the component.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Component with Asset Directory Configuration
DESCRIPTION: Example of a Stencil component using assetsDirs to configure asset directories and load images dynamically.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Configuring Stencil Vue Output Target
DESCRIPTION: Configuration for generating Vue component wrappers in Stencil config file

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Functional Component with Children in Stencil
DESCRIPTION: Illustrates a functional component that accepts both props and children, returning an array of JSX elements.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Creating Vue Plugin for Custom Elements Registration
DESCRIPTION: Vue plugin implementation for registering Stencil custom elements and applying polyfills

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Data Binding in Stencil JSX
DESCRIPTION: Shows how to bind dynamic data in JSX using curly braces syntax.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

----------------------------------------

TITLE: Stencil Component Using Web Worker
DESCRIPTION: Demonstrates how to import and use Web Worker functions within a Stencil component.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3
    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Basic E2E Test Setup in TypeScript
DESCRIPTION: Demonstrates the basic structure of an E2E test for a Stencil component using newE2EPage utility to render and test a component.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Valid and Invalid Public Method Implementations in Stencil
DESCRIPTION: Illustrates valid and invalid ways to implement public methods in Stencil components. Public methods must be async or return a Promise.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Documenting Component Properties with JSDoc in TypeScript/Stencil
DESCRIPTION: Example showing how to add documentation to a Stencil component property using JSDoc comments. The comment will be automatically extracted by the compiler to generate documentation.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Testing Functional Components in Stencil
DESCRIPTION: Demonstrates how to test functional components in Stencil. It shows rendering of imported and inline-defined functional components using newSpecPage().

LANGUAGE: tsx
CODE:
import { Fragment, h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyFunctionalComponent } from '../my-functional-cmp';

it('should render my component', async () => {
  const AnotherFunctionalComponent = (props: any, children: typeof Fragment) => (
    <section>{children}</section>
  );

  const page = await newSpecPage({
    components: [],
    template: () => (
      <AnotherFunctionalComponent>
        <MyFunctionalComponent>Hello World!</MyFunctionalComponent>
      </AnotherFunctionalComponent>
    ),
  });
  expect(page.root).toEqualHtml(`
    <section>
      <div>
        Hello World!
      </div>
    </section>
  `);
});

----------------------------------------

TITLE: Optimizing CSS with Stencil Compiler
DESCRIPTION: Demonstrates the usage of the optimizeCss() utility function for CSS optimization in the Stencil compiler.

LANGUAGE: typescript
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Running Static Build in Stencil
DESCRIPTION: Demonstrates how to use the --prerender flag with the Stencil build command to enable prerendering of components.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Basic Stencil Output Target Configuration in TypeScript
DESCRIPTION: Demonstrates how to configure multiple output targets in a Stencil configuration file, including both distribution and website builds.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Using getAssetPath in Stencil Component
DESCRIPTION: Demonstrates how to use the getAssetPath() function to get the path to local assets in a Stencil component. This is useful for referencing assets like images or other files in your component.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Accessing Raw Worker Instance in Stencil
DESCRIPTION: This snippet shows how to access the actual Worker instance in Stencil for manual postMessage() usage. It demonstrates importing both the proxied functions and the raw worker instance.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';

import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {

  componentWillLoad() {
    worker.postMessage(['send data manually']);

    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Slots Implementation in Stencil
DESCRIPTION: Examples of using slots for content projection in Stencil components, including basic and named slots.

LANGUAGE: tsx
CODE:
// my-component.tsx

render() {
  return (
    <div>
      <h2>A Component</h2>
      <div><slot /></div>
    </div>
  );
}

LANGUAGE: tsx
CODE:
render(){
  return(
    <my-component>
      <p>Child Element</p>
    </my-component>
  )
}

----------------------------------------

TITLE: Shadow DOM CSS Styling Example
DESCRIPTION: Demonstrates basic CSS styling within a Shadow DOM component using the :host selector and simple element selectors.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Standalone Component Import and Registration
DESCRIPTION: Shows how to import and register standalone Stencil components using the custom elements build.

LANGUAGE: typescript
CODE:
import { MyComponent, defineCustomElementMyComponent } from 'my-design-system'

// register to CustomElementRegistry
defineCustomElementMyComponent()

// or extend custom element via
class MyCustomComponent extends MyComponent {
  // ...
}
define('my-custom-component', MyCustomComponent)

----------------------------------------

TITLE: E2E Test Using page.setContent() for Stencil Component
DESCRIPTION: Shows an end-to-end test for a Stencil component using the page.setContent() method to define HTML content directly in the test.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    await page.setContent('<my-component first="Stencil"></my-component>');

    // Rest of test
  });
});

----------------------------------------

TITLE: Complex E2E Test Example with Event Handling
DESCRIPTION: Comprehensive E2E test example demonstrating component property manipulation, class checking, and event spying. Tests an ion-toggle component's functionality.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Complex E2E Test Example with Event Handling
DESCRIPTION: Comprehensive E2E test example demonstrating component property manipulation, class checking, and event spying. Tests an ion-toggle component's functionality.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Screenshot Connector Interface Definition (TSX)
DESCRIPTION: Defines the interface for the ScreenshotConnector, listing all the methods that can be overridden in a custom connector implementation. These methods control various aspects of the screenshot testing process.

LANGUAGE: tsx
CODE:
export interface ScreenshotConnector {
  initBuild(opts: ScreenshotConnectorOptions): Promise<void>;

  pullMasterBuild(): Promise<void>;

  getMasterBuild(): Promise<ScreenshotBuild>;

  getScreenshotCache(): Promise<ScreenshotCache>;

  completeBuild(masterBuild: ScreenshotBuild): Promise<ScreenshotBuildResults>;
  
  publishBuild(buildResults: ScreenshotBuildResults): Promise<ScreenshotBuildResults>;

  updateScreenshotCache(screenshotCache: ScreenshotCache, buildResults: ScreenshotBuildResults): Promise<ScreenshotCache>;

  generateJsonpDataUris(build: ScreenshotBuild): Promise<void>;
}

----------------------------------------

TITLE: Generating Stencil Component with CLI
DESCRIPTION: Demonstrates how to use the Stencil CLI to generate a new component with a specified tag name. This command creates the component files in the src/components directory.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Configuring VS Code Chrome Debugger for Stencil
DESCRIPTION: Launch configuration for debugging Stencil components in Chrome browser. Sets up sourcemap handling and localhost connection on port 3333.

LANGUAGE: json
CODE:
{
  "type": "chrome",
  "request": "launch",
  "name": "Launch Chrome against localhost",
  "url": "http://localhost:3333",
  "sourceMaps": true,
  "sourceMapPathOverrides": {
    "*": "${webRoot}/*"
  }
}

----------------------------------------

TITLE: Using getAssetPath in Stencil Component
DESCRIPTION: Illustrates how to use the getAssetPath function to retrieve the path to local assets in a Stencil component. This example shows how to dynamically set an image source based on a component property.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Running Specific Stencil Tests via Command Line
DESCRIPTION: Examples of running specific unit and end-to-end tests using Stencil's CLI with Jest options.

LANGUAGE: sh
CODE:
# run a single unit test
npx stencil test --spec -- src/components/my-component/my-component.spec.ts
# run a single e2e test
npx stencil test --e2e -- src/components/my-component/my-component.e2e.ts

----------------------------------------

TITLE: Using Fragments in Stencil Components
DESCRIPTION: Demonstrates using Fragment component to group elements without a wrapper node in a Stencil component render method.

LANGUAGE: tsx
CODE:
import { Component, Fragment, h } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Using Rollup Plugin for Asset Copying in Stencil
DESCRIPTION: Shows how to use the rollup-plugin-copy NPM module to copy asset files to the distribution directory during the Stencil build process.

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Using Stencil Components in Vue Templates
DESCRIPTION: Use the wrapped Stencil components in Vue templates.

LANGUAGE: html
CODE:
<template>
  <my-component first="Your" last="Name"></my-component>
</template>

----------------------------------------

TITLE: Using a Functional Component with Children in Stencil JSX
DESCRIPTION: Demonstrates passing child elements to a functional component in JSX.

LANGUAGE: tsx
CODE:
<Hello name="World">
  <p>I'm a child element.</p>
</Hello>

----------------------------------------

TITLE: Basic Web Worker Implementation in Vanilla JavaScript
DESCRIPTION: Demonstrates the basic usage of Web Workers using the native browser API with message passing.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Creating a Stencil Component Library
DESCRIPTION: Commands to create and set up a Stencil component library within the monorepo structure.

LANGUAGE: bash
CODE:
cd packages/
npm init stencil components stencil-library
cd stencil-library
# Install dependencies
npm install

----------------------------------------

TITLE: Managing Complex State Types
DESCRIPTION: Demonstrates using @State with complex types and arrays, showing proper state updates and rendering of lists.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Private Method Implementation in Stencil Components
DESCRIPTION: Demonstrates how to implement private methods in a Stencil component that don't require the @Method decorator or async functionality.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Setting Nonce for Custom Elements Output in Angular (TypeScript)
DESCRIPTION: This example shows how to set a nonce for the 'dist-custom-elements' output target in a Stencil project within an Angular application. It imports necessary functions and components, then uses setNonce to apply the nonce.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: Example of CSS styling within a Shadow DOM component, demonstrating scoped styles and the use of the :host selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Importing and Initializing Stencil Components in ESM
DESCRIPTION: Example of how to import and initialize Stencil components in an ESM context using the generated loader. This code demonstrates setting a nonce for CSP, applying polyfills, and defining custom elements.

LANGUAGE: typescript
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Configuring Playwright Tests for Stencil
DESCRIPTION: Example showing how to create and customize a Playwright test configuration for Stencil projects. Demonstrates overriding default settings while maintaining Stencil-specific configurations.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

expect.extend(matchers);

export default createConfig({
  // Change which test files Playwright will execute
  testMatch: '*.spec.ts',

  webServer: {
    // Only wait max 30 seconds for server to start
    timeout: 30000,
  },
});

----------------------------------------

TITLE: Applying Stylesheets to a Stencil Component
DESCRIPTION: These snippets show different ways to apply stylesheets to a Stencil component using styleUrl, styleUrls, and inline styles.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrl: './todo-list.css',
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrls: ['./todo-list-1.css', './todo-list-2.css']
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrls: {
     ios: 'todo-list-1.ios.scss',
     md: 'todo-list-2.md.scss',
  }
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styles: 'div { background-color: #fff }'
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Custom Rollup Plugin Configuration in Stencil
DESCRIPTION: This snippet shows how to configure custom Rollup plugins in the Stencil configuration file. It demonstrates adding plugins before and after the built-in plugins.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Implementing Module Mocks in WebdriverIO Tests
DESCRIPTION: Demonstrates how to mock both local project files and external modules using WebdriverIO's mocking functions. Shows mocking a local utility function to return a fixed value and mocking an external module using a manual mock file.

LANGUAGE: typescript
CODE:
import { mock, fn } from '@wdio/browser-runner'
import { format } from './utils/utils.ts'

// mock files within the project
mock('./utils/utils.ts', () => ({
    format: fn().mockReturnValue(42)
}))
// mock whole modules and replace functionality with what is defined in `./__mocks__/leftpad.ts`
mock('leftpad')

console.log(format()) // returns `42`

----------------------------------------

TITLE: Asset Resolution Example with getAssetPath
DESCRIPTION: Demonstrates how to use getAssetPath API to resolve asset paths relative to the build directory

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Prop Validation in Stencil
DESCRIPTION: Shows how to implement prop validation using the @Watch decorator

LANGUAGE: tsx
CODE:
import { Component, Prop, Watch, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class TodoList {
  @Prop() thingToDo!: string;

  @Watch('thingToDo')
  validateName(newValue: string, _oldValue: string) {
    const isBlank = typeof newValue !== 'string' || newValue === '';
    if (isBlank) { throw new Error('thingToDo is required and cannot be empty') };
    const has2chars = typeof newValue === 'string' && newValue.length >= 2;
    if (!has2chars) { throw new Error('thingToDo must have length > 1') };
  }
}

----------------------------------------

TITLE: Screenshot Connector Interface Definition
DESCRIPTION: Complete interface definition for the ScreenshotConnector showing all available methods that can be overridden.

LANGUAGE: tsx
CODE:
export interface ScreenshotConnector {
  initBuild(opts: ScreenshotConnectorOptions): Promise<void>;

  pullMasterBuild(): Promise<void>;

  getMasterBuild(): Promise<ScreenshotBuild>;

  getScreenshotCache(): Promise<ScreenshotCache>;

  completeBuild(masterBuild: ScreenshotBuild): Promise<ScreenshotBuildResults>;
  
  publishBuild(buildResults: ScreenshotBuildResults): Promise<ScreenshotBuildResults>;

  updateScreenshotCache(screenshotCache: ScreenshotCache, buildResults: ScreenshotBuildResults): Promise<ScreenshotCache>;

  generateJsonpDataUris(build: ScreenshotBuild): Promise<void>;
}

----------------------------------------

TITLE: Configuring TypeScript for Jest Types in JSON
DESCRIPTION: JSON configuration to add Jest types to tsconfig.json, resolving type clashes between WebdriverIO's Mocha and Stencil's Jest.

LANGUAGE: json
CODE:
"types": ["jest"]

----------------------------------------

TITLE: Configuring Stencil Dev Server with HTTPS and Custom Port
DESCRIPTION: Example configuration for Stencil's dev server showing how to set up HTTPS with SSL certificates and customize the port. The code demonstrates setting reload strategy, port number, and SSL certificate configuration.

LANGUAGE: tsx
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8')
    }
  }
};

----------------------------------------

TITLE: Asset Management in Stencil Components
DESCRIPTION: Shows how to configure and use assets in a Stencil component using assetsDirs and getAssetPath.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: VS Code Launch Configuration for Stencil Tests
DESCRIPTION: Configuration for VS Code's launch.json to enable debugging of Stencil tests directly in the IDE, supporting both E2E and spec tests.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "E2E Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--e2e", "--", "--maxWorkers=0", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Spec Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--spec", "--", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

----------------------------------------

TITLE: Node Polyfills Plugin Configuration in Stencil
DESCRIPTION: Example of installing and configuring the rollup-plugin-node-polyfills plugin in a Stencil project to handle Node.js APIs in the browser.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Using Custom JSDoc Tags in Stencil Components
DESCRIPTION: Example of using custom JSDoc tags in a Stencil component. These custom tags are included in the JSON documentation output without additional configuration.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Configuring Angular Output Target in Stencil Config
DESCRIPTION: Add the angularOutputTarget configuration to the outputTargets array in stencil.config.ts. This sets up the generation of Angular component wrappers for Stencil components.

LANGUAGE: TypeScript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Importing Component Library in TypeScript
DESCRIPTION: Shows how to import a Stencil component library in a TypeScript application.

LANGUAGE: typescript
CODE:
import 'my-design-system';

----------------------------------------

TITLE: Mocking a Custom Helper Function in Stencil
DESCRIPTION: This code creates a mock for the 'getRandomInt' function, replacing its implementation with a function that always returns 42. It demonstrates how to mock custom code.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation in Stencil
DESCRIPTION: This snippet shows how to configure a Stencil project to validate the primary package output target. It sets the 'dist' output target as the primary one for validation and enables the validation feature in the config.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Configuring Prerender Debug Settings
DESCRIPTION: Configuration for debugging Stencil's prerender process, including crawler settings and runtime logging options.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Defining Testing Configuration Interface in TypeScript
DESCRIPTION: TypeScript interface definitions for Stencil's testing configuration, extending Jest's config with additional options for e2e testing, screenshot comparison, and browser emulation settings.

LANGUAGE: typescript
CODE:
export interface TestingConfig extends JestConfig {
  /**
   * The `allowableMismatchedPixels` value is used to determine an acceptable
   * number of pixels that can be mismatched before the image is considered
   * to have changes. Realistically, two screenshots representing the same
   * content may have a small number of pixels that are not identical due to
   * anti-aliasing, which is perfectly normal. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedPixels?: number;

  /**
   * The `allowableMismatchedRatio` ranges from `0` to `1` and is used to
   * determine an acceptable ratio of pixels that can be mismatched before
   * the image is considered to have changes. Realistically, two screenshots
   * representing the same content may have a small number of pixels that
   * are not identical due to anti-aliasing, which is perfectly normal. The
   * `allowableMismatchedRatio` is the number of pixels that were mismatched,
   * divided by the total number of pixels in the screenshot. For example,
   * a ratio value of `0.06` means 6% of the pixels can be mismatched before
   * the image is considered to have changes. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedRatio?: number;

  /**
   * Matching threshold while comparing two screenshots. Value ranges from `0` to `1`.
   * Smaller values make the comparison more sensitive. The `pixelmatchThreshold`
   * value helps to ignore anti-aliasing. Default: `0.1`
   */
  pixelmatchThreshold?: number;

  /**
   * Additional arguments to pass to the browser instance.
   */
  browserArgs?: string[];

  /**
   * Path to a Chromium or Chrome executable to run instead of the bundled Chromium.
   */
  browserExecutablePath?: string;

  /**
   * Whether to run browser e2e tests in headless mode.
   *
   * `headless` is an argument passed through to Puppeteer (which is passed to Chrome) for
   * end-to-end testing. Prior to Chrome v112, `headless` was treated like a boolean flag.
   * Starting with Chrome v112, 'new' is an accepted option to support Chrome's new
   * headless mode.
   *
   * The following values are accepted:
   * - "new" - enables the "new" headless mode, starting with Chrome 112
   * - `true` - enables the "old" headless mode, prior to Chrome 112
   * - `false` - enables the "headful" mode
   *
   * Stencil will default to `true` (the old headless mode) if no value is provided.
   *
   * In the future, Chrome will enable the new headless mode by default, even when `true`
   * is provided.
   *
   * {@see https://developer.chrome.com/articles/new-headless/}
   */
  browserHeadless?: boolean;

  /**
   * Whether to auto-open a DevTools panel for each tab.
   * If this option is true, the headless option will be set false
   */
  browserDevtools?: boolean;

  /**
   * Slows down e2e browser operations by the specified amount of milliseconds.
   * Useful so that you can see what is going on.
   */
  browserSlowMo?: number;

  /**
   * Array of browser emulations to be used during _screenshot_ tests. A full screenshot
   * test is run for each emulation.
   * 
   * To emulate a device display for your e2e tests, use the `setViewport` method on a test's E2E page.
   */
  emulate?: EmulateConfig[];

  /**
   * Path to the Screenshot Connector module.
   */
  screenshotConnector?: string;
}

export interface EmulateConfig {
  /**
   * Predefined device descriptor name, such as "iPhone X" or "Nexus 10".
   * For a complete list please see: https://github.com/puppeteer/puppeteer/blob/main/src/DeviceDescriptors.ts
   */
  device?: string;

  /**
   * User-Agent to be used. Defaults to the user-agent of the installed Puppeteer version.
   */
  userAgent?: string;

  viewport?: EmulateViewport;
}


export interface EmulateViewport {

  /**
   * Page width in pixels.
   */
  width: number;

  /**
   * page height in pixels.
   */
  height: number;

  /**
   * Specify device scale factor (can be thought of as dpr). Defaults to 1.
   */
  deviceScaleFactor?: number;

  /**
   * Whether the meta viewport tag is taken into account. Defaults to false.
   */
  isMobile?: boolean;

  /**
   * Specifies if viewport supports touch events. Defaults to false
   */
  hasTouch?: boolean;

  /**
   * Specifies if viewport is in landscape mode. Defaults to false.
   */
  isLandscape?: boolean;

}

----------------------------------------

TITLE: Custom Service Worker with Update Handling
DESCRIPTION: Custom service worker implementation that listens for the 'skipWaiting' message to activate the new service worker version.

LANGUAGE: javascript
CODE:
importScripts("workbox-v4.3.1/workbox-sw.js");

self.addEventListener("message", ({ data }) => {
  if (data === "skipWaiting") {
    self.skipWaiting();
  }
});

self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Generating a Stencil Component in Subfolder Using CLI
DESCRIPTION: Shows how to generate a Stencil component in a specific subfolder using the CLI. It creates a component named 'page-home' in the 'pages' subfolder and explains the resulting directory structure.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: Example of how to add the dist-custom-elements output target to a Stencil project's configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Configuring Testing Settings in stencil.config.ts
DESCRIPTION: Reference to the Stencil compiler's public testing configuration interface. This shows the available options for configuring Jest and E2E tests in a Stencil project.

LANGUAGE: tsx
CODE:
https://github.com/ionic-team/stencil/blob/32811591777de726f0374649a4f5e250a0a8e355/src/declarations/stencil-public-compiler.ts#L1968-L2119

----------------------------------------

TITLE: Installing Stencil Store via NPM
DESCRIPTION: Command to install @stencil/store as a development dependency in your project.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Setting Props Manually in Non-JSX Element
DESCRIPTION: Demonstrates how to manually set object and array props on a Stencil component in a non-JSX environment using JavaScript.

LANGUAGE: markup
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Semantic Version Format Example
DESCRIPTION: Demonstrates the format of Semantic Versioning using the major.minor.patch convention. The major version changes for incompatible API changes, minor for new backwards-compatible features, and patch for backwards-compatible bug fixes.

LANGUAGE: text
CODE:
major.minor.patch

----------------------------------------

TITLE: Accessing Stencil Core Version
DESCRIPTION: Shows how to access the current version of @stencil/core as a string.

LANGUAGE: typescript
CODE:
version: string

----------------------------------------

TITLE: Documenting CSS Variables in Stencil Components
DESCRIPTION: Example of documenting CSS variables using JSDoc-style comments in a CSS file for a Stencil component. This allows automatic documentation of CSS custom properties.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Marking a Stencil Component as Deprecated
DESCRIPTION: Use the @deprecated JSDoc tag to mark a component as deprecated, which will be reflected in the generated README.

LANGUAGE: typescript
CODE:
/**
 * @deprecated since v2.0.0
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Adding CSP Nonce Meta Tag for SSR
DESCRIPTION: Demonstrates how to add a meta tag with the CSP nonce for Server-Side Rendering (SSR). This tag should be injected into the header on each page request.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Resulting Playwright Configuration for Stencil
DESCRIPTION: Shows the resulting configuration after applying overrides to the default Stencil Playwright configuration. This illustrates how the deep merge works, particularly for nested objects like webServer.

LANGUAGE: typescript
CODE:
{
  testMatch: '*.spec.ts',
  use: {
    baseURL: 'http://localhost:3333',
  },
  webServer: {
    command: 'stencil build --dev --watch --serve --no-open',
    url: 'http://localhost:3333/ping',
    reuseExistingServer: !process.env.CI,
    // Only timeout gets overridden, not the entire object
    timeout: 30000,
  },
}

----------------------------------------

TITLE: Demonstrating File Structure for Stencil Components
DESCRIPTION: This snippet shows the recommended file structure for organizing Stencil components. It illustrates how to separate components into individual directories and include related files such as CSS and tests.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: Example configuration for the 'dist' output target in a Stencil project's config file. This setup generates a distributable, self-lazy loading component library.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Typed Functional Component with FunctionalComponent Generic in Stencil
DESCRIPTION: Demonstrates how to create a typed functional component using Stencil's FunctionalComponent generic type.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Resolving Asset Paths with getAssetPath in TypeScript
DESCRIPTION: Demonstrates how to use the getAssetPath API to resolve asset paths relative to the asset base path in a Stencil component.

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Component Lifecycle
DESCRIPTION: Shows how to use async/await in the componentWillLoad lifecycle method to fetch data from an API before rendering a component.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Using a Functional Component with Props in Stencil
DESCRIPTION: Shows how to use a functional component by passing props as attributes.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Configuring NPM Script for Playwright and Stencil Tests
DESCRIPTION: Updates package.json to include a script that runs both Stencil e2e tests and Playwright tests.

LANGUAGE: json
CODE:
{
  "scripts": {
    "test.e2e": "stencil test --e2e && playwright test"
  }
}

----------------------------------------

TITLE: Enabling Shadow DOM in Stencil Components
DESCRIPTION: These examples demonstrate how to enable shadow DOM for a Stencil component, including the option to use delegatesFocus for improved focus management within the shadow DOM.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: true
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: { 
    delegatesFocus: true,
  }
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Async Data Fetching in ComponentWillLoad
DESCRIPTION: Example showing how to fetch data asynchronously in componentWillLoad() using Promises.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Creating and Configuring a Stencil Store
DESCRIPTION: Example of creating a store with initial state and setting up a change handler for a specific property.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: JavaScript code to import all components from the Ionic Framework in an Ember application file.

LANGUAGE: javascript
CODE:
import '@ionic/core'; // installs all the components from Ionic Framework

----------------------------------------

TITLE: Creating Form-Associated Custom Elements in Stencil
DESCRIPTION: This example shows how to create a form-associated custom element using Stencil. It demonstrates the use of the formAssociated property, ElementInternals, and how to integrate the component with native form features.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css',
  formAssociated: true
})
export class MyName {
  @State() value: string;
  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.internals.setFormValue(event.target.value);
  }

  render() {
    return (
      <label>
        Name:
        <input
          type="text"
          value={this.value}
          onInput={(event) => this.handleChange(event)}
        />
      </label>
    );
  }
}

----------------------------------------

TITLE: Configuring Angular Output Target in Stencil Config
DESCRIPTION: TypeScript code showing how to add the angularOutputTarget configuration to the Stencil config file.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Stencil Copy Task Configuration
DESCRIPTION: Configuration example showing how to set up copy tasks in Stencil config to move assets to distribution directory.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
};

----------------------------------------

TITLE: Basic E2E Test Setup in Stencil
DESCRIPTION: Demonstrates the basic structure of an E2E test using newE2EPage to test a component render.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Stencil Config for TypeScript Support
DESCRIPTION: Configuration for enabling TypeScript type declarations in Stencil output.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      generateTypeDeclarations: true,
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Basic Stencil Config Example
DESCRIPTION: A minimal example showing how to configure the namespace and source directory in a Stencil project.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Mocking Helper Function in TypeScript
DESCRIPTION: This code creates a mock for the getRandomInt function, always returning 42.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Creating a Stencil Compiler Instance
DESCRIPTION: Shows the function signature for createCompiler(), which takes a Stencil config and returns a Promise resolving to a Compiler instance.

LANGUAGE: typescript
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Private Method Implementation in Stencil
DESCRIPTION: Example of implementing private methods in a Stencil component that don't require the @Method decorator or async functionality.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Basic Stencil Config Example
DESCRIPTION: Minimal example showing basic Stencil configuration with namespace and source directory settings.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Using Element Decorator
DESCRIPTION: Example showing how to access the host element using the @Element decorator for DOM operations.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Building Stencil with Prerendering
DESCRIPTION: Command to enable prerendering during Stencil build process using the --prerender flag.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Nesting Stencil Components
DESCRIPTION: This example demonstrates how to compose Stencil components by nesting them within each other.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Custom Service Worker Configuration in Stencil
DESCRIPTION: Example of customizing the service worker configuration in Stencil config file to include additional file types.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Importing Test Function in Stencil Playwright
DESCRIPTION: Demonstrates the correct way to import the test function from @stencil/playwright instead of @playwright/test for proper web component hydration support.

LANGUAGE: typescript
CODE:
// THIS IS CORRECT
import { test } from '@stencil/playwright';

// THIS IS NOT!!
// import { test } from '@playwright/test';

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation in Stencil
DESCRIPTION: This snippet shows how to configure a Stencil project to validate the primary package output target. It sets up a 'dist' output target as the primary one for validation and enables the validation feature.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Asset Path Management in Stencil Components
DESCRIPTION: Example of using getAssetPath to resolve local asset paths within a component. Useful for handling image sources and other static assets.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Generating a Stencil Component using CLI
DESCRIPTION: Demonstrates how to use the Stencil CLI to generate a new component. It shows the command syntax and explains the resulting directory structure.

LANGUAGE: shell
CODE:
stencil generate my-new-component

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Accessing Typed Stencil Component in TypeScript
DESCRIPTION: Demonstrates how to use the automatically generated TypeScript interface for a Stencil component. It shows accessing an ion-button element and setting its 'fill' property with type safety.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Typed Functional Component with Stencil's FunctionalComponent
DESCRIPTION: Shows how to use Stencil's FunctionalComponent type to create a typed functional component with props interface.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Custom Service Worker Boilerplate
DESCRIPTION: Basic boilerplate code for a custom service worker, including Workbox importation and precache injection point.

LANGUAGE: javascript
CODE:
// change to the version you get from `npm ls workbox-build`
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Configuring Hydrate App Output Target in Stencil
DESCRIPTION: This snippet shows how to add the 'dist-hydrate-script' output target to the Stencil configuration file. This generates a hydrate app in the project root directory for server-side rendering.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Configuring Stencil for CI/CD Environments
DESCRIPTION: Demonstrates how to configure Stencil for Continuous Integration/Deployment environments, specifically adjusting browser arguments for Gitlab CI.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'Foo',
  testing: {
    browserArgs: ['--no-sandbox', '--disable-setuid-sandbox'],
  },
  outputTargets: [
    { type: 'dist' },
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Configuring Custom Event Options in Stencil
DESCRIPTION: Shows how to use the EventOptions interface to configure custom event behavior, including setting the event name, bubbling, cancelable, and composed properties.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Worker with External Dependencies
DESCRIPTION: Example of a worker that imports external dependencies and uses them for image processing.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Component Lifecycle
DESCRIPTION: Example of how to fetch dynamic data in a Stencil component's componentWillLoad lifecycle method using async/await. This allows Stencil to wait for data before rendering the component.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: Demonstrates how to use Build.isDev conditional to execute different code paths in development versus production environments. The example shows implementation within a Stencil component's lifecycle method componentDidLoad().

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Basic Stencil Component Implementation
DESCRIPTION: Example of a basic Stencil component with properties and rendering logic

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Querying Elements in Shadow DOM
DESCRIPTION: Illustrates how to query elements within the Shadow DOM of a Stencil component using the @Element decorator and shadowRoot property.

LANGUAGE: typescript
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Using Host as Fragment in Stencil TSX
DESCRIPTION: Shows how to use the Host component to render multiple elements at the root level of a component.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Basic Screenshot Comparison in Stencil E2E Tests
DESCRIPTION: Simple example of setting up a Stencil end-to-end test with screenshot comparison using Puppeteer. It demonstrates how to create a new E2E page, set content, and compare screenshots.

LANGUAGE: javascript
CODE:
it('render something', async () => {
  const page: E2EPage = await newE2EPage();
  await page.setContent('<my-cmp></my-cmp>');
  await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
});

----------------------------------------

TITLE: Creating an In-Memory Compiler System
DESCRIPTION: Shows how to create an in-memory compiler system independent of any platform.

LANGUAGE: typescript
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Basic Stencil Config Example
DESCRIPTION: A minimal example showing how to configure the namespace and source directory in a Stencil project.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Generating a New Stencil Component
DESCRIPTION: Command to run the interactive component generator in a Stencil project. This helps in scaffolding new components quickly.

LANGUAGE: bash
CODE:
npm run generate

----------------------------------------

TITLE: Writing Visual Tests for Stencil Components
DESCRIPTION: Example of a visual test for a Stencil component using WebdriverIO's toMatchElementSnapshot matcher. This test captures and compares the visual appearance of a component.

LANGUAGE: typescript
CODE:
it('looks visually correct', async () => {
    const page = await newE2EPage();
    await page.setContent('<my-component first="Stencil" last="JS"></my-component>');

    const element = await page.find('my-component');
    expect(element).toBeDefined();
    await expect(element).toMatchElementSnapshot();
});

----------------------------------------

TITLE: Configuring Angular Output Target in Stencil Config
DESCRIPTION: Configuration for generating Angular component wrappers from Stencil components using the @stencil/angular-output-target.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Configuring Stencil Documentation Generation in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the colors used in component dependency graph diagrams generated as part of Stencil's documentation. It sets custom text and background colors for the target component in the graph.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  docs: {
    markdown: {
      targetComponent: {
        textColor: '#fff',
        background: '#000',
      },
    },
  },
};

----------------------------------------

TITLE: Loading Component Library via Script Tag
DESCRIPTION: Example of loading a Stencil component library using a script tag with type module.

LANGUAGE: html
CODE:
<script type="module" src="https://unpkg.com/my-design-system"></script>

----------------------------------------

TITLE: Using getAssetPath() in Stencil Component
DESCRIPTION: Illustrates how to use getAssetPath() to retrieve the path to local assets within a Stencil component. This is useful for dynamically loading assets based on component properties.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Defining Worker Functions in Stencil
DESCRIPTION: Shows how to create a TypeScript file with '.worker.ts' extension to define functions that will run in a Web Worker. Includes examples of synchronous and asynchronous worker functions.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Implementing Build Constants in Stencil Component
DESCRIPTION: Demonstrates how to use Build.isDev and Build.isBrowser constants in a Stencil component to execute different code paths for development/production and browser/server environments. The component imports Build from @stencil/core and uses it within componentDidLoad lifecycle method.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Basic JSX Component Rendering in Stencil
DESCRIPTION: Example of a basic Stencil component using JSX to render HTML elements with static content.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Package.json Exports Configuration
DESCRIPTION: Advanced exports configuration in package.json for granular component importing.

LANGUAGE: json
CODE:
{
  "exports": {
    ".": {
      "import": "./dist/components/index.js",
      "types": "./dist/components/index.d.ts"
    },
    "./my-component": {
      "import": "./dist/components/my-component.js",
      "types": "./dist/components/my-component.d.ts"
    }
  },
  "types": "dist/components/index.d.ts"
}

----------------------------------------

TITLE: Naming Stencil Component HTML Tags
DESCRIPTION: Shows examples of correct and incorrect naming conventions for Stencil component HTML tags, emphasizing the use of unique prefixes.

LANGUAGE: markup
CODE:
<stencil-component>
<stnl-component>

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

----------------------------------------

TITLE: Mocking Node Module Library in TypeScript
DESCRIPTION: Example of mocking a node module (md5) by creating a mock file in __mocks__ directory that returns a fake hash.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Default Values for Props
DESCRIPTION: Shows how to set default values for props in Stencil components.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'component-with-some-props',
})
export class ComponentWithSomeProps {
    @Prop() aNumber = 42;
    @Prop() aString = 'defaultValue';

    render() {
        return <div>The number is {this.aNumber} and the string is {this.aString}</div>
    }
}

----------------------------------------

TITLE: Configuring Testing Interfaces in TypeScript for Stencil
DESCRIPTION: Defines the TypeScript interfaces for configuring testing options in Stencil projects. Includes settings for screenshot comparison, browser configuration, and device emulation for e2e testing.

LANGUAGE: typescript
CODE:
export interface TestingConfig extends JestConfig {
  /**
   * The `allowableMismatchedPixels` value is used to determine an acceptable
   * number of pixels that can be mismatched before the image is considered
   * to have changes. Realistically, two screenshots representing the same
   * content may have a small number of pixels that are not identical due to
   * anti-aliasing, which is perfectly normal. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedPixels?: number;

  /**
   * The `allowableMismatchedRatio` ranges from `0` to `1` and is used to
   * determine an acceptable ratio of pixels that can be mismatched before
   * the image is considered to have changes. Realistically, two screenshots
   * representing the same content may have a small number of pixels that
   * are not identical due to anti-aliasing, which is perfectly normal. The
   * `allowableMismatchedRatio` is the number of pixels that were mismatched,
   * divided by the total number of pixels in the screenshot. For example,
   * a ratio value of `0.06` means 6% of the pixels can be mismatched before
   * the image is considered to have changes. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedRatio?: number;

  /**
   * Matching threshold while comparing two screenshots. Value ranges from `0` to `1`.
   * Smaller values make the comparison more sensitive. The `pixelmatchThreshold`
   * value helps to ignore anti-aliasing. Default: `0.1`
   */
  pixelmatchThreshold?: number;

  /**
   * Additional arguments to pass to the browser instance.
   */
  browserArgs?: string[];

  /**
   * Path to a Chromium or Chrome executable to run instead of the bundled Chromium.
   */
  browserExecutablePath?: string;

  /**
   * Whether to run browser e2e tests in headless mode.
   */
  browserHeadless?: boolean;

  /**
   * Whether to auto-open a DevTools panel for each tab.
   * If this option is true, the headless option will be set false
   */
  browserDevtools?: boolean;

  /**
   * Slows down e2e browser operations by the specified amount of milliseconds.
   * Useful so that you can see what is going on.
   */
  browserSlowMo?: number;

  /**
   * Array of browser emulations to be used during _screenshot_ tests.
   */
  emulate?: EmulateConfig[];

  /**
   * Path to the Screenshot Connector module.
   */
  screenshotConnector?: string;
}

export interface EmulateConfig {
  device?: string;
  userAgent?: string;
  viewport?: EmulateViewport;
}

export interface EmulateViewport {
  width: number;
  height: number;
  deviceScaleFactor?: number;
  isMobile?: boolean;
  hasTouch?: boolean;
  isLandscape?: boolean;
}

----------------------------------------

TITLE: Correct Component Organization in TypeScript
DESCRIPTION: A set of examples showing the correct way to organize components and utility functions in separate files for efficient bundling in Stencil.

LANGUAGE: typescript
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: typescript
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: typescript
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Configuring Playwright with Stencil
DESCRIPTION: Setup of the Playwright configuration file with Stencil-specific matchers and config options

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

// Add custom Stencil matchers to Playwright assertions
expect.extend(matchers);

export default createConfig({
  // Overwrite Playwright config options here
});

----------------------------------------

TITLE: Configuring Style Modes in Stencil
DESCRIPTION: Demonstrates how to implement style modes in Stencil components to support multiple styling configurations, such as iOS and Material Design.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'simple-button',
  styleUrls: {
    md: './simple-button.md.css', // styles for Material Design
    ios: './simple-button.ios.css' // styles for iOS
  },
})
export class SimpleButton {
  // ...
}

----------------------------------------

TITLE: Stencil Config with Copy Tasks
DESCRIPTION: Configuration showing how to set up copy tasks for asset management in Stencil

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
};

----------------------------------------

TITLE: OptimizeJs Function Signature
DESCRIPTION: Function signature for optimizing JavaScript with target-specific optimizations.

LANGUAGE: jsx
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Variable Casing in Stencil Props
DESCRIPTION: Explains the difference in prop naming conventions between TSX and HTML usage.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() thingToDo: string;

    render() {
        return <div>{this.thingToDo}</div>;
    }
}

LANGUAGE: typescript
CODE:
<todo-list-item thingToDo={"Learn about Stencil Props"}></todo-list-item>

LANGUAGE: html
CODE:
<todo-list-item thing-to-do="Learn about Stencil Props"></todo-list-item>

----------------------------------------

TITLE: Configuring Test Scripts in Package.json
DESCRIPTION: Package.json configuration to run both Stencil and Playwright tests

LANGUAGE: json
CODE:
{
  "scripts": {
    "test.e2e": "stencil test --e2e && playwright test"
  }
}

----------------------------------------

TITLE: Full Build Example in NodeJS Environment
DESCRIPTION: Demonstrates a complete example of setting up and running a full build using the Stencil Compiler in a NodeJS environment. It includes importing necessary modules, creating a logger and system, loading config, and executing the build.

LANGUAGE: typescript
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Configuring VS Code Settings for Custom HTML Data
DESCRIPTION: This JSON snippet demonstrates how to configure VS Code to use the generated custom element documentation. It adds the path to the generated JSON file in the 'html.customData' setting.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Using Ionic Toggle Component in Ember Template
DESCRIPTION: Example of using an Ionic toggle component in an Ember component template.

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Importing WebdriverIO Mocking Primitives
DESCRIPTION: Shows how to import the core mocking functions from the WebdriverIO browser runner module. These primitives enable mocking functionality in tests.

LANGUAGE: typescript
CODE:
import { mock, fn, unmock } from '@wdio/browser-runner'

----------------------------------------

TITLE: Using getAssetPath() in Stencil Components
DESCRIPTION: Illustrates how to use the getAssetPath() function to retrieve the path to local assets in a Stencil component. This is useful for referencing assets like images or icons.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Configuring Stencil Docs-README Output Target
DESCRIPTION: Basic configuration setup to enable automatic README generation in stencil.config.ts

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Configuring Stencil Custom Docs Generator
DESCRIPTION: Example configuration for setting up the docs-custom output target in Stencil. The configuration shows how to implement a custom generator function that receives the JSON documentation data.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Correct Component Organization in Stencil
DESCRIPTION: This set of snippets shows the correct way to organize components and utility functions in Stencil. Shared functions are moved to a separate file, and components are kept in their own modules.

LANGUAGE: tsx
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project by configuring the Sass plugin in the Stencil configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Importing and Initializing Stencil Components in an Application
DESCRIPTION: This code demonstrates how to import and initialize Stencil components in an application. It includes setting a nonce for Content Security Policy, applying polyfills, and defining custom elements.

LANGUAGE: typescript
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Setting Props Manually in Non-JSX Element
DESCRIPTION: Demonstrates how to manually set object and array props on a Stencil component in a non-JSX environment using JavaScript. This is useful when integrating with vanilla JavaScript projects.

LANGUAGE: markup
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Stencil Web Worker Implementation
DESCRIPTION: Example of a Web Worker implementation in Stencil showing async functions for sum and expensive task processing.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Using a Form-Associated Component in HTML
DESCRIPTION: This HTML snippet demonstrates how to use a custom form-associated component within a form element.

LANGUAGE: html
CODE:
<form>
  <custom-text-input name="my-custom-input"></custom-text-input>
</form>

----------------------------------------

TITLE: Defining a Stencil Component with a Method in TypeScript
DESCRIPTION: Example of a Stencil component 'Foo' that includes a method 'bar' which uses the 'getRandomInt' utility function. This component will be tested with mocking.

LANGUAGE: typescript
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Importing WebdriverIO Mocking Functions
DESCRIPTION: Shows how to import the core mocking functions from the WebdriverIO browser runner module. These functions provide the basic primitives for implementing mocks in tests.

LANGUAGE: typescript
CODE:
import { mock, fn, unmock } from '@wdio/browser-runner'

----------------------------------------

TITLE: Basic Asset Resolution Examples in TypeScript
DESCRIPTION: Demonstrates how to use getAssetPath to resolve various asset paths relative to the build directory.

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Importing Hydrate App Functions in Node.js
DESCRIPTION: Demonstrates how to import the necessary functions from the hydrate app module in a Node.js server.

LANGUAGE: javascript
CODE:
import { createWindowFromHtml, hydrateDocument, renderToString, streamToString } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Importing Stencil Playwright Test Function
DESCRIPTION: Demonstrates the correct way to import the test function from @stencil/playwright instead of @playwright/test to ensure proper web component hydration.

LANGUAGE: typescript
CODE:
// THIS IS CORRECT
import { test } from '@stencil/playwright';

// THIS IS NOT!!
// import { test } from '@playwright/test';

----------------------------------------

TITLE: Basic Stencil Config Example
DESCRIPTION: Basic configuration example showing namespace and source directory settings.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Running Visual Regression Tests in Stencil
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison functionality in Stencil.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Initializing Basic Form-Associated Component in Stencil
DESCRIPTION: Basic setup of a form-associated component using the formAssociated property in the Component decorator.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Rollup Plugin Asset Copy Configuration
DESCRIPTION: Example of using rollup-plugin-copy to copy assets in a Stencil configuration

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Querying Elements in Shadow DOM
DESCRIPTION: Illustrates how to query elements within a component's Shadow DOM using the @Element decorator and shadowRoot property.

LANGUAGE: typescript
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Enabling Warnings for Copy Tasks
DESCRIPTION: This example demonstrates how to enable warnings for copy tasks when the source files or directories cannot be found. It uses the 'warn' option set to true.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist',
    copy: [
      { src: 'fonts', warn: true }
    ]
  }
]

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Build.isDev conditional in a Stencil component to execute different code in development and production modes. It imports the necessary dependencies, defines a component, and uses the conditional in the componentDidLoad lifecycle method.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Implementing Advanced Form with Multiple Inputs in Stencil
DESCRIPTION: Example of a complex form implementation with email validation, multiple select inputs, and dynamic options rendering. Demonstrates handling different input types and form validation using the constraint validation API.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Basic Screenshot Comparison Test in Stencil
DESCRIPTION: Simple example showing how to set up a basic screenshot comparison test using Puppeteer with Stencil's E2E testing framework.

LANGUAGE: javascript
CODE:
  it('render something', async () => {
    const page: E2EPage = await newE2EPage();
    await page.setContent('<my-cmp></my-cmp>');
    await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
  });

----------------------------------------

TITLE: Private Method Implementation in Stencil
DESCRIPTION: Shows how to implement private methods in a Stencil component that don't require the @Method decorator or async functionality.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Creating Form-Associated Custom Element in Stencil
DESCRIPTION: Shows how to create a form-associated custom element using Stencil, allowing the component to integrate natively with surrounding form elements.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css',
  formAssociated: true
})
export class MyName {
  @State() value: string;
  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.internals.setFormValue(event.target.value);
  }

  render() {
    return (
      <label>
        Name:
        <input
          type="text"
          value={this.value}
          onInput={(event) => this.handleChange(event)}
        />
      </label>
    );
  }
}

----------------------------------------

TITLE: Configuring Stats Output Target in stencil.config.ts
DESCRIPTION: Shows how to add the stats output target to the Stencil configuration file (stencil.config.ts) to automatically generate stats with every build. The file path for the stats output is optional.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Configuring TypeScript for Jest Types in JSON
DESCRIPTION: JSON configuration to add Jest types to tsconfig.json to resolve type clashes between WebdriverIO's Mocha and Stencil's Jest.

LANGUAGE: json
CODE:
{
  "types": ["jest"]
}

----------------------------------------

TITLE: Handling Notification Clicks in Service Worker
DESCRIPTION: Service Worker code to handle user interactions with displayed notifications.

LANGUAGE: javascript
CODE:
self.addEventListener('notificationclick', event => {
  const notification = event.notification;
  const action = event.action;

  if (action === 'dismiss') {
    notification.close();
  } else {
    // This handles both notification click and 'details' action,
    // because some platforms might not support actions.
    clients.openWindow(notification.data.href);
    notification.close();
  }
});

----------------------------------------

TITLE: Stencil Worker Implementation Example
DESCRIPTION: Shows how to create a worker file in Stencil with exported async functions that will automatically run in a separate thread.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Stencil Worker Implementation Example
DESCRIPTION: Shows how to create a worker file in Stencil with exported async functions that will automatically run in a separate thread.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Configuring Copy Tasks in Stencil Config
DESCRIPTION: Demonstrates how to set up copy tasks in the Stencil configuration to move assets to the distribution directory.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
  // ...
};

----------------------------------------

TITLE: Setting String-Encoded Object Props in HTML for Stencil Component
DESCRIPTION: Illustrates how to set string-encoded object and array props for a Stencil component in HTML.

LANGUAGE: html
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Using Ionic Components in Ember Templates
DESCRIPTION: This snippet shows how to use an Ionic component (ion-toggle) in an Ember component template.

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Service Implementation Using Utility in TypeScript
DESCRIPTION: Shows a service implementation that uses the getRandomInt utility function.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Configuring Stencil Dev Server with HTTPS and Custom Port
DESCRIPTION: Example configuration for Stencil's dev server showing how to set up HTTPS with SSL certificates and customize the port. The configuration demonstrates reading certificate files and setting reload strategy.

LANGUAGE: tsx
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8')
    }
  }
};

----------------------------------------

TITLE: Testing Component Class Logic in Stencil
DESCRIPTION: This snippet demonstrates how to test component class logic by directly instantiating the component class and calling its methods. It checks if the component's properties are updated correctly after method execution.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Custom Clock Component Implementation in Stencil
DESCRIPTION: Complete example of a clock component utilizing lifecycle methods for timer management.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Subscribing User to Push Notifications
DESCRIPTION: Function to subscribe a user to push notifications using the browser's push service.

LANGUAGE: javascript
CODE:
async function subscribeUser() {
  if ('serviceWorker' in navigator) {
    const registration = await navigator.serviceWorker.ready;

    const subscription = await registration.pushManager
      .subscribe({ userVisibleOnly: true })
      .catch(console.error);

    if (!subscription) {
      return;
    }

    // the subscription object is what we want to send to our backend
    console.log(subscription.endpoint);
  }
}

----------------------------------------

TITLE: Prop Validation with @Watch
DESCRIPTION: Example showing how to validate prop values using the @Watch decorator

LANGUAGE: tsx
CODE:
import { Component, Prop, Watch, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class TodoList {
  @Prop() thingToDo!: string;

  @Watch('thingToDo')
  validateName(newValue: string, _oldValue: string) {
    const isBlank = typeof newValue !== 'string' || newValue === '';
    if (isBlank) { 
        throw new Error('thingToDo is a required property and cannot be empty') 
    };
    const has2chars = typeof newValue === 'string' && newValue.length >= 2;
    if (!has2chars) {
       throw new Error('thingToDo must have a length of more than 1 character')
    };
  }
}

----------------------------------------

TITLE: Adding Component Overview to README
DESCRIPTION: Add a JSDoc comment to the component class to provide an overview that will be included in the generated README.

LANGUAGE: tsx
CODE:
/**
 * A simple component for formatting names
 *
 * This component will do some neat things!
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { }

----------------------------------------

TITLE: Generate Stencil Component CLI Command
DESCRIPTION: Command to generate a new Stencil component using the CLI generator. This command creates a component with the specified name in the src/components directory.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Functional Component with Children Utilities in Stencil
DESCRIPTION: Demonstrates how to use the utility methods provided by Stencil to work with children in functional components.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Importing Stencil Core Compiler in NodeJS
DESCRIPTION: Demonstrates how to import the Stencil Core Compiler in a NodeJS environment using CommonJS syntax.

LANGUAGE: javascript
CODE:
// NodeJS (commonjs)
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Styling Host Element in Stencil Components
DESCRIPTION: This example demonstrates how to style the host element in a Stencil component using CSS. It shows the difference in styling between regular and Shadow DOM components.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Component Composition Example in Stencil
DESCRIPTION: Demonstrates how to compose Stencil components by nesting them within each other.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Node Polyfills Plugin Configuration in TypeScript
DESCRIPTION: Configuration example for adding the rollup-plugin-node-polyfills plugin to the Stencil config file. This is necessary when using libraries that depend on Node.js built-ins.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Configuring Sass Plugin for Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project using the plugins array in the configuration file. It imports the necessary dependencies and sets up the Sass plugin.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: Basic configuration for setting up the dist output target in a Stencil project's config file.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Using Fragment in Stencil Components
DESCRIPTION: Demonstrates the use of Fragment, a functional component that allows grouping elements without a wrapper node. This example shows how to use the shorthand syntax '<>...</>' in a Stencil component's render method.

LANGUAGE: typescript
CODE:
import { Component, Fragment } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Global Script Configuration
DESCRIPTION: Example of exporting a default function for global script configuration that runs before the library/app loads.

LANGUAGE: javascript
CODE:
export default function() {
  initServerConnection();
}

----------------------------------------

TITLE: Using Functional Components with Props
DESCRIPTION: Example of how to use a functional component by passing props through JSX attributes.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Creating Multiple Workers Manually in Stencil
DESCRIPTION: This example shows how to create multiple Worker instances manually in Stencil using the workerPath obtained from the ?worker query. It demonstrates creating a pool of workers.

LANGUAGE: tsx
CODE:
import { workerPath } from '../../stuff.worker.ts?worker';

const workerPool = [
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
];

----------------------------------------

TITLE: Implementing formStateRestoreCallback in Stencil
DESCRIPTION: This example demonstrates how to implement the formStateRestoreCallback to handle form state restoration in a custom date picker component.

LANGUAGE: tsx
CODE:
import { Component, h, State, AttachInternals } from '@stencil/core';

@Component({
  tag: 'fa-date-picker',
  formAssociated: true,
})
export class MyDatePicker {
  @State() value: string = "";
  @State() view: "weeks" | "months" = "weeks";

  @AttachInternals()
  internals: ElementInternals;

  onInputChange(e) {
    e.preventDefault();
    const date = e.target.value;
    this.setValue(date);
  }

  setValue(date: string) {
    // second 'state' parameter is used to store both
    // the input value (`date`) _and_ the current view
    this.internals.setFormValue(date, `${date}#${this.view}`);
  }

  formStateRestoreCallback(state, _mode) {
    const [date, view] = state.split("#");
    this.view = view;
    this.setValue(date);
  }

  render() {
    return <div>
      Mock Date Picker, mode: {this.view}
      <input class="date-picker" onChange={e => this.onInputChange(e)}></input>
    </div>
  }
}

----------------------------------------

TITLE: Setting String-Encoded Object Props in HTML for Stencil Component
DESCRIPTION: Illustrates how to set string-encoded object and array props for a Stencil component in HTML.

LANGUAGE: html
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Simulating Keyboard Input in E2E Tests
DESCRIPTION: Illustrates how to simulate keyboard input in an E2E test, including pressing individual keys and using modifier keys like Shift.

LANGUAGE: typescript
CODE:
const page = await newE2EPage({
  html: `
      <dom-interaction></dom-interaction>
    `
});

const input = await page.find('dom-interaction >>> .input');

let value = await input.getProperty('value');
expect(value).toBe('');

await input.press('8');
await input.press('8');
await input.press(' ');

await page.keyboard.down('Shift');
await input.press('KeyM');
await input.press('KeyP');
await input.press('KeyH');
await page.keyboard.up('Shift');

----------------------------------------

TITLE: Configuring Event Listener Options in Stencil
DESCRIPTION: Shows how to use the ListenOptions interface to configure event listener behavior, including setting the target, capture, and passive properties.

LANGUAGE: tsx
CODE:
  @Listen('scroll', { target: 'window' })
  handleScroll(ev) {
    console.log('the body was scrolled', ev);
  }

  @Listen('click', { capture: true })
  handleClick(ev) {
    console.log('click');
  }

----------------------------------------

TITLE: Using React Component Wrappers
DESCRIPTION: Example of how to import and use the generated React component wrappers in a React application.

LANGUAGE: tsx
CODE:
import './App.css';
import { MyComponent } from 'react-library';

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Component CSS Structure Example
DESCRIPTION: Example of CSS structure with imports showing potential SSR performance implications

LANGUAGE: css
CODE:
/* button.css */
@import "../css/base.css";
@import "../css/tokens.css";
@import "../css/animations.css";
@import "../css/utilities.css";

/* component-specific styles */
button {
    ...
}

----------------------------------------

TITLE: Prop Validation with @Watch Decorator
DESCRIPTION: Example of using the @Watch decorator to validate a prop in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, Watch, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class TodoList {
  @Prop() thingToDo!: string;

  @Watch('thingToDo')
  validateName(newValue: string, _oldValue: string) {
    const isBlank = typeof newValue !== 'string' || newValue === '';
    if (isBlank) { 
        throw new Error('thingToDo is a required property and cannot be empty') 
    };
    const has2chars = typeof newValue === 'string' && newValue.length >= 2;
    if (!has2chars) {
       throw new Error('thingToDo must have a length of more than 1 character')
    };
  }
}

----------------------------------------

TITLE: Configuring Stencil Stats Output Target (TSX)
DESCRIPTION: Shows how to configure the stats output target in stencil.config.ts to automatically generate stats data with every build.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Meta Tag Implementation for SSR Nonce
DESCRIPTION: HTML meta tag structure required for implementing nonces in Server-Side Rendering (SSR) scenarios.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Loading Components via Script Tag
DESCRIPTION: Example of loading a Stencil component library using a script tag with type module.

LANGUAGE: html
CODE:
<script type="module" src="https://unpkg.com/my-design-system"></script>

----------------------------------------

TITLE: Configuring docs-vscode Output Target in Stencil Config (TypeScript)
DESCRIPTION: This snippet shows how to add the 'docs-vscode' output target to the Stencil configuration file. It specifies the type and file path for generating custom element information for VS Code.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Configuring Stencil Stats Output Target (TSX)
DESCRIPTION: Shows how to configure the stats output target in stencil.config.ts to automatically generate stats data with every build.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Setting Props Manually in Non-JSX Element
DESCRIPTION: Demonstrates how to manually set object and array props on a Stencil component in a non-JSX environment using JavaScript. This is useful when working with Stencil components in vanilla JavaScript projects.

LANGUAGE: markup
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Defining Props with Default Values
DESCRIPTION: Example of defining props with default values in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'component-with-some-props',
})
export class ComponentWithSomeProps {
    @Prop() aNumber = 42;
    @Prop() aString = 'defaultValue';

    render() {
        return <div>The number is {this.aNumber} and the string is {this.aString}</div>
    }
}

----------------------------------------

TITLE: Setting Default Style Mode in Stencil
DESCRIPTION: This TypeScript snippet demonstrates how to set a default style mode for all components using the setMode function from @stencil/core.

LANGUAGE: ts
CODE:
import { setMode } from '@stencil/core';
setMode(() => 'ios'); // Setting iOS as the default mode for all components

----------------------------------------

TITLE: Selecting a Stencil Starter Project
DESCRIPTION: Text output showing the options for starter projects when using create-stencil CLI. Users can choose between component, app, or ionic-pwa starters.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Configuring VS Code for Debugging Stencil Tests
DESCRIPTION: VS Code launch configuration for running and debugging Stencil tests, including both end-to-end and spec tests for the currently active file.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "E2E Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--e2e", "--", "--maxWorkers=0", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Spec Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--spec", "--", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

----------------------------------------

TITLE: Configuring HTTPS for Stencil Dev Server in TypeScript
DESCRIPTION: Example configuration showing how to set up HTTPS for the Stencil dev server by providing SSL certificate and key files. The config also demonstrates setting a custom port and reload strategy.

LANGUAGE: tsx
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8'),
    },
  },
};

----------------------------------------

TITLE: Custom Rollup Plugin Configuration in Stencil
DESCRIPTION: Demonstrates how to configure custom Rollup plugins in the Stencil config file, showing both before and after plugin injection points.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Updating Stencil Core Package
DESCRIPTION: Command to update the @stencil/core package to the latest version using npm. The --save-exact flag ensures the exact version is saved in package.json.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Setting Asset Path for Custom Elements in Stencil
DESCRIPTION: Example of how to set the asset path for custom elements builds using the setAssetPath function.

LANGUAGE: typescript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Testing Stencil Component with JSX Template
DESCRIPTION: This example shows how to use the template option in newSpecPage() to test a Stencil component using JSX syntax. It demonstrates passing props to the component and verifying the rendered output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Using Utility Function in Service
DESCRIPTION: Example service implementation that utilizes the getRandomInt helper function.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Configuring Stencil Vue Output Target
DESCRIPTION: Configuration for generating Vue component wrappers from Stencil components using @stencil/vue-output-target.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Documenting CSS Custom Properties in Stencil Component
DESCRIPTION: Use @prop JSDoc comments in CSS files to document custom properties. This information will be included in the generated README.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Documenting Component Properties in Stencil with TypeScript
DESCRIPTION: This snippet demonstrates how to add a description to a @Prop in Stencil using a JSDoc comment. The comment is placed on the line preceding the property declaration.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Optimizing JavaScript with Stencil Core Compiler
DESCRIPTION: Presents the function signature for optimizeJs(), a utility function used by the compiler to optimize JavaScript based on the target.

LANGUAGE: javascript
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Basic Stencil Config Example
DESCRIPTION: Minimal example showing basic Stencil configuration with namespace and source directory settings.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Component Implementation with Asset Loading in TypeScript
DESCRIPTION: Shows how to implement a Stencil component that loads images using assetsDirs configuration and getAssetPath

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Documenting CSS Variables in Stencil Components
DESCRIPTION: Use JSDoc-style comments to document CSS variables in your component's CSS file.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Configuring TypeScript for Jest Types in JSON
DESCRIPTION: JSON configuration to add Jest types to tsconfig.json to resolve type clashes between WebdriverIO's Mocha and Stencil's Jest.

LANGUAGE: json
CODE:
{
  "types": ["jest"]
}

----------------------------------------

TITLE: Defining Stencil Component Classes in TypeScript
DESCRIPTION: This code shows how to properly define Stencil component classes in TypeScript, without using prefixes in the class names.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'ion-button'
})
export class Button { ... }

@Component({
  tag: 'ion-menu'
})
export class Menu { ... }

----------------------------------------

TITLE: Implementing Event Emitter in Stencil Component
DESCRIPTION: Demonstrates how to create and emit custom events using the @Event decorator in a Stencil component. Shows basic event emission for a Todo list component.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Default Values for Properties
DESCRIPTION: Demonstrates how to set default values for properties in Stencil components.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'component-with-some-props',
})
export class ComponentWithSomeProps {
    @Prop() aNumber = 42;
    @Prop() aString = 'defaultValue';

    render() {
        return <div>The number is {this.aNumber} and the string is {this.aString}</div>
    }
}

----------------------------------------

TITLE: Using Stencil Components in Angular Template
DESCRIPTION: This HTML snippet demonstrates how to use a Stencil component in an Angular template, leveraging Angular's template binding syntax.

LANGUAGE: html
CODE:
<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Configuring Stencil WWW Output Target for Playwright
DESCRIPTION: Stencil configuration to add the copy option to the WWW output target for serving test files.

LANGUAGE: typescript
CODE:
{
   type: 'www',
   serviceWorker: null,
   copy: [{ src: '**/*.html' }, { src: '**/*.css' }]
}

----------------------------------------

TITLE: Configuring Stencil for React Output Target
DESCRIPTION: This snippet shows how to configure the Stencil config file to generate React component wrappers using the @stencil/react-output-target package.

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    reactOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../react-library/lib/components/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Component Asset Configuration with assetsDirs
DESCRIPTION: Shows how to configure a component to use assets with the assetsDirs option and getAssetPath API

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Transpile Method Signature
DESCRIPTION: Function signature for the transpile method that converts source code to JavaScript. Returns a Promise with transpilation results.

LANGUAGE: tsx
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Customizing Components with CSS Parts
DESCRIPTION: This snippet demonstrates how to use CSS parts to allow flexible styling of specific elements within a Shadow DOM component.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Configuring Component with tag Option
DESCRIPTION: This example shows how to set the 'tag' option in the @Component decorator. The 'tag' option is required and defines the name of the custom element that Stencil will generate.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Installing Vitest Dependencies
DESCRIPTION: Command to install Vitest and required dependencies for testing Stencil components in browser environment

LANGUAGE: bash
CODE:
npm install vitest @vitest/browser unplugin-stencil webdriverio

----------------------------------------

TITLE: Generating Stencil Component via CLI
DESCRIPTION: Command to generate a new Stencil component using the CLI generator, which creates component files in the src/components directory.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Configuring Playwright Tests in TypeScript
DESCRIPTION: Example showing how to create a Playwright test configuration with custom overrides using the createConfig function. Demonstrates configuration merging behavior for test matching and web server settings.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

expect.extend(matchers);

export default createConfig({
  // Change which test files Playwright will execute
  testMatch: '*.spec.ts',

  webServer: {
    // Only wait max 30 seconds for server to start
    timeout: 30000,
  },
});

----------------------------------------

TITLE: Configuring Playwright Tests in TypeScript
DESCRIPTION: Example showing how to create a Playwright test configuration with custom overrides using the createConfig function. Demonstrates configuration merging behavior for test matching and web server settings.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

expect.extend(matchers);

export default createConfig({
  // Change which test files Playwright will execute
  testMatch: '*.spec.ts',

  webServer: {
    // Only wait max 30 seconds for server to start
    timeout: 30000,
  },
});

----------------------------------------

TITLE: Initializing a Form-Associated Stencil Component
DESCRIPTION: Sets up a basic Stencil component with the formAssociated option set to true, marking it as a form-associated custom element.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Stencil Config with Copy Tasks
DESCRIPTION: Configuration example showing how to set up copy tasks to move assets to the distribution directory.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
};

----------------------------------------

TITLE: E2E Testing with Mocking in Stencil using TypeScript
DESCRIPTION: Example of an E2E test that uses 'newSpecPage' to create a virtual DOM and test a mocked component. This demonstrates how to apply mocks in E2E tests and test component methods.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Using React Wrapper Components
DESCRIPTION: Example of how to use the generated React wrapper components in a React application, including the necessary import statements and component usage.

LANGUAGE: tsx
CODE:
// App.tsx
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: Basic configuration example showing how to add the dist-custom-elements output target to a Stencil project's config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Using WebdriverIO Matchers for Asynchronous Assertions
DESCRIPTION: This snippet illustrates the recommended way to use WebdriverIO-specific matchers for making asynchronous assertions. It shows how to use the toHaveText matcher instead of synchronous matchers like toBe for more resilient tests.

LANGUAGE: typescript
CODE:
await expect($('my-component'))
    .toHaveText(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)

----------------------------------------

TITLE: Copy Task with Warning Configuration
DESCRIPTION: Example showing how to enable warnings for copy tasks when source files cannot be found by setting the warn flag to true.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Documenting @Prop() in Stencil Component
DESCRIPTION: Use JSDoc comments to document properties in a Stencil component. This information will be included in the generated README.

LANGUAGE: ts
CODE:
export class MyComponent {
  /**
   * The first name
   */
  @Prop() first!: string; // the '!' denotes a required property
  /**
   * @deprecated since v2.1.0
   */
  @Prop() middle: string;
  @Prop() lastName = "Smith";

  // ...
}

----------------------------------------

TITLE: CSP Nonce Meta Tag Implementation for SSR
DESCRIPTION: HTML meta tag implementation for setting CSP nonce in Server-Side Rendering (SSR) builds of Stencil applications.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Testing Store Reset
DESCRIPTION: Shows how to properly reset the store state between test specifications using the dispose() method

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: Initializing Stencil Project with CLI
DESCRIPTION: Command to create a new Stencil project using the create-stencil CLI tool.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Configuring TypeScript for Root Project
DESCRIPTION: Base TypeScript configuration file for the root of a monorepo project using Stencil and Vue.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Setting Nonce for Dist Output Target in Angular (TypeScript)
DESCRIPTION: Demonstrates how to use the setNonce helper function to set the nonce attribute for all script and style tags when using the dist output target in an Angular application.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Loading Stencil Component via CDN Script
DESCRIPTION: Demonstrates how to load a Stencil component using a CDN script tag in a basic HTML page.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Creating a JSX Utility for Stencil Component Testing
DESCRIPTION: Utility functions for creating and rendering JSX elements in Vitest tests for Stencil components.

LANGUAGE: typescript
CODE:
export const createElement = (tag, props, ...children) => {
    if (typeof tag === 'function') {
        return tag(props, ...children)
    }
    const element = document.createElement(tag)

    Object.entries(props || {}).forEach(([name, value]) => {
        if (name.startsWith('on') && name.toLowerCase() in window) {
            element.addEventListener(name.toLowerCase().substr(2), value)
        } else {
            element.setAttribute(name, value.toString())
        }
    })

    children.forEach((child) => {
        appendChild(element, child)
    })

    return element
}

export const appendChild = (parent, child) => {
    if (Array.isArray(child)) {
        child.forEach((nestedChild) => appendChild(parent, nestedChild))
    } else {
        parent.appendChild(child.nodeType ? child : document.createTextNode(child))
    }
}

export const createFragment = (_, ...children) => {
    return children
}

----------------------------------------

TITLE: Demonstrating Stencil CLI Build Command Usage
DESCRIPTION: This snippet shows the structure and available flags for the 'stencil build' command, which is used to build a Stencil project. It includes options for CI environments, debugging, development builds, and various optimization settings.

LANGUAGE: markdown
CODE:
## `stencil build`

Builds a Stencil project. The flags below are the available options for the `build` command.

| Flag | Description | Alias |
|------|-------------|-------|
| `--ci` | Run a build using recommended settings for a Continuous Integration (CI) environment. Defaults the number of workers to 4, allows for extra time if taking screenshots via the tests and modifies the console logs. | |
| `--config` | Path to the `stencil.config.ts` file. This flag is not needed in most cases since Stencil will find the config. Additionally, a Stencil config is not required. | `-c` |
| `--debug` | Adds additional runtime code to help debug, and sets the log level for more verbose output. | |
| `--dev` | Runs a development build. | |
| `--docs-readme` | Generate `readme.md` docs based on the component types, properties, methods, events, JSDocs, CSS Custom Properties, etc. | |
| `--es5` | Creates an ES5 compatible build. By default ES5 builds are not created during development in order to improve build times. However, ES5 builds are always created during production builds. Use this flag to create ES5 builds during development. | |
| `--log` | Write logs for the `stencil build` into `stencil-build.log`. The log file is written in the same location as the config. | |
| `--prerender` | Prerender the application using the `www` output target after the build has completed. | |
| `--prod` | Runs a production build which will optimize each file, improve bundling, remove unused code, minify, etc. A production build is the default, this flag is only used to override the `--dev` flag. | |
| `--max-workers` | Max number of workers the compiler should use. Defaults to use the same number of CPUs the Operating System has available. | |
| `--next` | Opt-in to test the "next" Stencil compiler features. | |
| `--no-cache` | Disables using the cache. | |
| `--no-open` | By default the `--serve` command will open a browser window. Using the `--no-open` command will not automatically open a browser window. | |
| `--port` | Port for the [Integrated Dev Server](./dev-server.md). Defaults to `3333`. | `-p` |
| `--serve` | Starts the [Integrated Dev Server](./dev-server.md). | |
| `--stats` | Write stats about the project to `stencil-stats.json`. The stats file is written in the same location as the config. | |
| `--verbose` | Logs additional information about each step of the build. | |
| `--watch` | Watches files during development and triggers a rebuild when files are updated. | |

----------------------------------------

TITLE: Screenshot Connector Interface Definition (TSX)
DESCRIPTION: This snippet defines the interface for the ScreenshotConnector, listing all the methods that can be overridden in a custom connector implementation. It includes methods for initializing, pulling, completing, and publishing builds.

LANGUAGE: tsx
CODE:
export interface ScreenshotConnector {
  initBuild(opts: ScreenshotConnectorOptions): Promise<void>;

  pullMasterBuild(): Promise<void>;

  getMasterBuild(): Promise<ScreenshotBuild>;

  getScreenshotCache(): Promise<ScreenshotCache>;

  completeBuild(masterBuild: ScreenshotBuild): Promise<ScreenshotBuildResults>;
  
  publishBuild(buildResults: ScreenshotBuildResults): Promise<ScreenshotBuildResults>;

  updateScreenshotCache(screenshotCache: ScreenshotCache, buildResults: ScreenshotBuildResults): Promise<ScreenshotCache>;

  generateJsonpDataUris(build: ScreenshotBuild): Promise<void>;
}

----------------------------------------

TITLE: Installing Playwright Browser Binaries
DESCRIPTION: Command to install the required Playwright browser binaries for testing.

LANGUAGE: bash
CODE:
npx playwright install

----------------------------------------

TITLE: Installing Playwright Dependencies for Stencil
DESCRIPTION: Command to install the Stencil Playwright adapter and Playwright test package as dev dependencies.

LANGUAGE: bash
CODE:
npm i @stencil/playwright @playwright/test --save-dev

----------------------------------------

TITLE: Creating a JSX Utility for Stencil Component Testing
DESCRIPTION: This utility file provides functions to create elements and append children, enabling JSX usage in Vitest tests for Stencil components.

LANGUAGE: typescript
CODE:
export const createElement = (tag, props, ...children) => {
    if (typeof tag === 'function') {
        return tag(props, ...children)
    }
    const element = document.createElement(tag)

    Object.entries(props || {}).forEach(([name, value]) => {
        if (name.startsWith('on') && name.toLowerCase() in window) {
            element.addEventListener(name.toLowerCase().substr(2), value)
        } else {
            element.setAttribute(name, value.toString())
        }
    })

    children.forEach((child) => {
        appendChild(element, child)
    })

    return element
}

export const appendChild = (parent, child) => {
    if (Array.isArray(child)) {
        child.forEach((nestedChild) => appendChild(parent, nestedChild))
    } else {
        parent.appendChild(child.nodeType ? child : document.createTextNode(child))
    }
}

export const createFragment = (_, ...children) => {
    return children
}

----------------------------------------

TITLE: Configuring Prerender Config Path in Stencil Config
DESCRIPTION: This snippet shows how to set the path to the prerendering config file in the Stencil configuration file (stencil.config.ts). It demonstrates setting the 'prerenderConfig' property within the 'www' output target.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Setting Asset Path for Custom Elements in Stencil
DESCRIPTION: This snippet demonstrates how to set the asset path for custom elements builds using the setAssetPath function.

LANGUAGE: typescript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Implementing CSS Parts in Stencil Component
DESCRIPTION: Shows how to use CSS parts to allow greater styling flexibility from the light DOM, using the 'part' attribute and ::part() pseudo-element.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Creating NodeJS System for Stencil Compiler
DESCRIPTION: Generates a system based on NodeJS APIs for the Stencil compiler, handling file system operations and content hashing. It requires the NodeJS process object as an argument.

LANGUAGE: typescript
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Updating Arrays in Stencil Component
DESCRIPTION: This snippet illustrates how to properly update an array in a Stencil component to trigger a re-render. It uses the spread operator to create a new array reference, which is necessary for Stencil to detect the change.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Testing Stencil Component Class Logic
DESCRIPTION: Demonstrates direct component class testing by instantiating the component and testing its methods and properties without rendering.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Accessing Typed Stencil Components in TypeScript
DESCRIPTION: Example showing how to use automatically generated TypeScript interfaces to access and manipulate Stencil components with proper type checking. Uses the HTMLIonButtonElement interface to interact with an ion-button component.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Setting Object Props Manually in HTML
DESCRIPTION: Demonstrates how to manually set object props on a Stencil component in an HTML file using JavaScript.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Configuring TypeScript Path Aliases
DESCRIPTION: Example of configuring path aliases in tsconfig.json for TypeScript module resolution.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Configuring Root TypeScript Settings
DESCRIPTION: Base TypeScript configuration for the monorepo workspace

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Stencil Worker Implementation Example
DESCRIPTION: Shows how to create and use a Web Worker in Stencil with async functions for mathematical operations and buffer processing.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Mocking a Custom Helper Function
DESCRIPTION: Example of creating a mock for the 'getRandomInt' helper function. This mock always returns 42, allowing for predictable test results.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Configuring assetsDirs in Stencil Component
DESCRIPTION: Shows how to configure the assetsDirs option in a Stencil component to specify directories containing required assets.

LANGUAGE: typescript
CODE:
// file: my-component.tsx
// 1. getAssetPath is imported from '@stencil/core'
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  // 2. assetsDirs lists the 'assets' directory as a relative
  //    (sibling) directory
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    // 3. the asset path is retrieved relative to the asset 
    //    base path to use in the <img> tag
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Running Visual Regression Tests in Stencil
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison functionality using Stencil CLI.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: This snippet demonstrates how to add the dist-custom-elements output target to a Stencil project's configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Running Visual Regression Tests in Stencil
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison functionality using Stencil CLI.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Using Functional Component with Props
DESCRIPTION: Shows how to use a functional component by passing props through JSX attributes.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Using page.waitForChanges() in Stencil Playwright E2E Tests
DESCRIPTION: Illustrates the usage of page.waitForChanges() method to wait for Stencil components to rehydrate after a re-render in end-to-end tests.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // Assume we have a template setup with the `my-component` component and a `button`
    await page.goto('/my-component/my-component.e2e.html');

    const button = page.locator('button');
    // Assume clicking the button changes the `@Prop()` values on `my-component`
    button.click();
    await page.waitForChanges();
  });
});

----------------------------------------

TITLE: Implementing formDisabledCallback in Stencil
DESCRIPTION: This snippet demonstrates how to use the formDisabledCallback in a Stencil component to react to changes in the disabled state of the form element.

LANGUAGE: tsx
CODE:
import { Component, h, State } from '@stencil/core';

@Component({
  tag: 'form-disabled-cb',
  formAssociated: true,
})
export class MyComponent {
  @State() cssClass: string = "";

  formDisabledCallback(disabled: boolean) {
    if (disabled) {
      this.cssClass = "background-mode";
    } else {
      this.cssClass = "";
    }
  }

  render() {
    return <input type="text" class={this.cssClass}></input>
  }
}

----------------------------------------

TITLE: React Component Usage Example
DESCRIPTION: Example of using the generated React component wrappers in a React application

LANGUAGE: tsx
CODE:
// App.tsx
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Running a Full Stencil Build in NodeJS
DESCRIPTION: Example of how to set up and run a full Stencil build in a NodeJS environment using the createCompiler() function and other related utilities.

LANGUAGE: typescript
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Valid and Invalid Public Method Implementations in Stencil
DESCRIPTION: This snippet demonstrates valid and invalid implementations of public methods using the @Method() decorator in Stencil. Public methods must be async or return a Promise.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Resetting Stencil Store in Tests
DESCRIPTION: Shows how to reset the store state before each test using the dispose() method in a beforeEach hook.

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: Configuring Stencil Output Target for Angular
DESCRIPTION: Configuration setup in stencil.config.ts to generate Angular component wrappers using the angularOutputTarget.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript interface for the CopyTask configuration used in Stencil's output targets. It defines the structure and types of properties that can be used in copy task configurations.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Component Usage in HTML and TSX
DESCRIPTION: Demonstrates how to use a Stencil component in both HTML and TSX files after compilation.

LANGUAGE: html
CODE:
<!-- Here we use the component in an HTML file -->
<todo-list></todo-list>

LANGUAGE: tsx
CODE:
{/* Here we use the component in a TSX file */}
<todo-list></todo-list>

----------------------------------------

TITLE: Disabling Path Alias Transformation in Stencil v4.0.0
DESCRIPTION: Example of disabling the default transformAliasedImportPaths feature in Stencil v4.0.0 configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Using page.waitForChanges() in Stencil Playwright E2E Tests
DESCRIPTION: Illustrates the usage of page.waitForChanges() method to wait for Stencil components to rehydrate after a re-render in end-to-end tests.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // Assume we have a template setup with the `my-component` component and a `button`
    await page.goto('/my-component/my-component.e2e.html');

    const button = page.locator('button');
    // Assume clicking the button changes the `@Prop()` values on `my-component`
    button.click();
    await page.waitForChanges();
  });
});

----------------------------------------

TITLE: Defining a Basic Functional Component in Stencil
DESCRIPTION: Demonstrates the simplest form of a functional component that takes props and returns JSX.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Worker with External Dependencies
DESCRIPTION: Example of a Web Worker that imports external dependencies and processes images.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Configuring Prerender Config for Debugging
DESCRIPTION: TypeScript configuration for Stencil's prerender settings to facilitate debugging by limiting URL crawling and enabling runtime logging.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Setting Nonce for Dist Output in Angular
DESCRIPTION: This snippet demonstrates how to set a nonce for the dist output target in an Angular application's entrypoint. It uses the setNonce helper function to apply the nonce to all script and style tags.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Mocking Node Module Example in TypeScript
DESCRIPTION: Demonstrates how to create a basic mock for an npm package (md5) by creating a mock file in the __mocks__ directory.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Defining a Basic Functional Component in Stencil
DESCRIPTION: Demonstrates the simplest form of a functional component in Stencil, which takes props and returns JSX.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Setting Global Styles in Stencil Config
DESCRIPTION: Demonstrates how to configure global styles in the Stencil config file to make them available to all components in the project.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'app',
  globalStyle: 'src/global/global.css',
  outputTarget: [
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Prop Validation in Stencil using @Watch
DESCRIPTION: This snippet demonstrates how to use the @Watch decorator to perform validation on props.

LANGUAGE: typescript
CODE:
import { Component, Prop, Watch, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class TodoList {
  @Prop() thingToDo!: string;

  @Watch('thingToDo')
  validateName(newValue: string, _oldValue: string) {
    const isBlank = typeof newValue !== 'string' || newValue === '';
    if (isBlank) { 
        throw new Error('thingToDo is a required property and cannot be empty') 
    };
    const has2chars = typeof newValue === 'string' && newValue.length >= 2;
    if (!has2chars) {
       throw new Error('thingToDo must have a length of more than 1 character')
    };
  }
}

----------------------------------------

TITLE: Querying Typed Stencil Components in TypeScript
DESCRIPTION: Demonstrates how to properly type and query a Stencil-generated Web Component using the automatically generated HTML element interfaces. Shows accessing properties with full type safety.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Implementing hydrateDocument Function
DESCRIPTION: Example implementation of component hydration using hydrateDocument, taken from Ionic Angular server.

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

export function hydrateComponents(doc) {
  return hydrateDocument(doc)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Initializing Stencil Dev Server with start() Method in TSX
DESCRIPTION: The start() method initializes the Stencil development server. It accepts a StencilDevServerConfig object, a Logger instance, and an optional CompilerWatcher parameter, returning a Promise that resolves to a DevServer instance.

LANGUAGE: tsx
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Using Inline Styles in a Stencil Component
DESCRIPTION: Shows how to use inline styles in a Stencil component using the styles option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styles: 'div { background-color: #fff }'
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Build Conditionals in a Stencil component. It imports the Build object from @stencil/core and uses the isDev property to conditionally execute code based on the build environment.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation
DESCRIPTION: Configuration example showing how to set up primary package output target validation in Stencil. Demonstrates setting the validation flag and designating a primary output target for package.json validation.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Using Web Worker Functions in a Stencil Component
DESCRIPTION: Demonstrates how to import and use Web Worker functions within a Stencil component, showcasing automatic proxy creation by the compiler.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Naming Stencil Component HTML Tags
DESCRIPTION: This snippet illustrates the correct naming conventions for Stencil component HTML tags, emphasizing the importance of using a unique prefix and avoiding the 'stencil' prefix.

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

----------------------------------------

TITLE: Asset Resolution Examples with getAssetPath
DESCRIPTION: Demonstrates how to use getAssetPath API to resolve asset paths relative to the build directory.

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Documenting CSS Custom Properties in a Stencil Component
DESCRIPTION: This example shows how to document CSS custom properties in a Stencil component's CSS file using the @prop JSDoc tag. This information will be used to generate the CSS Custom Properties section in the README.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Configuring Vitest for Stencil Component Testing
DESCRIPTION: This configuration sets up Vitest to run tests in a headless Chrome browser and integrates the Stencil compiler.

LANGUAGE: typescript
CODE:
import stencil from 'unplugin-stencil/vite'
import { defineConfig } from 'vitest/config'

export default defineConfig({
    test: {
        browser: {
            enabled: true,
            headless: true,
            name: 'chrome'
        },
    },
    plugins: [stencil()]
})

----------------------------------------

TITLE: Documenting CSS Variables in Stencil
DESCRIPTION: Example demonstrating how to document CSS custom properties (variables) using JSDoc-style comments in CSS/SCSS files.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: Basic Stencil Config in TypeScript
DESCRIPTION: A minimal example of a Stencil configuration file (stencil.config.ts) that sets the namespace and source directory.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Customizing Service Worker Configuration in Stencil
DESCRIPTION: Example of customizing the service worker configuration in Stencil config file to include additional file types for caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Mocking a Library in TypeScript
DESCRIPTION: Example of mocking the 'md5' library by creating a mock file in the __mocks__ directory. This demonstrates how to create a simple mock that returns a fixed value.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Using a Functional Component with Props in Stencil JSX
DESCRIPTION: Shows how to use a functional component in JSX, passing props as attributes.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Using Build Conditionals in Stencil Component
DESCRIPTION: This snippet demonstrates how to use the Build.isDev conditional in a Stencil component to execute different code in development and production modes. It imports the necessary dependencies and uses the conditional within the componentDidLoad lifecycle method.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Configuring Stencil Testing in TypeScript
DESCRIPTION: Example of how to configure Stencil testing options using the config file's 'testing' property.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  testing: {
    testPathIgnorePatterns: [...]
  }
};

----------------------------------------

TITLE: Implementing Private Methods in Stencil Components
DESCRIPTION: Example of a private method in a Stencil component. Private methods do not require the @Method decorator and are not required to be async or return a Promise.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Stencil Component Subdirectory Structure
DESCRIPTION: Shows the directory structure when generating a Stencil component in a subdirectory using the CLI. It demonstrates how the component files are organized within nested directories.

LANGUAGE: plain
CODE:
src
└── components
    └── pages
        └── page-home
            ├── page-home.css
            ├── page-home.e2e.ts
            ├── page-home.spec.ts
            └── page-home.tsx

----------------------------------------

TITLE: Testing with Mocked Function in Jest
DESCRIPTION: This test uses Jest to mock the utils module and verifies that the bar function returns the mocked value.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Configure Stencil Angular Output Target
DESCRIPTION: Configuration for the @stencil/angular-output-target in stencil.config.ts to generate Angular component wrappers

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Component Asset Configuration with assetsDirs
DESCRIPTION: Shows how to configure a Stencil component to use assets from a local directory using the assetsDirs property

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Synchronous Transpilation with Stencil Core Compiler
DESCRIPTION: Presents the function signature for synchronously transpiling code. It requires TypeScript to be globally available in browser environments.

LANGUAGE: typescript
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Shadow DOM Style Scoping Example
DESCRIPTION: Demonstration of scoped CSS styling within Shadow DOM using the :host selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Running Visual Regression Tests with Stencil CLI
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison using the Stencil CLI.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Advanced Screenshot Testing with Global Styles in Stencil
DESCRIPTION: Comprehensive example demonstrating advanced screenshot testing features including global styles, multiple assertions, and different comparison methods using allowable mismatch parameters.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    // In order to test against any global styles you may have, don't forget to set the link to the global css. You don't have to do this if your stencil.config.ts file doesn't build a global css file with globalStyle.
    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    // To start comparing the visual result, you first must run page.compareScreenshot; This will capture a screenshot, and save the file to "/screenshot/images". You'll be able to check that into your repo to provide those results to your team. You can only have one of these commands per test. 
    const results = await page.compareScreenshot();

    // Finally, we can test against the previous screenshots. 
    // Test against hard pixels
    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    // Test against the percentage of changes. if 'allowableMismatchedRatio' is above 20% changed, 
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Form Disabled Callback Implementation
DESCRIPTION: Example showing implementation of formDisabledCallback to handle disabled state changes.

LANGUAGE: tsx
CODE:
import { Component, h, State } from '@stencil/core';

@Component({
  tag: 'form-disabled-cb',
  formAssociated: true,
})
export class MyComponent {
  @State() cssClass: string = "";

  formDisabledCallback(disabled: boolean) {
    if (disabled) {
      this.cssClass = "background-mode";
    } else {
      this.cssClass = "";
    }
  }

  render() {
    return <input type="text" class={this.cssClass}></input>
  }
}

----------------------------------------

TITLE: Handling Keyboard Events in Stencil Components
DESCRIPTION: Demonstrates how to handle keyboard events in a Stencil component using the @Listen decorator. The example shows listening for the 'keydown' event and checking for a specific key press.

LANGUAGE: tsx
CODE:
@Listen('keydown')
handleKeyDown(ev: KeyboardEvent){
  if (ev.key === 'ArrowDown'){
    console.log('down arrow pressed')
  }
}

----------------------------------------

TITLE: Configuring Prerender Config Path in Stencil Config
DESCRIPTION: This snippet shows how to set the path to the prerendering config file in the Stencil configuration file (stencil.config.ts). It demonstrates setting the 'prerenderConfig' property within the 'www' output target.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Running Visual Regression Tests in Stencil
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison functionality in Stencil.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: State Management with Event Listeners
DESCRIPTION: Demonstrates combining @State with @Listen decorator to handle click events and toggle state.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Documenting CSS Custom Properties in Stencil
DESCRIPTION: This CSS snippet demonstrates how to document CSS custom properties using the @prop JSDoc tag. The generated README will include a table describing the available custom properties.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: This snippet shows how to add custom Rollup plugins to a Stencil project. It demonstrates injecting plugins before node-resolve and after commonjs transform using the rollupPlugins config object.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Mocking a Library in TypeScript
DESCRIPTION: Example of mocking the 'md5' library by creating a mock file in the __mocks__ directory. This demonstrates how to create a simple mock that returns a fixed value.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Element Decorator Usage
DESCRIPTION: Shows how to access the host element using the @Element decorator for DOM manipulation and measurements.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

export class TodoList {
  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Displaying SemVer Format in Markdown
DESCRIPTION: Shows the Semantic Versioning format using inline code blocks in Markdown. It demonstrates the structure of major.minor.patch versioning.

LANGUAGE: markdown
CODE:
<code>major.minor.patch.</code>

----------------------------------------

TITLE: Using the Stencil Component Library Loader in TypeScript
DESCRIPTION: This snippet demonstrates how to use the generated loader from a Stencil component library. It imports helper functions to set a nonce, apply polyfills, and define custom elements in an application setup script.

LANGUAGE: ts
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Configuring Output Target in Stencil Config
DESCRIPTION: Basic configuration for enabling docs-readme output target in stencil.config.ts

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Configuring Stencil Output Target for React
DESCRIPTION: Add the reactOutputTarget configuration to the Stencil config file to generate React component wrappers.

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    reactOutputTarget({
      outDir: '../react-library/lib/components/stencil-generated/',
    }),
    { type: 'dist-custom-elements' },
  ],
};

----------------------------------------

TITLE: JsonDocsEvent Complex Type Example
DESCRIPTION: Example of the new complexType field in JsonDocsEvent for the ionBreakpointDidChange event in Ionic Framework.

LANGUAGE: json
CODE:
{
  "complexType": {
    "original": "ModalBreakpointChangeEventDetail",
    "resolved": "ModalBreakpointChangeEventDetail",
    "references": {
      "ModalBreakpointChangeEventDetail": {
        "location": "import",
        "path": "./modal-interface",
        "id": "src/components/modal/modal.tsx::ModalBreakpointChangeEventDetail"
      }
    }
  }
}

----------------------------------------

TITLE: Advanced Worker Instance Access
DESCRIPTION: Example showing how to directly access Worker instances in Stencil

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);
    const result = await sum(1, 2);
    console.log(result);
  }
}

----------------------------------------

TITLE: Updating Package.json Test Scripts
DESCRIPTION: Package.json configuration to run both Stencil and Playwright E2E tests.

LANGUAGE: json
CODE:
{
  "scripts": {
    "test.e2e": "stencil test --e2e && playwright test"
  }
}

----------------------------------------

TITLE: Configuring Stencil Output Target with Prerender Config
DESCRIPTION: Example of setting up the prerender configuration file path in stencil.config.ts using the prerenderConfig property.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Exporting Prerender Config Object
DESCRIPTION: This snippet demonstrates how to export a config object using the PrerenderConfig interface in the prerender.config.ts file. This object will contain various configuration options for the prerendering process.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript interface definition for CopyTask, which is used to configure file copy operations in Stencil's output targets.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Customizing README Footer in Stencil Config
DESCRIPTION: Add a custom footer to the generated README files by specifying the footer property in the output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Advanced Screenshot Testing with Stencil and Puppeteer
DESCRIPTION: Comprehensive example showing advanced screenshot testing features including global styles, hydration checking, and multiple comparison methods with configurable thresholds.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    // In order to test against any global styles you may have, don't forget to set the link to the global css. You don't have to do this if your stencil.config.ts file doesn't build a global css file with globalStyle.
    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    // To start comparing the visual result, you first must run page.compareScreenshot; This will capture a screenshot, and save the file to "/screenshot/images". You'll be able to check that into your repo to provide those results to your team. You can only have one of these commands per test. 
    const results = await page.compareScreenshot();

    // Finally, we can test against the previous screenshots. 
    // Test against hard pixels
    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    // Test against the percentage of changes. if 'allowableMismatchedRatio' is above 20% changed, 
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Configuring Stencil Stats Output Target
DESCRIPTION: Example configuration for adding the stats output target to stencil.config.ts. This allows auto-generation of stats with every build.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Implementing formResetCallback in Stencil
DESCRIPTION: This snippet shows how to implement the formResetCallback to reset a form-associated component's internal state and validation when the form is reset.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-reset-cb',
  formAssociated: true,
})
export class MyComponent {
  @AttachInternals()
  internals: ElementInternals;

  formResetCallback() {
    this.internals.setValidity({});
    this.internals.setFormValue("");
  }

  render() {
    return <input type="text"></input>
  }
}

----------------------------------------

TITLE: Documenting @Event() Usage in Stencil Components
DESCRIPTION: Example of documenting events using @Event() decorator and JSDoc comments, which will be reflected in the generated README.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * Emitted when an event is completed
   */
  @Event() todoCompleted: EventEmitter<number>;
  /**
   * @deprecated
   */
  @Event() todoUndo: EventEmitter<number>;

  // ...
}

----------------------------------------

TITLE: Vitest Script Configuration
DESCRIPTION: Package.json script configuration for running Vitest tests.

LANGUAGE: json
CODE:
{
    "scripts": {
        "test": "vitest --run"
    },
}

----------------------------------------

TITLE: Setting Global Styles in Stencil Config
DESCRIPTION: Shows how to configure global styles in the Stencil config file to make them available to all components in the project.

LANGUAGE: tsx
CODE:
export const config: Config = {
  namespace: 'app',
  globalStyle: 'src/global/global.css',
  outputTarget: [
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Configuring TypeScript for WebdriverIO and Stencil
DESCRIPTION: This JSON snippet shows how to update the tsconfig.json file to resolve type clashes between WebdriverIO (using Mocha) and Stencil (using Jest) by preferring Jest types.

LANGUAGE: json
CODE:
{
  "types": ["jest"]
}

----------------------------------------

TITLE: Importing and Exporting Generated Angular Wrappers
DESCRIPTION: Import and export the generated Angular component wrappers in the main Angular module file.

LANGUAGE: typescript
CODE:
import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Creating an In-Memory Compiler System
DESCRIPTION: Shows the function signature for createSystem(), which returns a CompilerSystem instance for in-memory file system operations.

LANGUAGE: typescript
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class
DESCRIPTION: Example showing how to create a custom screenshot connector by extending the base ScreenshotConnector class.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Configuring docs-custom Output Target in Stencil
DESCRIPTION: This snippet demonstrates how to configure the docs-custom output target in a Stencil project's configuration file. It shows how to add the output target and specify a custom generator function to process the generated docs JSON data.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Synchronous Transpilation with Stencil Compiler
DESCRIPTION: Presents the synchronous version of the transpile function. It requires TypeScript to be globally available in browser environments.

LANGUAGE: tsx
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Importing and Exporting Generated Angular Wrappers
DESCRIPTION: Import and export the generated Angular component wrappers in the main Angular module file.

LANGUAGE: typescript
CODE:
import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Running Static Build in Stencil
DESCRIPTION: Demonstrates how to use the --prerender flag with the Stencil build command to enable prerendering of components.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Configuring Prerender Debug Settings
DESCRIPTION: Configuration for debugging Stencil's prerender process. Disables URL crawling, sets specific entry URLs, and enables runtime logging.

LANGUAGE: json
CODE:
{
  "crawlUrls": false,
  "entryUrls": ["/example"],
  "hydrateOptions": (_url) => {
    return {
      "runtimeLogging": true
    };
  }
}

----------------------------------------

TITLE: Defining Web Worker Functions in Stencil
DESCRIPTION: Shows how to create a TypeScript file for a Web Worker in Stencil, defining functions that will be executed in the worker thread.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Configuring Stencil Output Target with Prerender Config
DESCRIPTION: Example showing how to configure the www output target with a prerender config file path in stencil.config.ts.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Disabling Service Worker in Stencil
DESCRIPTION: Example of how to disable the Service Worker generation in a Stencil project by setting the serviceWorker property to null in the config.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config
DESCRIPTION: Example of adding the stats output target to the Stencil configuration file for automatic stats generation during builds.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Configuring E2E Tests for CI/CD Environments
DESCRIPTION: Demonstrates how to configure Stencil's E2E testing setup for Continuous Integration/Deployment environments, specifically for Gitlab CI.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'Foo',
  testing: {
    browserArgs: ['--no-sandbox', '--disable-setuid-sandbox'],
  },
  outputTargets: [
    { type: 'dist' },
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Using Host Component to Set Attributes in Stencil TSX
DESCRIPTION: Demonstrates how to use the Host component to set attributes and event listeners on the host element in a Stencil component's render method.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Loading Stencil Component using ES Modules in HTML
DESCRIPTION: Shows how to import Stencil components using ES Modules in an HTML file, leveraging the defineCustomElements function.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Component Lifecycle
DESCRIPTION: This snippet demonstrates how to fetch data asynchronously in a Stencil component's componentWillLoad lifecycle method, allowing the component to render with dynamic data during Static Site Generation.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Component Lifecycle
DESCRIPTION: This snippet demonstrates how to fetch data asynchronously in a Stencil component's componentWillLoad lifecycle method, allowing the component to render with dynamic data during Static Site Generation.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Environment Config Example
DESCRIPTION: Example showing how to configure environment variables in Stencil config.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  env: {
    API_BASE_URL: process.env.API_BASE_URL
  }
}

----------------------------------------

TITLE: Using Form-Associated Component in HTML
DESCRIPTION: Example of how to use a form-associated custom component within an HTML form element.

LANGUAGE: html
CODE:
<form>
  <custom-text-input name="my-custom-input"></custom-text-input>
</form>

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: JavaScript code to import all components from the Ionic Framework in an Ember application's main file.

LANGUAGE: javascript
CODE:
import '@ionic/core'; // installs all the components from Ionic Framework

----------------------------------------

TITLE: Generating Stencil Component via CLI
DESCRIPTION: Command to generate a new Stencil component using the CLI generator, skipping the interactive prompt by directly specifying the component name.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Configuring Stencil for Vue Output
DESCRIPTION: Configuration in stencil.config.ts to generate Vue component wrappers.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Setting Custom Destination for Copy Tasks in TypeScript
DESCRIPTION: This snippet illustrates how to set a custom destination for copy tasks using the 'dest' property. It copies contents from 'src/files/fonts' to 'public/static/web-fonts'.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    dir: 'public',
    copy: [
      { src: 'files/fonts', dest: 'static/web-fonts' }
    ]
  }
]

----------------------------------------

TITLE: Component Composition Example in Stencil
DESCRIPTION: Demonstrates how to compose and nest Stencil components within each other.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: Shows how to configure custom Rollup plugins in Stencil, demonstrating the ability to inject plugins before node-resolve and after commonjs transform. The configuration uses the rollupPlugins property with before and after arrays.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Creating a JSX Utility for Stencil Component Testing
DESCRIPTION: Utility functions for creating and rendering JSX elements in Vitest tests for Stencil components. This allows for more declarative test writing using JSX syntax.

LANGUAGE: typescript
CODE:
export const createElement = (tag, props, ...children) => {
    if (typeof tag === 'function') {
        return tag(props, ...children)
    }
    const element = document.createElement(tag)

    Object.entries(props || {}).forEach(([name, value]) => {
        if (name.startsWith('on') && name.toLowerCase() in window) {
            element.addEventListener(name.toLowerCase().substr(2), value)
        } else {
            element.setAttribute(name, value.toString())
        }
    })

    children.forEach((child) => {
        appendChild(element, child)
    })

    return element
}

export const appendChild = (parent, child) => {
    if (Array.isArray(child)) {
        child.forEach((nestedChild) => appendChild(parent, nestedChild))
    } else {
        parent.appendChild(child.nodeType ? child : document.createTextNode(child))
    }
}

export const createFragment = (_, ...children) => {
    return children
}

----------------------------------------

TITLE: Rendering Complex Template Content in Stencil
DESCRIPTION: Demonstrates how to return multiple top-level elements in the render function using an array or the Fragment component.

LANGUAGE: tsx
CODE:
import { Fragment } from '@stencil/core';
...
render() {
  return (<Fragment>
    <div class="container">
      <ul>
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
      </ul>
    </div>

    <div class="another-container">
      ... more html content ...
    </div>
  </Fragment>);
}

----------------------------------------

TITLE: Creating Multiple Web Workers in Stencil
DESCRIPTION: Demonstrates how to create multiple Worker instances manually using the workerPath provided by Stencil. This approach allows for creating worker pools or multiple independent workers.

LANGUAGE: typescript
CODE:
import { workerPath } from '../../stuff.worker.ts?worker';

const workerPool = [
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
];

----------------------------------------

TITLE: Exporting Global Script in JavaScript
DESCRIPTION: An example of exporting a default function in a global script file for Stencil, which runs once before the app loads.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: Mocking Node Module Library in TypeScript
DESCRIPTION: Demonstrates how to create a basic mock for a node_modules library (md5) by implementing a mock that returns a static value.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Functional Component with Children Utilities
DESCRIPTION: Example showing how to use utility methods to transform children elements.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: LoadConfig Function Signature
DESCRIPTION: Function signature for loading and validating compiler configuration.

LANGUAGE: tsx
CODE:
loadConfig(init?: LoadConfigInit): Promise<LoadConfigResults>

----------------------------------------

TITLE: Configuring Stencil Test Patterns
DESCRIPTION: Stencil configuration to specify test file patterns for proper test discovery.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // ...
  testing: {
    testRegex: '(/__tests__/.*|\\.?(spec))\\.(ts|js)$',
  },
};

----------------------------------------

TITLE: Using CSS Parts in Stencil Component
DESCRIPTION: Shows how to define and use CSS parts in a Stencil component to allow for greater style customization from the light DOM.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Optimizing CSS with Stencil Core Compiler
DESCRIPTION: Shows the function signature for optimizeCss(), a utility function used by the compiler to optimize CSS.

LANGUAGE: typescript
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Enabling Shadow DOM in Stencil Component
DESCRIPTION: Demonstrates how to enable Shadow DOM for a Stencil component by setting the 'shadow' option to true in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Consuming Angular Wrapper Components in Angular App
DESCRIPTION: Import and use the generated Angular component wrappers in an Angular application.

LANGUAGE: typescript
CODE:
import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

----------------------------------------

TITLE: Listening to Events from Non-JSX Elements (HTML/JavaScript)
DESCRIPTION: Demonstrates how to add event listeners to Stencil components in a non-JSX context using standard DOM methods.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Basic Functional Component Implementation in TSX
DESCRIPTION: Shows the basic syntax for creating a functional component that accepts props and returns JSX.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Implementing formStateRestoreCallback in Stencil
DESCRIPTION: This snippet demonstrates how to implement the formStateRestoreCallback in a date picker component to correctly restore both the selected date and the current view (weeks or months) when the form state is restored.

LANGUAGE: typescript
CODE:
import { Component, h, State, AttachInternals } from '@stencil/core';

@Component({
  tag: 'fa-date-picker',
  formAssociated: true,
})
export class MyDatePicker {
  @State() value: string = "";
  @State() view: "weeks" | "months" = "weeks";

  @AttachInternals()
  internals: ElementInternals;

  onInputChange(e) {
    e.preventDefault();
    const date = e.target.value;
    this.setValue(date);
  }

  setValue(date: string) {
    // second 'state' parameter is used to store both
    // the input value (`date`) _and_ the current view
    this.internals.setFormValue(date, `${date}#${this.view}`);
  }

  formStateRestoreCallback(state, _mode) {
    const [date, view] = state.split("#");
    this.view = view;
    this.setValue(date);
  }

  render() {
    return <div>
      Mock Date Picker, mode: {this.view}
      <input class="date-picker" onChange={e => this.onInputChange(e)}></input>
    </div>
  }
}

----------------------------------------

TITLE: Running Stencil Core CLI
DESCRIPTION: Executes the CLI with given options. This function is used by Stencil's default bin/stencil file but can also be used externally.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Initializing Stencil Dev Server with start() Method
DESCRIPTION: The start() method initializes a new Stencil development server instance. It accepts a configuration object, logger instance, and optional compiler watcher as parameters, returning a Promise that resolves to a DevServer instance.

LANGUAGE: tsx
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Jest Test with Inline Mock Factory
DESCRIPTION: Demonstrates how to use Jest's inline mock factory approach instead of creating separate mock files.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Configuring Prerender in Stencil Config (TypeScript)
DESCRIPTION: Sets up the prerender configuration in the Stencil config file, specifying the output target and the path to the prerender config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Setting CSP Nonce in Stencil Dist Output
DESCRIPTION: Example showing how to set a nonce value for all script and style tags in a Stencil dist output target within an Angular application's entrypoint.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Angular Module Integration Example
DESCRIPTION: Shows how to import and export the generated component wrappers in an Angular module

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Importing and Exporting Generated Angular Wrappers
DESCRIPTION: Import and export the generated Angular component wrappers in the main Angular module file.

LANGUAGE: typescript
CODE:
import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Defining Web Worker Functions in Stencil
DESCRIPTION: Shows how to define functions in a Stencil Web Worker file, which will be automatically run in a separate thread.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Testing Functional Components
DESCRIPTION: Shows how to test functional components in Stencil, including nested components and directly defined functional components in tests.

LANGUAGE: tsx
CODE:
import { Fragment, h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyFunctionalComponent } from '../my-functional-cmp';

it('should render my component', async () => {
  const AnotherFunctionalComponent = (props: any, children: typeof Fragment) => (
    <section>{children}</section>
  );

  const page = await newSpecPage({
    components: [],
    template: () => (
      <AnotherFunctionalComponent>
        <MyFunctionalComponent>Hello World!</MyFunctionalComponent>
      </AnotherFunctionalComponent>
    ),
  });
  expect(page.root).toEqualHtml(`
    <section>
      <div>
        Hello World!
      </div>
    </section>
  `);
});

----------------------------------------

TITLE: Vitest Script Configuration
DESCRIPTION: Package.json script configuration for running Vitest tests.

LANGUAGE: json
CODE:
{
    "scripts": {
        "test": "vitest --run"
    },
}

----------------------------------------

TITLE: Importing Standalone Component in Angular
DESCRIPTION: TypeScript code to import and use a standalone Stencil component in an Angular component.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { MyComponent } from 'component-library';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [MyComponent],
  templateUrl: './app.component.html',
})
export class AppComponent {}

----------------------------------------

TITLE: Node Polyfills Plugin Configuration in TypeScript
DESCRIPTION: An example of how to configure the rollup-plugin-node-polyfills in the Stencil config file to handle Node.js APIs in the browser environment.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Querying Typed Stencil Component in TypeScript
DESCRIPTION: Demonstrates how to properly type and query a Stencil-generated Web Component using the automatically generated HTML element interfaces. Shows accessing component properties with full type safety.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Loading Stencil Component via CDN Script Tag in HTML
DESCRIPTION: Demonstrates how to include a Stencil component in a simple HTML page using a script tag and CDN link.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Advanced Form Implementation in Stencil
DESCRIPTION: Demonstrates an advanced form with multiple input types including email and select fields. Includes email validation and handling of multiple select options.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Configuring Prerender in Stencil Config
DESCRIPTION: Example showing how to set up prerendering in the main Stencil configuration file by specifying the prerender config file path.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Functional Component with Children in Stencil
DESCRIPTION: Illustrates how to define a functional component that accepts and renders child elements.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Complex State Management with Custom Types
DESCRIPTION: Demonstrates managing state with complex types, showing proper array updates and handling of custom interfaces in a todo list component.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;
    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Calling a Public Method on a Stencil Component
DESCRIPTION: This snippet shows how to call a public method on a Stencil component. It uses the 'whenDefined' method of the custom element registry to ensure the component is defined before calling the method.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Configuring Stencil Angular Output Target
DESCRIPTION: Configuration for generating Angular component wrappers in stencil.config.ts

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Configuring Stencil Test Patterns
DESCRIPTION: Stencil configuration to specify test file patterns for proper test discovery.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // ...
  testing: {
    testRegex: '(/__tests__/.*|\\.?(spec))\\.(ts|js)$',
  },
};

----------------------------------------

TITLE: Full Compiler Build Example
DESCRIPTION: Complete example showing how to set up and run a Stencil compiler build in a NodeJS environment

LANGUAGE: tsx
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Jest Test with File-based Mock
DESCRIPTION: Test implementation using Jest's mock functionality with a file-based mock approach.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Configuring Global Styles in Stencil
DESCRIPTION: This snippet shows how to configure global styles in the stencil.config.ts file using the globalStyle setting.

LANGUAGE: tsx
CODE:
export const config: Config = {
  namespace: 'app',
  globalStyle: 'src/global/global.css',
  outputTarget: [
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Updating Objects Reactively in Stencil Components
DESCRIPTION: Shows how to update objects in a Stencil component using the spread operator to create a new object reference, triggering @Watch and component re-renders.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Running Visual Regression Tests in Stencil
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison functionality.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Setting Props with External References in Stencil E2E Tests
DESCRIPTION: Demonstrates how to set properties on a Stencil component using external references in E2E tests. This is useful for reusing mock data or importing data from external files.

LANGUAGE: typescript
CODE:
const props = {
  first: 'Marty',
  lastName: 'McFly',
};

await page.setContent(`<prop-cmp></prop-cmp>`);

await page.$eval('prop-cmp',
  (elm: any, { first, lastName }) => {
    elm.first = first;
    elm.lastName = lastName;
  },
  props 
);

await page.waitForChanges();

----------------------------------------

TITLE: Removed Legacy Context and Connect APIs
DESCRIPTION: Example of deprecated @Prop decorator options that have been removed in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
@Prop({ context: 'config' }) config: Config;
@Prop({ connect: 'ion-menu-controller' }) lazyMenuCtrl: Lazy<MenuController>;

----------------------------------------

TITLE: Configuring TypeScript Path Aliases
DESCRIPTION: Example of configuring path aliases in tsconfig.json for TypeScript projects.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Webpack Configuration for Custom Elements
DESCRIPTION: This snippet provides an example webpack configuration for consuming custom elements, including asset copying.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Configuring VS Code Settings for Custom HTML Data (JSON)
DESCRIPTION: This JSON snippet demonstrates how to configure VS Code settings to use the generated custom element data file. It adds the path to the generated JSON file in the 'html.customData' setting.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Configuring VS Code Launch Settings for Browser Debugging
DESCRIPTION: Launch configuration for debugging Stencil components in Chrome browser. Sets up Chrome debugger instance on port 3333 with source map support.

LANGUAGE: json
CODE:
{
  "type": "chrome",
  "request": "launch",
  "name": "Launch Chrome against localhost",
  "url": "http://localhost:3333",
  "sourceMaps": true,
  "sourceMapPathOverrides": {
    "*": "${webRoot}/*"
  }
}

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: Demonstrates how to add custom Rollup plugins to the Stencil build process, showing both 'before' and 'after' injection points relative to built-in plugins.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Configuring React Output Target in Stencil
DESCRIPTION: Configuration setup for the Stencil React output target in stencil.config.ts to generate React component wrappers

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    reactOutputTarget({
      outDir: '../react-library/lib/components/stencil-generated/',
    }),
    { type: 'dist-custom-elements' },
  ],
};

----------------------------------------

TITLE: Accessing Typed Stencil Component in TypeScript
DESCRIPTION: Demonstrates how to use the automatically generated HTML element interface to access a Stencil component with proper typing. The example shows accessing an ion-button element with its strongly-typed interface.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Creating Playwright Configuration in TypeScript
DESCRIPTION: Demonstrates how to create a Playwright configuration using the createConfig function from the Stencil Playwright adapter. It shows how to override default settings and extend matchers.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

expect.extend(matchers);

export default createConfig({
  // Change which test files Playwright will execute
  testMatch: '*.spec.ts',

  webServer: {
    // Only wait max 30 seconds for server to start
    timeout: 30000,
  },
});

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation in Stencil
DESCRIPTION: This snippet shows how to configure primary package output target validation in a Stencil project. It demonstrates setting the 'isPrimaryPackageOutputTarget' flag for a 'dist' output target and enabling validation in the config.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Node Polyfills Configuration
DESCRIPTION: Shows how to configure the rollup-plugin-node-polyfills plugin in Stencil's configuration file to handle Node.js API dependencies.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Resulting Playwright Configuration
DESCRIPTION: Shows the merged configuration result after applying custom overrides to the default Stencil Playwright configuration.

LANGUAGE: typescript
CODE:
{
  testMatch: '*.spec.ts',
  use: {
    baseURL: 'http://localhost:3333',
  },
  webServer: {
    command: 'stencil build --dev --watch --serve --no-open',
    url: 'http://localhost:3333/ping',
    reuseExistingServer: !process.env.CI,
    // Only timeout gets overridden, not the entire object
    timeout: 30000,
  },
}

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: JavaScript code to import all components from the Ionic Framework in an Ember application's main file.

LANGUAGE: javascript
CODE:
import '@ionic/core'; // installs all the components from Ionic Framework

----------------------------------------

TITLE: Importing and Initializing Stencil Components in ESM Context
DESCRIPTION: This snippet demonstrates how to import and initialize Stencil components in an ESM context using the loader functions. It includes setting a nonce for CSP, applying polyfills, and defining custom elements.

LANGUAGE: ts
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Webpack Configuration for Custom Elements
DESCRIPTION: Example webpack configuration for consuming custom elements, including asset copying setup.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Configuring Node Debugger for Stencil Prerendering
DESCRIPTION: VS Code launch configuration for debugging Stencil's prerender process. Sets up Node.js debugger with specific arguments for prerendering and disables worker processes for easier debugging.

LANGUAGE: json
CODE:
{
  "type": "node",
  "request": "launch",
  "name": "Prerender",
  "args": [
    "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
    "prerender",
    "${workspaceFolder}/dist/hydrate/index.js",
    "--max-workers=0",
    "--config=${workspaceFolder}/stencil.config.ts"
  ],
  "protocol": "inspector"
}

----------------------------------------

TITLE: Example of Expanded docs-json Output for @Event
DESCRIPTION: JSON example showing the expanded complexType field in the docs-json output for an @Event decorator in Stencil v4.0.0.

LANGUAGE: json
CODE:
{
  "complexType": {
    "original": "ModalBreakpointChangeEventDetail",
    "resolved": "ModalBreakpointChangeEventDetail",
    "references": {
      "ModalBreakpointChangeEventDetail": {
        "location": "import",
        "path": "./modal-interface",
        "id": "src/components/modal/modal.tsx::ModalBreakpointChangeEventDetail"
      }
    }
  }
}

----------------------------------------

TITLE: Handling Service Worker Updates in Stencil Component
DESCRIPTION: Demonstrates how to listen for Service Worker updates and show a reload toast to users. This code is typically added to the root component of a Stencil app.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    // If there is no waiting registration, this is the first service
    // worker being installed.
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Using @State() with Lifecycle Methods in Stencil
DESCRIPTION: This example shows how to use @State() in conjunction with Stencil lifecycle methods to create a dynamic component that updates every second.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config
DESCRIPTION: Configuration setup to specify a custom screenshot connector file path in the Stencil testing config.

LANGUAGE: typescript
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Installing Playwright Browser Binaries
DESCRIPTION: Command to install Playwright browser binaries using npx.

LANGUAGE: bash
CODE:
npx playwright install

----------------------------------------

TITLE: Custom Rollup Plugin Configuration
DESCRIPTION: Example showing how to configure custom Rollup plugins in Stencil's config file, demonstrating plugin ordering.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Utility Helper Implementation in TypeScript
DESCRIPTION: Implementation of a random integer generator utility function that serves as the original code to be mocked.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: Demonstrates how to add custom Rollup plugins to the Stencil build process, showing the before and after injection points relative to built-in plugins like node-resolve and commonjs.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Valid and Invalid Public Method Implementations in Stencil
DESCRIPTION: This snippet demonstrates valid and invalid implementations of public methods using the @Method() decorator in Stencil. Public methods must be async or return a Promise.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Defining Stencil Component with Method for Testing
DESCRIPTION: Example of a Stencil component 'Foo' with a method 'bar' that uses the 'getRandomInt' function. This component is used to demonstrate mocking in E2E tests.

LANGUAGE: typescript
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Selecting a Stencil Starter Project
DESCRIPTION: CLI prompt for choosing the type of Stencil project to start, including options for components, apps, and Ionic PWA.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Using Component with Children
DESCRIPTION: Example showing how to pass child elements to a functional component.

LANGUAGE: tsx
CODE:
<Hello name="World">
  <p>I'm a child element.</p>
</Hello>

----------------------------------------

TITLE: Exporting Generated React Components
DESCRIPTION: This code snippet demonstrates how to export the generated React component wrappers from the React library's entry file.

LANGUAGE: typescript
CODE:
export * from './components/stencil-generated';

----------------------------------------

TITLE: Configuring Global Styles in Stencil Config
DESCRIPTION: Demonstrates how to configure global styles in the stencil.config.ts file using the globalStyle setting.

LANGUAGE: tsx
CODE:
export const config: Config = {
  namespace: 'app',
  globalStyle: 'src/global/global.css',
  outputTarget: [
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: Example showing how to add Sass support to a Stencil project by configuring the @stencil/sass plugin in the config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Configuring Browser Debugging in VS Code for Stencil
DESCRIPTION: Launch configuration for debugging Stencil components in Chrome browser. Sets up sourcemap support and localhost connection on port 3333.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:3333",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "*": "${webRoot}/*"
      }
    }
  ]
}

----------------------------------------

TITLE: Importing Dependencies in a Stencil Web Worker
DESCRIPTION: Illustrates how to import both NPM packages and local modules within a Stencil Web Worker. This example shows a worker that loads and processes images using external libraries.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Worker with External Dependencies
DESCRIPTION: Example of a worker module importing and using external dependencies.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Using Component with Children
DESCRIPTION: Example showing how to pass child elements to a functional component.

LANGUAGE: tsx
CODE:
<Hello name="World">
  <p>I'm a child element.</p>
</Hello>

----------------------------------------

TITLE: VS Code Settings Configuration for Custom HTML Data
DESCRIPTION: JSON configuration for VS Code settings.json to enable custom HTML element support. This tells VS Code where to find the generated custom data file for enhanced HTML editing features.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Configuring Browser Debugging in VS Code for Stencil
DESCRIPTION: Launch configuration for debugging Stencil components in Chrome browser. Sets up sourcemap support and localhost connection on port 3333.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:3333",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "*": "${webRoot}/*"
      }
    }
  ]
}

----------------------------------------

TITLE: Loading Stencil Components via CDN Script
DESCRIPTION: Shows how to load Stencil components using a traditional script tag from a CDN in a basic HTML page.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Installing Playwright Dependencies for Stencil
DESCRIPTION: Commands to install the Stencil Playwright adapter, Playwright test framework, and browser binaries.

LANGUAGE: bash
CODE:
npm i @stencil/playwright @playwright/test --save-dev

LANGUAGE: bash
CODE:
npx playwright install

----------------------------------------

TITLE: Using componentOnReady() in TypeScript
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code after a component's first render cycle. This method returns a promise that resolves after componentDidRender() on the initial render.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Mocking a Node Module in Stencil Tests
DESCRIPTION: Example of mocking the 'md5' library by creating a mock file in the __mocks__ directory. This demonstrates how to create a simple mock for a node module.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Importing Component Library in TypeScript
DESCRIPTION: Example of importing a Stencil component library in a TypeScript application.

LANGUAGE: typescript
CODE:
import 'my-design-system';

----------------------------------------

TITLE: Stencil Project Structure
DESCRIPTION: Shows the typical file structure for a Stencil project with end-to-end test files.

LANGUAGE: tree
CODE:
stencil-project-root
└── src
    └── components
        ├── my.component.tsx
        └── test <-- directory containing test files
            ├── my-component.e2e.ts
            └── my-component.e2e.html

----------------------------------------

TITLE: Configuring SSR for Stencil Components
DESCRIPTION: Configuration for enabling server-side rendering of Stencil components in React frameworks like Next.js.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  outputTargets: [
    reactOutputTarget({
      outDir: '../react-library/lib/components/stencil-generated/',
      hydrateModule: 'component-library/hydrate'
    }),
    {
      type: 'dist-hydrate-script',
      dir: './hydrate',
    },
    // ...
  ]
};

----------------------------------------

TITLE: Configuring Prerender Config Path in Stencil Config
DESCRIPTION: This snippet shows how to set the path to the prerendering config file in the stencil.config.ts file using the prerenderConfig property.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Connected Callback Example - Stencil TSX
DESCRIPTION: Example demonstrating how connectedCallback is called when a component is attached to the DOM. Shows that connectedCallback can be called multiple times while componentWillLoad is only called once.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Valid and Invalid Public Method Definitions in Stencil
DESCRIPTION: Illustrates valid and invalid ways to define public methods using the @Method() decorator in Stencil. Public methods must be async or return a Promise.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Importing Mocking Primitives in TypeScript for WebdriverIO
DESCRIPTION: This snippet demonstrates how to import the necessary mocking functions from the @wdio/browser-runner package. These functions are used for creating mocks in WebdriverIO tests.

LANGUAGE: typescript
CODE:
import { mock, fn, unmock } from '@wdio/browser-runner'

----------------------------------------

TITLE: Host Component as Fragment
DESCRIPTION: Demonstrates using Host component to render multiple elements at the root level of a component.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Webpack Configuration for Custom Elements
DESCRIPTION: This snippet provides an example webpack configuration for consuming custom elements. It includes setup for handling CSS and copying assets from the component library to the output directory.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Importing and Initializing Stencil Components
DESCRIPTION: This code demonstrates how to import and initialize Stencil components using the generated loader. It includes setting a nonce for CSP, applying polyfills, and defining custom elements.

LANGUAGE: ts
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Direct Component Class Testing in TypeScript
DESCRIPTION: Illustrates how to test component class logic directly by instantiating the component class and testing its methods and properties.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Implementing File and Module Mocks in WebdriverIO
DESCRIPTION: Demonstrates how to create mocks for both project files and external modules. Shows usage of mock() and fn() functions to replace actual implementations with mock behavior.

LANGUAGE: typescript
CODE:
import { mock, fn } from '@wdio/browser-runner'
import { format } from './utils/utils.ts'

// mock files within the project
mock('./utils/utils.ts', () => ({
    format: fn().mockReturnValue(42)
}))
// mock whole modules and replace functionality with what is defined in `./__mocks__/leftpad.ts`
mock('leftpad')

console.log(format()) // returns `42`

----------------------------------------

TITLE: Installing Playwright Dependencies for Stencil
DESCRIPTION: Commands to install the Stencil Playwright adapter, Playwright test framework, and browser binaries.

LANGUAGE: bash
CODE:
npm i @stencil/playwright @playwright/test --save-dev

LANGUAGE: bash
CODE:
npx playwright install

----------------------------------------

TITLE: ScreenshotConnector Interface Definition
DESCRIPTION: Reference to the base ScreenshotConnector interface showing available methods that can be overridden.

LANGUAGE: tsx
CODE:
https://github.com/ionic-team/stencil/blob/a2e119d059ba0d0fa6155dbd3d82c17612630828/src/declarations/stencil-private.ts#L1631-L1645

----------------------------------------

TITLE: Importing Test Function in Stencil Playwright
DESCRIPTION: Demonstrates the correct way to import the 'test' function from '@stencil/playwright' instead of '@playwright/test' for Stencil end-to-end tests.

LANGUAGE: typescript
CODE:
// THIS IS CORRECT
import { test } from '@stencil/playwright';

// THIS IS NOT!!
// import { test } from '@playwright/test';

----------------------------------------

TITLE: Handling Keyboard Events in Stencil
DESCRIPTION: Shows how to handle keyboard events in a Stencil component using the @Listen decorator. The example demonstrates listening for the 'keydown' event and checking for a specific key press.

LANGUAGE: tsx
CODE:
@Listen('keydown')
handleKeyDown(ev: KeyboardEvent){
  if (ev.key === 'ArrowDown'){
    console.log('down arrow pressed')
  }
}

----------------------------------------

TITLE: Functional Component with Children Utilities
DESCRIPTION: Shows how to use Stencil's utility functions to transform child elements within a functional component.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Configuring Package.json for Stencil Component Distribution
DESCRIPTION: Example package.json configuration for publishing a Stencil component library. Includes entry points for different module formats (CommonJS, ES modules), type definitions, and CDN distribution via unpkg.

LANGUAGE: json
CODE:
{
  "main": "dist/index.cjs.js",
  "module": "dist/index.js",
  "es2015": "dist/esm/index.mjs",
  "es2017": "dist/esm/index.mjs",
  "types": "dist/types/components.d.ts",
  "unpkg": "dist/my-project-name/my-project-name.esm.js",
  "collection:main": "dist/collection/index.js",
  "collection": "dist/collection/collection-manifest.json",
  "files": [
    "dist/",
    "css/",
    "loader/"
  ]
}

----------------------------------------

TITLE: Full Stencil Build Process in NodeJS
DESCRIPTION: Demonstrates a complete Stencil build process in a NodeJS environment, including config loading, compiler creation, and build execution.

LANGUAGE: typescript
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: CSS Parts Implementation
DESCRIPTION: Shows how to implement CSS parts for enhanced component styling flexibility from outside the shadow DOM.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Configuring NPM Scripts for Stencil Tests
DESCRIPTION: Example NPM scripts to run different types of Stencil tests, including unit tests, watch mode, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project using the @stencil/sass plugin. It imports the necessary modules and configures the plugin in the Stencil config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Consuming Angular Wrapper Components in Module-based App
DESCRIPTION: This code shows how to import and use the generated Angular component wrappers in a module-based Angular application.

LANGUAGE: typescript
CODE:
import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

----------------------------------------

TITLE: Listening for appload Event in JavaScript
DESCRIPTION: Shows how to listen for the special 'appload' event on the window object. This event is emitted when the app and all of its child components have finished loading. The event detail includes the namespace of the app that emitted the event.

LANGUAGE: javascript
CODE:
window.addEventListener('appload', (event) => {
  console.log(event.detail.namespace);
});

----------------------------------------

TITLE: Configuring Stencil Output Target for VS Code Documentation
DESCRIPTION: This snippet shows how to add the 'docs-vscode' output target to the Stencil configuration file. It specifies the type of output and the file name for the generated JSON data.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Stencil Output Target Configuration
DESCRIPTION: Configuration for the Stencil React output target in stencil.config.ts to generate React component wrappers

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    reactOutputTarget({
      // Relative path to where the React components will be generated
      outDir: '../react-library/lib/components/stencil-generated/',
    }),
    // dist-custom-elements output target is required for the React output target
    { type: 'dist-custom-elements' },
  ],
};

----------------------------------------

TITLE: Correct Component Organization in TypeScript
DESCRIPTION: The correct way to organize components and utility functions in Stencil. Shared functions are moved to a separate file, and components are exported individually.

LANGUAGE: tsx
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Documenting CSS Variables in Stencil Components
DESCRIPTION: Use JSDoc-style comments to document CSS variables in component stylesheets.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Custom Rollup Plugins Configuration in Stencil
DESCRIPTION: Shows how to configure custom Rollup plugins in the Stencil config file, including placement before node-resolve and after commonjs transform.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: React Component Usage Example
DESCRIPTION: Example of consuming generated React component wrappers in a React application

LANGUAGE: tsx
CODE:
// App.tsx
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Adding CSP Nonce Meta Tag for SSR
DESCRIPTION: Demonstrates how to add a meta tag with the CSP nonce value for Server-Side Rendering (SSR) in Stencil projects. This tag should be injected into the header on each page request.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Slot Implementation in Stencil
DESCRIPTION: Examples of using slots for content projection in components, including named slots.

LANGUAGE: tsx
CODE:
render() {
  return [
    <slot name="item-start" />,
    <h1>Here is my main content</h1>,
    <slot name="item-end" />
  ]
}

----------------------------------------

TITLE: Listening to Events in Stencil Components
DESCRIPTION: This snippet shows how to use the @Listen decorator to handle events in Stencil components. It includes examples of listening to custom events and configuring listener options.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

LANGUAGE: tsx
CODE:
  @Listen('scroll', { target: 'window' })
  handleScroll(ev) {
    console.log('the body was scrolled', ev);
  }

LANGUAGE: tsx
CODE:
  @Listen('click', { capture: true })
  handleClick(ev) {
    console.log('click');
  }

LANGUAGE: tsx
CODE:
@Listen('keydown')
handleKeyDown(ev: KeyboardEvent){
  if (ev.key === 'ArrowDown'){
    console.log('down arrow pressed')
  }
}

----------------------------------------

TITLE: Resetting Stencil Store State in Tests
DESCRIPTION: Example of how to reset the store state before each test using the dispose() method in a beforeEach hook.

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: Using React Wrapper Components in a React Application
DESCRIPTION: Import and use the generated React wrapper components in a React application. This example shows how to import a component and the defineCustomElements function.

LANGUAGE: typescript
CODE:
// App.tsx
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Exporting Component Wrappers in Public API
DESCRIPTION: TypeScript code showing how to export the generated component wrappers in the main entry point file (public-api.ts).

LANGUAGE: typescript
CODE:
export * from './lib/component-library.module';
export { DIRECTIVES } from './lib/stencil-generated';
export * from './lib/stencil-generated/components';

----------------------------------------

TITLE: Using optimizeCss() Function
DESCRIPTION: Utility function for optimizing CSS with custom input options.

LANGUAGE: tsx
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Setting Global Style Mode in Stencil
DESCRIPTION: Shows how to set a global style mode for all components using the setMode function from @stencil/core.

LANGUAGE: typescript
CODE:
import { setMode } from '@stencil/core';
setMode(() => 'ios'); // Setting iOS as the default mode for all components

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config
DESCRIPTION: Configuration setup for specifying a custom screenshot connector in the Stencil testing config file.

LANGUAGE: typescript
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Element Decorator Usage
DESCRIPTION: Demonstrates how to use the @Element decorator to access the host element within a component class.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Creating and configuring a Stencil Store
DESCRIPTION: Example of creating a store with initial state and setting up a change listener for the 'clicks' property. The store exports a state object for use in components.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Basic Workbox Service Worker Configuration in Stencil
DESCRIPTION: Default configuration for generating a service worker using Workbox in a Stencil project. Defines glob patterns for asset caching.

LANGUAGE: typescript
CODE:
{
  globPatterns: [
    '**/*.{js,css,json,html}'
  ]
};

----------------------------------------

TITLE: React Library TypeScript Configuration
DESCRIPTION: Project-specific TypeScript configuration for the React wrapper library

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2015"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2015",
    "skipLibCheck": true,
    "jsx": "react",
    "allowSyntheticDefaultImports": true,
    "declarationDir": "./dist/types"
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: Importing WebdriverIO Mocking Functions in TypeScript
DESCRIPTION: Shows how to import the core mocking utilities from the WebdriverIO browser runner package.

LANGUAGE: typescript
CODE:
import { mock, fn, unmock } from '@wdio/browser-runner'

----------------------------------------

TITLE: React Library TypeScript Configuration
DESCRIPTION: Project-specific TypeScript configuration for the React wrapper library

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2015"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2015",
    "skipLibCheck": true,
    "jsx": "react",
    "allowSyntheticDefaultImports": true,
    "declarationDir": "./dist/types"
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: Component Directory Structure Example
DESCRIPTION: Shows the generated directory structure and files for a basic Stencil component.

LANGUAGE: plain
CODE:
src
└── components
    └── page-home
        ├── page-home.css
        ├── page-home.e2e.ts
        ├── page-home.spec.ts
        └── page-home.tsx

----------------------------------------

TITLE: Host Element Styling - Regular DOM
DESCRIPTION: Shows how to style the host element using regular DOM styling approach.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

----------------------------------------

TITLE: Component Directory Structure Example
DESCRIPTION: Shows the generated directory structure and files for a basic Stencil component.

LANGUAGE: plain
CODE:
src
└── components
    └── page-home
        ├── page-home.css
        ├── page-home.e2e.ts
        ├── page-home.spec.ts
        └── page-home.tsx

----------------------------------------

TITLE: Configuring Stencil Output Target for VS Code Integration
DESCRIPTION: This snippet shows how to add the 'docs-vscode' output target to the Stencil configuration file. It generates a JSON file with custom element information for VS Code integration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: E2E Test HTML Template
DESCRIPTION: HTML template setup for E2E testing with proper script imports for Stencil components.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf8" />

    <!-- Replace with the path to your entrypoint -->
    <script src="../../../build/test-app.esm.js" type="module"></script>
    <script src="../../../build/test-app.js" nomodule></script>
  </head>
  <body>
    <my-component first="Stencil"></my-component>
  </body>
</html>

----------------------------------------

TITLE: Implementing formResetCallback in Stencil
DESCRIPTION: Shows how to use the formResetCallback to reset the component's internal state and form validity when the form is reset.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-reset-cb',
  formAssociated: true,
})
export class MyComponent {
  @AttachInternals()
  internals: ElementInternals;

  formResetCallback() {
    this.internals.setValidity({});
    this.internals.setFormValue("");
  }

  render() {
    return <input type="text"></input>
  }
}

----------------------------------------

TITLE: Test Implementation with File-based Mock
DESCRIPTION: Demonstrates how to use a mocked utility in a test file using jest.mock() with a file-based mock.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Setting Up Stencil Project
DESCRIPTION: Commands for setting up a newly created Stencil project. This includes changing to the project directory, installing dependencies, and starting the development server.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Using Ionic Toggle Component in Ember Template
DESCRIPTION: Example of using an Ionic toggle component in an Ember template file.

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Generating a Stencil Component with CLI
DESCRIPTION: Demonstrates how to use the Stencil CLI to generate a new component. This command creates a new component with the specified name in the src/components directory.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Documenting Component Properties in Stencil (TSX)
DESCRIPTION: This snippet demonstrates how to add a description to a @Prop in Stencil using a JSDocs comment on the previous line. This allows for automatic documentation generation of component properties.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config (TSX)
DESCRIPTION: Shows how to specify a custom screenshot connector in the Stencil configuration file. The 'screenshotConnector' property is set to the path of the custom connector file.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Using a Helper Function in a Service in TypeScript
DESCRIPTION: Example of using the getRandomInt helper function within a service file. This demonstrates how the helper is imported and used in another module.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3.1.0
DESCRIPTION: Configuration example for enabling the transformAliasedImportPaths feature in Stencil v3.1.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Checking Push Notification Subscription
DESCRIPTION: Example of checking the current push notification subscription status.

LANGUAGE: javascript
CODE:
self.registration.pushManager.getSubscription().then(subscription => {
  if (!subscription) {
    // ask the user to register for push
    return;
  }

  // update the database
  console.log(subscription);
});

----------------------------------------

TITLE: Importing Ionic Components in Ember App
DESCRIPTION: JavaScript code to import all Ionic Framework components into the Ember application

LANGUAGE: javascript
CODE:
import '@ionic/core';

----------------------------------------

TITLE: Configuring TypeScript Path Aliases
DESCRIPTION: Example of configuring path aliases in tsconfig.json using the TypeScript paths feature for module resolution.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Configuring Service Worker in Stencil
DESCRIPTION: Example of configuring the Service Worker in a Stencil project's config file. This shows how to customize the glob patterns for asset caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Transpiling Code with Stencil Core Compiler
DESCRIPTION: Shows the function signature for transpiling code using the Stencil Core Compiler. It accepts source code as a string and optional transpile options, returning a Promise with the transpilation results.

LANGUAGE: typescript
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: Shows how to add custom Rollup plugins before node-resolve and after commonjs transform in Stencil's build process.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Worker with External Dependencies
DESCRIPTION: Example of a Web Worker that imports external dependencies and handles image processing tasks.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Event Listening in JSX
DESCRIPTION: Shows how to bind event listeners directly in JSX within Stencil components.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

----------------------------------------

TITLE: Demonstrating Proper HTML Tag Naming for Stencil Components
DESCRIPTION: This snippet illustrates the correct way to name HTML tags for Stencil components, using a brand-specific prefix and avoiding the 'stencil' prefix.

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

----------------------------------------

TITLE: Configuring Testing Options in stencil.config.ts
DESCRIPTION: Reference to the TypeScript interface definition for Stencil's testing configuration options. This code shows the available configuration properties for both Jest and Stencil-specific e2e testing settings.

LANGUAGE: tsx
CODE:
https://github.com/ionic-team/stencil/blob/32811591777de726f0374649a4f5e250a0a8e355/src/declarations/stencil-public-compiler.ts#L1968-L2119

----------------------------------------

TITLE: Using renderToString Function
DESCRIPTION: Example demonstrating the usage of renderToString for component hydration, taken from Ionic Core

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(
  `<my-component first=\"Stencil\" last=\"'Don't call me a framework' JS\"></my-component>`,
  {
    fullDocument: false,
    serializeShadowRoot: 'declarative-shadow-dom',
    prettyHtml: true,
  }
);

console.log(results.html);

----------------------------------------

TITLE: Configuring Basic Stencil Output Targets in TypeScript
DESCRIPTION: Example configuration showing how to set up multiple output targets in a Stencil project's config file. Demonstrates configuring both 'dist' and 'www' output types.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Importing Mocking Functions in TypeScript
DESCRIPTION: This snippet shows how to import the necessary mocking functions from the WebdriverIO browser runner. These functions are used to create and manage mocks in your tests.

LANGUAGE: typescript
CODE:
import { mock, fn, unmock } from '@wdio/browser-runner'

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config (TSX)
DESCRIPTION: Demonstrates how to specify a custom screenshot connector in the Stencil configuration file. The 'screenshotConnector' property is set to point to a custom connector file.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Installing Ionic Framework in Ember
DESCRIPTION: Command to install the Ionic Framework in an Ember project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Global Script Export Example
DESCRIPTION: Example of exporting a default function in a global script configuration.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: Configuring Stencil Output Target for VS Code Integration
DESCRIPTION: Configuration setup in stencil.config.ts to enable the docs-vscode output target that generates custom element metadata for VS Code integration. The file parameter specifies where the JSON data will be saved.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Complex E2E Test with Event Spying
DESCRIPTION: Shows how to test component properties, classes, and events using Stencil's E2E testing utilities.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Basic Screenshot Comparison in Stencil E2E Tests
DESCRIPTION: Simple example of setting up a screenshot comparison test using Puppeteer in a Stencil e2e test. It demonstrates how to create a new E2EPage, set content, and compare screenshots.

LANGUAGE: javascript
CODE:
it('render something', async () => {
  const page: E2EPage = await newE2EPage();
  await page.setContent('<my-cmp></my-cmp>');
  await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
});

----------------------------------------

TITLE: Enabling Path Alias Transformation in Stencil v3
DESCRIPTION: Configuration example for enabling path alias transformation in Stencil v3.1.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Importing and Exporting Generated Wrappers
DESCRIPTION: TypeScript code to import and export the generated Angular component wrappers.

LANGUAGE: typescript
CODE:
import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Using a Functional Component with Children in Stencil
DESCRIPTION: This example demonstrates how to use a functional component that accepts children elements.

LANGUAGE: tsx
CODE:
<Hello name="World">
  <p>I'm a child element.</p>
</Hello>

----------------------------------------

TITLE: Basic Web Worker Usage in Vanilla JavaScript
DESCRIPTION: Demonstrates the basic usage of Web Workers using the native browser API, including creating a worker, sending messages, and receiving data.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Generating README Files with Stencil Docs Command
DESCRIPTION: Use the Stencil docs command as an alternative to generate documentation for all output targets.

LANGUAGE: bash
CODE:
npx stencil docs

----------------------------------------

TITLE: Initializing Form-Associated Component in Stencil
DESCRIPTION: Basic setup of a form-associated component using the @Component decorator with formAssociated option set to true.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Object Updates with Stencil State Management
DESCRIPTION: Demonstrates proper patterns for updating objects in Stencil components using the spread operator to ensure component updates and watch handlers are triggered.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Configuring Copy Tasks in Stencil Config
DESCRIPTION: Demonstrates how to set up copy tasks in the Stencil configuration file to manually move assets to the distribution directory.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
  // ...
};

----------------------------------------

TITLE: Generating JSON Docs via CLI Command
DESCRIPTION: Command to generate documentation JSON file using Stencil CLI

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Listening for App Load Event in JavaScript
DESCRIPTION: Shows how to listen for the 'appload' event on the window object, which is emitted when the Stencil app and all its child components have finished loading. The event detail includes the namespace of the app that emitted the event.

LANGUAGE: javascript
CODE:
window.addEventListener('appload', (event) => {
  console.log(event.detail.namespace);
});

----------------------------------------

TITLE: Stencil Component Implementation in TypeScript
DESCRIPTION: Example Stencil component that uses the getRandomInt helper function in a method.

LANGUAGE: typescript
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Creating a Stencil Store in TypeScript
DESCRIPTION: Example of creating a store with initial state, defining a computed property, and exporting the state for use in components.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Enabling Code Coverage in Stencil Tests
DESCRIPTION: Example of running Stencil tests with code coverage enabled using Jest's coverage flag.

LANGUAGE: sh
CODE:
# enable code coverage
npx stencil test --spec --coverage

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project using the plugins array in the configuration file.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Stencil Project Structure Example
DESCRIPTION: Shows the typical file structure for a Stencil project with end-to-end test files.

LANGUAGE: tree
CODE:
stencil-project-root
└── src
    └── components
        ├── my.component.tsx
        └── test <-- directory containing test files
            ├── my-component.e2e.ts
            └── my-component.e2e.html

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil
DESCRIPTION: Basic configuration setup for enabling README documentation generation in a Stencil project

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Exporting Prerender Config Object
DESCRIPTION: This snippet demonstrates how to export a config object using the PrerenderConfig interface in the prerender.config.ts file.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Using a Functional Component with Props in Stencil JSX
DESCRIPTION: Shows how to use a functional component by passing props as attributes in JSX.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Advanced Screenshot Comparison in Stencil E2E Tests
DESCRIPTION: Comprehensive example of visual regression testing in Stencil, including handling global styles, checking component hydration, and comparing screenshots with different tolerance levels. It also demonstrates how to test against hard pixels and percentage of changes.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    // In order to test against any global styles you may have, don't forget to set the link to the global css. You don't have to do this if your stencil.config.ts file doesn't build a global css file with globalStyle.
    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    // To start comparing the visual result, you first must run page.compareScreenshot; This will capture a screenshot, and save the file to "/screenshot/images". You'll be able to check that into your repo to provide those results to your team. You can only have one of these commands per test. 
    const results = await page.compareScreenshot();

    // Finally, we can test against the previous screenshots. 
    // Test against hard pixels
    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    // Test against the percentage of changes. if 'allowableMismatchedRatio' is above 20% changed, 
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Components
DESCRIPTION: Example of handling async data fetching during component initialization using componentWillLoad lifecycle method.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Using Host as a Fragment in Stencil Components
DESCRIPTION: Shows how to use the Host component as a fragment to render multiple elements at the root level of a Stencil component without adding an extra wrapper element.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Setting Asset Path for Custom Elements
DESCRIPTION: This snippet demonstrates how to set the asset path for custom elements using the setAssetPath function.

LANGUAGE: javascript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Configuring Stencil React Output Target
DESCRIPTION: Configuration for the @stencil/react-output-target in stencil.config.ts to generate React component wrappers.

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    reactOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../react-library/lib/components/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Testing Component Class Logic in Stencil
DESCRIPTION: This example shows how to test component class logic directly by instantiating the component class and calling its methods. It demonstrates testing the toggle functionality of a MyToggle component.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Configuring TypeScript for WebdriverIO and Stencil
DESCRIPTION: JSON configuration to resolve type clashes between WebdriverIO (Mocha) and Stencil (Jest) by preferring Jest types in the tsconfig.json file.

LANGUAGE: json
CODE:
{
  "types": ["jest"]
}

----------------------------------------

TITLE: Testing with Mocked Utility
DESCRIPTION: Test implementation showing how to use Jest's mock functionality with imported utilities.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Setting Props Manually in JavaScript
DESCRIPTION: This snippet demonstrates how to manually set props on a Stencil component in JavaScript. It selects the component and assigns values to its properties.

LANGUAGE: markup
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Setting Component Style Mode in Stencil
DESCRIPTION: Demonstrates how to use setMode() to dynamically set the style mode of a Stencil component based on an attribute. This allows for flexible styling based on component state or configuration.

LANGUAGE: typescript
CODE:
import { setMode } from '@stencil/core'

// set mode based on a property
setMode((el) => el.getAttribute('mode'));

----------------------------------------

TITLE: Using Jest to Mock and Test Custom Code in Stencil
DESCRIPTION: Example of a test file that uses Jest to mock the 'utils' module and test the 'bar' function. This demonstrates how to apply a mock and write a test using Jest in Stencil.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Configuring Stencil Docs-README Output Target
DESCRIPTION: Basic configuration to enable automatic README generation in a Stencil project by adding the docs-readme output target to the config file.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Configuring Vitest for Stencil
DESCRIPTION: Configuration setup for Vitest to enable browser testing with Stencil components using Chrome in headless mode.

LANGUAGE: typescript
CODE:
import stencil from 'unplugin-stencil/vite'
import { defineConfig } from 'vitest/config'

export default defineConfig({
    test: {
        browser: {
            enabled: true,
            headless: true,
            name: 'chrome'
        },
    },
    plugins: [stencil()]
})

----------------------------------------

TITLE: Creating Playwright Configuration for Stencil
DESCRIPTION: TypeScript code to create a Playwright configuration file using the Stencil Playwright adapter's createConfig function and custom matchers.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

// Add custom Stencil matchers to Playwright assertions
expect.extend(matchers);

export default createConfig({
  // Overwrite Playwright config options here
});

----------------------------------------

TITLE: Implementing CSS Custom Properties
DESCRIPTION: Demonstration of using CSS custom properties (variables) to allow component style customization from the light DOM.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

----------------------------------------

TITLE: Composing Stencil Components
DESCRIPTION: This example demonstrates how to embed one Stencil component within another, showcasing component composition.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Functional Component with Children
DESCRIPTION: Example of a functional component that accepts both props and children arguments.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Configuring package.json for Custom Elements Distribution
DESCRIPTION: Example of how to configure the package.json file for distributing custom elements, including setting the module and types fields.

LANGUAGE: json
CODE:
{
  "module": "dist/components/index.js",
  "types": "dist/components/index.d.ts",
  "dependencies": {
    "@stencil/core": "latest"
  },
  ...
}

----------------------------------------

TITLE: Host Component as Fragment
DESCRIPTION: Shows how to use Host component to render multiple elements at the root level of a component.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Selecting a Starter Project in Stencil CLI
DESCRIPTION: CLI prompt for selecting the type of Stencil project to start, including component, app, and ionic-pwa options.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Generating README Files with Stencil Docs Command
DESCRIPTION: Use the Stencil docs command as an alternative to generate documentation for all output targets.

LANGUAGE: bash
CODE:
npx stencil docs

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: This snippet shows how to add custom Rollup plugins to a Stencil project. It demonstrates injecting plugins before node-resolve and after commonjs transform in the Stencil configuration file.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Initializing Stencil Dev Server with start() Method
DESCRIPTION: The start() method initializes a Stencil development server. It accepts a StencilDevServerConfig object, a Logger instance, and an optional CompilerWatcher parameter. Returns a Promise that resolves to a DevServer instance.

LANGUAGE: tsx
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3.1.0
DESCRIPTION: Configuration to explicitly enable the transformAliasedImportPaths feature in Stencil v3.1.0. This is no longer necessary in v4.0.0 as it's enabled by default.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Conditional Execution in Stencil for Browser vs Prerendering
DESCRIPTION: This code snippet shows how to use the Build.isBrowser conditional to execute different code paths during browser runtime versus prerendering, which is crucial for avoiding issues during Static Site Generation.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Correct Component Module Structure in TypeScript
DESCRIPTION: The correct way to structure component modules in Stencil, with utility functions moved to a separate file.

LANGUAGE: typescript
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: typescript
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: typescript
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Configuring TypeScript for the monorepo
DESCRIPTION: TypeScript configuration for the root of the monorepo workspace.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Required Properties in Stencil
DESCRIPTION: This example shows how to mark a prop as required in a Stencil component using the '!' operator.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class ToDoListItem {
   @Prop() thingToDo!: string;
}

----------------------------------------

TITLE: Vue Component Library Package Configuration
DESCRIPTION: JSON configuration for the Vue component library package.json defining build, dependencies and output settings.

LANGUAGE: json
CODE:
{
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "scripts": {
    "test": "echo \"Error: run tests from root\" && exit 1",
    "build": "npm run tsc",
    "tsc": "tsc -p . --outDir ./dist"
  },
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "stencil-library": "*"
  }
}

----------------------------------------

TITLE: Creating a Clock Component with Lifecycle Methods in Stencil
DESCRIPTION: This example creates a clock component that updates every second. It uses connectedCallback to start the timer when the component is added to the DOM and disconnectedCallback to stop the timer when the component is removed.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config
DESCRIPTION: Shows how to add the stats output target to the stencil.config.ts file. This configuration will auto-generate the stats file with every build. The file property is optional and defaults to 'stencil-stats.json' in the project root.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Custom Service Worker Implementation with Workbox
DESCRIPTION: Example of a custom service worker implementation using Workbox, including basic precaching setup.

LANGUAGE: typescript
CODE:
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: React Component Consumer Example
DESCRIPTION: Example showing how to consume Stencil component wrappers in a React application, including component registration.

LANGUAGE: tsx
CODE:
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Implementing Vue Plugin for Component Registration
DESCRIPTION: TypeScript implementation of a Vue plugin that registers custom elements with polyfill support.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Running Visual Regression Tests in Stencil
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison functionality in Stencil applications.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Using Slots in Stencil Components
DESCRIPTION: Explains how to use slots to render dynamic children in specific locations within a component tree.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
      <h2>A Component</h2>
      <div><slot /></div>
    </div>
  );
}

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation
DESCRIPTION: Example showing how to configure primary package output target validation in Stencil. Demonstrates setting up validation flags for distribution output target and enabling validation in the config.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Using Build Constants in Stencil Component
DESCRIPTION: This code snippet demonstrates how to use Stencil's Build constants within a component to differentiate between development and production modes, as well as between browser and server environments. It requires importing the Build object from @stencil/core.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Configuring TypeScript Path Aliases in tsconfig.json
DESCRIPTION: Example of specifying path aliases in a TypeScript configuration file. This allows for mapping import paths to specific file locations.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Optimizing CSS with Stencil Core Compiler
DESCRIPTION: Shows the function signature for optimizing CSS using the Stencil Core Compiler utility function.

LANGUAGE: typescript
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Unit Testing a Stencil Component with WebdriverIO
DESCRIPTION: Demonstrates how to set up and write a unit test for a Stencil component using WebdriverIO's browser runner. It shows importing the component, rendering it, and making assertions on its content.

LANGUAGE: typescript
CODE:
import { render } from '@wdio/browser-runner/stencil';
import { MyComponent } from './my-component';

describe('MyComponent', () => {
    it('renders', async () => {
        await render({
            components: [MyComponent],
            template: () => (
                <my-component first="Stencil" last="'Don't call me a framework' JS"></my-component>
            )
        });

        await expect($('my-component'))
            .toHaveText(`Hello, World! I'm Stencil 'Don't call me a framework' JS`);
    });
});

----------------------------------------

TITLE: Object Updates with Stencil State Management
DESCRIPTION: Demonstrates proper patterns for updating objects in Stencil components using the spread operator to ensure component updates and watch handlers are triggered.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil Config
DESCRIPTION: This snippet shows how to add the 'docs-readme' output target to the Stencil configuration file. This setup enables automatic generation of README.md files for components.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Configuring Angular Output Target in Stencil
DESCRIPTION: TypeScript code showing how to configure the Angular output target in the Stencil config file.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Updating Arrays Reactively in Stencil Components
DESCRIPTION: Illustrates how to update arrays in a Stencil component using immutable methods to trigger @Watch and component re-renders. It uses the spread operator to create a new array reference.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Checking Push Notification Subscription
DESCRIPTION: Code to check the current push notification subscription status and update accordingly.

LANGUAGE: javascript
CODE:
self.registration.pushManager.getSubscription().then(subscription => {
  if (!subscription) {
    // ask the user to register for push
    return;
  }

  // update the database
  console.log(subscription);
});

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class
DESCRIPTION: Basic implementation of a custom screenshot connector by extending the base ScreenshotConnector class from Stencil core.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Adding CSP Nonce Meta Tag for SSR (HTML)
DESCRIPTION: This snippet shows how to add a meta tag in the HTML head to specify the CSP nonce for Server-Side Rendering (SSR) in Stencil applications.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: E2E Test with SpecPage in TypeScript
DESCRIPTION: Example of E2E testing using newSpecPage instead of newE2EPage to ensure mocks work in the test environment.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: JSON Documentation for Event in Stencil v4
DESCRIPTION: Example of expanded JSON documentation for an @Event in Stencil v4, including the new complexType field with type information.

LANGUAGE: json
CODE:
{
  "complexType": {
    "original": "ModalBreakpointChangeEventDetail",
    "resolved": "ModalBreakpointChangeEventDetail",
    "references": {
      "ModalBreakpointChangeEventDetail": {
        "location": "import",
        "path": "./modal-interface",
        "id": "src/components/modal/modal.tsx::ModalBreakpointChangeEventDetail"
      }
    }
  }
}

----------------------------------------

TITLE: Consuming Angular Wrapper Components
DESCRIPTION: TypeScript and HTML code showing how to import and use the generated Angular wrapper components in an Angular application.

LANGUAGE: typescript
CODE:
// app.module.ts

import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

LANGUAGE: html
CODE:
<!-- app.component.html -->

<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: Example of how to document slots using the @slot JSDoc tag in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Using Stencil Store in a Component
DESCRIPTION: Demonstrates how to use the store within a Stencil component, including updating and rendering state values.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Configuring VS Code Launch Settings for Stencil Tests
DESCRIPTION: VS Code launch.json configuration for running and debugging Stencil end-to-end and spec tests for the currently active file.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "E2E Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--e2e", "--", "--maxWorkers=0", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Spec Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--spec", "--", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

----------------------------------------

TITLE: Configuring package.json for Standalone Components
DESCRIPTION: Shows the package.json configuration for properly importing standalone Stencil components.

LANGUAGE: json
CODE:
{
  "exports": {
    ".": {
      "import": "./dist/components/index.js",
      "types": "./dist/components/index.d.ts"
    },
    "./my-component": {
      "import": "./dist/components/my-component.js",
      "types": "./dist/components/my-component.d.ts"
    }
  },
  "types": "dist/components/index.d.ts"
}

----------------------------------------

TITLE: Running Specific Tests via Command Line
DESCRIPTION: Examples of how to run specific unit or end-to-end tests using the Stencil CLI. These commands demonstrate how to pass additional arguments to Jest for running individual test files.

LANGUAGE: sh
CODE:
# run a single unit test
npx stencil test --spec -- src/components/my-component/my-component.spec.ts
# run a single e2e test
npx stencil test --e2e -- src/components/my-component/my-component.e2e.ts

----------------------------------------

TITLE: CSS Custom Properties Declaration
DESCRIPTION: Example of declaring and using CSS custom properties in Stencil components

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Configuring Playwright in Stencil
DESCRIPTION: TypeScript configuration file for setting up Playwright with Stencil, including custom matchers and default configuration.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

// Add custom Stencil matchers to Playwright assertions
expect.extend(matchers);

export default createConfig({
  // Overwrite Playwright config options here
});

----------------------------------------

TITLE: Configuring Prerender Debug Options
DESCRIPTION: TypeScript configuration for debugging Stencil's prerender process, including options to limit URL crawling and enable runtime logging.

LANGUAGE: json
CODE:
{
  "crawlUrls": false,
  "entryUrls": ["/example"],
  "hydrateOptions": (_url) => {
    return {
      "runtimeLogging": true
    };
  }
}

----------------------------------------

TITLE: CreateCompiler Function Declaration
DESCRIPTION: TypeScript function signature for creating a compiler instance based on provided configuration.

LANGUAGE: typescript
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Host Element Styling - Regular DOM
DESCRIPTION: Shows how to style the host element using standard CSS selectors.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

----------------------------------------

TITLE: Marking Stencil Component as Deprecated
DESCRIPTION: Use the @deprecated JSDoc tag to mark a component as deprecated, which will add a deprecation notice to the generated README.

LANGUAGE: tsx
CODE:
/**
 * @deprecated since v2.0.0
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Installing Angular Output Target
DESCRIPTION: Command to install the Stencil Angular output target as a dev dependency.

LANGUAGE: bash
CODE:
npm install @stencil/angular-output-target --save-dev

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project by configuring the Sass plugin in the Stencil configuration file. It imports the necessary dependencies and adds the Sass plugin to the plugins array.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Starting Stencil Dev Server using start() Method in TSX
DESCRIPTION: Method signature for starting the Stencil development server. Takes a configuration object, logger instance, and optional compiler watcher as parameters. Returns a Promise that resolves to a DevServer instance.

LANGUAGE: tsx
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Rollup Configuration for Stencil Custom Elements
DESCRIPTION: Example Rollup configuration for consuming Stencil custom elements, including asset copying.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Jest Test with File-based Mock in TypeScript
DESCRIPTION: Test implementation showing how to use a file-based mock with Jest's mock system.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Creating Node System for Stencil Compiler in TypeScript
DESCRIPTION: Creates the system based on NodeJS APIs used by the Stencil compiler. It handles file system operations and content hashing using NodeJS. The NodeJS process object should be provided as an argument.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Loading Stencil Components via ES Modules
DESCRIPTION: Shows how to import Stencil components using ES Modules in a modern JavaScript environment.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Implementing CSP Nonce in Stencil Dist Output
DESCRIPTION: Example showing how to set a nonce in a Stencil application's dist output target within an Angular application's entrypoint. Uses the setNonce helper function to apply nonces to all script and style tags.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Configuring Vitest for Stencil Component Testing
DESCRIPTION: Configuration setup for Vitest to enable browser-based testing of Stencil components using Chrome in headless mode.

LANGUAGE: typescript
CODE:
import stencil from 'unplugin-stencil/vite'
import { defineConfig } from 'vitest/config'

export default defineConfig({
    test: {
        browser: {
            enabled: true,
            headless: true,
            name: 'chrome'
        },
    },
    plugins: [stencil()]
})

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: Basic configuration example showing how to set up the dist output target in a Stencil project's configuration file.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Configuring Testing Options in Stencil TypeScript
DESCRIPTION: TypeScript interface definitions for Stencil's testing configuration, including E2E testing options, screenshot comparison settings, and browser emulation configurations. Extends Jest's configuration with additional Stencil-specific options for controlling browser behavior and screenshot testing.

LANGUAGE: typescript
CODE:
export interface TestingConfig extends JestConfig {
  /**
   * The `allowableMismatchedPixels` value is used to determine an acceptable
   * number of pixels that can be mismatched before the image is considered
   * to have changes. Realistically, two screenshots representing the same
   * content may have a small number of pixels that are not identical due to
   * anti-aliasing, which is perfectly normal. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedPixels?: number;

  /**
   * The `allowableMismatchedRatio` ranges from `0` to `1` and is used to
   * determine an acceptable ratio of pixels that can be mismatched before
   * the image is considered to have changes. Realistically, two screenshots
   * representing the same content may have a small number of pixels that
   * are not identical due to anti-aliasing, which is perfectly normal. The
   * `allowableMismatchedRatio` is the number of pixels that were mismatched,
   * divided by the total number of pixels in the screenshot. For example,
   * a ratio value of `0.06` means 6% of the pixels can be mismatched before
   * the image is considered to have changes. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedRatio?: number;

  /**
   * Matching threshold while comparing two screenshots. Value ranges from `0` to `1`.
   * Smaller values make the comparison more sensitive. The `pixelmatchThreshold`
   * value helps to ignore anti-aliasing. Default: `0.1`
   */
  pixelmatchThreshold?: number;

  /**
   * Additional arguments to pass to the browser instance.
   */
  browserArgs?: string[];

  /**
   * Path to a Chromium or Chrome executable to run instead of the bundled Chromium.
   */
  browserExecutablePath?: string;

  /**
   * Whether to run browser e2e tests in headless mode.
   */
  browserHeadless?: boolean;

  /**
   * Whether to auto-open a DevTools panel for each tab.
   * If this option is true, the headless option will be set false
   */
  browserDevtools?: boolean;

  /**
   * Slows down e2e browser operations by the specified amount of milliseconds.
   * Useful so that you can see what is going on.
   */
  browserSlowMo?: number;

  /**
   * Array of browser emulations to be used during _screenshot_ tests.
   */
  emulate?: EmulateConfig[];

  /**
   * Path to the Screenshot Connector module.
   */
  screenshotConnector?: string;
}

export interface EmulateConfig {
  /**
   * Predefined device descriptor name, such as "iPhone X" or "Nexus 10".
   */
  device?: string;

  /**
   * User-Agent to be used. Defaults to the user-agent of the installed Puppeteer version.
   */
  userAgent?: string;

  viewport?: EmulateViewport;
}

export interface EmulateViewport {
  /**
   * Page width in pixels.
   */
  width: number;

  /**
   * page height in pixels.
   */
  height: number;

  /**
   * Specify device scale factor (can be thought of as dpr). Defaults to 1.
   */
  deviceScaleFactor?: number;

  /**
   * Whether the meta viewport tag is taken into account. Defaults to false.
   */
  isMobile?: boolean;

  /**
   * Specifies if viewport supports touch events. Defaults to false
   */
  hasTouch?: boolean;

  /**
   * Specifies if viewport is in landscape mode. Defaults to false.
   */
  isLandscape?: boolean;
}

----------------------------------------

TITLE: Exporting Generated Angular Wrappers
DESCRIPTION: Angular module setup to export the generated component wrappers.

LANGUAGE: typescript
CODE:
import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Using renderToString Function
DESCRIPTION: Example of using renderToString to hydrate HTML content with pretty printing and script removal options

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(srcHtml, {
  prettyHtml: true,
  removeScripts: true
});

console.log(results.html);

----------------------------------------

TITLE: Environment Variable Configuration
DESCRIPTION: Example showing how to configure environment variables in Stencil config and use them in components.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  env: {
    API_BASE_URL: process.env.API_BASE_URL
  }
}

LANGUAGE: typescript
CODE:
import { Component, h, Env, Host } from '@stencil/core';

@Component({
  tag: 'api-component',
})
export class APIComponent {
  async connectedCallback () {
    const res = await fetch(Env.API_BASE_URL)
    // ...
  }
}

----------------------------------------

TITLE: Importing WebdriverIO Mocking Primitives
DESCRIPTION: Demonstrates how to import the core mocking functions from the WebdriverIO browser-runner package.

LANGUAGE: typescript
CODE:
import { mock, fn, unmock } from '@wdio/browser-runner'

----------------------------------------

TITLE: Comprehensive E2E Test for Toggle Component
DESCRIPTION: Illustrates a more complex E2E test scenario for a toggle component, including setting content, spying on events, checking classes, and verifying property changes.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Adding @deprecated JSDoc Tag for Component Deprecation
DESCRIPTION: This example demonstrates how to use the @deprecated JSDoc tag to mark a component as deprecated, which will be reflected in the generated README.

LANGUAGE: typescript
CODE:
/**
 * @deprecated since v2.0.0
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Configuring Stencil Project for E2E Testing
DESCRIPTION: Shows the configuration in stencil.config.ts for setting up the project structure and output targets for end-to-end testing.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'test-app',
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null,
      copy: [{ src: '**/test/*.html' }, { src: '**/test/*.css' }],
    },
  ],
};

----------------------------------------

TITLE: Selecting Stencil Project Type
DESCRIPTION: CLI prompt for selecting the type of Stencil project to start. Options include component collection, app, and Ionic PWA starter.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Using Ionic Components in Ember Template
DESCRIPTION: Example of using an Ionic component (ion-toggle) in an Ember component template.

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Initializing Shadow DOM Component in Stencil
DESCRIPTION: Example of creating a Stencil component with Shadow DOM enabled using the shadow property in the component decorator

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config
DESCRIPTION: Configuration code to specify a custom screenshot connector in the Stencil testing config.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Running Visual Regression Tests in Stencil
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison functionality in Stencil.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Importing Auto-Defined Standalone Stencil Components
DESCRIPTION: Example of importing an auto-defined standalone Stencil component.

LANGUAGE: typescript
CODE:
import 'my-design-system/my-component'

----------------------------------------

TITLE: Executing Static Build in Stencil
DESCRIPTION: Commands for enabling prerendering during the Stencil build process using the --prerender flag.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Creating NodeJS Logger for Stencil Compiler
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the Stencil compiler and dev-server. It requires the NodeJS 'process' object as an argument.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Exporting Prerender Config Object
DESCRIPTION: This snippet demonstrates how to export a config object using the PrerenderConfig interface in the prerender.config.ts file. This object will contain various configuration options for the prerendering process.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Typed Functional Component in Stencil
DESCRIPTION: Shows how to create a functional component with typed props using Stencil's FunctionalComponent generic type.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Defining TestingConfig Interface in TypeScript for Stencil
DESCRIPTION: This TypeScript interface extends Jest's configuration and adds Stencil-specific options for e2e testing. It includes settings for screenshot comparison, browser emulation, and Puppeteer configuration.

LANGUAGE: typescript
CODE:
export interface TestingConfig extends JestConfig {
  /**
   * The `allowableMismatchedPixels` value is used to determine an acceptable
   * number of pixels that can be mismatched before the image is considered
   * to have changes. Realistically, two screenshots representing the same
   * content may have a small number of pixels that are not identical due to
   * anti-aliasing, which is perfectly normal. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedPixels?: number;

  /**
   * The `allowableMismatchedRatio` ranges from `0` to `1` and is used to
   * determine an acceptable ratio of pixels that can be mismatched before
   * the image is considered to have changes. Realistically, two screenshots
   * representing the same content may have a small number of pixels that
   * are not identical due to anti-aliasing, which is perfectly normal. The
   * `allowableMismatchedRatio` is the number of pixels that were mismatched,
   * divided by the total number of pixels in the screenshot. For example,
   * a ratio value of `0.06` means 6% of the pixels can be mismatched before
   * the image is considered to have changes. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedRatio?: number;

  /**
   * Matching threshold while comparing two screenshots. Value ranges from `0` to `1`.
   * Smaller values make the comparison more sensitive. The `pixelmatchThreshold`
   * value helps to ignore anti-aliasing. Default: `0.1`
   */
  pixelmatchThreshold?: number;

  /**
   * Additional arguments to pass to the browser instance.
   */
  browserArgs?: string[];

  /**
   * Path to a Chromium or Chrome executable to run instead of the bundled Chromium.
   */
  browserExecutablePath?: string;

  /**
   * Whether to run browser e2e tests in headless mode.
   *
   * `headless` is an argument passed through to Puppeteer (which is passed to Chrome) for
   * end-to-end testing. Prior to Chrome v112, `headless` was treated like a boolean flag.
   * Starting with Chrome v112, 'new' is an accepted option to support Chrome's new
   * headless mode.
   *
   * The following values are accepted:
   * - "new" - enables the "new" headless mode, starting with Chrome 112
   * - `true` - enables the "old" headless mode, prior to Chrome 112
   * - `false` - enables the "headful" mode
   *
   * Stencil will default to `true` (the old headless mode) if no value is provided.
   *
   * In the future, Chrome will enable the new headless mode by default, even when `true`
   * is provided.
   *
   * {@see https://developer.chrome.com/articles/new-headless/}
   */
  browserHeadless?: boolean;

  /**
   * Whether to auto-open a DevTools panel for each tab.
   * If this option is true, the headless option will be set false
   */
  browserDevtools?: boolean;

  /**
   * Slows down e2e browser operations by the specified amount of milliseconds.
   * Useful so that you can see what is going on.
   */
  browserSlowMo?: number;

  /**
   * Array of browser emulations to be used during _screenshot_ tests. A full screenshot
   * test is run for each emulation.
   * 
   * To emulate a device display for your e2e tests, use the `setViewport` method on a test's E2E page.
   */
  emulate?: EmulateConfig[];

  /**
   * Path to the Screenshot Connector module.
   */
  screenshotConnector?: string;
}

export interface EmulateConfig {
  /**
   * Predefined device descriptor name, such as "iPhone X" or "Nexus 10".
   * For a complete list please see: https://github.com/puppeteer/puppeteer/blob/main/src/DeviceDescriptors.ts
   */
  device?: string;

  /**
   * User-Agent to be used. Defaults to the user-agent of the installed Puppeteer version.
   */
  userAgent?: string;

  viewport?: EmulateViewport;
}


export interface EmulateViewport {

  /**
   * Page width in pixels.
   */
  width: number;

  /**
   * page height in pixels.
   */
  height: number;

  /**
   * Specify device scale factor (can be thought of as dpr). Defaults to 1.
   */
  deviceScaleFactor?: number;

  /**
   * Whether the meta viewport tag is taken into account. Defaults to false.
   */
  isMobile?: boolean;

  /**
   * Specifies if viewport supports touch events. Defaults to false
   */
  hasTouch?: boolean;

  /**
   * Specifies if viewport is in landscape mode. Defaults to false.
   */
  isLandscape?: boolean;

}

----------------------------------------

TITLE: Reflecting Properties to Attributes
DESCRIPTION: Shows how to reflect property values to attributes in Stencil components.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop({ reflect: false }) isComplete: boolean = false;
    @Prop({ reflect: true }) timesCompletedInPast: number = 2;
    @Prop({ reflect: true }) thingToDo: string = "Read Reflect Section of Stencil Docs";
}

----------------------------------------

TITLE: Valid and Invalid Method Implementations
DESCRIPTION: Examples of valid and invalid implementations of @Method decorator usage, showing proper async patterns and return types.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Registering Custom Elements in Angular
DESCRIPTION: Angular module configuration to register custom elements during app initialization.

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Configuring assetsDirs in Stencil Component
DESCRIPTION: Shows how to configure the assetsDirs option in a Stencil component decorator to specify asset directories and use getAssetPath to load images.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class
DESCRIPTION: Basic implementation of a custom screenshot connector by extending the base ScreenshotConnector class.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Inline Mocking in a Stencil Test with TypeScript
DESCRIPTION: This example shows an alternative approach to mocking where the mock is defined inline using jest.mock()'s module factory function. This method doesn't require creating a separate mock file.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Transpiling Code with Stencil Core Compiler
DESCRIPTION: Shows the function signature for transpiling code using the Stencil Core Compiler. It takes source code as a string and optional transpile options, returning a Promise with the transpilation results.

LANGUAGE: typescript
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Running Stencil CLI
DESCRIPTION: Executes the CLI with provided initialization options. Used by default bin/stencil file and can be used for external implementations.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Writing E2E Tests with page.goto() in Stencil
DESCRIPTION: Demonstrates how to write an end-to-end test using the page.goto() method to load a pre-defined HTML template in a Stencil project.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // The path here is the path to the www output relative to the dev server root directory
    await page.goto('/components/my-component/test/my-component.e2e.html');

    // Rest of test
    const component = await page.locator('my-component');
    await expect(component).toHaveText(`Hello World! I'm Stencil`);
  });
});

----------------------------------------

TITLE: Using Stencil Component in HTML
DESCRIPTION: Example of how to use a Stencil component in HTML markup after it has been compiled.

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Calling Public Methods in Stencil Components
DESCRIPTION: Shows how to properly call a public method on a Stencil component, including waiting for the component to be defined using customElements.whenDefined().

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Stencil Component Test with JSX
DESCRIPTION: Example test case demonstrating how to test Stencil components using JSX syntax

LANGUAGE: tsx
CODE:
/** @jsx createElement */
import { expect, test } from 'vitest'

import { createElement } from '../../utils/jsx'
import './my-component.js'

test('should render the component with jsx', async () => {
    const cmp = <my-component first="Stencil" last="'Don't call me a framework' JS"></my-component>
    document.body.appendChild(cmp)
    await new Promise((resolve) => requestIdleCallback(resolve))
    expect(cmp.shadowRoot?.querySelector('div')?.innerText)
        .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)
})

----------------------------------------

TITLE: Screenshot Connector Interface Definition
DESCRIPTION: Interface definition showing all available methods that can be implemented in a custom screenshot connector.

LANGUAGE: tsx
CODE:
export interface ScreenshotConnector {
  initBuild(opts: ScreenshotConnectorOptions): Promise<void>;

  pullMasterBuild(): Promise<void>;

  getMasterBuild(): Promise<ScreenshotBuild>;

  getScreenshotCache(): Promise<ScreenshotCache>;

  completeBuild(masterBuild: ScreenshotBuild): Promise<ScreenshotBuildResults>;
  
  publishBuild(buildResults: ScreenshotBuildResults): Promise<ScreenshotBuildResults>;

  updateScreenshotCache(screenshotCache: ScreenshotCache, buildResults: ScreenshotBuildResults): Promise<ScreenshotCache>;

  generateJsonpDataUris(build: ScreenshotBuild): Promise<void>;
}

----------------------------------------

TITLE: Installing Stencil Store with NPM/Yarn
DESCRIPTION: Command to install @stencil/store as a dev dependency in your project.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: Demonstrates how to document slots using the @slot JSDoc tag, which will be included in the generated README.

LANGUAGE: typescript
CODE:
/**
 * @slot - Content is placed between the named slots if provided without a slot.
 * @slot primary - Content is placed to the left of the main slotted-in text.
 * @slot secondary - Content is placed to the right of the main slotted-in text.
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent {
  // ...
  
  render() {
    return (
      <section>
        <slot name="primary"></slot>
        <div class="content">
          <slot></slot>
        </div>
        <slot name="secondary"></slot>
      </section>
    );
  }
}

----------------------------------------

TITLE: Configuring Stencil Project for E2E Testing
DESCRIPTION: Shows the configuration in stencil.config.ts for setting up the project structure and output targets for end-to-end testing.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'test-app',
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null,
      copy: [{ src: '**/test/*.html' }, { src: '**/test/*.css' }],
    },
  ],
};

----------------------------------------

TITLE: Form-Associated Component in Stencil
DESCRIPTION: Shows how to create a form-associated component that can participate in HTML forms using the formAssociated property.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Setting Document Title in Stencil Prerender Config (TSX)
DESCRIPTION: This snippet demonstrates how to use the afterHydrate hook in Stencil's Prerender Config to set the document title based on the URL pathname. It utilizes the Document and URL objects provided by the hook.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Valid and Invalid Method Implementations
DESCRIPTION: Demonstrates valid and invalid implementations of public methods using @Method decorator, showing proper async/Promise usage requirements.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Retrieving Stencil Element Reference
DESCRIPTION: Demonstrates how to use getElement() to retrieve a Stencil element reference from a DOM query. This allows interaction with Stencil-specific APIs like componentOnReady().

LANGUAGE: typescript
CODE:
import { getElement } from '@stencil/core'

const stencilComponent = getElement(document.querySelector('my-cmp'))
if (stencilComponent) {
  stencilComponent.componentOnReady().then(() => { ... })
}

----------------------------------------

TITLE: Configuring Stencil Test Patterns
DESCRIPTION: Stencil configuration to specify test file patterns

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // ...
  testing: {
    testRegex: '(/__tests__/.*|\\.?(spec))\\.(ts|js)$',
  },
};

----------------------------------------

TITLE: Importing Test Function from Stencil Playwright Adapter
DESCRIPTION: Demonstrates the correct way to import the 'test' function for Stencil Playwright tests. It emphasizes importing from '@stencil/playwright' instead of '@playwright/test' to ensure proper functionality.

LANGUAGE: typescript
CODE:
// THIS IS CORRECT
import { test } from '@stencil/playwright';

// THIS IS NOT!!
// import { test } from '@playwright/test';

----------------------------------------

TITLE: Demonstrating ConnectedCallback in Stencil
DESCRIPTION: Example showing how connectedCallback is called when a component is attached to the DOM, including multiple attachment scenarios.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Configuring VS Code Settings for Custom HTML Data
DESCRIPTION: This JSON snippet demonstrates how to configure VS Code settings to use the generated custom element data file. It adds the path to the generated JSON file in the 'html.customData' setting.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Defining Global Styles in Stencil
DESCRIPTION: Demonstrates how to define global styles using CSS custom properties on the :root pseudo-class, which can be used across all components.

LANGUAGE: css
CODE:
:root {
  --color-primary: blue;
}

----------------------------------------

TITLE: Creating a Worker Pool in Stencil
DESCRIPTION: Shows how to create multiple Worker instances using the workerPath provided by Stencil.

LANGUAGE: tsx
CODE:
import { workerPath } from '../../stuff.worker.ts?worker';

const workerPool = [
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
];

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: This code shows how to import all components from the Ionic Framework in an Ember application's main JavaScript file.

LANGUAGE: javascript
CODE:
import '@ionic/core'; // installs all the components from Ionic Framework

----------------------------------------

TITLE: Using Functional Component with Props
DESCRIPTION: Example of how to use a functional component by passing props.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Creating Node Logger in Stencil Core CLI
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the compiler and dev-server. It requires the NodeJS 'process' object as an argument.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Configuring Rollup for Custom Elements Bundle
DESCRIPTION: This snippet provides a Rollup configuration example for consuming a custom elements bundle, including asset copying.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Creating Node Logger in Stencil CLI
DESCRIPTION: Creates a logger instance using NodeJS APIs for compiler and dev-server logging. Requires NodeJS process object as input.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Using Build Constants in Stencil Component
DESCRIPTION: Demonstrates how to import and use Build constants from @stencil/core to conditionally execute code based on development or production mode, and browser or server environment.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Adding Vue Output Target to Stencil config
DESCRIPTION: Configuration for the Vue output target in the Stencil config file.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Basic Screenshot Comparison Test in Stencil
DESCRIPTION: Simple example of setting up a screenshot comparison test using Puppeteer in a Stencil e2e test.

LANGUAGE: javascript
CODE:
it('render something', async () => {
  const page: E2EPage = await newE2EPage();
  await page.setContent('<my-cmp></my-cmp>');
  await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
});

----------------------------------------

TITLE: Running Individual Tasks in Stencil CLI
DESCRIPTION: Executes specific tasks with given NodeJS process, Stencil config, and task command. Optionally accepts a compiler system parameter.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Object Updates with Spread Operator in Stencil
DESCRIPTION: Demonstrates proper object update patterns in Stencil components using the spread operator to ensure component reactivity and trigger watch handlers.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Setting Object Props in HTML for Stencil Component
DESCRIPTION: Demonstrates how to manually set object and array props for a Stencil component in HTML using JavaScript.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Loading Stencil Components via ES Modules
DESCRIPTION: Shows how to import Stencil components using ES Modules in a modern JavaScript environment.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Creating Vue Plugin for Custom Elements
DESCRIPTION: Vue plugin to register custom elements for lazy-loaded components.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Mocking External Library in TypeScript
DESCRIPTION: Example of mocking an external npm package (md5) by creating a mock file in __mocks__ directory

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: JavaScript code to import all Ionic Framework components into an Ember application

LANGUAGE: javascript
CODE:
import '@ionic/core';

----------------------------------------

TITLE: Using Ionic Toggle Component in Ember Template
DESCRIPTION: Example of using an Ionic toggle component in an Ember template file.

LANGUAGE: js
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Mocking an External Library in Stencil Tests
DESCRIPTION: Creates a mock for the 'md5' library by defining a mock implementation in a __mocks__ folder. This approach automatically applies the mock when the library is imported.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Configuring Custom Service Worker in Stencil
DESCRIPTION: Shows how to specify a custom Service Worker file in the Stencil config, enabling full control over the Service Worker implementation.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        swSrc: 'src/sw.js'
      }
    }
  ]
};

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Components
DESCRIPTION: Example of fetching and rendering dynamic data using async/await in a Stencil component's lifecycle method componentWillLoad.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Configuring TypeScript Path Aliases
DESCRIPTION: Example of configuring path aliases in tsconfig.json using the TypeScript paths configuration option.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Rollup Configuration for Custom Elements
DESCRIPTION: This snippet provides an example Rollup configuration for consuming Stencil-generated custom elements, including asset handling.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Complete Compiler Creation Example
DESCRIPTION: Full example of setting up and using the Stencil compiler in a NodeJS environment.

LANGUAGE: tsx
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: CSS Parts Implementation
DESCRIPTION: Example of using CSS parts to enable external styling of shadow DOM elements.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Calling Component Methods in E2E Tests
DESCRIPTION: Shows how to call a @Method() on a component during an E2E test using find, setProperty, and callMethod.

LANGUAGE: typescript
CODE:
const elm = await page.find('method-cmp');
elm.setProperty('someProp', 88);
const methodRtnValue = await elm.callMethod('someMethod');

----------------------------------------

TITLE: Dynamic Content Test Example
DESCRIPTION: Example of using page.setContent() for inline HTML testing without template files.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    await page.setContent('<my-component first="Stencil"></my-component>');

    // Rest of test
  });
});

----------------------------------------

TITLE: Running Stencil CLI with Options in TypeScript
DESCRIPTION: Executes the Stencil CLI with given options. This function is used by Stencil's default bin/stencil file but can also be used externally. It returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Rendering Multiple Stencil Components for Unit Testing
DESCRIPTION: Shows how to render multiple Stencil components for unit testing when a component under test uses other components. It demonstrates importing and passing all required components to the 'render' method.

LANGUAGE: typescript
CODE:
render({
    components: [ComponentA, ComponentB, ComponentC, ComponentD],
    template: () => <component-a first="Stencil" last="'Don't call me a framework' JS" />
});

----------------------------------------

TITLE: Running Visual Regression Tests in Stencil
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison functionality

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Configuring docs-custom Output Target in Stencil
DESCRIPTION: This code snippet demonstrates how to add the docs-custom output target to your Stencil configuration. It includes a generator function that receives the JsonDocs object, allowing for custom logic to be executed on the documentation data during the build process.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Loading Stencil Component via ES Modules in HTML
DESCRIPTION: Shows how to include Stencil components using ES Modules import statement in an HTML file.

LANGUAGE: html
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Configuring VS Code Browser Debugging for Stencil
DESCRIPTION: Launch configuration for debugging Stencil components in Chrome browser. Sets up source map handling and localhost connection on port 3333.

LANGUAGE: json
CODE:
{
  "type": "chrome",
  "request": "launch",
  "name": "Launch Chrome against localhost",
  "url": "http://localhost:3333",
  "sourceMaps": true,
  "sourceMapPathOverrides": {
    "*": "${webRoot}/*"
  }
}

----------------------------------------

TITLE: Webpack Configuration for Custom Elements Bundle
DESCRIPTION: This snippet provides a webpack configuration example for consuming a custom elements bundle, including asset copying.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Creating NodeJS System for Stencil Compiler
DESCRIPTION: Creates a system based on NodeJS APIs for the compiler, handling file system operations and content hashing. It requires the NodeJS 'process' object as an argument.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Worker with Progress Callbacks
DESCRIPTION: Implementation of a Web Worker that provides progress updates via callbacks

LANGUAGE: typescript
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

----------------------------------------

TITLE: Webpack Configuration for Custom Elements
DESCRIPTION: Webpack configuration example showing how to handle assets and setup module bundling for custom elements.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Creating Node Logger in Stencil CLI
DESCRIPTION: Creates a logger instance using NodeJS APIs for compiler and dev-server logging. Requires the NodeJS process object as input.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Testing Component Properties with JSX Template in TSX
DESCRIPTION: Demonstrates testing a Stencil component using the template option with JSX syntax, allowing for property-based testing instead of HTML attributes.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Stencil Config with Copy Task
DESCRIPTION: Configuration example showing how to set up copy tasks for asset files in Stencil config

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
};

----------------------------------------

TITLE: Handling Push Events in Service Worker
DESCRIPTION: Service Worker code to handle incoming push events, create notifications, and define actions for notification interactions.

LANGUAGE: javascript
CODE:
self.addEventListener('push', event => {
  console.log(`Push received with data "${event.data.text()}"`);

  const title = 'Push Notification';
  const options = {
    body: `${event.data.text()}`,
    data: { href: '/users/donald' },
    actions: [
      { action: 'details', title: 'Details' },
      { action: 'dismiss', title: 'Dismiss' },
    ],
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

self.addEventListener('notificationclick', event => {
  const notification = event.notification;
  const action = event.action;

  if (action === 'dismiss') {
    notification.close();
  } else {
    // This handles both notification click and 'details' action,
    // because some platforms might not support actions.
    clients.openWindow(notification.data.href);
    notification.close();
  }
});

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: Use the @slot JSDoc tag to document slots in your Stencil component.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Applying Inline Styles to a Stencil Component
DESCRIPTION: Demonstrates how to apply inline styles to a Stencil component using the styles option in the @Component decorator.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styles: 'div { background-color: #fff }'
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Resulting Playwright Configuration After Merge
DESCRIPTION: Shows the final Playwright configuration after merging the default settings with the custom overrides. This example illustrates how deep merging works for nested properties.

LANGUAGE: typescript
CODE:
{
  testMatch: '*.spec.ts',
  use: {
    baseURL: 'http://localhost:3333',
  },
  webServer: {
    command: 'stencil build --dev --watch --serve --no-open',
    url: 'http://localhost:3333/ping',
    reuseExistingServer: !process.env.CI,
    // Only timeout gets overridden, not the entire object
    timeout: 30000,
  },
}

----------------------------------------

TITLE: CSP Nonce Meta Tag Implementation for SSR
DESCRIPTION: HTML markup showing the required meta tag structure for implementing CSP nonces in Server-Side Rendering contexts.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Setting CSP Nonce Meta Tag for SSR
DESCRIPTION: Example of the required meta tag structure for implementing CSP nonces in Server-Side Rendering (SSR) scenarios. The meta tag must be injected into the header on each page request.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: ScreenshotConnector Interface (TypeScript)
DESCRIPTION: This snippet shows the interface for the ScreenshotConnector class, listing all the methods that can be overridden in a custom connector implementation. It includes methods for initializing, pulling, and completing builds, as well as managing the screenshot cache.

LANGUAGE: typescript
CODE:
export interface ScreenshotConnector {
  initBuild(options: ScreenshotConnectorOptions): Promise<void>;
  pullMasterBuild(): Promise<void>;
  getMasterBuild(): Promise<ScreenshotBuild>;
  getScreenshotCache(): Promise<ScreenshotCache>;
  completeBuild(masterBuild: ScreenshotBuild): Promise<ScreenshotBuildResults>;
  publishBuild(buildResults: ScreenshotBuildResults): Promise<ScreenshotBuildResults>;
  updateScreenshotCache(screenshotCache: ScreenshotCache, buildResults: ScreenshotBuildResults): Promise<ScreenshotCache>;
  generateJsonpDataUris?: boolean;
}

----------------------------------------

TITLE: Custom Service Worker Implementation in Stencil
DESCRIPTION: Example of implementing a custom Service Worker in Stencil. This snippet shows the basic structure and how to include Workbox for precaching.

LANGUAGE: javascript
CODE:
// change to the version you get from `npm ls workbox-build`
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Service Implementation Using Utility Helper
DESCRIPTION: Demonstrates a service that uses the getRandomInt utility function.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Configuring Copy Tasks in Stencil Config
DESCRIPTION: Demonstrates how to set up a copy task in the Stencil configuration to manually move assets to the distribution directory for custom output targets.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
  // ...
};

----------------------------------------

TITLE: Optimized Menu Navigation Component in TSX
DESCRIPTION: Improved implementation using light DOM structure instead of complex props for better SSR compatibility.

LANGUAGE: tsx
CODE:
const menu = {
    'Overview': ['Introduction', 'Getting Started', 'Component API', 'Guides', 'FAQ'],
    'Docs': ['Framework Integrations', 'Static Site Generation', 'Config', 'Output Targets', 'Testing', 'Core Compiler API'],
    'Community': ['Blog', 'GitHub', 'X', 'Discord']
}
return (
    <nav>
        <footer-navigation>
            {Object.entries(menu).map(([section, links]) => (
                <footer-navigation-section>
                    <h2>{section}</h2>
                    {links.map(link => (
                        <footer-navigation-entry href="#/">{link}</footer-navigation-entry>
                    ))}
                </footer-navigation-section>
            ))}
        </footer-navigation>
    </nav>
)

----------------------------------------

TITLE: VS Code Launch Configuration for Stencil Tests
DESCRIPTION: Configuration for VS Code launch.json to enable debugging of Stencil tests within the IDE.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "E2E Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--e2e", "--", "--maxWorkers=0", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Spec Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--spec", "--", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

----------------------------------------

TITLE: Installing Ionic Framework Dependencies
DESCRIPTION: Command to install the Ionic Framework core package in an Ember project

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Using Events in JSX with Stencil Components
DESCRIPTION: This snippet demonstrates how to bind event listeners directly in JSX when using Stencil components. It shows the syntax for listening to custom events emitted by components.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

LANGUAGE: tsx
CODE:
<todo-list onTodoDeleted={ev => this.someOtherMethod(ev)} />

----------------------------------------

TITLE: Importing Dependencies in a Stencil Web Worker
DESCRIPTION: This example shows how to import external dependencies and local modules within a Stencil Web Worker. It demonstrates loading and processing images using the upng-js library.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Updating tsconfig.json for Stencil Playwright Compatibility
DESCRIPTION: Adds the ESNext.Disposable option to the lib array in tsconfig.json to resolve build errors related to Symbol.asyncDispose.

LANGUAGE: json
CODE:
{
  "lib": [
    "...",
    "ESNext.Disposable"
  ],
  "..."
}

----------------------------------------

TITLE: Mocking a Library in TypeScript
DESCRIPTION: Example of mocking the 'md5' library by creating a mock file in the __mocks__ directory. This demonstrates how to create a simple mock that returns a fixed value.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Configuring Asset Directories for a Stencil Component
DESCRIPTION: This example demonstrates how to configure asset directories for a Stencil component and use the getAssetPath() function to load assets.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // 1. assetsDirs lists the 'assets' directory as a relative (sibling)
  // directory
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    // 2. the asset path is retrieved relative to the asset base path to use in
    // the <img> tag
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config
DESCRIPTION: Configuration snippet showing how to specify a custom screenshot connector in the Stencil config file

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Disabling Service Worker in Stencil Config
DESCRIPTION: Shows how to disable the service worker generation in a Stencil project by setting the serviceWorker property to null in the config.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: Demonstrates how to add Sass support to a Stencil project by configuring the @stencil/sass plugin in the config file. Shows the basic plugin setup using the plugins array.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Asset Path Component Example in TSX
DESCRIPTION: Shows how to use getAssetPath to resolve local asset paths in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Stencil Primary Package Output Target Validation Configuration
DESCRIPTION: Shows how to configure primary package output target validation in Stencil, including setting the isPrimaryPackageOutputTarget flag and enabling validation.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Component Lifecycle
DESCRIPTION: Shows how to use async/await in the componentWillLoad lifecycle method to fetch data from an API before rendering a Stencil component.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Rendering Complex Template Content in Stencil
DESCRIPTION: Demonstrates how to render multiple top-level elements using an array or Fragment in Stencil components.

LANGUAGE: tsx
CODE:
render() {
  return ([
  <div class="container">
    <ul>
      <li>Item 1</li>
      <li>Item 2</li>
      <li>Item 3</li>
    </ul>
  </div>,

  <div class="another-container">
    ... more html content ...
  </div>
  ]);
}

LANGUAGE: tsx
CODE:
import { Fragment } from '@stencil/core';

render() {
  return (<Fragment>
    <div class="container">
      <ul>
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
      </ul>
    </div>

    <div class="another-container">
      ... more html content ...
    </div>
  </Fragment>);
}

----------------------------------------

TITLE: Creating Mocks in WebdriverIO Tests (TypeScript)
DESCRIPTION: This example demonstrates how to create mocks for both project files and external modules in WebdriverIO tests. It shows mocking a utility function to return a fixed value and mocking an entire external module.

LANGUAGE: typescript
CODE:
import { mock, fn } from '@wdio/browser-runner'
import { format } from './utils/utils.ts'

// mock files within the project
mock('./utils/utils.ts', () => ({
    format: fn().mockReturnValue(42)
}))
// mock whole modules and replace functionality with what is defined in `./__mocks__/leftpad.ts`
mock('leftpad')

console.log(format()) // returns `42`

----------------------------------------

TITLE: Global Script Configuration
DESCRIPTION: Shows how to configure and export a global script that runs before the library/app loads.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: Data Flow Example
DESCRIPTION: Shows how Props can be used to pass data from parent to child components.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
})
export class TodoList {
  render() {
    return (
      <div>
        <h1>To-Do List Name: Stencil To Do List</h1>
        <ul>
           <todo-list-item thingToDo={"Learn about Stencil Props"}></todo-list-item>
           <todo-list-item thingToDo={"Write some Stencil Code with Props"}></todo-list-item>
           <todo-list-item thingToDo={"Dance Party"}></todo-list-item>
        </ul>
      </div>
    )
  }
}

----------------------------------------

TITLE: Configuring Stencil Output Targets in TypeScript
DESCRIPTION: This snippet demonstrates how to configure multiple output targets in a Stencil project's configuration file. It shows setting up both 'dist' and 'www' output types.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Configuring Stencil Output Target for Angular
DESCRIPTION: Configuration in stencil.config.ts to add the Angular output target for generating component wrappers.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Worker with Progress Callbacks
DESCRIPTION: Implementation of a Web Worker that provides progress updates via callbacks

LANGUAGE: typescript
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config (TSX)
DESCRIPTION: This snippet shows how to configure a custom screenshot connector in the Stencil configuration file. It sets the path to the custom connector file in the testing options.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Mocking External Library in TypeScript
DESCRIPTION: This snippet demonstrates how to create a mock for an external library (md5) by creating a file in the __mocks__ directory.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Setting Asset Path for Custom Elements
DESCRIPTION: This snippet demonstrates how to set the asset path for custom elements to ensure static assets are properly loaded.

LANGUAGE: javascript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Creating Node Logger in Stencil CLI
DESCRIPTION: Creates a logger instance using NodeJS APIs for compiler and dev-server logging. Requires the NodeJS process object as input.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Using renderToString for HTML String Hydration
DESCRIPTION: This snippet demonstrates how to use the renderToString function to hydrate an HTML string. It takes the source HTML and optional configuration options, returning a promise with the hydrated results.

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(srcHtml, {
  prettyHtml: true,
  removeScripts: true
});

console.log(results.html);

----------------------------------------

TITLE: Using renderToString for HTML String Hydration
DESCRIPTION: This snippet demonstrates how to use the renderToString function to hydrate an HTML string. It takes the source HTML and optional configuration options, returning a promise with the hydrated results.

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(srcHtml, {
  prettyHtml: true,
  removeScripts: true
});

console.log(results.html);

----------------------------------------

TITLE: Node Polyfills Plugin Configuration in Stencil
DESCRIPTION: Instructions for installing and configuring the rollup-plugin-node-polyfills plugin in a Stencil project to handle Node.js API dependencies.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Setting Asset Path in HTML for Stencil Components
DESCRIPTION: Demonstrates how to set the asset path for Stencil components when importing them via a script tag in HTML.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Setting Asset Path in HTML for Stencil Components
DESCRIPTION: Demonstrates how to set the asset path for Stencil components when importing them via a script tag in HTML.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Mocking Library Example in TypeScript
DESCRIPTION: Simple example showing how to mock an npm package (md5) by creating a mock file in the __mocks__ directory that returns a fake hash.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Custom Rollup Plugins Configuration in TypeScript
DESCRIPTION: An example of how to configure custom Rollup plugins in the Stencil config file. It shows how to add plugins before node-resolve and after commonjs transform.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Basic State Implementation in Stencil Component
DESCRIPTION: Basic example showing how to implement @State() decorator in a Stencil component to display current time.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Valid and Invalid Method Implementations in Stencil
DESCRIPTION: Examples of correct and incorrect implementations of public methods using the @Method() decorator, demonstrating the requirement for async returns.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Using renderToString for HTML Hydration
DESCRIPTION: This snippet demonstrates how to use the renderToString function to hydrate an HTML string. It takes the source HTML and configuration options, then returns the hydrated HTML results.

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(srcHtml, {
  prettyHtml: true,
  removeScripts: true
});

console.log(results.html);

----------------------------------------

TITLE: Accessing Raw Worker Instance in Stencil
DESCRIPTION: Demonstrates how to access the actual Worker instance in Stencil for manual usage of postMessage() and onmessage. This approach allows for more direct control over worker communication.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    worker.postMessage(['send data manually']);
    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Host Component as Fragment
DESCRIPTION: Demonstrates using Host component to render multiple elements at the root level of a component.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Configuring docs-custom Output Target in Stencil
DESCRIPTION: This snippet demonstrates how to add the 'docs-custom' output target to your Stencil configuration. It allows you to define a custom generator function that receives the generated docs JSON data as an argument.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: E2E Test HTML Template
DESCRIPTION: HTML template for end-to-end testing with necessary script tags for Stencil component loading.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf8" />

    <!-- Replace with the path to your entrypoint -->
    <script src="../../../build/test-app.esm.js" type="module"></script>
    <script src="../../../build/test-app.js" nomodule></script>
  </head>
  <body>
    <my-component first="Stencil"></my-component>
  </body>
</html>

----------------------------------------

TITLE: Configuring Event Options in Stencil
DESCRIPTION: Shows how to configure event behavior using EventOptions interface, including event naming, bubbling, cancelable, and composition settings.

LANGUAGE: typescript
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Generating Stencil Stats via NPM Scripts
DESCRIPTION: Example NPM scripts for generating Stencil stats JSON. Shows how to use the --stats flag with optional file path.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Loading Stencil Component via ES Module in HTML
DESCRIPTION: Shows how to import and define Stencil custom elements using ES Modules in an HTML file.

LANGUAGE: html
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Handling Keyboard Events in Stencil
DESCRIPTION: Demonstrates how to handle keyboard events using @Listen decorator and KeyboardEvent interface.

LANGUAGE: typescript
CODE:
@Listen('keydown')
handleKeyDown(ev: KeyboardEvent){
  if (ev.key === 'ArrowDown'){
    console.log('down arrow pressed')
  }
}

----------------------------------------

TITLE: Configuring JSON Docs Output Target
DESCRIPTION: Basic Stencil configuration to automatically generate JSON documentation during build

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Handling Service Worker Updates in Stencil Component (TypeScript)
DESCRIPTION: Example of how to handle service worker updates in a Stencil component, including showing a toast notification for updates.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    // If there is no waiting registration, this is the first service
    // worker being installed.
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Installing Playwright Browser Binaries
DESCRIPTION: Command to install the required Playwright browser binaries for testing.

LANGUAGE: bash
CODE:
npx playwright install

----------------------------------------

TITLE: Project Type Selection Prompt in Stencil CLI
DESCRIPTION: Text output showing the project type selection prompt in the Stencil CLI. It displays options for component, app, and ionic-pwa project types.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Stencil Config with CI/CD Testing Options
DESCRIPTION: Example configuration for running E2E tests in CI/CD environments, specifically for GitLab CI with Headless Chrome settings.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'Foo',
  testing: {
    /**
     * Gitlab CI doesn't allow sandbox, therefor this parameters must be passed to your Headless Chrome
     * before it can run your tests
     */
    browserArgs: ['--no-sandbox', '--disable-setuid-sandbox'],
  },
  outputTargets: [
    { type: 'dist' },
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Executing Individual Stencil Tasks
DESCRIPTION: Runs individual Stencil tasks with given NodeJS process, Stencil config, and task command. An optional CompilerSystem can be provided.

LANGUAGE: typescript
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Inline Mocking in Stencil Tests
DESCRIPTION: Example of inline mocking using Jest's 'jest.mock()' function with a module factory. This approach doesn't require creating a separate mock file.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: This command installs the ember-cli-stencil addon, which facilitates the integration of Stencil components in legacy Ember applications.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Enabling Strict Mode for README Generation
DESCRIPTION: Shows how to enable strict mode for README generation, which will output warnings for missing documentation.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      strict: true
    }
  ]
};

----------------------------------------

TITLE: Optimizing JavaScript with Stencil Compiler
DESCRIPTION: Illustrates the function signature for optimizing JavaScript using the Stencil Compiler utility, which applies minification optimizations based on the JavaScript target.

LANGUAGE: typescript
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Listening for appload Event in Stencil
DESCRIPTION: Shows how to listen for the appload event, which is emitted when the app and all its child components have finished loading. The event detail includes the namespace of the app that emitted the event.

LANGUAGE: typescript
CODE:
window.addEventListener('appload', (event) => {
  console.log(event.detail.namespace);
});

----------------------------------------

TITLE: Listening for appload Event in Stencil
DESCRIPTION: Shows how to listen for the appload event, which is emitted when the app and all its child components have finished loading. The event detail includes the namespace of the app that emitted the event.

LANGUAGE: typescript
CODE:
window.addEventListener('appload', (event) => {
  console.log(event.detail.namespace);
});

----------------------------------------

TITLE: Environment Variable Usage in Component
DESCRIPTION: Example demonstrating how to access configured environment variables within a Stencil component.

LANGUAGE: typescript
CODE:
import { Component, h, Env, Host } from '@stencil/core';

@Component({
  tag: 'api-component',
})
export class APIComponent {
  async connectedCallback () {
    const res = await fetch(Env.API_BASE_URL)
    // ...
  }
}

----------------------------------------

TITLE: Updating Vue library package.json
DESCRIPTION: Updates to the package.json file for the Vue component library.

LANGUAGE: json
CODE:
{
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "scripts": {
    "test": "echo \"Error: run tests from root\" && exit 1",
    "build": "npm run tsc",
    "tsc": "tsc -p . --outDir ./dist"
  },
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "stencil-library": "*"
  }
}

----------------------------------------

TITLE: Configuring Visual Service in WebdriverIO Configuration
DESCRIPTION: Configuration snippet for wdio.conf.ts to enable the visual service plugin in a WebdriverIO project. It sets up the visual regression options including baseline and screen dimensions.

LANGUAGE: typescript
CODE:
export const config: Options.Testrunner = {
  // ...
  services: [
    [
      'visual',
      {
        baselineFolder: join(process.cwd(), '__snapshots__'),
        formatImageName: '{tag}-{logName}-{width}x{height}',
        screenshotPath: join(process.cwd(), '__snapshots__'),
        savePerInstance: true,
        autoSaveBaseline: true,
        blockOutStatusBar: true,
        blockOutToolBar: true,
        // NOTE: When you are testing a component of a fixed size, you
        // might want to adjust these values according to your needs
        hideScrollBars: true,
        removeCalculatedSelectors: true,
        disableCSSAnimation: true
      }
    ]
  ]
  // ...
}

----------------------------------------

TITLE: Component Directory Structure Example
DESCRIPTION: Shows the resulting directory structure after generating a Stencil component, including all generated files like CSS, test files, and the main component file.

LANGUAGE: plain
CODE:
src
└── components
    └── page-home
        ├── page-home.css
        ├── page-home.e2e.ts
        ├── page-home.spec.ts
        └── page-home.tsx

----------------------------------------

TITLE: Stencil Project Structure Example
DESCRIPTION: Shows the typical file structure for a Stencil project with end-to-end testing setup.

LANGUAGE: tree
CODE:
stencil-project-root
└── src
    └── components
        ├── my.component.tsx
        └── test <-- directory containing test files
            ├── my-component.e2e.ts
            └── my-component.e2e.html

----------------------------------------

TITLE: Updating Objects in Stencil Components
DESCRIPTION: Demonstrates the proper technique for updating objects in Stencil components using the spread operator. This ensures that @Watch decorators are triggered and the component re-renders when object properties change.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: the 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}


----------------------------------------

TITLE: Creating Vue Plugin for Custom Elements Registration
DESCRIPTION: Create a Vue plugin that registers the custom elements for lazy-loaded components using the Stencil loader.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Web Components
DESCRIPTION: This JSON configuration sets up VS Code to launch Chrome for debugging Stencil components running on localhost:3333. It enables source maps and overrides source map paths to match the web root.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:3333",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "*": "${webRoot}/*"
      }
    }
  ]
}

----------------------------------------

TITLE: Advanced Worker Access and Manual Control
DESCRIPTION: Shows how to directly access and control Web Worker instances in Stencil for advanced use cases.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);
    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Configuring www Output Target in Stencil
DESCRIPTION: Basic configuration example for setting up the www output target in a Stencil project. This is the default output target type if none is specified.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Installing Playwright Dependencies with NPM/Yarn
DESCRIPTION: Commands to install the Stencil Playwright adapter and Playwright test framework dependencies.

LANGUAGE: bash
CODE:
npm i @stencil/playwright @playwright/test --save-dev

----------------------------------------

TITLE: Generating README Files with Stencil Docs Command
DESCRIPTION: Use the Stencil docs command to generate documentation for all output targets, including README files.

LANGUAGE: bash
CODE:
npx stencil docs

----------------------------------------

TITLE: Asset Resolution Examples with getAssetPath
DESCRIPTION: Demonstrates how to use getAssetPath to resolve asset locations relative to the build directory

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Implementing CSP Nonce in Stencil Dist Output
DESCRIPTION: Example showing how to set nonce attributes for script and style tags in a Stencil dist output target within an Angular application's entrypoint.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Loading Stencil Components via ES Modules
DESCRIPTION: Shows how to import Stencil components using ES Modules syntax through a CDN.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Using Build Conditionals for Browser-Specific Code in Stencil
DESCRIPTION: Demonstrates how to use the Build.isBrowser conditional to exclude certain code from running during prerendering, ensuring it only executes in the browser environment.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Jest Test with File-based Mock
DESCRIPTION: Example of a test file that uses a file-based mock implementation with Jest.mock().

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation
DESCRIPTION: Configuration example showing how to set up primary package output target validation in Stencil. Demonstrates setting the isPrimaryPackageOutputTarget flag and enabling validation.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Accessing Worker Instance Directly in Stencil
DESCRIPTION: Demonstrates how to access the actual Worker instance in Stencil for manual postMessage usage alongside proxy methods.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);

    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Customizing Playwright Test File Matching
DESCRIPTION: Playwright configuration to change the test file matching pattern for coexistence with Stencil Test Runner.

LANGUAGE: typescript
CODE:
export default createConfig({
  // Example: match all test files with the 'e2e.playwright.ts' naming convention
  testMatch: '*.e2e.playwright.ts',
});

----------------------------------------

TITLE: Component Directory Structure Example
DESCRIPTION: Shows the directory structure created when generating a new Stencil component

LANGUAGE: plain
CODE:
src
└── components
    └── page-home
        ├── page-home.css
        ├── page-home.e2e.ts
        ├── page-home.spec.ts
        └── page-home.tsx

----------------------------------------

TITLE: Configuring Copy Tasks for WWW Output Target in TypeScript
DESCRIPTION: This example demonstrates how to configure copy tasks for the 'www' output target in Stencil. It shows how to copy an entire directory from 'src/images' to 'www/images'.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    copy: [
      { src: 'images' }
    ]
  }
]

----------------------------------------

TITLE: Correct Component and Utility Function Organization in Stencil
DESCRIPTION: This set of snippets shows the correct way to organize a component and utility functions in separate files for Stencil. It demonstrates how to export utility functions and import them in component files.

LANGUAGE: tsx
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Component with Internal JSDoc Tag
DESCRIPTION: Example of marking a Stencil component as internal using @internal JSDoc tag

LANGUAGE: tsx
CODE:
/**
 * @internal
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Data Binding in JSX
DESCRIPTION: Shows how to bind dynamic data within JSX using curly braces syntax and compares it with ES6 template literals.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

LANGUAGE: tsx
CODE:
//ES6
`Hello ${this.name}`

//JSX
Hello {this.name}

----------------------------------------

TITLE: Required Properties in Stencil
DESCRIPTION: Demonstrates how to mark a prop as required in Stencil using the '!' syntax. This ensures the property must be used when the component is used in TSX.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class ToDoListItem {
   @Prop() thingToDo!: string;
}

----------------------------------------

TITLE: Advanced Event Configuration Example
DESCRIPTION: Demonstrates implementing an event with custom options and handling prevented defaults.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Configuring Value Accessor for Form Components
DESCRIPTION: TypeScript code showing how to configure value accessors for form components in the Stencil config.

LANGUAGE: typescript
CODE:
const angularValueAccessorBindings: ValueAccessorConfig[] = [
  {
    elementSelectors: ['my-input[type=text]'],
    event: 'myChange',
    targetAttr: 'value',
    type: 'text',
  },
];

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    angularOutputTarget({
      componentCorePackage: 'component-library',
      directivesProxyFile: '{path to your proxy file}',
      valueAccessorConfigs: angularValueAccessorBindings,
    }),
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
  ],
};

----------------------------------------

TITLE: Creating a Worker Pool in Stencil
DESCRIPTION: Shows how to create multiple instances of a Web Worker in Stencil, useful for implementing a worker pool. This example demonstrates using the workerPath to manually instantiate workers.

LANGUAGE: tsx
CODE:
import { workerPath } from '../../stuff.worker.ts?worker';

const workerPool = [
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
];

----------------------------------------

TITLE: Handling Notification Clicks in Service Worker
DESCRIPTION: Implements event listeners for notification clicks and closes, allowing custom actions when a user interacts with a notification.

LANGUAGE: javascript
CODE:
self.addEventListener('notificationclick', event => {
  const notification = event.notification;
  const action = event.action;

  if (action === 'dismiss') {
    notification.close();
  } else {
    // This handles both notification click and 'details' action,
    // because some platforms might not support actions.
    clients.openWindow(notification.data.href);
    notification.close();
  }
});

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the CopyTask configuration used in Stencil's output targets to specify file copy operations.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Parsing CLI Flags in Stencil
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object. Typically used with process.argv.slice(2) to process command line arguments.

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Configuring Service Worker in Stencil Config (TypeScript)
DESCRIPTION: Example of how to configure the Service Worker in the Stencil config file. This shows how to customize the glob patterns for asset caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Loading Stencil Components via Script Tag
DESCRIPTION: Example of loading a Stencil component library using an HTML script tag with type module.

LANGUAGE: html
CODE:
<script type="module" src="https://unpkg.com/my-design-system"></script>

----------------------------------------

TITLE: Documenting @Event() Usage in Stencil
DESCRIPTION: Example of documenting events in a Stencil component using @Event() decorator and JSDoc comments.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * Emitted when an event is completed
   */
  @Event() todoCompleted: EventEmitter<number>;
  /**
   * @deprecated
   */
  @Event() todoUndo: EventEmitter<number>;

  // ...
}

----------------------------------------

TITLE: Async ComponentWillLoad Example in Stencil
DESCRIPTION: Shows how to implement async data fetching in componentWillLoad lifecycle method.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Checking Push Notification Subscription Status
DESCRIPTION: Code to check the current push notification subscription status, which should be run each time the app is accessed as the subscription can change.

LANGUAGE: javascript
CODE:
self.registration.pushManager.getSubscription().then(subscription => {
  if (!subscription) {
    // ask the user to register for push
    return;
  }

  // update the database
  console.log(subscription);
});

----------------------------------------

TITLE: Installing and Configuring Node Polyfills Plugin in Stencil
DESCRIPTION: Instructions for installing the rollup-plugin-node-polyfills package and configuring it in the Stencil config file.

LANGUAGE: bash
CODE:
npm install rollup-plugin-node-polyfills --save-dev

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Using Web Worker Functions in a Stencil Component
DESCRIPTION: Demonstrates how to import and use worker functions within a Stencil component. It shows that the worker functions are called like regular async functions, with Stencil handling the worker communication behind the scenes.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {

  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Stencil Configuration for E2E Testing
DESCRIPTION: Configuration setup in stencil.config.ts for handling E2E test files and assets.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'test-app',
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null,
      copy: [{ src: '**/test/*.html' }, { src: '**/test/*.css' }],
    },
  ],
};

----------------------------------------

TITLE: Screenshot Connector Support Interfaces
DESCRIPTION: Comprehensive TypeScript interface definitions for all the supporting types used in the screenshot connector system.

LANGUAGE: tsx
CODE:
export interface ScreenshotConnectorOptions {
  buildId: string;

  buildMessage: string;

  buildAuthor?: string;

  buildUrl?: string;

  previewUrl?: string;

  appNamespace: string;

  buildTimestamp: number;

  logger: Logger;

  rootDir: string;

  cacheDir: string;

  packageDir: string;

  screenshotDirName?: string;

  imagesDirName?: string;

  buildsDirName?: string;

  currentBuildDir?: string;

  updateMaster?: boolean;

  allowableMismatchedPixels?: number;

  allowableMismatchedRatio?: number;

  pixelmatchThreshold?: number;

  waitBeforeScreenshot?: number;

  pixelmatchModulePath?: string;
}

----------------------------------------

TITLE: Handling Notification Clicks in Service Worker
DESCRIPTION: Shows how to handle user interactions with push notifications, such as clicking on the notification or its action buttons.

LANGUAGE: javascript
CODE:
self.addEventListener('notificationclick', event => {
  const notification = event.notification;
  const action = event.action;

  if (action === 'dismiss') {
    notification.close();
  } else {
    // This handles both notification click and 'details' action,
    // because some platforms might not support actions.
    clients.openWindow(notification.data.href);
    notification.close();
  }
});

----------------------------------------

TITLE: Mocking Utility Helper Implementation
DESCRIPTION: Shows how to create a mock for the getRandomInt utility function that returns a fixed value.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Configuring Stencil Output Target for Hydration
DESCRIPTION: Configuration snippet showing how to set up the dist-hydrate-script output target in stencil.config.ts

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Loading Stencil Component using ES Modules
DESCRIPTION: Shows how to include Stencil components using an import statement with ES Modules in an HTML file.

LANGUAGE: html
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Setting Nonce for Dist Output Target in Angular
DESCRIPTION: Demonstrates how to use the setNonce helper function to set a nonce for all script and style tags when using the dist output target in an Angular application.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Shadow DOM CSS Styling Example
DESCRIPTION: CSS styling example for Shadow DOM components showing host element and scoped styles

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Using Element Decorator in Stencil Components
DESCRIPTION: This snippet illustrates the usage of the Element decorator to access the host element within a Stencil component class. It shows how to get a reference to the host element and use it to calculate its height.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Importing Test Function in Stencil Playwright
DESCRIPTION: Demonstrates the correct way to import the test function from @stencil/playwright rather than @playwright/test directly.

LANGUAGE: typescript
CODE:
// THIS IS CORRECT
import { test } from '@stencil/playwright';

// THIS IS NOT!!
// import { test } from '@playwright/test';

----------------------------------------

TITLE: Node Polyfills Plugin Configuration in TypeScript
DESCRIPTION: This example shows how to configure the rollup-plugin-node-polyfills in the Stencil config file to handle Node.js APIs in the browser environment.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Disabling Service Worker in Stencil Config
DESCRIPTION: Demonstrates how to disable service worker generation in the Stencil configuration by setting the serviceWorker property to null.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Documenting Component Slots
DESCRIPTION: Example of documenting component slots using JSDoc comments

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Accessing Path Utility in Stencil Core Compiler
DESCRIPTION: Demonstrates how to access the POSIX version of the NodeJS path API, which is capable of running in any environment.

LANGUAGE: typescript
CODE:
path: PlatformPath

----------------------------------------

TITLE: Server Implementation with Koa
DESCRIPTION: Example showing how to use hydrateComponents in a Koa server implementation

LANGUAGE: typescript
CODE:
import Koa from 'koa';

const app = new Koa();
app.use(async (ctx) => {
  const res = await hydrateComponents(`<!DOCTYPE html>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />
    <title>Document</title>
    <link rel=\"preconnect\" href=\"https://some-url.com\" />
    <style>
      // custom styles here
    </style>
  </head>
  <body>
    <app-root></app-root>
  </body>
</html>`)
  ctx.body = res
})

----------------------------------------

TITLE: Configuring Playwright for Stencil
DESCRIPTION: This TypeScript code creates a Playwright configuration file for a Stencil project, extending Playwright's expect assertions with custom Stencil matchers.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

// Add custom Stencil matchers to Playwright assertions
expect.extend(matchers);

export default createConfig({
  // Overwrite Playwright config options here
});

----------------------------------------

TITLE: Initializing and Communicating with a Vanilla Web Worker in JavaScript
DESCRIPTION: Demonstrates how to create a new Web Worker instance and set up basic message passing between the main thread and the worker thread using the standard Web Worker API.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: This snippet shows how to add custom Rollup plugins to a Stencil project. It demonstrates injecting plugins before node-resolve and after commonjs transform in the Stencil configuration.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Importing and Using Angular Wrapper Components (Module-based)
DESCRIPTION: Import and use the generated Angular wrapper components in a module-based Angular application.

LANGUAGE: typescript
CODE:
import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript interface for the CopyTask configuration used in Stencil's output targets. It defines the structure for copy operations, including source, destination, and other options.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Configuring React Output Target in Stencil
DESCRIPTION: Configuration for the Stencil React output target to generate React component wrappers.

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    reactOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../react-library/lib/components/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Injecting Nonce Meta Tag for SSR
DESCRIPTION: Demonstrates how to inject a meta tag with the CSP nonce value into the DOM head for Server-Side Rendering (SSR) in Stencil projects.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Configuring VS Code Debug Settings for Stencil Tests
DESCRIPTION: JSON configuration for VS Code launch.json to enable debugging of Stencil E2E and spec tests for the currently active file.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "E2E Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--e2e", "--", "--maxWorkers=0", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Spec Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--spec", "--", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

----------------------------------------

TITLE: Stencil Component Implementation with Method
DESCRIPTION: Example of a Stencil component that uses the getRandomInt utility function in a method.

LANGUAGE: tsx
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Configuring Stencil Test Settings
DESCRIPTION: Example of configuring testing options in the Stencil config file using the testing property.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  testing: {
    testPathIgnorePatterns: [...]
  }
};

----------------------------------------

TITLE: Package.json Configuration for Lazy Loading
DESCRIPTION: Configuration settings in package.json for proper entry file loading in different module systems.

LANGUAGE: json
CODE:
{
  "exports": "./dist/esm/my-design-system.js",
  "main": "./dist/cjs/my-design-system.js",
  "unpkg": "dist/my-design-system/my-design-system.esm.js"
}

----------------------------------------

TITLE: Mocking Utility Helper Implementation
DESCRIPTION: Mock implementation of the getRandomInt helper function that returns a fixed value

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Project Setup Commands
DESCRIPTION: Essential commands for setting up and running a Stencil project after creation.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Setting Asset Path in TypeScript
DESCRIPTION: Demonstrates how to use setAssetPath() to set the path for Stencil to resolve local assets.

LANGUAGE: typescript
CODE:
import { setAssetPath } from '@stencil/core';
setAssetPath(`{window.location.origin}/`);

----------------------------------------

TITLE: Configuring VS Code Launch Settings for Browser Debugging
DESCRIPTION: Configuration for VS Code's launch.json to enable Chrome debugging of Stencil components running on localhost. Includes source map support and path overrides for accurate debugging.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:3333",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "*": "${webRoot}/*"
      }
    }
  ]
}

----------------------------------------

TITLE: Configuring Custom Service Worker in Stencil
DESCRIPTION: Demonstrates how to specify a custom Service Worker file in the Stencil config, switching to Workbox's injectManifest mode for full control over the Service Worker.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        swSrc: 'src/sw.js'
      }
    }
  ]
};

----------------------------------------

TITLE: Creating Vue Plugin for Custom Elements
DESCRIPTION: Plugin to register custom elements with Vue application

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Configuring JSON Docs Output Target in Stencil
DESCRIPTION: Configuration snippet for adding the docs-json output target to the Stencil config file. This enables automatic JSON documentation generation on each build.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Installing Playwright Dependencies for Stencil
DESCRIPTION: Command to install the Stencil Playwright adapter and Playwright test runner as dev dependencies.

LANGUAGE: bash
CODE:
npm i @stencil/playwright @playwright/test --save-dev

----------------------------------------

TITLE: Transpiling Code with Stencil Core Compiler
DESCRIPTION: Shows the function signature for transpiling code using the Stencil Core Compiler. It takes source code as a string and optional transpile options, returning a Promise with the transpilation results.

LANGUAGE: typescript
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: TypeScript interface reference for the CopyTask configuration object that defines file copy operations in Stencil output targets.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Implementing formDisabledCallback in Stencil
DESCRIPTION: This snippet shows how to use the formDisabledCallback to update a component's CSS class based on its disabled state.

LANGUAGE: typescript
CODE:
import { Component, h, State } from '@stencil/core';

@Component({
  tag: 'form-disabled-cb',
  formAssociated: true,
})
export class MyComponent {
  @State() cssClass: string = "";

  formDisabledCallback(disabled: boolean) {
    if (disabled) {
      this.cssClass = "background-mode";
    } else {
      this.cssClass = "";
    }
  }

  render() {
    return <input type="text" class={this.cssClass}></input>
  }
}

----------------------------------------

TITLE: Advanced Screenshot Comparison Test in Stencil
DESCRIPTION: Comprehensive example showing how to test component rendering with global styles, hydration checking, and multiple screenshot comparison approaches using pixel and ratio-based matching.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    // In order to test against any global styles you may have, don't forget to set the link to the global css. You don't have to do this if your stencil.config.ts file doesn't build a global css file with globalStyle.
    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    // To start comparing the visual result, you first must run page.compareScreenshot; This will capture a screenshot, and save the file to "/screenshot/images". You'll be able to check that into your repo to provide those results to your team. You can only have one of these commands per test. 
    const results = await page.compareScreenshot();

    // Finally, we can test against the previous screenshots. 
    // Test against hard pixels
    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    // Test against the percentage of changes. if 'allowableMismatchedRatio' is above 20% changed, 
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Importing WebdriverIO Mocking Functions
DESCRIPTION: Shows how to import the core mocking primitives from the WebdriverIO browser runner module.

LANGUAGE: typescript
CODE:
import { mock, fn, unmock } from '@wdio/browser-runner'

----------------------------------------

TITLE: Importing Test Function in Stencil Playwright
DESCRIPTION: Demonstrates the correct way to import the test function from @stencil/playwright rather than @playwright/test directly.

LANGUAGE: typescript
CODE:
// THIS IS CORRECT
import { test } from '@stencil/playwright';

// THIS IS NOT!!
// import { test } from '@playwright/test';

----------------------------------------

TITLE: Valid and Invalid Public Method Implementations in Stencil
DESCRIPTION: Provides examples of valid and invalid implementations of public methods using the @Method() decorator in Stencil. It showcases the requirement for async methods or methods returning Promises.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Installing Angular Output Target
DESCRIPTION: Command to install the @stencil/angular-output-target dependency in the Stencil component library.

LANGUAGE: bash
CODE:
npm install @stencil/angular-output-target --save-dev

----------------------------------------

TITLE: Basic Ionic Component Usage in Ember
DESCRIPTION: Example of using an Ionic toggle component in an Ember template

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Transpiling Code with Stencil Core Compiler
DESCRIPTION: Shows the function signature for the transpile() method, which converts source code to JavaScript and returns a Promise with the results.

LANGUAGE: typescript
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Advanced Form Implementation with Multiple Inputs and Validation
DESCRIPTION: Demonstrates a complex form with email validation, multiple select inputs, and dynamic option rendering. Includes constraint validation API usage and handling multiple form controls.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: Example of adding Sass support to a Stencil project using the @stencil/sass plugin. Shows how to import and configure the Sass plugin in the Stencil config file.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: JavaScript code to import all components from the Ionic Framework into an Ember application.

LANGUAGE: javascript
CODE:
import '@ionic/core'; // installs all the components from Ionic Framework

----------------------------------------

TITLE: Installing Playwright Browser Binaries
DESCRIPTION: Command to install the required Playwright browser binaries for testing.

LANGUAGE: bash
CODE:
npx playwright install

----------------------------------------

TITLE: Configuring Stencil Custom Elements Output Target
DESCRIPTION: Basic configuration for adding the dist-custom-elements output target to a Stencil project's config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Updating Objects in Stencil Components
DESCRIPTION: Shows how to properly update objects in Stencil components to trigger @Watch() and component re-renders. It uses the spread operator to create a new object reference, which is necessary for Stencil to detect changes.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Asset Path Setup in HTML
DESCRIPTION: Example of setting up asset paths in HTML using script tags

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Asset Path Management in Stencil Components
DESCRIPTION: Shows how to use getAssetPath to manage paths to local assets within a Stencil component.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Deprecated Prop Decorators for Context and Connect
DESCRIPTION: Example of deprecated @Prop decorators using context and connect options. These APIs were deprecated in Stencil v1 and have been removed in v4.

LANGUAGE: typescript
CODE:
@Prop({ context: 'config' }) config: Config;
@Prop({ connect: 'ion-menu-controller' }) lazyMenuCtrl: Lazy<MenuController>;

----------------------------------------

TITLE: Handling Push Events in Service Worker
DESCRIPTION: Service worker code to handle push events and show notifications.

LANGUAGE: javascript
CODE:
self.addEventListener('push', event => {
  console.log(`Push received with data "${event.data.text()}"`);

  const title = 'Push Notification';
  const options = {
    body: `${event.data.text()}`,
    data: { href: '/users/donald' },
    actions: [
      { action: 'details', title: 'Details' },
      { action: 'dismiss', title: 'Dismiss' },
    ],
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

----------------------------------------

TITLE: Loading Stencil Components via ES Modules
DESCRIPTION: Shows how to import Stencil components using ES Modules in an HTML page.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Mock Implementation of Utility Function
DESCRIPTION: Shows how to create a mock version of the getRandomInt utility that returns a static value.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Configuring Vitest for Stencil
DESCRIPTION: Configuration setup for Vitest to enable browser testing with Stencil components using Chrome in headless mode

LANGUAGE: typescript
CODE:
import stencil from 'unplugin-stencil/vite'
import { defineConfig } from 'vitest/config'

export default defineConfig({
    test: {
        browser: {
            enabled: true,
            headless: true,
            name: 'chrome'
        },
    },
    plugins: [stencil()]
})

----------------------------------------

TITLE: Handling Notification Clicks in Service Worker (JavaScript)
DESCRIPTION: Service Worker code to handle user interactions with displayed notifications.

LANGUAGE: javascript
CODE:
self.addEventListener('notificationclick', event => {
  const notification = event.notification;
  const action = event.action;

  if (action === 'dismiss') {
    notification.close();
  } else {
    // This handles both notification click and 'details' action,
    // because some platforms might not support actions.
    clients.openWindow(notification.data.href);
    notification.close();
  }
});

----------------------------------------

TITLE: Configuring Supplemental Public Types
DESCRIPTION: Configuration for including additional type documentation in the JSON output

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json',
      supplementalPublicTypes: 'src/public-interfaces.ts',
    }
  ]
};

----------------------------------------

TITLE: VS Code Launch Configuration for Stencil Tests
DESCRIPTION: Configuration for VS Code's launch.json to enable debugging of Stencil tests. Includes settings for both end-to-end and spec tests with integrated terminal support.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "E2E Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--e2e", "--", "--maxWorkers=0", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Spec Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--spec", "--", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

----------------------------------------

TITLE: Importing Lazy-Loaded Stencil Components via Script Tag
DESCRIPTION: This snippet demonstrates how to import a Stencil component library using a script tag for lazy loading. It uses the 'dist' output target.

LANGUAGE: html
CODE:
<script type="module" src="https://unpkg.com/my-design-system"></script>

----------------------------------------

TITLE: Rollup Configuration for Custom Elements Bundle
DESCRIPTION: Example Rollup configuration for consuming a custom elements bundle, including asset copying.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Node Polyfills Plugin Configuration in Stencil
DESCRIPTION: Demonstrates how to install and configure the rollup-plugin-node-polyfills plugin in a Stencil project to handle Node.js APIs in the browser.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Stencil Copy Task Configuration
DESCRIPTION: Configuration example showing how to set up copy tasks for asset files in Stencil config

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
};

----------------------------------------

TITLE: Watching and Parsing Props in a Stencil Component
DESCRIPTION: Shows how to watch for changes in props and parse them into internal state variables. This technique is useful for handling stringified objects or arrays passed as attributes.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

----------------------------------------

TITLE: Documenting Component Slots
DESCRIPTION: Example of documenting component slots using JSDoc tags

LANGUAGE: typescript
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Example Telemetry Event Structure in JavaScript
DESCRIPTION: This snippet shows the structure of a typical telemetry event collected by Stencil. It includes information about the build process, environment, and system specifications.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Configuring Copy Tasks for WWW Output Target in TypeScript
DESCRIPTION: This example demonstrates how to configure copy tasks for the 'www' output target in Stencil. It shows how to copy an entire directory from 'src/images' to 'www/images'.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    copy: [
      { src: 'images' }
    ]
  }
]

----------------------------------------

TITLE: Page Goto Test Implementation
DESCRIPTION: Example of E2E test implementation using page.goto() to load a pre-defined HTML template

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // The path here is the path to the www output relative to the dev server root directory
    await page.goto('/components/my-component/test/my-component.e2e.html');

    // Rest of test
    const component = await page.locator('my-component');
    await expect(component).toHaveText(`Hello World! I'm Stencil`);
  });
});

----------------------------------------

TITLE: Loading Stencil Components via CDN Script
DESCRIPTION: Demonstrates how to load Stencil components using a traditional script tag from a CDN in a basic HTML page.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Using getAssetPath API in Stencil
DESCRIPTION: Demonstrates various usage examples of the getAssetPath API for resolving asset paths in a Stencil project with a specified asset base path.

LANGUAGE: typescript
CODE:
// with an asset base path of "/build/":
// "/build/"
getAssetPath('');
// "/build/my-image.png"
getAssetPath('my-image.png');
// "/build/assets/my-image.png"
getAssetPath('assets/my-image.png');
// "/build/assets/my-image.png"
getAssetPath('./assets/my-image.png');
// "/assets/my-image.png"
getAssetPath('../assets/my-image.png');
// "/assets/my-image.png"
getAssetPath('/assets/my-image.png');

----------------------------------------

TITLE: Importing Hydrate Document Function
DESCRIPTION: Example of importing the hydrateDocument function from a published package

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Defining Props in Stencil Component
DESCRIPTION: Illustrates how to define object and array props in a Stencil component using TypeScript decorators.

LANGUAGE: typescript
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Optimizing CSS with Stencil Core Compiler
DESCRIPTION: Shows the function signature for optimizeCss(), a utility function used by the compiler to optimize CSS.

LANGUAGE: typescript
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Custom Service Worker Boilerplate (JavaScript)
DESCRIPTION: Basic structure for a custom Service Worker file, including Workbox import and precache injection point.

LANGUAGE: javascript
CODE:
// change to the version you get from `npm ls workbox-build`
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Creating Custom Screenshot Connector (JavaScript)
DESCRIPTION: Demonstrates how to create a custom screenshot connector by extending the base ScreenshotConnector class from Stencil. This allows for customization of the screenshot testing process.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Using transpileSync() Function
DESCRIPTION: Synchronous version of the transpile function for immediate code conversion.

LANGUAGE: tsx
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Setting Asset Path for Stencil Components
DESCRIPTION: Shows how to use the setAssetPath() function to set the base path for resolving local assets in Stencil components. This is typically done at the application level.

LANGUAGE: typescript
CODE:
import { setAssetPath } from '@stencil/core';
setAssetPath(`{window.location.origin}/`);

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Components
DESCRIPTION: Example of using async/await in componentWillLoad lifecycle method to fetch and render dynamic data before component rendering.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Disabling Service Worker in Stencil Config (TypeScript)
DESCRIPTION: Demonstrates how to disable the Service Worker generation in the Stencil config by setting the serviceWorker property to null.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Rendering Complex Templates in Stencil
DESCRIPTION: Demonstrates how to render complex templates with multiple top-level elements using arrays or fragments in Stencil components.

LANGUAGE: tsx
CODE:
import { Fragment } from '@stencil/core';
...
render() {
  return (<Fragment>
    <div class="container">
      <ul>
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
      </ul>
    </div>

    <div class="another-container">
      ... more html content ...
    </div>
  </Fragment>);
}

----------------------------------------

TITLE: Advanced Screenshot Comparison Test in Stencil
DESCRIPTION: Comprehensive example of a screenshot comparison test in Stencil, including global styles, multiple assertions, and different comparison methods.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    // In order to test against any global styles you may have, don't forget to set the link to the global css. You don't have to do this if your stencil.config.ts file doesn't build a global css file with globalStyle.
    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    // To start comparing the visual result, you first must run page.compareScreenshot; This will capture a screenshot, and save the file to "/screenshot/images". You'll be able to check that into your repo to provide those results to your team. You can only have one of these commands per test. 
    const results = await page.compareScreenshot();

    // Finally, we can test against the previous screenshots. 
    // Test against hard pixels
    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    // Test against the percentage of changes. if 'allowableMismatchedRatio' is above 20% changed, 
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Component Rehydration Test Example
DESCRIPTION: Demonstrates using waitForChanges() to handle component rehydration after state changes.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // Assume we have a template setup with the `my-component` component and a `button`
    await page.goto('/my-component/my-component.e2e.html');

    const button = page.locator('button');
    // Assume clicking the button changes the `@Prop()` values on `my-component`
    button.click();
    await page.waitForChanges();
  });
});

----------------------------------------

TITLE: Global Script Configuration Example
DESCRIPTION: Example of configuring a global script that runs before the app loads, showing how to export a default function.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: E2E Test Using page.setContent()
DESCRIPTION: Example of writing an end-to-end test using the page.setContent() pattern for inline HTML definition.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    await page.setContent('<my-component first="Stencil"></my-component>');

    // Rest of test
  });
});

----------------------------------------

TITLE: Shadow DOM QuerySelector Implementation
DESCRIPTION: Example showing how to query elements within Shadow DOM using the @Element decorator.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Stencil Component with Method Implementation
DESCRIPTION: Example of a Stencil component that includes a method using the getRandomInt utility.

LANGUAGE: tsx
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Requesting Notification Permissions
DESCRIPTION: JavaScript code to request notification permissions from the user, which is necessary before showing push notifications.

LANGUAGE: javascript
CODE:
if ('Notification' in window && 'serviceWorker' in navigator) {
  Notification.requestPermission(status => {
    // status will either be 'default', 'granted' or 'denied'
    console.log(`Notification permissions have been ${status}`);
  });
}

----------------------------------------

TITLE: Subdirectory Component Structure
DESCRIPTION: Shows the directory structure created when generating a component in a subdirectory using 'stencil generate pages/page-home'.

LANGUAGE: plain
CODE:
src
└── components
    └── pages
        └── page-home
            ├── page-home.css
            ├── page-home.e2e.ts
            ├── page-home.spec.ts
            └── page-home.tsx

----------------------------------------

TITLE: Watching Prop Changes in Stencil Component
DESCRIPTION: Shows how to watch and parse string props into objects and arrays in a Stencil component using TypeScript decorators.

LANGUAGE: typescript
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

----------------------------------------

TITLE: Implementing Event Listeners with @Listen Decorator
DESCRIPTION: Shows how to use the @Listen decorator to handle DOM events, including custom events emitted by other components.

LANGUAGE: typescript
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Using RenderToString Function
DESCRIPTION: Example from Ionic Core showing how to use renderToString to hydrate HTML content with specific configuration options.

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(srcHtml, {
  prettyHtml: true,
  removeScripts: true
});

console.log(results.html);

----------------------------------------

TITLE: Configuring Prerender Config Path in Stencil Config
DESCRIPTION: This snippet shows how to set the path to the prerendering config file in the Stencil configuration file (stencil.config.ts). It uses the 'prerenderConfig' property within the 'www' output target.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Configuring NPM Test Scripts for Stencil
DESCRIPTION: Example NPM scripts configuration in package.json for running Stencil tests, including unit tests, watch mode, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Using Fragment in a Stencil Component
DESCRIPTION: Demonstrates the use of Fragment in a Stencil component's render method. Fragments allow grouping of elements without a wrapper node, using the <></> syntax.

LANGUAGE: typescript
CODE:
import { Component, Fragment } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Form Reset Callback Implementation
DESCRIPTION: Example demonstrating how to implement the formResetCallback to handle form reset events.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-reset-cb',
  formAssociated: true,
})
export class MyComponent {
  @AttachInternals()
  internals: ElementInternals;

  formResetCallback() {
    this.internals.setValidity({});
    this.internals.setFormValue("");
  }

  render() {
    return <input type="text"></input>
  }
}

----------------------------------------

TITLE: Component Implementation with Asset Directory Configuration
DESCRIPTION: Shows how to configure a component to use assets from a specific directory using assetsDirs and getAssetPath

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }

----------------------------------------

TITLE: Basic Prerender Config Structure
DESCRIPTION: Initial setup of the prerender.config.ts file showing the basic export structure using PrerenderConfig interface.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Using Custom JSDoc Tags
DESCRIPTION: Example of using custom JSDoc tags in component documentation

LANGUAGE: typescript
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Importing Stencil Compiler in NodeJS
DESCRIPTION: Demonstrates how to import the Stencil compiler module in a NodeJS environment using CommonJS syntax.

LANGUAGE: javascript
CODE:
// NodeJS (commonjs)
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Implementing hydrateDocument Function in JavaScript
DESCRIPTION: Example implementation of component hydration using hydrateDocument, taken from Ionic Angular server

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

export function hydrateComponents(doc) {
  return hydrateDocument(doc)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Basic Stencil Component Test
DESCRIPTION: Example test case demonstrating how to render and test a Stencil component using DOM primitives

LANGUAGE: typescript
CODE:
import { expect, test } from 'vitest'

import '../src/components/my-component/my-component.js'

test('should render component correctly', async () => {
    const cmp = document.createElement('my-component')
    cmp.setAttribute('first', 'Stencil')
    cmp.setAttribute('last', `'Don't call me a framework' JS`)
    document.body.appendChild(cmp)

    await new Promise((resolve) => requestIdleCallback(resolve))
    expect(cmp.shadowRoot?.querySelector('div')?.innerText)
        .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)
})

----------------------------------------

TITLE: Configuring Stencil Dev Server with HTTPS and Custom Port
DESCRIPTION: This snippet demonstrates how to configure the Stencil dev server with HTTPS using SSL certificates and a custom port. It imports necessary modules, reads SSL certificate files, and sets up the devServer configuration object.

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8')
    }
  }
};

----------------------------------------

TITLE: Registering Custom Elements in Angular Module
DESCRIPTION: Use the APP_INITIALIZER to register custom elements during app initialization. This approach is used by frameworks like Ionic to define all custom elements.

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Custom Destination Copy Configuration
DESCRIPTION: Example demonstrating how to set a custom destination path for copied files using the dest option.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]

----------------------------------------

TITLE: Using Ionic Toggle Component in Ember Template
DESCRIPTION: Example of using an Ionic Framework toggle component in an Ember component template.

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Using Host as Fragment
DESCRIPTION: Shows how to use Host component to render multiple elements at the root level of a component.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Web Components
DESCRIPTION: This JSON configuration sets up VS Code to debug Stencil components running in a Chrome browser. It targets localhost:3333 and enables source map support for accurate debugging.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:3333",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "*": "${webRoot}/*"
      }
    }
  ]
}

----------------------------------------

TITLE: Configuring Stencil for CI/CD E2E Testing
DESCRIPTION: Demonstrates how to configure Stencil for running E2E tests in a CI/CD environment, specifically for Gitlab CI which requires additional browser arguments.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'Foo',
  testing: {
    browserArgs: ['--no-sandbox', '--disable-setuid-sandbox'],
  },
  outputTargets: [
    { type: 'dist' },
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config (TSX)
DESCRIPTION: Shows how to specify a custom screenshot connector in the Stencil configuration file. The 'screenshotConnector' property is set to the path of the custom connector file.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Consuming Angular Wrapper Components in Angular Application
DESCRIPTION: Import and use the generated Angular component wrappers in an Angular application. This example shows how to import and use a component in an Angular module.

LANGUAGE: typescript
CODE:
import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

----------------------------------------

TITLE: Creating Custom Screenshot Connector (JavaScript)
DESCRIPTION: Demonstrates how to create a custom screenshot connector by extending the base ScreenshotConnector class from Stencil. This allows for customization of the screenshot testing process.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Configuring NPM Scripts for Stencil Testing
DESCRIPTION: Example NPM scripts configuration in package.json for running different types of Stencil tests including unit tests, watch mode, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Configuring Vue Library TypeScript Settings
DESCRIPTION: Project-specific TypeScript configuration that extends the root config for the Vue component library.

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2020"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2017",
    "skipLibCheck": true
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: E2E Test with SpecPage in TypeScript
DESCRIPTION: Demonstrates how to implement an E2E test using newSpecPage instead of newE2EPage to properly handle mocks in the browser context.

LANGUAGE: tsx
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Documenting @Method() in Stencil Component
DESCRIPTION: Use JSDoc comments to document methods in a Stencil component. This information will be included in the generated README.

LANGUAGE: ts
CODE:
export class MyComponent {
  /**
   * Scroll by a specified X/Y distance in the component.
   *
   * @param x The amount to scroll by on the horizontal axis.
   * @param y The amount to scroll by on the vertical axis.
   * @param duration The amount of time to take scrolling by that amount.
   * @returns the total distance travelled
   */
  @Method()
  async scrollByPoint(x: number, y: number, duration: number): Promise<number> { /* omitted */ }

  // ...
}

----------------------------------------

TITLE: Configuring Stencil Vue Output Target
DESCRIPTION: Configuration for generating Vue component wrappers from Stencil components using the Vue output target.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Configuring NPM Test Scripts for Stencil
DESCRIPTION: Example NPM scripts configuration in package.json for running Stencil tests, including unit tests, watch mode, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Configuring HTTPS for Stencil Dev Server in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the Stencil dev server to use HTTPS by providing SSL certificate and key files. It also shows how to set a custom port and reload strategy.

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8'),
    },
  },
};

----------------------------------------

TITLE: Configuring NPM Scripts for Stencil Testing
DESCRIPTION: Example NPM scripts configuration in package.json for running different types of Stencil tests including unit tests, watch mode, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Component Hierarchy Example in Stencil
DESCRIPTION: Demonstrates the hierarchical structure of components and their lifecycle method execution order.

LANGUAGE: markup
CODE:
<cmp-a>
  <cmp-b>
    <cmp-c></cmp-c>
  </cmp-b>
</cmp-a>

----------------------------------------

TITLE: Custom Service Worker Configuration in Stencil
DESCRIPTION: Example of customizing the service worker configuration in Stencil's config file to include additional file types for caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Configuring Hydrate App Output Target in Stencil
DESCRIPTION: This snippet shows how to add the 'dist-hydrate-script' output target to the Stencil configuration file. This generates a hydrate app in the root project directory for server-side rendering.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Conditional Rendering in Stencil JSX
DESCRIPTION: Demonstrates conditional rendering using if/else statements and the ternary operator in JSX.

LANGUAGE: tsx
CODE:
render() {
  if (this.name) {
    return ( <div>Hello {this.name}</div> )
  } else {
    return ( <div>Hello, World</div> )
  }
}

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
    {this.name
      ? <p>Hello {this.name}</p>
      : <p>Hello World</p>
    }
    </div>
  );
}

----------------------------------------

TITLE: Conditional Rendering in Stencil JSX
DESCRIPTION: Demonstrates conditional rendering using if/else statements and the ternary operator in JSX.

LANGUAGE: tsx
CODE:
render() {
  if (this.name) {
    return ( <div>Hello {this.name}</div> )
  } else {
    return ( <div>Hello, World</div> )
  }
}

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
    {this.name
      ? <p>Hello {this.name}</p>
      : <p>Hello World</p>
    }
    </div>
  );
}

----------------------------------------

TITLE: Using Custom JSDoc Tags in Stencil Components
DESCRIPTION: Example of using custom JSDoc tags in a Stencil component. This demonstrates how to include additional, non-standard documentation tags that will be included in the JSON output.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Installing Playwright Browser Binaries
DESCRIPTION: Command to install the required Playwright browser binaries for testing.

LANGUAGE: bash
CODE:
npx playwright install

----------------------------------------

TITLE: Selecting a starter project in create-stencil CLI
DESCRIPTION: This snippet shows the CLI prompt for selecting a starter project type in Stencil. It offers options for component collections, apps, and Ionic PWA starters.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Documenting CSS Variables with JSDoc Comments
DESCRIPTION: Example of documenting CSS variables using JSDoc-style comments in a CSS file. This demonstrates how to annotate CSS variables for inclusion in the JSON documentation.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Styling Host Element in Shadow DOM Stencil Components
DESCRIPTION: Demonstrates how to style the host element of a Stencil component when using Shadow DOM. It uses the :host selector instead of the component's tag name.

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Using renderToString in JavaScript
DESCRIPTION: Example showing how to use renderToString function with configuration options for HTML processing

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(srcHtml, {
  prettyHtml: true,
  removeScripts: true
});

console.log(results.html);

----------------------------------------

TITLE: Custom Destination Copy Configuration - TypeScript
DESCRIPTION: Example demonstrating how to set a custom destination path for copied files using the dest option in a www output target.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]

----------------------------------------

TITLE: E2E Test Implementation with SpecPage in TypeScript
DESCRIPTION: E2E test example using newSpecPage instead of newE2EPage for mocking support

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Importing Test Function for Stencil E2E Testing
DESCRIPTION: Demonstrates the correct way to import the test function from @stencil/playwright instead of @playwright/test for proper web component testing.

LANGUAGE: typescript
CODE:
// THIS IS CORRECT
import { test } from '@stencil/playwright';

// THIS IS NOT!!
// import { test } from '@playwright/test';

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config (TSX)
DESCRIPTION: Shows how to specify a custom screenshot connector in the Stencil configuration file. The 'screenshotConnector' property is set to the path of the custom connector file.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config (TSX)
DESCRIPTION: Shows how to specify a custom screenshot connector in the Stencil configuration file. The 'screenshotConnector' property is set to the path of the custom connector file.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Updating Vue Library package.json
DESCRIPTION: Changes to make in the Vue library's package.json file for proper configuration.

LANGUAGE: json
CODE:
{
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "scripts": {
    "test": "echo \"Error: run tests from root\" && exit 1",
    "build": "npm run tsc",
    "tsc": "tsc -p . --outDir ./dist"
  },
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "stencil-library": "*"
  }
}

----------------------------------------

TITLE: Building Angular Component Library
DESCRIPTION: Command to build the Angular component library.

LANGUAGE: bash
CODE:
npx -p @angular/cli ng build component-library

----------------------------------------

TITLE: Transpile Function Declaration
DESCRIPTION: Function signature for the transpile() method that converts source code with optional TranspileOptions.

LANGUAGE: tsx
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript interface for the CopyTask configuration used in Stencil's output targets. It defines the structure and types of properties that can be used in a copy task.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Documenting Events in a Stencil Component
DESCRIPTION: This example shows how to document events in a Stencil component using the @Event() decorator and JSDoc comments. This information will be used to generate the Events section in the README.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * Emitted when an event is completed
   */
  @Event() todoCompleted: EventEmitter<number>;
  /**
   * @deprecated
   */
  @Event() todoUndo: EventEmitter<number>;

  // ...
}

----------------------------------------

TITLE: Loading Stencil Configuration
DESCRIPTION: Function signature for loadConfig(), which transforms raw config information into a usable config object for the compiler and dev-server.

LANGUAGE: typescript
CODE:
loadConfig(init?: LoadConfigInit): Promise<LoadConfigResults>

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: JavaScript code to import all components from the Ionic Framework in an Ember application's main file.

LANGUAGE: javascript
CODE:
import '@ionic/core'; // installs all the components from Ionic Framework

----------------------------------------

TITLE: E2E Test HTML Template
DESCRIPTION: HTML template setup for E2E testing with proper script imports and component usage

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf8" />

    <!-- Replace with the path to your entrypoint -->
    <script src="../../../build/test-app.esm.js" type="module"></script>
    <script src="../../../build/test-app.js" nomodule></script>
  </head>
  <body>
    <my-component first="Stencil"></my-component>
  </body>
</html>

----------------------------------------

TITLE: Initializing Stencil Angular Output Target Configuration
DESCRIPTION: Configuration for the Stencil angular-output-target to generate Angular component wrappers. Sets up the core package name and output file locations.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Event Handling in JSX
DESCRIPTION: Shows how to bind event listeners directly in JSX for Stencil components using the 'on' prefix convention.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

----------------------------------------

TITLE: Slot Implementation in Stencil Components
DESCRIPTION: Shows how to implement and use slots for dynamic content placement in components.

LANGUAGE: tsx
CODE:
render() {
  return [
    <slot name="item-start" />,
    <h1>Here is my main content</h1>,
    <slot name="item-end" />
  ]
}

----------------------------------------

TITLE: Resetting Stencil Store State in Tests
DESCRIPTION: Demonstrates how to reset the store state before each test using the dispose() method in a beforeEach hook.

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: Using Skip Function in Playwright Tests
DESCRIPTION: Demonstrates how to use the skip function to conditionally skip tests based on browser type or component mode.

LANGUAGE: typescript
CODE:
test('my-test', ({ page, skip }) => {
    // Skip tests for certain browsers
    skip.browser('firefox', 'This behavior is not available on Firefox');

    // Skip tests for certain modes
    skip.mode('md', 'This behavior is not available in Material Design');

    ...
})

----------------------------------------

TITLE: Handling Notification Clicks in Custom Service Worker
DESCRIPTION: Example of handling notification click events in a custom Service Worker, demonstrating how to respond to user interactions with notifications.

LANGUAGE: javascript
CODE:
self.addEventListener('notificationclick', event => {
  const notification = event.notification;
  const action = event.action;

  if (action === 'dismiss') {
    notification.close();
  } else {
    // This handles both notification click and 'details' action,
    // because some platforms might not support actions.
    clients.openWindow(notification.data.href);
    notification.close();
  }
});

----------------------------------------

TITLE: Configuring NPM Script for Combined Test Execution
DESCRIPTION: Package.json script to run both Stencil Test Runner and Playwright tests in sequence.

LANGUAGE: json
CODE:
{
  "scripts": {
    "test.e2e": "stencil test --e2e && playwright test"
  }
}

----------------------------------------

TITLE: Correct Component Organization in TypeScript
DESCRIPTION: Demonstrates the proper way to organize components and utilities across separate files in Stencil.

LANGUAGE: tsx
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Adding CSP Nonce Meta Tag for SSR (HTML)
DESCRIPTION: This HTML snippet shows how to add a meta tag with a CSP nonce for Server-Side Rendering (SSR) in Stencil. The nonce value should be dynamically generated for each page request.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Generating Stencil Component
DESCRIPTION: Command to generate a new Stencil component using the CLI generator. This creates a component with the specified name in the src/components directory.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: This snippet shows how to add the 'dist-custom-elements' output target to a Stencil project's configuration file. It demonstrates the basic structure of the config object and where to place the output target options.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Using Build Conditionals in Stencil Components
DESCRIPTION: Demonstration of using Build.isBrowser conditional to handle different code execution paths during prerendering vs browser runtime.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Defining TestingConfig Interface in TypeScript for Stencil
DESCRIPTION: This code snippet defines the TestingConfig interface, which extends JestConfig and includes additional Stencil-specific options for configuring E2E tests. It covers settings for screenshot comparison, browser control, and device emulation.

LANGUAGE: typescript
CODE:
export interface TestingConfig extends JestConfig {
  /**
   * The `allowableMismatchedPixels` value is used to determine an acceptable
   * number of pixels that can be mismatched before the image is considered
   * to have changes. Realistically, two screenshots representing the same
   * content may have a small number of pixels that are not identical due to
   * anti-aliasing, which is perfectly normal. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedPixels?: number;

  /**
   * The `allowableMismatchedRatio` ranges from `0` to `1` and is used to
   * determine an acceptable ratio of pixels that can be mismatched before
   * the image is considered to have changes. Realistically, two screenshots
   * representing the same content may have a small number of pixels that
   * are not identical due to anti-aliasing, which is perfectly normal. The
   * `allowableMismatchedRatio` is the number of pixels that were mismatched,
   * divided by the total number of pixels in the screenshot. For example,
   * a ratio value of `0.06` means 6% of the pixels can be mismatched before
   * the image is considered to have changes. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedRatio?: number;

  /**
   * Matching threshold while comparing two screenshots. Value ranges from `0` to `1`.
   * Smaller values make the comparison more sensitive. The `pixelmatchThreshold`
   * value helps to ignore anti-aliasing. Default: `0.1`
   */
  pixelmatchThreshold?: number;

  /**
   * Additional arguments to pass to the browser instance.
   */
  browserArgs?: string[];

  /**
   * Path to a Chromium or Chrome executable to run instead of the bundled Chromium.
   */
  browserExecutablePath?: string;

  /**
   * Whether to run browser e2e tests in headless mode.
   *
   * `headless` is an argument passed through to Puppeteer (which is passed to Chrome) for
   * end-to-end testing. Prior to Chrome v112, `headless` was treated like a boolean flag.
   * Starting with Chrome v112, 'new' is an accepted option to support Chrome's new
   * headless mode.
   *
   * The following values are accepted:
   * - "new" - enables the "new" headless mode, starting with Chrome 112
   * - `true` - enables the "old" headless mode, prior to Chrome 112
   * - `false` - enables the "headful" mode
   *
   * Stencil will default to `true` (the old headless mode) if no value is provided.
   *
   * In the future, Chrome will enable the new headless mode by default, even when `true`
   * is provided.
   *
   * {@see https://developer.chrome.com/articles/new-headless/}
   */
  browserHeadless?: boolean;

  /**
   * Whether to auto-open a DevTools panel for each tab.
   * If this option is true, the headless option will be set false
   */
  browserDevtools?: boolean;

  /**
   * Slows down e2e browser operations by the specified amount of milliseconds.
   * Useful so that you can see what is going on.
   */
  browserSlowMo?: number;

  /**
   * Array of browser emulations to be used during _screenshot_ tests. A full screenshot
   * test is run for each emulation.
   * 
   * To emulate a device display for your e2e tests, use the `setViewport` method on a test's E2E page.
   */
  emulate?: EmulateConfig[];

  /**
   * Path to the Screenshot Connector module.
   */
  screenshotConnector?: string;
}

export interface EmulateConfig {
  /**
   * Predefined device descriptor name, such as "iPhone X" or "Nexus 10".
   * For a complete list please see: https://github.com/puppeteer/puppeteer/blob/main/src/DeviceDescriptors.ts
   */
  device?: string;

  /**
   * User-Agent to be used. Defaults to the user-agent of the installed Puppeteer version.
   */
  userAgent?: string;

  viewport?: EmulateViewport;
}


export interface EmulateViewport {

  /**
   * Page width in pixels.
   */
  width: number;

  /**
   * page height in pixels.
   */
  height: number;

  /**
   * Specify device scale factor (can be thought of as dpr). Defaults to 1.
   */
  deviceScaleFactor?: number;

  /**
   * Whether the meta viewport tag is taken into account. Defaults to false.
   */
  isMobile?: boolean;

  /**
   * Specifies if viewport supports touch events. Defaults to false
   */
  hasTouch?: boolean;

  /**
   * Specifies if viewport is in landscape mode. Defaults to false.
   */
  isLandscape?: boolean;

}

----------------------------------------

TITLE: Configuring Supplemental Public Types in Stencil
DESCRIPTION: Configuration for including additional public types in the JSON documentation output.

LANGUAGE: ts
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json',
      supplementalPublicTypes: 'src/public-interfaces.ts',
    }
  ]
};

----------------------------------------

TITLE: Correct Component Module Organization in TypeScript
DESCRIPTION: Shows the proper way to organize component code by separating utility functions into their own modules.

LANGUAGE: typescript
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: typescript
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: typescript
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Using a Functional Component with Children in Stencil
DESCRIPTION: Demonstrates how to use a functional component that accepts children by nesting elements inside it.

LANGUAGE: tsx
CODE:
<Hello name="World">
  <p>I'm a child element.</p>
</Hello>

----------------------------------------

TITLE: Documenting @Method() Decorators
DESCRIPTION: Use JSDoc comments to describe methods decorated with @Method(). This information will be included in the generated README.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * Scroll by a specified X/Y distance in the component.
   *
   * @param x The amount to scroll by on the horizontal axis.
   * @param y The amount to scroll by on the vertical axis.
   * @param duration The amount of time to take scrolling by that amount.
   * @returns the total distance travelled
   */
  @Method()
  async scrollByPoint(x: number, y: number, duration: number): Promise<number> { /* omitted */ }

  // ...
}

----------------------------------------

TITLE: Configuring HTTPS for Stencil Dev Server in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the Stencil dev server to use HTTPS by providing SSL certificate and key files. It also shows how to set a custom port and reload strategy.

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8'),
    },
  },
};

----------------------------------------

TITLE: Documenting CSS Variables
DESCRIPTION: Example of documenting CSS variables using JSDoc-style comments

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: This snippet shows how to add custom Rollup plugins to a Stencil project. It demonstrates injecting plugins before the node-resolve plugin and after the commonjs transform, using the rollupPlugins configuration option.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Running Visual Regression Tests with Stencil CLI
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison using the Stencil CLI.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Basic Component Declaration with @Component Decorator
DESCRIPTION: Shows the basic usage of @Component decorator to create a Stencil component with a required tag name.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Configuring Copy Task with Warning Option
DESCRIPTION: Example showing how to enable warnings for missing source files in copy tasks using the warn option.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Custom Service Worker Implementation
DESCRIPTION: Boilerplate code for implementing a custom service worker with Workbox integration.

LANGUAGE: typescript
CODE:
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Using Stencil Store in a Component
DESCRIPTION: Shows how to import and use the store state in a Stencil component. Includes examples of reading state, updating state, and automatic re-rendering.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Accessing Web Worker Instance Directly in Stencil
DESCRIPTION: Shows how to access the actual Worker instance in Stencil for manual usage of postMessage() and onmessage. This is useful for advanced scenarios where direct control over the Worker is needed.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    worker.postMessage(['send data manually']);

    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: ScreenshotConnector Interface Definition
DESCRIPTION: TypeScript interface showing the available methods that can be implemented in a custom screenshot connector

LANGUAGE: tsx
CODE:
https://github.com/ionic-team/stencil/blob/a2e119d059ba0d0fa6155dbd3d82c17612630828/src/declarations/stencil-private.ts#L1631-L1645

----------------------------------------

TITLE: Toggle Button State Management
DESCRIPTION: Example combining @State with @Listen decorator to create a toggle button that updates its state on click events.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Accessing Compiler Dependencies
DESCRIPTION: Demonstrates how to access the compiler's dependencies array, which provides information about the versions of dependencies used by the compiler.

LANGUAGE: typescript
CODE:
dependencies: CompilerDependency[]

----------------------------------------

TITLE: Custom Service Worker Implementation
DESCRIPTION: Boilerplate code for implementing a custom service worker with Workbox in Stencil.

LANGUAGE: typescript
CODE:
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Loading Stencil Components with ESM Imports
DESCRIPTION: Example showing how to import and initialize Stencil components in an application using the loader utilities, including polyfill application and nonce setting for security.

LANGUAGE: typescript
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Environment Variable Configuration Example
DESCRIPTION: Example showing how to configure and use environment variables in a Stencil project and component.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  env: {
    API_BASE_URL: process.env.API_BASE_URL
  }
}

LANGUAGE: typescript
CODE:
import { Component, h, Env, Host } from '@stencil/core';

@Component({
  tag: 'api-component',
})
export class APIComponent {
  async connectedCallback () {
    const res = await fetch(Env.API_BASE_URL)
    // ...
  }
}

----------------------------------------

TITLE: Writing E2E Test Using page.setContent()
DESCRIPTION: Shows how to write an end-to-end test using the page.setContent() method to define HTML content inline. This approach is useful for small tests or to avoid affecting other tests that use shared HTML templates.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    await page.setContent('<my-component first="Stencil"></my-component>');

    // Rest of test
  });
});

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Component Lifecycle
DESCRIPTION: Example of handling asynchronous data fetching during component initialization using componentWillLoad lifecycle method.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Resetting Stencil Store in Test Environment
DESCRIPTION: Example of how to reset the store state between test specifications using the dispose() method in a beforeEach hook.

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: E2E Test with Mock
DESCRIPTION: End-to-end test implementation using newSpecPage with mocked helper function

LANGUAGE: tsx
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class
DESCRIPTION: Basic implementation of a custom screenshot connector by extending the base ScreenshotConnector class.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Running WebdriverIO Tests in Bash
DESCRIPTION: Command to execute WebdriverIO tests after setup is complete.

LANGUAGE: bash
CODE:
npm run wdio

----------------------------------------

TITLE: E2E Test Using page.goto() in Stencil Playwright
DESCRIPTION: Demonstrates writing an end-to-end test using the page.goto() method to load a pre-defined HTML template for testing a Stencil component.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // The path here is the path to the www output relative to the dev server root directory
    await page.goto('/components/my-component/test/my-component.e2e.html');

    // Rest of test
    const component = await page.locator('my-component');
    await expect(component).toHaveText(`Hello World! I'm Stencil`);
  });
});

----------------------------------------

TITLE: Installing Playwright Browser Binaries
DESCRIPTION: Command to install the necessary Playwright browser binaries for running tests.

LANGUAGE: bash
CODE:
npx playwright install

----------------------------------------

TITLE: Specifying Custom Output Directory for README Files
DESCRIPTION: Change the output directory for generated README files by setting the 'dir' property in the output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      dir: 'output'
    }
  ]
};

----------------------------------------

TITLE: Loading Stencil Component via ES Modules
DESCRIPTION: Example of importing Stencil components using ES Modules in an HTML page.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Creating Node Logger for Stencil Compiler in TypeScript
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the Stencil compiler and dev-server. It requires the NodeJS process object as an argument.

LANGUAGE: typescript
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Generating Stencil Component with CLI
DESCRIPTION: Demonstrates how to use the Stencil CLI to generate a new component. It shows the command syntax and explains the resulting directory structure.

LANGUAGE: shell
CODE:
stencil generate my-new-component

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: React Library Package Configuration
DESCRIPTION: Package.json configuration for the React wrapper library

LANGUAGE: json
CODE:
{
  "main": "dist/index.js",
  "module": "dist/index.js",
  "types": "dist/types/index.d.ts",
  "scripts": {
    "test": "node ./__tests__/react-library.test.js",
    "build": "npm run tsc",
    "tsc": "tsc -p . --outDir ./dist"
  },
  "files": [
    "dist"
  ],
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "stencil-library": "*"
  }
}

----------------------------------------

TITLE: Loading Stencil Components via ES Modules
DESCRIPTION: Demonstrates loading Stencil components using ES Modules import syntax from a CDN.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Defining CSS Custom Properties in Stencil
DESCRIPTION: Example of defining and using CSS custom properties (CSS variables) in a Stencil component.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Updating Vue App package.json
DESCRIPTION: Adding the Vue component library as a dependency in the Vue app's package.json.

LANGUAGE: json
CODE:
"dependencies": {
  "vue-library": "*"
}

----------------------------------------

TITLE: Correct Component Module Organization in TypeScript
DESCRIPTION: Proper way to organize component code by separating utility functions into their own modules.

LANGUAGE: tsx
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Using @internal JSDoc Tag to Skip README Generation
DESCRIPTION: This example shows how to use the @internal JSDoc tag to mark a component as internal, which will prevent README generation for that component.

LANGUAGE: typescript
CODE:
/**
 * @internal
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Parsing Command Flags in Stencil CLI
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object. Typically used with process.argv.slice(2) to process command line inputs.

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Configuring Hydrate App Output Target in TypeScript
DESCRIPTION: Configuration snippet showing how to add the dist-hydrate-script output target to stencil.config.ts

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Setting Component Props in E2E Tests
DESCRIPTION: Demonstrates how to set properties on a component during an E2E test using page.$eval() from Puppeteer API.

LANGUAGE: typescript
CODE:
await page.setContent(`
      <prop-cmp></prop-cmp>
    `);

await page.$eval('prop-cmp', (elm: any) => {
  elm.first = 'Marty';
  elm.lastName = 'McFly';
});

await page.waitForChanges();

----------------------------------------

TITLE: OptimizeJs Function Signature
DESCRIPTION: Function signature for JavaScript optimization utility used by the compiler.

LANGUAGE: jsx
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Stencil Component with Asset Configuration
DESCRIPTION: Shows how to configure a Stencil component to use assets with assetsDirs and getAssetPath

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Registering Custom Elements in Angular Module
DESCRIPTION: Implementation for automatically registering Stencil custom elements during Angular app initialization

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Setting Custom Destination for Copy Tasks
DESCRIPTION: This example shows how to set a custom destination for copy tasks using the 'dest' option. It copies fonts from 'src/files/fonts' to 'public/static/web-fonts'.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    dir: 'public',
    copy: [
      { src: 'files/fonts', dest: 'static/web-fonts' }
    ]
  }
]

----------------------------------------

TITLE: Installing WebdriverIO in a Stencil Project
DESCRIPTION: This command initializes WebdriverIO in an existing project, launching a configuration wizard for setup.

LANGUAGE: bash
CODE:
npm init wdio@latest .

----------------------------------------

TITLE: Exporting Prerender Config Object
DESCRIPTION: This snippet demonstrates how to export a config object using the PrerenderConfig interface in the prerender.config.ts file.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Configuring VS Code for Debugging Stencil Tests
DESCRIPTION: JSON configuration for VS Code's launch.json file to enable debugging of Stencil tests directly in VS Code.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "E2E Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--e2e", "--", "--maxWorkers=0", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Spec Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--spec", "--", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

----------------------------------------

TITLE: Advanced Screenshot Comparison in Stencil E2E Tests
DESCRIPTION: Comprehensive example of screenshot comparison testing in Stencil, including setting global styles, finding elements, and using different comparison methods with allowable mismatch thresholds.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    const results = await page.compareScreenshot();

    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Creating a Stencil Compiler Instance
DESCRIPTION: Shows the function signature for creating a Stencil Compiler instance. It takes a configuration object and returns a Promise resolving to a Compiler instance.

LANGUAGE: typescript
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Creating a Stencil Compiler Instance
DESCRIPTION: Shows the function signature for creating a Stencil Compiler instance. It takes a configuration object and returns a Promise resolving to a Compiler instance.

LANGUAGE: typescript
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Generating JSON Docs via Stencil CLI
DESCRIPTION: Command to generate JSON documentation using the Stencil CLI.

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Configuring WebdriverIO Visual Service
DESCRIPTION: Configuration snippet showing how to set up the visual service in the WebdriverIO configuration file.

LANGUAGE: typescript
CODE:
https://github.com/webdriverio/component-testing-examples/blob/2de295ab568b5163e67d716156221578b6536d9d/stencil-component-starter/wdio.conf.ts#L119-L126)

----------------------------------------

TITLE: Rollup Configuration for Custom Elements
DESCRIPTION: Example Rollup configuration for consuming custom elements, including asset copying setup.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Using Build Constants in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Stencil's Build Constants within a component to execute different code paths based on the build environment and runtime context. It imports the Build object from @stencil/core and uses isDev and isBrowser flags.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Correct Component Organization Example
DESCRIPTION: Proper way to organize component code by separating utilities and components into different files

LANGUAGE: tsx
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Defining a Stencil Component in TypeScript
DESCRIPTION: This snippet shows the structure of a basic Stencil component. It defines a component with properties for first and last name, and renders a greeting message.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() last: string;

  render() {
    return <div>Hello, World! I'm {this.first} {this.last}</div>;
  }
}

----------------------------------------

TITLE: Stencil Component Directory Structure
DESCRIPTION: Example directory structure showing the generated files for a Stencil component in the src/components folder.

LANGUAGE: plain
CODE:
src
└── components
    └── page-home
        ├── page-home.css
        ├── page-home.e2e.ts
        ├── page-home.spec.ts
        └── page-home.tsx

----------------------------------------

TITLE: Generating JSON Docs via CLI in Stencil
DESCRIPTION: Command to generate JSON documentation using Stencil's CLI

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Importing Hydrate App in Node.js Server
DESCRIPTION: This code demonstrates how to import the hydrateDocument function from the generated hydrate app module in a Node.js server environment.

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

----------------------------------------

TITLE: ScreenshotConnector Interface Definition
DESCRIPTION: Reference code showing the interface structure for the ScreenshotConnector class with available methods.

LANGUAGE: tsx
CODE:
https://github.com/ionic-team/stencil/blob/a2e119d059ba0d0fa6155dbd3d82c17612630828/src/declarations/stencil-private.ts#L1631-L1645

----------------------------------------

TITLE: Starting Stencil Dev Server in TypeScript
DESCRIPTION: The start() function initializes the Stencil Dev Server. It takes a StencilDevServerConfig object, a Logger instance, and an optional CompilerWatcher as parameters. It returns a Promise that resolves to a DevServer instance.

LANGUAGE: typescript
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Creating and Using Mocks in WebdriverIO Tests
DESCRIPTION: This example demonstrates how to create mocks for both project files and external modules. It shows mocking a specific function from a utility file and mocking an entire external module.

LANGUAGE: typescript
CODE:
import { mock, fn } from '@wdio/browser-runner'
import { format } from './utils/utils.ts'

// mock files within the project
mock('./utils/utils.ts', () => ({
    format: fn().mockReturnValue(42)
}))
// mock whole modules and replace functionality with what is defined in `./__mocks__/leftpad.ts`
mock('leftpad')

console.log(format()) // returns `42`

----------------------------------------

TITLE: Loading Stencil Component via CDN in HTML
DESCRIPTION: Demonstrates how to load a Stencil component through a CDN using a script tag in a simple HTML page. This method is straightforward and doesn't require any build tools.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: ScreenshotConnector Interface Definition
DESCRIPTION: TypeScript interface showing the available methods that can be implemented in a custom screenshot connector

LANGUAGE: tsx
CODE:
https://github.com/ionic-team/stencil/blob/a2e119d059ba0d0fa6155dbd3d82c17612630828/src/declarations/stencil-private.ts#L1631-L1645

----------------------------------------

TITLE: WaitForChanges Testing Pattern
DESCRIPTION: Example of using page.waitForChanges() to handle component rehydration after state changes.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // Assume we have a template setup with the `my-component` component and a `button`
    await page.goto('/my-component/my-component.e2e.html');

    const button = page.locator('button');
    // Assume clicking the button changes the `@Prop()` values on `my-component`
    button.click();
    await page.waitForChanges();
  });
});

----------------------------------------

TITLE: Handling Service Worker Updates in Stencil Component
DESCRIPTION: Implements a listener for service worker updates and displays a toast notification to prompt users to reload for the new version.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    // If there is no waiting registration, this is the first service
    // worker being installed.
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Configuring Vue Output Target in Stencil
DESCRIPTION: Configuration for generating Vue component wrappers in a Stencil project using the @stencil/vue-output-target package

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Running Visual Regression Tests in Stencil
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison functionality in Stencil.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Loading Stencil Components via ES Modules
DESCRIPTION: Demonstrates loading Stencil components using ES Modules import syntax from a CDN.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Listening for appload Event in TypeScript
DESCRIPTION: Shows how to listen for the special 'appload' event on the window object. This event is emitted when the app and all its child components have finished loading. The event detail includes the namespace of the app that emitted the event.

LANGUAGE: typescript
CODE:
window.addEventListener('appload', (event) => {
  console.log(event.detail.namespace);
});

----------------------------------------

TITLE: Stencil Copy Task Configuration
DESCRIPTION: Configuration example for copying assets using Stencil copy tasks

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
};

----------------------------------------

TITLE: Documenting Slots in a Stencil Component
DESCRIPTION: This example shows how to document slots in a Stencil component using the @slot JSDoc tag. This information will be used to generate the Slots section in the README.

LANGUAGE: typescript
CODE:
/**
 * @slot - Content is placed between the named slots if provided without a slot.
 * @slot primary - Content is placed to the left of the main slotted-in text.
 * @slot secondary - Content is placed to the right of the main slotted-in text.
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent {
  // ...
  
  render() {
    return (
      <section>
        <slot name="primary"></slot>
        <div class="content">
          <slot></slot>
        </div>
        <slot name="secondary"></slot>
      </section>
    );
  }
}

----------------------------------------

TITLE: Compiler Creation Example
DESCRIPTION: Complete example of setting up and using the Stencil compiler in a NodeJS environment.

LANGUAGE: typescript
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Using Ionic Toggle Component in Ember Template
DESCRIPTION: Example of using an Ionic toggle component in an Ember component template.

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Importing Stencil Compiler in NodeJS
DESCRIPTION: Example of importing the Stencil compiler in a NodeJS environment using CommonJS require syntax.

LANGUAGE: typescript
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Configuring Package Exports in Stencil Library
DESCRIPTION: JSON configuration for package.json exports to handle component imports correctly in the Stencil library.

LANGUAGE: json
CODE:
{
 "exports": {
  ".": {
    "import": "./dist/stencil-library/stencil-library.esm.js",
    "require": "./dist/stencil-library/stencil-library.cjs.js"
  },
  "./dist/*": {
    "import": "./dist/*",
    "types": "./dist/*"
  },
  "./components/*": {
    "import": "./dist/components/*.js",
    "types": "./dist/components/*.d.ts"
  },
  "./loader": {
    "import": "./loader/index.js",
    "require": "./loader/index.cjs",
    "types": "./loader/index.d.ts"
  }
 }
}

----------------------------------------

TITLE: Non-JSX Event Listening Example
DESCRIPTION: Demonstrates how to listen to events from a Stencil component using vanilla JavaScript.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Configuring Stencil Hydrate App Output Target in TypeScript
DESCRIPTION: Configuration snippet showing how to add the dist-hydrate-script output target to stencil.config.ts

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Creating an In-Memory Compiler System
DESCRIPTION: Shows the function signature for creating an in-memory CompilerSystem instance, independent of any platform.

LANGUAGE: typescript
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Configuring JSON Docs Output Target
DESCRIPTION: Basic Stencil configuration to automatically generate JSON documentation on build

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Styling Host Element in Light DOM Stencil Components
DESCRIPTION: Shows how to apply CSS styles to the host element of a Stencil component when not using Shadow DOM. It uses the component's tag name as the selector.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

----------------------------------------

TITLE: Creating NodeJS System for Stencil Compiler
DESCRIPTION: Creates a system based on NodeJS APIs for the Stencil compiler. This handles file system operations and cryptographic hashing. It requires the NodeJS process object as an argument.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Component Directory Structure
DESCRIPTION: Illustrates the directory structure created by the 'stencil generate' command for a component named 'page-home'.

LANGUAGE: plain
CODE:
src
└── components
    └── page-home
        ├── page-home.css
        ├── page-home.e2e.ts
        ├── page-home.spec.ts
        └── page-home.tsx

----------------------------------------

TITLE: Using a Functional Component with Props in Stencil JSX
DESCRIPTION: Shows how to use a functional component in JSX, passing props as attributes.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Installing WebdriverIO with NPM/Yarn
DESCRIPTION: Command to initialize WebdriverIO project setup wizard

LANGUAGE: bash
CODE:
npm init wdio@latest .

----------------------------------------

TITLE: Documenting @Prop(), @Event(), and @Method() Decorators
DESCRIPTION: This example demonstrates how to document properties, events, and methods using JSDoc comments with Stencil decorators. These comments will be used to generate corresponding sections in the README.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * The first name
   */
  @Prop() first!: string;
  /**
   * @deprecated since v2.1.0
   */
  @Prop() middle: string;
  @Prop() lastName = "Smith";

  /**
   * Emitted when an event is completed
   */
  @Event() todoCompleted: EventEmitter<number>;

  /**
   * Scroll by a specified X/Y distance in the component.
   *
   * @param x The amount to scroll by on the horizontal axis.
   * @param y The amount to scroll by on the vertical axis.
   * @param duration The amount of time to take scrolling by that amount.
   * @returns the total distance travelled
   */
  @Method()
  async scrollByPoint(x: number, y: number, duration: number): Promise<number> { /* omitted */ }
}

----------------------------------------

TITLE: Styling Host Element in Stencil Components
DESCRIPTION: This example demonstrates how to style the host element of a Stencil component using CSS. It shows the difference in styling approach between regular and shadow DOM components.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Documenting CSS Variables
DESCRIPTION: Example of documenting CSS variables using JSDoc-style comments in CSS

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Importing and Exporting Generated Component Wrappers in Angular Module
DESCRIPTION: Import the generated DIRECTIVES constant and export it in the Angular component library's main module. This makes the Stencil components available for use in Angular applications.

LANGUAGE: typescript
CODE:
import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Configuring Stencil Copy Tasks
DESCRIPTION: Configuration example showing how to set up copy tasks for asset management in stencil.config.ts

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
};

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Component Lifecycle
DESCRIPTION: Example of fetching and rendering dynamic data using async/await in a Stencil component's componentWillLoad lifecycle method.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Defining a Stencil Component in TypeScript
DESCRIPTION: Example of a Stencil component definition with props and a render method. This component displays a greeting message using the provided 'first' and 'last' props.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() last: string;

  render() {
    return (
      <div>
        Hello, World! I'm {this.first} {this.last}
      </div>
    );
  }
}

----------------------------------------

TITLE: Configuring Basic Stencil Output Targets
DESCRIPTION: Example configuration showing how to set up multiple output targets in a Stencil project, including both distribution and website builds.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Using assetsDirs in @Component Decorator
DESCRIPTION: Shows how to use the assetsDirs option to specify directories containing static assets for the component. It also demonstrates using getAssetPath() to retrieve the correct path for assets.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // 1. assetsDirs lists the 'assets' directory as a relative (sibling)
  // directory
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    // 2. the asset path is retrieved relative to the asset base path to use in
    // the <img> tag
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Transpiling Stencil Code
DESCRIPTION: Shows the function signature for transpiling Stencil code. It takes source code as a string and optional transpile options, returning a Promise with the transpilation results.

LANGUAGE: typescript
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Reflecting Props to Attributes in Stencil
DESCRIPTION: Demonstrates how to reflect prop values to attributes in the DOM using Stencil.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop({ reflect: false }) isComplete: boolean = false;
    @Prop({ reflect: true }) timesCompletedInPast: number = 2;
    @Prop({ reflect: true }) thingToDo: string = "Read Reflect Section of Stencil Docs";
}

----------------------------------------

TITLE: Invalid Component Export in TypeScript
DESCRIPTION: An example of an invalid component export in Stencil, where additional functions are exported alongside the component class. This practice is not allowed for efficient bundling.

LANGUAGE: typescript
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Running Stencil CLI
DESCRIPTION: Executes the CLI with given initialization options. Used by Stencil's default bin/stencil file but can be used externally.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Accessing Raw Worker Instance in Stencil
DESCRIPTION: Demonstrates how to access the actual Worker instance in Stencil for manual postMessage() usage, utilizing the ?worker query parameter in imports.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    worker.postMessage(['send data manually']);

    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Configuring Supplemental Public Types in Stencil Config
DESCRIPTION: Configuration for including additional types in the JSON documentation output. This option allows specifying a file containing types to be included in the typeLibrary section of the output.

LANGUAGE: ts
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json',
      supplementalPublicTypes: 'src/public-interfaces.ts',
    }
  ]
};

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: Shows how to import all components from the Ionic Framework in an Ember application file.

LANGUAGE: javascript
CODE:
import '@ionic/core'; // installs all the components from Ionic Framework

----------------------------------------

TITLE: CreateSystem Function Signature
DESCRIPTION: Function signature for creating an in-memory compiler system independent of platform.

LANGUAGE: tsx
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Registering Custom Elements in Angular
DESCRIPTION: This code shows how to register custom elements using the Stencil loader during Angular app initialization.

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Generating Nested Stencil Component
DESCRIPTION: Command to generate a new Stencil component in a nested subdirectory structure within src/components.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Calling a Public Method on a Stencil Component
DESCRIPTION: Shows how to call a public method on a Stencil component. It demonstrates using customElements.whenDefined() to ensure the component is defined before calling the method.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Creating NodeJS System in Stencil
DESCRIPTION: Creates a system instance based on NodeJS APIs for file operations and cryptographic hashing. Takes the NodeJS process object as an argument and returns a CompilerSystem object.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Basic JSX Component Rendering in Stencil
DESCRIPTION: Example of a basic Stencil component render function returning JSX with static HTML elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Webpack Configuration for Custom Elements
DESCRIPTION: Example webpack configuration for consuming custom elements, including asset copying setup.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Initializing WebdriverIO Project for Stencil
DESCRIPTION: Command to initialize a new WebdriverIO project using the project starter. This will launch a configuration wizard for setting up WebdriverIO.

LANGUAGE: bash
CODE:
npm init wdio@latest .

----------------------------------------

TITLE: Implementing Basic Form Handling in Stencil Component
DESCRIPTION: This snippet demonstrates a basic form implementation in a Stencil component. It includes state management for form input, event handling for form submission and input changes, and rendering of a simple form with a text input.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Importing Stencil Compiler in NodeJS
DESCRIPTION: Demonstrates how to import the Stencil compiler in a NodeJS environment using CommonJS syntax.

LANGUAGE: javascript
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Configuring TypeScript Types for Jest
DESCRIPTION: JSON configuration to resolve type clashes between Mocha and Jest

LANGUAGE: json
CODE:
"types": ["jest"]

----------------------------------------

TITLE: Environment Variables Config Example
DESCRIPTION: Demonstrates how to configure environment variables in Stencil config and use them in components.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  env: {
    API_BASE_URL: process.env.API_BASE_URL
  }
}

LANGUAGE: typescript
CODE:
import { Component, h, Env, Host } from '@stencil/core';

@Component({
  tag: 'api-component',
})
export class APIComponent {
  async connectedCallback () {
    const res = await fetch(Env.API_BASE_URL)
    // ...
  }
}

----------------------------------------

TITLE: Test with File-based Mock
DESCRIPTION: Test implementation using a mock defined in __mocks__ directory

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Running Individual Stencil Tasks
DESCRIPTION: Executes specific Stencil tasks with given process, config, and task command. Optionally accepts a custom compiler system implementation.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Optimize JavaScript Function Signature
DESCRIPTION: Utility function signature for JavaScript optimization with custom input options and output format.

LANGUAGE: jsx
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Setting Asset Path in TypeScript
DESCRIPTION: Shows how to use the setAssetPath() function to set the base path for resolving local assets in a Stencil application. This is typically done at the application level.

LANGUAGE: typescript
CODE:
import { setAssetPath } from '@stencil/core';
setAssetPath(`{window.location.origin}/`);

----------------------------------------

TITLE: Generating Stencil Component in Subfolder
DESCRIPTION: Command to generate a new Stencil component in a specified subfolder within src/components directory.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Direct Component Class Testing in TypeScript
DESCRIPTION: Demonstrates how to test component class logic directly by instantiating the component class and testing its methods and properties.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Creating Stencil Component Library
DESCRIPTION: Commands to create and set up a new Stencil component library within the monorepo.

LANGUAGE: bash
CODE:
cd packages/
npm init stencil components stencil-library
cd stencil-library
npm install

----------------------------------------

TITLE: Basic Screenshot Comparison in Stencil E2E Tests
DESCRIPTION: Simple example of setting up a screenshot comparison test using Puppeteer in a Stencil end-to-end test. It demonstrates how to create a new E2E page, set content, and compare screenshots.

LANGUAGE: javascript
CODE:
it('render something', async () => {
  const page: E2EPage = await newE2EPage();
  await page.setContent('<my-cmp></my-cmp>');
  await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
});

----------------------------------------

TITLE: Configuring Stencil Test Patterns
DESCRIPTION: Stencil configuration to set test file patterns using testRegex

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // ...
  testing: {
    testRegex: '(/__tests__/.*|\\.?(spec))\\.(ts|js)$',
  },
};

----------------------------------------

TITLE: Configuring Event Options in Stencil
DESCRIPTION: Shows the configuration options available for events including eventName, bubbles, cancelable, and composed properties. Includes interface definition and implementation example.

LANGUAGE: tsx
CODE:
export interface EventOptions {
  /**
   * A string custom event name to override the default.
   */
  eventName?: string;
  /**
   * A Boolean indicating whether the event bubbles up through the DOM or not.
   */
  bubbles?: boolean;

  /**
   * A Boolean indicating whether the event is cancelable.
   */
  cancelable?: boolean;

  /**
   * A Boolean value indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.
   */
  composed?: boolean;
}

----------------------------------------

TITLE: Running Stencil CLI with Options
DESCRIPTION: Executes the CLI with given options. This function is used by Stencil's default bin/stencil file but can also be used externally.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Shadow DOM QuerySelector Implementation
DESCRIPTION: Shows how to query elements within Shadow DOM using the @Element decorator and shadowRoot property.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Configuring VS Code Launch Settings for Browser Debugging
DESCRIPTION: Launch configuration for debugging Stencil components in Chrome browser. Sets up source map handling and localhost connection on port 3333.

LANGUAGE: json
CODE:
{
  "type": "chrome",
  "request": "launch",
  "name": "Launch Chrome against localhost",
  "url": "http://localhost:3333",
  "sourceMaps": true,
  "sourceMapPathOverrides": {
    "*": "${webRoot}/*"
  }
}

----------------------------------------

TITLE: Configuring Root TypeScript Settings
DESCRIPTION: TypeScript configuration for the root of the monorepo workspace.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Configuring Hydrate App Output Target in Stencil
DESCRIPTION: This snippet shows how to add the 'dist-hydrate-script' output target to the Stencil configuration file. This generates a hydrate app in the project root directory for server-side rendering.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Alternative Mocking Approach in TypeScript
DESCRIPTION: Example showing how to use Jest.mock() with a module factory function instead of creating a separate mock file.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Installing ember-cli-stencil Addon for Ember-Stencil Integration
DESCRIPTION: This command installs the ember-cli-stencil addon, which facilitates the integration of Stencil components into Ember applications. The addon handles importing required files, copying component definitions, and optionally generating wrapper components for compatibility.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Setting CSP Nonce in Stencil Custom Elements Output
DESCRIPTION: Example demonstrating nonce configuration for the dist-custom-elements output target in an Angular application's entrypoint.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Initializing Stencil Angular Output Target Configuration
DESCRIPTION: Configure the Stencil project to generate Angular component wrappers using the angularOutputTarget in the stencil.config.ts file.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: CLI Command for JSON Docs Generation
DESCRIPTION: Shows how to generate JSON documentation using the Stencil CLI command

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Stencil Config for TypeScript Support
DESCRIPTION: Configuration for enabling TypeScript declarations in Stencil output.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      generateTypeDeclarations: true,
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Setting Nonce for Dist Output in Angular
DESCRIPTION: Demonstrates how to use the setNonce helper function to set the nonce attribute for all script and style tags when using the dist output target in an Angular application.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: Shows how to write CSS for a component using Shadow DOM, including the use of the :host pseudo-class selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class
DESCRIPTION: Example showing how to create a custom screenshot connector by extending the base ScreenshotConnector class from Stencil.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Configuring React Output Target in Stencil Config
DESCRIPTION: This snippet shows how to add the React output target to the Stencil configuration file. It sets up the necessary output targets for generating React component wrappers.

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    reactOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../react-library/lib/components/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Prerender
DESCRIPTION: This JSON configuration sets up VS Code to debug Stencil's prerender process. It specifies the Node.js runtime, the Stencil prerender command, and necessary arguments for debugging the static site generation process.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "node",
      "request": "launch",
      "name": "Prerender",
      "args": [
        "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
        "prerender",
        "${workspaceFolder}/dist/hydrate/index.js",
        "--max-workers=0",
        "--config=${workspaceFolder}/stencil.config.ts"
      ],
      "protocol": "inspector"
    }
  ]
}

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript interface for the CopyTask configuration used in Stencil's output targets. It defines the structure and types of properties that can be used in a copy task.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Initializing WebdriverIO Project in Bash
DESCRIPTION: Command to initiate WebdriverIO's configuration wizard for setting up a new project. It walks through various options for test type and framework selection.

LANGUAGE: bash
CODE:
npm init wdio@latest .

----------------------------------------

TITLE: Rollup Plugin Configuration for Asset Copying
DESCRIPTION: Example of using rollup-plugin-copy to copy assets during the build process.

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Configuring Stencil Output Targets in TypeScript
DESCRIPTION: This snippet demonstrates how to configure multiple output targets in a Stencil project's configuration file. It shows setting up both 'dist' and 'www' output types.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Illustrating File Structure for Stencil Components
DESCRIPTION: This snippet demonstrates the recommended file structure for Stencil components, showing how to organize components, styles, and tests in separate directories.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Importing Stencil Compiler in NodeJS
DESCRIPTION: Example showing how to import the Stencil compiler in a NodeJS environment using CommonJS syntax.

LANGUAGE: tsx
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Configuring VS Code HTML Custom Data
DESCRIPTION: VS Code settings configuration to enable custom element support. This JSON configuration tells VS Code where to find the generated custom elements data file.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Configuring Package.json for Custom Elements Distribution
DESCRIPTION: This example shows how to configure the package.json file for distributing custom elements. It demonstrates setting the module entry point and declaring the Stencil core dependency.

LANGUAGE: json
CODE:
{
  "module": "dist/components/index.js",
  "dependencies": {
    "@stencil/core": "latest"
  },
  ...
}

----------------------------------------

TITLE: CSS Custom Properties Usage
DESCRIPTION: Example of defining and using CSS custom properties for component customization.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Using hydrateDocument for Server-Side Rendering
DESCRIPTION: This example shows how to use the hydrateDocument function in a server's response logic. It takes a document object, hydrates it, and returns the results including the hydrated HTML.

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

export function hydrateComponents(doc) {
  return hydrateDocument(doc)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Writing E2E Tests with page.setContent() in Stencil Playwright
DESCRIPTION: Shows how to write an end-to-end test using the page.setContent() method to define HTML content inline in Stencil Playwright.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    await page.setContent('<my-component first="Stencil"></my-component>');

    // Rest of test
  });
});

----------------------------------------

TITLE: Documenting Stencil @Event Decorators
DESCRIPTION: Example of how @Event decorators are documented in the generated README, including event details and deprecation notices.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * Emitted when an event is completed
   */
  @Event() todoCompleted: EventEmitter<number>;
  /**
   * @deprecated
   */
  @Event() todoUndo: EventEmitter<number>;

  // ...
}

----------------------------------------

TITLE: Creating a Worker Pool in Stencil
DESCRIPTION: Shows how to create multiple Worker instances using the workerPath provided by Stencil's worker bundling feature.

LANGUAGE: tsx
CODE:
import { workerPath } from '../../stuff.worker.ts?worker';

const workerPool = [
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
];

----------------------------------------

TITLE: Configuring Prerender Debugging in Stencil
DESCRIPTION: This TypeScript configuration sets up prerendering options for debugging in Stencil. It disables URL crawling, specifies entry URLs, and enables runtime logging for better visibility during the prerendering process.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Rollup Configuration for Custom Elements
DESCRIPTION: This snippet provides an example Rollup configuration for consuming custom elements, including asset copying.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Implementing formDisabledCallback in Stencil
DESCRIPTION: This snippet shows how to use the formDisabledCallback to update a component's CSS class based on its disabled state.

LANGUAGE: typescript
CODE:
import { Component, h, State } from '@stencil/core';

@Component({
  tag: 'form-disabled-cb',
  formAssociated: true,
})
export class MyComponent {
  @State() cssClass: string = "";

  formDisabledCallback(disabled: boolean) {
    if (disabled) {
      this.cssClass = "background-mode";
    } else {
      this.cssClass = "";
    }
  }

  render() {
    return <input type="text" class={this.cssClass}></input>
  }
}

----------------------------------------

TITLE: Using Skip Function in Playwright Tests
DESCRIPTION: Illustrates how to use the skip function to conditionally skip tests based on browser type or component mode in Stencil Playwright tests.

LANGUAGE: typescript
CODE:
test('my-test', ({ page, skip }) => {
    // Skip tests for certain browsers
    skip.browser('firefox', 'This behavior is not available on Firefox');

    // Skip tests for certain modes
    skip.mode('md', 'This behavior is not available in Material Design');

    ...
})

----------------------------------------

TITLE: Page SetContent Testing Pattern
DESCRIPTION: Example of using page.setContent() for inline HTML definition in E2E tests.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    await page.setContent('<my-component first="Stencil"></my-component>');

    // Rest of test
  });
});

----------------------------------------

TITLE: Loading Stencil Component via CDN Script
DESCRIPTION: Basic example of loading a Stencil component using a CDN script tag in an HTML page.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Example Stats JSON Output Structure
DESCRIPTION: Provides a comprehensive example of the JSON structure generated by the stats feature, including compiler information, app details, build options, component data, and dependency graphs.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Watching and Parsing Object Props in Stencil Component
DESCRIPTION: Illustrates how to watch for changes in object props and parse them in a Stencil component using @Watch decorator.

LANGUAGE: typescript
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

----------------------------------------

TITLE: Configuring Browser Debugging in VS Code for Stencil
DESCRIPTION: Launch configuration for debugging Stencil components in Chrome browser. Sets up sourcemap handling and localhost connection on port 3333.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:3333",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "*": "${webRoot}/*"
      }
    }
  ]
}

----------------------------------------

TITLE: Using Rollup Plugin for Asset Copying
DESCRIPTION: Shows how to use a Rollup plugin in the Stencil configuration to copy asset files to the distribution directory.

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Form-Associated Stencil Component
DESCRIPTION: Shows how to create a form-associated Stencil component that can participate in HTML forms using the ElementInternals API.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Running Stencil CLI with Options
DESCRIPTION: Executes the CLI with given options. This function is used by Stencil's default bin/stencil file but can also be used externally.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: Demonstrates how to install the ember-cli-stencil addon for legacy Ember projects using the Ember CLI.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Configuring Monorepo WebRoot for VS Code Debugger
DESCRIPTION: Additional configuration for Stencil projects in a monorepo structure, specifying the webRoot path to the Stencil project directory.

LANGUAGE: json
CODE:
{
    "webRoot": "${workspaceFolder}/packages/stencil-library"
}

----------------------------------------

TITLE: Consuming Angular Wrapper Components in Angular App
DESCRIPTION: This snippet demonstrates how to import and use the generated Angular wrapper components in an Angular application.

LANGUAGE: typescript
CODE:
import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

----------------------------------------

TITLE: Creating a Web Worker Pool in Stencil
DESCRIPTION: Shows how to create multiple Worker instances manually using the workerPath provided by Stencil's worker bundling feature.

LANGUAGE: typescript
CODE:
import { workerPath } from '../../stuff.worker.ts?worker';

const workerPool = [
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
];

----------------------------------------

TITLE: Prop Validation in Stencil Components
DESCRIPTION: Example of validating props using the @Watch decorator in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, Watch, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class TodoList {
  @Prop() thingToDo!: string;

  @Watch('thingToDo')
  validateName(newValue: string, _oldValue: string) {
    const isBlank = typeof newValue !== 'string' || newValue === '';
    if (isBlank) {
        throw new Error('thingToDo is a required property and cannot be empty')
    };
    const has2chars = typeof newValue === 'string' && newValue.length >= 2;
    if (!has2chars) {
       throw new Error('thingToDo must have a length of more than 1 character')
    };
  }
}

----------------------------------------

TITLE: Basic Screenshot Comparison Test in Stencil
DESCRIPTION: Simple example demonstrating how to set up a basic screenshot comparison test using Puppeteer in Stencil. Shows component rendering and screenshot comparison.

LANGUAGE: javascript
CODE:
  it('render something', async () => {
    const page: E2EPage = await newE2EPage();
    await page.setContent('<my-cmp></my-cmp>');
    await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
  });

----------------------------------------

TITLE: Implementing formDisabledCallback in Stencil
DESCRIPTION: This snippet shows how to use the formDisabledCallback to update a component's CSS class based on its disabled state.

LANGUAGE: typescript
CODE:
import { Component, h, State } from '@stencil/core';

@Component({
  tag: 'form-disabled-cb',
  formAssociated: true,
})
export class MyComponent {
  @State() cssClass: string = "";

  formDisabledCallback(disabled: boolean) {
    if (disabled) {
      this.cssClass = "background-mode";
    } else {
      this.cssClass = "";
    }
  }

  render() {
    return <input type="text" class={this.cssClass}></input>
  }
}

----------------------------------------

TITLE: Example Telemetry Event Data Structure in JavaScript
DESCRIPTION: Sample JSON structure showing the anonymous telemetry data collected by Stencil CLI, including system information, dependencies, and build configuration details.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Setting CSP Nonce in Stencil Dist Build
DESCRIPTION: Example showing how to set a nonce value for all script and style tags in a Stencil dist build when used in an Angular application.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Example Stats JSON Output Structure (JSON)
DESCRIPTION: Provides a sample of the JSON structure generated by the stats documentation process. Includes metadata about the project, components, and build options.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Configuring Service Worker in Stencil
DESCRIPTION: Example of configuring the Service Worker in a Stencil project's config file. It demonstrates how to set custom glob patterns for asset caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Loading Stencil Components via ES Modules
DESCRIPTION: Shows how to load Stencil components using ES Modules import syntax for modern browsers.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Transpile Function Signature
DESCRIPTION: Function signature for the transpile method that converts source code to JavaScript using TypeScript.

LANGUAGE: tsx
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Setting Component Mode in Stencil
DESCRIPTION: Demonstrates how to use the setMode function to set the style mode of a component based on an attribute. This allows for dynamic styling based on component properties.

LANGUAGE: typescript
CODE:
import { setMode } from '@stencil/core'

// set mode based on a property
setMode((el) => el.getAttribute('mode'));

----------------------------------------

TITLE: Setting Custom Elements Export Behavior in Stencil Config
DESCRIPTION: Demonstrates how to set the customElementsExportBehavior option in the Stencil configuration file to control component export and definition behavior.

LANGUAGE: typescript
CODE:
// stencil.config.ts
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      customElementsExportBehavior: 'default' | 'auto-define-custom-elements' | 'bundle' | 'single-export-module',
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Documenting CSS Variables in Stencil (CSS)
DESCRIPTION: Shows how to document CSS variables (Custom Properties) using JSDoc-style comments in CSS files. This allows Stencil to automatically generate documentation for CSS variables.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: Implementing Utility Helper in TypeScript
DESCRIPTION: Defines a utility function getRandomInt that generates a random integer between min and max values.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: React Component Usage Example
DESCRIPTION: Example showing how to use the generated React component wrappers in a React application.

LANGUAGE: tsx
CODE:
// App.tsx
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Updating Stencil Test Runner Pattern
DESCRIPTION: Example of updating the Stencil Test Runner configuration to match a different test file pattern for coexistence with Playwright.

LANGUAGE: typescript
CODE:
export config: Config = {
   ...,
   test: {
      // Stencil Test Runner will no longer execute any 'e2e.ts` files
      testRegex: '(/__tests__/.*|(\\.|/)(test|spec)|[//](e2e))\\.[jt]sx?$'
   }
}

----------------------------------------

TITLE: Configuring TypeScript Root Config
DESCRIPTION: Base TypeScript configuration for the monorepo workspace.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Implementing Utility Helper in TypeScript
DESCRIPTION: Defines a utility function getRandomInt that generates a random integer between min and max values.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Styling Host Element
DESCRIPTION: Examples of styling the host element both with and without Shadow DOM using CSS.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Configuring Global Styles in Stencil
DESCRIPTION: This TypeScript snippet demonstrates how to configure global styles in the Stencil config file, making them available to all components in the project.

LANGUAGE: ts
CODE:
export const config: Config = {
  namespace: 'app',
  globalStyle: 'src/global/global.css',
  outputTarget: [
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Using createSystem() Function
DESCRIPTION: Function signature for creating an in-memory compiler system.

LANGUAGE: tsx
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: React Component Usage Example
DESCRIPTION: Example of consuming generated React component wrappers in a React application.

LANGUAGE: tsx
CODE:
// App.tsx
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Disabling Service Worker Generation
DESCRIPTION: Configuration to disable service worker generation in Stencil builds by setting serviceWorker to null.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Form Date Picker with State Restoration
DESCRIPTION: Implements a date picker component that properly handles form state restoration and maintains view state.

LANGUAGE: typescript
CODE:
import { Component, h, State, AttachInternals } from '@stencil/core';

@Component({
  tag: 'fa-date-picker',
  formAssociated: true,
})
export class MyDatePicker {
  @State() value: string = "";
  @State() view: "weeks" | "months" = "weeks";

  @AttachInternals()
  internals: ElementInternals;

  onInputChange(e) {
    e.preventDefault();
    const date = e.target.value;
    this.setValue(date);
  }

  setValue(date: string) {
    this.internals.setFormValue(date, `${date}#${this.view}`);
  }

  formStateRestoreCallback(state, _mode) {
    const [date, view] = state.split("#");
    this.view = view;
    this.setValue(date);
  }

  render() {
    return <div>
      Mock Date Picker, mode: {this.view}
      <input class="date-picker" onChange={e => this.onInputChange(e)}></input>
    </div>
  }
}

----------------------------------------

TITLE: Configuring Prerender in Stencil Config
DESCRIPTION: Sets up the prerender configuration in the Stencil config file by specifying the path to the prerender config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Parsing Command-line Arguments for Stencil CLI
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object. It takes an array of strings as input, typically process.argv.slice(2).

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: This example demonstrates how to document slots in a Stencil component using the @slot JSDoc tag. It includes documentation for both named and default slots.

LANGUAGE: typescript
CODE:
/**
 * @slot - Content is placed between the named slots if provided without a slot.
 * @slot primary - Content is placed to the left of the main slotted-in text.
 * @slot secondary - Content is placed to the right of the main slotted-in text.
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent {
  // ...
  
  render() {
    return (
      <section>
        <slot name="primary"></slot>
        <div class="content">
          <slot></slot>
        </div>
        <slot name="secondary"></slot>
      </section>
    );
  }
}

----------------------------------------

TITLE: Accessing Stencil Components with ViewChild
DESCRIPTION: TypeScript code demonstrating how to access Stencil components using ViewChild in Angular.

LANGUAGE: typescript
CODE:
import { Component, ElementRef, ViewChild } from '@angular/core';

import { TestComponent } from 'test-components';

@Component({
  selector: 'app-home',
  template: `<test-components #test></test-components>`,
  styleUrls: ['./home.component.scss'],
})
export class HomeComponent {
  @ViewChild(TestComponent) myTestComponent: ElementRef<TestComponent>;

  async onAction() {
    await this.myTestComponent.nativeElement.testComponentMethod();
  }
}

----------------------------------------

TITLE: Generating Stats with Stencil CLI in package.json
DESCRIPTION: Shows how to add scripts to package.json for generating stats files using the Stencil CLI with the --stats flag.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Example of Full Build Process
DESCRIPTION: Complete example showing how to set up and run a full build process in a NodeJS environment.

LANGUAGE: tsx
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Demonstrating Asset Path Resolution with getAssetPath
DESCRIPTION: Example showing how getAssetPath resolves different asset paths relative to the build directory.

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Testing Store Reset Configuration
DESCRIPTION: Example of how to reset the store state between test specifications using the dispose() API.

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: Configuring JSON Documentation Output Target in Stencil
DESCRIPTION: Add the docs-json output target to the Stencil configuration file to auto-generate JSON documentation on every build.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Defining NPM Script for Combined Test Execution
DESCRIPTION: Package.json script configuration to run both Stencil and WebdriverIO tests sequentially.

LANGUAGE: json
CODE:
{
    "scripts:": {
        "test.e2e": "stencil test && wdio run wdio.conf.ts"
    }
}

----------------------------------------

TITLE: Loading Stencil Component via CDN Script Tag
DESCRIPTION: Demonstrates how to include a Stencil component in a simple HTML page using a CDN script tag.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Installing Stencil Store via NPM
DESCRIPTION: Command to install @stencil/store package as a development dependency.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Using Build Conditionals for Prerendering in Stencil
DESCRIPTION: Demonstrates how to use the Build.isBrowser conditional to execute different code paths during prerendering versus browser runtime.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Using Build Conditionals for Prerendering in Stencil
DESCRIPTION: Demonstrates how to use the Build.isBrowser conditional to execute different code paths during prerendering versus browser runtime.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Testing Component with JSX Template in Stencil
DESCRIPTION: This example shows how to use the template option in newSpecPage() to test a Stencil component using JSX syntax. It demonstrates passing props to the component and checking the rendered output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Testing Component with JSX Template in Stencil
DESCRIPTION: This example shows how to use the template option in newSpecPage() to test a Stencil component using JSX syntax. It demonstrates passing props to the component and checking the rendered output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: E2E Test with SpecPage
DESCRIPTION: Example E2E test using newSpecPage to test a component with mocked dependencies

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: E2E Testing with Mocked Utility in Stencil
DESCRIPTION: Example of an E2E test for the 'Foo' component using 'newSpecPage'. It demonstrates how to mock the 'getRandomInt' function in a Stencil E2E test environment.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Private Methods in Stencil Components
DESCRIPTION: Demonstrates implementation of private methods in Stencil components that don't require async/Promise returns.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Configuring Path Aliases in tsconfig.json
DESCRIPTION: Demonstrates how to set up path aliases in the TypeScript configuration file for use with Stencil's transformAliasedImportPaths option.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "paths": {
      "@utils": [
        "../path/to/utils"
      ]
    }
  }
}

----------------------------------------

TITLE: Creating Vue Plugin for Custom Elements
DESCRIPTION: Vue plugin to register custom elements for lazy-loading.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Loading Stencil Configuration
DESCRIPTION: Displays the function signature for loadConfig(), which transforms raw config information into a usable config object for the compiler and dev-server.

LANGUAGE: typescript
CODE:
loadConfig(init?: LoadConfigInit): Promise<LoadConfigResults>

----------------------------------------

TITLE: Setting Nonce in Stencil Dist Output Target
DESCRIPTION: Example showing how to set a nonce in a Stencil dist output target using the setNonce helper function within an Angular application's entrypoint.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Demonstrating SemVer Format in Markdown
DESCRIPTION: Shows the format of Semantic Versioning used by Stencil, which consists of major, minor, and patch version numbers.

LANGUAGE: markdown
CODE:
<code>major.minor.patch.</code>

----------------------------------------

TITLE: Creating Vue Plugin for Custom Elements
DESCRIPTION: Vue plugin to register custom elements for the lazy-loaded bundle.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Documenting CSS Variables in Stencil
DESCRIPTION: Demonstrates how to document CSS custom properties (variables) using JSDoc-style comments in CSS/SCSS files. The example shows documentation for a primary color variable.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: E2E Test with SpecPage
DESCRIPTION: Example E2E test using newSpecPage to test a component with mocked dependencies

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Example Telemetry Data Structure in JavaScript
DESCRIPTION: Sample JSON structure showing the telemetry data collected by Stencil CLI, including system information, dependency versions, build configuration, and command execution details.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Creating a Mock for Your Own Code
DESCRIPTION: Shows how to create a mock for the 'getRandomInt' function by defining a mock implementation in a __mocks__ folder within your project structure.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Stencil Web Worker Function Definitions
DESCRIPTION: Example of defining Web Worker functions in Stencil using TypeScript with async operations.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: React Component Usage Example
DESCRIPTION: Example of using the generated React component wrapper in a React application

LANGUAGE: tsx
CODE:
import './App.css';
import { MyComponent } from 'react-library';

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Configuring JSON Docs Output Target in Stencil
DESCRIPTION: Configuration for automatically generating JSON documentation in Stencil's config file.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Configuring VS Code Browser Debugging for Stencil
DESCRIPTION: Launch configuration for debugging Stencil components in Chrome browser. Sets up sourcemap support and localhost connection on port 3333.

LANGUAGE: json
CODE:
{
  "type": "chrome",
  "request": "launch",
  "name": "Launch Chrome against localhost",
  "url": "http://localhost:3333",
  "sourceMaps": true,
  "sourceMapPathOverrides": {
    "*": "${webRoot}/*"
  }
}

----------------------------------------

TITLE: Using a Functional Component with Props in Stencil
DESCRIPTION: Shows how to use a functional component by passing props as attributes.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Shadow DOM CSS Styling Example
DESCRIPTION: Demonstrates basic CSS styling within Shadow DOM context, including host element styling.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Using a Custom Utility Function in a Stencil Service
DESCRIPTION: Demonstrates how to use the getRandomInt function within a service module.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Prerender Process
DESCRIPTION: This JSON configuration sets up VS Code to debug the Stencil prerender process. It specifies the Node.js debugger, provides arguments for the Stencil CLI, and sets the inspector protocol for debugging.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "node",
      "request": "launch",
      "name": "Prerender",
      "args": [
        "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
        "prerender",
        "${workspaceFolder}/dist/hydrate/index.js",
        "--max-workers=0",
        "--config=${workspaceFolder}/stencil.config.ts"
      ],
      "protocol": "inspector"
    }
  ]
}

----------------------------------------

TITLE: Initializing WebdriverIO Project Setup
DESCRIPTION: Command to initiate WebdriverIO's configuration wizard for a new project setup.

LANGUAGE: bash
CODE:
npm init wdio@latest .

----------------------------------------

TITLE: Basic Stencil Output Target Configuration in TypeScript
DESCRIPTION: Example showing how to configure multiple output targets in a Stencil config file, including both dist and www targets.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Configuring Hydrate App Output Target in Stencil
DESCRIPTION: Configuration snippet showing how to add the dist-hydrate-script output target to stencil.config.ts

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Configuring Stencil docs-custom Output Target
DESCRIPTION: Example configuration for setting up the docs-custom output target in Stencil. The config shows how to implement a custom generator function that receives the JsonDocs data for custom documentation processing.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Creating Usage Examples for Stencil Components
DESCRIPTION: Example of creating a usage example for a Stencil component. These examples are stored in markdown files and included in the JSON documentation output.

LANGUAGE: md
CODE:
# How to use `my-button`

A button is often a great help in adding interactivity to an app!

You could use it like this:

```html
<my-button>My Button!</my-button>
```

----------------------------------------

TITLE: Element Decorator Usage
DESCRIPTION: Demonstrates how to use the @Element decorator to access the host element within a component class.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Using CSS Parts in Stencil Component
DESCRIPTION: Shows how to define and use CSS parts in a Stencil component for more flexible styling from the light DOM.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Implementing CSP Nonce in Stencil Dist Output
DESCRIPTION: Example showing how to set up CSP nonce in a Stencil dist output target within an Angular application's entrypoint. Uses the setNonce helper function to apply nonces to all script and style tags.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Push Notification Implementation
DESCRIPTION: Example code for implementing push notifications in a service worker, including event handling and subscription management.

LANGUAGE: typescript
CODE:
self.addEventListener('push', event => {
  console.log(`Push received with data "${event.data.text()}"`);

  const title = 'Push Notification';
  const options = {
    body: `${event.data.text()}`,
    data: { href: '/users/donald' },
    actions: [
      { action: 'details', title: 'Details' },
      { action: 'dismiss', title: 'Dismiss' },
    ],
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

----------------------------------------

TITLE: Marking a Stencil Component as Internal
DESCRIPTION: Use the @internal JSDoc tag to mark a component as internal, which will skip README generation for that component.

LANGUAGE: typescript
CODE:
/**
 * @internal
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Handling User Input in Stencil Components
DESCRIPTION: Demonstrates how to handle user input events like button clicks and input changes using arrow functions.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Working with Children in Functional Components
DESCRIPTION: Demonstrates how to use the utils object provided by FunctionalComponent to transform children elements.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Configuring Meta Tags with Stencil Prerender Config
DESCRIPTION: Example of using the afterHydrate hook in Stencil's PrerenderConfig to dynamically set document title based on URL pathname during static site generation. The hook receives document and URL objects as parameters.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Package.json Test Script Configuration
DESCRIPTION: Script configuration to run both Stencil and Playwright tests together.

LANGUAGE: json
CODE:
{
  "scripts": {
    "test.e2e": "stencil test --e2e && playwright test"
  }
}

----------------------------------------

TITLE: Setting CSP Nonce for Custom Elements Output in Angular (TypeScript)
DESCRIPTION: This example shows how to set a CSP nonce for the 'dist-custom-elements' output target in a Stencil project within an Angular application. It uses the 'setNonce' helper function to apply the nonce to all script and style tags.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Disabling transformAliasedImportPaths in Stencil v4.0.0
DESCRIPTION: Configuration snippet for disabling the transformAliasedImportPaths feature in Stencil v4.0.0, which is enabled by default in this version.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Loading Stencil Component using ES Modules in HTML
DESCRIPTION: Shows how to import and define Stencil custom elements using ES Modules in an HTML file.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Configuring TypeScript for Vue Library
DESCRIPTION: This JSON snippet shows the TypeScript configuration specific to the Vue component library.

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2020"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2017",
    "skipLibCheck": true
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: React Component Usage Example
DESCRIPTION: Example of using the generated React component wrapper in a React application

LANGUAGE: tsx
CODE:
import './App.css';
import { MyComponent } from 'react-library';

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

----------------------------------------

TITLE: HTML Asset Path Configuration
DESCRIPTION: Example of setting asset path configuration in HTML using script tags

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Configuring Stencil for README Generation
DESCRIPTION: Basic configuration setup in stencil.config.ts to enable README documentation generation

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Typed Functional Component with Interface
DESCRIPTION: Example of a functional component using TypeScript interface for props typing.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Parsing Command Line Flags in Stencil
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object. Typically used with process.argv.slice(2) to handle CLI arguments.

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Defining Worker Functions in Stencil
DESCRIPTION: Shows how to define functions in a Stencil worker file that can be executed in a separate thread.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Implementing hydrateDocument Function
DESCRIPTION: Example implementation of component hydration using hydrateDocument, taken from Ionic Angular server

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

export function hydrateComponents(doc) {
  return hydrateDocument(doc)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Basic Project Structure Example
DESCRIPTION: Shows the recommended monorepo folder structure for a Stencil-React integration project

LANGUAGE: plaintext
CODE:
top-most-directory/
└── packages/
    ├── stencil-library/
    │   ├── stencil.config.js
    │   └── src/components/
    └── react-library/
        └── src/
            ├── components/
            └── index.ts

----------------------------------------

TITLE: Form Disabled Callback Implementation
DESCRIPTION: Demonstrates handling form disabled state changes by updating CSS classes.

LANGUAGE: tsx
CODE:
import { Component, h, State } from '@stencil/core';

@Component({
  tag: 'form-disabled-cb',
  formAssociated: true,
})
export class MyComponent {
  @State() cssClass: string = "";

  formDisabledCallback(disabled: boolean) {
    if (disabled) {
      this.cssClass = "background-mode";
    } else {
      this.cssClass = "";
    }
  }

  render() {
    return <input type="text" class={this.cssClass}></input>
  }
}

----------------------------------------

TITLE: Demonstrating ConnectedCallback Usage in Stencil
DESCRIPTION: Shows how connectedCallback is triggered when an element is attached to the DOM, including multiple attachments and detachments.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Configuring JSON Documentation Output Target in Stencil
DESCRIPTION: Add the docs-json output target to the Stencil configuration file to auto-generate JSON documentation on every build.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Watching Prop Changes in Stencil Component
DESCRIPTION: Shows how to watch for changes in props, parse them, and update internal state in a Stencil component using @Watch decorator.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

----------------------------------------

TITLE: Creating In-Memory Compiler System
DESCRIPTION: Shows the function for creating an in-memory compiler system independent of any platform. This is used for file system operations within the compiler.

LANGUAGE: tsx
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Defining TestingConfig Interface for Stencil in TypeScript
DESCRIPTION: This code snippet defines the TestingConfig interface which extends JestConfig. It includes Stencil-specific options for configuring e2e tests, such as allowable pixel mismatches, browser arguments, and emulation settings.

LANGUAGE: typescript
CODE:
export interface TestingConfig extends JestConfig {
  /**
   * The `allowableMismatchedPixels` value is used to determine an acceptable
   * number of pixels that can be mismatched before the image is considered
   * to have changes. Realistically, two screenshots representing the same
   * content may have a small number of pixels that are not identical due to
   * anti-aliasing, which is perfectly normal. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedPixels?: number;

  /**
   * The `allowableMismatchedRatio` ranges from `0` to `1` and is used to
   * determine an acceptable ratio of pixels that can be mismatched before
   * the image is considered to have changes. Realistically, two screenshots
   * representing the same content may have a small number of pixels that
   * are not identical due to anti-aliasing, which is perfectly normal. The
   * `allowableMismatchedRatio` is the number of pixels that were mismatched,
   * divided by the total number of pixels in the screenshot. For example,
   * a ratio value of `0.06` means 6% of the pixels can be mismatched before
   * the image is considered to have changes. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedRatio?: number;

  /**
   * Matching threshold while comparing two screenshots. Value ranges from `0` to `1`.
   * Smaller values make the comparison more sensitive. The `pixelmatchThreshold`
   * value helps to ignore anti-aliasing. Default: `0.1`
   */
  pixelmatchThreshold?: number;

  /**
   * Additional arguments to pass to the browser instance.
   */
  browserArgs?: string[];

  /**
   * Path to a Chromium or Chrome executable to run instead of the bundled Chromium.
   */
  browserExecutablePath?: string;

  /**
   * Whether to run browser e2e tests in headless mode.
   *
   * `headless` is an argument passed through to Puppeteer (which is passed to Chrome) for
   * end-to-end testing. Prior to Chrome v112, `headless` was treated like a boolean flag.
   * Starting with Chrome v112, 'new' is an accepted option to support Chrome's new
   * headless mode.
   *
   * The following values are accepted:
   * - "new" - enables the "new" headless mode, starting with Chrome 112
   * - `true` - enables the "old" headless mode, prior to Chrome 112
   * - `false` - enables the "headful" mode
   *
   * Stencil will default to `true` (the old headless mode) if no value is provided.
   *
   * In the future, Chrome will enable the new headless mode by default, even when `true`
   * is provided.
   *
   * {@see https://developer.chrome.com/articles/new-headless/}
   */
  browserHeadless?: boolean;

  /**
   * Whether to auto-open a DevTools panel for each tab.
   * If this option is true, the headless option will be set false
   */
  browserDevtools?: boolean;

  /**
   * Slows down e2e browser operations by the specified amount of milliseconds.
   * Useful so that you can see what is going on.
   */
  browserSlowMo?: number;

  /**
   * Array of browser emulations to be used during _screenshot_ tests. A full screenshot
   * test is run for each emulation.
   * 
   * To emulate a device display for your e2e tests, use the `setViewport` method on a test's E2E page.
   */
  emulate?: EmulateConfig[];

  /**
   * Path to the Screenshot Connector module.
   */
  screenshotConnector?: string;
}

export interface EmulateConfig {
  /**
   * Predefined device descriptor name, such as "iPhone X" or "Nexus 10".
   * For a complete list please see: https://github.com/puppeteer/puppeteer/blob/main/src/DeviceDescriptors.ts
   */
  device?: string;

  /**
   * User-Agent to be used. Defaults to the user-agent of the installed Puppeteer version.
   */
  userAgent?: string;

  viewport?: EmulateViewport;
}


export interface EmulateViewport {

  /**
   * Page width in pixels.
   */
  width: number;

  /**
   * page height in pixels.
   */
  height: number;

  /**
   * Specify device scale factor (can be thought of as dpr). Defaults to 1.
   */
  deviceScaleFactor?: number;

  /**
   * Whether the meta viewport tag is taken into account. Defaults to false.
   */
  isMobile?: boolean;

  /**
   * Specifies if viewport supports touch events. Defaults to false
   */
  hasTouch?: boolean;

  /**
   * Specifies if viewport is in landscape mode. Defaults to false.
   */
  isLandscape?: boolean;

}

----------------------------------------

TITLE: Writing a Vitest Test for a Stencil Component
DESCRIPTION: This test creates a Stencil component instance, sets attributes, appends it to the document, and asserts its rendered content.

LANGUAGE: typescript
CODE:
import { expect, test } from 'vitest'

import '../src/components/my-component/my-component.js'

test('should render component correctly', async () => {
    const cmp = document.createElement('my-component')
    cmp.setAttribute('first', 'Stencil')
    cmp.setAttribute('last', `'Don't call me a framework' JS`)
    document.body.appendChild(cmp)

    await new Promise((resolve) => requestIdleCallback(resolve))
    expect(cmp.shadowRoot?.querySelector('div')?.innerText)
        .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)
})

----------------------------------------

TITLE: Date Picker with Form State Restoration
DESCRIPTION: Complex example showing form state restoration in a date picker component, preserving both value and view state.

LANGUAGE: tsx
CODE:
import { Component, h, State, AttachInternals } from '@stencil/core';

@Component({
  tag: 'fa-date-picker',
  formAssociated: true,
})
export class MyDatePicker {
  @State() value: string = "";
  @State() view: "weeks" | "months" = "weeks";

  @AttachInternals()
  internals: ElementInternals;

  onInputChange(e) {
    e.preventDefault();
    const date = e.target.value;
    this.setValue(date);
  }

  setValue(date: string) {
    this.internals.setFormValue(date, `${date}#${this.view}`);
  }

  formStateRestoreCallback(state, _mode) {
    const [date, view] = state.split("#");
    this.view = view;
    this.setValue(date);
  }

  render() {
    return <div>
      Mock Date Picker, mode: {this.view}
      <input class="date-picker" onChange={e => this.onInputChange(e)}></input>
    </div>
  }
}

----------------------------------------

TITLE: Advanced Screenshot Comparison in Stencil E2E Tests
DESCRIPTION: Comprehensive example of visual regression testing in Stencil, including setting global styles, finding elements, comparing screenshots with different tolerance levels, and handling multiple assertions. It also demonstrates how to test against hard pixels and percentage of changes.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    // In order to test against any global styles you may have, don't forget to set the link to the global css. You don't have to do this if your stencil.config.ts file doesn't build a global css file with globalStyle.
    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    // To start comparing the visual result, you first must run page.compareScreenshot; This will capture a screenshot, and save the file to "/screenshot/images". You'll be able to check that into your repo to provide those results to your team. You can only have one of these commands per test. 
    const results = await page.compareScreenshot();

    // Finally, we can test against the previous screenshots. 
    // Test against hard pixels
    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    // Test against the percentage of changes. if 'allowableMismatchedRatio' is above 20% changed, 
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Advanced Screenshot Comparison in Stencil E2E Tests
DESCRIPTION: Comprehensive example of visual regression testing in Stencil, including setting global styles, finding elements, comparing screenshots with different tolerance levels, and handling multiple assertions. It also demonstrates how to test against hard pixels and percentage of changes.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    // In order to test against any global styles you may have, don't forget to set the link to the global css. You don't have to do this if your stencil.config.ts file doesn't build a global css file with globalStyle.
    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    // To start comparing the visual result, you first must run page.compareScreenshot; This will capture a screenshot, and save the file to "/screenshot/images". You'll be able to check that into your repo to provide those results to your team. You can only have one of these commands per test. 
    const results = await page.compareScreenshot();

    // Finally, we can test against the previous screenshots. 
    // Test against hard pixels
    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    // Test against the percentage of changes. if 'allowableMismatchedRatio' is above 20% changed, 
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Installing @wdio/visual-service Plugin for WebdriverIO
DESCRIPTION: Command to install the @wdio/visual-service plugin for WebdriverIO, which enables visual testing capabilities.

LANGUAGE: bash
CODE:
npm install --save-dev @wdio/visual-service

----------------------------------------

TITLE: Updating tsconfig.json for Playwright Compatibility
DESCRIPTION: JSON configuration to add ESNext.Disposable to the lib array in tsconfig.json for Playwright compatibility.

LANGUAGE: json
CODE:
{
  "lib": [
    "...",
    "ESNext.Disposable"
  ],
  "..."
}

----------------------------------------

TITLE: Mocking Utility Function
DESCRIPTION: Shows how to create a mock implementation of the getRandomInt utility function.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Initializing Basic Form-Associated Component in Stencil
DESCRIPTION: Basic example of creating a form-associated component by setting the formAssociated flag to true in the Component decorator.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Auto-Defining Standalone Stencil Components
DESCRIPTION: Shows how to import and auto-define standalone Stencil components when using the 'auto-define-custom-elements' option.

LANGUAGE: typescript
CODE:
import 'my-design-system/my-component'

----------------------------------------

TITLE: Invalid Component Module Export in TypeScript
DESCRIPTION: This example demonstrates an invalid component module export, where additional functions are exported alongside the component class. This practice is not allowed in Stencil for efficient bundling.

LANGUAGE: typescript
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: ScreenshotConnectorOptions Interface
DESCRIPTION: Interface definition for screenshot connector options.

LANGUAGE: tsx
CODE:
https://github.com/ionic-team/stencil/blob/a2e119d059ba0d0fa6155dbd3d82c17612630828/src/declarations/stencil-private.ts#L1676-L1698

----------------------------------------

TITLE: Configuring Hydrate Options for Individual Pages
DESCRIPTION: This example shows how to use the hydrateOptions hook in the prerender config to set specific options for each page during the prerendering process.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Basic Workbox Service Worker Configuration in Stencil
DESCRIPTION: Default configuration for generating a service worker using Workbox in a Stencil project. Defines glob patterns for asset caching.

LANGUAGE: typescript
CODE:
{
  globPatterns: [
    '**/*.{js,css,json,html}'
  ]
};

----------------------------------------

TITLE: Setting Component Style Mode in Stencil
DESCRIPTION: Demonstrates how to use the setMode() function to dynamically set the style mode of a Stencil component based on an attribute value.

LANGUAGE: typescript
CODE:
import { setMode } from '@stencil/core'

// set mode based on a property
setMode((el) => el.getAttribute('mode'));

----------------------------------------

TITLE: Defining a Public Method with @Method() Decorator in Stencil
DESCRIPTION: This snippet demonstrates how to use the @Method() decorator to expose a public method on a Stencil component. The method is async and can be called directly from the element.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Setting CSP Nonce in Stencil Custom Elements
DESCRIPTION: Example demonstrating nonce configuration for script and style tags in a Stencil custom elements output target within an Angular application.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Adding Custom Content to Generated README
DESCRIPTION: Add custom markdown content above the auto-generated section in the README file.

LANGUAGE: markdown
CODE:
Custom content goes here!
<!-- Auto Generated Below -->

----------------------------------------

TITLE: Configuring Stencil Testing with TypeScript
DESCRIPTION: Reference to the Stencil compiler's public testing configuration interface. This shows the available testing configuration options that can be set in stencil.config.ts to customize Jest behavior and e2e testing settings.

LANGUAGE: typescript
CODE:
https://github.com/ionic-team/stencil/blob/32811591777de726f0374649a4f5e250a0a8e355/src/declarations/stencil-public-compiler.ts#L1968-L2119

----------------------------------------

TITLE: API Component Environment Usage
DESCRIPTION: Example demonstrating how to use environment variables in a Stencil component.

LANGUAGE: typescript
CODE:
import { Component, h, Env, Host } from '@stencil/core';

@Component({
  tag: 'api-component',
})
export class APIComponent {
  async connectedCallback () {
    const res = await fetch(Env.API_BASE_URL)
    // ...
  }
}

----------------------------------------

TITLE: Running Individual Stencil Tasks in TypeScript
DESCRIPTION: Executes individual Stencil tasks given a NodeJS process, Stencil config, and task command. An optional CompilerSystem can be provided.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Calling Public Methods in Stencil Components
DESCRIPTION: Shows how to properly call a public method on a Stencil component after ensuring the component is defined using the whenDefined method of the custom element registry.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Rollup Plugin Configuration for Asset Copying
DESCRIPTION: Shows how to configure Rollup plugins to copy assets during the build process.

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Rollup Plugin Configuration for Asset Copying
DESCRIPTION: Shows how to configure Rollup plugins to copy assets during the build process.

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Creating Node Logger for Stencil Compiler
DESCRIPTION: Creates a logger instance based on NodeJS APIs for use by the compiler and dev-server. Takes the NodeJS process object as input and returns a Logger instance.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Updating TSConfig for Playwright
DESCRIPTION: TypeScript configuration update to include ESNext.Disposable in lib array

LANGUAGE: typescript
CODE:
{
  lib: [
    ...,
    "ESNext.Disposable"
  ],
  ...
}

----------------------------------------

TITLE: Configuring Stencil Output Target for README Generation
DESCRIPTION: Basic configuration to enable README generation in a Stencil project by adding the docs-readme output target to the Stencil config file.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Configuring WebdriverIO Visual Service
DESCRIPTION: Configuration code for enabling visual service in WebdriverIO configuration file. Shows how to add the visual service to the services array.

LANGUAGE: typescript
CODE:
https://github.com/webdriverio/component-testing-examples/blob/2de295ab568b5163e67d716156221578b6536d9d/stencil-component-starter/wdio.conf.ts#L119-L126)

----------------------------------------

TITLE: Custom Footer Configuration
DESCRIPTION: Configuring a custom footer for generated README files

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Enabling Static Site Generation Build in Stencil
DESCRIPTION: Command to enable prerendering during the Stencil build process using the --prerender flag.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Configuring WebdriverIO for Visual Testing
DESCRIPTION: Configuration snippet for wdio.conf.ts to enable the visual service and set up the baseline directory for screenshot comparisons.

LANGUAGE: typescript
CODE:
export const config: WebdriverIO.Config = {
    // ...
    services: [
        ['visual', {
            baselineFolder: join(process.cwd(), './tests/visual/baseline'),
            formatImageName: '{tag}-{logName}-{width}x{height}'
        }]
    ],
    // ...
}

----------------------------------------

TITLE: Creating Mocks in TypeScript for WebdriverIO Tests
DESCRIPTION: This example shows how to create mocks for both project files and external modules in WebdriverIO tests. It demonstrates mocking a utility function and an entire module, as well as using the mocked function.

LANGUAGE: typescript
CODE:
import { mock, fn } from '@wdio/browser-runner'
import { format } from './utils/utils.ts'

// mock files within the project
mock('./utils/utils.ts', () => ({
    format: fn().mockReturnValue(42)
}))
// mock whole modules and replace functionality with what is defined in `./__mocks__/leftpad.ts`
mock('leftpad')

console.log(format()) // returns `42`

----------------------------------------

TITLE: Creating an In-Memory Compiler System
DESCRIPTION: Shows the function signature for creating an in-memory compiler system independent of any platform.

LANGUAGE: typescript
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Optimizing JavaScript with Stencil Compiler
DESCRIPTION: Illustrates the utility function used by the compiler to optimize JavaScript, applying minification optimizations based on the JavaScript target.

LANGUAGE: jsx
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Implementing Private Methods in Stencil Components
DESCRIPTION: This snippet demonstrates how to implement private methods in Stencil components. Private methods do not require the @Method() decorator and are not required to be async or return a Promise.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript interface for the CopyTask configuration object used in Stencil's output targets. It defines the structure and types of properties that can be used to configure file copy operations.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Direct Component Class Testing in TypeScript
DESCRIPTION: Shows how to test component class logic directly by instantiating the component class and testing its methods and properties without rendering.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: Command to install the ember-cli-stencil addon for legacy Ember integration with Stencil components.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: Shows how to write CSS for a component using Shadow DOM, demonstrating scoped styles and the :host pseudo-class selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation in Stencil
DESCRIPTION: This snippet shows how to configure a Stencil project to validate the primary package output target. It sets the 'dist' output target as the primary one for validation and enables the validation feature.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Configuring Asset Directories for a Stencil Component
DESCRIPTION: This snippet demonstrates how to use the 'assetsDirs' option to specify asset directories for a component and how to use the getAssetPath() function to reference assets.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // 1. assetsDirs lists the 'assets' directory as a relative (sibling)
  // directory
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    // 2. the asset path is retrieved relative to the asset base path to use in
    // the <img> tag
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Project Type Selection Interface
DESCRIPTION: CLI interface showing available Stencil project starter templates including component, app, and ionic-pwa options.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Asset Directory Configuration
DESCRIPTION: Demonstrates how to configure and use asset directories in a Stencil component for static file handling.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Importing Stencil Compiler in NodeJS
DESCRIPTION: Demonstrates how to import the Stencil compiler module in a NodeJS environment using CommonJS syntax.

LANGUAGE: javascript
CODE:
// NodeJS (commonjs)
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Running Visual Regression Tests with Stencil CLI
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison using the Stencil CLI.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Non-JSX Event Listening Example
DESCRIPTION: Demonstrates how to listen to Stencil component events from regular JavaScript code.

LANGUAGE: tsx
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Lifecycle DOM Event Names Reference
DESCRIPTION: A table showing the component lifecycle events that can be dispatched and listened for on the window object when lifecycleDOMEvents is enabled.

LANGUAGE: markdown
CODE:
| Event Name                    | Description                                            |
| ----------------------------- | ------------------------------------------------------ |
| `stencil_componentWillLoad`   | Dispatched for each component's `componentWillLoad`.   |
| `stencil_componentWillUpdate` | Dispatched for each component's `componentWillUpdate`. |
| `stencil_componentWillRender` | Dispatched for each component's `componentWillRender`. |
| `stencil_componentDidLoad`    | Dispatched for each component's `componentDidLoad`.    |
| `stencil_componentDidUpdate`  | Dispatched for each component's `componentDidUpdate`.  |
| `stencil_componentDidRender`  | Dispatched for each component's `componentDidRender`.  |

----------------------------------------

TITLE: Defining a Helper Function in TypeScript
DESCRIPTION: Definition of a 'getRandomInt' helper function in a utils file. This function generates a random integer within a specified range.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Getting Component Mode in Stencil
DESCRIPTION: Shows how to use the getMode function to retrieve the current style mode of a Stencil component. This can be useful for conditional rendering or styling based on the current mode.

LANGUAGE: typescript
CODE:
import { getMode } from '@stencil/core'

getMode(this);

----------------------------------------

TITLE: Basic Usage of @State() Decorator in Stencil
DESCRIPTION: This snippet demonstrates the basic usage of the @State() decorator in a Stencil component to manage and render the current time.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Consuming React Wrapper Components
DESCRIPTION: Example of how to use the generated React component wrappers in a React application, including importing and using a component.

LANGUAGE: tsx
CODE:
// App.tsx
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Documenting Component Slots
DESCRIPTION: Example of documenting component slots using JSDoc tags

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: React Component Library Package Configuration
DESCRIPTION: Package.json configuration for the React component library including build settings and dependencies

LANGUAGE: json
CODE:
{
  "main": "dist/index.js",
  "module": "dist/index.js",
  "types": "dist/types/index.d.ts",
  "scripts": {
    "test": "node ./__tests__/react-library.test.js",
    "build": "npm run tsc",
    "tsc": "tsc -p . --outDir ./dist"
  },
  "files": [
    "dist"
  ],
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "stencil-library": "*"
  }
}

----------------------------------------

TITLE: Using Host as a Fragment in Stencil Components
DESCRIPTION: Shows how the Host component can be used to render multiple elements at the root level of a Stencil component, acting similarly to a Fragment in other frameworks.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Generating README Files Using Stencil Docs Command
DESCRIPTION: Shows how to use the Stencil docs command to generate documentation including README files.

LANGUAGE: bash
CODE:
npx stencil docs

----------------------------------------

TITLE: Using renderToString for Component Hydration
DESCRIPTION: Demonstrates how to use the renderToString function to hydrate a Stencil component and serialize it to HTML.

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(
  `<my-component first="Stencil" last="'Don't call me a framework' JS"></my-component>`,
  {
    fullDocument: false,
    serializeShadowRoot: true,
    prettyHtml: true,
  }
);

console.log(results.html);

----------------------------------------

TITLE: Configuring Package.json Test Scripts
DESCRIPTION: NPM script configuration to run both Stencil and WebdriverIO tests

LANGUAGE: json
CODE:
{
    "scripts:": {
        "test.e2e": "stencil test && wdio run wdio.conf.ts"
    }
}

----------------------------------------

TITLE: Installing Ionic Framework in Ember
DESCRIPTION: Command to install the Ionic Framework package in an Ember project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Configuring Asset Directories for a Stencil Component
DESCRIPTION: This snippet demonstrates how to use the 'assetsDirs' option to specify asset directories for a component and how to use the getAssetPath() function to reference assets.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // 1. assetsDirs lists the 'assets' directory as a relative (sibling)
  // directory
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    // 2. the asset path is retrieved relative to the asset base path to use in
    // the <img> tag
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Creating NodeJS Logger for Stencil Compiler
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the Stencil compiler and dev-server. It requires the NodeJS 'process' object as an argument.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Creating and Configuring a Stencil Store
DESCRIPTION: Example of creating a store with initial state and setting up a change listener for the 'clicks' property.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: VS Code Launch Configuration for Stencil Tests
DESCRIPTION: Debug configuration for running Stencil tests directly from VS Code, supporting both E2E and spec tests for the current file

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "E2E Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--e2e", "--", "--maxWorkers=0", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Spec Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--spec", "--", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

----------------------------------------

TITLE: Stencil Component Implementation with Method
DESCRIPTION: Shows a Stencil component implementation that uses the getRandomInt utility function in a method.

LANGUAGE: tsx
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Configuring Stencil Custom Elements Output Target
DESCRIPTION: Basic configuration for enabling the dist-custom-elements output target in a Stencil project's config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Defining Worker Functions in Stencil
DESCRIPTION: Shows how to create a worker file in Stencil with exported functions that can be run in a separate thread.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Enabling Scoped CSS in Stencil Component
DESCRIPTION: Shows how to enable scoped CSS for a Stencil component by setting the 'scoped' option to true in the component decorator.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'scoped-component',
  styleUrl: 'scoped-component.css',
  scoped: true,
})
export class ScopedComponent {}

----------------------------------------

TITLE: HTML Template for Stencil Component E2E Testing
DESCRIPTION: Provides an HTML template for testing a Stencil component, including the necessary script tags for loading the component.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf8" />

    <!-- Replace with the path to your entrypoint -->
    <script src="../../../build/test-app.esm.js" type="module"></script>
    <script src="../../../build/test-app.js" nomodule></script>
  </head>
  <body>
    <my-component first="Stencil"></my-component>
  </body>
</html>

----------------------------------------

TITLE: Configuring docs-custom Output Target in Stencil
DESCRIPTION: Configuration example showing how to set up the docs-custom output target in a Stencil project. The config includes a generator function that receives the JsonDocs data for custom processing.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Styling CSS Parts from Light DOM
DESCRIPTION: Demonstrates how to style CSS parts defined in a Stencil component from the light DOM using the ::part() pseudo-element.

LANGUAGE: css
CODE:
shadow-card::part(heading) {
  text-transform: uppercase;
}

----------------------------------------

TITLE: Adding Nonce Meta Tag for SSR (HTML)
DESCRIPTION: Illustrates how to add a meta tag to the HTML head for server-side rendering (SSR) to provide the nonce value. This tag should be injected on each page request.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Installing Node Polyfills for Stencil
DESCRIPTION: Command to install the rollup-plugin-node-polyfills package as a dev dependency for handling Node.js APIs in the browser.

LANGUAGE: bash
CODE:
npm install rollup-plugin-node-polyfills --save-dev

----------------------------------------

TITLE: Resetting Stencil Store in Test Environment
DESCRIPTION: Example of how to reset the store state between test specs using the dispose() method. This ensures a clean state for each test.

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: Configuring Supplemental Public Types in Stencil Config
DESCRIPTION: Configuration for including additional public types in the JSON documentation. This uses the supplementalPublicTypes option to specify a file containing extra types to document.

LANGUAGE: ts
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json',
      supplementalPublicTypes: 'src/public-interfaces.ts',
    }
  ]
};

----------------------------------------

TITLE: Handling Service Worker Updates in Stencil Component
DESCRIPTION: Stencil component code to handle Service Worker updates, showing a toast notification when an update is available and providing a reload option.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    // If there is no waiting registration, this is the first service
    // worker being installed.
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Registering Custom Elements in Angular
DESCRIPTION: Use the APP_INITIALIZER to register custom elements during app initialization in Angular.

LANGUAGE: TypeScript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Using Build Conditionals in Stencil Components
DESCRIPTION: Demonstration of using Build.isBrowser conditional to control code execution during prerendering vs browser runtime.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Updating Stencil Test Runner Configuration
DESCRIPTION: Modification to the Stencil configuration to change the test file pattern for the Stencil Test Runner, allowing coexistence with Playwright.

LANGUAGE: typescript
CODE:
export config: Config = {
   ...,
   test: {
      // Stencil Test Runner will no longer execute any 'e2e.ts` files
      testRegex: '(/__tests__/.*|(\\.|/)(test|spec)|[//](e2e))\\.[jt]sx?$'
   }
}

----------------------------------------

TITLE: Configuring Prerender Settings for Debugging
DESCRIPTION: TypeScript configuration for Stencil's prerender process, setting up crawling behavior and runtime logging options for debugging purposes.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Consuming Angular Wrapper Components in App Module
DESCRIPTION: Import and use the generated Angular component wrappers in an Angular application module.

LANGUAGE: typescript
CODE:
import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

----------------------------------------

TITLE: E2E Test with Spec Page in TypeScript
DESCRIPTION: End-to-end test example using newSpecPage to test a component with mocked dependencies.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Package.json Exports Configuration
DESCRIPTION: Advanced package.json configuration for component exports with TypeScript support.

LANGUAGE: json
CODE:
{
  "exports": {
    ".": {
      "import": "./dist/components/index.js",
      "types": "./dist/components/index.d.ts"
    },
    "./my-component": {
      "import": "./dist/components/my-component.js",
      "types": "./dist/components/my-component.d.ts"
    }
  },
  "types": "dist/components/index.d.ts"
}

----------------------------------------

TITLE: Generating README Files Using Stencil Docs Command
DESCRIPTION: Shows how to use the Stencil docs command to generate documentation including README files.

LANGUAGE: bash
CODE:
npx stencil docs

----------------------------------------

TITLE: Setting Asset Path in Stencil Runtime
DESCRIPTION: Demonstrates how to use the setAssetPath() API to manually set the asset base path in a Stencil application.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Running Stencil CLI
DESCRIPTION: Executes the CLI with specified initialization options. Used by the default bin/stencil file and can be integrated into external implementations.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Creating Node Logger for Stencil Compiler in TypeScript
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the Stencil compiler and dev-server. It requires the NodeJS process object as an argument.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Accessing Worker Instance Directly in Stencil
DESCRIPTION: Demonstrates how to access the Worker instance directly for manual postMessage usage.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {

  componentWillLoad() {
    worker.postMessage(['send data manually']);

    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Prerender Config with Hydrate Options
DESCRIPTION: Example of implementing hydrateOptions hook in prerender config to customize individual page rendering options.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Implementing Controlled Component Pattern with Ionic in Ember
DESCRIPTION: Example of using an Ionic toggle component with state management and event handling in an Ember component.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Custom Destination Copy Configuration
DESCRIPTION: Example demonstrating how to copy files to a custom destination path using the dest option, copying from src/files/fonts to public/static/web-fonts.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]

----------------------------------------

TITLE: AddClass Functional Component Example
DESCRIPTION: Example showing how to use the utilities provided by FunctionalComponent to transform child elements.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Installing @wdio/visual-service Plugin for WebdriverIO
DESCRIPTION: Command to install the @wdio/visual-service plugin as a dev dependency in a WebdriverIO project for visual testing capabilities.

LANGUAGE: bash
CODE:
npm install --save-dev @wdio/visual-service

----------------------------------------

TITLE: Listening for App Load Event in TypeScript
DESCRIPTION: Shows how to listen for the special 'appload' event emitted when the app and all its child components have finished loading. The event listener is added to the window object and can differentiate between multiple apps using the namespace config option.

LANGUAGE: typescript
CODE:
window.addEventListener('appload', (event) => {
  console.log(event.detail.namespace);
});

----------------------------------------

TITLE: Configuring Supplemental Public Types in Stencil
DESCRIPTION: Use the supplementalPublicTypes option to include additional types in the JSON documentation output.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json',
      supplementalPublicTypes: 'src/public-interfaces.ts',
    }
  ]
};

----------------------------------------

TITLE: Using renderToString for Component Hydration
DESCRIPTION: Example of using the renderToString function to hydrate a single component with custom options.

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(
  `<my-component first="Stencil" last="'Don't call me a framework' JS"></my-component>`,
  {
    fullDocument: false,
    serializeShadowRoot: true,
    prettyHtml: true,
  }
);

console.log(results.html);

----------------------------------------

TITLE: Using Build Conditionals for Browser-Specific Code in Stencil
DESCRIPTION: This example shows how to use the Build.isBrowser conditional to execute different code paths during prerendering versus browser runtime in a Stencil component.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Testing Component Class Logic
DESCRIPTION: Example of testing component class logic directly by instantiating the component class and testing its methods.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Using Build Conditionals for Browser-Specific Code in Stencil
DESCRIPTION: This example shows how to use the Build.isBrowser conditional to execute different code paths during prerendering versus browser runtime in a Stencil component.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Creating a Stencil Compiler Instance
DESCRIPTION: Shows the function signature for createCompiler(), which creates a Compiler instance based on a provided configuration. This is used for full builds of Stencil components.

LANGUAGE: typescript
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Adding Component Overview in JSDoc
DESCRIPTION: Demonstrates how to add a component overview using JSDoc comments, which will be included in the generated README.

LANGUAGE: typescript
CODE:
/**
 * A simple component for formatting names
 *
 * This component will do some neat things!
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { }

----------------------------------------

TITLE: Configuring TypeScript Generation in Stencil Config
DESCRIPTION: Configuration in stencil.config.ts for generating TypeScript declarations.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      generateTypeDeclarations: true,
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Component Class Definition Example
DESCRIPTION: Shows how to properly define component classes in TypeScript without prefixes.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'ion-button'
})
export class Button { ... }

@Component({
  tag: 'ion-menu'
})
export class Menu { ... }

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: Example of how to add the dist-custom-elements output target to a Stencil project's configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript interface for the CopyTask configuration used in Stencil's output targets. It defines the structure and available options for copy tasks.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Basic Web Worker Usage in Vanilla JavaScript
DESCRIPTION: Demonstrates how to create and communicate with a Web Worker using vanilla JavaScript. This example shows the low-level API provided by browsers for working with Web Workers.

LANGUAGE: typescript
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Running Stencil CLI with Options in TypeScript
DESCRIPTION: Runs the CLI with given options. This is used by Stencil's default 'bin/stencil' file but can also be used externally.

LANGUAGE: typescript
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class
DESCRIPTION: Basic implementation of a custom screenshot connector by extending the base ScreenshotConnector class from Stencil core.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Implementing Controlled Component Pattern with Ionic in Ember
DESCRIPTION: Example of a full Ember component using an Ionic toggle with state management and event handling.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Accessing Raw Worker Instance in Stencil
DESCRIPTION: Shows how to access the actual Worker instance in Stencil for advanced use cases, allowing direct use of postMessage and onmessage APIs.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {

  componentWillLoad() {
    worker.postMessage(['send data manually']);

    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Installing Playwright Browser Binaries
DESCRIPTION: Command to install the necessary Playwright browser binaries for testing.

LANGUAGE: bash
CODE:
npx playwright install

----------------------------------------

TITLE: Creating a React Component Library
DESCRIPTION: Commands to create a new React component library package and install its core dependencies using Lerna.

LANGUAGE: bash
CODE:
# Create a project
lerna create react-library # fill out the prompts accordingly
cd packages/react-library

# Install core dependencies
npm install react react-dom typescript @types/react --save-dev

----------------------------------------

TITLE: Updating TypeScript Configuration
DESCRIPTION: TSConfig update to include ESNext.Disposable in lib array for Symbol.asyncDispose support.

LANGUAGE: typescript
CODE:
{
  lib: [
    ...,
    "ESNext.Disposable"
  ],
  ...
}

----------------------------------------

TITLE: Using componentOnReady() in Stencil
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code after a Stencil component has finished its first render cycle. This method returns a promise that resolves after componentDidRender() on the first render cycle.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Configuring Stencil Output Target for Hydrate App
DESCRIPTION: Configuration snippet showing how to add the dist-hydrate-script output target to stencil.config.ts

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Documenting @Method() Usage in Stencil Components
DESCRIPTION: Example of documenting methods using @Method() decorator and JSDoc comments, which will be reflected in the generated README.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * Scroll by a specified X/Y distance in the component.
   *
   * @param x The amount to scroll by on the horizontal axis.
   * @param y The amount to scroll by on the vertical axis.
   * @param duration The amount of time to take scrolling by that amount.
   * @returns the total distance travelled
   */
  @Method()
  async scrollByPoint(x: number, y: number, duration: number): Promise<number> { /* omitted */ }

  // ...
}

----------------------------------------

TITLE: Global Script Export Example
DESCRIPTION: Example of exporting a default function for global script configuration in Stencil.

LANGUAGE: javascript
CODE:
export default function() {
  initServerConnection();
}

----------------------------------------

TITLE: Example of Removed Legacy Context and Connect APIs
DESCRIPTION: Code snippet showing the deprecated usage of context and connect options within the @Prop decorator. These APIs have been removed in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
@Prop({ context: 'config' }) config: Config;
@Prop({ connect: 'ion-menu-controller' }) lazyMenuCtrl: Lazy<MenuController>;

----------------------------------------

TITLE: Using Build Conditionals for Browser-Specific Code in Stencil
DESCRIPTION: Demonstrates how to use the Build.isBrowser conditional to execute code only in the browser environment and not during prerendering.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Accessing Path Utility in Stencil
DESCRIPTION: Describes the 'path' utility provided by the Stencil compiler, which is similar to the NodeJS path API but platform-independent.

LANGUAGE: typescript
CODE:
path: PlatformPath

----------------------------------------

TITLE: Styling Host Element in Regular DOM
DESCRIPTION: Shows how to style the host element using CSS when not using Shadow DOM.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

----------------------------------------

TITLE: Example Telemetry Event Structure in JavaScript
DESCRIPTION: This snippet shows the structure of a typical telemetry event collected by Stencil CLI. It includes information about the build process, system specifications, and Stencil configuration.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: E2E Test with page.goto()
DESCRIPTION: Example test using page.goto() to load a pre-defined HTML template for testing.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // The path here is the path to the www output relative to the dev server root directory
    await page.goto('/components/my-component/test/my-component.e2e.html');

    // Rest of test
    const component = await page.locator('my-component');
    await expect(component).toHaveText(`Hello World! I'm Stencil`);
  });
});

----------------------------------------

TITLE: Importing Hydrate App in Node.js Server
DESCRIPTION: This code demonstrates how to import the hydrateDocument function from the generated hydrate app module in a Node.js server environment.

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Creating Playwright Configuration in TypeScript
DESCRIPTION: Demonstrates how to create a Playwright configuration using the createConfig function from the Stencil Playwright adapter. It shows how to override default settings and extend matchers.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

expect.extend(matchers);

export default createConfig({
  // Change which test files Playwright will execute
  testMatch: '*.spec.ts',

  webServer: {
    // Only wait max 30 seconds for server to start
    timeout: 30000,
  },
});

----------------------------------------

TITLE: Creating Playwright Configuration in TypeScript
DESCRIPTION: Demonstrates how to create a Playwright configuration using the createConfig function from the Stencil Playwright adapter. It shows how to override default settings and extend matchers.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

expect.extend(matchers);

export default createConfig({
  // Change which test files Playwright will execute
  testMatch: '*.spec.ts',

  webServer: {
    // Only wait max 30 seconds for server to start
    timeout: 30000,
  },
});

----------------------------------------

TITLE: Disabling Service Worker Generation
DESCRIPTION: Configuration example showing how to disable service worker generation in Stencil's build process.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Exporting Prerender Config Object
DESCRIPTION: Exports the prerender configuration object using the PrerenderConfig interface in the prerender.config.ts file.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Installing Ionic Framework Dependencies
DESCRIPTION: Command to install the Ionic Framework core package using npm or yarn

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Adding Vitest Script to package.json
DESCRIPTION: JSON snippet showing how to add a Vitest test script to the package.json file for running tests.

LANGUAGE: json
CODE:
{
    "scripts": {
        "test": "vitest --run"
    },
}

----------------------------------------

TITLE: Using Stencil Store in a Component
DESCRIPTION: Demonstration of using the store within a Stencil component. It shows how to access and update store values, as well as how to create a global counter component.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Enabling Strict Mode for README Generation in Stencil
DESCRIPTION: This snippet shows how to enable strict mode for README generation, which will output warnings for missing documentation, by configuring the 'docs-readme' output target in the Stencil configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      strict: true
    }
  ]
};

----------------------------------------

TITLE: Importing Auto-Defined Standalone Stencil Components
DESCRIPTION: This snippet shows how to import auto-defined standalone Stencil components using the 'dist-custom-elements' output target with 'customElementsExportBehavior' set to 'auto-define-custom-elements'.

LANGUAGE: typescript
CODE:
import 'my-design-system/my-component'

----------------------------------------

TITLE: Configuring docs-vscode Output Target in Stencil Config (TypeScript)
DESCRIPTION: This snippet shows how to add the 'docs-vscode' output target to the Stencil configuration file. It specifies the type and output file for generating custom element information for VS Code.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Exporting Generated Angular Component Wrappers
DESCRIPTION: Example of how to import and export the generated Angular component wrappers in the main Angular module file.

LANGUAGE: TypeScript
CODE:
import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Updating Stencil Core Package
DESCRIPTION: Command to update the @stencil/core package to the latest version using npm. The --save-exact flag ensures the exact version is saved in package.json.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Implementing an Advanced Form Component in Stencil
DESCRIPTION: This snippet showcases a more complex form implementation with multiple input types including email and select dropdowns. It demonstrates advanced state management, input validation, and dynamic option rendering.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Mocking Node Module Library in TypeScript
DESCRIPTION: Example of mocking a node_modules library (md5) by creating a mock implementation in the __mocks__ directory

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Subscribing to Push Notifications (TypeScript)
DESCRIPTION: Function to subscribe a user to push notifications using the browser's push service.

LANGUAGE: typescript
CODE:
async function subscribeUser() {
  if ('serviceWorker' in navigator) {
    const registration = await navigator.serviceWorker.ready;

    const subscription = await registration.pushManager
      .subscribe({ userVisibleOnly: true })
      .catch(console.error);

    if (!subscription) {
      return;
    }

    // the subscription object is what we want to send to our backend
    console.log(subscription.endpoint);
  }
}

----------------------------------------

TITLE: Building Stencil Component Library
DESCRIPTION: Command to build the Stencil component library and generate Angular component wrappers.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Configuring Copy Tasks for WWW Output Target
DESCRIPTION: This example demonstrates how to configure copy tasks for the 'www' output target in Stencil, copying an entire directory from 'src/images' to 'www/images'.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    copy: [
      { src: 'images' }
    ]
  }
]

----------------------------------------

TITLE: Keyboard Event Handling in Stencil
DESCRIPTION: Example of handling keyboard events using @Listen decorator with key detection.

LANGUAGE: tsx
CODE:
@Listen('keydown')
handleKeyDown(ev: KeyboardEvent){
  if (ev.key === 'ArrowDown'){
    console.log('down arrow pressed')
  }
}

----------------------------------------

TITLE: Implementing CSP Nonce Meta Tag for SSR
DESCRIPTION: Example of implementing CSP nonce through a meta tag for Server-Side Rendering (SSR) in Stencil. Shows the required meta tag structure that needs to be injected into the DOM head on each page request.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: Demonstrates how to use Build.isDev conditional to execute different code in development versus production environments. The example shows implementation within a Stencil component's lifecycle method componentDidLoad().

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Configuring www Output Target in Stencil
DESCRIPTION: This code snippet demonstrates how to configure the 'www' output target in Stencil's configuration. It's typically used in the stencil.config.ts file to specify build settings for web applications.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Example Stats JSON Output Structure (JSON)
DESCRIPTION: Provides a sample of the JSON data structure generated by the stats output, including compiler info, app details, and component data.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Project Structure Example
DESCRIPTION: Example directory structure for a monorepo containing Stencil and React libraries

LANGUAGE: text
CODE:
top-most-directory/
└── packages/
    ├── stencil-library/
    │   ├── stencil.config.js
    │   └── src/components/
    └── react-library/
        └── src/
            ├── components/
            └── index.ts

----------------------------------------

TITLE: Documenting CSS Variables in Stencil Components
DESCRIPTION: Illustrates how to document CSS variables in Stencil components using JSDoc-style comments.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Running WebdriverIO Tests
DESCRIPTION: Command to execute WebdriverIO tests after setup is complete.

LANGUAGE: bash
CODE:
npm run wdio

----------------------------------------

TITLE: Basic Ionic Component Usage
DESCRIPTION: Example of using an Ionic toggle component in an Ember template

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Handling User Input in Stencil Components
DESCRIPTION: Shows how to handle user input events like button clicks and input changes in Stencil components.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

LANGUAGE: tsx
CODE:
export class MyComponent {
  private inputChanged = (event: Event) => {
    console.log('input changed: ', (event.target as HTMLInputElement).value);
  }

  render() {
    return (
      <input onChange={this.inputChanged}/>
    );
  }
}

----------------------------------------

TITLE: Configuring Default Workbox Service Worker in Stencil
DESCRIPTION: Basic configuration pattern for service worker implementation using Workbox in a Stencil project.

LANGUAGE: typescript
CODE:
{
  globPatterns: [
    '**/*.{js,css,json,html}'
  ]
};

----------------------------------------

TITLE: Configuring docs-vscode Output Target in Stencil Config (TypeScript)
DESCRIPTION: This snippet shows how to add the 'docs-vscode' output target to the Stencil configuration file. It specifies the type and output file for generating custom element information for VS Code.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Handling Notification Clicks in Service Worker (JavaScript)
DESCRIPTION: Example of how to handle notification clicks in a Service Worker, including custom actions.

LANGUAGE: javascript
CODE:
self.addEventListener('notificationclick', event => {
  const notification = event.notification;
  const action = event.action;

  if (action === 'dismiss') {
    notification.close();
  } else {
    // This handles both notification click and 'details' action,
    // because some platforms might not support actions.
    clients.openWindow(notification.data.href);
    notification.close();
  }
});

----------------------------------------

TITLE: E2E Test Using waitForChanges()
DESCRIPTION: Demonstrates using waitForChanges() utility to handle component rehydration after state changes in Stencil components.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // Assume we have a template setup with the `my-component` component and a `button`
    await page.goto('/my-component/my-component.e2e.html');

    const button = page.locator('button');
    // Assume clicking the button changes the `@Prop()` values on `my-component`
    button.click();
    await page.waitForChanges();
  });
});

----------------------------------------

TITLE: Rollup Configuration for Custom Elements
DESCRIPTION: Example Rollup configuration for consuming custom elements, including asset copying.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Defining Web Worker Functions in Stencil
DESCRIPTION: Shows how to create a worker file in Stencil with exported functions that can be used asynchronously from the main thread.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Basic Component Declaration in Stencil
DESCRIPTION: Shows how to create a basic Stencil component using the @Component decorator with minimal configuration.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Enabling Strict Mode for README Generation
DESCRIPTION: Enable strict mode to receive warnings about missing documentation by adding strict: true to the output target configuration.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      strict: true
    }
  ]
};

----------------------------------------

TITLE: Test File with Inline Mock
DESCRIPTION: Alternative test implementation using an inline mock definition with Jest.mock().

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Using page.waitForChanges() in Stencil Playwright Tests
DESCRIPTION: Illustrates the usage of page.waitForChanges() method to wait for Stencil components to rehydrate after operations that trigger re-renders.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // Assume we have a template setup with the `my-component` component and a `button`
    await page.goto('/my-component/my-component.e2e.html');

    const button = page.locator('button');
    // Assume clicking the button changes the `@Prop()` values on `my-component`
    button.click();
    await page.waitForChanges();
  });
});

----------------------------------------

TITLE: Handling Service Worker Updates with Toast Notification
DESCRIPTION: Implementation of update notification system for service worker using toast messages and handling service worker lifecycle events.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Consuming Custom Elements in JavaScript
DESCRIPTION: This example demonstrates how to import and define a custom element generated by the dist-custom-elements output target.

LANGUAGE: javascript
CODE:
import { defineCustomElement } from 'my-library/dist/components/hello-world';

defineCustomElement(); // Same as manually calling: customElements.define('hello-world', HelloWorld);

----------------------------------------

TITLE: Example of Removed Legacy Context and Connect APIs
DESCRIPTION: Code snippet showing the deprecated usage of context and connect options within the @Prop decorator. These APIs have been removed in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
@Prop({ context: 'config' }) config: Config;
@Prop({ connect: 'ion-menu-controller' }) lazyMenuCtrl: Lazy<MenuController>;

----------------------------------------

TITLE: Initializing Stencil Dev Server with TypeScript
DESCRIPTION: Function signature for starting the Stencil development server. Takes a configuration object, logger instance, and optional compiler watcher as parameters. Returns a Promise that resolves to a DevServer instance.

LANGUAGE: tsx
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Handling Notification Clicks in Service Worker (JavaScript)
DESCRIPTION: Example of how to handle notification clicks in a Service Worker, including custom actions.

LANGUAGE: javascript
CODE:
self.addEventListener('notificationclick', event => {
  const notification = event.notification;
  const action = event.action;

  if (action === 'dismiss') {
    notification.close();
  } else {
    // This handles both notification click and 'details' action,
    // because some platforms might not support actions.
    clients.openWindow(notification.data.href);
    notification.close();
  }
});

----------------------------------------

TITLE: Configuring Hydrate App Output Target in Stencil
DESCRIPTION: Add the 'dist-hydrate-script' output target to the Stencil configuration file to generate the hydrate app.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: WebdriverIO Configuration for Visual Testing
DESCRIPTION: Configuration snippet showing how to set up the visual service in the WebdriverIO configuration file.

LANGUAGE: typescript
CODE:
https://github.com/webdriverio/component-testing-examples/blob/2de295ab568b5163e67d716156221578b6536d9d/stencil-component-starter/wdio.conf.ts#L119-L126)

----------------------------------------

TITLE: Basic Form Implementation in Stencil
DESCRIPTION: Demonstrates a simple form component with a text input field and submit button. Shows how to handle form submission and input changes using Stencil's component architecture and state management.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Importing Global Styles in HTML
DESCRIPTION: Shows how to import the generated global styles file in the index.html of the application.

LANGUAGE: html
CODE:
<link rel="stylesheet" href="/build/app.css" />

----------------------------------------

TITLE: Documenting Component Properties
DESCRIPTION: Example showing how to document component properties using @Prop decorator and JSDoc comments.

LANGUAGE: ts
CODE:
export class MyComponent {
  /**
   * The first name
   */
  @Prop() first!: string;
  /**
   * @deprecated since v2.1.0
   */
  @Prop() middle: string;
  @Prop() lastName = "Smith";
}

----------------------------------------

TITLE: Invalid Component Module Export in TypeScript
DESCRIPTION: This example demonstrates an invalid component module export, where additional functions are exported alongside the component class. This is not allowed in Stencil for efficient bundling.

LANGUAGE: typescript
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Example Stats JSON Output for Stencil Project
DESCRIPTION: Provides a comprehensive example of the JSON data structure generated by the stats output. Includes compiler info, app details, build options, component data, and dependency graphs.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Correct Component Organization Pattern
DESCRIPTION: Demonstration of proper component organization by separating utility functions into separate files and importing them where needed.

LANGUAGE: tsx
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: OptimizeCss Function Signature
DESCRIPTION: Function signature for optimizing CSS using the Stencil compiler.

LANGUAGE: tsx
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Starting Stencil Dev Server in TypeScript
DESCRIPTION: The start() function initializes the Stencil Dev Server. It takes a StencilDevServerConfig object, a Logger instance, and an optional CompilerWatcher as parameters. The function returns a Promise that resolves to a DevServer instance.

LANGUAGE: typescript
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Using Callback-based Web Worker Functions in a Stencil Component
DESCRIPTION: Shows how to use a Web Worker function with callback-based progress updates within a Stencil component, demonstrating the integration of advanced worker patterns.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { countDown } from '../countdown.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    const startNum = 5;
    console.log('start', startNum);

    countDown(startNum, (p) => {
      console.log('progress', p);
    }).then(result => {
      console.log('finish', result);
    });
  }
}

----------------------------------------

TITLE: Rendering Dynamic Data in Stencil Components
DESCRIPTION: This snippet demonstrates how to fetch and render dynamic data in a Stencil component using async/await in the componentWillLoad lifecycle method.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Using Ionic Components in Ember Templates
DESCRIPTION: Example of using an Ionic component (ion-toggle) in an Ember component template.

LANGUAGE: js
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Component Hierarchy Example - Stencil Markup
DESCRIPTION: Shows the component hierarchy and the order of lifecycle method execution among parent and child components.

LANGUAGE: markup
CODE:
  <cmp-a>
    <cmp-b>
      <cmp-c></cmp-c>
    </cmp-b>
  </cmp-a>

----------------------------------------

TITLE: Basic Method Decorator Usage in Stencil
DESCRIPTION: Demonstrates how to use the @Method() decorator to create a public method in a Stencil component. Shows basic implementation of an async method that can be called from outside the component.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Configuring Playwright for Stencil Projects
DESCRIPTION: TypeScript configuration file for Playwright in a Stencil project, extending custom matchers and creating a default config.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

// Add custom Stencil matchers to Playwright assertions
expect.extend(matchers);

export default createConfig({
  // Overwrite Playwright config options here
});

----------------------------------------

TITLE: Optimizing JavaScript with Stencil Core Compiler
DESCRIPTION: Displays the function signature for optimizeJs(), a utility function used by the compiler to optimize JavaScript based on the target environment.

LANGUAGE: javascript
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Importing Specific Stencil Components
DESCRIPTION: JavaScript examples of importing all components or a specific component from a Stencil library using the 'dist-custom-elements' output target.

LANGUAGE: javascript
CODE:
// this import loads all compiled components
import { MyComponent } from 'my-design-system'
// only import compiled code for MyComponent
import { MyComponent } from 'my-design-system/my-component'

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config
DESCRIPTION: This snippet demonstrates how to configure the stats output target in the stencil.config.ts file. It allows automatic generation of stats data with every build.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Defining Custom Elements Usage Example
DESCRIPTION: Example showing how to import and define a custom element from the generated output

LANGUAGE: typescript
CODE:
import { HelloWorld } from 'my-library/dist/components/hello-world';

customElements.define('hello-world', HelloWorld);

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript interface definition for CopyTask, which is used to configure file copy operations in Stencil's output targets.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Form-Associated Custom Element in Stencil
DESCRIPTION: Shows how to create a form-associated custom element that integrates natively with HTML forms. Uses ElementInternals for form integration and value management.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css',
  formAssociated: true
})
export class MyName {
  @State() value: string;
  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.internals.setFormValue(event.target.value);
  }

  render() {
    return (
      <label>
        Name:
        <input
          type="text"
          value={this.value}
          onInput={(event) => this.handleChange(event)}
        />
      </label>
    );
  }
}

----------------------------------------

TITLE: Running Stencil CLI with Options
DESCRIPTION: Executes the Stencil CLI with given options. This function is used by the default 'bin/stencil' file but can also be used externally for custom implementations.

LANGUAGE: typescript
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Functional Component with Children in Stencil
DESCRIPTION: Illustrates how to create a functional component that accepts and renders child elements.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Component Composition Example
DESCRIPTION: Demonstrates how to embed and nest Stencil components within each other using JSX syntax.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Demonstrating Proper HTML Tag Naming for Stencil Components
DESCRIPTION: This snippet demonstrates the correct way to name HTML tags for Stencil components, using a prefix to avoid collisions and following naming conventions for components and modifiers.

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

----------------------------------------

TITLE: Extras Configuration Properties
DESCRIPTION: Configuration options that can be set in the Stencil config file to enable various experimental features and polyfills.

LANGUAGE: typescript
CODE:
{
  extras: {
    appendChildSlotFix: boolean,
    cloneNodeFix: boolean,
    enableImportInjection: boolean,
    experimentalImportInjection: boolean,
    experimentalScopedSlotChanges: boolean,
    experimentalSlotFixes: boolean,
    lifecycleDOMEvents: boolean,
    scopedSlotTextContentFix: boolean,
    scriptDataOpts: boolean,
    slotChildNodesFix: boolean
  }
}

----------------------------------------

TITLE: Creating Vue Plugin for Custom Elements
DESCRIPTION: Vue plugin to register custom elements for lazy-loaded components.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Component Asset Configuration with assetsDirs
DESCRIPTION: Example of configuring a Stencil component to use assets with the assetsDirs option and getAssetPath.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Importing Hydrate Functions in Node.js
DESCRIPTION: Example of importing the hydrateDocument function from a published package

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Using Vue component wrappers in a Vue app
DESCRIPTION: Example of how to use the Vue component wrappers in a Vue application.

LANGUAGE: javascript
CODE:
// src/main.js
import { ComponentLibrary } from 'vue-library';

createApp(App).use(ComponentLibrary).mount('#app');

----------------------------------------

TITLE: Building Stencil Project with README Generation
DESCRIPTION: These commands demonstrate how to build a Stencil project and generate README files. The first command performs a one-time build, while the second watches for changes and updates README files automatically.

LANGUAGE: bash
CODE:
npx stencil build

LANGUAGE: bash
CODE:
npm stencil build --watch

----------------------------------------

TITLE: Rendering Basic JSX in Stencil Component
DESCRIPTION: Demonstrates how to use the render function to output a tree of components using JSX syntax in a Stencil component.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Customizing README Footer in Stencil Configuration
DESCRIPTION: Add a custom footer to generated README files by specifying the footer property in the output target configuration.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Stencil Project Structure Example
DESCRIPTION: Shows the typical file structure for a Stencil project with end-to-end testing setup.

LANGUAGE: tree
CODE:
stencil-project-root
└── src
    └── components
        ├── my.component.tsx
        └── test <-- directory containing test files
            ├── my-component.e2e.ts
            └── my-component.e2e.html

----------------------------------------

TITLE: Reflecting Prop Values to Attributes
DESCRIPTION: Shows how to reflect prop values to attributes in the DOM.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop({ reflect: false }) isComplete: boolean = false;
    @Prop({ reflect: true }) timesCompletedInPast: number = 2;
    @Prop({ reflect: true }) thingToDo: string = "Read Reflect Section of Stencil Docs";
}

----------------------------------------

TITLE: Using Form-Associated Custom Element in HTML
DESCRIPTION: Demonstrates how to use a form-associated custom element within an HTML form.

LANGUAGE: html
CODE:
<form>
  <custom-text-input name="my-custom-input"></custom-text-input>
</form>

----------------------------------------

TITLE: Advanced Screenshot Testing with Stencil Components
DESCRIPTION: Comprehensive example demonstrating advanced visual regression testing with global styles, pixel comparison, and ratio-based matching

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    // In order to test against any global styles you may have, don't forget to set the link to the global css. You don't have to do this if your stencil.config.ts file doesn't build a global css file with globalStyle.
    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    // To start comparing the visual result, you first must run page.compareScreenshot; This will capture a screenshot, and save the file to "/screenshot/images". You'll be able to check that into your repo to provide those results to your team. You can only have one of these commands per test. 
    const results = await page.compareScreenshot();

    // Finally, we can test against the previous screenshots. 
    // Test against hard pixels
    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    // Test against the percentage of changes. if 'allowableMismatchedRatio' is above 20% changed, 
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Host Component as Fragment Example
DESCRIPTION: Shows how to use Host component to render multiple elements at the root level of a component.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Example Telemetry Data Structure in JavaScript
DESCRIPTION: Shows the structure of anonymous telemetry data collected by Stencil CLI, including build information, system details, and usage metrics. The data includes command details, version information, output targets, and general machine information.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Form Association Callback Implementation
DESCRIPTION: Implementation of formAssociatedCallback to handle form association events.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true,
})
export class FormAssociatedCmp {
  @AttachInternals()
  internals: ElementInternals;

  formAssociatedCallback(form) {
    form.ariaLabel = 'formAssociated called';
  }

  render() {
    return <input type="text" />;
  }
}

----------------------------------------

TITLE: Updating TSConfig for Playwright
DESCRIPTION: TypeScript configuration update to include ESNext.Disposable in lib array to support Symbol.asyncDispose.

LANGUAGE: typescript
CODE:
{
  lib: [
    ...,
    "ESNext.Disposable"
  ],
  ...
}

----------------------------------------

TITLE: Comprehensive E2E Test for Ion-Toggle Component
DESCRIPTION: Shows a more complex E2E test scenario, including setting page content, spying on events, finding elements, setting properties, and making assertions on component state and behavior.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: CSS Imports for a Stencil Component
DESCRIPTION: This CSS snippet shows how multiple CSS files are imported for a Stencil component. It demonstrates potential performance issues with SSR due to style duplication.

LANGUAGE: css
CODE:
/* button.css */
@import "../css/base.css";
@import "../css/tokens.css";
@import "../css/animations.css";
@import "../css/utilities.css";

/* component-specific styles */
button {
    ...
}

----------------------------------------

TITLE: Running Static Build in Stencil
DESCRIPTION: This command runs a static build in Stencil using the --prerender flag to enable prerendering of components.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Writing a Vitest Test for a Stencil Component
DESCRIPTION: This test demonstrates how to render a Stencil component in the browser and assert its content using Vitest.

LANGUAGE: typescript
CODE:
import { expect, test } from 'vitest'

import '../src/components/my-component/my-component.js'

test('should render component correctly', async () => {
    const cmp = document.createElement('my-component')
    cmp.setAttribute('first', 'Stencil')
    cmp.setAttribute('last', `'Don't call me a framework' JS`)
    document.body.appendChild(cmp)

    await new Promise((resolve) => requestIdleCallback(resolve))
    expect(cmp.shadowRoot?.querySelector('div')?.innerText)
        .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)
})

----------------------------------------

TITLE: Example Stats Output Structure (JSON)
DESCRIPTION: Comprehensive example of the JSON structure generated by the stats feature, including compiler info, app details, component metadata, and dependency graphs.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js"
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js"
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        }
      ]
    }
  ]
}

----------------------------------------

TITLE: Initializing Stencil Project using CLI
DESCRIPTION: Command to create a new Stencil project using the create-stencil CLI tool.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Documenting @Prop() Usage in Stencil
DESCRIPTION: Example of documenting properties in a Stencil component using @Prop() decorator and JSDoc comments.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * The first name
   */
  @Prop() first!: string; // the '!' denotes a required property
  /**
   * @deprecated since v2.1.0
   */
  @Prop() middle: string;
  @Prop() lastName = "Smith";

  // ...
}

----------------------------------------

TITLE: Importing Stencil Components in TypeScript
DESCRIPTION: Example of importing a Stencil component library in a TypeScript application.

LANGUAGE: typescript
CODE:
import 'my-design-system';

----------------------------------------

TITLE: Basic Screenshot Comparison Test in Stencil
DESCRIPTION: Simple example showing how to set up a basic screenshot comparison test using Puppeteer with Stencil's E2E testing framework.

LANGUAGE: javascript
CODE:
  it('render something', async () => {
    const page: E2EPage = await newE2EPage();
    await page.setContent('<my-cmp></my-cmp>');
    await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
  });

----------------------------------------

TITLE: Node Polyfills Configuration
DESCRIPTION: Configuration example for adding Node.js polyfills to Stencil project using rollup-plugin-node-polyfills.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Optimizing CSS in Stencil
DESCRIPTION: Displays the function signature for optimizing CSS, which is a utility function used by the compiler.

LANGUAGE: typescript
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Importing and Initializing Stencil Components in ESM Context
DESCRIPTION: This code demonstrates how to import and initialize Stencil components in an ESM context using the generated loader. It includes setting a nonce for CSP, applying polyfills, and defining custom elements.

LANGUAGE: ts
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Using Stencil Component with String Props
DESCRIPTION: Demonstrates how to use a Stencil component with string representations of object and array props in HTML.

LANGUAGE: html
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Using Stencil Component in HTML
DESCRIPTION: Example of how to use a Stencil component in HTML markup after compilation.

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Node Polyfills Configuration in Stencil
DESCRIPTION: Configuration example for adding Node.js polyfills support in Stencil using rollup-plugin-node-polyfills.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Implementing Auto-updating State with Lifecycle Methods
DESCRIPTION: Shows how to use @State() with component lifecycle methods to create an auto-updating time display.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;
    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Basic Component Testing with newSpecPage in TypeScript
DESCRIPTION: Demonstrates how to test a Stencil component using newSpecPage() with HTML initialization. The test verifies that the component renders with expected content.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Configuring webpack for Custom Elements Bundle
DESCRIPTION: This webpack configuration example demonstrates how to set up a project to consume a custom elements bundle. It includes rules for CSS processing and a plugin to copy assets from the library to the distribution folder.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Handling Push Events in Service Worker
DESCRIPTION: Service Worker code to handle incoming push events and display notifications to the user.

LANGUAGE: javascript
CODE:
self.addEventListener('push', event => {
  console.log(`Push received with data "${event.data.text()}"`);

  const title = 'Push Notification';
  const options = {
    body: `${event.data.text()}`,
    data: { href: '/users/donald' },
    actions: [
      { action: 'details', title: 'Details' },
      { action: 'dismiss', title: 'Dismiss' },
    ],
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Build Conditionals in a Stencil component. It imports the Build object from @stencil/core and uses the isDev property to conditionally execute code based on the build environment.

LANGUAGE: typescript
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Screenshot Connector Interface Definition
DESCRIPTION: TypeScript interface defining the core methods available in the screenshot connector system.

LANGUAGE: tsx
CODE:
export interface ScreenshotConnector {
  initBuild(opts: ScreenshotConnectorOptions): Promise<void>;

  pullMasterBuild(): Promise<void>;

  getMasterBuild(): Promise<ScreenshotBuild>;

  getScreenshotCache(): Promise<ScreenshotCache>;

  completeBuild(masterBuild: ScreenshotBuild): Promise<ScreenshotBuildResults>;
  
  publishBuild(buildResults: ScreenshotBuildResults): Promise<ScreenshotBuildResults>;

  updateScreenshotCache(screenshotCache: ScreenshotCache, buildResults: ScreenshotBuildResults): Promise<ScreenshotCache>;

  generateJsonpDataUris(build: ScreenshotBuild): Promise<void>;
}

----------------------------------------

TITLE: Example Stats Output Structure (JSON)
DESCRIPTION: Comprehensive example of the JSON structure generated by the stats feature, including compiler info, app details, component metadata, and dependency graphs.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js"
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js"
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        }
      ]
    }
  ]
}

----------------------------------------

TITLE: Creating a Controlled Ionic Component in Ember
DESCRIPTION: Example of creating a controlled component pattern with an Ionic toggle in an Ember component, demonstrating state management and event handling.

LANGUAGE: js
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil
DESCRIPTION: Add the docs-readme output target to your Stencil configuration file to enable README generation.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config (TSX)
DESCRIPTION: Shows how to add the stats output target to the Stencil configuration file (stencil.config.ts) for automatic generation of the JSON documentation with every build.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Configuring Stencil Test Patterns
DESCRIPTION: Stencil configuration to set test file patterns using testRegex property

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // ...
  testing: {
    testRegex: '(/__tests__/.*|\.?(spec))\\.(ts|js)$',
  },
};

----------------------------------------

TITLE: Configuring Service Worker in Stencil
DESCRIPTION: Example of configuring the service worker in a Stencil project's config file. It demonstrates how to customize the globPatterns for asset caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Basic E2E Test Structure in Stencil
DESCRIPTION: Demonstrates the basic structure of an E2E test in Stencil, including importing the newE2EPage function, setting up a test case, and checking for component rendering.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Prerender Config with Hydrate Options
DESCRIPTION: Example of implementing the hydrateOptions hook in the prerender config to customize HTML output settings per page.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Importing Hydrate Functions in JavaScript
DESCRIPTION: Example of importing the hydrateDocument function from a published package

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Parsing Command-line Flags for Stencil CLI in TypeScript
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object for use in the Stencil CLI. It takes an array of strings as input, typically obtained from process.argv.slice(2).

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Stencil Configuration for E2E Testing
DESCRIPTION: Configuration setup in stencil.config.ts for handling end-to-end test files.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'test-app',
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null,
      copy: [{ src: '**/test/*.html' }, { src: '**/test/*.css' }],
    },
  ],
};

----------------------------------------

TITLE: Configuring package.json for Stencil Component Library Distribution
DESCRIPTION: This snippet demonstrates a common setup for the package.json file in a Stencil project, including entry points for different module formats, type definitions, and file inclusion for npm releases. It specifies various properties used by bundlers and CDNs to locate and utilize the project's files.

LANGUAGE: json
CODE:
{
  "main": "dist/index.cjs.js",
  "module": "dist/index.js",
  "es2015": "dist/esm/index.mjs",
  "es2017": "dist/esm/index.mjs",
  "types": "dist/types/components.d.ts",
  "unpkg": "dist/my-project-name/my-project-name.esm.js",
  "collection:main": "dist/collection/index.js",
  "collection": "dist/collection/collection-manifest.json",
  "files": [
    "dist/",
    "css/",
    "loader/"
  ]
}

----------------------------------------

TITLE: Importing and Initializing Stencil Components
DESCRIPTION: Example showing how to import and initialize Stencil components in an application, including setting nonce for security and applying polyfills.

LANGUAGE: typescript
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Defining Web Worker Functions in TypeScript with Stencil
DESCRIPTION: Shows how to create a TypeScript file for Web Worker functions in Stencil, which will be automatically processed by the Stencil compiler.

LANGUAGE: typescript
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Configuring Page-Specific Hydrate Options
DESCRIPTION: Example of implementing the hydrateOptions hook in prerender.config.ts to set specific options for each prerendered page.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Basic Prerender Config Structure
DESCRIPTION: Basic structure for the prerender configuration file showing the required imports and config object export.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Environment Configuration Example
DESCRIPTION: Example showing how to configure environment variables in Stencil config and use them in components.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  env: {
    API_BASE_URL: process.env.API_BASE_URL
  }
}

LANGUAGE: typescript
CODE:
import { Component, h, Env, Host } from '@stencil/core';

@Component({
  tag: 'api-component',
})
export class APIComponent {
  async connectedCallback () {
    const res = await fetch(Env.API_BASE_URL)
    // ...
  }
}

----------------------------------------

TITLE: Configuring Playwright for Stencil
DESCRIPTION: TypeScript configuration for Playwright in a Stencil project, including custom matchers and default config creation.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

// Add custom Stencil matchers to Playwright assertions
expect.extend(matchers);

export default createConfig({
  // Overwrite Playwright config options here
});

----------------------------------------

TITLE: Subscribing to Push Notifications in Stencil
DESCRIPTION: Function to subscribe a user to push notifications in a Stencil application, using the Push API.

LANGUAGE: typescript
CODE:
async function subscribeUser() {
  if ('serviceWorker' in navigator) {
    const registration = await navigator.serviceWorker.ready;

    const subscription = await registration.pushManager
      .subscribe({ userVisibleOnly: true })
      .catch(console.error);

    if (!subscription) {
      return;
    }

    // the subscription object is what we want to send to our backend
    console.log(subscription.endpoint);
  }
}

----------------------------------------

TITLE: Creating a Vue Component Library
DESCRIPTION: Commands to create a Vue component library for wrapping Stencil components.

LANGUAGE: bash
CODE:
# From your top-most-directory/
lerna create vue-library
# Follow the prompts and confirm
cd packages/vue-library
# Install Vue dependency
npm install vue@3 --save-dev

----------------------------------------

TITLE: Fetching Dynamic Data in Component Lifecycle
DESCRIPTION: Example of fetching and rendering dynamic data using async/await in componentWillLoad lifecycle method.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Visual Testing Component Example
DESCRIPTION: Example test case showing how to implement visual testing for a Stencil component using the toMatchElementSnapshot matcher.

LANGUAGE: typescript
CODE:
https://github.com/webdriverio/component-testing-examples/blob/2de295ab568b5163e67d716156221578b6536d9d/stencil-component-starter/src/components/my-component/my-component.test.tsx#L20-L28

----------------------------------------

TITLE: Visual Testing Component Example
DESCRIPTION: Example test case showing how to implement visual testing for a Stencil component using the toMatchElementSnapshot matcher.

LANGUAGE: typescript
CODE:
https://github.com/webdriverio/component-testing-examples/blob/2de295ab568b5163e67d716156221578b6536d9d/stencil-component-starter/src/components/my-component/my-component.test.tsx#L20-L28

----------------------------------------

TITLE: Styling Host Element in Stencil Components
DESCRIPTION: Explains how to style the host element in Stencil components using CSS. It covers both regular and Shadow DOM scenarios, showing the difference in selectors used.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Implementing Utility Helper in TypeScript
DESCRIPTION: Definition of a utility helper function that generates random integers within a specified range.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Defining a Stencil Component in TypeScript
DESCRIPTION: This snippet shows the structure of a basic Stencil component named 'my-component'. It demonstrates how to define properties and render content using JSX.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() last: string;

  render() {
    return <div>Hello, World! I'm {this.first} {this.last}</div>;
  }
}

----------------------------------------

TITLE: ScreenshotConnector Interface Definition
DESCRIPTION: Interface definition showing available methods that can be overridden in a custom screenshot connector implementation.

LANGUAGE: tsx
CODE:
https://github.com/ionic-team/stencil/blob/a2e119d059ba0d0fa6155dbd3d82c17612630828/src/declarations/stencil-private.ts#L1631-L1645

----------------------------------------

TITLE: Example Telemetry Event in JavaScript
DESCRIPTION: This snippet shows the structure of a typical telemetry event collected by Stencil. It includes information about the Stencil version, command used, system details, and other non-sensitive data.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Data Flow Between Components
DESCRIPTION: Demonstrates proper data flow from parent to child components using props

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
})
export class TodoList {
  render() {
    return (
      <div>
        <h1>To-Do List Name: Stencil To Do List</h1>
        <ul>
           <todo-list-item thingToDo={"Learn about Stencil Props"}></todo-list-item>
           <todo-list-item thingToDo={"Write some Stencil Code with Props"}></todo-list-item>
           <todo-list-item thingToDo={"Dance Party"}></todo-list-item>
        </ul>
      </div>
    )
  }
}

----------------------------------------

TITLE: Using Stencil Components with Props in TSX and HTML
DESCRIPTION: Demonstrates how to use a Stencil component with props in both TSX and HTML contexts, showing the slight differences in syntax.

LANGUAGE: tsx
CODE:
<todo-list name={"Tuesday's To-Do List"}></todo-list>

LANGUAGE: html
CODE:
<todo-list name="Tuesday's To-Do List"></todo-list>

----------------------------------------

TITLE: Using hydrateDocument Function for Server-Side Rendering
DESCRIPTION: This example shows how to use the hydrateDocument function in a server's response logic. It takes a document object and returns a promise with hydrated results, including the hydrated HTML.

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

export function hydrateComponents(doc) {
  return hydrateDocument(doc)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Configuring Stencil Output Target for VS Code Integration
DESCRIPTION: Configuration code for enabling the docs-vscode output target in Stencil config. This generates a JSON file containing custom element information that VS Code can use for enhanced IDE features.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Node Polyfills Configuration
DESCRIPTION: Configuration example showing how to set up rollup-plugin-node-polyfills in Stencil config to handle Node.js API dependencies.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Using Stencil Component in HTML
DESCRIPTION: Example of how to use a Stencil component in HTML markup

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Using setAssetPath in HTML
DESCRIPTION: Demonstrates how to use the setAssetPath API in an HTML file to set the asset base path for Stencil components.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Worker with Callback Progress
DESCRIPTION: Implementation of a Web Worker that uses callbacks to report progress during long-running tasks.

LANGUAGE: tsx
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

----------------------------------------

TITLE: Disabling Service Worker in Stencil Config (TypeScript)
DESCRIPTION: Shows how to disable the Service Worker generation in a Stencil project by setting the serviceWorker property to null in the config.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Creating a Vue plugin for custom elements
DESCRIPTION: Code for creating a Vue plugin to register custom elements for lazy-loaded components.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Creating Stencil Component Library
DESCRIPTION: Commands to create and set up a Stencil component library.

LANGUAGE: bash
CODE:
cd packages/
npm init stencil components stencil-library
cd stencil-library
# Install dependencies
npm install

----------------------------------------

TITLE: Initializing Monorepo with Lerna and TypeScript
DESCRIPTION: Commands to set up a monorepo structure with Lerna and configure TypeScript dependencies.

LANGUAGE: bash
CODE:
npm install --global lerna
lerna init
npm install
npm install typescript @types/node --save-dev

----------------------------------------

TITLE: Host Component as Fragment Example
DESCRIPTION: Shows how to use Host component to render multiple elements at the root level of a component.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config
DESCRIPTION: Demonstrates how to configure the stats output target in stencil.config.ts for automatic stats generation during builds.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Styling CSS Parts from Light DOM
DESCRIPTION: Demonstrates how to style CSS parts defined in a Stencil component from the light DOM.

LANGUAGE: css
CODE:
shadow-card::part(heading) {
  text-transform: uppercase;
}

----------------------------------------

TITLE: Configuring VS Code Launch Settings for SSG Debugging
DESCRIPTION: Launch configuration for debugging Stencil's Static Site Generation process using Node.js. Configures the prerender command with specific arguments for debugging.

LANGUAGE: json
CODE:
{
  "type": "node",
  "request": "launch",
  "name": "Prerender",
  "args": [
    "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
    "prerender",
    "${workspaceFolder}/dist/hydrate/index.js",
    "--max-workers=0",
    "--config=${workspaceFolder}/stencil.config.ts"
  ],
  "protocol": "inspector"
}

----------------------------------------

TITLE: Adding Vue Output Target to Stencil config
DESCRIPTION: Configuration for adding the Vue output target to the Stencil project's config file.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Setting Component Props in E2E Tests
DESCRIPTION: Demonstrates how to set properties on a component during an E2E test using page.$eval, including handling of external references for prop values.

LANGUAGE: typescript
CODE:
const props = {
  first: 'Marty',
  lastName: 'McFly',
};

await page.setContent(`<prop-cmp></prop-cmp>`);

await page.$eval('prop-cmp',
  (elm: any, { first, lastName }) => {
    elm.first = first;
    elm.lastName = lastName;
  },
  props 
);

await page.waitForChanges();

----------------------------------------

TITLE: Adding Vue Output Target to Stencil config
DESCRIPTION: Configuration for adding the Vue output target to the Stencil project's config file.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Documenting Stencil @Method Decorators
DESCRIPTION: Example of how @Method decorators are documented in the generated README, including method signature, parameters, and return type.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * Scroll by a specified X/Y distance in the component.
   *
   * @param x The amount to scroll by on the horizontal axis.
   * @param y The amount to scroll by on the vertical axis.
   * @param duration The amount of time to take scrolling by that amount.
   * @returns the total distance travelled
   */
  @Method()
  async scrollByPoint(x: number, y: number, duration: number): Promise<number> { /* omitted */ }

  // ...
}

----------------------------------------

TITLE: Default Values for Props in Stencil
DESCRIPTION: This snippet demonstrates how to set default values for props in Stencil components.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'component-with-some-props',
})
export class ComponentWithSomeProps {
    @Prop() aNumber = 42;
    @Prop() aString = 'defaultValue';

    render() {
        return <div>The number is {this.aNumber} and the string is {this.aString}</div>
    }
}

----------------------------------------

TITLE: Package.json Exports Configuration
DESCRIPTION: Configuration for package.json to specify component export paths and types.

LANGUAGE: json
CODE:
{
  "exports": {
    ".": {
      "import": "./dist/components/index.js",
      "types": "./dist/components/index.d.ts"
    },
    "./my-component": {
      "import": "./dist/components/my-component.js",
      "types": "./dist/components/my-component.d.ts"
    }
  },
  "types": "dist/components/index.d.ts"
}

----------------------------------------

TITLE: Data Binding in Stencil JSX
DESCRIPTION: Shows how to bind dynamic data in JSX using curly braces syntax and compares it with ES6 template literals.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

LANGUAGE: tsx
CODE:
//ES6
`Hello ${this.name}`

//JSX
Hello {this.name}

----------------------------------------

TITLE: Configuring Angular Output Target
DESCRIPTION: TypeScript code showing how to configure the Angular output target in the Stencil config file.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Using Stencil Components in Angular Templates
DESCRIPTION: Use Stencil components directly in Angular component templates with Angular's template binding syntax.

LANGUAGE: html
CODE:
<!-- app.component.html -->

<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Webpack Configuration for Custom Elements
DESCRIPTION: Example webpack configuration for consuming custom elements, including asset copying setup.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Functional Component with Children in Stencil
DESCRIPTION: Illustrates how to create a functional component that accepts and renders child elements.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Parsing Command-line Arguments for Stencil CLI
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object. It takes an array of strings as input, typically process.argv.slice(2).

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Component Tag Naming Examples
DESCRIPTION: Shows incorrect and correct approaches to naming component tags, emphasizing the importance of proper prefixing and avoiding 'stencil' namespace.

LANGUAGE: markup
CODE:
<stencil-component>
<stnl-component>

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

----------------------------------------

TITLE: Standalone Component Usage in TypeScript
DESCRIPTION: Example of importing and registering standalone components with custom element definition

LANGUAGE: typescript
CODE:
import { MyComponent, defineCustomElementMyComponent } from 'my-design-system'

// register to CustomElementRegistry
defineCustomElementMyComponent()

// or extend custom element via
class MyCustomComponent extends MyComponent {
  // ...
}
define('my-custom-component', MyCustomComponent)

----------------------------------------

TITLE: Project Setup Commands
DESCRIPTION: Series of commands to initialize and start a new Stencil project after creation.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Parsing Command Line Flags in Stencil
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object. Takes an array of string arguments and returns a structured configuration object.

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Configuring Hydrate App Output Target in Stencil
DESCRIPTION: Configuration example showing how to add the dist-hydrate-script output target to stencil.config.ts

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: VS Code Settings Configuration for Custom Elements
DESCRIPTION: JSON configuration for VS Code settings to enable custom element support. This setting tells VS Code where to find the generated custom elements documentation file.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Configuring TypeScript Path Aliases
DESCRIPTION: Example of configuring path aliases in tsconfig.json for TypeScript projects.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Loading Stencil Configuration
DESCRIPTION: Shows the function signature for loading and transforming raw config information into a usable config object for the compiler and dev-server.

LANGUAGE: typescript
CODE:
loadConfig(init?: LoadConfigInit): Promise<LoadConfigResults>

----------------------------------------

TITLE: Enabling Shadow DOM in Stencil Component
DESCRIPTION: Demonstrates how to enable Shadow DOM for a Stencil component by setting the 'shadow' option to true in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config
DESCRIPTION: Example showing how to configure the stats output target in stencil.config.ts to automatically generate stats with every build.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Component Data Flow Example
DESCRIPTION: Shows how data flows from parent to child components using props

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
})
export class TodoList {
  render() {
    return (
      <div>
        <h1>To-Do List Name: Stencil To Do List</h1>
        <ul>
           <todo-list-item thingToDo={"Learn about Stencil Props"}></todo-list-item>
           <todo-list-item thingToDo={"Write some Stencil Code with Props"}></todo-list-item>
           <todo-list-item thingToDo={"Dance Party"}></todo-list-item>
        </ul>
      </div>
    )
  }
}

----------------------------------------

TITLE: Documenting Component Properties in Stencil
DESCRIPTION: This snippet demonstrates how to add a description to a @Prop in Stencil using a JSDocs-style comment. The comment is placed on the line preceding the property declaration.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Configuring Static Build in Stencil
DESCRIPTION: Command to enable prerendering during Stencil build process using the --prerender flag.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Demonstrating Component Lifecycle Methods in TypeScript
DESCRIPTION: This snippet shows how connectedCallback and componentWillLoad are called when a component is added to the DOM. It illustrates that connectedCallback can be called multiple times, while componentWillLoad is only called once.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Using Fragment in JSX with TypeScript
DESCRIPTION: Demonstrates the use of Fragment, a functional component that allows grouping elements without a wrapper node. This example shows how to use the shorthand syntax '<>...</>' in a Stencil component's render method.

LANGUAGE: typescript
CODE:
import { Component, Fragment } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Example Telemetry Event Structure in JavaScript
DESCRIPTION: This snippet shows the structure of a typical telemetry event collected by Stencil. It includes information about the Stencil version, command used, system details, and project configuration.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: AddClass Functional Component Example
DESCRIPTION: Advanced example showing how to manipulate children elements using utility functions.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Setting CSP Nonce in Stencil Dist Output
DESCRIPTION: Example showing how to set a nonce value for all script and style tags when using the dist output target in an Angular application's entrypoint.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Configuring Stencil WWW Output Target for Playwright
DESCRIPTION: Updates the Stencil config to include a copy option in the www output target, necessary for serving test files.

LANGUAGE: typescript
CODE:
{
   type: 'www',
   serviceWorker: null,
   copy: [{ src: '**/*.html' }, { src: '**/*.css' }]
}

----------------------------------------

TITLE: Creating a Worker Pool in Stencil (TypeScript)
DESCRIPTION: Shows how to create multiple Worker instances manually using the workerPath provided by Stencil.

LANGUAGE: typescript
CODE:
import { workerPath } from '../../stuff.worker.ts?worker';

const workerPool = [
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
];

----------------------------------------

TITLE: Implementing CSP Nonce in Stencil Custom Elements
DESCRIPTION: Example demonstrating CSP nonce implementation in the dist-custom-elements output target for an Angular application. Shows how to use setNonce helper function with custom elements.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Setting Global Styles in Stencil Config
DESCRIPTION: Shows how to configure global styles in the stencil.config.ts file, making them available to all components in the project.

LANGUAGE: tsx
CODE:
export const config: Config = {
  namespace: 'app',
  globalStyle: 'src/global/global.css',
  outputTarget: [
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: VS Code Launch Configuration for Stencil Tests
DESCRIPTION: Configuration for VS Code's launch.json that enables debugging Stencil tests directly in the IDE. Includes separate configurations for running E2E and spec tests on the currently active file.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "E2E Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--e2e", "--", "--maxWorkers=0", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Spec Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--spec", "--", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

----------------------------------------

TITLE: Importing Global Styles in HTML
DESCRIPTION: Shows how to import the generated global styles file in the index.html of a Stencil application.

LANGUAGE: html
CODE:
<link rel="stylesheet" href="/build/app.css" />

----------------------------------------

TITLE: Reflecting Props to Attributes
DESCRIPTION: Demonstrates how to use the reflect option to keep a prop in sync with an attribute.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop({ reflect: false }) isComplete: boolean = false;
    @Prop({ reflect: true }) timesCompletedInPast: number = 2;
    @Prop({ reflect: true }) thingToDo: string = "Read Reflect Section of Stencil Docs";
}

----------------------------------------

TITLE: Invalid Component Module Export Example - TypeScript
DESCRIPTION: Example showing incorrect way of exporting multiple items from a component module, which violates Stencil's one-component-per-module rule.

LANGUAGE: tsx
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Invalid Component Module Export Example
DESCRIPTION: Demonstrates an incorrect way of exporting multiple items from a component module, which violates Stencil's one-component-per-module rule.

LANGUAGE: tsx
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Setting up a new Stencil project
DESCRIPTION: These commands navigate to the newly created project directory, install dependencies, and start the development server.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Full Build Example with Stencil Compiler
DESCRIPTION: Provides a complete example of setting up and running a full build using the Stencil Compiler in a NodeJS environment.

LANGUAGE: typescript
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Implementing Controlled Component Pattern with Ionic in Ember
DESCRIPTION: Shows how to create a controlled component using an Ionic toggle in an Ember component, including state management and event handling.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: JavaScript code to import all Ionic Framework components into an Ember application

LANGUAGE: javascript
CODE:
import '@ionic/core';

----------------------------------------

TITLE: Configuring 'www' Output Target in Stencil
DESCRIPTION: This snippet shows how to configure the 'www' output target in a Stencil project's configuration. It demonstrates setting the output target type to 'www' in the outputTargets array.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Configuring Stencil Project for E2E Testing
DESCRIPTION: Shows the configuration in stencil.config.ts for setting up the project structure and output targets for end-to-end testing.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'test-app',
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null,
      copy: [{ src: '**/test/*.html' }, { src: '**/test/*.css' }],
    },
  ],
};

----------------------------------------

TITLE: Custom Service Worker with Update Handling in Stencil
DESCRIPTION: Custom Service Worker implementation that handles the 'skipWaiting' message to update the worker.

LANGUAGE: javascript
CODE:
importScripts("workbox-v4.3.1/workbox-sw.js");

self.addEventListener("message", ({ data }) => {
  if (data === "skipWaiting") {
    self.skipWaiting();
  }
});

self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Fragment Component Implementation in TSX
DESCRIPTION: Shows how to use Fragment component to group elements without a wrapper node in a Stencil component. Requires proper TypeScript compiler options for JSX fragment factory.

LANGUAGE: tsx
CODE:
import { Component, Fragment, h } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Event Handling in JSX
DESCRIPTION: Demonstrates how to bind event listeners directly in JSX for Stencil components.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

----------------------------------------

TITLE: Basic Prerender Config Structure
DESCRIPTION: Shows the basic structure of a prerender.config.ts file that exports a config object using the PrerenderConfig interface.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Creating a Stateful Ionic Component in Ember
DESCRIPTION: This code example demonstrates how to create an Ember component with state management for an Ionic toggle component, including event handling and two-way binding.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil
DESCRIPTION: Add the 'docs-readme' output target to your Stencil configuration file to enable README auto-generation.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Configuring Supplemental Public Types
DESCRIPTION: Configuration for including additional types in JSON documentation output

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json',
      supplementalPublicTypes: 'src/public-interfaces.ts',
    }
  ]
};

----------------------------------------

TITLE: Implementing Private Methods in Stencil Components
DESCRIPTION: This snippet demonstrates how to implement private methods in Stencil components. Private methods do not require the @Method decorator and don't need to return a Promise.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Managing Array Updates in Stencil Components
DESCRIPTION: Shows proper techniques for updating arrays in Stencil components using immutable operations to trigger state changes and component updates.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Disabling Service Worker Generation
DESCRIPTION: Configuration to disable service worker generation in Stencil's build process.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Implementing Hydrate Options in Prerender Config (TypeScript)
DESCRIPTION: Demonstrates how to use the hydrateOptions hook in the prerender config to set specific options for each page during the prerendering process.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Advanced Screenshot Comparison in Stencil E2E Tests
DESCRIPTION: A comprehensive example of screenshot comparison testing in Stencil, including setting up global styles, finding elements, and using different comparison methods with allowable mismatch thresholds.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    const results = await page.compareScreenshot();

    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Enabling Warnings for Copy Task
DESCRIPTION: This snippet demonstrates how to enable warnings for a copy task when the source file or directory cannot be found, using the 'warn' option set to true.

LANGUAGE: typescript
CODE:
```tsx
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]
```

----------------------------------------

TITLE: Importing Dependencies in a Stencil Web Worker
DESCRIPTION: Shows how to import both npm packages and local modules within a Stencil Web Worker, which will be bundled by the compiler.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Applying External Stylesheets to Stencil Components
DESCRIPTION: These snippets show different ways to apply external stylesheets to Stencil components using styleUrl and styleUrls options, including support for style modes.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrl: './todo-list.css',
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrls: ['./todo-list-1.css', './todo-list-2.css']
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrls: {
     ios: 'todo-list-1.ios.scss',
     md: 'todo-list-2.md.scss',
  }
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Using Ionic Components in Ember Template
DESCRIPTION: Example of using an Ionic component (ion-toggle) in an Ember component template.

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Installing Playwright Dependencies for Stencil
DESCRIPTION: Commands to install the Stencil Playwright adapter, Playwright test package, and browser binaries.

LANGUAGE: bash
CODE:
npm i @stencil/playwright @playwright/test --save-dev

LANGUAGE: bash
CODE:
npx playwright install

----------------------------------------

TITLE: Service Worker Update Handler Component
DESCRIPTION: Implementation of a service worker update handler in a Stencil component that shows a toast notification when updates are available.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Component Composition Example
DESCRIPTION: Demonstrates how to compose Stencil components by nesting them within each other using JSX syntax.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Generating a Stencil Component in a Subdirectory
DESCRIPTION: Shows how to generate a Stencil component in a specific subdirectory using the CLI. This command creates the component 'page-home' within the 'pages' subdirectory.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Stencil Testing Configuration Reference
DESCRIPTION: Example configuration reference from Stencil's public compiler declarations showing the testing configuration interface. This demonstrates the available options for configuring Jest and e2e testing in Stencil projects.

LANGUAGE: tsx
CODE:
https://github.com/ionic-team/stencil/blob/32811591777de726f0374649a4f5e250a0a8e355/src/declarations/stencil-public-compiler.ts#L1968-L2119

----------------------------------------

TITLE: Demonstrating SemVer Format in Markdown
DESCRIPTION: This code snippet shows the format of Semantic Versioning used by Stencil, represented as major.minor.patch.

LANGUAGE: markdown
CODE:
<code>major.minor.patch.</code>

----------------------------------------

TITLE: Customizing Playwright Test File Matching
DESCRIPTION: Configuration to change the test file pattern that Playwright will execute, useful for gradual migration or coexistence with other test runners.

LANGUAGE: typescript
CODE:
export default createConfig({
  // Example: match all test files with the 'e2e.playwright.ts' naming convention
  testMatch: '*.e2e.playwright.ts',
});

----------------------------------------

TITLE: Handling Push Events in Service Worker
DESCRIPTION: Implements a push event listener in a service worker to handle incoming push notifications and display them to the user.

LANGUAGE: javascript
CODE:
self.addEventListener('push', event => {
  console.log(`Push received with data "${event.data.text()}"`);

  const title = 'Push Notification';
  const options = {
    body: `${event.data.text()}`,
    data: { href: '/users/donald' },
    actions: [
      { action: 'details', title: 'Details' },
      { action: 'dismiss', title: 'Dismiss' },
    ],
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

----------------------------------------

TITLE: Using Worker Functions in a Stencil Component
DESCRIPTION: Demonstrates how to import and use worker functions within a Stencil component.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {

  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Configuring package.json for Standalone Stencil Components
DESCRIPTION: Shows the necessary package.json configuration for distributing standalone Stencil components using the 'dist-custom-elements' output target.

LANGUAGE: json
CODE:
{
  "exports": {
    ".": {
      "import": "./dist/components/index.js",
      "types": "./dist/components/index.d.ts"
    },
    "./my-component": {
      "import": "./dist/components/my-component.js",
      "types": "./dist/components/my-component.d.ts"
    }
  },
  "types": "dist/components/index.d.ts"
}

----------------------------------------

TITLE: Node Polyfills Configuration in Stencil
DESCRIPTION: Configuration example for adding Node.js polyfills to a Stencil project using rollup-plugin-node-polyfills.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Package.json Exports Configuration
DESCRIPTION: Advanced exports configuration in package.json for granular component importing.

LANGUAGE: json
CODE:
{
  "exports": {
    ".": {
      "import": "./dist/components/index.js",
      "types": "./dist/components/index.d.ts"
    },
    "./my-component": {
      "import": "./dist/components/my-component.js",
      "types": "./dist/components/my-component.d.ts"
    }
  },
  "types": "dist/components/index.d.ts"
}

----------------------------------------

TITLE: Worker with External Dependencies
DESCRIPTION: Example of a Web Worker that imports external dependencies and handles image processing.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Configuring Service Worker in Stencil Config (TypeScript)
DESCRIPTION: Example of how to configure the service worker in the Stencil config file. This snippet shows how to customize the glob patterns for asset caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Installing Vue Output Target
DESCRIPTION: Command to install the Stencil Vue output target in the Stencil component library.

LANGUAGE: bash
CODE:
# Install dependency (from `packages/stencil-library`)
npm install @stencil/vue-output-target --save-dev

----------------------------------------

TITLE: Installing Lerna globally for monorepo management
DESCRIPTION: Command to install Lerna globally for managing monorepo projects.

LANGUAGE: bash
CODE:
npm install --global lerna

----------------------------------------

TITLE: Advanced State Management with Lifecycle Methods
DESCRIPTION: Shows how to combine @State with lifecycle methods to create a dynamic timer component that updates every second.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Configuring Global Styles in Stencil
DESCRIPTION: Shows how to configure global styles in the Stencil config file to make them available to all components in the project.

LANGUAGE: tsx
CODE:
export const config: Config = {
  namespace: 'app',
  globalStyle: 'src/global/global.css',
  outputTarget: [
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: OptimizeJs Method Signature
DESCRIPTION: Function signature for JavaScript optimization utility used by the compiler.

LANGUAGE: jsx
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Creating Playwright Configuration in TypeScript
DESCRIPTION: Demonstrates how to create a Playwright configuration using the createConfig function from the Stencil Playwright adapter. It shows how to override default settings and extend matchers.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

expect.extend(matchers);

export default createConfig({
  // Change which test files Playwright will execute
  testMatch: '*.spec.ts',

  webServer: {
    // Only wait max 30 seconds for server to start
    timeout: 30000,
  },
});

----------------------------------------

TITLE: Stencil Component Directory Structure
DESCRIPTION: Illustrates the directory structure created when generating a new Stencil component using the CLI. It shows the location of the component files within the src/components directory.

LANGUAGE: plain
CODE:
src
└── components
    └── page-home
        ├── page-home.css
        ├── page-home.e2e.ts
        ├── page-home.spec.ts
        └── page-home.tsx

----------------------------------------

TITLE: CSS Variable Documentation Example
DESCRIPTION: Shows how to document CSS variables using JSDoc-style comments in CSS

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Rollup Plugin Configuration for Asset Copying
DESCRIPTION: Shows how to configure Rollup plugins to copy asset files in a Stencil project

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Functional Component with Children in Stencil
DESCRIPTION: Illustrates how to define a functional component that accepts and renders child elements.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Configuring Vue Output Target in Stencil Config
DESCRIPTION: Add the vueOutputTarget configuration to the outputTargets array in the Stencil config file. This sets up the generation of Vue component wrappers.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Basic Prop Declaration with Stencil
DESCRIPTION: Shows basic property declaration and usage with @Prop decorator in a Stencil component

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Configuring www Output Target in Stencil
DESCRIPTION: Basic configuration example for setting up the www output target in a Stencil project. This is the default output target type if none is specified.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Parsing Command-line Arguments for Stencil CLI
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object. It's used internally by the CLI with process.argv.slice(2).

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Optimizing CSS with Stencil Compiler
DESCRIPTION: Shows the utility function used by the compiler to optimize CSS.

LANGUAGE: tsx
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Using Functional Component with Props
DESCRIPTION: Example of how to use a functional component by passing props.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Using a Utility Function in a Service in TypeScript
DESCRIPTION: Example of a service function 'bar' that uses the 'getRandomInt' utility function. This demonstrates how custom code might be used within a project.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config (TSX)
DESCRIPTION: Demonstrates how to configure the stats output target in stencil.config.ts for automatic stats generation during builds.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Implementing Controlled Ionic Toggle in Ember Component
DESCRIPTION: Full example of an Ember component using an Ionic toggle with state management and event handling.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Using Style Modes in Stencil Components
DESCRIPTION: Illustrates how to use style modes to create versatile designs for components, supporting different styling configurations like iOS and Material Design.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'simple-button',
  styleUrls: {
    md: './simple-button.md.css', // styles for Material Design
    ios: './simple-button.ios.css' // styles for iOS
  },
})
export class SimpleButton {
  // ...
}

----------------------------------------

TITLE: Using Style Modes in Stencil Components
DESCRIPTION: Example of defining and using style modes in a Stencil component to support multiple styling configurations.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'simple-button',
  styleUrls: {
    md: './simple-button.md.css', // styles for Material Design
    ios: './simple-button.ios.css' // styles for iOS
  },
})
export class SimpleButton {
  // ...
}

----------------------------------------

TITLE: Property Type Examples
DESCRIPTION: Demonstrates various property types including boolean, number, string and objects

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() isComplete: boolean;
    @Prop() timesCompletedInPast: number;
    @Prop() thingToDo: string;
    @Prop() myHttpService: MyHttpService;
}

----------------------------------------

TITLE: Configuring Stencil Dev Server with HTTPS and Custom Port
DESCRIPTION: Example configuration for Stencil's development server showing how to set up HTTPS with SSL certificates and customize the port. Demonstrates setting reload strategy and reading certificate files.

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8')
    }
  }
};

----------------------------------------

TITLE: Creating a Form-Associated Stencil Component
DESCRIPTION: This snippet shows how to create a form-associated component using the formAssociated option in the @Component decorator. This allows the component to participate in forms.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Creating a Form-Associated Stencil Component
DESCRIPTION: This snippet shows how to create a form-associated component using the formAssociated option in the @Component decorator. This allows the component to participate in forms.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Prop Types in Stencil
DESCRIPTION: Examples of different prop types including boolean, number, string, and complex types.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() isComplete: boolean;
    @Prop() timesCompletedInPast: number;
    @Prop() thingToDo: string;
    @Prop() myHttpService: MyHttpService;
}

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: Use @slot JSDoc tags to document slots in a component's JSDoc comment.

LANGUAGE: typescript
CODE:
/**
 * @slot - Content is placed between the named slots if provided without a slot.
 * @slot primary - Content is placed to the left of the main slotted-in text.
 * @slot secondary - Content is placed to the right of the main slotted-in text.
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent {
  // ...
  
  render() {
    return (
      <section>
        <slot name="primary"></slot>
        <div class="content">
          <slot></slot>
        </div>
        <slot name="secondary"></slot>
      </section>
    );
  }
}

----------------------------------------

TITLE: Jest Test with Inline Mock Factory
DESCRIPTION: Shows how to use Jest.mock() with an inline factory function to create mocks without separate files.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Rollup Plugin Configuration for Asset Copying
DESCRIPTION: Example configuration using rollup-plugin-copy to move assets to the distribution directory during build.

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: This code snippet demonstrates how to use Build Conditionals in a Stencil component. It imports the Build object from @stencil/core and uses the isDev property to conditionally execute code based on whether the app is running in development or production mode.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Example showing how to configure environment variables for components to access using the env config option.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  env: {
    API_BASE_URL: process.env.API_BASE_URL
  }
}

----------------------------------------

TITLE: Documenting @Prop Decorator Usage
DESCRIPTION: Shows how to document properties using the @Prop decorator, which will be included in the generated README.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * The first name
   */
  @Prop() first!: string; // the '!' denotes a required property
  /**
   * @deprecated since v2.1.0
   */
  @Prop() middle: string;
  @Prop() lastName = "Smith";

  // ...
}

----------------------------------------

TITLE: Helper Utility Implementation in TypeScript
DESCRIPTION: Sample utility function implementation for generating random integers within a range

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Testing Component with Props using newSpecPage in TSX
DESCRIPTION: Shows how to use the template option in newSpecPage() to test a Stencil component with props. It uses JSX syntax to render the component with a greeting prop and verifies the output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Configuring VS Code Node Debugger for Stencil Prerender
DESCRIPTION: Launch configuration for debugging Stencil's prerender process in Node.js environment. Sets up command arguments and inspector protocol.

LANGUAGE: json
CODE:
{
  "type": "node",
  "request": "launch",
  "name": "Prerender",
  "args": [
    "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
    "prerender",
    "${workspaceFolder}/dist/hydrate/index.js",
    "--max-workers=0",
    "--config=${workspaceFolder}/stencil.config.ts"
  ],
  "protocol": "inspector"
}

----------------------------------------

TITLE: Exporting Generated Angular Component Wrappers
DESCRIPTION: Export the generated Angular component wrappers in the main Angular module of the component library.

LANGUAGE: typescript
CODE:
// component-library.module.ts

import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: HTML Template for E2E Testing with Stencil
DESCRIPTION: Provides an example HTML template for end-to-end testing, including the necessary script tags for loading Stencil components.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf8" />

    <!-- Replace with the path to your entrypoint -->
    <script src="../../../build/test-app.esm.js" type="module"></script>
    <script src="../../../build/test-app.js" nomodule></script>
  </head>
  <body>
    <my-component first="Stencil"></my-component>
  </body>
</html>

----------------------------------------

TITLE: Documenting Component Properties in TypeScript
DESCRIPTION: Example showing how to add documentation to a Stencil component property using JSDoc comments with the @Prop decorator.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Configuring Rollup for Custom Elements
DESCRIPTION: This snippet provides an example Rollup configuration for consuming custom elements, including plugins for CommonJS, CSS handling, and asset copying.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Using Host as a Fragment in Stencil TSX
DESCRIPTION: This example shows how to use the Host component to render multiple elements at the root level of a component.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Optimizing JavaScript with Stencil Core Compiler
DESCRIPTION: Illustrates the function signature for optimizing JavaScript using the Stencil Core Compiler utility function, which applies minification optimizations based on the JavaScript target.

LANGUAGE: javascript
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Basic E2E Test Setup in Stencil
DESCRIPTION: Basic example of setting up an E2E test for a Stencil component using newE2EPage to verify component rendering.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Configuring Copy Task with Warning Option
DESCRIPTION: Example showing how to enable warnings for missing source files in copy tasks using the warn option.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Invalid Component Export in Stencil
DESCRIPTION: This example demonstrates an invalid component export in Stencil, where additional functions are exported alongside the component class. This violates Stencil's one-component-per-module rule.

LANGUAGE: tsx
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Creating Vue Plugin for Custom Elements
DESCRIPTION: This TypeScript snippet shows how to create a Vue plugin to register custom elements.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Configuring JSON Docs Output Target
DESCRIPTION: Configuration for automatically generating JSON documentation during build

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Configuring Stencil Output Target for React
DESCRIPTION: Configuration for generating React component wrappers using @stencil/react-output-target in stencil.config.ts

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    reactOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../react-library/lib/components/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Screenshot Connector Interface Definition (TSX)
DESCRIPTION: Defines the interface for the ScreenshotConnector, listing all methods that can be overridden in a custom implementation. These methods control various aspects of the screenshot testing process.

LANGUAGE: tsx
CODE:
export interface ScreenshotConnector {
  initBuild(opts: ScreenshotConnectorOptions): Promise<void>;

  pullMasterBuild(): Promise<void>;

  getMasterBuild(): Promise<ScreenshotBuild>;

  getScreenshotCache(): Promise<ScreenshotCache>;

  completeBuild(masterBuild: ScreenshotBuild): Promise<ScreenshotBuildResults>;
  
  publishBuild(buildResults: ScreenshotBuildResults): Promise<ScreenshotBuildResults>;

  updateScreenshotCache(screenshotCache: ScreenshotCache, buildResults: ScreenshotBuildResults): Promise<ScreenshotCache>;

  generateJsonpDataUris(build: ScreenshotBuild): Promise<void>;
}

----------------------------------------

TITLE: Handling Notification Clicks in Service Worker
DESCRIPTION: Service worker code to handle notification click events and perform actions.

LANGUAGE: javascript
CODE:
self.addEventListener('notificationclick', event => {
  const notification = event.notification;
  const action = event.action;

  if (action === 'dismiss') {
    notification.close();
  } else {
    // This handles both notification click and 'details' action,
    // because some platforms might not support actions.
    clients.openWindow(notification.data.href);
    notification.close();
  }
});

----------------------------------------

TITLE: Stencil Configuration for E2E Testing
DESCRIPTION: Configuration setup in stencil.config.ts for handling end-to-end test files and resources.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'test-app',
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null,
      copy: [{ src: '**/test/*.html' }, { src: '**/test/*.css' }],
    },
  ],
};

----------------------------------------

TITLE: Importing Stencil Components in TypeScript
DESCRIPTION: Demonstrates how to import a Stencil component library in a TypeScript file for lazy loading.

LANGUAGE: typescript
CODE:
import 'my-design-system';

----------------------------------------

TITLE: Configuring Custom Footer in Stencil Config
DESCRIPTION: This configuration snippet shows how to add a custom footer to the generated README files by specifying the footer property in the output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Handling Service Worker Updates in Stencil Component
DESCRIPTION: Implements a listener for service worker updates and displays a toast notification with a reload option using Ionic components.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    // If there is no waiting registration, this is the first service
    // worker being installed.
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Full Compiler Build Example
DESCRIPTION: Complete example showing how to set up and run a full build using the Stencil compiler in a NodeJS environment.

LANGUAGE: tsx
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: JavaScript code to import all Ionic Framework components in the Ember application entry point

LANGUAGE: javascript
CODE:
import '@ionic/core';

----------------------------------------

TITLE: Defining TypeScript CopyTask Interface
DESCRIPTION: TypeScript interface definition for the CopyTask configuration used in Stencil's output targets to specify file copy operations.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Stateful Ionic Component Integration
DESCRIPTION: Complete example of an Ember component implementing the controlled component pattern with an Ionic toggle, including state tracking and event handling

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Stencil Build Commands for Documentation Generation
DESCRIPTION: CLI commands for generating component documentation using Stencil build and docs commands

LANGUAGE: bash
CODE:
npx stencil build
npm stencil build --watch
npx stencil build --docs
npx stencil docs

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class
DESCRIPTION: Basic implementation showing how to extend the base ScreenshotConnector class from Stencil core.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Helper Methods Export
DESCRIPTION: Default export of helper methods in the index.js file.

LANGUAGE: javascript
CODE:
export { setAssetPath, setPlatformOptions } from '@stencil/core/internal/client';

----------------------------------------

TITLE: Advanced Form Implementation in Stencil
DESCRIPTION: Implements a complex form with multiple input types including email and select elements. Features email validation using the constraint validation API and demonstrates handling multiple select inputs with dynamic options.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Handling Push Events in Service Worker
DESCRIPTION: Example of handling push events in a custom Service Worker. This snippet demonstrates how to listen for push events and display notifications.

LANGUAGE: javascript
CODE:
self.addEventListener('push', event => {
  console.log(`Push received with data "${event.data.text()}"`);

  const title = 'Push Notification';
  const options = {
    body: `${event.data.text()}`,
    data: { href: '/users/donald' },
    actions: [
      { action: 'details', title: 'Details' },
      { action: 'dismiss', title: 'Dismiss' },
    ],
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

----------------------------------------

TITLE: Stencil Config with Type Declarations
DESCRIPTION: Configuration for enabling TypeScript type declarations in Stencil output targets.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      generateTypeDeclarations: true,
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Warning-Enabled Copy Task in Stencil
DESCRIPTION: Demonstrates how to enable warning messages for copy tasks when source files cannot be found by setting the warn property to true.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Custom Service Worker Configuration in Stencil
DESCRIPTION: Example of customizing the service worker configuration in Stencil's config file to include additional file types for caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Stencil Project Type Selection
DESCRIPTION: CLI prompt for selecting the type of Stencil project to create. Options include component collections, standalone apps, and Ionic PWA starters.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Implementing CSP Nonces in Stencil Custom Elements Output Target
DESCRIPTION: Shows how to use the setNonce helper function to set nonce attributes for all script and style tags in a Stencil custom elements output target, specifically in an Angular app's entrypoint.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Setting Custom Destination for Copy Task
DESCRIPTION: This example shows how to set a custom destination for a copy task, copying fonts from 'src/files/fonts' to 'public/static/web-fonts' in a customized WWW output target.

LANGUAGE: typescript
CODE:
```tsx
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]
```

----------------------------------------

TITLE: Using Worker Callbacks in a Stencil Component
DESCRIPTION: Demonstrates how to use a worker function with callbacks in a Stencil component, allowing for progress updates during long-running tasks.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { countDown } from '../countdown.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {

  componentWillLoad() {
    const startNum = 5;
    console.log('start', startNum);

    countDown(startNum, (p) => {
      console.log('progress', p);
    }).then(result => {
      console.log('finish', result);
    });
  }
}

----------------------------------------

TITLE: Configuring Global Script in Stencil
DESCRIPTION: Example of how to define a global script in the Stencil config, which runs once before the app loads.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: Setting up project structure for Stencil-Vue integration
DESCRIPTION: Demonstrates the recommended monorepo structure for a Stencil component library with Vue component wrappers.

LANGUAGE: plaintext
CODE:
top-most-directory/
└── packages/
    ├── vue-library/
    │   └── lib/
    │       ├── plugin.ts
    │       └── index.ts
    └── stencil-library/
        ├── stencil.config.js
        └── src/components

----------------------------------------

TITLE: Configuring Meta Tags in Stencil Prerender Hook
DESCRIPTION: Example showing how to use the afterHydrate prerender hook to set document title based on URL pathname. The hook receives document and URL objects as parameters and allows manipulation of the DOM before HTML serialization.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Build Conditionals in a Stencil component. It imports the Build object from @stencil/core and uses the isDev property to conditionally execute code based on whether the app is running in development or production mode.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Test File with File-based Mock
DESCRIPTION: Test implementation showing how to use a file-based mock with Jest.mock().

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Basic Screenshot Comparison Test in Stencil
DESCRIPTION: Simple example of setting up a visual regression test for a component using Puppeteer. Shows how to create a new E2E page, set content, and compare screenshots.

LANGUAGE: javascript
CODE:
  it('render something', async () => {
    const page: E2EPage = await newE2EPage();
    await page.setContent('<my-cmp></my-cmp>');
    await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
  });

----------------------------------------

TITLE: Configuring VS Code Settings for Custom HTML Data
DESCRIPTION: This JSON snippet demonstrates how to configure VS Code settings to use the generated custom data file. It adds the path to the generated JSON file in the 'html.customData' setting.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Initializing WebdriverIO Project for Stencil
DESCRIPTION: Command to start the WebdriverIO configuration wizard for setting up a new project. It guides users through selecting testing types and frameworks, specifically mentioning StencilJS as a preset.

LANGUAGE: bash
CODE:
npm init wdio@latest .

----------------------------------------

TITLE: VS Code Node.js Debugging Configuration for Stencil Prerender
DESCRIPTION: Launch configuration for debugging Stencil's prerender process using Node.js debugger with specific arguments for hydration script.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "Prerender",
      "args": [
        "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
        "prerender",
        "${workspaceFolder}/dist/hydrate/index.js",
        "--max-workers=0",
        "--config=${workspaceFolder}/stencil.config.ts"
      ],
      "protocol": "inspector"
    }
  ]
}

----------------------------------------

TITLE: Creating NodeJS Logger for Stencil Compiler
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the Stencil compiler and dev-server. It requires the NodeJS process object as an argument.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Defining a Stencil Component with a Mocked Method
DESCRIPTION: This code defines a Stencil component 'Foo' with a method 'bar' that uses the 'getRandomInt' function. It's used to demonstrate mocking in E2E tests.

LANGUAGE: typescript
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Updating Stencil Core Package
DESCRIPTION: This command updates the @stencil/core package to the latest version in your Stencil project.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Creating a Vue component library
DESCRIPTION: Commands to create a Vue component library for wrapping Stencil components.

LANGUAGE: bash
CODE:
# From your top-most-directory/
lerna create vue-library
# Follow the prompts and confirm
cd packages/vue-library
# Install Vue dependency
npm install vue@3 --save-dev

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config
DESCRIPTION: This snippet demonstrates how to add the stats output target to the Stencil configuration file (stencil.config.ts). It shows how to specify an optional custom output file path for the generated stats.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Referencing Major Version in Markdown
DESCRIPTION: Uses an inline code block to highlight the 'major' part of semantic versioning in Markdown.

LANGUAGE: markdown
CODE:
<code>major</code>

----------------------------------------

TITLE: Enabling Shadow DOM in Stencil Component
DESCRIPTION: Example of how to enable Shadow DOM for a Stencil component using the shadow option in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Custom Service Worker Implementation (JavaScript)
DESCRIPTION: Boilerplate code for a custom Service Worker implementation, including Workbox integration and precache manifest injection.

LANGUAGE: javascript
CODE:
// change to the version you get from `npm ls workbox-build`
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Advanced Event Configuration Example
DESCRIPTION: Demonstrates using EventOptions to configure a custom event with specific behavior settings and handling prevented defaults.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Using Worker Callbacks in a Stencil Component
DESCRIPTION: This example shows how to use a Web Worker with callbacks in a Stencil component. It demonstrates importing the worker function and using it with a progress callback.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { countDown } from '../countdown.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {

  componentWillLoad() {
    const startNum = 5;
    console.log('start', startNum);

    countDown(startNum, (p) => {
      console.log('progress', p);
    }).then(result => {
      console.log('finish', result);
    });
  }
}

----------------------------------------

TITLE: Screenshot Testing Interface Definitions
DESCRIPTION: Comprehensive TypeScript interface definitions for all data structures used in the screenshot testing system.

LANGUAGE: typescript
CODE:
export interface ScreenshotConnectorOptions {
  buildId: string;

  buildMessage: string;

  buildAuthor?: string;

  buildUrl?: string;

  previewUrl?: string;

  appNamespace: string;

  buildTimestamp: number;

  logger: Logger;

  rootDir: string;

  cacheDir: string;

  packageDir: string;

  screenshotDirName?: string;

  imagesDirName?: string;

  buildsDirName?: string;

  currentBuildDir?: string;

  updateMaster?: boolean;

  allowableMismatchedPixels?: number;

  allowableMismatchedRatio?: number;

  pixelmatchThreshold?: number;

  waitBeforeScreenshot?: number;

  pixelmatchModulePath?: string;
}

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: JavaScript code to import all Ionic Framework components into an Ember application

LANGUAGE: javascript
CODE:
import '@ionic/core';

----------------------------------------

TITLE: Configuring Basic Workbox Service Worker in Stencil
DESCRIPTION: Default configuration for generating a service worker using Workbox in a Stencil project. Specifies glob patterns for caching static assets.

LANGUAGE: typescript
CODE:
{
  globPatterns: [
    '**/*.{js,css,json,html}'
  ]
};

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config
DESCRIPTION: Demonstrates how to configure automatic stats generation by adding a stats output target to stencil.config.ts

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Using componentOnReady() in TypeScript
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code after a component's first render cycle. This method returns a promise that resolves after componentDidRender() on the initial render.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = documents.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Creating a Stencil Component Library
DESCRIPTION: These commands create and set up a new Stencil component library within the monorepo.

LANGUAGE: bash
CODE:
cd packages/
npm init stencil components stencil-library
cd stencil-library
npm install

----------------------------------------

TITLE: Styling CSS Parts from Light DOM
DESCRIPTION: Demonstrates how to style CSS parts defined in a Shadow DOM component from the light DOM using the ::part() pseudo-element.

LANGUAGE: css
CODE:
shadow-card::part(heading) {
  text-transform: uppercase;
}

----------------------------------------

TITLE: Using a Helper Function in a Service
DESCRIPTION: Example of a service function 'bar' that uses the 'getRandomInt' helper. This demonstrates how the helper is typically used in application code.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Importing Global Styles in HTML
DESCRIPTION: Demonstrates how to import the generated global styles file in the index.html of the application.

LANGUAGE: html
CODE:
<link rel="stylesheet" href="/build/app.css" />

----------------------------------------

TITLE: Defining Object Props in Stencil Component
DESCRIPTION: Demonstrates how to define object and array properties in a Stencil component using decorators.

LANGUAGE: tsx
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: VS Code Settings Configuration for Custom Elements
DESCRIPTION: JSON configuration for VS Code settings to recognize the generated custom elements file. This enables VS Code to provide enhanced HTML editing features for Stencil components.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Querying Elements in Shadow DOM
DESCRIPTION: Illustrates how to query elements within a Stencil component's Shadow DOM using the @Element decorator and shadowRoot property.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Accessing Platform-Independent Path Utility
DESCRIPTION: Demonstrates how to access the platform-independent 'path' API provided by the Stencil compiler, which is based on the POSIX version of NodeJS path module.

LANGUAGE: typescript
CODE:
path: PlatformPath

----------------------------------------

TITLE: Configuring Prerender Path in Stencil Config
DESCRIPTION: Demonstrates how to set up the prerenderConfig path in the Stencil configuration file to enable prerendering for the www output target.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Installing Ionic Framework in Ember
DESCRIPTION: Command to install the Ionic Framework in an Ember project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Configuring TypeScript Support in stencil.config.ts
DESCRIPTION: This TypeScript snippet shows how to configure the Stencil config file to generate type declarations for standalone components using the 'dist-custom-elements' output target.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      generateTypeDeclarations: true,
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Non-Optimized Menu Navigation Component in TSX
DESCRIPTION: Example showing a problematic implementation of menu navigation using complex object props, which is not ideal for SSR.

LANGUAGE: tsx
CODE:
const menu = {
    'Overview': ['Introduction', 'Getting Started', 'Component API', 'Guides', 'FAQ'],
    'Docs': ['Framework Integrations', 'Static Site Generation', 'Config', 'Output Targets', 'Testing', 'Core Compiler API'],
    'Community': ['Blog', 'GitHub', 'X', 'Discord']
}
return (
    <nav>
        <footer-navigation items={menu} />
    </nav>
)

----------------------------------------

TITLE: Updating Vue Library Package.json
DESCRIPTION: Changes to make in the Vue library's package.json file to configure build and dependencies.

LANGUAGE: json
CODE:
{
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "scripts": {
    "test": "echo \"Error: run tests from root\" && exit 1",
    "build": "npm run tsc",
    "tsc": "tsc -p . --outDir ./dist"
  },
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "stencil-library": "*"
  }
}

----------------------------------------

TITLE: Mutable Props in Stencil Components
DESCRIPTION: Example of declaring a mutable prop in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class ToDoListItem {
   @Prop({ mutable: true }) thingToDo: string;

   componentDidLoad() {
      this.thingToDo = 'Ah! A new value!';
   }
}

----------------------------------------

TITLE: Node Polyfills Plugin Configuration in TypeScript
DESCRIPTION: Configuration example for adding the rollup-plugin-node-polyfills plugin to the Stencil config file to handle Node.js APIs in the browser.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Complex E2E Test for Toggle Component
DESCRIPTION: Shows a complete E2E test example that checks component classes, properties, and event handling for an ion-toggle component.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Enabling Shadow DOM for a Stencil Component
DESCRIPTION: This example demonstrates how to enable Shadow DOM encapsulation for a Stencil component using the 'shadow' option. It also shows how to use the 'delegatesFocus' property for focus management.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: { 
    delegatesFocus: true,
  }
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Complex Types with State Management
DESCRIPTION: Advanced example showing @State() usage with complex types and arrays, demonstrating proper state updates and array handling.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Complex Types with State Management
DESCRIPTION: Advanced example showing @State() usage with complex types and arrays, demonstrating proper state updates and array handling.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Variable Casing in Props
DESCRIPTION: Shows how camelCase prop names are used in TSX and dash-case in HTML.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() thingToDo: string;

    render() {
        return <div>{this.thingToDo}</div>;
    }
}

LANGUAGE: typescript
CODE:
<todo-list-item thingToDo={"Learn about Stencil Props"}></todo-list-item>

LANGUAGE: html
CODE:
<todo-list-item thing-to-do="Learn about Stencil Props"></todo-list-item>

----------------------------------------

TITLE: Creating Usage Examples for Stencil Components
DESCRIPTION: Example of creating a usage example for a component in a Markdown file. This demonstrates how to document component usage.

LANGUAGE: md
CODE:
# How to use `my-button`

A button is often a great help in adding interactivity to an app!

You could use it like this:

```html
<my-button>My Button!</my-button>
```

----------------------------------------

TITLE: Configuring Stencil Testing in Config File
DESCRIPTION: Example of configuring Stencil testing options in the project's config file, specifically setting test path ignore patterns.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  testing: {
    testPathIgnorePatterns: [...]
  }
};

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: This snippet shows how to add the 'dist-custom-elements' output target to a Stencil project's configuration file. It demonstrates the basic structure of the config object.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Testing a Stencil Component with JSX Template
DESCRIPTION: Shows how to use the template option in newSpecPage() to test a component with JSX syntax. It demonstrates passing props to the component and asserting the rendered output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Loading Stencil Component via CDN in HTML
DESCRIPTION: Demonstrates how to load a Stencil component using a script tag and CDN in a simple HTML page.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Lifecycle DOM Events Example
DESCRIPTION: Lists the component lifecycle events that can be dispatched when lifecycleDOMEvents is enabled.

LANGUAGE: markdown
CODE:
| Event Name                    | Description                                            |
| ----------------------------- | ------------------------------------------------------ |
| `stencil_componentWillLoad`   | Dispatched for each component's `componentWillLoad`.   |
| `stencil_componentWillUpdate` | Dispatched for each component's `componentWillUpdate`. |
| `stencil_componentWillRender` | Dispatched for each component's `componentWillRender`. |
| `stencil_componentDidLoad`    | Dispatched for each component's `componentDidLoad`.    |
| `stencil_componentDidUpdate`  | Dispatched for each component's `componentDidUpdate`.  |
| `stencil_componentDidRender`  | Dispatched for each component's `componentDidRender`.  |

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript interface definition for CopyTask, which is used to configure file copy operations in Stencil's output targets.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Updating tsconfig.json for Playwright Compatibility
DESCRIPTION: Modification to the project's tsconfig.json to add the ESNext.Disposable option, resolving potential build errors.

LANGUAGE: json
CODE:
{
  "lib": [
    "...",
    "ESNext.Disposable"
  ],
  "..."
}

----------------------------------------

TITLE: Writing a Vitest Test Using JSX for Stencil Components
DESCRIPTION: This test demonstrates how to use JSX to render and test a Stencil component with Vitest.

LANGUAGE: typescript
CODE:
/** @jsx createElement */
import { expect, test } from 'vitest'

import { createElement } from '../../utils/jsx'
import './my-component.js'

test('should render the component with jsx', async () => {
    const cmp = <my-component first="Stencil" last="'Don't call me a framework' JS"></my-component>
    document.body.appendChild(cmp)
    await new Promise((resolve) => requestIdleCallback(resolve))
    expect(cmp.shadowRoot?.querySelector('div')?.innerText)
        .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)
})

----------------------------------------

TITLE: Installing Legacy Ember Stencil Integration
DESCRIPTION: Command to install the legacy ember-cli-stencil addon for older Ember applications

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Configuring HTTPS for Stencil Dev Server in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the Stencil dev server to use HTTPS by providing SSL certificate and key files. It also shows how to set a custom port and reload strategy.

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8'),
    },
  },
};

----------------------------------------

TITLE: Basic Screenshot Comparison in Stencil E2E Tests
DESCRIPTION: Simple example of setting up a screenshot comparison test using Puppeteer in a Stencil end-to-end test. It demonstrates how to create a new E2E page, set content, and compare screenshots.

LANGUAGE: javascript
CODE:
it('render something', async () => {
  const page: E2EPage = await newE2EPage();
  await page.setContent('<my-cmp></my-cmp>');
  await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
});

----------------------------------------

TITLE: Configuring Stencil for Test File Selection
DESCRIPTION: TypeScript configuration in stencil.config.ts to define which test files should be picked up by Stencil's test runner using a regular expression.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // ...
  testing: {
    testRegex: '(/__tests__/.*|\\.?(spec))\\.(ts|js)$',
  },
};

----------------------------------------

TITLE: Creating an Angular Component Library
DESCRIPTION: Commands to generate an Angular workspace and library for component wrappers using the Angular CLI.

LANGUAGE: bash
CODE:
npx -p @angular/cli ng new angular-workspace --no-create-application
cd angular-workspace
npx -p @angular/cli ng generate library component-library

----------------------------------------

TITLE: Implementing CSS Parts in Stencil Components
DESCRIPTION: Shows how to use the CSS ::part() pseudo-element to allow external styling of specific elements within a Shadow DOM component.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Using optimizeJs() Function
DESCRIPTION: Utility function signature for JavaScript optimization with target-specific enhancements.

LANGUAGE: jsx
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Configuring Stencil Dev Server with HTTPS and Custom Port
DESCRIPTION: Example configuration for Stencil's dev server showing how to set up HTTPS using SSL certificates and customize the port. The configuration demonstrates importing SSL certificate files and setting reload strategy.

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8')
    }
  }
};

----------------------------------------

TITLE: Configuring Stencil Angular Output Target
DESCRIPTION: Configuration example for the Angular output target in stencil.config.ts showing how to set up component wrapper generation

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil
DESCRIPTION: This snippet shows how to add the docs-readme output target to the Stencil configuration file. This setup enables automatic generation of README.md files for components.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: CSS Variable Fallback for Legacy Browsers in Stencil
DESCRIPTION: This CSS snippet shows how to provide a fallback color value for legacy browsers that don't support CSS variables. It's necessary when the 'cssVarsShim' is set to false in the Stencil configuration.

LANGUAGE: css
CODE:
div {
  color: blue; /* Used by IE */
  color: var(--color); /* Used by modern browsers */
}

----------------------------------------

TITLE: Asset Resolution Path Example with getAssetPath
DESCRIPTION: Demonstrates how getAssetPath resolves different asset paths relative to the build directory

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: Example of documenting slots in a Stencil component using @slot JSDoc tags and implementing them in the render method.

LANGUAGE: typescript
CODE:
/**
 * @slot - Content is placed between the named slots if provided without a slot.
 * @slot primary - Content is placed to the left of the main slotted-in text.
 * @slot secondary - Content is placed to the right of the main slotted-in text.
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent {
  // ...
  
  render() {
    return (
      <section>
        <slot name="primary"></slot>
        <div class="content">
          <slot></slot>
        </div>
        <slot name="secondary"></slot>
      </section>
    );
  }
}

----------------------------------------

TITLE: Resolving Asset Paths with getAssetPath in TypeScript
DESCRIPTION: Demonstrates how to use the getAssetPath function to resolve asset paths relative to the asset base path in a Stencil component.

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Running Individual Stencil Tasks in TypeScript
DESCRIPTION: Executes individual Stencil tasks given a NodeJS process, Stencil config, and task command. An optional CompilerSystem can be provided. It returns a Promise that resolves to void.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Configuring Meta Tags with Stencil PrerenderConfig
DESCRIPTION: Example showing how to use the afterHydrate hook in Stencil's PrerenderConfig to dynamically set document title based on URL pathname during static site generation. The hook receives document and URL objects as parameters.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Implementing Stencil Component Loader
DESCRIPTION: Example of using the generated loader helpers to register components and apply polyfills in an application setup script.

LANGUAGE: typescript
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Exporting component wrappers and plugin
DESCRIPTION: Code for exporting the generated component wrappers and Vue plugin.

LANGUAGE: typescript
CODE:
export * from './components';
export * from './plugin';

----------------------------------------

TITLE: Building Stencil Project with README Generation
DESCRIPTION: Use the Stencil build command to generate README files for components. The --watch flag can be used for automatic updates during development.

LANGUAGE: bash
CODE:
npx stencil build

LANGUAGE: bash
CODE:
npm stencil build --watch

----------------------------------------

TITLE: Defining a Helper Function in Stencil with TypeScript
DESCRIPTION: Example of a helper function 'getRandomInt' that generates a random integer within a specified range. This function is used to demonstrate mocking of custom code.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Implementing Visual Component Test
DESCRIPTION: Example test implementation showing how to use toMatchElementSnapshot matcher to perform visual testing on a Stencil component.

LANGUAGE: typescript
CODE:
https://github.com/webdriverio/component-testing-examples/blob/2de295ab568b5163e67d716156221578b6536d9d/stencil-component-starter/src/components/my-component/my-component.test.tsx#L20-L28

----------------------------------------

TITLE: Implementing Advanced Form in Stencil Component
DESCRIPTION: This snippet showcases an advanced form implementation in a Stencil component. It includes an email input with validation, two select inputs (one with dynamic options), and demonstrates more complex state management and event handling.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Handling Service Worker Updates in Stencil Component
DESCRIPTION: Example of handling Service Worker updates in a Stencil component, showing a toast notification when an update is available.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    // If there is no waiting registration, this is the first service
    // worker being installed.
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: This snippet shows how to configure the 'dist' output target in a Stencil project's configuration file. It specifies the type as 'dist' within the outputTargets array.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Importing Dependencies in a Stencil Worker
DESCRIPTION: Shows how to import and use external dependencies within a Stencil worker file.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Initializing Git Repository for Stencil Project
DESCRIPTION: Commands to initialize a Git repository for a new Stencil project, add all files, and make an initial commit.

LANGUAGE: bash
CODE:
$ git init
$ git add -A
$ git commit -m "initialize project using stencil cli" 

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: TypeScript interface reference for the CopyTask configuration used in Stencil's output targets to define file copy operations.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Stencil Web Worker Implementation
DESCRIPTION: Shows how to create a Web Worker in Stencil using TypeScript with async functions for mathematical operations and buffer processing.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Importing Specific Standalone Components in JavaScript
DESCRIPTION: Examples of importing all components or a specific component in JavaScript.

LANGUAGE: javascript
CODE:
// this import loads all compiled components
import { MyComponent } from 'my-design-system'
// only import compiled code for MyComponent
import { MyComponent } from 'my-design-system/my-component'

----------------------------------------

TITLE: Configuring Root TypeScript Settings
DESCRIPTION: Base TypeScript configuration for the monorepo workspace

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Prerender Config File Structure (TypeScript)
DESCRIPTION: This snippet demonstrates the basic structure of a prerender.config.ts file, which exports a config object using the PrerenderConfig interface.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Initializing and Communicating with a Vanilla Web Worker in JavaScript
DESCRIPTION: Demonstrates how to create a new Web Worker instance and set up basic message passing between the main thread and the worker thread using the vanilla Web Worker API.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Configuring NPM Scripts for WebdriverIO and Stencil Tests
DESCRIPTION: This JSON snippet demonstrates how to set up an NPM script to run both Stencil and WebdriverIO tests sequentially.

LANGUAGE: json
CODE:
{
    "scripts:": {
        "test.e2e": "stencil test && wdio run wdio.conf.ts"
    }
}

----------------------------------------

TITLE: Configuring Node Debugger for Stencil Prerender
DESCRIPTION: VS Code launch configuration for debugging Stencil's prerender process using Node.js debugger. Sets up command line arguments and inspector protocol.

LANGUAGE: json
CODE:
{
  "type": "node",
  "request": "launch",
  "name": "Prerender",
  "args": [
    "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
    "prerender",
    "${workspaceFolder}/dist/hydrate/index.js",
    "--max-workers=0",
    "--config=${workspaceFolder}/stencil.config.ts"
  ],
  "protocol": "inspector"
}

----------------------------------------

TITLE: Configuring Stencil Testing in Config File
DESCRIPTION: Example of configuring Stencil testing options in the project's config file, specifically setting test path ignore patterns.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  testing: {
    testPathIgnorePatterns: [...]
  }
};

----------------------------------------

TITLE: Parsing Command-line Flags for Stencil CLI in TypeScript
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object. It's used internally by the Stencil CLI to process arguments passed to the command.

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Defining a Helper Function for Mocking
DESCRIPTION: Defines a 'getRandomInt' helper function in a utils.ts file. This function will be the target of mocking in subsequent examples.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Configuring TypeScript Path Aliases in tsconfig.json
DESCRIPTION: Example of how to specify path aliases in a TypeScript project's tsconfig.json file. This configuration maps '@utils' to 'src/utils/index.ts'.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: This snippet shows how to configure the 'dist' output target in a Stencil project's configuration file. It specifies the output target type as 'dist'.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Using Build Conditionals for Browser Detection
DESCRIPTION: Example demonstrating how to use Build.isBrowser conditional to execute code specifically in browser or prerender environments.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Demonstrating Semantic Versioning Format in Markdown
DESCRIPTION: This snippet shows the format of Semantic Versioning using inline code blocks in Markdown. It illustrates the major.minor.patch structure of version numbers.

LANGUAGE: markdown
CODE:
<code>major.minor.patch.</code>

----------------------------------------

TITLE: CSP Nonce Meta Tag Implementation for SSR
DESCRIPTION: HTML meta tag implementation for Server-Side Rendering (SSR) to provide the nonce value. Must be injected into the header on each page request.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Custom Service Worker Configuration in Stencil
DESCRIPTION: Example of configuring a custom service worker in Stencil's config file, including additional file types for caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Shadow DOM QuerySelector Implementation
DESCRIPTION: Shows how to query elements within Shadow DOM using the @Element decorator and shadowRoot property.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Defining Web Worker Functions in Stencil
DESCRIPTION: Shows how to create a Web Worker file in Stencil, defining asynchronous functions that can be executed in a separate thread. This example includes a simple sum function and a more complex task processing an ArrayBuffer.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Handling Push Events in Service Worker (JavaScript)
DESCRIPTION: Example of handling push events in a Service Worker, including showing notifications and processing notification clicks.

LANGUAGE: javascript
CODE:
self.addEventListener('push', event => {
  console.log(`Push received with data "${event.data.text()}"`);

  const title = 'Push Notification';
  const options = {
    body: `${event.data.text()}`,
    data: { href: '/users/donald' },
    actions: [
      { action: 'details', title: 'Details' },
      { action: 'dismiss', title: 'Dismiss' },
    ],
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

self.addEventListener('notificationclick', event => {
  const notification = event.notification;
  const action = event.action;

  if (action === 'dismiss') {
    notification.close();
  } else {
    // This handles both notification click and 'details' action,
    // because some platforms might not support actions.
    clients.openWindow(notification.data.href);
    notification.close();
  }
});

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class
DESCRIPTION: Basic implementation of a custom screenshot connector by extending the base ScreenshotConnector class from Stencil core.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Defining Props in Stencil Component
DESCRIPTION: Illustrates how to define object and array props in a Stencil component using the @Prop decorator. This is necessary for accepting complex data types as properties.

LANGUAGE: tsx
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Git Repository Initialization
DESCRIPTION: Commands to initialize version control for a new Stencil project

LANGUAGE: bash
CODE:
$ git init
$ git add -A
$ git commit -m "initialize project using stencil cli"

----------------------------------------

TITLE: Inline Mocking in Stencil Tests with TypeScript
DESCRIPTION: This example shows an alternative approach to mocking by providing an inline mock implementation using jest.mock(). This method doesn't require creating a separate mock file.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Enabling Shadow DOM for a Stencil Component
DESCRIPTION: These examples demonstrate how to enable Shadow DOM encapsulation for a Stencil component, with and without the delegatesFocus option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: true
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: { 
    delegatesFocus: true,
  }
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Passing Complex Data Structures as Props in TSX (Anti-pattern)
DESCRIPTION: This snippet demonstrates an anti-pattern for SSR where complex objects are passed as props to a component. This approach doesn't work well with server-side rendering in Stencil.

LANGUAGE: tsx
CODE:
const menu = {
    'Overview': ['Introduction', 'Getting Started', 'Component API', 'Guides', 'FAQ'],
    'Docs': ['Framework Integrations', 'Static Site Generation', 'Config', 'Output Targets', 'Testing', 'Core Compiler API'],
    'Community': ['Blog', 'GitHub', 'X', 'Discord']
}
return (
    <nav>
        <footer-navigation items={menu} />
    </nav>
)

----------------------------------------

TITLE: Using Angular Component Wrappers in Template
DESCRIPTION: Example of how to use the Angular component wrappers in an Angular component template.

LANGUAGE: HTML
CODE:
<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Configuring Stencil Output Target for VS Code Documentation
DESCRIPTION: This snippet shows how to add the 'docs-vscode' output target to the Stencil configuration file. It generates a JSON file containing custom element information for VS Code.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Creating NodeJS Logger for Stencil Compiler
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the compiler and dev-server. It requires the NodeJS 'process' object as an argument.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Installing Vitest and Dependencies for Stencil Testing
DESCRIPTION: Command to install Vitest and necessary dependencies for testing Stencil components in the browser.

LANGUAGE: bash
CODE:
npm install vitest @vitest/browser unplugin-stencil webdriverio

----------------------------------------

TITLE: Component Implementation with Asset Directory Configuration
DESCRIPTION: Demonstrates how to configure and use assets in a Stencil component using the assetsDirs configuration and getAssetPath API.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Resetting Stencil Store in Test Environment
DESCRIPTION: Example of how to reset the store state between test specs using the dispose() method in a beforeEach hook.

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: Handling Service Worker Updates in Stencil Component
DESCRIPTION: Stencil component code to handle Service Worker updates, showing a toast notification when an update is available and allowing users to reload.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    // If there is no waiting registration, this is the first service
    // worker being installed.
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Implementing formResetCallback in Stencil
DESCRIPTION: This example shows how to implement the formResetCallback to reset a form-associated component's internal state and validation when the form is reset.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-reset-cb',
  formAssociated: true,
})
export class MyComponent {
  @AttachInternals()
  internals: ElementInternals;

  formResetCallback() {
    this.internals.setValidity({});
    this.internals.setFormValue("");
  }

  render() {
    return <input type="text"></input>
  }
}

----------------------------------------

TITLE: Adding Overview to Stencil Component
DESCRIPTION: Add a JSDoc comment to the component class to provide an overview in the generated README.

LANGUAGE: tsx
CODE:
/**
 * A simple component for formatting names
 *
 * This component will do some neat things!
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { }

----------------------------------------

TITLE: Configuring Copy Task for WWW Output Target
DESCRIPTION: This example demonstrates how to configure a copy task within the 'www' output target to copy an entire directory from 'src/images' to 'www/images'.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    copy: [
      { src: 'images' }
    ]
  }
]

----------------------------------------

TITLE: Enabling Static Site Generation Build in Stencil
DESCRIPTION: Command to enable prerendering during the Stencil build process using the --prerender flag.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Configuring Stencil for TypeScript Support
DESCRIPTION: Shows how to configure the Stencil output target to generate TypeScript declarations for component libraries.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      generateTypeDeclarations: true,
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Configuring Stencil Output Target for VS Code Integration
DESCRIPTION: This snippet shows how to add the 'docs-vscode' output target to the Stencil configuration file. It generates a JSON file containing custom element information for VS Code.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Running Stencil CLI
DESCRIPTION: Executes the CLI with provided initialization options. Used by Stencil's default bin/stencil file but can be used externally.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Event Handling in Stencil
DESCRIPTION: Demonstrates handling user input events in Stencil components using arrow functions.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Implementing CSP Nonce in Stencil Dist Output
DESCRIPTION: Example showing how to set up CSP nonce in a Stencil dist output target within an Angular application's entrypoint. Uses the setNonce helper function to apply nonces to all script and style tags.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Stencil Copy Task Configuration
DESCRIPTION: Configuration example for copying static assets using Stencil's copy task system

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
};

----------------------------------------

TITLE: Private Method Implementation
DESCRIPTION: Demonstrates how to implement private methods in a Stencil component that don't require the @Method decorator or async implementation.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Configuring Stencil docs-vscode Output Target
DESCRIPTION: Configuration code for enabling the docs-vscode output target in Stencil's config file. This generates custom element documentation in JSON format for VS Code integration.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Configuring VS Code Node Debugger for Stencil Prerendering
DESCRIPTION: Launch configuration for debugging Stencil's prerender process in Node.js environment. Sets up the necessary arguments and inspector protocol.

LANGUAGE: json
CODE:
{
  "type": "node",
  "request": "launch",
  "name": "Prerender",
  "args": [
    "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
    "prerender",
    "${workspaceFolder}/dist/hydrate/index.js",
    "--max-workers=0",
    "--config=${workspaceFolder}/stencil.config.ts"
  ],
  "protocol": "inspector"
}

----------------------------------------

TITLE: Basic Screenshot Comparison in Stencil E2E Tests
DESCRIPTION: Simple example of setting up a Stencil end-to-end test with Puppeteer for screenshot comparison. It demonstrates how to create a new page, set content, and compare screenshots.

LANGUAGE: javascript
CODE:
it('render something', async () => {
  const page: E2EPage = await newE2EPage();
  await page.setContent('<my-cmp></my-cmp>');
  await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
});

----------------------------------------

TITLE: Nested Component Directory Structure Example
DESCRIPTION: Shows the directory structure created when generating a new Stencil component in a subfolder

LANGUAGE: plain
CODE:
src
└── components
    └── pages
        └── page-home
            ├── page-home.css
            ├── page-home.e2e.ts
            ├── page-home.spec.ts
            └── page-home.tsx

----------------------------------------

TITLE: Custom Service Worker Boilerplate
DESCRIPTION: Basic structure for a custom Service Worker file, including Workbox importScript and precaching setup.

LANGUAGE: javascript
CODE:
// change to the version you get from `npm ls workbox-build`
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Setting Component Props via JavaScript
DESCRIPTION: Example of manually setting object and array props on a Stencil component using vanilla JavaScript.

LANGUAGE: markup
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Running Stencil CLI
DESCRIPTION: Executes the CLI with given initialization options. Returns a Promise that resolves to void.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation
DESCRIPTION: Example showing how to configure primary package output target validation in Stencil, including setting the validation flag and designating a primary output target.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Proper Component Module Organization in TypeScript
DESCRIPTION: Correct way to organize component code by separating utility functions into their own modules and maintaining one component per file.

LANGUAGE: tsx
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Stencil Copy Task Configuration
DESCRIPTION: Configuration example showing how to copy asset files using Stencil's copy task system.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
};

----------------------------------------

TITLE: Using Skip Function in Playwright Tests with TypeScript
DESCRIPTION: Shows how to use the skip function to conditionally skip tests based on browser type or component mode in Stencil Playwright tests.

LANGUAGE: typescript
CODE:
test('my-test', ({ page, skip }) => {
    // Skip tests for certain browsers
    skip.browser('firefox', 'This behavior is not available on Firefox');

    // Skip tests for certain modes
    skip.mode('md', 'This behavior is not available in Material Design');

    ...
})

----------------------------------------

TITLE: Asset Directory Configuration in Stencil
DESCRIPTION: Demonstrates how to configure and use asset directories in a Stencil component for handling static files.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Using Web Worker Functions in Stencil Components
DESCRIPTION: Demonstrates how to import and use Web Worker functions within a Stencil component, showcasing Stencil's automatic proxy creation.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Handling User Input
DESCRIPTION: Examples of handling button clicks and input changes using event handlers in JSX.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

LANGUAGE: tsx
CODE:
export class MyComponent {
  private inputChanged = (event: Event) => {
    console.log('input changed: ', (event.target as HTMLInputElement).value);
  }

  render() {
    return (
      <input onChange={this.inputChanged}/>
    );
  }
}

----------------------------------------

TITLE: Retrieving Stencil Element Reference
DESCRIPTION: Illustrates how to use the getElement function to retrieve a Stencil element reference for a given DOM element. This example shows how to wait for a component to be ready before executing code.

LANGUAGE: typescript
CODE:
import { getElement } from '@stencil/core'

const stencilComponent = getElement(document.querySelector('my-cmp'))
if (stencilComponent) {
  stencilComponent.componentOnReady().then(() => { ... })
}

----------------------------------------

TITLE: Configuring Stencil for CI/CD Environments
DESCRIPTION: Shows how to configure Stencil for Continuous Integration/Deployment environments, specifically addressing issues with Headless Chrome in GitLab CI by modifying the stencil.config.ts file.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'Foo',
  testing: {
    browserArgs: ['--no-sandbox', '--disable-setuid-sandbox'],
  },
  outputTargets: [
    { type: 'dist' },
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Starting Stencil Dev Server in TypeScript
DESCRIPTION: This function starts the Stencil development server. It takes a configuration object, a logger, and an optional watcher as parameters. It returns a Promise that resolves to a DevServer instance.

LANGUAGE: typescript
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Element Decorator Usage
DESCRIPTION: Demonstrates how to use the @Element decorator to access the host element within a component class.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Disabling Service Worker in Stencil Config
DESCRIPTION: Example of how to disable the Service Worker generation in a Stencil project by setting the serviceWorker property to null in the config.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Creating Vue Plugin for Component Registration
DESCRIPTION: Plugin implementation to register custom elements in a Vue application.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: Demonstrates how to write CSS for a component using Shadow DOM, including the use of the :host pseudo-class selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Using Angular Wrapper Components in Angular Application
DESCRIPTION: Example of importing and using the generated Angular wrapper components in an Angular application.

LANGUAGE: typescript
CODE:
import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

----------------------------------------

TITLE: Accessing Compiler Dependencies
DESCRIPTION: Describes the 'dependencies' array property, which provides information about the versions of dependencies used by the compiler.

LANGUAGE: typescript
CODE:
dependencies: CompilerDependency[]

----------------------------------------

TITLE: VS Code Settings Configuration for Custom HTML Data
DESCRIPTION: JSON configuration for VS Code settings to enable custom element support. Adds the generated custom data file to VS Code's HTML language service through the html.customData setting.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Configuring VS Code Launch Settings for Prerender Debugging
DESCRIPTION: Launch configuration for debugging Stencil's prerender process using Node.js debugger.

LANGUAGE: json
CODE:
{
  "type": "node",
  "request": "launch",
  "name": "Prerender",
  "args": [
    "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
    "prerender",
    "${workspaceFolder}/dist/hydrate/index.js",
    "--max-workers=0",
    "--config=${workspaceFolder}/stencil.config.ts"
  ],
  "protocol": "inspector"
}

----------------------------------------

TITLE: Example Telemetry Data Structure in JavaScript
DESCRIPTION: Shows the structure and content of a typical telemetry event captured by Stencil CLI. Includes information about build configuration, system details, and dependency versions.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Configuring Asset Directories in Stencil Components
DESCRIPTION: Shows how to use the assetsDirs option in the @Component decorator to specify asset directories for a component.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Parsing Command-line Flags for Stencil CLI in TypeScript
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object. It's used internally by the CLI to process arguments.

LANGUAGE: typescript
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Configuring assetsDirs in Stencil Component
DESCRIPTION: Shows how to configure the assetsDirs option in a Stencil component to specify directories containing required assets and use getAssetPath to reference them.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Basic Stencil Output Target Configuration in TypeScript
DESCRIPTION: Basic configuration example showing how to set up multiple output targets in a Stencil config file. Demonstrates configuring both dist and www output types.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Updating Vue Library package.json
DESCRIPTION: Changes to be made in the package.json file of the Vue component library.

LANGUAGE: json
CODE:
{
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "scripts": {
    "test": "echo \"Error: run tests from root\" && exit 1",
    "build": "npm run tsc",
    "tsc": "tsc -p . --outDir ./dist"
  },
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "stencil-library": "*"
  }
}

----------------------------------------

TITLE: Generating README Files with Stencil Build Command
DESCRIPTION: Use the Stencil build command to generate README files for components. The --watch flag can be used for automatic updates.

LANGUAGE: bash
CODE:
npx stencil build

LANGUAGE: bash
CODE:
npm stencil build --watch

----------------------------------------

TITLE: Creating Node System for Stencil Compiler in TypeScript
DESCRIPTION: Generates a system based on NodeJS APIs for the Stencil compiler, handling file system operations and content hashing. It requires the NodeJS process object as an argument.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Adding Custom Content to Generated README
DESCRIPTION: Add custom markdown content above the auto-generated section in a component's README file.

LANGUAGE: markdown
CODE:
Custom content goes here!
<!-- Auto Generated Below -->

----------------------------------------

TITLE: Accessing Stencil Component in TypeScript
DESCRIPTION: Demonstrates how to access and manipulate a Stencil-generated Web Component using its automatically generated TypeScript interface. This example shows how to query for an ion-button element and set its 'fill' property.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Reloading App on Service Worker Update
DESCRIPTION: Adds an event listener to reload the app when a new Service Worker takes control, ensuring the latest version is served.

LANGUAGE: typescript
CODE:
componentWillLoad() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker
      .getRegistration()
      .then(registration => {
        if (registration?.active) {
          navigator.serviceWorker.addEventListener(
            'controllerchange',
            () => window.location.reload()
          );
        }
      })
  }
}

----------------------------------------

TITLE: Stencil Project Structure Example
DESCRIPTION: Shows the typical file structure for a Stencil project with end-to-end test files.

LANGUAGE: tree
CODE:
stencil-project-root
└── src
    └── components
        ├── my.component.tsx
        └── test <-- directory containing test files
            ├── my-component.e2e.ts
            └── my-component.e2e.html

----------------------------------------

TITLE: Using Host as Fragment in Stencil TSX
DESCRIPTION: Shows how to use the Host component as a fragment to render multiple elements at the root level of a Stencil component without adding extra DOM elements.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Git Repository Initialization
DESCRIPTION: Commands to initialize a new git repository for a Stencil project.

LANGUAGE: bash
CODE:
git init
git add -A
git commit -m "initialize project using stencil cli"

----------------------------------------

TITLE: Managing Complex Types with @State
DESCRIPTION: Demonstrates using @State with complex types and arrays, showing proper update patterns for triggering rerenders.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Implementing Hydrate Options in Prerender Config
DESCRIPTION: Example demonstrating how to implement the hydrateOptions hook in the prerender config to set per-page hydration options.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Disabling Service Worker in Stencil Config
DESCRIPTION: Configuration to disable service worker generation in a Stencil project by setting the serviceWorker property to null.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Implementing Controlled Component Pattern with Ionic in Ember
DESCRIPTION: Example of a controlled component pattern using an Ionic toggle component with state management in an Ember component.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Conditional Browser Runtime Code in Stencil
DESCRIPTION: Demonstration of using Build.isBrowser conditional to execute code specifically in browser or prerender environments.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Resolving Asset Paths with getAssetPath in TypeScript
DESCRIPTION: Demonstrates how to use the getAssetPath API to resolve asset paths relative to the asset base path in a Stencil component.

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Configuring Node.js Debugging in VS Code for Stencil Prerender
DESCRIPTION: Launch configuration for debugging Stencil's prerender process in Node.js environment. Configures the debug process with necessary arguments and inspector protocol.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "Prerender",
      "args": [
        "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
        "prerender",
        "${workspaceFolder}/dist/hydrate/index.js",
        "--max-workers=0",
        "--config=${workspaceFolder}/stencil.config.ts"
      ],
      "protocol": "inspector"
    }
  ]
}

----------------------------------------

TITLE: Configuring docs-json Output Target in Stencil Config
DESCRIPTION: Configuration for automatically generating JSON documentation on each build. This adds the docs-json output target to the Stencil configuration file.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Controlled Ionic Component with State Management
DESCRIPTION: Complete example of an Ionic toggle component with two-way binding and event handling in Ember

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Running Stencil CLI with Options in TypeScript
DESCRIPTION: Executes the Stencil CLI with given options. This function is used by Stencil's default bin/stencil file but can also be used externally. It returns a Promise that resolves to void.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Configuring VS Code Node Debugging for Stencil Prerender
DESCRIPTION: Launch configuration for debugging Stencil's prerender process in Node.js environment with maximum debugging visibility.

LANGUAGE: json
CODE:
{
  "type": "node",
  "request": "launch",
  "name": "Prerender",
  "args": [
    "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
    "prerender",
    "${workspaceFolder}/dist/hydrate/index.js",
    "--max-workers=0",
    "--config=${workspaceFolder}/stencil.config.ts"
  ],
  "protocol": "inspector"
}

----------------------------------------

TITLE: Listening for appload Event in TypeScript
DESCRIPTION: Shows how to listen for the special 'appload' event emitted when the app and all its child components have finished loading. The event is listened for on the window object and includes the namespace of the app that emitted it.

LANGUAGE: typescript
CODE:
window.addEventListener('appload', (event) => {
  console.log(event.detail.namespace);
});

----------------------------------------

TITLE: Running Stencil CLI with Options
DESCRIPTION: Executes the Stencil CLI with given options. This function is used by the default bin/stencil file but can also be used externally.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Mocking a Helper Function in Stencil with TypeScript
DESCRIPTION: This code creates a mock for the 'getRandomInt' function. It's placed in a __mocks__ folder to automatically replace the original implementation during testing.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3
DESCRIPTION: Example configuration for enabling path alias transformation in Stencil v3.1.0 config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Prop Mutability in Stencil
DESCRIPTION: This example demonstrates how to make a prop mutable using the mutable option in the @Prop() decorator.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class ToDoListItem {
   @Prop({ mutable: true }) thingToDo: string;

   componentDidLoad() {
      this.thingToDo = 'Ah! A new value!';
   }
}

----------------------------------------

TITLE: Configuring Stencil Output Targets in TypeScript
DESCRIPTION: This snippet demonstrates how to configure multiple output targets in a Stencil project's configuration file. It shows setting up both 'dist' and 'www' output types.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Displaying SemVer Format in Markdown
DESCRIPTION: Shows the Semantic Versioning format using inline code in Markdown.

LANGUAGE: markdown
CODE:
<code>major.minor.patch.</code>

----------------------------------------

TITLE: Creating Node System in Stencil CLI
DESCRIPTION: Initializes a system instance based on NodeJS APIs for file system operations and crypto functionality. Requires the NodeJS process object as input and returns a CompilerSystem object.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Service Worker Update Handler in Stencil Component
DESCRIPTION: Implementation of service worker update handling with toast notification in a Stencil component.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Writing E2E Tests with page.goto() in Stencil Playwright
DESCRIPTION: Demonstrates how to write an end-to-end test using the page.goto() method to load a pre-defined HTML template in Stencil Playwright.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // The path here is the path to the www output relative to the dev server root directory
    await page.goto('/components/my-component/test/my-component.e2e.html');

    // Rest of test
    const component = await page.locator('my-component');
    await expect(component).toHaveText(`Hello World! I'm Stencil`);
  });
});

----------------------------------------

TITLE: Requesting Notification Permissions (JavaScript)
DESCRIPTION: Code snippet demonstrating how to request notification permissions from the user in a web application.

LANGUAGE: javascript
CODE:
if ('Notification' in window && 'serviceWorker' in navigator) {
  Notification.requestPermission(status => {
    // status will either be 'default', 'granted' or 'denied'
    console.log(`Notification permissions have been ${status}`);
  });
}

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class
DESCRIPTION: Example showing how to create a custom screenshot connector by extending the base ScreenshotConnector class from Stencil core.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Service Using Utility Function
DESCRIPTION: Example service that uses the getRandomInt utility function, demonstrating code that will be mocked.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Service Using Utility Function
DESCRIPTION: Example service that uses the getRandomInt utility function, demonstrating code that will be mocked.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Installing Vitest and Dependencies for Stencil Testing
DESCRIPTION: This command installs Vitest, its browser testing plugin, Stencil integration, and WebdriverIO for browser management.

LANGUAGE: bash
CODE:
npm install vitest @vitest/browser unplugin-stencil webdriverio

----------------------------------------

TITLE: Documenting Component Slots
DESCRIPTION: Example of documenting component slots using JSDoc tags in TypeScript/JSX components

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Defining a Stencil Component with a Mocked Method
DESCRIPTION: This snippet defines a Stencil component 'Foo' with a method 'bar' that uses the 'getRandomInt' function. This component will be used in the E2E test example.

LANGUAGE: typescript
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Defining Props in Stencil Component
DESCRIPTION: This TypeScript code defines props for a Stencil component. It shows how to declare object and array props using the @Prop decorator.

LANGUAGE: tsx
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Optimizing CSS in Stencil
DESCRIPTION: Shows the utility function used by the compiler to optimize CSS.

LANGUAGE: typescript
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Configuring Supplemental Public Types in Stencil
DESCRIPTION: Configuration for including additional type documentation in the JSON output

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json',
      supplementalPublicTypes: 'src/public-interfaces.ts',
    }
  ]
};

----------------------------------------

TITLE: Configuring assetsDirs in a Stencil Component
DESCRIPTION: Shows how to use the assetsDirs option in a Stencil component decorator to specify asset directories and use getAssetPath to load images.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Inline Mocking in a Test File using TypeScript
DESCRIPTION: Alternative approach to mocking where the mock is defined inline in the test file using Jest's mock function. This method doesn't require creating a separate mock file.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Installing @stencil/store via npm
DESCRIPTION: Command to install the @stencil/store package as a development dependency using npm.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Embedding Components in Stencil
DESCRIPTION: These examples demonstrate how to compose and embed Stencil components within each other using JSX syntax.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Basic Web Worker Implementation in Vanilla JavaScript
DESCRIPTION: Demonstrates the basic usage of Web Workers using the native browser API with postMessage communication.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Custom Service Worker Configuration in Stencil
DESCRIPTION: Example of customizing service worker configuration in Stencil's config file to include additional file types.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Initializing Lerna Workspace
DESCRIPTION: Commands to initialize a Lerna workspace and install dependencies.

LANGUAGE: bash
CODE:
lerna init

npm install

npm install typescript @types/node --save-dev

----------------------------------------

TITLE: Creating a JSX Utility for Stencil Component Testing
DESCRIPTION: This utility file provides functions for creating elements and fragments using JSX syntax in tests.

LANGUAGE: typescript
CODE:
export const createElement = (tag, props, ...children) => {
    if (typeof tag === 'function') {
        return tag(props, ...children)
    }
    const element = document.createElement(tag)

    Object.entries(props || {}).forEach(([name, value]) => {
        if (name.startsWith('on') && name.toLowerCase() in window) {
            element.addEventListener(name.toLowerCase().substr(2), value)
        } else {
            element.setAttribute(name, value.toString())
        }
    })

    children.forEach((child) => {
        appendChild(element, child)
    })

    return element
}

export const appendChild = (parent, child) => {
    if (Array.isArray(child)) {
        child.forEach((nestedChild) => appendChild(parent, nestedChild))
    } else {
        parent.appendChild(child.nodeType ? child : document.createTextNode(child))
    }
}

export const createFragment = (_, ...children) => {
    return children
}

----------------------------------------

TITLE: Disabling Service Worker in Stencil Config (TypeScript)
DESCRIPTION: Shows how to disable the Service Worker generation in a Stencil project by setting the serviceWorker property to null in the config.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Basic Web Worker Implementation in Vanilla JavaScript
DESCRIPTION: Demonstrates the basic usage of Web Workers using the native browser API with postMessage communication.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Running Static Build in Stencil
DESCRIPTION: This command enables prerendering in Stencil's build process using the --prerender flag.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Example Stats Output Structure (JSON)
DESCRIPTION: Sample JSON output structure showing the format of generated stats data, including compiler information, app details, components, and bundle information.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [],
    "es5": [],
    "system": [],
    "commonjs": []
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        }
      ]
    }
  ],
  "entries": [
    {
      "cmps": [],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: HTML Component Tag Examples
DESCRIPTION: Shows proper component naming conventions with examples of incorrect and correct prefix usage.

LANGUAGE: markup
CODE:
<stencil-component>
<stnl-component>

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

LANGUAGE: markup
CODE:
<ion-card>
<ion-card-header>
<ion-card-content>

----------------------------------------

TITLE: Initializing a Lerna Monorepo
DESCRIPTION: These commands initialize a Lerna workspace and install necessary dependencies.

LANGUAGE: bash
CODE:
lerna init

npm install

npm install typescript @types/node --save-dev

----------------------------------------

TITLE: Optimizing CSS in Stencil
DESCRIPTION: Shows the utility function used by the compiler to optimize CSS.

LANGUAGE: typescript
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Resolving Asset Paths with getAssetPath in Stencil
DESCRIPTION: Demonstrates how to use the getAssetPath API to resolve asset paths relative to the asset base path in a Stencil project.

LANGUAGE: typescript
CODE:
// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff'); 

----------------------------------------

TITLE: Custom Service Worker Boilerplate
DESCRIPTION: Boilerplate code for a custom Service Worker in Stencil, including Workbox import and precache manifest injection point.

LANGUAGE: javascript
CODE:
// change to the version you get from `npm ls workbox-build`
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Calling a Public Method on a Stencil Component
DESCRIPTION: This snippet shows how to call a public method on a Stencil component. It uses the whenDefined method of the custom element registry to ensure the component is defined before calling the method.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Configuring Stencil Stats Generation in Package Scripts
DESCRIPTION: Shows how to set up npm scripts to generate stats data using the --stats flag with optional file path specification.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Implementing Document Hydration
DESCRIPTION: Example function showing how to use hydrateDocument to process a document and handle the results

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

export function hydrateComponents(doc) {
  return hydrateDocument(doc)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: JavaScript code to import all components from the Ionic Framework in an Ember application's main file.

LANGUAGE: javascript
CODE:
import '@ionic/core'; // installs all the components from Ionic Framework

----------------------------------------

TITLE: Configuring Stencil Output Target for Hydrate App
DESCRIPTION: Configuration snippet showing how to add the dist-hydrate-script output target to stencil.config.ts to enable hydration functionality.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Generating a Stencil Component using CLI
DESCRIPTION: Demonstrates how to use the Stencil CLI to generate a new component with a specific tag name, skipping the interactive generator.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Disabling transformAliasedImportPathsInCollection in Stencil v4.0.0
DESCRIPTION: Configuration to disable the transformAliasedImportPathsInCollection feature for the dist output target in Stencil v4.0.0. This feature is now enabled by default.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Helper Methods Export Example
DESCRIPTION: Default helper methods exported in the index.js file of the output directory.

LANGUAGE: javascript
CODE:
export { setAssetPath, setPlatformOptions } from '@stencil/core/internal/client';

----------------------------------------

TITLE: Running Stencil CLI with Options
DESCRIPTION: Executes the Stencil CLI with given options. This function is used by Stencil's default bin/stencil file but can also be used externally.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Creating Compiler System
DESCRIPTION: Function signature for creating an in-memory compiler system.

LANGUAGE: tsx
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Node Polyfills Configuration in Stencil
DESCRIPTION: Configuration example for adding Node polyfills to a Stencil project using rollup-plugin-node-polyfills.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Specifying Output Directory for README Files
DESCRIPTION: Set the output directory for generated README files using the dir property in the output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      dir: 'output'
    }
  ]
};

----------------------------------------

TITLE: Stencil Configuration for E2E Testing
DESCRIPTION: Configuration setup for Stencil project to enable e2e testing with proper file copying

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'test-app',
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null,
      copy: [{ src: '**/test/*.html' }, { src: '**/test/*.css' }],
    },
  ],
};

----------------------------------------

TITLE: Setting Nonce in Stencil Custom Elements Output Target for Angular
DESCRIPTION: This example shows how to set a nonce for all script and style tags when using the Stencil custom elements output target in an Angular application. It uses the setNonce helper function exported from the components index file.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Styling Host Element with Shadow DOM in CSS
DESCRIPTION: This snippet shows how to style the host element when using Shadow DOM, using the :host selector.

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Screenshot Connector Interface Definition (TSX)
DESCRIPTION: This snippet defines the interface for the ScreenshotConnector, listing all the methods that can be overridden in a custom implementation. It includes methods for initializing, pulling, completing, and publishing builds, as well as managing the screenshot cache.

LANGUAGE: tsx
CODE:
export interface ScreenshotConnector {
  initBuild(opts: ScreenshotConnectorOptions): Promise<void>;

  pullMasterBuild(): Promise<void>;

  getMasterBuild(): Promise<ScreenshotBuild>;

  getScreenshotCache(): Promise<ScreenshotCache>;

  completeBuild(masterBuild: ScreenshotBuild): Promise<ScreenshotBuildResults>;
  
  publishBuild(buildResults: ScreenshotBuildResults): Promise<ScreenshotBuildResults>;

  updateScreenshotCache(screenshotCache: ScreenshotCache, buildResults: ScreenshotBuildResults): Promise<ScreenshotCache>;

  generateJsonpDataUris(build: ScreenshotBuild): Promise<void>;
}

----------------------------------------

TITLE: Exporting Vue Component Library
DESCRIPTION: Exporting generated component wrappers and Vue plugin from the Vue component library.

LANGUAGE: typescript
CODE:
export * from './components';
export * from './plugin';

----------------------------------------

TITLE: Creating a Worker Pool in Stencil
DESCRIPTION: Shows how to create a pool of workers in Stencil using the workerPath. This approach allows for manual creation and management of multiple worker instances.

LANGUAGE: tsx
CODE:
import { workerPath } from '../../stuff.worker.ts?worker';

const workerPool = [
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
];

----------------------------------------

TITLE: Adding Vue Output Target to Stencil Config
DESCRIPTION: Configuration for the Vue output target in the Stencil project's stencil.config.ts file.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Configuring Stencil Project for E2E Testing
DESCRIPTION: Shows the configuration in stencil.config.ts for setting up the project structure and output targets for end-to-end testing.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'test-app',
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null,
      copy: [{ src: '**/test/*.html' }, { src: '**/test/*.css' }],
    },
  ],
};

----------------------------------------

TITLE: Configuring Vitest for Stencil Component Testing
DESCRIPTION: This configuration enables browser testing with Vitest and integrates the Stencil compiler.

LANGUAGE: typescript
CODE:
import stencil from 'unplugin-stencil/vite'
import { defineConfig } from 'vitest/config'

export default defineConfig({
    test: {
        browser: {
            enabled: true,
            headless: true,
            name: 'chrome'
        },
    },
    plugins: [stencil()]
})

----------------------------------------

TITLE: Transpiling Stencil Code with TypeScript
DESCRIPTION: Function signature for the transpile() method, which converts Stencil source code from TypeScript to JavaScript. It handles transpilation without bundling or minification.

LANGUAGE: typescript
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Configuring Rollup for Asset Management
DESCRIPTION: Example showing how to use rollup-plugin-copy to manage assets in a Stencil project

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Optimizing JavaScript with Stencil Compiler
DESCRIPTION: Shows the function signature for optimizing JavaScript using the Stencil Compiler's utility function, which applies minification optimizations based on the JavaScript target.

LANGUAGE: javascript
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Configuring www Output Target in Stencil
DESCRIPTION: Basic configuration example for setting up the www output target in a Stencil project. This is the default output target if none is specified and is useful for building and testing components during development.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: Use the @slot JSDoc tag to document slots in Stencil components.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Initializing Monorepo Structure for Stencil and Vue Libraries
DESCRIPTION: Shows the recommended project structure for a monorepo containing both Stencil and Vue component libraries.

LANGUAGE: plaintext
CODE:
top-most-directory/
└── packages/
    ├── vue-library/
    │   └── lib/
    │       ├── plugin.ts
    │       └── index.ts
    └── stencil-library/
        ├── stencil.config.js
        └── src/components

----------------------------------------

TITLE: Custom Styling Documentation
DESCRIPTION: Example of documenting CSS custom properties in a Stencil component

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Loading Stencil Configuration
DESCRIPTION: Demonstrates the function for loading and transforming raw config information into a usable config object for the compiler and dev-server.

LANGUAGE: tsx
CODE:
loadConfig(init?: LoadConfigInit): Promise<LoadConfigResults>

----------------------------------------

TITLE: Styling Host Element in CSS
DESCRIPTION: Shows how to style the host element using CSS when shadow DOM is not used.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

----------------------------------------

TITLE: Demonstrating Asset Path Resolution in Stencil
DESCRIPTION: Example showing how getAssetPath resolves different asset paths relative to the build directory

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Subscribing User to Push Notifications
DESCRIPTION: Function to subscribe a user to push notifications by registering with the browser's push service and obtaining a subscription object.

LANGUAGE: javascript
CODE:
async function subscribeUser() {
  if ('serviceWorker' in navigator) {
    const registration = await navigator.serviceWorker.ready;

    const subscription = await registration.pushManager
      .subscribe({ userVisibleOnly: true })
      .catch(console.error);

    if (!subscription) {
      return;
    }

    // the subscription object is what we want to send to our backend
    console.log(subscription.endpoint);
  }
}

----------------------------------------

TITLE: Configuring Vue Output Target in Stencil Config
DESCRIPTION: Configuration for the Vue output target in the Stencil component library's config file.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Styling Host Element in Shadow DOM
DESCRIPTION: Demonstrates how to style the host element when using Shadow DOM with the :host selector.

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Updating Stencil Core Package
DESCRIPTION: Command to update the @stencil/core package to the latest version using npm.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Setting Document Title Using Prerender Config in Stencil
DESCRIPTION: This code snippet demonstrates how to use the afterHydrate hook in Stencil's Prerender Config to set the document title based on the URL pathname. It utilizes the PrerenderConfig interface from @stencil/core.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Configuring Custom Service Worker in Stencil
DESCRIPTION: Example of how to specify a custom Service Worker file in the Stencil config using the swSrc property.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        swSrc: 'src/sw.js'
      }
    }
  ]
};

----------------------------------------

TITLE: React Library TypeScript Configuration
DESCRIPTION: Project-specific TypeScript configuration for the React component library

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2015"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2015",
    "skipLibCheck": true,
    "jsx": "react",
    "allowSyntheticDefaultImports": true,
    "declarationDir": "./dist/types"
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: Implementing Document Hydration
DESCRIPTION: Example function showing how to use hydrateDocument to process a document and handle the results

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

export function hydrateComponents(doc) {
  return hydrateDocument(doc)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Configuring Stencil Copy Tasks
DESCRIPTION: Configuration example for copying assets using Stencil's copy tasks feature

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ],
};

----------------------------------------

TITLE: Synchronous Transpilation with Stencil Core Compiler
DESCRIPTION: Presents the function signature for transpileSync(), which is the synchronous version of transpile(). It requires TypeScript to be globally available in browser environments.

LANGUAGE: typescript
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Creating and Configuring a Stencil Store
DESCRIPTION: Example of creating a store with initial state, defining derived state, and setting up a change listener. This store manages clicks, seconds, and calculated squared clicks.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: Demonstrates how to add Sass support to a Stencil project by configuring the @stencil/sass plugin in the config file. This shows the basic plugin array configuration pattern.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Exporting Default Function in Global Script
DESCRIPTION: Example of exporting a default function in a global script file for Stencil configuration.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: Exporting Generated React Components
DESCRIPTION: This snippet shows how to export the generated React component wrappers from the React library's entry file. It exports all components from the stencil-generated file.

LANGUAGE: typescript
CODE:
export * from './components/stencil-generated';
export { defineCustomElements } from "stencil-library/loader";

----------------------------------------

TITLE: Enabling Deprecated Dynamic Import Shim in Stencil v3
DESCRIPTION: Configuration to enable the deprecated dynamic import shim in Stencil v3. This option is renamed to indicate its deprecated status.

LANGUAGE: typescript
CODE:
// stencil.config.ts
import { Config } from '@stencil/core';
export const config: Config = {
  extras: {
    __deprecated__dynamicImportShim: true
  }
};

----------------------------------------

TITLE: Reflecting Props to Attributes in Stencil
DESCRIPTION: This snippet shows how to reflect prop values to DOM attributes using the reflect option.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop({ reflect: false }) isComplete: boolean = false;
    @Prop({ reflect: true }) timesCompletedInPast: number = 2;
    @Prop({ reflect: true }) thingToDo: string = "Read Reflect Section of Stencil Docs";
}

----------------------------------------

TITLE: Subscribing User to Push Notifications
DESCRIPTION: JavaScript function to subscribe a user to push notifications using the browser's push service.

LANGUAGE: javascript
CODE:
async function subscribeUser() {
  if ('serviceWorker' in navigator) {
    const registration = await navigator.serviceWorker.ready;

    const subscription = await registration.pushManager
      .subscribe({ userVisibleOnly: true })
      .catch(console.error);

    if (!subscription) {
      return;
    }

    // the subscription object is what we want to send to our backend
    console.log(subscription.endpoint);
  }
}

----------------------------------------

TITLE: Configuring Meta Tags with Stencil Prerender Config
DESCRIPTION: Example showing how to use the afterHydrate hook in Stencil's PrerenderConfig to dynamically set document title based on URL pathname during static site generation. The hook receives a standard Document object and URL object as parameters.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Asset Resolution with getAssetPath in TypeScript
DESCRIPTION: Demonstrates how to use getAssetPath to resolve asset paths relative to the build directory

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Configuring React Output Target in Stencil Config
DESCRIPTION: Add the reactOutputTarget configuration to the outputTargets array in the Stencil config file. This generates React component wrappers for the Stencil components.

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    reactOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../react-library/lib/components/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Configuring Stencil for CI/CD E2E Testing
DESCRIPTION: Demonstrates how to configure Stencil for running E2E tests in a CI/CD environment, specifically for GitLab CI. It shows how to set browser arguments to overcome sandbox restrictions.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'Foo',
  testing: {
    browserArgs: ['--no-sandbox', '--disable-setuid-sandbox'],
  },
  outputTargets: [
    { type: 'dist' },
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Configuring Stencil React Output Target
DESCRIPTION: Configuration for generating React component wrappers in Stencil config

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    reactOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../react-library/lib/components/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Using WebdriverIO Matchers for Assertions
DESCRIPTION: This snippet demonstrates the recommended way to use WebdriverIO-specific matchers for making assertions in tests. It shows how to use the toHaveText matcher for checking component content.

LANGUAGE: typescript
CODE:
await expect($('my-component'))
    .toHaveText(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)

----------------------------------------

TITLE: Stencil Component Implementation
DESCRIPTION: Example Stencil component using the getRandomInt helper function

LANGUAGE: tsx
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Stencil Configuration for E2E Testing
DESCRIPTION: Configuration setup in stencil.config.ts for handling end-to-end test files and HTML templates.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'test-app',
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null,
      copy: [{ src: '**/test/*.html' }, { src: '**/test/*.css' }],
    },
  ],
};

----------------------------------------

TITLE: E2E Testing with Mocking in Stencil using TypeScript
DESCRIPTION: This E2E test demonstrates how to use mocking in Stencil E2E tests. It uses newSpecPage to create a virtual DOM and tests the mocked 'bar' method of the 'Foo' component.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Documenting Component Properties in Stencil
DESCRIPTION: This TypeScript snippet demonstrates how to add a description to a @Prop decorator in Stencil, which will be used for auto-generated documentation.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Importing and Exporting Generated Angular Wrappers
DESCRIPTION: TypeScript code showing how to import and export the generated Angular component wrappers in the main Angular module.

LANGUAGE: typescript
CODE:
import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Running WebdriverIO Tests
DESCRIPTION: Command to execute WebdriverIO tests after setup is complete.

LANGUAGE: bash
CODE:
npm run wdio

----------------------------------------

TITLE: Functional Components with Children in Stencil
DESCRIPTION: Shows how to implement a functional component that handles both props and children elements.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Host Element Styling with Shadow DOM
DESCRIPTION: Demonstrates how to style the host element using :host selector when shadow DOM is enabled.

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Running WebdriverIO Tests
DESCRIPTION: Command to execute WebdriverIO tests after setup is complete.

LANGUAGE: bash
CODE:
npm run wdio

----------------------------------------

TITLE: Service Worker Update Handler Component
DESCRIPTION: Implementation of a service worker update handler with toast notification in a Stencil component.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: React Component Library Entry File
DESCRIPTION: Entry point file for the React component library that exports the generated Stencil component wrappers.

LANGUAGE: tsx
CODE:
export * from './components/stencil-generated/components';

----------------------------------------

TITLE: Initializing Git Repository for Stencil Project
DESCRIPTION: Commands to initialize a new Git repository for a Stencil project, add all files, and make an initial commit.

LANGUAGE: bash
CODE:
$ git init
$ git add -A
$ git commit -m "initialize project using stencil cli"

----------------------------------------

TITLE: Accessing Worker Instance Directly in Stencil
DESCRIPTION: Demonstrates how to access the actual Worker instance in Stencil for manual postMessage() usage, while still leveraging Stencil's bundling capabilities.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);

    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Conditional Browser Execution in Stencil
DESCRIPTION: Demonstrates using Build.isBrowser conditional to control code execution during prerendering vs browser runtime.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Displaying SemVer Format in Markdown
DESCRIPTION: Shows the format of Semantic Versioning using inline code blocks in Markdown.

LANGUAGE: markdown
CODE:
<code>major.minor.patch.</code>

----------------------------------------

TITLE: Using a Stencil Component in HTML and TSX
DESCRIPTION: This example shows how to use a Stencil component after compilation in both HTML and TSX files.

LANGUAGE: html
CODE:
<!-- Here we use the component in an HTML file -->
<todo-list></todo-list>

LANGUAGE: tsx
CODE:
{/* Here we use the component in a TSX file */}
<todo-list></todo-list>

----------------------------------------

TITLE: Using getAssetPath in TSX Component
DESCRIPTION: Example showing how to use getAssetPath utility to reference local assets within a component. Useful for handling asset paths in a platform-agnostic way.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Writing an E2E Test with Mocking in Stencil using TypeScript
DESCRIPTION: This example demonstrates how to write an E2E test for a Stencil component using newSpecPage. It shows how to mock a function used in the component and test if the mocked value is returned correctly.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Documenting CSS Variables
DESCRIPTION: Example of documenting CSS variables using JSDoc-style comments in CSS files

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Exporting Prerender Config Object
DESCRIPTION: Exports a config object using the PrerenderConfig interface in the prerender.config.ts file.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Loading Stencil Component via ES Modules
DESCRIPTION: Shows how to import Stencil components using ES Modules in a modern JavaScript approach.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Requesting Notification Permissions
DESCRIPTION: Example of how to request notification permissions from the user, which is necessary before showing push notifications.

LANGUAGE: javascript
CODE:
if ('Notification' in window && 'serviceWorker' in navigator) {
  Notification.requestPermission(status => {
    // status will either be 'default', 'granted' or 'denied'
    console.log(`Notification permissions have been ${status}`);
  });
}

----------------------------------------

TITLE: Styling Host Element
DESCRIPTION: Shows how to style the host element using regular CSS selectors.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

----------------------------------------

TITLE: Creating an In-Memory Compiler System
DESCRIPTION: Shows how to create an in-memory CompilerSystem instance, independent of any platform.

LANGUAGE: tsx
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Example Stats JSON Output for Stencil Project
DESCRIPTION: Provides a comprehensive example of the JSON output generated by the stats feature. It includes details about the compiler, app structure, build options, component information, and dependency graphs.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Setting Object Props via JavaScript
DESCRIPTION: Demonstrates how to manually set object properties on a Stencil component using vanilla JavaScript.

LANGUAGE: markup
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Webpack Configuration for Custom Elements Bundle
DESCRIPTION: Example webpack configuration for consuming a custom elements bundle, including asset copying.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Setting Nonce for Custom Elements Output in Angular
DESCRIPTION: Shows how to use the setNonce helper function to apply a nonce to all script and style tags when consuming the dist-custom-elements output target in an Angular application.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: Demonstrates how to add Sass support to a Stencil project by configuring the @stencil/sass plugin in the config file. This is required since Stencil doesn't include Sass support by default.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: E2E Test Using waitForChanges()
DESCRIPTION: Example showing how to use waitForChanges() to handle component rehydration after state changes.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // Assume we have a template setup with the `my-component` component and a `button`
    await page.goto('/my-component/my-component.e2e.html');

    const button = page.locator('button');
    // Assume clicking the button changes the `@Prop()` values on `my-component`
    button.click();
    await page.waitForChanges();
  });
});

----------------------------------------

TITLE: Jest Test with Inline Mock in TypeScript
DESCRIPTION: Alternative approach using Jest's inline mocking capability instead of a separate mock file.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Creating NodeJS System for Stencil Compiler
DESCRIPTION: Initializes a system instance using NodeJS APIs for file system operations and crypto functionality. Required for compiler file operations and content hashing.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Nested Component Directory Structure
DESCRIPTION: Shows the generated directory structure and files for a nested Stencil component.

LANGUAGE: plain
CODE:
src
└── components
    └── pages
        └── page-home
            ├── page-home.css
            ├── page-home.e2e.ts
            ├── page-home.spec.ts
            └── page-home.tsx

----------------------------------------

TITLE: Configuring Copy Task with Custom Destination
DESCRIPTION: Example demonstrating how to set up a copy task with a custom destination path and build directory for web fonts.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: Demonstrates how to add Sass support to a Stencil project by configuring the @stencil/sass plugin in the project's configuration file.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Defining Object Props in Stencil Component
DESCRIPTION: Illustrates how to define object and array props in a Stencil component using TypeScript decorators.

LANGUAGE: typescript
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Functional Component with Children in Stencil
DESCRIPTION: Illustrates a functional component that accepts both props and children, returning an array of JSX elements.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Adding CSP Nonce Meta Tag for Stencil SSR
DESCRIPTION: This HTML snippet shows how to add a meta tag with a CSP nonce for Server-Side Rendering (SSR) in Stencil. The nonce value should be generated on each page request.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Defining Object and Array Props in Stencil Component
DESCRIPTION: Illustrates how to define object and array props in a Stencil component using the @Prop decorator.

LANGUAGE: tsx
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Accessing Typed Stencil Component in TypeScript
DESCRIPTION: Demonstrates how to use the automatically generated type for a Stencil component when querying the DOM. This example shows how to access and set properties on an ion-button element with strong typing.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Using a Utility Function in a Service
DESCRIPTION: Example of a service function 'bar' that uses the 'getRandomInt' utility function. This demonstrates how imported functions are used in services.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Advanced Screenshot Testing with Stencil Components
DESCRIPTION: Comprehensive example demonstrating advanced screenshot testing features including global styles, pixel comparison tolerances, and ratio-based matching.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    // In order to test against any global styles you may have, don't forget to set the link to the global css. You don't have to do this if your stencil.config.ts file doesn't build a global css file with globalStyle.
    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    // To start comparing the visual result, you first must run page.compareScreenshot; This will capture a screenshot, and save the file to "/screenshot/images". You'll be able to check that into your repo to provide those results to your team. You can only have one of these commands per test. 
    const results = await page.compareScreenshot();

    // Finally, we can test against the previous screenshots. 
    // Test against hard pixels
    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    // Test against the percentage of changes. if 'allowableMismatchedRatio' is above 20% changed, 
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Creating Project Structure with Monorepo
DESCRIPTION: Example directory structure for a monorepo setup containing Stencil and Vue component libraries.

LANGUAGE: plaintext
CODE:
top-most-directory/
└── packages/
    ├── vue-library/
    │   └── lib/
    │       ├── plugin.ts
    │       └── index.ts
    └── stencil-library/
        ├── stencil.config.js
        └── src/components

----------------------------------------

TITLE: Web Worker with Callback Progress
DESCRIPTION: Demonstrates how to implement progress tracking in a Web Worker using callbacks.

LANGUAGE: tsx
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

----------------------------------------

TITLE: Creating a Controlled Ionic Component in Ember
DESCRIPTION: Ember component example demonstrating how to create a controlled Ionic toggle component with state management and event handling.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Unit Test with Jest Mock in TypeScript
DESCRIPTION: Demonstrates how to use Jest's mocking functionality in a unit test, including proper mock setup and assertions.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Updating Vue library package.json
DESCRIPTION: Modifications to the package.json file for the Vue component library.

LANGUAGE: json
CODE:
{
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "scripts": {
    "test": "echo \"Error: run tests from root\" && exit 1",
    "build": "npm run tsc",
    "tsc": "tsc -p . --outDir ./dist"
  },
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "stencil-library": "*"
  }
}

----------------------------------------

TITLE: Multiple Component Rendering Setup
DESCRIPTION: Demonstrates how to set up testing for components with dependencies on other Stencil components. Shows proper component registration when multiple components are involved.

LANGUAGE: typescript
CODE:
render({
    components: [ComponentA, ComponentB, ComponentC, ComponentD],
    template: () => <component-a first="Stencil" last="'Don't call me a framework' JS" />
});

----------------------------------------

TITLE: Configuring Custom Service Worker in Stencil
DESCRIPTION: Shows how to specify a custom Service Worker file in the Stencil config, switching to the injectManifest mode of Workbox.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        swSrc: 'src/sw.js'
      }
    }
  ]
};

----------------------------------------

TITLE: Setting CSP Nonce for Dist Output Target in Angular
DESCRIPTION: This snippet demonstrates how to set a CSP nonce for the 'dist' output target in a Stencil project, integrated into an Angular application's entry point. It uses the 'setNonce' helper function to apply the nonce to all script and style tags.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Disabling Service Worker Generation
DESCRIPTION: Configuration to disable service worker generation in a Stencil project by setting the serviceWorker property to null.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Using Worker Functions in Stencil Components
DESCRIPTION: Demonstrates how to import and use worker functions within a Stencil component.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result);
    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Rollup Asset Copy Configuration
DESCRIPTION: Shows how to configure Rollup plugins to copy assets to the distribution directory during build.

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Element Decorator Usage
DESCRIPTION: Demonstrates how to use the @Element decorator to access the host element within a component class.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Configuring VS Code Settings for Custom HTML Data (JSON)
DESCRIPTION: This JSON snippet demonstrates how to configure VS Code settings to use the generated custom data file. It adds the path to the generated JSON file in the html.customData array.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Configuring Base TypeScript Settings
DESCRIPTION: Root TypeScript configuration file for a monorepo setup with Stencil and Vue components.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Documenting Component Properties in TypeScript/Stencil
DESCRIPTION: Example showing how to add documentation for a component property using JSDoc comments above the @Prop decorator in Stencil components.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Creating an In-Memory Compiler System
DESCRIPTION: Shows how to create an in-memory CompilerSystem instance, independent of any platform.

LANGUAGE: tsx
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Configuring NPM Scripts for Stencil Testing
DESCRIPTION: Example NPM scripts configuration in package.json for running different types of Stencil tests, including unit tests, watched tests, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Custom Service Worker with Update Handling
DESCRIPTION: Example of a custom Service Worker that listens for the 'skipWaiting' message to handle updates.

LANGUAGE: javascript
CODE:
importScripts("workbox-v4.3.1/workbox-sw.js");

self.addEventListener("message", ({ data }) => {
  if (data === "skipWaiting") {
    self.skipWaiting();
  }
});

self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Checking Push Notification Subscription (JavaScript)
DESCRIPTION: Code to check the current push notification subscription status and update accordingly.

LANGUAGE: javascript
CODE:
self.registration.pushManager.getSubscription().then(subscription => {
  if (!subscription) {
    // ask the user to register for push
    return;
  }

  // update the database
  console.log(subscription);
});

----------------------------------------

TITLE: Installing Ember Stencil CLI Addon
DESCRIPTION: Command to install the ember-cli-stencil addon for legacy Ember applications

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Accessing Worker Instance Directly in Stencil
DESCRIPTION: Demonstrates how to access the actual Worker instance in Stencil for manual postMessage() usage.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);

    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Exporting setAssetPath in Component Library
DESCRIPTION: Demonstrates how to export the setAssetPath function from a component library to allow consumers to set the asset base path.

LANGUAGE: typescript
CODE:
export { setAssetPath } from '@stencil/core';

----------------------------------------

TITLE: Creating a Stencil Component Library
DESCRIPTION: Commands to generate and set up a new Stencil component library within the packages directory.

LANGUAGE: bash
CODE:
npm init stencil components stencil-library
cd stencil-library
npm install

----------------------------------------

TITLE: Adding Component Overview in Stencil
DESCRIPTION: Provide an overview for a Stencil component using JSDoc comments, which will be included in the generated README.

LANGUAGE: typescript
CODE:
/**
 * A simple component for formatting names
 *
 * This component will do some neat things!
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { }

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Component Lifecycle
DESCRIPTION: Shows how to use async/await in the componentWillLoad lifecycle method to fetch data from an API before rendering a component.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Using Standalone Stencil Components
DESCRIPTION: TypeScript example of importing and registering standalone Stencil components using the 'dist-custom-elements' output target.

LANGUAGE: typescript
CODE:
import { MyComponent, defineCustomElementMyComponent } from 'my-design-system'

// register to CustomElementRegistry
defineCustomElementMyComponent()

// or extend custom element via
class MyCustomComponent extends MyComponent {
  // ...
}
define('my-custom-component', MyCustomComponent)

----------------------------------------

TITLE: Importing and Exporting Generated Wrappers
DESCRIPTION: TypeScript code demonstrating how to import and export the generated Angular component wrappers in the main Angular module.

LANGUAGE: typescript
CODE:
import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Importing Hydrate Functions
DESCRIPTION: Example of importing the hydrate functions from a published package

LANGUAGE: javascript
CODE:
import { hydrateDocument, renderToString, streamToString } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Defining a Public Method with @Method() Decorator in Stencil
DESCRIPTION: Demonstrates how to use the @Method() decorator to expose a public async method on a Stencil component. This example shows a 'showPrompt' method being defined on a TodoList component.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3.1.0
DESCRIPTION: Configuration snippet for enabling the transformAliasedImportPaths feature in Stencil v3.1.0. This feature transforms aliased import paths based on TypeScript configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Configuring www Output Target in Stencil
DESCRIPTION: Basic configuration example for setting up the www output target in a Stencil project. This is the default output target if none is specified.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Configuring www Output Target in Stencil
DESCRIPTION: Basic configuration example for setting up the www output target in a Stencil project. This is the default output target if none is specified.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Webpack Configuration for Custom Elements
DESCRIPTION: Example webpack configuration for consuming custom elements, including asset handling.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Listening for appload Event in Stencil
DESCRIPTION: Shows how to listen for the special 'appload' event emitted when a Stencil app and all its child components have finished loading. The event listener is added to the window object and can distinguish between multiple apps using the namespace detail.

LANGUAGE: typescript
CODE:
window.addEventListener('appload', (event) => {
  console.log(event.detail.namespace);
});

----------------------------------------

TITLE: Defining Private Methods in Stencil Components
DESCRIPTION: Example of defining private methods in a Stencil component. Private methods do not require the @Method() decorator and don't need to be async.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Retrieving Stencil Element in JavaScript
DESCRIPTION: Shows how to use getElement() to retrieve a Stencil element reference and use componentOnReady().

LANGUAGE: javascript
CODE:
import { getElement } from '@stencil/core'

const stencilComponent = getElement(document.querySelector('my-cmp'))
if (stencilComponent) {
  stencilComponent.componentOnReady().then(() => { ... })
}

----------------------------------------

TITLE: Webpack Configuration for Custom Elements
DESCRIPTION: This webpack configuration example shows how to set up a project to consume custom elements, including copying assets from the library.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Using Generated React Components
DESCRIPTION: Example React application code showing how to import and use the generated component wrappers

LANGUAGE: tsx
CODE:
import './App.css';
import { MyComponent } from 'react-library';

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

----------------------------------------

TITLE: Configuring Server-Side Rendering
DESCRIPTION: Add the dist-hydrate-script output target to enable server-side rendering support for Stencil components.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-hydrate-script',
      dir: './hydrate',
    },
    // ...
  ]
};

----------------------------------------

TITLE: Running Individual Stencil Tasks in TypeScript
DESCRIPTION: Executes individual Stencil tasks given a NodeJS process, Stencil config, and task command. An optional CompilerSystem can be provided. It returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Documenting Shadow Parts in Stencil Components
DESCRIPTION: Shows how to document shadow parts using the @part JSDoc tag, which will be included in the generated README.

LANGUAGE: typescript
CODE:
/**
 * @part label - The label text describing the component.
 */
@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  // ...

  render() {
    return (
      <div part="label">
        <slot></slot>
      </div>
    );
  }
}

----------------------------------------

TITLE: Configuring Vitest for Stencil
DESCRIPTION: Configuration setup for Vitest to enable browser testing with Stencil components using Chrome in headless mode

LANGUAGE: typescript
CODE:
import stencil from 'unplugin-stencil/vite'
import { defineConfig } from 'vitest/config'

export default defineConfig({
    test: {
        browser: {
            enabled: true,
            headless: true,
            name: 'chrome'
        },
    },
    plugins: [stencil()]
})

----------------------------------------

TITLE: Configuring Stencil Output Targets in TypeScript
DESCRIPTION: Example configuration showing how to set up multiple output targets in a Stencil config file. This demonstrates configuring both 'dist' and 'www' output types.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Exporting Generated Components in React Library Entry File
DESCRIPTION: Modify the React library's entry file to export the generated Stencil component wrappers and the defineCustomElements function.

LANGUAGE: typescript
CODE:
export * from "./components/stencil-generated";
export { defineCustomElements } from "stencil-library/loader";

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Build Conditionals in a Stencil component. It imports the Build object from @stencil/core and uses the isDev property to conditionally execute code based on whether the app is running in development or production mode.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Typed Functional Component with FunctionalComponent Generic in Stencil
DESCRIPTION: Shows how to use Stencil's FunctionalComponent type to create a typed functional component with defined props interface.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Vue Plugin Registration
DESCRIPTION: Plugin implementation for registering Stencil web components in a Vue application.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Configuring TypeScript for WebdriverIO and Stencil
DESCRIPTION: This JSON snippet shows how to update tsconfig.json to resolve type clashes between WebdriverIO (Mocha) and Stencil (Jest).

LANGUAGE: json
CODE:
"types": ["jest"]

----------------------------------------

TITLE: CI/CD Configuration for Stencil Testing
DESCRIPTION: Example configuration for running E2E tests in CI/CD environments, specifically showing Gitlab CI setup with necessary Chrome parameters.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'Foo',
  testing: {
    /**
     * Gitlab CI doesn't allow sandbox, therefor this parameters must be passed to your Headless Chrome
     * before it can run your tests
     */
    browserArgs: ['--no-sandbox', '--disable-setuid-sandbox'],
  },
  outputTargets: [
    { type: 'dist' },
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Complex E2E Test Example with Toggle Component
DESCRIPTION: Shows a more complex E2E test example including event spying, class checking, and property setting.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Using Scoped CSS in Stencil Component
DESCRIPTION: Shows how to use scoped CSS instead of Shadow DOM by setting the 'scoped' option to true in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'scoped-component',
  styleUrl: 'scoped-component.css',
  scoped: true,
})
export class ScopedComponent {}

----------------------------------------

TITLE: Implementing Module and File Mocking in WebdriverIO
DESCRIPTION: Demonstrates how to mock both project files and external modules using WebdriverIO's mocking functions. Shows how to create mock implementations and replace original functionality with mock returns.

LANGUAGE: typescript
CODE:
import { mock, fn } from '@wdio/browser-runner'
import { format } from './utils/utils.ts'

// mock files within the project
mock('./utils/utils.ts', () => ({
    format: fn().mockReturnValue(42)
}))
// mock whole modules and replace functionality with what is defined in `./__mocks__/leftpad.ts`
mock('leftpad')

console.log(format()) // returns `42`

----------------------------------------

TITLE: Defining a Stencil Component with a Method in TypeScript
DESCRIPTION: Example of a Stencil component 'Foo' with a method 'bar' that uses the 'getRandomInt' helper. This demonstrates how components might use functions that need to be mocked in tests.

LANGUAGE: typescript
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Defining Prerender Config Object in Stencil
DESCRIPTION: Exports a config object using the PrerenderConfig interface to define prerendering options and hooks.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Package.json Configuration for Distribution
DESCRIPTION: Configuration required in package.json for distributing custom elements bundle

LANGUAGE: json
CODE:
{
  "module": "dist/custom-elements-bundle/index.js",
  "dependencies": {
    "@stencil/core": "latest"
  }
}

----------------------------------------

TITLE: Node Polyfills Plugin Configuration in Stencil
DESCRIPTION: This example demonstrates how to install and configure the rollup-plugin-node-polyfills plugin in a Stencil project to handle Node.js APIs in the browser.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Node Polyfills Plugin Configuration in Stencil
DESCRIPTION: This example demonstrates how to install and configure the rollup-plugin-node-polyfills plugin in a Stencil project to handle Node.js APIs in the browser.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Manipulating Children in Functional Components
DESCRIPTION: Demonstrates how to work with children in functional components using Stencil's utility methods.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Configuring Vue Library TypeScript Settings
DESCRIPTION: TypeScript configuration specific to the Vue wrapper library, extending the root config

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2020"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2017",
    "skipLibCheck": true
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: Accessing Typed Stencil Component in TypeScript
DESCRIPTION: Demonstrates how to access a typed Stencil component (ion-button) using its automatically generated HTMLElement interface.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Injecting CSP Nonce Meta Tag for SSR
DESCRIPTION: Demonstrates how to inject a meta tag with the CSP nonce for Server-Side Rendering (SSR) in Stencil projects. This meta tag is used by Stencil to set the nonce on script and style tags at runtime.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Implementing a Web Worker with External Dependencies in Stencil
DESCRIPTION: Demonstrates how to create a Web Worker that imports external libraries and local modules, which Stencil will automatically bundle for use in the worker.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Configuring Event Listeners in Stencil
DESCRIPTION: Shows how to use the ListenOptions interface to configure event listeners, including targeting specific elements, and setting capture and passive options.

LANGUAGE: tsx
CODE:
  @Listen('scroll', { target: 'window' })
  handleScroll(ev) {
    console.log('the body was scrolled', ev);
  }

LANGUAGE: tsx
CODE:
  @Listen('click', { capture: true })
  handleClick(ev) {
    console.log('click');
  }

----------------------------------------

TITLE: Consuming Angular Wrapper Components in Standalone App
DESCRIPTION: This code demonstrates how to import and use the generated Angular component wrappers in a standalone Angular application.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { MyComponent } from 'component-library';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [MyComponent],
  templateUrl: './app.component.html',
})
export class AppComponent {}

----------------------------------------

TITLE: Basic Screenshot Comparison Test in Stencil
DESCRIPTION: Simple example of setting up a screenshot comparison test using Puppeteer in a Stencil e2e test. It demonstrates how to create a new page, set content, and compare screenshots.

LANGUAGE: javascript
CODE:
it('render something', async () => {
  const page: E2EPage = await newE2EPage();
  await page.setContent('<my-cmp></my-cmp>');
  await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
});

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: Command to install the ember-cli-stencil addon for legacy Ember integration with Stencil components.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Correct Component Organization in TypeScript
DESCRIPTION: The correct way to organize components and utility functions in Stencil. Utility functions are moved to a separate file, and components are exported individually.

LANGUAGE: typescript
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: typescript
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: typescript
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Basic Screenshot Comparison Test in Stencil
DESCRIPTION: Simple example of setting up a screenshot comparison test using Puppeteer in a Stencil e2e test. It demonstrates how to create a new page, set content, and compare screenshots.

LANGUAGE: javascript
CODE:
it('render something', async () => {
  const page: E2EPage = await newE2EPage();
  await page.setContent('<my-cmp></my-cmp>');
  await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
});

----------------------------------------

TITLE: Specifying Output Directory for README Files
DESCRIPTION: Change the output directory for generated README files by setting the 'dir' property in the output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      dir: 'output'
    }
  ]
};

----------------------------------------

TITLE: Configuring TypeScript for Monorepo Root
DESCRIPTION: This JSON snippet shows the TypeScript configuration for the root of the monorepo.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Enabling Strict Mode for README Generation
DESCRIPTION: Enable strict mode to receive warnings for missing documentation by adding strict: true to the output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      strict: true
    }
  ]
};

----------------------------------------

TITLE: Enabling Strict Mode for README Generation
DESCRIPTION: Enable strict mode to receive warnings for missing documentation by adding strict: true to the output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      strict: true
    }
  ]
};

----------------------------------------

TITLE: Styling Host Element in CSS (Shadow DOM)
DESCRIPTION: Demonstrates how to style the host element using CSS when using Shadow DOM.

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Implementing Hydrate Options in Prerender Config (TypeScript)
DESCRIPTION: Example of how to implement the hydrateOptions hook in the prerender config. This hook allows setting individual hydrate options for each page during the prerendering process.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Configuring Supplemental Public Types in Stencil Config
DESCRIPTION: Configuration for including additional types in the JSON documentation output.

LANGUAGE: ts
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json',
      supplementalPublicTypes: 'src/public-interfaces.ts',
    }
  ]
};

----------------------------------------

TITLE: Using Skip Function in Playwright Tests for Stencil
DESCRIPTION: Shows how to use the skip function to conditionally skip tests based on browser type or component mode in Stencil Playwright tests.

LANGUAGE: typescript
CODE:
test('my-test', ({ page, skip }) => {
    // Skip tests for certain browsers
    skip.browser('firefox', 'This behavior is not available on Firefox');

    // Skip tests for certain modes
    skip.mode('md', 'This behavior is not available in Material Design');

    ...
})

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Component Lifecycle
DESCRIPTION: Shows how to fetch dynamic data from a server in a Stencil component's lifecycle method. This example uses async/await in the componentWillLoad method to fetch and set data before rendering.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript interface definition for CopyTask, which is used to configure file copy operations in Stencil's output targets.

LANGUAGE: typescript
CODE:
```ts
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665
```

----------------------------------------

TITLE: Adding Stats Output Target to Stencil Config
DESCRIPTION: Configuration example showing how to add the stats output target to stencil.config.ts for automatic stats generation during builds.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Configuring Stencil Custom Docs Output Target
DESCRIPTION: Configuration example showing how to set up the docs-custom output target in Stencil. The config includes a generator function that receives the JsonDocs data for custom processing.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Creating a Stencil Compiler Instance
DESCRIPTION: Illustrates the function signature for creating a Stencil Compiler instance. It takes a configuration object and returns a Promise resolving to a Compiler instance.

LANGUAGE: typescript
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Requesting Notification Permissions
DESCRIPTION: Demonstrates how to request notification permissions from the user in a web application.

LANGUAGE: javascript
CODE:
if ('Notification' in window && 'serviceWorker' in navigator) {
  Notification.requestPermission(status => {
    // status will either be 'default', 'granted' or 'denied'
    console.log(`Notification permissions have been ${status}`);
  });
}

----------------------------------------

TITLE: Configuring Copy Task with Custom Destination
DESCRIPTION: This example shows how to set a custom destination for copied files using the 'dest' property. It copies contents from 'src/files/fonts' to 'public/static/web-fonts'.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    dir: 'public',
    copy: [
      { src: 'files/fonts', dest: 'static/web-fonts' }
    ]
  }
]

----------------------------------------

TITLE: Generating Component in Sub-folder
DESCRIPTION: Command to generate a new Stencil component in a sub-folder structure using the CLI generator.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Using Stencil Component with String Props in HTML
DESCRIPTION: Demonstrates how to use a Stencil component in HTML with string representations of object and array props. This approach allows passing complex data structures as attributes in HTML.

LANGUAGE: tsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Configuring Hydrate App Output Target in TypeScript
DESCRIPTION: Configuration snippet showing how to add the dist-hydrate-script output target to stencil.config.ts

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Creating a Vue Component Library
DESCRIPTION: Commands to create a Vue component library using Lerna and Vue CLI.

LANGUAGE: bash
CODE:
lerna create vue-library
cd packages/vue-library
npm install vue@3 --save-dev

----------------------------------------

TITLE: HTML Component Tag Naming Examples
DESCRIPTION: Shows incorrect and correct ways to name component tags, emphasizing the importance of proper prefixing and namespace conventions.

LANGUAGE: markup
CODE:
<stencil-component>
<stnl-component>

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

LANGUAGE: markup
CODE:
<ion-card>
<ion-card-header>
<ion-card-content>

----------------------------------------

TITLE: Using Helper Function in Service
DESCRIPTION: This snippet shows a service that uses the getRandomInt helper function to generate a random number between 0 and 10.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Installing Legacy Ember Stencil Integration
DESCRIPTION: Command to install the legacy ember-cli-stencil addon for older Ember applications

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Mocking External Library Example in TypeScript
DESCRIPTION: Shows how to create a basic mock for an external library (md5) by implementing a mock module that returns a fake hash.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Implementing Module and File Mocking
DESCRIPTION: Demonstrates how to mock both local project files and external modules using WebdriverIO's mocking functions. Shows how to create mock implementations and return values for specific functions.

LANGUAGE: typescript
CODE:
import { mock, fn } from '@wdio/browser-runner'
import { format } from './utils/utils.ts'

// mock files within the project
mock('./utils/utils.ts', () => ({
    format: fn().mockReturnValue(42)
}))
// mock whole modules and replace functionality with what is defined in `./__mocks__/leftpad.ts`
mock('leftpad')

console.log(format()) // returns `42`

----------------------------------------

TITLE: Mocking a Library in Stencil with TypeScript
DESCRIPTION: Example of mocking the 'md5' library by creating a mock file in the __mocks__ directory. This demonstrates how to create a simple mock that returns a fixed value.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: JSON Output for Method Documentation in Stencil v4
DESCRIPTION: Example of the expanded JSON documentation output for a @Method in Stencil v4, showing the new complexType field with detailed type information.

LANGUAGE: json
CODE:
{
  "complexType": {
    "signature": "(event?: UIEvent) => Promise<any>",
    "parameters": [
      {
        "tags": [
          {
            "name": "param",
            "text": "event The user interface event that called the open."
          }
        ],
        "text": "The user interface event that called the open."
      }
    ],
    "references": {
      "Promise": {
        "location": "global",
        "id": "global::Promise"
      },
      "UIEvent": {
        "location": "global",
        "id": "global::UIEvent"
      },
      "HTMLElement": {
        "location": "global",
        "id": "global::HTMLElement"
      }
    },
    "return": "Promise<any>"
  }
}

----------------------------------------

TITLE: Configuring Prerender Debug Settings in Stencil
DESCRIPTION: TypeScript configuration for Stencil prerendering debug settings. Disables URL crawling, specifies entry URLs, and enables runtime logging for debugging static site generation.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Component Asset Directory Configuration
DESCRIPTION: Example showing how to configure a component to use assets from a sibling directory using the assetsDirs option

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Basic Project Structure Example
DESCRIPTION: Shows the recommended monorepo directory structure for a Stencil component library with Angular wrappers

LANGUAGE: plaintext
CODE:
top-most-directory/
└── packages
    ├── stencil-library/
    │   ├── stencil.config.js
    │   └── src/components
    └── angular-workspace/
        └── projects/
            └── component-library/
                └── src/
                    ├── lib/
                    └── public-api.ts

----------------------------------------

TITLE: Stencil Build Commands for Generating Documentation
DESCRIPTION: Commands used to generate README documentation using Stencil CLI

LANGUAGE: bash
CODE:
npx stencil build

LANGUAGE: bash
CODE:
npm stencil build --watch

LANGUAGE: bash
CODE:
npx stencil build --docs

LANGUAGE: bash
CODE:
npx stencil docs

----------------------------------------

TITLE: Setting Props via JavaScript
DESCRIPTION: Demonstrates how to manually set object and array props on a Stencil component using JavaScript.

LANGUAGE: markup
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: CreateSystem Function Signature
DESCRIPTION: Function signature for creating an in-memory compiler system.

LANGUAGE: tsx
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Stencil Primary Package Output Target Validation Configuration
DESCRIPTION: Configuration example showing how to set up primary package output target validation in Stencil. Demonstrates enabling validation and setting the primary output target flag.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Organizing Stencil Component Code
DESCRIPTION: Provides a comprehensive example of a well-structured Stencil component, including property declarations, lifecycle methods, and rendering logic.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {

  /**
   * 1. Own Properties
   * Always set the type if a default value has not
   * been set. If a default value is being set, then type
   * is already inferred. List the own properties in
   * alphabetical order. Note that because these properties
   * do not have the @Prop() decorator, they will not be exposed
   * publicly on the host element, but only used internally.
   */
  num: number;
  someText = 'default';

  /**
   * 2. Reference to host HTML element.
   * Inlined decorator
   */
  @Element() el: HTMLElement;

  /**
   * 3. State() variables
   * Inlined decorator, alphabetical order.
   */
  @State() isValidated: boolean;
  @State() status = 0;

  /**
   * 4. Public Property API
   * Inlined decorator, alphabetical order. These are
   * different than "own properties" in that public props
   * are exposed as properties and attributes on the host element.
   * Requires JSDocs for public API documentation.
   */
  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  /**
   * Prop lifecycle events SHOULD go just behind the Prop they listen to.
   * This makes sense since both statements are strongly connected.
   * - If renaming the instance variable name you must also update the name in @Watch()
   * - Code is easier to follow and maintain.
   */
  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  /**
   * 5. Events section
   * Inlined decorator, alphabetical order.
   * Requires JSDocs for public API documentation.
   */
  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  /**
   * 6. Component lifecycle events
   * Ordered by their natural call order, for example
   * WillLoad should go before DidLoad.
   */
  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  /**
   * 7. Listeners
   * It is ok to place them in a different location
   * if makes more sense in the context. Recommend
   * starting a listener method with "on".
   * Always use two lines.
   */
  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  /**
   * 8. Public methods API
   * These methods are exposed on the host element.
   * Always use two lines.
   * Public Methods must be async.
   * Requires JSDocs for public API documentation.
   */
  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  /**
   * 9. Local methods
   * Internal business logic. These methods cannot be
   * called from the host element.
   */
  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  /**
   * 10. render() function
   * Always the last public method in the class.
   * If private methods present, they are below public methods.
   */
  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Requesting Notification Permissions
DESCRIPTION: Demonstrates how to request notification permissions from the user, which is necessary for showing push notifications.

LANGUAGE: javascript
CODE:
if ('Notification' in window && 'serviceWorker' in navigator) {
  Notification.requestPermission(status => {
    // status will either be 'default', 'granted' or 'denied'
    console.log(`Notification permissions have been ${status}`);
  });
}

----------------------------------------

TITLE: Using Web Worker Functions in a Stencil Component
DESCRIPTION: Demonstrates how to import and use Web Worker functions within a Stencil component, leveraging Stencil's automatic proxy creation for seamless integration.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: Command to install the ember-cli-stencil addon for legacy Ember applications to integrate Stencil components.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Configuring TypeScript for Vue Library
DESCRIPTION: Root TypeScript configuration file for Vue component wrapper library

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Implementing hydrateDocument Function
DESCRIPTION: Example implementation of component hydration using hydrateDocument from Ionic Angular server

LANGUAGE: typescript
CODE:
import { hydrateDocument, createWindowFromHtml } from 'yourpackage/hydrate';

export function hydrateComponents(template: string) {
  const win = createWindowFromHtml(template, Math.random().toString())

  return hydrateDocument(win.document)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Configuring package.json for Lazy Loading
DESCRIPTION: Shows how to configure package.json to ensure the correct entry file is loaded when importing the project for lazy loading.

LANGUAGE: json
CODE:
{
  "exports": "./dist/esm/my-design-system.js",
  "main": "./dist/cjs/my-design-system.js",
  "unpkg": "dist/my-design-system/my-design-system.esm.js"
}

----------------------------------------

TITLE: Generating Stencil Component in Subfolder
DESCRIPTION: Shows how to generate a Stencil component in a specific subfolder using the CLI. This command creates a 'page-home' component within the 'pages' subfolder of src/components.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Custom Service Worker with Update Handling
DESCRIPTION: Custom Service Worker code that listens for the 'skipWaiting' message to update the worker and includes Workbox precaching.

LANGUAGE: javascript
CODE:
importScripts("workbox-v4.3.1/workbox-sw.js");

self.addEventListener("message", ({ data }) => {
  if (data === "skipWaiting") {
    self.skipWaiting();
  }
});

self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Calling a Public Method on a Stencil Component
DESCRIPTION: Shows how to call a public method on a Stencil component after ensuring the component is defined using the whenDefined method of the custom element registry.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Accessing Typed Stencil Component in TypeScript
DESCRIPTION: Demonstrates how to use the automatically generated HTML element interface to access a Stencil component with proper typing. This example shows querying for an ion-button element and setting its 'fill' property.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Package.json Exports Configuration
DESCRIPTION: Advanced package.json configuration for component exports with TypeScript support.

LANGUAGE: json
CODE:
{
  "exports": {
    ".": {
      "import": "./dist/components/index.js",
      "types": "./dist/components/index.d.ts"
    },
    "./my-component": {
      "import": "./dist/components/my-component.js",
      "types": "./dist/components/my-component.d.ts"
    }
  },
  "types": "dist/components/index.d.ts"
}

----------------------------------------

TITLE: Exporting Vue Component Wrappers
DESCRIPTION: File to export generated component wrappers and Vue plugin.

LANGUAGE: typescript
CODE:
// packages/vue-library/lib/index.ts
export * from './components';
export * from './plugin';

----------------------------------------

TITLE: Configuring Custom Service Worker in Stencil
DESCRIPTION: Example of how to specify a custom Service Worker file in the Stencil config using the swSrc property.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        swSrc: 'src/sw.js'
      }
    }
  ]
};

----------------------------------------

TITLE: Configuring Copy Task for WWW Output Target in TypeScript
DESCRIPTION: This example demonstrates how to configure a copy task within the WWW output target. It copies the entire 'images' directory from the source to the output directory.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    copy: [
      { src: 'images' }
    ]
  }
]

----------------------------------------

TITLE: Configuring Stencil Vue Output Target
DESCRIPTION: Configuration for generating Vue component wrappers from Stencil components

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: React Component Library Entry File
DESCRIPTION: Entry point file for the React wrapper library that exports the generated component wrappers

LANGUAGE: typescript
CODE:
export * from './components/stencil-generated/components';

----------------------------------------

TITLE: Updating Stencil Core Package
DESCRIPTION: Command to update the @stencil/core package to the latest version using npm.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Documenting @Method() Decorators in Stencil
DESCRIPTION: This TypeScript snippet shows how to document methods using the @Method() decorator and JSDoc comments. The generated README will include detailed method descriptions, parameters, and return types.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * Scroll by a specified X/Y distance in the component.
   *
   * @param x The amount to scroll by on the horizontal axis.
   * @param y The amount to scroll by on the vertical axis.
   * @param duration The amount of time to take scrolling by that amount.
   * @returns the total distance travelled
   */
  @Method()
  async scrollByPoint(x: number, y: number, duration: number): Promise<number> { /* omitted */ }

  // ...
}

----------------------------------------

TITLE: Writing a Vitest Test Using JSX for Stencil Components
DESCRIPTION: Example of a Vitest test using JSX syntax to render and test a Stencil component. This approach provides a more declarative way of setting up component tests.

LANGUAGE: tsx
CODE:
/** @jsx createElement */
import { expect, test } from 'vitest'

import { createElement } from '../../utils/jsx'
import './my-component.js'

test('should render the component with jsx', async () => {
    const cmp = <my-component first="Stencil" last="'Don't call me a framework' JS"></my-component>
    document.body.appendChild(cmp)
    await new Promise((resolve) => requestIdleCallback(resolve))
    expect(cmp.shadowRoot?.querySelector('div')?.innerText)
        .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)
})

----------------------------------------

TITLE: Writing an E2E Test with Mocking in TypeScript
DESCRIPTION: Example of an E2E test for the Foo component using newSpecPage. This test mocks the utils module and verifies that the bar method returns the mocked value.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: React Component Usage Example
DESCRIPTION: Example showing how to consume the generated React component wrappers in a React application.

LANGUAGE: tsx
CODE:
// App.tsx
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

----------------------------------------

TITLE: Implementing Store Configuration in TypeScript
DESCRIPTION: Example of creating and configuring a Stencil store with state management and change handlers.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Creating a Consumer Vue App
DESCRIPTION: Command to generate a new Vue app for consuming the component library.

LANGUAGE: bash
CODE:
npm init vue@3 my-app

----------------------------------------

TITLE: Webpack Configuration for Custom Elements
DESCRIPTION: Example webpack configuration for consuming custom elements, including asset copying.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Configuring Stencil for CI/CD Environments
DESCRIPTION: Shows how to configure Stencil for Continuous Integration/Deployment environments, specifically for Gitlab CI. It demonstrates setting browser arguments to run Headless Chrome without sandbox.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'Foo',
  testing: {
    browserArgs: ['--no-sandbox', '--disable-setuid-sandbox'],
  },
  outputTargets: [
    { type: 'dist' },
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Mocking Utility Function in TypeScript
DESCRIPTION: Shows how to create a mock implementation of the getRandomInt utility that returns a static value.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Documenting @Event() Decorators in Stencil
DESCRIPTION: Example of how to document events using @Event() decorator and JSDoc comments, which will be reflected in the generated README.

LANGUAGE: tsx
CODE:
export class MyComponent {
  /**
   * Emitted when an event is completed
   */
  @Event() todoCompleted: EventEmitter<number>;
  /**
   * @deprecated
   */
  @Event() todoUndo: EventEmitter<number>;

  // ...
}

----------------------------------------

TITLE: Styling CSS Parts from Light DOM
DESCRIPTION: Demonstrates how to style CSS parts defined in a Stencil component from the light DOM using the ::part() pseudo-element.

LANGUAGE: css
CODE:
shadow-card::part(heading) {
  text-transform: uppercase;
}

----------------------------------------

TITLE: Starting Stencil Dev Server in TypeScript
DESCRIPTION: The start() function initializes the Stencil Dev Server. It takes a StencilDevServerConfig object, a Logger instance, and an optional CompilerWatcher as parameters. The function returns a Promise that resolves to a DevServer instance.

LANGUAGE: typescript
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Data Flow with Props
DESCRIPTION: Illustrates how data flows from parent to child components using props.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
})
export class TodoList {
  render() {
    return (
      <div>
        <h1>To-Do List Name: Stencil To Do List</h1>
        <ul> 
           <todo-list-item thingToDo={"Learn about Stencil Props"}></todo-list-item>
           <todo-list-item thingToDo={"Write some Stencil Code with Props"}></todo-list-item>
           <todo-list-item thingToDo={"Dance Party"}></todo-list-item>
        </ul>
      </div>
    )
  }
}

----------------------------------------

TITLE: Creating and Configuring a Stencil Store
DESCRIPTION: Example of creating a store with initial state and setting up a change listener for the 'clicks' property. The store exports a state object for use in components.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: CSS Custom Property Documentation
DESCRIPTION: Example of documenting CSS custom properties in a component's stylesheet using JSDoc.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Creating Usage Examples for Stencil Components
DESCRIPTION: Example of creating a usage example file for a Stencil component. This demonstrates how to write markdown files that will be included in the JSON documentation under the 'usage' property.

LANGUAGE: md
CODE:
# How to use `my-button`

A button is often a great help in adding interactivity to an app!

You could use it like this:

```html
<my-button>My Button!</my-button>
```

----------------------------------------

TITLE: Creating and Configuring a Stencil Store
DESCRIPTION: Example of creating a store with initial state and setting up a change listener for the 'clicks' property. The store exports a state object for use in components.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Creating and Configuring a Stencil Store
DESCRIPTION: Example of creating a store with initial state and setting up a change listener for the 'clicks' property. The store exports a state object for use in components.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Importing Ionic Components
DESCRIPTION: JavaScript code to import all Ionic Framework components into an Ember application

LANGUAGE: javascript
CODE:
import '@ionic/core';

----------------------------------------

TITLE: Disabling Collection Import Path Transformation
DESCRIPTION: Configuration example showing how to disable transformAliasedImportPathsInCollection for dist output target in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Configuring Stencil Angular Output Target
DESCRIPTION: Configuration for the Angular output target in the Stencil config file.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: ScreenshotConnector Interface Definition
DESCRIPTION: Interface definition showing the available methods that can be overridden in a custom screenshot connector.

LANGUAGE: tsx
CODE:
https://github.com/ionic-team/stencil/blob/a2e119d059ba0d0fa6155dbd3d82c17612630828/src/declarations/stencil-private.ts#L1631-L1645

----------------------------------------

TITLE: Configuring Docs-Readme Output Target in Stencil
DESCRIPTION: Basic configuration for enabling README.md generation in a Stencil project's config file

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Configuring Stencil Output Target for VS Code Documentation
DESCRIPTION: This snippet shows how to add the 'docs-vscode' output target to the Stencil configuration file. It generates a JSON file containing custom element information for VS Code.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: This snippet shows how to configure the 'dist' output target in a Stencil project's configuration file. It specifies the type as 'dist' in the outputTargets array.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Importing Stencil Components in TypeScript
DESCRIPTION: Shows how to import a Stencil component library in a TypeScript file using the 'dist' output target.

LANGUAGE: typescript
CODE:
import 'my-design-system';

----------------------------------------

TITLE: Marking a Stencil Component as Internal
DESCRIPTION: Use the @internal JSDoc tag to mark a component as internal, which will skip README generation for that component.

LANGUAGE: tsx
CODE:
/**
 * @internal
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Creating Vue Plugin for Custom Elements
DESCRIPTION: Vue plugin to register custom elements for lazy-loaded components.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Importing Stencil Compiler in NodeJS
DESCRIPTION: Example showing how to import the Stencil compiler module in a NodeJS environment using CommonJS syntax.

LANGUAGE: tsx
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Disabling Service Worker Generation
DESCRIPTION: Configuration to disable service worker generation in Stencil build process by setting serviceWorker to null.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Styling Host Element in CSS (Light DOM)
DESCRIPTION: Shows how to style the host element using CSS when not using Shadow DOM.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

----------------------------------------

TITLE: Configuring Page-Specific Hydrate Options
DESCRIPTION: Example of implementing hydrateOptions hook in prerender.config.ts to configure individual page rendering options.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: Example configuration for the 'dist' output target in a Stencil project's config file. This setup generates a reusable component library.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project by configuring the Sass plugin in the Stencil configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Web App
DESCRIPTION: JSON configuration for VS Code's launch.json file to enable debugging Stencil components in a web application using Chrome.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:3333",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "*": "${webRoot}/*"
      }
    }
  ]
}

----------------------------------------

TITLE: Exporting Generated React Components
DESCRIPTION: Export the generated React component wrappers from the React library's entry file.

LANGUAGE: typescript
CODE:
export * from './components/stencil-generated/components';

----------------------------------------

TITLE: Enabling Warnings for Missing Copy Task Sources
DESCRIPTION: This example demonstrates how to opt-in to warnings when a copy task source cannot be found by setting the 'warn' option to true in the Dist output target configuration.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Running Visual Regression Tests in Stencil
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison in Stencil projects.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Implementing CSP Nonce in Stencil Dist Output
DESCRIPTION: Example of setting up CSP nonce in a Stencil dist output target within an Angular application's entrypoint. Uses the setNonce helper function to apply nonces to all script and style tags.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Synchronous Transpilation with Stencil Core Compiler
DESCRIPTION: Demonstrates the synchronous version of the transpile function, which requires TypeScript to be globally available in browser environments.

LANGUAGE: tsx
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Installing Legacy Ember Stencil Integration
DESCRIPTION: Command to install the legacy ember-cli-stencil addon for older Ember applications

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Enabling Warnings for Copy Tasks
DESCRIPTION: This example shows how to enable warnings for copy tasks when source files or directories are not found. It sets the 'warn' option to true in the CopyTask configuration.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist',
    copy: [
      { src: 'fonts', warn: true }
    ]
  }
]

----------------------------------------

TITLE: Component HTML Tag Examples
DESCRIPTION: Examples of proper and improper component naming conventions, emphasizing the importance of meaningful prefixes and proper web component naming patterns.

LANGUAGE: markup
CODE:
<stencil-component>
<stnl-component>

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

LANGUAGE: markup
CODE:
<ion-card>
<ion-card-header>
<ion-card-content>

----------------------------------------

TITLE: Implementing Prop Watchers in Stencil
DESCRIPTION: Demonstrates how to watch and parse object and array properties in a Stencil component using @Watch decorator and state management.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

LANGUAGE: tsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Data Flow in Stencil Components
DESCRIPTION: Demonstrates how data flows from parent to child components using props.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
})
export class TodoList {
  render() {
    return (
      <div>
        <h1>To-Do List Name: Stencil To Do List</h1>
        <ul> 
           <todo-list-item thingToDo={"Learn about Stencil Props"}></todo-list-item>
           <todo-list-item thingToDo={"Write some Stencil Code with Props"}></todo-list-item>
           <todo-list-item thingToDo={"Dance Party"}></todo-list-item>
        </ul>
      </div>
    )
  }
}

----------------------------------------

TITLE: Using Custom JSDoc Tags in Stencil Components
DESCRIPTION: Example of using custom JSDoc tags in a Stencil component. This demonstrates how to include additional, non-standard documentation tags that will be included in the JSON output.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Using Stencil Component in Angular Template
DESCRIPTION: HTML code showing how to use a Stencil component in an Angular template.

LANGUAGE: html
CODE:
<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil
DESCRIPTION: Basic configuration of the docs-readme output target in stencil.config.ts to enable README generation.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Installing Vitest Dependencies for Stencil Testing
DESCRIPTION: Command to install required packages for testing Stencil components with Vitest including the core framework, browser support, and integration plugins.

LANGUAGE: bash
CODE:
npm install vitest @vitest/browser unplugin-stencil webdriverio

----------------------------------------

TITLE: Defining a Utility Function in TypeScript
DESCRIPTION: Example of a utility function 'getRandomInt' that generates a random integer within a specified range. This function will be mocked in subsequent examples.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Loading Stencil Component via CDN Script Tag
DESCRIPTION: Demonstrates how to load a Stencil component using a CDN script tag in a simple HTML page.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Basic Workbox Service Worker Configuration in Stencil
DESCRIPTION: Default configuration for generating a service worker using Workbox in a Stencil application.

LANGUAGE: typescript
CODE:
{
  globPatterns: [
    '**/*.{js,css,json,html}'
  ]
};

----------------------------------------

TITLE: Basic Workbox Service Worker Configuration in Stencil
DESCRIPTION: Default configuration for generating a service worker using Workbox in a Stencil application.

LANGUAGE: typescript
CODE:
{
  globPatterns: [
    '**/*.{js,css,json,html}'
  ]
};

----------------------------------------

TITLE: Installing Ionic Framework in Ember
DESCRIPTION: Command to install the Ionic Framework in an Ember project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Configuring Stencil Testing Options
DESCRIPTION: Example of configuring testing options in Stencil's config file using the testing property to set Jest configuration options.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  testing: {
    testPathIgnorePatterns: [...]
  }
};

----------------------------------------

TITLE: Stencil Lifecycle DOM Events Configuration
DESCRIPTION: A list of component lifecycle events that can be dispatched when lifecycleDOMEvents is enabled. These events are primarily used for testing purposes and are dispatched on the window object.

LANGUAGE: javascript
CODE:
{
  "stencil_componentWillLoad": "Dispatched for each component's componentWillLoad",
  "stencil_componentWillUpdate": "Dispatched for each component's componentWillUpdate",
  "stencil_componentWillRender": "Dispatched for each component's componentWillRender",
  "stencil_componentDidLoad": "Dispatched for each component's componentDidLoad",
  "stencil_componentDidUpdate": "Dispatched for each component's componentDidUpdate",
  "stencil_componentDidRender": "Dispatched for each component's componentDidRender"
}

----------------------------------------

TITLE: Creating Node Logger for Stencil Compiler in TypeScript
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the Stencil compiler and dev-server. It requires the NodeJS process object as an argument.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Configuring Stencil Vue Output Target
DESCRIPTION: Configuration for generating Vue component wrappers from Stencil components.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Documenting @Prop() Decorators
DESCRIPTION: Use JSDoc comments to describe properties decorated with @Prop(). This information will be included in the generated README.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * The first name
   */
  @Prop() first!: string; // the '!' denotes a required property
  /**
   * @deprecated since v2.1.0
   */
  @Prop() middle: string;
  @Prop() lastName = "Smith";

  // ...
}

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Web App
DESCRIPTION: JSON configuration for VS Code's launch.json file to enable debugging Stencil components in a web application using Chrome.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:3333",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "*": "${webRoot}/*"
      }
    }
  ]
}

----------------------------------------

TITLE: Correct Component Organization in TypeScript
DESCRIPTION: This set of snippets shows the correct way to organize Stencil components and shared utilities across multiple files.

LANGUAGE: typescript
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: typescript
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: typescript
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Documenting Shadow Parts in Stencil Components
DESCRIPTION: Use @part JSDoc tags to document CSS shadow parts in a component's JSDoc comment.

LANGUAGE: typescript
CODE:
/**
 * @part label - The label text describing the component.
 */
@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  // ...

  render() {
    return (
      <div part="label">
        <slot></slot>
      </div>
    );
  }
}

----------------------------------------

TITLE: Setting Object Props Manually in HTML
DESCRIPTION: Demonstrates how to set object props manually on a Stencil component in HTML using JavaScript. This is useful when working with non-JSX elements.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Transpiling Code with Stencil Core Compiler
DESCRIPTION: Shows the signature of the transpile() function, which is used to transpile source code from TypeScript to JavaScript. It accepts a code string and optional TranspileOptions, returning a Promise with TranspileResults.

LANGUAGE: tsx
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project using the plugins array in the configuration. It imports the sass plugin from @stencil/sass and adds it to the config.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Configuring TypeScript Support in Stencil Config
DESCRIPTION: TypeScript configuration in stencil.config.ts for generating type declarations when using the 'dist-custom-elements' output target.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      generateTypeDeclarations: true,
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Worker with Progress Callbacks
DESCRIPTION: Implements a worker function that provides progress updates through callbacks during execution.

LANGUAGE: tsx
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

----------------------------------------

TITLE: Using Worker Callbacks in a Stencil Component
DESCRIPTION: Shows how to use a Web Worker function with a callback in a Stencil component. This example demonstrates progress updates during a countdown task.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { countDown } from '../countdown.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    const startNum = 5;
    console.log('start', startNum);

    countDown(startNum, (p) => {
      console.log('progress', p);
    }).then(result => {
      console.log('finish', result);
    });
  }
}

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: Command to install the ember-cli-stencil addon in an Ember project for legacy Stencil integration.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Configuring React Library TypeScript
DESCRIPTION: TypeScript configuration specific to the React wrapper library.

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2015"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2015",
    "skipLibCheck": true,
    "jsx": "react",
    "allowSyntheticDefaultImports": true,
    "declarationDir": "./dist/types"
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: Configuring Stencil Vue Output Target
DESCRIPTION: Configuration for generating Vue component wrappers from Stencil components

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil
DESCRIPTION: This snippet shows how to add the docs-readme output target to the Stencil configuration file. This setup enables automatic generation of README.md files for components.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Updating TSConfig for Playwright
DESCRIPTION: Required TypeScript configuration update to add ESNext.Disposable support for Playwright testing.

LANGUAGE: typescript
CODE:
{
  lib: [
    ...,
    "ESNext.Disposable"
  ],
  ...
}

----------------------------------------

TITLE: Configuring Stencil Output Targets in TypeScript
DESCRIPTION: This snippet demonstrates how to configure multiple output targets in a Stencil project's configuration file. It shows setting up 'dist' and 'www' output types.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Component Directory Structure
DESCRIPTION: Example directory structure showing the generated files for a basic component in the src/components folder.

LANGUAGE: plain
CODE:
src
└── components
    └── page-home
        ├── page-home.css
        ├── page-home.e2e.ts
        ├── page-home.spec.ts
        └── page-home.tsx

----------------------------------------

TITLE: Service Worker Update Handler Component
DESCRIPTION: Component code for handling service worker updates and showing a reload toast to users when updates are available.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Calling a Public Method on a Stencil Component
DESCRIPTION: This snippet shows how to call a public method on a Stencil component. It ensures the component is defined using customElements.whenDefined() before attempting to call the method.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: React Library TypeScript Configuration
DESCRIPTION: TypeScript configuration for the React wrapper library project

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2015"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2015",
    "skipLibCheck": true,
    "jsx": "react",
    "allowSyntheticDefaultImports": true,
    "declarationDir": "./dist/types"
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3.1.0
DESCRIPTION: Configuration example showing how to enable path alias transformation in Stencil v3.1.0 config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Creating Vue Plugin for Custom Elements
DESCRIPTION: Vue plugin to register custom elements for lazy-loaded components.

LANGUAGE: typescript
CODE:
// packages/vue-library/lib/plugin.ts

import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Form Association Callback Implementation
DESCRIPTION: Example of implementing the formAssociatedCallback to handle form association events.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true,
})
export class FormAssociatedCmp {
  @AttachInternals()
  internals: ElementInternals;

  formAssociatedCallback(form) {
    form.ariaLabel = 'formAssociated called';
  }

  render() {
    return <input type="text" />;
  }
}

----------------------------------------

TITLE: Configuring Copy Task with Custom Destination
DESCRIPTION: Example demonstrating how to set a custom destination path for copied files using the dest property in a copy task configuration.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]

----------------------------------------

TITLE: Configuring dist-custom-elements in Stencil Config
DESCRIPTION: Basic configuration setup for the dist-custom-elements output target in a Stencil project's config file.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Angular Component Usage Example
DESCRIPTION: Demonstrates how to use the wrapped Stencil components in an Angular template

LANGUAGE: html
CODE:
<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Installing Ionic Framework in Ember
DESCRIPTION: This snippet shows how to add the Ionic Framework to an Ember project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Installing WebdriverIO Visual Service
DESCRIPTION: Command to install the WebdriverIO visual testing service package as a dev dependency.

LANGUAGE: bash
CODE:
npm install --save-dev @wdio/visual-service

----------------------------------------

TITLE: Basic Stencil Config Example
DESCRIPTION: A minimal example of a Stencil configuration file that sets the namespace and source directory.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Importing and Exporting Generated Angular Wrappers
DESCRIPTION: This snippet demonstrates how to import and export the generated Angular component wrappers in the main Angular module of the component library.

LANGUAGE: typescript
CODE:
import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Creating a Worker Pool in Stencil
DESCRIPTION: Shows how to create multiple Worker instances manually using the workerPath provided by Stencil.

LANGUAGE: tsx
CODE:
import { workerPath } from '../../stuff.worker.ts?worker';

const workerPool = [
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
];

----------------------------------------

TITLE: Configuring Vue Library TypeScript Settings
DESCRIPTION: TypeScript configuration specific to the Vue component library project.

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2020"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2017",
    "skipLibCheck": true
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: Stencil Component Implementation with Method
DESCRIPTION: Example Stencil component implementation using the getRandomInt helper in a method.

LANGUAGE: tsx
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Initializing a Stencil Project with npm
DESCRIPTION: Command to create a new Stencil project using the create-stencil CLI with npm.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Configuring Stencil for Test File Selection
DESCRIPTION: This TypeScript snippet demonstrates how to configure the Stencil config file to select specific test files using a regular expression, ensuring compatibility with WebdriverIO test file naming conventions.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // ...
  testing: {
    testRegex: '(/__tests__/.*|\\.?(spec))\\.(	s|js)$',
  },
};

----------------------------------------

TITLE: Loading Stencil Components via Script Tag
DESCRIPTION: Shows how to load a Stencil component library using a script tag with type module attribute.

LANGUAGE: html
CODE:
<script type="module" src="https://unpkg.com/my-design-system"></script>

----------------------------------------

TITLE: Inline Mocking in Jest Test with TypeScript
DESCRIPTION: Alternative approach to mocking by providing the mock implementation directly in the test file using jest.mock(). This eliminates the need for a separate mock file.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil Config
DESCRIPTION: Basic configuration to enable automatic README generation in stencil.config.ts

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Example Stencil Stats JSON Output Structure
DESCRIPTION: Provides a sample of the JSON data structure generated by the Stencil stats documentation, including compiler info, app details, components, and various output formats.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Migrating from dist-custom-elements-bundle to dist-custom-elements in Stencil v3
DESCRIPTION: Example of migrating from the removed dist-custom-elements-bundle output target to the dist-custom-elements output target in Stencil v3.

LANGUAGE: typescript
CODE:
// stencil.config.ts
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
-    {
-      type: 'dist-custom-elements-bundle',
-      // additional configuration
-    },
+    {
+      type: 'dist-custom-elements',
+      customElementsExportBehavior: 'bundle'
+    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil Config
DESCRIPTION: Basic configuration to enable README generation in a Stencil project by adding the docs-readme output target to stencil.config.ts

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Optimize JavaScript Function Declaration
DESCRIPTION: Utility function signature for optimizing JavaScript code with target-specific optimizations.

LANGUAGE: jsx
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Configuring TSConfig for React Library
DESCRIPTION: Base TypeScript configuration file for the React wrapper library project.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Implementing formResetCallback in Stencil
DESCRIPTION: Shows how to use the formResetCallback to reset a form-associated component's internal state when the form is reset.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-reset-cb',
  formAssociated: true,
})
export class MyComponent {
  @AttachInternals()
  internals: ElementInternals;

  formResetCallback() {
    this.internals.setValidity({});
    this.internals.setFormValue("");
  }

  render() {
    return <input type="text"></input>
  }
}

----------------------------------------

TITLE: Writing a Stencil E2E Test with Mocking in TypeScript
DESCRIPTION: Example of an E2E test for a Stencil component using newSpecPage. It demonstrates how to mock the 'getRandomInt' function and test the component's 'bar' method.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Creating Stencil Component Library
DESCRIPTION: Commands to generate and set up a Stencil component library.

LANGUAGE: bash
CODE:
npm init stencil components stencil-library
cd stencil-library
npm install

----------------------------------------

TITLE: Generating README Files Using Stencil Build Command
DESCRIPTION: Demonstrates how to use the Stencil build command to generate README files for components.

LANGUAGE: bash
CODE:
npx stencil build

LANGUAGE: bash
CODE:
npm stencil build --watch

LANGUAGE: bash
CODE:
npx stencil build --docs

----------------------------------------

TITLE: Implementing Hydrate Options in Prerender Config
DESCRIPTION: This code shows how to implement the hydrateOptions hook in the prerender config. It allows setting individual hydrate options for each page during the prerendering process, such as enabling pretty HTML output.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Using renderToString Function
DESCRIPTION: Example of using renderToString to hydrate HTML with formatting options, taken from Ionic Core

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(srcHtml, {
  prettyHtml: true,
  removeScripts: true
});

console.log(results.html);

----------------------------------------

TITLE: Form State Restore Implementation
DESCRIPTION: Example of a date picker component implementing formStateRestoreCallback for state restoration.

LANGUAGE: tsx
CODE:
import { Component, h, State, AttachInternals } from '@stencil/core';

@Component({
  tag: 'fa-date-picker',
  formAssociated: true,
})
export class MyDatePicker {
  @State() value: string = "";
  @State() view: "weeks" | "months" = "weeks";

  @AttachInternals()
  internals: ElementInternals;

  onInputChange(e) {
    e.preventDefault();
    const date = e.target.value;
    this.setValue(date);
  }

  setValue(date: string) {
    this.internals.setFormValue(date, `${date}#${this.view}`);
  }

  formStateRestoreCallback(state, _mode) {
    const [date, view] = state.split("#");
    this.view = view;
    this.setValue(date);
  }

  render() {
    return <div>
      Mock Date Picker, mode: {this.view}
      <input class="date-picker" onChange={e => this.onInputChange(e)}></input>
    </div>
  }
}

----------------------------------------

TITLE: Configuring Root TypeScript Setup
DESCRIPTION: Root level TypeScript configuration for the monorepo workspace

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Synchronous Transpilation of Stencil Code
DESCRIPTION: Function signature for the transpileSync() method, which is the synchronous version of transpile(). It requires TypeScript to be globally available in browser environments.

LANGUAGE: typescript
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Documenting Shadow Parts in Stencil Component
DESCRIPTION: Use @part JSDoc tags to document shadow parts in a Stencil component. This information will be included in the generated README.

LANGUAGE: tsx
CODE:
/**
 * @part label - The label text describing the component.
 */
@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  // ...

  render() {
    return (
      <div part="label">
        <slot></slot>
      </div>
    );
  }
}

----------------------------------------

TITLE: Writing a Stencil E2E Test with Mocking in TypeScript
DESCRIPTION: Example of an E2E test for a Stencil component using newSpecPage. It demonstrates how to mock the 'getRandomInt' function and test the component's 'bar' method.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Initializing Stencil Dev Server using start() Method
DESCRIPTION: The start() method initializes a Stencil development server. It accepts a configuration object, logger instance, and optional compiler watcher as parameters, returning a Promise that resolves to a DevServer instance.

LANGUAGE: tsx
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Updating Custom Elements Auto-Definition in Stencil v3
DESCRIPTION: Example of updating the configuration to use the new customElementsExportBehavior instead of the deprecated autoDefineCustomElements option for the dist-custom-elements output target in Stencil v3.

LANGUAGE: typescript
CODE:
// stencil.config.ts
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
-      autoDefineCustomElements: true,
+      customElementsExportBehavior: 'auto-define-custom-elements',
      // ...
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Generating README Files Using Stencil Build Command
DESCRIPTION: Use the Stencil build command to generate README files for components. The --watch flag can be used for automatic updates.

LANGUAGE: bash
CODE:
npx stencil build

LANGUAGE: bash
CODE:
npm stencil build --watch

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: Example of documenting slots using the @slot JSDoc tag in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Element Decorator Usage in Stencil
DESCRIPTION: Demonstrates how to use the @Element decorator to access the host element within a component class, including height calculation example.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

export class TodoList {
  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Customizing Playwright Test File Matching
DESCRIPTION: Example of customizing the Playwright config to match a different test file pattern for gradual migration.

LANGUAGE: typescript
CODE:
export default createConfig({
  // Example: match all test files with the 'e2e.playwright.ts' naming convention
  testMatch: '*.e2e.playwright.ts',
});

----------------------------------------

TITLE: Installing @wdio/visual-service Plugin for WebdriverIO
DESCRIPTION: Command to install the @wdio/visual-service plugin for visual testing in a WebdriverIO project using npm or yarn.

LANGUAGE: bash
CODE:
npm install --save-dev @wdio/visual-service

----------------------------------------

TITLE: Using Stencil Components with Props in HTML
DESCRIPTION: Example of using a Stencil component with props in an HTML file.

LANGUAGE: html
CODE:
<todo-list name="Tuesday's To-Do List"></todo-list>

----------------------------------------

TITLE: Basic Copy Task Configuration for WWW Output
DESCRIPTION: Example showing how to configure a basic copy task in the www output target to copy an images directory.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      copy: [
        { src: 'images' }
      ]
    }
  ]

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation in Stencil
DESCRIPTION: This snippet shows how to configure a Stencil project to validate the primary package output target. It sets the 'dist' output target as the primary target for validation and enables the validation feature.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Configuring docs-custom Output Target in Stencil
DESCRIPTION: This snippet demonstrates how to add the 'docs-custom' output target to your Stencil configuration. It includes a generator function that receives the docs JSON data as an argument, allowing for custom logic implementation.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Implementing CSP Nonce in Stencil Custom Elements
DESCRIPTION: Demonstrates how to implement CSP nonce in a Stencil custom elements output target within an Angular application. Shows usage of setNonce helper function with custom elements configuration.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Synchronous Code Transpilation
DESCRIPTION: Function signature for synchronous code transpilation with optional TranspileOptions.

LANGUAGE: tsx
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Using a Functional Component with Props in Stencil JSX
DESCRIPTION: Shows how to use a functional component in JSX, passing props as attributes.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Path Alias Transform Example
DESCRIPTION: Demonstrates how path aliases are transformed in the output collection when transformAliasedImportPathsInCollection is enabled.

LANGUAGE: typescript
CODE:
// Source code
import * as utils from '@utils';

// Output code
import * as utils from '../path/to/utils';

----------------------------------------

TITLE: Screenshot Connector Interface Definition
DESCRIPTION: TypeScript interface defining the required methods for a screenshot connector implementation.

LANGUAGE: typescript
CODE:
export interface ScreenshotConnector {
  initBuild(opts: ScreenshotConnectorOptions): Promise<void>;

  pullMasterBuild(): Promise<void>;

  getMasterBuild(): Promise<ScreenshotBuild>;

  getScreenshotCache(): Promise<ScreenshotCache>;

  completeBuild(masterBuild: ScreenshotBuild): Promise<ScreenshotBuildResults>;
  
  publishBuild(buildResults: ScreenshotBuildResults): Promise<ScreenshotBuildResults>;

  updateScreenshotCache(screenshotCache: ScreenshotCache, buildResults: ScreenshotBuildResults): Promise<ScreenshotCache>;

  generateJsonpDataUris(build: ScreenshotBuild): Promise<void>;
}

----------------------------------------

TITLE: Setting Object Props via JavaScript
DESCRIPTION: Example of manually setting object properties on a Stencil component using JavaScript.

LANGUAGE: markup
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Running Individual Stencil Tasks in TypeScript
DESCRIPTION: Executes individual Stencil tasks given a NodeJS process, Stencil config, and task command. An optional CompilerSystem can be provided.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Installing Lerna Globally
DESCRIPTION: Command to install Lerna globally for managing monorepo projects.

LANGUAGE: bash
CODE:
npm install --global lerna

----------------------------------------

TITLE: Adding a Component Overview
DESCRIPTION: Add a JSDoc comment to the component class to generate an overview section in the README.

LANGUAGE: tsx
CODE:
/**
 * A simple component for formatting names
 *
 * This component will do some neat things!
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { }

----------------------------------------

TITLE: Creating a Stencil Component Library
DESCRIPTION: Commands to create and set up a new Stencil component library.

LANGUAGE: bash
CODE:
cd packages/
npm init stencil components stencil-library
cd stencil-library
# Install dependencies
npm install

----------------------------------------

TITLE: Loading Stencil Component via CDN in HTML
DESCRIPTION: Demonstrates how to load a Stencil component through a CDN using a script tag in a simple HTML page.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Configuring TypeScript Path Aliases
DESCRIPTION: Example of configuring path aliases in tsconfig.json to map '@utils' to a specific file path for TypeScript module resolution.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Configuring Stats Generation in Stencil Scripts (TSX)
DESCRIPTION: Shows how to add scripts to package.json for generating stats documentation using the --stats flag. Includes options for specifying output file path.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Setting Default Style Mode in Stencil
DESCRIPTION: Shows how to set a default style mode for all components using the setMode function from @stencil/core.

LANGUAGE: ts
CODE:
import { setMode } from '@stencil/core';
setMode(() => 'ios'); // Setting iOS as the default mode for all components

----------------------------------------

TITLE: Data Flow Component Example
DESCRIPTION: Shows how to pass data from parent to child components using props.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
})
export class TodoList {
  render() {
    return (
      <div>
        <h1>To-Do List Name: Stencil To Do List</h1>
        <ul>
           <todo-list-item thingToDo={"Learn about Stencil Props"}></todo-list-item>
           <todo-list-item thingToDo={"Write some Stencil Code with Props"}></todo-list-item>
           <todo-list-item thingToDo={"Dance Party"}></todo-list-item>
        </ul>
      </div>
    )
  }
}

----------------------------------------

TITLE: Configuring Prerender Debug Settings for Stencil
DESCRIPTION: TypeScript configuration for prerender debugging settings, including URL crawling control and runtime logging options.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Implementing CSP Nonce in Stencil Custom Elements
DESCRIPTION: Example of setting up CSP nonce in a Stencil custom elements output target within an Angular application's entrypoint. Demonstrates importing and using the setNonce helper function.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: E2E Test Using page.setContent() in Stencil Playwright
DESCRIPTION: Shows how to write an end-to-end test using the page.setContent() method to define HTML content for testing a Stencil component.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    await page.setContent('<my-component first="Stencil"></my-component>');

    // Rest of test
  });
});

----------------------------------------

TITLE: Demonstrating File Structure for Stencil Components
DESCRIPTION: This snippet shows the recommended file structure for organizing Stencil components, including separate directories for each component and their associated styles and tests.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Configuring TypeScript for WebdriverIO and Stencil
DESCRIPTION: JSON configuration to resolve type clashes between WebdriverIO (Mocha) and Stencil (Jest) by preferring Jest types in the tsconfig.json file.

LANGUAGE: json
CODE:
{
  "types": ["jest"]
}

----------------------------------------

TITLE: Sync Transpile Function Declaration
DESCRIPTION: Synchronous version of the transpile function for converting TypeScript to JavaScript when TypeScript is already loaded globally.

LANGUAGE: tsx
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Implementing formStateRestoreCallback in Stencil
DESCRIPTION: Demonstrates using the formStateRestoreCallback to restore both the value and view state of a custom date picker component.

LANGUAGE: typescript
CODE:
import { Component, h, State, AttachInternals } from '@stencil/core';

@Component({
  tag: 'fa-date-picker',
  formAssociated: true,
})
export class MyDatePicker {
  @State() value: string = "";
  @State() view: "weeks" | "months" = "weeks";

  @AttachInternals()
  internals: ElementInternals;

  onInputChange(e) {
    e.preventDefault();
    const date = e.target.value;
    this.setValue(date);
  }

  setValue(date: string) {
    // second 'state' parameter is used to store both
    // the input value (`date`) _and_ the current view
    this.internals.setFormValue(date, `${date}#${this.view}`);
  }

  formStateRestoreCallback(state, _mode) {
    const [date, view] = state.split("#");
    this.view = view;
    this.setValue(date);
  }

  render() {
    return <div>
      Mock Date Picker, mode: {this.view}
      <input class="date-picker" onChange={e => this.onInputChange(e)}></input>
    </div>
  }
}

----------------------------------------

TITLE: Implementing Worker in Stencil Component
DESCRIPTION: Example showing how to import and use worker functions within a Stencil component.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result);
    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Configuring assetsDirs in Stencil Component
DESCRIPTION: Shows how to configure the assetsDirs option in a Stencil component decorator to specify directories containing required assets.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: Command to install the ember-cli-stencil addon for legacy Ember integration with Stencil components.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Configuring Monorepo TypeScript
DESCRIPTION: Root TypeScript configuration for a monorepo containing Stencil and Vue libraries

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Configuring Vitest for Stencil Component Testing
DESCRIPTION: This configuration enables browser testing in headless Chrome and integrates the Stencil compiler with Vitest.

LANGUAGE: typescript
CODE:
import stencil from 'unplugin-stencil/vite'
import { defineConfig } from 'vitest/config'

export default defineConfig({
    test: {
        browser: {
            enabled: true,
            headless: true,
            name: 'chrome'
        },
    },
    plugins: [stencil()]
})

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: This snippet demonstrates how to add the dist-custom-elements output target to a Stencil project's configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Complex E2E Test Example with Events
DESCRIPTION: Shows a more complex E2E test that checks component classes, properties, and event handling for an ion-toggle component.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Reloading App on Service Worker Update
DESCRIPTION: Code to be added to the root component to reload the app when a new service worker takes control.

LANGUAGE: typescript
CODE:
componentWillLoad() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker
      .getRegistration()
      .then(registration => {
        if (registration?.active) {
          navigator.serviceWorker.addEventListener(
            'controllerchange',
            () => window.location.reload()
          );
        }
      })
  }
}

----------------------------------------

TITLE: Retrieving Stencil Element with getElement() in TypeScript
DESCRIPTION: Demonstrates how to use the getElement() utility to retrieve a Stencil element for a given reference. This example shows how to get a component reference and use componentOnReady() on it.

LANGUAGE: typescript
CODE:
import { getElement } from '@stencil/core'

const stencilComponent = getElement(document.querySelector('my-cmp'))
if (stencilComponent) {
  stencilComponent.componentOnReady().then(() => { ... })
}

----------------------------------------

TITLE: Initializing Monorepo Structure for Stencil-Vue Integration
DESCRIPTION: Example project structure for a monorepo containing Stencil and Vue component libraries.

LANGUAGE: plaintext
CODE:
top-most-directory/
└── packages/
    ├── vue-library/
    │   └── lib/
    │       ├── plugin.ts
    │       └── index.ts
    └── stencil-library/
        ├── stencil.config.js
        └── src/components

----------------------------------------

TITLE: Initializing Monorepo Structure for Stencil-Vue Integration
DESCRIPTION: Example project structure for a monorepo containing Stencil and Vue component libraries.

LANGUAGE: plaintext
CODE:
top-most-directory/
└── packages/
    ├── vue-library/
    │   └── lib/
    │       ├── plugin.ts
    │       └── index.ts
    └── stencil-library/
        ├── stencil.config.js
        └── src/components

----------------------------------------

TITLE: Running Static Build in Stencil
DESCRIPTION: Demonstrates how to use the --prerender flag with the Stencil build command to enable prerendering of components.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Updating Stencil Core Package
DESCRIPTION: Command to update Stencil core package to the latest version

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Configuring Stencil Testing in Config File
DESCRIPTION: Example of how to configure Stencil testing options in the project's config file, specifically setting test path ignore patterns.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  testing: {
    testPathIgnorePatterns: [...]
  }
};

----------------------------------------

TITLE: Installing Ionic Framework in Ember
DESCRIPTION: Command to install the Ionic Framework core package in an Ember project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: This snippet shows how to add the dist-custom-elements output target to a Stencil project's configuration file. It demonstrates the basic structure for configuring this output target in the stencil.config.ts file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: This command installs the ember-cli-stencil addon, which facilitates the integration of Stencil components in legacy Ember applications.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Full Build Example with Stencil Core Compiler
DESCRIPTION: Demonstrates a complete example of setting up and running a full build using the Stencil Core Compiler in a NodeJS environment.

LANGUAGE: typescript
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Rendering Complex Template Content in Stencil
DESCRIPTION: Demonstrates how to render multiple top-level elements using an array or Fragment in Stencil components.

LANGUAGE: tsx
CODE:
import { Fragment } from '@stencil/core';
...
render() {
  return (<Fragment>
    <div class="container">
      <ul>
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
      </ul>
    </div>

    <div class="another-container">
      ... more html content ...
    </div>
  </Fragment>);
}

----------------------------------------

TITLE: Running Visual Regression Tests with Stencil CLI
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison using the Stencil CLI.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Configuring Stencil Angular Output Target
DESCRIPTION: Configuration for generating Angular component wrappers in stencil.config.ts

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Registering Custom Elements in Angular
DESCRIPTION: Use the APP_INITIALIZER to register custom elements during Angular app initialization.

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Configuring VS Code Launch Settings for Prerender Debugging
DESCRIPTION: Configuration for VS Code's launch.json to enable Node.js debugging of Stencil's prerender process, including necessary command arguments and inspector protocol settings.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "Prerender",
      "args": [
        "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
        "prerender",
        "${workspaceFolder}/dist/hydrate/index.js",
        "--max-workers=0",
        "--config=${workspaceFolder}/stencil.config.ts"
      ],
      "protocol": "inspector"
    }
  ]
}

----------------------------------------

TITLE: Consuming Angular Wrapper Components in Standalone App
DESCRIPTION: Shows how to import and use the generated Angular component wrappers in a standalone Angular application.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { MyComponent } from 'component-library';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [MyComponent],
  templateUrl: './app.component.html',
})
export class AppComponent {}

----------------------------------------

TITLE: Configuring Test Scripts in package.json
DESCRIPTION: Example npm scripts configuration for running different types of Stencil tests, including unit tests, watched unit tests, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Importing Component Library in Angular App
DESCRIPTION: TypeScript code showing how to import the component library module in an Angular app module.

LANGUAGE: typescript
CODE:
import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

----------------------------------------

TITLE: Installing @wdio/visual-service Plugin for WebdriverIO
DESCRIPTION: Command to install the @wdio/visual-service plugin for visual testing in a WebdriverIO project using npm or yarn.

LANGUAGE: bash
CODE:
npm install --save-dev @wdio/visual-service

----------------------------------------

TITLE: Stencil Component Implementation with Method
DESCRIPTION: Example Stencil component implementation using the getRandomInt utility.

LANGUAGE: tsx
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Configuring Custom Elements Export Behavior in Stencil v3
DESCRIPTION: Example of configuring the new customElementsExportBehavior option for the dist-custom-elements output target in Stencil v3. This controls how components are exported and defined.

LANGUAGE: typescript
CODE:
// stencil.config.ts
import { Config } from '@stencil/core';
export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      customElementsExportBehavior: 'default' | 'auto-define-custom-elements' | 'bundle' | 'single-export-module',
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Using Host as Fragment in Stencil Components
DESCRIPTION: Shows how to use the Host component as a fragment to render multiple elements at the root level of a component.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Importing Specific Stencil Components
DESCRIPTION: Illustrates how to import specific Stencil components or the entire library using different import statements.

LANGUAGE: javascript
CODE:
// this import loads all compiled components
import { MyComponent } from 'my-design-system'
// only import compiled code for MyComponent
import { MyComponent } from 'my-design-system/my-component'

----------------------------------------

TITLE: Documenting CSS Variables with JSDoc Comments
DESCRIPTION: Example demonstrating how to document CSS custom properties (variables) using JSDoc-style comments. Stencil will automatically extract these comments to generate documentation for CSS variables.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: Documenting CSS Variables in Stencil Projects (CSS)
DESCRIPTION: Shows how to document CSS variables (Custom Properties) using JSDocs-style comments in CSS or SCSS files. This allows Stencil to automatically generate documentation for these variables.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: Accessing Typed Stencil Component in TypeScript
DESCRIPTION: Demonstrates how to properly type and access a Stencil-generated Web Component using the automatically generated HTML element interfaces. This example shows accessing an ion-button element with proper typing.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Styling Host Element
DESCRIPTION: Examples of styling the host element both with and without Shadow DOM.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Using Vue Component Wrappers in a Vue Application
DESCRIPTION: Import and use the Vue component wrappers in a Vue application.

LANGUAGE: javascript
CODE:
import { ComponentLibrary } from 'vue-library';

createApp(App).use(ComponentLibrary).mount('#app');

----------------------------------------

TITLE: Stencil Component Subfolder Directory Structure
DESCRIPTION: Example directory structure showing the generated files for a Stencil component in a subfolder within src/components.

LANGUAGE: plain
CODE:
src
└── components
    └── pages
        └── page-home
            ├── page-home.css
            ├── page-home.e2e.ts
            ├── page-home.spec.ts
            └── page-home.tsx

----------------------------------------

TITLE: Loading Stencil Components via CDN Script
DESCRIPTION: Demonstrates how to load Stencil components using a CDN script tag in a basic HTML page. Shows implementation using Ionic components as an example.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Implementing formDisabledCallback in Stencil
DESCRIPTION: This snippet demonstrates how to use the formDisabledCallback to update a component's CSS class based on its disabled state.

LANGUAGE: typescript
CODE:
import { Component, h, State } from '@stencil/core';

@Component({
  tag: 'form-disabled-cb',
  formAssociated: true,
})
export class MyComponent {
  @State() cssClass: string = "";

  formDisabledCallback(disabled: boolean) {
    if (disabled) {
      this.cssClass = "background-mode";
    } else {
      this.cssClass = "";
    }
  }

  render() {
    return <input type="text" class={this.cssClass}></input>
  }
}

----------------------------------------

TITLE: Initializing Shadow DOM Component in Stencil
DESCRIPTION: Example of creating a Stencil component with Shadow DOM enabled for style encapsulation

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Stencil Project Directory Structure
DESCRIPTION: Shows the typical file structure for a Stencil project with end-to-end tests.

LANGUAGE: tree
CODE:
stencil-project-root
└── src
    └── components
        ├── my.component.tsx
        └── test <-- directory containing test files
            ├── my-component.e2e.ts
            └── my-component.e2e.html

----------------------------------------

TITLE: Exporting Wrappers in Public API
DESCRIPTION: TypeScript code showing how to export the generated component wrappers in the main entry point of the Angular library.

LANGUAGE: typescript
CODE:
export * from './lib/component-library.module';
export { DIRECTIVES } from './lib/stencil-generated';
export * from './lib/stencil-generated/components';

----------------------------------------

TITLE: Configuring Custom Footer in Stencil README Generation
DESCRIPTION: This snippet shows how to add a custom footer to the generated README files by configuring the 'docs-readme' output target in the Stencil configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Accessing Stencil Component Properties in TypeScript
DESCRIPTION: Demonstrates how to access and set properties of a Stencil-generated Web Component using TypeScript. This example shows type-safe interaction with an ion-button element.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Building Stencil Documentation
DESCRIPTION: Command line instructions for generating README documentation using the Stencil build or docs command.

LANGUAGE: bash
CODE:
npx stencil build
npm stencil build --watch
npx stencil build --docs
npx stencil docs

----------------------------------------

TITLE: Using Exportparts in Nested Stencil Components
DESCRIPTION: Demonstrates how to use the exportparts attribute to expose parts of a nested component through the parent component.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'outer-component',
  styleUrl: 'outer-component.css',
  shadow: true,
})
export class OuterComponent {
  render() {
    return (
      <Host>
        <h1>Outer Component</h1>
        <inner-component exportparts="inner-text" />
      </Host>
    );
  }
}

@Component({
  tag: 'inner-component',
  styleUrl: 'inner-component.css',
  shadow: true,
})
export class InnerComponent {
  render() {
    return (
      <Host>
        <h1 part="inner-text">Inner Component</h1>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Importing Hydrate App in Node.js Server
DESCRIPTION: This code demonstrates how to import the hydrateDocument function from the generated hydrate app in a Node.js server environment after publishing the component library.

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Comprehensive E2E Test for Toggle Component
DESCRIPTION: Illustrates a more complex E2E test scenario for a toggle component, including class checks, property setting, and event spying.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Style Modes Configuration
DESCRIPTION: Example of implementing style modes for different design systems (iOS and Material Design).

LANGUAGE: tsx
CODE:
@Component({
  tag: 'simple-button',
  styleUrls: {
    md: './simple-button.md.css',
    ios: './simple-button.ios.css'
  },
})
export class SimpleButton {
  // ...
}

----------------------------------------

TITLE: Defining Object Props in Stencil Component
DESCRIPTION: Demonstrates how to define object and array properties in a Stencil component using the @Prop decorator.

LANGUAGE: tsx
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: Demonstrates how to add the dist-custom-elements output target to a Stencil project's configuration file.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3.1.0 Config
DESCRIPTION: Example of enabling the transformAliasedImportPaths feature in a Stencil v3.1.0 configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Configuring TypeScript Types for Test Environment
DESCRIPTION: TypeScript configuration to resolve type clashes between Jest and Mocha

LANGUAGE: json
CODE:
"types": ["jest"]

----------------------------------------

TITLE: Transpiling Stencil Code
DESCRIPTION: Shows the function signature for transpiling Stencil code. It takes a string of code and optional transpile options, returning a Promise with the transpile results.

LANGUAGE: typescript
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Initializing New Stencil Project
DESCRIPTION: Command to create a new Stencil project using the create-stencil CLI tool

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Configuring Webpack for Stencil Custom Elements
DESCRIPTION: This webpack configuration example demonstrates how to set up a project to use Stencil custom elements, including copying assets from the library.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Configuring Testing Settings in Stencil Config
DESCRIPTION: Reference code showing the testing configuration interface from Stencil's public compiler declarations. This demonstrates the available configuration options for testing in a Stencil project.

LANGUAGE: tsx
CODE:
https://github.com/ionic-team/stencil/blob/32811591777de726f0374649a4f5e250a0a8e355/src/declarations/stencil-public-compiler.ts#L1968-L2119

----------------------------------------

TITLE: Setting String Props in JSX for Parsing
DESCRIPTION: Demonstrates how to set string props in JSX that will be parsed into objects and arrays by the Stencil component.

LANGUAGE: jsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Importing and Using Stencil Component Loader
DESCRIPTION: Demonstrates how to import and use the loader functions generated by the 'dist' output target to register components in an application setup script.

LANGUAGE: typescript
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: CreateCompiler Function Signature
DESCRIPTION: Function signature for creating a compiler instance from a configuration object.

LANGUAGE: tsx
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Stateful Ionic Component Integration in Ember
DESCRIPTION: Complete example of an Ember component implementing the controlled component pattern with an Ionic toggle, including state tracking and event handling

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Using Custom JSDoc Tags
DESCRIPTION: Example of using custom JSDoc tags in a Stencil component

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Installing Playwright Dependencies
DESCRIPTION: Commands to install the Stencil Playwright adapter and core Playwright test package as dev dependencies.

LANGUAGE: bash
CODE:
npm i @stencil/playwright @playwright/test --save-dev

----------------------------------------

TITLE: Configuring Hydrate Options for Individual Pages
DESCRIPTION: This example shows how to use the hydrateOptions hook in the prerender config to set options for individual pages during the prerendering process.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Documenting CSS Variables
DESCRIPTION: Example of documenting CSS variables using JSDoc-style comments

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Accessing Typed Stencil Components in TypeScript
DESCRIPTION: Demonstrates how to use the automatically generated HTML element interfaces to access and manipulate Stencil components with proper typing. Shows how to query and set properties on a button component with full type safety.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Exporting Generated React Components
DESCRIPTION: Modify the React library's entry file to export the generated Stencil component wrappers and the defineCustomElements function.

LANGUAGE: typescript
CODE:
export * from "./components/stencil-generated";
export { defineCustomElements } from "stencil-library/loader";

----------------------------------------

TITLE: Exporting Generated React Components
DESCRIPTION: Modify the React library's entry file to export the generated Stencil component wrappers and the defineCustomElements function.

LANGUAGE: typescript
CODE:
export * from "./components/stencil-generated";
export { defineCustomElements } from "stencil-library/loader";

----------------------------------------

TITLE: Loading Stencil Component via ES Modules in HTML
DESCRIPTION: Shows how to import Stencil components using ES Modules in an HTML file. This method allows for more granular control over which components are loaded.

LANGUAGE: html
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Simulating User Input in E2E Tests
DESCRIPTION: Demonstrates how to simulate user input in an E2E test, including typing into an input field and using keyboard shortcuts.

LANGUAGE: typescript
CODE:
const page = await newE2EPage({
  html: `
      <dom-interaction></dom-interaction>
    `
});

const input = await page.find('dom-interaction >>> .input');

let value = await input.getProperty('value');
expect(value).toBe('');

await input.press('8');
await input.press('8');
await input.press(' ');

await page.keyboard.down('Shift');
await input.press('KeyM');
await input.press('KeyP');
await input.press('KeyH');
await page.keyboard.up('Shift');

----------------------------------------

TITLE: Configuring Stencil Test Regex
DESCRIPTION: Stencil configuration to set the test regex for picking up Stencil-specific test files, allowing separation from WebdriverIO tests.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // ...
  testing: {
    testRegex: '(/__tests__/.*|\\.?(spec))\\.(ts|js)$',
  },
};

----------------------------------------

TITLE: Using Host Component for Attribute Management in Stencil
DESCRIPTION: Demonstrates how to use the Host component to set attributes and event listeners on the host element of a Stencil component. Shows conditional class and aria attribute handling.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Custom Rollup Plugins Configuration in TypeScript
DESCRIPTION: This snippet shows how to configure custom Rollup plugins in the Stencil config file. It demonstrates adding plugins before node-resolve and after commonjs transform.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Registering Custom Elements in Angular
DESCRIPTION: This snippet shows how to register custom elements using the APP_INITIALIZER in the Angular module. It uses the loader from the Stencil library to define all custom elements during app initialization.

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Custom Service Worker Implementation with Workbox
DESCRIPTION: Boilerplate code for implementing a custom service worker using Workbox, including precaching configuration.

LANGUAGE: typescript
CODE:
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Initializing WebdriverIO Project for Stencil
DESCRIPTION: This command initiates the WebdriverIO configuration wizard to set up a new project for testing Stencil components. It guides the user through selecting the type of testing and framework options.

LANGUAGE: bash
CODE:
npm init wdio@latest .

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Prerendering
DESCRIPTION: This configuration sets up VS Code to debug Stencil's prerendering process in a Node.js environment. It specifies the Stencil CLI command for prerendering and disables worker forking for easier debugging.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "node",
      "request": "launch",
      "name": "Prerender",
      "args": [
        "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
        "prerender",
        "${workspaceFolder}/dist/hydrate/index.js",
        "--max-workers=0",
        "--config=${workspaceFolder}/stencil.config.ts"
      ],
      "protocol": "inspector"
    }
  ]
}

----------------------------------------

TITLE: Using page.waitForChanges() in Stencil E2E Tests
DESCRIPTION: Demonstrates the usage of page.waitForChanges() method to wait for Stencil components to rehydrate after a re-render in end-to-end tests.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // Assume we have a template setup with the `my-component` component and a `button`
    await page.goto('/my-component/my-component.e2e.html');

    const button = page.locator('button');
    // Assume clicking the button changes the `@Prop()` values on `my-component`
    button.click();
    await page.waitForChanges();
  });
});

----------------------------------------

TITLE: Using optimizeJs() Function
DESCRIPTION: Utility function for JavaScript optimization with target-specific enhancements.

LANGUAGE: jsx
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Host Component as Fragment
DESCRIPTION: Shows how to use Host component to render multiple elements at the root level of a component.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Configuring Copy Task with Custom Destination
DESCRIPTION: Example demonstrating how to set a custom destination directory for copied files using the dest option in a copy task configuration.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]

----------------------------------------

TITLE: Configuring Package.json for Stencil Component Library
DESCRIPTION: Example package.json configuration for distributing a Stencil component library. Includes entry points for different module formats (CommonJS, ES modules), type definitions, and CDN access via unpkg. Specifies which files should be included in the NPM package.

LANGUAGE: json
CODE:
{
  "main": "dist/index.cjs.js",
  "module": "dist/index.js",
  "es2015": "dist/esm/index.mjs",
  "es2017": "dist/esm/index.mjs",
  "types": "dist/types/components.d.ts",
  "unpkg": "dist/my-project-name/my-project-name.esm.js",
  "collection:main": "dist/collection/index.js",
  "collection": "dist/collection/collection-manifest.json",
  "files": [
    "dist/",
    "css/",
    "loader/"
  ]
}

----------------------------------------

TITLE: Stencil Copy Task Configuration
DESCRIPTION: Configuration example showing how to use Stencil copy tasks to copy assets to the distribution directory.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
};

----------------------------------------

TITLE: Setting Asset Path for Custom Elements
DESCRIPTION: Example of how to set the asset path for custom elements using the setAssetPath function.

LANGUAGE: javascript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Creating a Monorepo with Lerna
DESCRIPTION: Commands to initialize a Lerna workspace and install necessary dependencies for a Stencil-Vue integration project.

LANGUAGE: bash
CODE:
# From your top-most-directory/, initialize a workspace
lerna init

# install dependencies
npm install

# install typescript and node types
npm install typescript @types/node --save-dev

----------------------------------------

TITLE: Customizing Document Title in Stencil Prerender Config (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the afterHydrate hook in Stencil's Prerender Config to set the document title based on the URL pathname. It utilizes the PrerenderConfig interface from @stencil/core.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Defining Custom Elements
DESCRIPTION: Example showing how to define a custom element using the generated output.

LANGUAGE: typescript
CODE:
import { defineCustomElement } from 'my-library/dist/components/hello-world';

defineCustomElement(); // Same as manually calling: customElements.define('hello-world', HelloWorld);

----------------------------------------

TITLE: Event Handling in Stencil Components
DESCRIPTION: Demonstrates how to handle user input events using arrow functions in Stencil components.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class (JavaScript)
DESCRIPTION: This code demonstrates how to create a custom screenshot connector by extending the base ScreenshotConnector class from Stencil. It imports the base class and exports a new class that extends it.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Configuring Stencil WWW Output Target in TSX
DESCRIPTION: Basic configuration example for setting up the www output target in a Stencil project. This is the default output target if none is specified and is useful for both webapp development and component library testing.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Requesting Notification Permissions (JavaScript)
DESCRIPTION: Example of how to request notification permissions from the user in a web application.

LANGUAGE: javascript
CODE:
if ('Notification' in window && 'serviceWorker' in navigator) {
  Notification.requestPermission(status => {
    // status will either be 'default', 'granted' or 'denied'
    console.log(`Notification permissions have been ${status}`);
  });
}

----------------------------------------

TITLE: Creating a Form-Associated Stencil Component
DESCRIPTION: This example shows how to create a minimal form-associated Stencil component using the formAssociated option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Component Lifecycle
DESCRIPTION: This snippet demonstrates how to fetch dynamic data from a server within a Stencil component's lifecycle method. It uses async/await to handle the Promise returned by the fetch operation.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Installing Stencil Playwright Adapter Dependencies
DESCRIPTION: Command to install the Stencil Playwright adapter and Playwright test runner using npm or yarn.

LANGUAGE: bash
CODE:
npm i @stencil/playwright @playwright/test --save-dev

----------------------------------------

TITLE: Configuring Prerender Config Path in Stencil Config
DESCRIPTION: Sets the path to the prerendering config file in the Stencil configuration file (stencil.config.ts).

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Executing Static Build in Stencil
DESCRIPTION: Command to enable prerendering during Stencil build process using the --prerender flag.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Setting customElementsExportBehavior in Stencil Config
DESCRIPTION: Demonstrates how to set the customElementsExportBehavior option in the Stencil configuration to modify component export behavior.

LANGUAGE: typescript
CODE:
// stencil.config.ts
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      customElementsExportBehavior: 'default' | 'auto-define-custom-elements' | 'bundle' | 'single-export-module',
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Creating a Consumer Vue App
DESCRIPTION: Command to generate a new Vue app using Vue CLI.

LANGUAGE: bash
CODE:
npm init vue@3 my-app

----------------------------------------

TITLE: Configuring Multiple Output Targets in Stencil
DESCRIPTION: Basic configuration example showing how to set up multiple output targets in a Stencil project's config file. Demonstrates configuring both 'dist' and 'www' output types.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Importing and Using Vue Component Library
DESCRIPTION: This JavaScript snippet shows how to import and use the Vue component library in a Vue application.

LANGUAGE: javascript
CODE:
import { ComponentLibrary } from 'vue-library';

createApp(App).use(ComponentLibrary).mount('#app');

----------------------------------------

TITLE: Setting Asset Path in HTML
DESCRIPTION: Demonstrates how to set the asset path for Stencil components when importing them via a script tag in HTML.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: JSX Utility Implementation
DESCRIPTION: Utility functions for enabling JSX support in Stencil component tests

LANGUAGE: typescript
CODE:
export const createElement = (tag, props, ...children) => {
    if (typeof tag === 'function') {
        return tag(props, ...children)
    }
    const element = document.createElement(tag)

    Object.entries(props || {}).forEach(([name, value]) => {
        if (name.startsWith('on') && name.toLowerCase() in window) {
            element.addEventListener(name.toLowerCase().substr(2), value)
        } else {
            element.setAttribute(name, value.toString())
        }
    })

    children.forEach((child) => {
        appendChild(element, child)
    })

    return element
}

export const appendChild = (parent, child) => {
    if (Array.isArray(child)) {
        child.forEach((nestedChild) => appendChild(parent, nestedChild))
    } else {
        parent.appendChild(child.nodeType ? child : document.createTextNode(child))
    }
}

export const createFragment = (_, ...children) => {
    return children
}

----------------------------------------

TITLE: Mocking Node Module Example in TypeScript
DESCRIPTION: Shows how to create a basic mock for an npm package (md5) by implementing a mock that returns a static value.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Configuring WWW Output Target
DESCRIPTION: Stencil configuration for WWW output target with file copy settings for testing.

LANGUAGE: typescript
CODE:
{
   type: 'www',
   serviceWorker: null,
   copy: [{ src: '**/*.html' }, { src: '**/*.css' }]
}

----------------------------------------

TITLE: Configuring WWW Output Target
DESCRIPTION: Stencil configuration for WWW output target with file copy settings for testing.

LANGUAGE: typescript
CODE:
{
   type: 'www',
   serviceWorker: null,
   copy: [{ src: '**/*.html' }, { src: '**/*.css' }]
}

----------------------------------------

TITLE: Importing and Exporting Generated Angular Wrappers
DESCRIPTION: Example of importing and exporting generated Angular component wrappers in the main Angular module.

LANGUAGE: typescript
CODE:
import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Watching and Parsing Object Props in Stencil Component
DESCRIPTION: Shows how to watch for changes in object props and parse them in a Stencil component using TypeScript decorators and lifecycle methods.

LANGUAGE: typescript
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

----------------------------------------

TITLE: Creating a Consumer Angular App
DESCRIPTION: Angular CLI command to generate a new Angular application in the workspace.

LANGUAGE: bash
CODE:
npx -p @angular/cli ng generate app my-app

----------------------------------------

TITLE: Running Specific Stencil Tests via Command Line
DESCRIPTION: Examples of how to run specific unit or end-to-end tests in Stencil using command line arguments, including running a single test file and enabling code coverage.

LANGUAGE: sh
CODE:
# run a single unit test
npx stencil test --spec -- src/components/my-component/my-component.spec.ts
# run a single e2e test
npx stencil test --e2e -- src/components/my-component/my-component.e2e.ts
# enable code coverage
npx stencil test --spec --coverage

----------------------------------------

TITLE: Form Reset Callback Implementation
DESCRIPTION: Shows how to handle form reset events by clearing form value and validity state.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-reset-cb',
  formAssociated: true,
})
export class MyComponent {
  @AttachInternals()
  internals: ElementInternals;

  formResetCallback() {
    this.internals.setValidity({});
    this.internals.setFormValue("");
  }

  render() {
    return <input type="text"></input>
  }
}

----------------------------------------

TITLE: Implementing Module Mocks in WebdriverIO Tests
DESCRIPTION: Demonstrates how to mock both local project files and external modules using WebdriverIO's mocking utilities. Shows mocking a local utility function to return a fixed value and mocking an external module using a manual mock file.

LANGUAGE: typescript
CODE:
import { mock, fn } from '@wdio/browser-runner'
import { format } from './utils/utils.ts'

// mock files within the project
mock('./utils/utils.ts', () => ({
    format: fn().mockReturnValue(42)
}))
// mock whole modules and replace functionality with what is defined in `./__mocks__/leftpad.ts`
mock('leftpad')

console.log(format()) // returns `42`

----------------------------------------

TITLE: Example Telemetry Event Structure in JavaScript
DESCRIPTION: This snippet shows the structure of a typical telemetry event collected by Stencil. It includes various data points such as command duration, component count, output targets, package versions, and system information.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class
DESCRIPTION: Basic implementation of a custom screenshot connector by extending the base ScreenshotConnector class from Stencil core.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: Basic configuration for setting up the dist output target in a Stencil project's config file.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Example Telemetry Event Structure in JavaScript
DESCRIPTION: Shows the structure and content of a typical telemetry event collected by Stencil CLI. Includes system information, build configuration, dependency versions, and execution details.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Generating JSON Docs via CLI in Stencil
DESCRIPTION: Command to generate JSON documentation using Stencil's CLI. This creates a JSON file containing component documentation at the specified path.

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Using a Functional Component with Children in Stencil JSX
DESCRIPTION: Demonstrates how to use a functional component that accepts children in JSX.

LANGUAGE: tsx
CODE:
<Hello name="World">
  <p>I'm a child element.</p>
</Hello>

----------------------------------------

TITLE: Using Element Decorator in Stencil TSX
DESCRIPTION: This snippet shows how to use the Element decorator to access the host element within the component class.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Configuring Stencil dist Output Target
DESCRIPTION: Demonstrates how to configure the 'dist' output target in Stencil's configuration file. This setting generates a reusable component library that can be self-lazy loading.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Node Polyfills Configuration
DESCRIPTION: Complete example of configuring Node polyfills in a Stencil project using rollup-plugin-node-polyfills.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Configuring JSON Docs Output Target
DESCRIPTION: Configuration for automatically generating JSON documentation during build

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Querying Typed Stencil Component in TypeScript
DESCRIPTION: Demonstrates how to query and interact with a typed Stencil component using the automatically generated HTMLElement interfaces. Shows proper typing for an ion-button component.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Stencil Lifecycle DOM Events Example
DESCRIPTION: A table showing the various component lifecycle events that can be dispatched when lifecycleDOMEvents is enabled. These events are primarily used for testing purposes.

LANGUAGE: markdown
CODE:
| Event Name                    | Description                                            |
| ----------------------------- | ------------------------------------------------------ |
| `stencil_componentWillLoad`   | Dispatched for each component's `componentWillLoad`.   |
| `stencil_componentWillUpdate` | Dispatched for each component's `componentWillUpdate`. |
| `stencil_componentWillRender` | Dispatched for each component's `componentWillRender`. |
| `stencil_componentDidLoad`    | Dispatched for each component's `componentDidLoad`.    |
| `stencil_componentDidUpdate`  | Dispatched for each component's `componentDidUpdate`.  |
| `stencil_componentDidRender`  | Dispatched for each component's `componentDidRender`.  |

----------------------------------------

TITLE: Installing Legacy Ember Stencil Integration
DESCRIPTION: Command to install the legacy ember-cli-stencil addon for older Ember applications

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Accessing Web Worker Instance Directly in Stencil (TypeScript)
DESCRIPTION: Demonstrates how to access the actual Worker instance in Stencil for manual postMessage usage.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);

    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Screenshot Connector Interface Definition (TSX)
DESCRIPTION: Defines the interface for the ScreenshotConnector, listing all methods that can be overridden in a custom implementation. These methods handle various aspects of the screenshot testing process.

LANGUAGE: tsx
CODE:
export interface ScreenshotConnector {
  initBuild(opts: ScreenshotConnectorOptions): Promise<void>;

  pullMasterBuild(): Promise<void>;

  getMasterBuild(): Promise<ScreenshotBuild>;

  getScreenshotCache(): Promise<ScreenshotCache>;

  completeBuild(masterBuild: ScreenshotBuild): Promise<ScreenshotBuildResults>;
  
  publishBuild(buildResults: ScreenshotBuildResults): Promise<ScreenshotBuildResults>;

  updateScreenshotCache(screenshotCache: ScreenshotCache, buildResults: ScreenshotBuildResults): Promise<ScreenshotCache>;

  generateJsonpDataUris(build: ScreenshotBuild): Promise<void>;
}

----------------------------------------

TITLE: Writing a Test with Mocked Helper in TypeScript
DESCRIPTION: Example of a test that uses the mocked 'getRandomInt' function. It demonstrates how to use Jest's mocking capabilities and test the 'bar' function with the mock in place.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Example Telemetry Event Data Structure in JavaScript
DESCRIPTION: This snippet demonstrates the structure of a typical telemetry event collected by Stencil. It includes information about the Stencil version, system details, command arguments, and project configuration.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Manipulating Children with FunctionalUtilities
DESCRIPTION: Demonstrates how to use the utils object provided by FunctionalComponent to transform child elements.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Configuring NPM Scripts for Stencil and WebdriverIO Tests
DESCRIPTION: JSON configuration in package.json to create a script that runs both Stencil and WebdriverIO tests sequentially.

LANGUAGE: json
CODE:
{
    "scripts:": {
        "test.e2e": "stencil test && wdio run wdio.conf.ts"
    }
}

----------------------------------------

TITLE: Styling CSS Parts from Light DOM
DESCRIPTION: Demonstrates how to style CSS parts defined in a Stencil component from the light DOM using the ::part() pseudo-element.

LANGUAGE: css
CODE:
shadow-card::part(heading) {
  text-transform: uppercase;
}

----------------------------------------

TITLE: Setting Nonce for Custom Elements in Angular
DESCRIPTION: This example shows how to set a nonce for the dist-custom-elements output target in an Angular application's entrypoint. It uses the setNonce helper function and imports a specific component.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Non-JSX Event Listening
DESCRIPTION: Shows how to listen to custom events in non-JSX context using vanilla JavaScript.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Stencil Config for TypeScript Support
DESCRIPTION: Configuration for generating TypeScript declarations in stencil.config.ts

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      generateTypeDeclarations: true,
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Configuring Prerender Debug Settings in Stencil
DESCRIPTION: TypeScript configuration for Stencil prerender debugging setup. Includes crawl settings, entry URLs, and runtime logging options.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: This snippet shows how to add the dist-custom-elements output target to a Stencil project's configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Using Stencil Component in HTML
DESCRIPTION: Example of how to use a Stencil component in HTML markup

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Using a Helper Function in a Service in Stencil with TypeScript
DESCRIPTION: Example of a service that uses the 'getRandomInt' helper function. This demonstrates how custom code might be used within a Stencil application.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Configuring HTTPS for Stencil Dev Server in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the Stencil dev server to use HTTPS by providing SSL certificate and key files. It also shows how to set a custom port and reload strategy.

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8'),
    },
  },
};

----------------------------------------

TITLE: Configuring Stencil for CI/CD Environments
DESCRIPTION: Shows how to configure Stencil for Continuous Integration/Deployment environments, specifically for GitLab CI. It demonstrates setting browser arguments to run Headless Chrome without sandbox.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'Foo',
  testing: {
    browserArgs: ['--no-sandbox', '--disable-setuid-sandbox'],
  },
  outputTargets: [
    { type: 'dist' },
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Setting Asset Path for Custom Elements in JavaScript
DESCRIPTION: This snippet shows how to set the asset path for custom elements using the setAssetPath function in a JavaScript environment.

LANGUAGE: javascript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Configuring Page-Specific Hydrate Options (TypeScript)
DESCRIPTION: Example of using the hydrateOptions hook in the prerender config to set individual hydrate options for each page during prerendering.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Registering Custom Elements in Angular
DESCRIPTION: Use the APP_INITIALIZER to register custom elements during app initialization.

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: CSP Nonce Meta Tag Implementation for SSR
DESCRIPTION: Shows how to implement CSP nonce using a meta tag in the DOM head for Server-Side Rendering (SSR) scenarios. This approach is necessary when direct runtime code manipulation is not possible.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Warning-Enabled Copy Task in Stencil
DESCRIPTION: Demonstrates how to enable warnings for copy tasks when source files or directories are not found using the warn property.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Configuring Stats Generation in Package Scripts
DESCRIPTION: Examples of how to configure npm scripts to generate stats files using the --stats flag with Stencil build command.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Executing Static Build in Stencil
DESCRIPTION: This command runs the Stencil build process with prerendering enabled using the --prerender flag.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Root TypeScript Configuration
DESCRIPTION: Base TypeScript configuration for the monorepo workspace.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Writing a Test with Mocked Helper in TypeScript
DESCRIPTION: Example of a test file that uses Jest to mock the utils module and test the bar function. This demonstrates how to apply the mock and write an expectation.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Configuring Stencil docs-custom Output Target
DESCRIPTION: Example configuration for setting up the docs-custom output target in Stencil. The configuration allows defining a custom generator function that receives the documentation JSON data as an argument during build time.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Testing with Mocked Helper in TypeScript
DESCRIPTION: Test implementation showing how to use Jest.mock() to mock the utils helper and test the bar function.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Comprehensive E2E Test Example in Stencil
DESCRIPTION: Provides a more detailed example of an E2E test for a toggle component. It demonstrates setting content, spying on events, finding elements, setting properties, and making assertions about component state and behavior.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Configuring Stencil docs-custom Output Target
DESCRIPTION: Example configuration for setting up the docs-custom output target in Stencil. This allows custom processing of documentation JSON data during the build process through a generator function.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Configuring Stencil Output Target for Hydrate App
DESCRIPTION: This snippet shows how to add the 'dist-hydrate-script' output target to the Stencil configuration file. This generates a hydrate app in the project root directory for server-side rendering.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Registering Custom Elements in Angular Module
DESCRIPTION: Example of registering Stencil custom elements during Angular app initialization using APP_INITIALIZER

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Creating a Stencil component library
DESCRIPTION: Commands to create and set up a Stencil component library within the monorepo structure.

LANGUAGE: bash
CODE:
cd packages/
npm init stencil components stencil-library
cd stencil-library
# Install dependencies
npm install

----------------------------------------

TITLE: Using Custom JSDoc Tags
DESCRIPTION: Example of using custom JSDoc tags in component documentation

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Initializing Lerna Workspace
DESCRIPTION: Commands to initialize a Lerna workspace and install necessary dependencies.

LANGUAGE: bash
CODE:
lerna init

npm install

npm install typescript @types/node --save-dev

----------------------------------------

TITLE: WaitForChanges Test Implementation
DESCRIPTION: Example showing how to use waitForChanges() to handle component rehydration after state changes

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // Assume we have a template setup with the `my-component` component and a `button`
    await page.goto('/my-component/my-component.e2e.html');

    const button = page.locator('button');
    // Assume clicking the button changes the `@Prop()` values on `my-component`
    button.click();
    await page.waitForChanges();
  });
});

----------------------------------------

TITLE: OptimizeCss Method Signature
DESCRIPTION: Function signature for CSS optimization utility used by the compiler.

LANGUAGE: tsx
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Form Reset Callback Implementation
DESCRIPTION: Example of implementing form reset functionality using formResetCallback.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-reset-cb',
  formAssociated: true,
})
export class MyComponent {
  @AttachInternals()
  internals: ElementInternals;

  formResetCallback() {
    this.internals.setValidity({});
    this.internals.setFormValue("");
  }

  render() {
    return <input type="text"></input>
  }
}

----------------------------------------

TITLE: Customizing README Footer in Stencil Configuration
DESCRIPTION: Example of adding a custom footer to generated README files by configuring the docs-readme output target.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Configuring package.json for TypeScript Support
DESCRIPTION: Demonstrates how to configure package.json to include TypeScript type definitions for a Stencil component library.

LANGUAGE: json
CODE:
{
  "types": "dist/components/index.d.ts",
  "dependencies": {
    "@stencil/core": "latest"
  },
  ...
}

----------------------------------------

TITLE: Configuring Copy Tasks in Stencil Config
DESCRIPTION: Demonstrates how to set up a copy task in the Stencil configuration to copy asset files to the distribution directory.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
  // ...
};

----------------------------------------

TITLE: Webpack Configuration for Custom Elements
DESCRIPTION: Example webpack configuration for consuming custom elements, including asset copying.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Initializing WebdriverIO Project for Stencil
DESCRIPTION: Command to start the WebdriverIO configuration wizard for setting up a new project. It guides through options for component/unit testing or E2E testing, and framework selection.

LANGUAGE: bash
CODE:
npm init wdio@latest .

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: TypeScript interface reference for the CopyTask configuration object that defines copy operations in Stencil output targets.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Optimizing JavaScript with Stencil Compiler
DESCRIPTION: Presents the function signature for optimizeJs(), a utility function used by the compiler to optimize JavaScript, applying minification optimizations based on the target.

LANGUAGE: typescript
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Configuring Stencil Prerender for Debugging
DESCRIPTION: This TypeScript configuration sets up Stencil's prerender process for debugging. It disables URL crawling, specifies entry URLs, and enables runtime logging for better visibility during the prerender process.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Props with Default Values
DESCRIPTION: This snippet shows how to set default values for props in a Stencil component.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'component-with-some-props',
})
export class ComponentWithSomeProps {
    @Prop() aNumber = 42;
    @Prop() aString = 'defaultValue';

    render() {
        return <div>The number is {this.aNumber} and the string is {this.aString}</div>
    }
}

----------------------------------------

TITLE: Implementing Test Skipping Logic
DESCRIPTION: Demonstrates how to use the skip utility function to conditionally skip tests based on browser type or component mode in Playwright tests.

LANGUAGE: typescript
CODE:
test('my-test', ({ page, skip }) => {
    // Skip tests for certain browsers
    skip.browser('firefox', 'This behavior is not available on Firefox');

    // Skip tests for certain modes
    skip.mode('md', 'This behavior is not available in Material Design');

    ...
})

----------------------------------------

TITLE: Displaying Semantic Versioning Format in Markdown
DESCRIPTION: Shows the semantic versioning format used by Stencil, which follows the major.minor.patch convention.

LANGUAGE: markdown
CODE:
<code>major.minor.patch.</code>

----------------------------------------

TITLE: Running Visual Regression Tests in Stencil
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison functionality using Stencil CLI.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Configuring Meta Tags in Stencil Prerender Hook
DESCRIPTION: Example showing how to use the afterHydrate prerender hook to dynamically set document title based on URL pathname. The hook receives document and URL objects as parameters and can modify the document before HTML serialization.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Disabling Path Alias Transformation in Stencil v4
DESCRIPTION: Configuration example showing how to opt-out of default path alias transformation in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Angular Value Accessor Configuration
DESCRIPTION: Configuration for integrating Stencil components with Angular forms using ngModel

LANGUAGE: typescript
CODE:
const angularValueAccessorBindings: ValueAccessorConfig[] = [
  {
    elementSelectors: ['my-input[type=text]'],
    event: 'myChange',
    targetAttr: 'value',
    type: 'text',
  },
];

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    angularOutputTarget({
      componentCorePackage: 'component-library',
      directivesProxyFile: '{path to your proxy file}',
      valueAccessorConfigs: angularValueAccessorBindings,
    }),
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
  ],
};

----------------------------------------

TITLE: Setting up TypeScript Configuration for Vue Library
DESCRIPTION: Root TypeScript configuration file for the Vue component wrapper library project.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Running Visual Regression Tests in Stencil
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison functionality using Stencil CLI.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Implementing Event Listener with Listen Decorator
DESCRIPTION: Demonstrates how to listen to DOM events using the @Listen decorator in a Stencil component. Shows handling of custom events emitted from child components.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Writing a Test with Mocked Helper Function in Stencil
DESCRIPTION: This test demonstrates how to use a mocked helper function in a Stencil test. It mocks the 'utils' module and tests the 'bar' function that depends on the mocked 'getRandomInt'.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Using renderToString Function for SSR
DESCRIPTION: This snippet demonstrates the usage of the renderToString function, which takes an HTML string and returns a promise of HydrateResults. It includes an optional config object to customize the output.

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(srcHtml, {
  prettyHtml: true,
  removeScripts: true
});

console.log(results.html);

----------------------------------------

TITLE: Using Component Library in Vue App
DESCRIPTION: Example of importing and using the component library in a Vue application.

LANGUAGE: javascript
CODE:
// src/main.js
import { ComponentLibrary } from 'vue-library';

createApp(App).use(ComponentLibrary).mount('#app');

----------------------------------------

TITLE: Configuring www Output Target in Stencil
DESCRIPTION: This snippet shows how to configure the 'www' output target in a Stencil project's configuration file. It demonstrates setting the output target type to 'www' within the outputTargets array.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Importing Angular Component Library in Consumer App
DESCRIPTION: TypeScript code showing how to import the Angular component library module in the consumer app's module.

LANGUAGE: typescript
CODE:
import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

----------------------------------------

TITLE: Defining EmulateConfig and EmulateViewport Interfaces in TypeScript for Stencil
DESCRIPTION: This code snippet defines the EmulateConfig and EmulateViewport interfaces used for configuring browser emulations in Stencil E2E tests. It includes options for specifying device, user agent, and viewport settings.

LANGUAGE: typescript
CODE:
export interface EmulateConfig {
  /**
   * Predefined device descriptor name, such as "iPhone X" or "Nexus 10".
   * For a complete list please see: https://github.com/puppeteer/puppeteer/blob/main/src/DeviceDescriptors.ts
   */
  device?: string;

  /**
   * User-Agent to be used. Defaults to the user-agent of the installed Puppeteer version.
   */
  userAgent?: string;

  viewport?: EmulateViewport;
}


export interface EmulateViewport {

  /**
   * Page width in pixels.
   */
  width: number;

  /**
   * page height in pixels.
   */
  height: number;

  /**
   * Specify device scale factor (can be thought of as dpr). Defaults to 1.
   */
  deviceScaleFactor?: number;

  /**
   * Whether the meta viewport tag is taken into account. Defaults to false.
   */
  isMobile?: boolean;

  /**
   * Specifies if viewport supports touch events. Defaults to false
   */
  hasTouch?: boolean;

  /**
   * Specifies if viewport is in landscape mode. Defaults to false.
   */
  isLandscape?: boolean;

}

----------------------------------------

TITLE: Using @State with @Listen in Stencil
DESCRIPTION: Demonstrates how to combine @State and @Listen decorators to create a toggle button component that updates its state on click events.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Using a Helper Function in a Service in Stencil with TypeScript
DESCRIPTION: This snippet shows a service file that imports and uses the 'getRandomInt' helper function. This will be the target for mocking in the following examples.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Configuring Stencil Test Regex
DESCRIPTION: This TypeScript snippet shows how to configure the testRegex property in the Stencil config to pick up specific test files.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // ...
  testing: {
    testRegex: '(/__tests__/.*|\.?(spec))\\.(ts|js)$',
  },
};

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Components
DESCRIPTION: Example showing how to fetch and render dynamic data using async/await in a component's lifecycle method.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Basic Web Worker Implementation in Vanilla JavaScript
DESCRIPTION: Demonstrates the basic implementation of Web Workers using vanilla JavaScript API, showing how to create a worker and handle message passing.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Example of complexType in JsonDocsEvent
DESCRIPTION: JSON representation of the complexType field for an @Event in the docs-json output, showing additional type information.

LANGUAGE: json
CODE:
{
  "complexType": {
    "original": "ModalBreakpointChangeEventDetail",
    "resolved": "ModalBreakpointChangeEventDetail",
    "references": {
      "ModalBreakpointChangeEventDetail": {
        "location": "import",
        "path": "./modal-interface",
        "id": "src/components/modal/modal.tsx::ModalBreakpointChangeEventDetail"
      }
    }
  }
}

----------------------------------------

TITLE: Generated Playwright Configuration Output
DESCRIPTION: Shows the resulting configuration object after merging default values with custom overrides. Demonstrates the deep merge behavior of the configuration system.

LANGUAGE: typescript
CODE:
{
  testMatch: '*.spec.ts',
  use: {
    baseURL: 'http://localhost:3333',
  },
  webServer: {
    command: 'stencil build --dev --watch --serve --no-open',
    url: 'http://localhost:3333/ping',
    reuseExistingServer: !process.env.CI,
    // Only timeout gets overridden, not the entire object
    timeout: 30000,
  },
}

----------------------------------------

TITLE: Conditional Execution for Browser and Prerendering in Stencil
DESCRIPTION: This code snippet shows how to use the Build.isBrowser conditional to execute different code paths during browser runtime versus prerendering in Node.js.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Using Fragment in JSX with TypeScript
DESCRIPTION: Demonstrates the use of Fragment to group elements without a wrapper node in a Stencil component's render method. This requires specific TypeScript compiler options to be set.

LANGUAGE: tsx
CODE:
import { Component, Fragment, h } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Example React Component Usage
DESCRIPTION: Example showing how to use the generated React component wrappers in a React application

LANGUAGE: tsx
CODE:
// App.tsx
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

----------------------------------------

TITLE: Documenting CSS Variables
DESCRIPTION: Example of documenting CSS variables using JSDoc-style comments in CSS

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript interface for the CopyTask configuration used in Stencil's output targets. It defines the structure and options available for copy tasks.

LANGUAGE: typescript
CODE:
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Project Type Selection Prompt in create-stencil CLI
DESCRIPTION: Text output showing the options available when running the create-stencil CLI. It allows users to choose between creating a component collection, a standalone app, or an Ionic PWA.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Vue Library TypeScript Configuration
DESCRIPTION: TypeScript configuration specific to the Vue component library.

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2020"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2017",
    "skipLibCheck": true
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: Complex State Management with Arrays and Custom Types
DESCRIPTION: Advanced example showing state management with complex types and array operations in a todo list component.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Stencil Config with CommonJS Named Exports
DESCRIPTION: Configuration example showing how to handle CommonJS modules with named exports in Stencil's config file.

LANGUAGE: tsx
CODE:
export const config = {
  commonjs: {
    namedExports: {
       // commonjs-dep has a "hello" export
      'commonjs-dep': ['hello']
    }
  }
}

----------------------------------------

TITLE: Documenting Component Slots
DESCRIPTION: Example of documenting component slots using JSDoc @slot tag

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Marking a Stencil Component as Deprecated
DESCRIPTION: Use the @deprecated JSDoc tag to indicate a component is deprecated in the README.

LANGUAGE: typescript
CODE:
/**
 * @deprecated since v2.0.0
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Shadow DOM Query Selection
DESCRIPTION: Example showing how to query elements within Shadow DOM using the @Element decorator and shadowRoot

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Configuring VS Code Launch Settings for Browser Debugging
DESCRIPTION: Basic launch configuration for debugging Stencil components in Chrome browser. Sets up debugging on localhost:3333 with source map support.

LANGUAGE: json
CODE:
{
  "type": "chrome",
  "request": "launch",
  "name": "Launch Chrome against localhost",
  "url": "http://localhost:3333",
  "sourceMaps": true,
  "sourceMapPathOverrides": {
    "*": "${webRoot}/*"
  }
}

----------------------------------------

TITLE: Implementing Stencil Component with Store
DESCRIPTION: Example component showing how to consume and update store state, including interval-based updates and click handling.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Consuming Vue wrapper components
DESCRIPTION: Example of how to use the Vue component wrappers in a Vue application.

LANGUAGE: javascript
CODE:
// src/main.js
import { ComponentLibrary } from 'vue-library';

createApp(App).use(ComponentLibrary).mount('#app');

----------------------------------------

TITLE: Configuring Webpack for Custom Elements Bundle
DESCRIPTION: This snippet provides a webpack configuration example for consuming a custom elements bundle, including asset copying.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Functional Component with Child Manipulation in Stencil
DESCRIPTION: Demonstrates a functional component that uses utility methods to manipulate child elements.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Basic Prerender Config Structure
DESCRIPTION: Shows the basic structure of a prerender configuration file that exports a config object implementing the PrerenderConfig interface.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Initializing Stencil Dev Server using start()
DESCRIPTION: The start() method initializes a Stencil development server. It accepts a configuration object, logger instance, and optional compiler watcher as parameters, returning a Promise that resolves to a DevServer instance.

LANGUAGE: tsx
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Basic Stencil Config Example
DESCRIPTION: Minimal example of a Stencil configuration file setting the namespace and source directory.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Example showing how to configure environment variables in Stencil and use them in components.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  env: {
    API_BASE_URL: process.env.API_BASE_URL
  }
}

LANGUAGE: typescript
CODE:
import { Component, h, Env, Host } from '@stencil/core';

@Component({
  tag: 'api-component',
})
export class APIComponent {
  async connectedCallback () {
    const res = await fetch(Env.API_BASE_URL)
    // ...
  }
}

----------------------------------------

TITLE: Generating JSON Docs with Stencil CLI
DESCRIPTION: Use the Stencil CLI to generate JSON documentation for your components.

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Setting Nonce for Custom Elements Output Target in Angular (TypeScript)
DESCRIPTION: Shows how to use the setNonce helper function to set the nonce attribute for all script and style tags when using the dist-custom-elements output target in an Angular application.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Configuring Angular Output Target in Stencil Config
DESCRIPTION: This snippet shows how to configure the Angular output target in the Stencil configuration file. It includes the necessary imports and output target setup.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Advanced Worker Usage with Direct Access
DESCRIPTION: Example showing how to directly access the Worker instance and create worker pools.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);
    const result = await sum(1, 2);
    console.log(result);
  }
}

----------------------------------------

TITLE: Custom Service Worker Configuration in Stencil
DESCRIPTION: Example showing how to customize the service worker configuration in Stencil's config file to include additional file types for caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Configuring Package.json for Concurrent E2E Testing
DESCRIPTION: Update to package.json to run both Stencil Test Runner and Playwright for end-to-end testing.

LANGUAGE: json
CODE:
{
  "scripts": {
    "test.e2e": "stencil test --e2e && playwright test"
  }
}

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil
DESCRIPTION: Add the docs-readme output target to the Stencil configuration file to enable README generation.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Configuring JSON Docs Output Target in Stencil Config
DESCRIPTION: Configuration for automatically generating JSON documentation on each build.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Prerender Config with Hydrate Options
DESCRIPTION: Example of implementing the hydrateOptions hook in the prerender config to set page-specific rendering options.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Basic Ionic Component Usage in Ember
DESCRIPTION: Example of using an Ionic toggle component in an Ember template

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Web Worker with External Dependencies
DESCRIPTION: Example of a Web Worker that imports and uses external dependencies for image processing.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Configuring Angular Output Target in Stencil Config
DESCRIPTION: Add the angularOutputTarget configuration to the Stencil config file to generate Angular component wrappers.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Documenting CSS Custom Properties
DESCRIPTION: This CSS snippet demonstrates how to document CSS custom properties using the @prop JSDoc tag. This information will be included in the Styling Details section of the generated README.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Basic JSX Component Rendering in Stencil
DESCRIPTION: Basic example of rendering a Stencil component using JSX syntax with a simple div containing heading and paragraph elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Managing Object Updates in Stencil Component
DESCRIPTION: Demonstrates proper object update patterns in Stencil components using the spread operator to ensure component updates and @Watch handlers are triggered.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Integrating Ionic Components with Ember State
DESCRIPTION: Demonstrates how to use an Ionic component (ion-toggle) with Ember's state management and event handling.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Creating Vue Plugin for Stencil Components
DESCRIPTION: Vue plugin implementation that registers the Stencil custom elements and handles polyfills.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Configuring VS Code for Debugging Stencil Tests
DESCRIPTION: Configuration for VS Code's launch.json file to enable debugging of Stencil tests. This setup allows running and debugging both end-to-end and spec tests for the currently active file in VS Code.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "E2E Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--e2e", "--", "--maxWorkers=0", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Spec Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--spec", "--", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

----------------------------------------

TITLE: Building Angular Component Library
DESCRIPTION: Command to build the Angular component library.

LANGUAGE: bash
CODE:
npx -p @angular/cli ng build component-library

----------------------------------------

TITLE: E2E Test with page.setContent()
DESCRIPTION: Example of writing an e2e test using page.setContent() to define inline HTML

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    await page.setContent('<my-component first="Stencil"></my-component>');

    // Rest of test
  });
});

----------------------------------------

TITLE: Initializing Stencil Dev Server using start()
DESCRIPTION: The start() method initializes a Stencil development server. It accepts a configuration object, logger instance, and optional compiler watcher as parameters, returning a Promise that resolves to a DevServer instance.

LANGUAGE: tsx
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Running JSON Docs Generation via CLI
DESCRIPTION: Command to generate JSON documentation using Stencil CLI

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Applying Styles to a Stencil Component
DESCRIPTION: These snippets show different ways to apply styles to a Stencil component using 'styleUrl', 'styleUrls', and inline 'styles'.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrl: './todo-list.css',
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrls: ['./todo-list-1.css', './todo-list-2.css']
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrls: {
     ios: 'todo-list-1.ios.scss',
     md: 'todo-list-2.md.scss',
  }
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styles: 'div { background-color: #fff }'
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Importing Lazy-Loaded Stencil Components in TypeScript
DESCRIPTION: Example of importing a Stencil component library in TypeScript for lazy loading.

LANGUAGE: typescript
CODE:
import 'my-design-system';

----------------------------------------

TITLE: Rollup Plugin Configuration for Asset Copying
DESCRIPTION: Shows how to configure Rollup plugins to copy assets to the distribution directory during build

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: React Component Usage Example
DESCRIPTION: Example of how to consume the generated React component wrappers in a React application.

LANGUAGE: tsx
CODE:
// App.tsx
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

----------------------------------------

TITLE: Rollup Configuration for Custom Elements
DESCRIPTION: Example rollup configuration for consuming custom elements bundle with asset handling

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Importing Test Function in Stencil Playwright
DESCRIPTION: Demonstrates the correct way to import the test function from @stencil/playwright instead of @playwright/test for proper web component hydration support.

LANGUAGE: typescript
CODE:
// THIS IS CORRECT
import { test } from '@stencil/playwright';

// THIS IS NOT!!
// import { test } from '@playwright/test';

----------------------------------------

TITLE: Installing WebdriverIO Visual Service
DESCRIPTION: Command to install the WebdriverIO visual testing service package as a development dependency.

LANGUAGE: bash
CODE:
npm install --save-dev @wdio/visual-service

----------------------------------------

TITLE: Configuring Image Copy Tasks for WWW Output
DESCRIPTION: Example showing how to configure copy tasks to copy image files from src/images to www/images directory in Stencil's www output target.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      copy: [
        { src: 'images' }
      ]
    }
  ]

----------------------------------------

TITLE: Running Stencil CLI with Options in TypeScript
DESCRIPTION: Executes the Stencil CLI with given options. This function is used by Stencil's default bin/stencil file and can also be used externally. It returns a Promise that resolves to void.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Setting Nonce for Custom Elements Output in Angular
DESCRIPTION: Shows how to set the nonce for all script and style tags in a Stencil project using the dist-custom-elements output target within an Angular application's entry point.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Property Types in Stencil
DESCRIPTION: Shows different property types that can be used in Stencil components.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() isComplete: boolean;
    @Prop() timesCompletedInPast: number;
    @Prop() thingToDo: string;
    @Prop() myHttpService: MyHttpService;
}

----------------------------------------

TITLE: Non-JSX Event Listening
DESCRIPTION: Example of how to listen to Stencil component events in plain JavaScript outside of JSX context.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation in Stencil
DESCRIPTION: This snippet shows how to configure a Stencil project to validate the primary package output target. It demonstrates setting the 'dist' output target as the primary one for validation and enabling the validation feature.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Basic Prerender Config Structure
DESCRIPTION: Basic structure for the prerender.config.ts file showing how to export a config object using the PrerenderConfig interface.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: E2E Test with SpecPage
DESCRIPTION: End-to-end test implementation using newSpecPage to test a component with mocked dependencies.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Root TypeScript Configuration
DESCRIPTION: Base TypeScript configuration for the monorepo workspace

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Creating In-Memory Compiler System
DESCRIPTION: Shows the function signature for creating an in-memory compiler system independent of any platform.

LANGUAGE: typescript
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Exporting Prerender Config Object (TypeScript)
DESCRIPTION: Defines the prerender configuration object using the PrerenderConfig interface from Stencil core. This file allows for customization of the prerendering process.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Exporting Prerender Config Object (TypeScript)
DESCRIPTION: Defines the prerender configuration object using the PrerenderConfig interface from Stencil core. This file allows for customization of the prerendering process.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Setting Custom Destination for Copy Task in TypeScript
DESCRIPTION: This snippet shows how to set a custom destination for copied files using the 'dest' option. It copies font files to a specific subdirectory within the output directory.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    dir: 'public',
    copy: [
      { src: 'files/fonts', dest: 'static/web-fonts' }
    ]
  }
]

----------------------------------------

TITLE: Creating Vue Plugin for Custom Elements
DESCRIPTION: Vue plugin implementation for registering Stencil custom elements with polyfills.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Inline Mocking in Stencil Unit Tests with TypeScript
DESCRIPTION: Shows how to create an inline mock using jest.mock() without creating a separate mock file.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Comprehensive E2E Test for Ion-Toggle Component
DESCRIPTION: Illustrates a more complex E2E test scenario, testing the functionality of an ion-toggle component. It demonstrates setting content, spying on events, finding elements, and making assertions.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Comprehensive E2E Test for Ion-Toggle Component
DESCRIPTION: Illustrates a more complex E2E test scenario, testing the functionality of an ion-toggle component. It demonstrates setting content, spying on events, finding elements, and making assertions.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Consuming Vue wrapper components
DESCRIPTION: Example of how to use the Vue component wrappers in a Vue application.

LANGUAGE: javascript
CODE:
// src/main.js
import { ComponentLibrary } from 'vue-library';

createApp(App).use(ComponentLibrary).mount('#app');

----------------------------------------

TITLE: Creating a Stencil Component Library
DESCRIPTION: Commands to create and set up a new Stencil component library within the monorepo.

LANGUAGE: bash
CODE:
cd packages/
npm init stencil components stencil-library
cd stencil-library
# Install dependencies
npm install

----------------------------------------

TITLE: Configuring Stats Generation in Stencil Scripts
DESCRIPTION: Shows how to add scripts to package.json for generating stats documentation using the --stats flag.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: JavaScript code to import all components from the Ionic Framework into an Ember application.

LANGUAGE: javascript
CODE:
import '@ionic/core'; // installs all the components from Ionic Framework

----------------------------------------

TITLE: Importing Test Function in Typescript
DESCRIPTION: Demonstrates the correct and incorrect ways to import the test function for Stencil Playwright testing

LANGUAGE: typescript
CODE:
// THIS IS CORRECT
import { test } from '@stencil/playwright';

// THIS IS NOT!!
// import { test } from '@playwright/test';

----------------------------------------

TITLE: Setting Default Style Mode in Stencil
DESCRIPTION: Demonstrates how to set a default style mode for Stencil components using the setMode function.

LANGUAGE: ts
CODE:
import { setMode } from '@stencil/core';
setMode(() => 'ios'); // Setting iOS as the default mode for all components

----------------------------------------

TITLE: Inline Mocking with jest.mock()
DESCRIPTION: Shows an alternative approach to mocking by providing an inline mock implementation using jest.mock() without creating a separate mock file.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Using renderToString Function
DESCRIPTION: Example demonstrating the usage of renderToString function from Ionic Core

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(
  `<my-component first=\"Stencil\" last=\"'Don't call me a framework' JS\"></my-component>`,
  {
    fullDocument: false,
    serializeShadowRoot: 'declarative-shadow-dom',
    prettyHtml: true,
  }
);

console.log(results.html);

----------------------------------------

TITLE: Configuring Test Scripts in package.json for Stencil
DESCRIPTION: Example of how to set up npm scripts in package.json for running different types of Stencil tests, including unit tests, watched unit tests, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Async Data Fetching in componentWillLoad
DESCRIPTION: Example showing how to implement asynchronous data fetching in componentWillLoad using Promises.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Using Stencil Components in Angular Template
DESCRIPTION: Use the wrapped Stencil components in an Angular component's template.

LANGUAGE: html
CODE:
<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Generating JSON Docs via CLI in Stencil
DESCRIPTION: Shows how to use the Stencil CLI to generate JSON documentation for a project.

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Defining CSS Custom Properties in Stencil
DESCRIPTION: This CSS snippet demonstrates how to define and use CSS custom properties (CSS variables) in a Stencil component.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Importing Dependencies in a Stencil Web Worker
DESCRIPTION: Shows how to import both NPM packages and local modules within a Stencil Web Worker, which are bundled by the compiler.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Sample Stencil Stats JSON Output Structure
DESCRIPTION: Provides an example of the JSON structure generated by the Stencil stats feature. It includes information about the compiler, app configuration, build options, component details, and more.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config (TSX)
DESCRIPTION: This snippet shows how to configure a custom screenshot connector in the Stencil config file. It specifies the path to the connector file in the testing configuration.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Basic JSX Component Structure
DESCRIPTION: Basic example of a Stencil component using JSX to render HTML elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Configuring TypeScript for React Library
DESCRIPTION: Project-specific TypeScript configuration for the React component library, extending the root configuration.

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2015"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2015",
    "skipLibCheck": true,
    "jsx": "react",
    "allowSyntheticDefaultImports": true,
    "declarationDir": "./dist/types"
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: Example JSON Output for Stencil Stats
DESCRIPTION: This snippet shows an example of the JSON data structure generated by the Stencil stats feature. It includes information about the compiler, app configuration, build options, output formats, and component details.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Installing Stencil Playwright Dependencies
DESCRIPTION: Commands to install the Stencil Playwright adapter and required dependencies

LANGUAGE: bash
CODE:
npm i @stencil/playwright @playwright/test --save-dev

----------------------------------------

TITLE: Updating Vue Library package.json
DESCRIPTION: This diff shows the necessary changes to the package.json file for the Vue component library.

LANGUAGE: diff
CODE:
{
-  "main": "lib/vue-library.js",
+  "main": "dist/index.js",
+  "types": "dist/index.d.ts",
  "files": [
-    'lib'
+    'dist'
  ],
  "scripts": {
-    "test": "echo \"Error: run tests from root\" && exit 1"
+    "test": "echo \"Error: run tests from root\" && exit 1",
+    "build": "npm run tsc",
+    "tsc": "tsc -p . --outDir ./dist"
-  }
+  },
+  "publishConfig": {
+    "access": "public"
+  },
+  "dependencies": {
+    "stencil-library": "*"
+  }
}

----------------------------------------

TITLE: Illustrating Component Class Naming in TypeScript
DESCRIPTION: This snippet demonstrates the proper way to name component classes in TypeScript for Stencil, showing that prefixes are not needed for class names.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-button'
})
export class Button { ... }

@Component({
  tag: 'ion-menu'
})
export class Menu { ... }

----------------------------------------

TITLE: Creating NodeJS System for Stencil Compiler
DESCRIPTION: Creates a system based on NodeJS APIs for the compiler's file system operations and content hashing. It requires the NodeJS 'process' object as an argument.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Styling Shadow DOM Components
DESCRIPTION: CSS example showing how to style elements within Shadow DOM using the :host selector and simple element selectors

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Importing Specific Standalone Stencil Components
DESCRIPTION: These snippets demonstrate how to import specific standalone Stencil components or the entire library using the 'dist-custom-elements' output target.

LANGUAGE: javascript
CODE:
// this import loads all compiled components
import { MyComponent } from 'my-design-system'
// only import compiled code for MyComponent
import { MyComponent } from 'my-design-system/my-component'

----------------------------------------

TITLE: Mocking a Utility Function
DESCRIPTION: Example of creating a mock for the 'getRandomInt' function. This mock always returns 42 instead of a random number.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Example of Child Node Manipulation
DESCRIPTION: Shows how to manipulate child nodes using FunctionalComponent utilities.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Setting Asset Path with setAssetPath() in TypeScript
DESCRIPTION: Shows how to use the setAssetPath() function to set the path for Stencil to resolve local assets. This example sets the asset path to the current window's origin.

LANGUAGE: typescript
CODE:
import { setAssetPath } from '@stencil/core';
setAssetPath(`{window.location.origin}/`);

----------------------------------------

TITLE: Installing Playwright Dependencies for Stencil
DESCRIPTION: Commands to install the Stencil Playwright adapter, Playwright test framework, and browser binaries.

LANGUAGE: bash
CODE:
npm i @stencil/playwright @playwright/test --save-dev

LANGUAGE: bash
CODE:
npx playwright install

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: Demonstrates how to add custom Rollup plugins to the Stencil build process. Shows configuration for inserting plugins both before node-resolve and after commonjs transform phases.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Configuring JSON Docs Output Target in Stencil
DESCRIPTION: Configuration for automatically generating JSON documentation on each build in Stencil.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Configuring package.json for Custom Elements Distribution
DESCRIPTION: This snippet demonstrates how to configure the package.json file for distributing custom elements, including setting the module entry point and dependencies.

LANGUAGE: json
CODE:
{
  "module": "dist/components/index.js",
  "dependencies": {
    "@stencil/core": "latest"
  },
  ...
}

----------------------------------------

TITLE: Configuring docs-json Output Target in Stencil Config
DESCRIPTION: Configuration for automatically generating JSON documentation on each build. This adds the docs-json output target to the Stencil config file.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: HTML Template for E2E Testing
DESCRIPTION: Provides an HTML template for end-to-end testing of a Stencil component, including the necessary script tags for loading the component.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf8" />

    <!-- Replace with the path to your entrypoint -->
    <script src="../../../build/test-app.esm.js" type="module"></script>
    <script src="../../../build/test-app.js" nomodule></script>
  </head>
  <body>
    <my-component first="Stencil"></my-component>
  </body>
</html>

----------------------------------------

TITLE: Controlled Ionic Component in Ember
DESCRIPTION: Example of a controlled Ionic toggle component with state management in an Ember component.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: Use the @slot JSDoc tag to document slots in your Stencil component.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Documenting @Prop() Decorators in Stencil
DESCRIPTION: Use JSDoc comments to document properties decorated with @Prop() in a component.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * The first name
   */
  @Prop() first!: string; // the '!' denotes a required property
  /**
   * @deprecated since v2.1.0
   */
  @Prop() middle: string;
  @Prop() lastName = "Smith";

  // ...
}

----------------------------------------

TITLE: Configuring JSON Docs Output Target in Stencil
DESCRIPTION: Configuration for automatically generating JSON documentation on each build in Stencil.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Defining CSS Custom Properties in Stencil
DESCRIPTION: Demonstrates how to define and use CSS custom properties (CSS variables) in a Stencil component.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Generating Stats with NPM Scripts in Stencil
DESCRIPTION: Demonstrates how to use the --stats flag in NPM scripts to generate statistics for a Stencil project. It shows two options: one without specifying a file path and another with a custom file path.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Using Component Wrappers in Vue Template
DESCRIPTION: Example of using a wrapped Stencil component in a Vue template.

LANGUAGE: html
CODE:
<template>
  <my-component first="Your" last="Name"></my-component>
</template>

----------------------------------------

TITLE: Custom Service Worker Configuration in Stencil
DESCRIPTION: Example of customizing the service worker configuration in Stencil's config file to include additional file types.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Basic Event Emission in Stencil Component
DESCRIPTION: Demonstrates how to emit custom DOM events using the @Event decorator and EventEmitter in a Stencil component.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Configuring Basic Stencil Output Targets
DESCRIPTION: Basic configuration example showing how to set up multiple output targets in a Stencil project's config file. Demonstrates configuring both 'dist' and 'www' output types.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Installing Ionic Framework Dependencies in Ember
DESCRIPTION: Command to install the Ionic Framework core package using npm or yarn

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Installing Lerna Globally
DESCRIPTION: Command to install Lerna globally for managing the monorepo.

LANGUAGE: bash
CODE:
npm install --global lerna

----------------------------------------

TITLE: Specifying Output Directory for README Files
DESCRIPTION: Change the output directory for generated README files by setting the dir property in the output target configuration.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      dir: 'output'
    }
  ]
};

----------------------------------------

TITLE: Setting up Monorepo Project Structure
DESCRIPTION: Recommended monorepo structure for a Stencil component library with Angular wrappers.

LANGUAGE: plaintext
CODE:
top-most-directory/
└── packages
    ├── stencil-library/
    │   ├── stencil.config.js
    │   └── src/components
    └── angular-workspace/
        └── projects/
            └── component-library/
                └── src/
                    ├── lib/
                    └── public-api.ts

----------------------------------------

TITLE: Configuring WebdriverIO Visual Service
DESCRIPTION: Configuration settings for WebdriverIO to enable visual testing service and specify supported testing matcher functions.

LANGUAGE: typescript
CODE:
https://github.com/webdriverio/component-testing-examples/blob/2de295ab568b5163e67d716156221578b6536d9d/stencil-component-starter/wdio.conf.ts#L119-L126)

----------------------------------------

TITLE: Component Class Structure in TypeScript
DESCRIPTION: Detailed example showing the recommended organization of a Stencil component class including decorators, lifecycle methods, and rendering logic.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {
  num: number;
  someText = 'default';

  @Element() el: HTMLElement;

  @State() isValidated: boolean;
  @State() status = 0;

  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Handling Push Events in Service Worker
DESCRIPTION: Service Worker code to handle incoming push events. This example logs the push data and shows a notification to the user with customizable options and actions.

LANGUAGE: javascript
CODE:
self.addEventListener('push', event => {
  console.log(`Push received with data "${event.data.text()}"`);

  const title = 'Push Notification';
  const options = {
    body: `${event.data.text()}`,
    data: { href: '/users/donald' },
    actions: [
      { action: 'details', title: 'Details' },
      { action: 'dismiss', title: 'Dismiss' },
    ],
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

----------------------------------------

TITLE: Prerender Config with Hydrate Options
DESCRIPTION: Example showing how to configure individual page hydrate options using the hydrateOptions hook in prerender.config.ts.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Registering Custom Elements in Angular
DESCRIPTION: Strategy for automatically defining custom elements during Angular app initialization.

LANGUAGE: typescript
CODE:
// component-library.module.ts

import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Full Build Example with Stencil Core Compiler
DESCRIPTION: Demonstrates a complete example of running a full build in a NodeJS environment using the Stencil Core Compiler API.

LANGUAGE: typescript
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Installing @stencil/store with npm
DESCRIPTION: Command to install @stencil/store as a dev dependency using npm or yarn.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Component Class Structure in TypeScript
DESCRIPTION: Detailed example showing the recommended organization of a Stencil component class including decorators, lifecycle methods, and rendering logic.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {
  num: number;
  someText = 'default';

  @Element() el: HTMLElement;

  @State() isValidated: boolean;
  @State() status = 0;

  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Using Stencil Loader Functions
DESCRIPTION: Example of importing and using the loader helper functions to register components and apply polyfills in an application setup script.

LANGUAGE: typescript
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Configuring VS Code for Debugging Stencil Tests
DESCRIPTION: Example of a VS Code launch configuration for running and debugging Stencil tests directly in the editor, including configurations for both end-to-end and spec tests.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "E2E Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--e2e", "--", "--maxWorkers=0", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Spec Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--spec", "--", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

----------------------------------------

TITLE: Warning-Enabled Copy Configuration - TypeScript
DESCRIPTION: Example showing how to enable warnings for missing source files in copy tasks using the warn option.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Transpiling Code with Stencil Core Compiler
DESCRIPTION: Shows the function signature for transpiling code using the Stencil Core Compiler. It takes a string of code and optional transpile options, returning a Promise with the transpilation results.

LANGUAGE: typescript
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Configuring Copy Task in Stencil Config
DESCRIPTION: Demonstrates how to set up a copy task in the Stencil configuration to manually move assets to the distribution directory.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
  // ...
};

----------------------------------------

TITLE: Data Flow Implementation in Stencil Components
DESCRIPTION: Shows how to implement parent-child component data flow using props in Stencil.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
})
export class TodoList {
  render() {
    return (
      <div>
        <h1>To-Do List Name: Stencil To Do List</h1>
        <ul>
           <todo-list-item thingToDo={"Learn about Stencil Props"}></todo-list-item>
           <todo-list-item thingToDo={"Write some Stencil Code with Props"}></todo-list-item>
           <todo-list-item thingToDo={"Dance Party"}></todo-list-item>
        </ul>
      </div>
    )
  }
}

----------------------------------------

TITLE: Optimizing JavaScript in Stencil
DESCRIPTION: Function signature for optimizeJs(), a utility function used by the compiler to optimize JavaScript, applying minification optimizations based on the JavaScript target.

LANGUAGE: typescript
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Basic Web Worker Implementation in Vanilla JavaScript
DESCRIPTION: Demonstrates the basic usage of Web Workers using the native browser API with message passing.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Exporting Default Function in Global Script
DESCRIPTION: An example of how to structure a global script file for Stencil, which runs once before the library/app loads. The code should be wrapped in an exported default function.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: Configuring Browser Debugging in VS Code for Stencil
DESCRIPTION: Launch configuration for debugging Stencil components in Chrome browser. Sets up source map handling and localhost connection on port 3333.

LANGUAGE: json
CODE:
{
  "type": "chrome",
  "request": "launch",
  "name": "Launch Chrome against localhost",
  "url": "http://localhost:3333",
  "sourceMaps": true,
  "sourceMapPathOverrides": {
    "*": "${webRoot}/*"
  }
}

----------------------------------------

TITLE: Registering Custom Elements in Angular
DESCRIPTION: This snippet shows how to register custom elements using the Stencil loader during Angular app initialization.

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Loading Stencil Configuration
DESCRIPTION: Presents the function signature for loadConfig(), which takes an optional LoadConfigInit object and returns a Promise of LoadConfigResults.

LANGUAGE: typescript
CODE:
loadConfig(init?: LoadConfigInit): Promise<LoadConfigResults>

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class
DESCRIPTION: Basic implementation of a custom screenshot connector by extending the base ScreenshotConnector class from Stencil.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: CLI Project Selection Prompt
DESCRIPTION: Interactive prompt showing available Stencil project templates including component collections, apps, and PWAs

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Updating Objects in Stencil Components
DESCRIPTION: Demonstrates how to update objects in Stencil components to trigger re-renders. It uses the spread operator to create a new object reference, which will cause @Watch to fire and the component to update.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Configuring WWW Output Target
DESCRIPTION: Stencil configuration for the WWW output target with file copying settings for Playwright testing.

LANGUAGE: typescript
CODE:
{
   type: 'www',
   serviceWorker: null,
   copy: [{ src: '**/*.html' }, { src: '**/*.css' }]
}

----------------------------------------

TITLE: Defining a Helper Function in TypeScript
DESCRIPTION: Example of a helper function 'getRandomInt' that generates a random integer within a specified range. This function is used to demonstrate mocking of custom code.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Defining a Helper Function in TypeScript
DESCRIPTION: Example of a helper function 'getRandomInt' that generates a random integer within a specified range. This function is used to demonstrate mocking of custom code.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Example Telemetry Event Structure in JavaScript
DESCRIPTION: This snippet shows the structure of a typical telemetry event collected by Stencil. It includes information about the Stencil version, command used, system details, and project configuration.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: TypeScript Path Aliases Configuration
DESCRIPTION: Example of configuring TypeScript path aliases in tsconfig.json to map import paths

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Using Stencil Component in HTML
DESCRIPTION: Example of how to use a Stencil component in HTML markup.

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Example Stencil Stats JSON Output
DESCRIPTION: Shows a sample of the JSON data structure generated by the stats output, including compiler info, app details, build options, and component data.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Slots Implementation in Stencil
DESCRIPTION: Shows how to use slots for content projection in Stencil components, including named slots and basic slot usage.

LANGUAGE: tsx
CODE:
// my-component.tsx

render() {
  return (
    <div>
      <h2>A Component</h2>
      <div><slot /></div>
    </div>
  );
}

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config
DESCRIPTION: Configuration code to specify a custom screenshot connector file path in the Stencil testing config.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Using a Callback-based Web Worker Function in a Stencil Component
DESCRIPTION: Shows how to use a Web Worker function with a progress callback in a Stencil component, demonstrating periodic updates during a long-running task.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';
import { countDown } from '../countdown.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    const startNum = 5;
    console.log('start', startNum);

    countDown(startNum, (p) => {
      console.log('progress', p);
    }).then(result => {
      console.log('finish', result);
    });
  }
}

----------------------------------------

TITLE: Using Wrapped Component in Template
DESCRIPTION: HTML code demonstrating how to use a wrapped Stencil component in an Angular component template.

LANGUAGE: html
CODE:
<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Implementing Worker Callbacks in Stencil
DESCRIPTION: This snippet demonstrates how to use callbacks with Web Workers in Stencil. It shows a countdown function that periodically reports progress back to the main thread using a callback.

LANGUAGE: tsx
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

----------------------------------------

TITLE: Mocking Library Example in TypeScript
DESCRIPTION: Demonstrates how to create a basic mock for an npm package (md5) by creating a mock file in the __mocks__ directory.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class
DESCRIPTION: Basic implementation of a custom screenshot connector by extending the base ScreenshotConnector class from Stencil core

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Initializing and Using a Vanilla Web Worker in JavaScript
DESCRIPTION: This snippet demonstrates how to create and use a basic Web Worker using vanilla JavaScript. It shows how to instantiate a worker, send messages to it, and receive messages back.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Loading Stencil Components using ES Modules in HTML
DESCRIPTION: This example shows how to import Stencil components using ES Modules in an HTML file. It uses the defineCustomElements function to register the components.

LANGUAGE: html
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Configuring Stencil for CI/CD E2E Testing
DESCRIPTION: Shows how to configure Stencil for running E2E tests in CI/CD environments. This example modifies the stencil.config.ts file to add browser arguments for Headless Chrome in GitLab CI.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'Foo',
  testing: {
    /**
     * Gitlab CI doesn't allow sandbox, therefor this parameters must be passed to your Headless Chrome
     * before it can run your tests
     */
    browserArgs: ['--no-sandbox', '--disable-setuid-sandbox'],
  },
  outputTargets: [
    { type: 'dist' },
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Applying Styles to a Stencil Component
DESCRIPTION: These snippets show different ways to apply styles to a Stencil component, including using external stylesheets and inline styles.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrl: './todo-list.css',
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrls: ['./todo-list-1.css', './todo-list-2.css']
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styles: 'div { background-color: #fff }'
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Creating a Worker Pool in Stencil
DESCRIPTION: Shows how to create multiple Worker instances manually using the workerPath provided by Stencil's worker bundling feature.

LANGUAGE: tsx
CODE:
import { workerPath } from '../../stuff.worker.ts?worker';

const workerPool = [
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
];

----------------------------------------

TITLE: Git Repository Initialization
DESCRIPTION: Commands to initialize a new git repository for a Stencil project

LANGUAGE: bash
CODE:
$ git init
$ git add -A
$ git commit -m "initialize project using stencil cli"

----------------------------------------

TITLE: Example Stencil Stats JSON Output Structure
DESCRIPTION: Provides a comprehensive example of the JSON data structure generated by the Stencil stats feature, including compiler info, app details, component data, and more.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Registering Custom Elements in Angular
DESCRIPTION: TypeScript code showing how to register custom elements during Angular app initialization.

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Initializing a Form-Associated Stencil Component
DESCRIPTION: Sets up a basic Stencil component with the formAssociated option set to true, marking it as a form-associated custom element.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Initializing a Form-Associated Stencil Component
DESCRIPTION: Sets up a basic Stencil component with the formAssociated option set to true, marking it as a form-associated custom element.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Defining CSS Custom Properties in Stencil
DESCRIPTION: Demonstrates how to define and use CSS custom properties (CSS variables) in a Stencil component.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Importing Component Library in TypeScript
DESCRIPTION: Example of importing a Stencil component library in a TypeScript application.

LANGUAGE: typescript
CODE:
import 'my-design-system';

----------------------------------------

TITLE: Complex State Management with Custom Types
DESCRIPTION: Demonstrates using @State with complex types and array management, showing proper state updates and rendering of dynamic lists.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Documenting CSS Variables with JSDoc Comments
DESCRIPTION: Demonstrates how to document CSS variables (custom properties) using JSDoc-style comments in CSS or SCSS files.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: Documenting CSS Custom Properties in Stencil Components
DESCRIPTION: Example of documenting CSS custom properties using @prop JSDoc tag in CSS files, which will be reflected in the generated README.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Global Script Export Example
DESCRIPTION: Example of exporting a default function in a global script configuration that runs before the app loads.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil
DESCRIPTION: Basic configuration for enabling README documentation generation in stencil.config.ts

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: Shows how to configure custom Rollup plugins in Stencil, specifically how to inject plugins before node-resolve and after commonjs transform. This configuration allows for customizing the build process with additional Rollup functionality.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Configuring Supplemental Public Types
DESCRIPTION: Configuration for including additional type definitions in the JSON documentation

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json',
      supplementalPublicTypes: 'src/public-interfaces.ts',
    }
  ]
};

----------------------------------------

TITLE: Configuring Stats Generation in Stencil Scripts
DESCRIPTION: Shows how to add scripts to generate stats documentation using the --stats flag in a Stencil project's package.json.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Rendering Stencil Components for Testing
DESCRIPTION: Demonstrates how to render a Stencil component in a test environment using WebdriverIO's browser runner. Shows importing and setting up component testing with proper dependencies.

LANGUAGE: typescript
CODE:
render({
    components: [ComponentA, ComponentB, ComponentC, ComponentD],
    template: () => <component-a first="Stencil" last="'Don't call me a framework' JS" />
});

----------------------------------------

TITLE: Running Individual Stencil Tasks
DESCRIPTION: Executes individual tasks with specified NodeJS process, Stencil config, and task command. Optionally accepts a compiler system instance.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Stencil Worker Module Implementation
DESCRIPTION: Shows how to create a Web Worker module in Stencil with async functions for mathematical operations and data processing.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Implementing Custom Screenshot Connector
DESCRIPTION: Basic implementation of a custom screenshot connector by extending the base ScreenshotConnector class from Stencil.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Setting Asset Path for Custom Elements
DESCRIPTION: Example of setting the asset path for custom elements to ensure static assets are properly loaded.

LANGUAGE: typescript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Configuring TypeScript for Vue Library
DESCRIPTION: TypeScript configuration specific to the Vue component library.

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2020"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2017",
    "skipLibCheck": true
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: Supplemental Public Types Configuration
DESCRIPTION: Configuration for including additional public types in documentation generation

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json',
      supplementalPublicTypes: 'src/public-interfaces.ts',
    }
  ]
};

----------------------------------------

TITLE: Optimized Navigation Menu Implementation in TSX
DESCRIPTION: Improved version of the navigation menu that renders content in the light DOM for better SSR compatibility.

LANGUAGE: tsx
CODE:
const menu = {
    'Overview': ['Introduction', 'Getting Started', 'Component API', 'Guides', 'FAQ'],
    'Docs': ['Framework Integrations', 'Static Site Generation', 'Config', 'Output Targets', 'Testing', 'Core Compiler API'],
    'Community': ['Blog', 'GitHub', 'X', 'Discord']
}
return (
    <nav>
        <footer-navigation>
            {Object.entries(menu).map(([section, links]) => (
                <footer-navigation-section>
                    <h2>{section}</h2>
                    {links.map(link => (
                        <footer-navigation-entry href="#/">{link}</footer-navigation-entry>
                    ))}
                </footer-navigation-section>
            ))}
        </footer-navigation>
    </nav>
)

----------------------------------------

TITLE: Implementing Custom Screenshot Connector
DESCRIPTION: Basic implementation of a custom screenshot connector by extending the base ScreenshotConnector class from Stencil.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Generating Stats with npm Scripts in Stencil
DESCRIPTION: This snippet shows how to use the --stats flag in npm scripts to generate statistical data for a Stencil project. It demonstrates two variations: one without specifying an output file and another with a custom output path.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Using CSS Custom Properties in Stencil
DESCRIPTION: Illustrates how to define and use CSS custom properties (CSS variables) in a Stencil component for customization.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Setting Component Props in E2E Tests
DESCRIPTION: Demonstrates how to set properties on a component during an E2E test using page.$eval. This method allows manipulation of the component within the browser's context.

LANGUAGE: typescript
CODE:
await page.setContent(`
      <prop-cmp></prop-cmp>
    `);

await page.$eval('prop-cmp', (elm: any) => {
  elm.first = 'Marty';
  elm.lastName = 'McFly';
});

await page.waitForChanges();

----------------------------------------

TITLE: Configuring Stencil Output Target with Prerender Config
DESCRIPTION: Example showing how to set up the prerender config file path in stencil.config.ts for the www output target.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Importing Dependencies in a Stencil Web Worker (TypeScript)
DESCRIPTION: Shows how to import external dependencies and local modules within a Stencil Web Worker file.

LANGUAGE: typescript
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Exporting Vue Component Library
DESCRIPTION: This TypeScript snippet shows how to export the generated component wrappers and Vue plugin.

LANGUAGE: typescript
CODE:
export * from './components';
export * from './plugin';

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: JavaScript code to import all Ionic Framework components into an Ember application

LANGUAGE: javascript
CODE:
import '@ionic/core';

----------------------------------------

TITLE: Configuring TypeScript for the Vue library
DESCRIPTION: TypeScript configuration specific to the Vue component library.

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2020"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2017",
    "skipLibCheck": true
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: Valid and Invalid Public Method Definitions in Stencil
DESCRIPTION: Illustrates valid and invalid ways to define public methods using the @Method() decorator in Stencil. Public methods must be async or return a Promise.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Valid and Invalid Public Method Definitions in Stencil
DESCRIPTION: Illustrates valid and invalid ways to define public methods using the @Method() decorator in Stencil. Public methods must be async or return a Promise.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: React Component Usage Example
DESCRIPTION: Example of consuming generated React component wrappers in a React application

LANGUAGE: typescript
CODE:
import './App.css';
import { MyComponent } from 'react-library';

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

----------------------------------------

TITLE: Installing @wdio/visual-service Plugin for WebdriverIO
DESCRIPTION: Command to install the @wdio/visual-service plugin for visual testing in a WebdriverIO project using npm or yarn.

LANGUAGE: bash
CODE:
npm install --save-dev @wdio/visual-service

----------------------------------------

TITLE: Disabling Service Worker Generation
DESCRIPTION: Configuration example showing how to disable service worker generation in a Stencil project.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Setting CSP Nonce for Dist Output in Angular
DESCRIPTION: Demonstrates how to set a CSP nonce for the 'dist' output target in an Angular application's entrypoint. It uses the setNonce function to apply the nonce to all script and style tags.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Documenting Component Slots
DESCRIPTION: Example of documenting component slots using JSDoc @slot tag

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: LoadConfig Function Signature
DESCRIPTION: Function signature for loading and transforming raw config into usable compiler configuration.

LANGUAGE: tsx
CODE:
loadConfig(init?: LoadConfigInit): Promise<LoadConfigResults>

----------------------------------------

TITLE: Creating and Configuring a Stencil Store
DESCRIPTION: Example of creating a store with initial state and setting up a change listener for the 'clicks' property. The store exports a state object for use in components.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Using Stencil Web Workers in a Component
DESCRIPTION: This snippet demonstrates how to import and use Web Worker functions in a Stencil component. It shows how Stencil automatically creates a proxy and runs the module in a worker.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {

  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Using Stencil Web Workers in a Component
DESCRIPTION: This snippet demonstrates how to import and use Web Worker functions in a Stencil component. It shows how Stencil automatically creates a proxy and runs the module in a worker.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {

  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Loading Stencil Components via ES Modules
DESCRIPTION: Shows how to load Stencil components using ES Modules in an HTML file. This approach allows for more modern JavaScript practices and potentially better performance.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Inline Mocking with Jest in TypeScript
DESCRIPTION: Example of using Jest's inline mocking capability to mock the 'utils' module without creating a separate mock file. This approach provides the mock implementation directly in the test file.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation in Stencil
DESCRIPTION: This snippet shows how to configure a Stencil project to validate the primary package output target. It sets the 'dist' output target as the primary one for validation and enables validation in the config.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Configuring Supplemental Public Types
DESCRIPTION: Configuration for including additional type definitions in documentation output

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json',
      supplementalPublicTypes: 'src/public-interfaces.ts',
    }
  ]
};

----------------------------------------

TITLE: Configuring Testing Scripts in package.json
DESCRIPTION: Example of how to set up npm scripts for running different types of tests in a Stencil project. These scripts utilize the 'stencil test' command with various flags to run unit tests, watch for changes, and run end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Copy Configuration with Warnings Enabled
DESCRIPTION: Example showing how to enable warnings for copy tasks when source files cannot be found.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Importing Stencil Core Compiler in NodeJS
DESCRIPTION: Demonstrates how to import the Stencil Core Compiler module in a NodeJS environment using CommonJS syntax.

LANGUAGE: javascript
CODE:
// NodeJS (commonjs)
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: HTML Script Implementation with setAssetPath
DESCRIPTION: Example showing how to use setAssetPath in an HTML file when importing components via script tag.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Basic Connected/Disconnected Callback Example in Stencil
DESCRIPTION: Demonstrates how connectedCallback is called when a component is connected to the DOM, including multiple attachments, while componentWillLoad is only called once.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Configuring Stencil Dev Server with HTTPS and Custom Port
DESCRIPTION: Example configuration for Stencil's dev server showing how to set up HTTPS using SSL certificates and customize the port. The code demonstrates setting reload strategy, port number, and SSL certificate configuration.

LANGUAGE: tsx
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8')
    }
  }
};

----------------------------------------

TITLE: Creating a Stencil Compiler Instance
DESCRIPTION: Function signature for createCompiler(), which creates a Compiler instance given a Stencil configuration. This is used for full builds in various modes.

LANGUAGE: typescript
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Using Rollup Plugin for Copying Assets in Stencil
DESCRIPTION: Shows how to use the rollup-plugin-copy NPM module to copy asset files to the distribution directory during build time in a Stencil project.

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Configuring Stencil WWW Output Target in TypeScript
DESCRIPTION: Basic configuration example for setting up the 'www' output target in a Stencil project's configuration file. This is the default output target used for building webapps and websites.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Shadow DOM QuerySelector Implementation
DESCRIPTION: Shows how to query elements within Shadow DOM using the @Element decorator and shadowRoot property.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Optimizing JavaScript with Stencil Compiler
DESCRIPTION: Demonstrates the function for optimizing JavaScript, which can apply additional minification optimizations based on the JavaScript target.

LANGUAGE: jsx
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Implementing formDisabledCallback in Stencil
DESCRIPTION: This example demonstrates how to use the formDisabledCallback to react to changes in the disabled state of a form-associated component.

LANGUAGE: tsx
CODE:
import { Component, h, State } from '@stencil/core';

@Component({
  tag: 'form-disabled-cb',
  formAssociated: true,
})
export class MyComponent {
  @State() cssClass: string = "";

  formDisabledCallback(disabled: boolean) {
    if (disabled) {
      this.cssClass = "background-mode";
    } else {
      this.cssClass = "";
    }
  }

  render() {
    return <input type="text" class={this.cssClass}></input>
  }
}

----------------------------------------

TITLE: Configuring Stencil Output Target for Vue
DESCRIPTION: Stencil configuration to generate Vue component wrappers using the Vue output target.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Functional Component with Children in Stencil
DESCRIPTION: Illustrates how to define a functional component that accepts and renders child elements.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Stencil Configuration for E2E Testing
DESCRIPTION: Configuration setup in stencil.config.ts for E2E testing with proper output targets and file copying

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'test-app',
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null,
      copy: [{ src: '**/test/*.html' }, { src: '**/test/*.css' }],
    },
  ],
};

----------------------------------------

TITLE: Slot Usage in Stencil Components
DESCRIPTION: Shows how to use slots to render dynamic children in specific locations within a component tree.

LANGUAGE: tsx
CODE:
// my-component.tsx

render() {
  return (
    <div>
      <h2>A Component</h2>
      <div><slot /></div>
    </div>
  );
}

----------------------------------------

TITLE: Example Telemetry Data Structure in JavaScript
DESCRIPTION: Example of the telemetry data structure that Stencil collects, showing various metrics including build information, system details, and project configuration. This demonstrates the anonymous nature of the collected data.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Basic Workbox Configuration in Stencil
DESCRIPTION: Default configuration for service worker generation using Workbox in Stencil projects. Defines global patterns for asset caching.

LANGUAGE: typescript
CODE:
{
  globPatterns: [
    '**/*.{js,css,json,html}'
  ]
};

----------------------------------------

TITLE: Invalid Component Export Example in TypeScript
DESCRIPTION: Example showing incorrect way of exporting multiple items from a component file, which violates Stencil's one-component-per-module rule.

LANGUAGE: tsx
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Configuring supplementalPublicTypes in Stencil Config
DESCRIPTION: Configuration for including additional public types in the JSON documentation. This adds the supplementalPublicTypes option to the docs-json output target.

LANGUAGE: ts
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json',
      supplementalPublicTypes: 'src/public-interfaces.ts',
    }
  ]
};

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config
DESCRIPTION: Configuration setup for specifying a custom screenshot connector in the Stencil testing config.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Load Config Function Declaration
DESCRIPTION: Function signature for loading and validating Stencil configuration settings.

LANGUAGE: tsx
CODE:
loadConfig(init?: LoadConfigInit): Promise<LoadConfigResults>

----------------------------------------

TITLE: Using Callback-based Worker Function in a Stencil Component
DESCRIPTION: This example shows how to use a callback-based Web Worker function within a Stencil component, demonstrating progress tracking for a countdown task.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { countDown } from '../countdown.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {

  componentWillLoad() {
    const startNum = 5;
    console.log('start', startNum);

    countDown(startNum, (p) => {
      console.log('progress', p);
    }).then(result => {
      console.log('finish', result);
    });
  }
}

----------------------------------------

TITLE: Accessing Worker Instance Directly in Stencil
DESCRIPTION: This snippet demonstrates how to access the actual Worker instance in Stencil for manual postMessage usage, while still utilizing the proxy methods for convenience.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {

  async componentWillLoad() {
    worker.postMessage(['send data manually']);

    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Enabling Warnings for Copy Tasks
DESCRIPTION: This example demonstrates how to opt-in to warnings if a copy task source cannot be found by setting warn: true in the CopyTask object.

LANGUAGE: typescript
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Implementing Controlled Component Pattern with Ionic in Ember
DESCRIPTION: This code example demonstrates how to implement the controlled component pattern with an Ionic toggle component in an Ember component, including state management and event handling.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Configuring HTTPS in Stencil Dev Server
DESCRIPTION: Example configuration showing how to set up HTTPS for the Stencil dev server by providing SSL certificate and key files. The configuration also demonstrates setting custom port and reload strategy.

LANGUAGE: tsx
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8'),
    },
  },
};

----------------------------------------

TITLE: Configuring JSON Docs Output Target
DESCRIPTION: Configuration setup in stencil.config.ts to automatically generate JSON documentation during build

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Screenshot Connector Supporting Interfaces
DESCRIPTION: Comprehensive TypeScript interfaces defining the data structures used throughout the screenshot connector system.

LANGUAGE: tsx
CODE:
export interface ScreenshotConnectorOptions {
  buildId: string;

  buildMessage: string;

  buildAuthor?: string;

  buildUrl?: string;

  previewUrl?: string;

  appNamespace: string;

  buildTimestamp: number;

  logger: Logger;

  rootDir: string;

  cacheDir: string;

  packageDir: string;

  screenshotDirName?: string;

  imagesDirName?: string;

  buildsDirName?: string;

  currentBuildDir?: string;

  updateMaster?: boolean;

  allowableMismatchedPixels?: number;

  allowableMismatchedRatio?: number;

  pixelmatchThreshold?: number;

  waitBeforeScreenshot?: number;

  pixelmatchModulePath?: string;
}

----------------------------------------

TITLE: Loading Stencil Component via ES Module Import
DESCRIPTION: Shows how to load Stencil components using ES Modules import statement. This method allows for more modern JavaScript usage and better tree-shaking.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Using Custom JSDoc Tags
DESCRIPTION: Example of using custom JSDoc tags in component documentation

LANGUAGE: typescript
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Nesting Stencil Components
DESCRIPTION: Illustrates how to compose and nest Stencil components by using component tags within the JSX of another component. No imports are needed for using one Stencil component inside another.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Subfolder Component Directory Structure
DESCRIPTION: Example directory structure showing the generated component files in a specified subfolder.

LANGUAGE: plain
CODE:
src
└── components
    └── pages
        └── page-home
            ├── page-home.css
            ├── page-home.e2e.ts
            ├── page-home.spec.ts
            └── page-home.tsx

----------------------------------------

TITLE: Advanced Screenshot Comparison in Stencil E2E Tests
DESCRIPTION: Comprehensive example of screenshot comparison testing in Stencil, including setting global styles, finding elements, and using different comparison methods. It demonstrates how to test against hard pixels and percentage of changes.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    // In order to test against any global styles you may have, don't forget to set the link to the global css. You don't have to do this if your stencil.config.ts file doesn't build a global css file with globalStyle.
    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    // To start comparing the visual result, you first must run page.compareScreenshot; This will capture a screenshot, and save the file to "/screenshot/images". You'll be able to check that into your repo to provide those results to your team. You can only have one of these commands per test. 
    const results = await page.compareScreenshot();

    // Finally, we can test against the previous screenshots. 
    // Test against hard pixels
    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    // Test against the percentage of changes. if 'allowableMismatchedRatio' is above 20% changed, 
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Using Refs in Stencil JSX
DESCRIPTION: Demonstrates how to get a direct reference to a DOM element using refs in JSX.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'app-home',
})
export class AppHome {

  textInput!: HTMLInputElement;

  handleSubmit = (event: Event) => {
    event.preventDefault();
    console.log(this.textInput.value);
  }

  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <label>
          Name:
          <input type="text" ref={(el) => this.textInput = el as HTMLInputElement} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Importing Component Library in TypeScript
DESCRIPTION: Example of importing a Stencil component library in a TypeScript application

LANGUAGE: typescript
CODE:
import 'my-design-system';

----------------------------------------

TITLE: Documenting CSS Variables in Stencil Components
DESCRIPTION: Use JSDoc-style comments to document CSS variables in your component's CSS file.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Example Telemetry Data Structure in JavaScript
DESCRIPTION: Sample JSON structure showing the anonymous telemetry data collected by Stencil CLI, including system information, dependencies, build configuration, and command execution details.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Configuring Stencil docs-custom Output Target
DESCRIPTION: Example configuration for setting up the docs-custom output target in Stencil. The configuration includes a generator function that receives the JSON documentation data for custom processing.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Using Custom JSDoc Tags in Stencil Components
DESCRIPTION: Example of using custom JSDoc tags in a Stencil component for additional documentation.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Using Host as a Fragment in Stencil TSX
DESCRIPTION: Shows how to use the Host component as a fragment to render multiple elements at the root level of a Stencil component.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Creating a Stencil Store in TypeScript
DESCRIPTION: Example of creating a store with initial state and defining a change listener for a specific property.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: Basic configuration for setting up the dist output target in a Stencil project's config file.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Synchronous Transpilation with transpileSync() Function
DESCRIPTION: Shows the synchronous version of the transpile() function, which requires TypeScript to be globally available in browser environments.

LANGUAGE: typescript
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Component with Internal Tag
DESCRIPTION: Example of marking a component as internal using @internal JSDoc tag

LANGUAGE: tsx
CODE:
/**
 * @internal
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Form Reset Callback Implementation
DESCRIPTION: Example of implementing formResetCallback to handle form reset events.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-reset-cb',
  formAssociated: true,
})
export class MyComponent {
  @AttachInternals()
  internals: ElementInternals;

  formResetCallback() {
    this.internals.setValidity({});
    this.internals.setFormValue("");
  }

  render() {
    return <input type="text"></input>
  }
}

----------------------------------------

TITLE: JavaScript Optimization Function
DESCRIPTION: Method signature for optimizing JavaScript code with the Stencil compiler.

LANGUAGE: jsx
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Using WebdriverIO Matchers for Stencil Component Testing
DESCRIPTION: This snippet shows how to use WebdriverIO-specific matchers for making assertions in Stencil component tests. It demonstrates the preferred way to assert text content using toHaveText.

LANGUAGE: typescript
CODE:
await expect($('my-component'))
    .toHaveText(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)

----------------------------------------

TITLE: Using Custom JSDoc Tags in Stencil Components
DESCRIPTION: Example of using custom JSDoc tags in a Stencil component, which will be included in the JSON documentation.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Running Stencil CLI with Options
DESCRIPTION: Executes the Stencil CLI with given options. This function is used by Stencil's default bin/stencil file and can be used externally as well.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Documenting CSS Custom Properties in Stencil Components
DESCRIPTION: Demonstrates how to document CSS custom properties using the @prop JSDoc tag in CSS files, which will be included in the generated README.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Rollup Configuration for Stencil Custom Elements
DESCRIPTION: This snippet provides a Rollup configuration for consuming Stencil custom elements, including asset copying.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Conditional Rendering
DESCRIPTION: Examples of conditional rendering using if/else statements and ternary operators in JSX.

LANGUAGE: tsx
CODE:
render() {
  if (this.name) {
    return ( <div>Hello {this.name}</div> )
  } else {
    return ( <div>Hello, World</div> )
  }
}

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
    {this.name
      ? <p>Hello {this.name}</p>
      : <p>Hello World</p>
    }
    </div>
  );
}

----------------------------------------

TITLE: Data Binding in JSX
DESCRIPTION: Shows how to bind dynamic data within JSX using curly braces syntax.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

----------------------------------------

TITLE: Configuring Stencil Output Target with Prerender Config
DESCRIPTION: Example of setting up the prerenderConfig path in stencil.config.ts file to enable prerendering for the www output target.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Loading Stencil Component via CDN in HTML
DESCRIPTION: Demonstrates how to load a Stencil component using a CDN script tag in a simple HTML page.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Generating JSON Docs via Stencil CLI
DESCRIPTION: Command to generate JSON documentation using the Stencil CLI. This creates a JSON file containing component documentation at the specified path.

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Updating Vue Library package.json
DESCRIPTION: Changes to make in the Vue library's package.json file.

LANGUAGE: json
CODE:
{
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "scripts": {
    "test": "echo \"Error: run tests from root\" && exit 1",
    "build": "npm run tsc",
    "tsc": "tsc -p . --outDir ./dist"
  },
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "stencil-library": "*"
  }
}

----------------------------------------

TITLE: Creating an In-Memory Compiler System
DESCRIPTION: Shows the function signature for creating an in-memory compiler system, independent of any platform.

LANGUAGE: typescript
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Using Ionic Components in Ember Templates
DESCRIPTION: This snippet shows how to use an Ionic component (ion-toggle) in an Ember component template.

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Installing WebdriverIO Visual Service
DESCRIPTION: Command to install the WebdriverIO visual testing service package as a dev dependency.

LANGUAGE: bash
CODE:
npm install --save-dev @wdio/visual-service

----------------------------------------

TITLE: Service Worker Update Handler Component
DESCRIPTION: Component code for handling service worker updates and showing a reload toast when updates are available.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Setting Asset Path for Custom Elements
DESCRIPTION: Shows how to set the asset path for custom elements builds using the setAssetPath function.

LANGUAGE: tsx
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Running Stencil CLI with Options
DESCRIPTION: Executes the Stencil CLI with given options. This function is used by Stencil's default bin/stencil file and can be used externally as well.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Create System Function Declaration
DESCRIPTION: Function signature for creating an in-memory compiler system independent of platform.

LANGUAGE: tsx
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Configuring Prerender Debug Settings in Stencil
DESCRIPTION: This TypeScript configuration file sets up prerendering options for debugging. It disables URL crawling, specifies entry URLs, and enables runtime logging for better visibility during the prerendering process.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Resetting Stencil Store in test environment
DESCRIPTION: Example of how to reset the store state before each test using the dispose() method in a beforeEach hook.

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: Implementing Prop Watchers in Stencil
DESCRIPTION: Implementation of prop watchers to handle changes to object and array props with parsing functionality.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

LANGUAGE: tsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Correct Component Organization Pattern
DESCRIPTION: Series of files showing the correct way to organize utilities and components in separate modules.

LANGUAGE: tsx
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Implementing Prop Watchers in Stencil
DESCRIPTION: Implementation of prop watchers to handle changes to object and array props with parsing functionality.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

LANGUAGE: tsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Generating JSON Docs via Stencil CLI
DESCRIPTION: Command to generate JSON documentation using the Stencil CLI. This creates a JSON file containing component documentation at the specified path.

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Configuring Stencil React Output Target
DESCRIPTION: Add the reactOutputTarget configuration to the Stencil config file to generate React component wrappers.

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    reactOutputTarget({
      outDir: '../react-library/lib/components/stencil-generated/',
    }),
    { type: 'dist-custom-elements' },
  ],
};

----------------------------------------

TITLE: Custom Clock Component Implementation (TSX)
DESCRIPTION: Complete example showing a clock component that uses connectedCallback and disconnectedCallback to manage a timer, demonstrating proper lifecycle method usage.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Synchronous Transpilation in Stencil
DESCRIPTION: Presents the synchronous version of the transpile function. It requires TypeScript to be globally available in browser environments.

LANGUAGE: typescript
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Loading Stencil Components with ESM Loader
DESCRIPTION: Example of using the generated loader functions to register components and apply polyfills in an application setup script.

LANGUAGE: typescript
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Setting Asset Path for Custom Elements
DESCRIPTION: This snippet shows how to use the setAssetPath function to specify the base path for static assets in a custom elements build. It demonstrates setting the asset path using the current script's source URL.

LANGUAGE: javascript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Keyboard Event Handling in Stencil
DESCRIPTION: Demonstrates how to handle keyboard events using @Listen decorator and KeyboardEvent interface.

LANGUAGE: tsx
CODE:
@Listen('keydown')
handleKeyDown(ev: KeyboardEvent){
  if (ev.key === 'ArrowDown'){
    console.log('down arrow pressed')
  }
}

----------------------------------------

TITLE: Generating Stats Documentation with Stencil CLI
DESCRIPTION: Shows how to use the --stats flag with the Stencil CLI to generate stats documentation. It demonstrates two script examples: one without specifying a file path and another with an optional file path.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Implementing formResetCallback in Stencil
DESCRIPTION: This example demonstrates how to use the formResetCallback to reset a component's internal state and validation when a form is reset.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-reset-cb',
  formAssociated: true,
})
export class MyComponent {
  @AttachInternals()
  internals: ElementInternals;

  formResetCallback() {
    this.internals.setValidity({});
    this.internals.setFormValue("");
  }

  render() {
    return <input type="text"></input>
  }
}

----------------------------------------

TITLE: Generating Stats with NPM Scripts in Stencil
DESCRIPTION: Demonstrates how to use the --stats flag in NPM scripts to generate stats data for a Stencil project. It shows two options: one without specifying a file path and another with a custom file path.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Configuring assetsDirs in Stencil Component
DESCRIPTION: Shows how to configure the assetsDirs option in a Stencil component to specify directories containing required assets and use getAssetPath to reference them.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Configuring Stencil Project for E2E Testing
DESCRIPTION: Shows the configuration in stencil.config.ts for setting up the project structure and output targets for end-to-end testing. It includes copying HTML and CSS files to the output directory.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'test-app',
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null,
      copy: [{ src: '**/test/*.html' }, { src: '**/test/*.css' }],
    },
  ],
};

----------------------------------------

TITLE: Updating TypeScript Configuration
DESCRIPTION: TSConfig update to include ESNext.Disposable library for Playwright compatibility.

LANGUAGE: typescript
CODE:
{
  lib: [
    ...,
    "ESNext.Disposable"
  ],
  ...
}

----------------------------------------

TITLE: Documenting Shadow Parts in a Stencil Component
DESCRIPTION: This snippet demonstrates how to document shadow parts in a Stencil component using the @part JSDoc tag. This information will be used to generate the Shadow Parts section in the README.

LANGUAGE: typescript
CODE:
/**
 * @part label - The label text describing the component.
 */
@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  // ...

  render() {
    return (
      <div part="label">
        <slot></slot>
      </div>
    );
  }
}

----------------------------------------

TITLE: Setting Object Props Manually in HTML
DESCRIPTION: This snippet shows how to set object props on a Stencil component in a non-JSX environment using JavaScript to manipulate the DOM element directly.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Default Values for Props in Stencil
DESCRIPTION: Shows how to set default values for props in Stencil components. Demonstrates how default values can be overridden when using the component.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'component-with-some-props',
})
export class ComponentWithSomeProps {
    @Prop() aNumber = 42;
    @Prop() aString = 'defaultValue';

    render() {
        return <div>The number is {this.aNumber} and the string is {this.aString}</div>
    }
}

----------------------------------------

TITLE: Custom Rollup Plugin Configuration
DESCRIPTION: Example configuration for adding custom Rollup plugins in stencil.config.ts

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Documenting Slots in TypeScript/JSX
DESCRIPTION: Example of documenting component slots using JSDoc comments in a Stencil component

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Configuring Meta Tags with Stencil Prerender Config
DESCRIPTION: Example showing how to use the afterHydrate hook in Stencil's PrerenderConfig to dynamically set document title based on URL pathname during static site generation. The hook receives document and URL objects as parameters and can modify the DOM before HTML serialization.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Worker with Callback Progress
DESCRIPTION: Demonstrates how to implement a Web Worker that provides progress updates through callbacks.

LANGUAGE: tsx
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

----------------------------------------

TITLE: Configuring 'www' Output Target in Stencil
DESCRIPTION: This code snippet demonstrates how to configure the 'www' output target in Stencil's configuration. It sets the output target type to 'www' within the outputTargets array.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Generating Stencil Component via CLI
DESCRIPTION: Command to generate a new Stencil component using the CLI generator without interactive prompts.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Worker with External Dependencies
DESCRIPTION: Demonstrates how to use external dependencies and local modules within a Web Worker.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Setting Props on a Component in E2E Tests
DESCRIPTION: Shows how to set properties on a component during an E2E test using page.$eval. This example demonstrates setting multiple properties and waiting for changes to be processed.

LANGUAGE: typescript
CODE:
await page.setContent(`
      <prop-cmp></prop-cmp>
    `);

await page.$eval('prop-cmp', (elm: any) => {
  elm.first = 'Marty';
  elm.lastName = 'McFly';
});

await page.waitForChanges();

----------------------------------------

TITLE: Loading Stencil Component via CDN Script Tag in HTML
DESCRIPTION: This snippet shows how to load a Stencil component published to npm through a CDN using a script tag in a simple HTML page.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Importing Mocking Functions in WebdriverIO
DESCRIPTION: This snippet shows how to import the mocking functions provided by WebdriverIO's browser runner. These functions are used to create and manage mocks in tests.

LANGUAGE: typescript
CODE:
import { mock, fn, unmock } from '@wdio/browser-runner'

----------------------------------------

TITLE: Example of expanded JsonDocsEvent in docs-json output
DESCRIPTION: Example of the expanded information included in the docs-json output for an @Event decorator in Stencil v4. This includes more detailed type information in the complexType field.

LANGUAGE: json
CODE:
{
  "complexType": {
    "original": "ModalBreakpointChangeEventDetail",
    "resolved": "ModalBreakpointChangeEventDetail",
    "references": {
      "ModalBreakpointChangeEventDetail": {
        "location": "import",
        "path": "./modal-interface",
        "id": "src/components/modal/modal.tsx::ModalBreakpointChangeEventDetail"
      }
    }
  }
}

----------------------------------------

TITLE: Implementing Store Configuration in Stencil
DESCRIPTION: Example of creating and configuring a store with state management and change handlers. Demonstrates basic store setup with click counter and derived state.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config
DESCRIPTION: Shows how to add the stats output target to the Stencil configuration file (stencil.config.ts) for automatic generation of stats with every build. It includes an optional file path specification.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: E2E Test with Mocking in Stencil
DESCRIPTION: This E2E test demonstrates how to use mocking with newSpecPage in Stencil, allowing the mock to work in the simulated browser context.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Basic Stencil Output Target Configuration in TypeScript
DESCRIPTION: Example configuration showing how to set up multiple output targets in a Stencil project's configuration file. Demonstrates configuring both 'dist' and 'www' output types.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Disabling Service Worker in Stencil
DESCRIPTION: Configuration to disable service worker generation in Stencil builds by setting serviceWorker to null.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Installing @wdio/visual-service Plugin for WebdriverIO
DESCRIPTION: Command to install the @wdio/visual-service plugin for visual testing in WebdriverIO using npm or yarn.

LANGUAGE: bash
CODE:
npm install --save-dev @wdio/visual-service

----------------------------------------

TITLE: Using a Stencil Component in HTML and TSX
DESCRIPTION: This example shows how to use a Stencil component in both HTML and TSX files after it has been compiled.

LANGUAGE: html
CODE:
<!-- Here we use the component in an HTML file -->
<todo-list></todo-list>

LANGUAGE: tsx
CODE:
{/* Here we use the component in a TSX file */}
<todo-list></todo-list>

----------------------------------------

TITLE: Advanced Worker Usage with Direct Access
DESCRIPTION: Shows how to directly access the Worker instance and manually handle message passing when needed.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);
    const result = await sum(1, 2);
    console.log(result);
  }
}

----------------------------------------

TITLE: Setting Component Props with External References
DESCRIPTION: Demonstrates how to set component properties using external references in E2E tests. This is useful for importing data from another file or reusing mock data across multiple tests.

LANGUAGE: typescript
CODE:
const props = {
  first: 'Marty',
  lastName: 'McFly',
};

await page.setContent(`<prop-cmp></prop-cmp>`);

await page.$eval('prop-cmp',
  (elm: any, { first, lastName }) => {
    elm.first = first;
    elm.lastName = lastName;
  },
  props 
);

await page.waitForChanges();

----------------------------------------

TITLE: Package.json Configuration for Lazy Loading
DESCRIPTION: Configuration for package.json to ensure proper entry file loading when importing the project.

LANGUAGE: json
CODE:
{
  "exports": "./dist/esm/my-design-system.js",
  "main": "./dist/cjs/my-design-system.js",
  "unpkg": "dist/my-design-system/my-design-system.esm.js"
}

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Prerendering
DESCRIPTION: This JSON configuration sets up VS Code to debug Stencil's prerender process using Node.js. It specifies the Stencil CLI command and necessary arguments for prerendering.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "node",
      "request": "launch",
      "name": "Prerender",
      "args": [
        "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
        "prerender",
        "${workspaceFolder}/dist/hydrate/index.js",
        "--max-workers=0",
        "--config=${workspaceFolder}/stencil.config.ts"
      ],
      "protocol": "inspector"
    }
  ]
}

----------------------------------------

TITLE: Configuring Stats Generation in Package Scripts (TSX)
DESCRIPTION: Shows how to set up npm scripts to generate stats data using the --stats flag, with optional file path specification.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Documenting CSS Variables in Stencil (CSS)
DESCRIPTION: This example shows how to document CSS variables (CSS Custom Properties) in Stencil using JSDoc-style comments. The comments will be extracted and included in the generated documentation.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: E2E Test Using page.setContent()
DESCRIPTION: Example of an end-to-end test using page.setContent() to define inline HTML for testing a Stencil component.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    await page.setContent('<my-component first="Stencil"></my-component>');

    // Rest of test
  });
});

----------------------------------------

TITLE: Configuring Basic Image Copy Task in Stencil
DESCRIPTION: Example showing how to configure a basic copy task in the www output target to copy images from src/images to www/images directory.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      copy: [
        { src: 'images' }
      ]
    }
  ]

----------------------------------------

TITLE: Custom Footer Configuration
DESCRIPTION: Configuration for adding a custom footer to generated readme files

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Implementing Store in Stencil Component
DESCRIPTION: Demonstration of using the store within a Stencil component, including state updates and rendering.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Configuring Event Options in Stencil
DESCRIPTION: Shows how to use the EventOptions interface to configure custom event behavior, including setting the event name, bubbling, cancelable, and composed properties.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Generating Stencil Component in Subfolder
DESCRIPTION: Command to generate a new Stencil component in a specified subfolder path under src/components directory.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Handling Service Worker Updates in Stencil Component
DESCRIPTION: Example of handling Service Worker updates in a Stencil component, showing a toast notification when an update is available.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    // If there is no waiting registration, this is the first service
    // worker being installed.
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Exporting Generated React Components
DESCRIPTION: This code exports the generated React component wrappers from the React library's entry file.

LANGUAGE: typescript
CODE:
export * from './components/stencil-generated';
export { defineCustomElements } from "stencil-library/loader";

----------------------------------------

TITLE: Using Custom JSDoc Tags in Stencil Components
DESCRIPTION: Example of how to use custom JSDoc tags in a Stencil component. These custom tags are included in the generated JSON documentation without any additional configuration.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Mocking in E2E Tests with newSpecPage
DESCRIPTION: Demonstrates how to use newSpecPage for E2E testing with mocking. This approach allows mocking in a browser-like context, overcoming limitations of using mocks with newE2EPage.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Accessing Host Element with Element Decorator in Stencil
DESCRIPTION: Demonstrates how to use the @Element() decorator to get access to the host element within a Stencil component class. It shows how to use standard DOM methods on the host element.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Specifying Output Directory for README Files
DESCRIPTION: Customize the output directory for generated README files by setting the dir property in the output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      dir: 'output'
    }
  ]
};

----------------------------------------

TITLE: Importing Hydrate Functions
DESCRIPTION: Example showing how to import the hydrate functions from a published package

LANGUAGE: javascript
CODE:
import { createWindowFromHtml, hydrateDocument, renderToString, streamToString } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Demonstrating File Structure for Stencil Components
DESCRIPTION: This snippet shows the recommended file structure for Stencil components, illustrating how components should be organized into separate directories with their associated styles and test files.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Mocking a Library in Stencil with TypeScript
DESCRIPTION: Example of mocking the 'md5' library by creating a mock file in the __mocks__ directory. This demonstrates how to create a simple mock that returns a fixed value.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Web Apps
DESCRIPTION: This JSON configuration sets up VS Code to debug Stencil components running in a Chrome browser. It uses the default Stencil dev server port and enables source map support for accurate debugging.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:3333",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "*": "${webRoot}/*"
      }
    }
  ]
}

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Web Components
DESCRIPTION: This JSON configuration sets up VS Code to launch Chrome for debugging Stencil components running on localhost:3333. It enables source maps and provides path overrides for accurate debugging.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:3333",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "*": "${webRoot}/*"
      }
    }
  ]
}

----------------------------------------

TITLE: Defining Props in Stencil Component
DESCRIPTION: This TypeScript snippet defines object and array props in a Stencil component class using the @Prop decorator.

LANGUAGE: tsx
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Updating Vite Config for Custom Elements
DESCRIPTION: Modifying the Vite configuration to treat tags with dashes as custom elements.

LANGUAGE: typescript
CODE:
export default defineConfig({
  plugins: [
    vue({
      template: {
        compilerOptions: {
          isCustomElement: (tag) => tag.includes('-'),
        },
      },
    }),
    vueJsx(),
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  }
})

----------------------------------------

TITLE: Custom Footer Configuration
DESCRIPTION: Configuration example showing how to add a custom footer to generated README files.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Configuring Vue Output Target for SSR
DESCRIPTION: Configuration for enabling server-side rendering of Stencil components in Vue applications.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  outputTargets: [
    vueOutputTarget({
      includeImportCustomElements: true,
      includePolyfills: false,
      includeDefineCustomElements: false,
      componentCorePackage: 'component-library',
      hydrateModule: 'component-library/hydrate',
      proxiesFile: '../component-library-vue/src/index.ts',
    }),
    // ...
  ]
};

----------------------------------------

TITLE: Configuring Stencil Prerender Debug Settings
DESCRIPTION: TypeScript configuration for Stencil prerender debugging setup. Disables URL crawling, sets specific entry URLs, and enables runtime logging.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Custom Service Worker with Update Handling
DESCRIPTION: A custom Service Worker implementation that listens for 'skipWaiting' messages to handle updates. This allows for immediate activation of new Service Worker versions.

LANGUAGE: javascript
CODE:
importScripts("workbox-v4.3.1/workbox-sw.js");

self.addEventListener("message", ({ data }) => {
  if (data === "skipWaiting") {
    self.skipWaiting();
  }
});

self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Importing Lazy-Loaded Stencil Components via Script Tag
DESCRIPTION: Example of importing a Stencil component library using a script tag for lazy loading.

LANGUAGE: html
CODE:
<script type="module" src="https://unpkg.com/my-design-system"></script>

----------------------------------------

TITLE: Configuring Vue Library tsconfig.json
DESCRIPTION: TypeScript configuration for the Vue component library project.

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2020"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2017",
    "skipLibCheck": true
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: Initializing Basic Form-Associated Component in Stencil
DESCRIPTION: Basic setup of a form-associated component using the formAssociated property in the @Component decorator.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Web Apps
DESCRIPTION: This JSON configuration sets up VS Code to debug Stencil components running in a Chrome browser. It uses the default Stencil dev server port and enables source map support for accurate debugging.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:3333",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "*": "${webRoot}/*"
      }
    }
  ]
}

----------------------------------------

TITLE: Visual Testing Component Example
DESCRIPTION: Example test case demonstrating how to use the toMatchElementSnapshot matcher to perform visual regression testing on a Stencil component.

LANGUAGE: typescript
CODE:
https://github.com/webdriverio/component-testing-examples/blob/2de295ab568b5163e67d716156221578b6536d9d/stencil-component-starter/src/components/my-component/my-component.test.tsx#L20-L28

----------------------------------------

TITLE: Setting Object Props Manually in HTML
DESCRIPTION: Demonstrates how to set object props manually on a Stencil component in HTML using JavaScript.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Configuring Custom Rollup Plugins in Stencil
DESCRIPTION: Shows how to add custom Rollup plugins to the Stencil bundling process using the stencil.config.ts file.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Disabling transformAliasedImportPathsInCollection in Stencil v4.0.0
DESCRIPTION: Configuration snippet for disabling the transformAliasedImportPathsInCollection feature for the dist output target in Stencil v4.0.0. This can be used as a workaround if issues are encountered with the new default behavior.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Importing Stencil Components using ES Modules
DESCRIPTION: This example demonstrates how to include Stencil components using ES Modules in an HTML file. It imports the defineCustomElements function from the Ionic framework's core library and calls it to define the custom elements.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Consuming Angular Wrapper Components in App Module
DESCRIPTION: Import and use the generated Angular component wrappers in an Angular application module.

LANGUAGE: typescript
CODE:
import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

----------------------------------------

TITLE: Importing Hydrate Functions
DESCRIPTION: Example of importing the hydrateDocument function from a published package for server-side usage.

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Configuring Angular Output Target in Stencil Config
DESCRIPTION: This snippet shows how to configure the Angular output target in the Stencil configuration file. It sets up the output target to generate Angular component wrappers for Stencil components.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Creating an In-Memory Compiler System
DESCRIPTION: Shows the function signature for createSystem(), which returns a CompilerSystem instance for in-memory file system operations.

LANGUAGE: typescript
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Initializing Stencil Dev Server with start() Function
DESCRIPTION: The start() function initializes a Stencil development server using configuration parameters. It takes a StencilDevServerConfig object, a Logger instance, and an optional CompilerWatcher as parameters, returning a Promise that resolves to a DevServer instance.

LANGUAGE: tsx
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Configuring Visual Service in WebdriverIO Configuration
DESCRIPTION: Configuration snippet for wdio.conf.ts to include the visual service and set up screenshot directories for visual testing.

LANGUAGE: typescript
CODE:
export const config: WebdriverIO.Config = {
    // ...
    services: [
        ['visual', {
            baselineFolder: join(process.cwd(), './screenshots/baseline'),
            diffFolder: join(process.cwd(), './screenshots/diff'),
            formatImageName: '{tag}-{logName}-{width}x{height}'
        }]
    ],
    // ...
}

----------------------------------------

TITLE: Configuring Stencil Custom Elements Bundle Output
DESCRIPTION: Configuration for the dist-custom-elements-bundle output target in stencil.config.ts

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-custom-elements-bundle',
  },
];

----------------------------------------

TITLE: Basic @State Usage in Stencil Component
DESCRIPTION: Demonstrates the basic usage of @State decorator to manage internal state in a Stencil component that displays the current time.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Toggle Button State Management
DESCRIPTION: Example of combining @State with @Listen decorator to create a toggle button component.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Documenting CSS Variables in Stencil
DESCRIPTION: This example shows how to document CSS variables in Stencil using JSDoc-style comments. The comment includes a @prop tag to specify the variable name and its description.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: Loading Component Library via Script Tag
DESCRIPTION: Example of loading a Stencil component library using a script tag with type module attribute.

LANGUAGE: html
CODE:
<script type="module" src="https://unpkg.com/my-design-system"></script>

----------------------------------------

TITLE: Using Children in Functional Components
DESCRIPTION: Shows how to access and render children passed to a functional component.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Defining Object and Array Props in Stencil Component
DESCRIPTION: Defines object and array props in a Stencil component using the @Prop decorator.

LANGUAGE: typescript
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Configuring VS Code Node.js Debugging for Stencil Prerender
DESCRIPTION: Launch configuration for debugging Stencil's prerender process in Node.js environment. Sets up the stencil prerender command with necessary arguments.

LANGUAGE: json
CODE:
{
  "type": "node",
  "request": "launch",
  "name": "Prerender",
  "args": [
    "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
    "prerender",
    "${workspaceFolder}/dist/hydrate/index.js",
    "--max-workers=0",
    "--config=${workspaceFolder}/stencil.config.ts"
  ],
  "protocol": "inspector"
}

----------------------------------------

TITLE: Form Reset Callback Implementation
DESCRIPTION: Example showing implementation of formResetCallback to handle form reset events.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-reset-cb',
  formAssociated: true,
})
export class MyComponent {
  @AttachInternals()
  internals: ElementInternals;

  formResetCallback() {
    this.internals.setValidity({});
    this.internals.setFormValue("");
  }

  render() {
    return <input type="text"></input>
  }
}

----------------------------------------

TITLE: Form Reset Callback Implementation
DESCRIPTION: Example showing implementation of formResetCallback to handle form reset events.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-reset-cb',
  formAssociated: true,
})
export class MyComponent {
  @AttachInternals()
  internals: ElementInternals;

  formResetCallback() {
    this.internals.setValidity({});
    this.internals.setFormValue("");
  }

  render() {
    return <input type="text"></input>
  }
}

----------------------------------------

TITLE: Adding Component Overview
DESCRIPTION: Add a JSDoc comment to the component class to generate an overview section in the README.

LANGUAGE: typescript
CODE:
/**
 * A simple component for formatting names
 *
 * This component will do some neat things!
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { }

----------------------------------------

TITLE: Registering Custom Elements in Angular Module
DESCRIPTION: Example of registering Stencil custom elements during Angular app initialization using APP_INITIALIZER.

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Custom Rollup Plugins Configuration in TypeScript
DESCRIPTION: Example of how to configure custom Rollup plugins in the Stencil configuration file. Plugins can be added before node-resolve or after commonjs transform.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Specifying Output Directory for README Files
DESCRIPTION: This TypeScript snippet demonstrates how to specify a custom output directory for generated README files by setting the dir property in the docs-readme output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      dir: 'output'
    }
  ]
};

----------------------------------------

TITLE: Configuring Meta Tags with Stencil Prerender Hook
DESCRIPTION: Demonstrates how to use Stencil's afterHydrate prerender hook to dynamically set document title based on URL pathname. The hook receives document and URL objects as parameters and can modify the document before HTML serialization.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Registering Custom Elements in Angular Module
DESCRIPTION: Example of registering Stencil custom elements during Angular app initialization

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Disabling Service Worker in Stencil
DESCRIPTION: Configuration to disable service worker generation in Stencil builds by setting serviceWorker to null.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Configuring Stencil Angular Output Target
DESCRIPTION: Configuration for generating Angular component wrappers in stencil.config.ts

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: E2E Testing with Mocked Function in Stencil using TypeScript
DESCRIPTION: Demonstrates how to use newSpecPage for E2E testing with a mocked utility function in a Stencil component.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Generating Stencil Component in Subfolder
DESCRIPTION: Shows how to use the 'stencil generate' command to create a new component within a specified subfolder structure.

LANGUAGE: bash
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Accessing Worker Instance Directly in Stencil
DESCRIPTION: Demonstrates how to access the actual Worker instance in Stencil for manual postMessage usage, alongside the proxy methods.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);

    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Shadow DOM Query Selection
DESCRIPTION: Example demonstrating how to query elements within Shadow DOM using the @Element decorator and shadowRoot.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Configuring Prerender Config Path in Stencil Config
DESCRIPTION: This snippet shows how to set the path to the prerendering config file in the Stencil configuration file (stencil.config.ts).

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Disabling transformAliasedImportPathsInCollection in Stencil v4.0.0
DESCRIPTION: Configuration snippet for disabling the transformAliasedImportPathsInCollection feature for the dist output target in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Configuring WebdriverIO Visual Service
DESCRIPTION: Configuration setup in wdio.conf.ts to enable the visual testing service with customized settings for baseline and temporary screenshot directories

LANGUAGE: typescript
CODE:
export const config: WebdriverIOConfig = {
    // ...
    services: [
        ['visual', {
            baselineFolder: path.join(__dirname, '__snapshots__'),
            diffFolder: path.join(__dirname, '__snapshots__', '.tmp', 'diff'),
            formatImageName: '{tag}-{logName}-{width}x{height}-dpr-{pixelRatio}'
        }]
    ]
}

----------------------------------------

TITLE: Disabling transformAliasedImportPathsInCollection in Stencil v4.0.0
DESCRIPTION: Configuration snippet for disabling the transformAliasedImportPathsInCollection feature for the dist output target in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Testing Component with JSX Template in TypeScript
DESCRIPTION: Shows how to use the template option in newSpecPage() to test a component with props. This example uses JSX syntax to create the initial component state and tests the rendered output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Service Implementation Using Utility in TypeScript
DESCRIPTION: Demonstrates a service that uses the getRandomInt utility function.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Enabling Scoped CSS for a Stencil Component
DESCRIPTION: Shows how to enable scoped CSS for a Stencil component using the scoped option in the @Component decorator.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  scoped: true
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Using a Stencil Component in HTML
DESCRIPTION: This HTML snippet demonstrates how to use the 'my-component' Stencil component in a web page, passing properties as attributes.

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Installing Playwright Browser Binaries
DESCRIPTION: This command installs the Playwright browser binaries, which are required for running Playwright tests.

LANGUAGE: bash
CODE:
npx playwright install

----------------------------------------

TITLE: Demonstrating File Structure for Stencil Components
DESCRIPTION: This snippet shows the recommended file structure for organizing Stencil components, with each component in its own directory along with associated styles and tests.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Configuring Copy Task with Warning Option
DESCRIPTION: Example showing how to enable warnings for missing source files in a copy task configuration.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Importing Stencil Compiler in NodeJS
DESCRIPTION: Demonstrates how to import the Stencil compiler in a NodeJS environment using CommonJS require syntax.

LANGUAGE: tsx
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Documenting CSS Shadow Parts
DESCRIPTION: Use @part JSDoc tags in the component's JSDoc to document CSS shadow parts, which will be included in the README.

LANGUAGE: typescript
CODE:
/**
 * @part label - The label text describing the component.
 */
@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  // ...

  render() {
    return (
      <div part="label">
        <slot></slot>
      </div>
    );
  }
}

----------------------------------------

TITLE: Git Repository Initialization
DESCRIPTION: Commands to initialize a git repository for the Stencil project.

LANGUAGE: bash
CODE:
$ git init
$ git add -A
$ git commit -m "initialize project using stencil cli"

----------------------------------------

TITLE: Configuring Stencil Test Regex in TypeScript
DESCRIPTION: TypeScript configuration in stencil.config.ts to set the testRegex property, ensuring Stencil picks up the correct test files.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // ...
  testing: {
    testRegex: '(/__tests__/.*|\.?(spec))\\.(ts|js)$',
  },
};

----------------------------------------

TITLE: Copy Configuration with Warnings Enabled
DESCRIPTION: Example showing how to enable warning messages for copy tasks when source files cannot be found.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Marking a Stencil Component as Deprecated
DESCRIPTION: Use the @deprecated JSDoc tag to mark a component as deprecated, which will be reflected in the generated README.

LANGUAGE: typescript
CODE:
/**
 * @deprecated since v2.0.0
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Stencil Component Using Web Worker
DESCRIPTION: Demonstrates how to import and use Web Worker functions within a Stencil component.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result);
    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Getting Component Mode with getMode() in TypeScript
DESCRIPTION: Shows how to use the getMode() utility to get the current style mode of a component. This function is typically used within component methods to determine the current mode.

LANGUAGE: typescript
CODE:
import { getMode } from '@stencil/core'

getMode(this);

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Prerendering
DESCRIPTION: This JSON configuration sets up VS Code to debug the Stencil prerendering process. It launches a Node.js debugger, specifies the Stencil prerender command, and sets necessary arguments for effective debugging of the static site generation process.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "node",
      "request": "launch",
      "name": "Prerender",
      "args": [
        "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
        "prerender",
        "${workspaceFolder}/dist/hydrate/index.js",
        "--max-workers=0",
        "--config=${workspaceFolder}/stencil.config.ts"
      ],
      "protocol": "inspector"
    }
  ]
}

----------------------------------------

TITLE: CSS Documentation Example
DESCRIPTION: Example of documenting CSS custom properties in Stencil components

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config
DESCRIPTION: Shows how to add the stats output target to the stencil.config.ts file for automatic generation of statistics with every build. It includes an optional file path specification.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Parsing Command-Line Flags for Stencil CLI in TypeScript
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object for use in the Stencil CLI. It takes an array of strings as input.

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Functional Component with Children in Stencil
DESCRIPTION: This snippet illustrates how to create a functional component that accepts both props and children elements.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Customizing README Footer in Stencil Configuration
DESCRIPTION: Add a custom footer to the generated README files by specifying the 'footer' property in the output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Using String-Based Object Props in JSX
DESCRIPTION: This JSX snippet shows how to pass string-based object and array props to a Stencil component in a JSX environment. The strings represent serialized JSON objects.

LANGUAGE: jsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Exporting Generated Angular Component Wrappers
DESCRIPTION: This snippet demonstrates how to import and export the generated Angular component wrappers in the main Angular module of the component library.

LANGUAGE: typescript
CODE:
import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Using Element Decorator
DESCRIPTION: Shows how to access the host element instance using the @Element decorator and use DOM methods.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

export class TodoList {
  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Implementing Utility Helper Function in TypeScript
DESCRIPTION: Defines a utility function getRandomInt that generates a random integer between given minimum and maximum values.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component (TypeScript)
DESCRIPTION: This snippet demonstrates how to use Build Conditionals in a Stencil component. It imports the Build object from @stencil/core and uses the isDev property to conditionally execute code based on the development or production environment.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Basic Workbox Service Worker Configuration
DESCRIPTION: Default configuration for generating a service worker using Workbox in Stencil. Specifies glob patterns for caching static assets.

LANGUAGE: typescript
CODE:
{
  globPatterns: [
    '**/*.{js,css,json,html}'
  ]
};

----------------------------------------

TITLE: Declaring Props in Stencil Components
DESCRIPTION: This snippet demonstrates how to declare props in a Stencil component using the @Prop() decorator.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Configuring Output Targets in Stencil
DESCRIPTION: This snippet demonstrates how to configure multiple output targets in a Stencil project's configuration file. It shows setting up both 'dist' and 'www' output types.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Setting CSP Nonce in Stencil Custom Elements Build
DESCRIPTION: Example demonstrating nonce configuration for scripts and styles in a Stencil custom elements build within an Angular application context.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Configuring VS Code HTML Custom Data
DESCRIPTION: JSON configuration for VS Code settings to enable custom element support by specifying the path to the generated custom data file.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Initializing Lerna Workspace
DESCRIPTION: Commands to initialize a Lerna workspace and install dependencies.

LANGUAGE: bash
CODE:
# From your top-most-directory/, initialize a workspace
lerna init

# install dependencies
npm install

# install typescript and node types
npm install typescript @types/node --save-dev

----------------------------------------

TITLE: Invalid Component Export Example in TypeScript
DESCRIPTION: Example showing incorrect way of exporting multiple items from a component file, which violates Stencil's one-component-per-module rule.

LANGUAGE: tsx
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Loading Stencil Components via CDN Script Tag
DESCRIPTION: Demonstrates how to load Stencil components using a traditional script tag from a CDN in a basic HTML page.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Configuring Stencil Output Target
DESCRIPTION: Configuration for Stencil to generate Vue component wrappers using the Vue output target

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Valid and Invalid Public Method Implementations in Stencil
DESCRIPTION: Illustrates valid and invalid ways to implement public methods using the @Method() decorator. Public methods must be async or return a Promise.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Importing and Exporting Generated Component Wrappers
DESCRIPTION: TypeScript code demonstrating how to import and export the generated Angular component wrappers in the main Angular module.

LANGUAGE: typescript
CODE:
import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: CreateSystem Method Signature
DESCRIPTION: Function signature for creating an in-memory compiler system independent of platform.

LANGUAGE: tsx
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Service Implementation Using Utility in TypeScript
DESCRIPTION: Service module that utilizes the getRandomInt helper function.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Implementing Private Methods in Stencil Components
DESCRIPTION: This snippet shows how to implement private methods in Stencil components. Private methods do not require the @Method() decorator and are not required to be async or return a Promise.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Documenting Component Properties in Stencil
DESCRIPTION: Demonstrates how to add a description to a @Prop in Stencil using JSDoc comments. This helps in auto-generating documentation for component properties.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Documenting CSS Variables in Stencil
DESCRIPTION: Shows how to document CSS custom properties (variables) using JSDoc-style comments in CSS/SCSS files. The example demonstrates documenting a primary color variable.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: State with Event Listeners
DESCRIPTION: Demonstrates combining @State with @Listen decorator to create an interactive toggle button component.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Component Documentation Examples
DESCRIPTION: Examples of using JSDoc to document various component features like properties, events, methods and slots

LANGUAGE: typescript
CODE:
/**
 * A simple component for formatting names
 *
 * This component will do some neat things!
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent {
  /**
   * The first name
   */
  @Prop() first!: string;

  /**
   * Emitted when an event is completed
   */
  @Event() todoCompleted: EventEmitter<number>;

  /**
   * Scroll by a specified X/Y distance
   */
  @Method()
  async scrollByPoint(x: number, y: number): Promise<number> { /* ... */ }
}

----------------------------------------

TITLE: Using setAssetPath in Stencil Components
DESCRIPTION: Demonstrates how to use the setAssetPath API to manually set the asset base path for Stencil components, including exporting and importing the function.

LANGUAGE: typescript
CODE:
// In your package entry file (e.g., /src/index.ts)
export { setAssetPath } from '@stencil/core';

LANGUAGE: typescript
CODE:
// In the consumer's code
import { setAssetPath } from 'my-component-library';
setAssetPath(`${window.location.protocol}//assets.${window.location.host}/`);

----------------------------------------

TITLE: Running Visual Regression Tests with Stencil CLI
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison using the Stencil CLI.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Using Parsed Object Props in HTML
DESCRIPTION: Demonstrates how to use the parsed object props in an HTML element with Stencil component.

LANGUAGE: tsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Prerender
DESCRIPTION: This JSON configuration sets up VS Code to debug the Stencil prerender process. It specifies the Node.js debugger, the Stencil prerender command, and various arguments including the path to the hydrate script and the project configuration.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "node",
      "request": "launch",
      "name": "Prerender",
      "args": [
        "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
        "prerender",
        "${workspaceFolder}/dist/hydrate/index.js",
        "--max-workers=0",
        "--config=${workspaceFolder}/stencil.config.ts"
      ],
      "protocol": "inspector"
    }
  ]
}

----------------------------------------

TITLE: Transpiling Code with Stencil Core Compiler
DESCRIPTION: Shows the function signature for transpile(), which takes source code as a string and optional transpile options, returning a Promise with the transpilation results.

LANGUAGE: typescript
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Marking a Component as Deprecated
DESCRIPTION: Use the @deprecated JSDoc tag to mark a component as deprecated and include a deprecation notice in the README.

LANGUAGE: typescript
CODE:
/**
 * @deprecated since v2.0.0
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Utility Mock Implementation
DESCRIPTION: Mock implementation of the getRandomInt utility function that returns a fixed value.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: This TypeScript snippet demonstrates how to document slots using the @slot JSDoc tag. The generated README will include a table describing the available slots.

LANGUAGE: typescript
CODE:
/**
 * @slot - Content is placed between the named slots if provided without a slot.
 * @slot primary - Content is placed to the left of the main slotted-in text.
 * @slot secondary - Content is placed to the right of the main slotted-in text.
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent {
  // ...
  
  render() {
    return (
      <section>
        <slot name="primary"></slot>
        <div class="content">
          <slot></slot>
        </div>
        <slot name="secondary"></slot>
      </section>
    );
  }
}

----------------------------------------

TITLE: Building Static Site with Stencil Prerender Flag
DESCRIPTION: Command to enable prerendering during Stencil build process using the --prerender flag.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Handling Notification Clicks in Service Worker
DESCRIPTION: Implements a notification click event listener in a service worker to handle user interactions with push notifications.

LANGUAGE: javascript
CODE:
self.addEventListener('notificationclick', event => {
  const notification = event.notification;
  const action = event.action;

  if (action === 'dismiss') {
    notification.close();
  } else {
    // This handles both notification click and 'details' action,
    // because some platforms might not support actions.
    clients.openWindow(notification.data.href);
    notification.close();
  }
});

----------------------------------------

TITLE: Using Build Conditionals in Stencil Components
DESCRIPTION: Demonstrates how to use the Build.isBrowser conditional to execute code only in the browser or during prerendering.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Generating Stencil Component Using CLI
DESCRIPTION: Command to generate a new Stencil component using the CLI generator. This command creates a component with the specified name in the src/components directory.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Creating a Stencil Compiler Instance
DESCRIPTION: Illustrates how to create a Stencil compiler instance using a configuration object. This function is used for full builds and returns a Promise with the Compiler instance.

LANGUAGE: tsx
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Jest Test with File-based Mock
DESCRIPTION: Example of a test file that uses a file-based mock implementation of the utils helper.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Using Style Modes in Stencil Components
DESCRIPTION: Shows how to define and use style modes in a Stencil component to support multiple styling configurations.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'simple-button',
  styleUrls: {
    md: './simple-button.md.css', // styles for Material Design
    ios: './simple-button.ios.css' // styles for iOS
  },
})
export class SimpleButton {
  // ...
}

----------------------------------------

TITLE: Configuring TypeScript Path Aliases
DESCRIPTION: Example of configuring path aliases in tsconfig.json for TypeScript projects. This allows specifying shortcuts for import paths.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Async Data Fetching in componentWillLoad
DESCRIPTION: Example showing how to implement asynchronous data fetching in componentWillLoad using Promises.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Creating a Stencil Compiler Instance
DESCRIPTION: Illustrates how to create a Stencil compiler instance using a configuration object. This function is used for full builds and returns a Promise with the Compiler instance.

LANGUAGE: tsx
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Helper Function Implementation
DESCRIPTION: Example implementation of a utility helper function that generates random integers

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Configuring VS Code Launch Settings for Browser Debugging
DESCRIPTION: Configuration for VS Code's launch.json to enable Chrome debugging of Stencil components running on localhost. Includes source map configuration for accurate debugging.

LANGUAGE: json
CODE:
{
  "type": "chrome",
  "request": "launch",
  "name": "Launch Chrome against localhost",
  "url": "http://localhost:3333",
  "sourceMaps": true,
  "sourceMapPathOverrides": {
    "*": "${webRoot}/*"
  }
}

----------------------------------------

TITLE: Setting Up and Running a New Stencil Project
DESCRIPTION: These commands navigate to the project directory, install dependencies, and start the development server for a newly created Stencil project.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Updating TSConfig for Playwright Compatibility
DESCRIPTION: This JSON snippet shows how to update the tsconfig.json file to include the 'ESNext.Disposable' option, which is necessary for resolving build errors related to Symbol.asyncDispose.

LANGUAGE: json
CODE:
{
  "lib": [
    "...",
    "ESNext.Disposable"
  ],
  "..."
}

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: This snippet shows how to configure the 'dist' output target in Stencil's configuration file. It generates a reusable, self-lazy loading component library.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Package.json Exports Configuration
DESCRIPTION: Advanced package.json configuration for component-level exports and types definitions.

LANGUAGE: json
CODE:
{
  "exports": {
    ".": {
      "import": "./dist/components/index.js",
      "types": "./dist/components/index.d.ts"
    },
    "./my-component": {
      "import": "./dist/components/my-component.js",
      "types": "./dist/components/my-component.d.ts"
    }
  },
  "types": "dist/components/index.d.ts"
}

----------------------------------------

TITLE: Using @internal JSDoc Tag to Skip README Generation
DESCRIPTION: This TypeScript snippet shows how to use the @internal JSDoc tag to mark a component as internal, which will prevent README generation for that component.

LANGUAGE: typescript
CODE:
/**
 * @internal
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Generating README Files with Stencil Docs Command
DESCRIPTION: Use the Stencil docs command as an alternative to generate documentation for all output targets.

LANGUAGE: bash
CODE:
npx stencil docs

----------------------------------------

TITLE: JSON Documentation for Event Complex Type
DESCRIPTION: Example of the expanded JSON documentation output for an @Event decorator, including the new complexType field with type information.

LANGUAGE: json
CODE:
{
  "complexType": {
    "original": "ModalBreakpointChangeEventDetail",
    "resolved": "ModalBreakpointChangeEventDetail",
    "references": {
      "ModalBreakpointChangeEventDetail": {
        "location": "import",
        "path": "./modal-interface",
        "id": "src/components/modal/modal.tsx::ModalBreakpointChangeEventDetail"
      }
    }
  }
}

----------------------------------------

TITLE: Running Individual Stencil Tasks
DESCRIPTION: Executes specific tasks with given NodeJS process, Stencil config, and task command. Optionally accepts a compiler system instance.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Using componentOnReady in TypeScript
DESCRIPTION: Example showing how to use the componentOnReady() method to execute code after a component's first render cycle

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Installing Vitest and Dependencies for Stencil Testing
DESCRIPTION: This command installs Vitest, its browser mode, and necessary plugins for testing Stencil components.

LANGUAGE: bash
CODE:
npm install vitest @vitest/browser unplugin-stencil webdriverio

----------------------------------------

TITLE: Configuring Test Scripts in package.json
DESCRIPTION: Example npm scripts configuration for running different types of Stencil tests including unit tests, watch mode, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: React Component Library Package Configuration
DESCRIPTION: Package.json configuration for the React wrapper library including build settings and dependencies

LANGUAGE: json
CODE:
{
  "main": "dist/index.js",
  "module": "dist/index.js",
  "types": "dist/types/index.d.ts",
  "scripts": {
    "test": "node ./__tests__/react-library.test.js",
    "build": "npm run tsc",
    "tsc": "tsc -p . --outDir ./dist"
  },
  "files": [
    "dist"
  ],
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "stencil-library": "*"
  }
}

----------------------------------------

TITLE: Documenting Slots
DESCRIPTION: Use @slot JSDoc tags in the component's JSDoc to describe slots. This information will be included in the generated README.

LANGUAGE: tsx
CODE:
/**
 * @slot - Content is placed between the named slots if provided without a slot.
 * @slot primary - Content is placed to the left of the main slotted-in text.
 * @slot secondary - Content is placed to the right of the main slotted-in text.
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent {
  // ...
  
  render() {
    return (
      <section>
        <slot name="primary"></slot>
        <div class="content">
          <slot></slot>
        </div>
        <slot name="secondary"></slot>
      </section>
    );
  }
}

----------------------------------------

TITLE: Custom Rollup Plugin Configuration in Stencil
DESCRIPTION: Example showing how to configure custom Rollup plugins in Stencil's config file, demonstrating plugin ordering for before and after the built-in plugins.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Using getAssetPath in Stencil Components
DESCRIPTION: Shows how to use getAssetPath utility to resolve local asset paths in a Stencil component

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Documenting Component Properties with JSDoc in TypeScript
DESCRIPTION: Example showing how to add documentation to a Stencil component property using JSDoc comments. The comment describes an optional icon property.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Using Vue Component Wrappers in a Template
DESCRIPTION: This HTML snippet shows how to use the Vue component wrappers in a Vue template.

LANGUAGE: html
CODE:
<template>
  <my-component first="Your" last="Name"></my-component>
</template>

----------------------------------------

TITLE: Implementing hydrateDocument Function in JavaScript
DESCRIPTION: Example showing how to use hydrateDocument for server-side component hydration, taken from Ionic Angular server

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

export function hydrateComponents(doc) {
  return hydrateDocument(doc)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Async Data Fetching in ComponentWillLoad
DESCRIPTION: Example of asynchronous data fetching within componentWillLoad lifecycle method using Promises.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Mocking Files and Modules in WebdriverIO Tests with TypeScript
DESCRIPTION: This example demonstrates how to mock both project files and external modules in WebdriverIO tests. It shows mocking a local utility file and an external 'leftpad' module, as well as using a mocked function.

LANGUAGE: typescript
CODE:
import { mock, fn } from '@wdio/browser-runner'
import { format } from './utils/utils.ts'

// mock files within the project
mock('./utils/utils.ts', () => ({
    format: fn().mockReturnValue(42)
}))
// mock whole modules and replace functionality with what is defined in `./__mocks__/leftpad.ts`
mock('leftpad')

console.log(format()) // returns `42`

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: Command to install the ember-cli-stencil addon for legacy Ember projects using Ember CLI.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: React Component Library Entry File
DESCRIPTION: Entry file configuration for exposing generated React component wrappers

LANGUAGE: typescript
CODE:
export * from './components/stencil-generated/components';

----------------------------------------

TITLE: Installing Lerna for Monorepo Management
DESCRIPTION: Command to globally install Lerna for managing a monorepo structure.

LANGUAGE: bash
CODE:
npm install --global lerna

----------------------------------------

TITLE: Configuring Shadow DOM for a Stencil Component
DESCRIPTION: These examples demonstrate how to enable Shadow DOM encapsulation for a Stencil component, with and without the delegatesFocus option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: true
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: { 
    delegatesFocus: true,
  }
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Configuring Shadow DOM for a Stencil Component
DESCRIPTION: These examples demonstrate how to enable Shadow DOM encapsulation for a Stencil component, with and without the delegatesFocus option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: true
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: { 
    delegatesFocus: true,
  }
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Dynamic Content Test Example
DESCRIPTION: Example of using page.setContent() to test a Stencil component with dynamically generated HTML.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    await page.setContent('<my-component first="Stencil"></my-component>');

    // Rest of test
  });
});

----------------------------------------

TITLE: Correct Component Module Organization - TypeScript
DESCRIPTION: Proper way to organize component code by separating utility functions into their own modules.

LANGUAGE: tsx
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Custom Service Worker Boilerplate
DESCRIPTION: Basic structure for a custom Service Worker file, including Workbox import and precache injection point.

LANGUAGE: javascript
CODE:
// change to the version you get from `npm ls workbox-build`
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Implementing Worker Callbacks in Stencil
DESCRIPTION: Demonstrates how to use callbacks with workers in Stencil for progress updates during long-running tasks.

LANGUAGE: tsx
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

----------------------------------------

TITLE: Exporting Generated Wrappers in Public API
DESCRIPTION: TypeScript code to export the generated Angular component wrappers in the public API file.

LANGUAGE: typescript
CODE:
export * from './lib/component-library.module';
export { DIRECTIVES } from './lib/stencil-generated';
export * from './lib/stencil-generated/components';

----------------------------------------

TITLE: Configuring JSON Docs Output Target in Stencil
DESCRIPTION: Configuration for automatically generating JSON documentation in Stencil projects. This is added to the stencil.config.ts file to create docs on each build.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Creating a Vue Component Library
DESCRIPTION: Commands to create a Vue component library for wrapping Stencil components using Lerna and Vue CLI.

LANGUAGE: bash
CODE:
# From your top-most-directory/
lerna create vue-library
# Follow the prompts and confirm
cd packages/vue-library
# Install Vue dependency
npm install vue@3 --save-dev

----------------------------------------

TITLE: Example Telemetry Event Structure in JavaScript
DESCRIPTION: This snippet shows the structure of a typical telemetry event collected by Stencil. It includes information about the Stencil version, system details, command arguments, and project configuration.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Adding Vitest Script to package.json
DESCRIPTION: This JSON snippet adds a test script to the package.json file to run Vitest tests.

LANGUAGE: json
CODE:
{
    "scripts": {
        "test": "vitest --run"
    },
}

----------------------------------------

TITLE: Node Polyfills Configuration
DESCRIPTION: Configuration example showing how to set up Node polyfills in Stencil's config file to handle Node.js API dependencies.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Setting customElementsExportBehavior in Stencil Config
DESCRIPTION: Example of how to set the customElementsExportBehavior option in the Stencil configuration file to control component export and definition behavior.

LANGUAGE: typescript
CODE:
// stencil.config.ts
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      customElementsExportBehavior: 'default' | 'auto-define-custom-elements' | 'bundle' | 'single-export-module',
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Implementing Prop Watchers in Stencil
DESCRIPTION: Shows how to implement property watchers in a Stencil component to handle changes to object and array props, including parsing string values to objects.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

LANGUAGE: tsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Exporting Generated Vue Component Wrappers
DESCRIPTION: Export the generated Vue component wrappers and plugin to make them available for consumers.

LANGUAGE: typescript
CODE:
export * from './components';
export * from './plugin';

----------------------------------------

TITLE: Configuring Stencil Vue Output Target
DESCRIPTION: Configuration for generating Vue component wrappers from Stencil components.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Loading Stencil Config
DESCRIPTION: Presents the function for loading and transforming raw config information into a usable config object for the compiler and dev-server.

LANGUAGE: typescript
CODE:
loadConfig(init?: LoadConfigInit): Promise<LoadConfigResults>

----------------------------------------

TITLE: Nested Component Directory Structure
DESCRIPTION: Shows the directory structure created when generating a new component in a subfolder within src/components.

LANGUAGE: plain
CODE:
src
└── components
    └── pages
        └── page-home
            ├── page-home.css
            ├── page-home.e2e.ts
            ├── page-home.spec.ts
            └── page-home.tsx

----------------------------------------

TITLE: Functional Component with Children in Stencil
DESCRIPTION: Shows how to create a functional component that handles both props and children elements.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Configuring Custom Rollup Plugins in Stencil
DESCRIPTION: Example of how to configure custom Rollup plugins in the Stencil configuration file, including plugins before node-resolve and after commonjs transform.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Configuring Event Options in Stencil Component
DESCRIPTION: Example showing how to configure event options for custom DOM events including composition, cancellation, and bubbling behavior.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Generating README Files Using Stencil Build Command
DESCRIPTION: These bash commands demonstrate how to use the Stencil build command to generate README files. The --watch flag can be used for automatic updates, and the --docs flag is needed if the docs-readme output target is not configured.

LANGUAGE: bash
CODE:
npx stencil build

LANGUAGE: bash
CODE:
npm stencil build --watch

LANGUAGE: bash
CODE:
npx stencil build --docs

----------------------------------------

TITLE: Webpack Configuration for Custom Elements
DESCRIPTION: This snippet provides an example webpack configuration for consuming Stencil-generated custom elements, including asset handling.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Setting CSP Nonce in Dist Output Target (TypeScript)
DESCRIPTION: This snippet demonstrates how to set a CSP nonce for the Dist output target in a Stencil project. It uses the setNonce function to apply the nonce to all script and style tags.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Managing Array Updates in Stencil Component
DESCRIPTION: Shows how to properly update arrays in Stencil components using immutable operations and the spread operator to trigger component updates and @Watch handlers.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Enabling Warnings for Missing Copy Sources
DESCRIPTION: Configuration example demonstrating how to enable warnings when a copy task source cannot be found. This is useful for identifying issues with specified source paths during the build process.

LANGUAGE: typescript
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Component Hierarchy Example in Stencil
DESCRIPTION: Shows the component hierarchy and the order in which lifecycle methods are called for nested components.

LANGUAGE: markup
CODE:
  <cmp-a>
    <cmp-b>
      <cmp-c></cmp-c>
    </cmp-b>
  </cmp-a>

----------------------------------------

TITLE: Example Stencil Stats JSON Output (JSON)
DESCRIPTION: Provides a detailed example of the JSON structure generated by Stencil's stats feature, including compiler info, app details, build options, and component data.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Importing WebdriverIO Mocking Functions
DESCRIPTION: Shows how to import the core mocking primitives from the WebdriverIO browser runner module for implementing mocks in tests.

LANGUAGE: typescript
CODE:
import { mock, fn, unmock } from '@wdio/browser-runner'

----------------------------------------

TITLE: Setting Asset Path in Stencil Application
DESCRIPTION: Shows how to use the setAssetPath() function to set the path for Stencil to resolve local assets. This is typically done at the application level to define the base path for all asset requests.

LANGUAGE: typescript
CODE:
import { setAssetPath } from '@stencil/core';
setAssetPath(`{window.location.origin}/`);

----------------------------------------

TITLE: Setting Custom Destination for Copy Tasks
DESCRIPTION: This snippet shows how to set a custom destination for copy tasks using the 'dest' property, copying contents from 'src/files/fonts' to 'public/static/web-fonts'.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    dir: 'public',
    copy: [
      { src: 'files/fonts', dest: 'static/web-fonts' }
    ]
  }
]

----------------------------------------

TITLE: Configuring Docs-README Output Target in Stencil
DESCRIPTION: Configuration setup for enabling automatic README generation in a Stencil project

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Setting Destination for Copy Task
DESCRIPTION: This example shows how to set a custom destination for copied files using the 'dest' property in a copy task configuration.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    dir: 'public',
    copy: [
      { src: 'files/fonts', dest: 'static/web-fonts' }
    ]
  }
]

----------------------------------------

TITLE: Defining Testing Configuration Interface in TypeScript for Stencil
DESCRIPTION: This code snippet defines the TestingConfig interface used in Stencil's public compiler. It specifies various options for configuring testing, including Jest settings and Stencil-specific e2e test options.

LANGUAGE: typescript
CODE:
export interface TestingConfig extends JestConfig {
  /**
   * The `allowableMismatchedPixels` value is used to determine an acceptable
   * number of pixels that can be mismatched before the image is considered
   * to have changes. Realistically, two screenshots representing the same
   * content may have a small number of pixels that are not identical due to
   * anti-aliasing, which is perfectly normal. If the `allowableMismatchedPixels`
   * is provided it will override the default value.
   */
  allowableMismatchedPixels?: number;

  /**
   * The `allowableMismatchedRatio` ranges from `0` to `1` and is used to
   * determine an acceptable ratio of pixels that can be mismatched before
   * the image is considered to have changes. Realistically, two screenshots
   * representing the same content may have a small ratio of pixels that are
   * not identical due to anti-aliasing, which is perfectly normal. The value
   * represents the ratio of pixels that are allowed to be mismatched.
   */
  allowableMismatchedRatio?: number;

  /**
   * Matching threshold while comparing two screenshots. Value ranges from `0` to `1`.
   * Smaller values make the comparison more sensitive. The `pixelmatchThreshold`
   * value helps to ignore anti-aliasing. Default: `0.1`
   */
  pixelmatchThreshold?: number;

  /**
   * Whether to generate or compare screenshots when executing e2e tests. Defaults to `true`.
   */
  emulate?: EmulateConfig[];

  /**
   * Path to the Screenshot Connector module.
   */
  screenshotConnector?: string;

  /**
   * Amount of time in milliseconds to wait before a screenshot is taken.
   */
  waitBeforeScreenshot?: number;

  /**
   * Whether to take a screenshot when a test fails. Defaults to `false`.
   */
  screenshotOnFail?: boolean;

  /**
   * Whether to generate or compare screenshots when executing e2e tests. Defaults to `true`.
   */
  compareScreenshot?: boolean;

  /**
   * Inline CSS styles for the test runner HTML page. This allows users to
   * customize the look and feel of the test runner in their project.
   */
  testRunnerHtml?: string;

  /**
   * Maximum allowed time (in milliseconds) for each `plt.flush()`
   * Default: `100`
   */
  maxComponentBuildTimeMs?: number;

  /**
   * Maximum allowed time (in milliseconds) for a page load.
   * Default: `10000`
   */
  maxPageLoadTimeMs?: number;

  /**
   * Maximum number of times a test can call `plt.flush()`
   * Maximum: `1000`
   */
  pltFlushTimeouts?: number;

  /**
   * The browsers which will be used to run the tests. The options are: 'chrome', 'firefox', 'safari'.
   * Example usage: ['chrome', 'firefox']
   */
  browserExecutablePaths?: { [index: string]: string };

  /**
   * The device to emulate. Defaults to 'Pixel 2 XL'.
   */
  device?: string;

  /**
   * Launch Puppeteer in headless mode. Defaults to `true`.
   */
  headless?: boolean;

  /**
   * Path of the browser executable to use for Puppeteer (Chrome or Chromium) instead of the bundled Chromium.
   */
  browserExecutablePath?: string;

  /**
   * Enables hot reloading during testing. Defaults to `false`.
   */
  testHotReload?: boolean;
}

----------------------------------------

TITLE: Asset Resolution Example in TypeScript
DESCRIPTION: Demonstrates how to resolve asset paths using getAssetPath API

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Resetting Stencil Store in Test Environment
DESCRIPTION: Example of how to reset the store state before each test using the dispose() method in a beforeEach hook.

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: Installing Vitest and Dependencies for Stencil Testing
DESCRIPTION: This command installs Vitest, its browser testing plugin, a Stencil integration plugin, and WebdriverIO for browser management.

LANGUAGE: bash
CODE:
npm install vitest @vitest/browser unplugin-stencil webdriverio

----------------------------------------

TITLE: Naming Conventions for Stencil Component HTML Tags
DESCRIPTION: This snippet illustrates the proper naming conventions for Stencil component HTML tags, emphasizing the importance of using a unique prefix and avoiding 'stencil' as a prefix.

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

----------------------------------------

TITLE: Conditional Rendering in JSX
DESCRIPTION: Demonstrates conditional rendering using if/else statements and the ternary operator in JSX.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
    {this.name
      ? <p>Hello {this.name}</p>
      : <p>Hello World</p>
    }
    </div>
  );
}

----------------------------------------

TITLE: Creating Node System for Stencil Compiler
DESCRIPTION: Creates a system instance based on NodeJS APIs for file system operations and crypto functions. Takes the NodeJS process object as input and returns a CompilerSystem instance.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Running Static Build in Stencil
DESCRIPTION: Command to run a static build in Stencil using the --prerender flag. This enables prerendering of components during the build process.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Consuming Generated Custom Elements
DESCRIPTION: This example demonstrates how to import and define a custom element generated by the dist-custom-elements output target. It shows the usage of the defineCustomElement function exported by the generated component file.

LANGUAGE: javascript
CODE:
import { defineCustomElement } from 'my-library/dist/components/hello-world';

defineCustomElement(); // Same as manually calling: customElements.define('hello-world', HelloWorld);

----------------------------------------

TITLE: Advanced Form Handling in Stencil Component
DESCRIPTION: Illustrates a more complex form implementation in a Stencil component. Features multiple input types including email and select inputs, demonstrates form validation, and showcases dynamic option rendering for select elements.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Updating Objects in Stencil Component
DESCRIPTION: This example shows how to update an object in a Stencil component to trigger a re-render. It uses the spread operator to create a new object reference, which is necessary for Stencil to detect the change.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Importing and Initializing Stencil Components
DESCRIPTION: Example showing how to import and initialize Stencil components using the loader utilities, including polyfill application and nonce setting for CSP.

LANGUAGE: typescript
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Package.json Test Script Configuration
DESCRIPTION: Script configuration to run both Stencil and Playwright tests

LANGUAGE: json
CODE:
{
  "scripts": {
    "test.e2e": "stencil test --e2e && playwright test"
  }
}

----------------------------------------

TITLE: Checking Push Subscription Status
DESCRIPTION: Code snippet to check the current push subscription status and handle accordingly.

LANGUAGE: javascript
CODE:
self.registration.pushManager.getSubscription().then(subscription => {
  if (!subscription) {
    // ask the user to register for push
    return;
  }

  // update the database
  console.log(subscription);
});

----------------------------------------

TITLE: Rollup Plugin Configuration for Asset Copying
DESCRIPTION: Shows how to configure Rollup plugins to copy assets in a Stencil project

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Building Static Site with Stencil Prerender Flag
DESCRIPTION: Command to enable prerendering during Stencil build process using the --prerender flag.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Configuring Custom Footer in docs-readme Output Target
DESCRIPTION: Example showing how to customize the footer content in generated README files.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Private Method Implementation
DESCRIPTION: Shows how to implement private methods in a Stencil component that don't require the @Method decorator or async returns.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Toggle Button State Management
DESCRIPTION: Example of combining @State with @Listen decorator to create a toggle button. Shows state management with event handling.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Documenting Component Events
DESCRIPTION: Use @Event() decorator and JSDoc comments to document component events, which will be included in the README.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * Emitted when an event is completed
   */
  @Event() todoCompleted: EventEmitter<number>;
  /**
   * @deprecated
   */
  @Event() todoUndo: EventEmitter<number>;

  // ...
}

----------------------------------------

TITLE: Removed Legacy Context and Connect APIs
DESCRIPTION: Example of deprecated @Prop decorator options that have been removed in Stencil v4.0.0. The 'context' and 'connect' options are no longer supported.

LANGUAGE: typescript
CODE:
@Prop({ context: 'config' }) config: Config;
@Prop({ connect: 'ion-menu-controller' }) lazyMenuCtrl: Lazy<MenuController>;

----------------------------------------

TITLE: Configuring NPM Scripts for Stencil Testing
DESCRIPTION: Example of NPM scripts to run different types of Stencil tests, including unit tests, watched unit tests, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Configuring VS Code Settings for Custom HTML Data
DESCRIPTION: This JSON snippet demonstrates how to configure VS Code to use the generated custom element data file. It adds the file path to the 'html.customData' setting.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Configuring Stencil Dist Output Target
DESCRIPTION: Basic configuration for the dist output target in a Stencil project configuration file.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: CreateSystem Function Signature
DESCRIPTION: Function signature for creating an in-memory compiler system.

LANGUAGE: tsx
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Generating README Files with Stencil Build Command
DESCRIPTION: Use the Stencil build command to generate README files for components. This command can be run with or without the --watch flag.

LANGUAGE: bash
CODE:
npx stencil build

LANGUAGE: bash
CODE:
npm stencil build --watch

----------------------------------------

TITLE: Basic Screenshot Comparison Test in Stencil
DESCRIPTION: Simple example showing how to create a visual regression test using Puppeteer and Stencil's E2E testing utilities. Demonstrates basic component rendering and screenshot comparison.

LANGUAGE: javascript
CODE:
  it('render something', async () => {
    const page: E2EPage = await newE2EPage();
    await page.setContent('<my-cmp></my-cmp>');
    await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
  });

----------------------------------------

TITLE: Executing Individual Stencil Tasks
DESCRIPTION: Runs specific tasks with given NodeJS process, Stencil config, and task command. Optionally accepts a compiler system instance for customized system operations.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Requesting Notification Permissions
DESCRIPTION: Example of requesting permission to show notifications using the Notifications API.

LANGUAGE: javascript
CODE:
if ('Notification' in window && 'serviceWorker' in navigator) {
  Notification.requestPermission(status => {
    // status will either be 'default', 'granted' or 'denied'
    console.log(`Notification permissions have been ${status}`);
  });
}

----------------------------------------

TITLE: React Library TypeScript Configuration
DESCRIPTION: TypeScript configuration for the React component library project with required compiler options

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2015"],
    "module": "esnext",
    "moduleResolution": "bundler",
    "target": "es2015",
    "skipLibCheck": true,
    "jsx": "react",
    "allowSyntheticDefaultImports": true,
    "declarationDir": "./dist/types"
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: Creating Angular Component Library
DESCRIPTION: Commands to generate an Angular workspace and component library using Angular CLI.

LANGUAGE: bash
CODE:
npx -p @angular/cli ng new angular-workspace --no-create-application
cd angular-workspace
npx -p @angular/cli ng generate library component-library

----------------------------------------

TITLE: ScreenshotConnector Interface Definition (TypeScript)
DESCRIPTION: Defines the interface for the ScreenshotConnector class, showing the available methods that can be overridden in a custom connector implementation. These methods control various aspects of the screenshot testing process.

LANGUAGE: typescript
CODE:
export interface ScreenshotConnector {
  initBuild(opts: ScreenshotConnectorOptions): Promise<void>;
  pullMasterBuild(): Promise<ScreenshotBuild>;
  getMasterBuild(): Promise<ScreenshotBuild>;
  getScreenshotCache(): Promise<ScreenshotCache>;
  completeBuild(masterBuild: ScreenshotBuild): Promise<ScreenshotBuildResults>;
  publishBuild(buildResults: ScreenshotBuildResults): Promise<ScreenshotBuildResults>;
  updateScreenshotCache(cache: ScreenshotCache, buildResults: ScreenshotBuildResults): Promise<ScreenshotCache>;
  generateJsonpDataUris?: boolean;
}

----------------------------------------

TITLE: Configuring TypeScript for WebdriverIO and Stencil
DESCRIPTION: JSON configuration to add to tsconfig.json to resolve type clashes between WebdriverIO (Mocha) and Stencil (Jest) by preferring Jest types.

LANGUAGE: json
CODE:
{
  "types": ["jest"]
}

----------------------------------------

TITLE: Installing @stencil/store via npm
DESCRIPTION: Command to install @stencil/store as a dev dependency using npm. This library is used for managing shared state in Stencil applications.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Requesting Notification Permissions
DESCRIPTION: JavaScript code to request notification permissions from the user, which is necessary for push notifications.

LANGUAGE: javascript
CODE:
if ('Notification' in window && 'serviceWorker' in navigator) {
  Notification.requestPermission(status => {
    // status will either be 'default', 'granted' or 'denied'
    console.log(`Notification permissions have been ${status}`);
  });
}

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation in Stencil
DESCRIPTION: This snippet shows how to configure a Stencil project to validate the primary package output target. It sets up a 'dist' output target as the primary one for validation and enables the validation feature.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Registering Custom Elements
DESCRIPTION: TypeScript code showing how to register custom elements during app initialization using Angular's APP_INITIALIZER.

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Creating Usage Examples for Stencil Components
DESCRIPTION: Example of a usage example file for a Stencil component, which will be included in the JSON documentation.

LANGUAGE: md
CODE:
# How to use `my-button`

A button is often a great help in adding interactivity to an app!

You could use it like this:

```html
<my-button>My Button!</my-button>
```

----------------------------------------

TITLE: E2E Test with SpecPage and Mocking
DESCRIPTION: Demonstrates how to implement E2E testing using SpecPage with mocked dependencies.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Node Polyfills Plugin Configuration
DESCRIPTION: Configuration example showing how to set up the rollup-plugin-node-polyfills plugin in Stencil config file.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Consuming Angular Wrapper Components
DESCRIPTION: Import and use the generated Angular component wrappers in an Angular application.

LANGUAGE: typescript
CODE:
// app.module.ts

import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

----------------------------------------

TITLE: Importing Component Library in Vue App
DESCRIPTION: Importing and using the component library plugin in the Vue app's main.js file.

LANGUAGE: javascript
CODE:
import { ComponentLibrary } from 'vue-library';

createApp(App).use(ComponentLibrary).mount('#app');

----------------------------------------

TITLE: Using Element Decorator in Stencil TSX
DESCRIPTION: Demonstrates how to use the Element decorator to access the host element within a component class.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Loading Stencil Components via CDN Script
DESCRIPTION: Demonstrates how to load Stencil components through a CDN using a simple script tag in an HTML page.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Starting Stencil Dev Server in TypeScript
DESCRIPTION: The start() function initializes the Stencil development server. It takes a StencilDevServerConfig object, a Logger, and an optional CompilerWatcher as parameters. The function returns a Promise that resolves to a DevServer instance.

LANGUAGE: typescript
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Reloading App on Service Worker Update
DESCRIPTION: Adds an event listener to reload the app when a new service worker takes control, implemented in a Stencil component's lifecycle method.

LANGUAGE: typescript
CODE:
componentWillLoad() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker
      .getRegistration()
      .then(registration => {
        if (registration?.active) {
          navigator.serviceWorker.addEventListener(
            'controllerchange',
            () => window.location.reload()
          );
        }
      })
  }
}

----------------------------------------

TITLE: Accessing Worker Instance Directly in Stencil
DESCRIPTION: This snippet demonstrates how to access the actual Worker instance in Stencil for manual usage of postMessage() and onmessage. It shows how to import the worker directly using the ?worker query.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';

import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {

  componentWillLoad() {
    worker.postMessage(['send data manually']);

    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: Example of documenting slots in a Stencil component using the @slot JSDoc tag. This allows for clear documentation of the component's slot structure.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Configuring Custom Documentation Footer
DESCRIPTION: Example of adding a custom footer to generated readme files

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Rollup Configuration for Custom Elements
DESCRIPTION: This example shows a Rollup configuration for consuming custom elements. It includes plugins for handling CommonJS modules, CSS, and copying assets from the component library to the output directory.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Setting Document Title in Stencil Prerender Config (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the afterHydrate hook in Stencil's Prerender Config to set the document title based on the URL pathname. It imports PrerenderConfig from @stencil/core and defines a config object with an afterHydrate function.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Using Stencil Components with Props in TSX and HTML
DESCRIPTION: This snippet shows how to use a Stencil component with props in both TSX and HTML contexts.

LANGUAGE: typescript
CODE:
{/* Here we use the component in a TSX file */}
<todo-list name={"Tuesday's To-Do List"}></todo-list>

LANGUAGE: html
CODE:
<!-- Here we use the component in an HTML file -->
<todo-list name="Tuesday's To-Do List"></todo-list>

----------------------------------------

TITLE: Custom Destination Copy Task in Stencil
DESCRIPTION: Shows how to copy files to a custom destination path using both the src and dest properties, copying font files to a specific subdirectory in the build output.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]

----------------------------------------

TITLE: Private Method Implementation
DESCRIPTION: Shows how to implement private component methods that don't require the @Method decorator or async functionality.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Generating JSON Docs via CLI
DESCRIPTION: Command to generate JSON documentation using Stencil CLI

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Initializing Angular Output Target in Stencil Config
DESCRIPTION: Configures the Angular output target in the Stencil config file to generate Angular component wrappers.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: This snippet shows how to add the dist-custom-elements output target to a Stencil project's configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Documenting CSS Variables in Stencil
DESCRIPTION: Example demonstrating how to document CSS custom properties (variables) using JSDoc-style comments. Shows the proper format for documenting CSS variables with descriptions.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: Copy Configuration with Warnings Enabled
DESCRIPTION: Example showing how to enable warnings for copy tasks when source files cannot be found.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Testing Store Reset
DESCRIPTION: Example of how to reset the store state between test cases using the dispose() method.

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: Configuring Individual Page Hydrate Options
DESCRIPTION: Sets hydrate options for individual pages using the hydrateOptions hook in the prerender config.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Defining a Public Method with @Method() Decorator in Stencil
DESCRIPTION: This snippet demonstrates how to use the @Method() decorator to define a public method on a Stencil component. The method is async and can be called directly from the element.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Executing Individual Stencil Tasks
DESCRIPTION: Runs specific tasks with NodeJS process, Stencil config, and task command. Optional system parameter for compiler operations.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Configuring Individual Page Hydrate Options
DESCRIPTION: Sets hydrate options for individual pages using the hydrateOptions hook in the prerender config.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Screenshot Connector Interface (TSX)
DESCRIPTION: Defines the interface for the ScreenshotConnector, listing all methods that can be overridden in a custom connector implementation. These methods control various aspects of the screenshot testing process.

LANGUAGE: tsx
CODE:
export interface ScreenshotConnector {
  initBuild(opts: ScreenshotConnectorOptions): Promise<void>;

  pullMasterBuild(): Promise<void>;

  getMasterBuild(): Promise<ScreenshotBuild>;

  getScreenshotCache(): Promise<ScreenshotCache>;

  completeBuild(masterBuild: ScreenshotBuild): Promise<ScreenshotBuildResults>;
  
  publishBuild(buildResults: ScreenshotBuildResults): Promise<ScreenshotBuildResults>;

  updateScreenshotCache(screenshotCache: ScreenshotCache, buildResults: ScreenshotBuildResults): Promise<ScreenshotCache>;

  generateJsonpDataUris(build: ScreenshotBuild): Promise<void>;
}

----------------------------------------

TITLE: Setting Asset Path for Custom Elements
DESCRIPTION: This snippet shows how to set the asset path for custom elements using the setAssetPath function.

LANGUAGE: javascript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Advanced Form Implementation in Stencil
DESCRIPTION: Demonstrates an advanced form with multiple input types including email and select inputs, array-based options, and form validation using the constraint validation API.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Custom Service Worker Configuration in Stencil
DESCRIPTION: Example of configuring custom service worker settings in Stencil's config file, including additional file types for caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Using Ionic Toggle Component in Ember Template
DESCRIPTION: Example of using an Ionic toggle component in an Ember template file.

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Updating Stencil Test Runner Configuration
DESCRIPTION: Stencil configuration to change the test file matching pattern for the Stencil Test Runner.

LANGUAGE: typescript
CODE:
export config: Config = {
   ...,
   test: {
      // Stencil Test Runner will no longer execute any 'e2e.ts` files
      testRegex: '(/__tests__/.*|(\\.|/)(test|spec)|[//](e2e))\\.[jt]sx?$'
   }
}

----------------------------------------

TITLE: Configuring Scoped CSS for a Stencil Component
DESCRIPTION: Demonstrates how to enable scoped CSS for a Stencil component using the 'scoped' option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  scoped: true
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Handling Service Worker Controller Change in Stencil Component
DESCRIPTION: Example of handling the 'controllerchange' event in a Stencil component to reload the page when a new Service Worker takes over.

LANGUAGE: typescript
CODE:
componentWillLoad() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker
      .getRegistration()
      .then(registration => {
        if (registration?.active) {
          navigator.serviceWorker.addEventListener(
            'controllerchange',
            () => window.location.reload()
          );
        }
      })
  }
}

----------------------------------------

TITLE: Configuring TypeScript for WebdriverIO and Stencil
DESCRIPTION: JSON configuration to add to tsconfig.json to resolve type clashes between WebdriverIO (Mocha) and Stencil (Jest) by preferring Jest types.

LANGUAGE: json
CODE:
  "types": ["jest"]

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil
DESCRIPTION: This snippet shows how to add the docs-readme output target to the Stencil configuration file. It enables automatic generation of readme.md files for components.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { type: 'docs-readme' }
  ]
};

----------------------------------------

TITLE: Setting Nonce for Custom Elements Output in Angular
DESCRIPTION: Shows how to set a nonce for all script and style tags when using the 'dist-custom-elements' output target in an Angular application. It uses the setNonce helper function provided by Stencil.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Component Naming Examples in HTML
DESCRIPTION: Shows correct and incorrect component naming conventions, emphasizing the importance of proper prefixing and semantic naming in web components.

LANGUAGE: markup
CODE:
<stencil-component>
<stnl-component>

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

LANGUAGE: markup
CODE:
<ion-card>
<ion-card-header>
<ion-card-content>

----------------------------------------

TITLE: Documenting @Method() Usage in Stencil
DESCRIPTION: Example of documenting methods in a Stencil component using @Method() decorator and JSDoc comments.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * Scroll by a specified X/Y distance in the component.
   *
   * @param x The amount to scroll by on the horizontal axis.
   * @param y The amount to scroll by on the vertical axis.
   * @param duration The amount of time to take scrolling by that amount.
   * @returns the total distance travelled
   */
  @Method()
  async scrollByPoint(x: number, y: number, duration: number): Promise<number> { /* omitted */ }

  // ...
}

----------------------------------------

TITLE: Initializing Stencil Project with create-stencil CLI
DESCRIPTION: Command to start a new Stencil project using the create-stencil CLI. This command will prompt the user to select a project type and provide a project name.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Host Component as Fragment Example
DESCRIPTION: Shows how to use the Host component to render multiple elements at the root level of a component, functioning similar to a Fragment.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Component Documentation Example
DESCRIPTION: Example of a documented Stencil component with JSDoc comments and decorators

LANGUAGE: typescript
CODE:
/**
 * A simple component for formatting names
 *
 * This component will do some neat things!
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { }

----------------------------------------

TITLE: Defining Prerender Config Object (TypeScript)
DESCRIPTION: Example of how to define the prerender config object in the prerender.config.ts file. It shows the basic structure using the PrerenderConfig interface from @stencil/core.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Complex Template Content in Stencil JSX
DESCRIPTION: Demonstrates how to return multiple top-level elements in the render function using an array or the Fragment component for complex templates.

LANGUAGE: tsx
CODE:
import { Fragment } from '@stencil/core';
...
render() {
  return (<Fragment>
    <div class="container">
      <ul>
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
      </ul>
    </div>

    <div class="another-container">
      ... more html content ...
    </div>
  </Fragment>);
}

----------------------------------------

TITLE: Using React Component Wrappers in a React App
DESCRIPTION: Import and use the generated React component wrappers in a React application. This example shows how to import a component and register custom elements.

LANGUAGE: tsx
CODE:
import './App.css';
import { MyComponent, defineCustomElements } from 'react-library';

defineCustomElements();

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Importing Stencil Compiler in NodeJS
DESCRIPTION: Shows how to import the Stencil compiler module in a NodeJS environment using CommonJS syntax.

LANGUAGE: tsx
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Consuming Angular Wrapper Components in Module-based App
DESCRIPTION: This snippet shows how to import and use the generated Angular wrapper components in a module-based Angular application.

LANGUAGE: typescript
CODE:
import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

----------------------------------------

TITLE: Basic Method Decorator Implementation in Stencil
DESCRIPTION: Demonstrates how to implement a basic public method using the @Method decorator in a Stencil component.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Documenting Stencil Component CSS Custom Properties
DESCRIPTION: Example of documenting CSS custom properties in a Stencil component's CSS file using @prop JSDoc tags.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Creating Angular Component Library
DESCRIPTION: Commands to generate an Angular workspace and library for component wrappers using the Angular CLI.

LANGUAGE: bash
CODE:
npx -p @angular/cli ng new angular-workspace --no-create-application
cd angular-workspace
npx -p @angular/cli ng generate library component-library

----------------------------------------

TITLE: Importing Stencil Core Compiler in NodeJS
DESCRIPTION: Demonstrates how to import the Stencil Core Compiler in a NodeJS environment using CommonJS syntax.

LANGUAGE: javascript
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Typed Functional Component in Stencil
DESCRIPTION: Shows how to use Stencil's FunctionalComponent type to create a typed functional component with defined props.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Creating Usage Examples for Stencil Components
DESCRIPTION: Shows how to create and structure usage examples for Stencil components in markdown format.

LANGUAGE: markdown
CODE:
# How to use `my-button`

A button is often a great help in adding interactivity to an app!

You could use it like this:

```html
<my-button>My Button!</my-button>
```

----------------------------------------

TITLE: Running Visual Regression Tests with Stencil CLI
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison using the Stencil CLI.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Configuring Vue Output Target in Stencil Config
DESCRIPTION: Add the vueOutputTarget configuration to the Stencil config file to generate Vue component wrappers.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Configuring Value Accessor Bindings
DESCRIPTION: TypeScript code showing how to configure value accessor bindings for form components in the Stencil config.

LANGUAGE: typescript
CODE:
const angularValueAccessorBindings: ValueAccessorConfig[] = [
  {
    elementSelectors: ['my-input[type=text]'],
    event: 'myChange',
    targetAttr: 'value',
    type: 'text',
  },
];

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    angularOutputTarget({
      componentCorePackage: 'component-library',
      directivesProxyFile: '{path to your proxy file}',
      valueAccessorConfigs: angularValueAccessorBindings,
    }),
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
  ],
};

----------------------------------------

TITLE: Configuring Stats Generation in Package Scripts (TSX)
DESCRIPTION: Examples of package.json script configurations for generating stats using the --stats flag with optional file path specification.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Basic Screenshot Comparison in Stencil E2E Tests
DESCRIPTION: Simple example of setting up a Stencil end-to-end test with Puppeteer for screenshot comparison. It demonstrates how to create a new E2E page, set content, and compare screenshots.

LANGUAGE: javascript
CODE:
it('render something', async () => {
  const page: E2EPage = await newE2EPage();
  await page.setContent('<my-cmp></my-cmp>');
  await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
});

----------------------------------------

TITLE: Setting Nonce for Dist Output in Angular
DESCRIPTION: Demonstrates how to set a nonce for all script and style tags when using the 'dist' output target in an Angular application. It uses the setNonce helper function provided by Stencil.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Handling Service Worker Updates in Stencil Component
DESCRIPTION: Implements a listener for service worker updates and displays a toast notification with a reload option when an update is available.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    // If there is no waiting registration, this is the first service
    // worker being installed.
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Data Binding in JSX
DESCRIPTION: Shows how to bind dynamic data within JSX using curly braces syntax.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

----------------------------------------

TITLE: Exporting Vue Component Library
DESCRIPTION: File to export generated component wrappers and Vue plugin.

LANGUAGE: typescript
CODE:
export * from './components';
export * from './plugin';

----------------------------------------

TITLE: Configuring docs-custom Output Target in Stencil
DESCRIPTION: Example configuration for setting up the docs-custom output target in a Stencil project. The configuration includes a generator function that receives the JsonDocs data and can implement custom documentation logic.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: CSS Parts in Shadow Components
DESCRIPTION: Implementation of CSS parts for styling shadow DOM elements from outside the component.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Configuring Stencil Stats Output Target in TypeScript
DESCRIPTION: Shows how to add the stats output target to the Stencil configuration file for automatic stats generation with every build.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Node Polyfills Plugin Configuration in TypeScript
DESCRIPTION: Configuration example for adding the rollup-plugin-node-polyfills plugin to the Stencil config file. This is necessary when using dependencies that rely on Node.js APIs.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: Basic configuration for setting up the dist output target in a Stencil project's configuration file.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Installing Angular Output Target
DESCRIPTION: Command to install the Stencil Angular output target as a dev dependency in the Stencil component library.

LANGUAGE: bash
CODE:
npm install @stencil/angular-output-target --save-dev

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: JavaScript code to import all Ionic Framework components into an Ember application

LANGUAGE: javascript
CODE:
import '@ionic/core';

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: This command installs the ember-cli-stencil addon, which is used for integrating Stencil components in older Ember applications.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Defining Object Props in Stencil Component
DESCRIPTION: Demonstrates how to define object and array properties in a Stencil component using the @Prop decorator.

LANGUAGE: tsx
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Running Stencil CLI with Options
DESCRIPTION: Executes the Stencil CLI with given options. This function is used by Stencil's default bin/stencil file but can also be used externally for custom implementations.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Basic State Management in Stencil Component
DESCRIPTION: Demonstrates basic usage of @State() decorator to manage a component's internal state for displaying current time.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Asset Directory Configuration
DESCRIPTION: Example showing how to configure and use asset directories in a Stencil component for static file management.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Asset Directory Configuration
DESCRIPTION: Example showing how to configure and use asset directories in a Stencil component for static file management.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Rendering Basic JSX in Stencil Component
DESCRIPTION: Demonstrates the basic structure of a Stencil component's render function using JSX to output HTML elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Documenting @Prop() Usage in Stencil Components
DESCRIPTION: Example of documenting properties using @Prop() decorator and JSDoc comments, which will be reflected in the generated README.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * The first name
   */
  @Prop() first!: string; // the '!' denotes a required property
  /**
   * @deprecated since v2.1.0
   */
  @Prop() middle: string;
  @Prop() lastName = "Smith";

  // ...
}

----------------------------------------

TITLE: Using Custom JSDoc Tags in Stencil
DESCRIPTION: Example of using custom JSDoc tags in component documentation

LANGUAGE: typescript
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Documenting Shadow Parts in Stencil Components
DESCRIPTION: This TypeScript snippet shows how to document shadow parts using the @part JSDoc tag. The generated README will include a table describing the available shadow parts.

LANGUAGE: typescript
CODE:
/**
 * @part label - The label text describing the component.
 */
@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  // ...

  render() {
    return (
      <div part="label">
        <slot></slot>
      </div>
    );
  }
}

----------------------------------------

TITLE: Configuring Stencil Output Target for Distribution
DESCRIPTION: This snippet shows how to configure the 'dist' output target in Stencil. It generates the component(s) as a reusable library that can be self-lazy loading.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Updating React Library Package Configuration
DESCRIPTION: Modifications to the package.json file of the React component library to correctly specify entry points and build scripts.

LANGUAGE: json
CODE:
{
  "main": "dist/index.js",
  "module": "dist/index.js",
  "types": "dist/types/index.d.ts",
  "scripts": {
    "test": "node ./__tests__/react-library.test.js",
    "build": "npm run tsc",
    "tsc": "tsc -p . --outDir ./dist"
  },
  "files": [
    "dist"
  ],
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "stencil-library": "*"
  }
}

----------------------------------------

TITLE: Basic Event Listening in Stencil
DESCRIPTION: Shows how to listen to DOM events using the @Listen decorator in a Stencil component.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Using CLI Flag for One-Time Docs Generation in Stencil
DESCRIPTION: This command demonstrates how to use the --docs CLI flag with stencil build to perform a one-time generation of README files using the docs-readme output target.

LANGUAGE: bash
CODE:
stencil build --docs

----------------------------------------

TITLE: Basic Ionic Component Usage in Ember
DESCRIPTION: Example of using an Ionic toggle component in an Ember template

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Updating Stencil Core
DESCRIPTION: Command to update Stencil core to the latest version.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Defining Testing Configuration Interface in TypeScript
DESCRIPTION: TypeScript interface definition for Stencil's testing configuration that extends Jest's config. Includes settings for screenshot comparison, browser behavior control, and device emulation for E2E testing.

LANGUAGE: typescript
CODE:
export interface TestingConfig extends JestConfig {
  /**
   * The `allowableMismatchedPixels` value is used to determine an acceptable
   * number of pixels that can be mismatched before the image is considered
   * to have changes. Realistically, two screenshots representing the same
   * content may have a small number of pixels that are not identical due to
   * anti-aliasing, which is perfectly normal. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedPixels?: number;

  /**
   * The `allowableMismatchedRatio` ranges from `0` to `1` and is used to
   * determine an acceptable ratio of pixels that can be mismatched before
   * the image is considered to have changes. Realistically, two screenshots
   * representing the same content may have a small number of pixels that
   * are not identical due to anti-aliasing, which is perfectly normal. The
   * `allowableMismatchedRatio` is the number of pixels that were mismatched,
   * divided by the total number of pixels in the screenshot. For example,
   * a ratio value of `0.06` means 6% of the pixels can be mismatched before
   * the image is considered to have changes. If the `allowableMismatchedRatio`
   * is provided it will take precedence, otherwise `allowableMismatchedPixels`
   * will be used.
   */
  allowableMismatchedRatio?: number;

  /**
   * Matching threshold while comparing two screenshots. Value ranges from `0` to `1`.
   * Smaller values make the comparison more sensitive. The `pixelmatchThreshold`
   * value helps to ignore anti-aliasing. Default: `0.1`
   */
  pixelmatchThreshold?: number;

  /**
   * Additional arguments to pass to the browser instance.
   */
  browserArgs?: string[];

  /**
   * Path to a Chromium or Chrome executable to run instead of the bundled Chromium.
   */
  browserExecutablePath?: string;

  /**
   * Whether to run browser e2e tests in headless mode.
   *
   * `headless` is an argument passed through to Puppeteer (which is passed to Chrome) for
   * end-to-end testing. Prior to Chrome v112, `headless` was treated like a boolean flag.
   * Starting with Chrome v112, 'new' is an accepted option to support Chrome's new
   * headless mode.
   *
   * The following values are accepted:
   * - "new" - enables the "new" headless mode, starting with Chrome 112
   * - `true` - enables the "old" headless mode, prior to Chrome 112
   * - `false` - enables the "headful" mode
   *
   * Stencil will default to `true` (the old headless mode) if no value is provided.
   *
   * In the future, Chrome will enable the new headless mode by default, even when `true`
   * is provided.
   *
   * {@see https://developer.chrome.com/articles/new-headless/}
   */
  browserHeadless?: boolean;

  /**
   * Whether to auto-open a DevTools panel for each tab.
   * If this option is true, the headless option will be set false
   */
  browserDevtools?: boolean;

  /**
   * Slows down e2e browser operations by the specified amount of milliseconds.
   * Useful so that you can see what is going on.
   */
  browserSlowMo?: number;

  /**
   * Array of browser emulations to be used during _screenshot_ tests. A full screenshot
   * test is run for each emulation.
   * 
   * To emulate a device display for your e2e tests, use the `setViewport` method on a test's E2E page.
   */
  emulate?: EmulateConfig[];

  /**
   * Path to the Screenshot Connector module.
   */
  screenshotConnector?: string;
}

export interface EmulateConfig {
  /**
   * Predefined device descriptor name, such as "iPhone X" or "Nexus 10".
   * For a complete list please see: https://github.com/puppeteer/puppeteer/blob/main/src/DeviceDescriptors.ts
   */
  device?: string;

  /**
   * User-Agent to be used. Defaults to the user-agent of the installed Puppeteer version.
   */
  userAgent?: string;

  viewport?: EmulateViewport;
}


export interface EmulateViewport {

  /**
   * Page width in pixels.
   */
  width: number;

  /**
   * page height in pixels.
   */
  height: number;

  /**
   * Specify device scale factor (can be thought of as dpr). Defaults to 1.
   */
  deviceScaleFactor?: number;

  /**
   * Whether the meta viewport tag is taken into account. Defaults to false.
   */
  isMobile?: boolean;

  /**
   * Specifies if viewport supports touch events. Defaults to false
   */
  hasTouch?: boolean;

  /**
   * Specifies if viewport is in landscape mode. Defaults to false.
   */
  isLandscape?: boolean;

}

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil Config
DESCRIPTION: This snippet shows how to add the dist-custom-elements output target to a Stencil project's configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Global Script Configuration Example
DESCRIPTION: Example of how to export a default function in a global script that runs before the app loads.

LANGUAGE: javascript
CODE:
export default function() {
  initServerConnection();
}

----------------------------------------

TITLE: Copy Task Configuration in Stencil Config
DESCRIPTION: Configuration example showing how to set up copy tasks in Stencil to move assets to the distribution directory.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
};

----------------------------------------

TITLE: Implementing Prop Watchers in Stencil
DESCRIPTION: Implementation of prop watchers in a Stencil component to handle changes to object and array properties.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

LANGUAGE: tsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Importing Hydrate Function
DESCRIPTION: Example of importing the hydrateDocument function from a published package

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Importing Lazy-Loaded Stencil Components via Script Tag
DESCRIPTION: Demonstrates how to import a Stencil component library using a script tag for lazy loading.

LANGUAGE: html
CODE:
<script type="module" src="https://unpkg.com/my-design-system"></script>

----------------------------------------

TITLE: Using a Stencil Component in HTML
DESCRIPTION: Example of how to use a custom Stencil component in HTML markup, demonstrating the usage of component properties.

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Screenshot Connector Interface Definition
DESCRIPTION: TypeScript interface definition showing all available methods that can be implemented in a custom screenshot connector.

LANGUAGE: typescript
CODE:
export interface ScreenshotConnector {
  initBuild(opts: ScreenshotConnectorOptions): Promise<void>;

  pullMasterBuild(): Promise<void>;

  getMasterBuild(): Promise<ScreenshotBuild>;

  getScreenshotCache(): Promise<ScreenshotCache>;

  completeBuild(masterBuild: ScreenshotBuild): Promise<ScreenshotBuildResults>;
  
  publishBuild(buildResults: ScreenshotBuildResults): Promise<ScreenshotBuildResults>;

  updateScreenshotCache(screenshotCache: ScreenshotCache, buildResults: ScreenshotBuildResults): Promise<ScreenshotCache>;

  generateJsonpDataUris(build: ScreenshotBuild): Promise<void>;
}

----------------------------------------

TITLE: Starting Stencil Dev Server in TypeScript
DESCRIPTION: The start() function initializes the Stencil Dev Server. It takes a StencilDevServerConfig object, a Logger instance, and an optional CompilerWatcher as parameters. The function returns a Promise that resolves to a DevServer instance.

LANGUAGE: typescript
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Example Stencil Stats JSON Output
DESCRIPTION: Provides a comprehensive example of the JSON structure generated by the Stencil stats feature. It includes details about the compiler, app configuration, components, and various output formats.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Test Implementation with File-based Mock in TypeScript
DESCRIPTION: Test file showing how to use a file-based mock implementation

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Configuring Node Debugging in VS Code for Stencil Prerender
DESCRIPTION: Launch configuration for debugging Stencil's prerender process in Node.js environment with source maps and worker limitations.

LANGUAGE: json
CODE:
{
  "type": "node",
  "request": "launch",
  "name": "Prerender",
  "args": [
    "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
    "prerender",
    "${workspaceFolder}/dist/hydrate/index.js",
    "--max-workers=0",
    "--config=${workspaceFolder}/stencil.config.ts"
  ],
  "protocol": "inspector"
}

----------------------------------------

TITLE: Basic State Implementation in Stencil Component
DESCRIPTION: Demonstrates basic usage of @State() decorator to manage current time in a component. Shows how to import State, declare a state variable, and use it in rendering.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Generating Stencil Component via CLI
DESCRIPTION: Command to generate a new Stencil component using the CLI generator command. This creates a component with the specified name in the src/components directory.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Basic Ionic Component Usage in Ember
DESCRIPTION: Example of using an Ionic toggle component in an Ember template

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Defining a Stencil Component with a Method
DESCRIPTION: Example of a Stencil component 'Foo' with a method 'bar' that uses the 'getRandomInt' helper function. This component is used to demonstrate mocking in E2E tests.

LANGUAGE: tsx
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Dynamic State Updates with Lifecycle Methods
DESCRIPTION: Enhanced example showing how to update @State() decorated properties using component lifecycle methods. Implements a live-updating clock with proper cleanup.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Configuring Stencil Output Target for Hydration
DESCRIPTION: Configuration example showing how to add the dist-hydrate-script output target to stencil.config.ts

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Using Vue Component Library in main.js
DESCRIPTION: Importing and using the Vue component library plugin in the main Vue app file.

LANGUAGE: javascript
CODE:
import { ComponentLibrary } from 'vue-library';

createApp(App).use(ComponentLibrary).mount('#app');

----------------------------------------

TITLE: Example Stats JSON Output Structure (JSON)
DESCRIPTION: Illustrates the structure and content of the generated JSON file, including compiler information, app details, build options, component data, and dependency graphs.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Specifying Custom Output Directory for README Files
DESCRIPTION: Change the output directory for generated README files by setting the dir property in the output target configuration.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      dir: 'output'
    }
  ]
};

----------------------------------------

TITLE: Configuring Prerender Debug Options in Stencil
DESCRIPTION: This TypeScript configuration for Stencil's prerender process disables URL crawling, sets specific entry URLs, and enables runtime logging for debugging purposes.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: VS Code Settings Configuration for Custom HTML Data
DESCRIPTION: JSON configuration for VS Code settings to enable custom element support. This setting tells VS Code where to find the generated custom elements data file.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Accessing Platform-Independent Path Utility
DESCRIPTION: Demonstrates how to access the platform-independent path utility provided by the Stencil Compiler, which is based on the POSIX version of the NodeJS path API.

LANGUAGE: typescript
CODE:
path: PlatformPath

----------------------------------------

TITLE: Jest Test with Inline Mock Factory
DESCRIPTION: Test implementation using Jest's mock functionality with an inline mock factory function

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: Example of documenting slots using the @slot JSDoc tag in a component's TypeScript file. This shows how to annotate slots for documentation.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Root TypeScript Configuration
DESCRIPTION: Base TypeScript configuration file for the monorepo root directory.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Default Exports in Standalone Stencil Components
DESCRIPTION: Default exports in the index.js file for standalone Stencil components.

LANGUAGE: javascript
CODE:
export { setAssetPath, setPlatformOptions } from '@stencil/core/internal/client';

----------------------------------------

TITLE: Configuring docs-custom Output Target in Stencil (TSX)
DESCRIPTION: This snippet demonstrates how to add the docs-custom output target to your Stencil configuration. It allows you to access the generated docs JSON data and implement custom logic for documentation generation.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Prop Options in Stencil
DESCRIPTION: Covers the various options available for configuring props in Stencil components.

LANGUAGE: typescript
CODE:
export interface PropOptions {
  attribute?: string;
  mutable?: boolean;
  reflect?: boolean;
}

----------------------------------------

TITLE: Conditional Rendering
DESCRIPTION: Shows different approaches to conditional rendering in JSX using if/else statements and ternary operators.

LANGUAGE: tsx
CODE:
render() {
  if (this.name) {
    return ( <div>Hello {this.name}</div> )
  } else {
    return ( <div>Hello, World</div> )
  }
}

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
    {this.name
      ? <p>Hello {this.name}</p>
      : <p>Hello World</p>
    }
    </div>
  );
}

----------------------------------------

TITLE: Importing Stencil Core Compiler in NodeJS
DESCRIPTION: Demonstrates how to import the Stencil Core Compiler in a NodeJS environment using CommonJS.

LANGUAGE: tsx
CODE:
// NodeJS (commonjs)
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Importing Stencil Core Compiler in NodeJS
DESCRIPTION: Demonstrates how to import the Stencil Core Compiler in a NodeJS environment using CommonJS.

LANGUAGE: tsx
CODE:
// NodeJS (commonjs)
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Configuring Angular Output Target in Stencil Config
DESCRIPTION: TypeScript code showing how to configure the Angular output target in the Stencil configuration file.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3.1.0
DESCRIPTION: Configuration example showing how to enable path alias transformation in Stencil v3.1.0 config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class
DESCRIPTION: Basic implementation of a custom screenshot connector by extending the base ScreenshotConnector class from Stencil core.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Setting Nonce for Custom Elements Output in Angular
DESCRIPTION: Shows how to use the setNonce helper function to set the nonce attribute for all script and style tags when using the dist-custom-elements output target in an Angular application.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Running Visual Regression Tests in Stencil
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison functionality in Stencil.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Implementing Test Skip Functions
DESCRIPTION: Shows how to use the skip function to conditionally skip tests based on browser type or component mode.

LANGUAGE: typescript
CODE:
test('my-test', ({ page, skip }) => {
    // Skip tests for certain browsers
    skip.browser('firefox', 'This behavior is not available on Firefox');

    // Skip tests for certain modes
    skip.mode('md', 'This behavior is not available in Material Design');

    ...
})

----------------------------------------

TITLE: Updating Vite Config for Custom Elements
DESCRIPTION: Configuration changes in vite.config.ts to support custom elements in the Vue app.

LANGUAGE: typescript
CODE:
export default defineConfig({
  plugins: [
    vue({
      template: {
        compilerOptions: {
          isCustomElement: (tag) => tag.includes('-'),
        },
      },
    }),
    vueJsx(),
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  }
})

----------------------------------------

TITLE: Component Documentation Examples
DESCRIPTION: Examples showing how to document components using JSDoc annotations for properties, events, and methods

LANGUAGE: typescript
CODE:
/**
 * A simple component for formatting names
 *
 * This component will do some neat things!
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent {
  /**
   * The first name
   */
  @Prop() first!: string;

  /**
   * @deprecated since v2.1.0
   */
  @Prop() middle: string;
  
  @Prop() lastName = "Smith";
}

----------------------------------------

TITLE: Configuring VS Code Settings for Custom HTML Data
DESCRIPTION: This JSON snippet demonstrates how to configure VS Code to use the generated custom data file. It adds the path to the generated JSON file in the 'html.customData' setting.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Initializing and Communicating with a Vanilla Web Worker in JavaScript
DESCRIPTION: Demonstrates how to create a new Web Worker instance and set up basic message passing between the main thread and the worker thread using the vanilla Web Worker API.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Importing Ionic Components
DESCRIPTION: JavaScript code to import all components from the Ionic Framework into an Ember application

LANGUAGE: javascript
CODE:
import '@ionic/core';

----------------------------------------

TITLE: Testing Component Class Logic in TypeScript
DESCRIPTION: Demonstrates direct testing of component class methods by instantiating the component class and testing its logic in isolation.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Rendering Basic JSX in Stencil Component
DESCRIPTION: Demonstrates the basic structure of a Stencil component using JSX to render a simple div with heading and paragraph elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Stateful Ionic Component Integration
DESCRIPTION: Complete example of an Ember component implementing controlled component pattern with Ionic toggle, including state management and event handling

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Generating a Stencil Component in Subdirectory
DESCRIPTION: Shows how to generate a Stencil component in a subdirectory using the CLI. This command creates a component named 'page-home' in the src/components/pages directory.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Creating a Form-Associated Stencil Component
DESCRIPTION: This example shows how to create a minimal form-associated Stencil component using the 'formAssociated' option.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Setting Up Stencil Project
DESCRIPTION: Commands to set up a new Stencil project after creation. These commands change to the project directory, install dependencies, and start the development server.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation in Stencil
DESCRIPTION: This snippet shows how to configure a Stencil project to validate the primary package output target. It sets the 'dist' output target as the primary one for validation and enables the validation feature.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Documenting Stencil @Prop Decorator Usage
DESCRIPTION: Example of using @Prop decorator in a Stencil component with JSDoc comments for documentation.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * The first name
   */
  @Prop() first!: string; // the '!' denotes a required property
  /**
   * @deprecated since v2.1.0
   */
  @Prop() middle: string;
  @Prop() lastName = "Smith";

  // ...
}

----------------------------------------

TITLE: Configuring Rollup for Asset Copying in Stencil
DESCRIPTION: Shows how to use the rollup-plugin-copy NPM module in Stencil's config to copy asset files to the distribution directory during build.

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Enabling Warnings for Copy Tasks
DESCRIPTION: This example demonstrates how to enable warnings for copy tasks when the source file or directory cannot be found by setting the 'warn' option to true.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist',
    copy: [
      { src: 'fonts', warn: true }
    ]
  }
]

----------------------------------------

TITLE: Mocking Library Example in TypeScript
DESCRIPTION: Example of mocking a node module by creating a mock implementation in the __mocks__ directory

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Using WebdriverIO Matchers for Assertions in Stencil Unit Tests
DESCRIPTION: Illustrates the recommended use of WebdriverIO-specific matchers for assertions in Stencil unit tests. It compares a synchronous assertion with a WebdriverIO matcher, highlighting the benefits of using WebdriverIO matchers for improved test resilience.

LANGUAGE: typescript
CODE:
// Not recommended
expect(await $('my-component').getText())
    .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)

// Recommended
await expect($('my-component'))
    .toHaveText(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)

----------------------------------------

TITLE: Specifying Output Directory for Stencil Docs-Readme
DESCRIPTION: This configuration example demonstrates how to change the output directory for generated readme files using the dir property in the docs-readme output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme',
      dir: 'output'
    }
  ]
};

----------------------------------------

TITLE: Configuring Stencil Test Patterns
DESCRIPTION: Stencil configuration to specify test file patterns

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // ...
  testing: {
    testRegex: '(/__tests__/.*|\.?(spec))\\.(ts|js)$',
  },
};

----------------------------------------

TITLE: Removed Legacy Context and Connect APIs
DESCRIPTION: Example of deprecated @Prop decorator options that have been removed in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
@Prop({ context: 'config' }) config: Config;
@Prop({ connect: 'ion-menu-controller' }) lazyMenuCtrl: Lazy<MenuController>;

----------------------------------------

TITLE: Using Functional Component with Props
DESCRIPTION: Shows how to use a functional component by passing props as attributes.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Setting Asset Path for Custom Elements in JavaScript
DESCRIPTION: This snippet shows how to set the asset path for custom elements using the setAssetPath function in a JavaScript file.

LANGUAGE: javascript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Global Script Export in JavaScript
DESCRIPTION: An example of exporting a default function in a global script file. This function runs once before the library/app loads and can be used for initialization tasks.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: HTML Script Setup with setAssetPath
DESCRIPTION: Example of setting up assets path in HTML using script tags and setAssetPath

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Incorrect Component Module Structure in TypeScript
DESCRIPTION: Example of an invalid component module structure where additional exports are present alongside the component class.

LANGUAGE: typescript
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Using renderToString for HTML String Hydration
DESCRIPTION: This example illustrates how to use the renderToString function to hydrate an HTML string and customize the output using configuration options.

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(
  `<my-component first=\"Stencil\" last=\"'Don't call me a framework' JS\"></my-component>`,
  {
    fullDocument: false,
    serializeShadowRoot: 'declarative-shadow-dom',
    prettyHtml: true,
  }
);

console.log(results.html);

----------------------------------------

TITLE: Configuring Package.json for Combined Test Execution
DESCRIPTION: JSON snippet showing how to set up an NPM script in package.json to run both Stencil and WebdriverIO tests sequentially.

LANGUAGE: json
CODE:
{
    "scripts:": {
        "test.e2e": "stencil test && wdio run wdio.conf.ts"
    }
}

----------------------------------------

TITLE: Loading Stencil Configuration
DESCRIPTION: Displays the function signature for loadConfig(), used to transform raw config information into a usable config object for the compiler and dev-server.

LANGUAGE: typescript
CODE:
loadConfig(init?: LoadConfigInit): Promise<LoadConfigResults>

----------------------------------------

TITLE: Global Script Configuration
DESCRIPTION: Example of configuring a global script that runs before the library/app loads.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: Illustrating TypeScript Class Naming for Stencil Components
DESCRIPTION: This code snippet shows how to properly name TypeScript classes for Stencil components without using prefixes, as classes are scoped and don't risk collision.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-button'
})
export class Button { ... }

@Component({
  tag: 'ion-menu'
})
export class Menu { ... }

----------------------------------------

TITLE: Creating a Basic Stencil Component in TypeScript
DESCRIPTION: Example of a basic Stencil component written in TypeScript. This component demonstrates the use of the @Component decorator, props, and rendering.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Basic Usage of @State() Decorator in Stencil
DESCRIPTION: Demonstrates how to use the @State() decorator to mark a class member for rerendering when its value changes. This example shows a simple CurrentTime component that updates and displays the current time.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Using @deprecated JSDoc Tag for Component Deprecation
DESCRIPTION: This snippet demonstrates how to use the @deprecated JSDoc tag to mark a component as deprecated, which will be reflected in the generated README.

LANGUAGE: typescript
CODE:
/**
 * @deprecated since v2.0.0
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Installing Legacy Ember Stencil Integration
DESCRIPTION: Command to install the legacy ember-cli-stencil addon for older Ember applications

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Service Implementation Using Utility Function
DESCRIPTION: Demonstrates a service that utilizes the getRandomInt helper function.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project by configuring the '@stencil/sass' plugin in the Stencil configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Git Repository Initialization
DESCRIPTION: Commands to initialize a new git repository for a Stencil project

LANGUAGE: bash
CODE:
$ git init
$ git add -A
$ git commit -m "initialize project using stencil cli"

----------------------------------------

TITLE: Defining NPM Script for Running Stencil and WebdriverIO Tests
DESCRIPTION: Package.json script configuration to run both Stencil and WebdriverIO tests sequentially, starting with Stencil tests for faster execution.

LANGUAGE: json
CODE:
{
    "scripts:": {
        "test.e2e": "stencil test && wdio run wdio.conf.ts"
    }
}

----------------------------------------

TITLE: Example Stats JSON Output Structure
DESCRIPTION: Comprehensive example of the JSON data structure generated by the stats feature, including compiler information, app details, component metadata, and build configuration.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [],
    "es5": [],
    "system": [],
    "commonjs": []
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        }
      ]
    }
  ],
  "entries": [
    {
      "cmps": [],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Retrieving Stencil Core Version
DESCRIPTION: Shows how to access the current version of @stencil/core used by the compiler.

LANGUAGE: typescript
CODE:
version: string

----------------------------------------

TITLE: Handling Keyboard Events in Stencil Components
DESCRIPTION: Demonstrates how to listen for keyboard events in a Stencil component using the @Listen() decorator and checking the event's 'key' property.

LANGUAGE: tsx
CODE:
@Listen('keydown')
handleKeyDown(ev: KeyboardEvent){
  if (ev.key === 'ArrowDown'){
    console.log('down arrow pressed')
  }
}

----------------------------------------

TITLE: VS Code Settings Configuration for Custom HTML Data
DESCRIPTION: JSON configuration for VS Code settings to enable custom element support. This setting tells VS Code where to find the generated custom data file for enhanced HTML editing features.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Running Stencil CLI with Options
DESCRIPTION: Executes the CLI with given options. This function is used by Stencil's default bin/stencil file but can also be used externally.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Customizing README Footer in Stencil Configuration
DESCRIPTION: Add a custom footer to generated README files by specifying the footer property in the output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Configuring Custom Footer in Stencil Docs-Readme Output
DESCRIPTION: Add a custom footer to the generated README files by specifying the 'footer' property in the output target configuration.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Importing Hydrate Functions in Node.js
DESCRIPTION: Import the necessary hydrate functions from the generated package for use in a Node.js server.

LANGUAGE: javascript
CODE:
import { createWindowFromHtml, hydrateDocument, renderToString, streamToString } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Invalid Component Export in TypeScript
DESCRIPTION: An example of an invalid component export in Stencil, where additional functions are exported alongside the component class.

LANGUAGE: typescript
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: This code demonstrates how to install all components from the Ionic Framework in an Ember application's main JavaScript file.

LANGUAGE: javascript
CODE:
import '@ionic/core'; // installs all the components from Ionic Framework

----------------------------------------

TITLE: Auto-defining Standalone Components
DESCRIPTION: Demonstrates how to import and auto-define standalone components when using the 'auto-define-custom-elements' option.

LANGUAGE: typescript
CODE:
import 'my-design-system/my-component'

----------------------------------------

TITLE: Running Individual Stencil CLI Tasks
DESCRIPTION: Executes individual CLI tasks given a NodeJS process, Stencil config, and task command. An optional system interface can be provided for compiler operations.

LANGUAGE: typescript
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Retrieving Stencil Core Version
DESCRIPTION: Shows how to access the current version of @stencil/core.

LANGUAGE: typescript
CODE:
version: string

----------------------------------------

TITLE: Configuring Stencil Custom Docs Generator
DESCRIPTION: Configuration example showing how to set up the docs-custom output target in Stencil. The configuration accepts a generator function that receives the JSON documentation data and can be used to implement custom documentation logic.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: E2E Test Using page.setContent() in Stencil Playwright
DESCRIPTION: Shows how to write an end-to-end test using the page.setContent() method to define inline HTML content for a Stencil component test.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    await page.setContent('<my-component first="Stencil"></my-component>');

    // Rest of test
  });
});

----------------------------------------

TITLE: Documenting Component Properties in TypeScript/JSX
DESCRIPTION: Example showing how to add documentation to Stencil component properties using JSDoc comments with the @Prop decorator.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Testing Stencil Component Class Logic
DESCRIPTION: Example of direct component class testing by instantiating the component and testing its methods and properties without rendering.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Component Documentation Examples
DESCRIPTION: Example of documenting a Stencil component with overview, props, events and methods

LANGUAGE: typescript
CODE:
/**
 * A simple component for formatting names
 *
 * This component will do some neat things!
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent {
  /**
   * The first name
   */
  @Prop() first!: string;
  
  /**
   * Emitted when an event is completed
   */
  @Event() todoCompleted: EventEmitter<number>;
  
  /**
   * Scroll by a specified X/Y distance
   */
  @Method()
  async scrollByPoint(x: number, y: number): Promise<number> { /* ... */ }
}

----------------------------------------

TITLE: Enabling Code Coverage in Stencil Tests
DESCRIPTION: Example of how to enable code coverage when running Stencil tests. This command uses the '--coverage' flag to generate a code coverage report for unit tests.

LANGUAGE: sh
CODE:
# enable code coverage
npx stencil test --spec --coverage

----------------------------------------

TITLE: Parsing Command-line Arguments for Stencil CLI in TypeScript
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object for use in the Stencil CLI. It takes an array of strings as input, typically obtained from process.argv.slice(2).

LANGUAGE: typescript
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Handling Push Events in Service Worker (JavaScript)
DESCRIPTION: Service Worker code to handle incoming push events and display notifications.

LANGUAGE: javascript
CODE:
self.addEventListener('push', event => {
  console.log(`Push received with data "${event.data.text()}"`);

  const title = 'Push Notification';
  const options = {
    body: `${event.data.text()}`,
    data: { href: '/users/donald' },
    actions: [
      { action: 'details', title: 'Details' },
      { action: 'dismiss', title: 'Dismiss' },
    ],
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class (JavaScript)
DESCRIPTION: Demonstrates how to create a custom screenshot connector by extending the base ScreenshotConnector class from Stencil. This allows for customization of the screenshot testing process.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Initializing a Lerna Workspace
DESCRIPTION: Commands to initialize a Lerna workspace and install necessary dependencies.

LANGUAGE: bash
CODE:
# From your top-most-directory/, initialize a workspace
lerna init

# install dependencies
npm install

# install typescript and node types
npm install typescript @types/node --save-dev

----------------------------------------

TITLE: Using @deprecated JSDoc Tag for Component Deprecation
DESCRIPTION: This snippet demonstrates how to use the @deprecated JSDoc tag to mark a component as deprecated, which will be reflected in the generated README.

LANGUAGE: typescript
CODE:
/**
 * @deprecated since v2.0.0
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Configuring Copy Tasks for WWW Output Target
DESCRIPTION: This example demonstrates how to configure copy tasks for the 'www' output target in Stencil. It shows how to copy an entire directory from 'src/images' to 'www/images'.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    copy: [
      { src: 'images' }
    ]
  }
]

----------------------------------------

TITLE: Semantic Version Format in Markdown
DESCRIPTION: Demonstrates the format of Semantic Versioning using inline code blocks, showing the major.minor.patch structure.

LANGUAGE: markdown
CODE:
major.minor.patch

----------------------------------------

TITLE: Customizing Playwright Test File Matching
DESCRIPTION: Modifies the Playwright config to match a different test file pattern, allowing coexistence with existing Stencil Test Runner setups.

LANGUAGE: typescript
CODE:
export default createConfig({
  // Example: match all test files with the 'e2e.playwright.ts' naming convention
  testMatch: '*.e2e.playwright.ts',
});

----------------------------------------

TITLE: Advanced Worker Usage in Stencil
DESCRIPTION: Shows advanced patterns for direct worker access and manual worker management.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);
    const result = await sum(1, 2);
    console.log(result);
  }
}

----------------------------------------

TITLE: Customizing Document Title in Stencil Prerender Config (TSX)
DESCRIPTION: This snippet demonstrates how to use the afterHydrate hook in Stencil's Prerender Config to set the document title based on the URL pathname. It utilizes the Document and URL objects provided by the hook.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Installing Ionic Framework in Ember
DESCRIPTION: Command to install the Ionic Framework core package in an Ember project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Stencil SpecPage Test with Mocking
DESCRIPTION: Demonstrates how to use newSpecPage for testing a Stencil component with mocked dependencies.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Data Binding in Stencil JSX
DESCRIPTION: Demonstrates how to bind dynamic data in JSX using curly braces syntax.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

----------------------------------------

TITLE: Importing Specific Standalone Stencil Components
DESCRIPTION: Demonstrates how to import specific standalone Stencil components to reduce code size.

LANGUAGE: javascript
CODE:
// this import loads all compiled components
import { MyComponent } from 'my-design-system'
// only import compiled code for MyComponent
import { MyComponent } from 'my-design-system/my-component'

----------------------------------------

TITLE: Generate Stencil Component in Subfolder
DESCRIPTION: Command to generate a new Stencil component in a specified subfolder within src/components directory.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Watching Prop Changes in Stencil Component
DESCRIPTION: Shows how to watch and parse changes to object and array props in a Stencil component using @Watch decorator.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

----------------------------------------

TITLE: Setting Custom Destination for Copy Tasks
DESCRIPTION: This snippet illustrates how to set a custom destination for copy tasks using the 'dest' property. It copies contents from 'src/files/fonts' to 'public/static/web-fonts'.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    dir: 'public',
    copy: [
      { src: 'files/fonts', dest: 'static/web-fonts' }
    ]
  }
]

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: TypeScript interface reference for the CopyTask configuration that defines file copy operations in Stencil builds.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Documenting CSS Variables in Stencil
DESCRIPTION: This CSS snippet shows how to document CSS variables using jsdoc-style comments, which Stencil will use for auto-generated documentation.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: Specifying Output Directory for README Files
DESCRIPTION: Configure the output directory for generated README files in the Stencil configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      dir: 'output'
    }
  ]
};

----------------------------------------

TITLE: Using setAssetPath in HTML with Stencil Components
DESCRIPTION: Demonstrates how to use the setAssetPath function in an HTML file to set the asset base path for Stencil components loaded via a script tag.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Configuring Custom Footer in docs-readme Output Target
DESCRIPTION: Shows how to add a custom footer to the generated README files using the Stencil configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Using Host Component in Stencil TSX
DESCRIPTION: Demonstrates how to use the Host functional component to set attributes and event listeners on the host element. Shows conditional rendering of classes and aria attributes based on component props.

LANGUAGE: tsx
CODE:
import { Component, Host, h } from '@stencil/core';

@Component({tag: 'todo-list'})
export class TodoList {
  @Prop() open = false;
  render() {
    return (
      <Host
        aria-hidden={this.open ? 'false' : 'true'}
        class={{
          'todo-list': true,
          'is-open': this.open
        }}
      />
    )
  }
}

----------------------------------------

TITLE: Disabling transformAliasedImportPathsInCollection in Stencil v4.0.0 Configuration
DESCRIPTION: Example of disabling the transformAliasedImportPathsInCollection feature for the dist output target in a Stencil v4.0.0 configuration file. This can be used as a workaround if issues are encountered with the new default behavior.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Selecting a Starter Project in create-stencil CLI
DESCRIPTION: CLI prompt for selecting a starter project type in Stencil. Options include component, app, and ionic-pwa.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Disabling transformAliasedImportPaths in Stencil v4.0.0 Config
DESCRIPTION: Example of disabling the transformAliasedImportPaths feature in a Stencil v4.0.0 configuration file, which is enabled by default in this version.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Advanced Screenshot Comparison in Stencil E2E Tests
DESCRIPTION: Comprehensive example of visual regression testing in Stencil, including setting up global styles, finding elements, comparing screenshots with different criteria, and handling multiple assertions.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    // In order to test against any global styles you may have, don't forget to set the link to the global css. You don't have to do this if your stencil.config.ts file doesn't build a global css file with globalStyle.
    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    // To start comparing the visual result, you first must run page.compareScreenshot; This will capture a screenshot, and save the file to "/screenshot/images". You'll be able to check that into your repo to provide those results to your team. You can only have one of these commands per test. 
    const results = await page.compareScreenshot();

    // Finally, we can test against the previous screenshots. 
    // Test against hard pixels
    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    // Test against the percentage of changes. if 'allowableMismatchedRatio' is above 20% changed, 
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Webpack Configuration for Custom Elements
DESCRIPTION: Example webpack configuration for consuming custom elements, including asset copying setup.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: This snippet shows how to add custom Rollup plugins to a Stencil project, specifying their execution order relative to built-in plugins like node-resolve and commonjs.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Custom Rollup Plugins Configuration in TypeScript
DESCRIPTION: Example configuration in stencil.config.ts for adding custom Rollup plugins before node-resolve and after commonjs transform.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Configuring package.json for Standalone Components
DESCRIPTION: Shows how to configure package.json to support importing individual standalone components.

LANGUAGE: json
CODE:
{
  "exports": {
    ".": {
      "import": "./dist/components/index.js",
      "types": "./dist/components/index.d.ts"
    },
    "./my-component": {
      "import": "./dist/components/my-component.js",
      "types": "./dist/components/my-component.d.ts"
    }
  },
  "types": "dist/components/index.d.ts"
}

----------------------------------------

TITLE: Configuring Prerender Debug Settings for Stencil
DESCRIPTION: TypeScript configuration for prerender debugging settings, including crawl control and runtime logging options.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Transpiling Code with Stencil Core Compiler
DESCRIPTION: Shows the function signature for transpiling code using the Stencil Core Compiler. It takes a string of code and optional TranspileOptions, returning a Promise with TranspileResults.

LANGUAGE: tsx
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Default Exports in dist-custom-elements index.js
DESCRIPTION: Default exports in the index.js file of the dist-custom-elements output.

LANGUAGE: javascript
CODE:
export { setAssetPath, setPlatformOptions } from '@stencil/core/internal/client';

----------------------------------------

TITLE: Creating a Stencil Component Library
DESCRIPTION: Commands to generate a Stencil component library and install its dependencies.

LANGUAGE: bash
CODE:
npm init stencil components stencil-library
cd stencil-library
npm install

----------------------------------------

TITLE: Using Stencil Web Worker Functions in a Component
DESCRIPTION: Illustrates how to import and use Web Worker functions in a Stencil component, demonstrating Stencil's automatic proxy generation for seamless integration.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Configuring Stencil Prerender Debug Settings
DESCRIPTION: TypeScript configuration for Stencil's prerender settings, including crawl options and runtime logging setup.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Registering Custom Elements in Angular
DESCRIPTION: Use the APP_INITIALIZER to register custom elements during Angular app initialization.

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Stencil Component with Method in TSX
DESCRIPTION: Example Stencil component implementation that uses the utility function in a method.

LANGUAGE: tsx
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Configuring Playwright for Stencil
DESCRIPTION: TypeScript configuration file for setting up Playwright with Stencil, including custom matchers

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

// Add custom Stencil matchers to Playwright assertions
expect.extend(matchers);

export default createConfig({
  // Overwrite Playwright config options here
});

----------------------------------------

TITLE: Documenting @Event() Decorators in Stencil
DESCRIPTION: Use JSDoc comments to document events decorated with @Event() in a component.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * Emitted when an event is completed
   */
  @Event() todoCompleted: EventEmitter<number>;
  /**
   * @deprecated
   */
  @Event() todoUndo: EventEmitter<number>;

  // ...
}

----------------------------------------

TITLE: Example Telemetry Event Structure in JavaScript
DESCRIPTION: This snippet demonstrates the structure of a typical telemetry event collected by Stencil. It includes information about the build process, system specifications, and Stencil configuration.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Typed Functional Component in Stencil
DESCRIPTION: Shows how to create a functional component with typed props using Stencil's FunctionalComponent type.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Disabling transformAliasedImportPaths in Stencil v4.0.0
DESCRIPTION: Configuration snippet for disabling the transformAliasedImportPaths feature in Stencil v4.0.0. This can be used as a workaround if issues are encountered with the new default behavior.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Creating NodeJS System for Stencil Compiler
DESCRIPTION: Creates a system interface based on NodeJS APIs for the compiler. This handles file system operations and content hashing. It requires the NodeJS 'process' object as an argument.

LANGUAGE: typescript
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Lifecycle DOM Events Example
DESCRIPTION: List of component lifecycle events that can be dispatched when lifecycleDOMEvents is enabled. These events are dispatched on the window object and are primarily used for testing purposes.

LANGUAGE: markdown
CODE:
| Event Name                    | Description                                            |
| ----------------------------- | ------------------------------------------------------ |
| `stencil_componentWillLoad`   | Dispatched for each component's `componentWillLoad`.   |
| `stencil_componentWillUpdate` | Dispatched for each component's `componentWillUpdate`. |
| `stencil_componentWillRender` | Dispatched for each component's `componentWillRender`. |
| `stencil_componentDidLoad`    | Dispatched for each component's `componentDidLoad`.    |
| `stencil_componentDidUpdate`  | Dispatched for each component's `componentDidUpdate`.  |
| `stencil_componentDidRender`  | Dispatched for each component's `componentDidRender`.  |

----------------------------------------

TITLE: Configuring Prerender Config Path in Stencil Config
DESCRIPTION: This snippet shows how to set the path to the prerendering config file in the Stencil configuration file (stencil.config.ts). It demonstrates setting the 'prerenderConfig' property in the 'www' output target.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Creating NodeJS System for Stencil Compiler
DESCRIPTION: Creates a system interface based on NodeJS APIs for the compiler. This handles file system operations and content hashing. It requires the NodeJS 'process' object as an argument.

LANGUAGE: typescript
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class (JavaScript)
DESCRIPTION: Demonstrates how to create a custom screenshot connector by extending the base ScreenshotConnector class from Stencil. This is the starting point for implementing custom screenshot handling logic.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Example Stats Output JSON Structure
DESCRIPTION: Shows the complete data model structure of the generated stats file, including compiler information, app details, component metadata, and dependency graphs.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [],
    "es5": [],
    "system": [],
    "commonjs": []
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        }
      ]
    }
  ],
  "entries": [
    {
      "cmps": [],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Service Implementation Using Utility Helper
DESCRIPTION: Service module that uses the getRandomInt helper function

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Helper Methods Export
DESCRIPTION: Default export of helper methods in the index.js file

LANGUAGE: javascript
CODE:
export { setAssetPath, setPlatformOptions } from '@stencil/core/internal/client';

----------------------------------------

TITLE: Running Stencil Build Commands for Documentation
DESCRIPTION: Various CLI commands to generate README documentation using Stencil's build system.

LANGUAGE: bash
CODE:
npx stencil build
npm stencil build --watch
npx stencil build --docs
npx stencil docs

----------------------------------------

TITLE: Configuring VS Code Settings for Custom HTML Elements
DESCRIPTION: JSON configuration for VS Code settings to enable custom element support. This tells VS Code where to find the generated custom elements documentation file.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Handling User Input Events
DESCRIPTION: Shows how to handle DOM events like button clicks and input changes in Stencil components.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Creating a Custom Screenshot Connector (JavaScript)
DESCRIPTION: This snippet demonstrates how to create a custom screenshot connector by extending the base ScreenshotConnector class from Stencil. It imports the necessary class and exports a new class that extends it.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil
DESCRIPTION: Basic configuration for enabling README documentation generation in a Stencil project's config file.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Configuring Meta Tags with Stencil Prerender Config
DESCRIPTION: Example showing how to use the afterHydrate hook in Stencil's PrerenderConfig to dynamically set document title based on URL pathname during static site generation. Demonstrates the use of standard DOM APIs in the NodeJS prerendering environment.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Creating Node Logger in Stencil CLI
DESCRIPTION: Creates a logger instance using NodeJS APIs for compiler and dev-server logging. Takes the NodeJS process object as an argument and returns a Logger object.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Custom Service Worker Boilerplate
DESCRIPTION: Basic boilerplate code for a custom Service Worker in Stencil, including Workbox importation and precache injection point.

LANGUAGE: javascript
CODE:
// change to the version you get from `npm ls workbox-build`
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: E2E Test with SpecPage
DESCRIPTION: End-to-end test implementation using newSpecPage to test a component with mocked dependencies.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Using Ionic Components in Ember Templates
DESCRIPTION: Example of using an Ionic Framework component (ion-toggle) in an Ember component template.

LANGUAGE: js
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Documenting @Prop() Decorators in Stencil
DESCRIPTION: This TypeScript snippet shows how to document properties using the @Prop() decorator and JSDoc comments. The generated README will include a table with property details.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * The first name
   */
  @Prop() first!: string; // the '!' denotes a required property
  /**
   * @deprecated since v2.1.0
   */
  @Prop() middle: string;
  @Prop() lastName = "Smith";

  // ...
}

----------------------------------------

TITLE: Setting CSP Nonce for Custom Elements in Angular
DESCRIPTION: Shows how to set a CSP nonce for the 'dist-custom-elements' output target in an Angular application's entrypoint. It uses the setNonce function to apply the nonce to all script and style tags.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `autoDefineCustomElements` is enabled
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Initializing and Communicating with a Vanilla Web Worker in JavaScript
DESCRIPTION: Demonstrates the basic setup and usage of a Web Worker using the native browser API. It shows how to create a worker, send messages to it, and handle responses.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: Command to install the ember-cli-stencil addon for legacy Ember integration with Stencil components.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Configuring NPM Scripts for Stencil Testing
DESCRIPTION: Example NPM scripts for running Stencil tests, including unit tests, watched unit tests, and end-to-end tests. These scripts use the 'stencil test' command with various flags to specify test types and behavior.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Custom Service Worker with Update Handling (JavaScript)
DESCRIPTION: Example of a custom service worker that handles the 'skipWaiting' message for updates.

LANGUAGE: javascript
CODE:
importScripts("workbox-v4.3.1/workbox-sw.js");

self.addEventListener("message", ({ data }) => {
  if (data === "skipWaiting") {
    self.skipWaiting();
  }
});

self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Importing Stencil Core Compiler in NodeJS
DESCRIPTION: Example of how to import the Stencil Core Compiler in a NodeJS environment using CommonJS syntax.

LANGUAGE: javascript
CODE:
// NodeJS (commonjs)
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Setting Custom Destination for Copy Tasks in TypeScript
DESCRIPTION: This snippet illustrates how to set a custom destination for copy tasks using the 'dest' property. It copies contents from 'src/files/fonts' to 'public/static/web-fonts'.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    dir: 'public',
    copy: [
      { src: 'files/fonts', dest: 'static/web-fonts' }
    ]
  }
]

----------------------------------------

TITLE: Configuring Rollup for Stencil Custom Elements
DESCRIPTION: This Rollup configuration example demonstrates how to set up a project to use Stencil custom elements, including copying assets from the library.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Updating Stencil to the Latest Version
DESCRIPTION: NPM command to update the @stencil/core package to its latest version in an existing Stencil project.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Data Binding in JSX
DESCRIPTION: Shows how to bind dynamic data within JSX using curly braces {}.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

----------------------------------------

TITLE: Using Web Worker Functions in a Stencil Component
DESCRIPTION: Demonstrates how to import and use Web Worker functions within a Stencil component, leveraging Stencil's automatic worker proxy generation.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Example Stats JSON Output for Stencil Project
DESCRIPTION: Provides a comprehensive example of the JSON structure generated by the stats output, including compiler information, app details, component data, and various build formats.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: HTML Asset Path Configuration
DESCRIPTION: Example of setting asset paths in HTML using script tags and setAssetPath API.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Node Polyfills Configuration in Stencil
DESCRIPTION: Shows how to configure the rollup-plugin-node-polyfills plugin in a Stencil project to handle Node.js API dependencies.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Data Binding in JSX for Stencil
DESCRIPTION: Shows how to bind dynamic data in JSX using curly braces {} around variables.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

----------------------------------------

TITLE: Installing Lerna Globally
DESCRIPTION: Command to install Lerna globally for managing the monorepo structure.

LANGUAGE: bash
CODE:
npm install --global lerna

----------------------------------------

TITLE: Running Individual Tasks in Stencil Core CLI
DESCRIPTION: Executes individual tasks given a NodeJS process, Stencil config, and task command. An optional sys parameter can be provided for the compiler system.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Handling Array Updates in Stencil Components
DESCRIPTION: Shows how to properly update arrays in Stencil components using immutable operations to trigger state changes and component updates.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Configuring Rollup for Stencil Custom Elements
DESCRIPTION: This Rollup configuration example demonstrates how to set up a project to use Stencil custom elements, including copying assets from the library.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Rollup Plugin Configuration for Asset Copying
DESCRIPTION: Example showing how to use rollup-plugin-copy to manage asset copying in the build process

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Setting Asset Path for Custom Elements
DESCRIPTION: Example of setting the asset path for custom elements using setAssetPath

LANGUAGE: typescript
CODE:
import { defineCustomElements, setAssetPath } from 'my-library/dist/custom-elements';

setAssetPath(document.currentScript.src);
defineCustomElements();

----------------------------------------

TITLE: Executing Individual Tasks in Stencil CLI
DESCRIPTION: Runs individual tasks given a NodeJS process, Stencil config, and task command. An optional sys parameter can be provided for the compiler system.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: This snippet shows how to add custom Rollup plugins to a Stencil project. It demonstrates adding plugins before node-resolve and after commonjs transform in the Stencil configuration file.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Configuring package.json for Lazy-Loaded Components
DESCRIPTION: Demonstrates the necessary configuration in package.json for properly importing lazy-loaded Stencil components.

LANGUAGE: json
CODE:
{
  "exports": "./dist/esm/my-design-system.js",
  "main": "./dist/cjs/my-design-system.js",
  "unpkg": "dist/my-design-system/my-design-system.esm.js"
}

----------------------------------------

TITLE: Example Telemetry Event Structure in JavaScript
DESCRIPTION: This snippet shows the structure of a typical telemetry event collected by Stencil. It includes information about the Stencil version, dependencies, command arguments, and system details.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Updating Stencil Core Package
DESCRIPTION: Command to update the @stencil/core package to the latest version using npm.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Creating NodeJS System for Stencil Compiler
DESCRIPTION: Creates a system based on NodeJS APIs for the compiler's file system operations and content hashing. It requires the NodeJS 'process' object as an argument.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Removing Jasmine Dependencies
DESCRIPTION: Command to remove Jasmine dependencies from the Angular workspace to avoid type definition collisions.

LANGUAGE: bash
CODE:
npm uninstall jasmine-core @types/jasmine

----------------------------------------

TITLE: React Integration Stencil Config
DESCRIPTION: Configuration for the Stencil output target to generate React component wrappers

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    reactOutputTarget({
      outDir: '../react-library/lib/components/stencil-generated/',
    }),
    { type: 'dist-custom-elements' },
  ],
};

----------------------------------------

TITLE: Configuring Prerender for Debugging in Stencil
DESCRIPTION: TypeScript configuration for prerender.config.ts to set up debugging options for static site generation in Stencil.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Creating Angular Component Library in Monorepo
DESCRIPTION: Commands to generate an Angular workspace and library for component wrappers using Angular CLI.

LANGUAGE: bash
CODE:
npx -p @angular/cli ng new angular-workspace --no-create-application
cd angular-workspace
npx -p @angular/cli ng generate library component-library

----------------------------------------

TITLE: Installing WebdriverIO Visual Service
DESCRIPTION: Command to install the @wdio/visual-service package as a development dependency.

LANGUAGE: bash
CODE:
npm install --save-dev @wdio/visual-service

----------------------------------------

TITLE: Accessing Host Element with Element Decorator in Stencil
DESCRIPTION: This snippet demonstrates how to use the @Element() decorator to access the host element within a Stencil component class. It includes an example of using the definite assignment assertion modifier for class member initialization.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el!: HTMLElement;

  private listHeight = this.el.getBoundingClientRect().height;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config
DESCRIPTION: Shows how to add the stats output target to the stencil.config.ts file for automatic stats generation with every build. Includes an optional file path specification.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Using Component with Child Elements
DESCRIPTION: Demonstration of passing child elements to a functional component.

LANGUAGE: tsx
CODE:
<Hello name="World">
  <p>I'm a child element.</p>
</Hello>

----------------------------------------

TITLE: Configuring Stencil Output Target for VS Code Documentation
DESCRIPTION: This snippet shows how to add the 'docs-vscode' output target to the Stencil configuration file. It specifies the type of output and the file name for the generated JSON data.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Exporting Prerender Config Object
DESCRIPTION: This snippet demonstrates how to export a config object using the PrerenderConfig interface in the prerender.config.ts file. This object will contain the prerender configuration options.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Mocking Node Module Library in TypeScript
DESCRIPTION: Example of mocking a node_modules library (md5) by creating a mock implementation in __mocks__ directory

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Demonstrating File Structure for Stencil Components
DESCRIPTION: This snippet shows the recommended file structure for Stencil components, emphasizing one component per directory and grouping related files together.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Warning-Enabled Copy Configuration
DESCRIPTION: Example showing how to enable warnings for copy tasks when source files cannot be found.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Listening for the appload Event in Stencil
DESCRIPTION: Demonstrates how to listen for the 'appload' event emitted when a Stencil app and all its child components have finished loading. The event listener checks the namespace of the app that emitted the event.

LANGUAGE: typescript
CODE:
window.addEventListener('appload', (event) => {
  console.log(event.detail.namespace);
});

----------------------------------------

TITLE: Listening for the appload Event in Stencil
DESCRIPTION: Demonstrates how to listen for the 'appload' event emitted when a Stencil app and all its child components have finished loading. The event listener checks the namespace of the app that emitted the event.

LANGUAGE: typescript
CODE:
window.addEventListener('appload', (event) => {
  console.log(event.detail.namespace);
});

----------------------------------------

TITLE: Basic Ionic Component Usage
DESCRIPTION: Example of using an Ionic toggle component in an Ember template

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Private Method Implementation
DESCRIPTION: Demonstrates how to implement private methods in a Stencil component that don't require the @Method decorator or async returns.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Generating a Stencil Component with CLI
DESCRIPTION: Demonstrates how to use the Stencil CLI to generate a new component. It shows both the interactive method and the direct command line approach.

LANGUAGE: shell
CODE:
stencil generate my-new-component

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Project Setup Commands
DESCRIPTION: Commands for setting up and starting a new Stencil project after creation

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Implementing Async componentWillLoad in Stencil
DESCRIPTION: This example demonstrates how to use componentWillLoad to asynchronously fetch data before rendering. It returns a Promise to ensure the parent component waits for the data to load.

LANGUAGE: tsx
CODE:
componentWillLoad() {
  return fetch('/some-data.json')
    .then(response => response.json())
    .then(data => {
      this.content = data;
    });
}

----------------------------------------

TITLE: Implementing formDisabledCallback in Stencil
DESCRIPTION: Demonstrates using the formDisabledCallback to update a CSS class based on the disabled state of the form element.

LANGUAGE: typescript
CODE:
import { Component, h, State } from '@stencil/core';

@Component({
  tag: 'form-disabled-cb',
  formAssociated: true,
})
export class MyComponent {
  @State() cssClass: string = "";

  formDisabledCallback(disabled: boolean) {
    if (disabled) {
      this.cssClass = "background-mode";
    } else {
      this.cssClass = "";
    }
  }

  render() {
    return <input type="text" class={this.cssClass}></input>
  }
}

----------------------------------------

TITLE: HTML Implementation with setAssetPath
DESCRIPTION: Example of how to use setAssetPath in an HTML file when importing components via script tag

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Using WebdriverIO Matchers for Assertions in Stencil Tests
DESCRIPTION: This code demonstrates the recommended way to use WebdriverIO-specific matchers for making assertions in Stencil component tests, which allows for retries and improves test resilience.

LANGUAGE: typescript
CODE:
await expect($('my-component'))
    .toHaveText(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)

----------------------------------------

TITLE: Documenting Shadow Parts
DESCRIPTION: Use @part JSDoc tags in the component's JSDoc to describe CSS shadow parts. This information will be included in the generated README.

LANGUAGE: tsx
CODE:
/**
 * @part label - The label text describing the component.
 */
@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  // ...

  render() {
    return (
      <div part="label">
        <slot></slot>
      </div>
    );
  }
}

----------------------------------------

TITLE: Using @State() with Complex Types in Stencil
DESCRIPTION: This example shows how to use @State() with a complex type (an array of objects) to create a dynamic list component that adds items over time.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Using @State() with Complex Types in Stencil
DESCRIPTION: This example shows how to use @State() with a complex type (an array of objects) to create a dynamic list component that adds items over time.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Configuring assetsDirs in Stencil Component
DESCRIPTION: Shows how to configure the assetsDirs option in a Stencil component to specify directories containing required assets.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Using Web Worker Functions in a Stencil Component
DESCRIPTION: Demonstrates how to import and use Web Worker functions within a Stencil component. The example shows calling worker functions asynchronously and handling their results.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Updating TSConfig for Playwright Compatibility
DESCRIPTION: Addition to tsconfig.json to include ESNext.Disposable, resolving potential build errors related to Symbol.asyncDispose.

LANGUAGE: json
CODE:
{
  "lib": [
    "...",
    "ESNext.Disposable"
  ],
  "..."
}

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: Command to install the ember-cli-stencil addon for legacy Ember projects using Ember CLI.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Example JSON Output of Stencil Stats Documentation
DESCRIPTION: Provides a comprehensive example of the JSON data structure generated by the Stencil stats documentation. It includes information about the compiler, app configuration, output formats, components, and dependency graphs.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: TypeScript interface reference for CopyTask configuration showing the structure of copy operations in Stencil.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Using hydrateDocument Function for SSR
DESCRIPTION: Example of using the hydrateDocument function to hydrate components on the server before serving the web page.

LANGUAGE: typescript
CODE:
import { hydrateDocument, createWindowFromHtml } from 'yourpackage/hydrate';

export function hydrateComponents(template: string) {
  const win = createWindowFromHtml(template, Math.random().toString())

  return hydrateDocument(win.document)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Element Decorator Usage in Stencil
DESCRIPTION: Demonstrates how to use the @Element decorator to access the host element within a component class.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

export class TodoList {
  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Configuring Stencil for React Output
DESCRIPTION: Configuration in the Stencil project's stencil.config.ts to generate React component wrappers using the @stencil/react-output-target plugin.

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    reactOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../react-library/lib/components/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Configuring VS Code for Debugging Stencil Tests
DESCRIPTION: VS Code launch configuration for running and debugging Stencil tests, including both end-to-end and spec tests for the current file.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "E2E Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--e2e", "--", "--maxWorkers=0", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Spec Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--spec", "--", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

----------------------------------------

TITLE: Installing Playwright Browser Binaries
DESCRIPTION: Command to install Playwright browser binaries for test execution

LANGUAGE: bash
CODE:
npx playwright install

----------------------------------------

TITLE: CreateCompiler Function Signature
DESCRIPTION: Function signature for creating a Stencil compiler instance based on provided configuration.

LANGUAGE: tsx
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Basic Prerender Config Export
DESCRIPTION: Basic structure for exporting a prerender configuration object using the PrerenderConfig interface.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Importing and Registering Standalone Components in TypeScript
DESCRIPTION: Example of importing and registering standalone Stencil components in TypeScript.

LANGUAGE: typescript
CODE:
import { MyComponent, defineCustomElementMyComponent } from 'my-design-system'

// register to CustomElementRegistry
defineCustomElementMyComponent()

// or extend custom element via
class MyCustomComponent extends MyComponent {
  // ...
}
define('my-custom-component', MyCustomComponent)

----------------------------------------

TITLE: Implementing Stencil Store in Components
DESCRIPTION: Demonstration of using store state within a Stencil component, including real-time updates and event handling

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Complex State Management with Arrays in Stencil
DESCRIPTION: Shows how to manage complex state with arrays and custom types, demonstrating proper state updates to trigger rerenders.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;
    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Configuring NPM Script for Playwright and Stencil Tests
DESCRIPTION: Example of updating package.json to run both Stencil e2e tests and Playwright tests in sequence.

LANGUAGE: json
CODE:
{
  "scripts": {
    "test.e2e": "stencil test --e2e && playwright test"
  }
}

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config
DESCRIPTION: Demonstrates how to add the stats output target to the stencil.config.ts file for automatic generation of stats documentation with every build. It shows the configuration structure and mentions the optional file property.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Rollup Plugin Asset Configuration
DESCRIPTION: Shows how to configure Rollup plugins to copy assets in Stencil build

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Custom Rollup Plugin Configuration
DESCRIPTION: Example configuration showing how to add custom Rollup plugins before node-resolve and after commonjs transformation in Stencil config.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Implementing formDisabledCallback in Stencil
DESCRIPTION: Demonstrates using the formDisabledCallback to update a CSS class based on the disabled state of the form element.

LANGUAGE: typescript
CODE:
import { Component, h, State } from '@stencil/core';

@Component({
  tag: 'form-disabled-cb',
  formAssociated: true,
})
export class MyComponent {
  @State() cssClass: string = "";

  formDisabledCallback(disabled: boolean) {
    if (disabled) {
      this.cssClass = "background-mode";
    } else {
      this.cssClass = "";
    }
  }

  render() {
    return <input type="text" class={this.cssClass}></input>
  }
}

----------------------------------------

TITLE: Installing Ionic Framework in Ember
DESCRIPTION: Command to install the Ionic Framework package in an Ember project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Running Individual Stencil Tasks
DESCRIPTION: Executes specific tasks with given NodeJS process, Stencil config, and task command. Optionally accepts a custom compiler system implementation.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Setting Component Props in E2E Tests
DESCRIPTION: Shows how to set properties on a component during an E2E test using page.$eval. This method allows manipulation of the component within the browser's context.

LANGUAGE: typescript
CODE:
await page.setContent(`
      <prop-cmp></prop-cmp>
    `);

await page.$eval('prop-cmp', (elm: any) => {
  elm.first = 'Marty';
  elm.lastName = 'McFly';
});

await page.waitForChanges();

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: Example of how to add the dist-custom-elements output target to a Stencil project's configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Getting Current Style Mode in Stencil Component
DESCRIPTION: Shows how to use the getMode() function to retrieve the current style mode of a Stencil component. This can be used to conditionally apply styles or behavior based on the current mode.

LANGUAGE: typescript
CODE:
import { getMode } from '@stencil/core'

getMode(this);

----------------------------------------

TITLE: Configuring 'www' Output Target in Stencil
DESCRIPTION: This snippet demonstrates how to configure the 'www' output target in a Stencil project's configuration. It sets the output target type to 'www'.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Creating Node System in Stencil CLI
DESCRIPTION: Initializes a compiler system using NodeJS APIs for file system operations and content hashing. Requires the NodeJS process object as input.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: Shows how to configure custom Rollup plugins in Stencil, demonstrating the before/after injection points relative to built-in plugins like node-resolve and commonjs. Includes example of plugin ordering configuration.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: JSX Utility Implementation
DESCRIPTION: Utility functions for enabling JSX support in Vitest tests with Stencil components

LANGUAGE: typescript
CODE:
export const createElement = (tag, props, ...children) => {
    if (typeof tag === 'function') {
        return tag(props, ...children)
    }
    const element = document.createElement(tag)

    Object.entries(props || {}).forEach(([name, value]) => {
        if (name.startsWith('on') && name.toLowerCase() in window) {
            element.addEventListener(name.toLowerCase().substr(2), value)
        } else {
            element.setAttribute(name, value.toString())
        }
    })

    children.forEach((child) => {
        appendChild(element, child)
    })

    return element
}

export const appendChild = (parent, child) => {
    if (Array.isArray(child)) {
        child.forEach((nestedChild) => appendChild(parent, nestedChild))
    } else {
        parent.appendChild(child.nodeType ? child : document.createTextNode(child))
    }
}

export const createFragment = (_, ...children) => {
    return children
}

----------------------------------------

TITLE: Disabling Path Alias Transformation in Stencil v4.0.0
DESCRIPTION: Configuration for disabling the default path alias transformation in Stencil v4.0.0

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: File Structure Example in Bash
DESCRIPTION: Demonstrates recommended directory structure for Stencil components with separate files for implementation, styles, and tests.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Initializing Git Repository for Stencil Project
DESCRIPTION: Commands to initialize a new Git repository for a Stencil project, add all files, and make the initial commit.

LANGUAGE: bash
CODE:
git init
git add -A
git commit -m "initialize project using stencil cli"

----------------------------------------

TITLE: Creating Stencil Compiler Instance
DESCRIPTION: Function signature and example for creating a compiler instance in a NodeJS environment.

LANGUAGE: tsx
CODE:
createCompiler(config: Config): Promise<Compiler>

LANGUAGE: tsx
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Defining a Utility Function in Stencil with TypeScript
DESCRIPTION: This code defines a utility function 'getRandomInt' that generates a random integer between a minimum and maximum value. It's used as an example of code that will be mocked in later snippets.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Disabling Service Worker Generation in Stencil
DESCRIPTION: Shows how to disable the automatic generation of a Service Worker during the Stencil build process by setting the serviceWorker property to null in the config.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Handling Service Worker Updates in Stencil Component (TypeScript)
DESCRIPTION: Stencil component code for handling Service Worker updates, showing a toast notification when an update is available.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    // If there is no waiting registration, this is the first service
    // worker being installed.
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Configuring Package.json Test Scripts
DESCRIPTION: Script configuration for running both Stencil and WebdriverIO tests

LANGUAGE: json
CODE:
{
    "scripts:": {
        "test.e2e": "stencil test && wdio run wdio.conf.ts"
    }
}

----------------------------------------

TITLE: ScreenshotConnector Interface Definition
DESCRIPTION: Interface definition showing the available methods that can be overridden in a custom screenshot connector.

LANGUAGE: tsx
CODE:
https://github.com/ionic-team/stencil/blob/a2e119d059ba0d0fa6155dbd3d82c17612630828/src/declarations/stencil-private.ts#L1631-L1645

----------------------------------------

TITLE: State Management with Event Listeners
DESCRIPTION: Demonstrates using @State with @Listen decorator to create a toggle button component that responds to click events.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Importing Test Function in Stencil Playwright
DESCRIPTION: Demonstrates the correct way to import the 'test' function from '@stencil/playwright' instead of '@playwright/test' for Stencil projects.

LANGUAGE: typescript
CODE:
// THIS IS CORRECT
import { test } from '@stencil/playwright';

// THIS IS NOT!!
// import { test } from '@playwright/test';

----------------------------------------

TITLE: Functional Component with Children in Stencil
DESCRIPTION: Illustrates how to define a functional component that accepts and renders child elements.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Defining Testing Configuration in Stencil
DESCRIPTION: This code snippet shows the TypeScript interface for the testing configuration in Stencil projects. It includes options for specifying Jest configuration, e2e test settings, and other testing-related parameters.

LANGUAGE: typescript
CODE:
export interface TestingConfig {
  /**
   * The `allowableMismatchedPixels` value is used to determine if a pixel difference between
   * the screenshot and the source image should be considered a test failure. The default
   * value is `0`, but increasing this value allows for an expected number of pixels to be
   * different while still passing the test.
   */
  allowableMismatchedPixels?: number;
  /**
   * The `allowableMismatchedRatio` value is used to determine if the ratio of pixels that
   * are different between the screenshot and the source image should be considered a
   * test failure. The value should be between `0` and `1`, where `0.1` means 10% of the
   * pixels can be different, or `0.25` means 25% of the pixels can be different.
   */
  allowableMismatchedRatio?: number;
  /**
   * Automatically apply ID attributes to the component's host element
   * and its root internal elements when running e2e tests. Default is `true`.
   */
  autoApplyChanges?: boolean;
  /**
   * The `pixelmatchThreshold` value is used to compare pixels between the screenshot and
   * the source image. If the difference between two pixels is less than this value, the
   * pixels are considered to be the same. The default value is `0.1`.
   */
  pixelmatchThreshold?: number;
  /**
   * E2E tests emulate events. You can emulate pressing a key with a delay using `keyboardConfig`.
   */
  emulate?: EmulateConfig;
  /**
   * The `includeTestURL` config is used to add the file's URL to the browser's address bar
   * when running e2e tests. The default is `true`.
   */
  includeTestURL?: boolean;
  /**
   * Path to a module which exports a function to use as Jest's `globalSetup`.
   */
  globalSetup?: string;
  /**
   * Path to a module which exports a function to use as Jest's `globalTeardown`.
   */
  globalTeardown?: string;
  /**
   * The `logger` config can be used to override how data gets logged to the output stream.
   */
  logger?: TestingLogger;
  /**
   * The default is to run tests in parallel using the system's available CPU cores.
   * However, this can be adjusted so only one test runs at a time by setting this to `1`.
   * Or you can provided any whole number to indicate how many tests are allowed to run at a time.
   * This option is only available when using the Jest test runner.  Otherwise, setting this
   * configuration has no effect.
   */
  maxConcurrency?: number;
  /**
   * Path to a module which exports a function which returns a Promise,
   * which should resolve before test execution begins.
   * High-level alternative to Jest's `globalSetup`.
   */
  setupFilesAfterEnv?: string[];
  /**
   * The `testEnvironment` value is used to set the test environment to run the tests in.
   * The default value is `node`. Alternatively, `jsdom` can be used.
   */
  testEnvironment?: TestingTestEnvironment;
  /**
   * The `testPathIgnorePatterns` config is used to set an array of RegExp pattern strings that
   * are matched against all test paths before executing the test. If the test path matches any
   * of the patterns, it will be skipped.
   */
  testPathIgnorePatterns?: string[];
  /**
   * The `testRegex` config is used to specify the test file(s) or pattern(s) Jest should run.
   */
  testRegex?: string | string[];
  /**
   * The `testRunnerOptions` config is used to set additional options for the test runners.
   */
  testRunnerOptions?: TestRunnerOptions;
  /**
   * The `testTimeout` config sets the default timeout for each test in milliseconds. The
   * default value is `15000`.
   */
  testTimeout?: number;
  /**
   * The `testResultsProcessor` config is used to set the test results processor to be used
   * by Jest. This option can be used to modify test results after they have been processed
   * by Jest.
   */
  testResultsProcessor?: string;
  /**
   * The `transform` config is used to set the transform function to be used by Jest.
   * The transform function is used to transform files before they are processed by Jest.
   */
  transform?: { [key: string]: string | TransformerConfig };
  /**
   * The `transformIgnorePatterns` config is used to set an array of RegExp pattern strings
   * that are matched against all source file paths before transformation. If the test path
   * matches any of the patterns, it will not be transformed.
   */
  transformIgnorePatterns?: string[];
  /**
   * The default Jest configuration used by Stencil. These options can be overridden
   * by other options within this `testing` config.
   */
  rootDir?: string;
  testMatch?: string[];
  moduleFileExtensions?: string[];
  collectCoverageFrom?: string[];
  coverageReporters?: string[];
  reporters?: string[];
  verbose?: boolean;
  /**
   * The `browserArgs` config is used to set command-line arguments to pass to the browser
   * instance.
   */
  browserArgs?: string[];
  /**
   * The `browserHeadless` config is used to configure whether the browser runs in headless
   * mode or not.
   */
  browserHeadless?: boolean;
  /**
   * The `browserDevtools` config is used to configure whether the browser's dev tools
   * are open while running tests or not.
   */
  browserDevtools?: boolean;
  /**
   * The `browserSlowMo` config is used to set the amount of time to slow down the automation.
   * browserSlowMo is in milliseconds.
   */
  browserSlowMo?: number;
  /**
   * The `browserWaitUntil` config is used to configure how Stencil's e2e testing framework
   * waits for a page to loads in the browser.
   */
  browserWaitUntil?: 'load' | 'domcontentloaded' | 'networkidle0' | 'networkidle2';
}

----------------------------------------

TITLE: Enabling Warnings for Copy Tasks
DESCRIPTION: Configuration example for enabling warnings when source files or directories are not found during copy tasks. This is useful for debugging copy task issues.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist',
    copy: [
      { src: 'fonts', warn: true }
    ]
  }
]

----------------------------------------

TITLE: Configuring Page-Specific Hydrate Options
DESCRIPTION: Example demonstrating how to set individual hydrate options per page using the hydrateOptions hook in the prerender config.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Starting Stencil Dev Server in TypeScript
DESCRIPTION: The start() function initializes the Stencil Dev Server. It takes a configuration object, a logger, and an optional watcher as parameters, and returns a Promise that resolves to a DevServer instance.

LANGUAGE: typescript
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Mocking a Library in Stencil with TypeScript
DESCRIPTION: Creates a mock for the 'md5' library by defining a fake hash function in a __mocks__ folder.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Window Event Listening in Stencil
DESCRIPTION: Demonstrates how to listen to window-level events using the target option in @Listen decorator.

LANGUAGE: tsx
CODE:
  @Listen('scroll', { target: 'window' })
  handleScroll(ev) {
    console.log('the body was scrolled', ev);
  }

----------------------------------------

TITLE: Rollup Configuration for Custom Elements
DESCRIPTION: Example Rollup configuration for consuming custom elements, including asset copying.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Initializing Stencil Project with CLI
DESCRIPTION: Command to create a new Stencil project using the create-stencil CLI tool

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Calling Stencil Component Methods
DESCRIPTION: Shows how to properly call a public method on a Stencil component, ensuring the component is fully defined using customElements.whenDefined() before making the call.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Executing Individual Stencil Tasks
DESCRIPTION: Runs specific tasks with given NodeJS process, Stencil config, and task command. Optionally accepts a custom compiler system implementation.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Auto-defining Stencil Custom Elements
DESCRIPTION: Shows how to import and auto-define Stencil custom elements when using the 'auto-define-custom-elements' export behavior.

LANGUAGE: typescript
CODE:
import 'my-design-system/my-component'

----------------------------------------

TITLE: Example of Expanded docs-json Output for @Event
DESCRIPTION: JSON representation of the expanded documentation for an @Event, including the new complexType field with type information.

LANGUAGE: json
CODE:
{
  "complexType": {
    "original": "ModalBreakpointChangeEventDetail",
    "resolved": "ModalBreakpointChangeEventDetail",
    "references": {
      "ModalBreakpointChangeEventDetail": {
        "location": "import",
        "path": "./modal-interface",
        "id": "src/components/modal/modal.tsx::ModalBreakpointChangeEventDetail"
      }
    }
  }
}

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: Command to install the ember-cli-stencil addon in an Ember project for legacy integration with Stencil components.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Writing Visual Test for StencilJS Component
DESCRIPTION: Example of a visual test for a StencilJS component using the toMatchElementSnapshot matcher provided by the @wdio/visual-service.

LANGUAGE: typescript
CODE:
it('should render component correctly', async () => {
    const page = await browser.newPage()
    await page.setContent('<my-component first="Stencil" last="JS"></my-component>')
    await page.waitForSelector('my-component')
    const element = await page.$('my-component')
    
    await expect(element).toMatchElementSnapshot('MyComponent')
})

----------------------------------------

TITLE: Custom Footer Configuration
DESCRIPTION: Configuration for adding a custom footer to generated README files

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Form Associated Component
DESCRIPTION: Demonstrates how to create a form-associated custom element using Stencil components.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Default Workbox Configuration in Stencil
DESCRIPTION: Basic configuration object for service worker generation using Workbox in Stencil projects.

LANGUAGE: typescript
CODE:
{
  globPatterns: [
    '**/*.{js,css,json,html}'
  ]
};

----------------------------------------

TITLE: Using Rollup Plugin for Asset Copying
DESCRIPTION: Shows how to use a Rollup plugin to copy asset files to the distribution directory in a Stencil project configuration.

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Advanced Worker Usage with Direct Access
DESCRIPTION: Shows how to directly access the Worker instance and create worker pools in Stencil.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);
    const result = await sum(1, 2);
    console.log(result);
  }
}

----------------------------------------

TITLE: E2E Test with waitForChanges()
DESCRIPTION: Example showing how to use waitForChanges() to handle component rehydration after state changes.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // Assume we have a template setup with the `my-component` component and a `button`
    await page.goto('/my-component/my-component.e2e.html');

    const button = page.locator('button');
    // Assume clicking the button changes the `@Prop()` values on `my-component`
    button.click();
    await page.waitForChanges();
  });
});

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: This code demonstrates how to import all components from the Ionic Framework in an Ember application's main JavaScript file.

LANGUAGE: javascript
CODE:
import '@ionic/core'; // installs all the components from Ionic Framework

----------------------------------------

TITLE: Starting Stencil Dev Server in TypeScript
DESCRIPTION: The start() function initializes the Stencil Dev Server. It takes a configuration object, a logger, and an optional watcher as parameters, and returns a Promise that resolves to a DevServer instance.

LANGUAGE: typescript
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Setting Custom Destination for Copy Tasks
DESCRIPTION: This snippet illustrates how to set a custom destination for copy tasks using the 'dest' option. It copies contents from 'src/files/fonts' to 'public/static/web-fonts'.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    dir: 'public',
    copy: [
      { src: 'files/fonts', dest: 'static/web-fonts' }
    ]
  }
]

----------------------------------------

TITLE: Server Implementation with Koa
DESCRIPTION: Example of using hydrateComponents in a Koa server implementation

LANGUAGE: typescript
CODE:
import Koa from 'koa';

const app = new Koa();
app.use(async (ctx) => {
  const res = await hydrateComponents(`<!DOCTYPE html>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />
    <title>Document</title>
    <link rel=\"preconnect\" href=\"https://some-url.com\" />
    <style>
      // custom styles here
    </style>
  </head>
  <body>
    <app-root></app-root>
  </body>
</html>`)
  ctx.body = res
})

----------------------------------------

TITLE: Updating Vite Config for Custom Elements
DESCRIPTION: Configuration update in vite.config.ts to handle custom elements in the Vue app.

LANGUAGE: typescript
CODE:
export default defineConfig({
  plugins: [
    vue({
      template: {
        compilerOptions: {
          // treat all tags with a dash as custom elements
          isCustomElement: (tag) => tag.includes('-'),
        },
      },
    }),
    vueJsx(),
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  }
})

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config
DESCRIPTION: Configuration snippet showing how to specify a custom screenshot connector in the Stencil testing config.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Global Styles Configuration
DESCRIPTION: Example of configuring global styles in Stencil config file.

LANGUAGE: tsx
CODE:
export const config: Config = {
  namespace: 'app',
  globalStyle: 'src/global/global.css',
  outputTarget: [
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Loading Stencil Configuration
DESCRIPTION: Presents the function signature for loading and transforming raw config information into a usable config object for the compiler and dev-server.

LANGUAGE: typescript
CODE:
loadConfig(init?: LoadConfigInit): Promise<LoadConfigResults>

----------------------------------------

TITLE: Configuring Meta Tags in Stencil Prerender
DESCRIPTION: Example of using Stencil's PrerenderConfig to set document title during static site generation. The afterHydrate hook provides access to the document object and URL, allowing dynamic meta tag manipulation during the build process.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: CSS Custom Properties Usage
DESCRIPTION: Demonstrates defining and using CSS custom properties for component customization

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Shadow DOM Style Examples
DESCRIPTION: Basic CSS styling within Shadow DOM context showing host element styling and scoped element selection.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Subscribing to Push Notifications (TypeScript)
DESCRIPTION: Function to subscribe a user to push notifications using the Push API.

LANGUAGE: typescript
CODE:
async function subscribeUser() {
  if ('serviceWorker' in navigator) {
    const registration = await navigator.serviceWorker.ready;

    const subscription = await registration.pushManager
      .subscribe({ userVisibleOnly: true })
      .catch(console.error);

    if (!subscription) {
      return;
    }

    // the subscription object is what we want to send to our backend
    console.log(subscription.endpoint);
  }
}

----------------------------------------

TITLE: HTML Asset Path Configuration
DESCRIPTION: Example of setting asset paths in HTML when importing components via script tags.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Default Workbox Configuration in Stencil
DESCRIPTION: Basic configuration object for service worker generation using Workbox in Stencil projects.

LANGUAGE: typescript
CODE:
{
  globPatterns: [
    '**/*.{js,css,json,html}'
  ]
};

----------------------------------------

TITLE: Disabling Service Worker in Stencil
DESCRIPTION: Configuration example showing how to disable service worker generation in Stencil builds.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Disabling Collection Path Alias Transformation
DESCRIPTION: Configuration example showing how to disable path alias transformation for collection output targets in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Getting Component Mode in TypeScript
DESCRIPTION: Demonstrates how to use getMode() to retrieve the current style mode of a Stencil component.

LANGUAGE: typescript
CODE:
import { getMode } from '@stencil/core'

getMode(this);

----------------------------------------

TITLE: Configuring Stencil Copy Task for Asset Management
DESCRIPTION: Demonstrates how to use Stencil's copy task to copy asset files to the distribution directory during the build process.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
  // ...
};

----------------------------------------

TITLE: Loading Stencil Components with ESM Import
DESCRIPTION: Example of how to import and initialize Stencil components using the ESM loader in an application setup script, including polyfill application and nonce setting.

LANGUAGE: typescript
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Creating Node System for Stencil Compiler in TypeScript
DESCRIPTION: Creates the system based on NodeJS APIs used by the Stencil compiler. It handles file system operations and content hashing using NodeJS modules. The NodeJS process object should be provided as an argument.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Configuring 'www' Output Target in Stencil
DESCRIPTION: This snippet shows how to configure the 'www' output target in a Stencil project's configuration. It demonstrates setting the output target type to 'www' within the outputTargets array.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Importing Stencil Core Compiler in NodeJS
DESCRIPTION: Demonstrates how to import the Stencil Core Compiler in a NodeJS environment using CommonJS syntax.

LANGUAGE: javascript
CODE:
// NodeJS (commonjs)
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: Demonstrates how to add Sass support to a Stencil project by configuring the @stencil/sass plugin in the config file. The code shows the basic plugin setup using the plugins array in the Stencil configuration.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Disabling Path Alias Transformation in Stencil v4
DESCRIPTION: Configuration example showing how to disable the default path alias transformation in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: CSS Custom Properties Documentation
DESCRIPTION: Example of documenting CSS custom properties in component styles using JSDoc comments

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3.1.0
DESCRIPTION: Configuration snippet for enabling the transformAliasedImportPaths feature in Stencil v3.1.0. This feature transforms aliased import paths based on TypeScript configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Advanced Event Configuration Example
DESCRIPTION: Demonstrates configuring an event with custom options including composition, cancellation, and bubbling behavior. Includes handling of prevented default actions.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Setting Asset Path in HTML
DESCRIPTION: Example of setting asset path in an HTML file using script tags

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Example of complexType in JsonDocsMethod
DESCRIPTION: JSON representation of the complexType field for a @Method in the docs-json output, showing additional type information including parameters and return type.

LANGUAGE: json
CODE:
{
  "complexType": {
    "signature": "(event?: UIEvent) => Promise<any>",
    "parameters": [
      {
        "tags": [
          {
            "name": "param",
            "text": "event The user interface event that called the open."
          }
        ],
        "text": "The user interface event that called the open."
      }
    ],
    "references": {
      "Promise": {
        "location": "global",
        "id": "global::Promise"
      },
      "UIEvent": {
        "location": "global",
        "id": "global::UIEvent"
      },
      "HTMLElement": {
        "location": "global",
        "id": "global::HTMLElement"
      }
    },
    "return": "Promise<any>"
  }
}

----------------------------------------

TITLE: Configuring Service Worker in Stencil
DESCRIPTION: Example of configuring the Service Worker in a Stencil project's config file. It shows how to customize the globPatterns for asset caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Example Telemetry Event Object in JavaScript
DESCRIPTION: This snippet shows the structure of a typical telemetry event object collected by Stencil. It includes information about the Stencil version, command used, system details, and project configuration.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Running Static Build in Stencil
DESCRIPTION: Demonstrates how to run a static build in Stencil using the --prerender flag. This command enables prerendering of components during the build process.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Functional Component with Children
DESCRIPTION: Implementation of a functional component that accepts both props and children arguments. Shows how to handle child elements passed to the component.

LANGUAGE: tsx
CODE:
const Hello = (props, children) => [
  <h1>Hello, {props.name}</h1>,
  children
];

----------------------------------------

TITLE: Setting Custom Destination for Copy Task in WWW Output Target
DESCRIPTION: This example shows how to customize the build directory and set a specific destination for copying font files in the WWW output target configuration.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]

----------------------------------------

TITLE: Using Fragment in Stencil Component Render Method
DESCRIPTION: Demonstrates the use of Fragment (via <></> syntax) in a Stencil component's render method to group elements without a wrapper node. This requires specific TypeScript compiler options to be set.

LANGUAGE: typescript
CODE:
import { Component, Fragment } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Installing Stencil Store via NPM
DESCRIPTION: Command to install @stencil/store package as a dev dependency using npm or yarn.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Full Stencil Build in NodeJS
DESCRIPTION: Demonstrates a complete example of setting up and running a Stencil build in a NodeJS environment, including config loading and compiler creation.

LANGUAGE: typescript
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Importing Hydrate Functions in JavaScript
DESCRIPTION: Example of importing the hydrateDocument function from a published package

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Mocking Custom Code in Stencil with TypeScript
DESCRIPTION: Creation of a mock for the 'getRandomInt' function in a __mocks__ directory. This mock returns a fixed value instead of a random number.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Importing Hydrate App Functions in Node Server
DESCRIPTION: This code demonstrates how to import the necessary functions from the hydrate app module in a Node server.

LANGUAGE: javascript
CODE:
import { createWindowFromHtml, hydrateDocument, renderToString, streamToString } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Consuming Custom Elements Example
DESCRIPTION: Example showing how to define and use a custom element built with the dist-custom-elements output target.

LANGUAGE: typescript
CODE:
import { defineCustomElement } from 'my-library/dist/components/hello-world';

defineCustomElement(); // Same as manually calling: customElements.define('hello-world', HelloWorld);

----------------------------------------

TITLE: Using Ionic Components in Ember Templates
DESCRIPTION: Example of using an Ionic Framework component (ion-toggle) in an Ember component template.

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Using Fragment Component in Stencil
DESCRIPTION: Shows how to use the Fragment component to group elements without a wrapper node. Requires proper TypeScript compiler options for JSX fragment support.

LANGUAGE: typescript
CODE:
import { Component, Fragment } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Building Stencil Component Library
DESCRIPTION: Command to build the Stencil component library and generate component wrappers.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Creating Node System for Stencil Compiler in TypeScript
DESCRIPTION: Creates the system based on NodeJS APIs used by the compiler. This handles file system operations and content hashing. It requires the NodeJS 'process' object as an argument.

LANGUAGE: typescript
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Array Updates with Watch in Stencil
DESCRIPTION: Shows how to properly update arrays in Stencil components using immutable operations to trigger @Watch and component re-renders. Includes example with interval-based updates.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() randNumbers: number[] = [];

  private timer: NodeJS.Timer;

  @Watch('randNumbers')
  watchStateHandler(newValue: number[], oldValue: number[]) {
    console.log('The old value of randNumbers is: ', oldValue);
    console.log('The new value of randNumbers is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.randNumbers = [...this.randNumbers, newVal]
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return(
      <div>
        randNumbers contains:
        <ol>
          {this.randNumbers.map((num) => <li>{num}</li>)}
        </ol>
      </div>
    )
  }
}

----------------------------------------

TITLE: Setting Asset Path in Stencil Application
DESCRIPTION: Shows how to use setAssetPath() to set the path for Stencil to resolve local assets. This is typically done at the application level to configure asset resolution.

LANGUAGE: typescript
CODE:
import { setAssetPath } from '@stencil/core';
setAssetPath(`{window.location.origin}/`);

----------------------------------------

TITLE: Configuring Playwright for Stencil Projects
DESCRIPTION: Creates a Playwright configuration file using the Stencil adapter's createConfig function and custom matchers.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

// Add custom Stencil matchers to Playwright assertions
expect.extend(matchers);

export default createConfig({
  // Overwrite Playwright config options here
});

----------------------------------------

TITLE: Documenting CSS Variables in Stencil (CSS)
DESCRIPTION: Shows how to document CSS variables (custom properties) in Stencil using JSDoc-style comments. This example documents a primary color variable.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: Building Static Sites with Stencil CLI
DESCRIPTION: Command to enable prerendering during the Stencil build process using the --prerender flag.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Importing Hydrate App in JavaScript
DESCRIPTION: This snippet demonstrates how to import the hydrateDocument function from the generated hydrate app module in a Node.js server environment.

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Worker with External Dependencies
DESCRIPTION: Example of a Web Worker that imports external dependencies and implements image loading functionality.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Configuring WebdriverIO Visual Service
DESCRIPTION: Configuration example showing how to set up the visual service in WebdriverIO config file.

LANGUAGE: typescript
CODE:
https://github.com/webdriverio/component-testing-examples/blob/2de295ab568b5163e67d716156221578b6536d9d/stencil-component-starter/wdio.conf.ts#L119-L126)

----------------------------------------

TITLE: Configuring React Library TypeScript
DESCRIPTION: Project-specific TypeScript configuration for the React library component

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2015"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2015",
    "skipLibCheck": true,
    "jsx": "react",
    "allowSyntheticDefaultImports": true,
    "declarationDir": "./dist/types"
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: Importing Stencil Core Compiler in NodeJS
DESCRIPTION: Shows how to import the Stencil compiler in a NodeJS environment using CommonJS syntax.

LANGUAGE: tsx
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Configuring Stencil WWW Output Target for Playwright
DESCRIPTION: TypeScript configuration for the Stencil www output target, including copy options for HTML and CSS files.

LANGUAGE: typescript
CODE:
{
   type: 'www',
   serviceWorker: null,
   copy: [{ src: '**/*.html' }, { src: '**/*.css' }]
}

----------------------------------------

TITLE: Importing Hydrate App in Node.js Server
DESCRIPTION: This code demonstrates how to import the hydrateDocument function from the generated hydrate app module in a Node.js server environment.

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Configuring Custom Service Worker in Stencil
DESCRIPTION: Example of configuring a custom service worker in a Stencil project by specifying the swSrc path in the config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        swSrc: 'src/sw.js'
      }
    }
  ]
};

----------------------------------------

TITLE: Custom Rollup Plugins Configuration
DESCRIPTION: Example of configuring custom Rollup plugins in Stencil, showing how to add plugins before node-resolve and after commonjs transform.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Configuring Vite for Vue Custom Elements
DESCRIPTION: Vite configuration to properly handle custom elements in Vue applications.

LANGUAGE: typescript
CODE:
export default defineConfig({
  plugins: [
    vue({
      template: {
        compilerOptions: {
          isCustomElement: (tag) => tag.includes('-'),
        },
      },
    }),
    vueJsx(),
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  }
})

----------------------------------------

TITLE: Basic Screenshot Comparison in Stencil E2E Test
DESCRIPTION: Simple example of setting up a screenshot comparison test using Puppeteer in a Stencil end-to-end test. It demonstrates how to create a page, set content, and compare screenshots.

LANGUAGE: javascript
CODE:
it('render something', async () => {
  const page: E2EPage = await newE2EPage();
  await page.setContent('<my-cmp></my-cmp>');
  await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
});

----------------------------------------

TITLE: Using Component Library in Vue App
DESCRIPTION: Importing and using the component library plugin in a Vue application's main.js file.

LANGUAGE: javascript
CODE:
import { ComponentLibrary } from 'vue-library';

createApp(App).use(ComponentLibrary).mount('#app');

----------------------------------------

TITLE: Rollup Configuration for Custom Elements
DESCRIPTION: Example Rollup configuration for consuming Stencil custom elements, including asset copying setup.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Demonstrating Proper HTML Tag Naming for Stencil Components
DESCRIPTION: This snippet illustrates the correct way to name HTML tags for Stencil components, using a meaningful prefix to prevent collisions and identify the component collection.

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

----------------------------------------

TITLE: Configuring Prerender Options for Stencil Static Site Generation
DESCRIPTION: This TypeScript configuration file sets up options for debugging Stencil's prerendering process. It disables URL crawling, specifies entry URLs, and enables runtime logging for easier debugging.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: JavaScript code to import all components from the Ionic Framework in an Ember application.

LANGUAGE: javascript
CODE:
import '@ionic/core'; // installs all the components from Ionic Framework

----------------------------------------

TITLE: Using a Helper Function in a Service in Stencil
DESCRIPTION: This snippet shows a service that uses the 'getRandomInt' helper function. It's used to demonstrate how mocking affects dependent code.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Using componentOnReady in TypeScript
DESCRIPTION: Example showing how to use componentOnReady() to execute code after a component's first render cycle completes.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Accessing Web Worker Instance Directly in Stencil
DESCRIPTION: Demonstrates how to access the actual Worker instance in Stencil for manual postMessage usage, alongside the proxy methods.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    worker.postMessage(['send data manually']);

    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Disabling Service Worker Generation
DESCRIPTION: Configuration to disable service worker generation in Stencil build process by setting serviceWorker to null.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Custom Service Worker Boilerplate
DESCRIPTION: Boilerplate code for a custom Service Worker file, including Workbox import and precache injection point.

LANGUAGE: javascript
CODE:
// change to the version you get from `npm ls workbox-build`
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Transpiling Stencil Code using transpile() Function
DESCRIPTION: Demonstrates the usage of the transpile() function to convert Stencil source code to JavaScript. It accepts a string of code and optional TranspileOptions, returning a Promise with TranspileResults.

LANGUAGE: typescript
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Setting Component Mode in TypeScript
DESCRIPTION: Demonstrates how to use the setMode() function to set the style mode of a component based on an attribute. This allows for dynamic styling of components.

LANGUAGE: typescript
CODE:
import { setMode } from '@stencil/core'

// set mode based on a property
setMode((el) => el.getAttribute('mode'));

----------------------------------------

TITLE: Accessing Compiler Dependencies
DESCRIPTION: Demonstrates how to access the compiler's dependencies information, which includes versions of TypeScript, Rollup, and Terser used in this version of Stencil.

LANGUAGE: typescript
CODE:
dependencies: CompilerDependency[]

----------------------------------------

TITLE: Warning-Enabled Copy Configuration
DESCRIPTION: Configuration example showing how to enable warnings for missing source files in copy tasks.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Importing and Initializing Stencil Component Library
DESCRIPTION: Shows how to import and initialize a Stencil component library in an application setup script. It demonstrates setting a nonce for CSP, applying polyfills, and defining custom elements.

LANGUAGE: ts
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Customizing Footer in Stencil Docs-Readme Output
DESCRIPTION: This configuration snippet shows how to customize the footer of auto-generated readme files by adding a footer property to the docs-readme output target. Markdown can be used in the footer.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Full Build Example with Stencil Core Compiler
DESCRIPTION: Demonstrates a complete example of running a full build using the Stencil Core Compiler in a NodeJS environment. It includes importing necessary modules, creating a logger and system, loading config, creating a compiler instance, and running the build.

LANGUAGE: typescript
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project using the plugins array in the configuration file. It imports the necessary modules and configures the Sass plugin.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Handling Object Updates in Stencil Components
DESCRIPTION: Demonstrates proper object mutation techniques in Stencil components using the spread operator to ensure state updates trigger component re-renders.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Disabling transformAliasedImportPaths in Stencil v4.0.0 Configuration
DESCRIPTION: Example of how to disable the default transformAliasedImportPaths functionality in a Stencil v4.0.0 configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Running Stencil CLI with Options in TypeScript
DESCRIPTION: Executes the Stencil CLI with given options. This function is used by Stencil's default bin/stencil file but can also be used externally.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Configuring TypeScript for the Vue library
DESCRIPTION: Project-specific TypeScript configuration for the Vue component library.

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2020"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2017",
    "skipLibCheck": true
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: Configuring Testing Scripts in package.json for Stencil
DESCRIPTION: Example npm scripts for running different types of Stencil tests, including unit tests, watched unit tests, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Configuring Event Options in Stencil
DESCRIPTION: Shows how to configure custom event behavior using EventOptions interface with properties for event name, bubbling, cancelable, and composition.

LANGUAGE: tsx
CODE:
export interface EventOptions {
  /**
   * A string custom event name to override the default.
   */
  eventName?: string;
  /**
   * A Boolean indicating whether the event bubbles up through the DOM or not.
   */
  bubbles?: boolean;

  /**
   * A Boolean indicating whether the event is cancelable.
   */
  cancelable?: boolean;

  /**
   * A Boolean value indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.
   */
  composed?: boolean;
}

----------------------------------------

TITLE: Implementing CSP Nonce in Stencil Custom Elements
DESCRIPTION: Example demonstrating nonce implementation in the dist-custom-elements output target, showing integration with an Angular application using the setNonce helper function.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Example Telemetry Event Data Structure in JavaScript
DESCRIPTION: Shows the structure and content of a typical telemetry event collected by Stencil CLI. Includes information about build configuration, system details, dependencies, and command execution details.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Complex E2E Test with Event Spying
DESCRIPTION: Shows how to test component class changes, property updates, and event emissions using Stencil's E2E testing utilities.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

it('should create toggle, unchecked by default', async () => {
  const page = await newE2EPage();

  await page.setContent(`
    <ion-toggle class="pretty-toggle"></ion-toggle>
  `);

  const ionChange = await page.spyOnEvent('ionChange');

  const toggle = await page.find('ion-toggle');

  expect(toggle).toHaveClasses(['pretty-toggle', 'hydrated']);

  expect(toggle).not.toHaveClass('toggle-checked');

  toggle.setProperty('checked', true);

  await page.waitForChanges();

  expect(toggle).toHaveClass('toggle-checked');

  expect(ionChange).toHaveReceivedEventDetail({
    checked: true,
    value: 'on'
  });
});

----------------------------------------

TITLE: Using Build Constants in Stencil Component
DESCRIPTION: Demonstrates how to import and use Build constants from @stencil/core to conditionally execute code based on development or production mode, and browser or server environment.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Resolving Asset Paths with getAssetPath in Stencil
DESCRIPTION: Demonstrates how to use the getAssetPath function to resolve asset paths relative to the asset base path in a Stencil project.

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff'); 

----------------------------------------

TITLE: Using forceUpdate() in TypeScript
DESCRIPTION: Shows how to use the forceUpdate() method to schedule a new render of a component instance, even if no state has changed. This method is not synchronous and may perform the DOM render in the next frame.

LANGUAGE: typescript
CODE:
import { forceUpdate } from '@stencil/core'

// inside a class component function
forceUpdate(this);

----------------------------------------

TITLE: Using page.waitForChanges() in E2E Tests
DESCRIPTION: Demonstrates the usage of page.waitForChanges() method, which is a utility for waiting for Stencil components to rehydrate after operations that trigger re-renders. This is crucial for ensuring test stability when dealing with dynamic component updates.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // Assume we have a template setup with the `my-component` component and a `button`
    await page.goto('/my-component/my-component.e2e.html');

    const button = page.locator('button');
    // Assume clicking the button changes the `@Prop()` values on `my-component`
    button.click();
    await page.waitForChanges();
  });
});

----------------------------------------

TITLE: Resetting Stencil Store in Tests
DESCRIPTION: Example of how to reset the store state before each test using the dispose() method. This ensures a clean state for each test case when working with global state.

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: Custom Service Worker with Update Handling
DESCRIPTION: Implements a custom service worker that listens for the 'skipWaiting' message to update the service worker.

LANGUAGE: javascript
CODE:
importScripts("workbox-v4.3.1/workbox-sw.js");

self.addEventListener("message", ({ data }) => {
  if (data === "skipWaiting") {
    self.skipWaiting();
  }
});

self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Configuring NPM Scripts for Stencil Testing
DESCRIPTION: Example package.json scripts configuration for running Stencil unit tests, watch mode tests, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Configuring Test Scripts in package.json
DESCRIPTION: NPM script configuration to run both Stencil and WebdriverIO tests

LANGUAGE: json
CODE:
{
    "scripts:": {
        "test.e2e": "stencil test && wdio run wdio.conf.ts"
    }
}

----------------------------------------

TITLE: Defining Prerender Config Structure (TypeScript)
DESCRIPTION: Demonstrates the basic structure of a prerender config file. It exports a config object using the PrerenderConfig interface from Stencil core.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Configuring Output Directory and Strict Mode
DESCRIPTION: This configuration example demonstrates how to specify a custom output directory for README files and enable strict mode for documentation warnings.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      dir: 'output',
      strict: true
    }
  ]
};

----------------------------------------

TITLE: Listening for appload Event in TypeScript
DESCRIPTION: Shows how to listen for the special 'appload' event on the window object. This event is emitted when the app and all its child components have finished loading. The event detail includes the namespace of the app that emitted the event.

LANGUAGE: typescript
CODE:
window.addEventListener('appload', (event) => {
  console.log(event.detail.namespace);
});

----------------------------------------

TITLE: Running Stencil CLI with Options
DESCRIPTION: Executes the Stencil CLI with given options. This function is used by Stencil's default bin/stencil file but can also be used externally.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Implementing formAssociatedCallback in Stencil
DESCRIPTION: Shows how to use the formAssociatedCallback to react when a component is associated with or disassociated from a form.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true,
})
export class FormAssociatedCmp {
  @AttachInternals()
  internals: ElementInternals;

  formAssociatedCallback(form) {
    form.ariaLabel = 'formAssociated called';
  }

  render() {
    return <input type="text" />;
  }
}

----------------------------------------

TITLE: Initializing Lerna Monorepo for Stencil and Angular Integration
DESCRIPTION: Commands to set up a Lerna monorepo and install necessary dependencies for Stencil and Angular integration.

LANGUAGE: bash
CODE:
lerna init

npm install

npm install typescript @types/node --save-dev

----------------------------------------

TITLE: Importing Test Function in TypeScript
DESCRIPTION: Demonstrates the correct way to import the test function from @stencil/playwright instead of @playwright/test for Stencil component testing.

LANGUAGE: typescript
CODE:
// THIS IS CORRECT
import { test } from '@stencil/playwright';

// THIS IS NOT!!
// import { test } from '@playwright/test';

----------------------------------------

TITLE: Configuring Supplemental Public Types
DESCRIPTION: Configuration for including additional type definitions in documentation

LANGUAGE: ts
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json',
      supplementalPublicTypes: 'src/public-interfaces.ts',
    }
  ]
};

----------------------------------------

TITLE: Form-Associated Custom Element in Stencil
DESCRIPTION: Shows how to create a form-associated custom element that integrates natively with HTML form elements. Includes element internals setup and form value management.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css',
  formAssociated: true
})
export class MyName {
  @State() value: string;
  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.internals.setFormValue(event.target.value);
  }

  render() {
    return (
      <label>
        Name:
        <input
          type="text"
          value={this.value}
          onInput={(event) => this.handleChange(event)}
        />
      </label>
    );
  }
}

----------------------------------------

TITLE: Configuring Hydrate App Output Target in Stencil
DESCRIPTION: This snippet shows how to add the 'dist-hydrate-script' output target to the stencil.config.ts file. This generates a hydrate app in the root project directory for server-side rendering.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Importing Dependencies in a Stencil Web Worker
DESCRIPTION: This example shows how to import both npm dependencies and local modules within a Stencil Web Worker. It demonstrates that normal ESM imports can be used, which Stencil will bundle appropriately.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Querying Typed Stencil Component in TypeScript
DESCRIPTION: Example showing how to query and interact with a typed Stencil component using the automatically generated HTML element interface. The code demonstrates accessing a button component with proper TypeScript typing.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Loading Stencil Components via CDN in HTML
DESCRIPTION: This snippet shows how to load a Stencil component through a CDN in a simple HTML page. It uses a script tag to import the Ionic framework's core library.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Transpile Function Declaration
DESCRIPTION: Function signature for transpiling code with optional TranspileOptions, returning a Promise of TranspileResults

LANGUAGE: tsx
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Updating TypeScript Configuration
DESCRIPTION: Required TypeScript configuration update to support the Disposable symbol

LANGUAGE: json
CODE:
{
  "lib": [
    "...",
    "ESNext.Disposable"
  ],
  "..."
}

----------------------------------------

TITLE: Subscribing to Push Notifications in Stencil
DESCRIPTION: Example of subscribing a user to push notifications in a Stencil application. This function demonstrates how to use the Push API to obtain a subscription object.

LANGUAGE: typescript
CODE:
async function subscribeUser() {
  if ('serviceWorker' in navigator) {
    const registration = await navigator.serviceWorker.ready;

    const subscription = await registration.pushManager
      .subscribe({ userVisibleOnly: true })
      .catch(console.error);

    if (!subscription) {
      return;
    }

    // the subscription object is what we want to send to our backend
    console.log(subscription.endpoint);
  }
}

----------------------------------------

TITLE: Service Worker Update Handler Component
DESCRIPTION: Component code for handling service worker updates and displaying a reload toast when updates are available.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Setting Component Properties in E2E Tests
DESCRIPTION: Shows how to set properties on a component during an E2E test using page.$eval, which allows manipulation of the component in the browser's context.

LANGUAGE: typescript
CODE:
await page.setContent(`
      <prop-cmp></prop-cmp>
    `);

await page.$eval('prop-cmp', (elm: any) => {
  elm.first = 'Marty';
  elm.lastName = 'McFly';
});

await page.waitForChanges();

----------------------------------------

TITLE: Prop Mutability in Stencil
DESCRIPTION: Demonstrates how to make a prop mutable within a Stencil component.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class ToDoListItem {
   @Prop({ mutable: true }) thingToDo: string;

   componentDidLoad() {
      this.thingToDo = 'Ah! A new value!';
   }
}

----------------------------------------

TITLE: Webpack Configuration for Custom Elements
DESCRIPTION: Example webpack configuration for consuming custom elements, including asset handling.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Defining Stencil Component Classes in TypeScript
DESCRIPTION: Illustrates how to define Stencil component classes in TypeScript, showing that class names should not include prefixes.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-button'
})
export class Button { ... }

@Component({
  tag: 'ion-menu'
})
export class Menu { ... }

----------------------------------------

TITLE: Configuring TypeScript for Monorepo Root
DESCRIPTION: TypeScript configuration for the root of the monorepo project.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Initializing and Communicating with a Web Worker in Vanilla JavaScript
DESCRIPTION: Demonstrates how to create a new Web Worker instance and set up basic message passing between the main thread and the worker thread using the vanilla Web Worker API.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Creating Form-Associated Custom Elements in Stencil
DESCRIPTION: This example illustrates how to create a form-associated custom element using Stencil. It shows the use of the @AttachInternals decorator and the ElementInternals interface for form integration.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css',
  formAssociated: true
})
export class MyName {
  @State() value: string;
  @AttachInternals() internals: ElementInternals;

  handleChange(event) {
    this.internals.setFormValue(event.target.value);
  }

  render() {
    return (
      <label>
        Name:
        <input
          type="text"
          value={this.value}
          onInput={(event) => this.handleChange(event)}
        />
      </label>
    );
  }
}

----------------------------------------

TITLE: Creating a Worker Pool in Stencil
DESCRIPTION: This example shows how to create a pool of Web Workers in Stencil using the workerPath provided by the compiler.

LANGUAGE: tsx
CODE:
import { workerPath } from '../../stuff.worker.ts?worker';

const workerPool = [
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
];

----------------------------------------

TITLE: Service Worker Update Handler Component
DESCRIPTION: Implementation of a service worker update listener in a Stencil component, including toast notification for updates.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Testing with a Mocked Function in Stencil with TypeScript
DESCRIPTION: This test file demonstrates how to use Jest to mock a module and test a function that depends on the mocked module. It shows the importance of calling jest.mock() before importing the tested module.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Rollup Plugin Asset Copy Configuration
DESCRIPTION: Example configuration using rollup-plugin-copy to copy assets during build

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Using getElement in Stencil
DESCRIPTION: Shows how to use the getElement utility function to retrieve a Stencil element for a given reference. This is useful for interacting with Stencil components programmatically.

LANGUAGE: typescript
CODE:
import { getElement } from '@stencil/core'

const stencilComponent = getElement(document.querySelector('my-cmp'))
if (stencilComponent) {
  stencilComponent.componentOnReady().then(() => { ... })
}

----------------------------------------

TITLE: Form State Restore Implementation for Date Picker
DESCRIPTION: Example showing implementation of formStateRestoreCallback for a date picker component with state restoration.

LANGUAGE: tsx
CODE:
import { Component, h, State, AttachInternals } from '@stencil/core';

@Component({
  tag: 'fa-date-picker',
  formAssociated: true,
})
export class MyDatePicker {
  @State() value: string = "";
  @State() view: "weeks" | "months" = "weeks";

  @AttachInternals()
  internals: ElementInternals;

  onInputChange(e) {
    e.preventDefault();
    const date = e.target.value;
    this.setValue(date);
  }

  setValue(date: string) {
    this.internals.setFormValue(date, `${date}#${this.view}`);
  }

  formStateRestoreCallback(state, _mode) {
    const [date, view] = state.split("#");
    this.view = view;
    this.setValue(date);
  }

  render() {
    return <div>
      Mock Date Picker, mode: {this.view}
      <input class="date-picker" onChange={e => this.onInputChange(e)}></input>
    </div>
  }
}

----------------------------------------

TITLE: Configuring Hydrate App Output Target in Stencil
DESCRIPTION: This snippet shows how to add the 'dist-hydrate-script' output target to the Stencil configuration file. This generates a hydrate app in the project root directory for server-side rendering.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Querying Elements in Shadow DOM
DESCRIPTION: This snippet demonstrates how to query elements within the Shadow DOM of a Stencil component using the @Element decorator and shadowRoot property.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: CLI JSON Docs Generation in Bash
DESCRIPTION: Command to generate JSON documentation using Stencil CLI

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: OptimizeJs Function Declaration
DESCRIPTION: TypeScript function signature for JavaScript optimization utility.

LANGUAGE: javascript
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Installing Stencil Store with NPM/Yarn
DESCRIPTION: Command to install @stencil/store as a development dependency in your project.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Configuring Page-Specific Hydrate Options
DESCRIPTION: Example of implementing hydrateOptions hook in prerender config to set individual page rendering options.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Documenting CSS Variables in Stencil Components
DESCRIPTION: Example of how to document CSS variables in a Stencil component's CSS file using JSDoc-style comments.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Installing Lerna for Monorepo Management
DESCRIPTION: Command to globally install Lerna for managing monorepo projects.

LANGUAGE: bash
CODE:
npm install --global lerna

----------------------------------------

TITLE: Importing and Initializing Stencil Component Library
DESCRIPTION: This snippet demonstrates how to import and initialize a Stencil component library in an application setup script. It includes applying polyfills, defining custom elements, and setting a nonce for Content Security Policy.

LANGUAGE: ts
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Calling a Public Method on a Stencil Component
DESCRIPTION: Shows how to call a public method on a Stencil component. It's important to ensure the component is defined using customElements.whenDefined() before calling the method.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Advanced Form Implementation in Stencil TSX
DESCRIPTION: Shows a complex form implementation with multiple input types including email and select dropdowns. Features email validation using the browser's constraint validation API and handling of multiple select elements.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Disabling transformAliasedImportPaths in Stencil v4
DESCRIPTION: Configuration example showing how to disable the new default transformAliasedImportPaths functionality in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Calling a Public Method on a Stencil Component
DESCRIPTION: Demonstrates how to call a public method on a Stencil component after ensuring it's defined using customElements.whenDefined().

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Setting Nonce for Dist Output in Angular
DESCRIPTION: Demonstrates how to use the setNonce helper function to apply a nonce to all script and style tags when consuming the dist output target in an Angular application.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Configuring Stencil Output Target for VS Code Documentation
DESCRIPTION: This snippet shows how to add the 'docs-vscode' output target to the Stencil configuration file. It generates a JSON file containing custom element information for VS Code.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Using a Stencil Component in HTML and TSX
DESCRIPTION: This snippet demonstrates how to use a Stencil component in both HTML and TSX files after it has been compiled.

LANGUAGE: html
CODE:
<!-- Here we use the component in an HTML file -->
<todo-list></todo-list>

LANGUAGE: tsx
CODE:
{/* Here we use the component in a TSX file */}
<todo-list></todo-list>

----------------------------------------

TITLE: Testing Stencil Component with JSX Template
DESCRIPTION: This example shows how to use the template option in newSpecPage() to test a Stencil component using JSX syntax. It demonstrates passing props to the component and checking the rendered output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Testing Stencil Component with JSX Template
DESCRIPTION: This example shows how to use the template option in newSpecPage() to test a Stencil component using JSX syntax. It demonstrates passing props to the component and checking the rendered output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Updating Stencil to the Latest Version
DESCRIPTION: Command to update the @stencil/core package to its latest version in an existing Stencil project. The --save-exact flag ensures the exact version is saved in package.json.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Reloading App on Service Worker Update
DESCRIPTION: Code to be added to a Stencil component's componentWillLoad lifecycle method to reload the app when a new Service Worker takes control.

LANGUAGE: typescript
CODE:
componentWillLoad() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker
      .getRegistration()
      .then(registration => {
        if (registration?.active) {
          navigator.serviceWorker.addEventListener(
            'controllerchange',
            () => window.location.reload()
          );
        }
      })
  }
}

----------------------------------------

TITLE: Resetting Stencil Store in Test Environment
DESCRIPTION: Shows how to reset the store state before each test using the dispose() method in a beforeEach hook.

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: JSX Utility Implementation for Stencil Testing
DESCRIPTION: Utility functions for enabling JSX support in Stencil component tests, including createElement and appendChild implementations.

LANGUAGE: typescript
CODE:
export const createElement = (tag, props, ...children) => {
    if (typeof tag === 'function') {
        return tag(props, ...children)
    }
    const element = document.createElement(tag)

    Object.entries(props || {}).forEach(([name, value]) => {
        if (name.startsWith('on') && name.toLowerCase() in window) {
            element.addEventListener(name.toLowerCase().substr(2), value)
        } else {
            element.setAttribute(name, value.toString())
        }
    })

    children.forEach((child) => {
        appendChild(element, child)
    })

    return element
}

export const appendChild = (parent, child) => {
    if (Array.isArray(child)) {
        child.forEach((nestedChild) => appendChild(parent, nestedChild))
    } else {
        parent.appendChild(child.nodeType ? child : document.createTextNode(child))
    }
}

export const createFragment = (_, ...children) => {
    return children
}

----------------------------------------

TITLE: Configuring Prerender in Stencil Config (TypeScript)
DESCRIPTION: Example of setting up the prerender config file path in the Stencil configuration file (stencil.config.ts).

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Configuring Stencil for Angular Output
DESCRIPTION: Stencil configuration to generate Angular component wrappers.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Implementing Prop Watchers in Stencil
DESCRIPTION: Shows how to implement prop watchers to handle changes to object and array props with parsing logic.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

LANGUAGE: tsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Setting Component Style Mode in Stencil
DESCRIPTION: Demonstrates how to use the setMode() function to set the style mode of a component based on an attribute. This allows for dynamic styling of components.

LANGUAGE: typescript
CODE:
import { setMode } from '@stencil/core'

// set mode based on a property
setMode((el) => el.getAttribute('mode'));

----------------------------------------

TITLE: Demonstrating Connected Callback Flow in Stencil
DESCRIPTION: Example showing how connectedCallback is called when a component is attached to the DOM, including the relationship with componentWillLoad for first-time initialization.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Subfolder Component Directory Structure
DESCRIPTION: Example of the directory structure created when generating a new Stencil component in a subfolder.

LANGUAGE: plain
CODE:
src
└── components
    └── pages
        └── page-home
            ├── page-home.css
            ├── page-home.e2e.ts
            ├── page-home.spec.ts
            └── page-home.tsx

----------------------------------------

TITLE: Configuring TypeScript for the monorepo
DESCRIPTION: TypeScript configuration for the root of the monorepo workspace.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Using a Stencil Component in HTML
DESCRIPTION: Example of how to use a Stencil component in HTML markup after it has been compiled.

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Vitest Test Script Configuration
DESCRIPTION: Package.json script configuration for running Vitest tests.

LANGUAGE: json
CODE:
{
    "scripts": {
        "test": "vitest --run"
    },
}

----------------------------------------

TITLE: Setting Nonce for Custom Elements Output Target in Angular (TypeScript)
DESCRIPTION: This snippet shows how to use the setNonce helper function to set the nonce attribute for all script and style tags when consuming the dist-custom-elements output target in an Angular application.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Documenting CSS Variables
DESCRIPTION: Example of documenting CSS variables using JSDoc-style comments

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3.1.0
DESCRIPTION: Configuration snippet for enabling the transformAliasedImportPaths feature in Stencil v3.1.0. This feature transforms aliased import paths to their actual file paths.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Custom Rollup Plugin Configuration in Stencil
DESCRIPTION: This snippet demonstrates how to configure custom Rollup plugins in Stencil's config file. It shows how to inject plugins before node-resolve and after commonjs transform.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Component Import Examples
DESCRIPTION: Examples of different ways to import Stencil components.

LANGUAGE: javascript
CODE:
// this import loads all compiled components
import { MyComponent } from 'my-design-system'
// only import compiled code for MyComponent
import { MyComponent } from 'my-design-system/my-component'

----------------------------------------

TITLE: Using Build Conditionals in Stencil for Prerendering
DESCRIPTION: Demonstrates the use of Build.isBrowser conditional to differentiate between browser and prerendering environments. This helps in executing certain code only in the browser context.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Using createCompiler() Function
DESCRIPTION: Function signature for creating a compiler instance with configuration options.

LANGUAGE: tsx
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Styling CSS Parts from Light DOM
DESCRIPTION: Shows how to style CSS parts defined in a Stencil component from the light DOM using the ::part() pseudo-element.

LANGUAGE: css
CODE:
shadow-card::part(heading) {
  text-transform: uppercase;
}

----------------------------------------

TITLE: Setting Nonce for Custom Elements Output Target in Angular (TypeScript)
DESCRIPTION: This snippet shows how to use the setNonce helper function to set the nonce attribute for all script and style tags when consuming the dist-custom-elements output target in an Angular application.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Handling Push Events in Service Worker
DESCRIPTION: Example of handling push events in a service worker, including creating and showing notifications.

LANGUAGE: javascript
CODE:
self.addEventListener('push', event => {
  console.log(`Push received with data "${event.data.text()}"`);

  const title = 'Push Notification';
  const options = {
    body: `${event.data.text()}`,
    data: { href: '/users/donald' },
    actions: [
      { action: 'details', title: 'Details' },
      { action: 'dismiss', title: 'Dismiss' },
    ],
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

----------------------------------------

TITLE: E2E Test with page.goto()
DESCRIPTION: Example of writing an e2e test using page.goto() to load a pre-defined HTML template

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // The path here is the path to the www output relative to the dev server root directory
    await page.goto('/components/my-component/test/my-component.e2e.html');

    // Rest of test
    const component = await page.locator('my-component');
    await expect(component).toHaveText(`Hello World! I'm Stencil`);
  });
});

----------------------------------------

TITLE: Applying Inline Styles to a Stencil Component
DESCRIPTION: This snippet demonstrates how to apply inline CSS styles to a Stencil component using the styles option in the @Component decorator.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styles: 'div { background-color: #fff }'
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Primary Package Output Target Validation Configuration
DESCRIPTION: Configuration example showing how to enable and configure primary package output target validation in Stencil. Demonstrates setting the isPrimaryPackageOutputTarget flag and enabling validation.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Configuring Vue Library TypeScript
DESCRIPTION: TypeScript configuration for the Vue wrapper library extending the root config

LANGUAGE: json
CODE:
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "lib": ["dom", "es2020"],
    "module": "es2015",
    "moduleResolution": "node",
    "target": "es2017",
    "skipLibCheck": true
  },
  "include": ["lib"],
  "exclude": ["node_modules"]
}

----------------------------------------

TITLE: Updating Vue Library package.json
DESCRIPTION: Changes to make in the Vue library's package.json file for proper configuration.

LANGUAGE: json
CODE:
{
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "scripts": {
    "test": "echo \"Error: run tests from root\" && exit 1",
    "build": "npm run tsc",
    "tsc": "tsc -p . --outDir ./dist"
  },
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "stencil-library": "*"
  }
}

----------------------------------------

TITLE: Mock Implementation of Helper
DESCRIPTION: Mock implementation of the getRandomInt helper that returns a fixed value

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Implementing SSR with Koa and hydrateComponents
DESCRIPTION: Example of using the hydrateComponents function in a Koa server to perform server-side rendering.

LANGUAGE: typescript
CODE:
import Koa from 'koa';

const app = new Koa();
app.use(async (ctx) => {
  const res = await hydrateComponents(`<!DOCTYPE html>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />
    <title>Document</title>
    <link rel=\"preconnect\" href=\"https://some-url.com\" />
    <style>
      // custom styles here
    </style>
  </head>
  <body>
    <app-root></app-root>
  </body>
</html>`)
  ctx.body = res
})

----------------------------------------

TITLE: Using Component with Child Elements
DESCRIPTION: Demonstrates passing child elements to a functional component.

LANGUAGE: tsx
CODE:
<Hello name="World">
  <p>I'm a child element.</p>
</Hello>

----------------------------------------

TITLE: Handling Notification Clicks in Service Worker
DESCRIPTION: Service Worker code to handle notification click events, including custom actions and opening windows.

LANGUAGE: javascript
CODE:
self.addEventListener('notificationclick', event => {
  const notification = event.notification;
  const action = event.action;

  if (action === 'dismiss') {
    notification.close();
  } else {
    // This handles both notification click and 'details' action,
    // because some platforms might not support actions.
    clients.openWindow(notification.data.href);
    notification.close();
  }
});

----------------------------------------

TITLE: Implementing SSR with Koa and hydrateComponents
DESCRIPTION: Example of using the hydrateComponents function in a Koa server to perform server-side rendering.

LANGUAGE: typescript
CODE:
import Koa from 'koa';

const app = new Koa();
app.use(async (ctx) => {
  const res = await hydrateComponents(`<!DOCTYPE html>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />
    <title>Document</title>
    <link rel=\"preconnect\" href=\"https://some-url.com\" />
    <style>
      // custom styles here
    </style>
  </head>
  <body>
    <app-root></app-root>
  </body>
</html>`)
  ctx.body = res
})

----------------------------------------

TITLE: Defining a Stencil Component with a Method using TypeScript
DESCRIPTION: This snippet defines a Stencil component 'Foo' with a method 'bar' that uses the 'getRandomInt' function. It's used in the subsequent E2E test example to demonstrate mocking in component tests.

LANGUAGE: typescript
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Using Fragment Component in Stencil
DESCRIPTION: Demonstrates how to use Fragment component to group elements without a wrapper node in a Stencil component

LANGUAGE: tsx
CODE:
import { Component, Fragment, h } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Custom Service Worker Configuration in Stencil
DESCRIPTION: Example of how to customize the service worker configuration in Stencil's config file to include additional file types for caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Setting Document Title Using Prerender Config in Stencil
DESCRIPTION: This snippet demonstrates how to use the afterHydrate hook in Stencil's Prerender Config to set the document title based on the URL pathname. It requires the @stencil/core package and utilizes the PrerenderConfig interface.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Form Association Callback Implementation
DESCRIPTION: Example showing implementation of formAssociatedCallback to set ARIA label when form is associated.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true,
})
export class FormAssociatedCmp {
  @AttachInternals()
  internals: ElementInternals;

  formAssociatedCallback(form) {
    form.ariaLabel = 'formAssociated called';
  }

  render() {
    return <input type="text" />;
  }
}

----------------------------------------

TITLE: Configuring JSON Documentation Output Target in Stencil
DESCRIPTION: Add the 'docs-json' output target to your Stencil configuration file to automatically generate JSON documentation on build.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Optimizing CSS in Stencil
DESCRIPTION: Function signature for optimizeCss(), a utility function used by the compiler to optimize CSS.

LANGUAGE: typescript
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Example Telemetry Data Structure in JavaScript
DESCRIPTION: Sample JSON structure showing the anonymous telemetry data collected by Stencil CLI, including system information, dependencies, and build configuration details

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Installing @wdio/visual-service for WebdriverIO
DESCRIPTION: Command to install the @wdio/visual-service plugin for visual testing in a WebdriverIO project.

LANGUAGE: bash
CODE:
npm install --save-dev @wdio/visual-service

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation in Stencil
DESCRIPTION: This snippet shows how to configure a Stencil project to validate the primary package output target. It sets the 'dist' output target as the primary one for validation and enables the validation feature.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Implementing formStateRestoreCallback in Stencil
DESCRIPTION: Demonstrates using the formStateRestoreCallback to restore both the value and view state of a custom date picker component.

LANGUAGE: typescript
CODE:
import { Component, h, State, AttachInternals } from '@stencil/core';

@Component({
  tag: 'fa-date-picker',
  formAssociated: true,
})
export class MyDatePicker {
  @State() value: string = "";
  @State() view: "weeks" | "months" = "weeks";

  @AttachInternals()
  internals: ElementInternals;

  onInputChange(e) {
    e.preventDefault();
    const date = e.target.value;
    this.setValue(date);
  }

  setValue(date: string) {
    // second 'state' parameter is used to store both
    // the input value (`date`) _and_ the current view
    this.internals.setFormValue(date, `${date}#${this.view}`);
  }

  formStateRestoreCallback(state, _mode) {
    const [date, view] = state.split("#");
    this.view = view;
    this.setValue(date);
  }

  render() {
    return <div>
      Mock Date Picker, mode: {this.view}
      <input class="date-picker" onChange={e => this.onInputChange(e)}></input>
    </div>
  }
}

----------------------------------------

TITLE: Using Stencil Store in a Component
DESCRIPTION: Demonstrates how to use the store within a Stencil component, including updating state periodically and rendering state values. It also shows a nested component that updates the store on button click.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Using Stencil Store in a Component
DESCRIPTION: Demonstrates how to use the store within a Stencil component, including updating state periodically and rendering state values. It also shows a nested component that updates the store on button click.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Node Polyfills Configuration in Stencil
DESCRIPTION: Configuration example showing how to set up Node polyfills in a Stencil project using rollup-plugin-node-polyfills.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Basic Web Worker Usage in Vanilla JavaScript
DESCRIPTION: Demonstrates the basic implementation of Web Workers using the native browser API, showing how to create a worker and handle message passing.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Disabling transformAliasedImportPaths in Stencil v4.0.0
DESCRIPTION: Example of disabling the transformAliasedImportPaths feature in a Stencil v4.0.0 configuration file. This can be used as a workaround if issues are encountered with the new default behavior.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Using componentOnReady() in JavaScript
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code after a Stencil component has finished its first render cycle. This method returns a promise that resolves after componentDidRender() on the first render.

LANGUAGE: javascript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Resetting Stencil Store in Test Environment
DESCRIPTION: Example of how to reset the store state before each test using the dispose() method in a beforeEach hook.

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: Component Nesting Example
DESCRIPTION: Demonstrates how to compose components by nesting them within each other using both parent and child components.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Requesting Notification Permissions (JavaScript)
DESCRIPTION: JavaScript code to request notification permissions from the user.

LANGUAGE: javascript
CODE:
if ('Notification' in window && 'serviceWorker' in navigator) {
  Notification.requestPermission(status => {
    // status will either be 'default', 'granted' or 'denied'
    console.log(`Notification permissions have been ${status}`);
  });
}

----------------------------------------

TITLE: Custom Rollup Plugin Configuration - TypeScript
DESCRIPTION: Example configuration for adding custom Rollup plugins to Stencil's build process, showing both before and after plugin injection points.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Disabling Service Worker in Stencil Configuration
DESCRIPTION: Configuration to disable service worker generation during build process.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Utility Interfaces for Children Manipulation
DESCRIPTION: Type definitions for FunctionalUtilities and ChildNode interfaces used in children manipulation.

LANGUAGE: tsx
CODE:
export interface FunctionalUtilities {
  forEach: (children: VNode[], cb: (vnode: ChildNode, index: number, array: ChildNode[]) => void) => void;
  map: (children: VNode[], cb: (vnode: ChildNode, index: number, array: ChildNode[]) => ChildNode) => VNode[];
}
export interface ChildNode {
  vtag?: string | number | Function;
  vkey?: string | number;
  vtext?: string;
  vchildren?: VNode[];
  vattrs?: any;
  vname?: string;
}

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: JavaScript code to import all components from the Ionic Framework in an Ember application's main file.

LANGUAGE: javascript
CODE:
import '@ionic/core'; // installs all the components from Ionic Framework

----------------------------------------

TITLE: Implementing hydrateDocument Function
DESCRIPTION: Example implementation of component hydration using hydrateDocument, taken from Ionic Angular server.

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

export function hydrateComponents(doc) {
  return hydrateDocument(doc)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Asynchronous Text Assertion in WebdriverIO
DESCRIPTION: Shows two approaches for asserting component text content - a basic assertion and a recommended WebdriverIO matcher that handles retries and reduces test flakiness.

LANGUAGE: typescript
CODE:
expect(await $('my-component').getText())
    .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)

LANGUAGE: typescript
CODE:
await expect($('my-component'))
    .toHaveText(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)

----------------------------------------

TITLE: Advanced @State Usage with Timer in Stencil
DESCRIPTION: Illustrates a more complex example of @State usage, where the component updates its state every second using a timer. It also demonstrates proper cleanup in the disconnectedCallback.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Generating Stencil Component in Subfolder
DESCRIPTION: Command to generate a new Stencil component in a specified subfolder path using the CLI generator.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Enabling Path Alias Transformation in Stencil v3.1.0
DESCRIPTION: Configuration for enabling path alias transformation in Stencil v3.1.0 config file

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Event Handling in Stencil Components
DESCRIPTION: Demonstrates how to handle user input events using arrow functions in Stencil components.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Adding Vitest Test Script to package.json
DESCRIPTION: This JSON snippet adds a 'test' script to package.json for running Vitest tests.

LANGUAGE: json
CODE:
{
    "scripts": {
        "test": "vitest --run"
    },
}

----------------------------------------

TITLE: Configuring Stencil Docs JSON Output Target
DESCRIPTION: Demonstrates how to configure the docs-json output target in the Stencil config file for automatic JSON documentation generation during builds.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Building Documentation with Stencil CLI
DESCRIPTION: Commands for generating README documentation using the Stencil CLI build and docs commands

LANGUAGE: bash
CODE:
npx stencil build
npx stencil build --watch
npx stencil build --docs
npx stencil docs

----------------------------------------

TITLE: Correct Component Organization in TypeScript
DESCRIPTION: Series of files showing the proper way to organize component code by separating utilities into their own files.

LANGUAGE: tsx
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Disabling transformAliasedImportPaths in Stencil v4.0.0
DESCRIPTION: Configuration snippet for disabling the transformAliasedImportPaths feature in Stencil v4.0.0, which is enabled by default in this version.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Setting Document Title in Stencil Prerender Config
DESCRIPTION: This code snippet demonstrates how to use the afterHydrate hook in Stencil's Prerender Config to set the document title based on the URL pathname during static site generation. It utilizes the PrerenderConfig interface from @stencil/core.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil
DESCRIPTION: Add the docs-readme output target to your Stencil configuration file to enable README generation.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Creating In-Memory Compiler System
DESCRIPTION: Shows the signature of the createSystem() function, which creates an in-memory CompilerSystem instance independent of any platform.

LANGUAGE: tsx
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Listening to Events in Stencil Components
DESCRIPTION: Demonstrates how to use the @Listen decorator to handle DOM events, including custom events emitted by other components. The example shows listening to a 'todoCompleted' event.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Defining a Stencil Button Component for SSR
DESCRIPTION: Illustrates the structure of a Stencil button component that can be used in server-side rendering scenarios, highlighting potential performance considerations related to CSS imports.

LANGUAGE: tsx
CODE:
import { Component, Fragment, h } from '@stencil/core'
@Component({
  tag: 'my-btn',
  styleUrl: './button.css'
})
export class MyBtn {
  render() {
    return (
      <>
        <button>...</button>
      </>
    );
  }
}

----------------------------------------

TITLE: Disabling Service Worker in Stencil Config (TypeScript)
DESCRIPTION: Example of how to disable the service worker generation in the Stencil config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Configuring WWW Output Target for Playwright Tests
DESCRIPTION: Stencil config update to include necessary file copying for Playwright tests to run against the dev server.

LANGUAGE: typescript
CODE:
{
   type: 'www',
   serviceWorker: null,
   copy: [{ src: '**/*.html' }, { src: '**/*.css' }]
}

----------------------------------------

TITLE: Data Binding in JSX
DESCRIPTION: Shows how to bind dynamic data in JSX using curly braces {}.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

----------------------------------------

TITLE: Event Handling in Stencil Components
DESCRIPTION: Shows how to handle user input events like clicks and input changes using arrow functions.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Importing and Using Angular Wrapper Components (Standalone)
DESCRIPTION: Import and use the generated Angular wrapper components in a standalone Angular component.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { MyComponent } from 'component-library';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [MyComponent],
  templateUrl: './app.component.html',
})
export class AppComponent {}

----------------------------------------

TITLE: Creating a Stencil component library
DESCRIPTION: Commands to create and set up a Stencil component library within the monorepo structure.

LANGUAGE: bash
CODE:
cd packages/
npm init stencil components stencil-library
cd stencil-library
# Install dependencies
npm install

----------------------------------------

TITLE: Private Method Implementation
DESCRIPTION: Shows how to implement private methods in a Stencil component that don't require the @Method decorator or async functionality.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Using Custom JSDoc Tags in Stencil Components
DESCRIPTION: Illustrates how to use custom JSDoc tags in Stencil components for additional documentation.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Disabling Service Worker in Stencil Config
DESCRIPTION: Shows how to disable the automatic generation of a Service Worker in a Stencil project by setting the serviceWorker property to null in the config.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Configuring Prerender Debugging for Stencil
DESCRIPTION: This TypeScript configuration sets up prerendering options for debugging. It disables URL crawling, specifies entry URLs, and enables runtime logging for better visibility during the prerendering process.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Building and Running Stencil Site
DESCRIPTION: Commands for installing dependencies and running the Stencil site in development mode. Requires recent versions of Node.js and npm.

LANGUAGE: bash
CODE:
npm install
npm run docs
npm start

----------------------------------------

TITLE: Asset Resolution Example using getAssetPath in TypeScript
DESCRIPTION: Demonstrates how to use getAssetPath to resolve asset paths relative to the build directory

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Stencil React Output Target Configuration
DESCRIPTION: Configuration for generating React component wrappers in Stencil config

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    reactOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../react-library/lib/components/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Configuring Prerender in Stencil Config
DESCRIPTION: This snippet shows how to set up the prerender config file path in the Stencil configuration file (stencil.config.ts).

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Updating Stencil to Latest Version
DESCRIPTION: Command to update the @stencil/core package to the latest version in an existing Stencil project.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Using Custom JSDoc Tags in Stencil Components
DESCRIPTION: Example of using custom JSDoc tags in a component's TypeScript file. This demonstrates how to add custom documentation tags.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Rollup Plugin Configuration for Asset Copying
DESCRIPTION: Example configuration using rollup-plugin-copy to copy assets to the distribution directory during build.

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Removed Legacy Context and Connect APIs Example
DESCRIPTION: Example of deprecated @Prop decorator options (context and connect) that have been removed in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
@Prop({ context: 'config' }) config: Config;
@Prop({ connect: 'ion-menu-controller' }) lazyMenuCtrl: Lazy<MenuController>;

----------------------------------------

TITLE: Configuring Output Targets in Stencil
DESCRIPTION: This snippet demonstrates how to configure multiple output targets in a Stencil project's configuration file. It shows setting up both 'dist' and 'www' output types.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist'
    },
    {
      type: 'www'
    }
  ]
};

----------------------------------------

TITLE: Documenting Shadow Parts in Stencil
DESCRIPTION: Example of documenting shadow parts in a Stencil component using @part JSDoc tags and implementing them in the render method.

LANGUAGE: typescript
CODE:
/**
 * @part label - The label text describing the component.
 */
@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  // ...

  render() {
    return (
      <div part="label">
        <slot></slot>
      </div>
    );
  }
}

----------------------------------------

TITLE: Optimizing JavaScript with Stencil Compiler
DESCRIPTION: Shows how to use the optimizeJs() utility function for JavaScript optimization in the Stencil compiler, considering the JavaScript target for enhanced minification.

LANGUAGE: typescript
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Demonstrating Proper HTML Tag Naming for Stencil Components
DESCRIPTION: This snippet illustrates the correct way to name HTML tags for Stencil components, emphasizing the importance of using a unique prefix and avoiding the use of 'stencil' in the tag name.

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

----------------------------------------

TITLE: Testing Stencil Component with JSX Template
DESCRIPTION: Shows how to test a component using the template option with JSX syntax, demonstrating property-based component initialization.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Data Flow Component Example
DESCRIPTION: Shows data flow from parent to child components using props

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
})
export class TodoList {
  render() {
    return (
      <div>
        <h1>To-Do List Name: Stencil To Do List</h1>
        <ul>
           <todo-list-item thingToDo={"Learn about Stencil Props"}></todo-list-item>
           <todo-list-item thingToDo={"Write some Stencil Code with Props"}></todo-list-item>
           <todo-list-item thingToDo={"Dance Party"}></todo-list-item>
        </ul>
      </div>
    )
  }
}

----------------------------------------

TITLE: Using componentOnReady() in TypeScript
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code after a component has finished its first render cycle. This method returns a promise that resolves after componentDidRender() on the first render.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Invalid Component Export in TypeScript
DESCRIPTION: An example of an invalid component export in Stencil, where additional functions are exported alongside the component class. This is not allowed for efficient bundling.

LANGUAGE: tsx
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Updating Stencil Core Package
DESCRIPTION: Command to update the @stencil/core package to the latest version using npm. The --save-exact flag ensures the exact version is saved in package.json.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Valid and Invalid Public Method Implementations in Stencil
DESCRIPTION: Illustrates correct and incorrect ways to implement public methods using the @Method() decorator. Public methods must return a Promise or be async.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Using Angular Wrapper Components in Template
DESCRIPTION: Use the wrapped Stencil components in an Angular component template with Angular's template binding syntax.

LANGUAGE: html
CODE:
<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Implementing hydrateDocument Function
DESCRIPTION: Example implementation of component hydration using hydrateDocument, taken from Ionic Angular server

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

export function hydrateComponents(doc) {
  return hydrateDocument(doc)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Using Ionic Components in Ember Template
DESCRIPTION: Demonstrates the usage of an Ionic component (ion-toggle) in an Ember component template.

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Watching and Parsing Props in Stencil Component
DESCRIPTION: Shows how to watch for changes in props and parse them into internal state variables. This is useful for handling string-based props that need to be converted to objects or arrays.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

----------------------------------------

TITLE: Basic State Usage in Stencil Component
DESCRIPTION: Demonstrates basic usage of @State decorator to manage current time in a component. Shows how to declare state and use it in the render method.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    @State() currentTime: number = Date.now();

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Running Stencil Generate Command
DESCRIPTION: Demonstrates how to use the 'stencil generate' command to create a new component. This command generates component files in the src/components directory.

LANGUAGE: bash
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Documenting Component Properties in TypeScript/Stencil
DESCRIPTION: Demonstrates how to add documentation to Stencil component properties using JSDoc comments with the @Prop decorator. The example shows documenting an optional icon property.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Configuring Stencil for E2E Testing
DESCRIPTION: Shows the configuration in stencil.config.ts for setting up end-to-end testing, including output targets and file copying.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'test-app',
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null,
      copy: [{ src: '**/test/*.html' }, { src: '**/test/*.css' }],
    },
  ],
};

----------------------------------------

TITLE: Setting Component Properties with External References
DESCRIPTION: Demonstrates how to set component properties using external references in E2E tests. This is useful for importing data or reusing mock data across multiple tests.

LANGUAGE: typescript
CODE:
const props = {
  first: 'Marty',
  lastName: 'McFly',
};

await page.setContent(`<prop-cmp></prop-cmp>`);

await page.$eval('prop-cmp',
  (elm: any, { first, lastName }) => {
    elm.first = first;
    elm.lastName = lastName;
  },
  props 
);

await page.waitForChanges();

----------------------------------------

TITLE: Generating JSON Docs via CLI in Stencil
DESCRIPTION: Command to generate JSON documentation using the Stencil CLI.

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Setting CSP Nonce for Stencil Dist Output in Angular
DESCRIPTION: Demonstrates how to set a CSP nonce for the Stencil dist output target in an Angular application's entrypoint. It uses the setNonce helper function to apply the nonce to all script and style tags.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Handling Service Worker Updates in Stencil Component (TypeScript)
DESCRIPTION: Implementation of a listener for Service Worker updates in a Stencil component, including displaying a toast notification for updates.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    // If there is no waiting registration, this is the first service
    // worker being installed.
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Configuring TypeScript Path Aliases
DESCRIPTION: Example of configuring path aliases in tsconfig.json for TypeScript projects. This allows specifying shorthand paths for imports.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Configuring Stencil Output Target with Prerender Config
DESCRIPTION: Example showing how to set up the prerender config file path in stencil.config.ts using the prerenderConfig property.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Documenting CSS Variables in Stencil
DESCRIPTION: Example of documenting CSS variables using JSDoc-style comments

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Optimize JavaScript Function Declaration
DESCRIPTION: Function signature for optimizing JavaScript code with optional input configuration.

LANGUAGE: jsx
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Setting CSP Nonce in Stencil Custom Elements
DESCRIPTION: Example demonstrating nonce implementation for the dist-custom-elements output target in an Angular application context.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/dist/components';
// Assume `customElementsExportBehavior: 'auto-define-custom-elements'` is set
import 'my-lib/dist/components/my-component';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

----------------------------------------

TITLE: Setting Asset Path for Custom Elements
DESCRIPTION: Shows how to set the asset path for custom elements to ensure static assets are correctly referenced.

LANGUAGE: javascript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Component Naming Examples in HTML
DESCRIPTION: Shows incorrect and correct component naming conventions, emphasizing proper prefix usage and semantic naming patterns.

LANGUAGE: markup
CODE:
<stencil-component>
<stnl-component>

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

LANGUAGE: markup
CODE:
<ion-card>
<ion-card-header>
<ion-card-content>

----------------------------------------

TITLE: Using getAssetPath with Directory Structure
DESCRIPTION: Demonstrates how to resolve asset paths relative to the build directory using getAssetPath API.

LANGUAGE: typescript
CODE:
import { getAssetPath } from '@stencil/core';

// with an asset base path of "/build/":

// '/build/assets/logo.png'
getAssetPath('assets/logo.png');
// '/build/assets/scenery/beach.png'
getAssetPath('assets/scenery/beach.png');
// '/build/other-assets/font.tiff'
getAssetPath('other-assets/font.tiff');

----------------------------------------

TITLE: Configuring Stencil Test RegEx
DESCRIPTION: Stencil configuration to set the testRegex property, ensuring Stencil picks up specific test files while allowing WebdriverIO to handle others.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // ...
  testing: {
    testRegex: '(/__tests__/.*|\\.?(spec))\\.(ts|js)$',
  },
};

----------------------------------------

TITLE: Installing WebdriverIO with NPM/Yarn
DESCRIPTION: Command to initialize WebdriverIO project setup using the configuration wizard

LANGUAGE: bash
CODE:
npm init wdio@latest .

----------------------------------------

TITLE: Consuming Angular Wrapper Components in Module-based App
DESCRIPTION: Import and use the generated Angular wrapper components in a module-based Angular application.

LANGUAGE: TypeScript
CODE:
import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

----------------------------------------

TITLE: Basic Ionic Component Usage in Ember Template
DESCRIPTION: Example of using an Ionic toggle component in an Ember template file

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Registering Custom Elements in Angular
DESCRIPTION: Use the APP_INITIALIZER to register custom elements during app initialization.

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Registering Custom Elements in Angular
DESCRIPTION: Use the APP_INITIALIZER to register custom elements during app initialization.

LANGUAGE: typescript
CODE:
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { defineCustomElements } from 'stencil-library/loader';

@NgModule({
  ...,
  providers: [
    {
      provide: APP_INITIALIZER,
      useFactory: () => defineCustomElements,
      multi: true
    },
  ]
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Implementing Controlled Ionic Component in Ember
DESCRIPTION: Example of a controlled Ionic component (ion-toggle) with state management in an Ember component.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Invalid Component Module Example in TypeScript
DESCRIPTION: This snippet demonstrates an invalid way of organizing a Stencil component module, where additional exports are included alongside the component class.

LANGUAGE: typescript
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Configuring HTTPS Dev Server in Stencil
DESCRIPTION: Example configuration for setting up HTTPS in Stencil's dev server using custom SSL certificates. Shows how to configure the port and HTTPS options using certificate and key files.

LANGUAGE: tsx
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8'),
    },
  },
};

----------------------------------------

TITLE: Creating NodeJS System for Stencil Compiler
DESCRIPTION: Creates a system based on NodeJS APIs for the compiler, handling file system operations and content hashing. It requires the NodeJS 'process' object as an argument.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Example Path Alias Transformation
DESCRIPTION: Demonstrates how path aliases are transformed in the output collection when transformAliasedImportPathsInCollection is enabled.

LANGUAGE: typescript
CODE:
// Source code
import * as utils from '@utils';

// Output code
import * as utils from '../path/to/utils';

----------------------------------------

TITLE: Rendering Multiple Stencil Components for Testing
DESCRIPTION: This snippet shows how to render multiple Stencil components for testing, including dependencies of the main component under test.

LANGUAGE: typescript
CODE:
render({
    components: [ComponentA, ComponentB, ComponentC, ComponentD],
    template: () => <component-a first="Stencil" last="'Don't call me a framework' JS" />
});

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Prerendering
DESCRIPTION: This JSON configuration sets up VS Code to debug Stencil's prerendering process. It specifies the Node.js runtime, the Stencil prerender command, and necessary arguments for effective debugging.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "node",
      "request": "launch",
      "name": "Prerender",
      "args": [
        "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
        "prerender",
        "${workspaceFolder}/dist/hydrate/index.js",
        "--max-workers=0",
        "--config=${workspaceFolder}/stencil.config.ts"
      ],
      "protocol": "inspector"
    }
  ]
}

----------------------------------------

TITLE: JSON Output for Custom JSDoc Tags
DESCRIPTION: Example of the JSON output generated for custom JSDoc tags. This shows how custom tags appear in the generated JSON file.

LANGUAGE: json
CODE:
"docsTags": [
  {
    "name": "customDescription",
    "text": "This is just the best button around!"
  }
],

----------------------------------------

TITLE: Rollup Configuration for Custom Elements
DESCRIPTION: Example Rollup configuration for consuming custom elements, including asset copying.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Removed Legacy Context and Connect APIs
DESCRIPTION: Example of deprecated context and connect APIs that have been removed in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
@Prop({ context: 'config' }) config: Config;
@Prop({ connect: 'ion-menu-controller' }) lazyMenuCtrl: Lazy<MenuController>;

----------------------------------------

TITLE: Implementing CSP Nonce in Stencil Dist Output
DESCRIPTION: Example showing how to set up CSP nonce in a Stencil dist output target within an Angular application's entrypoint. Uses the setNonce helper function to apply nonces to all script and style tags.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: This snippet shows the TypeScript interface definition for CopyTask, which is used to configure file copy operations in Stencil's output targets.

LANGUAGE: typescript
CODE:
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Asset Path Configuration Example
DESCRIPTION: Example showing how to configure the asset path for custom elements

LANGUAGE: typescript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Worker with Callback Progress Updates
DESCRIPTION: Implementation of a Web Worker that demonstrates progress updates using callbacks

LANGUAGE: tsx
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

----------------------------------------

TITLE: Deprecated Context and Connect APIs in Stencil
DESCRIPTION: Example of deprecated context and connect options within the @Prop decorator, which have been removed in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
@Prop({ context: 'config' }) config: Config;
@Prop({ connect: 'ion-menu-controller' }) lazyMenuCtrl: Lazy<MenuController>;

----------------------------------------

TITLE: Configuring Markdown Output Colors in Stencil Config
DESCRIPTION: This snippet demonstrates how to customize the colors used in dependency graph mermaid diagrams for components in generated markdown documentation. It modifies the 'targetComponent' option within the 'docs.markdown' configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  docs: {
    markdown: {
      targetComponent: {
        textColor: '#fff',
        background: '#000',
      },
    },
  },
};

----------------------------------------

TITLE: Using renderToString Function
DESCRIPTION: Example from Ionic Core demonstrating how to use renderToString to hydrate HTML with specific configuration options

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(srcHtml, {
  prettyHtml: true,
  removeScripts: true
});

console.log(results.html);

----------------------------------------

TITLE: Enabling Scoped CSS in Stencil Component
DESCRIPTION: This snippet demonstrates how to enable scoped CSS for a Stencil component by setting the 'scoped' option to true in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'scoped-component',
  styleUrl: 'scoped-component.css',
  scoped: true,
})
export class ScopedComponent {}

----------------------------------------

TITLE: Stencil Testing Configuration Reference - TypeScript
DESCRIPTION: Reference to the testing configuration interface from Stencil's public compiler declarations. Shows the structure of testing configuration options including Jest settings and e2e test configuration.

LANGUAGE: tsx
CODE:
https://github.com/ionic-team/stencil/blob/32811591777de726f0374649a4f5e250a0a8e355/src/declarations/stencil-public-compiler.ts#L1968-L2119

----------------------------------------

TITLE: Defining Stencil Component Classes in TypeScript
DESCRIPTION: Demonstrates how to properly define Stencil component classes in TypeScript, without using prefixes in the class names.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-button'
})
export class Button { ... }

@Component({
  tag: 'ion-menu'
})
export class Menu { ... }

----------------------------------------

TITLE: Configuring Component with styles Option
DESCRIPTION: This example shows how to include inline CSS styles for a component using the 'styles' option in the @Component decorator.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styles: 'div { background-color: #fff }'
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Configuring WWW Output Target for Playwright Tests
DESCRIPTION: TypeScript configuration to add the copy option to the www output target in stencil.config.ts for Playwright test compatibility.

LANGUAGE: typescript
CODE:
{
   type: 'www',
   serviceWorker: null,
   copy: [{ src: '**/*.html' }, { src: '**/*.css' }]
}

----------------------------------------

TITLE: CLI Project Selection Interface
DESCRIPTION: Interactive CLI prompt showing available Stencil project templates including component collections, apps, and Ionic PWA starters.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Accessing Worker Instance Directly in Stencil
DESCRIPTION: Demonstrates how to access the actual Worker instance in Stencil for manual postMessage usage. This approach allows for more direct control over the worker.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);

    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Auto-updating Time Component with State Management
DESCRIPTION: Enhanced example showing state management with lifecycle methods to create an auto-updating time display.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Generating Stencil Component
DESCRIPTION: Command to generate a new Stencil component using the CLI generator. This creates a new component with the specified name in the src/components directory.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Handling Service Worker Updates in Stencil
DESCRIPTION: Component code to handle service worker updates and show a reload toast using Ionic framework.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    // If there is no waiting registration, this is the first service
    // worker being installed.
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Conditional Browser Code Execution in Stencil
DESCRIPTION: Demonstrates how to use Build.isBrowser conditional to control code execution during prerendering vs browser runtime.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Checking Component HTML in E2E Tests
DESCRIPTION: Demonstrates how to check the HTML content of a component's shadow DOM and light DOM in E2E tests using the toEqualHtml() matcher.

LANGUAGE: typescript
CODE:
expect(el.shadowRoot).toEqualHtml(`<div>
        <div class=\"nav-desktop\">
          <slot></slot>
        </div>
      </div>`);

expect(el).toEqualHtml(`<div>
        <div class=\"nav-desktop\">
          <slot></slot>
        </div>
      </div>`);

----------------------------------------

TITLE: Using renderToString Function in JavaScript
DESCRIPTION: This example demonstrates the usage of the renderToString function from the hydrate app. It takes an HTML string, hydrates it with specified options, and logs the resulting HTML.

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(srcHtml, {
  prettyHtml: true,
  removeScripts: true
});

console.log(results.html);

----------------------------------------

TITLE: Using Wrapped Components in Angular Template
DESCRIPTION: Demonstrates how to use the wrapped Stencil components in an Angular component template.

LANGUAGE: html
CODE:
<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Service Worker Update Listener Component
DESCRIPTION: Component code for handling service worker updates and showing a reload toast notification.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Configuring TypeScript Path Aliases in tsconfig.json
DESCRIPTION: Example of setting up path aliases in a TypeScript project's tsconfig.json file. This configuration maps '@utils' to 'src/utils/index.ts'.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Defining Prerender Config Object
DESCRIPTION: This snippet demonstrates how to define the prerender config object in the prerender.config.ts file using the PrerenderConfig interface.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Configuring Stencil Output Target for VS Code Documentation
DESCRIPTION: This snippet shows how to add the 'docs-vscode' output target to the Stencil configuration file. It specifies the type of output and the file name for the generated JSON data.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Optimizing JavaScript
DESCRIPTION: Function signature for JavaScript optimization utility.

LANGUAGE: jsx
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Configuring Basic Image Copy Task
DESCRIPTION: Example showing how to configure a basic copy task in the www output target to copy images from src/images to www/images directory.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      copy: [
        { src: 'images' }
      ]
    }
  ]

----------------------------------------

TITLE: Illustrating Proper HTML Tag Naming for Stencil Components
DESCRIPTION: This snippet demonstrates the correct way to name HTML tags for Stencil components, using a brand-specific prefix and avoiding the use of 'stencil' in the tag name.

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

----------------------------------------

TITLE: HTML Implementation with setAssetPath
DESCRIPTION: Example showing how to use setAssetPath in an HTML file when importing components via script tag.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Initializing WebdriverIO for Stencil Projects
DESCRIPTION: Command to initiate WebdriverIO's configuration wizard for setting up the test environment in a Stencil project.

LANGUAGE: bash
CODE:
npm init wdio@latest .

----------------------------------------

TITLE: Configuring E2E Tests for CI/CD Environments
DESCRIPTION: Demonstrates how to configure Stencil for running E2E tests in CI/CD environments, specifically for Gitlab CI which requires additional browser arguments.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'Foo',
  testing: {
    browserArgs: ['--no-sandbox', '--disable-setuid-sandbox'],
  },
  outputTargets: [
    { type: 'dist' },
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Implementing Controlled Ionic Toggle in Ember Component
DESCRIPTION: Full Ember component example demonstrating state management and event handling with an Ionic toggle component.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Implementing Controlled Ionic Toggle in Ember Component
DESCRIPTION: Full example of an Ember component using an Ionic toggle with state management and event handling.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Optimizing JavaScript in Stencil
DESCRIPTION: Illustrates the utility function used by the compiler to optimize JavaScript, with additional optimizations based on the JavaScript target.

LANGUAGE: typescript
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Optimizing JavaScript in Stencil
DESCRIPTION: Illustrates the utility function used by the compiler to optimize JavaScript, with additional optimizations based on the JavaScript target.

LANGUAGE: typescript
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Stencil Worker Module Implementation
DESCRIPTION: Example of a Stencil worker module with async functions for sum and expensive task processing.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Demonstrating File Structure for Stencil Components
DESCRIPTION: Shows the recommended file structure for organizing Stencil components, including separate directories for each component and their associated styles and tests.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Configuring Rollup Plugins for Stencil
DESCRIPTION: This snippet shows how to add custom Rollup plugins to a Stencil project. It demonstrates injecting plugins before node-resolve and after commonjs transform in the Stencil configuration file.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Using Host as a Fragment in Stencil Components
DESCRIPTION: This example shows how to use the Host component as a fragment to render multiple elements at the root level of a Stencil component. This is useful when you need to return more than one element from the render method.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: Basic configuration for enabling the dist-custom-elements output target in stencil.config.ts

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-custom-elements',
  },
];

----------------------------------------

TITLE: Valid and Invalid Public Method Declarations in Stencil
DESCRIPTION: This snippet illustrates valid and invalid ways to declare public methods using the @Method() decorator in Stencil. Public methods must be async or return a Promise.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Setting CSP Nonce via Meta Tag for SSR
DESCRIPTION: Example showing how to set a nonce using a meta tag in the DOM head for Server-Side Rendering (SSR) implementations. This approach is used when direct runtime code manipulation isn't possible.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Documenting CSS Variables in Stencil
DESCRIPTION: This example shows how to document CSS variables in Stencil using JSDocs-style comments inside CSS or SCSS files. The comment includes a @prop tag to specify the variable name and its description.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: Configuring Stencil WWW Output Target in TSX
DESCRIPTION: Basic configuration example for setting up the www output target in a Stencil project. This is the default output target if none is specified.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Disabling transformAliasedImportPathsInCollection in Stencil v4.0.0
DESCRIPTION: Configuration to disable the default transformAliasedImportPathsInCollection for dist output target in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: CopyTask Interface Definition in TypeScript
DESCRIPTION: TypeScript interface reference for the CopyTask configuration object used in Stencil's copy operations.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Enabling Deprecated Safari 10 Support in Stencil v3
DESCRIPTION: Configuration to enable the deprecated Safari 10 support in Stencil v3. This option is renamed to indicate its deprecated status.

LANGUAGE: typescript
CODE:
// stencil.config.ts
import { Config } from '@stencil/core';
export const config: Config = {
  extras: {
    __deprecated__safari10: true
  }
};

----------------------------------------

TITLE: Environment Variable Configuration Example
DESCRIPTION: Example showing how to configure environment variables in Stencil config and use them in components.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  env: {
    API_BASE_URL: process.env.API_BASE_URL
  }
}

LANGUAGE: typescript
CODE:
import { Component, h, Env, Host } from '@stencil/core';

@Component({
  tag: 'api-component',
})
export class APIComponent {
  async connectedCallback () {
    const res = await fetch(Env.API_BASE_URL)
    // ...
  }
}

----------------------------------------

TITLE: Configuring Monorepo WebRoot for VS Code Debugging
DESCRIPTION: Additional configuration for setting webRoot in monorepo structures to properly locate the Stencil project directory.

LANGUAGE: json
CODE:
{
    "webRoot": "${workspaceFolder}/packages/stencil-library"
}

----------------------------------------

TITLE: Setting Object Props via JavaScript
DESCRIPTION: Shows how to manually set object properties on a Stencil component using vanilla JavaScript.

LANGUAGE: markup
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Testing Component Class Logic in Stencil
DESCRIPTION: Demonstrates how to test component class logic by directly instantiating the component class. It shows setting up a test, calling a method, and asserting the changed state.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Handling User Input in Stencil Components
DESCRIPTION: Shows how to handle user input events, such as button clicks and input changes, using native DOM events in Stencil components.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Inline Mocking in Stencil Tests with Jest
DESCRIPTION: Alternative approach to mocking using Jest's mock function with an inline module factory. This method doesn't require creating a separate mock file.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: CSS Parts Implementation in Stencil
DESCRIPTION: Shows how to implement CSS parts for external styling of shadow DOM elements using the part attribute.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Displaying File Structure for Stencil Components
DESCRIPTION: This snippet shows the recommended file structure for organizing Stencil components, including separate directories for each component and their associated styles and tests.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Consuming Angular Wrapper Components in Standalone Component
DESCRIPTION: Import and use the generated Angular wrapper components in a standalone Angular component.

LANGUAGE: TypeScript
CODE:
import { Component } from '@angular/core';
import { MyComponent } from 'component-library';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  standalone: true,
  imports: [MyComponent],
})
export class AppComponent {}

----------------------------------------

TITLE: Invalid Component Module Export Example in TypeScript
DESCRIPTION: Example showing incorrect way of exporting multiple items from a component module, which violates Stencil's one-component-per-module rule.

LANGUAGE: tsx
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Using Stencil Component in HTML
DESCRIPTION: Example of how to use a compiled Stencil component in HTML markup.

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Watching Prop Changes in Stencil Component
DESCRIPTION: Illustrates how to watch for prop changes and parse them into internal state variables in a Stencil component.

LANGUAGE: typescript
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

----------------------------------------

TITLE: Mutable Props in Stencil
DESCRIPTION: Shows how to make a prop mutable and update it within the component.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class ToDoListItem {
   @Prop({ mutable: true }) thingToDo: string;

   componentDidLoad() {
      this.thingToDo = 'Ah! A new value!';
   }
}

----------------------------------------

TITLE: Creating NodeJS Logger for Stencil
DESCRIPTION: Creates a logger instance using NodeJS APIs for compiler and dev-server logging. Requires NodeJS process object as input.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Configuring Stencil Dev Server with HTTPS and Custom Port
DESCRIPTION: Example configuration for Stencil's dev server showing how to set up HTTPS using SSL certificates and customize the port. Demonstrates importing SSL certificate files and setting reload strategy.

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8')
    }
  }
};

----------------------------------------

TITLE: Creating Usage Examples for Stencil Components
DESCRIPTION: Example of creating a usage example file for a Stencil component.

LANGUAGE: md
CODE:
# How to use `my-button`

A button is often a great help in adding interactivity to an app!

You could use it like this:

```html
<my-button>My Button!</my-button>
```

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Build Conditionals in a Stencil component. It imports the Build object from @stencil/core and uses the isDev property to conditionally execute code based on the build environment.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Mocking a Custom Helper Function in TypeScript
DESCRIPTION: Example of creating a mock for the 'getRandomInt' helper function. This mock always returns 42, simplifying tests that depend on this function.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Configuring dist-custom-elements Output Target in Stencil
DESCRIPTION: Basic configuration setup for the dist-custom-elements output target in a Stencil project's config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Installing Stencil Store via npm
DESCRIPTION: Command to install @stencil/store as a dev dependency using npm. Can be automatically converted to yarn syntax.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Custom Service Worker Boilerplate
DESCRIPTION: Basic boilerplate code for a custom Service Worker using Workbox. This code imports Workbox and sets up precaching.

LANGUAGE: javascript
CODE:
// change to the version you get from `npm ls workbox-build`
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Configuring TypeScript Path Aliases in tsconfig.json
DESCRIPTION: Example of configuring path aliases in a TypeScript project's tsconfig.json file. This allows for using shorthand import paths that are mapped to specific file locations.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Installing @stencil/store via npm
DESCRIPTION: Command to install @stencil/store as a dev dependency using npm or yarn.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Configuring www Output Target in Stencil
DESCRIPTION: This snippet shows how to configure the 'www' output target in a Stencil project's configuration. It demonstrates setting the output target type to 'www' within the outputTargets array.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Creating Node System in Stencil CLI
DESCRIPTION: Creates a system instance for compiler operations using NodeJS APIs. Handles file system operations and content hashing using Node's crypto module.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Working with Children in Functional Components using FunctionalUtilities
DESCRIPTION: Demonstrates how to use the FunctionalUtilities object to transform child elements in a functional component.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Package.json Configuration for Lazy Loading
DESCRIPTION: Configuration settings in package.json for proper entry file loading in different module systems.

LANGUAGE: json
CODE:
{
  "exports": "./dist/esm/my-design-system.js",
  "main": "./dist/cjs/my-design-system.js",
  "unpkg": "dist/my-design-system/my-design-system.esm.js"
}

----------------------------------------

TITLE: HTML Asset Path Configuration
DESCRIPTION: Example showing how to configure asset paths when loading components via script tag

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Testing Component Class Logic in TypeScript
DESCRIPTION: Shows how to test component class logic directly by instantiating the component class and testing its methods and properties without rendering.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Setting Component Properties in E2E Tests
DESCRIPTION: Shows how to set properties on a component during an E2E test using page.$eval. This method allows manipulation of the component within the browser's context.

LANGUAGE: typescript
CODE:
await page.setContent(`
      <prop-cmp></prop-cmp>
    `);

await page.$eval('prop-cmp', (elm: any) => {
  elm.first = 'Marty';
  elm.lastName = 'McFly';
});

await page.waitForChanges();

----------------------------------------

TITLE: Stencil Package.json Component Exports Configuration
DESCRIPTION: Configuration for comprehensive exports in the Stencil library's package.json to handle component imports

LANGUAGE: json
CODE:
{
 "exports": {
  ".": {
    "import": "./dist/stencil-library/stencil-library.esm.js",
    "require": "./dist/stencil-library/stencil-library.cjs.js"
  },
  "./dist/*": {
    "import": "./dist/*",
    "types": "./dist/*"
  },
  "./components/*": {
    "import": "./dist/components/*.js",
    "types": "./dist/components/*.d.ts"
  },
  "./loader": {
    "import": "./loader/index.js",
    "require": "./loader/index.cjs",
    "types": "./loader/index.d.ts"
  }
 }
}

----------------------------------------

TITLE: Project Type Selection in create-stencil CLI
DESCRIPTION: The create-stencil CLI prompt for selecting the type of Stencil project to start. It offers options for component collections, apps, and Ionic PWA starters.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Basic Event Emission in Stencil Component
DESCRIPTION: Demonstrates how to use the @Event decorator to emit custom events from a Stencil component using EventEmitter.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Basic Event Emission in Stencil Component
DESCRIPTION: Demonstrates how to use the @Event decorator to emit custom events from a Stencil component using EventEmitter.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Styling Host Element in CSS
DESCRIPTION: This example demonstrates how to style the host element using its component tag in CSS.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

----------------------------------------

TITLE: Illustrating Proper Component Naming in HTML
DESCRIPTION: Demonstrates the correct way to name Stencil components in HTML, using a brand-specific prefix and descriptive nouns.

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

----------------------------------------

TITLE: Setting Asset Path in JavaScript
DESCRIPTION: Demonstrates how to use setAssetPath() to set the base path for resolving local assets in a Stencil application.

LANGUAGE: javascript
CODE:
import { setAssetPath } from '@stencil/core';
setAssetPath(`{window.location.origin}/`);

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: Shows how to write CSS for a Shadow DOM-enabled component, using simplified selectors and the :host pseudo-class.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Setting Asset Path for Custom Elements
DESCRIPTION: Example demonstrating how to set the asset path for custom elements to access static assets.

LANGUAGE: typescript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Environment Variable Configuration
DESCRIPTION: Example showing how to configure environment variables in Stencil and use them in components.

LANGUAGE: ts
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  env: {
    API_BASE_URL: process.env.API_BASE_URL
  }
}

LANGUAGE: ts
CODE:
import { Component, h, Env, Host } from '@stencil/core';

@Component({
  tag: 'api-component',
})
export class APIComponent {
  async connectedCallback () {
    const res = await fetch(Env.API_BASE_URL)
    // ...
  }
}

----------------------------------------

TITLE: Environment Variable Configuration
DESCRIPTION: Example showing how to configure environment variables in Stencil and use them in components.

LANGUAGE: ts
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  env: {
    API_BASE_URL: process.env.API_BASE_URL
  }
}

LANGUAGE: ts
CODE:
import { Component, h, Env, Host } from '@stencil/core';

@Component({
  tag: 'api-component',
})
export class APIComponent {
  async connectedCallback () {
    const res = await fetch(Env.API_BASE_URL)
    // ...
  }
}

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: This snippet demonstrates how to use the Build.isDev constant from @stencil/core to conditionally execute code based on whether the app is running in development or production mode. It shows the import statement and usage within a component's lifecycle method.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Disabling transformAliasedImportPathsInCollection in Stencil v4.0.0
DESCRIPTION: Configuration example for disabling the transformAliasedImportPathsInCollection feature for dist output target in Stencil v4.0.0 config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Setting Custom Elements Export Behavior in Stencil Config
DESCRIPTION: This snippet demonstrates how to set the customElementsExportBehavior option in the Stencil configuration file to control the export behavior of custom elements.

LANGUAGE: typescript
CODE:
// stencil.config.ts
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      customElementsExportBehavior: 'default' | 'auto-define-custom-elements' | 'bundle' | 'single-export-module',
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Example of expanded JsonDocsMethod in docs-json output
DESCRIPTION: Example of the expanded information included in the docs-json output for a @Method decorator in Stencil v4. This includes more detailed type information in the complexType field, including method signature, parameters, and return type.

LANGUAGE: json
CODE:
{
  "complexType": {
    "signature": "(event?: UIEvent) => Promise<any>",
    "parameters": [
      {
        "tags": [
          {
            "name": "param",
            "text": "event The user interface event that called the open."
          }
        ],
        "text": "The user interface event that called the open."
      }
    ],
    "references": {
      "Promise": {
        "location": "global",
        "id": "global::Promise"
      },
      "UIEvent": {
        "location": "global",
        "id": "global::UIEvent"
      },
      "HTMLElement": {
        "location": "global",
        "id": "global::HTMLElement"
      }
    },
    "return": "Promise<any>"
  }
}

----------------------------------------

TITLE: Initializing and Communicating with a Vanilla Web Worker in JavaScript
DESCRIPTION: Demonstrates how to create a new Web Worker instance and set up basic communication using postMessage and onmessage events.

LANGUAGE: javascript
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Configuring Supplemental Public Types in Stencil
DESCRIPTION: Use the supplementalPublicTypes option to include additional types in the JSON documentation output.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json',
      supplementalPublicTypes: 'src/public-interfaces.ts',
    }
  ]
};

----------------------------------------

TITLE: Custom Service Worker Implementation
DESCRIPTION: Boilerplate code for implementing a custom service worker with Workbox integration.

LANGUAGE: typescript
CODE:
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Configuring Stencil Output Target for VS Code Documentation
DESCRIPTION: This snippet shows how to add the 'docs-vscode' output target to the Stencil configuration file. It generates a JSON file containing custom element information for VS Code.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Loading Stencil Components via ES Modules
DESCRIPTION: Shows how to load Stencil components using ES Modules import syntax from a CDN.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Using WebdriverIO Matchers for Assertions in Stencil Tests
DESCRIPTION: This snippet demonstrates the recommended way to use WebdriverIO-specific matchers for making assertions in Stencil component tests, which allow for retries and improved test resilience.

LANGUAGE: typescript
CODE:
await expect($('my-component'))
    .toHaveText(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)

----------------------------------------

TITLE: Listening to Stencil Component Events in Plain JavaScript
DESCRIPTION: Demonstrates how to listen to events emitted by Stencil components using plain JavaScript. The example shows how to add an event listener to a TodoList component outside of the Stencil context.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Exporting Prerender Config Object
DESCRIPTION: This snippet demonstrates how to export a config object using the PrerenderConfig interface in the prerender.config.ts file. This object will contain various configuration options for the prerendering process.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Using Events in JSX with Stencil Components
DESCRIPTION: Demonstrates how to bind event listeners directly in JSX when using Stencil components. The example shows listening to a custom 'todoCompleted' event on a TodoList component.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

----------------------------------------

TITLE: Loading Stencil Component via CDN Script Tag in HTML
DESCRIPTION: Demonstrates how to include a Stencil component in a simple HTML page using a CDN-hosted script tag. This method loads the entire Ionic Core library.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Consuming Angular Wrapper Components in Standalone App
DESCRIPTION: This snippet shows how to import and use the generated Angular wrapper components in a standalone Angular application.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { MyComponent } from 'component-library';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [MyComponent],
  templateUrl: './app.component.html',
})
export class AppComponent {}

----------------------------------------

TITLE: Configuring Stencil Vue Output Target
DESCRIPTION: Configuration for generating Vue component wrappers from Stencil components using the Vue output target.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Using a Stencil Component in HTML
DESCRIPTION: Example of how to use a Stencil component in HTML markup after it has been compiled. This shows the custom element syntax with properties being passed.

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Invalid Component Export Example in TypeScript
DESCRIPTION: Example showing incorrect way of exporting multiple items from a component file, which violates Stencil's one-component-per-module rule.

LANGUAGE: tsx
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Prop Types in Stencil Components
DESCRIPTION: Example of declaring props with different types in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() isComplete: boolean;
    @Prop() timesCompletedInPast: number;
    @Prop() thingToDo: string;
    @Prop() myHttpService: MyHttpService;
}

----------------------------------------

TITLE: Configuring NPM Scripts for Stencil Testing
DESCRIPTION: Example NPM scripts for running Stencil tests, including unit tests, watch mode, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Service Implementation Using Utility Function
DESCRIPTION: Demonstrates a service that uses the getRandomInt utility function, showing dependency relationship.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Installing Ionic Framework in Ember
DESCRIPTION: Command to install the Ionic Framework core package in an Ember project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Inline Mocking in a Test File using TypeScript
DESCRIPTION: Alternative approach to mocking by providing an inline mock implementation using jest.mock(). This method doesn't require creating a separate mock file.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Webpack Configuration for Custom Elements
DESCRIPTION: Example webpack configuration for consuming custom elements, including asset copying.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Rendering Stencil Component for Unit Testing with WebdriverIO
DESCRIPTION: This snippet demonstrates how to set up a unit test for a Stencil component using WebdriverIO's render method. It imports the component and renders it in the browser for testing.

LANGUAGE: typescript
CODE:
import { render } from '@wdio/browser-runner/stencil';
import { MyComponent } from './my-component';

describe('MyComponent', () => {
    it('renders', async () => {
        const { root } = await render({
            components: [MyComponent],
            template: () => <my-component first="Stencil" last="'Don't call me a framework' JS" />
        });

        const element = await root.findByTestId('my-component');
        await expect(element).toHaveText(
            `Hello, World! I'm Stencil 'Don't call me a framework' JS`
        );
    });
});

----------------------------------------

TITLE: Configuring Style Modes in Stencil
DESCRIPTION: Demonstrates how to set up multiple style modes for a Stencil component, allowing for different styling configurations.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'simple-button',
  styleUrls: {
    md: './simple-button.md.css', // styles for Material Design
    ios: './simple-button.ios.css' // styles for iOS
  },
})
export class SimpleButton {
  // ...
}

----------------------------------------

TITLE: Creating Node System in Stencil CLI
DESCRIPTION: Initializes a system instance using NodeJS APIs for file system operations and content hashing. Requires NodeJS process object as input and handles all file system read/write operations.

LANGUAGE: tsx
CODE:
createNodeSystem(process: any): CompilerSystem

----------------------------------------

TITLE: Creating Stencil Store Configuration
DESCRIPTION: Example of creating a store with reactive state management, including a computed value that updates based on state changes.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Configuring 'www' Output Target in Stencil
DESCRIPTION: This code snippet demonstrates how to set up the 'www' output target in a Stencil project's configuration. It's typically used in the stencil.config.ts file to specify build settings for web applications.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: This snippet shows how to add custom Rollup plugins to a Stencil project. It demonstrates the use of the rollupPlugins config to inject plugins before node-resolve and after commonjs transform.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Manipulating Children in Stencil Functional Components
DESCRIPTION: Demonstrates how to use Stencil's utility methods to transform children within a functional component.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Configuring Package.json for Standalone Stencil Components
DESCRIPTION: JSON configuration in package.json for properly importing standalone Stencil components.

LANGUAGE: json
CODE:
{
  "exports": {
    ".": {
      "import": "./dist/components/index.js",
      "types": "./dist/components/index.d.ts"
    },
    "./my-component": {
      "import": "./dist/components/my-component.js",
      "types": "./dist/components/my-component.d.ts"
    }
  },
  "types": "dist/components/index.d.ts"
}

----------------------------------------

TITLE: Loading Component Library via Script Tag
DESCRIPTION: Example of loading a Stencil component library using a script tag with ES modules

LANGUAGE: html
CODE:
<script type="module" src="https://unpkg.com/my-design-system"></script>

----------------------------------------

TITLE: Parsing Command-line Arguments for Stencil CLI
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object. It's used internally by the CLI to process arguments.

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Defining Object and Array Props in Stencil Component
DESCRIPTION: Illustrates how to define object and array props in a Stencil component using the @Prop decorator.

LANGUAGE: typescript
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Mocking a Custom Utility Function in TypeScript
DESCRIPTION: Example of creating a mock for the 'getRandomInt' function by defining it in a __mocks__ directory. This mock always returns 42 instead of a random number.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: React App Usage Example
DESCRIPTION: Example of how to consume the wrapped Stencil components in a React application

LANGUAGE: typescript
CODE:
import './App.css';
import { MyComponent } from 'react-library';

function App() {
  return (
    <div className="App">
      <MyComponent first="Your" last="Name" />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Mocking a Custom Utility Function in TypeScript
DESCRIPTION: Example of creating a mock for the 'getRandomInt' function by defining it in a __mocks__ directory. This mock always returns 42 instead of a random number.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation
DESCRIPTION: Example showing how to configure primary package output target validation in Stencil. This setup enables validation of package.json fields against the specified output target.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Initializing Git Repository for Stencil Project
DESCRIPTION: Commands to initialize a git repository for a new Stencil project, add all files, and make an initial commit.

LANGUAGE: bash
CODE:
$ git init
$ git add -A
$ git commit -m "initialize project using stencil cli" 

----------------------------------------

TITLE: Using componentOnReady in TypeScript
DESCRIPTION: Example showing how to use componentOnReady() to execute code after a component's first render cycle completes

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Configuring Rollup for Custom Elements Bundle
DESCRIPTION: This Rollup configuration example shows how to set up a project to consume a custom elements bundle. It includes plugins for resolving modules, handling CommonJS modules, processing CSS, and copying assets from the library to the distribution folder.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Git Repository Initialization
DESCRIPTION: Commands to initialize a git repository for a new Stencil project.

LANGUAGE: bash
CODE:
git init
git add -A
git commit -m "initialize project using stencil cli"

----------------------------------------

TITLE: Exporting Default Function in Global Script
DESCRIPTION: An example of how to structure the global script file to be executed before the library/app loads.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: Disabling Collection Path Alias Transformation
DESCRIPTION: Example of disabling the default transformAliasedImportPathsInCollection feature for dist output target.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Setting Asset Path for Custom Elements in JavaScript
DESCRIPTION: Example of how to set the asset path for custom elements builds using the setAssetPath function.

LANGUAGE: javascript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Disabling Service Worker in Stencil
DESCRIPTION: Configuration to disable service worker generation in Stencil's build process.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Custom JSDoc Tags Example
DESCRIPTION: Demonstrates using custom JSDoc tags in component documentation

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil
DESCRIPTION: This snippet shows how to add the 'docs-readme' output target to your Stencil configuration file. This setup enables automatic generation of README.md files for your components.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Exporting Generated React Components
DESCRIPTION: Code snippet showing how to export the generated React component wrappers from the React library's entry file.

LANGUAGE: typescript
CODE:
export * from './components/stencil-generated';
export { defineCustomElements } from "stencil-library/loader";

----------------------------------------

TITLE: Configuring NPM Scripts for Combined Test Execution
DESCRIPTION: JSON configuration in package.json to create a script that runs both Stencil and WebdriverIO tests sequentially.

LANGUAGE: json
CODE:
{
    "scripts:": {
        "test.e2e": "stencil test && wdio run wdio.conf.ts"
    }
}

----------------------------------------

TITLE: Vanilla JavaScript Event Listening
DESCRIPTION: Shows how to listen to Stencil component events using vanilla JavaScript event listeners.

LANGUAGE: javascript
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config (TSX)
DESCRIPTION: Configuration example for adding the stats output target to stencil.config.ts for automatic stats generation during builds.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Loading Stencil Components via CDN Script
DESCRIPTION: Demonstrates how to load a Stencil component using a CDN script tag in a basic HTML page. Shows implementation of an ion-toggle component using the Ionic core library.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Exporting Vue Component Library
DESCRIPTION: Exporting generated component wrappers and Vue plugin.

LANGUAGE: typescript
CODE:
export * from './components';
export * from './plugin';

----------------------------------------

TITLE: Server Integration with Koa
DESCRIPTION: Example of integrating the hydrate functionality with a Koa server to handle SSR requests.

LANGUAGE: typescript
CODE:
import Koa from 'koa';

const app = new Koa();
app.use(async (ctx) => {
  const res = await hydrateComponents(`<!DOCTYPE html>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />
    <title>Document</title>
    <link rel=\"preconnect\" href=\"https://some-url.com\" />
    <style>
      // custom styles here
    </style>
  </head>
  <body>
    <app-root></app-root>
  </body>
</html>`)
  ctx.body = res
})

----------------------------------------

TITLE: Updating Stencil to the latest version
DESCRIPTION: This command updates the @stencil/core package to the latest version in a Stencil project, using the --save-exact flag to pin the version.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Example of Expanded docs-json Output for @Event
DESCRIPTION: JSON representation of the expanded documentation for an @Event decorator in Stencil v4.0.0. This example shows the new 'complexType' field for the ionBreakpointDidChange event.

LANGUAGE: json
CODE:
{
  "complexType": {
    "original": "ModalBreakpointChangeEventDetail",
    "resolved": "ModalBreakpointChangeEventDetail",
    "references": {
      "ModalBreakpointChangeEventDetail": {
        "location": "import",
        "path": "./modal-interface",
        "id": "src/components/modal/modal.tsx::ModalBreakpointChangeEventDetail"
      }
    }
  }
}

----------------------------------------

TITLE: Initializing New Stencil Project
DESCRIPTION: Command to create a new Stencil project using the create-stencil CLI tool.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Data Flow Example with Parent/Child Components
DESCRIPTION: Shows how data flows between parent and child components using props

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
})
export class TodoList {
  render() {
    return (
      <div>
        <h1>To-Do List Name: Stencil To Do List</h1>
        <ul>
           <todo-list-item thingToDo={"Learn about Stencil Props"}></todo-list-item>
           <todo-list-item thingToDo={"Write some Stencil Code with Props"}></todo-list-item>
           <todo-list-item thingToDo={"Dance Party"}></todo-list-item>
        </ul>
      </div>
    )
  }
}

----------------------------------------

TITLE: Configuring Stencil Testing Options
DESCRIPTION: Example of how to configure Stencil testing options using the config file, specifically setting test path ignore patterns.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  testing: {
    testPathIgnorePatterns: [...]
  }
};

----------------------------------------

TITLE: Rendering Basic JSX in Stencil Component
DESCRIPTION: Demonstrates how to use the render function to output a tree of components using JSX syntax in a Stencil component.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Initializing a Lerna Monorepo
DESCRIPTION: Commands to initialize a Lerna workspace and install dependencies.

LANGUAGE: bash
CODE:
# From your top-most-directory/, initialize a workspace
lerna init

# install dependencies
npm install

# install typescript and node types
npm install typescript @types/node --save-dev

----------------------------------------

TITLE: Loading Stencil Configuration
DESCRIPTION: Shows how to use the loadConfig() function to transform raw config information into a usable config object for the compiler and dev-server.

LANGUAGE: typescript
CODE:
loadConfig(init?: LoadConfigInit): Promise<LoadConfigResults>

----------------------------------------

TITLE: Setting Custom Destination for Copy Tasks
DESCRIPTION: Example demonstrating how to set a custom destination path for copied files using the dest option in a copy task configuration.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]

----------------------------------------

TITLE: Creating an In-Memory Compiler System
DESCRIPTION: Shows the function to create an in-memory compiler system independent of any platform.

LANGUAGE: typescript
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: This CSS snippet shows how to style elements within a Shadow DOM component, including using the :host pseudo-class selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Parsing Command-line Flags in Stencil
DESCRIPTION: Processes command-line arguments into a typed ConfigFlags object. Takes an array of string arguments and returns a structured configuration object.

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Listening for the appload Event in Stencil
DESCRIPTION: Shows how to listen for the special 'appload' event emitted when the app and all its child components have finished loading. The event listener is added to the window object and can distinguish between multiple apps using the namespace.

LANGUAGE: typescript
CODE:
window.addEventListener('appload', (event) => {
  console.log(event.detail.namespace);
});

----------------------------------------

TITLE: Defining a Custom Element
DESCRIPTION: This snippet shows how to define a custom element using the generated files from the dist-custom-elements output target.

LANGUAGE: javascript
CODE:
import { defineCustomElement } from 'my-library/dist/components/hello-world';

defineCustomElement(); // Same as manually calling: customElements.define('hello-world', HelloWorld);

----------------------------------------

TITLE: Basic WWW Output Target Copy Configuration - TypeScript
DESCRIPTION: Example showing how to configure a basic copy task in the www output target to copy images from src/images to www/images directory.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      copy: [
        { src: 'images' }
      ]
    }
  ]

----------------------------------------

TITLE: Loading Stencil Component via ES Module in HTML
DESCRIPTION: Shows how to include Stencil components using ES Modules with an import statement in an HTML file.

LANGUAGE: html
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Configuring Service Worker in Stencil Config (TypeScript)
DESCRIPTION: Example of how to configure the Service Worker in a Stencil project's config file. It shows how to customize the glob patterns for asset caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Disabling transformAliasedImportPathsInCollection in Stencil v4.0.0 Configuration
DESCRIPTION: Example of how to disable the default transformAliasedImportPathsInCollection functionality for the dist output target in a Stencil v4.0.0 configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Configuring Types in package.json for TypeScript Support
DESCRIPTION: JSON configuration in package.json for specifying the location of type declarations for TypeScript support.

LANGUAGE: json
CODE:
{
  "types": "dist/components/index.d.ts",
  "dependencies": {
    "@stencil/core": "latest"
  },
  ...
}

----------------------------------------

TITLE: Executing Individual Stencil Tasks
DESCRIPTION: Runs specific tasks with given NodeJS process, Stencil config, and task command. Optionally accepts a compiler system instance for custom system implementations.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Defining Object Props in Stencil Component
DESCRIPTION: Example of defining object and array properties in a Stencil component class using the @Prop decorator.

LANGUAGE: tsx
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Configuring Node Debugger for Stencil Prerender
DESCRIPTION: Launch configuration for debugging Stencil's prerender process using Node.js debugger in VS Code.

LANGUAGE: json
CODE:
{
  "type": "node",
  "request": "launch",
  "name": "Prerender",
  "args": [
    "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
    "prerender",
    "${workspaceFolder}/dist/hydrate/index.js",
    "--max-workers=0",
    "--config=${workspaceFolder}/stencil.config.ts"
  ],
  "protocol": "inspector"
}

----------------------------------------

TITLE: Configuring Stencil Custom Docs Output Target
DESCRIPTION: Configuration example showing how to set up the docs-custom output target in Stencil. The config includes a generator function that receives the JSON docs data for custom processing.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Configuring Stencil Custom Docs Output Target
DESCRIPTION: Configuration example showing how to set up the docs-custom output target in Stencil. The config includes a generator function that receives the JSON docs data for custom processing.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Testing Store Reset
DESCRIPTION: Example of how to reset the store state between test cases using the dispose() method in a beforeEach hook.

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: Setting Up a Stencil Component Project
DESCRIPTION: Commands to navigate to the project directory, install dependencies, and start the development server for a new Stencil component project.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Using setMode and getMode in Stencil
DESCRIPTION: Demonstrates how to use setMode to set the style mode of a component and getMode to get the current style mode of the application. These functions are useful for managing component styling.

LANGUAGE: typescript
CODE:
import { setMode, getMode } from '@stencil/core'

// set mode based on a property
setMode((el) => el.getAttribute('mode'));

// get current mode
getMode(this);

----------------------------------------

TITLE: Configuring Style Modes in Stencil Component
DESCRIPTION: Demonstrates how to set up multiple style modes for a component, allowing for different styling configurations based on the selected mode.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'simple-button',
  styleUrls: {
    md: './simple-button.md.css', // styles for Material Design
    ios: './simple-button.ios.css' // styles for iOS
  },
})
export class SimpleButton {
  // ...
}

----------------------------------------

TITLE: Configuring Prerender in Stencil Config (TypeScript)
DESCRIPTION: Example of setting the path to the prerendering config file in stencil.config.ts. This configuration specifies the output target type, base URL, and the path to the prerender config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Vitest Script Configuration
DESCRIPTION: Package.json script configuration for running Vitest tests

LANGUAGE: json
CODE:
{
    "scripts": {
        "test": "vitest --run"
    },
}

----------------------------------------

TITLE: Configuring TypeScript Path Aliases
DESCRIPTION: Example of configuring path aliases in tsconfig.json using the TypeScript paths configuration option.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Stencil Output Target Validation Configuration
DESCRIPTION: Example demonstrating how to configure primary package output target validation in Stencil, including validation flag settings and target designation.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Basic Form-Associated Component Configuration
DESCRIPTION: Demonstrates how to configure a basic form-associated component using the @Component decorator with formAssociated property.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Component Integration with Web Worker in Stencil
DESCRIPTION: Demonstrates how to import and use worker functions within a Stencil component.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result);
    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Marking a Stencil Component as Deprecated
DESCRIPTION: Shows how to use the @deprecated JSDoc tag to mark a component as deprecated in the generated README.

LANGUAGE: typescript
CODE:
/**
 * @deprecated since v2.0.0
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Loading Stencil Component using ES Modules in HTML
DESCRIPTION: This example demonstrates how to load Stencil components using ES Modules in an HTML file. It uses an import statement within a script tag to define custom elements.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Documenting Shadow Parts in Stencil Components
DESCRIPTION: Example of documenting shadow parts using @part JSDoc tag, which will be reflected in the generated README.

LANGUAGE: typescript
CODE:
/**
 * @part label - The label text describing the component.
 */
@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  // ...

  render() {
    return (
      <div part="label">
        <slot></slot>
      </div>
    );
  }
}

----------------------------------------

TITLE: Configuring React Output Target in Stencil Config
DESCRIPTION: Add the reactOutputTarget configuration to the outputTargets array in the Stencil config file. This sets up the generation of React component wrappers.

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    reactOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../react-library/lib/components/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Configuring Rollup for Stencil Custom Elements
DESCRIPTION: This Rollup configuration example shows how to set up a project to use Stencil custom elements, including copying assets from the library.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Configuring Event Options in Stencil Components (TypeScript)
DESCRIPTION: Shows how to use the EventOptions interface to configure custom event behavior, including custom event names, bubbling, cancelability, and composition.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Using Component Wrappers in Vue Template
DESCRIPTION: Example of using a component wrapper in a Vue template.

LANGUAGE: html
CODE:
<template>
  <my-component first="Your" last="Name"></my-component>
</template>

----------------------------------------

TITLE: Loading Stencil Components via CDN Script
DESCRIPTION: Demonstrates how to load Stencil components using a traditional script tag from a CDN in a basic HTML page.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Stateful Ionic Component Integration
DESCRIPTION: Complete example of an Ember component with state management and event handling for an Ionic toggle

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Documenting CSS Variables in Stencil
DESCRIPTION: Example demonstrating how to document CSS custom properties (variables) using JSDoc-style comments in CSS files. Shows documentation for a primary color variable.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: Loading Stencil Component using ES Modules in HTML
DESCRIPTION: This example demonstrates how to load Stencil components using ES Modules in an HTML file. It uses an import statement within a script tag to define custom elements.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Updating Angular Component Library Dependencies
DESCRIPTION: Adding Stencil library as a peer dependency in the Angular component library.

LANGUAGE: json
CODE:
"peerDependencies": {
  "@angular/common": "^15.1.0",
  "@angular/core": "^15.1.0",
  "stencil-library": "*"
}

----------------------------------------

TITLE: Using Slots in Stencil Components
DESCRIPTION: Demonstrates how to use the Slot tag to allow dynamic children placement in Stencil components, including named slots for specific output locations.

LANGUAGE: tsx
CODE:
render(){
  return [
    <slot name="item-start" />,
    <h1>Here is my main content</h1>,
    <slot name="item-end" />
  ]
}

----------------------------------------

TITLE: Mocking Library Example in TypeScript
DESCRIPTION: Simple example of mocking an md5 library by creating a mock implementation that returns a static value.

LANGUAGE: typescript
CODE:
export default () => 'fakehash';

----------------------------------------

TITLE: Creating and configuring a Stencil Store in TypeScript
DESCRIPTION: Example of creating a store with initial state, defining a change listener, and exporting the state object for use in components.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Running Stencil Build with JSON Docs Output
DESCRIPTION: Command to generate JSON documentation using the CLI flag

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Synchronous Code Transpilation
DESCRIPTION: Function signature for synchronously transpiling code, requiring TypeScript to be globally available in browser environments.

LANGUAGE: tsx
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Importing and Initializing Stencil Components in JavaScript
DESCRIPTION: Example of how to import and initialize Stencil components in a JavaScript application. This code demonstrates setting a nonce for CSP, applying polyfills, and defining custom elements.

LANGUAGE: javascript
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Basic Stencil Screenshot Test Example
DESCRIPTION: Simple example showing how to create a visual regression test for a component using Puppeteer and page.compareScreenshot(). Demonstrates basic setup and screenshot comparison.

LANGUAGE: javascript
CODE:
  it('render something', async () => {
    const page: E2EPage = await newE2EPage();
    await page.setContent('<my-cmp></my-cmp>');
    await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
  });

----------------------------------------

TITLE: Setting Up a New Stencil Project
DESCRIPTION: Commands to navigate to the project directory, install dependencies, and start the development server for a new Stencil project.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Running Individual Stencil Tasks
DESCRIPTION: Executes individual tasks given a NodeJS process, Stencil config, and task command. An optional sys parameter can be provided for the compiler system.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Data Binding in JSX
DESCRIPTION: Shows how to bind dynamic data in JSX using curly braces syntax.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

----------------------------------------

TITLE: Loading Stencil Components in an Application
DESCRIPTION: This code demonstrates how to load and initialize Stencil components in an application. It imports helper functions from the loader, sets a nonce for CSP, applies polyfills, and defines custom elements.

LANGUAGE: ts
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Using a Helper Function in a Service
DESCRIPTION: Example of a service function 'bar' that uses the 'getRandomInt' helper. This demonstrates how custom code might be used in a real application.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Enabling Path Alias Transformation in Stencil v3.1.0
DESCRIPTION: Configuration for enabling path alias transformation in Stencil v3.1.0 config file

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Exporting Helper Methods for Standalone Components
DESCRIPTION: JavaScript code showing the default exports from the index.js file in the 'dist-custom-elements' output target.

LANGUAGE: javascript
CODE:
export { setAssetPath, setPlatformOptions } from '@stencil/core/internal/client';

----------------------------------------

TITLE: TranspileSync Function Signature
DESCRIPTION: Function signature for the synchronous version of the transpile function.

LANGUAGE: tsx
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: Example of how to document slots in a Stencil component using the @slot JSDoc tag.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Defining Props in Stencil Component
DESCRIPTION: Illustrates how to define object and array props in a Stencil component using the @Prop decorator.

LANGUAGE: tsx
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Defining Props in Stencil Component
DESCRIPTION: Illustrates how to define object and array props in a Stencil component using the @Prop decorator.

LANGUAGE: tsx
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Consuming Custom Elements in JavaScript
DESCRIPTION: This snippet shows how to import and define a custom element generated by Stencil in a JavaScript application.

LANGUAGE: javascript
CODE:
import { defineCustomElement } from 'my-library/dist/components/hello-world';

defineCustomElement(); // Same as manually calling: customElements.define('hello-world', HelloWorld);

----------------------------------------

TITLE: Configuring Hydrate App Output Target in Stencil
DESCRIPTION: Add the 'dist-hydrate-script' output target to the Stencil configuration file to generate the hydrate app.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Updating Stencil Core Package
DESCRIPTION: Command to update the @stencil/core package to the latest version in an existing Stencil project.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Using Refs in Stencil Components
DESCRIPTION: Demonstrates how to use refs to get direct references to DOM elements in Stencil components.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'app-home',
})
export class AppHome {

  textInput!: HTMLInputElement;

  handleSubmit = (event: Event) => {
    event.preventDefault();
    console.log(this.textInput.value);
  }

  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <label>
          Name:
          <input type="text" ref={(el) => this.textInput = el as HTMLInputElement} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Styling CSS Parts from Light DOM
DESCRIPTION: This CSS snippet demonstrates how to style CSS parts defined in a Stencil component from the light DOM using the ::part() pseudo-element.

LANGUAGE: css
CODE:
shadow-card::part(heading) {
  text-transform: uppercase;
}

----------------------------------------

TITLE: Complex State Management with Arrays
DESCRIPTION: Shows how to manage complex state with custom types and arrays. Demonstrates proper state updates and rendering of lists with periodic updates.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Advanced Screenshot Testing with Stencil Components
DESCRIPTION: Comprehensive example showing advanced screenshot testing features including global styles, hydration checking, and multiple comparison methods with different threshold settings.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    // In order to test against any global styles you may have, don't forget to set the link to the global css. You don't have to do this if your stencil.config.ts file doesn't build a global css file with globalStyle.
    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    // To start comparing the visual result, you first must run page.compareScreenshot; This will capture a screenshot, and save the file to "/screenshot/images". You'll be able to check that into your repo to provide those results to your team. You can only have one of these commands per test. 
    const results = await page.compareScreenshot();

    // Finally, we can test against the previous screenshots. 
    // Test against hard pixels
    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    // Test against the percentage of changes. if 'allowableMismatchedRatio' is above 20% changed, 
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: JSON Documentation for Method in Stencil v4
DESCRIPTION: Example of expanded JSON documentation for a @Method in Stencil v4, including the new complexType field with detailed type information.

LANGUAGE: json
CODE:
{
  "complexType": {
    "signature": "(event?: UIEvent) => Promise<any>",
    "parameters": [
      {
        "tags": [
          {
            "name": "param",
            "text": "event The user interface event that called the open."
          }
        ],
        "text": "The user interface event that called the open."
      }
    ],
    "references": {
      "Promise": {
        "location": "global",
        "id": "global::Promise"
      },
      "UIEvent": {
        "location": "global",
        "id": "global::UIEvent"
      },
      "HTMLElement": {
        "location": "global",
        "id": "global::HTMLElement"
      }
    },
    "return": "Promise<any>"
  }
}

----------------------------------------

TITLE: Invalid Component Module Export Example in TypeScript
DESCRIPTION: Demonstrates an incorrect way of exporting multiple items from a component module, which violates Stencil's one-component-per-module rule.

LANGUAGE: typescript
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Basic Event Emission in Stencil Component
DESCRIPTION: Demonstrates how to emit custom DOM events using the @Event decorator in a Stencil component.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Marking a Stencil Component as Internal
DESCRIPTION: This TypeScript snippet demonstrates how to use the @internal JSDoc tag to mark a component as internal, which will skip README generation for that component.

LANGUAGE: typescript
CODE:
/**
 * @internal
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Defining Object Props in Stencil Component
DESCRIPTION: Demonstrates how to define object and array properties in a Stencil component using the @Prop decorator.

LANGUAGE: tsx
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Using Custom JSDoc Tags
DESCRIPTION: Example of using custom JSDoc tags in component documentation

LANGUAGE: typescript
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Configuring TypeScript for Root Project
DESCRIPTION: Root level TypeScript configuration for the monorepo project with common compiler options.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Using getAssetPath in Stencil Components
DESCRIPTION: Illustrates how to use the getAssetPath() function to retrieve the path to local assets in a Stencil component. This example shows its usage within the render method to set an image source.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Configuring Event Options in Stencil
DESCRIPTION: Shows the configuration options available for event emission including eventName, bubbles, cancelable, and composed properties.

LANGUAGE: tsx
CODE:
export interface EventOptions {
  /**
   * A string custom event name to override the default.
   */
  eventName?: string;
  /**
   * A Boolean indicating whether the event bubbles up through the DOM or not.
   */
  bubbles?: boolean;

  /**
   * A Boolean indicating whether the event is cancelable.
   */
  cancelable?: boolean;

  /**
   * A Boolean value indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.
   */
  composed?: boolean;
}

----------------------------------------

TITLE: Generating Stencil Stats via NPM Scripts in TypeScript
DESCRIPTION: Demonstrates how to add NPM scripts to generate Stencil stats using the --stats flag, optionally specifying an output file path.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Implementing Prop Watchers in Stencil
DESCRIPTION: Demonstrates how to watch and parse object and array properties in a Stencil component using @Watch decorators.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

LANGUAGE: tsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Exporting Generated Components in React Library
DESCRIPTION: This code snippet demonstrates how to export the generated Stencil components from the React library's entry file.

LANGUAGE: typescript
CODE:
export * from './components/stencil-generated';
export { defineCustomElements } from "stencil-library/loader";

----------------------------------------

TITLE: Loading Stencil Component via ES Module Import
DESCRIPTION: Shows how to import Stencil components using ES Modules in an HTML file.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Initializing Stencil Project with CLI
DESCRIPTION: Command to create a new Stencil project using the create-stencil CLI tool.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Configuring Hydrate App Output Target in TypeScript
DESCRIPTION: Configuration setup in stencil.config.ts to enable the hydrate app output target for server-side rendering.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Creating a Basic Form Component in Stencil
DESCRIPTION: This snippet demonstrates how to create a simple form component with a text input and submit button. It shows state management, event handling for input changes and form submission.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Selecting Stencil Starter Project
DESCRIPTION: CLI prompt for selecting a Stencil starter project. It shows options for component, app, and ionic-pwa starters.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Mocking Custom Code in Stencil with TypeScript
DESCRIPTION: Example of creating a mock for the 'getRandomInt' helper function. This demonstrates how to mock custom code by creating a mock file in the __mocks__ directory.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Component Usage Examples
DESCRIPTION: Demonstrates how to use a Stencil component in both HTML and TSX contexts after compilation.

LANGUAGE: html
CODE:
<!-- Here we use the component in an HTML file -->
<todo-list></todo-list>

LANGUAGE: tsx
CODE:
{/* Here we use the component in a TSX file */}
<todo-list></todo-list>

----------------------------------------

TITLE: Consuming Custom Elements Example
DESCRIPTION: Example showing how to import and define a custom element from a built library.

LANGUAGE: typescript
CODE:
import { defineCustomElement } from 'my-library/dist/components/hello-world';

defineCustomElement(); // Same as manually calling: customElements.define('hello-world', HelloWorld);

----------------------------------------

TITLE: Importing Stencil Core in NodeJS
DESCRIPTION: Example showing how to import the Stencil compiler in a NodeJS environment using CommonJS syntax.

LANGUAGE: tsx
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Importing and Initializing Stencil Components
DESCRIPTION: Shows how to import and initialize Stencil components in an application setup script. This includes applying polyfills, defining custom elements, and optionally setting a nonce for Content Security Policy.

LANGUAGE: typescript
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config
DESCRIPTION: Configuration code showing how to specify a custom screenshot connector in the Stencil testing config.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Selecting a Starter Project in create-stencil CLI
DESCRIPTION: CLI prompt for selecting the type of Stencil project to create, including options for components, apps, and Ionic PWA.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Creating Node Logger for Stencil Compiler in TypeScript
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the Stencil compiler and dev-server. It requires the NodeJS process object as an argument.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Creating a Basic Form Component in Stencil
DESCRIPTION: This snippet demonstrates how to create a simple form component with a text input and submit button. It shows state management, event handling for input changes and form submission.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Basic Copy Task Configuration in Stencil
DESCRIPTION: Demonstrates how to copy an entire directory from src/images to www/images using the basic source configuration in a www output target.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      copy: [
        { src: 'images' }
      ]
    }
  ]

----------------------------------------

TITLE: Configuring Stencil for Vue Output
DESCRIPTION: Stencil configuration setup for generating Vue component wrappers using the vue-output-target.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Implementing Utility Helper in TypeScript
DESCRIPTION: Definition of a utility helper function getRandomInt that generates random integers within a specified range

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: JsonDocsMethod Complex Type Example
DESCRIPTION: Example of the new complexType field in the JSON-formatted documentation for a @Method in Stencil v4.0.0.

LANGUAGE: json
CODE:
{
  "complexType": {
    "signature": "(event?: UIEvent) => Promise<any>",
    "parameters": [
      {
        "tags": [
          {
            "name": "param",
            "text": "event The user interface event that called the open."
          }
        ],
        "text": "The user interface event that called the open."
      }
    ],
    "references": {
      "Promise": {
        "location": "global",
        "id": "global::Promise"
      },
      "UIEvent": {
        "location": "global",
        "id": "global::UIEvent"
      },
      "HTMLElement": {
        "location": "global",
        "id": "global::HTMLElement"
      }
    },
    "return": "Promise<any>"
  }
}

----------------------------------------

TITLE: Package.json Configuration for Lazy Loading
DESCRIPTION: Configuration for package.json to support lazy loading of components through different module systems.

LANGUAGE: json
CODE:
{
  "exports": "./dist/esm/my-design-system.js",
  "main": "./dist/cjs/my-design-system.js",
  "unpkg": "dist/my-design-system/my-design-system.esm.js"
}

----------------------------------------

TITLE: Documenting Component Properties in Stencil TypeScript
DESCRIPTION: This snippet demonstrates how to add a description to a @Prop in Stencil using a JSDocs-style comment. The comment is placed on the line preceding the property declaration.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Configuring docs-json Output Target in Stencil Config
DESCRIPTION: Configuration for automatically generating JSON documentation on each build. This is added to the Stencil config file to specify the output file path for the docs-json target.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: HTML Implementation with setAssetPath
DESCRIPTION: Example of using setAssetPath in an HTML file to configure asset base path

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class
DESCRIPTION: Example showing how to create a custom screenshot connector by extending the base ScreenshotConnector class from Stencil

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: OptimizeCss Function Declaration
DESCRIPTION: TypeScript function signature for CSS optimization utility.

LANGUAGE: typescript
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: OptimizeCss Function Declaration
DESCRIPTION: TypeScript function signature for CSS optimization utility.

LANGUAGE: typescript
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Basic E2E Test Setup in Stencil
DESCRIPTION: Demonstrates the basic structure of an end-to-end test in Stencil, including importing the necessary functions, setting up a test page, and making assertions.

LANGUAGE: typescript
CODE:
import { newE2EPage } from '@stencil/core/testing';

describe('example', () => {
  it('should render a foo-component', async () => {
    const page = await newE2EPage();
    await page.setContent(`<foo-component></foo-component>`);
    const el = await page.find('foo-component');
    expect(el).not.toBeNull();
  });
});

----------------------------------------

TITLE: Slot Usage in Components
DESCRIPTION: Examples of using slots for content projection in Stencil components, including named slots.

LANGUAGE: tsx
CODE:
// my-component.tsx

render() {
  return (
    <div>
      <h2>A Component</h2>
      <div><slot /></div>
    </div>
  );
}

LANGUAGE: tsx
CODE:
render(){
  return(
    <my-component>
      <p>Child Element</p>
    </my-component>
  )
}

----------------------------------------

TITLE: Using Build Constants in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Build Constants in a Stencil component to execute different code in development and production modes, as well as detect browser or server environments.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Keyboard Event Handling
DESCRIPTION: Example of handling keyboard events and checking specific keys using the keydown event.

LANGUAGE: tsx
CODE:
@Listen('keydown')
handleKeyDown(ev: KeyboardEvent){
  if (ev.key === 'ArrowDown'){
    console.log('down arrow pressed')
  }
}

----------------------------------------

TITLE: Selecting Stencil Starter Project
DESCRIPTION: CLI prompt for selecting a Stencil starter project. It shows options for component, app, and ionic-pwa starters.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Advanced Screenshot Comparison Test in Stencil
DESCRIPTION: Comprehensive example of a screenshot comparison test in Stencil, including setting global styles, finding elements, comparing screenshots with different tolerance levels, and checking for hydration.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    // In order to test against any global styles you may have, don't forget to set the link to the global css. You don't have to do this if your stencil.config.ts file doesn't build a global css file with globalStyle.
    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    // To start comparing the visual result, you first must run page.compareScreenshot; This will capture a screenshot, and save the file to "/screenshot/images". You'll be able to check that into your repo to provide those results to your team. You can only have one of these commands per test. 
    const results = await page.compareScreenshot();

    // Finally, we can test against the previous screenshots. 
    // Test against hard pixels
    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    // Test against the percentage of changes. if 'allowableMismatchedRatio' is above 20% changed, 
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: CSS Imports for Stencil Button Component
DESCRIPTION: Shows CSS imports for a button component, demonstrating how multiple imports can lead to increased file size and potential performance issues in SSR contexts.

LANGUAGE: css
CODE:
/* button.css */
@import "../css/base.css";
@import "../css/tokens.css";
@import "../css/animations.css";
@import "../css/utilities.css";

/* component-specific styles */
button {
    ...
}

----------------------------------------

TITLE: Importing Stencil Components in TypeScript
DESCRIPTION: Demonstrates how to import a Stencil component library in a TypeScript application.

LANGUAGE: typescript
CODE:
import 'my-design-system';

----------------------------------------

TITLE: Configuring Angular Output Target in Stencil Config
DESCRIPTION: Add the angularOutputTarget configuration to the Stencil config file to generate Angular component wrappers.

LANGUAGE: typescript
CODE:
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
    },
    angularOutputTarget({
      componentCorePackage: 'stencil-library',
      outputType: 'component',
      directivesProxyFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/components.ts',
      directivesArrayFile: '../angular-workspace/projects/component-library/src/lib/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Customizing Playwright Test File Matching
DESCRIPTION: Modifies the Playwright config to match a different test file pattern, useful for gradual migration or coexistence with other testing setups.

LANGUAGE: typescript
CODE:
export default createConfig({
  // Example: match all test files with the 'e2e.playwright.ts' naming convention
  testMatch: '*.e2e.playwright.ts',
});

----------------------------------------

TITLE: CSS Documentation Example
DESCRIPTION: Example showing how to document CSS custom properties using JSDoc annotations

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Consuming Angular Wrapper Components
DESCRIPTION: Example of importing and using the generated Angular component wrappers in an Angular application.

LANGUAGE: typescript
CODE:
// app.module.ts

import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

LANGUAGE: html
CODE:
<!-- app.component.html -->

<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Configuring docs-custom Output Target in Stencil
DESCRIPTION: Example configuration for setting up the docs-custom output target in a Stencil project. The configuration includes a generator function that receives the JsonDocs data for custom processing.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: Command to install the ember-cli-stencil addon for legacy Ember projects using Stencil components.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Component Directory Structure Example
DESCRIPTION: Shows the directory structure created when generating a new component in the src/components folder.

LANGUAGE: plain
CODE:
src
└── components
    └── page-home
        ├── page-home.css
        ├── page-home.e2e.ts
        ├── page-home.spec.ts
        └── page-home.tsx

----------------------------------------

TITLE: Querying Typed Stencil Component in TypeScript
DESCRIPTION: Demonstrates how to properly type a reference to a Stencil-generated Web Component using the automatically generated HTML element interfaces. Shows how to query and interact with an ion-button component with full type safety.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Exporting Vue component wrappers
DESCRIPTION: Exporting the generated Vue component wrappers and plugin.

LANGUAGE: typescript
CODE:
export * from './components';
export * from './plugin';

----------------------------------------

TITLE: Setting Object Props Manually in JavaScript
DESCRIPTION: Demonstrates how to set object props manually on a Stencil component using JavaScript in a non-JSX environment.

LANGUAGE: markup
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Helper Methods Export
DESCRIPTION: Default export of helper methods from the index.js file in the output directory.

LANGUAGE: javascript
CODE:
export { setAssetPath, setPlatformOptions } from '@stencil/core/internal/client';

----------------------------------------

TITLE: Example of Expanded docs-json Output for @Method
DESCRIPTION: JSON representation of the expanded documentation for a @Method in the docs-json output target.

LANGUAGE: json
CODE:
{
  "complexType": {
    "signature": "(event?: UIEvent) => Promise<any>",
    "parameters": [
      {
        "tags": [
          {
            "name": "param",
            "text": "event The user interface event that called the open."
          }
        ],
        "text": "The user interface event that called the open."
      }
    ],
    "references": {
      "Promise": {
        "location": "global",
        "id": "global::Promise"
      },
      "UIEvent": {
        "location": "global",
        "id": "global::UIEvent"
      },
      "HTMLElement": {
        "location": "global",
        "id": "global::HTMLElement"
      }
    },
    "return": "Promise<any>"
  }
}

----------------------------------------

TITLE: Using Slots in Stencil Components
DESCRIPTION: Demonstrates how to use slots to render dynamic child content in specific locations within a component.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>
      <h2>A Component</h2>
      <div><slot /></div>
    </div>
  );
}

----------------------------------------

TITLE: Using a Helper Function in a Service
DESCRIPTION: Demonstrates how the 'getRandomInt' helper function is used in a service file. This setup is used to illustrate mocking of your own code.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Using Stencil Components in Angular Template
DESCRIPTION: Leverage the wrapped Stencil components in an Angular component template.

LANGUAGE: html
CODE:
<my-component first="Your" last="Name"></my-component>

----------------------------------------

TITLE: Basic WWW Output Target Copy Configuration
DESCRIPTION: Example showing how to configure a basic copy task in the www output target to copy an images directory.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      copy: [
        { src: 'images' }
      ]
    }
  ]

----------------------------------------

TITLE: Loading Stencil Configuration
DESCRIPTION: Presents the signature of the loadConfig() function, used to transform raw config information into a usable config object for the compiler and dev-server.

LANGUAGE: tsx
CODE:
loadConfig(init?: LoadConfigInit): Promise<LoadConfigResults>

----------------------------------------

TITLE: Correct Component Organization in TypeScript
DESCRIPTION: A set of examples showing the correct way to organize components and utility functions in separate files, adhering to Stencil's bundling requirements.

LANGUAGE: typescript
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: typescript
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: typescript
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Configuring Supplemental Public Types
DESCRIPTION: Configuration for including additional type definitions in JSON documentation

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json',
      supplementalPublicTypes: 'src/public-interfaces.ts',
    }
  ]
};

----------------------------------------

TITLE: Disabling transformAliasedImportPathsInCollection in Stencil v4.0.0
DESCRIPTION: Configuration snippet for disabling the transformAliasedImportPathsInCollection feature for the dist output target in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Running Individual Tasks in Stencil CLI with TypeScript
DESCRIPTION: Executes individual tasks given a NodeJS process, Stencil config, and task command. An optional compiler system can be provided.

LANGUAGE: typescript
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Defining Props in Stencil Component
DESCRIPTION: Shows how to define object and array props in a Stencil component class using decorators.

LANGUAGE: tsx
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Basic Image Copy Configuration in Stencil
DESCRIPTION: Example showing how to configure copy tasks in the www output target to copy images from src/images to www/images directory.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      copy: [
        { src: 'images' }
      ]
    }
  ]

----------------------------------------

TITLE: Creating a Consumer Vue App
DESCRIPTION: Command to generate a new Vue app using Vue CLI.

LANGUAGE: bash
CODE:
npm init vue@3 my-app

----------------------------------------

TITLE: Using Rollup Plugin for Asset Copying in Stencil
DESCRIPTION: Shows how to use the rollup-plugin-copy NPM module to copy asset files to the distribution directory during the Stencil build process.

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Disabling Type Declarations for dist-custom-elements in Stencil v3
DESCRIPTION: Configuration to disable type declaration generation for the dist-custom-elements output target in Stencil v3, which is now enabled by default. This is set in the project's stencil.config.ts file.

LANGUAGE: typescript
CODE:
// stencil.config.ts
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      generateTypeDeclarations: false,
      // ...
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Implementing CSP Nonces in Stencil Dist Output Target
DESCRIPTION: Demonstrates how to use the setNonce helper function to set nonce attributes for all script and style tags in a Stencil dist output target, specifically in an Angular app's entrypoint.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Documenting Component Properties in Stencil TypeScript
DESCRIPTION: Example of how to add documentation to a Stencil component property using JSDoc comments. Shows the proper format for documenting optional properties with descriptions.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Documenting CSS Custom Properties in Stencil
DESCRIPTION: Example of how to document CSS custom properties using @prop JSDoc tags in the component's CSS file, which will be included in the generated README.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Listening to Events from Non-JSX Elements in Stencil
DESCRIPTION: Demonstrates how to add event listeners to Stencil components when not using JSX. The example shows adding a listener for the 'todoCompleted' event using vanilla JavaScript.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Custom Clock Component - Stencil TSX
DESCRIPTION: Complete example of a clock component implementing connectedCallback and disconnectedCallback to manage a timer that updates every second.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Basic Component Testing with newSpecPage in TypeScript
DESCRIPTION: Demonstrates how to test a Stencil component using newSpecPage() utility with HTML initialization. The test verifies if the component renders with expected content.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Using a Functional Component with Props in Stencil JSX
DESCRIPTION: Shows how to use a functional component by passing props as attributes in JSX.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Using Fragment Component in TSX
DESCRIPTION: Demonstrates using the Fragment component to group multiple elements without adding a wrapper node to the DOM. Requires proper TypeScript compiler configuration for JSX.

LANGUAGE: tsx
CODE:
import { Component, Fragment, h } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Listening to Stencil Component Events in Plain JavaScript
DESCRIPTION: Shows how to add event listeners to Stencil components using plain JavaScript, useful for non-JSX contexts or when working with Stencil components in traditional web applications.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Non-JSX Event Listening
DESCRIPTION: Demonstrates how to listen to Stencil component events using vanilla JavaScript addEventListener.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Screenshot Connector Supporting Interfaces
DESCRIPTION: Complete type definitions for all interfaces used in the screenshot connector implementation.

LANGUAGE: tsx
CODE:
export interface ScreenshotConnectorOptions {
  buildId: string;

  buildMessage: string;

  buildAuthor?: string;

  buildUrl?: string;

  previewUrl?: string;

  appNamespace: string;

  buildTimestamp: number;

  logger: Logger;

  rootDir: string;

  cacheDir: string;

  packageDir: string;

  screenshotDirName?: string;

  imagesDirName?: string;

  buildsDirName?: string;

  currentBuildDir?: string;

  updateMaster?: boolean;

  allowableMismatchedPixels?: number;

  allowableMismatchedRatio?: number;

  pixelmatchThreshold?: number;

  waitBeforeScreenshot?: number;

  pixelmatchModulePath?: string;
}

----------------------------------------

TITLE: Basic Prerender Config Structure
DESCRIPTION: Basic structure for the prerender.config.ts file showing the export of a config object using PrerenderConfig interface.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Stencil Config for TypeScript Support
DESCRIPTION: Configuration for enabling TypeScript declarations generation in Stencil config.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      generateTypeDeclarations: true,
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Handling Service Worker Controller Change
DESCRIPTION: Stencil component code to reload the page when a new Service Worker takes control, ensuring the latest version is served.

LANGUAGE: typescript
CODE:
componentWillLoad() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker
      .getRegistration()
      .then(registration => {
        if (registration?.active) {
          navigator.serviceWorker.addEventListener(
            'controllerchange',
            () => window.location.reload()
          );
        }
      })
  }
}

----------------------------------------

TITLE: Component Internal Marking Example
DESCRIPTION: Example showing how to mark a Stencil component as internal using the @internal JSDoc tag.

LANGUAGE: tsx
CODE:
/**
 * @internal
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Generating Stats with Stencil Build Command (TSX)
DESCRIPTION: Demonstrates how to use the --stats flag with the Stencil build command to generate JSON documentation. The first example shows basic usage, while the second specifies a custom output path.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Generating a Stencil Component in Subdirectory
DESCRIPTION: Shows how to generate a Stencil component in a subdirectory using the CLI. This command creates the component 'page-home' within the 'pages' subdirectory of src/components.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Using getAssetPath() in Stencil Component
DESCRIPTION: Demonstrates how to use the getAssetPath() function to get the path to local assets in a Stencil component. This is useful for referencing assets like images or other resources.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Invalid Component Module Export Example
DESCRIPTION: Demonstrates an incorrect way of exporting utilities alongside a component, which violates Stencil's one-component-per-module rule.

LANGUAGE: tsx
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Creating a Vue plugin for custom elements
DESCRIPTION: Vue plugin to register custom elements for lazy-loaded components.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Watching and Parsing Object Props in Stencil Component
DESCRIPTION: Shows how to watch for changes in object props and parse them into internal state variables using @Watch decorators in a Stencil component.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

----------------------------------------

TITLE: Importing Lazy-Loaded Components via Script Tag in HTML
DESCRIPTION: Example of importing a Stencil component library using a script tag for lazy loading.

LANGUAGE: html
CODE:
<script type="module" src="https://unpkg.com/my-design-system"></script>

----------------------------------------

TITLE: Using page.waitForChanges() in Stencil Playwright E2E Tests
DESCRIPTION: Illustrates the usage of page.waitForChanges() method to wait for Stencil components to rehydrate after operations that trigger re-renders in end-to-end tests.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // Assume we have a template setup with the `my-component` component and a `button`
    await page.goto('/my-component/my-component.e2e.html');

    const button = page.locator('button');
    // Assume clicking the button changes the `@Prop()` values on `my-component`
    button.click();
    await page.waitForChanges();
  });
});

----------------------------------------

TITLE: Configuring Stencil Output Target for SSR
DESCRIPTION: Configuration code for setting up the dist-hydrate-script output target in stencil.config.ts

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Configuring Event Options in Stencil
DESCRIPTION: Shows how to use the EventOptions interface to configure custom event behavior, including setting a custom event name, and controlling bubbling, cancelability, and composition.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Mocked Utility Implementation
DESCRIPTION: Mock implementation of the getRandomInt utility function that returns a fixed value.

LANGUAGE: typescript
CODE:
export const getRandomInt = () => 42;

----------------------------------------

TITLE: Using Stringified Props in HTML
DESCRIPTION: Demonstrates how to pass stringified object and array props to a Stencil component in HTML. This approach allows complex data to be passed as string attributes.

LANGUAGE: tsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Stencil Project Structure Example
DESCRIPTION: Shows the typical file structure for a Stencil project with E2E testing setup

LANGUAGE: tree
CODE:
stencil-project-root
└── src
    └── components
        ├── my.component.tsx
        └── test <-- directory containing test files
            ├── my-component.e2e.ts
            └── my-component.e2e.html

----------------------------------------

TITLE: Running Stencil CLI
DESCRIPTION: Executes the CLI with provided initialization options. Used by the default bin/stencil file and can be implemented externally.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Correct Component Module Organization
DESCRIPTION: Shows the proper way to organize component code by separating utilities into their own module files.

LANGUAGE: tsx
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Transpiling Stencil Code
DESCRIPTION: Shows the function signature for transpiling Stencil code. It takes source code as a string and optional transpile options, returning a Promise with the transpilation results.

LANGUAGE: typescript
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Displaying SemVer Format in Markdown
DESCRIPTION: Demonstrates the format of Semantic Versioning using inline code blocks in Markdown.

LANGUAGE: markdown
CODE:
<code>major.minor.patch.</code>

----------------------------------------

TITLE: Parsing Command-line Flags for Stencil CLI in TypeScript
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object. It's used internally by the CLI to process arguments.

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Configuring Project Structure with Lerna
DESCRIPTION: Example directory structure for a monorepo containing both Stencil and React libraries.

LANGUAGE: plaintext
CODE:
top-most-directory/
└── packages/
    ├── stencil-library/
    │   ├── stencil.config.js
    │   └── src/components/
    └── react-library/
        └── src/
            ├── components/
            └── index.ts

----------------------------------------

TITLE: Differential Bundling Script Tags
DESCRIPTION: This HTML snippet shows how to include differential bundling script tags. It uses the 'module' and 'nomodule' attributes to serve different bundles to modern and legacy browsers respectively.

LANGUAGE: markup
CODE:
<script type="module" src="/build/app.esm.js"></script>
<script nomodule src="/build/app.js"></script>

----------------------------------------

TITLE: Importing Component Library in Angular Module
DESCRIPTION: TypeScript code to import the component library module in an Angular application module.

LANGUAGE: typescript
CODE:
import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config
DESCRIPTION: Configuration setup for specifying a custom screenshot connector module in the Stencil testing config.

LANGUAGE: typescript
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Generating JSON Docs Using CLI Command
DESCRIPTION: Shows how to generate documentation JSON file using Stencil CLI command

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Adding CSP Nonce Meta Tag for SSR
DESCRIPTION: This HTML snippet shows how to add a meta tag with a CSP nonce for Server-Side Rendering (SSR). The nonce value should be generated on each page request.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Marking a Stencil Component as Internal
DESCRIPTION: Demonstrates how to use the @internal JSDoc tag to mark a component as internal, skipping README generation.

LANGUAGE: typescript
CODE:
/**
 * @internal
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Custom Footer Configuration
DESCRIPTION: Configuration for adding a custom footer to generated README files

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Helper Methods Export
DESCRIPTION: Default export of helper methods from the index.js file in the output directory.

LANGUAGE: javascript
CODE:
export { setAssetPath, setPlatformOptions } from '@stencil/core/internal/client';

----------------------------------------

TITLE: Marking a Component as Internal
DESCRIPTION: Use the @internal JSDoc tag to mark a component as internal and skip README generation for it.

LANGUAGE: typescript
CODE:
/**
 * @internal
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Writing E2E Test Using page.goto()
DESCRIPTION: Demonstrates how to write an end-to-end test using the page.goto() method to load a pre-defined HTML template. It shows how to navigate to the test HTML file and perform assertions on the rendered component.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // The path here is the path to the www output relative to the dev server root directory
    await page.goto('/components/my-component/test/my-component.e2e.html');

    // Rest of test
    const component = await page.locator('my-component');
    await expect(component).toHaveText(`Hello World! I'm Stencil`);
  });
});

----------------------------------------

TITLE: VS Code Launch Configuration for Stencil Tests
DESCRIPTION: Configuration for VS Code's launch.json to enable debugging Stencil tests directly in the IDE.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "E2E Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--e2e", "--", "--maxWorkers=0", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Spec Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--spec", "--", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

----------------------------------------

TITLE: VS Code Launch Configuration for Stencil Tests
DESCRIPTION: Configuration for VS Code's launch.json to enable debugging Stencil tests directly in the IDE.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "E2E Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--e2e", "--", "--maxWorkers=0", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Spec Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--spec", "--", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

----------------------------------------

TITLE: Defining a Basic Functional Component in Stencil
DESCRIPTION: Demonstrates the simplest form of a functional component in Stencil, which takes props and returns JSX.

LANGUAGE: tsx
CODE:
const Hello = props => <h1>Hello, {props.name}!</h1>;

----------------------------------------

TITLE: Basic Ionic Component Usage in Ember
DESCRIPTION: Example of using an Ionic toggle component in an Ember template

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Event Handling in Stencil Components
DESCRIPTION: Shows how to handle user input events like clicks and input changes using arrow functions.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Synchronous Transpilation in Stencil
DESCRIPTION: Displays the function signature for synchronously transpiling Stencil code. It's similar to the async version but requires TypeScript to be globally available in browser environments.

LANGUAGE: typescript
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config
DESCRIPTION: Configuration setup for specifying a custom screenshot connector in the Stencil testing config file

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Using hydrateDocument Function for SSR
DESCRIPTION: This example shows how to use the hydrateDocument function in a server's response logic. It takes a document object and returns a promise with hydrated results, including the hydrated HTML.

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

export function hydrateComponents(doc) {
  return hydrateDocument(doc)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: Demonstrates how to use Build.isDev conditional to execute different code paths in development versus production environments. The example shows implementation within a Stencil component's lifecycle method componentDidLoad().

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Checking Push Subscription Status
DESCRIPTION: JavaScript code to check the current push subscription status, useful for updating the backend or prompting the user to subscribe.

LANGUAGE: javascript
CODE:
self.registration.pushManager.getSubscription().then(subscription => {
  if (!subscription) {
    // ask the user to register for push
    return;
  }

  // update the database
  console.log(subscription);
});

----------------------------------------

TITLE: Accessing Worker Instance Directly in Stencil
DESCRIPTION: Demonstrates how to access the actual Worker instance in Stencil for manual control. This example shows how to use both the direct worker API and the proxy methods.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    worker.postMessage(['send data manually']);

    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config
DESCRIPTION: Demonstrates how to configure the stats output target in stencil.config.ts for automatic stats generation during builds.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Generating a Stencil Component in Subfolder
DESCRIPTION: Shows how to generate a Stencil component in a specific subfolder within the src/components directory using the CLI.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Using Custom JSDoc Tags
DESCRIPTION: Example of using custom JSDoc tags in component documentation

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Implementing Prop Watchers in Stencil
DESCRIPTION: Illustrates how to watch and parse string-based object properties in a Stencil component using @Watch decorators.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

LANGUAGE: tsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3.1.0
DESCRIPTION: Example of enabling the transformAliasedImportPaths feature in a Stencil v3.1.0 configuration file. This feature transforms aliased import paths based on TypeScript path mappings.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Installing Ionic Framework in Ember
DESCRIPTION: Command to install the Ionic Framework core package in an Ember project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Watching Prop Changes in Stencil Component
DESCRIPTION: This TypeScript snippet shows how to watch for changes in props, parse them, and update internal state in a Stencil component.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

----------------------------------------

TITLE: Importing Auto-Defined Standalone Components in TypeScript
DESCRIPTION: Example of importing an auto-defined standalone component in TypeScript.

LANGUAGE: typescript
CODE:
import 'my-design-system/my-component'

----------------------------------------

TITLE: Customizing Service Worker Configuration in Stencil
DESCRIPTION: Demonstrates how to modify the default Service Worker configuration in a Stencil project's config file. This example adds additional file types to the glob patterns for pre-caching.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: {
        globPatterns: [
          '**/*.{js,css,json,html,ico,png}'
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Stencil Component with Method Using Helper
DESCRIPTION: Definition of a Stencil component 'Foo' with a method 'bar' that uses the 'getRandomInt' helper. This showcases how helpers are typically used within Stencil components.

LANGUAGE: typescript
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Using a Stencil Component in HTML
DESCRIPTION: Example of how to use a Stencil component in HTML markup after it has been compiled.

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: Example showing how to add Sass support to a Stencil project by configuring the sass plugin in the config file. Requires @stencil/sass package as a dependency.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Running Stencil CLI
DESCRIPTION: Main entry point for running the Stencil CLI with given initialization options. Used by the default bin/stencil file and can be used externally.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: This snippet shows how to add custom Rollup plugins to a Stencil project. It demonstrates injecting plugins before the node-resolve plugin and after the commonjs transform, using the rollupPlugins config option.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Creating a Custom Screenshot Connector (JavaScript)
DESCRIPTION: Shows how to create a custom screenshot connector by extending the base ScreenshotConnector class from Stencil. This allows for customization of screenshot testing behavior.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Standalone Component Usage in TypeScript
DESCRIPTION: Example of importing and registering standalone Stencil components.

LANGUAGE: typescript
CODE:
import { MyComponent, defineCustomElementMyComponent } from 'my-design-system'

// register to CustomElementRegistry
defineCustomElementMyComponent()

// or extend custom element via
class MyCustomComponent extends MyComponent {
  // ...
}
define('my-custom-component', MyCustomComponent)

----------------------------------------

TITLE: Running Stencil CLI with Options
DESCRIPTION: Executes the CLI with given options. This function is used by Stencil's default bin/stencil file but can also be used externally.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Importing and Exporting Generated Wrappers in Angular Module
DESCRIPTION: Import and export the generated component wrappers in the main Angular module of the component library.

LANGUAGE: typescript
CODE:
import { DIRECTIVES } from './stencil-generated';

@NgModule({
  declarations: [...DIRECTIVES],
  exports: [...DIRECTIVES],
})
export class ComponentLibraryModule {}

----------------------------------------

TITLE: Updating Playwright Config for Custom Test Patterns
DESCRIPTION: TypeScript code to update the Playwright configuration to use a custom test file matching pattern.

LANGUAGE: typescript
CODE:
export default createConfig({
  // Example: match all test files with the 'e2e.playwright.ts' naming convention
  testMatch: '*.e2e.playwright.ts',
});

----------------------------------------

TITLE: Consuming Angular Wrapper Components in Module-based App
DESCRIPTION: Shows how to import and use the generated Angular component wrappers in a module-based Angular application.

LANGUAGE: typescript
CODE:
import { ComponentLibraryModule } from 'component-library';

@NgModule({
  imports: [ComponentLibraryModule],
})
export class AppModule {}

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: This snippet shows how to configure the 'dist' output target in a Stencil project's configuration file. It generates a reusable component library that can be self-lazy loading.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Generating JSON Documentation with Stencil CLI
DESCRIPTION: Use the Stencil CLI to generate JSON documentation for your project.

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Build Conditionals in a Stencil component. It imports the Build object from @stencil/core and uses the isDev property to conditionally execute code based on the development or production environment.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Building Docs with Stencil CLI
DESCRIPTION: Common CLI commands to generate README documentation

LANGUAGE: bash
CODE:
npx stencil build
npm stencil build --watch
npx stencil build --docs
npx stencil docs

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil
DESCRIPTION: Basic configuration to enable README generation in stencil.config.ts

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Setting Props Manually in JavaScript
DESCRIPTION: Shows how to set object and array props manually using JavaScript in a non-JSX environment.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Component Naming Examples in HTML
DESCRIPTION: Shows correct and incorrect component naming conventions, emphasizing proper prefix usage and semantic naming patterns.

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

----------------------------------------

TITLE: Listening to Events in Stencil Components
DESCRIPTION: Shows how to use the @Listen() decorator to handle DOM events, including custom events emitted by other components. It covers basic usage and configuration options.

LANGUAGE: typescript
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

LANGUAGE: typescript
CODE:
  @Listen('scroll', { target: 'window' })
  handleScroll(ev) {
    console.log('the body was scrolled', ev);
  }

LANGUAGE: typescript
CODE:
  @Listen('click', { capture: true })
  handleClick(ev) {
    console.log('click');
  }

LANGUAGE: typescript
CODE:
@Listen('keydown')
handleKeyDown(ev: KeyboardEvent){
  if (ev.key === 'ArrowDown'){
    console.log('down arrow pressed')
  }
}

----------------------------------------

TITLE: Component Testing with JSX Template in TSX
DESCRIPTION: Shows how to test a component using the template option with JSX syntax. The test passes a greeting prop to the component and validates the rendered output.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Creating a Form-Associated Stencil Component
DESCRIPTION: This snippet shows how to create a minimal form-associated Stencil component using the formAssociated option in the @Component decorator.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true
})
export class FormAssociated {
  render() {
    return <span>form associated!</span>
  }
}

----------------------------------------

TITLE: Creating an In-Memory Compiler System
DESCRIPTION: Shows the function signature for createSystem(), which creates an in-memory CompilerSystem instance independent of any platform.

LANGUAGE: typescript
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Data Binding in Stencil JSX
DESCRIPTION: Demonstrates how to bind dynamic data in JSX using curly braces syntax.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

LANGUAGE: tsx
CODE:
//ES6
`Hello ${this.name}`

//JSX
Hello {this.name}

----------------------------------------

TITLE: Defining Stencil Component in TypeScript
DESCRIPTION: Example of a Stencil component definition. This includes the @Component decorator, class declaration, props, and render function using JSX.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';
import { format } from '../../utils/utils';

@Component({
  tag: 'my-component',
  styleUrl: 'my-component.css',
  shadow: true,
})
export class MyComponent {
  @Prop() first: string;
  @Prop() middle: string;
  @Prop() last: string;

  private getText(): string {
    return format(this.first, this.middle, this.last);
  }

  render() {
    return <div>Hello, World! I'm {this.getText()}</div>;
  }
}

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config (TSX)
DESCRIPTION: Demonstrates how to specify a custom screenshot connector in the Stencil configuration file. The 'screenshotConnector' property is set to point to a custom connector file.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Loading Stencil Component using ES Modules
DESCRIPTION: Shows how to include Stencil components using an import statement with ES Modules in an HTML file.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil
DESCRIPTION: Example showing how to use Build.isBrowser conditional to handle code that should only run in browser or during prerendering.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Event Handling in Stencil Components
DESCRIPTION: Examples of handling user input events like button clicks and input changes using arrow functions.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Creating NodeJS Logger for Stencil Compiler
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the compiler and dev-server. It requires the NodeJS 'process' object as an argument.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Writing E2E Tests with page.setContent() in Stencil Playwright
DESCRIPTION: Shows how to write an end-to-end test using the page.setContent() method to define HTML content directly in the test file for Stencil Playwright.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    await page.setContent('<my-component first="Stencil"></my-component>');

    // Rest of test
  });
});

----------------------------------------

TITLE: Typed Functional Component with Interface
DESCRIPTION: Example of using the FunctionalComponent type with TypeScript interface for props.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Worker with Callback Progress Updates
DESCRIPTION: Demonstrates how to implement progress updates from a worker using callbacks, allowing for periodic updates during long-running tasks.

LANGUAGE: tsx
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

----------------------------------------

TITLE: Using @Watch Decorator in Stencil Component
DESCRIPTION: This example demonstrates how to use the @Watch decorator to observe changes in @Prop and @State decorated class members. It shows how to watch multiple properties and handle both prop and state changes.

LANGUAGE: tsx
CODE:
import { Component, Prop, State, Watch } from '@stencil/core';

@Component({
  tag: 'loading-indicator' 
})
export class LoadingIndicator {
  @Prop() activated: boolean;
  @State() busy: boolean;

  @Watch('activated')
  watchPropHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of activated is: ', oldValue);
    console.log('The new value of activated is: ', newValue);
  }

  @Watch('busy')
  watchStateHandler(newValue: boolean, oldValue: boolean) {
    console.log('The old value of busy is: ', oldValue);
    console.log('The new value of busy is: ', newValue);
  }
  
  @Watch('activated')
  @Watch('busy')
  watchMultiple(newValue: boolean, oldValue: boolean, propName:string) {
    console.log(`The new value of ${propName} is: `, newValue);
  }
}

----------------------------------------

TITLE: Installing Ionic Framework in Ember
DESCRIPTION: Command to install the Ionic Framework in an Ember project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Applying External Stylesheets to a Stencil Component
DESCRIPTION: Demonstrates how to use the 'styleUrl' option to apply an external stylesheet to a Stencil component.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrl: './todo-list.css',
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Creating NodeJS Logger for Stencil Compiler
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the Stencil compiler and dev-server. It requires the NodeJS 'process' object as an argument.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Data Binding in JSX
DESCRIPTION: Shows how to bind dynamic data within JSX using curly braces syntax.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

----------------------------------------

TITLE: Importing Lazy-Loaded Stencil Components in TypeScript
DESCRIPTION: This snippet shows how to import a Stencil component library in a TypeScript file for lazy loading. It uses the 'dist' output target.

LANGUAGE: typescript
CODE:
import 'my-design-system';

----------------------------------------

TITLE: Implementing Custom Service Worker Boilerplate
DESCRIPTION: Boilerplate code for a custom Service Worker, including Workbox import and precache manifest injection point. This allows for custom Service Worker logic while still utilizing Workbox features.

LANGUAGE: javascript
CODE:
// change to the version you get from `npm ls workbox-build`
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Implementing Worker Callbacks in Stencil
DESCRIPTION: Demonstrates how to use callbacks with Web Workers in Stencil to provide progress updates for long-running tasks.

LANGUAGE: tsx
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

----------------------------------------

TITLE: Unit Test with Inline Mock
DESCRIPTION: Example test using Jest's mock functionality with an inline mock implementation

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Installing WebdriverIO Visual Service Plugin
DESCRIPTION: Command to install the WebdriverIO visual testing service plugin as a development dependency

LANGUAGE: bash
CODE:
npm install --save-dev @wdio/visual-service

----------------------------------------

TITLE: Setting Document Title Using Prerender Config in Stencil
DESCRIPTION: This code snippet demonstrates how to use the afterHydrate hook in Stencil's Prerender Config to set the document title based on the URL pathname. It imports PrerenderConfig from @stencil/core and defines a config object with an afterHydrate function.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Dynamic State Updates with Lifecycle Methods
DESCRIPTION: Shows how to properly update @State with lifecycle methods and timers to create a functioning clock component.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;

    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Default Export of dist-custom-elements
DESCRIPTION: Shows the default export of the index.js file in the dist-custom-elements output target.

LANGUAGE: javascript
CODE:
export { setAssetPath, setPlatformOptions } from '@stencil/core/internal/client';

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project by configuring the sass plugin in the Stencil config file. It imports the necessary modules and adds the sass plugin to the plugins array.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Configuring Supplemental Public Types
DESCRIPTION: Configuration for including additional type documentation in the JSON output

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json',
      supplementalPublicTypes: 'src/public-interfaces.ts',
    }
  ]
};

----------------------------------------

TITLE: Implementing formResetCallback in Stencil
DESCRIPTION: Shows how to use the formResetCallback to reset the component's internal state and form validity when the form is reset.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-reset-cb',
  formAssociated: true,
})
export class MyComponent {
  @AttachInternals()
  internals: ElementInternals;

  formResetCallback() {
    this.internals.setValidity({});
    this.internals.setFormValue("");
  }

  render() {
    return <input type="text"></input>
  }
}

----------------------------------------

TITLE: Creating NodeJS Logger for Stencil Compiler
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the Stencil compiler and dev-server. It requires the NodeJS 'process' object as an argument.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Importing Ionic Components in Ember
DESCRIPTION: JavaScript code to import all components from the Ionic Framework in an Ember application.

LANGUAGE: js
CODE:
import '@ionic/core'; // installs all the components from Ionic Framework

----------------------------------------

TITLE: Updating TSConfig for Playwright
DESCRIPTION: Required TypeScript configuration update to support the Symbol.asyncDispose feature

LANGUAGE: json
CODE:
{
  "lib": [
    "...",
    "ESNext.Disposable"
  ],
  "..."
}

----------------------------------------

TITLE: Installing Ionic Framework in Ember
DESCRIPTION: Command to install the Ionic Framework package in an Ember project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: Shows how to configure custom Rollup plugins with specific execution order, allowing injection before node-resolve and after commonjs transform. This configuration enables extended build process customization.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Generating JSON Docs via CLI Command
DESCRIPTION: Command to generate JSON documentation using Stencil CLI

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: Demonstrates how to use Build.isDev conditional to execute different code blocks in development versus production environments. The example shows implementation within a Stencil component's lifecycle method.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Specifying Output Directory for README Files
DESCRIPTION: Configure the output directory for generated README files by setting the dir property in the output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      dir: 'output'
    }
  ]
};

----------------------------------------

TITLE: Testing with a Mocked Utility Function
DESCRIPTION: Example of a test that uses a mocked utility function. It demonstrates how to use Jest's 'jest.mock()' to apply the mock and test the 'bar' function.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils');

import { bar } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Implementing Advanced Form with Select Inputs and Validation
DESCRIPTION: Advanced form implementation featuring email validation, multiple select inputs, and dynamic options rendering. Demonstrates constraint validation API usage and handling of multiple form controls with state management.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Disabling transformAliasedImportPathsInCollection in Stencil v4.0.0
DESCRIPTION: Configuration snippet for disabling the transformAliasedImportPathsInCollection feature for the dist output target in Stencil v4.0.0 config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: Example of how to document slots in a Stencil component using the @slot JSDoc tag. This allows for clear documentation of component composition.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Stencil Component Implementation with Method
DESCRIPTION: Shows a Stencil component implementation that uses the getRandomInt utility function in a method.

LANGUAGE: tsx
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Asset Directory Configuration in Stencil Component
DESCRIPTION: Demonstrates how to configure and use asset directories in a Stencil component for handling static files like images.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Using Refs in Stencil Components
DESCRIPTION: Shows how to use refs to get direct references to DOM elements in Stencil components.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'app-home',
})
export class AppHome {

  textInput!: HTMLInputElement;

  handleSubmit = (event: Event) => {
    event.preventDefault();
    console.log(this.textInput.value);
  }

  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <label>
          Name:
          <input type="text" ref={(el) => this.textInput = el as HTMLInputElement} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Stencil Component Using Web Worker
DESCRIPTION: Example of a Stencil component importing and using Web Worker functions

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result);
    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Configuring NPM Scripts for Stencil Tests
DESCRIPTION: Example NPM scripts to run Stencil tests, including unit tests, watched unit tests, and end-to-end tests. These scripts use the 'stencil test' command with various flags.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Inline Styles in Stencil Components
DESCRIPTION: This example demonstrates how to use inline styles in a Stencil component using the styles option in the @Component decorator.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styles: 'div { background-color: #fff }'
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Using Build Conditionals for Browser-Specific Code in Stencil
DESCRIPTION: Demonstrates how to use the Build.isBrowser conditional to execute code only in the browser environment and not during prerendering.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Directory Structure Example for Stencil Components
DESCRIPTION: Demonstrates the recommended file organization pattern for Stencil components, showing how to structure component files and tests in separate directories.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Using String-Based Props in HTML
DESCRIPTION: Demonstrates how to pass string-based object and array props to a Stencil component in HTML. This is necessary when working with non-JSX environments where direct object passing is not possible.

LANGUAGE: tsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Creating Node Logger in Stencil CLI
DESCRIPTION: Creates a logger instance based on NodeJS APIs for use by the compiler and dev-server. Requires the NodeJS process object as input.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Stencil Configuration for E2E Testing
DESCRIPTION: Configuration setup in stencil.config.ts for handling end-to-end tests, including output targets and file copying settings.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'test-app',
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null,
      copy: [{ src: '**/test/*.html' }, { src: '**/test/*.css' }],
    },
  ],
};

----------------------------------------

TITLE: Using a Functional Component with Props in Stencil JSX
DESCRIPTION: Shows how to use a functional component by passing props as attributes in JSX.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Value Accessor Configuration for Form Components
DESCRIPTION: Configuration example for integrating Stencil components with Angular forms using valueAccessorConfigs.

LANGUAGE: typescript
CODE:
const angularValueAccessorBindings: ValueAccessorConfig[] = [
  {
    elementSelectors: ['my-input[type=text]'],
    event: 'myChange',
    targetAttr: 'value',
    type: 'text',
  },
];

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    angularOutputTarget({
      componentCorePackage: 'component-library',
      directivesProxyFile: '{path to your proxy file}',
      valueAccessorConfigs: angularValueAccessorBindings,
    }),
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
  ],
};

----------------------------------------

TITLE: Initializing Git Repository for Stencil Project
DESCRIPTION: Commands to initialize a git repository for a new Stencil project, add all files, and make the initial commit.

LANGUAGE: bash
CODE:
git init
git add -A
git commit -m "initialize project using stencil cli"

----------------------------------------

TITLE: Installing Ionic Framework in Ember
DESCRIPTION: Command to install the Ionic Framework core package in an Ember project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Getting Current Style Mode in Stencil Application
DESCRIPTION: Shows how to use getMode() to retrieve the current style mode of a Stencil application or component. This can be useful for conditional rendering or styling based on the current mode.

LANGUAGE: typescript
CODE:
import { getMode } from '@stencil/core'

getMode(this);

----------------------------------------

TITLE: Implementing Shadow DOM in Stencil Component
DESCRIPTION: Example of enabling Shadow DOM in a Stencil component using the shadow option in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Configuring TypeScript Support in stencil.config.ts
DESCRIPTION: Demonstrates how to configure the stencil.config.ts file to generate TypeScript declarations for the component library.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      generateTypeDeclarations: true,
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Webpack Configuration for Custom Elements
DESCRIPTION: Example webpack configuration for consuming custom elements, including asset management.

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Testing Component Class Logic
DESCRIPTION: Demonstrates direct instantiation and testing of component class methods and properties.

LANGUAGE: typescript
CODE:
import { MyToggle } from '../my-toggle.tsx';

it('should toggle the checked property', () => {
  const toggle = new MyToggle();

  expect(toggle.checked).toBe(false);

  toggle.someMethod();

  expect(toggle.checked).toBe(true);
});

----------------------------------------

TITLE: Component Testing with WebdriverIO Matchers
DESCRIPTION: Demonstrates the recommended approach for asserting component content using WebdriverIO's built-in matchers, which support retries and are more resilient to flakiness

LANGUAGE: typescript
CODE:
expect(await $('my-component').getText())
    .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)

LANGUAGE: typescript
CODE:
await expect($('my-component'))
    .toHaveText(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)

----------------------------------------

TITLE: Implementing Private Methods in Stencil Components
DESCRIPTION: This snippet shows how to implement private methods in Stencil components. Private methods do not require the @Method() decorator and don't need to return a Promise.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: Demonstrates how to use Build.isDev conditional in a Stencil component to execute different code paths for development and production environments. The example shows importing the Build utility from @stencil/core and using it within the componentDidLoad lifecycle method.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Disabling transformAliasedImportPaths in Stencil v4.0.0
DESCRIPTION: Configuration example for disabling the transformAliasedImportPaths feature in Stencil v4.0.0 config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Enabling Path Alias Transformation in Stencil v3.1.0
DESCRIPTION: Configuration example showing how to enable path alias transformation in Stencil v3.1.0

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Generating Stats with Stencil CLI
DESCRIPTION: Shows how to use the --stats flag with Stencil CLI to generate statistics. It demonstrates two script configurations: one for default output and another specifying a custom file path.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Implementing Private Methods in Stencil Components
DESCRIPTION: This snippet shows how to implement private methods in Stencil components. Private methods do not require the @Method() decorator and are not required to be async or return a Promise.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: Accessing Stencil Version
DESCRIPTION: Shows how to access the current version of '@stencil/core'.

LANGUAGE: typescript
CODE:
version: string

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: Command to install the ember-cli-stencil addon in an Ember project for legacy integration with Stencil components.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: E2E Test HTML Template
DESCRIPTION: HTML template for end-to-end testing of Stencil components, including necessary script imports.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf8" />

    <!-- Replace with the path to your entrypoint -->
    <script src="../../../build/test-app.esm.js" type="module"></script>
    <script src="../../../build/test-app.js" nomodule></script>
  </head>
  <body>
    <my-component first="Stencil"></my-component>
  </body>
</html>

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: Command to install the ember-cli-stencil addon in an Ember project for legacy integration of Stencil components.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Advanced Web Worker Usage in Stencil
DESCRIPTION: Shows how to directly access the Worker instance and create worker pools in Stencil applications.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);
    const result = await sum(1, 2);
    console.log(result);
  }
}

----------------------------------------

TITLE: Documenting CSS Variables in Stencil Components
DESCRIPTION: Example of how to document CSS variables using JSDoc-style comments in a component's CSS file. This allows Stencil to include CSS variable documentation in the generated JSON.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Generating Stencil Component with CLI
DESCRIPTION: Demonstrates how to use the Stencil CLI to generate a new component. The command creates a component named 'my-new-component' in the src/components directory.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Documenting CSS Custom Properties in Stencil
DESCRIPTION: This example demonstrates how to document CSS custom properties in a Stencil component's CSS file using the @prop JSDoc tag.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Implementing Module and File Mocking in WebdriverIO
DESCRIPTION: Shows how to mock both project files and external modules using WebdriverIO's mocking functions. Demonstrates mocking a utility function to return a fixed value and mocking an entire external module.

LANGUAGE: typescript
CODE:
import { mock, fn } from '@wdio/browser-runner'
import { format } from './utils/utils.ts'

// mock files within the project
mock('./utils/utils.ts', () => ({
    format: fn().mockReturnValue(42)
}))
// mock whole modules and replace functionality with what is defined in `./__mocks__/leftpad.ts`
mock('leftpad')

console.log(format()) // returns `42`

----------------------------------------

TITLE: Removed Legacy Context and Connect APIs
DESCRIPTION: Example of deprecated @Prop decorators using context and connect options that have been removed in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
@Prop({ context: 'config' }) config: Config;
@Prop({ connect: 'ion-menu-controller' }) lazyMenuCtrl: Lazy<MenuController>;

----------------------------------------

TITLE: Loading Stencil Components via ES Modules
DESCRIPTION: Shows how to import Stencil components using ES Modules in a modern JavaScript environment. Uses the defineCustomElements function to register components.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script type="module">
      import { defineCustomElements } from 'https://cdn.jsdelivr.net/npm/@ionic/core/loader/index.es2017.mjs';
      defineCustomElements();
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Importing Dependencies in Stencil Web Workers
DESCRIPTION: Shows how to import both npm packages and local modules in a Stencil Web Worker. Stencil's compiler bundles all dependencies into a single file for the worker.

LANGUAGE: typescript
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Visual Testing a StencilJS Component
DESCRIPTION: Example test case demonstrating how to use toMatchElementSnapshot for visual regression testing of a StencilJS component.

LANGUAGE: typescript
CODE:
it('should match visual snapshot', async () => {
    const page = await newE2EPage();
    await page.setContent('<my-component first="Stencil" last="JS"></my-component>');

    const element = await page.find('my-component');
    await element.toMatchElementSnapshot();
});

----------------------------------------

TITLE: Applying External Stylesheets to a Stencil Component
DESCRIPTION: Demonstrates how to apply external stylesheets to a Stencil component using the styleUrl and styleUrls options.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrl: './todo-list.css',
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrls: ['./todo-list-1.css', './todo-list-2.css']
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styleUrls: {
     ios: 'todo-list-1.ios.scss',
     md: 'todo-list-2.md.scss',
  }
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Generating README Files Using Stencil Build Command
DESCRIPTION: Use the Stencil build command to generate README files for components. The --watch flag can be used for automatic updates.

LANGUAGE: bash
CODE:
npx stencil build

LANGUAGE: bash
CODE:
npm stencil build --watch

----------------------------------------

TITLE: Form Association Callback Implementation
DESCRIPTION: Example showing implementation of formAssociatedCallback to set ARIA label when form is ready.

LANGUAGE: tsx
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true,
})
export class FormAssociatedCmp {
  @AttachInternals()
  internals: ElementInternals;

  formAssociatedCallback(form) {
    form.ariaLabel = 'formAssociated called';
  }

  render() {
    return <input type="text" />;
  }
}

----------------------------------------

TITLE: Installing Legacy Ember Stencil Integration
DESCRIPTION: Command to install the legacy ember-cli-stencil addon for older Ember applications

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Configuring TypeScript Types for Jest
DESCRIPTION: JSON configuration to resolve type clashes between Mocha and Jest by preferring Jest types

LANGUAGE: json
CODE:
  "types": ["jest"]

----------------------------------------

TITLE: Configuring Asset Directories for a Stencil Component
DESCRIPTION: This snippet demonstrates how to use the 'assetsDirs' option to specify asset directories for a component, and how to use getAssetPath() to reference assets in the component's render method.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // 1. assetsDirs lists the 'assets' directory as a relative (sibling)
  // directory
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    // 2. the asset path is retrieved relative to the asset base path to use in
    // the <img> tag
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Service Worker Update Handler Component
DESCRIPTION: Component code for handling service worker updates and showing a reload toast when updates are available.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Creating In-Memory Compiler System
DESCRIPTION: Shows the function for creating an in-memory compiler system, independent of any platform.

LANGUAGE: typescript
CODE:
createSystem(): CompilerSystem

----------------------------------------

TITLE: Configuring Stencil Project for E2E Testing
DESCRIPTION: Shows the configuration in stencil.config.ts for setting up the project structure and output targets for end-to-end testing.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'test-app',
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null,
      copy: [{ src: '**/test/*.html' }, { src: '**/test/*.css' }],
    },
  ],
};

----------------------------------------

TITLE: Styling Host Element in Stencil CSS
DESCRIPTION: Demonstrates how to style the host element using CSS. It shows the difference in styling approach when using shadow DOM versus light DOM.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Documenting Stencil Component Slots
DESCRIPTION: Example of documenting slots in a Stencil component using JSDoc @slot tags.

LANGUAGE: tsx
CODE:
/**
 * @slot - Content is placed between the named slots if provided without a slot.
 * @slot primary - Content is placed to the left of the main slotted-in text.
 * @slot secondary - Content is placed to the right of the main slotted-in text.
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent {
  // ...
  
  render() {
    return (
      <section>
        <slot name="primary"></slot>
        <div class="content">
          <slot></slot>
        </div>
        <slot name="secondary"></slot>
      </section>
    );
  }
}

----------------------------------------

TITLE: Installing Ionic Framework in Ember
DESCRIPTION: Command to install the Ionic Framework core package in an Ember project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Setting Asset Path in Stencil Application
DESCRIPTION: Shows how to use the setAssetPath() function to set the path for Stencil to resolve local assets. This is typically done at the application level.

LANGUAGE: typescript
CODE:
import { setAssetPath } from '@stencil/core';
setAssetPath(`{window.location.origin}/`);

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: Shows how to write CSS for a component using Shadow DOM, including the use of the :host pseudo-class selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Checking Push Subscription Status
DESCRIPTION: JavaScript code to check the current push subscription status and handle subscription updates or new registrations.

LANGUAGE: javascript
CODE:
self.registration.pushManager.getSubscription().then(subscription => {
  if (!subscription) {
    // ask the user to register for push
    return;
  }

  // update the database
  console.log(subscription);
});

----------------------------------------

TITLE: Creating a Web Worker Pool in Stencil
DESCRIPTION: Shows how to create multiple Web Worker instances manually using the worker path provided by Stencil's bundling process.

LANGUAGE: tsx
CODE:
import { workerPath } from '../../stuff.worker.ts?worker';

const workerPool = [
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
];

----------------------------------------

TITLE: E2E Test Using page.goto() for Stencil Component
DESCRIPTION: Demonstrates an end-to-end test for a Stencil component using the page.goto() method to load a pre-defined HTML template.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { test } from '@stencil/playwright';

test.describe('my-component', () => {
  test('should render the correct name', async ({ page }) => {
    // The path here is the path to the www output relative to the dev server root directory
    await page.goto('/components/my-component/test/my-component.e2e.html');

    // Rest of test
    const component = await page.locator('my-component');
    await expect(component).toHaveText(`Hello World! I'm Stencil`);
  });
});

----------------------------------------

TITLE: Importing WebdriverIO Mocking Functions in TypeScript
DESCRIPTION: Shows how to import the core mocking utilities from the WebdriverIO browser runner module.

LANGUAGE: typescript
CODE:
import { mock, fn, unmock } from '@wdio/browser-runner'

----------------------------------------

TITLE: CSS Custom Properties Definition
DESCRIPTION: Example of defining CSS custom properties (variables) for component customization.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: CSS Custom Properties Definition
DESCRIPTION: Example of defining CSS custom properties (variables) for component customization.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Loading Stencil Component via CDN Script Tag
DESCRIPTION: This snippet demonstrates how to load a Stencil component using a script tag from a CDN in a simple HTML page.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Using CSS Custom Properties in Stencil
DESCRIPTION: Demonstrates the use of CSS custom properties (CSS variables) in Stencil components for flexible styling and customization.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Disabling Path Alias Transformation in Stencil v4.0.0
DESCRIPTION: Configuration for disabling the default path alias transformation in Stencil v4.0.0

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Test Implementation with Inline Mock in TypeScript
DESCRIPTION: Test file demonstrating inline mock implementation using jest.mock

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Configuring Chrome Debugger for Stencil Components
DESCRIPTION: VS Code launch configuration for debugging Stencil components in Chrome browser. Enables source map support and configures the debugger to connect to the Stencil dev server running on localhost:3333.

LANGUAGE: json
CODE:
{
  "type": "chrome",
  "request": "launch",
  "name": "Launch Chrome against localhost",
  "url": "http://localhost:3333",
  "sourceMaps": true,
  "sourceMapPathOverrides": {
    "*": "${webRoot}/*"
  }
}

----------------------------------------

TITLE: Configuring Stencil Output Target with Prerender Config
DESCRIPTION: Example showing how to set up the prerender configuration file path in stencil.config.ts using the prerenderConfig property.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Implementing Private Methods in Stencil Components
DESCRIPTION: Shows how to implement private methods in Stencil components. Unlike public methods, private methods do not require the @Method() decorator and don't need to return a Promise.

LANGUAGE: tsx
CODE:
class Component {
  // Since `getData` is not a public method exposed with @Method
  // it does not need to be async
  getData() {
    return this.someData;
  }
  render() {
    return (
      <div>{this.getData()}</div>
    );
  }
}

----------------------------------------

TITLE: E2E Test HTML Template
DESCRIPTION: HTML template used for end-to-end testing, including necessary script tags for loading Stencil components.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf8" />

    <!-- Replace with the path to your entrypoint -->
    <script src="../../../build/test-app.esm.js" type="module"></script>
    <script src="../../../build/test-app.js" nomodule></script>
  </head>
  <body>
    <my-component first="Stencil"></my-component>
  </body>
</html>

----------------------------------------

TITLE: Watching and Parsing Object Props
DESCRIPTION: Shows how to implement prop watching and parsing in a Stencil component using @Watch decorator and componentWillLoad lifecycle method.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

LANGUAGE: tsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Using renderToString for HTML Hydration
DESCRIPTION: Example demonstrating the use of renderToString function to hydrate HTML string with formatting options

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(srcHtml, {
  prettyHtml: true,
  removeScripts: true
});

console.log(results.html);

----------------------------------------

TITLE: Enabling Strict Mode for Documentation Generation
DESCRIPTION: Enable strict mode to receive warnings for missing documentation by adding 'strict: true' to the output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      strict: true
    }
  ]
};

----------------------------------------

TITLE: Generating Component in Subdirectory
DESCRIPTION: Shows how to use the 'stencil generate' command to create a new component in a subdirectory within src/components.

LANGUAGE: bash
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Configuring Custom Footer in README
DESCRIPTION: Add a custom footer to the generated README files by specifying the 'footer' property in the output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      footer: '*Built with love!*',
    }
  ]
};

----------------------------------------

TITLE: Rendering Multiple Stencil Components in a Test
DESCRIPTION: Example of how to render multiple interdependent Stencil components in a single test using the render method. This approach allows for testing component interactions and nested structures.

LANGUAGE: typescript
CODE:
render({
    components: [ComponentA, ComponentB, ComponentC, ComponentD],
    template: () => <component-a first="Stencil" last="'Don't call me a framework' JS" />
});

----------------------------------------

TITLE: Setting Asset Path in TypeScript
DESCRIPTION: Shows how to use the setAssetPath() function to set the path for Stencil to resolve local assets. This is typically used in the application's initialization code.

LANGUAGE: typescript
CODE:
import { setAssetPath } from '@stencil/core';
setAssetPath(`{window.location.origin}/`);

----------------------------------------

TITLE: CSS Variables Documentation Example
DESCRIPTION: Example of documenting CSS variables using JSDoc-style comments in CSS

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: CSS Variables Documentation Example
DESCRIPTION: Example of documenting CSS variables using JSDoc-style comments in CSS

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Form Association HTML Usage Example
DESCRIPTION: Example of how to use a form-associated custom element within an HTML form.

LANGUAGE: html
CODE:
<form>
  <custom-text-input name="my-custom-input"></custom-text-input>
</form>

----------------------------------------

TITLE: Component Hierarchy Example in Markup
DESCRIPTION: Shows the component hierarchy and the order of lifecycle method execution across nested components.

LANGUAGE: markup
CODE:
  <cmp-a>
    <cmp-b>
      <cmp-c></cmp-c>
    </cmp-b>
  </cmp-a>

----------------------------------------

TITLE: Implementing formAssociatedCallback in Stencil
DESCRIPTION: Shows how to use the formAssociatedCallback to set an aria label when the component is associated with a form.

LANGUAGE: typescript
CODE:
import { Component, h, AttachInternals } from '@stencil/core';

@Component({
  tag: 'form-associated',
  formAssociated: true,
})
export class FormAssociatedCmp {
  @AttachInternals()
  internals: ElementInternals;

  formAssociatedCallback(form) {
    form.ariaLabel = 'formAssociated called';
  }

  render() {
    return <input type="text" />;
  }
}

----------------------------------------

TITLE: Configuring Event Listener Options in Stencil
DESCRIPTION: Shows how to use the ListenOptions interface to configure event listener behavior, including setting the target, capture, and passive properties.

LANGUAGE: tsx
CODE:
  @Listen('scroll', { target: 'window' })
  handleScroll(ev) {
    console.log('the body was scrolled', ev);
  }

----------------------------------------

TITLE: Installing WebdriverIO Visual Service Package
DESCRIPTION: Command to install the WebdriverIO visual testing service package as a development dependency.

LANGUAGE: bash
CODE:
npm install --save-dev @wdio/visual-service

----------------------------------------

TITLE: Asset Directory Configuration in Stencil Component
DESCRIPTION: Demonstrates how to configure and use asset directories in a Stencil component for handling static files like images.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Custom Service Worker Implementation
DESCRIPTION: Boilerplate code for implementing a custom service worker with Workbox, including precaching configuration.

LANGUAGE: typescript
CODE:
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Setting Up a New Stencil Project
DESCRIPTION: After creating a new Stencil project, these commands change to the project directory, install dependencies, and start the development server.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Optimizing CSS with Stencil Compiler
DESCRIPTION: Shows the function signature for optimizing CSS using the Stencil Compiler utility.

LANGUAGE: typescript
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Configuring Playwright for Stencil
DESCRIPTION: TypeScript configuration file that sets up Playwright with Stencil-specific matchers and configuration options.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

// Add custom Stencil matchers to Playwright assertions
expect.extend(matchers);

export default createConfig({
  // Overwrite Playwright config options here
});

----------------------------------------

TITLE: Using Element Decorator in Stencil Components
DESCRIPTION: Demonstrates how to use the @Element decorator to access the host element within a component class, including height calculation example.

LANGUAGE: tsx
CODE:
import { Element } from '@stencil/core';

...
export class TodoList {

  @Element() el: HTMLElement;

  getListHeight(): number {
    return this.el.getBoundingClientRect().height;
  }
}

----------------------------------------

TITLE: Importing WebdriverIO Mocking Functions in TypeScript
DESCRIPTION: Shows how to import the core mocking functions from the WebdriverIO browser runner module.

LANGUAGE: typescript
CODE:
import { mock, fn, unmock } from '@wdio/browser-runner'

----------------------------------------

TITLE: Setting Asset Path for Custom Elements
DESCRIPTION: Example of how to set the asset path for custom elements to locate static assets correctly.

LANGUAGE: tsx
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Configuring Playwright for Stencil
DESCRIPTION: Creates a Playwright configuration file using the Stencil Playwright adapter's createConfig function and custom matchers.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

// Add custom Stencil matchers to Playwright assertions
expect.extend(matchers);

export default createConfig({
  // Overwrite Playwright config options here
});

----------------------------------------

TITLE: Listening for appload Event in JavaScript
DESCRIPTION: Shows how to listen for the appload event on the window object. This event is emitted when the app and all of its child components have finished loading. The event detail includes the namespace of the app that emitted the event.

LANGUAGE: javascript
CODE:
window.addEventListener('appload', (event) => {
  console.log(event.detail.namespace);
});

----------------------------------------

TITLE: Initializing Shadow DOM Component in Stencil
DESCRIPTION: Example of creating a Stencil component with Shadow DOM enabled using the @Component decorator with shadow option.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Checking Push Subscription Status
DESCRIPTION: JavaScript code to check the current push subscription status and update if necessary.

LANGUAGE: javascript
CODE:
self.registration.pushManager.getSubscription().then(subscription => {
  if (!subscription) {
    // ask the user to register for push
    return;
  }

  // update the database
  console.log(subscription);
});

----------------------------------------

TITLE: Setting Document Title in Stencil Prerender Config (TypeScript)
DESCRIPTION: This code snippet demonstrates how to use the afterHydrate hook in Stencil's Prerender Config to set the document title based on the URL pathname. It utilizes the PrerenderConfig type from @stencil/core and manipulates the Document object.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Updating Stencil Test Runner File Matching
DESCRIPTION: Stencil config update to change the test file pattern for the Stencil Test Runner, allowing Playwright to handle e2e tests.

LANGUAGE: typescript
CODE:
export config: Config = {
   ...,
   test: {
      // Stencil Test Runner will no longer execute any 'e2e.ts` files
      testRegex: '(/__tests__/.*|(\\.|/)(test|spec)|[//](e2e))\\.[jt]sx?$'
   }
}

----------------------------------------

TITLE: Initializing WebdriverIO Project in Bash
DESCRIPTION: Command to run WebdriverIO's project starter, which initiates the configuration wizard for setting up WebdriverIO in a Stencil project.

LANGUAGE: bash
CODE:
npm init wdio@latest .

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config
DESCRIPTION: Configuration example showing how to specify a custom screenshot connector in the Stencil config file.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Configuring Shadow DOM in Stencil Component
DESCRIPTION: Example showing how to enable Shadow DOM encapsulation in a Stencil component using the shadow property in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Updating Stencil Core Package
DESCRIPTION: Command to update Stencil to the latest version

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Using a Custom Form-Associated Component in HTML
DESCRIPTION: Demonstrates how to use a custom form-associated component within an HTML form.

LANGUAGE: html
CODE:
<form>
  <custom-text-input name="my-custom-input"></custom-text-input>
</form>

----------------------------------------

TITLE: Configuring VS Code Node Debugger for Prerendering
DESCRIPTION: Launch configuration for debugging Stencil's prerender process using Node.js debugger, with settings for single worker execution and config path specification.

LANGUAGE: json
CODE:
{
  "type": "node",
  "request": "launch",
  "name": "Prerender",
  "args": [
    "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
    "prerender",
    "${workspaceFolder}/dist/hydrate/index.js",
    "--max-workers=0",
    "--config=${workspaceFolder}/stencil.config.ts"
  ],
  "protocol": "inspector"
}

----------------------------------------

TITLE: Conditional Browser Runtime Code in Stencil
DESCRIPTION: Demonstration of using Build.isBrowser conditional to execute code specifically in browser environment versus prerendering environment.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Basic Method Implementation in Stencil
DESCRIPTION: Demonstrates how to implement a basic public method using the @Method() decorator in a Stencil component.

LANGUAGE: tsx
CODE:
import { Method } from '@stencil/core';

export class TodoList {

  @Method()
  async showPrompt() {
    // show a prompt
  }
}

----------------------------------------

TITLE: Implementing Document Hydration in JavaScript
DESCRIPTION: Example function showing how to use hydrateDocument to process server-side rendering results

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

export function hydrateComponents(doc) {
  return hydrateDocument(doc)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Setting Props Manually in Non-JSX Environment
DESCRIPTION: Demonstrates how to set object and array props manually in a non-JSX environment using JavaScript.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Importing Global Styles in HTML
DESCRIPTION: Demonstrates how to import the generated global styles file in the index.html of a Stencil application.

LANGUAGE: html
CODE:
<link rel="stylesheet" href="/build/app.css" />

----------------------------------------

TITLE: Enabling Strict Mode for README Generation
DESCRIPTION: Enable strict mode to receive warnings for missing documentation by adding strict: true to the output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      strict: true
    }
  ]
};

----------------------------------------

TITLE: Configuring Component Colors in Stencil Documentation
DESCRIPTION: Configuration example showing how to customize the colors used in dependency graph mermaid diagrams for components. The configuration allows setting custom text color and background color using hex values.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  docs: {
    markdown: {
      targetComponent: {
        textColor: '#fff',
        background: '#000',
      },
    },
  },
};

----------------------------------------

TITLE: Documenting Component Slots
DESCRIPTION: Example of documenting component slots using JSDoc tags in a Stencil component

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class
DESCRIPTION: Basic implementation of a custom screenshot connector by extending the base ScreenshotConnector class from Stencil core.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Enabling Scoped CSS in Stencil Component
DESCRIPTION: Shows how to use scoped CSS as an alternative to Shadow DOM by setting the 'scoped' option to true in the component decorator.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'scoped-component',
  styleUrl: 'scoped-component.css',
  scoped: true,
})
export class ScopedComponent {}

----------------------------------------

TITLE: Implementing formStateRestoreCallback in Stencil
DESCRIPTION: Demonstrates how to use the formStateRestoreCallback to handle form state restoration in a custom date picker component.

LANGUAGE: tsx
CODE:
import { Component, h, State, AttachInternals } from '@stencil/core';

@Component({
  tag: 'fa-date-picker',
  formAssociated: true,
})
export class MyDatePicker {
  @State() value: string = "";
  @State() view: "weeks" | "months" = "weeks";

  @AttachInternals()
  internals: ElementInternals;

  onInputChange(e) {
    e.preventDefault();
    const date = e.target.value;
    this.setValue(date);
  }

  setValue(date: string) {
    // second 'state' parameter is used to store both
    // the input value (`date`) _and_ the current view
    this.internals.setFormValue(date, `${date}#${this.view}`);
  }

  formStateRestoreCallback(state, _mode) {
    const [date, view] = state.split("#");
    this.view = view;
    this.setValue(date);
  }

  render() {
    return <div>
      Mock Date Picker, mode: {this.view}
      <input class="date-picker" onChange={e => this.onInputChange(e)}></input>
    </div>
  }
}

----------------------------------------

TITLE: Configuring Playwright for Stencil
DESCRIPTION: Creates a Playwright configuration file using the Stencil Playwright adapter's createConfig function and custom matchers.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

// Add custom Stencil matchers to Playwright assertions
expect.extend(matchers);

export default createConfig({
  // Overwrite Playwright config options here
});

----------------------------------------

TITLE: Listen Decorator Implementation
DESCRIPTION: Example of using @Listen decorator to handle custom events emitted by child components.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Setting CSP Nonce via Meta Tag for SSR
DESCRIPTION: Example showing how to set up CSP nonce for Server-Side Rendering (SSR) using a meta tag in the document head. This approach is required since runtime code manipulation isn't possible in SSR.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Generating JSON Docs via CLI Command
DESCRIPTION: Command to generate JSON documentation using the Stencil CLI

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Configuring Shadow DOM for a Stencil Component
DESCRIPTION: These examples demonstrate how to enable Shadow DOM encapsulation for a Stencil component, including the option to delegate focus.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: true
})
export class TodoList {
  // implementation omitted
}

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  shadow: { 
    delegatesFocus: true,
  }
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Defining a Stencil Component for E2E Testing
DESCRIPTION: Creates a Stencil component 'Foo' with a method 'bar' that uses the 'getRandomInt' function. This component is used to demonstrate mocking in E2E tests.

LANGUAGE: typescript
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Asset Directory Configuration in Stencil
DESCRIPTION: Demonstrates how to configure and use asset directories in a Stencil component for handling static files.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Updating Vite Config for Custom Elements
DESCRIPTION: Modification to vite.config.ts to handle custom elements in Vue.

LANGUAGE: typescript
CODE:
export default defineConfig({
  plugins: [
    vue({
      template: {
        compilerOptions: {
          // treat all tags with a dash as custom elements
          isCustomElement: (tag) => tag.includes('-'),
        },
      },
    }),
    vueJsx(),
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  }
})

----------------------------------------

TITLE: Synchronous Transpilation with Stencil Core Compiler
DESCRIPTION: Demonstrates the synchronous version of the transpile function, which requires TypeScript to be globally available in browser environments.

LANGUAGE: typescript
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Writing Visual Component Test
DESCRIPTION: Example test case showing how to use toMatchElementSnapshot matcher to perform visual testing on a Stencil component.

LANGUAGE: typescript
CODE:
https://github.com/webdriverio/component-testing-examples/blob/2de295ab568b5163e67d716156221578b6536d9d/stencil-component-starter/src/components/my-component/my-component.test.tsx#L20-L28

----------------------------------------

TITLE: Using Host as Fragment in Stencil TSX
DESCRIPTION: Shows how to use the Host component to render multiple elements at the root level of a component.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Global Script Configuration
DESCRIPTION: Example showing how to configure a global script that runs before the application loads.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: Configuring Copy Tasks for WWW Output Target
DESCRIPTION: Example configuration for copying images in the www output target. This snippet demonstrates how to set up a simple copy task to move files from the src/images directory to www/images.

LANGUAGE: typescript
CODE:
  outputTargets: [
    {
      type: 'www',
      copy: [
        { src: 'images' }
      ]
    }
  ]

----------------------------------------

TITLE: Defining a Basic Stencil Component
DESCRIPTION: Demonstrates how to use the @Component decorator to define a basic Stencil component with a custom tag name.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Basic Web Worker Implementation in Vanilla JavaScript
DESCRIPTION: Demonstrates the basic usage of Web Workers using the native browser API with postMessage communication.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Custom Service Worker Implementation
DESCRIPTION: Boilerplate code for implementing a custom service worker with Workbox, including precaching configuration.

LANGUAGE: typescript
CODE:
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Generating a Stencil Component in a Subfolder using CLI
DESCRIPTION: Shows how to generate a new Stencil component in a specific subfolder within the components directory using the CLI.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Worker with External Dependencies
DESCRIPTION: Example of a Web Worker that imports external dependencies and implements image loading functionality

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Updating Stencil Test Runner Configuration
DESCRIPTION: TypeScript configuration to update the Stencil Test Runner to match a different test file pattern in stencil.config.ts.

LANGUAGE: typescript
CODE:
export config: Config = {
   ...,
   test: {
      // Stencil Test Runner will no longer execute any 'e2e.ts` files
      testRegex: '(/__tests__/.*|(\\.|/)(test|spec)|[//](e2e))\\.[jt]sx?$'
   }
}

----------------------------------------

TITLE: Installing Stencil Playwright Adapter and Dependencies
DESCRIPTION: Command to install the Stencil Playwright adapter and Playwright test package as dev dependencies.

LANGUAGE: bash
CODE:
npm i @stencil/playwright @playwright/test --save-dev

----------------------------------------

TITLE: Stencil Web Worker Example with Mathematical Operations
DESCRIPTION: Implementation of a Web Worker that performs mathematical operations and expensive tasks using Stencil's worker syntax

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Enabling Shadow DOM in Stencil Component
DESCRIPTION: This snippet shows how to enable Shadow DOM for a Stencil component by setting the 'shadow' option to true in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Initializing Git repository for a Stencil project
DESCRIPTION: These commands initialize a new Git repository for the Stencil project, add all files, and create an initial commit.

LANGUAGE: bash
CODE:
$ git init
$ git add -A
$ git commit -m "initialize project using stencil cli" 

----------------------------------------

TITLE: Installing @stencil/store using npm or yarn
DESCRIPTION: Command to install @stencil/store as a dev dependency in your project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Setting CSP Nonce in Stencil Dist Output
DESCRIPTION: Example showing how to set a nonce value for script and style tags in a Stencil dist output target within an Angular application's entrypoint.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: Demonstrates how to set up the 'dist' output target in a Stencil project's configuration. This enables the generation of a reusable component library.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Updating Objects in Stencil Components
DESCRIPTION: Demonstrates how to update objects in Stencil components using the spread operator to create a new object reference, triggering @Watch and re-renders.

LANGUAGE: tsx
CODE:
import { Component, State, Watch, h } from '@stencil/core';

export type NumberContainer = {
  val: number,
}

@Component({
  tag: 'rand-numbers'
})
export class RandomNumbers {
  @State() numberContainer: NumberContainer = { val: 0 };

  private timer: NodeJS.Timer;

  @Watch('numberContainer')
  watchStateHandler(newValue: NumberContainer, oldValue: NumberContainer) {
    console.log('The old value of numberContainer is: ', oldValue);
    console.log('The new value of numberContainer is: ', newValue);
  }

  connectedCallback() {
    this.timer = setInterval(() => {
      const newVal = Math.ceil(Math.random() * 100);
      this.numberContainer = {...this.numberContainer, val: newVal};
    }, 1000)
  }

  disconnectedCallback() {
    if (this.timer) {
      clearInterval(this.timer)
    }
  }

  render() {
    return <div>numberContainer contains: {this.numberContainer.val}</div>;
  }
}

----------------------------------------

TITLE: Using renderToString for HTML Hydration
DESCRIPTION: Example demonstrating how to use renderToString to hydrate HTML content with specific configuration options

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(srcHtml, {
  prettyHtml: true,
  removeScripts: true
});

console.log(results.html);

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Components
DESCRIPTION: Example of asynchronous data fetching within a component's lifecycle method using componentWillLoad. Demonstrates how to fetch and set component data before rendering.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Exporting Default Function in Global Script
DESCRIPTION: An example of how to structure the global script file for Stencil. It exports a default function that runs once before the app loads.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: Specifying Output Directory for README Files in Stencil
DESCRIPTION: This example demonstrates how to specify a custom output directory for generated README files by configuring the 'docs-readme' output target in the Stencil configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      dir: 'output'
    }
  ]
};

----------------------------------------

TITLE: Configuring Lifecycle DOM Events Example
DESCRIPTION: Configuration example showing the structure of lifecycle DOM events that can be dispatched by Stencil components when lifecycleDOMEvents is enabled.

LANGUAGE: javascript
CODE:
{
  "extras": {
    "lifecycleDOMEvents": true
  }
}

----------------------------------------

TITLE: JSON Output for Usage Examples
DESCRIPTION: Example of the JSON output generated for usage examples. This shows how usage examples appear in the generated JSON file.

LANGUAGE: json
CODE:
"usage": {
  "a-usage-example": "# How to use `my-button`\n\nA button is often a great help in adding interactivity to an app!\n\nYou could use it like this:\n\n```html\n<my-button>My Button!</my-button>\n```\n"
}

----------------------------------------

TITLE: Installing @wdio/visual-service for WebdriverIO
DESCRIPTION: Command to install the @wdio/visual-service plugin for WebdriverIO, which enables visual testing capabilities.

LANGUAGE: bash
CODE:
npm install --save-dev @wdio/visual-service

----------------------------------------

TITLE: Component with Asset Configuration
DESCRIPTION: Example of a Stencil component using assetsDirs configuration and getAssetPath to load images

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Rollup Configuration for Custom Elements
DESCRIPTION: Example Rollup configuration for consuming custom elements, including asset handling.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Custom Service Worker Boilerplate (JavaScript)
DESCRIPTION: Boilerplate code for a custom Service Worker, including Workbox import and precache injection point.

LANGUAGE: javascript
CODE:
// change to the version you get from `npm ls workbox-build`
importScripts('workbox-v4.3.1/workbox-sw.js');

// your custom service worker code

// the precache manifest will be injected into the following line
self.workbox.precaching.precacheAndRoute([]);

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3.1.0
DESCRIPTION: Configuration example for enabling the transformAliasedImportPaths feature in Stencil v3.1.0 config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Window Scroll Event Listener
DESCRIPTION: Demonstrates listening to window-level events using the target option in @Listen decorator.

LANGUAGE: tsx
CODE:
  @Listen('scroll', { target: 'window' })
  handleScroll(ev) {
    console.log('the body was scrolled', ev);
  }

----------------------------------------

TITLE: Configuring docs-custom Output Target in Stencil
DESCRIPTION: Example configuration for setting up the docs-custom output target in a Stencil project. The configuration includes a generator function that receives the JSON docs data for custom processing.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Configuring JSON Docs Output Target
DESCRIPTION: Configuration for automatically generating JSON documentation during build

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Naming Stencil Component HTML Tags
DESCRIPTION: Shows examples of correctly and incorrectly named Stencil component HTML tags, emphasizing the importance of proper prefixing.

LANGUAGE: markup
CODE:
<stencil-component>
<stnl-component>

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

----------------------------------------

TITLE: Stencil Component Implementation
DESCRIPTION: Shows a Stencil component implementation that uses the utility function.

LANGUAGE: tsx
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Styling Host Element with Shadow DOM in CSS
DESCRIPTION: Demonstrates how to style the host element using CSS when shadow DOM is enabled.

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Project Setup Commands
DESCRIPTION: Commands to set up and start a new Stencil project after creation

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Using transpileSync() Function
DESCRIPTION: Synchronous version of the transpile function for immediate code transformation.

LANGUAGE: tsx
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Configuring Event Listener Options in Stencil
DESCRIPTION: Shows how to configure event listener options using the @Listen decorator. The example demonstrates listening for a 'scroll' event on the window object.

LANGUAGE: tsx
CODE:
  @Listen('scroll', { target: 'window' })
  handleScroll(ev) {
    console.log('the body was scrolled', ev);
  }

----------------------------------------

TITLE: TranspileSync Function Declaration
DESCRIPTION: TypeScript function signature for the synchronous version of the transpile function.

LANGUAGE: typescript
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Writing Visual Test for Stencil Component with WebdriverIO
DESCRIPTION: Example of a visual test for a Stencil component using WebdriverIO's toMatchElementSnapshot matcher. It renders the component and compares its visual appearance against a baseline snapshot.

LANGUAGE: typescript
CODE:
it('should render', async () => {
  const page = await newE2EPage();
  await page.setContent('<my-component></my-component>');

  const element = await page.find('my-component');
  expect(element).toBeDefined();
  expect(element).toHaveClass('hydrated');

  await expect(element).toMatchElementSnapshot();
});

----------------------------------------

TITLE: Demonstrating ConnectedCallback Lifecycle Usage in Stencil
DESCRIPTION: Example showing how connectedCallback is triggered when a component is added to or moved in the DOM. The component will call connectedCallback multiple times but componentWillLoad only once.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Building Stencil with Documentation
DESCRIPTION: Commands for building Stencil projects with README documentation generation

LANGUAGE: bash
CODE:
npx stencil build
npm stencil build --watch
npx stencil build --docs
npx stencil docs

----------------------------------------

TITLE: Executing Static Site Generation Build in Stencil
DESCRIPTION: This command runs the Stencil build process with the --prerender flag to enable Static Site Generation.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Configuring Browser Debugging in VS Code for Stencil
DESCRIPTION: Launch configuration for debugging Stencil components in Chrome browser. Enables source map support and configures the debugger to connect to the Stencil dev server running on localhost:3333.

LANGUAGE: json
CODE:
{
  "type": "chrome",
  "request": "launch",
  "name": "Launch Chrome against localhost",
  "url": "http://localhost:3333",
  "sourceMaps": true,
  "sourceMapPathOverrides": {
    "*": "${webRoot}/*"
  }
}

----------------------------------------

TITLE: Basic Web Worker Usage in JavaScript
DESCRIPTION: Demonstrates the basic vanilla JavaScript implementation of Web Workers using postMessage API.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Handling Notification Clicks in Service Worker
DESCRIPTION: Service Worker code to handle clicks on push notifications. This example demonstrates how to handle different actions and open a specific URL when the notification is clicked.

LANGUAGE: javascript
CODE:
self.addEventListener('notificationclick', event => {
  const notification = event.notification;
  const action = event.action;

  if (action === 'dismiss') {
    notification.close();
  } else {
    // This handles both notification click and 'details' action,
    // because some platforms might not support actions.
    clients.openWindow(notification.data.href);
    notification.close();
  }
});

----------------------------------------

TITLE: Using renderToString for HTML String Hydration
DESCRIPTION: This snippet demonstrates the usage of the renderToString function to hydrate an HTML string. It takes the source HTML and configuration options, then returns the hydrated HTML results.

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(srcHtml, {
  prettyHtml: true,
  removeScripts: true
});

console.log(results.html);

----------------------------------------

TITLE: Configuring Playwright Tests for Stencil
DESCRIPTION: Example showing how to create and customize a Playwright test configuration for Stencil components. Demonstrates overriding default settings and extending matchers.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

expect.extend(matchers);

export default createConfig({
  // Change which test files Playwright will execute
  testMatch: '*.spec.ts',

  webServer: {
    // Only wait max 30 seconds for server to start
    timeout: 30000,
  },
});

----------------------------------------

TITLE: Writing a Vitest Test for a Stencil Component Using JSX
DESCRIPTION: This test demonstrates how to use JSX syntax to create and test a Stencil component with Vitest.

LANGUAGE: typescript
CODE:
/** @jsx createElement */
import { expect, test } from 'vitest'

import { createElement } from '../../utils/jsx'
import './my-component.js'

test('should render the component with jsx', async () => {
    const cmp = <my-component first="Stencil" last="'Don't call me a framework' JS"></my-component>
    document.body.appendChild(cmp)
    await new Promise((resolve) => requestIdleCallback(resolve))
    expect(cmp.shadowRoot?.querySelector('div')?.innerText)
        .toBe(`Hello, World! I'm Stencil 'Don't call me a framework' JS`)
})

----------------------------------------

TITLE: Using Build Conditionals for Browser-Specific Code in Stencil
DESCRIPTION: Demonstrates the use of Build.isBrowser conditional to differentiate between browser and prerendering environments. This helps in avoiding execution of browser-specific code during prerendering.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: CSS Parts Component Implementation
DESCRIPTION: Example of implementing CSS parts in a Stencil component for enhanced styling flexibility

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-card',
  styleUrl: 'shadow-card.css',
  shadow: true,
})
export class ShadowCard {
  @Prop() heading: string;

  render() {
    return (
      <Host>
        <h1 part="heading">{this.heading}</h1>
        <slot></slot>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Listening to Events with Listen Decorator
DESCRIPTION: Shows how to use the @Listen decorator to handle DOM events including custom events from other components.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Basic Form Implementation in Stencil
DESCRIPTION: Demonstrates a simple form component with a single text input field. Shows basic form submission and input value handling using Stencil's @State decorator and event binding.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Example Telemetry Event Data in JavaScript
DESCRIPTION: This snippet showcases the structure of a typical telemetry event collected by Stencil CLI. It includes information about the Stencil version, command used, system details, and project configuration.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Basic Stencil Configuration in TypeScript
DESCRIPTION: A minimal example of a Stencil configuration file, setting the namespace and source directory.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'MyApp',
  srcDir: 'src'
};

----------------------------------------

TITLE: Using Scoped CSS in Stencil Component
DESCRIPTION: This snippet shows how to use scoped CSS instead of Shadow DOM by setting the 'scoped' option to true in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'scoped-component',
  styleUrl: 'scoped-component.css',
  scoped: true,
})
export class ScopedComponent {}

----------------------------------------

TITLE: Configuring Hydrate App Output Target in Stencil
DESCRIPTION: This snippet shows how to add the 'dist-hydrate-script' output target to the Stencil configuration file. This generates a hydrate app in the project root directory for server-side rendering.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Using Build Conditionals for Browser-Specific Code in Stencil
DESCRIPTION: Demonstrates the use of Build.isBrowser conditional to differentiate between browser and prerendering environments. This helps in avoiding execution of browser-specific code during prerendering.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Component Asset Configuration Example
DESCRIPTION: Shows how to configure a Stencil component to use assets with the assetsDirs option and getAssetPath API.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Example JSON Output for Stencil Stats
DESCRIPTION: Provides a comprehensive example of the JSON data structure generated by the Stencil stats feature. It includes information about the compiler, app configuration, components, and various output formats.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Configuring Rollup Plugins for Stencil
DESCRIPTION: This snippet shows how to add custom Rollup plugins to a Stencil project. It demonstrates injecting plugins before node-resolve and after commonjs transform using the rollupPlugins config option.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Generating Stats with Stencil CLI in package.json scripts
DESCRIPTION: Demonstrates how to use the --stats flag in package.json scripts to generate stats for a Stencil project. It shows two examples: one without specifying a file path and another with an optional file path.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Configuring Stencil Testing in Config File
DESCRIPTION: Example of how to configure testing options in the Stencil config file, specifically setting test path ignore patterns.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  testing: {
    testPathIgnorePatterns: [...]
  }
};

----------------------------------------

TITLE: Configuring Playwright for Stencil
DESCRIPTION: TypeScript configuration file for Playwright in a Stencil project, including custom matchers and default config creation.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

// Add custom Stencil matchers to Playwright assertions
expect.extend(matchers);

export default createConfig({
  // Overwrite Playwright config options here
});

----------------------------------------

TITLE: Configuring Playwright for Stencil
DESCRIPTION: TypeScript configuration file for Playwright in a Stencil project, including custom matchers and default config creation.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

// Add custom Stencil matchers to Playwright assertions
expect.extend(matchers);

export default createConfig({
  // Overwrite Playwright config options here
});

----------------------------------------

TITLE: Exporting Default Function in Global Script
DESCRIPTION: Example of exporting a default function in a global script file, which runs once before the app loads.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: Loading Stencil Component via CDN in HTML
DESCRIPTION: Demonstrates how to load a Stencil component through a CDN using a script tag in a simple HTML page.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3.1.0
DESCRIPTION: Configuration snippet for enabling the transformAliasedImportPaths feature in Stencil v3.1.0. This feature transforms aliased import paths.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Event Handling in JSX and DOM
DESCRIPTION: Shows how to bind event listeners in JSX and vanilla JavaScript contexts.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Configuring Hydrate App Output Target in Stencil
DESCRIPTION: Shows how to add the 'dist-hydrate-script' output target to the Stencil configuration file.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Using Custom JSDoc Tags
DESCRIPTION: Example of using custom JSDoc tags in component documentation

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Using Ionic Toggle Component in Ember Template
DESCRIPTION: Example of using an Ionic toggle component in an Ember template file.

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Worker with Callback Progress Updates
DESCRIPTION: Implementation of a Web Worker that provides progress updates through callbacks while performing a countdown operation.

LANGUAGE: tsx
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

----------------------------------------

TITLE: Using a Stencil Component in HTML
DESCRIPTION: Example of how to use a Stencil component in HTML markup after it has been compiled. This shows the usage of the custom element with its properties.

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Using Build Constants in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Stencil's Build Constants to conditionally execute code based on development or production mode, and browser or server environment. It imports the Build object from @stencil/core and uses isDev and isBrowser properties in the componentDidLoad lifecycle method.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Getting Stencil Core Version
DESCRIPTION: Shows the property for accessing the current version of @stencil/core.

LANGUAGE: typescript
CODE:
version: string

----------------------------------------

TITLE: Configuring Stencil Test Regex in TypeScript
DESCRIPTION: TypeScript configuration for stencil.config.ts to define the test regex pattern for Stencil tests, ensuring proper test file pickup.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // ...
  testing: {
    testRegex: '(/__tests__/.*|\.?(spec))\\.(ts|js)$',
  },
};

----------------------------------------

TITLE: Custom Clock Component Implementation
DESCRIPTION: Complete example of a clock component using lifecycle methods to manage timer intervals and state updates.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Event Handling in Non-JSX Context
DESCRIPTION: Demonstrates how to listen to Stencil component events in regular JavaScript without JSX.

LANGUAGE: tsx
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: VS Code Launch Configuration for Stencil Tests
DESCRIPTION: Debug configuration for VS Code that enables running and debugging Stencil tests directly from the editor. Includes configurations for both E2E and spec tests.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "E2E Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--e2e", "--", "--maxWorkers=0", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Spec Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--spec", "--", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

----------------------------------------

TITLE: Defining Web Worker Functions in Stencil
DESCRIPTION: Shows how to create a TypeScript file with the '.worker.ts' extension in Stencil, defining functions that will be automatically run in a Web Worker context.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Parent-Child Component Structure in TSX
DESCRIPTION: Example demonstrating potential SSR issues with parent-child component relationships and state management.

LANGUAGE: tsx
CODE:
<ParentComponent>
    <template shadowrootmode="open">
        <style>...</style>
        ...
    </template>
    <ChildComponent />
</ParentComponent>

----------------------------------------

TITLE: Component Composition Example in Stencil
DESCRIPTION: Shows how to compose Stencil components by nesting them within each other using a parent-child component relationship.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Handling Push Notifications in Service Worker (JavaScript)
DESCRIPTION: Example of how to handle push notifications in a custom service worker, including showing notifications and handling clicks.

LANGUAGE: javascript
CODE:
self.addEventListener('push', event => {
  console.log(`Push received with data "${event.data.text()}"`);

  const title = 'Push Notification';
  const options = {
    body: `${event.data.text()}`,
    data: { href: '/users/donald' },
    actions: [
      { action: 'details', title: 'Details' },
      { action: 'dismiss', title: 'Dismiss' },
    ],
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

self.addEventListener('notificationclick', event => {
  const notification = event.notification;
  const action = event.action;

  if (action === 'dismiss') {
    notification.close();
  } else {
    // This handles both notification click and 'details' action,
    // because some platforms might not support actions.
    clients.openWindow(notification.data.href);
    notification.close();
  }
});

----------------------------------------

TITLE: Handling Notification Clicks in Service Worker
DESCRIPTION: Code for handling notification click events in a service worker, including custom actions.

LANGUAGE: javascript
CODE:
self.addEventListener('notificationclick', event => {
  const notification = event.notification;
  const action = event.action;

  if (action === 'dismiss') {
    notification.close();
  } else {
    // This handles both notification click and 'details' action,
    // because some platforms might not support actions.
    clients.openWindow(notification.data.href);
    notification.close();
  }
});

----------------------------------------

TITLE: Configuring Stencil WWW Output Target
DESCRIPTION: Configuration for the WWW output target with file copying settings for test files

LANGUAGE: typescript
CODE:
{
   type: 'www',
   serviceWorker: null,
   copy: [{ src: '**/*.html' }, { src: '**/*.css' }]
}

----------------------------------------

TITLE: Documenting Component Slots
DESCRIPTION: Example of documenting component slots using JSDoc tags

LANGUAGE: typescript
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Using Fragment in JSX with TypeScript
DESCRIPTION: Demonstrates the usage of Fragment, a functional component that allows grouping elements without a wrapper node. This example shows how to use the shorthand syntax '<>...</>' in a Stencil component's render method.

LANGUAGE: typescript
CODE:
import { Component, Fragment, h } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Event Type Conflict Resolution
DESCRIPTION: Solutions for resolving conflicts between Stencil Event type and native web Event type.

LANGUAGE: tsx
CODE:
import { Event as StencilEvent, EventEmitter } from '@stencil/core';

@StencilEvent() myEvent: EventEmitter<{value: string, ev: Event}>;

----------------------------------------

TITLE: Initializing Asset Directory Structure Example
DESCRIPTION: Example directory structure showing asset organization in a Stencil project

LANGUAGE: plaintext
CODE:
www/
├── build/
│   ├── assets/
│   │   ├── logo.png
│   │   └── scenery/
│   │       ├── beach.png
│   │       └── sunset.png
│   └── other-assets/
│       └── font.tiff
└── ...

----------------------------------------

TITLE: Data Flow with Props
DESCRIPTION: Shows how data flows from parent to child components using props

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
})
export class TodoList {
  render() {
    return (
      <div>
        <h1>To-Do List Name: Stencil To Do List</h1>
        <ul>
           <todo-list-item thingToDo={"Learn about Stencil Props"}></todo-list-item>
           <todo-list-item thingToDo={"Write some Stencil Code with Props"}></todo-list-item>
           <todo-list-item thingToDo={"Dance Party"}></todo-list-item>
        </ul>
      </div>
    )
  }
}

----------------------------------------

TITLE: Global Script Configuration in JavaScript
DESCRIPTION: An example of how to configure a global script in the Stencil config file. The global script runs once before the app loads and can be used for initialization tasks.

LANGUAGE: javascript
CODE:
export default function() {
  initServerConnection();
}

----------------------------------------

TITLE: Setting Global Style Mode in Stencil
DESCRIPTION: This TypeScript snippet shows how to set a global style mode for all components using the setMode function from @stencil/core.

LANGUAGE: ts
CODE:
import { setMode } from '@stencil/core';
setMode(() => 'ios'); // Setting iOS as the default mode for all components

----------------------------------------

TITLE: Implementing Component Hydration with Node.js
DESCRIPTION: Example showing how to hydrate components using the hydrateDocument function in a Node.js server environment.

LANGUAGE: typescript
CODE:
import { hydrateDocument, createWindowFromHtml } from 'yourpackage/hydrate';

export function hydrateComponents(template: string) {
  const win = createWindowFromHtml(template, Math.random().toString())

  return hydrateDocument(win.document)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Configuring Meta Tags with Stencil Prerender Hook
DESCRIPTION: Demonstrates how to use the afterHydrate hook in Stencil's PrerenderConfig to dynamically set document title based on URL pathname. The hook receives document and URL objects as parameters and runs during the prerendering phase.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: HTML Component Tag Naming - Correct Example
DESCRIPTION: Demonstrates the correct naming pattern for component tags using Ionic as an example, showing proper prefix usage.

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

----------------------------------------

TITLE: Configuring VS Code Settings for Custom HTML Data
DESCRIPTION: This JSON snippet demonstrates how to configure VS Code settings to use the generated custom data file. It adds the path to the generated JSON file in the 'html.customData' setting.

LANGUAGE: json
CODE:
{
  "html.customData": [
    "./vscode-data.json"
  ]
}

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: This snippet shows how to add custom Rollup plugins to a Stencil project, specifying plugins to be injected before node-resolve and after commonjs transform.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Generating Stencil Stats via NPM Scripts in TSX
DESCRIPTION: Demonstrates how to add NPM scripts to generate Stencil stats documentation using the --stats flag, with an optional output file path.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Configuring TypeScript Path Aliases
DESCRIPTION: Example of configuring path aliases in tsconfig.json for TypeScript projects. This allows specifying custom import paths that can be transformed by Stencil.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Styling Host Element in Stencil CSS
DESCRIPTION: Shows how to style the host element of a Stencil component using CSS. It demonstrates the difference in selector usage between regular and Shadow DOM components.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Styling Host Element in Stencil CSS
DESCRIPTION: Shows how to style the host element of a Stencil component using CSS. It demonstrates the difference in selector usage between regular and Shadow DOM components.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Configuring Angular Output Target with Custom Elements in Stencil v3
DESCRIPTION: Example of configuring the Angular output target to use custom elements and setting the appropriate export behavior in the dist-custom-elements output target in Stencil v3.

LANGUAGE: typescript
CODE:
// stencil.config.ts
import { Config } from '@stencil/core';
import { angularOutputTarget } from '@stencil/angular-output-target';

export const config: Config = {
  outputTargets: [
    angularOutputTarget({
      // Same config as V2
      includeImportCustomElements: true
    }),
    {
      type: 'dist-custom-elements',
      // This will create the same behavior as Stencil V2
      customElementsExportBehavior: 'single-export-module'
    }
  ]
}

----------------------------------------

TITLE: Initializing Git Repository for Stencil Project
DESCRIPTION: These Git commands initialize a new repository, add all files, and create an initial commit for a Stencil project.

LANGUAGE: bash
CODE:
git init
git add -A
git commit -m "initialize project using stencil cli"

----------------------------------------

TITLE: Enabling Strict Mode for README Generation
DESCRIPTION: Enable strict mode to receive warnings about missing documentation by adding 'strict: true' to the output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      strict: true
    }
  ]
};

----------------------------------------

TITLE: Configuring Event Options in Stencil
DESCRIPTION: Shows how to use the EventOptions interface to configure custom event behavior, including setting the event name, bubbling, cancelable, and composed properties.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Configuring Copy Tasks for WWW Output Target
DESCRIPTION: This example demonstrates how to configure copy tasks for the 'www' output target in Stencil. It shows how to copy an entire directory from 'src/images' to 'www/images'.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    copy: [
      { src: 'images' }
    ]
  }
]

----------------------------------------

TITLE: Using Custom JSDoc Tags in Stencil Components
DESCRIPTION: Use custom JSDoc tags in your component documentation, which will be included in the JSON output.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Complex State Management with Custom Types
DESCRIPTION: Shows how to use @State() with complex types and arrays, demonstrating proper state updates and rendering of dynamic lists.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;

    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Defining Web Worker Functions in Stencil
DESCRIPTION: This example shows how to define functions in a Stencil Web Worker file. It includes two functions: a simple sum operation and a more complex task that processes an ArrayBuffer.

LANGUAGE: tsx
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3.1.0
DESCRIPTION: Configuration to enable transformAliasedImportPaths in Stencil v3.1.0 config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Using Build Constants in Stencil Component
DESCRIPTION: This example demonstrates how to import and use Build constants from @stencil/core to detect development mode and browser environment in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Writing an E2E Test with Mocking in TypeScript
DESCRIPTION: Example of an E2E test for the 'Foo' component, using 'newSpecPage' to create a virtual DOM. This demonstrates how to mock dependencies in E2E tests and test component methods.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Creating Vue Plugin for Custom Elements Registration
DESCRIPTION: Create a Vue plugin to register the custom elements for lazy-loading.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Implementing Utility Helper Function in TypeScript
DESCRIPTION: Shows the implementation of a utility function getRandomInt that generates random integers within a specified range.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Demonstrating Component Lifecycle Method Calls in Stencil
DESCRIPTION: This snippet shows how connectedCallback and componentWillLoad are called when a component is added to or removed from the DOM. It illustrates that connectedCallback can be called multiple times, while componentWillLoad is only called once.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Disabling transformAliasedImportPathsInCollection in Stencil v4.0.0
DESCRIPTION: Configuration snippet for disabling the transformAliasedImportPathsInCollection feature for the dist output target in Stencil v4.0.0. This can be used as a workaround if issues are encountered with the new default behavior.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Testing Functional Components
DESCRIPTION: Shows how to test functional components with nested children and custom implementations.

LANGUAGE: tsx
CODE:
import { Fragment, h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyFunctionalComponent } from '../my-functional-cmp';

it('should render my component', async () => {
  const AnotherFunctionalComponent = (props: any, children: typeof Fragment) => (
    <section>{children}</section>
  );

  const page = await newSpecPage({
    components: [],
    template: () => (
      <AnotherFunctionalComponent>
        <MyFunctionalComponent>Hello World!</MyFunctionalComponent>
      </AnotherFunctionalComponent>
    ),
  });
  expect(page.root).toEqualHtml(`
    <section>
      <div>
        Hello World!
      </div>
    </section>
  `);
});

----------------------------------------

TITLE: Form Disabled State Handling
DESCRIPTION: Implementation of formDisabledCallback to manage component disabled state.

LANGUAGE: typescript
CODE:
import { Component, h, State } from '@stencil/core';

@Component({
  tag: 'form-disabled-cb',
  formAssociated: true,
})
export class MyComponent {
  @State() cssClass: string = "";

  formDisabledCallback(disabled: boolean) {
    if (disabled) {
      this.cssClass = "background-mode";
    } else {
      this.cssClass = "";
    }
  }

  render() {
    return <input type="text" class={this.cssClass}></input>
  }
}

----------------------------------------

TITLE: Installing Stencil Store via NPM
DESCRIPTION: Command to install @stencil/store as a development dependency in your project

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Build Conditionals in a Stencil component. It imports the Build object from @stencil/core and uses the isDev property to conditionally execute code based on the build environment.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Using Stencil Store in a Component
DESCRIPTION: Demonstrates how to use the store within a Stencil component, including updating and rendering state.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';
import state from '../store';

@Component({
  tag: 'app-profile',
})
export class AppProfile {

  componentWillLoad() {
    setInterval(() => state.seconds++, 1000);
  }

  render() {
    return (
      <div>
        <p>
          <MyGlobalCounter />
          <p>
            Seconds: {state.seconds}
            <br />
            Squared Clicks: {state.squaredClicks}
          </p>
        </p>
      </div>
    );
  }
}

const MyGlobalCounter = () => {
  return (
    <button onClick={() => state.clicks++}>
      {state.clicks}
    </button>
  );
};

----------------------------------------

TITLE: Creating Playwright Configuration for Stencil in TypeScript
DESCRIPTION: Demonstrates how to create a Playwright configuration file for a Stencil project using the createConfig function. It shows how to override default settings and extend matchers.

LANGUAGE: typescript
CODE:
import { expect } from '@playwright/test';
import { matchers, createConfig } from '@stencil/playwright';

expect.extend(matchers);

export default createConfig({
  // Change which test files Playwright will execute
  testMatch: '*.spec.ts',

  webServer: {
    // Only wait max 30 seconds for server to start
    timeout: 30000,
  },
});

----------------------------------------

TITLE: Configuring NPM Scripts for Stencil Testing
DESCRIPTION: Example JSON configuration for package.json to set up NPM scripts for running Stencil tests, including unit tests, watch mode, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Using Fragment Component in Stencil
DESCRIPTION: Demonstrates how to use Fragment component to group elements without a wrapper node in a Stencil component

LANGUAGE: typescript
CODE:
import { Component, Fragment } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Using Events in JSX with Stencil Components
DESCRIPTION: Shows how to bind event listeners directly in JSX when using Stencil components. The example demonstrates listening to a custom 'todoCompleted' event on a TodoList component.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

LANGUAGE: tsx
CODE:
<todo-list onTodoDeleted={ev => this.someOtherMethod(ev)} />

----------------------------------------

TITLE: Adding CSP Nonce Meta Tag for SSR
DESCRIPTION: Illustrates how to inject a meta tag with the CSP nonce value into the DOM head for Server-Side Rendering (SSR) scenarios.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Using Custom JSDoc Tags in Stencil Components
DESCRIPTION: Example of using custom JSDoc tags in a Stencil component, which will be included in the JSON output.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Configuring docs-readme Output Target in Stencil
DESCRIPTION: Add the docs-readme output target to the Stencil configuration file to enable automatic README generation for components.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Configuring Stencil Copy Task for Asset Management
DESCRIPTION: Demonstrates how to use Stencil's copy task to copy asset files to the distribution directory during the build process.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
  // ...
};

----------------------------------------

TITLE: Importing Hydrate Functions in Node.js
DESCRIPTION: Import the necessary hydrate functions from the generated package for use in a Node.js server.

LANGUAGE: javascript
CODE:
import { createWindowFromHtml, hydrateDocument, renderToString, streamToString } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Disabling Path Alias Transformation in Stencil v4.0.0
DESCRIPTION: Configuration example showing how to disable the default path alias transformation behavior in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Handling Push Events in Service Worker
DESCRIPTION: Example of handling push events in a Service Worker, including showing notifications.

LANGUAGE: javascript
CODE:
self.addEventListener('push', event => {
  console.log(`Push received with data "${event.data.text()}"`);

  const title = 'Push Notification';
  const options = {
    body: `${event.data.text()}`,
    data: { href: '/users/donald' },
    actions: [
      { action: 'details', title: 'Details' },
      { action: 'dismiss', title: 'Dismiss' },
    ],
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

----------------------------------------

TITLE: Transpiling Code with Stencil Core Compiler
DESCRIPTION: Shows the function signature for transpile(), which converts source code to JavaScript and returns a Promise with the results. It handles TypeScript transpilation without requiring Babel presets.

LANGUAGE: typescript
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Accessing Stencil Core Version
DESCRIPTION: Shows how to access the current version of @stencil/core.

LANGUAGE: typescript
CODE:
version: string

----------------------------------------

TITLE: Generating Stats with NPM Scripts in Stencil
DESCRIPTION: This snippet shows how to add NPM scripts to generate stats data for a Stencil project. It demonstrates using the --stats flag with optional file path specification.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Configuring TypeScript Path Aliases in tsconfig.json
DESCRIPTION: Example of specifying path aliases in a TypeScript project's tsconfig.json file. This configuration maps '@utils' to 'src/utils/index.ts'.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Example of JSON-formatted Documentation for a @Method
DESCRIPTION: JSON representation of the documentation for a @Method, including the new complexType field. This example is for the open method on the Select component in Ionic Framework.

LANGUAGE: json
CODE:
{
  "complexType": {
    "signature": "(event?: UIEvent) => Promise<any>",
    "parameters": [
      {
        "tags": [
          {
            "name": "param",
            "text": "event The user interface event that called the open."
          }
        ],
        "text": "The user interface event that called the open."
      }
    ],
    "references": {
      "Promise": {
        "location": "global",
        "id": "global::Promise"
      },
      "UIEvent": {
        "location": "global",
        "id": "global::UIEvent"
      },
      "HTMLElement": {
        "location": "global",
        "id": "global::HTMLElement"
      }
    },
    "return": "Promise<any>"
  }
}

----------------------------------------

TITLE: Accessing Path Utility in Stencil
DESCRIPTION: Describes the path utility provided by the compiler, which is similar to the NodeJS path API but capable of running in any environment.

LANGUAGE: typescript
CODE:
path: PlatformPath

----------------------------------------

TITLE: Specifying Output Directory for Generated README Files
DESCRIPTION: Demonstrates how to specify a custom output directory for generated README files in the Stencil configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      dir: 'output'
    }
  ]
};

----------------------------------------

TITLE: Adding Stencil Library as Peer Dependency
DESCRIPTION: JSON diff showing how to add the Stencil library as a peer dependency in the Angular component library.

LANGUAGE: json
CODE:
"peerDependencies": {
   "@angular/common": "^15.1.0",
-  "@angular/core": "^15.1.0"
+  "@angular/core": "^15.1.0",
+  "stencil-library": "*"
}

----------------------------------------

TITLE: Reflecting Props to Attributes
DESCRIPTION: Example of reflecting props to attributes in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop({ reflect: false }) isComplete: boolean = false;
    @Prop({ reflect: true }) timesCompletedInPast: number = 2;
    @Prop({ reflect: true }) thingToDo: string = "Read Reflect Section of Stencil Docs";
}

----------------------------------------

TITLE: Lifecycle DOM Events Configuration Example
DESCRIPTION: Configuration example showing the structure of lifecycle DOM events that can be dispatched when lifecycleDOMEvents is enabled. These events are primarily used for testing purposes.

LANGUAGE: json
CODE:
{
  "stencil_componentWillLoad": "Dispatched for each component's componentWillLoad",
  "stencil_componentWillUpdate": "Dispatched for each component's componentWillUpdate",
  "stencil_componentWillRender": "Dispatched for each component's componentWillRender",
  "stencil_componentDidLoad": "Dispatched for each component's componentDidLoad",
  "stencil_componentDidUpdate": "Dispatched for each component's componentDidUpdate",
  "stencil_componentDidRender": "Dispatched for each component's componentDidRender"
}

----------------------------------------

TITLE: Custom JSDoc Tags Example
DESCRIPTION: Demonstration of using custom JSDoc tags in component documentation

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Basic Screenshot Comparison in Stencil E2E Tests
DESCRIPTION: Simple example of how to set up a screenshot comparison test in a Stencil end-to-end test using Puppeteer. It demonstrates setting page content and comparing screenshots.

LANGUAGE: javascript
CODE:
it('render something', async () => {
  const page: E2EPage = await newE2EPage();
  await page.setContent('<my-cmp></my-cmp>');
  await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
});

----------------------------------------

TITLE: Implementing Worker Callbacks in Stencil (TypeScript)
DESCRIPTION: Demonstrates how to use callbacks with Web Workers in Stencil to provide progress updates during long-running tasks.

LANGUAGE: typescript
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

----------------------------------------

TITLE: Deprecated Context and Connect APIs in Stencil
DESCRIPTION: Example of deprecated @Prop decorator options for context and connect, which have been removed in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
@Prop({ context: 'config' }) config: Config;
@Prop({ connect: 'ion-menu-controller' }) lazyMenuCtrl: Lazy<MenuController>;

----------------------------------------

TITLE: Root TypeScript Configuration
DESCRIPTION: TypeScript configuration for the root of the monorepo workspace.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "noImplicitAny": false,
    "removeComments": true,
    "noLib": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es6",
    "sourceMap": true,
    "lib": ["es6"]
  },
  "exclude": ["node_modules", "**/*.spec.ts", "**/__tests__/**"]
}

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class
DESCRIPTION: Basic implementation of a custom screenshot connector by extending the base ScreenshotConnector class from Stencil core.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Prop Validation with @Watch
DESCRIPTION: Demonstrates how to use the @Watch decorator to validate prop values.

LANGUAGE: typescript
CODE:
import { Component, Prop, Watch, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class TodoList {
  @Prop() thingToDo!: string;

  @Watch('thingToDo')
  validateName(newValue: string, _oldValue: string) {
    const isBlank = typeof newValue !== 'string' || newValue === '';
    if (isBlank) { 
        throw new Error('thingToDo is a required property and cannot be empty') 
    };
    const has2chars = typeof newValue === 'string' && newValue.length >= 2;
    if (!has2chars) {
       throw new Error('thingToDo must have a length of more than 1 character')
    };
  }
}

----------------------------------------

TITLE: VS Code Launch Configuration for Stencil Tests
DESCRIPTION: Configuration for VS Code's launch.json to enable debugging of Stencil tests within the IDE.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "E2E Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--e2e", "--", "--maxWorkers=0", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Spec Test Current File",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/node_modules/.bin/stencil",
      "args": ["test", "--spec", "--", "${fileBasename}"],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

----------------------------------------

TITLE: Form State Restore Implementation
DESCRIPTION: Example of a date picker component implementing formStateRestoreCallback for state restoration.

LANGUAGE: tsx
CODE:
import { Component, h, State, AttachInternals } from '@stencil/core';

@Component({
  tag: 'fa-date-picker',
  formAssociated: true,
})
export class MyDatePicker {
  @State() value: string = "";
  @State() view: "weeks" | "months" = "weeks";

  @AttachInternals()
  internals: ElementInternals;

  onInputChange(e) {
    e.preventDefault();
    const date = e.target.value;
    this.setValue(date);
  }

  setValue(date: string) {
    this.internals.setFormValue(date, `${date}#${this.view}`);
  }

  formStateRestoreCallback(state, _mode) {
    const [date, view] = state.split("#");
    this.view = view;
    this.setValue(date);
  }

  render() {
    return <div>
      Mock Date Picker, mode: {this.view}
      <input class="date-picker" onChange={e => this.onInputChange(e)}></input>
    </div>
  }
}

----------------------------------------

TITLE: Installing @stencil/store using npm or yarn
DESCRIPTION: Command to install @stencil/store as a dev dependency in a project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Installing Lerna for Monorepo Management
DESCRIPTION: This command installs Lerna globally for managing the monorepo structure.

LANGUAGE: bash
CODE:
npm install --global lerna

----------------------------------------

TITLE: Disabling Service Worker in Stencil Config
DESCRIPTION: Demonstrates how to disable the Service Worker generation in a Stencil project by setting the serviceWorker property to null.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Marking a Stencil Component as Deprecated
DESCRIPTION: This TypeScript snippet shows how to use the @deprecated JSDoc tag to mark a component as deprecated, which will add a deprecation notice to the generated README.

LANGUAGE: typescript
CODE:
/**
 * @deprecated since v2.0.0
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Using a Stencil Component in HTML and TSX
DESCRIPTION: This snippet shows how to use a Stencil component in both HTML and TSX files after it has been compiled.

LANGUAGE: html
CODE:
<!-- Here we use the component in an HTML file -->
<todo-list></todo-list>

LANGUAGE: tsx
CODE:
{/* Here we use the component in a TSX file */}
<todo-list></todo-list>

----------------------------------------

TITLE: Listening to Events from Non-JSX Elements in Stencil
DESCRIPTION: Shows how to add event listeners to Stencil components when not using JSX. The example demonstrates adding a listener for the 'todoCompleted' event using vanilla JavaScript.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Using Custom JSDoc Tags in Stencil Components
DESCRIPTION: Example of using custom JSDoc tags in a Stencil component. These custom tags are included in the JSON documentation output without additional configuration.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Stencil React Output Target Configuration
DESCRIPTION: Configuration for the @stencil/react-output-target in stencil.config.ts

LANGUAGE: typescript
CODE:
import { reactOutputTarget } from '@stencil/react-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    reactOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../react-library/lib/components/stencil-generated/index.ts',
    }),
  ],
};

----------------------------------------

TITLE: Documenting CSS Custom Properties
DESCRIPTION: Use @prop JSDoc comments in the component's CSS file to document custom properties. This information will be included in the generated README.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: Sub-folder Component Directory Structure
DESCRIPTION: Example directory structure showing the files created when generating a new component in a sub-folder.

LANGUAGE: plain
CODE:
src
└── components
    └── pages
        └── page-home
            ├── page-home.css
            ├── page-home.e2e.ts
            ├── page-home.spec.ts
            └── page-home.tsx

----------------------------------------

TITLE: Initializing Git Repository for Stencil Project
DESCRIPTION: Git commands to initialize a new repository, add all files, and create an initial commit for a Stencil project.

LANGUAGE: bash
CODE:
$ git init
$ git add -A
$ git commit -m "initialize project using stencil cli" 

----------------------------------------

TITLE: Disabling transformAliasedImportPathsInCollection
DESCRIPTION: Configuration example showing how to disable the transformAliasedImportPathsInCollection feature for dist output targets in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Synchronous Transpile Function Declaration
DESCRIPTION: Function signature for the synchronous version of the transpile method.

LANGUAGE: tsx
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Transpile Function Signature
DESCRIPTION: Function signature for the transpile() method that converts source code to JavaScript using TypeScript transpilation.

LANGUAGE: tsx
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Configuring Individual Page Hydrate Options (TypeScript)
DESCRIPTION: This snippet shows how to use the hydrateOptions hook in the prerender config to set options for individual pages during the prerendering process.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Disabling transformAliasedImportPaths in Stencil v4.0.0
DESCRIPTION: Configuration example for disabling the default transformAliasedImportPaths feature in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Basic Event Listening in Stencil
DESCRIPTION: Shows how to listen to custom events using the @Listen decorator in a Stencil component.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Component Testing with JSX Template in TSX
DESCRIPTION: Shows how to test a Stencil component using newSpecPage() with JSX template initialization. This approach allows testing components with property-based configuration.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Service Using Helper Function
DESCRIPTION: Service implementation that uses the getRandomInt helper function

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Using Scoped CSS in Stencil Component
DESCRIPTION: Shows how to enable scoped CSS for a Stencil component as an alternative to Shadow DOM.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'scoped-component',
  styleUrl: 'scoped-component.css',
  scoped: true,
})
export class ScopedComponent {}

----------------------------------------

TITLE: Asset Path Component Example in TSX
DESCRIPTION: Shows how to use getAssetPath to resolve local asset paths in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core'
@Component({
  tag: 'cmp-asset',
})
export class CmpAsset {
  @Prop() icon: string;

  render() {
    return (
      <img src={getAssetPath(`assets/icons/${this.icon}.png`)} />
    );
  }
}

----------------------------------------

TITLE: Documenting Component Properties in Stencil
DESCRIPTION: This snippet demonstrates how to add a description to a @Prop in Stencil using a JSDoc comment. The comment is placed on the line preceding the property declaration.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Adding Stats Output Target to Stencil Config (TSX)
DESCRIPTION: Demonstrates how to configure the Stencil config file to automatically generate stats documentation with every build by adding a stats output target.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Setting Global Style Mode in Stencil
DESCRIPTION: Demonstrates how to set a global style mode for Stencil components using the setMode function.

LANGUAGE: typescript
CODE:
import { setMode } from '@stencil/core';
setMode(() => 'ios'); // Setting iOS as the default mode for all components

----------------------------------------

TITLE: Disabling transformAliasedImportPaths in Stencil v4.0.0
DESCRIPTION: Configuration snippet for disabling the transformAliasedImportPaths feature in Stencil v4.0.0, which is enabled by default in this version.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Creating Node Logger in Stencil
DESCRIPTION: Creates a logger instance using NodeJS APIs for compiler and dev-server logging. Requires NodeJS process object as input.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Configuring Vite for Vue Custom Elements
DESCRIPTION: Vite configuration to properly handle custom elements in Vue

LANGUAGE: typescript
CODE:
export default defineConfig({
  plugins: [
    vue({
      template: {
        compilerOptions: {
          isCustomElement: (tag) => tag.includes('-'),
        },
      },
    }),
    vueJsx(),
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  }
})

----------------------------------------

TITLE: Configuring Copy Task with Warnings
DESCRIPTION: Example showing how to enable warnings for missing source files in a copy task configuration.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Default Values for Props
DESCRIPTION: Shows how to set default values for props and how they can be overridden.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'component-with-some-props',
})
export class ComponentWithSomeProps {
    @Prop() aNumber = 42;
    @Prop() aString = 'defaultValue';

    render() {
        return <div>The number is {this.aNumber} and the string is {this.aString}</div>
    }
}

----------------------------------------

TITLE: Variable Casing Example
DESCRIPTION: Demonstrates how to handle variable casing in props between TSX and HTML usage

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
    @Prop() thingToDo: string;

    render() {
        return <div>{this.thingToDo}</div>;
    }
}

LANGUAGE: html
CODE:
<todo-list-item thing-to-do="Learn about Stencil Props"></todo-list-item>

----------------------------------------

TITLE: Updating Stencil Config for Custom Test Patterns
DESCRIPTION: This TypeScript code demonstrates how to update the Stencil configuration to use a custom test file pattern, useful when migrating to Playwright as the main e2e testing solution.

LANGUAGE: typescript
CODE:
export config: Config = {
   ...,
   test: {
      // Stencil Test Runner will no longer execute any 'e2e.ts` files
      testRegex: '(/__tests__/.*|(\\.|/)(test|spec)|[//](e2e))\\.[jt]sx?$'
   }
}

----------------------------------------

TITLE: Configuring Prerender Settings for Stencil SSG
DESCRIPTION: TypeScript configuration for Stencil prerendering setup with debug options. Disables crawling and sets specific entry URLs for targeted debugging.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  crawlUrls: false,
  entryUrls: ['/example'],
  hydrateOptions: (_url) => {
    return {
      runtimeLogging: true,
    };
  },
};

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: Basic configuration for setting up the dist output target in a Stencil project's config file.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Watching and Parsing Props Changes in Stencil Component
DESCRIPTION: Shows how to watch for changes in props and parse them into internal state variables. This example uses the @Watch decorator to react to prop changes.

LANGUAGE: typescript
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

----------------------------------------

TITLE: Creating Custom Screenshot Connector Class (JavaScript)
DESCRIPTION: Shows how to create a custom screenshot connector by extending the base ScreenshotConnector class from Stencil. This allows for customization of the screenshot testing process.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Handling Service Worker Updates in Stencil Component (TypeScript)
DESCRIPTION: Example of how to handle Service Worker updates in a Stencil component, showing a toast notification when an update is available.

LANGUAGE: typescript
CODE:
@Listen("swUpdate", { target: 'window' })
async onServiceWorkerUpdate() {
  const registration = await navigator.serviceWorker.getRegistration();

  if (!registration?.waiting) {
    // If there is no waiting registration, this is the first service
    // worker being installed.
    return;
  }

  const toast = await toastController.create({
    message: "New version available.",
    buttons: [{ text: 'Reload', role: 'reload' }],
    duration: 0
  });

  await toast.present();

  const { role } = await toast.onWillDismiss();

  if (role === 'reload') {
    registration.waiting.postMessage("skipWaiting");
  }
}

----------------------------------------

TITLE: Defining Required Props
DESCRIPTION: Example of defining a required prop in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
   tag: 'todo-list-item',
})
export class ToDoListItem {
   @Prop() thingToDo!: string;
}

----------------------------------------

TITLE: Handling Window Scroll Events in Stencil
DESCRIPTION: Shows how to listen for scroll events on the window object using the @Listen() decorator with the 'target' option set to 'window'.

LANGUAGE: tsx
CODE:
  @Listen('scroll', { target: 'window' })
  handleScroll(ev) {
    console.log('the body was scrolled', ev);
  }

----------------------------------------

TITLE: Screenshot Connector Interface Definition
DESCRIPTION: TypeScript interface defining the required methods for implementing a screenshot connector.

LANGUAGE: tsx
CODE:
export interface ScreenshotConnector {
  initBuild(opts: ScreenshotConnectorOptions): Promise<void>;

  pullMasterBuild(): Promise<void>;

  getMasterBuild(): Promise<ScreenshotBuild>;

  getScreenshotCache(): Promise<ScreenshotCache>;

  completeBuild(masterBuild: ScreenshotBuild): Promise<ScreenshotBuildResults>;
  
  publishBuild(buildResults: ScreenshotBuildResults): Promise<ScreenshotBuildResults>;

  updateScreenshotCache(screenshotCache: ScreenshotCache, buildResults: ScreenshotBuildResults): Promise<ScreenshotCache>;

  generateJsonpDataUris(build: ScreenshotBuild): Promise<void>;
}

----------------------------------------

TITLE: Loading Stencil Component via CDN Script Tag in HTML
DESCRIPTION: Demonstrates how to include a Stencil component in a simple HTML page using a CDN script tag. This method is straightforward and works in all browsers.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Documenting @Event() Decorators
DESCRIPTION: Use JSDoc comments to describe events decorated with @Event(). This information will be included in the generated README.

LANGUAGE: tsx
CODE:
export class MyComponent {
  /**
   * Emitted when an event is completed
   */
  @Event() todoCompleted: EventEmitter<number>;
  /**
   * @deprecated
   */
  @Event() todoUndo: EventEmitter<number>;

  // ...
}

----------------------------------------

TITLE: Exporting Default Function in Global Script
DESCRIPTION: An example of how to structure the global script in Stencil, which runs once before the library/app loads. The code should be wrapped in a default exported function.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: Updating Stencil Core Package
DESCRIPTION: Command to update @stencil/core to the latest version using npm.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Configuring TypeScript Path Aliases in tsconfig.json
DESCRIPTION: Example of how to specify path aliases in a TypeScript project's tsconfig.json file. This configuration maps '@utils' to 'src/utils/index.ts'.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Component Hierarchy Example in Markup
DESCRIPTION: Shows the component hierarchy and the order in which lifecycle methods are called for nested components.

LANGUAGE: markup
CODE:
  <cmp-a>
    <cmp-b>
      <cmp-c></cmp-c>
    </cmp-b>
  </cmp-a>

----------------------------------------

TITLE: Using Stencil Compiler with Node Environment
DESCRIPTION: Demonstrates setting up and using the Stencil compiler in a NodeJS environment with full build configuration.

LANGUAGE: tsx
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Configuring Stats Generation in Package Scripts
DESCRIPTION: Example showing how to configure npm scripts to generate stats data using the --stats flag with optional file path specification.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Implementing Hydrate Options in Prerender Config
DESCRIPTION: This example shows how to implement the hydrateOptions hook in the prerender config. It returns specific hydrate options for each page based on the URL.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Using Functional Components with Child Elements
DESCRIPTION: Example of passing child elements to a functional component.

LANGUAGE: tsx
CODE:
<Hello name="World">
  <p>I'm a child element.</p>
</Hello>

----------------------------------------

TITLE: Using setMode() in TypeScript
DESCRIPTION: Demonstrates how to use setMode() to set the style mode of a component based on an attribute. This is useful for implementing different style modes in Stencil components.

LANGUAGE: typescript
CODE:
import { setMode } from '@stencil/core'

// set mode based on a property
setMode((el) => el.getAttribute('mode'));

----------------------------------------

TITLE: Enabling Strict Mode for Stencil Docs-Readme
DESCRIPTION: Enable strict mode to receive warnings for missing documentation by adding 'strict: true' to the output target configuration.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      strict: true
    }
  ]
};

----------------------------------------

TITLE: Enabling Strict Mode for Stencil Docs-Readme
DESCRIPTION: Enable strict mode to receive warnings for missing documentation by adding 'strict: true' to the output target configuration.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      strict: true
    }
  ]
};

----------------------------------------

TITLE: Advanced Event Configuration Example
DESCRIPTION: Example showing how to configure advanced event options and handle event prevention.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

...
export class TodoList {

  // Event called 'todoCompleted' that is "composed", "cancellable" and it will bubble up!
  @Event({
    eventName: 'todoCompleted',
    composed: true,
    cancelable: true,
    bubbles: true,
  }) todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    const event = this.todoCompleted.emit(todo);
    if(!event.defaultPrevented) {
      // if not prevented, do some default handling code
    }
  }
}

----------------------------------------

TITLE: Configuring Custom Destination Copy Task
DESCRIPTION: Example demonstrating how to set a custom destination path for copied files using the dest option in a www output target.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]

----------------------------------------

TITLE: Style Modes Configuration
DESCRIPTION: Example of implementing multiple style modes (iOS and Material Design) in a component.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'simple-button',
  styleUrls: {
    md: './simple-button.md.css',
    ios: './simple-button.ios.css'
  },
})
export class SimpleButton {
  // ...
}

----------------------------------------

TITLE: Stencil Primary Package Output Target Validation
DESCRIPTION: Configuration example showing how to enable and configure primary package output target validation in Stencil. Demonstrates setting the isPrimaryPackageOutputTarget flag and enabling validation.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Example Telemetry Data Structure in JavaScript
DESCRIPTION: Shows the structure of a typical telemetry event data object collected by Stencil CLI. Includes information about build configuration, system details, and runtime environment.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Using dist-custom-elements Output
DESCRIPTION: TypeScript code showing how to configure the Angular output target to use the dist-custom-elements output.

LANGUAGE: typescript
CODE:
export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist-custom-elements'
    },
    angularOutputTarget({
      componentCorePackage: 'component-library',
      directivesProxyFile: '{path to your proxy file}',
      includeImportCustomElements: true
    })
  ]
}

----------------------------------------

TITLE: Event Handling in JSX
DESCRIPTION: Shows how to bind event listeners directly in JSX within Stencil components and how to listen to events from non-JSX elements.

LANGUAGE: tsx
CODE:
<todo-list onTodoCompleted={ev => this.someMethod(ev)} />

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Using Vue Component Wrappers in a Vue App
DESCRIPTION: Import and use the component library plugin in the main Vue app file, and use the component wrappers in Vue components.

LANGUAGE: javascript
CODE:
// src/main.js
import { ComponentLibrary } from 'vue-library';

createApp(App).use(ComponentLibrary).mount('#app');

LANGUAGE: html
CODE:
<template>
  <my-component first="Your" last="Name"></my-component>
</template>

----------------------------------------

TITLE: Rollup Configuration for Custom Elements
DESCRIPTION: Example Rollup configuration for consuming custom elements, including asset copying setup.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Listening to Stencil Component Events in Plain JavaScript
DESCRIPTION: Shows how to listen to events emitted by Stencil components using plain JavaScript outside of the Stencil/JSX context.

LANGUAGE: html
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.addEventListener('todoCompleted', event => { /* your listener */ })
</script>

----------------------------------------

TITLE: Configuring Event Options in Stencil
DESCRIPTION: Shows the interface for EventOptions and demonstrates how to configure custom event behavior including bubbling, cancelable, and composed properties.

LANGUAGE: tsx
CODE:
export interface EventOptions {
  /**
   * A string custom event name to override the default.
   */
  eventName?: string;
  /**
   * A Boolean indicating whether the event bubbles up through the DOM or not.
   */
  bubbles?: boolean;

  /**
   * A Boolean indicating whether the event is cancelable.
   */
  cancelable?: boolean;

  /**
   * A Boolean value indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.
   */
  composed?: boolean;
}

----------------------------------------

TITLE: Applying Inline Styles to a Stencil Component
DESCRIPTION: Demonstrates how to use the 'styles' option to apply inline CSS styles to a Stencil component.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styles: 'div { background-color: #fff }'
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Applying Inline Styles to a Stencil Component
DESCRIPTION: Demonstrates how to use the 'styles' option to apply inline CSS styles to a Stencil component.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  styles: 'div { background-color: #fff }'
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Shadow DOM QuerySelector Implementation
DESCRIPTION: Shows how to query elements within a Shadow DOM component using the @Element decorator and shadowRoot property.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Component Lifecycle Events Table
DESCRIPTION: A markdown table listing the available component lifecycle events that can be dispatched when lifecycleDOMEvents is enabled. Shows event names and their corresponding descriptions.

LANGUAGE: markdown
CODE:
| Event Name                    | Description                                            |
| ----------------------------- | ------------------------------------------------------ |
| `stencil_componentWillLoad`   | Dispatched for each component's `componentWillLoad`.   |
| `stencil_componentWillUpdate` | Dispatched for each component's `componentWillUpdate`. |
| `stencil_componentWillRender` | Dispatched for each component's `componentWillRender`. |
| `stencil_componentDidLoad`    | Dispatched for each component's `componentDidLoad`.    |
| `stencil_componentDidUpdate`  | Dispatched for each component's `componentDidUpdate`.  |
| `stencil_componentDidRender`  | Dispatched for each component's `componentDidRender`.  |

----------------------------------------

TITLE: Setting Nonce in Stencil Dist Output Target for Angular
DESCRIPTION: This snippet demonstrates how to set a nonce for all script and style tags when using the Stencil dist output target in an Angular application. It uses the setNonce helper function exported from the loader file.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Configuring dist-custom-elements in Stencil Config
DESCRIPTION: Basic configuration setup for the dist-custom-elements output target in a Stencil project's config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Component Testing with JSX Template in TypeScript
DESCRIPTION: Shows how to test a Stencil component using newSpecPage() with JSX template initialization. This approach allows testing components with property-based configuration.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Custom Rollup Plugins Configuration in TypeScript
DESCRIPTION: This snippet shows how to configure custom Rollup plugins in the Stencil config file, demonstrating the placement of plugins before and after built-in plugins.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Rollup Configuration for Custom Elements
DESCRIPTION: Example Rollup configuration for consuming custom elements, including asset handling.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Listening to Events in Stencil Components
DESCRIPTION: Demonstrates how to use the @Listen decorator to handle DOM events in a Stencil component. The example shows a TodoApp component listening for a 'todoCompleted' event.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Using createCompiler() Function
DESCRIPTION: Function signature for creating a compiler instance from a configuration object.

LANGUAGE: tsx
CODE:
createCompiler(config: Config): Promise<Compiler>

----------------------------------------

TITLE: Querying Typed Stencil Components in TypeScript
DESCRIPTION: Demonstrates how to properly type and query a Stencil-generated Web Component using the automatically generated HTML element interfaces. Shows correct typing for an ion-button component reference.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Documenting @Method() Decorators in Stencil
DESCRIPTION: Example of how to document methods using @Method() decorator and JSDoc comments, including parameters and return values, which will be reflected in the generated README.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * Scroll by a specified X/Y distance in the component.
   *
   * @param x The amount to scroll by on the horizontal axis.
   * @param y The amount to scroll by on the vertical axis.
   * @param duration The amount of time to take scrolling by that amount.
   * @returns the total distance travelled
   */
  @Method()
  async scrollByPoint(x: number, y: number, duration: number): Promise<number> { /* omitted */ }

  // ...
}

----------------------------------------

TITLE: Stencil Component Lifecycle Events Table
DESCRIPTION: Lists the available component lifecycle events that can be dispatched when lifecycleDOMEvents is enabled in Stencil.

LANGUAGE: markdown
CODE:
| Event Name                    | Description                                            |
| ----------------------------- | ------------------------------------------------------ |
| `stencil_componentWillLoad`   | Dispatched for each component's `componentWillLoad`.   |
| `stencil_componentWillUpdate` | Dispatched for each component's `componentWillUpdate`. |
| `stencil_componentWillRender` | Dispatched for each component's `componentWillRender`. |
| `stencil_componentDidLoad`    | Dispatched for each component's `componentDidLoad`.    |
| `stencil_componentDidUpdate`  | Dispatched for each component's `componentDidUpdate`.  |
| `stencil_componentDidRender`  | Dispatched for each component's `componentDidRender`.  |

----------------------------------------

TITLE: Configuring TypeScript Path Aliases
DESCRIPTION: Example of setting up path aliases in tsconfig.json to map import paths to specific file locations.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Updating Component Decorator for Asset Directories in Stencil v3
DESCRIPTION: Example of updating the @Component decorator to use the new assetsDirs property instead of the deprecated assetsDir property in Stencil v3.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'my-component',
- assetsDir: 'assets',
+ assetsDirs: ['assets'],
})

----------------------------------------

TITLE: Configuring Stats Generation in Package Scripts (TSX)
DESCRIPTION: Example showing how to configure npm scripts to generate stats using the --stats flag with optional file path specification.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Directory Structure for Generated Stencil Component
DESCRIPTION: Illustrates the directory structure created when generating a new Stencil component using the CLI. It shows the file organization for both a root-level component and a nested component.

LANGUAGE: plain
CODE:
src
└── components
    └── page-home
        ├── page-home.css
        ├── page-home.e2e.ts
        ├── page-home.spec.ts
        └── page-home.tsx

LANGUAGE: plain
CODE:
src
└── components
    └── pages
        └── page-home
            ├── page-home.css
            ├── page-home.e2e.ts
            ├── page-home.spec.ts
            └── page-home.tsx

----------------------------------------

TITLE: Configuring Stats Generation in package.json Scripts
DESCRIPTION: Shows how to set up npm scripts to generate stats data using the --stats flag with optional file path specification.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Initializing a New Stencil Project with NPM
DESCRIPTION: Command to create a new Stencil project using the create-stencil CLI. This command will prompt the user to select a project type and provide a project name.

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Using Components with Child Elements
DESCRIPTION: Demonstration of passing child elements to a functional component in JSX.

LANGUAGE: tsx
CODE:
<Hello name="World">
  <p>I'm a child element.</p>
</Hello>

----------------------------------------

TITLE: Stencil Config with Type Declarations
DESCRIPTION: Configuration for enabling TypeScript type declarations in Stencil output targets.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      generateTypeDeclarations: true,
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Rendering Basic JSX in Stencil Component
DESCRIPTION: Demonstrates the basic structure of a Stencil component using JSX to render a simple div with heading and paragraph elements.

LANGUAGE: tsx
CODE:
class MyComponent {
  render() {
    return (
      <div>
        <h1>Hello World</h1>
        <p>This is JSX!</p>
      </div>
    );
  }
}

----------------------------------------

TITLE: Implementing hydrateDocument Function
DESCRIPTION: Example implementation of component hydration using hydrateDocument from Ionic Angular server

LANGUAGE: typescript
CODE:
import { hydrateDocument, createWindowFromHtml } from 'yourpackage/hydrate';

export function hydrateComponents(template: string) {
  const win = createWindowFromHtml(template, Math.random().toString())

  return hydrateDocument(win.document)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Testing Component with JSX Template
DESCRIPTION: Demonstrates testing a Stencil component using JSX template syntax to pass props. Uses newSpecPage with template option.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Testing Component Rendering with newSpecPage in Stencil
DESCRIPTION: This snippet demonstrates how to use newSpecPage() to test a Stencil component's rendered HTML output. It creates a test page, renders a component, and checks the resulting HTML using the toEqualHtml() matcher.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Implementing Utility Helper in TypeScript
DESCRIPTION: Defines a utility function getRandomInt that generates a random integer between min and max values.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: HTML Form Usage Example
DESCRIPTION: Example showing how to use a form-associated custom element within an HTML form.

LANGUAGE: html
CODE:
<form>
  <custom-text-input name="my-custom-input"></custom-text-input>
</form>

----------------------------------------

TITLE: Creating and Exporting a Stencil Store
DESCRIPTION: Demonstrates how to create a store using createStore, define initial state, and set up an onChange listener. The state is then exported for use in components.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Toggle Button Component with State and Event Listening
DESCRIPTION: Example demonstrating state management combined with event listening using @State and @Listen decorators.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Defining Props in Stencil Component
DESCRIPTION: Illustrates how to define object and array props in a Stencil component class.

LANGUAGE: tsx
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Implementing Prop Watchers in Stencil Component
DESCRIPTION: Shows how to implement watchers for props in a Stencil component. This allows the component to react to changes in prop values, particularly useful for parsing string representations of objects and arrays.

LANGUAGE: tsx
CODE:
import { Prop, State, Watch } from '@stencil/core';

export class TodoList {
  @Prop() myObject: string;
  @Prop() myArray: string;
  @State() myInnerObject: object;
  @State() myInnerArray: Array<string>;

  componentWillLoad() {
    this.parseMyObjectProp(this.myObject);
    this.parseMyArrayProp(this.myArray);
  }

  @Watch('myObject')
  parseMyObjectProp(newValue: string) {
    if (newValue) this.myInnerObject = JSON.parse(newValue);
  }

  @Watch('myArray')
  parseMyArrayProp(newValue: string) {
    if (newValue) this.myInnerArray = JSON.parse(newValue);
  }
}

----------------------------------------

TITLE: Configuring WWW Output Target in Stencil
DESCRIPTION: This code snippet demonstrates how to configure the 'www' output target in Stencil's configuration. It sets the output target type to 'www' within the outputTargets array.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Handling Keyboard Events in Stencil
DESCRIPTION: Shows how to handle keyboard events using @Listen decorator and KeyboardEvent interface.

LANGUAGE: tsx
CODE:
@Listen('keydown')
handleKeyDown(ev: KeyboardEvent){
  if (ev.key === 'ArrowDown'){
    console.log('down arrow pressed')
  }
}

----------------------------------------

TITLE: Using a Stencil Component in HTML
DESCRIPTION: Example of how to use a Stencil component in HTML markup after it has been compiled.

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Stencil WWW Output Target Configuration
DESCRIPTION: Configuration for the Stencil WWW output target with file copying setup for testing

LANGUAGE: typescript
CODE:
{
   type: 'www',
   serviceWorker: null,
   copy: [{ src: '**/*.html' }, { src: '**/*.css' }]
}

----------------------------------------

TITLE: Style Modes Configuration in Stencil
DESCRIPTION: Example of implementing different style modes (iOS and Material Design) in a Stencil component.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'simple-button',
  styleUrls: {
    md: './simple-button.md.css',
    ios: './simple-button.ios.css'
  },
})
export class SimpleButton {
  // ...
}

----------------------------------------

TITLE: Configuring docs-custom Output Target in Stencil
DESCRIPTION: This snippet demonstrates how to add the 'docs-custom' output target to the Stencil configuration. It includes a generator function that receives the JSON docs data as an argument, allowing for custom processing.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: This snippet shows how to add custom Rollup plugins to a Stencil project, specifying their execution order relative to built-in plugins like 'node-resolve' and 'commonjs'.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Advanced Screenshot Comparison Test in Stencil
DESCRIPTION: Comprehensive example of visual regression testing in Stencil, including setting global styles, finding elements, and comparing screenshots with different tolerance levels.

LANGUAGE: javascript
CODE:
describe('stencil-avatar', () => {
  it('renders and responds to the size property', async () => {
    const page = await newE2EPage();

    await page.setContent('<link href="http://localhost:3333/build/stellar-core.css" rel="stylesheet" /><stencil-avatar size="small"></stencil-avatar>');
    
    const element = await page.find('stencil-avatar');
    expect(element).toHaveClass('hydrated');

    const results = await page.compareScreenshot();

    expect(results).toMatchScreenshot({ allowableMismatchedPixels: 100 })
    
    expect(results).toMatchScreenshot({ allowableMismatchedRatio: 0.2 })

  });  
});

----------------------------------------

TITLE: Subfolder Component Directory Structure
DESCRIPTION: Example directory structure showing the generated files for a Stencil component in a subfolder.

LANGUAGE: plain
CODE:
src
└── components
    └── pages
        └── page-home
            ├── page-home.css
            ├── page-home.e2e.ts
            ├── page-home.spec.ts
            └── page-home.tsx

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3.1.0 Configuration
DESCRIPTION: Example of enabling the transformAliasedImportPaths feature in a Stencil v3.1.0 configuration file. This feature transforms aliased import paths to their actual file paths.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Environment Variable Configuration
DESCRIPTION: Example showing how to configure and use environment variables in Stencil components.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  env: {
    API_BASE_URL: process.env.API_BASE_URL
  }
}

LANGUAGE: typescript
CODE:
import { Component, h, Env, Host } from '@stencil/core';

@Component({
  tag: 'api-component',
})
export class APIComponent {
  async connectedCallback () {
    const res = await fetch(Env.API_BASE_URL)
    // ...
  }
}

----------------------------------------

TITLE: Documenting @Method() Decorators in Stencil
DESCRIPTION: Use JSDoc comments to document methods decorated with @Method() in a component.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * Scroll by a specified X/Y distance in the component.
   *
   * @param x The amount to scroll by on the horizontal axis.
   * @param y The amount to scroll by on the vertical axis.
   * @param duration The amount of time to take scrolling by that amount.
   * @returns the total distance travelled
   */
  @Method()
  async scrollByPoint(x: number, y: number, duration: number): Promise<number> { /* omitted */ }

  // ...
}

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: Demonstrates how to set up the 'dist' output target in Stencil's configuration. This generates a reusable, tree-shakable component library.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Disabling transformAliasedImportPaths in Stencil v4.0.0 Configuration
DESCRIPTION: Example of disabling the transformAliasedImportPaths feature in a Stencil v4.0.0 configuration file. This can be used as a workaround if issues are encountered with the new default behavior.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Invalid Component Module Export Example in TypeScript
DESCRIPTION: Example showing an incorrect way of exporting multiple items from a component module, which violates Stencil's one-component-per-module rule.

LANGUAGE: tsx
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Using Web Worker Functions in a Stencil Component (TypeScript)
DESCRIPTION: Demonstrates how to import and use Web Worker functions within a Stencil component, leveraging Stencil's automatic worker proxy creation.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Configuring Stencil Dev Server with HTTPS and Custom Port
DESCRIPTION: Example configuration for Stencil's dev server showing how to set up HTTPS with SSL certificates and customize the port. Demonstrates setting reload strategy to page reload instead of default HMR.

LANGUAGE: tsx
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8')
    }
  }
};

----------------------------------------

TITLE: Example Stencil Stats JSON Output Structure
DESCRIPTION: Provides a comprehensive example of the JSON structure generated by the Stencil stats feature. It includes metadata about the compiler, app configuration, build options, component details, and dependency graphs.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Updating Stencil Core
DESCRIPTION: Command to update Stencil core to the latest version.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Initializing a Lerna workspace
DESCRIPTION: Commands to initialize a Lerna workspace and install necessary dependencies.

LANGUAGE: bash
CODE:
# From your top-most-directory/, initialize a workspace
lerna init

# install dependencies
npm install

# install typescript and node types
npm install typescript @types/node --save-dev

----------------------------------------

TITLE: Component Directory Structure
DESCRIPTION: Example directory structure showing the generated files for a new Stencil component.

LANGUAGE: plain
CODE:
src
└── components
    └── page-home
        ├── page-home.css
        ├── page-home.e2e.ts
        ├── page-home.spec.ts
        └── page-home.tsx

----------------------------------------

TITLE: Optimizing JavaScript in Stencil
DESCRIPTION: Shows the function signature for optimizing JavaScript, which is a utility function used by the compiler to apply minification optimizations.

LANGUAGE: javascript
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Defining a Stencil Component for E2E Test Mocking Example
DESCRIPTION: Creates a Stencil component that uses the 'getRandomInt' helper function, which will be used to demonstrate mocking in E2E tests.

LANGUAGE: typescript
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Project Setup Commands
DESCRIPTION: Commands for installing dependencies and starting the development server after project creation.

LANGUAGE: bash
CODE:
cd my-first-stencil-project
npm install
npm start

----------------------------------------

TITLE: Stencil Component with Method Implementation
DESCRIPTION: Stencil component implementation with a method that uses the getRandomInt utility

LANGUAGE: tsx
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Managing Complex State Types
DESCRIPTION: Demonstrates using @State with complex types like arrays and custom interfaces, showing proper state updates and rendering.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

type Item = {
    id: number;
    description: string,
}

@Component({
    tag: 'item-list',
})
export class ItemList {
    timer: number;
    @State() items: Item[] = [];

    connectedCallback() {
        this.timer = window.setInterval(() => {
            const newTodo: Item = {
                description: "Item",
                id: this.items.length + 1
            };
            this.items = [...this.items, newTodo];
        }, 2000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        return (
            <div>
                <h1>To-Do List</h1>
                <ul>
                    {this.items.map((todo) => <li>{todo.description} #{todo.id}</li>)}
                </ul>
            </div>
        );
    }
}

----------------------------------------

TITLE: Setting Up Project Structure for Stencil-Vue Integration
DESCRIPTION: This snippet shows the recommended project structure for a monorepo containing both Stencil and Vue component libraries.

LANGUAGE: plaintext
CODE:
top-most-directory/
└── packages/
    ├── vue-library/
    │   └── lib/
    │       ├── plugin.ts
    │       └── index.ts
    └── stencil-library/
        ├── stencil.config.js
        └── src/components

----------------------------------------

TITLE: Setting Object Props as Strings in HTML
DESCRIPTION: Demonstrates how to set object props as string attributes in HTML for a Stencil component.

LANGUAGE: tsx
CODE:
<todo-list my-object="{}" my-array="[]"></todo-list>

----------------------------------------

TITLE: Configuring www Output Target in Stencil
DESCRIPTION: Basic configuration example for setting up the www output target in a Stencil project. This is the default output target if none is specified.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Configuring www Output Target in Stencil
DESCRIPTION: Basic configuration example for setting up the www output target in a Stencil project. This is the default output target if none is specified.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'www'
  }
]

----------------------------------------

TITLE: Using Refs for DOM Element References
DESCRIPTION: Demonstrates how to use refs to get direct references to DOM elements in Stencil components.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'app-home',
})
export class AppHome {

  textInput!: HTMLInputElement;

  handleSubmit = (event: Event) => {
    event.preventDefault();
    console.log(this.textInput.value);
  }

  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <label>
          Name:
          <input type="text" ref={(el) => this.textInput = el as HTMLInputElement} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Styling Host Element
DESCRIPTION: Shows how to style the host element using CSS, both for regular DOM and Shadow DOM contexts.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Initializing Stencil Dev Server using start() Method
DESCRIPTION: The start() method initializes a Stencil development server. It accepts a configuration object, logger instance, and optional compiler watcher as parameters, returning a Promise that resolves to a DevServer instance.

LANGUAGE: tsx
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Initializing Stencil Dev Server using start() Method
DESCRIPTION: The start() method initializes a Stencil development server. It accepts a configuration object, logger instance, and optional compiler watcher as parameters, returning a Promise that resolves to a DevServer instance.

LANGUAGE: tsx
CODE:
start(stencilDevServerConfig: StencilDevServerConfig, logger: Logger, watcher?: CompilerWatcher): Promise<DevServer>

----------------------------------------

TITLE: Querying Elements in Shadow DOM
DESCRIPTION: Demonstrates how to query elements within the Shadow DOM of a Stencil component using the @Element decorator and shadowRoot property.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Enabling Strict Mode for README Generation
DESCRIPTION: Enable strict mode to receive warnings for missing documentation by adding strict: true to the output target configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-readme',
      strict: true
    }
  ]
};

----------------------------------------

TITLE: CSP Nonce Meta Tag Implementation for SSR
DESCRIPTION: HTML implementation showing how to add a meta tag for CSP nonce in Server-Side Rendering scenarios, where the nonce value needs to be injected on each page request.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: This snippet shows how to add custom Rollup plugins to a Stencil project. It demonstrates the use of the rollupPlugins configuration option to inject plugins before and after Stencil's built-in plugins. The example includes adding a custom resolve plugin before node-resolve and a node polyfills plugin after the commonjs transform.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Basic Screenshot Comparison Test in Stencil
DESCRIPTION: Simple example of setting up a visual regression test using Puppeteer in Stencil. It demonstrates how to create a new E2E page, set content, and compare screenshots.

LANGUAGE: javascript
CODE:
it('render something', async () => {
  const page: E2EPage = await newE2EPage();
  await page.setContent('<my-cmp></my-cmp>');
  await page.compareScreenshot('My Component (...is beautiful. Look at it!)', {fullPage: false});
});

----------------------------------------

TITLE: Documenting CSS Variables in Stencil
DESCRIPTION: Example demonstrating how to document CSS variables using JSDoc-style comments in CSS/SCSS files. These comments are processed by Stencil to generate documentation for CSS Custom Properties.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: Querying Elements in Shadow DOM
DESCRIPTION: Illustrates how to query elements within the Shadow DOM of a Stencil component using the @Element decorator and shadowRoot property.

LANGUAGE: typescript
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Configuring Stencil Custom Elements Output Target
DESCRIPTION: Basic configuration setup for the dist-custom-elements output target in a Stencil project's config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  // Other top-level config options here
  outputTargets: [
    {
      type: 'dist-custom-elements',
      // Output target config options here
    },
    // Other output targets here
  ],
};

----------------------------------------

TITLE: Global Script Configuration
DESCRIPTION: Example of exporting a default function in a global script that runs before the app loads.

LANGUAGE: javascript
CODE:
export default function() {
  initServerConnection();
}

----------------------------------------

TITLE: Documenting CSS Variables in Stencil Components
DESCRIPTION: Example of how to document CSS variables using JSDoc-style comments in a Stencil component's CSS file.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Demonstrating SemVer Format in Markdown
DESCRIPTION: Illustrates the Semantic Versioning format used by Stencil, showing the major, minor, and patch version components.

LANGUAGE: markdown
CODE:
<code>major.minor.patch.</code>

----------------------------------------

TITLE: Deprecated Context and Connect APIs Example
DESCRIPTION: Example of removed context and connect APIs that were deprecated in Stencil v1

LANGUAGE: typescript
CODE:
@Prop({ context: 'config' }) config: Config;
@Prop({ connect: 'ion-menu-controller' }) lazyMenuCtrl: Lazy<MenuController>;

----------------------------------------

TITLE: Invalid Component Export in TypeScript
DESCRIPTION: This example demonstrates an invalid component export where additional functions are exported alongside the component class. This violates Stencil's one-component-per-module rule.

LANGUAGE: typescript
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Accessing the Raw Worker Instance in Stencil
DESCRIPTION: Illustrates how to directly access the Web Worker instance in Stencil for manual message passing, while still leveraging Stencil's bundling and path resolution features.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);

    const result = await sum(1, 2);
    console.log(result); // 3
  }
}

----------------------------------------

TITLE: Configuring Rollup Plugins in Stencil
DESCRIPTION: Demonstrates how to add custom Rollup plugins to a Stencil configuration, showing both 'before' and 'after' injection points relative to built-in plugins.

LANGUAGE: typescript
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Generating JSON Docs via CLI
DESCRIPTION: Command to generate JSON documentation using Stencil CLI

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Updating Stencil Core Package
DESCRIPTION: Command to update the Stencil core package to the latest version

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Configuring Dist Output Target in Stencil
DESCRIPTION: Basic configuration for setting up the 'dist' output target in a Stencil project's configuration file.

LANGUAGE: tsx
CODE:
outputTargets: [
  {
    type: 'dist'
  }
]

----------------------------------------

TITLE: Implementing Custom Screenshot Connector (JavaScript)
DESCRIPTION: Demonstrates how to create a custom screenshot connector by extending the base ScreenshotConnector class provided by Stencil. This allows for customization of screenshot testing behavior.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Optimizing CSS with Stencil Compiler
DESCRIPTION: Shows the signature of the optimizeCss() function, a utility used by the compiler to optimize CSS.

LANGUAGE: tsx
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Screenshot Related Interfaces
DESCRIPTION: Comprehensive TypeScript interfaces defining the data structures used in screenshot testing.

LANGUAGE: tsx
CODE:
export interface ScreenshotConnectorOptions {
  buildId: string;

  buildMessage: string;

  buildAuthor?: string;

  buildUrl?: string;

  previewUrl?: string;

  appNamespace: string;

  buildTimestamp: number;

  logger: Logger;

  rootDir: string;

  cacheDir: string;

  packageDir: string;

  screenshotDirName?: string;

  imagesDirName?: string;

  buildsDirName?: string;

  currentBuildDir?: string;

  updateMaster?: boolean;

  allowableMismatchedPixels?: number;

  allowableMismatchedRatio?: number;

  pixelmatchThreshold?: number;

  waitBeforeScreenshot?: number;

  pixelmatchModulePath?: string;
}

----------------------------------------

TITLE: Configuring Stencil Prerender Path
DESCRIPTION: Example showing how to configure the prerender config file path in stencil.config.ts using the prerenderConfig property.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Implementing Helper Utility in TypeScript
DESCRIPTION: Implementation of a utility function getRandomInt that generates a random integer between min and max values.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Installing @stencil/store via npm
DESCRIPTION: Command to install @stencil/store as a dev dependency using npm. The npm2yarn comment suggests compatibility with Yarn package manager as well.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Handling Dynamic Data Fetching in Stencil Components
DESCRIPTION: Example of fetching and rendering dynamic data using async/await in a Stencil component's lifecycle method.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Defining Object Props in Stencil Component
DESCRIPTION: Example of defining object and array properties in a Stencil component using the @Prop decorator.

LANGUAGE: tsx
CODE:
import { Prop } from '@stencil/core';

export class TodoList {
  @Prop() myObject: object;
  @Prop() myArray: Array<string>;
}

----------------------------------------

TITLE: Exporting Prerender Config Object
DESCRIPTION: This snippet demonstrates how to export a config object using the PrerenderConfig interface in the prerender.config.ts file.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Test with Inline Mock
DESCRIPTION: Test implementation using an inline mock definition

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Worker with Callback Progress
DESCRIPTION: Implementation of a Web Worker that uses callbacks to report progress during execution.

LANGUAGE: tsx
CODE:
export const countDown = (num: number, progress: (p: number) => void) => {
  return new Promise(resolve => {
    const tmr = setInterval(() => {
      num--;
      if (num > 0) {
        progress(num);
      } else {
        clearInterval(tmr);
        resolve(num);
      }
    }, 1000);
  });
};

----------------------------------------

TITLE: Styling Host Elements in Stencil
DESCRIPTION: Shows how to style the host element using CSS for both regular and Shadow DOM components.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

LANGUAGE: css
CODE:
:host {
  width: 100px;
}

----------------------------------------

TITLE: Configuring Asset Directories for a Stencil Component
DESCRIPTION: Demonstrates how to configure asset directories and use getAssetPath() to load static files in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // 1. assetsDirs lists the 'assets' directory as a relative (sibling)
  // directory
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    // 2. the asset path is retrieved relative to the asset base path to use in
    // the <img> tag
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Running Visual Regression Tests with Stencil CLI
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison using the Stencil CLI.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: Component with Deprecated Tag
DESCRIPTION: Example of marking a component as deprecated using @deprecated JSDoc tag

LANGUAGE: tsx
CODE:
/**
 * @deprecated since v2.0.0
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Querying Elements in Shadow DOM
DESCRIPTION: Illustrates how to query elements within the Shadow DOM of a Stencil component using the @Element decorator and shadowRoot property.

LANGUAGE: typescript
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Node Polyfills Configuration
DESCRIPTION: Configuration example for adding Node.js polyfills to Stencil project

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Listening for Component Ready Event in TypeScript
DESCRIPTION: Demonstrates how to use the componentOnReady() method to execute code when a Stencil component has finished its first render cycle. This method returns a promise that resolves after componentDidRender() on the first render cycle.

LANGUAGE: typescript
CODE:
// Get a reference to the element
const el = document.querySelector('my-component');

el.componentOnReady().then(() => {
  // Place any code in here you want to execute when the component is ready
  console.log('my-component is ready');
});

----------------------------------------

TITLE: Creating Usage Examples for Stencil Components
DESCRIPTION: Example of how to create a usage example for a Stencil component. These examples are included in the JSON documentation output.

LANGUAGE: markdown
CODE:
# How to use `my-button`

A button is often a great help in adding interactivity to an app!

You could use it like this:

```html
<my-button>My Button!</my-button>
```

----------------------------------------

TITLE: Related Component Naming Pattern
DESCRIPTION: Shows how to name related components using a shared base name with modifiers.

LANGUAGE: markup
CODE:
<ion-card>
<ion-card-header>
<ion-card-content>

----------------------------------------

TITLE: Configuring Source Maps in Stencil v3
DESCRIPTION: Configuration example showing how to disable source map generation which is now enabled by default in Stencil v3.

LANGUAGE: typescript
CODE:
// stencil.config.ts
import { Config } from '@stencil/core';

export const config: Config = {
  sourceMap: false,
  // ...
};

----------------------------------------

TITLE: Importing Lazy-Loaded Components in TypeScript
DESCRIPTION: Example of importing a Stencil component library in TypeScript for lazy loading.

LANGUAGE: typescript
CODE:
import 'my-design-system';

----------------------------------------

TITLE: Asset Directory Structure Example
DESCRIPTION: Example of how assets are organized in a project's build directory.

LANGUAGE: plaintext
CODE:
www/
├── build/
│   ├── assets/
│   │   ├── logo.png
│   │   └── scenery/
│   │       ├── beach.png
│   │       └── sunset.png
│   └── other-assets/
│       └── font.tiff
└── ...

----------------------------------------

TITLE: Global Script Configuration in JavaScript
DESCRIPTION: An example of how to set up a global script in the Stencil configuration. The global script runs once before the app loads and can be used for initialization tasks.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: Generating Docs with Stencil CLI
DESCRIPTION: Use the Stencil docs command to generate documentation for all documentation output targets, including README files.

LANGUAGE: bash
CODE:
npx stencil docs

----------------------------------------

TITLE: Selecting Stencil Project Type
DESCRIPTION: Interactive prompt for selecting the type of Stencil project to create. Options include component collection, app, and Ionic PWA.

LANGUAGE: text
CODE:
? Select a starter project.

Starters marked as [community] are developed by the Stencil
Community, rather than Ionic. For more information on the 
Stencil Community, please see github.com/stencil-community

❯   component                Collection of web components that can be
                             used anywhere
    app [community]          Minimal starter for building a Stencil 
                             app or website
    ionic-pwa [community]    Ionic PWA starter with tabs layout and routes

----------------------------------------

TITLE: Test File with Inline Mock
DESCRIPTION: Test implementation showing how to use an inline mock function with Jest.mock().

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Test File with Inline Mock
DESCRIPTION: Test implementation showing how to use an inline mock function with Jest.mock().

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Test File with Inline Mock
DESCRIPTION: Test implementation showing how to use an inline mock function with Jest.mock().

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Test File with Inline Mock
DESCRIPTION: Test implementation showing how to use an inline mock function with Jest.mock().

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Using Host as a Fragment in Stencil TSX
DESCRIPTION: Shows how to use the Host component as a fragment to render multiple elements at the root level of a component.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Correct Component Module Organization in TypeScript
DESCRIPTION: Proper way to organize component code by separating utility functions into their own modules.

LANGUAGE: tsx
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Configuring Vue Output Target in Stencil
DESCRIPTION: Stencil configuration to generate Vue component wrappers using the Vue output target.

LANGUAGE: typescript
CODE:
import { vueOutputTarget } from '@stencil/vue-output-target';

export const config: Config = {
  namespace: 'stencil-library',
  outputTargets: [
    {
      type: 'dist',
      esmLoaderPath: '../loader',
    },
    vueOutputTarget({
      componentCorePackage: 'stencil-library',
      proxiesFile: '../vue-library/lib/components.ts',
    }),
  ],
};

----------------------------------------

TITLE: Typed Functional Component with FunctionalComponent Generic
DESCRIPTION: Illustrates how to use the FunctionalComponent type to specify prop types for a functional component.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Installing Ionic Framework in Ember
DESCRIPTION: Command to install the Ionic Framework core package in an Ember project using npm or yarn.

LANGUAGE: bash
CODE:
npm install @ionic/core

----------------------------------------

TITLE: Defining Prerender Config Structure
DESCRIPTION: Exports a config object using the PrerenderConfig interface to define prerendering options.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';
export const config: PrerenderConfig = {
  ...
};

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: Demonstrates how to document component slots using @slot tags in the component's JSDoc comments.

LANGUAGE: tsx
CODE:
/**
 * @slot slotName - slotDescription
 * @slot buttonContent - Slot for the content of the button
 */
 
 @Component({
  tag: '...'
}) ...

----------------------------------------

TITLE: Disabling Collection Path Alias Transformation
DESCRIPTION: Configuration for disabling path alias transformation in collection output targets

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Creating a Worker Pool in Stencil
DESCRIPTION: This example demonstrates how to create a pool of Web Workers in Stencil using the workerPath. It shows how to manually instantiate multiple workers for advanced use cases.

LANGUAGE: tsx
CODE:
import { workerPath } from '../../stuff.worker.ts?worker';

const workerPool = [
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
  new Worker(workerPath),
];

----------------------------------------

TITLE: Running Visual Regression Tests in Stencil
DESCRIPTION: Command to execute end-to-end tests with screenshot comparison in Stencil projects.

LANGUAGE: bash
CODE:
stencil test --e2e --screenshot

----------------------------------------

TITLE: CSP Nonce Meta Tag Implementation for SSR
DESCRIPTION: HTML meta tag structure required for implementing CSP nonces in Server-Side Rendering (SSR) context.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: Command to install the ember-cli-stencil addon for legacy Ember integration with Stencil components.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Configuring Stencil Output Target for Hydrate App
DESCRIPTION: This snippet shows how to configure the Stencil output target to generate the hydrate app for server-side rendering.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist-hydrate-script',
  },
];

----------------------------------------

TITLE: Styling Documentation with CSS Custom Properties
DESCRIPTION: Example of documenting CSS custom properties in a component's style file using JSDoc @prop syntax.

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --border-radius: Border radius of the avatar and inner image
   */
  border-radius: var(--border-radius);
}

----------------------------------------

TITLE: CSS Custom Properties Implementation
DESCRIPTION: Example of defining and using CSS custom properties in a component for style customization.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

LANGUAGE: css
CODE:
h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Configuring Prerender Debug Settings
DESCRIPTION: TypeScript configuration for prerender debugging settings, including crawl control and runtime logging options.

LANGUAGE: json
CODE:
{
  "crawlUrls": false,
  "entryUrls": ["/example"],
  "hydrateOptions": (_url) => {
    return {
      "runtimeLogging": true
    };
  }
}

----------------------------------------

TITLE: Custom Clock Component Example - TSX
DESCRIPTION: Complete example of a clock component utilizing lifecycle methods to manage a timer that updates every second.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
  tag: 'custom-clock'
})
export class CustomClock {

  timer: number;

  @State() time: number = Date.now();

  connectedCallback() {
    this.timer = window.setInterval(() => {
      this.time = Date.now();
    }, 1000);
  }

  disconnectedCallback() {
    window.clearInterval(this.timer);
  }

  render() {
    const time = new Date(this.time).toLocaleTimeString();

    return (
      <span>{ time }</span>
    );
  }
}

----------------------------------------

TITLE: Configuring JSON Docs Output Target
DESCRIPTION: Configuration setup for automatic JSON documentation generation in Stencil config file

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Defining Stencil Component Classes in TypeScript
DESCRIPTION: Demonstrates the correct way to define Stencil component classes using TypeScript, including the @Component decorator and class naming conventions.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'ion-button'
})
export class Button { ... }

@Component({
  tag: 'ion-menu'
})
export class Menu { ... }

----------------------------------------

TITLE: Configuring Stencil Extras for Legacy Browser Support
DESCRIPTION: Example configuration showing how to enable various polyfills and fixes for supporting legacy browsers like IE11 and Edge 18 in Stencil.

LANGUAGE: typescript
CODE:
export const config: Config = {
  buildEs5: 'prod',
  extras: {
    __deprecated__cssVarsShim: true,
    __deprecated__dynamicImportShim: true,
    __deprecated__shadowDomShim: true,
    __deprecated__safari10: true,
    scriptDataOpts: true,
    appendChildSlotFix: false,
    cloneNodeFix: false,
    slotChildNodesFix: true,
  },
};

----------------------------------------

TITLE: Updating Stencil Core Package
DESCRIPTION: Command to update the @stencil/core package to the latest version using npm.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Installing Playwright Dependencies with NPM/Yarn
DESCRIPTION: Command to install the Stencil Playwright adapter and Playwright test package as dev dependencies.

LANGUAGE: bash
CODE:
npm i @stencil/playwright @playwright/test --save-dev

----------------------------------------

TITLE: Configuring Component Colors in Stencil Docs Generation
DESCRIPTION: Demonstrates how to customize the text color and background color of component dependency graphs in generated documentation. The configuration is set through the docs.markdown.targetComponent object in the Stencil config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  docs: {
    markdown: {
      targetComponent: {
        textColor: '#fff',
        background: '#000',
      },
    },
  },
};

----------------------------------------

TITLE: Example of complexType in JsonDocsEvent
DESCRIPTION: JSON representation of the complexType field for an @Event in the docs-json output, showing additional type information.

LANGUAGE: json
CODE:
{
  "complexType": {
    "original": "ModalBreakpointChangeEventDetail",
    "resolved": "ModalBreakpointChangeEventDetail",
    "references": {
      "ModalBreakpointChangeEventDetail": {
        "location": "import",
        "path": "./modal-interface",
        "id": "src/components/modal/modal.tsx::ModalBreakpointChangeEventDetail"
      }
    }
  }
}

----------------------------------------

TITLE: Disabling transformAliasedImportPathsInCollection in Stencil v4.0.0
DESCRIPTION: Configuration example for disabling the default transformAliasedImportPathsInCollection feature in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Dynamic State Updates with Lifecycle Methods
DESCRIPTION: Shows how to update state periodically using lifecycle methods connectedCallback and disconnectedCallback with setInterval.

LANGUAGE: tsx
CODE:
import { Component, State, h } from '@stencil/core';

@Component({
    tag: 'current-time',
})
export class CurrentTime {
    timer: number;
    @State() currentTime: number = Date.now();
    
    connectedCallback() {
        this.timer = window.setInterval(() => {            
            this.currentTime = Date.now();
        }, 1000);
    }

    disconnectedCallback() {
        window.clearInterval(this.timer);
    }

    render() {
        const time = new Date(this.currentTime).toLocaleTimeString();

        return (
            <span>{time}</span>
        );
    }
}

----------------------------------------

TITLE: Basic Web Worker Implementation in Vanilla JavaScript
DESCRIPTION: Demonstrates the fundamental usage of Web Workers using the native browser API with message passing.

LANGUAGE: tsx
CODE:
const worker = new Worker('/my-worker.js');
worker.postMessage(['send message to worker']);
worker.onmessage = (ev) => {
  console.log('data from worker', ev.data);
};

----------------------------------------

TITLE: Running Stencil CLI
DESCRIPTION: Executes the CLI with given initialization options. Used by Stencil's default bin/stencil file and can be used externally.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Installing ember-cli-stencil Addon
DESCRIPTION: Command to install the ember-cli-stencil addon for legacy Ember integration with Stencil components.

LANGUAGE: bash
CODE:
ember install ember-cli-stencil

----------------------------------------

TITLE: Event Options Interface Definition
DESCRIPTION: Shows the interface for EventOptions that can be used to configure event behavior including custom name, bubbling, cancelable, and composition properties.

LANGUAGE: tsx
CODE:
export interface EventOptions {
  /**
   * A string custom event name to override the default.
   */
  eventName?: string;
  /**
   * A Boolean indicating whether the event bubbles up through the DOM or not.
   */
  bubbles?: boolean;

  /**
   * A Boolean indicating whether the event is cancelable.
   */
  cancelable?: boolean;

  /**
   * A Boolean value indicating whether or not the event can bubble across the boundary between the shadow DOM and the regular DOM.
   */
  composed?: boolean;
}

----------------------------------------

TITLE: Configuring package.json for Lazy-Loaded Components
DESCRIPTION: This JSON snippet demonstrates how to configure the package.json file to support lazy loading of Stencil components using the 'dist' output target.

LANGUAGE: json
CODE:
{
  "exports": "./dist/esm/my-design-system.js",
  "main": "./dist/cjs/my-design-system.js",
  "unpkg": "dist/my-design-system/my-design-system.esm.js"
}

----------------------------------------

TITLE: Initializing Project Structure for Stencil-React Integration
DESCRIPTION: Demonstrates the recommended monorepo structure for a Stencil component library with React wrappers. Shows directory layout for Stencil and React libraries.

LANGUAGE: plaintext
CODE:
top-most-directory/
└── packages/
    ├── stencil-library/
    │   ├── stencil.config.js
    │   └── src/components/
    └── react-library/
        └── src/
            ├── components/
            └── index.ts

----------------------------------------

TITLE: Configuring Meta Tags with Stencil PrerenderConfig
DESCRIPTION: Example showing how to use the afterHydrate hook in Stencil's PrerenderConfig to dynamically set document title based on URL pathname during the prerendering process. The hook receives a standard Document object and URL object as parameters.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Webpack Configuration Example
DESCRIPTION: Example webpack configuration for consuming custom elements with asset handling

LANGUAGE: javascript
CODE:
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  plugins: [
    new CopyPlugin({
      patterns: [
        {
          from: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          to: path.resolve(__dirname, 'dist/assets'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Initializing a Form-Associated Component in Stencil
DESCRIPTION: Demonstrates how to set up a basic form-associated component using the @Component decorator and formAssociated option.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Importing Stencil Components in TypeScript
DESCRIPTION: Example of importing a Stencil component library in a TypeScript file using the 'dist' output target.

LANGUAGE: typescript
CODE:
import 'my-design-system';

----------------------------------------

TITLE: ScreenshotConnector Interface Definition
DESCRIPTION: Reference to the core ScreenshotConnector interface defining available methods for implementation

LANGUAGE: tsx
CODE:
https://github.com/ionic-team/stencil/blob/a2e119d059ba0d0fa6155dbd3d82c17612630828/src/declarations/stencil-private.ts#L1631-L1645

----------------------------------------

TITLE: Advanced Worker Usage with Direct Access
DESCRIPTION: Shows how to directly access the Worker instance and create worker pools.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);
    const result = await sum(1, 2);
    console.log(result);
  }
}

----------------------------------------

TITLE: Example Stencil Stats JSON Output
DESCRIPTION: Sample JSON output structure generated by the Stencil stats feature. Includes compiler info, app details, build options, component data, and dependency graphs.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Commit Message Format Example
DESCRIPTION: Demonstrates the required format for commit messages in the Stencil documentation repository, using the pattern type(scope): subject.

LANGUAGE: plaintext
CODE:
type(scope): subject

----------------------------------------

TITLE: Rendering Stencil Components for Testing
DESCRIPTION: Example showing how to use the render method from @wdio/browser-runner/stencil to mount and test a Stencil component in the DOM

LANGUAGE: typescript
CODE:
render({
    components: [ComponentA, ComponentB, ComponentC, ComponentD],
    template: () => <component-a first="Stencil" last="'Don't call me a framework' JS" />
});

----------------------------------------

TITLE: Host Component as Fragment
DESCRIPTION: Demonstration of using Host component to render multiple elements at the root level of a component.

LANGUAGE: tsx
CODE:
@Component({tag: 'my-cmp'})
export class MyCmp {
  render() {
    return (
      <Host>
        <h1>Title</h1>
        <p>Message</p>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Documenting Component Properties in Stencil (TSX)
DESCRIPTION: This snippet demonstrates how to add a description to a @Prop in Stencil using JSDoc comments. The comment on the line preceding the property will be used as the description in the generated documentation.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Disabling transformAliasedImportPaths in Stencil v4.0.0
DESCRIPTION: Configuration to disable the default transformAliasedImportPaths in Stencil v4.0.0 config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Configuring Sass Plugin for Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project by importing and configuring the Sass plugin in the Stencil configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Host Element Styling Without Shadow DOM
DESCRIPTION: Shows how to style the host element using regular CSS when Shadow DOM is not enabled.

LANGUAGE: css
CODE:
my-cmp {
  width: 100px;
}

----------------------------------------

TITLE: Configuring Stencil docs-custom Output Target
DESCRIPTION: Example configuration for setting up the docs-custom output target in Stencil. The configuration includes a generator function that receives the JSON docs data for custom processing.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-custom',
      generator: (docs: JsonDocs) => {
          // Custom logic goes here
      }
    }
  ]
};

----------------------------------------

TITLE: Configuring Individual Page Hydrate Options (TypeScript)
DESCRIPTION: Demonstrates how to set hydrate options for individual pages using the hydrateOptions hook in the prerender config, allowing for page-specific customization.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Enabling Path Alias Transformation in Stencil v3
DESCRIPTION: Configuration example showing how to enable path alias transformation in Stencil v3.1.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Configuring TypeScript Path Aliases in tsconfig.json
DESCRIPTION: Example of setting up path aliases in a TypeScript configuration file. This allows mapping of import paths to specific file locations.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@utils": ["src/utils/index.ts"]
    }
  }
}

----------------------------------------

TITLE: Configuring Stencil for TypeScript Support
DESCRIPTION: Demonstrates how to configure the Stencil config file to generate TypeScript declarations for custom elements.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      generateTypeDeclarations: true,
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Test Implementation with Inline Mock
DESCRIPTION: Shows how to create an inline mock implementation using jest.mock()'s module factory function.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Parsing Command-Line Arguments for Stencil CLI
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object. It's used internally by the CLI with process.argv.slice(2).

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Prop Options in Stencil
DESCRIPTION: Demonstrates the various options available for props in Stencil, including attribute naming, mutability, and reflection.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';
import { MyHttpService } from '../some/local/directory/MyHttpService';

@Component({
   tag: 'todo-list-item',
})
export class ToDoListItem {
   @Prop({ attribute: 'complete' }) isComplete: boolean;
   @Prop({ attribute: 'thing' }) thingToDo: string;
   @Prop({ attribute: 'my-service' }) httpService: MyHttpService;
}

----------------------------------------

TITLE: Running Static Build in Stencil
DESCRIPTION: Demonstrates how to use the --prerender flag with the Stencil build command to enable prerendering of components.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Implementing Hydrate Options in Prerender Config
DESCRIPTION: Demonstrates how to use the hydrateOptions hook in the prerender config to set individual page options.

LANGUAGE: typescript
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Handling User Input in Stencil Components
DESCRIPTION: Shows how to handle user input events like button clicks and input changes using arrow functions in Stencil components.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Configuring Stencil for CI/CD Environments
DESCRIPTION: Shows how to configure Stencil for Continuous Integration/Deployment environments, specifically for Gitlab CI. It demonstrates setting browser arguments to run Headless Chrome in a sandboxed environment.

LANGUAGE: typescript
CODE:
export const config: Config = {
  namespace: 'Foo',
  testing: {
    browserArgs: ['--no-sandbox', '--disable-setuid-sandbox'],
  },
  outputTargets: [
    { type: 'dist' },
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config
DESCRIPTION: Configuration setup for specifying a custom screenshot connector in the Stencil testing config.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Invalid Component Module Export in TypeScript
DESCRIPTION: Example of an invalid component module with multiple exports, which is not allowed in Stencil for efficient bundling.

LANGUAGE: typescript
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Using Build Constants in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Stencil's Build constants within a component. It shows how to check if the code is running in development mode or production mode, and if it's running in the browser or during prerendering.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Configuring VS Code Launch Settings for Browser Debugging
DESCRIPTION: Launch configuration for debugging Stencil components in Chrome browser. Sets up sourcemap handling and connects to localhost:3333.

LANGUAGE: json
CODE:
{
  "type": "chrome",
  "request": "launch",
  "name": "Launch Chrome against localhost",
  "url": "http://localhost:3333",
  "sourceMaps": true,
  "sourceMapPathOverrides": {
    "*": "${webRoot}/*"
  }
}

----------------------------------------

TITLE: Configuring Rollup for Asset Management in Stencil
DESCRIPTION: Shows how to use a Rollup plugin to copy assets to the distribution directory during the Stencil build process.

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Generating Stats via NPM Scripts in Stencil
DESCRIPTION: Demonstrates how to add NPM scripts to generate stats data for a Stencil project. It shows two options: one without specifying an output file and another with a custom output path.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Using Stencil Component in HTML
DESCRIPTION: Example of how to use a Stencil component in HTML markup after it has been compiled.

LANGUAGE: markup
CODE:
<my-component first="Stencil" middle="'Don't call me a framework'" last="JS"></my-component>

----------------------------------------

TITLE: Custom Rollup Plugin Configuration
DESCRIPTION: Demonstrates how to configure custom Rollup plugins in the Stencil config file, showing both before and after plugin injection points.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Getting Stencil Element Reference
DESCRIPTION: Shows how to use the getElement() function to retrieve a Stencil element for a given reference. This can be used to access component methods like componentOnReady().

LANGUAGE: typescript
CODE:
import { getElement } from '@stencil/core'

const stencilComponent = getElement(document.querySelector('my-cmp'))
if (stencilComponent) {
  stencilComponent.componentOnReady().then(() => { ... })
}

----------------------------------------

TITLE: Configuring Page-Specific Hydrate Options
DESCRIPTION: Example of implementing the hydrateOptions hook in prerender.config.ts to set specific rendering options for individual pages.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Disabling transformAliasedImportPaths in Stencil v4.0.0
DESCRIPTION: Configuration example for disabling the transformAliasedImportPaths feature in Stencil v4.0.0 config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Example of Expanded docs-json Output for @Event
DESCRIPTION: JSON representation of the expanded documentation for an @Event in the docs-json output target.

LANGUAGE: json
CODE:
{
  "complexType": {
    "original": "ModalBreakpointChangeEventDetail",
    "resolved": "ModalBreakpointChangeEventDetail",
    "references": {
      "ModalBreakpointChangeEventDetail": {
        "location": "import",
        "path": "./modal-interface",
        "id": "src/components/modal/modal.tsx::ModalBreakpointChangeEventDetail"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Copy Tasks for Assets in Stencil
DESCRIPTION: Demonstrates how to use Stencil copy tasks to copy asset files to the distribution directory during build time.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
  // ...
};

----------------------------------------

TITLE: Configuring Import Injection
DESCRIPTION: Configuration example showing how to enable import injection for better compatibility with bundlers like Vite.

LANGUAGE: javascript
CODE:
{
  "extras": {
    "enableImportInjection": true
  }
}

----------------------------------------

TITLE: Disabling transformAliasedImportPathsInCollection in Stencil v4.0.0
DESCRIPTION: Example of disabling the transformAliasedImportPathsInCollection feature for the dist output target in a Stencil v4.0.0 configuration file. This can be used as a workaround if issues are encountered with the new default behavior.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist',
      transformAliasedImportPathsInCollection: false,
    },
    // ...
  ]
  // ...
};

----------------------------------------

TITLE: Demonstrating connectedCallback and componentWillLoad in Stencil
DESCRIPTION: This snippet shows how connectedCallback and componentWillLoad are called when a component is added to the DOM, and how connectedCallback is called again when the component is reattached.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Demonstrating connectedCallback and componentWillLoad in Stencil
DESCRIPTION: This snippet shows how connectedCallback and componentWillLoad are called when a component is added to the DOM, and how connectedCallback is called again when the component is reattached.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Calling a Public Method on a Stencil Component
DESCRIPTION: This snippet shows how to call a public method on a Stencil component. It ensures the component is defined using customElements.whenDefined() before calling the method.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Configuring docs-vscode Output Target in Stencil Config
DESCRIPTION: Configuration setup in stencil.config.ts to enable the docs-vscode output target. This generates a JSON file containing custom element information that VS Code can use for enhanced IDE features.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Disabling Path Alias Transformation in Stencil v4.0.0
DESCRIPTION: Configuration example showing how to disable the default path alias transformation in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Defining Custom Elements from Bundle
DESCRIPTION: Examples of how to define and use custom elements from the generated bundle

LANGUAGE: typescript
CODE:
import { HelloWorld } from 'my-library/dist/custom-elements';

customElements.define('hello-world', HelloWorld);

LANGUAGE: typescript
CODE:
import { defineCustomElements } from 'my-library/dist/custom-elements';

defineCustomElements();

----------------------------------------

TITLE: Creating an Angular Component Library
DESCRIPTION: Commands to generate an Angular workspace and library for component wrappers.

LANGUAGE: bash
CODE:
npx -p @angular/cli ng new angular-workspace --no-create-application
cd angular-workspace
npx -p @angular/cli ng generate library component-library

----------------------------------------

TITLE: Data Binding in JSX for Stencil
DESCRIPTION: Shows how to bind dynamic data in JSX using curly braces {}.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

----------------------------------------

TITLE: Node Polyfills Plugin Configuration in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the rollup-plugin-node-polyfills plugin in the Stencil config file to handle Node.js APIs in the browser.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import nodePolyfills from 'rollup-plugin-node-polyfills';

export const config: Config = {
  namespace: 'mycomponents',
  rollupPlugins: {
    after: [
      nodePolyfills(),
    ]
  }
};

----------------------------------------

TITLE: Implementing Build Conditionals in Stencil Component
DESCRIPTION: This snippet demonstrates how to use Build Conditionals in a Stencil component. It imports the Build object from @stencil/core and uses the isDev property to conditionally execute code based on the build environment.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.css'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }
  }
}

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil Web App
DESCRIPTION: This JSON configuration sets up VS Code to debug Stencil components running in a Chrome browser. It uses the default Stencil dev server port and enables source map support for accurate debugging.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "chrome",
      "request": "launch",
      "name": "Launch Chrome against localhost",
      "url": "http://localhost:3333",
      "sourceMaps": true,
      "sourceMapPathOverrides": {
        "*": "${webRoot}/*"
      }
    }
  ]
}

----------------------------------------

TITLE: Configuring Vitest for Stencil Component Testing
DESCRIPTION: Configuration file for Vitest to enable browser testing of Stencil components. It sets up headless Chrome as the test environment and includes the Stencil plugin for integration.

LANGUAGE: typescript
CODE:
import stencil from 'unplugin-stencil/vite'
import { defineConfig } from 'vitest/config'

export default defineConfig({
    test: {
        browser: {
            enabled: true,
            headless: true,
            name: 'chrome'
        },
    },
    plugins: [stencil()]
})

----------------------------------------

TITLE: Displaying Telemetry Event Structure in JavaScript
DESCRIPTION: This code snippet shows an example of a telemetry event object collected by Stencil. It includes information about the build process, system specifications, and Stencil configuration.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Initializing a Lerna Workspace
DESCRIPTION: Commands to initialize a Lerna workspace and install necessary dependencies.

LANGUAGE: bash
CODE:
lerna init

npm install

npm install typescript @types/node --save-dev

----------------------------------------

TITLE: Generating Stencil Component in Subfolder
DESCRIPTION: Command to generate a new Stencil component in a specified subfolder under src/components directory.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Generating Stencil Component in Subfolder
DESCRIPTION: Command to generate a new Stencil component in a specified subfolder under src/components directory.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Prerender Config with Hydrate Options
DESCRIPTION: Example of implementing hydrateOptions hook in prerender.config.ts to configure individual page rendering options.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  hydrateOptions(url) {
    return {
      prettyHtml: true
    };
  }
};

----------------------------------------

TITLE: Example Telemetry Event Structure in JavaScript
DESCRIPTION: This snippet demonstrates the structure of a typical telemetry event collected by Stencil. It includes information about the build process, system specifications, and Stencil configuration.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Configuring JSON Docs Output Target in Stencil
DESCRIPTION: Add the docs-json output target to your Stencil configuration file to automatically generate JSON documentation during builds.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'docs-json',
      file: 'path/to/docs.json'
    }
  ]
};

----------------------------------------

TITLE: Defining Internal Stencil Components
DESCRIPTION: Mark a Stencil component as internal using the @internal JSDoc tag to skip README generation for that component.

LANGUAGE: typescript
CODE:
/**
 * @internal
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Creating New Docusaurus Version Command
DESCRIPTION: Command to generate a new version of the Stencil documentation using Docusaurus versioning system. This command creates a snapshot of the current docs directory for version tracking.

LANGUAGE: bash
CODE:
npm run docusaurus docs:version v[VERSION]

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config (TSX)
DESCRIPTION: Configuration example showing how to add the stats output target to stencil.config.ts for automatic stats generation during builds.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Setting Props Manually in JavaScript
DESCRIPTION: Demonstrates how to set object and array props manually using JavaScript in a non-JSX environment. This code would be used in the HTML file to interact with the Stencil component.

LANGUAGE: markup
CODE:
<todo-list></todo-list>
<script>
  const todoListElement = document.querySelector('todo-list');
  todoListElement.myObject = {};
  todoListElement.myArray = [];
</script>

----------------------------------------

TITLE: Stencil Component Class Structure
DESCRIPTION: Complete example of a well-structured Stencil component class, demonstrating proper organization of properties, methods, lifecycle hooks, and rendering logic.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'ion-something',
  styleUrls: {
    ios: 'something.ios.css',
    md: 'something.md.css',
    wp: 'something.wp.css'
  }
})
export class Something {
  num: number;
  someText = 'default';

  @Element() el: HTMLElement;

  @State() isValidated: boolean;
  @State() status = 0;

  @Prop() content: string;
  @Prop() enabled: boolean;
  @Prop() menuId: string;
  @Prop() type = 'overlay';

  @Prop() swipeEnabled = true;

  @Watch('swipeEnabled')
  swipeEnabledChanged(newSwipeEnabled: boolean, oldSwipeEnabled: boolean) {
    this.updateState();
  }

  @Event() ionClose: EventEmitter;
  @Event() ionDrag: EventEmitter;
  @Event() ionOpen: EventEmitter;

  connectedCallback() {}
  disconnectedCallback() {}
  componentWillLoad() {}
  componentDidLoad() {}
  componentShouldUpdate(newVal: any, oldVal: any, propName: string) {}
  componentWillUpdate() {}
  componentDidUpdate() {}
  componentWillRender() {}
  componentDidRender() {}

  @Listen('click', { enabled: false })
  onClick(ev: UIEvent) {
    console.log('hi!')
  }

  @Method()
  async open(): Promise<boolean> {
    // ...
    return true;
  }

  @Method()
  async close(): Promise<void> {
    // ...
  }

  prepareAnimation(): Promise<void> {
    // ...
  }

  updateState() {
    // ...
  }

  render() {
    return (
      <Host
        attribute="navigation"
        side={this.isRightSide ? 'right' : 'left'}
        type={this.type}
        class={{
          'something-is-animating': this.isAnimating
        }}
      >
        <div class='menu-inner page-inner'>
          <slot></slot>
        </div>
      </Host>
    );
  }
}

----------------------------------------

TITLE: Invalid Component Export in TypeScript
DESCRIPTION: An example of an invalid component export in Stencil, where additional functions are exported alongside the component class. This is not allowed for efficient bundling.

LANGUAGE: tsx
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Rollup Plugin Configuration for Assets
DESCRIPTION: Example showing how to use rollup-plugin-copy to copy assets in a Stencil configuration.

LANGUAGE: javascript
CODE:
import { Config } from '@stencil/core';
import copy from 'rollup-plugin-copy';

export const config: Config = {
    namespace: 'copy',
    outputTargets: [
      {
        type: 'dist-custom-elements',
      },
    ],
    rollupPlugins: {
      after: [
        copy({
          targets: [
            {
              src: 'src/**/*.{jpg,png}',
              dest: 'dist/components/assets',
            },
          ],
        }),
      ]
    }
};

----------------------------------------

TITLE: Data Binding in JSX
DESCRIPTION: Demonstrates how to bind dynamic data in JSX using curly braces for variable interpolation.

LANGUAGE: tsx
CODE:
render() {
  return (
    <div>Hello {this.name}</div>
  )
}

LANGUAGE: tsx
CODE:
//ES6
`Hello ${this.name}`

//JSX
Hello {this.name}

----------------------------------------

TITLE: Configuring docs-vscode Output Target in Stencil
DESCRIPTION: Configuration setup in stencil.config.ts to enable the docs-vscode output target. This generates a JSON file containing custom element information that VS Code can use for enhanced HTML editing features.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Setting Nonce for Dist Output in Angular (TypeScript)
DESCRIPTION: Demonstrates how to set a nonce for all script and style tags in a Stencil dist output target within an Angular application's entrypoint. It uses the setNonce helper function exported from the loader file.

LANGUAGE: typescript
CODE:
// main.ts

import { defineCustomElements, setNonce } from 'my-lib/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

// Generic Angular bootstrapping
platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch(err => console.log(err));

defineCustomElements();

----------------------------------------

TITLE: Basic Form Implementation in Stencil
DESCRIPTION: Demonstrates a simple form component with a single text input field and submit button. Shows basic state management and event handling for form submission and input changes.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {

  @State() value: string;

  handleSubmit(e) {
    e.preventDefault()
    console.log(this.value);
    // send data to our backend
  }

  handleChange(event) {
    this.value = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Name:
          <input type="text" value={this.value} onInput={(event) => this.handleChange(event)} />
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Using Ionic Components in Ember Templates
DESCRIPTION: Example of using an Ionic component (ion-toggle) in an Ember component template.

LANGUAGE: javascript
CODE:
<template>
  <ion-toggle></ion-toggle>
</template>

----------------------------------------

TITLE: Installing Vue Output Target for Stencil
DESCRIPTION: Command to install the Vue output target package in the Stencil library.

LANGUAGE: bash
CODE:
# Install dependency (from `packages/stencil-library`)
npm install @stencil/vue-output-target --save-dev

----------------------------------------

TITLE: Configuring Meta Tags with Stencil Prerender Config
DESCRIPTION: Example showing how to use the afterHydrate hook in Stencil's PrerenderConfig to dynamically set document title based on URL pathname during the prerendering process. The hook receives document and URL objects as parameters and can modify the document before HTML serialization.

LANGUAGE: tsx
CODE:
import { PrerenderConfig } from '@stencil/core';

export const config: PrerenderConfig = {
  afterHydrate(document, url) {
    document.title = url.pathname;
  }
};

----------------------------------------

TITLE: Configuring Prerender in Stencil Config (TypeScript)
DESCRIPTION: This snippet shows how to set up the prerender config file path in the Stencil configuration file (stencil.config.ts).

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      baseUrl: 'https://stenciljs.com/',
      prerenderConfig: './prerender.config.ts',
    }
  ]
};

----------------------------------------

TITLE: Configuring Chrome Debugger for Stencil Components
DESCRIPTION: Launch configuration for debugging Stencil components in Chrome browser. Sets up sourcemap support and localhost connection on port 3333.

LANGUAGE: json
CODE:
{
  "type": "chrome",
  "request": "launch",
  "name": "Launch Chrome against localhost",
  "url": "http://localhost:3333",
  "sourceMaps": true,
  "sourceMapPathOverrides": {
    "*": "${webRoot}/*"
  }
}

----------------------------------------

TITLE: Synchronous Transpilation with Stencil Core Compiler
DESCRIPTION: Displays the function signature for the transpileSync() method, which is the synchronous version of transpile().

LANGUAGE: typescript
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Synchronous Transpilation with Stencil Core Compiler
DESCRIPTION: Displays the function signature for the transpileSync() method, which is the synchronous version of transpile().

LANGUAGE: typescript
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Implementing Controlled Ionic Toggle in Ember Component
DESCRIPTION: Example of creating a controlled Ionic toggle component with state management in an Ember component class.

LANGUAGE: javascript
CODE:
import { on } from '@ember/modifier';
import Component from '@glimmer/component';
import { tracked } from '@glimmer/tracking';

export default class Demo extends Component {
  <template>
    <ion-toggle checked="{{this.isOn}}" {{on "ionChange" this.toggle}}></ion-toggle>
  </template>

  @tracked isOn = true;
  
  toggle = () => this.isOn = !this.isOn;
}

----------------------------------------

TITLE: Rendering Complex Menu Structure in Stencil with SSR Compatibility
DESCRIPTION: Demonstrates how to structure a footer navigation menu for better SSR compatibility by rendering dynamic content in the light DOM instead of passing complex objects as props.

LANGUAGE: tsx
CODE:
const menu = {
    'Overview': ['Introduction', 'Getting Started', 'Component API', 'Guides', 'FAQ'],
    'Docs': ['Framework Integrations', 'Static Site Generation', 'Config', 'Output Targets', 'Testing', 'Core Compiler API'],
    'Community': ['Blog', 'GitHub', 'X', 'Discord']
}
return (
    <nav>
        <footer-navigation>
            {Object.entries(menu).map(([section, links]) => (
                <footer-navigation-section>
                    <h2>{section}</h2>
                    {links.map(link => (
                        <footer-navigation-entry href="#/">{link}</footer-navigation-entry>
                    ))}
                </footer-navigation-section>
            ))}
        </footer-navigation>
    </nav>
)

----------------------------------------

TITLE: Using assetsDirs for Static Asset Management in Stencil
DESCRIPTION: This example shows how to use the assetsDirs option to manage static assets in a Stencil component. It demonstrates directory structure and how to use getAssetPath() to reference assets.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // 1. assetsDirs lists the 'assets' directory as a relative (sibling)
  // directory
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    // 2. the asset path is retrieved relative to the asset base path to use in
    // the <img> tag
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: HTML Implementation with setAssetPath
DESCRIPTION: Example of using setAssetPath in an HTML file to configure asset base path.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Custom Rollup Plugin Configuration in Stencil
DESCRIPTION: Example configuration showing how to add custom Rollup plugins before node-resolve and after commonjs transform in Stencil config.

LANGUAGE: tsx
CODE:
export const config = {
  rollupPlugins: {
    before: [
      // Plugins injected before rollupNodeResolve()
      resolvePlugin()
    ],
    after: [
      // Plugins injected after commonjs()
      nodePolyfills()
    ]
  }
}

----------------------------------------

TITLE: Disabling Service Worker in Stencil Config
DESCRIPTION: Example of how to disable the Service Worker generation in a Stencil project by setting the serviceWorker property to null in the config.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'www',
      serviceWorker: null
    }
  ]
};

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Component Lifecycle
DESCRIPTION: Shows how to fetch and render dynamic data in a Stencil component using the componentWillLoad lifecycle method. This example uses async/await to handle the Promise returned by the fetch operation.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: CSP Nonce Meta Tag Implementation for SSR
DESCRIPTION: HTML meta tag structure required for implementing CSP nonce in Server-Side Rendering (SSR) context.

LANGUAGE: html
CODE:
<meta name="csp-nonce" content="{ your nonce value here }" />

----------------------------------------

TITLE: Setting Up Store Testing
DESCRIPTION: Example of how to reset the store state between test specifications using the dispose() API.

LANGUAGE: ts
CODE:
import store from '../store';

beforeEach(() => {
  store.dispose();
});

----------------------------------------

TITLE: Helper Methods Export
DESCRIPTION: Default helper methods exported from the index.js file in the output directory.

LANGUAGE: javascript
CODE:
export { setAssetPath, setPlatformOptions } from '@stencil/core/internal/client';

----------------------------------------

TITLE: Screenshot Connector Supporting Interfaces
DESCRIPTION: Complete set of TypeScript interface definitions for the screenshot connector system, including options, builds, results, and cache structures.

LANGUAGE: typescript
CODE:
export interface ScreenshotConnectorOptions {
  buildId: string;

  buildMessage: string;

  buildAuthor?: string;

  buildUrl?: string;

  previewUrl?: string;

  appNamespace: string;

  buildTimestamp: number;

  logger: Logger;

  rootDir: string;

  cacheDir: string;

  packageDir: string;

  screenshotDirName?: string;

  imagesDirName?: string;

  buildsDirName?: string;

  currentBuildDir?: string;

  updateMaster?: boolean;

  allowableMismatchedPixels?: number;

  allowableMismatchedRatio?: number;

  pixelmatchThreshold?: number;

  waitBeforeScreenshot?: number;

  pixelmatchModulePath?: string;
}

export interface ScreenshotBuild {
  id: string;

  message: string;

  author?: string;

  url?: string;

  previewUrl?: string;

  appNamespace: string;

  timestamp: number;

  screenshots: Screenshot[];
}

export interface ScreenshotBuildResults {
  appNamespace: string;

  masterBuild: ScreenshotBuild;

  currentBuild: ScreenshotBuild;

  compare: ScreenshotCompareResults;
}

export interface ScreenshotCompareResults {
  id: string;

  a: {
    id: string;
    message: string;
    author: string;
    url: string;
    previewUrl: string;
  };

  b: {
    id: string;
    message: string;
    author: string;
    url: string;
    previewUrl: string;
  };

  timestamp: number;

  url: string;

  appNamespace: string;

  diffs: ScreenshotDiff[];
}

export interface ScreenshotCache {
  timestamp?: number;

  lastBuildId?: string;

  size?: number;

  items?: {
    key: string;
    ts: number;
    mp: number;
  }[];
}

export interface Screenshot {
  id: string;

  desc?: string;

  image: string;

  device?: string;

  userAgent?: string;

  width?: number;

  height?: number;

  deviceScaleFactor?: number;

  hasTouch?: boolean;

  isLandscape?: boolean;

  isMobile?: boolean;

  testPath?: string;

  diff?: ScreenshotDiff;
}

export interface ScreenshotDiff {
  mismatchedPixels: number;

  id?: string;

  desc?: string;

  imageA?: string;

  imageB?: string;

  device?: string;

  userAgent?: string;

  width?: number;

  height?: number;

  deviceScaleFactor?: number;

  hasTouch?: boolean;

  isLandscape?: boolean;

  isMobile?: boolean;

  allowableMismatchedPixels: number;

  allowableMismatchedRatio: number;

  testPath?: string;

  cacheKey?: string;
}

----------------------------------------

TITLE: Installing @stencil/store via npm
DESCRIPTION: Command to install @stencil/store as a dev dependency using npm. The npm2yarn comment suggests an automatic conversion for Yarn users.

LANGUAGE: bash
CODE:
npm install @stencil/store --save-dev

----------------------------------------

TITLE: Using Children in Functional Components
DESCRIPTION: Example of using a functional component with child elements.

LANGUAGE: tsx
CODE:
<Hello name="World">
  <p>I'm a child element.</p>
</Hello>

----------------------------------------

TITLE: Git Repository Initialization
DESCRIPTION: Commands to initialize a new git repository for the Stencil project.

LANGUAGE: bash
CODE:
git init
git add -A
git commit -m "initialize project using stencil cli"

----------------------------------------

TITLE: CopyTask Interface Definition - TypeScript
DESCRIPTION: TypeScript interface definition for CopyTask configuration in Stencil output targets. Shows the structure for defining file copy operations.

LANGUAGE: typescript
CODE:
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Component Hierarchy Example in Stencil
DESCRIPTION: Shows the component hierarchy and lifecycle method execution order in nested components.

LANGUAGE: markup
CODE:
  <cmp-a>
    <cmp-b>
      <cmp-c></cmp-c>
    </cmp-b>
  </cmp-a>

----------------------------------------

TITLE: Configuring Extras for Legacy Browser Support in Stencil
DESCRIPTION: This snippet demonstrates how to configure the 'extras' options in a Stencil project to support legacy browsers. It enables various polyfills and shims for CSS variables, dynamic imports, shadow DOM, and Safari 10 compatibility.

LANGUAGE: tsx
CODE:
export const config: Config = {
  buildEs5: 'prod',
  extras: {
    cssVarsShim: true,
    dynamicImportShim: true,
    shadowDomShim: true,
    safari10: true,
    scriptDataOpts: true,
    appendChildSlotFix: false,
    cloneNodeFix: false,
    slotChildNodesFix: true,
  }
};

----------------------------------------

TITLE: Defining CopyTask Interface in TypeScript
DESCRIPTION: TypeScript interface reference for the CopyTask configuration used in Stencil's output targets to define file copy operations.

LANGUAGE: typescript
CODE:
reference title="CopyTask"
https://github.com/ionic-team/stencil/blob/6ed2d4e285544945949ad8e4802fe7f70e392636/src/declarations/stencil-public-compiler.ts#L1594-L1665

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Component Lifecycle
DESCRIPTION: Shows how to fetch dynamic data from a server in a Stencil component's lifecycle method. The componentWillLoad method returns a Promise, allowing Stencil to wait for data before rendering.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Generating Stats with Stencil CLI in package.json Scripts
DESCRIPTION: Demonstrates how to add scripts in package.json to generate stats using the Stencil CLI. It shows two options: one for default output and another for specifying a custom output file.

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Standalone Component Usage in TypeScript
DESCRIPTION: Example of importing and registering standalone components in TypeScript.

LANGUAGE: typescript
CODE:
import { MyComponent, defineCustomElementMyComponent } from 'my-design-system'

// register to CustomElementRegistry
defineCustomElementMyComponent()

// or extend custom element via
class MyCustomComponent extends MyComponent {
  // ...
}
define('my-custom-component', MyCustomComponent)

----------------------------------------

TITLE: Linking Packages with npm link
DESCRIPTION: Commands to link the Stencil package to the Angular package using npm link.

LANGUAGE: bash
CODE:
# From Stencil project directory
npm link

# From Angular component library directory
npm link name-of-your-stencil-package

----------------------------------------

TITLE: Loading Stencil Component via CDN in HTML
DESCRIPTION: Demonstrates how to include a Stencil component in a simple HTML page using a CDN-hosted script.

LANGUAGE: markup
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic.js"></script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Improved Light DOM Rendering Pattern in TSX
DESCRIPTION: Improved approach using light DOM for rendering dynamic content in SSR

LANGUAGE: tsx
CODE:
const menu = {
    'Overview': ['Introduction', 'Getting Started', 'Component API', 'Guides', 'FAQ'],
    'Docs': ['Framework Integrations', 'Static Site Generation', 'Config', 'Output Targets', 'Testing', 'Core Compiler API'],
    'Community': ['Blog', 'GitHub', 'X', 'Discord']
}
return (
    <nav>
        <footer-navigation>
            {Object.entries(menu).map(([section, links]) => (
                <footer-navigation-section>
                    <h2>{section}</h2>
                    {links.map(link => (
                        <footer-navigation-entry href="#/">{link}</footer-navigation-entry>
                    ))}
                </footer-navigation-section>
            ))}
        </footer-navigation>
    </nav>
)

----------------------------------------

TITLE: Installing Vitest Dependencies for Stencil Testing
DESCRIPTION: Command to install necessary packages for setting up Vitest with Stencil, including the core framework, browser testing support, and Stencil integration.

LANGUAGE: bash
CODE:
npm install vitest @vitest/browser unplugin-stencil webdriverio

----------------------------------------

TITLE: Enabling Warnings for Copy Tasks in TypeScript
DESCRIPTION: This example shows how to enable warnings for copy tasks when the source files or directories cannot be found. It sets the 'warn' property to true in the CopyTask configuration.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'dist',
    copy: [
      { src: 'fonts', warn: true }
    ]
  }
]

----------------------------------------

TITLE: Demonstrating SemVer Format in Markdown
DESCRIPTION: Shows the format of Semantic Versioning using inline code blocks in Markdown. The format is major.minor.patch, where each component represents different types of changes.

LANGUAGE: markdown
CODE:
<code>major.minor.patch.</code>

----------------------------------------

TITLE: Setting customElementsExportBehavior in Stencil Config
DESCRIPTION: Example of how to set the customElementsExportBehavior option in the Stencil configuration file to control component export and definition behavior.

LANGUAGE: typescript
CODE:
// stencil.config.ts
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      customElementsExportBehavior: 'default' | 'auto-define-custom-elements' | 'bundle' | 'single-export-module',
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Importing Specific Standalone Components
DESCRIPTION: Shows how to import specific standalone components to reduce code bundle size.

LANGUAGE: javascript
CODE:
// this import loads all compiled components
import { MyComponent } from 'my-design-system'
// only import compiled code for MyComponent
import { MyComponent } from 'my-design-system/my-component'

----------------------------------------

TITLE: Checking Push Notification Subscription (JavaScript)
DESCRIPTION: JavaScript code to check the current push notification subscription status.

LANGUAGE: javascript
CODE:
self.registration.pushManager.getSubscription().then(subscription => {
  if (!subscription) {
    // ask the user to register for push
    return;
  }

  // update the database
  console.log(subscription);
});

----------------------------------------

TITLE: Illustrating Correct Component Naming in HTML
DESCRIPTION: This snippet demonstrates the proper way to name Stencil components in HTML, using a brand-specific prefix like 'ion-' for Ionic components.

LANGUAGE: markup
CODE:
<ion-button>
<ion-header>

----------------------------------------

TITLE: Setting Component Props with External References
DESCRIPTION: Shows how to set component properties using external references in E2E tests, which is useful for importing data or reusing mock data across tests.

LANGUAGE: typescript
CODE:
const props = {
  first: 'Marty',
  lastName: 'McFly',
};

await page.setContent(`<prop-cmp></prop-cmp>`);

await page.$eval('prop-cmp',
  (elm: any, { first, lastName }) => {
    elm.first = first;
    elm.lastName = lastName;
  },
  props 
);

await page.waitForChanges();

----------------------------------------

TITLE: Configuring Stats Generation in Package Scripts
DESCRIPTION: Shows how to add npm scripts to generate stats files using the --stats flag with Stencil build command

LANGUAGE: tsx
CODE:
  scripts: {
    "docs.data": "stencil build --stats" 
    "docs.data-with-optional-file": "stencil build --stats path/to/stats.json"
  }

----------------------------------------

TITLE: Adding Custom Content to Generated README
DESCRIPTION: Add custom markdown content above the auto-generated section in a component's README file.

LANGUAGE: markdown
CODE:
Custom content goes here!
<!-- Auto Generated Below -->

----------------------------------------

TITLE: Setting Asset Path for Custom Elements
DESCRIPTION: Example of how to set the asset path for custom elements using the setAssetPath function.

LANGUAGE: javascript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Implementing Advanced Form in Stencil Component
DESCRIPTION: This snippet shows an advanced form implementation in a Stencil component. It includes an email input with validation, two select inputs (one with static options and another with dynamic options), and demonstrates more complex state management and event handling.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'my-name',
  styleUrl: 'my-name.css'
})
export class MyName {
  selectedReceiverIds = [102, 103];
  @State() value: string;
  @State() selectValue: string;
  @State() secondSelectValue: string;
  @State() avOptions: any[] = [
    { 'id': 101, 'name': 'Mark' },
    { 'id': 102, 'name': 'Smith' }
  ];

  handleSubmit(e) {
    e.preventDefault();
    console.log(this.value);
  }

  handleChange(event) {
    this.value = event.target.value;

    if (event.target.validity.typeMismatch) {
      console.log('this element is not valid')
    }
  }

  handleSelect(event) {
    console.log(event.target.value);
    this.selectValue = event.target.value;
  }

  handleSecondSelect(event) {
    console.log(event.target.value);
    this.secondSelectValue = event.target.value;
  }

  render() {
    return (
      <form onSubmit={(e) => this.handleSubmit(e)}>
        <label>
          Email:
          <input type="email" value={this.value} onInput={(e) => this.handleChange(e)} />
        </label>

        <select onInput={(event) => this.handleSelect(event)}>
          <option value="volvo" selected={this.selectValue === 'volvo'}>Volvo</option>
          <option value="saab" selected={this.selectValue === 'saab'}>Saab</option>
          <option value="mercedes" selected={this.selectValue === 'mercedes'}>Mercedes</option>
          <option value="audi" selected={this.selectValue === 'audi'}>Audi</option>
        </select>

        <select onInput={(event) => this.handleSecondSelect(event)}>
          {this.avOptions.map(recipient => (
            <option value={recipient.id} selected={this.selectedReceiverIds.indexOf(recipient.id) !== -1}>{recipient.name}</option>
          ))}
        </select>

        <input type="submit" value="Submit" />
      </form>
    );
  }
}

----------------------------------------

TITLE: Adding Custom Content to Generated README
DESCRIPTION: Add custom markdown content above the auto-generated section in a component's README file.

LANGUAGE: markdown
CODE:
Custom content goes here!
<!-- Auto Generated Below -->

----------------------------------------

TITLE: Adding Component Overview in JSDoc
DESCRIPTION: Add a JSDoc comment to the component class to provide an overview, which will be included in the generated README.

LANGUAGE: tsx
CODE:
/**
 * A simple component for formatting names
 *
 * This component will do some neat things!
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { }

----------------------------------------

TITLE: Documenting Component Properties in Stencil (TSX)
DESCRIPTION: This snippet demonstrates how to add a description to a @Prop in Stencil using a JSDocs-style comment. The comment is placed on the line preceding the property declaration.

LANGUAGE: tsx
CODE:
/** (optional) The icon to display */
@Prop() iconType = "";

----------------------------------------

TITLE: Importing and Initializing Stencil Components in ESM Context
DESCRIPTION: This code demonstrates how to import and initialize Stencil components in an ESM context. It shows the usage of helper functions like setNonce, applyPolyfills, and defineCustomElements from the generated loader directory.

LANGUAGE: javascript
CODE:
import { applyPolyfills, defineCustomElements, setNonce } from 'stencil-library/loader';

// Will set the `nonce` attribute for all scripts/style tags
// i.e. will run styleTag.setAttribute('nonce', 'r4nd0m')
// Obviously, you should use the nonce generated by your server
setNonce('r4nd0m');

applyPolyfills().then(() => {
  defineCustomElements();
});

----------------------------------------

TITLE: Using Component Library in Vue App
DESCRIPTION: Example of importing and using the component library in a Vue application.

LANGUAGE: javascript
CODE:
// src/main.js
import { ComponentLibrary } from 'vue-library';

createApp(App).use(ComponentLibrary).mount('#app');

----------------------------------------

TITLE: CommonJS Named Exports Configuration
DESCRIPTION: Configuration example showing how to handle CommonJS named exports in Stencil config using the commonjs.namedExports setting.

LANGUAGE: tsx
CODE:
export const config = {
  commonjs: {
    namedExports: {
       // commonjs-dep has a "hello" export
      'commonjs-dep': ['hello']
    }
  }
}

----------------------------------------

TITLE: Example Stats JSON Output for Stencil Project
DESCRIPTION: This snippet provides an example of the JSON data structure generated by the stats command. It includes information about the compiler, app configuration, components, and various output formats.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [
      // exact same model as the esmBrowser, but for esm files
    ],
    "es5": [
      // exact same model as the esmBrowser, but for es5 files
    ],
    "system": [
      // exact same model as the esmBrowser, but for system files
    ],
    "commonjs": [
      // exact same model as the esmBrowser, but for cjs files
    ]
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        },
      ],
    },
  ],
  "entries": [
    {
      "cmps": [
       // Expanded component details are produced here
      ],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: Configuring assetsDirs in Stencil Component
DESCRIPTION: Shows how to configure the assetsDirs option in a Stencil component to specify directories containing required assets.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Updating Playwright Config for Custom Test Patterns
DESCRIPTION: This TypeScript code shows how to update the Playwright configuration to use a custom test file pattern, useful when migrating from the Stencil Test Runner.

LANGUAGE: typescript
CODE:
export default createConfig({
  // Example: match all test files with the 'e2e.playwright.ts' naming convention
  testMatch: '*.e2e.playwright.ts',
});

----------------------------------------

TITLE: Testing Rendered HTML with newSpecPage() in Stencil
DESCRIPTION: This snippet demonstrates how to use newSpecPage() to test a Stencil component's rendered HTML. It imports the necessary functions and component, sets up a test case, and uses expect() to verify the rendered output.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Event Handling in Stencil
DESCRIPTION: Demonstrates how to handle user input events like clicks and input changes using arrow functions.

LANGUAGE: tsx
CODE:
export class MyComponent {
  private handleClick = () => {
    alert('Received the button click!');
  }

  render() {
    return (
      <button onClick={this.handleClick}>Click Me!</button>
    );
  }
}

----------------------------------------

TITLE: Importing Hydrate App in Node.js Server
DESCRIPTION: This code demonstrates how to import the hydrateDocument function from the generated hydrate app module in a Node.js server environment.

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

----------------------------------------

TITLE: Correct Component Organization in TypeScript
DESCRIPTION: Demonstrates the proper way to organize component code by separating utilities into their own files and maintaining one component per module.

LANGUAGE: tsx
CODE:
export function someUtilFunction() {
  console.log('do stuff');
}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

LANGUAGE: tsx
CODE:
import { someUtilFunction } from '../utils.ts';

@Component({
  tag: 'my-cmp-two'
})
export class MyCmpTwo {}

----------------------------------------

TITLE: Marking Stencil Component as Internal
DESCRIPTION: Use the @internal JSDoc tag to mark a component as internal, which will skip README generation for that component.

LANGUAGE: tsx
CODE:
/**
 * @internal
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Configuring Docs-Readme Output Target in Stencil
DESCRIPTION: Add the 'docs-readme' output target to your Stencil configuration file to enable README generation.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
      type: 'docs-readme'
    }
  ]
};

----------------------------------------

TITLE: Importing Stencil Core Compiler in NodeJS
DESCRIPTION: Demonstrates how to import the Stencil Core Compiler in a NodeJS environment using CommonJS syntax.

LANGUAGE: javascript
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Configuring Screenshot Connector in Stencil Config (TSX)
DESCRIPTION: Shows how to configure a custom screenshot connector in the Stencil config file. The 'screenshotConnector' property is set to the path of the custom connector file.

LANGUAGE: tsx
CODE:
export const config: Config = {
  ...
  testing: {
    screenshotConnector: './connector.js'
  }
};

----------------------------------------

TITLE: Importing Stencil Core Compiler in NodeJS
DESCRIPTION: Demonstrates how to import the Stencil Core Compiler in a NodeJS environment using CommonJS syntax.

LANGUAGE: javascript
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Generating README Files via Build Commands
DESCRIPTION: Various CLI commands to generate README documentation using the Stencil build system.

LANGUAGE: bash
CODE:
npx stencil build
npm stencil build --watch
npx stencil build --docs
npx stencil docs

----------------------------------------

TITLE: Component Testing with JSX Template in TSX
DESCRIPTION: Shows how to test a Stencil component using JSX template syntax and passing props. Uses TSX format for JSX support.

LANGUAGE: tsx
CODE:
import { h } from '@stencil/core';
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const greeting = 'Hello World';
  const page = await newSpecPage({
    components: [MyCmp],
    template: () => (<my-cmp greeting={greeting}></my-cmp>),
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Hello World</my-cmp>
  `);
});

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: Example of how to document slots using @slot JSDoc tags in the component's JSDoc comment, which will be reflected in the generated README.

LANGUAGE: tsx
CODE:
/**
 * @slot - Content is placed between the named slots if provided without a slot.
 * @slot primary - Content is placed to the left of the main slotted-in text.
 * @slot secondary - Content is placed to the right of the main slotted-in text.
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent {
  // ...
  
  render() {
    return (
      <section>
        <slot name="primary"></slot>
        <div class="content">
          <slot></slot>
        </div>
        <slot name="secondary"></slot>
      </section>
    );
  }
}

----------------------------------------

TITLE: Valid and Invalid @Method Implementations
DESCRIPTION: Examples of correct and incorrect ways to implement @Method in Stencil components, showcasing async requirements.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Documenting CSS Variables in Stencil
DESCRIPTION: Demonstrates how to document CSS custom properties (variables) using JSDoc-style comments. Shows the proper format for documenting CSS variables that will be picked up by Stencil's documentation generator.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: Using renderToString for Component Hydration
DESCRIPTION: Example of using the renderToString function to hydrate a single component and customize the output.

LANGUAGE: javascript
CODE:
const results = await hydrate.renderToString(
  `<my-component first=\"Stencil\" last=\"'Don't call me a framework' JS\"></my-component>`,
  {
    fullDocument: false,
    serializeShadowRoot: true,
    prettyHtml: true,
  }
);

console.log(results.html);

----------------------------------------

TITLE: Documenting CSS Variables in Stencil
DESCRIPTION: Shows how to document CSS variables using JSDocs-style comments in CSS/SCSS files for automatic documentation generation.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: Importing Dependencies in a Stencil Worker
DESCRIPTION: Shows how to import and use external dependencies within a Stencil worker file.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Creating NodeJS Logger for Stencil Compiler
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the compiler and dev-server. It requires the NodeJS 'process' object as an argument.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Creating NodeJS Logger for Stencil Compiler
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the compiler and dev-server. It requires the NodeJS 'process' object as an argument.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Valid and Invalid Method Implementations in Stencil
DESCRIPTION: Examples of correct and incorrect implementations of public methods using the @Method decorator, showing various ways to handle async returns.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: Creating Node Logger for Stencil Compiler in TypeScript
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the Stencil compiler and dev-server. It requires the NodeJS process object as an argument.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Global Script Export Example
DESCRIPTION: Example showing how to export a default function in a global script configuration.

LANGUAGE: javascript
CODE:
export default function() { // or export default async function()
  initServerConnection();
}

----------------------------------------

TITLE: Creating Node Logger for Stencil Compiler in TypeScript
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the Stencil compiler and dev-server. It requires the NodeJS process object as an argument.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3.1.0
DESCRIPTION: Configuration snippet for enabling the transformAliasedImportPaths feature in Stencil v3.1.0. This feature transforms aliased import paths based on TypeScript configuration.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Parsing CLI Flags in Stencil
DESCRIPTION: Parses command-line arguments into a typed ConfigFlags object. Typically used with process.argv.slice(2) to process CLI arguments.

LANGUAGE: tsx
CODE:
parseFlags(args: string[]): ConfigFlags

----------------------------------------

TITLE: Configuring TypeScript for Stencil and WebdriverIO in JSON
DESCRIPTION: JSON configuration to add to tsconfig.json to resolve type clashes between WebdriverIO (Mocha) and Stencil (Jest) by preferring Jest types.

LANGUAGE: json
CODE:
"types": ["jest"]

----------------------------------------

TITLE: Running Individual Stencil Tasks
DESCRIPTION: Executes individual tasks with specified NodeJS process, Stencil config, and task command. Optional system parameter can be provided. Returns a Promise that resolves to void.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Importing Stencil Compiler in NodeJS
DESCRIPTION: Example showing how to import the Stencil compiler in a NodeJS environment using CommonJS require syntax.

LANGUAGE: tsx
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Running Individual Stencil Tasks
DESCRIPTION: Executes individual tasks with specified NodeJS process, Stencil config, and task command. Optional system parameter can be provided. Returns a Promise that resolves to void.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Running Individual Stencil Tasks
DESCRIPTION: Executes individual tasks with specified NodeJS process, Stencil config, and task command. Optional system parameter can be provided. Returns a Promise that resolves to void.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Running Individual Stencil Tasks
DESCRIPTION: Executes individual tasks with specified NodeJS process, Stencil config, and task command. Optional system parameter can be provided. Returns a Promise that resolves to void.

LANGUAGE: tsx
CODE:
runTask(process: any, config: Config, task: TaskCommand,  sys?: CompilerSystem): Promise<void>

----------------------------------------

TITLE: Setting customElementsExportBehavior in Stencil Config
DESCRIPTION: This snippet demonstrates how to set the customElementsExportBehavior option in the Stencil configuration file to change the export behavior of custom elements.

LANGUAGE: typescript
CODE:
// stencil.config.ts
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      customElementsExportBehavior: 'default' | 'auto-define-custom-elements' | 'bundle' | 'single-export-module',
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Reloading App on Service Worker Update (TypeScript)
DESCRIPTION: Code to be added to a Stencil component's componentWillLoad method to reload the app when a new Service Worker takes control.

LANGUAGE: typescript
CODE:
componentWillLoad() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker
      .getRegistration()
      .then(registration => {
        if (registration?.active) {
          navigator.serviceWorker.addEventListener(
            'controllerchange',
            () => window.location.reload()
          );
        }
      })
  }
}

----------------------------------------

TITLE: Setting Asset Path for Custom Elements in Stencil
DESCRIPTION: This snippet shows how to set the asset path for custom elements builds using the setAssetPath function.

LANGUAGE: typescript
CODE:
import { setAssetPath } from 'my-library/dist/components';

setAssetPath(document.currentScript.src);

----------------------------------------

TITLE: Fragment Component Example in TSX
DESCRIPTION: Demonstrates using Fragment component to group elements without a wrapper node in a Stencil component.

LANGUAGE: tsx
CODE:
import { Component, Fragment, h } from '@stencil/core'
@Component({
  tag: 'cmp-fragment',
})
export class CmpFragment {
  render() {
    return (
      <>
        <div>...</div>
        <div>...</div>
        <div>...</div>
      </>
    );
  }
}

----------------------------------------

TITLE: Rollup Configuration for Custom Elements
DESCRIPTION: Example Rollup configuration for consuming custom elements, including asset copying setup.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Using a Helper Function in a Service in TypeScript
DESCRIPTION: Example of a service function 'bar' that uses the 'getRandomInt' helper. This demonstrates how custom code might be used in a larger context.

LANGUAGE: typescript
CODE:
import { getRandomInt } from '../helpers/utils';

export const bar = () => getRandomInt(0, 10);

----------------------------------------

TITLE: Custom Destination Copy Configuration
DESCRIPTION: Example demonstrating how to set a custom destination path for copied files using the dest option.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project by configuring the '@stencil/sass' plugin in the Stencil configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Configuring Sass Plugin in Stencil
DESCRIPTION: This snippet demonstrates how to add Sass support to a Stencil project by configuring the '@stencil/sass' plugin in the Stencil configuration file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';
import { sass } from '@stencil/sass';

export const config: Config = {
  plugins: [
    sass()
  ]
};

----------------------------------------

TITLE: Implementing Shadow DOM in Stencil Component
DESCRIPTION: Shows how to enable Shadow DOM in a Stencil component using the shadow option in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Loading Stencil Configuration
DESCRIPTION: Presents the function signature for loading and transforming raw config information into a usable config object for the compiler and dev-server.

LANGUAGE: typescript
CODE:
loadConfig(init?: LoadConfigInit): Promise<LoadConfigResults>

----------------------------------------

TITLE: Setting Global Styles in Stencil Config
DESCRIPTION: Shows how to configure global styles in the Stencil config file, making them available to all components in the project.

LANGUAGE: tsx
CODE:
export const config: Config = {
  namespace: 'app',
  globalStyle: 'src/global/global.css',
  outputTarget: [
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Disabling transformAliasedImportPaths in Stencil v4.0.0
DESCRIPTION: Configuration snippet for disabling the transformAliasedImportPaths feature in Stencil v4.0.0. This can be used as a workaround if issues are encountered with the new default behavior.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: false,
  // ...
};

----------------------------------------

TITLE: Enabling Shadow DOM in Stencil Component
DESCRIPTION: Demonstrates how to enable Shadow DOM for a Stencil component by setting the 'shadow' option to true in the component decorator.

LANGUAGE: typescript
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Documenting CSS Variables
DESCRIPTION: Example of documenting CSS variables using JSDoc-style comments

LANGUAGE: css
CODE:
:host {
  /**
   * @prop --background: Background of the button
   * @prop --background-activated: Background of the button when activated
   * @prop --background-focused: Background of the button when focused
   */
  --background: pink;
  --background-activated: aqua;
  --background-focused: fuchsia;
}

----------------------------------------

TITLE: Using CSS Custom Properties in Stencil
DESCRIPTION: Demonstrates how to define and use CSS custom properties (CSS variables) in a Stencil component.

LANGUAGE: css
CODE:
:host {
  --color-primary: blue;
}

h1 {
  color: var(--color-primary);
}

----------------------------------------

TITLE: Listening to DOM Events in Stencil Components
DESCRIPTION: Demonstrates how to use the @Listen decorator to handle DOM events, including custom events emitted by other components. The example shows a TodoApp component listening for a 'todoCompleted' event.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Querying Typed Stencil Components in TypeScript
DESCRIPTION: Demonstrates how to properly type and query a Stencil-generated Web Component using the automatically generated HTML element interfaces. Shows how to access and modify component properties with type safety.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Configuring docs-vscode Output Target in Stencil Config (TypeScript)
DESCRIPTION: This snippet shows how to add the docs-vscode output target to the Stencil configuration file. It specifies the type and file name for generating VS Code custom data.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Accessing Typed Stencil Component in TypeScript
DESCRIPTION: Demonstrates how to use the automatically generated HTML element interface for a Stencil component. This example shows accessing an ion-button element with proper typing.

LANGUAGE: tsx
CODE:
const button: HTMLIonButtonElement = document.queryElement('ion-button');
button.fill = 'outline';

----------------------------------------

TITLE: Documenting Slots in Stencil Components
DESCRIPTION: Example of documenting slots in a Stencil component using the @slot JSDoc tag. This shows how to annotate slots for inclusion in the generated JSON documentation.

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @slot buttonContent - Slot for the content of the button
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Deprecated Context and Connect APIs in Stencil v1
DESCRIPTION: Example of deprecated context and connect APIs within the @Prop decorator. These APIs have been removed in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
@Prop({ context: 'config' }) config: Config;
@Prop({ connect: 'ion-menu-controller' }) lazyMenuCtrl: Lazy<MenuController>;

----------------------------------------

TITLE: Configuring Copy Task with Warnings
DESCRIPTION: Example showing how to enable warning messages for copy tasks when source files cannot be found.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'dist',
      copy: [
        { src: 'fonts', warn: true }
      ]
    }
  ]

----------------------------------------

TITLE: Legacy Context and Connect API Example
DESCRIPTION: Example of deprecated context and connect APIs that have been removed in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
@Prop({ context: 'config' }) config: Config;
@Prop({ connect: 'ion-menu-controller' }) lazyMenuCtrl: Lazy<MenuController>;

----------------------------------------

TITLE: Event Listening with @Listen Decorator
DESCRIPTION: Shows how to listen to DOM events using the @Listen decorator in Stencil components.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Deprecated Context and Connect APIs in Stencil
DESCRIPTION: Example of deprecated context and connect APIs within the @Prop decorator. These APIs have been removed in Stencil v4.0.0.

LANGUAGE: typescript
CODE:
@Prop({ context: 'config' }) config: Config;
@Prop({ connect: 'ion-menu-controller' }) lazyMenuCtrl: Lazy<MenuController>;

----------------------------------------

TITLE: Enabling Scoped CSS for a Stencil Component
DESCRIPTION: This snippet shows how to enable scoped CSS for a Stencil component using the scoped option in the @Component decorator.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  scoped: true
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Package.json Configuration for Lazy Loading
DESCRIPTION: Configuration settings in package.json for proper entry file loading in different environments.

LANGUAGE: json
CODE:
{
  "exports": "./dist/esm/my-design-system.js",
  "main": "./dist/cjs/my-design-system.js",
  "unpkg": "dist/my-design-system/my-design-system.esm.js"
}

----------------------------------------

TITLE: Using hydrateDocument for Server-Side Rendering
DESCRIPTION: This example shows how to use the hydrateDocument function in a server's response logic. It takes a document object, hydrates it, and returns the results including the hydrated HTML.

LANGUAGE: javascript
CODE:
import { hydrateDocument } from 'yourpackage/hydrate';

export function hydrateComponents(doc) {
  return hydrateDocument(doc)
    .then((hydrateResults) => {
      // execute logic based on results
      console.log(hydrateResults.html);
      return hydrateResults;
    });
}

----------------------------------------

TITLE: Initializing Basic Form-Associated Component in TypeScript
DESCRIPTION: Basic setup of a form-associated Stencil component using the formAssociated option in the @Component decorator.

LANGUAGE: typescript
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'my-face',
  formAssociated: true,
})
export class MyFACE {
}

----------------------------------------

TITLE: Defining Web Worker Functions in Stencil
DESCRIPTION: Shows how to define functions in a Stencil Web Worker file. These functions can be imported and used in components as if they were regular async functions.

LANGUAGE: typescript
CODE:
export const sum = async (a: number, b: number) => {
  return a + b;
}

export const expensiveTask = async (buffer: ArrayBuffer) => {
  for (let i = 0; i < buffer.length; i++) {
    // do a lot of processing
  }
  return buffer;
};

----------------------------------------

TITLE: Querying Elements in Shadow DOM
DESCRIPTION: Example showing how to query elements within a Shadow DOM component using the @Element decorator and shadowRoot property.

LANGUAGE: tsx
CODE:
import { Component, Element } from '@stencil/core';

@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true
})
export class ShadowComponent {

  @Element() el: HTMLElement;

  componentDidLoad() {
    const elementInShadowDom = this.el.shadowRoot.querySelector('.a-class-selector');

    ...
  }

}

----------------------------------------

TITLE: Using Props in TSX and HTML
DESCRIPTION: This snippet shows how to use props when rendering a Stencil component in both TSX and HTML.

LANGUAGE: typescript
CODE:
{/* Here we use the component in a TSX file */}
<todo-list name={"Tuesday's To-Do List"}></todo-list>

LANGUAGE: html
CODE:
<!-- Here we use the component in an HTML file -->
<todo-list name="Tuesday's To-Do List"></todo-list>

----------------------------------------

TITLE: Configuring Stats Output Target in Stencil Config
DESCRIPTION: Demonstrates how to configure the stats output target in stencil.config.ts for automatic stats generation during builds.

LANGUAGE: tsx
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'stats',
      file: 'path/to/stats.json' // optional
    }
  ]
};

----------------------------------------

TITLE: Advanced Worker Usage with Direct Access
DESCRIPTION: Example of directly accessing worker instance and creating worker pools.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);
    const result = await sum(1, 2);
    console.log(result);
  }
}

----------------------------------------

TITLE: Generating Nested Stencil Component
DESCRIPTION: Command to generate a Stencil component within a subdirectory of the components folder, demonstrating nested component organization.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Optimizing CSS with Stencil Compiler
DESCRIPTION: Shows the function signature for optimizing CSS using the Stencil Compiler.

LANGUAGE: typescript
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Rollup Configuration for Custom Elements
DESCRIPTION: Example Rollup configuration for consuming custom elements, including asset copying.

LANGUAGE: javascript
CODE:
import path from 'path';
import commonjs from '@rollup/plugin-commonjs';
import copy from 'rollup-plugin-copy';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';

export default {
  input: 'src/index.js',
  output: [{ dir: path.resolve('dist/'), format: 'es' }],
  plugins: [
    resolve(),
    commonjs(),
    postcss({
      extensions: ['.css'],
    }),
    copy({
      targets: [
        {
          src: path.resolve(__dirname, 'node_modules/my-library/dist/my-library/assets'),
          dest: path.resolve(__dirname, 'dist'),
        },
      ],
    }),
  ],
};

----------------------------------------

TITLE: Basic Prop Declaration in Stencil
DESCRIPTION: Shows how to declare a basic string prop using the @Prop decorator in a Stencil component

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list',
})
export class TodoList {
    @Prop() name: string;
    
    render() {
        return <div>To-Do List Name: {this.name}</div>
    }
}

----------------------------------------

TITLE: Generating Nested Stencil Component
DESCRIPTION: Command to generate a Stencil component within a subdirectory of the components folder, demonstrating nested component organization.

LANGUAGE: shell
CODE:
stencil generate pages/page-home

----------------------------------------

TITLE: Marking a Stencil Component as Internal
DESCRIPTION: Use the @internal JSDoc tag to mark a component as internal, which will skip README generation for that component.

LANGUAGE: tsx
CODE:
/**
 * @internal
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { /* omitted */ }

----------------------------------------

TITLE: Creating Custom Screenshot Connector (JavaScript)
DESCRIPTION: This snippet demonstrates how to create a custom screenshot connector by extending the base ScreenshotConnector class from Stencil. It imports the base class and exports a new class that extends it.

LANGUAGE: javascript
CODE:
const { ScreenshotConnector } = require('@stencil/core/screenshot');

module.exports = class ScreenshotCustomConnector extends ScreenshotConnector {
  ...
};

----------------------------------------

TITLE: Configuring NPM Scripts for Stencil Testing
DESCRIPTION: Example package.json scripts configuration for running different types of Stencil tests, including unit tests, watch mode, and end-to-end tests.

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Initializing Asset Resolution in Stencil Component
DESCRIPTION: Example showing how to configure and use assets in a Stencil component using assetsDirs and getAssetPath.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Running Specific Stencil Tests via Command Line
DESCRIPTION: Examples of how to run specific unit or end-to-end tests using the Stencil CLI with Jest options.

LANGUAGE: bash
CODE:
# run a single unit test
npx stencil test --spec -- src/components/my-component/my-component.spec.ts
# run a single e2e test
npx stencil test --e2e -- src/components/my-component/my-component.e2e.ts

# enable code coverage
npx stencil test --spec --coverage

----------------------------------------

TITLE: Creating Stencil Store State
DESCRIPTION: Example of creating a store with initial state and implementing onChange handler for reactive state management.

LANGUAGE: tsx
CODE:
import { createStore } from "@stencil/store";

const { state, onChange } = createStore({
  clicks: 0,
  seconds: 0,
  squaredClicks: 0
});

onChange('clicks', value => {
  state.squaredClicks = value ** 2;
});

export default state;

----------------------------------------

TITLE: Using Web Worker Functions in a Stencil Component
DESCRIPTION: This snippet demonstrates how to import and use Web Worker functions within a Stencil component. It shows how to call the sum and expensiveTask functions defined in the worker.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum, expensiveTask } from '../../stuff.worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {

  async componentWillLoad() {
    const result = await sum(1, 2);
    console.log(result); // 3

    const newBuffer = await expensiveTask(buffer);
    console.log(newBuffer);
  }
}

----------------------------------------

TITLE: Documenting CSS Variables in Stencil (CSS)
DESCRIPTION: This example shows how to document CSS variables (CSS Custom Properties) in Stencil using jsdoc-style comments. This enables automatic documentation of CSS variables used in components.

LANGUAGE: css
CODE:
 :root {
   /**
    * @prop --primary: Primary header color.
    */
   --primary: blue;
 }

----------------------------------------

TITLE: Adding Stencil Library as Peer Dependency
DESCRIPTION: JSON diff showing how to add the Stencil library as a peer dependency in the Angular component library's package.json.

LANGUAGE: json
CODE:
"peerDependencies": {
   "@angular/common": "^15.1.0",
-  "@angular/core": "^15.1.0"
+  "@angular/core": "^15.1.0",
+  "stencil-library": "*"
}

----------------------------------------

TITLE: Invalid Component Export Example in TypeScript
DESCRIPTION: Example showing incorrect way of exporting multiple items from a component file, which violates Stencil's one-component-per-module rule.

LANGUAGE: tsx
CODE:
// This module has a component, you cannot export anything else
export function someUtilFunction() {
  console.log('do stuff');
}

@Component({
  tag: 'my-cmp'
})
export class MyCmp {}

----------------------------------------

TITLE: Configuring docs-vscode Output Target in Stencil
DESCRIPTION: Configuration snippet showing how to add the docs-vscode output target to stencil.config.ts to generate VS Code custom data file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Creating a Monorepo with Lerna
DESCRIPTION: Commands to initialize a Lerna workspace and install necessary dependencies for a TypeScript-based monorepo.

LANGUAGE: bash
CODE:
# From your top-most-directory/, initialize a workspace
lerna init

# install dependencies
npm install

# install typescript and node types
npm install typescript @types/node --save-dev

----------------------------------------

TITLE: Configuring docs-vscode Output Target in Stencil
DESCRIPTION: This snippet shows how to add the 'docs-vscode' output target to the Stencil configuration file. It specifies the type and output file for generating custom element information for VS Code.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    { 
        type: 'docs-vscode',
        file: 'vscode-data.json',
    }
  ]
};

----------------------------------------

TITLE: Using Stencil Components with Props in TSX
DESCRIPTION: Example of using a Stencil component with props in a TSX file.

LANGUAGE: tsx
CODE:
<todo-list name={"Tuesday's To-Do List"}></todo-list>

----------------------------------------

TITLE: Configuring assetsDirs in Stencil Component
DESCRIPTION: Shows how to configure the assetsDirs option in a Stencil component to specify directories containing required assets and use getAssetPath to reference them.

LANGUAGE: typescript
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'my-component',
  assetsDirs: ['assets']
})
export class MyComponent {

  @Prop() image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Creating Node Logger for Stencil Compiler in TypeScript
DESCRIPTION: Creates a logger based on NodeJS APIs for use by the Stencil compiler and dev-server. It requires the NodeJS process object as an argument.

LANGUAGE: tsx
CODE:
createNodeLogger(process: any): Logger

----------------------------------------

TITLE: Using Build Constants in Stencil Component
DESCRIPTION: This snippet demonstrates how to use the Build object from @stencil/core to conditionally execute code based on development or production mode, and whether the code is running in the browser or during prerendering.

LANGUAGE: tsx
CODE:
import { Component, Build } from '@stencil/core';

@Component({
  tag: 'stencil-app',
  styleUrl: 'stencil-app.scss'
})
export class StencilApp {

  componentDidLoad() {
    if (Build.isDev) {
      console.log('im in dev mode');
    } else {
      console.log('im running in production');
    }

    if (Build.isBrowser) {
      console.log('im in the browser');
    } else {
      console.log('im in prerendering (server)');
    }
  }
}

----------------------------------------

TITLE: Organizing Stencil Component File Structure
DESCRIPTION: This snippet demonstrates the recommended file structure for Stencil components, showing how to organize component files, styles, and tests in separate directories.

LANGUAGE: bash
CODE:
├── my-card
│   ├── my-card.ios.css
│   ├── my-card.md.css
│   ├── my-card.css
│   ├── my-card.tsx
│   └── test
│       └── basic
│           ├── e2e.js
│           └── index.html
├── my-card-content
│   ├── my-card-content.ios.css
│   ├── my-card-content.md.css
│   ├── my-card-content.css
│   └── my-card-content.tsx
├── my-card-title
│   ├── my-card-title.ios.css
│   ├── my-card-title.md.css
│   ├── my-card-title.css

----------------------------------------

TITLE: Generating JSON Documentation via CLI in Stencil
DESCRIPTION: Use the --docs-json CLI flag to generate JSON documentation for a Stencil project.

LANGUAGE: bash
CODE:
stencil build --docs-json path/to/docs.json

----------------------------------------

TITLE: Removing Jasmine Dependencies
DESCRIPTION: Command to remove Jasmine-related dependencies from the Angular workspace to avoid type conflicts with Jest.

LANGUAGE: bash
CODE:
npm uninstall jasmine-core @types/jasmine

----------------------------------------

TITLE: Transpile Function Declaration
DESCRIPTION: TypeScript function signature for the transpile method which converts source code with optional configuration options.

LANGUAGE: typescript
CODE:
transpile(code: string, opts?: TranspileOptions): Promise<TranspileResults>

----------------------------------------

TITLE: Data Flow with Stencil Props
DESCRIPTION: Demonstrates how data flows from parent to child components using props in Stencil.

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
})
export class TodoList {
  render() {
    return (
      <div>
        <h1>To-Do List Name: Stencil To Do List</h1>
        <ul> 
           <todo-list-item thingToDo={"Learn about Stencil Props"}></todo-list-item>
           <todo-list-item thingToDo={"Write some Stencil Code with Props"}></todo-list-item>
           <todo-list-item thingToDo={"Dance Party"}></todo-list-item>
        </ul>
      </div>
    )
  }
}

LANGUAGE: typescript
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
    tag: 'todo-list-item',
})
export class ToDoListItem {
  @Prop() thingToDo: string;
  
  render() {
    return <li>{this.thingToDo}</li>;
  }
}

----------------------------------------

TITLE: Generating Stencil Component
DESCRIPTION: Command to generate a new Stencil component using the CLI generator, skipping the interactive prompts by directly specifying the component name.

LANGUAGE: shell
CODE:
stencil generate my-new-component

----------------------------------------

TITLE: Defining a Helper Function in Stencil with TypeScript
DESCRIPTION: This code defines a helper function 'getRandomInt' that generates a random integer within a specified range. It's located in a utils file and will be used in subsequent examples for mocking.

LANGUAGE: typescript
CODE:
export const getRandomInt = (min: number, max: number) =>
  Math.round(Math.random() * (max - min)) + min;

----------------------------------------

TITLE: Example Telemetry Data Structure in JavaScript
DESCRIPTION: Shows the structure of a sample telemetry event collected by Stencil CLI, including system information, build details, and usage metrics. The data includes command invocation details, dependency versions, output targets, and general machine information.

LANGUAGE: javascript
CODE:
{
   "yarn": false,
   "duration": 2762,
   "componentCount": 13,
   "targets": [ "www", "dist-lazy", "docs-readme", "docs-vscode" ],
   "packages": [ "@capacitor/cli@^3.1.1", "@capacitor/core@^3.1.1", "@stencil/core@latest", "@stencil/store@latest" ],
   "arguments": [ "--debug" ],
   "task": "build",
   "stencil": "2.6.0",
   "system": "node 16.4.2",
   "os_name": "darwin",
   "os_version": "20.5.0",
   "cpu_model": "Apple M1",
   "build": "20210714145743",
   "typescript": "4.2.3",
   "rollup": "2.42.3"
}

----------------------------------------

TITLE: Importing Dependencies in Stencil Web Workers
DESCRIPTION: Shows how to import both npm packages and local modules within a Web Worker file. Stencil's compiler bundles all dependencies into a single worker file.

LANGUAGE: tsx
CODE:
import upngjs from 'upng-js';
import { Images } from './materials';

export const loadTexture = async (imagesSrcs: Images) => {
  const images = await Promise.all(
    imagesSrcs.map(loadOriginalImage)
  );
  return images;
}

async function loadOriginalImage(src: string) {
  const res = await fetch(src);
  const png = upngjs.decode(await res.arrayBuffer());
  return png;
}

----------------------------------------

TITLE: Test Implementation with Inline Mock
DESCRIPTION: Example test using Jest's mock functionality with an inline mock implementation.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { foo } from './services/foo';

describe('Foo', () => {
  it('bar()', () => {
    expect(bar()).toBe(42);
  });
});

----------------------------------------

TITLE: Component Usage Examples
DESCRIPTION: Demonstrates how to use a Stencil component in both HTML and TSX files after compilation.

LANGUAGE: html
CODE:
<!-- Here we use the component in an HTML file -->
<todo-list></todo-list>

LANGUAGE: tsx
CODE:
{/* Here we use the component in a TSX file */}
<todo-list></todo-list>

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3.1.0
DESCRIPTION: Configuration snippet for enabling the transformAliasedImportPaths feature in Stencil v3.1.0 config file.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Calling Public Methods in Stencil Components
DESCRIPTION: Shows how to properly call a public method on a Stencil component after ensuring the component is defined.

LANGUAGE: tsx
CODE:
(async () => {
  await customElements.whenDefined('todo-list');
  const todoListElement = document.querySelector('todo-list');
  await todoListElement.showPrompt();
})();

----------------------------------------

TITLE: Stencil Config with Copy Tasks
DESCRIPTION: Configuration example showing how to set up copy tasks for assets in Stencil config

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  namespace: 'your-component-library',
  outputTargets: [
    {
      type: 'dist-custom-elements',
      copy: [
        {
          src: '**/*.{jpg,png}',
          dest: 'dist/components/assets',
          warn: true,
        }
      ]
    },
  ], 
  // ...
};

----------------------------------------

TITLE: Component Directory Structure Example
DESCRIPTION: Example directory structure showing the generated component files in the default location.

LANGUAGE: plain
CODE:
src
└── components
    └── page-home
        ├── page-home.css
        ├── page-home.e2e.ts
        ├── page-home.spec.ts
        └── page-home.tsx

----------------------------------------

TITLE: Asset Management in Stencil Components
DESCRIPTION: Demonstrates how to configure and use assets in a Stencil component using the assetsDirs option and getAssetPath utility.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Building Angular Component Library
DESCRIPTION: Angular CLI command to build the Angular component library.

LANGUAGE: bash
CODE:
npx -p @angular/cli ng build component-library

----------------------------------------

TITLE: Custom Destination Copy Configuration
DESCRIPTION: Example demonstrating how to set a custom destination directory for copied files using the dest option.

LANGUAGE: tsx
CODE:
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]

----------------------------------------

TITLE: Running Specific Stencil Tests via Command Line
DESCRIPTION: Examples of how to run specific Stencil tests using command line arguments. These commands demonstrate running a single unit test, a single e2e test, and enabling code coverage.

LANGUAGE: sh
CODE:
# run a single unit test
npx stencil test --spec -- src/components/my-component/my-component.spec.ts
# run a single e2e test
npx stencil test --e2e -- src/components/my-component/my-component.e2e.ts
# enable code coverage
npx stencil test --spec --coverage

----------------------------------------

TITLE: Asset Directory Configuration in Stencil Component
DESCRIPTION: Demonstrates how to configure and use asset directories in a Stencil component for handling static files like images.

LANGUAGE: tsx
CODE:
import { Component, Prop, getAssetPath, h } from '@stencil/core';

@Component({
  tag: 'todo-list',
  assetsDirs: ['assets']
})
export class TodoList {
  image = "sunset.jpg";

  render() {
    const imageSrc = getAssetPath(`./assets/${this.image}`);
    return <img src={imageSrc} />
  }
}

----------------------------------------

TITLE: Configuring Test Scripts in package.json
DESCRIPTION: Example NPM scripts configuration for running different types of Stencil tests including unit tests, watched tests, and end-to-end tests

LANGUAGE: json
CODE:
{
    "scripts": {
      "test": "stencil test --spec",
      "test.watch": "stencil test --spec --watchAll",
      "test.end-to-end": "stencil test --e2e"
    }
}

----------------------------------------

TITLE: Implementing Event Emission in Stencil
DESCRIPTION: Demonstrates how to use the @Event decorator to emit custom events from a Stencil component using EventEmitter.

LANGUAGE: tsx
CODE:
import { Event, EventEmitter } from '@stencil/core';

export class TodoList {
  @Event() todoCompleted: EventEmitter<Todo>;

  todoCompletedHandler(todo: Todo) {
    this.todoCompleted.emit(todo);
  }
}

----------------------------------------

TITLE: Fetching Dynamic Data in Stencil Components
DESCRIPTION: Example showing how to fetch and render dynamic data using async/await in a component's lifecycle method componentWillLoad.

LANGUAGE: typescript
CODE:
async componentWillLoad() {
  const ret = await fetch('https://.../api');

  this.thing = await ret.json();
}

----------------------------------------

TITLE: Importing Stencil Core Compiler in NodeJS
DESCRIPTION: Shows how to import the Stencil Core Compiler module in a NodeJS environment using CommonJS syntax.

LANGUAGE: javascript
CODE:
const stencil = require('@stencil/core/compiler');

----------------------------------------

TITLE: Importing Standalone Stencil Components in TypeScript
DESCRIPTION: This snippet demonstrates how to import and use standalone Stencil components in a TypeScript file. It uses the 'dist-custom-elements' output target.

LANGUAGE: typescript
CODE:
import { MyComponent, defineCustomElementMyComponent } from 'my-design-system'

// register to CustomElementRegistry
defineCustomElementMyComponent()

// or extend custom element via
class MyCustomComponent extends MyComponent {
  // ...
}
define('my-custom-component', MyCustomComponent)

----------------------------------------

TITLE: Executing Static Build in Stencil
DESCRIPTION: This command runs a Stencil build with prerendering enabled using the --prerender flag.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Synchronous Transpilation with Stencil Core Compiler
DESCRIPTION: Presents the signature of the transpileSync() function, which is the synchronous equivalent of transpile(). It requires TypeScript to be globally available in browser environments.

LANGUAGE: tsx
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Basic Component Testing with newSpecPage in TypeScript
DESCRIPTION: Demonstrates how to test a Stencil component using newSpecPage() to validate rendered HTML output. Shows basic component instantiation and HTML matching.

LANGUAGE: typescript
CODE:
import { newSpecPage } from '@stencil/core/testing';
import { MyCmp } from '../my-cmp';

it('should render my component', async () => {
  const page = await newSpecPage({
    components: [MyCmp],
    html: `<my-cmp></my-cmp>`,
  });
  expect(page.root).toEqualHtml(`
    <my-cmp>Success!</my-cmp>
  `);
});

----------------------------------------

TITLE: Enabling Shadow DOM in Stencil Component
DESCRIPTION: This snippet demonstrates how to enable Shadow DOM for a Stencil component by setting the 'shadow' option to true in the component decorator.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'shadow-component',
  styleUrl: 'shadow-component.css',
  shadow: true,
})
export class ShadowComponent {}

----------------------------------------

TITLE: Nested Component Directory Structure
DESCRIPTION: Example directory structure showing the generated files for a component in a nested folder structure.

LANGUAGE: plain
CODE:
src
└── components
    └── pages
        └── page-home
            ├── page-home.css
            ├── page-home.e2e.ts
            ├── page-home.spec.ts
            └── page-home.tsx

----------------------------------------

TITLE: Documenting @Method Decorator Usage
DESCRIPTION: Shows how to document methods using the @Method decorator and JSDoc comments, which will be included in the generated README.

LANGUAGE: typescript
CODE:
export class MyComponent {
  /**
   * Scroll by a specified X/Y distance in the component.
   *
   * @param x The amount to scroll by on the horizontal axis.
   * @param y The amount to scroll by on the vertical axis.
   * @param duration The amount of time to take scrolling by that amount.
   * @returns the total distance travelled
   */
  @Method()
  async scrollByPoint(x: number, y: number, duration: number): Promise<number> { /* omitted */ }

  // ...
}

----------------------------------------

TITLE: Updating Stencil Core Package
DESCRIPTION: Command to update the @stencil/core package to the latest version in a Stencil project.

LANGUAGE: bash
CODE:
npm install @stencil/core@latest --save-exact

----------------------------------------

TITLE: Basic @Component Decorator Usage in TypeScript
DESCRIPTION: Demonstrates the basic usage of the @Component decorator to create a Stencil component. The decorator takes an object with configuration options, including the required 'tag' property.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Creating New Stencil Project
DESCRIPTION: Command to initialize a new Stencil project using the create-stencil CLI

LANGUAGE: bash
CODE:
npm init stencil

----------------------------------------

TITLE: Requesting Notification Permissions
DESCRIPTION: Example of requesting permission to show notifications using the Notifications API.

LANGUAGE: javascript
CODE:
if ('Notification' in window && 'serviceWorker' in navigator) {
  Notification.requestPermission(status => {
    // status will either be 'default', 'granted' or 'denied'
    console.log(`Notification permissions have been ${status}`);
  });
}

----------------------------------------

TITLE: Listening to Events in Stencil Components
DESCRIPTION: Illustrates how to use the @Listen decorator to handle events in a Stencil component. The example shows a TodoApp component listening for a 'todoCompleted' event.

LANGUAGE: tsx
CODE:
import { Listen } from '@stencil/core';

...
export class TodoApp {

  @Listen('todoCompleted')
  todoCompletedHandler(event: CustomEvent<Todo>) {
    console.log('Received the custom todoCompleted event: ', event.detail);
  }
}

----------------------------------------

TITLE: Using Build Conditionals for Browser-Specific Code in Stencil
DESCRIPTION: This example shows how to use the Build.isBrowser conditional to execute code only in the browser environment and not during prerendering.

LANGUAGE: tsx
CODE:
import { Build } from '@stencil/core';

connectedCallback() {
  // Build.isBrowser is true when running in the
  // browser and false when being prerendered

  if (Build.isBrowser) {
    console.log('running in browser');
  } else {
    console.log('running in node while prerendering');
  }
}

----------------------------------------

TITLE: Using a Custom Form-Associated Component in HTML
DESCRIPTION: This HTML snippet shows how to use a custom form-associated component within a form element.

LANGUAGE: html
CODE:
<form>
  <custom-text-input name="my-custom-input"></custom-text-input>
</form>

----------------------------------------

TITLE: Example of Extended JSON Documentation for Methods
DESCRIPTION: An example of the expanded JSON documentation format for @Method decorators in Stencil v4.0.0. This shows the new 'complexType' field which provides more detailed type information for method parameters and return types.

LANGUAGE: json
CODE:
{
  "complexType": {
    "signature": "(event?: UIEvent) => Promise<any>",
    "parameters": [
      {
        "tags": [
          {
            "name": "param",
            "text": "event The user interface event that called the open."
          }
        ],
        "text": "The user interface event that called the open."
      }
    ],
    "references": {
      "Promise": {
        "location": "global",
        "id": "global::Promise"
      },
      "UIEvent": {
        "location": "global",
        "id": "global::UIEvent"
      },
      "HTMLElement": {
        "location": "global",
        "id": "global::HTMLElement"
      }
    },
    "return": "Promise<any>"
  }
}

----------------------------------------

TITLE: Optimizing CSS with Stencil Compiler
DESCRIPTION: Shows the function signature for optimizing CSS using the Stencil Compiler.

LANGUAGE: typescript
CODE:
optimizeCss(cssInput?: OptimizeCssInput): Promise<OptimizeCssOutput>

----------------------------------------

TITLE: Creating Vue Plugin for Component Registration
DESCRIPTION: Plugin to register custom web components with Vue application.

LANGUAGE: typescript
CODE:
import { Plugin } from 'vue';
import { applyPolyfills, defineCustomElements } from 'stencil-library/loader';

export const ComponentLibrary: Plugin = {
  async install() {
    applyPolyfills().then(() => {
      defineCustomElements();
    });
  },
};

----------------------------------------

TITLE: Using a Functional Component with Props in Stencil
DESCRIPTION: Shows how to use a functional component by passing props as attributes.

LANGUAGE: tsx
CODE:
<Hello name="World" />

----------------------------------------

TITLE: Configuring Primary Package Output Target Validation
DESCRIPTION: This snippet shows how to configure a Stencil project to validate the primary package output target. It sets the 'dist' output target as the primary one for validation and enables the validation feature.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  ...,
  outputTargets: [
    {
      type: 'dist',
      // This flag is what tells Stencil to use this target for validation
      isPrimaryPackageOutputTarget: true,
      ...
    },
    ...
  ],
  // If this is not set, Stencil will not validate any targets
  validatePrimaryPackageOutputTarget: true,
};

----------------------------------------

TITLE: Toggle Button State Management in Stencil
DESCRIPTION: Demonstrates combining @State with @Listen decorator to create a toggle button that responds to click events.

LANGUAGE: tsx
CODE:
import { Component, Listen, State, h } from '@stencil/core';

@Component({
  tag: 'my-toggle-button'
})
export class MyToggleButton {
    @State() isOpen: boolean = true;

    @Listen('click', { capture: true })
    handleClick() {
        this.isOpen = !this.isOpen;
    }

    render() {
        return <button>
          {this.isOpen ? "Open" : "Closed"}
        </button>;
    }
}

----------------------------------------

TITLE: Creating Usage Examples for Stencil Components
DESCRIPTION: Example of a usage markdown file for a Stencil component, which will be included in the JSON documentation.

LANGUAGE: md
CODE:
# How to use `my-button`

A button is often a great help in adding interactivity to an app!

You could use it like this:

```html
<my-button>My Button!</my-button>
```

----------------------------------------

TITLE: Enabling transformAliasedImportPaths in Stencil v3.1.0
DESCRIPTION: Configuration example for enabling the transformAliasedImportPaths feature in Stencil v3.1.0. This feature transforms aliased import paths based on TypeScript path mappings.

LANGUAGE: typescript
CODE:
import { Config } from '@stencil/core';

export const config: Config = {
  transformAliasedImportPaths: true,
  // ...
};

----------------------------------------

TITLE: Setting Destination for Copy Tasks
DESCRIPTION: This snippet shows how to set a custom destination for copy tasks, copying contents from src/files/fonts to public/static/web-fonts.

LANGUAGE: typescript
CODE:
  outputTargets: [
    {
      type: 'www',
      dir: 'public',
      copy: [
        { src: 'files/fonts', dest: 'static/web-fonts' }
      ]
    }
  ]

----------------------------------------

TITLE: TranspileSync Function Declaration
DESCRIPTION: Synchronous version of the transpile function for converting TypeScript to JavaScript

LANGUAGE: tsx
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Setting Asset Path in HTML for Stencil Components
DESCRIPTION: Demonstrates how to set the asset path for Stencil components when importing them via a script tag in HTML.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js"></script>
    <script type="module">
      import { setAssetPath } from 'https://cdn.jsdelivr.net/npm/my-component-library/dist/my-component-library.js';
      setAssetPath(`${window.location.origin}/`);
    </script>
  </head>
  <body>
    <ion-toggle></ion-toggle>
  </body>
</html>

----------------------------------------

TITLE: Typed Functional Component with FunctionalComponent Interface
DESCRIPTION: Shows how to create a typed functional component using Stencil's FunctionalComponent generic type.

LANGUAGE: tsx
CODE:
import { FunctionalComponent, h } from '@stencil/core';

interface HelloProps {
  name: string;
}

export const Hello: FunctionalComponent<HelloProps> = ({ name }) => (
  <h1>Hello, {name}!</h1>
);

----------------------------------------

TITLE: Adding Component Overview in JSDoc
DESCRIPTION: This example shows how to add an overview description for a Stencil component using JSDoc comments. This overview will be included in the generated README.

LANGUAGE: typescript
CODE:
/**
 * A simple component for formatting names
 *
 * This component will do some neat things!
 */
@Component({
  tag: 'my-component',
  shadow: true,
})
export class MyComponent { }

----------------------------------------

TITLE: Component Composition Example
DESCRIPTION: Demonstrates how to compose Stencil components by nesting them within each other.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Listening for appload Event in JavaScript
DESCRIPTION: Shows how to listen for the special 'appload' event on the window object. This event is emitted when the app and all its child components have finished loading. The event detail includes the namespace of the app that emitted the event.

LANGUAGE: javascript
CODE:
window.addEventListener('appload', (event) => {
  console.log(event.detail.namespace);
});

----------------------------------------

TITLE: Setting Custom Elements Export Behavior in Stencil Config
DESCRIPTION: This snippet demonstrates how to set the customElementsExportBehavior option in the Stencil configuration file to control the export behavior of custom elements.

LANGUAGE: typescript
CODE:
// stencil.config.ts
import { Config } from '@stencil/core';

export const config: Config = {
  outputTargets: [
    {
      type: 'dist-custom-elements',
      customElementsExportBehavior: 'default' | 'auto-define-custom-elements' | 'bundle' | 'single-export-module',
    },
    // ...
  ],
  // ...
};

----------------------------------------

TITLE: Executing Static Build in Stencil
DESCRIPTION: Command to enable prerendering during the Stencil build process using the --prerender flag.

LANGUAGE: bash
CODE:
stencil build --prerender

----------------------------------------

TITLE: Basic Stencil Component Declaration
DESCRIPTION: Shows the basic structure of declaring a Stencil component using the @Component decorator with a required tag name.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: TranspileSync Function Signature
DESCRIPTION: Synchronous version of the transpile function for converting Stencil code.

LANGUAGE: tsx
CODE:
transpileSync(code: string, opts?: TranspileOptions): TranspileResults

----------------------------------------

TITLE: Configuring VS Code Debugger for Stencil SSG Prerendering
DESCRIPTION: This JSON configuration sets up VS Code to debug Stencil's prerender process. It specifies the Node.js runtime and provides arguments to run the Stencil prerender command with specific options for debugging.

LANGUAGE: json
CODE:
{
  ...,
  "configurations": [
    ...,
    {
      "type": "node",
      "request": "launch",
      "name": "Prerender",
      "args": [
        "${workspaceFolder}/node_modules/@stencil/core/bin/stencil",
        "prerender",
        "${workspaceFolder}/dist/hydrate/index.js",
        "--max-workers=0",
        "--config=${workspaceFolder}/stencil.config.ts"
      ],
      "protocol": "inspector"
    }
  ]
}

----------------------------------------

TITLE: Example Stencil Stats JSON Output Structure
DESCRIPTION: Shows the complete structure of the generated stats JSON file, including compiler information, app metadata, components, and build formats.

LANGUAGE: json
CODE:
{
  "timestamp": "2021-09-22T17:31:14",
  "compiler": {
    "name": "node",
    "version": "16.9.1"
  },
  "app": {
    "namespace": "ExampleStencilLibrary",
    "fsNamespace": "example-stencil-library",
    "components": 1,
    "entries": 1,
    "bundles": 30,
    "outputs": [
      {
        "name": "dist-collection",
        "files": 3,
        "generatedFiles": [
          "./dist/collection/components/my-component/my-component.js",
           // etc...
        ]
      },
      {
        "name": "dist-lazy",
        "files": 26,
        "generatedFiles": [
          "./dist/cjs/example-stencil-library.cjs.js",
           // etc...
        ]
      },
      {
        "name": "dist-types",
        "files": 1,
        "generatedFiles": [
          "./dist/types/stencil-public-runtime.d.ts"
        ]
      }
    ]
  },
  "options": {
    "minifyJs": true,
    "minifyCss": true,
    "hashFileNames": true,
    "hashedFileNameLength": 8,
    "buildEs5": true
  },
  "formats": {
    "esmBrowser": [
      {
        "key": "my-component.entry",
        "components": [
          "my-component"
        ],
        "bundleId": "p-12cc1edd",
        "fileName": "p-12cc1edd.entry.js",
        "imports": [
          "p-24af5948.js"
        ],
        "originalByteSize": 562
      }
    ],
    "esm": [],
    "es5": [],
    "system": [],
    "commonjs": []
  },
  "components": [
    {
      "tag": "my-component",
      "path": "./src/components/my-component/my-component.js",
      "source": "./src/components/my-component/my-component.tsx",
      "elementRef": null,
      "componentClassName": "MyComponent",
      "assetsDirs": [],
      "dependencies": [],
      "dependents": [],
      "directDependencies": [],
      "directDependents": [],
      "docs": {
        "tags": [],
        "text": ""
      },
      "encapsulation": "shadow",
      "excludeFromCollection": false,
      "events": [],
      "internal": false,
      "legacyConnect": [],
      "legacyContext": [],
      "listeners": [],
      "methods": [],
      "potentialCmpRefs": [],
      "properties": [
        {
          "name": "first",
          "type": "string",
          "attribute": "first",
          "reflect": false,
          "mutable": false,
          "required": false,
          "optional": false,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "docs": {
            "tags": [],
            "text": "The first name"
          },
          "internal": false
        }
      ]
    }
  ],
  "entries": [
    {
      "cmps": [],
      "entryKey": "my-component.entry"
    }
  ],
  "componentGraph": {
    "sc-my-component": [
      "p-24af5948.js"
    ]
  },
  "sourceGraph": {
    "./src/components/my-component/my-component.tsx": [
      "./src/utils/utils"
    ],
    "./src/index.ts": [],
    "./src/utils/utils.ts": []
  },
  "collections": []
}

----------------------------------------

TITLE: E2E Testing with Mocked Helper in Stencil
DESCRIPTION: Example of an E2E test for the 'Foo' component using 'newSpecPage' instead of 'newE2EPage'. This approach allows for mocking in the Node.js context, which is necessary for certain types of mocks in E2E tests.

LANGUAGE: typescript
CODE:
jest.mock('./helpers/utils', () => ({
	getRandomInt: () => 42,
}));

import { newSpecPage } from '@stencil/core/testing';
import { Foo } from './components/foo/foo';

describe('Foo', () => {
	it('bar()', async () => {
		const page = await newSpecPage({
			components: [Foo],
			html: '<foo-component></foo-component>',
		});
		const foo = page.body.querySelector('foo-component');

		if (!foo) {
			throw new Error('Could not find Foo component');
		}

		expect(await foo.bar()).toBe(42);
	});
});

----------------------------------------

TITLE: Running Stencil CLI
DESCRIPTION: Executes the CLI with specified initialization options. Used by Stencil's default bin/stencil file and can be integrated into external implementations.

LANGUAGE: tsx
CODE:
run(init: CliInitOptions): Promise<void>

----------------------------------------

TITLE: Configuring Package.json Test Scripts
DESCRIPTION: Script configuration in package.json to run both Stencil and WebdriverIO tests sequentially.

LANGUAGE: json
CODE:
{
    "scripts:": {
        "test.e2e": "stencil test && wdio run wdio.conf.ts"
    }
}

----------------------------------------

TITLE: Styling with Shadow DOM in Stencil
DESCRIPTION: Shows how to write CSS for a component using Shadow DOM, including the use of the :host pseudo-class selector.

LANGUAGE: css
CODE:
:host {
  color: black;
}

div {
  background: blue;
}

----------------------------------------

TITLE: Monorepo Project Structure Example
DESCRIPTION: Example directory structure for a monorepo containing Stencil and React libraries

LANGUAGE: txt
CODE:
top-most-directory/
└── packages/
    ├── stencil-library/
    │   ├── stencil.config.js
    │   └── src/components/
    └── react-library/
        └── src/
            ├── components/
            └── index.ts

----------------------------------------

TITLE: Defining a Stencil Component with a Method Using TypeScript
DESCRIPTION: Creates a Stencil component 'Foo' with a method 'bar' that uses the getRandomInt utility function.

LANGUAGE: typescript
CODE:
import { h, Component, Method } from '@stencil/core';
import { getRandomInt } from '../../helpers/utils';

@Component({ tag: 'foo-component' })
export class Foo {
	@Method()
	async bar() {
		return getRandomInt(0, 10);
	}

	render() {
		return <div />;
	}
}

----------------------------------------

TITLE: Defining Stencil Component Class in TypeScript
DESCRIPTION: This code shows how to properly define a Stencil component class in TypeScript, demonstrating the use of the @Component decorator and naming conventions for the class.

LANGUAGE: tsx
CODE:
@Component({
  tag: 'ion-button'
})
export class Button { ... }

@Component({
  tag: 'ion-menu'
})
export class Menu { ... }

----------------------------------------

TITLE: Optimizing JavaScript with Stencil Core Compiler
DESCRIPTION: Displays the function signature for optimizeJs(), a utility function used by the compiler to optimize JavaScript based on the specified target.

LANGUAGE: typescript
CODE:
optimizeJs(jsInput?: OptimizeJsInput): Promise<OptimizeJsOutput>

----------------------------------------

TITLE: Using Custom JSDoc Tags
DESCRIPTION: Example of using custom JSDoc tags for additional documentation metadata

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

/**
 * @customDescription This is just the best button around!
 */
@Component({
  tag: 'my-button',
  styleUrl: 'my-button.css',
  shadow: true,
})
export class MyButton {
  render() {
    return <button><slot name="buttonContent"></slot></button>
  }
}

----------------------------------------

TITLE: Configuring HTTPS for Stencil Dev Server in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the Stencil dev server to use HTTPS by providing SSL certificate and key files. It also shows how to set a custom port and reload strategy.

LANGUAGE: typescript
CODE:
import { readFileSync } from 'fs';
import { Config } from '@stencil/core';

export const config: Config = {
  devServer: {
    reloadStrategy: 'pageReload',
    port: 4444,
    https: {
      cert: readFileSync('cert.pem', 'utf8'),
      key: readFileSync('key.pem', 'utf8'),
    },
  },
};

----------------------------------------

TITLE: Setting Custom Destination for Copy Tasks
DESCRIPTION: This snippet shows how to set a custom destination for copy tasks using the 'dest' option. It copies contents from 'src/files/fonts' to 'public/static/web-fonts'.

LANGUAGE: typescript
CODE:
outputTargets: [
  {
    type: 'www',
    dir: 'public',
    copy: [
      { src: 'files/fonts', dest: 'static/web-fonts' }
    ]
  }
]

----------------------------------------

TITLE: Nesting Stencil Components
DESCRIPTION: These snippets show how to create and nest Stencil components. The first component is a simple embedded component, and the second demonstrates how to use it within a parent component.

LANGUAGE: tsx
CODE:
import { Component, Prop, h } from '@stencil/core';

@Component({
  tag: 'my-embedded-component'
})
export class MyEmbeddedComponent {
  @Prop() color: string = 'blue';

  render() {
    return (
      <div>My favorite color is {this.color}</div>
    );
  }
}

LANGUAGE: tsx
CODE:
import { Component, h } from '@stencil/core';

@Component({
  tag: 'my-parent-component'
})
export class MyParentComponent {

  render() {
    return (
      <div>
        <my-embedded-component color="red"></my-embedded-component>
      </div>
    );
  }
}

----------------------------------------

TITLE: Advanced Worker Usage with Direct API Access
DESCRIPTION: Shows how to access the Worker instance directly and create worker pools in Stencil.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';
import { sum } from '../../stuff.worker';
import { worker } from '../../stuff.worker.ts?worker';

@Component({
  tag: 'my-cmp'
})
export class MyApp {
  componentWillLoad() {
    worker.postMessage(['send data manually']);
    const result = await sum(1, 2);
    console.log(result);
  }
}

----------------------------------------

TITLE: Manipulating Children with Utility Methods
DESCRIPTION: Example showing how to use Stencil's utility methods to transform child elements within a functional component.

LANGUAGE: tsx
CODE:
export const AddClass: FunctionalComponent = (_, children, utils) => (
  utils.map(children, child => ({
    ...child,
    vattrs: {
      ...child.vattrs,
      class: `${child.vattrs.class} add-class`
    }
  }
  ))
);

----------------------------------------

TITLE: Valid and Invalid Public Method Implementations in Stencil
DESCRIPTION: This snippet illustrates valid and invalid implementations of public methods using the @Method() decorator in Stencil. Public methods must be async or return a Promise.

LANGUAGE: tsx
CODE:
// VALID: using async
@Method()
async myMethod() {
  return 42;
}

// VALID: using Promise.resolve()
@Method()
myMethod2() {
  return Promise.resolve(42);
}

// VALID: even if it returns nothing, it needs to be async
@Method()
async myMethod3() {
  console.log(42);
}

// INVALID
@Method()
notOk() {
  return 42;
}

----------------------------------------

TITLE: ConnectedCallback Example in Stencil
DESCRIPTION: Demonstrates how connectedCallback is called when a component is added to the DOM, showing that it can be called multiple times if the element is moved.

LANGUAGE: tsx
CODE:
const el = document.createElement('my-cmp');
document.body.appendChild(el);
// connectedCallback() called
// componentWillLoad() called (first time)

el.remove();
// disconnectedCallback()

document.body.appendChild(el);
// connectedCallback() called again, but `componentWillLoad()` is not.

----------------------------------------

TITLE: Setting Global Style in Stencil Configuration
DESCRIPTION: Shows how to configure global styles in the Stencil configuration file (stencil.config.ts).

LANGUAGE: tsx
CODE:
export const config: Config = {
  namespace: 'app',
  globalStyle: 'src/global/global.css',
  outputTarget: [
    {
      type: 'www',
    },
  ],
};

----------------------------------------

TITLE: Basic Stencil Component Declaration
DESCRIPTION: Shows the basic structure of declaring a Stencil component using the @Component decorator.

LANGUAGE: tsx
CODE:
import { Component } from '@stencil/core';

@Component({
  tag: 'todo-list',
  // additional options
})
export class TodoList {
  // implementation omitted
}

----------------------------------------

TITLE: Full Build Example with Stencil Core Compiler
DESCRIPTION: Demonstrates a complete example of running a full build using the Stencil Core Compiler in a NodeJS environment. It includes creating a logger, system, loading config, and executing the build.

LANGUAGE: typescript
CODE:
import { createNodeLogger, createNodeSys } from '@stencil/core/sys/node';
import { createCompiler, loadConfig } from '@stencil/core/compiler';

const logger = createNodeLogger(process);
const sys = createNodeSys(process);
const validated = await loadConfig({
  logger,
  sys,
  config: {
    /* user config */
  },
});
const compiler = await createCompiler(validated.config);
const results = await compiler.build();

----------------------------------------

TITLE: Default Export of Standalone Stencil Components
DESCRIPTION: This JavaScript snippet demonstrates the default export of helper methods for standalone Stencil components using the 'dist-custom-elements' output target.

LANGUAGE: javascript
CODE:
export { setAssetPath, setPlatformOptions } from '@stencil/core/internal/client';

----------------------------------------

TITLE: Generating README Files with Stencil Build Command
DESCRIPTION: Use the Stencil build command to generate README files for components. The --watch flag can be used for automatic updates.

LANGUAGE: bash
CODE:
npx stencil build

LANGUAGE: bash
CODE:
npm stencil build --watch