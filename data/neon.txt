TITLE: PostgreSQL Database Connection Command
DESCRIPTION: Shows how to connect to PostgreSQL database using psql client tool.

LANGUAGE: php
CODE:
psql -U postgres

----------------------------------------

TITLE: Installing Neon Serverless Driver
DESCRIPTION: Command to install the Neon serverless driver using npm package manager

LANGUAGE: shell
CODE:
npm install @neondatabase/serverless

----------------------------------------

TITLE: Connecting to Neon Database from Go Application
DESCRIPTION: This code snippet demonstrates how to establish a connection to a Neon database from a Go application using the sql/db package and the lib/pq driver. It includes error handling and a simple query to fetch the database version.

LANGUAGE: go
CODE:
package main

import (
    "database/sql"
    "fmt"

    _ "github.com/lib/pq"
)

func main() {
    connStr := "postgresql://[user]:[password]@[neon_hostname]/[dbname]?sslmode=require"
    db, err := sql.Open("postgres", connStr)
    if err != nil {
        panic(err)
    }
    defer db.Close()

    var version string
    if err := db.QueryRow("select version()").Scan(&version); err != nil {
        panic(err)
    }

    fmt.Printf("version=%s\n", version)
}

----------------------------------------

TITLE: Identifying Long-Running Queries in Postgres
DESCRIPTION: This SQL query lists the top 100 queries with the longest average execution time, including user ID, query text, execution count, and mean execution time.

LANGUAGE: sql
CODE:
SELECT
    userid,
    query,
    calls,
    mean_exec_time
FROM
    pg_stat_statements
ORDER BY
    mean_exec_time DESC
LIMIT 100;

----------------------------------------

TITLE: Using Multiple CTEs for Complex Statistics
DESCRIPTION: This example demonstrates the use of multiple CTEs to calculate various statistics related to films and customers. It shows how to define and use multiple CTEs in a single query to produce a comprehensive report.

LANGUAGE: SQL
CODE:
WITH film_stats AS (
    -- CTE 1: Calculate film statistics
    SELECT
        AVG(rental_rate) AS avg_rental_rate,
        MAX(length) AS max_length,
        MIN(length) AS min_length
    FROM film
),
customer_stats AS (
    -- CTE 2: Calculate customer statistics
    SELECT
        COUNT(DISTINCT customer_id) AS total_customers,
        SUM(amount) AS total_payments
    FROM payment
)
-- Main query using the CTEs
SELECT
    ROUND((SELECT avg_rental_rate FROM film_stats), 2) AS avg_film_rental_rate,
    (SELECT max_length FROM film_stats) AS max_film_length,
    (SELECT min_length FROM film_stats) AS min_film_length,
    (SELECT total_customers FROM customer_stats) AS total_customers,
    (SELECT total_payments FROM customer_stats) AS total_payments;

----------------------------------------

TITLE: Updating Project Settings with Neon API (Bash)
DESCRIPTION: This snippet demonstrates how to use the Neon API to update a project's maintenance window settings. It specifies the day of the week and time range for updates.

LANGUAGE: bash
CODE:
curl --request PATCH \
     --url https://console.neon.tech/api/v2/projects/fragrant-mode-99795914 \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $NEON_API' \
     --header 'content-type: application/json' \
     --data '
{
  "project": {
    "settings": {
      "maintenance_window": {
        "weekdays": [
          7
        ],
        "start_time": "01:00",
        "end_time": "02:00"
      }
    }
  }
}
'

----------------------------------------

TITLE: Basic PostgreSQL CREATE TABLE Syntax
DESCRIPTION: Shows the fundamental syntax for creating a new table in PostgreSQL, including column definitions and table constraints.

LANGUAGE: sql
CODE:
CREATE TABLE [IF NOT EXISTS] table_name (
   column1 datatype(length) column_constraint,
   column2 datatype(length) column_constraint,
   ...
   table_constraints
);

----------------------------------------

TITLE: Creating Optuna Study for Hyperparameter Tuning in Python
DESCRIPTION: Demonstrates how to create an Optuna study for hyperparameter tuning, using a Neon Postgres database for storage and specifying optimization direction.

LANGUAGE: python
CODE:
if __name__ == "__main__":
    study = optuna.create_study(
        study_name="sklearn_example",
        storage=os.environ["DATABASE_URL"],
        load_if_exists=True,
        direction="maximize",
    )
    study.optimize(objective, n_trials=100)

----------------------------------------

TITLE: Initializing Postgres Vector Store in LlamaIndex
DESCRIPTION: Creates a new PGVectorStore instance using the Postgres connection URL from environment variables. This sets up the vector store for use with LlamaIndex.

LANGUAGE: typescript
CODE:
import 'dotenv/config';
import { PGVectorStore } from 'llamaindex';

export default new PGVectorStore({
  connectionString: process.env.POSTGRES_URL,
});

----------------------------------------

TITLE: Role and Privilege Management Commands
DESCRIPTION: Commands for managing user roles, privileges, and security settings in PostgreSQL.

LANGUAGE: sql
CODE:
CREATE ROLE
GRANT
REVOKE
ALTER ROLE
DROP ROLE
SET ROLE

----------------------------------------

TITLE: Basic Syntax of PostgreSQL Recursive CTE
DESCRIPTION: Demonstrates the basic syntax structure of a recursive common table expression in PostgreSQL. It includes an anchor member, a recursive term, and the final SELECT statement.

LANGUAGE: SQL
CODE:
WITH RECURSIVE cte_name (column1, column2, ...)
AS(
    -- anchor member
    SELECT select_list FROM table1 WHERE condition

    UNION [ALL]

    -- recursive term
    SELECT select_list FROM cte_name WHERE recursive_condition
)
SELECT * FROM cte_name;

----------------------------------------

TITLE: Creating Accounts Table Example
DESCRIPTION: Demonstrates creating a table named 'accounts' with various column types and constraints including PRIMARY KEY, UNIQUE, and NOT NULL constraints.

LANGUAGE: sql
CODE:
CREATE TABLE accounts (
  user_id SERIAL PRIMARY KEY,
  username VARCHAR (50) UNIQUE NOT NULL,
  password VARCHAR (50) NOT NULL,
  email VARCHAR (255) UNIQUE NOT NULL,
  created_at TIMESTAMP NOT NULL,
  last_login TIMESTAMP
);

----------------------------------------

TITLE: Inserting Single Row into PostgreSQL using Python
DESCRIPTION: Function to insert a single vendor record into the vendors table and return the generated vendor_id. Uses psycopg2 for database connection and implements proper error handling and transaction management.

LANGUAGE: python
CODE:
import psycopg2
from config import load_config


def insert_vendor(vendor_name):
    """ Insert a new vendor into the vendors table """

    sql = """INSERT INTO vendors(vendor_name)
             VALUES(%s) RETURNING vendor_id;"""

    vendor_id = None
    config = load_config()

    try:
        with  psycopg2.connect(**config) as conn:
            with  conn.cursor() as cur:
                # execute the INSERT statement
                cur.execute(sql, (vendor_name,))

                # get the generated id back
                rows = cur.fetchone()
                if rows:
                    vendor_id = rows[0]

                # commit the changes to the database
                conn.commit()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        return vendor_id


if __name__ == '__main__':
    insert_vendor("3M Co.")

----------------------------------------

TITLE: Defining Pydantic Models for Product Data Validation
DESCRIPTION: Creates Pydantic models for validating product data, including models for product creation, updates, and stock management.

LANGUAGE: python
CODE:
from pydantic import BaseModel, Field, ConfigDict
from typing import Optional

class Product(BaseModel):
    model_config = ConfigDict(from_attributes=True)
    id: int
    name: str
    price: float
    quantity: int
    description: Optional[str]

class ProductCreate(BaseModel):
    name: str
    price: float = Field(..., ge=0)
    quantity: int = Field(..., ge=0)
    description: Optional[str] = Field(None, max_length=255)

----------------------------------------

TITLE: Configuring Django Database Settings for Neon PostgreSQL
DESCRIPTION: Configuration code for Django's settings.py file to establish a connection with Neon PostgreSQL. Uses environment variables for secure credential management and includes required SSL settings.

LANGUAGE: python
CODE:
# Add these at the top of your settings.py
from os import getenv
from dotenv import load_dotenv

# Replace the DATABASES section of your settings.py with this
DATABASES = {
  'default': {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': getenv('PGDATABASE'),
    'USER': getenv('PGUSER'),
    'PASSWORD': getenv('PGPASSWORD'),
    'HOST': getenv('PGHOST'),
    'PORT': getenv('PGPORT', 5432),
    'OPTIONS': {
      'sslmode': 'require',
    },
    'DISABLE_SERVER_SIDE_CURSORS': True,
  }
}

----------------------------------------

TITLE: Basic Exception Clause Syntax in PL/pgSQL
DESCRIPTION: Demonstrates the fundamental syntax structure for exception handling in PL/pgSQL blocks, showing how to declare conditions and handle multiple exception types.

LANGUAGE: sql
CODE:
<<label>>
declare
   ...
begin
    ...
exception
    when condition [or condition...] then
       handle_exception;
   [when condition [or condition...] then
       handle_exception;]
   [when others then
       handle_other_exceptions;
   ]
end;

----------------------------------------

TITLE: Defining Django Models for AI Marketplace
DESCRIPTION: Creates Python classes representing database tables for ModelAuthor, AIModel, ModelPurchase, UsageScenario, and ModelBenchmark entities.

LANGUAGE: python
CODE:
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator

class ModelAuthor(models.Model):
    name = models.CharField(max_length=200)
    bio = models.TextField()
    contact_info = models.EmailField()
    rating = models.FloatField(validators=[MinValueValidator(0), MaxValueValidator(5)])

    def __str__(self):
        return self.name

class AIModel(models.Model):
    MODEL_TYPES = [
        ('NLP', 'Natural Language Processing'),
        ('CV', 'Computer Vision'),
        ('RL', 'Reinforcement Learning'),
        ('OTHER', 'Other'),
    ]
    FRAMEWORKS = [
        ('PT', 'PyTorch'),
        ('TF', 'TensorFlow'),
        ('KRS', 'Keras'),
        ('OTHER', 'Other'),
    ]
    name = models.CharField(max_length=200)
    model_type = models.CharField(max_length=5, choices=MODEL_TYPES)
    description = models.TextField()
    framework = models.CharField(max_length=5, choices=FRAMEWORKS)
    version = models.CharField(max_length=50)
    download_url = models.URLField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    tags = models.JSONField()
    author = models.ForeignKey(ModelAuthor, on_delete=models.CASCADE, related_name='models_uploaded')

    def __str__(self):
        return f"{self.name} - {self.version}"

class ModelPurchase(models.Model):
    user = models.CharField(max_length=200)  # Simplified for this example
    ai_model = models.ForeignKey(AIModel, on_delete=models.CASCADE)
    purchase_date = models.DateTimeField(auto_now_add=True)
    price_paid = models.DecimalField(max_digits=10, decimal_places=2)
    license_key = models.CharField(max_length=100)
    download_link = models.URLField()

    def __str__(self):
        return f"{self.user} - {self.ai_model.name}"

class UsageScenario(models.Model):
    ai_model = models.ForeignKey(AIModel, on_delete=models.CASCADE, related_name='usage_scenarios')
    title = models.CharField(max_length=200)
    description = models.TextField()
    code_snippet = models.TextField()
    usage_frequency = models.IntegerField(default=0)

    def __str__(self):
        return f"{self.ai_model.name} - {self.title}"

class ModelBenchmark(models.Model):
    ai_model = models.ForeignKey(AIModel, on_delete=models.CASCADE, related_name='benchmarks')
    metric_name = models.CharField(max_length=100)
    value = models.FloatField()
    benchmark_date = models.DateTimeField(auto_now_add=True)
    hardware_used = models.CharField(max_length=200)

    def __str__(self):
        return f"{self.ai_model.name} - {self.metric_name}: {self.value}"

----------------------------------------

TITLE: Using ROW_NUMBER() Window Function in PostgreSQL
DESCRIPTION: This SQL query demonstrates the ROW_NUMBER() window function. It assigns a sequential number to each row within partitions defined by product groups, ordered by price.

LANGUAGE: SQL
CODE:
SELECT
	product_name,
	group_name,
	price,
	ROW_NUMBER () OVER (
		PARTITION BY group_name
		ORDER BY
			price
	)
FROM
	products
INNER JOIN product_groups USING (group_id);

----------------------------------------

TITLE: Implementing Django REST Framework Serializers
DESCRIPTION: Creates serializer classes for each model to handle conversion between complex data types and JSON representations.

LANGUAGE: python
CODE:
from rest_framework import serializers
from .models import ModelAuthor, AIModel, ModelPurchase, UsageScenario, ModelBenchmark

class ModelAuthorSerializer(serializers.ModelSerializer):
    class Meta:
        model = ModelAuthor
        fields = ['id', 'name', 'bio', 'contact_info', 'rating']

class AIModelSerializer(serializers.ModelSerializer):
    author = ModelAuthorSerializer(read_only=True)
    author_id = serializers.PrimaryKeyRelatedField(
        queryset=ModelAuthor.objects.all(), source='author', write_only=True
    )

    class Meta:
        model = AIModel
        fields = ['id', 'name', 'model_type', 'description', 'framework', 'version',
                  'download_url', 'price', 'tags', 'author', 'author_id']

class ModelPurchaseSerializer(serializers.ModelSerializer):
    class Meta:
        model = ModelPurchase
        fields = ['id', 'user', 'ai_model', 'purchase_date', 'price_paid', 'license_key', 'download_link']

class UsageScenarioSerializer(serializers.ModelSerializer):
    class Meta:
        model = UsageScenario
        fields = ['id', 'ai_model', 'title', 'description', 'code_snippet', 'usage_frequency']

class ModelBenchmarkSerializer(serializers.ModelSerializer):
    class Meta:
        model = ModelBenchmark
        fields = ['id', 'ai_model', 'metric_name', 'value', 'benchmark_date', 'hardware_used']

----------------------------------------

TITLE: Retrieving Cities in the United States Using a Subquery
DESCRIPTION: This example uses a subquery to first find the country_id for the United States, then uses that result in the main query to retrieve all cities in that country.

LANGUAGE: SQL
CODE:
SELECT
  city
FROM
  city
WHERE
  country_id = (
    SELECT
      country_id
    FROM
      country
    WHERE
      country = 'United States'
  )
ORDER BY
  city;

----------------------------------------

TITLE: Creating and Populating a Blog Posts Table with tsvector in PostgreSQL
DESCRIPTION: This example shows how to create a table with a tsvector column for full-text search, insert sample data, update the search vector, and create an index for improved search performance.

LANGUAGE: sql
CODE:
CREATE TABLE blog_posts (
    id SERIAL PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    search_vector tsvector
);

INSERT INTO blog_posts (title, content)
VALUES
    ('PostgreSQL Full-Text Search', 'PostgreSQL offers powerful full-text search capabilities using tsvector and tsquery.'),
    ('Indexing in Databases', 'Proper indexing is crucial for database performance. It can significantly speed up query execution.'),
    ('ACID Properties', 'ACID (Atomicity, Consistency, Isolation, Durability) properties ensure reliable processing of database transactions.');

UPDATE blog_posts
SET search_vector = to_tsvector('english', title || ' ' || content);

CREATE INDEX idx_search_vector ON blog_posts USING GIN (search_vector);

----------------------------------------

TITLE: Defining Objective Function for TensorFlow/Keras Model Optimization
DESCRIPTION: Implements an objective function for optimizing hyperparameters of a TensorFlow/Keras convolutional neural network model using Optuna, including number of filters, kernel size, and learning rate.

LANGUAGE: python
CODE:
import urllib
import os

import optuna
from tensorflow.keras.backend import clear_session
from tensorflow.keras.datasets import mnist
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Flatten
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import RMSprop

N_TRAIN_EXAMPLES = 3000
N_VALID_EXAMPLES = 1000
BATCHSIZE = 128
CLASSES = 10
EPOCHS = 10


def objective(trial):
    clear_session()

    (x_train, y_train), (x_valid, y_valid) = mnist.load_data()
    img_x, img_y = x_train.shape[1], x_train.shape[2]
    x_train = x_train.reshape(-1, img_x, img_y, 1)[:N_TRAIN_EXAMPLES].astype("float32") / 255
    x_valid = x_valid.reshape(-1, img_x, img_y, 1)[:N_VALID_EXAMPLES].astype("float32") / 255
    y_train = y_train[:N_TRAIN_EXAMPLES]
    y_valid = y_valid[:N_VALID_EXAMPLES]
    input_shape = (img_x, img_y, 1)

    model = Sequential()
    model.add(
        Conv2D(
            filters=trial.suggest_categorical("filters", [32, 64]),
            kernel_size=trial.suggest_categorical("kernel_size", [3, 5]),
            strides=trial.suggest_categorical("strides", [1, 2]),
            activation=trial.suggest_categorical("activation", ["relu", "linear"]),
            input_shape=input_shape,
        )
    )
    model.add(Flatten())
    model.add(Dense(CLASSES, activation="softmax"))

    learning_rate = trial.suggest_float("learning_rate", 1e-5, 1e-1, log=True)
    model.compile(
        loss="sparse_categorical_crossentropy",
        optimizer=RMSprop(learning_rate=learning_rate),
        metrics=["accuracy"],
    )

    model.fit(
        x_train,
        y_train,
        validation_data=(x_valid, y_valid),
        shuffle=True,
        batch_size=BATCHSIZE,
        epochs=EPOCHS,
        verbose=False,
    )

    score = model.evaluate(x_valid, y_valid, verbose=0)
    return score[1]

if __name__ == "__main__":
    study = optuna.create_study(
        study_name="tfkeras_example",
        storage=os.environ["DATABASE_URL"],
        load_if_exists=True,
        direction="maximize",
    )
    study.optimize(objective, n_trials=100, timeout=600)

----------------------------------------

TITLE: Hashing Password with crypt Function
DESCRIPTION: Example of using the crypt function to hash a password. It uses the gen_salt function to generate a salt for the MD5 algorithm.

LANGUAGE: sql
CODE:
SELECT crypt('user_password', gen_salt('md5'));

----------------------------------------

TITLE: Using date_trunc() with Interval Types
DESCRIPTION: This query demonstrates how date_trunc() can be used with interval data types and for calculating differences between timestamps.

LANGUAGE: sql
CODE:
SELECT
  date_trunc('hour', INTERVAL '2 days 3 hours 40 minutes') AS truncated_interval,
  date_trunc('day', '2024-03-15 23:30:00+00'::TIMESTAMPTZ - '2023-09-14 11:20:00+00'::TIMESTAMPTZ) AS truncated_day;

----------------------------------------

TITLE: Synchronous Python Database Connection
DESCRIPTION: Python script using psycopg2 to connect to Neon database and retrieve time and version information using connection pooling

LANGUAGE: python
CODE:
import os
from psycopg2 import pool
from dotenv import load_dotenv

# Load .env file
load_dotenv()

# Get the connection string from the environment variable
connection_string = os.getenv('DATABASE_URL')

# Create a connection pool
connection_pool = pool.SimpleConnectionPool(
    1,  # Minimum number of connections in the pool
    10,  # Maximum number of connections in the pool
    connection_string
)

# Check if the pool was created successfully
if connection_pool:
    print("Connection pool created successfully")

# Get a connection from the pool
conn = connection_pool.getconn()

# Create a cursor object
cur = conn.cursor()

# Execute SQL commands to retrieve the current time and version from PostgreSQL
cur.execute('SELECT NOW();')
time = cur.fetchone()[0]

cur.execute('SELECT version();')
version = cur.fetchone()[0]

# Close the cursor and return the connection to the pool
cur.close()
connection_pool.putconn(conn)

# Close all connections in the pool
connection_pool.closeall()

# Print the results
print('Current time:', time)
print('PostgreSQL version:', version)

----------------------------------------

TITLE: Two-Table JOIN Example with Customer and Payment
DESCRIPTION: Practical example showing how to join customer and payment tables to retrieve customer information along with their payment details.

LANGUAGE: sql
CODE:
SELECT
  customer.customer_id,
  customer.first_name,
  customer.last_name,
  payment.amount,
  payment.payment_date
FROM
  customer
  INNER JOIN payment ON payment.customer_id = customer.customer_id
ORDER BY
  payment.payment_date;

----------------------------------------

TITLE: Basic PostgreSQL INSERT Statement Syntax
DESCRIPTION: Demonstrates the basic syntax of the PostgreSQL INSERT statement for inserting a new row into a table.

LANGUAGE: sql
CODE:
INSERT INTO table1(column1, column2, …)
VALUES (value1, value2, …);

----------------------------------------

TITLE: Creating a Table with GENERATED ALWAYS AS IDENTITY Column
DESCRIPTION: This snippet demonstrates how to create a table named 'color' with an identity column 'color_id' using the GENERATED ALWAYS AS IDENTITY constraint.

LANGUAGE: sql
CODE:
CREATE TABLE color (
    color_id INT GENERATED ALWAYS AS IDENTITY,
    color_name VARCHAR NOT NULL
);

----------------------------------------

TITLE: Node.js Lambda Function Implementation
DESCRIPTION: AWS Lambda function implementation using Node.js and the pg library to connect to Neon database and retrieve user data. Includes error handling and connection management.

LANGUAGE: javascript
CODE:
'use strict';
const { Client } = require('pg');

let client;

module.exports.getAllUsers = async () => {
  if (!client) {
    console.log('Initializing new database client');
    client = new Client({ connectionString: process.env.DATABASE_URL });
    try {
      await client.connect();
    } catch (error) {
      console.error('Error connecting to the database:', error);
      return {
        statusCode: 500,
        body: JSON.stringify({
          error: 'Failed to connect to the database',
        }),
      };
    }
  }

  try {
    const { rows } = await client.query('SELECT * FROM users');
    return {
      statusCode: 200,
      body: JSON.stringify({
        data: rows,
      }),
    };
  } catch (error) {
    console.error('Error executing query:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({
        error: 'Failed to fetch users',
      }),
    };
  }
};

----------------------------------------

TITLE: Basic PL/pgSQL Block Structure Syntax
DESCRIPTION: Shows the fundamental syntax structure of a PL/pgSQL block including optional label, declaration section, and body section

LANGUAGE: sql
CODE:
[ <<label>> ]
[ declare
    declarations ]
begin
    statements;
    ...
end [ label ];

----------------------------------------

TITLE: Using max() with GROUP BY in SQL
DESCRIPTION: This SQL query demonstrates using max() with GROUP BY to find the largest order amount for each customer. It also includes ORDER BY and LIMIT clauses to show the top 5 customers.

LANGUAGE: sql
CODE:
SELECT customer_id, max(order_amount) AS largest_order
FROM orders
GROUP BY customer_id
ORDER BY largest_order DESC
LIMIT 5;

----------------------------------------

TITLE: Creating Table with Multi-Column Primary Key in PostgreSQL
DESCRIPTION: This example shows how to define a primary key constraint using multiple columns ('order_id' and 'item_no') when creating a table.

LANGUAGE: sql
CODE:
CREATE TABLE order_items(
  order_id INT,
  item_no SERIAL,
  item_description VARCHAR NOT NULL,
  quantity INTEGER NOT NULL,
  price DEC(10, 2),
  PRIMARY KEY (order_id, item_no)
);

----------------------------------------

TITLE: Handling Multiple Exceptions with SQLSTATE Codes
DESCRIPTION: Shows how to handle multiple exceptions using SQLSTATE codes instead of condition names for more specific error handling.

LANGUAGE: sql
CODE:
do
$$
declare
	rec record;
	v_length int = 30;
begin
	-- select a film
	select film_id, title
	into strict rec
	from film
	where length = v_length;

        -- catch exception
	exception
	   when sqlstate 'P0002' then
	      raise exception 'film with length % not found', v_length;
	   when sqlstate 'P0003' then
	      raise exception 'The with length % is not unique', v_length;
end;
$$;

----------------------------------------

TITLE: Ruby Database Connection
DESCRIPTION: Example of connecting to Neon using Ruby with the pg gem.

LANGUAGE: ruby
CODE:
# Ruby example
require 'pg'
require 'dotenv'

# Load environment variables from .env file
Dotenv.load

# Connect to the PostgreSQL database using the environment variable
conn = PG.connect(ENV['DATABASE_URL'])

# Execute a query
conn.exec("SELECT version()") do |result|
  result.each do |row|
    puts "Result = #{row['version']}"
  end
end

# Close the connection
conn.close

----------------------------------------

TITLE: Implementing AI agent with AutoGen and Neon integration
DESCRIPTION: Main Python script (main.py) that sets up AutoGen agents, defines Neon database interaction tools, and orchestrates the AI workflow for retrieving and storing arXiv papers.

LANGUAGE: python
CODE:
import asyncio
import os

import psycopg2
from autogen_agentchat.agents import AssistantAgent, CodeExecutorAgent
from autogen_agentchat.conditions import MaxMessageTermination, TextMentionTermination
from autogen_agentchat.teams import RoundRobinGroupChat
from autogen_agentchat.ui import Console
from autogen_ext.code_executors.local import LocalCommandLineCodeExecutor
from autogen_ext.models.openai import OpenAIChatCompletionClient
from dotenv import load_dotenv
from neon_api import NeonAPI
from psycopg2.extras import RealDictCursor

load_dotenv()

neon_client = NeonAPI(
    api_key=os.environ["NEON_API_KEY"],
)


def create_database(project_name: str) -> str:
    """
    Creates a new Neon project. (this takes less than 500ms)
    Args:
        project_name: Name of the project to create
    Returns:
        the connection URI for the new project
    """
    try:
        project = neon_client.project_create(project={"name": project_name}).project
        connection_uri = neon_client.connection_uri(
            project_id=project.id, database_name="neondb", role_name="neondb_owner"
        ).uri

        return f"Project/database created, connection URI: {connection_uri}"
    except Exception as e:
        return f"Failed to create project: {str(e)}"


def run_sql_query(connection_uri: str, query: str) -> str:
    """
    Runs an SQL query in the Neon database.
    Args:
        connection_uri: The connection URI for the Neon database
        query: The SQL query to execute
    Returns:
        the result of the SQL query
    """
    conn = psycopg2.connect(connection_uri)
    cur = conn.cursor(cursor_factory=RealDictCursor)
    try:
        cur.execute(query)
        conn.commit()

        # Try to fetch results (for SELECT queries)
        try:
            records = cur.fetchall()
            return f"Query result: {records}"
        except psycopg2.ProgrammingError:
            # For INSERT/UPDATE/DELETE operations
            return f"Query executed successfully"
    except Exception as e:
        conn.rollback()
        return f"Failed to execute SQL query: {str(e)}"
    finally:
        cur.close()
        conn.close()


async def main() -> None:
    model_client = OpenAIChatCompletionClient(model="gpt-4o", temperature=0.6)

    assistant = AssistantAgent(
        name="assistant",
        system_message="""You are a helpful AI assistant.
Solve tasks using your coding and language skills.
You are working with two other agents:
1. 'code_executor': Use this agent for non-database coding tasks such as general-purpose scripts, file manipulation, and system commands.
2. 'db_admin': Use this agent for all database-related tasks.
Do NOT generate or suggest any SQL or database connection code yourself. Clearly mention what needs to be done and send the request to 'db_admin'.

In the following cases, suggest python code (in a python coding block) or shell script (in a sh coding block) for the user to execute.
1. When you need to collect info, use the code to output the info you need, for example, browse or search the web, download/read a file, print the content of a webpage or a file, get the current date/time, check the operating system. After sufficient info is printed and the task is ready to be solved based on your language skill, you can solve the task by yourself.
2. When you need to perform some task with code, use the code to perform the task and output the result. Finish the task smartly.

Solve the task step by step if you need to. If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill.
When using code, you must indicate the script type in the code block. The user cannot provide any other feedback or perform any other action beyond executing the code you suggest. The user can't modify your code. So do not suggest incomplete code which requires users to modify. Don't use a code block if it's not intended to be executed by the user.
If you want the user to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don't include multiple code blocks in one response. Do not ask users to copy and paste the result. Instead, use 'print' function for the output when relevant, try to add print statements while sharing code with the user so it will be used for debugging. Check the execution result returned by the user.
If the result indicates there is an error, fix the error and output the code again. Suggest the full code instead of partial code or code changes. If the error can't be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, revisit your assumption, collect additional info you need, and think of a different approach to try.
When you find an answer, verify the answer carefully. Include verifiable evidence in your response if possible.
Reply 'TERMINATE' in the end when the task is completed by everyone.
""",
        model_client=model_client,
    )

    code_executor = CodeExecutorAgent(
        name="code_executor",
        code_executor=LocalCommandLineCodeExecutor(work_dir="coding"),
        sources=["assistant"],
    )

    db_admin = AssistantAgent(
        name="db_admin",
        system_message="""You are a helpful database admin assistant with access to the following tools:
1.  **Project Creation:** Create a new Neon project by providing a project name and receive the connection URI.
2.  **SQL Execution:** Run SQL queries within a Neon database.
Use these tools to fulfill user requests.  For each step, clearly describe the action taken and its result.  Include the tool output directly in the chat.  When multiple SQL queries are required, combine them into a single grouped query.  Present the output of each individual query within the grouped query's response.
""",
        model_client=model_client,
        tools=[create_database, run_sql_query],
    )

    # The termination condition is a combination of text termination and max message termination, either of which will cause the chat to terminate.
    termination = TextMentionTermination("TERMINATE") | MaxMessageTermination(20)

    # The group chat will alternate between the assistant and the code executor.
    group_chat = RoundRobinGroupChat(
        [assistant, code_executor, db_admin], termination_condition=termination
    )

    # `run_stream` returns an async generator to stream the intermediate messages.
    stream = group_chat.run_stream(
        task="Get the 10 most recent Machine Learning papers from arXiv. Print the titles and links to the papers in the chat. Save them in a database named 'arxiv_papers'",
    )
    await Console(stream)


if __name__ == "__main__":
    asyncio.run(main())

----------------------------------------

TITLE: Defining Objective Function for XGBoost Model Optimization
DESCRIPTION: Implements an objective function for optimizing hyperparameters of an XGBoost model using Optuna, including booster type, regularization weights, and tree complexity parameters.

LANGUAGE: python
CODE:
import numpy as np
import os
import optuna
import sklearn.datasets
import sklearn.metrics
from sklearn.model_selection import train_test_split
import xgboost as xgb


def objective(trial):
    (data, target) = sklearn.datasets.load_breast_cancer(return_X_y=True)
    train_x, valid_x, train_y, valid_y = train_test_split(data, target, test_size=0.25)
    dtrain = xgb.DMatrix(train_x, label=train_y)
    dvalid = xgb.DMatrix(valid_x, label=valid_y)

    param = {
        "verbosity": 0,
        "objective": "binary:logistic",
        "tree_method": "exact",
        "booster": trial.suggest_categorical("booster", ["gbtree", "gblinear", "dart"]),
        "lambda": trial.suggest_float("lambda", 1e-8, 1.0, log=True),
        "alpha": trial.suggest_float("alpha", 1e-8, 1.0, log=True),
        "subsample": trial.suggest_float("subsample", 0.2, 1.0),
        "colsample_bytree": trial.suggest_float("colsample_bytree", 0.2, 1.0),
    }

    if param["booster"] in ["gbtree", "dart"]:
        param["max_depth"] = trial.suggest_int("max_depth", 3, 9, step=2)
        param["min_child_weight"] = trial.suggest_int("min_child_weight", 2, 10)
        param["eta"] = trial.suggest_float("eta", 1e-8, 1.0, log=True)
        param["gamma"] = trial.suggest_float("gamma", 1e-8, 1.0, log=True)
        param["grow_policy"] = trial.suggest_categorical("grow_policy", ["depthwise", "lossguide"])

    if param["booster"] == "dart":
        param["sample_type"] = trial.suggest_categorical("sample_type", ["uniform", "weighted"])
        param["normalize_type"] = trial.suggest_categorical("normalize_type", ["tree", "forest"])
        param["rate_drop"] = trial.suggest_float("rate_drop", 1e-8, 1.0, log=True)
        param["skip_drop"] = trial.suggest_float("skip_drop", 1e-8, 1.0, log=True)

    bst = xgb.train(param, dtrain)
    preds = bst.predict(dvalid)
    pred_labels = np.rint(preds)
    accuracy = sklearn.metrics.accuracy_score(valid_y, pred_labels)
    return accuracy

if __name__ == "__main__":
    study = optuna.create_study(
        study_name="xgboost_example",
        storage=os.environ["DATABASE_URL"],
        load_if_exists=True,
        direction="maximize",
    )
    study.optimize(objective, n_trials=100)

----------------------------------------

TITLE: Implementing OpenAI Service in JavaScript
DESCRIPTION: JavaScript class to handle interactions with the Azure OpenAI API, including generating responses based on user messages and conversation history.

LANGUAGE: javascript
CODE:
const axios = require('axios');
require('dotenv').config();

class OpenAIService {
  constructor() {
    if (!process.env.AZURE_OPENAI_API_KEY) {
      throw new Error('AZURE_OPENAI_API_KEY is required');
    }
    if (!process.env.AZURE_OPENAI_ENDPOINT) {
      throw new Error('AZURE_OPENAI_ENDPOINT is required');
    }
    if (!process.env.AZURE_OPENAI_DEPLOYMENT_NAME) {
      throw new Error('AZURE_OPENAI_DEPLOYMENT_NAME is required');
    }

    this.endpoint = process.env.AZURE_OPENAI_ENDPOINT;
    this.apiKey = process.env.AZURE_OPENAI_API_KEY;
    this.deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME;
  }

  async generateResponse(userMessage, conversationHistory = []) {
    try {
      const url = `${this.endpoint}/openai/deployments/${this.deploymentName}/chat/completions?api-version=2024-02-15-preview`;

      const payload = {
        messages: [
          {
            role: 'system',
            content: [
              {
                type: 'text',
                text: 'You are a marketing writing assistant. You help come up with creative content ideas and content like marketing emails, blog posts, tweets, ad copy and product descriptions. You write in a friendly yet professional tone but can tailor your writing style that best works for a user-specified audience. If you do not know the answer to a question, respond by saying "I do not know the answer to your question."\n',
              },
            ],
          },
          ...conversationHistory,
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: userMessage,
              },
            ],
          },
        ],
        temperature: 0.7,
        top_p: 0.95,
        max_tokens: 800,
      };

      const headers = {
        'Content-Type': 'application/json',
        'api-key': this.apiKey,
      };

      const response = await axios.post(url, payload, { headers });

      return response.data.choices[0].message.content;
    } catch (error) {
      console.error('Error calling Azure OpenAI:', error.response?.data || error.message);
      if (error.response?.status === 401) {
        console.error('Authentication failed. Please check your AZURE_OPENAI_API_KEY.');
      }
      throw error;
    }
  }
}

module.exports = new OpenAIService();

----------------------------------------

TITLE: Creating Basic PostgreSQL Sequence
DESCRIPTION: Demonstrates the complete syntax for creating a sequence with various options including increment, min/max values, cycling, and ownership.

LANGUAGE: sql
CODE:
CREATE SEQUENCE [ IF NOT EXISTS ] sequence_name
    [ AS { SMALLINT | INT | BIGINT } ]
    [ INCREMENT [ BY ] increment ]
    [ MINVALUE minvalue | NO MINVALUE ]
    [ MAXVALUE maxvalue | NO MAXVALUE ]
    [ START [ WITH ] start ]
    [ CACHE cache ]
    [ [ NO ] CYCLE ]
    [ OWNED BY { table_name.column_name | NONE } ]

----------------------------------------

TITLE: Using jsonb_populate_record() with Table Data
DESCRIPTION: This complex SQL query demonstrates how to use jsonb_populate_record() in combination with jsonb_build_object() to query and format data from the 'employees' table.

LANGUAGE: sql
CODE:
SELECT
  jsonb_populate_record(
    null :: employees,
    jsonb_build_object(
      'id', id, 'name', name, 'age', age, 'salary',
      salary
    )
  ) AS employees
FROM
  employees;

----------------------------------------

TITLE: Complete Transaction Example in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates a complete transaction process including starting a transaction, inserting a new record, and committing the changes.

LANGUAGE: sql
CODE:
-- start a transaction
BEGIN;

-- insert a new row into the accounts table
INSERT INTO accounts(name,balance)
VALUES('Alice',10000);

-- commit the change (or roll it back later)
COMMIT;

----------------------------------------

TITLE: FastAPI Sensor Data API Implementation
DESCRIPTION: Implementation of FastAPI endpoints for creating sensors, streaming sensor data, and querying daily statistics using TimescaleDB's time-series capabilities.

LANGUAGE: python
CODE:
from fastapi import HTTPException, Path, Body, APIRouter, Depends
from database.postgres import get_postgres
from typing import Union, List
from asyncpg import Pool
from loguru import logger
from models.sensor_models import (
    SensorData,
    SensorDataBatch,
    SensorCreate,
    SensorDailyStatsResponse,
)

sensor_router = APIRouter()

@sensor_router.post("/sensors")
async def create_sensor(
    sensor: SensorCreate = Body(...), db: Pool = Depends(get_postgres)
):
    insert_query = """
    INSERT INTO sensors (sensor_type, description, location)
    VALUES ($1, $2, $3)
    RETURNING sensor_id;
    """
    async with db.acquire() as conn:
        sensor_id = await conn.fetchval(
            insert_query, sensor.sensor_type, sensor.description, sensor.location
        )
    return {"sensor_id": sensor_id, "message": "Sensor created successfully."}

----------------------------------------

TITLE: Kubernetes Job Manifest for Distributed Hyperparameter Tuning
DESCRIPTION: Defines a Kubernetes Job manifest to run the hyperparameter tuning application in parallel across multiple pods, using secrets for database access.

LANGUAGE: yaml
CODE:
---
apiVersion: batch/v1
kind: Job
metadata:
  name: worker
spec:
  parallelism: 3
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: worker
          image: optuna-kubernetes:example
          imagePullPolicy: IfNotPresent
          command:
            - python
            - hyperparam_optimization.py
          envFrom:
            - secretRef:
                name: optuna-postgres-secrets

----------------------------------------

TITLE: Basic Prisma Schema Configuration
DESCRIPTION: Basic datasource configuration in Prisma schema file to connect to a Neon database.

LANGUAGE: typescript
CODE:
datasource db {
  provider = "postgresql"
  url   = env("DATABASE_URL")
}

----------------------------------------

TITLE: Python Script for Chunked Data Transfer from CSV to Postgres
DESCRIPTION: This Python script connects to a Neon database and processes CSV chunks of 5 million rows each. It uses psycopg2 for database operations and implements automatic rollback in case of errors. The script reads chunk files, copies data into the specified table, and manages transactions.

LANGUAGE: python
CODE:
# File: sync_script.py

import glob
import psycopg2
from psycopg2 import sql, DatabaseError

# Database connection parameters
db_params = {
    "dbname": "neondb",
    "user": "neondb_owner",
    "password": "...",
    "host": "ep-...us-east-2.aws.neon.tech",
    "port": 5432
}

tableName = "my_table"

# Read all files that have chunk_ in the present directory
chunk_files = glob.glob("chunk_*")

try:
    # Connect to the database
    conn = psycopg2.connect(**db_params)
    conn.autocommit = False  # Enable manual transaction management
    cur = conn.cursor()

    for chunk in chunk_files:
        with open(chunk, 'r') as f:
            print(f"Processing {chunk}...")
            try:
                cur.copy_expert(sql.SQL("COPY {} FROM STDIN WITH CSV").format(sql.Identifier(tableName)), f)
                # Commit after successfully processing the chunk
                conn.commit()
                print(f"Successfully loaded {chunk}")
            except Exception as e:
                # Rollback all changes if any chunk fails
                conn.rollback()
                print(f"Error processing {chunk}: {e}")
                break  # Stop processing on first error

    cur.close()
    conn.close()
    print("All chunks processed.")

except DatabaseError as db_err:
    print(f"Database connection error: {db_err}")
    if conn:
        conn.rollback()
        conn.close()

----------------------------------------

TITLE: Implementing AuthController for User Registration and Login
DESCRIPTION: Creates an AuthController to handle user registration, login, and logout using Laravel Sanctum.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\ValidationException;

class AuthController extends Controller
{
    public function register(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
        ]);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        $token = $user->createToken('auth_token')->plainTextToken;

        return response()->json([
            'access_token' => $token,
            'token_type' => 'Bearer',
        ]);
    }

    public function login(Request $request)
    {
        $request->validate([
            'email' => 'required|email',
            'password' => 'required',
        ]);

        $user = User::where('email', $request->email)->first();

        if (! $user || ! Hash::check($request->password, $user->password)) {
            throw ValidationException::withMessages([
                'email' => ['The provided credentials are incorrect.'],
            ]);
        }

        $token = $user->createToken('auth_token')->plainTextToken;

        return response()->json([
            'access_token' => $token,
            'token_type' => 'Bearer',
        ]);
    }

    public function logout(Request $request)
    {
        $request->user()->currentAccessToken()->delete();

        return response()->json(['message' => 'Logged out successfully']);
    }
}

----------------------------------------

TITLE: Using EXPLAIN ANALYZE for Query Performance Analysis in Postgres
DESCRIPTION: This example demonstrates how to use EXPLAIN ANALYZE to analyze the execution plan and performance of a SELECT query in Postgres.

LANGUAGE: sql
CODE:
EXPLAIN ANALYZE SELECT * FROM users WHERE id = '1';

----------------------------------------

TITLE: Indexes in Postgres
DESCRIPTION: These SQL examples show how to create and manage indexes in Postgres to improve query performance. It covers creating basic, unique, composite, partial, and expression-based indexes, as well as dropping and reindexing.

LANGUAGE: sql
CODE:
-- Create a basic index on a single column
CREATE INDEX idx_user_email ON users(email);

-- Create a unique index to enforce uniqueness and improve lookup performance
CREATE UNIQUE INDEX idx_unique_username ON users(username);

-- Create a composite index on multiple columns
CREATE INDEX idx_name_date ON events(name, event_date);

-- Create a partial index for a subset of rows that meet a certain condition
CREATE INDEX idx_active_users ON users(email) WHERE active = TRUE;

-- Create an index on an expression (function-based index)
CREATE INDEX idx_lower_email ON users(LOWER(email));

-- Drop an index
DROP INDEX idx_user_email;

-- Create a GIN index on a jsonb column to improve search performance on keys or values within the JSON document
CREATE INDEX idx_user_preferences ON users USING GIN (preferences);

-- Reindex an existing index to rebuild it, useful for improving index performance or reducing physical size
REINDEX INDEX idx_user_email;

-- Create a CONCURRENTLY index, which allows the database to be accessed normally during the indexing operation
CREATE INDEX CONCURRENTLY idx_concurrent_email ON users(email);

----------------------------------------

TITLE: Setting Up SQLAlchemy Database Configuration
DESCRIPTION: Python code to configure SQLAlchemy for connecting to the Neon Postgres database. It sets up the database engine and session management.

LANGUAGE: python
CODE:
# app/database.py

import os

import dotenv
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

dotenv.load_dotenv()
SQLALCHEMY_DATABASE_URL = os.getenv("DATABASE_URL")

engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

----------------------------------------

TITLE: Implementing INSTEAD OF Trigger Function
DESCRIPTION: Defines a complex trigger function that handles INSERT, UPDATE, and DELETE operations on the employee_salaries view.

LANGUAGE: plpgsql
CODE:
CREATE OR REPLACE FUNCTION update_employee_salaries()
RETURNS TRIGGER AS
$$
DECLARE
    p_employee_id INT;
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO employees(name)
        VALUES (NEW.name)
        RETURNING employee_id INTO p_employee_id;

        INSERT INTO salaries(employee_id, effective_date, salary)
        VALUES (p_employee_id, NEW.effective_date, NEW.salary);
    ELSIF TG_OP = 'UPDATE' THEN
        UPDATE salaries
        SET salary = NEW.salary
        WHERE employee_id = NEW.employee_id;
    ELSIF TG_OP = 'DELETE' THEN
        DELETE FROM salaries
        WHERE employee_id = OLD.employee_id;
    END IF;
    RETURN NULL;
END;
$$
LANGUAGE plpgsql;

----------------------------------------

TITLE: Querying Single Column Data
DESCRIPTION: Example of selecting data from a single column (first_name) in the customer table.

LANGUAGE: sql
CODE:
SELECT first_name FROM customer;

----------------------------------------

TITLE: Creating a Role with SQL in Neon
DESCRIPTION: This SQL command shows how to create a new role in Neon with login privileges and a password. The role is created with basic public schema privileges.

LANGUAGE: sql
CODE:
CREATE ROLE <name> WITH LOGIN PASSWORD 'password';

----------------------------------------

TITLE: Initializing Postgres Vector Store with LangChain in TypeScript
DESCRIPTION: This snippet demonstrates how to initialize a Postgres Vector Store using LangChain and OpenAI embeddings. It requires the @langchain/community and @langchain/openai packages, and uses the NeonPostgres and OpenAIEmbeddings classes.

LANGUAGE: typescript
CODE:
// File: vectorStore.ts

import { NeonPostgres } from '@langchain/community/vectorstores/neon';
import { OpenAIEmbeddings } from '@langchain/openai';

const embeddings = new OpenAIEmbeddings({
  dimensions: 512,
  model: 'text-embedding-3-small',
});

export async function loadVectorStore() {
  return await NeonPostgres.initialize(embeddings, {
    connectionString: process.env.POSTGRES_URL as string,
  });
}

// Use in your code (say, in API routes)
const vectorStore = await loadVectorStore();

----------------------------------------

TITLE: Creating a Table for Storing Embeddings in Postgres
DESCRIPTION: This SQL command creates a table named 'items' with a primary key and a column for storing vector embeddings of 1536 dimensions.

LANGUAGE: sql
CODE:
CREATE TABLE items(id BIGSERIAL PRIMARY KEY, embedding VECTOR(1536));

----------------------------------------

TITLE: Accessing PostgreSQL Server
DESCRIPTION: Commands for connecting to PostgreSQL server and databases using psql client

LANGUAGE: csssql
CODE:
psql -U [username];

----------------------------------------

TITLE: Creating Django REST Framework ViewSets
DESCRIPTION: Implements ViewSets for each model to handle API requests, including CRUD operations and custom actions for related data retrieval.

LANGUAGE: python
CODE:
from rest_framework import viewsets
from rest_framework.decorators import action
from rest_framework.response import Response
from .models import ModelAuthor, AIModel, ModelPurchase, UsageScenario, ModelBenchmark
from .serializers import (ModelAuthorSerializer, AIModelSerializer, ModelPurchaseSerializer,
                          UsageScenarioSerializer, ModelBenchmarkSerializer)

class ModelAuthorViewSet(viewsets.ModelViewSet):
    queryset = ModelAuthor.objects.all()
    serializer_class = ModelAuthorSerializer

    @action(detail=True, methods=['get'])
    def models(self, request, pk=None):
        author = self.get_object()
        models = author.models_uploaded.all()
        serializer = AIModelSerializer(models, many=True)
        return Response(serializer.data)

class AIModelViewSet(viewsets.ModelViewSet):
    queryset = AIModel.objects.all()
    serializer_class = AIModelSerializer

    @action(detail=True, methods=['get'])
    def usage_scenarios(self, request, pk=None):
        model = self.get_object()
        scenarios = model.usage_scenarios.all()
        serializer = UsageScenarioSerializer(scenarios, many=True)
        return Response(serializer.data)

    @action(detail=True, methods=['get'])
    def benchmarks(self, request, pk=None):
        model = self.get_object()
        benchmarks = model.benchmarks.all()
        serializer = ModelBenchmarkSerializer(benchmarks, many=True)
        return Response(serializer.data)

class ModelPurchaseViewSet(viewsets.ModelViewSet):
    queryset = ModelPurchase.objects.all()
    serializer_class = ModelPurchaseSerializer

class UsageScenarioViewSet(viewsets.ModelViewSet):
    queryset = UsageScenario.objects.all()
    serializer_class = UsageScenarioSerializer

class ModelBenchmarkViewSet(viewsets.ModelViewSet):
    queryset = ModelBenchmark.objects.all()
    serializer_class = ModelBenchmarkSerializer

----------------------------------------

TITLE: Implementing RLS Policies with SQL
DESCRIPTION: SQL commands to create a 'todos' table and implement Row-Level Security policies. This includes enabling RLS and creating policies for insert, select, update, and delete operations based on the authenticated user's ID.

LANGUAGE: sql
CODE:
-- schema for TODOs table
CREATE TABLE todos (
  id bigint generated by default as identity primary key,
  user_id text not null default (auth.user_id()),
  task text check (char_length(task) > 0),
  is_complete boolean default false,
  inserted_at timestamp not null default now()
);

-- 1st enable row level security for your table
ALTER TABLE todos ENABLE ROW LEVEL SECURITY;

-- 2nd create policies for your table
CREATE POLICY "Individuals can create todos." ON todos FOR INSERT
TO authenticated
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can view their own todos." ON todos FOR SELECT
TO authenticated
USING ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can update their own todos." ON todos FOR UPDATE
TO authenticated
USING ((select auth.user_id()) = user_id)
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can delete their own todos." ON todos FOR DELETE
TO authenticated
USING ((select auth.user_id()) = user_id);

----------------------------------------

TITLE: Executing Parameterized SELECT Query in PostgreSQL with Python
DESCRIPTION: Demonstrates how to execute a SELECT statement with parameters using a cursor object. Placeholders (%s) are used for parameter values to prevent SQL injection.

LANGUAGE: python
CODE:
cur.execute(sql, (value1,value2))

----------------------------------------

TITLE: Creating a GIN Index for Full Text Search in Postgres
DESCRIPTION: This SQL statement creates a GIN (Generalized Inverted Index) index on the searchable column to optimize full text search performance.

LANGUAGE: sql
CODE:
CREATE INDEX searchable_idx ON documents USING GIN(searchable);

----------------------------------------

TITLE: Setting Up Sample Database for MERGE Example
DESCRIPTION: Creates a sample database with products and product_updates tables to demonstrate MERGE operations. Includes initial data insertion for both tables.

LANGUAGE: sql
CODE:
-- Create the main products table
CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    name TEXT UNIQUE,
    price DECIMAL(10,2),
    stock INTEGER,
    status TEXT,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert some initial data
INSERT INTO products (name, price, stock, status) VALUES
    ('Laptop', 999.99, 50, 'active'),
    ('Keyboard', 79.99, 100, 'active'),
    ('Mouse', 29.99, 200, 'active');

-- Create a table for our updates
CREATE TABLE product_updates (
    name TEXT,
    price DECIMAL(10,2),
    stock INTEGER,
    status TEXT
);

-- Insert mixed update data (new products, updates, and discontinuations)
INSERT INTO product_updates VALUES
    ('Laptop', 1099.99, 75, 'active'),      -- Update: price and stock change
    ('Monitor', 299.99, 30, 'active'),      -- Insert: new product
    ('Keyboard', NULL, 0, 'discontinued'),  -- Delete: mark as discontinued
    ('Headphones', 89.99, 50, 'active');    -- Insert: another new product

----------------------------------------

TITLE: Implementing Create/Delete Branch GitHub Actions Workflow for Neon
DESCRIPTION: GitHub Actions workflow that creates and deletes Neon database branches based on pull request events. Includes optional schema diff and migration capabilities.

LANGUAGE: yaml
CODE:
name: Create/Delete Branch for Pull Request

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  setup:
    name: Setup
    outputs:
      branch: ${{ steps.branch_name.outputs.current_branch }}
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch_name
        uses: tj-actions/branch-names@v8

  create_neon_branch:
    name: Create Neon Branch
    outputs:
      db_url: ${{ steps.create_neon_branch_encode.outputs.db_url }}
      db_url_with_pooler: ${{ steps.create_neon_branch_encode.outputs.db_url_with_pooler }}
    needs: setup
    if: |
      github.event_name == 'pull_request' && (
      github.event.action == 'synchronize'
      || github.event.action == 'opened'
      || github.event.action == 'reopened')
    runs-on: ubuntu-latest
    steps:
      - name: Create Neon Branch
        id: create_neon_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch_name: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

  delete_neon_branch:
    name: Delete Neon Branch
    needs: setup
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Delete Neon Branch
        uses: neondatabase/delete-branch-action@v3
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

----------------------------------------

TITLE: Storing Vector Embeddings
DESCRIPTION: Examples of inserting, updating, and deleting vector embeddings.

LANGUAGE: sql
CODE:
INSERT INTO items (embedding) VALUES ('[1,2,3]'), ('[4,5,6]');

----------------------------------------

TITLE: Querying Spatial Data with PostGIS
DESCRIPTION: SQL query to find bus stops within a 2000-meter radius of a specified point. Uses the ST_DWithin function for distance calculation and filtering.

LANGUAGE: sql
CODE:
SELECT name FROM bus_stops
WHERE ST_DWithin(location, ST_Point(-73.95, 40.7305)::GEOGRAPHY, 2000);

----------------------------------------

TITLE: Calling PostgreSQL Stored Procedure with INOUT Parameters
DESCRIPTION: This snippet shows how to call a stored procedure with INOUT parameters in PostgreSQL. It demonstrates both a simple CALL statement and how to use the procedure within an anonymous block, passing variables for the INOUT parameters.

LANGUAGE: sql
CODE:
call sp_name();

LANGUAGE: sql
CODE:
do
$$
   declare
      v_name1 type;
      v_name2 type;
   begin
      -- call the stored procedure with inout parameters
      call sp_name(v_name1, v_name2);

      -- process v_name1, v_name2
   end;
$$;

----------------------------------------

TITLE: Basic PostgreSQL GROUP BY Syntax
DESCRIPTION: Demonstrates the fundamental syntax structure for using GROUP BY in PostgreSQL queries with aggregate functions.

LANGUAGE: sql
CODE:
SELECT
   column_1,
   column_2,
   ...,
   aggregate_function(column_3)
FROM
   table_name
GROUP BY
   column_1,
   column_2,
   ...;

----------------------------------------

TITLE: Querying Vector Embeddings
DESCRIPTION: Examples of vector similarity search using different distance functions.

LANGUAGE: sql
CODE:
SELECT * FROM items ORDER BY embedding <-> '[3,1,2]' LIMIT 5;

----------------------------------------

TITLE: Performing Full Text Search in Postgres
DESCRIPTION: These SQL queries demonstrate how to perform full text searches using the @@ operator and to_tsquery() function. They show matching based on word stems and variations.

LANGUAGE: sql
CODE:
SELECT
    *
  FROM documents
  WHERE searchable @@ to_tsquery('english', 'flavorful');

SELECT
    *
  FROM documents
  WHERE searchable @@ to_tsquery('english', 'searching');

----------------------------------------

TITLE: Creating a PostgreSQL Materialized View
DESCRIPTION: Demonstrates the syntax for creating a materialized view in PostgreSQL, including options for loading data and conditional creation.

LANGUAGE: SQL
CODE:
CREATE MATERIALIZED VIEW [IF NOT EXISTS] view_name
AS
query
WITH [NO] DATA;

----------------------------------------

TITLE: RLS-Based Authorization Implementation
DESCRIPTION: Shows simplified backend code after implementing RLS-based authorization.

LANGUAGE: typescript
CODE:
export async function insertTodo({ newTodo }: { newTodo: string }) {
  const { getToken } = auth();
  const authToken = await getToken();
  const db = drizzle(process.env.DATABASE_AUTHENTICATED_URL!, { schema });

  return db.$withAuth(authToken).insert(schema.todos).values({
    task: newTodo,
    isComplete: false,
  });
}

----------------------------------------

TITLE: Defining a PostgreSQL Common Table Expression (CTE)
DESCRIPTION: This snippet demonstrates the basic syntax for creating a common table expression in PostgreSQL. It shows how to define a CTE with an optional column list and use it in a main query.

LANGUAGE: SQL
CODE:
WITH cte_name (column1, column2, ...) AS (
    -- CTE query
    SELECT ...
)
-- Main query using the CTE
SELECT ...
FROM cte_name;

----------------------------------------

TITLE: Image Indexing API Endpoint in Astro with LlamaIndex
DESCRIPTION: This API endpoint handles image indexing using LlamaIndex. It receives an array of image URLs, converts them to ImageDocument objects, and indexes them in the Postgres vector store using ClipEmbedding for feature extraction.

LANGUAGE: typescript
CODE:
import { v4 as uuidv4 } from 'uuid';
import imageVectorStore from '@/neon';
import type { APIContext } from 'astro';
import { ClipEmbedding, ImageDocument, Settings, VectorStoreIndex } from 'llamaindex';

Settings.embedModel = new ClipEmbedding();

export async function POST({ request }: APIContext) {
  const { images = [] }: { images: string[] } = await request.json();
  const documents = images.map(
    (imageURL: string) =>
      new ImageDocument({
        id_: uuidv4(),
        image: new URL(imageURL),
        metadata: { url: imageURL },
      })
  );
  await VectorStoreIndex.fromDocuments(documents, { imageVectorStore });
}

----------------------------------------

TITLE: Setting Up Same-Branch Database Replication
DESCRIPTION: SQL commands for configuring logical replication between databases on the same Neon project branch.

LANGUAGE: sql
CODE:
CREATE PUBLICATION my_publication FOR TABLES <table1>, <table2>;
SELECT pg_create_logical_replication_slot('my_replication_slot', 'pgoutput');

LANGUAGE: sql
CODE:
CREATE SUBSCRIPTION my_subscription
    CONNECTION 'connection_string'
    PUBLICATION my_publication with (create_slot = false, slot_name = 'my_replication_slot');

----------------------------------------

TITLE: Defining Sequelize Model for Book
DESCRIPTION: JavaScript code defining the Book model using Sequelize, including its relationship with the Author model.

LANGUAGE: javascript
CODE:
// models/book.js

'use strict';
const { Model } = require('sequelize');

module.exports = (sequelize, DataTypes) => {
  class Book extends Model {
    static associate(models) {
      Book.belongsTo(models.Author, {
        foreignKey: 'authorId',
        as: 'author',
        onDelete: 'CASCADE',
      });
    }
  }
  Book.init(
    {
      title: { type: DataTypes.STRING, allowNull: false },
      authorId: { type: DataTypes.INTEGER, allowNull: false },
    },
    {
      sequelize,
      modelName: 'Book',
    }
  );
  return Book;
};

----------------------------------------

TITLE: Reverse Image Search User Interface in Astro
DESCRIPTION: This HTML and JavaScript code creates a user interface for uploading images and displaying search results. It includes a form for file upload and a script that handles form submission, sends the image to the query API, and dynamically renders the search results.

LANGUAGE: html
CODE:
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content="{Astro.generator}" />
    <title>Astro</title>
  </head>
  <body class="flex flex-col items-center">
    <form class="flex flex-col" id="fileUploadForm" enctype="multipart/form-data">
      <input
        class="rounded border px-4 py-3"
        type="file"
        id="fileInput"
        name="file"
        accept="image/*"
      />
      <button id="query" class="mt-3 max-w-max rounded bg-black px-4 py-1 text-white" type="submit">
        Query &rarr;
      </button>
    </form>
    <script>
      document.getElementById('fileUploadForm')?.addEventListener('submit', async function (event) {
        event.preventDefault()
        document.getElementById('searchResults')?.remove()
        const formData = new FormData()
        const fileInput = document.getElementById('fileInput') as HTMLInputElement
        if (!fileInput || !fileInput.files || fileInput.files.length === 0) return
        formData.append('file', fileInput.files[0])
        const queryCall = await fetch('/api/query', { method: 'POST', body: formData })
        const queryResp = await queryCall.json()
        const searchResultsDiv = document.createElement('div')
        searchResultsDiv.setAttribute('id', 'searchResults')
        queryResp.forEach((eachImage: string) => {
          const img = document.createElement('img')
          img.setAttribute('class', 'size-100')
          img.setAttribute('src', eachImage)
          searchResultsDiv.append(img)
        })
        document.body.append(searchResultsDiv)
      })
    </script>
  </body>
</html>

----------------------------------------

TITLE: Reverse Image Search API Endpoint in Astro with LlamaIndex
DESCRIPTION: This API endpoint handles reverse image search using LlamaIndex. It processes an uploaded image file, extracts its embedding using ClipEmbedding, queries the Postgres vector store for similar images, and returns the URLs of relevant images based on a similarity threshold.

LANGUAGE: typescript
CODE:
import type { APIContext } from 'astro';
import neonStore from '@/neon';
import { ClipEmbedding, VectorStoreQueryMode } from 'llamaindex';

export async function POST({ request }: APIContext) {
  const data = await request.formData();
  const file = data.get('file') as File;
  if (!file) return new Response(null, { status: 400 });
  const fileBuffer = await file.arrayBuffer();
  const fileBlob = new Blob([fileBuffer], { type: file.type });
  const image_embedding = await new ClipEmbedding().getImageEmbedding(fileBlob);
  const { similarities, nodes } = await neonStore.query({
    similarityTopK: 100,
    queryEmbedding: image_embedding,
    mode: VectorStoreQueryMode.DEFAULT,
  });
  const relevantImages: string[] = [];
  if (nodes) {
    similarities.forEach((similarity: number, index: number) => {
      if (100 - similarity > 90) {
        const document = nodes[index];
        relevantImages.push(document.metadata.url);
      }
    });
  }
  return new Response(JSON.stringify(relevantImages), {
    headers: { 'Content-Type': 'application/json' },
  });
}

----------------------------------------

TITLE: Defining PL/pgSQL Function Structure for Returning Tables
DESCRIPTION: Basic structure for creating a PL/pgSQL function that returns a table. This snippet outlines the syntax for defining the function, its parameters, and the table structure it will return.

LANGUAGE: sql
CODE:
create or replace function function_name (
   parameter_list
)
returns table ( column_list )
language plpgsql
as
$$
declare
-- variable declaration
begin
-- body
end;
$$;

----------------------------------------

TITLE: Defining PostgreSQL LAST_VALUE Function Syntax
DESCRIPTION: This snippet shows the syntax of the LAST_VALUE() function in PostgreSQL, including its parameters and clauses for partitioning and ordering the result set.

LANGUAGE: css
CODE:
LAST_VALUE ( expression )
OVER (
    [PARTITION BY partition_expression, ... ]
    ORDER BY sort_expression [ASC | DESC], ...
)

----------------------------------------

TITLE: Basic PostgreSQL Self-Join Syntax
DESCRIPTION: Demonstrates the basic syntax for performing a self-join using INNER JOIN and LEFT JOIN.

LANGUAGE: sql
CODE:
SELECT select_list
FROM table_name t1
INNER JOIN table_name t2 ON join_predicate;

LANGUAGE: sql
CODE:
SELECT select_list
FROM table_name t1
LEFT JOIN table_name t2 ON join_predicate;

----------------------------------------

TITLE: Using AVG() as a Window Function in PostgreSQL
DESCRIPTION: This SQL query demonstrates the use of AVG() as a window function. It calculates the average price for each product group and displays it alongside individual product details.

LANGUAGE: SQL
CODE:
SELECT
	product_name,
	price,
	group_name,
	AVG (price) OVER (
	   PARTITION BY group_name
	)
FROM
	products
	INNER JOIN
		product_groups USING (group_id);

----------------------------------------

TITLE: Prisma Schema with Direct URL Configuration
DESCRIPTION: Prisma schema configuration that includes both pooled and direct database connections for compatibility with Prisma Migrate.

LANGUAGE: typescript
CODE:
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

----------------------------------------

TITLE: Implementing Express API with Prisma Queries
DESCRIPTION: Express.js server implementation with API endpoints to query authors and books using Prisma Client. This code sets up routes for retrieving all authors and books by author ID.

LANGUAGE: javascript
CODE:
import express from 'express';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();
const app = express();
const port = process.env.PORT || 3000;

app.get('/', async (req, res) => {
  res.send('Hello World! This is a book catalog.');
});

app.get('/authors', async (req, res) => {
  const authors = await prisma.author.findMany();
  res.json(authors);
});

app.get('/books/:author_id', async (req, res) => {
  const authorId = parseInt(req.params.author_id);
  const books = await prisma.book.findMany({
    where: {
      authorId: authorId,
    },
  });
  res.json(books);
});

// Start the server
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});

----------------------------------------

TITLE: Implementing Express.js API with Sequelize and Neon Postgres
DESCRIPTION: JavaScript code for setting up an Express.js server with API endpoints that query the Neon Postgres database using Sequelize models.

LANGUAGE: javascript
CODE:
// index.js

const express = require('express');
const { Sequelize, DataTypes } = require('sequelize');
const { config } = require('dotenv');

config();
if (!process.env.DATABASE_URL) {
  throw new Error('DATABASE_URL is not set');
}

const sequelize = new Sequelize(process.env.DATABASE_URL, {
  dialectOptions: { ssl: { require: true } },
});

// Set up the models
const Author = require('./models/author')(sequelize, DataTypes);
const Book = require('./models/book')(sequelize, DataTypes);

// Create a new Express application
const app = express();
const port = process.env.PORT || 3000;

app.get('/', async (req, res) => {
  res.send('Hello World! This is a book catalog.');
});

app.get('/authors', async (req, res) => {
  try {
    const authors = await Author.findAll();
    res.json(authors);
  } catch (error) {
    console.error('Error fetching authors:', error);
    res.status(500).send('Error fetching authors');
  }
});

app.get('/books/:author_id', async (req, res) => {
  const authorId = parseInt(req.params.author_id);
  try {
    const books = await Book.findAll({
      where: {
        authorId: authorId,
      },
    });
    res.json(books);
  } catch (error) {
    console.error('Error fetching books for author:', error);
    res.status(500).send('Error fetching books for author');
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});

----------------------------------------

TITLE: Establishing PostgreSQL Connection in Python
DESCRIPTION: Demonstrates how to create a connection to a PostgreSQL database using psycopg2. The connection object is used for executing SQL queries.

LANGUAGE: python
CODE:
conn = psycopg2.connect(config)

----------------------------------------

TITLE: Creating an SQLAlchemy engine for Neon in Python
DESCRIPTION: This Python script demonstrates how to create an SQLAlchemy engine that connects to a Neon database. It includes setting up the connection string with the necessary parameters such as username, password, host, and database name.

LANGUAGE: python
CODE:
from sqlalchemy import create_engine

USERNAME = "alex"
PASSWORD = "AbC123dEf"
HOST = "ep-cool-darkness-123456.us-east-2.aws.neon.tech"
DATABASE = "dbname"

conn_str = f'postgresql://{USERNAME}:{PASSWORD}@{HOST}/{DATABASE}?sslmode=require'

engine = create_engine(conn_str)

----------------------------------------

TITLE: Configuring Laravel Environment for Neon Postgres
DESCRIPTION: Environment configuration settings for connecting Laravel to a Neon Postgres database. Includes database connection parameters and credentials setup.

LANGUAGE: env
CODE:
DB_CONNECTION=pgsql
DB_HOST=your-neon-hostname.neon.tech
DB_PORT=5432
DB_DATABASE=<your-database-name>
DB_USERNAME=<your-username>
DB_PASSWORD=<your-password>

----------------------------------------

TITLE: Configuring Vercel Build Commands for Schema Migrations
DESCRIPTION: This command shows an example of Vercel build commands that include applying Prisma migrations, generating the Prisma client, and building the Next.js application for preview deployments.

LANGUAGE: bash
CODE:
npx prisma migrate deploy && npx prisma generate && next build

----------------------------------------

TITLE: Adding Auto-Incremented Primary Key to Existing Table in PostgreSQL
DESCRIPTION: This example shows how to add an auto-incremented primary key column to an existing table and set it as the primary key.

LANGUAGE: sql
CODE:
CREATE TABLE vendors (
  name VARCHAR(255)
);

INSERT INTO vendors (name)
VALUES
  ('Microsoft'),
  ('IBM'),
  ('Apple'),
  ('Samsung')
RETURNING *;

ALTER TABLE vendors
ADD COLUMN vendor_id SERIAL PRIMARY KEY;

----------------------------------------

TITLE: Django Database Configuration with Read Replicas
DESCRIPTION: Python configuration for Django showing how to set up primary and replica database connections

LANGUAGE: python
CODE:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'your_database_name',
        'USER': 'your_username',
        'PASSWORD': 'your_password',
        'HOST': 'your_primary_host',
        'PORT': '5432',
    },
    'replica': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'your_database_name',
        'USER': 'your_username',
        'PASSWORD': 'your_password',
        'HOST': 'your_read_replica_host',
        'PORT': '5432',
    }
}
DATABASE_ROUTERS = ['notes.db_router.PrimaryReplicaRouter']

----------------------------------------

TITLE: Complex Transaction Example with Parts and Vendors
DESCRIPTION: Implements a complete transaction example that adds parts and assigns vendors, demonstrating error handling and transaction management

LANGUAGE: python
CODE:
import psycopg2
from config import load_config


def add_part(part_name, vendor_list):
    # statement for inserting a new row into the parts table
    insert_part = "INSERT INTO parts(part_name) VALUES(%s) RETURNING part_id;"

    # statement for inserting a new row into the vendor_parts table
    assign_vendor = "INSERT INTO vendor_parts(vendor_id,part_id) VALUES(%s,%s)"

    conn = None
    config = load_config()

    try:
        with psycopg2.connect(**config) as conn:
            with conn.cursor() as cur:
                # insert a new part
                cur.execute(insert_part, (part_name,))

                # get the part id
                row = cur.fetchone()
                if row:
                    part_id = row[0]
                else:
                    raise Exception('Could not get the part id')

                # assign parts provided by vendors
                for vendor_id in vendor_list:
                    cur.execute(assign_vendor, (vendor_id, part_id))

                # commit the transaction
                conn.commit()
    except (Exception, psycopg2.DatabaseError) as error:
        if conn:
            conn.rollback()

        print(error)

if __name__ == '__main__':
    add_part('SIM Tray', (1, 2))
    add_part('Speaker', (3, 4))
    add_part('Vibrator', (5, 6))
    add_part('Antenna', (6, 7))
    add_part('Home Button', (1, 5))
    add_part('LTE Modem', (1, 5))

----------------------------------------

TITLE: Updating JSONB Data in Postgres
DESCRIPTION: This SQL snippet shows how to update specific properties within a JSONB document using the jsonb_set() function. It updates the 'age' property within the 'author' object.

LANGUAGE: sql
CODE:
UPDATE documents
SET data = jsonb_set(data, '{author,age}', '35'::jsonb)
WHERE data->'author'->>'name' = 'John Smith';

----------------------------------------

TITLE: Function Call Using Positional Notation
DESCRIPTION: Example of calling a function using positional notation where arguments are supplied in the order defined in the function signature.

LANGUAGE: sql
CODE:
select get_film_count(40,90);

----------------------------------------

TITLE: Creating Table with NOT NULL Constraints
DESCRIPTION: Shows how to create a table with NOT NULL constraints on specific columns along with other constraints like CHECK and PRIMARY KEY.

LANGUAGE: sql
CODE:
CREATE TABLE invoices(
  id SERIAL PRIMARY KEY,
  product_id INT NOT NULL,
  qty numeric NOT NULL CHECK(qty > 0),
  net_price numeric CHECK(net_price > 0)
);

----------------------------------------

TITLE: Creating HNSW Index for pgvector
DESCRIPTION: This SQL command creates an HNSW (Hierarchical Navigable Small World) index on the 'embedding' column of the 'items' table. It sets the 'm' parameter to 16 and 'ef_construction' to 64, which influence the index quality and construction speed.

LANGUAGE: sql
CODE:
CREATE INDEX ON items USING hnsw (embedding vector_l2_ops) WITH (m = 16, ef_construction = 64);

----------------------------------------

TITLE: Connecting to Neon Database using Rust and PostgreSQL
DESCRIPTION: This code snippet demonstrates how to establish a connection to a Neon PostgreSQL database using Rust. It utilizes the postgres, openssl, and postgres_openssl crates to create a secure SSL connection and execute a simple query.

LANGUAGE: rust
CODE:
use postgres::Client;
use openssl::ssl::{SslConnector, SslMethod};
use postgres_openssl::MakeTlsConnector;
use std::error;

fn main() -> Result<(), Box<dyn error::Error>> {
    let builder = SslConnector::builder(SslMethod::tls())?;
    let connector = MakeTlsConnector::new(builder.build());

    let mut client = Client::connect("postgresql://[user]:[password]@[neon_hostname]/[dbname]?sslmode=require", connector)?;

    for row in client.query("SELECT 42", &[])? {
        let ret : i32 = row.get(0);
        println!("Result = {}", ret);
    }

    Ok(())
}

----------------------------------------

TITLE: Basic PostgreSQL INNER JOIN Syntax
DESCRIPTION: Shows the fundamental syntax for joining two tables using INNER JOIN clause. Demonstrates how to specify tables, join conditions, and select columns from both tables.

LANGUAGE: sql
CODE:
SELECT
  select_list
FROM
  table1
INNER JOIN table2
  ON table1.column_name = table2.column_name;

----------------------------------------

TITLE: Basic PostgreSQL LEFT JOIN Syntax
DESCRIPTION: Demonstrates the basic syntax for using a LEFT JOIN in PostgreSQL to join two tables based on a matching column.

LANGUAGE: sql
CODE:
SELECT
  select_list
FROM
  table1
LEFT JOIN table2
  ON table1.column_name = table2.column_name;

----------------------------------------

TITLE: Finding Most Recent Order Date with max() in SQL
DESCRIPTION: This SQL query uses the max() function to find the most recent order date in the 'orders' table. It shows how max() can be used with date/time columns.

LANGUAGE: sql
CODE:
SELECT max(order_date) AS latest_order_date
FROM orders;

----------------------------------------

TITLE: Connection Management in Postgres
DESCRIPTION: These SQL queries demonstrate how to monitor and manage database connections in Postgres. They cover checking active connections, maximum connection limits, connection usage percentage, connections by database and user, and identifying long-running or idle connections.

LANGUAGE: sql
CODE:
-- Get the number of active connections
SELECT COUNT(*) FROM pg_stat_activity WHERE state='active';

-- Get the maximum number of connections
SHOW max_connections;

-- Get the percentage of maximum connections in use
SELECT (SELECT SUM(numbackends) FROM pg_stat_database) / (SELECT
setting::float FROM pg_settings WHERE name = 'max_connections');

-- Get the current number of connections for a database
SELECT COUNT(*) FROM pg_stat_activity WHERE datname = 'your_database_name';

-- Check for connections by user
SELECT usename, count(*)
FROM pg_stat_activity
GROUP BY usename;

-- Find long-running or idle connections
SELECT
  pid,
  now() - pg_stat_activity.query_start AS duration,
  query,
  state
FROM
  pg_stat_activity
WHERE
  (now() - pg_stat_activity.query_start) > INTERVAL '1 minute'
  OR state = '<idle>';

-- Cancel a query
SELECT pg_cancel_backend(pid)
FROM pg_stat_activity
WHERE datname = 'databasename'
  AND pid <> pg_backend_pid();

-- Terminate a session
SELECT pg_terminate_backend(pid)
FROM pg_stat_activity
WHERE datname = 'databasename'
  AND pid <> pg_backend_pid()
  AND state = 'idle';

-- Identify long-running queries and users
SELECT pid, usename, client_addr, application_name, state, query, now() - query_start AS duration
FROM pg_stat_activity
WHERE state <> 'idle'
ORDER BY duration DESC;

----------------------------------------

TITLE: Creating Table with SELECT INTO
DESCRIPTION: Creates a new table 'film_r' containing films with R rating and 5-day rental duration from the film table. Demonstrates practical usage of SELECT INTO with WHERE conditions.

LANGUAGE: sql
CODE:
SELECT
    film_id,
    title,
    rental_rate
INTO TABLE film_r
FROM
    film
WHERE
    rating = 'R'
AND rental_duration = 5
ORDER BY
    title;

----------------------------------------

TITLE: Creating a Table with CHECK Constraint in PostgreSQL
DESCRIPTION: Demonstrates how to create a new table with a CHECK constraint on the salary column to ensure it's always positive.

LANGUAGE: sql
CODE:
CREATE TABLE employees (
  id SERIAL PRIMARY KEY,
  first_name VARCHAR (50) NOT NULL,
  last_name VARCHAR (50) NOT NULL,
  birth_date DATE NOT NULL,
  joined_date DATE NOT NULL,
  salary numeric CHECK(salary > 0)
);

----------------------------------------

TITLE: Creating a Sample PostgreSQL Materialized View
DESCRIPTION: Example of creating a materialized view named 'rental_by_category' using tables from the sample database, demonstrating complex join operations and aggregation.

LANGUAGE: SQL
CODE:
CREATE MATERIALIZED VIEW rental_by_category
AS
 SELECT c.name AS category,
    sum(p.amount) AS total_sales
   FROM (((((payment p
     JOIN rental r ON ((p.rental_id = r.rental_id)))
     JOIN inventory i ON ((r.inventory_id = i.inventory_id)))
     JOIN film f ON ((i.film_id = f.film_id)))
     JOIN film_category fc ON ((f.film_id = fc.film_id)))
     JOIN category c ON ((fc.category_id = c.category_id)))
  GROUP BY c.name
  ORDER BY sum(p.amount) DESC
WITH NO DATA;

----------------------------------------

TITLE: Implementing Clerk Authentication Middleware
DESCRIPTION: TypeScript code to set up Clerk authentication middleware for protecting routes in a Next.js application.

LANGUAGE: typescript
CODE:
import { clerkMiddleware } from '@clerk/nextjs/server';

export default clerkMiddleware();

export const config = {
  matcher: [
    '/((?!_next|[^?]*\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    '/(api|trpc)(.*)',
  ],
};

----------------------------------------

TITLE: Next.js Server Components Database Integration
DESCRIPTION: Implementation of database connections in Next.js server components using different PostgreSQL clients.

LANGUAGE: javascript
CODE:
import { Pool } from 'pg';

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: true,
});

async function getData() {
  const client = await pool.connect();
  try {
    const { rows } = await client.query('SELECT version()');
    return rows[0].version;
  } finally {
    client.release();
  }
}

export default async function Page() {
  const data = await getData();
  return <>{data}</>;
}

----------------------------------------

TITLE: Connecting to PostgreSQL Database
DESCRIPTION: Commands for connecting to PostgreSQL server and switching to the dvdrental database.

LANGUAGE: bash
CODE:
psql -U postgres

LANGUAGE: sql
CODE:
\c dvdrental

----------------------------------------

TITLE: Implementing Custom JWT Authentication in a Hono API with Neon and Drizzle
DESCRIPTION: This example combines JWT creation, JWKS endpoint setup, and database querying with custom JWT authentication in a Hono API. It demonstrates the full flow of using custom JWTs with Neon RLS in a web application context.

LANGUAGE: typescript
CODE:
import { Hono } from 'hono';
import { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';
import { users } from './db/schema';
import { SignJWT, JWK } from 'jose';
import fs from 'fs/promises';

async function createJWT(privateKey: JWK, userId: string, tenantId: string) {
  // ...
}

app.get('/.well-known/jwks.json', async (c) => {
  // ...
});

app.get('/api/users', async (c) => {
  const privateKey = JSON.parse(c.env.PRIVATE_KEY);

  const authToken = await createJWT(privateKey, 'user-123', 'tenant-456');

  const db = drizzle(
    neon(c.env.DATABASE_AUTHENTICATED_URL, {
      authToken,
    })
  );

  const fetchedUsers = await db.select().from(users);
  return c.json({ users: fetchedUsers });
});

export default app;

----------------------------------------

TITLE: Creating and Populating a Products Table with Array Columns in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates how to create a table with array columns for categories and sales data, then inserts sample product data using array literals and the ARRAY constructor.

LANGUAGE: sql
CODE:
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    categories TEXT[],
    units_sold INTEGER[][]
);

INSERT INTO products (name, categories, units_sold)
VALUES
    ('Laptop', '{"Electronics","Computer","Office"}', '{{3200, 3300, 3400, 3500}, {3600, 3700, 3800, 3900}}'),
    ('Headphones', '{"Electronics","Audio"}', '{{2400, 2500, 2600, 2700}, {2800, 2900, 3000, 3100}}'),
    ('Table', '{"Furniture","Office"}', '{{900, 950, 1000, 1050}, {1100, 1150, 1200, 1250}}'),
    ('Keyboard', '{"Electronics","Accessories"}', '{{4100, 4200, 4300, 4400}, {4500, 4600, 4700, 4800}}');

----------------------------------------

TITLE: Parsing Neon PostgreSQL Connection String
DESCRIPTION: Demonstrates the structure of a Neon PostgreSQL connection string, including role, password, hostname, pooler option, and database name.

LANGUAGE: text
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-a1b2c3d4-pooler.us-east-2.aws.neon.tech/dbname?sslmode=require
             ^    ^         ^                         ^                              ^
       role -|    |         |- hostname               |- pooler option               |- database
                  |
                  |- password

----------------------------------------

TITLE: Creating a Row-Level Security Policy in PostgreSQL
DESCRIPTION: Define a new row-level security policy for a table using the CREATE POLICY statement. This policy determines which rows are visible based on specified conditions.

LANGUAGE: sql
CODE:
CREATE POLICY name ON table_name
USING (condition);

----------------------------------------

TITLE: Creating Tasks Table in Postgres
DESCRIPTION: This SQL snippet creates a table named 'tasks' to store task information. The table includes columns for id, payload (as JSONB), status, creation timestamp, and start timestamp.

LANGUAGE: sql
CODE:
CREATE TABLE tasks (
  id SERIAL PRIMARY KEY,
  payload JSONB NOT NULL,
  status TEXT DEFAULT 'pending',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  started_at TIMESTAMP
);

----------------------------------------

TITLE: EXPLAIN Simple Query on Film Table
DESCRIPTION: Example of using EXPLAIN to show the execution plan for a simple SELECT query on the film table.

LANGUAGE: SQL
CODE:
EXPLAIN SELECT * FROM film;

----------------------------------------

TITLE: Implementing RLS Policies with SQL
DESCRIPTION: This SQL code demonstrates how to implement Row-Level Security policies for a 'todos' table using raw SQL commands, including enabling RLS and creating specific policies for different operations.

LANGUAGE: sql
CODE:
-- schema for TODOs table
CREATE TABLE todos (
  id bigint generated by default as identity primary key,
  user_id text not null default (auth.user_id()),
  task text check (char_length(task) > 0),
  is_complete boolean default false,
  inserted_at timestamptz not null default now()
);

-- 1st enable row level security for your table
ALTER TABLE todos ENABLE ROW LEVEL SECURITY;

-- 2nd create policies for your table
CREATE POLICY "Individuals can create todos." ON todos FOR INSERT
TO authenticated
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can view their own todos." ON todos FOR SELECT
TO authenticated
USING ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can update their own todos." ON todos FOR UPDATE
TO authenticated
USING ((select auth.user_id()) = user_id)
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can delete their own todos." ON todos FOR DELETE
TO authenticated
USING ((select auth.user_id()) = user_id);

----------------------------------------

TITLE: Implementing Chat Service in JavaScript
DESCRIPTION: JavaScript class to manage chat interactions, including user management, message saving, and conversation history retrieval using the Neon Postgres database.

LANGUAGE: javascript
CODE:
const db = require('../config/database');
const openai = require('./openaiService');

class ChatService {
  async ensureUserExists(userId) {
    const existingUser = await db.query('SELECT user_id FROM users WHERE user_id = $1', [userId]);

    if (existingUser.rows.length === 0) {
      await db.query('INSERT INTO users (user_id, first_name, last_name) VALUES ($1, $2, $3)', [
        userId,
        'Anonymous',
        'User',
      ]);
    }
  }

  async saveMessage(conversationId, senderType, content) {
    const query = `
      INSERT INTO messages (conversation_id, sender_type, content)
      VALUES ($1, $2, $3)
      RETURNING *
    `;
    return db.query(query, [conversationId, senderType, content]);
  }

  async getConversationHistory(conversationId, limit = 10) {
    const query = `
      SELECT sender_type, content
      FROM messages
      WHERE conversation_id = $1
      ORDER BY sent_at DESC
      LIMIT $2
    `;
    return db.query(query, [conversationId, limit]);
  }

  async processMessage(userId, message) {
    try {
      await this.ensureUserExists(userId);

      await db.query('BEGIN');

      let conversationId;
      const existingConversation = await db.query(
        'SELECT conversation_id FROM conversations WHERE user_id = $1 ORDER BY started_at DESC LIMIT 1',
        [userId]
      );

      if (existingConversation.rows.length === 0) {
        const newConversation = await db.query(
          'INSERT INTO conversations (user_id) VALUES ($1) RETURNING conversation_id',
          [userId]
        );
        conversationId = newConversation.rows[0].conversation_id;
      } else {
        conversationId = existingConversation.rows[0].conversation_id;
      }

      await this.saveMessage(conversationId, 'user', message);

      const history = await this.getConversationHistory(conversationId);
      const formattedHistory = history.rows.map((msg) => ({
        role: msg.sender_type === 'user' ? 'user' : 'assistant',
        content: [{ type: 'text', text: msg.content }],
      }));

      const aiResponse = await openai.generateResponse(message, formattedHistory);

      await this.saveMessage(conversationId, 'bot', aiResponse);

      await db.query('COMMIT');

      return {
        conversationId,
        reply: aiResponse,
      };
    } catch (error) {
      await db.query('ROLLBACK');
      console.error('Error processing message:', error);
      throw error;
    }
  }

  async startConversation(userId) {
    try {
      await this.ensureUserExists(userId);

      const result = await db.query(
        'INSERT INTO conversations (user_id) VALUES ($1) RETURNING conversation_id',
        [userId]
      );

      return {
        conversationId: result.rows[0].conversation_id,
        message: 'Conversation started successfully',
      };
    } catch (error) {
      console.error('Error starting conversation:', error);
      throw error;
    }
  }
}

module.exports = new ChatService();

----------------------------------------

TITLE: Inserting JSONB Data using Sequelize
DESCRIPTION: This JavaScript snippet demonstrates how to insert JSONB data into the 'documents' table using Sequelize's bulkCreate method. It shows the ease of working with complex JSON structures through an ORM.

LANGUAGE: javascript
CODE:
await Document.bulkCreate([
  {
    data: {
      title: 'Neon and JSONB',
      body: 'Using JSONB to store flexible data structures in Postgres.',
      tags: ['Postgres', 'Neon', 'JSONB'],
      author: { name: 'John Smith', age: 30 },
    },
  },
]);

----------------------------------------

TITLE: Starting a Transaction in PostgreSQL
DESCRIPTION: This SQL snippet shows three equivalent ways to explicitly start a transaction in PostgreSQL using the BEGIN statement.

LANGUAGE: sql
CODE:
BEGIN TRANSACTION;

-- Or

BEGIN WORK;

-- Or

BEGIN;

----------------------------------------

TITLE: Basic Date/Time Type Demonstration in PostgreSQL
DESCRIPTION: Demonstrates the basic usage of different date and time data types in PostgreSQL including DATE, TIME, TIMESTAMP, TIMESTAMPTZ, and INTERVAL.

LANGUAGE: sql
CODE:
SELECT
    '2024-01-01'::DATE AS date_value,
    '09:00:00'::TIME AS time_value,
    '2024-01-01 09:00:00'::TIMESTAMP AS timestamp_value,
    '2024-01-01 09:00:00-05'::TIMESTAMPTZ AS timestamptz_value,
    '1 month'::INTERVAL AS interval_value;

----------------------------------------

TITLE: Executing Authorized Queries in Server Component
DESCRIPTION: Demonstrates how to run authorized queries from a server component using AWS Cognito session tokens. This includes fetching the Cognito session, creating a database connection with the token, and querying todos based on user authentication.

LANGUAGE: typescript
CODE:
"use server";

import { neon } from '@neondatabase/serverless';
import { cookies } from 'next/headers';
import { fetchAuthSession } from "aws-amplify/auth/server";
import { runWithAmplifyServerContext } from "@/app/utils/amplify-server-util";

async function getCognitoSession() {
  try {
    const session = await runWithAmplifyServerContext({
      nextServerContext: { cookies },
      operation: (contextSpec) => fetchAuthSession(contextSpec),
    });

    if (!session?.tokens?.accessToken) {
      throw new Error('No valid session found');
    }

    return session.tokens.accessToken.toString();
  } catch (error) {
    console.error("Error fetching session:", error);
    throw new Error('Failed to authenticate session');
  }
}

export default async function TodoList() {
  const sql = neon(process.env.DATABASE_AUTHENTICATED_URL!, {
    authToken: async () => {
      const sessionToken = await getCognitoSession();
      if (!sessionToken) {
        throw new Error('No session token available');
      }
      return sessionToken;
    },
  });

  // WHERE filter is optional because of RLS.
  // But we send it anyway for performance reasons.
  const todos = await sql('SELECT * FROM todos WHERE user_id = auth.user_id()');

  return (
    <ul>
      {todos.map((todo) => (
        <li key={todo.id}>{todo.task}</li>
      ))}
    </ul>
  );
}

----------------------------------------

TITLE: Basic PostgreSQL EXPLAIN Syntax
DESCRIPTION: The basic syntax for the EXPLAIN statement in PostgreSQL, showing available options.

LANGUAGE: SQL
CODE:
EXPLAIN [ ( option [, ...] ) ] sql_statement;

LANGUAGE: SQL
CODE:
ANALYZE [ boolean ]
VERBOSE [ boolean ]
COSTS [ boolean ]
BUFFERS [ boolean ]
TIMING [ boolean ]
SUMMARY [ boolean ]
FORMAT { TEXT | XML | JSON | YAML }

----------------------------------------

TITLE: Setting Environment Variables for Database Connections
DESCRIPTION: This snippet shows the environment variables needed for database connections, including the owner connection string and authenticated connection strings for both server-side and client-side fetching.

LANGUAGE: bash
CODE:
# Used for database migrations
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'

# Used for server-side fetching
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

# Used for client-side fetching
NEXT_PUBLIC_DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

----------------------------------------

TITLE: Implementing RLS Policies with Raw SQL
DESCRIPTION: SQL commands for creating a todos table and implementing RLS policies directly in PostgreSQL.

LANGUAGE: sql
CODE:
CREATE TABLE todos (
  id bigint generated by default as identity primary key,
  user_id text not null default (auth.user_id()),
  task text check (char_length(task) > 0),
  is_complete boolean default false,
  inserted_at timestamptz not null default now()
);

ALTER TABLE todos ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create todos." ON todos FOR INSERT
TO authenticated
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can view their own todos." ON todos FOR SELECT
TO authenticated
USING ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can update their own todos." ON todos FOR UPDATE
TO authenticated
USING ((select auth.user_id()) = user_id)
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can delete their own todos." ON todos FOR DELETE
TO authenticated
USING ((select auth.user_id()) = user_id);

----------------------------------------

TITLE: Implementing Salary Validation Trigger Function
DESCRIPTION: PL/pgSQL function that prevents salary decreases by comparing NEW and OLD salary values and raising an exception if the new salary is lower.

LANGUAGE: plpgsql
CODE:
CREATE OR REPLACE FUNCTION fn_before_update_salary()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.salary < OLD.salary THEN
        RAISE EXCEPTION 'New salary cannot be less than current salary';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

----------------------------------------

TITLE: Database Management Commands
DESCRIPTION: Basic commands for creating and dropping databases in PostgreSQL

LANGUAGE: sql
CODE:
CREATE DATABASE [IF NOT EXISTS] db_name;

DROP DATABASE [IF EXISTS] db_name;

----------------------------------------

TITLE: Implementing CSV Import with C# and PostgreSQL
DESCRIPTION: Complete C# program that reads data from a CSV file and imports it into a PostgreSQL database table. Uses CsvHelper for CSV parsing and Npgsql for database operations.

LANGUAGE: csharp
CODE:
using CsvHelper;
using System.Globalization;
using Npgsql;

namespace ELearning;

public record Student(string FirstName, string LastName, string Email, DateOnly RegistrationDate);

public class Program
{
    public static IEnumerable<Student> ReadStudentsFromCSV(string filePath)
    {
        using var reader = new StreamReader(filePath);
        using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);

        // Skip header of the csv file
        csv.Read();

        // Read the header of the csv file to map to fields
        csv.ReadHeader();

        while (csv.Read())
        {
            var firstName = csv.GetField<string>("Firstname");
            var lastName = csv.GetField<string>("Lastname");
            var email = csv.GetField<string>("Email");
            var registrationDate = csv.GetField<DateOnly>("RegistrationDate");

            yield return new Student(firstName, lastName, email, registrationDate);
        }
    }
    public static async Task Main()
    {
        var csvFilePath = @"c:\db\students.csv";

        var sql = @"INSERT INTO students(first_name, last_name, email, registration_date) " +
          "VALUES(@first_name,@last_name,@email,@registration_date)";

        string connectionString = ConfigurationHelper.GetConnectionString("DefaultConnection");

        try
        {
            // Create a new data source
            await using var dataSource = NpgsqlDataSource.Create(connectionString);

            // Insert lines of CSV into the students table
            foreach (var student in ReadStudentsFromCSV(csvFilePath))
            {
                await using var cmd = dataSource.CreateCommand(sql);

                cmd.Parameters.AddWithValue("@first_name", student.FirstName);
                cmd.Parameters.AddWithValue("@last_name", student.LastName);
                cmd.Parameters.AddWithValue("@email", student.Email);
                cmd.Parameters.AddWithValue("@registration_date", student.RegistrationDate);

                await cmd.ExecuteNonQueryAsync();
            }
        }
        catch (NpgSQLException ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}

----------------------------------------

TITLE: Creating NestJS Database Service
DESCRIPTION: Service implementation for database interactions using dependency injection

LANGUAGE: typescript
CODE:
import { Injectable, Inject } from '@nestjs/common';

@Injectable()
export class AppService {
  constructor(@Inject('POSTGRES_POOL') private readonly sql: any) {}

  async getTable(name: string): Promise<any[]> {
    const client = await this.sql.connect();
    const { rows } = await client.query(`SELECT * FROM ${name}`);
    return rows;
  }
}

----------------------------------------

TITLE: Implementing Real-time Database Change Stream
DESCRIPTION: Complete TypeScript implementation showing how to create and consume a stream of database changes for a User model.

LANGUAGE: typescript
CODE:
import { PrismaClient } from '@prisma/client';
import { withPulse } from '@prisma/extension-pulse';

const prisma = new PrismaClient().$extends(withPulse({ apiKey: '<your Pulse API key>' }));

async function main() {
  // Create a stream from the 'User' model
  const stream = await prisma.user.stream({ name: 'user-stream' });

  for await (const event of stream) {
    console.log('Just received an event:', event);
  }
}

main();

----------------------------------------

TITLE: Creating Tables with Foreign Keys in SQL
DESCRIPTION: These SQL statements demonstrate creating tables with foreign keys to the neon_auth.users_sync table, showing different ON DELETE behaviors.

LANGUAGE: sql
CODE:
-- For personal data that should be removed with the user (e.g., todos)
CREATE TABLE todos (
    id SERIAL PRIMARY KEY,
    task TEXT NOT NULL,
    user_id UUID NOT NULL REFERENCES neon_auth.users_sync(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- For content that should persist after user deletion (e.g., blog posts)
CREATE TABLE posts (
    id SERIAL PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    author_id UUID REFERENCES neon_auth.users_sync(id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

----------------------------------------

TITLE: Implementing RLS Policies in SQL for a Todo List App
DESCRIPTION: This SQL snippet demonstrates how to create a 'todos' table and implement RLS policies for CRUD operations using traditional SQL statements. It shows separate policies for insert, select, update, and delete operations.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS "todos" (
    "id" bigint PRIMARY KEY,
    "user_id" text DEFAULT (auth.user_id()) NOT NULL,
    "task" text NOT NULL,
    "is_complete" boolean DEFAULT false NOT NULL,
    "inserted_at" timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE "todos" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "create todos" ON "todos" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK ((select auth.user_id() = user_id));

CREATE POLICY "view todos" ON "todos" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((select auth.user_id() = user_id));

CREATE POLICY "crud-authenticated-policy-update" ON "todos" AS PERMISSIVE FOR UPDATE TO "authenticated" USING ((select auth.user_id() = "todos"."user_id")) WITH CHECK ((select auth.user_id() = "todos"."user_id"));

CREATE POLICY "delete todos" ON "todos" AS PERMISSIVE FOR DELETE TO "authenticated" USING ((select auth.user_id() = user_id));

----------------------------------------

TITLE: Using BETWEEN Operator in PostgreSQL WHERE Clause
DESCRIPTION: Demonstrates how to use the BETWEEN operator along with string functions to filter rows based on a range of values.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  LENGTH(first_name) name_length
FROM
  customer
WHERE
  first_name LIKE 'A%'
  AND LENGTH(first_name) BETWEEN 3
  AND 5
ORDER BY
  name_length;

----------------------------------------

TITLE: Implementing RLS Policies with SQL
DESCRIPTION: This SQL script creates a 'todos' table and implements Row-Level Security policies. It enables RLS and creates policies for inserting, selecting, updating, and deleting todos based on user authentication.

LANGUAGE: sql
CODE:
-- schema for TODOs table
CREATE TABLE todos (
  id bigint generated by default as identity primary key,
  user_id text not null default (auth.user_id()),
  task text check (char_length(task) > 0),
  is_complete boolean default false,
  inserted_at timestamptz not null default now()
);

-- 1st enable row level security for your table
ALTER TABLE todos ENABLE ROW LEVEL SECURITY;

-- 2nd create policies for your table
CREATE POLICY "Individuals can create todos." ON todos FOR INSERT
TO authenticated
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can view their own todos." ON todos FOR SELECT
TO authenticated
USING ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can update their own todos." ON todos FOR UPDATE
TO authenticated
USING ((select auth.user_id()) = user_id)
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can delete their own todos." ON todos FOR DELETE
TO authenticated
USING ((select auth.user_id()) = user_id);

----------------------------------------

TITLE: Syntax of PostgreSQL jsonb_set() Function
DESCRIPTION: The basic syntax of the jsonb_set() function, including its parameters and their purposes.

LANGUAGE: sql
CODE:
jsonb_set(
   target jsonb,
   path text[],
   new_value jsonb
   [, create_missing boolean]
)

----------------------------------------

TITLE: Querying Employee-Manager Relationships
DESCRIPTION: Uses self-join to display employee-manager reporting relationships, demonstrating both INNER JOIN and LEFT JOIN approaches.

LANGUAGE: sql
CODE:
SELECT
  e.first_name || ' ' || e.last_name employee,
  m.first_name || ' ' || m.last_name manager
FROM
  employee e
  INNER JOIN employee m ON m.employee_id = e.manager_id
ORDER BY
  manager;

----------------------------------------

TITLE: Initializing TypeORM DataSource with Neon PostgreSQL Connection
DESCRIPTION: This code snippet demonstrates how to initialize a TypeORM DataSource using a Neon PostgreSQL connection string. It sets the database type to PostgreSQL, uses an environment variable for the connection URL, and enables SSL.

LANGUAGE: typescript
CODE:
import { DataSource } from 'typeorm';

export const AppDataSource = new DataSource({
  type: 'postgres',
  url: process.env.DATABASE_URL,
  ssl: true,
  entities: [
    /*list of entities*/
  ],
});

----------------------------------------

TITLE: Creating GitHub Action Workflow for Database Dumping and Restoring
DESCRIPTION: This YAML configuration sets up a GitHub Action workflow to dump data from a production database and restore it to a testing database. It includes steps for installing PostgreSQL, setting environment variables, and scheduling the job.

LANGUAGE: yaml
CODE:
name: Dump Test Data

on:
  schedule:
    - cron: '0 0 * * *' # Runs at midnight UTC
  workflow_dispatch:

env:
  PROD_DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }} # Production or staging database
  DEV_DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }} # Development or testing database
  PG_VERSION: '17'

jobs:
  dump-and-restore:
    runs-on: ubuntu-latest

    steps:
      - name: Install PostgreSQL
        run: |
          sudo apt update
          yes '' | sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh
          sudo apt install -y postgresql-${{ env.PG_VERSION }}

      - name: Set PostgreSQL binary path
        run: echo "POSTGRES=/usr/lib/postgresql/${{ env.PG_VERSION }}/bin" >> $GITHUB_ENV

----------------------------------------

TITLE: Neon Serverless Driver Connection
DESCRIPTION: JavaScript code using Neon's serverless driver to connect to the database and query PostgreSQL version.

LANGUAGE: javascript
CODE:
require('dotenv').config();

const { neon } = require('@neondatabase/serverless');

const { PGHOST, PGDATABASE, PGUSER, PGPASSWORD } = process.env;

const sql = neon(`postgresql://${PGUSER}:${PGPASSWORD}@${PGHOST}/${PGDATABASE}?sslmode=require`);

async function getPgVersion() {
  const result = await sql`SELECT version()`;
  console.log(result[0]);
}

getPgVersion();

----------------------------------------

TITLE: Converting Table Data to JSON Array
DESCRIPTION: Demonstrates how to use jsonb_build_array() with table data by converting film titles and lengths into JSON array elements from a sample database.

LANGUAGE: sql
CODE:
SELECT
  jsonb_build_array(title, length)
FROM
  film
ORDER BY
  title;

----------------------------------------

TITLE: Basic Usage of jsonb_each_text() Function in PostgreSQL
DESCRIPTION: This snippet demonstrates the basic usage of the jsonb_each_text() function to expand a JSON object into key/value pairs. It shows how to retrieve all pairs and filter specific keys.

LANGUAGE: sql
CODE:
SELECT
  *
FROM
  jsonb_each_text(
    '{"name": "Jane", "age": 22, "city": "San Francisco"}'
  );

LANGUAGE: sql
CODE:
SELECT
  *
FROM
  jsonb_each_text(
    '{"name": "Jane", "age": 22, "city": "San Francisco"}'
  )
WHERE key IN ('name','city');

----------------------------------------

TITLE: Basic PostgreSQL NATURAL JOIN Example
DESCRIPTION: Demonstrates a simple NATURAL JOIN between the 'products' and 'categories' tables using the common 'category_id' column.

LANGUAGE: sql
CODE:
SELECT *
FROM products
NATURAL JOIN categories;

----------------------------------------

TITLE: Retrieving the Last Inserted ID
DESCRIPTION: Shows how to use the RETURNING clause to get the ID of the last inserted row.

LANGUAGE: sql
CODE:
INSERT INTO links (url, name)
VALUES('https://www.postgresql.org','PostgreSQL')
RETURNING id;

----------------------------------------

TITLE: Secure Password Storage with pgcrypto
DESCRIPTION: A comprehensive example demonstrating how to securely hash and store passwords using pgcrypto functions. It includes creating a table, inserting a hashed password, and verifying passwords.

LANGUAGE: sql
CODE:
SELECT crypt('mypassword', gen_salt('bf', 4));

CREATE TABLE users (
    username VARCHAR(50) PRIMARY KEY,
    password_hash TEXT NOT NULL
);

INSERT INTO users (username, password_hash) VALUES
('testuser', '$2a$04$vVVrQ777SjxyQKuFp7z6ue');

SELECT password_hash = crypt('mypassword', password_hash) AS password_match
FROM users
WHERE username = 'testuser';

SELECT password_hash = crypt('wrongpassword', password_hash) AS password_match
FROM users
WHERE username = 'testuser';

----------------------------------------

TITLE: Making an API Call to Retrieve Projects
DESCRIPTION: This example demonstrates how to use an API key to retrieve projects from the Neon API. It includes the necessary headers for authentication and response formatting.

LANGUAGE: bash
CODE:
curl 'https://console.neon.tech/api/v2/projects' \
  -H 'Accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY" | jq

----------------------------------------

TITLE: Basic SELECT INTO Syntax Example
DESCRIPTION: Demonstrates the fundamental syntax of SELECT INTO statement for assigning query results to variables.

LANGUAGE: sql
CODE:
select column1, column2, ...
into variable1, variable2, ...
from table_expression;

----------------------------------------

TITLE: Filtering Counts with FILTER Clause
DESCRIPTION: Shows how to use the FILTER clause with COUNT() to count orders meeting specific date criteria.

LANGUAGE: sql
CODE:
SELECT
  COUNT(*) AS total_orders,
  COUNT(*) FILTER (WHERE order_date >= '2023-04-01') AS recent_orders
FROM orders;

----------------------------------------

TITLE: Creating and Populating Books Table with JSONB Data in PostgreSQL
DESCRIPTION: This SQL snippet creates a 'books' table with a JSONB column and inserts sample data. It demonstrates how to structure JSONB data for book information including title, author, and publication year.

LANGUAGE: sql
CODE:
CREATE TABLE books (
    id INT,
    info JSONB
);

INSERT INTO books (id, info)
VALUES
    (1, '{"title": "The Catcher in the Rye", "author": "J.D. Salinger", "year": 1951}'),
    (2, '{"title": "To Kill a Mockingbird", "author": "Harper Lee", "year": 1960}'),
    (3, '{"title": "1984", "author": "George Orwell", "year": 1949}');

----------------------------------------

TITLE: Creating a Table with UUID Primary Key in PostgreSQL
DESCRIPTION: Shows how to create a table with a UUID column as the primary key, using gen_random_uuid() as the default value generator.

LANGUAGE: sql
CODE:
CREATE TABLE contacts (
    contact_id uuid DEFAULT gen_random_uuid(),
    first_name VARCHAR NOT NULL,
    last_name VARCHAR NOT NULL,
    email VARCHAR NOT NULL,
    phone VARCHAR,
    PRIMARY KEY (contact_id)
);

----------------------------------------

TITLE: Running Authorized Queries in Server Component
DESCRIPTION: This TypeScript code for a server component demonstrates how to run authenticated queries using JWTs from Azure Active Directory, applying RLS policies based on the user's identity.

LANGUAGE: typescript
CODE:
'use server';

import { neon } from '@neondatabase/serverless';
import { getUserInfo } from '@/lib/auth'

export default async function TodoList() {
  const userInfo = await getUserInfo();
  if (!userInfo) {
    throw new Error('No user info available');
  }

  const sql = neon(process.env.DATABASE_AUTHENTICATED_URL!, {
    authToken: async () => {
      const jwt = userInfo.token;
      if (!jwt) {
        throw new Error('No JWT token available');
      }
      return jwt;
    },
  });

  // WHERE filter is optional because of RLS.
  // But we send it anyway for performance reasons.
  const todos = await
    sql('SELECT * FROM todos WHERE user_id = auth.user_id()');

  return (
    <ul>
      {todos.map((todo) => (
        <li key={todo.id}>{todo.task}</li>
      ))}
    </ul>
  );
}

----------------------------------------

TITLE: Creating Feature Usage Trends Chart Component
DESCRIPTION: PHP code for the FeatureUsageTrendsChart Livewire component, fetching and preparing data for the chart.

LANGUAGE: php
CODE:
<?php

namespace App\Livewire;

use Livewire\Component;
use App\Models\FeatureUsage;
use Asantibanez\LivewireCharts\Models\ColumnChartModel;

class FeatureUsageTrendsChart extends Component
{
    public function render()
    {
        // Example query to fetch feature usage trends
        $featureUsages = FeatureUsage::selectRaw('feature_name, COUNT(*) as usage_count')
            ->groupBy('feature_name')
            ->get();

        // Prepare the chart data
        $columnChartModel = (new ColumnChartModel())
            ->setTitle('Feature Usage Trends')
            ->setAnimated(true);

        foreach ($featureUsages as $usage) {
            $columnChartModel->addColumn($usage->feature_name, $usage->usage_count, '#f6ad55');
        }

        return view('livewire.feature-usage-trends-chart', [
            'columnChartModel' => $columnChartModel
        ]);
    }
}

----------------------------------------

TITLE: Basic PostgreSQL Aggregate Function Syntax
DESCRIPTION: Demonstrates the basic syntax for using aggregate functions with GROUP BY clause in PostgreSQL.

LANGUAGE: sql
CODE:
SELECT column1, AGGREGATE_FUNCTION(column2)
FROM table1
GROUP BY column1;

----------------------------------------

TITLE: Creating Database Statement
DESCRIPTION: Creates a statement object for executing SQL commands within the transaction.

LANGUAGE: java
CODE:
var statement = connection.createStatement();

----------------------------------------

TITLE: Express App with Neon Serverless Driver
DESCRIPTION: Express application setup using the Neon serverless driver to connect to the database and query the PostgreSQL version.

LANGUAGE: javascript
CODE:
require('dotenv').config();

const express = require('express');
const { neon } = require('@neondatabase/serverless');

const app = express();
const PORT = process.env.PORT || 4242;

app.get('/', async (_, res) => {
  const sql = neon(`${process.env.DATABASE_URL}`);
  const response = await sql`SELECT version()`;
  const { version } = response[0];
  res.json({ version });
});

app.listen(PORT, () => {
  console.log(`Listening to http://localhost:${PORT}`);
});

----------------------------------------

TITLE: Creating Basic Multicolumn Index in PostgreSQL
DESCRIPTION: Basic syntax for creating a multicolumn index in PostgreSQL, showing the standard structure and optional IF NOT EXISTS clause.

LANGUAGE: sql
CODE:
CREATE INDEX [IF NOT EXISTS] index_name
ON table_name(column1, column2, ...);

----------------------------------------

TITLE: Express App with node-postgres
DESCRIPTION: Express application configuration using node-postgres (pg) client to establish database connection and query the PostgreSQL version.

LANGUAGE: javascript
CODE:
require('dotenv').config();

const { Pool } = require('pg');
const express = require('express');

const app = express();
const PORT = process.env.PORT || 4242;

app.get('/', async (_, res) => {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
  });
  const client = await pool.connect();
  const result = await client.query('SELECT version()');
  client.release();
  const { version } = result.rows[0];
  res.json({ version });
});

app.listen(PORT, () => {
  console.log(`Listening to http://localhost:${PORT}`);
});

----------------------------------------

TITLE: SELECT Queries in Postgres
DESCRIPTION: This set of SQL queries demonstrates various SELECT operations in Postgres, including retrieving all columns, selecting specific columns, filtering with WHERE clause, ordering and limiting results, and using aggregation with grouping.

LANGUAGE: sql
CODE:
-- Basic SELECT to retrieve all columns from a table
SELECT * FROM users;

-- SELECT specific columns from a table
SELECT username, email FROM users;

-- SELECT with filtering using WHERE clause
SELECT * FROM users WHERE user_id > 10;

-- SELECT with ordering and limiting the results
SELECT username, email FROM users ORDER BY created_at DESC LIMIT 5;

-- SELECT with aggregation and grouping
SELECT COUNT(*) AS total_users, EXTRACT(YEAR FROM created_at) AS year FROM users GROUP BY year ORDER BY year;

----------------------------------------

TITLE: Joining a CTE with a Table
DESCRIPTION: This example demonstrates how to join a CTE with a table. It calculates rental counts for each staff member in the CTE and then joins the result with the staff table to display staff details along with their rental counts.

LANGUAGE: SQL
CODE:
WITH cte_rental AS (
  SELECT
    staff_id,
    COUNT(rental_id) rental_count
  FROM
    rental
  GROUP BY
    staff_id
)
SELECT
  s.staff_id,
  first_name,
  last_name,
  rental_count
FROM
  staff s
  INNER JOIN cte_rental USING (staff_id);

----------------------------------------

TITLE: Implementing Row-Level Security Policy in PostgreSQL
DESCRIPTION: Enable row-level security on the departments table and create a policy that restricts access based on the current user matching the manager column.

LANGUAGE: sql
CODE:
ALTER TABLE departments
ENABLE ROW LEVEL SECURITY;

CREATE POLICY department_managers
ON departments
TO managers
USING (manager = current_user);

----------------------------------------

TITLE: Creating Read-Only Role and User in PostgreSQL
DESCRIPTION: SQL commands to create a read-only role with limited access permissions and assign it to a user. Includes database connection, schema usage, and SELECT privileges.

LANGUAGE: sql
CODE:
CREATE ROLE readonly PASSWORD '<password>';
GRANT CONNECT ON DATABASE <database> TO readonly;
GRANT USAGE ON SCHEMA <schema> TO readonly;
GRANT SELECT ON ALL TABLES IN SCHEMA <schema> TO readonly;
ALTER DEFAULT PRIVILEGES IN SCHEMA <schema> GRANT SELECT ON TABLES TO readonly;

CREATE USER readonly_user1 WITH PASSWORD '<password>';

GRANT readonly TO readonly_user1;

----------------------------------------

TITLE: Basic MERGE Syntax in PostgreSQL
DESCRIPTION: Demonstrates the basic structure of a MERGE command in PostgreSQL, including conditional UPDATE, DELETE, and INSERT operations based on matching conditions.

LANGUAGE: sql
CODE:
MERGE INTO target_table
USING source_table
ON match_condition
WHEN MATCHED AND condition THEN
    UPDATE SET column1 = value1, column2 = value2
WHEN MATCHED AND NOT condition THEN
    DELETE
WHEN NOT MATCHED THEN
    INSERT (column1, column2) VALUES (value1, value2)
RETURNING merge_action(), target_table.*;

----------------------------------------

TITLE: Comparing Raw and Normalized tsvector in PostgreSQL
DESCRIPTION: This snippet demonstrates the difference between casting a string directly to tsvector and using the to_tsvector function with a specific text search configuration. It shows how to_tsvector normalizes and tokenizes the input text.

LANGUAGE: sql
CODE:
SELECT
    'The quick brown fox jumps over the lazy dog.'::tsvector as colA,
    to_tsvector('english', 'The quick brown fox jumps over the lazy dog.') as colB;

----------------------------------------

TITLE: Creating a Publication in PostgreSQL
DESCRIPTION: This SQL command creates a publication named 'users_publication' for the 'users' table. Publications are used to specify which tables and types of changes should be replicated.

LANGUAGE: sql
CODE:
CREATE PUBLICATION users_publication FOR TABLE users;

----------------------------------------

TITLE: Implementing FastAPI Routes for Product Management
DESCRIPTION: Defines API endpoints for CRUD operations on products using FastAPI decorators and async handlers with database integration.

LANGUAGE: python
CODE:
from fastapi import HTTPException, APIRouter, Depends
from models.product_models import Product, ProductCreate
from database.postgres import get_postgres
import asyncpg

product_router = APIRouter()

@product_router.post("/products", response_model=Product)
async def create_product(
    product: ProductCreate,
    db_pool: asyncpg.Pool = Depends(get_postgres)
) -> Product:
    query = """
    INSERT INTO products (name, price, quantity, description)
    VALUES ($1, $2, $3, $4)
    RETURNING id, name, price, quantity, description
    """
    try:
        async with db_pool.acquire() as conn:
            result = await conn.fetchrow(
                query,
                product.name,
                product.price,
                product.quantity,
                product.description,
            )
        return Product(**dict(result))
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

----------------------------------------

TITLE: Creating a Neon Branch with GitHub Actions
DESCRIPTION: This YAML configuration demonstrates how to create a new Neon branch using GitHub Actions. It specifies the project ID, parent branch, database name, and other parameters. The action outputs the new branch's connection details.

LANGUAGE: yaml
CODE:
name: Create Neon Branch with GitHub Actions Demo
run-name: Create a Neon Branch 🚀
jobs:
  Create-Neon-Branch:
  steps:
    - uses: neondatabase/create-branch-action@v5
      id: create-branch
      with:
        project_id: rapid-haze-373089
        # optional (defaults to your project's default branch)
        parent: dev
        # optional (defaults to neondb)
        database: my-database
        branch_name: from_action_reusable
        username: db_user_for_url
        api_key: ${{ secrets.NEON_API_KEY }}
    - run: echo db_url ${{ steps.create-branch.outputs.db_url }}
    - run: echo host ${{ steps.create-branch.outputs.host }}
    - run: echo branch_id ${{ steps.create-branch.outputs.branch_id }}

----------------------------------------

TITLE: PL/pgSQL IF-THEN-ELSIF Statement Structure
DESCRIPTION: Illustrates the syntax of the IF-THEN-ELSIF statement in PL/pgSQL, which allows evaluation of multiple conditions.

LANGUAGE: sql
CODE:
if condition_1 then
  statement_1;
elsif condition_2 then
  statement_2
...
elsif condition_n then
  statement_n;
else
  else-statement;
end if;

----------------------------------------

TITLE: Retrieving Geospatial Data in Postgres using PostGIS
DESCRIPTION: This SQL query retrieves all stored locations from the 'locations' table, converting the geometry data to text format using the ST_AsText function for readability.

LANGUAGE: sql
CODE:
SELECT id, name, ST_AsText(geom) FROM locations;

----------------------------------------

TITLE: Table Management Operations
DESCRIPTION: SQL commands for creating, altering, and dropping tables including column modifications

LANGUAGE: sql
CODE:
CREATE [TEMP] TABLE [IF NOT EXISTS] table_name(
   pk SERIAL PRIMARY KEY,
   c1 type(size) NOT NULL,
   c2 type(size) NULL,
   ...
);

----------------------------------------

TITLE: Performing Time-based Aggregations with TimescaleDB
DESCRIPTION: This SQL query demonstrates how to use TimescaleDB's time_bucket function to calculate the average stock price per day.

LANGUAGE: sql
CODE:
SELECT time_bucket('1 day', ts) AS bucket,
       ticker,
       AVG(price) AS avg_price
FROM stock_prices
GROUP BY bucket, ticker
ORDER BY bucket;

----------------------------------------

TITLE: Implementing Server Action with Neon Serverless Driver
DESCRIPTION: Server-side implementation using Neon's serverless driver to handle form submission and database operations.

LANGUAGE: typescript
CODE:
import { neon } from '@neondatabase/serverless';

export default function Page() {
  async function create(formData: FormData) {
    'use server';
    // Create an instance of Neon's TS/JS driver
    const sql = neon(`${process.env.DATABASE_URL}`);
    // Create the comments table if it does not exist
    await sql('CREATE TABLE IF NOT EXISTS comments (comment TEXT)');
    const comment = formData.get('comment');
    // Insert the comment from the form into the Postgres (powered by Neon)
    await sql('INSERT INTO comments (comment) VALUES ($1)', [comment]);
  }
  return (
    <form action={create}>
      <input type="text" placeholder="write a comment" name="comment" />
      <button type="submit">Submit</button>
    </form>
  );
}

----------------------------------------

TITLE: Creating Sequelize Migration for Book Model
DESCRIPTION: JavaScript code for creating a Sequelize migration to set up the Books table in the database, including foreign key relationship.

LANGUAGE: javascript
CODE:
'use strict';
/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    await queryInterface.createTable('Books', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER,
      },
      title: {
        type: Sequelize.STRING,
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
      },
      authorId: {
        type: Sequelize.INTEGER,
        onDelete: 'CASCADE',
        references: {
          model: 'Authors',
          key: 'id',
        },
      },
    });
  },
  async down(queryInterface, Sequelize) {
    await queryInterface.dropTable('Books');
  },
};

----------------------------------------

TITLE: Implementing Data Dump and Restore in GitHub Actions Workflow
DESCRIPTION: This YAML snippet extends the GitHub Action workflow to include steps for dumping schema and data, dropping existing tables, and restoring schema and data to the target database.

LANGUAGE: yaml
CODE:
- name: Dump schema
  run: |
    $POSTGRES/pg_dump -Fc --schema-only -f "${{ github.workspace }}/all-schema.bak" "${{ env.PROD_DATABASE_URL }}"

- name: Dump data
  run: |
    $POSTGRES/psql "${{ env.PROD_DATABASE_URL }}" -c "\copy (SELECT * FROM transactions ORDER BY transaction_id DESC LIMIT 50) TO '${{ github.workspace }}/transactions-subset.csv' WITH CSV HEADER"
    $POSTGRES/psql "${{ env.PROD_DATABASE_URL }}" -c "\copy (SELECT * FROM products WHERE product_id IN (SELECT product_id FROM transactions ORDER BY transaction_id DESC LIMIT 50)) TO '${{ github.workspace }}/products-subset.csv' WITH CSV HEADER"
    $POSTGRES/psql "${{ env.PROD_DATABASE_URL }}" -c "\copy (SELECT * FROM users WHERE user_id IN (SELECT user_id FROM transactions ORDER BY transaction_id DESC LIMIT 50)) TO '${{ github.workspace }}/users-subset.csv' WITH CSV HEADER"

- name: Drop tables and schema
  run: |
    $POSTGRES/psql "${{ env.DEV_DATABASE_URL }}" -c "DROP SCHEMA IF EXISTS public CASCADE;"
    $POSTGRES/psql "${{ env.DEV_DATABASE_URL }}" -c "CREATE SCHEMA public;"

- name: Restore schema
  run: |
    $POSTGRES/pg_restore --clean --no-owner --no-acl --if-exists --schema-only -d "${{ env.DEV_DATABASE_URL }}" "${{ github.workspace }}/all-schema.bak"

- name: Restore data
  run: |
    $POSTGRES/psql "${{ env.DEV_DATABASE_URL }}" -c "\copy public.users FROM '${{ github.workspace }}/users-subset.csv' WITH CSV HEADER"
    $POSTGRES/psql "${{ env.DEV_DATABASE_URL }}" -c "\copy public.products FROM '${{ github.workspace }}/products-subset.csv' WITH CSV HEADER"
    $POSTGRES/psql "${{ env.DEV_DATABASE_URL }}" -c "\copy public.transactions FROM '${{ github.workspace }}/transactions-subset.csv' WITH CSV HEADER"

----------------------------------------

TITLE: Finding Shortest Path using pgRouting in Postgres
DESCRIPTION: This SQL query uses the pgr_dijkstra function from pgRouting to find the shortest path between two nodes in the 'roads' network.

LANGUAGE: sql
CODE:
SELECT * FROM pgr_dijkstra(
  'SELECT id, source, target, cost FROM roads',
  1, 4, false
);

----------------------------------------

TITLE: Implementing DELETE Operations with JDBC PreparedStatement
DESCRIPTION: A Java class method that deletes a product from a PostgreSQL database by ID using JDBC PreparedStatement. The method handles database connection, executes the DELETE statement, and returns the number of affected rows.

LANGUAGE: java
CODE:
public class ProductDB {
    public static int delete(int id) {
        var sql  = "DELETE FROM products WHERE id=?";

        try (var conn  = DB.connect();
             var pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, id);

            return pstmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return 0;
    }

    // ...
}

----------------------------------------

TITLE: Creating Vector Table
DESCRIPTION: Creates a table with a VECTOR column type to store embeddings with specified dimensions.

LANGUAGE: sql
CODE:
CREATE TABLE items (
  id BIGSERIAL PRIMARY KEY,
  embedding VECTOR(3)
);

----------------------------------------

TITLE: ROW_NUMBER for Pagination
DESCRIPTION: Demonstrates using ROW_NUMBER() to implement pagination by selecting specific rows.

LANGUAGE: sql
CODE:
SELECT
  *
FROM
  (
    SELECT
      product_id,
      product_name,
      price,
      ROW_NUMBER () OVER (
        ORDER BY
          product_name
      )
    FROM
      products
  ) x
WHERE
  ROW_NUMBER BETWEEN 6 AND 10;

----------------------------------------

TITLE: Creating a Functional Index Using lower() Function
DESCRIPTION: Demonstrates how to create a table and a functional index using the lower() function to optimize case-insensitive searches.

LANGUAGE: sql
CODE:
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL
);

CREATE INDEX idx_users_name_lower ON users (lower(name));

----------------------------------------

TITLE: Asynchronous Python Database Connection
DESCRIPTION: Python script using asyncpg to asynchronously connect to Neon database and retrieve time and version information

LANGUAGE: python
CODE:
import os
import asyncio
import asyncpg
from dotenv import load_dotenv

async def main():
    # Load .env file
    load_dotenv()

    # Get the connection string from the environment variable
    connection_string = os.getenv('DATABASE_URL')

    # Create a connection pool
    pool = await asyncpg.create_pool(connection_string)

    # Acquire a connection from the pool
    async with pool.acquire() as conn:
        # Execute SQL commands to retrieve the current time and version from PostgreSQL
        time = await conn.fetchval('SELECT NOW();')
        version = await conn.fetchval('SELECT version();')

    # Close the pool
    await pool.close()

    # Print the results
    print('Current time:', time)
    print('PostgreSQL version:', version)

# Run the asynchronous main function
asyncio.run(main())

----------------------------------------

TITLE: Basic PostgreSQL jsonb_each() Function Syntax
DESCRIPTION: Demonstrates the basic syntax of the jsonb_each() function for expanding JSON objects into key/value pairs.

LANGUAGE: sql
CODE:
jsonb_each(json_object)

----------------------------------------

TITLE: Creating Phone Number Index
DESCRIPTION: Creating an index on the phone column of the address table to improve query performance.

LANGUAGE: php
CODE:
CREATE INDEX idx_address_phone
ON address(phone);

----------------------------------------

TITLE: Performing Arithmetic Operations on DECIMAL Types in PostgreSQL
DESCRIPTION: This SQL query demonstrates arithmetic operations on DECIMAL types, specifically calculating the total value of stock holdings by multiplying price per share with shares owned. It showcases the precision maintained in decimal calculations.

LANGUAGE: sql
CODE:
SELECT price_per_share * shares_owned AS total_value
FROM portfolios;

----------------------------------------

TITLE: Updating Prisma Schema for Migration
DESCRIPTION: Updated Prisma schema for the Author model, adding a new 'country' field to demonstrate schema migration.

LANGUAGE: prisma
CODE:
model Author {
  @@map("authors")

  id        Int      @id @default(autoincrement())
  name      String
  bio       String?
  country   String?
  createdAt DateTime @default(now()) @map("created_at")
  books     Book[]
}

----------------------------------------

TITLE: Creating GIN Index for JSONB in Postgres
DESCRIPTION: This SQL snippet creates a GIN (Generalized Inverted Index) index on the JSONB 'data' column. GIN indexes can improve query performance for operations on JSONB data.

LANGUAGE: sql
CODE:
CREATE INDEX content_idx ON documents USING GIN (data);

----------------------------------------

TITLE: Initializing Postgres Vector Store with LlamaIndex in TypeScript
DESCRIPTION: This code initializes a PGVectorStore instance using the Postgres connection string from environment variables. It sets up the vector store for use with LlamaIndex, specifying 512 dimensions for the image embeddings.

LANGUAGE: typescript
CODE:
import 'dotenv/config';
import { PGVectorStore } from 'llamaindex';

export default new PGVectorStore({
  connectionString: process.env.POSTGRES_URL,
  dimensions: 512,
});

----------------------------------------

TITLE: Extracting Employee Object Using jsonb_extract_path() in PostgreSQL
DESCRIPTION: Uses the jsonb_extract_path() function to extract the entire employee object from the JSONB data in the 'documents' table.

LANGUAGE: sql
CODE:
SELECT
  jsonb_extract_path(data, 'employee') employee
FROM
  documents;

----------------------------------------

TITLE: Extracting Employee Object Using jsonb_extract_path() in PostgreSQL
DESCRIPTION: Uses the jsonb_extract_path() function to extract the entire employee object from the JSONB data in the 'documents' table.

LANGUAGE: sql
CODE:
SELECT
  jsonb_extract_path(data, 'employee') employee
FROM
  documents;

----------------------------------------

TITLE: Creating Film Count Function Example
DESCRIPTION: Example of creating a function that counts films within a specified length range. Demonstrates parameter usage, variable declaration, and query implementation.

LANGUAGE: sql
CODE:
create function get_film_count(len_from int, len_to int)
returns int
language plpgsql
as
$$
declare
   film_count integer;
begin
   select count(*)
   into film_count
   from film
   where length between len_from and len_to;

   return film_count;
end;
$$;

----------------------------------------

TITLE: Implementing Server Actions for User Message CRUD Operations
DESCRIPTION: TypeScript code defining server actions for creating and deleting user messages, integrated with Clerk authentication.

LANGUAGE: typescript
CODE:
'use server';

import { currentUser } from '@clerk/nextjs/server';
import { UserMessages } from './db/schema';
import { db } from './db';
import { redirect } from 'next/navigation';
import { eq } from 'drizzle-orm';

export async function createUserMessage(formData: FormData) {
  const user = await currentUser();
  if (!user) throw new Error('User not found');

  const message = formData.get('message') as string;
  await db.insert(UserMessages).values({
    user_id: user.id,
    message,
  });
  redirect('/');
}

export async function deleteUserMessage() {
  const user = await currentUser();
  if (!user) throw new Error('User not found');

  await db.delete(UserMessages).where(eq(UserMessages.user_id, user.id));
  redirect('/');
}

----------------------------------------

TITLE: Node-Postgres Pool Configuration
DESCRIPTION: JavaScript code using node-postgres Pool to establish database connection and query version.

LANGUAGE: javascript
CODE:
require('dotenv').config();

const { Pool } = require('pg');

const { PGHOST, PGDATABASE, PGUSER, PGPASSWORD } = process.env;

const pool = new Pool({
  host: PGHOST,
  database: PGDATABASE,
  username: PGUSER,
  password: PGPASSWORD,
  port: 5432,
  ssl: {
    require: true,
  },
});

async function getPgVersion() {
  const client = await pool.connect();
  try {
    const result = await client.query('SELECT version()');
    console.log(result.rows[0]);
  } finally {
    client.release();
  }
}

getPgVersion();

----------------------------------------

TITLE: Basic CUME_DIST Function Syntax
DESCRIPTION: Demonstrates the fundamental syntax structure of the CUME_DIST() window function, including optional PARTITION BY and required ORDER BY clauses.

LANGUAGE: text
CODE:
CUME_DIST() OVER (
    [PARTITION BY partition_expression, ... ]
    ORDER BY sort_expression [ASC | DESC], ...
)

----------------------------------------

TITLE: Setting Up Postgres Roles for RLS
DESCRIPTION: Defines table-level permissions for 'authenticated' and 'anonymous' roles in Postgres. This includes granting SELECT, UPDATE, INSERT, and DELETE privileges on existing and future tables in the public schema.

LANGUAGE: sql
CODE:
-- For existing tables
GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to authenticated;

GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to anonymous;

-- For future tables
ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO authenticated;

ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO anonymous;

-- Grant USAGE on "public" schema
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO anonymous;

----------------------------------------

TITLE: Generating Histograms for Data Analysis with TimescaleDB
DESCRIPTION: This SQL query uses TimescaleDB's histogram() function to calculate how many times the price of a specific stock falls into predefined price range buckets.

LANGUAGE: sql
CODE:
SELECT ticker, width_bucket(price, 170, 180, 10) AS bucket, COUNT(*) AS frequency
FROM stock_prices
WHERE ticker = 'AAPL'
GROUP BY ticker, bucket
ORDER BY ticker, bucket;

----------------------------------------

TITLE: Installing Neon MCP Server for Cline
DESCRIPTION: Command to install and configure Neon MCP Server for Cline VS Code extension. Requires a valid Neon API key.

LANGUAGE: bash
CODE:
npx -y @smithery/cli@latest install neon --client cline --config "{\"neonApiKey\":\"YOUR_NEON_API_KEY\"}"

----------------------------------------

TITLE: Using a CTE to Query Action Films
DESCRIPTION: This example uses a CTE to select the title and length of films in the 'Action' category. It demonstrates how to join multiple tables within a CTE and then query the CTE in the main query.

LANGUAGE: SQL
CODE:
WITH action_films AS (
  SELECT
    f.title,
    f.length
  FROM
    film f
    INNER JOIN film_category fc USING (film_id)
    INNER JOIN category c USING(category_id)
  WHERE
    c.name = 'Action'
)
SELECT * FROM action_films;

----------------------------------------

TITLE: Database Connection Setup
DESCRIPTION: Configuration for connecting to Neon Postgres database using the serverless driver and Drizzle ORM.

LANGUAGE: typescript
CODE:
import { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';
import { UserMessages } from './schema';

if (!process.env.DATABASE_URL) {
  throw new Error('DATABASE_URL must be a Neon postgres connection string');
}

const sql = neon(process.env.DATABASE_URL);

export const db = drizzle(sql, {
  schema: { UserMessages },
});

----------------------------------------

TITLE: Computing String Similarity with pg_trgm
DESCRIPTION: This SQL query demonstrates how to compute and display the similarity between two strings using pg_trgm functions.

LANGUAGE: sql
CODE:
SELECT show_trgm('War'), show_trgm('Bar'), similarity('War', 'Bar');

----------------------------------------

TITLE: Creating a Sample Table in PostgreSQL
DESCRIPTION: This snippet creates a new table called 'contacts' with four columns: id, first_name, last_name, and email.

LANGUAGE: sql
CODE:
CREATE TABLE contacts (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(384) NOT NULL UNIQUE
);

----------------------------------------

TITLE: Using OR Operator in PostgreSQL WHERE Clause
DESCRIPTION: Shows how to use the OR operator in a WHERE clause to find customers matching either of two conditions.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
WHERE
  last_name = 'Rodriguez'
  OR first_name = 'Adam';

----------------------------------------

TITLE: Recursive Null Removal from JSONB Column
DESCRIPTION: Demonstrates how to recursively remove all null values from a JSONB column in a table, including nested objects and their fields.

LANGUAGE: sql
CODE:
SELECT jsonb_strip_nulls(attributes) AS cleaned_attributes
FROM products;

----------------------------------------

TITLE: PostgreSQL LIMIT with OFFSET Example
DESCRIPTION: Example demonstrating how to retrieve 4 films starting from the fourth one ordered by film_id

LANGUAGE: sql
CODE:
SELECT
  film_id,
  title,
  release_year
FROM
  film
ORDER BY
  film_id
LIMIT 4 OFFSET 3;

----------------------------------------

TITLE: Setting maintenance_work_mem in PostgreSQL
DESCRIPTION: This SQL command sets the maintenance_work_mem parameter to optimize pgvector index build time. It's recommended to set this value to your working set size, not exceeding 50-60% of available RAM.

LANGUAGE: sql
CODE:
SET maintenance_work_mem='10 GB';

----------------------------------------

TITLE: Creating a Publication for a Single Table in PostgreSQL
DESCRIPTION: This command creates a publication named 'my_publication' that tracks changes made to the 'users' table.

LANGUAGE: sql
CODE:
CREATE PUBLICATION my_publication FOR TABLE users;

----------------------------------------

TITLE: Record Variables in FOR LOOP Statement
DESCRIPTION: Example showing how to use record variables within a FOR LOOP to iterate over multiple rows from the film table and display their details.

LANGUAGE: plpgsql
CODE:
do
$$
declare
	rec record;
begin
	for rec in select title, length
			from film
			where length > 50
			order by length
	loop
		raise notice '% (%)', rec.title, rec.length;
	end loop;
end;
$$;

----------------------------------------

TITLE: Creating Parent-Child Tables with DELETE CASCADE
DESCRIPTION: Example of creating two related tables with a foreign key constraint that includes DELETE CASCADE functionality. This setup demonstrates the basic structure needed for cascading deletes.

LANGUAGE: sql
CODE:
CREATE TABLE parent_table(
    id SERIAL PRIMARY KEY,
    ...
);

CREATE TABLE child_table(
    id SERIAL PRIMARY KEY,
    parent_id INT,
    FOREIGN_KEY(parent_id)
       REFERENCES parent_table(id)
       ON DELETE CASCADE
);

----------------------------------------

TITLE: Initializing Neon Python SDK and Getting User Info
DESCRIPTION: This Python code demonstrates how to initialize the Neon API client using the Python SDK and retrieve information about the current user. It shows two methods of initialization: using environment variables or explicitly providing an API key.

LANGUAGE: python
CODE:
from neon_api import NeonAPI

# Initialize the client.
neon = NeonAPI.from_environ() or NeonAPI(api_key='your_api_key')

# Get the current user
user = neon.me()
print(user)

----------------------------------------

TITLE: Installing psycopg2 with pip in Python
DESCRIPTION: This command installs the psycopg2-binary package using pip, which is a popular Python library for running raw Postgres queries.

LANGUAGE: shell
CODE:
pip install psycopg2-binary

----------------------------------------

TITLE: Database Connection Management
DESCRIPTION: SQLAlchemy setup for database connection handling and session management.

LANGUAGE: python
CODE:
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv
import os

load_dotenv()

SQLALCHEMY_DATABASE_URL = os.getenv("DATABASE_URL")

engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

----------------------------------------

TITLE: Setting Up Python Virtual Environment
DESCRIPTION: Commands to create and activate a Python virtual environment for the project. This isolates the project dependencies.

LANGUAGE: bash
CODE:
python -m venv myenv

# On macOS and Linux
source myenv/bin/activate

# On Windows
myenv\Scripts\activate

----------------------------------------

TITLE: Basic PostgreSQL Subquery Syntax
DESCRIPTION: Demonstrates the basic syntax of a PostgreSQL subquery. The subquery is enclosed in parentheses and is executed first, with its result used by the main query in the WHERE clause.

LANGUAGE: SQL
CODE:
SELECT
  select_list
FROM
  table1
WHERE
  columnA operator (
    SELECT
      columnB
    FROM
      table2
    WHERE
      condition
  );

----------------------------------------

TITLE: Querying All Rows from PostgreSQL Table in C#
DESCRIPTION: Demonstrates how to retrieve and display all records from a PostgreSQL students table using C# ADO.NET. Uses NpgsqlDataReader to iterate through results and display student details.

LANGUAGE: csharp
CODE:
using Npgsql;

var sql = @"SELECT
              id,
              first_name,
              last_name,
              email,
              registration_date
            FROM
              students";

string connectionString = ConfigurationHelper.GetConnectionString("DefaultConnection");

try
{
    // Open a connection
    await using var dataSource = NpgsqlDataSource.Create(connectionString);

    // Create a Command
    await using var cmd = dataSource.CreateCommand(sql);

    // Create a new data reader
    using var reader = await cmd.ExecuteReaderAsync();

    // Read data from the table
    while (await reader.ReadAsync())
    {
        var id = reader.GetInt32(0);
        var firstName = reader.GetString(1);
        var lastName = reader.GetString(2);
        var email = reader.GetString(3);
        var registrationDate = reader.GetDateTime(4);

        // Display the student details
        Console.WriteLine($"{id}\t{firstName}\t{lastName}\t{email}\t{registrationDate.ToShortDateString()}");
    }
}
catch (NpgsqlException ex)
{
    Console.WriteLine($"Error: {ex.Message}");
}

----------------------------------------

TITLE: Running Authorized Queries in Client Component
DESCRIPTION: This TypeScript code for a client component shows how to run authenticated queries using JWTs from Azure Active Directory in a React component, applying RLS policies based on the user's identity.

LANGUAGE: typescript
CODE:
'use client';

import type { Todo } from '@/app/schema';
import { neon } from '@neondatabase/serverless';
import { useMsal } from "@azure/msal-react";
import { useEffect, useState } from 'react';

const getDb = (token: string) =>
  neon(process.env.NEXT_PUBLIC_DATABASE_AUTHENTICATED_URL!, {
    authToken: token,
  });

export default function TodoList() {
  const [todos, setTodos] = useState<Array<Todo>>();
  const { instance } = useMsal();

  useEffect(() => {
    async function fetchTodos() {
      const activeAccount = instance.getActiveAccount();

      if (
        !activeAccount ||
        !activeAccount.idToken ||
        !activeAccount.idTokenClaims?.sub
      ) {
        return;
      }

      const authToken = activeAccount.idToken;
      const sql = getDb(authToken);

      // WHERE filter is optional because of RLS.
      // But we send it anyway for performance reasons.
      const todosResponse = await
        sql('SELECT * FROM todos WHERE user_id = auth.user_id()');

      setTodos(todosResponse as Array<Todo>);
    }

    fetchTodos();
  }, []);

  return (
    <ul>
      {todos?.map((todo) => (
        <li key={todo.id}>
          {todo.task}
        </li>
      ))}
    </ul>
  );
}

----------------------------------------

TITLE: Combining AVG() and SUM() Functions
DESCRIPTION: Shows how to use AVG() and SUM() functions together to calculate both average and total amounts.

LANGUAGE: sql
CODE:
SELECT
	AVG(amount)::numeric(10,2),
	SUM(amount)::numeric(10,2)
FROM
	payment;

----------------------------------------

TITLE: Querying Most Frequently Executed Queries in Postgres
DESCRIPTION: This SQL query retrieves the top 100 most frequently executed queries, including user ID, query text, execution count, total execution time, and average execution time.

LANGUAGE: sql
CODE:
SELECT
  userid,
  query,
  calls,
  total_exec_time / 1000 AS total_seconds,
  mean_exec_time AS avg_ms
FROM pg_stat_statements
ORDER BY calls DESC
LIMIT 100;

----------------------------------------

TITLE: Generating RSA Key Pair for JWT Signing in TypeScript
DESCRIPTION: This code generates a new RSA key pair for signing JWTs, converts the keys to JWK format, adds metadata, and saves them to files. It uses the 'jose' library and demonstrates proper key management practices.

LANGUAGE: typescript
CODE:
import { generateKeyPair, exportJWK } from 'jose';
import fs from 'fs';

async function generateAndExportKeys() {
  const { publicKey, privateKey } = await generateKeyPair('RS256', { extractable: true });

  const privateJwk = await exportJWK(privateKey);
  const publicJwk = await exportJWK(publicKey);

  privateJwk.use = 'sig';
  privateJwk.kid = 'my-key-id';
  privateJwk.alg = 'RS256';

  publicJwk.use = 'sig';
  publicJwk.kid = 'my-key-id';
  publicJwk.alg = 'RS256';

  fs.writeFileSync('privateKey.jwk.json', JSON.stringify(privateJwk, null, 2));
  fs.writeFileSync('publicKey.jwk.json', JSON.stringify(publicJwk, null, 2));

  console.log('Keys generated and saved to files.');
}

generateAndExportKeys();

----------------------------------------

TITLE: Creating Nested JSON Objects with json_object() and json_build_object() in PostgreSQL
DESCRIPTION: Shows an advanced example of using json_object() in combination with json_build_object() to create nested JSON structures. This query creates a complex book info object with nested author details.

LANGUAGE: sql
CODE:
SELECT json_build_object(
  'title', title,
  'author', json_object(ARRAY['name', 'genre'], ARRAY[author, genre])
) AS book_info
FROM book_inventory;

----------------------------------------

TITLE: Neon Database Connection String
DESCRIPTION: Example of the database connection string format for the .env file

LANGUAGE: shell
CODE:
DATABASE_URL=postgresql://[user]:[password]@[neon_hostname]/[dbname]?sslmode=require

----------------------------------------

TITLE: Using PostgreSQL SUM() with GROUP BY
DESCRIPTION: Calculates the total amount paid by each customer using SUM() and GROUP BY.

LANGUAGE: sql
CODE:
SELECT
  customer_id,
  SUM (amount) AS total
FROM
  payment
GROUP BY
  customer_id
ORDER BY
  total;

----------------------------------------

TITLE: Failed Insert with Invalid Character Length
DESCRIPTION: Example of an unsuccessful INSERT operation that fails due to exceeding CHAR(1) length limit.

LANGUAGE: sql
CODE:
INSERT INTO character_tests (x, y, z)
VALUES
  (
    'Yes', 'This is a test for varchar',
    'This is a very long text for the PostgreSQL text column'
  );

----------------------------------------

TITLE: Basic PostgreSQL CROSS JOIN Syntax
DESCRIPTION: Shows the fundamental syntax for performing a CROSS JOIN between two tables in PostgreSQL.

LANGUAGE: sql
CODE:
SELECT
  select_list
FROM
  table1
CROSS JOIN table2;

----------------------------------------

TITLE: Implementing database router for read replicas
DESCRIPTION: Creates a custom database router to direct read operations to the replica database and write operations to the primary database.

LANGUAGE: python
CODE:
class PrimaryReplicaRouter:
    def db_for_read(self, model, **hints):
        return 'replica'

    def db_for_write(self, model, **hints):
        return 'default'

    def allow_relation(self, obj1, obj2, **hints):
        return True

    def allow_migrate(self, db, app_label, model_name=None, **hints):
        return True

----------------------------------------

TITLE: Creating IVFFlat Index for pgvector
DESCRIPTION: This SQL command creates an IVFFlat index on the 'embedding' column of the 'items' table. It sets the 'lists' parameter to 1000, which specifies the number of k-means clusters to divide the dataset into.

LANGUAGE: sql
CODE:
CREATE INDEX items_embedding_cosine_idx ON items USING ivfflat (embedding vector_l2_ops) WITH (lists = 1000);

----------------------------------------

TITLE: Finding Queries Returning Most Rows in Postgres
DESCRIPTION: This SQL query identifies the top 100 queries that return the most rows, ordered by the number of rows returned, and includes the average execution time for each query.

LANGUAGE: sql
CODE:
SELECT
    query,
    rows,
    mean_exec_time
FROM
    pg_stat_statements
ORDER BY
    rows DESC
LIMIT
    100;

----------------------------------------

TITLE: Finding Films Longer Than Rating Average in PostgreSQL
DESCRIPTION: This SQL query demonstrates a correlated subquery that finds films with lengths greater than the average length for their respective ratings. The subquery calculates the average length for each rating group and correlates with the outer query using the rating column.

LANGUAGE: sql
CODE:
SELECT film_id, title, length, rating
FROM film f
WHERE length > (
    SELECT AVG(length)
    FROM film
    WHERE rating = f.rating
);

----------------------------------------

TITLE: Using MERGE with RETURNING Clause in PostgreSQL
DESCRIPTION: Demonstrates a MERGE operation that handles INSERT, UPDATE, and DELETE operations while providing detailed feedback through the RETURNING clause. This example uses the previously created products and product_updates tables.

LANGUAGE: sql
CODE:
MERGE INTO products p
USING product_updates u
ON p.name = u.name
WHEN MATCHED AND u.status = 'discontinued' THEN
    DELETE
WHEN MATCHED AND u.status = 'active' THEN
    UPDATE SET
        price = COALESCE(u.price, p.price),
        stock = u.stock,
        status = u.status,
        last_updated = CURRENT_TIMESTAMP
WHEN NOT MATCHED AND u.status = 'active' THEN
    INSERT (name, price, stock, status)
    VALUES (u.name, u.price, u.stock, u.status)
RETURNING
    merge_action() as action,
    p.product_id,
    p.name,
    p.price,
    p.stock,
    p.status,
    p.last_updated;

----------------------------------------

TITLE: Using LIKE with ESCAPE Option in PostgreSQL
DESCRIPTION: This query demonstrates how to use the ESCAPE option with LIKE to treat wildcard characters as literals when searching for specific patterns in text data.

LANGUAGE: sql
CODE:
SELECT * FROM t
WHERE message LIKE '%10$%%' ESCAPE '$';

----------------------------------------

TITLE: Ordered Array Aggregation with Employee Skills
DESCRIPTION: Demonstrates ordered array aggregation by collecting employee skills in alphabetical order.

LANGUAGE: sql
CODE:
WITH employees AS (
  SELECT 1 AS emp_id, 'John' AS name, 'SQL' AS skill
  UNION ALL SELECT 1, 'John', 'Python'
  UNION ALL SELECT 1, 'John', 'Java'
  UNION ALL SELECT 2, 'Jane', 'C++'
  UNION ALL SELECT 2, 'Jane', 'Ruby'
)
SELECT
  emp_id,
  name,
  array_agg(skill ORDER BY skill) AS skills
FROM employees
GROUP BY emp_id, name
ORDER BY emp_id;

----------------------------------------

TITLE: Configuring GitHub Action for Neon Twin Creation
DESCRIPTION: This YAML configuration sets up a GitHub Action that creates a partial Neon Twin database. It includes steps for installing PostgreSQL, dumping schema and data from a production database, and restoring them to a development database.

LANGUAGE: yaml
CODE:
name: Create Neon Twin

on:
  schedule:
    - cron: '0 0 * * *' # Runs at midnight UTC
  workflow_dispatch:

env:
  PROD_DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }} # Production or primary database
  DEV_DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }} # Development database
  PG_VERSION: '17'

jobs:
  dump-and-restore:
    runs-on: ubuntu-latest

    steps:
      - name: Install PostgreSQL
        run: |
          sudo apt update
          yes '' | sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh
          sudo apt install -y postgresql-${{ env.PG_VERSION }}

      - name: Set PostgreSQL binary path
        run: echo "POSTGRES=/usr/lib/postgresql/${{ env.PG_VERSION }}/bin" >> $GITHUB_ENV

      - name: Dump schema
        run: |
          $POSTGRES/pg_dump -Fc --schema-only -f "${{ github.workspace }}/all-schema.bak" "${{ env.PROD_DATABASE_URL }}"

      - name: Dump data
        run: |
          $POSTGRES/psql "${{ env.PROD_DATABASE_URL }}" -c "\copy (SELECT * FROM users ORDER BY user_id DESC LIMIT 50) TO '${{ github.workspace }}/users-subset.csv' WITH CSV HEADER"

      - name: Drop tables and schema
        run: |
          $POSTGRES/psql "${{ env.DEV_DATABASE_URL }}" -c "DROP SCHEMA IF EXISTS public CASCADE;"
          $POSTGRES/psql "${{ env.DEV_DATABASE_URL }}" -c "CREATE SCHEMA public;"

      - name: Restore schema
        run: |
          $POSTGRES/pg_restore --clean --no-owner --no-acl --if-exists --schema-only -d "${{ env.DEV_DATABASE_URL }}" "${{ github.workspace }}/all-schema.bak"

      - name: Restore data
        run: |
          $POSTGRES/psql "${{ env.DEV_DATABASE_URL }}" -c "\copy public.users FROM '${{ github.workspace }}/users-subset.csv' WITH CSV HEADER"

----------------------------------------

TITLE: Updating Books in Neon Database using C# and Npgsql
DESCRIPTION: This C# code snippet shows how to update a book's information in the database using a parameterized UPDATE statement with Npgsql.

LANGUAGE: C#
CODE:
using (var conn = new NpgsqlConnection(connString))
{
    Console.Out.WriteLine("Opening connection");
    conn.Open();

    using (var command = new NpgsqlCommand(
        @"UPDATE books
          SET year_published = @year
          WHERE id = @id", conn))
    {
        command.Parameters.AddWithValue("id", 1);
        command.Parameters.AddWithValue("year", 1926);

        int nRows = command.ExecuteNonQuery();
        Console.Out.WriteLine($"Number of books updated={nRows}");
    }
}

----------------------------------------

TITLE: Creating Read-Write Role and User in PostgreSQL
DESCRIPTION: SQL commands to create a read-write role with full CRUD permissions and assign it to a user. Includes database connection, schema usage, and table manipulation privileges.

LANGUAGE: sql
CODE:
CREATE ROLE readwrite PASSWORD '<password>';
GRANT CONNECT ON DATABASE <database> TO readwrite;
GRANT USAGE, CREATE ON SCHEMA <schema> TO readwrite;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA <schema> TO readwrite;
ALTER DEFAULT PRIVILEGES IN SCHEMA <schema> GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO readwrite;
GRANT USAGE ON ALL SEQUENCES IN SCHEMA <schema> TO readwrite;
ALTER DEFAULT PRIVILEGES IN SCHEMA <schema> GRANT USAGE ON SEQUENCES TO readwrite;

CREATE USER readwrite_user1 WITH PASSWORD '<password>';

GRANT readwrite TO readwrite_user1;

----------------------------------------

TITLE: Time Zone Handling Example
DESCRIPTION: Illustrates time zone handling in PostgreSQL using both time-zone aware and unaware columns.

LANGUAGE: sql
CODE:
CREATE TABLE time_example (
    ts TIMESTAMP,
    tstz_utc TIMESTAMPTZ,
    tstz_pst TIMESTAMPTZ
);

INSERT INTO time_example (ts, tstz_utc, tstz_pst)
VALUES
    ('2024-01-01 09:00:00-08', '2024-01-01 09:00:00+00', '2024-01-01 09:00:00-08');

----------------------------------------

TITLE: Using the Match Operator for Full-text Search in PostgreSQL
DESCRIPTION: This snippet demonstrates how to use the match operator (@@) to compare a tsvector against a tsquery for full-text search operations.

LANGUAGE: SQL
CODE:
SELECT
  to_tsvector(
    'The quick brown fox jumps over the lazy dog.'
  ) @@ to_tsquery('jumping') result;

----------------------------------------

TITLE: Monitoring Slow Queries in Neon Postgres
DESCRIPTION: SQL query to identify slow queries with an average execution time greater than 1 unit. It returns the query text, mean execution time, and number of calls, ordered by mean execution time in descending order.

LANGUAGE: sql
CODE:
SELECT
    query,
    mean_exec_time,
    calls
FROM
    pg_stat_statements
WHERE
    mean_exec_time > 1
ORDER BY
    mean_exec_time DESC;

----------------------------------------

TITLE: Installing Neon Serverless Driver and WebSocket Dependencies
DESCRIPTION: This bash snippet demonstrates the installation of the Neon serverless driver, WebSocket package, and its TypeScript types using npm. These are required for using the Neon serverless driver with Drizzle ORM.

LANGUAGE: bash
CODE:
npm install ws @neondatabase/serverless
npm install -D @types/ws

----------------------------------------

TITLE: Sorting Locations by Distance using ST_Distance in Postgres
DESCRIPTION: This SQL query uses the ST_Distance function to sort locations based on their proximity to a given point (Miami in this case). It demonstrates how to order geospatial results by distance in Postgres using PostGIS.

LANGUAGE: sql
CODE:
SELECT name, ST_Distance(geom, ST_GeomFromText('POINT(-80.1918 25.7617)', 4326)) AS distance
FROM locations
ORDER BY distance ASC;

----------------------------------------

TITLE: Ranking Full Text Search Results in Postgres
DESCRIPTION: This SQL query demonstrates how to rank full text search results using the ts_rank() function, which counts the number of matching tokens.

LANGUAGE: sql
CODE:
SELECT
    id,
    title,
    ts_rank(searchable, websearch_to_tsquery('english', 'searching text')) AS rank
  FROM documents
  WHERE searchable @@ websearch_to_tsquery('english', 'searching text')
  ORDER BY rank DESC;

----------------------------------------

TITLE: Getting Basic Table Size in PostgreSQL
DESCRIPTION: Demonstrates how to get the size of a specific table using pg_relation_size() and format it with pg_size_pretty() for human-readable output

LANGUAGE: sql
CODE:
select pg_relation_size('actor');

SELECT
    pg_size_pretty (pg_relation_size('actor')) size;

----------------------------------------

TITLE: Querying User-Related Data with Left Join in SQL
DESCRIPTION: This SQL query demonstrates how to fetch posts with author names, using a LEFT JOIN to handle potential sync delays and filtering out deleted users.

LANGUAGE: sql
CODE:
SELECT posts.*, neon_auth.users_sync.name as author_name
FROM posts
LEFT JOIN neon_auth.users_sync ON posts.author_id = neon_auth.users_sync.id
WHERE neon_auth.users_sync.deleted_at IS NULL;

----------------------------------------

TITLE: Creating Department and Employee Tables with CASCADE
DESCRIPTION: Creation of departments and employees tables with a foreign key relationship and DELETE CASCADE. This example shows a practical implementation in a business context.

LANGUAGE: sql
CODE:
CREATE TABLE departments (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    department_id INT NOT NULL,
    FOREIGN KEY(department_id)
       REFERENCES departments(id)
       ON DELETE CASCADE
);

----------------------------------------

TITLE: Using LIKE Operator in PostgreSQL WHERE Clause
DESCRIPTION: Shows how to use the LIKE operator with a wildcard to find strings matching a pattern in a WHERE clause.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
WHERE
  first_name LIKE 'Ann%';

----------------------------------------

TITLE: Basic json_agg() Usage with Orders Example
DESCRIPTION: Demonstrates how to use json_agg() to aggregate order data into JSON arrays, combining it with json_build_object() to create structured output.

LANGUAGE: sql
CODE:
WITH orders AS (
    SELECT *
    FROM (
        VALUES
            (1, 'Widget A', 2),
            (1, 'Widget B', 1),
            (2, 'Widget C', 3),
            (2, 'Widget D', 2)
    ) AS t(order_id, product_name, quantity)
)
SELECT
  order_id,
  json_agg(json_build_object('product', product_name, 'quantity', quantity)) AS products
FROM orders
GROUP BY order_id;

----------------------------------------

TITLE: Using a Subquery with the IN Operator
DESCRIPTION: This example demonstrates how to use a subquery that returns multiple rows with the IN operator. It retrieves all action films by first getting the film_ids from a subquery.

LANGUAGE: SQL
CODE:
SELECT
  film_id,
  title
FROM
  film
WHERE
  film_id IN (
    SELECT
      film_id
    FROM
      film_category
      INNER JOIN category USING(category_id)
    WHERE
      name = 'Action'
  )
ORDER BY
  film_id;

----------------------------------------

TITLE: Configuring Prisma Client with Read Replica
DESCRIPTION: JavaScript code to configure Prisma Client with read replica support

LANGUAGE: javascript
CODE:
import { PrismaClient } from '@prisma/client';
import { readReplicas } from '@prisma/extension-read-replicas';

const prisma = new PrismaClient().$extends(
  readReplicas({
    url: DATABASE_REPLICA_URL,
  })
);

----------------------------------------

TITLE: Author Model Definition
DESCRIPTION: Laravel Eloquent model definition for Author with relationship to Books.

LANGUAGE: php
CODE:
<?php

namespace App\Models;
use Illuminate\Database\Eloquent\Model;

class Author extends Model
{
    protected $fillable = ['name', 'bio'];
    public function books()
    {
        return $this->hasMany(Book::class);
    }
}

----------------------------------------

TITLE: Drizzle ORM Read Replica Configuration
DESCRIPTION: Setting up Drizzle ORM with multiple read replicas and primary database configuration

LANGUAGE: javascript
CODE:
import { sql } from 'drizzle-orm';
import { drizzle } from 'drizzle-orm/node-postgres';
import { boolean, jsonb, pgTable, serial, text, timestamp, withReplicas } from 'drizzle-orm/pg-core';
const usersTable = pgTable('users', {
  id: serial('id' as string).primaryKey(),
  name: text('name').notNull(),
  verified: boolean('verified').notNull().default(false),
  jsonb: jsonb('jsonb').$type<string[]>(),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
});
const primaryDb = drizzle("postgres://user:password@host:port/primary_db");
const read1 = drizzle("postgres://user:password@host:port/read_replica_1");
const read2 = drizzle("postgres://user:password@host:port/read_replica_2");
const db = withReplicas(primaryDb, [read1, read2]);

----------------------------------------

TITLE: Basic Branch Schema Comparison Using Neon CLI
DESCRIPTION: Demonstrates how to compare schemas between two branches using the Neon CLI schema-diff command.

LANGUAGE: bash
CODE:
neon branches schema-diff main dev/alex

----------------------------------------

TITLE: Creating Publication for Specific Table in SQL
DESCRIPTION: SQL command to create a publication for a specific table in the source database. This defines what will be replicated.

LANGUAGE: sql
CODE:
CREATE PUBLICATION my_publication FOR TABLE playing_with_neon;

----------------------------------------

TITLE: Creating a Table with SERIAL Column in PostgreSQL
DESCRIPTION: This snippet demonstrates how to create a new table with a SERIAL column as the primary key. The SERIAL pseudo-type automatically creates a sequence and sets it as the default value for the column.

LANGUAGE: sql
CODE:
CREATE TABLE table_name(
    id SERIAL
);

----------------------------------------

TITLE: Extracting JSON Object Values
DESCRIPTION: Shows how to extract values from JSON objects using key-based extraction.

LANGUAGE: sql
CODE:
SELECT
  data -> 'current_position' current_position
FROM
  requests
WHERE
  employee_id = 1;

----------------------------------------

TITLE: Inserting Tasks into Postgres Queue
DESCRIPTION: This SQL snippet inserts sample tasks into the 'tasks' table. Each task is represented as a JSON object in the payload column, containing task-specific data.

LANGUAGE: sql
CODE:
INSERT INTO tasks (payload) VALUES
  ('{"task": "email", "recipient": "user1@example.com"}'),
  ('{"task": "email", "recipient": "user2@example.com"}'),
  ('{"task": "report", "type": "sales"}');

----------------------------------------

TITLE: Using LAG() Window Function in PostgreSQL
DESCRIPTION: This SQL query demonstrates the LAG() window function. It returns the price from the previous row within each product group and calculates the difference between current and previous prices.

LANGUAGE: SQL
CODE:
SELECT
	product_name,
	group_name,
	price,
	LAG (price, 1) OVER (
		PARTITION BY group_name
		ORDER BY
			price
	) AS prev_price,
	price - LAG (price, 1) OVER (
		PARTITION BY group_name
		ORDER BY
			price
	) AS cur_prev_diff
FROM
	products
INNER JOIN product_groups USING (group_id);

----------------------------------------

TITLE: Implementing RLS Policies with Drizzle ORM
DESCRIPTION: TypeScript code using Drizzle ORM to define a 'todos' table schema with Row-Level Security policies. It uses the crudPolicy function to create CRUD policies based on the authenticated user's ID.

LANGUAGE: typescript
CODE:
import { InferSelectModel, sql } from 'drizzle-orm';
import { bigint, boolean, pgTable, text, timestamp } from 'drizzle-orm/pg-core';
import { authenticatedRole, authUid, crudPolicy } from 'drizzle-orm/neon';

// schema for TODOs table
export const todos = pgTable(
  'todos',
  {
    id: bigint('id', { mode: 'bigint' }).primaryKey().generatedByDefaultAsIdentity(),
    userId: text('user_id')
      .notNull()
      .default(sql`(auth.user_id())`),
    task: text('task').notNull(),
    isComplete: boolean('is_complete').notNull().default(false),
    insertedAt: timestamp('inserted_at', { withTimezone: true }).defaultNow().notNull(),
  },
  // Create RLS policy for the table
  (table) => [
    crudPolicy({
      role: authenticatedRole,
      read: authUid(table.userId),
      modify: authUid(table.userId),
    }),
  ]
);

export type Todo = InferSelectModel<typeof todos>;

----------------------------------------

TITLE: Configuring Next.js Frontend to Display Neon Data
DESCRIPTION: TypeScript and JSX code for a Next.js page component that fetches and displays user data from the Neon database using WunderGraph's generated hooks.

LANGUAGE: typescript
CODE:
import { NextPage } from 'next';
import { useQuery, withWunderGraph } from '../components/generated/nextjs';

const Home: NextPage = () => {
  const dragons = useQuery({
    operationName: 'Dragons',
  });
  const users = useQuery({
    operationName: 'Users',
  });

  const refresh = () => {
    dragons.mutate();
  };
  return (
    <div>
      {/* ... (HTML structure) ... */}
      <code className="p-3" data-testid="result">
        {JSON.stringify(users, null, 2)}
      </code>
      {/* ... (more HTML structure) ... */}
    </div>
  );
};

export default withWunderGraph(Home);

----------------------------------------

TITLE: Basic Syntax of jsonb_array_elements_text()
DESCRIPTION: Shows the fundamental syntax for using the jsonb_array_elements_text() function to expand JSON arrays into text values.

LANGUAGE: sql
CODE:
jsonb_array_elements_text(json_array)

----------------------------------------

TITLE: Editing a Read Replica using Neon API
DESCRIPTION: This curl command shows how to update the configuration of a read replica compute using the Neon API. It sends a PATCH request to modify settings such as autoscaling limits and suspend timeout.

LANGUAGE: bash
CODE:
curl --request PATCH \
     --url https://console.neon.tech/api/v2/projects/<project_id>/endpoints/<endpoint_id> \
     --header 'Accept: application/json' \
     --header "Authorization: Bearer $NEON_API_KEY" \
     --header 'Content-Type: application/json' \
     --data '
{
  "endpoint": {
    "autoscaling_limit_min_cu": 25,
    "autoscaling_limit_max_cu": 3,
    "suspend_timeout_seconds": 604800,
    "provisioner": "k8s-neonvm"
  }
}'

----------------------------------------

TITLE: Inserting Element into Nested JSON Array
DESCRIPTION: Example of using jsonb_insert() to add an element to a nested array within a JSON structure.

LANGUAGE: SQL
CODE:
SELECT
  jsonb_insert(
    '[1,2,[4,5],6]', '{2,0}', '3'
  );

----------------------------------------

TITLE: Basic Random Number Generation in Postgres SQL
DESCRIPTION: Demonstrates how to use the random() function to generate random floating-point numbers between 0 and 1, random integers, and random decimals within a specified range.

LANGUAGE: sql
CODE:
SELECT random(); -- Generates a random floating point number between 0.0 and 1.0
-- 0.555470146570157

SELECT random(1, 6); -- Generates a random integer between 1 and 6
-- 4

SELECT random(1.5, 3.54); -- Generates a random decimal number between 1.5 and 3.54 with 2 decimal places precision
-- 2.66

----------------------------------------

TITLE: CREATE TRIGGER Statement Syntax in PostgreSQL
DESCRIPTION: This code snippet illustrates the basic syntax of the CREATE TRIGGER statement in PostgreSQL. It shows how to specify timing, events, table association, and trigger type.

LANGUAGE: sql
CODE:
CREATE TRIGGER trigger_name
   {BEFORE | AFTER} { event }
   ON table_name
   [FOR [EACH] { ROW | STATEMENT }]
       EXECUTE PROCEDURE trigger_function

----------------------------------------

TITLE: Initializing Postgres Vector Store in C# with Semantic Kernel
DESCRIPTION: Sets up a Postgres vector store connection using Semantic Kernel and Neon database. Uses the pgvector extension and Postgres Vector Store connector to establish the connection.

LANGUAGE: csharp
CODE:
// File: Program.cs

using Microsoft.SemanticKernel.Connectors.Postgres;
using Npgsql;

class Program
{
    static void Main()
    {
        var connectionString = "Host=myhost;Username=myuser;Password=mypass;Database=mydb";
        var dataSourceBuilder = new NpgsqlDataSourceBuilder(connectionString);
        dataSourceBuilder.UseVector();
        using var dataSource = dataSourceBuilder.Build();

        var vectorStore = new PostgresVectorStore(dataSource);
        Console.WriteLine("Vector store created successfully.");
    }
}

----------------------------------------

TITLE: Basic PostgreSQL CUBE Syntax
DESCRIPTION: Demonstrates the basic syntax for using CUBE to generate multiple grouping sets with aggregation functions.

LANGUAGE: sql
CODE:
SELECT
    c1,
    c2,
    c3,
    aggregate (c4)
FROM
    table_name
GROUP BY
    CUBE (c1, c2, c3);

----------------------------------------

TITLE: Finding Film by ID using IN Parameter Mode
DESCRIPTION: PL/pgSQL function demonstrating the IN parameter mode to find a film's title by its ID. The function accepts a film_id parameter and returns the corresponding film title as varchar.

LANGUAGE: plpgsql
CODE:
create or replace function find_film_by_id(p_film_id int)
returns varchar
language plpgsql
as $$
declare
   film_title film.title%type;
begin
  -- find film title by id
  select title
  into film_title
  from film
  where film_id = p_film_id;

  if not found then
     raise 'Film with id % not found', p_film_id;
  end if;

  return film_title;

end;$$

----------------------------------------

TITLE: EXPLAIN Multi-Table Join Query
DESCRIPTION: Example of using EXPLAIN to show the execution plan for a query joining multiple tables with ordering.

LANGUAGE: SQL
CODE:
EXPLAIN
SELECT
    f.film_id,
    title,
    name category_name
FROM
    film f
    INNER JOIN film_category fc
        ON fc.film_id = f.film_id
    INNER JOIN category c
        ON c.category_id = fc.category_id
ORDER BY
    title;

----------------------------------------

TITLE: Basic Assert Statement Syntax in PL/pgSQL
DESCRIPTION: Demonstrates the basic syntax of the assert statement in PL/pgSQL. The statement takes a condition and an optional message parameter.

LANGUAGE: sql
CODE:
assert condition [, message];

----------------------------------------

TITLE: Express App with Postgres.js
DESCRIPTION: Express application implementation using Postgres.js client to connect to the database and query the PostgreSQL version.

LANGUAGE: javascript
CODE:
require('dotenv').config();

const express = require('express');
const postgres = require('postgres');

const app = express();
const PORT = process.env.PORT || 4242;

app.get('/', async (_, res) => {
  const sql = postgres(`${process.env.DATABASE_URL}`);
  const response = await sql`SELECT version()`;
  const { version } = response[0];
  res.json({ version });
});

app.listen(PORT, () => {
  console.log(`Listening to http://localhost:${PORT}`);
});

----------------------------------------

TITLE: Querying Scalar Value from PostgreSQL in C#
DESCRIPTION: Demonstrates how to retrieve a single scalar value (count of students) from a PostgreSQL table using ExecuteScalarAsync method.

LANGUAGE: csharp
CODE:
using Npgsql;

var sql = @"SELECT count(*) FROM students";

string connectionString = ConfigurationHelper.GetConnectionString("DefaultConnection");

try
{
    // Open a connection
    await using var dataSource = NpgsqlDataSource.Create(connectionString);

    // Create a Command
    await using var cmd = dataSource.CreateCommand(sql);

    // Return the total number of students
    var studentCount = await cmd.ExecuteScalarAsync();

    Console.WriteLine($"Student count: {studentCount}");
}
catch (NpgsqlException ex)
{
    Console.WriteLine($"Error: {ex.Message}");
}

----------------------------------------

TITLE: Posts Table Migration
DESCRIPTION: Database migration for creating the posts table with necessary fields and relationships.

LANGUAGE: php
CODE:
public function up()
{
    Schema::create('posts', function (Blueprint $table) {
        $table->id();
        $table->foreignId('user_id')->constrained()->onDelete('cascade');
        $table->string('title');
        $table->text('content');
        $table->boolean('is_published')->default(false);
        $table->timestamps();
    });
}

----------------------------------------

TITLE: EXPLAIN ANALYZE Multi-Table Join Query
DESCRIPTION: Example of using EXPLAIN ANALYZE to show the execution plan with actual runtime statistics for a multi-table join query.

LANGUAGE: SQL
CODE:
EXPLAIN ANALYZE
    SELECT
        f.film_id,
        title,
        name category_name
    FROM
        film f
        INNER JOIN film_category fc
            ON fc.film_id = f.film_id
        INNER JOIN category c
            ON c.category_id = fc.category_id
    ORDER BY
        title;

----------------------------------------

TITLE: Finding Queries Returning Many Rows in Neon Postgres
DESCRIPTION: SQL query to identify the top 10 queries that return the most rows. It selects the query text and the number of rows returned, ordered by row count in descending order.

LANGUAGE: sql
CODE:
SELECT
    query,
    rows
FROM
    pg_stat_statements
ORDER BY
    rows DESC
LIMIT
    10;

----------------------------------------

TITLE: Installing Postgres Dependencies for Astro
DESCRIPTION: Commands to install different Postgres client libraries for an Astro project. Options include node-postgres, postgres.js, and the Neon serverless driver.

LANGUAGE: shell
CODE:
npm install pg

LANGUAGE: shell
CODE:
npm install postgres

LANGUAGE: shell
CODE:
npm install @neondatabase/serverless

----------------------------------------

TITLE: Table Aliases in PostgreSQL Self-Join
DESCRIPTION: Demonstrates using table aliases in a self-join scenario where the film table is referenced twice in the same query.

LANGUAGE: sql
CODE:
SELECT
    f1.title,
    f2.title,
    f1.length
FROM
    film f1
INNER JOIN film f2
    ON f1.film_id <> f2.film_id AND
       f1.length = f2.length;

----------------------------------------

TITLE: Conditional Checks with JSON_EXISTS() in PostgreSQL
DESCRIPTION: Demonstrates how to use JSON_EXISTS() for conditional checks within JSON data, such as checking for values meeting a specific condition.

LANGUAGE: sql
CODE:
-- Check for values meeting a condition
SELECT JSON_EXISTS(
    '{"scores": [85, 92, 78, 95]}',
    '$.scores[*] ? (@ > 90)'
);

----------------------------------------

TITLE: Getting Total Table Size in PostgreSQL
DESCRIPTION: Shows how to get the total size of a table including indexes using pg_total_relation_size()

LANGUAGE: sql
CODE:
SELECT
    pg_size_pretty (
        pg_total_relation_size ('actor')
    ) size;

----------------------------------------

TITLE: Updating TodoController for Read Replica Usage
DESCRIPTION: Modified TodoController to use separate read and write contexts, leveraging the read replica for read operations.

LANGUAGE: csharp
CODE:
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TodoApi.Data;
using TodoApi.Models;

namespace TodoApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class TodoController : ControllerBase
    {
        private readonly TodoDbContext _writeContext;
        private readonly TodoDbReadContext _readContext;

        public TodoController(TodoDbContext writeContext, TodoDbReadContext readContext)
        {
            _writeContext = writeContext;
            _readContext = readContext;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<Todo>>> GetTodos()
        {
            return await _readContext.Todos.ToListAsync();
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<Todo>> GetTodo(int id)
        {
            var todo = await _readContext.Todos.FindAsync(id);
            if (todo == null)
            {
                return NotFound();
            }
            return todo;
        }

        [HttpPost]
        public async Task<ActionResult<Todo>> PostTodo(Todo todo)
        {
            _writeContext.Todos.Add(todo);
            await _writeContext.SaveChangesAsync();
            return CreatedAtAction(nameof(GetTodo), new { id = todo.Id }, todo);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> PutTodo(int id, Todo todo)
        {
            if (id != todo.Id)
            {
                return BadRequest();
            }
            _writeContext.Entry(todo).State = EntityState.Modified;
            await _writeContext.SaveChangesAsync();
            return NoContent();
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteTodo(int id)
        {
            var todo = await _writeContext.Todos.FindAsync(id);
            if (todo == null)
            {
                return NotFound();
            }
            _writeContext.Todos.Remove(todo);
            await _writeContext.SaveChangesAsync();
            return NoContent();
        }
    }
}

----------------------------------------

TITLE: Implementing RLS Policies with SQL
DESCRIPTION: SQL implementation of RLS policies for a todos table with individual CRUD policies.

LANGUAGE: sql
CODE:
CREATE TABLE todos (
  id bigint generated by default as identity primary key,
  user_id text not null default (auth.user_id()),
  task text,
  is_complete boolean default false,
  inserted_at timestamp not null
);

alter table todos enable row level security;

create policy "Individuals can create todos." on todos for
  insert with check (auth.user_id() = user_id);

create policy "Individuals can view their own todos." on todos for
  select using (auth.user_id() = user_id);

create policy "Individuals can update their own todos." on todos for
  update using (auth.user_id() = user_id);

create policy "Individuals can delete their own todos." on todos for
  delete using (auth.user_id() = user_id);

----------------------------------------

TITLE: Using ROUND() with Table Data in PostgreSQL
DESCRIPTION: Demonstrates how to use the ROUND() function in combination with aggregate functions and JOIN operations to round data from tables. It calculates and rounds average rental fees for customers.

LANGUAGE: sql
CODE:
SELECT
    first_name,
    last_name,
    ROUND( AVG( amount ), 2 ) avg_rental
FROM
    payment
INNER JOIN customer
        USING(customer_id)
GROUP BY
    customer_id
ORDER BY
    avg_rental DESC;

----------------------------------------

TITLE: Querying Multiple Columns
DESCRIPTION: Example of selecting multiple specific columns (first_name, last_name, email) from the customer table.

LANGUAGE: sql
CODE:
SELECT
   first_name,
   last_name,
   email
FROM
   customer;

----------------------------------------

TITLE: Basic CREATE TABLE AS Syntax
DESCRIPTION: Shows the basic syntax for creating a new table from a query result

LANGUAGE: sql
CODE:
CREATE TABLE new_table_name
AS query;

----------------------------------------

TITLE: Complex JSON Aggregation with Sales Data
DESCRIPTION: Demonstrates combining json_agg() with json_build_object() to create structured JSON arrays of quarterly sales data by region.

LANGUAGE: sql
CODE:
WITH sales AS (
  SELECT 'North' AS region, 'Q1' AS quarter, 100000 AS amount
  UNION ALL SELECT 'North', 'Q2', 120000
  UNION ALL SELECT 'South', 'Q1', 80000
  UNION ALL SELECT 'South', 'Q2', 90000
)
SELECT
    region,
    json_agg(
        (SELECT json_build_object('quarter', quarter, 'amount', amount))
        ORDER BY quarter DESC
    ) AS quarterly_sales
FROM sales
GROUP BY region;

----------------------------------------

TITLE: Bulk Inserting Test Data for JSONB Indexing in Postgres
DESCRIPTION: This SQL snippet uses a DO block to insert 100 test documents into the 'documents' table. It creates a diverse dataset to demonstrate the effectiveness of GIN indexing on JSONB data.

LANGUAGE: sql
CODE:
DO $$
BEGIN
  FOR i IN 1..100 LOOP
    IF i = 1 THEN
      -- Insert the special document with author name 'John Smith'
      INSERT INTO documents (data)
      VALUES (
        '{
          "title": "Scaling Neon with Postgres",
          "body": "Learn how to scale your Neon instances with PostgreSQL features.",
          "tags": ["Neon", "Postgres", "scaling"],
          "author": { "name": "John Smith", "age": 30 }
        }'::jsonb
      );
    ELSE
      -- Insert general documents for other iterations
      INSERT INTO documents (data)
      VALUES (
        '{
          "title": "Neon and JSONB",
          "body": "Using JSONB to store flexible data structures in Postgres.",
          "tags": ["Postgres", "Neon", "JSONB"],
          "steps": ["Set up a table with a JSONB column", "Insert and retrieve JSONB data"]
        }'::jsonb
      );
    END IF;
  END LOOP;
END $$;

----------------------------------------

TITLE: Using @> Operator for JSONB Containment in PostgreSQL
DESCRIPTION: This example uses the @> operator to retrieve products in the 'Electronics' category from the 'products' table.

LANGUAGE: sql
CODE:
SELECT
  id,
  data ->> 'name' product_name
FROM
  products
WHERE
  data @> '{"category": "Electronics"}';

----------------------------------------

TITLE: Postgres.js Connection Configuration
DESCRIPTION: JavaScript code using Postgres.js to connect to the database with SNI support configuration.

LANGUAGE: javascript
CODE:
require('dotenv').config();

const postgres = require('postgres');

const { PGHOST, PGDATABASE, PGUSER, PGPASSWORD, ENDPOINT_ID } = process.env;

const sql = postgres({
  host: PGHOST,
  database: PGDATABASE,
  username: PGUSER,
  password: PGPASSWORD,
  port: 5432,
  ssl: 'require',
  connection: {
    options: `project=${ENDPOINT_ID}`,
  },
});

async function getPgVersion() {
  const result = await sql`select version()`;
  console.log(result);
}

getPgVersion();

----------------------------------------

TITLE: Adding CHECK Constraint to Existing Table in PostgreSQL
DESCRIPTION: Shows how to add a CHECK constraint to an existing table to ensure the joined date is later than the birth date.

LANGUAGE: sql
CODE:
ALTER TABLE employees
ADD CONSTRAINT joined_date_check
CHECK ( joined_date >  birth_date );

----------------------------------------

TITLE: Neon Postgres Import Script
DESCRIPTION: Python script to import the exported Firestore data into Neon Postgres. Creates tables and handles data insertion with conflict resolution.

LANGUAGE: python
CODE:
import argparse
import json
import os

import psycopg
from psycopg.types.json import Jsonb


def upload_to_postgres(input_dir, conn_string):
    # Connect to the Postgres database
    conn = psycopg.connect(conn_string)

    # Iterate through all JSON files in the input directory
    for filename in os.listdir(input_dir):
        cur = conn.cursor()
        if filename.endswith(".json"):
            table_name = filename[:-5]  # Remove .json extension
            print("Writing to table: ", table_name)

            # Create table for the collection if it doesn't exist
            create_table_query = f"""
            CREATE TABLE IF NOT EXISTS {table_name} (
                id TEXT PRIMARY KEY,
                parent_id TEXT,
                data JSONB
            )
            """
            cur.execute(create_table_query)

            # Read and insert data from the JSON file
            with open(os.path.join(input_dir, filename), "r") as f:
                insert_query = f"""
                INSERT INTO {table_name} (id, parent_id, data)
                VALUES (%s, %s, %s)
                ON CONFLICT (id) DO UPDATE
                SET parent_id = EXCLUDED.parent_id, data = EXCLUDED.data
                """
                batch = []
                for line in f:
                    doc = json.loads(line)
                    batch.append((doc["id"], doc["parent_id"], Jsonb(doc["data"])))
                    if len(batch) == 20:
                        cur.executemany(insert_query, batch)
                        batch = []

                # Commit changes
                conn.commit()

    # Close the cursor and connection
    cur.close()
    conn.close()


def main():
    parser = argparse.ArgumentParser(description="Upload data to Postgres")
    parser.add_argument(
        "--input",
        default="firestore_data",
        help="Input directory containing JSON files",
    )
    parser.add_argument("--postgres", required=True, help="Postgres connection string")

    args = parser.parse_args()

    # Upload data to Postgres
    upload_to_postgres(args.input, args.postgres)
    print(f"Data from {args.input} uploaded to Postgres")


if __name__ == "__main__":
    main()

----------------------------------------

TITLE: Adding Primary Key to Existing Table in PostgreSQL
DESCRIPTION: This snippet demonstrates how to add a primary key constraint to an existing table using the ALTER TABLE statement.

LANGUAGE: sql
CODE:
CREATE TABLE products (
  product_id INT,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  price DEC(10, 2) NOT NULL
);

ALTER TABLE products
ADD PRIMARY KEY (product_id);

----------------------------------------

TITLE: Using to_jsonb() Function with Table Data
DESCRIPTION: Demonstrates how to apply the to_jsonb() function to convert table data into JSONB values, using the film table from a sample database.

LANGUAGE: sql
CODE:
SELECT
  to_jsonb(title),
  to_jsonb(length)
FROM
  film
ORDER BY
  title;

----------------------------------------

TITLE: RLS Policy Definition
DESCRIPTION: Demonstrates how to define RLS policies using both Drizzle ORM and raw SQL.

LANGUAGE: typescript
CODE:
pgPolicy('create todos', {
  for: 'insert',
  to: 'authenticated',
  withCheck: sql`(select auth.user_id() = user_id)`,
});

LANGUAGE: sql
CODE:
CREATE POLICY "create todos" ON "todos"
    AS PERMISSIVE FOR INSERT
    TO authenticated
    WITH CHECK (auth.user_id() = user_id);

----------------------------------------

TITLE: Setting up Postgres Triggers for Notifications
DESCRIPTION: This code sets up a Postgres table, trigger function, and trigger to send notifications on row insertion. It uses the pg library to connect to the database and execute SQL queries.

LANGUAGE: javascript
CODE:
// File: setup.js

// Load all the environment variables
require('dotenv').config();

const { Client } = require('pg');

const connectionString = process.env.DATABASE_URL;

const client = new Client({ connectionString });

async function setupTrigger() {
  try {
    // Connect to Postgres
    await client.connect();
    // Create a my_table if it does not already exist
    await client.query(`CREATE TABLE IF NOT EXISTS
    my_table (id SERIAL PRIMARY KEY, message TEXT)`);
    // Define the my_trigger_function function to send notifications
    await client.query(`
    CREATE OR REPLACE FUNCTION my_trigger_function() RETURNS trigger AS $$
    BEGIN
      PERFORM pg_notify('channel_name', NEW.message);
      RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;`);
    // Create the my_trigger to call the my_trigger_function after each insert
    await client.query(`
    CREATE TRIGGER my_trigger
    AFTER INSERT ON my_table
    FOR EACH ROW
    EXECUTE FUNCTION my_trigger_function();`);
    console.log('Event triggers setup complete.');
    await client.end();
  } catch (e) {
    console.log(e);
  }
}

setupTrigger().catch(console.log);

----------------------------------------

TITLE: Calculating Total Payments with PostgreSQL SUM()
DESCRIPTION: Uses the SUM() function to calculate the sum of all payments in the payment table.

LANGUAGE: sql
CODE:
SELECT
  SUM(amount)
FROM
  payment;

----------------------------------------

TITLE: Retrieving Pooled Connection String via Neon CLI
DESCRIPTION: Command to get a pooled connection string for Neon Postgres using the Neon CLI. The resulting string includes the '-pooler' suffix indicating a pooled connection.

LANGUAGE: bash
CODE:
neon connection-string --pooled true [branch_name]

postgres://alex:AbC123dEf@ep-cool-darkness-123456-pooler.us-east-2.aws.neon.tech/dbname?sslmode=require

----------------------------------------

TITLE: Implementing Conversation Synchronization with Postgres
DESCRIPTION: Creates API routes for inserting new messages into the Postgres database and retrieving conversation history. It uses the Neon serverless database client.

LANGUAGE: typescript
CODE:
export const runtime = 'edge';

export const dynamic = 'force-dynamic';

export const fetchCache = 'force-no-store';

import { neon, neonConfig } from '@neondatabase/serverless';
import { NextResponse } from 'next/server';

neonConfig.poolQueryViaFetch = true;

export async function POST(request: Request) {
  const { id, item } = await request.json();
  if (!id || !item || !process.env.DATABASE_URL) return NextResponse.json({}, { status: 400 });
  const sql = neon(process.env.DATABASE_URL);
  const rows = await sql('SELECT COUNT(*) from messages WHERE session_id = $1', [id]);
  await sql(
    'INSERT INTO messages (created_at, id, session_id, content_type, content_transcript, object, role, status, type) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) ON CONFLICT DO NOTHING',
    [
      rows[0].count,
      item.id,
      id,
      item.content[0].type,
      item.content[0].transcript,
      item.object,
      item.role,
      item.status,
      item.type,
    ]
  );
  return NextResponse.json({});
}

export async function GET(request: Request) {
  const id = new URL(request.url).searchParams.get('id');
  if (!id || !process.env.DATABASE_URL) return NextResponse.json([]);
  const sql = neon(process.env.DATABASE_URL);
  const rows = await sql('SELECT * from messages WHERE session_id = $1', [id]);
  return NextResponse.json(rows);
}

----------------------------------------

TITLE: Creating a GIN Index on a JSONB Column in PostgreSQL
DESCRIPTION: Demonstrates how to create a GIN (Generalized Inverted Index) index on a JSONB column to improve query performance for JSON data.

LANGUAGE: sql
CODE:
CREATE INDEX index_name
ON table_name
USING GIN(jsonb_column);

----------------------------------------

TITLE: Inserting JSONB Data into Postgres Table
DESCRIPTION: This SQL snippet demonstrates how to insert two rows with JSONB data into the 'documents' table. It shows the flexibility of JSONB in storing different structures, including nested objects and arrays.

LANGUAGE: sql
CODE:
INSERT INTO documents (data)
VALUES (
  '{
    "title": "Neon and JSONB",
    "body": "Using JSONB to store flexible data structures in Postgres.",
    "tags": ["Postgres", "Neon", "JSONB"],
    "steps": ["Set up a table with a JSONB column", "Insert and retrieve JSONB data"]
  }'
),
(
  '{
    "title": "Scaling Neon with Postgres",
    "body": "Learn how to scale your Neon instances with PostgreSQL features.",
    "tags": ["Neon", "Postgres", "scaling"],
    "author": { "name": "John Smith", "age": 30 }
  }'
);

----------------------------------------

TITLE: Creating Table with Single Column UNIQUE Constraint in PostgreSQL
DESCRIPTION: Demonstrates how to create a new table with a UNIQUE constraint on the email column. This ensures no duplicate email addresses can be stored in the table.

LANGUAGE: sql
CODE:
CREATE TABLE person (
  id SERIAL PRIMARY KEY,
  first_name VARCHAR (50),
  last_name VARCHAR (50),
  email VARCHAR (50) UNIQUE
);

----------------------------------------

TITLE: Function Call Using Named Notation
DESCRIPTION: Example of calling a function using named notation where arguments are specified by parameter names using the => operator.

LANGUAGE: sql
CODE:
select get_film_count(
    len_from => 40,
     len_to => 90
);

----------------------------------------

TITLE: Querying pg_indexes View for All Indexes in Public Schema
DESCRIPTION: This SQL query retrieves all indexes in the 'public' schema, displaying the table name, index name, and index definition.

LANGUAGE: sql
CODE:
SELECT
    tablename,
    indexname,
    indexdef
FROM
    pg_indexes
WHERE
    schemaname = 'public'
ORDER BY
    tablename,
    indexname;

----------------------------------------

TITLE: Complete Transaction Error Handling
DESCRIPTION: Implements full transaction management with proper error handling and resource cleanup.

LANGUAGE: java
CODE:
try {
    // perform a database operation...
    connection.commit();
} catch (SQLException e) {
    connection.rollback();
    e.printStackTrace();
} finally {
    connection.close();
}

----------------------------------------

TITLE: Implementing Node.js Express Application with Neon Database Connection
DESCRIPTION: JavaScript code for a simple Express server that connects to a Neon Postgres database, queries the 'books_to_read' table, and returns the results as JSON.

LANGUAGE: javascript
CODE:
import express from 'express';
import pkg from 'pg';

const app = express();
const port = process.env.PORT || 3000;

// Parse JSON bodies for this app
app.use(express.json());

// Create a new pool using your Neon database connection string
const { Pool } = pkg;
const pool = new Pool({ connectionString: process.env.DATABASE_URL });

app.get('/', async (req, res) => {
  try {
    // Fetch books from your database using the postgres connection
    const { rows } = await pool.query('SELECT * FROM books_to_read;');
    res.json(rows);
  } catch (error) {
    console.error('Failed to fetch books', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});

----------------------------------------

TITLE: Basic LEAD Function Example with Sales Data
DESCRIPTION: Demonstrates using LEAD() function to compare current year's sales with next year's sales using CTEs.

LANGUAGE: sql
CODE:
WITH cte AS (
	SELECT
		year,
		SUM(amount) amount
	FROM sales
	GROUP BY year
	ORDER BY year
)
SELECT
	year,
	amount,
	LEAD(amount,1) OVER (
		ORDER BY year
	) next_year_sales
FROM
	cte;

----------------------------------------

TITLE: Database Management Commands Reference
DESCRIPTION: Core PostgreSQL commands for database administration including CREATE DATABASE, ALTER DATABASE, DROP DATABASE statements.

LANGUAGE: sql
CODE:
CREATE DATABASE
ALTER DATABASE
DROP DATABASE

----------------------------------------

TITLE: Configuring Django settings for read replica
DESCRIPTION: Updates the Django settings to include both primary and replica database connections, and configures the custom database router.

LANGUAGE: python
CODE:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'your_database_name',
        'USER': 'your_username',
        'PASSWORD': 'your_password',
        'HOST': 'your_primary_host',
        'PORT': '5432',
    },
    'replica': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'your_database_name',
        'USER': 'your_username',
        'PASSWORD': 'your_password',
        'HOST': 'your_read_replica_host',
        'PORT': '5432',
    }
}

DATABASE_ROUTERS = ['notes.db_router.PrimaryReplicaRouter']

----------------------------------------

TITLE: Creating a Basic View in PostgreSQL
DESCRIPTION: This snippet demonstrates the basic syntax for creating a view in PostgreSQL. It creates a view named 'contact' that selects specific columns from the customer table.

LANGUAGE: sql
CODE:
CREATE VIEW contact AS
SELECT
  first_name,
  last_name,
  email
FROM
  customer;

----------------------------------------

TITLE: Creating a Publication for Logical Replication in Postgres
DESCRIPTION: SQL command to create a publication named 'airbyte_publication' for specified tables in Postgres, used in logical replication.

LANGUAGE: sql
CODE:
CREATE PUBLICATION airbyte_publication FOR TABLE <tbl1, tbl2, tbl3>;

----------------------------------------

TITLE: Complete PL/pgSQL Cursor Example Function
DESCRIPTION: Full example of a function using a cursor to fetch film titles and release years from the film table.

LANGUAGE: plpgsql
CODE:
CREATE OR REPLACE FUNCTION fetch_film_titles_and_years(
   OUT p_title VARCHAR(255),
   OUT p_release_year INTEGER
)
RETURNS SETOF RECORD AS
$$
DECLARE
    film_cursor CURSOR FOR
        SELECT title, release_year
        FROM film;
    film_record RECORD;
BEGIN
    -- Open cursor
    OPEN film_cursor;

    -- Fetch rows and return
    LOOP
        FETCH NEXT FROM film_cursor INTO film_record;
        EXIT WHEN NOT FOUND;

        p_title = film_record.title;
        p_release_year = film_record.release_year;
        RETURN NEXT;
    END LOOP;

    -- Close cursor
    CLOSE film_cursor;
END;
$$
LANGUAGE PLPGSQL;

----------------------------------------

TITLE: Creating Materialized View for Daily Revenue in PostgreSQL
DESCRIPTION: This SQL snippet creates a materialized view named 'daily_revenue'. It aggregates the total revenue per day from the 'orders' table, providing a cached summary of daily sales data.

LANGUAGE: sql
CODE:
CREATE MATERIALIZED VIEW daily_revenue AS
SELECT DATE(created_at) AS order_date, SUM(total_price) AS total_revenue
FROM orders
GROUP BY order_date;

----------------------------------------

TITLE: Retrieving Highest Scores Using DISTINCT ON
DESCRIPTION: Example query using DISTINCT ON to fetch the highest score for each student across all subjects, ordered by name and score.

LANGUAGE: sql
CODE:
SELECT
  DISTINCT ON (name) name,
  subject,
  score
FROM
  student_scores
ORDER BY
  name,
  score DESC;

----------------------------------------

TITLE: Simulating Dice Rolls with Random Integers in Postgres SQL
DESCRIPTION: Demonstrates how to use the random(min, max) function to simulate dice rolls for a game, generating random integers between 1 and 6.

LANGUAGE: sql
CODE:
CREATE TABLE dice_rolls (
  roll_id SERIAL PRIMARY KEY,
  player_name TEXT,
  die1 INTEGER,
  die2 INTEGER,
  total INTEGER
);

INSERT INTO dice_rolls (player_name, die1, die2, total)
SELECT
  'Player-' || generate_series,
  random(1, 6),  -- Random integer between 1 and 6
  random(1, 6),  -- Random integer between 1 and 6
  0  -- We'll update this next
FROM generate_series(1, 5);

UPDATE dice_rolls
SET total = die1 + die2;

SELECT * FROM dice_rolls;

----------------------------------------

TITLE: Implementing a PL/pgSQL Function to Return Filtered Film Data
DESCRIPTION: This function, named get_film, accepts a pattern parameter and returns a table of film titles and release years that match the given pattern. It demonstrates how to use the ILIKE operator for pattern matching and how to cast data types in the query.

LANGUAGE: sql
CODE:
create or replace function get_film (
  p_pattern varchar
)
returns table (
	film_title varchar,
	film_release_year int
)
language plpgsql
as $$
begin
	return query
		select
			title,
			release_year::integer
		from
			film
		where
			title ilike p_pattern;
end;
$$;

----------------------------------------

TITLE: Querying JSON Data in PostgreSQL
DESCRIPTION: Demonstrates how to extract specific JSON fields from a JSONB column using the '->' and '->>' operators.

LANGUAGE: SQL
CODE:
SELECT
  id,
  name,
  properties -> 'color' color
FROM
  products;

----------------------------------------

TITLE: Basic RPAD() Function Syntax
DESCRIPTION: Demonstrates the basic syntax of the RPAD() function with three parameters: string (input string), length (desired length), and fill (padding character).

LANGUAGE: sql
CODE:
RPAD(string, length, fill)

----------------------------------------

TITLE: FIRST_VALUE() with Partitioning Example
DESCRIPTION: Advanced query showing how to use FIRST_VALUE() with partitioning to find the lowest-priced product within each product group, including frame clause definition.

LANGUAGE: sql
CODE:
SELECT
    product_id,
    product_name,
	group_id,
    price,
    FIRST_VALUE(product_name)
    OVER(
	PARTITION BY group_id
        ORDER BY price
        RANGE BETWEEN
            UNBOUNDED PRECEDING AND
            UNBOUNDED FOLLOWING
    ) lowest_price
FROM
    products;

----------------------------------------

TITLE: Comparing Weekly Sales Using lag() with Offset in SQL
DESCRIPTION: Shows how to use lag() with an offset to compare each day's sales to the sales from the same day of the previous week, using randomly generated data.

LANGUAGE: sql
CODE:
WITH sales AS (
  SELECT
    sale_date,
    floor(random() * 1000 + 1)::int AS amount
  FROM generate_series(date '2023-01-01', date '2023-01-31', interval '1 day') AS sale_date
)
SELECT
  sale_date,
  amount,
  lag(amount, 7) OVER (ORDER BY sale_date) AS prev_week_amount,
  amount - lag(amount, 7) OVER (ORDER BY sale_date) AS diff
FROM sales
ORDER BY sale_date DESC
LIMIT 5;

----------------------------------------

TITLE: Basic GORM Database Connection
DESCRIPTION: Establishing connection to Neon Postgres using GORM with configuration options

LANGUAGE: go
CODE:
package main

import (
	"fmt"
	"log"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

func main() {
	dsn := "postgresql://[user]:[password]@[neon_hostname]/[dbname]?sslmode=require"

	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Info),
	})
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}

	sqlDB, err := db.DB()
	if err != nil {
		log.Fatalf("Failed to get DB object: %v", err)
	}

	if err := sqlDB.Ping(); err != nil {
		log.Fatalf("Failed to ping DB: %v", err)
	}

	fmt.Println("Successfully connected to Neon Postgres database!")
}

----------------------------------------

TITLE: Prisma Configuration with Neon Serverless Driver
DESCRIPTION: Schema configuration for using Prisma with the Neon serverless driver, including the driver adapters preview feature.

LANGUAGE: javascript
CODE:
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

----------------------------------------

TITLE: Updating Drizzle Client for Read Replica Support
DESCRIPTION: Modifies 'db/drizzle.ts' to use Drizzle's withReplicas function for handling both primary and read replica connections.

LANGUAGE: typescript
CODE:
import { drizzle } from 'drizzle-orm/node-postgres';
import { withReplicas } from 'drizzle-orm/pg-core';
import { Pool } from 'pg';
import 'dotenv/config';

const primaryDb = drizzle(
  new Pool({
    connectionString: process.env.DATABASE_URL!,
  })
);
const read = drizzle(
  new Pool({
    connectionString: process.env.READ_REPLICA_URL!,
  })
);

export const db = withReplicas(primaryDb, [read]);

----------------------------------------

TITLE: Joined Search Across Multiple Tables
DESCRIPTION: Demonstrates a search query that joins the 'orders' and 'mock_items' tables to find matching results across related data.

LANGUAGE: sql
CODE:
SELECT o.order_id, o.customer_name, m.description
FROM orders o
JOIN mock_items m ON o.product_id = m.id
WHERE o.customer_name @@@ 'Johnson' AND m.description @@@ 'shoes'
ORDER BY order_id
LIMIT 5;

----------------------------------------

TITLE: Getting Database Sizes in PostgreSQL
DESCRIPTION: Demonstrates how to get the size of a specific database and list sizes of all databases

LANGUAGE: sql
CODE:
SELECT
    pg_size_pretty (
        pg_database_size ('dvdrental')
    ) size;

SELECT
    pg_database.datname,
    pg_size_pretty(pg_database_size(pg_database.datname)) AS size
FROM pg_database;

----------------------------------------

TITLE: Configuring Neon Database Connection in Phoenix runtime.exs
DESCRIPTION: This snippet demonstrates how to update the config/runtime.exs file in a Phoenix project to configure the connection to a Neon database, including SSL settings and database URL.

LANGUAGE: elixir
CODE:
config :hello, Hello.Repo,
   ssl: [cacerts: :public_key.cacerts_get()],
   url: database_url,
   pool_size: String.to_integer(System.get_env("POOL_SIZE") || "10"),
   socket_options: maybe_ipv6

----------------------------------------

TITLE: Basic PostgreSQL INSERT ON CONFLICT Syntax
DESCRIPTION: Demonstrates the basic syntax structure of PostgreSQL's INSERT ON CONFLICT statement for performing upsert operations.

LANGUAGE: sql
CODE:
INSERT INTO table_name (column1, column2, ...)
VALUES (value1, value2, ...)
ON CONFLICT (conflict_column)
DO NOTHING | DO UPDATE SET column1 = value1, column2 = value2, ...;

----------------------------------------

TITLE: Creating a Transfer Procedure in PostgreSQL
DESCRIPTION: Defines a stored procedure named 'transfer' that moves a specified amount of money between two accounts. It demonstrates transaction handling within a procedure.

LANGUAGE: plpgsql
CODE:
create or replace procedure transfer(
   sender int,
   receiver int,
   amount dec
)
language plpgsql
as $$
begin
    -- subtracting the amount from the sender's account
    update accounts
    set balance = balance - amount
    where id = sender;

    -- adding the amount to the receiver's account
    update accounts
    set balance = balance + amount
    where id = receiver;

    commit;
end;$$;

----------------------------------------

TITLE: Creating a Product Entity with Hibernate Annotations
DESCRIPTION: Java class defining a Product entity with JPA annotations for automatic table creation by Hibernate.

LANGUAGE: java
CODE:
@Entity
public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    @Column(nullable = false)
    private BigDecimal price;
}

----------------------------------------

TITLE: Window Function sum() for Running Totals in PostgreSQL
DESCRIPTION: Illustrates using sum() as a window function to calculate running totals over time, demonstrating cumulative sales calculations.

LANGUAGE: sql
CODE:
WITH monthly_sales AS (
  SELECT
    '2023-01-01'::date AS month,
    10000 AS sales
  UNION ALL
  SELECT '2023-02-01'::date, 12000
  UNION ALL
  SELECT '2023-03-01'::date, 15000
  UNION ALL
  SELECT '2023-04-01'::date, 11000
)
SELECT
  month,
  sales,
  sum(sales) OVER (ORDER BY month) AS running_total
FROM monthly_sales;

----------------------------------------

TITLE: Using Pooled Connection String in Neon
DESCRIPTION: Demonstrates the format of a pooled connection string for Neon, which includes the '-pooler' flag in the hostname to enable connection pooling with PgBouncer.

LANGUAGE: bash
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456-pooler.us-east-2.aws.neon.tech/dbname?sslmode=require

----------------------------------------

TITLE: Equivalent SQL for SERIAL Column Creation in PostgreSQL
DESCRIPTION: This code shows the equivalent SQL statements that PostgreSQL executes behind the scenes when creating a SERIAL column. It includes creating a sequence, setting it as the default value, and linking it to the column.

LANGUAGE: sql
CODE:
CREATE SEQUENCE table_name_id_seq;

CREATE TABLE table_name (
    id integer NOT NULL DEFAULT nextval('table_name_id_seq')
);

ALTER SEQUENCE table_name_id_seq
OWNED BY table_name.id;

----------------------------------------

TITLE: WebSocket Echo Configuration
DESCRIPTION: JavaScript configuration for Laravel Echo and Pusher WebSocket connection

LANGUAGE: javascript
CODE:
import Echo from 'laravel-echo';
import Pusher from 'pusher-js';
window.Pusher = Pusher;

window.Echo = new Echo({
  broadcaster: 'pusher',
  key: import.meta.env.VITE_PUSHER_APP_KEY,
  cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER,
  forceTLS: true,
});

----------------------------------------

TITLE: GitHub Actions Workflow for Neon Database Twin Creation
DESCRIPTION: GitHub Actions workflow configuration that creates a full database twin using pg_dump and pg_restore. The workflow can be triggered manually, on a schedule, or when pull requests are merged. It includes PostgreSQL installation, database dumping, and restoration steps.

LANGUAGE: yaml
CODE:
name: Create Neon Twin

on:
  schedule:
    - cron: '0 0 * * *' # Runs at midnight UTC
  workflow_dispatch:

env:
  PROD_DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }} # Production or primary database
  DEV_DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }} # Development database
  PG_VERSION: '17'

jobs:
  dump-and-restore:
    runs-on: ubuntu-latest

    steps:
      - name: Install PostgreSQL
        run: |
          sudo apt update
          yes '' | sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh
          sudo apt install -y postgresql-${{ env.PG_VERSION }}

      - name: Set PostgreSQL binary path
        run: echo "POSTGRES=/usr/lib/postgresql/${{ env.PG_VERSION }}/bin" >> $GITHUB_ENV

      - name: Dump and restore data
        run: |
          $POSTGRES/pg_dump -Fc -f "${{ github.workspace }}/dump-file.bak" "${{ env.PROD_DATABASE_URL }}"
          $POSTGRES/pg_restore --clean --no-owner --no-acl --if-exists -d "${{ env.DEV_DATABASE_URL }}" "${{ github.workspace }}/dump-file.bak"

----------------------------------------

TITLE: Using jsonb_build_object() with Table Data in PostgreSQL
DESCRIPTION: Shows how to create JSON objects from the 'film' table data, combining the title and length columns.

LANGUAGE: sql
CODE:
SELECT
  jsonb_build_object('title', title, 'length', length)
FROM
  film
ORDER BY
  length DESC;

----------------------------------------

TITLE: Implementing Cloudflare Worker Script with Neon Database Connection
DESCRIPTION: JavaScript code for a Cloudflare Worker that connects to a Neon database using the Neon serverless driver. It queries the 'books_to_read' table and returns the results as a JSON response.

LANGUAGE: javascript
CODE:
import { Client } from '@neondatabase/serverless';

export default {
  async fetch(request, env, ctx) {
    const client = new Client(env.DATABASE_URL);
    await client.connect();
    const { rows } = await client.query('SELECT * FROM books_to_read;');
    return new Response(JSON.stringify(rows));
  },
};

----------------------------------------

TITLE: Basic Usage of PostgreSQL CBRT() Function
DESCRIPTION: This example demonstrates the basic usage of the CBRT() function to calculate the cube root of 27.

LANGUAGE: sql
CODE:
SELECT CBRT(27) result;

----------------------------------------

TITLE: Installing pgrag and Model Extensions
DESCRIPTION: Creates the core pgrag extension and its accompanying model extensions for tokenizing, embedding generation, and reranking capabilities.

LANGUAGE: sql
CODE:
create extension if not exists rag cascade;
create extension if not exists rag_bge_small_en_v15 cascade;
create extension if not exists rag_jina_reranker_v1_tiny_en cascade;

----------------------------------------

TITLE: Creating Department and Employee Tables
DESCRIPTION: Sets up department and employee tables with relationships for advanced jsonb_agg() examples

LANGUAGE: sql
CODE:
CREATE TABLE departments(
   id SERIAL PRIMARY KEY,
   department_name VARCHAR(255) NOT NULL
);

CREATE TABLE employees(
    id SERIAL PRIMARY KEY,
    employee_name VARCHAR(255) NOT NULL,
    department_id INT NOT NULL,
    FOREIGN KEY (department_id)
        REFERENCES departments(id) ON DELETE CASCADE
);

----------------------------------------

TITLE: Creating Time-Series Table and Hypertable
DESCRIPTION: Creates a weather conditions table and converts it to a TimescaleDB hypertable for time-series data management.

LANGUAGE: sql
CODE:
CREATE TABLE weather_conditions (
 time        TIMESTAMP WITH TIME ZONE NOT NULL,
 device_id   TEXT,
 temperature  NUMERIC,
 humidity     NUMERIC
);

LANGUAGE: sql
CODE:
SELECT create_hypertable('weather_conditions', 'time');

----------------------------------------

TITLE: Creating a Subscription with Multiple Publications in PostgreSQL
DESCRIPTION: This command creates a subscription that receives data from two publications: 'my_publication' and 'sales_publication'.

LANGUAGE: sql
CODE:
CREATE SUBSCRIPTION my_subscription
CONNECTION 'postgresql://username:password@host:port/dbname'
PUBLICATION my_publication, sales_publication;

----------------------------------------

TITLE: Auth.js Configuration Setup
DESCRIPTION: TypeScript configuration for Auth.js including Resend provider and Postgres adapter setup.

LANGUAGE: typescript
CODE:
import NextAuth from 'next-auth';
import Resend from 'next-auth/providers/resend';
import PostgresAdapter from '@auth/pg-adapter';
import { Pool } from '@neondatabase/serverless';

export const { handlers, auth, signIn, signOut } = NextAuth(() => {
  const pool = new Pool({ connectionString: process.env.DATABASE_URL });
  return {
    adapter: PostgresAdapter(pool),
    providers: [Resend({ from: 'Test <onboarding@resend.dev>' })],
  };
});

----------------------------------------

TITLE: Calculating Sales Percentile Using PERCENT_RANK() in PostgreSQL
DESCRIPTION: This query uses the PERCENT_RANK() function to calculate the sales percentile of each employee in 2019. It orders the results by amount and applies the function over the entire result set.

LANGUAGE: sql
CODE:
SELECT
    name,
	amount,
    PERCENT_RANK() OVER (
        ORDER BY amount
    )
FROM
    sales_stats
WHERE
    year = 2019;

----------------------------------------

TITLE: Configuring Reactive PostgreSQL Data Source in Quarkus
DESCRIPTION: Sets up the reactive data source configuration in a .env file using the Neon database connection string.

LANGUAGE: shell
CODE:
# Note that "?sslmode=require" is appended to the Neon connection string
QUARKUS_DATASOURCE_REACTIVE_URL=postgresql://[user]:[password]@[neon_hostname]/[dbname]?sslmode=require

----------------------------------------

TITLE: Account Creation with Transaction Safety
DESCRIPTION: PHP method to add a new account with associated plan using transaction safety measures.

LANGUAGE: php
CODE:
public function addAccount($firstName, $lastName, $planId, $effectiveDate) {
    try {
        // start the transaction
        $this->pdo->beginTransaction();

        // insert an account and get the ID back
        $accountId = $this->insertAccount($firstName, $lastName);

        // add plan for the account
        $this->insertPlan($accountId, $planId, $effectiveDate);

        // commit the changes
        $this->pdo->commit();
    } catch (\PDOException $e) {
        // rollback the changes
        $this->pdo->rollBack();
        throw $e;
    }
}

----------------------------------------

TITLE: Configuring Services in Program.cs
DESCRIPTION: C# code for configuring Identity, JWT authentication, and authorization in the Program.cs file.

LANGUAGE: csharp
CODE:
var builder = WebApplication.CreateBuilder(args);

// Add Neon database context
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("NeonConnection")));

builder.Services.AddControllers();

// Configure Identity
builder.Services.AddIdentity<ApplicationUser, IdentityRole>(options =>
{
    // Password settings
    options.Password.RequireDigit = true;
    options.Password.RequireLowercase = true;
    options.Password.RequireUppercase = true;
    options.Password.RequireNonAlphanumeric = true;
    options.Password.RequiredLength = 8;

    // Lockout settings
    options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);
    options.Lockout.MaxFailedAccessAttempts = 5;

    // User settings
    options.User.RequireUniqueEmail = true;
})
.AddEntityFrameworkStores<ApplicationDbContext>()
.AddDefaultTokenProviders();

// Configure JWT authentication
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = builder.Configuration["Jwt:Issuer"],
        ValidAudience = builder.Configuration["Jwt:Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(
            Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
    };
});

// Add authorization
builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("RequireAdminRole", policy =>
        policy.RequireRole("Admin"));
});

var app = builder.Build();

// Add roles on startup
using (var scope = app.Services.CreateScope())
{
    var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
    await RoleHelper.EnsureRolesCreated(roleManager);
}

// Map controllers
app.MapControllers();

// Configure middleware
app.UseAuthentication();
app.UseAuthorization();

----------------------------------------

TITLE: Querying All Rows from Products Table with JDBC
DESCRIPTION: Defines a findAll() method in the ProductDB class to retrieve all rows from the products table using JDBC. It creates a statement, executes a query, and processes the result set.

LANGUAGE: java
CODE:
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class ProductDB {

    public static List<Product> findAll() {
        var products = new ArrayList<Product>();

        var sql = "SELECT id, name, price FROM products ORDER BY name";

        try (var conn =  DB.connect();
             var stmt = conn.createStatement()) {

            var rs = stmt.executeQuery(sql);

            while (rs.next()) {
                var product = new Product(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getDouble("price"));
                products.add(product);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return products;
    }

    // ...
}

----------------------------------------

TITLE: Initializing Neon Database Connection with JWT Auth
DESCRIPTION: Shows how to establish a database connection using the Neon serverless driver with JWT authentication token.

LANGUAGE: typescript
CODE:
import { neon } from '@neondatabase/serverless';

const sql = neon(process.env.DATABASE_AUTHENTICATED_URL, { authToken: myAuthProvider.getJWT() });

await sql(`select * from todos`);

----------------------------------------

TITLE: Creating a GIN Index for Full-text Search in PostgreSQL
DESCRIPTION: This example shows how to create a GIN (Generalized Inverted Index) index on a text column for optimized full-text search performance.

LANGUAGE: SQL
CODE:
CREATE INDEX body_fts
ON posts
USING GIN ((to_tsvector('english',body)));

----------------------------------------

TITLE: Creating Custom Type for Nested JSONB Data
DESCRIPTION: Shows how to create a custom PostgreSQL type to handle nested JSONB data when using jsonb_to_record().

LANGUAGE: sql
CODE:
CREATE TYPE ADDRESS_TYPE AS (
  street TEXT,
  city TEXT
);

----------------------------------------

TITLE: Implementing FastAPI Application with Database Endpoints
DESCRIPTION: Python code defining a FastAPI application with endpoints for interacting with authors and books in the database. This sets up the web API for the application.

LANGUAGE: python
CODE:
# main.py

from fastapi import FastAPI, Depends
from sqlalchemy.orm import Session
import uvicorn

from app.models import Author, Book, Base
from app.database import SessionLocal, engine

Base.metadata.create_all(bind=engine)

app = FastAPI()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.get("/authors/")
def read_authors(db: Session = Depends(get_db)):
    authors = db.query(Author).all()
    return authors


@app.get("/books/{author_id}")
def read_books(author_id: int, db: Session = Depends(get_db)):
    books = db.query(Book).filter(Book.author_id == author_id).all()
    return books

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000)

----------------------------------------

TITLE: Creating an Employees Table in PostgreSQL
DESCRIPTION: This SQL snippet creates a table named 'employees' with columns for id, name, age, and salary.

LANGUAGE: sql
CODE:
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL,
    salary NUMERIC NOT NULL
);

----------------------------------------

TITLE: Basic DENSE_RANK Function Syntax
DESCRIPTION: Shows the fundamental syntax of the DENSE_RANK() window function, including optional PARTITION BY and required ORDER BY clauses.

LANGUAGE: sql
CODE:
DENSE_RANK() OVER (
    [PARTITION BY partition_expression, ... ]
    ORDER BY sort_expression [ASC | DESC], ...
)

----------------------------------------

TITLE: Granting Schema Access Permissions
DESCRIPTION: SQL commands to grant necessary schema and table access permissions to the replication role.

LANGUAGE: sql
CODE:
GRANT USAGE ON SCHEMA public TO replication_user;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO replication_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO replication_user;

----------------------------------------

TITLE: Calculate Average Temperature by City
DESCRIPTION: Shows how to use avg() with GROUP BY to calculate average temperatures for each city.

LANGUAGE: sql
CODE:
SELECT city, avg(temperature) AS avg_temperature
FROM weather_data
GROUP BY city
ORDER BY avg_temperature DESC;

----------------------------------------

TITLE: RANK Function with PARTITION BY
DESCRIPTION: Demonstrates using RANK() with PARTITION BY to rank products within their respective product groups based on price.

LANGUAGE: sql
CODE:
SELECT
	product_id,
	product_name,
	group_name,
	price,
	RANK () OVER (
		PARTITION BY p.group_id
		ORDER BY price DESC
	) price_rank
FROM
	products p
	INNER JOIN product_groups g
		ON g.group_id = p.group_id;

----------------------------------------

TITLE: Running Quarkus Application in Development Mode
DESCRIPTION: This command starts the Quarkus application in development mode using the Quarkus CLI.

LANGUAGE: shell
CODE:
quarkus dev

----------------------------------------

TITLE: LangGraph Agent Implementation
DESCRIPTION: Complete Python implementation of the LangGraph agent with Neon database integration

LANGUAGE: python
CODE:
import os

import psycopg2
from dotenv import load_dotenv
from langchain_core.tools import tool
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import SystemMessage
from langgraph.prebuilt import create_react_agent
from neon_api import NeonAPI
from psycopg2.extras import RealDictCursor

load_dotenv()

neon_client = NeonAPI(
    api_key=os.environ["NEON_API_KEY"],
)

@tool
def create_database(project_name: str) -> str:
    """
    Creates a new Neon project. (this takes less than 500ms)
    Args:
        project_name: Name of the project to create
    Returns:
        the connection URI for the new project
    """
    try:
        project = neon_client.project_create(project={"name": project_name}).project
        connection_uri = neon_client.connection_uri(
            project_id=project.id, database_name="neondb", role_name="neondb_owner"
        ).uri

        return f"Project/database created, connection URI: {connection_uri}"
    except Exception as e:
        return f"Failed to create project: {str(e)}"

@tool
def run_sql_query(connection_uri: str, query: str) -> str:
    """
    Runs an SQL query in the Neon database.
    Args:
        connection_uri: The connection URI for the Neon database
        query: The SQL query to execute
    Returns:
        the result of the SQL query
    """
    conn = psycopg2.connect(connection_uri)
    cur = conn.cursor(cursor_factory=RealDictCursor)
    try:
        cur.execute(query)
        conn.commit()
        try:
            records = cur.fetchall()
            return f"Query result: {records}"
        except psycopg2.ProgrammingError:
            return f"Query executed successfully"
    except Exception as e:
        conn.rollback()
        return f"Failed to execute SQL query: {str(e)}"
    finally:
        cur.close()
        conn.close()

available_tools = [create_database, run_sql_query]

system_prompt = SystemMessage(
    f"You are a helpful AI assistant. You will be assisting users with all of your available tools. You can help users by using the following tools: {', '.join([f'\n{tool.name}: {tool.description}' for tool in available_tools])}."
)

model = ChatGoogleGenerativeAI(model="gemini-2.0-flash")
agent_graph = create_react_agent(
    model=model,
    tools=available_tools,
    prompt=system_prompt,
)

inputs = {
    "messages": [
        (
            "user",
            "Create a new Neon project called langgraph and create a table named users. Add 10 sample records to the table. Then print the records as a markdown table.",
        )
    ]
}
result = agent_graph.invoke(inputs)

print("Step by Step execution : ")
for message in result["messages"]:
    print(message.pretty_repr())

----------------------------------------

TITLE: Creating and Populating a Financial Portfolio Table in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates the creation of a 'portfolios' table using DECIMAL types for precise financial data storage. It includes the table creation statement and sample data insertion.

LANGUAGE: sql
CODE:
CREATE TABLE portfolios (
    portfolio_id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    stock_symbol TEXT NOT NULL,
    shares_owned DECIMAL(10, 4),
    price_per_share DECIMAL(10, 2)
);

INSERT INTO portfolios (user_id, stock_symbol, shares_owned, price_per_share)
VALUES
    (101, 'AAPL', 150.1234, 145.67),
    (102, 'MSFT', 200.000, 214.53);

----------------------------------------

TITLE: Configuring GitHub Action for Nightly Postgres Backups
DESCRIPTION: Defines a GitHub Action workflow that performs nightly backups of a Postgres database to an AWS S3 bucket. It includes scheduling, environment setup, database dumping, and file management.

LANGUAGE: yaml
CODE:
name: acme-co-prod-backup

on:
  schedule:
    - cron: '0 5 * * *' # Runs at midnight EST (us-east-1)
  workflow_dispatch:

jobs:
  db-backup:
    runs-on: ubuntu-latest

    permissions:
      id-token: write

    env:
      RETENTION: 7
      DATABASE_URL: ${{ secrets.ACME_CO_PROD }}
      IAM_ROLE: ${{ secrets.IAM_ROLE }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      AWS_REGION: 'us-east-1'
      PG_VERSION: '17'

    steps:
      - name: Install PostgreSQL
        run: |
          sudo apt update
          yes '' | sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh
          sudo apt install -y postgresql-${{ env.PG_VERSION }}

      - name: Set PostgreSQL binary path
        run: echo "POSTGRES=/usr/lib/postgresql/${{ env.PG_VERSION }}/bin" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set file, folder and path variables
        run: |
          GZIP_NAME="$(date +'%B-%d-%Y@%H:%M:%S').gz"
          FOLDER_NAME="${{ github.workflow }}"
          UPLOAD_PATH="s3://${{ env.S3_BUCKET_NAME }}/${FOLDER_NAME}/${GZIP_NAME}"

          echo "GZIP_NAME=${GZIP_NAME}" >> $GITHUB_ENV
          echo "FOLDER_NAME=${FOLDER_NAME}" >> $GITHUB_ENV
          echo "UPLOAD_PATH=${UPLOAD_PATH}" >> $GITHUB_ENV

      - name: Create folder if it doesn't exist
        run: |
          if ! aws s3api head-object --bucket ${{ env.S3_BUCKET_NAME }} --key "${{ env.FOLDER_NAME }}/" 2>/dev/null; then
            aws s3api put-object --bucket ${{ env.S3_BUCKET_NAME }} --key "${{ env.FOLDER_NAME }}/"
          fi

      - name: Run pg_dump
        run: |
          $POSTGRES/pg_dump ${{ env.DATABASE_URL }} | gzip > "${{ env.GZIP_NAME }}"

      - name: Empty bucket of old files
        run: |
          THRESHOLD_DATE=$(date -d "-${{ env.RETENTION }} days" +%Y-%m-%dT%H:%M:%SZ)
          aws s3api list-objects --bucket ${{ env.S3_BUCKET_NAME }} --prefix "${{ env.FOLDER_NAME }}/" --query "Contents[?LastModified<'${THRESHOLD_DATE}'] | [?ends_with(Key, '.gz')].{Key: Key}" --output text | while read -r file; do
            aws s3 rm "s3://${{ env.S3_BUCKET_NAME }}/${file}"
          done

      - name: Upload to bucket
        run: |
          aws s3 cp "${{ env.GZIP_NAME }}" "${{ env.UPLOAD_PATH }}" --region ${{ env.AWS_REGION }}

----------------------------------------

TITLE: Advanced Counting with Subqueries
DESCRIPTION: Uses COUNT() in a subquery to find customers who have placed more orders than the average number of orders per customer.

LANGUAGE: sql
CODE:
SELECT customer_id, COUNT(*) AS order_count
FROM orders
GROUP BY customer_id
HAVING COUNT(*) > (
  SELECT AVG(order_count)
  FROM (
    SELECT COUNT(*) AS order_count
    FROM orders
    GROUP BY customer_id
  ) AS customer_order_counts
);

----------------------------------------

TITLE: Querying All Todos with GraphQL
DESCRIPTION: This GraphQL query retrieves all todo items from the database, showing how to perform read operations.

LANGUAGE: graphql
CODE:
query {
  todos {
    id
    title
    completed
  }
}

----------------------------------------

TITLE: Searching in PostgreSQL Arrays
DESCRIPTION: This SQL query demonstrates how to search for a specific value within an array column using the ANY() function.

LANGUAGE: SQL
CODE:
SELECT
  name,
  phones
FROM
  contacts
WHERE
  '(408)-589-5555' = ANY (phones);

----------------------------------------

TITLE: Querying PostgreSQL Array Data
DESCRIPTION: This SQL query retrieves data from the contacts table, including the array column. It also demonstrates how to access specific array elements.

LANGUAGE: SQL
CODE:
SELECT
  name,
  phones
FROM
  contacts;

LANGUAGE: SQL
CODE:
SELECT
  name,
  phones [ 1 ]
FROM
  contacts;

----------------------------------------

TITLE: PostgreSQL RIGHT JOIN Example with Film and Inventory Tables
DESCRIPTION: Demonstrates a practical RIGHT JOIN example using the film and inventory tables from the sample database. It retrieves all films and their inventory information, including films without inventory.

LANGUAGE: sql
CODE:
SELECT
  film.film_id,
  film.title,
  inventory.inventory_id
FROM
  inventory
RIGHT JOIN film
  ON film.film_id = inventory.film_id
ORDER BY
  film.title;

----------------------------------------

TITLE: Indexing Materialized View for Performance in PostgreSQL
DESCRIPTION: This SQL snippet creates an index on the 'order_date' column of the 'daily_revenue' materialized view. This index can significantly improve query performance for date-based lookups.

LANGUAGE: sql
CODE:
CREATE INDEX idx_daily_revenue_date ON daily_revenue(order_date);

----------------------------------------

TITLE: Creating a New Django App for the API
DESCRIPTION: Generates a new Django app named 'models_api' to contain the API-related code and models.

LANGUAGE: bash
CODE:
python manage.py startapp models_api

----------------------------------------

TITLE: Creating a Table with ltree Column in PostgreSQL
DESCRIPTION: SQL command to create a table named 'product_categories' with an ltree column for storing hierarchical category paths. This example is part of an e-commerce product category hierarchy.

LANGUAGE: sql
CODE:
CREATE TABLE product_categories (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    path ltree NOT NULL
);

----------------------------------------

TITLE: Implementing RLS Policies with SQL
DESCRIPTION: Shows how to create a 'todos' table and implement Row-Level Security policies using SQL, including enabling RLS and creating individual policies for CRUD operations.

LANGUAGE: sql
CODE:
-- schema for TODOs table
CREATE TABLE todos (
  id bigint generated by default as identity primary key,
  user_id text not null default (auth.user_id()),
  task text check (char_length(task) > 0),
  is_complete boolean default false,
  inserted_at timestamptz not null default now()
);

-- 1st enable row level security for your table
ALTER TABLE todos ENABLE ROW LEVEL SECURITY;

-- 2nd create policies for your table
CREATE POLICY "Individuals can create todos." ON todos FOR INSERT
TO authenticated
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can view their own todos." ON todos FOR SELECT
TO authenticated
USING ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can update their own todos." ON todos FOR UPDATE
TO authenticated
USING ((select auth.user_id()) = user_id)
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can delete their own todos." ON todos FOR DELETE
TO authenticated
USING ((select auth.user_id()) = user_id);

----------------------------------------

TITLE: Implementing Question Seeder Data
DESCRIPTION: Database seeder implementation for populating the questions table with sample data.

LANGUAGE: php
CODE:
public function run()
{
   $questions = [
       ['What is Laravel?', 'A PHP framework for web artisans.'],
       ['What is MVC?', 'A design pattern called Model-View-Controller.'],
       ['What is PHP?', 'A popular general-purpose scripting language.'],
       ['How do databases work?', 'Databases store data in an organized manner.'],
       ['What is OOP?', 'Object-Oriented Programming is a programming paradigm.'],
       ['What is a variable in programming?', 'A variable is used to store information.'],
       ['What is an API?', 'Application Programming Interface, a way for systems to interact.'],
       ['What are webhooks?', 'Webhooks allow applications to send automated messages or information.'],
       ['What is JSON?', 'JSON is a format for storing and transporting data.'],
       ['What is a function in programming?', 'A function is a block of code designed to perform a particular task.']
   ];

   foreach ($questions as $q) {
       Question::create([
           'title' => $q[0],
           'description' => $q[1]
       ]);
   }
}

----------------------------------------

TITLE: Ranking Search Results from tsvector Column in PostgreSQL
DESCRIPTION: This snippet shows how to use the ts_rank function to rank full-text search results based on relevance, including table creation, data insertion, and a query that orders results by rank.

LANGUAGE: sql
CODE:
CREATE TABLE news_articles (
    id SERIAL PRIMARY KEY,
    headline TEXT NOT NULL,
    body TEXT NOT NULL,
    search_vector tsvector
);

INSERT INTO news_articles (headline, body)
VALUES
    ('Climate Change Summit Concludes', 'World leaders agreed on new measures to combat global warming at the climate summit.'),
    ('New Study on Climate Change', 'Scientists publish groundbreaking research on the effects of climate change on biodiversity.'),
    ('Tech Giant Announces Green Initiative', 'Major tech company pledges to be carbon neutral by 2030 in fight against climate change.');

UPDATE news_articles
SET search_vector = to_tsvector('english', headline || ' ' || body);

SELECT headline, ts_rank(search_vector, query) AS rank
FROM news_articles, to_tsquery('english', 'climate & change') query
WHERE search_vector @@ query
ORDER BY rank DESC;

----------------------------------------

TITLE: Configuring Neon Database Connection in Laravel
DESCRIPTION: Environment variables to set up the database connection for a Neon Postgres database in Laravel's .env file.

LANGUAGE: env
CODE:
DB_CONNECTION=pgsql
DB_HOST=your-neon-hostname.neon.tech
DB_PORT=5432
DB_DATABASE=your_database_name
DB_USERNAME=your_username
DB_PASSWORD=your_password

----------------------------------------

TITLE: Creating Express Project Directory
DESCRIPTION: Shell commands to create a new Express project directory and install the basic Express dependency.

LANGUAGE: shell
CODE:
mkdir neon-express-example
cd neon-express-example
npm init -y
npm install express

----------------------------------------

TITLE: Creating a Table with JSONB Column in PostgreSQL
DESCRIPTION: Creates a 'products' table with a JSONB column for storing product properties as JSON data.

LANGUAGE: SQL
CODE:
CREATE TABLE products(
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    properties JSONB
);

----------------------------------------

TITLE: Creating a Table with Spatial Data in PostGIS
DESCRIPTION: SQL command to create a table for storing bus stop locations using PostGIS spatial data types. The location column uses the GEOGRAPHY(Point) type for storing coordinates.

LANGUAGE: sql
CODE:
CREATE TABLE bus_stops (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255),
    location GEOGRAPHY(Point)
);

----------------------------------------

TITLE: Converting Mixed Data Types to JSON Array using json_scalar() in SQL
DESCRIPTION: Shows how to use json_scalar() with json_build_array() to convert mixed data types into a JSON array.

LANGUAGE: sql
CODE:
SELECT json_build_array(
    json_scalar(42),
    json_scalar('text'),
    json_scalar(CURRENT_TIMESTAMP),
    json_scalar(NULL)
);

----------------------------------------

TITLE: Creating and Querying Sample Table in SQL
DESCRIPTION: SQL snippet that creates a table called 'playing_with_neon', inserts random data using generate_series, and selects all records from the table.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS playing_with_neon(id SERIAL PRIMARY KEY, name TEXT NOT NULL, value REAL);
INSERT INTO playing_with_neon(name, value)
SELECT LEFT(md5(i::TEXT), 10), random() FROM generate_series(1, 10) s(i);
SELECT * FROM playing_with_neon;

----------------------------------------

TITLE: Running Prisma Migration for Schema Update
DESCRIPTION: Command to generate and apply a new Prisma migration after adding the 'country' field to the Author model.

LANGUAGE: bash
CODE:
npx prisma migrate dev --name add-country

----------------------------------------

TITLE: Implementing main application page with authentication and user message display
DESCRIPTION: React component for the main application page, handling user authentication state, message display, and form interactions.

LANGUAGE: typescript
CODE:
/// app/page.tsx

import { createUserMessage, deleteUserMessage } from './actions';
import { db } from './db';
import { auth } from '@/auth';

async function getUserMessage() {
  const session = await auth();
  if (!session) return null;

  return db.query.UserMessages.findFirst({
    where: (messages, { eq }) => eq(messages.user_id, session.user?.id as string),
  });
}

function LoginBox() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-center p-24">
      <a
        href="/api/auth/signin"
        className="text-gray-800 rounded-md bg-[#00E699] px-3.5 py-2.5 text-sm font-semibold shadow-sm hover:bg-[#00e5BF] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#00E699]"
      >
        Log in
      </a>
    </main>
  );
}

export default async function Home() {
  const session = await auth();
  const existingMessage = await getUserMessage();

  if (!session) {
    return <LoginBox />;
  }

  const ui = existingMessage ? (
    <div className="w-2/3 text-center">
      <h1 className="text-3xl">{existingMessage.message}</h1>
      <form action={deleteUserMessage} className="mb-4 w-full rounded px-8 pb-8 pt-6">
        <div className="w-full text-center">
          <input
            type="submit"
            value={'Delete Quote'}
            className="text-gray-800 cursor-pointer rounded bg-[#00E699] px-4 py-2 font-semibold transition-colors hover:bg-[#00e5BF] focus:outline-none"
          />
        </div>
      </form>
    </div>
  ) : (
    <form action={createUserMessage} className="w-2/3 rounded px-8 shadow-md">
      <div className="mb-6">
        <input
          type="text"
          name="message"
          placeholder="Mistakes are the portals of discovery - James Joyce"
          className="text-gray-700 w-full appearance-none rounded border p-3 text-center leading-tight focus:outline-none"
        />
      </div>
      <div className="w-full text-center">
        <input
          type="submit"
          value={'Save Quote'}
          className="text-gray-800 cursor-pointer rounded bg-[#00E699] px-4 py-2 font-semibold transition-colors hover:bg-[#00e5BF] focus:outline-none"
        />
      </div>
    </form>
  );

  return (
    <main className="align-center -mt-16 flex min-h-screen flex-col items-center justify-center px-24">
      <h2 className="text-gray-400 pb-6 text-2xl">
        {existingMessage ? 'Your quote is wonderful...' : 'Save an inspiring quote for yourself...'}
      </h2>
      {ui}
    </main>
  );
}

----------------------------------------

TITLE: Finding Customers with High-Value Rentals
DESCRIPTION: Query to find customers who have paid at least one rental with an amount greater than 11 using EXISTS and a correlated subquery.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  customer c
WHERE
  EXISTS (
    SELECT
      1
    FROM
      payment p
    WHERE
      p.customer_id = c.customer_id
      AND amount > 11
  )
ORDER BY
  first_name,
  last_name;

----------------------------------------

TITLE: Importing CSV Data Using psql copy Command
DESCRIPTION: psql copy command to import data from a CSV file into the customer table. The command specifies delimiter and indicates that the CSV file contains headers.

LANGUAGE: bash
CODE:
\copy customer FROM '/path/to/customer.csv' DELIMITER ',' CSV HEADER

----------------------------------------

TITLE: Creating Table with CURRENT_TIMESTAMP Default Value
DESCRIPTION: Creates a table with a timestamp column that automatically sets to the current date and time using CURRENT_TIMESTAMP as the default value.

LANGUAGE: sql
CODE:
CREATE TABLE note (
    id SERIAL PRIMARY KEY,
    message VARCHAR(255) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

----------------------------------------

TITLE: Combining PostgreSQL SUM() with COALESCE()
DESCRIPTION: Shows how to use COALESCE() to return 0 instead of NULL when SUM() is applied to an empty set.

LANGUAGE: sql
CODE:
SELECT
  COALESCE(SUM(amount), 0 ) total
FROM
  payment
WHERE
  customer_id = 2000;

----------------------------------------

TITLE: Creating Database Context
DESCRIPTION: Entity Framework DbContext class definition for database operations.

LANGUAGE: csharp
CODE:
using Microsoft.EntityFrameworkCore;
using NeonEfExample.Models;

namespace NeonEfExample.Data
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        public DbSet<Todo> Todos => Set<Todo>();
    }
}

----------------------------------------

TITLE: Advanced MERGE Usage with Complex Conditions in PostgreSQL
DESCRIPTION: Showcases a more complex MERGE operation with additional conditions and data transformations. This example demonstrates how to handle various scenarios like deletions, out-of-stock items, and regular updates within a single MERGE statement.

LANGUAGE: sql
CODE:
MERGE INTO products p
USING (
    SELECT
        name,
        price,
        stock,
        status,
        CASE
            WHEN price IS NULL AND status = 'discontinued' THEN 'DELETE'
            WHEN stock = 0 THEN 'OUT_OF_STOCK'
            ELSE status
        END as action_type
    FROM product_updates
) u
ON p.name = u.name
WHEN MATCHED AND u.action_type = 'DELETE' THEN
    DELETE
WHEN MATCHED AND u.action_type = 'OUT_OF_STOCK' THEN
    UPDATE SET
        status = 'inactive',
        stock = 0,
        last_updated = CURRENT_TIMESTAMP
WHEN MATCHED THEN
    UPDATE SET
        price = COALESCE(u.price, p.price),
        stock = u.stock,
        status = u.status,
        last_updated = CURRENT_TIMESTAMP
WHEN NOT MATCHED AND u.action_type != 'DELETE' THEN
    INSERT (name, price, stock, status)
    VALUES (u.name, u.price, u.stock, u.status)
RETURNING
    merge_action() as action,
    p.*,
    u.action_type;

----------------------------------------

TITLE: Standard PostgreSQL Transaction Pattern in Python
DESCRIPTION: Demonstrates the typical pattern for managing a transaction using psycopg2, including error handling and proper resource cleanup

LANGUAGE: python
CODE:
import psycopg2

conn = None
try:
    conn = psycopg2.connect(config)
    cur = conn.cursor()

    # execute 1st statement
    cur.execute(statement1)

    # execute 2nd statement
    cur.execute(statement2)

    # commit the transaction
    conn.commit()

    # close the cursor
    cur.close()
except psycopg2.DatabaseError as error:
    if conn:
       conn.rollback()
    print(error)
finally:
    if conn:
        conn.close()

----------------------------------------

TITLE: Basic Syntax of jsonb_extract_path() Function in PostgreSQL
DESCRIPTION: Demonstrates the basic syntax of the jsonb_extract_path() function, which takes a JSONB target and a variable number of text path elements as arguments.

LANGUAGE: sql
CODE:
jsonb_extract_path(target jsonb, VARIADIC path_elems text[])

----------------------------------------

TITLE: Creating a function to measure statement execution time using CLOCK_TIMESTAMP() in PostgreSQL
DESCRIPTION: This PL/pgSQL function uses CLOCK_TIMESTAMP() to measure the execution time of a given SQL statement in milliseconds.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION time_it(
    p_statement TEXT
) RETURNS NUMERIC AS $$
DECLARE
    start_time TIMESTAMP WITH TIME ZONE;
    end_time TIMESTAMP WITH TIME ZONE;
    execution_time NUMERIC; -- ms
BEGIN
    -- Capture start time
    start_time := CLOCK_TIMESTAMP();

    -- Execute the statement
    EXECUTE p_statement;

    -- Capture end time
    end_time := CLOCK_TIMESTAMP();

    -- Calculate execution time in milliseconds
    execution_time := EXTRACT(EPOCH FROM end_time - start_time) * 1000;

    RETURN execution_time;
END;
$$ LANGUAGE plpgsql;

----------------------------------------

TITLE: Creating Basic Trigger Function Template in PostgreSQL
DESCRIPTION: Basic structure of a trigger function that executes before INSERT operations. This template shows the minimal required components of a trigger function.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION trigger_function()
   RETURNS TRIGGER
   LANGUAGE PLPGSQL
AS
$$
BEGIN
   -- trigger logic
   -- ...
   RETURN NEW;
END;
$$

----------------------------------------

TITLE: Basic PostgreSQL SELECT Statement Syntax
DESCRIPTION: Shows the fundamental syntax for SELECT statements in PostgreSQL for retrieving data from a table.

LANGUAGE: sql
CODE:
SELECT
   select_list
FROM
   table_name;

----------------------------------------

TITLE: Grouped sum() Calculation in PostgreSQL
DESCRIPTION: Demonstrates using sum() with GROUP BY to calculate subtotals for different categories, in this case, department sales totals.

LANGUAGE: sql
CODE:
WITH employee_sales AS (
  SELECT 'Alice' AS employee, 'Electronics' AS department, 5000 AS sales
  UNION ALL
  SELECT 'Bob' AS employee, 'Electronics' AS department, 6000 AS sales
  UNION ALL
  SELECT 'Charlie' AS employee, 'Clothing' AS department, 4500 AS sales
  UNION ALL
  SELECT 'David' AS employee, 'Clothing' AS department, 5500 AS sales
)
SELECT department, sum(sales) AS total_sales
FROM employee_sales
GROUP BY department;

----------------------------------------

TITLE: Running Prisma Migrations
DESCRIPTION: Command to generate and apply Prisma migrations based on the defined schema. This creates the necessary tables in the Neon database.

LANGUAGE: bash
CODE:
npx prisma migrate dev --name init

----------------------------------------

TITLE: Neon Database Connection String
DESCRIPTION: Environment variable configuration for storing the Neon database connection string.

LANGUAGE: shell
CODE:
DATABASE_URL="postgresql://<user>:<password>@<endpoint_hostname>.neon.tech:<port>/<dbname>?sslmode=require"

----------------------------------------

TITLE: Creating User Signups vs Cancellations Chart View
DESCRIPTION: Blade template for rendering the User Signups vs Cancellations chart using Livewire Charts.

LANGUAGE: blade
CODE:
<div class="h-64">
    <livewire:livewire-pie-chart
        :pie-chart-model="$pieChartModel"
    />
</div>

----------------------------------------

TITLE: Product Visit Resolver Implementation
DESCRIPTION: JavaScript resolver implementation for adding product visits to the database

LANGUAGE: javascript
CODE:
import { Client } from '@neondatabase/serverless'

export default async function Resolver(_, { productId }) {
  const client = new Client(process.env.DATABASE_URL)

  await client.connect()
  await client.query(
    `INSERT INTO product_visits (product_id) VALUES ('${productId}')`
  )
  await client.end()

  return productId
}

----------------------------------------

TITLE: Basic jsonb_pretty() Function Syntax
DESCRIPTION: Demonstrates the basic syntax for using the jsonb_pretty() function with a JSONB value input.

LANGUAGE: sql
CODE:
jsonb_pretty(jsonb_value)

----------------------------------------

TITLE: Using AND Operator in WHERE Clause
DESCRIPTION: Demonstrates how to use the AND operator in a WHERE clause to filter data based on multiple conditions from the film table.

LANGUAGE: sql
CODE:
SELECT
  title,
  length,
  rental_rate
FROM
  film
WHERE
  length > 180
  AND rental_rate < 1;

----------------------------------------

TITLE: Inserting Data into a Table with DATE Column in PostgreSQL
DESCRIPTION: This example shows how to insert data into a table with a DATE column, demonstrating the default value behavior.

LANGUAGE: sql
CODE:
INSERT INTO documents (header_text)
VALUES ('Billing to customer XYZ')
RETURNING *;

----------------------------------------

TITLE: Laravel Database Configuration with Read Replicas
DESCRIPTION: PHP configuration for Laravel showing how to set up read and write connections

LANGUAGE: php
CODE:
'pgsql' => [
    'driver' => 'pgsql',
    'read' => [
        'host' => env('DB_READ_HOST'),
    ],
    'write' => [
        'host' => env('DB_WRITE_HOST'),
    ],
    'sticky'    => true,
    'port' => env('DB_PORT', '5432'),
    'database' => env('DB_DATABASE', 'laravel'),
    'username' => env('DB_USERNAME', 'root'),
    'password' => env('DB_PASSWORD', ''),
    'charset' => env('DB_CHARSET', 'utf8'),
    'prefix' => '',
    'prefix_indexes' => true,
    'search_path' => 'public',
    'sslmode' => 'prefer',
],

----------------------------------------

TITLE: Finding Locations within a Polygon using ST_MakeEnvelope in Postgres
DESCRIPTION: This SQL query uses the ST_MakeEnvelope function to find all locations within a specified rectangle (roughly covering Northern California). It demonstrates how to perform polygon-based geospatial searches in Postgres using PostGIS.

LANGUAGE: sql
CODE:
SELECT name FROM locations
WHERE geom && ST_MakeEnvelope(-124, 36, -119, 39, 4326);

----------------------------------------

TITLE: Fuzzy Matching with Typo Tolerance
DESCRIPTION: Shows how to use fuzzy matching to find results even with minor typos in the search term.

LANGUAGE: sql
CODE:
SELECT description, category
FROM mock_items
WHERE id @@@ paradedb.match('description', 'runing', distance => 1);

----------------------------------------

TITLE: Creating Postgres Client with Neon Serverless Driver
DESCRIPTION: Establishes a connection to Neon Postgres database using the serverless driver. Creates a reusable query function for database operations.

LANGUAGE: typescript
CODE:
import 'dotenv/config';
import { neon } from '@neondatabase/serverless';
const connectionString: string = process.env.DATABASE_URL as string;
export default neon(connectionString);

----------------------------------------

TITLE: Livewire Search Component
DESCRIPTION: PHP component implementing real-time search functionality using Livewire.

LANGUAGE: php
CODE:
<?php

namespace App\Livewire;

use Livewire\Component;
use App\Models\Product;

class ProductSearch extends Component
{
    public $search = '';

    public function render()
    {
        $products = Product::where('name', 'like', '%' . $this->search . '%')
                           ->orWhere('description', 'like', '%' . $this->search . '%')
                           ->get();

        return view('livewire.product-search', [
            'products' => $products
        ]);
    }
}

----------------------------------------

TITLE: Downloading Convex Docker Compose Configuration
DESCRIPTION: Bash command to download the default docker-compose.yml file for Convex using npx degit.

LANGUAGE: bash
CODE:
npx degit get-convex/convex-backend/self-hosted/docker/docker-compose.yml docker-compose.yml

----------------------------------------

TITLE: Type-Copying SELECT INTO Example
DESCRIPTION: Demonstrates using type-copying technique when declaring variables for SELECT INTO operations.

LANGUAGE: plpgsql
CODE:
do
$$
declare
   v_first_name actor.first_name%type;
   v_last_name actor.last_name%type;
begin
   -- select the first_name and last_name of the actor id 1
   select first_name, last_name
   into v_first_name, v_last_name
   from actor
   where actor_id = 1;

   -- show the full name
   raise notice '% %', v_first_name, v_last_name;
end;
$$;

----------------------------------------

TITLE: Film Duration Categorization Using CASE
DESCRIPTION: Example showing how to categorize films as Short, Medium, or Long based on their length using CASE expression.

LANGUAGE: sql
CODE:
SELECT
  title,
  length,
  CASE WHEN length > 0
  AND length <= 50 THEN 'Short' WHEN length > 50
  AND length <= 120 THEN 'Medium' WHEN length > 120 THEN 'Long' END duration
FROM
  film
ORDER BY
  title;

----------------------------------------

TITLE: Creating AFTER DELETE Trigger for Employee Archiving
DESCRIPTION: Defines an AFTER DELETE trigger on the employees table that calls the archive_deleted_employee() function after a row is deleted.

LANGUAGE: sql
CODE:
CREATE TRIGGER after_delete_employee_trigger
AFTER DELETE ON employees
FOR EACH ROW
EXECUTE FUNCTION archive_deleted_employee();

----------------------------------------

TITLE: Basic PostgreSQL DISTINCT ON Syntax
DESCRIPTION: Demonstrates the basic syntax structure for using DISTINCT ON clause in PostgreSQL queries. Shows how to specify columns for distinct selection and ordering.

LANGUAGE: sql
CODE:
SELECT
  DISTINCT ON (column1, column2,...) column1,
  column2,
  ...
FROM
  table_name
ORDER BY
  column1,
  column2,
  ...;

----------------------------------------

TITLE: Implementing TaskController for CRUD Operations
DESCRIPTION: Creates a TaskController with methods for index, store, show, update, and destroy operations on tasks.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Task;
use Illuminate\Http\Request;

class TaskController extends Controller
{
    public function index()
    {
        $tasks = Task::all();
        return response()->json($tasks);
    }

    public function store(Request $request)
    {
        $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
            'status' => 'required|in:pending,in_progress,completed',
            'due_date' => 'nullable|date',
            'priority' => 'required|integer|min:1|max:5',
        ]);

        $task = $request->user()->tasks()->create($request->all());
        return new TaskResource($task);
    }

    public function show(Task $task)
    {
        return response()->json($task);
    }

    public function update(Request $request, Task $task)
    {
        $this->authorize('update', $task);

        $validated = $request->validate([
            'title' => 'sometimes|required|string|max:255',
            'description' => 'nullable|string',
            'status' => 'sometimes|required|in:pending,in_progress,completed',
            'due_date' => 'nullable|date',
            'priority' => 'sometimes|required|integer|min:1|max:5',
        ]);

        $task->update($validated);

        return new TaskResource($task);
    }

    public function destroy(Task $task)
    {
        $task->delete();
        return response()->json(null, 204);
    }
}

----------------------------------------

TITLE: Using PostgreSQL LIKE with Multiple Wildcards
DESCRIPTION: This query uses both % and _ wildcards to find customer names that match a specific pattern. It demonstrates more complex pattern matching capabilities.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
WHERE
  first_name LIKE '_her%'
ORDER BY
  first_name;

----------------------------------------

TITLE: Working with Tables Without Primary Keys
DESCRIPTION: SQL commands demonstrating how to handle tables without primary keys using REPLICA IDENTITY settings.

LANGUAGE: sql
CODE:
CREATE TABLE products_no_pk (
    product_name VARCHAR(100),
    quantity INTEGER,
    price DECIMAL(10, 2)
);

INSERT INTO products_no_pk (product_name, quantity, price) VALUES ('Widget', 100, 19.99);
UPDATE products_no_pk SET quantity = 90 WHERE product_name = 'Widget';

----------------------------------------

TITLE: Implementing Tenant Onboarding Controller
DESCRIPTION: PHP code for the OnboardingController, handling the tenant onboarding process.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers\Tenant;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;

class OnboardingController extends Controller
{
    public function show()
    {
        if (User::count() > 0) {
            return redirect()->route('tenant.dashboard');
        }

        return view('tenant.onboarding');
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
        ]);

        $user = User::create([
            'name' => $validated['name'],
            'email' => $validated['email'],
            'password' => Hash::make($validated['password']),
        ]);

        auth()->login($user);

        return redirect()->route('tenant.dashboard')->with('success', 'Welcome to your new account!');
    }
}

----------------------------------------

TITLE: Conventional PostgreSQL EXISTS Usage
DESCRIPTION: Shows the common coding convention for using the EXISTS operator, which focuses on the existence of rows rather than their contents.

LANGUAGE: sql
CODE:
SELECT
  select_list
FROM
  table1
WHERE
  EXISTS(
    SELECT
      1
    FROM
      table2
    WHERE
      condition
  );

----------------------------------------

TITLE: Implementing Neon Search Service
DESCRIPTION: JavaScript code for the Neon search service, handling full-text search using PostgreSQL's capabilities.

LANGUAGE: javascript
CODE:
const { query } = require('../config/database');

class NeonSearchService {
  async search(searchQuery, filters = {}, limit = 10) {
    try {
      let sql = `
        WITH RankedResults AS (
          SELECT
            t.tutorial_id,
            t.title,
            t.content,
            t.difficulty_level,
            t.tags,
            tech.name as technology,
            ts_rank_cd(
              setweight(to_tsvector('english', title), 'A') ||
              setweight(to_tsvector('english', content), 'B'),
              plainto_tsquery('english', $1)
            ) as rank
          FROM tutorials t
          JOIN technologies tech ON t.tech_id = tech.tech_id
          WHERE to_tsvector('english', title || ' ' || content) @@ plainto_tsquery($1)
      `;

      const values = [searchQuery];
      let paramIndex = 2;

      // Add filters if provided
      if (filters.difficulty) {
        sql += ` AND difficulty_level = $${paramIndex}`;
        values.push(filters.difficulty);
        paramIndex++;
      }

      if (filters.technology) {
        sql += ` AND tech.name = $${paramIndex}`;
        values.push(filters.technology);
        paramIndex++;
      }

      if (filters.tags && filters.tags.length > 0) {
        sql += ` AND tags && $${paramIndex}`;
        values.push(filters.tags);
        paramIndex++;
      }

      sql += `
        )
        SELECT *,
          CASE
            WHEN title ILIKE '%' || $1 || '%' THEN rank * 2  -- Boost exact title matches
            ELSE rank
          END as final_rank
        FROM RankedResults
        ORDER BY final_rank DESC
        LIMIT $${paramIndex}
      `;
      values.push(limit);

      const result = await query(sql, values);
      return result.rows;
    } catch (error) {
      console.error('Neon search error:', error);
      throw error;
    }
  }
}

module.exports = new NeonSearchService();

----------------------------------------

TITLE: Configuring Neon Database Connection String
DESCRIPTION: Environment variable configuration for the Neon database connection string

LANGUAGE: shell
CODE:
DATABASE_URL="postgresql://<user>:<password>@<endpoint_hostname>.neon.tech:<port>/<dbname>?sslmode=require"

----------------------------------------

TITLE: Creating Salary Change Trigger
DESCRIPTION: SQL command to create an AFTER UPDATE trigger specifically for the salary column changes.

LANGUAGE: sql
CODE:
CREATE TRIGGER after_update_salary_trigger
AFTER UPDATE OF salary ON salaries
FOR EACH ROW
EXECUTE FUNCTION log_salary_change();

----------------------------------------

TITLE: Inserting Books into Neon Database using C# and Npgsql
DESCRIPTION: This C# code snippet shows how to insert multiple books into the books table using parameterized queries with Npgsql.

LANGUAGE: C#
CODE:
using (var conn = new NpgsqlConnection(connString))
{
    Console.Out.WriteLine("Opening connection");
    conn.Open();

    using (var command = new NpgsqlCommand(
        @"INSERT INTO books (title, author, year_published)
          VALUES (@t1, @a1, @y1), (@t2, @a2, @y2)", conn))
    {
        command.Parameters.AddWithValue("t1", "The Great Gatsby");
        command.Parameters.AddWithValue("a1", "F. Scott Fitzgerald");
        command.Parameters.AddWithValue("y1", 1925);

        command.Parameters.AddWithValue("t2", "1984");
        command.Parameters.AddWithValue("a2", "George Orwell");
        command.Parameters.AddWithValue("y2", 1949);

        int nRows = command.ExecuteNonQuery();
        Console.Out.WriteLine($"Number of books added={nRows}");
    }
}

----------------------------------------

TITLE: Defining array_length() Function Signature in SQL
DESCRIPTION: Shows the function signature of array_length(), which takes an array of any type and an integer dimension as input, returning an integer representing the length of the array in that dimension.

LANGUAGE: sql
CODE:
array_length(anyarray, int) -> int

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Configuration of database URLs in the .env file for primary and replica databases

LANGUAGE: text
CODE:
DATABASE_URL="postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname"
DATABASE_REPLICA_URL="postgresql://alex:AbC123dEf@ep-damp-cell-123456.us-east-2.aws.neon.tech/dbname"

----------------------------------------

TITLE: Todos Table Schema Definition
DESCRIPTION: TypeScript schema definition for the todos table using Drizzle ORM, including user authentication integration.

LANGUAGE: typescript
CODE:
{
    id: bigint("id", { mode: "bigint" })
      .primaryKey()
      .generatedByDefaultAsIdentity(),
    userId: text("user_id")
      .notNull()
      .default(sql`(auth.user_id())`),
    task: text("task").notNull(),
    isComplete: boolean("is_complete").notNull().default(false),
    insertedAt: timestamp("inserted_at", { withTimezone: true })
      .defaultNow()
      .notNull(),
}

----------------------------------------

TITLE: Expanding PostgreSQL Arrays with unnest()
DESCRIPTION: This SQL query shows how to use the unnest() function to expand an array into multiple rows.

LANGUAGE: SQL
CODE:
SELECT
  name,
  unnest(phones)
FROM
  contacts;

----------------------------------------

TITLE: Seeding Data into Neon Postgres Database with Sequelize
DESCRIPTION: JavaScript script to seed sample data into the database using Sequelize models for Author and Book.

LANGUAGE: javascript
CODE:
// seed.js

const { Sequelize, DataTypes } = require('sequelize');
const { config } = require('dotenv');

config();
if (!process.env.DATABASE_URL) {
  throw new Error('DATABASE_URL is not set');
}

const sequelize = new Sequelize(process.env.DATABASE_URL, {
  dialectOptions: {
    ssl: {
      require: true,
    },
  },
});

const Author = require('./models/author')(sequelize, DataTypes);
const Book = require('./models/book')(sequelize, DataTypes);

const seedDatabase = async () => {
  const author = await Author.create({
    name: 'J.K. Rowling',
    bio: 'The creator of the Harry Potter series',
  });
  await Book.create({ title: "Harry Potter and the Philosopher's Stone", authorId: author.id });
  await Book.create({ title: 'Harry Potter and the Chamber of Secrets', authorId: author.id });

  const author2 = await Author.create({
    name: 'J.R.R. Tolkien',
    bio: 'The creator of Middle-earth and author of The Lord of the Rings.',
  });
  await Book.create({ title: 'The Hobbit', authorId: author2.id });
  await Book.create({ title: 'The Fellowship of the Ring', authorId: author2.id });
  await Book.create({ title: 'The Two Towers', authorId: author2.id });
  await Book.create({ title: 'The Return of the King', authorId: author2.id });

  const author3 = await Author.create({
    name: 'George R.R. Martin',
    bio: 'The author of the epic fantasy series A Song of Ice and Fire.',
  });
  await Book.create({ title: 'A Game of Thrones', authorId: author3.id });
  await Book.create({ title: 'A Clash of Kings', authorId: author3.id });

  await sequelize.close();
};

seedDatabase();

----------------------------------------

TITLE: Implementing Database Operations with Neon Serverless Driver
DESCRIPTION: JavaScript code using the Neon serverless driver to connect to the database and perform operations like fetching all clients and adding a new client.

LANGUAGE: javascript
CODE:
import { neon } from '@neondatabase/serverless';
import dotenv from 'dotenv';

dotenv.config();

const sql = neon(process.env.DATABASE_URL);

const getAllClients = async () => {
  const rows = await sql`SELECT * FROM clients`;
  return rows;
};

const addClient = async (first_name, last_name, email, phone_number) => {
  const [newClient] = await sql`
    INSERT INTO clients (first_name, last_name, email, phone_number)
    VALUES (${first_name}, ${last_name}, ${email}, ${phone_number})
    RETURNING *`;
  return newClient;
};

export { getAllClients, addClient };

----------------------------------------

TITLE: Dumping PostgreSQL Database to File
DESCRIPTION: This shell command uses pg_dump to export a PostgreSQL database to a SQL file for backup or transfer purposes.

LANGUAGE: shell
CODE:
pg_dump -U postgres -d sourcedb -f sourcedb.sql

----------------------------------------

TITLE: PostgreSQL MAX() Function with HAVING Clause
DESCRIPTION: This example uses the MAX() function in a HAVING clause to filter groups, selecting the highest payment made by each customer that exceeds 8.99.

LANGUAGE: sql
CODE:
SELECT
  customer_id,
  MAX (amount)
FROM
  payment
GROUP BY
  customer_id
HAVING
  MAX(amount) > 8.99;

----------------------------------------

TITLE: Employee Scheduling CROSS JOIN Example
DESCRIPTION: Shows how to use CROSS JOIN for employee scheduling scenarios.

LANGUAGE: sql
CODE:
SELECT *
FROM employees
CROSS JOIN shift;

----------------------------------------

TITLE: Renaming a Table in PostgreSQL
DESCRIPTION: Basic syntax for renaming a table using ALTER TABLE ... RENAME TO statement. It also shows how to use the IF EXISTS clause to avoid errors when renaming non-existent tables.

LANGUAGE: sql
CODE:
ALTER TABLE table_name
RENAME TO new_table_name;

LANGUAGE: sql
CODE:
ALTER TABLE IF EXISTS table_name
RENAME TO new_table_name;

----------------------------------------

TITLE: Transaction Rollback Example in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates how to start a transaction, make changes, and then roll back those changes, effectively undoing them.

LANGUAGE: sql
CODE:
-- start a transaction
BEGIN;

UPDATE accounts
SET balance = balance - 1000
WHERE id =  1;

-- rollback the changes
ROLLBACK;

----------------------------------------

TITLE: Creating a Table with SMALLINT in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates how to create a table named 'books' with a SMALLINT column for storing the number of pages. It includes a CHECK constraint to ensure the page count is positive.

LANGUAGE: sql
CODE:
CREATE TABLE books (
    book_id SERIAL PRIMARY KEY,
    title VARCHAR (255) NOT NULL,
    pages SMALLINT NOT NULL CHECK (pages > 0)
);

----------------------------------------

TITLE: Implementing RLS Policies with Raw SQL
DESCRIPTION: SQL commands to create a todos table and implement RLS policies for CRUD operations.

LANGUAGE: sql
CODE:
CREATE TABLE todos (
  id bigint generated by default as identity primary key,
  user_id text not null default (auth.user_id()),
  task text check (char_length(task) > 0),
  is_complete boolean default false,
  inserted_at timestamptz not null default now()
);

ALTER TABLE todos ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create todos." ON todos FOR INSERT
TO authenticated
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can view their own todos." ON todos FOR SELECT
TO authenticated
USING ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can update their own todos." ON todos FOR UPDATE
TO authenticated
USING ((select auth.user_id()) = user_id)
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can delete their own todos." ON todos FOR DELETE
TO authenticated
USING ((select auth.user_id()) = user_id);

----------------------------------------

TITLE: Defining Ecto Repository Module
DESCRIPTION: This snippet shows the definition of the Ecto.Repo module in lib/friends/repo.ex. It specifies the OTP application and the Postgres adapter for the repository.

LANGUAGE: elixir
CODE:
defmodule Friends.Repo do
  use Ecto.Repo,
    otp_app: :friends,
    adapter: Ecto.Adapters.Postgres
end

----------------------------------------

TITLE: Inventory Management CROSS JOIN Example
DESCRIPTION: Demonstrates using CROSS JOIN for inventory management across multiple warehouses.

LANGUAGE: sql
CODE:
SELECT *
FROM products
CROSS JOIN warehouses;

----------------------------------------

TITLE: Implementing getTodos Function with RLS
DESCRIPTION: Function to retrieve todos with both application-level and RLS-level security using Drizzle ORM.

LANGUAGE: typescript
CODE:
export async function getTodos(): Promise<Array<Todo>> {
  const { getToken } = auth();
  const authToken = await getToken();
  const db = drizzle(process.env.DATABASE_AUTHENTICATED_URL!, { schema });

  return db
    .$withAuth(authToken)
    .select()
    .from(schema.todos)
    .where(eq(schema.todos.userId, sql`auth.user_id()`))
    .orderBy(asc(schema.todos.insertedAt));
}

----------------------------------------

TITLE: Calculating Total Revenue with sum() in PostgreSQL
DESCRIPTION: Example of using sum() to calculate total revenue from a sales table, demonstrating multiplication within the function.

LANGUAGE: sql
CODE:
WITH sales(product_id, quantity, price) AS (
  VALUES
    (1, 10, 100.0),
    (2, 5, 50.0),
    (1, 5, 100.0),
    (3, 3, 75.0),
    (2, 2, 50.0)
)
SELECT sum(quantity * price) AS total_revenue
FROM sales;

----------------------------------------

TITLE: Inserting New Product with UPSERT
DESCRIPTION: Shows how to insert a new product using the INSERT ON CONFLICT statement when no conflict exists.

LANGUAGE: sql
CODE:
INSERT INTO inventory (id, name, price, quantity)
VALUES (4, 'D', 29.99, 20)
ON CONFLICT(id)
DO UPDATE SET
  price = EXCLUDED.price,
  quantity = EXCLUDED.quantity;

----------------------------------------

TITLE: Creating Basic PostgreSQL Trigger Function
DESCRIPTION: Template for creating a basic trigger function that executes before an UPDATE operation. The function must return a trigger type and can access OLD and NEW record variables.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION trigger_function()
   RETURNS TRIGGER
   LANGUAGE PLPGSQL
AS
$$
BEGIN
   -- trigger logic
   -- ...
   RETURN NEW;
END;
$$

----------------------------------------

TITLE: SUBSTRING() with SQL Regular Expression in PostgreSQL
DESCRIPTION: Shows how to use SUBSTRING() with a SQL regular expression pattern and escape characters to extract substrings.

LANGUAGE: sql
CODE:
SELECT
  SUBSTRING ('PostgreSQL' FROM '%#"S_L#"%' FOR '#');

----------------------------------------

TITLE: Proximity Search with pg_trgm
DESCRIPTION: This SQL query performs a proximity search using the SIMILARITY function provided by pg_trgm, filtering results based on a similarity threshold.

LANGUAGE: sql
CODE:
SELECT title
FROM books
WHERE SIMILARITY(title, 'War and') > 0.3;

----------------------------------------

TITLE: Creating ApplicationDbContext for Entity Framework
DESCRIPTION: C# code defining the ApplicationDbContext class for database configuration and model creation.

LANGUAGE: csharp
CODE:
using Microsoft.EntityFrameworkCore;
using GuideNeonEF.Models;
using dotenv.net;

namespace GuideNeonEF
{
    public class ApplicationDbContext : DbContext
    {
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                DotEnv.Load();
                optionsBuilder.UseNpgsql(Environment.GetEnvironmentVariable("DATABASE_URL"));
            }
        }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Author>()
                .Property(a => a.CreatedAt)
                .HasDefaultValueSql("Now()");

            modelBuilder.Entity<Book>()
                .Property(b => b.CreatedAt)
                .HasDefaultValueSql("Now()");

            modelBuilder.Seed();
        }
        public DbSet<Author> Authors { get; set; }
        public DbSet<Book> Books { get; set; }
    }
}

----------------------------------------

TITLE: Querying table structure using information_schema
DESCRIPTION: SQL query to retrieve column information for the 'film' table from the information_schema.columns catalog. This provides details such as column names, data types, maximum lengths, nullability, and default values.

LANGUAGE: sql
CODE:
SELECT
  column_name,
  data_type,
  character_maximum_length,
  is_nullable,
  column_default
FROM
  information_schema.columns
WHERE
  table_name = 'film';

----------------------------------------

TITLE: Implementing Task Prioritization in List Tasks Command
DESCRIPTION: Updated PHP code for the ListTasksCommand class, adding task prioritization when listing tasks.

LANGUAGE: php
CODE:
public function handle()
{
    $query = Task::query();

    if ($this->option('status')) {
        $query->where('status', $this->option('status'));
    }

    if ($this->option('priority')) {
        $query->where('priority', $this->option('priority'));
    }

    $tasks = $query->orderByRaw("CASE
        WHEN priority = 'high' THEN 1
        WHEN priority = 'medium' THEN 2
        WHEN priority = 'low' THEN 3
        ELSE 4
    END")->get();

    // ... rest of the method
}

----------------------------------------

TITLE: Setting Up Postgres Roles for RLS
DESCRIPTION: Defines table-level permissions for 'authenticated' and 'anonymous' roles, granting CRUD operations on existing and future tables in the public schema.

LANGUAGE: sql
CODE:
-- For existing tables
GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to authenticated;

GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to anonymous;

-- For future tables
ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO authenticated;

ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO anonymous;

-- Grant USAGE on "public" schema
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO anonymous;

----------------------------------------

TITLE: EXPLAIN Query with Index on Film Table
DESCRIPTION: Example of using EXPLAIN to show the execution plan for a query using an index on the film_id column.

LANGUAGE: SQL
CODE:
EXPLAIN SELECT * FROM film WHERE film_id = 100;

----------------------------------------

TITLE: Exporting Data with pg_dump in Bash
DESCRIPTION: This command exports data from a source Postgres database using pg_dump. It uses the custom format (-Fc) for efficient output and includes verbose logging.

LANGUAGE: bash
CODE:
pg_dump -Fc -v -d <source_database_connection_string> -f <dump_file_name>

----------------------------------------

TITLE: Creating PostgreSQL Tables with Python
DESCRIPTION: This function connects to a PostgreSQL database and executes multiple CREATE TABLE statements to create tables for vendors, parts, part drawings, and vendor-part relationships. It uses psycopg2 for database connection and error handling.

LANGUAGE: python
CODE:
import psycopg2
from config import load_config

def create_tables():
    """ Create tables in the PostgreSQL database"""
    commands = (
        """
        CREATE TABLE vendors (
            vendor_id SERIAL PRIMARY KEY,
            vendor_name VARCHAR(255) NOT NULL
        )
        """,
        """ CREATE TABLE parts (
                part_id SERIAL PRIMARY KEY,
                part_name VARCHAR(255) NOT NULL
                )
        """,
        """
        CREATE TABLE part_drawings (
                part_id INTEGER PRIMARY KEY,
                file_extension VARCHAR(5) NOT NULL,
                drawing_data BYTEA NOT NULL,
                FOREIGN KEY (part_id)
                REFERENCES parts (part_id)
                ON UPDATE CASCADE ON DELETE CASCADE
        )
        """,
        """
        CREATE TABLE vendor_parts (
                vendor_id INTEGER NOT NULL,
                part_id INTEGER NOT NULL,
                PRIMARY KEY (vendor_id , part_id),
                FOREIGN KEY (vendor_id)
                    REFERENCES vendors (vendor_id)
                    ON UPDATE CASCADE ON DELETE CASCADE,
                FOREIGN KEY (part_id)
                    REFERENCES parts (part_id)
                    ON UPDATE CASCADE ON DELETE CASCADE
        )
        """)
    try:
        config = load_config()
        with psycopg2.connect(**config) as conn:
            with conn.cursor() as cur:
                # execute the CREATE TABLE statement
                for command in commands:
                    cur.execute(command)
    except (psycopg2.DatabaseError, Exception) as error:
        print(error)

if __name__ == '__main__':
    create_tables()

----------------------------------------

TITLE: Creating a PostgreSQL Database with Custom Options
DESCRIPTION: This example creates a database named 'hr' with UTF8 encoding and a connection limit of 100.

LANGUAGE: sql
CODE:
CREATE DATABASE hr
WITH
   ENCODING = 'UTF8'
   CONNECTION LIMIT = 100;

----------------------------------------

TITLE: Creating Descending Sequence
DESCRIPTION: Creates a descending sequence from 3 to 1 with cycling enabled.

LANGUAGE: sql
CODE:
CREATE SEQUENCE three
INCREMENT -1
MINVALUE 1
MAXVALUE 3
START 3
CYCLE;

----------------------------------------

TITLE: Server Actions Implementation
DESCRIPTION: Implementation of server-side actions for creating and deleting user messages with Auth0 session validation.

LANGUAGE: typescript
CODE:
'use server';

import { getSession } from '@auth0/nextjs-auth0/edge';
import { UserMessages } from './db/schema';
import { db } from './db';
import { redirect } from 'next/navigation';
import { eq } from 'drizzle-orm';

export async function createUserMessage(formData: FormData) {
  const session = await getSession();
  if (!session) throw new Error('User not authenticated');

  const message = formData.get('message') as string;

  await db.insert(UserMessages).values({
    user_id: session.user.sub,
    message,
  });

  redirect('/');
}

export async function deleteUserMessage() {
  const session = await getSession();
  if (!session) throw new Error('User not authenticated');

  await db.delete(UserMessages).where(eq(UserMessages.user_id, session.user.sub));
  redirect('/');
}

----------------------------------------

TITLE: Basic Usage of jsonb_each() in PostgreSQL
DESCRIPTION: Demonstrates how to use jsonb_each() to expand a JSONB object representing user profile information into a set of key-value pairs.

LANGUAGE: sql
CODE:
SELECT key, value
FROM jsonb_each('{"username": "johndoe", "age": 30, "email": "johndoe@example.com"}');

----------------------------------------

TITLE: Creating B-tree Index in PostgreSQL
DESCRIPTION: Demonstrates creation of a users table and B-tree indexes on username and timestamp columns. B-tree is the default index type suitable for equality and range queries on sortable data.

LANGUAGE: sql
CODE:
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO users (username, email) VALUES
    ('john_doe', 'john@example.com'),
    ('jane_smith', 'jane@example.com'),
    ('bob_johnson', 'bob@example.com');

CREATE INDEX idx_users_username ON users USING btree (username);

----------------------------------------

TITLE: Installing PostgreSQL Client Dependencies
DESCRIPTION: Commands for installing different PostgreSQL client libraries via npm

LANGUAGE: shell
CODE:
npm install pg
npm install postgres
npm install @neondatabase/serverless

----------------------------------------

TITLE: Creating Timestamp Demo Table
DESCRIPTION: Creates a table with both timestamp and timestamptz columns to demonstrate timezone handling.

LANGUAGE: sql
CODE:
CREATE TABLE timestamp_demo (
    ts TIMESTAMP,
    tstz TIMESTAMPTZ
);

----------------------------------------

TITLE: Creating Table for jsonb_insert() Examples
DESCRIPTION: SQL statement to create a table for demonstrating jsonb_insert() with table data.

LANGUAGE: SQL
CODE:
CREATE TABLE employee_profiles(
    id INT PRIMARY KEY,
    profiles JSONB
);

----------------------------------------

TITLE: Filtered jsonb_each() Query
DESCRIPTION: Demonstrates how to filter specific keys when expanding JSON objects using the WHERE clause.

LANGUAGE: sql
CODE:
SELECT *
FROM jsonb_each('{
    "name": "John",
    "age": 30,
    "city": "New York"
}')
WHERE key in ('name', 'age');

----------------------------------------

TITLE: GROUP BY with JOIN
DESCRIPTION: Shows how to combine GROUP BY with JOIN operations to aggregate data across multiple tables.

LANGUAGE: sql
CODE:
SELECT
  first_name || ' ' || last_name full_name,
  SUM (amount) amount
FROM
  payment
  INNER JOIN customer USING (customer_id)
GROUP BY
  full_name
ORDER BY
  amount DESC;

----------------------------------------

TITLE: RIGHT() Function with Table Data
DESCRIPTION: Demonstrates practical usage of RIGHT() function in a WHERE clause to filter customer records ending with 'son'.

LANGUAGE: sql
CODE:
SELECT
  last_name
FROM
  customer
WHERE
  RIGHT(last_name, 3) = 'son';

----------------------------------------

TITLE: Verifying Subscription Creation in SQL
DESCRIPTION: SQL query to verify that the subscription was created successfully on the destination database.

LANGUAGE: sql
CODE:
SELECT * FROM pg_stat_subscription;

----------------------------------------

TITLE: Reporting Various Message Levels in PL/pgSQL
DESCRIPTION: Shows how to use the RAISE statement to report messages with different severity levels including info, log, debug, warning, and notice.

LANGUAGE: sql
CODE:
do $$
begin
  raise info 'information message %', now() ;
  raise log 'log message %', now();
  raise debug 'debug message %', now();
  raise warning 'warning message %', now();
  raise notice 'notice message %', now();
end $$;

----------------------------------------

TITLE: Creating Table with Character Types in PostgreSQL
DESCRIPTION: Creates a new table demonstrating the use of CHAR(1), VARCHAR(10), and TEXT data types with a serial primary key.

LANGUAGE: sql
CODE:
CREATE TABLE character_tests (
  id serial PRIMARY KEY,
  x CHAR (1),
  y VARCHAR (10),
  z TEXT
);

----------------------------------------

TITLE: Creating Email Lists with STRING_AGG()
DESCRIPTION: Uses STRING_AGG() to generate semicolon-separated email lists for each country from customer data.

LANGUAGE: SQL
CODE:
SELECT
    country,
    STRING_AGG (email, ';') email_list
FROM
    customer
INNER JOIN address USING (address_id)
INNER JOIN city USING (city_id)
INNER JOIN country USING (country_id)
GROUP BY
    country
ORDER BY
    country;

----------------------------------------

TITLE: Books Table Migration
DESCRIPTION: Database migration for creating the books table with foreign key relationship to authors.

LANGUAGE: php
CODE:
public function up()
{
    Schema::create('books', function (Blueprint $table) {
        $table->id();
        $table->string('title');
        $table->unsignedBigInteger('author_id');
        $table->timestamps();

        $table->foreign('author_id')->references('id')->on('authors')->onDelete('cascade');
    });
}

----------------------------------------

TITLE: Setting Up PostgreSQL Role Permissions
DESCRIPTION: SQL commands to configure permissions for authenticated and anonymous roles in the public schema.

LANGUAGE: sql
CODE:
-- For existing tables
GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to authenticated;

GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to anonymous;

-- For future tables
ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO authenticated;

ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO anonymous;

-- Grant USAGE on "public" schema
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO anonymous;

----------------------------------------

TITLE: Adding Multiple Columns in PostgreSQL
DESCRIPTION: This example shows how to add multiple columns to an existing table using multiple ADD COLUMN clauses in a single ALTER TABLE statement.

LANGUAGE: sql
CODE:
ALTER TABLE table_name
ADD COLUMN column_name1 data_type constraint,
ADD COLUMN column_name2 data_type constraint,
...
ADD COLUMN column_namen data_type constraint;

----------------------------------------

TITLE: Implementing Server Action with node-postgres
DESCRIPTION: Server-side implementation using node-postgres client to handle form submission and database operations.

LANGUAGE: typescript
CODE:
import { Client } from 'pg';

export default function Page() {
  async function create(formData: FormData) {
    'use server';
    // Create a client instance using `node-postgres`
    const client = new Client(`${process.env.DATABASE_URL}`);
    await client.connect();
    // Create the comments table if it does not exist
    await client.query('CREATE TABLE IF NOT EXISTS comments (comment TEXT)');
    const comment = formData.get('comment');
    // Insert the comment from the form into the Postgres (powered by Neon)
    await client.query('INSERT INTO comments (comment) VALUES ($1)', [comment]);
  }
  return (
    <form action={create}>
      <input type="text" placeholder="write a comment" name="comment" />
      <button type="submit">Submit</button>
    </form>
  );
}

----------------------------------------

TITLE: Creating a BEFORE DELETE Trigger on Products Table in PostgreSQL
DESCRIPTION: This SQL statement creates a BEFORE DELETE trigger on the products table. It associates the trigger with the previously created function to prevent deletions.

LANGUAGE: sql
CODE:
CREATE TRIGGER before_delete_product_trigger
BEFORE DELETE ON products
FOR EACH ROW
EXECUTE FUNCTION fn_before_delete_product();

----------------------------------------

TITLE: Scheduling Log Purge Job
DESCRIPTION: Example of scheduling a job to purge old cron job logs daily.

LANGUAGE: sql
CODE:
SELECT cron.schedule(
    'purge-cron-history',
    '0 0 * * *',  -- Runs every day at midnight UTC
    $$
        DELETE FROM cron.job_run_details
        WHERE end_time < NOW() - INTERVAL '7 days';
    $$
);

----------------------------------------

TITLE: Granting Permissions for Future Tables in Neon RLS
DESCRIPTION: SQL commands to alter default privileges, granting SELECT, UPDATE, INSERT, and DELETE permissions on future tables in the public schema to both authenticated and anonymous roles.

LANGUAGE: sql
CODE:
ALTER DEFAULT PRIVILEGES
IN SCHEMA public
GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
TO authenticated;

ALTER DEFAULT PRIVILEGES
IN SCHEMA public
GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
TO anonymous;

----------------------------------------

TITLE: Creating and Populating Sales Table in SQL
DESCRIPTION: SQL commands to create a sales table with basic schema and sample data insertion for demonstration purposes.

LANGUAGE: sql
CODE:
CREATE TABLE sales (
    id SERIAL PRIMARY KEY,
    product_id INT NOT NULL,
    sale_amount DECIMAL(10,2) NOT NULL,
    sale_date DATE NOT NULL
);

INSERT INTO sales (product_id, sale_amount, sale_date) VALUES
(1, 20.50, '2022-07-24'),
(2, 35.99, '2022-08-24'),
(1, 20.50, '2022-09-24'),
(3, 15.00, '2023-01-24'),
(1, 20.50, '2023-04-24');

----------------------------------------

TITLE: Querying Descendants in ltree Hierarchy in PostgreSQL
DESCRIPTION: SQL query to find all subcategories under 'Computers' using the ltree <@ operator. This demonstrates how to retrieve all descendants of a given node in the hierarchy.

LANGUAGE: sql
CODE:
SELECT id, name, path
FROM product_categories
WHERE path <@ 'electronics.computers';

----------------------------------------

TITLE: Initializing StockDB Class for PostgreSQL Operations in PHP
DESCRIPTION: Defines a StockDB class with a constructor that accepts a PDO object for database operations. This class serves as a base for implementing delete methods.

LANGUAGE: php
CODE:
<?php
namespace PostgreSQLTutorial;

/**
 * PostgreSQL PHP delete data demo
 */
class StockDB {

    /**
     * PDO object
     * @var \PDO
     */
    private $pdo;

    /**
     * Initialize the object with a specified PDO object
     * @param \PDO $pdo
     */
    public function __construct($pdo) {
        $this->pdo = $pdo;
    }
    // other methods
    // ...
}

----------------------------------------

TITLE: Student Score Percentile Calculation
DESCRIPTION: Shows how to calculate percentile ranks for student scores using rank() combined with arithmetic operations.

LANGUAGE: sql
CODE:
WITH scores AS (
	SELECT *
	FROM (
        VALUES
            ('Student 1', 85),
            ('Student 2', 92),
            ('Student 3', 78),
            ('Student 4', 90),
            ('Student 5', 88)
	) AS t(student, score)
)
SELECT
	student,
	score,
	rank() OVER (ORDER BY score) AS rank,
	round(100.0 * rank() OVER (ORDER BY score) / (SELECT count(*) FROM scores), 2) AS percentile
FROM scores;

----------------------------------------

TITLE: Creating a Table with JSONB Column in PostgreSQL
DESCRIPTION: This snippet creates a table named 'products' with a JSONB column to store JSON data.

LANGUAGE: sql
CODE:
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    data JSONB
);

----------------------------------------

TITLE: CUBE with Sales Data Example
DESCRIPTION: Practical example showing how to use CUBE to analyze sales data by brand and segment with sum aggregation.

LANGUAGE: sql
CODE:
SELECT
    brand,
    segment,
    SUM (quantity)
FROM
    sales
GROUP BY
    CUBE (brand, segment)
ORDER BY
    brand,
    segment;

----------------------------------------

TITLE: Configuring WunderGraph Application with Neon Integration
DESCRIPTION: TypeScript code for configuring a WunderGraph application to include Neon as a data source. This setup allows introspection of the Neon database and exposes it as a GraphQL API.

LANGUAGE: typescript
CODE:
import {
  configureWunderGraphApplication,
  introspect,
  authProviders,
  EnvironmentVariable,
} from '@wundergraph/sdk';
import operations from './wundergraph.operations';
import server from './wundergraph.server';

const spaceX = introspect.graphql({
  apiNamespace: 'spacex',
  url: 'https://spacex-api.fly.dev/graphql/',
});

const neon = introspect.postgresql({
  apiNamespace: 'neon',
  databaseURL: new EnvironmentVariable('NEON_DATABASE_URL'),
});

configureWunderGraphApplication({
  apis: [spaceX, neon],
  server,
  operations,
  codeGenerators: [
    {
      templates: [...templates.typescript.all],
    },
  ],
});

----------------------------------------

TITLE: Using REVERSE() Function to Detect Palindromes
DESCRIPTION: This query uses the REVERSE() function to determine if words in the 'words' table are palindromes by comparing the original word with its reversed version.

LANGUAGE: sql
CODE:
SELECT
  word,
  REVERSE(word),
  (
    word = REVERSE(word)
  ) palindrome
FROM
  words;

----------------------------------------

TITLE: Using jsonb_to_record() with Custom Type
DESCRIPTION: Example showing how to use jsonb_to_record() with a custom type to handle nested JSON data structures.

LANGUAGE: sql
CODE:
SELECT
  *
FROM
  jsonb_to_record(
    '{"id": 1, "name": "Alice", "age": 30, "pets": [{"type":"cat", "name": "Ellie"}, {"type":"dog", "name": "Birdie"}]}'
  ) AS person (id INT, name TEXT, pets pet[]);

----------------------------------------

TITLE: Creating and Using NpgsqlDataSource in C#
DESCRIPTION: C# code demonstrating the creation and usage of NpgsqlDataSource for managing database connections.

LANGUAGE: csharp
CODE:
string connectionString = ConfigurationHelper.GetConnectionString("DefaultConnection");
await using var dataSource = NpgsqlDataSource.Create(connectionString);

// Using the data source to create a new connection
await using var conn = await dataSource.OpenConnectionAsync();

----------------------------------------

TITLE: PostgreSQL CASE Expression Alternative
DESCRIPTION: Demonstrates how to use a CASE expression in PostgreSQL to replace NULL values with a specified replacement value.

LANGUAGE: sql
CODE:
SELECT
    CASE WHEN expression IS NULL
            THEN replacement
            ELSE expression
    END AS column_alias;

----------------------------------------

TITLE: Deno Application with Neon Database Connection
DESCRIPTION: TypeScript code for a Deno application that connects to a Neon database, creates a table, inserts data, and serves it via an HTTP endpoint.

LANGUAGE: typescript
CODE:
// server.ts

import { neon } from '@neon/serverless';

const databaseUrl = Deno.env.get('DATABASE_URL')!;
const sql = neon(databaseUrl);

// Create the books table and insert initial data if it doesn't exist
await sql`
  CREATE TABLE IF NOT EXISTS books (
    id SERIAL PRIMARY KEY,
    title TEXT NOT NULL,
    author TEXT NOT NULL
  )
`;

// Check if the table is empty
const { count } = await sql`SELECT COUNT(*)::INT as count FROM books`.then((rows) => rows[0]);

if (count === 0) {
  // The table is empty, insert the book records
  await sql`
    INSERT INTO books (title, author) VALUES
      ('The Hobbit', 'J. R. R. Tolkien'),
      ('Harry Potter and the Philosopher''s Stone', 'J. K. Rowling'),
      ('The Little Prince', 'Antoine de Saint-Exupéry')
  `;
}

// Start the server
Deno.serve(async (req) => {
  const url = new URL(req.url);
  if (url.pathname !== '/books') {
    return new Response('Not Found', { status: 404 });
  }

  try {
    switch (req.method) {
      case 'GET': {
        const books = await sql`SELECT * FROM books`;
        return new Response(JSON.stringify(books, null, 2), {
          headers: { 'content-type': 'application/json' },
        });
      }
      default:
        return new Response('Method Not Allowed', { status: 405 });
    }
  } catch (err) {
    console.error(err);
    return new Response(`Internal Server Error\n\n${err.message}`, {
      status: 500,
    });
  }
});

----------------------------------------

TITLE: Removing CHECK Constraint in PostgreSQL
DESCRIPTION: Demonstrates how to remove an existing CHECK constraint from a table.

LANGUAGE: sql
CODE:
ALTER TABLE employees
DROP CONSTRAINT joined_date_check;

----------------------------------------

TITLE: Generating Referral Code in Azure Function
DESCRIPTION: Azure Function JavaScript code to generate a unique referral code and store it in the database.

LANGUAGE: javascript
CODE:
const { app } = require('@azure/functions');
const { v4: uuidv4 } = require('uuid');
const { query } = require('../utils/db');

app.http('generateReferralCode', {
  methods: ['POST'],
  authLevel: 'anonymous',
  handler: async (request, context) => {
    try {
      const { userId } = await request.json();
      const code = uuidv4().split('-')[0];
      const result = await query(
        `INSERT INTO referral_codes
                (referrer_id, code, max_uses, points_per_referral, expires_at)
                VALUES ($1, $2, $3, $4, NOW() + INTERVAL '30 days')
                RETURNING *`,
        [userId, code, 10, 100]
      );
      return {
        status: 201,
        body: JSON.stringify({
          code: result.rows[0].code,
          expiresAt: result.rows[0].expires_at,
        }),
      };
    } catch (error) {
      context.log('Error generating referral code:', error);
      return {
        status: 500,
        body: 'Error generating referral code',
      };
    }
  },
});

----------------------------------------

TITLE: Setting up data retention policy for partitioned table using pg_partman
DESCRIPTION: SQL query to set up a 4-week retention policy for the user_activities table using pg_partman's part_config table.

LANGUAGE: sql
CODE:
UPDATE part_config
SET retention = '4 weeks', retention_keep_table = true
WHERE parent_table = 'public.user_activities';

----------------------------------------

TITLE: Running the .NET Application
DESCRIPTION: Command to start the local web server for testing the application.

LANGUAGE: bash
CODE:
dotnet run

----------------------------------------

TITLE: Configuring Flyway Programmatically in Spring Boot
DESCRIPTION: Java configuration class for setting up Flyway programmatically in a Spring Boot application.

LANGUAGE: java
CODE:
package com.example.neon;

import org.flywaydb.core.Flyway;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import javax.sql.DataSource;

@Configuration
public class FlywayConfig {

    @Bean(initMethod = "migrate")
    public Flyway flyway(DataSource dataSource) {
        return Flyway.configure()
                .dataSource(dataSource)
                .locations("classpath:db/migration")
                .baselineOnMigrate(true)
                .load();
    }
}

----------------------------------------

TITLE: Creating main.py for AI Agent Interaction with Neon API
DESCRIPTION: Implements the main Python script that sets up and runs an AI agent to interact with the Neon API using CrewAI and Composio.

LANGUAGE: python
CODE:
import os

from crewai import Agent, Task, Crew
from composio_crewai import ComposioToolSet, App
from dotenv import load_dotenv

load_dotenv()

toolset = ComposioToolSet()

connection = toolset.initiate_connection(
    app=App.NEON, connected_account_params={"api_key": os.getenv("NEON_API_KEY")}
)

tools = toolset.get_tools(actions=["NEON_GET_CURRENT_USER_INFORMATION"])

crewai_agent = Agent(
    role="Assistant",
    goal="""You are an AI agent that is responsible for taking actions based on the tools you have""",
    backstory=(
        "You are AI agent that is responsible for taking actions based on the tools you have"
    ),
    verbose=True,
    tools=tools,
    llm="gpt-4o-mini",
)

task = Task(
    description="List me my neon current user details",
    agent=crewai_agent,
    expected_output="All important details of the current user in a single sentence.",
)

my_crew = Crew(agents=[crewai_agent], tasks=[task])

result = my_crew.kickoff()
print(result)

----------------------------------------

TITLE: Sorting by Expression (Length of First Name)
DESCRIPTION: This query selects first names and their lengths, then sorts the results by the length of the first names in descending order.

LANGUAGE: SQL
CODE:
SELECT
  first_name,
  LENGTH(first_name) len
FROM
  customer
ORDER BY
  len DESC;

----------------------------------------

TITLE: PostgreSQL REINDEX System Catalogs
DESCRIPTION: Command to recreate all indexes on system catalogs in a specific database.

LANGUAGE: sql
CODE:
REINDEX SYSTEM database_name;

----------------------------------------

TITLE: Calculating Distance Between Nodes in ltree Hierarchy in PostgreSQL
DESCRIPTION: SQL query to calculate the 'distance' between two nodes in an ltree hierarchy. This example shows how to determine the number of steps between two nodes in the tree structure.

LANGUAGE: sql
CODE:
-- Calculate the distance between two categories
SELECT
    nlevel('electronics.computers.laptops.gaming'::ltree) +
    nlevel('electronics.smartphones.android'::ltree) -
    2 * nlevel(lca(
        'electronics.computers.laptops.gaming'::ltree,
        'electronics.smartphones.android'::ltree
    )) AS distance;

----------------------------------------

TITLE: Accessing Schema Objects in PostgreSQL
DESCRIPTION: Demonstrates the basic syntax for accessing objects within a specific schema using dot notation.

LANGUAGE: css
CODE:
schema_name.object_name

----------------------------------------

TITLE: Generating UUID with gen_random_uuid() in PostgreSQL
DESCRIPTION: Demonstrates how to use the gen_random_uuid() function to generate a version 4 (random) UUID in PostgreSQL.

LANGUAGE: sql
CODE:
SELECT gen_random_uuid();

----------------------------------------

TITLE: Refreshing a PostgreSQL Materialized View
DESCRIPTION: Shows how to refresh data in a materialized view, including the option for concurrent refreshing to avoid locking underlying tables.

LANGUAGE: SQL
CODE:
REFRESH MATERIALIZED VIEW view_name;

LANGUAGE: SQL
CODE:
REFRESH MATERIALIZED VIEW CONCURRENTLY view_name;

----------------------------------------

TITLE: Highlighting Search Results
DESCRIPTION: Shows how to use the paradedb.snippet() function to highlight matched terms in search results.

LANGUAGE: sql
CODE:
SELECT id, paradedb.snippet(description)
FROM mock_items
WHERE description @@@ 'shoes'
LIMIT 3;

----------------------------------------

TITLE: Running Analytics Query on Sales Data
DESCRIPTION: SQL query to calculate total sales per product for the past year using the read replica.

LANGUAGE: sql
CODE:
SELECT product_id, SUM(sale_amount) as total_sales
FROM sales
WHERE sale_date >= (CURRENT_DATE - INTERVAL '1 year')
GROUP BY product_id;

----------------------------------------

TITLE: Implementing Request Classes for Task Validation
DESCRIPTION: Creates StoreTaskRequest and UpdateTaskRequest classes to encapsulate request validation logic.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class StoreTaskRequest extends FormRequest
{
    public function authorize()
    {
        return true;
    }

    public function rules()
    {
        return [
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
            'status' => 'required|in:pending,in_progress,completed',
            'due_date' => 'nullable|date',
            'priority' => 'required|integer|min:1|max:5',
        ];
    }
}

----------------------------------------

TITLE: Basic PostgreSQL MAX() Function Usage
DESCRIPTION: This snippet demonstrates the basic usage of the MAX() function to find the highest amount paid by customers in the payment table.

LANGUAGE: sql
CODE:
SELECT
  MAX(amount)
FROM
  payment;

----------------------------------------

TITLE: Basic PostgreSQL Function Creation Syntax
DESCRIPTION: Basic syntax template for creating a function in PostgreSQL using PL/pgSQL. Shows the structure including parameter list, return type declaration, and function body sections.

LANGUAGE: sql
CODE:
create [or replace] function function_name(param_list)
   returns return_type
   language plpgsql
  as
$$
declare
   -- variable declaration
begin
   -- logic
end;
$$;

----------------------------------------

TITLE: Basic FIRST_VALUE() Query Example
DESCRIPTION: Query demonstrating how to use FIRST_VALUE() to find the product with the lowest price across all results. The function is applied to the entire result set as a single partition.

LANGUAGE: sql
CODE:
SELECT
    product_id,
    product_name,
    group_id,
    price,
    FIRST_VALUE(product_name)
    OVER(
        ORDER BY price
    ) lowest_price
FROM
    products;

----------------------------------------

TITLE: Joining Users and Hobbies Tables Using json_extract_path_text() in SQL
DESCRIPTION: Demonstrates a complex query using json_extract_path_text() to join the 'users' and 'hobbies' tables, matching user hobbies with easy difficulty levels.

LANGUAGE: sql
CODE:
SELECT
  json_extract_path_text(u.profile, 'name') as user_name,
  h.hobby_name
FROM users u
JOIN hobbies h
ON json_extract_path_text(u.profile, 'hobbies') LIKE '%' || lower(h.hobby_name) || '%'
WHERE h.difficulty_level = 'Easy';

----------------------------------------

TITLE: Demonstrating Boolean Expression in PostgreSQL
DESCRIPTION: Shows how to evaluate a simple boolean expression in PostgreSQL, returning a true result.

LANGUAGE: sql
CODE:
SELECT 1 = 1 AS result;

----------------------------------------

TITLE: Creating and Populating Sample Table in Postgres
DESCRIPTION: SQL commands to create a table called 'playing_with_neon' with a serial ID, text name, and real value columns. Includes inserting 10 random rows of sample data.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS playing_with_neon(id SERIAL PRIMARY KEY, name TEXT NOT NULL, value REAL);
INSERT INTO playing_with_neon(name, value)
  SELECT LEFT(md5(i::TEXT), 10), random() FROM generate_series(1, 10) s(i);

----------------------------------------

TITLE: Deleting Neon Auth Integration
DESCRIPTION: This snippet shows how to remove an integration with a specific auth provider. It requires the project ID and auth provider as path parameters.

LANGUAGE: bash
CODE:
curl --request DELETE \
     --url 'https://console.neon.tech/api/v2/projects/{project_id}/auth/integration/{auth_provider}' \
     --header 'authorization: Bearer $NEON_API_KEY' | jq

----------------------------------------

TITLE: Creating Table with NUMERIC Column
DESCRIPTION: Example of creating a table with a NUMERIC column to store product prices with 5 digits precision and 2 decimal places.

LANGUAGE: sql
CODE:
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price NUMERIC(5,2)
);

----------------------------------------

TITLE: SQL RLS Policy Implementation
DESCRIPTION: SQL commands to create a todos table and implement RLS policies for CRUD operations.

LANGUAGE: sql
CODE:
CREATE TABLE todos (
  id bigint generated by default as identity primary key,
  user_id text not null default (auth.user_id()),
  task text check (char_length(task) > 0),
  is_complete boolean default false,
  inserted_at timestamptz not null default now()
);

ALTER TABLE todos ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create todos." ON todos FOR INSERT
TO authenticated
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can view their own todos." ON todos FOR SELECT
TO authenticated
USING ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can update their own todos." ON todos FOR UPDATE
TO authenticated
USING ((select auth.user_id()) = user_id)
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can delete their own todos." ON todos FOR DELETE
TO authenticated
USING ((select auth.user_id()) = user_id);

----------------------------------------

TITLE: Ordered Aggregation with Product Reviews
DESCRIPTION: Shows how to use json_agg() with ORDER BY to create ordered JSON arrays of product reviews, demonstrating date-based sorting.

LANGUAGE: sql
CODE:
WITH reviews AS (
  SELECT 1 AS product_id, 'Great product!' AS comment, 5 AS rating, '2023-01-15'::date AS review_date
  UNION ALL SELECT 1, 'Could be better', 3, '2023-02-01'::date
  UNION ALL SELECT 1, 'Awesome!', 5, '2023-01-20'::date
  UNION ALL SELECT 2, 'Not bad', 4, '2023-01-10'::date
)
SELECT
  product_id,
  json_agg(
    comment || ' (' || rating || ' stars)'
    ORDER BY review_date DESC
  ) AS reviews
FROM reviews
GROUP BY product_id;

----------------------------------------

TITLE: Enabling TimescaleDB Extension in PostgreSQL
DESCRIPTION: This SQL command enables the TimescaleDB extension in PostgreSQL, which is required for using timeseries functionality.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS timescaledb;

----------------------------------------

TITLE: Concatenating Customer Names in Postgres
DESCRIPTION: Demonstrates combining first and last names using concat() with a CTE example.

LANGUAGE: sql
CODE:
WITH customers AS (
  SELECT 'John' AS first_name, 'Doe' AS last_name
  UNION ALL
  SELECT 'Jane' AS first_name, 'Smith' AS last_name
)
SELECT concat(first_name, ' ', last_name) AS full_name
FROM customers;

----------------------------------------

TITLE: Extracting Basic Book Information with JSON_TABLE
DESCRIPTION: This SQL query demonstrates how to use JSON_TABLE to extract core book details from the JSON structure into a relational format.

LANGUAGE: sql
CODE:
SELECT b.book_id, b.title, jt.*
FROM library_books b,
JSON_TABLE(
    data,
    '$'
    COLUMNS (
        isbn text PATH '$.isbn',
        author_name text PATH '$.author.name',
        publisher text PATH '$.publication.publisher',
        pub_year int PATH '$.publication.year'
    )
) AS jt;

----------------------------------------

TITLE: Creating an Organization API Key via Neon API
DESCRIPTION: This snippet shows how to create an organization API key using the Neon API. It requires a personal API key and admin-level permissions in the specified organization.

LANGUAGE: bash
CODE:
curl --request POST \
     --url 'https://console.neon.tech/api/v2/organizations/{org_id}/api_keys' \
     --header 'Content-Type: application/json' \
     --header 'Authorization: Bearer $PERSONAL_API_KEY' \
     --data '{"key_name": "orgkey"}'

----------------------------------------

TITLE: Using Prepared Statements for Query Optimization in Postgres
DESCRIPTION: This example shows how to use prepared statements to optimize repetitive query execution by preparing a query plan once and reusing it multiple times.

LANGUAGE: sql
CODE:
PREPARE user_fetch_plan (text) AS SELECT * FROM users WHERE name = $1;
EXECUTE user_fetch_plan('alex');
EXECUTE user_fetch_plan('dana');

----------------------------------------

TITLE: Querying All Rows from PostgreSQL Table with PHP PDO
DESCRIPTION: This method retrieves all rows from the 'stocks' table, ordering them by symbol. It uses PDO to execute a SELECT query and fetches the results as an associative array.

LANGUAGE: PHP
CODE:
public function all() {
    $stmt = $this->pdo->query('SELECT id, symbol, company '
            . 'FROM stocks '
            . 'ORDER BY symbol');
    $stocks = [];
    while ($row = $stmt->fetch(\PDO::FETCH_ASSOC)) {
        $stocks[] = [
            'id' => $row['id'],
            'symbol' => $row['symbol'],
            'company' => $row['company']
        ];
    }
    return $stocks;
}

----------------------------------------

TITLE: Creating Developer Role with Full Access
DESCRIPTION: SQL commands to create a developer role with full database privileges for development branches. Includes role creation, privilege assignment, and user management.

LANGUAGE: sql
CODE:
CREATE ROLE dev_users PASSWORD 'password';
GRANT ALL PRIVILEGES ON DATABASE <database> TO dev_users;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA <schema_name> TO dev_users;

CREATE ROLE dev_user1 WITH LOGIN PASSWORD '<password>';

GRANT dev_users TO dev_user1;

----------------------------------------

TITLE: Iterating Over Query Result Set with PL/pgSQL For Loop
DESCRIPTION: This example demonstrates how to use a PL/pgSQL for loop to iterate over the result set of a query, displaying the titles and lengths of the top 10 longest films.

LANGUAGE: sql
CODE:
do
$$
declare
    f record;
begin
    for f in select title, length
	       from film
	       order by length desc, title
	       limit 10
    loop
	raise notice '%(% mins)', f.title, f.length;
    end loop;
end;
$$

----------------------------------------

TITLE: Deleting Single Row with RETURNING Clause
DESCRIPTION: Demonstrates how to delete a single row by ID and return the deleted data using the RETURNING clause.

LANGUAGE: sql
CODE:
DELETE FROM todos
WHERE id = 2
RETURNING *;

----------------------------------------

TITLE: Creating Multiple Smaller Migrations in Laravel
DESCRIPTION: Example of creating multiple smaller migrations instead of one large migration for better manageability and easier rollbacks.

LANGUAGE: bash
CODE:
php artisan make:migration add_status_to_users
php artisan make:migration add_type_to_users

LANGUAGE: bash
CODE:
php artisan migrate

----------------------------------------

TITLE: Implementing RLS Policies with Raw SQL
DESCRIPTION: SQL commands to create a todos table and implement RLS policies directly in PostgreSQL.

LANGUAGE: sql
CODE:
CREATE TABLE todos (
  id bigint generated by default as identity primary key,
  user_id text not null default (auth.user_id()),
  task text check (char_length(task) > 0),
  is_complete boolean default false,
  inserted_at timestamptz not null default now()
);

ALTER TABLE todos ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create todos." ON todos FOR INSERT
TO authenticated
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can view their own todos." ON todos FOR SELECT
TO authenticated
USING ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can update their own todos." ON todos FOR UPDATE
TO authenticated
USING ((select auth.user_id()) = user_id)
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can delete their own todos." ON todos FOR DELETE
TO authenticated
USING ((select auth.user_id()) = user_id);

----------------------------------------

TITLE: Calculating Stock Returns Using lead() with Offset in PostgreSQL
DESCRIPTION: Shows how to use lead() with an offset to compute the net return on investment for a stock ticker over each 2-year period.

LANGUAGE: sql
CODE:
WITH stock_prices AS (
  SELECT 'AAPL' AS ticker, date '2018-01-01' AS price_date, 41.54 AS price
  UNION ALL
  SELECT 'AAPL' AS ticker, date '2019-01-01' AS price_date, 39.48 AS price
  UNION ALL
  SELECT 'AAPL' AS ticker, date '2020-01-01' AS price_date, 74.60 AS price
  UNION ALL
  SELECT 'AAPL' AS ticker, date '2021-01-01' AS price_date, 131.96 AS price
  UNION ALL
  SELECT 'AAPL' AS ticker, date '2022-01-01' AS price_date, 182.01 AS price
  UNION ALL
  SELECT 'AAPL' AS ticker, date '2023-01-01' AS price_date, 129.93 AS price
)
SELECT
  ticker,
  price_date,
  price,
  lead(price, 2) OVER (PARTITION BY ticker ORDER BY price_date) AS price_2_years_later,
  round(100.0 * (lead(price, 2) OVER (PARTITION BY ticker ORDER BY price_date) - price) / price, 2) AS two_year_return_pct
FROM stock_prices;

----------------------------------------

TITLE: Creating Publication for Multiple Tables in SQL
DESCRIPTION: SQL command to create a publication for multiple tables in the source database, allowing for more complex replication scenarios.

LANGUAGE: sql
CODE:
CREATE PUBLICATION my_publication FOR TABLE users, departments;

----------------------------------------

TITLE: Updating a Single Row in PostgreSQL
DESCRIPTION: Updates the published_date for a specific course using its course_id.

LANGUAGE: sql
CODE:
UPDATE courses
SET published_date = '2020-08-01'
WHERE course_id = 3;

----------------------------------------

TITLE: GenerateDatabaseReport Job Implementation
DESCRIPTION: PHP class implementing a queued job for generating database reports

LANGUAGE: php
CODE:
<?php

namespace App\Jobs;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Log;

class GenerateDatabaseReport implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    protected $reportId;

    public function __construct($reportId)
    {
        $this->reportId = $reportId;
    }

    public function handle()
    {
        sleep(5);
        Log::info("Processed report: {$this->reportId}");
    }
}

----------------------------------------

TITLE: Extracting All JSON Properties with Path Query
DESCRIPTION: Demonstrates how to extract all top-level properties from a JSON document using the $.* wildcard path expression.

LANGUAGE: sql
CODE:
SELECT
  jsonb_path_query(info, '$.*')
FROM
  person;

----------------------------------------

TITLE: Implementing NestJS Database Module
DESCRIPTION: TypeScript module implementation for database connection configuration using different PostgreSQL clients

LANGUAGE: typescript
CODE:
import { config } from 'dotenv';
import { Module } from '@nestjs/common';
import pg from 'pg';

config({
  path: ['.env', '.env.production', '.env.local'],
});

const sql = new pg.Pool({ connectionString: process.env.DATABASE_URL });

const dbProvider = {
  provide: 'POSTGRES_POOL',
  useValue: sql,
};

@Module({
  providers: [dbProvider],
  exports: [dbProvider],
})
export class DatabaseModule {}

----------------------------------------

TITLE: Creating a New User Role in PostgreSQL
DESCRIPTION: This SQL command creates a new user role named 'joe' with login privileges and a password.

LANGUAGE: sql
CODE:
create role joe
login
password 'YourPassword';

----------------------------------------

TITLE: Implementing Update Total Quantity Trigger Function
DESCRIPTION: PL/pgSQL function that updates the total quantity in inventory_stat table before a new inventory record is inserted. Handles both insert and update scenarios.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION update_total_qty()
RETURNS TRIGGER
LANGUAGE PLPGSQL
AS
$$
DECLARE
   p_row_count INT;
BEGIN
   SELECT COUNT(*) FROM inventory_stat
   INTO p_row_count;

   IF p_row_count > 0 THEN
      UPDATE inventory_stat
      SET total_qty = total_qty + NEW.quantity;
   ELSE
      INSERT INTO inventory_stat(total_qty)
      VALUES(new.quantity);
   END IF;
   RETURN NEW;
END;
$$;

----------------------------------------

TITLE: Partitioning an existing table using pg_partman in Neon Postgres
DESCRIPTION: Series of SQL commands to partition an existing table using pg_partman, including renaming the original table, creating a new partitioned table, and migrating data.

LANGUAGE: sql
CODE:
ALTER TABLE public.test_user_activities RENAME TO old_user_activities;

CREATE TABLE public.test_user_activities (
  activity_id serial,
  activity_time TIMESTAMPTZ NOT NULL,
  activity_type TEXT NOT NULL,
  content_id INT NOT NULL,
  user_id INT NOT NULL
)
PARTITION BY RANGE (activity_time);

SELECT setval('public.test_user_activities_activity_id_seq', (SELECT MAX(activity_id) FROM public.old_user_activities));

SELECT partman.create_parent(
  p_parent_table := 'public.test_user_activities',
  p_control := 'activity_time',
  p_interval := '1 week'
);

CALL partman.partition_data_proc(
  p_parent_table := 'public.test_user_activities',
  p_loop_count := 200,
  p_interval := '1 day',
  p_source_table := 'public.old_user_activities'
);

VACUUM ANALYZE public.test_user_activities;

----------------------------------------

TITLE: Performing Full-text Search with Boolean Operators in PostgreSQL
DESCRIPTION: This snippet demonstrates how to perform a full-text search using boolean operators like AND (&) to find posts containing specific words.

LANGUAGE: SQL
CODE:
SELECT
  id,
  body
FROM
  posts
WHERE
  body_search @@ to_tsquery('PostgreSQL & techniques');

----------------------------------------

TITLE: Sample SQL Queries
DESCRIPTION: Example SQL queries to test the database connection by creating a table and selecting data

LANGUAGE: sql
CODE:
CREATE TABLE my_table AS SELECT now();
SELECT * FROM my_table;

----------------------------------------

TITLE: PostgreSQL LIMIT Basic Example
DESCRIPTION: Example showing how to get the first five films sorted by film_id from the film table

LANGUAGE: sql
CODE:
SELECT
  film_id,
  title,
  release_year
FROM
  film
ORDER BY
  film_id
LIMIT
  5;

----------------------------------------

TITLE: Running Authorized Queries in Server Component
DESCRIPTION: TypeScript code for a Next.js server component that demonstrates how to run authenticated queries using Neon RLS. It uses the getAccessToken function from Auth0 to obtain the JWT for database authentication.

LANGUAGE: typescript
CODE:
'use server';

import { neon } from '@neondatabase/serverless';
import { getAccessToken } from '@auth0/nextjs-auth0';

export async function TodoList() {
    const sql = neon(process.env.DATABASE_AUTHENTICATED_URL!, {
        authToken: async () => {
            const { accessToken } = await getAccessToken();
            if (!accessToken) {
                throw new Error('No access token');
            }
            return accessToken;
        },
    });

    // WHERE filter is optional because of RLS.
    // But we send it anyway for performance reasons.
    const todos = await
        sql('SELECT * FROM todos WHERE user_id = auth.user_id()');

    return (
        <ul>
            {todos.map((todo) => (
                <li key={todo.id}>{todo.task}</li>
            ))}
        </ul>
    );
}

----------------------------------------

TITLE: Retrieving Sequence Information for SERIAL Column in PostgreSQL
DESCRIPTION: This snippet shows how to get the sequence name for a SERIAL column and retrieve its current value using PostgreSQL functions.

LANGUAGE: sql
CODE:
SELECT currval(pg_get_serial_sequence('fruits', 'id'));

----------------------------------------

TITLE: Searched CASE Statement Example in PL/pgSQL
DESCRIPTION: Demonstrates the use of a searched CASE statement to assign service levels based on total customer payments. It calculates the total payment for a customer and assigns a service level accordingly.

LANGUAGE: sql
CODE:
do $$
declare
    total_payment numeric;
    service_level varchar(25) ;
begin
     select sum(amount) into total_payment
     from Payment
     where customer_id = 100;

	 if found then
	    case
		   when total_payment > 200 then
               service_level = 'Platinum' ;
           when total_payment > 100 then
	           service_level = 'Gold' ;
           else
               service_level = 'Silver' ;
        end case;
		raise notice 'Service Level: %', service_level;
     else
	    raise notice 'Customer not found';
	 end if;
end; $$

----------------------------------------

TITLE: Conditional Counting with CASE Statements
DESCRIPTION: Demonstrates using COUNT() with CASE statements to count orders meeting specific conditions like order value thresholds.

LANGUAGE: sql
CODE:
SELECT
  COUNT(*) AS total_orders,
  COUNT(CASE WHEN order_amount > 100 THEN 1 END) AS high_value_orders,
  COUNT(CASE WHEN order_amount <= 100 THEN 1 END) AS low_value_orders
FROM orders;

----------------------------------------

TITLE: Querying PostgreSQL Users with SQL
DESCRIPTION: This SQL query retrieves all users from the current database server by querying the pg_catalog.pg_user catalog. It displays the role name and role attributes (superuser, create database) for each user.

LANGUAGE: sql
CODE:
SELECT usename AS role_name,
  CASE
     WHEN usesuper AND usecreatedb THEN
	   CAST('superuser, create database' AS pg_catalog.text)
     WHEN usesuper THEN
	    CAST('superuser' AS pg_catalog.text)
     WHEN usecreatedb THEN
	    CAST('create database' AS pg_catalog.text)
     ELSE
	    CAST('' AS pg_catalog.text)
  END role_attributes
FROM pg_catalog.pg_user
ORDER BY role_name desc;

----------------------------------------

TITLE: Inserting JSONB Data into PostgreSQL Table
DESCRIPTION: This SQL snippet inserts sample JSONB data into the 'products' table, including nested JSON structures for product attributes.

LANGUAGE: sql
CODE:
INSERT INTO products (name, attributes)
VALUES
    ('Laptop', '{"brand": "Dell", "price": 1200, "specs": {"cpu": "Intel i7", "ram": "16GB"}}'),
    ('Smartphone', '{"brand": "Samsung", "price": 800, "specs": {"os": "Android", "storage": "128GB"}}');

----------------------------------------

TITLE: Verifying Logical Replication Settings in Aurora PostgreSQL
DESCRIPTION: SQL commands to check if logical replication is enabled and the WAL level is set to 'logical' in Aurora PostgreSQL.

LANGUAGE: sql
CODE:
SHOW rds.logical_replication;
SHOW wal_level;

----------------------------------------

TITLE: Data Validation with json()
DESCRIPTION: Example showing how to use json() for data validation when inserting into a database table.

LANGUAGE: sql
CODE:
-- Validate JSON structure before insertion
CREATE TABLE user_profiles (
    id SERIAL PRIMARY KEY,
    profile_data json
);

-- Insert with validation
INSERT INTO user_profiles (profile_data)
VALUES (
    json('{
        "name": "Alice",
        "age": 30,
        "interests": ["reading", "hiking"]
    }' WITH UNIQUE)
);

----------------------------------------

TITLE: Basic Usage of json_each() in PostgreSQL
DESCRIPTION: Demonstrates how to use json_each() to expand a JSON object into key-value pairs.

LANGUAGE: sql
CODE:
SELECT key, value
FROM json_each('{"username": "johndoe", "age": 30, "email": "johndoe@example.com"}');

----------------------------------------

TITLE: Using BOOL_OR() Function with GROUP BY in PostgreSQL
DESCRIPTION: Shows how to use the BOOL_OR() function with the GROUP BY clause to check for active members in each team. The query joins the 'members' and 'teams' tables and groups the results by team name.

LANGUAGE: sql
CODE:
SELECT
  team_name,
  BOOL_OR(active) active_member_exists
FROM
  members
  INNER JOIN teams USING (team_id)
GROUP BY
  team_name;

----------------------------------------

TITLE: Basic PostgreSQL RIGHT JOIN Syntax
DESCRIPTION: Demonstrates the basic syntax of a PostgreSQL RIGHT JOIN clause. It shows how to join two tables and select columns from both tables.

LANGUAGE: sql
CODE:
SELECT
  select_list
FROM
  table1
RIGHT JOIN table2
  ON table1.column_name = table2.column_name;

----------------------------------------

TITLE: Using STRING_AGG() to Generate Comma-Separated Actor Lists
DESCRIPTION: Demonstrates using STRING_AGG() to concatenate actor names for each film, ordering them alphabetically and separating with commas.

LANGUAGE: SQL
CODE:
SELECT
    f.title,
    STRING_AGG (
	a.first_name || ' ' || a.last_name,
        ','
       ORDER BY
        a.first_name,
        a.last_name
    ) actors
FROM
    film f
INNER JOIN film_actor fa USING (film_id)
INNER JOIN actor a USING (actor_id)
GROUP BY
    f.title;

----------------------------------------

TITLE: Implementing RLS Policies with Raw SQL
DESCRIPTION: SQL commands for creating a todos table and implementing RLS policies directly in Postgres.

LANGUAGE: sql
CODE:
CREATE TABLE todos (
  id bigint generated by default as identity primary key,
  user_id text not null default (auth.user_id()),
  task text check (char_length(task) > 0),
  is_complete boolean default false,
  inserted_at timestamptz not null default now()
);

ALTER TABLE todos ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create todos." ON todos FOR INSERT
TO authenticated
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can view their own todos." ON todos FOR SELECT
TO authenticated
USING ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can update their own todos." ON todos FOR UPDATE
TO authenticated
USING ((select auth.user_id()) = user_id)
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can delete their own todos." ON todos FOR DELETE
TO authenticated
USING ((select auth.user_id()) = user_id);

----------------------------------------

TITLE: Creating Parameterized Film Actors Function
DESCRIPTION: Creates an overloaded version of the get_film_actors function that accepts a film_id parameter.

LANGUAGE: plpgsql
CODE:
create or replace function get_film_actors(p_fiml_id int)
	returns setof record
as $$
declare
   rec record;
begin
   for rec in select
			film_id,
			title,
            (first_name || ' ' || last_name)::varchar
		from film
		inner join film_actor using(film_id)
		inner join actor using (actor_id)
		where film_id = p_fiml_id
		order by title
	loop
        return next rec;
	end loop;

	return;
end;
$$
language plpgsql;

----------------------------------------

TITLE: Handling Invalid RSA Signing Algorithm Error in Neon RLS
DESCRIPTION: This error occurs when the JWT is signed with an algorithm other than ES256 or RS256, which are the only supported algorithms in Neon RLS. The solution is to ensure JWTs are signed using either ES256 or RS256.

LANGUAGE: bash
CODE:
invalid RSA signing algorithm

----------------------------------------

TITLE: Using || Operator to Concatenate JSONB Values in PostgreSQL
DESCRIPTION: This example demonstrates the use of the || operator to concatenate two JSONB values into a single JSONB value.

LANGUAGE: sql
CODE:
SELECT
  '{"name": "iPad"}' :: jsonb ||
   '{"price": 799}' :: jsonb
AS product;

----------------------------------------

TITLE: Basic PostgreSQL INTERSECT Example
DESCRIPTION: Demonstrates a simple INTERSECT operation to find films that are both popular and top-rated.

LANGUAGE: sql
CODE:
SELECT *
FROM most_popular_films
INTERSECT
SELECT *
FROM top_rated_films;

----------------------------------------

TITLE: Sample Ad-hoc Query - Monthly Sales Analysis in SQL
DESCRIPTION: SQL query example showing how to calculate total sales by product for the last month using aggregate functions.

LANGUAGE: sql
CODE:
SELECT product_id, SUM(sale_amount)
FROM sales
WHERE sale_date >= (CURRENT_DATE - INTERVAL '1 month')
GROUP BY product_id;

----------------------------------------

TITLE: Creating a BEFORE DELETE Trigger Function to Prevent Deletion in PostgreSQL
DESCRIPTION: This PL/pgSQL function creates a trigger function that raises an exception when called. It's designed to prevent deletion of rows from the products table.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION fn_before_delete_product()
RETURNS TRIGGER
AS
$$
BEGIN
    RAISE EXCEPTION 'Deletion from the products table is not allowed.';
END;
$$
LANGUAGE plpgsql;

----------------------------------------

TITLE: SQL Function Signature for JSON_VALUE()
DESCRIPTION: Defines the complete function signature with all available parameters and options for JSON_VALUE() in PostgreSQL.

LANGUAGE: sql
CODE:
JSON_VALUE(
    context_item,                    -- JSON input
    path_expression                  -- SQL/JSON path expression
    [ PASSING { value AS varname } [, ...] ]
    [ RETURNING data_type ]         -- Optional type conversion
    [ { ERROR | NULL | DEFAULT expression } ON EMPTY ]
    [ { ERROR | NULL | DEFAULT expression } ON ERROR ]
) → text

----------------------------------------

TITLE: Inserting Values into NUMERIC Column
DESCRIPTION: Demonstrates inserting values into a table with NUMERIC column, showing automatic rounding behavior.

LANGUAGE: sql
CODE:
INSERT INTO products (name, price)
VALUES ('Phone',500.215),
       ('Tablet',500.214);

----------------------------------------

TITLE: Updating Django Model for Schema Change
DESCRIPTION: Python code updating the Author model to include a new 'country' field, demonstrating a schema change.

LANGUAGE: python
CODE:
class Author(models.Model):
    name = models.CharField(max_length=100)
    bio = models.TextField(blank=True)
    country = models.CharField(max_length=100, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name

----------------------------------------

TITLE: Interpreting Milliseconds as Seconds After Decimal Point
DESCRIPTION: An example demonstrating how TO_TIMESTAMP() treats milliseconds as seconds after the decimal point.

LANGUAGE: sql
CODE:
SELECT
    TO_TIMESTAMP('01-01-2017 10:2', 'DD-MM-YYYY SS:MS');

----------------------------------------

TITLE: Applying Schema Change Migration
DESCRIPTION: Command to apply the new migration and update the database schema.

LANGUAGE: bash
CODE:
dotnet ef database update

----------------------------------------

TITLE: Querying JSONB Data with Containment Operator
DESCRIPTION: Demonstrates how to query JSONB data using the containment operator (@>) and JSON key extraction operators (-> and ->>).

LANGUAGE: sql
CODE:
SELECT
    id,
    profile -> 'name' as name,
    profile -> 'interests' as interests
FROM user_profiles
WHERE profile @> '{"interests":["music"]}'::JSONB;

----------------------------------------

TITLE: Creating a GIN Index with Operator Class for JSONB Column
DESCRIPTION: Shows how to create a GIN index with a specific operator class (jsonb_path_ops) for optimized performance on certain JSONB operations.

LANGUAGE: sql
CODE:
CREATE INDEX index_name
ON table_name
USING GIN(jsonb_column jsonb_path_ops);

----------------------------------------

TITLE: Initializing pgbench Tables in Neon Database
DESCRIPTION: This bash command initializes the necessary tables for pgbench in a Neon database, using the pgbench utility with the -i flag and a Neon connection string.

LANGUAGE: bash
CODE:
pgbench -i postgresql://[user]:[password]@[neon_hostname]/[dbname]

----------------------------------------

TITLE: Setting Maintenance Work Memory for Current Session in Neon
DESCRIPTION: SQL command to set the maintenance_work_mem parameter for the current session in Neon, demonstrating how to configure user-context parameters.

LANGUAGE: sql
CODE:
SET maintenance_work_mem='1 GB';

----------------------------------------

TITLE: Anonymous Block with Dollar Quoting in PostgreSQL
DESCRIPTION: Demonstrates an anonymous PL/pgSQL block using dollar quoting for cleaner syntax.

LANGUAGE: sql
CODE:
do
$$
declare
   film_count integer;
begin
   select count(*) into film_count
   from film;
   raise notice 'The number of films: %', film_count;
end;
$$;

----------------------------------------

TITLE: Converting a String to tsvector in PostgreSQL
DESCRIPTION: This example shows how to convert a full sentence into a tsvector, demonstrating how words are tokenized, positions are assigned, and stop words are removed.

LANGUAGE: SQL
CODE:
SELECT to_tsvector('The quick brown fox jumps over the lazy dog.');

----------------------------------------

TITLE: Creating Postgres Database Schema
DESCRIPTION: SQL schema to create recipes and ingredients tables with appropriate relationships

LANGUAGE: sql
CODE:
CREATE TABLE recipes (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    preparation_steps TEXT[] NOT NULL,
    url VARCHAR(255)
);

CREATE TABLE ingredients (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    quantity_amount NUMERIC NOT NULL,
    quantity_type VARCHAR(255) NOT NULL,
    recipe_id INTEGER REFERENCES recipes(id) ON DELETE CASCADE
);

----------------------------------------

TITLE: CASE with Aggregate Function for Price Segmentation
DESCRIPTION: Uses CASE with SUM to count films in different price segments (Economy, Mass, Premium).

LANGUAGE: sql
CODE:
SELECT
  SUM (
    CASE WHEN rental_rate = 0.99 THEN 1 ELSE 0 END
  ) AS "Economy",
  SUM (
    CASE WHEN rental_rate = 2.99 THEN 1 ELSE 0 END
  ) AS "Mass",
  SUM (
    CASE WHEN rental_rate = 4.99 THEN 1 ELSE 0 END
  ) AS "Premium"
FROM
  film;

----------------------------------------

TITLE: Creating Publication for Logical Replication
DESCRIPTION: Creates a publication for specific tables in PostgreSQL for logical replication purposes.

LANGUAGE: sql
CODE:
CREATE PUBLICATION my_publication FOR TABLE playing_with_neon;

----------------------------------------

TITLE: Complex NOT NULL Implementation with CHECK Constraint
DESCRIPTION: Shows how to implement a complex NOT NULL constraint using CHECK to ensure either username or email is not null/empty.

LANGUAGE: sql
CODE:
CREATE TABLE users (
  id serial PRIMARY KEY,
  username VARCHAR (50),
  password VARCHAR (50),
  email VARCHAR (50),
  CONSTRAINT username_email_notnull CHECK (
    NOT (
      (
        username IS NULL
        OR username = ''
      )
      AND (
        email IS NULL
        OR email = ''
      )
    )
  )
);

----------------------------------------

TITLE: Counting Payments with Customer Names
DESCRIPTION: Demonstrates joining tables to display customer names alongside payment counts.

LANGUAGE: sql
CODE:
SELECT
  first_name || ' ' || last_name full_name,
  COUNT (customer_id)
FROM
  payment
INNER JOIN customer USING (customer_id)
GROUP BY
  customer_id;

----------------------------------------

TITLE: Filtering JSON Data with Path Predicates
DESCRIPTION: Demonstrates using filter predicates in JSON path expressions to find specific elements matching certain conditions.

LANGUAGE: sql
CODE:
SELECT
  jsonb_path_query(
    info, '$.pets[*] ? (@.species == "Cat")'
  ) AS cat
FROM
  person;

----------------------------------------

TITLE: Utilizing the GROUPING Function in PostgreSQL GROUPING SETS
DESCRIPTION: This SQL query showcases the GROUPING() function used with GROUPING SETS to identify which columns are part of each grouping set, helping to distinguish between NULL values and grouping set indicators.

LANGUAGE: sql
CODE:
SELECT
	GROUPING(brand) grouping_brand,
	GROUPING(segment) grouping_segment,
	brand,
	segment,
	SUM (quantity)
FROM
	sales
GROUP BY
	GROUPING SETS (
		(brand),
		(segment),
		()
	)
ORDER BY
	brand,
	segment;

----------------------------------------

TITLE: Using pg_tiktoken Extension Functions in PostgreSQL
DESCRIPTION: Example of two main functions provided by the pg_tiktoken extension: tiktoken_encode for tokenizing text input and tiktoken_count for counting tokens in text. This extension wraps OpenAI's tokenizer for efficient text processing in Postgres databases.

LANGUAGE: sql
CODE:
tiktoken_encode(text) -- Returns tokenized output from text input
tiktoken_count(text) -- Returns number of tokens in text

----------------------------------------

TITLE: Project Setup with Virtual Environment
DESCRIPTION: Commands to create and set up a new Python project directory with virtual environment

LANGUAGE: bash
CODE:
mkdir langgraph-neon-example
cd langgraph-neon-example
python3 -m venv venv
source venv/bin/activate   # For macOS/Linux. On Windows, use `venv\Scripts\activate`

----------------------------------------

TITLE: Cross-Database Reporting with dblink
DESCRIPTION: Generates a report combining data from local and remote databases using dblink.

LANGUAGE: sql
CODE:
SELECT l.customer_name, r.order_total
FROM customers l
JOIN dblink('orders_db', 'SELECT customer_id, sum(amount) AS order_total FROM orders GROUP BY customer_id')
AS r(customer_id INTEGER, order_total NUMERIC) ON l.customer_id = r.customer_id;

----------------------------------------

TITLE: Laravel Environment Configuration
DESCRIPTION: Environment variables setup for connecting Laravel to Neon Postgres database.

LANGUAGE: bash
CODE:
DB_CONNECTION=pgsql
DB_PORT=5432
DATABASE_URL=NEON_POSTGRES_CONNECTION_STRING

----------------------------------------

TITLE: Database Restore Commands
DESCRIPTION: Sequence of SQL commands to drop existing database, create new one, and restore from backup

LANGUAGE: sql
CODE:
drop database dvdrental;

LANGUAGE: sql
CODE:
create database dvdrental;

LANGUAGE: sql
CODE:
exit

----------------------------------------

TITLE: JSON_VALUE Error Handling Examples
DESCRIPTION: Demonstrates various error handling scenarios using ON EMPTY and ON ERROR clauses.

LANGUAGE: sql
CODE:
-- Handle missing values with DEFAULT
SELECT JSON_VALUE(
    '{"data": null}',
    '$.missing_field'
    DEFAULT 'Not Found' ON EMPTY
);

LANGUAGE: text
CODE:
# |  json_value
---------------
1 | Not Found

LANGUAGE: sql
CODE:
-- Handle conversion errors
SELECT JSON_VALUE(
    '{"value": "not a number"}',
    '$.value'
    RETURNING numeric
    DEFAULT 0 ON ERROR
);

LANGUAGE: text
CODE:
# | json_value
-------------
1 | 0

----------------------------------------

TITLE: Creating Index for Performance Optimization with extract() Function
DESCRIPTION: This example shows how to create an index on frequently extracted components to improve query performance when using the extract() function on large datasets.

LANGUAGE: sql
CODE:
CREATE INDEX idx_events_year_month ON events (EXTRACT(YEAR FROM event_timestamp), EXTRACT(MONTH FROM event_timestamp));

----------------------------------------

TITLE: Querying Active Database Connections
DESCRIPTION: Shows how to query the pg_stat_activity view to find active connections to a specific database.

LANGUAGE: sql
CODE:
SELECT
  datname,
  pid,
  usename,
  application_name,
  client_addr,
  client_port
FROM
  pg_stat_activity
WHERE
  datname = 'test';

----------------------------------------

TITLE: Basic PL/pgSQL Loop Syntax
DESCRIPTION: Demonstrates the basic syntax structure of a PL/pgSQL loop statement with optional label and termination condition.

LANGUAGE: sql
CODE:
<<label>>
loop
   statements;
end loop;

LANGUAGE: sql
CODE:
<<label>>
loop
   statements;
   if condition then
      exit;
   end if;
end loop;

----------------------------------------

TITLE: Querying Customer Names with PostgreSQL LIKE
DESCRIPTION: This SQL query uses the LIKE operator to find customers whose first names begin with 'Jen'. It demonstrates basic pattern matching with the % wildcard.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
WHERE
  first_name LIKE 'Jen%';

----------------------------------------

TITLE: PostgreSQL UNION ALL with ORDER BY Example
DESCRIPTION: Shows how to combine results while retaining duplicates using UNION ALL and sorting the final result set using ORDER BY clause.

LANGUAGE: sql
CODE:
SELECT * FROM top_rated_films
UNION ALL
SELECT * FROM most_popular_films
ORDER BY title;

----------------------------------------

TITLE: Sorting Customers by Multiple Columns
DESCRIPTION: This query sorts customers by first name in ascending order and then by last name in descending order for rows with the same first name.

LANGUAGE: SQL
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
ORDER BY
  first_name ASC,
  last_name DESC;

----------------------------------------

TITLE: Inserting Data into a Table with SERIAL Column in PostgreSQL
DESCRIPTION: These snippets demonstrate how to insert data into a table with a SERIAL column. The SERIAL column can be ignored or explicitly set to DEFAULT during insertion.

LANGUAGE: sql
CODE:
INSERT INTO fruits(name)
VALUES('Orange');

LANGUAGE: sql
CODE:
INSERT INTO fruits(id,name)
VALUES(DEFAULT,'Apple');

----------------------------------------

TITLE: Timestamp Precision Examples
DESCRIPTION: Demonstrates different precision levels when using current_timestamp function.

LANGUAGE: sql
CODE:
SELECT
    current_timestamp(3) AS ts_with_milliseconds,
    current_timestamp(6) AS ts_with_microseconds,
    current_timestamp(0) AS ts_without_fraction;

----------------------------------------

TITLE: Converting with Time Zone Offset
DESCRIPTION: Using the AT TIME ZONE operator to convert a timestamp using a specific time zone offset.

LANGUAGE: sql
CODE:
SELECT TIMESTAMP '2024-03-21 10:00:00' AT TIME ZONE '-08:00';

----------------------------------------

TITLE: Adding Foreign Key to Existing Table
DESCRIPTION: Shows how to add a foreign key constraint to an existing table using ALTER TABLE commands, including how to drop and recreate with CASCADE option.

LANGUAGE: sql
CODE:
ALTER TABLE child_table
ADD CONSTRAINT constraint_name
FOREIGN KEY (fk_columns)
REFERENCES parent_table (parent_key_columns);

----------------------------------------

TITLE: Querying Synchronized User Data in SQL
DESCRIPTION: This SQL query demonstrates how to retrieve all user information from the 'neon_auth.users_sync' table. It showcases the simplicity of accessing synchronized user data with Neon Auth.

LANGUAGE: sql
CODE:
SELECT * FROM neon_auth.users_sync;

----------------------------------------

TITLE: Creating a Function for Salary Check Trigger
DESCRIPTION: This PL/pgSQL function checks if a salary increase is more than 100% and raises an exception if so. It will be used in the trigger creation.

LANGUAGE: plpgsql
CODE:
CREATE OR REPLACE FUNCTION check_salary()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL
  AS
$$
BEGIN
	IF (NEW.salary - OLD.salary) / OLD.salary >= 1 THEN
		RAISE 'The salary increment cannot that high.';
	END IF;

	RETURN NEW;
END;
$$

----------------------------------------

TITLE: Defining json_serialize() Function Signature in PostgreSQL
DESCRIPTION: Demonstrates the syntax and parameters of the json_serialize() function, including optional input format and return type specifications.

LANGUAGE: sql
CODE:
json_serialize(
    expression                              -- Input JSON expression
    [ FORMAT JSON [ ENCODING UTF8 ] ]       -- Optional input format specification
    [ RETURNING data_type                   -- Optional return type specification
      [ FORMAT JSON [ ENCODING UTF8 ] ] ]   -- Optional output format specification
) → text | bytea

----------------------------------------

TITLE: Querying Basic JSONB Attributes with jsonb_path_query()
DESCRIPTION: This SQL query demonstrates how to use jsonb_path_query() to retrieve basic attributes (brand and price) from JSONB data in the 'products' table.

LANGUAGE: sql
CODE:
SELECT jsonb_path_query(attributes, '$.brand') AS brand,
       jsonb_path_query(attributes, '$.price') AS price
FROM products;

----------------------------------------

TITLE: Creating a Table with Boolean Column in PostgreSQL
DESCRIPTION: This SQL snippet creates a new table called 'stock_availability' with a Boolean column 'available' to log product availability.

LANGUAGE: SQL
CODE:
CREATE TABLE stock_availability (
   product_id INT PRIMARY KEY,
   available BOOLEAN NOT NULL
);

----------------------------------------

TITLE: Inserting Hierarchical Data in Postgres using ltree
DESCRIPTION: This SQL command inserts hierarchical data into the 'categories' table using the ltree path representation.

LANGUAGE: sql
CODE:
INSERT INTO categories (name, path) VALUES
  ('Electronics', 'Electronics'),
  ('Laptops', 'Electronics.Laptops'),
  ('Gaming Laptops', 'Electronics.Laptops.Gaming');

----------------------------------------

TITLE: Configuring Okta authentication with Auth.js
DESCRIPTION: TypeScript code to set up Okta authentication using Auth.js library, including session callback to set user ID.

LANGUAGE: typescript
CODE:
import NextAuth from 'next-auth';
import Okta from 'next-auth/providers/okta';

export const { handlers, signIn, signOut, auth } = NextAuth({
  providers: [Okta],
  callbacks: {
    async session({ session, token }) {
      session.user.id = token.sub as string;
      return session;
    },
  },
});

----------------------------------------

TITLE: Counting Rows to Verify Replication in SQL
DESCRIPTION: SQL command to count the rows in the replicated table, used to verify that data has been successfully replicated to the destination database.

LANGUAGE: sql
CODE:
SELECT COUNT(*) FROM playing_with_neon;

----------------------------------------

TITLE: Basic PostgreSQL Recursive View Syntax
DESCRIPTION: Shows the fundamental syntax for creating a recursive view in PostgreSQL. The syntax includes the view name and column definitions followed by the query definition.

LANGUAGE: sql
CODE:
CREATE RECURSIVE VIEW view_name(columns)
AS
query;

----------------------------------------

TITLE: Inserting JSONB Data into Employees Table Using jsonb_to_record()
DESCRIPTION: Demonstrates how to use jsonb_to_record() to insert JSONB data into the employees table, converting the JSONB object into a structured record.

LANGUAGE: sql
CODE:
INSERT INTO employees
SELECT *
FROM jsonb_to_record('{"id": "123", "name": "John Doe", "department": "Engineering", "salary": "75000"}') AS x(id INT, name TEXT, department TEXT, salary NUMERIC);

----------------------------------------

TITLE: Finding Top Customers with PostgreSQL SUM()
DESCRIPTION: Retrieves the top five customers who made the highest payments using SUM(), GROUP BY, ORDER BY, and LIMIT.

LANGUAGE: sql
CODE:
SELECT
  customer_id,
  SUM (amount) AS total
FROM
  payment
GROUP BY
  customer_id
ORDER BY
  total DESC
LIMIT
  5;

----------------------------------------

TITLE: Query Active Database Connections
DESCRIPTION: SQL query to check current database connections, showing client addresses, connection counts and latest connection times.

LANGUAGE: sql
CODE:
SELECT
    client_addr,
    COUNT(*) AS connection_count,
    MAX(backend_start) AS last_connection_time
FROM
    pg_stat_activity
GROUP BY
    client_addr
ORDER BY
    connection_count DESC;

----------------------------------------

TITLE: Revoking an API Key via Neon API
DESCRIPTION: This snippet shows how to revoke a specific API key using the Neon API. It requires the key ID and authentication with a valid API key.

LANGUAGE: bash
CODE:
curl -X DELETE \
  'https://console.neon.tech/api/v2/api_keys/177630' \
  -H "Accept: application/json"  \
  -H "Authorization: Bearer $NEON_API_KEY" | jq

----------------------------------------

TITLE: Inserting Spatial Data into PostGIS Table
DESCRIPTION: SQL commands to insert sample data into the bus_stops table. The ST_Point function is used to create point geometries from latitude and longitude coordinates.

LANGUAGE: sql
CODE:
INSERT INTO bus_stops (name, location)
VALUES
    ('Main St & 3rd Ave', ST_Point(-73.935242, 40.730610)),
    ('Elm St & 5th Ave', ST_Point(-73.991070, 40.730824));

----------------------------------------

TITLE: Configuring Django Database Settings
DESCRIPTION: Python code to configure Django database settings using environment variables and the dj-database-url package.

LANGUAGE: python
CODE:
import os
import dotenv
import dj_database_url

dotenv.load_dotenv("../.env")

DATABASES = {
    "default": dj_database_url.parse(
        url=os.getenv("DATABASE_URL", ""),
        conn_max_age=600, conn_health_checks=True
    )
}

----------------------------------------

TITLE: Filtering with json_array_elements() in PostgreSQL
DESCRIPTION: This query shows how to use json_array_elements() to filter products based on a specific color present in the JSON array.

LANGUAGE: sql
CODE:
SELECT *
FROM products
WHERE 'Blue' IN (
    SELECT json_array_elements_text(details->'colors')
);

----------------------------------------

TITLE: Querying Current Schema in PostgreSQL
DESCRIPTION: Shows how to check the current schema using the current_schema() function.

LANGUAGE: php
CODE:
SELECT current_schema();

----------------------------------------

TITLE: Implementing Server-Side Route for Database Query
DESCRIPTION: TypeScript code for a Sveltekit server-side route that queries the Neon database and returns the version information.

LANGUAGE: typescript
CODE:
import { pool } from '../db.server';

export async function load() {
  const client = await pool.connect();
  try {
    const { rows } = await client.query('SELECT version()');
    const { version } = rows[0];
    return {
      version,
    };
  } finally {
    client.release();
  }
}

LANGUAGE: typescript
CODE:
import { sql } from '../db.server';

export async function load() {
  const response = await sql`SELECT version()`;
  const { version } = response[0];
  return {
    version,
  };
}

----------------------------------------

TITLE: PostgreSQL COUNT(DISTINCT column) Usage
DESCRIPTION: Illustrates how to use COUNT(DISTINCT column_name) to count unique non-NULL values in a column.

LANGUAGE: sql
CODE:
SELECT
   COUNT(DISTINCT column_name)
FROM
   table_name
WHERE
   condition;

----------------------------------------

TITLE: Using COUNT() with HAVING Clause
DESCRIPTION: Shows how to use COUNT() in a HAVING clause to filter grouped results.

LANGUAGE: sql
CODE:
SELECT
  first_name || ' ' || last_name full_name,
  COUNT (customer_id)
FROM
  payment
INNER JOIN customer USING (customer_id)
GROUP BY
  customer_id
HAVING
  COUNT (customer_id) > 40

----------------------------------------

TITLE: Expanding String Array Elements
DESCRIPTION: Demonstrates expanding a JSON array containing string elements into individual text values.

LANGUAGE: sql
CODE:
SELECT jsonb_array_elements_text('["orange","banana","watermelon"]');

----------------------------------------

TITLE: ROW_NUMBER for Nth Highest Value
DESCRIPTION: Shows how to use ROW_NUMBER() to find the nth highest/lowest value in a dataset.

LANGUAGE: sql
CODE:
SELECT
  *
FROM
  products
WHERE
  price = (
    SELECT
      price
    FROM
      (
        SELECT
          price,
          ROW_NUMBER () OVER (
            ORDER BY
              price DESC
          ) nth
        FROM
          (
            SELECT
              DISTINCT (price)
            FROM
              products
          ) prices
      ) sorted_prices
    WHERE
      nth = 3
  );

----------------------------------------

TITLE: Handling Errors with json_serialize() in PostgreSQL
DESCRIPTION: Shows how json_serialize() handles invalid JSON input, demonstrating error reporting for syntax issues.

LANGUAGE: sql
CODE:
-- Invalid JSON input (raises error)
SELECT json_serialize('{"invalid": }');

----------------------------------------

TITLE: Checking Version Using SQL Function
DESCRIPTION: SQL query using the version() function to retrieve detailed PostgreSQL version information including build details.

LANGUAGE: sql
CODE:
SELECT version();

----------------------------------------

TITLE: Creating an Idempotent Migration in Laravel
DESCRIPTION: An example of an idempotent migration in Laravel that adds a status column to the users table, ensuring it can be safely run and rolled back multiple times.

LANGUAGE: php
CODE:
// database/migrations/2024_05_10_000000_add_status_to_users.php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddStatusToUsers extends Migration
{
    public function up()
    {
        if (!Schema::hasColumn('users', 'status')) {
            Schema::table('users', function (Blueprint $table) {
                $table->string('status')->default('active');
            });
        }
    }

    public function down()
    {
        if (Schema::hasColumn('users', 'status')) {
            Schema::table('users', function (Blueprint $table) {
                $table->dropColumn('status');
            });
        }
    }
}

----------------------------------------

TITLE: Basic Neon Orgs Command Usage
DESCRIPTION: Shows the basic syntax for using the Neon orgs command with sub-commands and options.

LANGUAGE: bash
CODE:
neon orgs <sub-command> [options]

----------------------------------------

TITLE: Getting Column Value Sizes in PostgreSQL
DESCRIPTION: Demonstrates how to check storage sizes of different data types using pg_column_size()

LANGUAGE: sql
CODE:
SELECT
  pg_column_size(5 :: smallint) smallint_size,
  pg_column_size(5 :: int) int_size,
  pg_column_size(5 :: bigint) bigint_size;

----------------------------------------

TITLE: Flask Application Setup with SQLAlchemy and Migrations
DESCRIPTION: Main Flask application file implementing database configuration, User model, and migration setup using SQLAlchemy and Flask-Migrate.

LANGUAGE: python
CODE:
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
import os
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

migrate = Migrate(app, db)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)

    def __repr__(self):
        return f'<User {self.name}>'

if __name__ == '__main__':
    app.run(debug=True)

----------------------------------------

TITLE: Deleting Multiple Rows with Condition
DESCRIPTION: Shows how to delete multiple rows that match a specific condition (completed = true) and return the deleted rows.

LANGUAGE: sql
CODE:
DELETE FROM todos
WHERE completed = true
RETURNING *;

----------------------------------------

TITLE: Creating Login Role with Password
DESCRIPTION: Creates a role with login privileges and password authentication.

LANGUAGE: sql
CODE:
CREATE ROLE alice
LOGIN
PASSWORD 'securePass1';

----------------------------------------

TITLE: PostgreSQL NOT BETWEEN Example
DESCRIPTION: Query demonstrating the NOT BETWEEN operator to find payments with payment_id values outside the range of 17503 to 17505.

LANGUAGE: sql
CODE:
SELECT
  payment_id,
  amount
FROM
  payment
WHERE
  payment_id NOT BETWEEN 17503 AND 17505
ORDER BY
  payment_id;

----------------------------------------

TITLE: Creating Azure AI Search Index using Azure SDK
DESCRIPTION: JavaScript code to create an Azure AI Search index using the Azure SDK for Node.js.

LANGUAGE: javascript
CODE:
const { SearchIndexClient, AzureKeyCredential } = require('@azure/search-documents');

const endpoint = 'YOUR_SEARCH_ENDPOINT';
const apiKey = 'YOUR_ADMIN_API_KEY';
const indexName = 'developer-index';

const searchClient = new SearchIndexClient(endpoint, new AzureKeyCredential(apiKey));

const indexDefinition = {
  name: 'developer-index',
  fields: [
    {
      name: 'id',
      type: 'Edm.String',
      key: true,
      searchable: false,
    },
    {
      name: 'title',
      type: 'Edm.String',
      searchable: true,
      filterable: true,
      sortable: true,
    },
    {
      name: 'content',
      type: 'Edm.String',
      searchable: true,
      filterable: false,
    },
    {
      name: 'tags',
      type: 'Collection(Edm.String)',
      searchable: true,
      filterable: true,
      facetable: true,
    },
    {
      name: 'category',
      type: 'Edm.String',
      searchable: true,
      filterable: true,
      facetable: true,
    },
  ],
  suggesters: [
    {
      name: 'sg',
      searchMode: 'analyzingInfixMatching',
      sourceFields: ['title'],
    },
  ],
};

async function createSearchIndex() {
  try {
    await searchClient.createIndex(indexDefinition);
    console.log(`Index ${indexName} created successfully`);
  } catch (error) {
    console.error('Error creating index:', error);
  }
}

----------------------------------------

TITLE: Defining Product Model Class in Java
DESCRIPTION: Creates a Product class with id, name, and price properties matching the database schema, including constructors and accessor methods.

LANGUAGE: java
CODE:
public class Product {
    private int id;
    private String name;
    private double price;

    public Product(int id, String name, double price){
        this(name,price);
        this.id = id;
    }

    public Product(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getId() { return id;  }

    public void setId(int id) { this.id = id; }

    @Override
    public String toString() {
        return "Product{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", price=" + price +
                "}";
    }
}

----------------------------------------

TITLE: Inserting Data to Test Multi-Column UNIQUE Index
DESCRIPTION: SQL INSERT statements to demonstrate the enforcement of the multi-column UNIQUE index.

LANGUAGE: sql
CODE:
INSERT INTO employees(first_name, last_name, work_phone, extension)
VALUES('Lily', 'Bush', '(408)-333-1234','1212');

INSERT INTO employees(first_name, last_name, work_phone, extension)
VALUES('Joan', 'Doe', '(408)-333-1234','1211');

INSERT INTO employees(first_name, last_name, work_phone, extension)
VALUES('Tommy', 'Stark', '(408)-333-1234','1211');

----------------------------------------

TITLE: Connecting to Neon Postgres Database
DESCRIPTION: Example connection string for connecting to a Neon Postgres database. It includes the username, password, endpoint, and database name.

LANGUAGE: sql
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname

----------------------------------------

TITLE: PostgreSQL RIGHT JOIN with USING Clause
DESCRIPTION: Demonstrates how to use the USING clause in a RIGHT JOIN when the joining columns have the same name, simplifying the join condition.

LANGUAGE: sql
CODE:
SELECT
  f.film_id,
  f.title,
  i.inventory_id
FROM
  inventory i
RIGHT JOIN film f USING(film_id)
ORDER BY
  f.title;

----------------------------------------

TITLE: Analyzing Sentiment Trends Over Time
DESCRIPTION: SQL query to show how sentiment varies over time, giving a sense of customer satisfaction trends.

LANGUAGE: sql
CODE:
SELECT
    DATE_TRUNC('day', cf.created_at) AS date,
    AVG(sr.sentiment_score) AS avg_sentiment,
    COUNT(*) AS feedback_count
FROM customer_feedback cf
JOIN sentiment_results sr ON cf.feedback_id = sr.feedback_id
GROUP BY date
ORDER BY date;

----------------------------------------

TITLE: User Model Definition
DESCRIPTION: SQLAlchemy model class defining the User table structure and methods.

LANGUAGE: python
CODE:
from app import db
from datetime import datetime

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    def __repr__(self):
        return f'<User {self.username}>'

    def to_dict(self):
        return {
            'id': self.id,
            'username': self.username,
            'email': self.email,
            'created_at': self.created_at.isoformat()
        }

----------------------------------------

TITLE: Using CURRENT_USER Function in PostgreSQL
DESCRIPTION: This snippet demonstrates the basic syntax and usage of the CURRENT_USER function in PostgreSQL to retrieve the name of the currently logged-in user.

LANGUAGE: sql
CODE:
SELECT CURRENT_USER;

----------------------------------------

TITLE: Enabling pg_prewarm Extension in PostgreSQL
DESCRIPTION: Creates the pg_prewarm extension in the database if it doesn't already exist.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pg_prewarm;

----------------------------------------

TITLE: Removing Primary Key Constraint in PostgreSQL
DESCRIPTION: This snippet demonstrates how to remove a primary key constraint from a table using the ALTER TABLE statement.

LANGUAGE: sql
CODE:
ALTER TABLE vendors
DROP CONSTRAINT vendors_pkey;

----------------------------------------

TITLE: Basic PostgreSQL FETCH Syntax
DESCRIPTION: Standard syntax for the PostgreSQL FETCH clause showing how to skip rows and fetch a specific number of rows.

LANGUAGE: sql
CODE:
OFFSET row_to_skip { ROW | ROWS }
FETCH { FIRST | NEXT } [ row_count ] { ROW | ROWS } ONLY

----------------------------------------

TITLE: AVG() Function with GROUP BY Clause
DESCRIPTION: Demonstrates how to use the AVG() function with GROUP BY to calculate average amounts per customer.

LANGUAGE: sql
CODE:
SELECT
  customer_id,
  first_name,
  last_name,
  AVG (amount):: NUMERIC(10, 2)
FROM
  payment
  INNER JOIN customer USING(customer_id)
GROUP BY
  customer_id
ORDER BY
  customer_id;

----------------------------------------

TITLE: PostgreSQL SELECT DISTINCT with Multiple Columns
DESCRIPTION: Shows how to use SELECT DISTINCT with multiple columns, where duplicates are evaluated based on the combination of values in the specified columns.

LANGUAGE: sql
CODE:
SELECT
   DISTINCT column1, column2
FROM
   table_name;

----------------------------------------

TITLE: SUBSTRING() with POSIX Regular Expression in PostgreSQL
DESCRIPTION: Demonstrates how to use SUBSTRING() with a POSIX regular expression to extract specific patterns from a string.

LANGUAGE: sql
CODE:
SELECT
  SUBSTRING (
    'The house number is 9001', '([0-9]{1,4})'
  ) AS house_no

----------------------------------------

TITLE: Using jsonb_array_elements() with Joins
DESCRIPTION: SQL query showing how to use jsonb_array_elements() in combination with JOINs to extract and combine data from multiple tables with JSONB columns.

LANGUAGE: sql
CODE:
SELECT
   o.id AS organization_id,
   u.id AS user_id,
   u.name AS user_name,
   u.email AS user_email,
   m->>'role' AS member_role
FROM
   organizations o
JOIN jsonb_array_elements(o.members) AS m ON true
JOIN users u ON m->>'id' = u.id::TEXT;

----------------------------------------

TITLE: Handling Partial JSON Data in PostgreSQL
DESCRIPTION: Shows how to use json_populate_record with default values for missing JSON fields by providing a non-NULL base record.

LANGUAGE: sql
CODE:
INSERT INTO employees
SELECT *
FROM json_populate_record(
    (1, 'ABC', 'Sales', 0)::employees,
    '{"id": "124", "name": "Jane Smith", "salary": "68000"}'
)
RETURNING *;

----------------------------------------

TITLE: Basic abs() Function Signature in PostgreSQL
DESCRIPTION: Shows the basic syntax and parameters for the abs() function that returns the absolute value of a number. Takes any numeric data type as input.

LANGUAGE: sql
CODE:
abs(number) -> number

----------------------------------------

TITLE: Performing Case-Insensitive Search with lower() Function
DESCRIPTION: Shows how to use the lower() function in a WHERE clause to perform case-insensitive searches on email addresses in a customers table.

LANGUAGE: sql
CODE:
WITH customers AS (
  SELECT 'John Doe' AS name, 'JOHN.DOE@EXAMPLE.COM' AS email
  UNION ALL
  SELECT 'Jane Smith' AS name, 'jane.smith@example.com' AS email
  UNION ALL
  SELECT 'Bob Johnson' AS name, 'Bob.Johnson@Example.com' AS email
)
SELECT name, email
FROM customers
WHERE lower(email) LIKE lower('%John.%');

----------------------------------------

TITLE: Filtering Rows Based on Array Length in SQL
DESCRIPTION: Shows how to use array_length() in a WHERE clause to filter rows based on the size of an array. This example selects orders that contain more than two items.

LANGUAGE: sql
CODE:
WITH orders(order_id, items) AS (
  VALUES
    (1, ARRAY['Shirt', 'Pants', 'Shoes']),
    (2, ARRAY['Book']),
    (3, ARRAY['Laptop', 'Mouse', 'Keyboard', 'Monitor'])
)
SELECT *
FROM orders
WHERE array_length(items, 1) > 2;

----------------------------------------

TITLE: Variable Declaration Examples
DESCRIPTION: Demonstrates different ways to declare and initialize variables in PL/pgSQL

LANGUAGE: sql
CODE:
counter int = 0;
counter int := 0;
max int;

----------------------------------------

TITLE: LEAD Function with PARTITION BY Clause
DESCRIPTION: Shows how to use LEAD() function with PARTITION BY to compare sales across years within specific product groups.

LANGUAGE: sql
CODE:
SELECT
	year,
	amount,
	group_id,
	LEAD(amount,1) OVER (
		PARTITION BY group_id
		ORDER BY year
	) next_year_sales
FROM
	sales;

----------------------------------------

TITLE: Creating a Complex View with Joins in PostgreSQL
DESCRIPTION: This example creates a view based on multiple joined tables (customer, address, city, and country) to provide comprehensive customer information.

LANGUAGE: sql
CODE:
CREATE VIEW customer_info AS
SELECT
  first_name,
  last_name,
  email,
  phone,
  city,
  postal_code,
  country
FROM
  customer
  INNER JOIN address USING (address_id)
  INNER JOIN city USING (city_id)
  INNER JOIN country USING (country_id);

----------------------------------------

TITLE: Verifying Logical Replication in Neon
DESCRIPTION: SQL query to check if logical replication is enabled by showing the wal_level setting.

LANGUAGE: sql
CODE:
SHOW wal_level;

----------------------------------------

TITLE: Translating GraphQL to SQL for Customer Query
DESCRIPTION: This SQL query is the translation of the getCustomer GraphQL query, retrieving name and email for a specific customer ID from the Neon database.

LANGUAGE: sql
CODE:
SELECT name, email FROM public.customer WHERE id = $1

----------------------------------------

TITLE: Database Migration Script Implementation
DESCRIPTION: Implements the migration script using Drizzle ORM and Neon's serverless driver to apply database schema changes.

LANGUAGE: typescript
CODE:
import { drizzle } from 'drizzle-orm/neon-http';
import { neon } from '@neondatabase/serverless';
import { migrate } from 'drizzle-orm/neon-http/migrator';
import { config } from 'dotenv';

config({ path: '.env' });

const sql = neon(process.env.DATABASE_URL!);
const db = drizzle(sql);

const main = async () => {
  try {
    await migrate(db, { migrationsFolder: 'drizzle' });
    console.log('Migration completed');
  } catch (error) {
    console.error('Error during migration:', error);
    process.exit(1);
  }
};

main();

----------------------------------------

TITLE: PostgreSQL COUNT(column) Usage
DESCRIPTION: Shows how to use COUNT(column_name) to count non-NULL values in a specific column.

LANGUAGE: sql
CODE:
SELECT
   COUNT(column_name)
FROM
   table_name
WHERE
   condition;

----------------------------------------

TITLE: Querying Active Sessions
DESCRIPTION: SQL query to monitor active database sessions and identify processes keeping compute active.

LANGUAGE: sql
CODE:
SELECT
  pid,
  usename,
  query,
  state,
  query_start
FROM
  pg_stat_activity
WHERE
  query_start >= now() - interval '24 hours'
ORDER BY
  query_start DESC;

----------------------------------------

TITLE: Inserting Sample Data
DESCRIPTION: Inserts test data into the dense_ranks table for demonstration purposes.

LANGUAGE: sql
CODE:
INSERT INTO dense_ranks(c)
VALUES('A'),('A'),('B'),('C'),('C'),('D'),('E');

----------------------------------------

TITLE: Querying PostgreSQL Version in Neon
DESCRIPTION: SQL query to check the current PostgreSQL version running in your Neon project. This can be executed from the Neon SQL Editor or any SQL client connected to your database.

LANGUAGE: sql
CODE:
SELECT version();

----------------------------------------

TITLE: Implementation Example with Error Handling
DESCRIPTION: Complete implementation example showing how to use the transaction-safe account creation system with error handling.

LANGUAGE: php
CODE:
<?php

require 'vendor/autoload.php';

use PostgreSQLTutorial\Connection as Connection;
use PostgreSQLTutorial\AccountDB as AccountDB;

try {
    // connect to the PostgreSQL database
    $pdo = Connection::get()->connect();

    $accountDB = new AccountDB($pdo);

    // add accounts
    $accountDB->addAccount('John', 'Doe', 1, date('Y-m-d'));
    $accountDB->addAccount('Linda', 'Williams', 2, date('Y-m-d'));
    $accountDB->addAccount('Maria', 'Miller', 3, date('Y-m-d'));

    echo 'The new accounts have been added.' . '<br>';
    //
    $accountDB->addAccount('Susan', 'Wilson', 99, date('Y-m-d'));
} catch (\PDOException $e) {
    echo $e->getMessage();
}

----------------------------------------

TITLE: Declaring Numeric Data Types in PostgreSQL
DESCRIPTION: Illustrates how to declare columns with various numeric data types in PostgreSQL, including integer and floating-point numbers.

LANGUAGE: SQL
CODE:
CREATE TABLE numeric_example (
  small_int SMALLINT,
  regular_int INT,
  serial_column SERIAL,
  float_column FLOAT(24),
  real_column REAL,
  numeric_column NUMERIC(10,2)
);

----------------------------------------

TITLE: Rolling Back Transaction
DESCRIPTION: Rolls back the transaction to undo changes in case of failures.

LANGUAGE: java
CODE:
connection.rollback();

----------------------------------------

TITLE: Create Project API Request
DESCRIPTION: API request to create a new Neon project with specified name using cURL.

LANGUAGE: bash
CODE:
curl 'https://console.neon.tech/api/v2/projects' \
  -H 'Accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY" \
  -H 'Content-Type: application/json' \
  -d '{
  "project": {
    "name": "myproject"
  }
}' | jq

----------------------------------------

TITLE: Server-Side Data Loading with Neon Serverless Driver in SolidStart
DESCRIPTION: TypeScript code for server-side data loading in SolidStart using the Neon serverless driver to connect to a Neon database and query the PostgreSQL version.

LANGUAGE: typescript
CODE:
import { neon } from "@neondatabase/serverless";
import { createAsync } from "@solidjs/router";

const getVersion = async () => {
    "use server";
    const sql = neon(`${process.env.DATABASE_URL}`);
    const response = await sql`SELECT version()`;
    const { version } = response[0];
    return version;
}

export const route = {
  load: () => getVersion(),
};

export default function Page() {
  const version = createAsync(() => getVersion());
  return <>{version()}</>;
}

----------------------------------------

TITLE: Querying the Recursive View
DESCRIPTION: Demonstrates how to query the created recursive view to find a specific employee's reporting line.

LANGUAGE: sql
CODE:
SELECT
  subordinates
FROM
  reporting_line
WHERE
  employee_id = 10;

----------------------------------------

TITLE: Handling NULL Values with json_array_elements() in PostgreSQL
DESCRIPTION: This example demonstrates how json_array_elements() handles NULL values within JSON arrays.

LANGUAGE: sql
CODE:
INSERT INTO products (id, name, details) VALUES (6, 'Socks', '{"sizes": ["S", null, "L", "XL"], "colors": ["White", "Black", "Gray"]}');

SELECT
 id,
 name,
 size
FROM products AS p,
 json_array_elements(p.details -> 'sizes') AS size
WHERE name = 'Socks';

----------------------------------------

TITLE: PostgreSQL INNER JOIN with Table Aliases
DESCRIPTION: Demonstrates how to use table aliases to make INNER JOIN queries more concise and readable.

LANGUAGE: sql
CODE:
SELECT
  select_list
FROM
  table1 t1
INNER JOIN table2 t2
    ON t1.column_name = t2.column_name;

----------------------------------------

TITLE: Creating Members Table Schema
DESCRIPTION: Creates a table for storing member data with id, name, and email columns.

LANGUAGE: sql
CODE:
CREATE TABLE members (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE
);

----------------------------------------

TITLE: Creating Table Structure for Binary Data Storage in PostgreSQL
DESCRIPTION: SQL command to create a company_files table with columns for storing binary data using BYTEA type, including foreign key relationship to stocks table.

LANGUAGE: sql
CODE:
CREATE TABLE company_files (
   id SERIAL PRIMARY KEY,
   stock_id INT NOT NULL,
   mime_type VARCHAR(255) NOT NULL,
   file_name VARCHAR (255) NOT NULL,
   file_data BYTEA NOT NULL,
   FOREIGN KEY (stock_id) REFERENCES stocks (id)
);

----------------------------------------

TITLE: Translating GraphQL to SQL for Order and Customer Query
DESCRIPTION: These SQL queries represent the translation of the getOrderList GraphQL query with nested customer information, demonstrating how StepZen efficiently retrieves related data from the Neon database.

LANGUAGE: sql
CODE:
SELECT id, shippingcost, customerid FROM public.order
SELECT name, email FROM public.customer WHERE id = $1

----------------------------------------

TITLE: Basic Connection Closure in PostgreSQL Python
DESCRIPTION: Shows two methods for closing a PostgreSQL connection which triggers an implicit rollback

LANGUAGE: sql
CODE:
conn.close()

LANGUAGE: python
CODE:
del conn

----------------------------------------

TITLE: Constructing OAuth Authorization URL
DESCRIPTION: Example of a fully constructed OAuth authorization URL with all required parameters. This URL is used to initiate the OAuth flow and redirect users to the Neon authorization page.

LANGUAGE: text
CODE:
https://oauth2.neon.tech/oauth2/auth?client_id=neon-experimental&scope=openid%20offline%20offline_access%20urn%3Aneoncloud%3Aprojects%3Acreate%20urn%3Aneoncloud%3Aprojects%3Aread%20urn%3Aneoncloud%3Aprojects%3Aupdate%20urn%3Aneoncloud%3Aprojects%3Adelete&response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fapi%2Fauth%2Fcallback%2Fneon&grant_type=authorization_code&state=H58y-rSTebc3QmNbRjNTX9dL73-IyoU2T_WNievO9as&code_challenge=99XcbwOFU6iEsvXr77Xxwsk9I0GL4c4c4Q8yPIVrF_0&code_challenge_method=S256

----------------------------------------

TITLE: Configuring Postgrex Idle Interval for Neon Autosuspend
DESCRIPTION: This Elixir configuration snippet shows how to set the Postgrex :idle_interval to a higher value, allowing Neon computes to suspend and prevent SSL connection closure errors.

LANGUAGE: elixir
CODE:
config :app_name, AppName.Repo
  # normal connection options
  ...
  idle_interval: :timer.hours(24)

----------------------------------------

TITLE: Basic array_agg Function Signatures in PostgreSQL
DESCRIPTION: Demonstrates the two main function signatures for array_agg() - the simple form and the ordered form with sorting options.

LANGUAGE: sql
CODE:
array_agg(expression) -> anyarray

LANGUAGE: sql
CODE:
array_agg(expression ORDER BY sort_expression [ASC | DESC] [NULLS { FIRST | LAST }]) -> anyarray

----------------------------------------

TITLE: Docker Compose Configuration for Local PostgreSQL
DESCRIPTION: Docker Compose setup for running local PostgreSQL with Neon Proxy

LANGUAGE: yaml
CODE:
services:
  postgres:
    image: postgres:17
    command: '-d 1'
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=main
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  neon-proxy:
    image: ghcr.io/timowilhelm/local-neon-http-proxy:main
    environment:
      - PG_CONNECTION_STRING=postgres://postgres:postgres@postgres:5432/main
    ports:
      - '4444:4444'
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  db_data:

----------------------------------------

TITLE: Creating .NET Console Application for Entity Framework Project
DESCRIPTION: Terminal command to create a new .NET console application for the Entity Framework project.

LANGUAGE: bash
CODE:
dotnet new console -o guide-neon-entityframework
cd guide-neon-entityframework

----------------------------------------

TITLE: Creating a BEFORE TRUNCATE Trigger Function in PostgreSQL
DESCRIPTION: Defines a PL/pgSQL function that will be executed before a TRUNCATE operation. This function can contain custom logic to be run before the table is truncated.

LANGUAGE: SQL
CODE:
CREATE OR REPLACE FUNCTION trigger_function_name()
RETURNS TRIGGER AS
$$
BEGIN
    -- This logic will be executed before the TRUNCATE operation
    -- ...
    RETURN NULL;
END;
$$
LANGUAGE plpgsql;

----------------------------------------

TITLE: Connecting to Neon with JDBC Connection URL
DESCRIPTION: JDBC connection URL template for connecting to a Neon database. Requires replacing placeholder variables with actual Neon project credentials including hostname, database name, user, and password.

LANGUAGE: java
CODE:
jdbc:postgresql://[neon_hostname]/[dbname]?user=[user]&password=[password]&sslmode=require

----------------------------------------

TITLE: Adding a SERIAL Column to an Existing Table in PostgreSQL
DESCRIPTION: These snippets show how to add a SERIAL column as a primary key to an existing table in PostgreSQL.

LANGUAGE: sql
CODE:
CREATE TABLE baskets(
    name VARCHAR(255) NOT NULL
);

LANGUAGE: sql
CODE:
ALTER TABLE baskets
ADD COLUMN id SERIAL PRIMARY KEY;

----------------------------------------

TITLE: Database Restoration Using pg_restore
DESCRIPTION: Command to restore the dvdrental database from a backup file

LANGUAGE: php
CODE:
pg_restore -U postgres -d dvdrental D:/backup/dvdrental.tar

----------------------------------------

TITLE: Converting JSON Object to Record with All Fields
DESCRIPTION: Example showing how to convert a JSON object with id, name, and age fields into a corresponding record type.

LANGUAGE: sql
CODE:
SELECT
  *
FROM
  jsonb_to_record(
    '{"id": 1, "name": "Alice", "age": 30}'
  ) AS person (id INT, name TEXT, age INT);

----------------------------------------

TITLE: Using max() with FILTER Clause in SQL
DESCRIPTION: This SQL query shows how to use max() with a FILTER clause to calculate both the overall maximum order amount and the maximum order amount for a specific month (April in this case).

LANGUAGE: sql
CODE:
SELECT
    max(order_amount) AS max_overall,
    max(order_amount) FILTER (WHERE EXTRACT(MONTH FROM order_date) = 4) AS max_in_april
FROM orders;

----------------------------------------

TITLE: Employee Salary Ranking by Department
DESCRIPTION: Example showing how to rank employees within departments based on salary using rank() with sample data creation and partitioning.

LANGUAGE: sql
CODE:
WITH sample_data AS (
    SELECT *
    FROM (
        VALUES
            ('Alice', 'Sales', 50000),
            ('Bob', 'Marketing', 55000),
            ('Charlie', 'Sales', 52000),
            ('David', 'IT', 60000),
            ('Eve', 'Marketing', 55000),
            ('Frank', 'IT', 62000)
    ) AS t(employee_name, department, salary)
)
SELECT
    employee_name,
    department,
    salary,
    RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS dept_salary_rank
FROM sample_data
ORDER BY department, dept_salary_rank;

----------------------------------------

TITLE: Adding UNIQUE Constraint Using Existing Index in PostgreSQL
DESCRIPTION: Shows how to add a UNIQUE constraint to a table using an existing unique index.

LANGUAGE: sql
CODE:
ALTER TABLE equipment
ADD CONSTRAINT unique_equip_id
UNIQUE USING INDEX equipment_equip_id;

----------------------------------------

TITLE: Using BOOL_OR() Function in HAVING Clause in PostgreSQL
DESCRIPTION: Demonstrates how to use the BOOL_OR() function in a HAVING clause to filter results. This query retrieves only the teams that have at least one active member.

LANGUAGE: sql
CODE:
SELECT
  team_name,
  BOOL_OR(active) active_member_exists
FROM
  members
  INNER JOIN teams USING (team_id)
GROUP BY
  team_name
HAVING
  BOOL_OR(active) = true;

----------------------------------------

TITLE: DELETE JOIN Using Subquery in PostgreSQL
DESCRIPTION: Shows how to use a subquery to emulate a DELETE JOIN operation, which is more compatible with other database systems.

LANGUAGE: sql
CODE:
DELETE FROM member
WHERE phone IN (
    SELECT
      phone
    FROM
      denylist
);

----------------------------------------

TITLE: Using HAVING with SUM Function
DESCRIPTION: Shows how to use the HAVING clause with the SUM function to filter customer payments greater than 200.

LANGUAGE: sql
CODE:
SELECT
  customer_id,
  SUM (amount) amount
FROM
  payment
GROUP BY
  customer_id
HAVING
  SUM (amount) > 200
ORDER BY
  amount DESC;

----------------------------------------

TITLE: Creating Table with Associated Sequence
DESCRIPTION: Shows how to create a table and associate a sequence with one of its columns.

LANGUAGE: sql
CODE:
CREATE TABLE order_details(
    order_id SERIAL,
    item_id INT NOT NULL,
    item_text VARCHAR NOT NULL,
    price DEC(10,2) NOT NULL,
    PRIMARY KEY(order_id, item_id)
);

LANGUAGE: sql
CODE:
CREATE SEQUENCE order_item_id
START 10
INCREMENT 10
MINVALUE 10
OWNED BY order_details.item_id;

----------------------------------------

TITLE: Todo List React Component Implementation
DESCRIPTION: Client-side React component for managing todos with create and toggle functionality.

LANGUAGE: tsx
CODE:
'use client';

import { useState } from 'react';

type Todo = {
  id: number;
  content: string;
  completed: boolean;
};

export default function TodoList({ initialTodos }: { initialTodos: Todo[] }) {
  const [todos, setTodos] = useState<Todo[]>(initialTodos);
  const [newTodo, setNewTodo] = useState('');

  const addTodo = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newTodo.trim()) return;

    const response = await fetch('/api/todos', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ content: newTodo }),
    });

    if (response.ok) {
      const todo = await response.json();
      setTodos([...todos, todo]);
      setNewTodo('');
    }
  };

  const toggleTodo = async (id: number) => {
    const response = await fetch(`/api/todos/${id}`, { method: 'PATCH' });
    if (response.ok) {
      setTodos(
        todos.map((todo) => (todo.id === id ? { ...todo, completed: !todo.completed } : todo))
      );
    }
  };

  return (
    <div className="w-full max-w-md">
      <form onSubmit={addTodo} className="mb-4">
        <input
          type="text"
          value={newTodo}
          onChange={(e) => setNewTodo(e.target.value)}
          placeholder="Add a new todo"
          className="mb-2 w-full rounded border p-2"
        />
        <button type="submit" className="w-full rounded border p-2">
          Add
        </button>
      </form>
      <ul className="space-y-2">
        {todos.map((todo) => (
          <li
            key={todo.id}
            onClick={() => toggleTodo(todo.id)}
            className="flex cursor-pointer items-center space-x-2"
          >
            <input type="checkbox" checked={todo.completed} readOnly className="cursor-pointer" />
            <span className={todo.completed ? 'line-through' : ''}>{todo.content}</span>
          </li>
        ))}
      </ul>
    </div>
  );

----------------------------------------

TITLE: Writing PEST Test for Question Endpoint
DESCRIPTION: PEST test implementation to verify the questions endpoint returns correct data structure and status.

LANGUAGE: php
CODE:
it('can retrieve questions from the database', function () {
   $response = $this->get('/questions');
   $response->assertStatus(200)
           ->assertJsonStructure([
               '*' => ['id', 'title', 'description', 'created_at', 'updated_at']
           ]);
});

----------------------------------------

TITLE: Python Database Connection
DESCRIPTION: Example of connecting to Neon using Python with psycopg2 driver.

LANGUAGE: python
CODE:
# Python example with psycopg2
import os
import psycopg2

# Load the environment variable
database_url = os.getenv('DATABASE_URL')

# Connect to the PostgreSQL database
conn = psycopg2.connect(database_url)

with conn.cursor() as cur:
    cur.execute("SELECT version()")
    print(cur.fetchone())

# Close the connection
conn.close()

----------------------------------------

TITLE: Creating and Querying Employee Ages with Postgres age()
DESCRIPTION: Creates an employees table with birth and hire dates, then demonstrates basic usage of age() function to calculate employee ages

LANGUAGE: sql
CODE:
CREATE TABLE employees (
  id SERIAL PRIMARY KEY,
  name TEXT,
  birth_date DATE,
  hire_date DATE
);

INSERT INTO employees (name, birth_date, hire_date) VALUES
  ('John Doe', '1985-05-15', '2010-03-01'),
  ('Jane Smith', '1990-08-22', '2015-07-10'),
  ('Bob Johnson', '1978-12-03', '2005-11-15');

SELECT
  name,
  birth_date,
  age(birth_date) AS age
FROM employees;

----------------------------------------

TITLE: Analyzing User Registration Patterns with extract() Function
DESCRIPTION: This snippet demonstrates how to use the extract() function for time-based analysis, specifically analyzing user registration patterns by day of week and hour of day.

LANGUAGE: sql
CODE:
CREATE TABLE user_registrations (
  user_id SERIAL PRIMARY KEY,
  username VARCHAR(50),
  registration_time TIMESTAMP WITH TIME ZONE
);

INSERT INTO user_registrations (username, registration_time) VALUES
  ('user1', '2024-03-15 08:30:00+00'),
  ('user2', '2024-03-15 08:45:00+00'),
  ('user3', '2024-03-15 14:20:00+00'),
  ('user4', '2024-03-16 09:15:00+00'),
  ('user5', '2024-03-16 09:30:00+00'),
  ('user6', '2024-03-16 14:30:00+00'),
  ('user7', '2024-03-17 08:45:00+00'),
  ('user8', '2024-03-17 14:10:00+00'),
  ('user9', '2024-03-17 14:25:00+00'),
  ('user10', '2024-03-17 14:50:00+00');

-- Analyze registration patterns by day of week and hour
SELECT
  EXTRACT(ISODOW FROM registration_time) AS day_of_week,
  EXTRACT(HOUR FROM registration_time) AS hour_of_day,
  COUNT(*) AS registration_count
FROM user_registrations
GROUP BY day_of_week, hour_of_day
ORDER BY day_of_week, hour_of_day;

----------------------------------------

TITLE: Creating Department Table with Automated Timestamps
DESCRIPTION: Creates a table with automatically managed created_at and updated_at timestamp columns.

LANGUAGE: sql
CODE:
CREATE TABLE department (
    id SERIAL PRIMARY KEY,
    name VARCHAR NOT NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

----------------------------------------

TITLE: DENSE_RANK with Price Ranking
DESCRIPTION: Shows how to rank products by price across the entire dataset.

LANGUAGE: sql
CODE:
SELECT
	product_id,
	product_name,
	price,
	DENSE_RANK () OVER (
		ORDER BY price DESC
	) price_rank
FROM
	products;

----------------------------------------

TITLE: Creating Table with REAL Data Type in PostgreSQL
DESCRIPTION: Creates a weather data table using REAL data type for wind speed and temperature measurements. The table includes an auto-incrementing ID, location name, wind speed in meters per second, temperature in celsius, and timestamp.

LANGUAGE: sql
CODE:
CREATE TABLE weathers(
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    location VARCHAR(255) NOT NULL,
    wind_speed_mps REAL NOT NULL,
    temperature_celsius REAL NOT NULL,
    recorded_at TIMESTAMP NOT NULL
);

----------------------------------------

TITLE: Enabling hstore Extension in PostgreSQL
DESCRIPTION: SQL command to enable the hstore extension in a PostgreSQL database

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS hstore;

----------------------------------------

TITLE: Creating Interval Values
DESCRIPTION: Demonstrates how to create interval values using different formats in PostgreSQL.

LANGUAGE: SQL
CODE:
interval '2 months ago';
interval '3 hours 20 minutes';

----------------------------------------

TITLE: Creating a CHECK Constraint with array_length() in SQL
DESCRIPTION: Illustrates how to use array_length() in a CHECK constraint to enforce a condition based on the size of an array column. This example ensures that a basketball team's starting lineup always contains exactly five players.

LANGUAGE: sql
CODE:
CREATE TABLE basketball_team (
  team_name TEXT PRIMARY KEY,
  starting_lineup TEXT[],
  CONSTRAINT check_starting_lineup CHECK (array_length(starting_lineup, 1) = 5)
);

----------------------------------------

TITLE: Setting up Python Virtual Environment
DESCRIPTION: Commands to create and activate a Python virtual environment for project isolation

LANGUAGE: bash
CODE:
python3 -m venv env
source env/bin/activate

----------------------------------------

TITLE: GROUP BY with Date Casting
DESCRIPTION: Demonstrates grouping by date values using type casting to aggregate payments by date.

LANGUAGE: sql
CODE:
SELECT
  payment_date::date payment_date,
  SUM(amount) sum
FROM
  payment
GROUP BY
  payment_date::date
ORDER BY
  payment_date DESC;

----------------------------------------

TITLE: Altering Table Structure in Postgres
DESCRIPTION: These SQL commands show how to modify an existing table structure by adding a new column, renaming an existing column, and dropping a column. It demonstrates the flexibility of the ALTER TABLE command in Postgres.

LANGUAGE: sql
CODE:
-- Add a column to the table
ALTER TABLE users ADD COLUMN date_of_birth DATE;

-- Rename a column in the table
ALTER TABLE users RENAME COLUMN email TO user_email;

-- Drop a column from the table
ALTER TABLE users DROP COLUMN date_of_birth;

----------------------------------------

TITLE: jsonb_agg() with GROUP BY
DESCRIPTION: Shows how to use jsonb_agg() with GROUP BY to aggregate employee names by department

LANGUAGE: sql
CODE:
SELECT
  department_name,
  jsonb_agg(employee_name) AS employees
FROM
  employees e
  INNER JOIN departments d ON d.id = e.department_id
GROUP BY
  department_name;

----------------------------------------

TITLE: Using ISO 8601 Interval Format
DESCRIPTION: Demonstrates how to write interval values using the ISO 8601 format in PostgreSQL.

LANGUAGE: SQL
CODE:
P6Y5M4DT3H2M1S

----------------------------------------

TITLE: Basic SQL Table Creation Statement
DESCRIPTION: Example of constructing a basic CREATE TABLE SQL statement in C#

LANGUAGE: sql
CODE:
var sql = "CREATE TABLE  ...";

----------------------------------------

TITLE: Inserting and Querying Data with NOW() Default
DESCRIPTION: Shows how to insert data into a table with a NOW() default value and then query the inserted data.

LANGUAGE: sql
CODE:
INSERT INTO posts (title)
VALUES     ('PostgreSQL NOW function');

SELECT * FROM posts;

----------------------------------------

TITLE: Using dense_rank() Function in PostgreSQL
DESCRIPTION: This example shows how to use the dense_rank() function to assign ranks to students based on their scores in descending order.

LANGUAGE: sql
CODE:
SELECT
   student_id,
   student_name,
   score,
   dense_rank() OVER (ORDER BY score DESC) AS rank
FROM
   student_scores;

----------------------------------------

TITLE: Creating a Linux/macOS Shell Script for PostgreSQL Backup
DESCRIPTION: This shell script automates the process of backing up a PostgreSQL database on Linux or macOS, including date and timestamp in the filename.

LANGUAGE: Bash
CODE:
#!/bin/bash

# Set variables for database connection
PGUSER=your_username
PGDATABASE=your_database_name

# Set the path where you want to store the backup files
BACKUP_DIR=/path/to/backup/directory

# Get current date and time
datestamp=$(date +'%Y-%m-%d')
timestamp=$(date +'%H%M')

# Execute pg_dump command to dump the database
pg_dump -U "$PGUSER" -d "$PGDATABASE" > "$BACKUP_DIR/$PGDATABASE"_"$datestamp"_"$timestamp".sql

----------------------------------------

TITLE: Subscribing to Regional Status Feeds
DESCRIPTION: RSS feed URLs for monitoring Neon's operational status across different AWS regions.

LANGUAGE: bash
CODE:
https://neonstatus.com/aws-us-east-n-virginia/feed.rss

LANGUAGE: bash
CODE:
https://neonstatus.com/aws-us-east-ohio/feed.rss

LANGUAGE: bash
CODE:
https://neonstatus.com/aws-us-west-oregon/feed.rss

LANGUAGE: bash
CODE:
https://neonstatus.com/aws-europe-frankfurt/feed.rss

LANGUAGE: bash
CODE:
https://neonstatus.com/aws-asia-pacific-singapore/feed.rss

LANGUAGE: bash
CODE:
https://neonstatus.com/aws-asia-pacific-sydney/feed.rss

----------------------------------------

TITLE: Complex Product Information Concatenation
DESCRIPTION: Shows how to combine multiple columns with conditional logic using concat() and CASE statements.

LANGUAGE: sql
CODE:
WITH products AS (
  SELECT 'Laptop' AS name, 'A' AS variant, 100 AS price
  UNION ALL
  SELECT 'Kindle' AS name, NULL AS variant, 200 AS price
  UNION ALL
  SELECT 'Table' AS name, 'C' AS variant, 300 AS price
)
SELECT concat(name, CASE WHEN variant IS NOT NULL THEN ' - Variant ' ELSE '' END, variant, ' ($', price, ')') AS product_info
FROM products;

----------------------------------------

TITLE: Verifying Migration Data
DESCRIPTION: SQL query to verify the migrated data in Neon Postgres database.

LANGUAGE: sql
CODE:
SELECT productname, unitprice, unitsinstock
FROM dbo.products
WHERE discontinued = false
ORDER BY unitprice DESC
LIMIT 5;

----------------------------------------

TITLE: PostgreSQL REINDEX Table
DESCRIPTION: Command to rebuild all indexes on a specific table.

LANGUAGE: sql
CODE:
REINDEX TABLE table_name;

----------------------------------------

TITLE: Implementing Streaming Chat Completions with LlamaIndex
DESCRIPTION: Creates an API endpoint that handles streaming chat completions using LlamaIndex and OpenAI. Processes user messages, retrieves relevant context, and streams responses back to the client.

LANGUAGE: typescript
CODE:
import vectorStore from './vectorStore';

import { ContextChatEngine, VectorStoreIndex } from 'llamaindex';

interface Message {
  role: 'user' | 'assistant' | 'system' | 'memory';
  content: string;
}

export async function POST(request: Request) {
  const encoder = new TextEncoder();
  const { messages = [] } = (await request.json()) as { messages: Message[] };
  const userMessages = messages.filter((i) => i.role === 'user');
  const query = userMessages[userMessages.length - 1].content;
  const index = await VectorStoreIndex.fromVectorStore(vectorStore);
  const retriever = index.asRetriever();
  const chatEngine = new ContextChatEngine({ retriever });
  const customReadable = new ReadableStream({
    async start(controller) {
      const stream = await chatEngine.chat({ message: query, chatHistory: messages, stream: true });
      for await (const chunk of stream) {
        controller.enqueue(encoder.encode(chunk.response));
      }
      controller.close();
    },
  });
  return new Response(customReadable, {
    headers: {
      Connection: 'keep-alive',
      'Content-Encoding': 'none',
      'Cache-Control': 'no-cache, no-transform',
      'Content-Type': 'text/plain; charset=utf-8',
    },
  });
}

----------------------------------------

TITLE: Joining Tables using jsonb_extract_path() in PostgreSQL
DESCRIPTION: This SQL query demonstrates how to use jsonb_extract_path() in a JOIN operation to connect the 'employees' and 'departments' tables based on department information stored in a JSONB column.

LANGUAGE: sql
CODE:
SELECT
    employees.employee_name,
    departments.department_name
FROM
    employees
JOIN
    departments ON TRIM(BOTH '"' FROM jsonb_extract_path(employees.details, 'department')::TEXT) = departments.department_name;

----------------------------------------

TITLE: Adding Data Migration
DESCRIPTION: SQL migration script to insert initial data into the person table

LANGUAGE: bash
CODE:
insert into person (ID, NAME) values (1, 'Alex');
insert into person (ID, NAME) values (2, 'Mr. Lopez');
insert into person (ID, NAME) values (3, 'Ms. Smith');

----------------------------------------

TITLE: Creating BEFORE UPDATE Trigger
DESCRIPTION: SQL syntax for creating a BEFORE UPDATE trigger that executes a specified function. The trigger can be configured to run for each row or statement.

LANGUAGE: sql
CODE:
CREATE TRIGGER trigger_name
BEFORE UPDATE
ON table_name
FOR EACH {ROW | STATEMENT}
EXECUTE FUNCTION trigger_function();

----------------------------------------

TITLE: Querying User-Defined Triggers Using pg_trigger View in PostgreSQL
DESCRIPTION: This SQL query retrieves all user-defined triggers of the 'employees' table from the pg_trigger system view.

LANGUAGE: sql
CODE:
SELECT
  tgname AS trigger_name
FROM
  pg_trigger
WHERE
  tgrelid = 'employees' :: regclass
  AND tgisinternal = false
ORDER BY
  trigger_name;

----------------------------------------

TITLE: Configuring Neon Database URL in Symfony Environment File
DESCRIPTION: This snippet shows how to set the DATABASE_URL environment variable in the .env file of a Symfony project to connect to a Neon PostgreSQL database. It includes placeholders for user credentials, hostname, and database name, and specifies UTF-8 encoding and SSL mode.

LANGUAGE: shell
CODE:
DATABASE_URL="postgresql://[user]:[password]@[neon_hostname]/[dbname]?charset=utf8&sslmode=require"

----------------------------------------

TITLE: Inserting Multiple Rows in PostgreSQL
DESCRIPTION: This snippet demonstrates the basic syntax for inserting multiple rows into a table using a single INSERT statement in PostgreSQL.

LANGUAGE: sql
CODE:
INSERT INTO table_name (column_list)
VALUES
    (value_list_1),
    (value_list_2),
    ...
    (value_list_n);

----------------------------------------

TITLE: Setting Up Node.js Project with Express and Prisma
DESCRIPTION: Commands to create a new Node.js project, initialize npm, install dependencies (Express and Prisma), and set up the project structure.

LANGUAGE: bash
CODE:
mkdir neon-prisma-guide && cd neon-prisma-guide
npm init -y && touch .env index.js
npm pkg set type="module" && npm pkg set scripts.start="node index.js"
npm install express
npm install @prisma/client && npm install prisma --save-dev
npx prisma init

----------------------------------------

TITLE: Exposing Public Key via JWKS Endpoint in TypeScript
DESCRIPTION: This code sets up a JWKS (JSON Web Key Set) endpoint using a Cloudflare Worker to serve the public key for JWT verification. It loads the public key from an environment variable and serves it at the /.well-known/jwks.json path.

LANGUAGE: typescript
CODE:
app.get('/.well-known/jwks.json', async (c) => {
  const publicKeyJwk = JSON.parse(c.env.PUBLIC_KEY);
  const jwks = { keys: [publicKeyJwk] };
  return c.json(jwks);
});

----------------------------------------

TITLE: Simple GROUP BY Without Aggregates
DESCRIPTION: Shows how to use GROUP BY to get distinct customer IDs from the payment table, similar to DISTINCT operation.

LANGUAGE: sql
CODE:
SELECT
  customer_id
FROM
  payment
GROUP BY
  customer_id
ORDER BY
  customer_id;

----------------------------------------

TITLE: PostgreSQL Process Activity Query
DESCRIPTION: Query to list all active processes with their details including process ID, username, client address, application name, state, query, and duration.

LANGUAGE: sql
CODE:
SELECT pid, usename, client_addr, application_name, state, query, now() - query_start AS duration
FROM pg_stat_activity
WHERE state <> 'idle'
ORDER BY duration DESC;

----------------------------------------

TITLE: PostgreSQL LIMIT for Top N Rows
DESCRIPTION: Example showing how to use LIMIT to get the top 10 most expensive films by rental rate

LANGUAGE: sql
CODE:
SELECT
  film_id,
  title,
  rental_rate
FROM
  film
ORDER BY
  rental_rate DESC
LIMIT
  10;

----------------------------------------

TITLE: Creating and Populating Product Segment Table
DESCRIPTION: Creates a new table called product_segment to store product segments and their associated discounts, then inserts sample data into it.

LANGUAGE: sql
CODE:
CREATE TABLE product_segment (
    id SERIAL PRIMARY KEY,
    segment VARCHAR NOT NULL,
    discount NUMERIC (4, 2)
);


INSERT INTO
    product_segment (segment, discount)
VALUES
    ('Grand Luxury', 0.05),
    ('Luxury', 0.06),
    ('Mass', 0.1);

----------------------------------------

TITLE: Handling Partial JSONB Data with jsonb_to_record()
DESCRIPTION: Demonstrates how jsonb_to_record() handles JSONB objects with missing keys, producing NULL values for unmatched columns.

LANGUAGE: sql
CODE:
INSERT INTO employees
SELECT *
FROM jsonb_to_record('{
  "id": "124",
  "name": "Jane Smith"
}') AS x(id INT, name TEXT, department TEXT, salary NUMERIC)
RETURNING *;

----------------------------------------

TITLE: Viewing Replication Slots in PostgreSQL
DESCRIPTION: This query shows information about the current replication slots on the publisher, including their size, using the pg_replication_slots view.

LANGUAGE: sql
CODE:
SELECT * FROM pg_replication_slots;

----------------------------------------

TITLE: Alternative Table-Level UNIQUE Constraint Definition in PostgreSQL
DESCRIPTION: Shows an alternative syntax for defining a UNIQUE constraint at the table level rather than the column level.

LANGUAGE: sql
CODE:
CREATE TABLE person (
  id SERIAL PRIMARY KEY,
  first_name VARCHAR (50),
  last_name VARCHAR (50),
  email VARCHAR (50),
  UNIQUE(email)
);

----------------------------------------

TITLE: Creating and Populating Inventory Table
DESCRIPTION: Creates an inventory table with basic product information and populates it with initial data.

LANGUAGE: sql
CODE:
CREATE TABLE inventory(
   id INT PRIMARY KEY,
   name VARCHAR(255) NOT NULL,
   price DECIMAL(10,2) NOT NULL,
   quantity INT NOT NULL
);

INSERT INTO inventory(id, name, price, quantity)
VALUES
	(1, 'A', 15.99, 100),
	(2, 'B', 25.49, 50),
	(3, 'C', 19.95, 75)
RETURNING *;

----------------------------------------

TITLE: Configuring Azure Functions Environment Variables
DESCRIPTION: Example of setting up environment variables in the local.settings.json file for Azure Functions, including the database connection string.

LANGUAGE: json
CODE:
{
  "IsEncrypted": false,
  "Values": {
    "AzureWebJobsStorage": "",
    "FUNCTIONS_WORKER_RUNTIME": "node",
    "DATABASE_URL": "postgresql://neondb_owner:************@ep-quiet-leaf-a85k5wbg.eastus2.azure.neon.tech/neondb?sslmode=require"
  }
}

----------------------------------------

TITLE: Basic DROP TABLE Syntax
DESCRIPTION: Shows the basic syntax for dropping tables in PostgreSQL with optional IF EXISTS and CASCADE/RESTRICT clauses.

LANGUAGE: sql
CODE:
DROP TABLE [IF EXISTS] table_name
[CASCADE | RESTRICT];

----------------------------------------

TITLE: Using jsonb_each() as a Table Source in PostgreSQL
DESCRIPTION: Demonstrates how to use jsonb_each() as a table source in a FROM clause, joining its output with other tables for complex data operations.

LANGUAGE: sql
CODE:
CREATE TABLE user_data (
    id INT,
    profile JSON
);
INSERT INTO user_data (id, profile)
VALUES
    (123, '{"username": "johndoe", "age": 30, "email": "johndoe@example.com"}'),
    (140, '{"username": "mikesmith", "age": 40, "email": "mikesmith@example.com"}');

SELECT id, key, value
FROM user_data, jsonb_each(user_data.profile);

----------------------------------------

TITLE: Film Statistics using OUT Parameters
DESCRIPTION: Function using multiple OUT parameters to return film length statistics (minimum, maximum, and average length) from the film table in a single call.

LANGUAGE: plpgsql
CODE:
create or replace function get_film_stat(
    out min_len int,
    out max_len int,
    out avg_len numeric)
language plpgsql
as $$
begin

  select min(length),
         max(length),
		 avg(length)::numeric(5,1)
  into min_len, max_len, avg_len
  from film;

end;$$

----------------------------------------

TITLE: Creating and Populating Sample Tables
DESCRIPTION: Creates two sample tables 'top_rated_films' and 'most_popular_films' with movie data to demonstrate UNION operations.

LANGUAGE: sql
CODE:
CREATE TABLE top_rated_films(
  title VARCHAR NOT NULL,
  release_year SMALLINT
);

CREATE TABLE most_popular_films(
  title VARCHAR NOT NULL,
  release_year SMALLINT
);

INSERT INTO top_rated_films(title, release_year)
VALUES
   ('The Shawshank Redemption', 1994),
   ('The Godfather', 1972),
   ('The Dark Knight', 2008),
   ('12 Angry Men', 1957);

INSERT INTO most_popular_films(title, release_year)
VALUES
  ('An American Pickle', 2020),
  ('The Godfather', 1972),
  ('The Dark Knight', 2008),
  ('Greyhound', 2020);

----------------------------------------

TITLE: Getting Current Date and Time Without Timezone
DESCRIPTION: Demonstrates how to cast the result of NOW() to a timestamp without timezone.

LANGUAGE: sql
CODE:
SELECT NOW()::timestamp;

----------------------------------------

TITLE: Generating Version 4 Random UUIDs
DESCRIPTION: Function for generating completely random Version 4 UUIDs, commonly used for unique identifiers.

LANGUAGE: sql
CODE:
SELECT uuid_generate_v4();

----------------------------------------

TITLE: Using lower() for Case-Insensitive Unique Constraint
DESCRIPTION: Shows how to create a table with a unique index using the lower() function to enforce case-insensitive uniqueness on organization names.

LANGUAGE: sql
CODE:
CREATE TABLE organizations (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL
);

CREATE UNIQUE INDEX idx_organizations_name_lower ON organizations (lower(name));

INSERT INTO organizations (name) VALUES ('Acme Corp');
INSERT INTO organizations (name) VALUES ('Bailey Inc.');

----------------------------------------

TITLE: Creating Building Data Table for SFCGAL Analysis
DESCRIPTION: SQL commands to create and populate a table with building data, including footprints and heights, for analysis using SFCGAL functions.

LANGUAGE: SQL
CODE:
CREATE TABLE buildings (
    id SERIAL PRIMARY KEY,
    name TEXT,
    height FLOAT,
    footprint GEOMETRY(POLYGON, 4326)
);

INSERT INTO buildings (name, height, footprint) VALUES
    ('Office Tower', 100, ST_GeomFromText('POLYGON((0 0, 0 50, 30 50, 30 0, 0 0))', 4326)),
    ('Shopping Mall', 20, ST_GeomFromText('POLYGON((100 0, 100 80, 150 80, 150 0, 100 0))', 4326)),
    ('Residential Block', 45, ST_GeomFromText('POLYGON((200 0, 200 40, 240 40, 240 0, 200 0))', 4326));

----------------------------------------

TITLE: NTILE Function Over Complete Result Set
DESCRIPTION: Example showing how to use NTILE() to divide rows into 3 buckets based on amount for a specific year (2019).

LANGUAGE: sql
CODE:
SELECT
	name,
	amount,
	NTILE(3) OVER(
		ORDER BY amount
	)
FROM
	sales_stats
WHERE
	year = 2019;

----------------------------------------

TITLE: Using date_trunc() with Timezones
DESCRIPTION: This query shows how date_trunc() behaves differently when truncating to the day in different timezones.

LANGUAGE: sql
CODE:
SELECT
  date_trunc('day', '2024-03-15 23:30:00+00'::TIMESTAMP WITH TIME ZONE) AS utc_trunc,
  date_trunc('day', '2024-03-15 23:30:00+00'::TIMESTAMP WITH TIME ZONE, 'America/New_York') AS ny_trunc,
  date_trunc('day', '2024-03-15 23:30:00+00'::TIMESTAMP WITH TIME ZONE, 'Asia/Tokyo') AS tokyo_trunc;

----------------------------------------

TITLE: Database Environment Configuration
DESCRIPTION: Environment variable setup for database connection in .env file.

LANGUAGE: bash
CODE:
DATABASE_URL=NEON_POSTGRES_CONNECTION_STRING

----------------------------------------

TITLE: Using lead() with Multiple Partitions in PostgreSQL
DESCRIPTION: Demonstrates how to use lead() with multiple partitions to perform calculations within different groups of rows simultaneously.

LANGUAGE: sql
CODE:
WITH readings AS (
  SELECT 1 AS device_id, date '2023-01-01' AS reading_date, 25.5 AS temperature
  UNION ALL
  SELECT 1 AS device_id, date '2023-01-02' AS reading_date, 26.0 AS temperature
  UNION ALL
  SELECT 2 AS device_id, date '2023-01-01' AS reading_date, 22.1 AS temperature
  UNION ALL
  SELECT 1 AS device_id, date '2023-01-03' AS reading_date, 25.8 AS temperature
  UNION ALL
  SELECT 2 AS device_id, date '2023-01-02' AS reading_date, 21.9 AS temperature
)
SELECT
  device_id,
  reading_date,
  temperature,
  lead(temperature) OVER (PARTITION BY device_id ORDER BY reading_date) AS next_temperature,
  lead(temperature) OVER (PARTITION BY device_id ORDER BY reading_date) - temperature AS temperature_change
FROM readings;

----------------------------------------

TITLE: Defining PostgreSQL CEIL() Function Syntax
DESCRIPTION: Illustrates the basic syntax of the CEIL() function in PostgreSQL.

LANGUAGE: css
CODE:
CEIL(numeric_expression)

----------------------------------------

TITLE: Including Soft-Deleted Records in Laravel Query
DESCRIPTION: This code demonstrates how to include soft-deleted records in a Laravel Eloquent query.

LANGUAGE: php
CODE:
$allPosts = Post::withTrashed()->get();

----------------------------------------

TITLE: Converting Numeric Values to JSON using json_scalar() in SQL
DESCRIPTION: Demonstrates how to use json_scalar() to convert integer and floating-point numbers to JSON format.

LANGUAGE: sql
CODE:
-- Convert integer
SELECT json_scalar(42);

-- Convert floating-point number
SELECT json_scalar(123.45);

----------------------------------------

TITLE: Using PostgreSQL OR Operator with Boolean Values
DESCRIPTION: These snippets demonstrate the OR operator with various combinations of true, false, and null values.

LANGUAGE: sql
CODE:
SELECT true OR true AS result;

LANGUAGE: sql
CODE:
SELECT true OR false AS result;

LANGUAGE: sql
CODE:
SELECT true OR null AS result;

LANGUAGE: sql
CODE:
SELECT false OR false AS result;

LANGUAGE: sql
CODE:
SELECT false OR null AS result;

LANGUAGE: sql
CODE:
SELECT null OR null AS result;

----------------------------------------

TITLE: Installing Neon CLI via npm
DESCRIPTION: Command to install the Neon CLI globally using npm package manager. This allows developers to manage Neon resources from the terminal.

LANGUAGE: bash
CODE:
npm i -g neonctl

----------------------------------------

TITLE: Basic Table Alias Example in PostgreSQL
DESCRIPTION: Demonstrates using a table alias to retrieve film titles from the film table. The table is aliased as 'f' for shorter column qualification.

LANGUAGE: sql
CODE:
SELECT f.title
FROM film AS f
ORDER BY f.title
LIMIT 5;

----------------------------------------

TITLE: Verifying Data Migration with SQL Queries
DESCRIPTION: Sample SQL queries to verify the successful migration of data from Render to Neon. These queries check the integrity of the migrated data by examining specific tables and relationships.

LANGUAGE: sql
CODE:
SELECT * FROM lego_inventory_parts ORDER BY quantity DESC LIMIT 5;
SELECT parent_id, COUNT(name) FROM lego_themes GROUP BY parent_id;

----------------------------------------

TITLE: ROLLUP for Hierarchical Date Aggregation
DESCRIPTION: Uses ROLLUP to aggregate rental data by year, month, and day, demonstrating hierarchical date-based grouping.

LANGUAGE: sql
CODE:
SELECT
    EXTRACT (YEAR FROM rental_date) y,
    EXTRACT (MONTH FROM rental_date) M,
    EXTRACT (DAY FROM rental_date) d,
    COUNT (rental_id)
FROM
    rental
GROUP BY
    ROLLUP (
        EXTRACT (YEAR FROM rental_date),
        EXTRACT (MONTH FROM rental_date),
        EXTRACT (DAY FROM rental_date)
    );

----------------------------------------

TITLE: Checking Data Size in Postgres
DESCRIPTION: This SQL query demonstrates how to check the logical data size for a branch in a Postgres database.

LANGUAGE: sql
CODE:
SELECT pg_size_pretty(sum(pg_database_size(datname)))
FROM pg_database;

----------------------------------------

TITLE: Transaction Function Usage
DESCRIPTION: Example of executing multiple queries in a single transaction

LANGUAGE: javascript
CODE:
const [posts, tags] = await sql.transaction(
  [sql`SELECT * FROM posts ORDER BY posted_at DESC LIMIT ${showLatestN}`, sql`SELECT * FROM tags`],
  {
    isolationLevel: 'RepeatableRead',
    readOnly: true
  }
);

----------------------------------------

TITLE: JSON_VALUE Variable Usage with PASSING
DESCRIPTION: Example of using variables in JSON path expressions with the PASSING clause.

LANGUAGE: sql
CODE:
-- Extract array element using variable
SELECT JSON_VALUE(
    '[1, 2, 3, 4, 5]',
    'strict $[$index]'
    PASSING 2 AS index
);

LANGUAGE: text
CODE:
# | json_value
-------------
1 | 3

----------------------------------------

TITLE: Setting Up Airbyte Entities in Snowflake
DESCRIPTION: SQL script to create necessary Snowflake entities (role, user, warehouse, database, schema) for Airbyte integration.

LANGUAGE: sql
CODE:
-- set variables (these need to be uppercase)
set airbyte_role = 'AIRBYTE_ROLE';
set airbyte_username = 'AIRBYTE_USER';
set airbyte_warehouse = 'AIRBYTE_WAREHOUSE';
set airbyte_database = 'AIRBYTE_DATABASE';
set airbyte_schema = 'AIRBYTE_SCHEMA';

-- set user password
set airbyte_password = 'password';

begin;

-- create Airbyte role
use role securityadmin;
create role if not exists identifier($airbyte_role);
grant role identifier($airbyte_role) to role SYSADMIN;

-- create Airbyte user
create user if not exists identifier($airbyte_username)
password = $airbyte_password
default_role = $airbyte_role
default_warehouse = $airbyte_warehouse;

grant role identifier($airbyte_role) to user identifier($airbyte_username);

-- change role to sysadmin for warehouse / database steps
use role sysadmin;

-- create Airbyte warehouse
create warehouse if not exists identifier($airbyte_warehouse)
warehouse_size = xsmall
warehouse_type = standard
auto_suspend = 60
auto_resume = true
initially_suspended = true;

-- create Airbyte database
create database if not exists identifier($airbyte_database);

-- grant Airbyte warehouse access
grant USAGE
on warehouse identifier($airbyte_warehouse)
to role identifier($airbyte_role);

-- grant Airbyte database access
grant OWNERSHIP
on database identifier($airbyte_database)
to role identifier($airbyte_role);

commit;

begin;

USE DATABASE identifier($airbyte_database);

-- create schema for Airbyte data
CREATE SCHEMA IF NOT EXISTS identifier($airbyte_schema);

commit;

begin;

-- grant Airbyte schema access
grant OWNERSHIP
on schema identifier($airbyte_schema)
to role identifier($airbyte_role);

commit;

----------------------------------------

TITLE: Setting Up Authentication Routes
DESCRIPTION: Defines API routes for user registration, login, and logout in routes/api.php.

LANGUAGE: php
CODE:
<?php

use App\Http\Controllers\Api\AuthController;
use Illuminate\Support\Facades\Route;

Route::post('/register', [AuthController::class, 'register']);
Route::post('/login', [AuthController::class, 'login']);

Route::middleware('auth:sanctum')->group(function () {
    Route::post('/logout', [AuthController::class, 'logout']);
    // We'll add our task routes here later
});

----------------------------------------

TITLE: Identifying Stuck Tasks in Postgres Queue
DESCRIPTION: This SQL query identifies tasks that have been in progress for more than 5 minutes, which may indicate stuck or hanging tasks in the queue system.

LANGUAGE: sql
CODE:
SELECT *
FROM tasks
WHERE status = 'in_progress'
  AND started_at < NOW() - INTERVAL '5 minutes';

----------------------------------------

TITLE: Calculating Employment Duration with age()
DESCRIPTION: Demonstrates using age() function with two timestamps to calculate how long employees have been with the company

LANGUAGE: sql
CODE:
SELECT
  name,
  hire_date,
  age(CURRENT_DATE, hire_date) AS employment_duration
FROM employees;

----------------------------------------

TITLE: Recursive Query for Finding GCD of Multiple Numbers
DESCRIPTION: Uses a recursive CTE to calculate the GCD of all numbers in the 'value' column of the 'numbers' table.

LANGUAGE: sql
CODE:
WITH RECURSIVE gcd_calculation AS (
    SELECT id, value AS gcd_value
    FROM numbers
    WHERE id = (SELECT MIN(id) FROM numbers)

    UNION ALL

    SELECT gcd(gcd_value, value) AS gcd_value, numbers.id
    FROM gcd_calculation, numbers
    WHERE numbers.id = (
        SELECT id
        FROM numbers
        WHERE id > gcd_calculation.id
        ORDER BY id
        LIMIT 1
    )
)
SELECT gcd_value AS greatest_common_divisor
FROM gcd_calculation
ORDER BY id DESC
LIMIT 1;

----------------------------------------

TITLE: Substring Matching with pg_trgm
DESCRIPTION: This SQL query demonstrates substring matching capabilities of pg_trgm using word_similarity and strict_word_similarity functions.

LANGUAGE: sql
CODE:
SELECT
    word_similarity('apple', 'green apples'),
    strict_word_similarity('apple', 'green apples');

----------------------------------------

TITLE: Variable Assignment with String Manipulation
DESCRIPTION: Demonstrates assigning a value to a variable using string manipulation function split_part().

LANGUAGE: plpgsql
CODE:
do $$
declare
	first_name VARCHAR(50);
begin
	first_name = split_part('John Doe',' ', 1);
	raise notice 'The first name is %', first_name;
end;
$$;

----------------------------------------

TITLE: PostgreSQL AVG Function Example
DESCRIPTION: Calculates the average replacement cost of films using the AVG() function with ROUND for formatting.

LANGUAGE: sql
CODE:
SELECT
  ROUND(AVG(replacement_cost), 2) avg_replacement_cost
FROM
  film;

----------------------------------------

TITLE: Dockerizing Astro Application
DESCRIPTION: Defines a Dockerfile for building and running the Astro application in a Docker container. It sets up the Node.js environment, installs dependencies, builds the app, and configures the runtime.

LANGUAGE: dockerfile
CODE:
ARG NODE_VERSION=20.11.0
FROM node:${NODE_VERSION}-slim as base

WORKDIR /app

# Set production environment
ENV NODE_ENV="production"

# Throw-away build stage to reduce size of final image
FROM base as build

# Install packages needed to build node modules
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential node-gyp pkg-config python-is-python3

# Install node modules
COPY --link package-lock.json package.json ./
RUN npm install

# Copy application code
COPY --link . .

# Build application
RUN npm run build

# Final stage for app image
FROM base

# Copy built application
COPY --from=build /app/node_modules /app/node_modules
COPY --from=build /app/dist /app/dist

ENV PORT=80
ENV HOST=0.0.0.0

# Start the server by default, this can be overwritten at runtime
EXPOSE 80
CMD [ "node", "./dist/server/entry.mjs" ]

----------------------------------------

TITLE: Creating Employees Table in SQL
DESCRIPTION: Creates a table named 'employees' with columns for id, name, department, and salary to store employee information.

LANGUAGE: sql
CODE:
CREATE TABLE employees (
    id INT,
    name TEXT,
    department TEXT,
    salary NUMERIC
);

----------------------------------------

TITLE: Flyway Configuration
DESCRIPTION: Configuration settings for connecting Flyway to Neon database

LANGUAGE: bash
CODE:
flyway.url=jdbc:postgresql://ep-cool-darkness-123456.us-east-2.aws.neon.tech:5432/neondb

flyway.user=alex

flyway.password=AbC123dEf

flyway.locations=filesystem:/home/alex/flyway-x.y.z/sql

----------------------------------------

TITLE: Configuring FastAPI Application with CORS and Database Lifecycle
DESCRIPTION: Sets up the FastAPI application with CORS middleware, initializes the database connection, and includes the API routes.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
from database.postgres import init_postgres, close_postgres
from routes.routes import router
import dotenv
import uvicorn

@asynccontextmanager
async def lifespan(app: FastAPI):
    dotenv.load_dotenv()
    await init_postgres()
    yield
    await close_postgres()

app: FastAPI = FastAPI(lifespan=lifespan, title="FastAPI Portfolio RAG ChatBot API")
app.include_router(router)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


----------------------------------------

TITLE: Updating Alembic Configuration
DESCRIPTION: Python code to update the Alembic configuration in env.py. This sets up the target metadata and loads the database URL from the environment.

LANGUAGE: python
CODE:
# alembic/env.py

from app.models import Base

target_metadata = Base.metadata

import dotenv
import os

dotenv.load_dotenv()

config.set_main_option('sqlalchemy.url', os.getenv('DATABASE_URL', ""))

----------------------------------------

TITLE: Inserting a String with a Single Quote
DESCRIPTION: Shows how to insert a string containing a single quote by escaping it with an additional single quote.

LANGUAGE: sql
CODE:
INSERT INTO links (url, name)
VALUES('http://www.oreilly.com','O''Reilly Media');

----------------------------------------

TITLE: Creating Neon Auth Integration with Stack Auth
DESCRIPTION: This snippet demonstrates how to create a Neon-managed authentication project for your database using the Stack Auth integration. It requires the project ID, branch ID, database name, and role name.

LANGUAGE: bash
CODE:
curl --request POST \
     --url 'https://console.neon.tech/api/v2/projects/auth/create' \
     --header 'authorization: Bearer $NEON_API_KEY' \
     --header 'content-type: application/json' \
     --data '{
       "auth_provider": "stack",
       "project_id": "project-id",
       "branch_id": "br-example-123",
       "database_name": "neondb",
       "role_name": "neondb_owner"
     }' | jq

----------------------------------------

TITLE: Using @? Operator with JSON Path in PostgreSQL
DESCRIPTION: This example demonstrates the use of the @? operator to retrieve products whose prices are greater than 999 using a JSON path expression.

LANGUAGE: sql
CODE:
SELECT
  data ->> 'name' product_name
FROM
  products
WHERE
  data @? '$.price ? (@ > 999)';

----------------------------------------

TITLE: Granting Permissions for Existing Tables in Neon RLS
DESCRIPTION: SQL commands to grant SELECT, UPDATE, INSERT, and DELETE permissions on all existing tables in the public schema to both authenticated and anonymous roles.

LANGUAGE: sql
CODE:
GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
IN SCHEMA public
TO authenticated;

GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
IN SCHEMA public
TO anonymous;

----------------------------------------

TITLE: Complex JSON Generation with array_to_json and array_agg
DESCRIPTION: Shows how to combine array_to_json with array_agg and row_to_json to create a structured JSON output from multiple rows.

LANGUAGE: sql
CODE:
SELECT array_to_json(
 array_agg(row_to_json(t))
) AS items
FROM (
     SELECT product_id, quantity FROM cart_items WHERE user_id = 1
   ) t;

----------------------------------------

TITLE: Implementing Add Task Command in Laravel Zero
DESCRIPTION: PHP code for the AddTaskCommand class, defining the command signature and functionality to add a new task.

LANGUAGE: php
CODE:
<?php

namespace App\Commands;

use App\Task;
use Carbon\Carbon;
use LaravelZero\Framework\Commands\Command;

class AddTaskCommand extends Command
{
    protected $signature = 'task:add {title} {--description=} {--priority=medium} {--due-date=}';
    protected $description = 'Add a new task';

    public function handle()
    {
        $task = Task::create([
            'title' => $this->argument('title'),
            'description' => $this->option('description'),
            'priority' => $this->option('priority'),
            'due_date' => $this->option('due-date') ? Carbon::parse($this->option('due-date')) : null,
        ]);

        $this->info("Task added successfully! ID: {$task->id}");
    }
}

----------------------------------------

TITLE: Soft Deleting a Record in Laravel
DESCRIPTION: This code demonstrates how to soft delete a record using Laravel's Eloquent ORM.

LANGUAGE: php
CODE:
$post = Post::find(1);
$post->delete();

----------------------------------------

TITLE: Creating the AFTER UPDATE Trigger
DESCRIPTION: SQL syntax for creating an AFTER UPDATE trigger that links to a trigger function and specifies execution scope (ROW or STATEMENT level).

LANGUAGE: sql
CODE:
CREATE TRIGGER trigger_name
AFTER UPDATE
ON table_name
FOR EACH {ROW | STATEMENT}
EXECUTE FUNCTION trigger_function();

----------------------------------------

TITLE: Inserting Data into Table with JSONB Column in PostgreSQL
DESCRIPTION: Inserts sample data into the 'employees' table, including JSON arrays of skills for each employee.

LANGUAGE: SQL
CODE:
INSERT INTO employees (name, skills)
VALUES
('John Doe', '["Java", "Python", "SQL"]'),
('Jane Smith', '["C++", "JavaScript", "HTML/CSS"]'),
('Alice Johnson', '["Python", "Data Analysis", "Machine Learning"]'),
('Bob Brown', '["Java", "SQL", "Spring Framework"]');

----------------------------------------

TITLE: Using dense_rank() with AVG Aggregation in PostgreSQL
DESCRIPTION: This example shows how to combine dense_rank() with the AVG function to rank classes based on their average scores.

LANGUAGE: sql
CODE:
SELECT class_id, dense_rank() OVER (ORDER BY AVG(score) DESC) AS average_score_rank, AVG(score) AS average_score
FROM student_scores_by_class
GROUP BY class_id;

----------------------------------------

TITLE: WebSocket Connection Setup
DESCRIPTION: Shows how to configure WebSocket connection for transaction support using Neon's serverless driver.

LANGUAGE: diff
CODE:
import { db } from '@vercel/postgres'; // [!code --]

import ws from 'ws'; // [!code ++]
import { Pool, neonConfig } from '@neondatabase/serverless'; // [!code ++]

const pool = new Pool({ connectionString: process.env.DATABASE_URL }); // [!code ++]
neonConfig.webSocketConstructor = ws; // [!code ++]

----------------------------------------

TITLE: Creating Road Network Table for pgrouting
DESCRIPTION: SQL commands to create and populate a table representing a road network for use with pgrouting. This example sets up a simplified road network with 6 segments connecting 5 intersections.

LANGUAGE: SQL
CODE:
DROP TABLE IF EXISTS road_network;
CREATE TABLE road_network (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    source INTEGER,
    target INTEGER,
    cost FLOAT,
    reverse_cost FLOAT,
    geom GEOMETRY(LINESTRING, 4326)
);

INSERT INTO road_network (name, source, target, cost, reverse_cost, geom) VALUES
    ('Main St', 1, 2, 0.5, 0.5, ST_GeomFromText('LINESTRING(-73.98 40.75, -73.97 40.75)', 4326)),
    ('Broadway', 2, 3, 0.8, 0.8, ST_GeomFromText('LINESTRING(-73.97 40.75, -73.96 40.76)', 4326)),
    ('5th Ave', 4, 5, 0.7, 0.7, ST_GeomFromText('LINESTRING(-73.97 40.77, -73.98 40.76)', 4326)),
    ('Central Park W', 5, 1, 0.9, 0.9, ST_GeomFromText('LINESTRING(-73.98 40.76, -73.98 40.75)', 4326)),
    ('3rd Ave', 2, 5, 1.3, 1.3, ST_GeomFromText('LINESTRING(-73.97 40.75, -73.98 40.76)', 4326)),
    ('Park Dr N', 4, 1, 1.4, 1.4, ST_GeomFromText('LINESTRING(-73.97 40.77, -73.98 40.75)', 4326));

----------------------------------------

TITLE: Creating Age Calculation Function with now()
DESCRIPTION: SQL to create a user-defined function that calculates age using now() and a given birth date.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION calculate_age(birth_date DATE)
RETURNS INTEGER AS $$
BEGIN
    RETURN DATE_PART('year', AGE(now(), birth_date));
END;
$$ LANGUAGE plpgsql;

SELECT
  calculate_age('1990-05-15') AS age_1,
  calculate_age('2000-12-31') AS age_2,
  calculate_age('1985-03-20') AS age_3;

----------------------------------------

TITLE: Database Connection Management with AsyncPG
DESCRIPTION: Python module for managing PostgreSQL database connections using asyncpg, including pool initialization and lifecycle management functions.

LANGUAGE: python
CODE:
import os
import asyncpg
import dotenv
from loguru import logger
from typing import Optional

dotenv.load_dotenv()

conn_pool: Optional[asyncpg.Pool] = None

async def init_postgres() -> None:
    global conn_pool
    try:
        logger.info("Initializing PostgreSQL connection pool...")
        conn_pool = await asyncpg.create_pool(
            dsn=os.getenv("DATABASE_URL"), min_size=1, max_size=10
        )
        logger.info("PostgreSQL connection pool created successfully.")
    except Exception as e:
        logger.error(f"Error initializing PostgreSQL connection pool: {e}")
        raise

async def get_postgres() -> asyncpg.Pool:
    global conn_pool
    if conn_pool is None:
        logger.error("Connection pool is not initialized.")
        raise ConnectionError("PostgreSQL connection pool is not initialized.")
    try:
        return conn_pool
    except Exception as e:
        logger.error(f"Failed to return PostgreSQL connection pool: {e}")
        raise

async def close_postgres() -> None:
    global conn_pool
    if conn_pool is not None:
        try:
            logger.info("Closing PostgreSQL connection pool...")
            await conn_pool.close()
            logger.info("PostgreSQL connection pool closed successfully.")
        except Exception as e:
            logger.error(f"Error closing PostgreSQL connection pool: {e}")
            raise
    else:
        logger.warning("PostgreSQL connection pool was not initialized.")

----------------------------------------

TITLE: Sample Database Connection String
DESCRIPTION: Example of a Neon database connection string format

LANGUAGE: bash
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname

----------------------------------------

TITLE: Checking Line of Sight Between Landmarks with PostGIS
DESCRIPTION: SQL query to check if there's a direct line of sight between two landmarks by checking for intersecting roads. Uses ST_MakeLine and ST_Intersects functions.

LANGUAGE: sql
CODE:
SELECT
    'No direct line of sight' AS info
FROM
    landmarks l1, landmarks l2, roads r
WHERE
    l1.name = 'Park' AND l2.name = 'Library' AND
    ST_Intersects(ST_MakeLine(l1.location, l2.location), r.path)
LIMIT 1;

----------------------------------------

TITLE: Converting PostgreSQL hstore Data to JSON
DESCRIPTION: Shows how to convert hstore data to JSON format using the hstore_to_json() function.

LANGUAGE: sql
CODE:
SELECT
  title,
  hstore_to_json (attr) json
FROM
  books;

----------------------------------------

TITLE: Rolling Back Migrations in Laravel using Artisan Commands
DESCRIPTION: Examples of using Laravel's Artisan commands to roll back migrations, including reverting the last batch, specific steps, and to a specific point in time.

LANGUAGE: bash
CODE:
php artisan migrate:rollback

LANGUAGE: bash
CODE:
php artisan migrate:rollback --step=1

LANGUAGE: bash
CODE:
php artisan migrate:rollback --date="2024-05-01 12:00:00"

----------------------------------------

TITLE: Using max() as Window Function in SQL
DESCRIPTION: This SQL query shows how to use max() as a window function to calculate the running maximum order amount over time, demonstrating how the largest order amount changes as new orders come in.

LANGUAGE: sql
CODE:
SELECT
    order_id,
    order_date,
    max(order_amount) OVER (
        ORDER BY order_date
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS running_max_amount
FROM orders
ORDER BY order_date;

----------------------------------------

TITLE: Creating .NET Project for EF Core Migrations
DESCRIPTION: Commands to create a new .NET project and install required packages for Entity Framework Core and PostgreSQL.

LANGUAGE: bash
CODE:
dotnet new webapi -n NeonMigrations
cd NeonMigrations

dotnet add package Microsoft.EntityFrameworkCore
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
dotnet add package dotenv.net

dotnet tool install --global dotnet-ef

----------------------------------------

TITLE: Restoring Data to Neon with pg_restore
DESCRIPTION: This command uses pg_restore to import the previously dumped data into the Neon database. It specifies the Neon connection string, runs in verbose mode, and skips setting ownership and access privileges.

LANGUAGE: bash
CODE:
pg_restore -d <neon-connection-string> -v --no-owner --no-acl render_dump.bak

----------------------------------------

TITLE: Querying Replication Slot Changes
DESCRIPTION: SQL query to retrieve changes captured by the wal2json plugin in the replication slot.

LANGUAGE: sql
CODE:
SELECT * FROM pg_logical_slot_get_changes('test_slot', NULL, NULL, 'pretty-print', 'on');

----------------------------------------

TITLE: Checking for Specific Key in PostgreSQL hstore Column
DESCRIPTION: Demonstrates how to check for the presence of a specific key in an hstore column using the '?' operator.

LANGUAGE: sql
CODE:
SELECT
  title,
  attr->'publisher' as publisher,
  attr
FROM
	books
WHERE
	attr ? 'publisher';

----------------------------------------

TITLE: Running Python Script for Data Transfer
DESCRIPTION: This shell command executes the Python script 'sync_script.py' which performs the chunked data transfer from CSV files to the Postgres database.

LANGUAGE: shell
CODE:
python3 sync_script.py

----------------------------------------

TITLE: Monitoring Subscription Status in PostgreSQL
DESCRIPTION: SQL query to check the latest status of the subscription, including received LSN and message receipt time.

LANGUAGE: sql
CODE:
SELECT subname, received_lsn, latest_end_lsn, last_msg_receipt_time FROM pg_catalog.pg_stat_subscription;

----------------------------------------

TITLE: Using the time_it() function to measure statement execution time in PostgreSQL
DESCRIPTION: This example demonstrates how to use the previously created time_it() function to measure the execution time of a pg_sleep(1) statement.

LANGUAGE: sql
CODE:
SELECT time_it('SELECT pg_sleep(1)');

----------------------------------------

TITLE: Calculating HMAC with pgcrypto
DESCRIPTION: Demonstration of using the hmac function to calculate a Hash-based Message Authentication Code (HMAC) using SHA-256 algorithm. This provides both data integrity and authenticity.

LANGUAGE: sql
CODE:
SELECT hmac('Data to Authenticate', 'shared_secret_key', 'sha256');

----------------------------------------

TITLE: Piping pg_dump to pg_restore in Bash
DESCRIPTION: This command demonstrates how to pipe the output of pg_dump directly to pg_restore for small databases, minimizing migration downtime.

LANGUAGE: bash
CODE:
pg_dump -Fc -v -d <source_database_connection_string> | pg_restore -v -d <neon-database-connection-string>

----------------------------------------

TITLE: Restoring Data with pg_restore in Bash
DESCRIPTION: This command restores data to a Neon Postgres database using pg_restore. It takes the dump file created by pg_dump and applies it to the specified Neon database.

LANGUAGE: bash
CODE:
pg_restore -v -d <neon_database_connection_string> <dump_file_name>

----------------------------------------

TITLE: Monitoring Replication Status in PostgreSQL
DESCRIPTION: This query displays information about each active replication connection to the publisher using the pg_stat_replication view.

LANGUAGE: sql
CODE:
SELECT * FROM pg_stat_replication;

----------------------------------------

TITLE: Using IS NULL Operator to Find NULL Values in PostgreSQL
DESCRIPTION: This example uses the IS NULL operator to find addresses where the address2 column contains NULL values in the address table.

LANGUAGE: php
CODE:
SELECT
  address,
  address2
FROM
  address
WHERE
  address2 IS NULL;

----------------------------------------

TITLE: Basic AT TIME ZONE Usage with UTC
DESCRIPTION: Converting a timestamp to Coordinated Universal Time (UTC) using the AT TIME ZONE operator.

LANGUAGE: sql
CODE:
SELECT TIMESTAMP '2024-03-21 10:00:00' AT TIME ZONE 'UTC';

----------------------------------------

TITLE: Handling Nested Arrays with jsonb_array_elements()
DESCRIPTION: SQL query demonstrating how to use multiple jsonb_array_elements() calls to handle nested JSONB arrays and extract detailed information.

LANGUAGE: sql
CODE:
SELECT
 id,
 name,
 variant->>'model' AS model,
 size,
 color
FROM
 electronics_products,
  jsonb_array_elements(details->'variants') AS variant,
  jsonb_array_elements_text(variant->'sizes') AS t1(size),
  jsonb_array_elements_text(variant->'colors') AS t2(color);

----------------------------------------

TITLE: Viewing pgcli Help Information
DESCRIPTION: Displays the help information and available options for the pgcli command-line tool.

LANGUAGE: bash
CODE:
pgcli --help

----------------------------------------

TITLE: Optimizing Foreign Table Queries
DESCRIPTION: Configuration options and commands for optimizing query performance with foreign tables.

LANGUAGE: sql
CODE:
ALTER SERVER production_db OPTIONS (ADD use_remote_estimate 'true');
ALTER FOREIGN TABLE remote_users OPTIONS (ADD use_remote_estimate 'true');
ANALYZE remote_users;

----------------------------------------

TITLE: Database Schema for Auth.js and Todo Application
DESCRIPTION: SQL schema defining required tables for Auth.js authentication and a todos table for the application functionality.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS users (
  id SERIAL,
  name VARCHAR(255),
  email VARCHAR(255),
  "emailVerified" TIMESTAMPTZ,
  image TEXT,
  PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS accounts (
  id SERIAL,
  "userId" INTEGER NOT NULL,
  type VARCHAR(255) NOT NULL,
  provider VARCHAR(255) NOT NULL,
  "providerAccountId" VARCHAR(255) NOT NULL,
  refresh_token TEXT,
  access_token TEXT,
  expires_at BIGINT,
  token_type TEXT,
  scope TEXT,
  id_token TEXT,
  session_state TEXT,
  PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS sessions (
  id SERIAL,
  "sessionToken" VARCHAR(255) NOT NULL,
  "userId" INTEGER NOT NULL,
  expires TIMESTAMPTZ NOT NULL,
  PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS verification_token (
  identifier TEXT,
  token TEXT,
  expires TIMESTAMPTZ NOT NULL,
  PRIMARY KEY (identifier, token)
);

CREATE TABLE IF NOT EXISTS todos (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL,
  content TEXT NOT NULL,
  completed BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id)
);

----------------------------------------

TITLE: Deleting Binary Data from PostgreSQL using PHP
DESCRIPTION: PHP method to remove binary data from PostgreSQL, including cleanup of large objects and associated database records.

LANGUAGE: php
CODE:
public function delete($id) {
    try {
        $this->pdo->beginTransaction();
        $stmt = $this->pdo->prepare('SELECT file_data '
                . 'FROM company_files '
                . 'WHERE id=:id');
        $stmt->execute([$id]);
        $stmt->bindColumn('file_data', $fileData, \PDO::PARAM_STR);
        $stmt->closeCursor();
        $this->pdo->pgsqlLOBUnlink($fileData);
        $stmt = $this->pdo->prepare("DELETE FROM company_files WHERE id = :id");
        $stmt->execute([$id]);
        $this->pdo->commit();
    } catch (\Exception $e) {
        $this->pdo->rollBack();
        throw $e;
    }
}

----------------------------------------

TITLE: Copying PostgreSQL Table with Data
DESCRIPTION: This SQL statement creates a new table 'contact_backup' as a copy of the 'contacts' table, including structure and data.

LANGUAGE: sql
CODE:
CREATE TABLE contact_backup
AS TABLE contacts;

----------------------------------------

TITLE: Executing Full Outer Join in PostgreSQL
DESCRIPTION: Shows a full outer join that combines all records from both tables, with NULL values where there are no matches between tables.

LANGUAGE: sql
CODE:
SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
FULL OUTER JOIN basket_b
    ON fruit_a = fruit_b;

----------------------------------------

TITLE: Verifying User Synchronization in Neon Database
DESCRIPTION: This SQL query allows you to verify that a user was synchronized to your Neon database by querying the neon_auth.users_sync table.

LANGUAGE: sql
CODE:
SELECT id, email, name, created_at FROM neon_auth.users_sync;

----------------------------------------

TITLE: Syntax of PostgreSQL TO_TIMESTAMP() Function
DESCRIPTION: The basic syntax of the TO_TIMESTAMP() function, which takes a timestamp string and a format string as arguments.

LANGUAGE: sql
CODE:
TO_TIMESTAMP(timestamp, format)

----------------------------------------

TITLE: FULL OUTER JOIN with WHERE Clause Examples
DESCRIPTION: Shows how to use WHERE clauses with FULL OUTER JOIN to find departments without employees and employees without departments.

LANGUAGE: sql
CODE:
SELECT
  employee_name,
  department_name
FROM
  employees e
FULL OUTER JOIN departments d
  ON d.department_id = e.department_id
WHERE
  employee_name IS NULL;

----------------------------------------

TITLE: Implementing AI Agent Database Workflow with Neon Toolkit
DESCRIPTION: A complete example showing how to create a Neon project, execute SQL queries provided by an AI agent to create tables and insert data, and clean up resources using the toolkit. Demonstrates project creation, SQL execution, and project deletion.

LANGUAGE: typescript
CODE:
import { NeonToolkit } from '@neondatabase/toolkit';

// Start the toolkit with your Neon API Key
const toolkit = new NeonToolkit(process.env.NEON_API_KEY!);

async function runAgentWorkflow() {
  // Create a Neon Project (Database) - Ready instantly!
  const project = await toolkit.createProject();
  console.log(`Project created: ${project.id}`);

  // AI Agent Provides SQL to Create a Table
  const agentCreateTableQuery = `
    CREATE TABLE IF NOT EXISTS users (
      id UUID PRIMARY KEY,
      username VARCHAR(50) NOT NULL,
      email VARCHAR(255) UNIQUE NOT NULL,
      signup_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
  `;

  // Run the AI Agent's SQL to create the 'users' table
  await toolkit.sql(project, agentCreateTableQuery);
  console.log("Table 'users' created using the AI agent's SQL.");

  // AI Agent Provides SQL to Add Data
  const agentInsertUserQuery = `
    INSERT INTO users (id, username, email)
    VALUES (gen_random_uuid(), 'agentUser1', 'agent.user1@example.com'),
           (gen_random_uuid(), 'agentUser2', 'agent.user2@example.com');
  `;

  // Run the AI Agent's SQL to add user data
  await toolkit.sql(project, agentInsertUserQuery);
  console.log("User data added using the AI agent's SQL.");

  // Perform more SQL operations as needed...

  // Delete the Project (Database) - Clean up when the agent is finished
  await toolkit.deleteProject(project);
  console.log(`Project ${project.id} deleted.`);
}

runAgentWorkflow().catch(console.error);

----------------------------------------

TITLE: Extracting Time Units from age() Intervals
DESCRIPTION: Shows how to extract specific units (years, months, days) from intervals returned by the age() function

LANGUAGE: sql
CODE:
WITH sample_dates(name, birth_date) AS (
  VALUES
    ('Alice', '1990-03-15'::DATE),
    ('Bob', '1985-11-30'::DATE),
    ('Charlie', '1995-07-22'::DATE)
)
SELECT
  name,
  birth_date,
  EXTRACT(YEAR FROM age(birth_date)) AS years,
  EXTRACT(MONTH FROM age(birth_date)) AS months,
  EXTRACT(DAY FROM age(birth_date)) AS days
FROM sample_dates;

----------------------------------------

TITLE: Creating a Users Table in Neon
DESCRIPTION: SQL command to create a 'users' table with id, username, and email fields in the Neon database.

LANGUAGE: sql
CODE:
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL
);

----------------------------------------

TITLE: Creating Unlogged Table Syntax
DESCRIPTION: Shows how to create an unlogged table

LANGUAGE: sql
CODE:
CREATE UNLOGGED TABLE new_table_name
AS query;

----------------------------------------

TITLE: Complex ROUND() Usage with Common Table Expression in PostgreSQL
DESCRIPTION: Shows an advanced example of using ROUND() with a Common Table Expression (CTE) to calculate and round the average number of rentals per customer to the nearest integer.

LANGUAGE: sql
CODE:
WITH rental(customer_id,rent) AS
(
    SELECT
        customer_id,
        COUNT( rental_id )
    FROM
        payment
    GROUP BY
        customer_id
)
SELECT
    ROUND(AVG(rent))
FROM
    rental;

----------------------------------------

TITLE: Creating Last Name Change Trigger in PostgreSQL
DESCRIPTION: This SQL statement creates a trigger that fires before an UPDATE operation on the employees table. It executes the log_last_name_changes function for each affected row.

LANGUAGE: sql
CODE:
CREATE TRIGGER last_name_changes
  BEFORE UPDATE
  ON employees
  FOR EACH ROW
  EXECUTE PROCEDURE log_last_name_changes();

----------------------------------------

TITLE: Updating JSONB Field Values
DESCRIPTION: Demonstrates how to update specific fields within a JSONB structure using jsonb_set function.

LANGUAGE: sql
CODE:
UPDATE user_profiles
SET profile = jsonb_set(profile, '{settings, privacy}', '"friends-only"')
WHERE profile -> 'settings' ->> 'privacy' = 'public';

----------------------------------------

TITLE: Direct Server-to-Server PostgreSQL Database Copy
DESCRIPTION: This shell command demonstrates copying a PostgreSQL database directly from one server to another using pg_dump and psql in a pipeline.

LANGUAGE: shell
CODE:
pg_dump -C -h local -U localuser sourcedb | psql -h remote -U remoteuser targetdb

----------------------------------------

TITLE: Setting Random Seed in PostgreSQL
DESCRIPTION: Demonstrates how to use SETSEED() function to generate reproducible random numbers within a session.

LANGUAGE: sql
CODE:
SELECT SETSEED(0.5), RANDOM();

----------------------------------------

TITLE: Querying Nested JSON Arrays with Path Expression
DESCRIPTION: Shows how to access elements within nested JSON arrays using array index notation and property access.

LANGUAGE: sql
CODE:
SELECT
  jsonb_path_query(info, '$.pets[0].name')
FROM
  person;

----------------------------------------

TITLE: Using json_array_elements() with Nested JSON Data in PostgreSQL
DESCRIPTION: This query demonstrates how to use json_array_elements() to extract all combinations of sizes and colors for a specific product from nested JSON data.

LANGUAGE: sql
CODE:
SELECT
 id,
 name,
 size,
 color
FROM products AS p,
 json_array_elements(p.details -> 'sizes') AS size,
 json_array_elements(p.details -> 'colors') AS color
WHERE name = 'T-Shirt';

----------------------------------------

TITLE: Implementing views for note operations
DESCRIPTION: Creates views for creating, listing, and deleting notes, handling both GET and POST requests.

LANGUAGE: python
CODE:
from django.shortcuts import render, redirect, get_object_or_404
from .models import Note
from django.views.decorators.http import require_http_methods

@require_http_methods(["GET", "POST"])
def create_note(request):
    if request.method == "POST":
        title = request.POST.get('title')
        content = request.POST.get('content')
        Note.objects.create(title=title, content=content)
        return redirect('list_notes')
    return render(request, 'notes/create_note.html')

def list_notes(request):
    notes = Note.objects.all().order_by('-created_at')
    return render(request, 'notes/list_notes.html', {'notes': notes})

@require_http_methods(["POST"])
def delete_note(request, note_id):
    note = get_object_or_404(Note, id=note_id)
    note.delete()
    return redirect('list_notes')

----------------------------------------

TITLE: Logging in to StepZen CLI
DESCRIPTION: This command logs in to the StepZen CLI, linking it to your StepZen account. This is required to use StepZen's features and deploy your GraphQL API.

LANGUAGE: bash
CODE:
stepzen login

----------------------------------------

TITLE: Creating Sample Bloated Table
DESCRIPTION: Creates a test table and populates it with data to demonstrate bloat removal. Includes initial data insertion and deletion to simulate bloat conditions.

LANGUAGE: sql
CODE:
CREATE TABLE public.bloated_table (
    id SERIAL PRIMARY KEY,
    data TEXT
);

-- Insert some initial data
INSERT INTO public.bloated_table (data)
SELECT md5(random()::text)
FROM generate_series(1, 100000);

-- Delete a significant portion of the data to simulate bloat
DELETE FROM public.bloated_table WHERE id % 2 = 0;

----------------------------------------

TITLE: Inserting Data into PostgreSQL Array Column
DESCRIPTION: These SQL statements show two methods of inserting data into an array column: using the ARRAY constructor and using curly braces notation.

LANGUAGE: SQL
CODE:
INSERT INTO contacts (name, phones)
VALUES('John Doe',ARRAY [ '(408)-589-5846','(408)-589-5555' ]);

LANGUAGE: SQL
CODE:
INSERT INTO contacts (name, phones)
VALUES('Lily Bush','{"(408)-589-5841"}'),
      ('William Gate','{"(408)-589-5842","(408)-589-58423"}');

----------------------------------------

TITLE: Configuring Flyway for Multiple Environments
DESCRIPTION: Bash commands to create separate Flyway configuration files for different environments by copying the default configuration file.

LANGUAGE: bash
CODE:
cd ~/flyway-x.y.z/conf
cp flyway.conf env_dev.conf
cp flyway.conf env_staging.conf
cp flyway.conf env_prod.conf

----------------------------------------

TITLE: Configuring Directus Docker Compose
DESCRIPTION: Docker compose configuration for setting up Directus CMS with Postgres database connection

LANGUAGE: yml
CODE:
services:
  directus:
    image: directus/directus:11.3.5
    ports:
      - 8055:8055
    volumes:
      - ./database:/directus/database
      - ./uploads:/directus/uploads
      - ./extensions:/directus/extensions
    environment:
      SECRET: 'replace-with-secure-random-value'
      ADMIN_EMAIL: 'admin@example.com'
      ADMIN_PASSWORD: 'd1r3ctu5'
      DB_CLIENT: 'pg'
      DB_CONNECTION_STRING: 'postgresql://neondb_owner:...@ep-...us-east-1.aws.neon.tech/neondb?sslmode=require'
      DB_SSL__REJECT_UNAUTHORIZED: 'true'
      WEBSOCKETS_ENABLED: 'true'
      CORS_ENABLED: 'true'
      CORS_ORIGIN: '*'

----------------------------------------

TITLE: Inserting Multiple Rows and Returning Inserted Data
DESCRIPTION: This example inserts two rows into the 'contacts' table and returns the inserted rows using the RETURNING clause.

LANGUAGE: sql
CODE:
INSERT INTO contacts (first_name, last_name, email)
VALUES
    ('Alice', 'Johnson', '[[email protected]](../cdn-cgi/l/email-protection.html)'),
    ('Charlie', 'Brown', '[[email protected]](../cdn-cgi/l/email-protection.html)')
RETURNING *;

----------------------------------------

TITLE: Example Usage of PostgreSQL Insert Methods with PHP PDO
DESCRIPTION: Implementation example showing how to use both single and multiple insert methods, including database connection setup and error handling.

LANGUAGE: php
CODE:
<?php
require 'vendor/autoload.php';

use PostgreSQLTutorial\Connection as Connection;
use PostgreSQLTutorial\PostgreSQLPHPInsert as PostgreSQLPHPInsert;

try {
    // connect to the PostgreSQL database
    $pdo = Connection::get()->connect();
    //
    $insertDemo = new PostgreSQLPHPInsert($pdo);

    // insert a stock into the stocks table
    $id = $insertDemo->insertStock('MSFT', 'Microsoft Corporation');
    echo 'The stock has been inserted with the id ' . $id . '<br>';

    // insert a list of stocks into the stocks table
    $list = $insertDemo->insertStockList([
        ['symbol' => 'GOOG', 'company' => 'Google Inc.'],
        ['symbol' => 'YHOO', 'company' => 'Yahoo! Inc.'],
        ['symbol' => 'FB', 'company' => 'Facebook, Inc.'],
    ]);

    foreach ($list as $id) {
        echo 'The stock has been inserted with the id ' . $id . '<br>';
    }
} catch (\PDOException $e) {
    echo $e->getMessage();
}

----------------------------------------

TITLE: Configuring Neon Database Connection String
DESCRIPTION: Environment variable configuration for the Neon database connection string using a .env file.

LANGUAGE: shell
CODE:
NUXT_DATABASE_URL="postgresql://<user>:<password>@<endpoint_hostname>.neon.tech:<port>/<dbname>?sslmode=require"

----------------------------------------

TITLE: Extracting Week and Year Components
DESCRIPTION: Example of extracting day of week (dow) and day of year (doy) from a timestamp.

LANGUAGE: sql
CODE:
SELECT date_part('dow',TIMESTAMP '2017-03-18 10:20:30') dow,
       date_part('doy',TIMESTAMP '2017-03-18 10:20:30') doy;

----------------------------------------

TITLE: Installing uuid-ossp Module in PostgreSQL
DESCRIPTION: Shows how to install the uuid-ossp module for generating UUIDs in older versions of PostgreSQL.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

----------------------------------------

TITLE: Basic CURRENT_DATE Function Syntax
DESCRIPTION: The basic syntax for using the CURRENT_DATE function to get the current date in PostgreSQL.

LANGUAGE: sql
CODE:
CURRENT_DATE

----------------------------------------

TITLE: Configuring Environment Variables for Neon Database Connection
DESCRIPTION: Example of setting the DATABASE_URL environment variable in a .env file for connecting to a Neon Postgres database.

LANGUAGE: bash
CODE:
# .env
DATABASE_URL=NEON_DATABASE_CONNECTION_STRING

----------------------------------------

TITLE: Storing Neon Database Connection String in .env File
DESCRIPTION: Example of how to store the Neon database connection string in a .env file for secure configuration.

LANGUAGE: shell
CODE:
DATABASE_URL="postgresql://<user>:<password>@<endpoint_hostname>.neon.tech:<port>/<dbname>?sslmode=require"

----------------------------------------

TITLE: Configuring pgloader for MySQL to Neon Postgres Migration
DESCRIPTION: Example configuration file (config.load) for pgloader, specifying the source MySQL database and destination Neon Postgres database connection strings.

LANGUAGE: plaintext
CODE:
load database
  from mysql://user:password@host/source_db?sslmode=require
  into postgresql://alex:endpoint=ep-cool-darkness-123456;AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require;

----------------------------------------

TITLE: Creating HNSW Index with Manhattan Distance in SQL
DESCRIPTION: This SQL snippet shows how to create an HNSW index using the Manhattan distance metric with pg_embedding. It includes parameters for dimensions, m-value, and ef for both construction and search operations.

LANGUAGE: sql
CODE:
CREATE INDEX ON documents USING hnsw(embedding ann_manhattan_ops) WITH (dims=3, m=3, efconstruction=5, efsearch=5);
SELECT id FROM documents ORDER BY embedding <~> array[3,3,3] LIMIT 1;

----------------------------------------

TITLE: JSONB DEFAULT Example
DESCRIPTION: Demonstrates using DEFAULT constraints with JSONB data type for storing configuration data.

LANGUAGE: sql
CODE:
CREATE TABLE settings(
   id SERIAL PRIMARY KEY,
   name VARCHAR(50) NOT NULL,
   configuration JSONB DEFAULT '{}'
);

----------------------------------------

TITLE: Performing Date Arithmetic with Intervals
DESCRIPTION: Shows how to use interval values in date arithmetic operations with the PostgreSQL now() function.

LANGUAGE: SQL
CODE:
SELECT
	now(),
	now() - INTERVAL '1 year 3 hours 20 minutes'
             AS "3 hours 20 minutes ago of last year";

----------------------------------------

TITLE: Finding Least Common Ancestor in ltree Hierarchy in PostgreSQL
DESCRIPTION: SQL query to find the least common ancestor of two paths in an ltree hierarchy using the lca() function. This demonstrates how to determine the shared parent of two nodes in the tree.

LANGUAGE: sql
CODE:
-- Find the least common ancestor of gaming laptops and business laptops
SELECT lca(
    'electronics.computers.laptops.gaming'::ltree,
    'electronics.computers.laptops.business'::ltree
) AS common_ancestor;

----------------------------------------

TITLE: Removing a Role with Dependent Objects in PostgreSQL
DESCRIPTION: This code sequence demonstrates how to remove a role that owns database objects. It reassigns ownership of objects, drops remaining owned objects, and then drops the role itself.

LANGUAGE: sql
CODE:
-- execute these statements in the database that contains
-- the object owned by the target role
REASSIGN OWNED BY target_role TO another_role;

DROP OWNED BY target_role;

-- drop the role
DROP ROLE target_role;

----------------------------------------

TITLE: Creating Project Structure for AI Agent
DESCRIPTION: Sets up the basic directory structure for the AI agent project, including main.py, requirements.txt, and .env files.

LANGUAGE: bash
CODE:
mkdir neon-composio-crewai

LANGUAGE: bash
CODE:
neon-composio-crewai/
├── main.py         # Main Python script to run the AI agent
├── requirements.txt # Lists Python dependencies
├── .env            # Your environment variables

----------------------------------------

TITLE: Conference Session Table Creation and Data Insertion
DESCRIPTION: Creates a table for conference sessions using various date/time types and inserts sample data to demonstrate practical usage in an event management system.

LANGUAGE: sql
CODE:
CREATE TABLE conference_sessions (
    session_id SERIAL PRIMARY KEY,
    session_title TEXT NOT NULL,
    session_date DATE NOT NULL,
    start_time TIMESTAMPTZ NOT NULL,
    planned_duration INTERVAL NOT NULL,
    finish_time TIMESTAMPTZ
);

INSERT INTO conference_sessions (session_title, session_date, start_time, planned_duration, finish_time)
VALUES
    ('Keynote Speech', '2024-05-15', '2024-05-15 09:00:00+00', '2 hours', '2024-05-15 11:30:00+00'),
    ('Data Science Workshop', '2024-05-16', '2024-05-16 11:00:00+00', '3 hours', '2024-05-16 14:00:00+00'),
    ('AI Panel Discussion', '2024-05-17', '2024-05-17 14:00:00+00', '1.5 hours', '2024-05-17 15:20:00+00');

----------------------------------------

TITLE: Creating Purchase Orders Table with Default Timestamp
DESCRIPTION: Example of creating a table with current_timestamp as default value and inserting records.

LANGUAGE: sql
CODE:
CREATE TABLE purchase_orders (
  order_id SERIAL PRIMARY KEY,
  order_date TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp
);

INSERT INTO purchase_orders (order_id)
VALUES (1);
INSERT INTO purchase_orders (order_id)
VALUES (2);

----------------------------------------

TITLE: First Occurrence Example
DESCRIPTION: Shows how POSITION() returns only the first occurrence of a substring in a string with multiple matches.

LANGUAGE: sql
CODE:
SELECT POSITION('is' IN 'This is a cat');

----------------------------------------

TITLE: PostgreSQL Absolute Value Using @ Operator
DESCRIPTION: Example showing how to use the @ operator to calculate absolute value.

LANGUAGE: sql
CODE:
SELECT @ -15 as result

----------------------------------------

TITLE: Enabling a Specific Trigger in PostgreSQL
DESCRIPTION: Shows how to enable a single trigger named 'salary_before_update' on the 'employees' table.

LANGUAGE: sql
CODE:
ALTER TABLE employees
ENABLE TRIGGER salary_before_update;

----------------------------------------

TITLE: Conditional UI Rendering with Feature Flags
DESCRIPTION: Svelte component that conditionally renders payment UI elements based on feature flag state. Demonstrates practical usage of feature flags in the frontend.

LANGUAGE: svelte
CODE:
<script lang="ts">
  import '../app.css'
  import type { PageData } from './$types'
  export let data: PageData
</script>

<div class="w-screen h-screen flex flex-col items-center justify-center">
  {#if data.fast_payments}
    <div class="mb-6 w-full flex flex-col max-w-[300px]">
      <span class="font-semibold">Fast Payment Methods</span>
      <button class="mt-3 flex flex-col items-center border rounded w-full px-3 py-1">Pay via PayGM</button>
    </div>
  {/if}
  <form action="/" method="post" class="w-full flex flex-col max-w-[300px]">
    <span class="font-semibold">Pay with card</span>
    <input class="mt-3 w-full border px-2 py-1 rounded" type="text" placeholder="Full name on card" />
    <input class="mt-3 w-full border px-2 py-1 rounded" type="text" placeholder="1234 1234 1234 1234" />
    <div class="flex flex-row gap-x-2">
      <input class="w-1/2 border px-2 py-1 rounded" type="text" placeholder="MM/YY" />
      <input class="w-1/2 border px-2 py-1 rounded" type="text" placeholder="CVV" />
    </div>
  </form>
</div>

----------------------------------------

TITLE: Function Signature for jsonb_populate_record in PostgreSQL
DESCRIPTION: Defines the signature of the jsonb_populate_record function, which takes a base record of any element type and a JSONB object, returning an updated record of the same type.

LANGUAGE: sql
CODE:
jsonb_populate_record(base_record ANYELEMENT, json JSONB) -> ANYELEMENT

----------------------------------------

TITLE: Basic CREATE ROLE Syntax
DESCRIPTION: The basic syntax for creating a new role in PostgreSQL.

LANGUAGE: sql
CODE:
CREATE ROLE role_name;

----------------------------------------

TITLE: Creating Audits Table in PostgreSQL
DESCRIPTION: Creates a table named 'audits' to store audit logs for commands, including username, event, command, and execution timestamp.

LANGUAGE: sql
CODE:
CREATE TABLE audits (
    id SERIAL PRIMARY KEY,
    username VARCHAR(100) NOT NULL,
    event VARCHAR(50) NOT NULL,
    command TEXT NOT NULL,
    executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

----------------------------------------

TITLE: Creating GIN Index for JSONB
DESCRIPTION: Shows how to create a GIN index for efficient querying of JSONB data.

LANGUAGE: sql
CODE:
CREATE INDEX idxgin ON user_profiles USING GIN (profile);

----------------------------------------

TITLE: Basic EXCEPT Example
DESCRIPTION: Demonstrates how to find top-rated films that are not in the most popular films list.

LANGUAGE: sql
CODE:
SELECT * FROM top_rated_films
EXCEPT
SELECT * FROM most_popular_films;

----------------------------------------

TITLE: Copying PostgreSQL Table Structure Without Data
DESCRIPTION: This SQL statement creates a new table with the same structure as an existing table, but without copying any data.

LANGUAGE: sql
CODE:
CREATE TABLE new_table AS
TABLE existing_table
WITH NO DATA;

----------------------------------------

TITLE: Querying Boolean Data in PostgreSQL
DESCRIPTION: These SQL snippets show different ways to query Boolean data, including using literal values and implied true/false checks.

LANGUAGE: SQL
CODE:
SELECT *
FROM stock_availability
WHERE available = 'yes';

LANGUAGE: SQL
CODE:
SELECT *
FROM stock_availability
WHERE available;

LANGUAGE: SQL
CODE:
SELECT
  *
FROM
  stock_availability
WHERE
  available = 'no';

LANGUAGE: SQL
CODE:
SELECT
  *
FROM
  stock_availability
WHERE
  NOT available;

----------------------------------------

TITLE: Converting String to Timestamp Example
DESCRIPTION: An example of using TO_TIMESTAMP() to convert a string '2017-03-31 9:30:20' to a timestamp using the format 'YYYY-MM-DD HH:MI:SS'.

LANGUAGE: sql
CODE:
SELECT TO_TIMESTAMP(
    '2017-03-31 9:30:20',
    'YYYY-MM-DD HH:MI:SS'
);

----------------------------------------

TITLE: PostgreSQL NATURAL LEFT JOIN Example
DESCRIPTION: Shows how to use NATURAL JOIN to perform a LEFT JOIN operation between the 'categories' and 'products' tables.

LANGUAGE: sql
CODE:
SELECT *
FROM categories
NATURAL LEFT JOIN products;

----------------------------------------

TITLE: Table Renaming Operation
DESCRIPTION: Shows how to rename a table using the ALTER TABLE statement.

LANGUAGE: sql
CODE:
ALTER TABLE links
RENAME TO urls;

----------------------------------------

TITLE: Public Key Decryption with pgcrypto
DESCRIPTION: Example of using pgp_pub_decrypt function to decrypt a message that was encrypted using public-key encryption. It requires the private key and potentially a password.

LANGUAGE: sql
CODE:
SELECT pgp_pub_decrypt(encrypted_message, 'private_key_here', 'private_key_password');

----------------------------------------

TITLE: Formatting Date Output in PostgreSQL
DESCRIPTION: These examples show how to use the TO_CHAR() function to format date output in specific formats.

LANGUAGE: sql
CODE:
SELECT TO_CHAR(CURRENT_DATE, 'dd/mm/yyyy');
SELECT TO_CHAR(CURRENT_DATE, 'Mon dd, yyyy');

----------------------------------------

TITLE: Installing Neon Extension for Cache Statistics in Postgres
DESCRIPTION: This SQL command installs the Neon extension, which provides access to the neon_stat_file_cache view for querying local file cache statistics.

LANGUAGE: sql
CODE:
CREATE EXTENSION neon;

----------------------------------------

TITLE: ISFINITE with Date Values
DESCRIPTION: Examples demonstrating how to use ISFINITE() function with regular and infinite date values.

LANGUAGE: sql
CODE:
SELECT ISFINITE('2024-03-20'::date) result;

LANGUAGE: sql
CODE:
SELECT ISFINITE(DATE 'infinity') result;

----------------------------------------

TITLE: Using PostgreSQL LOWER() Function with String Literal
DESCRIPTION: This example demonstrates how to use the LOWER() function to convert a string literal 'PostgreSQL' to lowercase.

LANGUAGE: sql
CODE:
SELECT LOWER('PostgreSQL');

----------------------------------------

TITLE: Updating Table Data with PostgreSQL RTRIM()
DESCRIPTION: Uses the RTRIM() function in an UPDATE statement to remove trailing spaces from all rows in the 'tweets' table.

LANGUAGE: sql
CODE:
UPDATE tweets
SET tweet = RTRIM(tweet);

----------------------------------------

TITLE: Enabling dblink Extension in Neon
DESCRIPTION: Creates the dblink extension in the current database if it doesn't already exist.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS dblink;

----------------------------------------

TITLE: Prisma Schema Definition
DESCRIPTION: Schema file defining database connection and Elements table model

LANGUAGE: text
CODE:
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Elements {
  AtomicNumber Int @id
  Element String?
  Symbol  String?
}

----------------------------------------

TITLE: Installing pg_repack Extension
DESCRIPTION: SQL command to enable the pg_repack extension in a Neon database after support has enabled it.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pg_repack;

----------------------------------------

TITLE: Creating Foreign Table
DESCRIPTION: Manually creates a foreign table that maps to a remote table with specified columns and data types.

LANGUAGE: sql
CODE:
CREATE FOREIGN TABLE remote_users (
    id integer,
    username text,
    email text,
    created_at timestamp with time zone
)
SERVER production_db
OPTIONS (schema_name 'public', table_name 'users');

----------------------------------------

TITLE: Using date_trunc() with Different Precisions
DESCRIPTION: This example demonstrates how date_trunc() works with different precision levels, from year down to millisecond, using a CTE with sample data.

LANGUAGE: sql
CODE:
WITH sample_data(event_time) AS (
  VALUES
    ('2024-03-15 14:30:45.123456+00'::TIMESTAMP WITH TIME ZONE),
    ('2024-06-22 09:15:30.987654+00'::TIMESTAMP WITH TIME ZONE),
    ('2024-11-07 23:59:59.999999+00'::TIMESTAMP WITH TIME ZONE)
)
SELECT
  event_time,
  date_trunc('year', event_time) AS year_trunc,
  date_trunc('quarter', event_time) AS quarter_trunc,
  date_trunc('month', event_time) AS month_trunc,
  date_trunc('week', event_time) AS week_trunc,
  date_trunc('day', event_time) AS day_trunc,
  date_trunc('hour', event_time) AS hour_trunc,
  date_trunc('minute', event_time) AS minute_trunc,
  date_trunc('second', event_time) AS second_trunc,
  date_trunc('millisecond', event_time) AS millisecond_trunc
FROM sample_data;

----------------------------------------

TITLE: Creating Subscription in SQL
DESCRIPTION: Creates a subscription on the destination database to receive replicated data.

LANGUAGE: sql
CODE:
CREATE SUBSCRIPTION my_subscription
CONNECTION 'postgresql://neondb_owner:<password>@ep-cool-darkness-123456.us-east-2.aws.neon.tech/neondb'
PUBLICATION my_publication;

----------------------------------------

TITLE: Counting Total Transactions in Payment Table
DESCRIPTION: Example of using COUNT(*) to count all rows in the payment table.

LANGUAGE: sql
CODE:
SELECT
   COUNT(*)
FROM
   payment;

----------------------------------------

TITLE: Creating Project with Context in Neon CLI
DESCRIPTION: Creates a new Neon project and automatically sets its context.

LANGUAGE: bash
CODE:
neon projects create --name MyLatest --set-context

----------------------------------------

TITLE: Creating PostgreSQL Table Using JDBC
DESCRIPTION: Demonstrates how to create a products table in PostgreSQL using JDBC. The code establishes a database connection, creates a Statement object, and executes a CREATE TABLE SQL command with proper error handling and resource management.

LANGUAGE: java
CODE:
import java.sql.SQLException;

public class Main {
    public static void main(String[] args) {

        var sql = "CREATE TABLE products (" +
                "    id SERIAL PRIMARY KEY," +
                "    name VARCHAR(255) NOT NULL," +
                "    price DECIMAL(10, 2) NOT NULL" +
                ");";
        try (var conn =  DB.connect();
             var stmt = conn.createStatement()) {
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
    }
}

----------------------------------------

TITLE: Creating Basic Next.js Form Component
DESCRIPTION: Implementation of a simple form component in Next.js that captures user comments.

LANGUAGE: typescript
CODE:
export default function Page() {
  return (
    <form action={create}>
      <input type="text" placeholder="write a comment" name="comment" />
      <button type="submit">Submit</button>
    </form>
  );
}

----------------------------------------

TITLE: Creating New Rails Project
DESCRIPTION: Command to create a new Rails project configured to use PostgreSQL as the database.

LANGUAGE: bash
CODE:
rails new guide-neon-rails --database=postgresql

----------------------------------------

TITLE: Creating a Project-Scoped Organization API Key via Neon API
DESCRIPTION: This snippet illustrates how to create a project-scoped organization API key using the Neon API. Any organization member can create this type of key for any organization-owned project.

LANGUAGE: bash
CODE:
curl --request POST \
     --url 'https://console.neon.tech/api/v2/organizations/{org_id}/api_keys' \
     --header 'Content-Type: application/json' \
     --header 'Authorization: Bearer $PERSONAL_API_KEY' \
     --data '{"key_name":"only-this-project", "project_id": "some-project-123"}'

----------------------------------------

TITLE: Basic TRIM_SCALE() Function Usage in PostgreSQL
DESCRIPTION: This snippet demonstrates the basic usage of the TRIM_SCALE() function to remove trailing zeroes from a numeric value.

LANGUAGE: sql
CODE:
SELECT TRIM_SCALE(123.45000);

----------------------------------------

TITLE: Creating Referrals Table in SQL
DESCRIPTION: SQL command to create the 'referrals' table for tracking successful user referrals in the database.

LANGUAGE: sql
CODE:
CREATE TABLE referrals (
    referral_id SERIAL PRIMARY KEY,
    referrer_id INT REFERENCES users(user_id),
    referred_id INT REFERENCES users(user_id),
    code_id INT REFERENCES referral_codes(code_id),
    points_awarded INT,
    status VARCHAR(20) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_referral UNIQUE(referred_id),
    CONSTRAINT valid_status CHECK (status IN ('pending', 'completed', 'rejected'))
);

----------------------------------------

TITLE: Connecting to Neon Database with Serverless Driver
DESCRIPTION: JavaScript code showing how to connect to Neon database using the serverless driver with support for both WebSocket and HTTP connections

LANGUAGE: javascript
CODE:
import { Pool, neon, neonConfig } from '@neondatabase/serverless';

// Uncomment the following lines if you are on environments that do not support WebSocket, e.g, Node.js
// import ws from 'ws';
// neonConfig.webSocketConstructor = ws;

export const pool = new Pool({ connectionString: process.env.DATABASE_URL });
export const sql = neon(process.env.DATABASE_URL);

----------------------------------------

TITLE: Using dense_rank() with COUNT Aggregation in PostgreSQL
DESCRIPTION: This example shows how to combine dense_rank() with the COUNT function to rank classes based on the number of students.

LANGUAGE: sql
CODE:
SELECT class_id, dense_rank() OVER (ORDER BY COUNT(*) DESC) AS student_count_rank, COUNT(*) AS student_count
FROM student_scores_by_class
GROUP BY class_id;

----------------------------------------

TITLE: Simple RPAD() Example with Zeros
DESCRIPTION: Shows how to extend a numeric string '123' to length 6 by padding with zeros on the right side.

LANGUAGE: sql
CODE:
SELECT RPAD('123', 6, '0');

----------------------------------------

TITLE: Creating and Populating Books Table in PostgreSQL
DESCRIPTION: Example of creating a table with different character data types and inserting sample data. Uses CHAR(50) for fixed-length titles and TEXT for variable-length descriptions.

LANGUAGE: sql
CODE:
CREATE TABLE books (
    id SERIAL PRIMARY KEY,
    title CHAR(50),
    description TEXT
);

INSERT INTO books (title, description)
VALUES
    ('Postgres Guide', 'A comprehensive guide to PostgreSQL.'),
    ('Data Modeling Essentials', NULL),
    ('SQL for Professionals', 'An in-depth look at advanced SQL techniques.');

----------------------------------------

TITLE: Creating Custom Type for JSON Conversion
DESCRIPTION: Creating a custom 'pet' type with type and name fields for use with jsonb_to_record().

LANGUAGE: sql
CODE:
CREATE TYPE pet AS (type VARCHAR, name VARCHAR);

----------------------------------------

TITLE: Using CURRENT_DATE as Default Column Value
DESCRIPTION: Example showing how to use CURRENT_DATE as a default value when creating a table and inserting data.

LANGUAGE: sql
CODE:
CREATE TABLE delivery(
  delivery_id SERIAL PRIMARY KEY,
  product VARCHAR(255) NOT NULL,
  delivery_date DATE DEFAULT CURRENT_DATE
);

INSERT INTO delivery(product)
VALUES
  ('Sample screen protector');

SELECT * FROM delivery;

----------------------------------------

TITLE: SELECT Without FROM Clause
DESCRIPTION: Example of using SELECT without a FROM clause to get the current timestamp.

LANGUAGE: sql
CODE:
SELECT NOW();

----------------------------------------

TITLE: Database Navigation Commands
DESCRIPTION: Commands for switching databases and listing database objects like tables, schemas, and functions.

LANGUAGE: text
CODE:
\c dbname username

LANGUAGE: text
CODE:
\l

LANGUAGE: text
CODE:
\dt

LANGUAGE: text
CODE:
\d table_name

LANGUAGE: text
CODE:
\dn

LANGUAGE: text
CODE:
\df

LANGUAGE: text
CODE:
\dv

LANGUAGE: text
CODE:
\du

----------------------------------------

TITLE: Creating Test SQL File for pgbench
DESCRIPTION: This SQL script is used in a pgbench test to generate workload for observing Neon's Autoscaling behavior. It includes a computation-heavy query and a transaction ID check.

LANGUAGE: sql
CODE:
SELECT LOG(factorial(5000)) / LOG(factorial(2500));
SELECT txid_current();

----------------------------------------

TITLE: Querying Foreign Tables
DESCRIPTION: Examples of querying foreign tables including joins with local tables.

LANGUAGE: sql
CODE:
SELECT r.username, o.order_id, o.order_date
FROM remote_users r
JOIN imported_data.orders o ON r.id = o.user_id
WHERE o.order_date > '2025-01-01';

----------------------------------------

TITLE: Defining Address Composite Type
DESCRIPTION: Creates a composite type for storing address information with multiple fields including street, city, state, zip code, and country.

LANGUAGE: sql
CODE:
CREATE TYPE address_type AS(
   street text,
   city text,
   state text,
   zip_code integer,
   country text
);

----------------------------------------

TITLE: Using PostgreSQL IN Operator with Strings
DESCRIPTION: This example shows how to use the IN operator to find actors with specific last names.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  actor
WHERE
  last_name IN ('Allen', 'Chase', 'Davis')
ORDER BY
  last_name;

----------------------------------------

TITLE: General PostgreSQL CASE Expression Syntax
DESCRIPTION: Demonstrates the basic syntax of a general CASE expression that evaluates multiple conditions and returns corresponding results.

LANGUAGE: phpsql
CODE:
CASE
      WHEN condition_1  THEN result_1
      WHEN condition_2  THEN result_2
      [WHEN ...]
      [ELSE else_result]
END

----------------------------------------

TITLE: Basic PostgreSQL ANY Operator Syntax
DESCRIPTION: Demonstrates the fundamental syntax of the ANY operator in PostgreSQL, showing how to compare an expression with a subquery result.

LANGUAGE: sql
CODE:
expression operator ANY(subquery)

----------------------------------------

TITLE: Using PostgreSQL TRIM() with Table Data
DESCRIPTION: Shows how to create a table, insert data, and use TRIM() to clean up leading and trailing spaces in a column.

LANGUAGE: SQL
CODE:
CREATE TABLE todo(
  id SERIAL PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  completed BOOL NOT NULL DEFAULT false
);

INSERT INTO todo(title)
VALUES
  ('   Learn PostgreSQL   '),
  ('Build an App   ')
RETURNING *;

LANGUAGE: SQL
CODE:
UPDATE todo
SET title = TRIM(title);

LANGUAGE: SQL
CODE:
SELECT * FROM todo;

----------------------------------------

TITLE: Using dense_rank() with PARTITION BY in PostgreSQL
DESCRIPTION: This example demonstrates how to use dense_rank() with PARTITION BY to rank students within their respective classes.

LANGUAGE: sql
CODE:
SELECT
   student_id,
   student_name,
   score,
   class_id,
   dense_rank() OVER (PARTITION BY class_id ORDER BY score DESC) AS rank_within_class
FROM
   student_scores_by_class;

----------------------------------------

TITLE: Filtering Rows with Equal Operator in PostgreSQL
DESCRIPTION: Shows how to use the WHERE clause with the equal (=) operator to find customers with a specific first name.

LANGUAGE: sql
CODE:
SELECT
  last_name,
  first_name
FROM
  customer
WHERE
  first_name = 'Jamie';

----------------------------------------

TITLE: Basic PostgreSQL PG_SLEEP() Function Syntax
DESCRIPTION: Demonstrates the basic syntax of the PG_SLEEP() function which pauses execution for a specified number of seconds.

LANGUAGE: sql
CODE:
PG_SLEEP(seconds)

----------------------------------------

TITLE: Setting Configuration Variable Example in PostgreSQL
DESCRIPTION: This snippet shows how to set the 'escape_string_warning' configuration variable to 'off' for the 'testhrdb' database using the ALTER DATABASE SET statement.

LANGUAGE: sql
CODE:
ALTER DATABASE testhrdb
SET escape_string_warning = off;

----------------------------------------

TITLE: Defining Database Schema with Drizzle ORM
DESCRIPTION: Creates a schema file 'db/schema.ts' to define the structure of the 'votes' table using Drizzle ORM.

LANGUAGE: typescript
CODE:
import { pgTable, serial, text } from 'drizzle-orm/pg-core';

export const pollTable = pgTable('votes', {
  id: serial('id').primaryKey(),
  option: text('option').notNull(),
  ipAddress: text('ip_address').notNull(),
});

----------------------------------------

TITLE: Generating Test Data with PL/pgSQL Function
DESCRIPTION: Creates a PL/pgSQL function to generate sample XML data for testing purposes.

LANGUAGE: plpgsql
CODE:
CREATE OR REPLACE FUNCTION generate_persons()
RETURNS void AS
$$
BEGIN
    INSERT INTO person (info)
    SELECT
        XMLPARSE(DOCUMENT '<?xml version="1.0" encoding="UTF-8"?>
        <person>
            <name>' || 'Person' || generate_series || '</name>
            <age>' || (generate_series % 80 + 18) || '</age>
            <city>' || CASE WHEN generate_series % 3 = 0 THEN 'New York'
                            WHEN generate_series % 3 = 1 THEN 'Los Angeles'
                            ELSE 'San Francisco' END || '</city>
        </person>')
    FROM generate_series(1, 1000);
END;
$$ LANGUAGE plpgsql;

----------------------------------------

TITLE: Creating a Table with JSONB Column in PostgreSQL
DESCRIPTION: Creates a new table named 'person' with a JSONB column to store employee information including name, age, and pets.

LANGUAGE: sql
CODE:
CREATE TABLE person (
    id SERIAL PRIMARY KEY,
    data JSONB
);

----------------------------------------

TITLE: Creating a Table with JSONB Column in PostgreSQL
DESCRIPTION: Creates a 'person' table with a JSONB column to store JSON data for further examples.

LANGUAGE: sql
CODE:
CREATE TABLE person (
    id SERIAL PRIMARY KEY,
    info JSONB
);

----------------------------------------

TITLE: Installing pgvector Extension in Postgres
DESCRIPTION: This SQL command installs the pgvector extension in a Postgres database, enabling vector embedding storage and retrieval capabilities.

LANGUAGE: sql
CODE:
CREATE EXTENSION vector;

----------------------------------------

TITLE: Removing Trailing Spaces with PostgreSQL RTRIM()
DESCRIPTION: Shows how to use RTRIM() to remove trailing spaces from a string without specifying the second argument.

LANGUAGE: sql
CODE:
SELECT RTRIM('PostgreSQL   ');

----------------------------------------

TITLE: Setting PGSSLROOTCERT Environment Variable
DESCRIPTION: Shows how to set the PGSSLROOTCERT environment variable to specify the path to system root certificates for psql client connections.

LANGUAGE: bash
CODE:
export PGSSLROOTCERT="/path/to/your/root.crt"

----------------------------------------

TITLE: Creating and Inserting Weather Data with REAL Type in PostgreSQL
DESCRIPTION: This snippet demonstrates how to create a table using the REAL data type for storing temperature and humidity readings in a weather data application.

LANGUAGE: sql
CODE:
CREATE TABLE weather_data (
    reading_id SERIAL PRIMARY KEY,
    temperature REAL NOT NULL,
    humidity REAL NOT NULL
);

INSERT INTO weather_data (temperature, humidity)
VALUES
    (23.5, 60.2),
    (20.1, 65.3),
    (22.8, 58.1);

----------------------------------------

TITLE: Setting Up Postgres Role Permissions
DESCRIPTION: SQL commands to configure permissions for authenticated and anonymous roles in the public schema.

LANGUAGE: sql
CODE:
GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to authenticated;

GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to anonymous;

ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO authenticated;

ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO anonymous;

GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO anonymous;

----------------------------------------

TITLE: Basic RIGHT() Function Syntax
DESCRIPTION: Demonstrates the basic syntax of the PostgreSQL RIGHT() function which takes a string and number of characters as arguments.

LANGUAGE: sql
CODE:
RIGHT(string, n)

----------------------------------------

TITLE: Updating and Returning Updated Row
DESCRIPTION: Updates a course's published_date and returns the entire updated row using the RETURNING clause.

LANGUAGE: sql
CODE:
UPDATE courses
SET published_date = '2020-07-01'
WHERE course_id = 2
RETURNING *;

----------------------------------------

TITLE: Calculating Distance from Origin Using PostgreSQL SQRT() Function
DESCRIPTION: This query uses the SQRT() function to calculate the distance of each point from the origin (0,0) in the coordinates table.

LANGUAGE: sql
CODE:
SELECT SQRT(x * x + y * y) AS distance_from_origin
FROM coordinates;

----------------------------------------

TITLE: Creating HNSW Index
DESCRIPTION: Creating an HNSW index for optimized vector similarity search.

LANGUAGE: sql
CODE:
CREATE INDEX ON items USING hnsw (embedding vector_l2_ops) WITH (m = 16, ef_construction = 64);

----------------------------------------

TITLE: Basic PostgreSQL UNION Example
DESCRIPTION: Demonstrates combining data from two tables using UNION operator, which automatically removes duplicate rows from the result set.

LANGUAGE: sql
CODE:
SELECT * FROM top_rated_films
UNION
SELECT * FROM most_popular_films;

----------------------------------------

TITLE: Querying Synchronized User Data in SQL
DESCRIPTION: This SQL query selects all columns from the neon_auth.users_sync table, which contains the synchronized user data from the authentication provider.

LANGUAGE: sql
CODE:
SELECT * FROM neon_auth.users_sync;

----------------------------------------

TITLE: Extracting Data from Interval
DESCRIPTION: Demonstrates how to extract specific fields from an interval value using the EXTRACT() function in PostgreSQL.

LANGUAGE: SQL
CODE:
SELECT
    EXTRACT (
        MINUTE
        FROM
            INTERVAL '5 hours 21 minutes'
    );

----------------------------------------

TITLE: Case-Insensitive Browser Detection with regexp_match()
DESCRIPTION: Shows how to use regexp_match() with the case-insensitive flag to extract browser information from user agent strings.

LANGUAGE: sql
CODE:
WITH user_agents AS (
  SELECT 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36' AS user_agent
  UNION ALL
  SELECT 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Mobile/15E148 Safari/604.1' AS user_agent
  UNION ALL
  SELECT 'CHROME/91.0.4472.124' AS user_agent
)
SELECT
  regexp_match(user_agent, '(chrome|safari|firefox|msie|opera)\/[\d\.]+', 'i') AS browser
FROM user_agents;

----------------------------------------

TITLE: Email Validation with regexp_match()
DESCRIPTION: Demonstrates using regexp_match() in a WHERE clause to filter email addresses based on specific domain extensions.

LANGUAGE: sql
CODE:
WITH emails AS (
  SELECT 'john.doe@example.com' AS email
  UNION ALL
  SELECT 'jane.smith@company.co.uk' AS email
  UNION ALL
  SELECT 'support@mydomain.io' AS email
)
SELECT *
FROM emails
WHERE regexp_match(email, '^[^@]+@[^@]+\.(com|org|io)$') IS NOT NULL;

----------------------------------------

TITLE: Inserting Login Records with current_timestamp
DESCRIPTION: Demonstrates inserting a login record using current_timestamp and viewing the results.

LANGUAGE: sql
CODE:
INSERT INTO user_logins (user_id, login_time)
VALUES (1, current_timestamp);

SELECT * FROM user_logins;

----------------------------------------

TITLE: Listing Operations via Neon API
DESCRIPTION: cURL command to list operations for a specific project using the Neon API. Requires the project ID and an API key for authorization.

LANGUAGE: bash
CODE:
curl 'https://console.neon.tech/api/v2/projects/autumn-disk-484331/operations' \
  -H 'Accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY"

----------------------------------------

TITLE: Formatting Customer Names Using FORMAT
DESCRIPTION: Demonstrates using FORMAT() with table data to combine first and last names into full names.

LANGUAGE: sql
CODE:
SELECT
    FORMAT('%s, %s',last_name, first_name) full_name
FROM
    customer
ORDER BY
    full_name;

----------------------------------------

TITLE: Checking for Missing Indexes in Postgres
DESCRIPTION: This SQL query identifies potential indexing opportunities by comparing sequential scans and index scans, suggesting to 'Check indexes' when sequential scans exceed index scans.

LANGUAGE: sql
CODE:
SELECT
  relname AS table_name,
  CASE
    WHEN seq_scan > COALESCE(idx_scan, 0) THEN 'Check indexes'
    ELSE 'OK'
  END AS recommendation
FROM
  pg_stat_user_tables
WHERE
  schemaname = 'public' -- Adjust as necessary for your schema
ORDER BY
  (seq_scan - COALESCE(idx_scan, 0)) DESC
LIMIT 10; -- Adjust as necessary for the number of results

----------------------------------------

TITLE: Renaming PostgreSQL Tablespace
DESCRIPTION: This snippet shows how to rename a tablespace in PostgreSQL using the ALTER TABLESPACE RENAME TO statement. It requires specifying the current tablespace name and the new name.

LANGUAGE: sql
CODE:
ALTER TABLESPACE tablespace_name
RENAME TO new_name;

----------------------------------------

TITLE: Defining Database Schema with Drizzle ORM
DESCRIPTION: TypeScript code defining the database schema for user messages using Drizzle ORM.

LANGUAGE: typescript
CODE:
import { pgTable, text, timestamp } from 'drizzle-orm/pg-core';

export const UserMessages = pgTable('user_messages', {
  user_id: text('user_id').primaryKey().notNull(),
  createTs: timestamp('create_ts').defaultNow().notNull(),
  message: text('message').notNull(),
});

----------------------------------------

TITLE: Implementing Membership Creation Trigger Function
DESCRIPTION: Creates a trigger function that automatically inserts a free membership when a new member is added.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION create_membership_after_insert()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO memberships (member_id)
    VALUES (NEW.id);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

----------------------------------------

TITLE: Using PostgreSQL IN Operator with Numbers
DESCRIPTION: This snippet demonstrates how to use the IN operator to retrieve information about films with specific IDs.

LANGUAGE: sql
CODE:
SELECT
  film_id,
  title
FROM
  film
WHERE
  film_id in (1, 2, 3);

----------------------------------------

TITLE: Using json_serialize() for Data Export Preparation in PostgreSQL
DESCRIPTION: Demonstrates a practical use case of json_serialize() in preparing JSON data from a table for export or further processing.

LANGUAGE: sql
CODE:
-- Create a table with JSON data
CREATE TABLE events (
    id SERIAL PRIMARY KEY,
    event_data json
);

-- Insert sample data
INSERT INTO events (event_data) VALUES
    ('{"type": "login", "user_id": 123}'),
    ('{"type": "purchase", "amount": 99.99}');

-- Export data in specific format
SELECT id, json_serialize(event_data RETURNING text)
FROM events;

----------------------------------------

TITLE: Basic PostgreSQL EXCEPT Syntax
DESCRIPTION: Shows the fundamental syntax for using the EXCEPT operator to compare two query results.

LANGUAGE: sql
CODE:
SELECT select_list
FROM A
EXCEPT
SELECT select_list
FROM B;

----------------------------------------

TITLE: Neon Postgres Connection String Example
DESCRIPTION: Example of a Neon Postgres connection string containing the host, user, password, and database name. This string is used to establish a connection between AskYourDatabase and Neon Postgres.

LANGUAGE: text
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname

----------------------------------------

TITLE: Creating and Populating a Sample Table for REPLACE() Function
DESCRIPTION: Creates a 'posts' table with 'id', 'title', and 'url' columns, and inserts sample data to demonstrate the REPLACE() function on table data.

LANGUAGE: SQL
CODE:
CREATE TABLE posts(
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    url VARCHAR(255) NOT NULL
);

INSERT INTO posts(title, url)
VALUES
('PostgreSQL Tutorial', 'http://neon.tech/postgresql'),
('PL/pgSQL', 'http://neon.tech/postgresql/postgresql-plpgsql/'),
('PostgreSQL Administration
', 'http://neon.tech/postgresql/postgresql-administration/')
RETURNING *;

----------------------------------------

TITLE: Creating a Table with Fixed-Size Array in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates that PostgreSQL allows defining array size in the schema, but does not enforce it during insertion.

LANGUAGE: sql
CODE:
CREATE TABLE test_size (
  id SERIAL PRIMARY KEY,
  arr1 INTEGER[3]
);
INSERT INTO test_size (arr1)
VALUES (ARRAY[1,2,3]), (ARRAY[1,2]);

----------------------------------------

TITLE: Basic PostgreSQL REPLACE() Function Example
DESCRIPTION: Demonstrates a simple use of the REPLACE() function to replace all occurrences of 'A' with 'Z' in the string 'ABC AA'.

LANGUAGE: SQL
CODE:
SELECT REPLACE ('ABC AA', 'A', 'Z');

----------------------------------------

TITLE: Executing Authorized Queries in Client Component
DESCRIPTION: Shows how to run authorized queries from a client component using AWS Cognito session tokens. This includes fetching the Cognito session, creating a database connection with the token, and querying todos based on user authentication.

LANGUAGE: typescript
CODE:
'use client';

import type { Todo } from '@/app/schema';
import { neon } from '@neondatabase/serverless';
import { getCurrentUser, fetchAuthSession } from 'aws-amplify/auth';
import { useEffect, useState } from 'react';

const getDb = (token: string) =>
  neon(process.env.NEXT_PUBLIC_DATABASE_AUTHENTICATED_URL!, {
    authToken: token,
  });

export default function TodoList() {
  const [todos, setTodos] = useState<Array<Todo>>();

  useEffect(() => {
    async function fetchTodos() {
      const session = await fetchAuthSession();
      const user = await getCurrentUser();

      if (!session?.tokens?.accessToken || !user) {
        return;
      }

      const authToken = session.tokens.accessToken.toString();
      const sql = getDb(authToken);

      // WHERE filter is optional because of RLS.
      // But we send it anyway for performance reasons.
      const todosResponse = await
        sql('SELECT * FROM todos WHERE user_id = auth.user_id()');

      setTodos(todosResponse as Array<Todo>);
    }

    fetchTodos();
  }, []);

  return (
    <ul>
      {todos?.map((todo) => (
        <li key={todo.id}>
          {todo.task}
        </li>
      ))}
    </ul>
  );
}

----------------------------------------

TITLE: Basic Syntax of IS NOT NULL Operator in PostgreSQL
DESCRIPTION: This snippet demonstrates the syntax for using the IS NOT NULL operator to check if a value is not NULL.

LANGUAGE: php
CODE:
value IS NOT NULL

----------------------------------------

TITLE: Creating a Table with JSONB Column in PostgreSQL
DESCRIPTION: Creates a table named 'employees' with a JSONB column to store employee skills for demonstrating jsonb_array_elements() with table data.

LANGUAGE: SQL
CODE:
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    skills JSONB
);

----------------------------------------

TITLE: Neon Postgres Connection String Format
DESCRIPTION: The format of the Neon Postgres connection string provided when creating a new project. This string is essential for connecting the application to the database.

LANGUAGE: bash
CODE:
postgresql://[user]:[password]@[neon_hostname]/[dbname]

----------------------------------------

TITLE: Configuring NestJS App Module
DESCRIPTION: Main application module configuration integrating database components

LANGUAGE: typescript
CODE:
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { DatabaseModule } from './database/database.module';

@Module({
  imports: [DatabaseModule],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

----------------------------------------

TITLE: Identifying Most Time-Consuming Queries in Neon Postgres
DESCRIPTION: SQL query to find the top 10 most time-consuming queries. It returns user ID, query text, call count, total execution time, and rows affected, ordered by total execution time in descending order.

LANGUAGE: sql
CODE:
SELECT
  userid,
  query,
  calls,
  total_exec_time,
  rows
FROM
  pg_stat_statements
ORDER BY
  total_exec_time DESC
LIMIT 10;

----------------------------------------

TITLE: Removing a Role with Dependent Objects in PostgreSQL
DESCRIPTION: This sequence of SQL commands demonstrates how to properly remove a role that owns database objects by reassigning ownership, dropping owned objects, and then dropping the role.

LANGUAGE: sql
CODE:
reassign owned by alice to postgres;

drop owned by alice;

drop role alice;

----------------------------------------

TITLE: Configuring Fly.io Deployment
DESCRIPTION: Fly.io configuration file (fly.toml) for deploying Umami using Docker container with service and port settings

LANGUAGE: toml
CODE:
# File: fly.toml

kill_signal = "SIGINT"
kill_timeout = "5s"

[experimental]
    auto_rollback = true

[build]
    image = "ghcr.io/umami-software/umami:postgresql-latest"

[[services]]
    protocol = "tcp"
    internal_port = 3000
    processes = ["app"]

[[services.ports]]
    port = 80
    handlers = ["http"]
    force_https = true

[[services.ports]]
    port = 443
    handlers = ["tls", "http"]

[services.concurrency]
    type = "connections"
    hard_limit = 25
    soft_limit = 20

[[services.tcp_checks]]
    interval = "15s"
    timeout = "2s"
    grace_period = "1s"

----------------------------------------

TITLE: Generic Random Number Formula
DESCRIPTION: Generic formula to generate random number between any two integers using floor() and random().

LANGUAGE: sql
CODE:
SELECT floor(random() * (high-low+1) + low)::int;

----------------------------------------

TITLE: Finding Customers without High-Value Rentals
DESCRIPTION: Query using NOT EXISTS to find customers who have not made any payment more than 11.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  customer c
WHERE
  NOT EXISTS (
    SELECT
      1
    FROM
      payment p
    WHERE
      p.customer_id = c.customer_id
      AND amount > 11
  )
ORDER BY
  first_name,
  last_name;

----------------------------------------

TITLE: Copying PostgreSQL Table with Partial Data
DESCRIPTION: This SQL statement creates a new table and copies selected data from an existing table based on a specified condition.

LANGUAGE: sql
CODE:
CREATE TABLE new_table AS
SELECT
*
FROM
    existing_table
WHERE
    condition;

----------------------------------------

TITLE: Generating Random Integers in PostgreSQL
DESCRIPTION: Shows how to generate random integers between 1 and 100 using RANDOM() and FLOOR() functions.

LANGUAGE: sql
CODE:
SELECT floor(random() * 100) + 1 AS random_integer;

----------------------------------------

TITLE: Using row_to_json() with Table Data in PostgreSQL
DESCRIPTION: Shows how to use the row_to_json() function to convert multiple columns from a table query into JSON objects. This example uses a subquery to select specific columns from the film table.

LANGUAGE: SQL
CODE:
SELECT
  row_to_json(t) film
FROM
  (
    SELECT
      title,
      length
    FROM
      film
    ORDER BY
      title
  ) t;

----------------------------------------

TITLE: Adding a Role to a Group Role in PostgreSQL
DESCRIPTION: This snippet shows how to add an individual role to a group role using the GRANT statement. It also includes an example of creating a new role with LOGIN privilege.

LANGUAGE: sql
CODE:
GRANT group_role TO role;

LANGUAGE: sql
CODE:
GRANT sales TO alice;

LANGUAGE: sql
CODE:
CREATE ROLE alice
WITH LOGIN
PASSWORD 'SecurePass1';

LANGUAGE: sql
CODE:
CREATE ROLE alice
WITH LOGIN NOINHERIT
PASSWORD 'SecurePass1';

----------------------------------------

TITLE: Installing PostgreSQL Client Dependencies
DESCRIPTION: Commands for installing different PostgreSQL client libraries using npm

LANGUAGE: shell
CODE:
npm install pg
npm install postgres
npm install @neondatabase/serverless

----------------------------------------

TITLE: Rolling Back a Transaction in PostgreSQL
DESCRIPTION: This SQL snippet shows three equivalent ways to roll back a transaction in PostgreSQL using the ROLLBACK statement.

LANGUAGE: sql
CODE:
ROLLBACK;

-- Or more clear:

ROLLBACK TRANSACTION;

-- Or:

ROLLBACK WORK;

----------------------------------------

TITLE: Inserting Data into Users Table
DESCRIPTION: SQL command to insert a new user record into the 'users' table for testing the Kafka stream.

LANGUAGE: sql
CODE:
INSERT INTO users (username, email) VALUES ('Zhang', 'zhang@example.com');

----------------------------------------

TITLE: Basic PostgreSQL EXISTS Operator Syntax
DESCRIPTION: Demonstrates the basic syntax of the PostgreSQL EXISTS operator used in a WHERE clause of a SELECT statement.

LANGUAGE: sql
CODE:
SELECT
  select_list
FROM
  table1
WHERE
  EXISTS(
    SELECT
      select_list
    FROM
      table2
    WHERE
      condition
  );

----------------------------------------

TITLE: Extracting Quarter from Interval in PostgreSQL
DESCRIPTION: This example demonstrates how to extract the quarter from an interval using the EXTRACT() function.

LANGUAGE: sql
CODE:
SELECT
  EXTRACT(
    QUARTER
    FROM
      INTERVAL '6 years 5 months 4 days 3 hours 2 minutes 1 second'
  );

----------------------------------------

TITLE: Creating User Login Tracking Table
DESCRIPTION: Example of creating a table that uses timestamp with timezone for tracking user logins.

LANGUAGE: sql
CODE:
CREATE TABLE user_logins (
  user_id INT,
  login_time TIMESTAMP WITH TIME ZONE
);

----------------------------------------

TITLE: Generating Series with Step Value
DESCRIPTION: Example of generating a sequence with a step value of 2.

LANGUAGE: sql
CODE:
SELECT generate_series(1,10,2);

----------------------------------------

TITLE: Accessing Primary Database
DESCRIPTION: Example of how to bypass read replicas and access the primary database directly

LANGUAGE: bash
CODE:
const posts = await prisma.$primary().post.findMany()

----------------------------------------

TITLE: Memory Loading Analysis Example
DESCRIPTION: Complete example showing how to create a test table and analyze memory loading.

LANGUAGE: sql
CODE:
CREATE TABLE t_test AS
SELECT * FROM generate_series(1, 1000000) AS id;

LANGUAGE: sql
CODE:
SELECT pg_size_pretty(pg_relation_size('t_test')) AS table_size_pretty,
    pg_relation_size('t_test') AS table_size_bytes;

LANGUAGE: sql
CODE:
SELECT pg_prewarm('public.t_test') AS blocks_loaded;

LANGUAGE: sql
CODE:
SHOW block_size;

LANGUAGE: sql
CODE:
SELECT 4480 * 8192 AS loaded_data_bytes;

----------------------------------------

TITLE: Defining Objective Function for PyTorch Model Optimization
DESCRIPTION: Implements an objective function for optimizing hyperparameters of a PyTorch neural network model using Optuna, including number of layers, hidden units, and dropout ratios.

LANGUAGE: python
CODE:
import os
import optuna
from optuna.trial import TrialState
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import torch.utils.data
from torchvision import datasets
from torchvision import transforms


DEVICE = torch.device("cpu")
BATCHSIZE = 128
CLASSES = 10
DIR = os.getcwd()
EPOCHS = 10
N_TRAIN_EXAMPLES = BATCHSIZE * 30
N_VALID_EXAMPLES = BATCHSIZE * 10


def define_model(trial):
    n_layers = trial.suggest_int("n_layers", 1, 3)
    layers = []

    in_features = 28 * 28
    for i in range(n_layers):
        out_features = trial.suggest_int("n_units_l{}".format(i), 4, 128)
        layers.append(nn.Linear(in_features, out_features))
        layers.append(nn.ReLU())
        p = trial.suggest_float("dropout_l{}".format(i), 0.2, 0.5)
        layers.append(nn.Dropout(p))

        in_features = out_features
    layers.append(nn.Linear(in_features, CLASSES))
    layers.append(nn.LogSoftmax(dim=1))

    return nn.Sequential(*layers)


def get_mnist():
    train_loader = torch.utils.data.DataLoader(
        datasets.FashionMNIST(DIR, train=True, download=True, transform=transforms.ToTensor()),
        batch_size=BATCHSIZE,
        shuffle=True,
    )
    valid_loader = torch.utils.data.DataLoader(
        datasets.FashionMNIST(DIR, train=False, transform=transforms.ToTensor()),
        batch_size=BATCHSIZE,
        shuffle=True,
    )

    return train_loader, valid_loader


def objective(trial):
    model = define_model(trial).to(DEVICE)

    optimizer_name = trial.suggest_categorical("optimizer", ["Adam", "RMSprop", "SGD"])
    lr = trial.suggest_float("lr", 1e-5, 1e-1, log=True)
    optimizer = getattr(optim, optimizer_name)(model.parameters(), lr=lr)

    train_loader, valid_loader = get_mnist()

    for epoch in range(EPOCHS):
        model.train()
        for batch_idx, (data, target) in enumerate(train_loader):
            data, target = data.view(data.size(0), -1).to(DEVICE), target.to(DEVICE)

            optimizer.zero_grad()
            output = model(data)
            loss = F.nll_loss(output, target)
            loss.backward()
            optimizer.step()

        model.eval()
        correct = 0
        with torch.no_grad():
            for batch_idx, (data, target) in enumerate(valid_loader):
                if batch_idx * BATCHSIZE >= N_VALID_EXAMPLES:
                    break
                data, target = data.view(data.size(0), -1).to(DEVICE), target.to(DEVICE)
                output = model(data)
                pred = output.argmax(dim=1, keepdim=True)
                correct += pred.eq(target.view_as(pred)).sum().item()

        accuracy = correct / min(len(valid_loader.dataset), N_VALID_EXAMPLES)

        trial.report(accuracy, epoch)

        if trial.should_prune():
            raise optuna.exceptions.TrialPruned()

    return accuracy


if __name__ == "__main__":
    study = optuna.create_study(
        study_name="pytorch_example",
        storage=os.environ["DATABASE_URL"],
        load_if_exists=True,
        direction="maximize",
    )
    study.optimize(objective, n_trials=100, timeout=600)

----------------------------------------

TITLE: Defining Objective Function for PyTorch Model Optimization
DESCRIPTION: Implements an objective function for optimizing hyperparameters of a PyTorch neural network model using Optuna, including number of layers, hidden units, and dropout ratios.

LANGUAGE: python
CODE:
import os
import optuna
from optuna.trial import TrialState
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import torch.utils.data
from torchvision import datasets
from torchvision import transforms


DEVICE = torch.device("cpu")
BATCHSIZE = 128
CLASSES = 10
DIR = os.getcwd()
EPOCHS = 10
N_TRAIN_EXAMPLES = BATCHSIZE * 30
N_VALID_EXAMPLES = BATCHSIZE * 10


def define_model(trial):
    n_layers = trial.suggest_int("n_layers", 1, 3)
    layers = []

    in_features = 28 * 28
    for i in range(n_layers):
        out_features = trial.suggest_int("n_units_l{}".format(i), 4, 128)
        layers.append(nn.Linear(in_features, out_features))
        layers.append(nn.ReLU())
        p = trial.suggest_float("dropout_l{}".format(i), 0.2, 0.5)
        layers.append(nn.Dropout(p))

        in_features = out_features
    layers.append(nn.Linear(in_features, CLASSES))
    layers.append(nn.LogSoftmax(dim=1))

    return nn.Sequential(*layers)


def get_mnist():
    train_loader = torch.utils.data.DataLoader(
        datasets.FashionMNIST(DIR, train=True, download=True, transform=transforms.ToTensor()),
        batch_size=BATCHSIZE,
        shuffle=True,
    )
    valid_loader = torch.utils.data.DataLoader(
        datasets.FashionMNIST(DIR, train=False, transform=transforms.ToTensor()),
        batch_size=BATCHSIZE,
        shuffle=True,
    )

    return train_loader, valid_loader


def objective(trial):
    model = define_model(trial).to(DEVICE)

    optimizer_name = trial.suggest_categorical("optimizer", ["Adam", "RMSprop", "SGD"])
    lr = trial.suggest_float("lr", 1e-5, 1e-1, log=True)
    optimizer = getattr(optim, optimizer_name)(model.parameters(), lr=lr)

    train_loader, valid_loader = get_mnist()

    for epoch in range(EPOCHS):
        model.train()
        for batch_idx, (data, target) in enumerate(train_loader):
            data, target = data.view(data.size(0), -1).to(DEVICE), target.to(DEVICE)

            optimizer.zero_grad()
            output = model(data)
            loss = F.nll_loss(output, target)
            loss.backward()
            optimizer.step()

        model.eval()
        correct = 0
        with torch.no_grad():
            for batch_idx, (data, target) in enumerate(valid_loader):
                if batch_idx * BATCHSIZE >= N_VALID_EXAMPLES:
                    break
                data, target = data.view(data.size(0), -1).to(DEVICE), target.to(DEVICE)
                output = model(data)
                pred = output.argmax(dim=1, keepdim=True)
                correct += pred.eq(target.view_as(pred)).sum().item()

        accuracy = correct / min(len(valid_loader.dataset), N_VALID_EXAMPLES)

        trial.report(accuracy, epoch)

        if trial.should_prune():
            raise optuna.exceptions.TrialPruned()

    return accuracy


if __name__ == "__main__":
    study = optuna.create_study(
        study_name="pytorch_example",
        storage=os.environ["DATABASE_URL"],
        load_if_exists=True,
        direction="maximize",
    )
    study.optimize(objective, n_trials=100, timeout=600)

----------------------------------------

TITLE: Creating FTE View with CHECK OPTION
DESCRIPTION: Creates a view that filters for FTE employees with CHECK OPTION to enforce data consistency.

LANGUAGE: sql
CODE:
CREATE OR REPLACE VIEW fte AS
SELECT
  id,
  first_name,
  last_name,
  department_id,
  employee_type
FROM
  employees
WHERE
  employee_type = 'FTE'
WITH CHECK OPTION;

----------------------------------------

TITLE: Checking for Zero Payment Existence
DESCRIPTION: Example query using EXISTS to check if any payment with a value of zero exists in the payment table.

LANGUAGE: sql
CODE:
SELECT
  EXISTS(
    SELECT
      1
    FROM
      payment
    WHERE
      amount = 0
  );

----------------------------------------

TITLE: Inserting Multiple Rows and Returning Only IDs
DESCRIPTION: This example inserts three rows into the 'contacts' table and returns only the inserted IDs using the RETURNING clause.

LANGUAGE: sql
CODE:
INSERT INTO contacts (first_name, last_name, email)
VALUES
    ('Eva', 'Williams', '[[email protected]](../cdn-cgi/l/email-protection.html)'),
    ('Michael', 'Miller', '[[email protected]](../cdn-cgi/l/email-protection.html)'),
    ('Sophie', 'Davis', '[[email protected]](../cdn-cgi/l/email-protection.html)')
RETURNING id;

----------------------------------------

TITLE: Inserting Sample Data into Employee Table
DESCRIPTION: Inserts sample hierarchical employee data into the 'employees' table to be used in the recursive query example.

LANGUAGE: SQL
CODE:
INSERT INTO employees (employee_id, full_name, manager_id)
VALUES
  (1, 'Michael North', NULL),
  (2, 'Megan Berry', 1),
  (3, 'Sarah Berry', 1),
  (4, 'Zoe Black', 1),
  (5, 'Tim James', 1),
  (6, 'Bella Tucker', 2),
  (7, 'Ryan Metcalfe', 2),
  (8, 'Max Mills', 2),
  (9, 'Benjamin Glover', 2),
  (10, 'Carolyn Henderson', 3),
  (11, 'Nicola Kelly', 3),
  (12, 'Alexandra Climo', 3),
  (13, 'Dominic King', 3),
  (14, 'Leonard Gray', 4),
  (15, 'Eric Rampling', 4),
  (16, 'Piers Paige', 7),
  (17, 'Ryan Henderson', 7),
  (18, 'Frank Tucker', 8),
  (19, 'Nathan Ferguson', 8),
  (20, 'Kevin Rampling', 8);

----------------------------------------

TITLE: Creating Employee Table in PostgreSQL
DESCRIPTION: Creates a table structure for storing employee information with fields for ID, name, department, and salary.

LANGUAGE: sql
CODE:
CREATE TABLE employees (
    id INT,
    name TEXT,
    department TEXT,
    salary NUMERIC
);

----------------------------------------

TITLE: Complex Product Sales Aggregation
DESCRIPTION: Complex example combining array_agg() with subqueries to create formatted product sales arrays by category.

LANGUAGE: sql
CODE:
WITH sales(category, product, price, sale_date) AS (
  VALUES
    ('Electronics', 'Laptop', 1200, '2023-01-15'::date),
    ('Electronics', 'Smartphone', 800, '2023-01-20'::date),
    ('Electronics', 'Tablet', 500, '2023-02-10'::date),
    ('Books', 'Novel', 20, '2023-02-05'::date),
    ('Books', 'Textbook', 100, '2023-02-15'::date),
    ('Books', 'Cookbook', 30, '2023-03-01'::date)
)
SELECT
  category,
  array_agg(
    (SELECT product || ': ' || SUM(price)::text
     FROM sales s2
     WHERE s2.category = s1.category AND s2.product = s1.product
     GROUP BY s2.product)
  ) AS product_sales
FROM sales s1
GROUP BY category;

----------------------------------------

TITLE: Basic CROSS JOIN Example
DESCRIPTION: Demonstrates a simple CROSS JOIN between T1 and T2 tables.

LANGUAGE: sql
CODE:
SELECT *
FROM T1
CROSS JOIN T2;

----------------------------------------

TITLE: POWER() with Fractional Exponent
DESCRIPTION: Demonstrates using POWER() function with fractional exponents.

LANGUAGE: sql
CODE:
SELECT POWER(2, 1.5);

----------------------------------------

TITLE: Creating JSON Array with Mixed Data Types
DESCRIPTION: Shows how to create a JSON array containing different data types including numbers, null values, strings, and booleans using jsonb_build_array().

LANGUAGE: sql
CODE:
SELECT jsonb_build_array(10, null, 'Hi', true) result;

----------------------------------------

TITLE: Basic PostgreSQL GRANT Statement Syntax
DESCRIPTION: This snippet shows the basic syntax for granting privileges on a table to a role in PostgreSQL.

LANGUAGE: sql
CODE:
GRANT privilege_list | ALL
ON  table_name
TO  role_name;

----------------------------------------

TITLE: Implementing Database Query Route
DESCRIPTION: Route implementation for executing database queries using different clients

LANGUAGE: javascript
CODE:
import { pool } from '~/db.server';
import { json } from '@remix-run/node';
import { useLoaderData } from '@remix-run/react';

export const loader = async () => {
  const client = await pool.connect();
  try {
    const response = await client.query('SELECT version()');
    return response.rows[0].version;
  } finally {
    client.release();
  }
};

export default function Page() {
  const data = useLoaderData();
  return <>{data}</>;
}

LANGUAGE: javascript
CODE:
import { sql } from '~/db.server';
import { json } from '@remix-run/node';
import { useLoaderData } from '@remix-run/react';

export const loader = async () => {
  const response = await sql`SELECT version()`;
  return response[0].version;
};

export default function Page() {
  const data = useLoaderData();
  return <>{data}</>;
}

----------------------------------------

TITLE: Creating a Neon Branch using CLI
DESCRIPTION: Command to create a new Neon branch named 'my_test_branch' using the Neon CLI. Requires specifying the project ID.

LANGUAGE: bash
CODE:
neon branches create --project-id <project-id> --name my_test_branch

----------------------------------------

TITLE: Implementing Django Views for Author and Book Listing
DESCRIPTION: Python code defining Django views to list authors and books, returning JSON responses with serialized data.

LANGUAGE: python
CODE:
from django.http import JsonResponse
from django.core import serializers
from .models import Author, Book

def list_authors(request):
    authors = Author.objects.all()
    data = [serializers.serialize('json', authors)]
    return JsonResponse(data, safe=False)

def list_books_by_author(request, author_id):
    books = Book.objects.filter(author_id=author_id)
    data = [serializers.serialize('json', books)]
    return JsonResponse(data, safe=False)

----------------------------------------

TITLE: Running Wrangler CLI Commands for Cloudflare Workers
DESCRIPTION: Various Wrangler CLI commands used for local development, authentication, secret management, and deployment of the Cloudflare Worker application.

LANGUAGE: bash
CODE:
npm create cloudflare@latest

LANGUAGE: bash
CODE:
npm install @neondatabase/serverless

LANGUAGE: bash
CODE:
npx wrangler dev

LANGUAGE: bash
CODE:
npx wrangler login

LANGUAGE: bash
CODE:
npx wrangler secret put DATABASE_URL

LANGUAGE: bash
CODE:
npx wrangler deploy

----------------------------------------

TITLE: Inserting a Row to Trigger Notifications in Postgres
DESCRIPTION: This code inserts a row into the Postgres table, which triggers the notification process. It uses the pg library to connect to the database and execute an INSERT query.

LANGUAGE: javascript
CODE:
// File: send.js

// Load all the environment variables
require('dotenv').config();

const { Client } = require('pg');

const connectionString = process.env.DATABASE_URL;

const client = new Client({ connectionString });

async function insertRow(message) {
  try {
    // Connect to Postgres
    await client.connect();
    // Insert a row into Postgres table
    await client.query('INSERT INTO my_table (message) VALUES ($1)', [message]);
    console.log("Inserted a row in the 'my_table' table.");
    await client.end();
  } catch (e) {
    console.log(e);
  }
}

insertRow('Hello, world!').catch(console.log);

----------------------------------------

TITLE: Creating a Cursor for PostgreSQL Queries in Python
DESCRIPTION: Shows how to create a cursor object from a PostgreSQL connection. The cursor is used to execute SQL statements and manage the context of a fetch operation.

LANGUAGE: python
CODE:
cur = conn.cursor()

----------------------------------------

TITLE: Basic Usage of jsonb_array_length() Function in PostgreSQL
DESCRIPTION: Demonstrates how to use the jsonb_array_length() function to count elements in a simple JSON array.

LANGUAGE: sql
CODE:
SELECT jsonb_array_length('[1,2,3]');

----------------------------------------

TITLE: Querying Hierarchical Data in Postgres using ltree
DESCRIPTION: This SQL query retrieves all subcategories under a given path using the ltree '<@' operator.

LANGUAGE: sql
CODE:
SELECT * FROM categories WHERE path <@ 'Electronics.Laptops';

----------------------------------------

TITLE: Creating a 'Hello Neon' program with psycopg2 in Python
DESCRIPTION: This Python script demonstrates how to connect to a Neon database using psycopg2, execute a simple query, and print the results. It includes connection string setup and error handling for Ctrl-C interrupts.

LANGUAGE: python
CODE:
import psycopg2

# Optional: tell psycopg2 to cancel the query on Ctrl-C
import psycopg2.extras; psycopg2.extensions.set_wait_callback(psycopg2.extras.wait_select)

# You can set the password to None if it is specified in a ~/.pgpass file
USERNAME = "alex"
PASSWORD = "AbC123dEf"
HOST = "@ep-cool-darkness-123456.us-east-2.aws.neon.tech"
PORT = "5432"
PROJECT = "dbname"

conn_str = f"dbname={PROJECT} user={USERNAME} password={PASSWORD} host={HOST} port={PORT} sslmode=require"

conn = psycopg2.connect(conn_str)

with conn.cursor() as cur:
 cur.execute("SELECT 'hello neon';")
 print(cur.fetchall())

----------------------------------------

TITLE: Creating and Populating Sample Inventory Table
DESCRIPTION: SQL commands to create an inventory table and insert sample data for testing wal2json functionality.

LANGUAGE: sql
CODE:
CREATE TABLE inventory (
    id SERIAL PRIMARY KEY,
    product_name VARCHAR(100),
    quantity INTEGER,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO inventory (product_name, quantity) VALUES
    ('Widget A', 100),
    ('Gadget B', 50),
    ('Gizmo C', 75);

----------------------------------------

TITLE: Defining json_extract_path_text() Function Signature in SQL
DESCRIPTION: Shows the function signature for json_extract_path_text(), which accepts a JSON object and a variadic list of path elements to extract a text value.

LANGUAGE: sql
CODE:
json_extract_path_text(from_json json, VARIADIC path_elems text[]) -> TEXT

----------------------------------------

TITLE: Calculating Ages in PostgreSQL
DESCRIPTION: These queries show how to use the AGE() function to calculate ages from birth dates in various ways.

LANGUAGE: sql
CODE:
SELECT
	employee_id,
	first_name,
	last_name,
	AGE(birth_date)
FROM
	employees;

SELECT
  employee_id,
  first_name,
  last_name,
  age('2015-01-01', birth_date)
FROM
  employees;

----------------------------------------

TITLE: Creating a Neon Project
DESCRIPTION: Creates a new Neon project with optional specifications for name, region, organization, and database settings. Supports immediate psql connection and context setting.

LANGUAGE: bash
CODE:
neon projects create [options]

----------------------------------------

TITLE: PostgreSQL LIMIT with OFFSET Syntax
DESCRIPTION: Demonstrates how to use LIMIT with OFFSET to skip a number of rows before returning the limited result set

LANGUAGE: sql
CODE:
SELECT
  select_list
FROM
  table_name
ORDER BY
  sort_expression
LIMIT
  row_count
OFFSET
  row_to_skip;

----------------------------------------

TITLE: PL/pgSQL Continue Statement Example - Printing Odd Numbers
DESCRIPTION: Example demonstrating how to use the continue statement in an unconditional loop to print odd numbers from 1 to 10. The code uses mod() function to check for even numbers and skips them.

LANGUAGE: sql
CODE:
do
$$
declare
   counter int = 0;
begin

  loop
     counter = counter + 1;

	 -- exit the loop if counter > 10
	 exit when counter > 10;

	 -- skip the current iteration if counter is an even number
	 continue when mod(counter,2) = 0;

	 -- print out the counter
	 raise notice '%', counter;
  end loop;
end;

$$;

----------------------------------------

TITLE: Granting Schema Access for Replication
DESCRIPTION: Grants necessary schema and table access permissions to the replication user for the public schema.

LANGUAGE: sql
CODE:
GRANT USAGE ON SCHEMA public TO replication_user;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO replication_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO replication_user;

----------------------------------------

TITLE: Implementing DELETE Function for Parts Table in Python
DESCRIPTION: A complete function that deletes a row from the 'parts' table based on the provided part_id, using psycopg2 and error handling.

LANGUAGE: python
CODE:
import psycopg2
from config import load_config


def delete_part(part_id):
    """ Delete part by part id """

    rows_deleted  = 0
    sql = 'DELETE FROM parts WHERE part_id = %s'
    config = load_config()

    try:
        with  psycopg2.connect(**config) as conn:
            with  conn.cursor() as cur:
                # execute the UPDATE statement
                cur.execute(sql, (part_id,))
                rows_deleted = cur.rowcount

            # commit the changes to the database
            conn.commit()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        return rows_deleted

if __name__ == '__main__':
    deleted_rows = delete_part(2)
    print('The number of deleted rows: ', deleted_rows)

----------------------------------------

TITLE: MongoDB Connection String for FerretDB
DESCRIPTION: Connection string format for connecting to FerretDB using mongosh.

LANGUAGE: bash
CODE:
mongosh 'mongodb://<postgres-username>:<postgres-password>@127.0.0.1/ferretdb?authMechanism=PLAIN'

----------------------------------------

TITLE: Creating a Custom LCM Aggregate Function in PostgreSQL
DESCRIPTION: Defines a user-defined aggregate function 'lcm_agg' based on the built-in lcm() function for simplified LCM calculations on multiple numbers.

LANGUAGE: sql
CODE:
CREATE AGGREGATE lcm_agg(bigint) (
    SFUNC = lcm,
    STYPE = bigint
);

----------------------------------------

TITLE: Advanced Usage of extract() Function with Various Fields
DESCRIPTION: This snippet demonstrates how to use the extract() function with different fields to analyze various components of timestamps, from century to microseconds.

LANGUAGE: sql
CODE:
WITH sample_data(event_time) AS (
  VALUES
    ('2024-03-15 14:30:45.123456+00'::TIMESTAMP WITH TIME ZONE),
    ('2024-06-22 09:15:30.987654+00'::TIMESTAMP WITH TIME ZONE),
    ('2024-11-07 23:59:59.999999+00'::TIMESTAMP WITH TIME ZONE)
)
SELECT
  event_time,
  EXTRACT(CENTURY FROM event_time) AS century,
  EXTRACT(DECADE FROM event_time) AS decade,
  EXTRACT(YEAR FROM event_time) AS year,
  EXTRACT(QUARTER FROM event_time) AS quarter,
  EXTRACT(MONTH FROM event_time) AS month,
  EXTRACT(WEEK FROM event_time) AS week,
  EXTRACT(DAY FROM event_time) AS day,
  EXTRACT(HOUR FROM event_time) AS hour,
  EXTRACT(MINUTE FROM event_time) AS minute,
  EXTRACT(SECOND FROM event_time) AS second,
  EXTRACT(MILLISECONDS FROM event_time) AS milliseconds,
  EXTRACT(MICROSECONDS FROM event_time) AS microseconds
FROM sample_data;

----------------------------------------

TITLE: Resetting postgres User Password in PostgreSQL
DESCRIPTION: This SQL command changes the password for the postgres user. It should be executed after logging in without a password to set a new secure password.

LANGUAGE: sql
CODE:
postgres=# ALTER USER postgres WITH PASSWORD 'new_password';

----------------------------------------

TITLE: Creating Function with Custom Return Type
DESCRIPTION: Creates a function that returns the custom film_summary type with film information.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION get_film_summary (f_id INT)
    RETURNS film_summary AS
$$
SELECT
    film_id,
    title,
    release_year
FROM
    film
WHERE
    film_id = f_id ;
$$
LANGUAGE SQL;

----------------------------------------

TITLE: Creating Intervals from Table Data
DESCRIPTION: Example demonstrating how to use MAKE_INTERVAL with data stored in a table to create dynamic intervals.

LANGUAGE: sql
CODE:
SELECT
  MAKE_INTERVAL(
    year, month, 0, day, hour, minute, second
  ) AS interval_data
FROM
  time_data;

----------------------------------------

TITLE: Implementing TodoController with CRUD Operations
DESCRIPTION: C# controller class implementing CRUD operations for Todo items using Entity Framework and ASP.NET Core.

LANGUAGE: csharp
CODE:
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TodoApi.Data;
using TodoApi.Models;

namespace TodoApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class TodoController : ControllerBase
    {
        private readonly TodoDbContext _context;

        public TodoController(TodoDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<Todo>>> GetTodos()
        {
            return await _context.Todos.ToListAsync();
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<Todo>> GetTodo(int id)
        {
            var todo = await _context.Todos.FindAsync(id);
            if (todo == null)
            {
                return NotFound();
            }
            return todo;
        }

        [HttpPost]
        public async Task<ActionResult<Todo>> PostTodo(Todo todo)
        {
            _context.Todos.Add(todo);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetTodo), new { id = todo.Id }, todo);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> PutTodo(int id, Todo todo)
        {
            if (id != todo.Id)
            {
                return BadRequest();
            }
            _context.Entry(todo).State = EntityState.Modified;
            await _context.SaveChangesAsync();
            return NoContent();
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteTodo(int id)
        {
            var todo = await _context.Todos.FindAsync(id);
            if (todo == null)
            {
                return NotFound();
            }
            _context.Todos.Remove(todo);
            await _context.SaveChangesAsync();
            return NoContent();
        }
    }
}

----------------------------------------

TITLE: Creating Branch with Custom Settings
DESCRIPTION: Creates a new branch with a specified name and compute settings including autoscaling range.

LANGUAGE: bash
CODE:
neon branches create --name mybranch --cu 0.5-3

----------------------------------------

TITLE: Listing IP Addresses in the Allowlist
DESCRIPTION: The list subcommand displays the current IP allowlist for a Neon project. It supports options for specifying the project ID and output format.

LANGUAGE: bash
CODE:
neon ip-allow list [options]

LANGUAGE: bash
CODE:
neon ip-allow list --project-id cold-grass-40154007

LANGUAGE: bash
CODE:
neon ip-allow list --project-id cold-grass-40154007 --output json

----------------------------------------

TITLE: Establishing PostgreSQL Connection with JDBC
DESCRIPTION: Uses the DriverManager.getConnection() method to establish a connection to the PostgreSQL server.

LANGUAGE: java
CODE:
return DriverManager.getConnection(url, user, password);

----------------------------------------

TITLE: Querying Specific Row from PostgreSQL Table with PHP PDO
DESCRIPTION: This method retrieves a specific row from the 'stocks' table based on the primary key (id). It uses a prepared statement with parameter binding for secure querying and returns the result as an object.

LANGUAGE: PHP
CODE:
public function findByPK($id) {
    // prepare SELECT statement
    $stmt = $this->pdo->prepare('SELECT id, symbol, company
                                   FROM stocks
                                  WHERE id = :id');
    // bind value to the :id parameter
    $stmt->bindValue(':id', $id);

    // execute the statement
    $stmt->execute();

    // return the result set as an object
    return $stmt->fetchObject();
}

----------------------------------------

TITLE: Using jsonb_set() with Table Data
DESCRIPTION: Demonstrates how to use jsonb_set() to update JSON data stored in a table column.

LANGUAGE: sql
CODE:
CREATE TABLE employee_skills(
    id INT PRIMARY KEY,
    data JSONB
);

INSERT INTO employee_skills(id, data)
VALUES
   (1, '{"name": "John", "skills" : ["PostgreSQL", "API"]}'),
   (2, '{"name": "Jane", "skills" : ["SQL","Java"]}')
RETURNING *;

UPDATE
  employee_skills
SET
  data = jsonb_set(
    data, '{skills,0}', '"Web Dev"'
  )
WHERE
  id = 1
RETURNING *;

----------------------------------------

TITLE: Converting Date String with Different Format in PostgreSQL
DESCRIPTION: This example shows how to convert a date string with a different format (YYYY Mon DD) to a date value using the TO_DATE() function.

LANGUAGE: sql
CODE:
SELECT TO_DATE('2017 Feb 20','YYYY Mon DD');

----------------------------------------

TITLE: Creating a Products Table in PostgreSQL
DESCRIPTION: This SQL statement creates a table named 'products' with columns for id, name, and price.

LANGUAGE: sql
CODE:
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    price NUMERIC NOT NULL
);

----------------------------------------

TITLE: Configuring Liquibase Properties
DESCRIPTION: This snippet shows the contents of a 'liquibase.properties' file, which specifies the changelog file and the database URL for Liquibase to connect to a Neon database.

LANGUAGE: bash
CODE:
changeLogFile:dbchangelog.xml
url: jdbc:postgresql://ep-floral-poetry-66238369.us-east-2.aws.neon.tech/blog?user=alex&password=4GfNAqycba8P&sslmode=require

----------------------------------------

TITLE: Calculating String Distance with pg_trgm
DESCRIPTION: This SQL query calculates both the similarity and distance between two strings using pg_trgm functions and operators.

LANGUAGE: sql
CODE:
SELECT similarity('Hello', 'Halo') AS similarity, 'Hello' <-> 'Halo' AS distance;

----------------------------------------

TITLE: Establishing Named Connection with dblink_connect
DESCRIPTION: Creates a named connection to a remote Postgres database using dblink_connect. Includes host, port, database name, user, password, and SSL mode.

LANGUAGE: sql
CODE:
SELECT dblink_connect('my_remote_db', 'host=my_remote_host port=5432 dbname=my_remote_database user=my_remote_user password=my_remote_password sslmode=require');

----------------------------------------

TITLE: Creating Table with TIME Data Type
DESCRIPTION: Example of creating a table that uses TIME data type for storing shift schedules with start and end times.

LANGUAGE: sql
CODE:
CREATE TABLE shifts (
    id serial PRIMARY KEY,
    shift_name VARCHAR NOT NULL,
    start_at TIME NOT NULL,
    end_at TIME NOT NULL
);

----------------------------------------

TITLE: Creating and Populating Sales Table in PostgreSQL
DESCRIPTION: This snippet creates a 'sales' table with year, group_id, and amount columns, then inserts sample data for demonstration purposes.

LANGUAGE: sql
CODE:
CREATE TABLE sales(
	year SMALLINT CHECK(year > 0),
	group_id INT NOT NULL,
	amount DECIMAL(10,2) NOT NULL,
	PRIMARY KEY(year,group_id)
);

INSERT INTO
	sales(year, group_id, amount)
VALUES
	(2018,1,1474),
	(2018,2,1787),
	(2018,3,1760),
	(2019,1,1915),
	(2019,2,1911),
	(2019,3,1118),
	(2020,1,1646),
	(2020,2,1975),
	(2020,3,1516)
RETURNING *;

----------------------------------------

TITLE: Creating Table for RANK Function Demo
DESCRIPTION: Creates a sample table 'ranks' with a single VARCHAR column for demonstrating the RANK function.

LANGUAGE: sql
CODE:
CREATE TABLE ranks (
	c VARCHAR(10)
);

----------------------------------------

TITLE: Setting Project Context in CLI
DESCRIPTION: Command to set a default project context for the CLI session to avoid specifying project ID in every command.

LANGUAGE: bash
CODE:
neon set-context --project-id <project id>

----------------------------------------

TITLE: TRUNCATE with CASCADE Option
DESCRIPTION: Example showing how to truncate a table with foreign key references using the CASCADE option.

LANGUAGE: sql
CODE:
TRUNCATE TABLE orders CASCADE;

----------------------------------------

TITLE: Data Synchronization with dblink
DESCRIPTION: Inserts data from a remote table into a local staging table using dblink.

LANGUAGE: sql
CODE:
INSERT INTO local_staging_table (col1, col2)
SELECT remote_col1, remote_col2
FROM dblink('remote_db', 'SELECT col1, col2 FROM remote_table')
AS rt(remote_col1 INTEGER, remote_col2 TEXT);

----------------------------------------

TITLE: Converting Single Radian Value
DESCRIPTION: Example demonstrating conversion of 1 radian to degrees.

LANGUAGE: sql
CODE:
SELECT DEGREES(1);

----------------------------------------

TITLE: Running Pgloader Migration
DESCRIPTION: Shell command to execute the database migration using pgloader.

LANGUAGE: shell
CODE:
pgloader mssql_to_neon.load

----------------------------------------

TITLE: Using TRUNC() with Negative Precision in PostgreSQL
DESCRIPTION: This example illustrates how to use the TRUNC() function with a negative second argument, which affects digits to the left of the decimal point.

LANGUAGE: css
CODE:
SELECT
    TRUNC(150.45,-2)

----------------------------------------

TITLE: Establishing PostgreSQL Connection in Python
DESCRIPTION: Creates a new database connection to PostgreSQL server using psycopg2

LANGUAGE: python
CODE:
conn = psycopg2.connect(config)

----------------------------------------

TITLE: Creating Table with CURRENT_TIME Default
DESCRIPTION: Creates a log table using CURRENT_TIME as the default value for a time column.

LANGUAGE: sql
CODE:
CREATE TABLE log (
    id SERIAL PRIMARY KEY,
    message VARCHAR(255) NOT NULL,
    created_at TIME DEFAULT CURRENT_TIME,
    created_on DATE DEFAULT CURRENT_DATE
);

----------------------------------------

TITLE: Comparing Branch Schemas
DESCRIPTION: Compares database schemas between two branches showing differences in structure.

LANGUAGE: bash
CODE:
neon branches schema-diff main dev/alex

----------------------------------------

TITLE: Calculating Compound Interest
DESCRIPTION: Uses POWER() function to calculate compound interest on investments.

LANGUAGE: sql
CODE:
SELECT
    investment_amount,
    annual_interest_rate,
    years,
    ROUND(investment_amount * POWER(1 + (annual_interest_rate / 100), years), 2) AS future_value
FROM
    investments;

----------------------------------------

TITLE: Finding Row with Maximum Value in SQL
DESCRIPTION: This SQL query demonstrates how to retrieve the entire row containing the maximum value for a specific column (order_amount in this case) using a subquery with max().

LANGUAGE: sql
CODE:
SELECT *
FROM orders
WHERE order_amount = (SELECT max(order_amount) FROM orders);

----------------------------------------

TITLE: Trimming Spaces from Product Names in PostgreSQL
DESCRIPTION: Demonstrates how to use trim() to remove leading and trailing spaces from product names in a table.

LANGUAGE: sql
CODE:
WITH products(product_name) AS (
  VALUES
    ('  Laptop  '),
    ('Smartphone '),
    (' Tablet'),
    ('  Wireless Earbuds  ')
)
SELECT trim(product_name) AS cleaned_name
FROM products;

----------------------------------------

TITLE: Debugging Password Authentication Error in Neon RLS
DESCRIPTION: This error occurs when Neon can't find the expected JSON Web Key (JWK) based on its key ID in the Authorize configuration. It can be caused by misconfigured JWKS URL, JWT and JWKS mismatch, or unsupported role names.

LANGUAGE: bash
CODE:
NeonDbError: password authentication failed for user 'jwk not found'

----------------------------------------

TITLE: Updating Records in FerretDB
DESCRIPTION: Example of updating a single document in FerretDB using MongoDB update syntax.

LANGUAGE: json
CODE:
db.players.updateOne(
    { player_name: "Jordan" },
    { $set: { position: "SF" } }
);

----------------------------------------

TITLE: Post Model and Migration
DESCRIPTION: The Post model with its relationships and database migration schema

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    use HasFactory;

    protected $fillable = ['title', 'slug', 'content', 'is_published', 'published_at'];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function comments()
    {
        return $this->hasMany(Comment::class);
    }

    public function tags()
    {
        return $this->belongsToMany(Tag::class);
    }
}

----------------------------------------

TITLE: Querying Vendor Data Using fetchall() in PostgreSQL with Python
DESCRIPTION: Shows how to retrieve all rows from the vendors table at once using the fetchall() method. This function fetches all rows and stores them in memory.

LANGUAGE: python
CODE:
import psycopg2
from config import load_config

def get_vendors():
    """ Retrieve data from the vendors table """
    config  = load_config()
    try:
        with psycopg2.connect(**config) as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT vendor_id, vendor_name FROM vendors ORDER BY vendor_name")
                rows = cur.fetchall()

                print("The number of parts: ", cur.rowcount)
                for row in rows:
                    print(row)

    except (Exception, psycopg2.DatabaseError) as error:
        print(error)

if __name__ == '__main__':
    get_vendors()

----------------------------------------

TITLE: Extracting Keys from JSONB Column Using jsonb_object_keys() in PostgreSQL
DESCRIPTION: Demonstrates how to use jsonb_object_keys() to extract keys from JSON objects stored in a table column.

LANGUAGE: sql
CODE:
SELECT jsonb_object_keys(info)
FROM person;

----------------------------------------

TITLE: Basic PostgreSQL Database Owner Change Syntax
DESCRIPTION: Core SQL syntax for changing a database owner using ALTER DATABASE statement.

LANGUAGE: sql
CODE:
ALTER DATABASE dbname
OWNER TO new_owner;

----------------------------------------

TITLE: Basic DELETE Statement Construction in C#
DESCRIPTION: Shows how to construct a basic DELETE SQL statement in C#

LANGUAGE: sql
CODE:
var sql = "DELETE.. ";

----------------------------------------

TITLE: Querying PostgreSQL Uptime
DESCRIPTION: SQL query to calculate and display the PostgreSQL uptime by subtracting the server start time from the current timestamp.

LANGUAGE: SQL
CODE:
SELECT
  date_trunc(
    'second',
    current_timestamp - pg_postmaster_start_time()
  ) as uptime;

----------------------------------------

TITLE: Creating and Applying Database Migrations
DESCRIPTION: Commands to create and apply initial Entity Framework migrations.

LANGUAGE: bash
CODE:
dotnet ef migrations add InitialCreate
dotnet ef database update

----------------------------------------

TITLE: Dropping Subscription in Neon using SQL
DESCRIPTION: This SQL command drops the subscription 'neon_subscription' from the Neon database after migration is complete.

LANGUAGE: sql
CODE:
DROP SUBSCRIPTION neon_subscription;

----------------------------------------

TITLE: Creating Sample Data Seeder
DESCRIPTION: PHP code for a database seeder to populate the FeatureUsage and Subscription tables with sample data for testing.

LANGUAGE: php
CODE:
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\FeatureUsage;
use App\Models\Subscription;
use App\Models\User;
use Carbon\Carbon;

class SampleDataSeeder extends Seeder
{
    public function run()
    {
        // Create users
        $users = User::factory(10)->create();

        // Seed FeatureUsage data
        foreach ($users as $user) {
            for ($i = 0; $i < 5; $i++) {
                FeatureUsage::create([
                    'user_id' => $user->id,
                    'feature_name' => 'Feature ' . rand(1, 5),
                    'used_at' => Carbon::now()->subDays(rand(0, 30)),
                ]);
            }
        }

        // Seed Subscription data
        foreach ($users as $user) {
            Subscription::create([
                'user_id' => $user->id,
                'plan' => 'Basic',
                'started_at' => Carbon::now()->subMonths(2),
                'ended_at' => rand(0, 1) ? Carbon::now()->subMonth() : null,
            ]);
        }
    }
}

----------------------------------------

TITLE: Basic PostgreSQL DELETE JOIN Example
DESCRIPTION: Demonstrates how to use DELETE USING to delete rows from the 'member' table based on matching phone numbers in the 'denylist' table.

LANGUAGE: sql
CODE:
DELETE FROM member
USING denylist
WHERE member.phone = denylist.phone;

----------------------------------------

TITLE: Implementing Caching for Task List
DESCRIPTION: Adds caching to the index method of TaskController to improve performance for frequently accessed data.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Cache;

public function index()
{
    $tasks = Cache::remember('tasks', 3600, function () {
        return Task::paginate(15);
    });

    return TaskResource::collection($tasks);
}

----------------------------------------

TITLE: Inserting Data into a Table with GENERATED ALWAYS AS IDENTITY Column
DESCRIPTION: This example shows how to insert data into the 'color' table with an identity column. It also demonstrates the error that occurs when trying to insert a value into the identity column.

LANGUAGE: sql
CODE:
INSERT INTO color(color_name)
VALUES ('Red');

INSERT INTO color (color_id, color_name)
VALUES (2, 'Green');

----------------------------------------

TITLE: Using json_each() as a Table Source in PostgreSQL
DESCRIPTION: Demonstrates how to use json_each() in a FROM clause to join expanded JSON data with other tables.

LANGUAGE: sql
CODE:
CREATE TABLE user_data (
    id INT,
    profile JSON
);
INSERT INTO user_data (id, profile)
VALUES
    (123, '{"username": "johndoe", "age": 30, "email": "johndoe@example.com"}'),
    (140, '{"username": "mikesmith", "age": 40, "email": "mikesmith@example.com"}');

SELECT id, key, value
FROM user_data, json_each(user_data.profile);

----------------------------------------

TITLE: Connecting to PostgreSQL Server using psql
DESCRIPTION: This command shows how to connect to a PostgreSQL server using the psql command-line tool with the postgres user.

LANGUAGE: bash
CODE:
psql -U postgres

----------------------------------------

TITLE: Basic DIV() Function Usage in PostgreSQL
DESCRIPTION: Demonstrates the basic syntax and usage of the DIV() function for integer division.

LANGUAGE: sql
CODE:
SELECT DIV(10,3) as result;

----------------------------------------

TITLE: Python Implementation for Calling PostgreSQL Function
DESCRIPTION: Complete Python function that connects to PostgreSQL, calls a stored procedure, and processes results

LANGUAGE: python
CODE:
import psycopg2
from config import load_config


def get_parts(vendor_id):
    """ Get parts provided by a vendor specified by the vendor_id """
    parts = []
    # read database configuration
    params = load_config()
    try:
        # connect to the PostgreSQL database
        with  psycopg2.connect(**params) as conn:
            with conn.cursor() as cur:
                # create a cursor object for execution
                cur = conn.cursor()
                cur.callproc('get_parts_by_vendor', (vendor_id,))

                # process the result set
                row = cur.fetchone()
                while row is not None:
                    parts.append(row)
                    row = cur.fetchone()

    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        return parts

if __name__ == '__main__':
    parts = get_parts(1)
    print(parts)

----------------------------------------

TITLE: Project Duration Calculations using age()
DESCRIPTION: Advanced example showing how to use age() function to calculate project durations and remaining time until deadlines

LANGUAGE: sql
CODE:
WITH projects(name, start_date, deadline) AS (
    VALUES
        ('Project A', '2023-01-15'::DATE, '2024-06-30'::DATE),
        ('Project B', '2023-05-01'::DATE, '2023-12-31'::DATE),
        ('Project C', '2024-03-01'::DATE, '2025-02-28'::DATE)
)

SELECT
  name,
  start_date,
  deadline,
  age(deadline, start_date) AS total_duration,
  age(deadline, CURRENT_DATE) AS remaining_time
FROM projects;

----------------------------------------

TITLE: Declaring a PL/pgSQL Cursor
DESCRIPTION: Basic syntax for declaring a cursor in PL/pgSQL to define a result set query.

LANGUAGE: sql
CODE:
DECLARE cursor_name CURSOR FOR query;

----------------------------------------

TITLE: Creating and Populating a Products Table with Nested JSON Data in PostgreSQL
DESCRIPTION: This snippet shows how to create a 'products' table with a JSON column containing nested arrays for sizes and colors, and insert sample data.

LANGUAGE: sql
CODE:
CREATE TABLE products (
 id INTEGER PRIMARY KEY,
 name TEXT,
 details JSON
);

INSERT INTO products (id, name, details) VALUES
 (1, 'T-Shirt', '{"sizes": ["S", "M", "L", "XL"], "colors": ["Red", "Blue", "Green"]}'),
 (2, 'Hoodie', '{"sizes": ["XS", "S", "M", "L", "XL"], "colors": ["Black", "Gray"]}'),
 (3, 'Dress', '{"sizes": ["S", "M", "L"], "colors": ["Pink", "Purple", "Black"]}'),
 (4, 'Jeans', '{"sizes": ["28", "30", "32", "34"], "colors": ["Blue", "Black"]}'),
 (5, 'Jacket', '{"sizes": ["S", "M", "L", "XL"], "colors": ["Black", "Brown", "Navy"]}');

----------------------------------------

TITLE: CONCAT_WS with Table Data - SQL
DESCRIPTION: Demonstrates how to use CONCAT_WS to combine first_name and last_name columns from a customer table into a full name, using a space as the separator and ordering by first name.

LANGUAGE: sql
CODE:
SELECT
  CONCAT_WS(' ', first_name, last_name) full_name
FROM
  customer
ORDER BY
  first_name;

----------------------------------------

TITLE: Java Connection Timeout Configuration
DESCRIPTION: Shows how to set connection timeout properties in Java using JDBC

LANGUAGE: java
CODE:
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.Properties;

String dbUrl = System.getenv("DATABASE_URL");
Properties properties = new Properties();
properties.setProperty("connectTimeout", "10");

Connection conn = DriverManager.getConnection(dbUrl, properties);

----------------------------------------

TITLE: PostgreSQL ABS() Function with Decimal Number
DESCRIPTION: Example showing how to use the ABS() function with a negative decimal number.

LANGUAGE: sql
CODE:
SELECT ABS(-10.25) result;

----------------------------------------

TITLE: FaunaDB Data Export Script
DESCRIPTION: Node.js script to export data from FaunaDB collections to JSON files.

LANGUAGE: javascript
CODE:
import { Client, fql, FaunaError } from "fauna";
import fs from "fs";

const client = new Client();

const collectionsToExport = ["Product", "Category"];

for (const collectionName of collectionsToExport) {
  try {
    const query = fql`
      let collection = Collection(${collectionName})
      collection.all()`;

    const pages = client.paginate(query);

    const documents = [];
    for await (const page of pages.flatten()) {
      documents.push(page);
    }

    const jsonData = JSON.stringify(documents, null, 2);

    fs.writeFileSync(`${collectionName}.json`, jsonData, "utf-8");

    console.log(
      `${collectionName} collection data written to ${collectionName}.json`
    );
  } catch (error) {
    if (error instanceof FaunaError) {
      console.error(`Error exporting ${collectionName}:`, error);
    } else {
      console.error(
        `An unexpected error occurred for ${collectionName}:`,
        error
      );
    }
  }
}

client.close();

----------------------------------------

TITLE: Querying Point-in-Time Data with Neon CLI
DESCRIPTION: This snippet demonstrates how to use the Neon CLI to establish a connection to a specific point in a branch's history. It shows the basic command structure and provides examples for different use cases.

LANGUAGE: bash
CODE:
neon connection-string <branch>@<timestamp|LSN>

LANGUAGE: bash
CODE:
neon connetion-string main@2024-04-21T00:00:00Z

LANGUAGE: bash
CODE:
neon connection-string main@2024-01-01T00:00:00Z --psql

LANGUAGE: bash
CODE:
neon cs main@2024-01-01T00:00:00Z --psql

LANGUAGE: bash
CODE:
neon cs main@0/234235

LANGUAGE: bash
CODE:
neon connection-string <branch>@<timestamp|LSN> --project-id <project id>

LANGUAGE: bash
CODE:
neon cs main@2024-01-01T00:00:00Z --project-id noisy-pond-12345678

LANGUAGE: bash
CODE:
neon set-context --project-id <project id>

----------------------------------------

TITLE: Inserting Data into citext Table
DESCRIPTION: Demonstrates inserting sample user data into the table with citext email field.

LANGUAGE: sql
CODE:
INSERT INTO users (username, email)
VALUES
  ('johnsmith', 'JohnSmith@email.com'),
  ('AliceSmith', 'ALICE@example.com'),
  ('BobJohnson', 'Bob@example.com'),
  ('EveAnderson', 'eve@example.com');

----------------------------------------

TITLE: Basic PostgreSQL UPDATE Join Syntax
DESCRIPTION: Demonstrates the basic syntax for performing an UPDATE join in PostgreSQL. This query updates values in table1 based on matching conditions with table2.

LANGUAGE: sql
CODE:
UPDATE table1
SET table1.c1 = new_value
FROM table2
WHERE table1.c2 = table2.c2;

----------------------------------------

TITLE: Verifying Logical Replication in Neon (SQL)
DESCRIPTION: SQL query to check if logical replication is enabled by showing the wal_level setting.

LANGUAGE: sql
CODE:
SHOW wal_level;

----------------------------------------

TITLE: Processing Cursor Rows with Loop
DESCRIPTION: Example of processing cursor rows using a loop structure with exit condition.

LANGUAGE: sql
CODE:
LOOP
    -- Fetch the next row
    FETCH NEXT FROM cursor_name INTO variable_list;

    -- exit if not found
    EXIT WHEN NOT FOUND;

    -- Process the fetched row
    ...

END LOOP;

----------------------------------------

TITLE: Inserting Sample Employee Data with JSON Arrays
DESCRIPTION: Inserts sample employee records with phone numbers stored as JSON arrays.

LANGUAGE: sql
CODE:
INSERT INTO employees (name, phones)
VALUES
   ('John Doe', '["(408) 555-1111", "(408) 555-2222", "(408) 555-3333"]'),
   ('Jane Smith', '["(408) 666-1111", "(408) 666-2222", "(408) 666-3333"]')
RETURNING *;

----------------------------------------

TITLE: Deleting Database with Neon CLI
DESCRIPTION: Deletes a specified database using the Neon CLI delete command. The command requires the database name as an argument and returns the details of the deleted database.

LANGUAGE: bash
CODE:
neon databases delete mydb

----------------------------------------

TITLE: Creating a Table with INTEGER in PostgreSQL
DESCRIPTION: This SQL snippet shows how to create a table named 'cities' with an INTEGER column for storing population. It uses a CHECK constraint to ensure the population is non-negative.

LANGUAGE: sql
CODE:
CREATE TABLE cities (
    city_id serial PRIMARY KEY,
    city_name VARCHAR (255) NOT NULL,
    population INT NOT NULL CHECK (population >= 0)
);

----------------------------------------

TITLE: Initializing PostgreSQL Data Source Connection in C#
DESCRIPTION: Creates a connection to PostgreSQL database using NpgsqlDataSource

LANGUAGE: csharp
CODE:
await using var dataSource = NpgsqlDataSource.Create(connectionString);

----------------------------------------

TITLE: Calculating Building Volumes with SFCGAL
DESCRIPTION: SQL query using SFCGAL functions to calculate the volume of buildings by extruding their 2D footprints to their respective heights.

LANGUAGE: SQL
CODE:
SELECT
    name,
    height,
    ST_Area(footprint) AS base_area,
    ST_Volume(ST_Extrude(footprint, 0, 0, height)) AS volume
FROM buildings;

----------------------------------------

TITLE: PostgreSQL Database Connection Commands
DESCRIPTION: Command line instructions for connecting to PostgreSQL database using psql client and switching to the suppliers database.

LANGUAGE: bash
CODE:
psql -U postgres
\c suppliers

----------------------------------------

TITLE: Cloudflare Books Fetch Function
DESCRIPTION: Serverless function to fetch books from the Neon database using the Neon serverless driver.

LANGUAGE: javascript
CODE:
import { Client } from '@neondatabase/serverless';

export async function onRequestGet(context) {
  const client = new Client(context.env.DATABASE_URL);
  await client.connect();

  // Logic to fetch books from your database
  const { rows } = await client.query('SELECT * FROM books_to_read;');
  return new Response(JSON.stringify(rows));
}

----------------------------------------

TITLE: Creating and Populating Sample Table in PostgreSQL
DESCRIPTION: This snippet creates a 'cities' table and inserts sample data. It demonstrates table creation with a primary key and multiple INSERT statements.

LANGUAGE: phpsql
CODE:
CREATE TABLE cities (
    id SERIAL PRIMARY KEY ,
    name VARCHAR(255),
    population INT,
    country VARCHAR(50)
);

INSERT INTO cities (name, population, country)
VALUES
    ('New York', 8419600, 'US'),
    ('Los Angeles', 3999759, 'US'),
    ('Chicago', 2716000, 'US'),
    ('Houston', 2323000, 'US'),
    ('London', 8982000, 'UK'),
    ('Manchester', 547627, 'UK'),
    ('Birmingham', 1141816, 'UK'),
    ('Glasgow', 633120, 'UK'),
    ('San Francisco', 884363, 'US'),
    ('Seattle', 744955, 'US'),
    ('Liverpool', 498042, 'UK'),
    ('Leeds', 789194, 'UK'),
    ('Austin', 978908, 'US'),
    ('Boston', 694583, 'US'),
    ('Manchester', 547627, 'UK'),
    ('Sheffield', 584853, 'UK'),
    ('Philadelphia', 1584138, 'US'),
    ('Phoenix', 1680992, 'US'),
    ('Bristol', 463377, 'UK'),
    ('Detroit', 673104, 'US');

SELECT * FROM cities;

----------------------------------------

TITLE: Implementing API Versioning
DESCRIPTION: Updates routes to include versioning, allowing for future API versions without breaking existing clients.

LANGUAGE: php
CODE:
use App\Http\Controllers\Api\V1\TaskController;

Route::prefix('v1')->group(function () {
    Route::post('/register', [AuthController::class, 'register']);
    Route::post('/login', [AuthController::class, 'login']);

    Route::middleware('auth:sanctum')->group(function () {
        Route::post('/logout', [AuthController::class, 'logout']);
        Route::apiResource('tasks', \App\Http\Controllers\Api\V1\TaskController::class);
    });
});

----------------------------------------

TITLE: Cart Items Table Creation and Population
DESCRIPTION: Creates and populates a cart_items table to demonstrate more complex array_to_json usage with array_agg.

LANGUAGE: sql
CODE:
CREATE TABLE cart_items (
 id SERIAL PRIMARY KEY,
 user_id INTEGER NOT NULL,
 product_id INTEGER NOT NULL,
 quantity INTEGER NOT NULL
);

INSERT INTO cart_items (user_id, product_id, quantity)
VALUES (1, 123, 1), (1, 456, 2), (1, 789, 3);

INSERT INTO cart_items (user_id, product_id, quantity)
VALUES (2, 123, 2), (2, 456, 3), (2, 789, 4);

----------------------------------------

TITLE: POWER() with Negative Exponent
DESCRIPTION: Shows how to use POWER() function with negative exponents.

LANGUAGE: sql
CODE:
SELECT POWER(10, -2);

----------------------------------------

TITLE: Creating and Updating Tenant Model
DESCRIPTION: PHP code for the Tenant model, extending the base Tenant model and implementing necessary interfaces and traits.

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Stancl\Tenancy\Database\Models\Tenant as BaseTenant;
use Stancl\Tenancy\Contracts\TenantWithDatabase;
use Stancl\Tenancy\Database\Concerns\HasDatabase;
use Stancl\Tenancy\Database\Concerns\HasDomains;

class Tenant extends BaseTenant implements TenantWithDatabase
{
    use HasFactory, HasDatabase, HasDomains;

}

----------------------------------------

TITLE: Creating Employees Table in PostgreSQL
DESCRIPTION: This SQL statement creates a new table called 'employees' with an auto-incrementing id, first name, and last name columns.

LANGUAGE: sql
CODE:
CREATE TABLE employees(
   id INT GENERATED ALWAYS AS IDENTITY,
   first_name VARCHAR(40) NOT NULL,
   last_name VARCHAR(40) NOT NULL,
   PRIMARY KEY(id)
);

----------------------------------------

TITLE: Checking Current Connections
DESCRIPTION: SQL query to view currently open connections for a specific database.

LANGUAGE: sql
CODE:
SELECT usename FROM pg_stat_activity WHERE datname = '<database_name>';

----------------------------------------

TITLE: Alternative SUBSTRING() Syntax in PostgreSQL
DESCRIPTION: Shows an alternative syntax for the SUBSTRING() function using the FROM and FOR keywords.

LANGUAGE: sql
CODE:
SELECT
  SUBSTRING ('PostgreSQL' FROM 1 FOR 8),
  SUBSTRING ('PostgreSQL' FROM 8);

----------------------------------------

TITLE: Querying Views using SQL
DESCRIPTION: SQL query to list views from the information schema, excluding system schemas. It returns the schema and name of each view.

LANGUAGE: sql
CODE:
SELECT
  table_schema,
  table_name
FROM
  information_schema.views
WHERE
  table_schema NOT IN (
    'information_schema', 'pg_catalog'
  )
ORDER BY
  table_schema,
  table_name;

----------------------------------------

TITLE: Creating Index on citext Column
DESCRIPTION: Creates a B-tree index on the citext email column for improved query performance.

LANGUAGE: sql
CODE:
CREATE INDEX idx_email ON users USING btree(email);

----------------------------------------

TITLE: Creating Sample Table for Text Search
DESCRIPTION: Generates a test table named 'mock_items' with sample data for demonstrating text search functionality.

LANGUAGE: sql
CODE:
CALL paradedb.create_bm25_test_table(
  schema_name => 'public',
  table_name => 'mock_items'
);

----------------------------------------

TITLE: Creating Migration for Adding Soft Deletes to Existing Table in Laravel
DESCRIPTION: This command creates a new migration file to add the deleted_at column to an existing posts table.

LANGUAGE: bash
CODE:
php artisan make:migration add_soft_deletes_to_posts_table --table=posts

----------------------------------------

TITLE: Demonstrating Inexact Storage of DOUBLE PRECISION Values in PostgreSQL
DESCRIPTION: This set of queries creates a table with a DOUBLE PRECISION column, inserts multiple 0.1 values, and calculates their sum to demonstrate the inexact nature of DOUBLE PRECISION storage.

LANGUAGE: SQL
CODE:
CREATE TABLE t(c double precision);

LANGUAGE: SQL
CODE:
INSERT INTO t(c) VALUES(0.1), (0.1), (0.1)
RETURNING *;

LANGUAGE: SQL
CODE:
SELECT SUM(c) FROM t;

----------------------------------------

TITLE: Creating a Table with DATE Column in PostgreSQL
DESCRIPTION: This snippet demonstrates how to create a table with a DATE column that uses the current date as the default value.

LANGUAGE: sql
CODE:
CREATE TABLE documents (
  document_id SERIAL PRIMARY KEY,
  header_text VARCHAR (255) NOT NULL,
  posting_date DATE NOT NULL DEFAULT CURRENT_DATE
);

----------------------------------------

TITLE: Setting Timezone and Using NOW()
DESCRIPTION: Demonstrates how to set a specific timezone and then use the NOW() function to get the current date and time adjusted to that timezone.

LANGUAGE: sql
CODE:
SET TIMEZONE='Africa/Cairo';
SELECT NOW();

----------------------------------------

TITLE: Querying JSON Data with jsonb_array_length() in PostgreSQL
DESCRIPTION: Demonstrates how to use jsonb_array_length() in combination with jsonb_path_query() to extract and count nested array elements from JSON data stored in a table.

LANGUAGE: sql
CODE:
SELECT
  jsonb_path_query(info, '$.name') name,
  jsonb_array_length(
    jsonb_path_query(info, '$.pets')
  ) pet_count
FROM
  person;

----------------------------------------

TITLE: Custom Random Number Function in PostgreSQL
DESCRIPTION: Creating a user-defined PL/pgSQL function that generates random numbers between specified low and high values.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION random_between(low INT ,high INT)
   RETURNS INT AS
$$
BEGIN
   RETURN floor(random()* (high-low + 1) + low);
END;
$$ language 'plpgsql' STRICT;

----------------------------------------

TITLE: Creating a Table for Network Data in Postgres
DESCRIPTION: This SQL command creates a table named 'roads' to store network data with source, target, and cost columns for use with pgRouting.

LANGUAGE: sql
CODE:
CREATE TABLE roads (
  id SERIAL PRIMARY KEY,
  source INT,
  target INT,
  cost FLOAT
);

----------------------------------------

TITLE: Applying PostgreSQL UPPER() Function to Table Column
DESCRIPTION: This query shows how to use the UPPER() function to convert the first_name column of the customer table to uppercase, ordering the results by the original first name.

LANGUAGE: sql
CODE:
SELECT
  UPPER(first_name)
FROM
  customer
ORDER BY
  first_name;

----------------------------------------

TITLE: Processing Arrays and Metadata with JSON_TABLE
DESCRIPTION: This SQL query demonstrates how to use JSON_TABLE to extract array fields and metadata into queryable columns.

LANGUAGE: sql
CODE:
SELECT
    b.title,
    jt.*
FROM library_books b,
JSON_TABLE(
    data,
    '$'
    COLUMNS (
        genres json FORMAT JSON PATH '$.metadata.genres',
        tags json FORMAT JSON PATH '$.metadata.tags',
        edition text PATH '$.metadata.edition'
    )
) AS jt;

----------------------------------------

TITLE: Implementing Role Helper
DESCRIPTION: C# code for the RoleHelper class to ensure necessary roles are created in the system.

LANGUAGE: csharp
CODE:
using Microsoft.AspNetCore.Identity;
using System.Threading.Tasks;

public static class RoleHelper
{
    public static async Task EnsureRolesCreated(RoleManager<IdentityRole> roleManager)
    {
        string[] roles = { "Admin", "User", "Manager" };

        foreach (var role in roles)
        {
            if (!await roleManager.RoleExistsAsync(role))
            {
                await roleManager.CreateAsync(new IdentityRole(role));
            }
        }
    }
}

----------------------------------------

TITLE: Creating Employee Skills Table
DESCRIPTION: Creates a table structure for storing employee skills as JSONB data.

LANGUAGE: sql
CODE:
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    skills JSONB
);

----------------------------------------

TITLE: Querying Enum Values
DESCRIPTION: Shows various ways to query and filter data using enum values, including ordering and comparison operations.

LANGUAGE: sql
CODE:
SELECT *
FROM requests
ORDER BY priority;

LANGUAGE: sql
CODE:
SELECT *
FROM requests
WHERE priority > 'low'
ORDER BY priority;

----------------------------------------

TITLE: Calculating Truncated PostgreSQL Uptime
DESCRIPTION: SQL query to calculate and display the PostgreSQL uptime with seconds truncated for better readability.

LANGUAGE: SQL
CODE:
SELECT
  date_trunc(
    'second',
    current_timestamp - pg_postmaster_start_time()
  ) as uptime;

----------------------------------------

TITLE: Setting Up Node.js Project for Neon and Railway Integration
DESCRIPTION: Bash commands to initialize a new Node.js project, install necessary dependencies, and create configuration files for the application that will connect to Neon Postgres and deploy on Railway.

LANGUAGE: bash
CODE:
mkdir neon-railway-example && cd neon-railway-example
npm init -y && npm pkg set type="module"
npm install express pg
touch .env

----------------------------------------

TITLE: Next.js Edge Functions Database Integration
DESCRIPTION: Implementation of database connection in Next.js edge functions using the Neon serverless driver.

LANGUAGE: javascript
CODE:
export const config = {
  runtime: 'edge',
};

import { neon } from '@neondatabase/serverless';

const sql = neon(process.env.DATABASE_URL);

export default async function handler(req, res) {
  const response = await sql`SELECT version()`;
  const { version } = response[0];
  return Response.json({ version });
}

----------------------------------------

TITLE: Connecting to PostgreSQL Database using psql
DESCRIPTION: Command to connect to a PostgreSQL database using the psql command-line tool. It prompts for the password of the postgres user.

LANGUAGE: sql
CODE:
psql -U postgres

----------------------------------------

TITLE: Inserting Initial Feature Flag Data in SQL
DESCRIPTION: Inserts a sample feature flag 'new_checkout_process' into the 'feature_flags' table, initially set to FALSE.

LANGUAGE: sql
CODE:
INSERT INTO feature_flags (feature_name, enabled)
VALUES ('new_checkout_process', FALSE);

----------------------------------------

TITLE: Using CBRT() Function with Table Data
DESCRIPTION: This SQL query demonstrates using the CBRT() function to calculate side lengths of cubes from their volumes stored in the 'cube_volumes' table.

LANGUAGE: sql
CODE:
SELECT
  id,
  volume,
  CBRT (volume) side_length
FROM
  cube_volumes;

----------------------------------------

TITLE: Creating BM25 Index for Text Search
DESCRIPTION: Creates a BM25 index named 'item_search_idx' on the 'mock_items' table, enabling efficient text searches across specified columns.

LANGUAGE: sql
CODE:
CREATE INDEX item_search_idx ON mock_items
USING bm25 (id, description, category)
WITH (key_field='id');

----------------------------------------

TITLE: Creating Quarkus Project with PostgreSQL JDBC Dependencies
DESCRIPTION: This command creates a new Quarkus project with PostgreSQL JDBC driver, Agroal datasource implementation, and RESTEasy Reactive extensions.

LANGUAGE: shell
CODE:
quarkus create app neon-with-quarkus-jdbc \
--name neon-with-quarkus-jdbc \
--package-name com.neon.tech \
--extensions jdbc-postgresql,quarkus-agroal,resteasy-reactive

----------------------------------------

TITLE: Configuring URL Routing for API Endpoints
DESCRIPTION: Sets up URL patterns for API views using DRF's DefaultRouter, making the API accessible under the /api/ path.

LANGUAGE: python
CODE:
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import (ModelAuthorViewSet, AIModelViewSet, ModelPurchaseViewSet,
                    UsageScenarioViewSet, ModelBenchmarkViewSet)

router = DefaultRouter()
router.register(r'authors', ModelAuthorViewSet)
router.register(r'models', AIModelViewSet)
router.register(r'purchases', ModelPurchaseViewSet)
router.register(r'usage-scenarios', UsageScenarioViewSet)
router.register(r'benchmarks', ModelBenchmarkViewSet)

urlpatterns = [
    path('', include(router.urls)),
]

----------------------------------------

TITLE: Installing PSQL on MacOS
DESCRIPTION: Commands to install psql client on MacOS using Homebrew and configure the PATH environment variable

LANGUAGE: bash
CODE:
brew install libpq
echo 'export PATH="/opt/homebrew/opt/libpq/bin:$PATH"' >> ~/.zshrc
source ~/.zshrc

----------------------------------------

TITLE: Database Setup Script
DESCRIPTION: Bash script to configure the database connection for each Codespace environment based on the pull request context.

LANGUAGE: bash
CODE:
#!/bin/bash

PR_NUMBER=$(echo $GITHUB_REF | sed 's/refs\/pull\/\([0-9]*\).*/\1/')

if [ -n "$PR_NUMBER" ]; then
    BRANCH_NAME="pr-$PR_NUMBER"

    # Use GitHub CLI to get the branch details
    BRANCH_DETAILS=$(gh api /repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/jobs -H "Accept: application/vnd.github.v3+json" | jq -r '.jobs[] | select(.name == "create-branch") | .steps[] | select(.name == "Create Neon Branch") | .outputs.db_url')

    if [ -n "$BRANCH_DETAILS" ]; then
        # Parse the connection string
        DB_HOST=$(echo $BRANCH_DETAILS | sed -n 's/.*@\(.*\):.*/\1/p')
        DB_NAME=$(echo $BRANCH_DETAILS | sed -n 's/.*\/\(.*\)?.*/\1/p')
        DB_USER=$(echo $BRANCH_DETAILS | sed -n 's/.*:\/\/\(.*\):.*/\1/p')
        DB_PASSWORD=$(echo $BRANCH_DETAILS | sed -n 's/.*:\/\/.*:\(.*\)@.*/\1/p')

        # Update the .env file
        sed -i "s/DB_HOST=.*/DB_HOST=$DB_HOST/" .env
        sed -i "s/DB_DATABASE=.*/DB_DATABASE=$DB_NAME/" .env
        sed -i "s/DB_USERNAME=.*/DB_USERNAME=$DB_USER/" .env
        sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=$DB_PASSWORD/" .env

        echo "Updated .env file with PR-specific database details"
    else
        echo "No branch details found for PR $PR_NUMBER"
    fi
else
    echo "This is not a PR environment, using default database settings"
fi

# Run database migrations
php artisan migrate --force

----------------------------------------

TITLE: Connecting to a Read Replica using psql
DESCRIPTION: This is an example connection string for connecting to a Neon read replica using psql. It includes placeholders for user credentials, hostname, and database name, and specifies SSL mode as required.

LANGUAGE: bash
CODE:
postgresql://[user]:[password]@[neon_hostname]/[dbname]?sslmode=require

----------------------------------------

TITLE: Inserting Test Data for Replication in SQL
DESCRIPTION: SQL command to insert test data into the source database to verify replication.

LANGUAGE: sql
CODE:
INSERT INTO playing_with_neon(name, value)
SELECT LEFT(md5(i::TEXT), 10), random() FROM generate_series(1, 10) s(i);

----------------------------------------

TITLE: Creating Sample Table with Test Data in PostgreSQL
DESCRIPTION: Creates a table named 'playing_with_neon' with an auto-incrementing ID, text name, and real value columns. Inserts 10 rows of sample data using MD5 hash for names and random values.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS playing_with_neon(id SERIAL PRIMARY KEY, name TEXT NOT NULL, value REAL);
INSERT INTO playing_with_neon(name, value)
SELECT LEFT(md5(i::TEXT), 10), random() FROM generate_series(1, 10) s(i);

----------------------------------------

TITLE: Staging Branch Reset in CI/CD
DESCRIPTION: Example command for resetting a staging branch to match production in a CI/CD pipeline.

LANGUAGE: bash
CODE:
neon branches reset staging --parent

----------------------------------------

TITLE: Restoring Data with Ownership Ignored in Bash
DESCRIPTION: This command restores data to a Neon database while ignoring database object ownership statements to avoid non-fatal errors related to ALTER OWNER statements.

LANGUAGE: bash
CODE:
pg_restore -v -O -d postgresql://[user]:[password]@[neon_hostname]/pagila mydumpfile.bak

----------------------------------------

TITLE: Configuring and Using IVFFlat Index for Search
DESCRIPTION: This SQL snippet sets the 'probes' parameter for IVFFlat, disables sequential scans, and performs a similarity search using the index. The 'probes' parameter determines the number of lists to explore during the search.

LANGUAGE: sql
CODE:
SET ivfflat.probes = 100;
SET enable_seqscan=off;
SELECT * FROM items ORDER BY embedding <-> '[0.011699999682605267,..., 0.008700000122189522]' LIMIT 100;

----------------------------------------

TITLE: Basic DATE_TRUNC Function Syntax in PostgreSQL
DESCRIPTION: Shows the basic syntax structure of the DATE_TRUNC function with its parameters: field, source, and optional time_zone.

LANGUAGE: sql
CODE:
DATE_TRUNC(field, source [,time_zone])

----------------------------------------

TITLE: Configuring URL patterns for note app
DESCRIPTION: Sets up URL patterns for the note-taking app, mapping views to specific routes.

LANGUAGE: python
CODE:
from django.urls import path
from notes import views

urlpatterns = [
    path('', views.list_notes, name='list_notes'),
    path('create/', views.create_note, name='create_note'),
    path('delete/<int:note_id>/', views.delete_note, name='delete_note'),
]

----------------------------------------

TITLE: Grouping Rentals by Month using DATE_TRUNC
DESCRIPTION: Query that uses DATE_TRUNC to group rental data by month and count rentals per month.

LANGUAGE: sql
CODE:
SELECT
    DATE_TRUNC('month', rental_date) m,
    COUNT (rental_id)
FROM
    rental
GROUP BY
    m
ORDER BY
    m;

----------------------------------------

TITLE: Generating Salt for Password Hashing
DESCRIPTION: Examples of using gen_salt function to generate salts for password hashing. It shows generating a Blowfish salt with default and custom iteration counts.

LANGUAGE: sql
CODE:
SELECT gen_salt('bf');
SELECT gen_salt('bf', 10);

----------------------------------------

TITLE: Creating PostgreSQL Database Using psql
DESCRIPTION: Command line instructions for connecting to PostgreSQL and creating a new database named 'sales'

LANGUAGE: php
CODE:
psql -U postgres

----------------------------------------

TITLE: Creating and Populating Sample Customers Table in PostgreSQL
DESCRIPTION: SQL script to create a 'customers' table and insert sample data. The table includes fields for customer information such as name, email, subscription tier, and monthly spend.

LANGUAGE: sql
CODE:
-- Create customers table
CREATE TABLE customers (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    subscription_tier VARCHAR(50),
    monthly_spend DECIMAL(10,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert sample data
INSERT INTO customers (name, email, subscription_tier, monthly_spend) VALUES
('TechWave Solutions', 'contact@example.com', 'Premium', 9500.00),
('BlueSky Innovations', 'hello@example.com', 'Growth', 2200.00),
('Greenfield Consulting', 'info@example.com', 'Standard', 600.00),
('BrightFuture Partners', 'support@example.com', 'Premium', 12000.00),
('UrbanTech Solutions', 'services@example.com', 'Basic', 300.00);

----------------------------------------

TITLE: Creating HTML Structure for Todo App
DESCRIPTION: This HTML code creates the structure for a simple todo application, including an input field for adding new todos and a list to display existing todos.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Simple Todo App</title>
    <link rel="stylesheet" href="styles.css" />
  </head>
  <body>
    <div class="todo-container">
      <h1>Todo List</h1>
      <div class="todo-input">
        <input type="text" id="todoInput" placeholder="Add a new todo" />
        <button onclick="addTodo()">Add</button>
      </div>
      <ul id="todoList" class="todo-list">
        <!-- Todos will be inserted here -->
      </ul>
      <div id="error" class="error"></div>
    </div>
    <script src="app.js"></script>
  </body>
</html>

----------------------------------------

TITLE: Adding NOT NULL Constraints to Existing Columns
DESCRIPTION: Demonstrates how to add NOT NULL constraints to existing columns using ALTER TABLE statements.

LANGUAGE: sql
CODE:
ALTER TABLE table_name
ALTER COLUMN column_name SET NOT NULL;

----------------------------------------

TITLE: Setting Environment Variables for Database Connections
DESCRIPTION: This bash script sets up environment variables for database connections, including the owner connection string and authenticated connection strings for both server-side and client-side fetching.

LANGUAGE: bash
CODE:
# Used for database migrations
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'

# Used for server-side fetching
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

# Used for client-side fetching
NEXT_PUBLIC_DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

----------------------------------------

TITLE: List Projects API Request
DESCRIPTION: API request to list all Neon projects for an account using cURL.

LANGUAGE: bash
CODE:
curl 'https://console.neon.tech/api/v2/projects' \
 -H 'Accept: application/json' \
 -H "Authorization: Bearer $NEON_API_KEY" | jq

----------------------------------------

TITLE: JSON Array Operations with JSON_EXISTS() in PostgreSQL
DESCRIPTION: Shows how to use JSON_EXISTS() for array-related checks, including checking for any elements in an array and for a specific array element.

LANGUAGE: sql
CODE:
-- Check if array contains any elements
SELECT JSON_EXISTS('{"numbers": [1,2,3,4,5]}', '$.numbers[*]');

LANGUAGE: sql
CODE:
-- Check for specific array element
SELECT JSON_EXISTS('{"tags": ["postgres", "json", "database"]}', '$.tags[3]');

----------------------------------------

TITLE: Creating Database Schema for Customer Feedback and Sentiment Analysis
DESCRIPTION: SQL code to create tables for storing customer feedback and sentiment analysis results from Azure AI Language service in a Neon database.

LANGUAGE: sql
CODE:
CREATE TABLE customer_feedback (
    feedback_id SERIAL PRIMARY KEY,
    customer_id VARCHAR(50),
    feedback_text TEXT NOT NULL,
    product_id VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE sentiment_results (
    result_id SERIAL PRIMARY KEY,
    feedback_id INTEGER REFERENCES customer_feedback(feedback_id),
    sentiment_score DECIMAL(4,3),
    sentiment_label VARCHAR(20),
    key_phrases TEXT[],
    language_code VARCHAR(10),
    analyzed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

----------------------------------------

TITLE: Inserting Documents into FerretDB
DESCRIPTION: Example of inserting multiple documents into a FerretDB collection using MongoDB syntax.

LANGUAGE: json
CODE:
db.players.insertMany([
    {
        nba_id: 23,
        player_name: "Jordan",
        player_extended_name: "Michael Jordan",
        quality: "Gold - Legendary",
        overall: 99,
        nationality: "USA",
        position: "SG",
        shooting: 98,
        passing: 85,
        dribbling: 95,
        defense: 93,
        physicality: 92,
        rebounding: 87
    },
    {
        nba_id: 34,
        player_name: "Barkley",
        player_extended_name: "Charles Barkley",
        quality: "Gold - Rare",
        overall: 93,
        nationality: "USA",
        position: "PF",
        shooting: 86,
        passing: 76,
        dribbling: 78,
        defense: 88,
        physicality: 94,
        rebounding: 95,
        base_id: 332
    }
]);

----------------------------------------

TITLE: Demonstrating Leading, Trailing, and Both Trimming in PostgreSQL
DESCRIPTION: Illustrates how to use trim() to remove characters from the beginning, end, or both sides of a string.

LANGUAGE: sql
CODE:
WITH user_inputs(input) AS (
  VALUES
    ('***Secret Password***'),
    ('***Admin Access***'),
    ('***Guest User***')
)
SELECT
  trim(leading '*' from input) AS leading_trimmed,
  trim(trailing '*' from input) AS trailing_trimmed,
  trim(both '*' from input) AS both_trimmed
FROM user_inputs;

----------------------------------------

TITLE: Configuring Prisma for Neon Database
DESCRIPTION: Prisma schema configuration to use the Neon Postgres database. It sets up the database provider and uses an environment variable for the connection URL.

LANGUAGE: prisma
CODE:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

----------------------------------------

TITLE: Enabling pg_search Extension in Neon
DESCRIPTION: Creates the pg_search extension in a Neon database, enabling full-text search capabilities.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pg_search;

----------------------------------------

TITLE: Setting Up Database Schema for Messages Table in Neon Postgres
DESCRIPTION: Creates a schema.tsx file to set up the messages table in a Neon serverless Postgres database. It defines the table structure and creates an index for faster retrievals.

LANGUAGE: typescript
CODE:
import { neon } from '@neondatabase/serverless';
import 'dotenv/config';

const createMessagesTable = async () => {
  if (!process.env.DATABASE_URL) throw new Error(`DATABASE_URL environment variable not found.`);
  const sql = neon(process.env.DATABASE_URL);
  try {
    await sql(
      `CREATE TABLE IF NOT EXISTS messages (created_at SERIAL, id TEXT PRIMARY KEY, session_id TEXT, content_type TEXT, content_transcript TEXT, object TEXT, role TEXT, status TEXT, type TEXT);`
    );
    await sql(
      `CREATE INDEX IF NOT EXISTS idx_session_created_at ON messages (session_id, created_at);`
    );
    console.log('Setup schema succesfully.');
  } catch (error) {
    console.error(error);
    console.log('Failed to set up schema.');
  }
};

createMessagesTable();

----------------------------------------

TITLE: Simple CASE Expression for Film Ratings
DESCRIPTION: Demonstrates simple CASE expression usage to map film ratings to their full descriptions.

LANGUAGE: sql
CODE:
SELECT title,
       rating,
       CASE rating
           WHEN 'G' THEN 'General Audiences'
           WHEN 'PG' THEN 'Parental Guidance Suggested'
           WHEN 'PG-13' THEN 'Parents Strongly Cautioned'
           WHEN 'R' THEN 'Restricted'
           WHEN 'NC-17' THEN 'Adults Only'
       END rating_description
FROM film
ORDER BY title;

----------------------------------------

TITLE: Environment Variables for Database Connections
DESCRIPTION: Defines environment variables for database connections, including the database owner connection string and authenticated connection strings for both server-side and client-side fetching.

LANGUAGE: bash
CODE:
# Used for database migrations
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'

# Used for server-side fetching
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

# Used for client-side fetching
NEXT_PUBLIC_DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

----------------------------------------

TITLE: Handling Missing Paths with jsonb_path_query_first() in PostgreSQL
DESCRIPTION: Demonstrates how jsonb_path_query_first() handles missing paths by attempting to find a non-existent 'email' key in the JSON data.

LANGUAGE: sql
CODE:
SELECT jsonb_path_query_first(data, '$.email')
FROM person;

----------------------------------------

TITLE: Declaring Character Data Types in PostgreSQL
DESCRIPTION: Shows the syntax for declaring columns with different character data types in PostgreSQL, including CHAR(n), VARCHAR(n), and TEXT.

LANGUAGE: SQL
CODE:
CREATE TABLE example_table (
  fixed_length CHAR(10),
  variable_length VARCHAR(50),
  unlimited_length TEXT
);

----------------------------------------

TITLE: Declaring Character Data Types in PostgreSQL
DESCRIPTION: Shows the syntax for declaring columns with different character data types in PostgreSQL, including CHAR(n), VARCHAR(n), and TEXT.

LANGUAGE: SQL
CODE:
CREATE TABLE example_table (
  fixed_length CHAR(10),
  variable_length VARCHAR(50),
  unlimited_length TEXT
);

----------------------------------------

TITLE: Creating and Populating a Sample Table for CONCAT() Examples
DESCRIPTION: Creates a 'contacts' table and inserts sample data to be used in subsequent CONCAT() function examples.

LANGUAGE: SQL
CODE:
CREATE TABLE contacts (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(15)
);

INSERT INTO contacts (name, email, phone)
VALUES
    ('John Doe', 'john@gmail.com', '123-456-7890'),
    ('Jane Smith', 'jane@gmail.com', NULL),
    ('Bob Johnson', 'bob@gmail.com', '555-1234'),
    ('Alice Brown', 'alice@gmail.com', NULL),
    ('Charlie Davis', 'charlie@gmail.com', '987-654-3210')
RETURNING *;

----------------------------------------

TITLE: Defining PostgreSQL CHR() Function Syntax
DESCRIPTION: This snippet shows the basic syntax of the CHR() function in PostgreSQL. It takes a single argument 'num' which is the ASCII code or Unicode code point to be converted.

LANGUAGE: SQL
CODE:
CHR(num)

----------------------------------------

TITLE: Raising Custom Error with Additional Information in PL/pgSQL
DESCRIPTION: Illustrates how to raise a custom error with additional information using the USING clause to provide a hint message.

LANGUAGE: sql
CODE:
do $$
declare
  email varchar(255) := '[[email protected]]';
begin
  -- check email for duplicate
  -- ...
  -- report duplicate email
  raise exception 'duplicate email: %', email
		using hint = 'check the email again';
end $$;

----------------------------------------

TITLE: Calling PostgreSQL Stored Procedure to Count Films
DESCRIPTION: This snippet demonstrates how to call the count_film stored procedure. It shows both a direct call and how to use it within an anonymous block to display the result.

LANGUAGE: sql
CODE:
call count_film();

LANGUAGE: sql
CODE:
do
$$
declare
   total_film int = 0;
begin
   call count_film(total_film);
   raise notice 'Total film: %', total_film;
end;
$$;

----------------------------------------

TITLE: Combining LEFT() with COUNT() and GROUP BY
DESCRIPTION: This complex example uses the LEFT() function to get customer initials, then uses COUNT() and GROUP BY to count customers by initial.

LANGUAGE: sql
CODE:
SELECT LEFT(first_name, 1) initial,
    COUNT(*)
FROM customer
GROUP BY initial
ORDER BY initial;

----------------------------------------

TITLE: Creating Table with JSONB Column
DESCRIPTION: Creates a table structure with a JSONB column to store link attributes.

LANGUAGE: sql
CODE:
CREATE TABLE links (
    id SERIAL PRIMARY KEY,
    href TEXT NOT NULL,
    attributes JSONB
);

----------------------------------------

TITLE: Database Connection Module
DESCRIPTION: Python module to establish connection with PostgreSQL database

LANGUAGE: python
CODE:
import psycopg2
from config import load_config

def connect(config):
    """ Connect to the PostgreSQL database server """
    try:
        # connecting to the PostgreSQL server
        with psycopg2.connect(**config) as conn:
            print('Connected to the PostgreSQL server.')
            return conn
    except (psycopg2.DatabaseError, Exception) as error:
        print(error)


if __name__ == '__main__':
    config = load_config()
    connect(config)

----------------------------------------

TITLE: Sorting with NULL Values (NULLS FIRST)
DESCRIPTION: This query demonstrates how to sort values including NULL, placing NULL values before non-null values in the result set.

LANGUAGE: SQL
CODE:
SELECT
  num
FROM
  sort_demo
ORDER BY
  num NULLS FIRST;

----------------------------------------

TITLE: Custom GCD() Function Using PL/pgSQL
DESCRIPTION: Defines a custom GCD() function using PL/pgSQL for PostgreSQL versions that don't have the built-in GCD() function.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION gcd(a INTEGER, b INTEGER)
RETURNS INTEGER AS $$
   DECLARE
      r INTEGER = 0;
BEGIN

    WHILE b <> 0 LOOP
        r = a % b;
        a = b;
        b = r;
    END LOOP;
    RETURN a;
END;
$$ LANGUAGE plpgsql;

----------------------------------------

TITLE: Truncating Intervals with date_trunc()
DESCRIPTION: This example shows how date_trunc() behaves differently when truncating intervals specified in different formats.

LANGUAGE: sql
CODE:
SELECT
    date_trunc('month', '183 days'::INTERVAL) AS colA,
    date_trunc('month', '2 years 3 months'::INTERVAL) AS colB;

----------------------------------------

TITLE: Using json_object() to Create Metadata in PostgreSQL Query
DESCRIPTION: Demonstrates how to use json_object() in a SELECT query to combine multiple fields into a single JSON metadata attribute. This example creates a JSON object with author and genre information.

LANGUAGE: sql
CODE:
SELECT book_id, title, json_object(
  ARRAY['author', 'genre'],
  ARRAY[author, genre]
) AS metadata
FROM book_inventory;

----------------------------------------

TITLE: Using json_object() to Create Metadata in PostgreSQL Query
DESCRIPTION: Demonstrates how to use json_object() in a SELECT query to combine multiple fields into a single JSON metadata attribute. This example creates a JSON object with author and genre information.

LANGUAGE: sql
CODE:
SELECT book_id, title, json_object(
  ARRAY['author', 'genre'],
  ARRAY[author, genre]
) AS metadata
FROM book_inventory;

----------------------------------------

TITLE: Running Neon Import Script
DESCRIPTION: Command to execute the Neon Postgres import script with required parameters

LANGUAGE: bash
CODE:
python neon-import.py --input firestore_data --postgres "<neon-connection-string>"

----------------------------------------

TITLE: Checking Current Database in SQL
DESCRIPTION: This SQL query displays the name of the currently connected database after successful authentication.

LANGUAGE: sql
CODE:
SELECT current_database();

----------------------------------------

TITLE: Changing the Publication for a Subscription in PostgreSQL
DESCRIPTION: This command modifies an existing subscription to set it to a different publication named 'new_new_publication'.

LANGUAGE: sql
CODE:
ALTER SUBSCRIPTION my_subscription SET PUBLICATION new_new_publication;

----------------------------------------

TITLE: Updating and Selecting Customer Orders
DESCRIPTION: SQL to update a customer order and select all records, demonstrating the trigger functionality.

LANGUAGE: sql
CODE:
-- Simulate some delay before update
SELECT pg_sleep(2);
UPDATE customer_orders SET order_status = 'Shipped' WHERE order_id = 1;

SELECT * FROM customer_orders;

----------------------------------------

TITLE: Distinct Array Aggregation with Browser Usage
DESCRIPTION: Shows how to use DISTINCT with array_agg() to create arrays of unique browser names per user.

LANGUAGE: sql
CODE:
WITH user_logins AS (
  SELECT 1 AS user_id, 'Chrome' AS browser
  UNION ALL SELECT 1, 'Firefox'
  UNION ALL SELECT 1, 'Chrome'
  UNION ALL SELECT 2, 'Safari'
  UNION ALL SELECT 2, 'Chrome'
)
SELECT
  user_id,
  array_agg(DISTINCT browser ORDER BY browser) AS browsers_used
FROM user_logins
GROUP BY user_id;

----------------------------------------

TITLE: Creating Projects Table with Deadlines
DESCRIPTION: SQL to create a projects table and insert records with deadlines calculated using now() and intervals.

LANGUAGE: sql
CODE:
CREATE TABLE projects (
  project_id SERIAL PRIMARY KEY,
  project_name VARCHAR(100) NOT NULL,
  start_date TIMESTAMP WITH TIME ZONE DEFAULT now(),
  deadline TIMESTAMP WITH TIME ZONE NOT NULL
);

INSERT INTO projects (project_name, deadline)
VALUES
  ('Website Redesign', now() + INTERVAL '30 days'),
  ('Mobile App Development', now() + INTERVAL '60 days'),
  ('Database Migration', now() + INTERVAL '15 days');

SELECT
  project_name,
  deadline - now() AS time_remaining
FROM projects
ORDER BY time_remaining;

----------------------------------------

TITLE: Implementing RLS Policies with Drizzle ORM
DESCRIPTION: TypeScript code using Drizzle ORM to define a todos table with RLS policies.

LANGUAGE: typescript
CODE:
import { InferSelectModel, sql } from 'drizzle-orm';
import { bigint, boolean, pgTable, text, timestamp } from 'drizzle-orm/pg-core';
import { authenticatedRole, authUid, crudPolicy } from 'drizzle-orm/neon';

export const todos = pgTable(
  'todos',
  {
    id: bigint('id', { mode: 'bigint' }).primaryKey().generatedByDefaultAsIdentity(),
    userId: text('user_id')
      .notNull()
      .default(sql`(auth.user_id())`),
    task: text('task').notNull(),
    isComplete: boolean('is_complete').notNull().default(false),
    insertedAt: timestamp('inserted_at', { withTimezone: true }).defaultNow().notNull(),
  },
  (table) => [
    crudPolicy({
      role: authenticatedRole,
      read: authUid(table.userId),
      modify: authUid(table.userId),
    }),
  ]
);

export type Todo = InferSelectModel<typeof todos>;

----------------------------------------

TITLE: Importing Data to Neon Database using pg_restore in Bash
DESCRIPTION: This command uses pg_restore to import data from the .bak file into the newly created Neon database. It includes verbose output and uses the connection string for the destination Neon database.

LANGUAGE: bash
CODE:
pg_restore -v -d "postgresql://<username>:<password>@<destination_host>:<destination_port>/<destination_database>" database.bak

----------------------------------------

TITLE: Generate Random Number in Custom Range
DESCRIPTION: Generating a random decimal number between 1 and 11 using mathematical operations with random().

LANGUAGE: sql
CODE:
SELECT random() * 10 + 1 AS RAND_1_11;

----------------------------------------

TITLE: Creating PostgreSQL Stored Procedure for Film Statistics
DESCRIPTION: This example creates a stored procedure named film_stat that retrieves multiple statistics about films, including count, total length, and average rental rate. It uses multiple INOUT parameters to return the values.

LANGUAGE: sql
CODE:
create or replace procedure film_stat(
   inout total_film int default 0,
   inout total_length int default 0,
   inout avg_rental_rate numeric(4,2) default 0
)
as
$$
begin
  select count(*) into total_film
  from film;

  select sum(length) into total_length
  from film;

  select round(avg(rental_rate),2) into avg_rental_rate
  from film;
end;
$$
language plpgsql;

----------------------------------------

TITLE: Basic Random Number Generation in PostgreSQL
DESCRIPTION: Demonstrates the basic usage of RANDOM() function to generate a random value between 0 and 1.

LANGUAGE: sql
CODE:
SELECT RANDOM() AS random;

----------------------------------------

TITLE: Date-based Filtering with CURRENT_DATE
DESCRIPTION: Example showing how to use CURRENT_DATE in a WHERE clause to filter rental records for the current date.

LANGUAGE: sql
CODE:
SELECT
  *
FROM
  rental
WHERE
  rental_date = CURRENT_DATE;

----------------------------------------

TITLE: Products Table Example with DEFAULT Values
DESCRIPTION: Practical example showing creation of a products table with DEFAULT constraints and various insert operations.

LANGUAGE: php
CODE:
CREATE TABLE products(
   id SERIAL PRIMARY KEY,
   name VARCHAR(255) NOT NULL,
   price DECIMAL(19,2) NOT NULL DEFAULT 0
);

----------------------------------------

TITLE: Basic Usage of jsonb_build_object() in PostgreSQL
DESCRIPTION: Demonstrates how to use the jsonb_build_object() function to create a simple JSON object with a title and length.

LANGUAGE: sql
CODE:
SELECT
  jsonb_build_object(
    'title', 'Academy Dinosaur', 'length',
    86
  );

----------------------------------------

TITLE: Applying Migration to Database
DESCRIPTION: Command to apply the migration and create tables in the Neon Postgres database.

LANGUAGE: bash
CODE:
dotnet ef database update

----------------------------------------

TITLE: Finding Most Frequently Executed Queries in Neon Postgres
DESCRIPTION: SQL query to identify the top 10 most frequently executed queries, ordered by the number of calls. It includes user ID, query text, call count, total execution time in minutes, and average execution time in milliseconds.

LANGUAGE: sql
CODE:
SELECT
  userid,
  query,
  calls,
  (total_exec_time / 1000 / 60) as total_min,
  mean_exec_time as avg_ms
FROM pg_stat_statements
ORDER BY 3 DESC
LIMIT 10;

----------------------------------------

TITLE: Using paradedb.match for Similar Word Search
DESCRIPTION: Demonstrates using the paradedb.match function to find items similar to 'running shoes', allowing for flexible matching.

LANGUAGE: sql
CODE:
SELECT description, category
FROM mock_items
WHERE id @@@ paradedb.match('description', 'running shoes');

----------------------------------------

TITLE: Combining lower() with Other String Functions for Complex Operations
DESCRIPTION: Illustrates how to combine lower() with split_part() to process usernames, converting name parts to lowercase while preserving user IDs.

LANGUAGE: sql
CODE:
WITH user_data AS (
  SELECT 'JOHN_DOE_123' AS username
  UNION ALL
  SELECT 'JANE_SMITH_456' AS username
  UNION ALL
  SELECT 'BOB_JOHNSON_789' AS username
)
SELECT
  lower(split_part(username, '_', 1)) AS first_name,
  lower(split_part(username, '_', 2)) AS last_name,
  split_part(username, '_', 3) AS user_id
FROM user_data;

----------------------------------------

TITLE: Updating Existing Product with UPSERT
DESCRIPTION: Demonstrates how to update an existing product's price and quantity using the INSERT ON CONFLICT statement.

LANGUAGE: sql
CODE:
INSERT INTO inventory (id, name, price, quantity)
VALUES (1, 'A', 16.99, 120)
ON CONFLICT(id)
DO UPDATE SET
  price = EXCLUDED.price,
  quantity = EXCLUDED.quantity;

----------------------------------------

TITLE: Running PSQL via Neon CLI
DESCRIPTION: Example of running psql commands through the Neon CLI using the connection-string command

LANGUAGE: bash
CODE:
neon connection-string --psql -- -c "SELECT version()"

----------------------------------------

TITLE: Alternative CROSS JOIN Syntax Using Comma
DESCRIPTION: Demonstrates an equivalent syntax for CROSS JOIN using comma notation.

LANGUAGE: sql
CODE:
SELECT
  select_list
FROM
  table1,table2;

----------------------------------------

TITLE: Defining BOOL_OR() Function Syntax in PostgreSQL
DESCRIPTION: Shows the basic syntax of the BOOL_OR() function in PostgreSQL. The function takes a boolean expression as an argument and returns true if at least one value in the group is true.

LANGUAGE: sql
CODE:
bool_or(expression)

----------------------------------------

TITLE: Successful Insert with Valid Character Lengths
DESCRIPTION: Example of a successful INSERT operation that respects all column length constraints and returns the inserted row.

LANGUAGE: sql
CODE:
INSERT INTO character_tests (x, y, z)
VALUES
  (
    'Y',
    'varchar(n)',
    'This is a very long text for the PostgreSQL text column'
  )
RETURNING *;

----------------------------------------

TITLE: Generating SDK Keys for Neon Auth Integration
DESCRIPTION: This snippet demonstrates how to generate SDK keys for your auth provider integration. These keys are used to set up frontend and backend SDKs. It requires the project ID and auth provider.

LANGUAGE: bash
CODE:
curl --request POST \
     --url 'https://console.neon.tech/api/v2/projects/auth/keys' \
     --header 'authorization: Bearer $NEON_API_KEY' \
     --header 'content-type: application/json' \
     --data '{
       "project_id": "project-id",
       "auth_provider": "stack"
     }' | jq

----------------------------------------

TITLE: Creating Branch with Neon API
DESCRIPTION: cURL command to create a new branch named 'development' using the Neon API.

LANGUAGE: bash
CODE:
curl --request POST \
     --url https://console.neon.tech/api/v2/projects/{project_id}/branches \
     --header 'Accept: application/json' \
     --header "Authorization: Bearer $NEON_API" \
     --header 'Content-Type: application/json' \
     --data '
{
  "branch": {
    "name": "development"
  },
  "endpoints": [
    {
      "type": "read_only"
    }
  ]
}' | jq

----------------------------------------

TITLE: Initializing Next.js Project with Dependencies
DESCRIPTION: Commands to create a new Next.js project and install required dependencies including Auth.js and Neon database adapter.

LANGUAGE: bash
CODE:
npx create-next-app guide-neon-next-authjs --typescript --eslint --tailwind --use-npm --no-src-dir --app --import-alias "@/*"

LANGUAGE: bash
CODE:
cd guide-neon-next-authjs
npm install next-auth@beta
npm install @auth/pg-adapter @neondatabase/serverless

----------------------------------------

TITLE: Creating Database Migration in Laravel
DESCRIPTION: Commands and schema definition for creating database migrations in Laravel, specifically for a books table example.

LANGUAGE: bash
CODE:
php artisan make:migration create_books_table --create=books

LANGUAGE: php
CODE:
Schema::create('books', function (Blueprint $table) {
    $table->id();
    $table->string('title');
    $table->unsignedBigInteger('author_id');
    $table->year('publication_year');
    $table->timestamps();
});

----------------------------------------

TITLE: Implementing Database Seeding Extension
DESCRIPTION: C# code for a ModelBuilderExtensions class to seed the database with initial data.

LANGUAGE: csharp
CODE:
using Microsoft.EntityFrameworkCore;
using GuideNeonEF.Models;

namespace GuideNeonEF
{
    public static class ModelBuilderExtensions
    {
        public static void Seed(this ModelBuilder modelBuilder)
        {
            var authors = new[]
            {
                new Author { Id = 1, Name = "J.R.R. Tolkien", Bio = "The creator of Middle-earth and author of The Lord of the Rings.", Country = "United Kingdom"},
                new Author { Id = 2, Name = "George R.R. Martin", Bio = "The author of the epic fantasy series A Song of Ice and Fire.", Country = "United States"},
                new Author { Id = 3, Name = "J.K. Rowling", Bio = "The creator of the Harry Potter series.", Country = "United Kingdom"}
            };
            modelBuilder.Entity<Author>().HasData(authors);

            var books = new[]
            {
                new Book { Id = 1, Title = "The Fellowship of the Ring", AuthorId = 1 },
                new Book { Id = 2, Title = "The Two Towers", AuthorId = 1 },
                new Book { Id = 3, Title = "The Return of the King", AuthorId = 1 },
                new Book { Id = 4, Title = "A Game of Thrones", AuthorId = 2 },
                new Book { Id = 5, Title = "A Clash of Kings", AuthorId = 2 },
                new Book { Id = 6, Title = "Harry Potter and the Philosopher's Stone", AuthorId = 3 },
                new Book { Id = 7, Title = "Harry Potter and the Chamber of Secrets", AuthorId = 3 }
            };
            modelBuilder.Entity<Book>().HasData(books);
        }
    }
}

----------------------------------------

TITLE: Querying neon_stat_file_cache View in SQL
DESCRIPTION: SQL query to retrieve Local File Cache usage data from the neon_stat_file_cache view, showing various cache-related metrics.

LANGUAGE: sql
CODE:
SELECT * FROM neon_stat_file_cache;

----------------------------------------

TITLE: Basic Product ID Aggregation Example
DESCRIPTION: Example showing how to aggregate product IDs into arrays grouped by order ID using a sample orders table.

LANGUAGE: sql
CODE:
WITH orders AS (
  SELECT 1 AS order_id, 101 AS product_id, 2 AS quantity
  UNION ALL SELECT 1, 102, 1
  UNION ALL SELECT 2, 103, 3
  UNION ALL SELECT 2, 104, 1
  UNION ALL SELECT 3, 101, 1
)
SELECT
  order_id,
  array_agg(product_id) AS products
FROM orders
GROUP BY order_id
ORDER BY order_id;

----------------------------------------

TITLE: Error Handling with JSON_EXISTS() in PostgreSQL
DESCRIPTION: Demonstrates different error handling approaches with JSON_EXISTS(), including default behavior, ERROR ON ERROR, and UNKNOWN ON ERROR options.

LANGUAGE: sql
CODE:
-- Default behavior (returns FALSE)
SELECT JSON_EXISTS(
    '{"data": [1,2,3]}',
    'strict $.data[5]'
);

LANGUAGE: sql
CODE:
-- Using ERROR ON ERROR
SELECT JSON_EXISTS(
    '{"data": [1,2,3]}',
    'strict $.data[5]'
    ERROR ON ERROR
);

LANGUAGE: sql
CODE:
-- Using UNKNOWN ON ERROR
SELECT JSON_EXISTS(
    '{"data": [1,2,3]}',
    'strict $.data[5]'
    UNKNOWN ON ERROR
);

----------------------------------------

TITLE: Writing Binary Data to PostgreSQL with Python
DESCRIPTION: Function that reads binary data from a file and inserts it into a PostgreSQL database table using psycopg2. Uses the Binary object to properly handle binary data conversion.

LANGUAGE: python
CODE:
import psycopg2
from config import load_config


def write_blob(part_id, path_to_file, file_extension):
    " Insert a BLOB into a table "
    # read database configuration
    params = load_config()

    # read data from a picture
    data = open(path_to_file, 'rb').read()


    try:
        # connect to the PostgresQL database
        with psycopg2.connect(**params) as conn:
            # create a new cursor object
            with  conn.cursor() as cur:
                # execute the INSERT statement
                cur.execute("INSERT INTO part_drawings(part_id,file_extension,drawing_data) " +
                            "VALUES(%s,%s,%s)",
                            (part_id, file_extension, psycopg2.Binary(data)))

            conn.commit()

    except (Exception, psycopg2.DatabaseError) as error:
        print(error)

if __name__ == '__main__':
    write_blob(1, 'images/input/simtray.png', 'png')
    write_blob(2, 'images/input/speaker.png', 'png')

----------------------------------------

TITLE: Granting SELECT on All Tables in a Schema
DESCRIPTION: This SQL command grants SELECT privilege on all tables in the 'public' schema to the 'reader' role.

LANGUAGE: sql
CODE:
GRANT SELECT
ON ALL TABLES
IN SCHEMA "public"
TO reader;

----------------------------------------

TITLE: Using json_array_elements() with ORDINALITY in PostgreSQL
DESCRIPTION: This query demonstrates how to use the WITH ORDINALITY option with json_array_elements() to preserve the original order of elements in the JSON array.

LANGUAGE: sql
CODE:
SELECT
   id,
   name,
   skill,
   ordinality
FROM
   developers,
   json_array_elements(skills) WITH ORDINALITY AS t(skill, ordinality);

----------------------------------------

TITLE: Inserting Binary Data into BYTEA Column
DESCRIPTION: Demonstrates how to insert a binary string into a BYTEA column using hexadecimal notation.

LANGUAGE: sql
CODE:
INSERT INTO binary_data(data)
VALUES ('\x012345');

----------------------------------------

TITLE: Basic JSON Conversion Examples
DESCRIPTION: Examples of converting simple strings and arrays to JSON using the json() function.

LANGUAGE: sql
CODE:
-- Convert a simple string to JSON
SELECT json('{"name": "Alice", "age": 30}');

LANGUAGE: sql
CODE:
-- Convert a JSON array
SELECT json('[1, 2, 3, "four", true, null]');

LANGUAGE: sql
CODE:
-- Convert nested JSON structures
SELECT json('{
    "user": {
        "name": "Bob",
        "contacts": {
            "email": "bob@example.com",
            "phone": "+1-555-0123"
        }
    },
    "active": true
}');

----------------------------------------

TITLE: PostgreSQL REINDEX Basic Syntax
DESCRIPTION: The basic syntax for the REINDEX command, showing the different levels at which reindexing can be performed (INDEX, TABLE, SCHEMA, DATABASE, SYSTEM) along with available options.

LANGUAGE: sql
CODE:
REINDEX [ ( option, ...) ]
{ INDEX | TABLE | SCHEMA | DATABASE | SYSTEM }
name;

----------------------------------------

TITLE: Creating a Replication Slot in PostgreSQL
DESCRIPTION: This command creates a logical replication slot named 'my_replication_slot' using the 'pgoutput' decoder plugin.

LANGUAGE: sql
CODE:
SELECT pg_create_logical_replication_slot('my_replication_slot', 'pgoutput');

----------------------------------------

TITLE: Setting Neon PostgreSQL Connection String in .env File
DESCRIPTION: This snippet shows how to set the DATABASE_URL environment variable in a .env file with a Neon PostgreSQL connection string. It includes the 'sslmode=require' parameter for secure connections.

LANGUAGE: ini
CODE:
DATABASE_URL="postgresql://[user]:[password]@[neon_hostname]/[dbname]?sslmode=require"

----------------------------------------

TITLE: Inserting Recipe Data with JSONB Values
DESCRIPTION: Inserts sample recipe data into the table with structured JSONB data including preparation time, ingredients, and difficulty.

LANGUAGE: sql
CODE:
INSERT INTO recipes (name, details)
VALUES
    (
        'Spaghetti Carbonara',
        '{"preparation_time": "30 minutes",
          "ingredients": ["spaghetti", "eggs", "bacon", "parmesan cheese", "black pepper"],
          "difficulty": "Medium"}'
    ),
    (
        'Chicken Tikka Masala',
        '{"preparation_time": "45 minutes",
          "ingredients": ["chicken", "tomatoes", "onions", "yogurt", "spices"],
          "difficulty": "Medium-High"}'
    ),
    (
        'Vegetable Stir Fry',
        '{"preparation_time": "20 minutes",
          "ingredients": ["mixed vegetables", "soy sauce", "garlic", "ginger", "sesame oil"],
          "difficulty": "Easy"}'
    );

----------------------------------------

TITLE: Creating Table for DENSE_RANK Demo
DESCRIPTION: Creates a simple table with a single VARCHAR column to demonstrate DENSE_RANK functionality.

LANGUAGE: sql
CODE:
CREATE TABLE dense_ranks (
	c VARCHAR(10)
);

----------------------------------------

TITLE: Basic PostgreSQL RTRIM() Function Usage
DESCRIPTION: Demonstrates how to use the RTRIM() function to remove a specific character from the end of a string.

LANGUAGE: sql
CODE:
SELECT RTRIM('postgres!!!', '!');

----------------------------------------

TITLE: Using lag() with Partitioning in SQL
DESCRIPTION: Shows how to use lag() with partitioning to perform calculations within groups of rows, calculating the number of days since each customer's previous order.

LANGUAGE: sql
CODE:
WITH orders AS (
  SELECT 1 AS order_id, date '2023-01-01' AS order_date, 100 AS amount, 1 AS customer_id
  UNION ALL
  SELECT 2 AS order_id, date '2023-01-02' AS order_date, 150 AS amount, 1 AS customer_id
  UNION ALL
  SELECT 3 AS order_id, date '2023-01-03' AS order_date, 200 AS amount, 2 AS customer_id
  UNION ALL
  SELECT 4 AS order_id, date '2023-01-04' AS order_date, 120 AS amount, 1 AS customer_id
  UNION ALL
  SELECT 5 AS order_id, date '2023-01-05' AS order_date, 180 AS amount, 2 AS customer_id
)
SELECT
  order_id,
  order_date,
  amount,
  customer_id,
  lag(order_date) OVER (PARTITION BY customer_id ORDER BY order_date) AS prev_order_date,
  order_date - lag(order_date) OVER (PARTITION BY customer_id ORDER BY order_date) AS days_since_last_order
FROM orders;

----------------------------------------

TITLE: Finding Position of 'Tutorial' in String
DESCRIPTION: Example showing how to find the position of 'Tutorial' in 'PostgreSQL Tutorial' string.

LANGUAGE: sql
CODE:
SELECT POSITION('Tutorial' IN 'PostgreSQL Tutorial');

----------------------------------------

TITLE: Creating Film Category Statistics View
DESCRIPTION: Creates a view that counts the number of films in each category.

LANGUAGE: sql
CODE:
CREATE VIEW film_category_stat AS
SELECT
  name,
  COUNT(film_id)
FROM
  category
  INNER JOIN film_category USING (category_id)
  INNER JOIN film USING (film_id)
GROUP BY
  name;

----------------------------------------

TITLE: Case-Sensitive Search Example
DESCRIPTION: Demonstrates case sensitivity in POSITION() function by searching for lowercase 'tutorial'.

LANGUAGE: sql
CODE:
SELECT POSITION('tutorial' IN 'PostgreSQL Tutorial');

----------------------------------------

TITLE: Creating PostgreSQL Function
DESCRIPTION: SQL function that counts students registered between two dates

LANGUAGE: sql
CODE:
create function get_student_count(begin_date date, end_date date)
returns int
language plpgsql as $$
declare
   student_count integer;
begin
   select count(*)
   into student_count
   from students
   where registration_date between begin_date and end_date;

   return student_count;
end;
$$;

----------------------------------------

TITLE: Converting JSON to Binary Format in PostgreSQL
DESCRIPTION: Demonstrates how to use json_serialize() to convert JSON data into binary format using the RETURNING bytea clause.

LANGUAGE: sql
CODE:
-- Convert JSON to binary format
SELECT json_serialize(
    '{"id": 1, "data": "test"}'
    RETURNING bytea
);

----------------------------------------

TITLE: Alternative INSERT_ACTOR Procedure with Full Name
DESCRIPTION: Creates another version of the insert_actor procedure that accepts a full name parameter and splits it into first and last names.

LANGUAGE: sql
CODE:
create or replace procedure insert_actor(
	full_name varchar
)
language plpgsql
as $$
declare
	fname varchar;
	lname varchar;
begin
	-- split the fullname into first & last name
	select
		split_part(full_name,' ', 1),
		split_part(full_name,' ', 2)
	into fname,
	     lname;

	-- insert first & last name into the actor table
	insert into actor(first_name, last_name)
	values(fname, lname);
end;
$$;

----------------------------------------

TITLE: Complete Table Creation Implementation
DESCRIPTION: Full implementation showing how to create multiple tables including courses, students, and enrollments with proper error handling

LANGUAGE: csharp
CODE:
using Npgsql;

// Construct CREATE TABLE statements
var statements = new List<string> {@"
    CREATE TABLE courses(
        id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
        name VARCHAR(255) NOT NULL UNIQUE,
        duration INTERVAL NOT NULL,
        description TEXT
    )",

    @"CREATE TABLE students(
        id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
        first_name VARCHAR(255) NOT NULL,
        last_name VARCHAR(255) NOT NULL,
        email VARCHAR(400) NOT NULL UNIQUE,
        registration_date DATE NOT NULL
    )",

    @"CREATE TABLE enrollments(
        student_id INT NOT NULL,
        course_id INT NOT NULL,
        enrolled_date DATE NOT NULL,
        PRIMARY KEY(student_id, course_id)
    )"
};

// Get the connection string
string connectionString = ConfigurationHelper.GetConnectionString("DefaultConnection");

try
{
    // Create a new data source
    using var dataSource =  NpgsqlDataSource.Create(connectionString);

    // Execute each CREATE TABLE statement
    foreach (var statement in statements)
    {
        await using var cmd = dataSource.CreateCommand(statement);
        await cmd.ExecuteNonQueryAsync();
    }

    Console.WriteLine("The tables have been created successfully.");

}
catch (NpgsqlException ex)
{
    Console.WriteLine($"Error: {ex.Message}");
}

----------------------------------------

TITLE: Configuring StepZen for Neon Connection
DESCRIPTION: This YAML configuration sets up the connection details for the Neon database in StepZen. It includes the URI with necessary parameters for secure connection.

LANGUAGE: yaml
CODE:
configurationset:
  - configuration:
      name: postgresql_config
      uri: YOUR_NEON_DSN?user=YOUR_NEON_USERNAME&password=YOUR_NEON_PASSWORD&options=project=YOUR_NEON_PROJECT_ID&sslmode=require

----------------------------------------

TITLE: Creating a Neon Branch using API
DESCRIPTION: cURL command to create a new Neon branch named 'my_test_branch' using the Neon API. Requires the project ID and an API key.

LANGUAGE: bash
CODE:
curl --request POST \
     --url https://console.neon.tech/api/v2/projects/<project-id>/branches \
     --header 'Accept: application/json' \
     --header "Authorization: Bearer $NEON_API_KEY" \
     --header 'Content-Type: application/json' \
     --data '
{
  "branch": {
    "name": "my_test_branch"
  }
}' | jq

----------------------------------------

TITLE: Setting Neon API key as environment variable
DESCRIPTION: Command to export the Neon API key as an environment variable for persistent authentication.

LANGUAGE: bash
CODE:
export NEON_API_KEY=<neon_api_key>

----------------------------------------

TITLE: Inserting Sample Data
DESCRIPTION: Populates the items table with sample data including null values for testing COALESCE functionality.

LANGUAGE: sql
CODE:
INSERT INTO items (product, price, discount)
VALUES
  ('A', 1000, 10),
  ('B', 1500, 20),
  ('C', 800, 5),
  ('D', 500, NULL);

----------------------------------------

TITLE: Creating PostgreSQL Stored Procedure to Count Films
DESCRIPTION: This example creates a stored procedure named count_film that counts the number of rows in the film table. It uses an INOUT parameter to return the count.

LANGUAGE: sql
CODE:
create or replace procedure count_film(
    inout total_film int default 0
)
as
$$
begin
    select count(*) from film
    into total_film;
end;
$$
language plpgsql;

----------------------------------------

TITLE: Using MOD() Function with Integers in PostgreSQL
DESCRIPTION: Examples of using the MOD() function with integer values, demonstrating basic usage and handling of negative numbers.

LANGUAGE: sql
CODE:
SELECT MOD(15,4);

LANGUAGE: sql
CODE:
SELECT MOD(15,-4);

LANGUAGE: sql
CODE:
SELECT MOD(-15,4);

LANGUAGE: sql
CODE:
SELECT MOD(-15,-4);

----------------------------------------

TITLE: Expanding Table JSONB Data
DESCRIPTION: Demonstrates how to expand JSONB attributes from a table into key/value pairs.

LANGUAGE: sql
CODE:
SELECT
  href,
  key,
  value
FROM
  links,
  jsonb_each(attributes);

----------------------------------------

TITLE: Checking PostgreSQL Version
DESCRIPTION: SQL query to retrieve the current PostgreSQL server version information.

LANGUAGE: plaintext
CODE:
SELECT version();

----------------------------------------

TITLE: Converting 180 Degrees to Radians in PostgreSQL
DESCRIPTION: This example uses the RADIANS() function to convert 180 degrees to its equivalent in radians, which results in the PI value.

LANGUAGE: sql
CODE:
SELECT RADIANS(180);

----------------------------------------

TITLE: Updating Product Prices Using TRIM_SCALE() in PostgreSQL
DESCRIPTION: This SQL statement updates the 'price' column in the 'products' table by applying the TRIM_SCALE() function to remove trailing zeroes.

LANGUAGE: sql
CODE:
UPDATE products
SET price = TRIM_SCALE(price)
RETURNING *;

----------------------------------------

TITLE: JSON Function Combinations
DESCRIPTION: Examples showing how to combine json() with other JSON functions for data extraction and type checking.

LANGUAGE: sql
CODE:
-- Convert and extract
SELECT json('{"users": [{"id": 1}, {"id": 2}]}')->'users'->0->>'id' AS user_id;

LANGUAGE: sql
CODE:
-- Convert and check structure
SELECT json_typeof(json('{"a": [1,2,3]}')->'a');

----------------------------------------

TITLE: Creating SendOrderConfirmation Listener in Laravel
DESCRIPTION: Artisan command to generate a SendOrderConfirmation listener class and the PHP code for the listener class implementation.

LANGUAGE: bash
CODE:
php artisan make:listener SendOrderConfirmation --event=OrderPlaced

LANGUAGE: php
CODE:
<?php

namespace App\Listeners;

use App\Events\OrderPlaced;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Support\Facades\Log;

class SendOrderConfirmation implements ShouldQueue
{
    use InteractsWithQueue;

    public function handle(OrderPlaced $event)
    {
        // In a real application, you would send an email here
        Log::info('Order confirmation sent for Order #' . $event->order->id);

        // Additional actions related to order confirmation
        Log::info('Slack notification sent for Order #' . $event->order->id);
        Log::info('SMS notification sent for Order #' . $event->order->id);
        Log::info('Update inventory for Order #' . $event->order->id);
    }
}

----------------------------------------

TITLE: Setting Table Replica Identity
DESCRIPTION: SQL command to set the replica identity for a table to FULL for replication purposes.

LANGUAGE: sql
CODE:
ALTER TABLE <tbl1> REPLICA IDENTITY FULL;

----------------------------------------

TITLE: TRUNCATE with RESTART IDENTITY
DESCRIPTION: Example showing how to truncate a table and reset the identity/sequence values.

LANGUAGE: sql
CODE:
TRUNCATE TABLE products
RESTART IDENTITY;

----------------------------------------

TITLE: Creating Directus Project Directory
DESCRIPTION: Commands to create and navigate to the Directus CMS project directory

LANGUAGE: bash
CODE:
mkdir directus-cms
cd directus-cms

----------------------------------------

TITLE: Creating and Populating Orders Table in SQL
DESCRIPTION: This snippet creates an 'orders' table with sample data for demonstrating max() function usage. It includes columns for order_id, customer_id, product_id, order_amount, and order_date.

LANGUAGE: sql
CODE:
CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    customer_id INTEGER NOT NULL,
    product_id INTEGER,
    order_amount DECIMAL(10, 2) NOT NULL,
    order_date TIMESTAMP NOT NULL
);

INSERT INTO orders (customer_id, product_id, order_amount, order_date)
VALUES
    (1, 101, 150.00, '2023-01-15 10:30:00'),
    (2, 102, 75.50, '2023-01-16 11:45:00'),
    (1, 103, 200.00, '2023-02-01 09:15:00'),
    (3, 104, 50.25, '2023-02-10 14:20:00'),
    (2, 105, 125.75, '2023-03-05 16:30:00'),
    (4, NULL, 90.00, '2023-03-10 13:00:00'),
    (1, 106, 180.50, '2023-04-02 11:10:00'),
    (3, 107, 60.25, '2023-04-15 10:45:00'),
    (5, 108, 110.00, '2023-05-01 15:20:00'),
    (2, 109, 95.75, '2023-05-20 12:30:00');

----------------------------------------

TITLE: Beautifying jsonb_insert() Output with jsonb_pretty()
DESCRIPTION: Using jsonb_pretty() function to format the output of jsonb_insert() for better readability.

LANGUAGE: SQL
CODE:
SELECT
  jsonb_pretty(jsonb_insert(
    '{"name":"John Doe", "address" : { "city": "San Francisco"}}',
    '{address,state}',
    '"California"'
  ));

----------------------------------------

TITLE: Defining jsonb_to_record() Function Signature in SQL
DESCRIPTION: Shows the function signature for jsonb_to_record(), which takes a JSONB input and converts it to a record based on the specified column definitions.

LANGUAGE: sql
CODE:
jsonb_to_record(json JSONB) AS (column_name column_type [, ...])

----------------------------------------

TITLE: Creating SQL Migration for Adding People
DESCRIPTION: SQL statements to insert sample data into the 'person' table, to be used in a Flyway migration file.

LANGUAGE: sql
CODE:
insert into person (ID, NAME) values (1, 'Alex');
insert into person (ID, NAME) values (2, 'Mr. Lopez');
insert into person (ID, NAME) values (3, 'Ms. Smith');

----------------------------------------

TITLE: Creating Laravel Project with Composer
DESCRIPTION: Commands to create a new Laravel project and navigate to its directory

LANGUAGE: bash
CODE:
composer create-project laravel/laravel realtime-taskboard
cd realtime-taskboard

----------------------------------------

TITLE: Error Handling with JSON_TABLE
DESCRIPTION: This SQL query shows how to handle errors when extracting JSON data using JSON_TABLE, including setting default values for missing or erroneous data.

LANGUAGE: sql
CODE:
SELECT title, jt.*
FROM library_books,
JSON_TABLE(
    data,
    '$'
    COLUMNS (
        author_name text PATH '$.author.name',
        metadata TEXT PATH '$.metadata' DEFAULT '{}' ON ERROR,
        edition text PATH '$.metadata.edition' DEFAULT 'Unknown' ON EMPTY DEFAULT 'Unknown' ON ERROR
    )
) AS jt;

----------------------------------------

TITLE: Pushing Node.js Application to GitHub for Railway Deployment
DESCRIPTION: Bash commands to initialize a Git repository, create a .gitignore file, and push the Node.js application code to GitHub. This step is necessary for deploying the application on Railway.

LANGUAGE: bash
CODE:
echo "node_modules/" > .gitignore && echo ".env" >> .gitignore
echo "# neon-railway-example" >> README.md
git init && git add . && git commit -m "Initial commit"
git branch -M main
git remote add origin YOUR_GITHUB_REPO_URL
git push -u origin main

----------------------------------------

TITLE: Setting up Project Directory Structure
DESCRIPTION: Commands to create and set up the initial project directory structure with virtual environment.

LANGUAGE: bash
CODE:
mkdir flask-migrations-demo
cd flask-migrations-demo
python -m venv venv
source venv/bin/activate

----------------------------------------

TITLE: Counting Events by Quarter Using extract() Function
DESCRIPTION: This example shows how to use the extract() function to group events by year and quarter, providing a count of events for each period.

LANGUAGE: sql
CODE:
-- Count events by quarter
SELECT
  EXTRACT(YEAR FROM event_timestamp) AS year,
  EXTRACT(QUARTER FROM event_timestamp) AS quarter,
  COUNT(*) AS event_count
FROM events
GROUP BY year, quarter
ORDER BY year, quarter;

----------------------------------------

TITLE: Performing Distance-Based Geospatial Query using ST_DWithin in Postgres
DESCRIPTION: This SQL query uses the ST_DWithin function to find all locations within 4000 kilometers of New York. It demonstrates how to perform distance-based geospatial searches in Postgres using PostGIS.

LANGUAGE: sql
CODE:
SELECT name FROM locations
WHERE ST_DWithin(
  geom,
  ST_GeomFromText('POINT(-74.006 40.7128)', 4326),
  4000000, -- in meters
  true -- use_spheroid
);

----------------------------------------

TITLE: Creating and Populating a Hobbies Table in PostgreSQL
DESCRIPTION: Sets up a hobbies table with sample data for demonstrating more complex queries involving jsonb_extract_path_text.

LANGUAGE: sql
CODE:
CREATE TABLE hobbies (
   hobby_id SERIAL PRIMARY KEY,
   hobby_name VARCHAR(255),
   difficulty_level VARCHAR(50),
   average_cost VARCHAR(50)
);

INSERT INTO hobbies (hobby_name, difficulty_level, average_cost)
VALUES
    ('Reading', 'Easy', 'Low'),
    ('Cycling', 'Moderate', 'Medium'),
    ('Gaming', 'Variable', 'High'),
    ('Cooking', 'Variable', 'Low');

----------------------------------------

TITLE: Getting JSON String Type with Path Query
DESCRIPTION: Demonstrates using jsonb_typeof() in combination with jsonb_path_query to get the type of a string value within a JSON object.

LANGUAGE: sql
CODE:
SELECT
  jsonb_typeof(
    jsonb_path_query('{"name": "Alice"}', '$.name')
  );

----------------------------------------

TITLE: Inserting Sample Data into the Companies Table
DESCRIPTION: Inserts sample company data into the 'companies' table and returns the inserted rows.

LANGUAGE: SQL
CODE:
INSERT INTO companies(name)
VALUES ('Apple'),
       ('Microsoft'),
       ('Google')
RETURNING *;

----------------------------------------

TITLE: Defining a Column with DOUBLE PRECISION Type in PostgreSQL
DESCRIPTION: This snippet demonstrates how to define a column using the DOUBLE PRECISION data type in a PostgreSQL CREATE TABLE statement. It also shows alternative syntax using FLOAT8 or FLOAT.

LANGUAGE: SQL
CODE:
column_name double precision

LANGUAGE: SQL
CODE:
colum_name float

----------------------------------------

TITLE: Installing Neon MCP Server for Windsurf
DESCRIPTION: Command to install and configure Neon MCP Server for Windsurf (Codeium) client. Requires a valid Neon API key.

LANGUAGE: bash
CODE:
npx -y @smithery/cli@latest install neon --client windsurf --config "{\"neonApiKey\":\"YOUR_NEON_API_KEY\"}"

----------------------------------------

TITLE: Querying Books with Descriptions
DESCRIPTION: SQL query to select titles of books that have non-null descriptions

LANGUAGE: sql
CODE:
SELECT title
FROM books
WHERE description IS NOT NULL;

LANGUAGE: text
CODE:
                       title
----------------------------------------------------
 Postgres Guide
 SQL for Professionals

----------------------------------------

TITLE: Task Board Interface Implementation
DESCRIPTION: HTML and JavaScript code for the task board user interface with real-time updates

LANGUAGE: html
CODE:
<x-app-layout>
  <x-slot name="header">
    <h2 class="text-gray-800 text-xl font-semibold leading-tight">{{ __('Task Board') }}</h2>
  </x-slot>
  <!-- ... rest of the code ... -->
</x-app-layout>

----------------------------------------

TITLE: Creating Sales Table in PostgreSQL
DESCRIPTION: Creates a new table named 'sales' with columns for year, group_id, and amount. Includes primary key and check constraints.

LANGUAGE: sql
CODE:
CREATE TABLE sales(
	year SMALLINT CHECK(year > 0),
	group_id INT NOT NULL,
	amount DECIMAL(10,2) NOT NULL,
	PRIMARY KEY(year,group_id)
);

----------------------------------------

TITLE: Querying Account-Level Metrics with Neon API
DESCRIPTION: This code snippet shows how to retrieve account-level consumption metrics for an organization using the Neon API. It specifies a date range and granularity for the metrics.

LANGUAGE: bash
CODE:
curl --request GET \
     --url 'https://console.neon.tech/api/v2/consumption_history/account?from=2024-06-30T15%3A30%3A00Z&to=2024-07-02T15%3A30%3A00Z&granularity=hourly&org_id=org-ocean-art-12345678' \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $ORG_API_KEY'

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Example environment variable setup for database connections with different roles.

LANGUAGE: bash
CODE:
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

----------------------------------------

TITLE: Creating a View Based on Another View in PostgreSQL
DESCRIPTION: This snippet shows how to create a new view (customer_usa) based on an existing view (customer_info), filtering for customers in the United States.

LANGUAGE: sql
CODE:
CREATE VIEW customer_usa
AS
SELECT
  *
FROM
  customer_info
WHERE
  country = 'United States';

----------------------------------------

TITLE: Installing pg_session_jwt Extension
DESCRIPTION: SQL command to install the pg_session_jwt extension for handling authenticated sessions through JWTs.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pg_session_jwt;

----------------------------------------

TITLE: View Management
DESCRIPTION: Commands for creating and managing different types of views including materialized views

LANGUAGE: sql
CODE:
CREATE OR REPLACE view_name AS
query;

CREATE MATERIALIZED VIEW view_name
AS
query
WITH [NO] DATA;

----------------------------------------

TITLE: Declaring PostgreSQL TIME Column
DESCRIPTION: Basic syntax for declaring a column with the TIME data type, allowing precision specification from 1 to 6 digits.

LANGUAGE: sql
CODE:
column_name TIME(precision);

----------------------------------------

TITLE: Multiple Column Type Changes Syntax
DESCRIPTION: Demonstrates how to change data types of multiple columns in a single ALTER TABLE statement.

LANGUAGE: sql
CODE:
ALTER TABLE table_name
ALTER COLUMN column_name1 [SET DATA] TYPE new_data_type,
ALTER COLUMN column_name2 [SET DATA] TYPE new_data_type,
...;

----------------------------------------

TITLE: Heroku Deployment Setup Commands
DESCRIPTION: Git and Heroku CLI commands for initializing the repository and deploying the application to Heroku.

LANGUAGE: bash
CODE:
git init && echo "node_modules" > .gitignore && echo ".env" >> .gitignore
git branch -M main
git add . && git commit -m "Initial commit"
heroku create neon-heroku-example
heroku config:set DATABASE_URL='NEON_DATABASE_CONNECTION_STRING' -a neon-heroku-example

----------------------------------------

TITLE: Loading Large Dataset with pg_restore
DESCRIPTION: Bash command to load a large dataset into Neon Postgres using pg_restore. This is used for datasets provided in custom or compressed formats.

LANGUAGE: Bash
CODE:
pg_restore -d postgresql://[user]:[password]@[neon_hostname]/[dbname] -Fc filename.backup -c -v --no-owner --no-privileges

----------------------------------------

TITLE: Basic DEGREES() Function Syntax
DESCRIPTION: Shows the basic syntax for using the DEGREES() function to convert radians to degrees.

LANGUAGE: sql
CODE:
DEGREES(radians_value)

----------------------------------------

TITLE: Dropping View with CASCADE Option
DESCRIPTION: Example of dropping a view and its dependencies using CASCADE option.

LANGUAGE: sql
CODE:
DROP VIEW film_info
CASCADE;

----------------------------------------

TITLE: Inserting JSON Data into Table
DESCRIPTION: Inserts sample data with JSON attributes into the links table.

LANGUAGE: sql
CODE:
INSERT INTO links (href, attributes)
VALUES
    ('https://example.com', '{"rel": "stylesheet", "type": "text/css", "media": "screen"}'),
    ('https://example.org', '{"rel": "icon", "type": "image/x-icon"}'),
    ('https://example.net', '{"rel": "alternate", "type": "application/rss+xml", "title": "RSS Feed"}');

----------------------------------------

TITLE: Downloading Neon CLI binary for Windows
DESCRIPTION: Command to download the Neon CLI binary for Windows using curl.

LANGUAGE: bash
CODE:
curl -sL -O https://github.com/neondatabase/neonctl/releases/latest/download/neonctl-win.exe

----------------------------------------

TITLE: Using SUBSTRING() with Table Data in PostgreSQL
DESCRIPTION: Illustrates how to use the SUBSTRING() function to extract initials from customer names in a database table.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  SUBSTRING(first_name, 1, 1) AS initial
FROM
  customer;

----------------------------------------

TITLE: Encrypting a Message with TRANSLATE()
DESCRIPTION: This example demonstrates how to use the TRANSLATE() function to perform a simple encryption by replacing each lowercase letter with a corresponding number or letter.

LANGUAGE: sql
CODE:
SELECT TRANSLATE('a secret message',
                 'abcdefghijklmnopqrstuvxyz',
                 '0123456789acwrvyuiopkjhbq');

----------------------------------------

TITLE: Testing Inherited Privileges in PostgreSQL
DESCRIPTION: This snippet shows how to connect to PostgreSQL using a role and test the inherited privileges from a group role. It includes connecting to the server and executing a SELECT query.

LANGUAGE: shell
CODE:
psql -U alice -d dvdrental

LANGUAGE: sql
CODE:
SELECT count(*) FROM rental;

----------------------------------------

TITLE: Setting Neon API Key as Environment Variable
DESCRIPTION: Demonstrates how to set the Neon API key as an environment variable for secure CLI authentication.

LANGUAGE: bash
CODE:
export NEON_API_KEY=<neon_api_key>

----------------------------------------

TITLE: Creating Read Replica via CLI and API
DESCRIPTION: Examples of creating read replicas using Neon's CLI and REST API endpoints.

LANGUAGE: bash
CODE:
neon branches add-compute mybranch --type read_only

LANGUAGE: bash
CODE:
curl --request POST \
     --url https://console.neon.tech/api/v2/projects/late-bar-27572981/endpoints \
     --header 'Accept: application/json' \
     --header "Authorization: Bearer $NEON_API_KEY" \
     --header 'Content-Type: application/json' \
     --data '
{
  "endpoint": {
    "type": "read_only",
    "branch_id": "br-young-fire-15282225"
  }
}' | jq

----------------------------------------

TITLE: Inserting Element After Position in JSON Array
DESCRIPTION: Demonstration of using jsonb_insert() with the insert_after parameter set to true.

LANGUAGE: SQL
CODE:
SELECT jsonb_insert('[1,2,3]', '{0}', '0', true);

----------------------------------------

TITLE: Sample Table Creation and Data Population
DESCRIPTION: Creates an employees table with necessary columns and constraints, then populates it with sample data.

LANGUAGE: sql
CODE:
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department_id INT,
    employee_type VARCHAR(20)
       CHECK (employee_type IN ('FTE', 'Contractor'))
);

INSERT INTO employees (first_name, last_name, department_id, employee_type)
VALUES
    ('John', 'Doe', 1, 'FTE'),
    ('Jane', 'Smith', 2, 'FTE'),
    ('Bob', 'Johnson', 1, 'Contractor'),
    ('Alice', 'Williams', 3, 'FTE'),
    ('Charlie', 'Brown', 2, 'Contractor'),
    ('Eva', 'Jones', 1, 'FTE'),
    ('Frank', 'Miller', 3, 'FTE'),
    ('Grace', 'Davis', 2, 'Contractor'),
    ('Henry', 'Clark', 1, 'FTE'),
    ('Ivy', 'Moore', 3, 'Contractor');

----------------------------------------

TITLE: Sample Table Creation and Data Insertion
DESCRIPTION: Creates 'member' and 'denylist' tables and inserts sample data for demonstrating DELETE JOIN operations.

LANGUAGE: sql
CODE:
CREATE TABLE member(
   id SERIAL PRIMARY KEY,
   first_name VARCHAR(50) NOT NULL,
   last_name VARCHAR(50) NOT NULL,
   phone VARCHAR(15) NOT NULL
);


CREATE TABLE denylist(
    phone VARCHAR(15) PRIMARY KEY
);


INSERT INTO member(first_name, last_name, phone)
VALUES ('John','Doe','(408)-523-9874'),
       ('Jane','Doe','(408)-511-9876'),
       ('Lily','Bush','(408)-124-9221');


INSERT INTO denylist(phone)
VALUES ('(408)-523-9874'),
       ('(408)-511-9876');

SELECT * FROM member;

SELECT * FROM denylist;

----------------------------------------

TITLE: Adding Migration Scripts to package.json
DESCRIPTION: Adds scripts for generating and running database migrations using Drizzle Kit.

LANGUAGE: json
CODE:
{
  "scripts": {
    ...
    "migration:generate": "drizzle-kit generate",
    "migration:migrate": "drizzle-kit migrate"
  }
}

----------------------------------------

TITLE: Inserting Key/Value Pair into Nested JSON Object
DESCRIPTION: Example of using jsonb_insert() to add a new property to a nested object within a JSON structure.

LANGUAGE: SQL
CODE:
SELECT
  jsonb_insert(
    '{"name":"John Doe", "address" : { "city": "San Francisco"}}',
    '{address,state}',
    '"California"'
  );

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: NPM commands for installing required dependencies including database drivers and dotenv.

LANGUAGE: shell
CODE:
npm install @neondatabase/serverless dotenv

LANGUAGE: shell
CODE:
npm install pg dotenv

LANGUAGE: shell
CODE:
npm install postgres dotenv

----------------------------------------

TITLE: Querying Feature Flag Status in SQL
DESCRIPTION: Selects the status of the 'new_checkout_process' feature flag from the 'feature_flags' table. This query is used with Time Travel to check the flag's status at different points in time.

LANGUAGE: sql
CODE:
SELECT * FROM feature_flags WHERE feature_name = 'new_checkout_process';

----------------------------------------

TITLE: Managing Clients with Azure Functions
DESCRIPTION: Azure Function implementation for managing clients, including HTTP GET to fetch all clients and POST to add a new client.

LANGUAGE: javascript
CODE:
const { app } = require('@azure/functions');
const { getAllClients, addClient } = require('../database/client');

app.http('manageClients', {
  methods: ['GET', 'POST'],
  authLevel: 'anonymous',
  handler: async (request, context) => {
    context.log(`HTTP function processed request for url "${request.url}"`);

    if (request.method === 'GET') {
      try {
        const clients = await getAllClients();
        console.table(clients);
        return {
          body: clients,
        };
      } catch (error) {
        context.log('Error fetching clients:', error);
        return {
          status: 500,
          body: 'Error retrieving clients.',
        };
      }
    }

    if (request.method === 'POST') {
      try {
        const { first_name, last_name, email, phone_number } = await request.json();

        if (!first_name || !last_name || !email || !phone_number) {
          return {
            status: 400,
            body: 'Missing required fields: first_name, last_name, email, phone_number.',
          };
        }

        const newClient = await addClient(first_name, last_name, email, phone_number);
        console.table(newClient);
        return {
          status: 201,
          body: newClient,
        };
      } catch (error) {
        context.log('Error adding client:', error);
        return {
          status: 500,
          body: 'Error adding client.',
        };
      }
    }
  },
});

----------------------------------------

TITLE: Querying BYTEA Data in PostgreSQL
DESCRIPTION: Shows how to retrieve data from a table containing BYTEA columns, displaying the binary data in hexadecimal format.

LANGUAGE: sql
CODE:
SELECT * FROM binary_data;

----------------------------------------

TITLE: Configuring Prisma Client with Pulse Extension
DESCRIPTION: TypeScript code showing how to extend Prisma Client instance with the Pulse extension using an API key.

LANGUAGE: typescript
CODE:
import { PrismaClient } from '@prisma/client';
import { withPulse } from '@prisma/extension-pulse';

const prisma = new PrismaClient().$extends(withPulse({ apiKey: '<your Pulse API key>' }));

----------------------------------------

TITLE: Retrieving Neon Database Connection String
DESCRIPTION: Example of a Neon database connection string used to connect to the database. This string is typically found in the Neon Console.

LANGUAGE: bash
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require

----------------------------------------

TITLE: Using jsonb_populate_record() with Custom Type
DESCRIPTION: This example shows how to use the jsonb_populate_record() function to expand a JSON object into a row of the 'person' type.

LANGUAGE: sql
CODE:
SELECT
  jsonb_populate_record(
    null :: person,
   '{"id": 1, "name": "John", "age": 22}' :: jsonb
  );

----------------------------------------

TITLE: Creating Sample Tables for FULL OUTER JOIN Demo
DESCRIPTION: Creates two sample tables (departments and employees) with their respective columns and primary keys for demonstrating FULL OUTER JOIN operations.

LANGUAGE: sql
CODE:
CREATE TABLE departments (
  department_id serial PRIMARY KEY,
  department_name VARCHAR (255) NOT NULL
);
CREATE TABLE employees (
  employee_id serial PRIMARY KEY,
  employee_name VARCHAR (255),
  department_id INTEGER
);

----------------------------------------

TITLE: Aggregating Review Data with JSON_TABLE
DESCRIPTION: This SQL query uses JSON_TABLE and a CTE to calculate review statistics for each book from the JSON data.

LANGUAGE: sql
CODE:
WITH book_ratings AS (
    SELECT
        b.title,
        jt.rating
    FROM library_books b,
    JSON_TABLE(
        data,
        '$.reviews[*]'
        COLUMNS (
            rating int PATH '$.rating'
        )
    ) AS jt
)
SELECT
    title,
    COUNT(*) as num_reviews,
    ROUND(AVG(rating), 2) as avg_rating,
    MIN(rating) as min_rating,
    MAX(rating) as max_rating
FROM book_ratings
GROUP BY title;

----------------------------------------

TITLE: Running Authorized Queries in Server Component
DESCRIPTION: This TypeScript code demonstrates how to run authorized queries from a server component. It uses the Neon Serverless Driver to connect to the database and execute queries with user authentication.

LANGUAGE: typescript
CODE:
'use server';

import { neon } from '@neondatabase/serverless';
import { getUserInfo } from '@/lib/auth'

export default async function TodoList() {
  const userInfo = await getUserInfo()
  if (!userInfo) {
    throw new Error('No user info available');
  }

  const sql = neon(process.env.DATABASE_AUTHENTICATED_URL!, {
    authToken: async () => {
      const jwt = userInfo.token;
      if (!jwt) {
        throw new Error('No JWT token available');
      }
      return jwt;
    },
  });

  // WHERE filter is optional because of RLS.
  // But we send it anyway for performance reasons.
  const todos = await
    sql('SELECT * FROM todos WHERE user_id = auth.user_id()');

  return (
    <ul>
      {todos.map((todo) => (
        <li key={todo.id}>{todo.task}</li>
      ))}
    </ul>
  );
}

----------------------------------------

TITLE: Generating Version 5 Name-based UUIDs with SHA-1
DESCRIPTION: Function for generating deterministic Version 5 UUIDs using SHA-1 hashing of a namespace and name combination.

LANGUAGE: sql
CODE:
SELECT uuid_generate_v5(uuid_ns_dns(), 'example.com');

----------------------------------------

TITLE: Implementing PostgreSQL Connection Class in PHP
DESCRIPTION: PHP class for managing connection to PostgreSQL database using PDO, including methods for establishing connection and implementing singleton pattern.

LANGUAGE: sql
CODE:
<?php

namespace PostgreSQLTutorial;

/**
 * Represent the Connection
 */
class Connection {

    /**
     * Connection
     * @var type
     */
    private static $conn;

    /**
     * Connect to the database and return an instance of \PDO object
     * @return \PDO
     * @throws \Exception
     */
    public function connect() {

        // read parameters in the ini configuration file
        $params = parse_ini_file('database.ini');
        if ($params === false) {
            throw new \Exception("Error reading database configuration file");
        }
        // connect to the postgresql database
        $conStr = sprintf("pgsql:host=%s;port=%d;dbname=%s;user=%s;password=%s",
                $params['host'],
                $params['port'],
                $params['database'],
                $params['user'],
                $params['password']);

        $pdo = new \PDO($conStr);
        $pdo->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);

        return $pdo;
    }

    /**
     * return an instance of the Connection object
     * @return type
     */
    public static function get() {
        if (null === static::$conn) {
            static::$conn = new static();
        }

        return static::$conn;
    }

    protected function __construct() {

    }

    private function __clone() {

    }

    private function __wakeup() {

    }

}

----------------------------------------

TITLE: Creating and Populating Products Table with Nested JSONB Data in PostgreSQL
DESCRIPTION: This SQL snippet creates a 'products' table with a JSONB column containing nested data structures. It includes product information with nested specs and an array of tags.

LANGUAGE: sql
CODE:
CREATE TABLE products (
    id INT,
    attributes JSONB
);

INSERT INTO products (id, attributes)
VALUES
    (1, '{"name": "Laptop", "specs": {"brand": "Dell", "RAM": "16GB", "storage": {"type": "SSD", "capacity": "512GB"}}, "tags": ["pc"]}'),
    (2, '{"name": "Smartphone", "specs": {"brand": "Google", "RAM": "8GB", "storage": {"type": "UFS", "capacity": "256GB"}}, "tags": ["android", "pixel"]}'),
    (3, '{"name": "Smartphone", "specs": {"brand": "Apple", "RAM": "8GB", "storage": {"type": "UFS", "capacity": "128GB"}}, "tags": ["ios", "iphone"]}');

----------------------------------------

TITLE: Counting Actors Using SELECT INTO
DESCRIPTION: Example showing how to count records from the actor table and assign the result to a variable.

LANGUAGE: plpgsql
CODE:
do
$$
declare
   actor_count integer;
begin
   -- select the number of actors from the actor table
   select count(*)
   into actor_count
   from actor;

   -- show the number of actors
   raise notice 'The number of actors: %', actor_count;
end;
$$;

----------------------------------------

TITLE: Deleting Duplicates Using Subquery
DESCRIPTION: Removes duplicate rows using ROW_NUMBER() window function to identify duplicates while preserving the lowest ID.

LANGUAGE: sql
CODE:
DELETE FROM basket
WHERE id IN
    (SELECT id
    FROM
        (SELECT id,
         ROW_NUMBER() OVER( PARTITION BY fruit
        ORDER BY  id ) AS row_num
        FROM basket ) t
        WHERE t.row_num > 1 );

----------------------------------------

TITLE: Comparing NULL with NULL in PostgreSQL
DESCRIPTION: This snippet demonstrates that comparing NULL with NULL using the equality operator returns NULL.

LANGUAGE: phpsqlsql
CODE:
SELECT null = null AS result;

----------------------------------------

TITLE: Running Neon CLI with npx
DESCRIPTION: Command to run Neon CLI without installation using npx (Node Package eXecute).

LANGUAGE: shell
CODE:
npx neonctl <command>

----------------------------------------

TITLE: Generating Test Data for Employees
DESCRIPTION: Example of using generate_series() to create test data for an employees table.

LANGUAGE: sql
CODE:
INSERT INTO employees(name, age)
SELECT 'employee ' || n  name,
        floor(random()* (65-18+ 1) + 18) age
FROM generate_series(1,100) n
RETURNING *;

----------------------------------------

TITLE: Enabling PDO_PGSQL Driver in PHP Configuration
DESCRIPTION: Demonstrates how to uncomment the PDO_PGSQL extension in the php.ini file to enable PostgreSQL support.

LANGUAGE: shellsql
CODE:
;extension=php_pdo_pgsql.dll

LANGUAGE: php
CODE:
extension=php_pdo_pgsql.dll

----------------------------------------

TITLE: Using jsonb_object() to Create Metadata in PostgreSQL Query
DESCRIPTION: Illustrates how to use jsonb_object() in a SELECT statement to create a metadata JSONB object from specific columns in the book_inventory table.

LANGUAGE: sql
CODE:
SELECT book_id, title, jsonb_object(
  ARRAY['author', 'genre'],
  ARRAY[author, genre]
) AS metadata
FROM book_inventory;

----------------------------------------

TITLE: Configuring Neon MCP Server in Cline (Windows WSL)
DESCRIPTION: JSON configuration for setting up Neon MCP Server in Cline on Windows using WSL. It uses the wsl command to execute npx within the WSL environment.

LANGUAGE: json
CODE:
{
  "mcpServers": {
    "neon": {
      "command": "wsl",
      "args": ["npx", "-y", "@neondatabase/mcp-server-neon", "start", "<YOUR_NEON_API_KEY>"]
    }
  }
}

----------------------------------------

TITLE: Using PostgreSQL LAST_VALUE Over a Result Set
DESCRIPTION: This example demonstrates how to use the LAST_VALUE() function to return all products along with the product that has the highest price across the entire result set.

LANGUAGE: sql
CODE:
SELECT
    product_id,
    product_name,
    price,
    LAST_VALUE(product_name)
    OVER(
        ORDER BY price
        RANGE BETWEEN
            UNBOUNDED PRECEDING AND
            UNBOUNDED FOLLOWING
    ) highest_price
FROM
    products;

----------------------------------------

TITLE: Version Information Output Example
DESCRIPTION: Example output showing the version information returned by the version() function.

LANGUAGE: text
CODE:
                          version
------------------------------------------------------------
 PostgreSQL 16.1, compiled by Visual C++ build 1937, 64-bit
(1 row)

----------------------------------------

TITLE: Creating and Populating a Table for INITCAP() Example
DESCRIPTION: SQL commands to create a 'blog_posts' table and insert sample data for demonstrating INITCAP() usage with table data.

LANGUAGE: sql
CODE:
CREATE TABLE blog_posts(
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL
);

INSERT INTO blog_posts(title)
VALUES
    ('getting started with postgresql'),
    ('advanced postgresql queries'),
    ('postgresql performance optimization'),
    ('postgresql data modeling techniques'),
    ('using postgresql in web development')
RETURNING *;

----------------------------------------

TITLE: Updating Order Model with Fillable Properties
DESCRIPTION: PHP code to update the Order model class with fillable properties for mass assignment.

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Order extends Model
{
    use HasFactory;

    protected $fillable = ['customer_name', 'total', 'status'];
}

----------------------------------------

TITLE: Correlated Subquery Average Calculation in PostgreSQL
DESCRIPTION: This snippet shows the correlated subquery portion that calculates the average film length for a specific rating. It references the outer query's rating value through the table alias 'f'.

LANGUAGE: sql
CODE:
SELECT AVG(length)
FROM film
WHERE rating = f.rating

----------------------------------------

TITLE: Advanced Schema Diff CLI Command with Options
DESCRIPTION: Shows an advanced schema comparison using aliases, context settings, LSN specification, and database filtering.

LANGUAGE: bash
CODE:
neon branch sd dev/alex@0/123456 --db people

----------------------------------------

TITLE: Accessing Array Elements by Index in PostgreSQL
DESCRIPTION: This SQL query shows how to access the first element of an array column for each row in the products table.

LANGUAGE: sql
CODE:
SELECT name, categories[1] AS first_category
FROM products;

----------------------------------------

TITLE: Sorting Data in Postgres
DESCRIPTION: These SQL examples demonstrate various ways to sort query results in Postgres. It covers sorting in ascending and descending order, sorting by multiple columns, using column aliases, sorting by expressions, and handling NULL values in sorting.

LANGUAGE: sql
CODE:
-- Sort results in ascending order by a single column
SELECT * FROM users ORDER BY username ASC;

-- Sort results in descending order by a single column
SELECT * FROM users ORDER BY created_at DESC;

-- Sort results by multiple columns
-- First by status in ascending order, then by created_at in descending order
SELECT * FROM orders ORDER BY status ASC, created_at DESC;

-- Sort using a column alias
SELECT username, created_at, EXTRACT(YEAR FROM created_at) AS year FROM users ORDER BY year DESC;

-- Sort by an expression
SELECT username, LENGTH(username) AS username_length FROM users ORDER BY username_length ASC;

-- Sort NULL values to the end (using NULLS LAST)
SELECT * FROM tasks ORDER BY due_date ASC NULLS LAST;

-- Sort NULL values to the start (using NULLS FIRST)
SELECT * FROM tasks ORDER BY due_date DESC NULLS FIRST;

----------------------------------------

TITLE: Applying LENGTH() Function to Table Data
DESCRIPTION: Demonstrates how to use the LENGTH() function with data from a table column, ordering results by the character count.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  LENGTH (first_name) len
FROM
  customer
ORDER BY
  len;

----------------------------------------

TITLE: Creating and Managing a Neon Postgres Database with JavaScript
DESCRIPTION: This snippet demonstrates how to use the NeonToolkit to create a project, execute SQL queries, and delete the project. It showcases creating a table, inserting data, and querying the database.

LANGUAGE: javascript
CODE:
import { NeonToolkit } from "@neondatabase/toolkit";

const toolkit = new NeonToolkit(process.env.NEON_API_KEY!);
const project = await toolkit.createProject();

await toolkit.sql(
  project,
  `
    CREATE TABLE IF NOT EXISTS users (
      id UUID PRIMARY KEY,
      name VARCHAR(255) NOT NULL
    );
  `,
);

await toolkit.sql(
  project,
  `INSERT INTO users (id, name) VALUES (gen_random_uuid(), 'Sam Smith')`,
);

console.log(
  await toolkit.sql(
    project,
    `SELECT name FROM users`,
  ),
);

await toolkit.deleteProject(project);

----------------------------------------

TITLE: Creating a GIN Index on a Specific JSON Field
DESCRIPTION: Illustrates creating a GIN index on a specific field within JSON documents stored in a JSONB column for targeted query optimization.

LANGUAGE: sql
CODE:
CREATE INDEX index_name
ON table_name
USING GIN ((data->'field_name') jsonb_path_ops);

----------------------------------------

TITLE: Creating Custom Domain with Constraints
DESCRIPTION: Creates a custom domain 'contact_name' that enforces VARCHAR type with NOT NULL and no-spaces constraints.

LANGUAGE: sql
CODE:
CREATE DOMAIN contact_name AS
   VARCHAR NOT NULL CHECK (value !~ '\s');

----------------------------------------

TITLE: Prisma Client Query Examples
DESCRIPTION: TypeScript code demonstrating Prisma Client queries for creating and retrieving records

LANGUAGE: typescript
CODE:
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  const elements = await prisma.elements.findMany();
  console.log(elements);
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });

----------------------------------------

TITLE: Partial ROLLUP Example
DESCRIPTION: Demonstrates a partial roll-up by applying ROLLUP only to the brand column while keeping segment as a fixed grouping.

LANGUAGE: sql
CODE:
SELECT
    segment,
    brand,
    SUM (quantity)
FROM
    sales
GROUP BY
    segment,
    ROLLUP (brand)
ORDER BY
    segment,
    brand;

----------------------------------------

TITLE: Assert Statement Example with Film Count Check
DESCRIPTION: Example showing how to use assert statement to verify if the film table has data. The assertion checks if the film count is less than 0.

LANGUAGE: sql
CODE:
do $$
declare
   film_count integer;
begin
   select count(*)
   into film_count
   from film;

   assert film_count < 0, 'Film not found, check the film table';
end$$;

----------------------------------------

TITLE: Retrieving Neon Database Connection String
DESCRIPTION: Example of a Neon database connection string and its required format for the Postgres client library.

LANGUAGE: bash
CODE:
postgresql://username:password@hostname/dbname?sslmode=require

LANGUAGE: bash
CODE:
Host=hostname;Port=5432;Database=dbname;Username=username;Password=password;SSLMode=Require

----------------------------------------

TITLE: Downloading Neon CLI binary for macOS
DESCRIPTION: Command to download the Neon CLI binary for macOS using curl.

LANGUAGE: bash
CODE:
curl -sL https://github.com/neondatabase/neonctl/releases/latest/download/neonctl-macos -o neonctl

----------------------------------------

TITLE: Installing Neon CLI with Homebrew on macOS
DESCRIPTION: Command to install Neon CLI using the Homebrew package manager on macOS.

LANGUAGE: bash
CODE:
brew install neonctl

----------------------------------------

TITLE: Using ROLLUP to Calculate Sales Totals by Brand and Segment
DESCRIPTION: Demonstrates how to use ROLLUP to calculate subtotals and grand totals for sales data grouped by brand and segment.

LANGUAGE: sql
CODE:
SELECT
    brand,
    segment,
    SUM (quantity)
FROM
    sales
GROUP BY
    ROLLUP (brand, segment)
ORDER BY
    brand,
    segment;

----------------------------------------

TITLE: Deploying Deno Application to Deno Deploy
DESCRIPTION: Command to deploy the Deno application to Deno Deploy using deployctl.

LANGUAGE: bash
CODE:
deployctl deploy --project=YOUR_DENO_DEPLOY_PROJECT_NAME --prod server.ts

----------------------------------------

TITLE: Creating Replication Role with Neon API
DESCRIPTION: Curl command to create a replication role using the Neon API.

LANGUAGE: bash
CODE:
curl 'https://console.neon.tech/api/v2/projects/hidden-cell-763301/branches/br-blue-tooth-671580/roles' \
  -H 'Accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY" \
  -H 'Content-Type: application/json' \
  -d '{
  "role": {
    "name": "replication_user"
  }
}' | jq

----------------------------------------

TITLE: Testing Salary Update Trigger
DESCRIPTION: Attempts to decrease an employee's salary, which should trigger the validation and raise an exception.

LANGUAGE: sql
CODE:
UPDATE employees
SET salary = salary * 0.9
WHERE id = 1;

----------------------------------------

TITLE: Sales Analysis with abs() and Percentage Calculation
DESCRIPTION: Demonstrates combining abs() with other functions to calculate percentage differences between forecasted and actual sales values.

LANGUAGE: sql
CODE:
WITH sales_data(product, forecast, actual) AS (
  VALUES
    ('Product A', 1000, 1100),
    ('Product B', 500, 450),
    ('Product C', 750, 725),
    ('Product D', 300, 400)
)
SELECT
  product,
  forecast,
  actual,
  round(abs(actual - forecast) / forecast::numeric * 100, 2) AS percentage_difference
FROM sales_data
ORDER BY percentage_difference DESC;

LANGUAGE: text
CODE:
  product  | forecast | actual | percentage_difference
-----------+----------+--------+-----------------------
 Product D |      300 |    400 |                 33.33
 Product A |     1000 |   1100 |                 10.00
 Product B |      500 |    450 |                 10.00
 Product C |      750 |    725 |                  3.33
(4 rows)

----------------------------------------

TITLE: Configuring Nuxt Runtime Database Settings
DESCRIPTION: Setting up the Nuxt configuration file to include database URL in runtime configuration.

LANGUAGE: javascript
CODE:
export default defineNuxtConfig({
  runtimeConfig: {
    databaseUrl: '',
  },
});

----------------------------------------

TITLE: Disabling RLS SQL Command
DESCRIPTION: SQL command to disable Row-Level Security on the todos table.

LANGUAGE: sql
CODE:
ALTER TABLE public.todos DISABLE ROW LEVEL SECURITY;

----------------------------------------

TITLE: Defining PostgreSQL UPPER() Function Syntax
DESCRIPTION: This snippet shows the basic syntax of the PostgreSQL UPPER() function, which takes a text input and converts it to uppercase.

LANGUAGE: sql
CODE:
UPPER(text)

----------------------------------------

TITLE: Setting Default Values for Boolean Columns in PostgreSQL
DESCRIPTION: These SQL snippets demonstrate how to set default values for Boolean columns in existing tables and when creating new tables.

LANGUAGE: SQL
CODE:
ALTER TABLE stock_availability
ALTER COLUMN available
SET DEFAULT FALSE;

LANGUAGE: SQL
CODE:
CREATE TABLE boolean_demo (
   ...
   is_ok BOOL DEFAULT 't'
);

----------------------------------------

TITLE: Creating Table with DEFAULT Constraint - Basic Syntax
DESCRIPTION: Basic syntax for creating a new table with a DEFAULT constraint on a column. Shows how to define default values during table creation.

LANGUAGE: phpsql
CODE:
CREATE TABLE table_name(
    column1 type,
    column2 type DEFAULT default_value,
    column3 type,
    ...
);

----------------------------------------

TITLE: NULL Value Handling Comparison
DESCRIPTION: Demonstrates the difference between concat() and || operator in handling NULL values.

LANGUAGE: sql
CODE:
SELECT
    concat('Hello', NULL, 'World') AS join_concat,
    'Hello' || NULL || 'World' AS join_operator;

----------------------------------------

TITLE: Connecting to PostgreSQL as postgres User
DESCRIPTION: Command to connect to PostgreSQL database using psql client as postgres user.

LANGUAGE: bash
CODE:
psql -U postgres

----------------------------------------

TITLE: Inserting JSON Data into Employees Table using json_to_record()
DESCRIPTION: Demonstrates how to use json_to_record() to insert JSON data into the employees table, converting JSON fields to corresponding table columns.

LANGUAGE: sql
CODE:
INSERT INTO employees
SELECT *
FROM json_to_record('{"id": "123", "name": "John Doe", "department": "Engineering", "salary": "75000"}') AS x(id INT, name TEXT, department TEXT, salary NUMERIC);

----------------------------------------

TITLE: Implementing RLS Policies with Drizzle ORM
DESCRIPTION: Defines a schema for a 'todos' table and implements Row-Level Security policies using Drizzle ORM. This example uses the crudPolicy function to create CRUD policies based on user authentication.

LANGUAGE: typescript
CODE:
import { InferSelectModel, sql } from 'drizzle-orm';
import { bigint, boolean, pgTable, text, timestamp } from 'drizzle-orm/pg-core';
import { authenticatedRole, authUid, crudPolicy } from 'drizzle-orm/neon';

// schema for TODOs table
export const todos = pgTable(
  'todos',
  {
    id: bigint('id', { mode: 'bigint' }).primaryKey().generatedByDefaultAsIdentity(),
    userId: text('user_id')
      .notNull()
      .default(sql`(auth.user_id())`),
    task: text('task').notNull(),
    isComplete: boolean('is_complete').notNull().default(false),
    insertedAt: timestamp('inserted_at', { withTimezone: true }).defaultNow().notNull(),
  },
  // Create RLS policy for the table
  (table) => [
    crudPolicy({
      role: authenticatedRole,
      read: authUid(table.userId),
      modify: authUid(table.userId),
    }),
  ]
);

export type Todo = InferSelectModel<typeof todos>;

----------------------------------------

TITLE: Basic jsonb_agg() Implementation
DESCRIPTION: Demonstrates basic usage of jsonb_agg() to create a JSON array from product data

LANGUAGE: sql
CODE:
SELECT
  jsonb_agg(
    jsonb_build_object('name', name, 'price', price)
  ) AS products
FROM
  products;

----------------------------------------

TITLE: Inserting Sample Data into Post Table
DESCRIPTION: SQL command to insert sample data into the 'Post' table, including various posts with different authors and dates.

LANGUAGE: sql
CODE:
INSERT INTO Post (id, title, content, author_name, date_published)
VALUES
(1, 'My first post', 'This is the content of the first post.', 'Alice', '2023-01-01'),
(2, 'My second post', 'This is the content of the second post.', 'Alice', '2023-02-01'),
(3, 'Old post by Bob', 'This is an old post by Bob.', 'Bob', '2020-01-01'),
(4, 'Recent post by Bob', 'This is a recent post by Bob.', 'Bob', '2023-06-01'),
(5, 'Another old post', 'This is another old post.', 'Alice', '2019-06-01');

----------------------------------------

TITLE: Using TIMEOFDAY() Function
DESCRIPTION: Shows how to use the TIMEOFDAY() function to get the current date and time that advances during a transaction, unlike NOW().

LANGUAGE: sql
CODE:
SELECT
    TIMEOFDAY(),
    pg_sleep(5),
    TIMEOFDAY();

----------------------------------------

TITLE: Creating and Populating Product Table
DESCRIPTION: Creates a product table with a foreign key reference to the product_segment table, then inserts sample product data including names, prices, and segment IDs.

LANGUAGE: sql
CODE:
CREATE TABLE product(
    id SERIAL PRIMARY KEY,
    name VARCHAR NOT NULL,
    price NUMERIC(10,2),
    net_price NUMERIC(10,2),
    segment_id INT NOT NULL,
    FOREIGN KEY(segment_id) REFERENCES product_segment(id)
);


INSERT INTO
    product (name, price, segment_id)
VALUES
    ('diam', 804.89, 1),
    ('vestibulum aliquet', 228.55, 3),
    ('lacinia erat', 366.45, 2),
    ('scelerisque quam turpis', 145.33, 3),
    ('justo lacinia', 551.77, 2),
    ('ultrices mattis odio', 261.58, 3),
    ('hendrerit', 519.62, 2),
    ('in hac habitasse', 843.31, 1),
    ('orci eget orci', 254.18, 3),
    ('pellentesque', 427.78, 2),
    ('sit amet nunc', 936.29, 1),
    ('sed vestibulum', 910.34, 1),
    ('turpis eget', 208.33, 3),
    ('cursus vestibulum', 985.45, 1),
    ('orci nullam', 841.26, 1),
    ('est quam pharetra', 896.38, 1),
    ('posuere', 575.74, 2),
    ('ligula', 530.64, 2),
    ('convallis', 892.43, 1),
    ('nulla elit ac', 161.71, 3);

----------------------------------------

TITLE: Configuring PostgreSQL Connection Parameters
DESCRIPTION: Content of the database.ini file storing PostgreSQL connection parameters.

LANGUAGE: sql
CODE:
host=localhost
port=5432
database=stocks
user=postgres
password=postgres

----------------------------------------

TITLE: Querying Ancestors in ltree Hierarchy in PostgreSQL
DESCRIPTION: SQL query to find all parent categories of 'Gaming Laptops' using the ltree @> operator. This shows how to retrieve all ancestors of a specific node in the hierarchy.

LANGUAGE: sql
CODE:
SELECT id, name, path
FROM product_categories
WHERE path @> 'electronics.computers.laptops.gaming';

----------------------------------------

TITLE: Creating Table with JSONB Column in PostgreSQL
DESCRIPTION: Creates a table named 'person' with a serial primary key and a JSONB column for storing JSON data.

LANGUAGE: sql
CODE:
CREATE TABLE person (
    id SERIAL PRIMARY KEY,
    info JSONB
);

----------------------------------------

TITLE: Exporting Schema from Azure PostgreSQL using pg_dump
DESCRIPTION: This shell command uses pg_dump to export the schema from an Azure PostgreSQL database.

LANGUAGE: shell
CODE:
pg_dump --schema-only --no-owner --no-privileges -h <azure-host> -U <azure-user> -d <azure-database> > schema.sql

----------------------------------------

TITLE: Advanced LEAD Function with Sales Variance Calculation
DESCRIPTION: Uses multiple CTEs and LEAD() function to calculate and display sales variance between consecutive years.

LANGUAGE: sql
CODE:
WITH cte AS (
	SELECT
		year,
		SUM(amount) amount
	FROM sales
	GROUP BY year
	ORDER BY year
), cte2 AS (
	SELECT
		year,
		amount,
		LEAD(amount,1) OVER (
			ORDER BY year
		) next_year_sales
	FROM
		cte
)
SELECT
	year,
	amount,
	next_year_sales,
	(next_year_sales - amount) variance
FROM
	cte2;

----------------------------------------

TITLE: Creating a Table for LCM Calculations in PostgreSQL
DESCRIPTION: Creates a table named 'numbers' with an auto-incrementing ID and an integer value column.

LANGUAGE: sql
CODE:
CREATE TABLE numbers (
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    value INTEGER NOT NULL
);

----------------------------------------

TITLE: Configuring Postgres Role Permissions
DESCRIPTION: SQL commands to set up permissions for authenticated and anonymous roles in the database.

LANGUAGE: sql
CODE:
GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to authenticated;

GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to anonymous;

ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO authenticated;

ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO anonymous;

GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO anonymous;

----------------------------------------

TITLE: Function Signature for json_populate_record in PostgreSQL
DESCRIPTION: The basic signature of the json_populate_record function showing its parameters: a base record of any element type and a JSON object.

LANGUAGE: sql
CODE:
json_populate_record(base_record ANYELEMENT, json JSON)

----------------------------------------

TITLE: Neon Database Connection String Example
DESCRIPTION: Example format of a Neon PostgreSQL connection string used for database connectivity.

LANGUAGE: bash
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/ferretdb

----------------------------------------

TITLE: Checking Current Database
DESCRIPTION: SQL query to display the name of the currently connected database.

LANGUAGE: plaintext
CODE:
SELECT current_database();

----------------------------------------

TITLE: Using jsonb_array_elements() with Table Data in PostgreSQL
DESCRIPTION: Demonstrates how to use jsonb_array_elements() to expand the skills JSON array from the 'employees' table, including an example of retrieving distinct skills.

LANGUAGE: SQL
CODE:
SELECT jsonb_array_elements(skills) skills
FROM employees;

LANGUAGE: SQL
CODE:
SELECT DISTINCT jsonb_array_elements(skills) skills
FROM employees;

----------------------------------------

TITLE: Querying First Pet Name Using jsonb_path_query_first() in PostgreSQL
DESCRIPTION: Retrieves the first pet name for each person using the jsonb_path_query_first() function on the JSONB column.

LANGUAGE: sql
CODE:
SELECT jsonb_path_query_first(data, '$.pets[*].name') AS first_pet_name
FROM person;

----------------------------------------

TITLE: Creating Table with Direct Constraints
DESCRIPTION: Example of creating a mailing list table with direct NOT NULL and space checking constraints on name fields.

LANGUAGE: sql
CODE:
CREATE TABLE mailing_list (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR NOT NULL,
    last_name VARCHAR NOT NULL,
    email VARCHAR NOT NULL,
    CHECK (
        first_name !~ '\s'
        AND last_name !~ '\s'
    )
);

----------------------------------------

TITLE: Converting Currency String to Number
DESCRIPTION: Example demonstrating conversion of a monetary amount with currency symbol and group separators to a numeric value.

LANGUAGE: sql
CODE:
SELECT
    TO_NUMBER(
        '$1,234,567.89',
        'L9G999g999.99'
    );

----------------------------------------

TITLE: Inserting Employee Skills Data
DESCRIPTION: Inserts sample employee records with JSON arrays of skills.

LANGUAGE: sql
CODE:
INSERT INTO employees (name, skills)
VALUES
('John Doe', '["Java", "Python", "SQL"]'),
('Jane Smith', '["C++", "JavaScript", "HTML/CSS"]'),
('Alice Johnson', '["Python", "Data Analysis", "Machine Learning"]'),
('Bob Brown', '["Java", "SQL", "Spring Framework"]');

----------------------------------------

TITLE: Calling Built-in PostgreSQL Function with JDBC
DESCRIPTION: Implementation of a utility class that calls PostgreSQL's initcap() function using JDBC CallableStatement. The method takes a string input and returns the properly capitalized version.

LANGUAGE: java
CODE:
import java.sql.SQLException;
import java.sql.Types;

public class Util {
    public static String properCase(String s) {
        try (var conn = DB.connect();
             var stmt = conn.prepareCall("{ ? = call initcap( ? ) }")) {
            stmt.registerOutParameter(1, Types.VARCHAR);
            stmt.setString(2, s);
            stmt.execute();
            return stmt.getString(1);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
}

----------------------------------------

TITLE: Modifying Enum Types
DESCRIPTION: Demonstrates how to add new values to existing enum types and rename enum values.

LANGUAGE: sql
CODE:
ALTER TYPE enum_name
ADD VALUE [IF NOT EXISTS] 'new_value'
[{BEFORE | AFTER } 'existing_enum_value';

LANGUAGE: sql
CODE:
ALTER TYPE priority
RENAME VALUE 'urgent' TO 'very high';

----------------------------------------

TITLE: Creating a Sample Table in SQL
DESCRIPTION: SQL command to create a 'Post' table with columns for id, title, content, author name, and publication date.

LANGUAGE: sql
CODE:
CREATE TABLE Post (
    id INT PRIMARY KEY,
    title VARCHAR(255),
    content TEXT,
    author_name VARCHAR(100),
    date_published DATE
);

----------------------------------------

TITLE: Creating Orders and Order Items Tables with Foreign Keys
DESCRIPTION: Example demonstrating table creation with foreign key constraints and sample data insertion.

LANGUAGE: sql
CODE:
CREATE TABLE orders(
  order_id SERIAL PRIMARY KEY,
  customer_name VARCHAR(255) NOT NULL,
  ordered_date DATE NOT NULL,
  status VARCHAR(20) NOT NULL
);

CREATE TABLE order_items (
  order_id INT NOT NULL,
  item_id INT NOT NULL,
  product_name VARCHAR(255) NOT NULL,
  quantity INT NOT NULL,
  FOREIGN KEY (order_id)
     REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE,
  PRIMARY KEY (order_id, item_id)
);

----------------------------------------

TITLE: Adding Multiple Columns to an Existing Table
DESCRIPTION: SQL command to add multiple columns to an existing table for demonstrating multi-column UNIQUE index.

LANGUAGE: sql
CODE:
ALTER TABLE employees
ADD work_phone VARCHAR(20),
ADD extension VARCHAR(5);

----------------------------------------

TITLE: Setting Up Postgres Roles for Authentication
DESCRIPTION: These SQL commands set up table-level permissions for 'authenticated' and 'anonymous' roles in the public schema, granting them the ability to read and write to tables.

LANGUAGE: sql
CODE:
-- For existing tables
GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to authenticated;

GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to anonymous;

-- For future tables
ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO authenticated;

ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO anonymous;

----------------------------------------

TITLE: Implementing Due Tasks Command in Laravel Zero
DESCRIPTION: PHP code for the DueTasksCommand class, defining the command signature and functionality to show tasks due within a specified number of days.

LANGUAGE: php
CODE:
<?php

namespace App\Commands;

use App\Task;
use Carbon\Carbon;
use LaravelZero\Framework\Commands\Command;

class DueTasksCommand extends Command
{
    protected $signature = 'task:due {days=7}';
    protected $description = 'Show tasks due within the specified number of days';

    public function handle()
    {
        $days = (int) $this->argument('days');
        $dueDate = Carbon::now()->addDays($days);

        $tasks = Task::where('status', '!=', 'completed')
            ->whereDate('due_date', '<=', $dueDate)
            ->orderBy('due_date')
            ->get();

        if ($tasks->isEmpty()) {
            $this->info("No tasks due within the next {$days} days.");
            return;
        }

        $headers = ['ID', 'Title', 'Priority', 'Due Date', 'Days Left'];
        $rows = $tasks->map(function ($task) {
            $daysLeft = Carbon::now()->diffInDays($task->due_date, false);
            return [
                $task->id,
                $task->title,
                $task->priority,
                $task->due_date->format('Y-m-d'),
                $daysLeft,
            ];
        });

        $this->table($headers, $rows);
    }
}

----------------------------------------

TITLE: Help and Output Formatting
DESCRIPTION: Commands for accessing help documentation and controlling output display formats.

LANGUAGE: text
CODE:
\?

LANGUAGE: text
CODE:
\h ALTER TABLE

LANGUAGE: text
CODE:
\timing

LANGUAGE: text
CODE:
\e

LANGUAGE: text
CODE:
\ef [function name]

LANGUAGE: text
CODE:
\q

----------------------------------------

TITLE: Configuring Postgres Role Permissions
DESCRIPTION: SQL commands to set up permissions for authenticated and anonymous roles in the public schema

LANGUAGE: sql
CODE:
GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to authenticated;

GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to anonymous;

ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO authenticated;

ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO anonymous;

GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO anonymous;

----------------------------------------

TITLE: Marking Tasks as Completed in Postgres
DESCRIPTION: This SQL update statement marks a task as completed by updating its status. The task id needs to be specified in the WHERE clause.

LANGUAGE: sql
CODE:
UPDATE tasks
SET status = 'completed'
WHERE id = <task id here>;

----------------------------------------

TITLE: Installing Neon Serverless Driver
DESCRIPTION: Installs the Neon Serverless Driver using npm, which is required for managing the connection between the application and Neon Postgres database.

LANGUAGE: bash
CODE:
npm install @neondatabase/serverless

----------------------------------------

TITLE: Implementing RLS Policies with Drizzle ORM
DESCRIPTION: TypeScript code showing how to implement RLS policies using Drizzle ORM for a todos table.

LANGUAGE: typescript
CODE:
import { InferSelectModel, sql } from 'drizzle-orm';
import { bigint, boolean, pgTable, text, timestamp } from 'drizzle-orm/pg-core';
import { authenticatedRole, authUid, crudPolicy } from 'drizzle-orm/neon';

export const todos = pgTable(
  'todos',
  {
    id: bigint('id', { mode: 'bigint' }).primaryKey().generatedByDefaultAsIdentity(),
    userId: text('user_id')
      .notNull()
      .default(sql`(auth.user_id())`),
    task: text('task').notNull(),
    isComplete: boolean('is_complete').notNull().default(false),
    insertedAt: timestamp('inserted_at', { withTimezone: true }).defaultNow().notNull(),
  },
  (table) => [
    crudPolicy({
      role: authenticatedRole,
      read: authUid(table.userId),
      modify: authUid(table.userId),
    }),
  ]
);

export type Todo = InferSelectModel<typeof todos>;

----------------------------------------

TITLE: Presigned URL Generation API Route
DESCRIPTION: Next.js API route implementation for generating S3 presigned URLs using AWS SDK

LANGUAGE: tsx
CODE:
import { NextResponse, type NextRequest } from 'next/server';
import { getSignedUrl } from '@aws-sdk/s3-request-presigner';
import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';

export async function GET(request: NextRequest) {
  const accessKeyId = process.env.AWS_KEY_ID;
  const secretAccessKey = process.env.AWS_SECRET_ACCESS_KEY;
  const s3BucketName = process.env.AWS_S3_BUCKET_NAME;
  if (!accessKeyId || !secretAccessKey || !s3BucketName) {
    return new Response(null, { status: 500 });
  }
  const searchParams = request.nextUrl.searchParams;
  const fileName = searchParams.get('fileName');
  const contentType = searchParams.get('contentType');
  if (!fileName || !contentType) {
    return new Response(null, { status: 500 });
  }
  const client = new S3Client({
    region: 'eu-north-1',
    credentials: {
      accessKeyId,
      secretAccessKey,
    },
  });
  const command = new PutObjectCommand({
    Bucket: s3BucketName,
    Key: fileName,
    ContentType: contentType,
  });
  const signedUrl = await getSignedUrl(client, command, { expiresIn: 3600 });
  if (signedUrl) return NextResponse.json({ signedUrl });
  return new Response(null, { status: 500 });
}

----------------------------------------

TITLE: Inserting Data with Various Boolean Literals in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates inserting data into the 'stock_availability' table using different literal values for Boolean data.

LANGUAGE: SQL
CODE:
INSERT INTO stock_availability (product_id, available)
VALUES
  (100, TRUE),
  (200, FALSE),
  (300, 't'),
  (400, '1'),
  (500, 'y'),
  (600, 'yes'),
  (700, 'no'),
  (800, '0');

----------------------------------------

TITLE: Creating Update Task Command in Laravel Zero
DESCRIPTION: Command to generate a new command class for updating tasks in a Laravel Zero project.

LANGUAGE: bash
CODE:
php todo make:command UpdateTaskCommand

----------------------------------------

TITLE: Basic PostgreSQL LIMIT Syntax
DESCRIPTION: Shows the basic syntax for using LIMIT clause in PostgreSQL SELECT statements to constrain the number of returned rows

LANGUAGE: sql
CODE:
SELECT
  select_list
FROM
  table_name
ORDER BY
  sort_expression
LIMIT
  row_count;

----------------------------------------

TITLE: Creating and Using Priority Enum
DESCRIPTION: Demonstrates creating a priority enum type and using it in a table definition with sample data insertion.

LANGUAGE: sql
CODE:
CREATE TYPE priority AS ENUM('low','medium','high');

LANGUAGE: sql
CODE:
CREATE TABLE requests(
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    priority PRIORITY NOT NULL,
    request_date DATE NOT NULL
);

LANGUAGE: sql
CODE:
INSERT INTO requests(title, priority, request_date)
VALUES
   ('Create an enum tutorial in PostgreSQL', 'high', '2019-01-01'),
   ('Review the enum tutorial', 'medium', '2019-01-01'),
   ('Publish the PostgreSQL enum tutorial', 'low', '2019-01-01')
RETURNING *;

----------------------------------------

TITLE: Handling Invalid Paths with jsonb_extract_path() in PostgreSQL
DESCRIPTION: This SQL query shows how jsonb_extract_path() handles an invalid path by returning NULL, demonstrating the function's behavior with incorrect input.

LANGUAGE: sql
CODE:
SELECT
    id,
    jsonb_extract_path(attributes, 'speks') as storage_type
FROM products;

----------------------------------------

TITLE: Using json_array_elements() with Deeply Nested Arrays in PostgreSQL
DESCRIPTION: This complex query demonstrates how to use json_array_elements() to handle deeply nested JSON arrays, extracting information about product variants, sizes, and colors.

LANGUAGE: sql
CODE:
CREATE TABLE electronics_products (
 id INTEGER PRIMARY KEY,
 name TEXT,
 details JSON
);

INSERT INTO electronics_products (id, name, details) VALUES
 (1, 'Laptop', '{"variants": [{"model": "A", "sizes": ["13 inch", "15 inch"], "colors": ["Silver", "Black"]}, {"model": "B", "sizes": ["15 inch", "17 inch"], "colors": ["Gray", "White"]}]}'),
 (2, 'Smartphone', '{"variants": [{"model": "X", "sizes": ["5.5 inch", "6 inch"], "colors": ["Black", "Gold"]}, {"model": "Y", "sizes": ["6.2 inch", "6.7 inch"], "colors": ["Blue", "Red"]}]}');

SELECT
 id,
 name,
 variant->>'model' AS model,
 size,
 color
FROM
 electronics_products,
  json_array_elements(details->'variants') AS variant,
  json_array_elements_text(variant->'sizes') AS t1(size),
  json_array_elements_text(variant->'colors') AS t2(color);

----------------------------------------

TITLE: Type Conversion with RETURNING Clause
DESCRIPTION: Shows how to convert JSON values to specific PostgreSQL data types using the RETURNING clause.

LANGUAGE: sql
CODE:
-- Convert string to float
SELECT JSON_VALUE(
    '"123.45"',
    '$'
    RETURNING float
);

LANGUAGE: text
CODE:
# | json_value
-------------
1 | 123.45

LANGUAGE: sql
CODE:
-- Convert string to date
SELECT JSON_VALUE(
    '"2024-12-04"',
    '$'
    RETURNING date
);

LANGUAGE: text
CODE:
# | json_value
-------------
1 | 2024-12-04

----------------------------------------

TITLE: Inserting a Record into Accounts Table in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates how to insert a new record into the 'accounts' table. It's an example of an implicit transaction in PostgreSQL.

LANGUAGE: sql
CODE:
INSERT INTO accounts(name,balance)
VALUES('Bob',10000);

----------------------------------------

TITLE: Inserting Sample JSONB Data
DESCRIPTION: SQL INSERT statement to populate the products table with sample data containing nested JSON structures

LANGUAGE: sql
CODE:
INSERT INTO products (name, attributes)
VALUES
    ('Laptop', '{"brand": "Dell", "price": 1200, "specs": {"cpu": "Intel i7", "ram": "16GB"}}'),
    ('Smartphone', '{"brand": "Samsung", "price": 800, "specs": {"os": "Android", "storage": "128GB"}}')
RETURNING *;

----------------------------------------

TITLE: Neon Me Command Table Output
DESCRIPTION: Example output of the 'me' command showing user information in a formatted table including login, email, name, and projects limit.

LANGUAGE: bash
CODE:
neon me
┌────────────────┬──────────────────────────┬─────────────┬────────────────┐
│ Login          │ Email                    │ Name        │ Projects Limit │
├────────────────┼──────────────────────────┼─────────────┼────────────────┤
│ sally          │ sally@example.com        │ Sally Smith |       1        │
└────────────────┴──────────────────────────┴─────────────┴────────────────┘

----------------------------------------

TITLE: Deleting a Branch with Neon API (cURL)
DESCRIPTION: cURL command to delete a specific branch in a Neon project, with the response formatted using jq.

LANGUAGE: bash
CODE:
curl -X 'DELETE' \
  'https://console.neon.tech/api/v2/projects/autumn-disk-484331/branches/br-dawn-scene-747675' \
  -H 'accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY" | jq

----------------------------------------

TITLE: Creating a Sample PostgreSQL Table
DESCRIPTION: This SQL statement creates a new table named 'contacts' with a serial primary key and unique email constraint.

LANGUAGE: sql
CODE:
CREATE TABLE contacts(
    id SERIAL PRIMARY KEY,
    first_name VARCHAR NOT NULL,
    last_name VARCHAR NOT NULL,
    email VARCHAR NOT NULL UNIQUE
);

----------------------------------------

TITLE: Authenticating Neon API Request using cURL
DESCRIPTION: This snippet demonstrates how to authenticate a Neon API request using cURL. It shows the proper format for including the API key in the Authorization header using the bearer authentication scheme.

LANGUAGE: bash
CODE:
curl 'https://console.neon.tech/api/v2/projects' \
  -H 'Accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY" \
  -H 'Content-Type: application/json' \

----------------------------------------

TITLE: Compiling Assets for Phoenix in Production Mode
DESCRIPTION: This bash command compiles assets for the Phoenix application in production mode.

LANGUAGE: bash
CODE:
MIX_ENV=prod mix assets.deploy

----------------------------------------

TITLE: Using json_build_object() to Create JSON from User Data in SQL
DESCRIPTION: This query uses json_build_object() to construct a JSON object containing user information from the 'users' table.

LANGUAGE: sql
CODE:
SELECT id,
 json_build_object(
   'name', name,
   'age', age,
   'city', city
 ) AS user_data
FROM users;

----------------------------------------

TITLE: Using json_build_object() to Create JSON from User Data in SQL
DESCRIPTION: This query uses json_build_object() to construct a JSON object containing user information from the 'users' table.

LANGUAGE: sql
CODE:
SELECT id,
 json_build_object(
   'name', name,
   'age', age,
   'city', city
 ) AS user_data
FROM users;

----------------------------------------

TITLE: Querying PostgreSQL Table Data in SQL
DESCRIPTION: SQL queries to select all data from the stocks table, used to verify the results of delete operations in the tutorial.

LANGUAGE: sql
CODE:
SELECT * FROM stocks
ORDER BY id;

----------------------------------------

TITLE: DELETE USING Syntax in PostgreSQL
DESCRIPTION: Demonstrates the basic syntax for using DELETE with the USING clause to emulate a DELETE JOIN operation in PostgreSQL.

LANGUAGE: sql
CODE:
DELETE FROM table1
USING table2
WHERE condition
RETURNING returning_columns;

----------------------------------------

TITLE: Using ASCII() Function in PostgreSQL
DESCRIPTION: This snippet demonstrates the basic syntax of the ASCII() function in PostgreSQL. It takes a single character as an argument and returns its ASCII code or Unicode code point.

LANGUAGE: sql
CODE:
ASCII(char)

----------------------------------------

TITLE: Testing Personal Information Form Submission
DESCRIPTION: PHP unit test for submitting the personal information form using Volt's testing utilities.

LANGUAGE: PHP
CODE:
<?php

namespace Tests\Feature;

use Tests\TestCase;
use App\Models\Applicant;
use Livewire\Volt\Volt;
use Illuminate\Foundation\Testing\RefreshDatabase;

class PersonalInfoTest extends TestCase
{
    use RefreshDatabase;

    public function test_can_submit_personal_info()
    {
        Volt::test('personal-info-form')
            ->set('first_name', 'John')
            ->set('last_name', 'Doe')
            ->set('email', 'john@example.com')
            ->call('saveAndContinue')
            ->assertRedirect('/apply/education');

        $this->assertDatabaseHas('applicants', [
            'first_name' => 'John',
            'last_name' => 'Doe',
            'email' => 'john@example.com',
        ]);

        $this->assertNotNull(session('applicant_id'));
    }
}

----------------------------------------

TITLE: PostgreSQL FIRST_VALUE() Function Syntax
DESCRIPTION: Basic syntax definition for the FIRST_VALUE() function showing the required OVER clause with optional PARTITION BY and ORDER BY components.

LANGUAGE: css
CODE:
FIRST_VALUE ( expression )
OVER (
    [PARTITION BY partition_expression, ... ]
    ORDER BY sort_expression [ASC | DESC], ...

----------------------------------------

TITLE: Verifying CURRENT_TIMESTAMP Results
DESCRIPTION: Queries the table to verify the automatically set timestamp value.

LANGUAGE: sql
CODE:
SELECT * FROM note;

----------------------------------------

TITLE: Renaming New Branch
DESCRIPTION: Renames the newly created branch to match the name of the old branch. Requires project_id and branch_id of the new branch.

LANGUAGE: bash
CODE:
curl --request PATCH \
     --url https://console.neon.tech/api/v2/projects/dark-cell-12604300/branches/br-falling-flower-15986510 \
     --header 'Accept: application/json' \
     --header "Authorization: Bearer $NEON_API_KEY" \
     --header 'Content-Type: application/json' \
     --data '
{
  "branch": {
    "name": "dev_branch_1"
  }
}
'

----------------------------------------

TITLE: Creating a Data Model in Reflex
DESCRIPTION: Python code defining a Customer model using Reflex's ORM capabilities.

LANGUAGE: python
CODE:
# <new_project>/models.py

import reflex as rx

class Customer(rx.Model, table=True):
    """The customer model."""

    name: str
    email: str
    phone: str
    address: str

----------------------------------------

TITLE: Extracting Employee Emails Using jsonb_extract_path() in PostgreSQL
DESCRIPTION: Shows how to use jsonb_extract_path() to navigate through nested objects and arrays to extract employee email addresses.

LANGUAGE: sql
CODE:
SELECT
  jsonb_extract_path(
    data, 'employee', 'contacts', '0',
    'value'
  ) email
FROM
  documents;

----------------------------------------

TITLE: Creating Basic Temporary Table in PostgreSQL
DESCRIPTION: Basic syntax for creating a temporary table in PostgreSQL with column definitions and constraints. The table exists only for the duration of the database session.

LANGUAGE: sql
CODE:
CREATE TEMPORARY TABLE table_name(
   column1 datatype(size) constraint,
   column1 datatype(size) constraint,
   ...,
   table_constraints
);

----------------------------------------

TITLE: Installing pg_cron Extension
DESCRIPTION: SQL command to create the pg_cron extension in the database.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pg_cron;

----------------------------------------

TITLE: Neon Database Connection String Example
DESCRIPTION: Example of a Neon database connection string used to connect Neosync to the Neon database. It includes the username, password, host, and database name.

LANGUAGE: bash
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/neosync?sslmode=require

----------------------------------------

TITLE: Querying All Triggers in PostgreSQL Database
DESCRIPTION: This SQL query retrieves all triggers along with their associated tables in the current database using the information_schema.triggers view.

LANGUAGE: sql
CODE:
SELECT
  event_object_table AS table_name,
  trigger_name
FROM
  information_schema.triggers
GROUP BY
  table_name,
  trigger_name
ORDER BY
  table_name,
  trigger_name;

----------------------------------------

TITLE: Setting Up Object Storage for pg_mooncake
DESCRIPTION: SQL commands to create a secret for S3 credentials and set the default bucket for pg_mooncake. Replace placeholders with actual values.

LANGUAGE: sql
CODE:
SELECT mooncake.create_secret('<name>', 'S3', '<key_id>',
        '<secret>', '{"REGION": "<s3-region>"}');

LANGUAGE: sql
CODE:
SET mooncake.default_bucket = 's3://<bucket>';

----------------------------------------

TITLE: Configuring Database Environment Variables
DESCRIPTION: Updates the .env file with Neon database credentials for PostgreSQL connection.

LANGUAGE: env
CODE:
DB_CONNECTION=pgsql
DB_HOST=your-neon-hostname.neon.tech
DB_PORT=5432
DB_DATABASE=your_database_name
DB_USERNAME=your_username
DB_PASSWORD=your_password

----------------------------------------

TITLE: Implementing Reactive PostgreSQL Client in Quarkus
DESCRIPTION: Creates a PostgresResource class that defines an HTTP endpoint to query and return the database version using a reactive PostgreSQL client.

LANGUAGE: java
CODE:
package com.neon.tech;

import jakarta.inject.Inject;
import io.smallrye.mutiny.Multi;
import io.vertx.mutiny.sqlclient.Row;
import io.vertx.mutiny.sqlclient.RowSet;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

@Path("/postgres")
public class PostgresResource {
    @Inject
    io.vertx.mutiny.pgclient.PgPool client;

    @GET
    @Path("/version")
    @Produces(MediaType.TEXT_PLAIN)
    public Multi<String> getVersion() {
        return client.query("SELECT version()")
                .execute()
                .onItem().transformToMulti(this::extractVersion);
    }

    private Multi<String> extractVersion(RowSet<Row> rowSet) {
        return Multi.createFrom().iterable(rowSet)
                .map(r -> r.getValue(0).toString());
    }
}

----------------------------------------

TITLE: Iterating Over Dynamic Query Result with PL/pgSQL For Loop
DESCRIPTION: This complex example shows how to use a PL/pgSQL for loop to iterate over the result of a dynamically constructed query, sorting films by title or release year based on a configuration variable.

LANGUAGE: sql
CODE:
do $$
declare
    -- sort by 1: title, 2: release year
    sort_type smallint := 1;
	-- return the number of films
	rec_count int := 10;
	-- use to iterate over the film
	rec record;
	-- dynamic query
    query text;
begin

	query := 'select title, release_year from film ';

	if sort_type = 1 then
		query := query || 'order by title';
	elsif sort_type = 2 then
	  query := query || 'order by release_year';
	else
	   raise 'invalid sort type %s', sort_type;
	end if;

	query := query || ' limit $1';

	for rec in execute query using rec_count
        loop
	     raise notice '% - %', rec.release_year, rec.title;
	end loop;
end;
$$

----------------------------------------

TITLE: Creating a Sample View in PostgreSQL
DESCRIPTION: Example of creating a new view called film_type that includes the title and rating from the film table.

LANGUAGE: sql
CODE:
CREATE VIEW film_type
AS
SELECT title, rating
FROM film;

----------------------------------------

TITLE: Basic TO_CHAR Function Syntax
DESCRIPTION: Demonstrates the basic syntax of the TO_CHAR() function with its required parameters.

LANGUAGE: sql
CODE:
TO_CHAR(expression, format)

----------------------------------------

TITLE: Implementing List Tasks Command in Laravel Zero
DESCRIPTION: PHP code for the ListTasksCommand class, defining the command signature and functionality to list tasks with optional filters.

LANGUAGE: php
CODE:
<?php

namespace App\Commands;

use App\Task;
use LaravelZero\Framework\Commands\Command;

class ListTasksCommand extends Command
{
    protected $signature = 'task:list {--status=} {--priority=}';
    protected $description = 'List all tasks';

    public function handle()
    {
        $query = Task::query();

        if ($this->option('status')) {
            $query->where('status', $this->option('status'));
        }

        if ($this->option('priority')) {
            $query->where('priority', $this->option('priority'));
        }

        $tasks = $query->get();

        $headers = ['ID', 'Title', 'Status', 'Priority', 'Due Date'];
        $rows = $tasks->map(function ($task) {
            return [
                $task->id,
                $task->title,
                $task->status,
                $task->priority,
                $task->due_date ? $task->due_date->format('Y-m-d') : 'N/A',
            ];
        });

        $this->table($headers, $rows);
    }
}

----------------------------------------

TITLE: Retrieving Branch Count with Neon API in Bash
DESCRIPTION: This snippet shows how to use the new Neon API endpoint to retrieve the total number of branches in a project. It requires the project ID as a parameter in the URL path.

LANGUAGE: bash
CODE:
GET /api/v2/projects/{project_id}/branches/count

----------------------------------------

TITLE: Running Phoenix Application in Production Mode
DESCRIPTION: This bash command runs the Phoenix application in production mode, specifying the port, environment, database URL, and secret key base.

LANGUAGE: bash
CODE:
PORT=4001 \
MIX_ENV=prod \
DATABASE_URL="postgresql://...:...@...aws.neon.tech/neondb?sslmode=require" \
SECRET_KEY_BASE=".../..." \
mix phx.server

----------------------------------------

TITLE: Getting JSON Object Type
DESCRIPTION: Demonstrates using jsonb_typeof() to determine the type of an empty JSON object.

LANGUAGE: sql
CODE:
SELECT jsonb_typeof('{}');

----------------------------------------

TITLE: Retrieving Direct Connection String via Neon CLI
DESCRIPTION: Command to get a direct (non-pooled) connection string for Neon Postgres using the Neon CLI.

LANGUAGE: bash
CODE:
neon connection-string [branch_name]

postgres://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require

----------------------------------------

TITLE: Implementing Delete Task Command in Laravel Zero
DESCRIPTION: PHP code for the DeleteTaskCommand class, defining the command signature and functionality to delete a task.

LANGUAGE: php
CODE:
<?php

namespace App\Commands;

use App\Task;
use LaravelZero\Framework\Commands\Command;

class DeleteTaskCommand extends Command
{
    protected $signature = 'task:delete {id}';
    protected $description = 'Delete a task';

    public function handle()
    {
        $task = Task::find($this->argument('id'));

        if (!$task) {
            $this->error("Task not found!");
            return;
        }

        $task->delete();

        $this->info("Task deleted successfully!");
    }
}

----------------------------------------

TITLE: Creating a Hypertable for Stock Prices in TimescaleDB
DESCRIPTION: This snippet demonstrates how to create a table for stock prices and convert it into a TimescaleDB hypertable for efficient timeseries data management.

LANGUAGE: sql
CODE:
CREATE TABLE stock_prices (
  id SERIAL,
  ticker TEXT NOT NULL,
  ts TIMESTAMPTZ NOT NULL,
  price DOUBLE PRECISION NOT NULL,
  PRIMARY KEY (id, ts)
);

SELECT create_hypertable('stock_prices', 'ts');

----------------------------------------

TITLE: Creating Table with Interval Column
DESCRIPTION: Shows how to create a table with an interval column in PostgreSQL.

LANGUAGE: SQL
CODE:
CREATE TABLE event (
    id SERIAL PRIMARY KEY,
    event_name VARCHAR(255) NOT NULL,
    duration INTERVAL NOT NULL
);

----------------------------------------

TITLE: Setting Up Environment Variables for Database Connections
DESCRIPTION: This snippet shows how to set up environment variables for administrative and authenticated database connections in a .env file.

LANGUAGE: bash
CODE:
# Database owner connection string
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'

# Neon "authenticated" role connection string
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

----------------------------------------

TITLE: Setting up WorkOS JWKS URL Format
DESCRIPTION: Example of the JWKS URL format needed for WorkOS integration with Neon RLS.

LANGUAGE: text
CODE:
https://api.workos.com/sso/jwks/{YOUR_CLIENT_ID}

----------------------------------------

TITLE: Installing Python Dependencies
DESCRIPTION: Commands for installing required Python packages for both synchronous and asynchronous database connections

LANGUAGE: bash
CODE:
pip install psycopg2-binary python-dotenv

LANGUAGE: bash
CODE:
pip install asyncpg python-dotenv

----------------------------------------

TITLE: Creating and Populating Books Table with Integer Types
DESCRIPTION: Demonstrates creating a table using different integer types - INTEGER for book_id and SMALLINT for inventory count. Shows proper usage of integer columns as primary keys and stock counters.

LANGUAGE: sql
CODE:
CREATE TABLE books (
    book_id INTEGER PRIMARY KEY,
    title TEXT NOT NULL,
    copies_in_stock SMALLINT
);

INSERT INTO books (book_id, title, copies_in_stock)
VALUES
    (1, 'War and Peach', 50),
    (2, 'The Great Gatsby', 20),
    (3, 'The Catcher in the Rye', 100);

----------------------------------------

TITLE: Defining FeatureUsage Model
DESCRIPTION: PHP code for the FeatureUsage model, defining relationships and attributes.

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class FeatureUsage extends Model
{
    use HasFactory;

    protected $table = 'feature_usage';

    protected $fillable = [
        'user_id',
        'feature_name',
        'used_at',
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    protected $casts = [
        'used_at' => 'datetime',
    ];
}

----------------------------------------

TITLE: Rounding to Specific Decimal Places in PostgreSQL
DESCRIPTION: Shows how to use the ROUND() function with two arguments to round a number to a specified number of decimal places. The second argument determines the precision of the rounding.

LANGUAGE: sql
CODE:
SELECT ROUND( 10.812, 2 );

LANGUAGE: sql
CODE:
SELECT ROUND( 10.817, 2 );

----------------------------------------

TITLE: Basic Usage of jsonb_object_keys() Function in PostgreSQL
DESCRIPTION: Demonstrates the basic syntax and usage of the jsonb_object_keys() function to extract keys from a JSON object.

LANGUAGE: sql
CODE:
SELECT
  jsonb_object_keys(
    '{"name": "Joe", "age": 18, "city": "New York"}'
  );

----------------------------------------

TITLE: Function Signature for JSON_EXISTS() in PostgreSQL
DESCRIPTION: Demonstrates the syntax and parameters of the JSON_EXISTS() function, including the context_item, path_expression, PASSING clause, and ON ERROR options.

LANGUAGE: sql
CODE:
JSON_EXISTS(
    context_item,                    -- JSON/JSONB input
    path_expression                  -- SQL/JSON path expression
    [ PASSING { value AS varname } [, ...] ]
    [{ TRUE | FALSE | UNKNOWN | ERROR } ON ERROR ]
) → boolean

----------------------------------------

TITLE: Enabling Triggers with ALTER TABLE in PostgreSQL
DESCRIPTION: Demonstrates the syntax for enabling a specific trigger or all triggers on a table using the ALTER TABLE ENABLE TRIGGER statement.

LANGUAGE: sql
CODE:
ALTER TABLE table_name
ENABLE TRIGGER trigger_name |  ALL;

----------------------------------------

TITLE: Creating Database Schema and GIN Index in Neon
DESCRIPTION: SQL commands to create tables for technologies and tutorials, and set up a GIN index for full-text search in Neon.

LANGUAGE: sql
CODE:
-- Technologies Table
CREATE TABLE technologies (
    tech_id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    category TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tutorials Table
CREATE TABLE tutorials (
    tutorial_id SERIAL PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    tech_id INTEGER REFERENCES technologies(tech_id),
    tags TEXT[],
    difficulty_level TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- GIN Index for Full-Text Search
CREATE INDEX idx_tutorials_search ON tutorials
    USING GIN (to_tsvector('english', title || ' ' || content));

----------------------------------------

TITLE: Basic jsonb_path_query_array Example
DESCRIPTION: Shows how to use jsonb_path_query_array() to extract employee names from a JSON array structure.

LANGUAGE: sql
CODE:
SELECT
  jsonb_path_query_array(
    '{"employees": [{"name": "Alice", "age": 25}, {"name": "Bob", "age": 30}]}',
    '$.employees[*].name'
  );

----------------------------------------

TITLE: Basic PostgreSQL BETWEEN Syntax
DESCRIPTION: Demonstrates the basic syntax of the BETWEEN operator for checking if a value falls within a range. Can be rewritten using >= and <= operators with AND.

LANGUAGE: sql
CODE:
value BETWEEN low AND high;

----------------------------------------

TITLE: Basic CURRENT_TIMESTAMP Function Syntax
DESCRIPTION: Demonstrates the basic syntax of the CURRENT_TIMESTAMP function with an optional precision parameter that specifies the number of fractional seconds digits.

LANGUAGE: sql
CODE:
CURRENT_TIMESTAMP(precision)

----------------------------------------

TITLE: Testing Specific Row Query in PostgreSQL with PHP
DESCRIPTION: This script demonstrates how to use the findByPK method to retrieve a specific stock by its ID from the PostgreSQL database. It connects to the database, executes the query, and dumps the result for inspection.

LANGUAGE: PHP
CODE:
<?php
require 'vendor/autoload.php';

use PostgreSQLTutorial\Connection as Connection;
use PostgreSQLTutorial\StockDB as StockDB;

try {
    // connect to the PostgreSQL database
    $pdo = Connection::get()->connect();
    //
    $stockDB = new StockDB($pdo);
    // get all stocks data
    $stock = $stockDB->findByPK(1);

    var_dump($stock);

} catch (\PDOException $e) {
    echo $e->getMessage();
}

----------------------------------------

TITLE: JSON_QUERY Function Signature in PostgreSQL
DESCRIPTION: The complete function signature showing all available parameters and options for the JSON_QUERY function

LANGUAGE: sql
CODE:
JSON_QUERY(
    context_item,                    -- Input JSON/JSONB data
    path_expression                  -- SQL/JSON path expression
    [ PASSING { value AS varname } [, ...] ]
    [ RETURNING data_type [ FORMAT JSON [ ENCODING UTF8 ] ] ]
    [ { WITHOUT | WITH { CONDITIONAL | [UNCONDITIONAL] } } [ ARRAY ] WRAPPER ]
    [ { KEEP | OMIT } QUOTES [ ON SCALAR STRING ] ]
    [ { ERROR | NULL | EMPTY { [ ARRAY ] | OBJECT } | DEFAULT expression } ON EMPTY ]
    [ { ERROR | NULL | EMPTY { [ ARRAY ] | OBJECT } | DEFAULT expression } ON ERROR ]
) → jsonb

----------------------------------------

TITLE: Basic POSITION() Function Syntax in PostgreSQL
DESCRIPTION: Demonstrates the basic syntax of the POSITION() function with required arguments substring and string.

LANGUAGE: sql
CODE:
POSITION(substring in string)

----------------------------------------

TITLE: Creating Sample Table in Supabase
DESCRIPTION: Creates a test table with sample data in Supabase database for replication testing.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS playing_with_neon(id SERIAL PRIMARY KEY, name TEXT NOT NULL, value REAL);
INSERT INTO playing_with_neon(name, value)
SELECT LEFT(md5(i::TEXT), 10), random() FROM generate_series(1, 10) s(i);

----------------------------------------

TITLE: Creating Customer Stats Table
DESCRIPTION: Creates a table to track customer spending statistics with customer ID and total spent amount.

LANGUAGE: sql
CODE:
CREATE TABLE customer_stats (
    customer_id INT PRIMARY KEY,
    total_spent NUMERIC NOT NULL DEFAULT 0
);

----------------------------------------

TITLE: Inserting Sample Data into the Customers Table
DESCRIPTION: This example inserts sample data into the 'customers' table.

LANGUAGE: sql
CODE:
INSERT INTO
   customers (customer_name)
VALUES
   ('Apple'),
   ('Samsung'),
   ('Sony')
RETURNING *;

----------------------------------------

TITLE: Defining GORM Models
DESCRIPTION: Example model definitions with relationships and field configurations

LANGUAGE: go
CODE:
type User struct {
	ID        uint           `gorm:"primaryKey"`
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt gorm.DeletedAt `gorm:"index"`
	Name      string         `gorm:"size:255;not null"`
	Email     string         `gorm:"size:255;not null;uniqueIndex"`
	Posts     []Post         `gorm:"foreignKey:UserID"`
}

type Post struct {
	ID        uint           `gorm:"primaryKey"`
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt gorm.DeletedAt `gorm:"index"`
	Title     string         `gorm:"size:255;not null"`
	Content   string         `gorm:"type:text"`
	UserID    uint           `gorm:"not null"`
	User      User           `gorm:"foreignKey:UserID"`
}

----------------------------------------

TITLE: Basic Usage of PostgreSQL SQRT() Function
DESCRIPTION: This snippet demonstrates the basic syntax and usage of the SQRT() function to calculate the square root of 25.

LANGUAGE: sql
CODE:
SELECT SQRT(25) AS result;

----------------------------------------

TITLE: Pull Request Event Handler Configuration
DESCRIPTION: Additional configuration for the GitHub Actions workflow to handle pull request events. This snippet shows how to update the workflow to trigger when pull requests are merged into the main branch.

LANGUAGE: yaml
CODE:
on:
  schedule:
    - cron: '0 0 * * *' # Runs at midnight UTC
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

----------------------------------------

TITLE: Querying Neon metrics views using psql in Bash
DESCRIPTION: This snippet demonstrates how to connect to the postgres database using psql and view the Neon-specific metric views. It shows the command to list views in the 'neon' schema.

LANGUAGE: bash
CODE:
psql 'postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/postgres?sslmode=require'

postgres=> \dv neon.*
              List of relations
  Schema |      Name      | Type |    Owner
  --------+----------------+------+-------------
  neon   | local_cache    | view | cloud_admin
  neon   | neon_lfc_stats | view | cloud_admin
  (2 rows)

----------------------------------------

TITLE: Creating a dedicated role for pg_partman in Neon Postgres
DESCRIPTION: SQL script to create a dedicated role with minimum required privileges for running pg_partman functions and managing partition sets.

LANGUAGE: sql
CODE:
CREATE ROLE partman_user WITH LOGIN;
ALTER ROLE partman_user WITH PASSWORD '{PASSWORD_FOR_PARTMAN_USER}';

GRANT ALL ON SCHEMA partman TO partman_user;
GRANT ALL ON ALL TABLES IN SCHEMA partman TO partman_user;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA partman TO partman_user;
GRANT EXECUTE ON ALL PROCEDURES IN SCHEMA partman TO partman_user;
GRANT ALL ON SCHEMA '{WORKING_SCHEMA_NAME}' TO partman_user;
GRANT TEMPORARY ON DATABASE '{WORKING_DATABASE_NAME}' to partman_user;

----------------------------------------

TITLE: Creating and Populating Embeddings Table
DESCRIPTION: Creates a table for storing text chunk embeddings with HNSW index and generates embeddings for document chunks.

LANGUAGE: sql
CODE:
drop table embeddings;
create table embeddings
( id int primary key generated always as identity
, doc_id int not null references docs(id)
, chunk text not null
, embedding vector(384) not null
);

create index on embeddings using hnsw (embedding vector_cosine_ops);

with chunks as (
  select id, unnest(rag_bge_small_en_v15.chunks_by_token_count(fulltext, 192, 8)) as chunk
  from docs
)
insert into embeddings (doc_id, chunk, embedding) (
  select id, chunk, rag_bge_small_en_v15.embedding_for_passage(chunk) from chunks
);

----------------------------------------

TITLE: Using CONCAT() with Table Data in PostgreSQL
DESCRIPTION: Demonstrates how to use the CONCAT() function to combine values from multiple columns in a table.

LANGUAGE: SQL
CODE:
SELECT
  CONCAT (first_name, ' ', last_name) AS full_name
FROM
  customer
ORDER BY
  full_name;

----------------------------------------

TITLE: Analyzing Book Reviews with JSON_TABLE
DESCRIPTION: This SQL query uses JSON_TABLE to flatten the reviews array into rows, making it easy to analyze reader feedback.

LANGUAGE: sql
CODE:
SELECT
    b.title,
    jt.*
FROM library_books b,
JSON_TABLE(
    data,
    '$.reviews[*]'
    COLUMNS (
        reviewer text PATH '$.user',
        rating int PATH '$.rating',
        review_date date PATH '$.date',
        comment text PATH '$.comment'
    )
) AS jt
ORDER BY review_date DESC;

----------------------------------------

TITLE: Top N Products per Category
DESCRIPTION: Advanced example showing how to use rank() to find the top 2 most expensive products in each category using a subquery approach.

LANGUAGE: sql
CODE:
WITH products AS (
    SELECT *
    FROM (
        VALUES
            (1, 'A', 100),
            (2, 'A', 80),
            (3, 'B', 200),
            (4, 'B', 180),
            (5, 'B', 150),
            (6, 'C', 120)
    ) AS t(product_id, category, price)
)
SELECT *
FROM (
    SELECT
        product_id,
        category,
        price,
        rank() OVER (PARTITION BY category ORDER BY price DESC) AS rank
    FROM products
) ranked
WHERE rank <= 2;

----------------------------------------

TITLE: Accessing Fields in PL/pgSQL Row Variables
DESCRIPTION: Demonstrates how to access individual fields of a row variable using dot notation.

LANGUAGE: SQL
CODE:
row_variable.field_name

----------------------------------------

TITLE: Setting up Flask Project Environment
DESCRIPTION: Commands for creating a virtual environment and installing required packages for a Flask application.

LANGUAGE: bash
CODE:
mkdir flask-neon-app
cd flask-neon-app
python -m venv venv
source venv/bin/activate
pip install flask flask-sqlalchemy psycopg2-binary python-dotenv flask-migrate
pip freeze > requirements.txt

----------------------------------------

TITLE: Setting up JWKS URL format for SuperTokens
DESCRIPTION: Demonstrates the format for constructing the JWKS URL needed to validate JWT tokens in Neon RLS.

LANGUAGE: text
CODE:
{YOUR_SUPER_TOKENS_CORE_CONNECTION_URI}/.well-known/jwks.json

----------------------------------------

TITLE: Configuring Sequelize for Neon Postgres
DESCRIPTION: JavaScript configuration file for Sequelize, setting up the database connection using the environment variable.

LANGUAGE: javascript
CODE:
// config/config.js

const dotenv = require('dotenv');
dotenv.config();

module.exports = {
  development: {
    url: process.env.DATABASE_URL,
    dialect: 'postgres',
    dialectOptions: { ssl: { require: true } },
  },
};

----------------------------------------

TITLE: Listing Materialized Views
DESCRIPTION: SQL query to retrieve all materialized views from the pg_matviews system view. It returns detailed information including the view definition.

LANGUAGE: sql
CODE:
SELECT * FROM pg_matviews;

----------------------------------------

TITLE: Creating TV Shows and Animes Tables
DESCRIPTION: Creates two independent tables to demonstrate dropping multiple tables at once.

LANGUAGE: sql
CODE:
CREATE TABLE tvshows(
  tvshow_id INT GENERATED ALWAYS AS IDENTITY,
  title VARCHAR,
  release_year SMALLINT,
  PRIMARY KEY(tvshow_id)
);

CREATE TABLE animes(
  anime_id INT GENERATED ALWAYS AS IDENTITY,
  title VARCHAR,
  release_year SMALLINT,
  PRIMARY KEY(anime_id)
);

----------------------------------------

TITLE: Disabling a Subscription in PostgreSQL
DESCRIPTION: This command disables an existing subscription named 'my_subscription'.

LANGUAGE: sql
CODE:
ALTER SUBSCRIPTION my_subscription DISABLE;

----------------------------------------

TITLE: Creating Postgres Publication
DESCRIPTION: SQL command to create a publication for specified tables that will be replicated.

LANGUAGE: sql
CODE:
CREATE PUBLICATION fivetran_pub FOR TABLE <tbl1, tbl2, tbl3>;

----------------------------------------

TITLE: Configuring Sequelize for Neon Postgres
DESCRIPTION: JavaScript configuration file for Sequelize, setting up the database connection using the environment variable.

LANGUAGE: javascript
CODE:
// config/config.js

const dotenv = require('dotenv');
dotenv.config();

module.exports = {
  development: {
    url: process.env.DATABASE_URL,
    dialect: 'postgres',
    dialectOptions: { ssl: { require: true } },
  },
};

----------------------------------------

TITLE: Basic WIDTH_BUCKET Function Syntax
DESCRIPTION: Demonstrates the basic syntax and parameters of the WIDTH_BUCKET() function for categorizing numeric values into buckets.

LANGUAGE: sql
CODE:
WIDTH_BUCKET(numeric_value, lower_bound, upper_bound, num_buckets)

----------------------------------------

TITLE: Specifying PostgreSQL 16 bin Directory Path
DESCRIPTION: This code snippet shows the specific path to the PostgreSQL 16 bin directory on Windows.

LANGUAGE: plaintext
CODE:
C:\Program Files\PostgreSQL\16\bin

----------------------------------------

TITLE: Extracting Subpaths from ltree in PostgreSQL
DESCRIPTION: SQL query to extract a specific part of an ltree path using the subpath() function. This example shows how to retrieve a subset of the path from a given node.

LANGUAGE: sql
CODE:
-- Extract the first two labels from the path
SELECT id, name, subpath(path, 0, 2) AS subpath
FROM product_categories
WHERE path = 'electronics.computers.laptops.gaming';

----------------------------------------

TITLE: Listing Environment Variables Set by Neon Postgres Integration
DESCRIPTION: This code block shows the environment variables that are automatically set when installing the Neon Postgres Native Integration on Vercel. It includes connection strings, database credentials, and parameters for compatibility with Vercel Postgres Templates.

LANGUAGE: bash
CODE:
# Recommended for most uses
DATABASE_URL

# For uses requiring a connection without pgbouncer
DATABASE_URL_UNPOOLED

# Parameters for constructing your own connection string
PGHOST
PGHOST_UNPOOLED
PGUSER
PGDATABASE
PGPASSWORD

# Parameters for Vercel Postgres Templates
POSTGRES_URL
POSTGRES_URL_NON_POOLING
POSTGRES_USER
POSTGRES_HOST
POSTGRES_PASSWORD
POSTGRES_DATABASE
POSTGRES_URL_NO_SSL
POSTGRES_PRISMA_URL

----------------------------------------

TITLE: Handling Nested JSON Data with json_to_record()
DESCRIPTION: Demonstrates how to use json_to_record() with nested JSON data by first creating a custom type for the nested object, then using it in the column definition.

LANGUAGE: sql
CODE:
CREATE TYPE ADDRESS_TYPE AS (
  street TEXT,
  city TEXT
);

SELECT *
FROM json_to_record('{
  "id": "125",
  "name": "Emily Clark",
  "department": "Marketing",
  "salary": "68000",
  "address": {
    "street": "123 Elm St",
    "city": "Springfield"
  }
}') AS x(id INT, name TEXT, department TEXT, salary NUMERIC, address ADDRESS_TYPE);

----------------------------------------

TITLE: Creating a Sample Table for SELECT DISTINCT Examples
DESCRIPTION: Creates a 'colors' table with 'id', 'bcolor', and 'fcolor' columns to demonstrate SELECT DISTINCT usage.

LANGUAGE: sql
CODE:
CREATE TABLE colors(
  id SERIAL PRIMARY KEY,
  bcolor VARCHAR,
  fcolor VARCHAR
);

----------------------------------------

TITLE: Using ANY Operator with Less Than Comparison
DESCRIPTION: Shows how to find employees with salaries less than any manager's salary using the ANY operator.

LANGUAGE: sql
CODE:
SELECT
  *
FROM
  employees
WHERE
  salary < ANY (
    SELECT
      salary
    FROM
      managers
  );

----------------------------------------

TITLE: Creating and Populating Document Storage
DESCRIPTION: Sets up a table for storing documents and demonstrates PDF text extraction and ingestion.

LANGUAGE: sql
CODE:
drop table docs cascade;
create table docs
( id int primary key generated always as identity
, name text not null
, fulltext text not null
);

\set contents `base64 < /path/to/first.pdf`
insert into docs (name, fulltext)
values ('first.pdf', rag.text_from_pdf(decode(:'contents','base64')));

\set contents `base64 < /path/to/second.pdf`
insert into docs (name, fulltext)
values ('second.pdf', rag.text_from_pdf(decode(:'contents','base64')));

\set contents `base64 < /path/to/third.pdf`
insert into docs (name, fulltext)
values ('third.pdf', rag.text_from_pdf(decode(:'contents','base64'))));

----------------------------------------

TITLE: Creating Dashboard Blade View
DESCRIPTION: Blade template for the dashboard view, displaying multiple charts with Tailwind CSS styling.

LANGUAGE: blade
CODE:
<div class="min-h-screen py-12 bg-gray-100">
    <div class="mx-auto max-w-7xl sm:px-6 lg:px-8">
        <!-- Dashboard Header -->
        <div class="flex items-center justify-between mb-10">
            <h1 class="text-4xl font-bold text-gray-800">SaaS Analytics Dashboard</h1>
            <button class="px-4 py-2 text-white transition duration-200 bg-indigo-600 rounded-lg hover:bg-indigo-700">
                Refresh Data
            </button>
        </div>

        <!-- Dashboard Grid -->
        <div class="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
            <!-- Daily Active Users Chart -->
            <div class="p-6 bg-white rounded-lg shadow-md">
                <h2 class="mb-4 text-xl font-semibold">Daily Active Users</h2>
                <livewire:daily-active-users-chart />
            </div>

            <!-- Feature Usage Trends Chart -->
            <div class="p-6 bg-white rounded-lg shadow-md">
                <h2 class="mb-4 text-xl font-semibold">Feature Usage Trends</h2>
                <livewire:feature-usage-trends-chart />
            </div>

            <!-- User Signups vs Cancellations Chart -->
            <div class="p-6 bg-white rounded-lg shadow-md">
                <h2 class="mb-4 text-xl font-semibold">User Signups vs. Cancellations</h2>
                <livewire:user-signups-vs-cancellations-chart />
            </div>
        </div>
    </div>
</div>

----------------------------------------

TITLE: Creating Publication for Specific Table
DESCRIPTION: Creates a publication for a single table in Supabase for logical replication.

LANGUAGE: sql
CODE:
CREATE PUBLICATION my_publication FOR TABLE playing_with_neon;

----------------------------------------

TITLE: Changing Session Defaults for Configuration Variables with ALTER ROLE in PostgreSQL
DESCRIPTION: This snippet demonstrates how to use ALTER ROLE to change a role's session default for a configuration variable. It includes the syntax and an example of setting the client_min_messages parameter for a specific role and database.

LANGUAGE: SQL
CODE:
ALTER ROLE role_name | CURRENT_USER | SESSION_USER | ALL
[IN DATABASE database_name]
SET configuration_param = { value | DEFAULT }

LANGUAGE: SQL
CODE:
ALTER ROLE elephant
IN DATABASE dvdrental
SET client_min_messages = NOTICE;

----------------------------------------

TITLE: Creating Python Project Directory
DESCRIPTION: Commands to create and navigate to a new Python project directory

LANGUAGE: shell
CODE:
mkdir neon-python-example
cd neon-python-example

----------------------------------------

TITLE: Basic Function Signature for Postgres concat()
DESCRIPTION: Shows the two main forms of the concat() function signature - one for direct arguments and another for variadic array input.

LANGUAGE: sql
CODE:
concat(str "any" [, str "any" [, ...] ]) → text

LANGUAGE: sql
CODE:
concat(variadic str "any"[]) → text

----------------------------------------

TITLE: Updating Data via Updatable View in PostgreSQL
DESCRIPTION: This snippet updates the population of New York in the 'cities' table through the 'city_us' view. It demonstrates how to use an updatable view for data modification.

LANGUAGE: sql
CODE:
UPDATE city_us
SET population = 1000000
WHERE name = 'New York';

----------------------------------------

TITLE: Dropping a Column in PostgreSQL
DESCRIPTION: Basic syntax for dropping a column from a table using ALTER TABLE statement. Optionally includes CASCADE to remove dependent objects and IF EXISTS to avoid errors if the column doesn't exist.

LANGUAGE: SQL
CODE:
ALTER TABLE table_name
DROP COLUMN column_name;

-- With CASCADE option
ALTER TABLE table_name
DROP COLUMN column_name CASCADE;

-- With IF EXISTS option
ALTER TABLE table_name
DROP COLUMN IF EXISTS column_name;

----------------------------------------

TITLE: Committing a Transaction in PostgreSQL
DESCRIPTION: This SQL snippet shows three equivalent ways to commit a transaction in PostgreSQL using the COMMIT statement.

LANGUAGE: sql
CODE:
COMMIT WORK;

-- or

COMMIT TRANSACTION;

-- or simply:

COMMIT;

----------------------------------------

TITLE: Table Aliases in PostgreSQL JOIN Clauses
DESCRIPTION: Shows how to use table aliases in a JOIN clause to retrieve data from customer and payment tables while avoiding column name conflicts.

LANGUAGE: sql
CODE:
SELECT
  c.customer_id,
  c.first_name,
  p.amount,
  p.payment_date
FROM
  customer c
  INNER JOIN payment p ON p.customer_id = c.customer_id
ORDER BY
  p.payment_date DESC;

----------------------------------------

TITLE: Implementing Typing Effect Hook in React
DESCRIPTION: Creates a custom React hook called useTypingEffect that simulates a typing effect for text. It can type by letter or by word and allows for customizable typing speed.

LANGUAGE: typescript
CODE:
import { useEffect, useState } from 'react';

export const useTypingEffect = (text: string, duration: number = 50, isTypeByLetter = false) => {
  const [currentPosition, setCurrentPosition] = useState(0);
  const items = isTypeByLetter ? text.split('') : text.split(' ');
  useEffect(() => {
    setCurrentPosition(0);
  }, [text]);
  useEffect(() => {
    if (currentPosition >= items.length) return;
    const intervalId = setInterval(() => {
      setCurrentPosition((prevPosition) => prevPosition + 1);
    }, duration);
    return () => {
      clearInterval(intervalId);
    };
  }, [currentPosition, items, duration]);
  return items.slice(0, currentPosition).join(isTypeByLetter ? '' : ' ');
};

----------------------------------------

TITLE: Deleting a Row from Employees Table to Test AFTER DELETE Trigger
DESCRIPTION: Deletes a row from the employees table to demonstrate the AFTER DELETE trigger functionality.

LANGUAGE: sql
CODE:
DELETE FROM employees
WHERE id = 1
RETURNING *;

----------------------------------------

TITLE: Inserting a Test Record into Employees Table
DESCRIPTION: This SQL INSERT statement adds a test record to the employees table for demonstrating the trigger functionality.

LANGUAGE: sql
CODE:
INSERT INTO employees(first_name, last_name, salary)
VALUES('John','Doe',100000);

----------------------------------------

TITLE: Sorting NUMERIC Values with NaN
DESCRIPTION: Example showing how PostgreSQL sorts NUMERIC values including NaN values.

LANGUAGE: sql
CODE:
SELECT * FROM products
ORDER BY price DESC;

----------------------------------------

TITLE: Basic ROUND() Function Usage in PostgreSQL
DESCRIPTION: Demonstrates how to use the ROUND() function to round a decimal to the nearest integer. The function takes a single argument and returns a rounded value.

LANGUAGE: sql
CODE:
SELECT ROUND( 10.4 );

LANGUAGE: sql
CODE:
SELECT ROUND( 10.5 );

----------------------------------------

TITLE: SQL Query for Checking Table Data
DESCRIPTION: SQL query to verify the contents of the stocks table before and after updates.

LANGUAGE: sql
CODE:
SELECT
    id, symbol, company
FROM
    stocks;

----------------------------------------

TITLE: Filtering Indexes by Table Name Pattern
DESCRIPTION: This SQL query lists indexes for tables whose names start with 'c', ordered by table name and index name.

LANGUAGE: sql
CODE:
SELECT
    tablename,
    indexname,
    indexdef
FROM
    pg_indexes
WHERE
    tablename LIKE 'c%'
ORDER BY
    tablename,
    indexname;

----------------------------------------

TITLE: Using NOW() as Default Value in Table Creation
DESCRIPTION: Demonstrates how to use the NOW() function as a default value for a column when creating a table.

LANGUAGE: sql
CODE:
CREATE TABLE posts (
     id         SERIAL PRIMARY KEY,
     title      VARCHAR NOT NULL,
     created_at TIMESTAMPTZ DEFAULT Now()
);

----------------------------------------

TITLE: Checking WAL Level in PostgreSQL
DESCRIPTION: Bash command to check the current WAL (Write-Ahead Logging) level in PostgreSQL.

LANGUAGE: bash
CODE:
SHOW wal_level;

----------------------------------------

TITLE: Creating a Sample Table for TRUNCATE Trigger Example
DESCRIPTION: Creates a 'companies' table with an auto-incrementing id and a name column to demonstrate the BEFORE TRUNCATE trigger functionality.

LANGUAGE: SQL
CODE:
CREATE TABLE companies(
   id SERIAL PRIMARY KEY,
   name VARCHAR(255) NOT NULL
);

----------------------------------------

TITLE: Configuring Sequelize CLI
DESCRIPTION: Configuration file for Sequelize CLI, specifying the path to the Sequelize configuration file.

LANGUAGE: javascript
CODE:
// .sequelizerc

const path = require('path');

module.exports = {
  config: path.resolve('config', 'config.js'),
};

----------------------------------------

TITLE: Converting Date String with Month Name to Date in PostgreSQL
DESCRIPTION: This example demonstrates converting a date string with a month name to a date value using the TO_DATE() function.

LANGUAGE: sql
CODE:
SELECT TO_DATE('10 Feb 2017', 'DD Mon YYYY');

----------------------------------------

TITLE: Importing Schema into Neon using psql
DESCRIPTION: This shell command uses psql to import the previously exported schema into a Neon database.

LANGUAGE: shell
CODE:
psql <neon-connection-string> < schema.sql

----------------------------------------

TITLE: Using ANY Operator with Greater Than Comparison
DESCRIPTION: Demonstrates how to find employees with salaries greater than any manager's salary using the ANY operator.

LANGUAGE: sql
CODE:
SELECT
  *
FROM
  employees
WHERE
  salary > ANY (
    SELECT
      salary
    FROM
      managers
  );

----------------------------------------

TITLE: Creating and Populating a Users Table with JSONB Data in PostgreSQL
DESCRIPTION: Demonstrates how to create a table with a JSONB column and insert sample data for testing the jsonb_extract_path_text function.

LANGUAGE: sql
CODE:
CREATE TABLE users (
    id INT,
    profile JSONB
);

INSERT INTO users (id, profile)
VALUES
    (1, '{"name": "Alice", "contact": {"email": "alice@example.com", "phone": "1234567890"}, "hobbies": ["reading", "cycling", "hiking"]}'),
    (2, '{"name": "Bob", "contact": {"email": "bob@example.com", "phone": "0987654321"}, "hobbies": ["gaming", "cooking"]}');

----------------------------------------

TITLE: Establishing Database Connection with JDBC
DESCRIPTION: Creates a connection to PostgreSQL database using JDBC DriverManager with connection parameters.

LANGUAGE: java
CODE:
var connection = DriverManager.getConnection("jdbc:postgresql://your-database-host:your-database-port/your-database-name", "your-username", "your-password");

----------------------------------------

TITLE: Initializing Inngest Client - TypeScript
DESCRIPTION: TypeScript code to initialize the Inngest client with a project identifier.

LANGUAGE: typescript
CODE:
import { Inngest } from 'inngest';

export const inngest = new Inngest({ id: 'neon-inngest-project' });

----------------------------------------

TITLE: Inserting Data with CURRENT_TIME Default
DESCRIPTION: Demonstrates inserting data into the log table, letting CURRENT_TIME populate the timestamp automatically.

LANGUAGE: sql
CODE:
INSERT INTO log( message )
VALUES('Testing the CURRENT_TIME function');

----------------------------------------

TITLE: Installing pg_session_jwt Extension in Postgres
DESCRIPTION: Creates the pg_session_jwt extension in the neondb database, which is required for handling authenticated sessions through JSON Web Tokens (JWTs) in Neon RLS.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pg_session_jwt;

----------------------------------------

TITLE: Basic CURRENT_TIMESTAMP Usage Example
DESCRIPTION: Shows how to retrieve the current date and time with timezone using CURRENT_TIMESTAMP function.

LANGUAGE: sql
CODE:
SELECT CURRENT_TIMESTAMP;

----------------------------------------

TITLE: Concatenating Strings with PostgreSQL || Operator
DESCRIPTION: Demonstrates how to use the PostgreSQL concatenation operator (||) to join multiple strings, including handling NULL values.

LANGUAGE: SQL
CODE:
SELECT
   'John' || ' ' || 'Doe' AS full_name;

LANGUAGE: SQL
CODE:
SELECT
   'John' || NULL result;

----------------------------------------

TITLE: Sample Query Without Index
DESCRIPTION: Example SELECT query to find an address by phone number before creating an index.

LANGUAGE: sql
CODE:
SELECT
  address_id,
  address,
  district,
  phone
FROM
  address
WHERE
  phone = '223664661973';

----------------------------------------

TITLE: Basic WIDTH_BUCKET Example
DESCRIPTION: Shows how to use WIDTH_BUCKET() to assign numeric values to three buckets between 0 and 30.

LANGUAGE: sql
CODE:
SELECT
  WIDTH_BUCKET(-1, 0, 30, 3),
  WIDTH_BUCKET(0, 0, 30, 3),
  WIDTH_BUCKET(12, 0, 30, 3),
  WIDTH_BUCKET(25, 0, 30, 3),
  WIDTH_BUCKET(35, 0, 30, 3);

----------------------------------------

TITLE: Creating a Custom Type in PostgreSQL
DESCRIPTION: This snippet demonstrates how to create a custom composite type called 'person' with fields for id, name, and age.

LANGUAGE: sql
CODE:
CREATE TYPE person AS (
  id INT,
  name VARCHAR,
  age INT
);

----------------------------------------

TITLE: Using IS NOT NULL Operator in PostgreSQL
DESCRIPTION: This example uses the IS NOT NULL operator to retrieve addresses where the address2 column is not NULL from the address table.

LANGUAGE: sql
CODE:
SELECT
  address,
  address2
FROM
  address
WHERE
  address2 IS NOT NULL;

----------------------------------------

TITLE: Column Alias Without AS Keyword
DESCRIPTION: Shows how to assign a column alias without using the optional AS keyword.

LANGUAGE: sql
CODE:
SELECT column_name alias_name
FROM table_name;

----------------------------------------

TITLE: Initializing Next.js Project with TypeScript and Tailwind
DESCRIPTION: Command to create a new Next.js project with TypeScript, ESLint, Tailwind CSS, and specific configuration options.

LANGUAGE: bash
CODE:
npx create-next-app guide-neon-next-clerk --typescript --eslint --tailwind --use-npm --no-src-dir --app --import-alias "@/*"

----------------------------------------

TITLE: Computing Neighbor H3 Cells
DESCRIPTION: SQL query to identify the top pickup location and fetch its neighboring H3 cells using the h3_grid_disk function.

LANGUAGE: SQL
CODE:
WITH top_cell AS (
    SELECT
        h3_lat_lng_to_cell(pickup_location, 9) AS h3_index,
        COUNT(*) AS pickup_count
    FROM ride_pickups
    GROUP BY 1
    ORDER BY pickup_count DESC
    LIMIT 1
)
SELECT
    h3_cell_to_lat_lng(neighbor) AS neighbor_centroid
FROM top_cell, h3_grid_disk(h3_index, 1) AS neighbor
WHERE neighbor != h3_index;

----------------------------------------

TITLE: Creating Publication for Table Replication
DESCRIPTION: SQL commands to set up replication identity and create a publication for specific tables.

LANGUAGE: sql
CODE:
ALTER TABLE <table1> REPLICA IDENTITY FULL;
CREATE PUBLICATION mz_source FOR TABLE <tbl1, tbl2, tbl3>;

----------------------------------------

TITLE: Verification SQL Query
DESCRIPTION: SQL query to verify the updated vendor information in the database.

LANGUAGE: sql
CODE:
SELECT
  *
FROM
  vendors
WHERE
  vendor_id = 1;

----------------------------------------

TITLE: Shuffling Query Results in PostgreSQL
DESCRIPTION: Shows how to randomize the order of query results using the RANDOM() function in ORDER BY clause.

LANGUAGE: sql
CODE:
SELECT title FROM film ORDER BY RANDOM();

----------------------------------------

TITLE: Running Authorized Queries in a Server Component
DESCRIPTION: Demonstrates how to run authorized queries from a server component using Stytch session tokens and Neon RLS, including session retrieval and database querying.

LANGUAGE: typescript
CODE:
'use server';

import { neon } from '@neondatabase/serverless';
import { cookies } from 'next/headers';
import { Client } from 'stytch';

const client = new Client({
  project_id: process.env.STYTCH_PROJECT_ID as string,
  secret: process.env.STYTCH_SECRET as string,
});

async function getStytchSession() {
  const cookieStore = cookies();
  const sessionToken = cookieStore.get('stytch_session');
  if (!sessionToken?.value) {
    throw new Error('No session token found');
  }
  const response = await client.sessions.authenticate({
    session_token: sessionToken.value,
  });
  return response.session_jwt;
}

export default async function TodoList() {
  const sql = neon(process.env.DATABASE_AUTHENTICATED_URL!, {
    authToken: async () => {
      const sessionJWT = await getStytchSession();
      if (!sessionJWT) {
        throw new Error('No session JWT available');
      }
      return sessionJWT;
    },
  });

  // WHERE filter is optional because of RLS
  // But we send it anyway for performance reasons
  const todos = await
    sql('SELECT * FROM todos WHERE user_id = auth.user_id()');

  return (
    <ul>
      {todos.map((todo) => (
        <li key={todo.id}>{todo.task}</li>
      ))}
    </ul>
  );
}

----------------------------------------

TITLE: Creating Comedy Film View
DESCRIPTION: Creates a view filtering comedy films from the film_info view.

LANGUAGE: sql
CODE:
CREATE VIEW comedy_film AS
SELECT
  film_id,
  title,
  release_year,
  length
FROM
  film_info
WHERE
  category = 'Comedy';

----------------------------------------

TITLE: Creating Message Table for Chat History
DESCRIPTION: SQL command to create a table structure for storing chat messages with token counts.

LANGUAGE: sql
CODE:
CREATE TABLE message (
  role VARCHAR(50) NOT NULL, -- equals to 'system', 'user' or 'assistant'
  content TEXT NOT NULL,
  created TIMESTAMP NOT NULL DEFAULT NOW(),
  n_tokens INTEGER -- number of content tokens
);

----------------------------------------

TITLE: Running Laravel Queue Worker
DESCRIPTION: Artisan command to start the Laravel queue worker for processing queued jobs.

LANGUAGE: bash
CODE:
php artisan queue:work

----------------------------------------

TITLE: PostgreSQL LEFT JOIN with USING Clause and Table Aliases
DESCRIPTION: Demonstrates using the USING clause with table aliases in a LEFT JOIN between film and inventory tables.

LANGUAGE: sql
CODE:
SELECT
  f.film_id,
  f.title,
  i.inventory_id
FROM
  film f
  LEFT JOIN inventory i USING (film_id)
ORDER BY
  i.inventory_id;

----------------------------------------

TITLE: Calculate Exponential of 0
DESCRIPTION: Shows how to calculate the exponential of 0, which returns 1.

LANGUAGE: sql
CODE:
SELECT EXP(0) result;

----------------------------------------

TITLE: Defining Tasks Table Schema in Migration
DESCRIPTION: PHP code defining the schema for the tasks table in a Laravel migration file.

LANGUAGE: php
CODE:
public function up()
{
    Schema::create('tasks', function (Blueprint $table) {
        $table->id();
        $table->string('title');
        $table->text('description')->nullable();
        $table->enum('status', ['pending', 'in_progress', 'completed'])->default('pending');
        $table->enum('priority', ['low', 'medium', 'high'])->default('medium');
        $table->date('due_date')->nullable();
        $table->timestamps();
    });
}

----------------------------------------

TITLE: Basic PostgreSQL row_to_json() Function Usage
DESCRIPTION: Demonstrates the basic syntax and usage of the row_to_json() function to convert a simple row into a JSON object.

LANGUAGE: SQL
CODE:
SELECT row_to_json(row('John',20));

----------------------------------------

TITLE: Multiple Calls to STATEMENT_TIMESTAMP() Within a Single Statement in PostgreSQL
DESCRIPTION: This snippet demonstrates calling the STATEMENT_TIMESTAMP() function multiple times within a single statement. It shows that the function returns the same timestamp for all calls within the same statement, even with delays between calls.

LANGUAGE: sql
CODE:
SELECT
  statement_timestamp(),
  pg_sleep(3),
  statement_timestamp(),
  pg_sleep(3),
  statement_timestamp();

----------------------------------------

TITLE: Creating Foreign Server Connection
DESCRIPTION: Defines connection parameters for a remote Postgres server using the CREATE SERVER command.

LANGUAGE: sql
CODE:
CREATE SERVER production_db
FOREIGN DATA WRAPPER postgres_fdw
OPTIONS (host 'db.example.com', port '5432', dbname 'analytics');

----------------------------------------

TITLE: Inserting Test Data into Neon Postgres Database
DESCRIPTION: SQL commands to insert sample data into the 'clients', 'hotels', and 'reservations' tables for testing purposes.

LANGUAGE: sql
CODE:
INSERT INTO clients (first_name, last_name, email, phone_number) VALUES
('Alice', 'Dupont', 'alice.dupont@example.com', '0123456789'),
('Bob', 'Martin', 'bob.martin@example.com', '0987654321'),
('Chloé', 'Lefevre', 'chloe.lefevre@example.com', '0147253689');

INSERT INTO hotels (name, location) VALUES
('Hôtel Le Paris', 'Paris'),
('Hôtel des Alpes', 'Annecy'),
('Hôtel de la Plage', 'Nice');

INSERT INTO reservations (client_id, hotel_id, check_in_date, check_out_date, number_of_guests) VALUES
(1, 1, '2024-11-01', '2024-11-05', 2),
(2, 2, '2024-11-10', '2024-11-15', 1),
(3, 3, '2024-12-01', '2024-12-10', 4);

----------------------------------------

TITLE: Defining PostgreSQL Generated Columns Syntax
DESCRIPTION: Shows the syntax for defining a generated column when creating a table in PostgreSQL. It specifies the column name, data type, and the expression used for calculation.

LANGUAGE: sql
CODE:
CREATE TABLE table_name(
   ...,
   colum_name type GENERATED ALWAYS AS (expression ) STORED | VIRTUAL,
   ...
);

----------------------------------------

TITLE: Executing Python Update Script
DESCRIPTION: Command to run the Python update script from command line.

LANGUAGE: css
CODE:
python update.py

----------------------------------------

TITLE: Sample JSON Object for Demonstration
DESCRIPTION: Provides an example JSON object representing user profile information, used in subsequent examples.

LANGUAGE: json
CODE:
{
  "username": "johndoe",
  "age": 30,
  "email": "johndoe@example.com"
}

----------------------------------------

TITLE: Extracting Employee Emails Using jsonb_extract_path_text() in PostgreSQL
DESCRIPTION: Illustrates how to use jsonb_extract_path_text() to extract email addresses from a nested array within the JSONB data stored in the 'documents' table.

LANGUAGE: sql
CODE:
SELECT
  jsonb_extract_path_text(
    data, 'employee', 'contacts', '0',
    'value'
  ) email
FROM
  documents;

----------------------------------------

TITLE: Creating a Neon Branch with Neon API
DESCRIPTION: Demonstrates how to create a new branch named 'dev/alex' using the Neon API. This curl command shows the API request structure for branch creation.

LANGUAGE: bash
CODE:
curl --request POST \
    --url https://console.neon.tech/api/v2/projects/ancient-rice-43775340/branches \
    --header 'accept: application/json' \
    --header 'authorization: Bearer $NEON_API_KEY' \
    --header 'content-type: application/json' \
    --data '
{
  "branch": {
    "name": "dev/alex"
  },
  "endpoints": [
    {
      "type": "read_write"
    }
  ]
}
'

----------------------------------------

TITLE: Inserting Binary Data into PostgreSQL using PHP
DESCRIPTION: PHP method to insert binary file data into PostgreSQL database using PDO. Handles file reading, large object creation, and transaction management.

LANGUAGE: php
CODE:
public function insert($stockId, $fileName, $mimeType, $pathToFile) {
    if (!file_exists($pathToFile)) {
        throw new \Exception("File %s not found.");
    }

    $sql = "INSERT INTO company_files(stock_id,mime_type,file_name,file_data) "
            . "VALUES(:stock_id,:mime_type,:file_name,:file_data)";

    try {
        $this->pdo->beginTransaction();
        $fileData = $this->pdo->pgsqlLOBCreate();
        $stream = $this->pdo->pgsqlLOBOpen($fileData, 'w');
        $fh = fopen($pathToFile, 'rb');
        stream_copy_to_stream($fh, $stream);
        $fh = null;
        $stream = null;
        $stmt = $this->pdo->prepare($sql);
        $stmt->execute([
            ':stock_id' => $stockId,
            ':mime_type' => $mimeType,
            ':file_name' => $fileName,
            ':file_data' => $fileData,
        ]);
        $this->pdo->commit();
    } catch (\Exception $e) {
        $this->pdo->rollBack();
        throw $e;
    }
    return $this->pdo->lastInsertId('company_files_id_seq');
}

----------------------------------------

TITLE: Handling NULL Values in jsonb_array_elements()
DESCRIPTION: SQL query demonstrating how NULL values are handled when using jsonb_array_elements() on a JSONB array containing NULL elements.

LANGUAGE: sql
CODE:
SELECT
 id,
 name,
 size
FROM products AS p,
 jsonb_array_elements(p.details -> 'sizes') AS size
WHERE name = 'Socks';

----------------------------------------

TITLE: Renaming PostgreSQL Schema Basic Syntax
DESCRIPTION: Basic syntax for renaming an existing PostgreSQL schema. Requires schema ownership and CREATE privilege on the database.

LANGUAGE: sql
CODE:
ALTER SCHEMA schema_name
RENAME TO new_name;

----------------------------------------

TITLE: Boolean Expressions in WHERE Clause
DESCRIPTION: Demonstrates combining multiple Boolean conditions using AND operator to filter results

LANGUAGE: sql
CODE:
SELECT id, username
FROM users
WHERE is_active = TRUE AND has_paid_subscription = FALSE;

----------------------------------------

TITLE: Creating Inventory Statistics Table
DESCRIPTION: SQL command to create a statistics table that tracks total quantity across all inventory items.

LANGUAGE: sql
CODE:
CREATE TABLE inventory_stat(
    total_qty INT
);

----------------------------------------

TITLE: Inserting Data with ROW Expression
DESCRIPTION: Demonstrates how to insert data into a table with a composite type column using ROW expression syntax.

LANGUAGE: sql
CODE:
INSERT INTO contacts (name, address)
VALUES (
    'John Smith',
    ROW('123 St', 'Houston', 'TX', 77001, 'USA')
);

----------------------------------------

TITLE: PostgreSQL ABS() Function Basic Syntax
DESCRIPTION: The basic syntax for the PostgreSQL ABS() function that takes a numeric expression as input and returns its absolute value.

LANGUAGE: sql
CODE:
ABS(numeric_expression)

----------------------------------------

TITLE: Unexpected Result with NATURAL JOIN
DESCRIPTION: Illustrates a case where NATURAL JOIN can lead to unexpected results due to multiple common columns between tables.

LANGUAGE: sql
CODE:
SELECT *
FROM city
NATURAL JOIN country;

----------------------------------------

TITLE: Basic TRUNCATE TABLE Syntax
DESCRIPTION: Basic syntax for truncating a single table in PostgreSQL.

LANGUAGE: sql
CODE:
TRUNCATE TABLE table_name;

----------------------------------------

TITLE: Configuring Database Connection in Rails
DESCRIPTION: Creates a .env file with the Neon database connection string. The connection string should not include a database name.

LANGUAGE: shell
CODE:
DATABASE_URL=postgresql://[user]:[password]@[neon_hostname]/

----------------------------------------

TITLE: Error Message for Ambiguous Procedure Drop
DESCRIPTION: Shows the error message when attempting to drop a procedure with an ambiguous name.

LANGUAGE: shell
CODE:
ERROR:  procedure name "insert_actor" is not unique
HINT:  Specify the argument list to select the procedure unambiguously.
SQL state: 42725

----------------------------------------

TITLE: Public Key Encryption with pgcrypto
DESCRIPTION: Example of using pgp_pub_encrypt function for public-key encryption of a secret message using a public key.

LANGUAGE: sql
CODE:
SELECT pgp_pub_encrypt('Secret Message', 'public_key_here');

----------------------------------------

TITLE: Implementing PostgreSQLCreateTable Class in PHP
DESCRIPTION: PHP class for creating tables in PostgreSQL using PDO. It includes methods for creating tables and retrieving table names.

LANGUAGE: PHP
CODE:
<?php

namespace PostgreSQLTutorial;
/**
 * Create table in PostgreSQL from PHP demo
 */
class PostgreSQLCreateTable {

    /**
     * PDO object
     * @var \PDO
     */
    private $pdo;

    /**
     * init the object with a \PDO object
     * @param type $pdo
     */
    public function __construct($pdo) {
        $this->pdo = $pdo;
    }

    /**
     * create tables
     */
    public function createTables() {
        $sqlList = ['CREATE TABLE IF NOT EXISTS stocks (
                        id serial PRIMARY KEY,
                        symbol character varying(10) NOT NULL UNIQUE,
                        company character varying(255) NOT NULL UNIQUE
                     );',
            'CREATE TABLE IF NOT EXISTS stock_valuations (
                        stock_id INTEGER NOT NULL,
                        value_on date NOT NULL,
                        price numeric(8,2) NOT NULL DEFAULT 0,
                        PRIMARY KEY (stock_id, value_on),
                        FOREIGN KEY (stock_id) REFERENCES stocks(id)
                    );'];

        // execute each sql statement to create new tables
        foreach ($sqlList as $sql) {
            $this->pdo->exec($sql);
        }

        return $this;
    }

    /**
     * return tables in the database
     */
    public function getTables() {
        $stmt = $this->pdo->query("SELECT table_name
                                   FROM information_schema.tables
                                   WHERE table_schema= 'public'
                                        AND table_type='BASE TABLE'
                                   ORDER BY table_name");
        $tableList = [];
        while ($row = $stmt->fetch(\PDO::FETCH_ASSOC)) {
            $tableList[] = $row['table_name'];
        }

        return $tableList;
    }
}

----------------------------------------

TITLE: CREATE TABLE AS with Column Names
DESCRIPTION: Demonstrates creating a table with specified column names

LANGUAGE: sql
CODE:
CREATE TABLE new_table_name ( column_name_list)
AS query;

----------------------------------------

TITLE: ROLLUP with Changed Column Order
DESCRIPTION: Shows how changing the order of columns in ROLLUP affects the grouping hierarchy and results.

LANGUAGE: sql
CODE:
SELECT
    segment,
    brand,
    SUM (quantity)
FROM
    sales
GROUP BY
    ROLLUP (segment, brand)
ORDER BY
    segment,
    brand;

----------------------------------------

TITLE: Main Application Class
DESCRIPTION: Main Java class demonstrating database connection usage with proper exception handling

LANGUAGE: java
CODE:
import java.sql.SQLException;

public class Main {
    public static void main(String[] args){
        try (var connection =  DB.connect()){
            System.out.println("Connected to the PostgreSQL database.");
        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
    }
}

----------------------------------------

TITLE: Using GROUPING SETS for Multiple Aggregations in PostgreSQL
DESCRIPTION: This SQL query demonstrates the use of GROUPING SETS to perform multiple aggregations in a single query, combining results for different grouping combinations of brand and segment.

LANGUAGE: sql
CODE:
SELECT
    brand,
    segment,
    SUM (quantity)
FROM
    sales
GROUP BY
    GROUPING SETS (
        (brand, segment),
        (brand),
        (segment),
        ()
    );

----------------------------------------

TITLE: Database Seed Configuration
DESCRIPTION: Ruby code for seeding the database with initial data for authors and books.

LANGUAGE: ruby
CODE:
authors_data = [
  {
    name: "J.R.R. Tolkien",
    bio: "The creator of Middle-earth and author of The Lord of the Rings."
  },
  {
    name: "George R.R. Martin",
    bio: "The author of the epic fantasy series A Song of Ice and Fire."
  },
  {
    name: "J.K. Rowling",
    bio: "The creator of the Harry Potter series."
  }
]

authors_data.each do |author_attrs|
  Author.find_or_create_by(name: author_attrs[:name]) do |author|
    author.bio = author_attrs[:bio]
  end
end

----------------------------------------

TITLE: Downloading Neon CLI binary for Linux (ARM64)
DESCRIPTION: Command to download the Neon CLI binary for Linux ARM64 architecture using curl.

LANGUAGE: bash
CODE:
curl -sL https://github.com/neondatabase/neonctl/releases/latest/download/neonctl-linux-arm64 -o neonctl

----------------------------------------

TITLE: Creating Exograph Project with Bash Commands
DESCRIPTION: These commands create a new Exograph project named 'todo' and navigate into the project directory.

LANGUAGE: bash
CODE:
exo new todo
cd todo

----------------------------------------

TITLE: Using lead() with Default Value in PostgreSQL
DESCRIPTION: Illustrates how to use lead() with a default value to handle cases where the offset goes beyond the end of the window frame.

LANGUAGE: sql
CODE:
WITH tasks AS (
  SELECT 1 AS project_id, 1 AS task_id, date '2023-01-01' AS start_date, date '2023-01-05' AS end_date
  UNION ALL
  SELECT 1 AS project_id, 2 AS task_id, date '2023-01-07' AS start_date, date '2023-01-10' AS end_date
  UNION ALL
  SELECT 1 AS project_id, 3 AS task_id, date '2023-01-10' AS start_date, date '2023-01-15' AS end_date
  UNION ALL
  SELECT 2 AS project_id, 1 AS task_id, date '2023-01-01' AS start_date, date '2023-01-10' AS end_date
  UNION ALL
  SELECT 2 AS project_id, 2 AS task_id, date '2023-01-11' AS start_date, date '2023-01-20' AS end_date
)
SELECT
  project_id,
  task_id,
  start_date,
  end_date,
  lead(start_date, 1, end_date) OVER (PARTITION BY project_id ORDER BY start_date) AS next_start_date
FROM tasks;

----------------------------------------

TITLE: Configuring Pooled Neon PostgreSQL Connection String
DESCRIPTION: This code example demonstrates how to set up a pooled Neon PostgreSQL connection string. It includes the '-pooler' suffix in the hostname to enable connection pooling.

LANGUAGE: ini
CODE:
DATABASE_URL="postgresql://alex:AbC123dEf@ep-cool-darkness-123456-pooler.us-east-2.aws.neon.tech/dbname?sslmode=require"

----------------------------------------

TITLE: Creating Products Table with JSONB Column
DESCRIPTION: SQL command to create a new table called products with a JSONB column for storing product attributes

LANGUAGE: sql
CODE:
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    attributes JSONB
);

----------------------------------------

TITLE: Listing Databases with Neon API
DESCRIPTION: This cURL command shows how to list all databases in a specific branch of a Neon project using the API. It sends a GET request and includes the necessary authentication headers.

LANGUAGE: bash
CODE:
curl 'https://console.neon.tech/api/v2/projects/hidden-cell-763301/branches/br-blue-tooth-671580/databases' \
  -H 'Accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY" | jq

----------------------------------------

TITLE: ChatGPT Model Parameters Example
DESCRIPTION: JSON structure showing the required format for ChatGPT API calls.

LANGUAGE: json
CODE:
{
  "model": "gpt-3.5-turbo",
  "messages": [
    { "role": "system", "content": "You are a helpful assistant." },
    { "role": "user", "content": "Who won the world series in 2020?" },
    { "role": "assistant", "content": "The Los Angeles Dodgers won the World Series in 2020." }
  ]
}

----------------------------------------

TITLE: Loading Schema with psql in SQL
DESCRIPTION: This command loads the previously dumped and modified schema into the destination database using psql.

LANGUAGE: sql
CODE:
psql \
	"postgresql://role:password@hostname:5432/dbname" \
	< schema_dump.sql

----------------------------------------

TITLE: Creating Sample Links Table
DESCRIPTION: Creates a new table named 'links' with columns for link_id, title, and url to demonstrate ALTER TABLE operations.

LANGUAGE: sql
CODE:
DROP TABLE IF EXISTS links;

CREATE TABLE links (
   link_id serial PRIMARY KEY,
   title VARCHAR (512) NOT NULL,
   url VARCHAR (1024) NOT NULL
);

----------------------------------------

TITLE: Basic sum() Function Signature in PostgreSQL
DESCRIPTION: Demonstrates the basic syntax of the sum() function in PostgreSQL, including the optional DISTINCT keyword for unique value aggregation.

LANGUAGE: sql
CODE:
sum([DISTINCT] expression) -> numeric type

----------------------------------------

TITLE: Creating and Populating Sales Table with date_trunc()
DESCRIPTION: This snippet demonstrates how to create a sales table, insert sample data, and use date_trunc() to group sales by month.

LANGUAGE: sql
CODE:
CREATE TABLE sales (
  sale_date TIMESTAMP WITH TIME ZONE,
  amount DECIMAL(10, 2)
);

INSERT INTO sales (sale_date, amount) VALUES
  ('2024-03-01 08:30:00+00', 100.50),
  ('2024-03-01 14:45:00+00', 200.75),
  ('2024-03-02 10:15:00+00', 150.25),
  ('2024-04-15 09:00:00+00', 300.00),
  ('2024-05-20 16:30:00+00', 250.50);

-- Group sales by month
SELECT
  date_trunc('month', sale_date) AS month,
  SUM(amount) AS total_sales
FROM sales
GROUP BY date_trunc('month', sale_date)
ORDER BY month;

----------------------------------------

TITLE: Importing Foreign Schema
DESCRIPTION: Automatically creates foreign tables by importing schema from a remote server.

LANGUAGE: sql
CODE:
CREATE SCHEMA IF NOT EXISTS imported_data;
IMPORT FOREIGN SCHEMA analytics
FROM SERVER production_db
INTO imported_data;

----------------------------------------

TITLE: Implementing Update Task Command in Laravel Zero
DESCRIPTION: PHP code for the UpdateTaskCommand class, defining the command signature and functionality to update an existing task.

LANGUAGE: php
CODE:
<?php

namespace App\Commands;

use App\Task;
use Carbon\Carbon;
use LaravelZero\Framework\Commands\Command;

class UpdateTaskCommand extends Command
{
    protected $signature = 'task:update {id} {--title=} {--description=} {--status=} {--priority=} {--due-date=}';
    protected $description = 'Update an existing task';

    public function handle()
    {
        $task = Task::find($this->argument('id'));

        if (!$task) {
            $this->error("Task not found!");
            return;
        }

        $updates = [];

        if ($this->option('title')) {
            $updates['title'] = $this->option('title');
        }

        if ($this->option('description')) {
            $updates['description'] = $this->option('description');
        }

        if ($this->option('status')) {
            $updates['status'] = $this->option('status');
        }

        if ($this->option('priority')) {
            $updates['priority'] = $this->option('priority');
        }

        if ($this->option('due-date')) {
            $updates['due_date'] = Carbon::parse($this->option('due-date'));
        }

        $task->update($updates);

        $this->info("Task updated successfully!");
    }
}

----------------------------------------

TITLE: Removing the GENERATED AS IDENTITY Constraint
DESCRIPTION: This example demonstrates how to remove the GENERATED AS IDENTITY constraint from an existing column.

LANGUAGE: sql
CODE:
ALTER TABLE shape
ALTER COLUMN shape_id
DROP IDENTITY IF EXISTS;

----------------------------------------

TITLE: Using CONCAT() with NULL Values in PostgreSQL
DESCRIPTION: Illustrates how the CONCAT() function handles NULL values when concatenating multiple columns from a table.

LANGUAGE: SQL
CODE:
SELECT
  CONCAT(name, ' ', '(', email, ')', ' ', phone) contact
FROM
  contacts;

----------------------------------------

TITLE: EXCEPT with ORDER BY Clause
DESCRIPTION: Shows how to sort the results of an EXCEPT operation using ORDER BY clause.

LANGUAGE: sql
CODE:
SELECT * FROM top_rated_films
EXCEPT
SELECT * FROM most_popular_films
ORDER BY title;

----------------------------------------

TITLE: Enabling pg_stat_statements Extension in Neon Postgres
DESCRIPTION: SQL command to enable the pg_stat_statements extension in a Neon Postgres database. This extension tracks planning and execution statistics for all SQL statements.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pg_stat_statements;

----------------------------------------

TITLE: Using PostgreSQL UPPER() Function in WHERE Clause
DESCRIPTION: This example demonstrates how to use the UPPER() function in a WHERE clause to perform case-insensitive comparison, finding customers with a specific last name regardless of its original case.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
WHERE
  UPPER(last_name) = 'BARNETT';

----------------------------------------

TITLE: Basic Column Alias Syntax in PostgreSQL
DESCRIPTION: Demonstrates the basic syntax for assigning an alias to a column using the AS keyword.

LANGUAGE: sql
CODE:
SELECT column_name AS alias_name
FROM table_name;

----------------------------------------

TITLE: Creating Equipment Table with Primary Key in PostgreSQL
DESCRIPTION: Creates a table for equipment with a serial primary key and required name and equipment ID fields.

LANGUAGE: sql
CODE:
CREATE TABLE equipment (
  id SERIAL PRIMARY KEY,
  name VARCHAR (50) NOT NULL,
  equip_id VARCHAR (16) NOT NULL
);

----------------------------------------

TITLE: Deleting a Neon Branch using API
DESCRIPTION: cURL command to delete a Neon branch using the Neon API. Requires the project ID, branch ID, and an API key.

LANGUAGE: bash
CODE:
curl --request DELETE \
     --url https://console.neon.tech/api/v2/projects/<project-id>/branches/<branch-id> \
     --header 'Accept: application/json' \
     --header "Authorization: Bearer $NEON_API_KEY" | jq

----------------------------------------

TITLE: Dropping a Column with Dependencies in PostgreSQL
DESCRIPTION: Example of dropping a column that is referenced by a view, demonstrating the use of CASCADE to remove dependent objects.

LANGUAGE: SQL
CODE:
ALTER TABLE books
DROP COLUMN publisher_id CASCADE;

----------------------------------------

TITLE: Connecting to Neon Postgres Database
DESCRIPTION: The standard format for a Neon Postgres connection string, including user, password, endpoint, port, database name, and SSL mode.

LANGUAGE: bash
CODE:
postgres://<user>:<password>@<endpoint_hostname>.neon.tech:<port>/<dbname>?sslmode=require

----------------------------------------

TITLE: Function Signature of Postgres now()
DESCRIPTION: The basic syntax for the now() function in Postgres, which returns a timestamp with timezone.

LANGUAGE: sql
CODE:
now() -> timestamp with timezone

----------------------------------------

TITLE: Creating a PL/pgSQL Function with Row Processing
DESCRIPTION: This function, also named get_film, accepts a pattern and year parameter. It demonstrates how to process query results row by row using a for loop, modify data (e.g., uppercase the title), and use the RETURN NEXT statement to build the result set.

LANGUAGE: sql
CODE:
create or replace function get_film (
	p_pattern varchar,
	p_year int
)
returns table (
	film_title varchar,
	film_release_year int
)
language plpgsql
as $$
declare
    var_r record;
begin
	for var_r in(
            select title, release_year
            from film
	     where title ilike p_pattern and
		    release_year = p_year
        ) loop  film_title := upper(var_r.title) ;
		film_release_year := var_r.release_year;
           return next;
	end loop;
end; $$

----------------------------------------

TITLE: CASE with Aggregate Function for Rating Counts
DESCRIPTION: Uses simple CASE with SUM to count the number of films in each rating category.

LANGUAGE: sql
CODE:
SELECT
  SUM(CASE rating WHEN 'G' THEN 1 ELSE 0 END) "General Audiences",
  SUM(
    CASE rating WHEN 'PG' THEN 1 ELSE 0 END
  ) "Parental Guidance Suggested",
  SUM(
    CASE rating WHEN 'PG-13' THEN 1 ELSE 0 END
  ) "Parents Strongly Cautioned",
  SUM(CASE rating WHEN 'R' THEN 1 ELSE 0 END) "Restricted",
  SUM(
    CASE rating WHEN 'NC-17' THEN 1 ELSE 0 END
  ) "Adults Only"
FROM
  film;

----------------------------------------

TITLE: Verifying UPDATE in PostgreSQL using psql
DESCRIPTION: Shows how to verify the UPDATE operation by querying the PostgreSQL database using the psql command-line tool.

LANGUAGE: SQL
CODE:
SELECT * FROM students
WHERE id = 1;

----------------------------------------

TITLE: Creating Invoice Table in PostgreSQL
DESCRIPTION: SQL command to create a new invoices table with foreign key relationships to students and courses tables.

LANGUAGE: sql
CODE:
CREATE TABLE invoices (
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    student_id INT NOT NULL,
    course_id INT NOT NULL,
    amount DEC(19,2) NOT NULL,
    tax DEC(5,2) NOT NULL,
    invoice_date DATE NOT NULL,
    FOREIGN KEY(student_id) REFERENCES students (id) ON DELETE CASCADE,
    FOREIGN KEY(course_id) REFERENCES courses (id) ON DELETE CASCADE
);

----------------------------------------

TITLE: Using jsonb_array_length() with Nested Arrays in PostgreSQL
DESCRIPTION: Shows how the jsonb_array_length() function handles nested arrays, counting only top-level elements.

LANGUAGE: sql
CODE:
SELECT jsonb_array_length('[1,2,3, [4,5], 6]');

----------------------------------------

TITLE: Creating Subscription in SQL
DESCRIPTION: SQL command to create a subscription on the destination database, linking it to the publication on the source database.

LANGUAGE: sql
CODE:
CREATE SUBSCRIPTION my_subscription
CONNECTION 'postgresql://neondb_owner:<password>@ep-cool-darkness-123456.us-east-2.aws.neon.tech/neondb'
PUBLICATION my_publication;

----------------------------------------

TITLE: Enabling TimescaleDB Extension in PostgreSQL
DESCRIPTION: Creates the TimescaleDB extension in the database if it doesn't already exist.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS timescaledb;

----------------------------------------

TITLE: Creating a Trigger for Salary Check
DESCRIPTION: This SQL statement creates a BEFORE UPDATE trigger on the employees table that executes the check_salary() function for each row.

LANGUAGE: sql
CODE:
CREATE TRIGGER before_update_salary
  BEFORE UPDATE
  ON employees
  FOR EACH ROW
  EXECUTE PROCEDURE check_salary();

----------------------------------------

TITLE: Attempting to Truncate the Companies Table
DESCRIPTION: Demonstrates an attempt to truncate the companies table, which will trigger the BEFORE TRUNCATE trigger and raise a notice.

LANGUAGE: SQL
CODE:
TRUNCATE TABLE companies;

----------------------------------------

TITLE: Defining json_to_record() Function Signature in SQL
DESCRIPTION: Shows the function signature for json_to_record(), which takes a JSON object and converts it to a record with specified column names and types.

LANGUAGE: sql
CODE:
json_to_record(json JSON) AS (column_name column_type [, ...])

----------------------------------------

TITLE: Setting Up Python Virtual Environment for Django Project
DESCRIPTION: Commands to create and activate a Python virtual environment, then install required packages for a Django project using Neon Postgres.

LANGUAGE: bash
CODE:
python -m venv myenv

# On macOS and Linux
source myenv/bin/activate
# On Windows
myenv\Scripts\activate

mkdir guide-neon-django && cd guide-neon-django

pip install Django "psycopg2-binary"
pip install python-dotenv dj-database-url
pip freeze > requirements.txt

----------------------------------------

TITLE: Creating Customer Orders Table with Update Trigger
DESCRIPTION: SQL to create a customer_orders table with a trigger that updates the last_updated column using now().

LANGUAGE: sql
CODE:
CREATE TABLE customer_orders (
  order_id SERIAL PRIMARY KEY,
  customer_id INTEGER NOT NULL,
  order_status VARCHAR(20) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  last_updated TIMESTAMP WITH TIME ZONE DEFAULT now()
);

CREATE OR REPLACE FUNCTION update_last_updated_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.last_updated = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_customer_order_timestamp
BEFORE UPDATE ON customer_orders
FOR EACH ROW
EXECUTE FUNCTION update_last_updated_column();

INSERT INTO customer_orders (customer_id, order_status)
VALUES (1001, 'Pending'), (1002, 'Processing');

----------------------------------------

TITLE: Creating a Publication in Aurora PostgreSQL
DESCRIPTION: SQL commands to create a publication for a specific table or multiple tables in the source Aurora PostgreSQL database.

LANGUAGE: sql
CODE:
CREATE PUBLICATION my_publication FOR TABLE playing_with_neon;

-- For multiple tables:
CREATE PUBLICATION my_publication FOR TABLE users, departments;

----------------------------------------

TITLE: Querying Triggers for Specific Table in PostgreSQL
DESCRIPTION: This SQL query lists all triggers associated with a specific table (in this case, 'employees') in the current database.

LANGUAGE: sql
CODE:
SELECT
  event_object_table AS table_name,
  trigger_name
FROM
  information_schema.triggers
WHERE
  event_object_table = 'employees'
GROUP BY
  table_name,
  trigger_name
ORDER BY
  table_name,
  trigger_name;

----------------------------------------

TITLE: Using CBRT() Function with Negative Number
DESCRIPTION: This example shows how to use the CBRT() function with a negative number (-27).

LANGUAGE: sql
CODE:
SELECT CBRT(-27) result;

----------------------------------------

TITLE: Creating a Table for Hierarchical Data in Postgres
DESCRIPTION: This SQL command creates a table named 'categories' to store hierarchical data using the ltree type for the 'path' column.

LANGUAGE: sql
CODE:
CREATE TABLE categories (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  path LTREE
);

----------------------------------------

TITLE: Configuring Tasks in YAML
DESCRIPTION: YAML configuration for the three tasks, defining their descriptions, expected outputs, and assigned agents.

LANGUAGE: yaml
CODE:
scrape_site:
  description: >
    Fetch the content of https://neon.tech/guides in markdown format. Ensure accurate and complete retrieval of website content.
  expected_output: >
    The complete content of the website https://neon.tech/guides, formatted in markdown.
  agent: >
    web_scraper
extract:
  description: >
    Analyze the provided website content and extract a structured list of blog post titles, author names, and publication dates. Limit the extraction to the first 20 blog posts.
  expected_output: >
    A list of blog post titles, author names, and publication dates extracted from the website content.
  agent: >
    data_extractor
store:
  description: >
    Store the extracted blog post data into a Postgres database within Neon. Create a table named 'posts' and corresponding schema for the posts and insert them. After inserting the data, formulate and test an SQL query to retrieve all inserted data. Provide the tested SQL query as the output.
  expected_output: >
    A valid and tested SQL query that retrieves all data inserted into the 'posts' table in the Neon database.
  agent: >
    content_storer

----------------------------------------

TITLE: Removing Leading Spaces with LTRIM
DESCRIPTION: Example demonstrating how to remove leading spaces from a string using LTRIM() function without specifying the second parameter.

LANGUAGE: sql
CODE:
SELECT LTRIM('   PostgreSQL');

----------------------------------------

TITLE: Extracting Employee Names Using jsonb_extract_path_text() in PostgreSQL
DESCRIPTION: Shows how to use jsonb_extract_path_text() to extract only the names of employees from the nested JSONB data in the 'documents' table.

LANGUAGE: sql
CODE:
SELECT
  jsonb_extract_path_text(data, 'employee', 'name') name
FROM
  documents;

----------------------------------------

TITLE: Basic PL/pgSQL While Loop Syntax
DESCRIPTION: Demonstrates the fundamental syntax structure of a while loop in PL/pgSQL. The loop executes statements as long as the specified condition remains true.

LANGUAGE: sql
CODE:
[ <<label>> ]
while condition loop
   statements;
end loop;

----------------------------------------

TITLE: Querying Unique Employee Skills
DESCRIPTION: Shows how to extract unique skills from the employees table using DISTINCT.

LANGUAGE: sql
CODE:
SELECT DISTINCT jsonb_array_elements_text(skills) skills
FROM employees;

----------------------------------------

TITLE: Custom Column Naming with jsonb_each() in PostgreSQL
DESCRIPTION: Shows how to use the AS clause to assign custom names to the columns output by jsonb_each().

LANGUAGE: sql
CODE:
SELECT attr_name, attr_value
FROM jsonb_each('{"username": "johndoe", "age": 30, "email": "johndoe@example.com"}')
AS user_data(attr_name, attr_value);

----------------------------------------

TITLE: Cleaning Up Old Soft-Deleted Records in Laravel
DESCRIPTION: This code demonstrates how to permanently remove soft-deleted records that are older than two years.

LANGUAGE: php
CODE:
Post::onlyTrashed()
    ->where('deleted_at', '<', now()->subYears(2))
    ->forceDelete();

----------------------------------------

TITLE: Verifying Data Replication with Row Count in SQL
DESCRIPTION: This SQL query counts the number of rows in a specific table to verify data replication.

LANGUAGE: sql
CODE:
SELECT COUNT(*) FROM person.address;

----------------------------------------

TITLE: Creating Products Table with Nested JSON
DESCRIPTION: Example showing creation of a products table with complex nested JSON structure including specs and tags

LANGUAGE: sql
CODE:
CREATE TABLE products (
 id INT,
 attributes JSON
);

INSERT INTO products (id, attributes) VALUES
 (1, '{"name": "Laptop", "specs": {"brand": "Dell", "RAM": "16GB", "storage": {"type": "SSD", "capacity": "512GB"}}, "tags": ["pc"]}'),
 (2, '{"name": "Smartphone", "specs": {"brand": "Google", "RAM": "8GB", "storage": {"type": "UFS", "capacity": "256GB"}}, "tags": ["android", "pixel"]}'),
 (3, '{"name": "Smartphone", "specs": {"brand": "Apple", "RAM": "8GB", "storage": {"type": "UFS", "capacity": "128GB"}}, "tags": ["ios", "iphone"]}');

----------------------------------------

TITLE: Handling Non-existent Position
DESCRIPTION: Demonstrates how SPLIT_PART() handles cases where the requested position exceeds the number of parts.

LANGUAGE: sql
CODE:
SELECT SPLIT_PART('A,B,C', ',', 4) result;

----------------------------------------

TITLE: Starting Convex Services with Docker Compose
DESCRIPTION: Bash command to start the Convex backend and dashboard services using Docker Compose in detached mode.

LANGUAGE: bash
CODE:
docker compose up -d

----------------------------------------

TITLE: Creating Initial Database Tables
DESCRIPTION: SQL commands to create the initial authors and posts tables in the blog database

LANGUAGE: sql
CODE:
-- Creating the `authors` table
CREATE TABLE authors (
    author_id SERIAL PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(255) UNIQUE NOT NULL,
    bio TEXT
);

-- Creating the `posts` table
CREATE TABLE posts (
    post_id SERIAL PRIMARY KEY,
    author_id INTEGER REFERENCES authors(author_id),
    title VARCHAR(255) NOT NULL,
    content TEXT,
    published_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

----------------------------------------

TITLE: Prorating Extra Storage and Project Charges in Neon
DESCRIPTION: Formula for calculating prorated costs of extra storage and project allocations during a monthly billing period. This is used when additional resources are allocated partway through a billing cycle.

LANGUAGE: plaintext
CODE:
Cost = Units x (Unit Price/Days in Month) x Days Left in Month

----------------------------------------

TITLE: Using tiktoken_count Function
DESCRIPTION: Example of counting tokens in a text string using a specified model.

LANGUAGE: sql
CODE:
SELECT tiktoken_count('text-davinci-003', 'The universe is a vast and captivating mystery, waiting to be explored and understood.');

----------------------------------------

TITLE: Enabling Row-Level Security on a Table in PostgreSQL
DESCRIPTION: Use the ALTER TABLE statement to enable row-level security on a specific table. This is the first step in implementing RLS.

LANGUAGE: sql
CODE:
ALTER TABLE table_name
ENABLE ROW LEVEL SECURITY;

----------------------------------------

TITLE: Calculating Compute Hours in Neon
DESCRIPTION: Formula for calculating compute hours based on compute size and active hours. This is used to determine usage against the compute allowance in Neon's pricing plans.

LANGUAGE: plaintext
CODE:
compute hours = compute size * active hours

----------------------------------------

TITLE: Sorting Customers by First Name in Ascending Order
DESCRIPTION: This query selects first and last names from the customer table and sorts the results by first name in ascending order.

LANGUAGE: SQL
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
ORDER BY
  first_name ASC;

----------------------------------------

TITLE: Creating a New Reflex Project
DESCRIPTION: Commands to create a new directory for the Reflex project and initialize it.

LANGUAGE: bash
CODE:
mkdir new_project
cd new_project

LANGUAGE: bash
CODE:
reflex init

----------------------------------------

TITLE: Calling a PostgreSQL Stored Procedure
DESCRIPTION: Shows how to invoke the 'transfer' stored procedure using the CALL statement. This example transfers $1,000 from account 1 to account 2.

LANGUAGE: sql
CODE:
call transfer(1,2,1000);

----------------------------------------

TITLE: Calling a PostgreSQL Stored Procedure
DESCRIPTION: Shows how to invoke the 'transfer' stored procedure using the CALL statement. This example transfers $1,000 from account 1 to account 2.

LANGUAGE: sql
CODE:
call transfer(1,2,1000);

----------------------------------------

TITLE: Defining Event Trigger Function in PostgreSQL
DESCRIPTION: Creates a PL/pgSQL function named 'audit_command()' that inserts audit records into the 'audits' table when a DDL event occurs.

LANGUAGE: plpgsql
CODE:
CREATE OR REPLACE FUNCTION audit_command()
RETURNS EVENT_TRIGGER
AS $$
BEGIN
    INSERT INTO audits (username, event , command)
    VALUES (session_user, TG_EVENT, TG_TAG );
END;
$$ LANGUAGE plpgsql;

----------------------------------------

TITLE: Aggregating Data by H3 Cells
DESCRIPTION: SQL query to aggregate pickup data into H3 cells at resolution 8, identifying hotspots and providing pickup counts and time ranges for each cell.

LANGUAGE: SQL
CODE:
SELECT
    h3_lat_lng_to_cell(pickup_location, 8) AS h3_index,
    COUNT(*) AS pickup_count,
    MIN(pickup_time) AS earliest_pickup,
    MAX(pickup_time) AS latest_pickup
FROM ride_pickups
GROUP BY 1
ORDER BY pickup_count DESC;

----------------------------------------

TITLE: Concatenating Arrays in PostgreSQL
DESCRIPTION: This SQL query shows how to use the || operator to concatenate two arrays.

LANGUAGE: sql
CODE:
SELECT ARRAY[1,2,3] || ARRAY[4,5] as concatenated_array;

----------------------------------------

TITLE: Expanding Numeric Array Elements
DESCRIPTION: Shows how to expand a JSON array containing numeric elements into text values.

LANGUAGE: sql
CODE:
SELECT jsonb_array_elements_text('[1,2,3]');

----------------------------------------

TITLE: Insert Multiple Rows into PostgreSQL Table using PHP PDO
DESCRIPTION: Method to insert multiple stock records into the stocks table using a prepared statement in a loop. Takes an array of stocks and returns an array of inserted IDs.

LANGUAGE: php
CODE:
   /**
     * Insert multiple stocks into the stocks table
     * @param array $stocks
     * @return a list of inserted ID
     */
    public function insertStockList($stocks) {
        $sql = 'INSERT INTO stocks(symbol,company) VALUES(:symbol,:company)';
        $stmt = $this->pdo->prepare($sql);

        $idList = [];
        foreach ($stocks as $stock) {
            $stmt->bindValue(':symbol', $stock['symbol']);
            $stmt->bindValue(':company', $stock['company']);
            $stmt->execute();
            $idList[] = $this->pdo->lastInsertId('stocks_id_seq');
        }
        return $idList;
    }

----------------------------------------

TITLE: Extracting JSON Array Elements
DESCRIPTION: Demonstrates how to extract elements from JSON arrays using -> and ->> operators.

LANGUAGE: sql
CODE:
SELECT
  name,
  phones -> 0 phone
FROM
  employees
WHERE
  name = 'John Doe';

----------------------------------------

TITLE: Creating a Table with SERIAL Primary Key in PostgreSQL
DESCRIPTION: This example shows how to create a table with a SERIAL column as the primary key. It also includes a non-null VARCHAR column for storing names.

LANGUAGE: sql
CODE:
CREATE TABLE fruits(
   id SERIAL PRIMARY KEY,
   name VARCHAR NOT NULL
);

----------------------------------------

TITLE: Generating Tasks with AgentStack CLI
DESCRIPTION: Commands to generate three tasks (scrape_site, extract, and store) using the AgentStack CLI.

LANGUAGE: bash
CODE:
agentstack generate task scrape_site
agentstack generate task extract
agentstack generate task store

----------------------------------------

TITLE: Finding Most Recent Stock Prices with TimescaleDB's last() Function
DESCRIPTION: This SQL query uses TimescaleDB's last() function to find the most recent stock price for each ticker in the dataset.

LANGUAGE: sql
CODE:
SELECT ticker, last(price, ts) AS last_price
FROM stock_prices
GROUP BY ticker;

----------------------------------------

TITLE: Basic PostgreSQL jsonb_to_record() Function Syntax
DESCRIPTION: Demonstrates the basic syntax of the jsonb_to_record() function for converting a JSON object into a PostgreSQL record type.

LANGUAGE: sql
CODE:
jsonb_to_record(json_object)
  as record_type (column1 type, column2 type,...)

----------------------------------------

TITLE: Creating Logical Replication Slot
DESCRIPTION: SQL command to create a logical replication slot using the pgoutput plugin.

LANGUAGE: sql
CODE:
SELECT pg_create_logical_replication_slot('fivetran_pgoutput_slot', 'pgoutput');

----------------------------------------

TITLE: Using jsonb_populate_record with Custom Types in PostgreSQL
DESCRIPTION: Demonstrates how to use jsonb_populate_record with a custom-defined PostgreSQL type, in this case an 'address' type.

LANGUAGE: sql
CODE:
CREATE TYPE address AS (
    street TEXT,
    city TEXT,
    zip TEXT
);

SELECT *
FROM jsonb_populate_record(
    NULL::address,
    '{"street": "123 Main St", "city": "San Francisco", "zip": "94105"}'
);

----------------------------------------

TITLE: PostgreSQL Recursive Query to Find Employee Subordinates
DESCRIPTION: Demonstrates a recursive query that finds all subordinates of the manager with ID 2. It uses a recursive CTE named 'subordinates' to traverse the employee hierarchy.

LANGUAGE: SQL
CODE:
WITH RECURSIVE subordinates AS (
  SELECT
    employee_id,
    manager_id,
    full_name
  FROM
    employees
  WHERE
    employee_id = 2
  UNION
  SELECT
    e.employee_id,
    e.manager_id,
    e.full_name
  FROM
    employees e
    INNER JOIN subordinates s ON s.employee_id = e.manager_id
)
SELECT * FROM subordinates;

----------------------------------------

TITLE: PostgreSQL Recursive Query to Find Employee Subordinates
DESCRIPTION: Demonstrates a recursive query that finds all subordinates of the manager with ID 2. It uses a recursive CTE named 'subordinates' to traverse the employee hierarchy.

LANGUAGE: SQL
CODE:
WITH RECURSIVE subordinates AS (
  SELECT
    employee_id,
    manager_id,
    full_name
  FROM
    employees
  WHERE
    employee_id = 2
  UNION
  SELECT
    e.employee_id,
    e.manager_id,
    e.full_name
  FROM
    employees e
    INNER JOIN subordinates s ON s.employee_id = e.manager_id
)
SELECT * FROM subordinates;

----------------------------------------

TITLE: Querying JSON Data with JSONB Operators
DESCRIPTION: Illustrates how to query JSON data using JSONB operators to extract specific fields and filter results.

LANGUAGE: sql
CODE:
SELECT
   data ->> 'first_name' first_name,
   data ->> 'last_name' last_name,
   data ->> 'phone' phone
FROM
   customer_json
WHERE
   data @> '{"first_name": "John"}';

----------------------------------------

TITLE: Inserting Todo Without Neon Auth in SQL
DESCRIPTION: This SQL statement inserts a new todo into the todos table, referencing a user ID from the users table without Neon Auth.

LANGUAGE: sql
CODE:
INSERT INTO todos (task, user_id)
VALUES ('Buy groceries', 'user-id-123');

----------------------------------------

TITLE: Verifying Data Migration in Neon
DESCRIPTION: SQL queries to verify the successful migration of data to Neon. These example queries are based on the LEGO database and check for data integrity.

LANGUAGE: sql
CODE:
SELECT is_trans AS is_transparent, COUNT(*) FROM lego_colors GROUP BY is_trans;
SELECT * FROM lego_sets ORDER BY num_parts DESC LIMIT 5;

----------------------------------------

TITLE: Basic COUNT() Function Signatures in PostgreSQL
DESCRIPTION: Demonstrates the two main forms of the COUNT() function - counting all rows and counting non-null values in a specific expression.

LANGUAGE: sql
CODE:
COUNT(*) -> bigint
COUNT([DISTINCT] expression) -> bigint

----------------------------------------

TITLE: Updating a Neon Project
DESCRIPTION: Updates an existing Neon project, allowing changes to project name, VPC connection settings, and compute unit allocation.

LANGUAGE: bash
CODE:
neon projects update <id> [options]

----------------------------------------

TITLE: Dumping DVD Rental Database Example
DESCRIPTION: This shell command demonstrates dumping the 'dvdrental' sample database to a SQL file named 'dvdrental.sql' using pg_dump.

LANGUAGE: shell
CODE:
pg_dump -U postgres -O dvdrental -f dvdrental.sql

----------------------------------------

TITLE: Selecting All Tasks from Postgres Table
DESCRIPTION: This SQL query selects all rows from the 'tasks' table, allowing verification of the inserted tasks.

LANGUAGE: sql
CODE:
SELECT * FROM tasks;

----------------------------------------

TITLE: Listing Operations via Neon CLI
DESCRIPTION: Command to list operations for a specific project using the Neon CLI. Requires specifying the project ID.

LANGUAGE: bash
CODE:
neon operations list --project-id <project_id>

----------------------------------------

TITLE: Creating a Sample Table for jsonb_extract_path_text() Examples in PostgreSQL
DESCRIPTION: Creates a 'documents' table with an 'id' column as the primary key and a 'data' column of JSONB type to store JSON data for demonstration purposes.

LANGUAGE: sql
CODE:
CREATE TABLE documents(
   id SERIAL PRIMARY KEY,
   data JSONB
);

----------------------------------------

TITLE: Calling Custom PostgreSQL Function with JDBC
DESCRIPTION: Java implementation to call the custom find_products stored function using JDBC PreparedStatement. The method processes the result set and returns a list of Product objects.

LANGUAGE: java
CODE:
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class ProductDB {
    public static List<Product> findByName(String pattern) {
        String SQL = "SELECT * FROM find_products (?)";

        var products = new ArrayList<Product>();

        try (var conn = DB.connect();
             var pstmt = conn.prepareStatement(SQL)) {

            pstmt.setString(1, pattern);
            var rs = pstmt.executeQuery();

            while (rs.next()) {
                var product = new Product(
                        rs.getInt("p_id"),
                        rs.getString("p_name"),
                        rs.getDouble("p_price")
                );
                products.add(product);
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return products;
    }
}

----------------------------------------

TITLE: Single Character Replacement with TRANSLATE()
DESCRIPTION: This example shows how to use the TRANSLATE() function to replace all occurrences of a comma with a semicolon in a comma-separated list of values.

LANGUAGE: sql
CODE:
SELECT TRANSLATE('apple,orange,banana', ',', ';');

----------------------------------------

TITLE: Accessing the Neon API Client in JavaScript
DESCRIPTION: This snippet shows how to access the underlying Neon API client from the NeonToolkit instance. It demonstrates creating a project and obtaining the API client for further interactions with the Neon API.

LANGUAGE: javascript
CODE:
import { NeonToolkit } from "@neondatabase/toolkit";

const toolkit = new NeonToolkit(process.env.NEON_API_KEY!);

const project = await toolkit.createProject();

const apiClient = toolkit.apiClient;

// Now, you have the underlying API client which lets you interact with Neon's API.

----------------------------------------

TITLE: Updating Postgres Extension Version in Neon
DESCRIPTION: SQL command demonstrating how to update a Postgres extension to a new version using the ALTER EXTENSION statement. The example shows updating postgis_topology to version 3.3.2.

LANGUAGE: sql
CODE:
ALTER EXTENSION postgis_topology UPDATE TO '3.3.2';

----------------------------------------

TITLE: Creating and Populating Sample Courses Table
DESCRIPTION: Sets up a sample 'courses' table and inserts initial data for demonstrating UPDATE operations.

LANGUAGE: sql
CODE:
CREATE TABLE courses(
  course_id serial PRIMARY KEY,
  course_name VARCHAR(255) NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  description VARCHAR(500),
  published_date date
);


INSERT INTO courses( course_name, price, description, published_date)
VALUES
('PostgreSQL for Developers', 299.99, 'A complete PostgreSQL for Developers', '2020-07-13'),
('PostgreSQL Admininstration', 349.99, 'A PostgreSQL Guide for DBA', NULL),
('PostgreSQL High Performance', 549.99, NULL, NULL),
('PostgreSQL Bootcamp', 777.99, 'Learn PostgreSQL via Bootcamp', '2013-07-11'),
('Mastering PostgreSQL', 999.98, 'Mastering PostgreSQL in 21 Days', '2012-06-30');

SELECT * FROM courses;

----------------------------------------

TITLE: Handling NaN in NUMERIC Columns
DESCRIPTION: Shows how to work with special NaN (Not a Number) values in NUMERIC columns.

LANGUAGE: sql
CODE:
UPDATE products
SET price = 'NaN'
WHERE id = 1;

----------------------------------------

TITLE: Updating Multiple Rows with an Expression
DESCRIPTION: Increases the price of all courses by 5% using an expression in the SET clause.

LANGUAGE: sql
CODE:
UPDATE courses
SET price = price * 1.05;

----------------------------------------

TITLE: Index Prewarming and Management
DESCRIPTION: Shows how to prewarm indexes and query index information.

LANGUAGE: sql
CODE:
SELECT pg_prewarm('schema_name.index_name');

LANGUAGE: sql
CODE:
SELECT indexname FROM pg_indexes WHERE tablename = 'your_table_name';

LANGUAGE: sql
CODE:
SELECT oid FROM pg_class WHERE relname = 'index_name';

LANGUAGE: sql
CODE:
SELECT pg_prewarm(your_index_oid);

----------------------------------------

TITLE: Installing Neon Serverless Driver
DESCRIPTION: This command installs the Neon Serverless Driver, which manages the connection between the application and the Neon Postgres database.

LANGUAGE: bash
CODE:
npm install @neondatabase/serverless

----------------------------------------

TITLE: Configuring Database Connection in .env File
DESCRIPTION: Example of setting the DATABASE_URL environment variable in a .env file. This variable stores the Neon Postgres connection string.

LANGUAGE: bash
CODE:
# .env
DATABASE_URL=NEON_POSTGRES_CONNECTION_STRING

----------------------------------------

TITLE: Basic TO_NUMBER Function Syntax
DESCRIPTION: Demonstrates the basic syntax of the PostgreSQL TO_NUMBER() function with its required arguments.

LANGUAGE: sql
CODE:
TO_NUMBER(string, format)

----------------------------------------

TITLE: Loading Sample Weather Data
DESCRIPTION: Shell commands to download and load sample weather data into the database using psql.

LANGUAGE: shell
CODE:
curl https://assets.timescale.com/docs/downloads/weather_small.tar.gz -o weather_small.tar.gz

tar -xvzf weather_small.tar.gz

LANGUAGE: shell
CODE:
psql 'postgresql://<username>:<password>@<host>/<database_name>?sslmode=require' -c "\COPY weather_conditions FROM weather_small_conditions.csv CSV"

----------------------------------------

TITLE: Enforcing Row-Level Security for Table Owners in PostgreSQL
DESCRIPTION: Modify a table to enforce row-level security even for table owners using the FORCE ROW LEVEL SECURITY option.

LANGUAGE: sql
CODE:
ALTER TABLE table_name
FORCE ROW LEVEL SECURITY;

----------------------------------------

TITLE: Creating Sample Tables for ANY Operator Examples
DESCRIPTION: Sets up example employees and managers tables with sample data to demonstrate ANY operator usage.

LANGUAGE: sql
CODE:
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    salary DECIMAL(10, 2) NOT NULL
);

CREATE TABLE managers(
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    salary DECIMAL(10, 2) NOT NULL
);

INSERT INTO employees (first_name, last_name, salary)
VALUES
('Bob', 'Williams', 45000.00),
('Charlie', 'Davis', 55000.00),
('David', 'Jones', 50000.00),
('Emma', 'Brown', 48000.00),
('Frank', 'Miller', 52000.00),
('Grace', 'Wilson', 49000.00),
('Harry', 'Taylor', 53000.00),
('Ivy', 'Moore', 47000.00),
('Jack', 'Anderson', 56000.00),
('Kate', 'Hill',  44000.00),
('Liam', 'Clark', 59000.00),
('Mia', 'Parker', 42000.00);

INSERT INTO managers(first_name, last_name, salary)
VALUES
('John', 'Doe',  60000.00),
('Jane', 'Smith', 55000.00),
('Alice', 'Johnson',  58000.00);

----------------------------------------

TITLE: Database Schema Definition with Drizzle ORM
DESCRIPTION: TypeScript code defining the database schema for a todo table using Drizzle ORM

LANGUAGE: typescript
CODE:
import { integer, text, boolean, pgTable } from 'drizzle-orm/pg-core';

export const todo = pgTable('todo', {
  id: integer('id').primaryKey(),
  text: text('text').notNull(),
  done: boolean('done').default(false).notNull(),
});

----------------------------------------

TITLE: Creating Indexes for ltree Data in PostgreSQL
DESCRIPTION: SQL commands to create appropriate indexes for efficient querying of ltree data. This includes creating a GiST index for ancestor/descendant queries and a B-tree index for equality queries.

LANGUAGE: sql
CODE:
-- Create a GiST index for ancestor/descendant queries
CREATE INDEX idx_path_gist ON product_categories USING GIST (path);

-- Create a B-tree index for equality queries
CREATE INDEX idx_path_btree ON product_categories USING BTREE (path);

----------------------------------------

TITLE: Using SESSION_USER Function in PostgreSQL
DESCRIPTION: This SQL query demonstrates the use of the SESSION_USER function to retrieve the original user who connected to the session.

LANGUAGE: sql
CODE:
SELECT SESSION_USER;

----------------------------------------

TITLE: Post Policy Implementation
DESCRIPTION: Policy class defining authorization rules for post-related actions.

LANGUAGE: php
CODE:
<?php

namespace App\Policies;

use App\Models\Post;
use App\Models\User;
use Illuminate\Auth\Access\HandlesAuthorization;

class PostPolicy
{
    use HandlesAuthorization;

    public function viewAny(User $user)
    {
        return true;
    }

    public function view(User $user, Post $post)
    {
        return true;
    }

    public function create(User $user)
    {
        return true;
    }

    public function update(User $user, Post $post)
    {
        return $user->id === $post->user_id;
    }

    public function delete(User $user, Post $post)
    {
        return $user->id === $post->user_id;
    }

    public function publish(User $user, Post $post)
    {
        return $user->id === $post->user_id || $user->is_admin;
    }
}

----------------------------------------

TITLE: Converting Timestamp to Formatted Time String
DESCRIPTION: Example showing how to format a payment date to display only hours, minutes, and seconds.

LANGUAGE: sql
CODE:
SELECT
    payment_date,
    TO_CHAR(
        payment_date,
        'HH12:MI:SS'
    ) payment_time
FROM
    payment
ORDER BY
    payment_date;

----------------------------------------

TITLE: Creating an Aggregate GCD Function
DESCRIPTION: Defines an aggregate GCD function based on the built-in GCD() function for simpler calculations on multiple values.

LANGUAGE: sql
CODE:
CREATE AGGREGATE gcd_agg(bigint) (
    SFUNC = gcd,
    STYPE = bigint
);

----------------------------------------

TITLE: Adding Generated Column with Unaccent
DESCRIPTION: Adds a generated column that stores unaccented versions of text data with corresponding index.

LANGUAGE: sql
CODE:
ALTER TABLE products ADD COLUMN name_unaccented text
GENERATED ALWAYS AS (f_unaccent(name)) STORED;

CREATE INDEX idx_products_name_unaccent_generated ON products (name_unaccented);

----------------------------------------

TITLE: Scheduling High-Frequency Job
DESCRIPTION: Example of scheduling a job to run every 10 seconds.

LANGUAGE: sql
CODE:
SELECT cron.schedule('every-10-seconds', '10 seconds', 'SELECT 1');

----------------------------------------

TITLE: Verifying Logical Replication in PostgreSQL
DESCRIPTION: This SQL query checks the WAL level to confirm if logical replication is enabled in PostgreSQL. A result of 'logical' indicates that logical replication is active.

LANGUAGE: sql
CODE:
SHOW wal_level;

----------------------------------------

TITLE: Querying pg_stat_statements View in Neon Postgres
DESCRIPTION: SQL query to retrieve the first 10 rows from the pg_stat_statements view, which contains statistical information about executed SQL statements.

LANGUAGE: sql
CODE:
SELECT * FROM pg_stat_statements LIMIT 10;

----------------------------------------

TITLE: Installing pg_session_jwt Extension in Postgres
DESCRIPTION: This SQL command installs the pg_session_jwt extension in the neondb database. This extension is crucial for handling authenticated sessions through JSON Web Tokens in Neon RLS.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pg_session_jwt;

----------------------------------------

TITLE: Testing Updated Schema
DESCRIPTION: Command to test the updated /authors endpoint after applying the schema change.

LANGUAGE: bash
CODE:
curl http://localhost:5000/authors

----------------------------------------

TITLE: Creating Development Branch with Neon CLI
DESCRIPTION: Command to create a new development branch using the recommended naming convention dev/developer_name

LANGUAGE: bash
CODE:
neon branches create --name dev/alex

----------------------------------------

TITLE: Defining PostgreSQL jsonb_insert() Function Syntax
DESCRIPTION: Syntax definition for the jsonb_insert() function, explaining its parameters and return value.

LANGUAGE: SQL
CODE:
jsonb_insert(
   target jsonb,
   path text[],
   new_value jsonb,
   [insert_after boolean]
) → jsonb

----------------------------------------

TITLE: Installing pg_tiktoken Extension in PostgreSQL
DESCRIPTION: SQL command to create the pg_tiktoken extension in a PostgreSQL database.

LANGUAGE: sql
CODE:
CREATE EXTENSION pg_tiktoken

----------------------------------------

TITLE: PL/pgSQL IF-THEN-ELSE Statement Structure
DESCRIPTION: Shows the syntax of the IF-THEN-ELSE statement in PL/pgSQL, which executes different statements based on a condition.

LANGUAGE: sql
CODE:
if condition then
  statements;
else
  alternative-statements;
end if;

----------------------------------------

TITLE: Granting Schema Access Permissions in SQL
DESCRIPTION: Grants necessary schema and table access permissions to the replication role.

LANGUAGE: sql
CODE:
GRANT USAGE ON SCHEMA public TO replication_user;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO replication_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO replication_user;

----------------------------------------

TITLE: Running Built Laravel Zero Application
DESCRIPTION: Command to run the built Laravel Zero application executable.

LANGUAGE: bash
CODE:
./builds/todo

----------------------------------------

TITLE: Creating a New Laravel Project
DESCRIPTION: Command to create a new Laravel project using Composer and navigate to the project directory.

LANGUAGE: bash
CODE:
composer create-project laravel/laravel laravel-routes-middleware-validation
cd laravel-routes-middleware-validation

----------------------------------------

TITLE: Creating Replication Role with Neon CLI
DESCRIPTION: Command to create a dedicated Postgres role for replication using the Neon CLI.

LANGUAGE: bash
CODE:
neon roles create --name replication_user

----------------------------------------

TITLE: Basic Variable Declaration and Initialization Example
DESCRIPTION: Shows how to declare and initialize multiple variables of different types and display their values using raise notice.

LANGUAGE: plpgsql
CODE:
do $$
declare
   counter    integer = 1;
   first_name varchar(50) = 'John';
   last_name  varchar(50) = 'Doe';
   payment    numeric(11,2) = 20.5;
begin
   raise notice '% % % has been paid % USD',
       counter,
	   first_name,
	   last_name,
	   payment;
end $$;

----------------------------------------

TITLE: Checking NULL Values in PostgreSQL
DESCRIPTION: Demonstrates how to check if a value is NULL using the IS NULL operator.

LANGUAGE: sql
CODE:
email_address IS NULL

----------------------------------------

TITLE: Inserting Data into Table with Interval Column
DESCRIPTION: Demonstrates how to insert data into a table with an interval column in PostgreSQL.

LANGUAGE: SQL
CODE:
INSERT INTO event (event_name, duration)
VALUES
    ('pgConf', '1 hour 30 minutes'),
    ('pgDAY', '2 days 5 hours')
RETURNING *;

----------------------------------------

TITLE: Restoring to Latest Data from Another Branch Using Neon API
DESCRIPTION: This cURL command restores the 'dev/alex' branch to the latest data (head) of its parent branch 'br-jolly-star-07007859'.

LANGUAGE: bash
CODE:
curl --request POST \
     --url https://console.neon.tech/api/v2/projects/floral-disk-86322740/branches/br-twilight-river-31791249/restore \
     --header 'Accept: application/json' \
     --header "Authorization: Bearer $NEON_API_KEY" \
     --header 'Content-Type: application/json' \
     --data '
{
  "source_branch_id": "br-jolly-star-07007859"}
' | jq

----------------------------------------

TITLE: Configuring Postgres.js Connection with SSL for Neon
DESCRIPTION: Example showing the required SSL configuration for connecting to Neon using the Postgres.js client. The ssl: 'require' option must be specified to enable SNI-based connection routing.

LANGUAGE: javascript
CODE:
{
  "ssl": "require"
}

----------------------------------------

TITLE: Inserting Sample Sales Data
DESCRIPTION: SQL insert statement to populate the sales_stats table with sample data for demonstration purposes.

LANGUAGE: sql
CODE:
INSERT INTO
    sales_stats(name, year, amount)
VALUES
    ('John Doe',2018,120000),
    ('Jane Doe',2018,110000),
    ('Jack Daniel',2018,150000),
    ('Yin Yang',2018,30000),
    ('Stephane Heady',2018,200000),
    ('John Doe',2019,150000),
    ('Jane Doe',2019,130000),
    ('Jack Daniel',2019,180000),
    ('Yin Yang',2019,25000),
    ('Stephane Heady',2019,270000);

----------------------------------------

TITLE: Converting String Values to JSON using json_scalar() in SQL
DESCRIPTION: Shows how to convert text strings to JSON format using the json_scalar() function.

LANGUAGE: sql
CODE:
-- Convert text
SELECT json_scalar('Hello, World!');

----------------------------------------

TITLE: Running Neon CLI on Windows
DESCRIPTION: Command structure for running Neon CLI commands on Windows.

LANGUAGE: bash
CODE:
neonctl-win.exe <command> [options]

----------------------------------------

TITLE: Installing Entity Framework Core and Npgsql Packages
DESCRIPTION: Commands to install the required NuGet packages for Entity Framework Core and Npgsql PostgreSQL provider.

LANGUAGE: bash
CODE:
dotnet add package Microsoft.EntityFrameworkCore.Design --version 6.0.4
dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL --version 6.0.4

----------------------------------------

TITLE: Basic PostgreSQL lcm() Function Usage
DESCRIPTION: Demonstrates how to use the lcm() function to calculate the LCM of two numbers (12 and 18).

LANGUAGE: sql
CODE:
SELECT lcm(12, 18) result;

----------------------------------------

TITLE: Basic array_to_json Function Signature
DESCRIPTION: Shows the basic syntax and parameters of the array_to_json function. The optional pretty_bool parameter controls line feed formatting between dimension 1 elements.

LANGUAGE: sql
CODE:
array_to_json(anyarray [, pretty_bool])

----------------------------------------

TITLE: Virtual Environment Setup
DESCRIPTION: Commands to create and activate a Python virtual environment

LANGUAGE: plaintext
CODE:
python -m venv venv

LANGUAGE: plaintext
CODE:
venv/scripts/activate

LANGUAGE: plaintext
CODE:
source venv/bin/activate

----------------------------------------

TITLE: Grouping Rentals by Week using DATE_TRUNC
DESCRIPTION: Query demonstrating how to group rental data by week using DATE_TRUNC function.

LANGUAGE: sql
CODE:
SELECT
    DATE_TRUNC('week', rental_date) week,
    COUNT (rental_id)
FROM
    rental
GROUP BY
    week
ORDER BY
    week;

----------------------------------------

TITLE: Using jsonb_object() with Table Data
DESCRIPTION: Shows how to use jsonb_object() with actual table data, creating JSON objects from film titles and release years.

LANGUAGE: sql
CODE:
SELECT
  jsonb_object(
    array[title], array[release_year]::text[]
  )
FROM
  film
ORDER BY
  title;

----------------------------------------

TITLE: Creating Custom PostgreSQL Function
DESCRIPTION: SQL script to create a custom stored function that searches for products by name pattern. The function returns a table with product details including ID, name, and price.

LANGUAGE: sql
CODE:
create or replace function find_products (
	p_pattern varchar
)
returns table (
	p_id int,
	p_name varchar,
	p_price decimal
)
language plpgsql
as $$
declare
    var_r record;
begin
	for var_r in(
		select id, name, price
		from products
		where name ilike p_pattern
    )
	loop
		p_id := var_r.id;
		p_name := var_r.name;
		p_price := var_r.price;
        return next;
	end loop;
end; $$

----------------------------------------

TITLE: Configuring Azure Pipeline for EF Core Migrations
DESCRIPTION: YAML configuration for an Azure Pipeline that builds the .NET application and applies EF Core migrations to a Neon database.

LANGUAGE: yaml
CODE:
trigger:
  - main

variables:
  DATABASE_URL: $(DATABASE_URL)

steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '8.x'
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - script: |
      dotnet restore
      dotnet build --configuration Release
    displayName: 'Build Application'

  - script: |
      dotnet tool install --global dotnet-ef
      dotnet ef database update
    displayName: 'Apply Database Migrations'
    env:
      DATABASE_URL: $(DATABASE_URL)

----------------------------------------

TITLE: Basic JUSTIFY_DAYS() Function Syntax
DESCRIPTION: Demonstrates the basic syntax of the JUSTIFY_DAYS() function which takes an interval value and returns a normalized interval.

LANGUAGE: sql
CODE:
JUSTIFY_DAYS ( value) → interval

----------------------------------------

TITLE: Verifying Recovered Data
DESCRIPTION: SQL query to verify the presence of recovered data by selecting records from a table.

LANGUAGE: sql
CODE:
SELECT * FROM orders LIMIT 10;

----------------------------------------

TITLE: Testing Order Creation with cURL
DESCRIPTION: cURL command to test the order creation endpoint by sending a POST request with order data.

LANGUAGE: bash
CODE:
curl -X POST http://laravel-events.test/api/orders \
     -H "Content-Type: application/json" \
     -d '{"customer_name":"John Doe","total":99.99}'

----------------------------------------

TITLE: Testing Order Creation with cURL
DESCRIPTION: cURL command to test the order creation endpoint by sending a POST request with order data.

LANGUAGE: bash
CODE:
curl -X POST http://laravel-events.test/api/orders \
     -H "Content-Type: application/json" \
     -d '{"customer_name":"John Doe","total":99.99}'

----------------------------------------

TITLE: Using Negative Integer Example
DESCRIPTION: Shows how RIGHT() function behaves with negative integers, returning all characters except the first n characters.

LANGUAGE: sql
CODE:
SELECT RIGHT('XYZ', - 1);

----------------------------------------

TITLE: PostgreSQL MAKE_DATE Function Syntax
DESCRIPTION: The basic syntax of the MAKE_DATE() function that constructs a date value from year, month, and day integers. The year parameter can be negative to indicate BC dates.

LANGUAGE: sql
CODE:
MAKE_DATE( year int, month int, day int ) → date

----------------------------------------

TITLE: Deleting Data via Updatable View in PostgreSQL
DESCRIPTION: This snippet deletes a row from the 'cities' table through the 'city_us' view. It shows how to use an updatable view for data deletion.

LANGUAGE: sql
CODE:
DELETE FROM city_us
WHERE id = 21;

----------------------------------------

TITLE: Restarting PostgreSQL using pg_ctl Command
DESCRIPTION: This command uses the pg_ctl utility to restart PostgreSQL. The user needs to replace '<version>' with their specific PostgreSQL version number and adjust the data directory path if necessary.

LANGUAGE: xmlsql
CODE:
pg_ctl -D "C:\Program Files\PostgreSQL\<version>\data" restart

----------------------------------------

TITLE: Creating a Table with JSONB Column in Postgres
DESCRIPTION: This SQL snippet creates a table named 'documents' with an auto-incrementing 'id' column and a 'data' column of type JSONB. This structure allows for storing JSON-like data in Postgres.

LANGUAGE: sql
CODE:
CREATE TABLE documents (
  id SERIAL PRIMARY KEY,
  data JSONB
);

----------------------------------------

TITLE: Branch Details API Response (JSON)
DESCRIPTION: This JSON response from the Neon API shows branch details, including usage metrics such as logical size, CPU usage, compute time, and data transfer.

LANGUAGE: json
CODE:
{
  "branch": {
    "id": "br-polished-flower-a5tq1sdv",
    "project_id": "summer-bush-30064139",
    "name": "main",
    "current_state": "ready",
    "logical_size": 427474944,
    "creation_source": "console",
    "default": true,
    "protected": false,
    "cpu_used_sec": 2505,
    "compute_time_seconds": 2505,
    "active_time_seconds": 9924,
    "written_data_bytes": 1566733560,
    "data_transfer_bytes": 40820887,
    "created_at": "2024-04-02T12:54:33Z",
    "updated_at": "2024-04-10T17:43:21Z"
  }
}

----------------------------------------

TITLE: Transferring Personal Projects to Organization via API (Bash)
DESCRIPTION: This code snippet demonstrates how to use the Neon API to transfer projects from a personal account to an organization using a cURL command. It includes the API endpoint, headers, and JSON payload structure.

LANGUAGE: bash
CODE:
curl -X POST 'https://console.neon.tech/api/v2/users/me/projects/transfer' \
  -H 'accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY" \
  -H 'Content-Type: application/json' \
  -d '{
  "org_id": "org-cool-breeze-12345678",
  "project_ids": [
    "project-id-1",
    "project-id-2"
  ]
}'

----------------------------------------

TITLE: Creating Role with Database Creation Permission
DESCRIPTION: Creates a role with privileges to create new databases.

LANGUAGE: sql
CODE:
CREATE ROLE dba
CREATEDB
LOGIN
PASSWORD 'securePass1';

----------------------------------------

TITLE: Creating Todos Table With Neon Auth in SQL
DESCRIPTION: This SQL statement creates a todos table that references the neon_auth.users_sync table using a foreign key, as enabled by Neon Auth.

LANGUAGE: sql
CODE:
CREATE TABLE todos (
    id SERIAL PRIMARY KEY,
    task TEXT NOT NULL,
    user_id TEXT NOT NULL REFERENCES neon_auth.users_sync(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

----------------------------------------

TITLE: PostgreSQL BETWEEN with Numbers Example
DESCRIPTION: Query that retrieves payments with payment_id values between 17503 and 17505 from the payment table, ordered by payment_id.

LANGUAGE: sql
CODE:
SELECT
  payment_id,
  amount
FROM
  payment
WHERE
  payment_id BETWEEN 17503 AND 17505
ORDER BY
  payment_id;

----------------------------------------

TITLE: Basic JUSTIFY_HOURS Function Syntax
DESCRIPTION: Demonstrates the basic syntax and usage of the JUSTIFY_HOURS() function which takes an interval value as input and returns a normalized interval.

LANGUAGE: sql
CODE:
JUSTIFY_HOURS ( value) → interval

----------------------------------------

TITLE: Running Flyway Migrations with Maven
DESCRIPTION: Commands for running Flyway migrations using the Maven plugin.

LANGUAGE: bash
CODE:
mvn flyway:baseline

LANGUAGE: bash
CODE:
mvn flyway:migrate

LANGUAGE: bash
CODE:
mvn flyway:info

----------------------------------------

TITLE: Sorting Customers by Last Name in Descending Order
DESCRIPTION: This query selects first and last names from the customer table and sorts the results by last name in descending order.

LANGUAGE: SQL
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
ORDER BY
  last_name DESC;

----------------------------------------

TITLE: Creating a New Branch with Custom Endpoint Settings in Neon
DESCRIPTION: This curl command shows how to create a new branch named 'Development' with custom endpoint settings, including minimum and maximum compute sizes and suspend timeout.

LANGUAGE: bash
CODE:
curl --request POST \
     --url https://console.neon.tech/api/v2/projects/noisy-pond-28482075/branches \
     --header 'Accept: application/json' \
     --header "Authorization: Bearer $NEON_API_KEY" \
     --header 'Content-Type: application/json' \
     --data '
{
  "branch": {
    "name": "Development"
  },
  "endpoints": [
    {
      "type": "read_write",
      "autoscaling_limit_min_cu": 1,
      "autoscaling_limit_max_cu": 3,
      "suspend_timeout_seconds": 600
    }
  ]
}
' | jq

----------------------------------------

TITLE: Creating and Inserting Scientific Data with DOUBLE PRECISION in PostgreSQL
DESCRIPTION: This example shows how to create a table using the DOUBLE PRECISION data type for storing precise temperature and CO2 levels in scientific measurements.

LANGUAGE: sql
CODE:
CREATE TABLE scientific_data (
    measurement_id SERIAL PRIMARY KEY,
    precise_temperature DOUBLE PRECISION NOT NULL,
    co2_levels DOUBLE PRECISION NOT NULL,
    measurement_time TIMESTAMP WITHOUT TIME ZONE NOT NULL
);

INSERT INTO scientific_data (precise_temperature, co2_levels, measurement_time)
VALUES
    (23.456789, 415.123456789, '2024-02-03 10:00:00'),
    (20.123456, 417.123789012, '2024-02-03 11:00:00'),
    (22.789012, 418.456123789, '2024-02-03 12:00:00');

----------------------------------------

TITLE: MIN_SCALE() with Integer Input
DESCRIPTION: Example showing how MIN_SCALE() handles integer input, returning 0 as integers have no decimal places.

LANGUAGE: sql
CODE:
SELECT min_scale(10);

----------------------------------------

TITLE: CI/CD Pipeline Configuration for Laravel Deployment
DESCRIPTION: Example YAML configuration for a CI/CD pipeline that includes stages for building, testing, and deploying a Laravel application.

LANGUAGE: yaml
CODE:
- name: Install Dependencies
  run: composer install
- name: Compile Assets
  run: npm run build

LANGUAGE: yaml
CODE:
- name: Run Unit Tests
  run: php artisan test
- name: Run Coding Standards Check
  run: php artisan lint

----------------------------------------

TITLE: Configuring Postgres Role Permissions
DESCRIPTION: SQL commands to set up permissions for authenticated and anonymous roles in the public schema.

LANGUAGE: sql
CODE:
-- For existing tables
GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to authenticated;

GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to anonymous;

-- For future tables
ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO authenticated;

ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO anonymous;

-- Grant USAGE on "public" schema
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO anonymous;

----------------------------------------

TITLE: Querying Available Timezones
DESCRIPTION: Shows how to retrieve a list of all available timezones from the pg_timezone_names table.

LANGUAGE: sql
CODE:
SELECT * FROM pg_timezone_names;

----------------------------------------

TITLE: Testing Soft Delete Functionality in Laravel
DESCRIPTION: This code provides example test cases for soft delete functionality in Laravel, including soft deleting, restoring, and force deleting records.

LANGUAGE: php
CODE:
public function it_soft_deletes_a_post()
{
    $post = Post::factory()->create();

    $post->delete();

    $this->assertSoftDeleted($post);
    $this->assertDatabaseHas('posts', ['id' => $post->id]);
    $this->assertDatabaseMissing('posts', [
        'id' => $post->id,
        'deleted_at' => null
    ]);
}

public function it_restores_a_soft_deleted_post()
{
    $post = Post::factory()->create();
    $post->delete();

    $post->restore();

    $this->assertDatabaseHas('posts', [
        'id' => $post->id,
        'deleted_at' => null
    ]);
    $this->assertNotSoftDeleted($post);
}

public function it_excludes_soft_deleted_posts_from_regular_queries()
{
    $activePost = Post::factory()->create();
    $deletedPost = Post::factory()->create();
    $deletedPost->delete();

    $posts = Post::all();

    $this->assertTrue($posts->contains($activePost));
    $this->assertFalse($posts->contains($deletedPost));
}

public function it_includes_soft_deleted_posts_when_using_with_trashed()
{
    $activePost = Post::factory()->create();
    $deletedPost = Post::factory()->create();
    $deletedPost->delete();

    $posts = Post::withTrashed()->get();

    $this->assertTrue($posts->contains($activePost));
    $this->assertTrue($posts->contains($deletedPost));
}

public function it_permanently_deletes_a_post()
{
    $post = Post::factory()->create();

    $post->forceDelete();

    $this->assertDatabaseMissing('posts', ['id' => $post->id]);
    $this->assertDatabaseCount('posts', 0);
}

----------------------------------------

TITLE: Querying Non-Deleted Records in Laravel
DESCRIPTION: This code shows how to retrieve only non-deleted records using Laravel's Eloquent ORM.

LANGUAGE: php
CODE:
$activePosts = Post::all(); // Only returns non-deleted posts

----------------------------------------

TITLE: Using PostgreSQL LOWER() Function in WHERE Clause
DESCRIPTION: This example demonstrates how to use the LOWER() function in a WHERE clause to perform case-insensitive string comparison for filtering results.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
WHERE
  LOWER(last_name) = 'barnett';

----------------------------------------

TITLE: Comparing rank() and dense_rank() Functions in PostgreSQL
DESCRIPTION: This snippet demonstrates the difference between rank() and dense_rank() functions, showing how rank() leaves gaps in the ranking sequence for ties.

LANGUAGE: sql
CODE:
SELECT
   student_id,
   student_name,
   score,
   rank() OVER (ORDER BY score DESC) AS rank
FROM
   student_scores;

----------------------------------------

TITLE: Inserting Data to Test UNIQUE Index
DESCRIPTION: SQL INSERT statements to demonstrate the enforcement of the UNIQUE index on the mobile_phone column.

LANGUAGE: sql
CODE:
INSERT INTO employees(first_name, last_name, email, mobile_phone)
VALUES ('John','Doe','john.doe@example.com', '(408)-555-1234');

INSERT INTO employees(first_name, last_name, email, mobile_phone)
VALUES ('Jane','Doe','jane.doe@example.com', '(408)-555-1234');

----------------------------------------

TITLE: Case-Insensitive Matching with PostgreSQL ILIKE
DESCRIPTION: This example shows how to use the ILIKE operator for case-insensitive pattern matching, finding customer names that start with 'BAR' regardless of case.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
WHERE
  first_name ILIKE 'BAR%';

----------------------------------------

TITLE: Creating and Populating an Employees Table with DATE Columns in PostgreSQL
DESCRIPTION: This snippet creates an employees table with birth_date and hire_date columns of DATE type, and inserts sample data.

LANGUAGE: sql
CODE:
CREATE TABLE employees (
  employee_id SERIAL PRIMARY KEY,
  first_name VARCHAR (255) NOT NULL,
  last_name VARCHAR (255) NOT NULL,
  birth_date DATE NOT NULL,
  hire_date DATE NOT NULL
);

INSERT INTO employees (first_name, last_name, birth_date, hire_date)
VALUES ('Shannon','Freeman','1980-01-01','2005-01-01'),
       ('Sheila','Wells','1978-02-05','2003-01-01'),
       ('Ethel','Webb','1975-01-01','2001-01-01')
RETURNING *;

----------------------------------------

TITLE: Using dense_rank() with SUM Aggregation in PostgreSQL
DESCRIPTION: This query demonstrates how to use dense_rank() with the SUM function to rank classes based on their total scores.

LANGUAGE: sql
CODE:
SELECT class_id, dense_rank() OVER (ORDER BY SUM(score) DESC) AS total_score_rank, SUM(score) AS total_score
FROM student_scores_by_class
GROUP BY class_id;

----------------------------------------

TITLE: Installing StepZen CLI
DESCRIPTION: This command installs the StepZen CLI globally using npm. The CLI is necessary for connecting StepZen to the Neon database and generating the GraphQL schema.

LANGUAGE: bash
CODE:
npm install -g stepzen

----------------------------------------

TITLE: Database Connection Setup
DESCRIPTION: Opening a connection to PostgreSQL database using Npgsql

LANGUAGE: csharp
CODE:
await using var conn = new NpgsqlConnection(connectionString);
await conn.OpenAsync();

----------------------------------------

TITLE: Enabling pgrouting Extension in Neon
DESCRIPTION: SQL command to enable the pgrouting extension in a Neon database. This extension provides geospatial routing and network analysis functionality.

LANGUAGE: SQL
CODE:
CREATE EXTENSION IF NOT EXISTS pgrouting;

----------------------------------------

TITLE: Inserting Sample Angles
DESCRIPTION: Inserts sample radian values including multiples and fractions of PI.

LANGUAGE: sql
CODE:
INSERT INTO angles (angle_radians)
VALUES
    (2*PI()),
    (PI()),
    (PI()/2),
    (NULL)
RETURNING *;

----------------------------------------

TITLE: Implementing a Notification Listener in Node.js
DESCRIPTION: This code sets up a listener for Postgres notifications on a specific channel using the pg library. It connects to the database and logs received notifications to the console.

LANGUAGE: javascript
CODE:
// File: listen.js

// Load all the environment variables
require('dotenv').config();

const { Client } = require('pg');

const connectionString = process.env.DATABASE_URL;

const client = new Client({ connectionString });

async function listenToNotifications() {
  try {
    // Connect to Postgres
    await client.connect();
    // Listen to specific channel in Postgres
    // Attach a listener to notifications received
    client.on('notification', (msg) => {
      console.log('Notification received', msg.payload);
    });
    await client.query('LISTEN channel_name');
    console.log('Listening for notifications on my_channel');
  } catch (e) {
    console.log(e);
  }
}

listenToNotifications().catch(console.log);

----------------------------------------

TITLE: Setting Up Environment Variables for Database Connections
DESCRIPTION: This bash script sets up environment variables for administrative and authenticated database connections in a .env file.

LANGUAGE: bash
CODE:
# Database owner connection string
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'

# Neon "authenticated" role connection string
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

----------------------------------------

TITLE: Basic jsonb_object() Function Syntax
DESCRIPTION: Shows the basic syntax patterns for the jsonb_object() function, which can accept either a single text array or separate key-value arrays.

LANGUAGE: sql
CODE:
jsonb_object(text[]) → jsonb

LANGUAGE: sql
CODE:
jsonb_object ( keys text[], values text[] ) → jsonb

----------------------------------------

TITLE: Complete Table Comparison Using UNION and EXCEPT in PostgreSQL
DESCRIPTION: Combines UNION and EXCEPT operators to show all differences between tables in both directions.

LANGUAGE: sql
CODE:
SELECT
  id,
  name,
  'not in bar' AS note
FROM
  foo
EXCEPT
SELECT
  id,
  name,
  'not in bar' AS note
FROM
  bar
UNION
SELECT
  ID,
  NAME,
  'not in foo' AS note
FROM
  bar
EXCEPT
SELECT
  ID,
  NAME,
  'not in foo' AS note
FROM
  foo;

----------------------------------------

TITLE: Defining Data Model for EF Core Migration
DESCRIPTION: C# code defining a simple Product entity for use in Entity Framework Core migrations.

LANGUAGE: csharp
CODE:
public class Product
{
    public int Id { get; set; }
    public string Name { get; set; }
    public decimal Price { get; set; }
}

----------------------------------------

TITLE: Basic PostgreSQL regexp_match() Function Signature
DESCRIPTION: Shows the basic syntax and parameters of the regexp_match() function in PostgreSQL. The function takes a string input, a pattern, and optional flags to return an array of matched substrings.

LANGUAGE: sql
CODE:
regexp_match(string text, pattern text [, flags text]) -> text[]

----------------------------------------

TITLE: Getting JSON Number Type
DESCRIPTION: Example of using jsonb_typeof() to get the type of a numeric JSON value.

LANGUAGE: sql
CODE:
SELECT jsonb_typeof('1'::jsonb);

----------------------------------------

TITLE: Installing project dependencies using pip
DESCRIPTION: Command to install the required Python libraries listed in requirements.txt.

LANGUAGE: bash
CODE:
pip install -r requirements.txt

----------------------------------------

TITLE: Creating a BEFORE TRUNCATE Trigger for Companies Table
DESCRIPTION: Creates a BEFORE TRUNCATE trigger on the companies table that executes the before_truncate_companies function for each TRUNCATE statement.

LANGUAGE: SQL
CODE:
CREATE TRIGGER before_truncate_companies_trigger
BEFORE TRUNCATE ON companies
FOR EACH STATEMENT
EXECUTE FUNCTION before_truncate_companies();

----------------------------------------

TITLE: Verifying WAL Level Configuration in Postgres
DESCRIPTION: SQL query to verify that logical replication is enabled by checking the wal_level setting.

LANGUAGE: sql
CODE:
SHOW wal_level;

----------------------------------------

TITLE: Inserting Sample Data for BOOL_AND() Examples
DESCRIPTION: SQL INSERT statements to populate the teams and projects tables with test data for BOOL_AND() demonstrations.

LANGUAGE: sql
CODE:
INSERT INTO teams (team_name)
VALUES
('Team A'),
('Team B'),
('Team C')
RETURNING *;

INSERT INTO projects(name, active, team_id)
VALUES
('Intranet', false, 1),
('AI Chatbot', true, 1),
('Robot', true, 2),
('RPA', true, 2),
('Data Analytics', true, 3),
('BI', NULL, 3)
RETURNING *;

----------------------------------------

TITLE: Checking psycopg2 and libpq Versions in Django Shell
DESCRIPTION: Commands to verify the installed versions of psycopg2 driver and libpq library within a Django shell environment. Useful for troubleshooting connection issues related to SNI support.

LANGUAGE: bash
CODE:
# Start a Django shell
python3 manage.py shell

# Check versions
import psycopg2
print("psycopg2 version:", psycopg2.__version__)
print("libpq version:", psycopg2._psycopg.libpq_version())

----------------------------------------

TITLE: Running PgHero Docker Container
DESCRIPTION: Command to run the PgHero Docker container, connecting it to a Neon database. The $NEON_DB placeholder should be replaced with the actual Neon database connection string.

LANGUAGE: bash
CODE:
docker run -ti -e DATABASE_URL='$NEON_DB' -p 8080:8080 ankane/pghero

----------------------------------------

TITLE: Querying User-Created Schemas
DESCRIPTION: SQL query to list all user-created schemas excluding PostgreSQL system schemas.

LANGUAGE: sql
CODE:
SELECT *
FROM
    pg_catalog.pg_namespace
WHERE
    nspacl is NULL AND
    nspname NOT LIKE 'pg_%'
ORDER BY
    nspname;

----------------------------------------

TITLE: Expanding Arrays into Rows using UNNEST in PostgreSQL
DESCRIPTION: This SQL query shows how to use the UNNEST function to expand an array column into individual rows.

LANGUAGE: sql
CODE:
SELECT name, unnest(units_sold) AS units_sold
FROM products
WHERE name = 'Laptop';

----------------------------------------

TITLE: Creating a Group Role in PostgreSQL
DESCRIPTION: This snippet demonstrates how to create a group role in PostgreSQL using the CREATE ROLE statement. Group roles are typically created without the LOGIN privilege.

LANGUAGE: sql
CODE:
CREATE ROLE group_role;

LANGUAGE: sql
CODE:
CREATE ROLE sales;

----------------------------------------

TITLE: Inserting User into Database from Webhook in TypeScript
DESCRIPTION: This TypeScript code snippet demonstrates how to handle a webhook from an auth provider to insert a new user into the users table without Neon Auth.

LANGUAGE: typescript
CODE:
// Webhook handler to insert a user into the 'users' table for a 'user.created' event

import { db } from '@/db';

export async function POST(request: Request) {
  await checkIfRequestIsFromAuthProvider(request); // Validate request authenticity using headers, etc.
  const payload = await request.json(); // Auth Provider webhook payload

  // Extract user data from the webhook payload
  const userId = payload.user_id;
  const email = payload.email_address;
  const name = payload.name;

  try {
    await db.query(
      `INSERT INTO users (id, email, name)
       VALUES ($1, $2, $3)`,
      [userId, email, name]
    );
    return new Response('User added successfully', { status: 200 });
  } catch (error) {
    console.error('Database error inserting user:', error);

    // Retry logic, error handling, etc. as needed
    // Send notification to on-call team, etc to check why the insert operation failed

    return new Response('Error inserting user into database', { status: 500 });
  }
}

----------------------------------------

TITLE: Configuring TypeScript in Astro
DESCRIPTION: Updates to tsconfig.json for enabling path aliases in the Astro project.

LANGUAGE: json
CODE:
{
  "extends": "astro/tsconfigs/strict",
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  }
}

----------------------------------------

TITLE: Updating JSON Object with jsonb_set()
DESCRIPTION: Shows how to update a key-value pair in a JSON object using jsonb_set().

LANGUAGE: sql
CODE:
SELECT
  jsonb_set('{"name": "Jane Doe"}', '{name}', '"Jane Smith"');

----------------------------------------

TITLE: Setting up Environment Variables for Neon Database
DESCRIPTION: Configuration for storing Neon database credentials in a .env file for secure connection management.

LANGUAGE: shell
CODE:
DATABASE_URL="postgres://[user]:[password]@[neon_hostname]/[dbname]"

----------------------------------------

TITLE: PL/pgSQL IF-THEN-ELSE Statement Example
DESCRIPTION: Demonstrates using an IF-THEN-ELSE statement to display a message indicating whether a film with a specific ID exists or not.

LANGUAGE: sql
CODE:
do $$
declare
  selected_film film%rowtype;
  input_film_id film.film_id%type := 100;
begin

  select * from film
  into selected_film
  where film_id = input_film_id;

  if not found then
     raise notice 'The film % could not be found',
	    input_film_id;
  else
     raise notice 'The film title is %', selected_film.title;
  end if;
end $$;

----------------------------------------

TITLE: PostgreSQL RIGHT JOIN with WHERE Clause to Find Unmatched Rows
DESCRIPTION: Shows how to combine a RIGHT JOIN with a WHERE clause to find rows in the right table (film) that have no matching rows in the left table (inventory).

LANGUAGE: sql
CODE:
SELECT
  f.film_id,
  f.title,
  i.inventory_id
FROM
  inventory i
RIGHT JOIN film f USING(film_id)
WHERE i.inventory_id IS NULL
ORDER BY
  f.title;

----------------------------------------

TITLE: Pattern Matching with LIKE Operator
DESCRIPTION: Example of using the LIKE operator for pattern matching in text fields

LANGUAGE: sql
CODE:
SELECT id, title
FROM books
WHERE title LIKE 'Data%';

LANGUAGE: text
CODE:
 id |                       title
----+----------------------------------------------------
  2 | Data Modeling Essentials

----------------------------------------

TITLE: Granting Schema Access to Replication User in SQL
DESCRIPTION: SQL commands to grant the replication user access to all tables in the public schema.

LANGUAGE: sql
CODE:
GRANT USAGE ON SCHEMA public TO replication_user;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO replication_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO replication_user;

----------------------------------------

TITLE: Inserting a Basic Row into the links Table
DESCRIPTION: Demonstrates inserting a new row with basic data into the 'links' table.

LANGUAGE: sql
CODE:
INSERT INTO links (url, name)
VALUES('https://neon.tech/postgresql','PostgreSQL Tutorial');

----------------------------------------

TITLE: Creating New PostgreSQL Database
DESCRIPTION: This SQL command creates a new empty database in PostgreSQL, typically used before restoring a database from a dump file.

LANGUAGE: sql
CODE:
CREATE DATABASE targetdb;

----------------------------------------

TITLE: PSQL Connection Examples
DESCRIPTION: Examples of using the connection string command with PSQL for direct database access and query execution

LANGUAGE: bash
CODE:
neon connection-string --psql

LANGUAGE: bash
CODE:
neon connection-string --psql -- -f dump.sql

LANGUAGE: bash
CODE:
neon connection-string --psql -- -c "SELECT version()"

----------------------------------------

TITLE: Creating Table for CBRT() Function Example
DESCRIPTION: This SQL snippet creates a table named 'cube_volumes' to store volumes of cubes for demonstrating CBRT() function with table data.

LANGUAGE: sql
CODE:
CREATE TABLE cube_volumes(
    id INT GENERATED ALWAYS AS IDENTITY,
    volume DEC(19,2),
    PRIMARY KEY(id)
);

----------------------------------------

TITLE: Installing Inngest Client - Bash
DESCRIPTION: Command to install the Inngest client package via npm.

LANGUAGE: bash
CODE:
npm i inngest

----------------------------------------

TITLE: Inserting Sample Data into the Colors Table
DESCRIPTION: Inserts multiple rows of sample data into the 'colors' table for demonstrating SELECT DISTINCT queries.

LANGUAGE: sql
CODE:
INSERT INTO
  colors (bcolor, fcolor)
VALUES
  ('red', 'red'),
  ('red', 'red'),
  ('red', NULL),
  (NULL, 'red'),
  (NULL, NULL),
  ('green', 'green'),
  ('blue', 'blue'),
  ('blue', 'blue');

----------------------------------------

TITLE: Using json_array_elements() to Expand JSON Arrays in PostgreSQL
DESCRIPTION: This query uses json_array_elements() to extract individual skills from the JSON array in the 'skills' column, creating a row for each skill.

LANGUAGE: sql
CODE:
SELECT id, name, skill
FROM developers,
    json_array_elements(skills) AS skill;

----------------------------------------

TITLE: Creating Sample Film Info View
DESCRIPTION: Creates a view joining film, film_category, and category tables to display film information.

LANGUAGE: sql
CODE:
CREATE VIEW film_info AS
SELECT
  film_id,
  title,
  release_year,
  length,
  name category
FROM
  film
  INNER JOIN film_category USING (film_id)
  INNER JOIN category USING(category_id);

----------------------------------------

TITLE: Setting Neon Connection String in Environment Variable
DESCRIPTION: This snippet demonstrates how to set up the DATABASE_URL environment variable with a Neon connection string. It includes the recommended 'sslmode=require' parameter for secure connections.

LANGUAGE: text
CODE:
DATABASE_URL="postgresql://[user]:[password]@[neon_hostname]/[dbname]?sslmode=require"

----------------------------------------

TITLE: Configuring Drizzle Kit for Database Migrations
DESCRIPTION: TypeScript configuration for Drizzle Kit to generate and manage database migrations.

LANGUAGE: typescript
CODE:
import type { Config } from 'drizzle-kit';
import 'dotenv/config';

if (!process.env.DATABASE_URL) throw new Error('DATABASE_URL not found in environment');

export default {
  schema: './app/db/schema.ts',
  out: './drizzle',
  driver: 'pg',
  dbCredentials: {
    connectionString: process.env.DATABASE_URL,
  },
  strict: true,
} satisfies Config;

----------------------------------------

TITLE: Establishing Unnamed Connection with dblink_connect
DESCRIPTION: Creates an unnamed connection to a remote Postgres database using dblink_connect. Useful for one-off queries.

LANGUAGE: sql
CODE:
SELECT dblink_connect('host=my_remote_host port=5432 dbname=my_remote_database user=my_remote_user password=my_remote_password sslmode=require');

----------------------------------------

TITLE: Creating a Logical Replication Slot in PostgreSQL
DESCRIPTION: This SQL function creates a logical replication slot named 'my_replication_slot' using the 'pgoutput' decoder plugin. Replication slots track replication progress and prevent premature WAL purging.

LANGUAGE: sql
CODE:
SELECT pg_create_logical_replication_slot('my_replication_slot', 'pgoutput');

----------------------------------------

TITLE: Querying and Manipulating Interval Data
DESCRIPTION: Shows various queries for working with interval data in a PostgreSQL table, including extracting components, filtering, and aggregating.

LANGUAGE: SQL
CODE:
SELECT
    event_name,
    duration,
    EXTRACT(DAY FROM duration) AS days,
    EXTRACT(HOUR FROM duration) AS hours,
    EXTRACT(MINUTE FROM duration) AS minutes
FROM event;

SELECT *
FROM event
WHERE duration > INTERVAL '1 day';

SELECT
    SUM(duration) AS total_duration
FROM event
;

WITH cte AS(
   SELECT SUM(duration) AS total_duration
   FROM event
)
SELECT
    total_duration,
    EXTRACT(DAY FROM total_duration ) AS days,
    EXTRACT(HOUR FROM total_duration ) AS hours,
    EXTRACT(MINUTE FROM total_duration ) AS minutes
FROM cte;

----------------------------------------

TITLE: Format Control Example
DESCRIPTION: Shows how omitting decimal places in the format string affects the output of TO_NUMBER function.

LANGUAGE: sql
CODE:
SELECT
    TO_NUMBER(
        '1,234,567.89',
        '9G999g999'
    );

----------------------------------------

TITLE: Listing Project VPC Restrictions
DESCRIPTION: Command to list all VPC endpoint restrictions for a specified Neon project.

LANGUAGE: bash
CODE:
neon vpc project list --project-id orange-credit-12345678

----------------------------------------

TITLE: Using AGE() Function with Current Date
DESCRIPTION: Shows how to use the AGE() function with the current date to calculate someone's age based on their birth date.

LANGUAGE: sql
CODE:
SELECT
  current_date,
  AGE(timestamp '2000-01-01');

----------------------------------------

TITLE: Using IN Operator in PostgreSQL WHERE Clause
DESCRIPTION: Demonstrates how to use the IN operator to find values in a list within a WHERE clause.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
WHERE
  first_name IN ('Ann', 'Anne', 'Annie');

----------------------------------------

TITLE: Using IN Operator in PostgreSQL WHERE Clause
DESCRIPTION: Demonstrates how to use the IN operator to find values in a list within a WHERE clause.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
WHERE
  first_name IN ('Ann', 'Anne', 'Annie');

----------------------------------------

TITLE: Using IN Operator in PostgreSQL WHERE Clause
DESCRIPTION: Demonstrates how to use the IN operator to find values in a list within a WHERE clause.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
WHERE
  first_name IN ('Ann', 'Anne', 'Annie');

----------------------------------------

TITLE: Using IN Operator in PostgreSQL WHERE Clause
DESCRIPTION: Demonstrates how to use the IN operator to find values in a list within a WHERE clause.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
WHERE
  first_name IN ('Ann', 'Anne', 'Annie');

----------------------------------------

TITLE: Using IN Operator in PostgreSQL WHERE Clause
DESCRIPTION: Demonstrates how to use the IN operator to find values in a list within a WHERE clause.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
WHERE
  first_name IN ('Ann', 'Anne', 'Annie');

----------------------------------------

TITLE: Configuring Wrangler for Node Compatibility
DESCRIPTION: TOML configuration for Wrangler to enable Node.js compatibility in Cloudflare Workers.

LANGUAGE: toml
CODE:
name = "with-hyperdrive"
main = "src/index.ts"
compatibility_date = "2024-12-05"
compatibility_flags = ["nodejs_compat"]

----------------------------------------

TITLE: PostgreSQL MAX() Function with GROUP BY Clause
DESCRIPTION: This snippet demonstrates using the MAX() function with a GROUP BY clause to retrieve the highest payment paid by each customer.

LANGUAGE: sql
CODE:
SELECT
  customer_id,
  MAX (amount)
FROM
  payment
GROUP BY
  customer_id;

----------------------------------------

TITLE: Basic PostgreSQL INTERSECT Syntax
DESCRIPTION: Demonstrates the fundamental syntax for using the INTERSECT operator in PostgreSQL to combine result sets from two SELECT statements.

LANGUAGE: sql
CODE:
SELECT select_list
FROM A
INTERSECT
SELECT select_list
FROM B;

----------------------------------------

TITLE: Configuring Agents in YAML
DESCRIPTION: YAML configuration for the three agents, defining their roles, goals, and backstories.

LANGUAGE: yaml
CODE:
web_scraper:
  role: >
    Web scraper specializing in markdown extraction.
  goal: >
    Visit a website and accurately return its content in markdown format.
  backstory: >
    You are a meticulous data entry employee with expertise in web scraping and markdown formatting. Your task is to retrieve website content and present it clearly in markdown.
  llm: openai/gpt-4o-mini
data_extractor:
  role: >
    Data extraction expert for web content analysis.
  goal: >
    Analyze web page content and extract structured information
  backstory: >
    You are an expert data analyst skilled in extracting key information from web pages. You are adept at identifying and listing key details such as blog post titles, author names, and publication dates from website content.
  llm: openai/gpt-4o-mini
content_storer:
  role: >
    Database engineer
  goal: >
    Store structured web content in a Postgres database, create relevant tables, insert data, and formulate SQL queries to retrieve stored data.
  backstory: >
    You are an expert database engineer. You are skilled in database design, data insertion, and writing efficient SQL queries for data retrieval.
  llm: openai/gpt-4o-mini

----------------------------------------

TITLE: Analyzing Query Performance with EXPLAIN ANALYZE
DESCRIPTION: Demonstrates how to use EXPLAIN ANALYZE to examine query execution plans and performance metrics for JSON queries.

LANGUAGE: sql
CODE:
EXPLAIN ANALYZE
SELECT
   data ->> 'first_name' first_name,
   data ->> 'last_name' last_name,
   data ->> 'phone' phone
FROM
   customer_json
WHERE
   data @> '{"first_name": "John"}';

----------------------------------------

TITLE: Using jsonb_object_agg_strict() to Skip Null Values in PostgreSQL
DESCRIPTION: This example shows how to use jsonb_object_agg_strict() function to aggregate employee details while skipping null salary values.

LANGUAGE: sql
CODE:
SELECT
  department_name,
  jsonb_pretty(
    jsonb_object_agg_strict(e.name, e.salary)
  ) AS employee_details
FROM
  departments d
  INNER JOIN employees e ON e.department_id = d.id
GROUP BY
  department_name;

----------------------------------------

TITLE: Query Example with First and Last Name Filters
DESCRIPTION: Shows a SELECT query using EXPLAIN to demonstrate index usage when filtering by both first and last names.

LANGUAGE: sql
CODE:
EXPLAIN SELECT
  id,
  first_name,
  last_name
FROM
  people
WHERE
  last_name = 'Adams'
  AND first_name = 'Lou';

----------------------------------------

TITLE: Calculating Rounded Percentages in PostgreSQL
DESCRIPTION: Demonstrates using round() function to calculate and display accurate sales percentages.

LANGUAGE: sql
CODE:
WITH product_sales(product_id, sales_amount) AS (
  VALUES
    (1, 1234.56),
    (2, 2345.67),
    (3, 3456.78),
    (4, 4567.89)
)
SELECT
  product_id,
  sales_amount,
  round(
    (sales_amount / SUM(sales_amount) OVER ()) * 100,
    2
  ) AS percentage_of_total
FROM product_sales
ORDER BY percentage_of_total DESC;

----------------------------------------

TITLE: Implementing Connection Pooling in JavaScript
DESCRIPTION: JavaScript code to implement connection pooling for improved database performance and resource management.

LANGUAGE: javascript
CODE:
const pool = new Pool({
  connectionString: process.env.NEON_CONNECTION_STRING,
  ssl: true,
  max: 20, // maximum number of clients
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

----------------------------------------

TITLE: Retrieving First Character with PostgreSQL LEFT()
DESCRIPTION: This example demonstrates how to use the LEFT() function to get the first character of the string 'ABC'.

LANGUAGE: sql
CODE:
SELECT LEFT('ABC',1);

----------------------------------------

TITLE: Querying Help Commands in Neon SQL Editor
DESCRIPTION: Meta-commands for accessing help documentation in the Neon SQL Editor, similar to psql CLI functionality. These commands provide information about supported PostgreSQL operations and syntax.

LANGUAGE: psql
CODE:
\help
\h
\?

----------------------------------------

TITLE: Querying Composite Type Fields
DESCRIPTION: Shows different ways to query data from composite type columns, including accessing individual fields.

LANGUAGE: sql
CODE:
SELECT
  id,
  name,
  (address).city,
  (address).state,
  (address).zip_code
FROM
  contacts;

----------------------------------------

TITLE: Creating Next.js Project Setup
DESCRIPTION: Command to create a new Next.js project with TypeScript, TailwindCSS, and other configurations

LANGUAGE: bash
CODE:
npx create-next-app@14 todo-app --typescript --tailwind --use-npm --eslint --app --no-src-dir --import-alias "@/*"

----------------------------------------

TITLE: Resetting a Branch to Parent State
DESCRIPTION: Shows how to reset a branch to match the current state of its parent branch using the Neon CLI.

LANGUAGE: bash
CODE:
neon branches reset dev/alex --parent

----------------------------------------

TITLE: Connecting to PostgreSQL via psql CLI
DESCRIPTION: Command to connect to PostgreSQL server using psql with the postgres superuser account. The -U flag specifies the username.

LANGUAGE: shellsql
CODE:
psql -U postgres

----------------------------------------

TITLE: Sample Neon Database Connection String
DESCRIPTION: Example connection string format for connecting to a Neon database.

LANGUAGE: sql
CODE:
postgresql://neondb_owner:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/neondb?sslmode=require

----------------------------------------

TITLE: Simple jsonb_each() Example
DESCRIPTION: Shows how to expand a simple JSON object containing personal information into key/value pairs.

LANGUAGE: sql
CODE:
SELECT *
FROM jsonb_each('{
    "name": "John",
    "age": 30,
    "city": "New York"
}');

----------------------------------------

TITLE: Basic JSON Serialization to Text in PostgreSQL
DESCRIPTION: Examples of using json_serialize() to convert simple JSON objects and arrays to text format.

LANGUAGE: sql
CODE:
-- Serialize a simple JSON object to text
SELECT json_serialize('{"name": "Alice", "age": 30}');

LANGUAGE: sql
CODE:
-- Serialize a JSON array
SELECT json_serialize('[1, 2, 3, "four", true, null]');

----------------------------------------

TITLE: Complex Boolean Logic with CASE Statements
DESCRIPTION: Shows how to use Boolean values in CASE statements for conditional logic and user categorization

LANGUAGE: sql
CODE:
SELECT username,
    CASE
        WHEN is_active = TRUE AND has_paid_subscription = TRUE THEN 'Active Paid'
        WHEN is_active = TRUE AND has_paid_subscription = FALSE THEN 'Active Free'
        WHEN is_active = FALSE AND has_paid_subscription = TRUE THEN 'Inactive Paid'
        WHEN is_active = FALSE AND has_paid_subscription = FALSE THEN 'Inactive Free'
        ELSE 'Unknown'
    END AS user_status
FROM users;

----------------------------------------

TITLE: Removing a Role from a Group Role in PostgreSQL
DESCRIPTION: This snippet demonstrates how to remove an individual role from a group role using the REVOKE statement.

LANGUAGE: sql
CODE:
REVOKE group_role FROM role;

LANGUAGE: sql
CODE:
REVOKE sales FROM alice;

----------------------------------------

TITLE: Creating and Populating Sample Tables in Neon Database
DESCRIPTION: SQL commands to create Users and Messages tables in a Neon database and insert sample data. This setup provides a foundation for the WunderGraph integration example.

LANGUAGE: sql
CODE:
create table if not exists Users (
 id serial primary key not null,
 email text not null,
 name text not null,
 unique (email)
);

create table if not exists Messages (
id serial primary key not null,
user_id int not null references Users(id),
message text not null
);

insert into Users (email, name) VALUES ('Jens@wundergraph.com','Jens@WunderGraph');
insert into Messages (user_id, message) VALUES ((select id from Users where email = 'Jens@wundergraph.com'),'Hey, welcome to the WunderGraph!');
insert into Messages (user_id, message) VALUES ((select id from Users where email = 'Jens@wundergraph.com'),'This is WunderGraph!');
insert into Messages (user_id, message) VALUES ((select id from Users where email = 'Jens@wundergraph.com'),'WunderGraph!');

alter table Users add column updatedAt timestamptz not null default now();

alter table Users add column lastLogin timestamptz not null default now();

----------------------------------------

TITLE: Using avg() with FILTER Clause
DESCRIPTION: Demonstrates using avg() with a FILTER clause to calculate filtered averages based on specific conditions.

LANGUAGE: sql
CODE:
SELECT
  city,
  avg(temperature) as avg_temperature,
  avg(temperature) FILTER (WHERE date >= '2024-03-03') AS avg_temperature_since_3rd
FROM weather_data
GROUP BY city;

----------------------------------------

TITLE: PL/pgSQL IF-THEN Statement Example
DESCRIPTION: Uses an IF statement to check if a query returns any rows and raises a notice if no film is found.

LANGUAGE: sql
CODE:
do $$
declare
  selected_film film%rowtype;
  input_film_id film.film_id%type = 0;
begin

  select * from film
  into selected_film
  where film_id = input_film_id;

  if not found then
     raise notice'The film % could not be found',
	    input_film_id;
  end if;
end $$;

----------------------------------------

TITLE: Creating Student Scores Table
DESCRIPTION: SQL command to create a table for storing student scores with columns for ID, name, subject, and score values.

LANGUAGE: sql
CODE:
CREATE TABLE student_scores (
  id SERIAL PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  subject VARCHAR(50) NOT NULL,
  score INTEGER NOT NULL
);

----------------------------------------

TITLE: Aggregating Array Elements in PostgreSQL
DESCRIPTION: This SQL query demonstrates how to use UNNEST and SUM to calculate the total sum of elements in a multidimensional array column.

LANGUAGE: sql
CODE:
WITH table_units AS (
  SELECT name, unnest(units_sold) AS total_units_sold
  FROM products
)
SELECT name, sum(total_units_sold)
FROM table_units
GROUP BY name;

----------------------------------------

TITLE: Using ANY Operator with Equality Comparison
DESCRIPTION: Example showing how to find employees with salaries matching any manager's salary using the ANY operator with equality comparison.

LANGUAGE: sql
CODE:
SELECT
  *
FROM
  employees
WHERE
  salary = ANY (
    SELECT
      salary
    FROM
      managers
  );

----------------------------------------

TITLE: Histogram Generation with WIDTH_BUCKET
DESCRIPTION: Uses CTE to generate bucket numbers and calculate frequency distribution of films.

LANGUAGE: sql
CODE:
WITH buckets_cte AS (
    SELECT WIDTH_BUCKET(length, 40, 200, 6) AS bucket_number
    FROM film
)
SELECT
    bucket_number,
    COUNT(*) AS frequency
FROM
    buckets_cte
GROUP BY
    bucket_number
ORDER BY
    bucket_number;

----------------------------------------

TITLE: Creating Index on XML Data
DESCRIPTION: Creates a B-tree index on XML data using expression indexing for improved query performance.

LANGUAGE: sql
CODE:
CREATE INDEX person_name
ON person USING BTREE
    (cast(xpath('/person/name', info) as text[])) ;

----------------------------------------

TITLE: Deleting Books from Neon Database using C# and Npgsql
DESCRIPTION: This C# code snippet demonstrates how to delete a book from the database using a parameterized DELETE statement with Npgsql.

LANGUAGE: C#
CODE:
using(var conn = new NpgsqlConnection(connString))
{
    Console.Out.WriteLine("Opening connection");
    conn.Open();

    using(var command = new NpgsqlCommand("DELETE FROM books WHERE id = @id", conn))
    {
        command.Parameters.AddWithValue("id", 2);
        int nRows = command.ExecuteNonQuery();
        Console.Out.WriteLine($ "Number of books deleted={nRows}");
    }
}

----------------------------------------

TITLE: Converting Text to JSONB with to_jsonb() Function
DESCRIPTION: Shows how to use the to_jsonb() function to convert a text string into a JSONB value and verify the result type.

LANGUAGE: sql
CODE:
SELECT to_jsonb('Hello'::text);

LANGUAGE: sql
CODE:
SELECT
  JSONB_TYPEOF(
    to_jsonb('Hello' :: text)
  );

----------------------------------------

TITLE: Installing Neon CLI on macOS
DESCRIPTION: Commands for installing the Neon CLI on macOS using different package managers and direct binary download.

LANGUAGE: bash
CODE:
brew install neonctl

LANGUAGE: shell
CODE:
npm i -g neonctl

LANGUAGE: bash
CODE:
bun install -g neonctl

LANGUAGE: bash
CODE:
curl -sL https://github.com/neondatabase/neonctl/releases/latest/download/neonctl-macos -o neonctl

----------------------------------------

TITLE: Implementing Database Transactions with Events in Laravel
DESCRIPTION: Updated PHP code for OrderController and SendOrderConfirmation listener to handle database transactions correctly with events.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers;

use App\Models\Order;
use App\Events\OrderPlaced;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class OrderController extends Controller
{
    public function store(Request $request)
    {
        $order = DB::transaction(function () use ($request) {
            $order = Order::create([
                'customer_name' => $request->customer_name,
                'total' => $request->total,
            ]);

            event(new OrderPlaced($order));

            return $order;
        });

        return response()->json(['message' => 'Order placed successfully', 'order' => $order]);
    }
}

LANGUAGE: php
CODE:
<?php

namespace App\Listeners;

use App\Events\OrderPlaced;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Contracts\Events\ShouldHandleEventsAfterCommit;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Support\Facades\Log;

class SendOrderConfirmation implements ShouldQueue, ShouldHandleEventsAfterCommit
{
    use InteractsWithQueue;

    public function handle(OrderPlaced $event)
    {
        // In a real application, you would send an email here
        Log::info('Order confirmation sent for Order #' . $event->order->id);
    }
}

----------------------------------------

TITLE: Basic POWER() Function Syntax
DESCRIPTION: Demonstrates the basic syntax of the PostgreSQL POWER() function with base and exponent parameters.

LANGUAGE: sql
CODE:
POWER(base, exponent)

----------------------------------------

TITLE: Conditional AFTER UPDATE Trigger
DESCRIPTION: Implements a trigger that updates customer statistics only when an order status changes to 'completed'.

LANGUAGE: plpgsql
CODE:
CREATE OR REPLACE FUNCTION update_customer_stats()
RETURNS TRIGGER
AS
$$
BEGIN
    IF NEW.status = 'completed' THEN
        -- Update the total_spent for the customer
        UPDATE customer_stats
        SET total_spent = total_spent + NEW.total_amount
        WHERE customer_id = NEW.customer_id;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_customer_stats_trigger
AFTER UPDATE ON orders
FOR EACH ROW
WHEN (OLD.status <> 'completed' AND NEW.status = 'completed')
EXECUTE FUNCTION update_customer_stats();

----------------------------------------

TITLE: Calculating LCM of Three Numbers in PostgreSQL
DESCRIPTION: Shows how to use nested lcm() functions to find the LCM of three numbers (12, 18, and 24).

LANGUAGE: sql
CODE:
SELECT lcm(lcm(12,18),24) result

----------------------------------------

TITLE: Adding an Identity Column to an Existing Table
DESCRIPTION: This example demonstrates how to add an identity column to an existing table using the ALTER TABLE statement.

LANGUAGE: sql
CODE:
CREATE TABLE shape (
    shape_id INT NOT NULL,
    shape_name VARCHAR NOT NULL
);

ALTER TABLE shape
ALTER COLUMN shape_id ADD GENERATED ALWAYS AS IDENTITY;

----------------------------------------

TITLE: Accessing Multidimensional Array Elements in PostgreSQL
DESCRIPTION: This SQL query shows how to access elements in a specific position of a multidimensional array column.

LANGUAGE: sql
CODE:
SELECT name, units_sold[1][4] AS units_sold_last_quarter
FROM products;

----------------------------------------

TITLE: Creating a 'books_to_read' Table in SQL
DESCRIPTION: SQL commands to create a 'books_to_read' table and insert sample data into it. This sets up the database structure for the example application.

LANGUAGE: sql
CODE:
CREATE TABLE books_to_read (
    id SERIAL PRIMARY KEY,
    title TEXT,
    author TEXT
);

LANGUAGE: sql
CODE:
INSERT INTO books_to_read (title, author)
VALUES
    ('The Way of Kings', 'Brandon Sanderson'),
    ('The Name of the Wind', 'Patrick Rothfuss'),
    ('Coders at Work', 'Peter Seibel'),
    ('1984', 'George Orwell');

----------------------------------------

TITLE: Basic SELECT Query Without Index
DESCRIPTION: Shows a simple SELECT query that would require a full table scan without an index.

LANGUAGE: sql
CODE:
SELECT * FROM contacts
WHERE name = 'John Doe';

----------------------------------------

TITLE: Handling Partial JSON Data with json_to_record()
DESCRIPTION: Shows how json_to_record() handles JSON objects with missing keys, producing NULL values for unmatched columns in the resulting record.

LANGUAGE: sql
CODE:
INSERT INTO employees
SELECT *
FROM json_to_record('{
  "id": "124",
  "name": "Jane Smith"
}') AS x(id INT, name TEXT, department TEXT, salary NUMERIC)
RETURNING *;

----------------------------------------

TITLE: Restoring a Soft-Deleted Record in Laravel
DESCRIPTION: This code shows how to restore a soft-deleted record using Laravel's Eloquent ORM.

LANGUAGE: php
CODE:
$post = Post::withTrashed()->find(1);
$post->restore();

----------------------------------------

TITLE: Defining Laravel Eloquent Model
DESCRIPTION: Example of creating and defining a Book model using Laravel's Eloquent ORM, including model generation command and class definition.

LANGUAGE: bash
CODE:
php artisan make:model Book

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Book extends Model
{
    protected $fillable = ['title', 'author', 'publication_year'];
}

----------------------------------------

TITLE: Calculating Raw PostgreSQL Uptime
DESCRIPTION: SQL query to calculate the raw PostgreSQL uptime without truncating microseconds.

LANGUAGE: SQL
CODE:
SELECT current_timestamp - pg_postmaster_start_time() uptime;

----------------------------------------

TITLE: Inserting JSON Data from Multiple Tables
DESCRIPTION: Demonstrates inserting complex JSON data into the JSONB column by combining information from multiple related tables.

LANGUAGE: sql
CODE:
WITH json_cte AS(
  SELECT
    jsonb_build_object(
      'first_name',  first_name,
      'last_name',  last_name,
      'email',  email,
      'phone',  a.phone,
      'address',
      jsonb_build_object(
        'address', a.address,
        'city', i.city,
        'postal_code', a.postal_code,
        'district',  a.district,
        'country', o.country
      )
    ):: jsonb AS data
  FROM
    customer c
    INNER JOIN address a ON a.address_id = c.address_id
    INNER JOIN city i ON i.city_id = a.city_id
    INNER JOIN country o ON o.country_id = i.country_id
)
INSERT INTO customer_json(data)
SELECT
  data
FROM
  json_cte;

----------------------------------------

TITLE: Importing CSV Using PostgreSQL COPY Command
DESCRIPTION: Demonstrates how to use the COPY command to import data from a CSV file into the persons table. The command specifies the column order, file path, delimiter, and handles the CSV header.

LANGUAGE: sql
CODE:
COPY persons(first_name, last_name, dob, email)
FROM 'C:\sampledb\persons.csv'
DELIMITER ','
CSV HEADER;

----------------------------------------

TITLE: Creating DVD Rental Database
DESCRIPTION: SQL command to create a new database named dvdrental in PostgreSQL

LANGUAGE: php
CODE:
CREATE DATABASE dvdrental;

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Example of setting up PostgreSQL connection environment variables for Neon.

LANGUAGE: ini
CODE:
# .env example
PGHOST=hostname
PGDATABASE=database
PGUSER=username
PGPASSWORD=password
PGPORT=5432

----------------------------------------

TITLE: Querying Archived Employee Data
DESCRIPTION: Retrieves data from the employee_archives table to verify the AFTER DELETE trigger's operation.

LANGUAGE: sql
CODE:
SELECT * FROM employee_archives;

----------------------------------------

TITLE: Creating Replication Slots with Different Decoders
DESCRIPTION: SQL commands to create logical replication slots using either pgoutput or wal2json decoders.

LANGUAGE: sql
CODE:
SELECT pg_create_logical_replication_slot('my_replication_slot', 'pgoutput');

LANGUAGE: sql
CODE:
SELECT pg_create_logical_replication_slot('my_replication_slot', 'wal2json');

----------------------------------------

TITLE: Creating Sample Tables for CROSS JOIN Demo
DESCRIPTION: Creates two sample tables T1 and T2 and populates them with data to demonstrate CROSS JOIN functionality.

LANGUAGE: sql
CODE:
DROP TABLE IF EXISTS T1;

CREATE TABLE
  T1 (LABEL CHAR(1) PRIMARY KEY);

DROP TABLE IF EXISTS T2;

CREATE TABLE
  T2 (score INT PRIMARY KEY);

INSERT INTO
  T1 (LABEL)
VALUES
  ('A'),
  ('B');

INSERT INTO
  T2 (score)
VALUES
  (1),
  (2),
  (3);

----------------------------------------

TITLE: Listing Materialized View Names
DESCRIPTION: SQL query to retrieve only the names of materialized views, ordered alphabetically.

LANGUAGE: sql
CODE:
SELECT
  matviewname AS materialized_view_name
FROM
  pg_matviews
ORDER BY
  materialized_view_name;

----------------------------------------

TITLE: Listing Branches with State Information using Neon CLI
DESCRIPTION: Example of using the Neon CLI 'branches list' command to display branch information including the new Current State field, which shows branch states like init, ready, and archived.

LANGUAGE: bash
CODE:
neon branches list --project-id green-hat-46829796
┌───────────────────────────┬──────┬─────────┬───────────────┬──────────────────────┐
│ Id                        │ Name │ Default │ Current State │ Created At           │
├───────────────────────────┼──────┼─────────┼───────────────┼──────────────────────┤
│ br-muddy-firefly-a7kzf0d4 │ main │ true    │ ready         │ 2024-10-30T14:59:57Z │
└───────────────────────────┴──────┴─────────┴───────────────┴──────────────────────┘

----------------------------------------

TITLE: Creating Astro Project
DESCRIPTION: Commands to scaffold a new Astro project and install required dependencies.

LANGUAGE: bash
CODE:
npm create astro@latest blog-ui
cd blog-ui
npm run dev
npm install dotenv marked @tailwindcss/typography
npm install -D @types/node

----------------------------------------

TITLE: Creating Custom JWTs with Claims in TypeScript
DESCRIPTION: This snippet demonstrates how to create custom JWTs with specific claims using the 'jose' library. It includes setting custom claims, protected header, subject, expiration time, and signing the JWT with a private key.

LANGUAGE: typescript
CODE:
import { SignJWT } from 'jose';

async function createJWT(userId: string, tenantId: string) {
  const privateKey = JSON.parse(c.env.PRIVATE_KEY);

  const jwt = await new SignJWT({
    tenant_id: tenantId,
  })
    .setProtectedHeader({ alg: 'RS256', kid: 'my-key-id' })
    .setSubject(userId)
    .setExpirationTime('1h')
    .setIssuedAt()
    .sign(privateKey);

  return jwt;
}

const token = await createJWT('user-123', 'tenant-456');
console.log('JWT:', token);

----------------------------------------

TITLE: Creating JSON Object from Separate Key-Value Arrays
DESCRIPTION: Illustrates creating a JSON object using separate arrays for keys and values.

LANGUAGE: sql
CODE:
SELECT
  jsonb_object(
    '{"name","age"}', '{"John", 22}'
  );

----------------------------------------

TITLE: Querying UUID Records in PostgreSQL
DESCRIPTION: Shows how to query specific records using UUID values as filter criteria.

LANGUAGE: sql
CODE:
SELECT *
FROM sessions
WHERE session_id = 'e817b187-aba3-4b0d-a34e-a1d82319627c';

----------------------------------------

TITLE: Creating and Configuring Roles in PostgreSQL
DESCRIPTION: Illustrates the process of creating roles, granting privileges, and establishing role memberships in PostgreSQL.

LANGUAGE: SQL
CODE:
CREATE ROLE marketing;

GRANT SELECT ON film TO marketing;

CREATE ROLE lily
WITH LOGIN PASSWORD 'SecurePass1'
IN ROLE marketing;

----------------------------------------

TITLE: Creating a GraphQL Operation to Query Neon Database
DESCRIPTION: GraphQL query to fetch user data from the Neon database through WunderGraph. This operation is used to expose the database data via JSON-RPC.

LANGUAGE: graphql
CODE:
{
  neon_findFirstusers {
    id
    name
    email
  }
}

----------------------------------------

TITLE: Displaying Neon Database Connection String
DESCRIPTION: Shows the structure of a Neon database connection string, highlighting the role, hostname, and database name components.

LANGUAGE: text
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname
             ^              ^                                               ^
             |- <role>      |- <hostname>                                   |- <database>

----------------------------------------

TITLE: Setting Up Materialize Ingestion
DESCRIPTION: SQL commands for creating clusters, secrets, connections, and sources in Materialize.

LANGUAGE: sql
CODE:
CREATE CLUSTER ingest_postgres SIZE = 'medium';
CREATE SECRET pgpass AS '<PASSWORD>';
CREATE CONNECTION pg_connection TO POSTGRES (
HOST '<host>',
PORT 5432,
USER '<role_name>',
PASSWORD SECRET pgpass,
SSL MODE 'require',
DATABASE '<database>'
);
CREATE SOURCE mz_source
IN CLUSTER ingest_postgres
FROM POSTGRES CONNECTION pg_connection (PUBLICATION 'mz_source')
FOR TABLES <table1>, <table2>;

----------------------------------------

TITLE: Basic PHP PDO Transaction Pattern
DESCRIPTION: Demonstrates the basic structure of a PDO transaction with error handling and rollback capabilities.

LANGUAGE: php
CODE:
<?php

try {
    $pdo->beginTransaction();

    $pdo->query("SELECT * FROM table");

    $stmt = $pdo->prepare("UPDATE QUERY");
    $stmt->execute();

    $stmt = $pdo->prepare("ANOTHER UPDATE QUERY");
    $stmt->execute();

    $db->commit();
} catch (\PDOException $e) {
    $db->rollBack();
    throw $e;
}

----------------------------------------

TITLE: Database Configuration for Neon
DESCRIPTION: Environment configuration for connecting to Neon Postgres database

LANGUAGE: env
CODE:
DB_CONNECTION=pgsql
DB_HOST=your-neon-hostname.neon.tech
DB_PORT=5432
DB_DATABASE=your_database_name
DB_USERNAME=your_username
DB_PASSWORD=your_password

----------------------------------------

TITLE: Converting with Named Time Zones
DESCRIPTION: Converting a timestamp using a named time zone (America/New_York) with the AT TIME ZONE operator.

LANGUAGE: sql
CODE:
SELECT TIMESTAMP '2024-03-21 10:00:00' AT TIME ZONE 'America/New_York';

----------------------------------------

TITLE: PostgreSQL BETWEEN with Date Range
DESCRIPTION: Query showing how to use BETWEEN with date ranges in ISO 8601 format (YYYY-MM-DD), combined with additional conditions.

LANGUAGE: sql
CODE:
SELECT
  payment_id,
  amount,
  payment_date
FROM
  payment
WHERE
  payment_date BETWEEN '2007-02-15' AND '2007-02-20'
  AND amount > 10
ORDER BY
  payment_date;

----------------------------------------

TITLE: Configuring Neon Connection String
DESCRIPTION: Example of storing the Neon database connection string in a .env file.

LANGUAGE: shell
CODE:
DATABASE_URL="postgresql://<user>:<password>@<endpoint_hostname>.neon.tech:<port>/<dbname>?sslmode=require"

----------------------------------------

TITLE: Creating GiST Index for Geospatial Data in Postgres
DESCRIPTION: This SQL command creates a GiST (Generalized Search Tree) index on the 'geom' column of the 'locations' table. GiST indexes are used for efficient geospatial lookups in large datasets when using PostGIS in Postgres.

LANGUAGE: sql
CODE:
CREATE INDEX locations_gist ON locations USING GIST(geom);

----------------------------------------

TITLE: Basic MOD() Function Syntax in PostgreSQL
DESCRIPTION: The basic syntax of the PostgreSQL MOD() function, which takes a dividend and divisor as arguments.

LANGUAGE: css
CODE:
MOD(dividend,divisor)

----------------------------------------

TITLE: Filtering Remote Query Results
DESCRIPTION: Retrieves table names from a remote database that start with 'user' using a named dblink connection.

LANGUAGE: sql
CODE:
SELECT rt.table_name
FROM dblink('my_remote_db', 'SELECT table_name FROM information_schema.tables WHERE table_schema = ''public''')
AS rt(table_name TEXT)
WHERE rt.table_name LIKE 'user%';

----------------------------------------

TITLE: CREATE SCHEMA with Objects
DESCRIPTION: Creates a schema along with its objects like tables and views in a single statement. Note that subcommands don't end with semicolons.

LANGUAGE: sql
CODE:
CREATE SCHEMA schema_name
    CREATE TABLE table_name1 (...)
    CREATE TABLE table_name2 (...)
    CREATE VIEW view_name1
        SELECT select_list FROM table_name1;

----------------------------------------

TITLE: Creating Film Rating Summary Table
DESCRIPTION: Example of creating a summary table with explicit column names

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS film_rating (rating, film_count)
AS
SELECT
    rating,
    COUNT (film_id)
FROM
    film
GROUP BY
    rating;

----------------------------------------

TITLE: Reverse Iteration with PL/pgSQL For Loop
DESCRIPTION: This example shows how to use a PL/pgSQL for loop to iterate over numbers in reverse order, from 5 to 1, displaying each number in the iteration.

LANGUAGE: sql
CODE:
do $$
begin
   for counter in reverse 5..1 loop
      raise notice 'counter: %', counter;
   end loop;
end; $$

----------------------------------------

TITLE: Retrieving Enum Metadata
DESCRIPTION: Shows how to retrieve enum value lists and get first/last values using built-in functions.

LANGUAGE: sql
CODE:
SELECT enum_range(null::priority);

LANGUAGE: sql
CODE:
SELECT
  enum_first(NULL::priority) first_value,
  enum_last(NULL::priority)  last_value;

----------------------------------------

TITLE: Database Connection Implementation
DESCRIPTION: Java class implementing the database connection logic using JDBC DriverManager

LANGUAGE: java
CODE:
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;


public class DB {
    public static Connection connect() throws SQLException {

        try {
            // Get database credentials from DatabaseConfig class
            var jdbcUrl = DatabaseConfig.getDbUrl();
            var user = DatabaseConfig.getDbUsername();
            var password = DatabaseConfig.getDbPassword();

            // Open a connection
            return DriverManager.getConnection(jdbcUrl, user, password);

        } catch (SQLException  e) {
            System.err.println(e.getMessage());
            return null;
        }
    }
}

----------------------------------------

TITLE: Assigning VPC Endpoint with Neon CLI
DESCRIPTION: Command to assign a VPC endpoint ID to a Neon organization in a specific AWS region using the Neon CLI.

LANGUAGE: bash
CODE:
neon vpc endpoint assign vpce-1234567890abcdef0 --org-id org-bold-bonus-12345678 --region-id aws-us-east-2

----------------------------------------

TITLE: Starting Docker Compose Services
DESCRIPTION: Command to start the Docker Compose services for local Postgres and WebSocket proxy.

LANGUAGE: shell
CODE:
docker-compose up -d

----------------------------------------

TITLE: Creating Horror Film View
DESCRIPTION: Creates a view filtering horror films from the film_info view.

LANGUAGE: sql
CODE:
CREATE VIEW horror_film AS
SELECT
  film_id,
  title,
  release_year,
  length
FROM
  film_info
WHERE
  category = 'Horror';

----------------------------------------

TITLE: Configuring API Keys in .env
DESCRIPTION: Environment variable configuration for API keys required by OpenAI, Neon, Firecrawl, and AgentOps.

LANGUAGE: env
CODE:
OPENAI_API_KEY=YOUR_OPENAI_API_KEY
NEON_API_KEY=YOUR_NEON_API_KEY
FIRECRAWL_API_KEY=YOUR_FIRECRAWL_API_KEY
AGENTOPS_API_KEY=YOUR_AGENTOPS_API_KEY

----------------------------------------

TITLE: Using PostgreSQL REPLACE() Function to Update Table Data
DESCRIPTION: Updates the 'url' column in the 'posts' table, replacing 'http' with 'https' using the REPLACE() function.

LANGUAGE: SQL
CODE:
UPDATE posts
SET url = REPLACE(url, 'http','https');

----------------------------------------

TITLE: Creating Nested JSON Objects with jsonb_object() and jsonb_build_object() in PostgreSQL
DESCRIPTION: Shows an advanced example of using jsonb_object() in combination with jsonb_build_object() to create nested JSONB structures from the book_inventory table.

LANGUAGE: sql
CODE:
SELECT jsonb_build_object(
  'title', title,
  'author', jsonb_object(ARRAY['name', 'genre'], ARRAY[author, genre])
) AS book_info
FROM book_inventory;

----------------------------------------

TITLE: Creating Users Table Schema in SQL
DESCRIPTION: This SQL snippet defines the schema for the 'users' table, including columns for user details and timestamps.

LANGUAGE: sql
CODE:
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(150) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

----------------------------------------

TITLE: Alternative CASE Expression Approach
DESCRIPTION: Shows an alternative way to handle null values using CASE expression instead of COALESCE.

LANGUAGE: sql
CODE:
SELECT
  product,
  (price - CASE WHEN discount IS NULL THEN 0 ELSE discount END) AS net_price
FROM
  items;

----------------------------------------

TITLE: Demonstrating Error When Adding Table to FOR ALL TABLES Publication in SQL
DESCRIPTION: This SQL snippet shows the error that occurs when attempting to add a table to a publication defined with FOR ALL TABLES. It illustrates why using FOR ALL TABLES should be avoided if you plan to modify the publication later.

LANGUAGE: sql
CODE:
ALTER PUBLICATION test_publication ADD TABLE users;
ERROR:  publication "my_publication" is defined as FOR ALL TABLES
DETAIL:  Tables cannot be added to or dropped from FOR ALL TABLES publications.

ALTER PUBLICATION test_publication DROP TABLE products;
ERROR:  publication "my_publication" is defined as FOR ALL TABLES
DETAIL:  Tables cannot be added to or dropped from FOR ALL TABLES publications.

----------------------------------------

TITLE: Pgloader Configuration File
DESCRIPTION: Example configuration file for pgloader showing source and destination database connection strings.

LANGUAGE: plaintext
CODE:
LOAD DATABASE
     FROM mssql://migration_user:password@host:port/AdventureWorks
     INTO postgresql://alex:endpoint=ep-cool-darkness-123456;AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require

----------------------------------------

TITLE: Enabling PostGIS SFCGAL Extension in Neon
DESCRIPTION: SQL command to enable the PostGIS SFCGAL extension in a Neon database. This extension provides advanced 2D and 3D spatial operations.

LANGUAGE: SQL
CODE:
CREATE EXTENSION IF NOT EXISTS postgis_sfcgal CASCADE;

----------------------------------------

TITLE: Creating a BEFORE TRUNCATE Trigger in PostgreSQL
DESCRIPTION: Creates a BEFORE TRUNCATE trigger on a specific table and associates it with a previously defined trigger function. This trigger will fire for each TRUNCATE statement on the specified table.

LANGUAGE: SQL
CODE:
CREATE TRIGGER trigger_name
BEFORE TRUNCATE ON table_name
FOR EACH STATEMENT
EXECUTE FUNCTION trigger_function_name();

----------------------------------------

TITLE: Closing a PL/pgSQL Cursor
DESCRIPTION: Syntax for closing a cursor to release resources.

LANGUAGE: sql
CODE:
CLOSE cursor_name;

----------------------------------------

TITLE: Configuring Neon MCP Server in Cline (MacOS/Linux)
DESCRIPTION: JSON configuration for setting up Neon MCP Server in Cline on MacOS/Linux. It specifies the command and arguments needed to start the Neon MCP server using npx.

LANGUAGE: json
CODE:
{
  "mcpServers": {
    "neon": {
      "command": "npx",
      "args": ["-y", "@neondatabase/mcp-server-neon", "start", "<YOUR_NEON_API_KEY>"]
    }
  }
}

----------------------------------------

TITLE: Basic RANK Function Usage
DESCRIPTION: Demonstrates basic usage of RANK() function to assign ranks based on column values.

LANGUAGE: sql
CODE:
SELECT
	c,
	RANK () OVER (
		ORDER BY c
	) rank_number
FROM
	ranks;

----------------------------------------

TITLE: Inserting Sample Data for BOOL_OR() Examples in PostgreSQL
DESCRIPTION: Inserts sample data into the 'teams' and 'members' tables to be used in subsequent BOOL_OR() function examples. The data includes various combinations of active and inactive members across different teams.

LANGUAGE: sql
CODE:
INSERT INTO teams (team_name)
VALUES
('Team A'),
('Team B'),
('Team C')
RETURNING *;

INSERT INTO members (member_name, team_id, active)
VALUES
('Alice', 1, true),
('Bob', 2, true),
('Charlie', 1, null),
('David', 2, false),
('Peter', 3, false),
('Joe', 3, null)
RETURNING *;

----------------------------------------

TITLE: Database Schema Setup with Neon Postgres
DESCRIPTION: TypeScript code to set up the database schema including tables for nodes and outbox, plus triggers for notifications.

LANGUAGE: typescript
CODE:
// File: schema.tsx

import 'dotenv/config';
import { WebSocket } from 'ws';
import { neon, neonConfig } from '@neondatabase/serverless';

neonConfig.webSocketConstructor = WebSocket;
neonConfig.poolQueryViaFetch = true;

async function prepare() {
  if (!process.env.DATABASE_URL) throw new Error('DATABASE_URL environment variable not found.');
  const sql = neon(process.env.DATABASE_URL);
  await Promise.all([
    sql`CREATE TABLE IF NOT EXISTS nodes (id TEXT PRIMARY KEY, expiry TIMESTAMP WITHOUT TIME ZONE NOT NULL);`,
    sql`CREATE TABLE IF NOT EXISTS outbox (sequence_id  serial PRIMARY KEY, mutation_id  TEXT NOT NULL, channel TEXT NOT NULL, name TEXT NOT NULL, rejected boolean NOT NULL DEFAULT false, data JSONB, headers JSONB, locked_by TEXT, lock_expiry TIMESTAMP WITHOUT TIME ZONE, processed BOOLEAN NOT NULL DEFAULT false);`,
  ]);
  await sql`CREATE OR REPLACE FUNCTION public.outbox_notify() RETURNS trigger AS $$ BEGIN PERFORM pg_notify('ably_adbc'::text, ''::text); RETURN NULL; EXCEPTION WHEN others THEN RAISE WARNING 'unexpected error in %s: %%', SQLERRM; RETURN NULL; END; $$ LANGUAGE plpgsql;`;
  await sql`CREATE OR REPLACE TRIGGER public_outbox_trigger AFTER INSERT ON public.outbox FOR EACH STATEMENT EXECUTE PROCEDURE public.outbox_notify();`;
  console.log('Database schema set up succesfully.');
}

prepare();

----------------------------------------

TITLE: Implementing Azure AI Search Service
DESCRIPTION: JavaScript code for the Azure AI Search service, handling AI-powered search features.

LANGUAGE: javascript
CODE:
const { SearchClient, AzureKeyCredential } = require('@azure/search-documents');
require('dotenv').config();

class AzureSearchService {
  constructor() {
    this.client = new SearchClient(
      process.env.AZURE_SEARCH_ENDPOINT,
      'developer-index',
      new AzureKeyCredential(process.env.AZURE_SEARCH_KEY)
    );
  }

  async search(searchQuery, filters = {}, limit = 10) {
    try {
      const searchOptions = {
        select: ['id', 'title', 'description', 'content', 'tags', 'type'],
        queryType: 'simple',
        semanticConfiguration: 'default',
        highlightFields: 'content',
        top: limit,
        includeTotalCount: true,
        captions: 'extractive',
        answers: 'extractive',
        filter: this.buildFilter(filters),
      };

      const searchResults = await this.client.search(searchQuery, searchOptions);
      return this.processResults(searchResults);
    } catch (error) {
      console.error('Azure search error:', error);
      throw error;
    }
  }

  buildFilter(filters) {
    const filterConditions = [];

    if (filters.difficulty) {
      filterConditions.push(`difficulty eq '${filters.difficulty}'`);
    }

    if (filters.type) {
      filterConditions.push(`type eq '${filters.type}'`);
    }

    if (filters.tags && filters.tags.length > 0) {
      const tagConditions = filters.tags.map((tag) => `tags/any(t: t eq '${tag}')`).join(' or ');
      filterConditions.push(`(${tagConditions})`);
    }

    return filterConditions.length > 0 ? filterConditions.join(' and ') : undefined;
  }

  async processResults(searchResults) {
    const results = [];
    for await (const result of searchResults.results) {
      results.push({
        id: result.document.id,
        title: result.document.title,
        description: result.document.description,
        content: result.document.content,
        tags: result.document.tags,
        highlights: result.highlights,
        captions: result.captions,
        score: result.score,
      });
    }
    return results;
  }
}

module.exports = new AzureSearchService();

----------------------------------------

TITLE: Using Custom Domain in Table Creation
DESCRIPTION: Creates a mailing list table using the custom contact_name domain for first and last name fields.

LANGUAGE: sql
CODE:
CREATE TABLE mailing_list (
    id serial PRIMARY KEY,
    first_name contact_name,
    last_name contact_name,
    email VARCHAR NOT NULL
);

----------------------------------------

TITLE: Inserting Data with CURRENT_TIMESTAMP Default
DESCRIPTION: Demonstrates inserting a row where the timestamp column automatically uses CURRENT_TIMESTAMP value.

LANGUAGE: sql
CODE:
INSERT INTO note(message)
VALUES('Testing current_timestamp function');

----------------------------------------

TITLE: Calculating Compute Hours Usage in Neon
DESCRIPTION: Formula demonstrating how compute hours are calculated based on compute size and active hours. Used to understand resource consumption across all Neon plans.

LANGUAGE: text
CODE:
compute hours = compute size * active hours

----------------------------------------

TITLE: Setting Check Option for a View in PostgreSQL
DESCRIPTION: Example of changing the check option of the film_rating view to local.

LANGUAGE: sql
CODE:
ALTER VIEW film_rating
SET (check_option = local);

----------------------------------------

TITLE: Generating and Applying Alembic Migrations
DESCRIPTION: Commands to generate an initial Alembic migration and apply it to the database. This creates the necessary tables in the Neon Postgres database.

LANGUAGE: bash
CODE:
alembic revision --autogenerate -m "init-setup"
alembic upgrade head

----------------------------------------

TITLE: Enabling pg_partman extension in Neon Postgres
DESCRIPTION: SQL commands to create a schema and enable the pg_partman extension in a Neon Postgres project.

LANGUAGE: sql
CODE:
CREATE SCHEMA partman;
CREATE EXTENSION pg_partman SCHEMA partman;

----------------------------------------

TITLE: Retrieving Neon Project Details
DESCRIPTION: Retrieves and displays details of a specific Neon project using its project ID.

LANGUAGE: bash
CODE:
neon projects get <id> [options]

----------------------------------------

TITLE: Querying Active Replication Connections in PostgreSQL
DESCRIPTION: SQL query to check for active walsender processes on a Neon Postgres instance to determine subscriber connections.

LANGUAGE: sql
CODE:
SELECT *
FROM pg_stat_replication
WHERE application_name != 'walproposer';

----------------------------------------

TITLE: Querying Schema Diff API in Bash
DESCRIPTION: This snippet demonstrates how to use curl to make a GET request to the new Neon Schema Diff API endpoint. It compares database schemas between Neon branches, requiring project ID, branch ID, base branch ID, and database name as parameters.

LANGUAGE: bash
CODE:
curl --request GET \
     --url 'https://console.neon.tech/api/v2/projects/{project_id}/branches/{branch_id}/compare_schema?base_branch_id={base_branch_id}&db_name={db_name}' \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $NEON_API_KEY'

----------------------------------------

TITLE: Column Alias with AS Keyword
DESCRIPTION: Example of renaming the last_name column to surname using AS keyword.

LANGUAGE: sql
CODE:
SELECT
   first_name,
   last_name AS surname
FROM customer;

----------------------------------------

TITLE: Listing roles with Neon CLI
DESCRIPTION: Usage and example of the 'list' subcommand to display roles in a Neon project. It supports options for specifying context, project, and branch.

LANGUAGE: bash
CODE:
neon roles list [options]

LANGUAGE: bash
CODE:
neon roles list

LANGUAGE: bash
CODE:
neon roles list --output json

----------------------------------------

TITLE: Querying and Changing Current Role in PostgreSQL
DESCRIPTION: Demonstrates how to check the current role, switch to a different role using SET ROLE, and reset the role to the original one.

LANGUAGE: SQL
CODE:
SELECT current_role;

SET ROLE marketing;

SELECT current_role;

SET ROLE postgres;

RESET ROLE;

SELECT current_role;

----------------------------------------

TITLE: GitHub Action for Creating Neon Branch
DESCRIPTION: GitHub Actions workflow configuration to create a new Neon database branch when a pull request is opened.

LANGUAGE: yaml
CODE:
name: Create Neon Branch

on:
  pull_request:
    types: [opened, reopened]

jobs:
  create-branch:
    runs-on: ubuntu-latest
    steps:
      - uses: neondatabase/create-branch-action@v5
        with:
          project_id: your-neon-project-id
          branch_name: pr-${{ github.event.pull_request.number }}
          username: your-database-username
          api_key: ${{ secrets.NEON_API_KEY }}
        id: create-branch
      - run: echo ${{ steps.create-branch.outputs.db_url }}
      - run: echo ${{ steps.create-branch.outputs.branch_id }}

----------------------------------------

TITLE: Adding Soft Deletes to Existing Table in Laravel Migration
DESCRIPTION: This code snippet shows how to add the deleted_at column to an existing posts table in a Laravel migration.

LANGUAGE: php
CODE:
public function up(): void
{
    Schema::table('posts', function (Blueprint $table) {
        $table->softDeletes();
    });
}

----------------------------------------

TITLE: Variable Scoping in Blocks and Subblocks
DESCRIPTION: Shows how variables with the same name in different blocks are scoped and accessed using block labels.

LANGUAGE: plpgsql
CODE:
do
$$
<<outer_block>>
declare
  counter integer := 0;
begin
   counter := counter + 1;
   raise notice 'The current value of the counter is %', counter;

   declare
       counter integer := 0;
   begin
       counter := counter + 10;
       raise notice 'Counter in the subblock is %', counter;
       raise notice 'Counter in the outer block is %', outer_block.counter;
   end;

   raise notice 'Counter in the outer block is %', counter;

end outer_block $$;

----------------------------------------

TITLE: SvelteKit Page Server Load Function
DESCRIPTION: Implements server-side logic to handle feature flag bucketing and user experience determination. Uses cookies to maintain user state.

LANGUAGE: typescript
CODE:
import { isEnabled } from '$lib/feature_flags/get.server';

export async function load({ cookies }) {
  const bucket = cookies.get('destination_bucket');
  if (!bucket) {
    const tmp = await isEnabled('fast_payments');
    if (tmp) cookies.set('destination_bucket', Math.random() > 0.5 ? '1' : '0', { path: '/' });
    else cookies.set('destination_bucket', '0', { path: '/' });
  }
  const fast_payments = Boolean(Number(cookies.get('destination_bucket')));
  return {
    fast_payments,
  };
}

----------------------------------------

TITLE: Changing Default Tablespace Example in PostgreSQL
DESCRIPTION: This snippet shows how to change the default tablespace of the 'testhrdb' database from 'pg_default' to 'hr_default' using the ALTER DATABASE SET TABLESPACE statement.

LANGUAGE: sql
CODE:
ALTER DATABASE testhrdb
SET TABLESPACE hr_default;

----------------------------------------

TITLE: Creating a Table in Neon Database using C# and Npgsql
DESCRIPTION: This C# code snippet demonstrates how to establish a connection to the Neon database, create a new table for storing books, and execute the SQL command using Npgsql.

LANGUAGE: C#
CODE:
var configuration = new ConfigurationBuilder()
    .SetBasePath(Directory.GetCurrentDirectory())
    .AddJsonFile("appsettings.json")
    .Build();

string connString = configuration.GetConnectionString("DefaultConnection");

using (var conn = new NpgsqlConnection(connString))
{
    Console.Out.WriteLine("Opening connection");
    conn.Open();

    using (var command = new NpgsqlCommand(
        @"DROP TABLE IF EXISTS books;
          CREATE TABLE books (
              id SERIAL PRIMARY KEY,
              title VARCHAR(100) NOT NULL,
              author VARCHAR(100) NOT NULL,
              year_published INTEGER
          )", conn))
    {
        command.ExecuteNonQuery();
        Console.Out.WriteLine("Finished creating table");
    }
}

----------------------------------------

TITLE: Inserting Geospatial Data in Postgres using PostGIS
DESCRIPTION: This SQL command inserts geographic points into the 'locations' table using the ST_GeomFromText function. It demonstrates how to insert the approximate latitude and longitude of New York and San Francisco.

LANGUAGE: sql
CODE:
INSERT INTO locations (name, geom)
VALUES ('New York', ST_GeomFromText('POINT(-74.006 40.7128)', 4326)),
       ('San Francisco', ST_GeomFromText('POINT(-122.4194 37.7749)', 4326));

----------------------------------------

TITLE: Transferring Large Numbers of Projects (Bash)
DESCRIPTION: This Bash script automates the process of transferring large numbers of Neon projects to an organization. It fetches all projects, splits them into batches, and transfers them using the Neon API.

LANGUAGE: bash
CODE:
#!/bin/bash

# Configuration
API_KEY="your_api_key_here"
ORG_ID="your_org_id_here"
TRANSFER_API_URL="https://console.neon.tech/api/v2/users/me/projects/transfer"
PROJECTS_API_URL="https://console.neon.tech/api/v2/projects?limit=400"
HEADERS=(-H "Content-Type: application/json" -H "Authorization: Bearer $API_KEY")

fetch_all_projects() {
  local projects=()
  local cursor=""
  local response=""
  local data=""
  local next_cursor=""

  while true; do
    if [ -n "$cursor" ]; then
      response=$(curl -s "${HEADERS[@]}" "${PROJECTS_API_URL}&cursor=$cursor")
    else
      response=$(curl -s "${HEADERS[@]}" "$PROJECTS_API_URL")
    fi

    if [ $? -ne 0 ]; then
      echo "Failed to fetch projects: $response" >&2
      exit 1
    fi

    data=$(echo "$response" | jq '.projects')
    projects+=($(echo "$data" | jq -r '.[] | .id'))

    if [ ${#projects[@]} -eq 0 ]; then
      break
    fi

    next_cursor=$(echo "$response" | jq -r '.pagination.cursor // ""')

    # Check if we have reached the last cursor
    last_project_id="${projects[${#projects[@]} - 1]]}]"
    if [ -z "$next_cursor" ] || [ "$next_cursor" == "$last_project_id" ]; then
      break
    fi

    cursor=$next_cursor
  done

  echo "${projects[@]}"
}

transfer_projects() {
  local project_ids=("$@")
  local project_ids_json=$(printf '%s\n' "${project_ids[@]}" | jq -R . | jq -s)
  local payload='{"org_id": "'"${ORG_ID}"'", "project_ids": '"${project_ids_json}"'}'

  local response=$(curl -s -o /dev/stderr -w "%{http_code}" -X POST \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $API_KEY" \
    -d "$payload" \
    "$TRANSFER_API_URL")

  local status_code=$(echo "$response" | sed -n '$p')
  local response_body=$(echo "$response" | sed '$d')

  if [ "$status_code" == "200" ]; then
    echo "Successfully transferred projects: ${project_ids[*]}"
  elif [ "$status_code" == "406" ]; then
    echo "Transfer failed due to insufficient organization limits."
  elif [ "$status_code" == "501" ]; then
    echo "Transfer failed because one or more projects have integration linked."
  else
    echo "Transfer failed: $response_body"
  fi
}

main() {
  local all_projects=($(fetch_all_projects))
  echo "Fetched ${#all_projects[@]} projects."

  # Split projects into batches of 400 for transfer
  local batch_size=400
  for ((i = 0; i < ${#all_projects[@]}; i += batch_size)); do
    batch=("${all_projects[@]:i:batch_size}")
    transfer_projects "${batch[@]}"
  done
}

main

----------------------------------------

TITLE: Creating and Populating Books Table with JSON Data
DESCRIPTION: Example showing how to create a table with JSON column and insert sample book data with title, author, and year information.

LANGUAGE: sql
CODE:
CREATE TABLE books (
 id INT,
 info JSON
);

INSERT INTO books (id, info) VALUES
 (1, '{"title": "The Catcher in the Rye", "author": "J.D. Salinger", "year": 1951}'),
 (2, '{"title": "To Kill a Mockingbird", "author": "Harper Lee", "year": 1960}'),
 (3, '{"title": "1984", "author": "George Orwell", "year": 1949}');

----------------------------------------

TITLE: Converting String with Group Separator to Number
DESCRIPTION: Example showing how to convert a formatted string with group separator and negative sign to a numeric value.

LANGUAGE: sql
CODE:
SELECT
    TO_NUMBER(
        '12,345.6-',
        '99G999D9S'
    );

----------------------------------------

TITLE: Invalid String Input Example
DESCRIPTION: Example demonstrating error handling when attempting to calculate natural logarithm of an invalid string input.

LANGUAGE: sql
CODE:
SELECT LN('10x') result;

----------------------------------------

TITLE: Defining PostgreSQL JUSTIFY_INTERVAL() Function Syntax
DESCRIPTION: Shows the basic syntax for using the JUSTIFY_INTERVAL() function in PostgreSQL.

LANGUAGE: sql
CODE:
JUSTIFY_INTERVAL( value ) → interval

----------------------------------------

TITLE: Configuring Tailwind CSS in JavaScript
DESCRIPTION: JavaScript configuration for Tailwind CSS, extending the default theme with custom colors for the chatbot interface.

LANGUAGE: javascript
CODE:
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      colors: {
        chatbot: {
          primary: '#0EA5E9',
          secondary: '#0284C7',
          accent: '#38BDF8',
          background: '#F0F9FF',
        },
      },
    },
  },
  plugins: [],
};

----------------------------------------

TITLE: Implementing Access Controls for Soft-Deleted Records in Laravel
DESCRIPTION: This code shows how to prevent unauthorized access to soft-deleted records in a Laravel controller.

LANGUAGE: php
CODE:
public function show(Post $post)
{
    if ($post->trashed()) {
        abort(404);
    }
    return view('posts.show', compact('post'));
}

----------------------------------------

TITLE: Configuring Neon Postgres Connection String
DESCRIPTION: Structure of a Neon database connection string showing the required components including user, password, hostname, port, and database name.

LANGUAGE: bash
CODE:
postgres://<user>:<password>@<endpoint_hostname>.neon.tech:<port>/<dbname>?sslmode=require

----------------------------------------

TITLE: Setting Neon API Key as Environment Variable
DESCRIPTION: Command to set the NEON_API_KEY environment variable for authentication.

LANGUAGE: bash
CODE:
export NEON_API_KEY="YOUR_API_KEY_FROM_NEON_CONSOLE"

----------------------------------------

TITLE: Practical Date Splitting Example
DESCRIPTION: Shows how to use SPLIT_PART() with table data to extract year and month from payment dates.

LANGUAGE: sql
CODE:
SELECT
    split_part(payment_date::TEXT,'-', 1) y,
    split_part(payment_date::TEXT,'-', 2) m,
    amount
FROM
    payment;

----------------------------------------

TITLE: Granting Schema Access to PostgreSQL Role in SQL
DESCRIPTION: These SQL commands grant necessary permissions to the replication role for accessing tables in the 'sales' schema.

LANGUAGE: sql
CODE:
GRANT USAGE ON SCHEMA sales TO replication_user;
GRANT SELECT ON ALL TABLES IN SCHEMA sales TO replication_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA sales GRANT SELECT ON TABLES TO replication_user;

----------------------------------------

TITLE: Phone Number Format Standardization Example
DESCRIPTION: Example showing how to standardize phone numbers by removing non-digit characters using regexp_replace().

LANGUAGE: sql
CODE:
WITH customer_data AS (
  SELECT '(555) 123-4567' AS phone_number
  UNION ALL
  SELECT '555.987.6543' AS phone_number
  UNION ALL
  SELECT '555-321-7890' AS phone_number
)
SELECT
  phone_number AS original_number,
  regexp_replace(phone_number, '[^\d]', '', 'g') AS cleaned_number
FROM customer_data;

----------------------------------------

TITLE: Dropping Multiple Procedures
DESCRIPTION: Demonstrates how to drop multiple stored procedures in a single statement.

LANGUAGE: sql
CODE:
drop procedure
	delete_actor,
	update_actor;

----------------------------------------

TITLE: Basic CURRENT_TIME Function Syntax
DESCRIPTION: Shows the basic syntax of the CURRENT_TIME function with an optional precision parameter.

LANGUAGE: sql
CODE:
CURRENT_TIME(precision)

----------------------------------------

TITLE: NULL Handling with Survey Responses
DESCRIPTION: Demonstrates how array_to_json handles NULL values in arrays using a survey responses example.

LANGUAGE: sql
CODE:
CREATE TABLE survey_responses (
   participant_id SERIAL PRIMARY KEY,
   participant_name VARCHAR(50),
   responses VARCHAR(50)[]
);

INSERT INTO survey_responses (participant_name, responses) VALUES
   ('Participant A', ARRAY['Yes', 'No', 'Maybe']),
   ('Participant B', ARRAY['Yes', NULL, 'No']),
   ('Participant C', ARRAY[NULL, 'No', 'Yes']),
   ('Participant D', ARRAY['Yes', 'No', NULL]);

----------------------------------------

TITLE: Creating and Modifying Regular User to Superuser
DESCRIPTION: SQL commands to create a regular user and then elevate it to superuser status.

LANGUAGE: sql
CODE:
CREATE ROLE batman LOGIN PASSWORD 'moreSecurePass';

LANGUAGE: sql
CODE:
ALTER ROLE batman SUPERUSER;

----------------------------------------

TITLE: Installing Required Python Packages
DESCRIPTION: Installs Django, Django REST Framework, PostgreSQL adapter, and python-dotenv using pip. These are the core dependencies for building the API.

LANGUAGE: bash
CODE:
pip install django djangorestframework psycopg2-binary python-dotenv

----------------------------------------

TITLE: Configuring Neon MCP Server in Windsurf (MacOS/Linux)
DESCRIPTION: JSON configuration for setting up Neon MCP Server in Windsurf on MacOS or Linux systems. It specifies the command and arguments needed to start the MCP server using npx.

LANGUAGE: json
CODE:
{
  "mcpServers": {
    "neon": {
      "command": "npx",
      "args": ["-y", "@neondatabase/mcp-server-neon", "start", "<YOUR_NEON_API_KEY>"]
    }
  }
}

----------------------------------------

TITLE: Querying Table with CURRENT_TIME Values
DESCRIPTION: Shows how to query the log table to verify the CURRENT_TIME default value.

LANGUAGE: sql
CODE:
SELECT * FROM log;

----------------------------------------

TITLE: Rounding Sales Data Example in PostgreSQL
DESCRIPTION: Shows how to use round() function with a product sales table to round numbers to different decimal places.

LANGUAGE: sql
CODE:
WITH product_sales(product_id, sales_amount) AS (
  VALUES
    (1, 1234.5678),
    (2, 2345.6789),
    (3, 3456.7890),
    (4, 4567.8901)
)
SELECT
  product_id,
  sales_amount,
  round(sales_amount) AS rounded_to_integer,
  round(sales_amount, 2) AS rounded_to_cents
FROM product_sales;

----------------------------------------

TITLE: Using PostgreSQL LAG() Function Over a Partition
DESCRIPTION: This example shows how to use the LAG() function with partitioning to compare sales of the current year with the previous year for each product group.

LANGUAGE: sql
CODE:
SELECT
  year,
  amount,
  group_id,
  LAG(amount, 1) OVER (
    PARTITION BY group_id
    ORDER BY
      year
  ) previous_year_sales
FROM
  sales;

----------------------------------------

TITLE: Configuring Crew with Tools in Python
DESCRIPTION: Python code for configuring the agent crew with integrated Firecrawl and Neon tools.

LANGUAGE: python
CODE:
from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task
import agentstack

@CrewBase
class WebscraperCrew:
    """web_scraper crew"""

    @agent
    def web_scraper(self) -> Agent:
        return Agent(
            config=self.agents_config["web_scraper"],
            tools=[*agentstack.tools["firecrawl"]],
            verbose=True,
        )

    @agent
    def data_extractor(self) -> Agent:
        return Agent(
            config=self.agents_config["data_extractor"],
            tools=[],
            verbose=True,
        )

    @agent
    def content_storer(self) -> Agent:
        return Agent(
            config=self.agents_config["content_storer"],
            tools=[*agentstack.tools["neon"]],
            verbose=True,
        )

    @task
    def scrape_site(self) -> Task:
        return Task(
            config=self.tasks_config["scrape_site"],
        )

    @task
    def extract(self) -> Task:
        return Task(
            config=self.tasks_config["extract"],
        )

    @task
    def store(self) -> Task:
        return Task(
            config=self.tasks_config["store"],
        )

    @crew
    def crew(self) -> Crew:
        """Creates the Test crew"""
        return Crew(
            agents=self.agents,
            tasks=self.tasks,
            process=Process.sequential,
            verbose=True,
        )

----------------------------------------

TITLE: Exporting Full Table to CSV using COPY
DESCRIPTION: COPY statement to export all data from the persons table to a CSV file with headers. The file is created on the server side with delimiter ',' and includes column headers.

LANGUAGE: sql
CODE:
COPY persons TO 'C:\temp\persons_db.csv' DELIMITER ',' CSV HEADER;

----------------------------------------

TITLE: Verifying Query Results with COUNT in SQL
DESCRIPTION: SQL command to count the number of remaining records in the 'Post' table after executing the DELETE query. Used to verify the effects of the test query.

LANGUAGE: sql
CODE:
SELECT COUNT(*) FROM Post;

----------------------------------------

TITLE: Verifying Query Results with COUNT in SQL
DESCRIPTION: SQL command to count the number of remaining records in the 'Post' table after executing the DELETE query. Used to verify the effects of the test query.

LANGUAGE: sql
CODE:
SELECT COUNT(*) FROM Post;

----------------------------------------

TITLE: Listing Views using psql Command
DESCRIPTION: psql command to list all views in the current database. It displays the schema, name, type, and owner of each view.

LANGUAGE: sql
CODE:
\dv

----------------------------------------

TITLE: Converting NULL to JSONB with to_jsonb() Function
DESCRIPTION: Shows how the to_jsonb() function handles NULL values when converting to JSONB type.

LANGUAGE: sql
CODE:
SELECT
  to_jsonb(NULL::text);

----------------------------------------

TITLE: Update Project API Request
DESCRIPTION: API request to update a Neon project's name using cURL.

LANGUAGE: bash
CODE:
curl 'https://console.neon.tech/api/v2/projects/ep-cool-darkness-123456' \
  -H 'accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY" \
  -H 'Content-Type: application/json' \
  -d '{
  "project": {
    "name": "project1"
  }
}'

----------------------------------------

TITLE: Inserting Data for LCM Calculations in PostgreSQL
DESCRIPTION: Inserts multiple rows into the 'numbers' table for LCM calculation examples.

LANGUAGE: sql
CODE:
INSERT INTO numbers (value)
VALUES (12), (18), (24), (48)
RETURNING *;

----------------------------------------

TITLE: Using the Neon CLI roles command
DESCRIPTION: The main usage syntax for the Neon CLI roles command. It supports subcommands for listing, creating, and deleting roles in a Neon project.

LANGUAGE: bash
CODE:
neon roles <subcommand> [options]

----------------------------------------

TITLE: Revoking SELECT Privilege on a Table in PostgreSQL
DESCRIPTION: This SQL statement revokes the SELECT privilege on the 'actor' table from the role 'jim' in PostgreSQL.

LANGUAGE: sql
CODE:
REVOKE SELECT ON actor FROM jim;

----------------------------------------

TITLE: Creating Tables in PostgreSQL Schema
DESCRIPTION: Shows equivalent ways to create tables with and without explicit schema specification.

LANGUAGE: css
CODE:
CREATE TABLE table_name(
  ...
);

LANGUAGE: sql
CODE:
CREATE TABLE public.table_name(
   ...
);

----------------------------------------

TITLE: Creating Replication Role via Neon CLI
DESCRIPTION: Command to create a dedicated role for replication using the Neon CLI.

LANGUAGE: bash
CODE:
neon roles create --name replication_user

----------------------------------------

TITLE: Setting Up Node.js Project and Installing Dependencies
DESCRIPTION: Bash commands to create a new Node.js project directory, initialize npm, enable ES6 module support, install required packages, and create necessary files.

LANGUAGE: bash
CODE:
mkdir neon-render-example && cd neon-render-example
npm init -y && npm pkg set type="module"
npm install express pg
touch .env

----------------------------------------

TITLE: Configuring Descope JWKS URL Format
DESCRIPTION: Shows the format for constructing the Descope JWKS URL using the project ID for JWT validation.

LANGUAGE: plaintext
CODE:
https://api.descope.com/{YOUR_DESCOPE_PROJECT_ID}/.well-known/jwks.json

----------------------------------------

TITLE: Auth0 Route Configuration
DESCRIPTION: Setup of Auth0 authentication routes for handling login, logout, and callback functionality.

LANGUAGE: typescript
CODE:
import { handleAuth, handleLogin } from '@auth0/nextjs-auth0';

export default handleAuth({
  login: handleLogin(),
});

----------------------------------------

TITLE: HTML Tag Removal Example
DESCRIPTION: Complex pattern matching example showing how to remove HTML tags from text content.

LANGUAGE: sql
CODE:
WITH html_content AS (
  SELECT '<p>This is <b>bold</b> and <i>italic</i> text.</p>' AS content
  UNION ALL
  SELECT '<div>Another <span style="color: red;">example</span> here.</div>' AS content
)
SELECT
  content AS original_html,
  regexp_replace(content, '<[^>]+>', '', 'g') AS plain_text
FROM html_content;

----------------------------------------

TITLE: Creating Users Table in PostgreSQL
DESCRIPTION: This SQL snippet defines the structure of the 'users' table in the public schema. It includes columns for id, first_name, last_name, email, and age, with the id column set as the primary key.

LANGUAGE: sql
CODE:
CREATE TABLE public.users (
    id UUID PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    age INTEGER NOT NULL
);

----------------------------------------

TITLE: Creating a Payload CMS Project with Next.js
DESCRIPTION: Command to scaffold a new Payload CMS project with Next.js using the create-payload-app package.

LANGUAGE: bash
CODE:
npx create-payload-app@latest payload-neon-ecommerce-store

----------------------------------------

TITLE: Changing PostgreSQL Tablespace Owner Example
DESCRIPTION: This example shows how to change the owner of a tablespace named 'dvdrental_raid' from 'postgres' to 'hr' using the ALTER TABLESPACE OWNER TO statement.

LANGUAGE: sql
CODE:
ALTER TABLESPACE dvdrental_raid
OWNER to hr;

----------------------------------------

TITLE: Creating pg_session_jwt Extension in Postgres
DESCRIPTION: SQL command to install the pg_session_jwt extension required for JWT session handling in Neon RLS.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pg_session_jwt;

----------------------------------------

TITLE: Checking Subscription Status in SQL
DESCRIPTION: SQL command to check the status of the subscription, including the last message receipt time, which can be used to verify recent replication activity.

LANGUAGE: sql
CODE:
SELECT subname, received_lsn, latest_end_lsn, last_msg_receipt_time FROM pg_catalog.pg_stat_subscription;

----------------------------------------

TITLE: Creating Sample Tables for DROP COLUMN Examples
DESCRIPTION: SQL statements to create three sample tables (publishers, categories, and books) for demonstrating DROP COLUMN operations.

LANGUAGE: SQL
CODE:
CREATE TABLE publishers (
    publisher_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE categories (
    category_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE books (
    book_id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    isbn VARCHAR(255) NOT NULL,
    published_date DATE NOT NULL,
    description VARCHAR,
    category_id INT NOT NULL,
    publisher_id INT NOT NULL,
    FOREIGN KEY (publisher_id)
       REFERENCES publishers (publisher_id),
    FOREIGN KEY (category_id)
       REFERENCES categories (category_id)
);

----------------------------------------

TITLE: Connecting to Neon Branch via PSQL
DESCRIPTION: Example command for connecting to a Neon database branch using the psql CLI client

LANGUAGE: bash
CODE:
psql postgresql://[user]:[password]@[neon_hostname]/[dbname]

----------------------------------------

TITLE: Creating Employee Table Structure
DESCRIPTION: Creates a table structure for employees with basic information including birthdate.

LANGUAGE: sql
CODE:
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    birthdate DATE NOT NULL
);

INSERT INTO employees (name, birthdate)
VALUES
    ('John Doe', '1990-05-15'),
    ('Jane Smith', '1985-09-20'),
    ('Michael Johnson', '1982-03-10'),
    ('Emily Brown', '1995-11-28')
RETURNING *;

----------------------------------------

TITLE: Profiling pgvector Search Query with EXPLAIN ANALYZE
DESCRIPTION: This SQL query uses EXPLAIN ANALYZE to generate an execution plan and display the performance of a similarity search query using pgvector. It orders results by the distance between the embedding and a given vector.

LANGUAGE: sql
CODE:
EXPLAIN ANALYZE SELECT * FROM items ORDER BY embedding <-> '[0.011699999682605267,..., 0.008700000122189522]' LIMIT 100;

----------------------------------------

TITLE: Basic PostgreSQL TRANSLATE() Function Example
DESCRIPTION: This example demonstrates a basic use of the TRANSLATE() function, replacing characters '1' and '3' with 'a' and 'x' respectively, and removing '4' from the input string.

LANGUAGE: sql
CODE:
SELECT TRANSLATE('12345', '134', 'ax')

----------------------------------------

TITLE: PostgreSQL Individual Environment Variables Configuration
DESCRIPTION: Alternative configuration using individual PostgreSQL environment variables for database connection details.

LANGUAGE: text
CODE:
PGUSER=alex
PGHOST=ep-cool-darkness-123456.us-east-2.aws.neon.tech
PGDATABASE=dbname
PGPASSWORD=AbC123dEf
PGPORT=5432

----------------------------------------

TITLE: EXIT Statement with Block Labels
DESCRIPTION: Demonstrates using EXIT to terminate a labeled block

LANGUAGE: plpgsql
CODE:
do
$$
begin
  <<simple_block>>
   begin
  	 exit simple_block;
         -- for demo purposes
	 raise notice '%', 'unreachable!';
   end;
   raise notice '%', 'End of block';
end;
$$

----------------------------------------

TITLE: Creating a Personal API Key via Neon API
DESCRIPTION: This snippet demonstrates how to create a personal API key using the Neon API. It requires an existing personal API key for authentication.

LANGUAGE: bash
CODE:
curl https://console.neon.tech/api/v2/api_keys
  -H "Content-Type: application/json"
  -H "Authorization: Bearer $PERSONAL_API_KEY"
  -d '{"key_name": "my-key"}'

----------------------------------------

TITLE: Using Negative Integer with PostgreSQL LEFT()
DESCRIPTION: This example demonstrates how to use a negative integer with the LEFT() function, which returns all characters except the last n characters.

LANGUAGE: sql
CODE:
SELECT LEFT('ABC',-2);

----------------------------------------

TITLE: Creating Investment Table
DESCRIPTION: Creates a table structure for storing investment data to demonstrate practical use of POWER().

LANGUAGE: sql
CODE:
CREATE TABLE investments (
    id SERIAL PRIMARY KEY,
    investment_amount NUMERIC NOT NULL,
    annual_interest_rate NUMERIC NOT NULL,
    years INT NOT NULL
);

----------------------------------------

TITLE: Creating a View Based on Sample Tables
DESCRIPTION: SQL statement to create a view named customer_data based on the customers and customer_groups tables.

LANGUAGE: sql
CODE:
CREATE VIEW customer_data AS
SELECT
  c.id,
  c.name,
  g.name customer_group
FROM
  customers c
  INNER JOIN customer_groups g ON g.id = c.group_id;

----------------------------------------

TITLE: Extracting Hashtags with REGEXP_MATCHES
DESCRIPTION: Demonstrates how to extract hashtags from a string using REGEXP_MATCHES with a pattern matching words that start with # followed by alphanumeric characters.

LANGUAGE: sql
CODE:
SELECT
    REGEXP_MATCHES('Learning #PostgreSQL #REGEXP_MATCHES',
         '#([A-Za-z0-9_]+)',
        'g');

----------------------------------------

TITLE: Sample CSV Data Structure
DESCRIPTION: Example CSV file structure containing customer data with headers and two sample records.

LANGUAGE: text
CODE:
First Name,Last Name,Email
1,Casey,Smith,casey.smith@example.com
2,Sally,Jones,sally.jones@example.com

----------------------------------------

TITLE: Creating Feature Usage Migration
DESCRIPTION: PHP code for creating the feature_usage table migration, tracking user feature usage.

LANGUAGE: php
CODE:
public function up()
{
    Schema::create('feature_usage', function (Blueprint $table) {
        $table->id();
        $table->foreignId('user_id')->constrained()->onDelete('cascade');
        $table->string('feature_name');
        $table->timestamp('used_at');
        $table->timestamps();
    });
}

----------------------------------------

TITLE: Configuring Postgres Role Permissions
DESCRIPTION: SQL commands to set up permissions for authenticated and anonymous roles in the public schema.

LANGUAGE: sql
CODE:
-- For existing tables
GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to authenticated;

GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to anonymous;

-- For future tables
ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO authenticated;

ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO anonymous;

-- Grant USAGE on "public" schema
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO anonymous;

----------------------------------------

TITLE: CURRENT_TIME with Precision Parameter
DESCRIPTION: Shows how to use CURRENT_TIME with a precision value of 2 decimal places.

LANGUAGE: sql
CODE:
SELECT CURRENT_TIME(2);

----------------------------------------

TITLE: Creating a Publication for Specific Tables in SQL
DESCRIPTION: SQL commands to create publications for specific tables or multiple tables in the source database.

LANGUAGE: sql
CODE:
CREATE PUBLICATION my_publication FOR TABLE playing_with_neon;

LANGUAGE: sql
CODE:
CREATE PUBLICATION my_publication FOR TABLE users, departments;

----------------------------------------

TITLE: Exporting Single Column without Header
DESCRIPTION: COPY statement to export only the email column from the persons table to a CSV file without including the header row.

LANGUAGE: sql
CODE:
COPY persons(email)
TO 'C:\temp\persons_email_db.csv' DELIMITER ',' CSV;

----------------------------------------

TITLE: Setting Up Drizzle ORM Client
DESCRIPTION: Configures the Drizzle ORM client in 'db/drizzle.ts' to connect to the Neon database using environment variables.

LANGUAGE: typescript
CODE:
import { drizzle } from 'drizzle-orm/node-postgres';
import { Pool } from 'pg';
import 'dotenv/config';

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

export const db = drizzle(pool);

----------------------------------------

TITLE: Basic CURRENT_DATE Query Example
DESCRIPTION: Simple example demonstrating how to select the current date using CURRENT_DATE function.

LANGUAGE: sql
CODE:
SELECT CURRENT_DATE;

----------------------------------------

TITLE: Custom Key Generation with concat()
DESCRIPTION: Shows how to generate unique identifiers by concatenating multiple columns for tracking page interactions.

LANGUAGE: sql
CODE:
WITH page_interactions AS (
  SELECT 1 AS user_id, '/home' AS page, '2023-06-01 10:00:00' AS ts
  UNION ALL
  SELECT 1 AS user_id, '/products' AS page, '2023-06-01 10:30:00' AS ts
  UNION ALL
  SELECT 2 AS user_id, '/home' AS page, '2023-06-01 11:00:00' AS ts
  UNION ALL
  SELECT 1 AS user_id, '/home' AS page, '2023-06-01 12:00:00' AS ts
)
SELECT unique_visit, count(*) AS num_interactions
FROM (
    SELECT ts, concat(user_id, ':', page) AS unique_visit
    FROM page_interactions
)
GROUP BY unique_visit;

----------------------------------------

TITLE: Calculate Natural Logarithm of 10
DESCRIPTION: Example showing how to calculate the natural logarithm of the number 10 using the LN() function.

LANGUAGE: sql
CODE:
SELECT LN(10) result;

----------------------------------------

TITLE: Initializing Azure Functions Project
DESCRIPTION: Commands to create a new Azure Functions project with TypeScript support and HTTP trigger function

LANGUAGE: bash
CODE:
mkdir recipes-api
cd recipes-api
func init --typescript
func new --name RecipesApi --template "HTTP trigger" --authlevel "anonymous"

----------------------------------------

TITLE: Creating an Index for Improved date_trunc() Performance
DESCRIPTION: This snippet demonstrates how to create an index on truncated date values to improve query performance when using date_trunc() in WHERE clauses or for grouping large datasets.

LANGUAGE: sql
CODE:
CREATE INDEX idx_sales_month ON sales (date_trunc('month', sale_date));

----------------------------------------

TITLE: Creating Memberships Table Schema
DESCRIPTION: Creates a table for storing membership data with foreign key reference to members table.

LANGUAGE: sql
CODE:
CREATE TABLE memberships (
    id SERIAL PRIMARY KEY,
    member_id INT NOT NULL REFERENCES members(id),
    membership_type VARCHAR(50) NOT NULL DEFAULT 'free'
);

----------------------------------------

TITLE: Setting up a virtual environment in Python
DESCRIPTION: Commands to create and activate a virtual environment for the project using venv.

LANGUAGE: bash
CODE:
cd autogen-neon-example
python3 -m venv venv
source venv/bin/activate   # For macOS/Linux. On Windows, use `venv\Scripts\activate`

----------------------------------------

TITLE: Setting Environment Variables for Database Connection
DESCRIPTION: Contents of the .env file, which stores the database connection string as an environment variable.

LANGUAGE: bash
CODE:
# .env
DATABASE_URL=NEON_DATABASE_CONNECTION_STRING

----------------------------------------

TITLE: Installing Neon MCP Server for Claude Desktop via Smithery
DESCRIPTION: This command specifically installs the Neon MCP Server for use with Claude Desktop using Smithery.

LANGUAGE: bash
CODE:
npx -y @smithery/cli install neon --client claude

----------------------------------------

TITLE: Configuring JWKS URL Format for Clerk
DESCRIPTION: Format for the Clerk JWKS URL required for JWT validation.

LANGUAGE: bash
CODE:
https://{YOUR_CLERK_DOMAIN}/.well-known/jwks.json

----------------------------------------

TITLE: Performing Simple Keyword Search
DESCRIPTION: Demonstrates a basic keyword search using the @@@ operator to find items with 'shoes' in the description.

LANGUAGE: sql
CODE:
SELECT description, category
FROM mock_items
WHERE description @@@ 'shoes';

----------------------------------------

TITLE: Performing Simple Keyword Search
DESCRIPTION: Demonstrates a basic keyword search using the @@@ operator to find items with 'shoes' in the description.

LANGUAGE: sql
CODE:
SELECT description, category
FROM mock_items
WHERE description @@@ 'shoes';

----------------------------------------

TITLE: Listing Projects in an Organization using Neon CLI
DESCRIPTION: This snippet shows how to use the 'neon projects list' command with the '--org-id' option to list all projects within a specified organization, including their IDs, names, regions, and creation dates.

LANGUAGE: bash
CODE:
neon projects list --org-id org-xxxx-xxxx
Projects
┌───────────────────────────┬───────────────────────────┬────────────────────┬──────────────────────┐
│ Id                        │ Name                      │ Region Id          │ Created At           │
├───────────────────────────┼───────────────────────────┼────────────────────┼──────────────────────┤
│ bright-moon-12345678      │ dev-backend-api           │ aws-us-east-2      │ 2024-07-26T11:43:37Z │
├───────────────────────────┼───────────────────────────┼────────────────────┼──────────────────────┤
│ silent-forest-87654321    │ test-integration-service  │ aws-eu-central-1   │ 2024-05-30T22:14:49Z │
├───────────────────────────┼───────────────────────────┼────────────────────┼──────────────────────┤
│ crystal-stream-23456789   │ staging-web-app           │ aws-us-east-2      │ 2024-05-17T13:47:35Z │
└───────────────────────────┴───────────────────────────┴────────────────────┴──────────────────────┘

----------------------------------------

TITLE: Revoking All Privileges on a Table in PostgreSQL
DESCRIPTION: This SQL command revokes all privileges on the 'film' table from the role 'jim' in PostgreSQL using the ALL option.

LANGUAGE: sql
CODE:
REVOKE ALL ON film FROM jim;

----------------------------------------

TITLE: Creating a Development Branch with Neon CLI
DESCRIPTION: Demonstrates how to create a development branch from 'main' using the Neon CLI. This command instantly creates a full database copy.

LANGUAGE: bash
CODE:
neon branches create --name dev/alex

----------------------------------------

TITLE: Installing Database Add-On in Laravel Zero
DESCRIPTION: Command to install the database package in a Laravel Zero project.

LANGUAGE: bash
CODE:
php todo app:install database

----------------------------------------

TITLE: Basic CONCAT_WS Function Syntax - SQL
DESCRIPTION: Demonstrates the basic syntax of the CONCAT_WS function that concatenates multiple strings with a specified separator. The separator should not be NULL, and NULL string values are ignored by the function.

LANGUAGE: sql
CODE:
CONCAT_WS(separator, string1, string2, string3, ...)

----------------------------------------

TITLE: Running Authorized Queries in Client Component
DESCRIPTION: TypeScript code for a Next.js client component that demonstrates how to run authenticated queries using Neon RLS. It uses the useAuth0 hook to obtain the JWT for database authentication in a client-side context.

LANGUAGE: typescript
CODE:
'use client';

import type { Todo } from '@/app/schema';
import { neon } from '@neondatabase/serverless';
import { useAuth0 } from '@auth0/auth0-react';
import { useEffect, useState } from 'react';

const getDb = (token: string) =>
    neon(process.env.NEXT_PUBLIC_DATABASE_AUTHENTICATED_URL!, {
        authToken: token,
    });

export function TodoList() {
    const { getAccessTokenSilently } = useAuth0();
    const [todos, setTodos] = useState<Array<Todo>>();

    useEffect(() => {
        async function loadTodos() {
            const authToken = await getAccessTokenSilently();

            if (!authToken) {
                return;
            }

            const sql = getDb(authToken);

            // WHERE filter is optional because of RLS.
            // But we send it anyway for performance reasons.
            const todosResponse = await
                sql('select * from todos where user_id = auth.user_id()');

            setTodos(todosResponse as Array<Todo>);
        }

        loadTodos();
    }, [getAccessTokenSilently]);

    return (
        <ul>
            {todos?.map((todo) => (
                <li key={todo.id}>
                    {todo.task}
                </li>
            ))}
        </ul>
    );
}

----------------------------------------

TITLE: Installing pg_session_jwt Extension
DESCRIPTION: SQL command to install the required Postgres extension for JWT session management.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pg_session_jwt;

----------------------------------------

TITLE: Restarting PostgreSQL Using systemctl
DESCRIPTION: Commands to restart PostgreSQL server using systemctl and verify its status. Requires sudo privileges.

LANGUAGE: httpsql
CODE:
sudo systemctl restart postgresql

LANGUAGE: bash
CODE:
/etc/init.d/postgresql status

----------------------------------------

TITLE: Implementing AI Talking Animation Component in React
DESCRIPTION: Creates a React component for displaying different states of AI interaction (idle, listening, speaking) with animations. It uses Framer Motion for animations and the custom useTypingEffect hook.

LANGUAGE: typescript
CODE:
// File: components/TextAnimation.tsx

'use client';

import { useTypingEffect } from '@/components/useTypingEffect';
import { motion } from 'framer-motion';
import { useEffect, useState } from 'react';

type AIState = 'idle' | 'listening' | 'speaking';

interface Props {
  onStartListening?: () => void;
  onStopListening?: () => void;
  isAudioPlaying?: boolean;
  currentText: string;
}

export default function AiTalkingAnimation({
  onStartListening,
  onStopListening,
  isAudioPlaying,
  currentText,
}: Props) {
  const [aiState, setAiState] = useState<AIState>('idle');
  const animatedCurrentText = useTypingEffect(currentText, 20);
  const displayedText = useTypingEffect('Click the circle to start the conversation', 20);

  const handleCircleClick = () => {
    if (aiState === 'listening' || aiState === 'speaking') {
      onStopListening?.();
      setAiState('idle');
    } else if (!isAudioPlaying) {
      onStartListening?.();
      setAiState('listening');
    }
  };

  useEffect(() => {
    if (isAudioPlaying) setAiState('speaking');
    else if (aiState === 'speaking' && currentText) setAiState('listening');
  }, [isAudioPlaying]);

  return (
    <div className="bg-gray-100 flex min-h-screen flex-col items-center justify-center p-4">
      <div
        role="button"
        onClick={handleCircleClick}
        className="relative mb-8 cursor-pointer"
        aria-label={aiState === 'listening' ? 'Stop listening' : 'Start listening'}
      >
        <motion.div
          className="from-pink-500 to-violet-600 flex h-20 w-20 items-center justify-center rounded-full bg-gradient-to-br shadow-lg"
          animate={
            aiState === 'idle'
              ? { scale: [1, 1.1, 1] }
              : aiState === 'speaking'
                ? { scale: [1, 1.2, 0.8, 1.2, 1] }
                : {}
          }
          transition={{
            repeat: Infinity,
            ease: 'easeInOut',
            duration: aiState === 'speaking' ? 0.8 : 1.5,
          }}
        />
        {aiState === 'listening' && (
          <svg
            viewBox="0 0 100 100"
            className="absolute left-1/2 top-1/2 h-24 w-24 -translate-x-1/2 -translate-y-1/2"
          >
            <motion.circle
              cx="50"
              cy="50"
              r="48"
              fill="none"
              strokeWidth="4"
              stroke="#8B5CF6"
              transition={{
                duration: 10,
                ease: 'linear',
                repeat: Infinity,
              }}
              strokeLinecap="round"
              initial={{ pathLength: 0, rotate: -90 }}
              animate={{ pathLength: 1, rotate: 270 }}
            />
          </svg>
        )}
      </div>
      <div className="w-full max-w-md rounded-lg bg-white p-6 shadow-lg">
        <p className="text-gray-800 font-mono text-lg" aria-live="polite">
          {aiState === 'listening'
            ? 'Listening...'
            : aiState === 'speaking'
              ? animatedCurrentText
              : displayedText}
        </p>
        {aiState === 'idle' && (
          <motion.div
            animate={{
              opacity: [0, 1, 0],
            }}
            transition={{
              duration: 0.8,
              repeat: Infinity,
              ease: 'easeInOut',
            }}
            className="bg-violet-600 mt-2 h-5 w-2"
          />
        )}
      </div>
    </div>
  );
}

----------------------------------------

TITLE: Upgrading Neon CLI via npm
DESCRIPTION: Command to upgrade Neon CLI to the latest version using npm.

LANGUAGE: shell
CODE:
npm update -g neonctl

----------------------------------------

TITLE: Listing Neon Projects
DESCRIPTION: Lists all projects belonging to the user's Neon account, including shared projects. Supports optional organization ID filtering.

LANGUAGE: bash
CODE:
neon projects list [options]

----------------------------------------

TITLE: Using the Aggregate GCD Function
DESCRIPTION: Demonstrates how to use the custom aggregate GCD function to calculate the GCD of all numbers in the 'value' column of the 'numbers' table.

LANGUAGE: sql
CODE:
SELECT gcd_agg(value)
FROM numbers;

----------------------------------------

TITLE: Generating Simple Number Sequence
DESCRIPTION: Example of generating a sequence of numbers from 1 to 5.

LANGUAGE: sql
CODE:
SELECT generate_series(1,5);

----------------------------------------

TITLE: Creating and Populating Sales Table for ROLLUP Examples
DESCRIPTION: SQL script to create a sample sales table and insert data for demonstrating ROLLUP functionality.

LANGUAGE: sql
CODE:
DROP TABLE IF EXISTS sales;
CREATE TABLE sales (
    brand VARCHAR NOT NULL,
    segment VARCHAR NOT NULL,
    quantity INT NOT NULL,
    PRIMARY KEY (brand, segment)
);

INSERT INTO sales (brand, segment, quantity)
VALUES
    ('ABC', 'Premium', 100),
    ('ABC', 'Basic', 200),
    ('XYZ', 'Premium', 100),
    ('XYZ', 'Basic', 300);

----------------------------------------

TITLE: Adding Key-Value Pair to Existing PostgreSQL hstore Column
DESCRIPTION: Demonstrates how to add a new key-value pair to existing rows in an hstore column.

LANGUAGE: sql
CODE:
UPDATE books
SET attr = attr || '"freeshipping"=>"yes"' :: hstore;

----------------------------------------

TITLE: Executing pgloader Migration Command
DESCRIPTION: Command to run pgloader with the configuration file for migrating the MySQL database to Neon Postgres.

LANGUAGE: shell
CODE:
pgloader config.load

----------------------------------------

TITLE: Defining Database Schema with Drizzle ORM
DESCRIPTION: Defines the database schema for authors and books tables using Drizzle ORM's TypeScript syntax. Creates tables with relationships and various column types.

LANGUAGE: typescript
CODE:
import { pgTable, integer, serial, text, timestamp } from 'drizzle-orm/pg-core';

export const authors = pgTable('authors', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
  bio: text('bio'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
});

export const books = pgTable('books', {
  id: serial('id').primaryKey(),
  title: text('title').notNull(),
  authorId: integer('author_id').references(() => authors.id),
  createdAt: timestamp('created_at').notNull().defaultNow(),
});

----------------------------------------

TITLE: Defining Database Schema with Drizzle ORM
DESCRIPTION: Defines the database schema for authors and books tables using Drizzle ORM's TypeScript syntax. Creates tables with relationships and various column types.

LANGUAGE: typescript
CODE:
import { pgTable, integer, serial, text, timestamp } from 'drizzle-orm/pg-core';

export const authors = pgTable('authors', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
  bio: text('bio'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
});

export const books = pgTable('books', {
  id: serial('id').primaryKey(),
  title: text('title').notNull(),
  authorId: integer('author_id').references(() => authors.id),
  createdAt: timestamp('created_at').notNull().defaultNow(),
});

----------------------------------------

TITLE: Creating and Populating a Sample Book Inventory Table in PostgreSQL
DESCRIPTION: Demonstrates how to create a table called book_inventory and insert sample data for testing the jsonb_object() function.

LANGUAGE: sql
CODE:
-- Test database table for a bookstore inventory
CREATE TABLE book_inventory (
    book_id INT,
    title TEXT,
    author TEXT,
    price NUMERIC,
    genre TEXT
);

-- Inserting some test data into `book_inventory`
INSERT INTO book_inventory VALUES
(101, 'The Great Gatsby', 'F. Scott Fitzgerald', 18.99, 'Classic'),
(102, 'Invisible Man', 'Ralph Ellison', 15.99, 'Novel');

----------------------------------------

TITLE: Installing Neon CLI with Package Managers
DESCRIPTION: Commands for installing the Neon CLI using either Homebrew (macOS) or NPM (all platforms)

LANGUAGE: bash
CODE:
brew install neonctl

LANGUAGE: bash
CODE:
npm install -g neonctl

----------------------------------------

TITLE: Basic LTRIM Function Syntax
DESCRIPTION: Demonstrates the basic syntax of PostgreSQL LTRIM() function that removes specified characters from the beginning of a string. The function accepts two parameters: the input string and optional character to remove.

LANGUAGE: sql
CODE:
LTRIM(string, character)

----------------------------------------

TITLE: Raising SQLSTATE Error in PL/pgSQL
DESCRIPTION: Shows how to raise an error using an SQLSTATE code in PL/pgSQL.

LANGUAGE: sql
CODE:
do $$
begin
	--...
	raise sqlstate '77777';
end $$;

----------------------------------------

TITLE: Creating a role with Neon CLI
DESCRIPTION: Usage and example of the 'create' subcommand to create a new role in a Neon project. It supports options for specifying the role name and creating passwordless roles.

LANGUAGE: bash
CODE:
neon roles create [options]

LANGUAGE: bash
CODE:
neon roles create --name sally

----------------------------------------

TITLE: NTILE Function with Partitioning
DESCRIPTION: Advanced example demonstrating NTILE() function usage with PARTITION BY clause to divide data into 3 buckets within each year partition.

LANGUAGE: sql
CODE:
SELECT
	name,
	amount,
	NTILE(3) OVER(
		PARTITION BY year
		ORDER BY amount
	)
FROM
	sales_stats;

----------------------------------------

TITLE: Basic MAKE_TIME() Function Syntax
DESCRIPTION: Shows the basic syntax for the MAKE_TIME() function which accepts hour (0-23), minute (0-59), and second (0-59.999999) parameters to create a time value.

LANGUAGE: sql
CODE:
MAKE_TIME ( hour int, min int, sec double precision ) → time

----------------------------------------

TITLE: PostgreSQL SUM Function with GROUP BY
DESCRIPTION: Shows how to calculate total rental duration grouped by film rating using SUM() function.

LANGUAGE: sql
CODE:
SELECT
  rating,
  SUM(rental_duration)
FROM
  film
GROUP BY
  rating
ORDER BY
  rating;

----------------------------------------

TITLE: Enabling pg_cron via Neon API
DESCRIPTION: API call to enable pg_cron by setting the cron.database_name parameter for a specific database.

LANGUAGE: bash
CODE:
curl --request PATCH \
     --url https://console.neon.tech/api/v2/projects/<project_id>/endpoints/<endpoint_id> \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $NEON_API_KEY$' \
     --header 'content-type: application/json' \
     --data '
{
  "endpoint": {
    "settings": {
      "pg_settings": {
        "cron.database_name": "your_dbname"
      }
    }
  }
}'

----------------------------------------

TITLE: Defining Data Models for Author and Book Entities
DESCRIPTION: C# code defining the Author and Book entities with their properties.

LANGUAGE: csharp
CODE:
using System;
using Microsoft.EntityFrameworkCore;

namespace NeonEFMigrations
{
    public class Author
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Bio { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public class Book
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public int AuthorId { get; set; }
        public Author Author { get; set; }
        public DateTime CreatedAt { get; set; }
    }
}

----------------------------------------

TITLE: Binding Trigger to Members Table
DESCRIPTION: Creates an AFTER INSERT trigger on the members table that executes the membership creation function.

LANGUAGE: sql
CODE:
CREATE TRIGGER after_insert_member_trigger
AFTER INSERT ON members
FOR EACH ROW
EXECUTE FUNCTION create_membership_after_insert();

----------------------------------------

TITLE: Counting Payments per Customer with GROUP BY
DESCRIPTION: Shows how to use COUNT() with GROUP BY to count payments for each customer.

LANGUAGE: sql
CODE:
SELECT
  customer_id,
  COUNT (customer_id)
FROM
  payment
GROUP BY
  customer_id;

----------------------------------------

TITLE: Basic CURRENT_TIME Usage Example
DESCRIPTION: Demonstrates how to retrieve the current time with timezone using CURRENT_TIME without precision parameter.

LANGUAGE: sql
CODE:
SELECT CURRENT_TIME;

----------------------------------------

TITLE: Configuring PostgreSQL Server
DESCRIPTION: Modify PostgreSQL configuration for remote access and authentication settings

LANGUAGE: shell
CODE:
sudo nano /etc/postgresql/16/main/postgresql.conf
listen_addresses = '*'
sudo sed -i '/^host/s/ident/md5/' /etc/postgresql/16/main/pg_hba.conf
sudo sed -i '/^local/s/peer/trust/' /etc/postgresql/16/main/pg_hba.conf
echo "host all all 0.0.0.0/0 md5" | sudo tee -a /etc/postgresql/16/main/pg_hba.conf
sudo systemctl restart postgresql
sudo ufw allow 5432/tcp

----------------------------------------

TITLE: Configuring Azure Function App Settings
DESCRIPTION: Azure CLI command to set the Neon database connection string as an environment variable in the Azure Function App.

LANGUAGE: bash
CODE:
az functionapp config appsettings set \
  --name referral-system \
  --resource-group referral-system \
  --settings NEON_CONNECTION_STRING="postgres://user:password@ep-xyz.region.azure.neon.tech/neondb?sslmode=require"

----------------------------------------

TITLE: Dumping Schema with pg_dump in SQL
DESCRIPTION: This command dumps only the schema (object definitions) from a database, excluding data and privileges. It outputs the schema to an SQL file named schema_dump.sql.

LANGUAGE: sql
CODE:
pg_dump --schema-only \
	--no-privileges \
	"postgresql://role:password@hostname:5432/dbname" \
	> schema_dump.sql

----------------------------------------

TITLE: Partial CUBE Syntax
DESCRIPTION: Shows how to perform a partial cube operation to reduce the number of aggregates calculated.

LANGUAGE: sql
CODE:
SELECT
    c1,
    c2,
    c3,
    aggregate (c4)
FROM
    table_name
GROUP BY
    c1,
    CUBE (c1, c2);

----------------------------------------

TITLE: Inserting Sample Data into Products Table in PostgreSQL
DESCRIPTION: This SQL statement inserts multiple rows of sample product data into the 'products' table.

LANGUAGE: sql
CODE:
INSERT INTO products (name, price)
VALUES
    ('Smartphone', 699.9900),
    ('Laptop', 1299.99),
    ('Headphones', 149.5000),
    ('Tablet', 449.00),
    ('Smartwatch', 299.00),
    ('Wireless Speaker', 79.9900)
RETURNING *;

----------------------------------------

TITLE: Configuring Neon Database Connection in Phoenix test.exs
DESCRIPTION: This code snippet shows how to update the config/test.exs file in a Phoenix project to configure the connection to a Neon database for testing purposes, including database name with test partition.

LANGUAGE: elixir
CODE:
config :hello, Hello.Repo,
   username: "neondb_owner",
   password: "JngqXejzvb93",
   hostname: "ep-rough-snowflake-a5j76tr5.us-east-2.aws.neon.tech",
   database: "with_phoenix_test#{System.get_env("MIX_TEST_PARTITION")}",
   pool: Ecto.Adapters.SQL.Sandbox,
   pool_size: System.schedulers_online() * 2,
   ssl: [cacerts: :public_key.cacerts_get()]

----------------------------------------

TITLE: Getting Last Two Characters Example
DESCRIPTION: Demonstrates extracting the last two characters from a string using RIGHT() function.

LANGUAGE: sql
CODE:
SELECT RIGHT('XYZ', 2);

----------------------------------------

TITLE: Calculate Natural Logarithm from String
DESCRIPTION: Example showing how to calculate the natural logarithm from a numeric string value.

LANGUAGE: sql
CODE:
SELECT LN('10') result;

----------------------------------------

TITLE: Updating Feature Flag Status in SQL
DESCRIPTION: Updates the 'enabled' status of the 'new_checkout_process' feature flag to TRUE, simulating feature activation.

LANGUAGE: sql
CODE:
UPDATE feature_flags SET enabled = TRUE WHERE feature_name = 'new_checkout_process';

----------------------------------------

TITLE: Verifying Source Database Data with PSQL
DESCRIPTION: PostgreSQL connection command and query to verify data in the source database before migration. Shows how to connect using psql and run a sample query.

LANGUAGE: bash
CODE:
psql \
--host=dms-postgresql.abc123def456hgi.us-east-2.rds.amazonaws.com \
--port=5432 \
--username=postgres \
--password \
--dbname=dms_sample


dms_sample=> SELECT * from dms_sample.player LIMIT 100;

----------------------------------------

TITLE: Connecting to PostgreSQL Server
DESCRIPTION: Command to connect to PostgreSQL server using psql client with postgres user

LANGUAGE: sql
CODE:
psql -U postgres

----------------------------------------

TITLE: Retrieving Neon Database Connection String
DESCRIPTION: Example of a Neon Postgres connection string format used for database configuration.

LANGUAGE: bash
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require

----------------------------------------

TITLE: Configuring Neon Database Connection in Spring Boot
DESCRIPTION: Properties file configuration for setting up the database connection to a Neon Postgres instance in a Spring Boot application.

LANGUAGE: properties
CODE:
spring.datasource.url=jdbc:postgresql://<your-neon-hostname>/<your-database-name>
spring.datasource.username=<your-username>
spring.datasource.password=<your-password>

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update

----------------------------------------

TITLE: Granting Schema Access to Replication User
DESCRIPTION: SQL commands to grant necessary permissions to the replication user for accessing tables in the public schema.

LANGUAGE: sql
CODE:
GRANT USAGE ON SCHEMA public TO replication_user;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO replication_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO replication_user;

----------------------------------------

TITLE: Adding Multiple Columns to the Customers Table
DESCRIPTION: This snippet adds 'fax' and 'email' columns to the 'customers' table in a single ALTER TABLE statement.

LANGUAGE: sql
CODE:
ALTER TABLE customers
ADD COLUMN fax VARCHAR (25),
ADD COLUMN email VARCHAR (400);

----------------------------------------

TITLE: Simplifying RLS with Drizzle's crudPolicy for a Todo List
DESCRIPTION: This TypeScript snippet shows how to use Drizzle's crudPolicy function to simplify RLS implementation for a 'todos' table. It demonstrates how to apply RLS policies for authenticated users, allowing them to read and modify only their own todos.

LANGUAGE: typescript
CODE:
import { crudPolicy, authenticatedRole, authUid } from 'drizzle-orm/neon';

// Define a table with RLS policies
export const todos = pgTable(
  'todos',
  {
    id: bigint().primaryKey(),
    userId: text()
      .notNull()
      .default(sql`(auth.user_id())`),
    task: text().notNull(),
    isComplete: boolean().notNull().default(false),
  },
  (table) => [
    // Apply RLS policy
    crudPolicy({
      role: authenticatedRole,
      read: authUid(table.userId),
      modify: authUid(table.userId),
    }),
  ]
);

----------------------------------------

TITLE: ISFINITE with Intervals
DESCRIPTION: Example showing how to use ISFINITE() function with interval values, which always returns true as PostgreSQL doesn't support infinity intervals.

LANGUAGE: sql
CODE:
SELECT ISFINITE(INTERVAL '1 day') result;

----------------------------------------

TITLE: GROUP BY with SUM Aggregate
DESCRIPTION: Demonstrates using GROUP BY with the SUM function to calculate total payments per customer.

LANGUAGE: sql
CODE:
SELECT
  customer_id,
  SUM (amount)
FROM
  payment
GROUP BY
  customer_id
ORDER BY
  SUM (amount) DESC;

----------------------------------------

TITLE: Viewing Tablespace Information in PostgreSQL
DESCRIPTION: This psql command shows detailed information about a specific tablespace named 'ts_primary'.

LANGUAGE: shell
CODE:
\db+ ts_primary

----------------------------------------

TITLE: Running the Next.js Application
DESCRIPTION: Command to start the Next.js development server locally.

LANGUAGE: shell
CODE:
npm run dev

----------------------------------------

TITLE: Extended regexp_replace() Function Signature (Postgres 16+)
DESCRIPTION: Extended syntax available in Postgres 16 and later versions, adding start position and occurrence count parameters.

LANGUAGE: sql
CODE:
regexp_replace(source text, pattern text, replacement text [, start int, [, N int]] [, flags text]) -> text

----------------------------------------

TITLE: Renaming a View in PostgreSQL
DESCRIPTION: How to use ALTER VIEW to change the name of an existing view to a new one.

LANGUAGE: sql
CODE:
ALTER VIEW [ IF EXISTS ] view_name
RENAME TO new_view_name;

----------------------------------------

TITLE: Creating New Schema and Modifying Search Path
DESCRIPTION: Shows how to create a new schema and add it to the search path.

LANGUAGE: php
CODE:
CREATE SCHEMA sales;

LANGUAGE: sql
CODE:
SET search_path TO sales, public;

----------------------------------------

TITLE: Extracting Single JSON Property with Path Query
DESCRIPTION: Uses jsonb_path_query() to extract a specific property (name) from the JSON document using the $.name path expression.

LANGUAGE: sql
CODE:
SELECT
  jsonb_path_query(info, '$.name')
FROM
  person;

----------------------------------------

TITLE: Setting Up Sample Table with JSONB Column
DESCRIPTION: Creates a table with a JSONB column to store customer information for demonstrating JSON indexing techniques.

LANGUAGE: sql
CODE:
CREATE TABLE customer_json(
   id SERIAL PRIMARY KEY,
   data JSONB NOT NULL
);

----------------------------------------

TITLE: Extracting Year and Month with date_trunc()
DESCRIPTION: This query uses date_trunc() in combination with EXTRACT() to group sales by year and month, providing a more readable output.

LANGUAGE: sql
CODE:
SELECT
  EXTRACT(YEAR FROM date_trunc('month', sale_date)) AS year,
  EXTRACT(MONTH FROM date_trunc('month', sale_date)) AS month,
  SUM(amount) AS total_sales
FROM sales
GROUP BY year, month
ORDER BY year, month;

----------------------------------------

TITLE: Creating GIN Index for Performance Optimization
DESCRIPTION: This SQL snippet demonstrates how to create a GIN index on a JSONB column to improve query performance when working with JSON data.

LANGUAGE: sql
CODE:
CREATE INDEX idx_library_books_data ON library_books USING GIN (data);

----------------------------------------

TITLE: Generating Embeddings with OpenAI API using cURL
DESCRIPTION: This code snippet demonstrates how to use OpenAI's text-embedding-3-small model to generate an embedding for a given text string using a cURL command. It requires an OpenAI API key for authentication.

LANGUAGE: bash
CODE:
curl https://api.openai.com/v1/embeddings \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -d '{
    "input": "Your text string goes here",
    "model": "text-embedding-3-small"
  }'

----------------------------------------

TITLE: Creating a Subscription in Neon using SQL
DESCRIPTION: This SQL command creates a subscription named 'neon_subscription' in the Neon database, connecting to the Azure PostgreSQL publication.

LANGUAGE: sql
CODE:
CREATE SUBSCRIPTION neon_subscription
CONNECTION 'host=<azure-host> port=5432 dbname=<azure-database> user=replication_user password=your_secure_password'
PUBLICATION azure_publication;

----------------------------------------

TITLE: Adding Database Indexes for Performance
DESCRIPTION: PHP code for adding indexes to the feature_usage and subscriptions tables to improve query performance.

LANGUAGE: php
CODE:
Schema::table('feature_usage', function (Blueprint $table) {
    $table->index(['user_id', 'used_at']);  // Index on user_id and used_at to speed up queries
});

Schema::table('subscriptions', function (Blueprint $table) {
    $table->index(['user_id', 'started_at', 'ended_at']);  // Index on user_id, started_at, and ended_at for faster lookups
});

----------------------------------------

TITLE: Verifying PostgreSQL Table Creation with psql
DESCRIPTION: These SQL commands connect to the PostgreSQL server, switch to the 'suppliers' database, and list the newly created tables using the psql command-line tool.

LANGUAGE: sql
CODE:
psql -U postgres
\c suppliers
\dt

----------------------------------------

TITLE: Applying PostgreSQL LOWER() Function to Table Column
DESCRIPTION: This query uses the LOWER() function to convert the first_name column of the customer table to lowercase, ordering the results.

LANGUAGE: sql
CODE:
SELECT
  LOWER(first_name)
FROM
  customer
ORDER BY
  first_name;

----------------------------------------

TITLE: Converting Multiple of 24 Hours to Days
DESCRIPTION: Shows how JUSTIFY_HOURS() handles intervals that are exact multiples of 24 hours, converting them into corresponding days.

LANGUAGE: sql
CODE:
SELECT JUSTIFY_HOURS(INTERVAL '24 hours'),
       JUSTIFY_HOURS(INTERVAL '48 hours'),
       JUSTIFY_HOURS(INTERVAL '72 hours');

----------------------------------------

TITLE: Querying Account-Level Metrics Endpoint
DESCRIPTION: Base URL endpoint for retrieving account-level consumption metrics across all projects in an organization.

LANGUAGE: bash
CODE:
https://console.neon.tech/api/v2/consumption_history/account

----------------------------------------

TITLE: Using Column Aliases
DESCRIPTION: Example of using column aliases to provide a custom name for the concatenated full name column.

LANGUAGE: sql
CODE:
SELECT
   first_name || ' ' || last_name full_name,
   email
FROM
   customer;

----------------------------------------

TITLE: Creating a New .NET Console Application
DESCRIPTION: This bash command creates a new .NET console application named NeonLibraryExample and changes to the newly created directory.

LANGUAGE: bash
CODE:
dotnet new console -n NeonLibraryExample
cd NeonLibraryExample

----------------------------------------

TITLE: AVG() Function with CAST for Readable Output
DESCRIPTION: Shows how to use the CAST operator to format the output of the AVG() function for better readability.

LANGUAGE: sql
CODE:
SELECT AVG(amount)::numeric(10,2)
FROM payment;

----------------------------------------

TITLE: Configuring Drizzle ORM with Neon Serverless Driver
DESCRIPTION: This JavaScript snippet shows how to set up Drizzle ORM with the Neon serverless driver. It imports necessary modules, configures WebSocket for Neon, initializes the SQL client with the database URL, and creates a Drizzle instance for database operations.

LANGUAGE: javascript
CODE:
import 'dotenv/config';
import { drizzle } from 'drizzle-orm/neon-http';
import { neon } from '@neondatabase/serverless';

import ws from 'ws';
neonConfig.webSocketConstructor = ws;

// To work in edge environments (Cloudflare Workers, Vercel Edge, etc.), enable querying over fetch
// neonConfig.poolQueryViaFetch = true

const sql = neon(process.env.DATABASE_URL);

export const db = drizzle({ client: sql });

----------------------------------------

TITLE: Inserting Sample Data for jsonb_insert() Examples
DESCRIPTION: SQL statement to insert sample data into the employee_profiles table for jsonb_insert() demonstrations.

LANGUAGE: SQL
CODE:
INSERT INTO employee_profiles(id, profiles)
VALUES
   (1, '{"name": "John", "skills" : ["PostgreSQL", "API"]}'),
   (2, '{"name": "Jane", "skills" : ["SQL","Java"]}')
RETURNING *;

----------------------------------------

TITLE: Listing Tables using psql Commands
DESCRIPTION: Various psql commands to display tables and their details in the current database. The \dt command shows basic table information while \dt+ includes additional details like size and description.

LANGUAGE: sql
CODE:
\dt

LANGUAGE: sql
CODE:
\dt+

LANGUAGE: sql
CODE:
\d table_name

LANGUAGE: sql
CODE:
\d+ table_name

----------------------------------------

TITLE: Truncating Timestamp to Minute Precision
DESCRIPTION: Demonstrates truncating a timestamp value to minute precision using DATE_TRUNC function.

LANGUAGE: sql
CODE:
SELECT DATE_TRUNC('minute', TIMESTAMP '2017-03-17 02:09:30');

----------------------------------------

TITLE: Creating Index with Unaccent Function
DESCRIPTION: Creates an index using the immutable unaccent wrapper function for improved query performance.

LANGUAGE: sql
CODE:
CREATE INDEX idx_products_name_unaccent ON products (f_unaccent(name));

----------------------------------------

TITLE: Creating Orders Table in Neon Postgres
DESCRIPTION: SQL statement to create a sample 'orders' table in Neon Postgres for tracking customer orders. The table includes fields for customer email, product name, quantity, status, and creation timestamp.

LANGUAGE: sql
CODE:
CREATE TABLE orders (
    customer_email VARCHAR(255) NOT NULL,
    product_name VARCHAR(100) NOT NULL,
    quantity INTEGER NOT NULL,
    status VARCHAR(50) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

----------------------------------------

TITLE: Configuring Program.cs
DESCRIPTION: Main application configuration including database context and middleware setup.

LANGUAGE: csharp
CODE:
using Microsoft.EntityFrameworkCore;
using NeonEfExample.Data;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();

builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

app.UseSwagger();
app.UseSwaggerUI();
app.UseAuthorization();
app.MapControllers();

if (app.Environment.IsDevelopment())
{
    app.Run("http://localhost:5001");
}
else
{
    app.UseHttpsRedirection();
    app.Run();
}

----------------------------------------

TITLE: LPAD for Zero-Padding Numbers
DESCRIPTION: Examples demonstrating how to pad numbers with leading zeros using LPAD, including both string and number inputs.

LANGUAGE: sql
CODE:
SELECT LPAD('123',5,'0') result;

LANGUAGE: sql
CODE:
SELECT LPAD(123::text,5,'0') result;

----------------------------------------

TITLE: Querying PostgreSQL Indexes
DESCRIPTION: SQL query to display indexes for a specific table, showing table name, index name, and index definition.

LANGUAGE: sql
CODE:
SELECT
    tablename,
    indexname,
    indexdef
FROM
    pg_indexes
WHERE
    tablename = 'employees';

----------------------------------------

TITLE: Creating User Mapping
DESCRIPTION: Maps a local Neon user to a remote database user with authentication credentials.

LANGUAGE: sql
CODE:
CREATE USER MAPPING FOR CURRENT_USER
SERVER production_db
OPTIONS (user 'read_only_user', password 'secure_password');

----------------------------------------

TITLE: Installing Neon Serverless Driver
DESCRIPTION: NPM command to install the Neon Serverless Driver for database connectivity.

LANGUAGE: bash
CODE:
npm install @neondatabase/serverless

----------------------------------------

TITLE: Querying Neon Active Regions via API
DESCRIPTION: API request to retrieve a list of supported Neon regions. The endpoint returns region details including ID, name, and geographical coordinates.

LANGUAGE: bash
CODE:
curl --request GET \
     --url https://console.neon.tech/api/v2/regions \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $NEON_API_KEY'

----------------------------------------

TITLE: Installing Dependencies and Starting Development Server
DESCRIPTION: Commands to change into the project directory, install dependencies, and start the development server.

LANGUAGE: bash
CODE:
cd payload-neon-ecommerce-store
yarn && yarn dev

----------------------------------------

TITLE: Creating Rails View to Display Database Version
DESCRIPTION: Implements a view template that displays the PostgreSQL version retrieved from the database.

LANGUAGE: ruby
CODE:
<% if @version %>
  <p><%= @version %></p>
<% end %>

----------------------------------------

TITLE: Terminating Database Connections
DESCRIPTION: SQL query to terminate all active connections to the target database

LANGUAGE: sql
CODE:
SELECT
    pg_terminate_backend (pid)
FROM
    pg_stat_activity
WHERE
    datname = 'db';

----------------------------------------

TITLE: Creating a Compute via API
DESCRIPTION: Example cURL command for creating a new compute endpoint using the Neon API.

LANGUAGE: bash
CODE:
curl -X 'POST' \
  'https://console.neon.tech/api/v2/projects/hidden-cell-763301/endpoints' \
  -H 'accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY" \
  -H 'Content-Type: application/json' \
  -d '{
  "endpoint": {
    "branch_id": "br-blue-tooth-671580",
    "type": "read_write"
  }
}'

----------------------------------------

TITLE: Creating a New Laravel Zero Project with Composer
DESCRIPTION: Commands to create a new Laravel Zero project named 'todo-cli' using Composer, change into the project directory, and rename the default namespace.

LANGUAGE: bash
CODE:
composer create-project laravel-zero/laravel-zero todo-cli
cd todo-cli
php application app:rename todo

----------------------------------------

TITLE: Creating Sample Tables for NATURAL JOIN Examples
DESCRIPTION: SQL statements to create and populate 'categories' and 'products' tables for demonstrating NATURAL JOIN usage.

LANGUAGE: sql
CODE:
CREATE TABLE categories (
  category_id SERIAL PRIMARY KEY,
  category_name VARCHAR (255) NOT NULL
);

CREATE TABLE products (
  product_id serial PRIMARY KEY,
  product_name VARCHAR (255) NOT NULL,
  category_id INT NOT NULL,
  FOREIGN KEY (category_id) REFERENCES categories (category_id)
);

INSERT INTO categories (category_name)
VALUES
  ('Smartphone'),
  ('Laptop'),
  ('Tablet'),
  ('VR')
RETURNING *;

INSERT INTO products (product_name, category_id)
VALUES
  ('iPhone', 1),
  ('Samsung Galaxy', 1),
  ('HP Elite', 2),
  ('Lenovo Thinkpad', 2),
  ('iPad', 3),
  ('Kindle Fire', 3)
RETURNING *;

----------------------------------------

TITLE: Creating RLS Policies for Tenants and Users Tables in SQL
DESCRIPTION: This snippet defines Row-Level Security (RLS) policies for 'tenants' and 'users' tables using Drizzle ORM. It demonstrates how to use JWT claims to enforce access control, ensuring users can only access their own data or data belonging to their tenant.

LANGUAGE: typescript
CODE:
import { sql } from 'drizzle-orm';
import { pgTable, text, uuid } from 'drizzle-orm/pg-core';
import { crudPolicy } from './drizzle-orm-neon';
import { authenticatedRole } from 'drizzle-orm/neon';

export const tenants = pgTable(
  'tenants',
  {
    id: uuid().primaryKey(),
    name: text(),
  },
  (table) => [
    crudPolicy({
      role: authenticatedRole,
      read: sql`(select auth.session()->>'tenant_id' = ${table.id}::text)`,
      modify: sql`(select auth.session()->>'tenant_id' = ${table.id}::text)`,
    }),
  ]
);

export const users = pgTable(
  'users',
  {
    tenantId: uuid()
      .notNull()
      .references(() => tenants.id),
    id: uuid().primaryKey(),
    name: text(),
    email: text(),
  },
  (table) => [
    crudPolicy({
      role: authenticatedRole,
      read: sql`(select auth.user_id() = ${table.id}::text)`,
      modify: sql`(select auth.user_id() = ${table.id}::text)`,
    }),
  ]
);

----------------------------------------

TITLE: Dropping a Role in PostgreSQL
DESCRIPTION: This snippet shows the basic syntax for dropping a role in PostgreSQL. It includes the optional IF EXISTS clause to prevent errors if the role doesn't exist.

LANGUAGE: sql
CODE:
DROP ROLE [IF EXISTS] target_role;

----------------------------------------

TITLE: Installing Neon CLI in GitHub Actions (Homebrew)
DESCRIPTION: YAML configuration for installing or upgrading Neon CLI in GitHub Actions using Homebrew.

LANGUAGE: yaml
CODE:
- name: Install Neon CLI
  run: brew install neonctl || brew upgrade neonctl

----------------------------------------

TITLE: Configuring Drizzle Kit for Migrations
DESCRIPTION: Creates a 'drizzle.config.ts' file to configure Drizzle Kit for schema management and migrations.

LANGUAGE: typescript
CODE:
import type { Config } from 'drizzle-kit';
import 'dotenv/config';

export default {
  schema: './db/schema.ts',
  out: './db/migrations',
  dialect: 'postgresql',
  dbCredentials: {
    url: process.env.DATABASE_URL!,
  },
} satisfies Config;

----------------------------------------

TITLE: Dropping Single View
DESCRIPTION: Example of dropping a single view using DROP VIEW statement.

LANGUAGE: sql
CODE:
DROP VIEW comedy_film;

----------------------------------------

TITLE: Updating TodoList Component with Authorization
DESCRIPTION: Modify the TodoList component to use the TodoPolicy for authorizing update and delete actions.

LANGUAGE: php
CODE:
$toggleComplete = action(function (Todo $todo) {
    if (auth()->user()->cannot('update', $todo)) {
        return;
    }
    $todo->update(['is_completed' => !$todo->is_completed]);
});

$deleteTodo = action(function (Todo $todo) {
    if (auth()->user()->cannot('delete', $todo)) {
        return;
    }
    $todo->delete();
});

----------------------------------------

TITLE: Displaying Schema Search Path
DESCRIPTION: Demonstrates how to view the current schema search path configuration.

LANGUAGE: php
CODE:
SHOW search_path;

----------------------------------------

TITLE: GROUP BY with COUNT Function
DESCRIPTION: Illustrates using GROUP BY with COUNT to determine the number of payments processed by each staff member.

LANGUAGE: sql
CODE:
SELECT
	staff_id,
	COUNT (payment_id)
FROM
	payment
GROUP BY
	staff_id;

----------------------------------------

TITLE: Creating Employees Table
DESCRIPTION: Creates a table structure for storing employee data with columns for ID, name, and salary.

LANGUAGE: sql
CODE:
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    salary NUMERIC NOT NULL
);

----------------------------------------

TITLE: Removing Specific Characters from Order IDs in PostgreSQL
DESCRIPTION: Shows how to use trim() to remove specific characters (in this case, '#') from both ends of order IDs.

LANGUAGE: sql
CODE:
WITH order_ids(id) AS (
  VALUES
    ('###ORDER-123###'),
    ('###ORDER-456###'),
    ('###ORDER-789###')
)
SELECT trim(id, '#') AS cleaned_id
FROM order_ids;

----------------------------------------

TITLE: Configuring Compute Size with Neon CLI
DESCRIPTION: This snippet demonstrates how to use the new '-cu' option in the Neon CLI to set compute size when creating a branch. It shows an example of setting an autoscaling range from 0.5 to 3 compute units.

LANGUAGE: bash
CODE:
neon branches add-compute main --cu 0.5-3

----------------------------------------

TITLE: Schema Diff Example in PostgreSQL
DESCRIPTION: Example showing schema changes detected by the Schema Diff GitHub Action, including the addition of a deleted_at timestamp column and modifications to table defaults

LANGUAGE: diff
CODE:
Index: neondb-schema.sql
===================================================================
--- neondb-schema.sql	Branch main
+++ neondb-schema.sql	Branch preview/pr-9-feat/add-soft-delete
@@ -111,9 +111,10 @@
     title text NOT NULL,
     content text NOT NULL,
     user_id integer NOT NULL,
     created_at timestamp without time zone DEFAULT now() NOT NULL,
-    updated_at timestamp without time zone DEFAULT now() NOT NULL
+    updated_at timestamp without time zone DEFAULT now() NOT NULL,
+    deleted_at timestamp without time zone
);


 ALTER TABLE public.posts OWNER TO neondb_owner;
@@ -180,5 +181,5 @@
 --
 -- Name: __drizzle_migrations id; Type: DEFAULT; Schema: drizzle; Owner: neondb_owner
 --

-ALTER TABLE ONLY drizzle.__drizzle_migrations ALTER COLUMN id SET DEFAULT nextval('drizzle.__drizzle_m
\ No newline at end of file
+ALTER TABLE ONLY drizzle.__drizzle_migrations ALTER COLUMN
\ No newline at end of file

----------------------------------------

TITLE: Defining PostgreSQL LOWER() Function Syntax
DESCRIPTION: This snippet shows the basic syntax of the PostgreSQL LOWER() function, which takes a text input and returns a lowercase version.

LANGUAGE: sql
CODE:
LOWER(text)

----------------------------------------

TITLE: Creating Read Replica Using Neon CLI
DESCRIPTION: This command demonstrates how to create a read replica for a specified branch using the Neon CLI. It adds a new compute endpoint of type 'read_only' to the branch named 'mybranch'.

LANGUAGE: bash
CODE:
neon branches add-compute mybranch --type read_only

----------------------------------------

TITLE: Generating Version 1 Time-based UUIDs
DESCRIPTION: Functions for generating time-based Version 1 UUIDs using either the system MAC address or a random multicast MAC address.

LANGUAGE: sql
CODE:
SELECT uuid_generate_v1();
SELECT uuid_generate_v1mc();

----------------------------------------

TITLE: Generating Version 3 Name-based UUIDs with MD5
DESCRIPTION: Function for generating deterministic Version 3 UUIDs using MD5 hashing of a namespace and name combination.

LANGUAGE: sql
CODE:
SELECT uuid_generate_v3(uuid_ns_url(), 'https://example.com');

----------------------------------------

TITLE: Replacing Query Parameters for Performance in TypeScript/JavaScript
DESCRIPTION: This function replaces query parameters in a SQL query string for potentially better performance when using Knex with Neon. It handles both string and non-string parameters.

LANGUAGE: tsx
CODE:
function replaceQueryParams(query, values) {
  let replacedQuery = query;
  values.forEach((tmpParameter) => {
    if (typeof tmpParameter === 'string') {
      replacedQuery = replacedQuery.replace('?', `'${tmpParameter}'`);
    } else {
      replacedQuery = replacedQuery.replace('?', tmpParameter);
    }
  });
  return replacedQuery;
}

// So instead of this
await client.raw(text, values);

// Do this to get better performance
await client.raw(replaceQueryParams(text, values));

----------------------------------------

TITLE: Subscribing to Neon Blog Feed
DESCRIPTION: RSS feed URL for following Neon's blog posts and news updates.

LANGUAGE: bash
CODE:
https://neon.tech/blog/rss.xml

----------------------------------------

TITLE: PostgreSQL LEFT JOIN Example with Film and Inventory Tables
DESCRIPTION: Demonstrates a LEFT JOIN between the film and inventory tables, selecting film_id, title, and inventory_id columns.

LANGUAGE: sql
CODE:
SELECT
  film.film_id,
  film.title,
  inventory.inventory_id
FROM
  film
  LEFT JOIN inventory ON inventory.film_id = film.film_id
ORDER BY
  film.title;

----------------------------------------

TITLE: Configuring Multiple Read Replicas
DESCRIPTION: JavaScript code showing how to configure multiple read replicas in Prisma Client

LANGUAGE: javascript
CODE:
const prisma = new PrismaClient().$extends(
  readReplicas({
    url: [process.env.DATABASE_REPLICA_URL_1, process.env.DATABASE_REPLICA_URL_2],
  })
);

----------------------------------------

TITLE: Schema Permission Management
DESCRIPTION: Commands for granting schema usage and creation privileges to users.

LANGUAGE: sql
CODE:
GRANT USAGE ON SCHEMA schema_name
TO role_name;

LANGUAGE: sql
CODE:
GRANT CREATE ON SCHEMA schema_name
TO user_name;

----------------------------------------

TITLE: Basic PostgreSQL WHERE Clause Syntax
DESCRIPTION: Demonstrates the basic syntax of using a WHERE clause in a SELECT statement to filter rows based on a condition.

LANGUAGE: sql
CODE:
SELECT
  select_list
FROM
  table_name
WHERE
  condition
ORDER BY
  sort_expression;

----------------------------------------

TITLE: Basic Usage of STATEMENT_TIMESTAMP() Function in PostgreSQL
DESCRIPTION: This snippet demonstrates the basic usage of the STATEMENT_TIMESTAMP() function to retrieve the start time of the current statement. It returns a timestamp with time zone.

LANGUAGE: sql
CODE:
SELECT STATEMENT_TIMESTAMP();

----------------------------------------

TITLE: Creating Users Table in SQL
DESCRIPTION: SQL command to create the 'users' table for storing user information in the referral system database.

LANGUAGE: sql
CODE:
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(100),
    points INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

----------------------------------------

TITLE: Creating Task Model and Migration
DESCRIPTION: Generates a Task model with migration and defines the schema for the tasks table.

LANGUAGE: bash
CODE:
php artisan make:model Task -m

LANGUAGE: php
CODE:
public function up()
{
    Schema::create('tasks', function (Blueprint $table) {
        $table->id();
        $table->foreignId('user_id')->constrained()->onDelete('cascade');
        $table->string('title');
        $table->text('description')->nullable();
        $table->enum('status', ['pending', 'in_progress', 'completed'])->default('pending');
        $table->date('due_date')->nullable();
        $table->integer('priority')->default(1);
        $table->timestamps();
    });
}

----------------------------------------

TITLE: Getting Current Time Functions
DESCRIPTION: Examples of functions to retrieve current time with and without time zone information.

LANGUAGE: sql
CODE:
SELECT CURRENT_TIME;
SELECT CURRENT_TIME(5);
SELECT LOCALTIME;
SELECT LOCALTIME(0);

----------------------------------------

TITLE: Checking Python Environment in Azure Data Studio Notebook
DESCRIPTION: This code snippet prints the Python version and installation directory in an Azure Data Studio Notebook. It's useful for verifying the Python environment setup.

LANGUAGE: python
CODE:
import os
import sys
print(sys.version_info)
print(os.path.dirname(sys.executable))

----------------------------------------

TITLE: MIN() with GROUP BY
DESCRIPTION: Demonstrates using MIN() with GROUP BY to find lowest replacement costs by category.

LANGUAGE: sql
CODE:
SELECT
  name category,
  MIN(replacement_cost) replacement_cost
FROM
  category
  INNER JOIN film_category USING (category_id)
  INNER JOIN film USING (film_id)
GROUP BY
  name
ORDER BY
  name;

----------------------------------------

TITLE: Creating Ascending Sequence
DESCRIPTION: Creates an ascending sequence starting from 100 with an increment of 5.

LANGUAGE: sql
CODE:
CREATE SEQUENCE mysequence
INCREMENT 5
START 100;

----------------------------------------

TITLE: Creating Logical Replication Slot in Neon
DESCRIPTION: SQL command to create a logical replication slot named 'sequin_slot' using pgoutput plugin

LANGUAGE: sql
CODE:
SELECT pg_create_logical_replication_slot('sequin_slot', 'pgoutput');

----------------------------------------

TITLE: Creating a Rails Project with PostgreSQL Database
DESCRIPTION: Uses the Rails CLI to create a new Rails project with PostgreSQL as the database type.

LANGUAGE: shell
CODE:
gem install rails
rails new neon-with-rails --database=postgresql

----------------------------------------

TITLE: PostgreSQL Database Connection
DESCRIPTION: Command to connect to PostgreSQL database using psql client with postgres user.

LANGUAGE: bash
CODE:
psql -U postgres

----------------------------------------

TITLE: Creating Applicant Model
DESCRIPTION: Laravel Eloquent model for the Applicant with relationships to Education and WorkExperience models.

LANGUAGE: PHP
CODE:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Applicant extends Model
{
    use HasFactory;

    protected $fillable = [
        'first_name',
        'last_name',
        'email',
        'additional_info'
    ];

    protected $casts = [
        'additional_info' => 'array',
    ];

    public function educations()
    {
        return $this->hasMany(Education::class);
    }

    public function workExperiences()
    {
        return $this->hasMany(WorkExperience::class);
    }
}

----------------------------------------

TITLE: Installing Laravel Breeze and Livewire
DESCRIPTION: Commands to install Laravel Breeze authentication starter kit and Livewire package

LANGUAGE: bash
CODE:
composer require laravel/breeze --dev
php artisan breeze:install blade
composer require livewire/livewire

----------------------------------------

TITLE: Unix Password File Entry
DESCRIPTION: Example of PostgreSQL password file entry for Unix-like systems with specific database credentials.

LANGUAGE: css
CODE:
localhost:5432:dvdrental:postgres:moreSecure

----------------------------------------

TITLE: Creating a Tablespace in PostgreSQL
DESCRIPTION: This snippet demonstrates the basic syntax for creating a new tablespace in PostgreSQL. It specifies the tablespace name, owner, and location.

LANGUAGE: sql
CODE:
CREATE TABLESPACE tablespace_name
OWNER user_name
LOCATION directory_path;

----------------------------------------

TITLE: Creating Table with Single-Column Primary Key in PostgreSQL
DESCRIPTION: This snippet demonstrates how to create a table with a primary key constraint on a single column. The 'order_id' is set as a SERIAL type to automatically generate unique integers.

LANGUAGE: sql
CODE:
CREATE TABLE orders(
  order_id SERIAL PRIMARY KEY,
  customer_id VARCHAR(255) NOT NULL,
  order_date DATE NOT NULL
);

----------------------------------------

TITLE: POWER() with Decimal Values
DESCRIPTION: Demonstrates using POWER() function with decimal numbers.

LANGUAGE: sql
CODE:
SELECT POWER(2.5, 2);

----------------------------------------

TITLE: Simple PostgreSQL INITCAP() Function Example
DESCRIPTION: A basic example of using the INITCAP() function to convert a string to proper case.

LANGUAGE: sql
CODE:
SELECT INITCAP('hello john');

----------------------------------------

TITLE: Basic LOCALTIMESTAMP Syntax
DESCRIPTION: Shows the basic syntax of the LOCALTIMESTAMP function which accepts an optional precision parameter for fractional seconds.

LANGUAGE: sql
CODE:
LOCALTIMESTAMP(precision)

----------------------------------------

TITLE: Creating and Populating Sample Tables in PostgreSQL
DESCRIPTION: Creates two identical tables 'foo' and 'bar' with primary key and name columns, then populates them with sample data.

LANGUAGE: sql
CODE:
CREATE TABLE foo (
  id INT PRIMARY KEY,
  name VARCHAR (50)
);

CREATE TABLE bar (
  id INT PRIMARY KEY,
  name VARCHAR (50)
);

INSERT INTO foo (id, name)
VALUES
  (1, 'a'),
  (2, 'b');

INSERT INTO bar (id, name)
VALUES
  (1, 'a'),
  (2, 'b');

----------------------------------------

TITLE: Changing Database Owner with ALTER DATABASE in PostgreSQL
DESCRIPTION: This example demonstrates how to change the owner of a database using the ALTER DATABASE statement. The new owner can be specified as a new user, the current user, or the session user.

LANGUAGE: sql
CODE:
ALTER DATABASE database_name
OWNER TO new_owner | current_user | session_user;

----------------------------------------

TITLE: PL/pgSQL IF-THEN-ELSIF Statement Example
DESCRIPTION: Uses an IF-THEN-ELSIF statement to categorize a film's length and display a description based on the length.

LANGUAGE: sql
CODE:
do $$
declare
   v_film film%rowtype;
   len_description varchar(100);
begin

  select * from film
  into v_film
  where film_id = 100;

  if not found then
     raise notice 'Film not found';
  else
      if v_film.length >0 and v_film.length <= 50 then
		 len_description := 'Short';
	  elsif v_film.length > 50 and v_film.length < 120 then
		 len_description := 'Medium';
	  elsif v_film.length > 120 then
		 len_description := 'Long';
	  else
		 len_description := 'N/A';
	  end if;

	  raise notice 'The % film is %.',
	     v_film.title,
	     len_description;
  end if;
end $$;

----------------------------------------

TITLE: Generating Complex Random Data in Postgres SQL
DESCRIPTION: Demonstrates how to combine random() with other functions to generate more complex random data, such as events with random types, severities, and timestamps.

LANGUAGE: sql
CODE:
CREATE TABLE random_events (
  id SERIAL PRIMARY KEY,
  event_type TEXT,
  severity INTEGER,
  timestamp TIMESTAMP
);

INSERT INTO random_events (event_type, severity, timestamp)
SELECT
  (ARRAY['Error', 'Warning', 'Info'])[random(1, 3)],
  random(1, 5),
  NOW() - (random() * INTERVAL '24 hours')
FROM generate_series(1, 100);

SELECT * FROM random_events
ORDER BY timestamp DESC
LIMIT 4;

----------------------------------------

TITLE: Creating ASP.NET Core Web API Project
DESCRIPTION: Commands to create a new ASP.NET Core Web API project and install necessary packages for authentication and Postgres integration.

LANGUAGE: bash
CODE:
dotnet new webapi -n NeonApi
cd NeonApi

dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Microsoft.EntityFrameworkCore
dotnet add package Microsoft.IdentityModel.Tokens
dotnet add package System.IdentityModel.Tokens.Jwt

----------------------------------------

TITLE: Basic NULLIF Function Syntax
DESCRIPTION: Demonstrates the basic syntax of the NULLIF function which returns null if both arguments are equal, otherwise returns the first argument.

LANGUAGE: sql
CODE:
NULLIF(argument_1,argument_2);

----------------------------------------

TITLE: Basic regexp_replace() Function Signature
DESCRIPTION: The basic syntax of the regexp_replace() function that takes source text, pattern, replacement text, and optional flags as parameters.

LANGUAGE: sql
CODE:
regexp_replace(source text, pattern text, replacement text [, flags text]) -> text

----------------------------------------

TITLE: Creating Publication for Multiple Tables in SQL
DESCRIPTION: This SQL command shows how to create a publication for multiple tables in PostgreSQL by specifying a comma-separated list of tables. This method provides more control over which tables are included in the publication.

LANGUAGE: sql
CODE:
CREATE PUBLICATION my_publication FOR TABLE users, departments;

----------------------------------------

TITLE: Basic Branch Reset Using CLI
DESCRIPTION: Command to reset a branch to its parent's state using the Neon CLI. Requires branch ID or name.

LANGUAGE: bash
CODE:
neon branches reset <id|name> --parent

----------------------------------------

TITLE: Querying Specific Key from PostgreSQL hstore Column
DESCRIPTION: Demonstrates how to query the value of a specific key from an hstore column using the '->' operator.

LANGUAGE: sql
CODE:
SELECT
	attr -> 'ISBN-13' AS isbn
FROM
	books;

----------------------------------------

TITLE: Using ASCII() with a String in PostgreSQL
DESCRIPTION: This example shows that when a string is passed to the ASCII() function, it returns the ASCII code of only the first character in the string.

LANGUAGE: sql
CODE:
SELECT
    ASCII( 'ABC' );

----------------------------------------

TITLE: Creating Angles Table
DESCRIPTION: Creates a table structure for storing angle values in radians.

LANGUAGE: sql
CODE:
CREATE TABLE angles (
    id SERIAL PRIMARY KEY,
    angle_radians NUMERIC
);

----------------------------------------

TITLE: Modifying Array Elements in PostgreSQL
DESCRIPTION: This SQL update statement demonstrates how to modify array elements using the array_replace function.

LANGUAGE: sql
CODE:
UPDATE products
SET categories = array_replace(categories, 'Audio', 'Sound')
WHERE 'Audio' = ANY (categories)
RETURNING *;

----------------------------------------

TITLE: Configuring Neon MCP Server in Cline (Windows)
DESCRIPTION: JSON configuration for setting up Neon MCP Server in Cline on Windows. It uses the cmd command to execute npx and start the Neon MCP server.

LANGUAGE: json
CODE:
{
  "mcpServers": {
    "neon": {
      "command": "cmd",
      "args": ["/c", "npx", "-y", "@neondatabase/mcp-server-neon", "start", "<YOUR_NEON_API_KEY>"]
    }
  }
}

----------------------------------------

TITLE: Basic FORMAT Function Syntax in PostgreSQL
DESCRIPTION: Demonstrates the basic syntax of the PostgreSQL FORMAT() function for string formatting.

LANGUAGE: sql
CODE:
FORMAT(format_string, value1, value2, ...)

----------------------------------------

TITLE: Creating a Publication for Multiple Tables in PostgreSQL
DESCRIPTION: This command creates a publication that publishes all changes in two tables: 'users' and 'departments'.

LANGUAGE: sql
CODE:
CREATE PUBLICATION my_publication FOR TABLE users, departments;

----------------------------------------

TITLE: Using Definition List Component in Markdown
DESCRIPTION: Demonstrates how to use the DefinitionList component to create accessible and structured definition lists in the documentation.

LANGUAGE: markdown
CODE:
<DefinitionList>

Scenario executor
: First definition
: Second definition

Soak test
: First and only definition

Smoke test
Another term for smoke test
: First definition for both terms
: Second definition for both terms
: ...n definition for both terms

[Stress test](/)
: First and **only** definition for both terms with additional markup <br/> Read more: [link](/)

</DefinitionList>

----------------------------------------

TITLE: Requesting Transfer URL for Neon Auth Project Ownership
DESCRIPTION: This snippet demonstrates how to request a transfer URL to transfer ownership of your Neon-managed auth project to your own auth provider account. It requires the project ID and auth provider.

LANGUAGE: bash
CODE:
curl --request POST \
     --url 'https://console.neon.tech/api/v2/projects/auth/transfer_ownership' \
     --header 'authorization: Bearer $NEON_API_KEY' \
     --header 'content-type: application/json' \
     --data '{
       "project_id": "project-id",
       "auth_provider": "stack"
     }' | jq

----------------------------------------

TITLE: Configuring Database Connection with Neon and Drizzle
DESCRIPTION: TypeScript code to set up the database connection using Neon serverless driver and Drizzle ORM.

LANGUAGE: typescript
CODE:
import { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';
import { UserMessages } from './schema';

if (!process.env.DATABASE_URL) {
  throw new Error('DATABASE_URL must be a Neon postgres connection string');
}

const sql = neon(process.env.DATABASE_URL);
export const db = drizzle(sql, {
  schema: { UserMessages },
});

----------------------------------------

TITLE: Creating a Subscription in PostgreSQL
DESCRIPTION: This command creates a subscription named 'my_subscription' that connects to a publication named 'my_publication'. The connection string should be replaced with the actual database connection details.

LANGUAGE: sql
CODE:
CREATE SUBSCRIPTION my_subscription
CONNECTION 'postgresql://username:password@host:port/dbname'
PUBLICATION my_publication;

----------------------------------------

TITLE: Renaming Roles with ALTER ROLE in PostgreSQL
DESCRIPTION: This snippet shows how to use ALTER ROLE to rename an existing role in PostgreSQL. It includes the basic syntax and an example of renaming a role from 'calf' to 'elephant'.

LANGUAGE: SQL
CODE:
ALTER ROLE role_name
TO new_name;

LANGUAGE: SQL
CODE:
ALTER ROLE calf
RENAME TO elephant;

----------------------------------------

TITLE: Listing Branches in Table Format
DESCRIPTION: Lists branches in a Neon project using the default table output format showing basic branch information.

LANGUAGE: bash
CODE:
neon branches list --project-id solitary-leaf-288182

----------------------------------------

TITLE: Styling Todo App with CSS
DESCRIPTION: This CSS code provides styles for the todo application, including layout, input fields, buttons, and todo list items. It creates a clean and user-friendly interface.

LANGUAGE: css
CODE:
/* Base styles */
body {
  font-family: Arial, sans-serif;
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f5f5f5;
}

/* Container styles */
.todo-container {
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Input area styles */
.todo-input {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}

input[type='text'] {
  flex-grow: 1;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

button {
  padding: 8px 16px;
  background-color: #4caf50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s;
}

button:hover {
  background-color: #45a049;
}

/* Todo list styles */
.todo-list {
  list-style: none;
  padding: 0;
}

.todo-item {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 10px;
  border-bottom: 1px solid #eee;
}

.todo-item:last-child {
  border-bottom: none;
}

.todo-item.completed span {
  text-decoration: line-through;
  color: #888;
}

/* Delete button styles */
.delete-btn {
  background-color: #f44336;
  margin-left: auto;
}

.delete-btn:hover {
  background-color: #da190b;
}

/* Utility styles */
.loading {
  text-align: center;
  color: #666;
  padding: 20px;
}

.error {
  color: #f44336;
  margin-top: 10px;
}

----------------------------------------

TITLE: Verifying Subscription in SQL
DESCRIPTION: SQL command to verify that the subscription has been created successfully by querying the pg_stat_subscription system view.

LANGUAGE: sql
CODE:
SELECT * FROM pg_stat_subscription;

----------------------------------------

TITLE: Listing Databases with Neon CLI
DESCRIPTION: Lists all databases in a specified branch using the Neon CLI list command. The command displays database name, owner name, and creation timestamp.

LANGUAGE: bash
CODE:
neon databases list --branch br-autumn-dust-190886

----------------------------------------

TITLE: Example Operations List Output in Neon CLI
DESCRIPTION: Demonstrates the output format when listing operations, showing operation IDs, actions, status, and creation timestamps in a tabular format.

LANGUAGE: bash
CODE:
neon operations list
┌──────────────────────────────────────┬────────────────────┬──────────┬──────────────────────┐
│ Id                                   │ Action             │ Status   │ Created At           │
├──────────────────────────────────────┼────────────────────┼──────────┼──────────────────────┤
│ fce8642e-259e-4662-bdce-518880aee723 │ apply_config       │ finished │ 2023-06-20T00:45:19Z │
├──────────────────────────────────────┼────────────────────┼──────────┼──────────────────────┤
│ dc1dfb0c-b854-474b-be20-2ea1d2172563 │ apply_config       │ finished │ 2023-06-20T00:43:17Z │
├──────────────────────────────────────┼────────────────────┼──────────┼──────────────────────┤
│ 7a83e300-cf5f-4c1a-b9b5-569b6d6feab9 │ suspend_compute    │ finished │ 2023-06-19T23:50:56Z │
└──────────────────────────────────────┴────────────────────┴──────────┴──────────────────────┘

----------------------------------------

TITLE: Inserting JSON Data into PostgreSQL Table
DESCRIPTION: Inserts a row with JSON data into the 'products' table, demonstrating how to store JSON objects in a JSONB column.

LANGUAGE: SQL
CODE:
INSERT INTO products(name, properties)
VALUES('Ink Fusion T-Shirt','{"color": "white", "size": ["S","M","L","XL"]}')
RETURNING *;

----------------------------------------

TITLE: Check WAL Level Configuration in SQL
DESCRIPTION: Verifies that logical replication is enabled by checking the wal_level parameter.

LANGUAGE: sql
CODE:
SHOW wal_level;

----------------------------------------

TITLE: Configuring GitHub Actions for Continuous Deployment to Amazon ECS
DESCRIPTION: Sets up a GitHub Actions workflow for automatically deploying the Astro application to Amazon ECS on AWS Fargate. It builds and pushes the Docker image to ECR, updates the ECS task definition, and deploys the updated service.

LANGUAGE: yaml
CODE:
name: Deploy Astro to Amazon ECS on AWS Fargate

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  # AWS ECS
  AWS_CONTAINER_NAME_NAME: astro-app
  AWS_ECS_CLUSTER_NAME: astro-cluster
  AWS_ECS_SERVICE_NAME: astro-service
  AWS_ECS_TASK_DEFINITION: ./task-definition.json

  # AWS ECR
  AWS_ECR_REPOSITORY_NAME: astro-repo

  # AWS Account
  AWS_REGION: us-west-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Load Environment Variables
        id: environment-variables
        env:
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
          POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          npm install
          node ./env.mjs

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
          AWS_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY_NAME:$IMAGE_TAG .
          docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY_NAME:$IMAGE_TAG
          echo "image=$AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          container-name: ${{ env.AWS_CONTAINER_NAME_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          task-definition: ${{ env.AWS_ECS_TASK_DEFINITION }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          service: ${{ env.AWS_ECS_SERVICE_NAME }}
          cluster: ${{ env.AWS_ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
          task-definition: ${{ steps.task-def.outputs.task-definition }}

----------------------------------------

TITLE: Creating a Neon Project with Quotas
DESCRIPTION: This curl command demonstrates how to create a new Neon project named 'UserProject' with quotas set for active_time_seconds and compute_time_seconds using the Neon API.

LANGUAGE: bash
CODE:
curl --request POST \
     --url https://console.neon.tech/api/v2/projects \
     --header 'Accept: application/json' \
     --header "Authorization: Bearer $NEON_API_KEY" \
     --header 'Content-Type: application/json' \
     --data '
{
  "project": {
    "settings": {
      "quota": {
        "active_time_seconds": 36000,
        "compute_time_seconds": 9000
      }
    },
    "pg_version": 15,
    "name": "UserProject"
  }
}
' | jq

----------------------------------------

TITLE: Terminate Specific PostgreSQL Process
DESCRIPTION: Example of terminating a specific PostgreSQL process using pg_terminate_backend() function with a process ID.

LANGUAGE: sql
CODE:
SELECT pg_terminate_backend(2600);

----------------------------------------

TITLE: Creating Replication Slot for Airbyte
DESCRIPTION: SQL command to create a logical replication slot named 'airbyte_slot' using the pgoutput plugin.

LANGUAGE: sql
CODE:
SELECT pg_create_logical_replication_slot('airbyte_slot', 'pgoutput');

----------------------------------------

TITLE: Basic FULL OUTER JOIN Syntax in PostgreSQL
DESCRIPTION: Shows the fundamental syntax structure for performing a FULL OUTER JOIN operation between two tables in PostgreSQL.

LANGUAGE: sql
CODE:
SELECT select_list
FROM table1
FULL OUTER JOIN table2
   ON table1.column_name = table2.column_name;

----------------------------------------

TITLE: Creating a NOLOGIN Role with SQL in Neon
DESCRIPTION: This SQL command demonstrates how to create a role without login privileges in Neon. Such roles are typically used for permission management rather than authentication.

LANGUAGE: sql
CODE:
CREATE ROLE my_role NOLOGIN;

----------------------------------------

TITLE: Monitoring Replication Status in SQL
DESCRIPTION: This SQL query checks the status of the replication by querying the pg_stat_subscription system view.

LANGUAGE: sql
CODE:
SELECT * FROM pg_stat_subscription;

----------------------------------------

TITLE: Creating Table with hstore Column in PostgreSQL
DESCRIPTION: Creates a 'books' table with an 'attr' column of hstore data type to store book attributes.

LANGUAGE: sql
CODE:
CREATE TABLE books (
	id serial primary key,
	title VARCHAR (255),
	attr hstore
);

----------------------------------------

TITLE: Running Neon CLI Without Installation
DESCRIPTION: Commands for running Neon CLI using package managers' execution commands without installation.

LANGUAGE: shell
CODE:
# npx
npx neonctl <command>

# bunx
bunx neonctl <command>

----------------------------------------

TITLE: Checking Neon CLI version
DESCRIPTION: Command to check the installed version of Neon CLI.

LANGUAGE: bash
CODE:
neon --version

----------------------------------------

TITLE: Running pgbench Test to Observe Neon Autoscaling
DESCRIPTION: This bash command executes a pgbench test using a custom SQL file, 15 client connections, and a 1000-second duration. It's used to generate workload and observe Neon's Autoscaling behavior.

LANGUAGE: bash
CODE:
pgbench -f test.sql -c 15 -T 1000 -P 1 postgresql://[user]:[password]@[neon_hostname]/[dbname]

----------------------------------------

TITLE: Creating a Publication with Specific Operations in PostgreSQL
DESCRIPTION: This command creates a publication that only publishes INSERT and UPDATE operations on the 'users' table. DELETE operations are not published.

LANGUAGE: sql
CODE:
CREATE PUBLICATION my_publication FOR TABLE users
    WITH (publish = 'insert,update');

----------------------------------------

TITLE: Creating Employees Table in SQL
DESCRIPTION: Defines a table structure for storing employee information, including id, name, department, and salary.

LANGUAGE: sql
CODE:
CREATE TABLE employees (
    id INT,
    name TEXT,
    department TEXT,
    salary NUMERIC
);

----------------------------------------

TITLE: Enabling citext Extension in PostgreSQL
DESCRIPTION: Creates the citext extension in the PostgreSQL database if it doesn't already exist.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS citext;

----------------------------------------

TITLE: CUME_DIST Over Result Set Example
DESCRIPTION: SQL query demonstrating CUME_DIST() usage over an entire result set to calculate sales amount percentiles for 2018.

LANGUAGE: sql
CODE:
SELECT
    name,
    year,
    amount,
    CUME_DIST() OVER (
        ORDER BY amount
    )
FROM
    sales_stats
WHERE
    year = 2018;

----------------------------------------

TITLE: DENSE_RANK with Partitioning
DESCRIPTION: Demonstrates ranking products by price within each product group using PARTITION BY.

LANGUAGE: sql
CODE:
SELECT
	product_id,
	product_name,
	group_id,
	price,
	DENSE_RANK () OVER (
		PARTITION BY group_id
		ORDER BY price DESC
	) price_rank
FROM
	products;

----------------------------------------

TITLE: Overloaded PL/pgSQL Function with Date Parameter
DESCRIPTION: Extends the rental duration function by adding a date parameter to filter results from a specific date. Demonstrates function overloading with multiple parameters.

LANGUAGE: plpgsql
CODE:
create or replace function get_rental_duration(
	p_customer_id integer,
	p_from_date date
)
returns integer
language plpgsql
as $$
declare
	rental_duration integer;
begin
	select sum( extract( day from return_date + '12:00:00' - rental_date))
	into rental_duration
	from rental
	where customer_id = p_customer_id and
		  rental_date >= p_from_date;

	return rental_duration;
end; $$

----------------------------------------

TITLE: Creating List Tasks Command in Laravel Zero
DESCRIPTION: Command to generate a new command class for listing tasks in a Laravel Zero project.

LANGUAGE: bash
CODE:
php todo make:command ListTasksCommand

----------------------------------------

TITLE: Deleting a role with Neon CLI
DESCRIPTION: Usage and example of the 'delete' subcommand to remove a role from a Neon project. It requires specifying the role name and supports options for context, project, and branch.

LANGUAGE: bash
CODE:
neon roles delete <role> [options]

LANGUAGE: bash
CODE:
neon roles delete sally

----------------------------------------

TITLE: Restoring a Branch to Its Own History Using Neon API
DESCRIPTION: This cURL command restores the branch 'br-twilight-river-31791249' to an earlier point in time, creating a backup branch named 'backup-before-restore'.

LANGUAGE: bash
CODE:
curl --request POST \
     --url https://console.neon.tech/api/v2/projects/floral-disk-86322740/branches/br-twilight-river-31791249/restore \
     --header 'Accept: application/json' \
     --header "Authorization: Bearer $NEON_API_KEY" \
     --header 'Content-Type: application/json' \
     --data '
{
  "source_branch_id": "br-twilight-river-31791249",
  "source_timestamp": "2024-02-27T00:00:00Z",
  "preserve_under_name": "backup-before-restore"
}
' | jq

----------------------------------------

TITLE: Removing a Table from a Publication in PostgreSQL
DESCRIPTION: This command removes the 'sales' table from the publication named 'my_publication'.

LANGUAGE: sql
CODE:
ALTER PUBLICATION my_publication DROP TABLE sales;

----------------------------------------

TITLE: Starting Directus CMS Container
DESCRIPTION: Command to start the Directus CMS Docker container in detached mode

LANGUAGE: bash
CODE:
docker-compose up -d

----------------------------------------

TITLE: Loading Data into pg_mooncake Columnstore Table
DESCRIPTION: SQL command to insert data into the 'reddit_comments' table from a Parquet file using the mooncake.read_parquet function. This example loads 13 million rows of Reddit comment data.

LANGUAGE: sql
CODE:
INSERT INTO reddit_comments
(SELECT author, body, controversiality, created_utc, link_id, score, subreddit, subreddit_id, id
FROM mooncake.read_parquet('hf://datasets/fddemarco/pushshift-reddit-comments/data/RC_2012-01.parquet')
AS (author TEXT, body TEXT, controversiality BIGINT, created_utc BIGINT, link_id TEXT, score BIGINT, subreddit TEXT, subreddit_id TEXT, id TEXT));

----------------------------------------

TITLE: Installing Dependencies for Neon, Drizzle, and Clerk
DESCRIPTION: Commands to install necessary dependencies including Neon serverless driver, Drizzle ORM, and Clerk authentication SDK.

LANGUAGE: bash
CODE:
npm install @neondatabase/serverless drizzle-orm
npm install -D drizzle-kit dotenv
npm install @clerk/nextjs

----------------------------------------

TITLE: Dropping a Subscription in PostgreSQL
DESCRIPTION: This command drops an existing subscription named 'my_subscription'.

LANGUAGE: sql
CODE:
DROP SUBSCRIPTION my_subscription;

----------------------------------------

TITLE: Installing PgHero Docker Image
DESCRIPTION: Command to pull the PgHero Docker image from DockerHub. This is the first step in setting up PgHero for monitoring a Neon Postgres database.

LANGUAGE: bash
CODE:
docker pull ankane/pghero

----------------------------------------

TITLE: Creating a Table with Generated tsvector Column in PostgreSQL
DESCRIPTION: This example shows how to create a table with a generated column of type tsvector, which automatically converts text data for full-text search.

LANGUAGE: SQL
CODE:
CREATE TABLE posts(
   id SERIAL PRIMARY KEY,
   title TEXT NOT NULL,
   body TEXT,
   body_search TSVECTOR
      GENERATED ALWAYS AS (to_tsvector('english',body)) STORED
);

----------------------------------------

TITLE: Using LENGTH() Function with NULL Input
DESCRIPTION: Shows that the LENGTH() function returns NULL when given a NULL input.

LANGUAGE: sql
CODE:
SELECT
  LENGTH (NULL);

----------------------------------------

TITLE: Firestore Data Export Script
DESCRIPTION: Python script to export data from Firebase Firestore to local JSON files. The script connects to Firestore, retrieves all collections and documents, and saves them in a format suitable for Postgres import.

LANGUAGE: python
CODE:
import argparse
import json
import os
from collections import defaultdict

import firebase_admin
from firebase_admin import credentials, firestore


def download_from_firebase(db, output_dir):
    # Create output directory if it doesn't exist
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Initialize a defaultdict to store documents for each collection
    output: dict[str, list[dict]] = defaultdict(list)

    def _download_collection(collection_ref):
        print(f"Downloading from collection: {collection_ref.id}")

        # Determine the parent path for the current collection
        if collection_ref.parent:
            parent_path = collection_ref.parent.path
        else:
            parent_path = None

        # Iterate through all documents in the collection
        for doc in collection_ref.get():
            # Add document data to the output dictionary
            output[collection_ref.id].append(
                {
                    "id": doc.reference.path,
                    "parent_id": parent_path,
                    "data": doc.to_dict(),
                }
            )

            # Recursively handle subcollections
            for subcoll in doc.reference.collections():
                _download_collection(subcoll)

    # Start the download process with top-level collections
    for collection in db.collections():
        _download_collection(collection)

    # Save all (sub)collections to corresponding files
    for collection_id, docs in output.items():
        with open(os.path.join(output_dir, f"{collection_id}.json"), "w") as f:
            for doc in docs:
                f.write(json.dumps(doc) + "\n")


def main():
    parser = argparse.ArgumentParser(
        description="Download data from Firebase Firestore"
    )
    parser.add_argument(
        "--credentials", required=True, help="Path to Firebase credentials JSON file"
    )
    parser.add_argument(
        "--output",
        default="firestore_data",
        help="Output directory for downloaded data",
    )

    args = parser.parse_args()

    # Initialize Firebase app
    cred = credentials.Certificate(args.credentials)
    firebase_admin.initialize_app(cred)
    db = firestore.client()

    # Download data from Firebase
    download_from_firebase(db, args.output)
    print(f"Firestore data downloaded to {args.output}")


if __name__ == "__main__":
    main()

----------------------------------------

TITLE: Project Branch and Compute Structure
DESCRIPTION: ASCII diagram showing the relationship between projects, branches, computes and databases in Neon.

LANGUAGE: text
CODE:
Project
    |---- default branch (main) ---- compute <--- application/client
             |    |
             |    |---- database
             |
             ---- child branch ---- compute <--- application/client
                            |
                            |---- database

----------------------------------------

TITLE: Variable Initialization Timing Example
DESCRIPTION: Shows how variable initialization occurs only once when entering the block, using timestamp functions.

LANGUAGE: plpgsql
CODE:
do $$
declare
   created_at time = clock_timestamp();
begin
   raise notice '%', created_at;
   perform pg_sleep(3);
   raise notice '%', created_at;
end $$;

----------------------------------------

TITLE: Listing Personal API Keys via Neon API
DESCRIPTION: This snippet shows how to list personal API keys using the Neon API. It requires authentication with a valid API key.

LANGUAGE: bash
CODE:
curl "https://console.neon.tech/api/v2/api_keys" \
 -H "Authorization: Bearer $NEON_API_KEY" \
 -H "Accept: application/json" | jq

----------------------------------------

TITLE: Ordering JSON Output by Nested Attribute in SQL
DESCRIPTION: This query demonstrates how to build JSON objects with json_build_object() and order the results based on a nested attribute (rating) within the JSON structure.

LANGUAGE: sql
CODE:
SELECT
   id,
   name,
   price,
   json_build_object(
       'category', category,
       'description', description,
       'attributes', json_build_object(
           'color', attributes->>'color',
           'size', attributes->>'size',
           'rating', attributes->>'rating'
       )
   ) AS details
FROM products_with_rating
ORDER BY (attributes->>'rating')::NUMERIC DESC;

----------------------------------------

TITLE: Ordering JSON Output by Nested Attribute in SQL
DESCRIPTION: This query demonstrates how to build JSON objects with json_build_object() and order the results based on a nested attribute (rating) within the JSON structure.

LANGUAGE: sql
CODE:
SELECT
   id,
   name,
   price,
   json_build_object(
       'category', category,
       'description', description,
       'attributes', json_build_object(
           'color', attributes->>'color',
           'size', attributes->>'size',
           'rating', attributes->>'rating'
       )
   ) AS details
FROM products_with_rating
ORDER BY (attributes->>'rating')::NUMERIC DESC;

----------------------------------------

TITLE: Unix File Permission Command
DESCRIPTION: Command to set proper file permissions (600) for .pgpass file on Unix-like systems.

LANGUAGE: css
CODE:
chmod 600 ~/.pgpass

----------------------------------------

TITLE: Creating a Message Component for Conversation Display
DESCRIPTION: Defines a React component to render individual messages in the conversation. It differentiates between user and AI messages using icons.

LANGUAGE: typescript
CODE:
import { Cpu, User } from 'react-feather';

export default function ({
  conversationItem,
}: {
  conversationItem: { role: string; formatted: { transcript: string } };
}) {
  return (
    <div className="flex max-w-full flex-row flex-wrap items-start gap-x-3">
      <div className="max-w-max rounded border p-2">
        {conversationItem.role === 'user' ? <User /> : <Cpu />}
      </div>
      <div className="flex flex-col gap-y-2">{conversationItem.formatted.transcript}</div>
    </div>
  );
}

----------------------------------------

TITLE: Creating AFTER INSERT Trigger Syntax
DESCRIPTION: Basic syntax for creating an AFTER INSERT trigger and binding it to a function.

LANGUAGE: sql
CODE:
CREATE TRIGGER trigger_name
AFTER INSERT
ON table_name
FOR EACH {ROW | STATEMENT}
EXECUTE FUNCTION trigger_function();

----------------------------------------

TITLE: Creating a Table with Primary Key and Unique Constraint
DESCRIPTION: Example of creating a table with a primary key and a unique constraint, which automatically creates UNIQUE indexes.

LANGUAGE: sql
CODE:
CREATE TABLE employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE
);

----------------------------------------

TITLE: Seeding Neon Database with psql
DESCRIPTION: This command uses psql to seed a Neon database with data from an init.sql file. It requires the Neon connection string and the path to the SQL file.

LANGUAGE: bash
CODE:
psql postgresql://[user]:[password]@[neon_hostname]/[dbname] < init.sql

----------------------------------------

TITLE: Updating Quotas for an Existing Neon Project
DESCRIPTION: This curl command shows how to update the quotas for an existing Neon project, specifically modifying the active_time_seconds and compute_time_seconds limits.

LANGUAGE: bash
CODE:
curl --request PATCH \
     --url https://console.neon.tech/api/v2/projects/[project_ID]\
     --header 'Accept: application/json' \
     --header "Authorization: Bearer $NEON_API_KEY" \
     --header 'Content-Type: application/json' \
     --data '
{
  "project": {
    "settings": {
      "quota": {
        "active_time_seconds": 108000,
        "compute_time_seconds": 108000
      }
    }
  }
}
' | jq

----------------------------------------

TITLE: Checking VPC Endpoint Status
DESCRIPTION: Command to check the status of a specific VPC endpoint in a Neon organization.

LANGUAGE: bash
CODE:
neon vpc endpoint status vpce-1234567890abcdef0 --org-id org-bold-bonus-12345678

----------------------------------------

TITLE: Querying Vendor Data Using fetchone() in PostgreSQL with Python
DESCRIPTION: Illustrates how to retrieve data from the vendors table using the fetchone() method. This function fetches rows one at a time until no more rows are available.

LANGUAGE: python
CODE:
import psycopg2
from config import load_config

def get_vendors():
    """ Retrieve data from the vendors table """
    config  = load_config()
    try:
        with psycopg2.connect(**config) as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT vendor_id, vendor_name FROM vendors ORDER BY vendor_name")
                print("The number of parts: ", cur.rowcount)
                row = cur.fetchone()

                while row is not None:
                    print(row)
                    row = cur.fetchone()

    except (Exception, psycopg2.DatabaseError) as error:
        print(error)

if __name__ == '__main__':
    get_vendors()

----------------------------------------

TITLE: Creating Role with Validity Period
DESCRIPTION: Creates a role with a password that expires at a specific time.

LANGUAGE: sql
CODE:
CREATE ROLE dev_api WITH
LOGIN
PASSWORD 'securePass1'
VALID UNTIL '2050-01-01';

----------------------------------------

TITLE: List Operations Command Usage in Neon CLI
DESCRIPTION: Shows the syntax for the list subcommand of operations, which displays all operations in a Neon project. Supports options like --context-file and --project-id.

LANGUAGE: bash
CODE:
neon operations list [options]

----------------------------------------

TITLE: Next.js Database Connection
DESCRIPTION: Example of connecting to Neon from a Next.js application using the postgres package.

LANGUAGE: javascript
CODE:
// Next.js example
import postgres from 'postgres';

let { PGHOST, PGDATABASE, PGUSER, PGPASSWORD } = process.env;

const conn = postgres({
  host: PGHOST,
  database: PGDATABASE,
  username: PGUSER,
  password: PGPASSWORD,
  port: 5432,
  ssl: 'require',
});

function selectAll() {
  return conn.query('SELECT * FROM hello_world');
}

----------------------------------------

TITLE: Installing Prisma Pulse Extension
DESCRIPTION: npm command to install the Prisma Pulse extension package.

LANGUAGE: bash
CODE:
npm install @prisma/extension-pulse@latest

----------------------------------------

TITLE: PostgreSQL Connection String Format
DESCRIPTION: Standard format for Neon PostgreSQL connection strings, including user credentials, endpoint hostname, port, and database name. Optional SSL mode parameter is included for enhanced security.

LANGUAGE: bash
CODE:
postgres://<user>:<password>@<endpoint_hostname>.neon.tech:<port>/<dbname>

----------------------------------------

TITLE: Read Replica Database Configuration
DESCRIPTION: PostgreSQL database configuration with read replica support in Laravel.

LANGUAGE: php
CODE:
'pgsql' => [
    'driver' => 'pgsql',
    'read' => [
        'host' => env('DB_READ_HOST'),
    ],
    'write' => [
        'host' => env('DB_WRITE_HOST'),
    ],
    'sticky'    => true,
    'port' => env('DB_PORT', '5432'),
    'database' => env('DB_DATABASE', 'laravel'),
    'username' => env('DB_USERNAME', 'root'),
    'password' => env('DB_PASSWORD', ''),
    'charset' => env('DB_CHARSET', 'utf8'),
    'prefix' => '',
    'prefix_indexes' => true,
    'search_path' => 'public',
    'sslmode' => 'prefer',
]

----------------------------------------

TITLE: Building Nested JSON Objects from Product Data in SQL
DESCRIPTION: This query uses json_build_object() to create nested JSON objects representing product details, including category, description, and attributes.

LANGUAGE: sql
CODE:
SELECT
   id,
   name,
   price,
   json_build_object(
       'category', category,
       'description', description,
       'attributes', json_build_object(
           'color', attributes->>'color',
           'size', attributes->>'size'
       )
   ) AS details
FROM products;

----------------------------------------

TITLE: Creating Destination Table in Neon
DESCRIPTION: Creates the matching table structure in the Neon database to receive replicated data.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS playing_with_neon(id SERIAL PRIMARY KEY, name TEXT NOT NULL, value REAL);

----------------------------------------

TITLE: Runtime Constant Evaluation Example
DESCRIPTION: Demonstrates that constant values are evaluated at runtime rather than compile time using timestamp example.

LANGUAGE: sql
CODE:
do $$
declare
   started_at constant time := clock_timestamp();
begin
   -- pause 3s
   perform pg_sleep(3);

   -- show the current time
   raise notice '3s later';
   raise notice 'Current time: %', clock_timestamp();

   -- pause 3s
   perform pg_sleep(3);
   -- show the value of the started_at
   -- later than the one above
   raise notice 'Started at: %', started_at;
end $$;

----------------------------------------

TITLE: Data Validation with JSON_EXISTS() in PostgreSQL
DESCRIPTION: Demonstrates how to use JSON_EXISTS() for data validation, including creating a table with JSON validation constraints and inserting data.

LANGUAGE: sql
CODE:
-- Validate required fields before insertion
CREATE TABLE user_profiles (
    id SERIAL PRIMARY KEY,
    data JSONB NOT NULL,
    CONSTRAINT valid_profile CHECK (
        JSON_EXISTS(data, '$.email') AND
        JSON_EXISTS(data, '$.username')
    )
);

-- This insert will succeed
INSERT INTO user_profiles (data) VALUES (
    '{"email": "user@example.com", "username": "user123"}'::jsonb
);

-- This insert will fail
INSERT INTO user_profiles (data) VALUES (
    '{"username": "user123"}'::jsonb
);

----------------------------------------

TITLE: Altering DEFAULT Values in Existing Tables
DESCRIPTION: Shows how to add or remove DEFAULT constraints from existing table columns using ALTER TABLE statements.

LANGUAGE: sql
CODE:
ALTER TABLE table_name
ALTER COLUMN column2
SET DEFAULT default_value;

LANGUAGE: php
CODE:
ALTER TABLE table_name
ALTER COLUMN column2
DROP DEFAULT;

----------------------------------------

TITLE: MAKE_TIME() with String Arguments
DESCRIPTION: Example showing how MAKE_TIME() can accept string arguments that are implicitly converted to the proper numeric types.

LANGUAGE: sql
CODE:
SELECT MAKE_TIME('8', '30', '59.999999');

----------------------------------------

TITLE: Constant Modification Error Example
DESCRIPTION: Example showing that attempting to modify a constant results in an error.

LANGUAGE: sql
CODE:
do $$
declare
   vat constant numeric = 0.1;
   net_price    numeric = 20.5;
begin
   raise notice 'The selling price is %', net_price * ( 1 + vat);
   vat = 0.05; -- error
end $$;

----------------------------------------

TITLE: Adding a New Customer to Database in Reflex
DESCRIPTION: Python code demonstrating how to add a new customer to the database using the Customer model.

LANGUAGE: python
CODE:
with rx.session() as session:
    session.add(
        Customer(
            name="Alice",
            email="user@test.com",
            phone="1234567890",
            address="123 Main St",
        )
    )
    session.commit()

----------------------------------------

TITLE: Creating Tables with Foreign Key Constraints
DESCRIPTION: Example of creating two related tables (customers and contacts) with a foreign key relationship. Demonstrates basic table structure and constraint definition.

LANGUAGE: sql
CODE:
DROP TABLE IF EXISTS customers;
DROP TABLE IF EXISTS contacts;

CREATE TABLE customers(
   customer_id INT GENERATED ALWAYS AS IDENTITY,
   customer_name VARCHAR(255) NOT NULL,
   PRIMARY KEY(customer_id)
);

CREATE TABLE contacts(
   contact_id INT GENERATED ALWAYS AS IDENTITY,
   customer_id INT,
   contact_name VARCHAR(255) NOT NULL,
   phone VARCHAR(15),
   email VARCHAR(100),
   PRIMARY KEY(contact_id),
   CONSTRAINT fk_customer
      FOREIGN KEY(customer_id)
        REFERENCES customers(customer_id)
);

----------------------------------------

TITLE: Inserting Vector Embeddings into Postgres Table
DESCRIPTION: This SQL command demonstrates how to insert a vector embedding into the 'items' table created earlier.

LANGUAGE: sql
CODE:
INSERT INTO items(embedding) VALUES ('[
    -0.006929283495992422,
    -0.005336422007530928,
    ...
    -4.547132266452536e-05,
    -0.024047505110502243
]');

----------------------------------------

TITLE: Checking Postgres Data Directory Location
DESCRIPTION: SQL query to show the PostgreSQL data directory location

LANGUAGE: sql
CODE:
SHOW data_directory;

----------------------------------------

TITLE: PostgreSQL COUNT Function Example
DESCRIPTION: Shows how to count total number of records in the film table using COUNT(*) function.

LANGUAGE: sql
CODE:
SELECT
  COUNT(*)
FROM
  film;

----------------------------------------

TITLE: Example Database Update Event Structure in JSON
DESCRIPTION: Shows the structure of a db/users.updated event generated when updates are made to the users table in the database. The event contains both the new data and transaction details.

LANGUAGE: json
CODE:
{
  "name": "db/users.updated",
  "data": {
    "new": {
      "id": {
        "data": 2,
        "encoding": "i"
      },
      "name": {
        "data": "Charly",
        "encoding": "t"
      },
      "email": {
        "data": "charly@inngest.com",
        "encoding": "t"
      }
    },
    "table": "users",
    "txn_commit_time": "2024-09-24T14:41:19.75149Z",
    "txn_id": 36530520
  },
  "ts": 1727146545006
}

----------------------------------------

TITLE: Setting Replication Identity for Tables
DESCRIPTION: SQL commands to set the replication identity for tables that will be part of the replication process.

LANGUAGE: sql
CODE:
ALTER TABLE <table_name> REPLICA IDENTITY DEFAULT;

----------------------------------------

TITLE: Defining Postgres lower() Function Signature
DESCRIPTION: Shows the function signature of the lower() function in PostgreSQL, which takes a text input and returns lowercase text.

LANGUAGE: sql
CODE:
lower(string text) -> text

----------------------------------------

TITLE: Creating and Populating Sample Tables for INTERSECT Examples
DESCRIPTION: Sets up two sample tables 'top_rated_films' and 'most_popular_films' to demonstrate INTERSECT operations.

LANGUAGE: sql
CODE:
CREATE TABLE top_rated_films(
  title VARCHAR NOT NULL,
  release_year SMALLINT
);

CREATE TABLE most_popular_films(
  title VARCHAR NOT NULL,
  release_year SMALLINT
);

INSERT INTO top_rated_films(title, release_year)
VALUES
   ('The Shawshank Redemption', 1994),
   ('The Godfather', 1972),
   ('The Dark Knight', 2008),
   ('12 Angry Men', 1957);

INSERT INTO most_popular_films(title, release_year)
VALUES
  ('An American Pickle', 2020),
  ('The Godfather', 1972),
  ('The Dark Knight', 2008),
  ('Greyhound', 2020);

SELECT * FROM top_rated_films;
SELECT * FROM most_popular_films;

----------------------------------------

TITLE: Using OVERRIDING SYSTEM VALUE to Insert into Identity Column
DESCRIPTION: This snippet shows how to use the OVERRIDING SYSTEM VALUE clause to insert a specific value into a GENERATED ALWAYS AS IDENTITY column.

LANGUAGE: sql
CODE:
INSERT INTO color (color_id, color_name)
OVERRIDING SYSTEM VALUE
VALUES(2, 'Green');

----------------------------------------

TITLE: Prisma Connection String Example
DESCRIPTION: Example showing how to get a Prisma-compatible connection string with timeout configuration

LANGUAGE: bash
CODE:
neon connection-string --prisma
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?connect_timeout=30

----------------------------------------

TITLE: Basic PostgreSQL AND Operator Examples
DESCRIPTION: Demonstrates various combinations of true, false, and null values with the AND operator to show its behavior.

LANGUAGE: sql
CODE:
SELECT true AND true AS result;

LANGUAGE: sql
CODE:
SELECT true AND false AS result;

LANGUAGE: sql
CODE:
SELECT true AND null AS result;

LANGUAGE: sql
CODE:
SELECT false AND false AS result;

LANGUAGE: sql
CODE:
SELECT false AND null AS result;

LANGUAGE: sql
CODE:
SELECT null AND null AS result;

----------------------------------------

TITLE: Subscribing to Neon Status Updates on Slack
DESCRIPTION: Slack command to resubscribe to Neon's status page updates after the migration. This command allows users to receive real-time status updates via Slack.

LANGUAGE: plaintext
CODE:
/feed subscribe https://neonstatus.com/slack.rss

----------------------------------------

TITLE: Creating a UserController in Laravel
DESCRIPTION: Artisan command to generate a UserController and example implementation of the index method.

LANGUAGE: bash
CODE:
php artisan make:controller UserController

LANGUAGE: php
CODE:
namespace App\Http\Controllers;

use App\Models\User;

class UserController extends Controller
{
    public function index()
    {
        $users = User::all();
        return view('users.index', ['users' => $users]);
    }
}

----------------------------------------

TITLE: Restoring PostgreSQL Database from Dump File
DESCRIPTION: This shell command uses psql to restore a PostgreSQL database from a SQL dump file, typically used after creating a new empty database.

LANGUAGE: shell
CODE:
psql -U postgres -d targetdb -f sourcedb.sql

----------------------------------------

TITLE: Configuring Laravel Database Connection for Neon Postgres
DESCRIPTION: This snippet shows how to configure the database connection settings in Laravel's .env file to connect to a Neon Postgres database. It includes placeholders for the Neon hostname, database name, username, and password.

LANGUAGE: shell
CODE:
DB_CONNECTION=pgsql
DB_HOST=[neon_hostname]
DB_PORT=5432
DB_DATABASE=[dbname]
DB_USERNAME=[user]
DB_PASSWORD=[password]

----------------------------------------

TITLE: Finding Nearest Landmark with PostGIS
DESCRIPTION: SQL query to find the nearest landmark to a given point using the ST_Distance function. The results are ordered by distance to return the closest landmark.

LANGUAGE: sql
CODE:
SELECT name, ST_Distance(location, ST_GeomFromText('POINT(150 250)')) AS distance
FROM landmarks
ORDER BY distance
LIMIT 1;

----------------------------------------

TITLE: Windows PostgreSQL Password Example
DESCRIPTION: Example of PostgreSQL password file entry for Windows systems, using wildcards and specific credentials.

LANGUAGE: css
CODE:
localhost:5432:*:postgres:moreSecure

----------------------------------------

TITLE: Liquibase XML Changelog for Adding Comments Table
DESCRIPTION: This XML snippet defines a Liquibase changeset that creates a 'comments' table with foreign key relationships to the 'posts' and 'authors' tables.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:pro="http://www.liquibase.org/xml/ns/pro"
xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.4.xsd
    http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-4.5.xsd">
    <changeSet author="alex" id="myIDNumber1234">
        <createTable tableName="comments">
            <column autoIncrement="true" name="comment_id" type="INTEGER">
                <constraints nullable="false" primaryKey="true" primaryKeyName="comments_pkey"/>
            </column>
            <column name="post_id" type="INTEGER">
                <constraints nullable="false" foreignKeyName="fk_comments_post_id" referencedTableName="posts" referencedColumnNames="post_id"/>
            </column>
            <column name="author_id" type="INTEGER">
                <constraints nullable="false" foreignKeyName="fk_comments_author_id" referencedTableName="authors" referencedColumnNames="author_id"/>
            </column>
            <column name="comment" type="TEXT"/>
            <column name="commented_date" type="TIMESTAMP" defaultValueComputed="CURRENT_TIMESTAMP"/>
        </createTable>
    </changeSet>
</databaseChangeLog>

----------------------------------------

TITLE: Calculating Date Intervals in PostgreSQL
DESCRIPTION: This query demonstrates how to calculate the interval between two dates using the minus operator.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name,
  now() - hire_date as diff
FROM
  employees;

----------------------------------------

TITLE: Creating a Neon Branch with GitHub Actions
DESCRIPTION: Illustrates how to create a Neon branch using GitHub Actions. This YAML configuration demonstrates the use of Neon's create-branch-action in a CI workflow.

LANGUAGE: yaml
CODE:
name: Create Neon Branch with GitHub Actions Demo
run-name: Create a Neon Branch 🚀
jobs:
  Create-Neon-Branch:
    uses: neondatabase/create-branch-action@v5
    with:
      project_id: rapid-haze-373089
      # optional (defaults to your project's default branch)
      parent: dev
      # optional (defaults to neondb)
      database: my-database
      branch_name: from_action_reusable
      username: db_user_for_url
      api_key: ${{ secrets.NEON_API_KEY }}
    id: create-branch
  - run: echo db_url ${{ steps.create-branch.outputs.db_url }}
  - run: echo host ${{ steps.create-branch.outputs.host }}
  - run: echo branch_id ${{ steps.create-branch.outputs.branch_id }}

----------------------------------------

TITLE: Setting Up Database Configuration in .env File
DESCRIPTION: Content of the .env file for storing the Neon Postgres connection string.

LANGUAGE: bash
CODE:
DATABASE_URL=NEON_POSTGRES_CONNECTION_STRING

----------------------------------------

TITLE: Organization List Table Output
DESCRIPTION: Example showing the default table output format when listing organizations, displaying organization IDs and names.

LANGUAGE: bash
CODE:
neon orgs list
Organizations
┌────────────────────────┬──────────────────┐
│ Id                     │ Name             │
├────────────────────────┼──────────────────┤
│ org-xxxxxxxx-xxxxxxxx  │ Example Org      │
└────────────────────────┴──────────────────┘

----------------------------------------

TITLE: Grouping Products by Price Scale
DESCRIPTION: Demonstrates how to group products by their price scales using the SCALE() function with GROUP BY clause.

LANGUAGE: sql
CODE:
SELECT
  scale(price) AS price_scale,
  COUNT(*) AS count_of_products
FROM
  product_prices
GROUP BY
  price_scale
ORDER BY
  price_scale;

----------------------------------------

TITLE: Resolving Permission Denied Error in Neon RLS
DESCRIPTION: This error typically indicates that the necessary permissions haven't been granted to the 'authenticated' and 'anonymous' roles. The solution involves running SQL commands to grant permissions for both existing and future tables.

LANGUAGE: bash
CODE:
NeonDbError: permission denied for table X

----------------------------------------

TITLE: Setting Up Postgres Roles for Authenticated and Anonymous Users
DESCRIPTION: These SQL commands set up table-level permissions for authenticated and anonymous roles in the public schema. It grants SELECT, UPDATE, INSERT, and DELETE privileges on existing and future tables.

LANGUAGE: sql
CODE:
-- For existing tables
GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to authenticated;

GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to anonymous;

-- For future tables
ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO authenticated;

ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO anonymous;

-- Grant USAGE on "public" schema
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO anonymous;

----------------------------------------

TITLE: Extracting Flyway Files
DESCRIPTION: Command to extract the downloaded Flyway command-line tool archive

LANGUAGE: bash
CODE:
cd ~/Downloads
tar -xzvf flyway-commandline-x.y.z-linux-x64.tar.gz -C ~/

----------------------------------------

TITLE: Using ->> Operator to Extract Text Values in PostgreSQL
DESCRIPTION: This example shows how to use the ->> operator to extract product names as text from the 'products' table.

LANGUAGE: sql
CODE:
SELECT
  data ->> 'name' AS product_name
FROM
  products;

----------------------------------------

TITLE: Converting Points to H3 Indexes
DESCRIPTION: SQL query to convert latitude/longitude coordinates to H3 indexes at resolution 9 using the h3_lat_lng_to_cell function.

LANGUAGE: SQL
CODE:
SELECT
    h3_lat_lng_to_cell(pickup_location, 9) AS h3_index
FROM ride_pickups
ORDER BY RANDOM()
LIMIT 5;

----------------------------------------

TITLE: Filtering dense_rank() Results Using a CTE in PostgreSQL
DESCRIPTION: This example shows how to use a Common Table Expression (CTE) to filter dense_rank() results, specifically to find the top two scores within each class.

LANGUAGE: sql
CODE:
WITH RankedScores AS (
   SELECT
       student_id,
       student_name,
       score,
       class_id,
       dense_rank() OVER (PARTITION BY class_id ORDER BY score DESC) AS dense_rank
   FROM
       student_scores_by_class
)
SELECT
   student_id,
   student_name,
   score,
   class_id,
   dense_rank
FROM
   RankedScores
WHERE
   dense_rank <= 2;

----------------------------------------

TITLE: Handling Missing Paths with jsonb_path_query_array
DESCRIPTION: Shows how jsonb_path_query_array() handles cases where the specified JSON path doesn't exist in the data.

LANGUAGE: sql
CODE:
SELECT jsonb_path_query_array(data, '$.address')
FROM employees;

----------------------------------------

TITLE: Complete Anonymous Block Example
DESCRIPTION: Shows a complete PL/pgSQL anonymous block that counts films and displays the result using RAISE NOTICE

LANGUAGE: sql
CODE:
do $$
<<first_block>>
declare
  film_count integer := 0;
begin
   -- get the number of films
   select count(*)
   into film_count
   from film;

   -- display a message
   raise notice 'The number of films is %', film_count;
end first_block $$;

----------------------------------------

TITLE: Verifying REPLACE() Function Results in Table
DESCRIPTION: Retrieves data from the 'posts' table to verify that the REPLACE() function successfully updated the 'url' column.

LANGUAGE: SQL
CODE:
SELECT * FROM posts;

----------------------------------------

TITLE: HTTP Connection Setup
DESCRIPTION: Demonstrates how to switch from Vercel Postgres SDK to Neon's HTTP connection method for simple queries.

LANGUAGE: diff
CODE:
import { sql } from '@vercel/postgres'; // [!code --]

import { neon } from '@neondatabase/serverless'; // [!code ++]
const sql = neon(process.env.DATABASE_URL!); // [!code ++]

----------------------------------------

TITLE: Defining Neon database connection and schema
DESCRIPTION: TypeScript code to establish connection with Neon database using Drizzle ORM and define the database schema for user messages.

LANGUAGE: typescript
CODE:
/// app/db/index.ts

import { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';
import { UserMessages } from './schema';

if (!process.env.DATABASE_URL) {
  throw new Error('DATABASE_URL must be a Neon postgres connection string');
}

const sql = neon(process.env.DATABASE_URL);

export const db = drizzle(sql, {
  schema: { UserMessages },
});

LANGUAGE: typescript
CODE:
/// app/db/schema.ts

import { pgTable, text, timestamp } from 'drizzle-orm/pg-core';

export const UserMessages = pgTable('user_messages', {
  user_id: text('user_id').primaryKey().notNull(),
  createTs: timestamp('create_ts').defaultNow().notNull(),
  message: text('message').notNull(),
});

----------------------------------------

TITLE: Creating Publication for Multiple Tables
DESCRIPTION: Creates a publication for multiple tables in Supabase for logical replication.

LANGUAGE: sql
CODE:
CREATE PUBLICATION my_publication FOR TABLE users, departments;

----------------------------------------

TITLE: Subscribing to Neon Changelog Feed
DESCRIPTION: RSS feed URL for monitoring Neon's product changelog updates and feature releases.

LANGUAGE: bash
CODE:
https://neon.tech/docs/changelog/rss.xml

----------------------------------------

TITLE: Query Example with First Name Filter Only
DESCRIPTION: Demonstrates how the query optimizer handles a query filtering only by first name, showing when the index might not be used.

LANGUAGE: sql
CODE:
EXPLAIN SELECT
  id,
  first_name,
  last_name
FROM
  people
WHERE
  first_name = 'Lou';

----------------------------------------

TITLE: Executing Batched Queries with Neon Serverless Driver in JavaScript
DESCRIPTION: Demonstrates how to use the transaction() function to execute multiple queries in a single, non-interactive transaction. This example retrieves the latest posts and all tags from a database.

LANGUAGE: javascript
CODE:
import { neon } from '@neondatabase/serverless';
const sql = neon(process.env.DATABASE_URL);
const showLatestN = 10;

const [posts, tags] = await sql.transaction([
  sql`SELECT * FROM posts ORDER BY posted_at DESC LIMIT ${showLatestN}`,
  sql`SELECT * FROM tags`,
]);

----------------------------------------

TITLE: Checking Installed Extension Versions
DESCRIPTION: SQL query to check currently installed extension versions

LANGUAGE: sql
CODE:
SELECT * FROM pg_extension;

----------------------------------------

TITLE: Retrieving Neon Database Connection String
DESCRIPTION: Example of a Neon database connection string used to connect to the database from a Django application.

LANGUAGE: bash
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require

----------------------------------------

TITLE: Basic PostgreSQL DELETE Syntax
DESCRIPTION: The fundamental syntax for deleting rows from a PostgreSQL table. Includes optional WHERE clause for conditional deletion and RETURNING clause for retrieving deleted data.

LANGUAGE: sql
CODE:
DELETE FROM table_name
WHERE condition;

----------------------------------------

TITLE: Setting Up Database Connection in JavaScript
DESCRIPTION: JavaScript code to set up a database connection pool for Neon Postgres using the 'pg' library.

LANGUAGE: javascript
CODE:
const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.NEON_CONNECTION_STRING,
  ssl: true,
});

async function query(text, params) {
  const client = await pool.connect();
  try {
    const result = await client.query(text, params);
    return result;
  } finally {
    client.release();
  }
}

module.exports = {
  query,
  pool,
};

----------------------------------------

TITLE: Extracting Array Elements from JSONB using jsonb_extract_path() in PostgreSQL
DESCRIPTION: This SQL query shows how to use jsonb_extract_path() to extract both nested object values and array elements from a JSONB column in the 'products' table.

LANGUAGE: sql
CODE:
SELECT
    id,
    jsonb_extract_path(attributes, 'specs', 'storage', 'type') as storage_type,
    jsonb_extract_path(attributes, 'specs', 'storage', 'capacity') as storage_capacity,
    jsonb_extract_path(attributes, 'tags', '0') as first_tag,
    jsonb_extract_path(attributes, 'tags', '1') as second_tag
FROM products;

----------------------------------------

TITLE: Creating Database Tables Structure
DESCRIPTION: Creates the employees and salaries tables with appropriate constraints and relationships.

LANGUAGE: sql
CODE:
CREATE TABLE employees (
    employee_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

CREATE TABLE salaries (
    employee_id INT,
    effective_date DATE NOT NULL,
    salary DECIMAL(10, 2) NOT NULL DEFAULT 0,
    PRIMARY KEY (employee_id, effective_date),
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)
);

----------------------------------------

TITLE: Configuring Neon Postgres Database Connection
DESCRIPTION: Environment variables for connecting to a Neon Postgres database in Laravel's .env file.

LANGUAGE: env
CODE:
DB_CONNECTION=pgsql
DB_HOST=your-neon-hostname.neon.tech
DB_PORT=5432
DB_DATABASE=your_database_name
DB_USERNAME=your_username
DB_PASSWORD=your_password

----------------------------------------

TITLE: Multiple Tables DROP Syntax
DESCRIPTION: Demonstrates the syntax for dropping multiple tables in a single statement.

LANGUAGE: sql
CODE:
DROP TABLE [IF EXISTS]
   table_name_1,
   table_name_2,
   ...
[CASCADE | RESTRICT];

----------------------------------------

TITLE: Formatted Circle Area Calculations
DESCRIPTION: Calculates circle areas with rounded results for better readability using ROUND() function.

LANGUAGE: sql
CODE:
SELECT
  id,
  RADIUS,
  ROUND((PI() * RADIUS * RADIUS)::NUMERIC, 2) AREA
FROM
  circles;

----------------------------------------

TITLE: Normalizing Addresses with Tiger Geocoder
DESCRIPTION: SQL query using the normalize_address function from Tiger Geocoder to standardize address formats for a set of example addresses.

LANGUAGE: SQL
CODE:
WITH addresses AS (
  SELECT '123 Main St, New York, NY 10001' AS address
  UNION ALL
  SELECT '1600 Pennsylvania Avenue, Washington, DC'
  UNION ALL
  SELECT '100 Universal City Plaza, Universal City, CA 91608'
)
SELECT
    (normalize_address(address)).*
FROM addresses;

----------------------------------------

TITLE: Granting Multiple Privileges on a Table
DESCRIPTION: This SQL command grants INSERT, UPDATE, and DELETE privileges on the 'candidates' table to the 'joe' role.

LANGUAGE: sql
CODE:
GRANT INSERT, UPDATE, DELETE
ON candidates
TO joe;

----------------------------------------

TITLE: Creating Superuser Role
DESCRIPTION: Creates a superuser role with full administrative privileges.

LANGUAGE: sql
CODE:
CREATE ROLE john
SUPERUSER
LOGIN
PASSWORD 'securePass1';

----------------------------------------

TITLE: Handling Duplicate Keys in JSON
DESCRIPTION: Examples demonstrating how to handle duplicate keys using WITH and WITHOUT UNIQUE options.

LANGUAGE: sql
CODE:
-- Without UNIQUE keys (allows duplicates)
SELECT json('{"a": 1, "b": 2, "a": 3}' WITHOUT UNIQUE);

LANGUAGE: sql
CODE:
-- With UNIQUE keys
SELECT json('{"a": 1, "b": 2, "c": 3}' WITH UNIQUE);

----------------------------------------

TITLE: Granting Schema Access Permissions
DESCRIPTION: SQL commands to grant necessary schema and table access permissions to the replication role.

LANGUAGE: sql
CODE:
GRANT USAGE ON SCHEMA public TO replication_user;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO replication_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO replication_user;

----------------------------------------

TITLE: Using row_number() for Unique Rankings
DESCRIPTION: Shows how to use row_number() to assign unique sequential numbers within partitions, even when dealing with tied values.

LANGUAGE: sql
CODE:
WITH sales AS (
    SELECT date '2023-01-01' AS sale_date, 1000 AS amount
    UNION ALL
    SELECT date '2023-01-01', 1500
    UNION ALL
    SELECT date '2023-01-02', 1200
    UNION ALL
    SELECT date '2023-01-02', 1200
)
SELECT
    sale_date,
    amount,
    row_number() OVER (PARTITION BY sale_date ORDER BY amount DESC) AS row_num
FROM sales;

----------------------------------------

TITLE: API Branch Reset Endpoint
DESCRIPTION: API endpoint specification for resetting a branch to its parent state.

LANGUAGE: bash
CODE:
POST /projects/{project_id}/branches/{branch_id_to_restore}/restore

----------------------------------------

TITLE: Implementing API Routes for Voting
DESCRIPTION: Creates API routes in 'app/api/vote/route.ts' for handling POST (new votes) and GET (retrieving vote counts) requests.

LANGUAGE: typescript
CODE:
import { db } from '@/db/drizzle';
import { pollTable } from '@/db/schema';
import { NextRequest, NextResponse } from 'next/server';
import { eq, sql } from 'drizzle-orm';

export async function POST(req: NextRequest) {
  const ipAddress = req.headers.get('x-forwarded-for');

  if (ipAddress == null) {
    return NextResponse.json({ message: 'IP address not found!' });
  }

  const { option } = await req.json();

  const existingVote = await db
    .select()
    .from(pollTable)
    .where(eq(pollTable.ipAddress, ipAddress))
    .execute();

  if (existingVote.length > 0) {
    return NextResponse.json({ message: 'You have already voted!' });
  }

  // Insert a new vote
  await db.insert(pollTable).values({
    option: option,
    ipAddress: ipAddress,
  });

  return NextResponse.json({ message: 'Vote submitted successfully!' });
}

export async function GET() {
  const options = await db
    .select({
      count: sql<number>`cast(count(*) as int)`,
      option: pollTable.option,
    })
    .from(pollTable)
    .groupBy(pollTable.option)
    .execute();
  return NextResponse.json(options);
}

----------------------------------------

TITLE: CREATE TABLE AS with IF NOT EXISTS
DESCRIPTION: Shows how to create a table only if it doesn't already exist

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS new_table_name
AS query;

----------------------------------------

TITLE: Preparing and Pushing Node.js Application to GitHub
DESCRIPTION: Bash commands to initialize a Git repository, create a .gitignore file, add a README, make an initial commit, and push the code to a GitHub repository.

LANGUAGE: bash
CODE:
echo "node_modules/" > .gitignore && echo ".env" >> .gitignore
echo "# neon-render-example" >> README.md
git init && git add . && git commit -m "Initial commit"
git branch -M main
git remote add origin YOUR_GITHUB_REPO_URL
git push -u origin main

----------------------------------------

TITLE: Executing Query on Remote Database with Unnamed Connection
DESCRIPTION: Executes a query on a remote database using an unnamed dblink connection. Retrieves table names from the public schema.

LANGUAGE: sql
CODE:
SELECT *
FROM dblink('host=my_remote_host port=5432 dbname=my_remote_database user=my_remote_user password=my_remote_password sslmode=require',
            'SELECT table_name FROM information_schema.tables WHERE table_schema = ''public''')
AS remote_tables(table_name TEXT);

----------------------------------------

TITLE: Inserting JSON Data into JSONB Column in PostgreSQL
DESCRIPTION: Inserts multiple rows of JSON data into the 'info' column of the 'person' table.

LANGUAGE: sql
CODE:
INSERT INTO person (info)
VALUES
    ('{"name": "John", "age": 30, "city": "New York"}'),
    ('{"name": "Alice", "city": "Los Angeles"}'),
    ('{"name": "Bob", "age": 35 }');

----------------------------------------

TITLE: Installing PostgreSQL Session JWT Extension
DESCRIPTION: SQL command to install the pg_session_jwt extension required for handling JWT authentication in Neon RLS.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pg_session_jwt;

----------------------------------------

TITLE: Nested Loop EXIT Example
DESCRIPTION: Shows how to use EXIT statements in nested loops with labels and conditions

LANGUAGE: plpgsql
CODE:
do
$$
declare
   i int = 0;
   j int = 0;
begin
  <<outer_loop>>
  loop
     i = i + 1;
     exit when i > 3;
	 -- inner loop
	 j = 0;
     <<inner_loop>>
     loop
		j = j + 1;
		exit when j > 3;
		raise notice '(i,j): (%,%)', i, j;
	 end loop inner_loop;
  end loop outer_loop;
end;
$$

----------------------------------------

TITLE: Performing Schema Diff on Neon Branches with GitHub Actions
DESCRIPTION: This YAML configuration sets up a GitHub Action to perform a schema diff between two Neon branches. It's triggered on pull request events and posts the diff as a comment on the PR.

LANGUAGE: yaml
CODE:
name: Schema Diff for Pull Requests
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  schema_diff:
    permissions:
      pull-requests: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Schema Diff
        uses: neondatabase/schema-diff-action@v1
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          compare_branch: preview/pr-${{ github.event.number }}
          base_branch: main
          api_key: ${{ secrets.NEON_API_KEY }}
          database: mydatabase
          username: myrole

----------------------------------------

TITLE: Configuring PropelAuth JWKS URL Format
DESCRIPTION: The format for PropelAuth JSON Web Key Set URL used for JWT validation.

LANGUAGE: plaintext
CODE:
https://{YOUR_PROPEL_AUTH_URL}/.well-known/jwks.json

----------------------------------------

TITLE: Extracting Multiple Time Components
DESCRIPTION: Shows how to extract hour, minute, and second components from a timestamp simultaneously.

LANGUAGE: sql
CODE:
SELECT date_part('hour',TIMESTAMP '2017-03-18 10:20:30') h,
       date_part('minute',TIMESTAMP '2017-03-18 10:20:30') m,
       date_part('second',TIMESTAMP '2017-03-18 10:20:30') s;

----------------------------------------

TITLE: Running Neon CLI with bunx
DESCRIPTION: Command to run Neon CLI without installation using bunx (bun equivalent of npx).

LANGUAGE: shell
CODE:
bunx neonctl <command>

----------------------------------------

TITLE: Inserting Sample Data with Duplicates
DESCRIPTION: Inserts sample fruit data including intentional duplicates to demonstrate removal techniques.

LANGUAGE: sql
CODE:
INSERT INTO basket(fruit)
VALUES
  ('apple'),
  ('apple'),
  ('orange'),
  ('orange'),
  ('orange'),
  ('banana');

----------------------------------------

TITLE: Resetting pg_stat_statements Statistics in Neon Postgres
DESCRIPTION: SQL function call to reset all accumulated statistics in pg_stat_statements. This operation requires neon_superuser privileges in Neon.

LANGUAGE: sql
CODE:
SELECT pg_stat_statements_reset();

----------------------------------------

TITLE: Function Signature of jsonb_each() in PostgreSQL
DESCRIPTION: Defines the signature of the jsonb_each() function, which takes a JSON input and returns a set of records containing key-value pairs.

LANGUAGE: sql
CODE:
jsonb_each(json JSON) -> SETOF record(key text, value json)

----------------------------------------

TITLE: Renaming View Column Example in PostgreSQL
DESCRIPTION: Example of changing the 'title' column of the film_rating view to 'film_title'.

LANGUAGE: sql
CODE:
ALTER VIEW film_rating
RENAME title TO film_title;

----------------------------------------

TITLE: Multiple Variable Assignment with SELECT INTO
DESCRIPTION: Shows how to assign multiple column values to multiple variables using SELECT INTO.

LANGUAGE: plpgsql
CODE:
do
$$
declare
   v_first_name varchar;
   v_last_name varchar;
begin
   -- select the first_name and last_name of the actor id 1
   select first_name, last_name
   into v_first_name, v_last_name
   from actor
   where actor_id = 1;

   -- show the full name
   raise notice '% %', v_first_name, v_last_name;
end;
$$;

----------------------------------------

TITLE: Creating Event Trigger in PostgreSQL
DESCRIPTION: Creates an event trigger named 'audit_ddl_commands' that executes the 'audit_command()' function when a DDL command ends.

LANGUAGE: sql
CODE:
CREATE EVENT TRIGGER audit_ddl_commands
ON ddl_command_end
EXECUTE FUNCTION audit_command();

----------------------------------------

TITLE: Adding Generated Column to Existing Table in PostgreSQL
DESCRIPTION: Demonstrates how to add a generated column to an existing table using the ALTER TABLE statement. This allows for adding calculated columns to tables after their initial creation.

LANGUAGE: sql
CODE:
ALTER TABLE table_name
ADD COLUMN column_name type GENERATED ALWAYS AS (expression) STORED;

----------------------------------------

TITLE: Worker Implementation with Node-Postgres
DESCRIPTION: JavaScript implementation of a Cloudflare Worker using the node-postgres library to query Neon database.

LANGUAGE: javascript
CODE:
import pkg from 'pg';

const { Client } = pkg;

export default {
  async fetch(request, env, ctx) {
    const client = new Client({ connectionString: env.DATABASE_URL });
    await client.connect();
    const { rows } = await client.query('SELECT * FROM books_to_read');
    return new Response(JSON.stringify(rows));
  },
};

----------------------------------------

TITLE: Extracting Liquibase Files in Bash
DESCRIPTION: This snippet demonstrates how to extract the downloaded Liquibase files to a specific directory using tar command in Bash.

LANGUAGE: bash
CODE:
cd ~/Downloads
mkdir ~/liquibase
tar -xzvf liquibase-x.yy.z.tar.gz -C ~/liquibase/

----------------------------------------

TITLE: Creating Users in Neon Auth Integration
DESCRIPTION: This snippet shows how to create a new user in your auth provider's system. It requires the project ID, auth provider, and user's email. Optionally, you can provide the user's display name.

LANGUAGE: bash
CODE:
curl --request POST \
     --url 'https://console.neon.tech/api/v2/projects/auth/user' \
     --header 'authorization: Bearer $NEON_API_KEY' \
     --header 'content-type: application/json' \
     --data '{
       "project_id": "project-id",
       "auth_provider": "stack",
       "email": "user@example.com",
       "name": "Example User"
     }' | jq

----------------------------------------

TITLE: Creating Feature Tests for TODO List
DESCRIPTION: Generate and implement feature tests for the TODO list functionality using Pest.

LANGUAGE: bash
CODE:
php artisan make:test TodoListTest

LANGUAGE: php
CODE:
<?php

use App\Models\User;
use App\Models\Todo;
use function Pest\Laravel\get;
use function Pest\Laravel\{actingAs};
use function Pest\Livewire\livewire;

uses(\Illuminate\Foundation\Testing\RefreshDatabase::class);

test('user can view todos', function () {
    $user = User::factory()->create();

    $todos = Todo::factory()->count(3)->create([
        'user_id' => $user->id,
    ]);

    actingAs($user);

    livewire('todolist')
        ->assertSee($todos[0]->title)
        ->assertSee($todos[1]->title)
        ->assertSee($todos[2]->title);
});

test('user can delete a todo', function () {
    $user = User::factory()->create();

    $todo = Todo::factory()->create([
        'user_id' => $user->id,
    ]);

    actingAs($user);

    livewire('todolist')
        ->call('deleteTodo', $todo->id);

    expect(Todo::find($todo->id))->toBeNull();
});

test('user can not delete a todo that does not belong to them', function () {
    $user = User::factory()->create();
    $otherUser = User::factory()->create();

    $todo = Todo::factory()->create([
        'user_id' => $otherUser->id,
    ]);

    actingAs($user);

    livewire('todolist')
        ->call('deleteTodo', $todo->id);

    expect(Todo::find($todo->id))->not->toBeNull();
});

----------------------------------------

TITLE: Displaying Postgres Extension Version Updates in Markdown
DESCRIPTION: A markdown table showing the version updates for several Postgres extensions (pg_jsonschema, pg_graphql, pgx_ulid) and their compatibility with Postgres 16.

LANGUAGE: markdown
CODE:
| Postgres extension | Old version | New version |
| ------------------ | ----------- | ----------- |
| `pg_jsonschema`    | 0.1.4       | 0.2.0       |
| `pg_graphql`       | 1.1.0       | 1.4.0       |
| `pgx_ulid`         | 0.1.0       | 0.1.3       |

----------------------------------------

TITLE: Supervisor Configuration for Queue Workers
DESCRIPTION: Configuration file for running Laravel queue workers with Supervisor

LANGUAGE: ini
CODE:
[program:laravel-worker]
process_name=%(program_name)s_%(process_num)02d
command=php /path/to/your/project/artisan queue:work database --sleep=3 --tries=3 --max-time=3600
autostart=true
autorestart=true
user=www-data
numprocs=8
redirect_stderr=true
stdout_logfile=/path/to/your/project/worker.log
stopwaitsecs=3600

----------------------------------------

TITLE: Implementing Learn API Endpoint for Updating Chatbot Knowledge
DESCRIPTION: Creates a POST handler for the /api/learn endpoint to add new information to the chatbot's knowledge base. It takes a text input, creates a LlamaIndex document, and stores it in the vector store.

LANGUAGE: typescript
CODE:
import type { APIContext } from 'astro';

import {
  Document,
  Settings,
  OpenAIEmbedding,
  VectorStoreIndex,
  storageContextFromDefaults,
} from 'llamaindex';
import vectorStore from '@/vectorStore';

export async function POST({ request }: APIContext) {
  Settings.embedModel = new OpenAIEmbedding();
  const { text } = await request.json();
  if (!text) return new Response(null, { status: 400 });
  const storageContext = await storageContextFromDefaults({ vectorStore });
  const document = new Document({ text });
  await VectorStoreIndex.fromDocuments([document], { storageContext });
}

----------------------------------------

TITLE: Calculating Local File Cache Hit Ratio in SQL
DESCRIPTION: SQL formula for calculating the file cache hit ratio, which measures the percentage of database requests served from the Local File Cache rather than Neon storage.

LANGUAGE: sql
CODE:
file_cache_hit_ratio = (file_cache_hits / (file_cache_hits + file_cache_misses)) * 100

----------------------------------------

TITLE: Initializing Next.js project with Neon and Okta dependencies
DESCRIPTION: Commands to create a new Next.js project and install necessary dependencies for Neon database integration and Okta authentication.

LANGUAGE: bash
CODE:
npx create-next-app guide-neon-next-okta --typescript --eslint --tailwind --use-npm --no-src-dir --app --import-alias "@/*"

npm install @neondatabase/serverless drizzle-orm
npm install -D drizzle-kit dotenv
npm install next-auth@beta

----------------------------------------

TITLE: Basic PostgreSQL PI() Function Usage
DESCRIPTION: Simple example showing how to call the PI() function to return the value of pi (approximately 3.141592653589793).

LANGUAGE: sql
CODE:
SELECT PI();

----------------------------------------

TITLE: Drizzle ORM Integration
DESCRIPTION: Implementation example using Drizzle ORM with Neon's serverless driver.

LANGUAGE: javascript
CODE:
// Drizzle example with the Neon serverless driver
import { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';

const sql = neon(process.env.DATABASE_URL);

const db = drizzle(sql);

const result = await db.select().from(...);

----------------------------------------

TITLE: Downloading Neon CLI binary for Linux (x64)
DESCRIPTION: Command to download the Neon CLI binary for Linux x64 architecture using curl.

LANGUAGE: bash
CODE:
curl -sL https://github.com/neondatabase/neonctl/releases/latest/download/neonctl-linux-x64 -o neonctl

----------------------------------------

TITLE: Verifying Data Migration in Neon
DESCRIPTION: These SQL queries can be used to verify the successful migration of data from Supabase to Neon by checking record counts and sample data.

LANGUAGE: sql
CODE:
SELECT COUNT(*) FROM lego_sets;
SELECT * FROM lego_themes LIMIT 5;

----------------------------------------

TITLE: Creating Users Table Without Neon Auth in SQL
DESCRIPTION: This SQL statement creates a users table that would be necessary without Neon Auth, including fields for user ID, email, name, and timestamps.

LANGUAGE: sql
CODE:
CREATE TABLE users (
    id TEXT PRIMARY KEY, -- User ID from your auth provider (TEXT type)
    email VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(255),
    -- ... other user fields
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ
);

----------------------------------------

TITLE: Creating a Database in Neon using SQL
DESCRIPTION: This SQL command creates a new database named 'AdventureWorks' in the Neon project.

LANGUAGE: sql
CODE:
CREATE DATABASE "AdventureWorks";

----------------------------------------

TITLE: Listing Organizations with Neon API
DESCRIPTION: This snippet demonstrates how to use the Neon API to list all organizations a user has access to. It requires a personal API key and uses curl to make the request.

LANGUAGE: bash
CODE:
curl --request GET \
     --url 'https://console.neon.tech/api/v2/users/me/organizations' \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $PERSONAL_API_KEY' | jq

----------------------------------------

TITLE: Enabling PostGIS Extension in Neon
DESCRIPTION: SQL command to enable the PostGIS extension in a Neon database. This is typically required before using other PostGIS-related extensions.

LANGUAGE: SQL
CODE:
CREATE EXTENSION IF NOT EXISTS postgis;

----------------------------------------

TITLE: Granting All Privileges on a Table
DESCRIPTION: This SQL command grants all privileges on the 'candidates' table to the 'joe' role.

LANGUAGE: sql
CODE:
GRANT ALL
ON candidates
TO joe;

----------------------------------------

TITLE: Extracting Title and Author from JSONB using jsonb_extract_path() in PostgreSQL
DESCRIPTION: This SQL query demonstrates how to use the jsonb_extract_path() function to extract specific fields (title and author) from a JSONB column in the 'books' table.

LANGUAGE: sql
CODE:
SELECT
    id,
    jsonb_extract_path(info, 'title') as title,
    jsonb_extract_path(info, 'author') as author
FROM books;

----------------------------------------

TITLE: Sample JSON Response from OpenAI Embeddings API
DESCRIPTION: This JSON snippet shows the structure of the response received from OpenAI's Embeddings API. It includes the generated embedding vector, model information, and token usage details.

LANGUAGE: json
CODE:
{
  "object": "list",
  "data": [
    {
      "object": "embedding",
      "index": 0,
      "embedding": [
        -0.006929283495992422,
        -0.005336422007530928,
        ... (omitted for spacing)
        -4.547132266452536e-05,
        -0.024047505110502243
      ],
    }
  ],
  "model": "text-embedding-3-small",
  "usage": {
    "prompt_tokens": 5,
    "total_tokens": 5
  }
}

----------------------------------------

TITLE: Repacking Table Indexes
DESCRIPTION: Command to repack only the indexes of a specified table.

LANGUAGE: bash
CODE:
pg_repack -k -h <your_neon_host> -p 5432 -d <your_neon_database> -U <your_neon_username> --table your_table_name --only-indexes

----------------------------------------

TITLE: Restricting Public Access CLI Command
DESCRIPTION: Command to block public internet access to a Neon project using the CLI.

LANGUAGE: bash
CODE:
neon projects update orange-credit-12345678 --block-vpc-connections true

----------------------------------------

TITLE: Adding API Route for Order Creation in Laravel
DESCRIPTION: PHP code to add a route for the order creation endpoint in the api.php routes file.

LANGUAGE: php
CODE:
Route::post('/orders', [App\Http\Controllers\OrderController::class, 'store']);

----------------------------------------

TITLE: Creating Questions Database Migration Schema
DESCRIPTION: Laravel migration schema defining the structure of the questions table with title and description fields.

LANGUAGE: php
CODE:
Schema::create('questions', function (Blueprint $table) {
   $table->id();
   $table->string('title');
   $table->text('description');
   $table->timestamps();
});

----------------------------------------

TITLE: Complex Query with POSITION() Function
DESCRIPTION: Example showing how to use POSITION() function with WHERE clause to filter results from a film table.

LANGUAGE: sql
CODE:
SELECT
  POSITION('Fateful' in description ),
  description
FROM
  film
WHERE
  POSITION('Fateful' in description ) > 0;

----------------------------------------

TITLE: Database Change Event Format - JSON
DESCRIPTION: Example JSON structure showing the format of database change events triggered by Inngest.

LANGUAGE: json
CODE:
{
  "name": "db/users.inserted",
  "data": {
    "new": {
      "id": {
        "data": 2,
        "encoding": "i"
      },
      "name": {
        "data": "Charly",
        "encoding": "t"
      },
      "email": {
        "data": "charly@inngest.com",
        "encoding": "t"
      }
    },
    "table": "users",
    "txn_commit_time": "2024-09-24T14:41:19.75149Z",
    "txn_id": 36530520
  },
  "ts": 1727146545006
}

----------------------------------------

TITLE: Updating Table Data with LTRIM
DESCRIPTION: Example showing how to update table data by removing leading spaces using LTRIM() function.

LANGUAGE: sql
CODE:
UPDATE articles
SET title = LTRIM(title);

----------------------------------------

TITLE: Implementing RLS Policies with Drizzle
DESCRIPTION: TypeScript implementation of RLS policies using Drizzle ORM for a todos table.

LANGUAGE: typescript
CODE:
import { InferSelectModel, sql } from 'drizzle-orm';
import { bigint, boolean, pgTable, text, timestamp } from 'drizzle-orm/pg-core';
import { authenticatedRole, authUid, crudPolicy } from 'drizzle-orm/neon';

export const todos = pgTable(
  'todos',
  {
    id: bigint('id', { mode: 'bigint' }).primaryKey().generatedByDefaultAsIdentity(),
    userId: text('user_id')
      .notNull()
      .default(sql`(auth.user_id())`),
    task: text('task').notNull(),
    isComplete: boolean('is_complete').notNull().default(false),
    insertedAt: timestamp('inserted_at', { withTimezone: true }).defaultNow().notNull(),
  },
  (table) => [
    crudPolicy({
      role: authenticatedRole,
      read: authUid(table.userId),
      modify: authUid(table.userId),
    }),
  ]
);

export type Todo = InferSelectModel<typeof todos>;

----------------------------------------

TITLE: Using PostgreSQL ARRAY_AGG With ORDER BY Clause
DESCRIPTION: Shows how to use ARRAY_AGG() with an ORDER BY clause to sort the aggregated actor names by first name within each film's array.

LANGUAGE: sql
CODE:
SELECT
    title,
    ARRAY_AGG (
        first_name || ' ' || last_name
        ORDER BY
            first_name
    ) actors
FROM
    film
INNER JOIN film_actor USING (film_id)
INNER JOIN actor USING (actor_id)
GROUP BY
    title
ORDER BY
    title;

----------------------------------------

TITLE: Scheduling Data Archival Job
DESCRIPTION: Example of scheduling a cron job to archive old orders data weekly.

LANGUAGE: sql
CODE:
SELECT cron.schedule(
    'archive-old-orders',
    '0 2 * * 0',  -- Runs every Sunday at 2:00 AM UTC
    $$
        WITH OldOrders AS (
            SELECT *
            FROM orders
            WHERE order_date < NOW() - INTERVAL '90 days'
        )
        INSERT INTO orders_archive SELECT * FROM OldOrders;
        DELETE FROM orders WHERE order_id IN (SELECT order_id FROM OldOrders);
    $$
);

----------------------------------------

TITLE: Enabling pgvector Extension
DESCRIPTION: SQL command to enable the pgvector extension in Postgres.

LANGUAGE: sql
CODE:
CREATE EXTENSION vector;

----------------------------------------

TITLE: Creating Person Table in SQL
DESCRIPTION: SQL statement to create a 'person' table with ID and NAME columns in the database.

LANGUAGE: sql
CODE:
create table person (
    ID int not null,
    NAME varchar(100) not null
);

----------------------------------------

TITLE: Escaped Single Quote String Selection in PostgreSQL
DESCRIPTION: Shows how to escape single quotes by doubling them up in string constants.

LANGUAGE: sql
CODE:
select 'I''m a string constant';

----------------------------------------

TITLE: Using PERCENT_RANK() with PARTITION BY in PostgreSQL
DESCRIPTION: This query demonstrates the use of PERCENT_RANK() function with PARTITION BY clause. It calculates the sales amount percentile by sales employees for both 2018 and 2019, partitioning the data by year.

LANGUAGE: sql
CODE:
SELECT
    name,
	amount,
    PERCENT_RANK() OVER (
		PARTITION BY year
        ORDER BY amount
    )
FROM
    sales_stats;

----------------------------------------

TITLE: Basic SQL Queries with pgcli
DESCRIPTION: Example SQL queries demonstrating table creation and data retrieval using pgcli's autocompletion feature.

LANGUAGE: sql
CODE:
CREATE TABLE my_table AS SELECT now();
SELECT * FROM my_table;

----------------------------------------

TITLE: Basic PostgreSQL INITCAP() Function Syntax
DESCRIPTION: The basic syntax of the INITCAP() function, which takes a text argument and returns the text in proper case.

LANGUAGE: sql
CODE:
INITCAP(text)

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Example of environment variables setup for database connections with different roles.

LANGUAGE: bash
CODE:
# Database owner connection string
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'

# Neon "authenticated" role connection string
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

----------------------------------------

TITLE: Updating Subscription Connection Details in PostgreSQL
DESCRIPTION: This command updates the connection details for a subscription named 'subscription_name'.

LANGUAGE: sql
CODE:
ALTER SUBSCRIPTION subscription_name CONNECTION 'new_connection_string';

----------------------------------------

TITLE: Using ? Operator to Check for Key Existence in PostgreSQL JSONB
DESCRIPTION: This example uses the ? operator to retrieve products whose 'price' key exists as a top-level key in the JSONB data.

LANGUAGE: sql
CODE:
SELECT
  id,
  data ->> 'name' product_name,
  data ->> 'price' price
FROM
  products
WHERE
  data ? 'price';

----------------------------------------

TITLE: Drizzle Schema with RLS Policy
DESCRIPTION: TypeScript implementation of a todos table schema using Drizzle ORM with RLS policy configuration.

LANGUAGE: typescript
CODE:
import { InferSelectModel, sql } from 'drizzle-orm';
import { bigint, boolean, pgTable, text, timestamp } from 'drizzle-orm/pg-core';
import { authenticatedRole, authUid, crudPolicy } from 'drizzle-orm/neon';

export const todos = pgTable(
  'todos',
  {
    id: bigint('id', { mode: 'bigint' }).primaryKey().generatedByDefaultAsIdentity(),
    userId: text('user_id')
      .notNull()
      .default(sql`(auth.user_id())`),
    task: text('task').notNull(),
    isComplete: boolean('is_complete').notNull().default(false),
    insertedAt: timestamp('inserted_at', { withTimezone: true }).defaultNow().notNull(),
  },
  (table) => [
    crudPolicy({
      role: authenticatedRole,
      read: authUid(table.userId),
      modify: authUid(table.userId),
    }),
  ]
);

export type Todo = InferSelectModel<typeof todos>;

----------------------------------------

TITLE: Basic SPLIT_PART Function Syntax
DESCRIPTION: Demonstrates the basic syntax and parameter structure of the SPLIT_PART() function in PostgreSQL.

LANGUAGE: sql
CODE:
SPLIT_PART(string, delimiter, position)

----------------------------------------

TITLE: Connecting to Neon Database in Python
DESCRIPTION: This snippet demonstrates how to establish a connection to a Neon database using psycopg2 in Python. It requires a valid Neon connection string and creates a cursor object for executing queries.

LANGUAGE: python
CODE:
import os
import psycopg2

# Provide your Neon connection string
connection_string = "postgresql://[user]:[password]@[neon_hostname]/[dbname]"

# Connect using the connection string
connection = psycopg2.connect(connection_string)

# Create a new cursor object
cursor = connection.cursor()

----------------------------------------

TITLE: Creating a Database with SQL in Neon
DESCRIPTION: This SQL command creates a new database named 'testdb' in a Neon project. It demonstrates the basic syntax for database creation using SQL, which can be executed from a client like psql or the Neon SQL Editor.

LANGUAGE: sql
CODE:
CREATE DATABASE testdb;

----------------------------------------

TITLE: Installing and Starting PostgreSQL
DESCRIPTION: Install PostgreSQL 16 with contrib modules and configure service startup

LANGUAGE: shell
CODE:
sudo apt install postgresql-16 postgresql-contrib-16
sudo systemctl start postgresql
sudo systemctl enable postgresql

----------------------------------------

TITLE: Verifying Logical Replication Status
DESCRIPTION: SQL query to check if logical replication is enabled by viewing the wal_level setting.

LANGUAGE: sql
CODE:
SHOW wal_level;

----------------------------------------

TITLE: Improving Django settings.py Connection Snippet in Python
DESCRIPTION: An enhancement was made to the Django settings.py connection snippet in the Neon Console's Connection Details widget. This improvement likely includes updates to better configure database connections in Django projects using Neon.

LANGUAGE: python
CODE:
# No specific code provided, but typically involves updating DATABASE settings in settings.py

----------------------------------------

TITLE: Reading Binary Data from PostgreSQL using PHP
DESCRIPTION: PHP method to retrieve and output binary data from PostgreSQL to the web browser, handling mime types and stream operations.

LANGUAGE: php
CODE:
public function read($id) {
    $this->pdo->beginTransaction();
    $stmt = $this->pdo->prepare("SELECT id, file_data, mime_type "
            . "FROM company_files "
            . "WHERE id= :id");
    $stmt->execute([$id]);
    $stmt->bindColumn('file_data', $fileData, \PDO::PARAM_STR);
    $stmt->bindColumn('mime_type', $mimeType, \PDO::PARAM_STR);
    $stmt->fetch(\PDO::FETCH_BOUND);
    $stream = $this->pdo->pgsqlLOBOpen($fileData, 'r');
    header("Content-type: " . $mimeType);
    fpassthru($stream);
}

----------------------------------------

TITLE: Creating Neon Project via API in Azure Region
DESCRIPTION: cURL command to create a new Neon project in Azure East US 2 region using the Neon API. Requires authentication token and specifies Postgres version 16.

LANGUAGE: bash
CODE:
curl --request POST \
     --url https://console.neon.tech/api/v2/projects \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $NEON_API_KEY' \
     --header 'content-type: application/json' \
     --data '
{
  "project": {
    "pg_version": 16,
    "region_id": "azure-eastus2"
  }
}
'

----------------------------------------

TITLE: FreeTDS Configuration
DESCRIPTION: Configuration settings for FreeTDS driver to enable pgloader connection to Azure SQL database.

LANGUAGE: plaintext
CODE:
# /etc/freetds/freetds.conf

...

[host-name]
tds version = 7.4
client charset = UTF-8
encrypt = require
host = ...
port = 1433
database = ...

----------------------------------------

TITLE: Enabling postgres_fdw Extension
DESCRIPTION: Creates the postgres_fdw extension in a Neon database if it doesn't already exist.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS postgres_fdw;

----------------------------------------

TITLE: Granting All Privileges on All Tables in a Schema
DESCRIPTION: This SQL command grants all privileges on all tables in the 'public' schema to the 'joe' role.

LANGUAGE: sql
CODE:
GRANT ALL
ON ALL TABLES
IN SCHEMA "public"
TO joe;

----------------------------------------

TITLE: Updating PostgreSQL Array Elements
DESCRIPTION: These SQL statements show how to update individual array elements and entire arrays in PostgreSQL.

LANGUAGE: SQL
CODE:
UPDATE contacts
SET phones [2] = '(408)-589-5843'
WHERE ID = 3
RETURNING *;

LANGUAGE: SQL
CODE:
UPDATE
  contacts
SET
  phones = '{"(408)-589-5843"}'
WHERE
  id = 3
RETURNING *;

----------------------------------------

TITLE: Updating React Component to Use Convex Hooks
DESCRIPTION: TSX code snippet showing how to update the React component to use Convex useQuery and useMutation hooks for real-time data fetching and updates.

LANGUAGE: tsx
CODE:
import { useQuery, useMutation } from 'convex/react';
import { api } from '../convex/_generated/api';

export default function App() {
  const messages = useQuery(api.chat.getMessages);
  const sendMessage = useMutation(api.chat.sendMessage);
  // ... remaining component code
}

----------------------------------------

TITLE: Using PostgreSQL UPPER() Function with a String Literal
DESCRIPTION: This example demonstrates how to use the UPPER() function to convert a simple string literal to uppercase.

LANGUAGE: sql
CODE:
SELECT UPPER('PostgreSQL');

----------------------------------------

TITLE: Using Custom LCM Aggregate Function in PostgreSQL
DESCRIPTION: Demonstrates the usage of the custom lcm_agg() function to calculate the LCM of all values in the 'numbers' table.

LANGUAGE: sql
CODE:
SELECT lcm_agg(value)
FROM numbers;

----------------------------------------

TITLE: Creating a Read Replica using Neon CLI
DESCRIPTION: This command creates a read replica for a specified branch using the Neon CLI. It uses the 'branches' command with the 'add-compute' subcommand and specifies the compute type as 'read_only'.

LANGUAGE: bash
CODE:
neon branches add-compute mybranch --type read_only

----------------------------------------

TITLE: Creating Main Conversation Page Component in Next.js
DESCRIPTION: Implements the main page component for the conversation interface. It handles conversation state, message synchronization, and UI rendering for the AI voice assistant.

LANGUAGE: typescript
CODE:
'use client';

import { toast } from 'sonner';
import { useParams } from 'next/navigation';
import { useCallback, useEffect, useState } from 'react';
import { type Role, useConversation } from '@11labs/react';
import TextAnimation from '@/components/TextAnimation';
import { X } from 'react-feather';
import Message from '@/components/Message';

export default function () {
  const { slug } = useParams();
  const [currentText, setCurrentText] = useState('');
  const [messages, setMessages] = useState<any[]>([]);
  const [isTranscriptOpen, setIsTranscriptOpen] = useState(false);

  const loadConversation = () => {
    fetch(`/api/c?id=${slug}`)
      .then((res) => res.json())
      .then((res) => {
        if (res.length > 0) {
          setMessages(
            res.map((i: any) => ({
              ...i,
              formatted: {
                text: i.content_transcript,
                transcript: i.content_transcript,
              },
            }))
          );
        }
      });
  };

  const conversation = useConversation({
    onError: (error: string) => {
      toast(error);
    },
    onConnect: () => {
      toast('Connected to ElevenLabs.');
    },
    onMessage: (props: { message: string; source: Role }) => {
      const { message, source } = props;
      if (source === 'ai') setCurrentText(message);
      fetch('/api/c', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id: slug,
          item: {
            type: 'message',
            status: 'completed',
            object: 'realtime.item',
            id: 'item_' + Math.random(),
            role: source === 'ai' ? 'assistant' : 'user',
            content: [{ type: 'text', transcript: message }],
          },
        }),
      }).then(loadConversation);
    },
  });

  const connectConversation = useCallback(async () => {
    toast('Setting up ElevenLabs...');
    try {
      await navigator.mediaDevices.getUserMedia({ audio: true });
      const response = await fetch('/api/i', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });
      const data = await response.json();
      if (data.error) return toast(data.error);
      await conversation.startSession({ signedUrl: data.apiKey });
    } catch (error) {
      toast('Failed to set up ElevenLabs client :/');
    }
  }, [conversation]);

  const disconnectConversation = useCallback(async () => {
    await conversation.endSession();
  }, [conversation]);

  const handleStartListening = () => {
    if (conversation.status !== 'connected') connectConversation();
  };

  const handleStopListening = () => {
    if (conversation.status === 'connected') disconnectConversation();
  };

  useEffect(() => {
    return () => {
      disconnectConversation();
    };
  }, [slug]);

  return (
    <>
      <TextAnimation
        currentText={currentText}
        onStopListening={handleStopListening}
        onStartListening={handleStartListening}
        isAudioPlaying={conversation.isSpeaking}
      />
      {messages.length > 0 && (
        <button
          className="fixed right-4 top-2 text-sm underline"
          onClick={() => setIsTranscriptOpen(!isTranscriptOpen)}
        >
          Show Transcript
        </button>
      )}
      {isTranscriptOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
          <div className="max-h-[90%] max-w-[90%] overflow-y-scroll rounded bg-white p-4 text-black shadow-lg">
            <div className="flex flex-row items-center justify-between">
              <span>Transcript</span>
              <button onClick={() => setIsTranscriptOpen(false)}>
                <X />
              </button>
            </div>
            <div className="mt-4 flex flex-col gap-y-4 border-t py-4">
              {messages.map((conversationItem) => (
                <Message key={conversationItem.id} conversationItem={conversationItem} />
              ))}
            </div>
          </div>
        </div>
      )}
    </>
  );
}

----------------------------------------

TITLE: Basic PostgreSQL UPDATE Syntax
DESCRIPTION: Demonstrates the basic syntax of the PostgreSQL UPDATE statement for modifying data in a table.

LANGUAGE: sql
CODE:
UPDATE table_name
SET column1 = value1,
    column2 = value2,
    ...
WHERE condition;

----------------------------------------

TITLE: Creating Authors and Pages Tables Example
DESCRIPTION: Creates two related tables with a foreign key constraint to demonstrate dependent object handling.

LANGUAGE: sql
CODE:
CREATE TABLE authors (
  author_id INT PRIMARY KEY,
  firstname VARCHAR (50) NOT NULL,
  lastname VARCHAR (50) NOT NULL
);

CREATE TABLE pages (
  page_id SERIAL PRIMARY KEY,
  title VARCHAR (255) NOT NULL,
  contents TEXT,
  author_id INT NOT NULL,
  FOREIGN KEY (author_id) REFERENCES authors (author_id)
);

----------------------------------------

TITLE: Defining Customer Query with ID Parameter
DESCRIPTION: This GraphQL schema definition specifies the getCustomer query, which retrieves a single customer by ID from the Neon database using the @dbquery directive.

LANGUAGE: graphql
CODE:
type Query {
  getCustomer(id: Int!): Customer
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "customer"
      configuration: "postgresql_config"
    )
}

----------------------------------------

TITLE: Calculating Logarithm with Custom Base in PostgreSQL
DESCRIPTION: This example shows how to use the LOG() function with two arguments to calculate the logarithm of a number with a specified base. It calculates the base-10 logarithm of 100.

LANGUAGE: sql
CODE:
SELECT LOG(10,100);

----------------------------------------

TITLE: Generating Random Sensor Readings in Postgres SQL
DESCRIPTION: Creates a table of simulated sensor readings with random temperature and humidity values using the random() function and generate_series().

LANGUAGE: sql
CODE:
CREATE TABLE sensor_readings (
  id SERIAL PRIMARY KEY,
  sensor_name TEXT,
  temperature NUMERIC(5,2),
  humidity NUMERIC(5,2),
  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO sensor_readings (sensor_name, temperature, humidity)
SELECT
  'Sensor-' || generate_series,
  20 + (random() * 15)::NUMERIC(5,2),  -- Temperature between 20°C and 35°C
  40 + (random() * 40)::NUMERIC(5,2)   -- Humidity between 40% and 80%
FROM generate_series(1, 5);

SELECT * FROM sensor_readings;

----------------------------------------

TITLE: Creating a Neon Branch with GitHub Actions
DESCRIPTION: Demonstrates a GitHub Actions workflow for creating a Neon branch, including project ID, parent ID, branch name, and API key.

LANGUAGE: yaml
CODE:
name: Create Neon Branch with GitHub Actions Demo
run-name: Create a Neon Branch 🚀
jobs:
  Create-Neon-Branch:
    uses: neondatabase/create-branch-action@v5
    with:
      project_id: rapid-haze-373089
      parent_id: br-long-forest-224191
      branch_name: from_action_reusable
      api_key: {{ secrets.NEON_API_KEY }}
    id: create-branch
  - run: echo project_id ${{ steps.create-branch.outputs.project_id}}
  - run: echo branch_id ${{ steps.create-branch.outputs.branch_id}}

----------------------------------------

TITLE: Creating PostgreSQL Superuser
DESCRIPTION: SQL commands to create a new superuser role with login privileges and password.

LANGUAGE: sql
CODE:
CREATE ROLE username SUPERUSER;

LANGUAGE: sql
CODE:
CREATE ROLE spiderman SUPERUSER
LOGIN
PASSWORD 'moreSecurePass';

----------------------------------------

TITLE: Enabling Experimental Extensions
DESCRIPTION: SQL command required to enable experimental/unstable extensions

LANGUAGE: sql
CODE:
SET neon.allow_unstable_extensions = 'true';

----------------------------------------

TITLE: Basic REGEXP_MATCHES Syntax in PostgreSQL
DESCRIPTION: Shows the fundamental syntax of the REGEXP_MATCHES() function with its three main arguments: source_string, pattern, and optional flags.

LANGUAGE: sql
CODE:
REGEXP_MATCHES(source_string, pattern [, flags])

----------------------------------------

TITLE: Retrieving Project-Level Metrics with Curl
DESCRIPTION: Example of querying project-level consumption metrics with specific date range and granularity parameters using curl.

LANGUAGE: bash
CODE:
curl --request GET \
     --url 'https://console.neon.tech/api/v2/consumption_history/projects?limit=10&from=2024-06-30T00%3A00%3A00Z&to=2024-07-02T00%3A00%3A00Z&granularity=hourly&org_id=org-ocean-art-12345678' \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $NEON_API_KEY'

----------------------------------------

TITLE: Listing Active dblink Connections
DESCRIPTION: Retrieves a list of all currently open, named dblink connections in the current session.

LANGUAGE: sql
CODE:
SELECT * FROM dblink_get_connections();

----------------------------------------

TITLE: Creating Svelte Component to Display Database Version
DESCRIPTION: Svelte component code to display the database version retrieved from the server-side route.

LANGUAGE: svelte
CODE:
<script>
    export let data;
</script>

<h1>Database Version</h1>
<p>{data.version}</p>

----------------------------------------

TITLE: Defining PostgreSQL REPLACE() Function Syntax
DESCRIPTION: Shows the basic syntax of the PostgreSQL REPLACE() function, which takes three arguments: the source string, the substring to replace, and the new substring.

LANGUAGE: SQL
CODE:
REPLACE(source, from_text, to_text);

----------------------------------------

TITLE: Getting JSON Array Type
DESCRIPTION: Shows how to use jsonb_typeof() to get the type of an empty JSON array.

LANGUAGE: sql
CODE:
select jsonb_typeof('[]');

----------------------------------------

TITLE: Using FX Prefix for Strict Format Matching
DESCRIPTION: An example demonstrating how the FX prefix forces strict format matching, causing an error with multiple spaces.

LANGUAGE: sql
CODE:
SELECT
    TO_TIMESTAMP('2017     Aug','FXYYYY MON');

----------------------------------------

TITLE: Basic JSON and JSONB Type Casting in PostgreSQL
DESCRIPTION: Demonstrates how to create JSON and JSONB values from string literals using type casting in PostgreSQL.

LANGUAGE: sql
CODE:
SELECT
    '{"name": "Alice", "age": 30}'::JSON as col_json,
    '[1, 2, "foo", null]'::JSONB as col_jsonb;

----------------------------------------

TITLE: Basic current_timestamp Function Signatures
DESCRIPTION: The two forms of the current_timestamp function - with and without precision parameter.

LANGUAGE: sql
CODE:
current_timestamp -> timestamp with timezone

LANGUAGE: sql
CODE:
current_timestamp(precision) -> timestamp with timezone

----------------------------------------

TITLE: Installing pg_session_jwt Postgres Extension
DESCRIPTION: SQL command to install the required Postgres extension for JWT session handling.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pg_session_jwt;

----------------------------------------

TITLE: Searched CASE Statement Syntax in PL/pgSQL
DESCRIPTION: Shows the basic syntax of a searched CASE statement in PL/pgSQL. It evaluates boolean expressions sequentially and executes the corresponding WHEN section when a true condition is found.

LANGUAGE: sql
CODE:
case
    when boolean-expression-1 then
      statements
  [ when boolean-expression-2 then
      statements
    ... ]
  [ else
      statements ]
end case;

----------------------------------------

TITLE: Installing EF Core Tools Globally
DESCRIPTION: Command to install the dotnet-ef tool globally for generating and running migrations.

LANGUAGE: bash
CODE:
dotnet tool install --global dotnet-ef

----------------------------------------

TITLE: GitHub Actions CI/CD Pipeline for Migrations
DESCRIPTION: GitHub Actions workflow that tests migrations on a Neon branch before deploying to production.

LANGUAGE: yaml
CODE:
name: Test and Deploy Migrations

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'migrations/**'
  push:
    branches: [main]
    paths:
      - 'migrations/**'

jobs:
  migration-test:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Install migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.18.2/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/bin/migrate

----------------------------------------

TITLE: Simple String Splitting Example
DESCRIPTION: Shows how to split a comma-separated string and retrieve the second element using SPLIT_PART().

LANGUAGE: sql
CODE:
SELECT SPLIT_PART('A,B,C', ',', 2);

----------------------------------------

TITLE: Creating Project Directory
DESCRIPTION: Commands to create and navigate to the project directory

LANGUAGE: bash
CODE:
mkdir self-host-umami-neon
cd self-host-umami-neon

----------------------------------------

TITLE: Installing Prisma Read Replicas Extension
DESCRIPTION: Command to install the Prisma read replicas extension package via npm

LANGUAGE: bash
CODE:
npm install @prisma/extension-read-replicas

----------------------------------------

TITLE: Creating Salary Validation Trigger
DESCRIPTION: Creates a BEFORE UPDATE trigger specifically for the salary column that executes the validation function before any salary updates.

LANGUAGE: sql
CODE:
CREATE TRIGGER before_update_salary_trigger
BEFORE UPDATE OF salary ON employees
FOR EACH ROW
EXECUTE FUNCTION fn_before_update_salary();

----------------------------------------

TITLE: Creating Simple Interval
DESCRIPTION: Example showing how to create an interval specifying years, months, days, and hours using named parameters.

LANGUAGE: sql
CODE:
SELECT
  MAKE_INTERVAL(
    years => 3, months => 6, days => 15, hours => 4
  );

----------------------------------------

TITLE: Creating Postgres Publication for Airbyte
DESCRIPTION: SQL command to create a publication named 'airbyte_publication' for specified tables.

LANGUAGE: sql
CODE:
CREATE PUBLICATION airbyte_publication FOR TABLE <tbl1, tbl2, tbl3>;

----------------------------------------

TITLE: AI Request Offloading with step.ai.infer()
DESCRIPTION: Implementation of AI request offloading using Inngest's step.ai.infer() API. This approach pauses workflows while waiting for LLM responses, optimizing compute usage in serverless environments.

LANGUAGE: typescript
CODE:
import { inngest } from '@/inngest';
import { getPromptForToolsSearch, vectorSearch } from '@/helpers';

export const ragWorkflow = client.createFunction(
  { id: 'rag-workflow', concurrency: 10 },
  { event: 'chat.message' },
  async ({ event, step }) => {
    const { message } = event.data;

    const prompt = getPromptForToolsSearch(message);
    await step.ai.infer('tools.search', {
      model: openai({ model: 'gpt-4o' }),
      body: {
        messages: prompt,
      },
    });

    // other steps...
  }
);

----------------------------------------

TITLE: Dropping Multiple Columns in PostgreSQL
DESCRIPTION: Syntax for dropping multiple columns from a table simultaneously using multiple DROP COLUMN clauses in a single ALTER TABLE statement.

LANGUAGE: SQL
CODE:
ALTER TABLE table_name
DROP COLUMN column_name1,
DROP COLUMN column_name2,
...;

----------------------------------------

TITLE: Setting Up Environment Variables for Database Connections
DESCRIPTION: Configures environment variables for administrative and authenticated database connections in a .env file. These variables are used to establish connections with different permission levels.

LANGUAGE: bash
CODE:
# Database owner connection string
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'

# Neon "authenticated" role connection string
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

----------------------------------------

TITLE: Generating Random Bytes with pgcrypto
DESCRIPTION: Example of using gen_random_bytes function to generate cryptographically strong random bytes, useful for salts or initialization vectors.

LANGUAGE: sql
CODE:
SELECT gen_random_bytes(16);

----------------------------------------

TITLE: Connecting to PostgreSQL with psql
DESCRIPTION: This command connects to the PostgreSQL server using the postgres user via the psql client.

LANGUAGE: bash
CODE:
psql -U postgres

----------------------------------------

TITLE: Neon Database Connection String Format
DESCRIPTION: The standard connection string format for connecting to a Neon database from Hasura Cloud. The string includes user credentials, hostname, and database name parameters.

LANGUAGE: text
CODE:
postgresql://[user]:[password]@[neon_hostname]/[dbname]

----------------------------------------

TITLE: Adding Key/Value Pair to JSON Object
DESCRIPTION: Demonstration of using jsonb_insert() to add a new property to a JSON object.

LANGUAGE: SQL
CODE:
SELECT
  jsonb_insert('{"name": "John"}', '{age}', '2');

----------------------------------------

TITLE: Creating and Populating student_scores Table in PostgreSQL
DESCRIPTION: This snippet demonstrates how to create a table named student_scores and insert sample data for testing the dense_rank() function.

LANGUAGE: sql
CODE:
CREATE TABLE student_scores (
   student_id SERIAL PRIMARY KEY,
   student_name VARCHAR(50) NOT NULL,
   score INT NOT NULL
);

INSERT INTO student_scores (student_name, score) VALUES
   ('Alice', 85),
   ('Bob', 92),
   ('Charlie', 78),
   ('David', 92),
   ('Eve', 85),
   ('Frank', 78);

----------------------------------------

TITLE: Database Queue Connection Setup
DESCRIPTION: Queue connection configuration in environment file

LANGUAGE: env
CODE:
QUEUE_CONNECTION=database

----------------------------------------

TITLE: Creating New Database
DESCRIPTION: SQL command to create a new database named 'db'

LANGUAGE: sql
CODE:
CREATE DATABASE db;

----------------------------------------

TITLE: Updating Table Data Using PostgreSQL INITCAP() Function
DESCRIPTION: An SQL UPDATE statement that uses the INITCAP() function to convert all blog post titles to proper case.

LANGUAGE: sql
CODE:
UPDATE blog_posts
SET title = INITCAP(title)
RETURNING *;

----------------------------------------

TITLE: Basic SIGN() Function Examples in PostgreSQL
DESCRIPTION: Demonstrates the SIGN() function behavior with different numeric inputs including negative, zero, positive, and NULL values.

LANGUAGE: sql
CODE:
SELECT
  SIGN(-10),
  SIGN(0),
  SIGN(10),
  SIGN(NULL);

----------------------------------------

TITLE: Setting up Django project and app
DESCRIPTION: Creates a new Django project, sets up a virtual environment, installs dependencies, and starts a new app called 'notes'.

LANGUAGE: bash
CODE:
python -m venv venv
source venv/bin/activate # On Windows, use venv\Scripts\activate
pip install django psycopg2-binary
django-admin startproject django_notes
cd django_notes
python manage.py startapp notes

----------------------------------------

TITLE: Extracting Email Addresses Using jsonb_extract_path_text in PostgreSQL
DESCRIPTION: Shows how to use jsonb_extract_path_text to extract email addresses from a JSONB column in a SELECT query.

LANGUAGE: sql
CODE:
SELECT id, jsonb_extract_path_text(profile, 'contact', 'email') as email
FROM users;

----------------------------------------

TITLE: Accessing Nested JSONB Values
DESCRIPTION: Shows how to extract nested values from JSONB data using chained operators.

LANGUAGE: sql
CODE:
SELECT
    id,
    profile -> 'name' as name,
    profile -> 'settings' ->> 'privacy' as privacy
FROM user_profiles;

----------------------------------------

TITLE: PostgreSQL MD5() Function Syntax
DESCRIPTION: This snippet shows the syntax of the PostgreSQL MD5() function. The function takes a single string argument for which the MD5 hash is calculated.

LANGUAGE: sql
CODE:
MD5(string)

----------------------------------------

TITLE: Checking Row Count in PostgreSQL
DESCRIPTION: SQL query to count the number of rows in the 'playing_with_neon' table to verify replication.

LANGUAGE: sql
CODE:
SELECT COUNT(*) FROM playing_with_neon;

----------------------------------------

TITLE: Creating Products Table with JSONB Column
DESCRIPTION: Creates a table structure to store product information with a JSONB column for storing nested attributes and specifications.

LANGUAGE: sql
CODE:
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    attributes JSONB
);

----------------------------------------

TITLE: Using Functions in CHECK Constraints in PostgreSQL
DESCRIPTION: Illustrates how to use SQL functions (TRIM and LENGTH) in a CHECK constraint to ensure the first name has at least 3 characters.

LANGUAGE: sql
CODE:
ALTER TABLE employees
ADD CONSTRAINT first_name_check
CHECK ( LENGTH(TRIM(first_name)) >= 3);

----------------------------------------

TITLE: Polling Operation Status via Neon API
DESCRIPTION: cURL command to poll the status of a specific operation using the Neon API. Used to check operation completion before proceeding with subsequent API requests.

LANGUAGE: bash
CODE:
curl 'https://console.neon.tech/api/v2/projects/autumn-disk-484331/operations/055b17e6-ffe3-47ab-b545-cfd7db6fd8b8' \
  -H 'Accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY"

----------------------------------------

TITLE: Altering PostgreSQL Tablespace
DESCRIPTION: This snippet demonstrates the general syntax for altering a tablespace in PostgreSQL. It shows how to specify the tablespace name and the action to be performed.

LANGUAGE: sql
CODE:
ALTER TABLESPACE tablespace_name
action;

----------------------------------------

TITLE: Stack Auth JWKS URL Format
DESCRIPTION: The format for Stack Auth JWKS URL used to validate JWT tokens in Neon RLS

LANGUAGE: plaintext
CODE:
https://api.stack-auth.com/api/v1/projects/{YOUR_PROJECT_ID}/.well-known/jwks.json

----------------------------------------

TITLE: Defining PostgreSQL LEFT() Function Syntax
DESCRIPTION: This snippet shows the basic syntax of the PostgreSQL LEFT() function, which takes a string and an integer n as arguments.

LANGUAGE: sql
CODE:
LEFT(string, n)

----------------------------------------

TITLE: Initiating Passwordless Connection with psql in Bash
DESCRIPTION: This command starts the passwordless authentication process for connecting to a Neon database using psql.

LANGUAGE: bash
CODE:
psql -h pg.neon.tech

----------------------------------------

TITLE: Writing pytest Tests for Flask Application
DESCRIPTION: Test cases using pytest for the Questions route including fixtures and assertions

LANGUAGE: python
CODE:
import pytest
from app import app, db
from models import Question

@pytest.fixture
def client():
    app.config['TESTING'] = True
    with app.test_client() as client:
        with app.app_context():
            db.create_all()
            yield client
            db.session.remove()
            db.drop_all()

def test_get_questions(client):
    question = Question(title='Test Question', description='This is a test')
    db.session.add(question)
    db.session.commit()

    response = client.get('/questions')
    assert response.status_code == 200
    data = response.get_json()
    assert len(data) == 1
    assert data[0]['title'] == 'Test Question'

----------------------------------------

TITLE: PL/pgSQL Continue Statement Syntax
DESCRIPTION: Basic syntax for the continue statement in PL/pgSQL, showing optional loop_label and condition parameters.

LANGUAGE: css
CODE:
continue [loop_label] [when condition]

----------------------------------------

TITLE: Querying All Columns
DESCRIPTION: Example of selecting all columns using the asterisk wildcard from the customer table.

LANGUAGE: sql
CODE:
SELECT * FROM customer;

----------------------------------------

TITLE: Handling Invalid Timestamp Values
DESCRIPTION: An example showing how TO_TIMESTAMP() handles an invalid timestamp value, resulting in an error.

LANGUAGE: sql
CODE:
SELECT
    TO_TIMESTAMP('2017-02-31 30:8:00', 'YYYY-MM-DD HH24:MI:SS');

----------------------------------------

TITLE: Inserting Sample Course Data
DESCRIPTION: SQL command to insert five sample courses into the courses table with returning clause to display inserted data.

LANGUAGE: sql
CODE:
INSERT INTO courses ( name, duration)
VALUES
   ('Introduction to PostgreSQL', '10 hours'),
   ('Advanced PostgreSQL Performance Tuning', '15 hours'),
   ('C# Fundamentals', '12 hours' ),
   ('Building Web Applications with C# and ASP.NET', '20 hours'),
   ('PostgreSQL for Application Developers', '18 hours')
RETURNING id, name, duration;

----------------------------------------

TITLE: Querying Formatted JSONB Data
DESCRIPTION: Retrieves recipe data with formatted JSONB output using jsonb_pretty() function.

LANGUAGE: sql
CODE:
SELECT
  name,
  jsonb_pretty(details)
FROM
  recipes;

----------------------------------------

TITLE: Handling Multiple Spaces in Input String
DESCRIPTION: An example showing how TO_TIMESTAMP() handles multiple spaces in the input string without the FX prefix.

LANGUAGE: sql
CODE:
SELECT
    TO_TIMESTAMP('2017     Aug','YYYY MON');

----------------------------------------

TITLE: Database Configuration File
DESCRIPTION: INI file content for storing database connection parameters

LANGUAGE: python
CODE:
[postgresql]
host=localhost
database=suppliers
user=YourUsername
password=YourPassword

----------------------------------------

TITLE: Simple String Concatenation with CONCAT_WS - SQL
DESCRIPTION: Shows how to concatenate two simple strings ('PostgreSQL' and 'Tutorial') using a space as a separator. Returns 'PostgreSQL Tutorial' as the result.

LANGUAGE: sql
CODE:
SELECT CONCAT_WS(' ', 'PostgreSQL', 'Tutorial') title;

----------------------------------------

TITLE: Creating New Laravel Project
DESCRIPTION: Command to create a new Laravel project using Composer and navigate to the project directory.

LANGUAGE: bash
CODE:
composer create-project laravel/laravel laravel-auth-demo
cd laravel-auth-demo

----------------------------------------

TITLE: Searching for Exact Phrases
DESCRIPTION: Shows how to search for an exact phrase 'metal keyboard' within the description column.

LANGUAGE: sql
CODE:
SELECT description, category
FROM mock_items
WHERE description @@@ '"metal keyboard"';

----------------------------------------

TITLE: Creating Directory for PostgreSQL Tablespace (PHP)
DESCRIPTION: PHP command to create a new directory for a tablespace. This is used in the context of a more complex example.

LANGUAGE: php
CODE:
mkdir C:\pgdata\demo

----------------------------------------

TITLE: Basic VACUUM Operation in PostgreSQL
DESCRIPTION: Example of running a basic VACUUM operation on a table to mark deleted space for reuse without reducing table size.

LANGUAGE: sql
CODE:
VACUUM your_table_name;

----------------------------------------

TITLE: Using Pooled Connection String
DESCRIPTION: Example of a Neon pooled connection string format that enables connection pooling by adding the -pooler suffix to the endpoint ID.

LANGUAGE: text
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456-pooler.us-east-2.aws.neon.tech/dbname?sslmode=require

----------------------------------------

TITLE: Granting SELECT Privilege on a Table
DESCRIPTION: This SQL command grants the SELECT privilege on the 'candidates' table to the 'joe' role.

LANGUAGE: sql
CODE:
GRANT SELECT
ON candidates
TO joe;

----------------------------------------

TITLE: Basic avg() Function Signature
DESCRIPTION: Shows the basic syntax and return type of the avg() function for calculating arithmetic means.

LANGUAGE: sql
CODE:
avg(expression) -> numeric type

----------------------------------------

TITLE: Inserting Network Data in Postgres for pgRouting
DESCRIPTION: This SQL command inserts network data into the 'roads' table, representing connections between nodes with associated costs.

LANGUAGE: sql
CODE:
INSERT INTO roads (source, target, cost) VALUES
  (1, 2, 4.0),
  (2, 3, 3.0),
  (3, 4, 2.5),
  (1, 4, 10.0);

----------------------------------------

TITLE: Adding a Single Column in PostgreSQL
DESCRIPTION: This snippet demonstrates how to add a single column to an existing table using the ALTER TABLE ADD COLUMN statement.

LANGUAGE: sql
CODE:
ALTER TABLE table_name
ADD COLUMN new_column_name data_type constraint;

----------------------------------------

TITLE: Querying Arrays in JSONB using Postgres
DESCRIPTION: This SQL snippet demonstrates how to query arrays within JSONB data using the '@>' operator. It checks if the 'tags' array contains a specific value.

LANGUAGE: sql
CODE:
SELECT * FROM documents WHERE data->'tags' @> '["JSONB"]'

----------------------------------------

TITLE: JWT Token Structure Example
DESCRIPTION: Example of a JWT token structure showing header, payload and signature components

LANGUAGE: plaintext
CODE:
Header.Payload.Signature

----------------------------------------

TITLE: AWS Region Identifiers for Neon Autoscaling
DESCRIPTION: AWS region identifiers where Neon's autoscaling feature is now available.

LANGUAGE: plaintext
CODE:
aws-us-east-1
aws-us-west-2

----------------------------------------

TITLE: Dropping PostgreSQL Temporary Table
DESCRIPTION: Example showing how to remove a temporary table using the DROP TABLE statement. Unlike creation, the TEMP keyword is not needed for dropping.

LANGUAGE: sql
CODE:
DROP TABLE customers;

----------------------------------------

TITLE: Constant Declaration Syntax
DESCRIPTION: Shows the basic syntax for declaring constants in PL/pgSQL with data type and initialization.

LANGUAGE: sql
CODE:
constant_name constant data_type = expression;

----------------------------------------

TITLE: JUSTIFY_DAYS() with Time Components
DESCRIPTION: Shows how JUSTIFY_DAYS() handles intervals that include hours, minutes, and seconds while converting days to months.

LANGUAGE: sql
CODE:
SELECT JUSTIFY_DAYS(INTERVAL '15 days 2 hours'),
       JUSTIFY_DAYS(INTERVAL '55 days 30 minutes'),
       JUSTIFY_DAYS(INTERVAL '75 days 45 seconds');

----------------------------------------

TITLE: Demonstrating PostgreSQL String Functions
DESCRIPTION: This snippet showcases various PostgreSQL string functions with their descriptions, examples, and results. It includes functions for ASCII conversion, concatenation, formatting, case manipulation, and more.

LANGUAGE: SQL
CODE:
SELECT ASCII('A'); -- Returns 65
SELECT CHR(65); -- Returns 'A'
SELECT CONCAT('A','B','C'); -- Returns 'ABC'
SELECT CONCAT_WS(',','A','B','C'); -- Returns 'A,B,C'
SELECT FORMAT('Hello %s','PostgreSQL'); -- Returns 'Hello PostgreSQL'
SELECT INITCAP('hI tHERE'); -- Returns 'Hi There'
SELECT LEFT('ABC',1); -- Returns 'A'
SELECT LENGTH('ABC'); -- Returns 3
SELECT LOWER('hI tHERE'); -- Returns 'hi there'
SELECT LPAD('123', 5, '00'); -- Returns '00123'
SELECT LTRIM('00123'); -- Returns '123'
SELECT MD5('ABC'); -- Returns MD5 hash
SELECT POSITION('B' in 'A B C'); -- Returns 3
SELECT REGEXP_MATCHES('ABC', '^(A)(..)$', 'g'); -- Returns {A,BC}
SELECT REGEXP_REPLACE('John Doe','(.*) (.*)','\2, \1'); -- Returns 'Doe, John'
SELECT REPEAT('*', 5); -- Returns '*****'
SELECT REPLACE('ABC','B','A'); -- Returns 'AAC'
SELECT REVERSE('ABC'); -- Returns 'CBA'
SELECT RIGHT('ABC', 2); -- Returns 'BC'
SELECT RPAD('ABC', 6, 'xo'); -- Returns 'ABCxox'
SELECT RTRIM('abcxxzx', 'xyz'); -- Returns 'abc'
SELECT SPLIT_PART('2017-12-31','-',2); -- Returns '12'
SELECT SUBSTRING('ABC',1,1); -- Returns 'A'
SELECT TRIM(' ABC  '); -- Returns 'ABC'
SELECT UPPER('hI tHERE'); -- Returns 'HI THERE'

----------------------------------------

TITLE: Inserting Data into a Table with DOUBLE PRECISION Column in PostgreSQL
DESCRIPTION: This snippet shows how to insert data into a table that includes a DOUBLE PRECISION column. It inserts temperature readings for different locations.

LANGUAGE: SQL
CODE:
INSERT INTO
  temperatures (location, temperature)
VALUES
  ('Lab Room 1', 23.5),
  ('Server Room 1', 21.8),
  ('Server Room 2', 24.3)
RETURNING *;

----------------------------------------

TITLE: Basic SUBSTRING() Function Usage in PostgreSQL
DESCRIPTION: Demonstrates the basic syntax of the SUBSTRING() function to extract a portion of a string based on start position and length.

LANGUAGE: sql
CODE:
SELECT SUBSTRING ('PostgreSQL', 1, 8);

----------------------------------------

TITLE: Basic PostgreSQL GCD() Function Example
DESCRIPTION: Demonstrates how to use the GCD() function to find the greatest common divisor of two numbers (8 and 12).

LANGUAGE: sql
CODE:
SELECT gcd(8,12) result;

----------------------------------------

TITLE: Testing PostgreSQL Connection in PHP
DESCRIPTION: PHP script to test the connection to PostgreSQL database using the Connection class.

LANGUAGE: php
CODE:
<?php

require 'vendor/autoload.php';

use PostgreSQLTutorial\Connection as Connection;

try {
    Connection::get()->connect();
    echo 'A connection to the PostgreSQL database sever has been established successfully.';
} catch (\PDOException $e) {
    echo $e->getMessage();
}

----------------------------------------

TITLE: Prepared Statement with Python psycopg2
DESCRIPTION: Example showing how to use prepared statements with the Python psycopg2 library when connecting through PgBouncer.

LANGUAGE: python
CODE:
cur = conn.cursor()
  query = "SELECT * FROM users WHERE username = %s;"
  cur.execute(query, ('alice',), prepare=True)
  results = cur.fetchall()

----------------------------------------

TITLE: Using PostgreSQL LAST_VALUE Over a Partition
DESCRIPTION: This example shows how to use the LAST_VALUE() function to return all products along with the most expensive product per product group, demonstrating partitioning by group_id.

LANGUAGE: sql
CODE:
SELECT
    product_id,
    product_name,
    group_id,
    price,
    LAST_VALUE(product_name)
    OVER(
	PARTITION BY group_id
        ORDER BY price
        RANGE BETWEEN
            UNBOUNDED PRECEDING AND
            UNBOUNDED FOLLOWING
    ) highest_price
FROM
    products;

----------------------------------------

TITLE: Formatted TIMEOFDAY() Output in PostgreSQL
DESCRIPTION: The result of formatting the TIMEOFDAY() output using to_char() function, showing the current date and time in 'YYYY-MM-DD HH24:MI:SS' format.

LANGUAGE: text
CODE:
    current_time
---------------------
 2024-03-20 10:26:57
(1 row)

----------------------------------------

TITLE: Basic jsonb_strip_nulls() Example
DESCRIPTION: Shows how the function removes object fields with null values while preserving null values in arrays. Demonstrates the selective nature of the function in handling different types of null values.

LANGUAGE: sql
CODE:
SELECT
  jsonb_strip_nulls(
    '{"first_name": "John", "middle_name":null, "last_name": "Doe", "scores": [null, 4, 5]}'
  );

----------------------------------------

TITLE: Server Endpoint with postgres.js in SolidStart
DESCRIPTION: JavaScript code for creating a server endpoint (API route) in SolidStart using the postgres.js library to connect to a Neon database and query the PostgreSQL version.

LANGUAGE: javascript
CODE:
// File: routes/api/test.ts

import postgres from 'postgres';

export async function GET() {
  const sql = postgres(import.meta.env.DATABASE_URL, { ssl: 'require' });
  const response = await sql`SELECT version()`;
  return new Response(JSON.stringify(response[0]), {
    headers: { 'Content-Type': 'application/json' },
  });
}

----------------------------------------

TITLE: Inserting and Returning SERIAL Value in PostgreSQL
DESCRIPTION: This example demonstrates how to insert a new row and immediately retrieve the generated SERIAL value using the RETURNING clause.

LANGUAGE: sql
CODE:
INSERT INTO fruits(name)
VALUES('Banana')
RETURNING id;

----------------------------------------

TITLE: Removing IP Addresses from the Allowlist
DESCRIPTION: The remove subcommand removes specified IP addresses from the allowlist. It requires the project ID to be specified if the account has multiple projects.

LANGUAGE: bash
CODE:
neon ip-allow remove [ips ...] [options]

LANGUAGE: bash
CODE:
neon ip-allow remove 192.0.2.3 --project-id cold-grass-40154007

----------------------------------------

TITLE: Creating Tables with Foreign Key Constraints
DESCRIPTION: Example of creating tables with foreign key relationships to demonstrate how renaming affects dependent objects.

LANGUAGE: sql
CODE:
CREATE TABLE customer_groups(
    id SERIAL PRIMARY KEY,
    name VARCHAR NOT NULL
);

CREATE TABLE customers(
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    group_id INT NOT NULL,
    FOREIGN KEY (group_id) REFERENCES customer_groups(id)
       ON DELETE CASCADE
       ON UPDATE CASCADE
);

----------------------------------------

TITLE: Environment Variables for Database Connections
DESCRIPTION: Defines environment variables for database connections, including owner and authenticated role connection strings for both server-side and client-side use.

LANGUAGE: bash
CODE:
# Used for database migrations
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'

# Used for server-side fetching
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

# Used for client-side fetching
NEXT_PUBLIC_DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

----------------------------------------

TITLE: Using Admonition Component in Markdown
DESCRIPTION: Demonstrates how to use the Admonition component to highlight different types of information in the documentation.

LANGUAGE: markdown
CODE:
<Admonition type="note">
Highlights information that users should take into account, even when skimming.
</Admonition>

<Admonition type="important">
Crucial information necessary for users to succeed.
</Admonition>

<Admonition type="tip">
Optional information to help a user be more successful.
</Admonition>

<Admonition type="info">
Information that helps users understand the things better.
</Admonition>

<Admonition type="warning">
Critical content demanding immediate user attention due to potential risks.
</Admonition>

<Admonition type="comingSoon">
Information about features that are coming soon.
</Admonition>

----------------------------------------

TITLE: Verifying PostgreSQL User Password Change
DESCRIPTION: This psql command shows how to view detailed information about a user, including password expiration, using the \du command.

LANGUAGE: text
CODE:
\du super

----------------------------------------

TITLE: Initializing PostgreSQL Connection Pool with pgvector
DESCRIPTION: Sets up an asynchronous connection pool to PostgreSQL using asyncpg, initializes the pgvector extension, and provides functions for managing the database lifecycle.

LANGUAGE: python
CODE:
import os
import asyncpg
from loguru import logger
from typing import Optional
from pgvector.asyncpg import register_vector

conn_pool: Optional[asyncpg.Pool] = None

async def init_postgres() -> None:
    global conn_pool
    try:
        logger.info("Initializing PostgreSQL connection pool...")

        async def initalize_vector(conn):
            await register_vector(conn)

        conn_pool = await asyncpg.create_pool(
            dsn=os.getenv("DATABASE_URL"), init=initalize_vector
        )
        logger.info("PostgreSQL connection pool created successfully.")

    except Exception as e:
        logger.error(f"Error initializing PostgreSQL connection pool: {e}")
        raise

async def get_postgres() -> asyncpg.Pool:
    global conn_pool
    if conn_pool is None:
        logger.error("Connection pool is not initialized.")
        raise ConnectionError("PostgreSQL connection pool is not initialized.")
    try:
        return conn_pool
    except Exception as e:
        logger.error(f"Failed to return PostgreSQL connection pool: {e}")
        raise

async def close_postgres() -> None:
    global conn_pool
    if conn_pool is not None:
        try:
            logger.info("Closing PostgreSQL connection pool...")
            await conn_pool.close()
            logger.info("PostgreSQL connection pool closed successfully.")
        except Exception as e:
            logger.error(f"Error closing PostgreSQL connection pool: {e}")
            raise
    else:
        logger.warning("PostgreSQL connection pool was not initialized.")


----------------------------------------

TITLE: Creating Applicants Table Migration
DESCRIPTION: Laravel migration for creating the applicants table with fields for personal information.

LANGUAGE: PHP
CODE:
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('applicants', function (Blueprint $table) {
            $table->id();
            $table->string('first_name');
            $table->string('last_name');
            $table->string('email')->unique();
            $table->jsonb('additional_info')->nullable();
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('applicants');
    }
};

----------------------------------------

TITLE: Creating Branch with Neon CLI
DESCRIPTION: Command to create a point-in-time branch using the Neon CLI. The timestamp must be in ISO 8601 format.

LANGUAGE: bash
CODE:
neon branches create --name recovery_branch --parent 2023-07-11T10:00:00Z

----------------------------------------

TITLE: Creating a Result Set Stored Procedure in PostgreSQL
DESCRIPTION: Defines a stored procedure named 'get_accounts' that returns a table of account information using PL/pgSQL.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION get_accounts()
  RETURNS TABLE(id integer,
                first_name character varying,
                last_name character varying,
                plan character varying,
                effective_date date) AS
$$
BEGIN
 RETURN QUERY

 SELECT a.id,a.first_name,a.last_name, p.plan, ap.effective_date
 FROM accounts a
 INNER JOIN account_plans ap on a.id = account_id
 INNER JOIN plans p on p.id = plan_id
 ORDER BY a.id, ap.effective_date;
END; $$

LANGUAGE plpgsql;

----------------------------------------

TITLE: EXISTS with NULL Subquery
DESCRIPTION: Example demonstrating that EXISTS returns true when the subquery returns NULL, resulting in all rows being selected from the customers table.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
WHERE
  EXISTS(
    SELECT NULL
  )
ORDER BY
  first_name,
  last_name;

----------------------------------------

TITLE: Creating a New Role in PostgreSQL
DESCRIPTION: This SQL command creates a new role named 'bob' with login privileges and a password.

LANGUAGE: sql
CODE:
CREATE ROLE bob
WITH LOGIN PASSWORD 'SecurePass1';

----------------------------------------

TITLE: PostgreSQL ABS() Function with Expression
DESCRIPTION: Example demonstrating the use of ABS() function with a numeric expression.

LANGUAGE: sql
CODE:
SELECT ABS( 100 - 250 ) result;

----------------------------------------

TITLE: Restoring Data to Neon with pg_restore
DESCRIPTION: This command uses pg_restore to import the previously dumped data into a Neon database. It specifies the connection string, verbose mode, and options to skip ownership and access privilege restoration.

LANGUAGE: bash
CODE:
pg_restore -d <neon-connection-string> -v --no-owner --no-acl supabase_dump.bak

----------------------------------------

TITLE: Building Laravel Zero Application into Executable
DESCRIPTION: Command to build the Laravel Zero application into a standalone executable file.

LANGUAGE: bash
CODE:
php todo app:build

----------------------------------------

TITLE: Reordering Table By Column
DESCRIPTION: pg_repack command to reorder table data based on a specific column.

LANGUAGE: bash
CODE:
pg_repack -k -h <your_neon_host> -p 5432 -d <your_neon_database> -U <your_neon_username> --table your_table_name --order-by "indexed_column DESC"

----------------------------------------

TITLE: Multiple Schema Drop Syntax
DESCRIPTION: Extended syntax showing how to drop multiple schemas in a single statement.

LANGUAGE: css
CODE:
DROP SCHEMA [IF EXISTS] schema_name1 [,schema_name2,...]
[CASCADE | RESTRICT];

----------------------------------------

TITLE: Flyway Configuration File Example
DESCRIPTION: Example of a Flyway configuration file with connection details and settings for a specific environment.

LANGUAGE: bash
CODE:
flyway.url=jdbc:postgresql://ep-cool-darkness-123456.us-east-2.aws.neon.tech:5432/neondb

flyway.user=alex

flyway.password=AbC123dEf

flyway.locations=filesystem:/home/alex/flyway-x.y.z/sql

flyway.baselineOnMigrate=true

----------------------------------------

TITLE: Installing Livewire Charts Package
DESCRIPTION: Commands to install the Livewire Charts package for data visualization and its assets.

LANGUAGE: bash
CODE:
composer require asantibanez/livewire-charts
php artisan livewire-charts:install

----------------------------------------

TITLE: Using UUID as Primary Key for Products Table
DESCRIPTION: Demonstrates creating a products table with UUID primary key and inserting sample product data with automatically generated UUIDs.

LANGUAGE: sql
CODE:
CREATE TABLE products (
    product_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    price NUMERIC
);

INSERT INTO products (name, price)
VALUES
    ('Apple', 1.99),
    ('Banana', 2.99),
    ('Orange', 3.99)
RETURNING *;

----------------------------------------

TITLE: Using json_extract_path with JOIN Operations
DESCRIPTION: Example demonstrating how to use json_extract_path in JOIN operations between tables

LANGUAGE: sql
CODE:
SELECT
   employees.employee_name,
   departments.department_name
FROM
   employees
JOIN
   departments ON TRIM(BOTH '"' FROM json_extract_path(employees.details, 'department')::TEXT) = departments.department_name;

----------------------------------------

TITLE: Windsurf Cascade Conversation for Database Operations
DESCRIPTION: A transcript of a conversation between a user and Windsurf's Cascade, demonstrating natural language interactions to list tables, view data, and add a column to a Neon database.

LANGUAGE: text
CODE:
User: in my neon project id: fancy-bush-59303206, list all the tables
Cascade: I'll help you list all the tables in your Neon project. I'll use the default database name 'neondb' since it wasn't specified.
> MCP Tool: neon / get_database_tables
> I found 1 table in your Neon project:
> - playing_with_neon (in the public schema)
> Would you like to see more details about this table or perform any operations on it?

User: can you show me first 5 rows?
Cascade: I'll query the first 5 rows from the playing_with_neon table.
> MCP Tool: neon / run_sql
> Here are the first 5 rows from the table. The table has three columns:
> id: An integer identifier
> name: A string column containing what appears to be hash-like values
> value: A numeric column with decimal values between 0 and 1
> Would you like to perform any other operations on this table?

User: can you add created_at column?
Cascade: I'll help you add a created_at column to the playing_with_neon table. I'll create a migration to add this column with a timestamp data type.
> MCP Tool: neon / prepare_database_migration
> Let me verify the changes in the temporary branch to make sure the column was added correctly.
> I've verified that the created_at column has been added successfully in the temporary branch. Would you like me to commit this migration to the main branch?
> The migration has been completed successfully! The created_at column has been added to the playing_with_neon table. Let's verify the change in the main branch:
> Perfect! The created_at column has been successfully added and populated with timestamps. For existing rows, it was set to the time when the column was added. Any new rows added to the table will automatically get their creation timestamp.

----------------------------------------

TITLE: Configuring Neon Database Connection in Phoenix dev.exs
DESCRIPTION: This code snippet shows how to update the config/dev.exs file in a Phoenix project to configure the connection to a Neon database. It includes settings for username, password, hostname, database name, and SSL options.

LANGUAGE: elixir
CODE:
config :hello, Hello.Repo,
   username: "neondb_owner",
   password: "JngqXejzvb93",
   hostname: "ep-rough-snowflake-a5j76tr5.us-east-2.aws.neon.tech",
   database: "neondb",
   stacktrace: true,
   show_sensitive_data_on_connection_error: true,
   pool_size: 10,
   ssl: [cacerts: :public_key.cacerts_get()]

----------------------------------------

TITLE: Implementing Dynamic Blog Routes in Astro
DESCRIPTION: Astro component implementation for creating dynamic blog routes using Directus CMS data

LANGUAGE: astro
CODE:
---
// File: src/pages/[slug].astro

import Layout from "@/layouts/Layout.astro";
import directus from "@/lib/directus";
import { readItems } from "@directus/sdk";

export async function getStaticPaths() {
  const posts = await directus.request(
    readItems("posts", {
      fields: ['*'],
    })
  );
  return posts.map((post) => ({ params: { slug: post.slug }, props: post }));
}
const post = Astro.props;
---

<Layout title={post.title}>
  <main>
    <img src={`${import.meta.env.DIRECTUS_URL}/assets/${post.image}`} />
    <h1>{post.title}</h1>
    <div set:html={post.content} />
  </main>
</Layout>

----------------------------------------

TITLE: Listing Neon Organizations
DESCRIPTION: Command to list all organizations associated with the authenticated Neon CLI user.

LANGUAGE: bash
CODE:
neon orgs list

----------------------------------------

TITLE: Creating Sample Table and Inserting Data in SQL
DESCRIPTION: SQL commands to create a table named 'playing_with_neon' and insert sample data. This can be used to set up a test environment for replication.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS playing_with_neon(id SERIAL PRIMARY KEY, name TEXT NOT NULL, value REAL);
INSERT INTO playing_with_neon(name, value)
SELECT LEFT(md5(i::TEXT), 10), random() FROM generate_series(1, 10) s(i);

----------------------------------------

TITLE: Creating Circles Table
DESCRIPTION: Creates a table to store circle radiuses with an auto-incrementing ID and decimal radius column.

LANGUAGE: sql
CODE:
CREATE TABLE circles(
   id INT GENERATED ALWAYS AS IDENTITY,
   radius DEC(19,2) NOT NULL,
   PRIMARY KEY(id)
);

----------------------------------------

TITLE: Creating INSTEAD OF Trigger
DESCRIPTION: Creates the trigger that binds the trigger function to the view and specifies which operations it should intercept.

LANGUAGE: sql
CODE:
CREATE TRIGGER instead_of_employee_salaries
INSTEAD OF INSERT OR UPDATE OR DELETE
ON employee_salaries
FOR EACH ROW
EXECUTE FUNCTION update_employee_salaries();

----------------------------------------

TITLE: Adding a Table to an Existing Publication in PostgreSQL
DESCRIPTION: This command adds the 'sales' table to an existing publication named 'my_publication'.

LANGUAGE: sql
CODE:
ALTER PUBLICATION my_publication ADD TABLE sales;

----------------------------------------

TITLE: Testing Database Connection in Python
DESCRIPTION: This code tests the database connection by executing a simple SELECT query and checking the result. It prints a success message if the connection is established correctly.

LANGUAGE: python
CODE:
# Execute this query to test the database connection
cursor.execute("SELECT 1;")
result = cursor.fetchone()

# Check the query result
if result == (1,):
    print("Your database connection was successful!")
else:
    print("Your connection failed.")

----------------------------------------

TITLE: Basic SCALE() Function Syntax
DESCRIPTION: Demonstrates the basic syntax of the PostgreSQL SCALE() function, which returns the count of decimal digits in a number's fractional part.

LANGUAGE: sql
CODE:
SCALE(numeric_value)

----------------------------------------

TITLE: Basic PostgreSQL ROLLUP Syntax
DESCRIPTION: Demonstrates the basic syntax for using ROLLUP in a SELECT statement to generate hierarchical grouping sets.

LANGUAGE: sql
CODE:
SELECT
    c1,
    c2,
    c3,
    aggregate(c4)
FROM
    table_name
GROUP BY
    ROLLUP (c1, c2, c3);

----------------------------------------

TITLE: Inserting JSONB Data into PostgreSQL Table
DESCRIPTION: Inserts sample JSONB data into the 'person' table, including nested JSON objects for pets.

LANGUAGE: sql
CODE:
INSERT INTO person (data)
VALUES
    ('{"name": "Alice", "age": 30, "pets": [{"type": "cat", "name": "Fluffy"}, {"type": "dog", "name": "Buddy"}]}'),
    ('{"name": "Bob", "age": 35, "pets": [{"type": "dog", "name": "Max"}]}'),
    ('{"name": "Charlie", "age": 40, "pets": [{"type": "rabbit", "name": "Snowball"}]}')
RETURNING *;

----------------------------------------

TITLE: Basic jsonb_typeof() Function Syntax
DESCRIPTION: Shows the basic syntax of the jsonb_typeof() function which takes a JSONB value as input and returns its type as a text string.

LANGUAGE: sql
CODE:
jsonb_typeof(jsonb_value)

----------------------------------------

TITLE: Enabling pgcrypto Extension in Postgres
DESCRIPTION: SQL command to enable the pgcrypto extension in a Postgres database. This is typically run in the Neon SQL Editor or through a connected client like psql.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pgcrypto;

----------------------------------------

TITLE: Basic Column Selection Example
DESCRIPTION: Query showing selection of first and last names from customer table without aliases.

LANGUAGE: sql
CODE:
SELECT
   first_name,
   last_name
FROM customer;

----------------------------------------

TITLE: Installing Neon Serverless Driver
DESCRIPTION: NPM command to install the Neon Serverless Driver for database connectivity.

LANGUAGE: bash
CODE:
npm install @neondatabase/serverless

----------------------------------------

TITLE: Filtering Products Based on Color Using jsonb_array_elements()
DESCRIPTION: SQL query showing how to use jsonb_array_elements() to filter products based on a specific color in a JSONB array.

LANGUAGE: sql
CODE:
SELECT *
FROM products
WHERE 'Blue' IN (
 SELECT REPLACE(jsonb_array_elements(details->'colors')::text, '"', '')::text
);

----------------------------------------

TITLE: Creating a Table for NULL Sorting Demonstration
DESCRIPTION: This snippet creates a new table called sort_demo and inserts sample data including NULL values for demonstrating NULL sorting.

LANGUAGE: SQL
CODE:
CREATE TABLE sort_demo(num INT);

INSERT INTO sort_demo(num)
VALUES
  (1),
  (2),
  (3),
  (null);

----------------------------------------

TITLE: Installing Neon Serverless Driver
DESCRIPTION: Installs the Neon Serverless Driver using npm. This driver manages the connection between the application and Neon Postgres database, supporting HTTP connections required for Neon RLS.

LANGUAGE: bash
CODE:
npm install @neondatabase/serverless

----------------------------------------

TITLE: Removing Project VPC Restriction
DESCRIPTION: Command to remove a VPC endpoint restriction from a specific Neon project.

LANGUAGE: bash
CODE:
neon vpc project remove vpce-1234567890abcdef0 --project-id orange-credit-12345678

----------------------------------------

TITLE: Installing Laravel Breeze with Livewire
DESCRIPTION: Commands to install Laravel Breeze with Livewire for authentication and dynamic interfaces.

LANGUAGE: bash
CODE:
composer require laravel/breeze --dev
php artisan breeze:install livewire

----------------------------------------

TITLE: Defining lag() Function Signature in SQL
DESCRIPTION: Shows the function signature for the lag() window function in Postgres, explaining its parameters and usage.

LANGUAGE: sql
CODE:
lag(value any [, offset integer [, default any ]]) over (...)

----------------------------------------

TITLE: Calling a Single-Value Stored Procedure in PHP
DESCRIPTION: Demonstrates how to call the 'add' stored procedure in PHP using PDO. It prepares the statement, executes it with parameters, and fetches the result.

LANGUAGE: php
CODE:
public function add($a, $b) {
    $stmt = $this->pdo->prepare('SELECT * FROM add(:a,:b)');
    $stmt->setFetchMode(\PDO::FETCH_ASSOC);
    $stmt->execute([
        ':a' => $a,
        ':b' => $b
    ]);
    return $stmt->fetchColumn(0);
}

----------------------------------------

TITLE: Creating a Database and Table for RLS Example in PostgreSQL
DESCRIPTION: Set up a new database and table structure for demonstrating row-level security implementation.

LANGUAGE: sql
CODE:
create database hr;

\c hr

create table departments(
   id serial primary key,
   name VARCHAR(255) NOT NULL UNIQUE,
   manager VARCHAR(255) NOT NULL
);

----------------------------------------

TITLE: Filtering Data in Postgres
DESCRIPTION: These SQL examples showcase various filtering scenarios using the WHERE clause in Postgres. It covers exact matches, range queries, IN and NOT IN operators, pattern matching with LIKE, combining conditions, handling NULL values, and using subqueries for filtering.

LANGUAGE: sql
CODE:
-- Filter by an exact match
SELECT * FROM users WHERE username = 'alex';

-- Filter by a range
SELECT * FROM orders WHERE order_date BETWEEN '2023-01-01' AND '2023-01-31';

-- Filter using a list of values (IN operator)
SELECT * FROM products WHERE category_id IN (1, 2, 5);

-- Filter excluding a set of values (NOT IN operator)
SELECT * FROM employees WHERE department_id NOT IN (3, 4);

-- Filter using pattern matching (LIKE operator)
SELECT * FROM customers WHERE email LIKE '%@domain.com';

-- Combine multiple conditions (AND, OR)
SELECT * FROM sales WHERE amount > 500 AND (sales_date >= '2023-01-01' AND sales_date <= '2023-01-31');

-- Filter using NULL values
SELECT * FROM users WHERE last_login IS NULL;

-- Filter using subqueries
SELECT * FROM orders WHERE customer_id IN (SELECT customer_id FROM customers WHERE country = 'Spain');

----------------------------------------

TITLE: Extracting Employee Object Using jsonb_extract_path_text() in PostgreSQL
DESCRIPTION: Demonstrates how to use jsonb_extract_path_text() to extract the entire employee object from the JSONB data stored in the 'documents' table.

LANGUAGE: sql
CODE:
SELECT
  jsonb_extract_path_text(data, 'employee') employee
FROM
  documents;

----------------------------------------

TITLE: Integer Division Operation Example
DESCRIPTION: Shows how integer division truncates decimal results to whole numbers in PostgreSQL.

LANGUAGE: sql
CODE:
SELECT 10 / 4; -- Yields 2, not 2.5

----------------------------------------

TITLE: Resetting Branch to Parent State
DESCRIPTION: Command to reset a development branch to match the state of its parent branch (main)

LANGUAGE: bash
CODE:
neon branches reset dev/alex --parent

----------------------------------------

TITLE: Creating a partitioned table for user activities in Neon Postgres
DESCRIPTION: SQL statement to create a partitioned table for storing user activity data, partitioned by activity time.

LANGUAGE: sql
CODE:
CREATE TABLE user_activities (
    activity_id serial,
    activity_time TIMESTAMPTZ NOT NULL,
    activity_type TEXT NOT NULL,
    content_id INT NOT NULL,
    user_id INT NOT NULL
)
PARTITION BY RANGE (activity_time);

----------------------------------------

TITLE: Dropping Database with FORCE Option
DESCRIPTION: Demonstrates how to forcefully drop a database that has active connections using the FORCE option.

LANGUAGE: sql
CODE:
DROP DATABASE test WITH (FORCE)

----------------------------------------

TITLE: Changing Current Database
DESCRIPTION: PostgreSQL meta-command to switch to a different database (postgres)

LANGUAGE: sql
CODE:
\c postgres

----------------------------------------

TITLE: Creating Subscriptions Migration
DESCRIPTION: PHP code for creating the subscriptions table migration, tracking user subscriptions.

LANGUAGE: php
CODE:
public function up()
{
    Schema::create('subscriptions', function (Blueprint $table) {
        $table->id();
        $table->foreignId('user_id')->constrained()->onDelete('cascade');
        $table->string('plan');
        $table->timestamp('started_at');
        $table->timestamp('ended_at')->nullable();
        $table->timestamps();
    });
}

----------------------------------------

TITLE: Initial Project Setup - Git Clone and Dependencies
DESCRIPTION: Commands to clone the Next.js project repository and install required dependencies including WebSocket libraries, Ably, and Prisma adapters.

LANGUAGE: shell
CODE:
git clone https://github.com/neondatabase-labs/ably-livesync-neon

LANGUAGE: shell
CODE:
cd ably-livesync-neon
npm install

LANGUAGE: shell
CODE:
cp .env.example .env

----------------------------------------

TITLE: Calculate Circle Area Using PI()
DESCRIPTION: Example demonstrating how to calculate the area of a circle with radius 10 using the PI() function.

LANGUAGE: sql
CODE:
SELECT PI() * 10 * 10 area;

----------------------------------------

TITLE: Creating Users Table with JSON Column in SQL
DESCRIPTION: Creates a 'users' table with an integer 'id' and a JSON 'profile' column, then inserts sample data with nested JSON structures.

LANGUAGE: sql
CODE:
CREATE TABLE users (
    id INT,
    profile JSON
);

INSERT INTO users (id, profile)
VALUES
    (1, '{"name": "Alice", "contact": {"email": "alice@example.com", "phone": "1234567890"}, "hobbies": ["reading", "cycling", "hiking"]}'),
    (2, '{"name": "Bob", "contact": {"email": "bob@example.com", "phone": "0987654321"}, "hobbies": ["gaming", "cooking"]}');

----------------------------------------

TITLE: Sample Output of Schema Diff Command
DESCRIPTION: Shows an example of the output produced by the schema-diff command. The diff indicates that a new column 'description' has been added to the 'product' table in the 'dev/alex' branch compared to the 'main' branch.

LANGUAGE: diff
CODE:
--- Database: sales	(Branch: br-long-forest-a5glnuu4)
+++ Database: sales	(Branch: br-lucky-shape-a5fgfymm)
@@ -26,9 +26,10 @@

CREATE TABLE public.product (
    id integer NOT NULL,
    name text NOT NULL,
-    price numeric NOT NULL
+    price numeric NOT NULL,
+    description text NOT NULL
);

----------------------------------------

TITLE: Using lag() with Default Value in SQL
DESCRIPTION: Demonstrates how to use lag() with a default value to handle cases where the offset goes beyond the start of the window frame, avoiding null results.

LANGUAGE: sql
CODE:
WITH inventory AS (
  SELECT date '2023-01-01' AS snapshot_date, 100 AS quantity
  UNION ALL
  SELECT date '2023-01-02' AS snapshot_date, 80 AS quantity
  UNION ALL
  SELECT date '2023-01-03' AS snapshot_date, 120 AS quantity
  UNION ALL
  SELECT date '2023-01-04' AS snapshot_date, 90 AS quantity
)
SELECT
  snapshot_date,
  quantity,
  lag(quantity, 1, quantity) OVER (ORDER BY snapshot_date) AS prev_quantity,
  quantity - lag(quantity, 1, quantity) OVER (ORDER BY snapshot_date) AS change
FROM inventory;

----------------------------------------

TITLE: Subscribing to Community Guides Feed
DESCRIPTION: RSS feed URL for accessing Neon's community guides, tutorials, and best practices.

LANGUAGE: bash
CODE:
https://neon.tech/guides/rss.xml

----------------------------------------

TITLE: Updating Composite Type Values
DESCRIPTION: Demonstrates how to update individual fields within a composite type column.

LANGUAGE: sql
CODE:
UPDATE contacts
SET
  address.country= 'USA'
WHERE
  id = 2
RETURNING *;

----------------------------------------

TITLE: ASCII Histogram Generation
DESCRIPTION: Advanced example showing how to generate ASCII-based histograms using WIDTH_BUCKET and multiple CTEs.

LANGUAGE: sql
CODE:
WITH buckets_cte AS (
    SELECT WIDTH_BUCKET(length, 40, 200, 6) AS bucket_number
    FROM film
),
histogram_cte AS (
    SELECT
        bucket_number,
        COUNT(*) AS frequency
    FROM
        buckets_cte
    GROUP BY
        bucket_number
    ORDER BY
        bucket_number
)
SELECT
    bucket_number,
    REPEAT('*', DIV(frequency,10)::int) AS histogram
FROM
    histogram_cte;

----------------------------------------

TITLE: Basic Connection String Command Usage
DESCRIPTION: The basic syntax for the connection-string command, which can include an optional branch name and timestamp/LSN for time travel connections.

LANGUAGE: bash
CODE:
neon connection-string [branch[@timestamp|@LSN]] [options]

----------------------------------------

TITLE: Revoking Superuser Privileges
DESCRIPTION: SQL commands to remove superuser status from a role.

LANGUAGE: sql
CODE:
ALTER USER username NOSUPERUSER;

LANGUAGE: sql
CODE:
ALTER USER spiderman NOSUPERUSER;

----------------------------------------

TITLE: Sample INSERT_ACTOR Procedure Creation
DESCRIPTION: Creates a stored procedure that inserts a new actor with separate first and last name parameters.

LANGUAGE: sql
CODE:
create or replace procedure insert_actor(
	fname varchar,
	lname varchar)
language plpgsql
as $$
begin
	insert into actor(first_name, last_name)
	values('John','Doe');
end;
$$;

----------------------------------------

TITLE: Committing Changes and Closing Database Connection in Python
DESCRIPTION: Shows how to commit changes to the database and properly close the cursor and connection objects.

LANGUAGE: python
CODE:
conn.commit()
cur.close()
conn.close()

----------------------------------------

TITLE: Inserting and Selecting User Accounts
DESCRIPTION: SQL to insert another user account and select all records from the user_accounts table.

LANGUAGE: sql
CODE:
INSERT INTO user_accounts (username, email)
VALUES ('jane_smith', 'jane@example.com');

SELECT * FROM user_accounts;

----------------------------------------

TITLE: Creating BEFORE INSERT Trigger Syntax
DESCRIPTION: SQL syntax for creating a BEFORE INSERT trigger and associating it with a trigger function. Shows the basic structure for trigger creation.

LANGUAGE: sql
CODE:
CREATE TRIGGER trigger_name
BEFORE INSERT
ON table_name
FOR EACH {ROW | STATEMENT}
EXECUTE FUNCTION trigger_function();

----------------------------------------

TITLE: Testing Neon Database Connection in Azure Data Studio Notebook
DESCRIPTION: This code tests the Neon database connection by executing a simple SELECT query and checking the result.

LANGUAGE: python
CODE:
# Execute this query to test the database connection
cursor.execute("SELECT 1;")
result = cursor.fetchone()

# Check the query result
if result == (1,):
    print("Your database connection was successful!")
else:
    print("Your connection failed.")

----------------------------------------

TITLE: Converting ASCII Codes to Characters Using PostgreSQL CHR()
DESCRIPTION: This example demonstrates how to use the CHR() function to convert ASCII codes 65 and 97 to their corresponding characters 'A' and 'a'.

LANGUAGE: SQL
CODE:
SELECT
    CHR(65),
    CHR(97);

----------------------------------------

TITLE: Querying PostgreSQL with Index on LOWER Expression
DESCRIPTION: Example of using EXPLAIN to show how PostgreSQL utilizes the newly created index on LOWER(last_name) for case-insensitive queries on the last_name column.

LANGUAGE: sql
CODE:
EXPLAIN
SELECT
    customer_id,
    first_name,
    last_name
FROM
    customer
WHERE
    LOWER(last_name) = 'purdy';

----------------------------------------

TITLE: Installing PostgreSQL Dependencies
DESCRIPTION: Update package index and install required packages for PostgreSQL setup

LANGUAGE: shell
CODE:
sudo apt update
sudo apt install gnupg2 wget

----------------------------------------

TITLE: Basic SQL Insert Statement Construction in C#
DESCRIPTION: Shows how to construct a basic SQL INSERT statement with parameterized values.

LANGUAGE: csharp
CODE:
var sql = "INSERT INTO ...";

----------------------------------------

TITLE: Database URL Environment Variable Configuration
DESCRIPTION: Example of setting the DATABASE_URL environment variable with a complete connection string for connecting to a Neon database.

LANGUAGE: text
CODE:
DATABASE_URL="postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname"

----------------------------------------

TITLE: Database URL Environment Variable Configuration
DESCRIPTION: Example of setting the DATABASE_URL environment variable with a complete connection string for connecting to a Neon database.

LANGUAGE: text
CODE:
DATABASE_URL="postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname"

----------------------------------------

TITLE: Storing Neon Connection String in .env File
DESCRIPTION: This snippet shows how to store the Neon database connection string in a .env file. The connection string includes user, password, endpoint hostname, port, and database name.

LANGUAGE: shell
CODE:
DATABASE_URL="postgresql://<user>:<password>@<endpoint_hostname>.neon.tech:<port>/<dbname>?sslmode=require"

----------------------------------------

TITLE: SQL Table Creation and Data Insertion
DESCRIPTION: SQL commands for creating the Elements_ext table and inserting data

LANGUAGE: sql
CODE:
CREATE TABLE "Elements_ext" (
  "AtomicNumber" INTEGER PRIMARY KEY,
  "Element" TEXT,
  "Symbol" TEXT,
  "AtomicMass" DECIMAL,
  "NumberOfNeutrons" INTEGER,
  "NumberOfProtons" INTEGER,
  "NumberOfElectrons" INTEGER,
  "Period" INTEGER,
  "Group" INTEGER,
  "Phase" TEXT,
  "Radioactive" BOOLEAN,
  "Natural" BOOLEAN,
  "Metal" BOOLEAN,
  "Nonmetal" BOOLEAN,
  "Metalloid" BOOLEAN,
  "Type" TEXT,
  "AtomicRadius" DECIMAL,
  "Electronegativity" DECIMAL,
  "FirstIonization" DECIMAL,
  "Density" DECIMAL,
  "MeltingPoint" DECIMAL,
  "BoilingPoint" DECIMAL,
  "NumberOfIsotopes" INTEGER,
  "Discoverer" TEXT,
  "Year" INTEGER,
  "SpecificHeat" DECIMAL,
  "NumberOfShells" INTEGER,
  "NumberOfValence" INTEGER
);

----------------------------------------

TITLE: Adding User to Sudo Group
DESCRIPTION: This command adds the 'runneruser' to the sudo group, allowing it to execute commands with elevated privileges.

LANGUAGE: shell
CODE:
adduser runneruser sudo

----------------------------------------

TITLE: Creating New Django Project
DESCRIPTION: Command to create a new Django project in the current directory.

LANGUAGE: bash
CODE:
django-admin startproject guide_neon_django .

----------------------------------------

TITLE: Enabling PostGIS Tiger Geocoder Extension in Neon
DESCRIPTION: SQL command to enable the PostGIS Tiger Geocoder extension in a Neon database. This extension provides address normalization and geocoding functionality.

LANGUAGE: SQL
CODE:
CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder CASCADE;

----------------------------------------

TITLE: Defining HTTP Trigger Payload Schema in Azure Logic Apps
DESCRIPTION: JSON schema definition for the HTTP trigger payload in Azure Logic Apps. It specifies the structure of incoming order data, including customer email, product name, and quantity.

LANGUAGE: json
CODE:
{
  "type": "object",
  "properties": {
    "customerEmail": {
      "type": "string"
    },
    "productName": {
      "type": "string"
    },
    "quantity": {
      "type": "integer"
    }
  },
  "required": ["customer_email", "product_name", "quantity"]
}

----------------------------------------

TITLE: Running Firestore Export Script
DESCRIPTION: Command to execute the Firestore export script with required parameters

LANGUAGE: bash
CODE:
python firebase-download.py --credentials path/to/your/firebase-credentials.json --output firestore_data

----------------------------------------

TITLE: Using -> Operator to Extract JSONB Values in PostgreSQL
DESCRIPTION: This example demonstrates the use of the -> operator to extract product names as JSONB values from the 'products' table.

LANGUAGE: sql
CODE:
SELECT
  data -> 'name' AS product_name
FROM
  products;

----------------------------------------

TITLE: Configuring PostgreSQL Insert Action in Azure Logic Apps
DESCRIPTION: JSON configuration for the PostgreSQL insert action in Azure Logic Apps. It defines how to insert order data from the trigger payload into the Neon Postgres database.

LANGUAGE: json
CODE:
{
  "type": "ApiConnection",
  "inputs": {
    "host": {
      "connection": {
        "referenceName": "postgresql"
      }
    },
    "method": "post",
    "body": {
      "customer_email": "@triggerBody()?['customerEmail']",
      "product_name": "@triggerBody()?['productName']",
      "quantity": "@triggerBody()?['quantity']"
    },
    "path": "/datasets/default/tables/@{encodeURIComponent(encodeURIComponent('[public].[orders]'))}/items"
  },
  "runAfter": {}
}

----------------------------------------

TITLE: Implementing Chat Hook in TypeScript
DESCRIPTION: TypeScript custom hook for managing chat state and interactions, including sending messages and handling API calls to the backend.

LANGUAGE: typescript
CODE:
import { useState, useCallback } from 'react';
import { Message } from '../types/chat';

export const useChat = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const userId = useState(() => 'user-' + Date.now())[0];

  const sendMessage = useCallback(
    async (content: string) => {
      try {
        setIsLoading(true);
        const userMessage: Message = {
          sender: 'user',
          content,
          timestamp: new Date(),
        };
        setMessages((prev) => [...prev, userMessage]);

        const response = await fetch(`${import.meta.env.VITE_API_URL}/chat/message`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userId, message: content }),
        });

        const data = await response.json();

        const botMessage: Message = {
          sender: 'bot',
          content: data.reply,
          timestamp: new Date(),
        };
        setMessages((prev) => [...prev, botMessage]);
      } catch (error) {
        console.error('Error sending message:', error);
        const errorMessage: Message = {
          sender: 'bot',
          content: 'Sorry, I encountered an error. Please try again.',
          timestamp: new Date(),
        };
        setMessages((prev) => [...prev, errorMessage]);
      } finally {
        setIsLoading(false);
      }
    },
    [userId]
  );

  return { messages, isLoading, sendMessage };
};

----------------------------------------

TITLE: PostgreSQL Factorial Function Example
DESCRIPTION: Example demonstrating how to calculate the factorial of 5 using the factorial() function, which returns 120 as the result.

LANGUAGE: sql
CODE:
SELECT factorial(5);

----------------------------------------

TITLE: Pattern Matching with B-tree Indexes in PostgreSQL
DESCRIPTION: Shows examples of pattern matching queries that can benefit from B-tree indexes, using LIKE and regular expression operators with anchored patterns.

LANGUAGE: sql
CODE:
column_name LIKE 'foo%'
column_name LKE 'bar%'
column_name  ~ '^foo'

----------------------------------------

TITLE: Querying Database Names from pg_database
DESCRIPTION: This SQL query retrieves the names of all databases from the pg_database system catalog view.

LANGUAGE: sql
CODE:
SELECT datname FROM pg_database;

----------------------------------------

TITLE: Displaying Detailed Database Information using psql
DESCRIPTION: The \l+ command provides more detailed information about the databases in the PostgreSQL server.

LANGUAGE: shell
CODE:
\l+

----------------------------------------

TITLE: Executing Query on Remote Database with Named Connection
DESCRIPTION: Executes a query on a remote database using a named dblink connection. Retrieves table names from the public schema.

LANGUAGE: sql
CODE:
SELECT *
FROM dblink('my_remote_db', 'SELECT table_name FROM information_schema.tables WHERE table_schema = ''public''')
AS remote_tables(table_name TEXT);

----------------------------------------

TITLE: Creating Sample Databases
DESCRIPTION: Creates two sample databases for demonstration purposes.

LANGUAGE: sql
CODE:
CREATE DATABASE hr;
CREATE DATABASE test;

----------------------------------------

TITLE: List PostgreSQL Process IDs Query
DESCRIPTION: Query to retrieve a list of process IDs along with their associated usernames, states, and queries.

LANGUAGE: sql
CODE:
SELECT
  pid,
  usename,
  state,
  query
FROM
  pg_stat_activity;

----------------------------------------

TITLE: Executing Schema Diff in Neon CLI
DESCRIPTION: Demonstrates how to use the new schema-diff feature in the Neon CLI to compare schemas between branches. This command compares the current schema state between the 'main' branch and a development branch 'dev/alex'.

LANGUAGE: bash
CODE:
neon branches schema-diff main dev/alex

----------------------------------------

TITLE: PostgreSQL LEFT JOIN with Table Aliases
DESCRIPTION: Shows how to use table aliases in a LEFT JOIN query between the film and inventory tables.

LANGUAGE: sql
CODE:
SELECT
  f.film_id,
  f.title,
  i.inventory_id
FROM
  film f
  LEFT JOIN inventory i ON i.film_id = f.film_id
ORDER BY
  i.inventory_id;

----------------------------------------

TITLE: Creating a Spatial Index with PostGIS
DESCRIPTION: SQL command to create a GiST (Generalized Search Tree) index on a spatial column. This type of index can significantly improve performance for spatial queries.

LANGUAGE: sql
CODE:
CREATE INDEX spatial_index_name ON landmarks USING GIST(location);

----------------------------------------

TITLE: Installing a Postgres Extension in Neon
DESCRIPTION: Demonstrates how to install a Postgres extension (pgcrypto in this example) using a SQL command in Neon's SQL Editor or any SQL client.

LANGUAGE: sql
CODE:
CREATE EXTENSION pgcrypto;

----------------------------------------

TITLE: Setting DATABASE_URL Environment Variable for Neon Connection
DESCRIPTION: This snippet shows how to set the DATABASE_URL environment variable in a .env file to connect to a Neon database. It includes the connection string format with user credentials, hostname, database name, and SSL mode.

LANGUAGE: text
CODE:
DATABASE_URL="postgresql://[user]:[password]@[neon_hostname]/[dbname]?sslmode=require"

----------------------------------------

TITLE: Creating a Todo Item with GraphQL Mutation
DESCRIPTION: This GraphQL mutation creates a new todo item in the database, demonstrating basic write operations.

LANGUAGE: graphql
CODE:
mutation {
  createTodo(data: { title: "Set up Exograph with Neon", completed: true }) {
    id
  }
}

----------------------------------------

TITLE: Creating Sample Table with Test Data in SQL
DESCRIPTION: Creates a table named 'playing_with_neon' with a serial ID, text name, and real value columns, then populates it with 10 rows of sample data.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS playing_with_neon(id SERIAL PRIMARY KEY, name TEXT NOT NULL, value REAL);
INSERT INTO playing_with_neon(name, value)
SELECT LEFT(md5(i::TEXT), 10), random() FROM generate_series(1, 10) s(i);

----------------------------------------

TITLE: Connecting to Neon with passwordless psql authentication
DESCRIPTION: Demonstrates how to connect to Neon's postgres database using psql with browser-based authentication instead of traditional connection strings.

LANGUAGE: bash
CODE:
psql -h pg.neon.tech

----------------------------------------

TITLE: Listing Neon Auth Integrations
DESCRIPTION: This snippet shows how to list all active auth provider integrations for your Neon project. It requires the project ID as a path parameter.

LANGUAGE: bash
CODE:
curl --request GET \
     --url 'https://console.neon.tech/api/v2/projects/{project_id}/auth/integrations' \
     --header 'authorization: Bearer $NEON_API_KEY' | jq

----------------------------------------

TITLE: Finding Shortest Path with pgrouting
DESCRIPTION: SQL query using pgrouting's pgr_dijkstra function to find the shortest path between two nodes in a road network. This example finds the path from node 2 to node 4.

LANGUAGE: SQL
CODE:
SELECT
    seq,
    node,
    edge,
    route.cost,
    agg_cost,
    rn.name AS road_name
FROM pgr_dijkstra(
    'SELECT id, source, target, cost FROM road_network',
    2, -- start node
    4, -- end node
    directed := false
) AS route
LEFT JOIN road_network rn ON route.edge = rn.id
ORDER BY seq;

----------------------------------------

TITLE: Installing Neon CLI in GitHub Actions
DESCRIPTION: GitHub Actions workflow step to install the latest version of Neon CLI using npm.

LANGUAGE: yaml
CODE:
- name: Install Neon CLI
  run: npm install -g neonctl@latest

----------------------------------------

TITLE: PostgreSQL LOCALTIME Function with Precision Argument
DESCRIPTION: This example shows how to use the LOCALTIME function with a specified fractional seconds precision of 2 digits.

LANGUAGE: SQL
CODE:
SELECT LOCALTIME(2);

----------------------------------------

TITLE: Creating PostgreSQL Index on LOWER Expression
DESCRIPTION: Creating an index on the LOWER(last_name) expression to optimize queries that use case-insensitive matching on the last_name column.

LANGUAGE: php
CODE:
CREATE INDEX idx_ic_last_name
ON customer(LOWER(last_name));

----------------------------------------

TITLE: Dropping a Publication in PostgreSQL
DESCRIPTION: This command removes the publication named 'my_publication' if it exists.

LANGUAGE: sql
CODE:
DROP PUBLICATION IF EXISTS my_publication;

----------------------------------------

TITLE: Basic rank() Function Signature
DESCRIPTION: Demonstrates the basic syntax and structure of the rank() window function with optional PARTITION BY and required ORDER BY clauses.

LANGUAGE: sql
CODE:
rank() OVER ([PARTITION BY partition_expression] ORDER BY order_expression)

----------------------------------------

TITLE: Connecting to Neon Postgres Database
DESCRIPTION: Example connection string format for connecting to a Neon Postgres database instance.

LANGUAGE: bash
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require

----------------------------------------

TITLE: Querying Version from System Settings
DESCRIPTION: SQL query to retrieve the PostgreSQL server version from pg_settings system table. Returns a simpler version number without build details.

LANGUAGE: css
CODE:
SELECT
  setting
FROM
  pg_settings
WHERE
  name = 'server_version';

----------------------------------------

TITLE: Converting Timestamp to Custom Date Format
DESCRIPTION: Demonstrates formatting a payment date into a custom month-day-year with time format.

LANGUAGE: sql
CODE:
SELECT
    payment_id,
    payment_date,
    TO_CHAR(
        payment_date,
        'MON-DD-YYYY HH12:MIPM'
    ) payment_time
FROM
    payment
ORDER BY
    payment_date;

----------------------------------------

TITLE: Removing Individual PostgreSQL Packages
DESCRIPTION: Template command for removing specific PostgreSQL packages. Replace package_name with actual package names like postgresql or postgresql-client-16.

LANGUAGE: bash
CODE:
sudo apt-get --purge remove <package_name>

----------------------------------------

TITLE: Format Mismatch Error Example
DESCRIPTION: Demonstrates error handling when the format string doesn't match the input string pattern.

LANGUAGE: sql
CODE:
SELECT TO_NUMBER('1,234,567.89', '999G999.99');

----------------------------------------

TITLE: Generating and Applying EF Core Migrations
DESCRIPTION: Commands to create and apply Entity Framework Core migrations to a Neon database.

LANGUAGE: bash
CODE:
dotnet ef migrations add InitialCreate
dotnet ef database update

----------------------------------------

TITLE: Using AND Operator in PostgreSQL WHERE Clause
DESCRIPTION: Demonstrates how to combine multiple conditions using the AND operator in a WHERE clause to find specific customers.

LANGUAGE: sql
CODE:
SELECT
  last_name,
  first_name
FROM
  customer
WHERE
  first_name = 'Jamie'
  AND last_name = 'Rice';

----------------------------------------

TITLE: Fetching Rows from a PL/pgSQL Cursor
DESCRIPTION: Syntax for fetching the next row from a cursor into variables.

LANGUAGE: sql
CODE:
FETCH NEXT FROM cursor_name INTO variable_list;

----------------------------------------

TITLE: Sample Order Data for Testing Azure Logic Apps Workflow
DESCRIPTION: JSON payload representing sample order data used to test the Azure Logic Apps workflow. It includes customer email, product name, and quantity.

LANGUAGE: json
CODE:
{
  "customerEmail": "test@example.com",
  "productName": "Laptop",
  "quantity": 2
}

----------------------------------------

TITLE: Checking Max Connections
DESCRIPTION: SQL query to check the maximum allowed connections for your compute instance.

LANGUAGE: sql
CODE:
SHOW max_connections;

----------------------------------------

TITLE: Exporting Data from Source Database using pg_dump in Bash
DESCRIPTION: This command uses pg_dump to export data from the source database into a .bak file. It includes verbose output and uses the custom format (-Fc) for the dump file.

LANGUAGE: bash
CODE:
pg_dump -Fc -v -d "postgresql://<username>:<password>@<source_host>:<source_port>/<source_database>" -f database.bak

----------------------------------------

TITLE: PG_SLEEP() with Fractional Seconds
DESCRIPTION: Demonstrates using PG_SLEEP() with decimal values for sub-second delays.

LANGUAGE: sql
CODE:
SELECT PG_SLEEP(1.5);

----------------------------------------

TITLE: Retrieving Project Details with Neon API (curl)
DESCRIPTION: This curl command retrieves project details using the Neon API, including usage data such as data storage, compute time, and data transfer.

LANGUAGE: curl
CODE:
curl --request GET \
     --url https://console.neon.tech/api/v2/projects/summer-bush-30064139 \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $NEON_API_KEY' |jq

----------------------------------------

TITLE: Neon PostgreSQL Connection String Format
DESCRIPTION: Demonstrates the standard format for Neon database connection strings, including user credentials, endpoint hostname, port, and database name. Includes an optional SSL mode parameter for enhanced security.

LANGUAGE: bash
CODE:
postgres://<user>:<password>@<endpoint_hostname>.neon.tech:<port>/<dbname>

----------------------------------------

TITLE: Creating Code Tabs in Neon Documentation Markdown
DESCRIPTION: Shows how to create code tabs in Neon's documentation using Markdown. This feature allows displaying multiple code snippets for different programming languages or frameworks in a tabbed interface.

LANGUAGE: markdown
CODE:
<CodeTabs labels={["node-postgres", "postgres.js"]}>

```shell
npm install pg
```

```shell
npm install postgres
```

</CodeTabs>

----------------------------------------

TITLE: Basic DROP DATABASE Syntax
DESCRIPTION: Shows the fundamental syntax of the PostgreSQL DROP DATABASE statement including optional IF EXISTS and FORCE parameters.

LANGUAGE: sql
CODE:
DROP DATABASE [IF EXISTS] database_name
[WITH (FORCE)]

----------------------------------------

TITLE: Seeding the Database with Initial Data
DESCRIPTION: Python script to seed the database with initial data for authors and books. This populates the database with sample records.

LANGUAGE: python
CODE:
# seed.py

from database import SessionLocal
from models import Author, Book

def seed_data():
    db = SessionLocal()

    # Create authors
    authors = [
        Author(
            name="J.R.R. Tolkien",
            bio="The creator of Middle-earth and author of The Lord of the Rings."
        ),
        Author(
            name="George R.R. Martin",
            bio="The author of the epic fantasy series A Song of Ice and Fire."
        ),
        Author(
            name="J.K. Rowling",
            bio="The creator of the Harry Potter series."
        ),
    ]
    db.add_all(authors)
    db.commit()

    # Create books
    books = [
        Book(title="The Fellowship of the Ring", author=authors[0]),
        Book(title="The Two Towers", author=authors[0]),
        Book(title="The Return of the King", author=authors[0]),
        Book(title="A Game of Thrones", author=authors[1]),
        Book(title="A Clash of Kings", author=authors[1]),
        Book(title="Harry Potter and the Philosopher's Stone", author=authors[2]),
        Book(title="Harry Potter and the Chamber of Secrets", author=authors[2]),
    ]
    db.add_all(books)
    db.commit()

    print("Data seeded successfully.")

if __name__ == "__main__":
    seed_data()

----------------------------------------

TITLE: Using PostgreSQL ALL Operator with Greater Than Comparison
DESCRIPTION: This query demonstrates the use of the ALL operator to find employees with salaries greater than all managers' salaries.

LANGUAGE: sql
CODE:
SELECT
  *
FROM
  employees
WHERE
  salary > ALL(
    select
      salary
    from
      managers
  );

----------------------------------------

TITLE: Creating Custom Type for jsonb_populate_recordset() in PostgreSQL
DESCRIPTION: This SQL snippet creates a custom type 'address_type' with fields for street, city, and zipcode. This type is used in subsequent examples with the jsonb_populate_recordset() function.

LANGUAGE: sql
CODE:
CREATE TYPE address_type AS (
    street VARCHAR(100),
    city VARCHAR(50),
    zipcode VARCHAR(5)
);

----------------------------------------

TITLE: Granting All Privileges on a Table in PostgreSQL
DESCRIPTION: This SQL statement grants all privileges on the 'film' table to the role 'jim' in PostgreSQL.

LANGUAGE: sql
CODE:
GRANT ALL ON film TO jim;

----------------------------------------

TITLE: Enabling H3 and H3_PostGIS Extensions in Neon
DESCRIPTION: SQL commands to enable the H3 and H3_PostGIS extensions in a Neon database. These extensions provide hierarchical geospatial indexing functionality.

LANGUAGE: SQL
CODE:
CREATE EXTENSION IF NOT EXISTS h3 CASCADE;
CREATE EXTENSION IF NOT EXISTS h3_postgis CASCADE;

----------------------------------------

TITLE: Configuring Azure Function Timer Trigger
DESCRIPTION: JSON configuration for the Azure Function timer trigger, set to run every two hours.

LANGUAGE: json
CODE:
{
  "bindings": [
    {
      "name": "sentimentAnalysisTrigger",
      "type": "timerTrigger",
      "direction": "in",
      "schedule": "0 0 */2 * * *"
    }
  ]
}

----------------------------------------

TITLE: Using the PostgreSQL Update Class Implementation
DESCRIPTION: Example script showing how to use the PostgreSQLPHPUpdate class to update stock information in the database. Includes connection handling and error catching.

LANGUAGE: php
CODE:
<?php

require 'vendor/autoload.php';

use PostgreSQLTutorial\Connection as Connection;
use PostgreSQLTutorial\PostgreSQLPHPUpdate as PostgreSQLPHPUpdate;

try {
    // connect to the PostgreSQL database
    $pdo = Connection::get()->connect();

    //
    $updateDemo = new PostgreSQLPHPUpdate($pdo);

    // insert a stock into the stocks table
    $affectedRows = $updateDemo->updateStock(2, 'GOOGL', 'Alphabet Inc.');

    echo 'Number of row affected ' . $affectedRows;
} catch (\PDOException $e) {
    echo $e->getMessage();
}

----------------------------------------

TITLE: Querying Project-Level Billing Period Metrics with Neon API
DESCRIPTION: This code snippet shows how to retrieve project-level billing period consumption metrics for an organization using the Neon API. It uses the projects endpoint with an organization ID parameter.

LANGUAGE: bash
CODE:
curl --request GET \
     --url 'https://console.neon.tech/api/v2/projects?org_id=org-ocean-art-12345678' \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $ORG_API_KEY'

----------------------------------------

TITLE: Deleting a Neon Branch using CLI
DESCRIPTION: Command to delete the 'my_test_branch' Neon branch using the Neon CLI after testing is complete.

LANGUAGE: bash
CODE:
neon branches delete my_test_branch

----------------------------------------

TITLE: Creating a New Database in Neon
DESCRIPTION: SQL command to create a new database in Neon. This ensures consistency with the Digital Ocean setup by creating a database with the same name.

LANGUAGE: sql
CODE:
CREATE DATABASE lego;

----------------------------------------

TITLE: Creating Concurrent Unique Index in PostgreSQL
DESCRIPTION: Demonstrates creating a unique index concurrently on the equip_id column to avoid table locks during index creation.

LANGUAGE: sql
CODE:
CREATE UNIQUE INDEX CONCURRENTLY equipment_equip_id
ON equipment (equip_id);

----------------------------------------

TITLE: Basic jsonb_strip_nulls() Function Syntax
DESCRIPTION: Demonstrates the basic syntax and usage of the jsonb_strip_nulls() function in PostgreSQL. The function accepts JSONB data and returns a new JSONB document with null-valued object fields removed.

LANGUAGE: sql
CODE:
jsonb_strip_nulls(jsonb_data)

----------------------------------------

TITLE: Refreshing Materialized View in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates how to refresh the 'daily_revenue' materialized view. It updates the view with the latest data from the underlying 'orders' table.

LANGUAGE: sql
CODE:
REFRESH MATERIALIZED VIEW daily_revenue;

----------------------------------------

TITLE: Inserting Element into Array of Nested Object
DESCRIPTION: Example of using jsonb_insert() to add a new element to an array within a nested JSON object.

LANGUAGE: SQL
CODE:
SELECT
  jsonb_insert(
    '{"name": "John", "skills" : ["PostgreSQL", "API"]}',
    '{skills,1}', '"Web Dev"'
  );

----------------------------------------

TITLE: Transferring Large Numbers of Projects (Python)
DESCRIPTION: This Python script automates the process of transferring large numbers of Neon projects to an organization. It fetches all projects, splits them into batches, and transfers them using the Neon API.

LANGUAGE: python
CODE:
import requests

API_KEY = "your_api_key_here"
ORG_ID = "your_org_id_here"
TRANSFER_API_URL = "https://console.neon.tech/api/v2/users/me/projects/transfer"
PROJECTS_API_URL = f"https://console.neon.tech/api/v2/projects?limit=400"
HEADERS = {
"accept": "application/json",
"Authorization": f"Bearer {API_KEY}"
}

def fetch_all_projects():
   projects = []
   cursor = None

    while True:
        url = PROJECTS_API_URL
        if cursor:
            url += f"&cursor={cursor}"

        response = requests.get(url, headers=HEADERS)
        if response.status_code != 200:
            raise Exception(f"Failed to fetch projects: {response.text}")

        data = response.json()
        projects.extend(data.get("projects", []))
        if len(projects) == 0:
            break

        cursor = data.get("pagination", {}).get("cursor")
        if cursor == projects[-1].get("id"):
            break

    return projects

def transfer_projects(project_ids):
   payload = {
   "project_ids": project_ids,
   "org_id": ORG_ID
   }

    response = requests.post(TRANSFER_API_URL, json=payload, headers=HEADERS)
    if response.status_code == 200:
        print(f"Successfully transferred projects: {project_ids}")
    elif response.status_code == 406:
        print("Transfer failed due to insufficient organization limits.")
    elif response.status_code == 501:
        print("Transfer failed because one or more projects have integration linked.")
    else:
        print(f"Transfer failed: {response.text}")

def main():
   all_projects = fetch_all_projects()
   print(f"Fetched {len(all_projects)} projects.")

    # Split the projects into batches of 400 for transfer
    batch_size = 400
    for i in range(0, len(all_projects), batch_size):
        batch = all_projects[i:i + batch_size]
        project_ids = [project["id"] for project in batch]
        transfer_projects(project_ids)

if _name_ == "_main_":
main()

----------------------------------------

TITLE: Querying Inactive Customers with EXPLAIN
DESCRIPTION: Demonstrates how to analyze the query plan for retrieving inactive customers to verify the usage of the partial index.

LANGUAGE: sql
CODE:
EXPLAIN SELECT
  *
FROM
  customer
WHERE
  active = 0;

----------------------------------------

TITLE: Querying max_connections Setting in PostgreSQL
DESCRIPTION: SQL command to check the maximum number of allowed simultaneous connections in a Neon database instance. The max_connections value is calculated based on compute RAM (RAM in bytes / 9531392 bytes).

LANGUAGE: sql
CODE:
SHOW max_connections;

----------------------------------------

TITLE: Creating Table with citext Column
DESCRIPTION: Creates a users table with a case-insensitive email field using the citext data type.

LANGUAGE: sql
CODE:
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) UNIQUE,
    email CITEXT UNIQUE
);

----------------------------------------

TITLE: Creating PostgreSQL Index on Expression
DESCRIPTION: Basic syntax for creating an index on expression in PostgreSQL. This allows indexing based on an expression involving table columns, which can improve query performance for certain types of queries.

LANGUAGE: phpsql
CODE:
CREATE INDEX index_name
ON table_name (expression);

----------------------------------------

TITLE: Using jsonb_array_elements() to Extract Skills
DESCRIPTION: SQL query demonstrating how to use jsonb_array_elements() to extract individual skills from the JSONB array in the 'developers' table.

LANGUAGE: sql
CODE:
SELECT id, name, skill
FROM developers,
    jsonb_array_elements(skills) AS skill;

----------------------------------------

TITLE: Using jsonb_array_elements() to Extract Skills
DESCRIPTION: SQL query demonstrating how to use jsonb_array_elements() to extract individual skills from the JSONB array in the 'developers' table.

LANGUAGE: sql
CODE:
SELECT id, name, skill
FROM developers,
    jsonb_array_elements(skills) AS skill;

----------------------------------------

TITLE: Calculating Total Monthly Estimate for Neon Services
DESCRIPTION: This formula demonstrates how to calculate the total monthly estimate for Neon services by summing the plan fee and any extra usage fees for storage, archive storage, compute, and projects.

LANGUAGE: plaintext
CODE:
Total Estimate = Plan Fee + Extra Storage Fee + Extra Archive Storage Fee + Extra Compute Fee + Extra Project Fee

----------------------------------------

TITLE: Adding IP Addresses to Allowlist Using Neon CLI
DESCRIPTION: Command to add IP addresses to the project's allowlist using the Neon CLI. Supports multiple IP addresses separated by spaces.

LANGUAGE: bash
CODE:
neon ip-allow add 203.0.113.0 203.0.113.1

----------------------------------------

TITLE: Configuring Rails Routes
DESCRIPTION: Sets up the application routes to serve the home view as the root page and includes a health check endpoint.

LANGUAGE: ruby
CODE:
Rails.application.routes.draw do.
  get "up" => "rails/health#show", as: :rails_health_check

  # Defines the root path route ("/")
  root 'home#index'
end

----------------------------------------

TITLE: Inserting JSONB Data into Table
DESCRIPTION: Inserts sample employee records with nested JSON data including pets information.

LANGUAGE: sql
CODE:
INSERT INTO employees (data) VALUES
    ('{"name": "Alice", "age": 30, "pets": [{"type": "cat", "name": "Fluffy"}, {"type": "dog", "name": "Buddy"}]}'),
    ('{"name": "Bob", "age": 35, "pets": [{"type": "dog", "name": "Max"}]}'),
    ('{"name": "Charlie", "age": 40, "pets": [{"type": "rabbit", "name": "Snowball"}]}')
RETURNING *;

----------------------------------------

TITLE: Inserting JSONB Data into Table
DESCRIPTION: Inserts sample employee records with nested JSON data including pets information.

LANGUAGE: sql
CODE:
INSERT INTO employees (data) VALUES
    ('{"name": "Alice", "age": 30, "pets": [{"type": "cat", "name": "Fluffy"}, {"type": "dog", "name": "Buddy"}]}'),
    ('{"name": "Bob", "age": 35, "pets": [{"type": "dog", "name": "Max"}]}'),
    ('{"name": "Charlie", "age": 40, "pets": [{"type": "rabbit", "name": "Snowball"}]}')
RETURNING *;

----------------------------------------

TITLE: Inserting Sample Data into Products Table in PostgreSQL
DESCRIPTION: This SQL statement inserts three rows of sample data into the 'products' table. It uses the RETURNING clause to display the inserted rows.

LANGUAGE: sql
CODE:
INSERT INTO products (name, price, status)
VALUES
  ('A', 10.99, true),
  ('B', 20.49, false),
  ('C', 15.79, true)
RETURNING *;

----------------------------------------

TITLE: Neon CLI Branch Creation Command
DESCRIPTION: CLI command to create a new development branch from main

LANGUAGE: bash
CODE:
neon branches create --name dev/jordan --parent main

----------------------------------------

TITLE: Project Details Response Example (JSON)
DESCRIPTION: This JSON snippet illustrates the structure of the response when retrieving project details, focusing on the maintenance window and scheduled update information.

LANGUAGE: json
CODE:
{
...
  "settings": {
      "maintenance_window": {
         "weekdays": [5],
         "start_time": "07:00",
         "end_time": "08:00"
      },
   }
  "maintenance_scheduled_for": "2025-02-07T07:00"
...
}

----------------------------------------

TITLE: Initializing AgentStack Project
DESCRIPTION: Command to initialize a new AgentStack project named 'web_scraper' using the AgentStack CLI.

LANGUAGE: bash
CODE:
agentstack init web_scraper

----------------------------------------

TITLE: Sales Trend Analysis Using SIGN() Function
DESCRIPTION: Uses SIGN() function with LAG() window function to analyze sales trends, determining if sales went up, down, or remained unchanged compared to the previous year.

LANGUAGE: sql
CODE:
SELECT
    year,
    sales_amount,
    LAG(sales_amount) OVER (ORDER BY year) AS previous_year_sales,
    CASE
        WHEN LAG(sales_amount) OVER (ORDER BY year) IS NULL THEN 'N/A'
        WHEN SIGN(sales_amount - LAG(sales_amount) OVER (ORDER BY year)) = 1 THEN 'up'
        WHEN SIGN(sales_amount - LAG(sales_amount) OVER (ORDER BY year)) = -1 THEN 'down'
        ELSE 'unchanged'
    END AS sales_trend
FROM
    sales;

----------------------------------------

TITLE: Dropping Multiple Tables Example
DESCRIPTION: Shows how to drop multiple tables in a single command.

LANGUAGE: sql
CODE:
DROP TABLE tvshows, animes;

----------------------------------------

TITLE: Implementing Basic Access Control with crudPolicy
DESCRIPTION: This TypeScript snippet demonstrates how to implement basic access control using Drizzle's crudPolicy. It restricts users to only read and modify their own data in a 'todos' table.

LANGUAGE: typescript
CODE:
import { crudPolicy, authenticatedRole, authUid } from 'drizzle-orm/neon';

export const todos = pgTable(
  'todos',
  {
    id: bigint().primaryKey(),
    userId: text()
      .notNull()
      .default(sql`(auth.user_id())`),
    task: text().notNull(),
    isComplete: boolean().notNull().default(false),
    insertedAt: timestamp({ withTimezone: true }).defaultNow().notNull(),
  },
  (table) => [
    crudPolicy({
      role: authenticatedRole,
      read: authUid(table.userId), // users can only read their own todos
      modify: authUid(table.userId), // users can only modify their own todos
    }),
  ]
);

----------------------------------------

TITLE: Schema Management Commands Reference
DESCRIPTION: Essential PostgreSQL commands for schema management including creation, modification, and deletion of schemas.

LANGUAGE: sql
CODE:
CREATE SCHEMA
ALTER SCHEMA
DROP SCHEMA

----------------------------------------

TITLE: Changing PostgreSQL Schema Owner Syntax
DESCRIPTION: Syntax for changing the owner of a PostgreSQL schema to a new user, current user, or session user.

LANGUAGE: sql
CODE:
ALTER SCHEMA schema_name
OWNER TO { new_owner | CURRENT_USER | SESSION_USER};

----------------------------------------

TITLE: Retrieving PostgreSQL Start Time
DESCRIPTION: SQL query to retrieve the PostgreSQL server's start time using the pg_postmaster_start_time() function.

LANGUAGE: SQL
CODE:
SELECT pg_postmaster_start_time();

----------------------------------------

TITLE: Generating Numeric Series with generate_series()
DESCRIPTION: Basic syntax for generating a series of numbers using start, stop, and optional step parameters.

LANGUAGE: sql
CODE:
generate_series (start,stop[,step])

----------------------------------------

TITLE: Handling Endpoint ID Not Specified Error in Neon
DESCRIPTION: This error occurs when the client doesn't support Server Name Indication (SNI). The snippet shows the error message and provides a connection string example with the 'endpoint' option as a workaround.

LANGUAGE: txt
CODE:
ERROR: The endpoint ID is not specified. Either upgrade the Postgres client library (libpq) for SNI support or pass the endpoint ID (the first part of the domain name) as a parameter: '&options=endpoint%3D'. See [https://neon.tech/sni](https://neon.tech/sni) for more information.

LANGUAGE: txt
CODE:
postgresql://[user]:[password]@[neon_hostname]/[dbname]?options=endpoint%3D[endpoint-id]

----------------------------------------

TITLE: Getting Index and Tablespace Sizes in PostgreSQL
DESCRIPTION: Shows how to get the size of indexes and tablespaces using pg_indexes_size() and pg_tablespace_size()

LANGUAGE: sql
CODE:
SELECT
    pg_size_pretty (pg_indexes_size('actor')) size;

SELECT
    pg_size_pretty (
        pg_tablespace_size ('pg_default')
    ) size;

----------------------------------------

TITLE: VPC Endpoint Assignment API Request
DESCRIPTION: cURL command to assign a VPC endpoint to a Neon organization using the Neon API.

LANGUAGE: bash
CODE:
curl --request POST \
 --url https://console.neon.tech/api/v2/organizations/org-bold-bonus-12345678/vpc/region/aws-us-east-2/vpc_endpoints/vpce-1234567890abcdef0 \
 --header 'accept: application/json' \
 --header 'authorization: Bearer $NEON_API_KEY' \
 --header 'content-type: application/json'

----------------------------------------

TITLE: Binary Data Conversion to JSON
DESCRIPTION: Examples of converting UTF8-encoded binary data to JSON using the ENCODING UTF8 option.

LANGUAGE: sql
CODE:
-- Convert UTF8-encoded bytea to JSON
SELECT json(
    '\x7b226e616d65223a22416c696365227d'::bytea
    FORMAT JSON
    ENCODING UTF8
);

LANGUAGE: sql
CODE:
-- Convert bytea with explicit format and uniqueness check
SELECT json(
    '\x7b226964223a312c226e616d65223a22426f62227d'::bytea
    FORMAT JSON
    ENCODING UTF8
    WITH UNIQUE
);

----------------------------------------

TITLE: Monitoring Replication Status - SQL
DESCRIPTION: Query to monitor the replication status by checking the last message receipt time and LSN information from the subscription statistics.

LANGUAGE: sql
CODE:
SELECT subname, received_lsn, latest_end_lsn, last_msg_receipt_time FROM pg_catalog.pg_stat_subscription;

----------------------------------------

TITLE: Creating and Populating User Profiles Table with JSONB
DESCRIPTION: Shows how to create a table with a JSONB column and insert sample user profile data with nested JSON structures.

LANGUAGE: sql
CODE:
CREATE TABLE user_profiles (
    id SERIAL PRIMARY KEY,
    profile JSONB NOT NULL
);

INSERT INTO user_profiles (profile)
VALUES
    ('{"name": "Alice", "age": 30, "interests": ["music", "travel"], "settings": {"privacy": "public", "notifications": true, "theme": "light"}}'),
    ('{"name": "Bob", "age": 25, "interests": ["photography", "cooking"], "settings": {"privacy": "private", "notifications": false}, "city": "NYC"}'),
    ('{"name": "Charlie", "interests": ["music", "cooking"], "settings": {"privacy": "private", "notifications": true, "language": "English"}}');

----------------------------------------

TITLE: Enabling pg_stat_statements Extension in PostgreSQL
DESCRIPTION: SQL command to enable the pg_stat_statements extension in PostgreSQL, which provides query performance statistics with minimal overhead.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pg_stat_statements;

----------------------------------------

TITLE: Removing Key-Value Pair from PostgreSQL hstore Column
DESCRIPTION: Shows how to remove an existing key-value pair from an hstore column using the delete() function.

LANGUAGE: sql
CODE:
UPDATE books
SET attr = delete(attr, 'freeshipping');

----------------------------------------

TITLE: Dropping Database with IF EXISTS
DESCRIPTION: Demonstrates how to safely drop a database using IF EXISTS clause to handle non-existing databases.

LANGUAGE: sql
CODE:
DROP DATABASE IF EXISTS non_existing_database;

----------------------------------------

TITLE: Example of SQL Statements to Review in Dumped Schema
DESCRIPTION: This snippet shows examples of SQL statements that might need to be commented out or removed when migrating a schema between different Postgres providers, such as from AlloyDB to Neon.

LANGUAGE: sql
CODE:
-- SET statement_timeout = 0;
-- SET lock_timeout = 0;
-- SET idle_in_transaction_session_timeout = 0;
-- SET client_encoding = 'UTF8';
-- SET standard_conforming_strings = on;
-- SELECT pg_catalog.set_config('search_path', '', false);
-- SET check_function_bodies = false;
-- SET xmloption = content;
-- SET client_min_messages = warning;
-- SET row_security = off;

-- ALTER SCHEMA public OWNER TO alloydbsuperuser;

-- CREATE EXTENSION IF NOT EXISTS google_columnar_engine WITH SCHEMA public;

-- CREATE EXTENSION IF NOT EXISTS google_db_advisor WITH SCHEMA public;

----------------------------------------

TITLE: Using array_length() with Multi-dimensional Arrays in SQL
DESCRIPTION: Demonstrates how to use array_length() with multi-dimensional arrays by specifying different dimensions to measure. This example calculates the number of rows and columns in a 2D array.

LANGUAGE: sql
CODE:
WITH matrix AS (
  SELECT ARRAY[[1, 2, 3], [4, 5, 6]] AS data
)
SELECT
  array_length(data, 1) AS rows,
  array_length(data, 2) AS columns,
  array_length(data, 3) AS depth
FROM matrix;

----------------------------------------

TITLE: Initializing Neon Python SDK client
DESCRIPTION: This code snippet shows how to initialize the Neon Python SDK client by creating an instance of the NeonAPI class with an API key.

LANGUAGE: python
CODE:
from neon_api import NeonAPI

# Initialize the client.
neon = NeonAPI(api_key='your_api_key')

----------------------------------------

TITLE: Editing Sudoers File
DESCRIPTION: This command opens the sudoers file for editing, allowing you to modify sudo permissions for the 'runneruser'.

LANGUAGE: shell
CODE:
visudo

----------------------------------------

TITLE: Performing 3D Intersection Analysis with SFCGAL
DESCRIPTION: Complex SQL query using SFCGAL to perform 3D intersection analysis between buildings, checking for potential view obstructions.

LANGUAGE: SQL
CODE:
WITH building_centroids AS (
    SELECT
        id,
        name,
        ST_Centroid(footprint) AS centroid
    FROM buildings
),
sight_lines AS (
    SELECT
        a.id AS id_a,
        a.name AS name_a,
        b.id AS id_b,
        b.name AS name_b,
        ST_MakeLine(a.centroid, b.centroid) AS sight_line
    FROM building_centroids a
    CROSS JOIN building_centroids b
    WHERE a.id < b.id
)
SELECT
    s.name_a,
    s.name_b,
    CASE
        WHEN EXISTS (
            SELECT 1
            FROM buildings c
            WHERE c.id NOT IN (s.id_a, s.id_b)
              AND ST_3DIntersects(
                  ST_Extrude(c.footprint, 0, 0, c.height),
                  ST_Extrude(s.sight_line, 0, 0, GREATEST(
                      (SELECT height FROM buildings WHERE id = s.id_a),
                      (SELECT height FROM buildings WHERE id = s.id_b)
                  ))
              )
        ) THEN 'Potential view obstruction'
        ELSE 'Clear view'
    END AS view_status
FROM sight_lines s;

----------------------------------------

TITLE: Connecting to PostgreSQL Server
DESCRIPTION: Command to connect to PostgreSQL server using psql client tool with postgres user

LANGUAGE: sql
CODE:
psql -U postgres

----------------------------------------

TITLE: Retrieving Specific Operation Details via Neon API
DESCRIPTION: cURL command to retrieve details for a specific operation using the Neon API. Requires both project ID and operation ID.

LANGUAGE: bash
CODE:
curl 'https://console.neon.tech/api/v2/projects/autumn-disk-484331/operations/97c7a650-e4ff-43d7-8c58-4c67f5050167' \
  -H 'Accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY"

----------------------------------------

TITLE: Creating Replication Role via Neon CLI
DESCRIPTION: Creates a dedicated Postgres role for replication purposes using the Neon CLI.

LANGUAGE: bash
CODE:
neon roles create --name replication_user

----------------------------------------

TITLE: Configuring Password Format for Neon DMS Endpoint
DESCRIPTION: Shows the required password format for connecting to a Neon database endpoint in AWS DMS. The password must include the endpoint ID in a specific format to enable connection.

LANGUAGE: text
CODE:
endpoint=ep-curly-term-54009904$AbC123dEf

----------------------------------------

TITLE: PostgreSQL Query to Verify Data Import
DESCRIPTION: SQL query to verify the successful import of data into the students table

LANGUAGE: sql
CODE:
SELECT * FROM students;

----------------------------------------

TITLE: Adding Ecto and Postgrex Dependencies in mix.exs
DESCRIPTION: This snippet shows how to add Ecto and Postgrex driver dependencies to the mix.exs file in an Elixir project. These dependencies are required for connecting to a Postgres database using Ecto.

LANGUAGE: elixir
CODE:
defp deps do
  [
    {:ecto_sql, "~> 3.0"},
    {:postgrex, ">= 0.18.0"}
  ]
end

----------------------------------------

TITLE: Setting Deno Deploy Access Token
DESCRIPTION: Command to set the DENO_DEPLOY_TOKEN environment variable for authentication with Deno Deploy.

LANGUAGE: bash
CODE:
export DENO_DEPLOY_TOKEN=YOUR_ACCESS_TOKEN

----------------------------------------

TITLE: Creating Initial Database Migration
DESCRIPTION: Commands to create and apply the initial database migration using Entity Framework Core CLI tools.

LANGUAGE: bash
CODE:
dotnet ef migrations add InitialCreate
dotnet ef database update

----------------------------------------

TITLE: Running the Neon Toolkit Script with Environment Variable
DESCRIPTION: This bash command demonstrates how to run the JavaScript script that uses the Neon Toolkit. It shows setting the NEON_API_KEY environment variable and executing the script with Node.js or Bun.

LANGUAGE: bash
CODE:
NEON_API_KEY=<YOUR_NEON_API_KEY> node index.js # bun also works

----------------------------------------

TITLE: Setting Experimental Extension Flag in PostgreSQL
DESCRIPTION: Enables the use of experimental/unstable extensions in Neon PostgreSQL.

LANGUAGE: sql
CODE:
SET neon.allow_unstable_extensions='true';

----------------------------------------

TITLE: Using trim() in WHERE Clause for Filtering in PostgreSQL
DESCRIPTION: Demonstrates how to use trim() in a WHERE clause to filter rows based on a trimmed value.

LANGUAGE: sql
CODE:
WITH product_codes(code) AS (
  VALUES
    ('  ABC-123  '),
    ('DEF-456'),
    (' ABC-789 '),
    ('  JKL-101  '),
    ('MNO-202 ')
)
SELECT code AS original_code, trim(code) AS trimmed_code
FROM product_codes
WHERE trim(code) LIKE 'ABC%';

----------------------------------------

TITLE: Applying PostgreSQL CEIL() Function in a Complex Query
DESCRIPTION: Shows how to use the CEIL() function with SUM() in a query joining customer and payment tables, rounding up the total amount paid by each customer.

LANGUAGE: sql
CODE:
SELECT
    first_name,
    last_name,
    CEIL(SUM( amount )) amt
FROM
    payment
INNER JOIN customer
        USING(customer_id)
GROUP BY
    customer_id
ORDER BY
    amt DESC;

----------------------------------------

TITLE: Postgres CREATE EXTENSION Statement Support
DESCRIPTION: Enabled CREATE EXTENSION statement usage for non-database owner users in Postgres 14.4

LANGUAGE: sql
CODE:
CREATE EXTENSION

----------------------------------------

TITLE: Verifying Update in PostgreSQL Database
DESCRIPTION: This SQL command retrieves the product with id 1 to verify the update made through the Java application. It's executed directly in the PostgreSQL command-line interface.

LANGUAGE: sql
CODE:
SELECT * FROM products
WHERE id = 1;

----------------------------------------

TITLE: Creating BRIN Index for Time-Series Data
DESCRIPTION: Demonstrates creation of a BRIN index for time-series temperature data. BRIN indexes are efficient for large tables with naturally ordered data.

LANGUAGE: sql
CODE:
CREATE TABLE temperature_readings (
    id SERIAL PRIMARY KEY,
    sensor_id INT NOT NULL,
    temperature DECIMAL(5,2) NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO temperature_readings (sensor_id, temperature, timestamp)
SELECT
    (random() * 100)::int,
    (random() * 50 - 10)::decimal(5,2),
    timestamp '2024-01-01 00:00:00' + (random() * (interval '365 days'))
FROM generate_series(1, 100000);

CREATE INDEX idx_temperature_brin ON temperature_readings USING brin (timestamp);

----------------------------------------

TITLE: Creating Daily Active Users Chart View
DESCRIPTION: Blade template for rendering the Daily Active Users chart using Livewire Charts.

LANGUAGE: blade
CODE:
<div class="h-64">
    <livewire:livewire-line-chart
        :line-chart-model="$lineChartModel"
    />
</div>

----------------------------------------

TITLE: Creating a Database with a Specific Tablespace in PostgreSQL
DESCRIPTION: This SQL statement creates a new database named 'logistics' that uses the 'ts_primary' tablespace.

LANGUAGE: sql
CODE:
CREATE DATABASE logistics
TABLESPACE ts_primary;

----------------------------------------

TITLE: Assigning VPC Endpoint
DESCRIPTION: Command to add or update a VPC endpoint for a specific Neon organization and region. This allows client connections from the corresponding VPC for all projects in the organization.

LANGUAGE: bash
CODE:
neon vpc endpoint assign vpce-1234567890abcdef0 --org-id org-bold-bonus-12345678 --region-id aws-us-east-1

----------------------------------------

TITLE: Using PostgreSQL ALL Operator with Less Than Comparison
DESCRIPTION: This query shows how to use the ALL operator to find employees with salaries less than all managers' salaries, ordered by salary in descending order.

LANGUAGE: sql
CODE:
SELECT
  *
FROM
  employees
WHERE
  salary < ALL(
    select
      salary
    from
      managers
  )
ORDER BY salary DESC;

----------------------------------------

TITLE: Using jsonb_populate_recordset() with Custom Type in PostgreSQL
DESCRIPTION: This example demonstrates how to use the jsonb_populate_recordset() function to convert a JSON array of address objects into a set of records using the previously defined address_type.

LANGUAGE: sql
CODE:
SELECT
  *
FROM
  jsonb_populate_recordset(
    null :: address_type, '[{"street": "123 Main St", "city": "New York", "zipcode": "10001"}, {"street": "456 Elm St", "city": "Los Angeles", "zipcode": "90001"}]' :: jsonb
  ) AS address;

----------------------------------------

TITLE: Connecting to Neon Database with Passwordless Authentication
DESCRIPTION: This snippet demonstrates how to use passwordless authentication to connect to a Neon database from the command line. It uses the pg.neon.tech host and provides a URL for browser-based authentication.

LANGUAGE: bash
CODE:
psql -h pg.neon.tech

----------------------------------------

TITLE: Querying Array Elements in PostgreSQL
DESCRIPTION: This SQL query demonstrates how to search for products belonging to a specific category using the ANY operator with an array column.

LANGUAGE: sql
CODE:
SELECT name, categories
FROM products
WHERE 'Electronics' = ANY (categories);

----------------------------------------

TITLE: Basic PostgreSQL ORDER BY Syntax
DESCRIPTION: Demonstrates the basic syntax of the ORDER BY clause in PostgreSQL, including sorting by multiple expressions and specifying ascending or descending order.

LANGUAGE: SQL
CODE:
SELECT
  select_list
FROM
  table_name
ORDER BY
  sort_expression1 [ASC | DESC],
  sort_expression2 [ASC | DESC],
  ...;

----------------------------------------

TITLE: Generating Secret Key for Phoenix Application
DESCRIPTION: This bash command generates a secret key for encrypting and signing data in a Phoenix application.

LANGUAGE: bash
CODE:
mix phx.gen.secret

----------------------------------------

TITLE: Implementing Secure Controller
DESCRIPTION: C# code for the SecureController class demonstrating protected and role-based authorized endpoints.

LANGUAGE: csharp
CODE:
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

[Authorize]
[ApiController]
[Route("api/[controller]")]
public class SecureController : ControllerBase
{
    [HttpGet]
    public IActionResult Get()
    {
        return Ok(new { message = "This is a secure endpoint" });
    }

    [Authorize(Policy = "RequireAdminRole")]
    [HttpGet("admin")]
    public IActionResult AdminOnly()
    {
        return Ok(new { message = "This is an admin-only endpoint" });
    }
}

----------------------------------------

TITLE: Running Flyway Migration for Different Environments
DESCRIPTION: Bash commands to run Flyway migrations for development, staging, and production environments using specific configuration files.

LANGUAGE: bash
CODE:
flyway migrate -configFiles="conf/env_dev.conf"

LANGUAGE: bash
CODE:
flyway migrate -configFiles="conf/env_staging.conf"

LANGUAGE: bash
CODE:
flyway migrate -configFiles="conf/env_prod.conf"

----------------------------------------

TITLE: Executing DELETE Statement with Placeholder in Python
DESCRIPTION: Demonstrates how to execute a DELETE statement with a placeholder for the 'id' field, allowing for dynamic value insertion.

LANGUAGE: python
CODE:
DELETE FROM table_1 WHERE id = %s;

LANGUAGE: python
CODE:
cur.execute(delete_sql, (value1,))

----------------------------------------

TITLE: Initializing Next.js Project with Dependencies
DESCRIPTION: Commands to create a new Next.js project and install required dependencies including Neon serverless driver, Drizzle ORM, and Auth0 SDK.

LANGUAGE: bash
CODE:
npx create-next-app guide-neon-next-auth0 --typescript --eslint --tailwind --use-npm --no-src-dir --app --import-alias "@/*"

npm install @neondatabase/serverless drizzle-orm
npm install -D drizzle-kit dotenv
npm install @auth0/nextjs-auth0

----------------------------------------

TITLE: Inserting Data into Table with REAL Values
DESCRIPTION: Demonstrates inserting multiple weather records with REAL values for wind speed and temperature measurements. The example shows 10 readings from New York over different hours.

LANGUAGE: sql
CODE:
INSERT INTO weathers (location, wind_speed_mps, temperature_celsius, recorded_at)
VALUES
    ('New York', 5.2, 15.3, '2024-04-19 09:00:00'),
    ('New York', 4.8, 14.9, '2024-04-19 10:00:00'),
    ('New York', 6.0, 16.5, '2024-04-19 11:00:00'),
    ('New York', 5.5, 15.8, '2024-04-19 12:00:00'),
    ('New York', 4.3, 14.2, '2024-04-19 13:00:00'),
    ('New York', 5.9, 16.1, '2024-04-19 14:00:00'),
    ('New York', 6.8, 17.3, '2024-04-19 15:00:00'),
    ('New York', 5.1, 15.6, '2024-04-19 16:00:00'),
    ('New York', 4.7, 14.8, '2024-04-19 17:00:00'),
    ('New York', 5.3, 15.9, '2024-04-19 18:00:00');

----------------------------------------

TITLE: Creating Immutable Unaccent Wrapper Function
DESCRIPTION: Creates an IMMUTABLE wrapper function around unaccent to enable indexing capabilities.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION f_unaccent(text) RETURNS text
AS $$
  SELECT public.unaccent('public.unaccent', $1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;

----------------------------------------

TITLE: Database Migration Command Format
DESCRIPTION: Command format for piping data from pg_dump to pg_restore between Neon projects with custom format archive and verbose mode

LANGUAGE: bash
CODE:
pg_dump -Fc -v -d postgresql://[user]:[password]@[source_neon_hostname]/[dbname] | pg_restore -v -d postgresql://[user]:[password]@[destination_neon_hostname]/[dbname]

----------------------------------------

TITLE: Example pg_dump and pg_restore Workflow in Bash
DESCRIPTION: This example demonstrates a complete workflow of dumping data from a 'pagila' source database and restoring it to a 'pagila' database in Neon.

LANGUAGE: bash
CODE:
~$ cd mydump
~/mydump$ pg_dump -Fc -v -d postgresql://[user]:[password]@[neon_hostname]/pagila -f mydumpfile.bak

~/mydump$ ls
mydumpfile.bak

~/mydump$ pg_restore -v -d postgresql://[user]:[password]@[neon_hostname]/pagila mydumpfile.bak

----------------------------------------

TITLE: Setting Up Dashboard Route
DESCRIPTION: PHP code for setting up the route to display the dashboard, with authentication middleware.

LANGUAGE: php
CODE:
use App\Livewire\Dashboard;

Route::get('/charts', Dashboard::class)->middleware(['auth'])->name('dashboard');

----------------------------------------

TITLE: Resetting the IP Allowlist
DESCRIPTION: The reset subcommand allows resetting the IP allowlist to a new set of addresses or clearing it entirely. It supports specifying new IP addresses during the reset process.

LANGUAGE: bash
CODE:
neon ip-allow reset [ips ...] [options]

LANGUAGE: bash
CODE:
neon ip-allow reset 192.0.2.1 --project-id cold-grass-40154007

----------------------------------------

TITLE: Deleting a Database with Neon API
DESCRIPTION: This cURL command shows how to delete a database using the Neon API. It sends a DELETE request to remove the specified database from a project branch.

LANGUAGE: bash
CODE:
curl -X 'DELETE' \
  'https://console.neon.tech/api/v2/projects/hidden-cell-763301/branches/br-blue-tooth-671580/databases/database1' \
  -H 'Accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY" | jq

----------------------------------------

TITLE: Converting Non-Multiple of 24 Hours
DESCRIPTION: Demonstrates how JUSTIFY_HOURS() handles intervals that are not exact multiples of 24 hours, showing both days and remaining hours.

LANGUAGE: sql
CODE:
SELECT JUSTIFY_HOURS(INTERVAL '25 hours'),
       JUSTIFY_HOURS(INTERVAL '50 hours'),
       JUSTIFY_HOURS(INTERVAL '70 hours');

----------------------------------------

TITLE: Adding a Column to an Existing Table
DESCRIPTION: SQL command to add a new column to an existing table, which will be used for demonstrating UNIQUE index creation.

LANGUAGE: sql
CODE:
ALTER TABLE employees
ADD mobile_phone VARCHAR(20);

----------------------------------------

TITLE: Frontend File Upload Implementation
DESCRIPTION: React component implementation for handling file uploads with S3 presigned URLs and Postgres integration

LANGUAGE: tsx
CODE:
'use client';

import { ChangeEvent } from 'react';

export default function Home() {
  const uploadFile = (e: ChangeEvent<HTMLInputElement>) => {
    const file: File | null | undefined = e.target.files?.[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = async (event) => {
      const fileData = event.target?.result;
      if (fileData) {
        const presignedURL = new URL('/api/presigned', window.location.href);
        presignedURL.searchParams.set('fileName', file.name);
        presignedURL.searchParams.set('contentType', file.type);
        fetch(presignedURL.toString())
          .then((res) => res.json())
          .then((res) => {
            const body = new Blob([fileData], { type: file.type });
            fetch(res.signedUrl, {
              body,
              method: 'PUT',
            }).then(() => {
              fetch('/api/user/image', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  objectUrl: res.signedUrl.split('?')[0],
                }),
              });
            });
          });
      }
    };
    reader.readAsArrayBuffer(file);
  };
  return <input onChange={uploadFile} type="file" />;
}

----------------------------------------

TITLE: Configuring Prisma Datasource for Neon in TypeScript
DESCRIPTION: Demonstrates how to configure the Prisma datasource to connect to a Neon database using a single pooled connection string. This simplified configuration is possible with Prisma ORM 5.10.0 or higher.

LANGUAGE: typescript
CODE:
datasource db {
  provider = "postgresql"
  url   = env("DATABASE_URL")
}

----------------------------------------

TITLE: Neon Connection String Format
DESCRIPTION: Example of Neon database connection string format with endpoint ID workaround for pgloader compatibility.

LANGUAGE: bash
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require

LANGUAGE: bash
CODE:
postgresql://alex:endpoint=ep-cool-darkness-123456;AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require

----------------------------------------

TITLE: Using FORMAT with Width Specification
DESCRIPTION: Shows how to use FORMAT() with width specifications for padding and alignment.

LANGUAGE: sql
CODE:
SELECT FORMAT('|%10s|', 'one');

LANGUAGE: sql
CODE:
SELECT FORMAT('|%-10s|', 'one');

----------------------------------------

TITLE: Creating Sales Table in PostgreSQL
DESCRIPTION: Creates a table to store sales data with year and sales amount columns for demonstrating SIGN() function usage.

LANGUAGE: sql
CODE:
CREATE TABLE sales (
    year INTEGER PRIMARY KEY,
    sales_amount NUMERIC NOT NULL
);

----------------------------------------

TITLE: Database Connection Command
DESCRIPTION: Command to connect to PostgreSQL database using psql client with postgres user.

LANGUAGE: text
CODE:
psql -U postgres

----------------------------------------

TITLE: Configuring Spring Data Database Connection
DESCRIPTION: Spring Data configuration for application.properties file to establish connection with Neon database. Uses the same connection string format as JDBC but configured within Spring's properties file.

LANGUAGE: java
CODE:
spring.datasource.url=jdbc:postgresql://[neon_hostname]/[dbname]?user=[user]&password=[password]&sslmode=require

----------------------------------------

TITLE: Dropping Sample Index
DESCRIPTION: Example of removing the previously created index using DROP INDEX statement.

LANGUAGE: sql
CODE:
DROP INDEX idx_actor_first_name;

----------------------------------------

TITLE: Simple SCALE() Function Example
DESCRIPTION: Shows how to use SCALE() function to determine the number of decimal places in a specific number.

LANGUAGE: sql
CODE:
SELECT SCALE(3.141592653589793);

----------------------------------------

TITLE: Configuring Django settings for Neon database
DESCRIPTION: Updates the Django settings file to include the 'notes' app and configure the database connection to use Neon Postgres.

LANGUAGE: python
CODE:
INSTALLED_APPS = [
    # ... other apps
    'notes',
]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'your_neon_database_name',
        'USER': 'your_username',
        'PASSWORD': 'your_password',
        'HOST': 'your_neon_host',
        'PORT': '5432',
    }
}

----------------------------------------

TITLE: Downloading Sample Data File with wget
DESCRIPTION: Bash command to download a sample data SQL file from a GitHub repository using wget.

LANGUAGE: Bash
CODE:
wget https://raw.githubusercontent.com/neondatabase/postgres-sample-dbs/main/filename.sql

----------------------------------------

TITLE: Creating PostgreSQL Stored Procedure for Student Enrollment
DESCRIPTION: SQL procedure that handles student enrollment and invoice creation with multiple parameters

LANGUAGE: sql
CODE:
CREATE OR REPLACE PROCEDURE enroll_student(
    p_student_id INTEGER,
    p_course_id INTEGER,
    p_amount DOUBLE PRECISION,
    p_tax DOUBLE PRECISION,
    p_invoice_date DATE
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Enroll the student in the course
	INSERT INTO enrollments (student_id, course_id, enrolled_date)
    VALUES (p_student_id, p_course_id, p_invoice_date);

    -- Create a new invoice for the student
    INSERT INTO invoices (student_id, course_id, amount, tax, invoice_date)
    VALUES (p_student_id, p_course_id, p_amount, p_tax, p_invoice_date);
END;
$$;

----------------------------------------

TITLE: Branch Restore Operation
DESCRIPTION: Restores a branch to a specific point in time with backup creation.

LANGUAGE: bash
CODE:
neon branches restore main ^self@2024-05-06T10:00:00.000Z --preserve-under-name main_restore_backup_2024-05-06

----------------------------------------

TITLE: Creating Jobs Table for Queue in Laravel
DESCRIPTION: Artisan commands to create the jobs table migration and run the migration for queue management.

LANGUAGE: bash
CODE:
php artisan queue:table
php artisan migrate

----------------------------------------

TITLE: Creating a Specific Tablespace in PostgreSQL
DESCRIPTION: This example creates a new tablespace named 'ts_primary' with the physical location 'c:\pgdata\primary'.

LANGUAGE: sql
CODE:
CREATE TABLESPACE ts_primary
LOCATION 'c:\pgdata\primary';

----------------------------------------

TITLE: Setting Named Context File in Neon CLI
DESCRIPTION: Sets a project context to a specified context file location.

LANGUAGE: bash
CODE:
neon set-context --project-id plain-waterfall-84865553 --context-file Documents/MyContext

----------------------------------------

TITLE: Tie-Breaking Behavior in round() Function
DESCRIPTION: Illustrates the half-round-up tie-breaking behavior of the PostgreSQL round() function.

LANGUAGE: sql
CODE:
SELECT round(2.65, 1), round(2.75, 1);

----------------------------------------

TITLE: PostgreSQL RIGHT JOIN with Table Aliases
DESCRIPTION: Shows how to use table aliases in a RIGHT JOIN query to make the SQL more concise and readable.

LANGUAGE: sql
CODE:
SELECT
  f.film_id,
  f.title,
  i.inventory_id
FROM
  inventory i
RIGHT JOIN film f
  ON f.film_id = i.film_id
ORDER BY
  f.title;

----------------------------------------

TITLE: Date Filtering Query Example
DESCRIPTION: Shows how to filter conference sessions by a specific date using PostgreSQL date comparison.

LANGUAGE: sql
CODE:
SELECT session_title, start_time
FROM conference_sessions
WHERE session_date = '2024-05-16';

----------------------------------------

TITLE: Performing Arithmetic Operations on Intervals
DESCRIPTION: Demonstrates arithmetic operations on interval values in PostgreSQL.

LANGUAGE: SQL
CODE:
SELECT INTERVAL '2h 50m' + INTERVAL '10m'; -- 03:00:00
SELECT INTERVAL '2h 50m' - INTERVAL '50m'; -- 02:00:00
SELECT 600 * INTERVAL '1 minute'; -- 10:00:00

----------------------------------------

TITLE: Generating Agents with AgentStack CLI
DESCRIPTION: Commands to generate three agents (web_scraper, data_extractor, and content_storer) using the AgentStack CLI.

LANGUAGE: bash
CODE:
agentstack generate agent web_scraper
agentstack generate agent data_extractor
agentstack generate agent content_storer

----------------------------------------

TITLE: Installing pgvector Extension in Neon Database
DESCRIPTION: This code installs the pgvector extension in the Neon database, enabling vector similarity search functionality.

LANGUAGE: python
CODE:
# Execute this query to install the pgvector extension
cursor.execute("CREATE EXTENSION IF NOT EXISTS vector;")

----------------------------------------

TITLE: Using pg_dump to Backup a PostgreSQL Database
DESCRIPTION: This command demonstrates how to use pg_dump to backup a single PostgreSQL database named 'dvdrental' to a tar file.

LANGUAGE: SQL
CODE:
pg_dump -U postgres -d dvdrental -F tar -f d:\backup\dvdrental.tar

----------------------------------------

TITLE: Extracting Month from Interval in PostgreSQL
DESCRIPTION: This example shows how to extract the month from an interval value using the EXTRACT() function.

LANGUAGE: sql
CODE:
SELECT
  EXTRACT(
    MONTH
    FROM
      INTERVAL '6 years 5 months 4 days 3 hours 2 minutes 1 second'
  );

----------------------------------------

TITLE: Handling Invalid Date Strings with TO_DATE() in PostgreSQL
DESCRIPTION: This example demonstrates what happens when an invalid date string is passed to the TO_DATE() function, resulting in an error.

LANGUAGE: sql
CODE:
SELECT TO_DATE('2017/02/30', 'YYYY/MM/DD');

----------------------------------------

TITLE: Creating a Disabled Subscription in PostgreSQL
DESCRIPTION: This command creates a subscription with 'enabled = false' so that it can be enabled at a later time.

LANGUAGE: sql
CODE:
CREATE SUBSCRIPTION my_subscription
CONNECTION 'postgresql://username:password@host:port/dbname'
PUBLICATION my_publication
WITH (enabled = false);

----------------------------------------

TITLE: Creating a Database in Neon with TypeScript SDK
DESCRIPTION: TypeScript code to create a new database within a Neon branch using the SDK.

LANGUAGE: typescript
CODE:
import { createApiClient } from '@neondatabase/api-client';

const apiClient = createApiClient({
  apiKey: process.env.NEON_API_KEY!,
});

async function createNeonDatabase(
  projectId: string,
  branchId: string,
  databaseName: string,
  databaseOwner: string
) {
  try {
    const response = await apiClient.createProjectBranchDatabase(projectId, branchId, {
      database: {
        name: databaseName,
        owner_name: databaseOwner,
      },
    });
    console.log('Database created:', response.data.database);
  } catch (error) {
    console.error('Error creating database:', error);
    throw error;
  }
}

// Example usage: In the project with ID "your-project-id", create a database named "mydatabase" in the branch with ID "your-branch-id" and owner "neondb_owner"
createNeonDatabase('your-project-id', 'your-branch-id', 'mydatabase', 'neondb_owner').catch(
  (error) => {
    console.error('Error creating database:', error.message);
  }
);

----------------------------------------

TITLE: Checking Database Size in PostgreSQL
DESCRIPTION: SQL query to check the total logical data size of all databases in a branch

LANGUAGE: sql
CODE:
SELECT pg_size_pretty(sum(pg_database_size(datname)))
FROM pg_database;

----------------------------------------

TITLE: Setting PostgreSQL Server Timezone
DESCRIPTION: Commands to set and verify the PostgreSQL server's timezone to America/Los_Angeles.

LANGUAGE: sql
CODE:
set timezone to 'America/Los_Angeles'

LANGUAGE: sql
CODE:
show timezone;

----------------------------------------

TITLE: Sorting Daily Revenue in Descending Order in PostgreSQL
DESCRIPTION: This SQL snippet shows how to query the 'daily_revenue' materialized view to get days sorted by total revenue in descending order, effectively showing the days with the highest order revenue.

LANGUAGE: sql
CODE:
SELECT * FROM daily_revenue ORDER BY total_revenue DESC;

----------------------------------------

TITLE: Creating Partial Index for Inactive Customers
DESCRIPTION: Creates a partial index on the active column of the customer table, specifically indexing only inactive customers (where active = 0) to optimize queries filtering for inactive customers.

LANGUAGE: sql
CODE:
CREATE INDEX customer_active
ON customer(active)
WHERE active = 0;

----------------------------------------

TITLE: Example Output of Passwordless Authentication Connection
DESCRIPTION: This snippet shows the expected output when connecting to a Neon database using passwordless authentication. It includes the authentication URL and connection details.

LANGUAGE: bash
CODE:
alexlopez@alex-machine ~ % psql -h pg.neon.tech
NOTICE:  Welcome to Neon!
Authenticate by visiting:
    https://console.neon.tech/psql_session/secure_token

NOTICE:  Connecting to database.
psql (16.1, server 16.3)
SSL connection (secure connection details hidden)
Type "help" for help.

alexlopez=>

----------------------------------------

TITLE: Creating Time Value Using MAKE_TIME()
DESCRIPTION: Example showing how to create a time value of 22:30:45 using the MAKE_TIME() function with integer parameters.

LANGUAGE: sql
CODE:
SELECT MAKE_TIME(22,30,45);

----------------------------------------

TITLE: Creating ICU-based Collation in Postgres
DESCRIPTION: Demonstrates how to create a custom collation using the International Components for Unicode (ICU) provider, specifically for German language sorting.

LANGUAGE: sql
CODE:
CREATE COLLATION german (provider = icu, locale = 'de');

----------------------------------------

TITLE: Renaming a Database using ALTER DATABASE in PostgreSQL
DESCRIPTION: This code snippet shows how to rename an existing database using the ALTER DATABASE RENAME TO statement. It's important to note that you cannot rename the current database.

LANGUAGE: sql
CODE:
ALTER DATABASE database_name
RENAME TO new_name;

----------------------------------------

TITLE: Implementing Tenant Controller
DESCRIPTION: PHP code for the TenantController, handling tenant registration and displaying registration forms.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers;

use App\Models\Tenant;
use Illuminate\Http\Request;

class TenantController extends Controller
{
    public function showRegistrationForm()
    {
        return view('tenant.register');
    }

    public function register(Request $request)
    {
        $request->validate([
            'domain' => 'required|string|max:255|unique:domains,domain',
        ]);

        $tenant = Tenant::create();
        $tenant->domains()->create(['domain' => $request->domain]);

        return redirect()->route('tenant.registered', $request->domain);
    }

    public function registered($domain)
    {
        return view('tenant.registered', compact('domain'));
    }
}

----------------------------------------

TITLE: Implementing Role-Based Access Control with crudPolicy
DESCRIPTION: This TypeScript snippet shows how to implement role-based access control using Drizzle's crudPolicy. It defines different permissions for anonymous and authenticated users on a 'posts' table.

LANGUAGE: typescript
CODE:
import { crudPolicy, authenticatedRole, anonymousRole } from 'drizzle-orm/neon';

export const posts = pgTable(
  'posts',
  {
    id: bigint().primaryKey(),
    userId: text()
      .notNull()
      .default(sql`(auth.user_id())`),
    content: text().notNull(),
    published: boolean().notNull().default(false),
  },
  (table) => [
    // Public read access
    crudPolicy({
      role: anonymousRole,
      read: true, // anyone can read posts
      modify: false, // no modifications allowed
    }),
    // Authenticated user access
    crudPolicy({
      role: authenticatedRole,
      read: true, // can read all posts
      modify: authUid(table.userId), // can only modify own posts
    }),
  ]
);

----------------------------------------

TITLE: Extracting Email Addresses Using json_extract_path_text() in SQL
DESCRIPTION: Demonstrates how to use json_extract_path_text() to extract email addresses from the nested JSON 'profile' column in the 'users' table.

LANGUAGE: sql
CODE:
SELECT id, json_extract_path_text(profile, 'contact', 'email') as email
FROM users;

----------------------------------------

TITLE: Listing VPC Endpoints
DESCRIPTION: Command to retrieve a list of all configured VPC endpoints for a specific Neon organization.

LANGUAGE: bash
CODE:
neon vpc endpoint list --org-id org-bold-bonus-12345678

----------------------------------------

TITLE: Using PASSING Clause with JSON_EXISTS() in PostgreSQL
DESCRIPTION: Shows how to use the PASSING clause in JSON_EXISTS() to incorporate variables into the path expression for dynamic checks.

LANGUAGE: sql
CODE:
-- Check using a variable
SELECT JSON_EXISTS(
    '{"temperature": 25}',
    'strict $.temperature ? (@ > $threshold)'
    PASSING 30 AS threshold
);

----------------------------------------

TITLE: Data Modification Commands
DESCRIPTION: SQL statements for inserting, updating, and deleting data in tables

LANGUAGE: sql
CODE:
INSERT INTO table(column1,column2,...)
VALUES(value_1,value_2,...);

UPDATE table
SET column_1 = value_1,
    ...
WHERE condition;

DELETE FROM table_name
WHERE condition;

----------------------------------------

TITLE: Sorting Descending with NULL Values Last
DESCRIPTION: This query sorts values in descending order while explicitly placing NULL values at the end of the result set.

LANGUAGE: SQL
CODE:
SELECT
  num
FROM
  sort_demo
ORDER BY
  num DESC NULLS LAST;

----------------------------------------

TITLE: Installing GORM Dependencies
DESCRIPTION: Commands to install required GORM packages

LANGUAGE: bash
CODE:
go get -u gorm.io/gorm
go get -u gorm.io/driver/postgres

----------------------------------------

TITLE: CREATE SCHEMA with User Authorization
DESCRIPTION: Creates a schema owned by a specific user. The schema name will match the username if not specified.

LANGUAGE: sql
CODE:
CREATE SCHEMA [IF NOT EXISTS]
AUTHORIZATION username;

----------------------------------------

TITLE: GitHub Actions Workflow Configuration
DESCRIPTION: YAML configuration for GitHub Actions workflow that handles database branching automation

LANGUAGE: yaml
CODE:
name: Create/Delete Branch for Pull Request

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  setup:
    name: Setup
    outputs:
      branch: ${{ steps.branch_name.outputs.current_branch }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Get branch name
        id: branch_name
        uses: tj-actions/branch-names@v8

  create_neon_branch:
    name: Create Neon Branch
    outputs:
      db_url: ${{ steps.create_neon_branch_encode.outputs.db_url }}
      db_url_with_pooler: ${{ steps.create_neon_branch_encode.outputs.db_url_with_pooler }}
    needs: setup
    if: |
      github.event_name == 'pull_request' && (
      github.event.action == 'synchronize'
      || github.event.action == 'opened'
      || github.event.action == 'reopened')
    runs-on: ubuntu-latest
    steps:
      - name: Create Neon Branch
        id: create_neon_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch_name: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Migrations on Preview Branch
        run: npm install && npm run db:generate && npm run db:migrate
        env:
          DATABASE_URL: '${{ steps.create_neon_branch.outputs.db_url }}'

      - name: Post Schema Diff Comment to PR
        uses: neondatabase/schema-diff-action@v1
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          compare_branch: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

  delete_neon_branch:
    name: Delete Neon Branch and Apply Migrations on Production Database
    needs: setup
    if: |
      github.event_name == 'pull_request' &&
      github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Delete Neon Branch
        uses: neondatabase/delete-branch-action@v3
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Checkout
        if: github.event.pull_request.merged == true
        uses: actions/checkout@v4

      - name: Apply migrations to production
        if: github.event.pull_request.merged == true
        run: |
          npm install
          npm run db:generate
          npm run db:migrate
        env:
          DATABASE_URL: '${{ secrets.DATABASE_URL }}'

----------------------------------------

TITLE: Querying Inserted Data from Employees Table
DESCRIPTION: Shows how to verify the data inserted using jsonb_to_record() by selecting all records from the employees table.

LANGUAGE: sql
CODE:
SELECT * FROM employees;

----------------------------------------

TITLE: Creating Auto-incrementing Orders Table with SERIAL
DESCRIPTION: Demonstrates using SERIAL type for auto-incrementing primary keys and shows how to create and populate a table with automatically generated IDs.

LANGUAGE: sql
CODE:
CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    order_details TEXT
);

INSERT INTO orders (order_details)
VALUES ('Order 1'), ('Order 2'), ('Order 3');
RETURNING *;

----------------------------------------

TITLE: Using Sequence Options with Identity Columns
DESCRIPTION: This snippet shows how to specify sequence options like START WITH and INCREMENT BY when creating an identity column.

LANGUAGE: sql
CODE:
CREATE TABLE color (
    color_id INT GENERATED BY DEFAULT AS IDENTITY
    (START WITH 10 INCREMENT BY 10),
    color_name VARCHAR NOT NULL
);

----------------------------------------

TITLE: Initializing Postgres Vector Store with LlamaIndex
DESCRIPTION: Sets up a Postgres vector store using LlamaIndex and OpenAI embeddings. Configures the embedding model dimensions and connection to Postgres database.

LANGUAGE: typescript
CODE:
// File: vectorStore.ts

import { OpenAIEmbedding, Settings } from 'llamaindex';
import { PGVectorStore } from 'llamaindex/storage/vectorStore/PGVectorStore';

Settings.embedModel = new OpenAIEmbedding({
  dimensions: 512,
  model: 'text-embedding-3-small',
});

const vectorStore = new PGVectorStore({
  dimensions: 512,
  connectionString: process.env.POSTGRES_URL,
});

export default vectorStore;

// Use in your code (say, in API routes)
const index = await VectorStoreIndex.fromVectorStore(vectorStore);

----------------------------------------

TITLE: Creating and Populating Sample Tables in PostgreSQL
DESCRIPTION: Creates two tables basket_a and basket_b with fruit data to demonstrate join operations. Each table has an ID column and a fruit name column.

LANGUAGE: sql
CODE:
CREATE TABLE basket_a (
    a INT PRIMARY KEY,
    fruit_a VARCHAR (100) NOT NULL
);

CREATE TABLE basket_b (
    b INT PRIMARY KEY,
    fruit_b VARCHAR (100) NOT NULL
);

INSERT INTO basket_a (a, fruit_a)
VALUES
    (1, 'Apple'),
    (2, 'Orange'),
    (3, 'Banana'),
    (4, 'Cucumber');

INSERT INTO basket_b (b, fruit_b)
VALUES
    (1, 'Orange'),
    (2, 'Apple'),
    (3, 'Watermelon'),
    (4, 'Pear');

----------------------------------------

TITLE: Initializing Liquibase Project
DESCRIPTION: Command to initialize a new Liquibase project in a specified directory

LANGUAGE: bash
CODE:
liquibase init project --project-dir ~/blogdb

----------------------------------------

TITLE: Listing Neon Projects with TypeScript SDK
DESCRIPTION: TypeScript code to create an API client and list Neon projects using the SDK.

LANGUAGE: typescript
CODE:
import { createApiClient } from '@neondatabase/api-client';

const apiClient = createApiClient({
  apiKey: process.env.NEON_API_KEY!,
});

async function listNeonProjects() {
  try {
    const response = await apiClient.listProjects({});
    console.log(response.data.projects);
  } catch (error) {
    console.error('Error listing projects:', error);
  }
}

listNeonProjects();

----------------------------------------

TITLE: Adding Categories and Pages to Sidebar in YAML
DESCRIPTION: Demonstrates how to structure the sidebar.yaml file to add new categories, subcategories, and pages to the documentation sidebar.

LANGUAGE: yaml
CODE:
- title: Category 1
  items:
    - title: Page 1
      slug: page-1
- title: Category 2
  items:
    - title: Page 2
      slug: page-2
    - title: Subcategory 1
      items:
        - title: Page 3
          slug: page-3
        - title: Page 4
          slug: page-4
    - title: Page 5
      slug: page-5

----------------------------------------

TITLE: Using array_length() to Count Categories in SQL
DESCRIPTION: Demonstrates how to use array_length() to count the number of categories for each product in a sample products table. It uses a CTE to create sample data and then applies array_length() in the SELECT statement.

LANGUAGE: sql
CODE:
WITH products(product_name, categories) AS (
  VALUES
    ('Laptop', ARRAY['Electronics', 'Computers']),
    ('Coffee Maker', ARRAY['Appliances', 'Kitchen', 'Electronics']),
    ('Book', ARRAY['Books'])
)
SELECT
  product_name,
  categories,
  array_length(categories, 1) AS category_count
FROM products;

----------------------------------------

TITLE: PostgreSQL RIGHT JOIN with USING Syntax
DESCRIPTION: Shows how to use the USING syntax in a RIGHT JOIN when the joining columns have the same name in both tables.

LANGUAGE: sql
CODE:
SELECT
  select_list
FROM
  table1
RIGHT JOIN table2 USING (column_name);

----------------------------------------

TITLE: Using PostgreSQL ARRAY_AGG Without ORDER BY Clause
DESCRIPTION: Demonstrates how to use ARRAY_AGG() to aggregate actor names for each film title without specifying an order for the array elements.

LANGUAGE: sql
CODE:
SELECT
    title,
    ARRAY_AGG (first_name || ' ' || last_name) actors
FROM
    film
INNER JOIN film_actor USING (film_id)
INNER JOIN actor USING (actor_id)
GROUP BY
    title
ORDER BY
    title;

----------------------------------------

TITLE: Defining SQLAlchemy Question Model
DESCRIPTION: Python code defining a Question model using SQLAlchemy ORM

LANGUAGE: python
CODE:
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Question(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=False)

----------------------------------------

TITLE: Calculating Base-10 Logarithm in PostgreSQL
DESCRIPTION: This snippet demonstrates how to use the LOG() function to calculate the base-10 logarithm of 100. The function takes a single numeric or double precision argument.

LANGUAGE: sql
CODE:
SELECT LOG(100);

----------------------------------------

TITLE: Function Signature for jsonb_extract_path_text in PostgreSQL
DESCRIPTION: Defines the signature of the jsonb_extract_path_text function, which accepts a JSONB object and a variadic list of path elements to extract a text value.

LANGUAGE: sql
CODE:
jsonb_extract_path_text(from_json JSONB, VARIADIC path_elems text[]) -> TEXT

----------------------------------------

TITLE: Function Signature for jsonb_extract_path_text in PostgreSQL
DESCRIPTION: Defines the signature of the jsonb_extract_path_text function, which accepts a JSONB object and a variadic list of path elements to extract a text value.

LANGUAGE: sql
CODE:
jsonb_extract_path_text(from_json JSONB, VARIADIC path_elems text[]) -> TEXT

----------------------------------------

TITLE: Removing PostgreSQL System User
DESCRIPTION: Command to remove the default postgres system user account.

LANGUAGE: bash
CODE:
sudo deluser postgres

----------------------------------------

TITLE: Running the AI Agent Example
DESCRIPTION: Executes the main.py script to run the AI agent and interact with the Neon API.

LANGUAGE: bash
CODE:
python main.py

----------------------------------------

TITLE: MIN() with HAVING Clause
DESCRIPTION: Shows how to use MIN() with HAVING to filter groups based on minimum values.

LANGUAGE: sql
CODE:
SELECT
  name category,
  MIN(replacement_cost) replacement_cost
FROM
  category
  INNER JOIN film_category USING (category_id)
  INNER JOIN film USING (film_id)
GROUP BY
  name
HAVING
  MIN(replacement_cost) > 9.99
ORDER BY
  name;

----------------------------------------

TITLE: Complete PostgreSQL Data Deletion Implementation in C#
DESCRIPTION: Demonstrates a complete implementation of deleting data from a PostgreSQL database using C#. Includes connection handling, parameter binding, and error management.

LANGUAGE: csharp
CODE:
using Npgsql;

// Construct a DELETE statement
var sql = @"DELETE FROM students WHERE id = @id";

// Get the connection string
string connectionString = ConfigurationHelper.GetConnectionString("DefaultConnection");
try
{

    // Create a data source
    await using var dataSource = NpgsqlDataSource.Create(connectionString);

    // Create a Command object
    await using var cmd = dataSource.CreateCommand(sql);

    // Bind parameters
    cmd.Parameters.AddWithValue("@id", 1);

    // Execute the DELETE statement
    await cmd.ExecuteNonQueryAsync();

    Console.WriteLine("The row has been deleted successfully.");

}
catch (NpgsqlException ex)
{
    Console.WriteLine($"Error: {ex.Message}");
}

----------------------------------------

TITLE: Reading Binary Data from PostgreSQL with Python
DESCRIPTION: Function that retrieves binary data from a PostgreSQL database table and saves it to a file. Demonstrates proper handling of BYTEA data type and file operations.

LANGUAGE: python
CODE:
import psycopg2
from config import load_config

def read_blob(part_id, path_to_dir):
    " Read BLOB data from a table "
    # read database configuration
    config = load_config()

    try:
        # connect to the PostgresQL database
        with  psycopg2.connect(**config) as conn:
            with conn.cursor() as cur:
                # execute the SELECT statement
                cur.execute(""" SELECT part_name, file_extension, drawing_data
                                FROM part_drawings
                                INNER JOIN parts on parts.part_id = part_drawings.part_id
                                WHERE parts.part_id = %s """,
                            (part_id,))

                blob = cur.fetchone()

                # write blob data into file
                open(path_to_dir + blob[0] + '.' + blob[1], 'wb').write(blob[2])
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)

if __name__ == '__main__':
    read_blob(1, 'images/output/')
    read_blob(2, 'images/output/')

----------------------------------------

TITLE: Serializing Complex Nested JSON Structures in PostgreSQL
DESCRIPTION: Shows how json_serialize() handles complex, nested JSON structures with multiple levels and data types.

LANGUAGE: sql
CODE:
-- Serialize nested JSON structures
SELECT json_serialize('{
    "user": {
        "name": "Bob",
        "settings": {
            "theme": "dark",
            "notifications": true
        },
        "tags": ["admin", "active"]
    }
}');

----------------------------------------

TITLE: Creating Database with Neon CLI
DESCRIPTION: Creates a new database with specified name and owner using the Neon CLI create command. Required parameters include database name, with optional owner name specification.

LANGUAGE: bash
CODE:
neon databases create --name mynewdb --owner-name john

----------------------------------------

TITLE: Running Neon CLI command
DESCRIPTION: Generic command structure for running Neon CLI commands.

LANGUAGE: bash
CODE:
neon <command> [options]

----------------------------------------

TITLE: Articles Table with Automatic Timestamp Updates
DESCRIPTION: Complex example showing how to implement automatic timestamp updates using triggers.

LANGUAGE: sql
CODE:
CREATE TABLE articles (
  id SERIAL PRIMARY KEY,
  title TEXT,
  content TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp(3),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp(3)
);

CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = current_timestamp(3);
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_article_modtime
BEFORE UPDATE ON articles
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

INSERT INTO articles (title, content) VALUES ('First Article', 'Content here');
INSERT INTO articles (title, content) VALUES ('Second Article', 'Content here');

----------------------------------------

TITLE: Querying JSONB Data using Sequelize
DESCRIPTION: This JavaScript snippet shows how to query JSONB data using Sequelize. It demonstrates querying nested properties within the JSONB column, with Sequelize handling the translation to SQL syntax.

LANGUAGE: javascript
CODE:
const documents = await Document.findAll({
  where: {
    'data.author.name': 'John Smith',
  },
});

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Environment variable setup for database connections with different roles.

LANGUAGE: bash
CODE:
# Database owner connection string
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'

# Neon "authenticated" role connection string
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

----------------------------------------

TITLE: Enabling unaccent Extension in PostgreSQL
DESCRIPTION: SQL command to enable the unaccent extension in a PostgreSQL database.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS unaccent;

----------------------------------------

TITLE: Transactions in Postgres
DESCRIPTION: These SQL examples demonstrate how to use transactions in Postgres to ensure that a sequence of operations is executed as a single unit of work. It covers starting a transaction, performing operations, committing or rolling back changes, and using savepoints within transactions.

LANGUAGE: sql
CODE:
-- Start a transaction
BEGIN;

-- Perform several operations within the transaction
INSERT INTO accounts (user_id, balance) VALUES (1, 1000);
UPDATE accounts SET balance = balance - 100 WHERE user_id = 1;
UPDATE accounts SET balance = balance + 100 WHERE user_id = 2;

-- Commit the transaction to make changes permanent
COMMIT;

-- Start another transaction
BEGIN;

-- Perform operations
UPDATE accounts SET balance = balance - 50 WHERE user_id = 1;
UPDATE accounts SET balance = balance + 50 WHERE user_id = 3;

-- Rollback the transaction in case of an error or if operations should not be finalized
ROLLBACK;

-- Demonstrating transaction with SAVEPOINT
BEGIN;
INSERT INTO accounts (user_id, balance) VALUES (3, 500);

-- Create a savepoint
SAVEPOINT my_savepoint;

UPDATE accounts SET balance = balance - 100 WHERE user_id = 3;
-- Assume an error or a need to revert to the savepoint
ROLLBACK TO SAVEPOINT my_savepoint;

-- Proceed with other operations or end transaction
COMMIT;

----------------------------------------

TITLE: Formatting Currency Amount
DESCRIPTION: Example of adding currency symbol to numeric amounts using TO_CHAR.

LANGUAGE: sql
CODE:
SELECT
    payment_id,
    amount,
    TO_CHAR(
        amount,
        'l99999D99'
    ) amount_format
FROM
    payment
ORDER BY
    payment_date;

----------------------------------------

TITLE: Installing Neon Serverless Driver via JSR Package
DESCRIPTION: Installation instructions for the Neon serverless driver using JavaScript Registry (JSR) package management. Shows both direct JSR reference and npm installation methods.

LANGUAGE: bash
CODE:
@neon/serverless

LANGUAGE: bash
CODE:
npm install @neon/serverless

----------------------------------------

TITLE: Creating Database Schema for Account Management
DESCRIPTION: SQL statements to create the necessary tables for managing accounts, plans, and their relationships.

LANGUAGE: sql
CODE:
CREATE TABLE accounts(
   id SERIAL PRIMARY KEY,
   first_name CHARACTER VARYING(100),
   last_name CHARACTER VARYING(100)
);

CREATE TABLE plans(
   id SERIAL PRIMARY KEY,
   plan CHARACTER VARYING(10) NOT NULL
);

CREATE TABLE account_plans(
   account_id INTEGER NOT NULL,
   plan_id INTEGER NOT NULL,
   effective_date DATE NOT NULL,
   PRIMARY KEY (account_id,plan_id),
   FOREIGN KEY(account_id) REFERENCES accounts(id),
   FOREIGN KEY(plan_id) REFERENCES plans(id)
);

----------------------------------------

TITLE: Database Configuration Setup
DESCRIPTION: Environment configuration for Neon Postgres database connection.

LANGUAGE: env
CODE:
DATABASE_URL=postgres://user:password@your-neon-hostname.neon.tech/neondb?sslmode=require

----------------------------------------

TITLE: Basic CREATE SCHEMA Syntax
DESCRIPTION: The basic syntax for creating a new schema in PostgreSQL. Optional IF NOT EXISTS clause prevents errors if schema already exists.

LANGUAGE: sql
CODE:
CREATE SCHEMA [IF NOT EXISTS] schema_name;

----------------------------------------

TITLE: Comparing Neon Branch Connection Strings
DESCRIPTION: Demonstrates the unique Postgres connection strings for two different Neon branches, highlighting their isolation.

LANGUAGE: bash
CODE:
# Branch 1
postgresql://database_name_owner:AbC123dEf@ep-shiny-cell-a5y2zuu0.us-east-2.aws.neon.tech/dbname

# Branch 2
postgresql://database_name_owner:AbC123dEf@ep-hidden-hall-a5x58cuv.us-east-2.aws.neon.tech/dbname

----------------------------------------

TITLE: Configuring Database Connection
DESCRIPTION: JSON configuration for Neon database connection string and JWT authentication settings in appsettings.json.

LANGUAGE: json
CODE:
"ConnectionStrings": {
  "NeonDb": "Host=<your-host>;Database=<your-database>;Username=<your-username>;Password=<your-password>;Port=5432"
}

"Jwt": {
"SecretKey": "your-very-secure-secret-key"
}

----------------------------------------

TITLE: Querying Active Users with Boolean Conditions
DESCRIPTION: Demonstrates filtering users based on Boolean column values using WHERE clause

LANGUAGE: sql
CODE:
SELECT *
FROM users
WHERE is_active = TRUE;

----------------------------------------

TITLE: Basic HTTP Query with Neon Driver
DESCRIPTION: Example of performing a basic SQL query using the Neon driver over HTTP

LANGUAGE: javascript
CODE:
import { neon } from '@neondatabase/serverless';

const sql = neon(process.env.DATABASE_URL);
const posts = await sql('SELECT * FROM posts WHERE id = $1', [postId]);

----------------------------------------

TITLE: Monitoring CPU Allocation with neon_utils
DESCRIPTION: Function provided by the neon_utils extension to monitor autoscaling compute resource allocation.

LANGUAGE: sql
CODE:
num_cpus()

----------------------------------------

TITLE: Restricting Project VPC Access
DESCRIPTION: Command to configure or update a VPC endpoint restriction for a Neon project, limiting connections to only the specified VPC.

LANGUAGE: bash
CODE:
neon vpc project restrict vpce-1234567890abcdef0 --project-id orange-credit-12345678

----------------------------------------

TITLE: Inserting JSON Data into PostgreSQL Table
DESCRIPTION: Inserts sample JSON data into the 'person' table, including nested arrays for pets.

LANGUAGE: sql
CODE:
INSERT INTO person (info)
VALUES
    ('{"name": "Alice", "age": 30, "pets": [{"type": "cat", "name": "Fluffy"}, {"type": "dog", "name": "Buddy"}]}'),
    ('{"name": "Bob", "age": 35, "pets": [{"type": "dog", "name": "Max"}]}'),
    ('{"name": "Charlie", "age": 40, "pets": [{"type": "rabbit", "name": "Snowball"}]}')
RETURNING *;

----------------------------------------

TITLE: Installing Dependencies for Sveltekit and Neon
DESCRIPTION: npm commands to install necessary dependencies for connecting Sveltekit to Neon using different Postgres clients.

LANGUAGE: shell
CODE:
npm install pg dotenv

LANGUAGE: shell
CODE:
npm install postgres dotenv

LANGUAGE: shell
CODE:
npm install @neondatabase/serverless dotenv

----------------------------------------

TITLE: Database Selection Command
DESCRIPTION: Command to connect to a specific database (dvdrental) in PostgreSQL.

LANGUAGE: php
CODE:
\c dvdrental

----------------------------------------

TITLE: Configuring Neon Postgres Database Connection
DESCRIPTION: Environment variables configuration for connecting to Neon Postgres database

LANGUAGE: env
CODE:
DB_CONNECTION=pgsql
DB_HOST=your-neon-hostname.neon.tech
DB_PORT=5432
DB_DATABASE=your_database_name
DB_USERNAME=your_username
DB_PASSWORD=your_password

----------------------------------------

TITLE: Seeding the Database with Initial Data
DESCRIPTION: Javascript code to seed the database with initial author and book data using Prisma Client. This script creates sample authors and their associated books.

LANGUAGE: javascript
CODE:
// seed.js

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const seed = async () => {
  const authors = [
    {
      name: 'J.R.R. Tolkien',
      bio: 'The creator of Middle-earth and author of The Lord of the Rings.',
      books: {
        create: [
          { title: 'The Hobbit' },
          { title: 'The Fellowship of the Ring' },
          { title: 'The Two Towers' },
          { title: 'The Return of the King' },
        ],
      },
    },
    {
      name: 'George R.R. Martin',
      bio: 'The author of the epic fantasy series A Song of Ice and Fire.',
      books: {
        create: [{ title: 'A Game of Thrones' }, { title: 'A Clash of Kings' }],
      },
    },
    {
      name: 'J.K. Rowling',
      bio: 'The creator of the Harry Potter series.',
      books: {
        create: [
          { title: "Harry Potter and the Philosopher's Stone" },
          { title: 'Harry Potter and the Chamber of Secrets' },
        ],
      },
    },
  ];

  for (const author of authors) {
    await prisma.author.create({
      data: author,
    });
  }
};

async function main() {
  try {
    await seed();
    console.log('Seeding completed');
  } catch (error) {
    console.error('Error during seeding:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main();

----------------------------------------

TITLE: Querying Tables from pg_catalog Schema
DESCRIPTION: SQL query to retrieve table information from pg_catalog.pg_tables view, excluding system tables from pg_catalog and information_schema schemas.

LANGUAGE: sql
CODE:
SELECT *
FROM pg_catalog.pg_tables
WHERE schemaname != 'pg_catalog' AND
    schemaname != 'information_schema';

----------------------------------------

TITLE: Creating PostgreSQL Database Connection
DESCRIPTION: Establishes connection to PostgreSQL database using NpgsqlDataSource

LANGUAGE: csharp
CODE:
await using var dataSource = NpgsqlDataSource.Create(connectionString);

----------------------------------------

TITLE: Creating Delete Task Command in Laravel Zero
DESCRIPTION: Command to generate a new command class for deleting tasks in a Laravel Zero project.

LANGUAGE: bash
CODE:
php todo make:command DeleteTaskCommand

----------------------------------------

TITLE: Neon Database Connection String Example
DESCRIPTION: Example connection string format for connecting to a Neon PostgreSQL database

LANGUAGE: text
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/neondb

----------------------------------------

TITLE: Setting Default Context in Neon CLI
DESCRIPTION: Sets a project and organization context to the default .neon file in the current directory.

LANGUAGE: bash
CODE:
neon set-context --project-id patient-frost-50125040 --org-id org-bright-sky-12345678

----------------------------------------

TITLE: Adding Column in Logical Replication Setup - SQL
DESCRIPTION: Example of adding a new column in a logical replication setup, demonstrating the order of operations between subscriber and publisher.

LANGUAGE: sql
CODE:
ALTER TABLE your_table_name ADD COLUMN new_column_name data_type;

----------------------------------------

TITLE: Creating and Populating Customer Preferences Table
DESCRIPTION: Creates a customers table with an array column for preferences and inserts sample data to demonstrate array_to_json usage.

LANGUAGE: sql
CODE:
CREATE TABLE customers (
 id SERIAL PRIMARY KEY,
 name TEXT NOT NULL,
 preferences TEXT[]
);

INSERT INTO customers (name, preferences)
VALUES ('John Doe', '{clothing, electronics}');

INSERT INTO customers (name, preferences)
VALUES ('Jane Doe', '{books, music, travel}');

----------------------------------------

TITLE: Creating GitHub Action Workflow File Structure
DESCRIPTION: Shows the folder structure for creating a new GitHub Action workflow file.

LANGUAGE: shell
CODE:
.github
  |-- workflows
      |-- acme-co-prod-backup.yml

----------------------------------------

TITLE: Creating a Table with JSONB Column in PostgreSQL
DESCRIPTION: This SQL snippet creates a table named 'products' with a JSONB column 'attributes' to store product data.

LANGUAGE: sql
CODE:
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    attributes JSONB
);

----------------------------------------

TITLE: Installing Neon Python SDK using pip
DESCRIPTION: This snippet demonstrates how to install the Neon Python SDK using pip, the package installer for Python.

LANGUAGE: shell
CODE:
$ pip install neon-api

----------------------------------------

TITLE: Processing Referral in Azure Function
DESCRIPTION: Azure Function JavaScript code to process a referral, create a new user, and award points to the referrer.

LANGUAGE: javascript
CODE:
const { app } = require('@azure/functions');
const { query } = require('../utils/db');

app.http('processReferral', {
  methods: ['POST'],
  authLevel: 'anonymous',
  handler: async (request, context) => {
    try {
      const { referralCode, newUserEmail, newUserName } = await request.json();
      await query('BEGIN');
      const codeResult = await query(
        `SELECT * FROM referral_codes
                WHERE code = $1
                AND times_used < max_uses
                AND expires_at > NOW()`,
        [referralCode]
      );
      if (codeResult.rows.length === 0) {
        await query('ROLLBACK');
        return {
          status: 400,
          body: 'Invalid or expired referral code',
        };
      }
      const code = codeResult.rows[0];
      const newUserResult = await query(
        `INSERT INTO users (email, name)
                VALUES ($1, $2)
                RETURNING user_id`,
        [newUserEmail, newUserName]
      );
      await query(
        `INSERT INTO referrals
                (referrer_id, referred_id, code_id, points_awarded, status)
                VALUES ($1, $2, $3, $4, 'completed')`,
        [code.referrer_id, newUserResult.rows[0].user_id, code.code_id, code.points_per_referral]
      );
      await query(
        `UPDATE referral_codes
                SET times_used = times_used + 1
                WHERE code_id = $1`,
        [code.code_id]
      );
      await query(
        `UPDATE users
                SET points = points + $1
                WHERE user_id = $2`,
        [code.points_per_referral, code.referrer_id]
      );
      await query('COMMIT');
      return {
        status: 200,
        body: JSON.stringify({
          message: 'Referral processed successfully',
        }),
      };
    } catch (error) {
      await query('ROLLBACK');
      context.log('Error processing referral:', error);
      return {
        status: 500,
        body: 'Error processing referral',
      };
    }
  },
});

----------------------------------------

TITLE: Case-Insensitive Global Replacement
DESCRIPTION: Example showing how to use flags for case-insensitive global replacement of text patterns.

LANGUAGE: sql
CODE:
WITH product_descriptions AS (
  SELECT 'Red Apple: sweet and crisp' AS description
  UNION ALL
  SELECT 'Green Apple: tart and juicy apple' AS description
  UNION ALL
  SELECT 'Yellow Apple: mild and sweet' AS description
)
SELECT
  description AS original_description,
  regexp_replace(description, 'apple', 'pear', 'gi') AS modified_description
FROM product_descriptions;

----------------------------------------

TITLE: Configuring Neon Connection String with Endpoint ID
DESCRIPTION: Demonstrates two methods for specifying a Neon endpoint ID in the password field for clients that don't support SNI. Shows both semicolon and dollar sign delimiters for compatibility with different client applications.

LANGUAGE: bash
CODE:
endpoint=<endpoint_id>;<password>

LANGUAGE: bash
CODE:
endpoint=<endpoint_id>$<password>

----------------------------------------

TITLE: Using PostgreSQL SUM() with Empty Result Set
DESCRIPTION: Demonstrates how SUM() returns NULL when there are no matching rows in the query.

LANGUAGE: sql
CODE:
SELECT
  SUM (amount)
FROM
  payment
WHERE
  customer_id = 2000;

----------------------------------------

TITLE: Executing UPDATE Query in C# with Npgsql
DESCRIPTION: Demonstrates how to execute an UPDATE query in PostgreSQL using C# and Npgsql. It includes creating a connection, setting parameters, and executing the query.

LANGUAGE: C#
CODE:
using Npgsql;

// Construct an UPDATE statement
var sql = @"UPDATE email = @email FROM students WHERE id= @id";

// Get the connection string
string connectionString = ConfigurationHelper.GetConnectionString("DefaultConnection");

try
{
    // Set up a data source
    await using var dataSource = NpgsqlDataSource.Create(connectionString);

    // Create a Command object
    await using var cmd = dataSource.CreateCommand(sql);

    // Bind parameters
    cmd.Parameters.AddWithValue("@email", "[[email protected]]");
    cmd.Parameters.AddWithValue("@id", 1);

    // Execute the UPDATE statement
    await cmd.ExecuteNonQueryAsync();

    Console.WriteLine("The row has been updated successfully.");

}
catch (NpgsqlException ex)
{
    Console.WriteLine($"Error: {ex.Message}");
}

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Installing required Python packages using pip including FastAPI, SQLAlchemy, and other dependencies.

LANGUAGE: bash
CODE:
pip install fastapi uvicorn sqlalchemy psycopg2-binary "pydantic[email]" python-dotenv

----------------------------------------

TITLE: List All Schemas Query
DESCRIPTION: Query to retrieve all schemas from the current database.

LANGUAGE: sql
CODE:
SELECT *
FROM pg_catalog.pg_namespace
ORDER BY nspname;

----------------------------------------

TITLE: Key Neon CLI Commands for Branch Management
DESCRIPTION: Lists the essential Neon CLI commands for creating, getting connection strings, and deleting branches.

LANGUAGE: bash
CODE:
# Create branch
neon branches create [options]

# Get Connection string
neon connection-string [branch] [options]

# Delete branch
neon branches delete <id|name> [options]

----------------------------------------

TITLE: Defining Prisma Schema for Author and Book Models
DESCRIPTION: Prisma schema definitions for Author and Book models, including their fields, relationships, and database mappings.

LANGUAGE: prisma
CODE:
model Author {
  @@map("authors")

  id        Int      @id @default(autoincrement())
  name      String
  bio       String?
  createdAt DateTime @default(now()) @map("created_at")
  books     Book[]
}

model Book {
  @@map("books")

  id        Int      @id @default(autoincrement())
  title     String
  authorId  Int      @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  author    Author   @relation(fields: [authorId], references: [id])
}

----------------------------------------

TITLE: Querying User-Configurable Postgres Parameters in Neon
DESCRIPTION: SQL query to list all Postgres parameters that can be configured in a user context, which includes session, database, or role-level settings in Neon.

LANGUAGE: sql
CODE:
SELECT name
FROM pg_settings
WHERE context = 'user';

----------------------------------------

TITLE: Creating and Populating Sample Orders Table
DESCRIPTION: Creates a sample orders table with customer order data and populates it with test records for demonstration purposes.

LANGUAGE: sql
CODE:
CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    customer_id INTEGER NOT NULL,
    product_id INTEGER,
    order_amount DECIMAL(10, 2) NOT NULL,
    order_date TIMESTAMP NOT NULL
);

INSERT INTO orders (customer_id, product_id, order_amount, order_date)
VALUES
    (1, 101, 150.00, '2023-01-15 10:30:00'),
    (2, 102, 75.50, '2023-01-16 11:45:00'),
    (1, 103, 200.00, '2023-02-01 09:15:00'),
    (3, 104, 50.25, '2023-02-10 14:20:00'),
    (2, 105, 125.75, '2023-03-05 16:30:00'),
    (4, NULL, 90.00, '2023-03-10 13:00:00'),
    (1, 106, 180.50, '2023-04-02 11:10:00'),
    (3, 107, 60.25, '2023-04-15 10:45:00'),
    (5, 108, 110.00, '2023-05-01 15:20:00'),
    (2, 109, 95.75, '2023-05-20 12:30:00');

----------------------------------------

TITLE: Delete Project API Request
DESCRIPTION: API request to delete a Neon project using cURL.

LANGUAGE: bash
CODE:
curl -X 'DELETE' \
  'https://console.neon.tech/api/v2/projects/ep-cool-darkness-123456' \
  -H 'accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY"

----------------------------------------

TITLE: Configuring Program.cs for Entity Framework and Swagger
DESCRIPTION: Main program configuration in C# for setting up Entity Framework, Swagger, and other application services.

LANGUAGE: csharp
CODE:
using Microsoft.EntityFrameworkCore;
using TodoApi.Data;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();

builder.Services.AddDbContext<TodoDbContext>(opt =>
    opt.UseNpgsql(builder.Configuration.GetConnectionString("TodoDbConnection")));

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseAuthorization();
app.MapControllers();

if (app.Environment.IsDevelopment())
{
    app.Run("http://localhost:5001");
}
else
{
    app.UseHttpsRedirection();
    app.Run();
}

----------------------------------------

TITLE: Basic Usage of jsonb_object_agg() Function in PostgreSQL
DESCRIPTION: This example shows how to use the jsonb_object_agg() function to create a JSON object from department names and IDs.

LANGUAGE: sql
CODE:
SELECT
  jsonb_object_agg(department_name, id) departments
FROM
  departments;

----------------------------------------

TITLE: Configuring Docker Compose for Local Postgres and WebSocket Proxy
DESCRIPTION: YAML configuration for setting up a local Postgres database and a WebSocket proxy using Docker Compose.

LANGUAGE: yaml
CODE:
services:
  postgres:
    image: 'postgres:latest'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - '5432:5432'
  pg_proxy:
    image: ghcr.io/neondatabase/wsproxy:latest
    environment:
      APPEND_PORT: 'postgres:5432'
      ALLOW_ADDR_REGEX: '.*'
      LOG_TRAFFIC: 'true'
    ports:
      - '5433:80'
    depends_on:
      - postgres

----------------------------------------

TITLE: Task Migration Schema Definition
DESCRIPTION: Database migration file defining the structure of the tasks table

LANGUAGE: php
CODE:
public function up()
{
    Schema::create('tasks', function (Blueprint $table) {
        $table->id();
        $table->foreignId('user_id')->constrained()->onDelete('cascade');
        $table->string('title');
        $table->text('description')->nullable();
        $table->enum('status', ['todo', 'in_progress', 'done'])->default('todo');
        $table->timestamps();
    });
}

----------------------------------------

TITLE: Updating Element in JSON Array with jsonb_set()
DESCRIPTION: Example of using jsonb_set() to update the first element of a JSON array.

LANGUAGE: sql
CODE:
SELECT jsonb_set('[1,2,3]', '{0}', '-1');

----------------------------------------

TITLE: Retrieving Random Records from PostgreSQL Table
DESCRIPTION: Demonstrates how to select a random record from a table using RANDOM() with ORDER BY and LIMIT clauses.

LANGUAGE: sql
CODE:
SELECT title
FROM film
ORDER BY RANDOM()
LIMIT 1;

----------------------------------------

TITLE: Multiple Table TRUNCATE Syntax
DESCRIPTION: Syntax for truncating multiple tables simultaneously in PostgreSQL.

LANGUAGE: sql
CODE:
TRUNCATE TABLE
    table_name1,
    table_name2,
    ...;

----------------------------------------

TITLE: Basic PostgreSQL Column Type Change Syntax
DESCRIPTION: Shows the basic syntax for changing a column's data type using ALTER TABLE ALTER COLUMN statement.

LANGUAGE: sql
CODE:
ALTER TABLE table_name
ALTER COLUMN column_name
[SET DATA] TYPE new_data_type;

----------------------------------------

TITLE: Creating Read Replica via Neon CLI
DESCRIPTION: Command to create a read replica using the Neon CLI

LANGUAGE: bash
CODE:
neon branches add-compute mybranch --type read_only

----------------------------------------

TITLE: Basic DENSE_RANK Query
DESCRIPTION: Demonstrates DENSE_RANK() usage over an entire result set without partitioning.

LANGUAGE: sql
CODE:
SELECT
	c,
	DENSE_RANK() OVER (
		ORDER BY c
	) dense_rank_number
FROM
	dense_ranks;

----------------------------------------

TITLE: Simple MIN() Query Example
DESCRIPTION: Demonstrates how to get the lowest rental rate from a film table using MIN().

LANGUAGE: sql
CODE:
SELECT
   MIN (rental_rate)
FROM
   film;

----------------------------------------

TITLE: Creating New Laravel Project with Composer
DESCRIPTION: Command to create a new Laravel project named 'laravel-events' using Composer and change into the project directory.

LANGUAGE: bash
CODE:
composer create-project laravel/laravel laravel-events
cd laravel-events

----------------------------------------

TITLE: Terminating Active Database Connections
DESCRIPTION: This SQL query terminates all active connections to a specific database using the pg_terminate_backend function.

LANGUAGE: sql
CODE:
SELECT pg_terminate_backend (pid)
FROM pg_stat_activity
WHERE datname = 'dvdrental';

----------------------------------------

TITLE: Creating a Table with Column-Specific Collation in Neon
DESCRIPTION: SQL command to create a table in Neon with a column using a specific ICU collation, showing fine-grained collation control.

LANGUAGE: sql
CODE:
CREATE TABLE my_ru_table (
    id serial PRIMARY KEY,
    russian_text_column text COLLATE "ru-x-icu",
    description text
);

----------------------------------------

TITLE: Generating and Applying Migration for Schema Change
DESCRIPTION: Commands to generate a new Alembic migration for the schema change and apply it to the database. This updates the database schema to include the new 'country' field.

LANGUAGE: bash
CODE:
alembic revision --autogenerate -m "add-country-to-author"
alembic upgrade head

----------------------------------------

TITLE: Connecting to PostgreSQL in C# using Npgsql
DESCRIPTION: C# code to establish a connection to PostgreSQL using Npgsql and display the server version.

LANGUAGE: csharp
CODE:
using Npgsql;

// Get the connection string
string connectionString = ConfigurationHelper.GetConnectionString("DefaultConnection");

// Connect to the PostgreSQL server
await using var conn = new NpgsqlConnection(connectionString);
await conn.OpenAsync();

Console.WriteLine($"The PostgreSQL version: {conn.PostgreSqlVersion}");

----------------------------------------

TITLE: Error Message for Write Operation on Neon Read Replica
DESCRIPTION: Example of the error message returned when attempting to perform a write operation (INSERT, UPDATE, DELETE) on a Neon read replica. This demonstrates the read-only nature of the replica.

LANGUAGE: bash
CODE:
ERROR: cannot execute INSERT in a read-only transaction (SQLSTATE 25006)

----------------------------------------

TITLE: Implementing Search Routes
DESCRIPTION: JavaScript code for the Express.js routes handling search requests and combining results from Neon and Azure AI Search.

LANGUAGE: javascript
CODE:
const express = require('express');
const neonSearch = require('../services/neonService');
const azureSearch = require('../services/azureService');
const { mergeResults } = require('../utils/searchUtils');

const router = express.Router();

router.post('/search', async (req, res) => {
  try {
    const { query, filters = {}, limit = 10, searchType = 'hybrid' } = req.body;

    // Validate the search query
    if (!query || query.trim().length === 0) {
      return res.status(400).json({
        error: 'Search query is required',
      });
    }

    // Determine search strategy
    let results;
    switch (searchType) {
      case 'hybrid':
        const [neonResults, azureResults] = await Promise.all([
          neonSearch.search(query, filters, limit),
          azureSearch.search(query, filters, limit),
        ]);
        results = mergeResults(neonResults, azureResults);
        break;

      case 'neon':
        results = await neonSearch.search(query, filters, limit);
        break;

      case 'azure':
        results = await azureSearch.search(query, filters, limit);
        break;

      default:
        return res.status(400).json({
          error: 'Invalid search type',
        });
    }

    res.json({
      query,
      results,
      metadata: {
        total: results.length,
        searchType,
        executionTime: process.hrtime()[1] / 1000000,
      },
    });
  } catch (error) {
    console.error('Search error:', error);
    res.status(500).json({
      error: 'An error occurred during search',
    });
  }
});

module.exports = router;

----------------------------------------

TITLE: Creating Azure Resources with Azure CLI
DESCRIPTION: Azure CLI commands to create necessary Azure resources for deploying the referral system.

LANGUAGE: bash
CODE:
az group create --name referral-system --location eastus2

az storage account create \
  --name <referral-storage-unique-name> \
  --location eastus \
  --resource-group referral-system \
  --sku Standard_LRS

az functionapp create \
  --name referral-system \
  --storage-account <referral-storage-unique-name> \
  --consumption-plan-location eastus2 \
  --resource-group referral-system \
  --runtime node \
  --runtime-version 18 \
  --functions-version 4

----------------------------------------

TITLE: Creating Sample Accounts Table in PostgreSQL
DESCRIPTION: This SQL snippet creates a new table called 'accounts' with columns for id, name, and balance. It includes a check constraint to ensure the balance is non-negative.

LANGUAGE: sql
CODE:
DROP TABLE IF EXISTS accounts;

CREATE TABLE accounts (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    balance DEC(15,2) NOT NULL CHECK(balance >= 0),
    PRIMARY KEY(id)
);

----------------------------------------

TITLE: Creating a New Next.js Application with TypeScript and Tailwind CSS
DESCRIPTION: Command to create a new Next.js project with specific configuration options including TypeScript and Tailwind CSS support.

LANGUAGE: shell
CODE:
npx create-next-app@latest my-app

----------------------------------------

TITLE: Listing PostgreSQL Databases
DESCRIPTION: This snippet shows how to list all databases in PostgreSQL using the \l command and an SQL query.

LANGUAGE: sql
CODE:
\l

LANGUAGE: sql
CODE:
SELECT datname FROM pg_database;

----------------------------------------

TITLE: Setting PostgreSQL User Password with Expiration Date
DESCRIPTION: This SQL snippet shows how to change a PostgreSQL user's password and set an expiration date using the ALTER ROLE statement with the VALID UNTIL clause.

LANGUAGE: sql
CODE:
ALTER ROLE username
WITH PASSWORD 'new_password'
VALID UNTIL timestamp;

----------------------------------------

TITLE: Creating Inventory Before Insert Trigger
DESCRIPTION: SQL command to create a BEFORE INSERT trigger on the inventory table that executes the update_total_qty function.

LANGUAGE: sql
CODE:
CREATE TRIGGER inventory_before_insert
BEFORE INSERT
ON inventory
FOR EACH ROW
EXECUTE FUNCTION update_total_qty();

----------------------------------------

TITLE: Using Expressions in SELECT
DESCRIPTION: Example of using string concatenation to combine first and last names in the query result.

LANGUAGE: sql
CODE:
SELECT
   first_name || ' ' || last_name,
   email
FROM
   customer;

----------------------------------------

TITLE: Viewing Loaded Schema Tables with psql in SQL
DESCRIPTION: This psql command displays the tables in the newly loaded schema, allowing you to verify the migration.

LANGUAGE: sql
CODE:
\dt

----------------------------------------

TITLE: Specifying Neon Endpoint ID in Laravel Password Field
DESCRIPTION: This snippet shows how to include the Neon endpoint ID in the password field of the Laravel database configuration. This is another workaround for older Postgres clients that don't support SNI.

LANGUAGE: text
CODE:
DB_PASSWORD=endpoint=<endpoint_id>$<password>

----------------------------------------

TITLE: Transferring Projects Between Organizations via API (Bash)
DESCRIPTION: This snippet shows how to use the Neon API to transfer projects between two organizations. It includes the API endpoint, required headers, and JSON payload structure for the transfer operation.

LANGUAGE: bash
CODE:
curl --request POST \
     --url 'https://console.neon.tech/api/v2/organizations/{source_org_id}/projects/transfer' \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $PERSONAL_API_KEY' \
     --header 'content-type: application/json' \
     --data '{
  "project_ids": [
    "project-id-1",
    "project-id-2"
  ],
  "destination_org_id": "destination-org-id"
}'

----------------------------------------

TITLE: Launching Exograph Backend with Environment Variable
DESCRIPTION: This command starts the Exograph development server, using an environment variable to specify the Postgres connection URL.

LANGUAGE: bash
CODE:
EXO_POSTGRES_URL=<the connection string> exo dev

----------------------------------------

TITLE: Inserting Investment Data
DESCRIPTION: Inserts sample investment data into the investments table.

LANGUAGE: sql
CODE:
INSERT INTO investments (investment_amount, annual_interest_rate, years)
VALUES
    (1000, 5, 1),
    (2000, 7, 3),
    (5000, 4.5, 5)
RETURNING *;

----------------------------------------

TITLE: View Template Implementation
DESCRIPTION: ERB template for displaying authors and their books.

LANGUAGE: erb
CODE:
<h1>Authors</h1>
<ul>
  <% @authors.each do |author| %>
    <li>
      <%= author.name %> - <%= link_to 'Books', author_books_path(author_id: author.id) %>
    </li>
  <% end %>
</ul>

----------------------------------------

TITLE: Using Spanish Text Search Configuration with tsvector in PostgreSQL
DESCRIPTION: This example illustrates how to use a different language configuration (Spanish) for text search, including creating a table, inserting data, and querying using Spanish-specific text search functions.

LANGUAGE: sql
CODE:
CREATE TABLE product_reviews (
    id SERIAL PRIMARY KEY,
    product_name TEXT NOT NULL,
    review TEXT NOT NULL,
    search_vector tsvector
);

INSERT INTO product_reviews (product_name, review)
VALUES
    ('Laptop XYZ', 'Este laptop es muy rápido y tiene una excelente batería.'),
    ('Smartphone ABC', 'La cámara del teléfono es increíble, pero la batería no dura mucho.'),
    ('Tablet 123', 'La tablet es ligera y fácil de usar, perfecta para leer libros.');

UPDATE product_reviews
SET search_vector = to_tsvector('spanish', product_name || ' ' || review);

SELECT product_name
FROM product_reviews
WHERE search_vector @@ to_tsquery('spanish', 'batería & (excelente | dura)');

----------------------------------------

TITLE: Creating Publication for Table Changes in Neon
DESCRIPTION: SQL command to create a publication that specifies which tables will publish changes to the replication slot

LANGUAGE: sql
CODE:
CREATE PUBLICATION sequin_pub FOR TABLE table1, table2, table3;

----------------------------------------

TITLE: Installing Prisma Read Replicas Extension
DESCRIPTION: NPM command to install the Prisma read replicas extension

LANGUAGE: bash
CODE:
npm install @prisma/extension-read-replicas

----------------------------------------

TITLE: Creating a New Branch in Neon with Windsurf Cascade
DESCRIPTION: A conversation transcript demonstrating how to create a new branch in a Neon project using natural language commands in Windsurf's Cascade.

LANGUAGE: text
CODE:
User: Create a branch named "feature-x"
Cascade: I'll create a new branch named "feature-x" in your Neon project.
> MCP Tool: neon / create_branch
> Tool Arguments: { "projectId": "restless-butterfly-08800888", "branchName": "feature-x" }
> Perfect! I've created a new branch with the following details:
> Branch Name: `feature-x`
> Branch ID: `br-aged-sun-a5woam3c`
> Project ID: `restless-butterfly-08800888`
> The branch has been created successfully and is ready for use. You can now make changes to this branch without affecting the main branch. Would you like to do anything with this new branch?

----------------------------------------

TITLE: Connecting to PostgreSQL Server
DESCRIPTION: Command to connect to the PostgreSQL server using psql.

LANGUAGE: SQL
CODE:
psql -U postgres

----------------------------------------

TITLE: Installing Neon Serverless Driver
DESCRIPTION: NPM command to install the Neon Serverless Driver, which manages the connection between the application and the Neon Postgres database using HTTP.

LANGUAGE: bash
CODE:
npm install @neondatabase/serverless

----------------------------------------

TITLE: Connecting to Neon with PSQL
DESCRIPTION: Command template for connecting to Neon database using psql with connection string

LANGUAGE: bash
CODE:
psql postgresql://[user]:[password]@[neon_hostname]/[dbname]

----------------------------------------

TITLE: Creating Admonitions in Markdown
DESCRIPTION: Shows how to use custom Admonition components for highlighting important information in guides.

LANGUAGE: markdown
CODE:
<Admonition type="note" title="Your title">
  The branch creation process does not increase load on the originating project. You can create a branch at any time without worrying about downtime or performance degradation.
</Admonition>

<Admonition type="info">
  The branch creation process does not increase load on the originating project. You can create a branch at any time without worrying about downtime or performance degradation.
</Admonition>

----------------------------------------

TITLE: Database Context Configuration
DESCRIPTION: DbContext class configuration for Entity Framework Core with entity mappings and relationships.

LANGUAGE: csharp
CODE:
using Microsoft.EntityFrameworkCore;
using NeonInventoryApi.Models;
using System.Reflection;

namespace NeonInventoryApi.Data
{
    public class InventoryContext : DbContext
    {
        public InventoryContext(DbContextOptions<InventoryContext> options)
            : base(options)
        { }

        public DbSet<Product> Products { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasIndex(p => p.SKU)
                      .IsUnique();

                entity.Property(p => p.Name)
                      .IsRequired()
                      .HasMaxLength(100);

                entity.Property(p => p.Price)
                      .HasPrecision(10, 2);

                entity.Property(p => p.LastRestocked)
                      .HasDefaultValueSql("CURRENT_TIMESTAMP");
            });

            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());

            base.OnModelCreating(modelBuilder);
        }
    }
}

----------------------------------------

TITLE: Setting WAL Level Configuration
DESCRIPTION: Configuration setting in postgresql.conf to enable logical replication

LANGUAGE: ini
CODE:
wal_level = logical

----------------------------------------

TITLE: Creating Publication for Tables
DESCRIPTION: SQL command to create a publication for specified tables that will be replicated.

LANGUAGE: sql
CODE:
CREATE PUBLICATION dbz_publication FOR TABLE <tbl1, tbl2, tbl3>>;

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Example of setting up database connection environment variables for both admin and authenticated access.

LANGUAGE: bash
CODE:
# Database owner connection string
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'

# Neon "authenticated" role connection string
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

----------------------------------------

TITLE: Basic JSON Record Population in PostgreSQL
DESCRIPTION: Demonstrates inserting data into the employees table by converting a JSON object to a record using json_populate_record with a NULL base record.

LANGUAGE: sql
CODE:
INSERT INTO employees
SELECT *
FROM json_populate_record(
    NULL::employees,
    '{"id": "123", "name": "John Doe", "department": "Engineering", "salary": "75000"}'
)
RETURNING *;

----------------------------------------

TITLE: Go Database Connection
DESCRIPTION: Example of connecting to Neon using Go with the lib/pq driver.

LANGUAGE: go
CODE:
// Go example
package main
import (
    "database/sql"
    "fmt"
    "log"
    "os"

    _ "github.com/lib/pq"
    "github.com/joho/godotenv"
)

func main() {
    err := godotenv.Load()
    if err != nil {
        log.Fatalf("Error loading .env file: %v", err)
    }

    connStr := os.Getenv("DATABASE_URL")
    if connStr == "" {
        panic("DATABASE_URL environment variable is not set")
    }

    db, err := sql.Open("postgres", connStr)
    if err != nil {
        panic(err)
    }
    defer db.Close()

    var version string
    if err := db.QueryRow("select version()").Scan(&version); err != nil {
        panic(err)
    }
    fmt.Printf("version=%s\n", version)
}

----------------------------------------

TITLE: Running Deno Application Locally
DESCRIPTION: Commands to set the DATABASE_URL environment variable and run the Deno application locally with necessary permissions.

LANGUAGE: bash
CODE:
export DATABASE_URL=YOUR_NEON_CONNECTION_STRING
deno run --allow-env --allow-net server.ts

----------------------------------------

TITLE: SQL Server ISNULL Function Syntax
DESCRIPTION: Demonstrates the syntax of SQL Server's ISNULL function, which replaces NULL values with a specified replacement value.

LANGUAGE: php
CODE:
ISNULL(expression, replacement)

----------------------------------------

TITLE: Creating and Activating a Python Virtual Environment
DESCRIPTION: Sets up an isolated Python environment for the project and activates it. This ensures project dependencies are contained.

LANGUAGE: bash
CODE:
python -m venv neon-django-ai-marketplace
source neon-django-ai-marketplace/bin/activate  # On Windows, use `neon-django-ai-marketplace\Scripts\activate`

----------------------------------------

TITLE: Connecting to PostgreSQL Server
DESCRIPTION: Shows how to connect to PostgreSQL server using psql command-line utility.

LANGUAGE: bash
CODE:
psql -U postgres

----------------------------------------

TITLE: Creating a Products Table in PostgreSQL
DESCRIPTION: This SQL statement creates a table named 'products' with columns for id, name, price, and status. It uses SERIAL for auto-incrementing id and sets default values and constraints.

LANGUAGE: sql
CODE:
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price NUMERIC(10, 2) NOT NULL,
    status BOOLEAN NOT NULL DEFAULT true
);

----------------------------------------

TITLE: Setting Up Convex Project Directory
DESCRIPTION: Bash commands to create a new directory for the Convex project and navigate into it.

LANGUAGE: bash
CODE:
mkdir convex-neon-integration
cd convex-neon-integration

----------------------------------------

TITLE: Creating pgvector Extension in Neon Postgres
DESCRIPTION: SQL command to create the pgvector extension in a Neon Postgres database. This is required for working with vector embeddings.

LANGUAGE: SQL
CODE:
CREATE EXTENSION vector;

----------------------------------------

TITLE: Practical Example of SELECT DISTINCT with Film Rental Rates
DESCRIPTION: Demonstrates a practical use of SELECT DISTINCT to find unique rental rates from the 'film' table in a sample database.

LANGUAGE: sql
CODE:
SELECT DISTINCT
  rental_rate
FROM
  film
ORDER BY
  rental_rate;

----------------------------------------

TITLE: Secure Python Connection with psycopg2
DESCRIPTION: Example of establishing a secure connection to Neon using Python's psycopg2 library with SSL/TLS verification enabled.

LANGUAGE: python
CODE:
import psycopg2

conn = psycopg2.connect(
    dbname='dbname',
    user='alex',
    password='AbC123dEf',
    host='ep-cool-darkness-123456.us-east-2.aws.neon.tech',
    port='5432',
    sslmode='verify-full',
    sslrootcert='/path/to/your/root.crt'
)

----------------------------------------

TITLE: Listing Projects with Personal API Key
DESCRIPTION: Shows how to list projects using a personal API key, requiring explicit organization ID specification.

LANGUAGE: bash
CODE:
curl --request GET \
     --url 'https://console.neon.tech/api/v2/projects?org_id=org-example-12345678' \
     --header 'authorization: Bearer $PERSONAL_API_KEY'

----------------------------------------

TITLE: Modifying Role Attributes with ALTER ROLE in PostgreSQL
DESCRIPTION: This snippet demonstrates the basic syntax for using ALTER ROLE to modify a role's attributes, such as making a role a superuser or setting a password expiration date.

LANGUAGE: SQL
CODE:
ALTER ROLE role_name [WITH] option;

LANGUAGE: SQL
CODE:
alter role calf superuser;

LANGUAGE: SQL
CODE:
alter role calf
valid until '2050-01-01';

----------------------------------------

TITLE: Building and Serving the E-commerce Application
DESCRIPTION: Commands to build the Next.js application and start the production server for testing.

LANGUAGE: bash
CODE:
yarn build && yarn serve

----------------------------------------

TITLE: Establishing PostgreSQL Database Connection in Python
DESCRIPTION: Creates a new connection to PostgreSQL database using psycopg2

LANGUAGE: python
CODE:
conn = psycopg2.connect(config)

----------------------------------------

TITLE: Granting Schema Access Permissions
DESCRIPTION: SQL commands to grant necessary schema and table access permissions to the replication role.

LANGUAGE: sql
CODE:
GRANT USAGE ON SCHEMA public TO replication_user;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO replication_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO replication_user;

----------------------------------------

TITLE: Querying Project-Level Granular Metrics with Neon API
DESCRIPTION: This snippet demonstrates how to fetch project-level granular consumption metrics for an organization using the Neon API. It specifies a date range, granularity, and limit for the metrics.

LANGUAGE: bash
CODE:
curl --request GET \
     --url 'https://console.neon.tech/api/v2/consumption_history/projects?limit=10&from=2024-06-30T00%3A00%3A00Z&to=2024-07-02T00%3A00%3A00Z&granularity=hourly&org_id=org-ocean-art-12345678' \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $ORG_API_KEY'

----------------------------------------

TITLE: Fetching First Row Example
DESCRIPTION: Query demonstrating how to fetch the first row from the film table ordered by title.

LANGUAGE: sql
CODE:
SELECT
    film_id,
    title
FROM
    film
ORDER BY
    title
FETCH FIRST ROW ONLY;

----------------------------------------

TITLE: Creating Temporary Table Syntax
DESCRIPTION: Demonstrates how to create a temporary table using TEMP keyword

LANGUAGE: sql
CODE:
CREATE TEMP TABLE new_table_name
AS query;

----------------------------------------

TITLE: Setting PostgreSQL User Password Expiration Example
DESCRIPTION: This SQL example sets the expiration date for the password of the 'bob' user to December 31, 2050 using the ALTER ROLE statement with VALID UNTIL clause.

LANGUAGE: sql
CODE:
ALTER ROLE bob
VALID UNTIL 'December 31, 2050';

----------------------------------------

TITLE: PostgreSQL Data Verification Query
DESCRIPTION: SQL command to verify the inserted data in the PostgreSQL database.

LANGUAGE: sql
CODE:
SELECT * FROM students;

----------------------------------------

TITLE: Creating Referral Codes Table in SQL
DESCRIPTION: SQL command to create the 'referral_codes' table for managing referral codes in the database.

LANGUAGE: sql
CODE:
CREATE TABLE referral_codes (
    code_id SERIAL PRIMARY KEY,
    referrer_id INT REFERENCES users(user_id),
    code VARCHAR(10) UNIQUE NOT NULL,
    times_used INT DEFAULT 0,
    max_uses INT DEFAULT 10,
    points_per_referral INT DEFAULT 100,
    expires_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT valid_points CHECK (points_per_referral > 0)
);

----------------------------------------

TITLE: Value Swapping using INOUT Parameters
DESCRIPTION: Function demonstrating INOUT parameters by swapping two integer values. The function accepts two integers and returns their swapped values.

LANGUAGE: plpgsql
CODE:
create or replace function swap(
	inout x int,
	inout y int
)
language plpgsql
as $$
begin
   select x,y into y,x;
end; $$;

----------------------------------------

TITLE: Basic BOOL_AND() Query Example
DESCRIPTION: Simple query demonstrating how to use BOOL_AND() to check if all projects are active.

LANGUAGE: sql
CODE:
SELECT
  BOOL_AND(active)
FROM
  projects;

----------------------------------------

TITLE: Creating Subscription for Logical Replication in Neon
DESCRIPTION: SQL command to create a subscription in the Neon destination database to receive replicated data from the AWS RDS PostgreSQL source.

LANGUAGE: sql
CODE:
CREATE SUBSCRIPTION my_subscription CONNECTION 'postgresql://postgres:password@database-1.czmwaio8k05k.us-east-2.rds.amazonaws.com/postgres' PUBLICATION my_publication;

----------------------------------------

TITLE: Dynamically Accessing JSON Values by Key in PostgreSQL
DESCRIPTION: Shows how to dynamically access values corresponding to each key retrieved using jsonb_object_keys().

LANGUAGE: sql
CODE:
SELECT
    id,
    key,
    info->key AS value
FROM
    person,
    jsonb_object_keys(info) AS key;

----------------------------------------

TITLE: Configuring SSL Mode in Neon Connection String
DESCRIPTION: Demonstrates how to append the sslmode parameter to a Neon connection string to specify the desired security level.

LANGUAGE: text
CODE:
postgresql://[user]:[password]@[neon_hostname]/[dbname]?sslmode=verify-full

----------------------------------------

TITLE: Creating and Populating Weather Data Table
DESCRIPTION: Creates a sample weather_data table with temperature readings and populates it with test data across different cities and dates.

LANGUAGE: sql
CODE:
CREATE TABLE weather_data (
  date DATE,
  city TEXT,
  temperature NUMERIC
);

INSERT INTO weather_data (date, city, temperature) VALUES
  ('2024-03-01', 'New York', 5.5),
  ('2024-03-01', 'Los Angeles', 22.0),
  ('2024-03-01', 'Chicago', 2.0),
  ('2024-03-02', 'New York', 7.0),
  ('2024-03-02', 'Los Angeles', 23.5),
  ('2024-03-02', 'Chicago', 3.5),
  ('2024-03-03', 'New York', 6.5),
  ('2024-03-03', 'Los Angeles', 21.5),
  ('2024-03-03', 'Chicago', 1.0);

----------------------------------------

TITLE: Specifying PostgreSQL bin Directory Path in XML
DESCRIPTION: This XML snippet shows the typical path to the PostgreSQL bin directory on Windows. The version number is represented as a placeholder.

LANGUAGE: xml
CODE:
C:\Program Files\PostgreSQL\<version>\bin

----------------------------------------

TITLE: Timestamp DEFAULT Example
DESCRIPTION: Example of using DEFAULT with TIMESTAMP columns to automatically record creation times.

LANGUAGE: sql
CODE:
CREATE TABLE logs(
   id SERIAL PRIMARY KEY,
   message TEXT NOT NULL,
   created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

----------------------------------------

TITLE: Querying Timeseries Data from TimescaleDB Hypertable
DESCRIPTION: This SQL query retrieves all rows from the stock_prices hypertable where the timestamp is after a specific date.

LANGUAGE: sql
CODE:
SELECT * FROM stock_prices WHERE ts >= '2025-02-22';

----------------------------------------

TITLE: Revoking Privileges on Tables in PostgreSQL
DESCRIPTION: This SQL snippet shows the syntax for revoking privileges on one or more tables from a role in PostgreSQL. It allows specifying individual privileges or revoking all privileges, and can target specific tables or all tables in a schema.

LANGUAGE: sql
CODE:
REVOKE privilege | ALL
ON TABLE table_name |  ALL TABLES IN SCHEMA schema_name
FROM role_name;

----------------------------------------

TITLE: Inserting Sample Employee Data
DESCRIPTION: Inserts test data into the employees table with initial salary values.

LANGUAGE: sql
CODE:
INSERT INTO employees(name, salary)
VALUES
   ('John Doe', 70000),
   ('Jane Doe', 80000)
RETURNING *;

----------------------------------------

TITLE: Simple Counter Loop Example
DESCRIPTION: Shows how to implement a basic counter loop that prints numbers 1 through 5 using PL/pgSQL.

LANGUAGE: sql
CODE:
do $$

declare
    counter int := 0;
begin

  loop
  	counter = counter + 1;
	raise notice '%', counter;

	if counter = 5 then
		exit;
	end if;

  end loop;

end;

$$;

----------------------------------------

TITLE: Creating Table for Vector Embeddings
DESCRIPTION: SQL command to create a table for storing vector embeddings in Neon Postgres. This table is designed for the Wikipedia vector embeddings dataset.

LANGUAGE: SQL
CODE:
CREATE TABLE IF NOT EXISTS public.articles (
    id INTEGER NOT NULL PRIMARY KEY,
    url TEXT,
    title TEXT,
    content TEXT,
    title_vector vector(1536),
    content_vector vector(1536),
    vector_id INTEGER
);

----------------------------------------

TITLE: Basic MAKE_INTERVAL Syntax
DESCRIPTION: The core syntax for the MAKE_INTERVAL function showing all possible parameters. Each parameter is optional and defaults to zero.

LANGUAGE: sql
CODE:
MAKE_INTERVAL ( [ years int [, months int [, weeks int [, days int [, hours int [, mins int [, secs double precision ]]]]]]] ) → interval

----------------------------------------

TITLE: Creating a Database with Neon API
DESCRIPTION: This cURL command demonstrates how to create a new database using the Neon API. It sends a POST request to create a database named 'mydb' owned by 'casey' in a specific project and branch.

LANGUAGE: bash
CODE:
curl 'https://console.neon.tech/api/v2/projects/hidden-cell-763301/branches/br-blue-tooth-671580/databases' \
  -H 'Accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY" \
  -H 'Content-Type: application/json' \
  -d '{
  "database": {
    "name": "mydb",
    "owner_name": "casey"
  }
}' | jq

----------------------------------------

TITLE: Connecting to Neon Postgres with Endpoint ID Option
DESCRIPTION: This snippet demonstrates how to include the endpoint ID as an option in the Postgres connection string when connecting to Neon. This is a workaround for older Postgres clients that don't support SNI.

LANGUAGE: text
CODE:
postgresql://[user]:[password]@[neon_hostname]/[dbname]?options=endpoint%3D[endpoint-id]

----------------------------------------

TITLE: Retrieving First Two Characters with PostgreSQL LEFT()
DESCRIPTION: This example shows how to use the LEFT() function to get the first two characters of the string 'ABC'.

LANGUAGE: sql
CODE:
SELECT LEFT('ABC',2);

----------------------------------------

TITLE: Grouping and Aggregating with json_build_object() in SQL
DESCRIPTION: This query groups products by category and uses json_build_object() to create a JSON object containing the total price for each category.

LANGUAGE: sql
CODE:
SELECT
   category,
   json_build_object(
       'total_price', sum(price)
   ) AS category_total_price
FROM products
GROUP BY category;

----------------------------------------

TITLE: Creating Rails Development Database
DESCRIPTION: Loads the DATABASE_URL environment variable and creates the development database using Rails commands.

LANGUAGE: shell
CODE:
# Load the DATABASE_URL into your session
source .env

# Create the development database
bin/rails db:create

----------------------------------------

TITLE: Defining PostgreSQL ARRAY_AGG Function Syntax
DESCRIPTION: Shows the basic syntax of the ARRAY_AGG() function, including the optional ORDER BY clause for sorting array elements.

LANGUAGE: css
CODE:
ARRAY_AGG(expression [ORDER BY [sort_expression {ASC | DESC}], [...])

----------------------------------------

TITLE: Verifying Subscription Creation in Neon
DESCRIPTION: SQL query to check if the subscription was successfully created in the Neon destination database.

LANGUAGE: sql
CODE:
SELECT * FROM pg_stat_subscription;

----------------------------------------

TITLE: Updating Project IP Restrictions via API
DESCRIPTION: CURL command to update a project's IP allowlist and protected branch settings using the Neon API.

LANGUAGE: bash
CODE:
curl -X PATCH \
     https://console.neon.tech/api/v2/projects/falling-salad-31638542 \
     -H 'accept: application/json' \
     -H 'authorization: Bearer $NEON_API_KEY' \
     -H 'content-type: application/json' \
     -d '
{
  "project": {
    "settings": {
      "allowed_ips": {
        "protected_branches_only": true,
        "ips": [
          "203.0.113.0", "203.0.113.1"
        ]
      }
    }
  }
}' | jq

----------------------------------------

TITLE: Changing Database Attributes with ALTER DATABASE in PostgreSQL
DESCRIPTION: This snippet demonstrates the syntax for changing database attributes using the ALTER DATABASE statement. It allows modification of options such as IS_TEMPLATE, CONNECTION LIMIT, and ALLOW_CONNECTIONS.

LANGUAGE: sql
CODE:
ALTER DATABASE name WITH option;

----------------------------------------

TITLE: Context Manager Transaction Handling in PostgreSQL Python
DESCRIPTION: Shows how to use context managers with psycopg2 for cleaner transaction management

LANGUAGE: python
CODE:
with psycopg2.connect(config) as conn:
    with conn.cursor() as cur:
        cur.execute(sql)

LANGUAGE: python
CODE:
conn = psycopg2.connect(config)

# transaction 1
with conn:
    with conn.cursor() as cur:
        cur.execute(sql)

# transaction 2
with conn:
    with conn.cursor() as cur:
        cur.execute(sql)

conn.close()

----------------------------------------

TITLE: PostgreSQL Absolute Value Operator Syntax
DESCRIPTION: Alternative syntax using the @ operator to calculate absolute values in PostgreSQL.

LANGUAGE: sql
CODE:
@ expression

----------------------------------------

TITLE: Handling no_data_found Exception
DESCRIPTION: Shows how to handle cases where a SELECT statement returns no rows using the no_data_found exception handler.

LANGUAGE: sql
CODE:
do
$$
declare
	rec record;
	v_film_id int = 2000;
begin
	-- select a film
	select film_id, title
	into strict rec
	from film
	where film_id = v_film_id;
        -- catch exception
	exception
	   when no_data_found then
	      raise exception 'film % not found', v_film_id;
end;
$$;

----------------------------------------

TITLE: Inserting Test Data for Replication in PostgreSQL
DESCRIPTION: SQL command to insert additional test data into the 'playing_with_neon' table for replication testing.

LANGUAGE: sql
CODE:
INSERT INTO playing_with_neon(name, value)
SELECT LEFT(md5(i::TEXT), 10), random() FROM generate_series(1, 10) s(i);

----------------------------------------

TITLE: Creating GiST Index for Spatial Data
DESCRIPTION: Demonstrates creation of a GiST index for geographical data using PostGIS extension. GiST indexes are useful for complex data types and spatial queries.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS postgis;

CREATE TABLE locations (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    location GEOGRAPHY(POINT, 4326)
);

INSERT INTO locations (name, location) VALUES
    ('Eiffel Tower', ST_MakePoint(2.2945, 48.8584)),
    ('Statue of Liberty', ST_MakePoint(-74.0445, 40.6892)),
    ('Sydney Opera House', ST_MakePoint(151.2153, -33.8568));

CREATE INDEX idx_locations_gist ON locations USING gist (location);

----------------------------------------

TITLE: Listing Triggers for a Table Using psql Command
DESCRIPTION: This psql command displays the structure of the 'employees' table along with its associated triggers.

LANGUAGE: sql
CODE:
\dS employees

----------------------------------------

TITLE: Converting Timestamp Literal to String
DESCRIPTION: Shows how to convert a specific timestamp literal to a formatted time string.

LANGUAGE: sql
CODE:
SELECT
    TO_CHAR(
        TIMESTAMP '2017-08-18 22:30:59',
        'HH24:MI:SS'
    );

----------------------------------------

TITLE: Using lead() to Calculate Next Shipment Date in PostgreSQL
DESCRIPTION: Demonstrates how to use lead() to determine the next scheduled shipment date for each product and calculate the days until the next shipment.

LANGUAGE: sql
CODE:
WITH shipments AS (
  SELECT 1 AS product_id, date '2023-01-01' AS ship_date
  UNION ALL
  SELECT 1 AS product_id, date '2023-01-15' AS ship_date
  UNION ALL
  SELECT 2 AS product_id, date '2023-01-05' AS ship_date
  UNION ALL
  SELECT 1 AS product_id, date '2023-02-01' AS ship_date
  UNION ALL
  SELECT 2 AS product_id, date '2023-01-20' AS ship_date
)
SELECT
  product_id,
  ship_date,
  lead(ship_date) OVER (PARTITION BY product_id ORDER BY ship_date) AS next_ship_date,
  lead(ship_date) OVER (PARTITION BY product_id ORDER BY ship_date) - ship_date AS days_until_next_shipment
FROM shipments;

----------------------------------------

TITLE: Calculating Total Rental Days with PostgreSQL SUM()
DESCRIPTION: Uses SUM() with an expression to calculate the total rental days from the rental table.

LANGUAGE: sql
CODE:
SELECT
  SUM(return_date - rental_date)
FROM
  rental;

----------------------------------------

TITLE: Defining project dependencies in requirements.txt
DESCRIPTION: List of required Python libraries for the project, including AutoGen, Neon API, and other dependencies.

LANGUAGE: text
CODE:
autogen-agentchat[openai]
autogen-ext[openai]
python-dotenv
neon-api
psycopg2-binary

----------------------------------------

TITLE: Defining Todo Model in C#
DESCRIPTION: C# class definition for the Todo model, representing the structure of a todo item in the database.

LANGUAGE: csharp
CODE:
namespace TodoApi.Models
{
    public class Todo
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public bool IsComplete { get; set; }
    }
}

----------------------------------------

TITLE: Creating a New Role in PostgreSQL
DESCRIPTION: This SQL command creates a new role named 'jim' with LOGIN and PASSWORD attributes in PostgreSQL.

LANGUAGE: sql
CODE:
CREATE ROLE jim LOGIN PASSWORD 'YourPassword';

----------------------------------------

TITLE: Creating Table with Generated Column for Net Price Calculation in PostgreSQL
DESCRIPTION: Creates a 'products' table with a generated column 'net_price' that calculates the final price based on list price, tax, and discount. This example shows how to use generated columns for complex calculations.

LANGUAGE: sql
CODE:
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    list_price DECIMAL(10, 2) NOT NULL,
    tax DECIMAL(5, 2) DEFAULT 0,
    discount DECIMAL(5, 2) DEFAULT 0,
    net_price DECIMAL(10, 2) GENERATED ALWAYS AS ((list_price + (list_price * tax / 100)) - (list_price * discount / 100)) STORED
);

----------------------------------------

TITLE: Defining a PL/pgSQL Function with Returns SetOf in PostgreSQL
DESCRIPTION: This snippet demonstrates the syntax for creating a function that returns a set of rows using the 'returns setof' option. It includes placeholders for function name, parameters, and the query to return rows.

LANGUAGE: sql
CODE:
create or replace function function_name(parameters)
returns setof row_structure
as
$$
   -- logic
   -- ...
   -- return one or more rows
   return query select_query;
$$ language plpgsql;

----------------------------------------

TITLE: Resetting a Development Branch with Neon CLI
DESCRIPTION: Shows how to reset a development branch to the latest state of the parent branch using the Neon CLI. This command updates the schema and data to match the parent branch.

LANGUAGE: bash
CODE:
neon branches reset dev/alex --parent

----------------------------------------

TITLE: Inserting Sample Data into PostgreSQL Table
DESCRIPTION: This SQL statement inserts two rows of sample data into the 'contacts' table.

LANGUAGE: sql
CODE:
INSERT INTO contacts(first_name, last_name, email)
VALUES('John','Doe','john.doe@example.com'),
      ('David','William','david.william@example.com')
RETURNING *;

----------------------------------------

TITLE: Basic PostgreSQL EXP() Function Syntax
DESCRIPTION: Shows the fundamental syntax of the EXP() function for calculating exponential values.

LANGUAGE: plaintextsql
CODE:
EXP(n)

----------------------------------------

TITLE: Setting Connection Timeout for Neon PostgreSQL Connection
DESCRIPTION: This snippet shows how to add a 'connect_timeout' parameter to the Neon PostgreSQL connection string. This can help avoid connection timeouts when connecting to an idle compute instance.

LANGUAGE: ini
CODE:
DATABASE_URL="postgresql://[user]:[password]@[neon_hostname]/[dbname]?sslmode=require&connect_timeout=10"

----------------------------------------

TITLE: Deleting a Branch with Neon API (HTTP)
DESCRIPTION: HTTP request to delete a specific branch in a Neon project.

LANGUAGE: http
CODE:
DELETE /projects/{project_id}/branches/{branch_id}

----------------------------------------

TITLE: Connecting to Neon Database Using psql Command
DESCRIPTION: Example of using the psql command-line tool to connect to a Neon database using a connection string.

LANGUAGE: bash
CODE:
psql postgresql://alex:AbC123dEf@ep-cool-darkness-a1b2c3d4-pooler.us-east-2.aws.neon.tech/dbname?sslmode=require

----------------------------------------

TITLE: Development Branch Reset in CI/CD
DESCRIPTION: Example command for resetting a development branch as part of a CI/CD workflow.

LANGUAGE: bash
CODE:
neon branches reset dev-branch --parent

----------------------------------------

TITLE: Creating a Git Branch for Preview Deployment
DESCRIPTION: Commands for creating and working with a Git branch to trigger a preview deployment.

LANGUAGE: bash
CODE:
cd myapp
git checkout -b patch-1

----------------------------------------

TITLE: Updating a Database with Neon API
DESCRIPTION: This cURL command demonstrates how to update an existing database using the Neon API. It sends a PATCH request to change the name of a database from 'mydb' to 'database1'.

LANGUAGE: bash
CODE:
curl 'https://console.neon.tech/api/v2/projects/hidden-cell-763301/branches/br-blue-tooth-671580/databases/mydb' \
  -H 'Accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY" \
  -H 'Content-Type: application/json' \
  -d '{
  "database": {
    "name": "database1"
  }
}' | jq

----------------------------------------

TITLE: Setting Random Seed for Reproducibility in Postgres SQL
DESCRIPTION: Shows how to use the setseed() function to set a seed for the random number generator, ensuring reproducible random numbers across sessions.

LANGUAGE: sql
CODE:
SELECT setseed(0.3);
SELECT random();

----------------------------------------

TITLE: Checking Subscription Status in Neon
DESCRIPTION: SQL query to check the status of the subscription in the Neon destination database, including the last message receipt time.

LANGUAGE: sql
CODE:
SELECT subname, received_lsn, latest_end_lsn, last_msg_receipt_time FROM pg_catalog.pg_stat_subscription;

----------------------------------------

TITLE: Using PostgreSQL SUM() with HAVING Clause
DESCRIPTION: Filters group sums based on a condition using SUM() in the HAVING clause.

LANGUAGE: sql
CODE:
SELECT
  customer_id,
  SUM (amount) AS total
FROM
  payment
GROUP BY
  customer_id
HAVING
  SUM(amount) > 200
ORDER BY
  total DESC

----------------------------------------

TITLE: Prisma Client Configuration for Neon
DESCRIPTION: Setup of Prisma client with Neon adapter and WebSocket support for database operations.

LANGUAGE: typescript
CODE:
// File: lib/prisma/index.ts

import { neonConfig, Pool } from '@neondatabase/serverless';
import { PrismaNeon } from '@prisma/adapter-neon';
import { PrismaClient } from '@prisma/client';
import { WebSocket } from 'ws';

declare global {
  var prisma: PrismaClient | undefined;
}

const connectionString = `${process.env.DATABASE_URL}`;

neonConfig.webSocketConstructor = WebSocket;
neonConfig.poolQueryViaFetch = true;

const pool = new Pool({ connectionString });
const adapter = new PrismaNeon(pool);
const prisma = global.prisma || new PrismaClient({ adapter });

if (process.env.NODE_ENV === 'development') global.prisma = prisma;

export default prisma;

----------------------------------------

TITLE: Prisma Client Configuration for Neon
DESCRIPTION: Setup of Prisma client with Neon adapter and WebSocket support for database operations.

LANGUAGE: typescript
CODE:
// File: lib/prisma/index.ts

import { neonConfig, Pool } from '@neondatabase/serverless';
import { PrismaNeon } from '@prisma/adapter-neon';
import { PrismaClient } from '@prisma/client';
import { WebSocket } from 'ws';

declare global {
  var prisma: PrismaClient | undefined;
}

const connectionString = `${process.env.DATABASE_URL}`;

neonConfig.webSocketConstructor = WebSocket;
neonConfig.poolQueryViaFetch = true;

const pool = new Pool({ connectionString });
const adapter = new PrismaNeon(pool);
const prisma = global.prisma || new PrismaClient({ adapter });

if (process.env.NODE_ENV === 'development') global.prisma = prisma;

export default prisma;

----------------------------------------

TITLE: Enabling All Triggers on a Table in PostgreSQL
DESCRIPTION: Demonstrates how to enable all triggers associated with the 'employees' table using the ALL keyword.

LANGUAGE: sql
CODE:
ALTER TABLE employees
ENABLE TRIGGER ALL;

----------------------------------------

TITLE: Using psql Command to List Table Indexes
DESCRIPTION: This psql command displays detailed information about a table, including its indexes, constraints, and triggers.

LANGUAGE: plaintext
CODE:
\d customer

----------------------------------------

TITLE: Removing VPC Endpoint
DESCRIPTION: Command to delete an existing VPC endpoint from a specific Neon organization. Note that removed endpoints cannot be added back.

LANGUAGE: bash
CODE:
neon vpc endpoint remove vpce-1234567890abcdef0 --org-id org-bold-bonus-12345678

----------------------------------------

TITLE: Creating a Publication for the Users Table
DESCRIPTION: SQL command to create a publication named 'users_publication' for the 'users' table in Neon.

LANGUAGE: sql
CODE:
CREATE PUBLICATION users_publication FOR TABLE users;

----------------------------------------

TITLE: Querying Pet Names Using jsonb_path_query_array
DESCRIPTION: Demonstrates how to extract pet names from nested JSONB data using jsonb_path_query_array().

LANGUAGE: sql
CODE:
SELECT jsonb_path_query_array(data, '$.pets[*].name') AS employee_pet_names
FROM employees;

----------------------------------------

TITLE: Creating Function to List Triggers for Specific Table in PostgreSQL
DESCRIPTION: This PL/pgSQL function creates a user-defined function named get_triggers(text) that accepts a table name and returns all the triggers of the specified table.

LANGUAGE: plpgsql
CODE:
create or replace function get_triggers(
	p_table_name text
)
returns table (
	table_name text,
	trigger_name text
)
language plpgsql
as
$$
begin
	return query select
	  event_object_table::text AS table_name,
	  trg.trigger_name::text
	from
	  information_schema.triggers trg
	where
	   event_object_table = p_table_name
	group by
	  table_name,
	  trg.trigger_name
	order by
	  table_name,
	  trg.trigger_name;
end;
$$;

----------------------------------------

TITLE: Querying and Reranking Embeddings
DESCRIPTION: Performs similarity search on embeddings and reranks results using the local reranking model.

LANGUAGE: sql
CODE:
\set query 'what is [...]? how does it work?'

with ranked as (
  select
    id, doc_id, chunk, embedding <=> rag_bge_small_en_v15.embedding_for_query(:'query') as cosine_distance
  from embeddings
  order by cosine_distance
  limit 10
)
select *, rag_jina_reranker_v1_tiny_en.rerank_distance(:'query', chunk)
from ranked
order by rerank_distance;

----------------------------------------

TITLE: PostgreSQL REINDEX Single Index
DESCRIPTION: Command to rebuild a single index by specifying its name.

LANGUAGE: sql
CODE:
REINDEX INDEX index_name;

----------------------------------------

TITLE: Postgres Parameter Updates for Read Replicas
DESCRIPTION: Configuration parameters that are synchronized between primary and read replica computes to ensure proper standby operation. These settings include max_connections, max_prepared_transactions, max_locks_per_transaction, max_wal_senders, and max_worker_processes.

LANGUAGE: sql
CODE:
max_connections
max_prepared_transactions
max_locks_per_transaction
max_wal_senders
max_worker_processes

----------------------------------------

TITLE: Configuring Environment Variables for Database Connection
DESCRIPTION: Adds the Neon database connection string to the .env file for secure database access.

LANGUAGE: bash
CODE:
DATABASE_URL=postgres://your-username:your-password@your-neon-host/your-database

----------------------------------------

TITLE: Basic Table Repack Command
DESCRIPTION: Basic pg_repack command to repack a table in Neon, including required no-superuser-check flag.

LANGUAGE: bash
CODE:
pg_repack -k -h <your_neon_host> -p 5432 -d <your_neon_database> -U <your_neon_username> --table your_table_name

----------------------------------------

TITLE: Creating and Populating a Sample Books Table
DESCRIPTION: This SQL snippet creates a 'books' table and inserts sample data for demonstrating pg_trgm functionality.

LANGUAGE: sql
CODE:
CREATE TABLE books (
    id SERIAL PRIMARY KEY,
    title TEXT
);

INSERT INTO books (title)
VALUES
    ('The Great Gatsby'),
    ('The Grapes of Wrath'),
    ('Great Expectations'),
    ('War and Peace'),
    ('Pride and Prejudice'),
    ('To Kill a Mockingbird'),
    ('1984');

----------------------------------------

TITLE: Partial CUBE with Sales Data
DESCRIPTION: Demonstrates a partial cube operation on sales data, grouping by brand with cube operation on segment.

LANGUAGE: sql
CODE:
SELECT
    brand,
    segment,
    SUM (quantity)
FROM
    sales
GROUP BY
    brand,
    CUBE (segment)
ORDER BY
    brand,
    segment;

----------------------------------------

TITLE: Creating Sample Film Actors Function
DESCRIPTION: Creates a function that returns a set of film records including film_id, title, and actor information without parameters.

LANGUAGE: plpgsql
CODE:
create or replace function get_film_actors()
	returns setof record
as $$
declare
   rec record;
begin
   for rec in select
			film_id,
			title,
            (first_name || ' ' || last_name)::varchar
		from film
		inner join film_actor using(film_id)
		inner join actor using (actor_id)
		order by title
	loop
        return next rec;
	end loop;

	return;
end;
$$
language plpgsql;

----------------------------------------

TITLE: Installing Neon MCP Server in Cursor (MacOS/Linux)
DESCRIPTION: Command to add the Neon MCP Server to Cursor on MacOS or Linux, using npx to run the server with a Neon API key.

LANGUAGE: bash
CODE:
npx -y @neondatabase/mcp-server-neon start <YOUR_NEON_API_KEY>

----------------------------------------

TITLE: Schema Comparison Using Neon API
DESCRIPTION: Example of using the Neon API to compare schemas between branches via cURL request with authentication and filtering.

LANGUAGE: bash
CODE:
curl --request GET \
     --url 'https://console.neon.tech/api/v2/projects/wispy-butterfly-25042691/branches/br-rough-boat-a54bs9yb/compare_schema?base_branch_id=br-royal-star-a54kykl2&db_name=neondb' \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $NEON_API_KEY' | jq -r '.diff'

----------------------------------------

TITLE: Calculating Base-2 Logarithm in PostgreSQL
DESCRIPTION: This snippet demonstrates using the LOG() function to calculate the base-2 logarithm of 8. It utilizes the two-argument form of the function.

LANGUAGE: sql
CODE:
SELECT LOG(2,8);

----------------------------------------

TITLE: String Concatenation in PostgreSQL
DESCRIPTION: Demonstrates string concatenation using the || operator to combine title and description fields

LANGUAGE: sql
CODE:
SELECT title || ' - ' || description AS full_description
FROM books;

LANGUAGE: text
CODE:
                           full_description
----------------------------------------------------------------------
 Postgres Guide - A comprehensive guide to PostgreSQL.

 SQL for Professionals - An in-depth look at advanced SQL techniques.

----------------------------------------

TITLE: Creating a BEFORE DELETE Trigger in PostgreSQL
DESCRIPTION: This snippet shows how to create a trigger and associate it with a trigger function. The trigger is set to execute before DELETE operations on a specified table for each affected row.

LANGUAGE: sql
CODE:
CREATE TRIGGER trigger_name
BEFORE DELETE ON table_name
FOR EACH ROW
EXECUTE FUNCTION trigger_function_name();

----------------------------------------

TITLE: Creating Order Model and Migration in Laravel
DESCRIPTION: Artisan command to generate an Order model with an associated migration file in Laravel.

LANGUAGE: bash
CODE:
php artisan make:model Order -m

----------------------------------------

TITLE: Creating Table with XML Column in PostgreSQL
DESCRIPTION: Creates a table with an identity primary key and XML column for storing XML documents.

LANGUAGE: sql
CODE:
CREATE TABLE person(
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    info XML
);

----------------------------------------

TITLE: Creating a Table in Neon Destination Database
DESCRIPTION: SQL command to create the same 'playing_with_neon' table in the Neon destination database to match the source schema.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS playing_with_neon(id SERIAL PRIMARY KEY, name TEXT NOT NULL, value REAL);

----------------------------------------

TITLE: Implementing Caching for Database Queries in Laravel
DESCRIPTION: Example of using Laravel's cache system to store and retrieve expensive database queries.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Cache;

Route::get('/stats', function () {
    $stats = Cache::remember('site_stats', 3600, function () {
        return [
            'user_count' => User::count(),
            'post_count' => Post::count(),
            'comment_count' => Comment::count(),
        ];
    });

    return view('stats', ['stats' => $stats]);
});

----------------------------------------

TITLE: Inserting Values into the Numbers Table
DESCRIPTION: Inserts multiple rows into the 'numbers' table for GCD calculation examples.

LANGUAGE: sql
CODE:
INSERT INTO numbers (value)
VALUES (30), (45), (60), (90), (120)
RETURNING *;

----------------------------------------

TITLE: Creating Orders Table in PostgreSQL
DESCRIPTION: This SQL snippet creates a table named 'orders' with columns for id, customer_id, total_price, and created_at. The id is set as the primary key with auto-increment functionality.

LANGUAGE: sql
CODE:
CREATE TABLE orders (
  id SERIAL PRIMARY KEY,
  customer_id INT NOT NULL,
  total_price NUMERIC(10,2) NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT NOW()
);

----------------------------------------

TITLE: RANK Function with Price Ordering
DESCRIPTION: Shows how to use RANK() to assign ranks to products based on their prices in descending order.

LANGUAGE: sql
CODE:
SELECT
	product_id,
	product_name,
	price,
	RANK () OVER (
		ORDER BY price DESC
	) price_rank
FROM
	products;

----------------------------------------

TITLE: Truncating Average Rental Rates by Film Category in PostgreSQL
DESCRIPTION: This complex query joins multiple tables to calculate and truncate the average rental rate by film category using the TRUNC() function.

LANGUAGE: sql
CODE:
SELECT
    NAME,
    TRUNC(AVG( rental_rate ),2)
FROM
    film
INNER JOIN film_category
        USING(film_id)
INNER JOIN category
        USING(category_id)
GROUP BY
    NAME
ORDER BY NAME;

----------------------------------------

TITLE: Creating Table with hstore Column
DESCRIPTION: Creates a product table with an hstore column for storing flexible attributes

LANGUAGE: sql
CODE:
CREATE TABLE product (
   id SERIAL PRIMARY KEY,
   name VARCHAR(255),
   attributes HSTORE
);

----------------------------------------

TITLE: Installing Neon CLI in GitHub Actions (Binary)
DESCRIPTION: YAML configuration for downloading and installing the latest Neon CLI binary in GitHub Actions.

LANGUAGE: yaml
CODE:
- name: Install Neon CLI
  run: |
    curl -L https://github.com/neondatabase/neonctl/releases/latest/download/neonctl-linux-amd64 -o /usr/local/bin/neon
    chmod +x /usr/local/bin/neon

----------------------------------------

TITLE: Using Not Equal Operator in PostgreSQL WHERE Clause
DESCRIPTION: Shows how to use the not equal (<>) operator in combination with the LIKE operator to filter rows based on multiple conditions.

LANGUAGE: sql
CODE:
SELECT
  first_name,
  last_name
FROM
  customer
WHERE
  first_name LIKE 'Bra%'
  AND last_name <> 'Motley';

----------------------------------------

TITLE: Creating Branch via Neon API
DESCRIPTION: cURL request example for creating a new branch using the Neon API

LANGUAGE: bash
CODE:
curl 'https://console.neon.tech/api/v2/projects/autumn-disk-484331/branches' \
  -H 'Accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY" \
  -H 'Content-Type: application/json' \
  -d '{
  "endpoints": [
    {
      "type": "read_write"
    }
  ],
  "branch": {
    "parent_id": "br-wispy-dew-591433"
  }
}' | jq

----------------------------------------

TITLE: Listing Table Indexes
DESCRIPTION: Query to display all indexes associated with the address table from pg_indexes view.

LANGUAGE: sql
CODE:
SELECT
  indexname,
  indexdef
FROM
  pg_indexes
WHERE
  tablename = 'address';

----------------------------------------

TITLE: Installing PostgreSQL Extensions via SQL Command
DESCRIPTION: SQL command pattern for installing PostgreSQL extensions in Neon database.

LANGUAGE: sql
CODE:
CREATE EXTENSION

----------------------------------------

TITLE: Drizzle Configuration Setup
DESCRIPTION: Configuration file for Drizzle ORM defining schema location and database credentials

LANGUAGE: typescript
CODE:
import { config } from 'dotenv';
import { defineConfig } from 'drizzle-kit';

config({ path: '.env' });

export default defineConfig({
  schema: './app/db/schema.ts',
  out: './migrations',
  dialect: 'postgresql',
  dbCredentials: {
    url: process.env.DATABASE_URL!,
  },
});

----------------------------------------

TITLE: Dry Run Repack Operation
DESCRIPTION: Command to preview pg_repack operations without executing them.

LANGUAGE: bash
CODE:
pg_repack -k -N -h <your_neon_host> -p 5432 -d <your_neon_database> -U <your_neon_username> --table your_table_name

----------------------------------------

TITLE: Changing Current User Role in PostgreSQL
DESCRIPTION: This SQL command changes the role of the current user to 'bob' using the SET ROLE statement.

LANGUAGE: sql
CODE:
SET ROLE bob;

----------------------------------------

TITLE: Labeled Loop Example
DESCRIPTION: Demonstrates how to use loop labels for explicit loop control in PL/pgSQL.

LANGUAGE: sql
CODE:
do $$

declare
    counter int := 0;
begin

 <<my_loop>>
  loop
  	counter = counter + 1;
	raise notice '%', counter;
	exit my_loop when counter = 5;
  end loop;

end;

$$;

----------------------------------------

TITLE: Copying PostgreSQL Table Structure and Data
DESCRIPTION: This SQL statement creates a new table as an exact copy of an existing table, including both structure and data.

LANGUAGE: sql
CODE:
CREATE TABLE new_table AS
TABLE existing_table;

----------------------------------------

TITLE: Moving Compute to New Branch
DESCRIPTION: Updates endpoint configuration to move compute resources from the current branch to the newly created branch. Requires project_id, endpoint_id of current branch, and branch_id of new branch.

LANGUAGE: bash
CODE:
curl --request PATCH \
     --url https://console.neon.tech/api/v2/projects/%20dark-cell-12604300/endpoints/ep-divine-violet-55990977 \
     --header 'Accept: application/json' \
     --header "Authorization: Bearer $NEON_API_KEY" \
     --header 'Content-Type: application/json' \
     --data '
{
  "endpoint": {
    "branch_id": "br-falling-flower-15986510"
  }
}
' | jq

----------------------------------------

TITLE: Creating and Populating a Postgres Table in Neon
DESCRIPTION: SQL commands to create a 'books_to_read' table and insert sample data into it in a Neon Postgres database.

LANGUAGE: sql
CODE:
CREATE TABLE books_to_read (
    id SERIAL PRIMARY KEY,
    title TEXT,
    author TEXT
);

LANGUAGE: sql
CODE:
INSERT INTO books_to_read (title, author)
VALUES
    ('The Way of Kings', 'Brandon Sanderson'),
    ('The Name of the Wind', 'Patrick Rothfuss'),
    ('Coders at Work', 'Peter Seibel'),
    ('1984', 'George Orwell');

----------------------------------------

TITLE: Defining a Basic Route in Laravel
DESCRIPTION: Example of a basic route in Laravel that fetches all users from the database and returns a view.

LANGUAGE: php
CODE:
use App\Models\User;
use Illuminate\Support\Facades\Route;

Route::get('/users', function () {
    $users = User::all();
    return view('users.index', ['users' => $users]);
});

----------------------------------------

TITLE: Getting Unicode Code Point with ASCII() in PostgreSQL
DESCRIPTION: This example demonstrates how to use the ASCII() function to get the Unicode code point of a UTF-8 character, specifically the Greek letter Omega.

LANGUAGE: text
CODE:
 SELECT
    ASCII( 'Ω' );

----------------------------------------

TITLE: Querying Orders with Related Customer Data
DESCRIPTION: This GraphQL query retrieves order data along with related customer information, demonstrating how StepZen handles relationships between tables.

LANGUAGE: graphql
CODE:
{
  getOrderList {
    id
    shippingcost
    customer {
      name
      email
    }
  }
}

----------------------------------------

TITLE: Creating a Logical Replication Slot in Postgres
DESCRIPTION: SQL command to create a logical replication slot named 'airbyte_slot' using the pgoutput plugin in Postgres.

LANGUAGE: sql
CODE:
SELECT pg_create_logical_replication_slot('airbyte_slot', 'pgoutput');

----------------------------------------

TITLE: Renaming Multiple Columns in PostgreSQL
DESCRIPTION: Example of using multiple ALTER TABLE RENAME COLUMN statements to rename two columns in the customers table.

LANGUAGE: sql
CODE:
ALTER TABLE customers
RENAME COLUMN name TO customer_name;

ALTER TABLE customers
RENAME COLUMN phone TO contact_phone;

----------------------------------------

TITLE: PostgreSQL MAX Function with Subquery
DESCRIPTION: Demonstrates how to find films with maximum replacement cost using MAX() function in a subquery.

LANGUAGE: sql
CODE:
SELECT
  film_id,
  title
FROM
  film
WHERE
  replacement_cost =(
    SELECT
      MAX(replacement_cost)
    FROM
      film
  )
ORDER BY
  title;

----------------------------------------

TITLE: Basic Usage of PostgreSQL LENGTH() Function
DESCRIPTION: Demonstrates the basic syntax and usage of the LENGTH() function to count characters in a string literal.

LANGUAGE: sql
CODE:
SELECT
  LENGTH ('PostgreSQL Tutorial');

----------------------------------------

TITLE: Database Record Operations with Eloquent
DESCRIPTION: Examples of creating and saving database records using Laravel's Eloquent ORM, demonstrating basic CRUD operations.

LANGUAGE: php
CODE:
$book = new Book;
$book->title = 'Sample Book';
$book->author_id = 1;
$book->publication_year = 2021;
$book->save();

----------------------------------------

TITLE: Retrieving Top 10 Longest Rental Durations Using AGE()
DESCRIPTION: Uses the AGE() function in a more complex query to calculate rental durations from a rental table, ordering by the longest durations.

LANGUAGE: sql
CODE:
SELECT
  rental_id,
  customer_id,
  AGE(return_date, rental_date) AS duration
FROM
  rental
WHERE
  return_date IS NOT NULL
ORDER BY
  duration DESC
LIMIT
  10;

----------------------------------------

TITLE: Finding GCD of Three Numbers Using PostgreSQL GCD() Function
DESCRIPTION: Shows how to use the GCD() function twice to find the greatest common divisor of three numbers (30, 45, and 60).

LANGUAGE: sql
CODE:
SELECT gcd(gcd(30,45), 60) result;

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Sample environment variables setup for database connections and Google OAuth credentials.

LANGUAGE: bash
CODE:
# Database owner connection string
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'

# Neon "authenticated" role connection string
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

# Google OAuth credentials
GOOGLE_CLIENT_ID='<YOUR_GOOGLE_CLIENT_ID>'
GOOGLE_CLIENT_SECRET='<YOUR_GOOGLE_CLIENT_SECRET>'

----------------------------------------

TITLE: Exporting Render Database with pg_dump
DESCRIPTION: This command uses pg_dump to export data from a Render database in custom format, which is compressed and suitable for input into pg_restore. It specifies the connection URL, schema, and output file.

LANGUAGE: bash
CODE:
pg_dump -Fc -v -d <render_external_database_url> --schema=public -f render_dump.bak

----------------------------------------

TITLE: Creating TodoFactory for Testing
DESCRIPTION: Generate a factory for the Todo model to create sample data for testing.

LANGUAGE: bash
CODE:
php artisan make:factory TodoFactory --model=Todo

LANGUAGE: php
CODE:
<?php

namespace Database\Factories;

use App\Models\Todo;
use App\Models\User;
use Illuminate\Database\Eloquent\Factories\Factory;

class TodoFactory extends Factory
{
    protected $model = Todo::class;

    public function definition()
    {
        return [
            'user_id' => User::factory(),
            'title' => $this->faker->sentence(4),
            'description' => $this->faker->paragraph(),
            'is_completed' => $this->faker->boolean(20),
            'created_at' => $this->faker->dateTimeBetween('-1 month', 'now'),
            'updated_at' => $this->faker->dateTimeBetween('-1 month', 'now'),
        ];
    }

    public function completed()
    {
        return $this->state(['is_completed' => true]);
    }

    public function incomplete()
    {
        return $this->state(['is_completed' => false]);
    }
}

----------------------------------------

TITLE: Querying Domain Information
DESCRIPTION: SQL query to retrieve all domains in a specific schema from the PostgreSQL system catalogs.

LANGUAGE: sql
CODE:
SELECT typname
FROM pg_catalog.pg_type
  JOIN pg_catalog.pg_namespace
  	ON pg_namespace.oid = pg_type.typnamespace
WHERE
	typtype = 'd' and nspname = 'public';

----------------------------------------

TITLE: Basic RAISE Statement Syntax in PL/pgSQL
DESCRIPTION: Demonstrates the basic syntax of the RAISE statement for reporting messages with different severity levels.

LANGUAGE: sql
CODE:
raise level format;

----------------------------------------

TITLE: Creating Product Prices Table
DESCRIPTION: Creates a table to store product prices with various decimal scales for demonstration purposes.

LANGUAGE: sql
CODE:
CREATE TABLE product_prices (
    product_id SERIAL PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    price NUMERIC NOT NULL
);

----------------------------------------

TITLE: Upgrading pgvector Extension in Neon
DESCRIPTION: This SQL command updates the pgvector extension to version 0.5.0 in a Neon database. It's used to access new features like HNSW indexing and faster distance functions.

LANGUAGE: sql
CODE:
ALTER EXTENSION vector UPDATE TO '0.5.0';

----------------------------------------

TITLE: Initializing Neon CLI Authentication
DESCRIPTION: Basic command to authenticate with Neon CLI

LANGUAGE: bash
CODE:
neonctl auth

----------------------------------------

TITLE: Installing pg_session_jwt Postgres Extension
DESCRIPTION: SQL command to install the pg_session_jwt extension required for JWT session handling in Postgres.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pg_session_jwt;

----------------------------------------

TITLE: Finding Intersecting Roads with PostGIS
DESCRIPTION: SQL query to find intersecting roads using the ST_Intersects function. The query filters out duplicate pairs by comparing road IDs.

LANGUAGE: sql
CODE:
SELECT a.name, b.name
FROM roads a AS name_A, roads b AS name_B
WHERE a.id < b.id AND ST_Intersects(a.path, b.path);

----------------------------------------

TITLE: Creating a Database in Neon Postgres
DESCRIPTION: SQL command to create a new database in Neon Postgres. This is typically the first step before loading sample data.

LANGUAGE: SQL
CODE:
CREATE DATABASE database_name;

----------------------------------------

TITLE: Simple CASE Statement Example in PL/pgSQL
DESCRIPTION: Illustrates the use of a simple CASE statement to assign price segments based on film rental rates. It selects a rental rate from the film table and assigns a price segment accordingly.

LANGUAGE: sql
CODE:
do $$
declare
	rate film.rental_rate%type;
	price_segment varchar(50);
begin
    -- get the rental rate
    select rental_rate into rate
    from film
    where film_id = 100;

	-- assign the price segment
	if found then
		case rate
		   when 0.99 then
              price_segment =  'Mass';
		   when 2.99 then
              price_segment = 'Mainstream';
		   when 4.99 then
              price_segment = 'High End';
		   else
	    	  price_segment = 'Unspecified';
		   end case;

		raise notice '%', price_segment;
	else
		raise notice 'film not found';
    end if;
end; $$

----------------------------------------

TITLE: Converting String to Date with TO_DATE() in PostgreSQL
DESCRIPTION: This snippet demonstrates the basic syntax of the TO_DATE() function, which takes a text string and a format string as arguments, returning a DATE value.

LANGUAGE: sql
CODE:
TO_DATE(text,format);

----------------------------------------

TITLE: Configuring Prisma Client with Read Replica
DESCRIPTION: JavaScript implementation showing how to configure Prisma Client with read replica support using the extension

LANGUAGE: javascript
CODE:
import { PrismaClient } from '@prisma/client';
import { readReplicas } from '@prisma/extension-read-replicas';

const prisma = new PrismaClient().$extends(
  readReplicas({
    url: process.env.DATABASE_URL_REPLICA,
  })
);

// Query is run against the database replica
await prisma.post.findMany();

// Query is run against the primary database
await prisma.post.create({
  data: {
    /** */
  },
});

----------------------------------------

TITLE: Running FerretDB Docker Container
DESCRIPTION: Command to run FerretDB in a Docker container connected to a Neon database.

LANGUAGE: bash
CODE:
docker run -p 27017:27017 -e FERRETDB_POSTGRESQL_URL=<NEON_DB_CONNECTION_STRING> ghcr.io/ferretdb/ferretdb

----------------------------------------

TITLE: Configuration Loading Module
DESCRIPTION: Python module to load database configuration from INI file

LANGUAGE: python
CODE:
from configparser import ConfigParser

def load_config(filename='database.ini', section='postgresql'):
    parser = ConfigParser()
    parser.read(filename)

    # get section, default to postgresql
    config = {}
    if parser.has_section(section):
        params = parser.items(section)
        for param in params:
            config[param[0]] = param[1]
    else:
        raise Exception('Section {0} not found in the {1} file'.format(section, filename))

    return config

if __name__ == '__main__':
    config = load_config()
    print(config)

----------------------------------------

TITLE: Querying XML Data with xpath() Function
DESCRIPTION: Shows how to extract and format data from XML documents using xpath() function and type casting.

LANGUAGE: sql
CODE:
SELECT
    (xpath('/person/name/text()', info))[1]::text AS name,
    (xpath('/person/age/text()', info))[1]::text::integer AS age,
    (xpath('/person/city/text()', info))[1]::text AS city
FROM
    person;

----------------------------------------

TITLE: Restarting Compute Endpoint
DESCRIPTION: API call to restart the compute endpoint after enabling pg_cron.

LANGUAGE: bash
CODE:
curl --request POST \
     --url https://console.neon.tech/api/v2/projects/<project_id>/endpoints/<endpoint_id>/restart \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $NEON_API_KEY'

----------------------------------------

TITLE: Using PostgreSQL IN Operator with Dates
DESCRIPTION: This query demonstrates how to use the IN operator with a list of dates, including casting a timestamp to a date.

LANGUAGE: sql
CODE:
SELECT
  payment_id,
  amount,
  payment_date
FROM
  payment
WHERE
  payment_date::date IN ('2007-02-15', '2007-02-16');

----------------------------------------

TITLE: Running Node.js Application Locally with Environment Variables
DESCRIPTION: Bash command to run the Node.js application locally, using the environment variables defined in the .env file.

LANGUAGE: bash
CODE:
node --env-file=.env index.js

----------------------------------------

TITLE: Tailwind CSS Configuration
DESCRIPTION: Configuration file for Tailwind CSS specifying paths to scan for utility classes.

LANGUAGE: javascript
CODE:
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./resources/**/*.blade.php', './resources/**/*.js', './resources/**/*.vue'],
  theme: {
    extend: {},
  },
  plugins: [],
};

----------------------------------------

TITLE: Changing PostgreSQL Tablespace Owner
DESCRIPTION: This snippet demonstrates how to change the owner of a tablespace in PostgreSQL using the ALTER TABLESPACE OWNER TO statement. It requires specifying the tablespace name and the new owner.

LANGUAGE: sql
CODE:
ALTER TABLESPACE tablespace_name
OWNER TO new_owner;

----------------------------------------

TITLE: Permanently Deleting a Record in Laravel
DESCRIPTION: This code demonstrates how to permanently delete a record, bypassing the soft delete mechanism in Laravel.

LANGUAGE: php
CODE:
$post = Post::withTrashed()->find(1);
$post->forceDelete();

----------------------------------------

TITLE: Basic PostgreSQL UNION Syntax
DESCRIPTION: Shows the fundamental syntax for using the UNION operator to combine results from two SELECT statements. The queries must have matching column numbers and compatible data types.

LANGUAGE: sql
CODE:
SELECT select_list
FROM A
UNION
SELECT select_list
FROM B;

----------------------------------------

TITLE: Basic PostgreSQL UNION Syntax
DESCRIPTION: Shows the fundamental syntax for using the UNION operator to combine results from two SELECT statements. The queries must have matching column numbers and compatible data types.

LANGUAGE: sql
CODE:
SELECT select_list
FROM A
UNION
SELECT select_list
FROM B;

----------------------------------------

TITLE: PostgreSQL LEFT JOIN with WHERE Clause to Find Missing Records
DESCRIPTION: Uses a LEFT JOIN with a WHERE clause to identify films that are not present in the inventory.

LANGUAGE: sql
CODE:
SELECT
  f.film_id,
  f.title,
  i.inventory_id
FROM
  film f
  LEFT JOIN inventory i USING (film_id)
WHERE
  i.film_id IS NULL
ORDER BY
  f.title;

----------------------------------------

TITLE: Completing RAG Pipeline with AI Chat Model
DESCRIPTION: Retrieves relevant chunks and sends them with the query to an AI chat model (ChatGPT) for final answer generation.

LANGUAGE: sql
CODE:
\set query 'what is [...]? how does it work?'

with ranked as (
  select
    id, doc_id, chunk, embedding <=> rag_bge_small_en_v15.embedding_for_query(:'query') as cosine_distance
  from embeddings
  order by cosine_distance
  limit 10
),
reranked as (
  select *, rag_jina_reranker_v1_tiny_en.rerank_distance(:'query', chunk)
  from ranked
  order by rerank_distance limit 5
)
select rag.openai_chat_completion(json_object(
  'model': 'gpt-4o-mini',
  'messages': json_array(
    json_object(
      'role': 'system',
      'content': E'The user is [...].

Try to answer the user''s QUESTION using only the provided CONTEXT.

The CONTEXT represents extracts from [...] which have been selected as most relevant to this question.

If the context is not relevant or complete enough to confidently answer the question, your best response is: "I''m afraid I don''t have the information to answer that question".'
    ),
    json_object(
      'role': 'user',
      'content': E'# CONTEXT

```
' || string_agg(chunk, E'

') || E'
```

# QUESTION

```
' || :'query' || E'```'
    )
  )
)) -> 'choices' -> 0 -> 'message' -> 'content' as answer
from reranked;

----------------------------------------

TITLE: Query Migration Examples
DESCRIPTION: Examples of migrating different query patterns from Vercel Postgres SDK to Neon's HTTP and WebSocket implementations.

LANGUAGE: diff
CODE:
# Vercel Postgres SDK
const { rows } = await sql`SELECT * FROM users WHERE id = ${userId}`; // [!code --]

# Neon HTTP
const rows = await sql`SELECT * FROM users WHERE id = ${userId}`; // [!code ++]

# Neon WebSockets
const { rows } = await pool.query('SELECT * FROM users WHERE id = $1', [userId]); // [!code ++]

----------------------------------------

TITLE: Basic PostgreSQL SELECT DISTINCT Syntax
DESCRIPTION: Demonstrates the basic syntax for using SELECT DISTINCT on a single column to remove duplicates from the result set.

LANGUAGE: sql
CODE:
SELECT
  DISTINCT column1
FROM
  table_name;

----------------------------------------

TITLE: Simplified PostgreSQL COPY Command
DESCRIPTION: Shows a simplified version of the COPY command when importing all columns from a CSV file into a PostgreSQL table.

LANGUAGE: sql
CODE:
COPY sample_table_name
FROM 'C:\sampledb\sample_data.csv'
DELIMITER ','
CSV HEADER;

----------------------------------------

TITLE: Creating Table with Generated Column for Full Name in PostgreSQL
DESCRIPTION: Creates a 'contacts' table with a generated column 'full_name' that concatenates 'first_name' and 'last_name'. This example shows how to use generated columns for string manipulation.

LANGUAGE: sql
CODE:
CREATE TABLE contacts(
   id SERIAL PRIMARY KEY,
   first_name VARCHAR(50) NOT NULL,
   last_name VARCHAR(50) NOT NULL,
   full_name VARCHAR(101) GENERATED ALWAYS AS (first_name || ' ' || last_name) STORED,
   email VARCHAR(300) UNIQUE
);

----------------------------------------

TITLE: Installing Neon CLI via Homebrew
DESCRIPTION: Alternative command to install the Neon CLI using Homebrew package manager for macOS users.

LANGUAGE: bash
CODE:
brew install neonctl

----------------------------------------

TITLE: Creating Due Tasks Command in Laravel Zero
DESCRIPTION: Command to generate a new command class for showing tasks due within a specified number of days.

LANGUAGE: bash
CODE:
php todo make:command DueTasksCommand

----------------------------------------

TITLE: Testing Data Replication
DESCRIPTION: Inserts test data to verify replication is working correctly.

LANGUAGE: sql
CODE:
INSERT INTO playing_with_neon(name, value)
SELECT LEFT(md5(i::TEXT), 10), random() FROM generate_series(1, 10) s(i);

----------------------------------------

TITLE: Column Management Operations
DESCRIPTION: Examples of adding, dropping, and renaming columns using ALTER TABLE statements.

LANGUAGE: sql
CODE:
ALTER TABLE links
ADD COLUMN active boolean;

LANGUAGE: sql
CODE:
ALTER TABLE links
DROP COLUMN active;

LANGUAGE: sql
CODE:
ALTER TABLE links
RENAME COLUMN title TO link_title;

----------------------------------------

TITLE: JUSTIFY_DAYS() with Non-30 Day Intervals
DESCRIPTION: Demonstrates how JUSTIFY_DAYS() processes intervals that are not multiples of 30 days, showing both month and remaining day conversions.

LANGUAGE: sql
CODE:
SELECT JUSTIFY_DAYS(INTERVAL '15 days'),
       JUSTIFY_DAYS(INTERVAL '45 days'),
       JUSTIFY_DAYS(INTERVAL '75 days');

----------------------------------------

TITLE: Basic EXIT Statement Syntax
DESCRIPTION: Shows the basic syntax of the EXIT statement with optional label and condition clause

LANGUAGE: sql
CODE:
exit [label] [when boolean_expression]

----------------------------------------

TITLE: Insert Single Row into PostgreSQL Table using PHP PDO
DESCRIPTION: Method to insert a single record into the stocks table with symbol and company parameters. Returns the ID of the inserted row using lastInsertId with the sequence name.

LANGUAGE: phpsql
CODE:
    /**
     * insert a new row into the stocks table
     * @param type $symbol
     * @param type $company
     * @return the id of the inserted row
     */
    public function insertStock($symbol, $company) {
        // prepare statement for insert
        $sql = 'INSERT INTO stocks(symbol,company) VALUES(:symbol,:company)';
        $stmt = $this->pdo->prepare($sql);

        // pass values to the statement
        $stmt->bindValue(':symbol', $symbol);
        $stmt->bindValue(':company', $company);

        // execute the insert statement
        $stmt->execute();

        // return generated id
        return $this->pdo->lastInsertId('stocks_id_seq');
    }

----------------------------------------

TITLE: Show WAL Level SQL Query
DESCRIPTION: SQL query to verify logical replication configuration by checking the WAL level setting.

LANGUAGE: sql
CODE:
SHOW wal_level;

----------------------------------------

TITLE: Annual Sales Analysis Query
DESCRIPTION: SQL query example demonstrating how to analyze sales data over the past year using aggregation.

LANGUAGE: sql
CODE:
SELECT product_id, SUM(sale_amount) AS total_sales
FROM sales
WHERE sale_date >= (CURRENT_DATE - INTERVAL '1 year')
GROUP BY product_id;

----------------------------------------

TITLE: Creating a New Role in PostgreSQL
DESCRIPTION: This example demonstrates how to create a new role named 'hr' with login privileges, database creation rights, and a password using the CREATE ROLE statement.

LANGUAGE: sql
CODE:
CREATE ROLE hr
LOGIN
CREATEDB
PASSWORD 'securePa$$1';

----------------------------------------

TITLE: Neon Me Command JSON Output
DESCRIPTION: Example of the 'me' command with JSON output format (-o json) showing detailed user information including billing account details and authentication accounts.

LANGUAGE: json
CODE:
neon me -o json

{
  "active_seconds_limit": 360000,
  "billing_account": {
    "payment_source": {
      "type": ""
    },
    "subscription_type": "free",
    "quota_reset_at_last": "2023-07-01T00:00:00Z",
    "email": "sally@example.com",
    "address_city": "",
    "address_country": "",
    "address_line1": "",
    "address_line2": "",
    "address_postal_code": "",
    "address_state": ""
  },
  "auth_accounts": [
    {
      "email": "sally@example.com",
      "image": "https://lh3.googleusercontent.com/a/AItbvml5rjEQkmt-h_abcdef-MwVtfpek7Aa_xk3cIS_=s96-c",
      "login": "sally",
      "name": "Sally Smith",
      "provider": "google"
    },
    {
      "email": "sally@example.com",
      "image": "",
      "login": "sally",
      "name": "sally@example.com",
      "provider": "hasura"
    }
  ],
  "email": "sally@example.com",
  "id": "8a9f604e-d04e-1234-baf7-e78909a5d123",
  "image": "https://lh3.googleusercontent.com/a/AItbvml5rjEQkmt-h_abcdef-MwVtfpek7Aa_xk3cIS_=s96-c",
  "login": "sally",
  "name": "Sally Smith",
  "projects_limit": 10,
  "branches_limit": 10,
  "max_autoscaling_limit": 0.25,
  "plan": "free"
}

----------------------------------------

TITLE: Creating JSON Object from Two-Dimensional Array
DESCRIPTION: Shows how to create a JSON object using a two-dimensional array where each inner array contains a key-value pair.

LANGUAGE: sql
CODE:
SELECT
  jsonb_object(
    '{{"name","age"},{"John", 22}}'
  );

----------------------------------------

TITLE: Updating Nested JSON Object with jsonb_set()
DESCRIPTION: Example of modifying a value in a nested JSON object using jsonb_set().

LANGUAGE: sql
CODE:
SELECT
  jsonb_set(
    '{"name":"John Doe", "address" : { "city": "San Francisco"}}',
    '{address,city}', '"San Jose"'
  );

----------------------------------------

TITLE: Configuring S3 Bucket Policy for GitHub Actions Role in AWS
DESCRIPTION: This JSON policy grants the specified IAM role permissions to perform List, Get, Put, and Delete actions on the S3 bucket. It needs to be added to the S3 bucket's permissions to allow access from the GitHub Actions workflow.

LANGUAGE: json
CODE:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::627917386332:role/neon-s3-backup-github-actions"
      },
      "Action": ["s3:ListBucket", "s3:GetObject", "s3:PutObject", "s3:DeleteObject"],
      "Resource": ["arn:aws:s3:::neon-s3-backup", "arn:aws:s3:::neon-s3-backup/*"]
    }
  ]
}

----------------------------------------

TITLE: Get JWKS URL for Firebase Authentication
DESCRIPTION: The standard JWKS URL endpoint used for Firebase and GCP Identity Platform token verification.

LANGUAGE: plaintext
CODE:
https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com

----------------------------------------

TITLE: Accessing Column Values in AFTER INSERT Trigger
DESCRIPTION: Shows how to access newly inserted data using the NEW record variable in a trigger.

LANGUAGE: sql
CODE:
NEW.column_name

----------------------------------------

TITLE: Checking Server Connection Details
DESCRIPTION: SQL query to display the server's IP address and port number of the current connection.

LANGUAGE: plaintext
CODE:
SELECT
  inet_server_addr(),
  inet_server_port();

----------------------------------------

TITLE: Converting Timestamp with Time Zone
DESCRIPTION: Example of converting a timestamp with time zone to UTC using the AT TIME ZONE operator.

LANGUAGE: sql
CODE:
SELECT TIMESTAMP WITH TIME ZONE '2024-03-21 10:00:00-04' AT TIME ZONE 'UTC';

----------------------------------------

TITLE: Connecting to Neon Database with pgcli
DESCRIPTION: Example command showing how to connect to a Neon database using pgcli with a connection string containing credentials and endpoint information.

LANGUAGE: bash
CODE:
pgcli postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname

----------------------------------------

TITLE: Analyzing Time-Series Data with Hyperfunctions
DESCRIPTION: Examples of using TimescaleDB hyperfunctions for data analysis including first(), last(), time_bucket(), and histogram().

LANGUAGE: sql
CODE:
SELECT
device_id,
first(temperature, time) AS first_temperature
FROM weather_conditions
GROUP BY device_id
LIMIT 10;

LANGUAGE: sql
CODE:
SELECT
time_bucket('1 hour', time) AS bucket_time,
AVG(temperature) AS avg_temperature
FROM weather_conditions
WHERE device_id = 'weather-pro-000001'
GROUP BY bucket_time
ORDER BY bucket_time
LIMIT 10;

----------------------------------------

TITLE: Installing Neon Database Toolkit
DESCRIPTION: Different package manager commands to install the @neondatabase/toolkit package across npm, yarn, pnpm and Deno environments.

LANGUAGE: bash
CODE:
npm install @neondatabase/toolkit

LANGUAGE: bash
CODE:
yarn add @neondatabase/toolkit

LANGUAGE: bash
CODE:
pnpm add @neondatabase/toolkit

LANGUAGE: bash
CODE:
deno add jsr:@neon/toolkit

----------------------------------------

TITLE: Generate Multiple Random Numbers
DESCRIPTION: Using generate_series() to create multiple random numbers within a specified range.

LANGUAGE: sql
CODE:
SELECT random_between(1,100)
FROM generate_series(1,5);

----------------------------------------

TITLE: Using tiktoken_encode Function
DESCRIPTION: Example of using tiktoken_encode to convert text into tokens using a specified model.

LANGUAGE: sql
CODE:
SELECT tiktoken_encode('text-davinci-003', 'The universe is a vast and captivating mystery, waiting to be explored and understood.');

----------------------------------------

TITLE: Setting PostgreSQL Text Search Configuration
DESCRIPTION: SQL command to configure the default_text_search_config parameter for a specific database, which controls text search functions and operators behavior. This setting can be configured at the database level using ALTER DATABASE syntax.

LANGUAGE: sql
CODE:
ALTER DATABASE <dbname> SET default_text_search_config = 'pg_catalog.english';

----------------------------------------

TITLE: Installing Faker Package for Testing
DESCRIPTION: Command to install the fakerphp/faker package for generating sample data in development.

LANGUAGE: bash
CODE:
composer require fakerphp/faker --dev

----------------------------------------

TITLE: Granting Schema Access to Replication Role (SQL)
DESCRIPTION: SQL commands to grant necessary permissions to the replication role for accessing schema and tables.

LANGUAGE: sql
CODE:
GRANT USAGE ON SCHEMA public TO cdc_role;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO cdc_role;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO cdc_role;

----------------------------------------

TITLE: Upgrading Neon CLI via Homebrew
DESCRIPTION: Command to upgrade Neon CLI to the latest version using Homebrew.

LANGUAGE: bash
CODE:
brew upgrade neonctl

----------------------------------------

TITLE: Retrieving Current Date in PostgreSQL
DESCRIPTION: These queries demonstrate different ways to get the current date in PostgreSQL, including using NOW() and CURRENT_DATE functions.

LANGUAGE: sql
CODE:
SELECT NOW();
SELECT NOW()::date;
SELECT CURRENT_DATE;

----------------------------------------

TITLE: Calling a Result Set Stored Procedure in PHP
DESCRIPTION: Demonstrates how to call the 'get_accounts' stored procedure in PHP using PDO. It executes the query and fetches the results into an array.

LANGUAGE: php
CODE:
function getAccounts() {
    $stmt = $this->pdo->query('SELECT * FROM get_accounts()');
    $accounts = [];
    while ($row = $stmt->fetch()) {
        $accounts[] = [
            'id' => $row['id'],
            'first_name' => $row['first_name'],
            'last_name' => $row['last_name'],
            'plan' => $row['plan'],
            'effective_date' => $row['effective_date']
        ];
    }
    return $accounts;
}

----------------------------------------

TITLE: Creating a View Based on Multiple Tables
DESCRIPTION: Example of creating a view that joins the customers and customer_groups tables.

LANGUAGE: sql
CODE:
CREATE VIEW customer_data
AS SELECT
    c.id,
    c.name,
    g.name customer_group
FROM
    customers c
INNER JOIN customer_groups g ON g.id = c.group_id;

----------------------------------------

TITLE: Rails Controller Implementation
DESCRIPTION: Implementation of Rails controllers for Authors and Books.

LANGUAGE: ruby
CODE:
class AuthorsController < ApplicationController
  def index
    @authors = Author.all
  end
end

----------------------------------------

TITLE: Defining PostgreSQL Table Structures
DESCRIPTION: SQL statements to create 'stocks' and 'stock_valuations' tables in the PostgreSQL database.

LANGUAGE: SQL
CODE:
CREATE TABLE IF NOT EXISTS stocks (
    id SERIAL PRIMARY KEY,
    symbol CHARACTER VARYING(10) NOT NULL UNIQUE,
    company CHARACTER VARYING(255) NOT NULL UNIQUE
);

LANGUAGE: SQL
CODE:
CREATE TABLE IF NOT EXISTS stock_valuations (
    stock_id INTEGER NOT NULL,
    value_on DATE NOT NULL,
    price NUMERIC(8 , 2 ) NOT NULL DEFAULT 0,
    PRIMARY KEY (stock_id , value_on),
    FOREIGN KEY (stock_id)
        REFERENCES stocks (id)
);

----------------------------------------

TITLE: Querying hstore Data with Price Filter
DESCRIPTION: Shows how to query hstore data using the -> operator and type casting for numeric comparison

LANGUAGE: sql
CODE:
SELECT name, attributes->'brand' AS brand
FROM product
WHERE (attributes->'price')::INT < 1000;

----------------------------------------

TITLE: Calculating MD5 Hash using PostgreSQL MD5() Function
DESCRIPTION: This snippet demonstrates how to use the MD5() function in PostgreSQL to calculate the MD5 hash of a string. The function takes a single string argument and returns the hash in hexadecimal format as TEXT.

LANGUAGE: sql
CODE:
SELECT MD5('PostgreSQL MD5');

----------------------------------------

TITLE: Configuring Neon Postgres Connection
DESCRIPTION: Environment variables to set up the Neon Postgres database connection in the .env file.

LANGUAGE: bash
CODE:
DB_CONNECTION=pgsql
DB_HOST=your-neon-hostname.neon.tech
DB_PORT=5432
DB_DATABASE=your_database_name
DB_USERNAME=your_username
DB_PASSWORD=your_password

----------------------------------------

TITLE: Retrieving Data from Remote Table
DESCRIPTION: Fetches all rows from a 'todos' table in the remote database using a named dblink connection.

LANGUAGE: sql
CODE:
SELECT *
FROM dblink('my_remote_db', 'SELECT id, user_id, task, is_complete, inserted_at FROM todos')
AS rows(id int, user_id TEXT, task TEXT, is_complete BOOLEAN, inserted_at text);

----------------------------------------

TITLE: Environment Variables Setup
DESCRIPTION: Example environment variables configuration for database connections.

LANGUAGE: bash
CODE:
# Database owner connection string
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'

# Neon "authenticated" role connection string
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

----------------------------------------

TITLE: Setting Up Strapi CMS Project
DESCRIPTION: Commands to create and initialize a new Strapi CMS project with Postgres database configuration.

LANGUAGE: bash
CODE:
npx create-strapi-app@latest blog-api
cd blog-api
yarn develop

----------------------------------------

TITLE: Enabling PostGIS Extension in Postgres
DESCRIPTION: This SQL command enables the PostGIS extension in a Postgres database, which is necessary for performing geospatial queries. PostGIS adds geospatial data types, query functions, and GiST indexes.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS postgis;

----------------------------------------

TITLE: Basic Syntax of jsonb_path_query_array Function
DESCRIPTION: Demonstrates the basic syntax of the jsonb_path_query_array() function which takes JSONB data and a JSON path as arguments.

LANGUAGE: sql
CODE:
jsonb_path_query_array(jsonb_data, json_path)

----------------------------------------

TITLE: Setting Up Sample Database
DESCRIPTION: Download and restore sample DVD rental database to PostgreSQL server

LANGUAGE: shell
CODE:
curl -O https://neon.tech/postgresql//postgresqltutorial/dvdrental.zip
unzip dvdrental.zip
sudo -u postgres psql
create database dvdrental;
\q
pg_restore -U postgres --dbname=dvdrental --verbose dvdrental.tar
psql
\c dvdrental
select count(*) from film;

----------------------------------------

TITLE: Creating PostgreSQL Function for Parts Lookup
DESCRIPTION: Creates a PL/pgSQL function that returns parts information for a specific vendor

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION get_parts_by_vendor(id INTEGER)
  RETURNS TABLE(part_id INTEGER, part_name VARCHAR) AS
$$
BEGIN
 RETURN QUERY

 SELECT parts.part_id, parts.part_name
 FROM parts
 INNER JOIN vendor_parts on vendor_parts.part_id = parts.part_id
 WHERE vendor_id = id;

END; $$

LANGUAGE plpgsql;

----------------------------------------

TITLE: Using findById() Method to Retrieve a Specific Product
DESCRIPTION: Shows how to use the findById() method in the main() method of the Main class to retrieve the product with id 1 from the products table.

LANGUAGE: java
CODE:
public class Main {
    public static void main(String[] args) {

        var p = ProductDB.findById(1);
        if(p != null){
            System.out.println(p);
        }
    }
}

----------------------------------------

TITLE: Resetting a Role Password with SQL in Neon
DESCRIPTION: This SQL command demonstrates how to reset a password for an existing role in Neon. It uses the ALTER USER statement to change the password for a specified user.

LANGUAGE: sql
CODE:
ALTER USER user_name WITH PASSWORD 'new_password';

----------------------------------------

TITLE: Executing Left Join in PostgreSQL
DESCRIPTION: Shows a left join operation that returns all records from basket_a and matching records from basket_b, with NULL values for non-matching rows.

LANGUAGE: sql
CODE:
SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
LEFT JOIN basket_b
   ON fruit_a = fruit_b;

----------------------------------------

TITLE: Restoring a Branch to Another Branch's History Using Neon CLI
DESCRIPTION: This command restores the 'dev/alex' branch to an earlier point in time from the 'dev/jordan' branch, using the LSN '0/12345' to specify the point in time.

LANGUAGE: bash
CODE:
neon branches restore dev/alex dev/jordan@0/12345

----------------------------------------

TITLE: Configuring Connection Pooling with Neon PostgreSQL Connection String
DESCRIPTION: Demonstrates how to enable connection pooling by adding a -pooler suffix to the endpoint ID in the Neon hostname. This allows for individual connections to use pooling while maintaining the ability to have direct connections to the same database.

LANGUAGE: text
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456-pooler.us-east-2.aws.neon.tech/dbname

----------------------------------------

TITLE: Configuring Database Connection in .env
DESCRIPTION: Example of how to update the .env file with Neon database credentials.

LANGUAGE: env
CODE:
DB_CONNECTION=pgsql
DB_HOST=your-neon-hostname.neon.tech
DB_PORT=5432
DB_DATABASE=your_database_name
DB_USERNAME=your_username
DB_PASSWORD=your_password

----------------------------------------

TITLE: Creating Schema with Table and View
DESCRIPTION: Advanced example creating a schema with a deliveries table and a view for due deliveries.

LANGUAGE: sql
CODE:
CREATE SCHEMA scm
    CREATE TABLE deliveries(
        id SERIAL NOT NULL,
        customer_id INT NOT NULL,
        ship_date DATE NOT NULL
    )
    CREATE VIEW delivery_due_list AS
        SELECT ID, ship_date
        FROM deliveries
        WHERE ship_date <= CURRENT_DATE;

----------------------------------------

TITLE: Inserting Data with DEFAULT Values
DESCRIPTION: Demonstrates different ways to insert data while utilizing DEFAULT values, either by omitting columns or explicitly using the DEFAULT keyword.

LANGUAGE: sql
CODE:
INSERT INTO table_name(column1, colum3)
VALUES(value1, value2);

LANGUAGE: sql
CODE:
INSERT INTO table_name(column1, column2, colum3)
VALUES(value1,DEFAULT,value2);

----------------------------------------

TITLE: Exporting FaunaDB Data to S3 using CLI
DESCRIPTION: Command to export FaunaDB collection data to an Amazon S3 bucket using the Fauna CLI.

LANGUAGE: bash
CODE:
fauna export create s3 \
  --database <database_name> \
  --collection <collection_name> \
  --bucket <s3_bucket_name> \
  --path <s3_bucket_path> \
  --format simple

----------------------------------------

TITLE: Creating Composer Configuration for PHP Project
DESCRIPTION: Shows the content of composer.json file for setting up autoloading in the project structure.

LANGUAGE: sql
CODE:
{
    "autoload": {
        "psr-4": {
            "PostgreSQLTutorial\\": "app/"
        }
    }
}

----------------------------------------

TITLE: Creating Tables for Salary Tracking
DESCRIPTION: SQL commands to create the main salaries table and a salary_changes table for tracking historical changes.

LANGUAGE: sql
CODE:
CREATE TABLE salaries(
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    salary NUMERIC NOT NULL
);

LANGUAGE: sql
CODE:
CREATE TABLE salary_changes (
    id SERIAL PRIMARY KEY,
    employee_id INT NOT NULL,
    old_salary NUMERIC NOT NULL,
    new_salary NUMERIC NOT NULL,
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

----------------------------------------

TITLE: Configuring PostgreSQL Data Source in Quarkus
DESCRIPTION: This snippet shows how to configure the JDBC data source for a PostgreSQL database in a Quarkus application's .env file. It includes setting the database kind, username, password, and JDBC URL.

LANGUAGE: shell
CODE:
QUARKUS_DATASOURCE_DB_KIND=postgresql
QUARKUS_DATASOURCE_USERNAME=[user]
QUARKUS_DATASOURCE_PASSWORD=[password]
# Note that "jdbc" is prepended, and that "?sslmode=require" is appended to the connection string
QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://[neon_hostname]/[dbname]?sslmode=require

----------------------------------------

TITLE: Compiling Phoenix Application in Production Mode
DESCRIPTION: This bash command compiles the Phoenix application in production mode using Mix.

LANGUAGE: bash
CODE:
MIX_ENV=prod mix compile

----------------------------------------

TITLE: Implementing Convex getMessages Query
DESCRIPTION: TypeScript code defining a Convex query function to fetch messages from the database.

LANGUAGE: typescript
CODE:
export const getMessages = query({
  args: {},
  handler: async (ctx) => {
    const messages = await ctx.db.query('messages').order('desc').take(50);
    return messages.reverse();
  },
});

----------------------------------------

TITLE: Executing Cursor Example Function
DESCRIPTION: Query to execute the cursor example function and retrieve results.

LANGUAGE: sql
CODE:
SELECT * FROM fetch_film_titles_and_years();

----------------------------------------

TITLE: VACUUM FULL Operation in PostgreSQL
DESCRIPTION: Example of running VACUUM FULL to reclaim physical storage space by rewriting the table and removing empty spaces.

LANGUAGE: sql
CODE:
VACUUM FULL your_table_name;

----------------------------------------

TITLE: Verifying Replication with Row Count in SQL
DESCRIPTION: SQL query to perform a row count on both source and destination databases to ensure replication is working correctly.

LANGUAGE: sql
CODE:
SELECT COUNT(*) FROM playing_with_neon;

----------------------------------------

TITLE: Configuring Flyway Maven Plugin
DESCRIPTION: XML configuration for adding the Flyway Maven plugin to the project's pom.xml file.

LANGUAGE: xml
CODE:
<build>
    <plugins>
        <plugin>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-maven-plugin</artifactId>
            <version>8.0.0</version>
            <configuration>
				<url>jdbc:postgresql://<your_neon_hostname>/neondb?sslmode=require</url>
                <user>${spring.datasource.username}</user>
                <password>${spring.datasource.password}</password>
                <locations>
                    <location>classpath:db/migration</location>
                </locations>
            </configuration>
        </plugin>
    </plugins>
</build>

----------------------------------------

TITLE: Getting JSON Null Type
DESCRIPTION: Shows how to use jsonb_typeof() to determine the type of a JSON null value.

LANGUAGE: sql
CODE:
SELECT jsonb_typeof('null'::jsonb);

----------------------------------------

TITLE: Setting Up Environment Variables for Database Connections
DESCRIPTION: Example of setting up administrative and authenticated database connection strings in the .env file for a Neon project.

LANGUAGE: bash
CODE:
# Database owner connection string
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'

# Neon "authenticated" role connection string
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

----------------------------------------

TITLE: Creating PostgreSQL Database and User
DESCRIPTION: SQL commands to create a new database, user, and grant privileges in PostgreSQL.

LANGUAGE: sql
CODE:
CREATE DATABASE elearning;
CREATE ROLE ed WITH LOGIN PASSWORD 'YourPassword';
GRANT ALL PRIVILEGES ON SCHEMA public TO ed;

----------------------------------------

TITLE: Implementing Chat Interface in TypeScript React
DESCRIPTION: TypeScript React component for the main chat interface, combining chat bubble and input components with the chat hook for state management.

LANGUAGE: typescript
CODE:
import { useState } from 'react';
import { ChatBubble } from './ChatBubble';
import { ChatInput } from './ChatInput';
import { useChat } from '../../hooks/useChat';

export const ChatInterface = () => {
  const [input, setInput] = useState('');
  const { messages, isLoading, sendMessage } = useChat();

  const handleSubmit = async () => {
    if (!input.trim()) return;
    const message = input;
    setInput('');
    await sendMessage(message);
  };

  return (
    <div className="flex flex-col h-[600px] bg-white rounded-lg shadow-lg">
      <div className="p-4 border-b bg-chatbot-primary text-white">
        <h2 className="text-xl font-bold">Neon AI Assistant</h2>
      </div>

      <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50">
        {messages.map((message, idx) => (
          <ChatBubble key={idx} message={message} />
        ))}
      </div>

      <ChatInput
        value={input}
        onChange={setInput}
        onSubmit={handleSubmit}
        isLoading={isLoading}
      />
    </div>
  );
};

----------------------------------------

TITLE: Creating Film Length Statistics View
DESCRIPTION: Creates a view that calculates total film length by category.

LANGUAGE: sql
CODE:
CREATE VIEW film_length_stat AS
SELECT
  name,
  SUM(length) film_length
FROM
  category
  INNER JOIN film_category USING (category_id)
  INNER JOIN film USING (film_id)
GROUP BY
  name;

----------------------------------------

TITLE: Restoring Database from TAR File
DESCRIPTION: Command to restore the DVD rental database from a TAR file using pg_restore utility

LANGUAGE: css
CODE:
pg_restore -U postgres -d dvdrental D:\sampledb\postgres\dvdrental.tar

----------------------------------------

TITLE: Logging into DigitalOcean Droplet as Root User
DESCRIPTION: This command allows you to SSH into your DigitalOcean Droplet as the root user. You'll need to replace '<Your Droplet's IP address>' with the actual IP address of your Droplet.

LANGUAGE: shell
CODE:
ssh root@<Your Droplet's IP address>

----------------------------------------

TITLE: Implementing Single Row Deletion Method in PHP for PostgreSQL
DESCRIPTION: Defines a delete() method in the StockDB class that deletes a single row from the stocks table based on the provided ID. It uses a prepared statement with parameter binding for secure deletion.

LANGUAGE: php
CODE:
   /**
     * Delete a row in the stocks table specified by id
     * @param int $id
     * @return the number row deleted
     */
    public function delete($id) {
        $sql = 'DELETE FROM stocks WHERE id = :id';

        $stmt = $this->pdo->prepare($sql);
        $stmt->bindValue(':id', $id);

        $stmt->execute();

        return $stmt->rowCount();
    }

----------------------------------------

TITLE: Defining jsonb_object() Function Signature in PostgreSQL
DESCRIPTION: Shows the two possible function signatures for jsonb_object(). The first takes separate arrays for keys and values, while the second takes a single array with alternating keys and values.

LANGUAGE: sql
CODE:
jsonb_object(keys TEXT[], values TEXT[]) -> JSONB
-- or --
jsonb_object(keys_values TEXT[]) -> JSONB

----------------------------------------

TITLE: PostgreSQL COALESCE Alternative
DESCRIPTION: Shows how to use PostgreSQL's COALESCE function as an alternative to ISNULL. Returns the first non-null argument.

LANGUAGE: sql
CODE:
COALESCE(expression,replacement)

----------------------------------------

TITLE: Implementing server actions for user message management
DESCRIPTION: TypeScript code defining server actions to create and delete user messages in the Neon database.

LANGUAGE: typescript
CODE:
/// app/actions.ts

'use server';

import { auth } from '@/auth';
import { UserMessages } from './db/schema';
import { db } from './db';
import { redirect } from 'next/navigation';
import { eq } from 'drizzle-orm';

export async function createUserMessage(formData: FormData) {
  const session = await auth();
  if (!session) throw new Error('User not authenticated');

  const message = formData.get('message') as string;
  await db.insert(UserMessages).values({
    user_id: session.user?.id as string,
    message,
  });

  redirect('/');
}

export async function deleteUserMessage() {
  const session = await auth();
  if (!session) throw new Error('User not authenticated');

  await db.delete(UserMessages).where(eq(UserMessages.user_id, session.user?.id as string));
  redirect('/');
}

----------------------------------------

TITLE: Enabling UUID-OSSP Extension in Neon Compute
DESCRIPTION: Demonstrates how to enable the uuid-ossp extension in Neon Compute, which provides functions for generating universally unique identifiers (UUIDs).

LANGUAGE: sql
CODE:
CREATE EXTENSION "uuid-ossp"

----------------------------------------

TITLE: Configuring Database Connection in .env
DESCRIPTION: Update the .env file with Neon database credentials for PostgreSQL connection.

LANGUAGE: env
CODE:
DB_CONNECTION=pgsql
DB_HOST=your-neon-hostname.neon.tech
DB_PORT=5432
DB_DATABASE=your_database_name
DB_USERNAME=your_username
DB_PASSWORD=your_password

----------------------------------------

TITLE: Direct Server-to-Server DVD Rental Database Copy Example
DESCRIPTION: This shell command demonstrates copying the 'dvdrental' database directly from a local server to a remote server using pg_dump and psql in a pipeline.

LANGUAGE: shell
CODE:
pg_dump -C -h localhost -U postgres dvdrental | psql -h remote -U postgres dvdrental

----------------------------------------

TITLE: Listing PostgreSQL Users with psql
DESCRIPTION: These commands list all user accounts (roles) in the current PostgreSQL database server using psql. The \du+ command provides additional information including a description column.

LANGUAGE: shell
CODE:
\du

LANGUAGE: shell
CODE:
\du+

----------------------------------------

TITLE: Drop Multiple Schemas Example
DESCRIPTION: Example demonstrating how to drop multiple schemas in one statement.

LANGUAGE: sql
CODE:
DROP SCHEMA IF EXISTS finance, marketing;

----------------------------------------

TITLE: Recursive CTE for LCM Calculation in PostgreSQL
DESCRIPTION: Uses a recursive Common Table Expression (CTE) to calculate the LCM of all numbers in the 'numbers' table.

LANGUAGE: sql
CODE:
WITH RECURSIVE lcm_cte AS (
  SELECT value AS lcm_value, ROW_NUMBER() OVER (ORDER BY id) AS rn
  FROM numbers
  WHERE id = (SELECT min(id) FROM numbers)

  UNION ALL

  SELECT lcm(lcm_value, value), lcm_cte.rn + 1
  FROM lcm_cte
  JOIN numbers ON lcm_cte.rn + 1 = numbers.id
)
SELECT lcm_value
FROM lcm_cte
WHERE rn = (SELECT COUNT(*) FROM numbers);

----------------------------------------

TITLE: Comparing rank() vs dense_rank()
DESCRIPTION: Demonstrates the difference between rank() and dense_rank() functions when handling ties in the data.

LANGUAGE: sql
CODE:
WITH scores AS (
    SELECT *
    FROM (
        VALUES
            ('Player 1', 100),
            ('Player 2', 95),
            ('Player 3', 95),
            ('Player 4', 90)
    ) AS t(player, score)
)
SELECT
    player,
    score,
    rank() OVER (ORDER BY score DESC) AS rank,
    dense_rank() OVER (ORDER BY score DESC) AS dense_rank
FROM scores;

----------------------------------------

TITLE: Setting Neon Database URL in Environment Variables
DESCRIPTION: Shows how to set the DATABASE_URL environment variable with a pooled Neon connection string. This is used in conjunction with the Prisma configuration to establish a database connection.

LANGUAGE: ini
CODE:
# Pooled Neon connection string
DATABASE_URL="postgresql://alex:AbC123dEf@ep-cool-darkness-123456-pooler.us-east-2.aws.neon.tech/dbname?sslmode=require"

----------------------------------------

TITLE: Creating Marketing Schema Example
DESCRIPTION: Simple example of creating a marketing schema in the database.

LANGUAGE: sql
CODE:
CREATE SCHEMA marketing;

----------------------------------------

TITLE: Counting Rentals by Staff and Year
DESCRIPTION: Complex query using DATE_TRUNC to count rentals per staff member per year.

LANGUAGE: sql
CODE:
SELECT
	staff_id,
	date_trunc('year', rental_date) y,
	COUNT (rental_id) rental
FROM
	rental
GROUP BY
	staff_id, y
ORDER BY
	staff_id;

----------------------------------------

TITLE: Creating Music Albums Table in Neon Postgres
DESCRIPTION: SQL commands to create a music_albums table and insert sample data into it. Creates a table with album_id, title, and artist columns.

LANGUAGE: sql
CODE:
CREATE TABLE music_albums (
    album_id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    artist VARCHAR(255) NOT NULL
);

INSERT INTO music_albums (title, artist)
VALUES
    ('Rumours', 'Fleetwood Mac'),
    ('Abbey Road', 'The Beatles'),
    ('Dark Side of the Moon', 'Pink Floyd'),
    ('Thriller', 'Michael Jackson');

----------------------------------------

TITLE: Creating Users Table in Neon Database - SQL
DESCRIPTION: SQL queries to create a users table and populate it with sample data. Creates a table with id, name, email, and timestamp fields.

LANGUAGE: sql
CODE:
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

INSERT INTO users (name, email)
VALUES
    ('Alice', 'alice@example.com'),
    ('Bob', 'bob@example.com'),
    ('Charlie', 'charlie@example.com'),
    ('Dave', 'dave@example.com'),
    ('Eve', 'eve@example.com');

----------------------------------------

TITLE: Querying Local File Cache Statistics in Neon PostgreSQL
DESCRIPTION: SQL query to retrieve Local File Cache (LFC) statistics from the neon_stat_file_cache view, showing cache hits, misses, usage, writes, and hit ratio. Requires the neon extension to be installed.

LANGUAGE: sql
CODE:
SELECT * FROM neon_stat_file_cache;
 file_cache_misses | file_cache_hits | file_cache_used | file_cache_writes | file_cache_hit_ratio
-------------------+-----------------+-----------------+-------------------+----------------------
           2133643 |       108999742 |             607 |          10767410 |                98.08

----------------------------------------

TITLE: Setting Up Express Server in JavaScript
DESCRIPTION: JavaScript code to set up an Express server with routes for the chatbot API, including health check and error handling middleware.

LANGUAGE: javascript
CODE:
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const chatRoutes = require('./src/routes/chatRoutes');

dotenv.config();

const app = express();

app.use(cors());
app.use(express.json());

app.use('/api/chat', chatRoutes);

app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    error: 'Internal Server Error',
    message: process.env.NODE_ENV === 'development' ? err.message : undefined,
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Environment: ${process.env.NODE_ENV}`);
});

----------------------------------------

TITLE: PostgreSQL TRIM() with Specified Trim Locations
DESCRIPTION: Demonstrates using TRIM() to remove leading, trailing, and both leading and trailing zeros from a string.

LANGUAGE: SQL
CODE:
SELECT TRIM(LEADING '0' FROM '000123450') AS trimmed_string_leading,
       TRIM(TRAILING '0' FROM '000123450') AS trimmed_string_trailing,
       TRIM(BOTH '0' FROM '000123450') AS trimmed_string_both;

----------------------------------------

TITLE: Creating a PostgreSQL Stored Procedure
DESCRIPTION: Demonstrates the basic syntax for creating a stored procedure in PostgreSQL using PL/pgSQL. This example shows the structure including parameter definition, language specification, and procedure body.

LANGUAGE: sql
CODE:
create [or replace] procedure procedure_name(parameter_list)
language plpgsql
as $$
declare
-- variable declaration
begin
-- stored procedure body
end; $$

----------------------------------------

TITLE: Neon Database Environment Configuration
DESCRIPTION: Environment variables configuration for connecting Laravel to Neon Postgres database.

LANGUAGE: env
CODE:
DB_CONNECTION=pgsql
DB_HOST=your-neon-hostname.neon.tech
DB_PORT=5432
DB_DATABASE=your_database_name
DB_USERNAME=your_username
DB_PASSWORD=your_password

----------------------------------------

TITLE: Querying Books from Neon Database using C# and Npgsql
DESCRIPTION: This C# code snippet demonstrates how to retrieve all books from the database using a SELECT statement and iterate through the results using a DataReader.

LANGUAGE: C#
CODE:
using (var conn = new NpgsqlConnection(connString))
{
    Console.Out.WriteLine("Opening connection");
    conn.Open();

    using (var command = new NpgsqlCommand("SELECT * FROM books", conn))
    using (var reader = command.ExecuteReader())
    {
        while (reader.Read())
        {
            Console.WriteLine(
                $"Reading from table=({reader.GetInt32(0)}, {reader.GetString(1)}, " +
                $"{reader.GetString(2)}, {reader.GetInt32(3)})"
            );
        }
    }
}

----------------------------------------

TITLE: Basic Table Alias Syntax in PostgreSQL
DESCRIPTION: Shows the basic syntax for creating table aliases in PostgreSQL queries. The AS keyword is optional when defining aliases.

LANGUAGE: sql
CODE:
table_name AS alias_name

LANGUAGE: sql
CODE:
table_name alias_name

----------------------------------------

TITLE: Creating a Table with GENERATED BY DEFAULT AS IDENTITY Column
DESCRIPTION: This example demonstrates creating a table with a GENERATED BY DEFAULT AS IDENTITY column, which allows inserting custom values into the identity column.

LANGUAGE: sql
CODE:
CREATE TABLE color (
    color_id INT GENERATED BY DEFAULT AS IDENTITY,
    color_name VARCHAR NOT NULL
);

----------------------------------------

TITLE: Restoring a Branch from Parent Using Neon CLI
DESCRIPTION: This command restores the 'dev/alex' branch to the latest data (HEAD) of its parent branch.

LANGUAGE: bash
CODE:
neon branches restore dev/alex ^parent

----------------------------------------

TITLE: Database Role Renaming
DESCRIPTION: Renamed administrative role from zenith_admin to cloud_admin

LANGUAGE: sql
CODE:
zenith_admin -> cloud_admin

----------------------------------------

TITLE: Neon Database Configuration
DESCRIPTION: Environment variables for connecting Laravel to Neon PostgreSQL database.

LANGUAGE: env
CODE:
DB_CONNECTION=pgsql
DB_HOST=your-neon-hostname.neon.tech
DB_PORT=5432
DB_DATABASE=your_database_name
DB_USERNAME=your_username
DB_PASSWORD=your_password

----------------------------------------

TITLE: Counting Monthly Orders with GROUP BY
DESCRIPTION: Groups orders by month and counts the number of orders per month using DATE_TRUNC and GROUP BY.

LANGUAGE: sql
CODE:
SELECT
  DATE_TRUNC('month', order_date) AS month,
  COUNT(*) AS orders_per_month
FROM orders
GROUP BY DATE_TRUNC('month', order_date)
ORDER BY month;

----------------------------------------

TITLE: Listing Databases using psql Command
DESCRIPTION: The \l command in psql lists all databases in the current PostgreSQL server. It displays database names, owners, encodings, and access privileges.

LANGUAGE: sql
CODE:
\l

----------------------------------------

TITLE: Using Neon Authorize with Drizzle ORM
DESCRIPTION: Example of using the new db.$withAuth method in Drizzle ORM to include user JWTs in database queries.

LANGUAGE: javascript
CODE:
return db
  .$withAuth(authToken)
  .select()
  .from(schema.todos)
  .where(eq(schema.todos.userId, sql`auth.user_id()`))
  .orderBy(asc(schema.todos.insertedAt));

----------------------------------------

TITLE: Database Properties Configuration
DESCRIPTION: Properties file containing database connection parameters including URL, username, and password

LANGUAGE: properties
CODE:
db.url=jdbc:postgresql://localhost:5432/sales
db.username=Yourusername
db.password=YourPassword

----------------------------------------

TITLE: Advanced jsonb_path_exists() with WHERE Clause
DESCRIPTION: Complex query combining jsonb_path_exists() in WHERE clause with jsonb_path_query() to retrieve CPU specifications

LANGUAGE: sql
CODE:
SELECT jsonb_path_query(attributes, '$.specs.cpu') AS cpu
FROM products
WHERE jsonb_path_exists(attributes, '$.specs.cpu');

----------------------------------------

TITLE: Starting the Development Server
DESCRIPTION: Command to start the Next.js development server for the sample application.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Implementing RLS Policies with SQL
DESCRIPTION: Creates a 'todos' table and implements Row-Level Security policies using SQL. This includes enabling RLS and creating policies for INSERT, SELECT, UPDATE, and DELETE operations based on user authentication.

LANGUAGE: sql
CODE:
-- schema for TODOs table
CREATE TABLE todos (
  id bigint generated by default as identity primary key,
  user_id text not null default (auth.user_id()),
  task text check (char_length(task) > 0),
  is_complete boolean default false,
  inserted_at timestamptz not null default now()
);

-- 1st enable row level security for your table
ALTER TABLE todos ENABLE ROW LEVEL SECURITY;

-- 2nd create policies for your table
CREATE POLICY "Individuals can create todos." ON todos FOR INSERT
TO authenticated
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can view their own todos." ON todos FOR SELECT
TO authenticated
USING ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can update their own todos." ON todos FOR UPDATE
TO authenticated
USING ((select auth.user_id()) = user_id)
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can delete their own todos." ON todos FOR DELETE
TO authenticated
USING ((select auth.user_id()) = user_id);

----------------------------------------

TITLE: Displaying Code with Line Highlighting in Markdown
DESCRIPTION: Examples of how to highlight specific lines or ranges in code blocks using Markdown syntax.

LANGUAGE: markdown
CODE:
```c++ {1}
#include <iostream>

int main() {
    std::cout << "Hello World";
    return 0;
}
```

LANGUAGE: markdown
CODE:
```c++ {1,2,5}
#include <iostream>

int main() {
    std::cout << "Hello World";
    return 0;
}
```

LANGUAGE: markdown
CODE:
```c++ {1-3,5}
#include <iostream>

int main() {
    std::cout << "Hello World";
    return 0;
}
```

----------------------------------------

TITLE: Configuring Neon MCP Server in Cursor (Windows)
DESCRIPTION: JSON configuration for adding the Neon MCP Server to Cursor on Windows, specifying the command and arguments in the mcp.json file.

LANGUAGE: json
CODE:
{
   "mcpServers": {
      "neon": {
         "command": "cmd",
         "args": ["/c", "npx", "-y", "@neondatabase/mcp-server-neon", "start", "<YOUR_NEON_API_KEY>"]
      }
   }
}

----------------------------------------

TITLE: Implementing OrderController in Laravel
DESCRIPTION: PHP code for the OrderController class, handling order creation and event dispatching.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers;

use App\Models\Order;
use App\Events\OrderPlaced;
use Illuminate\Http\Request;

class OrderController extends Controller
{
    public function store(Request $request)
    {
        $order = Order::create([
            'customer_name' => $request->customer_name,
            'total' => $request->total,
        ]);

        event(new OrderPlaced($order));

        return response()->json(['message' => 'Order placed successfully', 'order' => $order]);
    }
}

----------------------------------------

TITLE: Seeding Neon Database in Phoenix
DESCRIPTION: This bash command seeds the Neon database using Ecto in a Phoenix application.

LANGUAGE: bash
CODE:
mix ecto.create

----------------------------------------

TITLE: Inserting Data into hstore Column
DESCRIPTION: Example of inserting multiple products with different attributes using hstore key-value pairs

LANGUAGE: sql
CODE:
INSERT INTO product (name, attributes)
VALUES
    ('Desktop', 'brand => HP, price => 900, processor => "Intel Core i5", storage => "1TB HDD"'),
    ('Tablet', 'brand => Apple, price => 500, os => iOS, screen_size => 10.5'),
    ('Smartwatch', 'brand => Garmin, price => 250, water_resistant => true, battery_life => "7 days"'),
    ('Camera', 'brand => Nikon, price => 1200, megapixels => 24, video_resolution => "4K"'),
    ('Laptop', 'brand => Dell, price => 1200, screen_size => 15.6'),
    ('Smartphone', 'brand => Samsung, price => 800, os => Android'),
    ('Headphones', 'brand => Sony, price => 150, wireless => true, color => "Black"');

----------------------------------------

TITLE: Using the SLICE Operator on Arrays in PostgreSQL
DESCRIPTION: This SQL query demonstrates how to use the SLICE operator to retrieve a range of elements from an array column.

LANGUAGE: sql
CODE:
SELECT name, categories[1:3] AS first_three_categories
FROM products;

----------------------------------------

TITLE: Displaying Neon Connection Error
DESCRIPTION: Shows the error message that occurs when an application doesn't support Server Name Indication (SNI) when connecting to Neon.

LANGUAGE: text
CODE:
ERROR: The endpoint ID is not specified. Either upgrade the Postgres client library (libpq) for SNI support or pass the endpoint ID (the first part of the domain name) as a parameter: '&options=endpoint%3D'. See [https://neon.tech/sni](https://neon.tech/sni) for more information.

----------------------------------------

TITLE: Removing Specific Characters with PostgreSQL TRIM()
DESCRIPTION: Shows how to use the TRIM() function to remove leading and trailing hash symbols from a string.

LANGUAGE: SQL
CODE:
SELECT TRIM('#' FROM '##PostgreSQL##') AS trimmed_string;

----------------------------------------

TITLE: Defining PostgreSQL TRANSLATE() Function Syntax
DESCRIPTION: This snippet shows the basic syntax of the PostgreSQL TRANSLATE() function, which takes three arguments: the string to be translated, the set of characters to be replaced, and the set of replacement characters.

LANGUAGE: sql
CODE:
TRANSLATE(string, from, to)

----------------------------------------

TITLE: GROUP BY with Multiple Columns
DESCRIPTION: Shows how to group by multiple columns to create more specific groupings of data.

LANGUAGE: sql
CODE:
SELECT
  customer_id,
  staff_id,
  SUM(amount)
FROM
  payment
GROUP BY
  staff_id,
  customer_id
ORDER BY
  customer_id;

----------------------------------------

TITLE: Creating Table and Inserting Vector Data in Neon Database
DESCRIPTION: This code creates a table with a vector column and inserts sample vector data into it using SQL commands executed through psycopg.

LANGUAGE: python
CODE:
create_table_sql = '''
CREATE TABLE items (
id BIGSERIAL PRIMARY KEY,
embedding VECTOR(3)
);
'''

# Insert data
insert_data_sql = '''
INSERT INTO items (embedding) VALUES ('[1,2,3]'), ('[4,5,6]'), ('[7,8,9]');
'''

# Execute the SQL statements
cursor.execute(create_table_sql)
cursor.execute(insert_data_sql)

# Commit the changes
connection.commit()

----------------------------------------

TITLE: Iterating with Step in PL/pgSQL For Loop
DESCRIPTION: This snippet illustrates how to use a PL/pgSQL for loop with a custom step, iterating from 1 to 6 with a step of 2, displaying each number in the iteration.

LANGUAGE: sql
CODE:
do $$
begin
  for counter in 1..6 by 2 loop
    raise notice 'counter: %', counter;
  end loop;
end; $$

----------------------------------------

TITLE: COALESCE in Price Calculations
DESCRIPTION: Uses COALESCE to handle null discounts when calculating net prices, substituting null with zero.

LANGUAGE: sql
CODE:
SELECT
  product,
  (price - COALESCE(discount, 0)) AS net_price
FROM
  items;

----------------------------------------

TITLE: Verifying Logical Replication Status in Postgres
DESCRIPTION: SQL query to check if logical replication is enabled by showing the wal_level configuration.

LANGUAGE: sql
CODE:
SHOW wal_level;

----------------------------------------

TITLE: Postgres Configuration Parameter Updates
DESCRIPTION: Renamed configuration parameters from zenith prefixes to neon prefixes for better consistency

LANGUAGE: sql
CODE:
zenith.page_server_connstring -> neon.pageserver_connstring
zenith.zenith_tenant -> neon.tenant_id
zenith.zenith_timeline -> neon.timeline_id
zenith.max_cluster_size -> neon.max_cluster_size
wal_acceptors -> safekeepers

----------------------------------------

TITLE: Defining Subscription Model
DESCRIPTION: PHP code for the Subscription model, defining relationships and attributes.

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Subscription extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'plan',
        'started_at',
        'ended_at',
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    protected $casts = [
        'started_at' => 'datetime',
        'ended_at' => 'datetime',
    ];
}

----------------------------------------

TITLE: Dockerizing Backend and Frontend Services
DESCRIPTION: Defines Dockerfiles for both the FastAPI backend and React frontend, and a Docker Compose configuration to run the full-stack application.

LANGUAGE: dockerfile
CODE:
FROM python:3.10-slim

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

WORKDIR /app

COPY . /app

RUN pip install uv

RUN uv pip install -r pyproject.toml --system

WORKDIR /app/src

EXPOSE 8000

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]


LANGUAGE: dockerfile
CODE:
FROM node:18-alpine AS base

WORKDIR /app

COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./

RUN \
if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
elif [ -f package-lock.json ]; then npm ci; \
elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \
else echo "Lockfile not found." && exit 1; \
fi

COPY . .

RUN npm run build

RUN npm install -g serve

EXPOSE 3000

CMD ["serve", "-s", "dist"]


LANGUAGE: yaml
CODE:
services:
  api:
    build:
      context: portfolio_backend/
      dockerfile: Dockerfile
    ports:
      - '8000:8000'
    env_file:
      - portfolio_backend/.env
  nextjs-app:
    build:
      context: portfolio_frontend/
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
    depends_on:
      - api


----------------------------------------

TITLE: Enabling pg_mooncake Extension in Postgres
DESCRIPTION: SQL commands to allow and create the pg_mooncake extension in a Neon database. This is required as the extension is currently in Beta.

LANGUAGE: sql
CODE:
SET neon.allow_unstable_extensions='true';

LANGUAGE: sql
CODE:
CREATE EXTENSION pg_mooncake;

----------------------------------------

TITLE: Using LOG() Function with Text Input in PostgreSQL
DESCRIPTION: This example shows how the LOG() function can handle text input by attempting to convert it to a number. It calculates the base-2 logarithm of the text '64'.

LANGUAGE: sql
CODE:
SELECT LOG(2, '64');

----------------------------------------

TITLE: Explaining PostgreSQL Query Plan
DESCRIPTION: Using the EXPLAIN statement to show the query plan for retrieving customers with the last name 'Purdy'. This demonstrates how PostgreSQL uses the index to optimize the query.

LANGUAGE: sql
CODE:
EXPLAIN
SELECT
    customer_id,
    first_name,
    last_name
FROM
    customer
WHERE
    last_name = 'Purdy';

----------------------------------------

TITLE: Importing Data from Heroku to Neon Postgres
DESCRIPTION: Heroku CLI command to pull data from a Heroku Postgres database and import it into a Neon Postgres database. This command requires the Heroku app name, Heroku database name, and Neon connection string.

LANGUAGE: shell
CODE:
heroku pg:pull --app [app] [heroku-pg-database] [neon-connection-string]

----------------------------------------

TITLE: Defining Todo Model Class
DESCRIPTION: C# class definition for the Todo entity model with basic properties.

LANGUAGE: csharp
CODE:
namespace NeonEfExample.Models
{
    public class Todo
    {
        public int Id { get; set; }
        public string? Title { get; set; }
        public bool IsComplete { get; set; }
    }
}

----------------------------------------

TITLE: Disabling PostgreSQL Triggers using ALTER TABLE
DESCRIPTION: This snippet demonstrates the basic syntax for disabling triggers in PostgreSQL. It shows how to disable a specific trigger or all triggers associated with a table using the ALTER TABLE statement.

LANGUAGE: sql
CODE:
ALTER TABLE table_name
DISABLE TRIGGER trigger_name | ALL

----------------------------------------

TITLE: Pagination Example with Cursor
DESCRIPTION: Example of using pagination parameters to retrieve the next set of project metrics using curl.

LANGUAGE: bash
CODE:
curl --request GET \
     --url 'https://console.neon.tech/api/v2/consumption_history/projects?cursor=divine-tree-77657175&limit=100&granularity=daily' \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $NEON_API_KEY' | jq

----------------------------------------

TITLE: Finding Duplicate Rows Using GROUP BY
DESCRIPTION: Query to identify duplicate entries by grouping and counting occurrences of each fruit.

LANGUAGE: sql
CODE:
SELECT
    fruit,
    COUNT( fruit )
FROM
    basket
GROUP BY
    fruit
HAVING
    COUNT( fruit )> 1
ORDER BY
    fruit;

----------------------------------------

TITLE: Configuring Postgres Client with Neon Serverless Driver
DESCRIPTION: This TypeScript snippet demonstrates how to use the Neon serverless driver to connect to a Neon database and execute a simple query to retrieve the PostgreSQL version.

LANGUAGE: typescript
CODE:
import { neon } from '@neondatabase/serverless';

const sql = neon(process.env.POSTGRES_URL);

async function getPgVersion() {
  const result = await sql`SELECT version()`;
  console.log(result[0]);
}

getPgVersion();

----------------------------------------

TITLE: RLS View Policy Definition
DESCRIPTION: Definition of an RLS policy for viewing todos, restricting access to authenticated users.

LANGUAGE: typescript
CODE:
pgPolicy('view todos', {
  for: 'select',
  to: 'authenticated',
  using: sql`(select auth.user_id() = user_id)`,
});

----------------------------------------

TITLE: S3 Backup GitHub Action Workflow
DESCRIPTION: GitHub Actions workflow configuration for automated database backups to S3. Handles Postgres installation, AWS credentials, and retention management.

LANGUAGE: yaml
CODE:
name: acme-analytics-prod

on:
  schedule:
    - cron: '0 0 * * *' # Runs at midnight UTC
  workflow_dispatch:

jobs:
  db-backup:
    runs-on: ubuntu-latest

    permissions:
      id-token: write

    env:
      RETENTION: 7
      DATABASE_URL: ${{ secrets.ACME_ANALYTICS_PROD }}

      IAM_ROLE: ${{ secrets.IAM_ROLE }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      AWS_REGION: 'us-east-1'
      PG_VERSION: '16'

    steps:
      - name: Install PostgreSQL
        run: |
          sudo apt install -y postgresql-common
          yes '' | sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh
          sudo apt install -y postgresql-${{ env.PG_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

----------------------------------------

TITLE: Simple String Formatting Example
DESCRIPTION: Shows a basic example of using FORMAT() to insert a value into a template string.

LANGUAGE: sql
CODE:
SELECT FORMAT('Hello, %s','PostgreSQL');

----------------------------------------

TITLE: Creating PostgreSQL Table for CSV Import
DESCRIPTION: Creates a new table named 'persons' with columns for storing personal information including id, names, date of birth, and email.

LANGUAGE: shellsql
CODE:
CREATE TABLE persons (
  id SERIAL,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  dob DATE,
  email VARCHAR(255),
  PRIMARY KEY (id)
);

----------------------------------------

TITLE: Configuring Laravel Environment for Neon Database
DESCRIPTION: Environment configuration for connecting Laravel to a Neon PostgreSQL database instance.

LANGUAGE: env
CODE:
DB_CONNECTION=pgsql
DB_HOST=your-neon-hostname.neon.tech
DB_PORT=5432
DB_DATABASE=<your-database-name>
DB_USERNAME=<your-username>
DB_PASSWORD=<your-password>

----------------------------------------

TITLE: PostgreSQL Table Verification Command
DESCRIPTION: Command-line instructions for verifying table creation using psql client tool. Shows how to connect to the database and list available tables.

LANGUAGE: sql
CODE:
psql -U postgres -d sales
\dt

----------------------------------------

TITLE: Finding Alternative Routes with pgrouting
DESCRIPTION: SQL query using pgrouting's pgr_ksp function to find multiple alternative routes between two nodes. This example finds two alternative paths from node 1 to node 4.

LANGUAGE: SQL
CODE:
SELECT
    route.path_id,
    route.path_seq,
    route.node,
    route.edge,
    route.cost,
    route.agg_cost,
    rn.name AS road_name
FROM pgr_ksp(
    'SELECT id, source, target, cost, reverse_cost FROM road_network',
    1, -- start node
    4, -- end node
    2, -- number of alternative paths
    directed := false,
    heap_paths := false
) AS route
LEFT JOIN road_network rn ON route.edge = rn.id
ORDER BY route.path_id, route.path_seq;

----------------------------------------

TITLE: Adding a Single Column to the Customers Table
DESCRIPTION: This example adds a 'phone' column to the 'customers' table.

LANGUAGE: sql
CODE:
ALTER TABLE customers
ADD COLUMN phone VARCHAR(25);

----------------------------------------

TITLE: Rendering Early Access Admonition in HTML
DESCRIPTION: This snippet displays an admonition block to inform users about an early access feature. It includes a title, message, and a link to more information about joining the Early Access Program.

LANGUAGE: html
CODE:
<Admonition type="comingSoon" title="Early Access">
This feature is available for members of our Early Access Program. Read more about joining up [here](/docs/introduction/roadmap#join-the-neon-early-access-program).
</Admonition>

----------------------------------------

TITLE: Implementing JSON Error Response Format in API
DESCRIPTION: Example of the standardized JSON error response format implemented across the API.

LANGUAGE: json
CODE:
{ "message": "error text" }

----------------------------------------

TITLE: Creating a New Laravel Project
DESCRIPTION: This command creates a new Laravel project named 'soft-deletes' and navigates to the project directory.

LANGUAGE: bash
CODE:
composer create-project laravel/laravel soft-deletes
cd soft-deletes

----------------------------------------

TITLE: Changing Default Tablespace with ALTER DATABASE in PostgreSQL
DESCRIPTION: This snippet shows how to change the default tablespace of a database using the ALTER DATABASE SET TABLESPACE statement. This operation physically moves tables and indexes to the new tablespace.

LANGUAGE: sql
CODE:
ALTER DATABASE database_name
SET TABLESPACE new_tablespace;

----------------------------------------

TITLE: Creating Username Validation Trigger
DESCRIPTION: Creates a trigger that executes the username validation function before INSERT or UPDATE operations on the staff table.

LANGUAGE: sql
CODE:
CREATE TRIGGER username_check
    BEFORE INSERT OR UPDATE
ON staff
FOR EACH ROW
    EXECUTE PROCEDURE check_staff_user();

----------------------------------------

TITLE: Generating Sequential Dates with MAKE_DATE
DESCRIPTION: Demonstrates how to combine MAKE_DATE() with generate_series() to create a sequence of consecutive dates.

LANGUAGE: sql
CODE:
SELECT MAKE_DATE(2023, 1, day) dates
FROM generate_series(1, 7) AS day;

----------------------------------------

TITLE: Dropping Multiple Columns in PostgreSQL Example
DESCRIPTION: Example of dropping multiple columns (isbn and description) from the books table simultaneously.

LANGUAGE: SQL
CODE:
ALTER TABLE books
  DROP COLUMN isbn,
  DROP COLUMN description;

----------------------------------------

TITLE: Supported Meta-Commands in Neon SQL Editor
DESCRIPTION: List of supported PostgreSQL meta-commands that can be used in the Neon SQL Editor for database administration and information retrieval.

LANGUAGE: bash
CODE:
Informational
  (options: S = show system objects, + = additional detail)
  \d[S+]                 list tables, views, and sequences
  \d[S+]  NAME           describe table, view, sequence, or index
  \da[S]  [PATTERN]      list aggregates
  \dA[+]  [PATTERN]      list access methods
  \dAc[+] [AMPTRN [TYPEPTRN]]  list operator classes
  \dAf[+] [AMPTRN [TYPEPTRN]]  list operator families
  \dAo[+] [AMPTRN [OPFPTRN]]   list operators of operator families
  \dAp[+] [AMPTRN [OPFPTRN]]   list support functions of operator families
  \db[+]  [PATTERN]      list tablespaces
  \dc[S+] [PATTERN]      list conversions
  \dconfig[+] [PATTERN]  list configuration parameters
  \dC[+]  [PATTERN]      list casts
  \dd[S]  [PATTERN]      show object descriptions not displayed elsewhere
  \dD[S+] [PATTERN]      list domains
  \ddp    [PATTERN]      list default privileges
  \dE[S+] [PATTERN]      list foreign tables
  \des[+] [PATTERN]      list foreign servers
  \det[+] [PATTERN]      list foreign tables
  \deu[+] [PATTERN]      list user mappings
  \dew[+] [PATTERN]      list foreign-data wrappers
  \df[anptw][S+] [FUNCPTRN [TYPEPTRN ...]]
                         list [only agg/normal/procedure/trigger/window] functions
  \dF[+]  [PATTERN]      list text search configurations
  \dFd[+] [PATTERN]      list text search dictionaries
  \dFp[+] [PATTERN]      list text search parsers
  \dFt[+] [PATTERN]      list text search templates
  \dg[S+] [PATTERN]      list roles
  \di[S+] [PATTERN]      list indexes
  \dl[+]                 list large objects, same as \lo_list
  \dL[S+] [PATTERN]      list procedural languages
  \dm[S+] [PATTERN]      list materialized views
  \dn[S+] [PATTERN]      list schemas
  \do[S+] [OPPTRN [TYPEPTRN [TYPEPTRN]]]
                         list operators
  \dO[S+] [PATTERN]      list collations
  \dp[S]  [PATTERN]      list table, view, and sequence access privileges
  \dP[itn+] [PATTERN]    list [only index/table] partitioned relations [n=nested]
  \drds [ROLEPTRN [DBPTRN]] list per-database role settings
  \drg[S] [PATTERN]      list role grants
  \dRp[+] [PATTERN]      list replication publications
  \dRs[+] [PATTERN]      list replication subscriptions
  \ds[S+] [PATTERN]      list sequences
  \dt[S+] [PATTERN]      list tables
  \dT[S+] [PATTERN]      list data types
  \du[S+] [PATTERN]      list roles
  \dv[S+] [PATTERN]      list views
  \dx[+]  [PATTERN]      list extensions
  \dX     [PATTERN]      list extended statistics
  \dy[+]  [PATTERN]      list event triggers
  \l[+]   [PATTERN]      list databases
  \lo_list[+]            list large objects
  \sf[+]  FUNCNAME       show a function's definition
  \sv[+]  VIEWNAME       show a view's definition
  \z[S]   [PATTERN]      same as \dp

----------------------------------------

TITLE: Installing Required .NET Packages
DESCRIPTION: Commands to install Entity Framework Core and Npgsql provider packages.

LANGUAGE: bash
CODE:
dotnet tool install --global dotnet-ef --version YOUR_DOTNET_VERSION
dotnet add package Microsoft.EntityFrameworkCore.Design --version YOUR_DOTNET_VERSION
dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL --version YOUR_DOTNET_VERSION

----------------------------------------

TITLE: Time Travel Connection Using Neon CLI
DESCRIPTION: Demonstrates how to establish a time travel connection to a specific point in a branch's history using the Neon CLI connection-string command with a timestamp parameter.

LANGUAGE: bash
CODE:
neon connection-string main@2024-01-01T00:00:00Z

----------------------------------------

TITLE: Performing Arithmetic Operations on Floating-point Values in PostgreSQL
DESCRIPTION: This snippet demonstrates a simple arithmetic operation (division) on floating-point numbers, highlighting potential precision issues.

LANGUAGE: sql
CODE:
SELECT 10.0 / 3.0;

----------------------------------------

TITLE: Creating a Table as a Specific Role in PostgreSQL
DESCRIPTION: This SQL command creates a new table 'customers' in the 'sales' database when logged in as the 'alice' role.

LANGUAGE: sql
CODE:
create table customers(
    customer_id int generated always as identity,
    customer_name varchar(150) not null,
    primary key(customer_id)
);

----------------------------------------

TITLE: Creating Function to List All Triggers in PostgreSQL
DESCRIPTION: This PL/pgSQL function creates a user-defined function named get_triggers() that returns all triggers with their associated tables in the current database.

LANGUAGE: plpgsql
CODE:
create or replace function get_triggers()
returns table (
	table_name text,
	trigger_name text
)
language plpgsql
as
$$
begin
	return query select
	  trg.event_object_table::text AS table_name,
	  trg.trigger_name::text
	from
	  information_schema.triggers trg
	group by
	  table_name,
	  trg.trigger_name
	order by
	  table_name,
	  trg.trigger_name;
end;
$$;

----------------------------------------

TITLE: Extracting Values from JSON Array Using jsonb_extract_path_text in PostgreSQL
DESCRIPTION: Shows how to use jsonb_extract_path_text to extract specific elements from a JSON array within a JSONB object.

LANGUAGE: sql
CODE:
SELECT
    jsonb_extract_path_text(profile, 'name') as name,
    jsonb_extract_path_text(profile, 'hobbies', '0') as first_hobby,
    jsonb_extract_path_text(profile, 'hobbies', '1') as second_hobby
FROM users;

----------------------------------------

TITLE: Pattern Matching in ltree Hierarchy using Wildcards in PostgreSQL
DESCRIPTION: SQL queries demonstrating pattern matching in ltree hierarchies using the ~ operator and lquery patterns. These examples show how to use wildcards to match specific patterns in the tree structure.

LANGUAGE: sql
CODE:
-- Find all laptop categories (using * wildcard)
SELECT id, name, path
FROM product_categories
WHERE path ~ 'electronics.computers.laptops.*';

LANGUAGE: sql
CODE:
-- Find categories that match a specific pattern
-- * matches zero or more labels
SELECT id, name, path
FROM product_categories
WHERE path ~ '*.*.ios'

----------------------------------------

TITLE: Neon API Base URL
DESCRIPTION: This snippet shows the base URL for Neon API requests. All API method paths should be appended to this base URL to construct the full request URL.

LANGUAGE: text
CODE:
https://console.neon.tech/api/v2/

----------------------------------------

TITLE: Creating Employee Table with JSON Data
DESCRIPTION: Creates a table structure for storing employee data with JSON array of phone numbers.

LANGUAGE: sql
CODE:
CREATE TABLE employees(
   id SERIAL PRIMARY KEY,
   name VARCHAR(255) NOT NULL,
   phones JSONB NOT NULL
);

----------------------------------------

TITLE: Simple COALESCE Example with Numbers
DESCRIPTION: Shows how COALESCE handles non-null numeric arguments by returning the first value.

LANGUAGE: sql
CODE:
SELECT COALESCE (1, 2);

----------------------------------------

TITLE: Creating a Subscription in Neon Destination Database
DESCRIPTION: SQL command to create a subscription in the Neon destination database, connecting it to the Aurora PostgreSQL source publication.

LANGUAGE: sql
CODE:
CREATE SUBSCRIPTION my_subscription CONNECTION 'postgresql://postgres:password@database-1.czmwaio8k05k.us-east-2.rds.amazonaws.com/postgres' PUBLICATION my_publication;

----------------------------------------

TITLE: Comparing json_serialize() and json() Functions in PostgreSQL
DESCRIPTION: Illustrates the difference between json_serialize() and json() functions, showing their complementary roles in JSON data handling.

LANGUAGE: sql
CODE:
-- json() for input conversion
SELECT json('{"name": "Alice"}');  -- Text to JSON

-- json_serialize() for output conversion
SELECT json_serialize('{"name": "Alice"}'::json);  -- JSON to Text

----------------------------------------

TITLE: Complex Payment Information Formatting
DESCRIPTION: Comprehensive example combining customer names, payment amounts, and formatted timestamps.

LANGUAGE: sql
CODE:
SELECT
    first_name || ' ' || last_name
    || ' paid ' ||
    TO_CHAR(
        amount,
        'l99D99'
    )
    || ' at ' ||
    TO_CHAR(
        payment_date,
        'HH24:MI:SS'
    )
    || ' on ' ||
    TO_CHAR(
        payment_date,
        'Mon-DD-YYYY'
    ) payment_info
FROM
    payment
INNER JOIN customer USING(customer_id)
ORDER BY
    rental_id;

----------------------------------------

TITLE: Pooled Connection String Example
DESCRIPTION: Example demonstrating how to get a pooled connection string using the --pooled flag

LANGUAGE: bash
CODE:
neon connection-string --pooled
postgresql://alex:AbC123dEf@ep-cool-darkness-123456-pooler.us-east-2.aws.neon.tech/dbname

----------------------------------------

TITLE: Resetting a Development Branch to Parent State
DESCRIPTION: Command to reset a development branch to the current state of the parent branch, including data and schema, using the Neon CLI.

LANGUAGE: bash
CODE:
neonctl branches reset  dev/developer_name --parent

----------------------------------------

TITLE: Renaming a Trigger using ALTER TRIGGER
DESCRIPTION: This SQL statement demonstrates the use of ALTER TRIGGER to rename the 'before_update_salary' trigger to 'salary_before_update'.

LANGUAGE: sql
CODE:
ALTER TRIGGER before_update_salary
ON employees
RENAME TO salary_before_update;

----------------------------------------

TITLE: Creating Validation Function for Username Check
DESCRIPTION: PL/pgSQL function that validates username requirements including minimum length of 8 characters and non-null values.

LANGUAGE: plpgsql
CODE:
CREATE FUNCTION check_staff_user()
    RETURNS TRIGGER
AS $$
BEGIN
    IF length(NEW.username) < 8 OR NEW.username IS NULL THEN
        RAISE EXCEPTION 'The username cannot be less than 8 characters';
    END IF;
    IF NEW.NAME IS NULL THEN
        RAISE EXCEPTION 'Username cannot be NULL';
    END IF;
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

----------------------------------------

TITLE: Converting Excess Days to Months with JUSTIFY_INTERVAL()
DESCRIPTION: Demonstrates how to use JUSTIFY_INTERVAL() to convert days exceeding 30 into months and remaining days.

LANGUAGE: sql
CODE:
SELECT JUSTIFY_INTERVAL('35 days');

----------------------------------------

TITLE: Drop Non-empty Schema Example
DESCRIPTION: Examples showing how to drop schemas containing objects using CASCADE option.

LANGUAGE: sql
CODE:
DROP SCHEMA scm;

LANGUAGE: sql
CODE:
DROP SCHEMA scm CASCADE;

LANGUAGE: sql
CODE:
DROP SCHEMA sales CASCADE;

----------------------------------------

TITLE: Creating and Querying a Sample Table in SQL
DESCRIPTION: These SQL commands create a new table with the current timestamp and then query it to verify the database connection.

LANGUAGE: sql
CODE:
CREATE TABLE my_table AS SELECT now();
SELECT * FROM my_table;

----------------------------------------

TITLE: Basic ALTER TABLE Syntax
DESCRIPTION: Shows the fundamental syntax for the ALTER TABLE command in PostgreSQL.

LANGUAGE: shellsql
CODE:
ALTER TABLE table_name action;

----------------------------------------

TITLE: Implementing All Rows Deletion Method in PHP for PostgreSQL
DESCRIPTION: Defines a deleteAll() method in the StockDB class that deletes all rows from the stocks table. It uses a prepared statement for execution and returns the number of rows deleted.

LANGUAGE: php
CODE:
   /**
     * Delete all rows in the stocks table
     * @return int the number of rows deleted
     */
    public function deleteAll() {

        $stmt = $this->pdo->prepare('DELETE FROM stocks');
        $stmt->execute();
        return $stmt->rowCount();
    }

----------------------------------------

TITLE: Creating Products Table with Sample Data
DESCRIPTION: Creates a products table and populates it with sample data containing accented characters.

LANGUAGE: sql
CODE:
CREATE TABLE products (
  id SERIAL PRIMARY KEY,
  name TEXT
);

INSERT INTO products (name) VALUES
  ('cafe'),
  ('café'),
  ('Café'),
  ('Café au lait');

----------------------------------------

TITLE: Creating PostgreSQL AFTER DELETE Trigger Function
DESCRIPTION: Defines a PL/pgSQL function to be executed after a DELETE operation. This function can access the deleted row's data using OLD.column_name.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION trigger_function_name()
RETURNS TRIGGER AS
$$
BEGIN
    -- This logic will be executed after the DELETE operation

    -- To access the values of a column of the deleted row:
    -- OLD.column_name

    RETURN OLD;
END;
$$
LANGUAGE plpgsql;

----------------------------------------

TITLE: Generate Integer Random Number
DESCRIPTION: Converting random decimal to integer using floor() function and type casting.

LANGUAGE: sql
CODE:
SELECT floor(random() * 10 + 1)::int;

----------------------------------------

TITLE: Checking Neon Usage Statistics via Slack Command
DESCRIPTION: Command to view current data transfer, compute time, and storage usage across all Neon projects directly in Slack. Returns usage statistics in a formatted message.

LANGUAGE: bash
CODE:
/neon usage

----------------------------------------

TITLE: Creating Sales Statistics Table
DESCRIPTION: SQL code to create a table structure for storing sales statistics with employee name, year, and amount columns.

LANGUAGE: sql
CODE:
CREATE TABLE sales_stats(
    name VARCHAR(100) NOT NULL,
    year SMALLINT NOT NULL CHECK (year > 0),
    amount DECIMAL(10,2) CHECK (amount >= 0),
    PRIMARY KEY (name,year)
);

----------------------------------------

TITLE: Creating an Updatable View in PostgreSQL
DESCRIPTION: This snippet creates an updatable view 'city_us' that includes only US cities from the 'cities' table. It demonstrates the basic syntax for creating a view with a WHERE clause.

LANGUAGE: sql
CODE:
CREATE VIEW city_us
AS
SELECT
  *
FROM
  cities
WHERE
  country = 'US';

----------------------------------------

TITLE: Deleting Old Branch
DESCRIPTION: Removes the old branch to free up storage space. Requires project_id and branch_id of the old branch.

LANGUAGE: bash
CODE:
curl --request DELETE \
     --url https://console.neon.tech/api/v2/projects/dark-cell-12604300/branches/br-wandering-forest-45768684 \
     --header 'Accept: application/json' \
     --header "Authorization: Bearer $NEON_API_KEY" | jq

----------------------------------------

TITLE: Creating and Populating Developers Table with JSONB Data
DESCRIPTION: SQL commands to create a table called 'developers' with a JSONB column for skills, and insert sample data.

LANGUAGE: sql
CODE:
CREATE TABLE developers (
 id INT PRIMARY KEY,
 name TEXT,
 skills JSONB
);

INSERT INTO developers (id, name, skills) VALUES
 (1, 'Alice', '["Java", "Python", "SQL"]'),
 (2, 'Bob', '["C++", "JavaScript"]'),
 (3, 'Charlie', '["HTML", "CSS", "React"]');

----------------------------------------

TITLE: Simple CASE Statement Syntax in PL/pgSQL
DESCRIPTION: Demonstrates the basic syntax of a simple CASE statement in PL/pgSQL. It compares a search expression with multiple expressions and executes the corresponding WHEN section upon finding a match.

LANGUAGE: sql
CODE:
case search-expression
   when expression_1 [, expression_2, ...] then
      when-statements
  [ ... ]
  [else
      else-statements ]
END case;

----------------------------------------

TITLE: Basic DROP INDEX Syntax
DESCRIPTION: The fundamental syntax for dropping an index in PostgreSQL, showing all available options including CONCURRENTLY, IF EXISTS, and CASCADE/RESTRICT clauses.

LANGUAGE: phpsql
CODE:
DROP INDEX  [ CONCURRENTLY] [ IF EXISTS ]  index_name
[ CASCADE | RESTRICT ];

----------------------------------------

TITLE: Retrieving Connection String for a Database Branch
DESCRIPTION: Command to get the connection string for a specific Neon database branch using the Neon CLI.

LANGUAGE: bash
CODE:
neonctl connection-string dev/developer_name

----------------------------------------

TITLE: Git Repository Setup
DESCRIPTION: Git commands to initialize repository, make first commit, and connect to GitHub remote.

LANGUAGE: bash
CODE:
git init
git add .
git commit -m "First commit: New Laravel project"
git remote add origin https://github.com/<yourusername>/codespaces-neon-demo.git
git branch -M main
git push -u origin main

----------------------------------------

TITLE: Configuring Neon Postgres Database Connection
DESCRIPTION: Environment variables for connecting to a Neon Postgres database in Laravel.

LANGUAGE: env
CODE:
DB_CONNECTION=pgsql
DB_HOST=your-neon-hostname.neon.tech
DB_PORT=5432
DB_DATABASE=your_database_name
DB_USERNAME=your_username
DB_PASSWORD=your_password

----------------------------------------

TITLE: Creating a Basic PostgreSQL AFTER UPDATE Trigger Function
DESCRIPTION: Template for creating a trigger function that executes after an UPDATE operation. The function must return a trigger type and contains the logic to be executed.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION trigger_function()
   RETURNS TRIGGER
   LANGUAGE PLPGSQL
AS
$$
BEGIN
   -- trigger logic
   -- ...
   RETURN NEW;
END;
$$

----------------------------------------

TITLE: Disabling All PostgreSQL Triggers on a Table
DESCRIPTION: This example demonstrates how to disable all triggers associated with the 'employees' table using the ALTER TABLE statement with the ALL keyword.

LANGUAGE: sql
CODE:
ALTER TABLE employees
DISABLE TRIGGER ALL;

----------------------------------------

TITLE: Function Creation with Dollar Quoting in PostgreSQL
DESCRIPTION: Demonstrates function creation using dollar quoting for improved readability.

LANGUAGE: sql
CODE:
create function find_film_by_id(
   id int
) returns film
language sql
as
$$
  select * from film
  where film_id = id;
$$;

----------------------------------------

TITLE: Calculating Multiple Circle Areas
DESCRIPTION: Queries the circles table to calculate areas for all stored circles using the PI() function.

LANGUAGE: sql
CODE:
SELECT id, radius, PI() * radius * radius area
FROM circles;

----------------------------------------

TITLE: Installing psycopg Driver in Azure Data Studio Notebook
DESCRIPTION: This code installs the psycopg driver, a popular PostgreSQL adapter for Python, using pip within an Azure Data Studio Notebook.

LANGUAGE: python
CODE:
!pip install psycopg

----------------------------------------

TITLE: Installing Previous pgvector Version in Postgres
DESCRIPTION: Demonstrates how to install a specific previous version of the pgvector extension in Neon Postgres.

LANGUAGE: sql
CODE:
CREATE EXTENSION vector VERSION '0.7.4';

----------------------------------------

TITLE: Creating a Role in Neon with TypeScript SDK
DESCRIPTION: TypeScript code to create a new Postgres role within a Neon branch using the SDK.

LANGUAGE: typescript
CODE:
import { createApiClient } from '@neondatabase/api-client';

const apiClient = createApiClient({
  apiKey: process.env.NEON_API_KEY!,
});

async function createNeonRole(projectId: string, branchId: string, roleName: string) {
  try {
    const response = await apiClient.createProjectBranchRole(projectId, branchId, {
      role: { name: roleName },
    });
    console.log('Role created:', response.data.role);
  } catch (error) {
    console.error('Error creating role:', error);
    throw error;
  }
}

// Example usage: In the project with ID "your-project-id", create a role named "new_user_role" in the branch with ID "your-branch-id"
createNeonRole('your-project-id', 'your-branch-id', 'new_user_role').catch((error) => {
  console.error('Error creating role:', error.message);
});

----------------------------------------

TITLE: Retrieving Messages with Token Limit
DESCRIPTION: SQL query to fetch messages while respecting token limits using a cumulative sum.

LANGUAGE: sql
CODE:
WITH cte AS (
  SELECT role, content, created, n_tokens,
         SUM(tokens) OVER (ORDER BY created DESC) AS cumulative_sum
  FROM message
)

SELECT role, content, created, n_tokens, cumulative_sum
FROM cte
WHERE cumulative_sum <= <MAX_HISTORY_TOKENS>;

----------------------------------------

TITLE: Creating Transactions Table Schema in SQL
DESCRIPTION: This SQL snippet defines the schema for the 'transactions' table, including foreign key relationships to the users and products tables.

LANGUAGE: sql
CODE:
CREATE TABLE transactions (
    transaction_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    product_id INT REFERENCES products(product_id) ON DELETE CASCADE,
    quantity INT NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50) NOT NULL CHECK (status IN ('pending', 'completed', 'failed'))
);

----------------------------------------

TITLE: URL Controller Implementation
DESCRIPTION: Controller class handling URL shortening and redirection logic with input validation.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers;

use App\Models\Url;
use Illuminate\Http\Request;
use Illuminate\Support\Str;

class UrlController extends Controller
{
    public function shorten(Request $request)
    {
        $request->validate([ 'url' => 'required|url' ]);

        $url = Url::create([
            'original_url' => $request->url,
            'short_code' => Str::random(6),
        ]);

        return response()->json([ 'short_url' => url($url->short_code) ], 201);
    }

    public function redirect($shortCode)
    {
        $url = Url::where('short_code', $shortCode)->firstOrFail();
        return redirect($url->original_url);
    }
}

----------------------------------------

TITLE: Creating Replication Slot with Wal2json
DESCRIPTION: SQL command to create a logical replication slot using the wal2json decoder plugin.

LANGUAGE: sql
CODE:
SELECT 'start' FROM pg_create_logical_replication_slot('test_slot', 'wal2json');

----------------------------------------

TITLE: Defining Task Model in Laravel Zero
DESCRIPTION: PHP code for the Task model class, specifying fillable attributes and date casting.

LANGUAGE: php
CODE:
<?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Task extends Model
{
    protected $fillable = ['title', 'description', 'status', 'priority', 'due_date'];

    protected $casts = [
        'due_date' => 'date',
    ];
}

----------------------------------------

TITLE: Verification SQL Queries
DESCRIPTION: SQL queries to verify the successful migration of data to Neon Postgres

LANGUAGE: sql
CODE:
\dt

SELECT data FROM orders
WHERE parent_id IN (
    SELECT id FROM customers
    LIMIT 2
)

----------------------------------------

TITLE: Basic PostgreSQL REPEAT() Function Syntax
DESCRIPTION: Demonstrates the basic syntax of the REPEAT() function that takes a string and number parameter to repeat the string the specified number of times.

LANGUAGE: sql
CODE:
REPEAT(string, number)

----------------------------------------

TITLE: Inserting Sample Data into PostgreSQL Tables
DESCRIPTION: This SQL code inserts sample data into the 'product_groups' and 'products' tables. It populates the tables with various product groups and products with their respective details.

LANGUAGE: SQL
CODE:
INSERT INTO product_groups (group_name)
VALUES
	('Smartphone'),
	('Laptop'),
	('Tablet');

INSERT INTO products (product_name, group_id,price)
VALUES
	('Microsoft Lumia', 1, 200),
	('HTC One', 1, 400),
	('Nexus', 1, 500),
	('iPhone', 1, 900),
	('HP Elite', 2, 1200),
	('Lenovo Thinkpad', 2, 700),
	('Sony VAIO', 2, 700),
	('Dell Vostro', 2, 800),
	('iPad', 3, 700),
	('Kindle Fire', 3, 150),
	('Samsung Galaxy Tab', 3, 200);

----------------------------------------

TITLE: Frontend Template Implementation
DESCRIPTION: Blade template for the URL shortener interface using Tailwind CSS.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>URL Shortener</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-gray-100 flex min-h-screen items-center justify-center">
    <div class="w-96 rounded-lg bg-white p-8 shadow-md">
      <h1 class="mb-4 text-2xl font-bold">URL Shortener</h1>
      <form id="urlForm" class="mb-4">
        <input
          type="url"
          id="urlInput"
          placeholder="Enter URL to shorten"
          required
          class="mb-2 w-full rounded border p-2"
        />
        <button type="submit" class="bg-blue-500 hover:bg-blue-600 w-full rounded p-2 text-white">
          Shorten URL
        </button>
      </form>
      <div id="result" class="hidden">
        <p>
          Shortened URL:
          <a id="shortUrl" href="#" target="_blank" class="text-blue-500"></a>
        </p>
      </div>
    </div>

    <script>
      document.getElementById('urlForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const url = document.getElementById('urlInput').value;
        const response = await fetch('/shorten', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': '{{ csrf_token() }}',
          },
          body: JSON.stringify({ url }),
        });
        const data = await response.json();
        document.getElementById('shortUrl').href = data.short_url;
        document.getElementById('shortUrl').textContent = data.short_url;
        document.getElementById('result').classList.remove('hidden');
      });
    </script>
  </body>
</html>

----------------------------------------

TITLE: Handling Partial Data with jsonb_populate_record in PostgreSQL
DESCRIPTION: Shows how to use jsonb_populate_record with a non-NULL base record to provide default values for missing fields in the JSONB payload.

LANGUAGE: sql
CODE:
INSERT INTO employees
SELECT *
FROM jsonb_populate_record(
    (1, 'ABC', 'Sales', 0)::employees,
    '{"id": "124", "name": "Jane Smith", "salary": "68000"}'
)
RETURNING *;

----------------------------------------

TITLE: Using lower() Function with CTE for Product Name Standardization
DESCRIPTION: Demonstrates how to use the lower() function within a Common Table Expression (CTE) to standardize product names in a sample products table.

LANGUAGE: sql
CODE:
WITH products AS (
    SELECT *
    FROM (
        VALUES
            ('LAPTOP Pro X'),
            ('SmartPhone Y'),
            ('Tablet ULTRA 2')
    ) AS t(product_name)
)
SELECT lower(product_name) AS standardized_name
FROM products;

----------------------------------------

TITLE: Inserting Angle Data into PostgreSQL Table
DESCRIPTION: Inserts multiple rows of angle data in degrees into the 'angles' table, including a NULL value to demonstrate NULL handling.

LANGUAGE: sql
CODE:
INSERT INTO angles (angle_degrees)
VALUES
    (45),
    (60),
    (90),
    (NULL)
RETURNING *;

----------------------------------------

TITLE: Basic RADIANS() Function Syntax in PostgreSQL
DESCRIPTION: Demonstrates the basic syntax of the RADIANS() function in PostgreSQL. The function takes a degree value as input and returns the equivalent in radians.

LANGUAGE: sql
CODE:
RADIANS(degrees_value)

----------------------------------------

TITLE: Installing Required Python Packages
DESCRIPTION: Commands for installing Flask and related dependencies using pip

LANGUAGE: bash
CODE:
pip install flask flask-sqlalchemy psycopg2-binary python-dotenv pytest

----------------------------------------

TITLE: Creating New Laravel Project
DESCRIPTION: Commands to create a new Laravel project and set up initial dependencies using Composer

LANGUAGE: bash
CODE:
composer create-project laravel/laravel laravel-livewire-blog
cd laravel-livewire-blog

----------------------------------------

TITLE: Basic pg_terminate_backend Function Syntax
DESCRIPTION: Shows the fundamental syntax of the pg_terminate_backend() function with its parameters. The function accepts a process ID and an optional timeout parameter, returning a boolean value indicating success.

LANGUAGE: sql
CODE:
pg_terminate_backend ( pid integer, timeout bigint DEFAULT 0 ) → boolean

----------------------------------------

TITLE: Environment Configuration
DESCRIPTION: Environment variables setup for API keys

LANGUAGE: env
CODE:
GOOGLE_API_KEY=YOUR_GOOGLE_API
NEON_API_KEY=YOUR_NEON_API_KEY

----------------------------------------

TITLE: Defining a BEFORE TRUNCATE Trigger Function for Companies Table
DESCRIPTION: Creates a PL/pgSQL function that raises a notice to prevent truncation of the companies table. This function will be called before any TRUNCATE operation on the companies table.

LANGUAGE: SQL
CODE:
CREATE OR REPLACE FUNCTION before_truncate_companies()
RETURNS TRIGGER AS
$$
BEGIN
    RAISE NOTICE 'Truncating the companies table is not allowed';
    RETURN NULL;
END;
$$
LANGUAGE plpgsql;

----------------------------------------

TITLE: Retrieving Neon Database Connection String
DESCRIPTION: Example of a Neon database connection string format. This string is used to connect to the Neon Postgres database.

LANGUAGE: bash
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require

----------------------------------------

TITLE: Creating Todos Table Without Neon Auth in SQL
DESCRIPTION: This SQL statement creates a todos table that references the users table using a foreign key, as would be necessary without Neon Auth.

LANGUAGE: sql
CODE:
CREATE TABLE todos (
    id SERIAL PRIMARY KEY,
    task TEXT NOT NULL,
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

----------------------------------------

TITLE: Monthly Usage Table Format in Markdown
DESCRIPTION: Markdown tables showing the monthly compute and storage metrics for a sample Neon project, including daily averages and monthly totals.

LANGUAGE: markdown
CODE:
| Metric  | Daily Average      | Monthly Total       |
| :------ | :----------------- | :------------------ |
| Compute | 23.94 active hours | 718.35 active hours |

| Metric  | Start of the month | End of the month |
| :------ | :----------------- | :--------------- |
| Storage | 23.6 GB-month      | 28 GB-month      |

----------------------------------------

TITLE: Extracting Title and Author from JSON
DESCRIPTION: Query demonstrating how to extract specific fields from JSON data using json_extract_path()

LANGUAGE: sql
CODE:
SELECT id,
      json_extract_path(info, 'title') as title,
      json_extract_path(info, 'author') as author
FROM books;

----------------------------------------

TITLE: Listing PostgreSQL Packages
DESCRIPTION: Command to display all installed PostgreSQL-related packages on the system.

LANGUAGE: bash
CODE:
dpkg -l | grep postgres

----------------------------------------

TITLE: Generating UUID with uuid_generate_v4() in PostgreSQL
DESCRIPTION: Demonstrates how to use the uuid_generate_v4() function from the uuid-ossp module to generate a UUID in older versions of PostgreSQL.

LANGUAGE: sql
CODE:
SELECT uuid_generate_v4();

----------------------------------------

TITLE: Finding Nodes at Specific Level in ltree Hierarchy in PostgreSQL
DESCRIPTION: SQL query to find all categories at the second level of the hierarchy using the nlevel() function. This demonstrates how to retrieve nodes at a specific depth in the tree.

LANGUAGE: sql
CODE:
SELECT id, name, path
FROM product_categories
WHERE nlevel(path) = 2;

----------------------------------------

TITLE: Querying Sample Data in Neon Postgres
DESCRIPTION: Example SQL query to retrieve data from a sample dataset loaded into Neon Postgres. This specific query selects all columns from the periodic_table where the AtomicNumber is 10.

LANGUAGE: SQL
CODE:
SELECT * FROM periodic_table WHERE "AtomicNumber" = 10;

----------------------------------------

TITLE: Basic DROP FUNCTION Syntax Example
DESCRIPTION: Shows the basic syntax for dropping a function in PostgreSQL, including optional parameters for IF EXISTS and CASCADE/RESTRICT options.

LANGUAGE: sql
CODE:
drop function [if exists] function_name(argument_list)
[cascade | restrict]

----------------------------------------

TITLE: Using PostgreSQL CEIL() Function with a Decimal Number
DESCRIPTION: Demonstrates how to use the CEIL() function to round up a decimal number to the nearest integer.

LANGUAGE: sql
CODE:
SELECT
    CEIL( 200.25 );

----------------------------------------

TITLE: Invalid EXP() Function Usage
DESCRIPTION: Shows an example of invalid input that causes an error due to non-numeric string.

LANGUAGE: plaintext
CODE:
SELECT EXP('10X') result;

----------------------------------------

TITLE: Executing Single Row Deletion in PHP Script for PostgreSQL
DESCRIPTION: Demonstrates how to use the StockDB class to delete a single row from the stocks table. It connects to the database, creates a StockDB instance, and calls the delete() method with a specific ID.

LANGUAGE: php
CODE:
<?php

require 'vendor/autoload.php';

use PostgreSQLTutorial\Connection as Connection;
use PostgreSQLTutorial\StockDB as StockDB;

try {
    // connect to the PostgreSQL database
    $pdo = Connection::get()->connect();
    //
    $stockDB = new StockDB($pdo);
    // delete a stock with a specified id
    $deletedRows = $stockDB->delete(1);
    echo 'The number of row(s) deleted: ' . $deletedRows . '<br>';

} catch (\PDOException $e) {
    echo $e->getMessage();
}

----------------------------------------

TITLE: Using jsonb_each_text() with Table Data in PostgreSQL
DESCRIPTION: This example shows how to use the jsonb_each_text() function with table data. It includes creating a table with a JSONB column, inserting data, and then expanding the JSON objects into key/value pairs.

LANGUAGE: sql
CODE:
CREATE TABLE links (
    id SERIAL PRIMARY KEY,
    href TEXT NOT NULL,
    attributes JSONB
);

LANGUAGE: sql
CODE:
INSERT INTO links (href, attributes)
VALUES
    ('https://example.com', '{"rel": "stylesheet", "type": "text/css", "media": "screen"}'),
    ('https://example.org', '{"rel": "icon", "type": "image/x-icon"}'),
    ('https://example.net', '{"rel": "alternate", "type": "application/rss+xml", "title": "RSS Feed"}');

LANGUAGE: sql
CODE:
SELECT
  href,
  key,
  value
FROM
  links,
  jsonb_each_text(attributes);

----------------------------------------

TITLE: Deleting a Neon Branch with GitHub Actions
DESCRIPTION: This YAML snippet shows how to configure a GitHub Action to delete a specific Neon branch. It requires the project ID, branch ID, and API key as inputs.

LANGUAGE: yaml
CODE:
name: Delete Neon Branch with GitHub Actions Demo
run-name: Delete a Neon Branch 🚀
on: [push]
jobs:
  delete-neon-branch:
    steps:
      uses: neondatabase/delete-branch-action@v3
      with:
        project_id: rapid-haze-373089
        branch: br-long-forest-224191
        api_key: ${{ secrets.NEON_API_KEY }}

----------------------------------------

TITLE: JSON Response for Branch Details API Call
DESCRIPTION: This JSON snippet shows an example response from the Neon API's Get branch details endpoint. It includes information such as branch ID, project ID, current state, state change timestamp, and other branch-specific details.

LANGUAGE: json
CODE:
{
  "branch": {
    "id": "br-broad-smoke-w2sqcu0i",
    "project_id": "proud-darkness-91591984",
    "parent_id": "br-falling-glade-w25m64ct",
    "parent_lsn": "0/1F78F48",
    "parent_timestamp": "2024-10-02T08:54:18Z",
    "name": "dev/alex",
    "current_state": "archived",
    "state_changed_at": "2024-11-06T14:20:58Z",
    "logical_size": 30810112,
    "creation_source": "console",
    "primary": false,
    "default": false,
    "protected": false,
    ...

----------------------------------------

TITLE: Analyzing JSONB Query Performance with EXPLAIN ANALYZE in Postgres
DESCRIPTION: This SQL snippet uses EXPLAIN ANALYZE to examine the query plan for a JSONB query. It demonstrates how to verify that the GIN index is being used for efficient querying of JSONB data.

LANGUAGE: sql
CODE:
EXPLAIN ANALYZE
SELECT *
FROM documents
WHERE data @> '{"author": {"name": "John Smith"}}'::jsonb;

----------------------------------------

TITLE: Connecting to PostgreSQL Server via Command Line
DESCRIPTION: This command shows how to connect to a PostgreSQL server using the psql command-line tool.

LANGUAGE: bash
CODE:
psql -U postgres

----------------------------------------

TITLE: Defining Admonitions in Markdown for Neon Documentation
DESCRIPTION: Demonstrates how to create admonitions in Neon's documentation using Markdown syntax. Admonitions are used to highlight important information with different types such as note, important, tip, warning, and info.

LANGUAGE: markdown
CODE:
<Admonition type="note">
This is an important note
</Admonition>

<Admonition type="note" title="Very important note">
This is a very important note.
</Admonition>

----------------------------------------

TITLE: Basic Usage of PostgreSQL LOCALTIME Function
DESCRIPTION: This snippet demonstrates how to use the LOCALTIME function to retrieve the current transaction's start time without specifying precision.

LANGUAGE: SQL
CODE:
SELECT LOCALTIME;

----------------------------------------

TITLE: Creating Inventory Table Structure
DESCRIPTION: SQL command to create an inventory table with product_id as primary key and quantity field with default value.

LANGUAGE: sql
CODE:
CREATE TABLE inventory(
    product_id INT PRIMARY KEY,
    quantity INT NOT NULL DEFAULT 0
);

----------------------------------------

TITLE: Basic PL/pgSQL IF-THEN Statement Structure
DESCRIPTION: Demonstrates the simplest form of the IF statement in PL/pgSQL, executing statements when a condition is true.

LANGUAGE: sql
CODE:
if condition then
   statements;
end if;

----------------------------------------

TITLE: Displaying Result Set Data in PHP HTML Template
DESCRIPTION: PHP code that calls the 'getAccounts' method and displays the results in an HTML table, including error handling and proper output escaping.

LANGUAGE: php
CODE:
<?php
require 'vendor/autoload.php';

use PostgreSQLTutorial\Connection as Connection;
use PostgreSQLTutorial\StoreProc as StoreProc;

try {
    // connect to the PostgreSQL database
    $pdo = Connection::get()->connect();
    //
    $storeProc = new StoreProc($pdo);

    $accounts = $storeProc->getAccounts();

} catch (\PDOException $e) {
    echo $e->getMessage();
}
?>
<!DOCTYPE html>
<html>
    <head>
        <title>PostgreSQL PHP: calling stored procedure demo</title>
        <link rel="stylesheet" href="https://cdn.rawgit.com/twbs/bootstrap/v4-dev/dist/css/bootstrap.css">
    </head>
    <body>
        <div class="container">
            <h1>Account List</h1>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Plan</th>
                        <th>Effective Date</th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach ($accounts as $account) : ?>
                        <tr>
                            <td><?php echo htmlspecialchars($account['id']) ?></td>
                            <td><?php echo htmlspecialchars($account['first_name']); ?></td>
                            <td><?php echo htmlspecialchars($account['last_name']); ?></td>
                            <td><?php echo htmlspecialchars($account['plan']); ?></td>
                            <td><?php echo htmlspecialchars($account['effective_date']); ?></td>
                        </tr>
                    <?php endforeach; ?>
                </tbody>
            </table>
        </div>
    </body>
</html>

----------------------------------------

TITLE: JWT Header Example
DESCRIPTION: Sample JWT header showing token type and algorithm

LANGUAGE: json
CODE:
{
  "alg": "HS256",
  "typ": "JWT"
}

----------------------------------------

TITLE: Truncating Timestamp to Hour Precision
DESCRIPTION: Example showing how to truncate a timestamp value to hour precision using DATE_TRUNC function.

LANGUAGE: sql
CODE:
SELECT DATE_TRUNC('hour', TIMESTAMP '2017-03-17 02:09:30');

----------------------------------------

TITLE: Creating and Populating Departments Table in PostgreSQL
DESCRIPTION: This snippet demonstrates how to create a 'departments' table and insert sample data into it using SQL commands.

LANGUAGE: sql
CODE:
CREATE TABLE departments(
    id SERIAL PRIMARY KEY,
    department_name VARCHAR(255) NOT NULL
);

INSERT INTO departments(department_name)
VALUES
   ('Sales'),
   ('Marketing')
RETURNING *;

----------------------------------------

TITLE: Creating Code Tabs in Markdown
DESCRIPTION: Shows how to create code tabs for displaying multiple code examples in different languages using the CodeTabs component.

LANGUAGE: markdown
CODE:
<CodeTabs labels={["Shell", "C++", "C#", "Java"]}>

```bash {2-4}
#!/bin/bash
STR="Hello World!"
echo $STR
```

```c++
#include <iostream>

int main() {
    std::cout << "Hello World";
    return 0;
}
```

```csharp
namespace HelloWorld
{
    class Hello {
        static void Main(string[] args)
        {
            System.Console.WriteLine("Hello World");
        }
    }
}
```

```java
import java.io.*;

class GFG {
    public static void main (String[] args) {
       System.out.println("Hello World");
    }
}
```

</CodeTabs>

----------------------------------------

TITLE: Performing Inner Join in PostgreSQL
DESCRIPTION: Demonstrates an inner join between basket_a and basket_b tables, matching fruits that exist in both tables based on their names.

LANGUAGE: sql
CODE:
SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
INNER JOIN basket_b
    ON fruit_a = fruit_b;

----------------------------------------

TITLE: Creating Sample Table in PostgreSQL
DESCRIPTION: Creates a new table named basket with an auto-incrementing ID and fruit name column.

LANGUAGE: sql
CODE:
CREATE TABLE basket(
    id SERIAL PRIMARY KEY,
    fruit VARCHAR(50) NOT NULL
);

----------------------------------------

TITLE: AVG() Function with HAVING Clause
DESCRIPTION: Shows how to use the AVG() function in a HAVING clause to filter groups based on average payment amounts.

LANGUAGE: sql
CODE:
SELECT
  customer_id,
  first_name,
  last_name,
  AVG (amount):: NUMERIC(10, 2)
FROM
  payment
  INNER JOIN customer USING(customer_id)
GROUP BY
  customer_id
HAVING
  AVG (amount) > 5
ORDER BY
  customer_id;

----------------------------------------

TITLE: Creating and Applying Database Migrations in Reflex
DESCRIPTION: Commands to create and apply database migrations when the schema changes.

LANGUAGE: bash
CODE:
reflex db makemigrations --message '<describe what changed>'

LANGUAGE: bash
CODE:
reflex db migrate

----------------------------------------

TITLE: PostgreSQL FLOOR() with GROUP BY Example
DESCRIPTION: Advanced example demonstrating how to use FLOOR() function with aggregation (SUM) and GROUP BY clause to calculate rounded down total amounts from the payment table.

LANGUAGE: sql
CODE:
SELECT
    customer_id,
    FLOOR(SUM( amount )) amount_paid
FROM
    payment
GROUP BY
    customer_id
ORDER BY
    amount_paid DESC;

----------------------------------------

TITLE: Configuring Role-Level Parameters in Neon
DESCRIPTION: SQL command to set the maintenance_work_mem parameter for a specific role in Neon, demonstrating role-level parameter configuration.

LANGUAGE: sql
CODE:
ALTER USER neondb_owner SET maintenance_work_mem='1 GB';

----------------------------------------

TITLE: Updating Sample Data in PostgreSQL
DESCRIPTION: Updates a row in the 'bar' table to create a difference between the two tables for comparison.

LANGUAGE: sql
CODE:
UPDATE
  bar
SET
  name = 'c'
WHERE
  id = 2;

----------------------------------------

TITLE: Listing Organization API Keys
DESCRIPTION: Retrieves a list of all API keys for an organization. Returns key metadata but not the actual tokens.

LANGUAGE: bash
CODE:
curl --request GET \
     --url 'https://console.neon.tech/api/v2/organizations/{org_id}/api_keys' \
     --header 'authorization: Bearer $PERSONAL_API_KEY' | jq

LANGUAGE: json
CODE:
[
  {
    "id": 123456,
    "name": "my-key-name",
    "created_at": "2024-01-01T12:00:00Z",
    "created_by": {
      "id": "user-abc123de-4567-8fab-9012-3cdef4567890",
      "name": "John Smith",
      "image": "https://avatar.example.com/user.jpg"
    },
    "last_used_at": "2024-01-01T12:30:00Z",
    "last_used_from_addr": "192.0.2.1,192.0.2.2"
  }
]

----------------------------------------

TITLE: Basic Usage of jsonb_array_elements() in PostgreSQL
DESCRIPTION: Demonstrates the basic syntax and usage of the jsonb_array_elements() function to expand a simple JSON array of numbers and strings.

LANGUAGE: SQL
CODE:
SELECT jsonb_array_elements('[1,2,3]');

LANGUAGE: SQL
CODE:
SELECT jsonb_array_elements('["red","green","blue"]');

----------------------------------------

TITLE: Installing Laravel Installer
DESCRIPTION: Install the Laravel installer globally using Composer and verify the installation.

LANGUAGE: bash
CODE:
composer global require laravel/installer

LANGUAGE: bash
CODE:
laravel --version

----------------------------------------

TITLE: Automating Sentiment Analysis with Azure Functions
DESCRIPTION: JavaScript code for an Azure Function that runs every two hours to process feedback from the Neon Postgres database.

LANGUAGE: javascript
CODE:
const { processFeedback } = require('./src/analyze');

module.exports = async function (context, myTimer) {
  const timeStamp = new Date().toISOString();

  if (myTimer.isPastDue) {
    context.log('Timer function is running late!');
  }

  try {
    await processFeedback();
    context.log('Sentiment analysis completed successfully:', timeStamp);
  } catch (err) {
    context.log.error('Error processing feedback:', err);
    throw err;
  }
};

----------------------------------------

TITLE: Basic ROW_NUMBER Function Syntax
DESCRIPTION: Demonstrates the basic syntax of ROW_NUMBER() function with optional PARTITION BY and ORDER BY clauses.

LANGUAGE: sql
CODE:
ROW_NUMBER() OVER(
    [PARTITION BY column_1, column_2,…]
    [ORDER BY column_3,column_4,…]
)

----------------------------------------

TITLE: Using EXP() with Numeric Strings
DESCRIPTION: Demonstrates using the EXP() function with a valid numeric string input.

LANGUAGE: sql
CODE:
SELECT EXP('10') result;

----------------------------------------

TITLE: Creating and Dropping a Basic PostgreSQL Tablespace
DESCRIPTION: Sequence of SQL commands to create a new tablespace and then drop it using the DROP TABLESPACE statement.

LANGUAGE: sql
CODE:
CREATE TABLESPACE sample_ts
LOCATION 'C:/pgdata/demo';

DROP TABLESPACE sample_ts;

----------------------------------------

TITLE: Single Column Type Change Example
DESCRIPTION: Changes the data type of the name column from TEXT to VARCHAR(255).

LANGUAGE: sql
CODE:
ALTER TABLE assets
ALTER COLUMN name TYPE VARCHAR(255);

----------------------------------------

TITLE: Basic DROP TRIGGER Syntax
DESCRIPTION: The fundamental syntax for dropping a trigger from a table, with optional IF EXISTS clause and CASCADE/RESTRICT options.

LANGUAGE: sql
CODE:
DROP TRIGGER [IF EXISTS] trigger_name
ON table_name
[ CASCADE | RESTRICT ];

----------------------------------------

TITLE: Connecting to Neon Database in Azure Data Studio Notebook
DESCRIPTION: This code establishes a connection to a Neon database using psycopg. It requires a valid Neon connection string to be provided.

LANGUAGE: python
CODE:
import os
import psycopg

# Provide your Neon connection string
connection_string = "postgresql://[user]:[password]@[neon_hostname]/[dbname]"

# Connect using the connection string
connection = psycopg.connect(connection_string)

# Create a new cursor object
cursor = connection.cursor()

----------------------------------------

TITLE: Creating Sample Tables for RENAME COLUMN Examples
DESCRIPTION: SQL statements to create two sample tables (customers and customer_groups) for demonstrating column renaming operations.

LANGUAGE: sql
CODE:
CREATE TABLE customer_groups (
  id serial PRIMARY KEY,
  name VARCHAR NOT NULL
);
CREATE TABLE customers (
  id serial PRIMARY KEY,
  name VARCHAR NOT NULL,
  phone VARCHAR NOT NULL,
  email VARCHAR,
  group_id INT,
  FOREIGN KEY (group_id) REFERENCES customer_groups (id)
);

----------------------------------------

TITLE: Basic COALESCE Function Syntax
DESCRIPTION: Demonstrates the basic syntax of the PostgreSQL COALESCE function that accepts multiple arguments and returns the first non-null value.

LANGUAGE: sql
CODE:
COALESCE (argument_1, argument_2, …);

----------------------------------------

TITLE: Concurrently Refreshing Materialized View in PostgreSQL
DESCRIPTION: This SQL snippet shows how to refresh the 'daily_revenue' materialized view concurrently. This allows the view to remain accessible during the refresh process, but requires a unique index on the view.

LANGUAGE: sql
CODE:
REFRESH MATERIALIZED VIEW CONCURRENTLY daily_revenue;

----------------------------------------

TITLE: Configuring Reflex Database Connection
DESCRIPTION: Python code to configure the database connection in the rxconfig.py file, including an example of using an environment variable for the connection string.

LANGUAGE: python
CODE:
# rxconfig.py
import reflex as rx

config = rx.Config(
    app_name="new_project",
    # Connect to your own database.
    db_url="<connection-string-from-neon>",
)

LANGUAGE: python
CODE:
import os

DATABASE_URL = os.getenv("NEON_DATABASE_URL")

config = rx.Config(
    app_name="new_project",
    db_url=DATABASE_URL,
)

----------------------------------------

TITLE: Converting Table Data from Radians to Degrees
DESCRIPTION: Queries the angles table and converts all radian values to degrees, rounding the results.

LANGUAGE: sql
CODE:
SELECT
    id,
    angle_radians,
    ROUND(DEGREES(angle_radians)::numeric, 0) AS angle_degrees
FROM
    angles;

----------------------------------------

TITLE: Creating and Populating Hobbies Table in SQL
DESCRIPTION: Creates a 'hobbies' table with columns for hobby name, difficulty level, and average cost, then inserts sample data.

LANGUAGE: sql
CODE:
CREATE TABLE hobbies (
   hobby_id SERIAL PRIMARY KEY,
   hobby_name VARCHAR(255),
   difficulty_level VARCHAR(50),
   average_cost VARCHAR(50)
);

INSERT INTO hobbies (hobby_name, difficulty_level, average_cost)
VALUES
    ('Reading', 'Easy', 'Low'),
    ('Cycling', 'Moderate', 'Medium'),
    ('Gaming', 'Variable', 'High'),
    ('Cooking', 'Variable', 'Low');

----------------------------------------

TITLE: Creating and Populating Employees Table
DESCRIPTION: Creating a new employees table with birth dates and inserting sample data for age calculation demonstration.

LANGUAGE: sql
CODE:
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    date_of_birth DATE NOT NULL
);

INSERT INTO employees (name, date_of_birth)
VALUES
    ('John Doe', '1992-05-15'),
    ('Jane Smith', '1995-08-22'),
    ('Bob Johnson', '1998-11-10')
RETURNING *;

----------------------------------------

TITLE: MIN_SCALE() with Trailing Zeros
DESCRIPTION: Example showing how MIN_SCALE() handles numbers with trailing zeros, returning the minimum scale needed to represent the significant decimal places.

LANGUAGE: sql
CODE:
SELECT min_scale(1.2300);

----------------------------------------

TITLE: Using ProductDB Class to Update Product Data
DESCRIPTION: This code snippet demonstrates how to use the ProductDB class to update the name and price of a product. It calls the update method and prints the number of updated rows.

LANGUAGE: java
CODE:
public class Main {
    public static void main(String[] args) {
        int updatedRows = ProductDB.update(1, "Phone Cover", 22.49);
        System.out.println("Updated Rows: " + updatedRows);
    }
}

----------------------------------------

TITLE: Creating Sample Index
DESCRIPTION: Example of creating an index on the first_name column of the actor table for demonstration purposes.

LANGUAGE: sql
CODE:
CREATE INDEX idx_actor_first_name
ON actor (first_name);

----------------------------------------

TITLE: Neon OAuth Server Metadata Response
DESCRIPTION: Example JSON response from the Neon OAuth server's well-known configuration endpoint. This metadata provides essential information about the OAuth server's capabilities and endpoints.

LANGUAGE: json
CODE:
{
  "issuer": "https://oauth2.neon.tech/",
  "authorization_endpoint": "https://oauth2.neon.tech/oauth2/auth",
  "token_endpoint": "https://oauth2.neon.tech/oauth2/token",
  "jwks_uri": "https://oauth2.neon.tech/.well-known/jwks.json",
  "subject_types_supported": ["public"],
  "response_types_supported": [
    "code",
    "code id_token",
    "id_token",
    "token id_token",
    "token",
    "token id_token code"
  ],
  "claims_supported": ["sub"],
  "grant_types_supported": [
    "authorization_code",
    "implicit",
    "client_credentials",
    "refresh_token"
  ],
  "response_modes_supported": ["query", "fragment"],
  "userinfo_endpoint": "https://oauth2.neon.tech/userinfo",
  "scopes_supported": ["offline_access", "offline", "openid"],
  "token_endpoint_auth_methods_supported": [
    "client_secret_post",
    "client_secret_basic",
    "private_key_jwt",
    "none"
  ],
  "userinfo_signing_alg_values_supported": ["none", "RS256"],
  "id_token_signing_alg_values_supported": ["RS256"],
  "request_parameter_supported": true,
  "request_uri_parameter_supported": true,
  "require_request_uri_registration": true,
  "claims_parameter_supported": false,
  "revocation_endpoint": "https://oauth2.neon.tech/oauth2/revoke",
  "backchannel_logout_supported": true,
  "backchannel_logout_session_supported": true,
  "frontchannel_logout_supported": true,
  "frontchannel_logout_session_supported": true,
  "end_session_endpoint": "https://oauth2.neon.tech/oauth2/sessions/logout",
  "request_object_signing_alg_values_supported": ["RS256", "none"],
  "code_challenge_methods_supported": ["plain", "S256"]
}

----------------------------------------

TITLE: Inserting Sample Customer Feedback for Testing
DESCRIPTION: SQL script to insert sample customer feedback with different sentiment labels into the customer_feedback table for testing purposes.

LANGUAGE: sql
CODE:
INSERT INTO customer_feedback (customer_id, feedback_text, product_id) VALUES
-- Positive feedback
('CUST001', 'The new dashboard design is fantastic! Much easier to find everything I need and the analytics features are exactly what we were looking for.', 'SAAS-DASH'),
('CUST002', 'Your customer support team is incredible. Had an issue with our API integration and they helped us resolve it within minutes.', 'SAAS-SUPPORT'),
('CUST003', 'The automated reporting feature saves me hours every week. Best investment we''ve made this year for our analytics stack!', 'SAAS-REPORT'),

-- Mixed feedback
('CUST004', 'Love most of the new features, but the export functionality is a bit limited. Would love to see more format options.', 'SAAS-EXPORT'),
('CUST005', 'Great platform overall, though it can be slow during peak hours. The UI is intuitive but some advanced features are hard to find.', 'SAAS-PERF'),
('CUST006', 'Good value for enterprise plan, but smaller teams might find it pricey. The collaboration features make it worth it for us.', 'SAAS-PRICE'),

-- Negative feedback
('CUST007', 'Been experiencing frequent timeouts for the past week. Our team''s productivity has taken a hit and support hasn''t provided a clear timeline for resolution.', 'SAAS-PERF'),
('CUST008', 'The recent UI update is a massive step backward. Can''t find basic features anymore and my team is frustrated.', 'SAAS-UI'),
('CUST009', 'Pricing increased by 40% with barely any notice. Considering switching to alternatives as this no longer fits our budget.', 'SAAS-PRICE'),

-- Detailed feedback
('CUST010', 'We''ve been using the platform for 6 months now. The API documentation is comprehensive and integration was smooth. The webhook reliability has been perfect, and the custom event tracking is powerful. Only wish the dashboard had more customization options.', 'SAAS-API'),
('CUST011', 'While the data visualization options are powerful, the learning curve is steep. Took our team weeks to fully understand all features. Once mastered though, the insights we get are invaluable.', 'SAAS-VIS'),
('CUST012', 'The collaboration features are game-changing for our remote team. Real-time editing, commenting, and version control work flawlessly. However, the mobile app needs improvement.', 'SAAS-COLLAB'),

-- Technical feedback
('CUST013', 'REST API rate limits are too restrictive on the growth plan. Had to upgrade just for the API limits even though we don''t need the other enterprise features.', 'SAAS-API'),
('CUST014', 'SSO integration was unnecessarily complicated. Documentation is outdated and support couldn''t help with our specific Azure AD setup.', 'SAAS-AUTH'),
('CUST015', 'The new GraphQL API is amazing! Much more efficient than the REST endpoints. Query performance improved our app''s load time significantly.', 'SAAS-API');

----------------------------------------

TITLE: Basic pg_restore Command Syntax
DESCRIPTION: The fundamental syntax for using pg_restore to restore a PostgreSQL database from an archive file

LANGUAGE: csssql
CODE:
pg_restore [connection-option] [option] [filename]

----------------------------------------

TITLE: Creating User and Schema Example
DESCRIPTION: Complete example showing how to create a user role and associated schemas.

LANGUAGE: sql
CODE:
CREATE ROLE john
LOGIN
PASSWORD 'Postgr@s321!';

CREATE SCHEMA AUTHORIZATION john;

CREATE SCHEMA IF NOT EXISTS doe AUTHORIZATION john;

----------------------------------------

TITLE: Basic MIN_SCALE() Function Syntax
DESCRIPTION: Demonstrates the basic syntax of the MIN_SCALE() function. The function takes a numeric value as input and returns an integer representing the minimum number of decimal places needed.

LANGUAGE: sql
CODE:
min_sacle(n)

----------------------------------------

TITLE: Deleting All Rows from Table
DESCRIPTION: Demonstrates how to delete all rows from a table by omitting the WHERE clause.

LANGUAGE: sql
CODE:
DELETE FROM todos;

----------------------------------------

TITLE: Basic DROP SCHEMA Syntax
DESCRIPTION: The basic syntax for dropping a schema in PostgreSQL, showing optional IF EXISTS clause and CASCADE/RESTRICT options.

LANGUAGE: css
CODE:
DROP SCHEMA [IF EXISTS] schema_name
[ CASCADE | RESTRICT ];

----------------------------------------

TITLE: Generating Migration for Schema Change
DESCRIPTION: Command to generate a new migration file for adding the Country property to the Author entity.

LANGUAGE: bash
CODE:
dotnet ef migrations add AddCountryToAuthor

----------------------------------------

TITLE: Python Implementation for Calling PostgreSQL Stored Procedure
DESCRIPTION: Complete Python function that demonstrates calling a PostgreSQL stored procedure with error handling and connection management

LANGUAGE: python
CODE:
import psycopg2
from config import load_config


def add_part(part_name, vendor_name):
    """ Add a new part """
    # read database configuration
    params = load_config()

    try:
        # connect to the PostgreSQL database
        with psycopg2.connect(**params) as conn:
            with conn.cursor() as cur:
                # call a stored procedure
                cur.execute('CALL add_new_part(%s,%s)', (part_name, vendor_name))

            # commit the transaction
            conn.commit()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)


if __name__ == '__main__':
    add_part('OLED', 'LG')

----------------------------------------

TITLE: Changing Schema Owner Example
DESCRIPTION: Example demonstrating how to change the owner of the 'finance' and 'accounting' schemas to 'postgres'.

LANGUAGE: sql
CODE:
ALTER SCHEMA finance
OWNER TO postgres;

LANGUAGE: sql
CODE:
ALTER SCHEMA accounting
OWNER TO postgres;

----------------------------------------

TITLE: Creating Role via Neon API
DESCRIPTION: Curl command to create a replication role using the Neon API.

LANGUAGE: bash
CODE:
curl 'https://console.neon.tech/api/v2/projects/hidden-cell-763301/branches/br-blue-tooth-671580/roles' \
  -H 'Accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY" \
  -H 'Content-Type: application/json' \
  -d '{
  "role": {
    "name": "replication_user"
  }
}' | jq

----------------------------------------

TITLE: Drop Empty Schema Example
DESCRIPTION: Example showing how to drop an empty schema with IF EXISTS clause.

LANGUAGE: css
CODE:
DROP SCHEMA IF EXISTS accounting;

----------------------------------------

TITLE: Creating Vector Search Indexes
DESCRIPTION: SQL commands to create vector search indexes on the articles table in Neon Postgres. These indexes improve performance for similarity searches.

LANGUAGE: SQL
CODE:
CREATE INDEX ON public.articles USING ivfflat (content_vector) WITH (lists = 1000);

CREATE INDEX ON public.articles USING ivfflat (title_vector) WITH (lists = 1000);

----------------------------------------

TITLE: Basic MAKE_DATE Usage Example
DESCRIPTION: Demonstrates how to create a specific date using the MAKE_DATE() function with literal values.

LANGUAGE: sql
CODE:
SELECT MAKE_DATE(2023,3, 25);

----------------------------------------

TITLE: Time Zone Conversion
DESCRIPTION: Converting time values between different time zones using AT TIME ZONE syntax.

LANGUAGE: sql
CODE:
SELECT LOCALTIME AT TIME ZONE 'UTC-7';

----------------------------------------

TITLE: Implementing RLS Policies with Drizzle ORM
DESCRIPTION: TypeScript code showing how to implement RLS policies using Drizzle ORM for a todos table.

LANGUAGE: typescript
CODE:
import { InferSelectModel, sql } from 'drizzle-orm';
import { bigint, boolean, pgTable, text, timestamp } from 'drizzle-orm/pg-core';
import { authenticatedRole, authUid, crudPolicy } from 'drizzle-orm/neon';

export const todos = pgTable(
  'todos',
  {
    id: bigint('id', { mode: 'bigint' }).primaryKey().generatedByDefaultAsIdentity(),
    userId: text('user_id')
      .notNull()
      .default(sql`(auth.user_id())`),
    task: text('task').notNull(),
    isComplete: boolean('is_complete').notNull().default(false),
    insertedAt: timestamp('inserted_at', { withTimezone: true }).defaultNow().notNull(),
  },
  (table) => [
    crudPolicy({
      role: authenticatedRole,
      read: authUid(table.userId),
      modify: authUid(table.userId),
    }),
  ]
);

export type Todo = InferSelectModel<typeof todos>;

----------------------------------------

TITLE: Inserting Sample JSONB Data into PostgreSQL Table
DESCRIPTION: Inserts two rows of sample JSONB data into the 'documents' table, each containing nested JSON objects with employee information including name, age, and contact details.

LANGUAGE: sql
CODE:
INSERT INTO documents(data)
VALUES
  ('{"employee":{"name":"John Doe","age":22,"contacts":[{"type":"email","value":"[[email protected]](../cdn-cgi/l/email-protection.html)"},{"type":"phone","value":"408-123-456"}]}}'),
  ('{"employee":{"name":"Jane Doe","age":21,"contacts":[{"type":"email","value":"[[email protected]](../cdn-cgi/l/email-protection.html)"},{"type":"phone","value":"408-123-789"}]}');

----------------------------------------

TITLE: COALESCE with NULL Values
DESCRIPTION: Demonstrates how COALESCE skips NULL values to find the first non-null argument.

LANGUAGE: sql
CODE:
SELECT COALESCE (NULL, 2 , 1);

----------------------------------------

TITLE: Dropping Multiple Views
DESCRIPTION: Example of dropping multiple views in a single statement.

LANGUAGE: sql
CODE:
DROP VIEW film_length_stat, film_category_stat;

----------------------------------------

TITLE: MIN_SCALE() with Exact Decimals
DESCRIPTION: Example demonstrating MIN_SCALE() function with a number having exact decimal places without trailing zeros.

LANGUAGE: sql
CODE:
SELECT min_scale(1.23);

----------------------------------------

TITLE: SQL Table Creation Statement
DESCRIPTION: SQL statement for creating a products table with id, name, and price columns. The id is set as a SERIAL PRIMARY KEY, name as VARCHAR with NOT NULL constraint, and price as DECIMAL with NOT NULL constraint.

LANGUAGE: java
CODE:
var sql = "CREATE TABLE products (" +
            "    id SERIAL PRIMARY KEY," +
            "    name VARCHAR(255) NOT NULL," +
            "    price DECIMAL(10, 2) NOT NULL" +
            ");"

----------------------------------------

TITLE: EXPLAIN Query Execution Plan
DESCRIPTION: Query to examine the execution plan and verify index usage.

LANGUAGE: sql
CODE:
EXPLAIN SELECT *
FROM actor
WHERE first_name = 'John';

----------------------------------------

TITLE: Specifying OAuth Callback URLs
DESCRIPTION: Example of callback URLs required for the OAuth integration. These URLs are used to redirect users after completing the authorization flow.

LANGUAGE: text
CODE:
https://app.company.com/api/integrations/neon/callback
https://app.stage.company.com/api/integrations/neon/callback
http://localhost:3000/api/integrations/neon/callback

----------------------------------------

TITLE: Configuring Database Connection in JavaScript
DESCRIPTION: JavaScript code to set up a connection pool to the Neon Postgres database using the pg package.

LANGUAGE: javascript
CODE:
const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false,
  },
});

pool.connect((err, client, release) => {
  if (err) {
    console.error('Error connecting to the database:', err);
    return;
  }
  console.log('Successfully connected to Neon database');
  release();
});

module.exports = {
  query: (text, params) => pool.query(text, params),
  pool,
};

----------------------------------------

TITLE: Creating Database Backup with pg_dump
DESCRIPTION: Command to create a tar format backup of the dvdrental database

LANGUAGE: css
CODE:
pg_dump -U postgres -d dvdrental -F tar -f d:\backup\dvdrental.tar

----------------------------------------

TITLE: Creating a Candidates Table in PostgreSQL
DESCRIPTION: This SQL command creates a new table named 'candidates' with various columns and constraints.

LANGUAGE: sql
CODE:
create table candidates (
    candidate_id int generated always as identity,
    first_name varchar(100) not null,
    last_name varchar(100) not null,
    email varchar(255) not null unique,
    phone varchar(25) not null,
    primary key(candidate_id)
);

----------------------------------------

TITLE: Inserting Sample Student Scores
DESCRIPTION: SQL insert statement to populate the student_scores table with sample data for multiple students and subjects.

LANGUAGE: sql
CODE:
INSERT INTO student_scores (name, subject, score)
VALUES
  ('Alice', 'Math', 90),
  ('Bob', 'Math', 85),
  ('Alice', 'Physics', 92),
  ('Bob', 'Physics', 88),
  ('Charlie', 'Math', 95),
  ('Charlie', 'Physics', 90);

----------------------------------------

TITLE: Organization List JSON Output
DESCRIPTION: Example showing the JSON output format when listing organizations, including additional timestamps not shown in table format.

LANGUAGE: json
CODE:
[
  {
    "id": "org-xxxxxxxx-xxxxxxxx",
    "name": "Example Org",
    "handle": "example-org-xxxxxxxx",
    "created_at": "2024-04-22T16:50:41Z",
    "updated_at": "2024-06-28T15:38:26Z"
  }
]

----------------------------------------

TITLE: Restoring DVD Rental Database Example
DESCRIPTION: This shell command demonstrates restoring the 'dvdrental' database from a SQL dump file named 'dvdrental.sql' using psql.

LANGUAGE: shell
CODE:
psql -U postgres -d dvdrental -f dvdrental.sql

----------------------------------------

TITLE: Creating Users Table and Inserting Data in SQL
DESCRIPTION: This snippet creates a 'users' table with columns for id, name, age, and city, then inserts sample data into it.

LANGUAGE: sql
CODE:
CREATE TABLE users (
 id SERIAL PRIMARY KEY,
 name TEXT NOT NULL,
 age INTEGER,
 city TEXT
);

INSERT INTO users (name, age, city)
VALUES ('John Doe', 30, 'New York'),
      ('Jane Doe', 25, 'London');

----------------------------------------

TITLE: Inserting Sample Data into Employees Table in PostgreSQL
DESCRIPTION: This SQL snippet inserts sample employee data into the 'employees' table created in the previous example. This data is used to demonstrate jsonb_populate_recordset() with table data.

LANGUAGE: sql
CODE:
INSERT INTO employees (name, age, salary)
VALUES
  ('John Doe', 25, 70000),
  ('Jane Smith', 22, 80000);

----------------------------------------

TITLE: Comparing Serial ID with UUID for API Users
DESCRIPTION: Creates a table that demonstrates the difference between sequential Serial IDs and non-sequential UUIDs for tracking API users.

LANGUAGE: sql
CODE:
CREATE TABLE api_users (
    serial_id SERIAL PRIMARY KEY,
    uuid_id UUID DEFAULT gen_random_uuid(),
    username TEXT NOT NULL
);

INSERT INTO api_users (username)
VALUES
    ('user1'),
    ('user2'),
    ('user3')
RETURNING *;

----------------------------------------

TITLE: Converting SQL Values to JSONB with to_jsonb() Function
DESCRIPTION: Demonstrates the basic syntax of the to_jsonb() function for converting an SQL value to a JSONB value.

LANGUAGE: sql
CODE:
to_jsonb ( value ) → jsonb

----------------------------------------

TITLE: Using Custom JWTs with Neon and Drizzle ORM in TypeScript
DESCRIPTION: This code demonstrates how to use custom JWTs with Neon and Drizzle ORM. It initializes a database connection with a custom JWT for authentication, allowing RLS policies to enforce access control based on the JWT claims.

LANGUAGE: typescript
CODE:
import { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';

const db = drizzle(
  neon(process.env.DATABASE_AUTHENTICATED_URL!, {
    authToken: yourCustomJWT,
  })
);

const users = await db.select().from(usersTable);

----------------------------------------

TITLE: B-tree Index Operators in PostgreSQL
DESCRIPTION: Lists the comparison operators that can utilize B-tree indexes in PostgreSQL queries, including equality, inequality, and range comparisons.

LANGUAGE: sql
CODE:
<
<=
=
>=
BETWEEN
IN
IS NULL
IS NOT NULL

----------------------------------------

TITLE: Server-Side Data Loading with postgres.js in SolidStart
DESCRIPTION: TypeScript code for server-side data loading in SolidStart using the postgres.js library to connect to a Neon database and query the PostgreSQL version.

LANGUAGE: typescript
CODE:
import postgres from 'postgres';
import { createAsync } from "@solidjs/router";

const getVersion = async () => {
    "use server";
    const sql = postgres(import.meta.env.DATABASE_URL, { ssl: 'require' });
    const response = await sql`SELECT version()`;
    return response[0].version;
}

export const route = {
  load: () => getVersion(),
};

export default function Page() {
  const version = createAsync(() => getVersion());
  return <>{version()}</>;
}

----------------------------------------

TITLE: Configuring Ecto Repository in config/config.exs
DESCRIPTION: This code snippet demonstrates how to configure the Ecto repository in the config/config.exs file. It includes setting up the database connection details and SSL configuration for connecting to a Neon database.

LANGUAGE: elixir
CODE:
config :friends, Friends.Repo,
  database: "friends",
  username: "alex",
  password: "AbC123dEf",
  hostname: "ep-cool-darkness-123456.us-west-2.aws.neon.tech",
  ssl: [cacerts: :public_key.cacerts_get()]

----------------------------------------

TITLE: Transaction Amount Ordering with abs()
DESCRIPTION: Demonstrates using abs() to order financial transactions by their magnitude regardless of sign. Creates a sample transactions table and orders by absolute amount.

LANGUAGE: sql
CODE:
WITH transactions(id, amount) AS (
  VALUES
    (1, 100.50),
    (2, -75.25),
    (3, 200.00),
    (4, -150.75)
)
SELECT id, amount
FROM transactions
ORDER BY abs(amount) DESC;

LANGUAGE: text
CODE:
 id | amount
----+---------
  3 |  200.00
  4 | -150.75
  1 |  100.50
  2 |  -75.25
(4 rows)

----------------------------------------

TITLE: Creating Basic Table Structure in PostgreSQL
DESCRIPTION: Demonstrates the creation of a contacts table with primary key and required fields for name and phone number.

LANGUAGE: sql
CODE:
CREATE TABLE contacts (
    id INT PRIMARY KEY,
    name VACHAR(255) NOT NULL,
    phone VARCHAR(10) NOT NULL
);

----------------------------------------

TITLE: Installing Neon CLI with npm
DESCRIPTION: Command to install Neon CLI globally using npm. Requires Node.js 18.0 or higher.

LANGUAGE: shell
CODE:
npm i -g neonctl

----------------------------------------

TITLE: Creating No-Login Role in PostgreSQL
DESCRIPTION: Demonstrates how to create a Postgres role with the NOLOGIN attribute for permission management purposes without allowing direct authentication.

LANGUAGE: sql
CODE:
CREATE ROLE my_role NOLOGIN;

----------------------------------------

TITLE: Configuring API keys in .env file
DESCRIPTION: Environment variable configuration for securely storing OpenAI and Neon API keys.

LANGUAGE: env
CODE:
OPENAI_API_KEY=YOUR_OPENAI_API_KEY
NEON_API_KEY=YOUR_NEON_API_KEY

----------------------------------------

TITLE: PostgreSQL Server Connection
DESCRIPTION: Command to connect to PostgreSQL server as postgres user

LANGUAGE: php
CODE:
psql -U postgres

----------------------------------------

TITLE: Truncating Table Before CSV Import
DESCRIPTION: Clears existing data from the persons table and resets the identity counter before performing a new import.

LANGUAGE: sql
CODE:
TRUNCATE TABLE persons
RESTART IDENTITY;

----------------------------------------

TITLE: Querying Existing Roles
DESCRIPTION: SQL query to retrieve all roles from the pg_roles system catalog.

LANGUAGE: sql
CODE:
SELECT rolname FROM pg_roles;

----------------------------------------

TITLE: Declaring Special Data Types in PostgreSQL
DESCRIPTION: Shows how to declare columns with special data types in PostgreSQL, including geometric types and network address types.

LANGUAGE: SQL
CODE:
CREATE TABLE special_types_example (
  box_column box,
  line_column line,
  point_column point,
  lseg_column lseg,
  polygon_column polygon,
  inet_column inet,
  macaddr_column macaddr
);

----------------------------------------

TITLE: Using UUID Namespace Constants
DESCRIPTION: Examples of using predefined UUID namespace constants for generating deterministic UUIDs.

LANGUAGE: sql
CODE:
SELECT uuid_generate_v5(uuid_ns_dns(), 'example.com');
SELECT uuid_generate_v3(uuid_ns_dns(), 'example.com');
SELECT uuid_generate_v3(uuid_ns_url(), 'https://example.com');
SELECT uuid_generate_v5(uuid_ns_oid(), '12345');
SSELECT uuid_generate_v5(uuid_ns_x500(), 'CN=John Doe, DC=example, DC=com');

----------------------------------------

TITLE: Setting Column Defaults and Constraints
DESCRIPTION: Demonstrates how to add default values and constraints to columns using ALTER TABLE.

LANGUAGE: sql
CODE:
ALTER TABLE links
ALTER COLUMN target
SET DEFAULT '_blank';

LANGUAGE: sql
CODE:
ALTER TABLE links
ADD CHECK (target IN ('_self', '_blank', '_parent', '_top'));

LANGUAGE: shell
CODE:
ALTER TABLE links
ADD CONSTRAINT unique_url UNIQUE ( url );

----------------------------------------

TITLE: Connecting to PostgreSQL Database in Bash
DESCRIPTION: This Bash command demonstrates how to connect to the 'dvdrental' sample database using the 'postgres' user in PostgreSQL.

LANGUAGE: bash
CODE:
psql -U postgres -d dvdrental

----------------------------------------

TITLE: DNS Lookup Example
DESCRIPTION: Example commands showing the database connection string and how to perform a DNS lookup to verify the private connection.

LANGUAGE: bash
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname

LANGUAGE: bash
CODE:
nslookup ep-cool-darkness-123456.us-east-2.aws.neon.tech

----------------------------------------

TITLE: Example Data Import from Heroku to Neon
DESCRIPTION: Full example of the Heroku CLI command to import data, including sample output. This demonstrates the process of pulling data from a Heroku Postgres database named 'postgresql-trapezoidal-48645' and importing it into a Neon database.

LANGUAGE: shell
CODE:
$ heroku pg:pull --app thawing-wave-57227 postgresql-trapezoidal-48645 postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname

heroku-cli: Pulling postgresql-trapezoidal-48645 ---> postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname

pg_dump: last built-in OID is 16383
pg_dump: reading extensions
pg_dump: identifying extension members
pg_dump: reading schemas
pg_dump: reading user-defined tables
pg_dump: reading user-defined functions
pg_dump: reading user-defined types
pg_dump: reading procedural languages
pg_dump: reading user-defined aggregate functions
pg_dump: reading user-defined operators
pg_dump: reading user-defined access methods
pg_dump: reading user-defined operator classes
pg_dump: reading user-defined operator families
pg_dump: reading user-defined text search parsers
pg_dump: reading user-defined text search templates
pg_dump: reading user-defined text search dictionaries
pg_dump: reading user-defined text search configurations
pg_dump: reading user-defined foreign-data wrappers
pg_dump: reading user-defined foreign servers
pg_dump: reading default privileges
pg_dump: reading user-defined collations
pg_dump: reading user-defined conversions
pg_dump: reading type casts
pg_dump: reading transforms
pg_dump: reading table inheritance information
pg_dump: reading event triggers
pg_dump: finding extension tables
pg_dump: finding inheritance relationships
pg_dump: reading column info for interesting tables
pg_dump: finding the columns and types of table "public.customer"
pg_dump: finding the columns and types of table "public.order"
pg_dump: flagging inherited columns in subtables
pg_dump: reading indexes
pg_dump: reading indexes for table "public.customer"
pg_dump: reading indexes for table "public.order"
pg_dump: flagging indexes in partitioned tables
pg_dump: reading extended statistics
pg_dump: reading constraints
pg_dump: reading foreign key constraints for table "public.customer"
pg_dump: reading foreign key constraints for table "public.order"
pg_dump: reading triggers
pg_dump: reading triggers for table "public.customer"
pg_dump: reading triggers for table "public.order"
pg_dump: reading rewrite rules
pg_dump: reading policies
pg_dump: reading row-level security policies
pg_dump: reading publications
pg_dump: reading publication membership
pg_dump: reading subscriptions
pg_dump: reading large objects
pg_dump: reading dependency data
pg_dump: saving encoding = UTF8
pg_dump: saving standard_conforming_strings = on
pg_dump: saving search_path =
pg_dump: saving database definition
pg_dump: dumping contents of table "public.customer"
pg_restore: connecting to database for restore
pg_dump: dumping contents of table "public.order"
pg_restore: creating SCHEMA "heroku_ext"
pg_restore: creating TABLE "public.customer"
pg_restore: creating TABLE "public.order"
pg_restore: processing data for table "public.customer"
pg_restore: processing data for table "public.order"
pg_restore: creating CONSTRAINT "public.customer customer_pkey"
pg_restore: creating CONSTRAINT "public.order order_pkey"
pg_restore: creating FK CONSTRAINT "public.order order_customer_id_fkey"
heroku-cli: Pulling complete.

----------------------------------------

TITLE: Multiple Function Drop Syntax
DESCRIPTION: Demonstrates how to drop multiple functions in a single statement using comma-separated function names.

LANGUAGE: sql
CODE:
drop function [if exists] function1, function2, ...;

----------------------------------------

TITLE: Conditional Queries with JSON_EXISTS() in PostgreSQL
DESCRIPTION: Shows how to use JSON_EXISTS() in WHERE clauses for filtering records based on JSON content, enabling complex conditional queries.

LANGUAGE: sql
CODE:
-- Filter records based on JSON content
SELECT *
FROM user_profiles
WHERE JSON_EXISTS(
    data,
    '$.preferences.notifications ? (@ == true)'
);

----------------------------------------

TITLE: Inserting Data via Updatable View in PostgreSQL
DESCRIPTION: This snippet inserts a new row into the 'cities' table through the 'city_us' view. It shows how to use an updatable view for data insertion.

LANGUAGE: sql
CODE:
INSERT INTO city_us(name, population, country)
VALUES ('San Jose', 983459, 'US');

----------------------------------------

TITLE: PL/pgSQL While Loop Counter Example
DESCRIPTION: Practical example showing a while loop that increments and displays a counter variable. The loop continues until the counter reaches 5, demonstrating basic loop control and variable modification.

LANGUAGE: sql
CODE:
do $$

declare
	counter integer := 0;
begin
	while counter < 5 loop
		raise notice 'Counter %', counter;
		counter := counter + 1;
	end loop;
end;

$$;

----------------------------------------

TITLE: Implementing Amplitude User Mapping with TypeScript
DESCRIPTION: TypeScript function that handles the db/users.updated event and updates user mapping in Amplitude. The function extracts user data from the event and makes an API call to Amplitude's user mapping endpoint.

LANGUAGE: typescript
CODE:
// inngest/functions/users-replication.ts
import { inngest } from './client';

export const updateAmplitudeUserMapping = inngest.createFunction(
  { id: 'update-amplitude-user-mapping' },
  { event: 'db/users.updated' },
  async ({ event, step }) => {
    // Extract the user data from the event
    const { data } = event;
    const { id, email } = data.new;

    // Update the user mapping in Amplitude
    await step.run('update-amplitude-user-mapping', async () => {
      const response = await fetch(
        `https://api.amplitude.com/usermap?mapping=[{"user_id":"${id}", "global_user_id": "${email}"}]&api_key=${process.env.AMPLITUDE_API_KEY}`
      );

      if (!response.ok) {
        throw new Error(`Failed to send user data to Amplitude: ${response.statusText}`);
      }

      return response.json();
    });

    return { success: true };
  }
);

----------------------------------------

TITLE: Subscribing to Neon Slack Notifications
DESCRIPTION: Use the /neon subscribe Slack command in a public channel to start receiving Neon usage notifications. To stop notifications, use /neon unsubscribe.

LANGUAGE: plaintext
CODE:
/neon subscribe
/neon unsubscribe

----------------------------------------

TITLE: Calculating Moving Average
DESCRIPTION: Demonstrates using avg() as a window function to calculate moving averages over a specified window of rows.

LANGUAGE: sql
CODE:
SELECT
  date,
  city,
  temperature,
  avg(temperature) OVER (
    PARTITION BY city
    ORDER BY date
    ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
  ) AS moving_avg_temp
FROM weather_data
ORDER BY city, date;

----------------------------------------

TITLE: Querying Objects in JSONB using Postgres
DESCRIPTION: This SQL snippet shows how to query objects within JSONB data using the '@>' operator. It checks if the 'author' object contains specific key-value pairs.

LANGUAGE: sql
CODE:
SELECT * FROM documents WHERE data->'author' @> '{"name":"John Smith","age":30}'

----------------------------------------

TITLE: Inserting Multiple Rows with RETURNING Clause in PostgreSQL
DESCRIPTION: This snippet shows how to insert multiple rows and return the inserted data using the RETURNING clause in PostgreSQL.

LANGUAGE: sql
CODE:
INSERT INTO table_name (column_list)
VALUES
    (value_list_1),
    (value_list_2),
    ...
    (value_list_n)
RETURNING * | output_expression;

----------------------------------------

TITLE: PostgreSQL Table Verification
DESCRIPTION: Commands to verify the successful creation of tables using psql CLI

LANGUAGE: sql
CODE:
psql -U ed -d elearning
\dt

----------------------------------------

TITLE: Creating Action Film Table Example
DESCRIPTION: Practical example of creating a table containing films from category 1

LANGUAGE: sql
CODE:
CREATE TABLE action_film
AS
SELECT
    film_id,
    title,
    release_year,
    length,
    rating
FROM
    film
INNER JOIN film_category USING (film_id)
WHERE
    category_id = 1;

----------------------------------------

TITLE: Loading CSV Data with COPY Command
DESCRIPTION: Bash command to load CSV data into a Neon Postgres table using the COPY command. This is used for the Wikipedia vector embeddings dataset.

LANGUAGE: Bash
CODE:
psql -d "postgresql://[user]:[password]@[neon_hostname]/wikipedia" -c "\COPY public.articles (id, url, title, content, title_vector, content_vector, vector_id) FROM 'vector_database_wikipedia_articles_embedded.csv' WITH (FORMAT CSV, HEADER true, DELIMITER ',');"

----------------------------------------

TITLE: Altering Column Data Type for Optimization in Postgres
DESCRIPTION: This SQL command demonstrates how to change the data type of an 'age' column from INTEGER to SMALLINT to optimize storage and potentially improve query performance.

LANGUAGE: sql
CODE:
ALTER TABLE users ALTER COLUMN age TYPE SMALLINT;

----------------------------------------

TITLE: Renaming Schema Example
DESCRIPTION: Example showing how to rename the 'doe' schema to 'finance' and 'john' schema to 'accounting'.

LANGUAGE: sql
CODE:
ALTER SCHEMA doe
RENAME TO finance;

LANGUAGE: sql
CODE:
ALTER SCHEMA john
RENAME TO accounting;

----------------------------------------

TITLE: Defining Postgres trim() Function Signatures
DESCRIPTION: Shows the two main forms of the trim() function in PostgreSQL, explaining the parameters and their purposes.

LANGUAGE: sql
CODE:
trim([leading | trailing | both] [characters] from string) -> text

LANGUAGE: sql
CODE:
trim(string text [, characters text]) -> text

----------------------------------------

TITLE: Creating Role with Connection Limit
DESCRIPTION: Creates a role with a specified maximum number of concurrent connections.

LANGUAGE: sql
CODE:
CREATE ROLE api
LOGIN
PASSWORD 'securePass1'
CONNECTION LIMIT 1000;

----------------------------------------

TITLE: SQL Migration for Renaming a Column
DESCRIPTION: SQL script for renaming a column in a database table, typically used in a migration tool like Flyway.

LANGUAGE: sql
CODE:
ALTER TABLE users RENAME COLUMN old_column_name TO new_column_name;

----------------------------------------

TITLE: Creating a Neon Project with TypeScript SDK
DESCRIPTION: TypeScript code to create a new Neon project and retrieve the connection string using the SDK.

LANGUAGE: typescript
CODE:
import { createApiClient } from '@neondatabase/api-client';

const apiClient = createApiClient({
  apiKey: process.env.NEON_API_KEY!,
});

async function createNeonProject(projectName: string) {
  try {
    const response = await apiClient.createProject({
      project: {
        name: projectName,
        region_id: 'aws-us-east-1',
        pg_version: 17,
      },
    });
    console.log('Project created:', response.data.project);
    console.log('Project ID:', response.data.project.id);
    console.log('Database connection string:', response.data.connection_uris[0].connection_uri);
  } catch (error) {
    console.error('Error creating project:', error);
    throw error;
  }
}

// Example usage: Create a project named "test-project"
createNeonProject('test-project').catch((error) => {
  console.error('Error creating project:', error.message);
});

----------------------------------------

TITLE: Exporting Specific Columns to CSV
DESCRIPTION: COPY statement to export selected columns (first_name, last_name, email) from the persons table to a CSV file with headers.

LANGUAGE: sql
CODE:
COPY persons(first_name,last_name,email)
TO 'C:\temp\persons_partial_db.csv' DELIMITER ',' CSV HEADER;

----------------------------------------

TITLE: Example of a Pooled Connection String for Neon
DESCRIPTION: This snippet shows the format of a pooled connection string used to connect to a Neon database with connection pooling enabled, supporting up to 10,000 concurrent connections.

LANGUAGE: bash
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456-pooler.us-east-2.aws.neon.tech/dbname

----------------------------------------

TITLE: Querying PostgreSQL Table to Confirm Deletion
DESCRIPTION: SQL query to verify the deletion of a row from the 'parts' table.

LANGUAGE: sql
CODE:
SELECT * FROM parts;

----------------------------------------

TITLE: Demonstrating PostgreSQL Boolean Expression
DESCRIPTION: This snippet shows a basic boolean expression in PostgreSQL that evaluates to false.

LANGUAGE: sql
CODE:
SELECT 1 <> 1 AS result;

----------------------------------------

TITLE: Converting JSON Object to Record with Subset of Fields
DESCRIPTION: Example demonstrating how to convert a JSON object into a record type with fewer columns than the source JSON object.

LANGUAGE: sql
CODE:
SELECT
  *
FROM
  jsonb_to_record(
    '{"id": 1, "name": "Alice", "age": 30}'
  ) AS person (id INT, name TEXT);

----------------------------------------

TITLE: Verifying Row Count After Replication
DESCRIPTION: SQL query to check the row count in both source and destination databases to ensure replication is working correctly.

LANGUAGE: sql
CODE:
SELECT COUNT(*) FROM playing_with_neon;

----------------------------------------

TITLE: Creating Table with Composite Type Column
DESCRIPTION: Shows how to create a table that uses a composite type as a column data type.

LANGUAGE: sql
CODE:
CREATE TABLE contacts(
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    address address_type
);

----------------------------------------

TITLE: Basic NTH_VALUE Function Syntax in PostgreSQL
DESCRIPTION: Demonstrates the complete syntax of the NTH_VALUE() function including partition, order, and frame clause options.

LANGUAGE: sql
CODE:
NTH_VALUE(expression, offset)
OVER (
    [PARTITION BY partition_expression]
    [ ORDER BY sort_expression [ASC | DESC]
    frame_clause ]
)

----------------------------------------

TITLE: Using jsonb_populate_recordset() with Table Data in PostgreSQL
DESCRIPTION: This example shows how to use jsonb_populate_recordset() to query data from the 'employees' table and convert it into a structured format. It combines json_agg() and jsonb_build_object() to create a JSON array from table data.

LANGUAGE: sql
CODE:
SELECT
  jsonb_populate_recordset(
    null :: employees,
    json_agg(jsonb_build_object(
      'id', id, 'name', name, 'age', age, 'salary',
      salary
    ))
  ) AS employees
FROM
  employees;

----------------------------------------

TITLE: Connecting to PostgreSQL with psql
DESCRIPTION: Command to connect to PostgreSQL database using psql client with postgres user.

LANGUAGE: bash
CODE:
psql -U postgres

----------------------------------------

TITLE: Adding Neon CLI Completion to Shell Configuration
DESCRIPTION: Commands to add the Neon CLI completion script to different shell configuration files. These commands append the completion script to the specified file and immediately apply the changes to the current shell session.

LANGUAGE: bash
CODE:
neon completion >> ~/.bashrc
source ~/.bashrc

LANGUAGE: bash
CODE:
neon completion >> ~/.bash_profile
source ~/.bash_profile

LANGUAGE: bash
CODE:
neon completion >> ~/.profile
source ~/.profile

LANGUAGE: bash
CODE:
neon completion >> ~/.zshrc
source ~/.zshrc

----------------------------------------

TITLE: Retrieving Neon Database Connection String
DESCRIPTION: Example of a Neon database connection string used to connect to the database. This string contains the necessary credentials and endpoint information.

LANGUAGE: bash
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require

----------------------------------------

TITLE: Creating a PostgreSQL Database with Default Parameters
DESCRIPTION: This snippet demonstrates how to create a new PostgreSQL database named 'sales' using default parameters.

LANGUAGE: sql
CODE:
CREATE DATABASE sales;

----------------------------------------

TITLE: Creating a PostgreSQL Database with Default Parameters
DESCRIPTION: This snippet demonstrates how to create a new PostgreSQL database named 'sales' using default parameters.

LANGUAGE: sql
CODE:
CREATE DATABASE sales;

----------------------------------------

TITLE: Setting PostgreSQL Tablespace Parameters
DESCRIPTION: This snippet shows how to set parameters for a tablespace in PostgreSQL using the ALTER TABLESPACE SET statement. It requires specifying the tablespace name, parameter name, and value.

LANGUAGE: sql
CODE:
ALTER TABLESPACE tablespace_name
SET parameter_name = value;

----------------------------------------

TITLE: Configuring Environment Variables for Neon Database
DESCRIPTION: Environment configuration file containing the database connection string for Neon

LANGUAGE: env
CODE:
DATABASE_URL=postgresql://user:password@your-neon-hostname.neon.tech:5432/dbname

----------------------------------------

TITLE: Creating a Table and Inserting Data in PostgreSQL
DESCRIPTION: This example creates a new table called 'deliveries' and inserts a row into it, demonstrating how to use a tablespace indirectly.

LANGUAGE: sql
CODE:
CREATE TABLE deliveries (
    delivery_id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    order_date DATE,
    customer_id INT
);

INSERT INTO deliveries(order_date, customer_id)
VALUES('2020-08-01',1);

----------------------------------------

TITLE: Granting Privileges to a Group Role in PostgreSQL
DESCRIPTION: This snippet demonstrates how to grant privileges to a group role, which will be inherited by its members. It includes an example of granting SELECT privilege on a table.

LANGUAGE: sql
CODE:
GRANT SELECT ON rental TO sales;

----------------------------------------

TITLE: Connecting to PostgreSQL Server using psql
DESCRIPTION: This command connects to the PostgreSQL server using the postgres user. It will prompt for a password.

LANGUAGE: shell
CODE:
psql -U postgres

----------------------------------------

TITLE: PostgreSQL Factorial Mathematical Formula
DESCRIPTION: Mathematical representation of factorial calculation showing how n! is computed as the product of all positive integers up to n.

LANGUAGE: plaintextsql
CODE:
n!=n×(n−1)×(n−2)×…×2×1

----------------------------------------

TITLE: Creating Table with JSONB Column
DESCRIPTION: Creates a table named employees with a JSONB column to store JSON data.

LANGUAGE: sql
CODE:
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    data JSONB
);

----------------------------------------

TITLE: Updating Post Model for Soft Deletes in Laravel
DESCRIPTION: This code snippet shows how to update the Post model to use the SoftDeletes trait for soft delete functionality.

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Post extends Model
{
    use SoftDeletes;

    protected $fillable = ['title', 'content'];
}

----------------------------------------

TITLE: Installing Neon Python SDK with pip
DESCRIPTION: This snippet shows how to install the Neon Python SDK using pip. The SDK is a wrapper for the Neon API, simplifying integration of Python applications with Neon.

LANGUAGE: bash
CODE:
$ pip install neon-api

----------------------------------------

TITLE: DMS SSL Connection Error Message
DESCRIPTION: Error message encountered when SSL mode is not properly configured for the source database endpoint in AWS DMS.

LANGUAGE: text
CODE:
Test Endpoint failed: Application-Status: 1020912, Application-Message: Failed to connect Network error has occurred, Application-Detailed-Message: RetCode: SQL_ERROR SqlState: 08001 NativeError: 101 Message: FATAL: no pg_hba.conf entry for host "10.0.1.135", user "postgres", database "dms_sample", no encryption

----------------------------------------

TITLE: Creating Basic PL/pgSQL Function for Rental Duration
DESCRIPTION: Implements a function that calculates total rental days for a specified customer. Takes a single customer_id parameter and returns an integer representing total rental days.

LANGUAGE: plpgsql
CODE:
create or replace function get_rental_duration(
	p_customer_id integer
)
returns integer
language plpgsql
as $$
declare
	rental_duration integer;
begin
	select
		sum( extract(day from return_date - rental_date))
	into rental_duration
    from rental
	where customer_id = p_customer_id;

	return rental_duration;
end; $$

----------------------------------------

TITLE: Nested Loops with Labels
DESCRIPTION: Shows how to implement and control nested loops using labels in PL/pgSQL.

LANGUAGE: sql
CODE:
do $$

declare
	row_var int := 0;
	col_var int := 0;
begin
	<<outer_loop>>
	loop
		row_var = row_var + 1;
		<<inner_loop>>
		loop
			col_var = col_var + 1;
			raise notice '(%, %)', row_var, col_var;

			-- terminate the inner loop
			exit inner_loop when col_var = 3;
		end loop;
		-- reset the column
		col_var = 0;

		-- terminate the outer loop
		exit outer_loop when row_var = 3;
	end loop;
end;

$$;

----------------------------------------

TITLE: Closing Database Resources
DESCRIPTION: Closes the database connection and statement objects to release resources.

LANGUAGE: java
CODE:
connection.close();
statement.close();

----------------------------------------

TITLE: Koyeb CLI Deployment Command
DESCRIPTION: Command to deploy the example Express.js application using the Koyeb CLI. It specifies the Git repository, build command, port configuration, and environment variables including the database URL.

LANGUAGE: bash
CODE:
koyeb apps init express-neon \
--instance-type free \
--git github.com/koyeb/example-express-prisma \
--git-branch main \
--git-build-command "npm run postgres:init" \
--ports 8080:http \
--routes /:8080 \
--env PORT=8080 \
--env DATABASE_URL="{}"

----------------------------------------

TITLE: Year Adjustment for Two-Digit Years
DESCRIPTION: An example showing how TO_TIMESTAMP() adjusts two-digit years to the nearest year in the past or future.

LANGUAGE: sql
CODE:
SELECT
    TO_TIMESTAMP('12 31 99 12:45', 'MM DD YY HH:MI');

----------------------------------------

TITLE: Testing API Endpoints with cURL
DESCRIPTION: Demonstrates how to interact with the API using cURL commands for creating and retrieving data.

LANGUAGE: bash
CODE:
# Create a new model author
curl -X POST http://localhost:8000/api/authors/ -H "Content-Type: application/json" -d '{"name":"AI Innovations Inc.", "bio":"Leading AI research company", "contact_info":"contact@aiinnovations.com", "rating":4.8}'

# Create a new AI model
curl -X POST http://localhost:8000/api/models/ -H "Content-Type: application/json" -d '{"name":"AdvancedNLP", "model_type":"NLP", "description":"State-of-the-art NLP model", "framework":"PT", "version":"1.0", "download_url":"https://example.com/model", "price":"99.99", "tags":["NLP", "transformer"], "author_id":1}'

# Get all AI models
curl http://localhost:8000/api/models/

# Get usage scenarios for a specific AI model
curl http://localhost:8000/api/models/1/usage_scenarios/

# Add a benchmark for an AI model
curl -X POST http://localhost:8000/api/benchmarks/ -H "Content-Type: application/json" -d '{"ai_model":1, "metric_name":"Accuracy", "value":0.95, "hardware_used":"NVIDIA A100 GPU"}'

----------------------------------------

TITLE: Creating and Populating Sample Tables for PostgreSQL ALL Operator
DESCRIPTION: This snippet sets up sample 'employees' and 'managers' tables with example data to demonstrate the ALL operator.

LANGUAGE: sql
CODE:
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    salary DECIMAL(10, 2) NOT NULL
);

CREATE TABLE managers(
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    salary DECIMAL(10, 2) NOT NULL
);

INSERT INTO employees (first_name, last_name, salary)
VALUES
('Bob', 'Williams', 75000.00),
('Charlie', 'Davis', 55000.00),
('David', 'Jones', 50000.00),
('Emma', 'Brown', 48000.00),
('Frank', 'Miller', 52000.00),
('Grace', 'Wilson', 49000.00),
('Harry', 'Taylor', 53000.00),
('Ivy', 'Moore', 47000.00),
('Jack', 'Anderson', 56000.00),
('Kate', 'Hill',  44000.00),
('Liam', 'Clark', 59000.00),
('Mia', 'Parker', 42000.00);

INSERT INTO managers(first_name, last_name, salary)
VALUES
('John', 'Doe',  60000.00),
('Jane', 'Smith', 55000.00),
('Alice', 'Johnson',  58000.00);

----------------------------------------

TITLE: pgloader Configuration for Docker Container Migration
DESCRIPTION: Modified pgloader configuration file and Docker command for running pgloader in a container, addressing SSL verification issues.

LANGUAGE: plaintext
CODE:
load database
  from mysql://user:password@host/source_db?sslmode=require
  into postgresql://alex:endpoint=ep-cool-darkness-123456;AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/neondb?sslmode=allow;

LANGUAGE: plaintext
CODE:
docker run -v C:\path\to\config.load:/config.load d183dc100d3af5e703bd867b3b7826c117fa16b7ee2cd360af591dc895b121dc pgloader --no-ssl-cert-verification /config.load

----------------------------------------

TITLE: Database Command Base Usage
DESCRIPTION: Shows the basic command structure for managing databases with Neon CLI. This includes the general command syntax for list, create, and delete operations.

LANGUAGE: bash
CODE:
neon databases list [options]

LANGUAGE: bash
CODE:
neon databases create [options]

LANGUAGE: bash
CODE:
neon databases delete <database> [options]

----------------------------------------

TITLE: Creating Table and UUID Extension in PostgreSQL
DESCRIPTION: SQL commands to create a 'users' table and enable the UUID extension in a PostgreSQL database. The table includes columns for id, first name, last name, email, and age.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE public.users (
    id UUID PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    age INTEGER NOT NULL
);

----------------------------------------

TITLE: Authenticating with Neon CLI
DESCRIPTION: Command to initiate web authentication for Neon CLI.

LANGUAGE: bash
CODE:
neon auth

----------------------------------------

TITLE: Renaming PostgreSQL Tablespace Example
DESCRIPTION: This example demonstrates renaming a tablespace named 'dvdrental' to 'dvdrental_raid' using the ALTER TABLESPACE RENAME TO statement.

LANGUAGE: sql
CODE:
ALTER TABLESPACE dvdrental
RENAME TO dvdrental_raid;

----------------------------------------

TITLE: Creating GIN Index for Array Data
DESCRIPTION: Shows implementation of a GIN index for array data type. GIN indexes are effective for composite values like arrays and full-text search documents.

LANGUAGE: sql
CODE:
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    tags TEXT[]
);

INSERT INTO products (name, tags) VALUES
    ('Smartphone', ARRAY['electronics', 'mobile', 'communication']),
    ('Laptop', ARRAY['electronics', 'computer', 'portable']),
    ('Headphones', ARRAY['electronics', 'audio', 'accessories']);

CREATE INDEX idx_products_tags ON products USING gin (tags);

----------------------------------------

TITLE: Creating Replication Role with Neon CLI (Bash)
DESCRIPTION: Bash command using Neon CLI to create a new role for replication purposes.

LANGUAGE: bash
CODE:
neon roles create --name cdc_role

----------------------------------------

TITLE: Testing Row-Level Security in PostgreSQL
DESCRIPTION: Connect to the database using different roles and query the departments table to demonstrate the effectiveness of the row-level security policy.

LANGUAGE: sql
CODE:
-- Connect as alice
psql -U alice -d hr

SELECT * FROM departments;

-- Connect as bob
psql -U bob -d hr

SELECT * FROM departments;

----------------------------------------

TITLE: Basic PostgreSQL TIMEOFDAY() Function Syntax
DESCRIPTION: The basic syntax of the TIMEOFDAY() function, which returns the current date and time as a string without any parameters.

LANGUAGE: sql
CODE:
TIMEOFDAY()

----------------------------------------

TITLE: Setting Default Endpoint Settings for a Neon Project
DESCRIPTION: This curl command demonstrates how to set default endpoint settings for a new Neon project, including minimum and maximum compute sizes and suspend timeout.

LANGUAGE: bash
CODE:
curl --request POST \
     --url https://console.neon.tech/api/v2/projects \
     --header 'Accept: application/json' \
     --header "Authorization: Bearer $NEON_API_KEY" \
     --header 'Content-Type: application/json' \
     --data '
{
  "project": {
    "default_endpoint_settings": {
      "autoscaling_limit_min_cu": 1,
      "autoscaling_limit_max_cu": 3,
      "suspend_timeout_seconds": 600
    },
    "pg_version": 15
  }
}
' | jq

----------------------------------------

TITLE: Configuring Maven Dependencies for Spring Boot and Postgres
DESCRIPTION: XML configuration for including Spring Boot Data JPA, Web, and PostgreSQL driver dependencies in a Maven project.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <scope>runtime</scope>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Creating Directory for PostgreSQL Tablespace (Windows)
DESCRIPTION: Command to create a new directory for a tablespace on Windows. This is a prerequisite step before creating a tablespace.

LANGUAGE: sql
CODE:
mkdir C:\pgdata\sample

----------------------------------------

TITLE: Adding Npgsql NuGet Package to .NET Project
DESCRIPTION: This bash command adds the Npgsql NuGet package to the .NET project, which is necessary for connecting to PostgreSQL databases.

LANGUAGE: bash
CODE:
dotnet add package Npgsql --version YOUR_DOTNET_VERSION

----------------------------------------

TITLE: Changing Session Defaults for Run-time Configuration in PostgreSQL
DESCRIPTION: This code demonstrates how to override default configuration settings for a specific database using the ALTER DATABASE SET statement. This affects subsequent sessions connected to the database.

LANGUAGE: sql
CODE:
ALTER DATABASE database_name
SET configuration_parameter = value;

----------------------------------------

TITLE: Configuring Neon Connection String in appsettings.json
DESCRIPTION: This JSON snippet shows how to structure the appsettings.json file to include the Neon database connection string.

LANGUAGE: json
CODE:
{
  "ConnectionStrings": {
    "DefaultConnection": "Host=your-neon-host;Database=your-database;Username=your-username;Password=your-password;SSL Mode=Require;Trust Server Certificate=true"
  }
}

----------------------------------------

TITLE: Creating a Sample Accounts Table in PostgreSQL
DESCRIPTION: Sets up a sample 'accounts' table with initial data for demonstrating stored procedures. The table includes columns for id, name, and balance.

LANGUAGE: sql
CODE:
drop table if exists accounts;

create table accounts (
    id int generated by default as identity,
    name varchar(100) not null,
    balance dec(15,2) not null,
    primary key(id)
);

insert into accounts(name,balance)
values('Bob',10000);

insert into accounts(name,balance)
values('Alice',10000);

----------------------------------------

TITLE: Retrieving Neon Postgres Connection String
DESCRIPTION: Example of a Neon Postgres connection string and how to modify it for pgloader compatibility by including the endpoint ID in the password field.

LANGUAGE: bash
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require

LANGUAGE: bash
CODE:
postgresql://alex:endpoint=ep-cool-darkness-123456;AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require

----------------------------------------

TITLE: Displaying Database Tables
DESCRIPTION: psql command to list all tables in the current database

LANGUAGE: php
CODE:
\dt

----------------------------------------

TITLE: Creating Neon Project via CLI in Azure Region
DESCRIPTION: Command to create a new Neon project in Azure East US 2 region using the Neon CLI. Requires specifying project name and region ID parameters.

LANGUAGE: bash
CODE:
neon projects create --name mynewproject --region-id azure-eastus2

----------------------------------------

TITLE: Creating Basic Role
DESCRIPTION: SQL command to create a simple role named steve without special privileges.

LANGUAGE: sql
CODE:
CREATE ROLE steve;

----------------------------------------

TITLE: Installing pgvector Extension in Neon Database
DESCRIPTION: This snippet shows how to install the pgvector extension in a Neon database using a SQL command executed through Python. This extension enables vector operations in the database.

LANGUAGE: python
CODE:
# Execute this query to install the pgvector extension
cursor.execute("CREATE EXTENSION IF NOT EXISTS vector;")

----------------------------------------

TITLE: Restarting PostgreSQL Using service Command
DESCRIPTION: Alternative method to restart PostgreSQL using the service command. Requires sudo privileges.

LANGUAGE: bash
CODE:
sudo service postgresql restart

----------------------------------------

TITLE: Connecting to Neon Postgres Database with psql
DESCRIPTION: Bash command to connect to a Neon Postgres database using the psql client. Replace the placeholders with your actual connection details.

LANGUAGE: Bash
CODE:
psql postgresql://[user]:[password]@[neon_hostname]/[dbname]

----------------------------------------

TITLE: Creating Publication for Replication (SQL)
DESCRIPTION: SQL command to create a publication for the tables to be replicated in Estuary Flow.

LANGUAGE: sql
CODE:
CREATE PUBLICATION estuary_publication FOR TABLE <tbl1, tbl2, tbl3>;

----------------------------------------

TITLE: Creating a New Role and Database in PostgreSQL
DESCRIPTION: This sequence of SQL commands creates a new database, a new role with login privileges, grants necessary permissions, and switches to the new database.

LANGUAGE: sql
CODE:
CREATE DATABASE sales;

create role alice
with login
password 'Password';

alter role alice createdb;

grant all privileges on database sales to alice;

\c sales

grant all on schema public to alice;

----------------------------------------

TITLE: JUSTIFY_DAYS() with Multiple of 30 Days
DESCRIPTION: Shows how JUSTIFY_DAYS() handles intervals that are multiples of 30 days, converting them into months.

LANGUAGE: sql
CODE:
SELECT JUSTIFY_DAYS(INTERVAL '30 days'),
       JUSTIFY_DAYS(INTERVAL '60 days'),
       JUSTIFY_DAYS(INTERVAL '90 days');

----------------------------------------

TITLE: Enabling pgRouting Extension in Postgres
DESCRIPTION: This SQL command enables the pgRouting extension in Postgres, which adds support for routing and path-finding algorithms on network data.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pgrouting;

----------------------------------------

TITLE: PostgreSQL INNER JOIN Using USING Clause
DESCRIPTION: Shows how to use the USING syntax when joining tables that share columns with the same name.

LANGUAGE: sql
CODE:
SELECT
  select_list
FROM
  table1 t1
INNER JOIN table2 t2 USING(column_name);

----------------------------------------

TITLE: Random Sampling of Customer Data in Postgres SQL
DESCRIPTION: Shows how to use the random() function to select a random sample (approximately 1%) from a large table of customer data for a survey.

LANGUAGE: sql
CODE:
CREATE TABLE customers (
  id SERIAL PRIMARY KEY,
  name TEXT,
  email TEXT
);

-- Populate the table with sample data
INSERT INTO customers (name, email)
SELECT
  'Customer-' || generate_series,
  'customer' || generate_series || '@example.com'
FROM generate_series(1, 1000);

-- Select a random 1% sample
SELECT *
FROM customers
WHERE random() < 0.01;

----------------------------------------

TITLE: Creating a Schema-Only Branch with Neon API (cURL)
DESCRIPTION: cURL command to create a schema-only branch in a Neon project, specifying the parent branch and setting the init_source to 'schema-only'.

LANGUAGE: bash
CODE:
curl --request POST \
     --url https://console.neon.tech/api/v2/projects/wispy-salad-58347608/branches \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $NEON_API_KEY' \
     --header 'content-type: application/json' \
     --data '
{
  "branch": {
    "parent_id": "br-super-mode-w371g4od",
    "name": "my_schema_only_branch",
    "init_source": "schema-only"
  }
}
'

----------------------------------------

TITLE: Defining PostgreSQL TRUNC() Function Syntax
DESCRIPTION: This snippet shows the syntax of the PostgreSQL TRUNC() function, which takes a number and an optional precision argument.

LANGUAGE: css
CODE:
TRUNC(number [, precision])

----------------------------------------

TITLE: Creating New Database in Neon
DESCRIPTION: SQL command to create a new database named Northwind in Neon Postgres.

LANGUAGE: sql
CODE:
CREATE DATABASE "Northwind";

----------------------------------------

TITLE: Connecting to Postgres with psql
DESCRIPTION: Command to connect to a Neon database using psql with a connection string that includes user credentials and database details.

LANGUAGE: bash
CODE:
psql postgresql://[user]:[password]@[neon_hostname]/[dbname]

----------------------------------------

TITLE: Creating and Pushing a Git Branch for Vercel Preview
DESCRIPTION: These commands demonstrate how to create a new git branch, make changes, commit, and push to trigger a Vercel preview deployment with a corresponding Neon database branch.

LANGUAGE: bash
CODE:
cd myapp
git checkout -b patch-1
git commit -a -m "Update my app"
git push

----------------------------------------

TITLE: Creating and Pushing a Git Branch for Vercel Preview
DESCRIPTION: These commands demonstrate how to create a new git branch, make changes, commit, and push to trigger a Vercel preview deployment with a corresponding Neon database branch.

LANGUAGE: bash
CODE:
cd myapp
git checkout -b patch-1
git commit -a -m "Update my app"
git push

----------------------------------------

TITLE: Changing Database Owner
DESCRIPTION: SQL command to change the owner of the scm database from alex to steve.

LANGUAGE: sql
CODE:
ALTER DATABASE scm
OWNER TO steve;

----------------------------------------

TITLE: Sample Data Insertion
DESCRIPTION: Inserts test order data to demonstrate trigger functionality.

LANGUAGE: sql
CODE:
INSERT INTO orders (customer_id, total_amount, status)
VALUES
    (1, 100, 'pending'),
    (2, 200, 'pending');

----------------------------------------

TITLE: Calculating Average of DOUBLE PRECISION Values in PostgreSQL
DESCRIPTION: This example demonstrates how to calculate the average temperature using the AVG function on a DOUBLE PRECISION column in PostgreSQL.

LANGUAGE: SQL
CODE:
SELECT AVG(temperature)
FROM temperatures;

----------------------------------------

TITLE: Using pg_dumpall to Backup All PostgreSQL Databases
DESCRIPTION: This command shows how to use pg_dumpall to backup all databases in a PostgreSQL server to a single SQL file.

LANGUAGE: SQL
CODE:
pg_dumpall -U postgres > D:\backup\all_databases.sql

----------------------------------------

TITLE: Using TypeScript Types with Neon SDK
DESCRIPTION: Example of using TypeScript types from the Neon SDK for type-safe API interactions.

LANGUAGE: typescript
CODE:
import { createApiClient, ProjectsResponse } from '@neondatabase/api-client';
import { AxiosResponse } from 'axios';

const apiClient = createApiClient({
  apiKey: process.env.NEON_API_KEY!,
});

async function listNeonProjects(): Promise<void> {
  try {
    const response: AxiosResponse<ProjectsResponse> = await apiClient.listProjects({});
    const projects = response.data.projects;
    console.log('Projects:', projects);
  } catch (error) {
    console.error('Error listing projects:', error);
  }
}

listNeonProjects();

----------------------------------------

TITLE: Syntax for PostgreSQL DROP TABLESPACE Statement
DESCRIPTION: The basic syntax for dropping a tablespace in PostgreSQL. It includes an optional IF EXISTS clause to handle non-existent tablespaces gracefully.

LANGUAGE: sql
CODE:
DROP TABLESPACE [IF EXISTS] tablespace_name;

----------------------------------------

TITLE: Listing Branches with Neon API (HTTP)
DESCRIPTION: HTTP request to list all branches in a Neon project.

LANGUAGE: http
CODE:
GET /projects/{project_id}/branches

----------------------------------------

TITLE: Comparing Daily Sales Using lag() in SQL
DESCRIPTION: Demonstrates how to use lag() to compare each day's sales to the previous day's sales, calculating the difference between current and previous amounts.

LANGUAGE: sql
CODE:
WITH sales AS (
  SELECT date '2023-01-01' AS sale_date, 1000 AS amount
  UNION ALL
  SELECT date '2023-01-02' AS sale_date, 1500 AS amount
  UNION ALL
  SELECT date '2023-01-03' AS sale_date, 1200 AS amount
  UNION ALL
  SELECT date '2023-01-04' AS sale_date, 1800 AS amount
)
SELECT
  sale_date,
  amount,
  lag(amount) OVER (ORDER BY sale_date) AS prev_amount,
  amount - lag(amount) OVER (ORDER BY sale_date) AS diff
FROM sales;

----------------------------------------

TITLE: Installing Neon CLI in GitHub Actions (npm)
DESCRIPTION: YAML configuration for installing the latest version of Neon CLI in GitHub Actions using npm.

LANGUAGE: yaml
CODE:
- name: Install Neon CLI
  run: npm install -g neonctl@latest

----------------------------------------

TITLE: Dumping Data from Multiple Related Tables
DESCRIPTION: This SQL snippet demonstrates how to dump data from multiple tables while maintaining foreign key relationships. It selects subsets of data from products, transactions, and users tables, ensuring referential integrity.

LANGUAGE: sql
CODE:
\copy (SELECT * FROM products ORDER BY product_id DESC LIMIT 50) TO '${{ github.workspace }}/products-subset.csv' WITH CSV HEADER
\copy (SELECT * FROM transactions WHERE product_id IN (SELECT product_id FROM products ORDER BY product_id DESC LIMIT 10)) TO '${{ github.workspace }}/transactions-subset.csv' WITH CSV HEADER
\copy (SELECT * FROM users WHERE user_id IN (SELECT user_id FROM transactions WHERE product_id IN (SELECT product_id FROM products ORDER BY product_id DESC LIMIT 50))) TO '${{ github.workspace }}/users-subset.csv' WITH CSV HEADER

----------------------------------------

TITLE: Creating a Branch with Neon API (HTTP)
DESCRIPTION: HTTP request to create a new branch in a Neon project. It allows specifying the parent branch and creating a compute endpoint.

LANGUAGE: http
CODE:
POST /projects/{project_id}/branches

----------------------------------------

TITLE: Adding PostgreSQL Repository
DESCRIPTION: Add official PostgreSQL repository to package sources and import signing key

LANGUAGE: shell
CODE:
sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'

LANGUAGE: sql
CODE:
curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg

LANGUAGE: shell
CODE:
sudo apt update

----------------------------------------

TITLE: Creating a New Database in Neon
DESCRIPTION: SQL command to create a new database in Neon, maintaining consistency with the Render setup by using the same database name.

LANGUAGE: sql
CODE:
CREATE DATABASE lego;

----------------------------------------

TITLE: Generating Neon CLI Completion Script
DESCRIPTION: This command generates a completion script for the neonctl command-line interface. The script helps users type neon commands faster and more accurately by presenting possible commands and options when the tab key is pressed.

LANGUAGE: bash
CODE:
neon completion

----------------------------------------

TITLE: Updating Data Model for Schema Change
DESCRIPTION: Python code updating the Author model to include a new 'country' field. This demonstrates how to handle schema changes in the application.

LANGUAGE: python
CODE:
# models.py
class Author(Base):
    __tablename__ = "authors"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), nullable=False)
    bio = Column(Text)
    country = Column(String(100))
    created_at = Column(DateTime(timezone=True), server_default=func.now())

    books = relationship("Book", back_populates="author")

----------------------------------------

TITLE: Setting Up Postgres Roles for Authentication
DESCRIPTION: SQL commands to set up table-level permissions for authenticated and anonymous roles in the public schema. This includes granting SELECT, UPDATE, INSERT, and DELETE privileges on existing and future tables.

LANGUAGE: sql
CODE:
-- For existing tables
GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to authenticated;

GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES
  IN SCHEMA public
  to anonymous;

-- For future tables
ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT SELECT, UPDATE, INSERT, DELETE ON TABLES
  TO authenticated;

ALTER DEFAULT PRIVILEGES
  IN SCHEMA public
  GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO anonymous;

----------------------------------------

TITLE: Creating New .NET Web API Project
DESCRIPTION: Commands to create and navigate to a new .NET Web API project directory.

LANGUAGE: bash
CODE:
dotnet new webapi -n NeonInventoryApi
cd NeonInventoryApi

----------------------------------------

TITLE: Inserting Sample Data into Related Tables
DESCRIPTION: Insertion of sample data into departments and employees tables to demonstrate the relationship between parent and child records.

LANGUAGE: sql
CODE:
INSERT INTO departments (name)
VALUES
    ('Engineering'),
    ('Sales')
RETURNING *;

INSERT INTO employees (name, department_id)
VALUES
    ('John Doe', 1),
    ('Jane Smith', 1),
    ('Michael Johnson', 2)
RETURNING *;

----------------------------------------

TITLE: Creating Publication for Logical Replication in PostgreSQL
DESCRIPTION: SQL commands to create a publication for a specific table or multiple tables in PostgreSQL for logical replication.

LANGUAGE: sql
CODE:
CREATE PUBLICATION my_publication FOR TABLE playing_with_neon;

LANGUAGE: sql
CODE:
CREATE PUBLICATION my_publication FOR TABLE users, departments;

----------------------------------------

TITLE: Connecting to PostgreSQL Database with psql
DESCRIPTION: This command connects to the PostgreSQL database server using the postgres user via the psql tool. It prompts for a password after execution.

LANGUAGE: shell
CODE:
psql -U postgres

----------------------------------------

TITLE: Restarting PostgreSQL Server on Windows
DESCRIPTION: This command is used to restart the PostgreSQL server on Windows from the Command Prompt. It requires administrator privileges and specifies the data directory path.

LANGUAGE: bash
CODE:
pg_ctl -D "C:\Program Files\PostgreSQL\16\data" restart

----------------------------------------

TITLE: Changing database in psql
DESCRIPTION: Command to switch the current database to 'dvdrental' in psql.

LANGUAGE: shell
CODE:
\c dvdrental

----------------------------------------

TITLE: Deleting Duplicates Using Temporary Table
DESCRIPTION: Four-step process to remove duplicates using an intermediate table, preserving unique rows and table structure.

LANGUAGE: sql
CODE:
-- step 1
CREATE TABLE basket_temp (LIKE basket);

-- step 2
INSERT INTO basket_temp(fruit, id)
SELECT
    DISTINCT ON (fruit) fruit,
    id
FROM basket;

-- step 3
DROP TABLE basket;

-- step 4
ALTER TABLE basket_temp
RENAME TO basket;

----------------------------------------

TITLE: Performance Comparison Demo
DESCRIPTION: Complete example demonstrating performance differences between prewarmed and non-prewarmed tables.

LANGUAGE: sql
CODE:
CREATE TABLE tbl_transactions_1
(
    tran_id_ SERIAL,
    transaction_date TIMESTAMPTZ,
    transaction_name TEXT
);

INSERT INTO tbl_transactions_1
(transaction_date, transaction_name)
SELECT x, 'dbrnd'
FROM generate_series('2010-01-01 00:00:00'::timestamptz, '2018-02-01 00:00:00'::timestamptz, '1 minutes'::interval) a(x);

LANGUAGE: sql
CODE:
CREATE TABLE tbl_transactions_2
(
    tran_id_ SERIAL,
    transaction_date TIMESTAMPTZ,
    transaction_name TEXT
);

INSERT INTO tbl_transactions_2
(transaction_date, transaction_name)
SELECT x, 'dbrnd'
FROM generate_series('2010-01-01 00:00:00'::timestamptz, '2018-02-01 00:00:00'::timestamptz, '1 minutes'::interval) a(x);

LANGUAGE: sql
CODE:
SELECT pg_prewarm('tbl_transactions_1') AS blocks_loaded;

LANGUAGE: sql
CODE:
EXPLAIN ANALYZE SELECT * FROM tbl_transactions_1;
EXPLAIN ANALYZE SELECT * FROM tbl_transactions_2;

----------------------------------------

TITLE: EXIT Statement With Condition Examples
DESCRIPTION: Demonstrates equivalent ways to write conditional EXIT statements

LANGUAGE: plpgsql
CODE:
exit when counter > 10;

LANGUAGE: plpgsql
CODE:
if counter > 10 then
   exit;
end if;

----------------------------------------

TITLE: Complete C# Implementation for Calling PostgreSQL Function
DESCRIPTION: Full C# program demonstrating function call with parameter binding and result handling

LANGUAGE: csharp
CODE:
using Npgsql;

var beginDate = new DateOnly(2024, 5, 10);
var endDate = new DateOnly(2024, 5, 15);

string connectionString = ConfigurationHelper.GetConnectionString("DefaultConnection");

try
{
    await using var dataSource = NpgsqlDataSource.Create(connectionString);

    await using var cmd = dataSource.CreateCommand("SELECT get_student_count($1,$2)");

    cmd.Parameters.AddWithValue(beginDate);
    cmd.Parameters.AddWithValue(endDate);

    await using var reader = await cmd.ExecuteReaderAsync();

    if (await reader.ReadAsync())
    {
        var studentCount = reader.GetInt32(0);

        Console.WriteLine($"Students who registered between {beginDate} and {endDate}: {studentCount} ");
    }

}
catch (NpgsqlException ex)
{
    Console.WriteLine($"Error: {ex.Message}");
}

----------------------------------------

TITLE: Connecting with PSQL CLI
DESCRIPTION: Basic connection string example for connecting to Neon using the PSQL command line interface.

LANGUAGE: bash
CODE:
# psql example connection string
psql postgresql://username:password@hostname:5432/database?sslmode=require

----------------------------------------

TITLE: Creating Database via SQL in Neon
DESCRIPTION: An image demonstrating how to create a database using SQL in Neon's SQL Editor or an SQL client like psql. This new feature allows users to manage databases and roles directly through SQL commands.

LANGUAGE: sql
CODE:
![Create database via SQL](/docs/relnotes/create_database_sql.jpg)

----------------------------------------

TITLE: Neon CLI Completion Script Example
DESCRIPTION: An example of the generated completion script for the neonctl CLI. This script defines a function _neonctl_yargs_completions that generates completions for neonctl commands and options.

LANGUAGE: text
CODE:
###-begin-neonctl-completions-###
#
# yargs command completion script
#
# Installation: neonctl completion >> ~/.bashrc
#    or neonctl completion >> ~/.bash_profile on OSX.
#
_neonctl_yargs_completions()
{
    local cur_word args type_list

    cur_word="${COMP_WORDS[COMP_CWORD]}"
    args=("${COMP_WORDS[@]}")

    # ask yargs to generate completions.
    type_list=$(neonctl --get-yargs-completions "${args[@]}")

    COMPREPLY=( $(compgen -W "${type_list}" -- ${cur_word}) )

    # if no match was found, fall back to filename completion
    if [ ${#COMPREPLY[@]} -eq 0 ]; then
      COMPREPLY=()
    fi

    return 0
}
complete -o bashdefault -o default -F _neonctl_yargs_completions neonctl
###-end-neonctl-completions-###

----------------------------------------

TITLE: Restarting PostgreSQL Using pg_ctl Command
DESCRIPTION: Advanced method using pg_ctl command with specific data directory path. Requires PostgreSQL version number and correct data directory path.

LANGUAGE: bash
CODE:
sudo -u postgres pg_ctl restart -D /var/lib/postgresql/<version>/main

LANGUAGE: bash
CODE:
sudo -u postgres pg_ctl restart -D /var/lib/postgresql/16/main

----------------------------------------

TITLE: Implementing PostgreSQL Update Operations with PHP PDO
DESCRIPTION: A PHP class that handles PostgreSQL database updates using PDO prepared statements. The class includes methods for updating stock information with proper parameter binding and error handling.

LANGUAGE: php
CODE:
<?php

namespace PostgreSQLTutorial;

/**
 * PostgreSQL PHP Update Demo
 */
class PostgreSQLPHPUpdate {

    /**
     * PDO object
     * @var \PDO
     */
    private $pdo;

    /**
     * Initialize the object with a specified PDO object
     * @param \PDO $pdo
     */
    public function __construct($pdo) {
        $this->pdo = $pdo;
    }

    /**
     * Update stock based on the specified id
     * @param int $id
     * @param string $symbol
     * @param string $company
     * @return int
     */
    public function updateStock($id, $symbol, $company) {

        // sql statement to update a row in the stock table
        $sql = 'UPDATE stocks '
                . 'SET company = :company, '
                . 'symbol = :symbol '
                . 'WHERE id = :id';

        $stmt = $this->pdo->prepare($sql);

        // bind values to the statement
        $stmt->bindValue(':symbol', $symbol);
        $stmt->bindValue(':company', $company);
        $stmt->bindValue(':id', $id);
        // update data in the database
        $stmt->execute();

        // return the number of row affected
        return $stmt->rowCount();
    }
}

----------------------------------------

TITLE: Creating Publication for Replication
DESCRIPTION: SQL commands demonstrating how to create publications for single and multiple tables

LANGUAGE: sql
CODE:
CREATE PUBLICATION my_publication FOR TABLE playing_with_neon;

CREATE PUBLICATION my_publication FOR TABLE users, departments;

----------------------------------------

TITLE: Creating Tables in Neon Postgres Database
DESCRIPTION: SQL commands to create 'clients', 'hotels', and 'reservations' tables in the Neon database. These tables form the structure for a hotel reservation system.

LANGUAGE: sql
CODE:
CREATE TABLE clients (
    client_id SERIAL PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100),
    phone_number VARCHAR(20)
);

CREATE TABLE hotels (
    hotel_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    location VARCHAR(100)
);

CREATE TABLE reservations (
    reservation_id SERIAL PRIMARY KEY,
    client_id INT NOT NULL,
    hotel_id INT NOT NULL,
    check_in_date DATE NOT NULL,
    check_out_date DATE NOT NULL,
    number_of_guests INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (client_id) REFERENCES clients(client_id),
    FOREIGN KEY (hotel_id) REFERENCES hotels(hotel_id)
);

----------------------------------------

TITLE: Renaming Database
DESCRIPTION: SQL command to rename the database using ALTER DATABASE statement

LANGUAGE: sql
CODE:
ALTER DATABASE db RENAME TO newdb;

----------------------------------------

TITLE: Optimized UPDATE Join with Table Aliases
DESCRIPTION: An optimized version of the UPDATE join query using table aliases to make the syntax more concise.

LANGUAGE: sql
CODE:
UPDATE
    product p
SET
    net_price = price - price * discount
FROM
    product_segment s
WHERE
    p.segment_id = s.id;

----------------------------------------

TITLE: Creating New Schema and Moving View Example in PostgreSQL
DESCRIPTION: Example of creating a new schema 'web' and moving the film_rating view to this schema.

LANGUAGE: sql
CODE:
CREATE SCHEMA web;

ALTER VIEW film_rating
SET SCHEMA web;

----------------------------------------

TITLE: Filtered sum() Calculation in PostgreSQL
DESCRIPTION: Shows how to use the FILTER clause with sum() to conditionally include values in the calculation, comparing all orders to completed orders.

LANGUAGE: sql
CODE:
WITH orders AS (
  SELECT 1 AS order_id, 'completed' AS status, 100 AS total
  UNION ALL
  SELECT 2 AS order_id, 'pending' AS status, 150 AS total
  UNION ALL
  SELECT 3 AS order_id, 'completed' AS status, 200 AS total
  UNION ALL
  SELECT 4 AS order_id, 'cancelled' AS status, 75 AS total
)
SELECT
  sum(total) AS all_orders_total,
  sum(total) FILTER (WHERE status = 'completed') AS completed_orders_total
FROM orders;

----------------------------------------

TITLE: Demonstrating psql.sh Browser-Based PostgreSQL Client
DESCRIPTION: This video snippet showcases psql.sh, a new browser-based version of the PostgreSQL command-line client. It allows users to instantly create a database and run SQL queries directly in the browser.

LANGUAGE: html
CODE:
<video autoPlay playsInline muted loop width="800" height="600">
  <source type="video/mp4" src="https://neondatabase.wpengine.com/wp-content/uploads/2024/12/psql.sh-6-December-2024.mp4"/>
</video>

----------------------------------------

TITLE: Branch Reset Operation
DESCRIPTION: Resets a child branch to the latest data from its parent branch.

LANGUAGE: bash
CODE:
neon branches reset dev/alex --parent

----------------------------------------

TITLE: Deleting a Neon Branch with GitHub Actions
DESCRIPTION: Shows a GitHub Actions workflow for deleting a Neon branch, specifying the project ID, branch, and API key.

LANGUAGE: yaml
CODE:
name: Delete Neon Branch with GitHub Actions
run-name: Delete a Neon Branch 🚀
on:
  push:
    branches:
      - 'main'
jobs:
  delete-neon-branch:
    uses: neondatabase/delete-branch-action@v3
    with:
      project_id: rapid-haze-373089
      branch: br-long-forest-224191
      api_key: { { secrets.NEON_API_KEY } }

----------------------------------------

TITLE: Creating Symbolic Link for pg_ctl
DESCRIPTION: Command to create a symbolic link for pg_ctl when it's not in system PATH. Replace <version> with PostgreSQL version number.

LANGUAGE: xml
CODE:
sudo ln -s /usr/lib/postgresql/<version>/bin/pg_ctl /usr/local/bin/pg_ctl

----------------------------------------

TITLE: Creating People Table Structure
DESCRIPTION: Creates a table named 'people' with an auto-incrementing ID and columns for first and last names.

LANGUAGE: sql
CODE:
CREATE TABLE people (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL
);

----------------------------------------

TITLE: Enabling UUID-OSSP Extension in PostgreSQL
DESCRIPTION: SQL command to enable the uuid-ossp extension in a PostgreSQL database. This must be run before using any UUID generation functions.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

----------------------------------------

TITLE: Creating Quarkus Project with Reactive PostgreSQL Client
DESCRIPTION: Uses the Quarkus CLI to create a new project with reactive PostgreSQL client and RESTEasy Reactive extensions.

LANGUAGE: shell
CODE:
quarkus create app neon-with-quarkus \
--name neon-with-quarkus \
--package-name com.neon.tech \
--extensions reactive-pg-client,resteasy-reactive

----------------------------------------

TITLE: FastAPI Application Docker Configuration
DESCRIPTION: Dockerfile for containerizing the FastAPI application using Python slim image.

LANGUAGE: dockerfile
CODE:
FROM python:3.12-slim

WORKDIR /app

COPY requirements.txt .

RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

----------------------------------------

TITLE: Listing Projects in an Organization using Neon CLI
DESCRIPTION: Demonstrates the use of the 'neon projects list' command with the new '--org-id' option to list all projects belonging to a specific organization. The command outputs a table with project details including ID, name, region, and creation date.

LANGUAGE: bash
CODE:
neon projects list --org-id org-xxxx-xxxx
Projects
┌───────────────────────────┬───────────────────────────┬────────────────────┬──────────────────────┐
│ Id                        │ Name                      │ Region Id          │ Created At           │
├───────────────────────────┼───────────────────────────┼────────────────────┼──────────────────────┤
│ bright-moon-12345678      │ dev-backend-api           │ aws-us-east-2      │ 2024-07-26T11:43:37Z │
├───────────────────────────┼───────────────────────────┼────────────────────┼──────────────────────┤
│ silent-forest-87654321    │ test-integration-service  │ aws-eu-central-1   │ 2024-05-30T22:14:49Z │
├───────────────────────────┼───────────────────────────┼────────────────────┼──────────────────────┤
│ crystal-stream-23456789   │ staging-web-app           │ aws-us-east-2      │ 2024-05-17T13:47:35Z │
└───────────────────────────┴───────────────────────────┴────────────────────┴──────────────────────┘

----------------------------------------

TITLE: Drizzle ORM Todo Schema with RLS
DESCRIPTION: TypeScript implementation of a todos table schema using Drizzle ORM with RLS policies

LANGUAGE: typescript
CODE:
import { InferSelectModel, sql } from 'drizzle-orm';
import { bigint, boolean, pgTable, text, timestamp } from 'drizzle-orm/pg-core';
import { authenticatedRole, authUid, crudPolicy } from 'drizzle-orm/neon';

export const todos = pgTable(
  'todos',
  {
    id: bigint('id', { mode: 'bigint' }).primaryKey().generatedByDefaultAsIdentity(),
    userId: text('user_id')
      .notNull()
      .default(sql`(auth.user_id())`),
    task: text('task').notNull(),
    isComplete: boolean('is_complete').notNull().default(false),
    insertedAt: timestamp('inserted_at', { withTimezone: true }).defaultNow().notNull(),
  },
  (table) => [
    crudPolicy({
      role: authenticatedRole,
      read: authUid(table.userId),
      modify: authUid(table.userId),
    }),
  ]
);

export type Todo = InferSelectModel<typeof todos>;

----------------------------------------

TITLE: Creating Employee Hierarchy Recursive View
DESCRIPTION: Shows how to convert the recursive query into a permanent recursive view for reusable access to the employee hierarchy.

LANGUAGE: sql
CODE:
CREATE RECURSIVE VIEW reporting_line (employee_id, subordinates) AS
SELECT
  employee_id,
  full_name AS subordinates
FROM
  employees
WHERE
  manager_id IS NULL
UNION ALL
SELECT
  e.employee_id,
  (
    rl.subordinates || ' > ' || e.full_name
  ) AS subordinates
FROM
  employees e
  INNER JOIN reporting_line rl ON e.manager_id = rl.employee_id;

----------------------------------------

TITLE: Adding .env Connection Snippet for Environment Variables in Python
DESCRIPTION: A new .env connection snippet was added to the Connection Details widget in the Neon Console. This addition allows users to easily set up environment variables for database connections in their projects.

LANGUAGE: python
CODE:
# No specific code provided, but typically involves setting database connection variables in a .env file

----------------------------------------

TITLE: Listing Branches with Neon CLI
DESCRIPTION: This command uses the Neon CLI to list branches in a project, showing their ID, name, default status, current state, and creation time. The 'Current State' field indicates whether a branch is ready, archived, or being initialized.

LANGUAGE: bash
CODE:
neon branches list --project-id green-hat-46829796
┌───────────────────────────┬──────┬─────────┬───────────────┬──────────────────────┐
│ Id                        │ Name │ Default │ Current State │ Created At           │
├───────────────────────────┼──────┼─────────┼───────────────┼──────────────────────┤
│ br-muddy-firefly-a7kzf0d4 │ main │ true    │ ready         │ 2024-10-30T14:59:57Z │
└───────────────────────────┴──────┴─────────┴───────────────┴──────────────────────┘

----------------------------------------

TITLE: Tracking Borrowing History with JSON_TABLE
DESCRIPTION: This SQL query uses JSON_TABLE and a CTE to track book loans and current borrowing status from the JSON data.

LANGUAGE: sql
CODE:
WITH book_loans AS (
    SELECT
        b.title,
        jt.*
    FROM library_books b,
    JSON_TABLE(
        data,
        '$.borrowing_history[*]'
        COLUMNS (
            user_id text PATH '$.user_id',
            checkout_date date PATH '$.checkout_date',
            return_date date PATH '$.return_date',
            condition text PATH '$.condition'
        )
    ) AS jt
)
SELECT
    title,
    user_id,
    checkout_date,
    COALESCE(return_date::text, 'Still borrowed') as return_status,
    condition
FROM book_loans
ORDER BY checkout_date DESC;

----------------------------------------

TITLE: Boolean Conditions in JOIN Operations
DESCRIPTION: Demonstrates using Boolean columns in JOIN conditions along with primary key matching

LANGUAGE: sql
CODE:
WITH contacts (user_id, email) AS (
    VALUES
    (1, 'alice@email.com'),
    (2, 'bob@email.com'),
    (3, 'charlie@email.com'),
    (4, 'david@email.com'),
    (5, 'eve@email.com')
)
SELECT u.id, u.username, c.email
FROM users u
JOIN contacts c ON u.id = c.user_id AND u.is_active = TRUE;

----------------------------------------

TITLE: Calculating Ages using DIV()
DESCRIPTION: Demonstrates how to calculate integer ages using DIV() function combined with AGE() and EXTRACT() functions.

LANGUAGE: sql
CODE:
SELECT name, DIV(EXTRACT(YEAR FROM AGE(current_date, birthdate)), 1) AS age
FROM employees;

----------------------------------------

TITLE: HTTP Header Configuration
DESCRIPTION: HTTP headers added to support batch queries in browser environments using the Neon serverless driver. The headers enable proper isolation level and read-only settings for batch operations.

LANGUAGE: http
CODE:
Neon-Batch-Isolation-Level
Neon-Batch-Read-Only

----------------------------------------

TITLE: Basic Syntax of IS NULL Operator in PostgreSQL
DESCRIPTION: This snippet shows the basic syntax for using the IS NULL operator to check if a value is NULL.

LANGUAGE: sql
CODE:
value IS NULL

----------------------------------------

TITLE: Example Pooled Connection String
DESCRIPTION: Connection string format for pooled connections with the -pooler suffix.

LANGUAGE: text
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456-pooler.us-east-2.aws.neon.tech/dbname

----------------------------------------

TITLE: Testing the Single-Value Stored Procedure Call in PHP
DESCRIPTION: Example code to test the 'add' method that calls the stored procedure, including necessary imports and error handling.

LANGUAGE: php
CODE:
<?php

require 'vendor/autoload.php';

use PostgreSQLTutorial\Connection as Connection;
use PostgreSQLTutorial\StoreProc as StoreProc;

try {
    // connect to the PostgreSQL database
    $pdo = Connection::get()->connect();
    //
    $storeProc = new StoreProc($pdo);

    $result = $storeProc->add(20, 30);
    echo $result;

} catch (\PDOException $e) {
    echo $e->getMessage();
}

----------------------------------------

TITLE: SQL Role Privilege Update
DESCRIPTION: The neon_superuser role was updated to include the REPLICATION privilege to support logical replication functionality. This privilege is automatically granted to default Postgres roles and roles created via Neon's interfaces but cannot be granted to SQL-created roles.

LANGUAGE: sql
CODE:
REPLICATION

----------------------------------------

TITLE: Switching Database Connection
DESCRIPTION: psql command to switch the current database connection to dvdrental

LANGUAGE: sql
CODE:
\c dvdrental

----------------------------------------

TITLE: Symmetric Encryption with pgcrypto
DESCRIPTION: Example of using pgp_sym_encrypt function for symmetric-key encryption of confidential data using a password.

LANGUAGE: sql
CODE:
SELECT pgp_sym_encrypt('Confidential Data', 'encryption_password');

----------------------------------------

TITLE: Defining Frontmatter in Neon Documentation Markdown Files
DESCRIPTION: Illustrates the structure of frontmatter in Neon's documentation Markdown files. Frontmatter contains metadata about the page, including title, table of contents settings, and redirection information.

LANGUAGE: yaml
CODE:
---
title: Connect a Next.js application to Neon
subtitle: Set up a Neon project and connect from a Next.js application
enableTableOfContents: true
redirectFrom:
  - /docs/content/<old_directory_name>
updatedOn: '2023-10-07T12:25:27.662Z'
---

----------------------------------------

TITLE: Connecting to Neon Database using psql
DESCRIPTION: Bash command to connect to a Neon database using psql with a connection string, which includes the username, password, host, and database name.

LANGUAGE: bash
CODE:
psql postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require

----------------------------------------

TITLE: Inserting Data into Table with Generated Column for Net Price in PostgreSQL
DESCRIPTION: Inserts rows into the 'products' table, showing how the generated 'net_price' column is automatically calculated based on the list price, tax, and discount values.

LANGUAGE: sql
CODE:
INSERT INTO products (name, list_price, tax, discount)
VALUES
    ('A', 100.00, 10.00, 5.00),
    ('B', 50.00, 8.00, 0.00),
    ('C', 120.00, 12.50, 10.00)
RETURNING *;

----------------------------------------

TITLE: Database Creation Commands
DESCRIPTION: SQL commands to connect to PostgreSQL and create a new database

LANGUAGE: python
CODE:
psql -U postgres

LANGUAGE: python
CODE:
CREATE DATABASE suppliers;

LANGUAGE: sql
CODE:
exit

----------------------------------------

TITLE: Creating Dashboard Livewire Component
DESCRIPTION: PHP code for the Dashboard Livewire component, rendering the dashboard view.

LANGUAGE: php
CODE:
<?php

namespace App\Livewire;

use Livewire\Component;

class Dashboard extends Component
{
    public function render()
    {
        return view('livewire.dashboard')->layout('layouts.app');
    }
}

----------------------------------------

TITLE: Listing Projects and Branches with Neon CLI
DESCRIPTION: Demonstrates how to list all projects and branches in a Neon account, including shared projects.

LANGUAGE: bash
CODE:
neon projects list

----------------------------------------

TITLE: Handling too_many_rows Exception
DESCRIPTION: Demonstrates error handling when a SELECT INTO statement returns multiple rows when only one row is expected.

LANGUAGE: sql
CODE:
do
$$
declare
	rec record;
begin
	-- select film
	select film_id, title
	into strict rec
	from film
	where title LIKE 'A%';

	exception
	   when too_many_rows then
	      raise exception 'Search query returns too many rows';
end;
$$;

----------------------------------------

TITLE: Configuring Prisma Schema with Shadow Database URL
DESCRIPTION: A code snippet showing how to configure the Prisma schema file (schema.prisma) with a shadow database URL. This configuration is no longer necessary due to recent improvements in Neon's database management capabilities.

LANGUAGE: prisma
CODE:
datasource db {
provider  = "postgresql"
url       = env("DATABASE_URL")
directUrl = env("DIRECT_DATABASE_URL")
shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

----------------------------------------

TITLE: Basic Math Functions Usage in PostgreSQL
DESCRIPTION: Examples of fundamental PostgreSQL math functions including absolute value, rounding, exponential, and logarithmic operations. Each function demonstrates its usage with specific numeric inputs and expected outputs.

LANGUAGE: sql
CODE:
ABS(-10)              -- Returns: 10
CBRT(8)               -- Returns: 2
CEIL(-12.8)           -- Returns: -12
DEGREES(PI())          -- Returns: 180
DIV(8,3)               -- Returns: 2
EXP(1)                -- Returns: 2.71
FACTORIAL(5)          -- Returns: 120
FLOOR(10.6)           -- Returns: 10

----------------------------------------

TITLE: Handling Nested JSONB Data with jsonb_to_record()
DESCRIPTION: Demonstrates how to use jsonb_to_record() with a custom type to handle nested JSONB data, such as an address field within an employee record.

LANGUAGE: sql
CODE:
SELECT *
FROM jsonb_to_record('{
  "id": "125",
  "name": "Emily Clark",
  "department": "Marketing",
  "salary": "68000",
  "address": {
    "street": "123 Elm St",
    "city": "Springfield"
  }
}') AS x(id INT, name TEXT, department TEXT, salary NUMERIC, address ADDRESS_TYPE);

----------------------------------------

TITLE: Querying PostgreSQL Version in Neon
DESCRIPTION: This SQL query retrieves the current version of PostgreSQL running in your Neon project. It can be executed from the Neon SQL Editor or any SQL client connected to your Neon database.

LANGUAGE: sql
CODE:
SELECT version();

----------------------------------------

TITLE: Simple Power Calculation Example
DESCRIPTION: Shows how to use POWER() function to raise 2 to the power of 3.

LANGUAGE: sql
CODE:
SELECT POWER(2,3) result;

----------------------------------------

TITLE: Basic PostgreSQL REVERSE() Function Example
DESCRIPTION: This example demonstrates the basic usage of the REVERSE() function to reverse the string 'SQL'.

LANGUAGE: sql
CODE:
SELECT REVERSE('SQL');

----------------------------------------

TITLE: Basic Connection String Example
DESCRIPTION: Example showing how to get a basic connection string for a specific branch

LANGUAGE: bash
CODE:
neon connection-string mybranch
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname

----------------------------------------

TITLE: Importing Neon Serverless Driver in Deno
DESCRIPTION: This snippet demonstrates how to import the Neon serverless driver in a Deno project. It uses the 'npm:' specifier to import the package from npm.

LANGUAGE: javascript
CODE:
import { Pool } from 'npm:@neondatabase/serverless';

----------------------------------------

TITLE: Rust Database Connection
DESCRIPTION: Example of connecting to Neon using Rust with postgres and SSL support.

LANGUAGE: rust
CODE:
// Rust example
use postgres::Client;
use openssl::ssl::{SslConnector, SslMethod};
use postgres_openssl::MakeTlsConnector;
use std::error;
use std::env;
use dotenv::dotenv;

fn main() -> Result<(), Box<dyn error::Error>> {
    // Load environment variables from .env file
    dotenv().ok();

    // Get the connection string from the environment variable
    let conn_str = env::var("DATABASE_URL")?;

    let builder = SslConnector::builder(SslMethod::tls())?;
    let connector = MakeTlsConnector::new(builder.build());
    let mut client = Client::connect(&conn_str, connector)?;

    for row in client.query("select version()", &[])? {
        let ret: String = row.get(0);
        println!("Result = {}", ret);
    }
    Ok(())
}

----------------------------------------

TITLE: Implementing Connection Retry with Node.js
DESCRIPTION: Implementation of connection retry logic with exponential backoff using node-retry library

LANGUAGE: javascript
CODE:
require('dotenv').config();
var Client = require('pg').Client;
var retry = require('retry');

var connectionString = process.env.DATABASE_URL;

function connectWithRetry() {
  var operation = retry.operation({
    retries: 5, // number of retries before giving up
    minTimeout: 4000, // minimum time between retries in milliseconds
    randomize: true, // adds randomness to timeouts to prevent retries from overwhelming the server
  });

  operation.attempt(function (currentAttempt) {
    var client = new Client({ connectionString });

    client
      .connect()
      .then(function () {
        console.log('Connected to the database');

        // Perform your operations with the client
        // For example, let's run a simple SELECT query
        return client.query('SELECT NOW()');
      })
      .then(function (res) {
        console.log(res.rows[0]);

        return client.end();
      })
      .catch(function (err) {
        if (operation.retry(err)) {
          console.warn(`Failed to connect on attempt ${currentAttempt}, retrying...`);
        } else {
          console.error('Failed to connect to the database after multiple attempts:', err);
        }
      });
  });
}

----------------------------------------

TITLE: Enabling pg_trgm Extension in PostgreSQL
DESCRIPTION: This SQL command enables the pg_trgm extension in a PostgreSQL database, allowing for trigram-based text search functionality.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pg_trgm;

----------------------------------------

TITLE: Basic SIGN() Function Syntax in PostgreSQL
DESCRIPTION: Shows the basic syntax of the SIGN() function which accepts a numeric value and returns -1 for negative, 0 for zero, and 1 for positive numbers.

LANGUAGE: phpsql
CODE:
SIGN(numeric_value)

----------------------------------------

TITLE: Verifying PostgreSQL Uninstallation
DESCRIPTION: Command to verify that PostgreSQL has been successfully uninstalled by checking the version command availability.

LANGUAGE: bash
CODE:
psql --version

----------------------------------------

TITLE: Authenticating with Neon CLI
DESCRIPTION: Command to authenticate the Neon CLI with your Neon account.

LANGUAGE: bash
CODE:
neonctl auth

----------------------------------------

TITLE: Dropping Username Validation Trigger
DESCRIPTION: Removes the username_check trigger from the staff table.

LANGUAGE: sql
CODE:
DROP TRIGGER username_check
ON staff;

----------------------------------------

TITLE: Creating Question Controller Index Method
DESCRIPTION: Implementation of the index method in QuestionController to retrieve and return all questions as JSON.

LANGUAGE: php
CODE:
public function index() {
    $questions = \App\Models\Question::all();
    return response()->json($questions);
}

----------------------------------------

TITLE: Installing neon_utils Extension in PostgreSQL
DESCRIPTION: This SQL command installs the neon_utils extension in a Neon database, enabling access to the num_cpus() function for monitoring vCPU allocation.

LANGUAGE: sql
CODE:
CREATE EXTENSION neon_utils;

----------------------------------------

TITLE: Implementing Tenant Dashboard Controller
DESCRIPTION: PHP code for the DashboardController, displaying the tenant dashboard.

LANGUAGE: php
CODE:
<?php

namespace App\Http\Controllers\Tenant;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

class DashboardController extends Controller
{
    public function index()
    {
        return view('tenant.dashboard');
    }
}

----------------------------------------

TITLE: Configuring Neon MCP Server in Cursor (Windows WSL)
DESCRIPTION: JSON configuration for adding the Neon MCP Server to Cursor on Windows using WSL, specifying the command and arguments in the mcp.json file.

LANGUAGE: json
CODE:
{
   "mcpServers": {
      "neon": {
         "command": "wsl",
         "args": ["npx", "-y", "@neondatabase/mcp-server-neon", "start", "<YOUR_NEON_API_KEY>"]
      }
   }
}

----------------------------------------

TITLE: Defining Orders Table Schema in Laravel Migration
DESCRIPTION: PHP code for the up method in the migration file, defining the schema for the orders table.

LANGUAGE: php
CODE:
public function up()
{
    Schema::create('orders', function (Blueprint $table) {
        $table->id();
        $table->string('customer_name');
        $table->decimal('total', 8, 2);
        $table->enum('status', ['pending', 'processing', 'completed', 'cancelled'])->default('pending');
        $table->timestamps();
    });
}

----------------------------------------

TITLE: Configuring Database Connection Properties for Spring Boot
DESCRIPTION: Properties file configuration for setting up the database connection and Flyway in a Spring Boot application.

LANGUAGE: properties
CODE:
spring.datasource.url=jdbc:postgresql://<your-neon-hostname>/<your-database-name>
spring.datasource.username=<your-username>
spring.datasource.password=<your-password>

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=validate

spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration

----------------------------------------

TITLE: Adding Task Routes
DESCRIPTION: Adds API routes for task CRUD operations within the authenticated group in routes/api.php.

LANGUAGE: php
CODE:
use App\Http\Controllers\Api\TaskController;

Route::middleware('auth:sanctum')->group(function () {
    Route::post('/logout', [AuthController::class, 'logout']);

    // Add the task routes here:
    Route::apiResource('tasks', TaskController::class);
});

----------------------------------------

TITLE: Installing Required Packages for Drizzle ORM and PostgreSQL
DESCRIPTION: Installs Drizzle ORM, PostgreSQL driver, and related dependencies for the project.

LANGUAGE: bash
CODE:
npm install drizzle-orm pg dotenv
npm install -D @types/pg drizzle-kit

----------------------------------------

TITLE: Configuring Neon Database Connection String
DESCRIPTION: Environment variable configuration for Neon database connection string

LANGUAGE: shell
CODE:
DATABASE_URL="postgresql://<user>:<password>@<endpoint_hostname>.neon.tech:<port>/<dbname>?sslmode=require"

----------------------------------------

TITLE: Database Connection Configuration in appsettings.json
DESCRIPTION: JSON configuration for storing database connection string in development environment.

LANGUAGE: json
CODE:
{
  "ConnectionStrings": {
    "NeonConnection": "Host=your-neon-hostname;Database=neondb;Username=your-username;Password=your-password;SSL Mode=Require;Trust Server Certificate=true"
  }
}

----------------------------------------

TITLE: Prepared Statement with Node.js pg Client
DESCRIPTION: Example showing how to use prepared statements with the Node.js pg client library when connecting through PgBouncer.

LANGUAGE: javascript
CODE:
const query = {
  // give the query a unique name
  name: 'fetch-plan',
  text: 'SELECT * FROM users WHERE username = $1',
  values: ['alice'],
};
client.query(query);

----------------------------------------

TITLE: Configuring API Keys in .env File
DESCRIPTION: Sets up environment variables for OpenAI, Composio, and Neon API keys in a .env file.

LANGUAGE: env
CODE:
OPENAI_API_KEY = YOUR_OPENAI_API_KEY
COMPOSIO_API_KEY = YOUR_COMPOSIO_API_KEY
NEON_API_KEY = YOUR_NEON_API_KEY

----------------------------------------

TITLE: Transaction Handling Migration
DESCRIPTION: Demonstrates how to migrate transaction handling from Vercel Postgres SDK to Neon's pooled connections.

LANGUAGE: typescript
CODE:
try {
  const pool = new Pool({ connectionString: process.env.DATABASE_URL });
  try {
    // Your queries here
  } finally {
    await pool.end();
  }
} catch (error) {
  console.error('Database error:', error);
  throw new Error('Failed to fetch users');
}

----------------------------------------

TITLE: Creating New Laravel Project
DESCRIPTION: Terminal commands to create a new Laravel project for the URL shortener application with PostgreSQL configuration.

LANGUAGE: bash
CODE:
laravel new url-shortener

cd url-shortener

----------------------------------------

TITLE: Initializing Grafbase Project
DESCRIPTION: Commands to create and initialize a new Grafbase project directory

LANGUAGE: bash
CODE:
npx grafbase init grafbase-neon
cd grafbase-neon

----------------------------------------

TITLE: Scheduling Automated Materialized View Refresh in PostgreSQL
DESCRIPTION: This SQL snippet uses pg_cron to schedule an automated refresh of the 'daily_revenue' materialized view. It sets up a cron job to refresh the view concurrently every hour.

LANGUAGE: sql
CODE:
SELECT cron.schedule('refresh_daily_revenue', '0 * * * *', $$REFRESH MATERIALIZED VIEW CONCURRENTLY daily_revenue$$);

----------------------------------------

TITLE: Running the AutoGen + Neon AI agent example
DESCRIPTION: Command to execute the main Python script and start the AI agent workflow.

LANGUAGE: bash
CODE:
python main.py

----------------------------------------

TITLE: Installing Neon Serverless Driver
DESCRIPTION: NPM command to install the Neon Serverless Driver package.

LANGUAGE: bash
CODE:
npm install @neondatabase/serverless

----------------------------------------

TITLE: Setting Up Virtual Environment for AI Agent Project
DESCRIPTION: Creates and activates a virtual environment for the AI agent project using venv.

LANGUAGE: bash
CODE:
cd neon-composio-crewai
python3 -m venv venv
source venv/bin/activate # on Windows, use `venv\Scripts\activate`

----------------------------------------

TITLE: Basic Price Calculation with Magic Number
DESCRIPTION: Example showing price calculation using a hard-coded value, demonstrating why constants are needed for better code readability.

LANGUAGE: sql
CODE:
selling_price = net_price + net_price * 0.1;

----------------------------------------

TITLE: Creating Replication Role with Neon API (Bash/cURL)
DESCRIPTION: cURL command to create a new role for replication using the Neon API.

LANGUAGE: bash
CODE:
curl 'https://console.neon.tech/api/v2/projects/hidden-cell-763301/branches/br-blue-tooth-671580/roles' \
  -H 'Accept: application/json' \
  -H "Authorization: Bearer $NEON_API_KEY" \
  -H 'Content-Type: application/json' \
  -d '{
  "role": {
    "name": "cdc_role"
  }
}' | jq

----------------------------------------

TITLE: Modifying Schema in Development Branch
DESCRIPTION: SQL commands to alter the table schema by adding a description column and creating an index on it

LANGUAGE: sql
CODE:
ALTER TABLE playing_with_neon
ADD COLUMN description TEXT;

CREATE INDEX idx_playing_with_neon_description ON playing_with_neon (description);

----------------------------------------

TITLE: Creating Initial Person Table Schema in SQL
DESCRIPTION: Creates a basic table schema for storing person records with id, name, and email fields

LANGUAGE: sql
CODE:
CREATE TABLE person (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL
);

----------------------------------------

TITLE: Connecting to Neon Postgres Database
DESCRIPTION: Example connection string for connecting to a Neon Postgres database. This string includes the username, password, host, and database name.

LANGUAGE: text
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname

----------------------------------------

TITLE: Closing Named dblink Connection
DESCRIPTION: Closes a named dblink connection to free up resources.

LANGUAGE: sql
CODE:
SELECT dblink_disconnect('my_remote_db');

----------------------------------------

TITLE: Creating Books Database Schema in SQL
DESCRIPTION: SQL commands to create a books_to_read table with id, title, and author fields, followed by sample data insertion.

LANGUAGE: sql
CODE:
CREATE TABLE books_to_read (
 id SERIAL PRIMARY KEY,
 title TEXT,
 author TEXT
);

INSERT INTO books_to_read (title, author)
VALUES
    ('The Way of Kings', 'Brandon Sanderson'),
    ('The Name of the Wind', 'Patrick Rothfuss'),
    ('Coders at Work', 'Peter Seibel'),
    ('1984', 'George Orwell');

----------------------------------------

TITLE: PG_SLEEP() with NOW() Function
DESCRIPTION: Shows how PG_SLEEP() interacts with the NOW() function in a single statement.

LANGUAGE: sql
CODE:
SELECT NOW(), PG_SLEEP(3), NOW();

----------------------------------------

TITLE: MAKE_TIME() with Invalid Parameters
DESCRIPTION: Example demonstrating error handling when passing invalid hour value (25) to the MAKE_TIME() function.

LANGUAGE: sql
CODE:
SELECT MAKE_TIME(25,30,45);

----------------------------------------

TITLE: Analyzing User Activity Patterns with date_trunc()
DESCRIPTION: This example creates a user_activities table and uses date_trunc() to analyze daily activity patterns in a hypothetical social media application.

LANGUAGE: sql
CODE:
CREATE TABLE user_activities (
  user_id INT,
  activity_type VARCHAR(50),
  activity_time TIMESTAMP WITH TIME ZONE
);

INSERT INTO user_activities (user_id, activity_type, activity_time) VALUES
  (1, 'login', '2024-03-01 08:30:00+00'),
  (2, 'login', '2024-03-01 12:30:00+00'),
  (2, 'post', '2024-03-03 09:15:00+00'),
  (1, 'comment', '2024-03-05 10:45:00+00'),
  (3, 'login', '2024-03-08 14:00:00+00'),
  (2, 'logout', '2024-03-08 16:30:00+00'),
  (1, 'logout', '2024-03-12 18:00:00+00'),
  (3, 'post', '2024-03-15 19:30:00+00'),
  (3, 'logout', '2024-03-18 20:45:00+00');


-- Analyze daily activity pattern
SELECT
  date_trunc('day', activity_time) AS day,
  activity_type,
  COUNT(*) AS activity_count
FROM user_activities
GROUP BY date_trunc('day', activity_time), activity_type
ORDER BY day, activity_type;

----------------------------------------

TITLE: Basic String Constant Selection in PostgreSQL
DESCRIPTION: Demonstrates the basic usage of string constants with single quotes in PostgreSQL.

LANGUAGE: sql
CODE:
select 'String constant';

----------------------------------------

TITLE: Using the Neon CLI ip-allow Command
DESCRIPTION: The ip-allow command is used to manage IP allowlists for Neon projects. It supports list, add, remove, and reset subcommands.

LANGUAGE: bash
CODE:
neon ip-allow <subcommand> [options]

----------------------------------------

TITLE: Defining Sequelize Model for JSONB Document Store
DESCRIPTION: This JavaScript snippet uses Sequelize ORM to define a model for the 'documents' table with a JSONB column. It demonstrates how to set up the connection and define the model structure.

LANGUAGE: javascript
CODE:
import Sequelize from 'sequelize';

const sequelize = new Sequelize(process.env.POSTGRES_CONNECTION_STRING);

const Document = sequelize.define(
  'Document',
  {
    data: {
      type: Sequelize.DataTypes.JSONB,
      allowNull: false,
    },
  },
  { tableName: 'documents', timestamps: false }
);

----------------------------------------

TITLE: Flask Route Blueprint Configuration
DESCRIPTION: Blueprint implementation for user-related routes including API endpoints and HTML views.

LANGUAGE: python
CODE:
from flask import Blueprint, jsonify, request, render_template, redirect, url_for
from app.models.user import User
from app import db

user_bp = Blueprint('user', __name__, url_prefix='/user')

@user_bp.route('/create', methods=['POST'])
def create_user():
    data = request.form
    new_user = User(username=data['username'], email=data['email'])
    db.session.add(new_user)
    db.session.commit()
    return redirect(url_for('user.list_users'))

@user_bp.route('/list', methods=['GET'])
def list_users():
    users = User.query.all()
    return render_template('users.html', users=users)

@user_bp.route('/api/list', methods=['GET'])
def get_users_api():
    users = User.query.all()
    return jsonify([user.to_dict() for user in users])

----------------------------------------

TITLE: Creating and Populating Table for LTRIM Example
DESCRIPTION: Example showing table creation and data insertion for demonstrating LTRIM() function with table data.

LANGUAGE: sql
CODE:
CREATE TABLE articles(
   id SERIAL PRIMARY KEY,
   title VARCHAR(255) NOT NULL
);

INSERT INTO articles(title)
VALUES
   ('   Mastering PostgreSQL string functions'),
   (' PostgreSQL LTRIM() function')
RETURNING *;

----------------------------------------

TITLE: Creating Ride Pickup Table for H3 Analysis
DESCRIPTION: SQL commands to create and populate a table with ride pickup location data for analysis using H3 indexing.

LANGUAGE: SQL
CODE:
DROP TABLE IF EXISTS ride_pickups;
CREATE TABLE ride_pickups (
    id SERIAL PRIMARY KEY,
    pickup_time TIMESTAMP,
    pickup_location GEOMETRY(POINT, 4326)
);

INSERT INTO ride_pickups (pickup_time, pickup_location) VALUES
    ('2023-06-15 08:30:00', ST_SetSRID(ST_MakePoint(-73.9812, 40.7657), 4326)),
    ('2023-06-15 09:15:00', ST_SetSRID(ST_MakePoint(-73.9815, 40.7659), 4326)),
    ('2023-06-15 10:00:00', ST_SetSRID(ST_MakePoint(-73.9810, 40.7655), 4326)),
    ('2023-06-15 11:30:00', ST_SetSRID(ST_MakePoint(-73.9934, 40.7505), 4326)),
    ('2023-06-15 12:45:00', ST_SetSRID(ST_MakePoint(-73.9937, 40.7508), 4326)),
    ('2023-06-15 14:00:00', ST_SetSRID(ST_MakePoint(-74.0060, 40.7128), 4326)),
    ('2023-06-15 15:30:00', ST_SetSRID(ST_MakePoint(-73.9619, 40.7681), 4326)),
    ('2023-06-15 17:00:00', ST_SetSRID(ST_MakePoint(-73.9622, 40.7683), 4326)),
    ('2023-06-15 18:30:00', ST_SetSRID(ST_MakePoint(-73.9840, 40.7549), 4326)),
    ('2023-06-15 20:00:00', ST_SetSRID(ST_MakePoint(-73.9887, 40.7229), 4326));

----------------------------------------

TITLE: Demonstrating Error with Odd Number of Arguments in jsonb_build_object()
DESCRIPTION: Illustrates the error that occurs when using an odd number of arguments in the jsonb_build_object() function.

LANGUAGE: sql
CODE:
SELECT
  jsonb_build_object(
    'title', 'Theory Mermaid', 'length'
  );

----------------------------------------

TITLE: Listing Organization API Keys via Neon API
DESCRIPTION: This snippet demonstrates how to list organization API keys using the Neon API. It requires authentication with a valid API key and the organization ID.

LANGUAGE: bash
CODE:
curl "https://console.neon.tech/api/v2/organizations/{org_id}/api_keys" \
 -H "Authorization: Bearer $NEON_API_KEY" \
 -H "Accept: application/json" | jq

----------------------------------------

TITLE: Inserting Element into JSON Array with jsonb_insert()
DESCRIPTION: Example of using jsonb_insert() to add a new element to the beginning of a JSON array.

LANGUAGE: SQL
CODE:
SELECT jsonb_insert('[1,2,3]', '{0}', '0');

----------------------------------------

TITLE: Database Schema Definition
DESCRIPTION: Defines the database schema using Drizzle ORM with a user_messages table to store user data.

LANGUAGE: typescript
CODE:
import { pgTable, text, timestamp } from 'drizzle-orm/pg-core';

export const UserMessages = pgTable('user_messages', {
  user_id: text('user_id').primaryKey().notNull(),
  createTs: timestamp('create_ts').defaultNow().notNull(),
  message: text('message').notNull(),
});

----------------------------------------

TITLE: Counting Differences Between Tables in PostgreSQL
DESCRIPTION: Uses COUNT function with FULL OUTER JOIN to count the total number of differences between two tables.

LANGUAGE: sql
CODE:
SELECT
  COUNT (*)
FROM
  foo FULL
  OUTER JOIN bar USING (id, name)
WHERE
  foo.id IS NULL
  OR bar.id IS NULL;

----------------------------------------

TITLE: Starting Next.js Application in Development Mode
DESCRIPTION: Commands to navigate to the project directory and start the Next.js application in development mode.

LANGUAGE: shell
CODE:
cd my-app
npm run dev

----------------------------------------

TITLE: Basic ISFINITE Function Syntax
DESCRIPTION: The fundamental syntax of the PostgreSQL ISFINITE() function that accepts a date, timestamp, or interval value and returns a boolean.

LANGUAGE: sql
CODE:
isfinite ( value ) → boolean

----------------------------------------

TITLE: Project Details API Response (JSON)
DESCRIPTION: This JSON response from the Neon API shows project details, including usage metrics such as data storage, compute time, and data transfer.

LANGUAGE: json
CODE:
{
  "project": {
    "data_storage_bytes_hour": 113808080168,
    "data_transfer_bytes": 40821459,
    "written_data_bytes": 1566830744,
    "compute_time_seconds": 2785,
    "active_time_seconds": 11024,
    "cpu_used_sec": 2785,
    "id": "summer-bush-30064139",
    "platform_id": "aws",
    "region_id": "aws-us-east-2",
    "name": "summer-bush-30064139",
    "provisioner": "k8s-neonvm",
    "default_endpoint_settings": {
      "autoscaling_limit_min_cu": 0.25,
      "autoscaling_limit_max_cu": 0.25,
      "suspend_timeout_seconds": 0
    },
    "settings": {
      "allowed_ips": {
        "ips": [],
        "protected_branches_only": false,
        "protected_branches_only": false
      },
      "enable_logical_replication": false
    },
    "pg_version": 16,
    "proxy_host": "us-east-2.aws.neon.tech",
    "branch_logical_size_limit": 204800,
    "branch_logical_size_limit_bytes": 214748364800,
    "store_passwords": true,
    "creation_source": "console",
    "history_retention_seconds": 86400,
    "created_at": "2024-04-02T12:54:33Z",
    "updated_at": "2024-04-10T17:26:07Z",
    "synthetic_storage_size": 492988552,
    "consumption_period_start": "2024-04-02T12:54:33Z",
    "consumption_period_end": "2024-05-01T00:00:00Z",
    "quota_reset_at": "2024-05-01T00:00:00Z",
    "owner_id": "8d5f604c-d04e-4795-baf7-e87909a5d959",
    "owner": {
      "email": "alex@domain.com",
      "branches_limit": -1,
      "subscription_type": "launch"
    },
    "compute_last_active_at": "2024-04-10T17:26:05Z"
  }
}

----------------------------------------

TITLE: Using PostgreSQL NOW() Function
DESCRIPTION: The NOW() function returns the current date and time with the time zone of the database server. It doesn't require any arguments and returns a timestamp with time zone.

LANGUAGE: sql
CODE:
SELECT NOW();

----------------------------------------

TITLE: Server Endpoint with node-postgres in SolidStart
DESCRIPTION: JavaScript code for creating a server endpoint (API route) in SolidStart using the node-postgres library to connect to a Neon database and query the PostgreSQL version.

LANGUAGE: javascript
CODE:
// File: routes/api/test.ts

import { Pool } from 'pg';

const pool = new Pool({
  connectionString: import.meta.env.DATABASE_URL,
  ssl: true,
});

export async function GET() {
  const client = await pool.connect();
  let data = {};
  try {
    const { rows } = await client.query('SELECT version()');
    data = rows[0];
  } finally {
    client.release();
  }
  return new Response(JSON.stringify(data), { headers: { 'Content-Type': 'application/json' } });
}

----------------------------------------

TITLE: Attempting to Insert Very Small Number into DOUBLE PRECISION Column in PostgreSQL
DESCRIPTION: This example shows an attempt to insert a very small number (1E-400) into a DOUBLE PRECISION column, resulting in an out of range error due to the limitations of the data type.

LANGUAGE: SQL
CODE:
INSERT INTO t(c)
VALUES (1E-400);

----------------------------------------

TITLE: Removing a Replication Slot in PostgreSQL
DESCRIPTION: This command removes a logical replication slot named 'my_replication_slot' using the pg_drop_replication_slot() function.

LANGUAGE: sql
CODE:
SELECT pg_drop_replication_slot('my_replication_slot');

----------------------------------------

TITLE: Changing PostgreSQL User Password Example
DESCRIPTION: This SQL example changes the password of the 'super' user to 'secret123' using the ALTER ROLE statement.

LANGUAGE: sql
CODE:
ALTER ROLE super WITH PASSWORD 'secret123';

----------------------------------------

TITLE: Data Import Script for Neon Postgres
DESCRIPTION: Node.js script to import data from JSON files into Neon Postgres tables.

LANGUAGE: javascript
CODE:
import pg from 'pg';
import fs from 'fs';

const { Client } = pg;

async function importProducts() {
    const neonConnectionString = process.env.NEON_CONNECTION_STRING;
    const client = new Client({ connectionString: neonConnectionString });

    try {
        await client.connect();
        const rawData = fs.readFileSync('Product.json');
        const productData = JSON.parse(rawData);

        await client.query('BEGIN');

        const insertValues = [];
        const placeholders = [];

        productData[0].data.forEach((product, index) => {
            const { name, description, price, stock, category } = product;
            const categoryId = Number(category.id);

            const offset = index * 5;
            placeholders.push(`($${offset + 1}, $${offset + 2}, $${offset + 3}, $${offset + 4}, $${offset + 5})`);
            insertValues.push(name, description, price, stock, categoryId);
        });

        const insertQuery = `
          INSERT INTO products (name, description, price, stock, category_id)
          VALUES ${placeholders.join(', ')}
        `;

        await client.query(insertQuery, insertValues);
        await client.query('COMMIT');
        console.log('Products imported successfully!');

    } catch (error) {
        console.error('Error during product import:', error);
        await client.query('ROLLBACK');
    } finally {
        await client.end();
    }
}

importProducts();

----------------------------------------

TITLE: Creating Employee Table for Recursive Query Example
DESCRIPTION: Creates a table named 'employees' with columns for employee_id, full_name, and manager_id to demonstrate hierarchical data structure.

LANGUAGE: SQL
CODE:
CREATE TABLE employees (
  employee_id SERIAL PRIMARY KEY,
  full_name VARCHAR NOT NULL,
  manager_id INT
);

----------------------------------------

TITLE: Multi-Word Full Text Search in Postgres
DESCRIPTION: This SQL query shows how to use phraseto_tsquery() for searching multiple words without needing to specify operators between tokens.

LANGUAGE: sql
CODE:
SELECT
    *
  FROM documents
  WHERE searchable @@ phraseto_tsquery('english', 'searching text');

----------------------------------------

TITLE: Creating PostgreSQL Database for Demo
DESCRIPTION: SQL command to create a new database named 'stocks' for the demonstration.

LANGUAGE: sql
CODE:
CREATE DATABASE stocks;

----------------------------------------

TITLE: Sorting Search Results by Relevance
DESCRIPTION: Demonstrates how to sort search results by relevance using the paradedb.score() function.

LANGUAGE: sql
CODE:
SELECT description, category, rating, paradedb.score(id)
FROM mock_items
WHERE description @@@ 'shoes'
ORDER BY paradedb.score(id) DESC;

----------------------------------------

TITLE: Declaring PL/pgSQL Row Variables
DESCRIPTION: Syntax for declaring row variables in PL/pgSQL that can hold entire rows from tables or views.

LANGUAGE: SQL
CODE:
row_variable table_name%ROWTYPE;
row_variable view_name%ROWTYPE;

----------------------------------------

TITLE: Running Sentiment Analysis and Generating Reports
DESCRIPTION: JavaScript code to process customer feedback, analyze it using Azure AI Language, and generate reports based on the analysis results.

LANGUAGE: javascript
CODE:
const { processFeedback } = require('./src/analyze');
const { generateSentimentReport } = require('./src/reports');

async function main() {
  try {
    // Process new feedback
    await processFeedback();

    // Generate reports
    const report = await generateSentimentReport();
    console.log('Sentiment Distribution:', report.sentimentDistribution);
    console.log('Top Negative Topics:', report.topNegativeTopics);
  } catch (err) {
    console.error('Error:', err);
    process.exit(1);
  }
}

main();

----------------------------------------

TITLE: Inserting Sample Data into Employees Table
DESCRIPTION: Inserts two rows of sample data into the 'employees' table and returns the inserted rows.

LANGUAGE: sql
CODE:
INSERT INTO employees(name, salary)
VALUES
   ('John Doe', 90000),
   ('Jane Doe', 80000)
RETURNING *;

----------------------------------------

TITLE: Performing Vector Similarity Search in Neon Database
DESCRIPTION: This snippet demonstrates how to perform a vector similarity search using the pgvector extension in a Neon database. It orders the results based on the similarity to a given vector and limits the output to 3 results.

LANGUAGE: python
CODE:
cursor.execute("SELECT * FROM items ORDER BY embedding <-> '[3,1,2]' LIMIT 3;")
all_data = cursor.fetchall()
print(all_data)

----------------------------------------

TITLE: Implementing Salary Change Logging Function
DESCRIPTION: PL/pgSQL function that logs salary changes by inserting old and new values into the salary_changes tracking table.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION log_salary_change()
RETURNS TRIGGER
AS
$$
BEGIN
    INSERT INTO salary_changes (employee_id, old_salary, new_salary)
    VALUES (NEW.id, OLD.salary, NEW.salary);

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

----------------------------------------

TITLE: Creating Table and Inserting Vector Data in Neon Database
DESCRIPTION: This code creates a table named 'items' with a vector column and inserts sample vector data. It demonstrates table creation and data insertion for vector operations in a Neon database.

LANGUAGE: python
CODE:
create_table_sql = '''
CREATE TABLE items (
id BIGSERIAL PRIMARY KEY,
embedding VECTOR(3)
);
'''

# Insert data
insert_data_sql = '''
INSERT INTO items (embedding) VALUES ('[1,2,3]'), ('[4,5,6]'), ('[7,8,9]');
'''

# Execute the SQL statements
cursor.execute(create_table_sql)
cursor.execute(insert_data_sql)

# Commit the changes
connection.commit()

----------------------------------------

TITLE: RPAD() String Truncation Example
DESCRIPTION: Shows how RPAD() can be used to truncate strings by specifying a length shorter than the original string length.

LANGUAGE: sql
CODE:
SELECT
  title, RPAD(title, 10, '') result
FROM
  film;

----------------------------------------

TITLE: Simple PG_SLEEP() Delay Example
DESCRIPTION: Shows how to pause execution for 3 seconds using PG_SLEEP().

LANGUAGE: sql
CODE:
SELECT pg_sleep(3);

----------------------------------------

TITLE: Refreshing and Querying a PostgreSQL Materialized View
DESCRIPTION: Shows how to refresh data in the 'rental_by_category' materialized view and then query it to retrieve results.

LANGUAGE: SQL
CODE:
REFRESH MATERIALIZED VIEW rental_by_category;

LANGUAGE: SQL
CODE:
SELECT * FROM rental_by_category;

----------------------------------------

TITLE: Rendering Pricing Update Admonition in JSX
DESCRIPTION: This snippet uses an Admonition component to display an announcement about new pricing plans for Neon. It includes a title, date, and a link to more details.

LANGUAGE: jsx
CODE:
<Admonition type="comingSoon" title="New pricing plans">
On February 19th, 2024, Neon will launch new, simplified pricing plans. You can see the [details of all the plans here](https://neon.tech/2024-plan-updates).
</Admonition>

----------------------------------------

TITLE: Inserting Multiple Rows into the Contacts Table
DESCRIPTION: This example inserts three rows into the 'contacts' table using a single INSERT statement.

LANGUAGE: sql
CODE:
INSERT INTO contacts (first_name, last_name, email)
VALUES
    ('John', 'Doe', '[[email protected]](../cdn-cgi/l/email-protection.html)'),
    ('Jane', 'Smith', '[[email protected]](../cdn-cgi/l/email-protection.html)'),
    ('Bob', 'Johnson', '[[email protected]](../cdn-cgi/l/email-protection.html)');

----------------------------------------

TITLE: PostgreSQL Password File Format
DESCRIPTION: Basic format for storing connection credentials in .pgpass file. Each line contains hostname, port, database, username, and password separated by colons.

LANGUAGE: css
CODE:
hostname:port:database:username:password

----------------------------------------

TITLE: Inserting a Record within a Transaction in PostgreSQL
DESCRIPTION: This SQL snippet demonstrates how to start a transaction and insert a new record into the 'accounts' table within that transaction.

LANGUAGE: sql
CODE:
BEGIN;

INSERT INTO accounts(name,balance)
VALUES('Alice',10000);

----------------------------------------

TITLE: Logging in as Runner User
DESCRIPTION: This command allows you to SSH into your DigitalOcean Droplet as the 'runneruser'. Replace '<Your Droplet's IP address>' with the actual IP address of your Droplet.

LANGUAGE: shell
CODE:
ssh runneruser@<Your Droplet's IP address>

----------------------------------------

TITLE: Creating IVFFlat Index
DESCRIPTION: Creating an IVFFlat index for vector similarity search.

LANGUAGE: sql
CODE:
CREATE INDEX ON items USING ivfflat (embedding vector_l2_ops) WITH (lists = 100);

----------------------------------------

TITLE: Listing Tablespaces in PostgreSQL
DESCRIPTION: These psql commands list all tablespaces in the current PostgreSQL database server, with the second command showing more detailed information.

LANGUAGE: shell
CODE:
\db

LANGUAGE: shell
CODE:
\db+

----------------------------------------

TITLE: Creating New Branch via Neon API
DESCRIPTION: Creates a new branch without compute using the Neon API. Requires project_id and API key as authentication. Returns the new branch details including branch_id needed for subsequent operations.

LANGUAGE: bash
CODE:
curl --request POST \
     --url https://console.neon.tech/api/v2/projects/dark-cell-12604300/branches \
     --header 'Accept: application/json' \
     --header "Authorization: Bearer $NEON_API_KEY" \
     --header 'Content-Type: application/json' \
     --data '
{
  "branch": {
    "name": "dev_branch_2"
  }
}
'

----------------------------------------

TITLE: Creating a New Database in PostgreSQL
DESCRIPTION: This snippet shows how to create a new database named 'testdb2' using the CREATE DATABASE statement. This is a prerequisite for the subsequent ALTER DATABASE examples.

LANGUAGE: sql
CODE:
CREATE DATABASE testdb2;

----------------------------------------

TITLE: Creating PostgreSQL Stored Procedure for Parts Management
DESCRIPTION: SQL stored procedure that adds new parts and vendors to the suppliers database

LANGUAGE: sql
CODE:
CREATE OR REPLACE PROCEDURE add_new_part(
	new_part_name varchar,
	new_vendor_name varchar
)
AS $$
DECLARE
	v_part_id INT;
	v_vendor_id INT;
BEGIN
	-- insert into the parts table
	INSERT INTO parts(part_name)
	VALUES(new_part_name)
	RETURNING part_id INTO v_part_id;

	-- insert a new vendor
	INSERT INTO vendors(vendor_name)
	VALUES(new_vendor_name)
	RETURNING vendor_id INTO v_vendor_id;

	-- insert into vendor_parts
	INSERT INTO vendor_parts(part_id, vendor_id)
	VALUEs(v_part_id,v_vendor_id);

END;
$$
LANGUAGE PLPGSQL;

----------------------------------------

TITLE: Storing Neon Database Connection Details in .env File
DESCRIPTION: Example of storing Neon database connection details in an environment file for secure configuration management.

LANGUAGE: text
CODE:
PGHOST=ep-cool-darkness-a1b2c3d4-pooler.us-east-2.aws.neon.tech
PGDATABASE=dbname
PGUSER=alex
PGPASSWORD=AbC123dEf
PGPORT=5432

----------------------------------------

TITLE: Renaming a Column with Dependent Objects
DESCRIPTION: Example of renaming the 'name' column to 'group_name' in the customer_groups table, which has a dependent view.

LANGUAGE: sql
CODE:
ALTER TABLE customer_groups
RENAME COLUMN name TO group_name;

----------------------------------------

TITLE: Finding Largest Tables in PostgreSQL Database
DESCRIPTION: Query to find the top 5 biggest tables in a database including their indexes, excluding system tables

LANGUAGE: sql
CODE:
SELECT
    relname AS "relation",
    pg_size_pretty (
        pg_total_relation_size (C .oid)
    ) AS "total_size"
FROM
    pg_class C
LEFT JOIN pg_namespace N ON (N.oid = C .relnamespace)
WHERE
    nspname NOT IN (
        'pg_catalog',
        'information_schema'
    )
AND C .relkind <> 'i'
AND nspname !~ '^pg_toast'
ORDER BY
    pg_total_relation_size (C .oid) DESC
LIMIT 5;

----------------------------------------

TITLE: Connecting to PostgreSQL Database in Python
DESCRIPTION: Establishes a connection to the PostgreSQL database using the psycopg2 library and creates a cursor object for executing SQL commands.

LANGUAGE: python
CODE:
conn = psycopg2.connect(config)
cur = conn.cursor()

----------------------------------------

TITLE: Configuring Author Data in JSON
DESCRIPTION: Shows how to structure author data in a JSON file for use in Neon guides.

LANGUAGE: json
CODE:
{
  "rishi-raj-jain": {
    "name": "Rishi Raj Jain",
    "position": "Software Engineer",
    "bio": "Technical Writer",
    "link": { "title": "GitHub", "url": "https://github.com/rishi-raj-jain" }
  }
}

----------------------------------------

TITLE: Creating Basic Trigger Function Template
DESCRIPTION: Template for creating a trigger function that executes when the trigger is activated. Returns the modified row using RETURN NEW.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION trigger_function()
   RETURNS TRIGGER
   LANGUAGE PLPGSQL
AS
$$
BEGIN
   -- trigger logic
   -- ...
   RETURN NEW;
END;
$$

----------------------------------------

TITLE: Creating a Logical Replication Slot
DESCRIPTION: SQL command to create a logical replication slot named 'debezium' using the pgoutput plugin in Neon.

LANGUAGE: sql
CODE:
SELECT pg_create_logical_replication_slot('debezium', 'pgoutput');

----------------------------------------

TITLE: Installing PSQL on Linux
DESCRIPTION: Commands to install PostgreSQL client on Linux using apt package manager

LANGUAGE: bash
CODE:
sudo apt update
sudo apt install postgresql-client

----------------------------------------

TITLE: Changing Identity Column Characteristics
DESCRIPTION: This snippet shows how to modify the characteristics of an existing identity column, such as changing from GENERATED ALWAYS to GENERATED BY DEFAULT.

LANGUAGE: sql
CODE:
ALTER TABLE shape
ALTER COLUMN shape_id SET GENERATED BY DEFAULT;

----------------------------------------

TITLE: Creating Tenant Registration View
DESCRIPTION: HTML code for the tenant registration form view.

LANGUAGE: html
CODE:
<x-guest-layout>
  <form method="POST" action="{{ route('tenant.register') }}">
    @csrf
    <div class="mt-4">
      <x-input-label for="domain" :value="__('Subdomain')" />
      <div class="flex">
        <x-text-input
          id="domain"
          class="mt-1 block w-full"
          type="text"
          name="domain"
          :value="old('domain')"
          required
        />
        <span class="text-gray-600 ml-2 mt-1">.example.com</span>
      </div>
    </div>

    <div class="mt-4 flex items-center justify-end">
      <x-primary-button class="ml-4"> {{ __('Register Tenant') }} </x-primary-button>
    </div>
  </form>
</x-guest-layout>

----------------------------------------

TITLE: Neon Database Connection String Format
DESCRIPTION: Example format of a Neon database connection string used for establishing connection.

LANGUAGE: bash
CODE:
postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require

----------------------------------------

TITLE: Case-insensitive Query with citext
DESCRIPTION: Shows how to query the citext column with case-insensitive matching.

LANGUAGE: sql
CODE:
SELECT * FROM users WHERE email = 'johnsmith@email.com';

----------------------------------------

TITLE: Creating View with LOCAL CHECK OPTION
DESCRIPTION: Syntax for creating a view with LOCAL scope check option that only enforces constraints on the current view.

LANGUAGE: php
CODE:
CREATE VIEW view_name AS
query
WITH LOCAL CHECK OPTION;

----------------------------------------

TITLE: Creating Session Tracking with UUID in PostgreSQL
DESCRIPTION: Creates a sessions table using UUID as primary key and demonstrates inserting session records with automatically generated UUIDs using gen_random_uuid() function.

LANGUAGE: sql
CODE:
CREATE TABLE sessions (
    session_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id INT,
    activity TEXT
);

INSERT INTO sessions (user_id, activity)
VALUES
    (1, 'login'),
    (2, 'view'),
    (1, 'view'),
    (1, 'logout'),
    (3, 'write')
RETURNING *;

----------------------------------------

TITLE: Querying Timestamp Type Information
DESCRIPTION: Query to show internal storage size of timestamp and timestamptz data types in PostgreSQL.

LANGUAGE: sql
CODE:
SELECT
  typname,
  typlen
FROM
  pg_type
WHERE
  typname ~ '^timestamp';

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Environment variables setup for database connections with different roles

LANGUAGE: bash
CODE:
# Used for database migrations
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'

# Used for server-side fetching
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

# Used for client-side fetching
NEXT_PUBLIC_DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

----------------------------------------

TITLE: Creating Sample Data Structure
DESCRIPTION: Creates a users table with JSONB data type and inserts sample nested JSON data for demonstration

LANGUAGE: sql
CODE:
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    data JSONB
);

INSERT INTO users (data) VALUES
('{
    "profile": {
        "name": "John Doe",
        "contacts": {
            "email": ["john@example.com", "john.doe@work.com"],
            "phone": "+1-555-0123"
        }
    }
}');

----------------------------------------

TITLE: Restricting Public Access API Request
DESCRIPTION: cURL command to block public internet access to a Neon project using the API.

LANGUAGE: bash
CODE:
curl --request PATCH \
 --url https://console.neon.tech/api/v2/projects/orange-credit-12345678 \
 --header 'accept: application/json' \
 --header 'authorization: Bearer $NEON_API_KEY' \
 --header 'content-type: application/json' \
 --data '
{
"project": {
    "settings": {
    "block_public_connections": true
    }
}
}
'

----------------------------------------

TITLE: String Concatenation with Alias
DESCRIPTION: Example showing how to concatenate first and last names with an alias for the full expression.

LANGUAGE: sql
CODE:
SELECT
    first_name || ' ' || last_name AS full_name
FROM
    customer;

----------------------------------------

TITLE: Automatic Update Timestamp Trigger Function
DESCRIPTION: Creates a trigger function to automatically update the updated_at timestamp when a row is modified.

LANGUAGE: plpgsql
CODE:
CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = current_timestamp;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER department_updated_at_trigger
BEFORE UPDATE ON department
FOR EACH ROW
EXECUTE FUNCTION update_updated_at();

----------------------------------------

TITLE: Implementing Webhook Handler for User Creation in TypeScript
DESCRIPTION: This code snippet demonstrates a webhook handler for a 'user.created' event in TypeScript. It validates the incoming webhook request, processes the user data, and inserts it into a database. This example highlights the complexity involved in manual synchronization methods.

LANGUAGE: typescript
CODE:
// Webhook handler for a `user.created` event

import { WebhookEvent, UserJSON } from '@clerk/nextjs/server';
import { headers } from 'next/headers';
import { Webhook } from 'svix';
import { db } from '@/app/db/server';
import { User, users } from '@/app/schema';

const webhookSecret = process.env.CLERK_WEBHOOK_SECRET || '';

async function validateRequest(request: Request) {
  const payloadString = await request.text();
  const headerPayload = await headers();

  const svixHeaders = {
    'svix-id': headerPayload.get('svix-id')!,
    'svix-timestamp': headerPayload.get('svix-signature')!,
    'svix-signature': headerPayload.get('svix-signature')!,
  };
  const wh = new Webhook(webhookSecret);
  return wh.verify(payloadString, svixHeaders) as WebhookEvent;
}

export async function POST(request: Request) {
  const payload = await validateRequest(request);
  const payloadData = payload.data as UserJSON;
  const user = {
    userId: payload.data.id,
    name: `${payloadData.first_name} ${payloadData.last_name}`,
    email: payloadData.email_addresses[0].email_address,
  } as User;
  await db.insert(users).values(user);
  return Response.json({ message: 'User added' });
}

----------------------------------------

TITLE: Creating a New Laravel Project
DESCRIPTION: Commands to create a new Laravel project and navigate to the project directory.

LANGUAGE: bash
CODE:
composer create-project laravel/laravel laravel-multi-tenant-saas
cd laravel-multi-tenant-saas

----------------------------------------

TITLE: Initializing Database with Reflex Model
DESCRIPTION: Command to create database tables based on the defined models using Reflex CLI.

LANGUAGE: bash
CODE:
reflex db init

----------------------------------------

TITLE: Creating Branch via HTTP API Request
DESCRIPTION: HTTP POST request format for creating a new branch in a Neon project via the API endpoint.

LANGUAGE: http
CODE:
POST /projects/{project_id}/branches

----------------------------------------

TITLE: SQL Todo Schema with RLS Policies
DESCRIPTION: Raw SQL implementation of a todos table with explicit RLS policies for CRUD operations

LANGUAGE: sql
CODE:
CREATE TABLE todos (
  id bigint generated by default as identity primary key,
  user_id text not null default (auth.user_id()),
  task text check (char_length(task) > 0),
  is_complete boolean default false,
  inserted_at timestamp not null default now()
);

ALTER TABLE todos ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create todos." ON todos FOR INSERT
TO authenticated
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can view their own todos." ON todos FOR SELECT
TO authenticated
USING ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can update their own todos." ON todos FOR UPDATE
TO authenticated
USING ((select auth.user_id()) = user_id)
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can delete their own todos." ON todos FOR DELETE
TO authenticated
USING ((select auth.user_id()) = user_id);

----------------------------------------

TITLE: BOOL_AND() with GROUP BY Clause
DESCRIPTION: Advanced query showing how to use BOOL_AND() with GROUP BY to check active projects per team.

LANGUAGE: sql
CODE:
SELECT
  team_name,
  BOOL_AND(active) active_projects
FROM
  projects
  INNER JOIN teams USING (team_id)
GROUP BY
  team_name;

----------------------------------------

TITLE: Setting Up Environment Variables for Database Connections
DESCRIPTION: Example of environment variables setup for database connections in a .env file, including both owner and authenticated connection strings for server-side and client-side fetching.

LANGUAGE: bash
CODE:
# Used for database migrations
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'

# Used for server-side fetching
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

# Used for client-side fetching
NEXT_PUBLIC_DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

----------------------------------------

TITLE: Creating Cascaded View with CHECK OPTION
DESCRIPTION: Creates a view with CASCADED CHECK OPTION that enforces constraints on both the current view and its base views.

LANGUAGE: sql
CODE:
CREATE OR REPLACE VIEW fte_1
AS
SELECT
  id,
  first_name,
  last_name,
  department_id,
  employee_type
FROM
  fte
WHERE
  department_id = 1
WITH CASCADED CHECK OPTION;

----------------------------------------

TITLE: ROW_NUMBER with Simple Ordering
DESCRIPTION: Shows how to use ROW_NUMBER() to assign sequential numbers ordered by product_id.

LANGUAGE: sql
CODE:
SELECT
  product_id,
  product_name,
  group_id,
  ROW_NUMBER () OVER (
    ORDER BY
      product_id
  )
FROM
  products;

----------------------------------------

TITLE: Implementing PostgreSQL Version Query Endpoint in Quarkus
DESCRIPTION: This Java code defines a RESTful endpoint in Quarkus that queries the PostgreSQL database version using JDBC. It injects a DataSource, executes a SQL query, and returns the version as a plain text response.

LANGUAGE: java
CODE:
package com.neon.tech;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.sql.DataSource;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

@Path("/postgres")
public class PostgresResource {
    @Inject
    DataSource dataSource;

    @GET
    @Path("/version")
    @Produces(MediaType.TEXT_PLAIN)
    public String getVersion() {
        try (Connection connection = dataSource.getConnection();
                Statement statement = connection.createStatement()) {

            ResultSet resultSet = statement.executeQuery("SELECT version()");

            if (resultSet.next()) {
                return resultSet.getString(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
}

----------------------------------------

TITLE: Creating a Database Branch for a Developer
DESCRIPTION: Command to create a new database branch for a specific developer using the Neon CLI.

LANGUAGE: bash
CODE:
neonctl branches create --name dev/developer_name

----------------------------------------

TITLE: Installing Database Dependencies for Nuxt
DESCRIPTION: Commands for installing different Postgres client libraries: node-postgres (pg), postgres.js, or the Neon serverless driver.

LANGUAGE: shell
CODE:
npm install pg

LANGUAGE: shell
CODE:
npm install postgres

LANGUAGE: shell
CODE:
npm install @neondatabase/serverless

----------------------------------------

TITLE: Extracting Array Elements with json_extract_path_text() in SQL
DESCRIPTION: Shows how to use json_extract_path_text() to extract specific elements from a JSON array, retrieving the first and second hobbies for each user.

LANGUAGE: sql
CODE:
SELECT
    json_extract_path_text(profile, 'name') as name,
    json_extract_path_text(profile, 'hobbies', '0') as first_hobby,
    json_extract_path_text(profile, 'hobbies', '1') as second_hobby
FROM users;

----------------------------------------

TITLE: RPAD() with Film Table Data
DESCRIPTION: Demonstrates padding film titles to 50 characters using dots as padding characters from a sample database.

LANGUAGE: sql
CODE:
SELECT
  RPAD(title, 50, '.')
FROM
  film;

----------------------------------------

TITLE: Attempting to Delete a Row from Products Table in PostgreSQL
DESCRIPTION: This SQL statement attempts to delete a row from the products table. Due to the BEFORE DELETE trigger, this operation will fail and raise an exception.

LANGUAGE: sql
CODE:
DELETE FROM products
WHERE id = 1;

----------------------------------------

TITLE: Basic PostgreSQL HAVING Clause Syntax
DESCRIPTION: Demonstrates the basic syntax of the HAVING clause used with GROUP BY to filter groups based on a condition.

LANGUAGE: sql
CODE:
SELECT
  column1,
  aggregate_function (column2)
FROM
  table_name
GROUP BY
  column1
HAVING
  condition;

----------------------------------------

TITLE: Configuring Tenancy in config/tenancy.php
DESCRIPTION: Updates to the tenancy configuration file to use the custom Tenant model and set central domains.

LANGUAGE: php
CODE:
'tenant_model' => \App\Models\Tenant::class,

'central_domains' => [
    'laravel-multi-tenant-saas.test',
    'localhost',
    'example.com',
],

----------------------------------------

TITLE: Creating Note model in Django
DESCRIPTION: Defines the Note model with title, content, and creation timestamp fields for storing notes in the database.

LANGUAGE: python
CODE:
from django.db import models

class Note(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

----------------------------------------

TITLE: Ordering jsonb_array_elements() Output Using WITH ORDINALITY
DESCRIPTION: SQL query showing how to use WITH ORDINALITY to order the output of jsonb_array_elements() based on the original array order.

LANGUAGE: sql
CODE:
SELECT
   workflow_name,
   task.value AS task_name,
   task.ordinality AS task_order
FROM
   workflow,
   jsonb_array_elements(steps->'tasks') WITH ORDINALITY AS task;

----------------------------------------

TITLE: Defining json_scalar() Function Signature in SQL
DESCRIPTION: Shows the syntax and parameters for the json_scalar() function in PostgreSQL.

LANGUAGE: sql
CODE:
json_scalar(expression) → json

----------------------------------------

TITLE: SQL RLS Policies Implementation
DESCRIPTION: SQL commands to create a todos table and implement Row-Level Security policies for CRUD operations.

LANGUAGE: sql
CODE:
CREATE TABLE todos (
  id bigint generated by default as identity primary key,
  user_id text not null default (auth.user_id()),
  task text check (char_length(task) > 0),
  is_complete boolean default false,
  inserted_at timestamptz not null default now()
);

ALTER TABLE todos ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create todos." ON todos FOR INSERT
TO authenticated
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can view their own todos." ON todos FOR SELECT
TO authenticated
USING ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can update their own todos." ON todos FOR UPDATE
TO authenticated
USING ((select auth.user_id()) = user_id)
WITH CHECK ((select auth.user_id()) = user_id);

CREATE POLICY "Individuals can delete their own todos." ON todos FOR DELETE
TO authenticated
USING ((select auth.user_id()) = user_id);

----------------------------------------

TITLE: Data Querying Operations
DESCRIPTION: Common SQL queries for selecting, filtering, and joining data across tables

LANGUAGE: sql
CODE:
SELECT * FROM table_name;

SELECT column_list
FROM table;

SELECT *
FROM table1
INNER JOIN table2 ON conditions;

----------------------------------------

TITLE: Running Authorized Queries in Client Component
DESCRIPTION: This TypeScript code shows how to run authorized queries from a client component. It uses the Keycloak authentication provider and the Neon Serverless Driver to fetch and display todos for the authenticated user.

LANGUAGE: typescript
CODE:
'use client';

import type { Todo } from '@/app/schema';
import { neon } from '@neondatabase/serverless';
import { useKeycloak } from '@react-keycloak/web';
import { useEffect, useState } from 'react';

const getDb = (token: string) =>
  neon(process.env.NEXT_PUBLIC_DATABASE_AUTHENTICATED_URL!, {
    authToken: token,
  });

export default function TodoList() {
  const { keycloak, initialized } = useKeycloak();
  const [todos, setTodos] = useState<Array<Todo>>();

  useEffect(() => {
    async function loadTodos() {
      const sessionToken = keycloak.token;
      if (!sessionToken) {
        return;
      }
      const sql = getDb(sessionToken);

      // WHERE filter is optional because of RLS.
      // But we send it anyway for performance reasons.
      const todosResponse = await
        sql('select * from todos where user_id = auth.user_id()');

      setTodos(todosResponse as Array<Todo>);
    }

    loadTodos();
  }, [initialized, keycloak.authenticated]);

  return (
    <ul>
      {todos?.map((todo) => (
        <li key={todo.id}>
          {todo.task}
        </li>
      ))}
    </ul>
  );
}

----------------------------------------

TITLE: Querying FerretDB Data with SQL
DESCRIPTION: SQL query example for retrieving JSONB data from the FerretDB-created table in Neon Postgres.

LANGUAGE: sql
CODE:
SELECT _jsonb
FROM ferretdb.players_a90eae09
WHERE _jsonb ->> 'player_name' = 'Jordan';

----------------------------------------

TITLE: Creating Daily Active Users Chart Component
DESCRIPTION: PHP code for the DailyActiveUsersChart Livewire component, fetching and preparing data for the chart.

LANGUAGE: php
CODE:
<?php

namespace App\Livewire;

use Livewire\Component;
use App\Models\FeatureUsage;
use Asantibanez\LivewireCharts\Models\LineChartModel;

class DailyActiveUsersChart extends Component
{
    public function render()
    {
        // Example query to fetch daily active users
        $activeUsers = FeatureUsage::selectRaw('DATE(used_at) as date, COUNT(DISTINCT user_id) as users')
            ->groupBy('date')
            ->get();

        // Prepare data for the chart
        $lineChartModel = (new LineChartModel())
            ->setTitle('Daily Active Users')
            ->setAnimated(true)
            ->setSmoothCurve()
            ->withOnPointClickEvent('onPointClick');

        foreach ($activeUsers as $activeUser) {
            $lineChartModel->addPoint($activeUser->date, $activeUser->users);
        }

        return view('livewire.daily-active-users-chart', [
            'lineChartModel' => $lineChartModel
        ]);
    }
}

----------------------------------------

TITLE: Checking Replication Count
DESCRIPTION: Verifies that the row count matches between source and destination databases.

LANGUAGE: sql
CODE:
SELECT COUNT(*) FROM playing_with_neon;

----------------------------------------

TITLE: Dropping Specific Function Examples
DESCRIPTION: Shows various ways to drop functions, including dropping overloaded functions by specifying parameter lists.

LANGUAGE: sql
CODE:
drop function get_film_actors();

LANGUAGE: sql
CODE:
drop function get_film_actors;

LANGUAGE: sql
CODE:
drop function get_film_actors(int);

----------------------------------------

TITLE: Inserting Data into PostgreSQL hstore Column
DESCRIPTION: Inserts a row into the 'books' table, demonstrating how to populate an hstore column with key-value pairs.

LANGUAGE: sql
CODE:
INSERT INTO books (title, attr)
VALUES
  (
    'PostgreSQL Tutorial', '"paperback" => "243",
     "publisher" => "postgresqltutorial.com",
     "language"  => "English",
     "ISBN-13"   => "978-1449370000",
     "weight"    => "11.2 ounces"'
  );

----------------------------------------

TITLE: Running Laravel Migration
DESCRIPTION: This command executes all pending migrations, creating the posts table with the deleted_at column.

LANGUAGE: bash
CODE:
php artisan migrate

----------------------------------------

TITLE: Deno Configuration for Neon Serverless Driver
DESCRIPTION: JSON configuration in deno.json file to import the Neon serverless driver.

LANGUAGE: json
CODE:
{
  "imports": {
    "@neon/serverless": "jsr:@neon/serverless@^0.10.1"
  }
}

----------------------------------------

TITLE: Converting Unicode Code Point to UTF8 Character with PostgreSQL CHR()
DESCRIPTION: This example shows how to use the CHR() function to convert the Unicode code point 937 to its corresponding UTF8 character 'Ω'.

LANGUAGE: SQL
CODE:
SELECT
    CHR(937);

----------------------------------------

TITLE: Basic Variable Declaration Syntax in PL/pgSQL
DESCRIPTION: Demonstrates the basic syntax for declaring variables in PL/pgSQL with optional default value assignment.

LANGUAGE: sql
CODE:
variable_name data_type [= expression];

----------------------------------------

TITLE: Creating Initial Users Table Migration
DESCRIPTION: SQL migration to create a users table with email index and updated_at trigger.

LANGUAGE: sql
CODE:
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(100) NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_users_email ON users(email);

CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

----------------------------------------

TITLE: Connecting to PostgreSQL Using psql
DESCRIPTION: This bash command connects to the PostgreSQL server using psql with the 'postgres' user.

LANGUAGE: bash
CODE:
psql -U postgres

----------------------------------------

TITLE: Environment Variables Setup
DESCRIPTION: Example of environment variables configuration for database connections.

LANGUAGE: bash
CODE:
# Database owner connection string
DATABASE_URL='<DB_OWNER_CONNECTION_STRING>'

# Neon "authenticated" role connection string
DATABASE_AUTHENTICATED_URL='<AUTHENTICATED_CONNECTION_STRING>'

----------------------------------------

TITLE: Implementing Query Caching
DESCRIPTION: PHP code demonstrating how to cache expensive queries to reduce database load and improve performance.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Cache;

// In your Livewire component
$dailyActiveUsers = Cache::remember('daily_active_users_' . $this->selectedDays, 60 * 5, function () {
    return FeatureUsage::selectRaw('DATE(used_at) as date, COUNT(DISTINCT user_id) as count')
        ->whereDate('used_at', '>=', now()->subDays($this->selectedDays))
        ->groupBy('date')
        ->orderBy('date')
        ->get();
});

----------------------------------------

TITLE: Closing Unnamed dblink Connection
DESCRIPTION: Closes an unnamed dblink connection to free up resources.

LANGUAGE: sql
CODE:
SELECT dblink_disconnect();

----------------------------------------

TITLE: Changing View Column Name in PostgreSQL
DESCRIPTION: How to rename a column in a view using the ALTER VIEW statement.

LANGUAGE: sql
CODE:
ALTER VIEW [ IF EXISTS ] view_name
RENAME [ COLUMN ] column_name TO new_column_name;

----------------------------------------

TITLE: Querying Local Deno Endpoint
DESCRIPTION: cURL command to query the /books endpoint of the locally running Deno application.

LANGUAGE: bash
CODE:
curl http://localhost:8000/books

----------------------------------------

TITLE: Creating a New Next.js Application with TypeScript and Tailwind CSS
DESCRIPTION: Initializes a new Next.js project with TypeScript and Tailwind CSS using the create-next-app command. It also installs necessary dependencies for the project.

LANGUAGE: shell
CODE:
npx create-next-app@latest pulse

LANGUAGE: shell
CODE:
cd pulse
npm install @11labs/react @neondatabase/serverless motion framer-motion react-feather sonner
npm install -D tsx

----------------------------------------

TITLE: Querying Sales Stats Table in PostgreSQL
DESCRIPTION: This query selects year, name, and amount from the actual_sales table, ordering the results by year and name. It's used to show the structure of the data used in subsequent examples.

LANGUAGE: sql
CODE:
SELECT
	year,
	name,
	amount
FROM
	actual_sales
ORDER BY
	year, name;

----------------------------------------

TITLE: Checking WAL Level Configuration
DESCRIPTION: Verifies that logical replication is enabled by checking the WAL level setting.

LANGUAGE: sql
CODE:
SHOW wal_level;

----------------------------------------

TITLE: Creating JSON Object from Key-Value Pairs in PostgreSQL
DESCRIPTION: Demonstrates the function signature for json_object(). It shows two variations: one taking separate key and value arrays, and another taking a single array with alternating keys and values.

LANGUAGE: sql
CODE:
json_object(keys TEXT[], values TEXT[]) -> JSON
-- or --
json_object(keys_values TEXT[]) -> JSON

----------------------------------------

TITLE: PL/pgSQL Continue Statement Output Example
DESCRIPTION: Sample output showing the result of executing the odd numbers loop example.

LANGUAGE: http
CODE:
NOTICE:  1
NOTICE:  3
NOTICE:  5
NOTICE:  7
NOTICE:  9

----------------------------------------

TITLE: Column Alias with Spaces
DESCRIPTION: Demonstrates how to create a column alias containing spaces using double quotes.

LANGUAGE: sql
CODE:
SELECT
    first_name || ' ' || last_name "full name"
FROM
    customer;

----------------------------------------

TITLE: Creating Initial Database Migration Scripts with Flyway
DESCRIPTION: SQL scripts for creating initial database tables using Flyway migrations.

LANGUAGE: sql
CODE:
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

LANGUAGE: sql
CODE:
CREATE TABLE posts (
    id SERIAL PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    content TEXT,
    user_id INTEGER NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

----------------------------------------

TITLE: Creating Schema-Only Branch with Neon API
DESCRIPTION: cURL command to create a schema-only branch using the Neon API. This POST request specifies the parent branch and sets the 'init_source' to 'schema-only'.

LANGUAGE: bash
CODE:
curl --request POST \
     --url https://console.neon.tech/api/v2/projects/wispy-salad-58347608/branches \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $NEON_API_KEY' \
     --header 'content-type: application/json' \
     --data '
{
  "branch": {
    "parent_id": "br-super-mode-w371g4od",
    "name": "my_schema_only_branch",
    "init_source": "schema-only"
  }
}
'

----------------------------------------

TITLE: Basic PostgreSQL FLOOR() Example
DESCRIPTION: Simple example showing how to round down a decimal number to the nearest integer using FLOOR() function.

LANGUAGE: sql
CODE:
SELECT
    FLOOR( 150.75 );

----------------------------------------

TITLE: Inserting Sample Data into Neon Database
DESCRIPTION: SQL commands to insert sample data into the technologies and tutorials tables in Neon.

LANGUAGE: sql
CODE:
-- Insert more Technologies
INSERT INTO technologies (name, category) VALUES ('React', 'Frontend');
INSERT INTO technologies (name, category) VALUES ('Python', 'Backend');

-- Insert Tutorials
INSERT INTO tutorials (title, content, tech_id, tags, difficulty_level)
VALUES ('Getting Started with Node.js', 'Learn the basics of Node.js', 1, ARRAY['Node.js', 'Backend'], 'Beginner');

INSERT INTO tutorials (title, content, tech_id, tags, difficulty_level)
VALUES ('Building a React App', 'Step-by-step guide to building a React application', 1, ARRAY['React', 'Frontend'], 'Intermediate');

INSERT INTO tutorials (title, content, tech_id, tags, difficulty_level)
VALUES ('Python for Data Science', 'Introduction to using Python for data science', 2, ARRAY['Python', 'Data Science'], 'Advanced');

----------------------------------------

TITLE: Creating Basic PostgreSQL Index
DESCRIPTION: Basic syntax for creating an index on one or more table columns using CREATE INDEX statement.

LANGUAGE: phpsql
CODE:
CREATE INDEX [IF NOT EXISTS] index_name
ON table_name(column1, column2, ...);

----------------------------------------

TITLE: Querying Audits Table in PostgreSQL
DESCRIPTION: Retrieves all records from the 'audits' table to verify the event trigger execution.

LANGUAGE: sql
CODE:
SELECT * FROM audits;

----------------------------------------

TITLE: Testing Authentication Endpoints
DESCRIPTION: Curl commands to test user registration, login, and accessing protected endpoints using JWT tokens.

LANGUAGE: bash
CODE:
# Register a new user
curl -X POST http://localhost:5241/api/auth/register \
     -H "Content-Type: application/json" \
     -d '{
           "email": "test@example.com",
           "password": "SecurePass123!",
           "firstName": "John",
           "lastName": "Doe"
         }'

# Log in and get a JWT token
curl -X POST http://localhost:5241/api/auth/login \
     -H "Content-Type: application/json" \
     -d '{
           "email": "test@example.com",
           "password": "SecurePass123!"
         }'

# Access a protected endpoint
curl -X GET http://localhost:5241/api/secure \
     -H "Authorization: Bearer <your-jwt-token>"

----------------------------------------

TITLE: Formatting TIMEOFDAY() Output in PostgreSQL
DESCRIPTION: An example demonstrating how to cast the TIMEOFDAY() result to a timestamp and use the to_char() function to format the output in a specific date-time format.

LANGUAGE: sql
CODE:
SELECT
  to_char(
    timeofday():: timestamp,
    'YYYY-MM-DD HH24:MI:SS'
  ) current_time;

----------------------------------------

TITLE: Log Parsing with regexp_match()
DESCRIPTION: Demonstrates using regexp_match() to parse structured log data, extracting timestamp, log level, and message content from log entries using capture groups.

LANGUAGE: sql
CODE:
WITH log_entries AS (
  SELECT '[2024-03-04 10:15:30] INFO: User john_doe logged in from 192.168.1.100' AS log_text
  UNION ALL
  SELECT '[2024-03-04 10:20:45] ERROR: Failed login attempt for user jane_smith from 10.0.0.50' AS log_text
  UNION ALL
  SELECT '[2024-03-04 10:25:55] INFO: User admin logged out' AS log_text
)
SELECT
  regexp_match(log_text, '\[(.*?)\] (\w+): (.*)$') AS parsed_log
FROM log_entries;

----------------------------------------

TITLE: Renaming a Table with Dependent Objects
DESCRIPTION: Example of renaming the customer_groups table to groups, demonstrating how PostgreSQL automatically updates dependent objects.

LANGUAGE: sql
CODE:
ALTER TABLE customer_groups
RENAME TO groups;

----------------------------------------

TITLE: Project Setup Commands
DESCRIPTION: Terminal commands for initializing a new TypeScript project with Prisma

LANGUAGE: bash
CODE:
mkdir hello-neon-prisma
cd hello-neon-prisma
npm init -y
npm install typescript ts-node @types/node --save-dev
npx tsc --init
npm install prisma --save-dev
npx prisma init --datasource-provider postgresql

----------------------------------------

TITLE: Revoking Organization API Key
DESCRIPTION: Permanently revokes a specified organization API key. Requires the key ID obtained from the list endpoint.

LANGUAGE: bash
CODE:
curl --request DELETE \
     --url 'https://console.neon.tech/api/v2/organizations/{org_id}/api_keys/{key_id}' \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $PERSONAL_API_KEY' | jq

LANGUAGE: json
CODE:
{
  "id": 123456,
  "name": "my-key-name",
  "created_at": "2024-01-01T12:00:00Z",
  "created_by": "user-abc123de-4567-8fab-9012-3cdef4567890",
  "last_used_at": "2024-01-01T12:30:00Z",
  "last_used_from_addr": "192.0.2.1,192.0.2.2",
  "revoked": true
}

----------------------------------------

TITLE: Basic jsonb_path_exists() Query
DESCRIPTION: Example showing how to check for the existence of a CPU specification in product attributes using jsonb_path_exists()

LANGUAGE: sql
CODE:
SELECT name,
       jsonb_path_exists(attributes, '$.specs.cpu') AS cpu_exists
FROM products;

----------------------------------------

TITLE: Creating Test Database for Library Management System
DESCRIPTION: This SQL snippet creates a test database table for a library management system and inserts sample data with complex JSON structures.

LANGUAGE: sql
CODE:
CREATE TABLE library_books (
    book_id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    data JSONB NOT NULL
);

INSERT INTO library_books (title, data) VALUES
(
    'The Art of Programming',
    '{
        "isbn": "978-0123456789",
        "author": {
            "name": "Jane Smith",
            "email": "jane.smith@example.com"
        },
        "publication": {
            "year": 2023,
            "publisher": "Tech Books Inc"
        },
        "metadata": {
            "genres": ["Programming", "Computer Science"],
            "tags": ["algorithms", "python", "best practices"],
            "edition": "2nd"
        },
        "reviews": [
            {
                "user": "john_doe",
                "rating": 5,
                "comment": "Excellent book for beginners!",
                "date": "2024-01-15"
            },
            {
                "user": "mary_jane",
                "rating": 4,
                "comment": "Good examples, could use more exercises",
                "date": "2024-02-20"
            }
        ],
        "borrowing_history": [
            {
                "user_id": "U123",
                "checkout_date": "2024-01-01",
                "return_date": "2024-01-15",
                "condition": "good"
            },
            {
                "user_id": "U456",
                "checkout_date": "2024-02-01",
                "return_date": "2024-02-15",
                "condition": "fair"
            }
        ]
    }'::jsonb
),
(
    'Database Design Fundamentals',
    '{
        "isbn": "978-0987654321",
        "author": {
            "name": "Robert Johnson",
            "email": "robert.j@example.com"
        },
        "publication": {
            "year": 2024,
            "publisher": "Database Press"
        },
        "metadata": {
            "genres": ["Database", "Computer Science"],
            "tags": ["SQL", "design patterns", "normalization"],
            "edition": "1st"
        },
        "reviews": [
            {
                "user": "alice_wonder",
                "rating": 5,
                "comment": "Comprehensive coverage of database concepts",
                "date": "2024-03-01"
            }
        ],
        "borrowing_history": [
            {
                "user_id": "U789",
                "checkout_date": "2024-03-01",
                "return_date": null,
                "condition": "excellent"
            }
        ]
    }'::jsonb
);

----------------------------------------

TITLE: Complete C# Implementation for Calling PostgreSQL Stored Procedure
DESCRIPTION: Full C# program demonstrating stored procedure execution with parameter binding and error handling using Npgsql

LANGUAGE: csharp
CODE:
using Npgsql;

var studentId = 2;
var courseId = 2;
var amount = 49.99;
var tax = 0.05;
var invoiceDate = new DateOnly(2024, 05, 20);

string connectionString = ConfigurationHelper.GetConnectionString("DefaultConnection");

try
{
    await using var dataSource = NpgsqlDataSource.Create(connectionString);
    await using var cmd = dataSource.CreateCommand("CALL enroll_student($1,$2,$3,$4,$5)");

    cmd.Parameters.AddWithValue(studentId);
    cmd.Parameters.AddWithValue(courseId);
    cmd.Parameters.AddWithValue(amount);
    cmd.Parameters.AddWithValue(tax);
    cmd.Parameters.AddWithValue(invoiceDate);

    await cmd.ExecuteNonQueryAsync();
}
catch (NpgsqlException ex)
{
    Console.WriteLine($"Error: {ex.Message}");
}

----------------------------------------

TITLE: Installing Database Dependencies
DESCRIPTION: Commands for installing different PostgreSQL client libraries and dotenv for environment variable management.

LANGUAGE: shell
CODE:
npm install @neondatabase/serverless dotenv

LANGUAGE: shell
CODE:
npm install pg dotenv

LANGUAGE: shell
CODE:
npm install postgres dotenv

----------------------------------------

TITLE: Defining BOOL_AND() Function Syntax
DESCRIPTION: Basic syntax definition for the PostgreSQL BOOL_AND() aggregate function that evaluates boolean expressions across rows.

LANGUAGE: sql
CODE:
BOOL_AND(expression)

----------------------------------------

TITLE: CUME_DIST With Partition Example
DESCRIPTION: SQL query showing CUME_DIST() usage with PARTITION BY clause to calculate sales percentiles by year.

LANGUAGE: sql
CODE:
SELECT
    name,
	year,
	amount,
    CUME_DIST() OVER (
		PARTITION BY year
        ORDER BY amount
    )
FROM
    sales_stats;

----------------------------------------

TITLE: Using jsonb_extract_path_text in a JOIN Clause in PostgreSQL
DESCRIPTION: Demonstrates an advanced use case where jsonb_extract_path_text is used in a JOIN clause to match hobbies from a JSONB array with records in another table.

LANGUAGE: sql
CODE:
SELECT
  jsonb_extract_path_text(u.profile, 'name') as user_name,
  h.hobby_name
FROM users u
JOIN hobbies h
ON jsonb_extract_path_text(u.profile, 'hobbies') LIKE '%' || lower(h.hobby_name) || '%'
WHERE h.difficulty_level = 'Easy';

----------------------------------------

TITLE: Creating and Querying Events Table with extract() Function
DESCRIPTION: This snippet demonstrates how to create an events table, insert sample data, and use the extract() function to analyze event timestamps by extracting year and month components.

LANGUAGE: sql
CODE:
CREATE TABLE events (
  event_id SERIAL PRIMARY KEY,
  event_name VARCHAR(100),
  event_timestamp TIMESTAMP WITH TIME ZONE
);

INSERT INTO events (event_name, event_timestamp) VALUES
  ('Conference A', '2024-03-15 09:00:00+00'),
  ('Workshop B', '2024-06-22 14:30:00+00'),
  ('Seminar C', '2024-09-10 11:15:00+00'),
  ('Conference D', '2024-12-05 10:00:00+00'),
  ('Workshop E', '2025-02-18 13:45:00+00');

-- Extract year and month from event timestamps
SELECT
  event_name,
  EXTRACT(YEAR FROM event_timestamp) AS event_year,
  EXTRACT(MONTH FROM event_timestamp) AS event_month
FROM events
ORDER BY event_timestamp;

----------------------------------------

TITLE: Creating PostgreSQL AFTER DELETE Trigger
DESCRIPTION: Defines an AFTER DELETE trigger on a table, associating it with a previously created trigger function.

LANGUAGE: sql
CODE:
CREATE TRIGGER trigger_name
AFTER DELETE ON table_name
FOR EACH ROW
EXECUTE FUNCTION trigger_function_name();

----------------------------------------

TITLE: Querying JSONB Data in Postgres
DESCRIPTION: This SQL snippet shows how to query JSONB data using the '->' and '->>' operators. It demonstrates querying based on top-level properties and nested object properties within the JSONB column.

LANGUAGE: sql
CODE:
SELECT * FROM documents WHERE data->>'title' = 'Neon and JSONB'

LANGUAGE: sql
CODE:
SELECT * FROM documents WHERE data->'author'->>'name' = 'John Smith'

----------------------------------------

TITLE: Handling SNI Workaround for AWS DMS
DESCRIPTION: Demonstrates how to use the SNI workaround for AWS Database Migration Service by specifying the endpoint ID in the password field.

LANGUAGE: text
CODE:
endpoint=<endpoint_id>$<password>

----------------------------------------

TITLE: Implementing Database Connection Pool for Neon Postgres
DESCRIPTION: JavaScript code to set up a connection pool for the Neon Postgres database using the pg package.

LANGUAGE: javascript
CODE:
const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: true,
});

module.exports = pool;

----------------------------------------

TITLE: Converting Words to tsvector in PostgreSQL
DESCRIPTION: This snippet demonstrates how to use the to_tsvector() function to convert words into tsvector format, showing how different forms of a word are reduced to a common lexeme.

LANGUAGE: SQL
CODE:
SELECT to_tsvector('watches'),
       to_tsvector('watched'),
       to_tsvector('watching');

----------------------------------------

TITLE: Handling Nested Arrays
DESCRIPTION: Illustrates how the function handles nested arrays within the main JSON array.

LANGUAGE: sql
CODE:
SELECT jsonb_array_elements_text('[1,2,3, [4,5], 6]');

----------------------------------------

TITLE: Example Database Migration Command
DESCRIPTION: Example of a complete migration command with sample credentials and hostnames demonstrating the actual usage

LANGUAGE: bash
CODE:
pg_dump -Fc -v -d postgresql://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/my_source_db | pg_restore -v -d postgresql://alex:AbC123dEf@square-shadow-654321.us-east-2.aws.neon.tech/my_destination_db

----------------------------------------

TITLE: Loading SQL Data into Neon Postgres with psql
DESCRIPTION: Bash command to load SQL data into a Neon Postgres database using the psql client. Replace the placeholders with your actual connection details.

LANGUAGE: Bash
CODE:
psql -d "postgresql://[user]:[password]@[neon_hostname]/[dbname]" -f filename.sql

----------------------------------------

TITLE: Loading Sample Database for DMS Migration
DESCRIPTION: Command to populate a PostgreSQL database with AWS DMS sample data using psql. Connects to an RDS PostgreSQL instance and executes a SQL script.

LANGUAGE: bash
CODE:
psql -h dms-postgresql.abc123def456hgi.us-east-2.rds.amazonaws.com -p 5432 -U postgres -d dms_sample -a -f ~/aws-database-migration-samples/PostgreSQL/sampledb/v1/postgresql.sql

----------------------------------------

TITLE: Creating weekly partitions for user activities table using pg_partman
DESCRIPTION: SQL query to create weekly partitions for the user_activities table using pg_partman's create_parent function.

LANGUAGE: sql
CODE:
SELECT create_parent('public.user_activities', 'activity_time', '1 week');

----------------------------------------

TITLE: Creating Educations Table Migration
DESCRIPTION: Laravel migration for creating the educations table with fields for education information.

LANGUAGE: PHP
CODE:
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('educations', function (Blueprint $table) {
            $table->id();
            $table->foreignId('applicant_id')->constrained()->onDelete('cascade');
            $table->string('institution');
            $table->string('degree');
            $table->date('start_date');
            $table->date('end_date')->nullable();
            $table->jsonb('additional_info')->nullable();
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('educations');
    }
};

----------------------------------------

TITLE: Cloning the Sample Repository
DESCRIPTION: Command to clone the example application repository that demonstrates Clerk and Neon RLS integration.

LANGUAGE: bash
CODE:
git clone https://github.com/neondatabase-labs/clerk-nextjs-neon-rls.git

----------------------------------------

TITLE: Implementing Tenant Routes
DESCRIPTION: PHP code for defining tenant-specific routes with middleware for tenancy initialization and access prevention from central domains.

LANGUAGE: php
CODE:
<?php

use Illuminate\Support\Facades\Route;
use Stancl\Tenancy\Middleware\InitializeTenancyByDomain;
use Stancl\Tenancy\Middleware\PreventAccessFromCentralDomains;

Route::middleware([
    'web',
    InitializeTenancyByDomain::class,
    PreventAccessFromCentralDomains::class,
])->group(function () {
    Route::get('/', function () {
        return 'This is your multi-tenant application. The id of the current tenant is ' . tenant('id');
    });

    // Here you can add more tenant-specific routes
});

----------------------------------------

TITLE: Storing and Querying JSON Arrays in PostgreSQL
DESCRIPTION: Demonstrates how to store JSON arrays in a JSONB column and extract specific elements using array indexing.

LANGUAGE: SQL
CODE:
CREATE TABLE contacts(
   id SERIAL PRIMARY KEY,
   name VARCHAR(255) NOT NULL,
   phones JSONB
);

INSERT INTO contacts(name, phones)
VALUES
   ('John Doe','["408-111-2222", "408-111-2223"]'),
   ('Jane Doe','["212-111-2222", "212-111-2223"]')
RETURNING *;

SELECT
  name,
  phones ->> 0 "work phone"
FROM
  contacts;

----------------------------------------

TITLE: Basic PostgreSQL Trigger with When Condition Syntax
DESCRIPTION: Demonstrates the basic syntax for creating a conditional trigger in PostgreSQL using the WHEN clause.

LANGUAGE: sql
CODE:
CREATE TRIGGER trigger_name
ON table_name
WHEN condition
EXECUTE FUNCTION function_name(arguments);

----------------------------------------

TITLE: Converting Date and Timestamp Values to JSON using json_scalar() in SQL
DESCRIPTION: Illustrates the conversion of timestamp and date values to JSON format using json_scalar().

LANGUAGE: sql
CODE:
-- Convert timestamp
SELECT json_scalar(CURRENT_TIMESTAMP);

-- Convert date
SELECT json_scalar(CURRENT_DATE);

----------------------------------------

TITLE: Restoring to Earlier State of Another Branch Using Neon API
DESCRIPTION: This cURL command restores the 'dev/jordan' branch to the state of the 'dev/alex' branch at a specific point in time.

LANGUAGE: bash
CODE:
curl --request POST \
     --url https://console.neon.tech/api/v2/projects/floral-disk-86322740/branches/br-damp-smoke-91135977/restore \
     --header 'Accept: application/json' \
     --header "Authorization: Bearer $NEON_API_KEY" \
     --header 'Content-Type: application/json' \
     --data '
{
  "source_branch_id": "br-jolly-star-07007859",
  "source_timestamp": "2024-02-26T12:00:00Z"
}
' | jq

----------------------------------------

TITLE: Basic FULL OUTER JOIN Example
DESCRIPTION: Demonstrates a basic FULL OUTER JOIN operation between employees and departments tables to show all relationships including null values.

LANGUAGE: sql
CODE:
SELECT
  employee_name,
  department_name
FROM
  employees e
FULL OUTER JOIN departments d
  ON d.department_id = e.department_id;

----------------------------------------

TITLE: CRUD Operations Examples
DESCRIPTION: Example CRUD operations using GORM with Neon Postgres

LANGUAGE: go
CODE:
// Create
user := User{
	Name:  "John Doe",
	Email: "john@example.com",
}
result := db.Create(&user)

// Read
var retrievedUser User
result = db.First(&retrievedUser, user.ID)

// Update
result = db.Model(&user).Update("email", "johndoe@example.com")

// Delete
result = db.Delete(&user)

----------------------------------------

TITLE: Stored Procedure Creation with Dollar Quoting in PostgreSQL
DESCRIPTION: Shows the syntax for creating stored procedures using dollar quoting.

LANGUAGE: sql
CODE:
create procedure proc_name(param_list)
language lang_name
as $$
  -- stored procedure body
$$

----------------------------------------

TITLE: Using CBRT() Function with Numeric String
DESCRIPTION: This example demonstrates using the CBRT() function with a numeric string ('125').

LANGUAGE: sql
CODE:
SELECT CBRT('125') result;

----------------------------------------

TITLE: Removing a PostgreSQL Materialized View
DESCRIPTION: Demonstrates the syntax for dropping a materialized view in PostgreSQL.

LANGUAGE: SQL
CODE:
DROP MATERIALIZED VIEW view_name;

----------------------------------------

TITLE: WIDTH_BUCKET with Table Data
DESCRIPTION: Example showing how to categorize film lengths into six buckets using the film table.

LANGUAGE: sql
CODE:
SELECT
  title,
  length,
  WIDTH_BUCKET(length, 40, 200, 6) AS bucket_number
FROM
  film
ORDER BY
  title;

----------------------------------------

TITLE: Creating Names Index on People Table
DESCRIPTION: Creates a multicolumn index on the last_name and first_name columns of the people table for optimized name-based queries.

LANGUAGE: sql
CODE:
CREATE INDEX idx_people_names
ON people (last_name, first_name);

----------------------------------------

TITLE: Implementing Azure Functions for Todo API
DESCRIPTION: This Azure Function serves as the API endpoint for the todo application. It handles CRUD operations for todos, including creating the todos table if it doesn't exist, and connects to a Neon Postgres database.

LANGUAGE: javascript
CODE:
const { app } = require('@azure/functions');
const { neon } = require('@neondatabase/serverless');

const sql = neon(process.env.DATABASE_URL);

// Helper function to get todos and create table if it doesn't exist
const getTodos = async () => {
  try {
    const todos = await sql`SELECT * FROM todos`;
    return todos;
  } catch (error) {
    if (error.code === '42P01') {
      // Table does not exist, so create it
      await sql`
        CREATE TABLE todos (
          id SERIAL PRIMARY KEY,
          text TEXT NOT NULL,
          completed BOOLEAN NOT NULL
        )`;
      return [];
    }
    throw error;
  }
};

app.http('todos', {
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  authLevel: 'anonymous',
  handler: async (request, context) => {
    const method = request.method.toLowerCase();

    try {
      switch (method) {
        case 'get':
          context.log('Processing GET request for todos');
          const todos = await getTodos();
          return { status: 200, jsonBody: todos };

        case 'post':
          const newTodo = await request.json();
          context.log('Adding new todo:', newTodo);

          if (!newTodo.text) {
            return {
              status: 400,
              jsonBody: { error: 'Todo text is required' },
            };
          }

          const createdTodo = await sql`
            INSERT INTO todos (text, completed)
            VALUES (${newTodo.text}, ${newTodo.completed || false})
            RETURNING *
          `;
          return { status: 201, jsonBody: createdTodo };

        case 'put':
          const updatedTodo = await request.json();
          context.log('Updating todo:', updatedTodo);

          if (!updatedTodo.id) {
            return {
              status: 400,
              jsonBody: { error: 'Todo ID is required' },
            };
          }

          const todo = await sql`
            UPDATE todos
            SET completed = ${updatedTodo.completed}
            WHERE id = ${updatedTodo.id}
            RETURNING *
          `;

          if (todo.length === 0) {
            return {
              status: 404,
              jsonBody: { error: 'Todo not found' },
            };
          }
          return { status: 200, jsonBody: todo };

        case 'delete':
          const { id } = await request.json();
          context.log('Deleting todo:', id);

          if (!id) {
            return {
              status: 400,
              jsonBody: { error: 'Todo ID is required' },
            };
          }

          const deletedTodo = await sql`
            DELETE FROM todos
            WHERE id = ${id}
            RETURNING *
          `;

          if (deletedTodo.length === 0) {
            return {
              status: 404,
              jsonBody: { error: 'Todo not found' },
            };
          }
          return {
            status: 200,
            jsonBody: { message: 'Todo deleted successfully' },
          };

        default:
          return {
            status: 405,
            jsonBody: { error: 'Method not allowed' },
          };
      }
    } catch (error) {
      context.error(`Error processing ${method} request:`, error);
      return {
        status: 500,
        jsonBody: { error: `Failed to process ${method} request` },
      };
    }
  },
});

----------------------------------------

TITLE: Creating a Table for Palindrome Detection
DESCRIPTION: This snippet creates a new table called 'words' to store words for palindrome detection.

LANGUAGE: sql
CODE:
CREATE TABLE words(
  id SERIAL PRIMARY KEY,
  word VARCHAR(255) NOT NULL
);

----------------------------------------

TITLE: ROW_NUMBER with Partitioning
DESCRIPTION: Demonstrates using ROW_NUMBER() with PARTITION BY to restart numbering for each group.

LANGUAGE: sql
CODE:
SELECT
  product_id,
  product_name,
  group_id,
  ROW_NUMBER () OVER (
    PARTITION BY group_id
    ORDER BY
      product_name
  )
FROM
  products;

----------------------------------------

TITLE: Traditional Application-Level Authorization
DESCRIPTION: Example of handling authorization checks at the application level before implementing RLS.

LANGUAGE: typescript
CODE:
export async function insertTodo(newTodo: { newTodo: string; userId: string }) {
  const { userId, getToken } = auth();
  const authToken = await getToken();

  if (!userId) throw new Error('No user logged in');
  if (newTodo.userId !== userId) throw new Error('Unauthorized');

  const db = drizzle(process.env.DATABASE_AUTHENTICATED_URL!, { schema });

  return db.$withAuth(authToken).insert(schema.todos).values({
    task: newTodo.newTodo,
    isComplete: false,
    userId,
  });
}

----------------------------------------

TITLE: Fetching with Offset Example
DESCRIPTION: Query demonstrating how to skip the first five rows and fetch the next five rows from the film table ordered by title.

LANGUAGE: sql
CODE:
SELECT
    film_id,
    title
FROM
    film
ORDER BY
    title
OFFSET 5 ROWS
FETCH FIRST 5 ROW ONLY;

----------------------------------------

TITLE: Creating Database Table
DESCRIPTION: SQL statement to create the product_visits table in Neon database

LANGUAGE: sql
CODE:
CREATE TABLE product_visits(id SERIAL PRIMARY KEY, product_id TEXT NOT NULL);

----------------------------------------

TITLE: Restoring a Branch with Neon API (HTTP)
DESCRIPTION: HTTP request to restore a branch in a Neon project.

LANGUAGE: http
CODE:
POST /projects/{project_id}/branches/{branch_id_to_restore}/restore

----------------------------------------

TITLE: Updating Seed Data with Country Property
DESCRIPTION: C# code showing the updated seed data entries for the Author model including the Country property.

LANGUAGE: csharp
CODE:
namespace GuideNeonEF
{
    public static class ModelBuilderExtensions
    {
        public static void Seed(this ModelBuilder modelBuilder)
        {
            var authors = new[]
            {
                new Author { Id = 1, Name = "J.R.R. Tolkien", Bio = "The creator of Middle-earth and author of The Lord of the Rings.", Country = "United Kingdom" },
                new Author { Id = 2, Name = "George R.R. Martin", Bio = "The author of the epic fantasy series A Song of Ice and Fire.", Country = "United States" },
                new Author { Id = 3, Name = "J.K. Rowling", Bio = "The creator of the Harry Potter series.", Country = "United Kingdom" }
            };
            modelBuilder.Entity<Author>().HasData(authors);
            ...
        }
    }
}

----------------------------------------

TITLE: Declaring NUMERIC Column Syntax
DESCRIPTION: Basic syntax for declaring a column with the NUMERIC type, showing precision and scale parameters.

LANGUAGE: sql
CODE:
column_name NUMERIC(precision, scale)

----------------------------------------

TITLE: Verifying Subscription Status
DESCRIPTION: Checks the status of the subscription in Neon database.

LANGUAGE: sql
CODE:
SELECT * FROM pg_stat_subscription;

----------------------------------------

TITLE: Calling PostgreSQL Stored Procedure for Film Statistics
DESCRIPTION: This snippet shows how to call the film_stat stored procedure, which returns multiple statistics about films using INOUT parameters.

LANGUAGE: sql
CODE:
call film_stat();

----------------------------------------

TITLE: Sample Data Query for NTILE Examples
DESCRIPTION: Query to display the sample data from actual_sales table ordered by year and name, used as reference data for the examples.

LANGUAGE: sql
CODE:
SELECT
	year,
	name,
	amount
FROM
	actual_sales
ORDER BY
	year, name;

----------------------------------------

TITLE: Describing Application Requirements to Replit Agent
DESCRIPTION: Natural language prompt to Replit Agent describing the requirements for an AI-powered MCQ generator application. The prompt outlines core features including PDF upload capabilities, MCQ generation using OpenAI's model, and quiz sharing functionality.

LANGUAGE: text
CODE:
Create an AI application that generates multiple-choice questions (MCQs) from uploaded PDFs for students to prepare for exams, using OpenAI's `gpt-4o-mini` model. It should have the following features:\n\n- Ability to upload PDF documents.\n- Generation of multiple-choice questions (MCQs) using OpenAI's `gpt-4o-mini` model.\n- MCQs directly based on the content of the uploaded PDF.\n- Functionality to create and share a link to the generated MCQs

----------------------------------------

TITLE: Inserting Circle Data
DESCRIPTION: Inserts sample radius values into the circles table and returns the inserted data.

LANGUAGE: sql
CODE:
INSERT INTO circles(radius)
VALUES(10), (20), (25)
RETURNING *;

----------------------------------------

TITLE: Deleting a Neon Project
DESCRIPTION: Deletes a specified Neon project using its project ID.

LANGUAGE: bash
CODE:
neon projects delete <id> [options]

----------------------------------------

TITLE: Creating Sample Tables for BOOL_OR() Examples in PostgreSQL
DESCRIPTION: Creates two tables, 'teams' and 'members', to demonstrate the usage of BOOL_OR() function. The tables include columns for team and member information, including an 'active' boolean field.

LANGUAGE: sql
CODE:
CREATE TABLE teams (
    team_id SERIAL PRIMARY KEY,
    team_name VARCHAR(100) NOT NULL
);

CREATE TABLE members (
    member_id SERIAL PRIMARY KEY,
    member_name VARCHAR(100) NOT NULL,
    active bool,
    team_id INT REFERENCES teams(team_id)
);

----------------------------------------

TITLE: Using Neon CLI with API key
DESCRIPTION: Example of using Neon CLI with an API key to list projects.

LANGUAGE: bash
CODE:
neon projects list --api-key <neon_api_key>

----------------------------------------

TITLE: Querying Database Encoding and Collation in Neon
DESCRIPTION: SQL query to retrieve the encoding, collation, and ctype information for a specific database in Neon.

LANGUAGE: sql
CODE:
SELECT
    pg_database.datname AS database_name,
    pg_encoding_to_char(pg_database.encoding) AS encoding,
    pg_database.datcollate AS collation,
    pg_database.datctype AS ctype
FROM
    pg_database
WHERE
    pg_database.datname = 'your_database_name';

----------------------------------------

TITLE: Implementing Todo Controller
DESCRIPTION: API controller implementation with basic CRUD operations for Todo items.

LANGUAGE: csharp
CODE:
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using NeonEfExample.Data;
using NeonEfExample.Models;

namespace NeonEfExample.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class TodoController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public TodoController(ApplicationDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<Todo>>> GetTodos()
        {
            return await _context.Todos.ToListAsync();
        }

        [HttpPost]
        public async Task<ActionResult<Todo>> PostTodo(Todo todo)
        {
            _context.Todos.Add(todo);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetTodos), new { id = todo.Id }, todo);
        }
    }
}

----------------------------------------

TITLE: Exporting Supabase Data with pg_dump
DESCRIPTION: This command uses pg_dump to export data from a Supabase database to a custom format file. It specifies the connection details, output format, and schema to dump.

LANGUAGE: bash
CODE:
pg_dump -Fc -v -d postgresql://[user]:[password]@[supabase_host]:[port]/[database] --schema=public -f supabase_dump.bak

----------------------------------------

TITLE: Foreign Key with SET NULL Action
DESCRIPTION: Demonstrates implementing a foreign key constraint with SET NULL action, which sets foreign key columns to NULL when referenced rows are deleted.

LANGUAGE: sql
CODE:
CREATE TABLE contacts(
   contact_id INT GENERATED ALWAYS AS IDENTITY,
   customer_id INT,
   contact_name VARCHAR(255) NOT NULL,
   phone VARCHAR(15),
   email VARCHAR(100),
   PRIMARY KEY(contact_id),
   CONSTRAINT fk_customer
      FOREIGN KEY(customer_id)
	  REFERENCES customers(customer_id)
	  ON DELETE SET NULL
);

----------------------------------------

TITLE: Creating GIN Index for hstore
DESCRIPTION: Creates a GIN index on the hstore column for improved query performance with key-level filtering

LANGUAGE: sql
CODE:
CREATE INDEX gin_idx_attributes ON product USING gin (attributes);

----------------------------------------

TITLE: Configuring Neon Database Connection String
DESCRIPTION: Environment variable setup for storing Neon database connection credentials in a .env file.

LANGUAGE: shell
CODE:
DATABASE_URL="postgresql://<user>:<password>@<endpoint_hostname>.neon.tech:<port>/<dbname>?sslmode=require"

----------------------------------------

TITLE: Using MOD() Function with Decimal Numbers in PostgreSQL
DESCRIPTION: An example of using the MOD() function with decimal numbers to calculate the remainder.

LANGUAGE: sql
CODE:
SELECT MOD(10.5, 3);

----------------------------------------

TITLE: PostgreSQL REINDEX Table with Options
DESCRIPTION: Example of rebuilding indexes on the film table with verbose and concurrent options.

LANGUAGE: sql
CODE:
REINDEX (verbose, concurrently)
TABLE film;

----------------------------------------

TITLE: Creating Branch via cURL Command
DESCRIPTION: Example cURL command for creating a new branch in a Neon project using the API. Requires an API bearer token for authentication.

LANGUAGE: bash
CODE:
curl -o - -X POST -H 'Authorization: Bearer ...' https://console.neon.tech/api/v1/clusters/ancient-haze-985396/branches

----------------------------------------

TITLE: Creating a Table with Geometry Column in Postgres
DESCRIPTION: This SQL command creates a table named 'locations' with a geometry column 'geom' to store latitude/longitude points. The SRID 4326 represents the WGS 84 coordinate system for storing degrees of latitude and longitude.

LANGUAGE: sql
CODE:
CREATE TABLE locations (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  geom GEOMETRY(Point, 4326) -- WGS 84 spatial reference system
);

----------------------------------------

TITLE: Creating New Laravel Project
DESCRIPTION: Commands to create a new Laravel project using Composer

LANGUAGE: bash
CODE:
composer create-project laravel/laravel laravel-queue-demo
cd laravel-queue-demo

----------------------------------------

TITLE: Creating Indexes for pg_trgm Performance
DESCRIPTION: These SQL commands create GiST and GIN indexes to improve performance of similarity searches using pg_trgm.

LANGUAGE: sql
CODE:
CREATE INDEX trgm_idx_gist ON books USING GIST (title gist_trgm_ops);
-- or
CREATE INDEX trgm_idx_gin ON books USING GIN (title gin_trgm_ops);

----------------------------------------

TITLE: Installing pg_session_jwt Extension in Postgres
DESCRIPTION: SQL command to install the pg_session_jwt extension in the neondb database. This extension is required for handling authenticated sessions using JSON Web Tokens (JWTs) in Neon RLS.

LANGUAGE: sql
CODE:
CREATE EXTENSION IF NOT EXISTS pg_session_jwt;

----------------------------------------

TITLE: Beta Notice in Markdown
DESCRIPTION: Markdown snippet showing a beta feature notice using an Admonition component with feedback links to Neon Console and Discord.

LANGUAGE: markdown
CODE:
<Admonition type="note" title="Beta">
This feature is in Beta. Please give us [Feedback](https://console.neon.tech/app/projects?modal=feedback) from the Neon Console or by connecting with us on [Discord](https://t.co/kORvEuCUpJ).
</Admonition>

----------------------------------------

TITLE: Using FIRST_VALUE() Window Function in PostgreSQL
DESCRIPTION: This SQL query demonstrates the FIRST_VALUE() window function. It returns the lowest price for each product group alongside individual product details.

LANGUAGE: SQL
CODE:
SELECT
	product_name,
	group_name,
	price,
	FIRST_VALUE (price) OVER (
		PARTITION BY group_name
		ORDER BY
			price
	) AS lowest_price_per_group
FROM
	products
INNER JOIN product_groups USING (group_id);

----------------------------------------

TITLE: Basic NTILE Function Syntax in PostgreSQL
DESCRIPTION: Shows the complete syntax for the NTILE() window function including optional PARTITION BY and ORDER BY clauses. The function divides rows into specified number of buckets.

LANGUAGE: sql
CODE:
NTILE(buckets) OVER (
    [PARTITION BY partition_expression, ... ]
    [ORDER BY sort_expression [ASC | DESC], ...]
)

----------------------------------------

TITLE: Defining lead() Function Signature in PostgreSQL
DESCRIPTION: Shows the function signature for the lead() window function, explaining its parameters and the OVER clause.

LANGUAGE: sql
CODE:
lead(value any [, offset integer [, default any ]]) over (...)

----------------------------------------

TITLE: Boolean Aggregation Function Usage
DESCRIPTION: Shows how to use bool_or() aggregate function to check conditions across multiple rows

LANGUAGE: sql
CODE:
SELECT bool_or(has_paid_subscription) AS inactive_paid_users
FROM users
WHERE is_active = FALSE;

----------------------------------------

TITLE: Inserting Multiple Rows into PostgreSQL using Python
DESCRIPTION: Function to insert multiple vendor records into the vendors table using executemany(). Demonstrates batch insertion with proper transaction handling and error management.

LANGUAGE: python
CODE:
def insert_many_vendors(vendor_list):
    """ Insert multiple vendors into the vendors table  """

    sql = "INSERT INTO vendors(vendor_name) VALUES(%s) RETURNING *"
    config = load_config()
    try:
        with  psycopg2.connect(**config) as conn:
            with  conn.cursor() as cur:
                # execute the INSERT statement
                cur.executemany(sql, vendor_list)

            # commit the changes to the database
            conn.commit()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)

----------------------------------------

TITLE: Implementing PostgreSQL Update Operations in Python
DESCRIPTION: A Python function that updates vendor names in a PostgreSQL database using psycopg2. The function handles database connections, executes UPDATE statements, and manages transaction commits and error handling.

LANGUAGE: python
CODE:
import psycopg2
from config import load_config


def update_vendor(vendor_id, vendor_name):
    """ Update vendor name based on the vendor id """

    updated_row_count = 0

    sql = """ UPDATE vendors
                SET vendor_name = %s
                WHERE vendor_id = %s"""

    config = load_config()

    try:
        with  psycopg2.connect(**config) as conn:
            with  conn.cursor() as cur:

                # execute the UPDATE statement
                cur.execute(sql, (vendor_name, vendor_id))
                updated_row_count = cur.rowcount

            # commit the changes to the database
            conn.commit()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        return updated_row_count

if __name__ == '__main__':
    update_vendor(1, "3M Corp")

----------------------------------------

TITLE: Creating a BEFORE DELETE Trigger Function in PostgreSQL
DESCRIPTION: This snippet demonstrates how to create a trigger function that will be executed before a DELETE operation. It shows the basic structure of a trigger function and how to access the OLD row values.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION trigger_function_name()
RETURNS TRIGGER AS
$$
BEGIN
    -- This logic will be executed before the DELETE operation

    -- To access the values of rows being deleted:
    -- OLD.column_name

    RETURN OLD;
END;
$$
LANGUAGE plpgsql;

----------------------------------------

TITLE: Inserting Data into cube_volumes Table
DESCRIPTION: This SQL snippet inserts sample data into the 'cube_volumes' table for the CBRT() function example.

LANGUAGE: sql
CODE:
INSERT INTO
  cube_volumes (volume)
VALUES
  (8),
  (125),
  (NULL),
  (0)
RETURNING *;

----------------------------------------

TITLE: Basic String Matching with pg_trgm
DESCRIPTION: This SQL query demonstrates basic fuzzy string matching using the pg_trgm extension, searching for titles similar to a misspelled phrase.

LANGUAGE: sql
CODE:
SELECT *
FROM books
WHERE title % 'Grate Expectation';

----------------------------------------

TITLE: Installing Neon Serverless Driver
DESCRIPTION: This bash command installs the Neon Serverless Driver, which manages the connection between the application and the Neon Postgres database.

LANGUAGE: bash
CODE:
npm install @neondatabase/serverless

----------------------------------------

TITLE: Querying PostgreSQL Table with Index
DESCRIPTION: Example query to retrieve customers with the last name 'Purdy' from the customer table. This query can utilize an existing index on the last_name column for improved performance.

LANGUAGE: sql
CODE:
SELECT
    customer_id,
    first_name,
    last_name
FROM
    customer
WHERE
    last_name = 'Purdy';

----------------------------------------

TITLE: Basic json_agg() Function Signatures
DESCRIPTION: Shows the basic and ordered syntax forms of the json_agg() function for aggregating values into JSON arrays.

LANGUAGE: sql
CODE:
json_agg(expression) -> json

LANGUAGE: sql
CODE:
json_agg(expression ORDER BY sort_expression [ASC | DESC] [NULLS { FIRST | LAST }]) -> json

----------------------------------------

TITLE: Configuring Connection String in appsettings.json
DESCRIPTION: JSON configuration for the database connection string in the C# project.

LANGUAGE: json
CODE:
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=localhost;Database=elearning;User Id=ed;Password=YourPassword;"
  }
}

----------------------------------------

TITLE: Configuring Database Connection
DESCRIPTION: JSON configuration for Neon database connection string in appsettings.json.

LANGUAGE: json
CODE:
{
  "ConnectionStrings": {
    "TodoDbConnection": "Host=your-neon-host;Database=your-db;Username=your-username;Password=your-password;SSL Mode=Require"
  }
}

----------------------------------------

TITLE: Basic JSON Value Extraction Examples
DESCRIPTION: Demonstrates simple value extraction from JSON objects using JSON_VALUE().

LANGUAGE: sql
CODE:
-- Extract a simple string value
SELECT JSON_VALUE('{"name": "Alice"}', '$.name');

LANGUAGE: text
CODE:
# |  json_value
--------------
1 | Alice

LANGUAGE: sql
CODE:
-- Extract a numeric value
SELECT JSON_VALUE('{"age": 30}', '$.age');

LANGUAGE: text
CODE:
# | json_value
-------------
1 | 30

----------------------------------------

TITLE: Connecting to Neon Database with psql
DESCRIPTION: Command to establish a connection to a Neon database using the psql client. Requires replacing the placeholder values for user, password, neon_hostname, and dbname with actual credentials.

LANGUAGE: bash
CODE:
psql postgresql://[user]:[password]@[neon_hostname]/[dbname]

----------------------------------------

TITLE: Using jsonb_insert() to Update Table Data
DESCRIPTION: Example of using jsonb_insert() within an UPDATE statement to modify JSON data in a table.

LANGUAGE: SQL
CODE:
UPDATE
  employee_profiles
SET
  profiles = jsonb_insert(
    profiles, '{skills,0}', '"Web Dev"'
  )
WHERE
  id = 1
RETURNING *;

----------------------------------------

TITLE: Fetching First Five Rows Example
DESCRIPTION: Query showing how to fetch the first five rows from the film table ordered by title.

LANGUAGE: sql
CODE:
SELECT
    film_id,
    title
FROM
    film
ORDER BY
    title
FETCH FIRST 5 ROW ONLY;

----------------------------------------

TITLE: Configuring Sudo Permissions for Runner User
DESCRIPTION: This configuration grants the 'runneruser' specific sudo permissions without requiring a password. It allows the use of apt and a PostgreSQL-related script.

LANGUAGE: shell
CODE:
runneruser ALL=(ALL) NOPASSWD: /usr/bin/apt, /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh

----------------------------------------

TITLE: Creating a UNIQUE Index on Multiple Columns
DESCRIPTION: Example of creating a UNIQUE index on multiple columns (work_phone and extension) to ensure unique combinations.

LANGUAGE: sql
CODE:
CREATE UNIQUE INDEX idx_employees_workphone
ON employees(work_phone, extension);

----------------------------------------

TITLE: Adding IP Addresses to the Allowlist
DESCRIPTION: The add subcommand adds IP addresses to the allowlist. It supports options for specifying the project ID and whether to apply the list only to the default branch.

LANGUAGE: bash
CODE:
neon ip-allow add [ips ...] [options]

LANGUAGE: bash
CODE:
neon ip-allow add 192.0.2.3 --project-id cold-grass-40154007

----------------------------------------

TITLE: Deleting a Branch with Neon CLI
DESCRIPTION: Shows how to delete a specific branch using its ID or name with the Neon CLI.

LANGUAGE: bash
CODE:
neon branches delete br-rough-sky-158193

----------------------------------------

TITLE: PostgreSQL SELECT DISTINCT on Multiple Columns Example
DESCRIPTION: Shows how to use SELECT DISTINCT on both 'bcolor' and 'fcolor' columns, evaluating uniqueness based on the combination of values.

LANGUAGE: sql
CODE:
SELECT
  DISTINCT bcolor, fcolor
FROM
  colors
ORDER BY
  bcolor,
  fcolor;

----------------------------------------

TITLE: Creating Additional Database Migration Scripts
DESCRIPTION: SQL scripts for modifying existing tables and creating new tables using Flyway migrations.

LANGUAGE: sql
CODE:
ALTER TABLE users ADD COLUMN role VARCHAR(20);

LANGUAGE: sql
CODE:
ALTER TABLE users ALTER COLUMN role SET NOT NULL;

LANGUAGE: sql
CODE:
CREATE TABLE comments (
    id SERIAL PRIMARY KEY,
    post_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

LANGUAGE: sql
CODE:
ALTER TABLE users DROP COLUMN role;

----------------------------------------

TITLE: Creating PostgreSQL Partial Index - Basic Syntax
DESCRIPTION: Shows the basic syntax for creating a partial index in PostgreSQL using the CREATE INDEX statement with a WHERE clause to specify the condition for rows to be included in the index.

LANGUAGE: sql
CODE:
CREATE [IF NOT EXISTS] INDEX index_name
ON table_name(column1, column2, ...)
WHERE predicate;

----------------------------------------

TITLE: Stopping PostgreSQL Service via Command Line
DESCRIPTION: This command stops the PostgreSQL service using the Windows 'net stop' command. The user needs to replace '<version>' with their specific PostgreSQL version number.

LANGUAGE: xmlsql
CODE:
net stop postgresql-x64-<version>

----------------------------------------

TITLE: SQL Function Signature for json()
DESCRIPTION: The basic syntax and parameters of the PostgreSQL json() function, showing all available options for conversion and formatting.

LANGUAGE: sql
CODE:
json(
    expression                              -- Input text or bytea
    [ FORMAT JSON [ ENCODING UTF8 ]]        -- Optional format specification
    [ { WITH | WITHOUT } UNIQUE [ KEYS ]]   -- Optional duplicate key handling
) → json

----------------------------------------

TITLE: Extracting Month from Timestamp in PostgreSQL
DESCRIPTION: This example demonstrates extracting the month from a timestamp using the EXTRACT() function.

LANGUAGE: sql
CODE:
SELECT EXTRACT(MONTH FROM TIMESTAMP '2016-12-31 13:30:15') m;

----------------------------------------

TITLE: Authorization in Blade Views
DESCRIPTION: Blade template example showing conditional rendering based on user permissions.

LANGUAGE: html
CODE:
<h1>{{ $post->title }}</h1>
<p>{{ $post->content }}</p>

@can('update', $post)
<a href="{{ route('posts.edit', $post) }}">Edit Post</a>
@endcan

@can('delete', $post)
<form action="{{ route('posts.destroy', $post) }}" method="POST">
  @csrf @method('DELETE')
  <button type="submit">Delete Post</button>
</form>
@endcan

@can('publish', $post)
  @if(!$post->is_published)
  <form action="{{ route('posts.publish', $post) }}" method="POST">
    @csrf
    <button type="submit">Publish Post</button>
  </form>
  @endif
@endcan

----------------------------------------

TITLE: Basic Foreign Key Constraint Syntax in PostgreSQL
DESCRIPTION: Shows the fundamental syntax structure for creating foreign key constraints in PostgreSQL, including optional constraint naming and actions for updates/deletes.

LANGUAGE: sql
CODE:
[CONSTRAINT fk_name]
   FOREIGN KEY(fk_columns)
   REFERENCES parent_table(parent_key_columns)
   [ON DELETE delete_action]
   [ON UPDATE update_action]

----------------------------------------

TITLE: Markdown Documentation Structure
DESCRIPTION: Front matter and structural markdown for the Neon platform documentation overview page. Includes YAML metadata and organized sections using markdown headings and custom DetailIconCards components.

LANGUAGE: markdown
CODE:
---
title: Platform overview
enableTableOfContents: true
subtitle: Find information about managing all aspects of your database using the Neon platform
updatedOn: '2025-03-05T21:09:38.755Z'
---

----------------------------------------

TITLE: Complete PostgreSQL Data Insertion Implementation in C#
DESCRIPTION: Demonstrates a complete implementation of inserting student data into PostgreSQL, including connection handling, parameter binding, and error handling using Npgsql.

LANGUAGE: csharp
CODE:
using Npgsql;

var student = new Student("John", "Doe", "[[email protected]]", new DateOnly(2024, 5, 20));


// Construct INSERT statement
var sql = @"INSERT INTO students(first_name, last_name, email, registration_date) " +
          "VALUES(@first_name,@last_name,@email,@registration_date)";

// Get the connection string
string connectionString = ConfigurationHelper.GetConnectionString("DefaultConnection");

try
{
    // Create a new data source
    using var dataSource = NpgsqlDataSource.Create(connectionString);

    // Create a command
    await using var cmd = dataSource.CreateCommand(sql);

    // Bind parameters
    cmd.Parameters.AddWithValue("@first_name", student.FirstName);
    cmd.Parameters.AddWithValue("@last_name", student.LastName);
    cmd.Parameters.AddWithValue("@email", student.Email);
    cmd.Parameters.AddWithValue("@registration_date", student.RegistrationDate);

    await cmd.ExecuteNonQueryAsync();

    Console.WriteLine("The row has been inserted successfully.");

}
catch (NpgsqlException ex)
{
    Console.WriteLine($"Error: {ex.Message}");
}


public record Student(string FirstName, string LastName, string Email, DateOnly RegistrationDate);

----------------------------------------

TITLE: Single Row Insertion with JDBC PreparedStatement
DESCRIPTION: Implements a database operation to insert a single product record using JDBC PreparedStatement with generated key retrieval.

LANGUAGE: java
CODE:
public static int add(Product product) {
    var sql = "INSERT INTO products(name, price) "
            + "VALUES(?,?)";

    try (var conn =  DB.connect();
         var pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

        // bind the values
        pstmt.setString(1, product.getName());
        pstmt.setDouble(2, product.getPrice());

        // execute the INSERT statement and get the inserted id
        int insertedRow = pstmt.executeUpdate();
        if (insertedRow > 0) {
            var rs = pstmt.getGeneratedKeys();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return -1;
}

----------------------------------------

TITLE: Converting Array to JSON Example
DESCRIPTION: Demonstrates how to use array_to_json to convert the preferences array into a JSON array.

LANGUAGE: sql
CODE:
SELECT id, name, array_to_json(preferences) AS json_preferences
FROM customers;

----------------------------------------

TITLE: Inserting Sample Data for FULL OUTER JOIN Demo
DESCRIPTION: Populates the sample tables with test data including departments and employees with various relationships.

LANGUAGE: sql
CODE:
INSERT INTO departments (department_name)
VALUES
  ('Sales'),
  ('Marketing'),
  ('HR'),
  ('IT'),
  ('Production');
INSERT INTO employees (employee_name, department_id)
VALUES
  ('Bette Nicholson', 1),
  ('Christian Gable', 1),
  ('Joe Swank', 2),
  ('Fred Costner', 3),
  ('Sandra Kilmer', 4),
  ('Julia Mcqueen', NULL);

----------------------------------------

TITLE: Fetching and Locking Tasks with SKIP LOCKED in Postgres
DESCRIPTION: This complex SQL query fetches and locks a single pending task using SKIP LOCKED. It updates the task status to 'in_progress' and sets the started_at timestamp, ensuring only one worker processes each task.

LANGUAGE: sql
CODE:
WITH cte AS (
  SELECT id
  FROM tasks
  WHERE status = 'pending'
  ORDER BY created_at
  LIMIT 1
  FOR UPDATE SKIP LOCKED
)
UPDATE tasks
SET status = 'in_progress', started_at = CURRENT_TIMESTAMP
FROM cte
WHERE tasks.id = cte.id
RETURNING tasks.*;

----------------------------------------

TITLE: Converting Boolean Values to JSON using json_scalar() in SQL
DESCRIPTION: Demonstrates how to convert boolean values to JSON format using the json_scalar() function.

LANGUAGE: sql
CODE:
-- Convert boolean true
SELECT json_scalar(true);

----------------------------------------

TITLE: Install CsvHelper NuGet Package
DESCRIPTION: Command to install the required CsvHelper package via NuGet Package Manager Console

LANGUAGE: csharp
CODE:
Install-Package CsvHelper

----------------------------------------

TITLE: Duration Comparison Query
DESCRIPTION: Demonstrates how to compare planned versus actual session durations using interval arithmetic.

LANGUAGE: sql
CODE:
SELECT session_title, planned_duration, finish_time - start_time AS actual_duration
FROM conference_sessions
WHERE finish_time - start_time > planned_duration;

----------------------------------------

TITLE: Creating Posts Table Structure
DESCRIPTION: Creates a table named posts with columns for id, title, excerpt, body, and timestamps.

LANGUAGE: sql
CODE:
CREATE TABLE posts (
  id serial primary key,
  title VARCHAR (255) NOT NULL,
  excerpt VARCHAR (150),
  body TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP
);

----------------------------------------

TITLE: DENSE_RANK with CTE for Top Products
DESCRIPTION: Uses a Common Table Expression (CTE) with DENSE_RANK to find the most expensive product in each group.

LANGUAGE: sql
CODE:
WITH cte AS(
	SELECT
		product_id,
		product_name,
		group_id,
		price,
		DENSE_RANK () OVER (
			PARTITION BY group_id
			ORDER BY price DESC
		) price_rank
	FROM
		products
)
SELECT
	product_id,
	product_name,
	price
FROM
	cte
WHERE
	price_rank = 1;

----------------------------------------

TITLE: Creating and Populating Sample Sales Table in PostgreSQL
DESCRIPTION: This SQL snippet creates a 'sales' table with brand, segment, and quantity columns, then inserts sample data for demonstration purposes.

LANGUAGE: sql
CODE:
DROP TABLE IF EXISTS sales;

CREATE TABLE sales (
    brand VARCHAR NOT NULL,
    segment VARCHAR NOT NULL,
    quantity INT NOT NULL,
    PRIMARY KEY (brand, segment)
);

INSERT INTO sales (brand, segment, quantity)
VALUES
    ('ABC', 'Premium', 100),
    ('ABC', 'Basic', 200),
    ('XYZ', 'Premium', 100),
    ('XYZ', 'Basic', 300)
RETURNING *;

----------------------------------------

TITLE: Employee Hierarchy Recursive Query Example
DESCRIPTION: A complete example showing how to query employee hierarchical data using a recursive CTE to display reporting lines.

LANGUAGE: sql
CODE:
WITH RECURSIVE reporting_line AS (
  SELECT
    employee_id,
    full_name AS subordinates
  FROM
    employees
  WHERE
    manager_id IS NULL
  UNION ALL
  SELECT
    e.employee_id,
    (
      rl.subordinates || ' > ' || e.full_name
    ) AS subordinates
  FROM
    employees e
    INNER JOIN reporting_line rl ON e.manager_id = rl.employee_id
)
SELECT
  employee_id,
  subordinates
FROM
  reporting_line
ORDER BY
  employee_id;

----------------------------------------

TITLE: Inserting Sample Data into Orders Table in PostgreSQL
DESCRIPTION: This SQL snippet inserts sample data into the 'orders' table. It adds five rows with different customer IDs, total prices, and creation dates to demonstrate various scenarios.

LANGUAGE: sql
CODE:
INSERT INTO orders (customer_id, total_price, created_at) VALUES
(1, 100.00, NOW() - INTERVAL '1 day'),
(2, 250.50, NOW() - INTERVAL '2 days'),
(3, 75.25, NOW() - INTERVAL '3 days'),
(1, 300.00, NOW() - INTERVAL '3 days'),
(2, 450.75, NOW() - INTERVAL '4 days');

----------------------------------------

TITLE: Creating PostgreSQL Composite Type
DESCRIPTION: Demonstrates the basic syntax for creating a composite type in PostgreSQL using CREATE TYPE statement.

LANGUAGE: sql
CODE:
CREATE TYPE type_name AS (
    field1 data_type1,
    field2 data_type2,
    ...
);

----------------------------------------

TITLE: Installing Entity Framework Dependencies
DESCRIPTION: Commands to install necessary NuGet packages for Entity Framework Core and PostgreSQL.

LANGUAGE: bash
CODE:
dotnet add package Microsoft.EntityFrameworkCore
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add Microsoft.AspNetCore.App
dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
dotnet add package dotenv.net

----------------------------------------

TITLE: Converting Excess Hours to Days with JUSTIFY_INTERVAL()
DESCRIPTION: Shows how JUSTIFY_INTERVAL() can be used to convert hours exceeding 24 into days and remaining hours.

LANGUAGE: sql
CODE:
SELECT JUSTIFY_INTERVAL('30 hours');

----------------------------------------

TITLE: PostgreSQL NTH_VALUE With Partitioning
DESCRIPTION: Example demonstrating NTH_VALUE() usage to find the second most expensive product within each product group using partitioning.

LANGUAGE: sql
CODE:
SELECT
    product_id,
    product_name,
    price,
    group_id,
    NTH_VALUE(product_name, 2)
    OVER(
        PARTITION BY group_id
        ORDER BY price DESC
        RANGE BETWEEN
            UNBOUNDED PRECEDING AND
            UNBOUNDED FOLLOWING
    )
FROM
    products;

----------------------------------------

TITLE: Dollar-Quoted String Constant Syntax in PostgreSQL
DESCRIPTION: Demonstrates the basic syntax of dollar-quoted string constants showing both tagged and untagged versions.

LANGUAGE: sql
CODE:
$tag$<string_constant>$tag$

LANGUAGE: sql
CODE:
select $$I'm a string constant$$ as message;

LANGUAGE: sql
CODE:
SELECT $message$I'm a string constant$message$ s;

----------------------------------------

TITLE: Getting Last Character Example
DESCRIPTION: Shows how to use RIGHT() function to extract the last character from a string.

LANGUAGE: sql
CODE:
SELECT RIGHT('XYZ', 1);

----------------------------------------

TITLE: Cross-Database Job Scheduling
DESCRIPTION: Example of scheduling a job to run in a different database.

LANGUAGE: sql
CODE:
SELECT cron.schedule_in_database(
    'my_job',                     -- Job name
    '0 * * * *',                  -- Cron schedule (every hour)
    'my_database',                 -- Target database
    'VACUUM ANALYZE my_table'      -- SQL command to run
);

----------------------------------------

TITLE: Connecting to PostgreSQL Database
DESCRIPTION: Commands for connecting to PostgreSQL databases with different options including remote hosts and SSL mode.

LANGUAGE: phpsql
CODE:
psql -d database -U  user -W

LANGUAGE: bash
CODE:
psql -d dvdrental -U postgres -W
Password for user postgres:
dvdrental=#

LANGUAGE: bash
CODE:
psql -h host -d database -U user -W

LANGUAGE: bash
CODE:
psql -U user -h host "dbname=db sslmode=require"

----------------------------------------

TITLE: Using PostgreSQL LAG() Function Over a Result Set
DESCRIPTION: This example demonstrates how to use the LAG() function to compare sales amounts between the current year and the previous year for a specific group.

LANGUAGE: sql
CODE:
SELECT
  year,
  amount,
  LAG(amount, 1) OVER (
    ORDER BY
      year
  ) previous_year_sales
FROM
  sales
WHERE group_id = 1;

----------------------------------------

TITLE: Converting Interval to String
DESCRIPTION: Shows how to convert an interval value to a string using the TO_CHAR() function in PostgreSQL.

LANGUAGE: SQL
CODE:
SELECT
    TO_CHAR(
        INTERVAL '17h 20m 05s',
        'HH24:MI:SS'
    );

----------------------------------------

TITLE: DMS Network Timeout Error Message
DESCRIPTION: Error message encountered when the replication instance cannot access the Neon database due to network configuration issues.

LANGUAGE: text
CODE:
Endpoint failed: Application-Status: 1020912, Application-Message: Cannot connect to ODBC provider Network error has occurred, Application-Detailed-Message: RetCode: SQL_ERROR SqlState: 08001 NativeError: 101 Message: timeout expired

----------------------------------------

TITLE: Creating Last Name Change Logging Function in PostgreSQL
DESCRIPTION: This PL/pgSQL function logs changes to an employee's last name in the employee_audits table. It compares the old and new last names and inserts a record if they differ.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION log_last_name_changes()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL
  AS
$$
BEGIN
	IF NEW.last_name <> OLD.last_name THEN
		 INSERT INTO employee_audits(employee_id,last_name,changed_on)
		 VALUES(OLD.id,OLD.last_name,now());
	END IF;

	RETURN NEW;
END;
$$

----------------------------------------

TITLE: Creating PostgreSQL Stored Procedure with INOUT Parameters
DESCRIPTION: This snippet demonstrates the basic syntax for creating a stored procedure with INOUT parameters in PostgreSQL. It shows the structure of the CREATE PROCEDURE statement and how to define INOUT parameters.

LANGUAGE: sql
CODE:
create or replace procedure sp_name(
    inout parameter type, ...
)
as
$$
   -- body
$$
language plpgsql;

----------------------------------------

TITLE: Retrieving Project Details with Neon API (Bash)
DESCRIPTION: This snippet shows how to use the Neon API to retrieve project details, including the maintenance window and scheduled updates. It requires the project ID and API key.

LANGUAGE: bash
CODE:
curl --request GET \
     --url https://console.neon.tech/api/v2/projects/<your_project_id> \
     --header 'accept: application/json' \
     --header 'authorization: Bearer $NEON_API_KEY'

----------------------------------------

TITLE: Converting Numbers to JSONB with to_jsonb() Function
DESCRIPTION: Illustrates the use of to_jsonb() function to convert integer and numeric values to JSONB type.

LANGUAGE: sql
CODE:
SELECT
  to_jsonb(10 :: int),
  to_jsonb(9.99 :: numeric);

----------------------------------------

TITLE: Basic LPAD Usage with Asterisk Padding
DESCRIPTION: Example showing how to pad the string 'PostgreSQL' with asterisks on the left side to reach a length of 15 characters.

LANGUAGE: sql
CODE:
SELECT LPAD('PostgreSQL',15,'*');

----------------------------------------

TITLE: Creating Sample Table and Data in PostgreSQL
DESCRIPTION: SQL commands to create a table named 'playing_with_neon' and insert sample data for testing replication.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS playing_with_neon(id SERIAL PRIMARY KEY, name TEXT NOT NULL, value REAL);
INSERT INTO playing_with_neon(name, value)
SELECT LEFT(md5(i::TEXT), 10), random() FROM generate_series(1, 10) s(i);

----------------------------------------

TITLE: Implementing Main Analysis Script for Sentiment Analysis
DESCRIPTION: JavaScript code to process customer feedback, analyze it using Azure AI Language, and store results in the Neon database.

LANGUAGE: javascript
CODE:
const db = require('./database');
const { analyzeSentiment, extractKeyPhrases } = require('./textAnalytics');

async function processFeedback() {
  const client = await db.connect();

  try {
    await client.query('BEGIN');

    // Get unanalyzed feedback
    const feedbackResult = await client.query(`
      SELECT f.feedback_id, f.feedback_text 
      FROM customer_feedback f
      LEFT JOIN sentiment_results s ON f.feedback_id = s.feedback_id
      WHERE s.feedback_id IS NULL
    `);

    for (const row of feedbackResult.rows) {
      // Analyze sentiment and extract key phrases
      const [sentiment, keyPhrases] = await Promise.all([
        analyzeSentiment(row.feedback_text),
        extractKeyPhrases(row.feedback_text),
      ]);

      // Store results in the sentiment_results table
      await client.query(
        `
        INSERT INTO sentiment_results 
        (feedback_id, sentiment_score, sentiment_label, key_phrases, language_code)
        VALUES ($1, $2, $3, $4, $5)
      `,
        [row.feedback_id, sentiment.score, sentiment.label, keyPhrases, sentiment.language]
      );
    }

    await client.query('COMMIT');
    console.log(`Processed ${feedbackResult.rows.length} feedback items`);
  } catch (err) {
    await client.query('ROLLBACK');
    throw err;
  } finally {
    client.release();
  }
}

module.exports = { processFeedback };

----------------------------------------

TITLE: Decrypting a Message with TRANSLATE()
DESCRIPTION: This example shows how to decrypt a message that was encrypted using the TRANSLATE() function by reversing the character mapping used in the encryption process.

LANGUAGE: sql
CODE:
SELECT TRANSLATE('0 o42i4p w4oo064',
                     '0123456789acwrvyuiopkjhbq',
                     'abcdefghijklmnopqrstuvxyz');

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Commands to install psycopg2 and generate requirements.txt

LANGUAGE: shell
CODE:
pip install psycopg2

LANGUAGE: python
CODE:
pip freeze > requirements.txt

----------------------------------------

TITLE: Connecting to Neon Read Replica using PostgreSQL Connection String
DESCRIPTION: Example of a connection string for a Neon read replica. This string allows connection to a read-only instance of the database, ensuring data integrity while providing access for queries and analysis.

LANGUAGE: bash
CODE:
postgresql://partner:partner_password@ep-read-replica-12345.us-east-2.aws.neon.tech/sales_db?sslmode=require

----------------------------------------

TITLE: Anonymous Block with Traditional Quotes in PostgreSQL
DESCRIPTION: Shows an anonymous PL/pgSQL block using traditional quote escaping.

LANGUAGE: sql
CODE:
do
'declare
   film_count integer;
begin
   select count(*) into film_count
   from film;

   raise notice ''The number of films: %'', film_count;
end;'
;

----------------------------------------

TITLE: Committing Changes for Preview Deployment
DESCRIPTION: Commands for committing changes to trigger a preview deployment in Vercel.

LANGUAGE: bash
CODE:
git commit -a -m "Update my app"