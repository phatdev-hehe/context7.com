TITLE: Complete Handsontable React Implementation Example
DESCRIPTION: Full example showing how to implement a Handsontable data grid with React, including configuration options and column definitions.

LANGUAGE: jsx
CODE:
import { HotTable, HotColumn } from '@handsontable/react-wrapper';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/styles/handsontable.min.css';
import 'handsontable/styles/ht-theme-main.min.css';

registerAllModules();

const ExampleComponent = () => {
  return (
    <div class="ht-theme-main-dark-auto">
      <HotTable
        data={[
          { company: 'Tagcat', country: 'United Kingdom', rating: 4.4 },
          { company: 'Zoomzone', country: 'Japan', rating: 4.5 },
          { company: 'Meeveo', country: 'United States', rating: 4.6 },
        ]}
        rowHeaders={true}
        colHeaders={true}
        navigableHeaders={true}
        tabNavigation={true}
        multiColumnSorting={true}
        headerClassName="htLeft"
        licenseKey="non-commercial-and-evaluation"
      >
        <HotColumn title="Company" data="company" width="100"></HotColumn>
        <HotColumn title="Country" data="country" width="170" type="dropdown" source={['United Kingdom', 'Japan', 'United States']}></HotColumn>
        <HotColumn title="Rating" data="rating" width="100" type="numeric"></HotColumn>
      </HotTable>
    </div>
  );
};

----------------------------------------

TITLE: Array of Objects Data Binding
DESCRIPTION: Illustrates binding an array of objects as a data source to Handsontable, providing a more structured approach to data organization.



----------------------------------------

TITLE: Basic Handsontable Grid Configuration
DESCRIPTION: Example of initializing Handsontable grid with basic configuration options like dimensions, headers and features

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable';
import 'handsontable/styles/handsontable.css';
import 'handsontable/styles/ht-theme-main.css';

const container = document.querySelector('#example');
const hot = new Handsontable(container, {
  licenseKey: "non-commercial-and-evaluation",
  data: [
    ['A1', 'B1', 'C1', 'D1'],
    ['A2', 'B2', 'C2', 'D2'],
    ['A3', 'B3', 'C3', 'D3'],
  ],
  width: 400,
  height: 300,
  colHeaders: true,
  rowHeaders: true,
  customBorders: true,
  dropdownMenu: true,
  multiColumnSorting: true,
  filters: true,
  manualRowMove: true
});

----------------------------------------

TITLE: Initializing Handsontable in JavaScript
DESCRIPTION: This snippet demonstrates how to set up a basic Handsontable instance using JavaScript. It includes HTML structure, CSS styling, and JavaScript initialization code.

LANGUAGE: html
CODE:
@[code](@/content/guides/getting-started/demo/javascript/example.html)

LANGUAGE: css
CODE:
@[code](@/content/guides/getting-started/demo/javascript/example.css)

LANGUAGE: javascript
CODE:
@[code](@/content/guides/getting-started/demo/javascript/example.js)

----------------------------------------

TITLE: Using Handsontable in a Vue 3 Component
DESCRIPTION: A complete Vue 3 component example demonstrating how to use Handsontable. It includes importing necessary modules, registering components, setting up data, and configuring the data grid with various options.

LANGUAGE: vue
CODE:
<template>
  <div class="ht-theme-main-dark-auto">
    <hot-table
      :data="data"
      :row-headers=true
      :col-headers=true
      :navigable-headers=true
      :tab-navigation=true
      :multi-column-sorting=true
      header-class-name="htLeft"
      license-key="non-commercial-and-evaluation"
    >
      <hot-column title="Company" data="company" width=100></hot-column>
      <hot-column title="Country" data="country" width=170 type="dropdown" :source="['United Kingdom', 'Japan', 'United States']"></hot-column>
      <hot-column title="Rating" data="rating" width=100 type="numeric"></hot-column>
    </hot-table>
  </div>
</template>

<script>
  import { defineComponent } from 'vue';
  import { HotTable, HotColumn } from '@handsontable/vue3';
  import { registerAllModules } from 'handsontable/registry';
  import 'handsontable/styles/handsontable.min.css';
  import 'handsontable/styles/ht-theme-main.min.css';

  // register Handsontable's modules
  registerAllModules();

  const ExampleComponent = defineComponent({
    data() {
      return {
        data: [
          { company: 'Tagcat', country: 'United Kingdom', rating: 4.4 },
          { company: 'Zoomzone', country: 'Japan', rating: 4.5 },
          { company: 'Meeveo', country: 'United States', rating: 4.6 },
        ]
      };
    },
    components: {
      HotTable,
      HotColumn,
    }
  });

  export default ExampleComponent;
</script>

----------------------------------------

TITLE: JavaScript Implementation of Conditional Formatting
DESCRIPTION: JavaScript code demonstrating conditional formatting implementation in Handsontable, including cell renderer configurations and data initialization.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const cars = [
  ['', 'Tesla', 'Nissan', 'Toyota', 'Honda', 'Mazda', 'Ford'],
  [2017, 10, 11, 12, 13, 15, 16],
  [2018, 10, -11, 14, 13, 15, 16],
  [2019, 10, 11, 15, -13, 15, 16],
  [2020, 10, 11, 16, 13, 15, 16],
  [2021, 10, 11, 17, 13, 15, 16]
];

const hot = new Handsontable(container, {
  data: cars,
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  width: 'auto',
  language: 'en-US',
  licenseKey: 'non-commercial-and-evaluation',
  cells(row, col) {
    const cellProperties = {};
    const data = this.instance.getData();

    if (row === 0) {
      cellProperties.className = 'custom-green';
      cellProperties.readOnly = true;
    }

    if (col === 2) {
      cellProperties.className = 'custom-italic';
    }

    if (data[row][col] === '') {
      cellProperties.className = 'custom-silver';
    }

    if (data[row][col] < 0) {
      cellProperties.className = 'custom-red';
    }

    return cellProperties;
  }
});

----------------------------------------

TITLE: Advanced Redux Integration with Custom Components
DESCRIPTION: Advanced example implementing custom editor and renderer components with Redux state management. Features a HexColorPicker editor and StarRatingComponent renderer with Redux connect() integration.

LANGUAGE: JSX
CODE:
@[code](@/content/guides/getting-started/react-redux/react/example6.jsx)

LANGUAGE: TSX
CODE:
@[code](@/content/guides/getting-started/react-redux/react/example6.tsx)

----------------------------------------

TITLE: Creating a Password Editor by Extending TextEditor
DESCRIPTION: Demonstrates how to create a custom PasswordEditor by extending the TextEditor class and overriding its createElements method to use an input type='password' instead of a textarea.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable';

class PasswordEditor extends Handsontable.editors.TextEditor {
  createElements() {
    super.createElements();

    this.TEXTAREA = this.hot.rootDocument.createElement('input');
    this.TEXTAREA.setAttribute('type', 'password');
    this.TEXTAREA.setAttribute('data-hot-input', true); // Makes the element recognizable by HOT as its own component's element.
    this.textareaStyle = this.TEXTAREA.style;
    this.textareaStyle.width = 0;
    this.textareaStyle.height = 0;

    this.TEXTAREA_PARENT.innerText = '';
    this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
  }
}

----------------------------------------

TITLE: React Data Grid Saving Implementation
DESCRIPTION: React component implementation of Handsontable with data saving functionality using hooks and fetch API.

LANGUAGE: jsx
CODE:
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

export const ExampleComponent = () => {
  const data = [
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ];

  const afterChange = (changes, source) => {
    if (source === 'loadData') {
      return;
    }

    fetch('https://fake-api.com/save', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ changes })
    })
    .then(response => response.json())
    .then(data => {
      console.log('Success:', data);
    })
    .catch((error) => {
      console.error('Error:', error);
    });
  };

  return (
    <HotTable
      data={data}
      height="auto"
      width="auto"
      rowHeaders={true}
      colHeaders={true}
      afterChange={afterChange}
    />
  );
};

----------------------------------------

TITLE: Initializing Handsontable with JavaScript
DESCRIPTION: JavaScript code to initialize a Handsontable instance with basic configuration including data, columns, and features like sorting and navigation.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable';
// Base CSS rules
import 'handsontable/styles/handsontable.min.css';
// Main theme variables
import 'handsontable/styles/ht-theme-main.min.css';

const element = document.getElementById('handsontable-grid');

new Handsontable(element, {
  data: [
    { company: 'Tagcat', country: 'United Kingdom', rating: 4.4 },
    { company: 'Zoomzone', country: 'Japan', rating: 4.5 },
    { company: 'Meeveo', country: 'United States', rating: 4.6 },
  ],
  columns: [
    { data: 'company', title: 'Company', width: 100 },
    { data: 'country', title: 'Country', width: 170, type: 'dropdown', source: ['United Kingdom', 'Japan', 'United States'] },
    { data: 'rating', title: 'Rating', width: 100, type: 'numeric' },
  ],
  rowHeaders: true,
  navigableHeaders: true,
  tabNavigation: true,
  multiColumnSorting: true,
  headerClassName: 'htLeft',
  licenseKey: 'non-commercial-and-evaluation',
});

----------------------------------------

TITLE: React HotTable Component Configuration
DESCRIPTION: Example of configuring a Handsontable grid using React HotTable component props

LANGUAGE: jsx
CODE:
<HotTable
  autoWrapRow={true}
  autoWrapCol={true}
  licenseKey="non-commercial-and-evaluation"
  data={[
    ['A1', 'B1', 'C1', 'D1'],
    ['A2', 'B2', 'C2', 'D2'],
    ['A3', 'B3', 'C3', 'D3'],
  ]}
  width={400}
  height={300}
  colHeaders={true}
  rowHeaders={true}
  customBorders={true}
  dropdownMenu={true}
  multiColumnSorting={true}
  filters={true}
  manualRowMove={true}
/>

----------------------------------------

TITLE: Registering a Custom Cell Type in Handsontable
DESCRIPTION: This code snippet demonstrates how to register a custom cell type in Handsontable using the registerCellType method. It includes a custom editor, renderer, and validator.

LANGUAGE: javascript
CODE:
class MyEditor extends Handsontable.editors.TextEditor {}

function customRenderer(instance, td, row, column, prop, value, cellProperties) {
  // ...renderer logic
}

function customValidator(query, callback) {
  // ...validator logic
  callback(/* Pass `true` or `false` */);
}

// Register an alias
Handsontable.cellTypes.registerCellType('my.custom', {
  editor: MyEditor,
  renderer: customRenderer,
  validator: customValidator,
  // You can add additional options to the cell type
  // based on Handsontable settings
  className: 'my-cell',
  allowInvalid: true,
  // Or you can add custom properties which
  // will be accessible in `cellProperties`
  myCustomCellState: 'complete',
});

----------------------------------------

TITLE: Implementing Select Cell Type in React (TSX)
DESCRIPTION: This React TSX snippet shows how to use the HotTable component from @handsontable/react to create a table with select cell type. It includes TypeScript type annotations for improved type safety.

LANGUAGE: tsx
CODE:
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

const ExampleComponent = () => {
  return (
    <HotTable
      data={[
        ['2017', 'Honda', 10],
        ['2018', 'Toyota', 20],
        ['2019', 'Nissan', 30]
      ]}
      colHeaders={['Year', 'Car', 'Available']}
      columns={[
        { type: 'numeric' },
        {
          type: 'select',
          selectOptions: ['Kia', 'Nissan', 'Toyota', 'Honda']
        },
        {}
      ]}
      licenseKey="non-commercial-and-evaluation"
    />
  );
};

export default ExampleComponent;

----------------------------------------

TITLE: Creating and Registering Custom Validator in JavaScript
DESCRIPTION: Shows a complete example of creating a custom validator function and registering it with an alias. This pattern allows easy reuse and reference of the validator.

LANGUAGE: javascript
CODE:
(Handsontable => {
  function customValidator(query, callback) {
    // ...your custom logic of the validator

    callback(/* Pass `true` or `false` based on your logic */);
  }

  // Register an alias
  Handsontable.validators.registerValidator('my.custom', customValidator);

})(Handsontable);

----------------------------------------

TITLE: Blocking Row Creation with beforeCreateRow Hook in React
DESCRIPTION: Example of using the beforeCreateRow hook in a React component to conditionally block row creation based on a HyperFormula engine check.

LANGUAGE: jsx
CODE:
<HotTable
  beforeCreateRow={(row, amount) => {
    if (!hyperFormula.isItPossibleToAddRows(0, [row, amount])) {
      return false;
    }
}}/>

----------------------------------------

TITLE: Defining a Custom Plugin Class in JavaScript
DESCRIPTION: Create a custom plugin by extending the BasePlugin class and implementing necessary methods and properties.

LANGUAGE: javascript
CODE:
export class CustomPlugin extends BasePlugin {
  static get PLUGIN_KEY() {
    return 'customPlugin';
  }

  static get SETTING_KEYS() {
    return true;
  }

  constructor(hotInstance) {
    super(hotInstance);
    this.configuration = {
      enabled: false,
      msg: ''
    };
  }

  getUnifiedConfig() {
    const pluginSettings = this.hot.getSettings()[CustomPlugin.PLUGIN_KEY];
    // ... configuration logic ...
  }

  isEnabled() {
    const pluginSettings = this.getUnifiedConfig();
    return pluginSettings.enabled;
  }

  enablePlugin() {
    this.configuration = this.getUnifiedConfig();
    this.addHook('afterChange', (changes, source) => this.onAfterChange(changes, source));
    super.enablePlugin();
  }

  disablePlugin() {
    this.configuration = null;
    super.disablePlugin();
  }

  updatePlugin() {
    // ... update logic ...
    super.updatePlugin();
  }

  externalMethodExample() {
    // Method definition
  }

  onAfterChange(changes, source) {
    console.log(
      `${CustomPlugin.PLUGIN_KEY}.onAfterChange - ${this.configuration.msg}`,
      changes,
      source
    );
  }

  destroy() {
    super.destroy();
  }
}

----------------------------------------

TITLE: Initializing Handsontable Grid
DESCRIPTION: JavaScript code to initialize a Handsontable grid with sample data and basic configuration.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example');

const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ],
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  autoWrapRow: true,
  autoWrapCol: true,
  licenseKey: 'non-commercial-and-evaluation' // for non-commercial use only
});

----------------------------------------

TITLE: Implementing Ajax-based Autocomplete in JavaScript/TypeScript
DESCRIPTION: Example showing how to implement autocomplete with Ajax data loading. Demonstrates asynchronous data fetching and callback handling for remote data sources.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example3');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 2),
  colHeaders: true,
  rowHeaders: true,
  height: 'auto',
  columns: [
    {
      type: 'autocomplete',
      source: function(query, callback) {
        fetch('https://example.com/cars?query=' + query)
          .then(response => response.json())
          .then(data => callback(data));
      },
      strict: true,
      allowInvalid: false
    }
  ],
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Configuring Row Virtualization in Handsontable
DESCRIPTION: This example demonstrates how to set up a Handsontable instance with 1 million cells (1000 rows x 1000 columns) using row virtualization. It includes configuration for container dimensions and data generation.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable';
import 'handsontable/dist/handsontable.full.min.css';

const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(1000, 1000),
  height: 400,
  width: '100%',
  rowHeaders: true,
  colHeaders: true,
  licenseKey: 'non-commercial-and-evaluation'
});

LANGUAGE: typescript
CODE:
import Handsontable from 'handsontable';
import 'handsontable/dist/handsontable.full.min.css';

const container: HTMLElement | null = document.querySelector('#example1');
const hot: Handsontable = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(1000, 1000),
  height: 400,
  width: '100%',
  rowHeaders: true,
  colHeaders: true,
  licenseKey: 'non-commercial-and-evaluation'
});

LANGUAGE: jsx
CODE:
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

export const ExampleComponent = () => {
  return (
    <HotTable
      data={Handsontable.helper.createSpreadsheetData(1000, 1000)}
      height={400}
      width="100%"
      rowHeaders={true}
      colHeaders={true}
      licenseKey="non-commercial-and-evaluation"
    />
  );
};

LANGUAGE: tsx
CODE:
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

export const ExampleComponent = () => {
  return (
    <HotTable
      data={Handsontable.helper.createSpreadsheetData(1000, 1000)}
      height={400}
      width="100%"
      rowHeaders={true}
      colHeaders={true}
      licenseKey="non-commercial-and-evaluation"
    />
  );
};

----------------------------------------

TITLE: Dynamic Column Configuration with Functions
DESCRIPTION: Demonstrates using functions for column configuration to achieve more dynamic data binding behavior.



----------------------------------------

TITLE: JavaScript Data Grid Local Saving Example
DESCRIPTION: Example showing how to save data after changes using fetch API and the afterChange hook. Includes HTML template setup and JavaScript implementation.

LANGUAGE: html
CODE:
<div id="example1"></div>

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ],
  height: 'auto',
  width: 'auto',
  rowHeaders: true,
  colHeaders: true,
  afterChange: function(change, source) {
    if (source === 'loadData') {
      return;
    }

    fetch('https://fake-api.com/save', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ change })
    })
    .then(response => response.json())
    .then(data => {
      console.log('Success:', data);
    })
    .catch((error) => {
      console.error('Error:', error);
    });
  }
});

----------------------------------------

TITLE: Registering a Custom Cell Renderer in JavaScript
DESCRIPTION: This snippet demonstrates how to create and register a custom cell renderer function in Handsontable using JavaScript. It includes applying the BaseRenderer and registering the renderer with a custom alias.

LANGUAGE: javascript
CODE:
function customRenderer(hotInstance, td, row, column, prop, value, cellProperties) {
  // Optionally include `BaseRenderer` which is responsible for
  // adding/removing CSS classes to/from the table cells.
  Handsontable.renderers.BaseRenderer.apply(this, arguments);

  // ...your custom logic of the renderer
}

// Register an alias
Handsontable.renderers.registerRenderer('my.custom', customRenderer);

----------------------------------------

TITLE: Configuring Formulas Plugin in JavaScript
DESCRIPTION: Basic configuration of the Formulas plugin in Handsontable with HyperFormula engine

LANGUAGE: javascript
CODE:
{
  formulas: {
    engine: HyperFormula,
    // [plugin configuration]
  }
}

----------------------------------------

TITLE: Initializing Handsontable in React
DESCRIPTION: This snippet shows how to integrate Handsontable with a React application. It includes the necessary HTML, CSS, and JSX code for creating a Handsontable component in React.

LANGUAGE: html
CODE:
@[code](@/content/guides/getting-started/demo/react/example2.html)

LANGUAGE: css
CODE:
@[code](@/content/guides/getting-started/demo/react/example2.css)

LANGUAGE: jsx
CODE:
@[code](@/content/guides/getting-started/demo/react/example2.jsx)

----------------------------------------

TITLE: Implementing HotTable with Instance Methods in React
DESCRIPTION: This code snippet shows how to create a React component that renders a HotTable and provides access to its instance methods. It demonstrates selecting cells programmatically using the Handsontable API.

LANGUAGE: jsx
CODE:
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

export const ExampleComponent = () => {
  const hotRef = useRef(null);

  const handleClick = () => {
    // Get the Handsontable instance
    const hot = hotRef.current.hotInstance;

    // Call the selectCell method
    hot.selectCell(1, 1, 3, 3, true);
  };

  return (
    <div className="controls">
      <HotTable
        ref={hotRef}
        data={[
          ['A1', 'B1', 'C1', 'D1'],
          ['A2', 'B2', 'C2', 'D2'],
          ['A3', 'B3', 'C3', 'D3'],
          ['A4', 'B4', 'C4', 'D4'],
        ]}
        colHeaders={true}
        rowHeaders={true}
        height="auto"
        licenseKey="non-commercial-and-evaluation"
      />
      <button onClick={handleClick}>Select cells programmatically</button>
    </div>
  );
};

----------------------------------------

TITLE: Installing Handsontable React Wrapper
DESCRIPTION: Command to install Handsontable and its React wrapper using npm. This is the first step in setting up Handsontable in a React project.

LANGUAGE: bash
CODE:
npm install handsontable @handsontable/react

----------------------------------------

TITLE: Complete CDN-based Handsontable Setup
DESCRIPTION: Complete HTML document showing how to set up Handsontable using CDN links, including required stylesheets and initialization code.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Handsontable - JavaScript Data Grid Example</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/handsontable/styles/handsontable.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/handsontable/styles/ht-theme-main.min.css"
    />
  </head>
  <body>
    <div id="handsontable-grid" class="ht-theme-main-dark-auto"></div>
    <script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
    <script>
      const element = document.getElementById("handsontable-grid");

      new Handsontable(element, {
        data: [
          { company: "Tagcat", country: "United Kingdom", rating: 4.4 },
          { company: "Zoomzone", country: "Japan", rating: 4.5 },
          { company: "Meeveo", country: "United States", rating: 4.6 },
        ],
        columns: [
          { data: "company", title: "Company", width: 100 },
          { data: "country", title: "Country", width: 170, type: "dropdown", source: ["United Kingdom", "Japan", "United States"] },
          { data: "rating", title: "Rating", width: 100, type: "numeric" },
        ],
        rowHeaders: true,
        navigableHeaders: true,
        tabNavigation: true,
        multiColumnSorting: true,
        headerClassName: "htLeft",
        licenseKey: "non-commercial-and-evaluation",
      });
    </script>
  </body>
</html>

----------------------------------------

TITLE: Using a Custom Plugin in Handsontable (JavaScript)
DESCRIPTION: Initialize Handsontable with the custom plugin and configure its options.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable';
import { CustomPlugin } from './customPlugin';

const hotInstance = new Handsontable(container, {
  [CustomPlugin.PLUGIN_KEY]: true,
  // or
  [CustomPlugin.PLUGIN_KEY]: {
    msg: 'user-defined message',
  },
  // or
  [CustomPlugin.PLUGIN_KEY]: false,
});

----------------------------------------

TITLE: Complete Handsontable Module Integration in Vue 3
DESCRIPTION: A comprehensive example demonstrating the full integration of Handsontable modules in a Vue 3 application. This includes importing the base module, optional modules, registering them, and setting up the Vue app.

LANGUAGE: javascript
CODE:
import { createApp } from 'vue';
import App from './App.vue';
import router from './router';

import Handsontable from 'handsontable/base';

import {
  registerCellType,
  NumericCellType,
} from 'handsontable/cellTypes';

import {
  registerPlugin,
  UndoRedo,
} from 'handsontable/plugins';

registerCellType(NumericCellType);
registerPlugin(UndoRedo);

createApp(App).use(router).mount('#app');

----------------------------------------

TITLE: Enabling Copy and Cut in Handsontable Context Menu
DESCRIPTION: This snippet demonstrates how to enable copy and cut operations in the Handsontable context menu. It initializes a Handsontable instance with sample data and configures the context menu to include copy and cut options.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ],
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation',
  contextMenu: true
});

----------------------------------------

TITLE: Configuring Angular Module for Handsontable
DESCRIPTION: Angular module setup with necessary Handsontable imports and registrations for module functionality

LANGUAGE: javascript
CODE:
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import { HotTableModule } from '@handsontable/angular';
import { registerAllModules } from 'handsontable/registry';

// register Handsontable's modules
registerAllModules();

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    HotTableModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

----------------------------------------

TITLE: Implementing Select Cell Type in React (JSX)
DESCRIPTION: This React JSX snippet demonstrates how to use the HotTable component from @handsontable/react to create a table with select cell type. It defines settings including data, headers, and column configurations.

LANGUAGE: jsx
CODE:
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

const ExampleComponent = () => {
  return (
    <HotTable
      data={[
        ['2017', 'Honda', 10],
        ['2018', 'Toyota', 20],
        ['2019', 'Nissan', 30]
      ]}
      colHeaders={['Year', 'Car', 'Available']}
      columns={[
        { type: 'numeric' },
        {
          type: 'select',
          selectOptions: ['Kia', 'Nissan', 'Toyota', 'Honda']
        },
        {}
      ]}
      licenseKey="non-commercial-and-evaluation"
    />
  );
};

export default ExampleComponent;

----------------------------------------

TITLE: Setting Constant Grid Dimensions in JavaScript
DESCRIPTION: Configures fixed column widths and row heights in Handsontable to avoid dynamic size calculations, improving performance.

LANGUAGE: javascript
CODE:
const hot = new Handsontable(obj, {
  colWidths: [50, 150, 45],
  rowHeights: [40, 40, 40, 40],
});

----------------------------------------

TITLE: Initializing Handsontable with Autofill in All Directions
DESCRIPTION: This snippet demonstrates how to initialize Handsontable with autofill enabled in all directions. It includes configuration for the container, data, and specific autofill settings.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ],
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  autoWrapRow: true,
  autoWrapCol: true,
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Retrieving Selected Data in Handsontable
DESCRIPTION: This example shows how to retrieve data from selected cells using the getSelected() and getSelectedRange() methods in Handsontable.

LANGUAGE: html
CODE:
<div id="example2"></div>
<div>
  <button id="getSelected">Get selected</button>
  <button id="getSelectedRange">Get selected range</button>
</div>
<pre id="output"></pre>

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example2');
const output = document.querySelector('#output');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 5),
  width: '100%',
  height: 'auto',
  rowHeaders: true,
  colHeaders: true,
  licenseKey: 'non-commercial-and-evaluation'
});

document.querySelector('#getSelected').addEventListener('click', () => {
  output.innerText = JSON.stringify(hot.getSelected());
});

document.querySelector('#getSelectedRange').addEventListener('click', () => {
  output.innerText = JSON.stringify(hot.getSelectedRange());
});

----------------------------------------

TITLE: Configuring Selection Modes in Handsontable
DESCRIPTION: This example demonstrates how to set up different selection modes in Handsontable, including single cell, range, and multiple selection.

LANGUAGE: html
CODE:
<div id="example1"></div>
<div id="output"></div>

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const output = document.querySelector('#output');

const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 5),
  width: '100%',
  height: 'auto',
  rowHeaders: true,
  colHeaders: true,
  licenseKey: 'non-commercial-and-evaluation',
  selectionMode: 'multiple', // try changing this to 'single' or 'range'
});

hot.addHook('afterSelection', (row, column, row2, column2) => {
  output.textContent = `Selection: [${row}, ${column}, ${row2}, ${column2}]`;
});

----------------------------------------

TITLE: Basic Cell Merging Configuration in JavaScript/TypeScript
DESCRIPTION: Demonstrates how to initialize Handsontable with predefined merged cells by setting the mergeCells option to an array containing merge specifications.

LANGUAGE: javascript
CODE:
mergeCells: [{ row: 1, col: 1, rowspan: 2, colspan: 2 }]

----------------------------------------

TITLE: Configuring Numeric Cell Type in JavaScript/TypeScript
DESCRIPTION: Examples of setting up numeric cell type configuration at different levels - grid-wide, column-specific, and cell-specific.

LANGUAGE: javascript
CODE:
// set the numeric cell type for each cell of the entire grid
type: 'numeric',

// set the numeric cell type for each cell of a single column
columns: [
  {
    type: 'numeric',
  },
]

// set the numeric cell type for a single cell
cell: [
  {
    row: 0,
    col: 0,
    type: 'numeric',
  }
],

----------------------------------------

TITLE: Configuring Custom Attributes for Vue 3 HotTable Component
DESCRIPTION: This example shows how to pass custom ID, class, and style attributes to the HotTable component in Vue 3. It demonstrates setting a custom ID, applying CSS classes, and defining inline styles for the data grid.

LANGUAGE: html
CODE:
<div id="example1">
  <hot-table
    :settings="hotSettings"
    id="my-custom-id"
    class="custom-table-class"
    style="font-size: 14px;"
  >
  </hot-table>
</div>

LANGUAGE: javascript
CODE:
import { HotTable } from '@handsontable/vue3';
import { createApp } from 'vue';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

const app = createApp({
  data() {
    return {
      hotSettings: {
        data: [
          ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
          ['2019', 10, 11, 12, 13],
          ['2020', 20, 11, 14, 13],
          ['2021', 30, 15, 12, 13]
        ],
        colHeaders: true,
        rowHeaders: true,
        height: 'auto',
        licenseKey: 'non-commercial-and-evaluation'
      }
    };
  }
});

app.component('HotTable', HotTable);

app.mount('#example1');

----------------------------------------

TITLE: Implementing Custom Editor in Angular for Handsontable
DESCRIPTION: This example shows how to create a custom cell editor for Handsontable in an Angular application. It includes both the HTML template and TypeScript code for the component.

LANGUAGE: html
CODE:
<hot-table [data]="dataset" [colHeaders]="true" [rowHeaders]="true" [height]="'auto'" [licenseKey]="'non-commercial-and-evaluation'">
  <hot-column data="id" [readOnly]="true" title="ID"></hot-column>
  <hot-column data="name" title="Full name"></hot-column>
  <hot-column data="address" title="Street name" [editor]="customEditor"></hot-column>
</hot-table>

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import Handsontable from 'handsontable';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
})
export class AppComponent {
  dataset: any[] = [
    { id: 1, name: 'Ted Right', address: '' },
    { id: 2, name: 'Frank Honest', address: '' },
    { id: 3, name: 'Joan Well', address: '' },
    { id: 4, name: 'Gail Polite', address: '' },
    { id: 5, name: 'Michael Fair', address: '' },
  ];

  customEditor = CustomEditor;
}

class CustomEditor extends Handsontable.editors.TextEditor {
  constructor(props) {
    super(props);
  }

  createElements() {
    super.createElements();

    this.TEXTAREA = document.createElement('input');
    this.TEXTAREA.setAttribute('placeholder', 'Custom placeholder');
    this.TEXTAREA.setAttribute('data-hot-input', 'true');
    this.textareaStyle = this.TEXTAREA.style;
    this.TEXTAREA_PARENT.innerText = '';
    this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
  }
}

----------------------------------------

TITLE: Implementing Custom Editor in Vue 2 Handsontable Template
DESCRIPTION: HTML template for a Vue 2 component using Handsontable with a custom editor. It sets up the HotTable component with various options including the custom editor.

LANGUAGE: html
CODE:
<div id="example1">
  <hot-table :settings="hotSettings"></hot-table>
</div>

----------------------------------------

TITLE: Basic Handsontable Vue 3 Component Implementation
DESCRIPTION: Example showing how to set up a basic Handsontable component in a Vue 3 application, including necessary imports, component registration, and data configuration. Demonstrates usage of the HotTable component with basic row and column headers.

LANGUAGE: javascript
CODE:
<template>
  <div class="ht-theme-main-dark-auto">
    <hot-table :data="data" :rowHeaders="true" :colHeaders="true"></hot-table>
  </div>
</template>

<script>
  import { defineComponent } from 'vue';
  import { HotTable } from '@handsontable/vue3';
  import { registerAllModules } from 'handsontable/registry';
  import 'handsontable/styles/handsontable.min.css';
  import 'handsontable/styles/ht-theme-main.min.css';

  // register Handsontable's modules
  registerAllModules();

  export default defineComponent({
    data() {
      return {
        data: [
          ['', 'Ford', 'Volvo', 'Toyota', 'Honda'],
          ['2016', 10, 11, 12, 13],
          ['2017', 20, 11, 14, 13],
          ['2018', 30, 15, 12, 13]
        ],
      };
    },
    components: {
      HotTable,
    }
  });
</script>

----------------------------------------

TITLE: Batch Operations for Suspended Rendering
DESCRIPTION: Demonstrates how to batch multiple operations to suspend rendering until all operations are complete, reducing unnecessary re-renders.

LANGUAGE: javascript
CODE:
hot.batch(() => {
  hot.alter('insert_row_above', 5, 45);
  hot.setDataAtCell(1, 1, 'x');

  const filters = hot.getPlugin('filters');

  filters.addCondition(2, 'contains', ['3']);
  filters.filter();
  hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });
  // The table cache will be recalculated and table render will be called once after executing the callback
});

----------------------------------------

TITLE: Setting Grid Size in React Component
DESCRIPTION: Shows how to set the width and height of a Handsontable grid using the HotTable React component. Includes examples of pixel values, percentages, and numeric values.

LANGUAGE: jsx
CODE:
<HotTable height={100} width={100} />

LANGUAGE: jsx
CODE:
<HotTable height="75%" width="75%" />

LANGUAGE: jsx
CODE:
<HotTable height="100px" width="100px" />

----------------------------------------

TITLE: Object Data Binding with HotColumn
DESCRIPTION: Shows how to bind object-based data to columns using the HotColumn component's data prop. Demonstrates proper data structure referencing for object-based data sources.

LANGUAGE: jsx
CODE:
import { HotTable, HotColumn } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.css';

registerAllModules();

export const ExampleComponent = () => {
  return (
    <HotTable
      data={[
        { id: 1, name: 'John', address: 'Street Name 1' },
        { id: 2, name: 'Alice', address: 'Street Name 2' },
        { id: 3, name: 'Bob', address: 'Street Name 3' }
      ]}
      height={100}
      colHeaders={true}
      licenseKey="non-commercial-and-evaluation">
      <HotColumn data="id" title="ID" />
      <HotColumn data="name" title="Name" />
      <HotColumn data="address" title="Address" />
    </HotTable>
  );
};

----------------------------------------

TITLE: Using afterCreateRow Hook in React
DESCRIPTION: Demonstrates how to use the afterCreateRow hook in a React component to log information about newly created rows.

LANGUAGE: jsx
CODE:
<HotTable afterCreateRow={(row, amount) => {
  console.log(`${amount} row(s) were created, starting at index ${row}`);
}}/>

----------------------------------------

TITLE: Comprehensive Batch Operation - JavaScript
DESCRIPTION: Shows a more complex example combining multiple operations including filtering and sorting within a single batch operation.

LANGUAGE: javascript
CODE:
hot.batch(() => {
  hot.alter('insert_row_above', 5, 45);
  hot.setDataAtCell(1, 1, 'x');

  const filters = hot.getPlugin('filters');

  filters.addCondition(2, 'contains', ['3']);
  filters.filter();
  hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });
});

----------------------------------------

TITLE: Using sorting hooks in React
DESCRIPTION: Implement custom logic before or after sorting using Handsontable hooks in a React component.

LANGUAGE: jsx
CODE:
<HotTable
  beforeColumnSort={
    // add your code here
    return false; // to block front-end sorting
  }
  afterColumnSort={
    // add your code here
  }
/>

----------------------------------------

TITLE: Setting initial sort order for multiple columns in React
DESCRIPTION: Set an initial sort order for multiple columns in a React component using the initialConfig prop.

LANGUAGE: jsx
CODE:
<HotTable
  // enable sorting by multiple columns
  multiColumnSorting={{
    initialConfig: [
      // at initialization, sort data by the first column, in ascending order
      {
        column: 0,
        sortOrder: 'asc',
      },
      // at initialization, sort data by the second column, in descending order
      {
        column: 1,
        sortOrder: 'desc',
      },
    ],
  }}
/>

----------------------------------------

TITLE: Enabling sorting for all columns in React
DESCRIPTION: Enable sorting for all columns in a React component by setting the columnSorting prop to true.

LANGUAGE: jsx
CODE:
<HotTable
  // enable sorting for all columns
  columnSorting={true}
/>

----------------------------------------

TITLE: Setting Column-specific Options
DESCRIPTION: Example showing how to configure individual columns using the columns option

LANGUAGE: javascript
CODE:
const hot = new Handsontable(container, {
  columns: [
    {},
    {},
    {
      readOnly: true,
    },
  ],
});

----------------------------------------

TITLE: Setting RTL Layout Direction in Handsontable
DESCRIPTION: Demonstrates how to explicitly set Handsontable's layout direction to RTL, regardless of the HTML document's 'dir' attribute.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable';
import 'handsontable/dist/handsontable.full.min.css';

const container = document.querySelector('#example3');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  layoutDirection: 'rtl',
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Initializing Handsontable with Password Cell Type
DESCRIPTION: This snippet demonstrates how to initialize Handsontable with a password cell type. The password cell type masks the entered values with asterisks while storing the actual data as plain text.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: [
    ['Joe'],
    ['Timothy'],
    ['Margaret'],
    ['Jerry'],
  ],
  colHeaders: true,
  rowHeaders: true,
  height: 'auto',
  columns: [
    {
      type: 'password',
    },
  ],
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Setting Invalid Cell Class Name in React Handsontable
DESCRIPTION: Shows how to set custom class names for invalid cells in a React Handsontable component. This can be done for specific columns using JSX.

LANGUAGE: jsx
CODE:
columns={[
  { data: 'firstName', invalidCellClassName: 'myInvalidClass' },
  { data: 'lastName', invalidCellClassName: 'myInvalidSecondClass' },
  { data: 'address' }
]}

----------------------------------------

TITLE: Applying Custom CSS Classes in Handsontable
DESCRIPTION: This example demonstrates how to add custom CSS classes to cells and table headers in Handsontable. It uses the 'cells' and 'afterGetColumnHeaderRenderers' hooks to apply the classes.

LANGUAGE: css
CODE:
.custom-cell {
  background: yellow;
  color: red;
}

.custom-table {
  font-size: 16px;
  background: #EEE;
  font-weight: bold;
}

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 5),
  colHeaders: true,
  rowHeaders: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation',
  cells(row, col) {
    const cellProperties = {};
    if (row === 0 && col === 0) {
      cellProperties.className = 'custom-cell';
    }
    return cellProperties;
  },
  afterGetColumnHeaderRenderers(array) {
    array.push((index, TH) => {
      TH.className = 'custom-table';
    });
  }
});

----------------------------------------

TITLE: Exporting Handsontable Grid to CSV Blob in JavaScript
DESCRIPTION: This example shows how to export a Handsontable grid's data as a JavaScript Blob object in CSV format. It creates a basic grid and logs the exported Blob to the console when a button is clicked.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example2');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ],
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  width: '100%',
  licenseKey: 'non-commercial-and-evaluation'
});

const exportPlugin = hot.getPlugin('exportFile');

const exportBtn = document.querySelector('#export-blob');

exportBtn.addEventListener('click', () => {
  const blob = exportPlugin.exportAsBlob('csv', {
    bom: false,
    columnDelimiter: ',',
    columnHeaders: false,
    exportHiddenColumns: true,
    exportHiddenRows: true,
    mimeType: 'text/csv',
    rowDelimiter: '\r\n',
    rowHeaders: true
  });

  console.log(blob);
});

----------------------------------------

TITLE: Implementing Select Cell Type in JavaScript
DESCRIPTION: This snippet demonstrates how to set up a Handsontable instance with select cell type. It defines data, headers, and column settings including the select options.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: [
    ['2017', 'Honda', 10],
    ['2018', 'Toyota', 20],
    ['2019', 'Nissan', 30]
  ],
  colHeaders: ['Year', 'Car', 'Available'],
  columns: [
    {
      type: 'numeric'
    },
    {
      type: 'select',
      selectOptions: ['Kia', 'Nissan', 'Toyota', 'Honda']
    },
    {}
  ],
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Rendering Custom HTML in Cells with React
DESCRIPTION: This snippet demonstrates how to use custom cell renderers to display HTML content in cells using React. It includes examples of built-in HTML renderers and a custom safe HTML renderer.

LANGUAGE: jsx
CODE:
<HotTable
  data={someData}
  columns={[
    { title: 'Title', renderer: 'html' },
    { title: 'Description', renderer: 'html' },
    { title: 'Comments', renderer: safeHtmlRenderer },
    { title: 'Cover', renderer: (hot, td, row, col, prop, value) => {
      const img = document.createElement('img');
      img.src = value;
      td.innerHTML = '';
      td.appendChild(img);
    }}
  ]}
/>

----------------------------------------

TITLE: Basic Column Settings in Vue 3 Data Grid
DESCRIPTION: Example demonstrating how to declare basic column settings using the hot-column component properties in Vue 3.

LANGUAGE: html
CODE:
<template>
  <HotTable :data="hotData" :rowHeaders="true" :colHeaders="true" licenseKey="non-commercial-and-evaluation">
    <HotColumn title="First column" :readOnly="true" />
    <HotColumn title="Second column" />
    <HotColumn title="Third column" />
  </HotTable>
</template>

LANGUAGE: javascript
CODE:
import { HotTable, HotColumn } from '@handsontable/vue3';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.css';

registerAllModules();

export default {
  name: 'Basic-example',
  data() {
    return {
      hotData: [
        ['A1', 'B1', 'C1'],
        ['A2', 'B2', 'C2'],
        ['A3', 'B3', 'C3'],
        ['A4', 'B4', 'C4']
      ]
    };
  },
  components: {
    HotTable,
    HotColumn
  }
};

----------------------------------------

TITLE: Implementing Row Pre-populating in React (TSX)
DESCRIPTION: This React TSX snippet demonstrates how to implement row pre-populating in a Handsontable data grid using TypeScript within a React component. It utilizes the HotTable component and defines custom cell properties and hooks with proper type annotations.

LANGUAGE: tsx
CODE:
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import { CellProperties, ChangeSource } from 'handsontable/settings';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

const ExampleComponent: React.FC = () => {
  const data: (string | number)[][] = [
    ['', 'Tesla', 'Mercedes', 'Toyota', 'Volvo'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ];
  const initialRowCount: number = data.length;

  const firstRowRenderer = (instance: Handsontable, td: HTMLTableCellElement, row: number, col: number, prop: string | number, value: any, cellProperties: CellProperties): void => {
    Handsontable.renderers.TextRenderer.apply(this, arguments);

    td.style.color = '#999';

    if (col === 0 && value === '') {
      td.textContent = 'Click to add a new row';
    }
  };

  return (
    <HotTable
      data={data}
      rowHeaders={true}
      colHeaders={true}
      height="auto"
      minSpareRows={1}
      licenseKey="non-commercial-and-evaluation"
      cells={(row: number, col: number): CellProperties => {
        const cellProperties: CellProperties = {};
        const visualRowIndex = this.instance.toVisualRow(row);

        if (visualRowIndex >= initialRowCount) {
          cellProperties.renderer = firstRowRenderer;
        }

        return cellProperties;
      }}
      beforeChange={(changes: [number, string | number, string | number, string | number][], source: ChangeSource): void => {
        let rowToPopulate: number | null = null;

        changes.forEach((change) => {
          const [row, prop, oldValue, newValue] = change;

          if (oldValue === '' && newValue !== '') {
            rowToPopulate = row;
          }
        });

        if (rowToPopulate !== null) {
          const sourceData = this.hotInstance.getSourceData();

          if (sourceData && sourceData[rowToPopulate]) {
            sourceData[rowToPopulate] = ['', 'BMW', 'Chrysler', 'Nissan', 'Suzuki'];
          }
        }
      }}
    />
  );
};

export default ExampleComponent;

----------------------------------------

TITLE: Implementing Header Tooltips in JavaScript
DESCRIPTION: Example of how to implement header tooltips functionality in Handsontable 9.0 using JavaScript, replacing the removed Header Tooltips plugin. It uses afterGetColHeader and afterGetRowHeader hooks.

LANGUAGE: javascript
CODE:
const onAfterGetHeader = function(index, TH) {
  TH.setAttribute('title', TH.querySelector('span').textContent);
};

const example = document.querySelector('#tooltip-example');
const hot = new Handsontable(example, {
  data: [
    ['A1', 'B1', 'C1'],
    ['A2', 'B2', 'C2'],
    ['A3', 'B3', 'C3'],
  ],
  rowHeights: 23,
  autoColumnSize: true,
  rowHeaders: ['1st', '2nd', '3rd'],
  colHeaders: ['First Column', 'Second Column', 'Third Column'],
  licenseKey: 'non-commercial-and-evaluation',
  afterGetColHeader: onAfterGetHeader,
  afterGetRowHeader: onAfterGetHeader
});

----------------------------------------

TITLE: Disabling DOM Virtualization for Improved Accessibility in JavaScript
DESCRIPTION: This code snippet demonstrates how to disable column and row virtualization in Handsontable to improve accessibility by loading all grid elements into the browser, creating a complete Accessibility tree.

LANGUAGE: javascript
CODE:
const hot = new Handsontable(container, {
  // disable column virtualization
  renderAllColumns: true,
  // disable row virtualization
  renderAllRows: true,
});

----------------------------------------

TITLE: Checkbox with Labels Implementation
DESCRIPTION: Demonstrates how to add labels to checkboxes using the label property. Shows configuration for label position and data source.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example3');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Nissan', 'Toyota', 'Honda', 'Mazda', 'Ford'],
    ['2017', false, false, false, false, false, false],
    ['2018', false, false, false, false, false, false],
    ['2019', false, false, false, false, false, false],
    ['2020', false, false, false, false, false, false]
  ],
  colHeaders: true,
  rowHeaders: true,
  height: 'auto',
  columns: [
    {},
    { type: 'checkbox', label: { position: 'before', property: '0' } },
    { type: 'checkbox', label: { position: 'after', property: 'checkedTemplate' } },
    { type: 'checkbox', label: { position: 'after', value: 'My label:' } },
    { type: 'checkbox', label: { position: 'before', property: '0', value: 'My label:' } },
    { type: 'checkbox', label: { position: 'after' } },
    { type: 'checkbox', label: { position: 'before' } }
  ],
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Optimized Merged Cells Configuration with Virtualization
DESCRIPTION: Shows how to enable virtualization for improved performance when dealing with large merged cell ranges. Includes configuration for buffer rendering thresholds.

LANGUAGE: javascript
CODE:
mergeCells: {
  virtualized: true,
  cells: [{ row: 1, col: 1, rowspan: 200, colspan: 2 }]
}

----------------------------------------

TITLE: React Column Summary Implementation
DESCRIPTION: Example showing how to implement column summaries in a React component using the Handsontable React wrapper.

LANGUAGE: jsx
CODE:
import { HotTable } from '@handsontable/react-wrapper';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/styles/handsontable.css';
import 'handsontable/styles/ht-theme-main.css';

registerAllModules();

const ExampleComponent = () => {
  return (
    <HotTable
      autoWrapRow={true}
      autoWrapCol={true}
      licenseKey="non-commercial-and-evaluation"
      data={[
        [1, 2, 3, 4, 5],
        [6, 7, 8, 9, 10],
        [11, 12, 13, 14, 15]
      ]}
      colHeaders={true}
      rowHeaders={true}
      columnSummary={[
        {},
        {}
      ]}
    />
  );
};

----------------------------------------

TITLE: Implementing Select Cell Type in TypeScript
DESCRIPTION: This TypeScript snippet sets up a Handsontable instance with select cell type. It defines data, headers, and column settings including the select options, with proper type annotations.

LANGUAGE: typescript
CODE:
const container = document.querySelector<HTMLDivElement>('#example1');

if (container) {
  const hot = new Handsontable(container, {
    data: [
      ['2017', 'Honda', 10],
      ['2018', 'Toyota', 20],
      ['2019', 'Nissan', 30]
    ],
    colHeaders: ['Year', 'Car', 'Available'],
    columns: [
      {
        type: 'numeric'
      },
      {
        type: 'select',
        selectOptions: ['Kia', 'Nissan', 'Toyota', 'Honda']
      },
      {}
    ],
    licenseKey: 'non-commercial-and-evaluation'
  });
}

----------------------------------------

TITLE: Binding Array of Arrays in Handsontable
DESCRIPTION: Demonstrates how to bind a simple array of arrays data structure to Handsontable for grid-like scenarios with user manipulation capabilities.



----------------------------------------

TITLE: Configuring Numeric Cell Type in React
DESCRIPTION: React-specific implementation of numeric cell type configuration for Handsontable components.

LANGUAGE: jsx
CODE:
// set the numeric cell type for each cell of the entire grid
type={'numeric'},

// set the numeric cell type for each cell of a single column
columns={[{
  type: 'numeric',
}]}

// set the numeric cell type for a single cell
cell={[{
  row: 0,
  col: 0,
  type: 'numeric',
}]}

----------------------------------------

TITLE: Enabling User-Triggered Column Freezing in JavaScript
DESCRIPTION: This example shows how to enable manual column freezing in Handsontable by setting the manualColumnFreeze option to true. This allows users to freeze and unfreeze columns using the grid's context menu.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable';
import 'handsontable/dist/handsontable.full.min.css';

const container = document.querySelector('#example2');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colHeaders: true,
  rowHeaders: true,
  contextMenu: true,
  manualColumnFreeze: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Stretching Only the Last Column in Handsontable
DESCRIPTION: This example shows how to set fixed widths for the first three columns and automatically fill the remaining space with the last column using the 'stretchH' option set to 'last'.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example6');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 4),
  colHeaders: true,
  colWidths: [80, 80, 80],
  stretchH: 'last',
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

LANGUAGE: typescript
CODE:
const container = document.querySelector('#example6');
const hot = new Handsontable(container as HTMLElement, {
  data: Handsontable.helper.createSpreadsheetData(5, 4),
  colHeaders: true,
  colWidths: [80, 80, 80],
  stretchH: 'last',
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Enabling Row Moving in JavaScript/TypeScript Handsontable
DESCRIPTION: This snippet demonstrates how to enable row moving in a Handsontable instance using JavaScript or TypeScript. It sets up a basic table with the manualRowMove option enabled.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  width: '100%',
  height: 320,
  rowHeaders: true,
  colHeaders: true,
  colWidths: 100,
  manualRowMove: true,
  licenseKey: 'non-commercial-and-evaluation'
});

LANGUAGE: typescript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container as HTMLElement, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  width: '100%',
  height: 320,
  rowHeaders: true,
  colHeaders: true,
  colWidths: 100,
  manualRowMove: true,
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Implementing Read-only Grid in JavaScript/TypeScript
DESCRIPTION: Configuration example showing how to make an entire Handsontable grid read-only using the readOnly option. This prevents editing while allowing navigation and data copying.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ],
  readOnly: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Using Custom Cell Type in React Handsontable Configuration
DESCRIPTION: This code snippet demonstrates how to use a custom cell type in React Handsontable configuration for a specific column.

LANGUAGE: jsx
CODE:
<HotTable
  columns={[{
    type: 'my.custom'
  }]}
/>

----------------------------------------

TITLE: Blocking Row Creation with beforeCreateRow Hook in JavaScript
DESCRIPTION: Demonstrates using the beforeCreateRow hook in plain JavaScript to conditionally block row creation based on a HyperFormula engine check.

LANGUAGE: js
CODE:
hot.addHook('beforeCreateRow', (row, amount) => {
  if (!hyperFormula.isItPossibleToAddRows(0, [row, amount])) {
    return false;
  }
})

----------------------------------------

TITLE: Configuring Nested Headers in JavaScript/TypeScript
DESCRIPTION: Configuration example for creating nested column headers using the NestedHeaders plugin. Demonstrates how to specify column spans and labels across multiple header levels.

LANGUAGE: javascript
CODE:
nestedHeaders: [
  ['A', { label: 'B', colspan: 8 }, 'C'],
  ['D', { label: 'E', colspan: 4 }, { label: 'F', colspan: 4 }, 'G'],
  ['H', { label: 'I', colspan: 2 }, { label: 'J', colspan: 2 }, { label: 'K', colspan: 2 }, { label: 'L', colspan: 2 }, 'M'],
  ['N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W']
]

----------------------------------------

TITLE: Setting Column Widths Using an Array in Handsontable
DESCRIPTION: This example shows how to set widths for the first four columns using an array. Additional columns automatically adjust to content.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example2');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colWidths: [40, 50, 60, 70],
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  autoWrapRow: true,
  licenseKey: 'non-commercial-and-evaluation'
});

LANGUAGE: typescript
CODE:
const container = document.querySelector('#example2');
const hot = new Handsontable(container as HTMLElement, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colWidths: [40, 50, 60, 70],
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  autoWrapRow: true,
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Implementing Flexible Autocomplete Mode in JavaScript/TypeScript
DESCRIPTION: Example demonstrating the flexible autocomplete mode where users can select from suggestions or enter custom values. Shows basic configuration with predefined source data and cell type settings.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const data = [
  ['BMW', 'Tesla', 'Nissan', 'Volkswagen'],
  ['2017', '2018', '2019', '2020']
];

const hot = new Handsontable(container, {
  data: data,
  colHeaders: true,
  rowHeaders: true,
  height: 'auto',
  columns: [
    {
      type: 'autocomplete',
      source: ['BMW', 'Chrysler', 'Nissan', 'Suzuki', 'Toyota', 'Volvo']
    }
  ],
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Date Format Configuration in JavaScript
DESCRIPTION: Example of setting custom date format and correction options in JavaScript implementation.

LANGUAGE: javascript
CODE:
dateFormat: 'YYYY-MM-DD',

// default behavior
// date entered as `30/12/2022` will be invalid
correctFormat: false,

// date entered as `30/12/2022` will be corrected to `2022/12/30`
correctFormat: true,

----------------------------------------

TITLE: Enabling Basic Column Moving in JavaScript
DESCRIPTION: Basic example of enabling column moving functionality in Handsontable by setting the manualColumnMove option to true. This allows users to drag and drop columns to reorder them.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: [
    ['Tesla', 2017, 'black', 'black'],
    ['Nissan', 2018, 'blue', 'blue'],
    ['Chrysler', 2019, 'yellow', 'black'],
    ['Volvo', 2020, 'white', 'gray']
  ],
  colHeaders: true,
  manualColumnMove: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Customizing Column Menu in JavaScript/TypeScript
DESCRIPTION: Configure the DropdownMenu plugin with custom actions by setting the dropdownMenu option to an array of menu item configurations.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example2');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colHeaders: true,
  licenseKey: 'non-commercial-and-evaluation',
  dropdownMenu: ['clear_column', '---------', 'make_read_only', '---------', 'alignment'],
  height: 'auto'
});

LANGUAGE: typescript
CODE:
const container = document.querySelector('#example2');
const hot = new Handsontable(container as HTMLElement, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colHeaders: true,
  licenseKey: 'non-commercial-and-evaluation',
  dropdownMenu: ['clear_column', '---------', 'make_read_only', '---------', 'alignment'],
  height: 'auto'
});

----------------------------------------

TITLE: Setting Constant Column Width in Handsontable
DESCRIPTION: This example demonstrates how to set a constant width of 100px for all columns across the entire grid using the 'colWidths' option.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colWidths: 100,
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  autoWrapRow: true,
  licenseKey: 'non-commercial-and-evaluation'
});

LANGUAGE: typescript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container as HTMLElement, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colWidths: 100,
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  autoWrapRow: true,
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Loading Language Files in JavaScript (ES Modules)
DESCRIPTION: Demonstrates how to load and register a language dictionary using ES modules, then initialize Handsontable with the specified language.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable/base';
import { registerLanguageDictionary, deDE } from 'handsontable/i18n';

registerLanguageDictionary(deDE);

const hot = new Handsontable(container, {
  language: deDE.languageCode,
});

----------------------------------------

TITLE: Loading Language Files in HTML (UMD)
DESCRIPTION: Demonstrates how to load language files using script tags in HTML, then initialize Handsontable with the specified language.

LANGUAGE: html
CODE:
<script type="text/javascript" src="dist/handsontable.full.js"></script>
<script type="text/javascript" src="dist/languages/de-DE.js"></script>
<script>
  const hot = new Handsontable(container, {
    language: 'de-DE',
  });
</script>

----------------------------------------

TITLE: Configuring Translation Settings in Angular Component
DESCRIPTION: JavaScript/TypeScript component code that sets up translation settings for Handsontable. Includes configuration for language settings, data structure, and number formatting options.

LANGUAGE: javascript
CODE:
import { Component } from '@angular/core';
import { registerLanguageDictionary, zhCN } from 'handsontable/i18n';
import { languages } from 'numbro/languages';
import 'numbro/languages/zh-CN';

registerLanguageDictionary(zhCN);
languages()['zh-CN'].delimiters.thousands = ' ';

@Component({
  selector: 'app-demo',
  templateUrl: './example1.html'
})
export class AppComponent {
  hotSettings: any = {
    language: 'zh-CN',
    locale: 'zh-CN',
    data: [
      [1000, 2000, 3000, 4000],
      [5000, 6000, 7000, 8000],
      [9000, 1000, 1100, 1200]
    ],
    height: 'auto',
    licenseKey: 'non-commercial-and-evaluation'
  };
}

----------------------------------------

TITLE: Including Handsontable with Classic Styles
DESCRIPTION: Basic implementation of Handsontable using the classic styling approach. Includes both standard and minified versions of the full distribution files.

LANGUAGE: html
CODE:
<script src="dist/handsontable.full.js"></script>
<link href="dist/handsontable.full.css" rel="stylesheet">

LANGUAGE: html
CODE:
<script src="dist/handsontable.full.min.js"></script>
<link href="dist/handsontable.full.min.css" rel="stylesheet">

----------------------------------------

TITLE: Basic Filtering Configuration in JavaScript
DESCRIPTION: Basic configuration to enable filtering functionality in Handsontable by setting the filters and dropdownMenu options.

LANGUAGE: javascript
CODE:
const configurationOptions = {
  // enable filtering
  filters: true,
  // enable the column menu
  dropdownMenu: true
};

----------------------------------------

TITLE: Fully Custom Context Menu Configuration in JavaScript
DESCRIPTION: This snippet demonstrates a fully custom context menu configuration in Handsontable. It includes adding a common callback for all options, dynamically disabling options, setting custom text for predefined options, adding custom options, and setting callbacks for specific options.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example3');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ],
  rowHeaders: true,
  colHeaders: true,
  contextMenu: {
    callback(key, options) {
      if (key === 'about') {
        setTimeout(() => {
          alert("This is a context menu with default and custom options mixed");
        }, 100);
      }
    },
    items: {
      "row_above": {
        disabled: function() {
          return this.getSelectedLast()[0] === 0;
        }
      },
      "row_below": {},
      "separator": "---------",
      "clear_custom": {
        name: 'Clear all cells',
        callback() {
          this.clear();
        }
      },
      "about": {name: 'About this menu'}
    }
  },
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Modifying Column Width with modifyColWidth Hook in JavaScript
DESCRIPTION: Shows how to use the modifyColWidth hook in plain JavaScript to set a custom width for columns after index 10.

LANGUAGE: js
CODE:
hot.addHook('modifyColWidth', (width, column) => {
  if (column > 10) {
    return 150;
  }
})

----------------------------------------

TITLE: Complete Angular Module Setup with Handsontable
DESCRIPTION: A full example of setting up an Angular module with Handsontable, including importing and registering necessary modules, and configuring the NgModule.

LANGUAGE: javascript
CODE:
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import { HotTableModule } from '@handsontable/angular';

import Handsontable from 'handsontable/base';

import {
  registerCellType,
  NumericCellType,
} from 'handsontable/cellTypes';

import {
  registerPlugin,
  UndoRedo,
} from 'handsontable/plugins';

registerCellType(NumericCellType);
registerPlugin(UndoRedo);

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    HotTableModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

----------------------------------------

TITLE: Setting Grid-Level Locale in JavaScript
DESCRIPTION: Configuration example showing how to set the locale for the entire Handsontable grid using the locale option. Sets the grid's locale to Polish (pl-PL).

LANGUAGE: javascript
CODE:
const hot = new Handsontable(container, {
  // set the entire grid's locale to Polish
  locale: 'pl-PL',
});

----------------------------------------

TITLE: Using afterCreateRow Hook in JavaScript
DESCRIPTION: Shows how to add the afterCreateRow hook to a Handsontable instance in plain JavaScript to log information about newly created rows.

LANGUAGE: js
CODE:
hot.addHook('afterCreateRow', (row, amount) => {
  console.log(`${amount} row(s) were created, starting at index ${row}`);
})

----------------------------------------

TITLE: Creating Angular Component
DESCRIPTION: Angular component implementation with sample data for Handsontable grid

LANGUAGE: javascript
CODE:
import { Component } from '@angular/core';

@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: [ './app.component.css' ],
})
export class AppComponent  {
  data: any[] = [
    { company: 'Tagcat', country: 'United Kingdom', rating: 4.4 },
    { company: 'Zoomzone', country: 'Japan', rating: 4.5 },
    { company: 'Meeveo', country: 'United States', rating: 4.6 },
  ]
}

----------------------------------------

TITLE: Modifying Column Width with modifyColWidth Hook in React
DESCRIPTION: Demonstrates using the modifyColWidth hook in a React component to set a custom width for columns after index 10.

LANGUAGE: jsx
CODE:
<HotTable modifyColWidth={(width, column) => {
    if (column > 10) {
      return 150;
    }
}}/>

----------------------------------------

TITLE: Disabling Autoresizing in JavaScript Configuration
DESCRIPTION: Shows how to disable the default autoresizing behavior of Handsontable by returning false in the beforeRefreshDimensions hook.

LANGUAGE: javascript
CODE:
{
  beforeRefreshDimensions() { return false; }
}

----------------------------------------

TITLE: Setting Handsontable Theme in React Component
DESCRIPTION: Demonstrates how to set a Handsontable theme in a React component using the HotTable component.

LANGUAGE: jsx
CODE:
<HotTable
  themeName="ht-theme-main-dark-auto"
/>

----------------------------------------

TITLE: Using Custom Validator in React Handsontable Component
DESCRIPTION: Shows how to use a custom validator in a React Handsontable component. This example demonstrates setting the 'my.custom' validator for a column in JSX.

LANGUAGE: jsx
CODE:
<HotTable
  columns={[{
    validator: 'my.custom'
  }]}
/>

----------------------------------------

TITLE: Enabling multi-column sorting in JavaScript
DESCRIPTION: Enable sorting by multiple columns by setting the multiColumnSorting option to true.

LANGUAGE: javascript
CODE:
const configurationOptions = {
  // enable sorting by multiple columns, for all columns
  multiColumnSorting: true,
};

----------------------------------------

TITLE: Initializing Column Freezing in JavaScript
DESCRIPTION: This snippet demonstrates how to freeze columns at initialization using the fixedColumnsStart option in Handsontable. It also shows the required CSS configuration for the grid container.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable';
import 'handsontable/dist/handsontable.full.min.css';

const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colHeaders: true,
  rowHeaders: true,
  height: 'auto',
  fixedColumnsStart: 2,
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Setting Constant Grid Dimensions in React
DESCRIPTION: React component implementation for setting fixed column widths and row heights in Handsontable.

LANGUAGE: react
CODE:
<HotTable
  colWidths={[50, 150, 45]}
  rowHeights={[40, 40, 40, 40]}
/>

----------------------------------------

TITLE: Loading Language Files in JavaScript (CommonJS)
DESCRIPTION: Shows how to load and register a language dictionary using CommonJS, then initialize Handsontable with the specified language.

LANGUAGE: javascript
CODE:
const Handsontable = require('handsontable/base').default;
const { registerLanguageDictionary, deDE } = require('handsontable/i18n');

registerLanguageDictionary(deDE);

const hot = new Handsontable(container, {
  language: deDE.languageCode,
});

----------------------------------------

TITLE: Enabling Copy with Headers in Handsontable
DESCRIPTION: This snippet demonstrates how to enable copying with headers in Handsontable. It configures the CopyPaste plugin to allow copying column headers and adds related context menu items.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example2');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ],
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  contextMenu: true,
  licenseKey: 'non-commercial-and-evaluation',
  nestedHeaders: [
    ['A', { label: 'B', colspan: 4 }],
    ['', { label: 'Cars', colspan: 4 }],
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford']
  ],
  copyPaste: {
    copyColumnHeaders: true,
    copyColumnGroupHeaders: true,
    copyColumnHeadersOnly: true
  }
});

----------------------------------------

TITLE: Configuring Commercial License Key in JavaScript
DESCRIPTION: Demonstrates how to set up a commercial license key in plain JavaScript Handsontable configuration.

LANGUAGE: javascript
CODE:
const settings = {
  licenseKey: '00000-00000-00000-00000-00000',
  //... other options
}

----------------------------------------

TITLE: Setting Fixed Row Height in Handsontable
DESCRIPTION: Example demonstrating how to set a fixed row height of 40px for all rows in the grid using the rowHeights configuration option.

LANGUAGE: javascript
CODE:
const data = [
  ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
  ['2019', 10, 11, 12, 13],
  ['2020', 20, 11, 14, 13],
  ['2021', 30, 15, 12, 13]
];

const container = document.querySelector('#example1');

const hot = new Handsontable(container, {
  data,
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  rowHeights: 40,
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Setting Column Widths Using a Function in Handsontable
DESCRIPTION: This example demonstrates setting column widths using a function that multiplies the column index by 40px for each consecutive column.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example3');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colWidths(index) {
    return (index + 1) * 40;
  },
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  autoWrapRow: true,
  licenseKey: 'non-commercial-and-evaluation'
});

LANGUAGE: typescript
CODE:
const container = document.querySelector('#example3');
const hot = new Handsontable(container as HTMLElement, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colWidths(index: number) {
    return (index + 1) * 40;
  },
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  autoWrapRow: true,
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Enabling Row Moving in React Handsontable
DESCRIPTION: This snippet shows how to enable row moving in a Handsontable instance using React with JavaScript or TypeScript. It sets up a basic table component with the manualRowMove option enabled.

LANGUAGE: jsx
CODE:
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

const ExampleComponent = () => {
  return (
    <HotTable
      data={Handsontable.helper.createSpreadsheetData(5, 10)}
      width="100%"
      height={320}
      rowHeaders={true}
      colHeaders={true}
      colWidths={100}
      manualRowMove={true}
      licenseKey="non-commercial-and-evaluation"
    />
  );
};

export default ExampleComponent;

LANGUAGE: tsx
CODE:
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

const ExampleComponent = () => {
  return (
    <HotTable
      data={Handsontable.helper.createSpreadsheetData(5, 10)}
      width="100%"
      height={320}
      rowHeaders={true}
      colHeaders={true}
      colWidths={100}
      manualRowMove={true}
      licenseKey="non-commercial-and-evaluation"
    />
  );
};

export default ExampleComponent;

----------------------------------------

TITLE: Array-based Row Height Configuration
DESCRIPTION: Example showing how to set different heights for specific rows using an array configuration where only the first rows have defined heights.

LANGUAGE: javascript
CODE:
const data = [
  ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
  ['2019', 10, 11, 12, 13],
  ['2020', 20, 11, 14, 13],
  ['2021', 30, 15, 12, 13]
];

const container = document.querySelector('#example2');

const hot = new Handsontable(container, {
  data,
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  rowHeights: [50, 40, 100],
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Disabling DOM Virtualization for Improved Accessibility in React
DESCRIPTION: This code snippet shows how to disable column and row virtualization in a React component using Handsontable to improve accessibility by loading all grid elements into the browser.

LANGUAGE: jsx
CODE:
<HotTable
  // disable column virtualization
  renderAllColumns={true}
  // disable row virtualization
  renderAllRows={true}
/>

----------------------------------------

TITLE: Using a Custom Plugin in Handsontable (React)
DESCRIPTION: Initialize Handsontable with the custom plugin and configure its options in a React component.

LANGUAGE: jsx
CODE:
import Handsontable from 'handsontable';
import { CustomPlugin } from './customPlugin';

<HotTable
  customPlugin={true}
  // or
  customPlugin={{
    msg: 'user-defined message',
  }}
  // or
  customPlugin={false}
/>

----------------------------------------

TITLE: Installing Handsontable Angular Package
DESCRIPTION: npm command to install Handsontable and its Angular wrapper dependencies

LANGUAGE: bash
CODE:
npm install handsontable @handsontable/angular

----------------------------------------

TITLE: Implementing Dropdown Cell Type in JavaScript
DESCRIPTION: Example showing how to configure a dropdown cell type in Handsontable using JavaScript. The dropdown is based on autocomplete cell type with strict mode enabled and filtering disabled.

LANGUAGE: javascript
CODE:
const example1Data = [
  ['Tesla', '2019', 'black', 'black'],
  ['Nissan', '2018', 'blue', 'blue'],
  ['Chrysler', '2017', 'yellow', 'black'],
  ['Volvo', '2016', 'white', 'gray']
];

const example1Colors = ['yellow', 'red', 'orange', 'green', 'blue', 'gray', 'black', 'white'];

const example1Cars = ['Mercedes', 'Chevrolet', 'Chrysler', 'Nissan', 'Tesla', 'Volvo'];

const example1Container = document.querySelector('#example1');

const example1Hot = new Handsontable(example1Container, {
  data: example1Data,
  colHeaders: ['Car', 'Year', 'Chassis color', 'Bumper color'],
  columns: [
    {
      type: 'dropdown',
      source: example1Cars
    },
    { type: 'numeric' },
    {
      type: 'dropdown',
      source: example1Colors
    },
    {
      type: 'dropdown',
      source: example1Colors
    }
  ],
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Implementing Row Pre-populating in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to implement row pre-populating in a Handsontable data grid. It defines types for the data structure and uses a custom renderer for empty cells along with the 'beforeChange' hook.

LANGUAGE: typescript
CODE:
import Handsontable from 'handsontable';
import 'handsontable/dist/handsontable.full.min.css';

const container: HTMLElement | null = document.querySelector('#example1');
const data: (string | number)[][] = [
  ['', 'Tesla', 'Mercedes', 'Toyota', 'Volvo'],
  ['2019', 10, 11, 12, 13],
  ['2020', 20, 11, 14, 13],
  ['2021', 30, 15, 12, 13]
];

const initialRowCount: number = data.length;

const hot = new Handsontable(container, {
  data,
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  minSpareRows: 1,
  licenseKey: 'non-commercial-and-evaluation',
  cells(row: number, col: number) {
    const cellProperties: any = {};
    const visualRowIndex = this.instance.toVisualRow(row);

    if (visualRowIndex >= initialRowCount) {
      cellProperties.renderer = firstRowRenderer;
    }

    return cellProperties;
  },
  beforeChange(changes: [number, string | number, string | number, string | number][]) {
    let rowToPopulate: number | null = null;

    changes.forEach((change) => {
      const [row, prop, oldValue, newValue] = change;

      if (oldValue === '' && newValue !== '') {
        rowToPopulate = row;
      }
    });

    if (rowToPopulate !== null) {
      const sourceData = this.getSourceData();

      if (sourceData && sourceData[rowToPopulate]) {
        sourceData[rowToPopulate] = ['', 'BMW', 'Chrysler', 'Nissan', 'Suzuki'];
      }
    }
  }
});

function firstRowRenderer(instance: Handsontable, td: HTMLTableCellElement, row: number, col: number, prop: string | number, value: any, cellProperties: any) {
  Handsontable.renderers.TextRenderer.apply(this, arguments);

  td.style.color = '#999';

  if (col === 0 && value === '') {
    td.textContent = 'Click to add a new row';
  }
}

----------------------------------------

TITLE: Initializing NestedRows Plugin in JavaScript
DESCRIPTION: Basic setup code to enable the NestedRows plugin in a Handsontable instance.

LANGUAGE: javascript
CODE:
const hot = new Handsontable(container, {
  nestedRows: true,
});

----------------------------------------

TITLE: Date Format Configuration in React
DESCRIPTION: Example of setting custom date format and correction options in React implementation.

LANGUAGE: jsx
CODE:
dateFormat={'YYYY-MM-DD'}

// default behavior
// date entered as `30/12/2022` will be invalid
correctFormat={false}

// date entered as `30/12/2022` will be corrected to `2022/12/30`
correctFormat={true}

----------------------------------------

TITLE: Using v-model with Renderer/Editor Components in Vue 2 HotColumn
DESCRIPTION: This example shows how to use Vue 2's `v-model` with renderer and editor components in a HotColumn. It demonstrates highlighting rows based on input values.

LANGUAGE: html
CODE:
<div id="v-model-example">
  <label for="highlight-input">Highlight rows:</label>
  <input id="highlight-input" v-model="highlightedRows" />
  <hot-table :settings="hotSettings">
    <hot-column v-for="(column, index) in columns" :key="index" v-bind="column">
      <highlight-renderer v-if="column.data === 'id'" :highlightedRows="highlightedRows" hot-renderer></highlight-renderer>
    </hot-column>
  </hot-table>
</div>

LANGUAGE: javascript
CODE:
import Vue from 'vue';
import { HotTable } from '@handsontable/vue';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.css';

registerAllModules();

const HighlightRenderer = {
  name: 'HighlightRenderer',
  template: `
    <div :style="{ backgroundColor: isHighlighted ? 'yellow' : 'transparent' }">
      {{ value }}
    </div>
  `,
  props: ['highlightedRows'],
  data() {
    return {
      value: null,
      row: null
    };
  },
  computed: {
    isHighlighted() {
      return this.highlightedRows.split(',').map(Number).includes(this.row);
    }
  }
};

new Vue({
  el: '#v-model-example',
  data() {
    return {
      highlightedRows: '',
      hotSettings: {
        data: [
          { id: 1, name: 'John', surname: 'Smith' },
          { id: 2, name: 'Alice', surname: 'Brown' },
          { id: 3, name: 'Bob', surname: 'Johnson' },
          { id: 4, name: 'Emma', surname: 'Davis' },
          { id: 5, name: 'Michael', surname: 'Wilson' },
        ],
        licenseKey: 'non-commercial-and-evaluation'
      },
      columns: [
        { data: 'id', type: 'numeric', width: 50 },
        { data: 'name', width: 100 },
        { data: 'surname', width: 100 }
      ]
    };
  },
  components: {
    HotTable,
    HighlightRenderer
  }
});

----------------------------------------

TITLE: Enabling Row Trimming in JavaScript
DESCRIPTION: Basic configuration to enable the TrimRows plugin in Handsontable

LANGUAGE: javascript
CODE:
trimRows: true,

----------------------------------------

TITLE: Building JavaScript Package
DESCRIPTION: Commands to build the main Handsontable JavaScript package

LANGUAGE: shell
CODE:
cd handsontable
npm run build

----------------------------------------

TITLE: Blocking Keyboard Shortcuts in React
DESCRIPTION: Example of blocking specific keyboard shortcuts using the beforeKeyDown prop in React component.

LANGUAGE: jsx
CODE:
<HotTable
  beforeKeyDown={(event) => {
    // the `Enter` shortcut won't work
    if (event.key === 'enter') {
      return false;
    }
  }}
/>

----------------------------------------

TITLE: Enabling Manual Column Resizing in Handsontable
DESCRIPTION: This example shows how to enable manual column resizing by setting the 'manualColumnResize' option to true, allowing users to drag column headers to adjust widths.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example4');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colHeaders: true,
  manualColumnResize: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

LANGUAGE: typescript
CODE:
const container = document.querySelector('#example4');
const hot = new Handsontable(container as HTMLElement, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colHeaders: true,
  manualColumnResize: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Enabling Comments Plugin in Handsontable React
DESCRIPTION: React component configuration to enable the comments feature in Handsontable.

LANGUAGE: jsx
CODE:
<HotTable
  data={[
    ['A1', 'B1', 'C1'],
    ['A2', 'B2', 'C2'],
  ]}
  comments={true}
/>

----------------------------------------

TITLE: Basic Handsontable Cell Type Example - JavaScript
DESCRIPTION: Demonstrates how to implement a basic Handsontable cell type with a popup editor in JavaScript. Shows configuration of columns and data initialization.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');

const hot = new Handsontable(container, {
  data: [
    ['A1', 'B1', 'C1', 'D1'],
    ['A2', 'B2', 'C2', 'D2'],
    ['A3', 'B3', 'C3', 'D3'],
    ['A4', 'B4', 'C4', 'D4']
  ],
  height: 200,
  colHeaders: true,
  rowHeaders: true,
  columns: [
    {},
    {
      type: 'handsontable',
      handsontable: {
        colHeaders: true,
        data: [
          ['A1', 'B1', 'C1', 'D1'],
          ['A2', 'B2', 'C2', 'D2'],
          ['A3', 'B3', 'C3', 'D3']
        ]
      }
    },
    {},
    {}
  ],
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Default Query Method Implementation in JavaScript
DESCRIPTION: The default query method implementation for the Search plugin that performs case-insensitive string matching.

LANGUAGE: javascript
CODE:
const DEFAULT_QUERY_METHOD = function(query, value) {
  if (isUndefined(query) || query === null || !query.toLowerCase || query.length === 0) {
    return false;
  }
  if (isUndefined(value) || value === null) {
    return false;
  }

  return value.toString().toLowerCase().indexOf(query.toLowerCase()) !== -1;
};

----------------------------------------

TITLE: Configuring Handsontable Vue Component in JavaScript
DESCRIPTION: This JavaScript code configures and initializes a Handsontable component in a Vue 2 application. It sets up data, headers, and component options using Vue's data and computed properties.

LANGUAGE: javascript
CODE:
import { createApp } from 'vue';
import { HotTable } from '@handsontable/vue';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

const app = createApp({
  data() {
    return {
      hotSettings: {
        data: [
          ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
          ['2019', 10, 11, 12, 13],
          ['2020', 20, 11, 14, 13],
          ['2021', 30, 15, 12, 13]
        ],
        colHeaders: true,
        rowHeaders: true,
        height: 'auto',
        licenseKey: 'non-commercial-and-evaluation'
      }
    };
  },
  computed: {
    example1() {
      return this.hotSettings;
    }
  }
});

app.component('hot-table', HotTable);

app.mount('#example1');

----------------------------------------

TITLE: Pre-setting Cell Comments in React
DESCRIPTION: React configuration for adding pre-defined comments to specific cells.

LANGUAGE: jsx
CODE:
cell={[
  { row: 1, col: 1, comment: { value: 'Hello world!' } }
]}

----------------------------------------

TITLE: Importing and Registering Cell Type Module in JavaScript
DESCRIPTION: Demonstrates how to import and register a cell type module, using the NumericCellType as an example.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable/base';
import {
  registerCellType,
  NumericCellType,
} from 'handsontable/cellTypes';

registerCellType(NumericCellType);

----------------------------------------

TITLE: Configuring Non-Commercial License in JavaScript
DESCRIPTION: Shows how to implement the non-commercial license key for evaluation and teaching purposes.

LANGUAGE: javascript
CODE:
const settings = {
  licenseKey: 'non-commercial-and-evaluation',
  //... other options
}

----------------------------------------

TITLE: Creating a Custom Language Dictionary
DESCRIPTION: Illustrates how to create a custom language dictionary file for Handsontable, including necessary imports, dictionary structure, and export.

LANGUAGE: javascript
CODE:
/**
* @preserve
* Authors: Chris Wick, John Kyle
* Last updated: Nov 15, 2017
*
* Description: Definition file for Spanish - Venezuela language-country.
*/
import * as C from '../constants';

const dictionary = {
  languageCode: 'es-VE',
  [C.CONTEXTMENU_ITEMS_ROW_ABOVE]: 'Insertar fila arriba',
};

export default dictionary;

----------------------------------------

TITLE: Customizing Column Menu in React
DESCRIPTION: Configure the DropdownMenu plugin with custom actions in a React component by setting the dropdownMenu prop to an array of menu item configurations.

LANGUAGE: jsx
CODE:
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

export const ExampleComponent = () => {
  return (
    <HotTable
      data={Handsontable.helper.createSpreadsheetData(5, 10)}
      colHeaders={true}
      dropdownMenu={['clear_column', '---------', 'make_read_only', '---------', 'alignment']}
      height="auto"
      licenseKey="non-commercial-and-evaluation"
    />
  );
};

LANGUAGE: tsx
CODE:
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

export const ExampleComponent = () => {
  return (
    <HotTable
      data={Handsontable.helper.createSpreadsheetData(5, 10)}
      colHeaders={true}
      dropdownMenu={['clear_column', '---------', 'make_read_only', '---------', 'alignment']}
      height="auto"
      licenseKey="non-commercial-and-evaluation"
    />
  );
};

----------------------------------------

TITLE: Setting Fixed Hash Length for Password Cell Type
DESCRIPTION: This example shows how to set a fixed hash length for the password cell type using the 'hashLength' option. This ensures that all password fields display the same number of symbols, regardless of the actual password length.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example2');
const hot = new Handsontable(container, {
  data: [
    ['Joe'],
    ['Timothy'],
    ['Margaret'],
    ['Jerry'],
  ],
  colHeaders: true,
  rowHeaders: true,
  height: 'auto',
  columns: [
    {
      type: 'password',
      hashLength: 10
    },
  ],
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Configuring Handsontable with Vertical-Only Autofill and Auto Row Insertion
DESCRIPTION: This snippet shows how to configure Handsontable to restrict autofill to the vertical direction only and automatically insert new rows during autofill. It includes settings for fillHandle and autoInsertRow.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example2');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ],
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  fillHandle: {
    direction: 'vertical',
    autoInsertRow: true
  },
  autoWrapRow: true,
  autoWrapCol: true,
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Custom Checkbox Template Implementation
DESCRIPTION: Shows how to use custom templates for checkbox values instead of true/false. Uses checkedTemplate and uncheckedTemplate properties to define custom values.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example2');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Nissan', 'Toyota', 'Honda', 'Mazda', 'Ford'],
    ['2017', 'yes', 'no', 'yes', 'yes', 'no', 'no'],
    ['2018', 'no', 'no', 'yes', 'yes', 'yes', 'no'],
    ['2019', 'yes', 'yes', 'yes', 'no', 'no', 'yes'],
    ['2020', 'no', 'yes', 'yes', 'yes', 'yes', 'yes']
  ],
  colHeaders: true,
  rowHeaders: true,
  height: 'auto',
  columns: [
    {},
    { type: 'checkbox', checkedTemplate: 'yes', uncheckedTemplate: 'no' },
    { type: 'checkbox', checkedTemplate: 'yes', uncheckedTemplate: 'no' },
    { type: 'checkbox', checkedTemplate: 'yes', uncheckedTemplate: 'no' },
    { type: 'checkbox', checkedTemplate: 'yes', uncheckedTemplate: 'no' },
    { type: 'checkbox', checkedTemplate: 'yes', uncheckedTemplate: 'no' },
    { type: 'checkbox', checkedTemplate: 'yes', uncheckedTemplate: 'no' }
  ],
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Custom Image Renderer Implementation in Angular Component
DESCRIPTION: TypeScript component implementation defining custom image renderer function and sample dataset

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';

@Component({
  selector: 'app-example',
  templateUrl: './example.component.html'
})
export class AppComponent {
  dataset = [
    { productName: 'Barska GB12166 Fitness Watch with Heart Rate Monitor', image: 'https://handsontable.com/docs/img/examples/professional-javascript-developers-should-know-about-1.jpg' },
    { productName: 'Barska GB12166 Fitness Watch with Heart Rate Monitor', image: 'https://handsontable.com/docs/img/examples/professional-javascript-developers-should-know-about-2.jpg' }
  ];

  imageRenderer(instance, td, row, col, prop, value, cellProperties) {
    const img = document.createElement('IMG');
    img.src = value;
    img.addEventListener('mousedown', (e) => {
      e.preventDefault();
    });
    td.innerText = '';
    td.appendChild(img);

    return td;
  }
}

----------------------------------------

TITLE: Advanced Vue 2 HotColumn Example with Custom Editor and Renderer
DESCRIPTION: This advanced example combines multiple capabilities of the Vue 2 wrapper, including a custom editor component with an external dependency, column settings using v-for, and state binding between components.

LANGUAGE: html
CODE:
<div id="advanced-editor-example">
  <div class="controls">
    <div class="info">Rating: {{ rating }}</div>
    <div class="info">Primary: {{ primary }}</div>
    <div class="info">Accent: {{ accent }}</div>
  </div>
  <hot-table :settings="hotSettings">
    <hot-column :width="120">
      <stars-rating hot-renderer></stars-rating>
    </hot-column>
    <hot-column v-for="n in 2" :width="120" v-bind:key="'col' + n">
      <color-picker hot-editor hot-renderer></color-picker>
    </hot-column>
  </hot-table>
</div>

LANGUAGE: css
CODE:
.controls {
  margin-bottom: 15px;
}

.info {
  margin-right: 15px;
  display: inline-block;
}

.info:first-child {
  margin-left: 0;
}

.star-rating {
  unicode-bidi: bidi-override;
  color: #c5c5c5;
  font-size: 25px;
  height: 25px;
  width: 100px;
  margin: 0 auto;
  position: relative;
  padding: 0;
  text-shadow: 0 1px 0 #a2a2a2;
}

.star-rating span {
  padding: 5px;
  position: absolute;
  z-index: 1;
  display: block;
}

.star-rating span.hovered:before {
  content: "\2605";
  position: absolute;
  left: 0;
  color: #e3cf7a;
  z-index: 2;
}

.star-rating-top {
  color: #e7711b;
  padding: 0;
  position: absolute;
  z-index: 1;
  display: block;
  top: 0;
  left: 0;
  overflow: hidden;
}

.star-rating-top:before {
  content: "\2605\2605\2605\2605\2605";
  top: 0;
  position: absolute;
  left: 0;
}

.star-rating-bottom {
  padding: 0;
  display: block;
  z-index: 0;
  top: 0;
}

.star-rating-bottom:before {
  content: "\2605\2605\2605\2605\2605";
  position: absolute;
  top: 0;
  left: 0;
}

.vc-chrome {
  position: absolute !important;
  top: 20px;
  left: 0;
  z-index: 99;
}

.color-swatch {
  width: 100%;
  height: 23px;
  margin: 0 auto;
  border: 1px solid #ccc;
}

.editor-component {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
}

.wrapper-component {
  width: 100%;
  height: 100%;
}

.apply-button {
  margin-top: 5px;
}

LANGUAGE: javascript
CODE:
import Vue from 'vue';
import Vuex from 'vuex';
import { HotTable, BaseEditorComponent } from '@handsontable/vue';
import { Chrome } from 'vue-color';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.css';

Vue.use(Vuex);

registerAllModules();

const store = new Vuex.Store({
  state: {
    rating: 3,
    primary: '#ff00ff',
    accent: '#00ff00'
  },
  mutations: {
    updateRating(state, payload) {
      state.rating = payload;
    },
    updatePrimary(state, payload) {
      state.primary = payload;
    },
    updateAccent(state, payload) {
      state.accent = payload;
    }
  }
});

const ColorPicker = {
  name: 'ColorPicker',
  template: `
    <div class="wrapper-component">
      <div v-if="!isEditor" class="color-swatch" :style="{ backgroundColor: value }"></div>
      <div v-if="isEditor" class="editor-component">
        <button @click="toggleCustomEditor">Pick a color</button>
        <chrome v-if="displayCustomEditor" v-model="colors" @input="updateColor" />
        <button class="apply-button" @click="onColorChange">Apply</button>
      </div>
    </div>
  `,
  data() {
    return {
      value: '#ffffff',
      displayCustomEditor: false,
      colors: {
        hex: '#ffffff'
      }
    };
  },
  extends: BaseEditorComponent,
  components: {
    Chrome
  },
  methods: {
    toggleCustomEditor() {
      this.displayCustomEditor = !this.displayCustomEditor;
    },
    updateColor(colors) {
      this.colors = colors;
    },
    onColorChange() {
      this.toggleCustomEditor();
      this.value = this.colors.hex;
      this.finishEditing();
    },
    prepare(row, col, prop, td, originalValue, cellProperties) {
      this.value = originalValue;
    },
    getValue() {
      return this.value;
    },
    setValue(value) {
      this.value = value;
    },
    open() {},
    close() {},
    focus() {}
  }
};

const StarsRating = {
  name: 'StarsRating',
  template: `
    <div>
      <div class="star-rating" @mousemove="mouseMoving" @mouseleave="mouseLeaving" @click="click" v-if="!readOnly">
        <div class="star-rating-top" :style="{width: (value * (100/5)) + '%'}">
          <span>★</span>
          <span>★</span>
          <span>★</span>
          <span>★</span>
          <span>★</span>
        </div>
        <div class="star-rating-bottom">
          <span v-for="(item, index) in maxStars" :key="index" :class="{hovered: hoveredStars > index}">★</span>
        </div>
      </div>
      <div class="star-rating" v-else>
        <div class="star-rating-top" :style="{width: (value * (100/5)) + '%'}">
          <span>★</span>
          <span>★</span>
          <span>★</span>
          <span>★</span>
          <span>★</span>
        </div>
        <div class="star-rating-bottom">
          <span>★</span>
          <span>★</span>
          <span>★</span>
          <span>★</span>
          <span>★</span>
        </div>
      </div>
    </div>
  `,
  data() {
    return {
      maxStars: 5,
      value: 3,
      hoveredStars: 0,
      readOnly: false
    };
  },
  methods: {
    mouseMoving(e) {
      let stars = this.getStarsCount(e);
      this.hoveredStars = stars;
    },
    mouseLeaving() {
      this.hoveredStars = 0;
    },
    getStarsCount(e) {
      // Get x position of mouse in element
      const relativeX = e.clientX - e.currentTarget.getBoundingClientRect().left;
      const starsSelected = Math.ceil((relativeX / e.currentTarget.offsetWidth) * this.maxStars);

      return starsSelected;
    },
    click(e) {
      if (!this.readOnly) {
        const prevValue = this.value;
        const newValue = this.getStarsCount(e);

        if (prevValue !== newValue) {
          this.value = newValue;
          this.$store.commit('updateRating', this.value);
        }
      }
    }
  }
};

new Vue({
  el: '#advanced-editor-example',
  store,
  data() {
    return {
      hotSettings: {
        data: [
          [3, '#ff0000', '#00ff00'],
          [4, '#00ff00', '#0000ff'],
          [5, '#0000ff', '#ff0000']
        ],
        colHeaders: ['Rating', 'Primary Color', 'Accent Color'],
        rowHeaders: true,
        height: 'auto',
        licenseKey: 'non-commercial-and-evaluation'
      }
    };
  },
  computed: {
    rating() {
      return this.$store.state.rating;
    },
    primary() {
      return this.$store.state.primary;
    },
    accent() {
      return this.$store.state.accent;
    }
  },
  components: {
    HotTable,
    ColorPicker,
    StarsRating
  }
});

----------------------------------------

TITLE: Pre-setting Cell Comments in JavaScript
DESCRIPTION: Configuration to add pre-defined comments to specific cells using cell metadata.

LANGUAGE: javascript
CODE:
cell: [
  { row: 1, col: 1, comment: { value: 'Hello world!' } }
]

----------------------------------------

TITLE: Importing Handsontable JavaScript Module
DESCRIPTION: Example of importing Handsontable as a JavaScript module using ES6 import syntax.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable';

----------------------------------------

TITLE: Initializing Handsontable with Column Virtualization in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Handsontable with 1000 rows and 1000 columns, utilizing column virtualization for efficient rendering.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable';
import 'handsontable/dist/handsontable.full.min.css';

const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(1000, 1000),
  colHeaders: true,
  rowHeaders: true,
  height: 450,
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Implementing Header Tooltips in React
DESCRIPTION: Example of how to implement header tooltips functionality in Handsontable 9.0 using React, replacing the removed Header Tooltips plugin. It uses afterGetColHeader and afterGetRowHeader hooks.

LANGUAGE: jsx
CODE:
const onAfterGetHeader = function(index, TH) {
  TH.setAttribute('title', TH.querySelector('span').textContent);
};

<HotTable
  data={[
    ['A1', 'B1', 'C1'],
    ['A2', 'B2', 'C2'],
    ['A3', 'B3', 'C3'],
  ]}
  rowHeights={23}
  autoColumnSize={true}
  rowHeaders={['1st', '2nd', '3rd']}
  colHeaders={['First Column', 'Second Column', 'Third Column']}
  licenseKey="non-commercial-and-evaluation"
  afterGetColHeader={onAfterGetHeader}
  afterGetRowHeader={onAfterGetHeader}
/>

----------------------------------------

TITLE: Implementing Handsontable in Vue 2 HTML Template
DESCRIPTION: This HTML snippet defines the structure of a Vue 2 component that includes a Handsontable instance and buttons for interaction. It uses the HotTable component from @handsontable/vue and binds various properties and events.

LANGUAGE: html
CODE:
<div id="example1">
  <hot-table
    :settings="hotSettings"
    :data="hotData"
    @afterChange="onAfterChange"
    ref="hotTableComponent"
  ></hot-table>
  <div class="controls">
    <button name="load" @click="loadData">Load data</button>
    <button name="reset" @click="resetData">Reset table</button>
    <button name="add-row" @click="addRow">Add row</button>
    <label><input type="checkbox" v-model="hotSettings.fixedRowsTop" /> Add fixed rows</label>
  </div>
</div>

----------------------------------------

TITLE: Initializing HyperFormula Instance
DESCRIPTION: Creates a new HyperFormula instance with the internal-use license key for use with Handsontable

LANGUAGE: javascript
CODE:
const hyperformulaInstance = HyperFormula.buildEmpty({
  licenseKey: 'internal-use-in-handsontable'
});

----------------------------------------

TITLE: Rendering Handsontable Vue Component in HTML
DESCRIPTION: This HTML snippet shows how to create a container div for rendering the Handsontable Vue component. It uses the id 'example1' for targeting.

LANGUAGE: html
CODE:
<div id="example1"></div>

----------------------------------------

TITLE: Configuring Handsontable with translations in Vue 2
DESCRIPTION: This example shows how to set up a Handsontable instance with translations in a Vue 2 component. It demonstrates configuring language settings and number formatting.

LANGUAGE: html
CODE:
<div id="example1">
  <hot-table :settings="hotSettings"></hot-table>
</div>

LANGUAGE: javascript
CODE:
import { HotTable } from '@handsontable/vue';
import { registerLanguageDictionary, languages } from 'handsontable/i18n';
import numbro from 'numbro';
import languages2 from 'numbro/dist/languages.min';

numbro.registerLanguage(languages2.deDE);
numbro.registerLanguage(languages2.plPL);
numbro.setLanguage('en-US');

registerLanguageDictionary(languages.deDE);
registerLanguageDictionary(languages.plPL);

export default {
  name: 'Example1',
  data() {
    return {
      hotSettings: {
        startRows: 5,
        startCols: 4,
        colHeaders: true,
        stretchH: 'all',
        language: 'en-US',
        licenseKey: 'non-commercial-and-evaluation',
        columns: [
          {
            type: 'numeric',
            numericFormat: {
              pattern: '0,0.00',
              culture: 'en-US'
            }
          },
          {
            type: 'numeric',
            numericFormat: {
              pattern: '0,0.00',
              culture: 'de-DE'
            }
          },
          {
            type: 'numeric',
            numericFormat: {
              pattern: '0,0.00',
              culture: 'pl-PL'
            }
          },
          {}
        ]
      }
    };
  },
  components: {
    HotTable
  }
};

----------------------------------------

TITLE: Basic Time Cell Type Implementation - JavaScript
DESCRIPTION: Example showing how to configure time cell type in Handsontable with format validation. Uses Moment.js for time formatting with the default format 'h:mm:ss a'.

LANGUAGE: javascript
CODE:
@[code](@/content/guides/cell-types/time-cell-type/javascript/example1.js)

----------------------------------------

TITLE: Vue 3 Handsontable Custom Context Menu Template
DESCRIPTION: HTML template defining the structure of a Vue 3 component with a Handsontable data grid and custom context menu configuration.

LANGUAGE: html
CODE:
<template>
  <div>
    <HotTable
      :settings="hotSettings"
      :data="data"
      :height="320"
      :colHeaders="true"
      :rowHeaders="true"
      :contextMenu="contextMenuOptions"
      licenseKey="non-commercial-and-evaluation">
    </HotTable>
  </div>
</template>

----------------------------------------

TITLE: Manually Refreshing Grid Dimensions
DESCRIPTION: Shows how to manually trigger a refresh of the grid's dimensions using the refreshDimensions() method of the Handsontable instance.

LANGUAGE: javascript
CODE:
hot.refreshDimensions();

----------------------------------------

TITLE: Implementing Handsontable Reference in Angular Template
DESCRIPTION: HTML template showing how to implement a Handsontable component in Angular with a reference to access the instance programmatically.

LANGUAGE: html
CODE:
<div class="controls">
  <button (click)="reloadData()">Load new data!</button>
</div>

<hot-table
  [data]="data"
  [colHeaders]="true"
  [rowHeaders]="true"
  [height]="300"
  [width]="600"
  licenseKey="non-commercial-and-evaluation">
</hot-table>

----------------------------------------

TITLE: Accessing Cell Functions using getCellMeta in JavaScript
DESCRIPTION: This snippet demonstrates how to retrieve cell functions (renderer, editor, validator) and cell type using the getCellMeta method in Handsontable.

LANGUAGE: javascript
CODE:
// get cell properties for cell [0, 0]
const cellProperties = hot.getCellMeta(0, 0);

cellProperties.renderer; // get cell renderer
cellProperties.editor; // get cell editor
cellProperties.validator; // get cell validator
cellProperties.type; // get cell type

----------------------------------------

TITLE: Migration: Removing Settings Property in React Wrapper
DESCRIPTION: Example showing the migration from using settings property to direct prop passing in the new React wrapper.

LANGUAGE: jsx
CODE:
const settings = { rowHeaders: true, colHeaders: true };\n\n<HotTable settings={settings} />

LANGUAGE: jsx
CODE:
<HotTable \n  rowHeaders={true} \n  colHeaders={true}\n  // Other options are available as props\n/>

----------------------------------------

TITLE: Migration: Custom Editor Implementation in React Wrapper
DESCRIPTION: Examples showing the transition from class-based to function-based custom editors using the new useHotEditor hook.

LANGUAGE: jsx
CODE:
class EditorComponent extends BaseEditorComponent {\n  // ...\n}

LANGUAGE: jsx
CODE:
const EditorComponent = () => {\n  // ...\n};

LANGUAGE: jsx
CODE:
import { useHotEditor } from '@handsontable/react-wrapper';\n\nconst EditorComponent = () => {\n  const { value, setValue, finishEditing } = useHotEditor({\n    onOpen: () => {\n      // Open logic\n    },\n    onClose: () => {\n      // Close logic\n    },\n  });\n\n  // Component logic here\n};

LANGUAGE: jsx
CODE:
return (\n  <div>\n    <button onClick={finishEditing}>Apply</button>\n  </div>\n);

----------------------------------------

TITLE: Configuring sorting options in React
DESCRIPTION: Configure various sorting options in a React component including header action, empty cell handling, and initial sort order.

LANGUAGE: jsx
CODE:
<HotTable
  columnSorting={{
    // let the end user sort data by clicking on the column name (set by default)
    headerAction: true,
    // don't sort empty cells – move rows that contain empty cells to the bottom (set by default)
    sortEmptyCells: false,
    // enable the sort order icon that appears next to the column name (set by default)
    indicator: true,

    // at initialization, sort data by the first column, in descending order
    initialConfig: {
      column: 1,
      sortOrder: 'desc',
    },

    // implement your own comparator
    compareFunctionFactory(sortOrder, columnMeta) {
      return function(value, nextValue) {
        // here, add a compare function
        // that returns `-1`, or `0`, or `1`
      },
    },
  }}
/>

----------------------------------------

TITLE: Accessing Plugin Instance in JavaScript
DESCRIPTION: Get a reference to the plugin's instance to use its API.

LANGUAGE: javascript
CODE:
const pluginInstance = hotInstance.getPlugin(CustomPlugin.PLUGIN_KEY);

pluginInstance.externalMethodExample();

----------------------------------------

TITLE: Basic Filtering Configuration in React
DESCRIPTION: Basic configuration to enable filtering functionality in React Handsontable component using props.

LANGUAGE: jsx
CODE:
<HotTable
  // enable filtering
  filters={true}
  // enable the column menu
  dropdownMenu={true}
/>

----------------------------------------

TITLE: Manual Row Height Resizing
DESCRIPTION: Example showing how to enable manual row height adjustment by users through drag handles, with both rowHeaders and manualRowResize options enabled.

LANGUAGE: javascript
CODE:
const data = [
  ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
  ['2019', 10, 11, 12, 13],
  ['2020', 20, 11, 14, 13],
  ['2021', 30, 15, 12, 13]
];

const container = document.querySelector('#example4');

const hot = new Handsontable(container, {
  data,
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  manualRowResize: true,
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Setting Horizontal Text Alignment in RTL Handsontable
DESCRIPTION: Shows how to apply different horizontal text alignment settings in an RTL Handsontable grid, overwriting the default alignment resulting from the layout direction.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable';
import 'handsontable/dist/handsontable.full.min.css';

const container = document.querySelector('#example5');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  layoutDirection: 'rtl',
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation',
  columns: [
    { className: 'htLeft' },
    { className: 'htCenter' },
    { className: 'htRight' },
    {},
    {},
    {},
    {},
    {},
    {},
    {}
  ]
});

----------------------------------------

TITLE: Configuring Angular Component for Custom ID HotTable
DESCRIPTION: This TypeScript code sets up the Angular component that uses the custom ID HotTable. It imports necessary modules, defines the component, and sets up the dataset for the table.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';
import { HotTableModule } from '@handsontable/angular';
import { registerAllModules } from 'handsontable/registry';
import { getData } from './data';

registerAllModules();

@Component({
  selector: 'my-app',
  template: `<hot-table id="my-custom-id" [data]="dataset" [colHeaders]="true" [rowHeaders]="true"></hot-table>`,
  standalone: true,
  imports: [HotTableModule],
})
export class AppComponent {
  dataset: any[] = getData();
}

----------------------------------------

TITLE: Initializing Handsontable with Undo/Redo in React (JSX)
DESCRIPTION: This snippet demonstrates how to set up Handsontable with undo and redo functionality in a React component using JSX. It includes necessary imports and component structure.

LANGUAGE: jsx
CODE:
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

const ExampleComponent = () => {
  return (
    <HotTable
      data={[
        ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
        ['2019', 10, 11, 12, 13],
        ['2020', 20, 11, 14, 13],
        ['2021', 30, 15, 12, 13]
      ]}
      rowHeaders={true}
      colHeaders={true}
      height="auto"
      autoWrapRow={true}
      autoWrapCol={true}
      licenseKey="non-commercial-and-evaluation"
    />
  );
};

export default ExampleComponent;

----------------------------------------

TITLE: Customizing Context Menu Options in JavaScript
DESCRIPTION: This example shows how to customize the context menu options in Handsontable. It defines specific menu items to include, such as inserting rows and columns, removing rows and columns, and undo/redo actions.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example2');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ],
  rowHeaders: true,
  colHeaders: true,
  contextMenu: ['row_above', 'row_below', 'col_left', 'col_right', '---------', 'remove_row', 'remove_col', '---------', 'undo', 'redo'],
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Basic Time Cell Type Implementation - TypeScript
DESCRIPTION: TypeScript implementation of time cell type configuration in Handsontable with format validation. Uses Moment.js for time formatting with the default format 'h:mm:ss a'.

LANGUAGE: typescript
CODE:
@[code](@/content/guides/cell-types/time-cell-type/javascript/example1.ts)

----------------------------------------

TITLE: Running Tests
DESCRIPTION: Command to execute test specifications after the development server is running.

LANGUAGE: bash
CODE:
npm run test

----------------------------------------

TITLE: API Usage Examples for Row Trimming
DESCRIPTION: Examples of using the TrimRows plugin API methods to programmatically trim and untrim rows

LANGUAGE: javascript
CODE:
const plugin = hot.getPlugin('trimRows');

// Trim a single row
plugin.trimRow(4);

// Trim multiple rows
plugin.trimRow(0, 4, 6);
// or
plugin.trimRows([0, 4, 6]);

// Untrim rows
plugin.untrimRow(4);
plugin.untrimRow(0, 4, 6);
plugin.untrimRows([0, 4, 6]);

----------------------------------------

TITLE: Running Tests
DESCRIPTION: Command to execute test specifications after the development server is running.

LANGUAGE: bash
CODE:
npm run test

----------------------------------------

TITLE: Importing and Registering Translation Module in JavaScript
DESCRIPTION: Illustrates how to import and register a translation module, using the Polish language as an example.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable/base';
import {
  registerLanguageDictionary,
  plPL,
} from 'handsontable/i18n';

registerLanguageDictionary(plPL);

----------------------------------------

TITLE: Rendering Handsontable Vue 3 Component
DESCRIPTION: HTML code that creates a div element where the @handsontable/vue3 component will be rendered. The div has an id of 'example1'.

LANGUAGE: html
CODE:
<div id="example1"></div>

----------------------------------------

TITLE: Importing Base Module in JavaScript
DESCRIPTION: Shows how to import the base Handsontable module, which is required for all implementations.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable/base';

----------------------------------------

TITLE: Basic Checkbox Implementation with True/False Values
DESCRIPTION: Demonstrates the basic implementation of checkbox cells using true/false values. Shows how to configure a column to use checkbox cell type with default true/false values.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Nissan', 'Toyota', 'Honda', 'Mazda', 'Ford'],
    ['2017', false, false, false, false, false, false],
    ['2018', false, false, false, false, false, false],
    ['2019', false, false, false, false, false, false],
    ['2020', false, false, false, false, false, false]
  ],
  colHeaders: true,
  rowHeaders: true,
  height: 'auto',
  columns: [
    {},
    { type: 'checkbox' },
    { type: 'checkbox' },
    { type: 'checkbox' },
    { type: 'checkbox' },
    { type: 'checkbox' },
    { type: 'checkbox' }
  ],
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Initializing with Trimmed Rows in JavaScript
DESCRIPTION: Configuration to enable row trimming and specify initial rows to trim

LANGUAGE: javascript
CODE:
trimRows: [5, 10, 15],

----------------------------------------

TITLE: Execution Suspension Example - JavaScript
DESCRIPTION: Shows how to suspend and resume execution for operations that affect internal cache calculations.

LANGUAGE: javascript
CODE:
hot.suspendExecution();
const filters = hot.getPlugin('filters');

filters.addCondition(2, 'contains', ['3']);
filters.filter();
hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });
hot.resumeExecution();

----------------------------------------

TITLE: Including Handsontable CSS via Link Tags
DESCRIPTION: HTML link tags to include Handsontable's CSS files from a CDN.

LANGUAGE: html
CODE:
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/styles/handsontable.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/styles/ht-theme-main.min.css" />

----------------------------------------

TITLE: Configuring Handsontable Vue 3 Component
DESCRIPTION: JavaScript code that imports and configures the Handsontable Vue 3 component. It sets up the data, column headers, and other options for the data grid.

LANGUAGE: javascript
CODE:
import { createApp } from 'vue';
import { HotTable } from '@handsontable/vue3';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

const app = createApp({
  data() {
    return {
      hotSettings: {
        data: [
          ['', 'Ford', 'Volvo', 'Toyota', 'Honda'],
          ['2016', 10, 11, 12, 13],
          ['2017', 20, 11, 14, 13],
          ['2018', 30, 15, 12, 13]
        ],
        colHeaders: true,
        rowHeaders: true,
        height: 'auto',
        licenseKey: 'non-commercial-and-evaluation'
      }
    };
  },
  components: {
    HotTable
  }
});

app.mount('#example1');

----------------------------------------

TITLE: Default Column Headers Implementation in JavaScript/TypeScript
DESCRIPTION: Shows how to enable default column headers (A, B, C...) using the colHeaders option set to true.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ],
  colHeaders: true,
  rowHeaders: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Column Moving with Custom Headers in JavaScript
DESCRIPTION: Example showing how custom column headers move along with their columns when using the column moving feature, unlike default headers which stay in place.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example3');
const hot = new Handsontable(container, {
  data: [
    ['Tesla', 2017, 'black', 'black'],
    ['Nissan', 2018, 'blue', 'blue'],
    ['Chrysler', 2019, 'yellow', 'black'],
    ['Volvo', 2020, 'white', 'gray']
  ],
  colHeaders: ['One', 'Two', 'Three', 'Four'],
  manualColumnMove: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Implementing Non-Commercial License in React
DESCRIPTION: Demonstrates how to configure non-commercial license key with additional options in React component.

LANGUAGE: jsx
CODE:
<HotTable 
  autoWrapRow={true}
  autoWrapCol={true}
  licenseKey="non-commercial-and-evaluation" />

----------------------------------------

TITLE: Importing Handsontable CSS
DESCRIPTION: JavaScript import statements for Handsontable's CSS files when using a module bundler.

LANGUAGE: javascript
CODE:
import 'handsontable/styles/handsontable.min.css';
import 'handsontable/styles/ht-theme-main.min.css';

----------------------------------------

TITLE: Enabling multi-column sorting in React
DESCRIPTION: Enable sorting by multiple columns in a React component by setting the multiColumnSorting prop to true.

LANGUAGE: jsx
CODE:
<HotTable
  // enable sorting by multiple columns, for all columns
  multiColumnSorting={true}
/>

----------------------------------------

TITLE: Installing Handsontable via Package Manager
DESCRIPTION: Commands to install Handsontable using npm, Yarn, or pnpm package managers.

LANGUAGE: bash
CODE:
npm install handsontable

LANGUAGE: bash
CODE:
yarn add handsontable

LANGUAGE: bash
CODE:
pnpm add handsontable

----------------------------------------

TITLE: Implementing Strict Autocomplete Mode in JavaScript/TypeScript
DESCRIPTION: Configuration for strict mode autocomplete where only predefined values are allowed. Includes settings for allowInvalid behavior and demonstrates keyboard navigation handling.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example2');
const carData = ['BMW', 'Chrysler', 'Nissan', 'Suzuki', 'Toyota', 'Volvo'];
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 2),
  colHeaders: true,
  rowHeaders: true,
  height: 'auto',
  columns: [
    {
      type: 'autocomplete',
      source: carData,
      strict: true,
      allowInvalid: false
    }
  ],
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Specifying Hidden Columns by Default in Handsontable
DESCRIPTION: This example shows how to specify which columns should be hidden by default when initializing the Handsontable grid. It uses the 'columns' property within the 'hiddenColumns' configuration.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example2');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colHeaders: true,
  hiddenColumns: {
    columns: [1, 3, 5]
  },
  licenseKey: 'non-commercial-and-evaluation'
});

LANGUAGE: typescript
CODE:
const container = document.querySelector('#example2');
const hot = new Handsontable(container as HTMLElement, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colHeaders: true,
  hiddenColumns: {
    columns: [1, 3, 5]
  },
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Running Tests for Handsontable Demo in JavaScript
DESCRIPTION: Executes test specs for the Handsontable demo project. Requires the development server to be running before executing this command.

LANGUAGE: bash
CODE:
npm run test

----------------------------------------

TITLE: Implementing Commercial License Key in React
DESCRIPTION: Shows how to pass a commercial license key to Handsontable's React component.

LANGUAGE: jsx
CODE:
<HotTable settings={settings} licenseKey="00000-00000-00000-00000-00000" />

----------------------------------------

TITLE: Importing BasePlugin and registerPlugin in JavaScript
DESCRIPTION: Import the necessary components for creating a custom plugin in Handsontable.

LANGUAGE: javascript
CODE:
import { BasePlugin, registerPlugin } from 'handsontable/plugins';

----------------------------------------

TITLE: Implementing Language Change in Vue 3 Data Grid JavaScript
DESCRIPTION: This JavaScript code sets up a Vue 3 component that demonstrates language change in a Handsontable data grid. It includes data for the grid, available languages, and methods to handle language changes.

LANGUAGE: javascript
CODE:
import { HotTable } from '@handsontable/vue3';
import { registerLanguageDictionary, zhCN, deCH, plPL, esES, frFR } from 'handsontable/i18n';
import { ref } from 'vue';

registerLanguageDictionary(zhCN);
registerLanguageDictionary(deCH);
registerLanguageDictionary(plPL);
registerLanguageDictionary(esES);
registerLanguageDictionary(frFR);

export default {
  name: 'Languages',
  data() {
    return {
      hotSettings: {
        data: [
          ['A1', 'B1', 'C1', 'D1'],
          ['A2', 'B2', 'C2', 'D2'],
          ['A3', 'B3', 'C3', 'D3'],
          ['A4', 'B4', 'C4', 'D4'],
        ],
        colHeaders: true,
        rowHeaders: true,
        contextMenu: true,
        height: 'auto',
        licenseKey: 'non-commercial-and-evaluation'
      },
      language: 'en-US',
      availableLanguages: [
        { languageCode: 'en-US', languageName: 'English (United States)' },
        { languageCode: 'de-CH', languageName: 'Deutsch (Schweiz)' },
        { languageCode: 'es-ES', languageName: 'Español (Spain)' },
        { languageCode: 'fr-FR', languageName: 'Français (France)' },
        { languageCode: 'pl-PL', languageName: 'Polski (Poland)' },
        { languageCode: 'zh-CN', languageName: '中文 (China)' },
        { languageCode: 'zh-TW', languageName: '中文 (Taiwan)' }
      ]
    };
  },
  components: {
    HotTable
  }
};

----------------------------------------

TITLE: Customizing Context Menu with Specific Column Hiding Options in Handsontable
DESCRIPTION: This snippet demonstrates how to add specific column hiding options to the context menu in Handsontable. It uses the 'hidden_columns_show' and 'hidden_columns_hide' strings in the contextMenu configuration.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example5');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colHeaders: true,
  contextMenu: ['hidden_columns_show', 'hidden_columns_hide'],
  hiddenColumns: {
    columns: [1, 3, 5],
    indicators: true
  },
  licenseKey: 'non-commercial-and-evaluation'
});

LANGUAGE: typescript
CODE:
const container = document.querySelector('#example5');
const hot = new Handsontable(container as HTMLElement, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colHeaders: true,
  contextMenu: ['hidden_columns_show', 'hidden_columns_hide'],
  hiddenColumns: {
    columns: [1, 3, 5],
    indicators: true
  },
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Displaying UI Indicators for Hidden Columns in Handsontable
DESCRIPTION: This snippet demonstrates how to enable UI indicators for hidden columns in Handsontable. It sets the 'indicators' property to true within the 'hiddenColumns' configuration.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example3');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colHeaders: true,
  hiddenColumns: {
    columns: [1, 3, 5],
    indicators: true
  },
  licenseKey: 'non-commercial-and-evaluation'
});

LANGUAGE: typescript
CODE:
const container = document.querySelector('#example3');
const hot = new Handsontable(container as HTMLElement, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colHeaders: true,
  hiddenColumns: {
    columns: [1, 3, 5],
    indicators: true
  },
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Working with Arrays of Objects in Vue 2 HotColumn
DESCRIPTION: This example demonstrates how to work with an array of objects for the `hot-column` component by providing precise information about the data structure for the columns.

LANGUAGE: html
CODE:
<div id="example2">
  <hot-table :settings="hotSettings">
    <hot-column v-for="(column, index) in columns" :key="index" v-bind="column"></hot-column>
  </hot-table>
</div>

LANGUAGE: javascript
CODE:
import Vue from 'vue';
import { HotTable } from '@handsontable/vue';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.css';

registerAllModules();

new Vue({
  el: '#example2',
  data() {
    return {
      hotSettings: {
        data: [
          { id: 1, name: { first: 'John', last: 'Smith' }, address: 'Washington Street 42', likes: { food: 'Pizza' } },
          { id: 2, name: { first: 'Joe', last: 'Dalton' }, address: 'Melrose Avenue 5', likes: { food: 'Pasta' } },
          { id: 3, name: { first: 'Bob', last: 'Black' }, address: 'Bourbon Street 11', likes: { food: 'Dim sum' } },
          { id: 4, name: { first: 'Max', last: 'Brown' }, address: 'Cedar Avenue 47', likes: { food: 'Sushi' } },
        ],
        licenseKey: 'non-commercial-and-evaluation'
      },
      columns: [
        { title: 'ID', data: 'id', type: 'numeric', readOnly: true },
        { title: 'First name', data: 'name.first' },
        { title: 'Last name', data: 'name.last' },
        { title: 'Address', data: 'address' },
        {
          title: 'Favorite food',
          data: 'likes.food',
          type: 'dropdown',
          source: ['Sushi', 'Dim sum', 'Ramen', 'Churrasco', 'Pasta', 'Pizza']
        }
      ]
    };
  },
  components: {
    HotTable
  }
});

----------------------------------------

TITLE: Importing Handsontable CSS in React
DESCRIPTION: Import statements for including Handsontable's base CSS rules and main theme variables in a React component.

LANGUAGE: jsx
CODE:
// Base CSS rules
import 'handsontable/styles/handsontable.min.css';
// Main theme variables
import 'handsontable/styles/ht-theme-main.min.css';

----------------------------------------

TITLE: Setting Grid Size in JavaScript Configuration
DESCRIPTION: Demonstrates different ways to set the width and height of a Handsontable grid using JavaScript configuration objects. Includes examples of pixel values, percentages, and numeric values.

LANGUAGE: javascript
CODE:
{
  width: '100px',
  height: '100px',
}

LANGUAGE: javascript
CODE:
{
  width: '75%',
  height: '75%',
}

LANGUAGE: javascript
CODE:
{
  width: 100,
  height: 100,
}

----------------------------------------

TITLE: Setting Grid Size in JavaScript Configuration
DESCRIPTION: Demonstrates different ways to set the width and height of a Handsontable grid using JavaScript configuration objects. Includes examples of pixel values, percentages, and numeric values.

LANGUAGE: javascript
CODE:
{
  width: '100px',
  height: '100px',
}

LANGUAGE: javascript
CODE:
{
  width: '75%',
  height: '75%',
}

LANGUAGE: javascript
CODE:
{
  width: 100,
  height: 100,
}

----------------------------------------

TITLE: Registering Handsontable Modules
DESCRIPTION: Code to register all Handsontable modules for full functionality.

LANGUAGE: jsx
CODE:
import { registerAllModules } from 'handsontable/registry';

registerAllModules();

----------------------------------------

TITLE: Setting Invalid Cell Class Name in JavaScript Handsontable
DESCRIPTION: Demonstrates how to set a custom class name for invalid cells in Handsontable. This can be done for the entire table or for specific columns.

LANGUAGE: javascript
CODE:
// For the entire table
invalidCellClassName: 'myInvalidClass'

// For specific columns
columns: [
  { data: 'firstName', invalidCellClassName: 'myInvalidClass' },
  { data: 'lastName', invalidCellClassName: 'myInvalidSecondClass' },
  { data: 'address' }
]

----------------------------------------

TITLE: Importing Optional Modules for Handsontable in Vue 3
DESCRIPTION: Import optional modules for Handsontable, such as the numeric cell type and UndoRedo plugin, along with their registering functions. This allows for selective inclusion of specific Handsontable features.

LANGUAGE: javascript
CODE:
import {
  registerCellType, // cell types' registering function
  NumericCellType,
} from 'handsontable/cellTypes';

import {
  registerPlugin, // plugins' registering function
  UndoRedo,
} from 'handsontable/plugins';

----------------------------------------

TITLE: Enabling Row Trimming in React
DESCRIPTION: Basic configuration to enable the TrimRows plugin in React component

LANGUAGE: jsx
CODE:
<HotTable
  trimRows={true}
/>

----------------------------------------

TITLE: Importing Handsontable CSS Files
DESCRIPTION: Required CSS imports for Handsontable styling, including base rules and main theme variables.

LANGUAGE: jsx
CODE:
// Base CSS rules
import 'handsontable/styles/handsontable.min.css';
// Main theme variables
import 'handsontable/styles/ht-theme-main.min.css';

----------------------------------------

TITLE: Column Moving with Default Headers in JavaScript
DESCRIPTION: Example demonstrating how default column headers (A, B, C) remain in place when columns are moved, showing the default behavior of the column moving feature.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example2');
const hot = new Handsontable(container, {
  data: [
    ['Tesla', 2017, 'black', 'black'],
    ['Nissan', 2018, 'blue', 'blue'],
    ['Chrysler', 2019, 'yellow', 'black'],
    ['Volvo', 2020, 'white', 'gray']
  ],
  colHeaders: true,
  manualColumnMove: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Registering All Modules for React/Angular/Vue Wrappers in JavaScript
DESCRIPTION: Code snippet demonstrating how to register all Handsontable modules for React, Angular, or Vue wrappers using the new registerAllModules() method.

LANGUAGE: javascript
CODE:
// import the registerAllModules() method
import { registerAllModules } from 'handsontable/registry';

// register all Handsontable modules
registerAllModules();

----------------------------------------

TITLE: Custom Plugin Settings Update Configuration
DESCRIPTION: Demonstrates how to configure a custom plugin's SETTING_KEYS to control when the plugin gets updated during updateSettings() calls.

LANGUAGE: javascript
CODE:
static get SETTING_KEYS() {
  return true;
}

----------------------------------------

TITLE: React Component Data Update in Handsontable 12.0
DESCRIPTION: Shows how to properly update data in a React component using Handsontable 12.0, including both updateSettings() and loadData() approaches with proper component references.

LANGUAGE: jsx
CODE:
import { useRef } from 'react';

const hotTableComponentRef = useRef(null);

// Handsontable 12.0: this doesn't reset your configuration options and index mapper information
hotTableComponentRef.current.hotInstance.updateSettings({
  data: newDataset
});

// Handsontable 12.0: this does reset your configuration options and index mapper information
hotTableComponentRef.current.hotInstance.loadData(newDataset);

----------------------------------------

TITLE: Loading Handsontable via CDN
DESCRIPTION: HTML code to include Handsontable and its Vue wrapper via CDN, including required CSS stylesheets.

LANGUAGE: html
CODE:
<script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@handsontable/vue/dist/vue-handsontable.min.js"></script>

<link href="https://cdn.jsdelivr.net/npm/handsontable/styles/handsontable.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/handsontable/styles/ht-theme-main.min.css" rel="stylesheet">

----------------------------------------

TITLE: Using HotTable Component in React
DESCRIPTION: JSX code demonstrating how to use the HotTable component in a React application with sample data and configuration.

LANGUAGE: jsx
CODE:
import { HotTable } from '@handsontable/react-wrapper';

<div class="ht-theme-main-dark-auto">
  <HotTable
    data={[
      ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
      ['2019', 10, 11, 12, 13],
      ['2020', 20, 11, 14, 13],
      ['2021', 30, 15, 12, 13]
    ]}
    rowHeaders={true}
    colHeaders={true}
    height="auto"
    autoWrapRow={true}
    autoWrapCol={true}
    licenseKey="non-commercial-and-evaluation" // for non-commercial use only
  />
</div>

----------------------------------------

TITLE: Installing Handsontable Vue Wrapper via npm
DESCRIPTION: Command to install Handsontable and its Vue wrapper using npm package manager.

LANGUAGE: bash
CODE:
npm install handsontable @handsontable/vue

----------------------------------------

TITLE: Changing cell rendering approach
DESCRIPTION: Changed the approach to how the table is rendered by reusing cell nodes for improved performance.

LANGUAGE: JavaScript
CODE:
// Table rendering now reuses cell nodes

----------------------------------------

TITLE: Updating Data Settings in Handsontable 12.0
DESCRIPTION: Demonstrates the difference between using updateSettings() and loadData() methods for updating data in Handsontable 12.0. The loadData() method resets configuration options and index mapper information, while updateSettings() does not.

LANGUAGE: javascript
CODE:
// Handsontable 12.0: this doesn't reset your configuration options and index mapper information
hotInstance.updateSettings({
  data: newDataset
});

// Handsontable 12.0: this does reset your configuration options and index mapper information
hotInstance.loadData(newDataset);

----------------------------------------

TITLE: Including Full Handsontable Distribution
DESCRIPTION: How to include the complete Handsontable distribution with all dependencies bundled. Shows both regular and minified versions of the required files.

LANGUAGE: html
CODE:
<script src="dist/handsontable.full.js"></script>
<link href="dist/handsontable.full.css" rel="stylesheet">

LANGUAGE: html
CODE:
<script src="dist/handsontable.full.min.js"></script>
<link href="dist/handsontable.full.min.css" rel="stylesheet">

----------------------------------------

TITLE: Loading Handsontable Vue 3 Wrapper from CDN
DESCRIPTION: HTML snippet for loading Handsontable and its Vue 3 wrapper directly from jsDelivr CDN. This method is useful for quick prototyping or when you don't want to use a build system.

LANGUAGE: html
CODE:
<script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@handsontable/vue3/dist/vue-handsontable.min.js"></script>

<link href="https://cdn.jsdelivr.net/npm/handsontable/styles/handsontable.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/handsontable/styles/ht-theme-main.min.css" rel="stylesheet">

----------------------------------------

TITLE: Custom Data Schema Implementation
DESCRIPTION: Example of implementing a custom data schema for handling empty data sources and defining new row structures.



----------------------------------------

TITLE: Custom Data Schema Implementation
DESCRIPTION: Example of implementing a custom data schema for handling empty data sources and defining new row structures.



----------------------------------------

TITLE: Adding Column Hiding Options to Context Menu in Handsontable
DESCRIPTION: This example shows how to add column hiding options to the context menu in Handsontable. It enables both the ContextMenu and HiddenColumns plugins to automatically include hide/unhide options.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example4');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colHeaders: true,
  contextMenu: true,
  hiddenColumns: {
    columns: [1, 3, 5],
    indicators: true
  },
  licenseKey: 'non-commercial-and-evaluation'
});

LANGUAGE: typescript
CODE:
const container = document.querySelector('#example4');
const hot = new Handsontable(container as HTMLElement, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colHeaders: true,
  contextMenu: true,
  hiddenColumns: {
    columns: [1, 3, 5],
    indicators: true
  },
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Migration: Custom Renderer Implementation in React Wrapper
DESCRIPTION: Examples showing the old and new syntax for implementing custom renderers in React wrapper, including TypeScript props definition.

LANGUAGE: jsx
CODE:
<HotColumn width={250}>\n  <RendererComponent hot-renderer />\n</HotColumn>

LANGUAGE: jsx
CODE:
<HotColumn width={250} renderer={RendererComponent} />

LANGUAGE: tsx
CODE:
import { HotRendererProps } from '@handsontable/react-wrapper';\n\nconst MyRenderer = (props: HotRendererProps) => {\n  const { value, row, col, cellProperties } = props;\n  return (\n    <div style={{ backgroundColor: cellProperties.readOnly ? '#f0f0f0' : '#fff' }}>\n      {`${value.name}: ${value.value} at (${row}, ${col})`}\n    </div>\n  );\n};

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to launch the local development server on port 8080

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Running Project Tests
DESCRIPTION: Command to execute the project's test suite after the development server is running.

LANGUAGE: shell
CODE:
npm run test

----------------------------------------

TITLE: Custom Column Headers Using Array in JavaScript/TypeScript
DESCRIPTION: Demonstrates setting custom column header labels using an array of strings instead of default alphabetical headers.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example2');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ],
  colHeaders: ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
  rowHeaders: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Installing Dependencies with NPM
DESCRIPTION: Command to install all required project dependencies using NPM package manager

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Initializing Handsontable with Column Virtualization in TypeScript
DESCRIPTION: This TypeScript snippet shows how to set up Handsontable with 1000 rows and 1000 columns, using column virtualization for efficient rendering.

LANGUAGE: typescript
CODE:
import Handsontable from 'handsontable';
import 'handsontable/dist/handsontable.full.min.css';

const container: HTMLElement | null = document.querySelector('#example1');

if (container) {
  const hot = new Handsontable(container, {
    data: Handsontable.helper.createSpreadsheetData(1000, 1000),
    colHeaders: true,
    rowHeaders: true,
    height: 450,
    licenseKey: 'non-commercial-and-evaluation'
  });
}

----------------------------------------

TITLE: Warning Messages for Deprecated Features in React Wrapper
DESCRIPTION: Console warning messages displayed when using deprecated renderer and editor implementations in the new React wrapper.

LANGUAGE: txt
CODE:
Obsolete Renderer Warning:\nProviding a component-based renderer using `hot-renderer`-annotated component is no longer supported. \nPass your component using `renderer` prop of the `HotTable` or `HotColumn` component instead.\n\nObsolete Editor Warning:\nProviding a component-based editor using `hot-editor`-annotated component is no longer supported. \nPass your component using `editor` prop of the `HotTable` or `HotColumn` component instead.

----------------------------------------

TITLE: Starting Development Server for Handsontable Demo
DESCRIPTION: Command to launch the local development server on port 8080.

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Git Commands for Submitting New Code Example
DESCRIPTION: Lists the Git commands necessary to stage, commit, and push the new code example for review.

LANGUAGE: bash
CODE:
git add examples
git commit
git push

----------------------------------------

TITLE: Column Headers with Custom CSS Styling
DESCRIPTION: Example of applying custom CSS styles to column headers using headerClassName option.

LANGUAGE: css
CODE:
.custom-header {
  color: #000;
  font-weight: 700;
  background-color: #B9E3D9;
}

----------------------------------------

TITLE: Initializing Handsontable with Undo/Redo in JavaScript
DESCRIPTION: This snippet demonstrates how to set up a basic Handsontable instance with undo and redo functionality enabled. It includes sample data and configuration options.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable';
import 'handsontable/dist/handsontable.full.min.css';

const container = document.querySelector('#example');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ],
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  autoWrapRow: true,
  autoWrapCol: true,
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Migration: HotColumn Usage with Custom Editor
DESCRIPTION: Examples showing the old and new syntax for implementing custom editors in HotColumn components.

LANGUAGE: jsx
CODE:
<HotColumn width={250}>\n  <EditorComponent hot-editor />\n</HotColumn>

LANGUAGE: jsx
CODE:
<HotColumn width={250} editor={EditorComponent} />

----------------------------------------

TITLE: Starting Local Development Server for Handsontable Demo
DESCRIPTION: Command to start the local development server for the Handsontable demo project. After running this command, the project can be viewed at http://localhost:8080.

LANGUAGE: shell
CODE:
npm run start

----------------------------------------

TITLE: Enabling Default Context Menu in JavaScript
DESCRIPTION: This snippet demonstrates how to enable the default context menu in Handsontable using JavaScript. It initializes a new Handsontable instance with basic data and enables the context menu with default options.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ],
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  autoWrapRow: true,
  licenseKey: 'non-commercial-and-evaluation',
  contextMenu: true
});

----------------------------------------

TITLE: Updating getNearestNotHiddenIndex Method Usage in JavaScript
DESCRIPTION: Demonstrates the migration from deprecated getFirstNotHiddenIndex() to getNearestNotHiddenIndex() method. The new method requires fewer parameters and provides improved functionality for finding non-hidden indices.

LANGUAGE: javascript
CODE:
// Before
handsontableInstance.getFirstNotHiddenIndex(0, 1, true, 1);

// After
handsontableInstance.getNearestNotHiddenIndex(0, 1, true);

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to launch the local development server which makes the project accessible at http://localhost:8080.

LANGUAGE: shell
CODE:
npm run start

----------------------------------------

TITLE: Including Handsontable Theme CSS via CDN
DESCRIPTION: Shows how to include Handsontable's base and theme CSS files using a CDN link in HTML.

LANGUAGE: html
CODE:
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/styles/handsontable.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/styles/ht-theme-main.min.css" />

----------------------------------------

TITLE: Implementing Vue 3 Data Grid with Vuex Store
DESCRIPTION: This snippet demonstrates how to set up a Vue 3 application with Vuex store integration for a Handsontable data grid. It includes a readOnly toggle and displays the current Vuex store state.

LANGUAGE: html
CODE:
<div id="example1">
  <h3>Vuex store dump</h3>
  <label><input type="checkbox" v-model="readOnly"> Read-only</label>
  <hot-table :settings="hotSettings"></hot-table>
  <pre>{{ JSON.stringify(this.$store.state, null, 2) }}</pre>
</div>

----------------------------------------

TITLE: Adding Conditional Keyboard Shortcut
DESCRIPTION: Shows how to add a keyboard shortcut that only runs when a specific condition is met using runOnlyIf parameter.

LANGUAGE: javascript
CODE:
const gridContext = hot.getShortcutManager().getContext('grid');

gridContext.addShortcut({
  group: 'group_ID',
  runOnlyIf: () => hot.getSelected() !== void 0,
  keys: [['enter']],
  callback: () => {},
});

----------------------------------------

TITLE: Updating Handsontable Hook Names in JavaScript
DESCRIPTION: Rename the 'beforeRender' and 'afterRender' hooks to 'beforeViewRender' and 'afterViewRender' respectively in your JavaScript application.

LANGUAGE: javascript
CODE:
// Before
beforeRender: function() { ... }
afterRender: function() { ... }

// After
beforeViewRender: function() { ... }
afterViewRender: function() { ... }

----------------------------------------

TITLE: Including Handsontable with Theme-Based Styles
DESCRIPTION: Implementation using theme-based styling approach, supporting 'main' and 'horizon' themes. Shows both standard and minified versions of required files.

LANGUAGE: html
CODE:
<script src="dist/handsontable.full.js"></script>
<link href="styles/handsontable.css" rel="stylesheet">
<link href="styles/ht-theme-[name].css" rel="stylesheet">

LANGUAGE: html
CODE:
<script src="dist/handsontable.full.min.js"></script>
<link href="styles/handsontable.min.css" rel="stylesheet">
<link href="styles/ht-theme-[name].min.css" rel="stylesheet">

----------------------------------------

TITLE: Running Tests for Handsontable Vue Demo
DESCRIPTION: Command to execute test specifications after starting the development server

LANGUAGE: bash
CODE:
npm run test

----------------------------------------

TITLE: Implementing Row Freezing in JavaScript/TypeScript with Handsontable
DESCRIPTION: This snippet demonstrates how to create a Handsontable instance with two fixed rows at the top. It sets up the grid with sample data and configures the fixedRowsTop option.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(100, 12),
  width: '100%',
  height: 320,
  rowHeaders: true,
  colHeaders: true,
  fixedRowsTop: 2,
  licenseKey: 'non-commercial-and-evaluation'
});

LANGUAGE: typescript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container as HTMLElement, {
  data: Handsontable.helper.createSpreadsheetData(100, 12),
  width: '100%',
  height: 320,
  rowHeaders: true,
  colHeaders: true,
  fixedRowsTop: 2,
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Starting Development Server for Handsontable Vue Demo
DESCRIPTION: Command to launch the local development server on port 8080

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Function-based Row Height Configuration
DESCRIPTION: Example demonstrating dynamic row height calculation using a function that multiplies the row index by 20px to determine each row's height.

LANGUAGE: javascript
CODE:
const data = [
  ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
  ['2019', 10, 11, 12, 13],
  ['2020', 20, 11, 14, 13],
  ['2021', 30, 15, 12, 13]
];

const container = document.querySelector('#example3');

const hot = new Handsontable(container, {
  data,
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  rowHeights: function(index) {
    return (index + 1) * 20;
  },
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Setting Source Data with New API
DESCRIPTION: Shows how to set source data using the new setSourceDataAtCell method instead of direct reference modification

LANGUAGE: javascript
CODE:
hotInstance.setSourceDataAtCell(0, 0, 'A1');

----------------------------------------

TITLE: Installing Dependencies for Handsontable React Demo
DESCRIPTION: Command to install all required npm dependencies for the project

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Starting Development Server for Handsontable Demo
DESCRIPTION: Command to launch the local development server on port 8080

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Programmatically Triggering Copy and Cut in Handsontable
DESCRIPTION: This example shows how to programmatically trigger copy and cut operations in Handsontable. It sets up a Handsontable instance, selects a cell, and provides buttons to execute copy and cut commands.

LANGUAGE: html
CODE:
<div id="example3"></div>
<div class="controls">
  <button id="button1">Copy selected cell</button>
  <button id="button2">Cut selected cell</button>
</div>

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example3');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 5),
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

const copyButton = document.querySelector('#button1');
const cutButton = document.querySelector('#button2');

copyButton.addEventListener('click', () => {
  hot.selectCell(0, 0);

  if (!hot.isListening()) {
    hot.listen();
  }

  document.execCommand('copy');
});

cutButton.addEventListener('click', () => {
  hot.selectCell(0, 0);

  if (!hot.isListening()) {
    hot.listen();
  }

  document.execCommand('cut');
});

----------------------------------------

TITLE: Running Development Server for Vue 3 TypeScript Project
DESCRIPTION: Starts the development server with hot-reload functionality for the Vue 3 TypeScript project.

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: Custom Filter Menu Width CSS
DESCRIPTION: CSS styling to adjust the width of the filter dropdown menu container.

LANGUAGE: css
CODE:
.handsontable .htDropdownMenu table.htCore {
  width: 300px !important;
}

----------------------------------------

TITLE: Installing Handsontable Vue 3 Packages
DESCRIPTION: Command to install Handsontable and its Vue 3 wrapper component using npm package manager.

LANGUAGE: bash
CODE:
npm install handsontable @handsontable/vue3

----------------------------------------

TITLE: Running Development Server for Vue 3 TypeScript Project
DESCRIPTION: Starts the development server with hot-reload functionality for the Vue 3 TypeScript project.

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to launch the local development server which makes the project available at http://localhost:8080.

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Basic Redux Integration with Handsontable React
DESCRIPTION: Simple example showing how to integrate Redux state management with Handsontable's React wrapper component and a readOnly toggle switch. Demonstrates basic state management and component updates.

LANGUAGE: JSX
CODE:
@[code](@/content/guides/getting-started/react-redux/react/example1.jsx)

LANGUAGE: TSX
CODE:
@[code](@/content/guides/getting-started/react-redux/react/example1.tsx)

----------------------------------------

TITLE: Basic Redux Integration with Handsontable React
DESCRIPTION: Simple example showing how to integrate Redux state management with Handsontable's React wrapper component and a readOnly toggle switch. Demonstrates basic state management and component updates.

LANGUAGE: JSX
CODE:
@[code](@/content/guides/getting-started/react-redux/react/example1.jsx)

LANGUAGE: TSX
CODE:
@[code](@/content/guides/getting-started/react-redux/react/example1.tsx)

----------------------------------------

TITLE: Running Tests for Handsontable Demo
DESCRIPTION: Executes test specs for the Handsontable demo project. The development server must be running before executing this command.

LANGUAGE: bash
CODE:
npm run test

----------------------------------------

TITLE: Adding Custom Keyboard Shortcut in Grid Context
DESCRIPTION: Demonstrates how to add a custom keyboard shortcut in the grid context with group assignment and callback function.

LANGUAGE: javascript
CODE:
const gridContext = hot.getShortcutManager().getContext('grid');

gridContext.addShortcut({
  group: 'group_ID',
  keys: [['enter']],
  callback: () => {},
});

----------------------------------------

TITLE: Vue 3 Handsontable Component Implementation
DESCRIPTION: JavaScript implementation of a Vue 3 component with Handsontable integration, including data management, instance referencing, and event handling methods.

LANGUAGE: javascript
CODE:
import { HotTable } from '@handsontable/vue3';
import { registerAllModules } from 'handsontable/registry';
import { createApp } from 'vue';

registerAllModules();

const App = {
  data() {
    return {
      data: [
        ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
        ['2019', 10, 11, 12, 13],
        ['2020', 20, 11, 14, 13],
        ['2021', 30, 15, 12, 13]
      ],
      hotSettings: {
        licenseKey: 'non-commercial-and-evaluation'
      }
    };
  },
  methods: {
    swapHotData() {
      this.data = [
        ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],
        ['2019', 10, 11, 12, 13],
        ['2020', 20, 11, 14, 13],
        ['2021', 30, 15, 12, 13]
      ];
    },
    addRow() {
      const hotInstance = this.$refs.hotTableComponent.hotInstance;
      hotInstance.alter('insert_row');
    },
    getHotInstance() {
      console.log(this.$refs.hotTableComponent.hotInstance);
    }
  },
  components: {
    HotTable
  }
};

createApp(App).mount('#example1');

----------------------------------------

TITLE: Building Vue 3 Project for Production
DESCRIPTION: Command to type-check, compile and minify the project for production deployment

LANGUAGE: sh
CODE:
npm run build

----------------------------------------

TITLE: Running Test Suite
DESCRIPTION: Command to execute the project's test specifications after starting the development server.

LANGUAGE: bash
CODE:
npm run test

----------------------------------------

TITLE: Custom Editor Implementation
DESCRIPTION: Demonstrates the updated way to create custom editors using data-hot-input attribute instead of className

LANGUAGE: javascript
CODE:
createElements() {
  this.TEXTAREA.className = 'anythingYouWant';
  this.TEXTAREA.setAttribute('data-hot-input', true);
}

----------------------------------------

TITLE: Vue 3 Handsontable Template Integration
DESCRIPTION: HTML template structure for integrating Handsontable within a Vue 3 component, including hot-table component declaration and button controls for data manipulation.

LANGUAGE: html
CODE:
<div id="example1">
  <div class="example-wrapper">
    <div class="example">
      <div id="example1" class="hot">
        <HotTable
          ref="hotTableComponent"
          :settings="hotSettings"
          :data="data"
          :row-headers="true"
          :col-headers="true"
          height="300"
          width="300"
          :license-key="licenseKey"
        />
      </div>
      <div class="controls">
        <button @click="swapHotData" name="button1">Load new data</button>
        <button @click="addRow" name="button2">Add row</button>
        <button @click="getHotInstance" name="button3">Get HoT instance</button>
      </div>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Importing Base Handsontable Module in Vue 2
DESCRIPTION: Demonstrates importing the required base Handsontable module in the application entry point.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable/base';

----------------------------------------

TITLE: Starting Development Server for Handsontable Angular Demo
DESCRIPTION: Launches the local development server for the Handsontable Angular demo project. After running this command, the project can be accessed at http://localhost:8080.

LANGUAGE: shell
CODE:
npm run start

----------------------------------------

TITLE: Example Data Structure for Parent-Child Rows
DESCRIPTION: Sample data structure showing how to format data for use with the NestedRows plugin, demonstrating Grammy nominees categorization.

LANGUAGE: javascript
CODE:
const data = [
  {
    category: 'Best Rock Performance',
    artist: null,
    title: null,
    __children: [
      {
        category: null,
        artist: 'Alabama Shakes',
        title: 'Don\'t Wanna Fight'
      },
      {
        category: null,
        artist: 'Florence & The Machine',
        title: 'What Kind Of Man'
      }
    ]
  }
];

----------------------------------------

TITLE: Documentation Directory Structure
DESCRIPTION: Directory structure showing the organization of documentation files, including VuePress configuration, content, and Docker setup.

LANGUAGE: bash
CODE:
docs                            # All documentation files
├── .vuepress                   # All VuePress files
│   ├── components              # Vue components
│   ├── containers              # Markdown containers
│   │   ├── examples            # Code examples container
│   │   └── sourceCodeLink.js   # `source-code-link` container.
│   ├── handsontable-manager    # A module that runs Handsontable examples in different Handsontable versions and frameworks
│   ├── plugins                 # VuePress plugins
|   |   ├── active-header-links                # Plugin responsible for updating the URL with hash after scrolling the page to the nearest anchor
|   |   ├── dump-docs-data                     # Plugin responsible for generating the all available Docs version and canonical URLs to the JSON file. Then, the file is consumed by other Docs Docker images as source of true about Docs versions and canonicals.
|   |   ├── extend-page-data                   # Plugin responsible for extending `$page` object and rewriting some properties to add framework ID/name
|   |   ├── generate-nginx-redirects           # Plugin responsible for generating nginx redirects
|   |   ├── generate-nginx-variables           # Plugin responsible for generating nginx variables
|   |   ├── markdown-it-header-injection       # Plugin responsible for injecting `<FRAMEWORK NAME> Data Grid` string before the first header
|   |   ├── markdown-it-conditional-container  # Plugin responsible for creating conditional containers used for displaying/hiding blocks of content relevant to specific frameworks
│   ├── public                  # The documentation's public (static) assets
│   ├── theme                   # Theme overwrites and customizations
│   ├── tools                   # Our custom documentation tools
│   │   ├── build.mjs           # Builds the documentation for staging or production
│   │   ├── check-links.js      # The documentation's link checker
│   │   ├── jsdoc-convert       # JSDoc-to-Markdown converter
│   │   ├── utils.js            # Tools utilities
│   │   ├── watch.mjs           # Watch script for running local server
│   ├── config.js               # VuePress configuration
│   ├── docs-links.js           # Lets us link within the currently-selected docs version and framework with `@` (e.g. [link](@/guides/path/file/file.md).)
│   ├── enhanceApp.js           # VuePress app-level enhancements
│   ├── helpers.js              # Common helpers that set up sidebars and the documentation version and framework picker
│   └── highlight.js            # Code highlight configuration
├── docker                      # Docker configuration
│   ├── ...                     # Docker configuration files
│   └── redirects.conf          # File that allows create custom redirects for documentation
├── content                     # The documentation content files
│   ├── api                     # The API reference output, generated automatically from JSDoc. Do not edit for "next" Docs version!
│   ├── guides                  # The guides' source files: Markdown content
│   └── sidebars.js             # Sidebars configuration
├── .build-tmp                  # Temporary directory created for storing symlinked directories, containing .MD files. It's needed for generating multi-frameworked Docs content.
│   ├── javascript-data-grid    # Symbolic link to content directory. Do not edit! Make changes in the source content directory.
│   └── react-data-grid         # As above

----------------------------------------

TITLE: Setting Automatic Layout Direction in Handsontable
DESCRIPTION: Shows how to set Handsontable's layout direction automatically based on the HTML document's 'dir' attribute. The RTL layout is inherited from a 'dir' attribute in the DOM tree.

LANGUAGE: html
CODE:
<div dir="rtl">
  <div id="example2"></div>
</div>

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable';
import 'handsontable/dist/handsontable.full.min.css';

const container = document.querySelector('#example2');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  layoutDirection: 'inherit',
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Custom Editor Implementation - Vue 3 JavaScript
DESCRIPTION: JavaScript code demonstrating the implementation of a custom editor class for Handsontable in Vue 3. Shows how to extend the default TextEditor with custom functionality.

LANGUAGE: javascript
CODE:
import { HotTable } from '@handsontable/vue3';
import { TextEditor } from 'handsontable/editors/textEditor';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

registerAllModules();

class CustomEditor extends TextEditor {
  createElements() {
    super.createElements();

    this.TEXTAREA = document.createElement('input');
    this.TEXTAREA.setAttribute('placeholder', 'Custom placeholder');
    this.textareaStyle = this.TEXTAREA.style;
    this.TEXTAREA_PARENT.innerText = '';
    this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
  }
}

export default {
  data() {
    return {
      hotData: [
        ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
        ['2019', 10, 11, 12, 13],
        ['2020', 20, 11, 14, 13],
        ['2021', 30, 15, 12, 13]
      ],
      CustomEditor
    };
  },
  components: {
    HotTable
  }
};

----------------------------------------

TITLE: Vue 2 Template with Custom Attributes
DESCRIPTION: HTML template showing how to apply custom ID, class and style attributes to a HotTable component in Vue 2.

LANGUAGE: html
CODE:
<div id="example1">
  <hot-table
    id="my-custom-id"
    class="my-custom-class"
    style="height: 200px; overflow: hidden;"
    :settings="hotSettings"
  >
  </hot-table>
</div>

----------------------------------------

TITLE: Production Deployment Reversion - Docker Commands
DESCRIPTION: Series of Docker commands to revert a production deployment to a previous version using commit hash tags.

LANGUAGE: bash
CODE:
docker pull docker.pkg.github.com/handsontable/handsontable/handsontable-documentation:v12.1-[COMMIT_HASH]

docker tag docker.pkg.github.com/handsontable/handsontable/handsontable-documentation:v12.1-[COMMIT_HASH] docker.pkg.github.com/handsontable/handsontable/handsontable-documentation:v12.1

docker push docker.pkg.github.com/handsontable/handsontable/handsontable-documentation:v12.1

----------------------------------------

TITLE: Building Framework Wrappers
DESCRIPTION: Commands for building various framework-specific wrapper packages

LANGUAGE: shell
CODE:
# From root directory
npm run in react build
npm run in angular build
npm run in vue build
npm run in vue3 build

----------------------------------------

TITLE: Creating Handsontable Container
DESCRIPTION: HTML markup for creating a container element for the Handsontable grid.

LANGUAGE: html
CODE:
<div id="example" class="ht-theme-main-dark-auto"></div>

----------------------------------------

TITLE: Custom Editor Example - HTML Template in Vue 3
DESCRIPTION: HTML template structure for implementing a custom editor in a Vue 3 Handsontable component. Demonstrates the basic layout and component usage.

LANGUAGE: html
CODE:
<template>
  <div id="example1">
    <HotTable :data="hotData" :rowHeaders="true" :colHeaders="true" :editor="CustomEditor" />
  </div>
</template>

----------------------------------------

TITLE: Importing Handsontable Styles
DESCRIPTION: CSS imports for required Handsontable stylesheets.

LANGUAGE: css
CODE:
@import '~handsontable/styles/handsontable.min.css';
@import '~handsontable/styles/ht-theme-main.min.css';

----------------------------------------

TITLE: Production Environment Documentation Deployment - Docker Commands
DESCRIPTION: Commands for building and pushing documentation to the production environment using Docker.

LANGUAGE: bash
CODE:
npm run docs:docker:build:production

docker push docker.pkg.github.com/handsontable/handsontable/handsontable-documentation:v12.1

----------------------------------------

TITLE: Row Hiding with Default Hidden Rows
DESCRIPTION: Configure Handsontable to hide specific rows by default using an array of row indexes.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example2');
const hot = new Handsontable(container, {
  data: data,
  rowHeaders: true,
  colHeaders: true,
  hiddenRows: {
    rows: [1, 3, 5]
  },
  width: '100%',
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Copying Handsontable Example to Separate Repository
DESCRIPTION: This bash script demonstrates how to copy a Handsontable code example into a new Git repository, including handling of symlinks and dependency installation.

LANGUAGE: bash
CODE:
# make a local clone of the repo, if you haven't already
git clone https://github.com/handsontable/handsontable.git

# verify that you are in the folder of the example by checking that the README.md file is the one that you are reading right now
cat README.md

# if it exists, delete the "node_modules" folder of the example, because our NPM workspace sets it up as a symlink in the monorepo (which will not be useful in your fork)
rm -rf node_modules

# copy the example into a new folder called "forked-example" that is a sibling folder of the monorepo
cp -r . ../../../../../../forked-example

# go to your fork
cd ../../../../../../forked-example

# if you want, initiate a new Git repo there
git init
git add .
git commit -m "initial commit in my fork of the Handsontable example"

# install dependencies and start the example
npm install
npm run start

----------------------------------------

TITLE: Setting Column-Level Locale in JavaScript
DESCRIPTION: Configuration example demonstrating how to set different locales for individual columns in Handsontable. Sets Polish, German, and Japanese locales for three different columns.

LANGUAGE: javascript
CODE:
const hot = new Handsontable(container, {
  columns: [
    {
      // set the first column's locale to Polish
      locale: 'pl-PL',
    },
    {
      // set the second column's locale to German
      locale: 'de-DE',
    },
    {
      // set the third column's locale to Japanese
      locale: 'ja-JP',
    },
  ],
});

----------------------------------------

TITLE: Vue 3 Custom Cell Renderer Template
DESCRIPTION: HTML template for a Vue 3 component implementing a custom cell renderer using Handsontable. Defines the basic structure for a data grid with custom rendering.

LANGUAGE: html
CODE:
<div id="example1">
  <hot-table :settings="hotSettings"></hot-table>
</div>

----------------------------------------

TITLE: Implementing Row Freezing in React with Handsontable
DESCRIPTION: This snippet shows how to use the Handsontable component in a React application to create a grid with two fixed rows at the top. It uses the HotTable component and sets the necessary props.

LANGUAGE: jsx
CODE:
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

export const ExampleComponent = () => {
  return (
    <HotTable
      data={Handsontable.helper.createSpreadsheetData(100, 12)}
      width="100%"
      height={320}
      rowHeaders={true}
      colHeaders={true}
      fixedRowsTop={2}
      licenseKey="non-commercial-and-evaluation"
    />
  );
};

LANGUAGE: tsx
CODE:
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

export const ExampleComponent = () => {
  return (
    <HotTable
      data={Handsontable.helper.createSpreadsheetData(100, 12)}
      width="100%"
      height={320}
      rowHeaders={true}
      colHeaders={true}
      fixedRowsTop={2}
      licenseKey="non-commercial-and-evaluation"
    />
  );
};

----------------------------------------

TITLE: Markdown Browser Support Table
DESCRIPTION: A markdown table showing supported desktop and mobile browsers for Handsontable, including Chrome, Firefox, Safari, and Edge for desktop, and Chrome and Safari iOS for mobile.

LANGUAGE: markdown
CODE:
| Desktop Browsers | Mobile Browsers     |
| :--------------- | :------------------ |
| Chrome           | Chrome              |
| Firefox          | Safari iOS          |
| Safari           |                     |
| Edge             |                     |

----------------------------------------

TITLE: Setting Numeric Cell Type and Accessing Properties in React
DESCRIPTION: This React component demonstrates how to set a numeric cell type for the entire grid using HotTable and then access the cell properties using a ref to the Handsontable instance.

LANGUAGE: jsx
CODE:
const ExampleComponent = () => {
  const hotRef = useRef(null);

  useEffect(() => {
    const hot = hotRef.current.hotInstance;

    // get cell properties for cell [0, 0]
    const cellProperties = hot.getCellMeta(0, 0);

    cellProperties.renderer; // "numeric"
    cellProperties.editor; // "numeric"
    cellProperties.validator; // "numeric"
    cellProperties.type; // "numeric"
  });

  return (
    <HotTable
      ref={hotRef}
      // set a cell type for the entire grid
      type="numeric"
    />
  );
};

----------------------------------------

TITLE: Setting Column-Level Locale in React
DESCRIPTION: React component configuration showing how to set different locales for individual columns in Handsontable. Sets Polish, German, and Japanese locales for three different columns.

LANGUAGE: jsx
CODE:
<HotTable
  columns={[{
      // set the first column's locale to Polish
      locale: 'pl-PL',
    }, {
      // set the second column's locale to German
      locale: 'de-DE',
    }, {
      // set the third column's locale to Japanese
      locale: 'ja-JP',
    },
  ]}
/>

----------------------------------------

TITLE: Implementing Custom Context Menu in Vue 2
DESCRIPTION: JavaScript implementation showing how to configure and customize context menu functionality in a Vue 2 Handsontable component

LANGUAGE: javascript
CODE:
import Vue from 'vue';
import { HotTable } from '@handsontable/vue';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.css';

registerAllModules();

new Vue({
  el: '#example1',
  data() {
    return {
      hotSettings: {
        data: [
          ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
          ['2019', 10, 11, 12, 13],
          ['2020', 20, 11, 14, 13],
          ['2021', 30, 15, 12, 13]
        ],
        rowHeaders: true,
        colHeaders: true,
        contextMenu: {
          items: {
            'row_above': {
              name: 'Insert row above this one (custom name)',
            },
            'row_below': {
              name: 'Insert row below this one (custom name)',
            },
            'separator': {
              name: '---------',
            },
            'clear_custom': {
              name: 'Clear all cells (custom)',
              callback() {
                this.clear();
              },
            },
          },
        },
        height: 'auto',
        licenseKey: 'non-commercial-and-evaluation'
      }
    };
  },
  components: {
    HotTable
  }
});

----------------------------------------

TITLE: Including Required Date Dependencies
DESCRIPTION: Required script imports for using the date cell type, including Moment.js for date formatting and Pikaday for the date picker UI.

LANGUAGE: html
CODE:
<script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@handsontable/pikaday@1.0.0/pikaday.min.js"></script>

----------------------------------------

TITLE: Implementing Handsontable License Key in JavaScript
DESCRIPTION: This snippet demonstrates how to enter a license key in the Handsontable configuration for JavaScript projects. The license key is a string of characters that needs to be assigned to the 'licenseKey' property.

LANGUAGE: javascript
CODE:
licenseKey: '00000-00000-00000-00000-00000',

----------------------------------------

TITLE: Applying Inline Styles in Handsontable
DESCRIPTION: This example shows how to apply inline styles directly to cell DOM elements using the 'renderer' option in Handsontable. It sets different background colors for odd and even rows.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example2');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 5),
  colHeaders: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation',
  renderer(instance, td, row, col, prop, value, cellProperties) {
    Handsontable.renderers.TextRenderer.apply(this, arguments);
    td.style.fontWeight = 'bold';
    td.style.color = 'green';
    td.style.background = row % 2 === 0 ? 'yellow' : 'red';
  }
});

----------------------------------------

TITLE: Column Mapping with Nested Objects
DESCRIPTION: Shows how to map columns when working with nested object structures in the data source.



----------------------------------------

TITLE: Configuring Collapsible Columns in JavaScript/TypeScript
DESCRIPTION: Example showing how to configure collapsible column headers by specifying which headers should have collapse/expand functionality.

LANGUAGE: javascript
CODE:
collapsibleColumns: [
  { row: -4, col: 1, collapsible: true },
  { row: -3, col: 5, collapsible: true }
]

----------------------------------------

TITLE: Configuring HTML Template for Vue 2 Context Menu
DESCRIPTION: HTML template structure for implementing a Vue 2 component with Handsontable integration and custom context menu

LANGUAGE: html
CODE:
<div id="example1">
  <hot-table :settings="hotSettings" ref="hotTableComponent">
  </hot-table>
</div>

----------------------------------------

TITLE: Including Handsontable Bare Distribution with Dependencies
DESCRIPTION: Complete setup for bare distribution including all required external dependencies and core Handsontable files.

LANGUAGE: html
CODE:
<!-- Required dependencies (as external scripts) -->
<script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@handsontable/pikaday@1.0.0/pikaday.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/numbro@2.1.2/dist/numbro.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dompurify@2.4.5/dist/purify.js"></script>

<!-- Handsontable bare files -->
<script src="dist/handsontable.js"></script>
<link href="styles/handsontable.css" rel="stylesheet">
<link href="styles/ht-theme-main.css" rel="stylesheet">

----------------------------------------

TITLE: Selective Column Display with Array of Arrays
DESCRIPTION: Shows how to selectively display columns from an array of arrays data source by omitting specific columns from the grid view.



----------------------------------------

TITLE: Implementing Custom Cell Borders in Handsontable
DESCRIPTION: This example demonstrates how to enable and configure custom cell borders in Handsontable. It uses the 'customBorders' option to define border styles for specific cells and ranges.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example3');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 5),
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  customBorders: [
    {
      range: {
        from: {
          row: 1,
          col: 1
        },
        to: {
          row: 3,
          col: 4
        }
      },
      start: {
        width: 2,
        color: 'red'
      },
      end: {
        width: 2,
        color: 'red'
      },
      top: {
        width: 2,
        color: 'red'
      },
      bottom: {
        width: 2,
        color: 'red'
      }
    },
    {
      row: 2,
      col: 2,
      start: {
        width: 2,
        color: 'orange'
      },
      end: {
        width: 2,
        color: 'orange'
      },
      top: {
        width: 2,
        color: 'orange'
      },
      bottom: {
        width: 2,
        color: 'orange'
      }
    }
  ],
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Configuring Formulas Plugin in React
DESCRIPTION: Basic configuration of the Formulas plugin in React Handsontable component

LANGUAGE: jsx
CODE:
<HotTable
  formulas={{
    engine: HyperFormula,
    // [plugin configuration]
  }}
/>

----------------------------------------

TITLE: Importing Optional Handsontable Modules in Vue 2
DESCRIPTION: Shows how to import specific optional modules like numeric cell type and UndoRedo plugin along with their registration functions.

LANGUAGE: javascript
CODE:
import {
  registerCellType, // cell types' registering function
  NumericCellType,
} from 'handsontable/cellTypes';

import {
  registerPlugin, // plugins' registering function
  UndoRedo,
} from 'handsontable/plugins';

----------------------------------------

TITLE: Building Vue 3 TypeScript Project for Production
DESCRIPTION: Performs type-checking, compilation, and minification of the Vue 3 TypeScript project for production deployment.

LANGUAGE: sh
CODE:
npm run build

----------------------------------------

TITLE: Updating CopyPaste Plugin Options in React
DESCRIPTION: Change the default values of 'rowsLimit' and 'columnsLimit' options from 1000 to Infinity for the CopyPaste plugin in React.

LANGUAGE: jsx
CODE:
// Before
<HotTable
  rowsLimit={1000}
  columnsLimit={1000}
/>

// After
<HotTable
  rowsLimit={Infinity}
  columnsLimit={Infinity}
/>

----------------------------------------

TITLE: Implementing Handsontable with Column Virtualization in React (JSX)
DESCRIPTION: This React JSX snippet demonstrates how to implement Handsontable with 1000 rows and 1000 columns in a React component, utilizing column virtualization.

LANGUAGE: jsx
CODE:
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

export const ExampleComponent = () => {
  return (
    <HotTable
      data={Handsontable.helper.createSpreadsheetData(1000, 1000)}
      colHeaders={true}
      rowHeaders={true}
      height={450}
      licenseKey="non-commercial-and-evaluation"
    />
  );
};

----------------------------------------

TITLE: Updating CopyPaste Plugin Options in JavaScript
DESCRIPTION: Change the default values of 'rowsLimit' and 'columnsLimit' options from 1000 to Infinity for the CopyPaste plugin in JavaScript.

LANGUAGE: javascript
CODE:
// Before
rowsLimit: 1000,
columnsLimit: 1000,

// After
rowsLimit: Infinity,
columnsLimit: Infinity,

----------------------------------------

TITLE: Vue 3 Custom Image Cell Renderer Implementation
DESCRIPTION: JavaScript implementation of a custom cell renderer that displays images in grid cells. Uses Vue 3 with Handsontable to create a data grid where cells can render image URLs as actual images.

LANGUAGE: javascript
CODE:
import { HotTable } from '@handsontable/vue3';
import { defineComponent } from 'vue';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.css';

registerAllModules();

export default defineComponent({
  name: 'Example1',
  data() {
    return {
      hotSettings: {
        data: [
          ['A1', 'https://handsontable.com/docs/img/examples/professional-javascript-developers-nicolas.jpg'],
          ['A2', 'https://handsontable.com/docs/img/examples/javascript-developers-guid-robert.jpg']
        ],
        columns: [
          {},
          {
            renderer(instance, td, row, col, prop, value, cellProperties) {
              const escaped = `${value}`;
              if (escaped.indexOf('http') === 0) {
                const img = document.createElement('IMG');
                img.src = value;
                img.alt = 'image';
                img.style = 'width: 100%';
                td.innerText = '';
                td.appendChild(img);
              } else {
                td.innerHTML = escaped;
              }
              return td;
            }
          }
        ],
        colHeaders: true,
        rowHeaders: true,
        height: 'auto',
        licenseKey: 'non-commercial-and-evaluation'
      }
    };
  },
  components: {
    HotTable
  }
});

----------------------------------------

TITLE: Vue Component Implementation for Language Change
DESCRIPTION: JavaScript code implementing a Vue 2 component that handles language changes in Handsontable, including data initialization and settings configuration

LANGUAGE: javascript
CODE:
import { HotTable } from '@handsontable/vue';
import { registerLanguageDictionary, zhCN, zhTW } from 'handsontable/i18n';

// register your languages
registerLanguageDictionary(zhCN);
registerLanguageDictionary(zhTW);

new Vue({
  el: '#example1',
  data() {
    return {
      hotSettings: {
        data: [
          ['A1', 'B1', 'C1', 'D1', 'E1'],
          ['A2', 'B2', 'C2', 'D2', 'E2'],
          ['A3', 'B3', 'C3', 'D3', 'E3'],
          ['A4', 'B4', 'C4', 'D4', 'E4'],
          ['A5', 'B5', 'C5', 'D5', 'E5']
        ],
        colHeaders: true,
        rowHeaders: true,
        contextMenu: true,
        height: 'auto'
      },
      language: 'en-US'
    };
  },
  components: {
    HotTable
  }
});

----------------------------------------

TITLE: Initializing Formula Plugin in JavaScript
DESCRIPTION: Example of how to initialize the formula plugin in Handsontable 9.0 using JavaScript. It demonstrates importing HyperFormula and passing it as an engine to the formulas configuration.

LANGUAGE: javascript
CODE:
import { HyperFormula } from 'hyperformula';

formulas: {
  engine: HyperFormula
}

----------------------------------------

TITLE: Updating Configuration Options in React
DESCRIPTION: Change the default values of 'autoWrapCol' and 'autoWrapRow' options from true to false in your React application.

LANGUAGE: jsx
CODE:
// Before
<HotTable
  autoWrapCol={true}
  autoWrapRow={true}
/>

// After
<HotTable
  autoWrapCol={false}
  autoWrapRow={false}
/>

----------------------------------------

TITLE: Basic Vue Component Implementation
DESCRIPTION: Complete Vue component example showing Handsontable integration with data binding, column configuration, and basic settings.

LANGUAGE: vue
CODE:
<template>
  <div class="ht-theme-main-dark-auto">
    <hot-table
      :data="data"
      :row-headers=true
      :col-headers=true
      :navigable-headers=true
      :tab-navigation=true
      :multi-column-sorting=true
      header-class-name="htLeft"
      license-key="non-commercial-and-evaluation"
    >
      <hot-column title="Company" data="company" width=100></hot-column>
      <hot-column title="Country" data="country" width=170 type="dropdown" :source="['United Kingdom', 'Japan', 'United States']"></hot-column>
      <hot-column title="Rating" data="rating" width=100 type="numeric"></hot-column>
    </hot-table>
  </div>
</template>

<script>
  import { HotTable, HotColumn } from '@handsontable/vue';
  import { registerAllModules } from 'handsontable/registry';
  import 'handsontable/styles/handsontable.min.css';
  import 'handsontable/styles/ht-theme-main.min.css';

  // register Handsontable's modules
  registerAllModules();

  export default {
    data() {
      return {
        data: [
          { company: 'Tagcat', country: 'United Kingdom', rating: 4.4 },
          { company: 'Zoomzone', country: 'Japan', rating: 4.5 },
          { company: 'Meeveo', country: 'United States', rating: 4.6 },
        ]
      };
    },
    components: {
      HotTable,
      HotColumn,
    }
  }
</script>

----------------------------------------

TITLE: Implementing Handsontable in Vue 2 JavaScript
DESCRIPTION: This JavaScript code defines a Vue 2 component that integrates Handsontable. It includes methods for loading data, resetting the table, adding rows, and handling changes. The component demonstrates how to reference and interact with the Handsontable instance using this.$refs.hotTableComponent.hotInstance.

LANGUAGE: javascript
CODE:
import Vue from 'vue';
import { HotTable } from '@handsontable/vue';
import Handsontable from 'handsontable';

new Vue({
  el: '#example1',
  data() {
    return {
      hotSettings: {
        startRows: 5,
        startCols: 5,
        colHeaders: true,
        stretchH: 'all',
        width: '100%',
        licenseKey: 'non-commercial-and-evaluation'
      },
      hotData: Handsontable.helper.createSpreadsheetData(5, 5)
    };
  },
  methods: {
    loadData() {
      const reloadedData = Handsontable.helper.createSpreadsheetData(8, 3);

      console.log('New data loaded');
      // The Handsontable instance is stored under the `hotInstance` property of the wrapper component
      this.$refs.hotTableComponent.hotInstance.loadData(reloadedData);
    },
    resetData() {
      this.$refs.hotTableComponent.hotInstance.loadData(Handsontable.helper.createSpreadsheetData(5, 5));
    },
    addRow() {
      const currentData = this.$refs.hotTableComponent.hotInstance.getData();
      const newRowData = Handsontable.helper.createSpreadsheetData(1, currentData[0].length)[0];

      this.$refs.hotTableComponent.hotInstance.alter('insert_row', currentData.length, 1);
      this.$refs.hotTableComponent.hotInstance.populateFromArray(currentData.length - 1, 0, [newRowData]);
    },
    onAfterChange(changes) {
      if (changes) {
        console.log('The table was changed and the new data is:', this.$refs.hotTableComponent.hotInstance.getData());
      }
    }
  },
  components: {
    HotTable
  }
});

----------------------------------------

TITLE: Configuring Angular Module
DESCRIPTION: Angular module configuration to import and initialize Handsontable

LANGUAGE: javascript
CODE:
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import { HotTableModule } from '@handsontable/angular';

@NgModule({
  imports: [
    BrowserModule,
    HotTableModule.forRoot()
  ],
  declarations: [ AppComponent ],
  bootstrap: [ AppComponent ],
})
export class AppModule { }

----------------------------------------

TITLE: Updating Configuration Options in JavaScript
DESCRIPTION: Change the default values of 'autoWrapCol' and 'autoWrapRow' options from true to false in your JavaScript application.

LANGUAGE: javascript
CODE:
// Before
autoWrapCol: true,
autoWrapRow: true,

// After
autoWrapCol: false,
autoWrapRow: false,

----------------------------------------

TITLE: Using sorting hooks in JavaScript
DESCRIPTION: Implement custom logic before or after sorting using Handsontable hooks.

LANGUAGE: javascript
CODE:
const configurationOptions = {
  beforeColumnSort() {
    // add your code here
    return false; // to block front-end sorting
  },
  afterColumnSort() {
    // add your code here
  },
};

----------------------------------------

TITLE: Enabling IME Fast Edit in JavaScript
DESCRIPTION: To maintain IME functionality with the new focus management system, set the 'imeFastEdit' option to true in your Handsontable configuration.

LANGUAGE: javascript
CODE:
{
  imeFastEdit: true
}

----------------------------------------

TITLE: Implementing Translations in Vue 3 Data Grid HTML Template
DESCRIPTION: This HTML snippet defines the structure for a Vue 3 component that renders a Handsontable instance with translations. It includes a language selector and displays the current language.

LANGUAGE: html
CODE:
<div id="example1">
  <div class="controls">
    <label>
      <span class="description">Select language:</span>
      <select v-model="language" @change="updateLanguage">
        <option value="en-US">English (United States)</option>
        <option value="de-DE">German (Germany)</option>
        <option value="ja-JP">Japanese (Japan)</option>
        <option value="es-MX">Spanish (Mexico)</option>
      </select>
    </label>
  </div>
  <p><span class="current-language">Current language: {{ language }}</span></p>
  <hot-table ref="hotTableComponent" :settings="hotSettings"></hot-table>
</div>

----------------------------------------

TITLE: Importing Handsontable Styles in CSS
DESCRIPTION: CSS import statements for including Handsontable's required stylesheets in your project. These styles are necessary for proper rendering of the data grid.

LANGUAGE: css
CODE:
@import '~handsontable/styles/handsontable.min.css';
@import '~handsontable/styles/ht-theme-main.min.css';

----------------------------------------

TITLE: Exporting Handsontable Grid to CSV File in JavaScript
DESCRIPTION: This snippet demonstrates how to export a Handsontable grid's data to a downloadable CSV file using the exportFile plugin. It sets up a basic grid and attaches an export function to a button click event.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: [
    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],
    ['2019', 10, 11, 12, 13],
    ['2020', 20, 11, 14, 13],
    ['2021', 30, 15, 12, 13]
  ],
  rowHeaders: true,
  colHeaders: true,
  height: 'auto',
  width: '100%',
  licenseKey: 'non-commercial-and-evaluation'
});

const exportPlugin = hot.getPlugin('exportFile');

const exportBtn = document.querySelector('#export-file');

exportBtn.addEventListener('click', () => {
  exportPlugin.downloadFile('csv', {
    bom: false,
    columnDelimiter: ',',
    columnHeaders: false,
    exportHiddenColumns: true,
    exportHiddenRows: true,
    fileExtension: 'csv',
    filename: 'Handsontable-CSV-file_[YYYY]-[MM]-[DD]',
    mimeType: 'text/csv',
    rowDelimiter: '\r\n',
    rowHeaders: true
  });
});

----------------------------------------

TITLE: Handling populateFromArray() Changes in React
DESCRIPTION: Example of handling populateFromArray() changes in a React component using the HotTable wrapper.

LANGUAGE: jsx
CODE:
<HotTable
  afterChange={(changes, source) => {
    if (source === 'populateFromArray') {
      changes.forEach(change =>  handleChange(change))
    }
  }}
/>

----------------------------------------

TITLE: Registering a Local Language Dictionary
DESCRIPTION: Shows how to register a custom language dictionary that is not part of the Handsontable package using the static method.

LANGUAGE: javascript
CODE:
const C = Handsontable.languages.dictionaryKeys;

Handsontable.languages.registerLanguageDictionary({
  languageCode: 'morse',
  // Your translation in the Morse code
  [C.FILTERS_BUTTONS_OK]: '--- -•-'
});

----------------------------------------

TITLE: Integrating Handsontable with Vuex in Vue 2
DESCRIPTION: Example showing how to implement the @handsontable/vue component with a readOnly toggle switch using Vuex state management. Includes both template structure and state management setup.

LANGUAGE: html
CODE:
@[code](@/content/guides/integrate-with-vue/vue-vuex-example/vue/example1.html)

LANGUAGE: javascript
CODE:
@[code](@/content/guides/integrate-with-vue/vue-vuex-example/vue/example1.js)

----------------------------------------

TITLE: Loading Handsontable via CDN
DESCRIPTION: CDN script and stylesheet references for using Handsontable in Angular projects

LANGUAGE: html
CODE:
<script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@handsontable/angular/bundles/handsontable-angular.umd.min.js"></script>

<link href="https://cdn.jsdelivr.net/npm/handsontable/styles/handsontable.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/handsontable/styles/ht-theme-main.min.css" rel="stylesheet">

----------------------------------------

TITLE: Setting Handsontable Theme in JavaScript Configuration
DESCRIPTION: Shows how to specify a Handsontable theme in the JavaScript configuration object.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#handsontable-example');

const hot = new Handsontable(container, {
  // theme name with obligatory `ht-theme-*` prefix
  themeName: 'ht-theme-main-dark-auto',
  // other options
});

----------------------------------------

TITLE: Importing Individual Handsontable Modules with TypeScript
DESCRIPTION: Example of importing individual Handsontable modules with correct types in TypeScript, showcasing the new modular structure.

LANGUAGE: typescript
CODE:
import Handsontable from 'handsontable/base';
import { registerPlugin, HiddenRows } from 'handsontable/plugins';

----------------------------------------

TITLE: Customizing Cell Overflow in CSS
DESCRIPTION: Shows how to modify the CSS to crop overflowing content in Handsontable cells.

LANGUAGE: css
CODE:
#handsontable-example .handsontable td {
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

----------------------------------------

TITLE: Initializing Handsontable with RTL Support in JavaScript
DESCRIPTION: Demonstrates how to initialize Handsontable with RTL support using JavaScript. It sets the layout direction to RTL and uses Arabic language settings.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable';
import { registerLanguageDictionary, arAR } from 'handsontable/i18n';
import 'handsontable/dist/handsontable.full.min.css';

registerLanguageDictionary(arAR);

const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  layoutDirection: 'rtl',
  language: 'ar-AR',
  rowHeaders: true,
  colHeaders: true,
  contextMenu: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Initializing Handsontable with Language Selector in Angular HTML
DESCRIPTION: This HTML snippet sets up a language selector and initializes a Handsontable component with dynamic language selection. It uses Angular's data binding to update the table's language based on user selection.

LANGUAGE: html
CODE:
<mat-form-field>
  <mat-label>Language</mat-label>
  <mat-select [(ngModel)]="language" (selectionChange)="onLanguageChange()">
    <mat-option *ngFor="let lang of languages" [value]="lang.languageCode">
      {{lang.languageName}}
    </mat-option>
  </mat-select>
</mat-form-field>

<hot-table
  [data]="dataset"
  [colHeaders]="true"
  [rowHeaders]="true"
  [height]="'auto'"
  [language]="language"
  licenseKey="non-commercial-and-evaluation">
</hot-table>

----------------------------------------

TITLE: Using Modifier Keys in Playwright Tests
DESCRIPTION: This TypeScript snippet demonstrates how to use the custom helper function for modifier keys (Ctrl/Meta) in Playwright tests.

LANGUAGE: typescript
CODE:
await page.keyboard.press(`${helpers.modifier}+c`);

----------------------------------------

TITLE: Registering Handsontable Modules in React
DESCRIPTION: JavaScript code to import and register all Handsontable modules in a React application.

LANGUAGE: jsx
CODE:
import Handsontable from 'handsontable/base';
import { registerAllModules } from 'handsontable/registry';

registerAllModules();

----------------------------------------

TITLE: Icon SVG Implementation
DESCRIPTION: Example SVG markup for implementing individual icons, with standard attributes and viewBox sizing

LANGUAGE: SVG
CODE:
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3.126 3.114l6.853 8.812c.014.017.02.04.02.06v6.904c0 .038.02.073.055.09l3.8 1.9a.1.1 0 0 0 .145-.089v-8.804c0-.022.007-.044.02-.06l6.853-8.812a.1.1 0 0 0-.079-.161H3.204c-.083 0-.13.096-.078.16z"/></svg>

----------------------------------------

TITLE: Enabling Comments Plugin in Handsontable JavaScript
DESCRIPTION: Basic configuration to enable the comments feature in Handsontable with a simple data grid setup.

LANGUAGE: javascript
CODE:
const hot = new Handsontable(container, {
  data: [
    ['A1', 'B1', 'C1'],
    ['A2', 'B2', 'C2'],
  ],
  comments: true,
  autoWrapRow: true,
  autoWrapCol: true
});

----------------------------------------

TITLE: Handling populateFromArray() Changes in JavaScript
DESCRIPTION: Updated event handling for the populateFromArray() method, showing how to process changes in the afterChange hook.

LANGUAGE: javascript
CODE:
new Handsontable(element, {
  afterChange: (changes, source) => {
    if (source === 'populateFromArray') {
      changes.forEach(change =>  handleChange(change))
    }
  }
});

----------------------------------------

TITLE: Finding Specific Cells in Handsontable Tests
DESCRIPTION: This TypeScript code shows how to use the custom helper function findCell() to locate and interact with specific cells in Handsontable tests.

LANGUAGE: typescript
CODE:
const cell = helpers.tbody.locator(helpers.findCell({ row: 2, cell: 2, cellType: 'td' }));

await cell.click();

----------------------------------------

TITLE: HTML Template for Angular Custom Context Menu
DESCRIPTION: HTML template that sets up a Handsontable grid component with custom context menu configuration in Angular.

LANGUAGE: html
CODE:
<hot-table [settings]="hotSettings"></hot-table>

----------------------------------------

TITLE: LRU Cache Usage Example
DESCRIPTION: Demonstrates basic usage of the LRUMap class including initialization, setting values, getting values, and automatic eviction of oldest entries when capacity is reached.

LANGUAGE: javascript
CODE:
let c = new LRUMap(3)
c.set('adam',   29)
c.set('john',   26)
c.set('angela', 24)
c.toString()        // -> "adam:29 < john:26 < angela:24"
c.get('john')       // -> 26

// Now 'john' is the most recently used entry, since we just requested it
c.toString()        // -> "adam:29 < angela:24 < john:26"
c.set('zorro', 141) // -> {key:adam, value:29}

// Because we only have room for 3 entries, adding 'zorro' caused 'adam'
// to be removed in order to make room for the new entry
c.toString()        // -> "angela:24 < john:26 < zorro:141"

----------------------------------------

TITLE: Array of Objects with HotColumn in Vue 3
DESCRIPTION: Example showing how to work with an array of objects using the hot-column component, using the data property to reference object properties.

LANGUAGE: html
CODE:
<template>
  <HotTable :data="hotData" :rowHeaders="true" :colHeaders="true" licenseKey="non-commercial-and-evaluation">
    <HotColumn title="ID" data="id" :readOnly="true" />
    <HotColumn title="Name" data="name" />
    <HotColumn title="Address" data="address" />
  </HotTable>
</template>

LANGUAGE: javascript
CODE:
import { HotTable, HotColumn } from '@handsontable/vue3';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.css';

registerAllModules();

export default {
  name: 'Array-of-objects-example',
  data() {
    return {
      hotData: [
        { id: 1, name: 'Ted Right', address: 'London' },
        { id: 2, name: 'Frank Honest', address: 'Paris' },
        { id: 3, name: 'Joan Well', address: 'Madrid' },
        { id: 4, name: 'Gail Polite', address: 'Warsaw' }
      ]
    };
  },
  components: {
    HotTable,
    HotColumn
  }
};

----------------------------------------

TITLE: Enabling sorting for all columns in JavaScript
DESCRIPTION: Enable sorting for all columns by setting the columnSorting option to true.

LANGUAGE: javascript
CODE:
const configurationOptions = {
  // enable sorting for all columns
  columnSorting: true,
};

----------------------------------------

TITLE: Setting Grid-Level Locale in React
DESCRIPTION: React component configuration showing how to set the locale for the entire Handsontable grid using the locale prop. Sets the grid's locale to Polish (pl-PL).

LANGUAGE: jsx
CODE:
<HotTable
  // set the entire grid's locale to Polish
  locale="pl-PL"
/>

----------------------------------------

TITLE: Creating Environment File for Visual Tests in Bash
DESCRIPTION: This snippet shows how to create a .env file in the visual-tests directory and add the Argos token for visual testing.

LANGUAGE: bash
CODE:
ARGOS_TOKEN=xxx

----------------------------------------

TITLE: Initializing Column Menu in JavaScript/TypeScript
DESCRIPTION: Enable the DropdownMenu plugin by setting the dropdownMenu configuration option to true when initializing Handsontable.

LANGUAGE: javascript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colHeaders: true,
  dropdownMenu: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

LANGUAGE: typescript
CODE:
const container = document.querySelector('#example1');
const hot = new Handsontable(container as HTMLElement, {
  data: Handsontable.helper.createSpreadsheetData(5, 10),
  colHeaders: true,
  dropdownMenu: true,
  height: 'auto',
  licenseKey: 'non-commercial-and-evaluation'
});

----------------------------------------

TITLE: Conditional Formatting CSS Styles
DESCRIPTION: CSS styles defining the appearance of cells based on different conditions including read-only cells, empty cells, and Nissan column formatting.

LANGUAGE: css
CODE:
.htCore td.custom-green {
  color: green;
  font-weight: bold;
}

.htCore td.custom-silver {
  background-color: silver;
}

.htCore td.custom-red {
  color: red;
}

.htCore td.custom-italic {
  font-style: italic;
}

----------------------------------------

TITLE: Custom Renderer as Vue Component in HotColumn
DESCRIPTION: This example shows how to create a custom renderer using a Vue component in the HotColumn. The renderer displays stars based on the cell value.

LANGUAGE: html
CODE:
<div id="custom-renderer-example">
  <hot-table :settings="hotSettings">
    <hot-column title="Rank" :width="50"></hot-column>
    <hot-column title="Title" :width="200"></hot-column>
    <hot-column title="Description" :width="200"></hot-column>
    <hot-column title="Rating" :width="100">
      <stars-renderer hot-renderer></stars-renderer>
    </hot-column>
  </hot-table>
</div>

LANGUAGE: javascript
CODE:
import Vue from 'vue';
import { HotTable } from '@handsontable/vue';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.css';

registerAllModules();

const StarsRenderer = {
  name: 'StarsRenderer',
  template: `
    <div class="star-renderer">
      <span v-for="(item, index) in new Array(value)" :key="index" class="star">★</span>
      <span v-for="(item, index) in new Array(5 - value)" :key="index + value" class="empty-star">☆</span>
    </div>
  `,
  data() {
    return {
      value: 3
    };
  }
};

new Vue({
  el: '#custom-renderer-example',
  data() {
    return {
      hotSettings: {
        data: [
          { rank: 1, title: 'The Shawshank Redemption', description: 'Two imprisoned men bond over a number of years...', rating: 5 },
          { rank: 2, title: 'The Godfather', description: 'The aging patriarch of an organized crime dynasty...', rating: 4 },
          { rank: 3, title: 'The Dark Knight', description: 'When the menace known as the Joker emerges from his...', rating: 3 },
          { rank: 4, title: '12 Angry Men', description: 'A jury holdout attempts to prevent a miscarriage of...', rating: 4 },
          { rank: 5, title: "Schindler's List", description: 'In German-occupied Poland during World War II...', rating: 3 },
        ],
        autoColumnSize: false,
        autoRowSize: false,
        licenseKey: 'non-commercial-and-evaluation'
      }
    };
  },
  components: {
    HotTable,
    StarsRenderer
  }
});

----------------------------------------

TITLE: Importing Base Module in Vue 3 for Handsontable
DESCRIPTION: Import the base module of Handsontable in the entry point file of a Vue 3 application. This is a required step for using any Handsontable functionality.

LANGUAGE: javascript
CODE:
import Handsontable from 'handsontable/base';

----------------------------------------

TITLE: Creating HTML Container for Handsontable
DESCRIPTION: HTML markup to create a container element for the Handsontable grid with a specific theme.

LANGUAGE: html
CODE:
<div id="handsontable-example" class="ht-theme-main-dark-auto"></div>

----------------------------------------

TITLE: Disabling Autoresizing in React Component
DESCRIPTION: Demonstrates how to disable the default autoresizing behavior of Handsontable in a React component by setting the beforeRefreshDimensions prop to return false.

LANGUAGE: jsx
CODE:
<HotTable beforeRefreshDimensions={() => false} />

----------------------------------------

TITLE: Installing and Running First Build
DESCRIPTION: Basic commands to set up and build all Handsontable packages

LANGUAGE: shell
CODE:
npm install
npm run build

----------------------------------------

TITLE: Initializing with Trimmed Rows in React
DESCRIPTION: Configuration to enable row trimming and specify initial rows to trim in React component

LANGUAGE: jsx
CODE:
<HotTable
  trimRows={[5, 10, 15]}
/>

----------------------------------------

TITLE: Taking Element-Specific Screenshots in Playwright
DESCRIPTION: This TypeScript code shows how to take a screenshot of a specific element (dropdown menu) in a Playwright test using locators.

LANGUAGE: typescript
CODE:
const dropdownMenu = page.locator(helpers.selectors.dropdownMenu);

await dropdownMenu.screenshot({ path: helpers.screenshotPath() });

----------------------------------------

TITLE: Enabling NestedRows in React Component
DESCRIPTION: React component implementation for enabling nested rows functionality in Handsontable.

LANGUAGE: jsx
CODE:
<HotTable nestedRows={true} />

----------------------------------------

TITLE: Installing Handsontable via npm
DESCRIPTION: Command to install Handsontable using npm package manager.

LANGUAGE: bash
CODE:
npm install handsontable

----------------------------------------

TITLE: Installing Dependencies with NPM
DESCRIPTION: Command to install all required project dependencies using npm package manager.

LANGUAGE: shell
CODE:
npm install

----------------------------------------

TITLE: Generating Changelog Entry for Handsontable
DESCRIPTION: Command to generate a new changelog entry for Handsontable. This is a mandatory step when contributing changes to the project. It helps in maintaining a comprehensive record of all modifications.

LANGUAGE: bash
CODE:
npm run changelog entry

----------------------------------------

TITLE: Implementing Handsontable with Column Virtualization in React (TSX)
DESCRIPTION: This React TSX snippet shows how to implement Handsontable with 1000 rows and 1000 columns in a React component using TypeScript, with column virtualization.

LANGUAGE: tsx
CODE:
import { HotTable } from '@handsontable/react';
import { registerAllModules } from 'handsontable/registry';
import 'handsontable/dist/handsontable.full.min.css';

// register Handsontable's modules
registerAllModules();

export const ExampleComponent = () => {
  return (
    <HotTable
      data={Handsontable.helper.createSpreadsheetData(1000, 1000)}
      colHeaders={true}
      rowHeaders={true}
      height={450}
      licenseKey="non-commercial-and-evaluation"
    />
  );
};

----------------------------------------

TITLE: Complete Vue 2 Handsontable Module Integration
DESCRIPTION: Complete example showing the full implementation of modular Handsontable integration in a Vue 2 application including initialization.

LANGUAGE: javascript
CODE:
import Vue from 'vue';
import App from './App.vue';

import Handsontable from 'handsontable/base';

import {
  registerCellType,
  NumericCellType,
} from 'handsontable/cellTypes';

import {
  registerPlugin,
  UndoRedo,
} from 'handsontable/plugins';

registerCellType(NumericCellType);
registerPlugin(UndoRedo);

Vue.config.productionTip = false;

new Vue({
  render: h => h(App),
}).$mount('#app');

----------------------------------------

TITLE: Including Handsontable Internationalization Files
DESCRIPTION: Examples of including language files for Handsontable internationalization, showing both single language and all languages bundle options.

LANGUAGE: html
CODE:
<!-- Internationalization, Polish - Poland language-country file -->
<script src="dist/languages/pl-PL.js"></script>

<!-- Internationalization, all available language files in one file -->
<script src="dist/languages/all.js"></script>

----------------------------------------

TITLE: Installing Handsontable React Wrapper via NPM
DESCRIPTION: Command to install Handsontable and its React wrapper dependencies using npm package manager.

LANGUAGE: bash
CODE:
npm install handsontable @handsontable/react-wrapper

----------------------------------------

TITLE: Configuring CSP for Same-Origin Handsontable Implementation
DESCRIPTION: Content Security Policy (CSP) configuration example for Handsontable when hosted on the same origin as the application. Includes necessary script-src and style-src directives.

LANGUAGE: html
CODE:
<meta http-equiv="Content-Security-Policy" content="default-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'">

----------------------------------------

TITLE: Implementing Handsontable Template
DESCRIPTION: HTML template configuration for Handsontable grid with columns and settings

LANGUAGE: html
CODE:
<div class="ht-theme-main-dark-auto">
  <hot-table
    [data]="data"
    [rowHeaders]="true"
    [colHeaders]="true"
    [navigableHeaders]="true"
    [tabNavigation]="true"
    [multiColumnSorting]="true"
    headerClassName="htLeft"
    licenseKey="non-commercial-and-evaluation"
  >
    <hot-column title="Company" data="company" width=100></hot-column>
    <hot-column title="Country" data="country" width=170 type="dropdown" [source]="['United Kingdom', 'Japan', 'United States']"></hot-column>
    <hot-column title="Rating" data="rating" width=100 type="numeric"></hot-column>
  </hot-table>
</div>

----------------------------------------

TITLE: Running Tests for Handsontable Demo
DESCRIPTION: Command to execute test specifications after starting the development server.

LANGUAGE: bash
CODE:
npm run test

----------------------------------------

TITLE: Accessing ShortcutManager API in JavaScript
DESCRIPTION: Basic example showing how to access the ShortcutManager API instance.

LANGUAGE: javascript
CODE:
hot.getShortcutManager();

----------------------------------------

TITLE: Building Vue 3 Project for Production
DESCRIPTION: Command to type-check, compile and minify the Vue 3 application for production deployment.

LANGUAGE: sh
CODE:
npm run build

----------------------------------------

TITLE: Using Handsontable Component in Angular Template
DESCRIPTION: HTML template implementation of the Handsontable component with basic configuration options

LANGUAGE: html
CODE:
<div class="ht-theme-main-dark-auto">
  <hot-table
    [colHeaders]="true"
    [rowHeaders]="true"
    autoWrapRow={true}
    autoWrapCol={true}
    licenseKey="non-commercial-and-evaluation">
  </hot-table>
</div>

----------------------------------------

TITLE: Building Vue 3 Project for Production
DESCRIPTION: Command to type-check, compile and minify the Vue 3 application for production deployment.

LANGUAGE: sh
CODE:
npm run build

----------------------------------------

TITLE: Registering Handsontable Modules in React
DESCRIPTION: Code snippet to register all Handsontable modules in a React application. This is necessary to use all Handsontable features.

LANGUAGE: jsx
CODE:
import { registerAllModules } from 'handsontable/registry';

registerAllModules();

----------------------------------------

TITLE: Installing Vue 3 TypeScript Project Dependencies
DESCRIPTION: Command to install all required node modules and dependencies for the Vue 3 TypeScript project.

LANGUAGE: sh
CODE:
npm install

----------------------------------------

TITLE: Installing Icon Package via NPM
DESCRIPTION: Command to install the Handsontable spreadsheet icons package via npm package manager

LANGUAGE: bash
CODE:
npm install @handsontable/spreadsheet-icons

----------------------------------------

TITLE: Importing HotTable Component in React
DESCRIPTION: Import statement for the main Handsontable component (HotTable) in a React application.

LANGUAGE: jsx
CODE:
import { HotTable } from '@handsontable/react';

----------------------------------------

TITLE: Running Tests for Handsontable Demo
DESCRIPTION: Command to execute test specifications after starting the development server

LANGUAGE: bash
CODE:
npm run test

----------------------------------------

TITLE: Updated Custom Editor Class Definition in TypeScript
DESCRIPTION: Demonstrates the new way of defining a custom editor class in TypeScript, reflecting changes in editor interfaces.

LANGUAGE: typescript
CODE:
class CustomEditor extends Handsontable.editors.BaseEditor implements Handsontable.editors.BaseEditor ()

----------------------------------------

TITLE: Importing Handsontable Styles
DESCRIPTION: CSS imports for Handsontable core styles and theme

LANGUAGE: css
CODE:
@import '~handsontable/styles/handsontable.min.css';
@import '~handsontable/styles/ht-theme-main.min.css';

----------------------------------------

TITLE: Starting Development Server for Handsontable Demo
DESCRIPTION: Command to launch the local development server on port 8080

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Preparing a Custom Editor for Publication
DESCRIPTION: Shows how to properly structure and register a custom editor for publication, including enclosing it in an IIFE, adding it to the Handsontable editors namespace, and registering an alias.

LANGUAGE: javascript
CODE:
(Handsontable => {
  const CustomEditor = Handsontable.editors.BaseEditor.prototype.extend();

  // ...rest of the editor code

  // Put editor in dedicated namespace
  Handsontable.editors.CustomEditor = CustomEditor;

  // Register alias
  Handsontable.editors.registerEditor('theBestEditor', CustomEditor);

})(Handsontable);

----------------------------------------

TITLE: Setting up HTML Container for Handsontable
DESCRIPTION: HTML markup required to create a container for the Handsontable grid with theme support.

LANGUAGE: html
CODE:
<!-- Set the container's ID and apply the desired theme -->
<div id="handsontable-example" class="ht-theme-main-dark-auto"></div>

----------------------------------------

TITLE: Running Tests for Handsontable Demo
DESCRIPTION: Command to execute test specifications after starting the development server.

LANGUAGE: bash
CODE:
npm run test

----------------------------------------

TITLE: Including Handsontable via CDN Script Tag
DESCRIPTION: HTML script tag to include Handsontable's JavaScript file from a CDN.

LANGUAGE: html
CODE:
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>

----------------------------------------

TITLE: Including Handsontable via CDN Script Tag
DESCRIPTION: HTML script tag to include Handsontable's JavaScript file from a CDN.

LANGUAGE: html
CODE:
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>

----------------------------------------

TITLE: Setting up Handsontable with CDN
DESCRIPTION: Complete HTML file demonstrating how to set up Handsontable using CDN links for CSS and JavaScript, along with basic configuration.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Handsontable - JavaScript Data Grid Example</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/handsontable/styles/handsontable.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/handsontable/styles/ht-theme-main.min.css"
    />
  </head>
  <body>
    <div id="handsontable-grid" class="ht-theme-main-dark-auto"></div>
    <script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
    <script>
      const element = document.getElementById("handsontable-grid");

      new Handsontable(element, {
        data: [
          { company: "Tagcat", country: "United Kingdom", rating: 4.4 },
          { company: "Zoomzone", country: "Japan", rating: 4.5 },
          { company: "Meeveo", country: "United States", rating: 4.6 },
        ],
        columns: [
          { data: "company", title: "Company", width: 100 },
          { data: "country", title: "Country", width: 170, type: "dropdown", source: ["United Kingdom", "Japan", "United States"] },
          { data: "rating", title: "Rating", width: 100, type: "numeric" },
        ],
        rowHeaders: true,
        navigableHeaders: true,
        tabNavigation: true,
        multiColumnSorting: true,
        headerClassName: "htLeft",
        licenseKey: "non-commercial-and-evaluation",
      });
    </script>
  </body>
</html>

----------------------------------------

TITLE: Starting Development Server for Handsontable Demo
DESCRIPTION: Command to launch the local development server on port 8080.

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Taking Screenshots in Playwright Tests
DESCRIPTION: This TypeScript snippet demonstrates how to capture and save screenshots during Playwright tests using the helpers.screenshotPath() function.

LANGUAGE: typescript
CODE:
await page.screenshot({ path: helpers.screenshotPath() });

----------------------------------------

TITLE: Registering Handsontable Modules in Angular
DESCRIPTION: Register the imported Handsontable modules to make them recognizable by Handsontable. This step is necessary after importing the modules.

LANGUAGE: javascript
CODE:
registerCellType(NumericCellType);
registerPlugin(UndoRedo);

----------------------------------------

TITLE: Running Tests for Handsontable Angular Demo
DESCRIPTION: Executes test specs for the Handsontable Angular demo project. This command should be run after starting the development server.

LANGUAGE: shell
CODE:
npm run test

----------------------------------------

TITLE: Installing Dependencies with NPM
DESCRIPTION: Command to install all required project dependencies using npm package manager

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Importing Optional Handsontable Modules in Angular
DESCRIPTION: Import optional Handsontable modules along with their registering functions. This example imports the NumericCellType and UndoRedo plugin modules.

LANGUAGE: javascript
CODE:
import {
  registerCellType, // cell types' registering function
  NumericCellType,
} from 'handsontable/cellTypes';

import {
  registerPlugin, // plugins' registering function
  UndoRedo,
} from 'handsontable/plugins';

----------------------------------------

TITLE: Running Project Tests
DESCRIPTION: Command to execute the test suite after starting the development server

LANGUAGE: bash
CODE:
npm run test

----------------------------------------

TITLE: Installing Dependencies for Handsontable Demo
DESCRIPTION: Uses npm to install all necessary dependencies for the Handsontable demo project.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Running Visual Tests for Documentation in Bash
DESCRIPTION: This command executes the visual tests for the documentation. It should be run after generating the golden images.

LANGUAGE: bash
CODE:
npm run docs:visual-test

----------------------------------------

TITLE: Running Project Tests
DESCRIPTION: Command to execute the project's test suite after the development server is running.

LANGUAGE: bash
CODE:
npm run test

----------------------------------------

TITLE: Installing Project Dependencies for Vue 3 TypeScript Project
DESCRIPTION: This command installs all the necessary dependencies for the Vue 3 TypeScript project as defined in the package.json file.

LANGUAGE: sh
CODE:
npm install

----------------------------------------

TITLE: Generating Golden Images for Visual Tests in Bash
DESCRIPTION: This command generates the initial set of golden images for visual testing of the documentation. It should be run before the first test execution.

LANGUAGE: bash
CODE:
npm run docs:visual-test:update-screenshot

----------------------------------------

TITLE: Running Project Tests
DESCRIPTION: Command to execute the project's test suite after the development server is running.

LANGUAGE: bash
CODE:
npm run test

----------------------------------------

TITLE: GitHub Container Registry Login - Docker Authentication
DESCRIPTION: Commands for logging into GitHub Container Registry (ghcr.io) using Docker. Requires GitHub account email and Personal Access Token with write:packages permission.

LANGUAGE: bash
CODE:
docker login --registry docker.pkg.github.com

----------------------------------------

TITLE: Configuring package.json for Handsontable Code Examples
DESCRIPTION: Shows the required configuration in package.json for Handsontable code examples, including version, repository, and dependencies.

LANGUAGE: json
CODE:
{
  "version": "0.0.0",
  "homepage": "https://handsontable.com/",
  "private": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/handsontable/handsontable.git"
  },
  "bugs": {
    "url": "https://github.com/handsontable/handsontable/issues"
  },
  "author": "Handsoncode <hello@handsontable.com>",
  "license": "SEE LICENSE IN LICENSE.txt",
  "dependencies": {
    "handsontable": "latest",
    "@handsontable/{{ WRAPPER NAME }}": "latest"
  }
}

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to launch the local development server that will be accessible at http://localhost:8080.

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Updating Handsontable Hook Names in React
DESCRIPTION: Rename the 'beforeRender' and 'afterRender' hooks to 'beforeViewRender' and 'afterViewRender' respectively in your React application.

LANGUAGE: jsx
CODE:
// Before
<HotTable
  beforeRender={() => { ... }}
  afterRender={() => { ... }}
/>

// After
<HotTable
  beforeViewRender={() => { ... }}
  afterViewRender={() => { ... }}
/>

----------------------------------------

TITLE: TypeScript Import Example
DESCRIPTION: Shows how to import the LRUMap class in TypeScript from different sources including local files, AMD, and NPM package.

LANGUAGE: typescript
CODE:
import {LRUMap} from './lru'
// import {LRUMap} from 'lru'     // when using via AMD
// import {LRUMap} from 'lru_map' // when using from NPM
console.log('LRUMap:', LRUMap)

----------------------------------------

TITLE: Starting Local Development Server for Handsontable Project
DESCRIPTION: Launches a local development server for the Handsontable project. After running this command, the project can be accessed at http://localhost:8080.

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Initializing Formula Plugin in React
DESCRIPTION: Example of how to initialize the formula plugin in Handsontable 9.0 using React. It shows importing HyperFormula and passing it as an engine to the formulas prop.

LANGUAGE: jsx
CODE:
import { HyperFormula } from 'hyperformula';

formulas={{
  engine: HyperFormula
}}

----------------------------------------

TITLE: Installing Dependencies with NPM
DESCRIPTION: Command to install all required project dependencies using npm package manager.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Copying Template Directory Using Command Line
DESCRIPTION: Demonstrates the command to copy the JavaScript template directory to create a new example named 'sorting-data-custom-order'.

LANGUAGE: bash
CODE:
cp -r templates/js next/docs/js/sorting-data-custom-order

----------------------------------------

TITLE: Index Mapping with moveIndexes Example
DESCRIPTION: Demonstrates using the new rowIndexMapper API to move rows, replacing the deprecated modifyRow hook

LANGUAGE: javascript
CODE:
hotInstance.rowIndexMapper.moveIndexes([1, 0], 0);
hotInstance.render();

----------------------------------------

TITLE: Installing Dependencies for Handsontable Demo
DESCRIPTION: Command to install all necessary dependencies for the Handsontable demo project using npm.

LANGUAGE: shell
CODE:
npm install

----------------------------------------

TITLE: Demonstrating File Structure for New Code Example in JavaScript
DESCRIPTION: Shows the correct file structure for a new code example named 'sorting-data-custom-order' using the JavaScript template.

LANGUAGE: plaintext
CODE:
examples/
├─ next/
│  ├─ docs/
│  │  ├─ js/
│  │  │  ├─ sorting-data-custom-order/

----------------------------------------

TITLE: Updating HyperFormula dependency
DESCRIPTION: Updated HyperFormula dependency to version 3.

LANGUAGE: JavaScript
CODE:
// HyperFormula updated to v3

----------------------------------------

TITLE: Installing Dependencies for Angular Handsontable Example
DESCRIPTION: This command installs all necessary dependencies for the Angular Handsontable example project. It should be run before starting development or testing.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Staging Environment Documentation Deployment - Docker Commands
DESCRIPTION: Commands for building and pushing documentation to the staging environment using Docker.

LANGUAGE: bash
CODE:
npm run docs:docker:build

docker push docker.pkg.github.com/handsontable/handsontable/handsontable-documentation:next

----------------------------------------

TITLE: Installing Handsontable and Vue wrapper via npm
DESCRIPTION: Command to install Handsontable and its Vue 2 wrapper using npm package manager.

LANGUAGE: bash
CODE:
npm install handsontable @handsontable/vue

----------------------------------------

TITLE: Running Vue 3 Development Server
DESCRIPTION: Command to start the development server with hot-reload functionality for local development.

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: Running Vue 3 Development Server
DESCRIPTION: Command to start the development server with hot-reload functionality for local development.

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: ASCII Diagram of LRU Cache Structure
DESCRIPTION: Visual representation of the doubly-linked list structure used in the LRU cache implementation, showing the relationship between head (oldest) and tail (newest) entries.

LANGUAGE: txt
CODE:
           entry             entry             entry             entry        
          | head |.newer => |      |.newer => |      |.newer => | tail |      
.oldest = |  A   |          |  B   |          |  C   |          |  D   | = .newest
          |______| <= older.|______| <= older.|______| <= older.|______|      
                                                                             
       removed  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  added

----------------------------------------

TITLE: Basic usage of Handsontable in Vue 2 component
DESCRIPTION: Example of how to use Handsontable in a Vue 2 component, including necessary imports, data setup, and component registration.

LANGUAGE: javascript
CODE:
<template>
  <div class="ht-theme-main-dark-auto">
    <hot-table :data="data" :rowHeaders="true" :colHeaders="true"></hot-table>
  </div>
</template>

<script>
  import { HotTable } from '@handsontable/vue';
  import { registerAllModules } from 'handsontable/registry';
  import 'handsontable/styles/handsontable.min.css';
  import 'handsontable/styles/ht-theme-main.min.css';

  // register Handsontable's modules
  registerAllModules();

  export default {
    data: function() {
      return {
        data: [
          ["", "Ford", "Volvo", "Toyota", "Honda"],
          ["2016", 10, 11, 12, 13],
          ["2017", 20, 11, 14, 13],
          ["2018", 30, 15, 12, 13]
        ],
      };
    },
    components: {
      HotTable
    }
  }
</script>

----------------------------------------

TITLE: Installing Dependencies for Vue 3 TypeScript Project
DESCRIPTION: Installs all necessary dependencies for the Vue 3 TypeScript project using npm.

LANGUAGE: sh
CODE:
npm install

----------------------------------------

TITLE: Importing Handsontable Theme CSS in JavaScript
DESCRIPTION: Demonstrates how to import the base and theme CSS files for Handsontable using ECMAScript modules or CommonJS.

LANGUAGE: javascript
CODE:
// ESM (ECMAScript modules)
import 'handsontable/styles/handsontable.min.css';
import 'handsontable/styles/ht-theme-main.min.css';

// CommonJS
require('handsontable/styles/handsontable.min.css');
require('handsontable/styles/ht-theme-main.min.css');

----------------------------------------

TITLE: Running Tests for Handsontable Demo
DESCRIPTION: Executes test specs for the Handsontable demo project after starting the development server.

LANGUAGE: bash
CODE:
npm run test

----------------------------------------

TITLE: Installing Handsontable via npm
DESCRIPTION: Command to install Handsontable package using npm package manager.

LANGUAGE: bash
CODE:
npm install handsontable

----------------------------------------

TITLE: Starting Development Server for Handsontable Demo
DESCRIPTION: Launches a local development server for the Handsontable demo project. After running this command, the project can be viewed at http://localhost:5173.

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Installing Dependencies with NPM
DESCRIPTION: Command to install all required project dependencies using npm package manager.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Running Tests
DESCRIPTION: Command to execute test specifications after starting the development server.

LANGUAGE: bash
CODE:
npm run test

----------------------------------------

TITLE: Running Tests for Angular Handsontable Example
DESCRIPTION: This command runs the test specs for the Angular Handsontable example. It should be executed after the development server is running.

LANGUAGE: bash
CODE:
npm run test

----------------------------------------

TITLE: Starting Development Server for Angular Handsontable Example
DESCRIPTION: This command starts the local development server for the Angular Handsontable example. After running this command, the project can be viewed at http://localhost:8080.

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to launch the local development server on port 8080.

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Starting Development Server for Handsontable Demo
DESCRIPTION: Command to start the local development server for the Handsontable demo project.

LANGUAGE: shell
CODE:
npm run start

----------------------------------------

TITLE: Installing Dependencies for Handsontable Angular Demo
DESCRIPTION: Command to install all required npm dependencies for the project.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Installing Dependencies with NPM
DESCRIPTION: Command to install all required project dependencies using npm package manager.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Starting Local Development Server for Handsontable Demo in JavaScript
DESCRIPTION: Launches a local development server for the Handsontable demo project. After running this command, the project can be accessed at http://localhost:8080.

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Installing Dependencies for Handsontable Demo in JavaScript
DESCRIPTION: Installs all necessary dependencies for the Handsontable demo project using npm.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Installing Dependencies for Handsontable Angular Demo
DESCRIPTION: Command to install all required npm dependencies for the project.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Running Tests for Handsontable Project
DESCRIPTION: Executes test specs for the Handsontable project. This command should be run after the development server is started using 'npm run start'.

LANGUAGE: bash
CODE:
npm run test

----------------------------------------

TITLE: Installing Dependencies for Handsontable Project
DESCRIPTION: Installs all necessary dependencies for the Handsontable project using npm. This command should be run before starting development or testing.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Installing Dependencies with NPM
DESCRIPTION: Command to install all required project dependencies using npm package manager.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Running Tests for Handsontable Demo
DESCRIPTION: Commands to run tests for the Handsontable demo project. First, the development server must be launched, then the test specs can be executed.

LANGUAGE: shell
CODE:
npm run start
npm run test

----------------------------------------

TITLE: Installing Dependencies for Vue 3 TypeScript Project
DESCRIPTION: Command to install all required project dependencies using npm package manager

LANGUAGE: sh
CODE:
npm install

----------------------------------------

TITLE: Running Linter for Handsontable Project
DESCRIPTION: Command to run the linter on the Handsontable codebase from the root directory. This ensures that the code follows the project's coding style, which is inspired by the Airbnb JavaScript Style Guide.

LANGUAGE: bash
CODE:
npm run lint