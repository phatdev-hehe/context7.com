TITLE: Initializing Email Authentication in Better Auth
DESCRIPTION: Basic configuration to enable email and password authentication in Better Auth server instance. Sets up the core authentication functionality with optional auto sign-in behavior.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    emailAndPassword: {
        enabled: true,
        autoSignIn: false //defaults to true
    }
})

----------------------------------------

TITLE: Creating Basic Auth Instance
DESCRIPTION: Initial setup of Better Auth instance in TypeScript

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    //...
})

----------------------------------------

TITLE: Initializing Better Auth Project
DESCRIPTION: This command initializes Better Auth in a project. It allows specifying application name, framework, plugins, database, and package manager.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest init

----------------------------------------

TITLE: Creating Auth Client Instance
DESCRIPTION: Setup of client-side authentication instance with framework-specific configuration

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
export const authClient = createAuthClient({
    baseURL: "http://localhost:3000"
})

----------------------------------------

TITLE: Creating Auth Client Instance
DESCRIPTION: Examples of creating auth client instances across different frontend frameworks using createAuthClient function with baseURL configuration

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
export const authClient = createAuthClient({
    baseURL: "http://localhost:3000"
})

----------------------------------------

TITLE: Installing Better Auth Package
DESCRIPTION: Command to install the Better Auth package in your project

LANGUAGE: package-install
CODE:
better-auth

----------------------------------------

TITLE: Migrating Database for Two-Factor Authentication
DESCRIPTION: This snippet shows how to run the migration or generate the schema to add the necessary fields and tables to the database for 2FA support.

LANGUAGE: bash
CODE:
npx @better-auth/cli migrate

LANGUAGE: bash
CODE:
npx @better-auth/cli generate

----------------------------------------

TITLE: Implementing User Sign Up with Better Auth
DESCRIPTION: Client-side implementation for user registration using email and password. Includes handling for loading states, success callbacks, and error handling.

LANGUAGE: typescript
CODE:
import { authClient } from "@/lib/auth-client";

const { data, error } = await authClient.signUp.email({
        email,
        password,
        name,
        image,
        callbackURL: "/dashboard"
    }, {
        onRequest: (ctx) => {
            //show loading
        },
        onSuccess: (ctx) => {
            //redirect to the dashboard or sign in page
        },
        onError: (ctx) => {
            alert(ctx.error.message);
        },
});

----------------------------------------

TITLE: Setting Environment Variables
DESCRIPTION: Required environment variables for Better Auth configuration including secret key and base URL

LANGUAGE: txt
CODE:
BETTER_AUTH_SECRET=
BETTER_AUTH_URL=http://localhost:3000 #Base URL of your app

----------------------------------------

TITLE: User Sign Up with Email and Password in Better Auth (TypeScript)
DESCRIPTION: This code demonstrates how to sign up a user using the 'signUp.email' function provided by the Better Auth client. It requires an email, password, name, and optional image URL.

LANGUAGE: typescript
CODE:
const { data, error } = await authClient.signUp.email({
  email: "test@example.com",
  password: "password1234",
  name: "test",
  image: "https://example.com/image.png",
});

----------------------------------------

TITLE: Retrieving Headers from Better Auth API Response in TypeScript
DESCRIPTION: This snippet illustrates how to retrieve headers from a Better Auth API response. It uses the returnHeaders option when calling the signUpEmail endpoint and demonstrates accessing specific headers from the returned Headers object.

LANGUAGE: typescript
CODE:
const { headers, response } = await auth.api.signUpEmail({
	returnHeaders: true,
	body: {
		email: "john@doe.com",
		password: "password",
		name: "John Doe",
	},
});

const cookies = headers.get("set-cookie");
const headers = headers.get("x-custom-header");

----------------------------------------

TITLE: Initializing Better Auth and Calling API Endpoint in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Better Auth instance and call the getSession API endpoint on the server. It includes importing necessary modules and passing headers to the API call.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { headers } from "next/headers";

export const auth = betterAuth({
    //...
})

// calling get session on the server
await auth.api.getSession({
    headers: headers() //some endpoint might require headers
})

----------------------------------------

TITLE: Configuring Email Verification in Better Auth (TypeScript)
DESCRIPTION: This snippet shows how to configure email verification by implementing the 'sendVerificationEmail' function in the Better Auth configuration. It requires a custom email sending function.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { sendEmail } from "./email"; // your email sending function

export const auth = betterAuth({
  emailVerification: {
    sendVerificationEmail: async ( { user, url, token }, request) => {
      await sendEmail({
        to: user.email,
        subject: "Verify your email address",
        text: `Click the link to verify your email: ${url}`,
      });
    },
  },
});

----------------------------------------

TITLE: Triggering Password Reset in Better Auth Client (TypeScript)
DESCRIPTION: This snippet shows how to trigger the password reset process using the 'forgetPassword' function provided by the Better Auth client. It requires an email and a redirect URL.

LANGUAGE: typescript
CODE:
const { data, error } = await authClient.forgetPassword({
  email: "test@example.com",
  redirectTo: "/reset-password",
});

----------------------------------------

TITLE: Database Configuration Examples
DESCRIPTION: Examples of configuring Better Auth with different database providers including SQLite, PostgreSQL, MySQL, and various adapters

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { LibsqlDialect } from "@libsql/kysely-libsql";

const dialect = new LibsqlDialect({
    url: process.env.TURSO_DATABASE_URL || "",
    authToken: process.env.TURSO_AUTH_TOKEN || "",
})

export const auth = betterAuth({
  database: {
    dialect,
    type: "sqlite"
  }
});

----------------------------------------

TITLE: Configuring Session Expiration in Better Auth
DESCRIPTION: This snippet demonstrates how to configure session expiration and update age in Better Auth. It sets the session to expire after 7 days and updates the expiration every 1 day when the session is used.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    //... other config options
    session: {
        expiresIn: 60 * 60 * 24 * 7, // 7 days
        updateAge: 60 * 60 * 24 // 1 day (every 1 day the session expiration is updated)
    }
})

----------------------------------------

TITLE: User Sign In with Email and Password in Better Auth (TypeScript)
DESCRIPTION: This snippet shows how to sign in a user using the 'signIn.email' function provided by the Better Auth client. It requires an email and password, with optional rememberMe and callbackURL parameters.

LANGUAGE: typescript
CODE:
const { data, error } = await authClient.signIn.email({
  email: "test@example.com",
  password: "password1234",
});

----------------------------------------

TITLE: Installing Two-Factor Authentication Plugin in Better Auth
DESCRIPTION: This snippet demonstrates how to add the two-factor authentication plugin to the Better Auth configuration. It includes setting up the plugin and specifying the app name as the issuer.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { twoFactor } from "better-auth/plugins"

export const auth = betterAuth({
    // ... other config options
    appName: "My App", // provide your app name. It'll be used as an issuer.
    plugins: [
        twoFactor()
    ]
})

----------------------------------------

TITLE: Implementing Magic Link Sign-In in TypeScript
DESCRIPTION: Demonstrates how to trigger a magic link sign-in request with an email address and optional callback URL.

LANGUAGE: typescript
CODE:
const { data, error } = await authClient.signIn.magicLink({
  email: "user@email.com",
  callbackURL: "/dashboard", //redirect after successful login (optional)
});

----------------------------------------

TITLE: Configuring Authentication Methods
DESCRIPTION: Example of configuring email/password and social provider authentication methods

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    //...other options
    emailAndPassword: {
        enabled: true
    },
    socialProviders: {
       github: {
        clientId: process.env.GITHUB_CLIENT_ID,
        clientSecret: process.env.GITHUB_CLIENT_SECRET,
       }
    },
});

----------------------------------------

TITLE: Configuring Email Verification in Better Auth
DESCRIPTION: Demonstrates how to set up email verification by implementing the sendVerificationEmail function. This code shows the basic configuration for sending verification emails to users.

LANGUAGE: typescript
CODE:
import { betterAuth } from 'better-auth';
import { sendEmail } from './email'; // your email sending function

export const auth = betterAuth({
    emailVerification: {
        sendVerificationEmail: async ({ user, url, token }, request) => {
            await sendEmail({
                to: user.email,
                subject: 'Verify your email address',
                text: `Click the link to verify your email: ${url}`
            })
        }
    }
})

----------------------------------------

TITLE: Configuring Google OAuth Provider in Better Auth (TypeScript)
DESCRIPTION: This snippet demonstrates how to configure Google as an OAuth provider in Better Auth. It shows the basic setup with clientId and clientSecret, which are required to enable the social provider.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";

export const auth = betterAuth({
  // Other configurations...
  socialProviders: {
    google: {
      clientId: "YOUR_GOOGLE_CLIENT_ID",
      clientSecret: "YOUR_GOOGLE_CLIENT_SECRET",
    },
  },
});

----------------------------------------

TITLE: Initializing Better Auth with Prisma Adapter
DESCRIPTION: Demonstrates how to set up Better Auth with a Prisma adapter for database connectivity. Creates a new Prisma client instance and configures Better Auth to use SQLite as the database provider.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { prismaAdapter } from "better-auth/adapters/prisma";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export const auth = betterAuth({
  database: prismaAdapter(prisma, {
    provider: "sqlite",
  }),
});

----------------------------------------

TITLE: Updating Phone Number with OTP Verification
DESCRIPTION: These snippets show the process of updating a user's phone number, which involves sending an OTP to the new number and then verifying it.

LANGUAGE: typescript
CODE:
await authClient.phoneNumber.sendOtp({
    phoneNumber: "+1234567890" // New phone number
})

LANGUAGE: typescript
CODE:
const isVerified = await authClient.phoneNumber.verify({
    phoneNumber: "+1234567890",
    code: "123456",
    updatePhoneNumber: true // Set to true to update the phone number
})

----------------------------------------

TITLE: Customizing Session Response in Better Auth
DESCRIPTION: This code shows how to customize the session response using the customSession plugin in Better Auth. It adds roles and a new field to the user object in the session response.

LANGUAGE: typescript
CODE:
import { customSession } from "better-auth/plugins";

export const auth = betterAuth({
    plugins: [
        customSession(async ({ user, session }) => {
            const roles = findUserRoles(session.session.userId);
            return {
                roles,
                user: {
                    ...user,
                    newField: "newField",
                },
                session
            };
        }),
    ],
});

----------------------------------------

TITLE: Verifying TOTP Code for Two-Factor Authentication
DESCRIPTION: This code demonstrates how to verify a Time-based One-Time Password (TOTP) code entered by the user for two-factor authentication.

LANGUAGE: typescript
CODE:
await authClient.twoFactor.verifyTotp({
    code: "" // user input
})

----------------------------------------

TITLE: Generating Database Schema with Better Auth CLI
DESCRIPTION: This command generates the schema required by Better Auth. For ORM adapters like Prisma or Drizzle, it generates the appropriate schema. For the built-in Kysely adapter, it creates an SQL file to run directly on your database.

LANGUAGE: bash
CODE:
npx @better-auth/cli generate

----------------------------------------

TITLE: Configuring Server-Side Magic Link Plugin in TypeScript
DESCRIPTION: Sets up the magic link plugin on the server side with BetterAuth. Includes configuration for sending magic links via email with customizable callback handling.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { magicLink } from "better-auth/plugins";

export const auth = betterAuth({
    plugins: [
        magicLink({
            sendMagicLink: async ({ email, token, url }, request) => {
                // send email to user
            }
        })
    ]
})

----------------------------------------

TITLE: Sending OTP for Two-Factor Authentication
DESCRIPTION: This code shows how to send a One-Time Password (OTP) for two-factor authentication using the twoFactor.sendOtp function.

LANGUAGE: typescript
CODE:
const { data, error } = await authClient.twoFactor.sendOtp()
if (data) {
    // redirect or show the user to enter the code
}

----------------------------------------

TITLE: Customizing Table Names and Column Names in Better Auth
DESCRIPTION: This example shows how to customize table names and column names for the core schema in Better Auth. It demonstrates changing the user table name and some field names.

LANGUAGE: typescript
CODE:
export const auth = betterAuth({
  user: {
    modelName: "users",
    fields: {
      name: "full_name",
      email: "email_address",
    },
  },
  session: {
    modelName: "user_sessions",
    fields: {
      userId: "user_id",
    },
  },
});

----------------------------------------

TITLE: Passkey Sign-in Implementation
DESCRIPTION: Implementation of the passkey sign-in functionality with support for browser autofill and conditional UI.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client";
import { passkeyClient } from "better-auth/client/plugins";

const authClient = createAuthClient({
  plugins: [
    passkeyClient(),
  ],
});
const data = await authClient.signIn.passkey();

----------------------------------------

TITLE: Creating API Route Handler for Better Auth in Next.js
DESCRIPTION: Sets up an API route handler for Better Auth in Next.js using the App Router. It uses the 'toNextJsHandler' function to convert the auth handler to a Next.js compatible format.

LANGUAGE: typescript
CODE:
import { auth } from "@/lib/auth";
import { toNextJsHandler } from "better-auth/next-js";

export const { GET, POST } = toNextJsHandler(auth.handler);

----------------------------------------

TITLE: Configuring Email OTP Server Plugin
DESCRIPTION: Initial setup of the email OTP plugin on the server side. Demonstrates how to add the plugin to the auth configuration with basic OTP sending functionality.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { emailOTP } from "better-auth/plugins"

export const auth = betterAuth({
    // ... other config options
    plugins: [
        emailOTP({
                async sendVerificationOTP({ email, otp, type}) {
					// Implement the sendVerificationOTP method to send the OTP to the user's email address
				},
        })
    ]
})

----------------------------------------

TITLE: Signing In with OTP
DESCRIPTION: Implementation of the sign-in process using an email OTP. This method can also automatically register new users unless disabled.

LANGUAGE: typescript
CODE:
const { data, error } = await authClient.signIn.emailOtp({
    email: "user-email@email.com",
    otp: "123456"
})

----------------------------------------

TITLE: Basic Rate Limit Configuration in TypeScript
DESCRIPTION: Basic setup for rate limiting in Better Auth with custom window and max request settings.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    rateLimit: {
        window: 10, // time window in seconds
        max: 100, // max requests in the window
    },
})

----------------------------------------

TITLE: Creating API Route Handler for Better Auth in Next.js Pages Router
DESCRIPTION: Sets up an API route handler for Better Auth in Next.js using the Pages Router. It uses 'toNodeHandler' and disables the built-in body parser.

LANGUAGE: typescript
CODE:
import { toNodeHandler } from "better-auth/node"
import { auth } from "@/lib/auth"

// Disallow body parsing, we will parse it manually
export const config = { api: { bodyParser: false } }

export default toNodeHandler(auth.handler)

----------------------------------------

TITLE: Using Reactive Session in Better Auth Client
DESCRIPTION: This snippet demonstrates how to use the useSession action to access the current session reactively in the Better Auth client.

LANGUAGE: typescript
CODE:
import { authClient } from "@/lib/client"

const { data: session } = authClient.useSession()

----------------------------------------

TITLE: JWT Token Verification Implementation
DESCRIPTION: Example implementation for validating JWT tokens using the jose library with remote JWKS endpoint.

LANGUAGE: typescript
CODE:
import { jwtVerify, createRemoteJWKSet } from 'jose'

async function validateToken(token: string) {
  try {
    const JWKS = createRemoteJWKSet(
      new URL('http://localhost:3000/api/auth/jwks')
    )
    const { payload } = await jwtVerify(token, JWKS, {
      issuer: 'http://localhost:3000',
      audience: 'http://localhost:3000',
    })
    return payload
  } catch (error) {
    console.error('Token validation failed:', error)
    throw error
  }
}

const token = 'your.jwt.token'
const payload = await validateToken(token)

----------------------------------------

TITLE: Retrieving Session in Next.js React Server Component
DESCRIPTION: Shows how to get the user session in a Next.js React Server Component (RSC) using Better Auth. It includes conditional rendering based on authentication status.

LANGUAGE: typescript
CODE:
import { auth } from "@/lib/auth"
import { headers } from "next/headers"

export async function ServerComponent() {
    const session = await auth.api.getSession({
        headers: await headers()
    })
    if(!session) {
        return <div>Not authenticated</div>
    }
    return (
        <div>
            <h1>Welcome {session.user.name}</h1>
        </div>
    )
}

----------------------------------------

TITLE: Verifying TOTP Code
DESCRIPTION: This code snippet shows how to verify a TOTP code entered by the user during the two-factor authentication process.

LANGUAGE: typescript
CODE:
const verifyTotp = async (code: string) => {
    const { data, error } = await authClient.twoFactor.verifyTotp({ code })
}

----------------------------------------

TITLE: Configuring Google Provider in BetterAuth
DESCRIPTION: Setup configuration for Google social provider in BetterAuth by specifying client ID and secret from environment variables.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        google: {
            clientId: process.env.GOOGLE_CLIENT_ID as string,
            clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,
        },
    },
})

----------------------------------------

TITLE: Configuring Cross-Subdomain Cookies in Better Auth (TypeScript)
DESCRIPTION: This snippet demonstrates how to enable cross-subdomain cookies in Better Auth, allowing session sharing across different subdomains. It also includes configuration for trusted origins to mitigate CSRF risks.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    advanced: {
        crossSubDomainCookies: {
            enabled: true,
            domain: ".example.com", // Domain with a leading period
        },
        defaultCookieAttributes: {
            secure: true,
            httpOnly: true,
            sameSite: "none",  // Allows CORS-based cookie sharing across subdomains
            partitioned: true, // New browser standards will mandate this for foreign cookies
        },
    },
    trustedOrigins: [
        'https://example.com',
        'https://app1.example.com',
        'https://app2.example.com',
    ],
})

----------------------------------------

TITLE: Configuring Facebook Provider in TypeScript
DESCRIPTION: Sets up the Facebook authentication provider with client ID and secret credentials. This configuration is used to initialize the betterauth instance with Facebook social provider settings.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        facebook: {
            clientId: process.env.FACEBOOK_CLIENT_ID as string,
            clientSecret: process.env.FACEBOOK_CLIENT_SECRET as string,
        },
    },
})

----------------------------------------

TITLE: Marking Device as Trusted for Two-Factor Authentication
DESCRIPTION: This snippet shows how to mark a device as trusted during the two-factor authentication verification process, allowing the user to skip 2FA on subsequent sign-ins from this device.

LANGUAGE: typescript
CODE:
const verify2FA = async (code: string) => {
    const { data, error } = await authClient.twoFactor.verifyTotp({
        code,
        callbackURL: "/dashboard",
        trustDevice: true // Mark this device as trusted
    })
    if (data) {
        // 2FA verified and device trusted
    }
}

----------------------------------------

TITLE: Custom Username Validation Implementation
DESCRIPTION: Shows how to implement custom username validation logic in the plugin configuration.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { username } from "better-auth/plugins"

const auth = betterAuth({
    plugins: [
        username({
            usernameValidator: (username) => {
                if (username === "admin") {
                    return false
                }
            }
        })
    ]
})

----------------------------------------

TITLE: User Management Operations
DESCRIPTION: Examples of various admin operations including creating, listing, and managing users

LANGUAGE: typescript
CODE:
const newUser = await authClient.admin.createUser({
  name: "Test User",
  email: "test@example.com",
  password: "password123",
  role: "user",
  data: {
    customField: "customValue",
  },
});

LANGUAGE: typescript
CODE:
const users = await authClient.admin.listUsers({
  query: {
    limit: 10,
  },
});

----------------------------------------

TITLE: Configuring Custom Access Control
DESCRIPTION: Define custom permissions and roles for organization access control.

LANGUAGE: typescript
CODE:
import { createAccessControl } from "better-auth/plugins/access";

const statement = { 
    project: ["create", "share", "update", "delete"],
} as const; 

const ac = createAccessControl(statement); 

const member = ac.newRole({ 
    project: ["create"], 
}); 

const admin = ac.newRole({ 
    project: ["create", "update"], 
}); 

const owner = ac.newRole({ 
    project: ["create", "update", "delete"], 
}); 

const myCustomRole = ac.newRole({ 
    project: ["create", "update", "delete"], 
    organization: ["update"], 
});

----------------------------------------

TITLE: Implementing Twitter Sign-In with BetterAuth Client
DESCRIPTION: Shows how to implement the Twitter sign-in functionality using the betterauth client library. Creates an auth client instance and provides a sign-in function that uses the Twitter provider.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "twitter"
    })
}

----------------------------------------

TITLE: Server-side Bearer Token Authentication in TypeScript
DESCRIPTION: Use the auth.api.getSession function to authenticate requests on the server side using Bearer tokens.

LANGUAGE: typescript
CODE:
import { auth } from "@/auth";

export async function handler(req, res) {
  const session = await auth.api.getSession({
    headers: req.headers
  });
  
  if (!session) {
    return res.status(401).json({ error: "Unauthorized" });
  }
  
  // Process authenticated request
  // ...
}

----------------------------------------

TITLE: Setting Custom Cookie Options in Better Auth (TypeScript)
DESCRIPTION: This example shows how to set custom cookie names and attributes in Better Auth, specifically for the session_token cookie.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    advanced: {
        cookies: {
            session_token: {
                name: "custom_session_token",
                attributes: {
                    // Set custom cookie attributes
                }
            },
        }
    }
})

----------------------------------------

TITLE: Access Control Implementation
DESCRIPTION: Custom access control and role permission setup

LANGUAGE: typescript
CODE:
import { createAccessControl } from "better-auth/plugins/access";

const statement = {
    project: ["create", "share", "update", "delete"],
} as const;

const ac = createAccessControl(statement);

const user = ac.newRole({
    project: ["create"],
});

----------------------------------------

TITLE: Custom Rules Rate Limit Configuration
DESCRIPTION: Advanced rate limit configuration with custom rules for specific paths and async rule functions.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    //...other options
    rateLimit: {
        window: 60, // time window in seconds
        max: 100, // max requests in the window
        customRules: {
            "/sign-in/email": {
                window: 10,
                max: 3,
            },
            "/two-factor/*": async (request)=> {
                // custom function to return rate limit window and max
                return {
                    window: 10,
                    max: 3,
                }
            }
        },
    },
})

----------------------------------------

TITLE: Configuring Apple Provider in BetterAuth
DESCRIPTION: Sets up the Apple social provider configuration with client ID, secret, and optional app bundle identifier. Required for enabling Apple sign-in functionality in the application.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        apple: {
            clientId: process.env.APPLE_CLIENT_ID as string,
            clientSecret: process.env.APPLE_CLIENT_SECRET as string,
            // Optional
            appBundleIdentifier: process.env.APPLE_APP_BUNDLE_IDENTIFIER as string,
        },
    },
})

----------------------------------------

TITLE: Revoking Other Sessions in Better Auth Client
DESCRIPTION: This code shows how to revoke all other sessions except the current one using the revokeOtherSessions function in the Better Auth client.

LANGUAGE: typescript
CODE:
await authClient.revokeOtherSessions()

----------------------------------------

TITLE: Configuring Custom Password Hashing in Better Auth (TypeScript)
DESCRIPTION: This code demonstrates how to configure custom password hashing and verification functions in the Better Auth configuration. It allows for the use of custom algorithms instead of the default scrypt.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { scrypt } from "scrypt"

export const auth = betterAuth({
    //...rest of the options
    emailAndPassword: {
        password: {
            hash: // your custom password hashing function
            verify: // your custom password verification function
        }
    }
})

----------------------------------------

TITLE: Modifying Request Context Hook in TypeScript
DESCRIPTION: A before hook that modifies the request context by adding default user information during the signup process.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { createAuthMiddleware } from "better-auth/api";

export const auth = betterAuth({
    hooks: {
        before: createAuthMiddleware(async (ctx) => {
            if (ctx.path === "/sign-up/email") {
                return {
                    context: {
                        ...ctx,
                        body: {
                            ...ctx.body,
                            name: "John Doe",
                        },
                    }
                };
            }
        }),
    },
});

----------------------------------------

TITLE: User Sign Out in Better Auth (TypeScript)
DESCRIPTION: This code demonstrates how to sign out a user using the 'signOut' function provided by the Better Auth client. It also shows how to add a redirect on successful sign out.

LANGUAGE: typescript
CODE:
await authClient.signOut();

LANGUAGE: typescript
CODE:
await authClient.signOut({
  fetchOptions: {
    onSuccess: () => {
      router.push("/login"); // redirect to login page
    },
  },
});

----------------------------------------

TITLE: Configuring SSO Plugin with User Provisioning
DESCRIPTION: Set up the SSO plugin with custom user provisioning and organization provisioning options.

LANGUAGE: typescript
CODE:
const auth = betterAuth({
    plugins: [
        sso({
            provisionUser: async (user) => {
                // provision user
            },
            organizationProvisioning: {
                disabled: false,
                defaultRole: "member",
                getRole: async (user) => {
                    // get role if needed
                },
            },
        }),
    ],
});

----------------------------------------

TITLE: Configuring MySQL Connection with Better Auth
DESCRIPTION: Demonstrates how to set up a MySQL connection pool and integrate it with Better Auth. Shows the basic configuration including host, user, password and database settings.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { createPool } from "mysql2/promise";

export const auth = betterAuth({
  database: createPool({
    host: "localhost",
    user: "root",
    password: "password",
    database: "database",
  }),
});

----------------------------------------

TITLE: Implementing Organization Creation Hooks
DESCRIPTION: Use beforeCreate and afterCreate hooks to customize the organization creation process.

LANGUAGE: typescript
CODE:
export const auth = betterAuth({
    plugins: [
        organization({
            organizationCreation: {
                disabled: false,
                beforeCreate: async ({ organization, user }, request) => {
                    return {
                        data: {
                            ...organization,
                            metadata: {
                                customField: "value"
                            }
                        }
                    }
                },
                afterCreate: async ({ organization, member, user }, request) => {
                    await setupDefaultResources(organization.id)
                }
            }
        })
    ]
})

----------------------------------------

TITLE: Implementing GitHub Sign-In in TypeScript
DESCRIPTION: Shows how to implement the GitHub sign-in functionality using the betterauth client library. Creates an auth client instance and defines a sign-in function that uses the GitHub provider.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "github"
    })
}

----------------------------------------

TITLE: Disabling Session Freshness Check in Better Auth
DESCRIPTION: This snippet demonstrates how to disable the session freshness check in Better Auth by setting the freshAge to 0.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    //... other config options
    session: {
        freshAge: 0 // Disable freshness check
    }
})

----------------------------------------

TITLE: Using Bearer Tokens Outside Auth Client in TypeScript
DESCRIPTION: Demonstrate how to use Bearer tokens to authenticate API requests without using the auth client.

LANGUAGE: typescript
CODE:
const token = localStorage.getItem("bearer_token");

const response = await fetch("https://api.example.com/data", {
  headers: {
    Authorization: `Bearer ${token}`
  }
});

const data = await response.json();

----------------------------------------

TITLE: Installing Phone Number Plugin in Better Auth Server
DESCRIPTION: This snippet demonstrates how to add the phone number plugin to the Better Auth server configuration. It includes setting up the sendOTP function for OTP delivery.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { phoneNumber } from "better-auth/plugins"

const auth = betterAuth({
    plugins: [ 
        phoneNumber({  
            sendOTP: ({ phoneNumber, code }, request) => { 
                // Implement sending OTP code via SMS 
            } 
        }) 
    ] 
})

----------------------------------------

TITLE: Installing Admin Plugin Configuration in TypeScript
DESCRIPTION: Configuration setup for adding the Admin plugin to Better Auth server

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { admin } from "better-auth/plugins"

export const auth = betterAuth({
    // ... other config options
    plugins: [
        admin()
    ]
})

----------------------------------------

TITLE: Installing Organization Plugin in Better Auth Configuration
DESCRIPTION: Add the organization plugin to the auth config and migrate the database to add necessary fields and tables.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { organization } from "better-auth/plugins"

export const auth = betterAuth({
    plugins: [ 
        organization() 
    ] 
})

LANGUAGE: bash
CODE:
npx @better-auth/cli migrate

----------------------------------------

TITLE: Setting Initial Password
DESCRIPTION: Server-side implementation for setting a user's initial password.

LANGUAGE: typescript
CODE:
await auth.api.setPassword({
    body: { newPassword: "password" },
    headers: //
});

----------------------------------------

TITLE: Using Better Auth in Next.js Server Action with Auto Cookie Handling
DESCRIPTION: Demonstrates using Better Auth in a Next.js server action with automatic cookie handling enabled by the 'nextCookies' plugin.

LANGUAGE: typescript
CODE:
"use server";
import { auth } from "@/lib/auth"

const signIn = async () => {
    await auth.api.signInEmail({
        body: {
            email: "user@email.com",
            password: "password",
        }
    })
}

----------------------------------------

TITLE: Adding Organization Client Plugin
DESCRIPTION: Add the organization client plugin to the auth client configuration.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
import { organizationClient } from "better-auth/client/plugins"

const client = createAuthClient({
    plugins: [ 
        organizationClient() 
    ] 
})

----------------------------------------

TITLE: Mounting Better Auth Handler in Astro API Route
DESCRIPTION: This snippet demonstrates how to create an API route in Astro to handle Better Auth requests. It uses a catch-all route to forward all auth-related requests to the Better Auth handler.

LANGUAGE: typescript
CODE:
import { auth } from "~/auth";
import type { APIRoute } from "astro";

export const ALL: APIRoute = async (ctx) => {
	return auth.handler(ctx.request);
};

----------------------------------------

TITLE: Installing Username Plugin Server Configuration
DESCRIPTION: Demonstrates how to add and configure the username plugin on the server side of BetterAuth.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { username } from "better-auth/plugins"

const auth = betterAuth({
    plugins: [
        username()
    ]
})

----------------------------------------

TITLE: Implementing Account Deletion Verification
DESCRIPTION: Setup for account deletion verification process.

LANGUAGE: typescript
CODE:
export const auth = betterAuth({
    user: {
        deleteUser: {
            enabled: true,
            sendDeleteAccountVerification: async (
                {
                    user,
                    url,
                    token
                },
                request
            ) => {
                // Your email sending logic here
            },
        },
    },
});

----------------------------------------

TITLE: Enabling Two-Factor Authentication
DESCRIPTION: This snippet shows how to enable two-factor authentication by calling the twoFactor.enable method with the user's password.

LANGUAGE: typescript
CODE:
const { data } = await authClient.twoFactor.enable({
    password: "password" // user password required
})

----------------------------------------

TITLE: Local JWKS Token Verification
DESCRIPTION: Implementation for validating JWT tokens using locally stored JWKS data.

LANGUAGE: typescript
CODE:
import { jwtVerify, createLocalJWKSet } from 'jose'

async function validateToken(token: string) {
  try {
    const storedJWKS = {
      keys: [{
        //...
      }]
    };
    const JWKS = createLocalJWKSet({
      keys: storedJWKS.data?.keys!,
    })
    const { payload } = await jwtVerify(token, JWKS, {
      issuer: 'http://localhost:3000',
      audience: 'http://localhost:3000',
    })
    return payload
  } catch (error) {
    console.error('Token validation failed:', error)
    throw error
  }
}

const token = 'your.jwt.token'
const payload = await validateToken(token)

----------------------------------------

TITLE: Creating Stripe Subscription
DESCRIPTION: Use the subscription.upgrade method to create a Stripe subscription and redirect to checkout.

LANGUAGE: typescript
CODE:
await client.subscription.upgrade({
    plan: "pro",
    successUrl: "/dashboard",
    cancelUrl: "/pricing",
    referenceId: "org_123" // Optional: defaults to the current logged in user id
    seats: 5 // Optional: for team plans
});

----------------------------------------

TITLE: Configuring Captcha Plugin in Better Auth (TypeScript)
DESCRIPTION: This snippet demonstrates how to add and configure the Captcha plugin in the Better Auth configuration. It shows setting up the plugin with a specific provider and secret key.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { captcha } from "better-auth/plugins";

export const auth = betterAuth({
    plugins: [
        captcha({
            provider: "cloudflare-turnstile", // or "google-recaptcha"
            secretKey: process.env.TURNSTILE_SECRET_KEY!,
        }),
    ],
});

----------------------------------------

TITLE: Changing User Password
DESCRIPTION: Implementation for changing a user's password with session management.

LANGUAGE: typescript
CODE:
await authClient.changePassword({
    newPassword: "newPassword123",
    currentPassword: "oldPassword123",
    revokeOtherSessions: true,
});

----------------------------------------

TITLE: Creating API Keys
DESCRIPTION: Examples of creating API keys from both client and server side

LANGUAGE: typescript
CODE:
const { data: apiKey, error } = await authClient.apiKey.create({
    name: "My API Key",
    expiresIn: 60 * 60 * 24 * 7,
    prefix: "my_app",
    metadata: {
        tier: "premium",
    },
});

LANGUAGE: typescript
CODE:
const apiKey = await auth.api.createApiKey({
    body: {
      name: "My API Key",
      expiresIn: 60 * 60 * 24 * 365,
      prefix: "my_app",
      remaining: 100,
      refillAmount: 100,
      refillInterval: 60 * 60 * 24 * 7,
      metadata: {
          tier: "premium",
      },
      rateLimitTimeWindow: 1000 * 60 * 60 * 24,
      rateLimitMax: 100,
      rateLimitEnabled: true,
      userId: user.id,
    },
});

----------------------------------------

TITLE: Registering OIDC Provider (Client-side)
DESCRIPTION: Use the client-side API to register an OIDC provider with minimal or full configuration.

LANGUAGE: typescript
CODE:
import { authClient } from "@/lib/auth-client";

// only with issuer if the provider supports discovery
await authClient.sso.register({
    issuer: "https://idp.example.com",
    providerId: "example-provider",
});

// with all fields
await authClient.sso.register({
    issuer: "https://idp.example.com",
    domain: "example.com",
    clientId: "client-id",
    clientSecret: "client-secret",
    authorizationEndpoint: "https://idp.example.com/authorize",
    tokenEndpoint: "https://idp.example.com/token",
    jwksEndpoint: "https://idp.example.com/jwks",
    mapping: {
        id: "sub",
        email: "email",
        emailVerified: "email_verified",
        name: "name",
        image: "picture",
    },
    providerId: "example-provider",
});

----------------------------------------

TITLE: Cross-Subdomain Cookie Configuration
DESCRIPTION: Configuration for enabling cross-subdomain cookie support in Better Auth.

LANGUAGE: typescript
CODE:
export const auth = createAuth({
  advanced: {
    crossSubDomainCookies: {
      enabled: true
    }
  }
})

----------------------------------------

TITLE: Creating Auth Instance in Remix
DESCRIPTION: This snippet demonstrates how to create and export a Better Auth instance in a Remix project. It configures the database connection and exports the auth object.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    database: {
        provider: "postgres", //change this to your database provider
        url: process.env.DATABASE_URL, // path to your database or connection string
    }
})

----------------------------------------

TITLE: Implementing Database Hooks in Better Auth
DESCRIPTION: This example demonstrates how to implement database hooks in Better Auth. It shows a before hook for user creation that modifies the user object and an after hook for additional actions.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";

export const auth = betterAuth({
  databaseHooks: {
    user: {
      create: {
        before: async (user, ctx) => {
          // Modify the user object before it is created
          return {
            data: {
              ...user,
              firstName: user.name.split(" ")[0],
              lastName: user.name.split(" ")[1],
            },
          };
        },
        after: async (user) => {
          //perform additional actions, like creating a stripe customer
        },
      },
    },
  },
});

----------------------------------------

TITLE: Adding One Tap Server Plugin in TypeScript
DESCRIPTION: This snippet demonstrates how to add the One Tap server plugin to the Better Auth configuration. It imports the necessary modules and adds the oneTap plugin to the auth configuration.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { oneTap } from "better-auth/plugins";

export const auth = betterAuth({
  plugins: [
    oneTap(), // Add the One Tap server plugin
  ]
});

----------------------------------------

TITLE: Database Migration Commands for Better Auth CLI
DESCRIPTION: Shows the commands to run database migrations or generate schemas using the Better Auth CLI tool. This is necessary to add the required fields and tables for the OIDC provider.

LANGUAGE: bash
CODE:
npx @better-auth/cli migrate

LANGUAGE: bash
CODE:
npx @better-auth/cli generate

----------------------------------------

TITLE: Revoking Session in Better Auth
DESCRIPTION: Method to revoke a specific session using its session token.

LANGUAGE: typescript
CODE:
await authClient.multiSession.revoke({
    sessionToken: "session-token"
})

----------------------------------------

TITLE: Retrieving Current Session in Better Auth Client
DESCRIPTION: This code shows how to retrieve the current active session using the getSession function in the Better Auth client.

LANGUAGE: typescript
CODE:
import { authClient } from "@/lib/client"

const { data: session } = await authClient.getSession()

----------------------------------------

TITLE: Throwing Errors in Database Hooks in Better Auth
DESCRIPTION: This example shows how to throw errors using the APIError class in database hooks to stop the operation from proceeding under certain conditions.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { APIError } from "better-auth/api";

export const auth = betterAuth({
  databaseHooks: {
    user: {
      create: {
        before: async (user, ctx) => {
          if (user.isAgreedToTerms === false) {
            // Your special condition.
            // Send the API error.
            throw new APIError("BAD_REQUEST", {
              message: "User must agree to the TOS before signing up.",
            });
          }
          return {
            data: user,
          };
        },
      },
    },
  },
});

----------------------------------------

TITLE: Linking Anonymous Account to Email Authentication in TypeScript
DESCRIPTION: This snippet shows how to link an anonymous account to an email authentication method. When called, it triggers the onLinkAccount callback and deletes the anonymous user by default.

LANGUAGE: typescript
CODE:
const user = await authClient.signIn.email({
    email,
})

----------------------------------------

TITLE: Installing API Key Client Plugin
DESCRIPTION: Configures the API key plugin in the Better Auth client instance

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
import { apiKeyClient } from "better-auth/client/plugins"

const authClient = createAuthClient({
    plugins: [
        apiKeyClient()
    ]
})

----------------------------------------

TITLE: Mapping Social Provider Profile to User in Better Auth
DESCRIPTION: This example demonstrates how to map profile data from social providers to the user object in Better Auth. It shows mapping for GitHub and Google providers.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";

export const auth = betterAuth({
  socialProviders: {
    github: {
      clientId: "YOUR_GITHUB_CLIENT_ID",
      clientSecret: "YOUR_GITHUB_CLIENT_SECRET",
      mapProfileToUser: (profile) => {
        return {
          firstName: profile.name.split(" ")[0],
          lastName: profile.name.split(" ")[1],
        };
      },
    },
    google: {
      clientId: "YOUR_GOOGLE_CLIENT_ID",
      clientSecret: "YOUR_GOOGLE_CLIENT_SECRET",
      mapProfileToUser: (profile) => {
        return {
          firstName: profile.given_name,
          lastName: profile.family_name,
        };
      },
    },
  },
});

----------------------------------------

TITLE: Requiring Email Verification for Login
DESCRIPTION: Configuration to require email verification before allowing users to log in with email and password authentication.

LANGUAGE: typescript
CODE:
export const auth = betterAuth({
    emailAndPassword: {
        requireEmailVerification: true
    }
})

----------------------------------------

TITLE: Adding Captcha Token to Sign-In Request (TypeScript)
DESCRIPTION: This code snippet illustrates how to include a captcha token in the headers of a sign-in request. It's essential for the server-side validation of the captcha response.

LANGUAGE: typescript
CODE:
await authClient.signIn.email({
    email: "user@example.com",
    password: "secure-password",
    fetchOptions: {
        headers: {
            "x-captcha-response": turnstileToken,
        },
    },
});

----------------------------------------

TITLE: Configuring onLinkAccount Callback for Anonymous Plugin in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the onLinkAccount callback for the Anonymous plugin. This callback is called when an anonymous user links their account to a new authentication method.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    plugins: [
        anonymous({
            onLinkAccount: async ({ anonymousUser, newUser }) => {
               // perform actions like moving the cart items from anonymous user to the new user
            }
        })
    ]

----------------------------------------

TITLE: Retrieving Session in Next.js Server Action
DESCRIPTION: Demonstrates how to get the user session in a Next.js server action using Better Auth. It uses the 'headers' function from Next.js to pass request headers.

LANGUAGE: typescript
CODE:
import { auth } from "@/lib/auth"
import { headers } from "next/headers"

const someAuthenticatedAction = async () => {
    "use server";
    const session = await auth.api.getSession({
        headers: await headers()
    })
};

----------------------------------------

TITLE: Verifying Magic Link Token in TypeScript
DESCRIPTION: Shows how to manually verify a magic link token when implementing custom verification flow.

LANGUAGE: typescript
CODE:
const { data, error } = await authClient.magicLink.verify({
  query: {
    token,
  },
});

----------------------------------------

TITLE: Configuring Cookie Caching in Better Auth
DESCRIPTION: This snippet demonstrates how to enable cookie caching in Better Auth by setting the session.cookieCache option in the auth configuration. Cookie caching stores session data in a short-lived, signed cookie to reduce database queries.

LANGUAGE: typescript
CODE:
const auth = new betterAuth({
  session: {
    cookieCache: {
      enabled: true,
      maxAge: 5 * 60, // Cache duration in seconds
    },
  },
});

----------------------------------------

TITLE: Generating PostgreSQL Schema for Better Auth
DESCRIPTION: This command uses the Better Auth CLI to generate a database schema based on the Better Auth configuration and plugins.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest generate

----------------------------------------

TITLE: Sending OTP for Phone Number Verification
DESCRIPTION: This code demonstrates how to send an OTP to a user's phone number for verification using the Better Auth client.

LANGUAGE: typescript
CODE:
await authClient.phoneNumber.sendOtp({
    phoneNumber: "+1234567890"
})

----------------------------------------

TITLE: Signing In with SSO (Server API)
DESCRIPTION: Use the server-side API to initiate SSO authentication.

LANGUAGE: typescript
CODE:
const res = await auth.api.signInSSO({
    body: {
        organizationSlug: "example-org",
        callbackURL: "/dashboard",
    }
});

----------------------------------------

TITLE: Making Authenticated Requests in TypeScript
DESCRIPTION: Demonstrate how to make authenticated API calls using the configured auth client.

LANGUAGE: typescript
CODE:
// This request is automatically authenticated
const { data } = await authClient.listSessions();

----------------------------------------

TITLE: Configuring Email Change Feature
DESCRIPTION: Configuration to enable email change functionality in Better Auth.

LANGUAGE: typescript
CODE:
export const auth = betterAuth({
    user: {
        changeEmail: {
            enabled: true,
        }
    }
})

----------------------------------------

TITLE: Generating MS SQL Schema with Better Auth CLI
DESCRIPTION: This command uses the Better Auth CLI to generate the database schema for MS SQL based on the Better Auth configuration and plugins.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest generate

----------------------------------------

TITLE: Signing In with Phone Number and Password
DESCRIPTION: This snippet demonstrates how to sign in a user using their phone number and password.

LANGUAGE: typescript
CODE:
await authClient.signIn.phoneNumber({
    phoneNumber: "+123456789",
    password: "password",
    rememberMe: true
})

----------------------------------------

TITLE: Enabling Dynamic Client Registration in TypeScript
DESCRIPTION: Shows how to enable dynamic client registration for the OIDC provider by setting the allowDynamicClientRegistration option to true.

LANGUAGE: typescript
CODE:
const auth = betterAuth({
    plugins: [oidcProvider({
        allowDynamicClientRegistration: true,
    })]
})

----------------------------------------

TITLE: Connecting Better Auth to PostgreSQL in TypeScript
DESCRIPTION: This snippet demonstrates how to connect Better Auth to a PostgreSQL database using the 'pg' library. It initializes a connection pool with a provided connection string.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { Pool } from "pg";

export const auth = betterAuth({
  database: new Pool({
    connectionString: "postgres://user:password@localhost:5432/database",
  }),
});

----------------------------------------

TITLE: Custom Profile Mapping for Google OAuth in Better Auth (TypeScript)
DESCRIPTION: This example shows how to customize the mapping of the user profile returned by Google to the user object in your database. It demonstrates the use of the mapProfileToUser function to extract specific fields from the OAuth provider's profile.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";

export const auth = betterAuth({
  // Other configurations...
  socialProviders: {
    google: {
      clientId: "YOUR_GOOGLE_CLIENT_ID",
      clientSecret: "YOUR_GOOGLE_CLIENT_SECRET",
      mapProfileToUser: (profile) => {
        return {
          firstName: profile.given_name,
          lastName: profile.family_name,
        };
      },
    },
  },
});

----------------------------------------

TITLE: Using Active Organization
DESCRIPTION: Retrieve and use the active organization using the useActiveOrganization hook.

LANGUAGE: tsx
CODE:
import { client } from "@/auth/client"

function App(){
    const { data: activeOrganization } = client.useActiveOrganization()
    return (
        <div>
            {activeOrganization ? <p>{activeOrganization.name}</p> : null}
        </div>
    )
}

----------------------------------------

TITLE: Configuring Microsoft OAuth Provider in TypeScript
DESCRIPTION: Configuration setup for Microsoft OAuth provider in betterauth. Demonstrates how to initialize the auth configuration with Microsoft credentials and optional parameters like tenantId and requireSelectAccount.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        microsoft: {
            clientId: process.env.MICROSOFT_CLIENT_ID as string,
            clientSecret: process.env.MICROSOFT_CLIENT_SECRET as string,
            // Optional
            tenantId: 'common',
            requireSelectAccount: true
        },
    },
})

----------------------------------------

TITLE: Installing Polar Better Auth Plugin
DESCRIPTION: Command to install the Polar Better Auth plugin using a package manager.

LANGUAGE: bash
CODE:
@polar-sh/better-auth

----------------------------------------

TITLE: JSON Response Hook in TypeScript
DESCRIPTION: Example of sending JSON responses from a hook using the ctx.json utility.

LANGUAGE: typescript
CODE:
const hook = createAuthMiddleware(async (ctx) => {
    return ctx.json({
        message: "Hello World",
    });
});

----------------------------------------

TITLE: Extending User Schema with Additional Fields in Better Auth
DESCRIPTION: This example shows how to extend the user schema with additional fields in Better Auth. It adds custom fields for role and language preference.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";

export const auth = betterAuth({
  user: {
    additionalFields: {
      role: {
        type: "string",
        required: false,
        defaultValue: "user",
        input: false, // don't allow user to set role
      },
      lang: {
        type: "string",
        required: false,
        defaultValue: "en",
      },
    },
  },
});

----------------------------------------

TITLE: Configuring Dropbox Provider in BetterAuth
DESCRIPTION: Demonstrates how to configure the Dropbox authentication provider by setting up the client ID and secret in the BetterAuth instance. The credentials are accessed from environment variables for security.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        dropbox: {
            clientId: process.env.DROPBOX_CLIENT_ID as string,
            clientSecret: process.env.DROPBOX_CLIENT_SECRET as string,
        },
    },
})

----------------------------------------

TITLE: Migrating Database for Phone Number Plugin
DESCRIPTION: These commands show how to migrate the database or generate the schema to add the necessary fields and tables for the phone number plugin.

LANGUAGE: bash
CODE:
npx @better-auth/cli migrate

LANGUAGE: bash
CODE:
npx @better-auth/cli generate

----------------------------------------

TITLE: Redirect Hook in TypeScript
DESCRIPTION: Implementation of a redirect hook using ctx.redirect utility to redirect users to a different path.

LANGUAGE: typescript
CODE:
import { createAuthMiddleware } from "better-auth/api";

const hook = createAuthMiddleware(async (ctx) => {
    throw ctx.redirect("/sign-up/name");
});

----------------------------------------

TITLE: Handling Errors in Better Auth API Calls with TypeScript
DESCRIPTION: This snippet shows how to handle errors when calling Better Auth API endpoints. It demonstrates using a try-catch block and checking for instances of APIError to handle specific API-related errors.

LANGUAGE: typescript
CODE:
import { APIError } from "better-auth/api";

try {
    await auth.api.signInEmail({
        body: {
            email: "",
            password: ""
        }
    })
} catch (error) {
    if (error instanceof APIError) {
        console.log(error.message, error.status)
    }
}

----------------------------------------

TITLE: Verifying Phone Number with OTP
DESCRIPTION: This snippet shows how to verify a phone number using the OTP code sent to the user.

LANGUAGE: typescript
CODE:
const isVerified = await authClient.phoneNumber.verify({
    phoneNumber: "+1234567890",
    code: "123456"
})

----------------------------------------

TITLE: Configuring Kick Provider in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the Kick authentication provider using betterauth. It imports the necessary module and sets up the auth instance with Kick credentials.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        kick: {
            clientId: process.env.KICK_CLIENT_ID as string,
            clientSecret: process.env.KICK_CLIENT_SECRET as string,
        },
    }
})

----------------------------------------

TITLE: Handling Two-Factor Authentication during Sign In
DESCRIPTION: This snippet illustrates how to handle the two-factor authentication redirect during the sign-in process, either globally or in-place.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client";
import { twoFactorClient } from "better-auth/client/plugins";

const authClient = createAuthClient({
    plugins: [twoFactorClient({
        onTwoFactorRedirect(){
            // Handle the 2FA verification globally
        }
    })]
})

LANGUAGE: typescript
CODE:
await authClient.signIn.email({
        email: "user@example.com",
        password: "password123",
    }, {
        async onSuccess(context) {
            if (context.data.twoFactorRedirect) {
                // Handle the 2FA verification in place
            }
        }
    }
)

----------------------------------------

TITLE: Handling One Tap Prompt Dismissals in TypeScript
DESCRIPTION: This snippet illustrates how to handle prompt dismissals using exponential backoff. It shows how to use the onPromptNotification callback to be notified when the maximum number of attempts is reached, allowing for alternative UI rendering.

LANGUAGE: typescript
CODE:
authClient.oneTap({
  onPromptNotification: (notification) => {
    console.warn("Prompt was dismissed or skipped. Consider displaying an alternative sign-in option.", notification);
    // Render your alternative UI here
  }
});

----------------------------------------

TITLE: Disabling ID Generation in Better Auth
DESCRIPTION: This example shows how to disable ID generation in Better Auth, assuming the database will generate IDs automatically.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { db } from "./db";

export const auth = betterAuth({
  database: {
    db: db,
  },
  advanced: {
    generateId: false,
  },
});

----------------------------------------

TITLE: Initializing Better Auth Client in Expo
DESCRIPTION: This snippet shows how to initialize the Better Auth client in an Expo application, including setting up the Expo client plugin and secure storage.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/react";
import { expoClient } from "@better-auth/expo/client";
import * as SecureStore from "expo-secure-store";

export const authClient = createAuthClient({
    baseURL: "http://localhost:8081", /* base url of your Better Auth backend. */
    plugins: [
        expoClient({
            scheme: "myapp",
            storagePrefix: "myapp",
            storage: SecureStore,
        })
    ]
});

----------------------------------------

TITLE: Implementing VK Sign-In with Better Auth Client (TypeScript)
DESCRIPTION: This snippet shows how to implement the VK sign-in functionality using the Better Auth client. It creates an auth client instance and defines an async function to initiate the VK sign-in process.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client";
const authClient = createAuthClient();

const signIn = async () => {
  const data = await authClient.signIn.social({
    provider: "vk",
  });
};

----------------------------------------

TITLE: Global Rate Limit Error Handling
DESCRIPTION: Implementation of global error handling for rate limit responses in the auth client.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client";

export const authClient =  createAuthClient({
    fetchOptions: {
        onError: async (context) => {
            const { response } = context;
            if (response.status === 429) {
                const retryAfter = response.headers.get("X-Retry-After");
                console.log(`Rate limit exceeded. Retry after ${retryAfter} seconds`);
            }
        },
    }
})

----------------------------------------

TITLE: Disabling Two-Factor Authentication
DESCRIPTION: This code shows how to disable two-factor authentication by calling the twoFactor.disable method with the user's password.

LANGUAGE: typescript
CODE:
const { data } = await authClient.twoFactor.disable({
    password: "password" // user password required
})

----------------------------------------

TITLE: Running Database Migrations with Better Auth CLI
DESCRIPTION: This command checks your database and prompts you to add missing tables or update existing ones with new columns. It's only supported for the built-in Kysely adapter.

LANGUAGE: bash
CODE:
npx @better-auth/cli migrate

----------------------------------------

TITLE: Installing JWT Plugin Configuration in TypeScript
DESCRIPTION: Configuration code to add the JWT plugin to the Better Auth setup.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { jwt } from "better-auth/plugins"

export const auth = betterAuth({
    plugins: [
        jwt(),
    ]
})

----------------------------------------

TITLE: Configuring LinkedIn Provider in BetterAuth
DESCRIPTION: Sets up the LinkedIn social provider configuration with client ID and secret credentials obtained from LinkedIn Developer Portal. The credentials are accessed through environment variables for security.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        linkedin: {
            clientId: process.env.LINKEDIN_CLIENT_ID as string,
            clientSecret: process.env.LINKEDIN_CLIENT_SECRET as string,
        },
    },
})

----------------------------------------

TITLE: Configuring Polar Plugin in Better Auth
DESCRIPTION: TypeScript code snippet showing how to configure the Polar plugin within the Better Auth setup. It includes setting up the Polar client, enabling customer creation, customer portal, checkout, and webhooks.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { polar } from "@polar-sh/better-auth";
import { Polar } from "@polar-sh/sdk";

const client = new Polar({
    accessToken: process.env.POLAR_ACCESS_TOKEN,
    // Use 'sandbox' if you're using the Polar Sandbox environment
    // Remember that access tokens, products, etc. are completely separated between environments.
    // Access tokens obtained in Production are for instance not usable in the Sandbox environment.
    server: 'production'
});

const auth = betterAuth({
    // ... Better Auth config
    plugins: [
        polar({
            client,
            // Enable automatic Polar Customer creation on signup
            createCustomerOnSignUp: true,
            // Enable customer portal
            enableCustomerPortal: true, // Deployed under /portal for authenticated users
            // Configure checkout
            checkout: {
                enabled: true,
                products: [
                    {
                        productId: "123-456-789", // ID of Product from Polar Dashboard
                        slug: "pro" // Custom slug for easy reference in Checkout URL, e.g. /checkout/pro
                    }
                ],
                successUrl: "/success?checkout_id={CHECKOUT_ID}"
            },
            // Incoming Webhooks handler will be installed at /polar/webhooks
            webhooks: {
                secret: process.env.POLAR_WEBHOOK_SECRET,
                onPayload: ...,
            }
        })
    ]
});

----------------------------------------

TITLE: Generating Secret Key for Better Auth
DESCRIPTION: This command generates a secret key for the Better Auth instance, which is crucial for security purposes.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest secret

----------------------------------------

TITLE: Configuring Session Freshness in Better Auth
DESCRIPTION: This code shows how to customize the freshness age for sessions in Better Auth. It sets the freshness age to 5 minutes, meaning a session is considered fresh if created within the last 5 minutes.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    //... other config options
    session: {
        freshAge: 60 * 5 // 5 minutes (the session is fresh if created within the last 5 minutes)
    }
})

----------------------------------------

TITLE: Initiating Social Sign-In with OAuth Proxy in TypeScript
DESCRIPTION: This snippet demonstrates how to initiate a social sign-in process using the OAuth Proxy. It shows that the plugin will override the provided callback URL with a proxy endpoint.

LANGUAGE: typescript
CODE:
await authClient.signIn.social({
    provider: "github",
    callbackURL: "/dashboard" // the plugin will override this to something like "http://localhost:3000/api/auth/oauth-proxy?callbackURL=/dashboard"
})

----------------------------------------

TITLE: Standard Apple Sign-In Implementation
DESCRIPTION: Basic implementation of Apple sign-in using the social provider. Uses the BetterAuth client to initiate the authentication flow.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "apple"
    })
}

----------------------------------------

TITLE: Setting Active Session in Better Auth
DESCRIPTION: Method to set an active session using a session token.

LANGUAGE: typescript
CODE:
await authClient.multiSession.setActive({
    sessionToken: "session-token"
})

----------------------------------------

TITLE: Setting Active Organization
DESCRIPTION: Set the active organization for the user session using the setActive function.

LANGUAGE: typescript
CODE:
await authClient.organization.setActive({
  organizationId: "organization-id"
})

// or using organizationSlug
authClient.organization.setActive({
  organizationSlug: "organization-slug"
})

----------------------------------------

TITLE: Generating Schema with Better Auth CLI
DESCRIPTION: This command generates the required schema for Better Auth. It adapts to different ORMs like Prisma, Drizzle, or the built-in Kysely adapter.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest generate

----------------------------------------

TITLE: Plugin Integration Example
DESCRIPTION: Example of extending the auth client functionality using the magic link plugin

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
import { magicLinkClient } from "better-auth/client/plugins"

const authClient = createAuthClient({
    plugins: [
        magicLinkClient()
    ]
})

----------------------------------------

TITLE: Implementing Roblox Sign-In Client
DESCRIPTION: Client-side implementation for Roblox authentication using the better-auth client SDK. Shows how to trigger the social sign-in process for Roblox.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "roblox"
    })
}

----------------------------------------

TITLE: Installing Passkey Plugin Configuration in TypeScript
DESCRIPTION: Configuration setup for adding the passkey plugin to the auth instance with customizable options for relying party ID, name, and authenticator selection criteria.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { passkey } from "better-auth/plugins/passkey"

export const auth = betterAuth({
    plugins: [
        passkey(),
    ],
})

----------------------------------------

TITLE: Implementing Caching with React Query
DESCRIPTION: This code demonstrates how to use React Query's useQuery hook to cache data. It fetches and caches a list of users, setting a stale time of 15 minutes to control how often the data is refetched.

LANGUAGE: tsx
CODE:
import { useQuery } from '@tanstack/react-query';

const fetchUsers = async () => {
    const { users } = await auth.api.listUsers();
    return users;
};

export default function Users() {
    const { data: users, isLoading } = useQuery('users', fetchUsers, {
        staleTime: 1000 * 60 * 15, // Cache for 15 minutes
    });

    if (isLoading) return <div>Loading...</div>;

    return (
        <ul>
            {users.map(user => (
                <li key={user.id}>{user.name}</li>
            ))}
        </ul>
    );
}

----------------------------------------

TITLE: Mounting Better Auth Handler in Express.js
DESCRIPTION: This snippet demonstrates how to set up an Express.js server with Better Auth integration. It includes mounting the auth handler, configuring middleware, and starting the server. The code also mentions the difference in routing between Express.js v4 and v5.

LANGUAGE: typescript
CODE:
import express from "express";
import { toNodeHandler } from "better-auth/node";
import { auth } from "./auth";

const app = express();
const port = 3005;

app.all("/api/auth/*", toNodeHandler(auth)); // For ExpressJS v4
// app.all("/api/auth/*splat", toNodeHandler(auth)); For ExpressJS v5 

// Mount express json middleware after Better Auth handler
// or only apply it to routes that don't interact with Better Auth
app.use(express.json());

app.listen(port, () => {
	console.log(`Example app listening on port ${port}`);
});

----------------------------------------

TITLE: Installing Generic OAuth Plugin in Better Auth Configuration
DESCRIPTION: Add the Generic OAuth plugin to the auth configuration. This snippet demonstrates how to import and configure the plugin with a sample OAuth provider.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { genericOAuth } from "better-auth/plugins"

export const auth = betterAuth({
    // ... other config options
    plugins: [ 
        genericOAuth({
            config: [
                {
                    providerId: "provider-id",
                    clientId: "test-client-id",
                    clientSecret: "test-client-secret",
                    discoveryUrl: "https://auth.example.com/.well-known/openid-configuration",
                    // ... other config options
                },
                // Add more providers as needed
            ]
        })
    ]
})

----------------------------------------

TITLE: Apple Sign-In with ID Token
DESCRIPTION: Implementation of Apple sign-in using an ID token and optional nonce and access token. Useful for client-side token-based authentication without redirect flow.

LANGUAGE: typescript
CODE:
await authClient.signIn.social({
    provider: "apple",
    idToken: {
        token: // Apple ID Token,
        nonce: // Nonce (optional)
        accessToken: // Access Token (optional)
    }
})

----------------------------------------

TITLE: Listing Device Sessions in Better Auth
DESCRIPTION: Examples of how to list active sessions from both client and server side.

LANGUAGE: typescript
CODE:
await authClient.multiSession.listDeviceSessions()

LANGUAGE: typescript
CODE:
await auth.api.listDeviceSessions()

----------------------------------------

TITLE: Email Verification with OTP
DESCRIPTION: Example of verifying a user's email address using an OTP code.

LANGUAGE: typescript
CODE:
const { data, error } = await authClient.emailOtp.verifyEmail({
    email: "user-email@email.com",
    otp: "123456"
})

----------------------------------------

TITLE: Error Handling Hook in TypeScript
DESCRIPTION: Demonstration of error handling in hooks using the APIError utility for custom error responses.

LANGUAGE: typescript
CODE:
import { createAuthMiddleware, APIError } from "better-auth/api";

const hook = createAuthMiddleware(async (ctx) => {
    throw new APIError("BAD_REQUEST", {
        message: "Invalid request",
    });
});

----------------------------------------

TITLE: Adding Stripe Client Plugin to Auth Client
DESCRIPTION: Configure the Stripe client plugin for the Better Auth client, enabling subscription management.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
import { stripeClient } from "@better-auth/stripe/client"

export const client = createAuthClient({
    // ... your existing config
    plugins: [
        stripeClient({
            subscription: true //if you want to enable subscription management
        })
    ]
})

----------------------------------------

TITLE: Configuring Roblox Provider in better-auth
DESCRIPTION: Configuration setup for the Roblox authentication provider using betterAuth. Requires Roblox client ID and secret from environment variables.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth" 

export const auth = betterAuth({
    socialProviders: {
        roblox: {
            clientId: process.env.ROBLOX_CLIENT_ID,
            clientSecret: process.env.ROBLOX_CLIENT_SECRET,
        },
    },
})

----------------------------------------

TITLE: Initializing Multi Session Plugin Server Configuration
DESCRIPTION: Configuration setup for adding the multi-session plugin to the Better Auth server instance.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { multiSession } from "better-auth/plugins"

export const auth = betterAuth({
    plugins: [ 
        multiSession(), 
    ] 
})

----------------------------------------

TITLE: Listing Active Sessions in Better Auth Client
DESCRIPTION: This code shows how to retrieve a list of active sessions for the user using the listSessions function in the Better Auth client.

LANGUAGE: typescript
CODE:
import { authClient } from "@/lib/client"

const sessions = await authClient.listSessions()

----------------------------------------

TITLE: Configuring Social Authentication Providers
DESCRIPTION: Server-side configuration for enabling social authentication providers like GitHub. Requires provider-specific client credentials.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    socialProviders: {
        github: {
            clientId: process.env.GITHUB_CLIENT_ID!,
            clientSecret: process.env.GITHUB_CLIENT_SECRET!,
        }
    },
})

----------------------------------------

TITLE: Database Migration Commands
DESCRIPTION: CLI commands for migrating or generating the necessary database schema for passkey support.

LANGUAGE: bash
CODE:
npx @better-auth/cli migrate

LANGUAGE: bash
CODE:
npx @better-auth/cli generate

----------------------------------------

TITLE: Adding Anonymous Plugin to Auth Configuration in TypeScript
DESCRIPTION: This snippet shows how to add the anonymous plugin to the Better Auth configuration. It imports the necessary modules and adds the anonymous plugin to the plugins array.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { anonymous } from "better-auth/plugins" // [!code highlight]

export const auth = betterAuth({
    // ... other config options
    plugins: [
        anonymous() // [!code highlight]
    ]
})

----------------------------------------

TITLE: Installing Stripe Plugin for Better Auth
DESCRIPTION: Install the Stripe plugin and SDK for Better Auth integration.

LANGUAGE: bash
CODE:
@better-auth/stripe

LANGUAGE: bash
CODE:
stripe

----------------------------------------

TITLE: Implementing Authentication Middleware in Hono
DESCRIPTION: Middleware implementation to handle session and user context in Hono routes, with type definitions and session validation.

LANGUAGE: typescript
CODE:
import { Hono } from "hono";
import { auth } from "./auth";
import { serve } from "@hono/node-server";
import { cors } from "hono/cors";
 
const app = new Hono<{
	Variables: {
		user: typeof auth.$Infer.Session.user | null;
		session: typeof auth.$Infer.Session.session | null
	}
}>();

app.use("*", async (c, next) => {
	const session = await auth.api.getSession({ headers: c.req.raw.headers });

  	if (!session) {
    	c.set("user", null);
    	c.set("session", null);
    	return next();
  	}

  	c.set("user", session.user);
  	c.set("session", session.session);
  	return next();
});

app.on(["POST", "GET"], "/api/auth/*", (c) => {
	return auth.handler(c.req.raw);
});


serve(app);

----------------------------------------

TITLE: Defining Database Schema in Plugin
DESCRIPTION: Example of adding custom database schema definitions to a Better Auth plugin.

LANGUAGE: typescript
CODE:
import { BetterAuthPlugin } from "better-auth/plugins";

const myPlugin = ()=> {
    return {
        id: "my-plugin",
        schema: {
            myTable: {
                fields: {
                    name: {
                        type: "string"
                    }
                },
                modelName: "myTable" // optional if you want to use a different name than the key
            }
        }
    } satisfies BetterAuthPlugin
}

----------------------------------------

TITLE: Generating Open API Schema - TypeScript Implementation
DESCRIPTION: Code example showing how to programmatically generate the Open API schema as a JSON object using the auth API.

LANGUAGE: typescript
CODE:
import { auth } from "~/lib/auth"

const openAPISchema = await auth.api.generateOpenAPISchema()
console.log(openAPISchema)

----------------------------------------

TITLE: Running Database Migration for Anonymous Plugin in Bash
DESCRIPTION: This snippet demonstrates how to run the database migration for the Anonymous plugin using the Better Auth CLI. It adds the necessary fields and tables to the database.

LANGUAGE: bash
CODE:
npx @better-auth/cli migrate

----------------------------------------

TITLE: Installing Username Plugin Client Configuration
DESCRIPTION: Shows how to set up the username plugin on the client side of the application.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
import { usernameClient } from "better-auth/client/plugins"

const authClient = createAuthClient({
    plugins: [
        usernameClient()
    ]
})

----------------------------------------

TITLE: Configuring Cookie Prefix in Better Auth (TypeScript)
DESCRIPTION: This snippet demonstrates how to change the default cookie prefix in Better Auth by setting the cookiePrefix option in the advanced configuration object.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    advanced: {
        cookiePrefix: "my-app"
    }
})

----------------------------------------

TITLE: Using Better Auth Session with SSR in Nuxt Vue Component
DESCRIPTION: This example shows how to use the Better Auth session with Server-Side Rendering (SSR) in a Nuxt Vue component. It uses the useSession function with useFetch for SSR compatibility.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { authClient } from "~/lib/auth-client";

const { data: session } = await authClient.useSession(useFetch);
</script>

<template>
    <p>
        {{ session }}
    </p>
</template>

----------------------------------------

TITLE: Handling OIDC Consent in TypeScript
DESCRIPTION: Demonstrates how to handle user consent for OIDC authorization using the oauth2.consent method. This is typically called after displaying a custom consent screen.

LANGUAGE: typescript
CODE:
const res = await client.oauth2.consent({
	accept: true, // or false to deny
});

----------------------------------------

TITLE: Error Handling Implementation
DESCRIPTION: Example of implementing error handling with type support for multiple languages

LANGUAGE: typescript
CODE:
const authClient = createAuthClient();

type ErrorTypes = Partial<
	Record<
		keyof typeof client.$ERROR_CODES,
		{
			en: string;
			es: string;
		}
	>
>;

const errorCodes = {
	USER_ALREADY_EXISTS: {
		en: "user already registered",
		es: "usuario ya registrada",
	},
} satisfies ErrorTypes;

const getErrorMessage = (code: string, lang: "en" | "es") => {
	if (code in errorCodes) {
		return errorCodes[code as keyof typeof errorCodes][lang];
	}
	return "";
};

----------------------------------------

TITLE: Implementing Authentication UI Component
DESCRIPTION: Example React component showing authentication state handling in the extension popup

LANGUAGE: tsx
CODE:
import { authClient } from "./auth/auth-client"

function IndexPopup() {
    const {data, isPending, error} = authClient.useSession();
    if(isPending){
        return <>Loading...</>
    }
    if(error){
        return <>Error: {error.message}</>
    }
    if(data){
        return <>Signed in as {data.user.name}</>
    }
}

export default IndexPopup;

----------------------------------------

TITLE: Initializing Multi Session Plugin Client Configuration
DESCRIPTION: Client-side setup for the multi-session plugin in Better Auth.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
import { multiSessionClient } from "better-auth/client/plugins"

const authClient =  createAuthClient({
    plugins: [
        multiSessionClient()
    ]
})

----------------------------------------

TITLE: Displaying QR Code for TOTP Setup in React
DESCRIPTION: This React component example shows how to display a QR code for the user to scan with their authenticator app when setting up TOTP.

LANGUAGE: tsx
CODE:
import QRCode from "react-qr-code";

export default function UserCard(){
    const { data: session } = client.useSession();
	const { data: qr } = useQuery({
		queryKey: ["two-factor-qr"],
		queryFn: async () => {
			const res = await authClient.twoFactor.getTotpUri();
			return res.data;
		},
		enabled: !!session?.user.twoFactorEnabled,
	});
    return (
        <QRCode value={qr?.totpURI || ""} />
   )
}

----------------------------------------

TITLE: Signing In with SSO (Email)
DESCRIPTION: Authenticate using SSO with an email address for domain matching.

LANGUAGE: typescript
CODE:
const res = await authClient.signIn.sso({
    email: "user@example.com",
    callbackURL: "/dashboard",
});

----------------------------------------

TITLE: React Session Hook Usage
DESCRIPTION: Implementation example of using the useSession hook in a React component

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/react"
const { useSession } = createAuthClient()

export function User() {
    const {
        data: session,
        isPending,
        error,
        refetch
    } = useSession()
    return (
        //...
    )
}

----------------------------------------

TITLE: JWT Plugin Configuration Options
DESCRIPTION: Example configurations for customizing JWT plugin behavior including algorithm selection and payload modification.

LANGUAGE: typescript
CODE:
jwt({
  jwks: {
    keyPairConfig: {
      alg: "EdDSA",
      crv: "Ed25519"
    }
  }
})

----------------------------------------

TITLE: Enabling and Configuring Teams
DESCRIPTION: Enable and configure the teams feature in the organization plugin.

LANGUAGE: typescript
CODE:
export const auth = betterAuth({
    plugins: [
        organization({
            teams: {
                enabled: true,
                maximumTeams: 10, // Optional: limit teams per organization
                allowRemovingAllTeams: false // Optional: prevent removing the last team
            }
        })
    ]
})

----------------------------------------

TITLE: Registering OIDC Provider (Server-side)
DESCRIPTION: Use the server-side API to register an OIDC provider with full configuration.

LANGUAGE: typescript
CODE:
const { headers } = await signInWithTestUser();
await auth.api.createOIDCProvider({
    body: {
        issuer: "https://idp.example.com",
        domain: "example.com",
        clientId: "your-client-id",
        clientSecret: "your-client-secret",
        authorizationEndpoint: "https://idp.example.com/authorize",
        tokenEndpoint: "https://idp.example.comtoken",
        jwksEndpoint: "https://idp.example.com/jwks",
        mapping: {
            id: "sub",
            email: "email",
            emailVerified: "email_verified",
            name: "name",
            image: "picture",
        },
        providerId: "example-provider",
    },
    headers,
});

----------------------------------------

TITLE: Mounting Better Auth Handler in SolidStart
DESCRIPTION: This code mounts the Better Auth handler to the SolidStart server. It imports the auth instance and uses the toSolidStartHandler function to create GET and POST route handlers.

LANGUAGE: typescript
CODE:
import { auth } from "~/lib/auth";
import { toSolidStartHandler } from "better-auth/solid-start";

export const { GET, POST } = toSolidStartHandler(auth);

----------------------------------------

TITLE: Installing Better Auth Client Package
DESCRIPTION: npm command to install the Better Auth client library

LANGUAGE: shell
CODE:
npm i better-auth

----------------------------------------

TITLE: Declaring Astro Locals Types for Better Auth Integration
DESCRIPTION: This snippet shows how to declare types for Astro locals to include Better Auth User and Session types. This is necessary for TypeScript support when accessing user and session data in Astro components.

LANGUAGE: typescript
CODE:
/// <reference path="../.astro/types.d.ts" />

declare namespace App {
    // Note: 'import {} from ""' syntax does not work in .d.ts files.
    interface Locals {
        user: import("better-auth").User | null;
        session: import("better-auth").Session | null;
    }
}

----------------------------------------

TITLE: Implementing Authorization Logic in TypeScript
DESCRIPTION: Adds age verification logic using hooks to ensure users are above 5 years old during sign-up.

LANGUAGE: typescript
CODE:
import { APIError } from "better-auth/api";
import { createAuthMiddleware } from "better-auth/plugins";

LANGUAGE: typescript
CODE:
{
  matcher: (context) => context.path.startsWith("/sign-up/email"),
  handler: createAuthMiddleware(async (ctx) => {
    const { birthday } = ctx.body;
    if(!birthday instanceof Date) {
      throw new APIError("BAD_REQUEST", { message: "Birthday must be of type Date." });
    }

    const today = new Date();
    const fiveYearsAgo = new Date(today.setFullYear(today.getFullYear() - 5));

    if(birthday >= fiveYearsAgo) {
      throw new APIError("BAD_REQUEST", { message: "User must be above 5 years old." });
    }

    return { context: ctx };
  }),
}

----------------------------------------

TITLE: Adding Two-Factor Authentication Client Plugin
DESCRIPTION: This code snippet demonstrates how to add the client-side plugin for two-factor authentication and specify the redirect behavior when 2FA verification is needed.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
import { twoFactorClient } from "better-auth/client/plugins"

const authClient = createAuthClient({
    plugins: [
        twoFactorClient()
    ]
})

----------------------------------------

TITLE: Configuring Minimum Username Length
DESCRIPTION: Example of setting the minimum username length in the plugin configuration.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { username } from "better-auth/plugins"

const auth = betterAuth({
    plugins: [
        username({
            minUsernameLength: 5
        })
    ]
})

----------------------------------------

TITLE: Cookie Management Hook in TypeScript
DESCRIPTION: Example showing how to manage cookies in hooks, including setting and getting both regular and signed cookies.

LANGUAGE: typescript
CODE:
import { createAuthMiddleware } from "better-auth/api";

const hook = createAuthMiddleware(async (ctx) => {
    ctx.setCookies("my-cookie", "value");
    await ctx.setSignedCookie("my-signed-cookie", "value", ctx.context.secret, {
        maxAge: 1000,
    });

    const cookie = ctx.getCookies("my-cookie");
    const signedCookie = await ctx.getSignedCookies("my-signed-cookie");
});

----------------------------------------

TITLE: Migrating Database with Better Auth CLI
DESCRIPTION: This command applies the Better Auth schema directly to the database when using the built-in Kysely adapter. For other adapters, ORM-specific migration tools should be used.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest migrate

----------------------------------------

TITLE: Revoking a Specific Session in Better Auth Client
DESCRIPTION: This snippet demonstrates how to revoke a specific session using the revokeSession function in the Better Auth client. It requires passing the session token as a parameter.

LANGUAGE: typescript
CODE:
await authClient.revokeSession({
    token: "session-token"
})

----------------------------------------

TITLE: Inviting Members to an Organization
DESCRIPTION: Send an invitation to a user to join an organization with a specified role.

LANGUAGE: typescript
CODE:
await authClient.organization.inviteMember({
    email: "test@email.com",
    role: "admin", //this can also be an array for multiple roles (e.g. ["admin", "sale"])
})

----------------------------------------

TITLE: Creating Better Auth Client in Remix
DESCRIPTION: This snippet shows how to create a Better Auth client instance in a Remix application. It imports the createAuthClient function and exports the configured client.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/react" // make sure to import from better-auth/react

export const authClient = createAuthClient({
    //you can pass client configuration here
})

----------------------------------------

TITLE: Implementing Email Domain Restriction Hook in TypeScript
DESCRIPTION: A before hook implementation that validates email domains during signup, ensuring only @example.com emails are accepted.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { createAuthMiddleware, APIError } from "better-auth/api";

export const auth = betterAuth({
    hooks: {
        before: createAuthMiddleware(async (ctx) => {
            if (ctx.path !== "/sign-up/email") {
                return;
            }
            if (!ctx.body?.email.endsWith("@example.com")) {
                throw new APIError("BAD_REQUEST", {
                    message: "Email must end with @example.com",
                });
            }
        }),
    },
});

----------------------------------------

TITLE: Using Better Auth Client in SvelteKit Component
DESCRIPTION: This snippet shows an example of using the Better Auth client in a Svelte component. It demonstrates how to handle user sessions, sign-in with GitHub, and sign-out functionality.

LANGUAGE: svelte
CODE:
<script lang="ts">
  import { authClient } from "$lib/client";
  const session = authClient.useSession();
</script>
    <div>
      {#if $session.data}
        <div>
          <p>
            {$session?.data?.user.name}
          </p>
          <button
            on:click={async () => {
              await authClient.signOut();
            }}
          >
            Sign Out
          </button>
        </div>
      {:else}
        <button
          on:click={async () => {
            await authClient.signIn.social({
              provider: "github",
            });
          }}
        >
          Continue with github
        </button>
      {/if}
    </div>

----------------------------------------

TITLE: Configuring App Name in Better Auth
DESCRIPTION: Sets the application name in Better Auth configuration.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
export const auth = betterAuth({
	appName: "My App",
})

----------------------------------------

TITLE: Creating an Organization
DESCRIPTION: Use the client to create a new organization with a name, slug, and optional logo.

LANGUAGE: typescript
CODE:
await authClient.organization.create({
    name: "My Organization",
    slug: "my-org",
    logo: "https://example.com/logo.png"
})

----------------------------------------

TITLE: Username-based Sign-in Implementation
DESCRIPTION: Demonstrates how to implement username-based authentication using the client API.

LANGUAGE: typescript
CODE:
const data = await authClient.signIn.username({
    username: "test",
    password: "password1234",
})

----------------------------------------

TITLE: Username-based Sign-in Implementation
DESCRIPTION: Demonstrates how to implement username-based authentication using the client API.

LANGUAGE: typescript
CODE:
const data = await authClient.signIn.username({
    username: "test",
    password: "password1234",
})

----------------------------------------

TITLE: Inferring Additional Fields in Separate Projects
DESCRIPTION: Manual configuration for type inference of additional fields in separate client-server projects.

LANGUAGE: typescript
CODE:
import type { auth } from "./auth";
import { inferAdditionalFields } from "better-auth/client/plugins";

export const authClient = createAuthClient({
  plugins: [inferAdditionalFields({
      user: {
        role: {
          type: "string"
        }
      }
  })],
});

----------------------------------------

TITLE: Configuring GitHub Social Provider in TypeScript
DESCRIPTION: Demonstrates how to configure the GitHub social provider by setting up the auth instance with client ID and secret environment variables.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        github: {
            clientId: process.env.GITHUB_CLIENT_ID as string,
            clientSecret: process.env.GITHUB_CLIENT_SECRET as string,
        },
    },
})

----------------------------------------

TITLE: Database Migration Commands
DESCRIPTION: CLI commands to migrate or generate the necessary database schema for JWT support.

LANGUAGE: bash
CODE:
npx @better-auth/cli migrate

LANGUAGE: bash
CODE:
npx @better-auth/cli generate

----------------------------------------

TITLE: Verifying Backup Code for Two-Factor Authentication
DESCRIPTION: This snippet shows how to verify a backup code provided by the user as an account recovery method for two-factor authentication.

LANGUAGE: typescript
CODE:
await authClient.twoFactor.verifyBackupCode({code: ""}, {
    onSuccess(){
        //redirect the user on success
    },
    onError(ctx){
        alert(ctx.error.message)
    }
})

----------------------------------------

TITLE: Installing API Key Plugin in Better Auth Server
DESCRIPTION: Configures the API key plugin in the Better Auth server instance

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { apiKey } from "better-auth/plugins"

const auth = betterAuth({
    plugins: [
        apiKey()
    ]
})

----------------------------------------

TITLE: Inferring Client-Side Types in Better Auth
DESCRIPTION: Example of type inference using $Infer property in the client SDK.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"

const authClient = createAuthClient()

export type Session = typeof authClient.$Infer.Session

----------------------------------------

TITLE: Implementing Sign Up Functionality with Better Auth in Remix
DESCRIPTION: This code demonstrates how to implement a sign-up form using Better Auth in a Remix application. It includes form handling, state management, and error handling.

LANGUAGE: typescript
CODE:
import { Form } from "@remix-run/react"
import { useState } from "react"
import { authClient } from "~/lib/auth.client"

export default function SignUp() {
  const [email, setEmail] = useState("")
  const [name, setName] = useState("")
  const [password, setPassword] = useState("")

  const signUp = async () => {
    await authClient.signUp.email(
      {
        email,
        password,
        name,
      },
      {
        onRequest: (ctx) => {
          // show loading state
        },
        onSuccess: (ctx) => {
          // redirect to home
        },
        onError: (ctx) => {
          alert(ctx.error)
        },
      },
    )
  }

  return (
    <div>
      <h2>
        Sign Up
      </h2>
      <Form
        onSubmit={signUp}
      >
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Name"
        />
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="Email"
        />
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          placeholder="Password"
        />
        <button
          type="submit"
        >
          Sign Up
        </button>
      </Form>
    </div>
  )
}

----------------------------------------

TITLE: Initiating OAuth Sign-In Process
DESCRIPTION: Start the OAuth sign-in process using the authClient. This function initiates the OAuth flow for a specified provider.

LANGUAGE: typescript
CODE:
const response = await authClient.signIn.oauth2({
  providerId: "provider-id",
  callbackURL: "/dashboard" // the path to redirect to after the user is authenticated
});

----------------------------------------

TITLE: Viewing Backup Codes on Server
DESCRIPTION: This code demonstrates how to view the backup codes for a user on the server side using the auth.api.viewBackupCodes method.

LANGUAGE: typescript
CODE:
await auth.api.viewBackupCodes({
    body: {
        userId: "user-id"
    }
})

----------------------------------------

TITLE: Signing In with SSO (Organization)
DESCRIPTION: Authenticate using SSO with an organization slug when a provider is associated with an organization.

LANGUAGE: typescript
CODE:
const res = await authClient.signIn.sso({
    organizationSlug: "example-org",
    callbackURL: "/dashboard",
});

----------------------------------------

TITLE: Customizing Plugin Schema in Better Auth
DESCRIPTION: This example demonstrates how to customize table names and column names for plugins in Better Auth. It shows customization for the two-factor authentication plugin.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { twoFactor } from "better-auth/plugins";

export const auth = betterAuth({
  plugins: [
    twoFactor({
      schema: {
        user: {
          fields: {
            twoFactorEnabled: "two_factor_enabled",
            secret: "two_factor_secret",
          },
        },
      },
    }),
  ],
});

----------------------------------------

TITLE: Client Plugin Configuration
DESCRIPTION: Setup for the admin client plugin in the authentication client instance

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
import { adminClient } from "better-auth/client/plugins"

const authClient = createAuthClient({
    plugins: [
        adminClient()
    ]
})

----------------------------------------

TITLE: Installing Bearer Plugin in TypeScript
DESCRIPTION: Add the Bearer plugin to your authentication setup using the betterAuth function from the better-auth library.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { bearer } from "better-auth/plugins";

export const auth = betterAuth({
    plugins: [bearer()]
});

----------------------------------------

TITLE: Fetching User Info from OIDC Provider in TypeScript
DESCRIPTION: Demonstrates how a client application would use the UserInfo endpoint to retrieve information about the authenticated user. It requires a valid access token.

LANGUAGE: typescript
CODE:
const response = await fetch('https://your-domain.com/api/auth/oauth2/userinfo', {
  headers: {
    'Authorization': 'Bearer ACCESS_TOKEN'
  }
});

const userInfo = await response.json();
// userInfo contains user details based on the scopes granted

----------------------------------------

TITLE: Signing In with SSO (Provider ID)
DESCRIPTION: Authenticate using SSO by specifying the provider's ID directly.

LANGUAGE: typescript
CODE:
const res = await authClient.signIn.sso({
    providerId: "example-provider-id",
    callbackURL: "/dashboard",
});

----------------------------------------

TITLE: Implementing Redis Secondary Storage in Better Auth
DESCRIPTION: This example demonstrates how to implement secondary storage using Redis in Better Auth. It includes connecting to Redis and implementing the SecondaryStorage interface methods.

LANGUAGE: typescript
CODE:
import { createClient } from "redis";
import { betterAuth } from "better-auth";

const redis = createClient();
await redis.connect();

export const auth = betterAuth({
	// ... other options
	secondaryStorage: {
		get: async (key) => {
			const value = await redis.get(key);
			return value ? value : null;
		},
		set: async (key, value, ttl) => {
			if (ttl) await redis.set(key, value, { EX: ttl });
			// or for ioredis:
			// if (ttl) await redis.set(key, value, 'EX', ttl)
			else await redis.set(key, value);
		},
		delete: async (key) => {
			await redis.del(key);
		}
	}
});

----------------------------------------

TITLE: Configuring Reddit Provider in BetterAuth
DESCRIPTION: Basic configuration for setting up Reddit as a social provider in BetterAuth. Requires client ID and client secret from Reddit Developer Portal.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        reddit: {
            clientId: process.env.REDDIT_CLIENT_ID as string,
            clientSecret: process.env.REDDIT_CLIENT_SECRET as string,
        },
    },
})

----------------------------------------

TITLE: Inferring Server-Side Types in Better Auth
DESCRIPTION: Example of server-side type inference using $Infer property with database configuration.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import Database from "better-sqlite3"

export const auth = betterAuth({
    database: new Database("database.db")
})

type Session = typeof auth.$Infer.Session

----------------------------------------

TITLE: Customizing OIDC Consent Page in TypeScript
DESCRIPTION: Shows how to customize the consent page for the OIDC provider by specifying a custom path in the plugin configuration.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    plugins: [oidcProvider({
        consentPage: "/path/to/consent/page"
    })]
})

----------------------------------------

TITLE: Mounting Better Auth Handler in Expo API Route
DESCRIPTION: This snippet shows how to create an API route in Expo and mount the Better Auth handler for both GET and POST requests.

LANGUAGE: typescript
CODE:
import { auth } from "@/lib/auth"; // import Better Auth handler

const handler = auth.handler;
export { handler as GET, handler as POST }; // export handler for both GET and POST requests

----------------------------------------

TITLE: Creating Better Auth Client for React in Next.js
DESCRIPTION: Initializes a Better Auth client for use with React in a Next.js application. This client can be used for various authentication actions.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/react" // make sure to import from better-auth/react

export const authClient =  createAuthClient({
    //you can pass client configuration here
})

----------------------------------------

TITLE: Configuring Reddit Provider with Custom Scopes
DESCRIPTION: Advanced configuration showing how to set up Reddit provider with custom OAuth scopes and permanent duration. Demonstrates scope customization for additional permissions.

LANGUAGE: typescript
CODE:
export const auth = betterAuth({
    socialProviders: {
        reddit: {
            clientId: process.env.REDDIT_CLIENT_ID as string,
            clientSecret: process.env.REDDIT_CLIENT_SECRET as string,
            duration: "permanent",
            scopes: ["identity", "read", "submit"] // Add required scopes
        },
    },
})

----------------------------------------

TITLE: Database Migration Commands
DESCRIPTION: Commands to migrate or generate the database schema for API key support

LANGUAGE: bash
CODE:
npx @better-auth/cli migrate

LANGUAGE: bash
CODE:
npx @better-auth/cli generate

----------------------------------------

TITLE: Customizing OIDC Login Page in TypeScript
DESCRIPTION: Shows how to specify a custom login page for the OIDC provider by setting the loginPage option in the plugin configuration.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    plugins: [oidcProvider({
        loginPage: "/sign-in"
    })]
})

----------------------------------------

TITLE: Configuring Organization Creation Restrictions
DESCRIPTION: Customize who can create organizations by setting the allowUserToCreateOrganization option.

LANGUAGE: typescript
CODE:
const auth = betterAuth({
    plugins: [
        organization({
            allowUserToCreateOrganization: async (user) => { 
                const subscription = await getSubscription(user.id) 
                return subscription.plan === "pro" 
            } 
        })
    ]
})

----------------------------------------

TITLE: Creating Better Auth Client for Vue in Nuxt
DESCRIPTION: This snippet demonstrates how to create a Better Auth client instance for use with Vue in a Nuxt application. It imports the createAuthClient function from the Vue-specific package.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/vue" // make sure to import from better-auth/vue

export const authClient = createAuthClient({
    //you can pass client configuration here
})

----------------------------------------

TITLE: User Signup with Username Implementation
DESCRIPTION: Example of how to implement user signup with username functionality using the client API.

LANGUAGE: typescript
CODE:
const data = await authClient.signUp.email({
    email: "email@domain.com",
    name: "Test User",
    password: "password1234",
    username: "test"
})

----------------------------------------

TITLE: Configuring Stripe Plugin in Auth Config
DESCRIPTION: Add the Stripe plugin to the Better Auth configuration, including the Stripe client and webhook secret.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { stripe } from "@better-auth/stripe"
import Stripe from "stripe"

const stripeClient = new Stripe(process.env.STRIPE_SECRET_KEY!)

export const auth = betterAuth({
    // ... your existing config
    plugins: [
        stripe({
            stripeClient,
            stripeWebhookSecret: process.env.STRIPE_WEBHOOK_SECRET!,
            createCustomerOnSignUp: true,
        })
    ]
})

----------------------------------------

TITLE: Installing OAuth Proxy Plugin in TypeScript
DESCRIPTION: This snippet demonstrates how to add the OAuth Proxy plugin to the Better Auth configuration. It imports the necessary modules and includes the plugin in the auth setup.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { oAuthProxy } from "better-auth/plugins"

export const auth = betterAuth({
    plugins: [ // [!code highlight]
        oAuthProxy(), // [!code highlight]
    ] // [!code highlight]
})

----------------------------------------

TITLE: Creating Better Auth Client for Various Frontend Frameworks
DESCRIPTION: These snippets show how to create a Better Auth client for different frontend frameworks supported by Astro, including vanilla JavaScript, React, Vue, Svelte, and Solid. The client is created using the appropriate import from the Better Auth library.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
export const authClient =  createAuthClient()

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/react"
export const authClient =  createAuthClient()

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/vue"
export const authClient =  createAuthClient()

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/svelte"
export const authClient =  createAuthClient()

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/solid"
export const authClient =  createAuthClient()

----------------------------------------

TITLE: Creating API Route Handler for Better Auth in Nuxt
DESCRIPTION: This snippet shows how to create an API route handler for Better Auth in a Nuxt application. It defines an event handler that uses the auth configuration to handle incoming requests.

LANGUAGE: typescript
CODE:
import { auth } from "~/utils/auth"; // import your auth config

export default defineEventHandler((event) => {
	return auth.handler(toWebRequest(event));
});

----------------------------------------

TITLE: Adding OIDC Client Plugin in TypeScript
DESCRIPTION: Illustrates how to add the OIDC client plugin to the auth client configuration in TypeScript. This is necessary for client-side OIDC functionality.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client";
import { oidcClient } from "better-auth/client/plugins"
const authClient = createAuthClient({
    plugins: [oidcClient({
        // Your OIDC configuration
    })]
})

----------------------------------------

TITLE: Installing Better Auth Open API Plugin - TypeScript Configuration
DESCRIPTION: Configuration code to add the Open API plugin to Better Auth setup. This enables the API reference documentation feature.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { openAPI } from "better-auth/plugins"

export const auth = betterAuth({
    plugins: [ 
        openAPI(), 
    ] 
})

----------------------------------------

TITLE: Configuring OAuth Provider with Redirect URL in TypeScript
DESCRIPTION: This code snippet shows how to configure a social provider (GitHub in this case) with the OAuth Proxy plugin. It includes setting the client ID, client secret, and the production redirect URI.

LANGUAGE: typescript
CODE:
export const auth = betterAuth({
   plugins: [
       oAuthProxy(),
   ], 
   socialProviders: {
        github: {
            clientId: "your-client-id",
            clientSecret: "your-client-secret",
            redirectURI: "https://my-main-app.com/api/auth/callback/github". // [!code highlight]
        }
   }
})

----------------------------------------

TITLE: Retrieving TOTP URI for QR Code Generation
DESCRIPTION: This snippet demonstrates how to get the TOTP URI to display to the user, which can be used to generate a QR code for scanning with an authenticator app.

LANGUAGE: typescript
CODE:
const { data, error } = await authClient.twoFactor.getTotpUri({
    password: "password" // user password required
})

----------------------------------------

TITLE: Protected Route Implementation
DESCRIPTION: Example of implementing a protected route using the authentication middleware

LANGUAGE: typescript
CODE:
export default defineEventHandler({
  // The user has to be logged in to access this route
  onRequest: [requireAuth],
  handler: async (event) => {
    setResponseStatus(event, 201, "Secret data");
    return { message: "Secret data" };
  },
});

----------------------------------------

TITLE: Initializing Better Auth with Drizzle Adapter
DESCRIPTION: Configuration setup for connecting Better Auth to a database using the Drizzle adapter. Demonstrates basic initialization with database provider selection.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { drizzleAdapter } from "better-auth/adapters/drizzle";
import { db } from "./database.ts";

export const auth = betterAuth({
  database: drizzleAdapter(db, {
    provider: "sqlite", // or "pg" or "mysql"
  }),
  //... the rest of your config
});

----------------------------------------

TITLE: Conditional UI Preload Implementation
DESCRIPTION: React implementation for preloading passkeys and enabling conditional UI support.

LANGUAGE: typescript
CODE:
useEffect(() => {
   if (!PublicKeyCredential.isConditionalMediationAvailable ||
       !PublicKeyCredential.isConditionalMediationAvailable()) {
     return;
   }

  void authClient.signIn.passkey({ autoFill: true })
}, [])

----------------------------------------

TITLE: Sending OTP Verification
DESCRIPTION: Example of sending a verification OTP to a user's email address for various purposes like sign-in, email verification, or password reset.

LANGUAGE: typescript
CODE:
const { data, error } = await authClient.emailOtp.sendVerificationOtp({
    email: "user-email@email.com",
    type: "sign-in" // or "email-verification", "forget-password"
})

----------------------------------------

TITLE: Verifying OTP for Two-Factor Authentication
DESCRIPTION: This snippet illustrates how to verify an OTP code entered by the user during the two-factor authentication process.

LANGUAGE: typescript
CODE:
const verifyOtp = async (code: string) => {
    await authClient.twoFactor.verifyOtp({ code }, {
        onSuccess(){
            //redirect the user on success
        },
        onError(ctx){
            alert(ctx.error.message)
        }
    })
}

----------------------------------------

TITLE: Prisma Schema Configuration
DESCRIPTION: Basic Prisma schema configuration with SQLite database and test model

LANGUAGE: prisma
CODE:
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Will be deleted. Just need it to generate the prisma client
model Test {
  id   Int    @id @default(autoincrement())
  name String
}

----------------------------------------

TITLE: Configuring Twitter Provider in BetterAuth
DESCRIPTION: Demonstrates how to configure the Twitter social provider in betterauth by setting up the clientId and clientSecret from environment variables.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth" 

export const auth = betterAuth({
    socialProviders: {
        twitter: {
            clientId: process.env.TWITTER_CLIENT_ID,
            clientSecret: process.env.TWITTER_CLIENT_SECRET,
        },
    },
})

----------------------------------------

TITLE: Adding Generic OAuth Client Plugin to Authentication Client
DESCRIPTION: Include the Generic OAuth client plugin in the authentication client instance. This is necessary for client-side OAuth operations.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
import { genericOAuthClient } from "better-auth/client/plugins"

const authClient = createAuthClient({
    plugins: [
        genericOAuthClient()
    ]
})

----------------------------------------

TITLE: Custom OTP Handling Implementation
DESCRIPTION: Example of implementing custom OTP handling logic for different verification types.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    plugins: [
        emailOTP({
            async sendVerificationOTP({
                email,
                otp,
                type
            }) {
                if (type === "sign-in") {
                    // Send the OTP for sign-in
                } else if (type === "email-verification") {
                    // Send the OTP for email verification
                } else {
                    // Send the OTP for password reset
                }
            },
        })
    ]
})

----------------------------------------

TITLE: Generating Backup Codes for Two-Factor Authentication
DESCRIPTION: This code demonstrates how to generate backup codes for account recovery in case the user loses access to their primary 2FA method.

LANGUAGE: typescript
CODE:
const { data, error } = await authClient.twoFactor.generateBackupCodes({
    password: "password" // user password required
})
if (data) {
    // Show the backup codes to the user
}

----------------------------------------

TITLE: Creating New Nitro Application with CLI
DESCRIPTION: Command to scaffold a new Nitro application using the giget package manager

LANGUAGE: bash
CODE:
npx giget@latest nitro nitro-app --install

----------------------------------------

TITLE: Listing User's Organizations
DESCRIPTION: Use the useListOrganizations hook to reactively get the organizations a user is a member of.

LANGUAGE: tsx
CODE:
import { client } from "@/auth/client"

function App(){
    const { data: organizations } = client.useListOrganizations()
    return (
        <div>
            {organizations.map(org => <p>{org.name}</p>)}
        </div>
    )
}

----------------------------------------

TITLE: Adding SSO Client Plugin
DESCRIPTION: Integrate the SSO client plugin into the auth client configuration.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
import { ssoClient } from "better-auth/client/plugins"

const authClient = createAuthClient({
    plugins: [ // [!code highlight]
        ssoClient() // [!code highlight]
    ] // [!code highlight]
})

----------------------------------------

TITLE: Displaying One Tap Popup in TypeScript
DESCRIPTION: This snippet shows how to trigger the One Tap popup using the authClient. It's a simple one-line call to the oneTap method.

LANGUAGE: typescript
CODE:
await authClient.oneTap();

----------------------------------------

TITLE: Customizing OIDC Metadata in TypeScript
DESCRIPTION: Demonstrates how to customize the OIDC metadata by providing a configuration object during initialization of the OIDC provider plugin.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { oidcProvider } from "better-auth/plugins";

export const auth = betterAuth({
    plugins: [oidcProvider({
        metadata: {
            issuer: "https://your-domain.com",
            authorization_endpoint: "/custom/oauth2/authorize",
            token_endpoint: "/custom/oauth2/token",
            // ...other custom metadata
        }
    })]
})

----------------------------------------

TITLE: Schema Migration Command for MySQL
DESCRIPTION: CLI command to perform database migrations for MySQL using Better Auth CLI.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest migrate

----------------------------------------

TITLE: Configuring Auth Client with Bearer Token in TypeScript
DESCRIPTION: Configure the auth client to include the Bearer token from localStorage in all requests.

LANGUAGE: typescript
CODE:
export const authClient = createAuthClient({
    fetchOptions: {
        auth: {
           type:"Bearer",
           token: () => localStorage.getItem("bearer_token") || "" // get the token from localStorage
        }
    }
});

----------------------------------------

TITLE: Implementing Two-Factor Authentication Plugin
DESCRIPTION: Configuration and setup for adding two-factor authentication functionality using Better Auth's plugin system. Includes both server and client setup.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { twoFactor } from "better-auth/plugins"

export const auth = betterAuth({
    plugins: [
        twoFactor()
    ]
})

----------------------------------------

TITLE: Disabling Session Creation on Phone Verification
DESCRIPTION: This code shows how to disable automatic session creation after phone number verification.

LANGUAGE: typescript
CODE:
const isVerified = await authClient.phoneNumber.verify({
    phoneNumber: "+1234567890",
    code: "123456",
    disableSession: true
})

----------------------------------------

TITLE: Creating Custom Endpoints in Plugin
DESCRIPTION: Example of adding custom endpoints to a Better Auth plugin using createAuthEndpoint.

LANGUAGE: typescript
CODE:
import { createAuthEndpoint } from "better-auth/api";

const myPlugin = ()=> {
    return {
        id: "my-plugin",
        endpoints: {
            getHelloWorld: createAuthEndpoint("/my-plugin/hello-world", {
                method: "GET",
            }, async(ctx) => {
                return ctx.json({
                    message: "Hello World"
                })
            })
        }
    } satisfies BetterAuthPlugin
}

----------------------------------------

TITLE: Schema Generation Command for MySQL
DESCRIPTION: CLI command to generate database schema for MySQL based on Better Auth configuration and plugins.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest generate

----------------------------------------

TITLE: Configuring GitLab Provider in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the GitLab provider using the betterAuth function. It sets up the necessary client ID, client secret, and issuer from environment variables.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        gitlab: {
            clientId: process.env.GITLAB_CLIENT_ID as string,
            clientSecret: process.env.GITLAB_CLIENT_SECRET as string,
            issuer: process.env.GITLAB_ISSUER as string,
        },
    },
})

----------------------------------------

TITLE: Per-Request Bearer Token in TypeScript
DESCRIPTION: Provide the Bearer token for individual requests by including it in the fetch options.

LANGUAGE: typescript
CODE:
const { data } = await authClient.listSessions({
    fetchOptions: {
        headers: {
            Authorization: `Bearer ${token}`
        }
    }
});

----------------------------------------

TITLE: Passkey Registration Implementation
DESCRIPTION: Code examples for implementing passkey registration functionality with both default and cross-platform authentication options.

LANGUAGE: typescript
CODE:
const { data, error } = await authClient.passkey.addPasskey();

// Cross-platform specific registration
const { data, error } = await authClient.passkey.addPasskey({
  authenticatorAttachment: 'cross-platform'
});

----------------------------------------

TITLE: Installing Polar SDK
DESCRIPTION: Command to install the Polar SDK on the server using a package manager.

LANGUAGE: bash
CODE:
@polar-sh/sdk

----------------------------------------

TITLE: Migrating Drizzle Schema
DESCRIPTION: Command for migrating database schema using Drizzle's migration tool.

LANGUAGE: bash
CODE:
drizzle-kit migrate

----------------------------------------

TITLE: Implementing Secondary Storage Interface in TypeScript
DESCRIPTION: This code snippet defines the SecondaryStorage interface for implementing key-value stores in Better Auth. It includes methods for getting, setting, and deleting values with optional TTL.

LANGUAGE: typescript
CODE:
interface SecondaryStorage {
  get: (key: string) => Promise<string | null>;
  set: (key: string, value: string, ttl?: number) => Promise<void>;
  delete: (key: string) => Promise<void>;
}

----------------------------------------

TITLE: Disabling Cookie Cache for Session Retrieval in Better Auth Client
DESCRIPTION: This code shows how to disable the cookie cache when fetching a session using the getSession function in the Better Auth client.

LANGUAGE: typescript
CODE:
const session = await authClient.getSession({ query: {
    disableCookieCache: true
}})

----------------------------------------

TITLE: Configuring Extended Facebook Permissions
DESCRIPTION: Shows how to configure additional Facebook permissions and fields in the auth configuration. Demonstrates setting custom scopes and fields for accessing additional Facebook user information.

LANGUAGE: typescript
CODE:
export const auth = betterAuth({
    socialProviders: {
        facebook: {
            clientId: process.env.FACEBOOK_CLIENT_ID as string,
            clientSecret: process.env.FACEBOOK_CLIENT_ID as string,
            scopes: ["email", "public_profile", "user_friends"],
            fields: ["user_friends"],
        },
    },
})

----------------------------------------

TITLE: Generating SQLite Schema for Better Auth using CLI
DESCRIPTION: This command uses the Better Auth CLI to generate the database schema for SQLite based on the Better Auth configuration and plugins.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest generate

----------------------------------------

TITLE: Mounting OIDC Provider Plugin in TypeScript
DESCRIPTION: Demonstrates how to add the OIDC provider plugin to the auth configuration in TypeScript. It includes setting up the plugin with options like the login page path.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { oidcProvider } from "better-auth/plugins";

const auth = betterAuth({
    plugins: [oidcProvider({
        loginPage: "/sign-in", // path to the login page
        // ...other options
    })]
})

----------------------------------------

TITLE: Secondary Storage Configuration
DESCRIPTION: Sets up secondary storage using Redis for session and rate limit data storage.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { redisStorage } from "better-auth/storage";

export const auth = betterAuth({
	secondaryStorage: redisStorage({
		url: "redis://localhost:6379"
	}),
})

----------------------------------------

TITLE: Signing In Anonymously in TypeScript
DESCRIPTION: This snippet shows how to sign in a user anonymously using the signIn.anonymous() method of the auth client.

LANGUAGE: typescript
CODE:
const user = await authClient.signIn.anonymous()

----------------------------------------

TITLE: Database Migration Commands
DESCRIPTION: CLI commands for migrating or generating the database schema for username support.

LANGUAGE: bash
CODE:
npx @better-auth/cli migrate

LANGUAGE: bash
CODE:
npx @better-auth/cli generate

----------------------------------------

TITLE: Implementing Better Auth Middleware in Astro
DESCRIPTION: This snippet demonstrates how to create a middleware function in Astro to check for user authentication using Better Auth. It sets the user and session data in Astro locals for use in components.

LANGUAGE: typescript
CODE:
import { auth } from "@/auth";
import { defineMiddleware } from "astro:middleware";

export const onRequest = defineMiddleware(async (context, next) => {
    const isAuthed = await auth.api
        .getSession({
            headers: context.request.headers,
        })

    if (isAuthed) {
        context.locals.user = isAuthed.user;
        context.locals.session = isAuthed.session;
    } else {
        context.locals.user = null;
        context.locals.session = null;
    }

    return next();
});

----------------------------------------

TITLE: Customizing One Tap Redirect Behavior in TypeScript
DESCRIPTION: This code demonstrates how to customize the redirect behavior after a successful One Tap login. It shows how to avoid a hard redirect by using a callback function, and how to specify a custom callback URL for redirecting to a specific page.

LANGUAGE: typescript
CODE:
authClient.oneTap({
  fetchOptions: {
    onSuccess: () => {
      // For example, use a router to navigate without a full reload:
      router.push("/dashboard");
    }
  }
});

LANGUAGE: typescript
CODE:
authClient.oneTap({
  callbackURL: "/dashboard"
});

----------------------------------------

TITLE: Configuring Email Domain for Anonymous Users in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the email domain name used for generating email addresses for anonymous users. It sets the emailDomainName option in the anonymous plugin configuration.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    plugins: [
        anonymous({
            emailDomainName: "example.com"
        })
    ]
})

----------------------------------------

TITLE: Migrating Database for SSO
DESCRIPTION: Run migration or generate schema to add necessary fields and tables for SSO functionality.

LANGUAGE: bash
CODE:
npx @better-auth/cli migrate

LANGUAGE: bash
CODE:
npx @better-auth/cli generate

----------------------------------------

TITLE: Client-Side Passkey Plugin Setup
DESCRIPTION: Configuration for setting up the passkey client plugin in the auth client instance.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
import { passkeyClient } from "better-auth/client/plugins"

const authClient =  createAuthClient({
    plugins: [
        passkeyClient()
    ]
})

----------------------------------------

TITLE: Customizing Stripe Checkout Session
DESCRIPTION: Customize the Stripe Checkout session with additional parameters.

LANGUAGE: typescript
CODE:
getCheckoutSessionParams: async ({ user, session, plan, subscription }, request) => {
    return {
        params: {
            allow_promotion_codes: true,
            tax_id_collection: {
                enabled: true
            },
            billing_address_collection: "required",
            custom_text: {
                submit: {
                    message: "We'll start your subscription right away"
                }
            },
            metadata: {
                planType: "business",
                referralCode: user.metadata?.referralCode
            }
        },
        options: {
            idempotencyKey: `sub_${user.id}_${plan.name}_${Date.now()}`
        }
    };
}

----------------------------------------

TITLE: Implementing Facebook Sign-In Client
DESCRIPTION: Demonstrates how to implement the Facebook sign-in functionality using the betterauth client. Creates an auth client instance and provides a sign-in function for Facebook authentication.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/auth-client"
const authClient = createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "facebook"
    })
}

----------------------------------------

TITLE: Implementing Facebook Sign-In Client
DESCRIPTION: Demonstrates how to implement the Facebook sign-in functionality using the betterauth client. Creates an auth client instance and provides a sign-in function for Facebook authentication.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/auth-client"
const authClient = createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "facebook"
    })
}

----------------------------------------

TITLE: Signing In with SSO (Domain)
DESCRIPTION: Authenticate using SSO by specifying the domain directly.

LANGUAGE: typescript
CODE:
const res = await authClient.signIn.sso({
    domain: "example.com",
    callbackURL: "/dashboard",
});

----------------------------------------

TITLE: Configuring Client-Side Magic Link Plugin in TypeScript
DESCRIPTION: Initializes the magic link plugin on the client side using the BetterAuth client library.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client";
import { magicLinkClient } from "better-auth/client/plugins";
const authClient =  createAuthClient({
    plugins: [
        magicLinkClient()
    ]
});

----------------------------------------

TITLE: Configuring Next.js Cookie Plugin for Better Auth
DESCRIPTION: Sets up the 'nextCookies' plugin for Better Auth to automatically handle cookie setting in Next.js server actions.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { nextCookies } from "better-auth/next-js";

export const auth = betterAuth({
    //...your config
    plugins: [nextCookies()] // make sure this is the last plugin in the array
})

----------------------------------------

TITLE: Implementing Auth Macro for Session Management
DESCRIPTION: Advanced setup using Elysia macro pattern to handle authentication. Creates a middleware that provides session and user information to routes using the auth macro.

LANGUAGE: typescript
CODE:
import { Elysia } from "elysia";
import { auth } from "./auth";

const betterAuth = new Elysia({ name: "better-auth" })
  .mount(auth.handler)
  .macro({
    auth: {
      async resolve({ error, request: { headers } }) {
        const session = await auth.api.getSession({
          headers,
        });

        if (!session) return error(401);

        return {
          user: session.user,
          session: session.session,
        };
      },
    },
  });

const app = new Elysia()
  .use(betterAuth)
  .get("/user", ({ user }) => user, {
    auth: true,
  })
  .listen(3000);

console.log(
  `🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`,
);

----------------------------------------

TITLE: Implementing Spotify Sign-In in TypeScript
DESCRIPTION: This snippet shows how to implement Spotify sign-in functionality using the betterauth client. It creates an auth client instance and defines a signIn function that uses the 'spotify' provider.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "spotify"
    })
}

----------------------------------------

TITLE: Customizing Stripe Customer Creation
DESCRIPTION: Configure custom logic for Stripe customer creation and handling.

LANGUAGE: typescript
CODE:
stripe({
    // ... other options
    createCustomerOnSignUp: true,
    onCustomerCreate: async ({ customer, stripeCustomer, user }, request) => {
        // Do something with the newly created customer
        console.log(`Customer ${customer.id} created for user ${user.id}`);
    },
    getCustomerCreateParams: async ({ user, session }, request) => {
        // Customize the Stripe customer creation parameters
        return {
            metadata: {
                referralSource: user.metadata?.referralSource
            }
        };
    }
})

----------------------------------------

TITLE: Configuring OTP Options
DESCRIPTION: Example of configuring OTP settings like length and expiration time.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    plugins: [
        emailOTP({
            otpLength: 8,
            expiresIn: 600
        })
    ]
})

----------------------------------------

TITLE: Configuring OTP Sending Function
DESCRIPTION: This snippet demonstrates how to configure the sendOTP function in the Better Auth instance, which is responsible for sending the OTP to the user's email or phone.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { twoFactor } from "better-auth/plugins"

export const auth = betterAuth({
    plugins: [
        twoFactor({
          	otpOptions: {
				async sendOTP({ user, otp }, request) {
                    // send otp to user
				},
			},
        })
    ]
})

----------------------------------------

TITLE: Implementing Client Plugin with Server Integration
DESCRIPTION: Example of creating a client plugin with server endpoint inference and custom actions.

LANGUAGE: typescript
CODE:
import type { BetterAuthClientPlugin } from "better-auth/client";
import type { myPlugin } from "./plugin";
import type { BetterFetchOption } from "@better-fetch/fetch";

const myPluginClient = {
    id: "my-plugin",
    $InferServerPlugin: {} as ReturnType<typeof myPlugin>,
    getActions: ($fetch)=>{
        return {
            myCustomAction: async (data: {
                foo: string,
            }, fetchOptions?: BetterFetchOption)=>{
                const res = $fetch("/custom/action", {
                    method: "POST",
                    body: {
                        foo: data.foo
                    },
                    ...fetchOptions
                })
                return res
            }
        }
    }
} satisfies BetterAuthClientPlugin

----------------------------------------

TITLE: Configuring Spotify Provider in TypeScript
DESCRIPTION: This snippet demonstrates how to configure the Spotify provider for authentication using betterauth. It imports the necessary module and sets up the auth instance with Spotify credentials.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
   
    socialProviders: {
        spotify: { // [!code highlight]
            clientId: process.env.SPOTIFY_CLIENT_ID as string, // [!code highlight]
            clientSecret: process.env.SPOTIFY_CLIENT_SECRET as string, // [!code highlight]
        }, // [!code highlight]
    },
})

----------------------------------------

TITLE: Enabling Automatic Email Verification on Signup
DESCRIPTION: Shows how to configure Better Auth to automatically send verification emails when users sign up.

LANGUAGE: typescript
CODE:
import { betterAuth } from 'better-auth';

export const auth = betterAuth({
    emailVerification: {
        sendOnSignUp: true
    }
})

----------------------------------------

TITLE: Setting Custom Issuer for Two-Factor Authentication
DESCRIPTION: This code demonstrates how to set a custom issuer name for the two-factor authentication application, which will be displayed in authenticator apps.

LANGUAGE: typescript
CODE:
twoFactor({
    issuer: "my-app-name"
})

----------------------------------------

TITLE: Implementing LinkedIn Sign-In in Client
DESCRIPTION: Demonstrates how to implement the LinkedIn sign-in functionality using the BetterAuth client library. Creates an auth client instance and provides a function to trigger social sign-in with LinkedIn as the provider.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "linkedin"
    })
}

----------------------------------------

TITLE: Verification Table Schema Definition in Drizzle ORM
DESCRIPTION: Defines the verification table schema for managing email verification and password reset tokens.

LANGUAGE: typescript
CODE:
export const verification = pgTable("verification", {
	id: text("id").primaryKey(),
	identifier: text('identifier').notNull(),
	value: text('value').notNull(),
	expiresAt: timestamp('expires_at').notNull(),
	createdAt: timestamp('created_at'),
	updatedAt: timestamp('updated_at')
});

----------------------------------------

TITLE: Implementing TikTok Sign-In with BetterAuth Client
DESCRIPTION: Client-side implementation for TikTok social sign-in using BetterAuth client. Uses the signIn.social function with TikTok as the provider.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "tiktok"
    })
}

----------------------------------------

TITLE: Inferring Custom Session Fields on Better Auth Client
DESCRIPTION: This snippet demonstrates how to infer custom session fields on the Better Auth client using the customSessionClient plugin. It allows type-safe access to custom fields added to the session response.

LANGUAGE: typescript
CODE:
import { customSessionClient } from "better-auth/client/plugins";
import type { auth } from "@/lib/auth"; // Import the auth instance as a type

const authClient = createAuthClient({
    plugins: [customSessionClient<typeof auth>()],
});

const { data } = await authClient.useSession();
const { data: sessionData } = await authClient.getSession();
// data.roles
// data.user.newField

----------------------------------------

TITLE: Obtaining Bearer Token in TypeScript
DESCRIPTION: After a successful sign-in, retrieve the session token from response headers and store it securely in localStorage.

LANGUAGE: typescript
CODE:
const { data } = await authClient.signIn.email({
    email: "user@example.com",
    password: "securepassword"
}, {
  onSuccess: (ctx)=>{
    const authToken = ctx.response.headers.get("set-auth-token") // get the token from the response headers
    // Store the token securely (e.g., in localStorage)
    localStorage.setItem("bearer_token", authToken);
  }
});

----------------------------------------

TITLE: Generating Database Schema for Anonymous Plugin in Bash
DESCRIPTION: This snippet shows how to generate the database schema for the Anonymous plugin using the Better Auth CLI. It's an alternative to running the migration.

LANGUAGE: bash
CODE:
npx @better-auth/cli generate

----------------------------------------

TITLE: Per-Request Rate Limit Error Handling
DESCRIPTION: Implementation of request-specific error handling for rate limit responses.

LANGUAGE: typescript
CODE:
import { client } from "./client";

await authClient.signIn.email({
    fetchOptions: {
        onError: async (context) => {
            const { response } = context;
            if (response.status === 429) {
                const retryAfter = response.headers.get("X-Retry-After");
                console.log(`Rate limit exceeded. Retry after ${retryAfter} seconds`);
            }
        },
    }
})

----------------------------------------

TITLE: Configuring Twitch Provider in TypeScript with betterauth
DESCRIPTION: This snippet demonstrates how to configure the Twitch provider for authentication using betterauth. It imports the necessary module and sets up the auth instance with Twitch client credentials.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        twitch: {
            clientId: process.env.TWITCH_CLIENT_ID as string,
            clientSecret: process.env.TWITCH_CLIENT_SECRET as string,
        },
    }
})

----------------------------------------

TITLE: Inferring Plugin-Added Fields in Custom Session in Better Auth
DESCRIPTION: This code shows a workaround to infer fields added by plugins in the custom session callback of Better Auth. It uses a separate options object to enable type inference for plugin-added fields.

LANGUAGE: typescript
CODE:
import { betterAuth, BetterAuthOptions } from "better-auth";

const options = {
  //...config options
  plugins: [
    //...plugins
  ]
} satisfies BetterAuthOptions;

export const auth = betterAuth({
    ...options,
    plugins: [
        ...(options.plugins ?? []),
        customSession(async ({ user, session }) => {
            // now both user and session will infer the fields added by plugins and your custom fields
            return {
                user,
                session
            }
        }, options), // pass options here
    ]
})

----------------------------------------

TITLE: Adding Phone Number Client Plugin to Better Auth
DESCRIPTION: This snippet shows how to add the phone number client plugin to the Better Auth client configuration.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
import { phoneNumberClient } from "better-auth/client/plugins"

const authClient =  createAuthClient({
    plugins: [ 
        phoneNumberClient() 
    ] 
})

----------------------------------------

TITLE: Configuring Email OTP Client Plugin
DESCRIPTION: Client-side setup for the email OTP plugin. Shows how to initialize the auth client with email OTP functionality.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
import { emailOTPClient } from "better-auth/client/plugins"

const authClient =  createAuthClient({
    plugins: [
        emailOTPClient()
    ]
})

----------------------------------------

TITLE: Inferring Additional Fields in Monorepo Setup
DESCRIPTION: Configuration for type inference of additional fields in a monorepo environment.

LANGUAGE: typescript
CODE:
import { inferAdditionalFields } from "better-auth/client/plugins";
import { createAuthClient } from "better-auth/react";
import type { auth } from "./auth";

export const authClient = createAuthClient({
  plugins: [inferAdditionalFields<typeof auth>()],
});

----------------------------------------

TITLE: Implementing Google Sign-In with BetterAuth Client
DESCRIPTION: Basic implementation of Google sign-in using the BetterAuth client library. Uses the social sign-in method with Google as the provider.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "google"
    })
}

----------------------------------------

TITLE: Adding Custom Fields to Better Auth
DESCRIPTION: Implementation of additional user fields with type definitions.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import Database from "better-sqlite3"

export const auth = betterAuth({
    database: new Database("database.db"),
    user: {
       additionalFields: {
          role: {
              type: "string"
            } 
        }
    }
   
})

type Session = typeof auth.$Infer.Session

----------------------------------------

TITLE: Configuring Custom User Info Fetching
DESCRIPTION: Provide a custom getUserInfo function to handle specific provider requirements when fetching user information.

LANGUAGE: typescript
CODE:
genericOAuth({
  config: [
    {
      providerId: "custom-provider",
      // ... other config options
      getUserInfo: async (tokens) => {
        // Custom logic to fetch and return user info
        const userInfo = await fetchUserInfoFromCustomProvider(tokens);
        return {
          id: userInfo.sub,
          email: userInfo.email,
          name: userInfo.name,
          // ... map other fields as needed
        };
      }
    }
  ]
})

----------------------------------------

TITLE: Using Better Auth Client in Nuxt Vue Component
DESCRIPTION: This example shows how to use the Better Auth client in a Nuxt Vue component. It demonstrates signing in with a social provider and displaying session data.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { authClient } from "~/lib/client"
const session = authClient.useSession()
</script>

<template>
    <div>
        <button v-if="!session?.data" @click="() => authClient.signIn.social({
            provider: 'github'
        })">
            Continue with github
        </button>
        <div>
            <pre>{{ session.data }}</pre>
            <button v-if="session.data" @click="authClient.signOut()">
                Sign out
            </button>
        </div>
    </div>
</template>

----------------------------------------

TITLE: Starting Development Servers in Bash
DESCRIPTION: These commands start the development server and the docs server using pnpm.

LANGUAGE: bash
CODE:
pnpm dev

LANGUAGE: bash
CODE:
pnpm -F docs dev

----------------------------------------

TITLE: Resetting Password in Better Auth Client (TypeScript)
DESCRIPTION: This code demonstrates how to reset a user's password using the 'resetPassword' function provided by the Better Auth client. It requires a new password and a token from the URL.

LANGUAGE: typescript
CODE:
const token = new URLSearchParams(window.location.search).get("token");
if (!token) {
  // Handle the error
}
const { data, error } = await authClient.resetPassword({
  newPassword: "password1234",
  token,
});

----------------------------------------

TITLE: Implementing Sign-In Functionality in Expo
DESCRIPTION: This React Native code snippet demonstrates how to implement a sign-in form using Better Auth in an Expo application.

LANGUAGE: typescript
CODE:
import { useState } from "react"; 
import { View, TextInput, Button } from "react-native";
import { authClient } from "./auth-client";

export default function App() {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");

    const handleLogin = async () => {
    await authClient.signIn.email({
            email,
            password,
    })
    };

    return (
        <View>
            <TextInput
                placeholder="Email"
                value={email}
                onChangeText={setEmail}
            />
            <TextInput
                placeholder="Password"
                value={password}
                onChangeText={setPassword}
            />
            <Button title="Login" onPress={handleLogin} />
        </View>
    );
}

----------------------------------------

TITLE: Linking OAuth Account to Existing User
DESCRIPTION: Link an OAuth account to an existing user. This function initiates the OAuth flow for account linking.

LANGUAGE: typescript
CODE:
const response = await authClient.oauth2.link({
  providerId: "provider-id",
  callbackURL: "/dashboard" // the path to redirect to after the account is linked
});

----------------------------------------

TITLE: Creating Migration Script File
DESCRIPTION: Create a new TypeScript file for migration script

LANGUAGE: bash
CODE:
touch migration.ts

----------------------------------------

TITLE: TypeScript Configuration for Better Auth
DESCRIPTION: TypeScript configuration examples showing required compiler options for proper type checking with Better Auth.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "strict": true,
  }
}

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "strictNullChecks": true,
  }
}

----------------------------------------

TITLE: Enabling Email and Password Authentication in Better Auth (TypeScript)
DESCRIPTION: This snippet shows how to enable email and password authentication by setting the 'emailAndPassword.enabled' option to true in the Better Auth configuration.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";

export const auth = betterAuth({
  emailAndPassword: { // [!code highlight]
    enabled: true, // [!code highlight]
  }, // [!code highlight]
});

----------------------------------------

TITLE: Implementing Social Sign-In in Expo
DESCRIPTION: This React Native code shows how to implement social sign-in using Better Auth in an Expo application.

LANGUAGE: typescript
CODE:
import { Button } from "react-native";

export default function App() {
    const handleLogin = async () => {
        await authClient.signIn.social({
            provider: "google",
            callbackURL: "/dashboard" // this will be converted to a deep link (eg. `myapp://dashboard`) on native
        })
    };
    return <Button title="Login with Google" onPress={handleLogin} />;
}

----------------------------------------

TITLE: Defining Plugin Schema in TypeScript
DESCRIPTION: Extends the server plugin by adding a schema definition for the user model to store birthday data.

LANGUAGE: typescript
CODE:
export const birthdayPlugin = () =>
  ({
    id: "birthdayPlugin",
    schema: {
      user: {
        fields: {
          birthday: {
            type: "date",
            required: true,
            unique: false,
            reference: null
          },
        },
      },
    },
  } satisfies BetterAuthPlugin);

----------------------------------------

TITLE: Migrating Database for Stripe Integration
DESCRIPTION: Run migration or generate schema to add necessary tables for Stripe integration.

LANGUAGE: bash
CODE:
npx @better-auth/cli migrate

LANGUAGE: bash
CODE:
npx @better-auth/cli generate

----------------------------------------

TITLE: Database Storage Configuration for Rate Limiting
DESCRIPTION: Configuration for storing rate limit data in a database with optional model name specification.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    //...other options
    rateLimit: {
        storage: "database",
        modelName: "rateLimit", //optional by default "rateLimit" is used
    },
})

LANGUAGE: bash
CODE:
npx @better-auth/cli migrate

----------------------------------------

TITLE: Configuring Slack OAuth in Better Auth
DESCRIPTION: This snippet demonstrates how to configure the Generic OAuth plugin for Slack integration. It includes setting the provider ID, client credentials, authorization and token URLs, and required scopes.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { genericOAuth } from "better-auth/plugins";

export const auth = betterAuth({
  // ... other config options
  plugins: [
    genericOAuth({
      config: [
        {
          providerId: "slack",
          clientId: process.env.SLACK_CLIENT_ID as string,
          clientSecret: process.env.SLACK_CLIENT_SECRET as string,
          authorizationUrl: "https://slack.com/oauth/v2/authorize",
          tokenUrl: "https://slack.com/api/oauth.v2.access",
          scopes: ["users:read", "users:read.email"], // and more...
        },
      ],
    }),
  ],
});

----------------------------------------

TITLE: Making Authenticated Requests with Custom Fetch
DESCRIPTION: This code demonstrates how to retrieve the session cookie from SecureStore and add it to custom fetch request headers for authenticated requests.

LANGUAGE: typescript
CODE:
import { authClient } from "@/lib/auth-client";

const makeAuthenticatedRequest = async () => {
  const cookies = authClient.getCookie();
  const headers = {
    "Cookie": cookies,
  };
  const response = await fetch("http://localhost:8081/api/secure-endpoint", { headers });
  const data = await response.json();
  return data;
};

----------------------------------------

TITLE: Creating Better Auth Client Instance
DESCRIPTION: Setup of the Better Auth client instance with base URL configuration

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/react"

export const authClient = createAuthClient({
    baseURL: "http://localhost:3000" /* base url of your Better Auth backend. */,
    plugins: [],
});

----------------------------------------

TITLE: Global Bearer Token Handling in TypeScript
DESCRIPTION: Set up global handling of the Bearer token in the auth client, storing it in localStorage on successful requests.

LANGUAGE: typescript
CODE:
export const authClient = createAuthClient({
    fetchOptions: {
        onSuccess: (ctx) => {
            const authToken = ctx.response.headers.get("set-auth-token") // get the token from the response headers
            // Store the token securely (e.g., in localStorage)
            if(authToken){
              localStorage.setItem("bearer_token", authToken);
            }
        }
    }
});

----------------------------------------

TITLE: Data Migration Script Implementation
DESCRIPTION: Complete migration script to transfer users and accounts from Supabase to Better Auth

LANGUAGE: typescript
CODE:
import { Pool } from "pg";
import { auth } from "./auth";
import { User as SupabaseUser } from "@supabase/supabase-js";

type User = SupabaseUser & {
	is_super_admin: boolean;
	raw_user_meta_data: {
		avatar_url: string;
	};
	encrypted_password: string;
	email_confirmed_at: string;
	created_at: string;
	updated_at: string;
	is_anonymous: boolean;
	identities: {
		provider: string;
		identity_data: {
			sub: string;
			email: string;
		};
		created_at: string;
		updated_at: string;
	};
};

const migrateFromSupabase = async () => {
	const ctx = await auth.$context;
	const db = ctx.options.database as Pool;
	const users = await db
		.query(`
			SELECT 
				u.*,
				COALESCE(
					json_agg(
						i.* ORDER BY i.id
					) FILTER (WHERE i.id IS NOT NULL),
					'[]'::json
				) as identities
			FROM auth.users u
			LEFT JOIN auth.identities i ON u.id = i.user_id
			GROUP BY u.id
		`)
		.then((res) => res.rows as User[]);
	for (const user of users) {
		if (!user.email) {
			continue;
		}
		await ctx.adapter
			.create({
				model: "user",
				data: {
					id: user.id,
					email: user.email,
					name: user.email,
					role: user.is_super_admin ? "admin" : user.role,
					emailVerified: !!user.email_confirmed_at,
					image: user.raw_user_meta_data.avatar_url,
					createdAt: new Date(user.created_at),
					updatedAt: new Date(user.updated_at),
					isAnonymous: user.is_anonymous,
				},
			})
			.catch(() => {});
		for (const identity of user.identities) {
			const existingAccounts = await ctx.internalAdapter.findAccounts(user.id);

			if (identity.provider === "email") {
				const hasCredential = existingAccounts.find(
					(account) => account.providerId === "credential",
				);
				if (!hasCredential) {
					await ctx.adapter
						.create({
							model: "account",
							data: {
								userId: user.id,
								providerId: "credential",
								accountId: user.id,
								password: user.encrypted_password,
								createdAt: new Date(user.created_at),
								updatedAt: new Date(user.updated_at),
							},
						})
						.catch(() => {});
				}
			}
			const supportedProviders = Object.keys(ctx.options.socialProviders || {})
			if (supportedProviders.includes(identity.provider)) {
				const hasAccount = existingAccounts.find(
					(account) => account.providerId === identity.provider,
				);
				if (!hasAccount) {
					await ctx.adapter.create({
						model: "account",
						data: {
							userId: user.id,
							providerId: identity.provider,
							accountId: identity.identity_data?.sub,
							createdAt: new Date(identity.created_at ?? user.created_at),
							updatedAt: new Date(identity.updated_at ?? user.updated_at),
						},
					});
				}
			}
		}
	}
};
migrateFromSupabase();

----------------------------------------

TITLE: Adding Generic OAuth Client Plugin to Auth Client
DESCRIPTION: This snippet shows how to include the Generic OAuth client plugin in the authentication client instance. This is necessary for client-side implementation of the OAuth flow.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
import { genericOAuthClient } from "better-auth/client/plugins"

const authClient = createAuthClient({
    plugins: [
        genericOAuthClient()
    ]
})

----------------------------------------

TITLE: Accessing Better Auth Session in Nuxt Server API Route
DESCRIPTION: This snippet demonstrates how to access the Better Auth session in a Nuxt server API route. It uses the auth instance to get the session from the request headers.

LANGUAGE: typescript
CODE:
import { auth } from "~/lib/auth";

export default defineEventHandler((event) => {
    const session = await auth.api.getSession({
      headers: event.headers
    });

   if(session) {
     // access the session.session && session.user
   }
});

----------------------------------------

TITLE: Initializing Plasmo Project with TailwindCSS
DESCRIPTION: Commands to create a new Plasmo project with TailwindCSS support and start the development server

LANGUAGE: bash
CODE:
pnpm create plasmo --with-tailwindcss --with-src
pnpm add better-auth
pnpm dev

----------------------------------------

TITLE: Installing PostgreSQL Client Package
DESCRIPTION: Install the pg package to connect to the Postgres database

LANGUAGE: bash
CODE:
npm install pg

----------------------------------------

TITLE: Database URL Environment Configuration
DESCRIPTION: Environment variable configuration for SQLite database connection

LANGUAGE: env
CODE:
DATABASE_URL="file:./dev.db"

----------------------------------------

TITLE: Mapping User Info Fields
DESCRIPTION: Use mapProfileToUser to customize the mapping of user profile fields returned by the OAuth provider.

LANGUAGE: typescript
CODE:
genericOAuth({
  config: [
    {
      providerId: "custom-provider",
      // ... other config options
      mapProfileToUser: async (profile) => {
        return {
          firstName: profile.given_name,
          // ... map other fields as needed
        };
      }
    }
  ]
})

----------------------------------------

TITLE: Connecting Better Auth to SQLite Database in TypeScript
DESCRIPTION: This snippet demonstrates how to connect Better Auth to a SQLite database using the better-sqlite3 package. It initializes a new SQLite database connection and passes it to the betterAuth function.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import Database from "better-sqlite3";

export const auth = betterAuth({
  database: new Database("database.sqlite"),
});

----------------------------------------

TITLE: Configuring One Tap Client Plugin in TypeScript
DESCRIPTION: This code snippet shows how to add and configure the One Tap client plugin. It includes various configuration options such as clientId, autoSelect, cancelOnTapOutside, context, and promptOptions for customizing the behavior of the One Tap functionality.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client";
import { oneTapClient } from "better-auth/client/plugins";

const authClient = createAuthClient({
  plugins: [
    oneTapClient({
      clientId: "YOUR_CLIENT_ID",
      // Optional client configuration:
      autoSelect: false,
      cancelOnTapOutside: true,
      context: "signin",
      additionalOptions: {
        // Any extra options for the Google initialize method
      },
      // Configure prompt behavior and exponential backoff:
      promptOptions: {
        baseDelay: 1000,   // Base delay in ms (default: 1000)
        maxAttempts: 5     // Maximum number of attempts before triggering onPromptNotification (default: 5)
      }
    })
  ]
});

----------------------------------------

TITLE: CORS Configuration Plugin
DESCRIPTION: Nitro plugin setup for CORS configuration using the cors package

LANGUAGE: typescript
CODE:
import cors from "cors";
export default defineNitroPlugin((plugin) => {
  plugin.h3App.use(
    fromNodeMiddleware(
      cors({
        origin: "*",
      }),
    ),
  );
});

----------------------------------------

TITLE: Implementing Next.js Middleware with Full Session Check (Pre-15.2.0)
DESCRIPTION: Sets up Next.js middleware to perform a full session check by making an API request to the '/get-session' endpoint. This approach is for Next.js versions before 15.2.0.

LANGUAGE: typescript
CODE:
import { betterFetch } from "@better-fetch/fetch";
import type { auth } from "@/lib/auth";
import { NextRequest, NextResponse } from "next/server";

type Session = typeof auth.$Infer.Session;

export async function middleware(request: NextRequest) {
	const { data: session } = await betterFetch<Session>("/api/auth/get-session", {
		baseURL: request.nextUrl.origin,
		headers: {
			cookie: request.headers.get("cookie") || "", // Forward the cookies from the request
		},
	});

	if (!session) {
		return NextResponse.redirect(new URL("/sign-in", request.url));
	}

	return NextResponse.next();
}

export const config = {
	matcher: ["/dashboard"], // Apply middleware to specific routes
};

----------------------------------------

TITLE: Configuring Sign-Up with Phone Number
DESCRIPTION: This code demonstrates how to configure the phone number plugin to allow sign-up using phone numbers, including generating temporary email and name for the user.

LANGUAGE: typescript
CODE:
export const auth = betterAuth({
    plugins: [
        phoneNumber({
            sendOTP: ({ phoneNumber, code }, request) => {
                // Implement sending OTP code via SMS
            },
            signUpOnVerification: {
                getTempEmail: (phoneNumber) => {
                    return `${phoneNumber}@my-site.com`
                },
                getTempName: (phoneNumber) => {
                    return phoneNumber
                }
            }
        })
    ]
})

----------------------------------------

TITLE: Installing and Running Nuxt Better Auth Example
DESCRIPTION: Terminal commands for setting up and running the Better Auth Nuxt example project. Requires environment variables to be configured before running.

LANGUAGE: bash
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Implementing Next.js Middleware for Session Check
DESCRIPTION: Sets up Next.js middleware to check for the existence of a session cookie using Better Auth's 'getSessionCookie' helper function.

LANGUAGE: typescript
CODE:
import { NextRequest, NextResponse } from "next/server";
import { getSessionCookie } from "better-auth/cookies";

export async function middleware(request: NextRequest) {
	const sessionCookie = getSessionCookie(request, {
        // Optionally pass config if cookie name, prefix or useSecureCookies option is customized in auth config.
		cookieName: "session_token",
		cookiePrefix: "better-auth",
		useSecureCookies: true,
    });

	if (!sessionCookie) {
		return NextResponse.redirect(new URL("/", request.url));
	}

	return NextResponse.next();
}

export const config = {
	matcher: ["/dashboard"], // Specify the routes the middleware applies to
};

----------------------------------------

TITLE: Creating Auth Client with Plugins in TypeScript
DESCRIPTION: Client-side plugin initialization using createAuthClient function from Better Auth.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client";

const authClient =  createAuthClient({
    plugins: [
        // Add your client plugins here
    ]
});

----------------------------------------

TITLE: Retrieving User Session in Express.js with Better Auth
DESCRIPTION: This snippet demonstrates how to retrieve a user's session using Better Auth in an Express.js route. It utilizes the 'getSession' method from the auth object and the 'fromNodeHeaders' helper function to convert Node.js request headers to the format expected by Better Auth.

LANGUAGE: typescript
CODE:
import { fromNodeHeaders } from "better-auth/node";
import { auth } from "./auth"; //your better auth instance

app.get("/api/me", async (req, res) => {
 	const session = await auth.api.getSession({
      headers: fromNodeHeaders(req.headers),
    });
	return res.json(session);
});

----------------------------------------

TITLE: Initiating Forget Password Flow with Phone Number
DESCRIPTION: These snippets demonstrate the forget password flow using a phone number, including sending an OTP and resetting the password.

LANGUAGE: typescript
CODE:
await authClient.phoneNumber.forgetPassword({
    phoneNumber: "+1234567890"
})

LANGUAGE: typescript
CODE:
const isVerified = await authClient.phoneNumber.resetPassword({
    otp: "123456", // OTP code sent to the user's phone number
    phoneNumber: "+1234567890",
    newPassword: "newPassword"
})  

----------------------------------------

TITLE: Server-side Session Management in Next.js
DESCRIPTION: Shows how to properly retrieve session data in server environments using both auth.api.getSession and authClient.getSession with request headers.

LANGUAGE: typescript
CODE:
import { auth } from "./auth";
import { headers } from "next/headers";

const session = await auth.api.getSession({
    headers: await headers()
})

LANGUAGE: typescript
CODE:
import { authClient } from "./auth-client";
import { headers } from "next/headers";

const session = await authClient.getSession({
    fetchOptions:{
      headers: await headers()
    }
})

----------------------------------------

TITLE: Configuring TikTok Provider in BetterAuth
DESCRIPTION: Configuration setup for TikTok OAuth provider in BetterAuth. Requires environment variables for client ID, secret, and key obtained from TikTok Developer Portal.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    socialProviders: {
        tiktok: {
            clientId: process.env.TIKTOK_CLIENT_ID,
            clientSecret: process.env.TIKTOK_CLIENT_SECRET,
            clientKey: process.env.TIKTOK_CLIENT_KEY,
        },
    },
})

----------------------------------------

TITLE: Running Database Migration for Better Auth
DESCRIPTION: This command runs the database migration to create necessary tables for Better Auth.

LANGUAGE: bash
CODE:
npx @better-auth/cli migrate

----------------------------------------

TITLE: Configuring CORS for Express.js with Better Auth
DESCRIPTION: This code snippet shows how to configure CORS (Cross-Origin Resource Sharing) in an Express.js server when integrating Better Auth. It uses the 'cors' middleware to set up allowed origins, methods, and credentials.

LANGUAGE: typescript
CODE:
import express from "express";
import cors from "cors"; // Import the CORS middleware
import { toNodeHandler, fromNodeHeaders } from "better-auth/node";
import { auth } from "./auth";

const app = express();
const port = 3005;

// Configure CORS middleware
app.use(
  cors({
    origin: "http://your-frontend-domain.com", // Replace with your frontend's origin
    methods: ["GET", "POST", "PUT", "DELETE"], // Specify allowed HTTP methods
    credentials: true, // Allow credentials (cookies, authorization headers, etc.)
  })
);

----------------------------------------

TITLE: Better Auth Instance Configuration
DESCRIPTION: Setting up Better Auth with Prisma adapter and email/password authentication

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { prismaAdapter } from "better-auth/adapters/prisma";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();
export const auth = betterAuth({
  database: prismaAdapter(prisma, { provider: "sqlite" }),
  emailAndPassword: { enabled: true },
});

----------------------------------------

TITLE: Database Configuration Setup
DESCRIPTION: Configures database settings for Better Auth, supporting PostgreSQL, MySQL, and SQLite with customizable dialect and casing options.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
export const auth = betterAuth({
	database: {
		dialect: "postgres",
		type: "postgres",
		casing: "camel"
	},
})

----------------------------------------

TITLE: Implementing Social Login with Better Auth
DESCRIPTION: Example implementation of social login functionality using Better Auth's signIn method.

LANGUAGE: typescript
CODE:
import { signIn } from "~/lib/auth-client";

export const signInDiscord = async () => {
    const data = await signIn.social({
        provider: "discord"
    });
    return data;
};

----------------------------------------

TITLE: Generating Secret Key
DESCRIPTION: Command to generate a secure secret key for Better Auth encryption and signing.

LANGUAGE: bash
CODE:
openssl rand -base64 32

----------------------------------------

TITLE: Creating API Route Handler for Better Auth in Remix
DESCRIPTION: This code sets up the API route handler for Better Auth in a Remix application. It defines both loader and action functions to handle authentication requests.

LANGUAGE: typescript
CODE:
import { auth } from '~/lib/auth.server' // Adjust the path as necessary
import type { LoaderFunctionArgs, ActionFunctionArgs } from "@remix-run/node"

export async function loader({ request }: LoaderFunctionArgs) {
    return auth.handler(request)
}

export async function action({ request }: ActionFunctionArgs) {
    return auth.handler(request)
}

----------------------------------------

TITLE: Auth Route Handler Configuration
DESCRIPTION: Setting up the catch-all route handler for authentication endpoints

LANGUAGE: typescript
CODE:
export default defineEventHandler((event) => {
  return auth.handler(toWebRequest(event));
});

----------------------------------------

TITLE: Setting Base URL Configuration
DESCRIPTION: Configures the base URL for Better Auth server hosting. Falls back to process.env.BETTER_AUTH_URL if not set.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
export const auth = betterAuth({
	baseURL: "https://example.com",
})

----------------------------------------

TITLE: Implementing Microsoft Sign-In in Client TypeScript
DESCRIPTION: Client-side implementation of Microsoft sign-in functionality using betterauth. Shows how to create an auth client and implement the sign-in function with Microsoft as the provider.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client";

const authClient = createAuthClient();

const signIn = async () => {
  const data = await authClient.signIn.social({
    provider: "microsoft",
    callbackURL: "/dashboard", //the url to redirect to after the sign in
  });
};

----------------------------------------

TITLE: Updating Better Auth Config with Trusted Origins
DESCRIPTION: This code updates the Better Auth configuration to include the app's scheme in the trusted origins list.

LANGUAGE: typescript
CODE:
export const auth = betterAuth({
    trustedOrigins: ["myapp://"]
})

----------------------------------------

TITLE: Creating Better Auth Client in SvelteKit
DESCRIPTION: This snippet demonstrates how to create a Better Auth client instance in SvelteKit. It imports the createAuthClient function and exports an authClient instance.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/svelte" // make sure to import from better-auth/svelte

export const authClient = createAuthClient({
    // you can pass client configuration here
})

----------------------------------------

TITLE: Authentication Middleware Implementation
DESCRIPTION: Implementation of authentication guard middleware for protecting routes

LANGUAGE: typescript
CODE:
import { EventHandler, H3Event } from "h3";
import { fromNodeHeaders } from "better-auth/node";

/**
 * Middleware used to require authentication for a route.
 *
 * Can be extended to check for specific roles or permissions.
 */
export const requireAuth: EventHandler = async (event: H3Event) => {
  const headers = event.headers;

  const session = await auth.api.getSession({
    headers: headers,
  });
  if (!session)
    throw createError({
      statusCode: 401,
      statusMessage: "Unauthorized",
    });
  // You can save the session to the event context for later use
  event.context.auth = session;
};

----------------------------------------

TITLE: Creating a New Branch in Git using Bash
DESCRIPTION: This series of commands ensures you're on the main branch, pulls the latest changes, and creates a new feature branch.

LANGUAGE: bash
CODE:
# Make sure you're on main
git checkout main

# Pull latest changes
git pull upstream main

# Create and switch to a new branch
git checkout -b feature/your-feature-name

----------------------------------------

TITLE: Handling Email Verification Errors During Sign In
DESCRIPTION: Shows how to handle errors when users attempt to sign in without verifying their email address.

LANGUAGE: typescript
CODE:
await authClient.signIn.email({
    email: "email@example.com",
    password: "password"
}, {
    onError: (ctx) => {
        // Handle the error
        if(ctx.error.status === 403) {
            alert("Please verify your email address")
        }
        //you can also show the original error message
        alert(ctx.error.message)
    }
})

----------------------------------------

TITLE: Configuring Captcha Plugin in Better Auth
DESCRIPTION: TypeScript code snippet demonstrating how to set up the Captcha plugin in Better Auth, using Cloudflare Turnstile as the provider.

LANGUAGE: typescript
CODE:
import { captcha } from "better-auth/plugins";

const auth = betterAuth({
  plugins: [
    captcha({
      provider: "cloudflare-turnstile", // or "google-recaptcha"
      secretKey: process.env.TURNSTILE_SECRET_KEY!,
    }),
  ],
});

----------------------------------------

TITLE: Mounting Better Auth Handler in SvelteKit
DESCRIPTION: This snippet shows how to mount the Better Auth handler to the SvelteKit server hook. It imports necessary modules and defines an async handle function.

LANGUAGE: typescript
CODE:
import { auth } from "$lib/auth";
import { svelteKitHandler } from "better-auth/svelte-kit";

export async function handle({ event, resolve }) {
	return svelteKitHandler({ event, resolve, auth });
}

----------------------------------------

TITLE: Implementing GitLab Sign-In in TypeScript
DESCRIPTION: This code snippet shows how to implement the sign-in functionality for GitLab using the better-auth client. It creates an auth client and defines an async function to initiate the social sign-in process with GitLab as the provider.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "gitlab"
    })
}

----------------------------------------

TITLE: Preparing Environment Files in Bash
DESCRIPTION: This command copies the example environment file to create a new .env file for the docs directory.

LANGUAGE: bash
CODE:
cp -n ./docs/.env.example ./docs/.env

----------------------------------------

TITLE: Adding Anonymous Client Plugin to Auth Client in TypeScript
DESCRIPTION: This snippet demonstrates how to include the anonymous client plugin in the authentication client instance. It imports the necessary modules and adds the anonymous client plugin to the plugins array.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
import { anonymousClient } from "better-auth/client/plugins"

const authClient =  createAuthClient({
    plugins: [
        anonymousClient()
    ]
})

----------------------------------------

TITLE: Configuring Teams/Sub-Organizations in Better Auth
DESCRIPTION: TypeScript code snippet demonstrating how to enable teams or sub-organizations feature in Better Auth's organization plugin.

LANGUAGE: typescript
CODE:
const auth = betterAuth({
  plugins: [
    organization({
      teams: {
        enabled: true,
      },
    }),
  ],
});

----------------------------------------

TITLE: Accessing Better Auth Session in Astro Component
DESCRIPTION: This snippet shows how to access the Better Auth session data within an Astro component. It demonstrates checking for an active session and redirecting to a login page if no session is found.

LANGUAGE: astro
CODE:
---
import { UserCard } from "@/components/user-card";

const session = () => {
    if (Astro.locals.session) {
        return Astro.locals.session;
    } else {
        // Redirect to login page if the user is not authenticated
        return Astro.redirect("/login");
    }
}

---

<UserCard initialSession={session} />

----------------------------------------

TITLE: Implementing Twitch Sign-In with betterauth Client in TypeScript
DESCRIPTION: This code snippet shows how to implement the Twitch sign-in functionality using the betterauth client. It creates an auth client instance and defines a sign-in function that uses the 'twitch' provider.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "twitch"
    })
}

----------------------------------------

TITLE: Installing Dependencies with pnpm in Bash
DESCRIPTION: This command installs the project dependencies using the pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Implementing Next.js Middleware with Direct Auth API Access (15.2.0+)
DESCRIPTION: Sets up Next.js middleware to perform a full session check using the auth API directly. This approach is for Next.js versions 15.2.0 and above, utilizing the Node.js runtime in middleware.

LANGUAGE: typescript
CODE:
import { NextRequest, NextResponse } from "next/server";
import { headers } from "next/headers";
import { auth } from "@/lib/auth";

export async function middleware(request: NextRequest) {
    const session = await auth.api.getSession({
        headers: await headers()
    })

    if(!session) {
        return NextResponse.redirect(new URL("/sign-in", request.url));
    }

    return NextResponse.next();
}

export const config = {
  runtime: "nodejs",
  matcher: ["/dashboard"], // Apply middleware to specific routes
};

----------------------------------------

TITLE: Installing Better Auth 1.2
DESCRIPTION: Command to upgrade to Better Auth version 1.2 using npm.

LANGUAGE: bash
CODE:
npm install better-auth@1.2

----------------------------------------

TITLE: Implementing Better Auth Handler in TanStack API Route
DESCRIPTION: Creates API route handlers for both GET and POST requests to handle Better Auth authentication. The code mounts the auth handler at the '/api/auth/$' endpoint, enabling session management across the application.

LANGUAGE: typescript
CODE:
import { auth } from '@/lib/auth'
import { createAPIFileRoute } from '@tanstack/react-start/api'

export const APIRoute = createAPIFileRoute('/api/auth/$')({
  GET: ({ request }) => {
    return auth.handler(request)
  },
  POST: ({ request }) => {
    return auth.handler(request)
  },
})

----------------------------------------

TITLE: Configuring Discord Provider in Better Auth (TypeScript)
DESCRIPTION: This snippet demonstrates how to configure the Discord provider in the Better Auth setup. It imports the necessary module and sets up the auth instance with Discord credentials.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({ 
    socialProviders: {
        discord: { // [!code highlight]
            clientId: process.env.DISCORD_CLIENT_ID as string, // [!code highlight]
            clientSecret: process.env.DISCORD_CLIENT_SECRET as string, // [!code highlight]
        }, // [!code highlight]
    },
})

----------------------------------------

TITLE: Cloning BetterAuth Repository in Bash
DESCRIPTION: This snippet demonstrates how to clone the forked BetterAuth repository and navigate to the project directory.

LANGUAGE: bash
CODE:
# Replace YOUR-USERNAME with your GitHub username
git clone https://github.com/YOUR-USERNAME/better-auth.git
cd better-auth

----------------------------------------

TITLE: Configuring Extension Manifest
DESCRIPTION: Package.json configuration for host permissions to access the backend

LANGUAGE: json
CODE:
{
    "manifest": {
        "host_permissions": [
            "https://URL_TO_YOUR_BACKEND"
        ]
    }
}

----------------------------------------

TITLE: Installation and Development Server Commands
DESCRIPTION: Commands to install project dependencies using pnpm and start the development server.

LANGUAGE: bash
CODE:
pnpm install
pnpm run dev

----------------------------------------

TITLE: Individual Cookie Attributes Configuration
DESCRIPTION: Configuration for setting specific cookie attributes for individual cookie types in Better Auth.

LANGUAGE: typescript
CODE:
export const auth = createAuth({
  advanced: {
    cookies: {
      sessionToken: {
        sameSite: "none",
        secure: true,
        partitioned: true // New browser standards will mandate this for foreign cookies
      }
    }
  }
})

----------------------------------------

TITLE: Implementing Discord Sign-In with Better Auth Client (TypeScript)
DESCRIPTION: This code snippet shows how to implement the sign-in functionality for Discord using the Better Auth client. It creates an auth client instance and defines an async function to initiate the Discord sign-in process.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
const authClient =  createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "discord"
    })
}

----------------------------------------

TITLE: Implementing Email Change Verification
DESCRIPTION: Setup for email change verification process including verification email sending.

LANGUAGE: typescript
CODE:
export const auth = betterAuth({
    user: {
        changeEmail: {
            enabled: true,
            sendChangeEmailVerification: async ({ user, newEmail, url, token }, request) => {
                await sendEmail({
                    to: user.email,
                    subject: 'Approve email change',
                    text: `Click the link to approve the change: ${url}`
                })
            }
        }
    }
})

----------------------------------------

TITLE: Password Reset with OTP
DESCRIPTION: Implementation of password reset functionality using email OTP verification.

LANGUAGE: typescript
CODE:
const { data, error } = await authClient.emailOtp.resetPassword({
    email: "user-email@email.com",
    otp: "123456",
    password: "password"
})

----------------------------------------

TITLE: Configuring Environment Variables for Better Auth and Google OAuth
DESCRIPTION: Required environment variables for setting up Better Auth and Google OAuth authentication. These variables should be placed in a .env file at the project root.

LANGUAGE: txt
CODE:
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
BETTER_AUTH_SECRET=

----------------------------------------

TITLE: Configuring CORS in Hono for Better Auth
DESCRIPTION: CORS configuration setup for Better Auth integration, specifying allowed origins, headers, methods, and other CORS-related settings.

LANGUAGE: typescript
CODE:
import { Hono } from "hono";
import { auth } from "./auth";
import { serve } from "@hono/node-server";
import { cors } from "hono/cors";
 
const app = new Hono();

app.use(
	"/api/auth/*", // or replace with "*" to enable cors for all routes
	cors({
		origin: "http://localhost:3001", // replace with your origin
		allowHeaders: ["Content-Type", "Authorization"],
		allowMethods: ["POST", "GET", "OPTIONS"],
		exposeHeaders: ["Content-Length"],
		maxAge: 600,
		credentials: true,
	}),
);

----------------------------------------

TITLE: Configuring VK Provider in Better Auth (TypeScript)
DESCRIPTION: This snippet demonstrates how to configure the VK ID provider in the Better Auth setup. It imports the necessary module and sets up the VK provider with client ID and secret from environment variables.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";

export const auth = betterAuth({
  socialProviders: {
    vk: { // [!code highlight]
      clientId: process.env.VK_CLIENT_ID as string, // [!code highlight]
      clientSecret: process.env.VK_CLIENT_SECRET as string, // [!code highlight]
    },
  },
});

----------------------------------------

TITLE: Revoking Sessions on Password Change in Better Auth Client
DESCRIPTION: This code shows how to revoke all other sessions when changing the user's password by setting revokeOtherSessions to true in the changePassword function.

LANGUAGE: typescript
CODE:
await authClient.changePassword({
    newPassword: newPassword,
    currentPassword: currentPassword,
    revokeOtherSessions: true,
})

----------------------------------------

TITLE: Configuring TypeScript Strict Null Checks
DESCRIPTION: Alternative configuration for enabling strict null checks when full strict mode cannot be enabled.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "strictNullChecks": true,
  }
}

----------------------------------------

TITLE: Installing Dependencies and Starting Nuxt Development Server
DESCRIPTION: These commands install the project dependencies using pnpm and start the Nuxt development server. This is part of the setup process for running the Better Auth example with Nuxt.

LANGUAGE: bash
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Mounting Better Auth Handler in Hono
DESCRIPTION: Basic setup to mount the Better Auth handler to a Hono endpoint. Configures a basic server with route handling for authentication endpoints.

LANGUAGE: typescript
CODE:
import { Hono } from "hono";
import { auth } from "./auth";
import { serve } from "@hono/node-server";
import { cors } from "hono/cors";

const app = new Hono();

app.on(["POST", "GET"], "/api/auth/*", (c) => {
	return auth.handler(c.req.raw);
});

serve(app);

----------------------------------------

TITLE: Configuring Generic OAuth Plugin in Better Auth
DESCRIPTION: This snippet demonstrates how to add the Generic OAuth plugin to the Better Auth configuration. It includes setting up the plugin with provider-specific details such as client ID, client secret, and discovery URL.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { genericOAuth } from "better-auth/plugins" // [!code highlight]

export const auth = betterAuth({
    // ... other config options
    plugins: [
        genericOAuth({ // [!code highlight]
            config: [ // [!code highlight]
                { // [!code highlight]
                    providerId: "provider-id", // [!code highlight]
                    clientId: "test-client-id", // [!code highlight]
                    clientSecret: "test-client-secret", // [!code highlight]
                    discoveryUrl: "https://auth.example.com/.well-known/openid-configuration", // [!code highlight]
                    // ... other config options // [!code highlight]
                }, // [!code highlight]
                // Add more providers as needed // [!code highlight]
            ] // [!code highlight]
        }) // [!code highlight]
    ]
})

----------------------------------------

TITLE: Revoking All Sessions in Better Auth Client
DESCRIPTION: This snippet demonstrates how to revoke all sessions using the revokeSessions function in the Better Auth client.

LANGUAGE: typescript
CODE:
await authClient.revokeSessions()

----------------------------------------

TITLE: Account Table Schema Definition in Drizzle ORM
DESCRIPTION: Defines the account table schema for managing OAuth accounts and password-based authentication. Includes fields for tokens and their expiration.

LANGUAGE: typescript
CODE:
export const account = pgTable("account", {
	id: text("id").primaryKey(),
	accountId: text('account_id').notNull(),
	providerId: text('provider_id').notNull(),
	userId: text('user_id').notNull().references(()=> user.id, { onDelete: 'cascade' }),
	accessToken: text('access_token'),
	refreshToken: text('refresh_token'),
	idToken: text('id_token'),
	accessTokenExpiresAt: timestamp('access_token_expires_at'),
	refreshTokenExpiresAt: timestamp('refresh_token_expires_at'),
	scope: text('scope'),
	password: text('password'),
	createdAt: timestamp('created_at').notNull(),
	updatedAt: timestamp('updated_at').notNull()
});

----------------------------------------

TITLE: Running TypeScript Project with Bun
DESCRIPTION: Command to execute the TypeScript project using Bun runtime.

LANGUAGE: bash
CODE:
bun run index.ts

----------------------------------------

TITLE: Configuring TRPC Provider with Better Auth
DESCRIPTION: This React code shows how to set up a TRPC provider with Better Auth integration, including adding the session cookie to request headers.

LANGUAGE: typescript
CODE:
//...other imports
import { authClient } from "@/lib/auth-client";

export const api = createTRPCReact<AppRouter>();

export function TRPCProvider(props: { children: React.ReactNode }) {
  const [queryClient] = useState(() => new QueryClient());
  const [trpcClient] = useState(() =>
    api.createClient({
      links: [
        httpBatchLink({
          //...your other options
          headers() {
            const headers = new Map<string, string>();
            const cookies = authClient.getCookie();
            if (cookies) {
              headers.set("Cookie", cookies);
            }
            return Object.fromEntries(headers);
          },
        }),
      ],
    }),
  );

  return (
    <api.Provider client={trpcClient} queryClient={queryClient}>
      <QueryClientProvider client={queryClient}>
        {props.children}
      </QueryClientProvider>
    </api.Provider>
  );
}

----------------------------------------

TITLE: Initiating Slack OAuth Sign-In
DESCRIPTION: This snippet shows how to initiate the OAuth sign-in process for Slack using the configured Generic OAuth plugin. It specifies the provider ID and callback URL for the authentication flow.

LANGUAGE: typescript
CODE:
const response = await authClient.signIn.oauth2({
  providerId: "slack",
  callbackURL: "/dashboard", // the path to redirect to after the user is authenticated
});

----------------------------------------

TITLE: Configuring Session Cookie Caching in Better Auth
DESCRIPTION: This snippet demonstrates how to enable and configure session cookie caching in Better Auth. It sets the cache duration to 5 minutes.

LANGUAGE: typescript
CODE:
const auth = new BetterAuth({
    session: {
        cookieCache: {
            enabled: true,
            maxAge: 5 * 60 // Cache duration in seconds
        }
    }
});

----------------------------------------

TITLE: Connecting Better Auth to Microsoft SQL Server in TypeScript
DESCRIPTION: This snippet demonstrates how to connect Better Auth to a Microsoft SQL Server database using the MssqlDialect. It configures the connection pool and authentication settings.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import * as Tedious from 'tedious'
import * as Tarn from 'tarn'

const dialect = new MssqlDialect({
  tarn: {
    ...Tarn,
    options: {
      min: 0,
      max: 10,
    },
  },
  tedious: {
    ...Tedious,
    connectionFactory: () => new Tedious.Connection({
      authentication: {
        options: {
          password: 'password',
          userName: 'username',
        },
        type: 'default',
      },
      options: {
        database: 'some_db',
        port: 1433,
        trustServerCertificate: true,
      },
      server: 'localhost',
    }),
  },
})

export const auth = betterAuth({
  database: {
    dialect,
    type: "mssql"
  }
});

----------------------------------------

TITLE: Using Session Data in Expo App
DESCRIPTION: This React Native code demonstrates how to access the current user's session data using the useSession hook from Better Auth.

LANGUAGE: typescript
CODE:
import { authClient } from "@/lib/auth-client";

export default function App() {
    const { data: session } = authClient.useSession();

    return <Text>Welcome, {session.user.name}</Text>;
}

----------------------------------------

TITLE: Initiating Instagram OAuth Sign-In
DESCRIPTION: This snippet shows how to initiate the OAuth sign-in process for Instagram using the configured Generic OAuth plugin. It specifies the provider ID and callback URL for the authentication flow.

LANGUAGE: typescript
CODE:
const response = await authClient.signIn.oauth2({
  providerId: "instagram",
  callbackURL: "/dashboard", // the path to redirect to after the user is authenticated
});

----------------------------------------

TITLE: Custom Storage Implementation for Rate Limiting
DESCRIPTION: Implementation of custom storage handlers for rate limit data with get and set functions.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";

export const auth = betterAuth({
    //...other options
    rateLimit: {
        customStorage: {
            get: async (key) => {
                // get rate limit data
            },
            set: async (key, value) => {
                // set rate limit data
            },
        },
    },
})

----------------------------------------

TITLE: Installing SSO Plugin on Server
DESCRIPTION: Add the SSO plugin to the betterauth server configuration.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"
import { sso } from "better-auth/plugins/sso";

const auth = betterAuth({
    plugins: [ // [!code highlight]
        sso() // [!code highlight]
    ] // [!code highlight]
})

----------------------------------------

TITLE: Configuring App Scheme in Expo
DESCRIPTION: This JSON snippet shows how to define a scheme in the Expo app.json configuration file.

LANGUAGE: json
CODE:
{
    "expo": {
        "scheme": "myapp"
    }
}

----------------------------------------

TITLE: Initiating Coinbase OAuth Sign-In
DESCRIPTION: This snippet shows how to initiate the OAuth sign-in process for Coinbase using the configured Generic OAuth plugin. It specifies the provider ID and callback URL for the authentication flow.

LANGUAGE: typescript
CODE:
const response = await authClient.signIn.oauth2({
  providerId: "coinbase",
  callbackURL: "/dashboard", // the path to redirect to after the user is authenticated
});

----------------------------------------

TITLE: Configuring Password Reset Email Functionality
DESCRIPTION: Demonstrates how to implement password reset functionality by configuring the sendResetPassword function.

LANGUAGE: typescript
CODE:
import { betterAuth } from 'better-auth';
import { sendEmail } from './email'; // your email sending function

export const auth = betterAuth({
    emailAndPassword: {
        enabled: true,
        sendResetPassword: async ({ user, url, token }, request) => {
            await sendEmail({
                to: user.email,
                subject: 'Reset your password',
                text: `Click the link to reset your password: ${url}`
            })
        }
    }
})

----------------------------------------

TITLE: Importing Auth Client in React vs Server Environments
DESCRIPTION: Demonstrates the correct import paths for the auth client based on the environment - React frontend vs server-side components.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/react";

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client";

----------------------------------------

TITLE: Adding Expo Plugin to Better Auth Server
DESCRIPTION: This code demonstrates how to add the Expo plugin to a Better Auth server configuration.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { expo } from "@better-auth/expo";

export const auth = betterAuth({
    plugins: [
        expo()
    ]
});

----------------------------------------

TITLE: Prisma Schema Definition for Better Auth Session
DESCRIPTION: Defines Prisma schema with field mappings for Better Auth session model.

LANGUAGE: prisma
CODE:
model Session {
    id          String   @id @default(cuid())
    expires     DateTime @map("expiresAt") // Map `expires` to your existing field
    token       String   @map("sessionToken") // Map `token` to your existing field
    userId      String
    user        User     @relation(fields: [userId], references: [id])
}

----------------------------------------

TITLE: Enforcing Secure Cookies in Better Auth (TypeScript)
DESCRIPTION: This example shows how to force cookies to be always secure in Better Auth by setting the useSecureCookies option to true in the advanced configuration.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth"

export const auth = betterAuth({
    advanced: {
        useSecureCookies: true
    }
})

----------------------------------------

TITLE: Implementing Reddit Sign-In Client
DESCRIPTION: Client-side implementation for Reddit authentication using BetterAuth client. Demonstrates how to trigger social sign-in with Reddit provider.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/client"
const authClient = createAuthClient()

const signIn = async () => {
    const data = await authClient.signIn.social({
        provider: "reddit"
    })
}

----------------------------------------

TITLE: Configuring TypeScript Strict Mode
DESCRIPTION: Configuration for enabling TypeScript's strict mode in Better Auth projects.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "strict": true
  }
}

----------------------------------------

TITLE: Using Better Auth Session Hook in React Components
DESCRIPTION: Example of using Better Auth's useSession hook in a React component to access session data.

LANGUAGE: typescript
CODE:
import { useSession } from "~/lib/auth-client";

export const Profile = () => {
    const { data } = useSession();
    return (
        <div>
            <pre>
                {JSON.stringify(data, null, 2)}
            </pre>
        </div>
    );
};

----------------------------------------

TITLE: Getting Response Object from Better Auth API Call in TypeScript
DESCRIPTION: This code demonstrates how to obtain the full Response object from a Better Auth API call. It uses the asResponse option when calling the signInEmail endpoint to receive the entire Response object instead of just the data.

LANGUAGE: typescript
CODE:
const response = await auth.api.signInEmail({
    body: {
        email: "",
        password: ""
    },
    asResponse: true
})

----------------------------------------

TITLE: Generating Prisma Schema with Better Auth CLI
DESCRIPTION: Command to generate Prisma schema using the Better Auth CLI tool. This generates the necessary database schema based on Better Auth configuration and enabled plugins.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest generate

----------------------------------------

TITLE: Implementing Caching in NextJS with use cache Directive
DESCRIPTION: This code snippet shows how to use the 'use cache' directive in NextJS v15+ to cache the response of a server function. This technique can improve performance by reducing redundant API calls.

LANGUAGE: typescript
CODE:
export async function getUsers() {
    'use cache' // [!code highlight]
    const { users } = await auth.api.listUsers();
    return users
}

----------------------------------------

TITLE: Calling Various Better Auth API Endpoints with Different Parameters
DESCRIPTION: This snippet shows how to call different Better Auth API endpoints with various parameters including body, headers, and query. It demonstrates the proper structure for passing these parameters in server-side calls.

LANGUAGE: typescript
CODE:
await auth.api.getSession({
    headers: headers()
})

await auth.api.signInEmail({
    body: {
        email: "john@doe.com",
        password: "password"
    },
    headers: headers() // optional but would be useful to get the user IP, user agent, etc.
})

await auth.api.verifyEmail({
    query: {
        token: "my_token"
    }
})

----------------------------------------

TITLE: Setting up development environment for Better Auth
DESCRIPTION: This snippet outlines the steps to set up the development environment for Better Auth. It includes forking the repo, cloning, installing dependencies, and running the project.

LANGUAGE: markdown
CODE:
1. Fork the repo
2. clone your fork.
3. install node.js (preferable latest LTS).
4. run `cp -n ./docs/.env.example ./docs/.env` to create a `.env` file (if it doesn't exist)
5. run `pnpm i` in your terminal to install dependencies.
6. create a branch.
7. build the project using `pnpm build`
8. run `pnpm -F docs dev` (to run the docs section)
9. create a draft pull request. link the relevant issue by referring to it in the PR's description. Eg.closes #123 will link the PR to issue/pull request #123.
10. implement your changes.

----------------------------------------

TITLE: Configuring Drizzle Adapter with Custom Schema
DESCRIPTION: Advanced configuration of the Drizzle adapter with custom schema mapping and plural form option for table names.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { db } from "./drizzle";
import { drizzleAdapter } from "better-auth/adapters/drizzle";
import { schema } from "./schema";

export const auth = betterAuth({
  database: drizzleAdapter(db, {
    provider: "sqlite", // or "pg" or "mysql"
    schema: {
      ...schema,
      user: schema.users,
    },
    //if all of them are just using plural form, you can just pass the option below
    usePlural: true,
  }),
});

----------------------------------------

TITLE: Caching Data with Solid Start Query Function
DESCRIPTION: This snippet shows how to use the query function in Solid Start to cache data. The query function is used to fetch and cache the list of users from the auth API.

LANGUAGE: typescript
CODE:
const getUsers = query(
    async () => (await auth.api.listUsers()).users,
    "getUsers"
);

----------------------------------------

TITLE: Configuring Instagram OAuth in Better Auth
DESCRIPTION: This snippet demonstrates how to configure the Generic OAuth plugin for Instagram integration. It includes setting the provider ID, client credentials, authorization and token URLs, and required scopes.

LANGUAGE: typescript
CODE:
import { betterAuth } from "better-auth";
import { genericOAuth } from "better-auth/plugins";

export const auth = betterAuth({
  // ... other config options
  plugins: [
    genericOAuth({
      config: [
        {
          providerId: "instagram",
          clientId: process.env.INSTAGRAM_CLIENT_ID as string,
          clientSecret: process.env.INSTAGRAM_CLIENT_SECRET as string,
          authorizationUrl: "https://api.instagram.com/oauth/authorize",
          tokenUrl: "https://api.instagram.com/oauth/access_token",
          scopes: ["user_profile", "user_media"],
        },
      ],
    }),
  ],
});

----------------------------------------

TITLE: Running Remix Production Server
DESCRIPTION: Command to start the Remix application in production mode after building.

LANGUAGE: sh
CODE:
npm start

----------------------------------------

TITLE: Generating Drizzle Schema
DESCRIPTION: Command for generating database schema using Better Auth CLI tool.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest generate

----------------------------------------

TITLE: Installing and Running Better Auth Next.js Example
DESCRIPTION: These commands install the necessary dependencies and start the development server for the Better Auth Next.js example project. It assumes you have already cloned the repository and set up the environment variables.

LANGUAGE: bash
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Configuring CORS in Elysia with Better Auth
DESCRIPTION: Implementation of CORS configuration using @elysiajs/cors plugin. Sets up specific origin, methods, credentials and allowed headers for cross-origin requests.

LANGUAGE: typescript
CODE:
import { Elysia } from "elysia";
import { cors } from "@elysiajs/cors";

import { auth } from "./auth";

const app = new Elysia()
  .use(
    cors({
      origin: "http://localhost:3001",
      methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
      credentials: true,
      allowedHeaders: ["Content-Type", "Authorization"],
    }),
  )
  .mount(auth.handler)
  .listen(3000);

console.log(
  `🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`,
);

----------------------------------------

TITLE: Making Authenticated Requests with Better Auth Fetch Client
DESCRIPTION: This code snippet shows how to use the Better Auth fetch client to make authenticated requests to a server.

LANGUAGE: typescript
CODE:
import { authClient } from "@/lib/auth-client";

const $fetch = authClient.$fetch;

// Example usage
$fetch("/api/secure-endpoint", {
  method: "GET",
});

----------------------------------------

TITLE: Migrating PostgreSQL Schema for Better Auth
DESCRIPTION: This command uses the Better Auth CLI to migrate the database schema based on the Better Auth configuration and plugins.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest migrate

----------------------------------------

TITLE: Initiating Email Change Request
DESCRIPTION: Client-side implementation for requesting an email change.

LANGUAGE: typescript
CODE:
await authClient.changeEmail({
    newEmail: "new-email@email.com",
    callbackURL: "/dashboard",
});

----------------------------------------

TITLE: Configuring Metro Bundler for Better Auth
DESCRIPTION: This JavaScript code configures the Metro bundler to enable package exports for Better Auth.

LANGUAGE: javascript
CODE:
const { getDefaultConfig } = require("expo/metro-config");

const config = getDefaultConfig(__dirname)

config.resolver.unstable_enablePackageExports = true;

module.exports = config;

----------------------------------------

TITLE: Configuring Account Schema Mapping in Better Auth
DESCRIPTION: Maps existing NextAuth.js account fields to Better Auth's structure and removes unnecessary fields.

LANGUAGE: typescript
CODE:
export const auth = betterAuth({
    // Other configs
    accounts: {
        fields: {
            accountId: "providerAccountId",
            refreshToken: "refresh_token",
            accessToken: "access_token",
            accessTokenExpiresAt: "access_token_expires",
            idToken: "id_token",
        }
    },
});

----------------------------------------

TITLE: Migrating SQLite Schema for Better Auth using CLI
DESCRIPTION: This command uses the Better Auth CLI to migrate the existing SQLite database schema based on changes in the Better Auth configuration and plugins.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest migrate

----------------------------------------

TITLE: Configuring User Deletion
DESCRIPTION: Configuration to enable user deletion functionality.

LANGUAGE: typescript
CODE:
export const auth = betterAuth({
    user: {
        deleteUser: {
            enabled: true
        }
    }
})

----------------------------------------

TITLE: Database Migration Commands
DESCRIPTION: CLI commands for generating and applying database migrations

LANGUAGE: bash
CODE:
npx @better-auth/cli generate
npx @better-auth/cli migrate

----------------------------------------

TITLE: Running Plasmo Development Server
DESCRIPTION: Commands to start the development server for the Plasmo extension using either pnpm or npm package managers.

LANGUAGE: bash
CODE:
pnpm dev
# or
npm run dev

----------------------------------------

TITLE: Setting Up Social Provider Authentication
DESCRIPTION: Configure social authentication providers with client credentials

LANGUAGE: typescript
CODE:
import { admin, anonymous } from "better-auth/plugins";

export const auth = betterAuth({
    database: new Pool({ 
        connectionString: process.env.DATABASE_URL 
    }),
    emailAndPassword: { 
        enabled: true,
    },
    socialProviders: {
        github: {
            clientId: process.env.GITHUB_CLIENT_ID,
            clientSecret: process.env.GITHUB_CLIENT_SECRET,
        }
    }
})

----------------------------------------

TITLE: Generating Schema with BetterAuth CLI
DESCRIPTION: Command to generate the required database schema for BetterAuth using the CLI. Supports multiple ORM adapters including Prisma, Drizzle, and Kysely.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest generate

----------------------------------------

TITLE: Configuring Session Schema Mapping in Better Auth
DESCRIPTION: Maps existing NextAuth.js session fields to Better Auth's expected structure, allowing retention of current database schema.

LANGUAGE: typescript
CODE:
export const auth = betterAuth({
    // Other configs
    session: {
        fields: {
            expiresAt: "expires", // e.g., "expires_at" or your existing field name
            token: "sessionToken" // e.g., "session_token" or your existing field name
        }
    },
});

----------------------------------------

TITLE: Configuring Email and Password Authentication
DESCRIPTION: Enable email and password authentication in Better Auth configuration

LANGUAGE: typescript
CODE:
import { admin, anonymous } from "better-auth/plugins";

export const auth = betterAuth({
    database: new Pool({ 
        connectionString: process.env.DATABASE_URL 
    }),
    emailAndPassword: {
        enabled: true,
    }
})

----------------------------------------

TITLE: Installing Stripe Plugin for Better Auth
DESCRIPTION: Command to install the Stripe plugin for Better Auth using npm.

LANGUAGE: bash
CODE:
npm install @better-auth/stripe

----------------------------------------

TITLE: Executing Migration Script
DESCRIPTION: Run the migration script using Bun or other JavaScript runtime

LANGUAGE: bash
CODE:
bun migration.ts

----------------------------------------

TITLE: Global Cookie Attributes Configuration
DESCRIPTION: Setup for global cookie attributes including SameSite and Secure flags for cross-domain functionality.

LANGUAGE: typescript
CODE:
export const auth = createAuth({
  advanced: {
    defaultCookieAttributes: {
      sameSite: "none",
      secure: true,
      partitioned: true // New browser standards will mandate this for foreign cookies
    }
  }
})

----------------------------------------

TITLE: Initializing Better Auth with Database Connection
DESCRIPTION: Configure Better Auth with PostgreSQL database connection using connection string

LANGUAGE: typescript
CODE:
import { Pool } from "pg";

export const auth = betterAuth({
    database: new Pool({ 
        connectionString: process.env.DATABASE_URL 
    }),
})

----------------------------------------

TITLE: Installing and Running Svelte Kit Better Auth Example
DESCRIPTION: Commands to install dependencies and start the development server for the Svelte Kit Better Auth example project. This assumes the repository has been cloned and environment variables have been set up.

LANGUAGE: bash
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Running Database Migration
DESCRIPTION: Execute the Better Auth migration to create required database tables

LANGUAGE: bash
CODE:
npx @better-auth/cli migrate

----------------------------------------

TITLE: Migrating Required Tables for Better Auth
DESCRIPTION: This command uses the Better Auth CLI to migrate the required database tables for the authentication system.

LANGUAGE: bash
CODE:
pnpx @better-auth/cli migrate

----------------------------------------

TITLE: Configuring Better Auth Client
DESCRIPTION: Creates and exports the Better Auth client instance with authentication utilities.

LANGUAGE: typescript
CODE:
import { createAuthClient } from "better-auth/react";

export const authClient = createAuthClient({
    baseURL: process.env.BASE_URL! // Optional if the API base URL matches the frontend
});

export const { signIn, signOut, useSession } = authClient;

----------------------------------------

TITLE: Installing Dependencies for Better Auth and TanStack Start Project
DESCRIPTION: This command installs the necessary dependencies for the project using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Running Better Auth CLI Init Command
DESCRIPTION: Bash command to initialize a Better Auth project using the CLI init command.

LANGUAGE: bash
CODE:
npx @better-auth/cli init

----------------------------------------

TITLE: Installing Better Auth Package
DESCRIPTION: Command to install the Better Auth library using pnpm package manager

LANGUAGE: bash
CODE:
pnpm install better-auth

----------------------------------------

TITLE: Implementing Better Auth Route Handler
DESCRIPTION: Sets up the Next.js API route handler for Better Auth authentication endpoints.

LANGUAGE: typescript
CODE:
import { toNextJsHandler } from "better-auth/next-js";
import { auth } from "~/server/auth";

export const { POST, GET } = toNextJsHandler(auth);

----------------------------------------

TITLE: Building Plasmo Production Bundle
DESCRIPTION: Commands to create a production-ready bundle of the Plasmo extension for deployment to browser stores.

LANGUAGE: bash
CODE:
pnpm build
# or
npm run build

----------------------------------------

TITLE: Configuring Stripe Plugin in Better Auth
DESCRIPTION: TypeScript code snippet showing how to configure the Stripe plugin in Better Auth, including customer creation and subscription settings.

LANGUAGE: typescript
CODE:
import { stripe } from "@better-auth/stripe";

export const auth = betterAuth({
  plugins: [
    stripe({
      createCustomerOnSignup: true,
      subscription: {
        enabled: true,
        plans: [
          {
            name: "pro",
            priceId: "price_1234567890",
          },
        ],
      },
    }),
  ],
});

----------------------------------------

TITLE: Implementing Better Auth Middleware in Nuxt
DESCRIPTION: This snippet demonstrates how to implement Better Auth middleware in a Nuxt application. It checks the session status and redirects unauthenticated users from protected routes.

LANGUAGE: typescript
CODE:
import { authClient } from "~/lib/auth-client";
export default defineNuxtRouteMiddleware(async (to, from) => {
	const { data: session } = await authClient.useSession(useFetch); 
	if (!session.value) {
		if (to.path === "/dashboard") {
			return navigateTo("/");
		}
	}
});

----------------------------------------

TITLE: Configuring TypeScript for Browser Extension
DESCRIPTION: TypeScript configuration with strict mode and custom import path aliases

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "paths": {
            "@/_": [
                "./src/_"
            ]
        },
        "strict": true,
        "baseUrl": "."
    }
}

----------------------------------------

TITLE: Building Remix Application
DESCRIPTION: Command to build the Remix application for production deployment.

LANGUAGE: sh
CODE:
npm run build

----------------------------------------

TITLE: Generating Secret Key with BetterAuth CLI
DESCRIPTION: Command to generate a secure secret key for BetterAuth instance configuration.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest secret

----------------------------------------

TITLE: Migrating MS SQL Schema with Better Auth CLI
DESCRIPTION: This command uses the Better Auth CLI to migrate the existing database schema for MS SQL based on changes in the Better Auth configuration and plugins.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest migrate

----------------------------------------

TITLE: User Table Schema Definition in Drizzle ORM
DESCRIPTION: Defines the user table schema with fields for basic user information, email verification, and two-factor authentication status.

LANGUAGE: typescript
CODE:
export const user = pgTable("user", {
	id: text("id").primaryKey(),
	name: text('name').notNull(),
	email: text('email').notNull().unique(),
	emailVerified: boolean('email_verified').notNull(),
	image: text('image'),
	createdAt: timestamp('created_at').notNull(),
	updatedAt: timestamp('updated_at').notNull(),
	twoFactorEnabled: boolean('two_factor_enabled'),
	username: text('username').unique(),
	displayUsername: text('display_username')
});

----------------------------------------

TITLE: Starting Development Server for Better Auth Demo App
DESCRIPTION: Commands to start the development server for the Better Auth demo app using npm, yarn, pnpm, or bun.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Migrating Database with BetterAuth CLI
DESCRIPTION: Command to apply the BetterAuth schema directly to the database when using the Kysely adapter. Handles database migration and schema updates.

LANGUAGE: bash
CODE:
npx @better-auth/cli@latest migrate

----------------------------------------

TITLE: Caching Responses in Remix Loader Function
DESCRIPTION: This example demonstrates how to use the cache option in Remix's loader function to cache responses on the server. It sets a Cache-Control header to specify the caching duration.

LANGUAGE: typescript
CODE:
import { json } from '@remix-run/node';

export const loader = async () => {
const { users } = await auth.api.listUsers();
return json(users, {
    headers: {
    'Cache-Control': 'max-age=3600', // Cache for 1 hour
    },
});
};

----------------------------------------

TITLE: Installing and Running Better Auth Remix Example
DESCRIPTION: Commands to install dependencies and start the development server for the Better Auth Remix example project. Requires a .env file with necessary variables.

LANGUAGE: bash
CODE:
pnpm install
pnpm run dev

----------------------------------------

TITLE: Installing Dependencies with Bun
DESCRIPTION: Command to install project dependencies using Bun package manager.

LANGUAGE: bash
CODE:
bun install

----------------------------------------

TITLE: Starting Remix Development Server
DESCRIPTION: Command to run the Remix application in development mode using npm.

LANGUAGE: shellscript
CODE:
npm run dev

----------------------------------------

TITLE: Facebook Sign-In with ID Token
DESCRIPTION: Implements Facebook sign-in using ID tokens or access tokens. Handles platform-specific token requirements for both iOS and other platforms.

LANGUAGE: typescript
CODE:
const data = await authClient.signIn.social({
    provider: "facebook",
    idToken: {
        ...(platform === 'ios' ? 
            { token: idToken }
            : { token: accessToken, accessToken: accessToken }),
    },
})

----------------------------------------

TITLE: Installing and Running Better Auth Astro Example
DESCRIPTION: Commands for installing dependencies and starting the development server for the Better Auth Astro example. This assumes you've already cloned the repository or code sandbox.

LANGUAGE: bash
CODE:
pnpm install
pnpm run dev

----------------------------------------

TITLE: Two-Factor Authentication Table Schema Definition in Drizzle ORM
DESCRIPTION: Defines the two-factor authentication table schema for storing 2FA secrets and backup codes. References the user table.

LANGUAGE: typescript
CODE:
export const twoFactor = pgTable("two_factor", {
	id: text("id").primaryKey(),
	secret: text('secret').notNull(),
	backupCodes: text('backup_codes').notNull(),
	userId: text('user_id').notNull().references(()=> user.id, { onDelete: 'cascade' })
});

----------------------------------------

TITLE: Installing and Running Better Auth Expo Example
DESCRIPTION: Commands to install dependencies and start the Better Auth Expo example project using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install
pnpm start

----------------------------------------

TITLE: Basic Plugin Structure Definition in TypeScript
DESCRIPTION: Minimal plugin implementation showing required id property and type satisfaction.

LANGUAGE: typescript
CODE:
import type { BetterAuthPlugin } from "better-auth";

export const myPlugin = ()=>{
    return {
        id: "my-plugin",
    } satisfies BetterAuthPlugin
}

----------------------------------------

TITLE: Configuring Environment Variables for Better Auth in Astro
DESCRIPTION: Sets up the necessary environment variables for Google authentication and Better Auth secret. These are required for the application to function properly with Google sign-in.

LANGUAGE: txt
CODE:
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
BETTER_AUTH_SECRET=

----------------------------------------

TITLE: Installing and Running Better Auth Docs Site
DESCRIPTION: Commands to install dependencies and start the local development server for the Better Auth documentation site. The site will be accessible at http://localhost:3000.

LANGUAGE: bash
CODE:
pnpm install
pnpm run dev

----------------------------------------

TITLE: Running the Better Auth and TanStack Start Project
DESCRIPTION: This command starts the development server for the project, allowing you to run and test the Better Auth integration with TanStack Start.

LANGUAGE: bash
CODE:
pnpm dev

----------------------------------------

TITLE: Enabling API Key Plugin in Better Auth
DESCRIPTION: TypeScript code snippet showing how to enable the API Key plugin in Better Auth configuration.

LANGUAGE: typescript
CODE:
import { apiKey } from "better-auth/plugins";

const auth = betterAuth({
  plugins: [apiKey()],
});

----------------------------------------

TITLE: Session Table Schema Definition in Drizzle ORM
DESCRIPTION: Defines the session table schema for managing user sessions with fields for token, expiration, and user agent information. References the user table.

LANGUAGE: typescript
CODE:
export const session = pgTable("session", {
	id: text("id").primaryKey(),
	expiresAt: timestamp('expires_at').notNull(),
	token: text('token').notNull().unique(),
	createdAt: timestamp('created_at').notNull(),
	updatedAt: timestamp('updated_at').notNull(),
	ipAddress: text('ip_address'),
	userAgent: text('user_agent'),
	userId: text('user_id').notNull().references(()=> user.id, { onDelete: 'cascade' })
});

----------------------------------------

TITLE: Installing and Running BetterAuth Development Environment
DESCRIPTION: Series of commands to set up and run the BetterAuth project locally. First installs dependencies with pnpm, then runs local database migrations, and finally starts the development server.

LANGUAGE: shell
CODE:
pnpm install
pnpm run migrate:local
pnpm run dev

----------------------------------------

TITLE: Renaming Environment File for Better Auth Demo App
DESCRIPTION: Command to rename the example environment file to the actual .env file used by the application.

LANGUAGE: bash
CODE:
mv .env.example .env

----------------------------------------

TITLE: Installing Dependencies for Better Auth Demo App
DESCRIPTION: Commands to install the necessary dependencies for the Better Auth demo app using npm, yarn, or pnpm.

LANGUAGE: bash
CODE:
npm install
# or
yarn install
# or
pnpm install

----------------------------------------

TITLE: Cloning Better Auth Repository in Bash
DESCRIPTION: Commands to clone the Better Auth repository and navigate to the demo app directory.

LANGUAGE: bash
CODE:
git clone https://github.com/better-auth/better-auth
cd better-auth/demo/nextjs