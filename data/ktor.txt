TITLE: Implementing Customer Routes in Ktor
DESCRIPTION: Defines route handlers for customer-related endpoints using Ktor's routing DSL. Includes handlers for getting customer by ID and creating new customers.

LANGUAGE: kotlin
CODE:
fun Route.customerByIdRoute() {
    get("/customer/{id}") {

    }
}

fun Route.createCustomerRoute() {
    post("/customer") {

    }
}

----------------------------------------

TITLE: Modular Customer Routes Configuration
DESCRIPTION: Shows how to organize customer routes using Application extension functions for better modularity.

LANGUAGE: kotlin
CODE:
fun Application.customerRoutes() {
    routing {
        listCustomersRoute()
        customerByIdRoute()
        createCustomerRoute()
        deleteCustomerRoute()
    }    
}

----------------------------------------

TITLE: Protecting Routes with JWT Authentication
DESCRIPTION: Demonstrates how to protect specific routes with JWT authentication and access the JWT principal.

LANGUAGE: Kotlin
CODE:
authenticate {
    get("/hello") {
        val principal = call.principal<JWTPrincipal>()
        val username = principal!!.payload.getClaim("username").asString()
        val expiresAt = principal.expiresAt?.time?.minus(System.currentTimeMillis())
        call.respondText("Hello, $username! Token is expired at $expiresAt ms.")
    }
}

----------------------------------------

TITLE: Installing Basic Authentication Provider in Ktor
DESCRIPTION: Demonstrates how to install and configure the basic authentication provider in a Ktor application.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.auth.*
// ...
install(Authentication) {
    basic {
        // Configure basic authentication
    }
}

----------------------------------------

TITLE: Installing JWT Authentication in Ktor
DESCRIPTION: Demonstrates how to install the JWT authentication provider in a Ktor application.

LANGUAGE: Kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.auth.jwt.*
//...
install(Authentication) {
    jwt {
        // Configure jwt authentication
    }
}

----------------------------------------

TITLE: Configuring JWT Realm
DESCRIPTION: Shows how to configure the realm for JWT authentication in Ktor.

LANGUAGE: Kotlin
CODE:
val jwtRealm = config.property("jwt.realm").getString()

install(Authentication) {
    jwt {
        realm = jwtRealm
    }
}

----------------------------------------

TITLE: Configuring Basic Authentication Provider in Ktor
DESCRIPTION: This code snippet shows how to configure the basic authentication provider in Ktor. It sets the realm and implements a validate function to check user credentials.

LANGUAGE: kotlin
CODE:
install(Authentication) {
    basic(name = "myauth1") {
        realm = "Ktor Server"
        validate { credentials ->
            if (credentials.name == credentials.password) {
                UserIdPrincipal(credentials.name)
            } else {
                null
            }
        }
    }
}

----------------------------------------

TITLE: Receiving and Processing JSON Data in Ktor Server Route
DESCRIPTION: This snippet shows how to receive and process JSON data in a Ktor server route, converting it to a Customer object.

LANGUAGE: kotlin
CODE:
post("/customer") {
    val customer = call.receive<Customer>()
    customerStorage.add(customer)
    call.respondText("Customer stored correctly", status = HttpStatusCode.Created)
}

----------------------------------------

TITLE: Generating JWT Token (HS256)
DESCRIPTION: Shows how to generate a JWT token using the HS256 algorithm in a login route.

LANGUAGE: Kotlin
CODE:
post("/login") {
    val user = call.receive<User>()
    val token = JWT.create()
        .withAudience(jwtAudience)
        .withIssuer(jwtIssuer)
        .withClaim("username", user.username)
        .withExpiresAt(Date(System.currentTimeMillis() + 60000))
        .sign(Algorithm.HMAC256(jwtSecret))
    call.respond(hashMapOf("token" to token))
}

----------------------------------------

TITLE: Installing ContentNegotiation Plugin with JSON Serializer in Kotlin
DESCRIPTION: This snippet shows how to install the ContentNegotiation plugin and configure a JSON serializer using kotlinx.serialization in a Ktor server application.

LANGUAGE: kotlin
CODE:
import io.ktor.server.plugins.contentnegotiation.*
import io.ktor.serialization.kotlinx.json.*

install(ContentNegotiation) {
    json()
}

----------------------------------------

TITLE: Sending JSON Data in Ktor Server Response
DESCRIPTION: This code demonstrates how to send a JSON response containing a list of Customer objects in a Ktor server route.

LANGUAGE: kotlin
CODE:
get("/customer") {
    if (customerStorage.isNotEmpty()) {
        call.respond(customerStorage)
    }

----------------------------------------

TITLE: Configuring Multiple Authentication Providers
DESCRIPTION: Shows how to configure multiple named authentication providers (basic and form) in Ktor.

LANGUAGE: kotlin
CODE:
install(Authentication) {
    basic("auth-basic") {
        // Configure basic authentication
    }
    form("auth-form") {
        // Configure form authentication
    }
    // ...
}

----------------------------------------

TITLE: Signing and Encrypting Session Data in Ktor
DESCRIPTION: Demonstrates how to sign and encrypt session data to prevent reading and modification, using SessionTransportTransformerEncrypt.

LANGUAGE: kotlin
CODE:
install(Sessions) {
    cookie<UserSession>("user_session") {
        transform(SessionTransportTransformerEncrypt(
            encryptionKey = hex("00112233445566778899aabbccddeeff"),
            signKey = hex("6819b57a326945c1968f45236589"),
            oldSignKey = hex("0e020205080d0507010c05020f0e01")
        ))
    }
}

----------------------------------------

TITLE: Basic HTTP Request with Ktor
DESCRIPTION: Shows how to make a basic HTTP request using Ktor client's request function. Demonstrates accessing the HttpResponse object.

LANGUAGE: kotlin
CODE:
import io.ktor.client.request.*
import io.ktor.client.statement.*

val response: HttpResponse = client.request("https://ktor.io/") {
  // Configure request parameters exposed by HttpRequestBuilder
}

----------------------------------------

TITLE: Installing Global Plugins in Ktor Server
DESCRIPTION: Demonstrates how to install plugins globally in a Ktor server using the embeddedServer configuration. Shows installation of CORS and Compression plugins.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.plugins.cors.*
import io.ktor.server.plugins.compression.*
// ...
fun main() {
    embeddedServer(Netty, port = 8080) {
        install(CORS)
        install(Compression)
        // ...
    }.start(wait = true)
}

----------------------------------------

TITLE: Protecting Routes with Authentication
DESCRIPTION: Shows how to protect specific routes using the authenticate function with named providers.

LANGUAGE: kotlin
CODE:
routing {
    authenticate("auth-basic") {
        get("/login") {
            // ...
        }    
        get("/orders") {
            // ...
        }    
    }
    get("/") {
        // ...
    }
}

----------------------------------------

TITLE: Protecting Routes with Basic Authentication in Ktor
DESCRIPTION: This snippet demonstrates how to protect specific routes using basic authentication in Ktor. It shows the usage of the authenticate function and how to retrieve the authenticated user's principal.

LANGUAGE: kotlin
CODE:
routing {
    authenticate("myauth1") {
        get("/protected/route/basic") {
            val principal = call.principal<UserIdPrincipal>()!!
            call.respondText("Hello ${principal.name}")
        }
    }
}

----------------------------------------

TITLE: Configuring Form Authentication Provider
DESCRIPTION: Demonstrates how to configure the form authentication provider with user parameters and validation logic, including credential validation and challenge handling.

LANGUAGE: kotlin
CODE:
install(Authentication) {
    form("auth-form") {
        userParamName = "username"
        passwordParamName = "password"
        validate { credentials ->
            if (credentials.name == "jetbrains" && credentials.password == "foobar") {
                UserIdPrincipal(credentials.name)
            } else {
                null
            }
        }
        challenge {
            call.respondRedirect("/login")
        }
    }
}

----------------------------------------

TITLE: Sending JSON Data in Request
DESCRIPTION: Demonstrates how to send a serialized object in a POST request with proper content type.

LANGUAGE: kotlin
CODE:
client.post("http://0.0.0.0:8080/customer") {
    contentType(ContentType.Application.Json)
    setBody(customer)
}

----------------------------------------

TITLE: Using Route Extension Functions in Ktor
DESCRIPTION: Shows how to use extension functions on the Route type to define routes, improving code organization and maintainability.

LANGUAGE: Kotlin
CODE:
routing {
    listOrdersRoute()
    getOrderRoute()
    totalizeOrderRoute()
}

fun Route.listOrdersRoute() {
    get("/order") {

    }
}

fun Route.getOrderRoute() {
    get("/order/{id}") {
        
    }
}

fun Route.totalizeOrderRoute() {
    get("/order/{id}/total") {
        
    }
}

----------------------------------------

TITLE: Initializing UserHashedTableAuth in Ktor
DESCRIPTION: This snippet shows how to initialize UserHashedTableAuth with a table of usernames and hashed passwords, and assign the digest function for basic authentication in Ktor.

LANGUAGE: kotlin
CODE:
val hashedUserTable = UserHashedTableAuth(table = mapOf(
    "jetbrains" to digestFunction("foobar"),
    "admin" to digestFunction("password")
), digester = digestFunction)

----------------------------------------

TITLE: Basic Authentication Validation Configuration
DESCRIPTION: Demonstrates implementing credential validation for basic authentication using UserPasswordCredential.

LANGUAGE: kotlin
CODE:
basic {
    realm = "Access to the '/' path"
    validate { credentials ->
        if (credentials.name == credentials.password) {
            UserIdPrincipal(credentials.name)
        } else {
            null
        }
    }
}

----------------------------------------

TITLE: Configuring Bearer Authentication Provider in Ktor
DESCRIPTION: This snippet demonstrates how to configure the bearer authentication provider in Ktor. It sets the realm and defines an authenticate function to validate the token and return a UserIdPrincipal or null based on authentication success.

LANGUAGE: kotlin
CODE:
install(Authentication) {
    bearer {
        realm = "Access to the '/' path"
        authenticate { tokenCredential ->
            if (tokenCredential.token == "abc123") {
                UserIdPrincipal("jetbrains")
            } else {
                null
            }
        }
    }
}

----------------------------------------

TITLE: Validating JWT Payload
DESCRIPTION: Shows how to validate the JWT payload and configure the challenge response in Ktor.

LANGUAGE: Kotlin
CODE:
install(Authentication) {
    jwt {
        validate { credential ->
            if (credential.payload.getClaim("username").asString() != "") {
                JWTPrincipal(credential.payload)
            } else {
                null
            }
        }
        challenge { defaultScheme, realm ->
            call.respond(HttpStatusCode.Unauthorized, "Token is not valid or has expired")
        }
    }
}

----------------------------------------

TITLE: Database Connection Singleton Implementation
DESCRIPTION: Implements a DatabaseSingleton object to manage database connections and provide a utility function for database queries using coroutines.

LANGUAGE: kotlin
CODE:
package com.example.dao

import kotlinx.coroutines.*
import org.jetbrains.exposed.sql.*
import org.jetbrains.exposed.sql.transactions.*
import org.jetbrains.exposed.sql.transactions.experimental.*

object DatabaseSingleton {
    private const val driverClassName = "org.h2.Driver"
    private const val jdbcURL = "jdbc:h2:file:./build/db"

    fun init() {
        val database = Database.connect(jdbcURL, driverClassName)
        transaction(database) {
            SchemaUtils.create(Articles)
        }
    }

    suspend fun <T> dbQuery(block: suspend () -> T): T =
        newSuspendedTransaction(Dispatchers.IO) { block() }
}

----------------------------------------

TITLE: Configuring SSL in Ktor Using YAML Configuration
DESCRIPTION: This YAML configuration snippet demonstrates how to enable SSL in a Ktor server using the application.yaml file. It specifies the SSL port and provides keystore settings including the keystore path, alias, and password.

LANGUAGE: yaml
CODE:
ktor:
  deployment:
    port: 8080
    sslPort: 8443
  security:
    ssl:
      keyStore: keystore.jks
      keyAlias: sampleAlias
      keyStorePassword: 123456
      privateKeyPassword: 123456

----------------------------------------

TITLE: Handling Exceptions with StatusPages in Kotlin
DESCRIPTION: Configures a response for any Throwable exception with a 500 Internal Server Error status code.

LANGUAGE: kotlin
CODE:
install(StatusPages) {
    exception<Throwable> { call, cause ->
        call.respondText(text = "500: $cause" , status = HttpStatusCode.InternalServerError)
    }
}

----------------------------------------

TITLE: Complete CRUD Operations Example
DESCRIPTION: Demonstrates a complete example of CRUD operations using type-safe requests with the Resources plugin.

LANGUAGE: kotlin
CODE:
fun main() {
    runBlocking {
        val client = HttpClient(CIO) {
            install(Resources)
            defaultRequest {
                url("http://127.0.0.1:8080")
            }
        }
        
        // Get all articles
        val articles = client.get(Articles()).body<List<Article>>()
        println(articles)
        
        // Create a new article
        val article = client.post(Articles.New()) {
            setBody(Article(0, "Ktor", "Ktor Framework"))
        }.body<Article>()
        println(article)
        
        // Edit an article
        client.put(Articles.Id.Edit(Articles.Id(id = article.id))) {
            setBody(Article(article.id, "Ktor", "Awesome Ktor Framework"))
        }
    }
}

----------------------------------------

TITLE: Installing Plugins in Ktor Application Module
DESCRIPTION: Shows how to install plugins within a Ktor application module. Demonstrates installation of CORS and Compression plugins in a module configuration.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.plugins.cors.*
import io.ktor.server.plugins.compression.*
// ...
fun Application.module() {
    install(CORS)
    install(Compression)
    // ...
}

----------------------------------------

TITLE: Configuring Basic OpenAPI Endpoint in Ktor
DESCRIPTION: Sets up a basic OpenAPI documentation endpoint in Ktor routing, serving documentation from a YAML specification file at the specified path.

LANGUAGE: kotlin
CODE:
import io.ktor.server.plugins.openapi.*

// ...
routing {
    openAPI(path="openapi", swaggerFile = "openapi/documentation.yaml")
}

----------------------------------------

TITLE: Configuring SSL in Ktor Using HOCON Configuration
DESCRIPTION: This HOCON configuration snippet shows how to enable SSL in a Ktor server using the application.conf file. It specifies the SSL port and provides keystore settings including the keystore path, alias, and password.

LANGUAGE: hocon
CODE:
ktor {
    deployment {
        port = 8080
        sslPort = 8443
    }
    security {
        ssl {
            keyStore = keystore.jks
            keyAlias = sampleAlias
            keyStorePassword = 123456
            privateKeyPassword = 123456
        }
    }
}

----------------------------------------

TITLE: Installing Routing Plugin in Ktor
DESCRIPTION: Demonstrates how to install the Routing plugin in a Ktor server application using the install function or the more convenient routing function.

LANGUAGE: Kotlin
CODE:
import io.ktor.server.routing.*

install(RoutingRoot) {
    // ...
}

LANGUAGE: Kotlin
CODE:
import io.ktor.server.routing.*

routing {
    // ...
}

----------------------------------------

TITLE: Installing Form Authentication Provider in Ktor
DESCRIPTION: Shows how to install and setup the basic form authentication provider in a Ktor application using the Authentication feature.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.auth.*
// ...
install(Authentication) {
    form {
        // Configure form authentication
    }
}

----------------------------------------

TITLE: Installing Routing Plugin in Ktor
DESCRIPTION: Demonstrates how to install the Routing plugin in a Ktor server application using the install function or the more convenient routing function.

LANGUAGE: Kotlin
CODE:
import io.ktor.server.routing.*

install(RoutingRoot) {
    // ...
}

LANGUAGE: Kotlin
CODE:
import io.ktor.server.routing.*

routing {
    // ...
}

----------------------------------------

TITLE: Configuring OAuth Provider Settings
DESCRIPTION: Detailed configuration of OAuth provider settings including authorization endpoints and client credentials

LANGUAGE: kotlin
CODE:
oauth("auth-oauth-google") {
    urlProvider = { "http://localhost:8080/callback" }
    providerLookup = {
        OAuthServerSettings.OAuth2ServerSettings(
            name = "google",
            authorizeUrl = "https://accounts.google.com/o/oauth2/auth",
            accessTokenUrl = "https://oauth2.googleapis.com/token",
            requestMethod = HttpMethod.Post,
            clientId = System.getenv("GOOGLE_CLIENT_ID"),
            clientSecret = System.getenv("GOOGLE_CLIENT_SECRET"),
            defaultScopes = listOf(
                "https://www.googleapis.com/auth/userinfo.profile",
                "https://www.googleapis.com/auth/userinfo.email"
            )
        )
    }
    client = client
}

----------------------------------------

TITLE: Configuring CORS Host Allowances
DESCRIPTION: Examples of configuring allowed hosts for CORS requests including subdomains and schemes

LANGUAGE: kotlin
CODE:
install(CORS) {
    allowHost("client-host")
    allowHost("client-host:8081")
    allowHost("client-host", subDomains = listOf("en", "de", "es"))
    allowHost("client-host", schemes = listOf("http", "https"))
}

----------------------------------------

TITLE: Configuring JWT Verifier (HS256)
DESCRIPTION: Demonstrates how to configure the JWT verifier for HS256 algorithm in Ktor.

LANGUAGE: Kotlin
CODE:
val jwtIssuer = config.property("jwt.issuer").getString()
val jwtAudience = config.property("jwt.audience").getString()
val jwtSecret = config.property("jwt.secret").getString()

install(Authentication) {
    jwt {
        verifier(
            JWT
                .require(Algorithm.HMAC256(jwtSecret))
                .withAudience(jwtAudience)
                .withIssuer(jwtIssuer)
                .build()
        )
    }
}

----------------------------------------

TITLE: Deserializing JSON Response
DESCRIPTION: Shows how to deserialize JSON response data into a Kotlin data class using ContentNegotiation plugin

LANGUAGE: kotlin
CODE:
val customers: List<Customer> = client.get("http://0.0.0.0:8080/customers").body()

----------------------------------------

TITLE: Basic Ktor Routing Configuration
DESCRIPTION: Demonstrates how to configure multiple routes at the application level using Ktor's routing DSL.

LANGUAGE: kotlin
CODE:
routing {
    customerRouting()
    listOrdersRoute()
    getOrderRoute()
    totalizeOrderRoute()
}

----------------------------------------

TITLE: Loading Ktor Modules with embeddedServer in Kotlin
DESCRIPTION: This snippet shows how to load multiple Ktor modules using the embeddedServer function. It demonstrates passing references to separate module functions as parameters.

LANGUAGE: kotlin
CODE:
fun main() {
    embeddedServer(Netty, port = 8080) {
        module1()
        module2()
    }.start(wait = true)
}

fun Application.module1() {
    routing {
        get("/module1") {
            call.respondText("Hello from module1")
        }
    }
}

fun Application.module2() {
    routing {
        get("/module2") {
            call.respondText("Hello from module2")
        }
    }
}

----------------------------------------

TITLE: Defining a Route Handler in Ktor
DESCRIPTION: Shows how to define a route handler using the route function and the more concise get function for handling GET requests.

LANGUAGE: Kotlin
CODE:
import io.ktor.server.routing.*
import io.ktor.http.*
import io.ktor.server.response.*

routing {
    route("/hello", HttpMethod.Get) {
        handle {
            call.respondText("Hello")
        }
    }
}

LANGUAGE: Kotlin
CODE:
import io.ktor.server.routing.*
import io.ktor.server.response.*

routing {
    get("/hello") {
        call.respondText("Hello")
    }
}

----------------------------------------

TITLE: Adding JWT Dependencies in Gradle (Kotlin)
DESCRIPTION: Adds the required dependencies for JWT authentication in a Gradle build script using Kotlin DSL.

LANGUAGE: Kotlin
CODE:
implementation("io.ktor:ktor-server-auth:$ktor_version")
implementation("io.ktor:ktor-server-auth-jwt:$ktor_version")

----------------------------------------

TITLE: Basic HttpClient Creation with CIO Engine
DESCRIPTION: Shows how to create an HttpClient instance using the CIO (Coroutine-based I/O) engine.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO)

----------------------------------------

TITLE: Configuring Global Rate Limiting in Ktor
DESCRIPTION: Demonstrates how to configure global rate limiting for an entire Ktor application using the token bucket algorithm. Limits requests to 5 per 60 seconds.

LANGUAGE: kotlin
CODE:
install(RateLimit) {
    global {
        rateLimiter(limit = 5, refillPeriod = 60.seconds)
    }
}

----------------------------------------

TITLE: Implementing Request Logging Plugin in Ktor
DESCRIPTION: Shows how to create a custom plugin for logging incoming request URLs using the onCall handler.

LANGUAGE: Kotlin
CODE:
val RequestLoggingPlugin = createApplicationPlugin(name = "RequestLoggingPlugin") {
    onCall { call ->
        println("Request URL: ${call.request.url()}")
    }
}

----------------------------------------

TITLE: Configuring Advanced Logging Settings
DESCRIPTION: Shows detailed configuration of the Logging plugin including logger setup, log level, and filtering conditions.

LANGUAGE: kotlin
CODE:
install(Logging) {
    logger = Logger.DEFAULT
    level = LogLevel.HEADERS
    filter { request ->
        request.url.host.contains("ktor")
    }
}

----------------------------------------

TITLE: Using Regular Expressions in Ktor Routes
DESCRIPTION: Shows how to use regular expressions to define routes and access captured path parts in the handler.

LANGUAGE: Kotlin
CODE:
import io.ktor.server.routing.*
import io.ktor.server.response.*

routing {
    get(Regex(".+/hello")) {
        call.respondText("Hello")
    }
}

LANGUAGE: Kotlin
CODE:
import io.ktor.server.routing.*
import io.ktor.server.response.*

routing {
    get(Regex("""(?<id>\d+)/hello""")) {
        val id = call.parameters["id"]!!
        call.respondText(id)
    }
}

----------------------------------------

TITLE: Implementing Route Handlers for Resource Classes in Kotlin
DESCRIPTION: This example demonstrates how to define route handlers for various endpoints of the Articles resource, including GET, POST, PUT, and DELETE operations.

LANGUAGE: kotlin
CODE:
fun Application.module() {
    install(Resources)
    routing {
        get<Articles> { articles ->
            call.respondText("List of articles sorted by ${articles.sort}")
        }
        get<Articles.New> {
            call.respondText("Form for creating a new article")
        }
        post<Articles> {
            call.respondText("Creating a new article")
        }
        get<Articles.Id> { article ->
            call.respondText("Showing article ${article.id}")
        }
        get<Articles.Id.Edit> { article ->
            call.respondText("Form for editing article ${article.parent.id}")
        }
        put<Articles.Id> { article ->
            call.respondText("Updating article ${article.id}")
        }
        delete<Articles.Id> { article ->
            call.respondText("Deleting article ${article.id}")
        }
    }
}

----------------------------------------

TITLE: Configuring Custom Swagger UI Settings in Ktor
DESCRIPTION: Demonstrates how to customize Swagger UI with additional configuration options like version and styling.

LANGUAGE: kotlin
CODE:
routing {
    swaggerUI(path = "swagger") {
        version = "4.15.5"
    }
}

----------------------------------------

TITLE: Basic CORS Configuration in Ktor
DESCRIPTION: Basic configuration of CORS plugin in Ktor to allow cross-origin requests

LANGUAGE: kotlin
CODE:
install(CORS) {
    allowHost("0.0.0.0:8081")
    allowHeader(HttpHeaders.ContentType)
}

----------------------------------------

TITLE: Configuring Session Authentication Provider
DESCRIPTION: Shows how to configure session authentication with validation and challenge functions.

LANGUAGE: kotlin
CODE:
install(Authentication) {
    session<UserSession>("auth-session") {
        validate { session ->
            if (session.name.isNotEmpty()) {
                session
            } else {
                null
            }
        }
        challenge {
            call.respondRedirect("/login")
        }
    }
}

----------------------------------------

TITLE: Protecting Routes with Bearer Authentication in Ktor
DESCRIPTION: This snippet shows how to protect specific routes using bearer authentication in Ktor. It uses the authenticate function to secure a route and demonstrates how to retrieve the authenticated principal.

LANGUAGE: kotlin
CODE:
routing {
    authenticate {
        get("/") {
            val principal = call.principal<UserIdPrincipal>()
            call.respondText("Hello, ${principal?.name}!")
        }
    }
}

----------------------------------------

TITLE: Protecting Routes with Form Authentication
DESCRIPTION: Shows how to protect specific routes using form authentication and handle authenticated user principals.

LANGUAGE: kotlin
CODE:
authenticate("auth-form") {
    post("/login") {
        val principal = call.principal<UserIdPrincipal>()
        call.respondText("Hello, ${principal?.name}!")
    }
}

----------------------------------------

TITLE: Configuring Cookie-based Sessions in Ktor
DESCRIPTION: Demonstrates how to configure cookie-based sessions in Ktor, including setting cookie attributes like path and expiration time.

LANGUAGE: kotlin
CODE:
install(Sessions) {
    cookie<UserSession>("user_session") {
        cookie.path = "/"
        cookie.maxAgeInSeconds = 60
    }
}

----------------------------------------

TITLE: Installing Sessions Plugin in Ktor
DESCRIPTION: Configuration for installing the Sessions plugin to store OAuth access tokens

LANGUAGE: kotlin
CODE:
install(Sessions) {
    cookie<UserSession>("user_session")
}

data class UserSession(val token: String)

----------------------------------------

TITLE: Loading SSL Settings from KeyStore in Kotlin
DESCRIPTION: This snippet creates an SslSettings object that loads a certificate from an existing KeyStore file and provides functions for loading SSL configurations. It includes methods for getting SSLContext, TrustManager, and KeyManager.

LANGUAGE: kotlin
CODE:
object SslSettings {
    private val keyStoreFile = File("keystore.jks")
    private val keyStore = KeyStore.getInstance(KeyStore.getDefaultType())

    init {
        keyStore.load(keyStoreFile.inputStream(), "foobar".toCharArray())
    }

    fun getSslContext(): SSLContext = SSLContext.getInstance("TLS").apply {
        val tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())
        tmf.init(keyStore)
        init(null, tmf.trustManagers, null)
    }

    fun getTrustManager(): X509TrustManager = getSslContext().trustManagers
        .first { it is X509TrustManager } as X509TrustManager

    fun getKeyManager(): X509KeyManager = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()).apply {
        init(keyStore, "foobar".toCharArray())
    }.keyManagers.first { it is X509KeyManager } as X509KeyManager

    fun getSSLSocketFactory() = getSslContext().socketFactory
}

----------------------------------------

TITLE: Receiving JSON Object in Ktor
DESCRIPTION: Shows how to receive and deserialize a JSON object in a Ktor POST route handler using ContentNegotiation plugin.

LANGUAGE: kotlin
CODE:
post("/customer") {
    val customer = call.receive<Customer>()
    customerStorage.add(customer)
    call.respondText("Customer stored correctly", status = HttpStatusCode.Created)
}

----------------------------------------

TITLE: Accessing JWT Settings in Kotlin (RS256)
DESCRIPTION: Demonstrates how to access JWT settings from the configuration file in Kotlin code for RS256 algorithm.

LANGUAGE: Kotlin
CODE:
val config = HoconApplicationConfig(ConfigFactory.load())
val jwtAudience = config.property("jwt.audience").getString()
val jwtDomain = config.property("jwt.domain").getString()
val jwtRealm = config.property("jwt.realm").getString()

----------------------------------------

TITLE: Creating HttpClient with Default Engine
DESCRIPTION: Demonstrates creating an HttpClient without specifying an engine, allowing automatic engine selection based on available dependencies.

LANGUAGE: kotlin
CODE:
val client = HttpClient()

----------------------------------------

TITLE: Defining Database Model with Exposed Table
DESCRIPTION: Creates a database table definition for Articles using Exposed's Table class, defining columns for id, title, and body.

LANGUAGE: kotlin
CODE:
package com.example.models

import org.jetbrains.exposed.sql.*

data class Article(
    val id: Int,
    val title: String,
    val body: String
)

object Articles : Table() {
    val id = integer("id").autoIncrement()
    val title = varchar("title", 128)
    val body = varchar("body", 1024)

    override val primaryKey = PrimaryKey(id)
}

----------------------------------------

TITLE: Basic WWW-Authenticate Header Example
DESCRIPTION: Example of a WWW-Authenticate header used in Basic Authentication to protect a route.

LANGUAGE: text
CODE:
WWW-Authenticate: Basic realm="Access to the '/' path", charset="UTF-8"

----------------------------------------

TITLE: Configuring Custom CORS Headers
DESCRIPTION: Configuration for allowing custom prefixed headers in CORS requests

LANGUAGE: kotlin
CODE:
install(CORS) {
    allowHeadersPrefixed("custom-")
}

----------------------------------------

TITLE: Applying Rate Limiting to Routes in Ktor
DESCRIPTION: Demonstrates how to apply rate limiting rules to specific routes using the rateLimit method.

LANGUAGE: kotlin
CODE:
routing {
    rateLimit {
        get("/limited") {
            call.respondText("Limited route")
        }
    }
}

----------------------------------------

TITLE: Basic HTML Response in Ktor
DESCRIPTION: Demonstrates how to send a basic HTML response using Ktor's HTML DSL with a simple page structure including title and heading.

LANGUAGE: html
CODE:
<html>
<head>
    <title>Ktor</title>
</head>
<body>
<h1>Hello from Ktor!</h1>
</body>
</html>

----------------------------------------

TITLE: Defining a Ktor Module in Kotlin
DESCRIPTION: This snippet demonstrates how to define a Ktor module as an extension function of the Application class. It creates a module that handles GET requests to the '/module1' path.

LANGUAGE: kotlin
CODE:
fun Application.module1() {
    routing {
        get("/module1") {
            call.respondText("Hello from module1")
        }
    }
}

----------------------------------------

TITLE: HikariCP Connection Pool Implementation
DESCRIPTION: Implementation of database connection pooling using HikariCP, including configuration of pool size and transaction settings.

LANGUAGE: kotlin
CODE:
private fun createHikariDataSource(
    driverClassName: String,
    jdbcURL: String
) = HikariDataSource().apply {
    maximumPoolSize = 3
    isAutoCommit = false
    transactionIsolation = "TRANSACTION_REPEATABLE_READ"
    this.driverClassName = driverClassName
    jdbcUrl = jdbcURL
}

----------------------------------------

TITLE: Validating Users with UserHashedTableAuth in Ktor
DESCRIPTION: This code demonstrates how to use UserHashedTableAuth to validate user credentials in the basic authentication provider's validate function in Ktor.

LANGUAGE: kotlin
CODE:
install(Authentication) {
    basic("auth-basic") {
        realm = "Access to the '/' path"
        validate { credentials ->
            hashedUserTable.authenticate(credentials)
        }
    }
}

----------------------------------------

TITLE: Ktor Application Module Setup
DESCRIPTION: Demonstrates how to set up the main application module by installing route configurations.

LANGUAGE: kotlin
CODE:
fun Application.module() {
    // Init....
    customerRoutes()
    orderRoutes()
}

----------------------------------------

TITLE: Installing Basic Authentication Provider in Ktor
DESCRIPTION: This snippet demonstrates how to install the basic authentication provider in a Ktor server application. It shows the basic structure of the installation block where further configuration can be added.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.auth.*
// ...
install(Authentication) {
    basic {
        // Configure basic authentication
    }
}

----------------------------------------

TITLE: Clearing Session in Ktor
DESCRIPTION: Shows how to clear a session, typically used when a user logs out.

LANGUAGE: kotlin
CODE:
get("/session/clear") {
    call.sessions.clear<UserSession>()
    call.respondText("Session cleared")
}

----------------------------------------

TITLE: Named Rate Limiter Route Configuration
DESCRIPTION: Shows how to apply named rate limiters to specific routes for more granular control.

LANGUAGE: kotlin
CODE:
routing {
    rateLimit(RateLimitName("protected")) {
        get("/protected") {
            call.respondText("Protected route")
        }
    }
}

----------------------------------------

TITLE: Serving Static Resources from Classpath in Ktor
DESCRIPTION: This snippet demonstrates how to serve content from the classpath using the staticResources() function in Ktor. It maps requests from '/resources' to the 'static' package in application resources.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.http.content.*

fun Application.configureRouting() {
    routing {
        staticResources("/resources", "static")
    }
}

----------------------------------------

TITLE: Configuring Logback with STDOUT Appender in XML
DESCRIPTION: This XML configuration sets up Logback with a STDOUT appender to output logs to the console. It defines the root logger level and appender settings.

LANGUAGE: xml
CODE:
<configuration>
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>
    <root level="trace">
        <appender-ref ref="STDOUT"/>
    </root>
    <logger name="org.eclipse.jetty" level="INFO"/>
    <logger name="io.netty" level="INFO"/>
</configuration>

----------------------------------------

TITLE: Accessing Query Parameters in Ktor
DESCRIPTION: Illustrates how to access query parameters in a Ktor route handler. The code retrieves the 'price' query parameter and uses it to sort products.

LANGUAGE: kotlin
CODE:
get("/products") {
    val sortParameter = call.request.queryParameters["price"]
    val products = getProducts(sortParameter)
    call.respond(products)
}

----------------------------------------

TITLE: Sending Plain Text Response in Ktor
DESCRIPTION: Demonstrates how to send a plain text response using the call.respondText function.

LANGUAGE: kotlin
CODE:
get("/") {
    call.respondText("Hello, world!")
}

----------------------------------------

TITLE: Generating JWT Token (RS256)
DESCRIPTION: Shows how to generate a JWT token using the RS256 algorithm in a login route.

LANGUAGE: Kotlin
CODE:
post("/login") {
    val user = call.receive<User>()
    val keySpecPKCS8 = keySpec("private_key.pem")
    val privateKey = KeyFactory.getInstance("RSA").generatePrivate(keySpecPKCS8) as RSAPrivateKey
    val token = JWT.create()
        .withAudience(jwtAudience)
        .withIssuer(jwtIssuer)
        .withClaim("username", user.username)
        .withExpiresAt(Date(System.currentTimeMillis() + 60000))
        .sign(Algorithm.RSA256(null, privateKey))
    call.respond(hashMapOf("token" to token))
}

----------------------------------------

TITLE: Creating Embedded Netty Server in Kotlin
DESCRIPTION: Demonstrates how to create and start an embedded Netty server using Ktor in Kotlin. It sets up a server on port 8080 and configures a simple route.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*
import io.ktor.server.response.*
import io.ktor.server.routing.*

fun main() {
    embeddedServer(Netty, port = 8080) {
        routing {
            get("/") {
                call.respondText("Hello, world!")
            }
        }
    }.start(wait = true)
}

----------------------------------------

TITLE: Defining Session Data Class in Kotlin
DESCRIPTION: Creates a data class to store session information, including a session ID and page view count.

LANGUAGE: kotlin
CODE:
data class UserSession(val id: String, val count: Int)

----------------------------------------

TITLE: Receiving Customer Object in Ktor Route
DESCRIPTION: Demonstrates how to receive a Customer object in a Ktor route and respond with a success message.

LANGUAGE: kotlin
CODE:
post("/customer") {
    val customer = call.receive<Customer>()
    call.respondText("Successfully received $customer")
}

----------------------------------------

TITLE: Compressing Request Body with ContentEncoding
DESCRIPTION: Example showing how to compress the request body using gzip encoding before sending to the server.

LANGUAGE: kotlin
CODE:
import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.compression.*
//...
val client = HttpClient(CIO) {
    install(ContentEncoding)
}
client.post("/upload") {
    compress("gzip")
    setBody(someLongBody)
}

----------------------------------------

TITLE: Configuring JSON WebSocket Serialization with kotlinx.serialization
DESCRIPTION: Shows how to configure WebSockets with JSON serialization using kotlinx.serialization library. Creates an HttpClient with WebSockets plugin and configures KotlinxWebsocketSerializationConverter with JSON format.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    install(WebSockets) {
        contentConverter = KotlinxWebsocketSerializationConverter(Json)
    }
}

----------------------------------------

TITLE: Custom LocalDate Converter Implementation
DESCRIPTION: Example showing how to implement a custom converter for LocalDate type with both encode and decode functions.

LANGUAGE: kotlin
CODE:
install(DataConversion) {
    convert<LocalDate> { // this: Configuration<LocalDate>
        val format = SimpleDateFormat("yyyy-MM-dd")

        decode { values -> // converter: (values: List<String>) -> Any?
            values.singleOrNull()?.let { text ->
                format.parse(text).toInstant().atZone(ZoneId.systemDefault()).toLocalDate()
            }
        }

        encode { value -> // converter: (value: Any?) -> List<String>
            when (value) {
                null -> emptyList()
                is LocalDate -> listOf(format.format(Date.from(value
                    .atStartOfDay(ZoneId.systemDefault())
                    .toInstant())))
                else -> throw DataConversionException("Cannot convert $value as LocalDate")
            }
        }
    }
}

----------------------------------------

TITLE: Configuring JWT Settings in application.conf (HS256)
DESCRIPTION: Shows how to configure JWT settings for HS256 algorithm in the application.conf file.

LANGUAGE: HOCON
CODE:
jwt {
    secret = "secret"
    issuer = "http://0.0.0.0:8080/"
    audience = "http://0.0.0.0:8080/hello"
    realm = "Access to 'hello'"
}

----------------------------------------

TITLE: Receiving Raw Payload as ByteReadChannel in Ktor
DESCRIPTION: Illustrates how to receive a raw payload as a ByteReadChannel in a Ktor POST route handler, enabling asynchronous reading of byte sequences.

LANGUAGE: kotlin
CODE:
post("/") {
    val channel = call.receiveChannel()
    val text = channel.readUTF8Line()
    println("Received text: $text")
    call.respondText("OK")
}

----------------------------------------

TITLE: Signing Session Data in Ktor
DESCRIPTION: Shows how to sign session data to prevent modification, using SessionTransportTransformerMessageAuthentication.

LANGUAGE: kotlin
CODE:
install(Sessions) {
    cookie<UserSession>("user_session") {
        transform(SessionTransportTransformerMessageAuthentication(
            key = hex("6819b57a326945c1968f45236589"),
            oldKeys = listOf(hex("0e020205080d0507010c05020f0e01"))
        ))
    }
}

----------------------------------------

TITLE: Grouping Routes in Ktor
DESCRIPTION: Demonstrates different ways to group multiple route handlers, including grouping by verb functions and by paths using the route function.

LANGUAGE: Kotlin
CODE:
routing {
    get("/customer/{id}") {

    }
    post("/customer") {

    }
    get("/order") {

    }
    get("/order/{id}") {
    
    }
}

LANGUAGE: Kotlin
CODE:
routing {
    route("/customer") {
        get {

        }
        post {

        }
    }
    route("/order") {
        get {

        }
        get("/{id}") {

        }
    }
}

----------------------------------------

TITLE: Sending File Response in Ktor
DESCRIPTION: Demonstrates how to send a file response and make it downloadable by setting the Content-Disposition header.

LANGUAGE: kotlin
CODE:
routing {
    get("/download") {
        val file = File("files/ktor_logo.png")
        if (file.exists()) {
            call.response.header(
                HttpHeaders.ContentDisposition,
                ContentDisposition.Attachment.withParameter(ContentDisposition.Parameters.FileName, "ktor_logo.png").toString()
            )
            call.respondFile(file)
        } else {
            call.respondText("File not found", status = HttpStatusCode.NotFound)
        }
    }
}

----------------------------------------

TITLE: Implementing Call Handling in Custom Plugin - Kotlin
DESCRIPTION: Shows how to intercept the ApplicationCallPipeline.Plugins phase to add custom headers to responses.

LANGUAGE: kotlin
CODE:
class CustomHeader() {
    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {
        override val key = AttributeKey<CustomHeader>("CustomHeader")
        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomHeader {
            val plugin = CustomHeader()
            pipeline.intercept(ApplicationCallPipeline.Plugins) {
                call.response.header("X-Custom-Header", "Hello, world!")
            }
            return plugin
        }
    }
}

----------------------------------------

TITLE: Configurable Custom Header Plugin Implementation
DESCRIPTION: Shows how to create a plugin with configurable header name and value, demonstrating plugin configuration patterns.

LANGUAGE: kotlin
CODE:
class CustomHeaderConfig {
    var headerName: String = "X-Custom-Header"
    var headerValue: String = "HeaderValue"
}

----------------------------------------

TITLE: Validating Byte Array in Ktor
DESCRIPTION: Demonstrates how to validate a byte array request body using custom validation rules in the RequestValidation plugin.

LANGUAGE: kotlin
CODE:
install(RequestValidation) {
    validate("byte-array-validator") { body: ByteArray ->
        val maxLength = 1024 * 1024
        when {
            body.isEmpty() -> ValidationResult.Invalid("Byte array can't be empty")
            body.size > maxLength -> ValidationResult.Invalid("Byte array length can't be greater than $maxLength")
            else -> ValidationResult.Valid
        }
    }
}

----------------------------------------

TITLE: Configuring Custom Index File for Static Resources in Ktor
DESCRIPTION: This snippet shows how to set a custom index file for static resources using the index parameter in Ktor. When '/custom' is requested, Ktor will serve '/custom_index.html'.

LANGUAGE: kotlin
CODE:
staticResources("/custom", "static") {
    index("custom_index.html")
}

----------------------------------------

TITLE: Handling Multipart Form Data in Ktor
DESCRIPTION: Illustrates how to handle multipart form data, including file uploads, in a Ktor POST route handler using receiveMultipart().

LANGUAGE: kotlin
CODE:
post("/upload") {
    val multipart = call.receiveMultipart(formFieldLimit = 100.megabytes)
    multipart.forEachPart { part ->
        when (part) {
            is PartData.FormItem -> {
                println("Form item: ${part.name} = ${part.value}")
            }
            is PartData.FileItem -> {
                val fileName = part.originalFileName ?: return@forEachPart
                val fileBytes = part.streamProvider().readBytes()
                File("uploads/$fileName").writeBytes(fileBytes)
            }
            else -> {}
        }
        part.dispose()
    }
    call.respondText("File uploaded successfully")
}

----------------------------------------

TITLE: Receiving Raw Payload as String in Ktor
DESCRIPTION: Demonstrates how to receive a raw payload as a String in a Ktor POST route handler using call.receive<String>() or receiveText().

LANGUAGE: kotlin
CODE:
post("/") {
    val text = call.receiveText()
    println("Received text: $text")
    call.respondText("OK")
}

----------------------------------------

TITLE: Configuring Basic Retry Policy in HttpRequestRetry
DESCRIPTION: This snippet shows how to configure a basic retry policy using HttpRequestRetry, including retrying on server errors and setting exponential delay.

LANGUAGE: kotlin
CODE:
install(HttpRequestRetry) {
    retryOnServerErrors(maxRetries = 5)
    exponentialDelay()
}

----------------------------------------

TITLE: Managing Multiple WebSocket Sessions with SharedFlow
DESCRIPTION: Demonstrates how to handle multiple WebSocket sessions using Kotlin's SharedFlow for efficient broadcasting.

LANGUAGE: kotlin
CODE:
private val messageFlow = MutableSharedFlow<String>()

LANGUAGE: kotlin
CODE:
webSocket("/chat") {
    try {
        coroutineScope {
            launch {
                messageFlow.collect { message ->
                    if (outgoing.isClosedForSend) return@collect
                    outgoing.send(Frame.Text(message))
                }
            }
            for (frame in incoming) {
                when (frame) {
                    is Frame.Text -> {
                        runCatching {
                            messageFlow.emit(frame.readText())
                        }
                    }
                    else -> continue
                }
            }
        }
    } catch (e: Exception) {
        println(e.localizedMessage)
    }
}

----------------------------------------

TITLE: Session Configuration in Ktor
DESCRIPTION: Demonstrates how to install and configure the Sessions plugin with cookie settings and expiration time.

LANGUAGE: kotlin
CODE:
install(Sessions) {
    cookie<UserSession>("user_session") {
        cookie.path = "/"
        cookie.maxAgeInSeconds = 3600
    }
}

----------------------------------------

TITLE: HTML Form Generation in Ktor
DESCRIPTION: Shows how to create an HTML login form using Ktor's HTML DSL, including input fields for username and password.

LANGUAGE: html
CODE:
<html>
<body>
<form action="/login" enctype="application/x-www-form-urlencoded" method="post">
    <p>Username:<input type="text" name="username"></p>
    <p>Password:<input type="password" name="password"></p>
    <p><input type="submit" value="Login"></p>
</form>
</body>
</html>

----------------------------------------

TITLE: Testing Ktor Client with MockEngine using Gradle
DESCRIPTION: This command runs the tests for the Ktor client testing sample using Gradle. It executes the test task for the client-testing-mock module.

LANGUAGE: bash
CODE:
./gradlew :client-testing-mock:test

----------------------------------------

TITLE: Installing DefaultRequest Plugin in Ktor Client
DESCRIPTION: Shows how to install the DefaultRequest plugin in a Ktor HTTP client configuration block using the install function.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    install(DefaultRequest)
}

----------------------------------------

TITLE: Basic Authentication Setup
DESCRIPTION: Configuration of basic authentication provider for LDAP integration in Ktor.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.auth.ldap.*
//...
install(Authentication) {
    basic {
        validate { credentials ->
            // Authenticate an LDAP user
        }
    }
}

----------------------------------------

TITLE: Validating String Request Body in Ktor
DESCRIPTION: Shows how to validate a String request body using the RequestValidation plugin in Ktor. It checks if the body is not empty and has a minimum length.

LANGUAGE: kotlin
CODE:
install(RequestValidation) {
    validate<String> { body ->
        if (body.isEmpty()) {
            ValidationResult.Invalid("Body can't be empty")
        } else ValidationResult.Valid
    }
}

----------------------------------------

TITLE: Configuring Compression Priorities in Ktor
DESCRIPTION: This example demonstrates how to set priorities for different compression algorithms in the Compression plugin.

LANGUAGE: kotlin
CODE:
install(Compression) {
    gzip {
        priority = 0.9
    }
    deflate {
        priority = 1.0
    }
}

----------------------------------------

TITLE: Accessing Path Parameters in Ktor Routes
DESCRIPTION: Demonstrates how to access path parameters within a route handler using the call.parameters property.

LANGUAGE: Kotlin
CODE:
get("/user/{login}") {
    val login = call.parameters["login"] ?: ""
    call.respondText("Hello, $login!")
}

----------------------------------------

TITLE: Configuring SSL in Ktor Using Embedded Server
DESCRIPTION: This Kotlin code snippet shows how to configure SSL in a Ktor server using the embeddedServer function. It demonstrates setting up a custom environment with SSL settings using the sslConnector function.

LANGUAGE: kotlin
CODE:
import io.ktor.network.tls.certificates.*
import io.ktor.server.application.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*
import java.io.*
import java.security.*

fun main() {
    val keyStoreFile = File("build/temporary.jks")
    if (!keyStoreFile.exists()) {
        keyStoreFile.parentFile.mkdirs()
        val keyStore = buildKeyStore {
            certificate("sampleAlias") {
                password = "foobar"
                domains = listOf("127.0.0.1", "0.0.0.0", "localhost")
            }
        }
        keyStore.saveToFile(keyStoreFile, "123456")
    }
    val environment = applicationEngineEnvironment {
        connector {
            port = 8080
        }
        sslConnector(
            keyStore = KeyStore.getInstance(keyStoreFile, "123456".toCharArray()),
            keyAlias = "sampleAlias",
            keyStorePassword = { "123456".toCharArray() },
            privateKeyPassword = { "foobar".toCharArray() }) {
            port = 8443
            keyStorePath = keyStoreFile
        }
        module(Application::module)
    }
    embeddedServer(Netty, environment).start(wait = true)
}

----------------------------------------

TITLE: Configuring In-Memory Session Storage in Ktor
DESCRIPTION: Shows how to configure in-memory storage for session data on the server side using SessionStorageMemory.

LANGUAGE: kotlin
CODE:
cookie<UserSession>("user_session") {
    storage = SessionStorageMemory()
}

----------------------------------------

TITLE: Setting Custom Status Code in Ktor Response
DESCRIPTION: Shows how to set a custom status code for a response using ApplicationResponse.status.

LANGUAGE: kotlin
CODE:
get("/") {
    call.response.status(HttpStatusCode(418, "I'm a tea pot"))
}

----------------------------------------

TITLE: Creating Custom Monitoring Plugin in Ktor
DESCRIPTION: Implements a custom plugin to handle application lifecycle events using the MonitoringEvent hook.

LANGUAGE: kotlin
CODE:
val ApplicationMonitoringPlugin = createApplicationPlugin(name = "ApplicationMonitoringPlugin") {
    environment.monitor.subscribe(ApplicationStarted) {
        environment.log.info("Plugin is notified that Application is started")
    }
    environment.monitor.subscribe(ApplicationStopped) {
        environment.log.info("Plugin is notified that Application is stopped")
    }
    onResponseSent { call ->
        if (call.response.status()?.value == 404) {
            application.environment.monitor.raise(NotFoundEvent, call)
        }
    }
}

----------------------------------------

TITLE: Creating TCP Server Socket in Ktor
DESCRIPTION: Shows how to create a TCP server socket using SelectorManager and bind it to a specific port.

LANGUAGE: kotlin
CODE:
val selectorManager = SelectorManager(Dispatchers.IO)
val serverSocket = aSocket(selectorManager).tcp().bind("127.0.0.1", 9002)

----------------------------------------

TITLE: Configuring Directory-based Session Storage in Ktor
DESCRIPTION: Demonstrates how to set up directory-based storage for session data using directorySessionStorage.

LANGUAGE: kotlin
CODE:
header<CartSession>("cart_session") {
    storage = directorySessionStorage(File("build/.sessions"))
}

----------------------------------------

TITLE: Configuring CORS Headers
DESCRIPTION: Configuration for allowing specific headers in CORS requests

LANGUAGE: kotlin
CODE:
install(CORS) {
    allowHeader(HttpHeaders.ContentType)
    allowHeader(HttpHeaders.Authorization)
}

----------------------------------------

TITLE: Configuring CORS HTTP Methods
DESCRIPTION: Configuration for allowing specific HTTP methods in CORS requests

LANGUAGE: kotlin
CODE:
install(CORS) {
    allowMethod(HttpMethod.Options)
    allowMethod(HttpMethod.Put)
    allowMethod(HttpMethod.Patch)
    allowMethod(HttpMethod.Delete)
}

----------------------------------------

TITLE: Installing Bearer Authentication in Ktor
DESCRIPTION: This snippet shows how to install the bearer authentication provider in a Ktor application. It includes importing necessary packages and using the 'bearer' function inside the Authentication installation block.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.auth.*
// ...
install(Authentication) {
    bearer {
        // Configure bearer authentication
    }
}

----------------------------------------

TITLE: JSON Request Testing with ContentNegotiation
DESCRIPTION: Shows how to test JSON endpoints by configuring a test client with ContentNegotiation plugin and making POST requests.

LANGUAGE: kotlin
CODE:
testApplication {
    val client = createClient {
        install(ContentNegotiation) {
            json()
        }
    }
    val response = client.post("/customer") {
        contentType(ContentType.Application.Json)
        setBody(Customer("Jet", "Brains"))
    }
    assertEquals(HttpStatusCode.Created, response.status)
}

----------------------------------------

TITLE: Setting Session Content in Ktor Route Handler
DESCRIPTION: Shows how to set session content for a specific route using the call.sessions property.

LANGUAGE: kotlin
CODE:
get("/session/increment") {
    val session = call.sessions.get<UserSession>() ?: UserSession(id = generateNonce(), count = 0)
    call.sessions.set(session.copy(count = session.count + 1))
    call.respondText("Counter is ${session.count}. Refresh to increment.")
}

----------------------------------------

TITLE: Configuring CORS Credentials
DESCRIPTION: Configuration for allowing credentials in CORS requests

LANGUAGE: kotlin
CODE:
install(CORS) {
    allowCredentials = true
}

----------------------------------------

TITLE: Configuring Platform-Specific Ktor HTTP Client Engine
DESCRIPTION: Shows how to create and configure a Ktor HTTP client with platform-specific engine settings, specifically for Android platform configuration.

LANGUAGE: kotlin
CODE:


----------------------------------------

TITLE: Adding SLF4J Android Dependency
DESCRIPTION: Gradle dependency configuration for adding SLF4J Android logging library.

LANGUAGE: kotlin
CODE:
implementation("%group_id%:%artifact_name%:$%version%")

LANGUAGE: groovy
CODE:
implementation "%group_id%:%artifact_name%:$%version%"

----------------------------------------

TITLE: Handling Redirects in Ktor
DESCRIPTION: Demonstrates how to generate a redirection response using the respondRedirect function.

LANGUAGE: kotlin
CODE:
get("/") {
    call.respondRedirect("/moved", permanent = true)
}

get("/moved") {
    call.respondText("Moved content")
}

----------------------------------------

TITLE: Defining a Comprehensive Resource Class for CRUD Operations in Kotlin
DESCRIPTION: This snippet shows a complete resource class structure for CRUD operations on articles, including nested classes for various endpoints.

LANGUAGE: kotlin
CODE:
@Resource("/articles")
class Articles(val sort: String? = "new") {
    @Resource("new")
    class New(val parent: Articles = Articles())

    @Resource("{id}")
    class Id(val parent: Articles = Articles(), val id: Long) {
        @Resource("edit")
        class Edit(val parent: Id)
    }
}

----------------------------------------

TITLE: Protecting Routes with Session Authentication
DESCRIPTION: Shows how to protect routes using session authentication and access the authenticated principal.

LANGUAGE: kotlin
CODE:
authenticate("auth-session") {
    get("/hello") {
        val userSession = call.principal<UserSession>()
        call.respondText("Hello, ${userSession?.name}!")
    }
}

----------------------------------------

TITLE: Installing Auth Plugin in Ktor Client (Kotlin)
DESCRIPTION: This snippet demonstrates how to install the Auth plugin in a Ktor client configuration block. It requires the io.ktor:ktor-client-auth dependency.

LANGUAGE: kotlin
CODE:
import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.auth.*
//...
val client = HttpClient(CIO) {
    install(Auth) {
        // Configure authentication
    }
}

----------------------------------------

TITLE: Serving Static Files from Folders in Ktor
DESCRIPTION: This snippet demonstrates how to serve static files from a local filesystem using the staticFiles() function in Ktor. It maps requests from '/resources' to the 'files' folder in the current working directory.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.http.content.*

fun Application.configureRouting() {
    routing {
        staticFiles("/resources", File("files"))
    }
}

----------------------------------------

TITLE: Installing Auth Plugin in Ktor Client (Kotlin)
DESCRIPTION: This snippet demonstrates how to install the Auth plugin in a Ktor client configuration block. It requires the io.ktor:ktor-client-auth dependency.

LANGUAGE: kotlin
CODE:
import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.auth.*
//...
val client = HttpClient(CIO) {
    install(Auth) {
        // Configure authentication
    }
}

----------------------------------------

TITLE: Accessing Path Parameters in Ktor
DESCRIPTION: Shows how to access path parameters in a Ktor route handler. The example demonstrates retrieving the 'login' parameter from the URL path.

LANGUAGE: kotlin
CODE:
routing {
    get("/user/{login}") {
        val login = call.parameters["login"]
        call.respondText("User: $login")
    }
}

----------------------------------------

TITLE: Configuring Gson WebSocket Serialization
DESCRIPTION: Shows how to register a Gson serializer for WebSockets using GsonWebsocketContentConverter.

LANGUAGE: kotlin
CODE:
import io.ktor.serialization.gson.*

install(WebSockets) {
    contentConverter = GsonWebsocketContentConverter()
}

----------------------------------------

TITLE: Accessing Path Parameters in Ktor
DESCRIPTION: Shows how to access path parameters in a Ktor route handler. The example demonstrates retrieving the 'login' parameter from the URL path.

LANGUAGE: kotlin
CODE:
routing {
    get("/user/{login}") {
        val login = call.parameters["login"]
        call.respondText("User: $login")
    }
}

----------------------------------------

TITLE: Configuring Module Loading in Ktor Test Application
DESCRIPTION: Example showing how to explicitly load application modules in a Ktor test environment using the application function.

LANGUAGE: kotlin
CODE:
testApplication {
    application {
        module1()
        module2()
    }
}

----------------------------------------

TITLE: Getting and Modifying Session Content in Ktor
DESCRIPTION: Demonstrates how to retrieve session content, modify it, and set the updated session.

LANGUAGE: kotlin
CODE:
get("/session/increment") {
    val session = call.sessions.get<UserSession>()
    if (session != null) {
        call.sessions.set(session.copy(count = session.count + 1))
        call.respondText("Counter is ${session.count}. Refresh to increment.")
    } else {
        call.respondText("Session not found")
    }
}

----------------------------------------

TITLE: Customizing OpenAPI Generation Settings in Ktor
DESCRIPTION: Demonstrates how to customize OpenAPI documentation generation settings within the openAPI configuration block.

LANGUAGE: kotlin
CODE:
openAPI(path = "/documentation") {
    swaggerFile = "openapi/documentation.yaml"
    codegen = StaticHtml2Codegen()
}

----------------------------------------

TITLE: Handling User Login and Session Creation
DESCRIPTION: Demonstrates how to handle form-based login and create a user session.

LANGUAGE: kotlin
CODE:
post("/login") {
    val formParameters = call.receiveParameters()
    val username = formParameters["username"] ?: return@post call.respondRedirect("/login")
    call.sessions.set(UserSession(username))
    call.respondRedirect("/hello")
}

----------------------------------------

TITLE: Configuring JSON Serializer with Custom Settings
DESCRIPTION: Example of configuring kotlinx.serialization JSON serializer with custom settings like pretty printing and lenient parsing.

LANGUAGE: kotlin
CODE:
install(ContentNegotiation) {
    json(Json {
        prettyPrint = true
        isLenient = true
        ignoreUnknownKeys = true
    })
}

----------------------------------------

TITLE: Handling Specific Exceptions with StatusPages in Kotlin
DESCRIPTION: Configures responses for specific exceptions like AuthenticationException and AuthorizationException.

LANGUAGE: kotlin
CODE:
install(StatusPages) {
    exception<AuthenticationException> { call, cause ->
        call.respond(HttpStatusCode.Unauthorized)
    }
    exception<AuthorizationException> { call, cause ->
        call.respond(HttpStatusCode.Forbidden)
    }
}

----------------------------------------

TITLE: Configuring Basic Authentication in Ktor Client (Kotlin)
DESCRIPTION: This snippet shows how to configure basic authentication within the Auth plugin installation block. It allows setting up the authentication realm.

LANGUAGE: kotlin
CODE:
install(Auth) {
    basic {
        realm = "Access to the '/' path"
        // ...
    }
}

----------------------------------------

TITLE: Configuring Ktor Modules in application.yaml
DESCRIPTION: This snippet demonstrates how to configure Ktor modules in the application.yaml file. It shows the YAML syntax for specifying fully qualified module names to load multiple modules from different packages.

LANGUAGE: yaml
CODE:
ktor:
  application:
    modules:
      - com.example.ApplicationKt.module1
      - com.example.ApplicationKt.module2
      - org.sample.SampleKt.module3

----------------------------------------

TITLE: Configuring File Extension Fallbacks for Static Resources in Ktor
DESCRIPTION: This snippet demonstrates how to add file extension fallbacks when serving static resources in Ktor. It allows serving 'index.html' when '/index' is requested.

LANGUAGE: kotlin
CODE:
staticResources("/", "static") {
    extensions("html")
}

----------------------------------------

TITLE: Transforming Request Body in Ktor Plugin
DESCRIPTION: Shows how to use onCallReceive handler to transform data received from the client, adding 1 to an integer value.

LANGUAGE: Kotlin
CODE:
val DataTransformationPlugin = createApplicationPlugin(name = "DataTransformationPlugin") {
    onCallReceive { request ->
        transformBody { data ->
            when (request.requestedType) {
                Int::class -> {
                    val body = data.toByteArray().toString(Charsets.UTF_8).toInt()
                    body + 1
                }
                else -> data
            }
        }
    }
}

----------------------------------------

TITLE: Applying Custom Modifications to Static File Responses in Ktor
DESCRIPTION: This snippet shows how to apply custom modifications to the response of static file requests in Ktor. It adds a custom header to the response.

LANGUAGE: kotlin
CODE:
staticFiles("/", File("files")) {
    modify { file, call ->
        call.response.headers.append("X-CustomHeader", "Some Value")
    }
}

----------------------------------------

TITLE: Sending Serialized Object Response in Ktor
DESCRIPTION: Shows how to send a serialized data object response using the call.respond function with ContentNegotiation plugin.

LANGUAGE: kotlin
CODE:
get("/customer/{id}") {
    val id = call.parameters["id"] ?: return@get call.respond(HttpStatusCode.BadRequest)
    val customer = customerStorage.find { it.id == id } ?: return@get call.respondText(
        "No customer with id $id",
        status = HttpStatusCode.NotFound
    )
    call.respond(customer)
}

----------------------------------------

TITLE: Accessing Logger in Ktor Application Module
DESCRIPTION: This Kotlin snippet demonstrates how to access and use the Logger instance inside a Ktor application module. It shows logging a message when the application starts.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*

fun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)

fun Application.module() {
    log.info("Application starting...")
    // ...
}

----------------------------------------

TITLE: Configuring JSON Serializer with Custom Settings in Kotlin
DESCRIPTION: This code demonstrates how to configure the JSON serializer with custom settings using kotlinx.serialization in a Ktor server application.

LANGUAGE: kotlin
CODE:
install(ContentNegotiation) {
    json(Json {
        prettyPrint = true
        isLenient = true
    })
}

----------------------------------------

TITLE: Installing Compression Plugin in Ktor
DESCRIPTION: This snippet shows how to install the Compression plugin in a Ktor application, enabling gzip, deflate, and identity encoders on the server.

LANGUAGE: kotlin
CODE:
install(Compression) {
    gzip()
    deflate()
}

----------------------------------------

TITLE: Exchanging Authorization Code for Tokens in Ktor Client
DESCRIPTION: This snippet demonstrates how to exchange an authorization code for access and refresh tokens using a Ktor client. It includes setting up the client with ContentNegotiation and making a POST request to the token endpoint.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    install(ContentNegotiation) {
        json()
    }
}

val tokenInfo: TokenInfo = client.post("https://oauth2.googleapis.com/token") {
    formData {
        append("client_id", clientId)
        append("client_secret", clientSecret)
        append("code", authorizationCode)
        append("redirect_uri", "http://127.0.0.1:8080")
        append("grant_type", "authorization_code")
    }
}.body()

----------------------------------------

TITLE: Configuring Ktor Client for Google API Access with Bearer Authentication
DESCRIPTION: This snippet shows the complete configuration of a Ktor client for accessing Google APIs, including ContentNegotiation and Auth plugins with bearer authentication.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    install(ContentNegotiation) {
        json()
    }
    install(Auth) {
        bearer {
            loadTokens {
                bearerTokenStorage.last()
            }
            refreshTokens {
                val refreshTokenInfo: TokenInfo = client.post("https://oauth2.googleapis.com/token") {
                    markAsRefreshTokenRequest()
                    formData {
                        append("client_id", clientId)
                        append("client_secret", clientSecret)
                        append("refresh_token", oldTokens?.refreshToken ?: "")
                        append("grant_type", "refresh_token")
                    }
                }.body()
                bearerTokenStorage.add(BearerTokens(refreshTokenInfo.accessToken, oldTokens?.refreshToken ?: ""))
                bearerTokenStorage.last()
            }
            sendWithoutRequest { request ->
                request.url.host == "www.googleapis.com"
            }
        }
    }
}

----------------------------------------

TITLE: Enabling Automatic HEAD Responses for Static Routes in Ktor
DESCRIPTION: This snippet shows how to automatically respond to HEAD requests for every path inside a static route that has a GET defined in Ktor.

LANGUAGE: kotlin
CODE:
staticResources("/", "static") {
    enableAutoHeadResponse()
}

----------------------------------------

TITLE: Defining Custom Event in Ktor
DESCRIPTION: Creates a custom NotFoundEvent that accepts ApplicationCall as a parameter for handling 404 responses.

LANGUAGE: kotlin
CODE:
val NotFoundEvent = EventDefinition<ApplicationCall>()

----------------------------------------

TITLE: Configuring Ktor Servlet in web.xml for Tomcat/Jetty v10.x+
DESCRIPTION: XML configuration for registering Ktor servlet in web.xml file, specifying ServletApplicationEngine as the servlet class and setting up initialization parameters.

LANGUAGE: XML
CODE:
<servlet>
    <display-name>KtorServlet</display-name>
    <servlet-name>KtorServlet</servlet-name>
    <servlet-class>io.ktor.server.servlet.ServletApplicationEngine</servlet-class>
    <init-param>
        <param-name>io.ktor.ktor.config</param-name>
        <param-value>application.conf</param-value>
    </init-param>
    <async-supported>true</async-supported>
</servlet>

----------------------------------------

TITLE: Setting Cookie in Ktor Response
DESCRIPTION: Shows how to set a cookie in a response using ApplicationResponse.cookies.

LANGUAGE: kotlin
CODE:
get("/") {
    call.response.cookies.append("yummy_cookie", "choco")
}

----------------------------------------

TITLE: Running Packaged Ktor Application with Port Override
DESCRIPTION: Command to run a packaged Ktor application from a fat JAR file with a custom port configuration. Demonstrates command-line parameter override capability.

LANGUAGE: bash
CODE:
java -jar sample-app.jar -port=8080

----------------------------------------

TITLE: Creating CIO HTTP Client
DESCRIPTION: Shows how to create a basic HTTP client using the CIO engine

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO)

----------------------------------------

TITLE: Exposing CORS Headers
DESCRIPTION: Configuration for exposing custom headers to browsers in CORS responses

LANGUAGE: kotlin
CODE:
install(CORS) {
    exposeHeader("X-My-Custom-Header")
    exposeHeader("X-Another-Custom-Header")
}

----------------------------------------

TITLE: Configuring Ktor Plugin with Custom Parameters
DESCRIPTION: Shows how to create a configurable plugin that allows setting custom header name and value during installation.

LANGUAGE: Kotlin
CODE:
class CustomHeaderConfig {
    var headerName: String = "X-Custom-Header"
    var headerValue: String = "Default Value"
}

val CustomHeaderPlugin = createApplicationPlugin(name = "CustomHeaderPlugin", ::CustomHeaderConfig) {
    val headerName = pluginConfig.headerName
    val headerValue = pluginConfig.headerValue
    onCall { call ->
        call.response.headers.append(headerName, headerValue)
    }
}

LANGUAGE: Kotlin
CODE:
install(CustomHeaderPlugin) {
    headerName = "X-My-Header"
    headerValue = "My Header Value"
}

----------------------------------------

TITLE: Configuring SSL for CIO Engine in Ktor Client
DESCRIPTION: This code demonstrates how to configure HTTPS settings for the CIO engine in Ktor client using TLSConfigBuilder and TrustManager.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    engine {
        https {
            trustManager = SslSettings.getTrustManager()
            // Random() provides unpredictable data for key generation
            random = SecureRandom()
        }
    }
}

----------------------------------------

TITLE: Basic Rate Limiter Registration in Ktor
DESCRIPTION: Shows how to register a basic rate limiter that can be applied to specific routes.

LANGUAGE: kotlin
CODE:
register(RateLimitName("protected")) {
    rateLimiter(limit = 30, refillPeriod = 60.seconds)
}

----------------------------------------

TITLE: Installing Ktor Client Logging Plugin
DESCRIPTION: Basic setup for installing the Logging plugin in a Ktor HTTP client using CIO engine.

LANGUAGE: kotlin
CODE:
import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.logging.*
//...
val client = HttpClient(CIO) {
    install(Logging)
}

----------------------------------------

TITLE: X-Forwarded-For Header Example
DESCRIPTION: Demonstrates the format of the X-Forwarded-For header when a request goes through multiple proxies.

LANGUAGE: http
CODE:
X-Forwarded-For: <client>, <proxy1>, <proxy2>

----------------------------------------

TITLE: Creating a Simple Ktor Plugin
DESCRIPTION: Demonstrates how to create a basic Ktor plugin using createApplicationPlugin function and install it in the application.

LANGUAGE: Kotlin
CODE:
val SimplePlugin = createApplicationPlugin(name = "SimplePlugin") {
    onCall { call ->
        println("SimplePlugin is installed!")
    }
}

LANGUAGE: Kotlin
CODE:
fun Application.configureRouting() {
    install(SimplePlugin)
}

----------------------------------------

TITLE: Receiving JSON Response Data
DESCRIPTION: Shows how to receive and deserialize JSON response data into a typed object.

LANGUAGE: kotlin
CODE:
val customer: Customer = client.get("http://0.0.0.0:8080/customer").body()

----------------------------------------

TITLE: Installing Logging Plugin in HttpClient
DESCRIPTION: Demonstrates how to install and configure the Logging plugin for HTTP call logging.

LANGUAGE: kotlin
CODE:
val client = HttpClient() {
    install(Logging)
}

----------------------------------------

TITLE: Configuring MDC in Ktor CallLogging Plugin
DESCRIPTION: Demonstrates how to add context values to MDC (Mapped Diagnostic Context) using the CallLogging plugin. The example shows adding a query parameter to MDC for logging purposes.

LANGUAGE: kotlin
CODE:
install(CallLogging) {
    mdc("name-parameter") { call ->
        call.request.queryParameters["name"]
    }
}

----------------------------------------

TITLE: Adding Custom Headers in Ktor
DESCRIPTION: Shows how to add a custom HTTP header using the DefaultHeaders plugin by specifying the header name as a string value.

LANGUAGE: kotlin
CODE:
    install(DefaultHeaders) {
        header("Custom-Header", "Some value")
    }

----------------------------------------

TITLE: Configuring Default Response Validation in Ktor Client
DESCRIPTION: This snippet demonstrates how to enable default validation by setting the expectSuccess property to true in the client configuration. This will throw exceptions for non-2xx responses.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    expectSuccess = true
}

----------------------------------------

TITLE: Handling ApplicationStopped Event in Ktor
DESCRIPTION: Shows how to handle the ApplicationStopped event for resource cleanup when the application stops.

LANGUAGE: kotlin
CODE:
fun main() {
    environment.monitor.subscribe(ApplicationStopped) {
        resources.forEach { resource ->
            resource.close()
        }
    }
}

----------------------------------------

TITLE: Configuring Redirect Behavior in Ktor HTTP Client
DESCRIPTION: Shows how to disable automatic URL redirects in a Ktor HTTP client by setting the followRedirects property to false during client configuration. Only requires the ktor-client-core dependency.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    followRedirects = false
}

----------------------------------------

TITLE: Checking WebSocket Extension Negotiation Status
DESCRIPTION: Demonstrates how to check if a WebSocket extension is negotiated using extension and extensionOrNull methods.

LANGUAGE: kotlin
CODE:
webSocket("/echo") {
    val myExtension = extension(MyWebSocketExtension) // will throw if `MyWebSocketExtension` is not negotiated
    // or
    val myExtension = extensionOrNull(MyWebSocketExtension) ?: close() // will close the session if `MyWebSocketExtension` is not negotiated
}

----------------------------------------

TITLE: Exposing Prometheus Metrics Endpoint in Ktor
DESCRIPTION: Shows how to create a dedicated endpoint for exposing Prometheus metrics data for scraping.

LANGUAGE: kotlin
CODE:
val appMicrometerRegistry = PrometheusMeterRegistry(PrometheusConfig.DEFAULT)

fun Application.module() {
    install(MicrometerMetrics) {
        registry = appMicrometerRegistry
    }
    routing {
        get("/metrics") {
            call.respond(appMicrometerRegistry.scrape())
        }
    }
}

----------------------------------------

TITLE: Authorization Header Example
DESCRIPTION: Example of an Authorization header using digest authentication, demonstrating the format and required fields including username, realm, nonce, uri, algorithm, and response hash.

LANGUAGE: http
CODE:
Authorization: Digest username="jetbrains",
        realm="Access to the '/' path",
        nonce="e4549c0548886bc2",
        uri="/",
        algorithm=MD5,
        response="6299988bb4f05c0d8ad44295873858cf"

----------------------------------------

TITLE: Configuring Base URL in DefaultRequest
DESCRIPTION: Shows how to set a base URL that will be merged with request URLs for all client requests.

LANGUAGE: kotlin
CODE:
defaultRequest {
    url("https://ktor.io/docs/")
}

----------------------------------------

TITLE: Responding with FreeMarker Template
DESCRIPTION: Example of responding to a route with FreeMarker template content, demonstrating how to pass data to the template.

LANGUAGE: kotlin
CODE:
get("/") {
    val user = User("John Smith")
    call.respond(FreeMarkerContent("index.ftl", mapOf("user" to user)))
}

----------------------------------------

TITLE: Overriding Server Header in Ktor
DESCRIPTION: Demonstrates how to override the default Server header using the DefaultHeaders plugin. Note that the Date header cannot be overridden due to performance caching.

LANGUAGE: kotlin
CODE:
    install(DefaultHeaders) {
        header(HttpHeaders.Server, "Custom")
    }

----------------------------------------

TITLE: Implementing Persistent File Cache Storage in Ktor
DESCRIPTION: Demonstrates how to set up a persistent file-based cache storage for a Ktor client using FileStorage. This allows for cache persistence between application restarts.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    install(HttpCache) {
        publicStorage(FileStorage(File("build/cache")))
    }
}

----------------------------------------

TITLE: Implementing Frame Processing Methods
DESCRIPTION: Shows the implementation of methods for processing incoming and outgoing WebSocket frames.

LANGUAGE: kotlin
CODE:
    override fun processOutgoingFrame(frame: Frame): Frame {
        logger.log("Process outgoing frame: $frame")
        return frame
    }

    override fun processIncomingFrame(frame: Frame): Frame {
        logger.log("Process incoming frame: $frame")
        return frame
    }

----------------------------------------

TITLE: Creating a Resource Class with Query Parameter in Kotlin
DESCRIPTION: This example shows how to define a resource class with a query parameter 'sort' for the '/articles' path.

LANGUAGE: kotlin
CODE:
@Resource("/articles")
class Articles(val sort: String? = "new")

----------------------------------------

TITLE: Setting Main Class for Netty EngineMain in Gradle (Kotlin)
DESCRIPTION: Configures the main class for running a Ktor server with Netty EngineMain using Gradle with Kotlin DSL.

LANGUAGE: kotlin
CODE:
application {
    mainClass.set("io.ktor.server.netty.EngineMain")
}

----------------------------------------

TITLE: Configuring Charsets in Ktor HTTP Client
DESCRIPTION: Demonstrates how to configure character set handling in a Ktor HTTP client. Shows registration of UTF-8 and ISO-8859-1 charsets with quality parameters, and specification of default charsets for requests and responses.

LANGUAGE: kotlin
CODE:
val client = HttpClient(HttpClientEngine) {
    Charsets {
        // Allow using `UTF_8`.
        register(Charsets.UTF_8)

        // Allow using `ISO_8859_1` with quality 0.1.
        register(Charsets.ISO_8859_1, quality=0.1f)
        
        // Specify Charset to send request(if no charset in request headers).
        sendCharset = ...

        // Specify Charset to receive response(if no charset in response headers).
        responseCharsetFallback = ...
    }
}

----------------------------------------

TITLE: Installing DoubleReceive Plugin with CallLogging Configuration
DESCRIPTION: Shows how to install and configure the DoubleReceive plugin in conjunction with CallLogging plugin to enable request body logging.

LANGUAGE: kotlin
CODE:
install(CallLogging) {
    eventLog { call ->
        if (call.request.headers["X-Request-Id"] != null) {
            val message = call.receiveText()
            this.info("Request body: $message")
        }
    }
}

----------------------------------------

TITLE: Mustache Template Example for Ktor
DESCRIPTION: This HTML snippet shows a simple Mustache template used in a Ktor application. It displays a welcome message with a user's name.

LANGUAGE: html
CODE:
<h1>Hello, {{user.name}}!</h1>

----------------------------------------

TITLE: Serving Pre-compressed Static Files in Ktor
DESCRIPTION: This snippet demonstrates how to serve pre-compressed files to avoid dynamic compression in Ktor. It allows serving .br or .gz versions of files if available.

LANGUAGE: kotlin
CODE:
staticFiles("/", File("files")) {
    preCompressed(CompressedFileType.BROTLI, CompressedFileType.GZIP)
}

----------------------------------------

TITLE: Serving Static Content from ZIP Files in Ktor
DESCRIPTION: This snippet shows how to serve static content from a ZIP file using the staticZip() function in Ktor. It maps requests from the root URL '/' to the contents of the 'text-files.zip' file.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.http.content.*

fun Application.configureRouting() {
    routing {
        staticZip("/", File("text-files.zip"))
    }
}

----------------------------------------

TITLE: Setting Main Class for Netty EngineMain in Maven
DESCRIPTION: Specifies the main class for running a Ktor server with Netty EngineMain in a Maven project configuration.

LANGUAGE: xml
CODE:
<properties>
    <main.class>io.ktor.server.netty.EngineMain</main.class>
</properties>

----------------------------------------

TITLE: Ehcache Configuration and Implementation
DESCRIPTION: Implementation of caching layer using Ehcache, including cache manager setup and cache operations for article storage.

LANGUAGE: kotlin
CODE:
class DAOFacadeCacheImpl(
    private val delegate: DAOFacade,
    storagePath: String
) : DAOFacade {
    private val cacheManager = CacheManager.create()
    private val articlesCache = cacheManager.addCache(
        Cache(
            "articles",
            1000,
            false,
            false,
            600,
            600
        ).apply {
            bootstrapCacheLoaderFactory = BootstrapCacheLoaderFactory()
            setCacheEventListenerFactory(CacheEventListenerFactory())
        }
    ).also { it as Cache }.apply {
        diskStorePath = storagePath
    }

----------------------------------------

TITLE: Sample Metrics Output
DESCRIPTION: Example of metrics output when accessing the server, showing various counters, meters, and timers.

LANGUAGE: bash
CODE:
[DefaultDispatcher-worker-1] INFO  Application - Responding at http://0.0.0.0:8080
... type=COUNTER, name=ktor.calls.active, count=0
... type=METER, name=ktor.calls./(method:GET).200, count=6, m1_rate=1.2, m5_rate=1.2, m15_rate=1.2, mean_rate=0.98655785084844, rate_unit=events/second
... type=METER, name=ktor.calls./(method:GET).meter, count=6, m1_rate=1.2, m5_rate=1.2, m15_rate=1.2, mean_rate=0.9841134429134598, rate_unit=events/second
... type=METER, name=ktor.calls.exceptions, count=0, m1_rate=0.0, m5_rate=0.0, m15_rate=0.0, mean_rate=0.0, rate_unit=events/second
... type=METER, name=ktor.calls.status.200, count=6, m1_rate=1.2, m5_rate=1.2, m15_rate=1.2, mean_rate=0.9866015088545449, rate_unit=events/second
... type=TIMER, name=ktor.calls./(method:GET).timer, count=6, min=0.359683, max=14.213046, mean=2.691307542732234, stddev=5.099546889849414, p50=0.400967, p75=0.618972, p95=14.213046, p98=14.213046, p99=14.213046, p999=14.213046, m1_rate=1.2, m5_rate=1.2, m15_rate=1.2, mean_rate=0.9830677128229028, rate_unit=events/second, duration_unit=milliseconds
... type=TIMER, name=ktor.calls.duration, count=6, min=0.732149, max=33.735719, mean=6.238046092985701, stddev=12.169258340009847, p50=0.778864, p75=1.050454, p95=33.735719, p98=33.735719, p99=33.735719, p999=33.735719, m1_rate=0.2, m5_rate=0.2, m15_rate=0.2, mean_rate=0.6040311229887146, rate_unit=events/second, duration_unit=milliseconds

----------------------------------------

TITLE: Making Authenticated API Requests
DESCRIPTION: Function to make authenticated requests to Google API using the OAuth token

LANGUAGE: kotlin
CODE:
suspend fun getPersonalGreeting(client: HttpClient, token: String): String {
    return client.get("https://www.googleapis.com/oauth2/v2/userinfo") {
        headers {
            append(HttpHeaders.Authorization, "Bearer $token")
        }
    }.bodyAsText()
}

----------------------------------------

TITLE: Configuring SSL for Jetty Engine in Ktor Client
DESCRIPTION: This snippet illustrates how to enable SSL for the Jetty engine in Ktor client by creating an instance of SslContextFactory and passing SSLContext to it.

LANGUAGE: kotlin
CODE:
val client = HttpClient(Jetty) {
    engine {
        sslContextFactory = SslContextFactory.Client().apply {
            sslContext = SslSettings.getSslContext()
        }
    }
}

----------------------------------------

TITLE: Creating TCP Client Socket in Ktor
DESCRIPTION: Shows how to create and connect a TCP client socket to a server.

LANGUAGE: kotlin
CODE:
val selectorManager = SelectorManager(Dispatchers.IO)
val socket = aSocket(selectorManager).tcp().connect("127.0.0.1", 9002)

----------------------------------------

TITLE: Using Webjars Assets in HTML
DESCRIPTION: This snippet shows how to include a Webjars asset (bootstrap.css) in an HTML file after configuring the Webjars plugin in Ktor.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="/assets/bootstrap/bootstrap.css">
</head>
</html>

----------------------------------------

TITLE: Configuring Caching for Static Files in Ktor
DESCRIPTION: This snippet demonstrates how to configure the Cache-Control header for HTTP caching of static files in Ktor. It sets different caching policies based on file extensions.

LANGUAGE: kotlin
CODE:
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.http.content.*

fun Application.configureRouting() {
    routing {
        staticFiles("/", File("files")) {
            cacheControl { request, file ->
                when {
                    file.extension == "png" -> CacheControl.MaxAge(maxAgeSeconds = 30 * 24 * 60 * 60)
                    file.extension == "ico" -> CacheControl.MaxAge(maxAgeSeconds = 1 * 24 * 60 * 60)
                    file.extension == "css" -> CacheControl.MaxAge(maxAgeSeconds = 7 * 24 * 60 * 60)
                    else -> null
                }
            }
        }
    }
}

----------------------------------------

TITLE: FreeMarker Template Configuration
DESCRIPTION: Shows how to configure FreeMarker template engine with multiple template loaders for feature-based organization.

LANGUAGE: kotlin
CODE:
install(FreeMarker) {
    val customerTemplates = FileTemplateLoader(File("./customer/changeAddress"))
    val loaders = arrayOf<TemplateLoader>(customerTemplates)
    templateLoader = MultiTemplateLoader(loaders)
}

----------------------------------------

TITLE: Configuring JVM Metrics in Ktor
DESCRIPTION: Shows how to disable JVM metrics registration in the DropwizardMetrics plugin.

LANGUAGE: kotlin
CODE:
install(DropwizardMetrics) {
    registerJvmMetricSets = false
}

----------------------------------------

TITLE: Installing WebSocket Deflate Extension in Ktor
DESCRIPTION: This snippet demonstrates how to install the WebSocket Deflate extension for both client and server in Ktor. It includes basic configuration options such as compression level and minimum frame size for compression.

LANGUAGE: kotlin
CODE:
// For client and server
install(WebSockets) {
    extensions {
        install(WebSocketDeflateExtension) {
            /**
             * Compression level to use for [java.util.zip.Deflater].
             */
            compressionLevel = Deflater.DEFAULT_COMPRESSION

            /**
             * Prevent compressing small outgoing frames.
             */
            compressIfBiggerThan(bytes = 4 * 1024)
        }
    }
}

----------------------------------------

TITLE: Configuring Ktor Native Test Dependencies
DESCRIPTION: Adds the ktor-server-test-host dependency to the nativeTest source set for testing Native server implementations.

LANGUAGE: kotlin
CODE:
kotlin {
    sourceSets {
        val nativeTest by getting {
            dependencies {
                implementation("io.ktor:ktor-server-test-host:$ktorVersion")
            }
        }
    }
}

----------------------------------------

TITLE: Installing OAuth Provider in Ktor
DESCRIPTION: Basic setup for installing the OAuth authentication provider with a custom name

LANGUAGE: kotlin
CODE:
install(Authentication) {
    oauth("auth-oauth-google") {
        // Configuration goes here
    }
}

----------------------------------------

TITLE: Setting Browser or Curl User-Agent in Ktor
DESCRIPTION: Demonstrates how to configure predefined browser-like or curl-like User-Agent headers using BrowserUserAgent() or CurlUserAgent() functions.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    BrowserUserAgent()
    // ... or
    CurlUserAgent()
}

----------------------------------------

TITLE: Configuring TLS for Secure Sockets
DESCRIPTION: Demonstrates how to configure TLS parameters for secure socket connections.

LANGUAGE: kotlin
CODE:
val socket = aSocket(selectorManager).tcp().connect("127.0.0.1", 8443).tls()
    .apply {
        trustManager = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()).apply {
            init(null as KeyStore?)
        }
        random = SecureRandom()
        serverName = "127.0.0.1"
        coroutineContext = Dispatchers.IO
    }

----------------------------------------

TITLE: Generating SSL Certificate with Keytool
DESCRIPTION: Command to generate a self-signed SSL certificate using Java's keytool utility, required for HTTP/2 support.

LANGUAGE: bash
CODE:
keytool -keystore test.jks -genkeypair -alias testkey -keyalg RSA -keysize 4096 -validity 5000 -dname 'CN=localhost, OU=ktor, O=ktor, L=Unspecified, ST=Unspecified, C=US'

----------------------------------------

TITLE: Building Links from Resources in Kotlin
DESCRIPTION: This snippet shows how to generate links from resource classes using the href method, including examples with URLBuilder for more complex URLs.

LANGUAGE: kotlin
CODE:
val link = application.href(Articles.Id.Edit(Articles.Id(Articles(), 123)))

val complexLink = application.href(Articles()) {
    protocol = URLProtocol.HTTPS
    host = "ktor.io"
    parameters.append("token", "123")
}

----------------------------------------

TITLE: Specifying Compression Condition for WebSocket Deflate Extension
DESCRIPTION: This code demonstrates how to set a custom compression condition for the WebSocket Deflate extension. In this example, it's configured to compress only text frames.

LANGUAGE: kotlin
CODE:
compressIf { frame -> 
    frame is Frame.Text
}

----------------------------------------

TITLE: Sending Pebble Template Response in Ktor
DESCRIPTION: This snippet demonstrates how to use PebbleContent to respond with a rendered template for a specific route in Ktor.

LANGUAGE: kotlin
CODE:
get("/") {
    call.respond(PebbleContent("index.html", mapOf("user" to User("John"))))
}

----------------------------------------

TITLE: Building Authorization URL for Google OAuth
DESCRIPTION: This snippet shows how to construct the authorization URL for Google OAuth, including necessary query parameters such as client_id, scope, and response_type.

LANGUAGE: kotlin
CODE:
val clientId = "YOUR_CLIENT_ID"
val scope = "https://www.googleapis.com/auth/userinfo.profile"
val authorizationUrl = "https://accounts.google.com/o/oauth2/auth?" +
    "client_id=$clientId&" +
    "scope=$scope&" +
    "response_type=code&" +
    "redirect_uri=http://127.0.0.1:8080&" +
    "access_type=offline"
println("Please open this URL in your browser: $authorizationUrl")

----------------------------------------

TITLE: JTE Template Example in HTML
DESCRIPTION: This snippet shows an example of a JTE template file named 'index.kte'. It demonstrates the use of Kotlin expressions within HTML structure.

LANGUAGE: html
CODE:
@param name: String

<html>
<body>
<h1>Hello, ${name}!</h1>
</body>
</html>

----------------------------------------

TITLE: Configuring HTTP Client for OAuth
DESCRIPTION: Setting up an HTTP client with ContentNegotiation for OAuth server communication

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    install(ContentNegotiation) {
        json()
    }
}

----------------------------------------

TITLE: Excluding Files from Static Content Serving in Ktor
DESCRIPTION: This snippet shows how to exclude specific files from being served as static content in Ktor. Excluded files will result in a 403 Forbidden response when requested.

LANGUAGE: kotlin
CODE:
staticFiles("/", File("files")) {
    exclude { it.name.contains("secret") }
}

----------------------------------------

TITLE: Uploading File Using ByteReadChannel in Ktor
DESCRIPTION: Demonstrates how to use ByteReadChannel to upload a file in a Ktor POST route handler.

LANGUAGE: kotlin
CODE:
post("/upload") {
    val channel = call.receive<ByteReadChannel>()
    val file = File("uploads/file.txt")
    channel.copyAndClose(file.writeChannel())
    call.respondText("OK")
}

----------------------------------------

TITLE: Defining Serializable Data Class
DESCRIPTION: Shows how to create a data class with @Serializable annotation for use with kotlinx.serialization.

LANGUAGE: kotlin
CODE:
@Serializable
data class Customer(val id: Int, val firstName: String, val lastName: String)

----------------------------------------

TITLE: Installing Resources Plugin in Ktor Client
DESCRIPTION: Shows how to install and configure the Resources plugin in a Ktor HTTP client using CIO engine.

LANGUAGE: kotlin
CODE:
import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.resources.*
//...
val client = HttpClient(CIO) {
    install(Resources)
}

----------------------------------------

TITLE: Configuring CORS for Swagger UI in Ktor
DESCRIPTION: Sets up CORS configuration to allow cross-origin requests and content-type headers for Swagger UI functionality.

LANGUAGE: kotlin
CODE:
install(CORS) {
    anyHost()
    allowHeader(HttpHeaders.ContentType)
}

----------------------------------------

TITLE: Configuring Multiple Authentication Realms in Ktor Client (Kotlin)
DESCRIPTION: This example demonstrates how to set up multiple basic authentication providers with different realms for accessing different resources.

LANGUAGE: kotlin
CODE:
install(Auth) {
    basic {
        realm = "Access to the '/' path"
        // ...
    }
    basic {
        realm = "Access to the '/admin' path"
        // ...
    }
}

----------------------------------------

TITLE: Handling Request Body in Route Handler
DESCRIPTION: Demonstrates how to receive and process the request body within a route handler after it has been logged.

LANGUAGE: kotlin
CODE:
post("/") {
    val message = call.receiveText()
    call.respondText("Request body: $message")
}

----------------------------------------

TITLE: Basic Authentication Configuration in Ktor
DESCRIPTION: Code demonstrating how to configure basic authentication provider with credentials and realm settings.

LANGUAGE: kotlin
CODE:
install(Auth) {
    basic {
        // ...
        sendWithoutRequest { request ->
            request.url.host == "0.0.0.0"
        }
    }
}

----------------------------------------

TITLE: Accessing JWT Settings in Kotlin (HS256)
DESCRIPTION: Demonstrates how to access JWT settings from the configuration file in Kotlin code for HS256 algorithm.

LANGUAGE: Kotlin
CODE:
val config = HoconApplicationConfig(ConfigFactory.load())
val jwtAudience = config.property("jwt.audience").getString()
val jwtIssuer = config.property("jwt.issuer").getString()
val jwtSecret = config.property("jwt.secret").getString()

----------------------------------------

TITLE: Configuring JRE Version for Docker Image
DESCRIPTION: Shows how to specify the JRE version to be used in the Docker image using the Ktor plugin configuration.

LANGUAGE: kotlin
CODE:
ktor {
    docker {
        jreVersion.set(JavaVersion.VERSION_11)
    }
}

----------------------------------------

TITLE: Configuring Bearer Authentication in Ktor Client
DESCRIPTION: This snippet demonstrates how to configure bearer authentication in a Ktor client. It includes setting up the Auth plugin, loading tokens, refreshing tokens, and specifying conditions for sending credentials.

LANGUAGE: kotlin
CODE:
import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.auth.*
//...
val client = HttpClient(CIO) {
    install(Auth) {
       bearer {
           loadTokens {
               // Load tokens from a local storage and return them as the 'BearerTokens' instance
               BearerTokens("abc123", "xyz111")
           }
           refreshTokens { // this: RefreshTokensParams
               // Refresh tokens and return them as the 'BearerTokens' instance
               BearerTokens("def456", "xyz111")
           }
           sendWithoutRequest { request ->
               request.url.host == "www.googleapis.com"
           }
       }
    }
}

----------------------------------------

TITLE: Defining CRUD Resource Classes
DESCRIPTION: Demonstrates how to create resource classes for CRUD operations with nested routes and parameters.

LANGUAGE: kotlin
CODE:
@Resource("/articles")
class Articles {
    @Resource("new")
    class New(val parent: Articles = Articles())

    @Resource("{id}")
    class Id(val parent: Articles = Articles(), val id: Long) {
        @Resource("edit")
        class Edit(val parent: Id)
    }
}

----------------------------------------

TITLE: Configuring CBOR WebSocket Serialization
DESCRIPTION: Demonstrates how to register a CBOR serializer for WebSockets using KotlinxWebsocketSerializationConverter with the Cbor parameter.

LANGUAGE: kotlin
CODE:
import io.ktor.serialization.kotlinx.cbor.*

install(WebSockets) {
    contentConverter = KotlinxWebsocketSerializationConverter(Cbor)
}

----------------------------------------

TITLE: Deploying Ktor WAR in Tomcat Docker Container
DESCRIPTION: Dockerfile configuration for deploying a Ktor WAR archive in a Tomcat servlet container.

LANGUAGE: Dockerfile
CODE:
FROM tomcat:9.0.62-jre8
COPY ./build/libs/tomcat-war.war /usr/local/tomcat/webapps/ROOT.war

----------------------------------------

TITLE: Configuring ConstantCookiesStorage in Ktor Client
DESCRIPTION: This example demonstrates how to configure ConstantCookiesStorage to add a specific cookie to all requests for a given domain. This can be useful for testing server responses.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    install(HttpCookies) {
        storage = ConstantCookiesStorage(Cookie(name = "user_name", value = "jetbrains", domain = "0.0.0.0"))
    }
}

----------------------------------------

TITLE: Setting Request Body as Plain Text
DESCRIPTION: Demonstrates how to send a plain text request body using setBody function.

LANGUAGE: kotlin
CODE:
import io.ktor.client.request.*
import io.ktor.client.statement.*
import io.ktor.http.*

val response: HttpResponse = client.post("http://localhost:8080/post") {
    setBody("Body content")
}

----------------------------------------

TITLE: Configuring ContentEncoding with Custom Encoders
DESCRIPTION: Configuration example showing how to enable deflate and gzip encoders with specific quality values.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    install(ContentEncoding) {
        deflate(quality = 1.0)
        gzip(quality = 0.9)
    }
}

----------------------------------------

TITLE: Adding JWT Dependencies in Maven
DESCRIPTION: Adds the required dependencies for JWT authentication in a Maven pom.xml file.

LANGUAGE: XML
CODE:
<dependency>
<groupId>io.ktor</groupId>
<artifactId>ktor-server-auth-jvm</artifactId>
<version>${ktor_version}</version>
</dependency>
<dependency>
<groupId>io.ktor</groupId>
<artifactId>ktor-server-auth-jwt-jvm</artifactId>
<version>${ktor_version}</version>
</dependency>

----------------------------------------

TITLE: Receiving Raw Payload as ByteArray in Ktor
DESCRIPTION: Shows how to receive a raw payload as a ByteArray in a Ktor POST route handler using call.receive<ByteArray>().

LANGUAGE: kotlin
CODE:
post("/") {
    val byteArray = call.receive<ByteArray>()
    println("Received bytes: ${byteArray.contentToString()}")
    println("Received text: ${String(byteArray)}")
    call.respondText("OK")
}

----------------------------------------

TITLE: Configure Digest Authentication
DESCRIPTION: Code snippet showing how to configure digest authentication in a Ktor client by installing the Auth plugin and setting up digest credentials.

LANGUAGE: kotlin
CODE:


----------------------------------------

TITLE: Configuring ProtoBuf WebSocket Serialization
DESCRIPTION: Shows how to register a ProtoBuf serializer for WebSockets using KotlinxWebsocketSerializationConverter with the ProtoBuf parameter.

LANGUAGE: kotlin
CODE:
import kotlinx.serialization.protobuf.*

install(WebSockets) {
    contentConverter = KotlinxWebsocketSerializationConverter(ProtoBuf)
}

----------------------------------------

TITLE: Configuring SSL for OkHttp Engine in Ktor Client
DESCRIPTION: This code demonstrates how to configure OkHttp engine for using SSL in Ktor client by passing SSLSocketFactory and X509TrustManager to the sslSocketFactory function.

LANGUAGE: kotlin
CODE:
val client = HttpClient(OkHttp) {
    engine {
        config {
            sslSocketFactory(
                SslSettings.getSSLSocketFactory(),
                SslSettings.getTrustManager()
            )
        }
    }
}

----------------------------------------

TITLE: Configuring ProtoBuf WebSocket Serialization
DESCRIPTION: Shows how to register a ProtoBuf serializer for WebSockets using KotlinxWebsocketSerializationConverter with the ProtoBuf parameter.

LANGUAGE: kotlin
CODE:
import kotlinx.serialization.protobuf.*

install(WebSockets) {
    contentConverter = KotlinxWebsocketSerializationConverter(ProtoBuf)
}

----------------------------------------

TITLE: Configuring WebSocket Options in Ktor
DESCRIPTION: Demonstrates how to configure basic WebSocket settings like ping period, timeout, frame size, and masking.

LANGUAGE: kotlin
CODE:
install(WebSockets) {
    pingPeriod = Duration.ofSeconds(15)
    timeout = Duration.ofSeconds(15)
    maxFrameSize = Long.MAX_VALUE
    masking = false
}

----------------------------------------

TITLE: Installing HttpRequestRetry Plugin in Ktor Client
DESCRIPTION: This snippet demonstrates how to install the HttpRequestRetry plugin in a Ktor client configuration block.

LANGUAGE: kotlin
CODE:
import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.*
//...
val client = HttpClient(CIO) {
    install(HttpRequestRetry)
}

----------------------------------------

TITLE: Configuring Native Targets for Ktor Server
DESCRIPTION: Specifies the native targets and declares native binary configurations for the Ktor server implementation.

LANGUAGE: kotlin
CODE:
kotlin {
    val hostOs = System.getProperty("os.name")
    val isArm64 = System.getProperty("os.arch") == "aarch64"
    val isMingwX64 = hostOs.startsWith("Windows")
    val nativeTarget = when {
        hostOs == "Mac OS X" && isArm64 -> macosArm64("native")
        hostOs == "Mac OS X" && !isArm64 -> macosX64("native")
        hostOs == "Linux" && isArm64 -> linuxArm64("native")
        hostOs == "Linux" && !isArm64 -> linuxX64("native")
        isMingwX64 -> mingwX64("native")
        else -> throw GradleException("Host OS is not supported in Kotlin/Native.")
    }

    nativeTarget.apply {
        binaries {
            executable {
                entryPoint = "main"
            }
        }
    }
}

----------------------------------------

TITLE: Making Type-safe Resource Requests
DESCRIPTION: Shows how to make type-safe HTTP requests using resource classes with the Ktor client.

LANGUAGE: kotlin
CODE:
@Resource("/articles")
class Articles()

fun main() {
    runBlocking {
        val client = HttpClient(CIO) {
            install(Resources)
            // ...
        }
        val getAllArticles = client.get(Articles())
    }
}

----------------------------------------

TITLE: Specifying Custom Compression Conditions in Ktor
DESCRIPTION: This snippet shows how to provide custom conditions for compression based on request parameters using the Compression plugin in Ktor.

LANGUAGE: kotlin
CODE:
install(Compression) {
    gzip {
        condition {
            request.uri == "/orders"
        }
    }
}

----------------------------------------

TITLE: X-Forwarded-For Header with Known Proxies
DESCRIPTION: Illustrates the X-Forwarded-For header format used in the skipKnownProxies configuration example.

LANGUAGE: http
CODE:
X-Forwarded-For: 10.0.0.123, proxy-1, proxy-2, proxy-3

----------------------------------------

TITLE: Rate Limiting with Request Keys in Ktor
DESCRIPTION: Demonstrates configuring rate limiting based on request keys, using login query parameters to distinguish between users.

LANGUAGE: kotlin
CODE:
register(RateLimitName("protected")) {
    requestKey { call ->
        call.request.queryParameters["login"]!!
    }
}

----------------------------------------

TITLE: SOCKS Proxy Configuration Using ProxyBuilder
DESCRIPTION: Demonstrates how to configure a SOCKS proxy using the ProxyBuilder factory in Ktor client.

LANGUAGE: kotlin
CODE:
val client = HttpClient() {
    engine {
        proxy = ProxyBuilder.socks(host = "sample-proxy-server", port = 1080)
    }
}

----------------------------------------

TITLE: Implementing WebSocket Extension Class
DESCRIPTION: Shows the basic structure of a WebSocket extension class implementation with frame logging functionality.

LANGUAGE: kotlin
CODE:
class FrameLoggerExtension(val logger: Logger) : WebSocketExtension<FrameLogger.Config> {

----------------------------------------

TITLE: Configuring EngineMain in Kotlin Application
DESCRIPTION: Shows how to set up the main application file for using EngineMain to start a Ktor server. This approach allows loading configuration from external files.

LANGUAGE: kotlin
CODE:
package com.example

import io.ktor.server.application.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*

fun main(args: Array<String>): Unit = EngineMain.main(args)

fun Application.module() {
    // ...
}

----------------------------------------

TITLE: Streaming Response Data
DESCRIPTION: Demonstrates how to stream response data in chunks using HttpStatement and ByteReadChannel

LANGUAGE: kotlin
CODE:
suspend fun downloadFileWithProgress(client: HttpClient) {
    val file = File("downloads/image.jpg")
    file.parentFile.mkdirs()
    client.prepareGet("https://ktor.io/docs/images/ktor_logo.png")
        .execute { response ->
            val channel: ByteReadChannel = response.body()
            while (!channel.isClosedForRead) {
                val packet = channel.readRemaining(DEFAULT_BUFFER_SIZE.toLong())
                while (!packet.isEmpty) {
                    val bytes = packet.readBytes()
                    file.appendBytes(bytes)
                }
            }
        }
}

----------------------------------------

TITLE: Implementing decode function in Kotlin
DESCRIPTION: Shows how to implement the decode function for deserializing a list of values into a specific type.

LANGUAGE: kotlin
CODE:
decode { values -> // converter: (values: List<String>) -> Any?
    //deserialize values
}

----------------------------------------

TITLE: Configuring XML WebSocket Serialization
DESCRIPTION: Shows how to register an XML serializer for WebSockets using KotlinxWebsocketSerializationConverter with the XML parameter.

LANGUAGE: kotlin
CODE:
import nl.adaptivity.xmlutil.serialization.*

install(WebSockets) {
    contentConverter = KotlinxWebsocketSerializationConverter(XML)
}

----------------------------------------

TITLE: Configuring XML WebSocket Serialization
DESCRIPTION: Shows how to register an XML serializer for WebSockets using KotlinxWebsocketSerializationConverter with the XML parameter.

LANGUAGE: kotlin
CODE:
import nl.adaptivity.xmlutil.serialization.*

install(WebSockets) {
    contentConverter = KotlinxWebsocketSerializationConverter(XML)
}

----------------------------------------

TITLE: Defining Multiple Ktor Modules in Different Packages
DESCRIPTION: This snippet demonstrates defining multiple Ktor modules in different packages. It shows two modules in the com.example package and one in the org.sample package.

LANGUAGE: kotlin
CODE:
package com.example

import io.ktor.server.application.*
import io.ktor.server.response.*
import io.ktor.server.routing.*

fun Application.module1() {
    routing {
        get("/module1") {
            call.respondText("Hello from module1")
        }
    }
}

fun Application.module2() {
    routing {
        get("/module2") {
            call.respondText("Hello from module2")
        }
    }
}

LANGUAGE: kotlin
CODE:
package org.sample

import io.ktor.server.application.*
import io.ktor.server.response.*
import io.ktor.server.routing.*

fun Application.module3() {
    routing {
        get("/module3") {
            call.respondText("Hello from module3")
        }
    }
}

----------------------------------------

TITLE: Configuring Content Type Compression in Ktor
DESCRIPTION: This snippet shows how to configure compression for specific content types using the Compression plugin in Ktor.

LANGUAGE: kotlin
CODE:
install(Compression) {
    gzip {
        matchContentType(
            ContentType.Text.JavaScript,
            ContentType.Application.Json
        )
    }
    deflate {
        matchContentType(ContentType.Text.Any)
    }
}

----------------------------------------

TITLE: Setting Minimum Size for Compression in Ktor
DESCRIPTION: This example demonstrates how to set a minimum response size for compression using the Compression plugin in Ktor.

LANGUAGE: kotlin
CODE:
install(Compression) {
    deflate {
        minimumSize(1024)
    }
}

----------------------------------------

TITLE: Installing HttpCallValidator Plugin in Ktor Client
DESCRIPTION: This snippet shows how to install the HttpCallValidator plugin in a Ktor client configuration block. This plugin is used for custom response validation.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    HttpResponseValidator {
        // ...
    }
}

----------------------------------------

TITLE: Implementing WebSocket Extension Negotiation
DESCRIPTION: Demonstrates the implementation of extension negotiation methods for both server and client sides.

LANGUAGE: kotlin
CODE:
    /** A list of protocols to be sent in a client request for negotiation **/
    override val protocols: List<WebSocketExtensionHeader> = emptyList()
   
    /** 
      * This method will be called for server and will process `requestedProtocols` from the client.
      * As a result, it will return a list of extensions that server agrees to use.
      */
    override fun serverNegotiation(requestedProtocols: List<WebSocketExtensionHeader>): List<WebSocketExtensionHeader> {
        logger.log("Server negotiation")
        return emptyList()
    }

    /**
      * This method will be called on the client with a list of protocols, produced by `serverNegotiation`. It will decide if these extensions should be used. 
      */ 
    override fun clientNegotiation(negotiatedProtocols: List<WebSocketExtensionHeader>): Boolean {
        logger.log("Client negotiation")
        return true
    }

----------------------------------------

TITLE: Responding with Velocity Template
DESCRIPTION: Shows how to respond to a route with a Velocity template using VelocityContent.

LANGUAGE: kotlin
CODE:
get("/") {
    val user = User("John")
    call.respond(VelocityContent("templates/index.vl", mapOf("user" to user)))
}

----------------------------------------

TITLE: Running Ktor Server with Auto-reload
DESCRIPTION: Command to start the Ktor server with auto-reload functionality enabled. This runs the application on localhost:8080.

LANGUAGE: bash
CODE:
./gradlew :autoreload-embedded-server:run

----------------------------------------

TITLE: Implementing encode function in Kotlin
DESCRIPTION: Shows how to implement the encode function for serializing a value into a list of strings.

LANGUAGE: kotlin
CODE:
encode { value -> // converter: (value: Any?) -> List<String>
       //serialize value
      }

----------------------------------------

TITLE: Running Ktor CallId Sample Application with Gradle
DESCRIPTION: This command executes the Ktor sample application demonstrating the CallId plugin functionality. It uses Gradle to run the 'call-id' subproject.

LANGUAGE: bash
CODE:
./gradlew :call-id:run

----------------------------------------

TITLE: Configuring Shutdown URL in YAML Configuration File
DESCRIPTION: This snippet demonstrates how to configure a shutdown URL in a Ktor application.yaml file. It sets the ktor.deployment.shutdown.url property using YAML syntax.

LANGUAGE: yaml
CODE:
ktor:
  deployment:
    shutdown:
      url: "/shutdown"

----------------------------------------

TITLE: Configuring SSL for Apache Engine in Ktor Client
DESCRIPTION: This snippet demonstrates how to enable SSL for the Apache engine in Ktor client by passing SSLContext to the engine configuration.

LANGUAGE: kotlin
CODE:
val client = HttpClient(Apache) {
    engine {
        customizeClient {
            setSSLContext(SslSettings.getSslContext())
        }
    }
}

----------------------------------------

TITLE: Configuring Gson WebSocket Serialization
DESCRIPTION: Demonstrates how to set up WebSocket serialization using Gson converter in Ktor client.

LANGUAGE: kotlin
CODE:
install(WebSockets) {
    contentConverter = GsonWebsocketContentConverter()
}

----------------------------------------

TITLE: Implementing WebSocket Extension Factory
DESCRIPTION: Demonstrates the implementation of a WebSocket extension factory as a companion object.

LANGUAGE: kotlin
CODE:
    companion object : WebSocketExtensionFactory<Config, FrameLogger> {
        /* Key to discover installed extension instance */
        override val key: AttributeKey<FrameLogger> = AttributeKey("frame-logger")

        /** List of occupied rsv bits.
         * If the extension occupies a bit, it can't be used in other installed extensions. We use these bits to prevent plugin conflicts(prevent installing multiple compression plugins). If you're implementing a plugin using some RFC, rsv occupied bits should be referenced there.
         */
        override val rsv1: Boolean = false
        override val rsv2: Boolean = false
        override val rsv3: Boolean = false

       /** Create plugin instance. Will be called for each WebSocket session **/
        override fun install(config: Config.() -> Unit): FrameLogger {
            return FrameLogger(Config().apply(config).logger)
        }
    }

----------------------------------------

TITLE: Creating a Custom Logger for Ktor Plugins
DESCRIPTION: This Kotlin snippet demonstrates how to create a custom logger for use in Ktor plugins or files using the KtorSimpleLogger class. It's suitable for multiplatform projects.

LANGUAGE: kotlin
CODE:
import io.ktor.util.logging.*

class RequestTracePlugin {
    companion object {
        private val log = KtorSimpleLogger("com.example.RequestTracePlugin")
    }

    // ...

    fun trace(message: String) {
        log.trace(message)
    }
}

----------------------------------------

TITLE: Running Ktor Client Digest Authentication Example
DESCRIPTION: Command to execute the client-side digest authentication example using Gradle. The server responds with 'Hello, jetbrains!' when authentication is successful.

LANGUAGE: bash
CODE:
./gradlew :client-auth-digest:run

----------------------------------------

TITLE: Configuring Velocity Tools
DESCRIPTION: Example of installing and configuring VelocityTools plugin with custom and default tools.

LANGUAGE: kotlin
CODE:
install(VelocityTools) {
    engine {
        setProperty("resource.loader", "string")
        addProperty("resource.loader.string.name", "myRepo")
        addProperty("resource.loader.string.class", StringResourceLoader::class.java.name)
        addProperty("resource.loader.string.repository.name", "myRepo")
    }
    addDefaultTools()
    tool("foo", MyCustomTool::class.java)
}

----------------------------------------

TITLE: Running Client Content Encoding Sample in Ktor
DESCRIPTION: Command to execute the client content encoding sample using Gradle. This sample depends on the server from the compression example.

LANGUAGE: bash
CODE:
./gradlew :client-content-encoding:run

----------------------------------------

TITLE: Configuring FreeMarker Template Loading in Ktor
DESCRIPTION: Configuration setup for FreeMarker template loading in Ktor, specifying the template loader to look up templates in the templates package relative to the current classpath.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.freemarker.*
import freemarker.cache.*

fun Application.configureFreeMarker() {
    install(FreeMarker) {
        templateLoader = ClassTemplateLoader(this::class.java.classLoader, "templates")
    }
}


----------------------------------------

TITLE: Request Weight Configuration in Rate Limiting
DESCRIPTION: Shows how to configure request weights for rate limiting based on request keys.

LANGUAGE: kotlin
CODE:
register(RateLimitName("protected")) {
    requestKey { call ->
        call.request.queryParameters["login"]!!
    }
    requestWeight { key ->
        when (key) {
            "admin" -> 10
            else -> 1
        }
    }
}

----------------------------------------

TITLE: Implementing Custom Cookie Storage in Ktor Client
DESCRIPTION: This example illustrates how to create and use a custom cookie storage by implementing the CookiesStorage interface in a Ktor client configuration.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    install(HttpCookies) {
        storage = CustomCookiesStorage()
    }
}

public class CustomCookiesStorage : CookiesStorage {
    // ...
}

----------------------------------------

TITLE: Creating Default Ktor HTTP Client in Common Code
DESCRIPTION: Demonstrates how to create a basic Ktor HTTP client in common code without specifying an engine. The client automatically selects the appropriate engine based on platform-specific dependencies.

LANGUAGE: kotlin
CODE:


----------------------------------------

TITLE: Sending Thymeleaf Template in Ktor Response
DESCRIPTION: This snippet demonstrates how to use ThymeleafContent to send a template as a response in a Ktor route.

LANGUAGE: kotlin
CODE:
get("/") {
    call.respond(ThymeleafContent("index", mapOf("user" to User("John"))))
}

----------------------------------------

TITLE: Auto-reloading Thymeleaf Templates in Ktor Development Mode
DESCRIPTION: This snippet shows how to configure Thymeleaf for automatic template reloading when running in development mode.

LANGUAGE: kotlin
CODE:
fun Application.module() {
    install(Thymeleaf) {
        setTemplateResolver(ClassLoaderTemplateResolver().apply {
            prefix = "templates/"
            suffix = ".html"
            characterEncoding = "utf-8"
            setCacheable(false)
            checkExistence = true
        })
    }

    routing {
        get("/") {
            call.respond(ThymeleafContent("index", mapOf("user" to User("John"))))
        }
    }
}

data class User(val name: String)

----------------------------------------

TITLE: Running Ktor Client Cookies Example with Gradle
DESCRIPTION: This command runs the client-cookies sample using Gradle. It executes the client application that demonstrates cookie handling and session management.

LANGUAGE: bash
CODE:
./gradlew :client-cookies:run

----------------------------------------

TITLE: Generating Custom Call IDs
DESCRIPTION: Example of configuring the CallId plugin to generate custom call IDs for outgoing requests.

LANGUAGE: kotlin
CODE:
install(CallId) {
    generate { "my-call-id" }
}

----------------------------------------

TITLE: Running Ktor File Download Sample
DESCRIPTION: Gradle command to execute the file download sample application. The command should be run from the repository's root directory and will save the downloaded file to the system's temporary directory.

LANGUAGE: bash
CODE:
./gradlew :client-download-file:run

----------------------------------------

TITLE: Configuring Netty Dependencies for HTTP/2
DESCRIPTION: Gradle configuration to add native OpenSSL bindings (tcnative) for Netty HTTP/2 support. Includes platform-specific classifier setup.

LANGUAGE: kotlin
CODE:
val tcnativeVersion = "2.0.54.Final"
val tcnativeClassifier = "linux-x86_64"
// or "windows-x86_64"
// or "osx-x86_64"

dependencies {
    implementation("io.netty:netty-tcnative-boringssl-static:$tcnativeVersion")
    implementation("io.netty:netty-tcnative-boringssl-static:$tcnativeVersion:$tcnativeClassifier")
    implementation("org.jetbrains.kotlinx:atomicfu:0.17.3")
    implementation("ch.qos.logback:logback-classic:1.2.11")
}

----------------------------------------

TITLE: Creating Prometheus Registry in Ktor
DESCRIPTION: Demonstrates how to create and configure a Prometheus meter registry for metrics collection in a Ktor application.

LANGUAGE: kotlin
CODE:
val appMicrometerRegistry = PrometheusMeterRegistry(PrometheusConfig.DEFAULT)

fun Application.module() {
    install(MicrometerMetrics) {
        registry = appMicrometerRegistry
    }
}

----------------------------------------

TITLE: Initializing Ktor Server with EngineMain
DESCRIPTION: Main function entry point for starting a Ktor server using EngineMain. This approach allows for configuration via external HOCON or YAML files.

LANGUAGE: kotlin
CODE:
fun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)

----------------------------------------

TITLE: Configuring Velocity Template Engine in Ktor
DESCRIPTION: Demonstrates how to configure VelocityEngine for loading templates from classpath resources.

LANGUAGE: kotlin
CODE:
install(Velocity) {
    setProperty("resource.loader", "classpath")
    setProperty("classpath.resource.loader.class", ClasspathResourceLoader::class.java.name)
}

----------------------------------------

TITLE: Sending HTML Response using Kotlin DSL in Ktor
DESCRIPTION: Shows how to send an HTML response built using Kotlin HTML DSL with the call.respondHtml function.

LANGUAGE: kotlin
CODE:
get("/") {
    val name = "John"
    call.respondHtml(HttpStatusCode.OK) {
        head {
            title { +"Greetings" }
        }
        body {
            h1 { +"Hello $name!" }
        }
    }
}

----------------------------------------

TITLE: Starting Download File Server
DESCRIPTION: Command to start the required download-file server sample that handles the file hosting

LANGUAGE: bash
CODE:
./gradlew :download-file:run

----------------------------------------

TITLE: Retrieving CallId from Header in Ktor
DESCRIPTION: Shows how to configure the CallId plugin to retrieve a call ID from a specific HTTP header.

LANGUAGE: kotlin
CODE:
install(CallId) {
    retrieveFromHeader(HttpHeaders.XRequestId)
}

----------------------------------------

TITLE: Running Range Request Client
DESCRIPTION: Command to run the range request client sample from the repository root

LANGUAGE: bash
CODE:
./gradlew :client-download-file-range:run

----------------------------------------

TITLE: Configuring Port for Embedded Server in Kotlin
DESCRIPTION: Shows how to configure the server port for an embedded Ktor server, reading from environment variable PORT with fallback to 5000.

LANGUAGE: kotlin
CODE:
fun main() {
    embeddedServer(Netty, port = (System.getenv("PORT")?:"5000").toInt()) {
    // ...
    }.start(wait = true)
}

----------------------------------------

TITLE: Configuring Netty Server in application.yaml
DESCRIPTION: Shows the YAML configuration for a Netty server, specifying the port and application module.

LANGUAGE: yaml
CODE:
ktor:
  deployment:
    port: 8080
  application:
    modules:
      - com.example.ApplicationKt.module

----------------------------------------

TITLE: Configuring Fat JAR Name in build.gradle.kts
DESCRIPTION: This snippet demonstrates how to configure the name of the fat JAR to be generated using the ktor.fatJar extension in the build.gradle.kts file.

LANGUAGE: kotlin
CODE:
ktor {
    fatJar {
        archiveFileName.set("fat.jar")
    }
}

----------------------------------------

TITLE: Velocity Template Example
DESCRIPTION: Sample Velocity template showing user data rendering with conditional logic and iteration.

LANGUAGE: html
CODE:
<html>
    <body>
        <h1>Hello, $user.name</h1>
    </body>
</html>

----------------------------------------

TITLE: Template Layout Implementation in Ktor
DESCRIPTION: Example of implementing hierarchical templates in Ktor, showing a root layout template with header and content placeholders.

LANGUAGE: html
CODE:
<body>
<h1>Ktor</h1>
<article>
    <h2>Hello from Ktor!</h2>
    <p>Kotlin Framework for creating connected systems.</p>
    <ul>
       <li><b>One</b></li>
       <li>Two</li>
    </ul>
</article>
</body>

----------------------------------------

TITLE: Running WinHTTP Client Sample
DESCRIPTION: Command to execute the WinHTTP client sample from the repository root directory using Gradle.

LANGUAGE: bash
CODE:
./gradlew :client-engine-winhttp:runReleaseExecutableNative

----------------------------------------

TITLE: Retrieving Cookies for a Specific URL in Ktor Client
DESCRIPTION: This snippet shows how to use the cookies function to obtain all cookies for a specified URL in a Ktor client.

LANGUAGE: kotlin
CODE:
client.cookies("http://0.0.0.0:8080/")

----------------------------------------

TITLE: Running Ktor HTTP Client Sample
DESCRIPTION: Gradle command to execute the client-http-send sample application from the repository root directory.

LANGUAGE: bash
CODE:
./gradlew :client-http-send:run

----------------------------------------

TITLE: Adding Ktor LDAP Dependencies
DESCRIPTION: Required dependencies for enabling LDAP authentication in a Ktor application using different build systems.

LANGUAGE: kotlin
CODE:
implementation("io.ktor:ktor-server-auth:$ktor_version")
implementation("io.ktor:ktor-server-auth-ldap:$ktor_version")

LANGUAGE: groovy
CODE:
implementation "io.ktor:ktor-server-auth:$ktor_version"
implementation "io.ktor:ktor-server-auth-ldap:$ktor_version"

LANGUAGE: xml
CODE:
<dependency>
<groupId>io.ktor</groupId>
<artifactId>ktor-server-auth</artifactId>
<version>${ktor_version}</version>
</dependency>
<dependency>
<groupId>io.ktor</groupId>
<artifactId>ktor-server-auth-ldap</artifactId>
<version>${ktor_version}</version>
</dependency>

----------------------------------------

TITLE: Using CSS with HTML DSL in Ktor
DESCRIPTION: This snippet shows how to use the specified CSS within an HTML document created using HTML DSL. It demonstrates creating an HTML response with a link to the CSS file.

LANGUAGE: kotlin
CODE:
get("/") {
    call.respondHtml {
        head {
            link(rel = "stylesheet", href = "/styles.css", type = "text/css")
        }
        body {
            p {
                +"Hello from Ktor!"
            }
        }
    }
}

----------------------------------------

TITLE: Configuring Content Type for Static Files in Ktor
DESCRIPTION: This snippet shows how to set the Content-Type header explicitly for static files in Ktor. It sets 'text/html' for 'html-file.txt' and uses default behavior for other files.

LANGUAGE: kotlin
CODE:
staticFiles("/", File("files")) {
    contentType { file, defaultContentType ->
        when {
            file.name == "html-file.txt" -> ContentType.Text.Html
            else -> defaultContentType
        }
    }
}

----------------------------------------

TITLE: Database Connection Settings Configuration
DESCRIPTION: Configuration block for database connection settings in application.conf file, defining storage parameters including driver class, database URL and cache file path.

LANGUAGE: kotlin
CODE:
storage {
    driverClassName = "org.h2.Driver"
    jdbcURL = "jdbc:h2:file:./build/db"
    ehcacheFilePath = ./build/ehcache
}

----------------------------------------

TITLE: Kotlin Data Model Definition
DESCRIPTION: Defines a simple data class for user information used in templates.

LANGUAGE: kotlin
CODE:
data class User(val name: String)

----------------------------------------

TITLE: Installing and Configuring ShutDownUrl Plugin in Kotlin
DESCRIPTION: This code snippet shows how to install and configure the ShutDownUrl plugin programmatically in a Ktor application. It uses the install function to add the plugin and sets the shutDownUrl property.

LANGUAGE: kotlin
CODE:
install(ShutDownUrl.ApplicationCallPlugin) {
    shutDownUrl = "/shutdown"
    exitCodeSupplier = { 0 } // ApplicationCall.() -> Int
}

----------------------------------------

TITLE: Running Ktor JSON Client Example with Gradle
DESCRIPTION: Command to run the Ktor JSON client example using Gradle. This should be executed in the repository's root directory after starting one of the server-side samples (gson or jackson).

LANGUAGE: Bash
CODE:
./gradlew :client-json:run

----------------------------------------

TITLE: Configuring Context Takeover in WebSocket Deflate Extension
DESCRIPTION: This snippet shows how to configure context takeover settings for the WebSocket Deflate extension. These settings control whether the client and server should use a compression window, which can reduce memory allocation per session.

LANGUAGE: kotlin
CODE:
clientNoContextTakeOver = false

serverNoContextTakeOver = false

----------------------------------------

TITLE: Expected Output from Ktor JSON Client Example
DESCRIPTION: The expected console output when running the Ktor JSON client example. It shows the client requesting a model, fetching items, and receiving JSON responses parsed into Kotlin objects.

LANGUAGE: Text
CODE:
Requesting model...
Fetching items for 'root'...
Received: Item(key=A, value=Apache)
Received: Item(key=B, value=Bing)

----------------------------------------

TITLE: Adding Stage Task in Gradle for Heroku Deployment
DESCRIPTION: This Kotlin DSL snippet for Gradle adds a 'stage' task that depends on 'installDist', which is required for Heroku deployment.

LANGUAGE: kotlin
CODE:
tasks {
    create("stage").dependsOn("installDist")
}

----------------------------------------

TITLE: Configuring Basic Swagger UI Endpoint in Ktor
DESCRIPTION: Sets up a basic Swagger UI endpoint at the specified path using an OpenAPI specification file. The endpoint serves the UI from either application resources or the filesystem.

LANGUAGE: kotlin
CODE:
import io.ktor.server.plugins.swagger.*

// ...
routing {
    swaggerUI(path = "swagger", swaggerFile = "openapi/documentation.yaml")
}

----------------------------------------

TITLE: Creating Dockerfile for Ktor Application (Gradle)
DESCRIPTION: Provides a Dockerfile for building and running a Ktor application using Gradle, including dependency caching and multi-stage build process.

LANGUAGE: docker
CODE:
# Stage 1: Cache Gradle dependencies
FROM gradle:7-jdk11 AS cache
WORKDIR /app
COPY build.gradle.kts settings.gradle.kts ./
RUN gradle --no-daemon build --stacktrace

# Stage 2: Build Application
FROM gradle:7-jdk11 AS build
WORKDIR /app
COPY --from=cache /home/gradle/.gradle /home/gradle/.gradle
COPY . .
RUN gradle --no-daemon build --stacktrace

# Stage 3: Create the Runtime Image
FROM amazoncorretto:21-slim AS runtime
EXPOSE 8080
WORKDIR /app
COPY --from=build /app/build/libs/*-all.jar app.jar
ENTRYPOINT ["java", "-jar", "app.jar"]

----------------------------------------

TITLE: Configuring JTE Template Engine in Ktor
DESCRIPTION: This snippet demonstrates how to configure the Jte plugin in Ktor to load templates from a 'templates' directory. It creates a DirectoryCodeResolver and sets up the JTE template engine.

LANGUAGE: kotlin
CODE:
import gg.jte.ContentType
import gg.jte.TemplateEngine
import gg.jte.resolve.DirectoryCodeResolver
import io.ktor.server.application.*
import io.ktor.server.jte.*

fun Application.configureTemplating() {
    install(Jte) {
        val codeResolver = DirectoryCodeResolver(File("templates"))
        templateEngine = TemplateEngine.create(codeResolver, ContentType.Html)
    }
}

----------------------------------------

TITLE: Configuring Global Caching Headers in Ktor
DESCRIPTION: This snippet demonstrates how to install and configure the CachingHeaders plugin globally in a Ktor application. It sets up caching options for plain text and HTML content types.

LANGUAGE: kotlin
CODE:
install(CachingHeaders) {
    options { outgoingContent ->
        when (outgoingContent.contentType?.withoutParameters()) {
            ContentType.Text.Plain -> CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 60))
            ContentType.Text.Html -> CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 3600))
            else -> null
        }
    }
}

routing {
    // ...
}

----------------------------------------

TITLE: Running Ktor Client Logging Sample with Gradle
DESCRIPTION: This command runs the client-logging sample using Gradle. It should be executed in the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :client-logging:run

----------------------------------------

TITLE: Customizing Protocols for WebSocket Deflate Extension
DESCRIPTION: This snippet illustrates how to fine-tune the list of protocols for the WebSocket Deflate extension. It shows how to clear the existing protocols and add new ones as needed.

LANGUAGE: kotlin
CODE:
configureProtocols { protocols ->
    protocols.clear()
    protocols.add(...)
}

----------------------------------------

TITLE: Running Ktor Client Logging Sample with Gradle
DESCRIPTION: This command runs the Ktor client logging sample project using Gradle. It should be executed in the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :client-logging-napier:run

----------------------------------------

TITLE: Setting Docker Hub Credentials as Environment Variables
DESCRIPTION: Shows how to set Docker Hub username and password as environment variables for use with the publishImage task.

LANGUAGE: bash
CODE:
export DOCKER_HUB_USERNAME=yourHubUsername
export DOCKER_HUB_PASSWORD=yourHubPassword

LANGUAGE: bash
CODE:
setx DOCKER_HUB_USERNAME yourHubUsername
setx DOCKER_HUB_PASSWORD yourHubPassword

----------------------------------------

TITLE: Opening Read Channel for Socket Data
DESCRIPTION: Shows how to create a read channel for receiving data from a socket connection.

LANGUAGE: kotlin
CODE:
val input = socket.openReadChannel()

----------------------------------------

TITLE: Using JTE Template in Ktor Route Response
DESCRIPTION: This code snippet illustrates how to use a JTE template in a Ktor route response. It creates a route that responds with the 'index' template, passing a parameter to it.

LANGUAGE: kotlin
CODE:
get("/") {
    val name = "Ktor"
    call.respond(JteContent("index.kte", mapOf("name" to name)))
}

----------------------------------------

TITLE: Configuring Google App Engine Plugin Settings
DESCRIPTION: Gradle settings configuration to enable the Google App Engine plugin from Maven Central repository.

LANGUAGE: groovy
CODE:
pluginManagement {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    resolutionStrategy {
        eachPlugin {
            if (requested.id.id.startsWith("com.google.cloud.tools.appengine")) {
                useModule("com.google.cloud.tools:appengine-gradle-plugin:${requested.version}")
            }
        }
    }
}

----------------------------------------

TITLE: Serving CSS Content in a Ktor Route
DESCRIPTION: This snippet demonstrates how to provide CSS content within a Ktor route. It uses the respondCss extension method to send a CSS response with specific styles.

LANGUAGE: kotlin
CODE:
get("/styles.css") {
    call.respondCss {
        body {
            backgroundColor = Color.red
        }
        p {
            fontSize = 2.em
        }
    }
}

----------------------------------------

TITLE: Testing Ktor Client with MockEngine in Kotlin
DESCRIPTION: This code snippet shows how to use MockEngine with the ApiClient class to test HTTP client functionality without making actual network requests.

LANGUAGE: kotlin
CODE:
class ApplicationTest {
    @Test
    fun testGetUsers() = runBlocking {
        val mockEngine = MockEngine { request ->
            respond(
                content = ByteReadChannel("[{\"id\": 1, \"name\": \"Test\"}, {\"id\": 2, \"name\": \"Test 2\"}]"),
                status = HttpStatusCode.OK,
                headers = headersOf(HttpHeaders.ContentType, "application/json")
            )
        }
        val client = ApiClient(mockEngine)
        val users = client.getUsers()
        assertEquals(2, users.size)
        assertEquals(1, users[0].id)
        assertEquals("Test", users[0].name)
        assertEquals(2, users[1].id)
        assertEquals("Test 2", users[1].name)
    }
}

----------------------------------------

TITLE: Running Ktor Client with SSL Configuration
DESCRIPTION: Executes the Gradle task to run the Ktor client sample with SSL configuration, which makes a request to the SSL-enabled server.

LANGUAGE: Bash
CODE:
./gradlew :client-ssl-config:run

----------------------------------------

TITLE: Defining User Data Model in Kotlin
DESCRIPTION: This snippet defines a simple data class representing a user with a name property.

LANGUAGE: kotlin
CODE:
data class User(val name: String)

----------------------------------------

TITLE: Running Server Component for File Upload
DESCRIPTION: Command to start the server component that will receive file uploads. Must be executed first from the repository root.

LANGUAGE: bash
CODE:
./gradlew :upload-file:run

----------------------------------------

TITLE: Configuring HSTS Plugin in Ktor Server (Kotlin)
DESCRIPTION: This snippet demonstrates how to configure the HSTS plugin in a Ktor server application. It shows setting the maxAgeInSeconds property and configuring HSTS for different hosts.

LANGUAGE: kotlin
CODE:
install(HSTS) {
    maxAgeInSeconds = 31536000
}

LANGUAGE: kotlin
CODE:
install(HSTS) {
    withHost("www.example.com", "example.com") {
        maxAgeInSeconds = 31536000
        includeSubDomains = true
        preload = true
    }
}

----------------------------------------

TITLE: Retrieving CallId from ApplicationCall in Ktor
DESCRIPTION: Demonstrates how to retrieve a call ID from the ApplicationCall object using a custom retrieval function.

LANGUAGE: kotlin
CODE:
install(CallId) {
    retrieve { call ->
        call.request.header(HttpHeaders.XRequestId)
    }
}

----------------------------------------

TITLE: Creating a Shared API Client Configuration in Kotlin
DESCRIPTION: This snippet demonstrates how to create a shared API client configuration class that can be used with both real and mock HTTP engines in Ktor. It includes JSON serialization setup.

LANGUAGE: kotlin
CODE:
class ApiClient(private val engine: HttpClientEngine) {
    val client = HttpClient(engine) {
        install(ContentNegotiation) {
            json()
        }
    }

    suspend fun getUsers(): List<User> {
        return client.get("https://example.com/users").body()
    }
}

----------------------------------------

TITLE: Configuring Maven Assembly Plugin for Ktor Project
DESCRIPTION: XML configuration to add the maven-assembly-plugin to the pom.xml file. This setup creates a fat JAR with dependencies, using a custom descriptor and naming convention.

LANGUAGE: XML
CODE:
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-assembly-plugin</artifactId>
    <version>3.1.0</version>
    <configuration>
        <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
        </descriptorRefs>
        <archive>
            <manifest>
                <mainClass>${main.class}</mainClass>
            </manifest>
        </archive>
    </configuration>
    <executions>
        <execution>
            <id>make-assembly</id>
            <phase>package</phase>
            <goals>
                <goal>single</goal>
            </goals>
        </execution>
    </executions>
</plugin>

----------------------------------------

TITLE: Defining User Data Model in Ktor
DESCRIPTION: This Kotlin snippet defines a simple data class representing a user with a name property.

LANGUAGE: kotlin
CODE:
data class User(val name: String)

----------------------------------------

TITLE: Downloading File from Response
DESCRIPTION: Example showing how to download a file by converting response body to ByteArray with progress tracking

LANGUAGE: kotlin
CODE:
suspend fun downloadFile(client: HttpClient) {
    val file = File("downloads/image.jpg")
    file.parentFile.mkdirs()
    client.get("https://ktor.io/docs/images/ktor_logo.png") {
        onDownload { bytesSentTotal, contentLength ->
            println("Received $bytesSentTotal bytes from $contentLength")
        }
    }.body<ByteArray>().also {
        file.writeBytes(it)
    }
}

----------------------------------------

TITLE: Running Ktor WebSocket Client
DESCRIPTION: Command to execute the Ktor client application that demonstrates WebSocket serialization.

LANGUAGE: bash
CODE:
./gradlew :client-websockets-serialization:run

----------------------------------------

TITLE: Installing DefaultRequest with Configuration Block
DESCRIPTION: Demonstrates installing DefaultRequest using the defaultRequest function that allows for immediate configuration of request parameters.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    defaultRequest {
        // this: DefaultRequestBuilder
    }
}

----------------------------------------

TITLE: Running Ktor Compression Example with Gradle
DESCRIPTION: This command executes the Ktor compression example project using Gradle. After running, users can verify the compression by checking the network tools for the specified URL.

LANGUAGE: bash
CODE:
./gradlew :compression:run

----------------------------------------

TITLE: Creating a Resource Class with Path Parameter in Kotlin
DESCRIPTION: This example demonstrates how to add a path parameter 'id' to a nested resource class for paths like '/articles/{id}'.

LANGUAGE: kotlin
CODE:
@Resource("/articles")
class Articles() {
    @Resource("{id}")
    class Id(val parent: Articles = Articles(), val id: Long)
}

----------------------------------------

TITLE: Configuring Ktor Modules in application.conf
DESCRIPTION: This snippet shows how to configure Ktor modules in the application.conf file. It demonstrates specifying fully qualified module names for loading multiple modules from different packages.

LANGUAGE: hocon
CODE:
ktor {
    application {
        modules = [
            com.example.ApplicationKt.module1,
            com.example.ApplicationKt.module2,
            org.sample.SampleKt.module3
        ]
    }
}

----------------------------------------

TITLE: Generating Self-Signed Certificate Using Keytool
DESCRIPTION: This bash command uses keytool to generate a self-signed certificate and save it to a JKS file. It specifies various parameters such as key algorithm, key size, validity, and certificate details.

LANGUAGE: bash
CODE:
keytool -keystore keystore.jks -alias sampleAlias -genkeypair -keyalg RSA -keysize 4096 -validity 3 -dname 'CN=localhost, OU=ktor, O=ktor, L=Unspecified, ST=Unspecified, C=US'

----------------------------------------

TITLE: Building Fat JAR with Ktor Gradle Plugin
DESCRIPTION: Command to build a fat JAR for the Ktor application using the buildFatJar Gradle task.

LANGUAGE: bash
CODE:
./gradlew :deployment-ktor-plugin:buildFatJar

----------------------------------------

TITLE: Configuring SLF4J Reporter in Ktor
DESCRIPTION: Demonstrates how to configure the SLF4J reporter to output metrics every 10 seconds using the DropwizardMetrics plugin.

LANGUAGE: kotlin
CODE:
install(DropwizardMetrics) {
    val reporter = Slf4jReporter
        .forRegistry(registry)
        .outputTo(log)
        .convertRatesTo(TimeUnit.SECONDS)
        .convertDurationsTo(TimeUnit.MILLISECONDS)
        .build()
    reporter.start(10, TimeUnit.SECONDS)
}

----------------------------------------

TITLE: Receiving Raw Response Body
DESCRIPTION: Demonstrates how to receive raw response body as String and ByteArray types

LANGUAGE: kotlin
CODE:
val responseBody: String = response.body()
val responseBytes: ByteArray = response.body()

----------------------------------------

TITLE: RequestLoggingPlugin Console Output
DESCRIPTION: Example console output from the RequestLoggingPlugin, which logs the URLs of incoming requests.

LANGUAGE: console
CODE:
Request URL: http://localhost:8080/
Request URL: http://localhost:8080/index

----------------------------------------

TITLE: Converting PKCS12 to JKS Format
DESCRIPTION: This bash command uses keytool to convert a PKCS12 format certificate to the JKS format required by Ktor. It imports the keystore from the PKCS12 file (keystore.p12) and creates a new JKS file (keystore.jks).

LANGUAGE: bash
CODE:
keytool -importkeystore -srckeystore keystore.p12 -srcstoretype pkcs12 -destkeystore keystore.jks

----------------------------------------

TITLE: Running Ktor Thymeleaf Sample Application
DESCRIPTION: Command to run the Thymeleaf sample application using Gradle. After execution, the application will be accessible at http://localhost:8080/index.

LANGUAGE: bash
CODE:
./gradlew :thymeleaf:run

----------------------------------------

TITLE: Generating RSA Private Key with OpenSSL
DESCRIPTION: Command to generate a 2048-bit RSA private key using OpenSSL and save it to a file.

LANGUAGE: shell
CODE:
openssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 > ktor.pk8

----------------------------------------

TITLE: Making Authenticated Request to Google API in Ktor
DESCRIPTION: This snippet demonstrates how to make an authenticated request to the Google API using a configured Ktor client with bearer authentication. It includes error handling for 401 Unauthorized responses.

LANGUAGE: kotlin
CODE:
val response = client.get("https://www.googleapis.com/oauth2/v2/userinfo")

when (response.status.value) {
    200 -> {
        val userInfo: UserInfo = response.body()
        println("Hello, ${userInfo.name}!")
    }
    401 -> {
        val errorInfo: ErrorInfo = response.body()
        println("Error: ${errorInfo.error}")
    }
    else -> println("Unexpected response: ${response.status}")
}

----------------------------------------

TITLE: Generating Self-Signed Certificate in Kotlin for Ktor
DESCRIPTION: This snippet demonstrates how to generate a self-signed certificate programmatically using Ktor's buildKeyStore function and save it to a keystore file. It requires the ktor-network-tls-certificates dependency.

LANGUAGE: kotlin
CODE:
val keyStoreFile = File("build/temporary.jks")
if (!keyStoreFile.exists()) {
    keyStoreFile.parentFile.mkdirs()
    val keyStore = buildKeyStore {
        certificate("sampleAlias") {
            password = "foobar"
            domains = listOf("127.0.0.1", "0.0.0.0", "localhost")
        }
    }
    keyStore.saveToFile(keyStoreFile, "123456")
}

----------------------------------------

TITLE: Running Ktor Guice Sample Application using Gradle
DESCRIPTION: This command runs the Guice sample application using Gradle. It should be executed from the repository's root directory. After running, the application will be accessible at http://localhost:8080/.

LANGUAGE: bash
CODE:
./gradlew :guice:run

----------------------------------------

TITLE: Sample POST Request with JSON Data
DESCRIPTION: Example of a POST request with JSON data representing a customer object, used to demonstrate object property validation.

LANGUAGE: http
CODE:
POST http://localhost:8080/customer
Content-Type: application/json

{
  "id": 1,
  "firstName": "John",
  "lastName": "Doe"
}

----------------------------------------

TITLE: Configuring HttpClient Engine Settings
DESCRIPTION: Shows how to configure specific engine settings using the engine configuration block.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    engine {
        // Engine-specific configuration
    }
}

----------------------------------------

TITLE: Running Ktor Tomcat WAR Sample Locally with Gradle
DESCRIPTION: This command runs the Tomcat WAR sample project using Gradle. After execution, the application will be accessible at http://localhost:8080/.

LANGUAGE: bash
CODE:
./gradlew :tomcat-war:run

----------------------------------------

TITLE: Adding Ktor Client Darwin Dependency to iOS Source Set
DESCRIPTION: Adds the Ktor client Darwin engine dependency to the iosMain source set in the shared/build.gradle.kts file.

LANGUAGE: Kotlin
CODE:
iosMain {
    dependencies {
        implementation(libs.ktor.client.darwin)
    }
}

----------------------------------------

TITLE: Building and Deploying Ktor WAR with Docker
DESCRIPTION: Commands to build the WAR file and deploy it using Docker Compose. The application will be accessible via HTTPS on port 8443.

LANGUAGE: bash
CODE:
./gradlew :tomcat-war-ssl:war
docker compose --project-directory snippets/tomcat-war-ssl up

----------------------------------------

TITLE: Implementing Order Routes in Ktor
DESCRIPTION: Defines route handlers for order-related endpoints using Ktor's routing DSL. Includes handlers for retrieving orders and calculating order totals.

LANGUAGE: kotlin
CODE:
fun Route.getOrderRoute() {
    get("/order/{id}") {

    }
}

fun Route.totalizeOrderRoute() {
    get("/order/{id}/total") {

    }
}

----------------------------------------

TITLE: Accepting Socket Connections in Ktor Server
DESCRIPTION: Demonstrates how to accept incoming socket connections on the server side.

LANGUAGE: kotlin
CODE:
val socket = serverSocket.accept()

----------------------------------------

TITLE: Apache5 Client Creation
DESCRIPTION: Example of creating an HTTP client with the Apache5 engine

LANGUAGE: kotlin
CODE:
val client = HttpClient(Apache5)

----------------------------------------

TITLE: Running Ktor HTML DSL Sample Project
DESCRIPTION: Command to run the HTML DSL sample project using Gradle. After execution, the server will be accessible at http://localhost:8080/.

LANGUAGE: bash
CODE:
./gradlew :html:run

----------------------------------------

TITLE: Installing ContentNegotiation with JSON in Ktor
DESCRIPTION: Shows how to install the ContentNegotiation plugin with JSON serialization in a Ktor application.

LANGUAGE: kotlin
CODE:
install(ContentNegotiation) {
    json()
}

----------------------------------------

TITLE: Configuring HttpClient with Response Validation
DESCRIPTION: Example of basic client configuration using HttpClientConfig to enable response validation through the expectSuccess property.

LANGUAGE: kotlin
CODE:
val client = HttpClient() {
    expectSuccess = true
}

----------------------------------------

TITLE: Building Ktor Application (Bash)
DESCRIPTION: This command builds the Ktor application using Gradle. It should be executed from the project's root directory.

LANGUAGE: bash
CODE:
./gradlew build

----------------------------------------

TITLE: Updating Kotlin Gradle Plugin Version in Kotlin Multiplatform Project
DESCRIPTION: Updates the Kotlin version in the gradle/libs.versions.toml file to the latest version for a Kotlin Multiplatform project.

LANGUAGE: Kotlin
CODE:
kotlin = "1.9.20"

----------------------------------------

TITLE: Running Ktor Velocity Sample Application
DESCRIPTION: Command to run the Velocity template sample application using Gradle. After execution, the application will be accessible at http://localhost:8080/index.

LANGUAGE: bash
CODE:
./gradlew :velocity:run

----------------------------------------

TITLE: Configuring Server with ServerConfigBuilder in Ktor 3.0.x
DESCRIPTION: Example of using ServerConfigBuilder to configure server properties in Ktor 3.0.x, replacing the previous ApplicationPropertiesBuilder mechanism.

LANGUAGE: kotlin
CODE:
fun main(args: Array<String>) {
    embeddedServer(Netty,
        serverConfig {
            developmentMode = true
            module(Application::module)
        },
        configure = {
            connector { port = 12345 }
        }
    ).start(wait = true)
}

----------------------------------------

TITLE: Receiving Form Parameters in Ktor
DESCRIPTION: Demonstrates how to receive form parameters in a Ktor POST route handler using the receiveParameters() function.

LANGUAGE: kotlin
CODE:
post("/login") {
    val formParameters = call.receiveParameters()
    val username = formParameters["username"].toString()
    val password = formParameters["password"].toString()
    call.respondText("Logged in as: $username")
}

----------------------------------------

TITLE: Running Ktor Static Website Sample with Gradle
DESCRIPTION: This command executes the Ktor static website sample using Gradle. It should be run from the repository's root directory. After execution, the static website will be accessible at http://localhost:8080/static/aboutme.html.

LANGUAGE: bash
CODE:
./gradlew :tutorial-website-static:run

----------------------------------------

TITLE: X-Forwarded-For Header with Multiple Proxies
DESCRIPTION: Shows an example of the X-Forwarded-For header with multiple proxy IP addresses.

LANGUAGE: http
CODE:
X-Forwarded-For: 10.0.0.123, proxy-1, proxy-2, proxy-3

----------------------------------------

TITLE: Installing HttpTimeout Plugin in Ktor Client
DESCRIPTION: Basic setup for installing the HttpTimeout plugin in a Ktor HTTP client configuration. Requires ktor-client-core dependency.

LANGUAGE: kotlin
CODE:
import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.*
//...
val client = HttpClient(CIO) {
    install(HttpTimeout)
}

----------------------------------------

TITLE: Adding Ktor Client Core Dependency to Common Source Set
DESCRIPTION: Adds the Ktor client core dependency to the commonMain source set in the shared/build.gradle.kts file.

LANGUAGE: Kotlin
CODE:
commonMain {
    dependencies {
        implementation(libs.ktor.client.core)
    }
}

----------------------------------------

TITLE: Running CORS Sample Project with Gradle
DESCRIPTION: Command to run the CORS sample project from the repository's root directory. After execution, the frontend will be accessible at http://localhost:8081/.

LANGUAGE: bash
CODE:
./gradlew :cors:run

----------------------------------------

TITLE: Adding Ktor Client OkHttp Dependency to Android Source Set
DESCRIPTION: Adds the Ktor client OkHttp engine dependency to the androidMain source set in the shared/build.gradle.kts file.

LANGUAGE: Kotlin
CODE:
androidMain {
    dependencies {
        implementation(libs.ktor.client.okhttp)
    }
}

----------------------------------------

TITLE: Configuring Port for Ktor Server in Kotlin
DESCRIPTION: This snippet shows how to configure the port for a Ktor server in Kotlin code, using the PORT environment variable provided by Heroku.

LANGUAGE: kotlin
CODE:
fun main() {
    embeddedServer(Netty, port = System.getenv("PORT").toInt()) {
        // ...
    }.start(wait = true)
}

----------------------------------------

TITLE: Accessing Proxy Request Information in Ktor
DESCRIPTION: Demonstrates how to obtain information about the proxy address and the host to which the request was made using the call.request.local property.

LANGUAGE: kotlin
CODE:
get("/") {
    val proxyHost = call.request.local.remoteHost
    val proxyPort = call.request.local.remotePort
    call.respondText("Proxy: $proxyHost:$proxyPort")
}

----------------------------------------

TITLE: Running HTTP/2 Netty Sample Application
DESCRIPTION: Command to execute the HTTP/2 Netty sample application using Gradle. The application will be accessible at https://localhost:8443 after startup.

LANGUAGE: bash
CODE:
./gradlew :http2-netty:run

----------------------------------------

TITLE: Generating Sequential CallIds in Ktor
DESCRIPTION: Demonstrates generating sequential call IDs using an atomic counter.

LANGUAGE: kotlin
CODE:
install(CallId) {
    val counter = atomic(0)
    generate {
        "generated-call-id-${counter.getAndIncrement()}"
    }
}

----------------------------------------

TITLE: Configuring In-Memory HTTP Cache in Ktor Client
DESCRIPTION: Sets up the basic in-memory HTTP cache for a Ktor client using the HttpCache plugin. This configuration enables the client to cache previously fetched resources in memory.

LANGUAGE: kotlin
CODE:
import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.cache.*
//...
val client = HttpClient(CIO) {
    install(HttpCache)
}

----------------------------------------

TITLE: Adding Coroutines Android Dependency to Android App
DESCRIPTION: Adds the kotlinx-coroutines-android dependency to the androidApp/build.gradle.kts file for Android-specific coroutine support.

LANGUAGE: Kotlin
CODE:
dependencies {
    implementation(libs.kotlinx.coroutines.android)
}

----------------------------------------

TITLE: Running the Ktor Client OAuth Sample Application
DESCRIPTION: Gradle command to run the client-auth-oauth-google sample application from the repository's root directory. This command executes the application with quiet output and plain console display.

LANGUAGE: bash
CODE:
./gradlew :client-auth-oauth-google:run -q --console=plain

----------------------------------------

TITLE: Configuring OkHttp Engine for Android - Version File
DESCRIPTION: Defines the OkHttp engine dependency in the Gradle version catalog for Android platform.

LANGUAGE: kotlin
CODE:
[versions]
ktor = "%ktor_version%"

[libraries]
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }

----------------------------------------

TITLE: Customizing Single-Page Application Serving in Ktor
DESCRIPTION: This snippet shows how to customize the serving settings for a single-page application in Ktor. It configures the application to serve from resources, specifies a custom default page, and ignores certain file types.

LANGUAGE: kotlin
CODE:
routing {
    singlePageApplication {
        useResources = true
        filesPath = "sample-web-app"
        defaultPage = "main.html"
        ignoreFiles { it.endsWith(".txt") }
    }
}

----------------------------------------

TITLE: Accessing Original Request Information in Ktor
DESCRIPTION: Shows how to read information about the original request using the call.request.origin property when ForwardedHeaders or XForwardedHeaders is installed.

LANGUAGE: kotlin
CODE:
get("/") {
    val originalHost = call.request.origin.remoteHost
    val originalPort = call.request.origin.remotePort
    call.respondText("Client: $originalHost:$originalPort")
}

----------------------------------------

TITLE: Thymeleaf Template Example in HTML
DESCRIPTION: This snippet shows an example of a Thymeleaf template named 'index.html' located in the 'resources/templates' directory.

LANGUAGE: html
CODE:
<html>
    <body>
        <h1>Hello, <span data-th-text="${user.name}">User</span>!</h1>
    </body>
</html>

----------------------------------------

TITLE: Running Embedded Ktor Server in Kotlin/Native
DESCRIPTION: Command to run the sample project. It uses Gradle to execute the release version of the native executable.

LANGUAGE: bash
CODE:
./gradlew :embedded-server-native:runReleaseExecutableNative

----------------------------------------

TITLE: Installing AutoHeadResponse Plugin in Ktor Application
DESCRIPTION: This snippet demonstrates how to install the AutoHeadResponse plugin in a Ktor application. It also shows a basic GET route that will automatically respond to HEAD requests.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import io.ktor.server.plugins.autohead.*

fun main() {
    embeddedServer(Netty, port = 8080) {
        install(AutoHeadResponse)
        routing {
            get("/home") {
                call.respondText("Hello World!")
            }
        }
    }.start(wait = true)
}

----------------------------------------

TITLE: Installing and Configuring UserAgent Plugin in Ktor
DESCRIPTION: Shows how to install the UserAgent plugin in a Ktor HTTP client and configure a custom User-Agent header value. Requires the ktor-client-core dependency.

LANGUAGE: kotlin
CODE:
import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.*
// ...
val client = HttpClient(CIO) {
    install(UserAgent) {
        agent = "Ktor client"
    }
}

----------------------------------------

TITLE: Accessing DataConversion Service in Kotlin
DESCRIPTION: Demonstrates how to access the DataConversion service from the application context.

LANGUAGE: kotlin
CODE:
val dataConversion = application.conversionService

----------------------------------------

TITLE: Running Ktor Client Validation Sample
DESCRIPTION: Command to execute the sample project from the repository root directory using Gradle wrapper

LANGUAGE: bash
CODE:
./gradlew :client-validate-non-2xx-response:run

----------------------------------------

TITLE: Accessing Logger from ApplicationCall in Ktor
DESCRIPTION: This Kotlin snippet shows how to access the Logger from an ApplicationCall in a Ktor route. It demonstrates logging a message with the call's request information.

LANGUAGE: kotlin
CODE:
get("/") {
    call.application.environment.log.info("Responding to ${call.request.uri}")
    call.respondText("Hello, world!")
}

----------------------------------------

TITLE: Installing Plugin for Specific Route
DESCRIPTION: Shows how to install caching headers plugin for a specific route in the application.

LANGUAGE: kotlin
CODE:
routing {
    route("index") {
        install(CachingHeaders) { /* First configuration */ }
        get("a") {
            // ...
        }
    }
    route("index") {
        install(CachingHeaders) { /* Second configuration */ }
        get("b") {
            // ...
        }
    }
}

----------------------------------------

TITLE: Configuring Ktor Plugin in Gradle (Kotlin)
DESCRIPTION: This snippet shows how to apply the Ktor plugin in the build.gradle.kts file and configure the main application class.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("jvm") version "1.8.10"
    id("io.ktor.plugin") version "2.2.4"
}

application {
    mainClass.set("com.example.ApplicationKt")
}

----------------------------------------

TITLE: Configuring Mustache Template Loading in Ktor
DESCRIPTION: This snippet demonstrates how to configure Mustache template loading in a Ktor application. It uses ClasspathMustacheFactory to load templates from the 'templates' package in the classpath.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.mustache.*
import io.ktor.server.response.*
import io.ktor.server.routing.*

fun main() {
    embeddedServer(Netty, port = 8080, host = "0.0.0.0") {
        install(Mustache) {
            mustacheFactory = DefaultMustacheFactory("templates")
        }
        // ...
    }.start(wait = true)
}

----------------------------------------

TITLE: Running Ktor Gson Sample Project
DESCRIPTION: Command to run the Ktor sample project using Gradle from the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :gson:run

----------------------------------------

TITLE: Configuring Gretty Plugin in Gradle for Jetty
DESCRIPTION: Gradle configuration for the Gretty plugin to run a servlet application on Jetty, specifying the servlet container and port.

LANGUAGE: Groovy
CODE:
gretty {
    servletContainer = "jetty9"
    contextPath = "/"
    logbackConfigFile = "src/main/resources/logback.xml"
}

----------------------------------------

TITLE: Installing BOM Remover Plugin in Ktor Client
DESCRIPTION: Demonstrates how to configure and install the BOM Remover plugin in a Ktor HTTP client. The plugin removes Byte Order Mark (BOM) from response bodies while maintaining the original Content-Length header.

LANGUAGE: kotlin
CODE:
import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.compression.*
//...
val client = HttpClient(CIO) {
    install(BOMRemover)
}

----------------------------------------

TITLE: Running Ktor Client Retry Example using Gradle
DESCRIPTION: This command executes the Ktor client retry example using Gradle. It runs the client, which will automatically send three consecutive requests to obtain a successful response from the server.

LANGUAGE: bash
CODE:
./gradlew :client-retry:run

----------------------------------------

TITLE: Configuring Default Robot Access Rules
DESCRIPTION: Defines default access rules for web crawlers using the standard robots.txt format. This configuration allows unrestricted access to all user agents.

LANGUAGE: robotstxt
CODE:
User-agent: *
Disallow:

----------------------------------------

TITLE: Installing and Configuring XHttpMethodOverride Plugin in Kotlin
DESCRIPTION: This snippet demonstrates how to install the XHttpMethodOverride plugin in a Ktor application and set up route handlers for different HTTP methods. It shows handling of GET, POST, and DELETE requests, with DELETE being processed through method override.

LANGUAGE: kotlin
CODE:
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.plugins.methodoverride.*
import io.ktor.server.response.*
import io.ktor.server.routing.*

fun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)

fun Application.module() {
    install(XHttpMethodOverride)
    routing {
        get("/") {
            call.respondText("GET: Success")
        }
        post("/") {
            call.respondText("POST: Success")
        }
        delete("/") {
            call.respondText("DELETE: Success")
        }
    }
}

----------------------------------------

TITLE: Installing PartialContent Plugin in Ktor
DESCRIPTION: Code examples showing how to install the PartialContent plugin in a Ktor application for handling HTTP range requests. The plugin supports HEAD and GET requests for responses with Content-Length header.

LANGUAGE: gradle
CODE:
io.ktor:ktor-server-partial-content

----------------------------------------

TITLE: LDAP Authentication Implementation
DESCRIPTION: Example of implementing LDAP authentication with additional validation logic.

LANGUAGE: kotlin
CODE:
install(Authentication) {
    basic("auth-ldap") {
        validate { credentials ->
            ldapAuthenticate(credentials, "ldap://localhost:389", "cn=%s,dc=ktor,dc=io") {
                if (it.name == it.password) {
                    UserIdPrincipal(it.name)
                } else {
                    null
                }
            }
        }
    }
}

----------------------------------------

TITLE: Connecting to Ktor Sockets Server via Telnet
DESCRIPTION: Command to connect to the running sockets server using telnet on localhost port 9002

LANGUAGE: bash
CODE:
telnet 127.0.0.1 9002

----------------------------------------

TITLE: Configuring Gradle Run Task for Servlet Application
DESCRIPTION: Gradle configuration for the 'run' task to execute the servlet application using the Gretty plugin.

LANGUAGE: Groovy
CODE:
tasks.withType<org.gretty.GrettyStartTask> {
    jvmArgs = listOf("-Djava.net.preferIPv4Stack=true")
    httpPort = 8080
    contextPath = "/"
}

----------------------------------------

TITLE: Adding Call ID to Request Header
DESCRIPTION: Configuration showing how to add a call ID to a specific request header using the CallId plugin.

LANGUAGE: kotlin
CODE:
install(CallId) {
    addToHeader(HttpHeaders.XCallId)
}

----------------------------------------

TITLE: Starting Ktor WebSocket Server
DESCRIPTION: Command to start the required Ktor WebSocket server before running the client example.

LANGUAGE: bash
CODE:
./gradlew :server-websockets:run

----------------------------------------

TITLE: Handling Application Events in Ktor Plugin
DESCRIPTION: Demonstrates how to handle application shutdown event using the on handler with ApplicationStopped hook.

LANGUAGE: Kotlin
CODE:
on(ApplicationStopped) {
    println("Application is stopping: $it")
}

----------------------------------------

TITLE: Configuring Thymeleaf Template Loading in Ktor
DESCRIPTION: This snippet demonstrates how to configure the ClassLoaderTemplateResolver to load Thymeleaf templates from the 'templates' package in the classpath.

LANGUAGE: kotlin
CODE:
install(Thymeleaf) {
    setTemplateResolver(ClassLoaderTemplateResolver().apply {
        prefix = "templates/"
        suffix = ".html"
        characterEncoding = "utf-8"
    })
}

----------------------------------------

TITLE: User Data Model Definition
DESCRIPTION: Kotlin data class definition for user data model used in FreeMarker templates.

LANGUAGE: kotlin
CODE:
data class User(val name: String)

----------------------------------------

TITLE: DataTransformationBenchmarkPlugin Console Output
DESCRIPTION: Example console output from the DataTransformationBenchmarkPlugin, showing the delay in reading the request body.

LANGUAGE: console
CODE:
Request URL: http://localhost:8080/transform-data
Read body delay (ms): 52

----------------------------------------

TITLE: Running Ktor Servlet Application with Gradle
DESCRIPTION: Command to run a Ktor servlet application using the Gradle 'run' task configured with Gretty.

LANGUAGE: Bash
CODE:
./gradlew :jetty-war:run

----------------------------------------

TITLE: Intercepting Requests with CallId
DESCRIPTION: Implementation of request interception to add call IDs using the CallIdInterceptor.

LANGUAGE: kotlin
CODE:
intercept { request ->
    val callId = request.call.getCallId()
    println("CallId: $callId")
    proceed(request)
}

----------------------------------------

TITLE: Running Ktor Auth Plugin Sample
DESCRIPTION: Command to execute the authentication plugin sample project from the repository root directory using Gradle wrapper.

LANGUAGE: bash
CODE:
./gradlew :client-custom-plugin-auth:run

----------------------------------------

TITLE: Google Cloud Project Setup Commands
DESCRIPTION: Bash commands for creating and configuring a Google Cloud project and App Engine application.

LANGUAGE: bash
CODE:
gcloud projects create ktor-sample-app-engine --set-as-default
gcloud app create
./gradlew appengineDeploy

----------------------------------------

TITLE: Converting PEM Certificate to PKCS12 Format
DESCRIPTION: This bash command uses openssl to convert a PEM certificate and private key into the PKCS12 format. It requires the certificate file (cert.pem) and the private key file (key.pem).

LANGUAGE: bash
CODE:
openssl pkcs12 -export -in cert.pem -inkey key.pem -out keystore.p12 -name "sampleAlias"

----------------------------------------

TITLE: Setting Main Class for Netty EngineMain in Gradle (Groovy)
DESCRIPTION: Configures the main class for running a Ktor server with Netty EngineMain using Gradle with Groovy DSL.

LANGUAGE: groovy
CODE:
mainClassName = "io.ktor.server.netty.EngineMain"

----------------------------------------

TITLE: Running HSTS-enabled Ktor Server
DESCRIPTION: This Gradle command runs the Ktor server with HSTS enabled. It executes the 'run' task for the 'ssl-engine-main-hsts' subproject.

LANGUAGE: Bash
CODE:
./gradlew :ssl-engine-main-hsts:run

----------------------------------------

TITLE: Deploying Ktor WAR in Jetty Docker Container
DESCRIPTION: Dockerfile configuration for deploying a Ktor WAR archive in a Jetty servlet container.

LANGUAGE: Dockerfile
CODE:
FROM jetty:9.4.30-jre8
COPY ./build/libs/jetty-war.war /var/lib/jetty/webapps/ROOT.war

----------------------------------------

TITLE: Creating Digest Function for UserHashedTableAuth in Ktor
DESCRIPTION: This code creates a digest function using SHA-256 algorithm for use with UserHashedTableAuth in Ktor basic authentication.

LANGUAGE: kotlin
CODE:
val digestFunction = getDigestFunction("SHA-256") { "ktor${it.length}" }

----------------------------------------

TITLE: Running Ktor Data Transformation Plugin Sample
DESCRIPTION: Gradle command to execute the data transformation plugin sample from the repository root directory.

LANGUAGE: bash
CODE:
./gradlew :client-custom-plugin-data-transformation:run

----------------------------------------

TITLE: Handling RequestValidationException in Ktor
DESCRIPTION: Demonstrates how to handle RequestValidationException using the StatusPages plugin in Ktor, returning a BadRequest status with validation failure reasons.

LANGUAGE: kotlin
CODE:
install(StatusPages) {
    exception<RequestValidationException> { call, cause ->
        call.respond(HttpStatusCode.BadRequest, cause.reasons.joinToString())
    }
}

----------------------------------------

TITLE: Setting Default File Response for Static Routes in Ktor
DESCRIPTION: This snippet demonstrates how to reply with a default file for any request inside a static route that has no corresponding file in Ktor. It serves 'index.html' for non-existent resources.

LANGUAGE: kotlin
CODE:
staticFiles("/", File("files")) {
    default("index.html")
}

----------------------------------------

TITLE: Handling ApplicationStarted Event in Ktor
DESCRIPTION: Demonstrates how to subscribe to the ApplicationStarted event and log a message when the application starts.

LANGUAGE: kotlin
CODE:
fun main() {
    environment.monitor.subscribe(ApplicationStarted) {
        environment.log.info("Application started")
    }
}

----------------------------------------

TITLE: Running Ktor Form Parameters Sample
DESCRIPTION: Command to run the Ktor form parameters sample application using Gradle. After running, the application will be accessible at http://localhost:8080/.

LANGUAGE: bash
CODE:
./gradlew :post-form-parameters:run

----------------------------------------

TITLE: Customizing Docker Image Name and Tag
DESCRIPTION: Demonstrates how to set custom image name and tag using the Ktor plugin configuration.

LANGUAGE: kotlin
CODE:
ktor {
    docker {
        localImageName.set("my-application")
        imageTag.set("1.0.0")
    }
}

----------------------------------------

TITLE: Opening Write Channel for Socket Data
DESCRIPTION: Demonstrates creating a write channel for sending data through a socket connection.

LANGUAGE: kotlin
CODE:
val output = socket.openWriteChannel(autoFlush = true)

----------------------------------------

TITLE: Running Ktor WebSocket Client
DESCRIPTION: Command to execute the WebSocket client sample with quiet output and plain console display.

LANGUAGE: bash
CODE:
./gradlew :client-websockets:run -q --console=plain

----------------------------------------

TITLE: Configuring DoubleReceive Plugin Cache Settings
DESCRIPTION: Shows how to configure the DoubleReceive plugin's cacheRawRequest property to disable caching of raw requests.

LANGUAGE: kotlin
CODE:
install(DoubleReceive) {
    cacheRawRequest = false
}

----------------------------------------

TITLE: Adding Custom Headers in Ktor Response
DESCRIPTION: Demonstrates how to create a plugin that appends a custom header to each response using onCall handler.

LANGUAGE: Kotlin
CODE:
val CustomHeaderPlugin = createApplicationPlugin(name = "CustomHeaderPlugin") {
    onCall { call ->
        call.response.headers.append("X-Custom-Header", "Hello, world!")
    }
}

----------------------------------------

TITLE: Configuring Digest Authentication Provider in Ktor
DESCRIPTION: Configuration of the digest authentication provider including realm setting, digest provider setup, and principal validation.

LANGUAGE: kotlin
CODE:
install(Authentication) {
    digest("auth-digest") {
        realm = "Access to the '/' path"
        digestProvider { userName, realm ->
            userTable[userName]
        }
        validate { credentials ->
            if (credentials.userName.isNotEmpty()) {
                UserIdPrincipal(credentials.userName)
            } else {
                null
            }
        }
    }
}

routing {
    authenticate("auth-digest") {
        get("/") {
            call.respondText("Hello, ${call.principal<UserIdPrincipal>()?.name}!")
        }
    }
}

----------------------------------------

TITLE: Running Resource Routing Sample in Ktor
DESCRIPTION: Command to execute the resource routing sample in the Gradle project. This command should be run from the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :resource-routing:run

----------------------------------------

TITLE: Configuring Docker Port Mapping
DESCRIPTION: Shows how to map container ports to host ports for the runDocker task using the Ktor plugin configuration.

LANGUAGE: kotlin
CODE:
ktor {
    docker {
        portMappings.set(listOf(
            io.ktor.plugin.features.DockerPortMapping(
                80,
                8080,
                io.ktor.plugin.features.DockerPortMappingProtocol.TCP
            )
        ))
    }
}

----------------------------------------

TITLE: Running Ktor JSON Client Example
DESCRIPTION: Gradle command to execute the client-json-kotlinx sample project. This command runs the client application that demonstrates JSON serialization functionality.

LANGUAGE: bash
CODE:
./gradlew :client-json-kotlinx:run

----------------------------------------

TITLE: Running Ktor Conditional Headers Sample
DESCRIPTION: Command to execute the conditional headers sample application using Gradle. The application runs on localhost:8080 and demonstrates caching headers for static resources.

LANGUAGE: bash
CODE:
./gradlew :conditional-headers:run

----------------------------------------

TITLE: Building and Running Docker Image for Ktor Application
DESCRIPTION: Shows commands for building and running a Docker image for a Ktor application.

LANGUAGE: bash
CODE:
docker build -t my-application .
docker run -p 8080:8080 my-application

----------------------------------------

TITLE: Configuring Pebble Template Loading in Ktor
DESCRIPTION: This snippet demonstrates how to configure the PebbleEngine.Builder to load templates from the 'templates' package in the classpath.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.pebble.*

fun main() {
    embeddedServer(Netty, port = 8080, host = "0.0.0.0") {
        install(Pebble) {
            templateDir = "templates"
        }
        // ...
    }.start(wait = true)
}

----------------------------------------

TITLE: Configuring Call-Level Caching Headers in Ktor
DESCRIPTION: This snippet demonstrates how to set caching headers at the call level in Ktor. It applies different caching strategies based on whether a user is logged in or not.

LANGUAGE: kotlin
CODE:
routing {
    get("/api/v1") {
        val userIsLoggedIn = true // Check if user is logged in
        if (userIsLoggedIn) {
            call.caching = CachingOptions(CacheControl.NoCache(CacheControl.Visibility.Private))
        } else {
            call.caching = CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 3600))
        }
        call.respondText("Hello, API!")
    }
}

----------------------------------------

TITLE: Running Ktor SSE Server
DESCRIPTION: Command to start the Ktor SSE server using Gradle from the repository root directory.

LANGUAGE: bash
CODE:
./gradlew :server-sse:run

----------------------------------------

TITLE: Creating Dockerfile for Ktor Application (Maven)
DESCRIPTION: Provides a Dockerfile for building and running a Ktor application using Maven, including dependency caching and multi-stage build process.

LANGUAGE: docker
CODE:
# Stage 1: Cache Maven dependencies
FROM maven:3.8-amazoncorretto-21 AS cache
WORKDIR /app
COPY pom.xml .
RUN mvn dependency:go-offline

# Stage 2: Build Application
FROM maven:3.8-amazoncorretto-21 AS build
WORKDIR /app
COPY --from=cache /root/.m2 /root/.m2
COPY . .
RUN mvn clean package

# Stage 3: Create the Runtime Image
FROM amazoncorretto:21-slim AS runtime
EXPOSE 8080
WORKDIR /app
COPY --from=build /app/target/*-with-dependencies.jar app.jar
ENTRYPOINT ["java", "-jar", "app.jar"]

----------------------------------------

TITLE: Running Ktor JWT Authentication Sample
DESCRIPTION: Command to run the JWT authentication sample application using Gradle. This command should be executed from the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :auth-jwt-rs256:run

----------------------------------------

TITLE: Running Ktor Client Testing Sample with Gradle
DESCRIPTION: This command runs the Ktor client testing sample using Gradle. It should be executed from the repository's root folder.

LANGUAGE: bash
CODE:
./gradlew :client-testing-mock:run

----------------------------------------

TITLE: Configuring JVM Metrics in Ktor
DESCRIPTION: Demonstrates how to set up JVM-specific metrics monitoring using Micrometer's meter binders.

LANGUAGE: kotlin
CODE:
install(MicrometerMetrics) {
    meterBinders = listOf(
        JvmMemoryMetrics(),
        JvmGcMetrics(),
        ProcessorMetrics()
    )
    registry = appMicrometerRegistry
}

----------------------------------------

TITLE: Pebble Template Example for Ktor
DESCRIPTION: This HTML snippet shows a sample Pebble template that displays a greeting and a user's name.

LANGUAGE: html
CODE:
<html>
<body>
<h1>Hello, {{ user.name }}!</h1>
</body>
</html>

----------------------------------------

TITLE: Error message reference
DESCRIPTION: Example of Java error message mentioned in release notes

LANGUAGE: java
CODE:
java.lang.NoClassDefFoundError: kotlinx/atomicfu/AtomicFU

----------------------------------------

TITLE: Running Ktor Client Sample Project with Gradle
DESCRIPTION: This command executes the Ktor Client sample project using Gradle. It should be run from the root directory of the repository.

LANGUAGE: bash
CODE:
./gradlew :tutorial-client-get-started:run

----------------------------------------

TITLE: Implementing HTTP Request Retry Logic with HttpSend in Kotlin
DESCRIPTION: This code snippet demonstrates how to use the HttpSend plugin in Ktor to intercept HTTP requests and implement a retry mechanism based on the response status code. It retries the request if the response status is in the 4xx or 5xx range.

LANGUAGE: kotlin
CODE:
val client = HttpClient {
    plugin(HttpSend) {
        intercept { request ->
            val response = execute(request)
            if (response.status.value in 400..599) {
                execute(request)
            } else {
                response
            }
        }
    }
}

----------------------------------------

TITLE: Running Ktor Basic Auth Sample
DESCRIPTION: Command to run the basic authentication sample project using Gradle. The command should be executed from the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :auth-basic-hash-table:run

----------------------------------------

TITLE: Setting Environment Variables for Google OAuth Credentials
DESCRIPTION: Commands to set the GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET environment variables for macOS/Linux and Windows systems. These credentials are required for OAuth authentication with Google APIs.

LANGUAGE: shell
CODE:
# macOS/Linux
export GOOGLE_CLIENT_ID=yourClientId
export GOOGLE_CLIENT_SECRET=yourClientSecret

# Windows
setx GOOGLE_CLIENT_ID yourClientId
setx GOOGLE_CLIENT_SECRET yourClientSecret

----------------------------------------

TITLE: Initializing Digest Authentication Provider in Ktor
DESCRIPTION: Basic setup for installing the digest authentication provider in a Ktor application.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.auth.*
// ...
install(Authentication) {
    digest {
        // Configure digest authentication
    }
}

----------------------------------------

TITLE: Configuring Conditional Headers in Ktor
DESCRIPTION: Demonstrates how to configure conditional headers (Etag and Last-Modified) for CSS resources in a Ktor application. Shows implementation of version checking for conditional content delivery.

LANGUAGE: kotlin
CODE:
install(ConditionalHeaders) {
    version { call, content ->
        when (call.request.local.uri) {
            "/styles.css" -> listOf(
                EntityTagVersion("v1"), // Etag header
                LastModifiedVersion(LocalDateTime
                    .of(2014, 11, 7, 0, 0)
                    .toInstant(ZoneOffset.UTC)
                )
            )
            else -> emptyList()
        }
    }
}

----------------------------------------

TITLE: Configuring Session Encryption in Ktor 3.0.x
DESCRIPTION: Example of configuring session encryption with backward compatibility in Ktor 3.0.x.

LANGUAGE: kotlin
CODE:
install(Sessions) {
  cookie<UserSession>("user_session") {
    // ...
    transform(
      SessionTransportTransformerEncrypt(
        secretEncryptKey, // your encrypt key here
        secretSignKey, // your sign key here
        backwardCompatibleRead = true
      )
    )
  }
}

----------------------------------------

TITLE: Configuring Database Connection in Ktor with Exposed (Kotlin)
DESCRIPTION: This snippet shows how to configure the database connection in a Ktor application using Exposed. It connects to a PostgreSQL database with specified host, port, database name, user, and password.

LANGUAGE: kotlin
CODE:
fun Application.configureDatabases() {
    Database.connect(
        "jdbc:postgresql://localhost:5432/ktor_tutorial_db",
        user = "postgresql",
        password = "password"
    )
}

----------------------------------------

TITLE: Setting Retry Conditions and Custom Delay in HttpRequestRetry
DESCRIPTION: This snippet demonstrates how to set custom retry conditions based on response status and exceptions, as well as specifying a custom delay between retries.

LANGUAGE: kotlin
CODE:
install(HttpRequestRetry) {
    maxRetries = 5
    retryIf { request, response ->
        !response.status.isSuccess()
    }
    retryOnExceptionIf { request, cause -> 
        cause is NetworkError 
    }
    delayMillis { retry -> 
        retry * 3000L 
    } // retries in 3, 6, 9, etc. seconds
}

----------------------------------------

TITLE: Running Ktor Bearer Authentication Sample
DESCRIPTION: This command runs the bearer authentication sample project using Gradle. It should be executed in the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :auth-bearer:run

----------------------------------------

TITLE: Running Ktor WebSocket Application with Gradle
DESCRIPTION: Command to run the Ktor WebSocket application using Gradle wrapper from the repository root directory. The application provides endpoints for viewing tasks and creating new ones via WebSocket connection.

LANGUAGE: bash
CODE:
./gradlew :tutorial-server-websockets:run

----------------------------------------

TITLE: Creating User Digest Table in Ktor
DESCRIPTION: Implementation of a user table containing usernames and their corresponding MD5 digest hashes for authentication.

LANGUAGE: kotlin
CODE:
private val userTable = mapOf(
    "jetbrains" to getMd5Digest("jetbrains:Access to the '/' path:foobar"),
    "admin" to getMd5Digest("admin:Access to the '/' path:password")
)

private fun getMd5Digest(str: String): String {
    val md = MessageDigest.getInstance("MD5")
    return md.digest(str.toByteArray()).joinToString("") { 
        "%02x".format(it) 
    }
}

----------------------------------------

TITLE: Configuring Port in Ktor application.conf
DESCRIPTION: This snippet demonstrates how to set the port in the application.conf file for a Ktor application, using the PORT environment variable from Heroku.

LANGUAGE: hocon
CODE:
ktor {
    deployment {
        port = 8080
        port = ${?PORT}
    }
}

----------------------------------------

TITLE: Handling File Upload in Ktor 3.0.x
DESCRIPTION: Example of handling file upload using ByteReadChannel in Ktor 3.0.x, replacing the deprecated streamProvider() method.

LANGUAGE: kotlin
CODE:
fun Application.main() {
    routing {
        post("/upload") {
            val multipart = call.receiveMultipart()
            multipart.forEachPart { partData ->
                if (partData is PartData.FileItem) {
                    var fileName = partData.originalFileName as String
                    val file = File("uploads/$fileName")
                    partData.provider().copyAndClose(file.writeChannel())
                }
                // ...
            }
        }
    }
}

----------------------------------------

TITLE: Ktor Shutdown URL Console Output
DESCRIPTION: This snippet shows the expected console output when the shutdown URL is accessed. It indicates that the server is going down in response to the shutdown request.

LANGUAGE: text
CODE:
WARN  Application - Shutdown URL was called: server is going down

----------------------------------------

TITLE: HTTP Proxy Configuration Using ProxyBuilder
DESCRIPTION: Demonstrates how to configure an HTTP proxy using the ProxyBuilder factory in Ktor client.

LANGUAGE: kotlin
CODE:
val client = HttpClient() {
    engine {
        proxy = ProxyBuilder.http("http://sample-proxy-server:3128/")
    }
}

----------------------------------------

TITLE: Running Ktor Digest Auth Sample
DESCRIPTION: Command to run the digest authentication sample project using Gradle. The command should be executed from the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :auth-digest:run

----------------------------------------

TITLE: Running Ktor Client SSE Sample Application
DESCRIPTION: Command to start the Ktor client SSE sample application using Gradle. This should be executed after starting the server in a separate tab.

LANGUAGE: bash
CODE:
./gradlew :client-sse:run

----------------------------------------

TITLE: Defining User Session Data Class
DESCRIPTION: Creates a data class for storing user session information.

LANGUAGE: kotlin
CODE:
data class UserSession(val name: String)

----------------------------------------

TITLE: App Engine Plugin Configuration in Gradle
DESCRIPTION: Configures the App Engine plugin settings including deploy and run configurations.

LANGUAGE: kotlin
CODE:
appengine {
    deploy {
        version = "1"
        projectId = "GCLOUD_CONFIG"
    }
    run {
        port = 8080
        host = "0.0.0.0"
    }
}

----------------------------------------

TITLE: Setting FormFieldLimit in Ktor 3.0.x
DESCRIPTION: Example of overriding the default limit for receiving binary and file items in Ktor 3.0.x.

LANGUAGE: kotlin
CODE:
val multipart = call.receiveMultipart(formFieldLimit = 100.MB())

----------------------------------------

TITLE: Running Ktor EngineMain YAML Sample with Gradle
DESCRIPTION: Command to execute the Ktor EngineMain YAML sample project using Gradle. This command should be run from the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :engine-main-yaml:run

----------------------------------------

TITLE: JVM-specific HTTP Proxy Configuration
DESCRIPTION: Shows JVM-specific HTTP proxy configuration using Java's Proxy class with InetSocketAddress.

LANGUAGE: kotlin
CODE:
val client = HttpClient() {
    engine {
        proxy = Proxy(Proxy.Type.HTTP, InetSocketAddress("sample-proxy-server", 3128))
    }
}

----------------------------------------

TITLE: Running Client Upload Component
DESCRIPTION: Command to execute the client component that performs the file upload to the server. Should be run after the server is started.

LANGUAGE: bash
CODE:
./gradlew :client-upload-binary-data:run

----------------------------------------

TITLE: Configuring CBOR WebSocket Serialization
DESCRIPTION: Shows how to configure CBOR serialization for WebSockets using KotlinxWebsocketSerializationConverter.

LANGUAGE: kotlin
CODE:
install(WebSockets) {
    contentConverter = KotlinxWebsocketSerializationConverter(Cbor)
}

----------------------------------------

TITLE: Installing Ktor Gradle Plugin for Docker Deployment
DESCRIPTION: Shows how to add the Ktor Gradle plugin to the build.gradle file for Docker deployment capabilities. The plugin version is set using a variable.

LANGUAGE: kotlin
CODE:
plugins {
    id("io.ktor.plugin") version "%ktor_version%"
}

LANGUAGE: groovy
CODE:
plugins {
    id "io.ktor.plugin" version "%ktor_version%"
}

----------------------------------------

TITLE: Configuring Default Server in Ktor 3.0.x
DESCRIPTION: Example of configuring a default server using embeddedServer in Ktor 3.0.x, showing changes in environment and connector configuration.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.cio.*
import io.ktor.server.engine.*
import org.slf4j.helpers.NOPLogger

fun defaultServer(module: Application.() -> Unit) =
  embeddedServer(CIO,
    environment = applicationEnvironment { log = NOPLogger.NOP_LOGGER },
    configure = {
      connector {
          port = 8080
      }
    },
    module
  )

----------------------------------------

TITLE: Running Ktor Raw Data Sample Project
DESCRIPTION: Command to execute the sample project from the repository root directory using Gradle wrapper

LANGUAGE: bash
CODE:
./gradlew :post-raw-data:run

----------------------------------------

TITLE: Installing ContentEncoding Plugin in Ktor Client
DESCRIPTION: Basic setup for installing the ContentEncoding plugin in a Ktor HTTP client using CIO engine.

LANGUAGE: kotlin
CODE:
import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.compression.*
//...
val client = HttpClient(CIO) {
    install(ContentEncoding)
}

----------------------------------------

TITLE: Starting Server Component for File Upload
DESCRIPTION: Command to start the server component that will receive file uploads. Must be executed from the repository root directory.

LANGUAGE: bash
CODE:
./gradlew :post-raw-data:run

----------------------------------------

TITLE: Sending Template Response in Ktor
DESCRIPTION: Demonstrates how to send a template response using the call.respond function with a specific content.

LANGUAGE: kotlin
CODE:
get("/index") {
    val user = User(1, "John")
    call.respond(FreeMarkerContent("index.ftl", mapOf("user" to user)))
}

----------------------------------------

TITLE: Basic Proxy Configuration Structure in Ktor Client
DESCRIPTION: Shows the basic structure for configuring a proxy in Ktor HTTP client using the engine function and proxy property.

LANGUAGE: kotlin
CODE:
val client = HttpClient() {
    engine {
        proxy = // Create proxy configuration
    }
}

----------------------------------------

TITLE: Configuring Reflection for GraalVM in Ktor
DESCRIPTION: GraalVM requires a JSON configuration file for applications using reflection. This snippet shows the location of the reflect-config.json file used for Ktor applications.

LANGUAGE: json
CODE:
"src/main/resources/META-INF/native-image/reflect-config.json"

----------------------------------------

TITLE: Using HttpClient with Resource Cleanup
DESCRIPTION: Demonstrates proper resource cleanup using the 'use' function for single-request scenarios.

LANGUAGE: kotlin
CODE:
val status = HttpClient().use { client ->
    // ...
}

----------------------------------------

TITLE: Running Ktor Client Form Submission Example
DESCRIPTION: Command to execute the client form submission example using Gradle. This command runs the client application that submits form data to a server.

LANGUAGE: bash
CODE:
./gradlew :client-submit-form:run

----------------------------------------

TITLE: Custom Handling of Non-2xx Responses in Ktor Client
DESCRIPTION: This snippet shows how to use handleResponseExceptionWithRequest to customize the handling of non-2xx responses. It raises a custom MissingPageException for 404 responses instead of the default ClientRequestException.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    expectSuccess = true
    HttpResponseValidator {
        handleResponseExceptionWithRequest { exception, _ ->
            val clientException = exception as? ClientRequestException
                ?: return@handleResponseExceptionWithRequest
            val exceptionResponse = clientException.response
            if (exceptionResponse.status.value == 404) {
                val exceptionResponseText = exceptionResponse.bodyAsText()
                throw MissingPageException(exceptionResponse.call.request.url, exceptionResponseText)
            }
        }
    }
}

----------------------------------------

TITLE: HTTP Proxy Authentication Configuration
DESCRIPTION: Demonstrates how to configure basic authentication for HTTP proxy using the Proxy-Authorization header.

LANGUAGE: kotlin
CODE:
val client = HttpClient() {
    defaultRequest {
        val credentials = Base64.getEncoder().encodeToString("jetbrains:foobar".toByteArray())
        header(HttpHeaders.ProxyAuthorization, "Basic $credentials")
    }
}

----------------------------------------

TITLE: Configuring Port in Application.conf
DESCRIPTION: Demonstrates port configuration using HOCON format in application.conf, showing how to use environment variables.

LANGUAGE: hocon
CODE:
ktor {
    deployment {
        port = ${?PORT}
    }
    application {
        modules = [ com.example.ApplicationKt.module ]
    }
}

----------------------------------------

TITLE: Setting Environment Variable for Ktor
DESCRIPTION: Commands to set the KTOR_ENV environment variable for different operating systems. Shows both macOS/Linux and Windows command variants.

LANGUAGE: shell
CODE:
# macOS/Linux
export KTOR_ENV=dev
   
# Windows
setx KTOR_ENV dev

----------------------------------------

TITLE: Using CommandLineConfig in Ktor 3.0.x
DESCRIPTION: Example of using CommandLineConfig to parse command-line arguments in Ktor 3.0.x, replacing the removed commandLineEnvironment function.

LANGUAGE: kotlin
CODE:
fun main(args: Array<String>) {
    embeddedServer(Netty, CommandLineConfig(args) { configure() })
        .start(wait = true)
}

fun CommandLineConfig.configure() {
    environment = commandLineEnvironment(arguments)
    configure {
        connector { port = 8080 }
    }
    module {
        routing {
            get("/") {
                call.respondText("Hello, world!")
            }
        }
    }
}

----------------------------------------

TITLE: Running Ktor Client Response Validation Example
DESCRIPTION: Command to execute the Ktor client example for validating 2xx responses. This command should be run in the repository's root directory to start the client application.

LANGUAGE: bash
CODE:
./gradlew :client-validate-2xx-response:run

----------------------------------------

TITLE: Complete DefaultRequest Configuration Example
DESCRIPTION: Comprehensive example showing DefaultRequest configuration with URL components and custom headers for all client requests.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    defaultRequest {
        url {
            protocol = URLProtocol.HTTPS
            host = "ktor.io"
            path("docs/")
            parameters.append("key", "value")
        }
        header("X-Custom-Header", "Hello")
    }
}

----------------------------------------

TITLE: Installing Logging Plugin in Ktor Client
DESCRIPTION: Demonstrates how to install the Logging plugin in a Ktor client configuration block. This snippet shows the basic structure for adding a plugin to a Ktor client.

LANGUAGE: kotlin
CODE:
val client = HttpClient {
    install(Logging)
}

----------------------------------------

TITLE: Configuring XML WebSocket Serialization
DESCRIPTION: Demonstrates XML serialization setup for WebSockets using KotlinxWebsocketSerializationConverter.

LANGUAGE: kotlin
CODE:
install(WebSockets) {
    contentConverter = KotlinxWebsocketSerializationConverter(XML)
}

----------------------------------------

TITLE: Running Ktor Embedded Server with Multiple Connectors
DESCRIPTION: Command to run the sample Ktor server with multiple connectors using Gradle. This command should be executed in the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :embedded-server-multiple-connectors:run

----------------------------------------

TITLE: Using testApplication in Ktor 3.0.x
DESCRIPTION: Example of using testApplication function with explicit module loading in Ktor 3.0.x, replacing the removed withTestApplication and withApplication functions.

LANGUAGE: kotlin
CODE:
import com.example.plugins.*
import io.ktor.client.request.*
import io.ktor.client.statement.*
import io.ktor.http.*
import io.ktor.server.testing.*
import kotlin.test.*


class ApplicationTest {
  @Test
  fun testRoot() = testApplication {
    application {
      configureRouting()
    }
    client.get("/").apply {
      assertEquals(HttpStatusCode.OK, status)
      assertEquals("Hello World!", bodyAsText())
    }
  }
}

----------------------------------------

TITLE: Running Ktor Custom Plugin Sample
DESCRIPTION: Command to execute the custom plugin sample project using Gradle from the repository root directory.

LANGUAGE: bash
CODE:
./gradlew :client-custom-plugin:run

----------------------------------------

TITLE: HTTP POST Request with Method Override
DESCRIPTION: This HTTP request demonstrates how to use the X-Http-Method-Override header to send a DELETE request using the POST method. This is useful when clients are limited to certain HTTP methods but need to interact with endpoints that use other methods.

LANGUAGE: http
CODE:
POST http://localhost:8080/
Content-Type: application/json
X-Http-Method-Override: DELETE

{
  "key": "value"
}

----------------------------------------

TITLE: Installing HttpCookies Plugin in Ktor Client
DESCRIPTION: This snippet shows how to install the HttpCookies plugin in a Ktor client configuration block. It enables automatic cookie handling between requests.

LANGUAGE: kotlin
CODE:
val client = HttpClient {
    install(HttpCookies)
}

----------------------------------------

TITLE: Authorization Header Example
DESCRIPTION: Example of an Authorization header containing Base64 encoded credentials.

LANGUAGE: text
CODE:
Authorization: Basic amV0YnJhaW5zOmZvb2Jhcg

----------------------------------------

TITLE: Running Ktor XHttpMethodOverride Demo
DESCRIPTION: Gradle command to run the XHttpMethodOverride sample project from the repository root directory.

LANGUAGE: bash
CODE:
./gradlew :json-kotlinx-method-override:run

----------------------------------------

TITLE: Adding Coroutines Dependencies to Gradle
DESCRIPTION: Adds coroutines dependencies to the gradle/libs.versions.toml file for use in Kotlin Multiplatform projects.

LANGUAGE: Kotlin
CODE:
[versions]
coroutines = "1.7.3"

[libraries]
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" }

----------------------------------------

TITLE: Running Ktor JavaScript Client Sample
DESCRIPTION: Command to run the Ktor JavaScript client engine sample in a browser environment. The --continuous flag allows for automatic reloading upon code changes.

LANGUAGE: bash
CODE:
./gradlew :client-engine-js:jsBrowserProductionRun --continuous

----------------------------------------

TITLE: Configuring Distribution Statistics for Micrometer Metrics
DESCRIPTION: Shows how to configure distribution statistics for metrics collection, including percentile precision and SLA boundaries.

LANGUAGE: kotlin
CODE:
install(MicrometerMetrics) {
    distributionStatisticConfig = DistributionStatisticConfig.Builder()
        .percentilesHistogram(true)
        .percentiles(0.5, 0.75, 0.9, 0.95, 0.99)
        .sla(Duration.ofMillis(100))
        .sla(Duration.ofMillis(500))
        .build()
    registry = appMicrometerRegistry
}

----------------------------------------

TITLE: Response Time Measurement Plugin
DESCRIPTION: Implements a plugin that measures request-response time using call attributes to share state between handlers.

LANGUAGE: kotlin
CODE:
val ResponseTimePlugin = createClientPlugin("ResponseTimePlugin") {
    val requestTime = AttributeKey<Long>("RequestTime")
    onRequest { request ->
        request.attributes.put(requestTime, System.currentTimeMillis())
    }
    onResponse { response ->
        val startTime = response.call.attributes[requestTime]
        val endTime = System.currentTimeMillis()
        println("Request time: ${endTime - startTime} ms")
    }
}

----------------------------------------

TITLE: Retrieving Call ID in Server
DESCRIPTION: Example of retrieving the call ID from a request header in a Ktor server implementation.

LANGUAGE: kotlin
CODE:
fun Application.module() {
    install(CallId) {
        retrieveFromHeader(HttpHeaders.XRequestId)
    }
}

----------------------------------------

TITLE: Running Ktor Events Sample with Gradle
DESCRIPTION: This command executes the Gradle task to run the Ktor events sample project. It should be run from the root directory of the repository.

LANGUAGE: bash
CODE:
./gradlew :events:run

----------------------------------------

TITLE: Adding Coroutines Core Dependency to Common Source Set
DESCRIPTION: Adds the kotlinx-coroutines-core dependency to the commonMain source set in the shared/build.gradle.kts file.

LANGUAGE: Kotlin
CODE:
commonMain {
    dependencies {
        implementation(libs.kotlinx.coroutines.core)
        implementation(libs.ktor.client.core)
    }
}

----------------------------------------

TITLE: Running CORS Server for Ktor JavaScript Client
DESCRIPTION: Command to run the CORS server example, which needs to be updated to allow cross-origin requests from any host before running this sample.

LANGUAGE: bash
CODE:
./gradlew :cors:run

----------------------------------------

TITLE: Ktor Target Platform Presets
DESCRIPTION: List of supported target presets for different platforms including JVM, iOS, watchOS, tvOS, macOS, and Linux. Each platform lists its specific architecture and platform variants.

LANGUAGE: markdown
CODE:
- jvm
- iosArm32
- iosArm64
- iosX64
- iosSimulatorArm64
- watchosArm32
- watchosArm64
- watchosX86
- watchosX64
- watchosSimulatorArm64
- tvosArm64
- tvosX64
- tvosSimulatorArm64
- macosX64
- macosArm64
- linuxX64

----------------------------------------

TITLE: Custom Validation for 2xx Responses in Ktor Client
DESCRIPTION: This snippet demonstrates how to use the validateResponse function to add custom validation for 2xx responses. It checks for error details in a JSON response and raises a CustomResponseException.

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    install(ContentNegotiation) {
        json()
    }
    HttpResponseValidator {
        validateResponse { response ->
            val text = response.bodyAsText()
            if (text.contains("error")) {
                val errorResponse = Json.decodeFromString<ErrorResponse>(text)
                throw CustomResponseException(errorResponse)
            }
        }
    }
}

----------------------------------------

TITLE: Complete CallId Plugin Configuration
DESCRIPTION: Full example of configuring the CallId plugin with both generation and header addition functionality.

LANGUAGE: kotlin
CODE:
install(CallId) {
    generate { "new-call-id" }
    addToHeader(HttpHeaders.XCallId)
}

----------------------------------------

TITLE: Running Ktor Session Server Application
DESCRIPTION: Command to run the session cookie server application using Gradle wrapper. The server will start on localhost:8080 with endpoints for login and logout operations.

LANGUAGE: bash
CODE:
./gradlew :session-cookie-server:run

----------------------------------------

TITLE: Enabling Internet Permission in Android Manifest
DESCRIPTION: Adds the INTERNET permission to the Android manifest file to allow the app to access the internet.

LANGUAGE: XML
CODE:
<manifest>
    <uses-permission android:name="android.permission.INTERNET" />
    <application>
        ...
    </application>
</manifest>

----------------------------------------

TITLE: Running Ktor Darwin Engine Sample with Gradle
DESCRIPTION: This command executes the Ktor Darwin engine sample project. It uses Gradle to run the release executable native target from the project's root directory.

LANGUAGE: bash
CODE:
./gradlew :client-engine-darwin:runReleaseExecutableNative

----------------------------------------

TITLE: Specifying Main Application Class in Maven POM for Ktor
DESCRIPTION: XML configuration in pom.xml to specify the main application class for a Ktor project. This is a crucial step in preparing the project for assembly into a fat JAR.

LANGUAGE: XML
CODE:
<properties>
    <main.class>com.example.ApplicationKt</main.class>
</properties>

----------------------------------------

TITLE: Creating MockEngine for Ktor Client Testing in Kotlin
DESCRIPTION: This snippet demonstrates how to create a MockEngine instance with a custom handler for simulating HTTP responses in Ktor client tests.

LANGUAGE: kotlin
CODE:
val mockEngine = MockEngine { request ->
    respond(
        content = ByteReadChannel("[{\"id\": 1, \"name\": \"Test\"}, {\"id\": 2, \"name\": \"Test 2\"}]"),
        status = HttpStatusCode.OK,
        headers = headersOf(HttpHeaders.ContentType, "application/json")
    )
}

----------------------------------------

TITLE: Building Ktor Application with Gradle
DESCRIPTION: This command builds the Ktor application using Gradle. It should be run from the project's root directory.

LANGUAGE: shell
CODE:
./gradlew build

----------------------------------------

TITLE: Version number examples in code
DESCRIPTION: Code references showing version numbers in different contexts, including browserProductionWebpack, watchosDeviceArm64 target, and version-specific configurations.

LANGUAGE: markdown
CODE:
browserProductionWebpack\nwatchosDeviceArm64\nversion: 1.8.22\nversion: 2.3.5\nversion: 3.0.0-rc-2

----------------------------------------

TITLE: Running Ktor Client Timeout Example
DESCRIPTION: Command to execute the client timeout example from the repository root. The example demonstrates timeout behavior with a requestTimeoutMillis of 3000ms against a server with 2-second delay.

LANGUAGE: bash
CODE:
./gradlew :client-timeout:run

----------------------------------------

TITLE: Creating Procfile for Heroku Deployment
DESCRIPTION: This snippet shows the content of a Procfile, which specifies the command to start the Ktor application on Heroku.

LANGUAGE: plaintext
CODE:
web: ./build/install/ktor-get-started-sample/bin/ktor-get-started-sample

----------------------------------------

TITLE: Configuring SSL for Java Engine in Ktor Client
DESCRIPTION: This code shows how to configure SSL for the Java engine in Ktor client by passing SSLContext to the sslContext function inside the config block.

LANGUAGE: kotlin
CODE:
val client = HttpClient(Java) {
    engine {
        config {
            sslContext(SslSettings.getSslContext())
            // If you need to specify a custom HostnameVerifier
            // hostnameVerifier(HostnameVerifier { _, _ -> true })
        }
    }
}

----------------------------------------

TITLE: Configuring Shutdown URL in HOCON Configuration File
DESCRIPTION: This snippet shows how to configure a shutdown URL in a Ktor application.conf file using HOCON format. It sets the ktor.deployment.shutdown.url property.

LANGUAGE: shell
CODE:
ktor {
    deployment {
        shutdown.url = "/shutdown"
    }
}

----------------------------------------

TITLE: Building Ktor Application with Gradle
DESCRIPTION: This command builds the Ktor application using Gradle. It should be run from the project's root directory.

LANGUAGE: shell
CODE:
./gradlew build

----------------------------------------

TITLE: Testing Specific Item Endpoint with curl
DESCRIPTION: curl command to test a specific item endpoint, requesting compressed JSON data for item 'A'.

LANGUAGE: bash
CODE:
curl -v --compress --header "Accept: application/json" http://localhost:8080/v1/item/A

----------------------------------------

TITLE: Sample Output of Ktor Client Logging
DESCRIPTION: This snippet shows an example of the expected output when running the client-logging sample. It displays the request and response data, including the HTTP method and common headers.

LANGUAGE: plaintext
CODE:
REQUEST: https://ktor.io/
METHOD: HttpMethod(value=GET)
COMMON HEADERS
-> Accept: */*
-> Accept-Charset: UTF-8
...

----------------------------------------

TITLE: Configuring Logging Plugin in Ktor Client
DESCRIPTION: Shows how to configure the Logging plugin in a Ktor client. This example demonstrates setting the logger, logging level, and a condition for filtering log messages.

LANGUAGE: kotlin
CODE:
val client = HttpClient {
    install(Logging) {
        logger = Logger.DEFAULT
        level = LogLevel.HEADERS
        filter { request ->
            request.url.host.contains("ktor.io")
        }
    }
}

----------------------------------------

TITLE: Sending Mustache Template Response in Ktor
DESCRIPTION: This snippet demonstrates how to send a Mustache template as a response in a Ktor route. It uses MustacheContent to render the 'index.hbs' template with a User object.

LANGUAGE: kotlin
CODE:
routing {
    get("/") {
        call.respond(MustacheContent("index.hbs", mapOf("user" to User("John"))))
    }
}

----------------------------------------

TITLE: Installing Session Authentication Provider in Ktor
DESCRIPTION: Shows how to install and configure the session authentication provider in Ktor server. This requires the ktor-server-auth and ktor-server-sessions dependencies.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.sessions.*
//...
install(Authentication) {
    session<UserSession> {
        // Configure session authentication
    }
}

----------------------------------------

TITLE: Running Ktor Application for Serving Static Content
DESCRIPTION: This command runs the Ktor application from the project's root directory using Gradle. After execution, the application will be accessible at http://0.0.0.0:8080.

LANGUAGE: shell
CODE:
./gradlew run

----------------------------------------

TITLE: Sample JSON Response for Specific Item
DESCRIPTION: Example JSON response when requesting a specific item, showing a key-value pair.

LANGUAGE: json
CODE:
{
  "key": "A",
  "value": "Apache"
}

----------------------------------------

TITLE: Sample Output of Ktor Client Logging
DESCRIPTION: This snippet shows an example of the logged output from the Ktor client, including request details such as the URL, HTTP method, and headers.

LANGUAGE: plaintext
CODE:
FINEST: [VERBOSE] REQUEST: https://ktor.io/
METHOD: HttpMethod(value=GET)
COMMON HEADERS
-> Accept: */*
-> Accept-Charset: UTF-8
...

----------------------------------------

TITLE: Defining a Basic Resource Class in Kotlin
DESCRIPTION: This snippet demonstrates how to create a simple resource class for the '/articles' path using the @Resource annotation.

LANGUAGE: kotlin
CODE:
import io.ktor.resources.*

@Resource("/articles")
class Articles()

----------------------------------------

TITLE: Creating New Branch from Main in Bash
DESCRIPTION: This command creates a new branch from the 'main' branch of the upstream repository. The contributor should replace 'your_branch_name' with a descriptive name for their changes.

LANGUAGE: Bash
CODE:
git checkout -b your_branch_name upstream/main

----------------------------------------

TITLE: Receiving Byte Array in Ktor Route
DESCRIPTION: Shows how to receive a request body as a byte array in a Ktor route and respond with a success message.

LANGUAGE: kotlin
CODE:
post("/byte-array") {
    val body = call.receive<ByteArray>()
    call.respondText("Successfully received ${body.decodeToString()}")
}

----------------------------------------

TITLE: Testing Root Endpoint with Curl
DESCRIPTION: Curl command to test the root endpoint of the Ktor sample project, requesting JSON response.

LANGUAGE: bash
CODE:
curl -v --compressed --header "Accept: application/json" http://localhost:8080/v1

----------------------------------------

TITLE: Expected Output of Ktor Client Cookies Example
DESCRIPTION: This snippet shows the expected console output when running the client-cookies sample. It demonstrates that the client maintains session data across multiple requests, incrementing a reload count while preserving the session ID.

LANGUAGE: plaintext
CODE:
Session ID is 123abc. Reload count is 1.
Session ID is 123abc. Reload count is 2.
Session ID is 123abc. Reload count is 3.

----------------------------------------

TITLE: App Engine YAML Configuration
DESCRIPTION: YAML configuration file for Google App Engine defining runtime settings and entry point.

LANGUAGE: yaml
CODE:
runtime: java17
instance_class: F1

handlers:
  - url: /.*
    script: auto

entrypoint: java -jar google-appengine-standard-all.jar

----------------------------------------

TITLE: Adding Original Ktor Docs Repository as Remote in Bash
DESCRIPTION: This command adds the original Ktor documentation repository as a Git remote named 'upstream'. This allows the contributor to sync their fork with the main repository.

LANGUAGE: Bash
CODE:
git remote add upstream https://github.com/ktorio/ktor-documentation.git

----------------------------------------

TITLE: WebSockets Test Migration Example
DESCRIPTION: Example showing how to migrate WebSocket testing code from v1.6.x to v2.0.x API

LANGUAGE: kotlin
CODE:
//1.6.x
handleWebSocketConversation("/echo") { incoming, outgoing ->
    outgoing.send(Frame.Text("Hello, World!"))
    val response = incoming.receive() as Frame.Text
    assertEquals("Hello, World!", response.readText())
}

LANGUAGE: kotlin
CODE:
//2.0.x
testApplication {
    val client = createClient {
        install(WebSockets)
    }
    client.webSocket("/echo") {
        send("Hello, World!")
        val response = receiveDeserialized<String>()
        assertEquals("Hello, World!", response)
    }
}

----------------------------------------

TITLE: Running Ktor JSON Serialization Sample with Gradle
DESCRIPTION: Command to run the Ktor sample project for JSON serialization using Gradle. This starts the server on localhost:8080.

LANGUAGE: bash
CODE:
./gradlew :json-kotlinx:run

----------------------------------------

TITLE: Copying Keystore for Ktor Client
DESCRIPTION: Copies the generated keystore from the server example to the client SSL configuration example directory.

LANGUAGE: Bash
CODE:
cp snippets/ssl-engine-main/keystore.jks snippets/client-ssl-config/keystore.jks

----------------------------------------

TITLE: Creating Basic Custom Header Plugin in Ktor
DESCRIPTION: Shows how to create a simple plugin that adds a custom header to each request using createClientPlugin function.

LANGUAGE: kotlin
CODE:
package com.example.plugins

import io.ktor.client.plugins.api.*

val CustomHeaderPlugin = createClientPlugin("CustomHeaderPlugin") {
    // Configure the plugin ...
}

----------------------------------------

TITLE: Running Ktor Logging Example with Gradle
DESCRIPTION: This command runs the Ktor logging example using Gradle. After execution, users should open a specific URL to trigger and observe the customized log messages in the console.

LANGUAGE: bash
CODE:
./gradlew :logging:run

----------------------------------------

TITLE: Configuring URL Pattern for Ktor Servlet in web.xml
DESCRIPTION: XML configuration for setting up the URL pattern for the Ktor servlet in web.xml file.

LANGUAGE: XML
CODE:
<servlet-mapping>
    <servlet-name>KtorServlet</servlet-name>
    <url-pattern>/</url-pattern>
</servlet-mapping>

----------------------------------------

TITLE: Building Fat JAR for Ktor Application (Bash)
DESCRIPTION: This command creates a fat JAR containing the Ktor application using Gradle. It's a prerequisite step before running Docker Compose.

LANGUAGE: Bash
CODE:
./gradlew :tutorial-server-docker-compose:buildFatJar

----------------------------------------

TITLE: Starting Ktor SSL Server
DESCRIPTION: Executes the Gradle task to run the SSL-enabled Ktor server from the ssl-engine-main example.

LANGUAGE: Bash
CODE:
./gradlew :ssl-engine-main:run

----------------------------------------

TITLE: Adding Ktor Client Core Dependency - Multiplatform Configuration
DESCRIPTION: Adds the ktor-client-core dependency to the commonMain source set in a multiplatform project's build.gradle.kts file.

LANGUAGE: kotlin
CODE:
sourceSets {
    commonMain {
        dependencies {
            implementation(libs.ktor.client.core)
        }
    }
}

----------------------------------------

TITLE: Running Integration Tests for Task Manager Application
DESCRIPTION: This command runs all integration tests in the 'integration-test' module of the Task Manager application. It's used to verify the functionality of the entire application stack.

LANGUAGE: shell
CODE:
./gradlew :integration-test:test

----------------------------------------

TITLE: Logback Configuration for CallId Logging
DESCRIPTION: XML configuration for Logback to include call IDs in log output.

LANGUAGE: xml
CODE:
<pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %X{call-id} %-5level %logger{36} - %msg%n</pattern>

----------------------------------------

TITLE: Running Ktor Server JAR File
DESCRIPTION: This command runs the Ktor server application by executing the JAR file created in the build process. After running this command, the server will be accessible at http://0.0.0.0:8080.

LANGUAGE: bash
CODE:
java -jar target/tutorial-server-get-started-maven-0.0.1-jar-with-dependencies.jar

----------------------------------------

TITLE: Creating SSL Keystore for Ktor Server
DESCRIPTION: Generates a keystore using keytool command for SSL configuration in the Ktor server. The keystore is created with specific parameters including alias, key algorithm, key size, validity, and subject alternative names.

LANGUAGE: Bash
CODE:
keytool -keystore snippets/ssl-engine-main/keystore.jks -alias sampleAlias -genkeypair -keyalg RSA -keysize 4096 -validity 3 -dname 'CN=localhost, OU=ktor, O=ktor, L=Unspecified, ST=Unspecified, C=US' -ext 'SAN:c=DNS:localhost,IP:127.0.0.1'

----------------------------------------

TITLE: Creating Default HTTP Client
DESCRIPTION: Demonstrates creating an HTTP client with the default engine based on available dependencies

LANGUAGE: kotlin
CODE:
val client = HttpClient()

----------------------------------------

TITLE: Running Ktor Server for Task Manager Application
DESCRIPTION: This command starts the Ktor server for the Task Manager application. The server will run at http://0.0.0.0:8080/ and provide endpoints for listing all tasks and filtering tasks by priority.

LANGUAGE: shell
CODE:
./gradlew :server:run

----------------------------------------

TITLE: Setting Request Headers
DESCRIPTION: Shows how to add multiple headers to a request using the headers function.

LANGUAGE: kotlin
CODE:
client.post("http://localhost:8080/post") {
    headers {
        append(HttpHeaders.Accept, "text/html")
        append(HttpHeaders.Authorization, "Bearer xyz")
        append(HttpHeaders.UserAgent, "ktor client")
    }
}

----------------------------------------

TITLE: Running Ktor Form Authentication Sample
DESCRIPTION: Command to run the Ktor form authentication sample project using Gradle. The application starts a server that listens on localhost:8080 and requires jetbrains/foobar credentials for authentication.

LANGUAGE: bash
CODE:
./gradlew :auth-form-html-dsl:run

----------------------------------------

TITLE: Building Fat JAR for AWS Elastic Beanstalk Deployment
DESCRIPTION: Command to generate a fat JAR file for deployment to AWS Elastic Beanstalk. The resulting JAR file will be located at build/libs/aws-elastic-beanstalk-1.0-SNAPSHOT-all.jar.

LANGUAGE: bash
CODE:
./gradlew :aws-elastic-beanstalk:buildFatJar

----------------------------------------

TITLE: Basic Engine Configuration
DESCRIPTION: Shows common engine configuration options like thread count and request timeout

LANGUAGE: kotlin
CODE:
val client = HttpClient(CIO) {
    engine {
        threadsCount = 4
        requestTimeout = 100000
    }
}

----------------------------------------

TITLE: Testing Embedded Ktor Server in Kotlin/Native
DESCRIPTION: Command to run the native tests for the sample project using Gradle.

LANGUAGE: bash
CODE:
./gradlew :embedded-server-native:nativeTest

----------------------------------------

TITLE: WWW-Authenticate Header Example
DESCRIPTION: Example of a WWW-Authenticate response header using digest authentication scheme, showing required fields like realm, nonce, and algorithm.

LANGUAGE: http
CODE:
WWW-Authenticate: Digest
        realm="Access to the '/' path",
        nonce="e4549c0548886bc2",
        algorithm="MD5"

----------------------------------------

TITLE: Running Ktor Form/Session Authentication Sample
DESCRIPTION: Command to run the Ktor sample project for form-based session authentication using Gradle. This command should be executed in the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :auth-form-session:run

----------------------------------------

TITLE: Running Ktor Project Locally
DESCRIPTION: Command to run the Ktor project locally using Gradle. This will start the application, making it accessible at http://localhost:5000/.

LANGUAGE: bash
CODE:
./gradlew :aws-elastic-beanstalk:run

----------------------------------------

TITLE: Running the Ktor Parallel Requests Sample
DESCRIPTION: Command to execute the parallel requests sample in the repository's root directory. This sample demonstrates sending multiple asynchronous requests using Ktor.

LANGUAGE: bash
CODE:
./gradlew :client-parallel-requests:run

----------------------------------------

TITLE: Running Ktor Project with Thymeleaf Auto-reload
DESCRIPTION: Command to run the Thymeleaf auto-reload sample project using Gradle. This command should be executed in the repository's root directory to start the Ktor application.

LANGUAGE: bash
CODE:
./gradlew :thymeleaf-auto-reload:run

----------------------------------------

TITLE: Implementing Ktor Client in Shared Kotlin Code
DESCRIPTION: Implements a Ktor HTTP client in the shared Kotlin code to make a GET request and receive a response as a string.

LANGUAGE: Kotlin
CODE:
import io.ktor.client.*
import io.ktor.client.request.*
import io.ktor.client.statement.*

class Greeting {
    private val client = HttpClient()

    @Throws(Exception::class)
    suspend fun greeting(): String {
        val response = client.get("https://ktor.io/")
        return response.bodyAsText()
    }
}

----------------------------------------

TITLE: Running OpenLDAP Server with Docker Compose
DESCRIPTION: Command to start the OpenLDAP server using Docker Compose. This runs a containerized instance of OpenLDAP populated with sample data.

LANGUAGE: bash
CODE:
docker compose up

----------------------------------------

TITLE: Running Ktor Application
DESCRIPTION: Gradle command to run the Ktor application with auto-reload enabled.

LANGUAGE: bash
CODE:
./gradlew :autoreload-engine-main:run

----------------------------------------

TITLE: Running Ktor Example via Gradle
DESCRIPTION: Command to run a specific Ktor example (auth-basic) using Gradle from the terminal

LANGUAGE: bash
CODE:
./gradlew :auth-basic:run

----------------------------------------

TITLE: Building and Running Ktor Tomcat WAR Sample with Docker
DESCRIPTION: These commands build the WAR file, create a Docker image, and run the application in a Docker container. After execution, the application will be accessible at http://localhost:8080/tomcat-war/.

LANGUAGE: bash
CODE:
./gradlew :tomcat-war:war
docker build -t my-application snippets/tomcat-war
docker run -p 8080:8080 my-application

----------------------------------------

TITLE: Defining Ktor Client and Engine Libraries in Gradle
DESCRIPTION: Defines the Ktor client core and engine libraries in the gradle/libs.versions.toml file for use in dependency declarations.

LANGUAGE: Kotlin
CODE:
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }

----------------------------------------

TITLE: Starting Ktor Application with Gradle
DESCRIPTION: Command to run the Ktor application using Gradle wrapper. The application will be accessible at http://localhost:8080/ with credentials jetbrains/foobar.

LANGUAGE: bash
CODE:
./gradlew :auth-ldap:run

----------------------------------------

TITLE: Building Ktor Project with Auto-reload
DESCRIPTION: Gradle command to enable continuous building of the project, which is necessary for auto-reload functionality to detect changes in output files.

LANGUAGE: bash
CODE:
./gradlew -t :autoreload-engine-main:build

----------------------------------------

TITLE: Testing JSON Deserialization in Ktor
DESCRIPTION: Reference to a file containing HTTP POST request for testing JSON deserialization. This sends a JSON object to the server for processing.

LANGUAGE: http
CODE:
post.http

----------------------------------------

TITLE: Running HTTP/2 Push Sample with Gradle
DESCRIPTION: Command to execute the HTTP/2 push sample application using Gradle wrapper. After running, the application will be accessible at https://localhost:8443/.

LANGUAGE: bash
CODE:
./gradlew :http2-push:run

----------------------------------------

TITLE: Bearer Token HTTP Request Example
DESCRIPTION: This snippet demonstrates an HTTP GET request using Bearer authentication. It shows how to include the access token in the Authorization header using the Bearer scheme.

LANGUAGE: http
CODE:
GET /protected HTTP/1.1
Host: example.com
Authorization: Bearer token123

----------------------------------------

TITLE: Running Ktor Custom Plugin Sample Project
DESCRIPTION: Command to run the custom plugin sample project using Gradle. This command should be executed in the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :custom-plugin:run

----------------------------------------

TITLE: Building Ktor Project with Auto-reload
DESCRIPTION: Command to enable continuous project rebuilding in development mode. The -t flag enables continuous build mode, which watches for file changes.

LANGUAGE: bash
CODE:
./gradlew -t :autoreload-embedded-server:build

----------------------------------------

TITLE: Running Ktor Application with Gradle
DESCRIPTION: Command to run the Ktor application using Gradle wrapper. The application will be accessible at http://0.0.0.0:8080.

LANGUAGE: shell
CODE:
./gradlew run

----------------------------------------

TITLE: Running Ktor Jetty WAR Sample Locally
DESCRIPTION: Command to run the Ktor Jetty WAR sample project locally using Gradle. After execution, the application will be accessible at http://localhost:8080/.

LANGUAGE: bash
CODE:
./gradlew :jetty-war:run

----------------------------------------

TITLE: Implementing HTTPS Security for Compression in Ktor
DESCRIPTION: This example demonstrates how to mitigate the BREACH attack by disabling compression for cross-site requests in Ktor.

LANGUAGE: kotlin
CODE:
install(Compression) {
    gzip {
        condition {
            request.headers[HttpHeaders.Referrer]?.startsWith("https://my.domain/") == true
        }
    }
}

----------------------------------------

TITLE: SimplePlugin Console Output
DESCRIPTION: Example console output when running the SimplePlugin, which displays a greeting message.

LANGUAGE: console
CODE:
2021-10-14 14:54:08.269 [main] INFO  Application - Autoreload is disabled because the development mode is off.
SimplePlugin is installed!
2021-10-14 14:54:08.900 [main] INFO  Application - Responding at http://0.0.0.0:8080

----------------------------------------

TITLE: Running Ktor Caching Headers Sample via Gradle
DESCRIPTION: Command to execute the caching headers sample project using Gradle wrapper from the repository root directory.

LANGUAGE: bash
CODE:
./gradlew :caching-headers:run

----------------------------------------

TITLE: Running Ktor HTTPS Redirect Sample
DESCRIPTION: Gradle command to run the HTTPS redirect sample application. Launches the server which will redirect HTTP traffic (port 8080) to HTTPS (port 8443).

LANGUAGE: bash
CODE:
./gradlew :ssl-engine-main-redirect:run

----------------------------------------

TITLE: Running Ktor Default Request Sample with Gradle
DESCRIPTION: Command to execute the Ktor default request sample project using the Gradle wrapper from the repository root directory.

LANGUAGE: bash
CODE:
./gradlew :client-default-request:run

----------------------------------------

TITLE: Running Ktor Task Management Application
DESCRIPTION: Command to run the Ktor web application using Gradle. After execution, the application will be accessible at port 8080 with endpoints for viewing tasks and managing them through a web interface.

LANGUAGE: bash
CODE:
./gradlew :tutorial-server-web-application:run

----------------------------------------

TITLE: CustomHeaderPlugin HTTP Response
DESCRIPTION: HTTP response header showing the custom header added by the CustomHeaderPlugin.

LANGUAGE: http
CODE:
HTTP/1.1 200 OK
X-Custom-Header: Hello, world!

----------------------------------------

TITLE: Running Ktor CSS DSL Sample
DESCRIPTION: Command to run the CSS DSL sample project using Gradle. After execution, the example can be accessed at http://localhost:8080/html-dsl.

LANGUAGE: bash
CODE:
./gradlew :css-dsl:run

----------------------------------------

TITLE: Running Socket Client
DESCRIPTION: Command to run the client application in quiet mode with plain console output

LANGUAGE: bash
CODE:
./gradlew :sockets-client:run -q --console=plain

----------------------------------------

TITLE: Running Ktor Micrometer Metrics Sample
DESCRIPTION: Command to run the Micrometer metrics sample application using Gradle.

LANGUAGE: bash
CODE:
./gradlew :micrometer-metrics:run

----------------------------------------

TITLE: Running Ktor Task Application with Gradle
DESCRIPTION: Command to run the Ktor task application using Gradle wrapper from the repository's root directory. This launches the server on port 8080.

LANGUAGE: bash
CODE:
./gradlew :tutorial-server-routing-and-requests:run

----------------------------------------

TITLE: Expected Response Format
DESCRIPTION: Example response from the /date endpoint when called with the date parameter set to 20170501.

LANGUAGE: text
CODE:
The date is 2017-05-01

----------------------------------------

TITLE: Sample Telnet Session Output
DESCRIPTION: Example interaction showing the connection and greeting exchange between client and server

LANGUAGE: bash
CODE:
% ≈
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Please enter your name
JetBrains
Hello, JetBrains!

----------------------------------------

TITLE: Socket Client Interaction Example
DESCRIPTION: Example showing the interactive console input/output when running the client application

LANGUAGE: bash
CODE:
Please enter your name
JetBrains
Hello, JetBrains!

----------------------------------------

TITLE: Running Ktor Custom Plugin Sample
DESCRIPTION: Gradle command to run the custom plugin base API sample project. Executes from the repository root directory and starts a local server.

LANGUAGE: bash
CODE:
./gradlew :custom-plugin-base-api:run

----------------------------------------

TITLE: Running Ktor REST API Server
DESCRIPTION: Command to run the Ktor server application using Gradle. The server exposes endpoints for task management and includes both JSON API endpoints and a static HTML interface.

LANGUAGE: bash
CODE:
./gradlew :tutorial-server-restful-api:run

----------------------------------------

TITLE: Running Ktor Dropwizard Metrics Sample
DESCRIPTION: Command to run the Dropwizard Metrics sample application using Gradle. The application will start and expose metrics on localhost:8080, with metrics being logged every 10 seconds.

LANGUAGE: bash
CODE:
./gradlew :dropwizard-metrics:run

----------------------------------------

TITLE: Running Ktor Sockets Server with Gradle
DESCRIPTION: Command to run the sockets server example using Gradle wrapper

LANGUAGE: bash
CODE:
./gradlew :sockets-server:run

----------------------------------------

TITLE: Running Ktor Rate Limiting Sample
DESCRIPTION: Command to execute the rate limiting sample application using Gradle. This will start a local server with rate-limited endpoints that can be accessed through different URLs.

LANGUAGE: bash
CODE:
./gradlew :rate-limit:run

----------------------------------------

TITLE: Running Ktor Authorization Plugin Sample
DESCRIPTION: Command to run the custom authorization plugin sample application using Gradle. After running, the server will be available at localhost:8080 with protected admin and profile routes.

LANGUAGE: bash
CODE:
./gradlew :custom-plugin-authorization:run

----------------------------------------

TITLE: Building Ktor Server Project with Maven
DESCRIPTION: This command builds an assembly for the Ktor server application using Maven. It should be executed from the project's root directory.

LANGUAGE: bash
CODE:
mvn package

----------------------------------------

TITLE: Running Ktor Embedded Server Module Sample in Bash
DESCRIPTION: This command runs the Ktor sample project for embedded server modules using Gradle. It should be executed in the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :embedded-server-modules:run

----------------------------------------

TITLE: Running Ktor File Upload Sample Project
DESCRIPTION: Command to run the Ktor file upload sample project using Gradle. This command executes the 'upload-file' subproject.

LANGUAGE: bash
CODE:
./gradlew :upload-file:run

----------------------------------------

TITLE: Verifying Environment Variables
DESCRIPTION: Commands to verify that the Google OAuth environment variables are set correctly using the echo command.

LANGUAGE: shell
CODE:
echo $GOOGLE_CLIENT_ID
echo $GOOGLE_CLIENT_SECRET

----------------------------------------

TITLE: Running Ktor Application with Gradle
DESCRIPTION: Gradle command to run the custom environment sample application from the repository root directory.

LANGUAGE: bash
CODE:
./gradlew :engine-main-custom-environment:run

----------------------------------------

TITLE: Running Docker Compose for Ktor Application (Bash)
DESCRIPTION: This command starts the Docker Compose setup for the Ktor application. It uses the project directory specified and runs the containers defined in the compose file.

LANGUAGE: Bash
CODE:
docker compose --project-directory snippets/tutorial-server-docker-compose up

----------------------------------------

TITLE: Running Ktor EngineMain Sample with Gradle
DESCRIPTION: Command to execute the Ktor sample application using Gradle from the repository root directory. Uses the Gradle wrapper to run the engine-main subproject.

LANGUAGE: bash
CODE:
./gradlew :engine-main:run

----------------------------------------

TITLE: Running Ktor Client Streaming Download Sample
DESCRIPTION: Command to execute the Ktor client streaming download sample. The client will save the downloaded file in the default temporary-file directory.

LANGUAGE: bash
CODE:
./gradlew :client-download-streaming:run

----------------------------------------

TITLE: Running the Ktor OAuth Sample
DESCRIPTION: Gradle command to run the OAuth Google authentication sample application from the repository root.

LANGUAGE: bash
CODE:
./gradlew :auth-oauth-google:run

----------------------------------------

TITLE: Running Ktor FreeMarker Sample Application
DESCRIPTION: Command to run the FreeMarker sample application using Gradle. After execution, the application will be accessible at http://localhost:8080/index.

LANGUAGE: bash
CODE:
./gradlew :freemarker:run

----------------------------------------

TITLE: Running Ktor Single-Page Application Project
DESCRIPTION: This bash command runs the single-page application sample in the Ktor project. It uses Gradle to execute the project from the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :single-page-application:run

----------------------------------------

TITLE: Running HTTP/2 Jetty Server
DESCRIPTION: Gradle command to run the HTTP/2 Jetty sample project. After execution, the server will be available at https://localhost:8443 for HTTP/2 protocol verification.

LANGUAGE: bash
CODE:
./gradlew :http2-jetty:run

----------------------------------------

TITLE: Running Ktor WebSocket Echo Server with Gradle
DESCRIPTION: This command executes the Ktor WebSocket echo server sample using Gradle. It should be run from the repository's root directory. After running, the server can be tested using Postman or a Ktor client.

LANGUAGE: bash
CODE:
./gradlew :server-websockets:run

----------------------------------------

TITLE: Running Ktor Request Validation Sample Project
DESCRIPTION: This command executes the Ktor sample project for request validation. It uses Gradle to run the project from the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :request-validation:run

----------------------------------------

TITLE: Running Ktor Session Server
DESCRIPTION: Gradle command to start the Ktor server application that demonstrates header-based session management.

LANGUAGE: bash
CODE:
./gradlew :session-header-server:run

----------------------------------------

TITLE: Building and Running Prometheus Docker Container
DESCRIPTION: Commands to build a Docker image for Prometheus and run it as a container for monitoring Ktor metrics.

LANGUAGE: bash
CODE:
docker build -t my-prometheus .

LANGUAGE: bash
CODE:
docker run -p 9090:9090 my-prometheus

----------------------------------------

TITLE: Starting Ktor WebSocket Server
DESCRIPTION: Command to start the required Ktor server component for WebSocket serialization example.

LANGUAGE: bash
CODE:
./gradlew :server-websockets-serialization:run

----------------------------------------

TITLE: Building Ktor Fat JAR
DESCRIPTION: Command to create a fat JAR containing the Ktor application with XForwardedHeader plugin

LANGUAGE: bash
CODE:
./gradlew :forwarded-header:buildFatJar

----------------------------------------

TITLE: Running Ktor Server Sample Project using Gradle
DESCRIPTION: This command runs the Ktor server sample project using Gradle. It should be executed in the repository's root directory. After running, the server output can be accessed at http://0.0.0.0:8080/.

LANGUAGE: bash
CODE:
./gradlew :tutorial-server-get-started:run

----------------------------------------

TITLE: Running Individual Ktor Subproject
DESCRIPTION: Command to run a specific subproject using Gradle wrapper. Example shows running the '1_hello' subproject.

LANGUAGE: shell
CODE:
./gradlew :1_hello:run

----------------------------------------

TITLE: Building Ktor Project with Gradle
DESCRIPTION: Command to build all subprojects in the Ktor migration project using Gradle wrapper

LANGUAGE: shell
CODE:
./gradlew build

----------------------------------------

TITLE: Referencing Ktor Source Files in Documentation
DESCRIPTION: Markdown syntax examples for referencing complete source files and specific functions from Ktor code examples in documentation

LANGUAGE: kotlin
CODE:
```kotlin
```
{src="snippets/autohead/src/main/kotlin/com/example/Application.kt"}

LANGUAGE: kotlin
CODE:
```kotlin
```
{src="snippets/autohead/src/main/kotlin/com/example/Application.kt" include-symbol="main"}

----------------------------------------

TITLE: Running Ktor WebSocket Serialization Sample in Bash
DESCRIPTION: Command to execute the Ktor WebSocket serialization sample project using Gradle. This command should be run from the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :server-websockets-serialization:run

----------------------------------------

TITLE: Building Ktor Application using Gradle
DESCRIPTION: Command to build the Ktor application from the project's root directory using Gradle wrapper.

LANGUAGE: shell
CODE:
./gradlew build

----------------------------------------

TITLE: Running Ktor Application with Gradle
DESCRIPTION: Command to run the built Ktor application using Gradle wrapper. The application will be accessible at http://0.0.0.0:8080.

LANGUAGE: shell
CODE:
./gradlew run

----------------------------------------

TITLE: Building Ktor Application for Serving Static Content
DESCRIPTION: This command builds the Ktor application from the project's root directory using Gradle.

LANGUAGE: shell
CODE:
./gradlew build

----------------------------------------

TITLE: Cloning Forked Ktor Documentation Repository in Bash
DESCRIPTION: This command clones the forked Ktor documentation repository to the contributor's local machine. It requires the contributor to replace 'YOUR-USERNAME' with their actual GitHub username.

LANGUAGE: Bash
CODE:
git clone git@github.com:YOUR-USERNAME/ktor-documentation.git

----------------------------------------

TITLE: Running Ktor Static Content Server
DESCRIPTION: Command to run the static content server sample using Gradle. This will start a server on localhost:8080 that serves static content from a ZIP file.

LANGUAGE: bash
CODE:
./gradlew :static-zip:run

----------------------------------------

TITLE: Running Ktor Shutdown URL Sample Project with Gradle
DESCRIPTION: This command runs the Ktor sample project for the Shutdown URL plugin using Gradle. It should be executed in the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :shutdown-url:run

----------------------------------------

TITLE: Building Ktor Application with Gradle
DESCRIPTION: Command to build the Ktor application using Gradle wrapper from the project's root directory.

LANGUAGE: shell
CODE:
./gradlew build

----------------------------------------

TITLE: Running Ktor Application using Gradle
DESCRIPTION: Command to run the Ktor application from the project's root directory using Gradle wrapper. The application will be accessible at http://0.0.0.0:8080.

LANGUAGE: shell
CODE:
./gradlew run

----------------------------------------

TITLE: Configuring Gretty Plugin in Gradle for Tomcat
DESCRIPTION: Gradle configuration for the Gretty plugin to run a servlet application on Tomcat, specifying the servlet container and port.

LANGUAGE: Groovy
CODE:
gretty {
    servletContainer = "tomcat9"
    contextPath = "/"
    logbackConfigFile = "src/main/resources/logback.xml"
}

----------------------------------------

TITLE: Running Ktor Static Resources Project
DESCRIPTION: Command to run the static resources sample project using Gradle wrapper from the repository root directory. After running, the server will be accessible at different endpoints showing various static content serving configurations.

LANGUAGE: bash
CODE:
./gradlew :static-resources:run

----------------------------------------

TITLE: Setting Google OAuth Environment Variables
DESCRIPTION: Commands for setting the required Google OAuth client credentials as environment variables on both macOS/Linux and Windows systems.

LANGUAGE: shell
CODE:
# macOS/Linux
export GOOGLE_CLIENT_ID=yourClientId
export GOOGLE_CLIENT_SECRET=yourClientSecret
   
# Windows
setx GOOGLE_CLIENT_ID yourClientId
setx GOOGLE_CLIENT_SECRET yourClientSecret

----------------------------------------

TITLE: Running Ktor Template Application with Gradle
DESCRIPTION: Command to run the Ktor application using Gradle wrapper. Once started, the application will be accessible at http://0.0.0.0:8080.

LANGUAGE: shell
CODE:
./gradlew run

----------------------------------------

TITLE: Building Ktor Application with Gradle
DESCRIPTION: Command to build the Ktor application using Gradle wrapper from the project root directory.

LANGUAGE: shell
CODE:
./gradlew build

----------------------------------------

TITLE: Defining Nested Resource Classes in Kotlin
DESCRIPTION: This snippet illustrates how to create nested resource classes to represent multiple path segments, such as '/articles/new'.

LANGUAGE: kotlin
CODE:
@Resource("/articles")
class Articles() {
    @Resource("new")
    class New(val parent: Articles = Articles())
}

----------------------------------------

TITLE: Building and Running Ktor Jetty WAR Sample with Docker
DESCRIPTION: Commands to build the WAR file, create a Docker image, and run the Ktor Jetty WAR sample in a Docker container. After execution, the application will be accessible at http://localhost:8080/jetty-war.

LANGUAGE: bash
CODE:
./gradlew :jetty-war:war
docker build -t my-application snippets/jetty-war
docker run -p 8080:8080 my-application

----------------------------------------

TITLE: Running Ktor Client Authentication Example
DESCRIPTION: Gradle command to execute the client authentication sample project. When run, it connects to an authentication server and should receive a 'Hello, jetbrains!' response.

LANGUAGE: bash
CODE:
./gradlew :client-auth-basic:run

----------------------------------------

TITLE: Building Ktor Template Application with Gradle
DESCRIPTION: Command to build the Ktor application using Gradle wrapper from the project's root directory.

LANGUAGE: shell
CODE:
./gradlew build

----------------------------------------

TITLE: Running Ktor SSE Client
DESCRIPTION: Command to start the corresponding SSE client application using Gradle from the repository root directory.

LANGUAGE: bash
CODE:
./gradlew :client-sse:run

----------------------------------------

TITLE: Installing and Configuring Webjars Plugin in Ktor
DESCRIPTION: This snippet demonstrates how to install the Webjars plugin and configure it to serve assets on a custom path ('/assets') instead of the default '/webjars' path.

LANGUAGE: kotlin
CODE:
import io.ktor.server.application.*
import io.ktor.server.webjars.*

fun main() {
    embeddedServer(Netty, port = 8080, host = "0.0.0.0") {
        install(Webjars) {
            path = "/assets" //defaults to /webjars
        }
        // ...
    }.start(wait = true)
}

----------------------------------------

TITLE: Running Ktor Basic Authentication Sample with Gradle
DESCRIPTION: This command runs the Ktor basic authentication sample project using Gradle. It should be executed in the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :auth-basic:run

----------------------------------------

TITLE: Running Type-Safe Requests Example with Gradle
DESCRIPTION: Gradle command to execute the client-type-safe-requests sample application. This command needs to be run with the resource-routing server example running.

LANGUAGE: bash
CODE:
./gradlew :client-type-safe-requests:run

----------------------------------------

TITLE: Running Ktor Hello World Application with Gradle
DESCRIPTION: This command runs the Ktor application using Gradle. It should be executed from the project's root directory. After running, the application will be accessible at http://0.0.0.0:8080.

LANGUAGE: shell
CODE:
./gradlew run

----------------------------------------

TITLE: Running Slow Server Simulation with Gradle
DESCRIPTION: Command to execute the slow server simulation application using Gradle. This should be run from the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :simulate-slow-server:run

----------------------------------------

TITLE: Defining Customer Data Class in Kotlin
DESCRIPTION: Defines a Customer data class to represent the JSON object received in the request body.

LANGUAGE: kotlin
CODE:
data class Customer(val id: Int, val firstName: String, val lastName: String)

----------------------------------------

TITLE: Running Ktor HttpTimeout Example with Gradle
DESCRIPTION: Command to run the Ktor HttpTimeout sample project using Gradle. This command should be executed in the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :timeout:run

----------------------------------------

TITLE: Running Ktor Client Caching Example with Gradle
DESCRIPTION: This command runs the client-caching example using Gradle. The client will cache the result of the first GET request and won't send a second request. The example uses the Logging plugin to display request information in the console.

LANGUAGE: bash
CODE:
./gradlew :client-caching:run

----------------------------------------

TITLE: Running Ktor JTE Sample Project with Gradle
DESCRIPTION: This command executes the Ktor sample project that demonstrates JTE template usage. It should be run from the repository's root directory. After execution, the application will be accessible at http://localhost:8080/index.

LANGUAGE: bash
CODE:
./gradlew :jte:run

----------------------------------------

TITLE: JavaScript License Comments
DESCRIPTION: Compilation of copyright and license notices for React ecosystem packages including object-assign, scheduler, react-dom, react-jsx-runtime, and react core. All packages are under MIT license.

LANGUAGE: javascript
CODE:
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

----------------------------------------

TITLE: Configuring Route-Level Caching Headers in Ktor
DESCRIPTION: This example shows how to apply caching headers to a specific route in a Ktor application. It sets a max-age of 100 seconds for the '/index' route.

LANGUAGE: kotlin
CODE:
routing {
    route("/index") {
        install(CachingHeaders) {
            options { _ ->
                CachingOptions(CacheControl.MaxAge(maxAgeSeconds = 100))
            }
        }
    }
}

----------------------------------------

TITLE: Running Ktor Modules Sample with Gradle
DESCRIPTION: Command to run the Ktor modules sample application using Gradle from the repository root directory. After running, the server will start and expose three module endpoints on localhost:8080.

LANGUAGE: bash
CODE:
./gradlew :engine-main-modules:run

----------------------------------------

TITLE: Running Ktor HTML Templates Sample Project
DESCRIPTION: This bash command runs the Ktor HTML templates sample project using Gradle. It should be executed from the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :html-templates:run

----------------------------------------

TITLE: Sample JSON Response from Root Endpoint
DESCRIPTION: Example JSON response from the root endpoint, showing a structured object with name, items array, and date.

LANGUAGE: json
CODE:
{
  "name" : "root",
  "items" : [ {
    "key" : "A",
    "value" : "Apache"
  }, {
    "key" : "B",
    "value" : "Bing"
  } ],
  "date" : [ 2018, 3, 2 ]
}

----------------------------------------

TITLE: Running Ktor TLS Client Sockets Project
DESCRIPTION: Gradle command to execute the TLS client sockets sample project from the repository root directory. Note that this configuration accepts all certificates and should only be used for development.

LANGUAGE: bash
CODE:
./gradlew :sockets-client-tls:run

----------------------------------------

TITLE: Making Cross-Origin Request using Fetch API
DESCRIPTION: Example JavaScript code demonstrating how to make a cross-origin request to a Ktor server using the Fetch API

LANGUAGE: javascript
CODE:
fetch('http://0.0.0.0:8080/customer')

----------------------------------------

TITLE: Ktor Application Running Message (Bash)
DESCRIPTION: This snippet shows the console output indicating that the Ktor application is running and responding to requests.

LANGUAGE: bash
CODE:
[main] INFO  Application - Responding at http://0.0.0.0:8080

----------------------------------------

TITLE: Running Ktor Mustache Sample Application
DESCRIPTION: Command to run the Mustache template sample application using Gradle. After execution, the application will be accessible at http://localhost:8080/index.

LANGUAGE: bash
CODE:
./gradlew :mustache:run

----------------------------------------

TITLE: Testing JSON API Endpoint with curl
DESCRIPTION: curl command to test the JSON API endpoint, requesting compressed data with an Accept header for JSON.

LANGUAGE: bash
CODE:
curl -v --compressed --header "Accept: application/json" http://localhost:8080/v1

----------------------------------------

TITLE: Running Ktor SSL Server with Gradle
DESCRIPTION: Gradle command to run the SSL-enabled Ktor server using the generated keystore configuration.

LANGUAGE: bash
CODE:
./gradlew :ssl-engine-main:run

----------------------------------------

TITLE: Accessing MDC Values in Ktor
DESCRIPTION: Shows how to retrieve values stored in MDC during an ApplicationCall lifetime using the MDC.get() method.

LANGUAGE: kotlin
CODE:
import org.slf4j.MDC
// ...
MDC.get("name-parameter")

----------------------------------------

TITLE: Configuring Ktor Gradle Plugin
DESCRIPTION: Shows the required Gradle configuration for building fat JARs with the Ktor plugin.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("jvm")
    id("io.ktor.plugin")
}

application {
    mainClass.set("com.example.ApplicationKt")
}

----------------------------------------

TITLE: Running Ktor Interactive Website Sample Project
DESCRIPTION: This command executes the Gradle task to run the interactive website sample project. It should be run from the root directory of the repository.

LANGUAGE: bash
CODE:
./gradlew :tutorial-website-interactive:run

----------------------------------------

TITLE: Running Ktor Jackson Sample with Gradle
DESCRIPTION: Command to run the Ktor Jackson sample project using Gradle.

LANGUAGE: bash
CODE:
./gradlew :jackson:run

----------------------------------------

TITLE: Creating Keystore for HSTS-enabled Ktor Server
DESCRIPTION: This command generates a keystore file required for running the HTTPS server. It creates a self-signed certificate for localhost with a 4096-bit RSA key, valid for 3 days.

LANGUAGE: Bash
CODE:
keytool -keystore snippets/ssl-engine-main-hsts/keystore.jks -alias sampleAlias -genkeypair -keyalg RSA -keysize 4096 -validity 3 -dname 'CN=localhost, OU=ktor, O=ktor, L=Unspecified, ST=Unspecified, C=US' -ext 'SAN:c=DNS:localhost,IP:127.0.0.1'

----------------------------------------

TITLE: JWKS Configuration JSON
DESCRIPTION: JSON configuration file containing the RSA public key information for JWT verification.

LANGUAGE: json
CODE:
{
  "keys": [
    {
      "kty": "RSA",
      "e": "AQAB",
      "kid": "6f8856ed-9189-488f-9011-0ff4b6c08edc",
      "n":"tfJaLrzXILUg1U3N1KV8yJr92GHn5OtYZR7qWk1Mc4cy4JGjklYup7weMjBD9f3bBVoIsiUVX6xNcYIr0Ie0AQ"
    }
  ]
}

----------------------------------------

TITLE: Basic Server Test Migration Example
DESCRIPTION: Example showing how to migrate a basic server test from v1.6.x to v2.0.x test API

LANGUAGE: kotlin
CODE:
//1.6.x
withTestApplication({ module() }) {
    handleRequest(HttpMethod.Get, "/").apply {
        assertEquals(HttpStatusCode.OK, response.status())
        assertEquals("Hello World!", response.content)
    }
}

LANGUAGE: kotlin
CODE:
//2.0.x
testApplication {
    val response = client.get("/")
    assertEquals(HttpStatusCode.OK, response.status)
    assertEquals("Hello World!", response.bodyAsText())
}

----------------------------------------

TITLE: Building Ktor Hello World Application with Gradle
DESCRIPTION: This command builds the Ktor application using Gradle. It should be run from the project's root directory.

LANGUAGE: shell
CODE:
./gradlew build

----------------------------------------

TITLE: Deploying Ktor Application to Google App Engine
DESCRIPTION: Command to deploy the Ktor application to Google App Engine using the Gradle appengineDeploy task. This step should be performed after creating the project and App Engine application.

LANGUAGE: Bash
CODE:
./gradlew :google-appengine-standard:appengineDeploy

----------------------------------------

TITLE: Creating SSL Keystore for Ktor HTTPS Redirect
DESCRIPTION: Command to generate a keystore file with SSL certificate for localhost development. Creates a 4096-bit RSA key valid for 3 days with DNS and IP address extensions for localhost.

LANGUAGE: bash
CODE:
keytool -keystore snippets/ssl-engine-main-redirect/keystore.jks -alias sampleAlias -genkeypair -keyalg RSA -keysize 4096 -validity 3 -dname 'CN=localhost, OU=ktor, O=ktor, L=Unspecified, ST=Unspecified, C=US' -ext 'SAN:c=DNS:localhost,IP:127.0.0.1'

----------------------------------------

TITLE: Converting Modulus to Base64URL
DESCRIPTION: Complex command chain to convert RSA public key modulus from hexadecimal to Base64URL format.

LANGUAGE: shell
CODE:
echo "b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:\n    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:\n    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:\n    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:\n    2b:d0:87:b4:01" | tr -d ": \n" | xxd -p -r | base64 | tr +/ -_ | tr -d "=\n"

----------------------------------------

TITLE: Creating Basic Custom Header Plugin - Kotlin
DESCRIPTION: Example of creating a basic custom plugin class with companion object implementing BaseApplicationPlugin interface. Shows basic structure with key and install implementation.

LANGUAGE: kotlin
CODE:
class CustomHeader() {
    companion object Plugin : BaseApplicationPlugin<ApplicationCallPipeline, Configuration, CustomHeader> {
        override val key = AttributeKey<CustomHeader>("CustomHeader")
        override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomHeader {
            val plugin = CustomHeader()
            // Intercept a pipeline ...
            return plugin
        }
    }
}

----------------------------------------

TITLE: Running SSL-Enabled Ktor Server with Gradle
DESCRIPTION: Executes the Gradle task to run the SSL-enabled Ktor server. This command should be run from the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :ssl-embedded-server:run

----------------------------------------

TITLE: Creating Google Cloud Project for App Engine Deployment
DESCRIPTION: Command to create a new Google Cloud project for deploying the Ktor application. Replace <unique-project-id> with the desired project ID.

LANGUAGE: Bash
CODE:
gcloud projects create <unique-project-id> --set-as-default

----------------------------------------

TITLE: Running Ktor Static Files Sample
DESCRIPTION: Command to run the static files sample project using Gradle. After running, the server will be accessible at localhost:8080 with different endpoints demonstrating static file serving capabilities.

LANGUAGE: bash
CODE:
./gradlew :static-files:run

----------------------------------------

TITLE: Accessing Deprecated Request Address Information in Ktor 2.2.x
DESCRIPTION: This snippet demonstrates the deprecated way of accessing the host and port information from a request in Ktor 2.2.x. It uses the 'origin.host' and 'origin.port' properties, which are now deprecated.

LANGUAGE: kotlin
CODE:
get("/hello") {
    val originHost = call.request.origin.host
    val originPort = call.request.origin.port
}

----------------------------------------

TITLE: Configuring HttpsRedirect Plugin in Ktor
DESCRIPTION: Demonstrates how to configure the HttpsRedirect plugin to set HTTPS port and permanent redirect behavior. The plugin ensures all HTTP requests are redirected to their HTTPS counterparts with a 301 Moved Permanently status code.

LANGUAGE: kotlin
CODE:
install(HttpsRedirect) {
    sslPort = 8443
    permanentRedirect = true
}

----------------------------------------

TITLE: Running Ktor Curl Client Example
DESCRIPTION: Command to execute the Curl engine example from the project root directory using Gradle. Runs the native executable in release mode.

LANGUAGE: bash
CODE:
./gradlew :client-engine-curl:runReleaseExecutableNative

----------------------------------------

TITLE: Running Ktor Sample Locally with Gradle
DESCRIPTION: Command to run the Ktor sample project locally using Gradle. This will start the server, allowing access to the sample home page at http://localhost:8080/.

LANGUAGE: Bash
CODE:
./gradlew :google-appengine-standard:run

----------------------------------------

TITLE: Running Ktor Client BOM Remover Example using Gradle
DESCRIPTION: This command executes the Gradle task to run the client-bom-remover sample. It assumes that the project is set up with Gradle and the necessary dependencies are in place.

LANGUAGE: bash
CODE:
./gradlew :client-bom-remover:run

----------------------------------------

TITLE: Loading Configuration in testApplication for Ktor 3.0.x
DESCRIPTION: Example of loading configuration from a file in testApplication for Ktor 3.0.x.

LANGUAGE: kotlin
CODE:
class ApplicationTest {
    @Test
    fun testRoot() = testApplication {
        environment {
            config = MapApplicationConfig("ktor.environment" to "test")
        }
        // Test code here
    }
}

----------------------------------------

TITLE: Extending ApplicationCall to Respond with CSS in Kotlin
DESCRIPTION: This snippet shows how to extend ApplicationCall to add a respondCss method for sending CSS responses. It serializes a stylesheet into a string and sends it with the CSS content type.

LANGUAGE: kotlin
CODE:
suspend inline fun ApplicationCall.respondCss(builder: CSSBuilder.() -> Unit) {
    this.respondText(CSSBuilder().apply(builder).toString(), ContentType.Text.CSS)
}

----------------------------------------

TITLE: Sample Output: Google OAuth Authorization URL
DESCRIPTION: Example of the program output showing the Google OAuth authorization URL. Users need to open this URL in a browser to log in and obtain the authorization code for the application.

LANGUAGE: bash
CODE:
10:00:00: Executing task ' run --console=plain --quiet'...

https://accounts.google.com/o/oauth2/auth?client_id=21966501804...

----------------------------------------

TITLE: Expected JSON Response from Item Endpoint
DESCRIPTION: Example JSON response from the item endpoint, showing the structure of a single item returned by the server.

LANGUAGE: json
CODE:
{
  "key": "A",
  "value": "Apache"
}

----------------------------------------

TITLE: Running Client Call ID Example
DESCRIPTION: Command to execute the client sample application using Gradle.

LANGUAGE: bash
CODE:
./gradlew :client-call-id:run

----------------------------------------

TITLE: Deploying Ktor Application to Heroku using Git and Heroku CLI
DESCRIPTION: This set of Bash commands demonstrates the process of committing changes, logging into Heroku CLI, creating a Heroku application, and deploying the Ktor application to Heroku.

LANGUAGE: bash
CODE:
git add .
git commit -m "Prepare app for deploying"
heroku login
heroku create ktor-sample-heroku
git push heroku main

----------------------------------------

TITLE: Configuring Cookie Sessions Plugin
DESCRIPTION: Example of installing and configuring the Sessions plugin with custom cookie settings.

LANGUAGE: kotlin
CODE:
install(Sessions) {
    cookie<MyCookie>("MY_COOKIE")
}

----------------------------------------

TITLE: Expected Console Output
DESCRIPTION: Sample output showing three API requests with their corresponding call IDs and X-RequestId headers.

LANGUAGE: text
CODE:
Handling request `/call` from client with call.callId: call-id-client and X-RequestId: call-id-client
Handling request `/call` from client with call.callId: call-id-client and X-RequestId: call-id-client
Handling request `/call` from client with call.callId: call-id-client-2 and X-RequestId: call-id-client-2

----------------------------------------

TITLE: Running Docker Compose
DESCRIPTION: Command to run the application using Docker Compose from the forwarded-header directory

LANGUAGE: bash
CODE:
docker compose --project-directory snippets/forwarded-header up

----------------------------------------

TITLE: Running Client Component for File Upload
DESCRIPTION: Command to execute the client component that will upload a file to the server. Should be run after the server is started.

LANGUAGE: bash
CODE:
./gradlew :client-upload-progress:run

----------------------------------------

TITLE: Loading Docker Image from Tarball
DESCRIPTION: Demonstrates how to load a Docker image from a tarball file generated by the buildImage task.

LANGUAGE: bash
CODE:
docker load < build/jib-image.tar

----------------------------------------

TITLE: Ktor JWT Configuration
DESCRIPTION: HOCON configuration for JWT settings in Ktor application.conf file.

LANGUAGE: hocon
CODE:
jwt {
  privateKey = ${jwt_pk}
  issuer = "http://0.0.0.0:8080/"
  audience = "http://0.0.0.0:8080/login"
  realm = "MyProject"
}

----------------------------------------

TITLE: Sample Application Log Output with CallId
DESCRIPTION: This snippet shows the expected log output from the Ktor application when a request is made with a custom X-Request-ID header. It demonstrates how the CallId plugin traces the request through the application.

LANGUAGE: plaintext
CODE:
2021-10-26 18:22:55.164 [eventLoopGroupProxy-4-1] 13a3feb9-d83b-40ad-839a-d7d5cb147f54 INFO  Application - 200 OK: GET - /

----------------------------------------

TITLE: Running Configured Ktor Embedded Server
DESCRIPTION: Command to run the configured embedded server sample from the codeSnippets directory using Gradle.

LANGUAGE: bash
CODE:
./gradlew :embedded-server:runConfiguredServer

----------------------------------------

TITLE: Starting Ktor Server for SSE Sample
DESCRIPTION: Command to start the Ktor server for the SSE sample using Gradle. This should be executed before running the client application.

LANGUAGE: bash
CODE:
./gradlew :server-sse:run

----------------------------------------

TITLE: Configuring Jackson WebSocket Serialization
DESCRIPTION: Shows configuration for WebSocket serialization using Jackson converter in Ktor client.

LANGUAGE: kotlin
CODE:
install(WebSockets) {
    contentConverter = JacksonWebsocketContentConverter()
}

----------------------------------------

TITLE: Converting Exponent to Base64URL
DESCRIPTION: Command chain to convert RSA public key exponent from hexadecimal to Base64URL format.

LANGUAGE: shell
CODE:
echo 010001 | xxd -p -r | base64

----------------------------------------

TITLE: Simple HTML Document Structure
DESCRIPTION: Basic HTML markup showing a container div with a heading and paragraph element. Demonstrates fundamental HTML document structure.

LANGUAGE: html
CODE:
<div>
<h1>HTML file</h1>
<p>Contents of "html-file.txt"</p>
</div>

----------------------------------------

TITLE: Running Basic Ktor Embedded Server
DESCRIPTION: Command to run the basic embedded server sample from the codeSnippets directory using Gradle.

LANGUAGE: bash
CODE:
./gradlew :embedded-server:run

----------------------------------------

TITLE: Running Ktor Session Cookie Client Sample
DESCRIPTION: Command to run the Ktor session cookie client sample project using Gradle. This command should be executed in the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :session-cookie-client:run

----------------------------------------

TITLE: Using ApiClient with CIO Engine in Kotlin
DESCRIPTION: This code shows how to use the ApiClient class with the CIO engine to make an HTTP request and retrieve a list of users.

LANGUAGE: kotlin
CODE:
val client = ApiClient(CIO.create())
runBlocking {
    val users = client.getUsers()
    println(users)
}

----------------------------------------

TITLE: Running Ktor Sample with Nested Authentication Providers
DESCRIPTION: Command to execute the Ktor sample demonstrating nested authentication providers. This command should be run from the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :auth-form-session-nested:run

----------------------------------------

TITLE: Running Ktor DoubleReceive Sample with Gradle
DESCRIPTION: This command runs the DoubleReceive sample project using Gradle. It executes the project from the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :double-receive:run

----------------------------------------

TITLE: Running Ktor AutoHeadResponse Sample
DESCRIPTION: Command to run the AutoHeadResponse sample project using Gradle. This command should be executed from the repository's root directory.

LANGUAGE: bash
CODE:
./gradlew :autohead:run

----------------------------------------

TITLE: Configuring SSL for Android Engine in Ktor Client
DESCRIPTION: This snippet shows how to configure SSL settings for the Android engine in Ktor client using the sslManager property and SSLSocketFactory.

LANGUAGE: kotlin
CODE:
val client = HttpClient(Android) {
    engine {
        sslManager = { httpsURLConnection ->
            httpsURLConnection.sslSocketFactory = SslSettings.getSSLSocketFactory()
        }
    }
}

----------------------------------------

TITLE: Adding OkHttp Engine Dependency - Android Configuration
DESCRIPTION: Adds the ktor-client-okhttp dependency to the androidMain source set in a multiplatform project.

LANGUAGE: kotlin
CODE:
sourceSets {
    androidMain {
        dependencies {
            implementation(libs.ktor.client.okhttp)
        }
    }
}

----------------------------------------

TITLE: Running Ktor File Download Application with Gradle
DESCRIPTION: Command to start the Ktor application that serves downloadable files. The application runs on port 8080 and provides two endpoints: /download for PNG files and /downloadFromPath for TXT files.

LANGUAGE: bash
CODE:
./gradlew :download-file:run

----------------------------------------

TITLE: Running Assembled Ktor Application JAR
DESCRIPTION: Bash command to run the assembled Ktor application JAR file. This command executes the fat JAR created by the Maven Assembly plugin.

LANGUAGE: Bash
CODE:
java -jar target/tutorial-server-get-started-maven-0.0.1-jar-with-dependencies.jar

----------------------------------------

TITLE: Building and Running Docker Image with Ktor Gradle Plugin
DESCRIPTION: Command to build and run a Docker image for the Ktor application using the runDocker Gradle task.

LANGUAGE: bash
CODE:
./gradlew :deployment-ktor-plugin:runDocker

----------------------------------------

TITLE: Running WebSocket Server Tests with Gradle
DESCRIPTION: Command to execute unit tests located in src/test/kotlin/com/example directory using Gradle test task.

LANGUAGE: bash
CODE:
./gradlew :server-websockets-sharedflow:test

----------------------------------------

TITLE: Running Ktor Data Conversion Service
DESCRIPTION: Command to run the data conversion service from the repository root directory using Gradle.

LANGUAGE: bash
CODE:
./gradlew :data-conversion:run

----------------------------------------

TITLE: Running Webjars Ktor Application
DESCRIPTION: Command to run the Webjars sample application using Gradle from the repository root directory. After running, the application will be accessible at http://localhost:8080/static/index.html.

LANGUAGE: bash
CODE:
./gradlew :webjars:run

----------------------------------------

TITLE: Starting Socket Server
DESCRIPTION: Command to start the socket server application using Gradle

LANGUAGE: bash
CODE:
./gradlew :sockets-server:run

----------------------------------------

TITLE: Running Ktor OpenAPI Sample Project
DESCRIPTION: This command runs the Ktor sample project that demonstrates serving Swagger UI. It uses Gradle to execute the 'json-kotlinx-openapi' subproject.

LANGUAGE: bash
CODE:
./gradlew :json-kotlinx-openapi:run