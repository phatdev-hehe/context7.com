TITLE: GDScript Property Setters and Getters
DESCRIPTION: Examples showing how to define properties with custom setters and getters

LANGUAGE: gdscript
CODE:
var milliseconds: int = 0
var seconds: int:
    get:
        return milliseconds / 1000
    set(value):
        milliseconds = value * 1000

----------------------------------------

TITLE: Setting Control Tooltip in Godot
DESCRIPTION: Example of adding tooltips to Control-based nodes in Godot using set_tooltip(). The tooltip text is wrapped using TTR() for translation support.

LANGUAGE: gdscript
CODE:
set_tooltip(TTR("Text here."))

----------------------------------------

TITLE: Scripting HTTP Request in Godot (GDScript)
DESCRIPTION: Demonstrates how to set up an HTTP request to GitHub's API using the HTTPRequest node, connect to the request_completed signal, and parse the JSON response to print the latest Godot release name.

LANGUAGE: GDScript
CODE:
extends Node

func _ready():
    $HTTPRequest.request_completed.connect(_on_request_completed)
    $HTTPRequest.request("https://api.github.com/repos/godotengine/godot/releases/latest")

func _on_request_completed(result, response_code, headers, body):
    var json = JSON.parse_string(body.get_string_from_utf8())
    print(json["name"])

----------------------------------------

TITLE: Using Input Actions in GDScript
DESCRIPTION: This snippet demonstrates how to use input actions to detect when the right arrow key is pressed in the _process function in GDScript.

LANGUAGE: gdscript
CODE:
func _process(delta):
    if Input.is_action_pressed("ui_right"):
        # Move right.

----------------------------------------

TITLE: Basic Input Event Handling in Godot
DESCRIPTION: Demonstrates handling input events using _input() function for discrete events and _physics_process() for continuous input.

LANGUAGE: gdscript
CODE:
func _input(event):
    if event.is_action_pressed("jump"):
        jump()

func _physics_process(delta):
    if Input.is_action_pressed("move_right"):
        # Move as long as the key/button is pressed.
        position.x += speed * delta

LANGUAGE: csharp
CODE:
public override void _Input(InputEvent @event)
{
    if (@event.IsActionPressed("jump"))
    {
        Jump();
    }
}

public override void _PhysicsProcess(double delta)
{
    if (Input.IsActionPressed("move_right"))
    {
        // Move as long as the key/button is pressed.
        position.X += speed * (float)delta;
    }
}

----------------------------------------

TITLE: Creating Nodes in Godot (C#)
DESCRIPTION: Shows how to create a new node (Sprite2D in this case) from code and add it as a child of the current node using C#.

LANGUAGE: csharp
CODE:
private Sprite2D _sprite2D;

public override void _Ready()
{
    base._Ready();

    _sprite2D = new Sprite2D(); // Create a new Sprite2D.
    AddChild(_sprite2D); // Add it as a child of this node.
}

----------------------------------------

TITLE: Initializing Player Variables in GDScript
DESCRIPTION: Declares member variables for player speed and screen size. The speed variable is exported to allow adjustment in the Inspector.

LANGUAGE: GDScript
CODE:
extends Area2D

@export var speed = 400 # How fast the player will move (pixels/sec).
var screen_size # Size of the game window.

----------------------------------------

TITLE: Drag and Drop Implementation
DESCRIPTION: Complete implementation of drag and drop functionality for a Sprite2D node using mouse events.

LANGUAGE: gdscript
CODE:
extends Node

var dragging = false
var click_radius = 32 # Size of the sprite.

func _input(event):
    if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
        if (event.position - $Sprite2D.position).length() < click_radius:
            # Start dragging if the click is on the sprite.
            if not dragging and event.pressed:
                dragging = true
        # Stop dragging if the button is released.
        if dragging and not event.pressed:
            dragging = false

    if event is InputEventMouseMotion and dragging:
        # While dragging, move the sprite with the mouse.
        $Sprite2D.position = event.position

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyNode2D : Node2D
{
    private bool _dragging = false;
    private int _clickRadius = 32; // Size of the sprite.

    public override void _Input(InputEvent @event)
    {
        Sprite2D sprite = GetNodeOrNull<Sprite2D>("Sprite2D");
        if (sprite == null)
        {
            return; // No suitable node was found.
        }

        if (@event is InputEventMouseButton mouseEvent && mouseEvent.ButtonIndex == MouseButton.Left)
        {
            if ((mouseEvent.Position - sprite.Position).Length() < _clickRadius)
            {
                // Start dragging if the click is on the sprite.
                if (!_dragging && mouseEvent.Pressed)
                {
                    _dragging = true;
                }
            }
            // Stop dragging if the button is released.
            if (_dragging && !mouseEvent.Pressed)
            {
                _dragging = false;
            }
        }
        else
        {
            if (@event is InputEventMouseMotion motionEvent && _dragging)
            {
                // While dragging, move the sprite with the mouse.
                sprite.Position = motionEvent.Position;
            }
        }
    }
}

----------------------------------------

TITLE: Complete GDScript Documentation Example
DESCRIPTION: A complete example showing documentation for all possible script elements including classes, signals, enums, constants, variables, and functions with various tags and descriptions.

LANGUAGE: gdscript
CODE:
extends Node2D
## A brief description of the class's role and functionality.
##
## The description of the script, what it can do,
## and any further detail.
##
## @tutorial:             https://example.com/tutorial_1
## @tutorial(Tutorial 2): https://example.com/tutorial_2
## @experimental

## The description of a signal.
signal my_signal

## This is a description of the below enum.
enum Direction {
    ## Direction up.
    UP = 0,
    ## Direction down.
    DOWN = 1,
    ## Direction left.
    LEFT = 2,
    ## Direction right.
    RIGHT = 3,
}

## The description of a constant.
const GRAVITY = 9.8

## The description of the variable v1.
var v1

## This is a multiline description of the variable v2.[br]
## The type information below will be extracted for the documentation.
var v2: int

## If the member has any annotation, the annotation should
## immediately precede it.
@export
var v3 := some_func()

## As the following function is documented, even though its name starts with
## an underscore, it will appear in the help window.
func _fn(p1: int, p2: String) -> int:
    return 0

# The below function isn't documented and its name starts with an underscore
# so it will treated as private and will not be shown in the help window.
func _internal() -> void:
    pass

## Documenting an inner class.
##
## The same rules apply here. The documentation must
## immediately precede the class definition.
##
## @tutorial: https://example.com/tutorial
## @experimental
class Inner:
    ## Inner class variable v4.
    var v4

    ## Inner class function fn.
    func fn(): pass

----------------------------------------

TITLE: GDScript Syntactic Sugar for Node Access
DESCRIPTION: Shows GDScript-specific shortcuts for accessing nodes, including the @onready annotation and the $ operator. These features can make code more concise when getting node references.

LANGUAGE: gdscript
CODE:
@onready var sprite2d = get_node("Sprite2D")

@onready var sprite2d = $Sprite2D
@onready var animation_player = $ShieldBar/AnimationPlayer

----------------------------------------

TITLE: Handling Player Input in Godot 3D
DESCRIPTION: Processes player input to determine movement direction in the _physics_process function.

LANGUAGE: GDScript
CODE:
func _physics_process(delta):
    var direction = Vector3.ZERO

    if Input.is_action_pressed("move_right"):
        direction.x += 1
    if Input.is_action_pressed("move_left"):
        direction.x -= 1
    if Input.is_action_pressed("move_back"):
        direction.z += 1
    if Input.is_action_pressed("move_forward"):
        direction.z -= 1

LANGUAGE: C#
CODE:
public override void _PhysicsProcess(double delta)
{
    var direction = Vector3.Zero;

    if (Input.IsActionPressed("move_right"))
    {
        direction.X += 1.0f;
    }
    if (Input.IsActionPressed("move_left"))
    {
        direction.X -= 1.0f;
    }
    if (Input.IsActionPressed("move_back"))
    {
        direction.Z += 1.0f;
    }
    if (Input.IsActionPressed("move_forward"))
    {
        direction.Z -= 1.0f;
    }
}

----------------------------------------

TITLE: Asteroids-Style Spaceship Physics
DESCRIPTION: Implementation of a spaceship with thrust and rotation using RigidBody2D, demonstrating proper physics integration.

LANGUAGE: gdscript
CODE:
extends RigidBody2D

var thrust = Vector2(0, -250)
var torque = 20000

func _integrate_forces(state):
    if Input.is_action_pressed("ui_up"):
        state.apply_force(thrust.rotated(rotation))
    else:
        state.apply_force(Vector2())
    var rotation_direction = 0
    if Input.is_action_pressed("ui_right"):
        rotation_direction += 1
    if Input.is_action_pressed("ui_left"):
        rotation_direction -= 1
    state.apply_torque(rotation_direction * torque)

LANGUAGE: csharp
CODE:
using Godot;

public partial class Spaceship : RigidBody2D
{
    private Vector2 _thrust = new Vector2(0, -250);
    private float _torque = 20000;

    public override void _IntegrateForces(PhysicsDirectBodyState2D state)
    {
        if (Input.IsActionPressed("ui_up"))
            state.ApplyForce(_thrust.Rotated(Rotation));
        else
            state.ApplyForce(new Vector2());

        var rotationDir = 0;
        if (Input.IsActionPressed("ui_right"))
            rotationDir += 1;
        if (Input.IsActionPressed("ui_left"))
            rotationDir -= 1;
        state.ApplyTorque(rotationDir * _torque);
    }
}

----------------------------------------

TITLE: Complete GDScript State Machine Example
DESCRIPTION: A complete example class implementing a hierarchical state machine in GDScript following style guidelines. Demonstrates proper class structure, signal declarations, exports, and method implementations.

LANGUAGE: gdscript
CODE:
class_name StateMachine
extends Node
## Hierarchical State machine for the player.
##
## Initializes states and delegates engine callbacks ([method Node._physics_process],
## [method Node._unhandled_input]) to the state.

signal state_changed(previous, new)

@export var initial_state: Node
var is_active = true:
    set = set_is_active

@onready var _state = initial_state:
    set = set_state
@onready var _state_name = _state.name


func _init():
    add_to_group("state_machine")


func _enter_tree():
    print("this happens before the ready method!")


func _ready():
    state_changed.connect(_on_state_changed)
    _state.enter()


func _unhandled_input(event):
    _state.unhandled_input(event)


func _physics_process(delta):
    _state.physics_process(delta)


func transition_to(target_state_path, msg={}):
    if not has_node(target_state_path):
        return

    var target_state = get_node(target_state_path)
    assert(target_state.is_composite == false)

    _state.exit()
    self._state = target_state
    _state.enter(msg)
    Events.player_state_changed.emit(_state.name)


func set_is_active(value):
    is_active = value
    set_physics_process(value)
    set_process_unhandled_input(value)
    set_block_signals(not value)


func set_state(value):
    _state = value
    _state_name = _state.name


func _on_state_changed(previous, new):
    print("state changed")
    state_changed.emit()


class State:
    var foo = 0

    func _init():
        print("Hello!")

----------------------------------------

TITLE: Creating Breakpoint using GDScript Keyword
DESCRIPTION: Demonstrates how to create a persistent breakpoint in GDScript using the breakpoint keyword. This breakpoint will persist across different machines when using version control.

LANGUAGE: GDScript
CODE:
breakpoint

----------------------------------------

TITLE: Platformer Movement with CharacterBody2D in C#
DESCRIPTION: Implements basic platformer movement using CharacterBody2D and MoveAndSlide() in C#.

LANGUAGE: C#
CODE:
using Godot;

public partial class MyCharacterBody2D : CharacterBody2D
{
    private float _speed = 100.0f;
    private float _jumpSpeed = -400.0f;

    // Get the gravity from the project settings so you can sync with rigid body nodes.
    public float Gravity = ProjectSettings.GetSetting("physics/2d/default_gravity").AsSingle();

    public override void _PhysicsProcess(double delta)
    {
        Vector2 velocity = Velocity;

        // Add the gravity.
        velocity.Y += Gravity * (float)delta;

        // Handle jump.
        if (Input.IsActionJustPressed("jump") && IsOnFloor())
            velocity.Y = _jumpSpeed;

        // Get the input direction.
        float direction = Input.GetAxis("ui_left", "ui_right");
        velocity.X = direction * _speed;

        Velocity = velocity;
        MoveAndSlide();
    }
}

----------------------------------------

TITLE: Hello World Implementation
DESCRIPTION: Basic constructor implementation printing 'Hello, world!' to output in both languages.

LANGUAGE: GDScript
CODE:
func _init():
    print("Hello, world!")

LANGUAGE: C#
CODE:
public MySprite2D()
{
    GD.Print("Hello, world!");
}

----------------------------------------

TITLE: Generating Compilation Database for clangd in Godot Development
DESCRIPTION: Commands for generating compile_commands.json file for use with clangd language server. This enables code completion, diagnostics, and other IDE features. Provides two methods: generating while compiling or generating without compilation.

LANGUAGE: shell
CODE:
# Generate compile_commands.json while compiling
scons compiledb=yes

# Generate compile_commands.json without compiling
scons compiledb=yes compile_commands.json

----------------------------------------

TITLE: Instantiating Scenes in GDScript
DESCRIPTION: Shows how to load and instantiate a scene (PackedScene) in GDScript. This creates a new instance of the scene and adds it as a child node.

LANGUAGE: GDScript
CODE:
func _on_shoot():
        var bullet = preload("res://bullet.tscn").instantiate()
        add_child(bullet)

----------------------------------------

TITLE: Implementing Player Movement and Animation in C#
DESCRIPTION: Handles player input, calculates movement vector, updates position, and manages animations based on movement direction in C#.

LANGUAGE: C#
CODE:
public override void _Process(double delta)
{
    var velocity = Vector2.Zero; // The player's movement vector.

    if (Input.IsActionPressed("move_right"))
    {
        velocity.X += 1;
    }

    if (Input.IsActionPressed("move_left"))
    {
        velocity.X -= 1;
    }

    if (Input.IsActionPressed("move_down"))
    {
        velocity.Y += 1;
    }

    if (Input.IsActionPressed("move_up"))
    {
        velocity.Y -= 1;
    }

    var animatedSprite2D = GetNode<AnimatedSprite2D>("AnimatedSprite2D");

    if (velocity.Length() > 0)
    {
        velocity = velocity.Normalized() * Speed;
        animatedSprite2D.Play();
    }
    else
    {
        animatedSprite2D.Stop();
    }

    Position += velocity * (float)delta;
    Position = new Vector2(
        x: Mathf.Clamp(Position.X, 0, ScreenSize.X),
        y: Mathf.Clamp(Position.Y, 0, ScreenSize.Y)
    );

    if (velocity.X != 0)
    {
        animatedSprite2D.Animation = "walk";
        animatedSprite2D.FlipV = false;
        animatedSprite2D.FlipH = velocity.X < 0;
    }
    else if (velocity.Y != 0)
    {
        animatedSprite2D.Animation = "up";
        animatedSprite2D.FlipV = velocity.Y > 0;
    }
}

----------------------------------------

TITLE: Initializing Network as Client or Server in GDScript
DESCRIPTION: Demonstrates how to initialize the network as either a client or server using ENetMultiplayerPeer in GDScript.

LANGUAGE: gdscript
CODE:
# Create client.
var peer = ENetMultiplayerPeer.new()
peer.create_client(IP_ADDRESS, PORT)
multiplayer.multiplayer_peer = peer

# Create server.
var peer = ENetMultiplayerPeer.new()
peer.create_server(PORT, MAX_CLIENTS)
multiplayer.multiplayer_peer = peer

----------------------------------------

TITLE: Implementing Basic 2D Character Navigation in GDScript
DESCRIPTION: A GDScript implementation for character movement using NavigationAgent2D. Handles path following, movement speed, and target position updates while accounting for NavigationServer synchronization.

LANGUAGE: GDScript
CODE:
extends CharacterBody2D

var movement_speed: float = 200.0
var movement_target_position: Vector2 = Vector2(60.0,180.0)

@onready var navigation_agent: NavigationAgent2D = $NavigationAgent2D

func _ready():
    navigation_agent.path_desired_distance = 4.0
    navigation_agent.target_desired_distance = 4.0

    actor_setup.call_deferred()

func actor_setup():
    await get_tree().physics_frame
    set_movement_target(movement_target_position)

func set_movement_target(movement_target: Vector2):
    navigation_agent.target_position = movement_target

func _physics_process(delta):
    if navigation_agent.is_navigation_finished():
        return

    var current_agent_position: Vector2 = global_position
    var next_path_position: Vector2 = navigation_agent.get_next_path_position()

    velocity = current_agent_position.direction_to(next_path_position) * movement_speed
    move_and_slide()

----------------------------------------

TITLE: Basic GDScript Class Definition
DESCRIPTION: Initial class definition extending from Sprite2D node in GDScript.

LANGUAGE: GDScript
CODE:
extends Sprite2D

----------------------------------------

TITLE: Moving Node3D Along Navigation Path in C#
DESCRIPTION: This snippet shows how to move a Node3D along a navigation path in C#. It includes methods for setting the movement target and updating the position in the physics process.

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyNode3D : Node3D
{
    private Rid _default3DMapRid;

    private float _movementSpeed = 4.0f;
    private float _movementDelta;
    private float _pathPointMargin = 0.5f;

    private int _currentPathIndex = 0;
    private Vector3 _currentPathPoint;
    private Vector3[] _currentPath;

    public override void _Ready()
    {
        _default3DMapRid = GetWorld3D().NavigationMap;
    }

    private void SetMovementTarget(Vector3 targetPosition)
    {
        Vector3 startPosition = GlobalTransform.Origin;

        _currentPath = NavigationServer3D.MapGetPath(_default3DMapRid, startPosition, targetPosition, true);

        if (!_currentPath.IsEmpty())
        {
            _currentPathIndex = 0;
            _currentPathPoint = _currentPath[0];
        }
    }

    public override void _PhysicsProcess(double delta)
    {
        if (_currentPath.IsEmpty())
        {
            return;
        }

        _movementDelta = _movementSpeed * (float)delta;

        if (GlobalTransform.Origin.DistanceTo(_currentPathPoint) <= _pathPointMargin)
        {
            _currentPathIndex += 1;
            if (_currentPathIndex >= _currentPath.Length)
            {
                _currentPath = Array.Empty<Vector3>();
                _currentPathIndex = 0;
                _currentPathPoint = GlobalTransform.Origin;
                return;
            }
        }

        _currentPathPoint = _currentPath[_currentPathIndex];

        Vector3 newVelocity = GlobalTransform.Origin.DirectionTo(_currentPathPoint) * _movementDelta;
        var globalTransform = GlobalTransform;
        globalTransform.Origin = globalTransform.Origin.MoveToward(globalTransform.Origin + newVelocity, _movementDelta);
        GlobalTransform = globalTransform;
    }
}

----------------------------------------

TITLE: Instancing Scenes in Godot (C#)
DESCRIPTION: Shows how to load a scene file, instantiate it, and add the instance as a child node using C#.

LANGUAGE: csharp
CODE:
var scene = GD.Load<PackedScene>("res://MyScene.tscn");

var instance = scene.Instantiate();
AddChild(instance);

----------------------------------------

TITLE: Basic Thread Creation and Management in Godot
DESCRIPTION: Demonstrates how to create, start, and properly dispose of a thread in Godot. Shows thread initialization in _ready() and cleanup in _exit_tree(). Includes example of passing data to thread function.

LANGUAGE: GDScript
CODE:
var thread: Thread

func _ready():
    thread = Thread.new()
    thread.start(_thread_function.bind("Wafflecopter"))

func _thread_function(userdata):
    print("I'm a thread! Userdata is: ", userdata)

func _exit_tree():
    thread.wait_to_finish()

----------------------------------------

TITLE: Custom Editor Plugin Example
DESCRIPTION: Example showing how to implement a basic editor plugin with custom UI

LANGUAGE: gdscript
CODE:
var plugin_control

func _enter_tree():
    plugin_control = preload("my_plugin_control.tscn").instantiate()
    EditorInterface.get_editor_main_screen().add_child(plugin_control)
    plugin_control.hide()

func _has_main_screen():
    return true

func _make_visible(visible):
    plugin_control.visible = visible

func _get_plugin_name():
    return "My Super Cool Plugin 3000"

func _get_plugin_icon():
    return EditorInterface.get_editor_theme().get_icon("Node", "EditorIcons")

----------------------------------------

TITLE: Example Lobby Implementation in GDScript
DESCRIPTION: A complete example of a lobby system in GDScript, handling player connections, disconnections, and game start.

LANGUAGE: gdscript
CODE:
extends Node

# Autoload named Lobby

# These signals can be connected to by a UI lobby scene or the game scene.
signal player_connected(peer_id, player_info)
signal player_disconnected(peer_id)
signal server_disconnected

const PORT = 7000
const DEFAULT_SERVER_IP = "127.0.0.1" # IPv4 localhost
const MAX_CONNECTIONS = 20

# This will contain player info for every player,
# with the keys being each player's unique IDs.
var players = {}

# This is the local player info. This should be modified locally
# before the connection is made. It will be passed to every other peer.
# For example, the value of "name" can be set to something the player
# entered in a UI scene.
var player_info = {"name": "Name"}

var players_loaded = 0



func _ready():
    multiplayer.peer_connected.connect(_on_player_connected)
    multiplayer.peer_disconnected.connect(_on_player_disconnected)
    multiplayer.connected_to_server.connect(_on_connected_ok)
    multiplayer.connection_failed.connect(_on_connected_fail)
    multiplayer.server_disconnected.connect(_on_server_disconnected)


func join_game(address = ""):
    if address.is_empty():
        address = DEFAULT_SERVER_IP
    var peer = ENetMultiplayerPeer.new()
    var error = peer.create_client(address, PORT)
    if error:
        return error
    multiplayer.multiplayer_peer = peer


func create_game():
    var peer = ENetMultiplayerPeer.new()
    var error = peer.create_server(PORT, MAX_CONNECTIONS)
    if error:
        return error
    multiplayer.multiplayer_peer = peer

    players[1] = player_info
    player_connected.emit(1, player_info)


func remove_multiplayer_peer():
    multiplayer.multiplayer_peer = null
    players.clear()


# When the server decides to start the game from a UI scene,
# do Lobby.load_game.rpc(filepath)
@rpc("call_local", "reliable")
func load_game(game_scene_path):
    get_tree().change_scene_to_file(game_scene_path)


# Every peer will call this when they have loaded the game scene.
@rpc("any_peer", "call_local", "reliable")
func player_loaded():
    if multiplayer.is_server():
        players_loaded += 1
        if players_loaded == players.size():
            $/root/Game.start_game()
            players_loaded = 0


# When a peer connects, send them my player info.
# This allows transfer of all desired data for each player, not only the unique ID.
func _on_player_connected(id):
    _register_player.rpc_id(id, player_info)


@rpc("any_peer", "reliable")
func _register_player(new_player_info):
    var new_player_id = multiplayer.get_remote_sender_id()
    players[new_player_id] = new_player_info
    player_connected.emit(new_player_id, new_player_info)


func _on_player_disconnected(id):
    players.erase(id)
    player_disconnected.emit(id)


func _on_connected_ok():
    var peer_id = multiplayer.get_unique_id()
    players[peer_id] = player_info
    player_connected.emit(peer_id, player_info)


func _on_connected_fail():
    multiplayer.multiplayer_peer = null


func _on_server_disconnected():
    multiplayer.multiplayer_peer = null
    players.clear()
    server_disconnected.emit()

----------------------------------------

TITLE: AS Operator Type Casting in C#
DESCRIPTION: Demonstrates safe type casting using the 'as' operator which returns null on failed casts, combined with the null conditional operator.

LANGUAGE: csharp
CODE:
Sprite2D mySprite = GetNode("MySprite") as Sprite2D;
// Only call SetFrame() if mySprite is not null
mySprite?.SetFrame(0);

----------------------------------------

TITLE: Instancing Scenes in Godot (GDScript)
DESCRIPTION: Demonstrates how to load a scene file, instantiate it, and add the instance as a child node using GDScript. Includes both runtime loading and preloading examples.

LANGUAGE: gdscript
CODE:
var scene = load("res://my_scene.tscn")

# Preloading (GDScript only)
var scene = preload("res://my_scene.tscn")

var instance = scene.instantiate()
add_child(instance)

----------------------------------------

TITLE: Accessing GDScript Fields from C# in Godot
DESCRIPTION: Demonstrates how to access and modify GDScript fields from C# in Godot using Get() and Set() methods.

LANGUAGE: csharp
CODE:
// Output: "my gdscript value".
GD.Print(myGDScriptNode.Get("my_property"));
myGDScriptNode.Set("my_property", "MY GDSCRIPT VALUE");
// Output: "MY GDSCRIPT VALUE".
GD.Print(myGDScriptNode.Get("my_property"));

----------------------------------------

TITLE: Implementing Player Death in GDScript
DESCRIPTION: This code snippet shows how to implement player death functionality in GDScript. It includes emitting a signal when hit, freeing the player node, and handling the collision detection.

LANGUAGE: gdscript
CODE:
# Emitted when the player was hit by a mob.
# Put this at the top of the script.
signal hit

# And this function at the bottom.
func die():
    hit.emit()
    queue_free()

func _on_mob_detector_body_entered(body):
    die()

----------------------------------------

TITLE: Scene Management Global Script
DESCRIPTION: Global autoload script that manages scene transitions with deferred scene loading to prevent crashes.

LANGUAGE: gdscript
CODE:
extends Node

var current_scene = null

func _ready():
    var root = get_tree().root
    current_scene = root.get_child(-1)

func goto_scene(path):
    _deferred_goto_scene.call_deferred(path)

func _deferred_goto_scene(path):
    current_scene.free()
    var s = ResourceLoader.load(path)
    current_scene = s.instantiate()
    get_tree().root.add_child(current_scene)
    get_tree().current_scene = current_scene

----------------------------------------

TITLE: Implementing Collision Detection in GDScript
DESCRIPTION: Defines a custom 'hit' signal and implements a method to handle collisions with enemy bodies.

LANGUAGE: GDScript
CODE:
signal hit

func _on_body_entered(_body):
    hide() # Player disappears after being hit.
    hit.emit()
    # Must be deferred as we can't change physics properties on a physics callback.
    $CollisionShape2D.set_deferred("disabled", true)

----------------------------------------

TITLE: Complete Mob Implementation in C#
DESCRIPTION: Full implementation of mob behavior including initialization, movement, and screen exit handling in C#

LANGUAGE: csharp
CODE:
using Godot;

public partial class Mob : CharacterBody3D
{
    [Export]
    public int MinSpeed { get; set; } = 10;
    [Export]
    public int MaxSpeed { get; set; } = 18;

    public override void _PhysicsProcess(double delta)
    {
        MoveAndSlide();
    }

    public void Initialize(Vector3 startPosition, Vector3 playerPosition)
    {
        LookAtFromPosition(startPosition, playerPosition, Vector3.Up);
        RotateY((float)GD.RandRange(-Mathf.Pi / 4.0, Mathf.Pi / 4.0));
        int randomSpeed = GD.RandRange(MinSpeed, MaxSpeed);
        Velocity = Vector3.Forward * randomSpeed;
        Velocity = Velocity.Rotated(Vector3.Up, Rotation.Y);
    }

    private void OnVisibilityNotifierScreenExited()
    {
        QueueFree();
    }
}

----------------------------------------

TITLE: Implementing Collision Detection in C#
DESCRIPTION: Defines a custom 'Hit' signal and implements a method to handle collisions with enemy bodies in C#.

LANGUAGE: C#
CODE:
[Signal]
public delegate void HitEventHandler();

private void OnBodyEntered(Node2D body)
{
    Hide(); // Player disappears after being hit.
    EmitSignal(SignalName.Hit);
    // Must be deferred as we can't change physics properties on a physics callback.
    GetNode<CollisionShape2D>("CollisionShape2D").SetDeferred(CollisionShape2D.PropertyName.Disabled, true);
}

----------------------------------------

TITLE: Signal Handler for Bullet Spawning
DESCRIPTION: Signal handler implementation that spawns bullets in response to the player's shoot signal. Handles bullet instantiation and initialization.

LANGUAGE: gdscript
CODE:
func _on_player_shoot(Bullet, direction, location):
    var spawned_bullet = Bullet.instantiate()
    add_child(spawned_bullet)
    spawned_bullet.rotation = direction
    spawned_bullet.position = location
    spawned_bullet.velocity = spawned_bullet.velocity.rotated(direction)

LANGUAGE: csharp
CODE:
private void OnPlayerShoot(PackedScene bullet, float direction, Vector2 location)
{
    var spawnedBullet = bullet.Instantiate<Bullet>();
    AddChild(spawnedBullet);
    spawnedBullet.Rotation = direction;
    spawnedBullet.Position = location;
    spawnedBullet.Velocity = spawnedBullet.Velocity.Rotated(direction);
}

----------------------------------------

TITLE: Basic Export Usage in GDScript
DESCRIPTION: Demonstrates how to export a basic integer variable with a default value. The exported variable will be visible and editable in the Godot editor's property inspector.

LANGUAGE: GDScript
CODE:
@export var number: int = 5

----------------------------------------

TITLE: Advanced Exports in GDScript
DESCRIPTION: Demonstrates advanced export techniques using @export_custom and @export_tool_button. These allow for more fine-grained control over exported properties and creating clickable buttons in the inspector.

LANGUAGE: GDScript
CODE:
@export_custom(PROPERTY_HINT_NONE, "altitude:m") var altitude: Vector3

@tool
extends Node

@export_tool_button("Hello", "Callable") var hello_action = hello

func hello():
    print("Hello world!")

----------------------------------------

TITLE: Getting Node References in Godot (GDScript)
DESCRIPTION: Demonstrates how to get references to child nodes using the get_node() function in GDScript. This is typically done in the _ready() function to ensure the nodes exist in the scene tree.

LANGUAGE: gdscript
CODE:
var sprite2d
var camera2d

func _ready():
    sprite2d = get_node("Sprite2D")
    camera2d = get_node("Camera2D")

----------------------------------------

TITLE: NavigationAgent3D with RigidBody3D in GDScript
DESCRIPTION: Implements basic movement and avoidance for a RigidBody3D using NavigationAgent3D in GDScript.

LANGUAGE: gdscript
CODE:
extends RigidBody3D

@export var movement_speed: float = 4.0
@onready var navigation_agent: NavigationAgent3D = get_node("NavigationAgent3D")

func _ready() -> void:
    navigation_agent.velocity_computed.connect(Callable(_on_velocity_computed))

func set_movement_target(movement_target: Vector3):
    navigation_agent.set_target_position(movement_target)

func _physics_process(delta):
    # Do not query when the map has never synchronized and is empty.
    if NavigationServer3D.map_get_iteration_id(navigation_agent.get_navigation_map()) == 0:
        return
    if navigation_agent.is_navigation_finished():
        return

    var next_path_position: Vector3 = navigation_agent.get_next_path_position()
    var new_velocity: Vector3 = global_position.direction_to(next_path_position) * movement_speed
    if navigation_agent.avoidance_enabled:
        navigation_agent.set_velocity(new_velocity)
    else:
        _on_velocity_computed(new_velocity)

func _on_velocity_computed(safe_velocity: Vector3):
    linear_velocity = safe_velocity

----------------------------------------

TITLE: Implementing Basic Text-to-Speech in GDScript
DESCRIPTION: Demonstrates core text-to-speech functionality including voice selection, speaking text, and interrupting speech. Shows how to get available voices, select a specific voice, and control speech output.

LANGUAGE: gdscript
CODE:
# One-time steps.
# Pick a voice. Here, we arbitrarily pick the first English voice.
var voices = DisplayServer.tts_get_voices_for_language("en")
var voice_id = voices[0]

# Say "Hello, world!".
DisplayServer.tts_speak("Hello, world!", voice_id)

# Say a longer sentence, and then interrupt it.
# Note that this method is asynchronous: execution proceeds to the next line immediately,
# before the voice finishes speaking.
var long_message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur"
DisplayServer.tts_speak(long_message, voice_id)

# Immediately stop the current text mid-sentence and say goodbye instead.
DisplayServer.tts_stop()
DisplayServer.tts_speak("Goodbye!", voice_id)

----------------------------------------

TITLE: Implementing WebSocket Client in Godot
DESCRIPTION: This snippet demonstrates how to create a WebSocket client connection, send data, and handle received messages. It includes error handling and connection state management.

LANGUAGE: GDScript
CODE:
extends Node

# The URL we will connect to.
@export var websocket_url = "wss://echo.websocket.org"

# Our WebSocketClient instance.
var socket = WebSocketPeer.new()

func _ready():
    # Initiate connection to the given URL.
    var err = socket.connect_to_url(websocket_url)
    if err != OK:
        print("Unable to connect")
        set_process(false)
    else:
        # Wait for the socket to connect.
        await get_tree().create_timer(2).timeout
        
        # Send data.
        socket.send_text("Test packet")

func _process(_delta):
    # Call this in _process or _physics_process. Data transfer and state updates
    # will only happen when calling this function.
    socket.poll()
    
    # get_ready_state() tells you what state the socket is in.
    var state = socket.get_ready_state()
    
    # WebSocketPeer.STATE_OPEN means the socket is connected and ready
    # to send and receive data.
    if state == WebSocketPeer.STATE_OPEN:
        while socket.get_available_packet_count():
            print("Got data from server: ", socket.get_packet().get_string_from_utf8())
    
    # WebSocketPeer.STATE_CLOSING means the socket is closing.
    # It is important to keep polling for a clean close.
    elif state == WebSocketPeer.STATE_CLOSING:
        pass
    
    # WebSocketPeer.STATE_CLOSED means the connection has fully closed.
    # It is now safe to stop polling.
    elif state == WebSocketPeer.STATE_CLOSED:
        # The code will be -1 if the disconnection was not properly notified by the remote peer.
        var code = socket.get_close_code()
        print("WebSocket closed with code: %d. Clean: %s" % [code, code != -1])
        set_process(false) # Stop processing.

----------------------------------------

TITLE: Gravity Implementation
DESCRIPTION: Adds gravity to the character movement, applying constant downward acceleration and using delta time for smooth motion.

LANGUAGE: gdscript
CODE:
extends CharacterBody2D

const GRAVITY = 200.0

func _physics_process(delta):
    velocity.y += delta * GRAVITY

    var motion = velocity * delta
    move_and_collide(motion)

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyCharacterBody2D : CharacterBody2D
{
    private const float Gravity = 200.0f;

    public override void _PhysicsProcess(double delta)
    {
        var velocity = Velocity;
        velocity.Y += (float)delta * Gravity;
        Velocity = velocity;

        var motion = velocity * (float)delta;
        MoveAndCollide(motion);
    }
}

----------------------------------------

TITLE: Implementing Lifecycle Functions in GDScript
DESCRIPTION: Demonstrates how to override _enter_tree(), _ready(), and _exit_tree() functions in GDScript. These functions are called when a node enters the scene tree, is fully initialized, and is about to leave the scene tree respectively.

LANGUAGE: gdscript
CODE:
# Called every time the node enters the scene tree.
func _enter_tree():
    pass

# Called when both the node and its children have entered the scene tree.
func _ready():
    pass

# Called when the node is about to leave the scene tree, after all its
# children received the _exit_tree() callback.
func _exit_tree():
    pass

----------------------------------------

TITLE: Controlling AnimationPlayer Animation in C#
DESCRIPTION: This snippet shows how to control an AnimationPlayer animation using C#. It plays the 'walk' animation when the right arrow key is pressed and stops it when released.

LANGUAGE: C#
CODE:
using Godot;

public partial class Character : CharacterBody2D
{
    private AnimationPlayer _animationPlayer;

    public override void _Ready()
    {
        _animationPlayer = GetNode<AnimationPlayer>("AnimationPlayer");
    }

    public override void _Process(double delta)
    {
        if (Input.IsActionPressed("ui_right"))
        {
            _animationPlayer.Play("walk");
        }
        else
        {
            _animationPlayer.Stop();
        }
    }
}

----------------------------------------

TITLE: GDScript Signal Definition and Usage
DESCRIPTION: Example showing how to define and emit signals, and connect them to callback functions

LANGUAGE: gdscript
CODE:
signal health_changed(old_value, new_value)

func take_damage(amount):
    var old_health = health
    health -= amount
    health_changed.emit(old_health, health)

----------------------------------------

TITLE: NavigationAgent3D with CharacterBody3D in C#
DESCRIPTION: Implements basic movement and avoidance for a CharacterBody3D using NavigationAgent3D in C#.

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyCharacterBody3D : CharacterBody3D
{
    [Export]
    public float MovementSpeed { get; set; } = 4.0f;
    NavigationAgent3D _navigationAgent;

    public override void _Ready()
    {
        _navigationAgent = GetNode<NavigationAgent3D>("NavigationAgent3D");
        _navigationAgent.VelocityComputed += OnVelocityComputed;
    }

    private void SetMovementTarget(Vector3 movementTarget)
    {
        _navigationAgent.TargetPosition = movementTarget;
    }

    public override void _PhysicsProcess(double delta)
    {
        // Do not query when the map has never synchronized and is empty.
        if (NavigationServer3D.MapGetIterationId(_navigationAgent.GetNavigationMap()) == 0)
        {
            return;
        }

        if (_navigationAgent.IsNavigationFinished())
        {
            return;
        }

        Vector3 nextPathPosition = _navigationAgent.GetNextPathPosition();
        Vector3 newVelocity = GlobalPosition.DirectionTo(nextPathPosition) * MovementSpeed;
        if (_navigationAgent.AvoidanceEnabled)
        {
            _navigationAgent.Velocity = newVelocity;
        }
        else
        {
            OnVelocityComputed(newVelocity);
        }
    }

    private void OnVelocityComputed(Vector3 safeVelocity)
    {
        Velocity = safeVelocity;
        MoveAndSlide();
    }
}

----------------------------------------

TITLE: Using NodePaths for Node Communication in Godot
DESCRIPTION: Shows how to use NodePaths for communication between nodes in Godot using GDScript, C#, and C++. This method allows for flexible node referencing.

LANGUAGE: GDScript
CODE:
# Parent
$Child.target_path = ".."

# Child
get_node(target_path) # Use parent-defined NodePath.

LANGUAGE: C#
CODE:
// Parent
GetNode("Child").Set("TargetPath", NodePath(".."));

// Child
GetNode(TargetPath); // Use parent-defined NodePath.

LANGUAGE: C++
CODE:
// Parent
Node *node = get_node<Node>("Child");
if (node != nullptr) {
    node->set("target_path", NodePath(".."));
}

// Child
get_node<Node>(target_path); // Use parent-defined NodePath.

----------------------------------------

TITLE: Complete Sprite Movement Script with Signals
DESCRIPTION: Full implementation of a sprite controller with movement, button press handling, and timer-based visibility toggling

LANGUAGE: GDScript
CODE:
extends Sprite2D

var speed = 400
var angular_speed = PI

func _ready():
    var timer = get_node("Timer")
    timer.timeout.connect(_on_timer_timeout)

func _process(delta):
    rotation += angular_speed * delta
    var velocity = Vector2.UP.rotated(rotation) * speed
    position += velocity * delta

func _on_button_pressed():
    set_process(not is_processing())

func _on_timer_timeout():
    visible = not visible

----------------------------------------

TITLE: Connecting to Custom Signals in C#
DESCRIPTION: Demonstrates how to connect to custom signals in the _Ready method. One signal is connected to a lambda function, while the other is connected to a named method.

LANGUAGE: csharp
CODE:
public override void _Ready()
{
    MySignal += () => GD.Print("Hello!");
    MySignalWithArgument += SayHelloTo;
}

private void SayHelloTo(string name)
{
    GD.Print($"Hello {name}!");
}

----------------------------------------

TITLE: Basic Physics Process Setup
DESCRIPTION: Initial setup of the physics process function for a CharacterBody2D node, which serves as the foundation for character movement logic.

LANGUAGE: gdscript
CODE:
extends CharacterBody2D

func _physics_process(delta):
    pass

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyCharacterBody2D : CharacterBody2D
{
    public override void _PhysicsProcess(double delta)
    {
    }
}

----------------------------------------

TITLE: Using Custom Resources in GDScript
DESCRIPTION: Demonstrates how to use a custom Resource in a CharacterBody3D node script in GDScript. This example shows exporting and accessing the custom resource.

LANGUAGE: GDScript
CODE:
extends CharacterBody3D

@export var stats: Resource

func _ready():
    # Uses an implicit, duck-typed interface for any 'health'-compatible resources.
    if stats:
        stats.health = 10
        print(stats.health)
        # Prints "10"

----------------------------------------

TITLE: Initializing OpenXR and Configuring XR Viewport in Godot
DESCRIPTION: This script initializes the OpenXR interface, disables v-sync, and sets up the viewport for XR rendering. It's typically attached to the root node of an XR scene.

LANGUAGE: gdscript
CODE:
extends Node3D

var xr_interface: XRInterface

func _ready():
    xr_interface = XRServer.find_interface("OpenXR")
    if xr_interface and xr_interface.is_initialized():
        print("OpenXR initialized successfully")

        # Turn off v-sync!
        DisplayServer.window_set_vsync_mode(DisplayServer.VSYNC_DISABLED)

        # Change our main viewport to output to the HMD
        get_viewport().use_xr = true
    else:
        print("OpenXR not initialized, please check if your headset is connected")

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyNode3D : Node3D
{
    private XRInterface _xrInterface;

    public override void _Ready()
    {
        _xrInterface = XRServer.FindInterface("OpenXR");
        if(_xrInterface != null && _xrInterface.IsInitialized())
        {
            GD.Print("OpenXR initialized successfully");

            // Turn off v-sync!
            DisplayServer.WindowSetVsyncMode(DisplayServer.VSyncMode.Disabled);

            // Change our main viewport to output to the HMD
            GetViewport().UseXR = true;
        }
        else
        {
            GD.Print("OpenXR not initialized, please check if your headset is connected");
        }
    }
}

----------------------------------------

TITLE: Setting up GPUParticles3D Node Configuration
DESCRIPTION: Basic setup requirements for a GPUParticles3D node including Process Material and Draw Pass configuration. The Process Material controls particle behavior while Draw Passes define how particles are rendered.

LANGUAGE: gdscript
CODE:
GPUParticles3D.new()
# Required properties:
# - Process Material: ParticleProcessMaterial
# - Draw Pass: QuadMesh (Size: Vector2(0.1, 0.1))

----------------------------------------

TITLE: Implementing _parse_property method in EditorInspectorPlugin
DESCRIPTION: This method is called to allow adding property-specific editors to the property list for an object. It should return true to remove the built-in editor for this property.

LANGUAGE: GDScript
CODE:
func _parse_property(object: Object, type: int, name: String, hint_type: int, hint_string: String, usage_flags: int, wide: bool) -> bool:
    # Add property-specific editors
    return false  # Return true to remove built-in editor

----------------------------------------

TITLE: Semaphore Usage for On-Demand Thread Processing
DESCRIPTION: Illustrates how to use Semaphores for controlling thread execution on demand. Shows thread suspension and signaling patterns with proper mutex protection for shared data.

LANGUAGE: GDScript
CODE:
var counter := 0
var mutex: Mutex
var semaphore: Semaphore
var thread: Thread
var exit_thread := false

func _ready():
    mutex = Mutex.new()
    semaphore = Semaphore.new()
    exit_thread = false
    thread = Thread.new()
    thread.start(_thread_function)

func _thread_function():
    while true:
        semaphore.wait()
        mutex.lock()
        var should_exit = exit_thread
        mutex.unlock()
        if should_exit:
            break
        mutex.lock()
        counter += 1
        mutex.unlock()

func increment_counter():
    semaphore.post()

func get_counter():
    mutex.lock()
    var counter_value = counter
    mutex.unlock()
    return counter_value

func _exit_tree():
    mutex.lock()
    exit_thread = true
    mutex.unlock()
    semaphore.post()
    thread.wait_to_finish()
    print("Counter is: ", counter)

----------------------------------------

TITLE: NavigationAgent3D with Node3D in GDScript
DESCRIPTION: Implements basic movement and avoidance for a Node3D using NavigationAgent3D in GDScript.

LANGUAGE: gdscript
CODE:
extends Node3D

@export var movement_speed: float = 4.0
@onready var navigation_agent: NavigationAgent3D = get_node("NavigationAgent3D")
var movement_delta: float

func _ready() -> void:
    navigation_agent.velocity_computed.connect(Callable(_on_velocity_computed))

func set_movement_target(movement_target: Vector3):
    navigation_agent.set_target_position(movement_target)

func _physics_process(delta):
    # Do not query when the map has never synchronized and is empty.
    if NavigationServer3D.map_get_iteration_id(navigation_agent.get_navigation_map()) == 0:
        return
    if navigation_agent.is_navigation_finished():
        return

    movement_delta = movement_speed * delta
    var next_path_position: Vector3 = navigation_agent.get_next_path_position()
    var new_velocity: Vector3 = global_position.direction_to(next_path_position) * movement_delta
    if navigation_agent.avoidance_enabled:
        navigation_agent.set_velocity(new_velocity)
    else:
        _on_velocity_computed(new_velocity)

func _on_velocity_computed(safe_velocity: Vector3) -> void:
    global_position = global_position.move_toward(global_position + safe_velocity, movement_delta)

----------------------------------------

TITLE: Implementing Input Handling Functions in GDScript
DESCRIPTION: Demonstrates how to override _unhandled_input() and _input() functions in GDScript. These functions handle input events, with _input() called before _unhandled_input(), allowing for event interception and processing.

LANGUAGE: gdscript
CODE:
# Called once for every event.
func _unhandled_input(event):
    pass

# Called once for every event before _unhandled_input(), allowing you to
# consume some events.
func _input(event):
    pass

----------------------------------------

TITLE: Complete Movement Implementation
DESCRIPTION: Final implementation including horizontal movement controls, gravity, and smooth movement using move_and_slide function.

LANGUAGE: gdscript
CODE:
extends CharacterBody2D

const GRAVITY = 200.0
const WALK_SPEED = 200

func _physics_process(delta):
    velocity.y += delta * GRAVITY

    if Input.is_action_pressed("ui_left"):
        velocity.x = -WALK_SPEED
    elif Input.is_action_pressed("ui_right"):
        velocity.x =  WALK_SPEED
    else:
        velocity.x = 0

    # "move_and_slide" already takes delta time into account.
    move_and_slide()

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyCharacterBody2D : CharacterBody2D
{
    private const float Gravity = 200.0f;
    private const int WalkSpeed = 200;

    public override void _PhysicsProcess(double delta)
    {
        var velocity = Velocity;

        velocity.Y += (float)delta * Gravity;

        if (Input.IsActionPressed("ui_left"))
        {
            velocity.X = -WalkSpeed;
        }
        else if (Input.IsActionPressed("ui_right"))
        {
            velocity.X = WalkSpeed;
        }
        else
        {
            velocity.X = 0;
        }

        Velocity = velocity;

        // "MoveAndSlide" already takes delta time into account.
        MoveAndSlide();
    }
}

----------------------------------------

TITLE: Implementing Rotation and Movement in Godot
DESCRIPTION: This code snippet shows how to implement rotation and movement for a CharacterBody2D node in Godot, similar to the classic Asteroids game. It uses separate inputs for rotation and movement.

LANGUAGE: GDScript
CODE:
extends CharacterBody2D

@export var speed = 400
@export var rotation_speed = 1.5

var rotation_direction = 0

func get_input():
    rotation_direction = Input.get_axis("left", "right")
    velocity = transform.x * Input.get_axis("down", "up") * speed

func _physics_process(delta):
    get_input()
    rotation += rotation_direction * rotation_speed * delta
    move_and_slide()

LANGUAGE: C#
CODE:
using Godot;

public partial class Movement : CharacterBody2D
{
    [Export]
    public int Speed { get; set; } = 400;

    [Export]
    public float RotationSpeed { get; set; } = 1.5f;

    private float _rotationDirection;

    public void GetInput()
    {
        _rotationDirection = Input.GetAxis("left", "right");
        Velocity = Transform.X * Input.GetAxis("down", "up") * Speed;
    }

    public override void _PhysicsProcess(double delta)
    {
        GetInput();
        Rotation += _rotationDirection * RotationSpeed * (float)delta;
        MoveAndSlide();
    }
}

----------------------------------------

TITLE: Character Movement with Physics
DESCRIPTION: Example of a 2D character controller with walking and jumping mechanics using CharacterBody2D.

LANGUAGE: gdscript
CODE:
extends CharacterBody2D

var run_speed = 350
var jump_speed = -1000
var gravity = 2500

func get_input():
    velocity.x = 0
    var right = Input.is_action_pressed('ui_right')
    var left = Input.is_action_pressed('ui_left')
    var jump = Input.is_action_just_pressed('ui_select')

    if is_on_floor() and jump:
        velocity.y = jump_speed
    if right:
        velocity.x += run_speed
    if left:
        velocity.x -= run_speed

func _physics_process(delta):
    velocity.y += gravity * delta
    get_input()
    move_and_slide()

LANGUAGE: csharp
CODE:
using Godot;

public partial class Body : CharacterBody2D
{
    private float _runSpeed = 350;
    private float _jumpSpeed = -1000;
    private float _gravity = 2500;

    private void GetInput()
    {
        var velocity = Velocity;
        velocity.X = 0;

        var right = Input.IsActionPressed("ui_right");
        var left = Input.IsActionPressed("ui_left");
        var jump = Input.IsActionPressed("ui_select");

        if (IsOnFloor() && jump)
            velocity.Y = _jumpSpeed;
        if (right)
            velocity.X += _runSpeed;
        if (left)
            velocity.X -= _runSpeed;

        Velocity = velocity;
    }

    public override void _PhysicsProcess(double delta)
    {
        var velocity = Velocity;
        velocity.Y += _gravity * (float)delta;
        Velocity = velocity;
        GetInput();
        MoveAndSlide();
    }
}

----------------------------------------

TITLE: Applying Movement and Gravity in Godot 3D
DESCRIPTION: Calculates the final velocity, applies gravity, and moves the character using move_and_slide.

LANGUAGE: GDScript
CODE:
target_velocity.x = direction.x * speed
target_velocity.z = direction.z * speed

if not is_on_floor():
    target_velocity.y = target_velocity.y - (fall_acceleration * delta)

velocity = target_velocity
move_and_slide()

LANGUAGE: C#
CODE:
_targetVelocity.X = direction.X * Speed;
_targetVelocity.Z = direction.Z * Speed;

if (!IsOnFloor())
{
    _targetVelocity.Y -= FallAcceleration * (float)delta;
}

Velocity = _targetVelocity;
MoveAndSlide();

----------------------------------------

TITLE: Defining Node Classes in GDScript and C#
DESCRIPTION: Example node class definitions in both GDScript and C# with equivalent properties, signals, and methods for comparison.

LANGUAGE: gdscript
CODE:
extends Node

var my_property: String = "my gdscript value":
    get:
        return my_property
    set(value):
        my_property = value

signal my_signal
signal my_signal_with_params(msg: String, n: int)

func print_node_name(node: Node) -> void:
    print(node.get_name())

func print_array(arr: Array) -> void:
    for element in arr:
        print(element)

func print_n_times(msg: String, n: int) -> void:
    for i in range(n):
        print(msg)

func my_signal_handler():
    print("The signal handler was called!")

func my_signal_with_params_handler(msg: String, n: int):
    print_n_times(msg, n)

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyCSharpNode : Node
{
    public string MyProperty { get; set; } = "my c# value";

    [Signal] public delegate void MySignalEventHandler();
    [Signal] public delegate void MySignalWithParamsEventHandler(string msg, int n);

    public void PrintNodeName(Node node)
    {
        GD.Print(node.Name);
    }

    public void PrintArray(string[] arr)
    {
        foreach (string element in arr)
        {
            GD.Print(element);
        }
    }

    public void PrintNTimes(string msg, int n)
    {
        for (int i = 0; i < n; ++i)
        {
            GD.Print(msg);
        }
    }

    public void MySignalHandler()
    {
        GD.Print("The signal handler was called!");
    }

    public void MySignalWithParamsHandler(string msg, int n)
    {
        PrintNTimes(msg, n);
    }
}

----------------------------------------

TITLE: Implementing Monster Spawning Logic in C#
DESCRIPTION: Defines the OnMobTimerTimeout method that handles monster spawning in C#. It creates a new mob instance, chooses a random spawn location, and initializes the mob with its position and the player's position.

LANGUAGE: C#
CODE:
private void OnMobTimerTimeout()
{
    // Create a new instance of the Mob scene.
    Mob mob = MobScene.Instantiate<Mob>();

    // Choose a random location on the SpawnPath.
    // We store the reference to the SpawnLocation node.
    var mobSpawnLocation = GetNode<PathFollow3D>("SpawnPath/SpawnLocation");
    // And give it a random offset.
    mobSpawnLocation.ProgressRatio = GD.Randf();

    Vector3 playerPosition = GetNode<Player>("Player").Position;
    mob.Initialize(mobSpawnLocation.Position, playerPosition);

    // Spawn the mob by adding it to the Main scene.
    AddChild(mob);
}

----------------------------------------

TITLE: Calling GDScript Methods from C# in Godot
DESCRIPTION: Demonstrates how to call GDScript methods from C# in Godot using the Call() method, including passing different types of arguments.

LANGUAGE: csharp
CODE:
// Output: "MyCSharpNode" (or name of node where this code is placed).
myGDScriptNode.Call("print_node_name", this);
// This line will fail silently and won't error out.
// myGDScriptNode.Call("print_node_name");

// Outputs "Hello there!" twice, once per line.
myGDScriptNode.Call("print_n_times", "Hello there!", 2);

string[] arr = ["a", "b", "c"];
// Output: "a", "b", "c" (one per line).
myGDScriptNode.Call("print_array", arr);
// Output: "1", "2", "3"  (one per line).
myGDScriptNode.Call("print_array", new int[] { 1, 2, 3 });
// Note how the type of each array entry does not matter
// as long as it can be handled by the marshaller.

----------------------------------------

TITLE: Implementing Click-and-Move Functionality in Godot
DESCRIPTION: This code snippet shows how to implement click-and-move functionality for a CharacterBody2D node in Godot. The character moves towards the position where the player clicks on the screen.

LANGUAGE: GDScript
CODE:
extends CharacterBody2D

@export var speed = 400

var target = position

func _input(event):
    if event.is_action_pressed(&"click"):
        target = get_global_mouse_position()

func _physics_process(delta):
    velocity = position.direction_to(target) * speed
    if position.distance_to(target) > 10:
        move_and_slide()

LANGUAGE: C#
CODE:
using Godot;

public partial class Movement : CharacterBody2D
{
    [Export]
    public int Speed { get; set; } = 400;

    private Vector2 _target;

    public override void _Input(InputEvent @event)
    {
        if (@event.IsActionPressed("click"))
        {
            _target = GetGlobalMousePosition();
        }
    }

    public override void _PhysicsProcess(double delta)
    {
        Velocity = Position.DirectionTo(_target) * Speed;
        if (Position.DistanceTo(_target) > 10)
        {
            MoveAndSlide();
        }
    }
}

----------------------------------------

TITLE: Implementing Weighted Random Probability in Godot
DESCRIPTION: Shows how to create a weighted random probability system in Godot using the randf() method.

LANGUAGE: gdscript
CODE:
func get_item_rarity():
    var random_float = randf()

    if random_float < 0.8:
        return "Common"
    elif random_float < 0.95:
        return "Uncommon"
    else:
        return "Rare"

LANGUAGE: csharp
CODE:
public string GetItemRarity()
{
    float randomFloat = GD.Randf();

    if (randomFloat < 0.8f)
    {
        return "Common";
    }
    else if (randomFloat < 0.95f)
    {
        return "Uncommon";
    }
    else
    {
        return "Rare";
    }
}

----------------------------------------

TITLE: Basic Movement with CharacterBody2D in GDScript
DESCRIPTION: Implements basic movement for a CharacterBody2D using move_and_collide() in GDScript.

LANGUAGE: GDScript
CODE:
extends CharacterBody2D

var speed = 300

func get_input():
    var input_dir = Input.get_vector("ui_left", "ui_right", "ui_up", "ui_down")
    velocity = input_dir * speed

func _physics_process(delta):
    get_input()
    move_and_collide(velocity * delta)

----------------------------------------

TITLE: Variable and Function Declarations with Static Typing in GDScript
DESCRIPTION: Shows various examples of static typing in GDScript, including variable declarations, constants, function parameters, and return types.

LANGUAGE: GDScript
CODE:
var damage: float = 10.5
const MOVE_SPEED: float = 50.0
func sum(a: float = 0.0, b: float = 0.0) -> float:
    return a + b

----------------------------------------

TITLE: Main Game Controller Implementation
DESCRIPTION: Main game script handling mob spawning, player death, and game restart functionality.

LANGUAGE: gdscript
CODE:
extends Node

@export var mob_scene: PackedScene

func _ready():
    $UserInterface/Retry.hide()

func _on_mob_timer_timeout():
    var mob = mob_scene.instantiate()
    var mob_spawn_location = get_node("SpawnPath/SpawnLocation")
    mob_spawn_location.progress_ratio = randf()
    var player_position = $Player.position
    mob.initialize(mob_spawn_location.position, player_position)
    add_child(mob)
    mob.squashed.connect($UserInterface/ScoreLabel._on_mob_squashed.bind())

func _on_player_hit():
    $MobTimer.stop()
    $UserInterface/Retry.show()

func _unhandled_input(event):
    if event.is_action_pressed("ui_accept") and $UserInterface/Retry.visible:
        get_tree().reload_current_scene()

----------------------------------------

TITLE: Using Basic Format String in GDScript
DESCRIPTION: Demonstrates the basic usage of a format string with a single placeholder in GDScript.

LANGUAGE: gdscript
CODE:
# Define a format string with placeholder '%s'
var format_string = "We're waiting for %s."

# Using the '%' operator, the placeholder is replaced with the desired value
var actual_string = format_string % "Godot"

print(actual_string)
# Output: "We're waiting for Godot."

----------------------------------------

TITLE: Implementing ImageTexture to PortableCompressedTexture2D Conversion in GDScript
DESCRIPTION: Example implementation of an EditorResourceConversionPlugin that converts ImageTexture resources to PortableCompressedTexture2D format. The plugin handles ImageTexture resources and performs lossless compression during conversion.

LANGUAGE: gdscript
CODE:
extends EditorResourceConversionPlugin

func _handles(resource: Resource):
    return resource is ImageTexture

func _converts_to():
    return "PortableCompressedTexture2D"

func _convert(itex: Resource):
    var ptex = PortableCompressedTexture2D.new()
    ptex.create_from_image(itex.get_image(), PortableCompressedTexture2D.COMPRESSION_MODE_LOSSLESS)
    return ptex

----------------------------------------

TITLE: Saving Game Data to File in Godot
DESCRIPTION: This function saves game data by iterating through persistent nodes, calling their save methods, and writing the data to a file in JSON format.

LANGUAGE: GDScript
CODE:
func save_game():
    var save_file = FileAccess.open("user://savegame.save", FileAccess.WRITE)
    var save_nodes = get_tree().get_nodes_in_group("Persist")
    for node in save_nodes:
        if node.scene_file_path.is_empty():
            print("persistent node '%s' is not an instanced scene, skipped" % node.name)
            continue

        if !node.has_method("save"):
            print("persistent node '%s' is missing a save() function, skipped" % node.name)
            continue

        var node_data = node.call("save")
        var json_string = JSON.stringify(node_data)
        save_file.store_line(json_string)

LANGUAGE: C#
CODE:
public void SaveGame()
{
    using var saveFile = FileAccess.Open("user://savegame.save", FileAccess.ModeFlags.Write);

    var saveNodes = GetTree().GetNodesInGroup("Persist");
    foreach (Node saveNode in saveNodes)
    {
        if (string.IsNullOrEmpty(saveNode.SceneFilePath))
        {
            GD.Print($"persistent node '{saveNode.Name}' is not an instanced scene, skipped");
            continue;
        }

        if (!saveNode.HasMethod("Save"))
        {
            GD.Print($"persistent node '{saveNode.Name}' is missing a Save() function, skipped");
            continue;
        }

        var nodeData = saveNode.Call("Save");
        var jsonString = Json.Stringify(nodeData);
        saveFile.StoreLine(jsonString);
    }
}

----------------------------------------

TITLE: Handling Quit Notification in Godot
DESCRIPTION: Shows how to handle the NOTIFICATION_WM_CLOSE_REQUEST notification when quitting is requested from the window manager. This code demonstrates the default quit behavior.

LANGUAGE: gdscript
CODE:
func _notification(what):
    if what == NOTIFICATION_WM_CLOSE_REQUEST:
        get_tree().quit() # default behavior

LANGUAGE: csharp
CODE:
public override void _Notification(int what)
{
    if (what == NotificationWMCloseRequest)
        GetTree().Quit(); // default behavior
}

----------------------------------------

TITLE: Calling Methods Between Parent and Child Nodes in Godot
DESCRIPTION: Shows how to call methods between parent and child nodes in Godot using GDScript, C#, and C++. This technique is used to start behavior in child nodes.

LANGUAGE: GDScript
CODE:
# Parent
$Child.method_name = "do"

# Child, assuming it has String property 'method_name' and method 'do'.
call(method_name) # Call parent-defined method (which child must own).

LANGUAGE: C#
CODE:
// Parent
GetNode("Child").Set("MethodName", "Do");

// Child
Call(MethodName); // Call parent-defined method (which child must own).

LANGUAGE: C++
CODE:
// Parent
Node *node = get_node<Node>("Child");
if (node != nullptr) {
    node->set("method_name", "do");
}

// Child
call(method_name); // Call parent-defined method (which child must own).

----------------------------------------

TITLE: Demonstrating Folder Structure for Godot Projects
DESCRIPTION: This snippet illustrates a recommended folder structure for Godot projects, organizing assets, levels, and documentation in a logical hierarchy. It shows how to group related assets and separate built levels for better maintainability.

LANGUAGE: none
CODE:
/project.godot
/docs/.gdignore  # See "Ignoring specific folders" below
/docs/learning.html
/models/town/house/house.dae
/models/town/house/window.png
/models/town/house/door.png
/characters/player/cubio.dae
/characters/player/cubio.png
/characters/enemies/goblin/goblin.dae
/characters/enemies/goblin/goblin.png
/characters/npcs/suzanne/suzanne.dae
/characters/npcs/suzanne/suzanne.png
/levels/riverdale/riverdale.scn

----------------------------------------

TITLE: Initializing Network as Client or Server in C#
DESCRIPTION: Demonstrates how to initialize the network as either a client or server using ENetMultiplayerPeer in C#.

LANGUAGE: csharp
CODE:
// Create client.
var peer = new ENetMultiplayerPeer();
peer.CreateClient(IPAddress, Port);
Multiplayer.MultiplayerPeer = peer;

// Create server.
var peer = new ENetMultiplayerPeer();
peer.CreateServer(Port, MaxClients);
Multiplayer.MultiplayerPeer = peer;

----------------------------------------

TITLE: Connecting to a Timer Timeout Signal in C#
DESCRIPTION: Demonstrates how to connect to a Timer's Timeout signal using C# events syntax. The code adds a lambda function as an event handler that prints "Timeout!" when the timer times out.

LANGUAGE: csharp
CODE:
Timer myTimer = GetNode<Timer>("Timer");
myTimer.Timeout += () => GD.Print("Timeout!");

----------------------------------------

TITLE: Making REST API Requests in GDScript
DESCRIPTION: Example showing how to make GET and POST requests to a REST API endpoint and process JSON responses

LANGUAGE: gdscript
CODE:
func _ready():
    var http_request = HTTPRequest.new()
    add_child(http_request)
    http_request.request_completed.connect(self._http_request_completed)
    
    var error = http_request.request("https://httpbin.org/get")
    if error != OK:
        push_error("An error occurred in the HTTP request.")
    
    var body = JSON.new().stringify({"name": "Godette"})
    error = http_request.request("https://httpbin.org/post", [], HTTPClient.METHOD_POST, body)
    if error != OK:
        push_error("An error occurred in the HTTP request.")

func _http_request_completed(result, response_code, headers, body):
    var json = JSON.new()
    json.parse(body.get_string_from_utf8())
    var response = json.get_data()
    print(response.headers["User-Agent"])

----------------------------------------

TITLE: Vector Addition and Scalar Multiplication in Godot
DESCRIPTION: Demonstrates vector addition and scalar multiplication operations in Godot. These operations are fundamental for vector manipulation in game development.

LANGUAGE: GDScript
CODE:
var c = a + b  # (2, 5) + (3, 1) = (5, 6)
var c = a * 2  # (2, 5) * 2 = (4, 10)
var d = b / 3  # (3, 6) / 3 = (1, 2)
var e = d * -2 # (1, 2) * -2 = (-2, -4)

LANGUAGE: C#
CODE:
var c = a + b;  // (2, 5) + (3, 1) = (5, 6)
var c = a * 2;  // (2, 5) * 2 = (4, 10)
var d = b / 3;  // (3, 6) / 3 = (1, 2)
var e = d * -2; // (1, 2) * -2 = (-2, -4)

----------------------------------------

TITLE: Implementing Update Functions in C#
DESCRIPTION: Shows how to override _Process() and _PhysicsProcess() methods in C#. These methods are called every frame and every physics frame respectively, enabling continuous updates.

LANGUAGE: csharp
CODE:
public override void _Process(double delta)
{
    // Called every frame.
    base._Process(delta);
}

public override void _PhysicsProcess(double delta)
{
    // Called every physics frame.
    base._PhysicsProcess(delta);
}

----------------------------------------

TITLE: Basic GDScript Class Definition
DESCRIPTION: Example showing basic class definition with member variables, functions and inheritance

LANGUAGE: gdscript
CODE:
# Everything after "#" is a comment.
# A file is a class!

# (optional) icon to show in the editor dialogs:
@icon("res://path/to/optional/icon.svg")

# (optional) class definition:
class_name MyClass

# Inheritance:
extends BaseClass

# Member variables.
var a = 5
var s = "Hello"
var arr = [1, 2, 3]
var dict = {"key": "value", 2: 3}
var other_dict = {key = "value", other_key = 2}
var typed_var: int
var inferred_type := "String"

# Constants.
const ANSWER = 42
const THE_NAME = "Charly"

# Functions.
func some_function(param1, param2, param3):
    const local_const = 5

    if param1 < local_const:
        print(param1)
    elif param2 > 5:
        print(param2)
    else:
        print("Fail!")

    for i in range(20):
        print(i)

    while param2 != 0:
        param2 -= 1

    match param3:
        3:
            print("param3 is 3!")
        _:
            print("param3 is not 3!")

    var local_var = param1 + 3
    return local_var

----------------------------------------

TITLE: Resource Loading Examples in Multiple Languages
DESCRIPTION: Demonstrates different approaches to loading resources in GDScript, C#, and C++, comparing preload vs load methods and explaining constant vs variable resource loading.

LANGUAGE: gdscript
CODE:
# my_buildings.gd
extends Node

const BuildingScn = preload("res://building.tscn")
@export var a_building : PackedScene = preload("office.tscn")
const OfficeScn = load("res://office.tscn")
var office_scn = load("res://office.tscn")

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyBuildings : Node
{
    public readonly PackedScene Building = ResourceLoader.Load<PackedScene>("res://building.tscn");
    public PackedScene ABuilding;

    public override void _Ready()
    {
        ABuilding = GD.Load<PackedScene>("res://Office.tscn");
    }
}

LANGUAGE: cpp
CODE:
using namespace godot;

class MyBuildings : public Node {
    GDCLASS(MyBuildings, Node)

public:
    const Ref<PackedScene> building = ResourceLoader::get_singleton()->load("res://building.tscn");
    Ref<PackedScene> a_building;

    virtual void _ready() override {
        a_building = ResourceLoader::get_singleton()->load("res://office.tscn");
    }
};

----------------------------------------

TITLE: Instantiating Scenes in C#
DESCRIPTION: Demonstrates loading and instantiating a scene (PackedScene) in C#. This creates a new instance of the scene and adds it as a child node.

LANGUAGE: C#
CODE:
private PackedScene _bulletScene = GD.Load<PackedScene>("res://Bullet.tscn");

private void OnShoot()
{
    Node bullet = _bulletScene.Instantiate();
    AddChild(bullet);
}

----------------------------------------

TITLE: Implementing NavigationServer Setup and Path Query in C#
DESCRIPTION: C# version of the navigation setup code that creates a map, region, and mesh procedurally, then queries a path after synchronization. Shows proper NavigationServer synchronization in C#.

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyNode3D : Node3D
{
    public override void _Ready()
    {
        // Use call deferred to make sure the entire scene tree nodes are setup
        // else await on 'physics_frame' in a _Ready() might get stuck.
        CallDeferred(MethodName.CustomSetup);
    }

    private async void CustomSetup()
    {
        // Create a new navigation map.
        Rid map = NavigationServer3D.MapCreate();
        NavigationServer3D.MapSetUp(map, Vector3.Up);
        NavigationServer3D.MapSetActive(map, true);

        // Create a new navigation region and add it to the map.
        Rid region = NavigationServer3D.RegionCreate();
        NavigationServer3D.RegionSetTransform(region, Transform3D.Identity);
        NavigationServer3D.RegionSetMap(region, map);

        // Create a procedural navigation mesh for the region.
        var newNavigationMesh = new NavigationMesh()
        {
            Vertices =
            [
                new Vector3(0.0f, 0.0f, 0.0f),
                new Vector3(9.0f, 0.0f, 0.0f),
                new Vector3(0.0f, 0.0f, 9.0f),
            ],
        };
        int[] polygon = [0, 1, 2];
        newNavigationMesh.AddPolygon(polygon);
        NavigationServer3D.RegionSetNavigationMesh(region, newNavigationMesh);

        // Wait for NavigationServer sync to adapt to made changes.
        await ToSignal(GetTree(), SceneTree.SignalName.PhysicsFrame);

        // Query the path from the navigation server.
        var startPosition = new Vector3(0.1f, 0.0f, 0.1f);
        var targetPosition = new Vector3(1.0f, 0.0f, 1.0f);

        Vector3[] path = NavigationServer3D.MapGetPath(map, startPosition, targetPosition, optimize: true);

        GD.Print("Found a path!");
        GD.Print((Variant)path);
    }

----------------------------------------

TITLE: Implementing Singleton Pattern in C#
DESCRIPTION: Implementation of a singleton pattern in C# using a static Instance property with type safety.

LANGUAGE: csharp
CODE:
public partial class PlayerVariables : Node
{
    public static PlayerVariables Instance { get; private set; }

    public int Health { get; set; }

    public override void _Ready()
    {
        Instance = this;
    }
}

----------------------------------------

TITLE: Connecting to C# Signals from GDScript in Godot
DESCRIPTION: Shows how to connect to C# signals from GDScript in Godot, using the same syntax as connecting to GDScript signals.

LANGUAGE: gdscript
CODE:
my_csharp_node.MySignal.connect(my_signal_handler)

my_csharp_node.MySignalWithParams.connect(my_signal_with_params_handler)

----------------------------------------

TITLE: Handling Control Notifications in GDScript
DESCRIPTION: Demonstrates how to handle various control notifications using the _notification() method in GDScript.

LANGUAGE: gdscript
CODE:
func _notification(what):
    match what:
        NOTIFICATION_MOUSE_ENTER:
            pass # Mouse entered the area of this control.
        NOTIFICATION_MOUSE_EXIT:
            pass # Mouse exited the area of this control.
        NOTIFICATION_FOCUS_ENTER:
            pass # Control gained focus.
        NOTIFICATION_FOCUS_EXIT:
            pass # Control lost focus.
        NOTIFICATION_THEME_CHANGED:
            pass # Theme used to draw the control changed;
            # update and redraw is recommended if using a theme.
        NOTIFICATION_VISIBILITY_CHANGED:
            pass # Control became visible/invisible;
            # check new status with is_visible().
        NOTIFICATION_RESIZED:
            pass # Control changed size; check new size
            # with get_size().
        NOTIFICATION_MODAL_CLOSE:
            pass # For modal pop-ups, notification
            # that the pop-up was closed.

----------------------------------------

TITLE: Drawing an Arc Between Two Points in C#
DESCRIPTION: Shows how to draw an arc between two points, with one point following the mouse cursor, in C#.

LANGUAGE: C#
CODE:
public partial class MyNode2DLine : Node2D
{
    [Export]
    public Vector2 Point1 { get; set; } = new Vector2(0f, 0f);
    [Export(PropertyHint.Range, "1,1000,")]
    public int Segments { get; set; } = 100;
    [Export]
    public int Width { get; set; } = 10;
    [Export]
    public Color Color { get; set; } = Colors.Green;
    [Export]
    public bool AntiAliasing { get; set; } = false;

    private Vector2 _point2;

    public override void _Process(double delta)
    {
        Vector2 mousePosition = GetViewport().GetMousePosition();
        if (mousePosition != _point2)
        {
            _point2 = mousePosition;
            QueueRedraw();
        }
    }

    public override void _Draw()
    {
        Vector2 center = new Vector2((_point2.X + Point1.X) / 2.0f,
                                     (_point2.Y + Point1.Y) / 2.0f);
        float radius = Point1.DistanceTo(_point2) / 2.0f;
        float startAngle = (_point2 - Point1).Angle();
        float endAngle = (Point1 - _point2).Angle();
        if (endAngle < 0.0f)
        {
            endAngle += Mathf.Tau;
        }

        DrawArc(center, radius, startAngle, endAngle, Segments, Color,
                Width, AntiAliasing);
    }
}

----------------------------------------

TITLE: Character Movement and Collision in Godot
DESCRIPTION: Illustrates how to handle character movement and collision reflection using vectors in Godot. This example uses a CharacterBody2D and demonstrates the use of the bounce() method for reflection.

LANGUAGE: GDScript
CODE:
var collision: KinematicCollision2D = move_and_collide(velocity * delta)
if collision:
    var reflect = collision.get_remainder().bounce(collision.get_normal())
    velocity = velocity.bounce(collision.get_normal())
    move_and_collide(reflect)

LANGUAGE: C#
CODE:
KinematicCollision2D collision = MoveAndCollide(_velocity * (float)delta);
if (collision != null)
{
    var reflect = collision.GetRemainder().Bounce(collision.GetNormal());
    _velocity = _velocity.Bounce(collision.GetNormal());
    MoveAndCollide(reflect);
}

----------------------------------------

TITLE: Comprehensive Expression Evaluation Example in GDScript
DESCRIPTION: A complete example demonstrating various types of expressions including boolean, mathematical, built-in method calls, and user-defined method calls.

LANGUAGE: GDScript
CODE:
const DAYS_IN_YEAR = 365
var script_member_variable = 1000

func _ready():
    # Constant boolean expression.
    evaluate("true && false")
    # Boolean expression with variables.
    evaluate("!(a && b)", ["a", "b"], [true, false])

    # Constant mathexpression.
    evaluate("2 + 2")
    # Math expression with variables.
    evaluate("x + y", ["x", "y"], [60, 100])

    # Call built-in method (built-in math function call).
    evaluate("deg_to_rad(90)")

    # Call user method (defined in the script).
    evaluate("call_me() + DAYS_IN_YEAR + script_member_variable")
    evaluate("call_me(42)")
    evaluate("call_me('some string')")

func evaluate(command, variable_names = [], variable_values = []) -> void:
    var expression = Expression.new()
    var error = expression.parse(command, variable_names)
    if error != OK:
        push_error(expression.get_error_text())
        return

    var result = expression.execute(variable_values, self)

    if not expression.has_execute_failed():
        print(str(result))

func call_me(argument = null):
    print("\nYou called 'call_me()' in the expression text.")
    if argument:
        print("Argument passed: %s" % argument)
    return 0

----------------------------------------

TITLE: Hello World Example - GDScript and C#
DESCRIPTION: Basic Hello World examples showing the _ready() function implementation in both GDScript and C#. These demonstrate the minimal code required to print text when a node enters the scene tree.

LANGUAGE: gdscript
CODE:
func _ready():
    print("Hello world!")

LANGUAGE: csharp
CODE:
public override void _Ready()
{
    GD.Print("Hello world!");
}

----------------------------------------

TITLE: Implementing Idle Processing in C#
DESCRIPTION: Shows the implementation of the _Process method for idle processing in C#. This method is called every frame and receives a delta time parameter.

LANGUAGE: C#
CODE:
public override void _Process(double delta)
{
    // Do something...
}

----------------------------------------

TITLE: Using Node Paths in Godot (C#)
DESCRIPTION: Demonstrates how to use node paths to access nested nodes in the scene tree using C#. This example gets a reference to an AnimationPlayer node that is a child of a ShieldBar node.

LANGUAGE: csharp
CODE:
private AnimationPlayer _animationPlayer;

public override void _Ready()
{
    base._Ready();

    _animationPlayer = GetNode<AnimationPlayer>("ShieldBar/AnimationPlayer");
}

----------------------------------------

TITLE: Implementing Custom Tree Node Structure
DESCRIPTION: Example implementation of a basic tree data structure node in both GDScript and C#. Demonstrates proper cleanup in destructor and basic parent-child relationship management.

LANGUAGE: gdscript
CODE:
extends Object
class_name TreeNode

var _parent: TreeNode = null
var _children := []

func _notification(p_what):
    match p_what:
        NOTIFICATION_PREDELETE:
            # Destructor.
            for a_child in _children:
                a_child.free()

LANGUAGE: csharp
CODE:
using Godot;
using System.Collections.Generic;

public partial class TreeNode : GodotObject
{
    private TreeNode _parent = null;

    private List<TreeNode> _children = [];

    public override void _Notification(int what)
    {
        switch (what)
        {
            case NotificationPredelete:
                foreach (TreeNode child in _children)
                {
                    node.Free();
                }
                break;
        }
    }
}

----------------------------------------

TITLE: Basic Movement with CharacterBody2D in C#
DESCRIPTION: Implements basic movement for a CharacterBody2D using MoveAndCollide() in C#.

LANGUAGE: C#
CODE:
using Godot;

public partial class MyCharacterBody2D : CharacterBody2D
{
    private int _speed = 300;

    public void GetInput()
    {
        Vector2 inputDir = Input.GetVector("ui_left", "ui_right", "ui_up", "ui_down");
        Velocity = inputDir * _speed;
    }

    public override void _PhysicsProcess(double delta)
    {
        GetInput();
        MoveAndCollide(Velocity * (float)delta);
    }
}

----------------------------------------

TITLE: Transform Interpolation in GDScript and C#
DESCRIPTION: Shows how to interpolate between two 3D transforms using Transform3D.interpolate_with() function. The example moves a 3D model between two positions.

LANGUAGE: gdscript
CODE:
var t = 0.0

func _physics_process(delta):
    t += delta
    $Monkey.transform = $Position1.transform.interpolate_with($Position2.transform, t)

LANGUAGE: csharp
CODE:
private float _t = 0.0f;

public override void _PhysicsProcess(double delta)
{
    _t += (float)delta;

    Marker3D p1 = GetNode<Marker3D>("Position1");
    Marker3D p2 = GetNode<Marker3D>("Position2");
    CSGMesh3D monkey = GetNode<CSGMesh3D>("Monkey");

    monkey.Transform = p1.Transform.InterpolateWith(p2.Transform, _t);
}

----------------------------------------

TITLE: Creating and Configuring Navigation Meshes for Different Actor Sizes in C#
DESCRIPTION: This snippet demonstrates how to create and configure navigation meshes for different actor sizes, parse source geometry, bake navigation meshes, create navigation maps and regions, and query paths for different agent sizes using C# in Godot.

LANGUAGE: csharp
CODE:
// Create a navigation mesh resource for each actor size.
NavigationMesh navigationMeshStandardSize = new NavigationMesh();
NavigationMesh navigationMeshSmallSize = new NavigationMesh();
NavigationMesh navigationMeshHugeSize = new NavigationMesh();

// Set appropriated agent parameters.
navigationMeshStandardSize.AgentRadius = 0.5f;
navigationMeshStandardSize.AgentHeight = 1.8f;
navigationMeshSmallSize.AgentRadius = 0.25f;
navigationMeshSmallSize.AgentHeight = 0.7f;
navigationMeshHugeSize.AgentRadius = 1.5f;
navigationMeshHugeSize.AgentHeight = 2.5f;

// Get the root node to parse geometry for the baking.
Node3D rootNode = GetNode<Node3D>("NavigationMeshBakingRootNode");

// Create the source geometry resource that will hold the parsed geometry data.
NavigationMeshSourceGeometryData3D sourceGeometryData = new NavigationMeshSourceGeometryData3D();

// Parse the source geometry from the scene tree on the main thread.
// The navigation mesh is only required for the parse settings so any of the three will do.
NavigationServer3D.ParseSourceGeometryData(navigationMeshStandardSize, sourceGeometryData, rootNode);

// Bake the navigation geometry for each agent size from the same source geometry.
// If required for performance this baking step could also be done on background threads.
NavigationServer3D.BakeFromSourceGeometryData(navigationMeshStandardSize, sourceGeometryData);
NavigationServer3D.BakeFromSourceGeometryData(navigationMeshSmallSize, sourceGeometryData);
NavigationServer3D.BakeFromSourceGeometryData(navigationMeshHugeSize, sourceGeometryData);

// Create different navigation maps on the NavigationServer.
Rid navigationMapStandard = NavigationServer3D.MapCreate();
Rid navigationMapSmall = NavigationServer3D.MapCreate();
Rid navigationMapHuge = NavigationServer3D.MapCreate();

// Set the new navigation maps as active.
NavigationServer3D.MapSetActive(navigationMapStandard, true);
NavigationServer3D.MapSetActive(navigationMapSmall, true);
NavigationServer3D.MapSetActive(navigationMapHuge, true);

// Create a region for each map.
Rid navigationRegionStandard = NavigationServer3D.RegionCreate();
Rid navigationRegionSmall = NavigationServer3D.RegionCreate();
Rid navigationRegionHuge = NavigationServer3D.RegionCreate();

// Add the regions to the maps.
NavigationServer3D.RegionSetMap(navigationRegionStandard, navigationMapStandard);
NavigationServer3D.RegionSetMap(navigationRegionSmall, navigationMapSmall);
NavigationServer3D.RegionSetMap(navigationRegionHuge, navigationMapHuge);

// Set navigation mesh for each region.
NavigationServer3D.RegionSetNavigationMesh(navigationRegionStandard, navigationMeshStandardSize);
NavigationServer3D.RegionSetNavigationMesh(navigationRegionSmall, navigationMeshSmallSize);
NavigationServer3D.RegionSetNavigationMesh(navigationRegionHuge, navigationMeshHugeSize);

// Create start and end position for the navigation path query.
Vector3 startPos = new Vector3(0.0f, 0.0f, 0.0f);
Vector3 endPos = new Vector3(2.0f, 0.0f, 0.0f);
bool useCorridorFunnel = true;

// Query paths for each agent size.
var pathStandardAgent = NavigationServer3D.MapGetPath(navigationMapStandard, startPos, endPos, useCorridorFunnel);
var pathSmallAgent = NavigationServer3D.MapGetPath(navigationMapSmall, startPos, endPos, useCorridorFunnel);
var pathHugeAgent = NavigationServer3D.MapGetPath(navigationMapHuge, startPos, endPos, useCorridorFunnel);

----------------------------------------

TITLE: Creating and Initializing Dictionary - GDScript
DESCRIPTION: Shows different ways to create and initialize a Dictionary in GDScript, including empty dictionaries, key-value pairs, and variable interpolation.

LANGUAGE: gdscript
CODE:
var my_dict = {} # Creates an empty dictionary.

var dict_variable_key = "Another key name"
var dict_variable_value = "value2"
var another_dict = {
    "Some key name": "value1",
    dict_variable_key: dict_variable_value,
}

var points_dict = {"White": 50, "Yellow": 75, "Orange": 100}

# Alternative Lua-style syntax.
# Doesn't require quotes around keys, but only string constants can be used as key names.
# Additionally, key names must start with a letter or an underscore.
# Here, `some_key` is a string literal, not a variable!
another_dict = {
    some_key = 42,
}

----------------------------------------

TITLE: Manual Function Timing in GDScript
DESCRIPTION: Demonstrates how to measure execution time of a function in microseconds using GDScript. This technique is useful for precise performance measurement of specific code sections.

LANGUAGE: gdscript
CODE:
var time_start = Time.get_ticks_usec()

# Your function you want to time
update_enemies()

var time_end = Time.get_ticks_usec()
print("update_enemies() took %d microseconds" % time_end - time_start)

----------------------------------------

TITLE: Implementing Physics Processing in GDScript
DESCRIPTION: Demonstrates how to implement the _physics_process method for physics processing in GDScript. This method is called at fixed intervals and receives a delta time parameter.

LANGUAGE: GDScript
CODE:
func _physics_process(delta):
    # Do something...
    pass

----------------------------------------

TITLE: Mouse Button Event Handling
DESCRIPTION: Example of handling mouse button input events with position tracking.

LANGUAGE: gdscript
CODE:
func _input(event):
    if event is InputEventMouseButton:
        print("mouse button event at ", event.position)

LANGUAGE: csharp
CODE:
public override void _Input(InputEvent @event)
{
    if (@event is InputEventMouseButton mouseEvent)
    {
        GD.Print("mouse button event at ", mouseEvent.Position);
    }
}

----------------------------------------

TITLE: Implementing 3D Character Navigation in GDScript
DESCRIPTION: A CharacterBody3D script that implements basic navigation movement using NavigationAgent3D. The character moves towards a target position using pathfinding, with proper initialization and physics-based movement.

LANGUAGE: gdscript
CODE:
extends CharacterBody3D

var movement_speed: float = 2.0
var movement_target_position: Vector3 = Vector3(-3.0,0.0,2.0)

@onready var navigation_agent: NavigationAgent3D = $NavigationAgent3D

func _ready():
    navigation_agent.path_desired_distance = 0.5
    navigation_agent.target_desired_distance = 0.5

    actor_setup.call_deferred()

func actor_setup():
    await get_tree().physics_frame
    set_movement_target(movement_target_position)

func set_movement_target(movement_target: Vector3):
    navigation_agent.set_target_position(movement_target)

func _physics_process(delta):
    if navigation_agent.is_navigation_finished():
        return

    var current_agent_position: Vector3 = global_position
    var next_path_position: Vector3 = navigation_agent.get_next_path_position()

    velocity = current_agent_position.direction_to(next_path_position) * movement_speed
    move_and_slide()

----------------------------------------

TITLE: Creating Local WebRTC Signaling Server in GDScript
DESCRIPTION: Implements a local signaling server as a singleton to manage WebRTC peer connections and handle session/candidate exchange between peers.

LANGUAGE: GDScript
CODE:
# A local signaling server. Add this to autoloads with name "Signaling" (/root/Signaling)
extends Node

# We will store the two peers here
var peers = []

func register(path):
    assert(peers.size() < 2)
    peers.append(path)
    if peers.size() == 2:
        get_node(peers[0]).peer.create_offer()


func _find_other(path):
    # Find the other registered peer.
    for p in peers:
        if p != path:
            return p
    return ""


func send_session(path, type, sdp):
    var other = _find_other(path)
    assert(other != "")
    get_node(other).peer.set_remote_description(type, sdp)


func send_candidate(path, mid, index, sdp):
    var other = _find_other(path)
    assert(other != "")
    get_node(other).peer.add_ice_candidate(mid, index, sdp)

----------------------------------------

TITLE: Loading and Saving Plain Text Files in Godot
DESCRIPTION: Demonstrates how to read from and write to plain text files using Godot's FileAccess class.

LANGUAGE: gdscript
CODE:
func save_file(content):
    var file = FileAccess.open("/path/to/file.txt", FileAccess.WRITE)
    file.store_string(content)

func load_file():
    var file = FileAccess.open("/path/to/file.txt", FileAccess.READ)
    var content = file.get_as_text()
    return content

LANGUAGE: csharp
CODE:
private void SaveFile(string content)
{
    using var file = FileAccess.Open("/Path/To/File.txt", FileAccess.ModeFlags.Write);
    file.StoreString(content);
}

private string LoadFile()
{
    using var file = FileAccess.Open("/Path/To/File.txt", FileAccess.ModeFlags.Read);
    string content = file.GetAsText();
    return content;
}

----------------------------------------

TITLE: Custom Iterator Implementation in GDScript
DESCRIPTION: Shows how to create custom iterators by implementing _iter_init, _iter_next, and _iter_get functions.

LANGUAGE: gdscript
CODE:
class ForwardIterator:
    var start
    var current
    var end
    var increment

    func _init(start, stop, increment):
        self.start = start
        self.current = start
        self.end = stop
        self.increment = increment

    func should_continue():
        return (current < end)

    func _iter_init(arg):
        current = start
        return should_continue()

    func _iter_next(arg):
        current += increment
        return should_continue()

    func _iter_get(arg):
        return current

----------------------------------------

TITLE: Instantiating Nodes and Scenes in Godot
DESCRIPTION: Demonstrates the different methods for instantiating regular nodes, script-based nodes, and scenes in Godot. Shows the syntax difference between creating script instances and scene instances.

LANGUAGE: gdscript
CODE:
const MyNode = preload("my_node.gd")
const MyScene = preload("my_scene.tscn")
var node = Node.new()
var my_node = MyNode.new() # Same method call.
var my_scene = MyScene.instantiate() # Different method call.
var my_inherited_scene = MyScene.instantiate(PackedScene.GEN_EDIT_STATE_MAIN) # Create scene inheriting from MyScene.

LANGUAGE: csharp
CODE:
using Godot;

public partial class Game : Node
{
    public static CSharpScript MyNode { get; } =
        GD.Load<CSharpScript>("res://Path/To/MyNode.cs");
    public static PackedScene MyScene { get; } =
        GD.Load<PackedScene>("res://Path/To/MyScene.tscn");
    private Node _node;
    private Node _myNode;
    private Node _myScene;
    private Node _myInheritedScene;

    public Game()
    {
        _node = new Node();
        _myNode = MyNode.New().As<Node>();
        // Different than calling new() or MyNode.New(). Instantiated from a PackedScene.
        _myScene = MyScene.Instantiate();
        // Create scene inheriting from MyScene.
        _myInheritedScene = MyScene.Instantiate(PackedScene.GenEditState.Main);
    }
}

----------------------------------------

TITLE: Implementing Mouse-based Rotation and Movement in Godot
DESCRIPTION: This code snippet demonstrates how to implement rotation and movement for a CharacterBody2D node in Godot, where the character always faces the mouse cursor. Movement is controlled by keyboard input.

LANGUAGE: GDScript
CODE:
extends CharacterBody2D

@export var speed = 400

func get_input():
    look_at(get_global_mouse_position())
    velocity = transform.x * Input.get_axis("down", "up") * speed

func _physics_process(delta):
    get_input()
    move_and_slide()

LANGUAGE: C#
CODE:
using Godot;

public partial class Movement : CharacterBody2D
{
    [Export]
    public int Speed { get; set; } = 400;

    public void GetInput()
    {
        LookAt(GetGlobalMousePosition());
        Velocity = Transform.X * Input.GetAxis("down", "up") * Speed;
    }

    public override void _PhysicsProcess(double delta)
    {
        GetInput();
        MoveAndSlide();
    }
}

----------------------------------------

TITLE: NavigationAgent3D with Node3D in C#
DESCRIPTION: Implements basic movement and avoidance for a Node3D using NavigationAgent3D in C#.

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyNode3D : Node3D
{
    [Export]
    public float MovementSpeed { get; set; } = 4.0f;
    NavigationAgent3D _navigationAgent;
    private float _movementDelta;

    public override void _Ready()
    {
        _navigationAgent = GetNode<NavigationAgent3D>("NavigationAgent3D");
        _navigationAgent.VelocityComputed += OnVelocityComputed;
    }

    private void SetMovementTarget(Vector3 movementTarget)
    {
        _navigationAgent.TargetPosition = movementTarget;
    }

    public override void _PhysicsProcess(double delta)
    {
        // Do not query when the map has never synchronized and is empty.
        if (NavigationServer3D.MapGetIterationId(_navigationAgent.GetNavigationMap()) == 0)
        {
            return;
        }

        if (_navigationAgent.IsNavigationFinished())
        {
            return;
        }

        _movementDelta = MovementSpeed * (float)delta;
        Vector3 nextPathPosition = _navigationAgent.GetNextPathPosition();
        Vector3 newVelocity = GlobalPosition.DirectionTo(nextPathPosition) * _movementDelta;
        if (_navigationAgent.AvoidanceEnabled)
        {
            _navigationAgent.Velocity = newVelocity;
        }
        else
        {
            OnVelocityComputed(newVelocity);
        }
    }

    private void OnVelocityComputed(Vector3 safeVelocity)
    {
        GlobalPosition = GlobalPosition.MoveToward(GlobalPosition + safeVelocity, _movementDelta);
    }
}

----------------------------------------

TITLE: Getting Node References in Godot (C#)
DESCRIPTION: Shows how to obtain references to child nodes using the GetNode<T>() method in C#. This is typically done in the _Ready() method to ensure the nodes exist in the scene tree.

LANGUAGE: csharp
CODE:
private Sprite2D _sprite2D;
private Camera2D _camera2D;

public override void _Ready()
{
    base._Ready();

    _sprite2D = GetNode<Sprite2D>("Sprite2D");
    _camera2D = GetNode<Camera2D>("Camera2D");
}

----------------------------------------

TITLE: Loading Resources in GDScript
DESCRIPTION: Demonstrates how to load a resource using the load() function in GDScript. This method loads the resource when the line is executed.

LANGUAGE: GDScript
CODE:
func _ready():
    # Godot loads the Resource when it reads this very line.
    var imported_resource = load("res://robi.png")
    $sprite.texture = imported_resource

----------------------------------------

TITLE: Implementing 8-way Movement in Godot
DESCRIPTION: This code snippet demonstrates how to implement 8-way movement for a CharacterBody2D node in Godot. It uses the Input.get_vector() method to determine the movement direction based on user input.

LANGUAGE: GDScript
CODE:
extends CharacterBody2D

@export var speed = 400

func get_input():
    var input_direction = Input.get_vector("left", "right", "up", "down")
    velocity = input_direction * speed

func _physics_process(delta):
    get_input()
    move_and_slide()

LANGUAGE: C#
CODE:
using Godot;

public partial class Movement : CharacterBody2D
{
    [Export]
    public int Speed { get; set; } = 400;

    public void GetInput()
    {
        Vector2 inputDirection = Input.GetVector("left", "right", "up", "down");
        Velocity = inputDirection * Speed;
    }

    public override void _PhysicsProcess(double delta)
    {
        GetInput();
        MoveAndSlide();
    }
}

----------------------------------------

TITLE: Creating Custom Resources in GDScript
DESCRIPTION: Illustrates how to create a custom Resource script in GDScript. This example defines a BotStats resource with exportable properties and an initializer.

LANGUAGE: GDScript
CODE:
extends Resource

@export var health: int
@export var sub_resource: Resource
@export var strings: PackedStringArray

# Make sure that every parameter has a default value.
# Otherwise, there will be problems with creating and editing
# your resource via the inspector.
func _init(p_health = 0, p_sub_resource = null, p_strings = []):
    health = p_health
    sub_resource = p_sub_resource
    strings = p_strings

----------------------------------------

TITLE: Resetting Player Position in GDScript
DESCRIPTION: Implements a method to reset the player's position and visibility when starting a new game.

LANGUAGE: GDScript
CODE:
func start(pos):
    position = pos
    show()
    $CollisionShape2D.disabled = false

----------------------------------------

TITLE: Calculating Distance to Plane in GDScript and C#
DESCRIPTION: Demonstrates how to calculate the distance from a point to a plane using the dot product. This is a fundamental operation in vector math and is useful for various geometric calculations.

LANGUAGE: gdscript
CODE:
var distance = normal.dot(point)

LANGUAGE: csharp
CODE:
var distance = normal.Dot(point);

----------------------------------------

TITLE: Selecting Random Array Elements in Godot
DESCRIPTION: Demonstrates how to select random elements from an array in Godot, including methods to prevent repetition.

LANGUAGE: gdscript
CODE:
var _fruits = ["apple", "orange", "pear", "banana"]
var _last_fruit = ""

func get_fruit():
    var random_fruit = _fruits[randi() % _fruits.size()]
    while random_fruit == _last_fruit:
        random_fruit = _fruits[randi() % _fruits.size()]
    _last_fruit = random_fruit
    return random_fruit

LANGUAGE: csharp
CODE:
private string[] _fruits = ["apple", "orange", "pear", "banana"];
private string _lastFruit = "";

public string GetFruit()
{
    string randomFruit = _fruits[GD.Randi() % _fruits.Length];
    while (randomFruit == _lastFruit)
    {
        randomFruit = _fruits[GD.Randi() % _fruits.Length];
    }
    _lastFruit = randomFruit;
    return randomFruit;
}

----------------------------------------

TITLE: Implementing Basic 2D Character Navigation in C#
DESCRIPTION: A C# implementation for character movement using NavigationAgent2D. Provides the same functionality as the GDScript version with proper C# syntax and conventions.

LANGUAGE: C#
CODE:
using Godot;

public partial class MyCharacterBody2D : CharacterBody2D
{
    private NavigationAgent2D _navigationAgent;

    private float _movementSpeed = 200.0f;
    private Vector2 _movementTargetPosition = new Vector2(70.0f, 226.0f);

    public Vector2 MovementTarget
    {
        get { return _navigationAgent.TargetPosition; }
        set { _navigationAgent.TargetPosition = value; }
    }

    public override void _Ready()
    {
        base._Ready();

        _navigationAgent = GetNode<NavigationAgent2D>("NavigationAgent2D");

        _navigationAgent.PathDesiredDistance = 4.0f;
        _navigationAgent.TargetDesiredDistance = 4.0f;

        Callable.From(ActorSetup).CallDeferred();
    }

    public override void _PhysicsProcess(double delta)
    {
        base._PhysicsProcess(delta);

        if (_navigationAgent.IsNavigationFinished())
        {
            return;
        }

        Vector2 currentAgentPosition = GlobalTransform.Origin;
        Vector2 nextPathPosition = _navigationAgent.GetNextPathPosition();

        Velocity = currentAgentPosition.DirectionTo(nextPathPosition) * _movementSpeed;
        MoveAndSlide();
    }

    private async void ActorSetup()
    {
        await ToSignal(GetTree(), SceneTree.SignalName.PhysicsFrame);
        MovementTarget = _movementTargetPosition;
    }
}

----------------------------------------

TITLE: Using Crypto Class for Various Cryptographic Operations in GDScript
DESCRIPTION: Demonstrates key generation, certificate creation, encryption/decryption, signing, and verification using the Crypto class.

LANGUAGE: gdscript
CODE:
var crypto = Crypto.new()

# Generate new RSA key.
var key = crypto.generate_rsa(4096)

# Generate new self-signed certificate with the given key.
var cert = crypto.generate_self_signed_certificate(key, "CN=mydomain.com,O=My Game Company,C=IT")

# Save key and certificate in the user folder.
key.save("user://generated.key")
cert.save("user://generated.crt")

# Encryption
var data = "Some data"
var encrypted = crypto.encrypt(key, data.to_utf8_buffer())

# Decryption
var decrypted = crypto.decrypt(key, encrypted)

# Signing
var signature = crypto.sign(HashingContext.HASH_SHA256, data.sha256_buffer(), key)

# Verifying
var verified = crypto.verify(HashingContext.HASH_SHA256, data.sha256_buffer(), signature, key)

# Checks
assert(verified)
assert(data.to_utf8_buffer() == decrypted)

----------------------------------------

TITLE: Setting Custom HTTP Headers in Godot (C#)
DESCRIPTION: C# version of setting custom HTTP headers, specifically a User-Agent header, when making an HTTP request.

LANGUAGE: C#
CODE:
HttpRequest httpRequest = GetNode<HttpRequest>("HTTPRequest");
httpRequest.Request("https://api.github.com/repos/godotengine/godot/releases/latest", ["User-Agent: YourCustomUserAgent"]);

----------------------------------------

TITLE: Implementing Update Functions in GDScript
DESCRIPTION: Demonstrates how to override _process() and _physics_process() functions in GDScript. These functions are called every frame and every physics frame respectively, allowing for continuous updates.

LANGUAGE: gdscript
CODE:
# Called every frame.
func _process(delta):
    pass

# Called every physics frame.
func _physics_process(delta):
    pass

----------------------------------------

TITLE: Implementing Remote Procedure Calls in C#
DESCRIPTION: Shows how to define and use remote procedure calls (RPCs) in C#, including different RPC modes and transfer options.

LANGUAGE: csharp
CODE:
public override void _Ready()
{
    if (Multiplayer.IsServer())
    {
        Rpc(MethodName.PrintOncePerClient);
    }
}

[Rpc]
private void PrintOncePerClient()
{
    GD.Print("I will be printed to the console once per each connected client.");
}

----------------------------------------

TITLE: Controlling AnimatedSprite2D Animation in C#
DESCRIPTION: This snippet shows how to control an AnimatedSprite2D animation using C#. It plays the 'run' animation when the right arrow key is pressed and stops it when released.

LANGUAGE: C#
CODE:
using Godot;

public partial class Character : CharacterBody2D
{
    private AnimatedSprite2D _animatedSprite;

    public override void _Ready()
    {
        _animatedSprite = GetNode<AnimatedSprite2D>("AnimatedSprite2D");
    }

    public override void _Process(double delta)
    {
        if (Input.IsActionPressed("ui_right"))
        {
            _animatedSprite.Play("run");
        }
        else
        {
            _animatedSprite.Stop();
        }
    }
}

----------------------------------------

TITLE: Cryptographically Secure Random Number Generation in Godot
DESCRIPTION: Demonstrates how to use Godot's Crypto class for cryptographically secure random number generation.

LANGUAGE: gdscript
CODE:
var crypto := Crypto.new()
var byte_array := crypto.generate_random_bytes(8)

var random_int_1 := byte_array.decode_u32(0)
var random_int_2 := byte_array.decode_u32(4)

prints("Random integers:", random_int_1, random_int_2)

----------------------------------------

TITLE: Action Strength and Boolean Input Handling in Godot
DESCRIPTION: Examples of handling analog action strength and boolean input states for controller inputs.

LANGUAGE: gdscript
CODE:
var strength = Input.get_action_strength("accelerate")
var jumping = Input.is_action_pressed("jump")

LANGUAGE: csharp
CODE:
float strength = Input.GetActionStrength("accelerate");
bool jumping = Input.IsActionPressed("jump");

----------------------------------------

TITLE: Handling Coin Collection with Area2D in GDScript
DESCRIPTION: This snippet demonstrates how to use an Area2D node to detect when a player's body enters the coin's area, triggering the coin to be collected (removed from the scene).

LANGUAGE: gdscript
CODE:
extends Area2D

func _on_coin_body_entered(body):
    queue_free()

----------------------------------------

TITLE: Finding a Path Using AStar2D
DESCRIPTION: Demonstrates how to set up a graph and find a path between two points using AStar2D.

LANGUAGE: gdscript
CODE:
var astar = AStar2D.new()
astar.add_point(1, Vector2(0, 0))
astar.add_point(2, Vector2(0, 1), 1) # Default weight is 1
astar.add_point(3, Vector2(1, 1))
astar.add_point(4, Vector2(2, 0))

astar.connect_points(1, 2, false)
astar.connect_points(2, 3, false)
astar.connect_points(4, 3, false)
astar.connect_points(1, 4, false)

var res = astar.get_id_path(1, 3) # Returns [1, 2, 3]

LANGUAGE: csharp
CODE:
var astar = new AStar2D();
astar.AddPoint(1, new Vector2(0, 0));
astar.AddPoint(2, new Vector2(0, 1), 1); // Default weight is 1
astar.AddPoint(3, new Vector2(1, 1));
astar.AddPoint(4, new Vector2(2, 0));

astar.ConnectPoints(1, 2, false);
astar.ConnectPoints(2, 3, false);
astar.ConnectPoints(4, 3, false);
astar.ConnectPoints(1, 4, false);

long[] res = astar.GetIdPath(1, 3); // Returns [1, 2, 3]

----------------------------------------

TITLE: Adding Action with InputEvent in Godot
DESCRIPTION: Example of adding an action and associating an input event in Godot's InputMap singleton.

LANGUAGE: GDScript
CODE:
InputMap.add_action("jump", 0.2)
InputMap.action_add_event("jump", input_event)

----------------------------------------

TITLE: Connecting Signals Between Parent and Child Nodes in Godot
DESCRIPTION: Demonstrates how to connect signals between parent and child nodes in Godot using GDScript, C#, and C++. This approach allows for loose coupling between nodes.

LANGUAGE: GDScript
CODE:
# Parent
$Child.signal_name.connect(method_on_the_object)

# Child
signal_name.emit() # Triggers parent-defined behavior.

LANGUAGE: C#
CODE:
// Parent
GetNode("Child").Connect("SignalName", Callable.From(ObjectWithMethod.MethodOnTheObject));

// Child
EmitSignal("SignalName"); // Triggers parent-defined behavior.

LANGUAGE: C++
CODE:
// Parent
Node *node = get_node<Node>("Child");
if (node != nullptr) {
    node->connect("signal_name", callable_mp(this, &ObjectWithMethod::method_on_the_object));
}

// Child
emit_signal("signal_name"); // Triggers parent-defined behavior.

----------------------------------------

TITLE: NavigationAgent2D with CharacterBody2D in GDScript
DESCRIPTION: Implements basic movement and avoidance for a CharacterBody2D using NavigationAgent2D in GDScript.

LANGUAGE: gdscript
CODE:
extends CharacterBody2D

@export var movement_speed: float = 4.0
@onready var navigation_agent: NavigationAgent2D = get_node("NavigationAgent2D")

func _ready() -> void:
    navigation_agent.velocity_computed.connect(Callable(_on_velocity_computed))

func set_movement_target(movement_target: Vector2):
    navigation_agent.set_target_position(movement_target)

func _physics_process(delta):
    # Do not query when the map has never synchronized and is empty.
    if NavigationServer2D.map_get_iteration_id(navigation_agent.get_navigation_map()) == 0:
        return
    if navigation_agent.is_navigation_finished():
        return

    var next_path_position: Vector2 = navigation_agent.get_next_path_position()
    var new_velocity: Vector2 = global_position.direction_to(next_path_position) * movement_speed
    if navigation_agent.avoidance_enabled:
        navigation_agent.set_velocity(new_velocity)
    else:
        _on_velocity_computed(new_velocity)

func _on_velocity_computed(safe_velocity: Vector2):
    velocity = safe_velocity
    move_and_slide()

----------------------------------------

TITLE: Mutex Implementation for Thread Synchronization
DESCRIPTION: Shows how to use Mutex for protecting shared resources between threads. Demonstrates proper locking and unlocking patterns to prevent race conditions.

LANGUAGE: GDScript
CODE:
var counter := 0
var mutex: Mutex
var thread: Thread

func _ready():
    mutex = Mutex.new()
    thread = Thread.new()
    thread.start(_thread_function)

    mutex.lock()
    counter += 1
    mutex.unlock()

func _thread_function():
    mutex.lock()
    counter += 1
    mutex.unlock()

func _exit_tree():
    thread.wait_to_finish()
    print("Counter is: ", counter)

----------------------------------------

TITLE: Implementing RigidBody Look Follow in GDScript
DESCRIPTION: A custom implementation for making a RigidBody3D node smoothly rotate to face a target position. Uses physics-based rotation through angular velocity instead of direct transform manipulation to maintain proper physics simulation.

LANGUAGE: gdscript
CODE:
extends RigidBody3D

var speed: float = 0.1

func look_follow(state: PhysicsDirectBodyState3D, current_transform: Transform3D, target_position: Vector3) -> void:
    var forward_local_axis: Vector3 = Vector3(1, 0, 0)
    var forward_dir: Vector3 = (current_transform.basis * forward_local_axis).normalized()
    var target_dir: Vector3 = (target_position - current_transform.origin).normalized()
    var local_speed: float = clampf(speed, 0, acos(forward_dir.dot(target_dir)))
    if forward_dir.dot(target_dir) > 1e-4:
        state.angular_velocity = local_speed * forward_dir.cross(target_dir) / state.step

func _integrate_forces(state):
    var target_position = $my_target_node3d_node.global_transform.origin
    look_follow(state, global_transform, target_position)

----------------------------------------

TITLE: Player Shooting Implementation with Signals
DESCRIPTION: Player implementation that emits signals when shooting. Handles mouse input for rotation and shooting, emitting bullet instances through signals.

LANGUAGE: gdscript
CODE:
extends Sprite2D

signal shoot(bullet, direction, location)

var Bullet = preload("res://bullet.tscn")

func _input(event):
    if event is InputEventMouseButton:
        if event.button_index == MOUSE_BUTTON_LEFT and event.pressed:
            shoot.emit(Bullet, rotation, position)

func _process(delta):
    look_at(get_global_mouse_position())

LANGUAGE: csharp
CODE:
using Godot;

public partial class Player : Sprite2D
{
    [Signal]
    public delegate void ShootEventHandler(PackedScene bullet, float direction, Vector2 location);

    private PackedScene _bullet = GD.Load<PackedScene>("res://Bullet.tscn");

    public override void _Input(InputEvent @event)
    {
        if (@event is InputEventMouseButton mouseButton)
        {
            if (mouseButton.ButtonIndex == MouseButton.Left && mouseButton.Pressed)
            {
                EmitSignal(SignalName.Shoot, _bullet, Rotation, Position);
            }
        }
    }

    public override void _Process(double delta)
    {
        LookAt(GetGlobalMousePosition());
    }
}

----------------------------------------

TITLE: Basic Plugin Template
DESCRIPTION: Template for creating a new Godot editor plugin. Shows required structure with _enter_tree and _exit_tree methods.

LANGUAGE: gdscript
CODE:
@tool
extends EditorPlugin

func _enter_tree():
    # Initialization of the plugin goes here.
    pass

func _exit_tree():
    # Clean-up of the plugin goes here.
    pass

LANGUAGE: csharp
CODE:
#if TOOLS
using Godot;

[Tool]
public partial class CustomNode : EditorPlugin
{
    public override void _EnterTree()
    {
        // Initialization of the plugin goes here.
    }

    public override void _ExitTree()
    {
        // Clean-up of the plugin goes here.
    }
}
#endif

----------------------------------------

TITLE: Basic File Operations Example - GDScript
DESCRIPTION: Example showing how to write and read string content to/from a file using FileAccess in GDScript.

LANGUAGE: gdscript
CODE:
func save_to_file(content):
    var file = FileAccess.open("user://save_game.dat", FileAccess.WRITE)
    file.store_string(content)

func load_from_file():
    var file = FileAccess.open("user://save_game.dat", FileAccess.READ)
    var content = file.get_as_text()
    return content

----------------------------------------

TITLE: Directory Navigation Example in GDScript
DESCRIPTION: Shows how to iterate through files and directories in a given path using DirAccess

LANGUAGE: gdscript
CODE:
func dir_contents(path):
    var dir = DirAccess.open(path)
    if dir:
        dir.list_dir_begin()
        var file_name = dir.get_next()
        while file_name != "":
            if dir.current_is_dir():
                print("Found directory: " + file_name)
            else:
                print("Found file: " + file_name)
            file_name = dir.get_next()
    else:
        print("An error occurred when trying to access the path.")

----------------------------------------

TITLE: Basic C# Script Structure in Godot
DESCRIPTION: Example of a basic C# script structure showing class declaration, member variables, and core methods like _Ready and _Process.

LANGUAGE: c#
CODE:
using Godot;

public partial class YourCustomClass : Node
{
    // Member variables here, example:
    private int _a = 2;
    private string _b = "textvar";

    public override void _Ready()
    {
        // Called every time the node is added to the scene.
        // Initialization here.
        GD.Print("Hello from C# to Godot :)");
    }

    public override void _Process(double delta)
    {
        // Called every frame. Delta is time since the last frame.
        // Update game logic here.
    }
}

----------------------------------------

TITLE: Generating Random Noise in Godot
DESCRIPTION: Shows how to use FastNoiseLite in Godot to generate random noise, which is useful for procedural generation.

LANGUAGE: gdscript
CODE:
var _noise = FastNoiseLite.new()

func _ready():
    _noise.noise_type = FastNoiseLite.NoiseType.TYPE_SIMPLEX_SMOOTH
    _noise.seed = randi()
    _noise.fractal_octaves = 4
    _noise.frequency = 1.0 / 20.0

    for i in 100:
        print(_noise.get_noise_1d(i))

LANGUAGE: csharp
CODE:
private FastNoiseLite _noise = new FastNoiseLite();

public override void _Ready()
{
    _noise.NoiseType = FastNoiseLite.NoiseTypeEnum.SimplexSmooth;
    _noise.Seed = (int)GD.Randi();
    _noise.FractalOctaves = 4;
    _noise.Frequency = 1.0f / 20.0f;

    for (int i = 0; i < 100; i++)
    {
        GD.Print(_noise.GetNoise1D(i));
    }
}

----------------------------------------

TITLE: Adding Node to Group in GDScript
DESCRIPTION: Demonstrates how to add the current node to a group named 'guards' when it enters the scene tree.

LANGUAGE: GDScript
CODE:
func _ready():
    add_to_group("guards")

----------------------------------------

TITLE: Implementing EditorDebuggerPlugin in GDScript
DESCRIPTION: Example implementation of an editor debugger plugin that handles custom debug messages with the 'my_plugin' prefix. Shows how to add custom UI tabs and handle debug session events.

LANGUAGE: gdscript
CODE:
@tool
extends EditorPlugin

class ExampleEditorDebugger extends EditorDebuggerPlugin:

    func _has_capture(capture):
        # Return true if you wish to handle messages with the prefix "my_plugin:".
        return capture == "my_plugin"

    func _capture(message, data, session_id):
        if message == "my_plugin:ping":
            get_session(session_id).send_message("my_plugin:echo", data)
            return true
        return false

    func _setup_session(session_id):
        # Add a new tab in the debugger session UI containing a label.
        var label = Label.new()
        label.name = "Example plugin" # Will be used as the tab title.
        label.text = "Example plugin"
        var session = get_session(session_id)
        # Listens to the session started and stopped signals.
        session.started.connect(func (): print("Session started"))
        session.stopped.connect(func (): print("Session stopped"))
        session.add_session_tab(label)

var debugger = ExampleEditorDebugger.new()

func _enter_tree():
    add_debugger_plugin(debugger)

func _exit_tree():
    remove_debugger_plugin(debugger)

----------------------------------------

TITLE: Platformer Movement with CharacterBody2D in GDScript
DESCRIPTION: Implements basic platformer movement using CharacterBody2D and move_and_slide() in GDScript.

LANGUAGE: GDScript
CODE:
extends CharacterBody2D

var speed = 300.0
var jump_speed = -400.0

# Get the gravity from the project settings so you can sync with rigid body nodes.
var gravity = ProjectSettings.get_setting("physics/2d/default_gravity")


func _physics_process(delta):
    # Add the gravity.
    velocity.y += gravity * delta

    # Handle Jump.
    if Input.is_action_just_pressed("jump") and is_on_floor():
        velocity.y = jump_speed

    # Get the input direction.
    var direction = Input.get_axis("ui_left", "ui_right")
    velocity.x = direction * speed

    move_and_slide()

----------------------------------------

TITLE: Moving Node3D Along Navigation Path in GDScript
DESCRIPTION: This snippet demonstrates how to move a Node3D along a navigation path in GDScript. It includes functions for setting the movement target and updating the position in the physics process.

LANGUAGE: gdscript
CODE:
@onready var default_3d_map_rid: RID = get_world_3d().get_navigation_map()

var movement_speed: float = 4.0
var movement_delta: float
var path_point_margin: float = 0.5

var current_path_index: int = 0
var current_path_point: Vector3
var current_path: PackedVector3Array

func set_movement_target(target_position: Vector3):

    var start_position: Vector3 = global_transform.origin

    current_path = NavigationServer3D.map_get_path(
        default_3d_map_rid,
        start_position,
        target_position,
        true
    )

    if not current_path.is_empty():
        current_path_index = 0
        current_path_point = current_path[0]

func _physics_process(delta):

    if current_path.is_empty():
        return

    movement_delta = movement_speed * delta

    if global_transform.origin.distance_to(current_path_point) <= path_point_margin:
        current_path_index += 1
        if current_path_index >= current_path.size():
            current_path = []
            current_path_index = 0
            current_path_point = global_transform.origin
            return

    current_path_point = current_path[current_path_index]

    var new_velocity: Vector3 = global_transform.origin.direction_to(current_path_point) * movement_delta

    global_transform.origin = global_transform.origin.move_toward(global_transform.origin + new_velocity, movement_delta)

----------------------------------------

TITLE: Enemy Initialization and Animation
DESCRIPTION: Initializes the enemy by randomly selecting and playing one of three animations (walk, swim, fly) when the node becomes ready.

LANGUAGE: gdscript
CODE:
func _ready():
    var mob_types = Array($AnimatedSprite2D.sprite_frames.get_animation_names())
    $AnimatedSprite2D.animation = mob_types.pick_random()
    $AnimatedSprite2D.play()

LANGUAGE: csharp
CODE:
public override void _Ready()
{
    var animatedSprite2D = GetNode<AnimatedSprite2D>("AnimatedSprite2D");
    string[] mobTypes = animatedSprite2D.SpriteFrames.GetAnimationNames();
    animatedSprite2D.Play(mobTypes[GD.Randi() % mobTypes.Length]);
}

----------------------------------------

TITLE: Creating Custom Container in C#
DESCRIPTION: C# version of the custom container script that fits children to its rect size. It overrides the _Notification method to handle child sorting and provides a method to trigger re-sorting.

LANGUAGE: csharp
CODE:
using Godot;

public partial class CustomContainer : Container
{
    public override void _Notification(int what)
    {
        if (what == NotificationSortChildren)
        {
            // Must re-sort the children
            foreach (Control c in GetChildren())
            {
                // Fit to own size
                FitChildInRect(c, new Rect2(new Vector2(), RectSize));
            }
        }
    }

    public void SetSomeSetting()
    {
        // Some setting changed, ask for children re-sort.
        QueueSort();
    }
}

----------------------------------------

TITLE: Initializing Audio Recording Components in Godot
DESCRIPTION: Sets up the audio recording effect by getting the Record bus index and retrieving the AudioEffectRecord resource. This initialization is required before any recording can take place.

LANGUAGE: gdscript
CODE:
var effect
var recording

func _ready():
    var idx = AudioServer.get_bus_index("Record")
    effect = AudioServer.get_bus_effect(idx, 0)

LANGUAGE: csharp
CODE:
private AudioEffectRecord _effect;
private AudioStreamSample _recording;

public override void _Ready()
{
    int idx = AudioServer.GetBusIndex("Record");
    _effect = (AudioEffectRecord)AudioServer.GetBusEffect(idx, 0);
}

----------------------------------------

TITLE: Implementing a Custom Mesh Importer in GDScript
DESCRIPTION: Example of an EditorImportPlugin that imports a Mesh from .special or .spec files. It defines the importer name, visible name, recognized extensions, and implements the import logic.

LANGUAGE: gdscript
CODE:
@tool
extends EditorImportPlugin

func _get_importer_name():
    return "my.special.plugin"

func _get_visible_name():
    return "Special Mesh"

func _get_recognized_extensions():
    return ["special", "spec"]

func _get_save_extension():
    return "mesh"

func _get_resource_type():
    return "Mesh"

func _get_preset_count():
    return 1

func _get_preset_name(preset_index):
    return "Default"

func _get_import_options(path, preset_index):
    return [{"name": "my_option", "default_value": false}]

func _import(source_file, save_path, options, platform_variants, gen_files):
    var file = FileAccess.open(source_file, FileAccess.READ)
    if file == null:
        return FAILED
    var mesh = ArrayMesh.new()
    # Fill the Mesh with data read in "file", left as an exercise to the reader.

    var filename = save_path + "." + _get_save_extension()
    return ResourceSaver.save(mesh, filename)

----------------------------------------

TITLE: Using await with signals in C# for Godot
DESCRIPTION: Shows how to use the await keyword with signals in C#, similar to GDScript's await keyword.

LANGUAGE: csharp
CODE:
public async Task SomeFunction()
{
    await ToSignal(timer, Timer.SignalName.Timeout);
    GD.Print("After timeout");
}

----------------------------------------

TITLE: Loading Resources in C#
DESCRIPTION: Shows how to load a resource using GD.Load<T>() in C#. This method loads the resource when the line is executed.

LANGUAGE: C#
CODE:
public override void _Ready()
{
    // Godot loads the Resource when it executes this line.
    var texture = GD.Load<Texture>("res://Robi.png");
    var sprite = GetNode<Sprite2D>("sprite");
    sprite.Texture = texture;
}

----------------------------------------

TITLE: Using Node Paths in Godot (GDScript)
DESCRIPTION: Illustrates how to use node paths to access nested nodes in the scene tree. This example gets a reference to an AnimationPlayer node that is a child of a ShieldBar node.

LANGUAGE: gdscript
CODE:
var animation_player

func _ready():
    animation_player = get_node("ShieldBar/AnimationPlayer")

----------------------------------------

TITLE: Controlling Animation Speed in Player Script
DESCRIPTION: This code snippet adjusts the animation speed of the player character based on movement. It sets the speed to 4x when moving and resets to normal speed when stationary.

LANGUAGE: GDScript
CODE:
func _physics_process(delta):
    #...
    if direction != Vector3.ZERO:
        #...
        $AnimationPlayer.speed_scale = 4
    else:
        $AnimationPlayer.speed_scale = 1

LANGUAGE: C#
CODE:
public override void _PhysicsProcess(double delta)
{
    // ...
    if (direction != Vector3.Zero)
    {
        // ...
        GetNode<AnimationPlayer>("AnimationPlayer").SpeedScale = 4;
    }
    else
    {
        GetNode<AnimationPlayer>("AnimationPlayer").SpeedScale = 1;
    }
}

----------------------------------------

TITLE: Implementing Monster Squashing in GDScript
DESCRIPTION: Adds logic to detect collisions with monsters and squash them when jumped on.

LANGUAGE: GDScript
CODE:
func _physics_process(delta):
    #...

    for index in range(get_slide_collision_count()):
        var collision = get_slide_collision(index)

        if collision.get_collider() == null:
            continue

        if collision.get_collider().is_in_group("mob"):
            var mob = collision.get_collider()
            if Vector3.UP.dot(collision.get_normal()) > 0.1:
                mob.squash()
                target_velocity.y = bounce_impulse
                break

----------------------------------------

TITLE: Implementing P2P Chat Client in GDScript
DESCRIPTION: Creates a P2P chat client using WebRTC with local signaling server implementation. Handles session description and ICE candidate exchange between peers.

LANGUAGE: GDScript
CODE:
extends Node
# An example p2p chat client.

var peer = WebRTCPeerConnection.new()

# Create negotiated data channel.
var channel = peer.create_data_channel("chat", {"negotiated": true, "id": 1})

func _ready():
    # Connect all functions.
    peer.ice_candidate_created.connect(self._on_ice_candidate)
    peer.session_description_created.connect(self._on_session)

    # Register to the local signaling server (see below for the implementation).
    Signaling.register(String(get_path()))


func _on_ice_candidate(mid, index, sdp):
    # Send the ICE candidate to the other peer via signaling server.
    Signaling.send_candidate(String(get_path()), mid, index, sdp)


func _on_session(type, sdp):
    # Send the session to other peer via signaling server.
    Signaling.send_session(String(get_path()), type, sdp)
    # Set generated description as local.
    peer.set_local_description(type, sdp)


func _process(delta):
    # Always poll the connection frequently.
    peer.poll()
    if channel.get_ready_state() == WebRTCDataChannel.STATE_OPEN:
        while channel.get_available_packet_count() > 0:
            print(String(get_path()), " received: ", channel.get_packet().get_string_from_utf8())


func send_message(message):
    channel.put_packet(message.to_utf8_buffer())

----------------------------------------

TITLE: Game Control Functions - GDScript
DESCRIPTION: Implementation of game control functions for handling game over and new game states.

LANGUAGE: gdscript
CODE:
func game_over():
    $ScoreTimer.stop()
    $MobTimer.stop()

func new_game():
    score = 0
    $Player.start($StartPosition.position)
    $StartTimer.start()

----------------------------------------

TITLE: Implementing Bullet Movement in Godot
DESCRIPTION: Basic bullet movement implementation using Area2D. The bullet moves in a straight line based on its velocity vector.

LANGUAGE: gdscript
CODE:
extends Area2D

var velocity = Vector2.RIGHT

func _physics_process(delta):
    position += velocity * delta

LANGUAGE: csharp
CODE:
using Godot;

public partial class Bullet : Area2D
{
    public Vector2 Velocity { get; set; } = Vector2.Right;

    public override void _PhysicsProcess(double delta)
    {
        Position += Velocity * (float)delta;
    }
}

----------------------------------------

TITLE: Demonstrating Proper Use of var in C#
DESCRIPTION: Illustrates when to use implicitly typed local variables (var) in C# code, emphasizing clarity and type inference.

LANGUAGE: C#
CODE:
// You can use `var` for these cases:

var direction = new Vector2(1, 0);

var value = (int)speed;

var text = "Some value";

for (var i = 0; i < 10; i++)
{
}

// But not for these:

var value = GetValue();

var velocity = direction * 1.5;

// It's generally a better idea to use explicit typing for numeric values, especially with
// the existence of the `real_t` alias in Godot, which can either be double or float
// depending on the build configuration.

var value = 1.5;

----------------------------------------

TITLE: Implementing Signal Delegates in C# for Godot
DESCRIPTION: Demonstrates correct and incorrect implementations of signal delegates in Godot. Invalid example shows a delegate without the required 'EventHandler' suffix, while the valid example shows proper naming convention with the 'EventHandler' suffix.

LANGUAGE: csharp
CODE:
// This delegate is invalid since the name doesn't end with 'EventHandler'.
[Signal]
public void InvalidSignal();

// This delegate is valid since the name ends with 'EventHandler'.
[Signal]
public void ValidSignalEventHandler();

----------------------------------------

TITLE: Initializing Basic WebRTC Peer Connection in GDScript
DESCRIPTION: Creates a minimal WebRTC connection between two peers in the same application, demonstrating basic connection setup and message exchange.

LANGUAGE: GDScript
CODE:
extends Node

# Create the two peers
var p1 = WebRTCPeerConnection.new()
var p2 = WebRTCPeerConnection.new()
# And a negotiated channel for each each peer
var ch1 = p1.create_data_channel("chat", {"id": 1, "negotiated": true})
var ch2 = p2.create_data_channel("chat", {"id": 1, "negotiated": true})

func _ready():
    # Connect P1 session created to itself to set local description.
    p1.session_description_created.connect(p1.set_local_description)
    # Connect P1 session and ICE created to p2 set remote description and candidates.
    p1.session_description_created.connect(p2.set_remote_description)
    p1.ice_candidate_created.connect(p2.add_ice_candidate)

    # Same for P2
    p2.session_description_created.connect(p2.set_local_description)
    p2.session_description_created.connect(p1.set_remote_description)
    p2.ice_candidate_created.connect(p1.add_ice_candidate)

    # Let P1 create the offer
    p1.create_offer()

    # Wait a second and send message from P1.
    await get_tree().create_timer(1).timeout
    ch1.put_packet("Hi from P1".to_utf8_buffer())

    # Wait a second and send message from P2.
    await get_tree().create_timer(1).timeout
    ch2.put_packet("Hi from P2".to_utf8_buffer())

func _process(_delta):
    # Poll connections
    p1.poll()
    p2.poll()

    # Check for messages
    if ch1.get_ready_state() == ch1.STATE_OPEN and ch1.get_available_packet_count() > 0:
        print("P1 received: ", ch1.get_packet().get_string_from_utf8())
    if ch2.get_ready_state() == ch2.STATE_OPEN and ch2.get_available_packet_count() > 0:
        print("P2 received: ", ch2.get_packet().get_string_from_utf8())

----------------------------------------

TITLE: Defining and Executing a Compute Pipeline in GDScript
DESCRIPTION: This snippet demonstrates how to create a compute pipeline, bind resources, dispatch the compute shader, and submit the work to the GPU in GDScript.

LANGUAGE: gdscript
CODE:
var pipeline := rd.compute_pipeline_create(shader)
var compute_list := rd.compute_list_begin()
rd.compute_list_bind_compute_pipeline(compute_list, pipeline)
rd.compute_list_bind_uniform_set(compute_list, uniform_set, 0)
rd.compute_list_dispatch(compute_list, 5, 1, 1)
rd.compute_list_end()

rd.submit()
rd.sync()

----------------------------------------

TITLE: Defining a Basic Compute Shader in GLSL
DESCRIPTION: This snippet defines a basic compute shader that multiplies each element in a float array by 2. It specifies the compute shader version, workgroup size, and buffer layout.

LANGUAGE: glsl
CODE:
#[compute]
#version 450

layout(local_size_x = 2, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) restrict buffer MyDataBuffer {
    float data[];
}
my_data_buffer;

void main() {
    my_data_buffer.data[gl_GlobalInvocationID.x] *= 2.0;
}

----------------------------------------

TITLE: Drawing a Dynamic Line in GDScript
DESCRIPTION: Demonstrates drawing a dynamic line between a fixed point and the mouse cursor in GDScript.

LANGUAGE: GDScript
CODE:
extends Node2D

var point1 : Vector2 = Vector2(0, 0)
var width : int = 10
var color : Color = Color.GREEN

var _point2 : Vector2

func _process(_delta):
    var mouse_position = get_viewport().get_mouse_position()
    if mouse_position != _point2:
        _point2 = mouse_position
        queue_redraw()

func _draw():
    draw_line(point1, _point2, color, width)

----------------------------------------

TITLE: Updating Score Display in GDScript
DESCRIPTION: Updates the score display on the HUD.

LANGUAGE: GDScript
CODE:
func update_score(score):
    $ScoreLabel.text = str(score)

----------------------------------------

TITLE: Calculating Physics Interpolation Fraction in GDScript
DESCRIPTION: This snippet demonstrates how to calculate the physics interpolation fraction, which represents how far through the current physics tick the rendered frame occurs.

LANGUAGE: gdscript
CODE:
fraction = 0.02 / 0.10
fraction = 0.2

----------------------------------------

TITLE: Exporting Godot Project from Command Line
DESCRIPTION: Command line syntax for exporting a Godot project using the --export-release flag. The command requires an export preset name and output filename.

LANGUAGE: shell
CODE:
godot --export-release "Windows Desktop" some_name.exe

----------------------------------------

TITLE: Updating Navigation Path for Different Locomotion States in C#
DESCRIPTION: This method updates the navigation path based on the actor's current locomotion state (standing, crouching, or crawling) in C#. It uses different navigation map RIDs for each state to query the appropriate path.

LANGUAGE: csharp
CODE:
private void UpdatePath()
{
    if (_actorStanding)
    {
        _path = NavigationServer3D.MapGetPath(_standingNavigationMapRid, _startPosition, _targetPosition, true);
    }
    else if (_actorCrouching)
    {
        _path = NavigationServer3D.MapGetPath(_crouchedNavigationMapRid, _startPosition, _targetPosition, true);
    }
    else if (_actorCrawling)
    {
        _path = NavigationServer3D.MapGetPath(_crawlingNavigationMapRid, _startPosition, _targetPosition, true);
    }
}

----------------------------------------

TITLE: Point-in-Polygon Check using Planes in GDScript and C#
DESCRIPTION: Demonstrates how to use planes to check if a point is inside a convex polygon. This technique is fundamental in collision detection and can be extended to more complex shapes.

LANGUAGE: gdscript
CODE:
var inside = true
for p in planes:
    if (p.distance_to(point) > 0):
        inside = false
        break

LANGUAGE: csharp
CODE:
var inside = true;
foreach (var p in planes)
{
    if (p.DistanceTo(point) > 0)
    {
        inside = false;
        break;
    }
}

----------------------------------------

TITLE: XR Session Management
DESCRIPTION: Implements session state management, initialization, and signal handling for the XR interface.

LANGUAGE: gdscript
CODE:
func _ready():
    xr_interface = XRServer.find_interface("OpenXR")
    if xr_interface and xr_interface.is_initialized():
        print("OpenXR instantiated successfully.")
        var vp : Viewport = get_viewport()
        vp.use_xr = true
        DisplayServer.window_set_vsync_mode(DisplayServer.VSYNC_DISABLED)
        if RenderingServer.get_rendering_device():
            vp.vrs_mode = Viewport.VRS_XR
        elif int(ProjectSettings.get_setting("xr/openxr/foveation_level")) == 0:
            push_warning("OpenXR: Recommend setting Foveation level to High in Project Settings")
        xr_interface.session_begun.connect(_on_openxr_session_begun)
        xr_interface.session_visible.connect(_on_openxr_visible_state)
        xr_interface.session_focussed.connect(_on_openxr_focused_state)
        xr_interface.session_stopping.connect(_on_openxr_stopping)
        xr_interface.pose_recentered.connect(_on_openxr_pose_recentered)
    else:
        print("OpenXR not instantiated!")
        get_tree().quit()

----------------------------------------

TITLE: Creating Custom Container in GDScript
DESCRIPTION: Example of a custom container script that fits children to its rect size. It overrides the _notification method to handle child sorting and provides a method to trigger re-sorting.

LANGUAGE: gdscript
CODE:
extends Container

func _notification(what):
    if what == NOTIFICATION_SORT_CHILDREN:
        # Must re-sort the children
        for c in get_children():
            # Fit to own size
            fit_child_in_rect(c, Rect2(Vector2(), rect_size))

func set_some_setting():
    # Some setting changed, ask for children re-sort.
    queue_sort()

----------------------------------------

TITLE: Creating a Triangle Mesh with ArrayMesh in C#
DESCRIPTION: Shows how to create a simple triangle mesh using ArrayMesh in C#. It defines vertex positions, initializes an ArrayMesh, adds a surface from the vertex array, and assigns it to a MeshInstance3D.

LANGUAGE: csharp
CODE:
Vector3[] vertices =
[
    new Vector3(0, 1, 0),
    new Vector3(1, 0, 0),
    new Vector3(0, 0, 1),
];

// Initialize the ArrayMesh.
var arrMesh = new ArrayMesh();
Godot.Collections.Array arrays = [];
arrays.Resize((int)Mesh.ArrayType.Max);
arrays[(int)Mesh.ArrayType.Vertex] = vertices;

// Create the Mesh.
arrMesh.AddSurfaceFromArrays(Mesh.PrimitiveType.Triangles, arrays);
var m = new MeshInstance3D();
m.Mesh = arrMesh;

----------------------------------------

TITLE: Complete Mob Implementation in GDScript
DESCRIPTION: Full implementation of mob behavior including initialization, movement, and screen exit handling

LANGUAGE: gdscript
CODE:
extends CharacterBody3D

@export var min_speed = 10
@export var max_speed = 18

func _physics_process(_delta):
    move_and_slide()

func initialize(start_position, player_position):
    look_at_from_position(start_position, player_position, Vector3.UP)
    rotate_y(randf_range(-PI / 4, PI / 4))
    var random_speed = randi_range(min_speed, max_speed)
    velocity = Vector3.FORWARD * random_speed
    velocity = velocity.rotated(Vector3.UP, rotation.y)

func _on_visible_on_screen_notifier_3d_screen_exited():
    queue_free()

----------------------------------------

TITLE: Handling GUI Input in Custom Control with C#
DESCRIPTION: Shows how to handle GUI input events in a custom control using the _GuiInput() method in C#.

LANGUAGE: csharp
CODE:
public override void _GuiInput(InputEvent @event)
{
    if (@event is InputEventMouseButton mbe && mbe.ButtonIndex == MouseButton.Left && mbe.Pressed)
    {
        GD.Print("Left mouse button was pressed!");
    }
}

----------------------------------------

TITLE: Implementing Cubic Bezier Curves in Godot
DESCRIPTION: Complete implementation of cubic Bezier curve calculation using four control points. Performs multiple linear interpolations to generate a smooth curve.

LANGUAGE: gdscript
CODE:
func _cubic_bezier(p0: Vector2, p1: Vector2, p2: Vector2, p3: Vector2, t: float):
    var q0 = p0.lerp(p1, t)
    var q1 = p1.lerp(p2, t)
    var q2 = p2.lerp(p3, t)

    var r0 = q0.lerp(q1, t)
    var r1 = q1.lerp(q2, t)

    var s = r0.lerp(r1, t)
    return s

LANGUAGE: csharp
CODE:
private Vector2 CubicBezier(Vector2 p0, Vector2 p1, Vector2 p2, Vector2 p3, float t)
{
    Vector2 q0 = p0.Lerp(p1, t);
    Vector2 q1 = p1.Lerp(p2, t);
    Vector2 q2 = p2.Lerp(p3, t);

    Vector2 r0 = q0.Lerp(q1, t);
    Vector2 r1 = q1.Lerp(q2, t);

    Vector2 s = r0.Lerp(r1, t);
    return s;
}

----------------------------------------

TITLE: Defining Jump and Bounce Properties in GDScript
DESCRIPTION: Defines export variables for jump impulse and bounce impulse in the Player script.

LANGUAGE: GDScript
CODE:
@export var jump_impulse = 20
@export var bounce_impulse = 16

----------------------------------------

TITLE: Constant Speed Curve Traversal in Godot
DESCRIPTION: Implementation of constant speed movement along a baked Bezier curve path. Uses curve sampling to ensure uniform movement speed.

LANGUAGE: gdscript
CODE:
var t = 0.0

func _process(delta):
    t += delta
    position = curve.sample_baked(t * curve.get_baked_length(), true)

LANGUAGE: csharp
CODE:
private float _t = 0.0f;

public override void _Process(double delta)
{
    _t += (float)delta;
    Position = curve.SampleBaked(_t * curve.GetBakedLength(), true);
}

----------------------------------------

TITLE: Navigation Mesh Baking with NavigationServer3D
DESCRIPTION: Script demonstrating how to parse source geometry and bake a 3D navigation mesh using NavigationServer3D

LANGUAGE: gdscript
CODE:
extends Node3D

var navigation_mesh: NavigationMesh
var source_geometry : NavigationMeshSourceGeometryData3D
var callback_parsing : Callable
var callback_baking : Callable
var region_rid: RID

func _ready() -> void:
    navigation_mesh = NavigationMesh.new()
    navigation_mesh.agent_radius = 0.5
    source_geometry = NavigationMeshSourceGeometryData3D.new()
    callback_parsing = on_parsing_done
    callback_baking = on_baking_done
    region_rid = NavigationServer3D.region_create()

    NavigationServer3D.region_set_enabled(region_rid, true)
    NavigationServer3D.region_set_map(region_rid, get_world_3d().get_navigation_map())

    parse_source_geometry.call_deferred()

func parse_source_geometry() -> void:
    source_geometry.clear()
    var root_node: Node3D = self

    NavigationServer3D.parse_source_geometry_data(
        navigation_mesh,
        source_geometry,
        root_node,
        callback_parsing
    )

func on_parsing_done() -> void:
    NavigationServer3D.bake_from_source_geometry_data_async(
        navigation_mesh,
        source_geometry,
        callback_baking
    )

func on_baking_done() -> void:
    NavigationServer3D.region_set_navigation_mesh(region_rid, navigation_mesh)

----------------------------------------

TITLE: Encrypting and Decrypting Data with AES in GDScript
DESCRIPTION: Demonstrates how to use AESContext for encrypting and decrypting data in both ECB and CBC modes using GDScript. It includes key and IV generation, encryption, decryption, and result verification.

LANGUAGE: gdscript
CODE:
extends Node

var aes = AESContext.new()

func _ready():
    var key = "My secret key!!!" # Key must be either 16 or 32 bytes.
    var data = "My secret text!!" # Data size must be multiple of 16 bytes, apply padding if needed.
    # Encrypt ECB
    aes.start(AESContext.MODE_ECB_ENCRYPT, key.to_utf8_buffer())
    var encrypted = aes.update(data.to_utf8_buffer())
    aes.finish()
    # Decrypt ECB
    aes.start(AESContext.MODE_ECB_DECRYPT, key.to_utf8_buffer())
    var decrypted = aes.update(encrypted)
    aes.finish()
    # Check ECB
    assert(decrypted == data.to_utf8_buffer())

    var iv = "My secret iv!!!!" # IV must be of exactly 16 bytes.
    # Encrypt CBC
    aes.start(AESContext.MODE_CBC_ENCRYPT, key.to_utf8_buffer(), iv.to_utf8_buffer())
    encrypted = aes.update(data.to_utf8_buffer())
    aes.finish()
    # Decrypt CBC
    aes.start(AESContext.MODE_CBC_DECRYPT, key.to_utf8_buffer(), iv.to_utf8_buffer())
    decrypted = aes.update(encrypted)
    aes.finish()
    # Check CBC
    assert(decrypted == data.to_utf8_buffer())

----------------------------------------

TITLE: Parsing and Executing Expressions in GDScript
DESCRIPTION: This snippet demonstrates how to create an Expression object, parse a user-input expression, execute it, and display the result. It includes error handling for parsing and execution failures.

LANGUAGE: gdscript
CODE:
var expression = Expression.new()

func _ready():
    $LineEdit.text_submitted.connect(self._on_text_submitted)

func _on_text_submitted(command):
    var error = expression.parse(command)
    if error != OK:
        print(expression.get_error_text())
        return
    var result = expression.execute()
    if not expression.has_execute_failed():
        $LineEdit.text = str(result)

----------------------------------------

TITLE: Vertex Attribute Setting in SurfaceTool
DESCRIPTION: Demonstrates how vertex attributes are added and captured when creating vertices. Shows the order of operations for setting normals, colors and adding vertices.

LANGUAGE: gdscript
CODE:
st.set_normal() # Overwritten by normal below.
st.set_normal() # Added to next vertex.
st.set_color() # Added to next vertex.
st.add_vertex() # Captures normal and color above.
st.set_normal() # Normal never added to a vertex.

LANGUAGE: csharp
CODE:
st.SetNormal(); // Overwritten by normal below.
st.SetNormal(); // Added to next vertex.
st.SetColor(); // Added to next vertex.
st.AddVertex(); // Captures normal and color above.
st.SetNormal(); // Normal never added to a vertex.

----------------------------------------

TITLE: Implementing Player Death in C#
DESCRIPTION: This code snippet demonstrates how to implement player death functionality in C#. It includes defining a signal, creating a Die method, and handling the collision detection.

LANGUAGE: csharp
CODE:
// Don't forget to rebuild the project so the editor knows about the new signal.

// Emitted when the player was hit by a mob.
[Signal]
public delegate void HitEventHandler();

// ...

private void Die()
{
    EmitSignal(SignalName.Hit);
    QueueFree();
}

// We also specified this function name in PascalCase in the editor's connection window.
private void OnMobDetectorBodyEntered(Node3D body)
{
    Die();
}

----------------------------------------

TITLE: Sending Data to Server in Godot (GDScript)
DESCRIPTION: Demonstrates how to send data to a server using an HTTP POST request with JSON content in GDScript.

LANGUAGE: GDScript
CODE:
var json = JSON.stringify(data_to_send)
var headers = ["Content-Type: application/json"]
$HTTPRequest.request(url, headers, HTTPClient.METHOD_POST, json)

----------------------------------------

TITLE: Main Scene Base Setup - C#
DESCRIPTION: Initial setup of the Main scene script in C# with mob scene export property and score tracking.

LANGUAGE: csharp
CODE:
using Godot;

public partial class Main : Node
{
    [Export]
    public PackedScene MobScene { get; set; }

    private int _score;
}

----------------------------------------

TITLE: Creating and Parsing InputEventAction in GDScript
DESCRIPTION: This snippet demonstrates how to create an InputEventAction for the 'ui_left' action and parse it using the Input singleton in GDScript.

LANGUAGE: gdscript
CODE:
var ev = InputEventAction.new()
# Set as ui_left, pressed.
ev.action = "ui_left"
ev.pressed = true
# Feedback.
Input.parse_input_event(ev)

----------------------------------------

TITLE: Identifying Persistent Objects in Godot
DESCRIPTION: This snippet demonstrates how to get all nodes in the 'Persist' group, which are objects to be saved in the game.

LANGUAGE: GDScript
CODE:
var save_nodes = get_tree().get_nodes_in_group("Persist")
for node in save_nodes:
    # Now, we can call our save function on each node.

LANGUAGE: C#
CODE:
var saveNodes = GetTree().GetNodesInGroup("Persist");
foreach (Node saveNode in saveNodes)
{
    // Now, we can call our save function on each node.
}

----------------------------------------

TITLE: Loading Game Data from File in Godot
DESCRIPTION: This function loads game data from a file, parsing JSON strings and recreating game objects with their saved states.

LANGUAGE: GDScript
CODE:
func load_game():
    if not FileAccess.file_exists("user://savegame.save"):
        return # Error! We don't have a save to load.

    var save_nodes = get_tree().get_nodes_in_group("Persist")
    for i in save_nodes:
        i.queue_free()

    var save_file = FileAccess.open("user://savegame.save", FileAccess.READ)
    while save_file.get_position() < save_file.get_length():
        var json_string = save_file.get_line()
        var json = JSON.new()
        var parse_result = json.parse(json_string)
        if not parse_result == OK:
            print("JSON Parse Error: ", json.get_error_message(), " in ", json_string, " at line ", json.get_error_line())
            continue

        var node_data = json.data
        var new_object = load(node_data["filename"]).instantiate()
        get_node(node_data["parent"]).add_child(new_object)
        new_object.position = Vector2(node_data["pos_x"], node_data["pos_y"])

        for i in node_data.keys():
            if i == "filename" or i == "parent" or i == "pos_x" or i == "pos_y":
                continue
            new_object.set(i, node_data[i])

LANGUAGE: C#
CODE:
public void LoadGame()
{
    if (!FileAccess.FileExists("user://savegame.save"))
    {
        return; // Error! We don't have a save to load.
    }

    var saveNodes = GetTree().GetNodesInGroup("Persist");
    foreach (Node saveNode in saveNodes)
    {
        saveNode.QueueFree();
    }

    using var saveFile = FileAccess.Open("user://savegame.save", FileAccess.ModeFlags.Read);

    while (saveFile.GetPosition() < saveFile.GetLength())
    {
        var jsonString = saveFile.GetLine();
        var json = new Json();
        var parseResult = json.Parse(jsonString);
        if (parseResult != Error.Ok)
        {
            GD.Print($"JSON Parse Error: {json.GetErrorMessage()} in {jsonString} at line {json.GetErrorLine()}");
            continue;
        }

        var nodeData = new Godot.Collections.Dictionary<string, Variant>((Godot.Collections.Dictionary)json.Data);
        var newObjectScene = GD.Load<PackedScene>(nodeData["Filename"].ToString());
        var newObject = newObjectScene.Instantiate<Node>();
        GetNode(nodeData["Parent"].ToString()).AddChild(newObject);
        newObject.Set(Node2D.PropertyName.Position, new Vector2((float)nodeData["PosX"], (float)nodeData["PosY"]));

        foreach (var (key, value) in nodeData)
        {
            if (key == "Filename" || key == "Parent" || key == "PosX" || key == "PosY")
            {
                continue;
            }
            newObject.Set(key, value);
        }
    }
}

----------------------------------------

TITLE: Initializing HUD Signals in GDScript
DESCRIPTION: Defines a signal for notifying the Main node that the start button has been pressed.

LANGUAGE: GDScript
CODE:
extends CanvasLayer

# Notifies `Main` node that the button has been pressed
signal start_game

----------------------------------------

TITLE: Implementing Lifecycle Functions in C#
DESCRIPTION: Shows how to override _EnterTree(), _Ready(), and _ExitTree() methods in C#. These methods are called when a node enters the scene tree, is fully initialized, and is about to leave the scene tree respectively.

LANGUAGE: csharp
CODE:
// Called every time the node enters the scene tree.
public override void _EnterTree()
{
    base._EnterTree();
}

// Called when both the node and its children have entered the scene tree.
public override void _Ready()
{
    base._Ready();
}

// Called when the node is about to leave the scene tree, after all its
// children.
public override void _ExitTree()
{
    base._ExitTree();
}

----------------------------------------

TITLE: Connecting Signals in C#
DESCRIPTION: Shows how to connect signals in C# using event syntax and lambda expressions for parameter binding.

LANGUAGE: csharp
CODE:
public override void _Ready()
{
    var button = new Button();
    // C# supports passing signals as events, so we can use this idiomatic construct:
    button.ButtonDown += OnButtonDown;

    // This assumes that a `Player` class exists, which defines a `Hit` signal.
    var player = new Player();
    // We can use lambdas when we need to bind additional parameters.
    player.Hit += () => OnPlayerHit("sword", 100);
}

private void OnButtonDown()
{
    GD.Print("Button down!");
}

private void OnPlayerHit(string weaponType, int damage)
{
    GD.Print($"Hit with weapon {weaponType} for {damage} damage.");
}

----------------------------------------

TITLE: Using Noise Texture for Height Displacement in Godot Shader
DESCRIPTION: Utilizes a noise texture to generate a more natural-looking terrain by displacing vertices based on texture values.

LANGUAGE: GLSL
CODE:
uniform sampler2D noise;

void vertex() {
  float height = texture(noise, VERTEX.xz / 2.0 + 0.5).x;
  VERTEX.y += height;
}

----------------------------------------

TITLE: Converting Positions Between Transforms
DESCRIPTION: Demonstrates how to convert positions between local and global space using Transform2D objects.

LANGUAGE: GDScript
CODE:
# World space vector 100 units below the player.
print(transform * Vector2(0, 100))

# Where is (0, 100) relative to the player?
print(Vector2(0, 100) * transform)

LANGUAGE: C#
CODE:
// World space vector 100 units below the player.
GD.Print(Transform * new Vector2(0, 100));

// Where is (0, 100) relative to the player?
GD.Print(new Vector2(0, 100) * Transform);

----------------------------------------

TITLE: Handling Pluralization in Godot Translations
DESCRIPTION: This snippet shows how to use Godot's pluralization support to handle different plural forms across languages.

LANGUAGE: gdscript
CODE:
var num_apples = 5
label.text = tr_n("There is %d apple", "There are %d apples", num_apples) % num_apples

var num_jobs = 1
label.text = tr_n("%d job", "%d jobs", num_jobs, "Task Manager") % num_jobs

----------------------------------------

TITLE: Adding Custom Performance Monitors in GDScript
DESCRIPTION: Demonstrates how to add custom performance monitors with different categories using the add_custom_monitor method.

LANGUAGE: gdscript
CODE:
func _ready():
    var monitor_value = Callable(self, "get_monitor_value")

    # Adds monitor with name "MyName" to category "MyCategory".
    Performance.add_custom_monitor("MyCategory/MyMonitor", monitor_value)

    # Adds monitor with name "MyName" to category "Custom".
    # Note: "MyCategory/MyMonitor" and "MyMonitor" have same name but different IDs, so the code is valid.
    Performance.add_custom_monitor("MyMonitor", monitor_value)

    # Adds monitor with name "MyName" to category "Custom".
    # Note: "MyMonitor" and "Custom/MyMonitor" have same name and same category but different IDs, so the code is valid.
    Performance.add_custom_monitor("Custom/MyMonitor", monitor_value)

    # Adds monitor with name "MyCategoryOne/MyCategoryTwo/MyMonitor" to category "Custom".
    Performance.add_custom_monitor("MyCategoryOne/MyCategoryTwo/MyMonitor", monitor_value)

func get_monitor_value():
    return randi() % 25

----------------------------------------

TITLE: Enemy Cleanup on Screen Exit
DESCRIPTION: Handles cleanup by freeing the enemy instance when it exits the screen using the VisibleOnScreenNotifier2D signal.

LANGUAGE: gdscript
CODE:
func _on_visible_on_screen_notifier_2d_screen_exited():
    queue_free()

LANGUAGE: csharp
CODE:
private void OnVisibleOnScreenNotifier2DScreenExited()
{
    QueueFree();
}

----------------------------------------

TITLE: Demonstrating Allman Style Bracing in C#
DESCRIPTION: Shows the recommended Allman style for brace placement in control statements, as well as an example of when single-line braces are acceptable.

LANGUAGE: C#
CODE:
// Use this style:
if (x > 0)
{
    DoSomething();
}

// NOT this:
if (x > 0) {
    DoSomething();
}

// You may put the brackets in a single line in following cases:
public interface MyInterface
{
    int MyProperty { get; set; }
}

public class MyClass : ParentClass
{
    public int Value
    {
        get { return 0; }
        set
        {
            ArrayValue = new [] {value};
        }
    }
}

----------------------------------------

TITLE: Bouncing Bullet with CharacterBody2D in GDScript
DESCRIPTION: Implements a bouncing bullet using CharacterBody2D and move_and_collide() in GDScript.

LANGUAGE: GDScript
CODE:
extends CharacterBody2D

var speed = 750

func start(_position, _direction):
    rotation = _direction
    position = _position
    velocity = Vector2(speed, 0).rotated(rotation)

func _physics_process(delta):
    var collision = move_and_collide(velocity * delta)
    if collision:
        velocity = velocity.bounce(collision.get_normal())
        if collision.get_collider().has_method("hit"):
            collision.get_collider().hit()

func _on_VisibilityNotifier2D_screen_exited():
    # Deletes the bullet when it exits the screen.
    queue_free()

----------------------------------------

TITLE: Changing Scenes in Godot using File Path
DESCRIPTION: Shows how to change the current scene to a new one using a file path with the change_scene_to_file method.

LANGUAGE: gdscript
CODE:
func _my_level_was_completed():
    get_tree().change_scene_to_file("res://levels/level2.tscn")

LANGUAGE: csharp
CODE:
public void _MyLevelWasCompleted()
{
    GetTree().ChangeSceneToFile("res://levels/level2.tscn");
}

----------------------------------------

TITLE: Rotating a 2D Transform
DESCRIPTION: Shows how to apply rotation to a Transform2D object using trigonometric functions.

LANGUAGE: GDScript
CODE:
var rot = 0.5 # The rotation to apply.
var t = Transform2D()
t.x.x = cos(rot)
t.y.y = cos(rot)
t.x.y = sin(rot)
t.y.x = -sin(rot)
transform = t # Change the node's transform to what we calculated.

LANGUAGE: C#
CODE:
float rot = 0.5f; // The rotation to apply.
Transform2D t = Transform2D.Identity;
t.X.X = t.Y.Y = Mathf.Cos(rot);
t.X.Y = t.Y.X = Mathf.Sin(rot);
t.Y.X *= -1;
Transform = t; // Change the node's transform to what we calculated.

----------------------------------------

TITLE: Manually Disconnecting Signals in C#
DESCRIPTION: Demonstrates how to manually disconnect signals to prevent ObjectDisposedException. This example connects and disconnects a signal in the _EnterTree and _ExitTree methods respectively.

LANGUAGE: csharp
CODE:
[Export]
public Timer MyTimer { get; set; }

private Action _tick;

public override void _EnterTree()
{
    int x = 0;
    _tick = () =>
    {
        x++;
        GD.Print($"Tick {x} my name is {Name}");
        if (x == 3)
        {
            GD.Print("Time's up!");
            Free();
        }
    };
    MyTimer.Timeout += _tick;
}

public override void _ExitTree()
{
    MyTimer.Timeout -= _tick;
}

----------------------------------------

TITLE: Implementing NavigationLink3D in GDScript
DESCRIPTION: Creates and configures a 3D navigation link using NavigationServer3D. Sets up properties for 3D pathfinding connections with similar functionality to the 2D version.

LANGUAGE: gdscript
CODE:
extends Node3D

var link_rid: RID
var link_start_position: Vector3
var link_end_position: Vector3

func _ready() -> void:
    link_rid = NavigationServer3D.link_create()

    var link_owner_id: int = get_instance_id()
    var link_enter_cost: float = 1.0
    var link_travel_cost: float = 1.0
    var link_navigation_layers: int = 1
    var link_bidirectional: bool = true

    NavigationServer3D.link_set_owner_id(link_rid, link_owner_id)
    NavigationServer3D.link_set_enter_cost(link_rid, link_enter_cost)
    NavigationServer3D.link_set_travel_cost(link_rid, link_travel_cost)
    NavigationServer3D.link_set_navigation_layers(link_rid, link_navigation_layers)
    NavigationServer3D.link_set_bidirectional(link_rid, link_bidirectional)

    # Enable the link and set it to the default navigation map.
    NavigationServer3D.link_set_enabled(link_rid, true)
    NavigationServer3D.link_set_map(link_rid, get_world_3d().get_navigation_map())

    # Move the 2 link positions to their intended global positions.
    NavigationServer3D.link_set_start_position(link_rid, link_start_position)
    NavigationServer3D.link_set_end_position(link_rid, link_end_position)

----------------------------------------

TITLE: Implementing HTTP Client in C#
DESCRIPTION: This snippet shows how to use the HTTPClient class in C# to connect to a website, send a GET request, and process the response. It covers connection handling, request sending, and response processing, including support for both chunked and non-chunked responses.

LANGUAGE: csharp
CODE:
using Godot;

public partial class HTTPTest : SceneTree
{
    public override async void _Initialize()
    {
        Error err;
        HTTPClient http = new HTTPClient(); // Create the client.

        err = http.ConnectToHost("www.php.net", 80); // Connect to host/port.
        Debug.Assert(err == Error.Ok); // Make sure the connection is OK.

        // Wait until resolved and connected.
        while (http.GetStatus() == HTTPClient.Status.Connecting || http.GetStatus() == HTTPClient.Status.Resolving)
        {
            http.Poll();
            GD.Print("Connecting...");
            OS.DelayMsec(500);
        }

        Debug.Assert(http.GetStatus() == HTTPClient.Status.Connected); // Check if the connection was made successfully.

        // Some headers.
        string[] headers =
        [
            "User-Agent: Pirulo/1.0 (Godot)",
            "Accept: */*",
        ];

        err = http.Request(HTTPClient.Method.Get, "/ChangeLog-5.php", headers); // Request a page from the site.
        Debug.Assert(err == Error.Ok); // Make sure all is OK.

        // Keep polling for as long as the request is being processed.
        while (http.GetStatus() == HTTPClient.Status.Requesting)
        {
            http.Poll();
            GD.Print("Requesting...");
            if (OS.HasFeature("web"))
            {
                // Synchronous HTTP requests are not supported on the web,
                // so wait for the next main loop iteration.
                await ToSignal(Engine.GetMainLoop(), "idle_frame");
            }
            else
            {
                OS.DelayMsec(500);
            }
        }

        Debug.Assert(http.GetStatus() == HTTPClient.Status.Body || http.GetStatus() == HTTPClient.Status.Connected); // Make sure the request finished well.

        GD.Print("Response? ", http.HasResponse()); // The site might not have a response.

        // If there is a response...
        if (http.HasResponse())
        {
            headers = http.GetResponseHeaders(); // Get response headers.
            GD.Print("Code: ", http.GetResponseCode()); // Show response code.
            GD.Print("Headers:");
            foreach (string header in headers)
            {
                // Show headers.
                GD.Print(header);
            }

            if (http.IsResponseChunked())
            {
                // Does it use chunks?
                GD.Print("Response is Chunked!");
            }
            else
            {
                // Or just Content-Length.
                GD.Print("Response Length: ", http.GetResponseBodyLength());
            }

            // This method works for both anyways.
            List<byte> rb = new List<byte>(); // List that will hold the data.

            // While there is data left to be read...
            while (http.GetStatus() == HTTPClient.Status.Body)
            {
                http.Poll();
                byte[] chunk = http.ReadResponseBodyChunk(); // Read a chunk.
                if (chunk.Length == 0)
                {
                    // If nothing was read, wait for the buffer to fill.
                    OS.DelayMsec(500);
                }
                else
                {
                    // Append the chunk to the read buffer.
                    rb.AddRange(chunk);
                }
            }

            // Done!
            GD.Print("Bytes Downloaded: ", rb.Count);
            string text = Encoding.ASCII.GetString(rb.ToArray());
            GD.Print(text);
        }
        Quit();
    }
}

----------------------------------------

TITLE: Implementing EditorImportPlugin in GDScript
DESCRIPTION: Defines the import_plugin.gd script with methods for handling the import process.

LANGUAGE: gdscript
CODE:
# import_plugin.gd
@tool
extends EditorImportPlugin


enum Presets { DEFAULT }


func _get_importer_name():
    return "demos.sillymaterial"

func _get_visible_name():
    return "Silly Material"

func _get_recognized_extensions():
    return ["mtxt"]

func _get_save_extension():
    return "material"

func _get_resource_type():
    return "StandardMaterial3D"

func _get_preset_count():
    return Presets.size()

func _get_preset_name(preset_index):
    match preset_index:
        Presets.DEFAULT:
            return "Default"
        _:
            return "Unknown"

func _get_import_options(path, preset_index):
    match preset_index:
        Presets.DEFAULT:
            return [{
                       "name": "use_red_anyway",
                       "default_value": false
                    }]
        _:
            return []

func _get_option_visibility(path, option_name, options):
    return true

func _import(source_file, save_path, options, r_platform_variants, r_gen_files):
    var file = FileAccess.open(source_file, FileAccess.READ)
    if file == null:
        return FileAccess.get_open_error()

    var line = file.get_line()

    var channels = line.split(",")
    if channels.size() != 3:
        return ERR_PARSE_ERROR

    var color
    if options.use_red_anyway:
        color = Color8(255, 0, 0)
    else:
        color = Color8(int(channels[0]), int(channels[1]), int(channels[2]))

    var material = StandardMaterial3D.new()
    material.albedo_color = color

    return ResourceSaver.save(material, "%s.%s" % [save_path, _get_save_extension()])

----------------------------------------

TITLE: NavigationAgent2D with Node2D in C#
DESCRIPTION: Implements basic movement and avoidance for a Node2D using NavigationAgent2D in C#.

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyNode2D : Node2D
{
    [Export]
    public float MovementSpeed { get; set; } = 4.0f;
    NavigationAgent2D _navigationAgent;
    private float _movementDelta;

    public override void _Ready()
    {
        _navigationAgent = GetNode<NavigationAgent2D>("NavigationAgent2D");
        _navigationAgent.VelocityComputed += OnVelocityComputed;
    }

    private void SetMovementTarget(Vector2 movementTarget)
    {
        _navigationAgent.TargetPosition = movementTarget;
    }

    public override void _PhysicsProcess(double delta)
    {
        // Do not query when the map has never synchronized and is empty.
        if (NavigationServer2D.MapGetIterationId(_navigationAgent.GetNavigationMap()) == 0)
        {
            return;
        }

        if (_navigationAgent.IsNavigationFinished())
        {
            return;
        }

        _movementDelta = MovementSpeed * (float)delta;
        Vector2 nextPathPosition = _navigationAgent.GetNextPathPosition();
        Vector2 newVelocity = GlobalPosition.DirectionTo(nextPathPosition) * _movementDelta;
        if (_navigationAgent.AvoidanceEnabled)
        {
            _navigationAgent.Velocity = newVelocity;
        }
        else
        {
            OnVelocityComputed(newVelocity);
        }
    }

    private void OnVelocityComputed(Vector2 safeVelocity)
    {
        GlobalPosition = GlobalPosition.MoveToward(GlobalPosition + safeVelocity, _movementDelta);
    }
}

----------------------------------------

TITLE: Defining Jump and Bounce Properties in C#
DESCRIPTION: Defines export variables for jump impulse and bounce impulse in the Player script using C#.

LANGUAGE: C#
CODE:
[Export]
public int JumpImpulse { get; set; } = 20;

[Export]
public int BounceImpulse { get; set; } = 16;

----------------------------------------

TITLE: Accessing Root Viewport in Godot
DESCRIPTION: Demonstrates two methods to access the root viewport node in Godot, either through the scene tree or via absolute path.

LANGUAGE: gdscript
CODE:
get_tree().root # Access via scene main loop.
get_node("/root") # Access via absolute path.

LANGUAGE: csharp
CODE:
GetTree().Root // Access via scene main loop.
GetNode("/root"); // Access via absolute path.

----------------------------------------

TITLE: Changing Agent Avoidance State for Different Locomotion in GDScript
DESCRIPTION: This function changes the avoidance agent's navigation map based on the actor's current locomotion state. It ensures that the agent uses the appropriate avoidance behavior for each locomotion mode.

LANGUAGE: gdscript
CODE:
func change_agent_avoidance_state():

    if actor_standing:
        NavigationServer3D.agent_set_map(avoidance_agent_rid, standing_navigation_map_rid)
    elif actor_crouching:
        NavigationServer3D.agent_set_map(avoidance_agent_rid, crouched_navigation_map_rid)
    elif actor_crawling:
        NavigationServer3D.agent_set_map(avoidance_agent_rid, crawling_navigation_map_rid)

----------------------------------------

TITLE: Inline GDScript Member Documentation
DESCRIPTION: Demonstrates inline documentation for various script members like signals, enums, constants, variables, and functions.

LANGUAGE: gdscript
CODE:
signal my_signal ## My signal.

enum MyEnum { ## My enum.
    VALUE_A = 0, ## Value A.
    VALUE_B = 1, ## Value B.
}

const MY_CONST = 1 ## My constant.

var my_var ## My variable.

func my_func(): ## My func.
    pass

class MyClass: ## My class.
    pass

----------------------------------------

TITLE: Complete Movement Script
DESCRIPTION: Full implementation of sprite movement and rotation including speed variables and process function.

LANGUAGE: GDScript
CODE:
extends Sprite2D

var speed = 400
var angular_speed = PI

func _process(delta):
    rotation += angular_speed * delta
    var velocity = Vector2.UP.rotated(rotation) * speed
    position += velocity * delta

LANGUAGE: C#
CODE:
using Godot;
using System;

public partial class MySprite2D : Sprite2D
{
    private int _speed = 400;
    private float _angularSpeed = Mathf.Pi;

    public override void _Process(double delta)
    {
        Rotation += _angularSpeed * (float)delta;
        var velocity = Vector2.Up.Rotated(Rotation) * _speed;
        Position += velocity * (float)delta;
    }
}

----------------------------------------

TITLE: Loading Audio and Video Files in Godot
DESCRIPTION: Demonstrates loading Ogg Vorbis audio and Ogg Theora video files in AudioStreamPlayer and VideoStreamPlayer nodes respectively.

LANGUAGE: gdscript
CODE:
$AudioStreamPlayer.stream = AudioStreamOggVorbis.load_from_file(path)

var video_stream_theora = VideoStreamTheora.new()
video_stream_theora.file = "/path/to/file.ogv"
$VideoStreamPlayer.stream = video_stream_theora
$VideoStreamPlayer.play()

LANGUAGE: csharp
CODE:
GetNode<AudioStreamPlayer>("AudioStreamPlayer").Stream = AudioStreamOggVorbis.LoadFromFile(path);

var videoStreamTheora = new VideoStreamTheora();
videoStreamTheora.File = "/Path/To/File.ogv";
GetNode<VideoStreamPlayer>("VideoStreamPlayer").Stream = videoStreamTheora;
GetNode<VideoStreamPlayer>("VideoStreamPlayer").Play();

----------------------------------------

TITLE: Accessing Default NavigationMap in 2D C#
DESCRIPTION: Shows how to get the default NavigationMap RID for a 2D world in C#. This is useful for setting up navigation in 2D C# projects.

LANGUAGE: csharp
CODE:
public partial class MyNode2D : Node2D
{
    public override void _Ready()
    {
        Rid defaultNavigationMapRid = GetWorld2D().NavigationMap;
    }
}

----------------------------------------

TITLE: Implementing NavigationServer Setup and Path Query in GDScript
DESCRIPTION: Creates a navigation map, region, and mesh procedurally, then queries a path after synchronization. Demonstrates proper handling of NavigationServer synchronization using deferred calls and physics frame waiting.

LANGUAGE: gdscript
CODE:
extends Node3D

func _ready():
    # Use call deferred to make sure the entire scene tree nodes are setup
    # else await on 'physics_frame' in a _ready() might get stuck.
    custom_setup.call_deferred()

func custom_setup():

    # Create a new navigation map.
    var map: RID = NavigationServer3D.map_create()
    NavigationServer3D.map_set_up(map, Vector3.UP)
    NavigationServer3D.map_set_active(map, true)

    # Create a new navigation region and add it to the map.
    var region: RID = NavigationServer3D.region_create()
    NavigationServer3D.region_set_transform(region, Transform3D())
    NavigationServer3D.region_set_map(region, map)

    # Create a procedural navigation mesh for the region.
    var new_navigation_mesh: NavigationMesh = NavigationMesh.new()
    var vertices: PackedVector3Array = PackedVector3Array([
        Vector3(0, 0, 0),
        Vector3(9.0, 0, 0),
        Vector3(0, 0, 9.0)
    ])
    new_navigation_mesh.set_vertices(vertices)
    var polygon: PackedInt32Array = PackedInt32Array([0, 1, 2])
    new_navigation_mesh.add_polygon(polygon)
    NavigationServer3D.region_set_navigation_mesh(region, new_navigation_mesh)

    # Wait for NavigationServer sync to adapt to made changes.
    await get_tree().physics_frame

    # Query the path from the navigation server.
    var start_position: Vector3 = Vector3(0.1, 0.0, 0.1)
    var target_position: Vector3 = Vector3(1.0, 0.0, 1.0)
    var optimize_path: bool = true

    var path: PackedVector3Array = NavigationServer3D.map_get_path(
        map,
        start_position,
        target_position,
        optimize_path
    )

    print("Found a path!")
    print(path)

----------------------------------------

TITLE: Loading and Displaying Images in Godot
DESCRIPTION: Shows how to load an image file and display it in a TextureRect node, as well as save the image to a PNG file.

LANGUAGE: gdscript
CODE:
var image = Image.load_from_file(path)
$TextureRect.texture = ImageTexture.create_from_image(image)

image.save_png("/path/to/file.png")

$TextureRect.texture.get_image().save_png("/path/to/file.png")

LANGUAGE: csharp
CODE:
var image = Image.LoadFromFile(path);
GetNode<TextureRect>("TextureRect").Texture = ImageTexture.CreateFromImage(image);

image.SavePng("/Path/To/File.png");

GetNode<TextureRect>("TextureRect").Texture.GetImage().SavePng("/Path/To/File.png");

----------------------------------------

TITLE: Declaring Custom Signals in C#
DESCRIPTION: Illustrates how to declare custom signals in a C# script using the [Signal] attribute. Two signals are defined: one without arguments and one with a string argument.

LANGUAGE: csharp
CODE:
[Signal]
public delegate void MySignalEventHandler();

[Signal]
public delegate void MySignalWithArgumentEventHandler(string myString);

----------------------------------------

TITLE: Saving Recorded Audio to WAV File in Godot
DESCRIPTION: Implements functionality to save the recorded audio as a WAV file to a user-specified path. Updates the UI to show the save location.

LANGUAGE: gdscript
CODE:
func _on_save_button_pressed():
    var save_path = $SaveButton/Filename.text
    recording.save_to_wav(save_path)
    $Status.text = "Saved WAV file to: %s\n(%s)" % [save_path, ProjectSettings.globalize_path(save_path)]

LANGUAGE: csharp
CODE:
private void OnSaveButtonPressed()
{
    string savePath = GetNode<LineEdit>("SaveButton/Filename").Text;
    _recording.SaveToWav(savePath);
    GetNode<Label>("Status").Text = string.Format("Saved WAV file to: {0}\n({1})", savePath, ProjectSettings.GlobalizePath(savePath));
}

----------------------------------------

TITLE: Implementing Jumping Logic in GDScript
DESCRIPTION: Adds jumping functionality to the player character in the _physics_process function.

LANGUAGE: GDScript
CODE:
func _physics_process(delta):
    #...

    # Jumping.
    if is_on_floor() and Input.is_action_just_pressed("jump"):
        target_velocity.y = jump_impulse

    #...

----------------------------------------

TITLE: Creating a Time Counter Label in GDScript
DESCRIPTION: Demonstrates how to create a Label node that displays a continuously incrementing time counter using the _process method in GDScript.

LANGUAGE: GDScript
CODE:
extends Label

var time = 0

func _process(delta):
    time += delta
    text = str(time) # 'text' is a built-in Label property.

----------------------------------------

TITLE: Basic Vertex Displacement in Godot Shader
DESCRIPTION: Implements a simple vertex displacement using cosine and sine functions to create a wave-like terrain effect.

LANGUAGE: GLSL
CODE:
void vertex() {
  VERTEX.y += cos(VERTEX.x * 4.0) * sin(VERTEX.z * 4.0);
}

----------------------------------------

TITLE: Implementing Custom Mouse Cursor in GDScript
DESCRIPTION: A GDScript implementation for changing mouse cursor appearance. It demonstrates loading custom cursor images and setting different cursor shapes using Input.set_custom_mouse_cursor(). The script shows how to set both default arrow cursor and specific cursor types like I-beam.

LANGUAGE: gdscript
CODE:
extends Node

# Load the custom images for the mouse cursor.
var arrow = load("res://arrow.png")
var beam = load("res://beam.png")

func _ready():
    # Changes only the arrow shape of the cursor.
    # This is similar to changing it in the project settings.
    Input.set_custom_mouse_cursor(arrow)

    # Changes a specific shape of the cursor (here, the I-beam shape).
    Input.set_custom_mouse_cursor(beam, Input.CURSOR_IBEAM)

----------------------------------------

TITLE: Moving an Object Relative to Itself
DESCRIPTION: Shows how to move an object relative to its own orientation using its Transform2D.

LANGUAGE: GDScript
CODE:
transform.origin += transform.x * 100

LANGUAGE: C#
CODE:
Transform2D t = Transform;
t.Origin += t.X * 100;
Transform = t;

----------------------------------------

TITLE: Grouping Exported Properties in GDScript
DESCRIPTION: Shows how to group exported properties in the inspector using @export_group and @export_subgroup annotations. This helps organize properties for better readability in the editor.

LANGUAGE: GDScript
CODE:
@export_group("My Properties")
@export var number = 3

@export_subgroup("Extra Properties")
@export var string = ""
@export var flag = false

----------------------------------------

TITLE: Window Focus Handler Implementation in Godot
DESCRIPTION: Autoload script to handle input focus for controller inputs, ensuring inputs are only processed when the window is focused.

LANGUAGE: gdscript
CODE:
extends Node

var focused := true

func _notification(what: int) -> void:
    match what:
        NOTIFICATION_APPLICATION_FOCUS_OUT:
            focused = false
        NOTIFICATION_APPLICATION_FOCUS_IN:
            focused = true


func input_is_action_pressed(action: StringName) -> bool:
    if focused:
        return Input.is_action_pressed(action)

    return false


func event_is_action_pressed(event: InputEvent, action: StringName) -> bool:
    if focused:
        return event.is_action_pressed(action)

    return false

----------------------------------------

TITLE: Overriding Theme Properties in C#
DESCRIPTION: Shows how to override theme properties for a Control node in C#, such as color and stylebox, and how to reset them.

LANGUAGE: csharp
CODE:
// Given the child Label node "MyLabel", override its font color with a custom value.
GetNode<Label>("MyLabel").AddThemeColorOverride("font_color", new Color(1, 0.5f, 0));
// Reset the font color of the child label.
GetNode<Label>("MyLabel").RemoveThemeColorOverride("font_color");
// Alternatively it can be overridden with the default value from the Label type.
GetNode<Label>("MyLabel").AddThemeColorOverride("font_color", GetThemeColor("font_color", "Label"));

// The snippet below assumes the child node "MyButton" has a StyleBoxFlat assigned.
// Resources are shared across instances, so we need to duplicate it
// to avoid modifying the appearance of all other buttons.
StyleBoxFlat newStyleboxNormal = GetNode<Button>("MyButton").GetThemeStylebox("normal").Duplicate() as StyleBoxFlat;
newStyleboxNormal.BorderWidthTop = 3;
newStyleboxNormal.BorderColor = new Color(0, 1, 0.5f);
GetNode<Button>("MyButton").AddThemeStyleboxOverride("normal", newStyleboxNormal);
// Remove the stylebox override.
GetNode<Button>("MyButton").RemoveThemeStyleboxOverride("normal");

----------------------------------------

TITLE: Updating Navigation Path for Different Locomotion States in GDScript
DESCRIPTION: This function updates the navigation path based on the actor's current locomotion state (standing, crouching, or crawling). It uses different navigation map RIDs for each state to query the appropriate path.

LANGUAGE: gdscript
CODE:
func update_path():

    if actor_standing:
        path = NavigationServer3D.map_get_path(standing_navigation_map_rid, start_position, target_position, true)
    elif actor_crouching:
        path = NavigationServer3D.map_get_path(crouched_navigation_map_rid, start_position, target_position, true)
    elif actor_crawling:
        path = NavigationServer3D.map_get_path(crawling_navigation_map_rid, start_position, target_position, true)

----------------------------------------

TITLE: Node Access Methods in C#
DESCRIPTION: Shows different approaches to accessing and caching node references in C#, including dynamic lookups, caching in _Ready, property delegation, and autoloads.

LANGUAGE: C#
CODE:
using Godot;
using System;
using System.Diagnostics;

public class MyNode : Node
{
    // Slow
    public void DynamicLookupWithDynamicNodePath()
    {
        GD.Print(GetNode("Child"));
    }

    // Fastest. Lookup node and cache for future access.
    // Doesn't break if node moves later.
    private Node _child;
    public void _Ready()
    {
        _child = GetNode("Child");
    }
    public void LookupAndCacheForFutureAccess()
    {
        GD.Print(_child);
    }

    // Delegate reference assignment to an external source.
    // Con: need to perform a validation check.
    // Pro: node makes no requirements of its external structure.
    //      'prop' can come from anywhere.
    public object Prop { get; set; }
    public void CallMeAfterPropIsInitializedByParent()
    {
        // Validate prop in one of three ways.

        // Fail with no notification.
        if (prop == null)
        {
            return;
        }

        // Fail with an error message.
        if (prop == null)
        {
            GD.PrintErr("'Prop' wasn't initialized");
            return;
        }

        // Fail with an exception.
        if (prop == null)
        {
            throw new InvalidOperationException("'Prop' wasn't initialized.");
        }

        // Fail and terminate.
        // Note: Scripts run from a release export template don't run `Debug.Assert`s.
        Debug.Assert(Prop, "'Prop' wasn't initialized");
    }

    // Use an autoload.
    // Dangerous for typical nodes, but useful for true singleton nodes
    // that manage their own data and don't interfere with other objects.
    public void ReferenceAGlobalAutoloadedVariable()
    {
        MyNode globals = GetNode<MyNode>("/root/Globals");
        GD.Print(globals);
        GD.Print(globals.Prop);
        GD.Print(globals.MyGetter());
    }
};

----------------------------------------

TITLE: Detecting Collisions with CharacterBody2D in GDScript
DESCRIPTION: Demonstrates how to detect collisions using move_and_collide() and move_and_slide() methods in GDScript.

LANGUAGE: GDScript
CODE:
# Using move_and_collide.
var collision = move_and_collide(velocity * delta)
if collision:
    print("I collided with ", collision.get_collider().name)

# Using move_and_slide.
move_and_slide()
for i in get_slide_collision_count():
    var collision = get_slide_collision(i)
    print("I collided with ", collision.get_collider().name)

----------------------------------------

TITLE: Setting Collision Layer Mask in Code
DESCRIPTION: Examples of setting collision layer masks using binary, hexadecimal and decimal notation.

LANGUAGE: gdscript
CODE:
# Binary
0b00000000_00000000_00000000_00001101

# Hexadecimal
0x000d

# Decimal
pow(2, 1-1) + pow(2, 3-1) + pow(2, 4-1)

----------------------------------------

TITLE: Controlling AnimatedSprite2D Animation in GDScript
DESCRIPTION: This snippet demonstrates how to control an AnimatedSprite2D animation using GDScript. It plays the 'run' animation when the right arrow key is pressed and stops it when released.

LANGUAGE: GDScript
CODE:
extends CharacterBody2D

@onready var _animated_sprite = $AnimatedSprite2D

func _process(_delta):
    if Input.is_action_pressed("ui_right"):
        _animated_sprite.play("run")
    else:
        _animated_sprite.stop()

----------------------------------------

TITLE: Controlling AnimatedSprite2D Animation in GDScript
DESCRIPTION: This snippet demonstrates how to control an AnimatedSprite2D animation using GDScript. It plays the 'run' animation when the right arrow key is pressed and stops it when released.

LANGUAGE: GDScript
CODE:
extends CharacterBody2D

@onready var _animated_sprite = $AnimatedSprite2D

func _process(_delta):
    if Input.is_action_pressed("ui_right"):
        _animated_sprite.play("run")
    else:
        _animated_sprite.stop()

----------------------------------------

TITLE: Implementing Custom Performance Monitor in GDScript
DESCRIPTION: This snippet demonstrates how to create a custom performance monitor to track the number of enemies in a Godot project. It uses Performance.add_custom_monitor() to register the monitor and implements a function to count enemies.

LANGUAGE: GDScript
CODE:
extends Timer


func _ready():
    # The slash delimiter is used to determine the category of the monitor.
    # If there is no slash in the monitor name, a generic "Custom" category
    # will be used instead.
    Performance.add_custom_monitor("game/enemies", get_enemy_count)
    timeout.connect(_on_timeout)
    # Spawn 20 enemies per second.
    wait_time = 0.05
    start()


func _on_timeout():
    var enemy = preload("res://enemy.tscn").instantiate()
    get_parent().add_child(enemy)


# This function is called every time the performance monitor is queried
# (this occurs once per second in the editor, more if called manually).
# The function must return a number greater than or equal to 0 (int or float).
func get_enemy_count():
    return get_tree().get_nodes_in_group("enemies").size()

----------------------------------------

TITLE: Smooth Motion Following in GDScript and C#
DESCRIPTION: Implements smooth motion following using interpolation. The example shows how to make an object smoothly follow the mouse cursor position.

LANGUAGE: gdscript
CODE:
const FOLLOW_SPEED = 4.0

func _physics_process(delta):
    var mouse_pos = get_local_mouse_position()
    $Sprite2D.position = $Sprite2D.position.lerp(mouse_pos, delta * FOLLOW_SPEED)

LANGUAGE: csharp
CODE:
private const float FollowSpeed = 4.0f;

public override void _PhysicsProcess(double delta)
{
    Vector2 mousePos = GetLocalMousePosition();
    Sprite2D sprite = GetNode<Sprite2D>("Sprite2D");
    sprite.Position = sprite.Position.Lerp(mousePos, (float)delta * FollowSpeed);
}

----------------------------------------

TITLE: Implementing Remote Procedure Calls in GDScript
DESCRIPTION: Shows how to define and use remote procedure calls (RPCs) in GDScript, including different RPC modes and transfer options.

LANGUAGE: gdscript
CODE:
func _ready():
    if multiplayer.is_server():
        print_once_per_client.rpc()

@rpc
func print_once_per_client():
    print("I will be printed to the console once per each connected client.")

----------------------------------------

TITLE: Initializing Main Screen Plugin Base
DESCRIPTION: Base plugin script that defines the required methods for creating a main screen plugin in Godot. Includes methods for lifecycle management and plugin configuration.

LANGUAGE: gdscript
CODE:
@tool
extends EditorPlugin

func _enter_tree():
    pass

func _exit_tree():
    pass

func _has_main_screen():
    return true

func _make_visible(visible):
    pass

func _get_plugin_name():
    return "Main Screen Plugin"

func _get_plugin_icon():
    return EditorInterface.get_editor_theme().get_icon("Node", "EditorIcons")

LANGUAGE: csharp
CODE:
#if TOOLS
using Godot;

[Tool]
public partial class MainScreenPlugin : EditorPlugin
{
    public override void _EnterTree()
    {

    }

    public override void _ExitTree()
    {

    }

    public override bool _HasMainScreen()
    {
        return true;
    }

    public override void _MakeVisible(bool visible)
    {

    }

    public override string _GetPluginName()
    {
        return "Main Screen Plugin";
    }

    public override Texture2D _GetPluginIcon()
    {
        return EditorInterface.Singleton.GetEditorTheme().GetIcon("Node", "EditorIcons");
    }
}
#endif

----------------------------------------

TITLE: Defining Table of Contents for Physics Documentation in reStructuredText
DESCRIPTION: This snippet defines a table of contents for the Physics section of the Godot Engine documentation using reStructuredText syntax. It includes various topics related to physics implementation in Godot.

LANGUAGE: reStructuredText
CODE:
.. toctree::
   :maxdepth: 1
   :name: toc-learn-features-physics

   physics_introduction
   using_jolt_physics
   rigid_body
   using_area_2d
   using_character_body_2d
   ray-casting
   ragdoll_system
   kinematic_character_2d
   soft_body
   collision_shapes_2d
   collision_shapes_3d
   large_world_coordinates
   interpolation/index
   troubleshooting_physics_issues

----------------------------------------

TITLE: Main Scene Base Setup - GDScript
DESCRIPTION: Initial setup of the Main scene script with mob scene export variable and score tracking.

LANGUAGE: gdscript
CODE:
extends Node

@export var mob_scene: PackedScene
var score

----------------------------------------

TITLE: Setting Pause State in Godot
DESCRIPTION: Basic code to pause/unpause the game by setting the SceneTree's pause property.

LANGUAGE: gdscript
CODE:
get_tree().paused = true

LANGUAGE: csharp
CODE:
GetTree().Paused = true;

----------------------------------------

TITLE: Complete Player Movement Script
DESCRIPTION: Full implementation of player movement including rotation and forward movement controls. Extends Sprite2D and uses the _process function to handle input each frame.

LANGUAGE: gdscript
CODE:
extends Sprite2D

var speed = 400
var angular_speed = PI

func _process(delta):
    var direction = 0
    if Input.is_action_pressed("ui_left"):
        direction = -1
    if Input.is_action_pressed("ui_right"):
        direction = 1

    rotation += angular_speed * direction * delta

    var velocity = Vector2.ZERO
    if Input.is_action_pressed("ui_up"):
        velocity = Vector2.UP.rotated(rotation) * speed

    position += velocity * delta

LANGUAGE: csharp
CODE:
using Godot;

public partial class MySprite2D : Sprite2D
{
    private float _speed = 400;
    private float _angularSpeed = Mathf.Pi;

    public override void _Process(double delta)
    {
        var direction = 0;
        if (Input.IsActionPressed("ui_left"))
        {
            direction = -1;
        }
        if (Input.IsActionPressed("ui_right"))
        {
            direction = 1;
        }

        Rotation += _angularSpeed * direction * (float)delta;

        var velocity = Vector2.Zero;
        if (Input.IsActionPressed("ui_up"))
        {
            velocity = Vector2.Up.Rotated(Rotation) * _speed;
        }

        Position += velocity * (float)delta;
    }

----------------------------------------

TITLE: Awaiting a SceneTree Signal in C#
DESCRIPTION: Shows how to await a signal using the SignalName nested class. This example waits for the SceneTree's ProcessFrame signal before continuing execution.

LANGUAGE: csharp
CODE:
await ToSignal(GetTree(), SceneTree.SignalName.ProcessFrame);

----------------------------------------

TITLE: Exporting Colors and Nodes in GDScript
DESCRIPTION: Demonstrates how to export color variables and node references. This allows for easy color selection and node assignment in the editor.

LANGUAGE: GDScript
CODE:
@export var col: Color
@export_color_no_alpha var col_no_alpha: Color
@export var node: Node
@export var some_button: BaseButton

----------------------------------------

TITLE: Dynamic Function Arguments in GDScript
DESCRIPTION: Shows how function arguments can accept different types in GDScript compared to statically typed languages.

LANGUAGE: gdscript
CODE:
func print_value(value):
    print(value)

[..]

print_value(55) # Valid.
print_value("Hello") # Valid.

----------------------------------------

TITLE: Implementing Physics Processing in C#
DESCRIPTION: Shows the implementation of the _PhysicsProcess method for physics processing in C#. This method is called at fixed intervals and receives a delta time parameter.

LANGUAGE: C#
CODE:
public override void _PhysicsProcess(double delta)
{
    // Do something...
}

----------------------------------------

TITLE: Instantiating GDScript Nodes from C# in Godot
DESCRIPTION: Shows how to load and instantiate a GDScript from C# in Godot. Mentions type conversion for proper object handling.

LANGUAGE: csharp
CODE:
var myGDScript = GD.Load<GDScript>("res://path/to/my_gd_script.gd");
var myGDScriptNode = (GodotObject)myGDScript.New(); // This is a GodotObject.

----------------------------------------

TITLE: Complete Mesh Deformation Example
DESCRIPTION: Full example showing mesh deformation with noise, normal calculation, and vertex coloring.

LANGUAGE: gdscript
CODE:
extends MeshInstance3D

var fnl = FastNoiseLite.new()
var mdt = MeshDataTool.new()

func _ready():
    fnl.frequency = 0.7

    mdt.create_from_surface(mesh, 0)

    for i in range(mdt.get_vertex_count()):
        var vertex = mdt.get_vertex(i).normalized()
        # Push out vertex by noise.
        vertex = vertex * (fnl.get_noise_3dv(vertex) * 0.5 + 0.75)
        mdt.set_vertex(i, vertex)

    # Calculate vertex normals, face-by-face.
    for i in range(mdt.get_face_count()):
        # Get the index in the vertex array.
        var a = mdt.get_face_vertex(i, 0)
        var b = mdt.get_face_vertex(i, 1)
        var c = mdt.get_face_vertex(i, 2)
        # Get vertex position using vertex index.
        var ap = mdt.get_vertex(a)
        var bp = mdt.get_vertex(b)
        var cp = mdt.get_vertex(c)
        # Calculate face normal.
        var n = (bp - cp).cross(ap - bp).normalized()
        # Add face normal to current vertex normal.
        # This will not result in perfect normals, but it will be close.
        mdt.set_vertex_normal(a, n + mdt.get_vertex_normal(a))
        mdt.set_vertex_normal(b, n + mdt.get_vertex_normal(b))
        mdt.set_vertex_normal(c, n + mdt.get_vertex_normal(c))

    # Run through vertices one last time to normalize normals and
    # set color to normal.
    for i in range(mdt.get_vertex_count()):
        var v = mdt.get_vertex_normal(i).normalized()
        mdt.set_vertex_normal(i, v)
        mdt.set_vertex_color(i, Color(v.x, v.y, v.z))

    mesh.clear_surfaces()
    mdt.commit_to_surface(mesh)

----------------------------------------

TITLE: 3D Camera Raycast with Mouse Input
DESCRIPTION: Shows how to cast a ray from screen coordinates into 3D space using a Camera3D node and mouse input.

LANGUAGE: gdscript
CODE:
const RAY_LENGTH = 1000.0

func _input(event):
    if event is InputEventMouseButton and event.pressed and event.button_index == 1:
          var camera3d = $Camera3D
          var from = camera3d.project_ray_origin(event.position)
          var to = from + camera3d.project_ray_normal(event.position) * RAY_LENGTH

LANGUAGE: csharp
CODE:
private const float RayLength = 1000.0f;

public override void _Input(InputEvent @event)
{
    if (@event is InputEventMouseButton eventMouseButton && eventMouseButton.Pressed && eventMouseButton.ButtonIndex == MouseButton.Left)
    {
        var camera3D = GetNode<Camera3D>("Camera3D");
        var from = camera3D.ProjectRayOrigin(eventMouseButton.Position);
        var to = from + camera3D.ProjectRayNormal(eventMouseButton.Position) * RayLength;
    }
}

----------------------------------------

TITLE: Implementing NavigationLink2D in GDScript
DESCRIPTION: Creates and configures a 2D navigation link using NavigationServer2D. Sets up properties like owner ID, costs, navigation layers, and positions for pathfinding connections.

LANGUAGE: gdscript
CODE:
extends Node2D

var link_rid: RID
var link_start_position: Vector2
var link_end_position: Vector2

func _ready() -> void:
    link_rid = NavigationServer2D.link_create()

    var link_owner_id: int = get_instance_id()
    var link_enter_cost: float = 1.0
    var link_travel_cost: float = 1.0
    var link_navigation_layers: int = 1
    var link_bidirectional: bool = true

    NavigationServer2D.link_set_owner_id(link_rid, link_owner_id)
    NavigationServer2D.link_set_enter_cost(link_rid, link_enter_cost)
    NavigationServer2D.link_set_travel_cost(link_rid, link_travel_cost)
    NavigationServer2D.link_set_navigation_layers(link_rid, link_navigation_layers)
    NavigationServer2D.link_set_bidirectional(link_rid, link_bidirectional)

    # Enable the link and set it to the default navigation map.
    NavigationServer2D.link_set_enabled(link_rid, true)
    NavigationServer2D.link_set_map(link_rid, get_world_2d().get_navigation_map())

    # Move the 2 link positions to their intended global positions.
    NavigationServer2D.link_set_start_position(link_rid, link_start_position)
    NavigationServer2D.link_set_end_position(link_rid, link_end_position)

----------------------------------------

TITLE: Triggering Custom Input Events in C#
DESCRIPTION: Example of programmatically triggering an input event using ParseInputEvent()

LANGUAGE: csharp
CODE:
var cancelEvent = new InputEventAction();
cancelEvent.Action = "ui_cancel";
cancelEvent.Pressed = true;
Input.ParseInputEvent(cancelEvent);

----------------------------------------

TITLE: Implementing Custom Drag and Drop in C#
DESCRIPTION: Shows how to implement custom drag and drop functionality for a Control node in C#, including creating a drag preview.

LANGUAGE: csharp
CODE:
[Export]
private Color _color = new Color(1, 0, 0, 1);

public override Variant _GetDragData(Vector2 atPosition)
{
    // Use a control that is not in the tree
    var cpb = new ColorPickerButton();
    cpb.Color = _color;
    cpb.Size = new Vector2(50, 50);
    SetDragPreview(cpb);
    return _color;
}

----------------------------------------

TITLE: Initializing Node References in Godot
DESCRIPTION: Demonstrates how to initialize node references between parent and child nodes in Godot using GDScript, C#, and C++. This approach allows for direct node access while maintaining loose coupling.

LANGUAGE: GDScript
CODE:
# Parent
$Child.target = self

# Child
print(target) # Use parent-defined node.

LANGUAGE: C#
CODE:
// Parent
GetNode("Child").Set("Target", this);

// Child
GD.Print(Target); // Use parent-defined node.

LANGUAGE: C++
CODE:
// Parent
Node *node = get_node<Node>("Child");
if (node != nullptr) {
    node->set("target", this);
}

// Child
UtilityFunctions::print(target);

----------------------------------------

TITLE: Committing Mesh with SurfaceTool
DESCRIPTION: Shows different ways to commit the generated geometry to a mesh, either by appending to an existing ArrayMesh or creating a new one.

LANGUAGE: gdscript
CODE:
st.commit(mesh)
# Or:
var mesh = st.commit()

LANGUAGE: csharp
CODE:
st.Commit(mesh);
// Or:
var mesh = st.Commit();

----------------------------------------

TITLE: Toggling Avoidance on NavigationAgent2D in C#
DESCRIPTION: Demonstrates how to enable/disable avoidance and set avoidance callbacks on a NavigationAgent2D using C#.

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyNavigationAgent2D : NavigationAgent2D
{
    public override void _Ready()
    {
        Rid agent = GetRid();
        // Enable avoidance
        NavigationServer2D.AgentSetAvoidanceEnabled(agent, true);
        // Create avoidance callback
        NavigationServer2D.AgentSetAvoidanceCallback(agent, Callable.From(AvoidanceDone));

        // Disable avoidance
        NavigationServer2D.AgentSetAvoidanceEnabled(agent, false);
        //Delete avoidance callback
        NavigationServer2D.AgentSetAvoidanceCallback(agent, default);
    }

    private void AvoidanceDone() { }
}

----------------------------------------

TITLE: Setting a Solid Color in Fragment Shader
DESCRIPTION: A basic fragment function that sets every pixel to a single color using a vec4.

LANGUAGE: GLSL
CODE:
void fragment(){
  COLOR = vec4(0.4, 0.6, 0.9, 1.0);
}

----------------------------------------

TITLE: Manipulating NavigationLayers in 2D GDScript
DESCRIPTION: This snippet demonstrates how to change navigation layers for regions and agents, and how to perform path queries with specific layer restrictions in 2D using GDScript.

LANGUAGE: gdscript
CODE:
func change_layers():
    var region: NavigationRegion2D = get_node("NavigationRegion2D")
    # enables 4-th layer for this region
    region.navigation_layers = enable_bitmask_inx(region.navigation_layers, 4)
    # disables 1-rst layer for this region
    region.navigation_layers = disable_bitmask_inx(region.navigation_layers, 1)

    var agent: NavigationAgent2D = get_node("NavigationAgent2D")
    # make future path queries of this agent ignore regions with 4-th layer
    agent.navigation_layers = disable_bitmask_inx(agent.navigation_layers, 4)

    var path_query_navigation_layers: int = 0
    path_query_navigation_layers = enable_bitmask_inx(path_query_navigation_layers, 2)
    # get a path that only considers 2-nd layer regions
    var path: PackedVector2Array = NavigationServer2D.map_get_path(
        map,
        start_position,
        target_position,
        true,
        path_query_navigation_layers
        )

static func is_bitmask_inx_enabled(_bitmask: int, _index: int) -> bool:
    return _bitmask & (1 << _index) != 0

static func enable_bitmask_inx(_bitmask: int, _index: int) -> int:
    return _bitmask | (1 << _index)

static func disable_bitmask_inx(_bitmask: int, _index: int) -> int:
    return _bitmask & ~(1 << _index)

----------------------------------------

TITLE: Setting Minimum Size for GUI Control in GDScript
DESCRIPTION: Demonstrates how to set a minimum size for a custom GUI control using _get_minimum_size() method in GDScript.

LANGUAGE: gdscript
CODE:
func _get_minimum_size():
    return Vector2(30, 30)

----------------------------------------

TITLE: Basic Callable Usage in GDScript
DESCRIPTION: Demonstrates creating and using a Callable to call methods with arguments.

LANGUAGE: gdscript
CODE:
func print_args(arg1, arg2, arg3 = ""):
    prints(arg1, arg2, arg3)

func test():
    var callable = Callable(self, "print_args")
    callable.call("hello", "world")  # Prints "hello world ".
    callable.call(Vector2.UP, 42, callable)  # Prints "(0.0, -1.0) 42 Node(node.gd)::print_args"
    callable.call("invalid")  # Invalid call, should have at least 2 arguments.

----------------------------------------

TITLE: NavigationAgent2D with RigidBody2D in GDScript
DESCRIPTION: Implements basic movement and avoidance for a RigidBody2D using NavigationAgent2D in GDScript.

LANGUAGE: gdscript
CODE:
extends RigidBody2D

@export var movement_speed: float = 4.0
@onready var navigation_agent: NavigationAgent2D = get_node("NavigationAgent2D")

func _ready() -> void:
    navigation_agent.velocity_computed.connect(Callable(_on_velocity_computed))

func set_movement_target(movement_target: Vector2):
    navigation_agent.set_target_position(movement_target)

func _physics_process(delta):
    # Do not query when the map has never synchronized and is empty.
    if NavigationServer2D.map_get_iteration_id(navigation_agent.get_navigation_map()) == 0:
        return
    if navigation_agent.is_navigation_finished():
        return

    var next_path_position: Vector2 = navigation_agent.get_next_path_position()
    var new_velocity: Vector2 = global_position.direction_to(next_path_position) * movement_speed
    if navigation_agent.avoidance_enabled:
        navigation_agent.set_velocity(new_velocity)
    else:
        _on_velocity_computed(new_velocity)

func _on_velocity_computed(safe_velocity: Vector2):
    linear_velocity = safe_velocity

----------------------------------------

TITLE: Using Callable Properties for Node Communication in Godot
DESCRIPTION: Illustrates the use of Callable properties for communication between nodes in Godot using GDScript, C#, and C++. This method provides a safe way to start behavior in child nodes.

LANGUAGE: GDScript
CODE:
# Parent
$Child.func_property = object_with_method.method_on_the_object

# Child
func_property.call() # Call parent-defined method (can come from anywhere).

LANGUAGE: C#
CODE:
// Parent
GetNode("Child").Set("FuncProperty", Callable.From(ObjectWithMethod.MethodOnTheObject));

// Child
FuncProperty.Call(); // Call parent-defined method (can come from anywhere).

LANGUAGE: C++
CODE:
// Parent
Node *node = get_node<Node>("Child");
if (node != nullptr) {
    node->set("func_property", Callable(&ObjectWithMethod::method_on_the_object));
}

// Child
func_property.call(); // Call parent-defined method (can come from anywhere).

----------------------------------------

TITLE: Configuring Material Transparency
DESCRIPTION: Example showing how to configure transparency settings in StandardMaterial3D with different modes including Alpha, Alpha Scissor, Alpha Hash and Depth Pre-Pass.

LANGUAGE: gdscript
CODE:
var material = StandardMaterial3D.new()

# Alpha transparency
material.transparency = BaseMaterial3D.TRANSPARENCY_ALPHA

# Alpha scissor
material.transparency = BaseMaterial3D.TRANSPARENCY_ALPHA_SCISSOR
material.alpha_scissor_threshold = 0.5

# Alpha hash
material.transparency = BaseMaterial3D.TRANSPARENCY_ALPHA_HASH

# Depth pre-pass
material.transparency = BaseMaterial3D.TRANSPARENCY_DEPTH_PREPASS

----------------------------------------

TITLE: Camera2D Method Usage Example
DESCRIPTION: Example demonstrating how to use Camera2D methods

LANGUAGE: gdscript
CODE:
camera.align()
camera.make_current()
camera.reset_smoothing()
camera.set_limit(SIDE_LEFT, -1000)
camera.set_limit(SIDE_RIGHT, 1000)
camera.set_drag_margin(SIDE_TOP, 0.2)

----------------------------------------

TITLE: Custom Signal Definition
DESCRIPTION: Example of defining and implementing custom signals for health system

LANGUAGE: GDScript
CODE:
extends Node2D

signal health_depleted

var health = 10

func take_damage(amount):
    health -= amount
    if health <= 0:
        health_depleted.emit()

----------------------------------------

TITLE: Creating JavaScript Callback for Window Unload Event in GDScript
DESCRIPTION: Demonstrates how to create a JavaScript callback for the window.onbeforeunload event using JavaScriptBridge in GDScript.

LANGUAGE: gdscript
CODE:
extends Node

# Here we create a reference to the `_my_callback` function (below).
# This reference will be kept until the node is freed.
var _callback_ref = JavaScriptBridge.create_callback(_my_callback)

func _ready():
    # Get the JavaScript `window` object.
    var window = JavaScriptBridge.get_interface("window")
    # Set the `window.onbeforeunload` DOM event listener.
    window.onbeforeunload = _callback_ref

func _my_callback(args):
    # Get the first argument (the DOM event in our case).
    var js_event = args[0]
    # Call preventDefault and set the `returnValue` property of the DOM event.
    js_event.preventDefault()
    js_event.returnValue = ''

----------------------------------------

TITLE: Saving a Resource in GDScript
DESCRIPTION: Demonstrates how to use the ResourceSaver.save() method to save a Resource object to a file. This example shows basic usage without any special flags.

LANGUAGE: gdscript
CODE:
var resource = Resource.new()
# Modify resource as needed
var error = ResourceSaver.save(resource, "res://path/to/save/resource.tres")
if error == OK:
    print("Resource saved successfully")
else:
    print("Failed to save resource")

----------------------------------------

TITLE: NavigationAgent3D with RigidBody3D in C#
DESCRIPTION: Implements basic movement and avoidance for a RigidBody3D using NavigationAgent3D in C#.

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyRigidBody3D : RigidBody3D
{
    [Export]
    public float MovementSpeed { get; set; } = 4.0f;
    NavigationAgent3D _navigationAgent;

    public override void _Ready()
    {
        _navigationAgent = GetNode<NavigationAgent3D>("NavigationAgent3D");
        _navigationAgent.VelocityComputed += OnVelocityComputed;
    }

    private void SetMovementTarget(Vector3 movementTarget)
    {
        _navigationAgent.TargetPosition = movementTarget;
    }

    public override void _PhysicsProcess(double delta)
    {
        // Do not query when the map has never synchronized and is empty.
        if (NavigationServer3D.MapGetIterationId(_navigationAgent.GetNavigationMap()) == 0)
        {
            return;
        }

        if (_navigationAgent.IsNavigationFinished())
        {
            return;
        }

        Vector3 nextPathPosition = _navigationAgent.GetNextPathPosition();
        Vector3 newVelocity = GlobalPosition.DirectionTo(nextPathPosition) * MovementSpeed;
        if (_navigationAgent.AvoidanceEnabled)
        {
            _navigationAgent.Velocity = newVelocity;
        }
        else
        {
            OnVelocityComputed(newVelocity);
        }
    }

    private void OnVelocityComputed(Vector3 safeVelocity)
    {
        LinearVelocity = safeVelocity;
    }
}

----------------------------------------

TITLE: Alternative Gizmo Implementation
DESCRIPTION: Advanced gizmo implementation using custom EditorNode3DGizmo class for storing per-gizmo data. Shows plugin setup and gizmo class implementation.

LANGUAGE: GDScript
CODE:
# my_custom_gizmo_plugin.gd
extends EditorNode3DGizmoPlugin

const MyCustomNode3D = preload("res://addons/my-addon/my_custom_node_3d.gd")
const MyCustomGizmo = preload("res://addons/my-addon/my_custom_gizmo.gd")

func _init():
    create_material("main", Color(1, 0, 0))
    create_handle_material("handles")

func _create_gizmo(node):
    if node is MyCustomNode3D:
        return MyCustomGizmo.new()
    else:
        return null

LANGUAGE: GDScript
CODE:
# my_custom_gizmo.gd
extends EditorNode3DGizmo

var gizmo_size = 3.0

func _redraw():
    clear()

    var node3d = get_node_3d()

    var lines = PackedVector3Array()

    lines.push_back(Vector3(0, 1, 0))
    lines.push_back(Vector3(gizmo_size, node3d.my_custom_value, 0))

    var handles = PackedVector3Array()

    handles.push_back(Vector3(0, 1, 0))
    handles.push_back(Vector3(gizmo_size, node3d.my_custom_value, 0))

    var material = get_plugin().get_material("main", self)
    add_lines(lines, material, false)

    var handles_material = get_plugin().get_material("handles", self)
    add_handles(handles, handles_material, [])

----------------------------------------

TITLE: Calling C# Methods from GDScript in Godot
DESCRIPTION: Shows how to call C# methods from GDScript in Godot, including passing different types of arguments.

LANGUAGE: gdscript
CODE:
# Output: "my_gd_script_node" (or name of node where this code is placed).
my_csharp_node.PrintNodeName(self)
# This line will fail.
# my_csharp_node.PrintNodeName()

# Outputs "Hello there!" twice, once per line.
my_csharp_node.PrintNTimes("Hello there!", 2)

# Output: "a", "b", "c" (one per line).
my_csharp_node.PrintArray(["a", "b", "c"])
# Output: "1", "2", "3"  (one per line).
my_csharp_node.PrintArray([1, 2, 3])

----------------------------------------

TITLE: Implementing Player Movement and Animation in GDScript
DESCRIPTION: Handles player input, calculates movement vector, updates position, and manages animations based on movement direction.

LANGUAGE: GDScript
CODE:
func _process(delta):
    var velocity = Vector2.ZERO # The player's movement vector.
    if Input.is_action_pressed("move_right"):
        velocity.x += 1
    if Input.is_action_pressed("move_left"):
        velocity.x -= 1
    if Input.is_action_pressed("move_down"):
        velocity.y += 1
    if Input.is_action_pressed("move_up"):
        velocity.y -= 1

    if velocity.length() > 0:
        velocity = velocity.normalized() * speed
        $AnimatedSprite2D.play()
    else:
        $AnimatedSprite2D.stop()

    position += velocity * delta
    position = position.clamp(Vector2.ZERO, screen_size)

    if velocity.x != 0:
        $AnimatedSprite2D.animation = "walk"
        $AnimatedSprite2D.flip_v = false
        $AnimatedSprite2D.flip_h = velocity.x < 0
    elif velocity.y != 0:
        $AnimatedSprite2D.animation = "up"
        $AnimatedSprite2D.flip_v = velocity.y > 0

----------------------------------------

TITLE: Preloading Resources in GDScript
DESCRIPTION: Demonstrates how to preload a resource in GDScript. This method loads the resource at compile-time, requiring a constant string path.

LANGUAGE: GDScript
CODE:
func _ready():
    # Godot loads the resource at compile-time
    var imported_resource = preload("res://robi.png")
    get_node("sprite").texture = imported_resource

----------------------------------------

TITLE: Applying Transforms onto Transforms
DESCRIPTION: Demonstrates how to combine multiple Transform2D objects to calculate a child's world transform.

LANGUAGE: GDScript
CODE:
# Set up transforms like in the image, except make positions be 100 times bigger.
var parent = Transform2D(Vector2(2, 0), Vector2(0, 1), Vector2(100, 200))
var child = Transform2D(Vector2(0.5, 0), Vector2(0, 0.5), Vector2(100, 100))

# Change the node's transform to what would be the child's world transform.
transform = parent * child

LANGUAGE: C#
CODE:
// Set up transforms like in the image, except make positions be 100 times bigger.
Transform2D parent = new Transform2D(2, 0, 0, 1, 100, 200);
Transform2D child = new Transform2D(0.5f, 0, 0, 0.5f, 100, 100);

// Change the node's transform to what would be the child's world transform.
Transform = parent * child;

----------------------------------------

TITLE: Calling Method on Group Members in C#
DESCRIPTION: Demonstrates calling a method named 'enter_alert_mode' on all nodes in the 'guards' group when a player is discovered using C#.

LANGUAGE: C#
CODE:
public void _OnPlayerDiscovered()
{
    GetTree().CallGroup("guards", "enter_alert_mode");
}

----------------------------------------

TITLE: Referencing Scene Unique Nodes in GDScript
DESCRIPTION: Demonstrates how to reference a scene unique node in GDScript using get_node() or direct access. The example shows setting the text property of a button named 'RedButton'.

LANGUAGE: gdscript
CODE:
get_node("%RedButton").text = "Hello"
%RedButton.text = "Hello" # Shorter syntax

----------------------------------------

TITLE: Polygon Collision Detection using SAT in GDScript
DESCRIPTION: Implements the Separating Axis Theorem (SAT) for detecting collisions between two convex polygons. This algorithm is widely used in physics engines and collision detection systems.

LANGUAGE: gdscript
CODE:
var overlapping = true

for p in planes_of_A:
    var all_out = true
    for v in points_of_B:
        if (p.distance_to(v) < 0):
            all_out = false
            break

    if (all_out):
        overlapping = false
        break

if (overlapping):
    for p in planes_of_B:
        var all_out = true
        for v in points_of_A:
            if (p.distance_to(v) < 0):
                all_out = false
                break

        if (all_out):
            overlapping = false
            break

if (overlapping):
    print("Polygons Collided!")

----------------------------------------

TITLE: Comparing Static vs Dynamic Typing in C++ and GDScript
DESCRIPTION: Demonstrates the difference between static typing in C++ and dynamic typing in GDScript, showing variable declaration and assignment.

LANGUAGE: cpp
CODE:
int a; // Value uninitialized.
a = 5; // This is valid.
a = "Hi!"; // This is invalid.

LANGUAGE: gdscript
CODE:
var a # 'null' by default.
a = 5 # Valid, 'a' becomes an integer.
a = "Hi!" # Valid, 'a' changed to a string.

----------------------------------------

TITLE: Creating Custom Resources in C#
DESCRIPTION: Shows how to create a custom Resource script in C#. This example defines a BotStats resource with exportable properties and constructors.

LANGUAGE: C#
CODE:
// BotStats.cs
using Godot;

namespace ExampleProject
{
    [GlobalClass]
    public partial class BotStats : Resource
    {
        [Export]
        public int Health { get; set; }

        [Export]
        public Resource SubResource { get; set; }

        [Export]
        public string[] Strings { get; set; }

        // Make sure you provide a parameterless constructor.
        // In C#, a parameterless constructor is different from a
        // constructor with all default values.
        // Without a parameterless constructor, Godot will have problems
        // creating and editing your resource via the inspector.
        public BotStats() : this(0, null, null) {}

        public BotStats(int health, Resource subResource, string[] strings)
        {
            Health = health;
            SubResource = subResource;
            Strings = strings ?? System.Array.Empty<string>();
        }
    }
}

----------------------------------------

TITLE: Creating Custom NavigationMap in 2D C#
DESCRIPTION: Demonstrates creating a new NavigationMap using NavigationServer2D in C#. This allows for custom navigation setups in 2D C# projects.

LANGUAGE: csharp
CODE:
public partial class MyNode2D : Node2D
{
    public override void _Ready()
    {
        Rid newNavigationMap = NavigationServer2D.MapCreate();
        NavigationServer2D.MapSetActive(newNavigationMap, true);
    }
}

----------------------------------------

TITLE: Converting Local Coordinates to Screen Coordinates in GDScript
DESCRIPTION: Illustrates the process of converting a CanvasItem's local coordinates to screen coordinates by applying multiple transforms.

LANGUAGE: gdscript
CODE:
var screen_coord = get_viewport().get_screen_transform() * get_global_transform_with_canvas() * local_pos

----------------------------------------

TITLE: Signal Parameter Binding in GDScript
DESCRIPTION: Shows how to bind parameters when connecting signals and how they interact with emitted signal parameters in GDScript.

LANGUAGE: gdscript
CODE:
func _ready():
    # This assumes that a `Player` class exists, which defines a `hit` signal.
    var player = Player.new()
    # Using Callable.bind().
    player.hit.connect(_on_player_hit.bind("sword", 100))

    # Parameters added when emitting the signal are passed first.
    player.hit.emit("Dark lord", 5)

# We pass two arguments when emitting (`hit_by`, `level`),
# and bind two more arguments when connecting (`weapon_type`, `damage`).
func _on_player_hit(hit_by, level, weapon_type, damage):
    print("Hit by %s (level %d) with weapon %s for %d damage." % [hit_by, level, weapon_type, damage])

----------------------------------------

TITLE: Grouping do/undo operations in GDScript
DESCRIPTION: Example of how to group do and undo operations separately when registering multiple dependent properties/methods.

LANGUAGE: gdscript
CODE:
undo_redo.create_action("Add object")

# DO
undo_redo.add_do_method(_create_object)
undo_redo.add_do_method(_add_object_to_singleton)

# UNDO
undo_redo.add_undo_method(_remove_object_from_singleton)
undo_redo.add_undo_method(_destroy_that_object)

undo_redo.commit_action()

----------------------------------------

TITLE: Layering Multiple Waves for Complex Ocean Surface in GLSL
DESCRIPTION: Combines multiple wave functions with different frequencies and amplitudes to create a more realistic and complex ocean surface.

LANGUAGE: GLSL
CODE:
float height(vec2 position, float time) {
  float d = wave((position + time) * 0.4) * 0.3;
  d += wave((position - time) * 0.3) * 0.3;
  d += wave((position + time) * 0.5) * 0.2;
  d += wave((position - time) * 0.6) * 0.2;
  return d;
}

----------------------------------------

TITLE: Matrix Effect Custom RichTextEffect Implementation
DESCRIPTION: Custom RichTextEffect that creates a matrix-style character transformation animation

LANGUAGE: GDScript
CODE:
@tool
extends RichTextEffect
class_name RichTextMatrix

var bbcode = "matrix"

func get_text_server():
    return TextServerManager.get_primary_interface()

func _process_custom_fx(char_fx):
    var clear_time = char_fx.env.get("clean", 2.0)
    var dirty_time = char_fx.env.get("dirty", 1.0)
    var text_span = char_fx.env.get("span", 50)

    var value = char_fx.glyph_index

    var matrix_time = fmod(char_fx.elapsed_time + (char_fx.range.x / float(text_span)), clear_time + dirty_time)

    matrix_time = 0.0 if matrix_time < clear_time else (matrix_time - clear_time) / dirty_time

    if matrix_time > 0.0:
        value = int(1 * matrix_time * (126 - 65))
        value %= (126 - 65)
        value += 65
    char_fx.glyph_index = get_text_server().font_get_glyph_index(char_fx.font, 1, value, 0)
    return true

----------------------------------------

TITLE: Shader Struct Definition
DESCRIPTION: Example demonstrating how to define and use structs in Godot shaders for better code organization.

LANGUAGE: GLSL
CODE:
struct PointLight {
    vec3 position;
    vec3 color;
    float intensity;
};

void fragment()
{
    PointLight light;
    light.position = vec3(0.0);
    light.color = vec3(1.0, 0.0, 0.0);
    light.intensity = 0.5;
}

----------------------------------------

TITLE: Drawing Circles and Text in GDScript
DESCRIPTION: Demonstrates drawing circles for eyes and adding text using draw_circle and draw_string in GDScript.

LANGUAGE: GDScript
CODE:
var default_font : Font = ThemeDB.fallback_font;

func _draw():
    var white : Color = Color.WHITE
    var grey : Color = Color("414042")

    draw_circle(Vector2(42.479, 65.4825), 9.3905, white)
    draw_circle(Vector2(85.524, 65.4825), 9.3905, white)
    draw_circle(Vector2(43.423, 65.92), 6.246, grey)
    draw_circle(Vector2(84.626, 66.008), 6.246, grey)

    draw_string(default_font, Vector2(20, 130), "GODOT",
                HORIZONTAL_ALIGNMENT_CENTER, 90, 22)

----------------------------------------

TITLE: Accessing Default NavigationMap in 2D GDScript
DESCRIPTION: Demonstrates how to obtain the default NavigationMap RID for a 2D world in GDScript. This is typically used for basic 2D navigation setup.

LANGUAGE: gdscript
CODE:
extends Node2D

func _ready() -> void:
    var default_navigation_map_rid: RID = get_world_2d().get_navigation_map()

----------------------------------------

TITLE: Defining Grayscale Post-Processing Effect in GLSL
DESCRIPTION: GLSL code snippet for converting the rendered image to grayscale, to be used as the shader_code in the PostProcessShader.

LANGUAGE: GLSL
CODE:
float gray = color.r * 0.2125 + color.g * 0.7154 + color.b * 0.0721;
color.rgb = vec3(gray);

----------------------------------------

TITLE: Implementing RigidBody Look Follow in C#
DESCRIPTION: C# version of the RigidBody3D look follow implementation. Provides the same functionality as the GDScript version, allowing smooth physics-based rotation towards a target position.

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyRigidBody3D : RigidBody3D
{
    private float _speed = 0.1f;
    private void LookFollow(PhysicsDirectBodyState3D state, Transform3D currentTransform, Vector3 targetPosition)
    {
        Vector3 forwardLocalAxis = new Vector3(1, 0, 0);
        Vector3 forwardDir = (currentTransform.Basis * forwardLocalAxis).Normalized();
        Vector3 targetDir = (targetPosition - currentTransform.Origin).Normalized();
        float localSpeed = Mathf.Clamp(_speed, 0.0f, Mathf.Acos(forwardDir.Dot(targetDir)));
        if (forwardDir.Dot(targetDir) > 1e-4)
        {
            state.AngularVelocity = forwardDir.Cross(targetDir) * localSpeed / state.Step;
        }
    }

    public override void _IntegrateForces(PhysicsDirectBodyState3D state)
    {
        Vector3 targetPosition = GetNode<Node3D>("MyTargetNode3DNode").GlobalTransform.Origin;
        LookFollow(state, GlobalTransform, targetPosition);
    }
}

----------------------------------------

TITLE: Scripting HTTP Request in Godot (C#)
DESCRIPTION: C# version of the HTTP request script, showing how to set up the request, connect to the RequestCompleted event, and parse the JSON response to print the latest Godot release name.

LANGUAGE: C#
CODE:
using Godot;
using System.Text;

public partial class MyNode : Node
{
    public override void _Ready()
    {
        HttpRequest httpRequest = GetNode<HttpRequest>("HTTPRequest");
        httpRequest.RequestCompleted += OnRequestCompleted;
        httpRequest.Request("https://api.github.com/repos/godotengine/godot/releases/latest");
    }

    private void OnRequestCompleted(long result, long responseCode, string[] headers, byte[] body)
    {
        Godot.Collections.Dictionary json = Json.ParseString(Encoding.UTF8.GetString(body)).AsGodotDictionary();
        GD.Print(json["name"]);
    }
}

----------------------------------------

TITLE: Creating and Accessing Arrays in C#
DESCRIPTION: Demonstrates creating an array and accessing elements by index in C#.

LANGUAGE: csharp
CODE:
Godot.Collections.Array array = ["First", 2, 3, "Last"];
GD.Print(array[0]); // Prints "First"
GD.Print(array[2]); // Prints 3
GD.Print(array[^1]); // Prints "Last"

array[1] = "Second";
GD.Print(array[1]); // Prints "Second"
GD.Print(array[^3]); // Prints "Second"

----------------------------------------

TITLE: Camera2D Property Setting Example
DESCRIPTION: Example showing how to set common Camera2D properties

LANGUAGE: gdscript
CODE:
var camera = Camera2D.new()
camera.enabled = true
camera.zoom = Vector2(2, 2)
camera.position_smoothing_enabled = true
camera.position_smoothing_speed = 5.0
camera.drag_horizontal_enabled = true
camera.drag_vertical_enabled = true

----------------------------------------

TITLE: Configuring AspectRatioContainer for Video Scaling
DESCRIPTION: Sets up an AspectRatioContainer to maintain the video's aspect ratio while scaling to fit the screen without distortion.

LANGUAGE: gdscript
CODE:
# Set AspectRatioContainer's Ratio property
# Example for 16:9 aspect ratio
aspect_ratio_container.ratio = 16.0 / 9.0

----------------------------------------

TITLE: Multiple Screen Texture Definitions in GLSL
DESCRIPTION: A shader showing how to use multiple screen texture uniforms with different filtering options for normal and roughness reading.

LANGUAGE: glsl
CODE:
uniform sampler2D normal_roughness_texture : hint_normal_roughness_texture, repeat_disable, filter_nearest;
uniform sampler2D normal_roughness_texture2 : hint_normal_roughness_texture, repeat_enable, filter_linear;

void fragment() {
    float screen_roughness = texture(normal_roughness_texture, SCREEN_UV).w;
    vec3 screen_normal = texture(normal_roughness_texture2, SCREEN_UV).xyz;
    screen_normal = screen_normal * 2.0 - 1.0;

----------------------------------------

TITLE: Accessing Custom Theme Colors in GDScript
DESCRIPTION: Demonstrates how to fetch a custom theme color and override a control's font color using GDScript.

LANGUAGE: gdscript
CODE:
var accent_color = get_theme_color("accent_color", "MyType")
label.add_theme_color_override("font_color", accent_color)

----------------------------------------

TITLE: Implementing Manual Camera Interpolation in Godot
DESCRIPTION: This script demonstrates how to implement manual camera interpolation in Godot. It disables automatic physics interpolation for the camera and uses get_global_transform_interpolated() to smoothly follow a target node.

LANGUAGE: gdscript
CODE:
extends Camera3D

# Node that the camera will follow
var _target

# We will smoothly lerp to follow the target
# rather than follow exactly
var _target_pos : Vector3 = Vector3()

func _ready() -> void:
    # Find the target node
    _target = get_node("../Player")

    # Turn off automatic physics interpolation for the Camera3D,
    # we will be doing this manually
    set_physics_interpolation_mode(Node.PHYSICS_INTERPOLATION_MODE_OFF)

func _process(delta: float) -> void:
    # Find the current interpolated transform of the target
    var tr : Transform = _target.get_global_transform_interpolated()

    # Provide some delayed smoothed lerping towards the target position 
    _target_pos = lerp(_target_pos, tr.origin, min(delta, 1.0))

    # Fixed camera position, but it will follow the target
    look_at(_target_pos, Vector3(0, 1, 0))

----------------------------------------

TITLE: Basic 2D Raycast Query
DESCRIPTION: Demonstrates how to perform a basic 2D raycast query using PhysicsDirectSpaceState2D and handle the results.

LANGUAGE: gdscript
CODE:
func _physics_process(delta):
    var space_state = get_world_2d().direct_space_state
    var query = PhysicsRayQueryParameters2D.create(Vector2(0, 0), Vector2(50, 100))
    var result = space_state.intersect_ray(query)
    if result:
        print("Hit at point: ", result.position)

LANGUAGE: csharp
CODE:
public override void _PhysicsProcess(double delta)
{
    var spaceState = GetWorld2D().DirectSpaceState;
    var query = PhysicsRayQueryParameters2D.Create(Vector2.Zero, new Vector2(50, 100));
    var result = spaceState.IntersectRay(query);
    if (result.Count > 0)
        GD.Print("Hit at point: ", result["position"]);
}

----------------------------------------

TITLE: Vector Component Access in Godot
DESCRIPTION: Shows how to access and modify individual components of Vector2 objects in Godot. This is useful for creating and manipulating vectors directly.

LANGUAGE: GDScript
CODE:
# Create a vector with coordinates (2, 5).
var a = Vector2(2, 5)
# Create a vector and assign x and y manually.
var b = Vector2()
b.x = 3
b.y = 1

LANGUAGE: C#
CODE:
// Create a vector with coordinates (2, 5).
var a = new Vector2(2, 5);
// Create a vector and assign x and y manually.
var b = new Vector2();
b.X = 3;
b.Y = 1;

----------------------------------------

TITLE: Splitting String Using RegEx
DESCRIPTION: Example of using RegEx to split a string by matching non-whitespace characters.

LANGUAGE: GDScript
CODE:
var regex = RegEx.new()
regex.compile("\\S+") # Negated whitespace character class.
var results = []
for result in regex.search_all("One  Two \n\tThree"):
    results.push_back(result.get_string())
# The `results` array now contains "One", "Two", and "Three".

----------------------------------------

TITLE: Setting 2D Node Position in Godot
DESCRIPTION: Demonstrates how to set the position of a 2D node in Godot using Vector2. The example shows positioning a Node2D 400 pixels to the right and 300 pixels down from the top-left corner.

LANGUAGE: GDScript
CODE:
$Node2D.position = Vector2(400, 300)

LANGUAGE: C#
CODE:
var node2D = GetNode<Node2D>("Node2D");
node2D.Position = new Vector2(400, 300);

----------------------------------------

TITLE: Setting Edge Connection Margin for 3D Navigation in GDScript
DESCRIPTION: This GDScript example shows how to set the edge connection margin for the default 3D navigation map at runtime. It uses the NavigationServer3D API to set the margin to 0.5 world units.

LANGUAGE: gdscript
CODE:
extends Node3D

func _ready() -> void:
    # 3D margins are designed to work with 3D world unit values.
    var default_map_rid: RID = get_world_3d().get_navigation_map()
    NavigationServer3D.map_set_edge_connection_margin(default_map_rid, 0.5)

----------------------------------------

TITLE: Toggling Avoidance on NavigationAgent2D in GDScript
DESCRIPTION: Demonstrates how to enable/disable avoidance and set avoidance callbacks on a NavigationAgent2D using GDScript.

LANGUAGE: gdscript
CODE:
extends NavigationAgent2D

func _ready() -> void:
    var agent: RID = get_rid()
    # Enable avoidance
    NavigationServer2D.agent_set_avoidance_enabled(agent, true)
    # Create avoidance callback
    NavigationServer2D.agent_set_avoidance_callback(agent, Callable(self, "_avoidance_done"))

    # Disable avoidance
    NavigationServer2D.agent_set_avoidance_enabled(agent, false)
    # Delete avoidance callback
    NavigationServer2D.agent_set_avoidance_callback(agent, Callable())

----------------------------------------

TITLE: Loading MP3 File at Runtime - C#
DESCRIPTION: C# function to load an MP3 file into memory and create an AudioStreamMP3 instance. The entire file is loaded into memory, so use with caution for large files.

LANGUAGE: csharp
CODE:
public AudioStreamMP3 LoadMP3(string path)
{
    using var file = FileAccess.Open(path, FileAccess.ModeFlags.Read);
    var sound = new AudioStreamMP3();
    sound.Data = file.GetBuffer(file.GetLength());
    return sound;
}

----------------------------------------

TITLE: Horizontal Gaussian Blur Shader Pass in GLSL
DESCRIPTION: First pass of a two-pass Gaussian blur implementation that blurs the screen horizontally using weighted texture sampling.

LANGUAGE: glsl
CODE:
shader_type canvas_item;

uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_nearest;

void fragment() {
    vec3 col = texture(screen_texture, SCREEN_UV).xyz * 0.16;
    col += texture(screen_texture, SCREEN_UV + vec2(SCREEN_PIXEL_SIZE.x, 0.0)).xyz * 0.15;
    col += texture(screen_texture, SCREEN_UV + vec2(-SCREEN_PIXEL_SIZE.x, 0.0)).xyz * 0.15;
    col += texture(screen_texture, SCREEN_UV + vec2(2.0 * SCREEN_PIXEL_SIZE.x, 0.0)).xyz * 0.12;
    col += texture(screen_texture, SCREEN_UV + vec2(2.0 * -SCREEN_PIXEL_SIZE.x, 0.0)).xyz * 0.12;
    col += texture(screen_texture, SCREEN_UV + vec2(3.0 * SCREEN_PIXEL_SIZE.x, 0.0)).xyz * 0.09;
    col += texture(screen_texture, SCREEN_UV + vec2(3.0 * -SCREEN_PIXEL_SIZE.x, 0.0)).xyz * 0.09;
    col += texture(screen_texture, SCREEN_UV + vec2(4.0 * SCREEN_PIXEL_SIZE.x, 0.0)).xyz * 0.05;
    col += texture(screen_texture, SCREEN_UV + vec2(4.0 * -SCREEN_PIXEL_SIZE.x, 0.0)).xyz * 0.05;
    COLOR.xyz = col;
}

----------------------------------------

TITLE: Loading and Parsing a ConfigFile in GDScript
DESCRIPTION: This snippet shows how to load a ConfigFile from disk and parse its contents into a dictionary.

LANGUAGE: gdscript
CODE:
var score_data = {}
var config = ConfigFile.new()

# Load data from a file.
var err = config.load("user://scores.cfg")

# If the file didn't load, ignore it.
if err != OK:
    return

# Iterate over all sections.
for player in config.get_sections():
    # Fetch the data for each section.
    var player_name = config.get_value(player, "player_name")
    var player_score = config.get_value(player, "best_score")
    score_data[player_name] = player_score

----------------------------------------

TITLE: Animating Custom Shapes in C#
DESCRIPTION: Shows how to animate a custom shape by rotating it and changing a property over time in C#.

LANGUAGE: C#
CODE:
[Export]
public float RotationSpeed { get; set; } = 1.0f;

private float _mouthWidth = 4.4f;
private float _maxWidth = 7f;
private float _time = 0f;

public override void _Ready()
{
    Rotation = 0;
    Position = new Vector2(60, 60);
}

public override void _Process(double delta)
{
    Rotation -= RotationSpeed * (float)delta;
    _time += (float)delta;
    _mouthWidth = Mathf.Abs(Mathf.Sin(_time) * _maxWidth);
    QueueRedraw();
}

public override void _Draw()
{
    DrawSetTransform(new Vector2(-60.0f, -60.0f));
    // ... other drawing commands
    DrawPolyline(_mouth, Colors.White, _mouthWidth);
}

----------------------------------------

TITLE: String Formatting and Interpolation - GDScript
DESCRIPTION: Examples of string formatting using placeholders and the format() method.

LANGUAGE: gdscript
CODE:
# Using format()
print("Waiting for {0} is a play by {1}, and {0} Engine is named after it.".format(["Godot", "Samuel Beckett"]))

# Using % operator
print("I caught %d fishes!" % 2) # Prints "I caught 2 fishes!"

----------------------------------------

TITLE: Feeding Custom Input Events in C#
DESCRIPTION: Demonstrates the C# equivalent of creating and feeding a custom mouse input event to the game, considering all required transforms.

LANGUAGE: csharp
CODE:
var localPos = new Vector2(10,20); // Local to Control/Node2D.
var ie = new InputEventMouseButton()
{
    ButtonIndex = MouseButton.Left,
    Position = GetViewport().GetScreenTransform() * GetGlobalTransformWithCanvas() * localPos,
};
Input.ParseInputEvent(ie);

----------------------------------------

TITLE: Loading PCK Files at Runtime in C#
DESCRIPTION: Shows how to load a PCK file named 'mod.pck' and access a scene from it using C#. This code checks for successful loading and then attempts to load a scene from the pack, casting it to a PackedScene.

LANGUAGE: csharp
CODE:
private void YourFunction()
{
    // This could fail if, for example, mod.pck cannot be found.
    var success = ProjectSettings.LoadResourcePack("res://mod.pck");

    if (success)
    {
        // Now one can use the assets as if they had them in the project from the start.
        var importedScene = (PackedScene)ResourceLoader.Load("res://mod_scene.tscn");
    }
}

----------------------------------------

TITLE: Using Booleans in Conditional Statements (GDScript and C#)
DESCRIPTION: Demonstrates how to use boolean values in if statements and logical operations in both GDScript and C#.

LANGUAGE: gdscript
CODE:
var can_shoot = true
if can_shoot:
    launch_bullet()

if bullets > 0 and not is_reloading():
    launch_bullet()

if bullets == 0 or is_reloading():
    play_clack_sound()

LANGUAGE: csharp
CODE:
bool canShoot = true;
if (canShoot)
{
    LaunchBullet();
}

if (bullets > 0 && !IsReloading())
{
    LaunchBullet();
}

if (bullets == 0 || IsReloading())
{
    PlayClackSound();
}

----------------------------------------

TITLE: File Hashing Example in GDScript
DESCRIPTION: Demonstrates how to compute a SHA-256 hash of a file by reading and processing it in chunks using HashingContext. Shows initialization, chunk processing, and retrieving the final hash value.

LANGUAGE: gdscript
CODE:
const CHUNK_SIZE = 1024

func hash_file(path):
    # Check that file exists.
    if not FileAccess.file_exists(path):
        return
    # Start an SHA-256 context.
    var ctx = HashingContext.new()
    ctx.start(HashingContext.HASH_SHA256)
    # Open the file to hash.
    var file = FileAccess.open(path, FileAccess.READ)
    # Update the context after reading each chunk.
    while file.get_position() < file.get_length():
        var remaining = file.get_length() - file.get_position()
        ctx.update(file.get_buffer(min(remaining, CHUNK_SIZE)))
    # Get the computed hash.
    var res = ctx.finish()
    # Print the result as hex string and array.
    printt(res.hex_encode(), Array(res))

----------------------------------------

TITLE: Getting Nodes in Group in GDScript
DESCRIPTION: Shows how to retrieve an array of all nodes in the 'guards' group using the SceneTree.

LANGUAGE: GDScript
CODE:
var guards = get_tree().get_nodes_in_group("guards")

----------------------------------------

TITLE: Loading and Instantiating a Scene
DESCRIPTION: Demonstrates how to load a scene file and add it as a child node. Shows both GDScript and C# approaches to scene instantiation.

LANGUAGE: gdscript
CODE:
var scene = preload("res://scene.tscn").instantiate()
add_child(scene)

LANGUAGE: csharp
CODE:
var scene = ResourceLoader.Load<PackedScene>("res://scene.tscn").Instantiate();
AddChild(scene);

----------------------------------------

TITLE: Overriding Theme Properties in GDScript
DESCRIPTION: Demonstrates how to override theme properties for a Control node, such as color and stylebox, and how to reset them.

LANGUAGE: gdscript
CODE:
# Given the child Label node "MyLabel", override its font color with a custom value.
$MyLabel.add_theme_color_override("font_color", Color(1, 0.5, 0))
# Reset the font color of the child label.
$MyLabel.remove_theme_color_override("font_color")
# Alternatively it can be overridden with the default value from the Label type.
$MyLabel.add_theme_color_override("font_color", get_theme_color("font_color", "Label"))

# The snippet below assumes the child node "MyButton" has a StyleBoxFlat assigned.
# Resources are shared across instances, so we need to duplicate it
# to avoid modifying the appearance of all other buttons.
var new_stylebox_normal = $MyButton.get_theme_stylebox("normal").duplicate()
new_stylebox_normal.border_width_top = 3
new_stylebox_normal.border_color = Color(0, 1, 0.5)
$MyButton.add_theme_stylebox_override("normal", new_stylebox_normal)
# Remove the stylebox override.
$MyButton.remove_theme_stylebox_override("normal")

----------------------------------------

TITLE: Using Callable in C# for Godot
DESCRIPTION: Demonstrates how to use lambdas to create Callable objects in C#, as an alternative to GDScript's bind and unbind methods.

LANGUAGE: csharp
CODE:
string name = "John Doe";
Callable callable = Callable.From(() => SayHello(name));

void SayHello(string name)
{
    GD.Print($"Hello {name}");
}

----------------------------------------

TITLE: Dictionary Access and Manipulation - GDScript
DESCRIPTION: Demonstrates how to access, modify and check dictionary contents in GDScript

LANGUAGE: gdscript
CODE:
var points_dict = {"White": 50, "Yellow": 75, "Orange": 100}
points_dict["Blue"] = 150 # Add "Blue" as a key and assign 150 as its value.

var my_dict = {
    "String Key": 5,
    4: [1, 2, 3],
    7: "Hello",
    "sub_dict": {"sub_key": "Nested value"},
}

----------------------------------------

TITLE: Simple JSON String Parsing
DESCRIPTION: Example of parsing a JSON string using the static parse_string method without error handling.

LANGUAGE: GDScript
CODE:
var data = JSON.parse_string(json_string) # Returns null if parsing failed.

----------------------------------------

TITLE: Playing Back Recorded Audio in Godot
DESCRIPTION: Implements audio playback functionality by assigning the recorded audio to an AudioStreamPlayer and playing it. Also prints recording information for debugging.

LANGUAGE: gdscript
CODE:
func _on_play_button_pressed():
    print(recording)
    print(recording.format)
    print(recording.mix_rate)
    print(recording.stereo)
    var data = recording.get_data()
    print(data.size())
    $AudioStreamPlayer.stream = recording
    $AudioStreamPlayer.play()

LANGUAGE: csharp
CODE:
private void OnPlayButtonPressed()
{
    GD.Print(_recording);
    GD.Print(_recording.Format);
    GD.Print(_recording.MixRate);
    GD.Print(_recording.Stereo);
    byte[] data = _recording.Data;
    GD.Print(data.Length);
    var audioStreamPlayer = GetNode<AudioStreamPlayer>("AudioStreamPlayer");
    audioStreamPlayer.Stream = _recording;
    audioStreamPlayer.Play();
}

----------------------------------------

TITLE: Retrieving Scene Path from TileMapLayer in C#
DESCRIPTION: This code snippet shows how to find the scene path for a given tile in a TileMapLayer using C#. It checks if the source is a TileSetScenesCollectionSource and retrieves the associated PackedScene.

LANGUAGE: csharp
CODE:
int sourceId = tileMapLayer.GetCellSourceId(new Vector2I(x, y));
if (sourceId > -1)
{
    TileSetSource source = tileMapLayer.TileSet.GetSource(sourceId);
    if (source is TileSetScenesCollectionSource sceneSource)
    {
        int altId = tileMapLayer.GetCellAlternativeTile(new Vector2I(x, y));
        // The assigned PackedScene.
        PackedScene scene = sceneSource.GetSceneTileScene(altId);
    }
}

----------------------------------------

TITLE: Moving a File to Trash in GDScript
DESCRIPTION: Demonstrates how to move a file to the system's recycle bin using OS.move_to_trash().

LANGUAGE: gdscript
CODE:
var file_to_remove = "user://slot1.save"
OS.move_to_trash(ProjectSettings.globalize_path(file_to_remove))

----------------------------------------

TITLE: Framerate-Independent Smooth Following in GDScript and C#
DESCRIPTION: Implements framerate-independent smooth following using exponential interpolation. This version works correctly regardless of framerate variations.

LANGUAGE: gdscript
CODE:
const FOLLOW_SPEED = 4.0

func _process(delta):
    var mouse_pos = get_local_mouse_position()
    var weight = 1 - exp(-FOLLOW_SPEED * delta)
    $Sprite2D.position = $Sprite2D.position.lerp(mouse_pos, weight)

LANGUAGE: csharp
CODE:
private const float FollowSpeed = 4.0f;

public override void _Process(double delta)
{
    Vector2 mousePos = GetLocalMousePosition();
    Sprite2D sprite = GetNode<Sprite2D>("Sprite2D");
    float weight = 1f - Mathf.Exp(-FollowSpeed * (float)delta);
    sprite.Position = sprite.Position.Lerp(mousePos, weight);
}

----------------------------------------

TITLE: Scene Creation in Separate Thread
DESCRIPTION: Shows how to safely create and set up scene chunks in a separate thread before adding them to the main scene tree. Demonstrates proper resource loading and deferred scene addition.

LANGUAGE: gdscript
CODE:
var enemy_scene = load("res://enemy_scene.scn")
var enemy = enemy_scene.instantiate()
enemy.add_child(weapon) # Set a weapon.
world.add_child.call_deferred(enemy)

LANGUAGE: csharp
CODE:
PackedScene enemyScene = GD.Load<PackedScene>("res://EnemyScene.scn");
Node enemy = enemyScene.Instantiate<Node>();
enemy.AddChild(weapon);
world.CallDeferred(Node.MethodName.AddChild, enemy);

----------------------------------------

TITLE: Vector Interpolation in GDScript and C#
DESCRIPTION: Demonstrates how to interpolate between two points using Vector2.lerp() function. The code moves a sprite from point A to B at a constant speed.

LANGUAGE: gdscript
CODE:
var t = 0.0

func _physics_process(delta):
    t += delta * 0.4
    $Sprite2D.position = $A.position.lerp($B.position, t)

LANGUAGE: csharp
CODE:
private float _t = 0.0f;

public override void _PhysicsProcess(double delta)
{
    _t += (float)delta * 0.4f;

    Marker2D a = GetNode<Marker2D>("A");
    Marker2D b = GetNode<Marker2D>("B");
    Sprite2D sprite = GetNode<Sprite2D>("Sprite2D");

    sprite.Position = a.Position.Lerp(b.Position, _t);
}

----------------------------------------

TITLE: Defining Squash Function for Mobs in GDScript
DESCRIPTION: Adds a squash function to the Mob script to handle being squashed by the player.

LANGUAGE: GDScript
CODE:
signal squashed

# ...

func squash():
    squashed.emit()
    queue_free()

----------------------------------------

TITLE: Setting Edge Connection Margin for 2D Navigation in GDScript
DESCRIPTION: This snippet demonstrates how to change the edge connection margin for the default 2D navigation map at runtime using GDScript. It uses the NavigationServer2D API to set the margin to 50.0 pixels.

LANGUAGE: gdscript
CODE:
extends Node2D

func _ready() -> void:
    # 2D margins are designed to work with 2D "pixel" values.
    var default_map_rid: RID = get_world_2d().get_navigation_map()
    NavigationServer2D.map_set_edge_connection_margin(default_map_rid, 50.0)

----------------------------------------

TITLE: Sampling Curve2D with Rotation in GDScript
DESCRIPTION: Shows how to sample a point along the curve and get both position and rotation information.

LANGUAGE: gdscript
CODE:
var baked = curve.sample_baked_with_rotation(offset)
# The returned Transform2D can be set directly.
transform = baked
# You can also read the origin and rotation separately from the returned Transform2D.
position = baked.get_origin()
rotation = baked.get_rotation()

----------------------------------------

TITLE: Toggling Avoidance on NavigationAgent3D in C#
DESCRIPTION: Demonstrates how to enable/disable avoidance, set avoidance callbacks, and switch between 2D and 3D avoidance on a NavigationAgent3D using C#.

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyNavigationAgent3D : NavigationAgent3D
{
    public override void _Ready()
    {
        Rid agent = GetRid();
        // Enable avoidance
        NavigationServer3D.AgentSetAvoidanceEnabled(agent, true);
        // Create avoidance callback
        NavigationServer3D.AgentSetAvoidanceCallback(agent, Callable.From(AvoidanceDone));
        // Switch to 3D avoidance
        NavigationServer3D.AgentSetUse3DAvoidance(agent, true);

        // Disable avoidance
        NavigationServer3D.AgentSetAvoidanceEnabled(agent, false);
        //Delete avoidance callback
        NavigationServer3D.AgentSetAvoidanceCallback(agent, default);
        // Switch to 2D avoidance
        NavigationServer3D.AgentSetUse3DAvoidance(agent, false);
    }

    private void AvoidanceDone() { }
}

----------------------------------------

TITLE: Setting Automatic Language in Godot
DESCRIPTION: This snippet demonstrates how to automatically set the game's language based on the user's locale or a saved preference.

LANGUAGE: gdscript
CODE:
var language = "automatic"
# Load here language from the user settings file
if language == "automatic":
   var preferred_language = OS.get_locale_language()
   TranslationServer.set_locale(preferred_language)
else:
   TranslationServer.set_locale(language)

----------------------------------------

TITLE: Centering UI Controls with Anchors in GDScript
DESCRIPTION: Demonstrates how to programmatically center a TextureRect control in its parent container using anchor points and offset calculations based on texture size.

LANGUAGE: gdscript
CODE:
var rect = TextureRect.new()
rect.texture = load("res://icon.png")
rect.anchor_left = 0.5
rect.anchor_right = 0.5
rect.anchor_top = 0.5
rect.anchor_bottom = 0.5
var texture_size = rect.texture.get_size()
rect.offset_left = -texture_size.x / 2
rect.offset_right = texture_size.x / 2
rect.offset_top = -texture_size.y / 2
rect.offset_bottom = texture_size.y / 2
add_child(rect)

----------------------------------------

TITLE: Transform Rotation Operations
DESCRIPTION: Demonstrates different ways to rotate transforms, including direct basis manipulation and using Node3D helper methods.

LANGUAGE: gdscript
CODE:
var axis = Vector3(1, 0, 0) # Or Vector3.RIGHT
var rotation_amount = 0.1
# Rotate the transform around the X axis by 0.1 radians.
transform.basis = Basis(axis, rotation_amount) * transform.basis
# shortened
transform.basis = transform.basis.rotated(axis, rotation_amount)

LANGUAGE: csharp
CODE:
Transform3D transform = Transform;
Vector3 axis = new Vector3(1, 0, 0); // Or Vector3.Right
float rotationAmount = 0.1f;

// Rotate the transform around the X axis by 0.1 radians.
transform.Basis = new Basis(axis, rotationAmount) * transform.Basis;
// shortened
transform.Basis = transform.Basis.Rotated(axis, rotationAmount);

Transform = transform;

----------------------------------------

TITLE: Creating and Manipulating Vector4 Objects in GDScript
DESCRIPTION: Examples of creating Vector4 objects and performing basic operations.

LANGUAGE: gdscript
CODE:
print(Vector4(10, 20, 30, 40) * Vector4(3, 4, 5, 6)) # Prints (30.0, 80.0, 150.0, 240.0)

print(Vector4(10, 20, 30, 40) * 2) # Prints (20.0, 40.0, 60.0, 80.0)

print(Vector4(10, 20, 30, 40) + Vector4(3, 4, 5, 6)) # Prints (13.0, 24.0, 35.0, 46.0)

print(Vector4(10, 20, 30, 40) - Vector4(3, 4, 5, 6)) # Prints (7.0, 16.0, 25.0, 34.0)

print(Vector4(10, 20, 30, 40) / Vector4(2, 5, 3, 4)) # Prints (5.0, 4.0, 10.0, 10.0)

print(Vector4(10, 20, 30, 40) / 2) # Prints (5.0, 10.0, 15.0, 20.0)

----------------------------------------

TITLE: Querying Navigation Path in 3D GDScript
DESCRIPTION: This snippet demonstrates how to obtain a 3D navigation path using the default navigation map in GDScript. It uses NavigationServer3D to get the path between two Vector3 positions.

LANGUAGE: gdscript
CODE:
extends Node3D

# Basic query for a navigation path using the default navigation map.

func get_navigation_path(p_start_position: Vector3, p_target_position: Vector3) -> PackedVector3Array:
    if not is_inside_tree():
        return PackedVector3Array()

    var default_map_rid: RID = get_world_3d().get_navigation_map()
    var path: PackedVector3Array = NavigationServer3D.map_get_path(
        default_map_rid,
        p_start_position,
        p_target_position,
        true
    )
    return path

----------------------------------------

TITLE: Creating a VCS Diff File Dictionary
DESCRIPTION: Helper method to create a dictionary containing file diff information

LANGUAGE: GDScript
CODE:
create_diff_file(new_file: String, old_file: String) -> Dictionary

----------------------------------------

TITLE: Array Methods in C#
DESCRIPTION: Examples of using various Array methods in C#.

LANGUAGE: csharp
CODE:
Godot.Collections.Array numbers = [1, 2, 3];
Godot.Collections.Array extra = [4, 5, 6];
numbers.AddRange(extra);
GD.Print(numbers); // Prints [1, 2, 3, 4, 5, 6]

Godot.Collections.Array filtered = new Godot.Collections.Array([1, 4, 5, 8]).Filter((number) => (int)number % 2 == 0);
GD.Print(filtered); // Prints [4, 8]

Godot.Collections.Array mapped = new Godot.Collections.Array([1, 2, 3]).Map((number) => (int)number * 2);
GD.Print(mapped); // Prints [2, 4, 6]

----------------------------------------

TITLE: Implementing Loading Progress Callback for Godot Web Export
DESCRIPTION: JavaScript code demonstrating how to set up a callback function to track and display the loading progress of the Godot engine and game files.

LANGUAGE: javascript
CODE:
function printProgress(current, total) {
    console.log("Loaded " + current + " of " + total + " bytes");
}
engine.startGame({ onProgress: printProgress });

----------------------------------------

TITLE: Rotating Sprite Example with @tool
DESCRIPTION: Demonstrates a practical example of using @tool to create a rotating sprite that behaves differently in editor versus game

LANGUAGE: gdscript
CODE:
@tool
extends Sprite2D

func _process(delta):
    if Engine.is_editor_hint():
        rotation += PI * delta
    else:
        rotation -= PI * delta

LANGUAGE: csharp
CODE:
[Tool]
public partial class MySprite : Sprite2D
{
    public override void _Process(double delta)
    {
        if (Engine.IsEditorHint())
        {
            Rotation += Mathf.Pi * (float)delta;
        }
        else
        {
            Rotation -= Mathf.Pi * (float)delta;
        }
    }
}

----------------------------------------

TITLE: Creating Triangle Mesh with SurfaceTool
DESCRIPTION: Complete example of creating a triangle mesh with vertices, normals, and UV coordinates using SurfaceTool.

LANGUAGE: gdscript
CODE:
var st = SurfaceTool.new()

st.begin(Mesh.PRIMITIVE_TRIANGLES)

# Prepare attributes for add_vertex.
st.set_normal(Vector3(0, 0, 1))
st.set_uv(Vector2(0, 0))
# Call last for each vertex, adds the above attributes.
st.add_vertex(Vector3(-1, -1, 0))

st.set_normal(Vector3(0, 0, 1))
st.set_uv(Vector2(0, 1))
st.add_vertex(Vector3(-1, 1, 0))

st.set_normal(Vector3(0, 0, 1))
st.set_uv(Vector2(1, 1))
st.add_vertex(Vector3(1, 1, 0))

# Commit to a mesh.
var mesh = st.commit()

LANGUAGE: csharp
CODE:
var st = new SurfaceTool();

st.Begin(Mesh.PrimitiveType.Triangles);

// Prepare attributes for AddVertex.
st.SetNormal(new Vector3(0, 0, 1));
st.SetUV(new Vector2(0, 0));
// Call last for each vertex, adds the above attributes.
st.AddVertex(new Vector3(-1, -1, 0));

st.SetNormal(new Vector3(0, 0, 1));
st.SetUV(new Vector2(0, 1));
st.AddVertex(new Vector3(-1, 1, 0));

st.SetNormal(new Vector3(0, 0, 1));
st.SetUV(new Vector2(1, 1));
st.AddVertex(new Vector3(1, 1, 0));

// Commit to a mesh.
var mesh = st.Commit();

----------------------------------------

TITLE: Defining a Global Class in GDScript
DESCRIPTION: Demonstrates how to define a global class name for a script in GDScript using the class_name keyword.

LANGUAGE: gdscript
CODE:
class_name MyNode
extends Node

----------------------------------------

TITLE: Creating Custom NavigationMap in 2D GDScript
DESCRIPTION: Shows how to create a new NavigationMap using NavigationServer2D in GDScript. This is useful for creating separate navigation systems in 2D games.

LANGUAGE: gdscript
CODE:
extends Node2D

func _ready() -> void:
    var new_navigation_map: RID = NavigationServer2D.map_create()
    NavigationServer2D.map_set_active(new_navigation_map, true)

----------------------------------------

TITLE: Query String Generation from Dictionary in C#
DESCRIPTION: Shows how to create a URL-encoded query string from a dictionary in C#

LANGUAGE: csharp
CODE:
var fields = new Godot.Collections.Dictionary { { "username", "user" }, { "password", "pass" } };
string queryString = httpClient.QueryStringFromDict(fields);
// Returns "username=user&password=pass"

----------------------------------------

TITLE: Creating a Simple Animation in GDScript
DESCRIPTION: Creates an animation that moves an enemy node to the right by 100 pixels over 2 seconds.

LANGUAGE: gdscript
CODE:
var animation = Animation.new()
var track_index = animation.add_track(Animation.TYPE_VALUE)
animation.track_set_path(track_index, "Enemy:position:x")
animation.track_insert_key(track_index, 0.0, 0)
animation.track_insert_key(track_index, 2.0, 100)
animation.length = 2.0

----------------------------------------

TITLE: Setting Initial UI Focus in Godot
DESCRIPTION: Example of setting initial UI focus on a button node when a scene starts. This is required for keyboard/controller navigation to work properly.

LANGUAGE: gdscript
CODE:
func _ready():
    $StartButton.grab_focus()

LANGUAGE: csharp
CODE:
public override void _Ready()
{
    GetNode<Button>("StartButton").GrabFocus();
}

----------------------------------------

TITLE: Shader Flow Control
DESCRIPTION: Example showing various flow control structures available in Godot shaders including if/else, switch, and loops.

LANGUAGE: GLSL
CODE:
if (cond) {

} else if (other_cond) {

} else {

}

switch (i) {
    case -1:
        break;
    case 0:
        return;
    case 1:
    case 2:
        break;
    default:
        break;
}

for (int i = 0; i < 10; i++) {

}

while (cond) {

}

do {

} while (cond);

----------------------------------------

TITLE: Manual Quit Notification Propagation in Godot
DESCRIPTION: Demonstrates how to manually propagate quit notifications to all nodes in the scene tree before terminating the program.

LANGUAGE: gdscript
CODE:
get_tree().root.propagate_notification(NOTIFICATION_WM_CLOSE_REQUEST)

LANGUAGE: csharp
CODE:
GetTree().Root.PropagateNotification((int)NotificationWMCloseRequest);

----------------------------------------

TITLE: Using String.format() Method in GDScript
DESCRIPTION: Shows how to use the String.format() method for string formatting with dictionary and array arguments.

LANGUAGE: gdscript
CODE:
# Define a format string
var format_string = "We're waiting for {str}"

# Using the 'format' method, replace the 'str' placeholder
var actual_string = format_string.format({"str": "Godot"})

print(actual_string)
# Output: "We're waiting for Godot"

# Array example
print("Hi, {0} v{1}!".format(["Godette","3.0"]))
# Output: Hi, Godette v3.0!

----------------------------------------

TITLE: Implementing Shuffle Bags in Godot
DESCRIPTION: Demonstrates the shuffle bag pattern in Godot for more uniform random selection from an array.

LANGUAGE: gdscript
CODE:
var _fruits = ["apple", "orange", "pear", "banana"]
var _fruits_full = []

func _ready():
    _fruits_full = _fruits.duplicate()
    _fruits.shuffle()

func get_fruit():
    if _fruits.is_empty():
        _fruits = _fruits_full.duplicate()
        _fruits.shuffle()
    return _fruits.pop_front()

LANGUAGE: csharp
CODE:
private Godot.Collections.Array<string> _fruits = ["apple", "orange", "pear", "banana"];
private Godot.Collections.Array<string> _fruitsFull;

public override void _Ready()
{
    _fruitsFull = _fruits.Duplicate();
    _fruits.Shuffle();
}

public string GetFruit()
{
    if(_fruits.Count == 0)
    {
        _fruits = _fruitsFull.Duplicate();
        _fruits.Shuffle();
    }
    string randomFruit = _fruits[0];
    _fruits.RemoveAt(0);
    return randomFruit;
}

----------------------------------------

TITLE: Triangle Normal Calculation in Godot
DESCRIPTION: Shows how to calculate the surface normal of a triangle using vector operations in Godot. This is useful for 3D graphics and physics calculations.

LANGUAGE: GDScript
CODE:
func get_triangle_normal(a, b, c):
    # Find the surface normal given 3 vertices.
    var side1 = b - a
    var side2 = c - a
    var normal = side1.cross(side2)
    return normal

LANGUAGE: C#
CODE:
Vector3 GetTriangleNormal(Vector3 a, Vector3 b, Vector3 c)
{
    // Find the surface normal given 3 vertices.
    var side1 = b - a;
    var side2 = c - a;
    var normal = side1.Cross(side2);
    return normal;
}

----------------------------------------

TITLE: Feeding Custom Input Events in GDScript
DESCRIPTION: Shows how to create and feed a custom mouse input event to the game, taking into account all necessary transforms.

LANGUAGE: gdscript
CODE:
var local_pos = Vector2(10, 20) # Local to Control/Node2D.
var ie = InputEventMouseButton.new()
ie.button_index = MOUSE_BUTTON_LEFT
ie.position = get_viewport().get_screen_transform() * get_global_transform_with_canvas() * local_pos
Input.parse_input_event(ie)

----------------------------------------

TITLE: Retrieving Compute Shader Results in C#
DESCRIPTION: This snippet shows how to retrieve and print the results of a compute shader execution in C#.

LANGUAGE: csharp
CODE:
var outputBytes = rd.BufferGetData(buffer);
var output = new float[input.Length];
Buffer.BlockCopy(outputBytes, 0, output, 0, outputBytes.Length);
GD.Print("Input: ", string.Join(", ", input));
GD.Print("Output: ", string.Join(", ", output));

----------------------------------------

TITLE: Downloading Files Using JavaScriptBridge in GDScript
DESCRIPTION: Shows how to download files using the JavaScriptBridge.download_buffer method in GDScript.

LANGUAGE: gdscript
CODE:
extends Node

func _ready():
    # Asks the user download a file called "hello.txt" whose content will be the string "Hello".
    JavaScriptBridge.download_buffer("Hello".to_utf8_buffer(), "hello.txt")

LANGUAGE: gdscript
CODE:
extends Node

# Open a file for reading and download it via the JavaScript singleton.
func _download_file(path):
    var file = FileAccess.open(path, FileAccess.READ)
    if file == null:
        push_error("Failed to load file")
        return
    # Get the file name.
    var fname = path.get_file()
    # Read the whole file to memory.
    var buffer = file.get_buffer(file.get_len())
    # Prompt the user to download the file (will have the same name as the input file).
    JavaScriptBridge.download_buffer(buffer, fname)

func _ready():
    # Create a temporary file.
    var config = ConfigFile.new()
    config.set_value("option", "one", false)
    config.save("/tmp/test.cfg")

    # Download it
    _download_file("/tmp/test.cfg")

----------------------------------------

TITLE: Preparing Input Data and Creating a Storage Buffer in C#
DESCRIPTION: This snippet shows how to prepare input data as a float array and create a storage buffer for use with a compute shader in C#.

LANGUAGE: csharp
CODE:
float[] input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
var inputBytes = new byte[input.Length * sizeof(float)];
Buffer.BlockCopy(input, 0, inputBytes, 0, inputBytes.Length);

var buffer = rd.StorageBufferCreate((uint)inputBytes.Length, inputBytes);

var uniform = new RDUniform
{
    UniformType = RenderingDevice.UniformType.StorageBuffer,
    Binding = 0
};
uniform.AddId(buffer);
var uniformSet = rd.UniformSetCreate([uniform], shader, 0);

----------------------------------------

TITLE: Creating and Initializing Dictionary - C#
DESCRIPTION: Shows how to create and initialize a Dictionary in C#, demonstrating empty and populated dictionary creation.

LANGUAGE: csharp
CODE:
var myDict = new Godot.Collections.Dictionary(); // Creates an empty dictionary.
var pointsDict = new Godot.Collections.Dictionary
{
    {"White", 50},
    {"Yellow", 75},
    {"Orange", 100}
};

----------------------------------------

TITLE: Calling Method on Group Members in GDScript
DESCRIPTION: Illustrates how to call a method named 'enter_alert_mode' on all nodes in the 'guards' group when a player is spotted.

LANGUAGE: GDScript
CODE:
func _on_player_spotted():
    get_tree().call_group("guards", "enter_alert_mode")

----------------------------------------

TITLE: Adding an undo/redo action in C#
DESCRIPTION: Example of how to add an action with do/undo methods and property changes using UndoRedo in C#.

LANGUAGE: csharp
CODE:
private UndoRedo _undoRedo;

public override void _Ready()
{
    _undoRedo = new UndoRedo();
}

public void DoSomething()
{
    // Put your code here.
}

public void UndoSomething()
{
    // Put here the code that reverts what's done by "DoSomething()".
}

private void OnMyButtonPressed()
{
    var node = GetNode<Node2D>("MyNode2D");
    _undoRedo.CreateAction("Move the node");
    _undoRedo.AddDoMethod(new Callable(this, MethodName.DoSomething));
    _undoRedo.AddUndoMethod(new Callable(this, MethodName.UndoSomething));
    _undoRedo.AddDoProperty(node, "position", new Vector2(100, 100));
    _undoRedo.AddUndoProperty(node, "position", node.Position);
    _undoRedo.CommitAction();
}

----------------------------------------

TITLE: Directory Navigation Example in C#
DESCRIPTION: Shows how to iterate through files and directories in a given path using DirAccess in C#

LANGUAGE: csharp
CODE:
public void DirContents(string path)
{
    using var dir = DirAccess.Open(path);
    if (dir != null)
    {
        dir.ListDirBegin();
        string fileName = dir.GetNext();
        while (fileName != "")
        {
            if (dir.CurrentIsDir())
            {
                GD.Print($"Found directory: {fileName}");
            }
            else
            {
                GD.Print($"Found file: {fileName}");
            }
            fileName = dir.GetNext();
        }
    }
    else
    {
        GD.Print("An error occurred when trying to access the path.");
    }
}

----------------------------------------

TITLE: Creating ZIP Archive with Single File in GDScript
DESCRIPTION: Demonstrates how to create a ZIP archive containing a single text file using ZIPPacker. The example shows opening the archive, writing file content, and properly closing resources.

LANGUAGE: GDScript
CODE:
# Create a ZIP archive with a single file at its root.
func write_zip_file():
    var writer = ZIPPacker.new()
    var err = writer.open("user://archive.zip")
    if err != OK:
        return err
    writer.start_file("hello.txt")
    writer.write_file("Hello World".to_utf8_buffer())
    writer.close_file()

    writer.close()
    return OK

----------------------------------------

TITLE: Accessing Custom Theme Colors in C#
DESCRIPTION: Demonstrates how to fetch a custom theme color and override a control's font color using C#.

LANGUAGE: csharp
CODE:
Color accentColor = GetThemeColor("accent_color", "MyType");
label.AddThemeColorOverride("font_color", accentColor);

----------------------------------------

TITLE: Implementing Leaf Shader in GLSL for Godot
DESCRIPTION: This shader creates a realistic leaf effect with transparency, two-sided rendering, and wind sway animation. It uses vertex colors to control sway strength and includes subsurface scattering simulation.

LANGUAGE: glsl
CODE:
shader_type spatial;
render_mode depth_prepass_alpha, cull_disabled, world_vertex_coords;

uniform sampler2D texture_albedo : source_color;
uniform vec4 transmission : source_color;

uniform float sway_speed = 1.0;
uniform float sway_strength = 0.05;
uniform float sway_phase_len = 8.0;

void vertex() {
    float strength = COLOR.r * sway_strength;
    VERTEX.x += sin(VERTEX.x * sway_phase_len * 1.123 + TIME * sway_speed) * strength;
    VERTEX.y += sin(VERTEX.y * sway_phase_len + TIME * sway_speed * 1.12412) * strength;
    VERTEX.z += sin(VERTEX.z * sway_phase_len * 0.9123 + TIME * sway_speed * 1.3123) * strength;
}

void fragment() {
    vec4 albedo_tex = texture(texture_albedo, UV);
    ALBEDO = albedo_tex.rgb;
    ALPHA = albedo_tex.a;
    METALLIC = 0.0;
    ROUGHNESS = 1.0;
    SSS_TRANSMITTANCE_COLOR = transmission.rgba;
}

----------------------------------------

TITLE: Building Box Planes in GDScript
DESCRIPTION: Creates an array of 6 planes that define a box centered at origin with given extents

LANGUAGE: GDScript
CODE:
var extents = Vector3(1, 1, 1)
var box_planes = Geometry3D.build_box_planes(extents)

----------------------------------------

TITLE: Setting up and using AStarGrid2D in GDScript
DESCRIPTION: Example of initializing AStarGrid2D and finding a path between two points in GDScript.

LANGUAGE: gdscript
CODE:
var astar_grid = AStarGrid2D.new()
astar_grid.region = Rect2i(0, 0, 32, 32)
astar_grid.cell_size = Vector2(16, 16)
astar_grid.update()
print(astar_grid.get_id_path(Vector2i(0, 0), Vector2i(3, 4))) # Prints [(0, 0), (1, 1), (2, 2), (3, 3), (3, 4)]
print(astar_grid.get_point_path(Vector2i(0, 0), Vector2i(3, 4))) # Prints [(0, 0), (16, 16), (32, 32), (48, 48), (48, 64)]

----------------------------------------

TITLE: Creating Custom NavigationMap in 3D GDScript
DESCRIPTION: Illustrates creating a new NavigationMap using NavigationServer3D in GDScript. This is used for setting up custom navigation systems in 3D games.

LANGUAGE: gdscript
CODE:
extends Node3D

func _ready() -> void:
    var new_navigation_map: RID = NavigationServer3D.map_create()
    NavigationServer3D.map_set_active(new_navigation_map, true)

----------------------------------------

TITLE: Setting TextureRect Properties Example
DESCRIPTION: Example showing how to set basic TextureRect properties in GDScript

LANGUAGE: GDScript
CODE:
var texture_rect = TextureRect.new()
texture_rect.texture = load("res://icon.png")
texture_rect.stretch_mode = TextureRect.STRETCH_KEEP_ASPECT_CENTERED
texture_rect.expand_mode = TextureRect.EXPAND_KEEP_SIZE
texture_rect.flip_h = false
texture_rect.flip_v = false

----------------------------------------

TITLE: Creating Navigation Mesh with Bounding Outline
DESCRIPTION: Creates a new NavigationPolygon, adds a bounding outline and bakes the navigation mesh from source geometry data.

LANGUAGE: gdscript
CODE:
var new_navigation_mesh = NavigationPolygon.new()
var bounding_outline = PackedVector2Array([Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)])
new_navigation_mesh.add_outline(bounding_outline)
NavigationServer2D.bake_from_source_geometry_data(new_navigation_mesh, NavigationMeshSourceGeometryData2D.new());
$NavigationRegion2D.navigation_polygon = new_navigation_mesh

LANGUAGE: csharp
CODE:
var newNavigationMesh = new NavigationPolygon();
Vector2[] boundingOutline = [new Vector2(0, 0), new Vector2(0, 50), new Vector2(50, 50), new Vector2(50, 0)];
newNavigationMesh.AddOutline(boundingOutline);
NavigationServer2D.BakeFromSourceGeometryData(newNavigationMesh, new NavigationMeshSourceGeometryData2D());
GetNode<NavigationRegion2D>("NavigationRegion2D").NavigationPolygon = newNavigationMesh;

----------------------------------------

TITLE: Implementing Manhattan Distance in AStar3D (C#)
DESCRIPTION: Extends AStar3D to use Manhattan distance for cost and heuristic calculations in C#.

LANGUAGE: csharp
CODE:
using Godot;

[GlobalClass]
public partial class MyAStar3D : AStar3D
{
    public override float _ComputeCost(long fromId, long toId)
    {
        Vector3 fromPoint = GetPointPosition(fromId);
        Vector3 toPoint = GetPointPosition(toId);

        return Mathf.Abs(fromPoint.X - toPoint.X) + Mathf.Abs(fromPoint.Y - toPoint.Y) + Mathf.Abs(fromPoint.Z - toPoint.Z);
    }

    public override float _EstimateCost(long fromId, long toId)
    {
        Vector3 fromPoint = GetPointPosition(fromId);
        Vector3 toPoint = GetPointPosition(toId);
        return Mathf.Abs(fromPoint.X - toPoint.X) + Mathf.Abs(fromPoint.Y - toPoint.Y) + Mathf.Abs(fromPoint.Z - toPoint.Z);
    }
}

----------------------------------------

TITLE: Processing Purchases in Google Play Billing
DESCRIPTION: Handles purchase processing and query responses for completed transactions.

LANGUAGE: gdscript
CODE:
func _query_purchases():
    payment.queryPurchases("inapp") # Or "subs" for subscriptions

func _on_query_purchases_response(query_result):
    if query_result.status == OK:
        for purchase in query_result.purchases:
            _process_purchase(purchase)
    else:
        print("queryPurchases failed, response code: ",
                query_result.response_code,
                " debug message: ", query_result.debug_message)

----------------------------------------

TITLE: Printing Basic Messages in Godot
DESCRIPTION: Examples of printing different types of messages in Godot using built-in print functions.

LANGUAGE: GDScript
CODE:
print()  # Prints a standard message
print_rich()  # Prints a message with BBCode formatting
push_error()  # Prints an error message
push_warning()  # Prints a warning message

----------------------------------------

TITLE: Character Body-Centric Physical Movement in XR
DESCRIPTION: Alternative approach that keeps the character body as root node while synchronizing XR origin movement. Handles both rotation and position updates.

LANGUAGE: gdscript
CODE:
func _process_on_physical_movement(delta) -> bool:
  # Remember our current velocity, we'll apply that later
  var current_velocity = velocity

  # Start by rotating the player to face the same way our real player is
  var camera_basis: Basis = origin_node.transform.basis * camera_node.transform.basis
  var forward: Vector2 = Vector2(camera_basis.z.x, camera_basis.z.z)
  var angle: float = forward.angle_to(Vector2(0.0, 1.0))

  # Rotate our character body
  transform.basis = transform.basis.rotated(Vector3.UP, angle)

  # Reverse this rotation our origin node
  origin_node.transform = Transform3D().rotated(Vector3.UP, -angle) * origin_node.transform

  # Now apply movement, first move our player body to the right location
  var org_player_body: Vector3 = global_transform.origin
  var player_body_location: Vector3 = origin_node.transform * camera_node.transform * neck_position_node.transform.origin
  player_body_location.y = 0.0
  player_body_location = global_transform * player_body_location

  velocity = (player_body_location - org_player_body) / delta
  move_and_slide()

  # Now move our XROrigin back
  var delta_movement = global_transform.origin - org_player_body
  origin_node.global_transform.origin -= delta_movement

  # Return our value
  velocity = current_velocity

  if (player_body_location - global_transform.origin).length() > 0.01:
    return true
  else:
    return false

----------------------------------------

TITLE: Adding an undo/redo action in GDScript
DESCRIPTION: Example of how to add an action with do/undo methods and property changes using UndoRedo in GDScript.

LANGUAGE: gdscript
CODE:
var undo_redo = UndoRedo.new()

func do_something():
    pass # Put your code here.

func undo_something():
    pass # Put here the code that reverts what's done by "do_something()".

func _on_my_button_pressed():
    var node = get_node("MyNode2D")
    undo_redo.create_action("Move the node")
    undo_redo.add_do_method(do_something)
    undo_redo.add_undo_method(undo_something)
    undo_redo.add_do_property(node, "position", Vector2(100,100))
    undo_redo.add_undo_property(node, "position", node.position)
    undo_redo.commit_action()

----------------------------------------

TITLE: Setting up and using AStarGrid2D in C#
DESCRIPTION: Example of initializing AStarGrid2D and finding a path between two points in C#.

LANGUAGE: csharp
CODE:
AStarGrid2D astarGrid = new AStarGrid2D();
astarGrid.Region = new Rect2I(0, 0, 32, 32);
astarGrid.CellSize = new Vector2I(16, 16);
astarGrid.Update();
GD.Print(astarGrid.GetIdPath(Vector2I.Zero, new Vector2I(3, 4))); // Prints [(0, 0), (1, 1), (2, 2), (3, 3), (3, 4)]
GD.Print(astarGrid.GetPointPath(Vector2I.Zero, new Vector2I(3, 4))); // Prints [(0, 0), (16, 16), (32, 32), (48, 48), (48, 64)]

----------------------------------------

TITLE: Detecting Collisions with CharacterBody2D in C#
DESCRIPTION: Demonstrates how to detect collisions using MoveAndCollide() and MoveAndSlide() methods in C#.

LANGUAGE: C#
CODE:
// Using MoveAndCollide.
var collision = MoveAndCollide(Velocity * (float)delta);
if (collision != null)
{
    GD.Print("I collided with ", ((Node)collision.GetCollider()).Name);
}

// Using MoveAndSlide.
MoveAndSlide();
for (int i = 0; i < GetSlideCollisionCount(); i++)
{
    var collision = GetSlideCollision(i);
    GD.Print("I collided with ", ((Node)collision.GetCollider()).Name);
}

----------------------------------------

TITLE: Android Plugin Export Tool Script
DESCRIPTION: Tool script for configuring and exporting an Android plugin in the Godot Editor.

LANGUAGE: gdscript
CODE:
@tool
extends EditorPlugin

var export_plugin : AndroidExportPlugin

func _enter_tree():
    export_plugin = AndroidExportPlugin.new()
    add_export_plugin(export_plugin)

func _exit_tree():
    remove_export_plugin(export_plugin)
    export_plugin = null

class AndroidExportPlugin extends EditorExportPlugin:
    var _plugin_name = "<plugin_name>"

    func _supports_platform(platform):
        if platform is EditorExportPlatformAndroid:
            return true
        return false

    func _get_android_libraries(platform, debug):
        if debug:
            return PackedStringArray(["<paths_to_debug_android_plugin_aar_binaries>"])
        else:
            return PackedStringArray(["<paths_to_release_android_plugin_aar_binaries>"])

    func _get_name():
        return _plugin_name

----------------------------------------

TITLE: Implementing Quadratic Bezier Curves in Godot
DESCRIPTION: Function that calculates points along a quadratic Bezier curve using three control points. Uses linear interpolation to generate smooth curves between points.

LANGUAGE: gdscript
CODE:
func _quadratic_bezier(p0: Vector2, p1: Vector2, p2: Vector2, t: float):
    var q0 = p0.lerp(p1, t)
    var q1 = p1.lerp(p2, t)
    var r = q0.lerp(q1, t)
    return r

LANGUAGE: csharp
CODE:
private Vector2 QuadraticBezier(Vector2 p0, Vector2 p1, Vector2 p2, float t)
{
    Vector2 q0 = p0.Lerp(p1, t);
    Vector2 q1 = p1.Lerp(p2, t);
    Vector2 r = q0.Lerp(q1, t);
    return r;
}

----------------------------------------

TITLE: Timer Timeout Signal Handler in GDScript
DESCRIPTION: Example function demonstrating how to handle a Timer's timeout signal. This code prints a message when the timer expires.

LANGUAGE: GDScript
CODE:
func _on_timer_timeout():
    print("Time to attack!")

----------------------------------------

TITLE: Implementing Camera Movement Controls
DESCRIPTION: Implementation of mouse-controlled camera movement with rotation limits. Handles mouse input to rotate the camera pivot point, including vertical tilt constraints.

LANGUAGE: gdscript
CODE:
@export_range(0.0, 1.0) var mouse_sensitivity = 0.01
@export var tilt_limit = deg_to_rad(75)


func _unhandled_input(event: InputEvent) -> void:
    if event is InputEventMouseMotion:
        _camera_pivot.rotation.x -= event.relative.y * mouse_sensitivity
        # Prevent the camera from rotating too far up or down.
        _camera_pivot.rotation.x = clampf(_camera_pivot.rotation.x, -tilt_limit, tilt_limit)
        _camera_pivot.rotation.y += -event.relative.x * mouse_sensitivity

----------------------------------------

TITLE: Converting Between Local and Canvas Coordinates in GDScript
DESCRIPTION: Demonstrates how to convert between a CanvasItem's local coordinates and canvas coordinates using global transform functions.

LANGUAGE: gdscript
CODE:
# Called from a CanvasItem.
canvas_pos = get_global_transform() * local_pos
local_pos = get_global_transform().affine_inverse() * canvas_pos

----------------------------------------

TITLE: Configuring AnimatableBody3D Sync Property
DESCRIPTION: Property that controls whether the body's movement synchronizes with the physics frame. Useful for animated movement like platforms. Should not be used with move_and_collide().

LANGUAGE: GDScript
CODE:
sync_to_physics = true

----------------------------------------

TITLE: Creating Points on a Curve
DESCRIPTION: Adds a point to the curve with specified position and tangent properties. Accepts Vector2 position and optional tangent angles and modes.

LANGUAGE: GDScript
CODE:
add_point(position: Vector2, left_tangent: float = 0, right_tangent: float = 0, left_mode: TangentMode = 0, right_mode: TangentMode = 0)

----------------------------------------

TITLE: Path and File Exports
DESCRIPTION: Various examples of exporting file paths with filters

LANGUAGE: csharp
CODE:
[Export(PropertyHint.File)]
public string GameFile { get; set; }

[Export(PropertyHint.Dir)]
public string GameDirectory { get; set; }

[Export(PropertyHint.File, "*.txt,")]
public string GameFile { get; set; }

----------------------------------------

TITLE: Capturing Viewport Content in Godot
DESCRIPTION: Code snippet illustrating how to capture the content of a Viewport as an image and convert it to a texture in both GDScript and C#.

LANGUAGE: GDScript
CODE:
# Retrieve the captured Image using get_image().
var img = get_viewport().get_texture().get_image()
# Convert Image to ImageTexture.
var tex = ImageTexture.create_from_image(img)
# Set sprite texture.
sprite.texture = tex

LANGUAGE: C#
CODE:
// Retrieve the captured Image using get_image().
var img = GetViewport().GetTexture().GetImage();
// Convert Image to ImageTexture.
var tex = ImageTexture.CreateFromImage(img);
// Set sprite texture.
sprite.Texture = tex;

----------------------------------------

TITLE: Defining a Custom Data Object for Signals in C#
DESCRIPTION: Demonstrates how to create a custom data object that can be used with signals by inheriting from GodotObject.

LANGUAGE: csharp
CODE:
using Godot;

public partial class DataObject : GodotObject
{
    public string MyFirstString { get; set; }
    public string MySecondString { get; set; }
}

----------------------------------------

TITLE: Ray-Triangle Intersection in GDScript
DESCRIPTION: Tests if a ray intersects with a triangle and returns the intersection point if it exists

LANGUAGE: GDScript
CODE:
var from = Vector3(0, 0, 0)
var dir = Vector3(0, 0, 1)
var a = Vector3(-1, 0, 2)
var b = Vector3(1, 0, 2)
var c = Vector3(0, 1, 2)
var intersection = Geometry3D.ray_intersects_triangle(from, dir, a, b, c)

----------------------------------------

TITLE: Dynamic Node Creation Performance Example
DESCRIPTION: Shows how to create and configure nodes dynamically using scripts, demonstrating the performance overhead of script-based node creation compared to scene-based approaches.

LANGUAGE: gdscript
CODE:
# main.gd
extends Node

func _init():
    var child = Node.new()
    child.name = "Child"
    child.script = preload("child.gd")
    add_child(child)
    child.owner = self

LANGUAGE: csharp
CODE:
using Godot;

public partial class Main : Node
{
    public Node Child { get; set; }

    public Main()
    {
        Child = new Node();
        Child.Name = "Child";
        var childID = Child.GetInstanceId();
        Child.SetScript(GD.Load<Script>("res://Path/To/Child.cs"));
        // SetScript() causes the C# wrapper object to be disposed, so obtain a new
        // wrapper for the Child node using its instance ID before proceeding.
        Child = (Node)GodotObject.InstanceFromId(childID);
        AddChild(Child);
        Child.Owner = this;
    }
}

----------------------------------------

TITLE: Creating a Simple Triangle with SurfaceTool in C#
DESCRIPTION: Shows the equivalent C# code for creating a basic triangle mesh using SurfaceTool.

LANGUAGE: csharp
CODE:
var st = new SurfaceTool();
st.Begin(Mesh.PrimitiveType.Triangles);
st.SetColor(new Color(1, 0, 0));
st.SetUV(new Vector2(0, 0));
st.AddVertex(new Vector3(0, 0, 0));

----------------------------------------

TITLE: Creating Navigation Mesh with Manual Vertices and Polygons
DESCRIPTION: Creates a new NavigationPolygon by manually specifying vertices and polygon indices.

LANGUAGE: gdscript
CODE:
var new_navigation_mesh = NavigationPolygon.new()
var new_vertices = PackedVector2Array([Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)])
new_navigation_mesh.vertices = new_vertices
var new_polygon_indices = PackedInt32Array([0, 1, 2, 3])
new_navigation_mesh.add_polygon(new_polygon_indices)
$NavigationRegion2D.navigation_polygon = new_navigation_mesh

LANGUAGE: csharp
CODE:
var newNavigationMesh = new NavigationPolygon();
Vector2[] newVertices = [new Vector2(0, 0), new Vector2(0, 50), new Vector2(50, 50), new Vector2(50, 0)];
newNavigationMesh.Vertices = newVertices;
int[] newPolygonIndices = [0, 1, 2, 3];
newNavigationMesh.AddPolygon(newPolygonIndices);
GetNode<NavigationRegion2D>("NavigationRegion2D").NavigationPolygon = newNavigationMesh;

----------------------------------------

TITLE: Listening on a TCP Port in GDScript
DESCRIPTION: Creates a TCP server and listens on a specified port. The method returns an Error code indicating success or failure. It can bind to all addresses or a specific address.

LANGUAGE: GDScript
CODE:
Error listen(port: int, bind_address: String = "*")

----------------------------------------

TITLE: Initializing node references in C# for Godot
DESCRIPTION: Illustrates how to initialize member variables in the _Ready method in C#, as an alternative to GDScript's @onready annotation.

LANGUAGE: csharp
CODE:
private Label _myLabel;

public override void _Ready()
{
    _myLabel = GetNode<Label>("MyLabel");
}

----------------------------------------

TITLE: Processing XR Controller Interaction with Composition Layer in GDScript
DESCRIPTION: Main logic for handling XR controller interaction with a composition layer quad, including ray intersection, pointer visualization, and input event simulation.

LANGUAGE: GDScript
CODE:
func _process(_delta):
    $Pointer.visible = false

    if controller and layer_viewport:
        var controller_t : Transform3D = controller.global_transform
        var intersect : Vector2 = intersects_ray(controller_t.origin, -controller_t.basis.z)

        if intersect != NO_INTERSECTION:
            var is_pressed : bool = controller.is_button_pressed(button_action)

            var pos : Vector3 = _intersect_to_global_pos(intersect)
            $Pointer.visible = true
            $Pointer.global_position = pos

            if was_intersect != NO_INTERSECTION and intersect != was_intersect:
                var event : InputEventMouseMotion = InputEventMouseMotion.new()
                var from : Vector2 = _intersect_to_viewport_pos(was_intersect)
                var to : Vector2 = _intersect_to_viewport_pos(intersect)
                if was_pressed:
                    event.button_mask = MOUSE_BUTTON_MASK_LEFT 
                event.relative = to - from
                event.position = to
                layer_viewport.push_input(event)

            if not is_pressed and was_pressed:
                var event : InputEventMouseButton = InputEventMouseButton.new()
                event.button_index = 1
                event.pressed = false
                event.position = _intersect_to_viewport_pos(intersect)
                layer_viewport.push_input(event)
            elif is_pressed and not was_pressed:
                var event : InputEventMouseButton = InputEventMouseButton.new()
                event.button_index = 1
                event.button_mask = MOUSE_BUTTON_MASK_LEFT
                event.pressed = true
                event.position = _intersect_to_viewport_pos(intersect)
                layer_viewport.push_input(event)

            was_pressed = is_pressed
            was_intersect = intersect
        else:
            was_pressed = false
            was_intersect = NO_INTERSECTION

----------------------------------------

TITLE: Detecting Sprite2D Click - GDScript
DESCRIPTION: Example showing how to detect if a Sprite2D was clicked using _input function and local coordinates check.

LANGUAGE: gdscript
CODE:
func _input(event):
    if event is InputEventMouseButton and event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
        if get_rect().has_point(to_local(event.position)):
            print("A click!")

----------------------------------------

TITLE: Setting SubViewport Size and Stretch in Godot
DESCRIPTION: Code demonstrating how to set a custom size for a 2D SubViewport and enable stretching in both GDScript and C#.

LANGUAGE: GDScript
CODE:
sub_viewport.set_size_2d_override(Vector2i(width, height)) # Custom size for 2D.
sub_viewport.set_size_2d_override_stretch(true) # Enable stretch for custom size.

LANGUAGE: C#
CODE:
subViewport.Size2DOverride = new Vector2I(width, height); // Custom size for 2D.
subViewport.Size2DOverrideStretch = true; // Enable stretch for custom size.

----------------------------------------

TITLE: Creating and Saving a ConfigFile in GDScript
DESCRIPTION: This snippet demonstrates how to create a new ConfigFile, set values, and save it to disk.

LANGUAGE: gdscript
CODE:
# Create new ConfigFile object.
var config = ConfigFile.new()

# Store some values.
config.set_value("Player1", "player_name", "Steve")
config.set_value("Player1", "best_score", 10)
config.set_value("Player2", "player_name", "V3geta")
config.set_value("Player2", "best_score", 9001)

# Save it to a file (overwrite if already exists).
config.save("user://scores.cfg")

----------------------------------------

TITLE: Creating New C# Script Instance in Godot
DESCRIPTION: Method to create a new instance of a C# script. This is the equivalent of constructing a new instance of the script class.

LANGUAGE: C#
CODE:
Variant new(...)

----------------------------------------

TITLE: Converting Array to JSON String
DESCRIPTION: Example of converting an array to JSON string format and parsing it back, including error handling.

LANGUAGE: GDScript
CODE:
var data_to_send = ["a", "b", "c"]
var json_string = JSON.stringify(data_to_send)
# Save data
# ...
# Retrieve data
var json = JSON.new()
var error = json.parse(json_string)
if error == OK:
    var data_received = json.data
    if typeof(data_received) == TYPE_ARRAY:
        print(data_received) # Prints the array.
    else:
        print("Unexpected data")
else:
    print("JSON Parse Error: ", json.get_error_message(), " in ", json_string, " at line ", json.get_error_line())

----------------------------------------

TITLE: Basic WebSocket Client Implementation in GDScript
DESCRIPTION: Demonstrates how to create a WebSocket client that connects to a server, handles messages, and manages connection state changes.

LANGUAGE: gdscript
CODE:
extends Node

var socket = WebSocketPeer.new()

func _ready():
    socket.connect_to_url("wss://example.com")

func _process(delta):
    socket.poll()
    var state = socket.get_ready_state()
    if state == WebSocketPeer.STATE_OPEN:
        while socket.get_available_packet_count():
            print("Packet: ", socket.get_packet())
    elif state == WebSocketPeer.STATE_CLOSING:
        # Keep polling to achieve proper close.
        pass
    elif state == WebSocketPeer.STATE_CLOSED:
        var code = socket.get_close_code()
        var reason = socket.get_close_reason()
        print("WebSocket closed with code: %d, reason %s. Clean: %s" % [code, reason, code != -1])
        set_process(false) # Stop processing.

----------------------------------------

TITLE: Ghost Effect Custom RichTextEffect Implementation
DESCRIPTION: Custom RichTextEffect that creates a ghost-like fading animation effect

LANGUAGE: GDScript
CODE:
@tool
extends RichTextEffect
class_name RichTextGhost

var bbcode = "ghost"

func _process_custom_fx(char_fx):
    var speed = char_fx.env.get("freq", 5.0)
    var span = char_fx.env.get("span", 10.0)

    var alpha = sin(char_fx.elapsed_time * speed + (char_fx.range.x / span)) * 0.5 + 0.5
    char_fx.color.a = alpha
    return true

----------------------------------------

TITLE: Changing Agent Avoidance State for Different Locomotion in C#
DESCRIPTION: This method changes the avoidance agent's navigation map based on the actor's current locomotion state in C#. It ensures that the agent uses the appropriate avoidance behavior for each locomotion mode.

LANGUAGE: csharp
CODE:
private void ChangeAgentAvoidanceState()
{
    if (_actorStanding)
    {
        NavigationServer3D.AgentSetMap(_avoidanceAgentRid, _standingNavigationMapRid);
    }
    else if (_actorCrouching)
    {
        NavigationServer3D.AgentSetMap(_avoidanceAgentRid, _crouchedNavigationMapRid);
    }
    else if (_actorCrawling)
    {
        NavigationServer3D.AgentSetMap(_avoidanceAgentRid, _crawlingNavigationMapRid);
    }
}

----------------------------------------

TITLE: Checking Focus and Drawing GUI Control in C#
DESCRIPTION: Shows how to check if a control has focus and draw it accordingly in the _Draw() method using C#.

LANGUAGE: csharp
CODE:
public override void _Draw()
{
    if (HasFocus())
    {
        DrawSelected()
    }
    else
    {
        DrawNormal();
    }
}

----------------------------------------

TITLE: GetNodeOrNull Generic Method in C#
DESCRIPTION: Demonstrates safe type conversion using Godot's GetNodeOrNull<T>() method which returns null on failed casts.

LANGUAGE: csharp
CODE:
Sprite2D mySprite = GetNodeOrNull<Sprite2D>("MySprite");
// Only call SetFrame() if mySprite is not null
mySprite?.SetFrame(0);

----------------------------------------

TITLE: Enabling Movie Maker Mode via Command Line in Godot
DESCRIPTION: Demonstrates how to enable Movie Maker mode from the command line, specifying the output path, resolution, and FPS.

LANGUAGE: shell
CODE:
godot --path /path/to/your_project --write-movie output.avi --resolution 1280x720 --fixed-fps 30

----------------------------------------

TITLE: Playing Audio with Position
DESCRIPTION: Demonstrates how to play audio from a specific position in 3D space.

LANGUAGE: GDScript
CODE:
func play_sound_at_position(position: Vector3):
    var audio_player = AudioStreamPlayer3D.new()
    audio_player.stream = preload("res://explosion.wav")
    audio_player.global_transform.origin = position
    add_child(audio_player)
    audio_player.play()
    await audio_player.finished
    audio_player.queue_free()

----------------------------------------

TITLE: Getting ID Path in AStar3D (GDScript)
DESCRIPTION: Illustrates how to get the ID path between two points using AStar3D.

LANGUAGE: gdscript
CODE:
var astar = AStar3D.new()
astar.add_point(1, Vector3(0, 0, 0))
astar.add_point(2, Vector3(0, 1, 0), 1) # Default weight is 1
astar.add_point(3, Vector3(1, 1, 0))
astar.add_point(4, Vector3(2, 0, 0))

astar.connect_points(1, 2, false)
astar.connect_points(2, 3, false)
astar.connect_points(4, 3, false)
astar.connect_points(1, 4, false)

var res = astar.get_id_path(1, 3) # Returns [1, 2, 3]

----------------------------------------

TITLE: Declaring signals in C# for Godot
DESCRIPTION: Shows how to use the [Signal] attribute in C# to declare a signal, which replaces the GDScript 'signal' keyword.

LANGUAGE: csharp
CODE:
[Signal]
delegate void MySignalEventHandler(string willSendAString);

----------------------------------------

TITLE: Managing Breakpoints
DESCRIPTION: Shows how to set or clear a breakpoint at a specific line in a script file.

LANGUAGE: GDScript
CODE:
set_breakpoint("res://script.gd", 42, true)

----------------------------------------

TITLE: Transposing a Basis
DESCRIPTION: Demonstrates how to transpose a Basis, turning its columns into rows and vice versa.

LANGUAGE: gdscript
CODE:
var my_basis = Basis(
    Vector3(1, 2, 3),
    Vector3(4, 5, 6),
    Vector3(7, 8, 9)
)
my_basis = my_basis.transposed()

print(my_basis.x) # Prints (1.0, 4.0, 7.0)
print(my_basis.y) # Prints (2.0, 5.0, 8.0)
print(my_basis.z) # Prints (3.0, 6.0, 9.0)

LANGUAGE: csharp
CODE:
var myBasis = new Basis(
    new Vector3(1.0f, 2.0f, 3.0f),
    new Vector3(4.0f, 5.0f, 6.0f),
    new Vector3(7.0f, 8.0f, 9.0f)
);
myBasis = myBasis.Transposed();

GD.Print(myBasis.X); // Prints (1, 4, 7)
GD.Print(myBasis.Y); // Prints (2, 5, 8)
GD.Print(myBasis.Z); // Prints (3, 6, 9)

----------------------------------------

TITLE: Manual Vertex Transform - GLSL Spatial Shader
DESCRIPTION: Example showing how to manually transform vertex data when using skip_vertex_transform render mode

LANGUAGE: GLSL
CODE:
shader_type spatial;
render_mode skip_vertex_transform;

void vertex() {
    VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz;
    NORMAL = normalize((MODELVIEW_MATRIX * vec4(NORMAL, 0.0)).xyz);
    BINORMAL = normalize((MODELVIEW_MATRIX * vec4(BINORMAL, 0.0)).xyz);
    TANGENT = normalize((MODELVIEW_MATRIX * vec4(TANGENT, 0.0)).xyz);
}

----------------------------------------

TITLE: Type Inference in GDScript
DESCRIPTION: Demonstrates type inference in GDScript using the := operator for variables and function parameters.

LANGUAGE: GDScript
CODE:
var damage := 10.5
const MOVE_SPEED := 50.0
func sum(a := 0.0, b := 0.0) -> float:
    return a + b

----------------------------------------

TITLE: Compiling and Using RegEx Pattern
DESCRIPTION: Basic example of compiling and using a regular expression pattern to search for words followed by numbers.

LANGUAGE: GDScript
CODE:
var regex = RegEx.new()
regex.compile("\\w-(\\d+)")
var result = regex.search("abc n-0123")
if result:
    print(result.get_string()) # Would print n-0123

----------------------------------------

TITLE: Creating ImageTexture from Image in GDScript
DESCRIPTION: Demonstrates how to create an ImageTexture from an Image and assign it to a Sprite2D node. This code loads an image file, creates a texture from it, and sets it as the texture for a Sprite2D node.

LANGUAGE: GDScript
CODE:
var image = Image.load_from_file("res://icon.svg")
var texture = ImageTexture.create_from_image(image)
$Sprite2D.texture = texture

----------------------------------------

TITLE: Emitting Signals in C#
DESCRIPTION: Shows how to emit signals using the EmitSignal method. Both a signal without arguments and a signal with an argument are emitted.

LANGUAGE: csharp
CODE:
public void MyMethodEmittingSignals()
{
    EmitSignal(SignalName.MySignal);
    EmitSignal(SignalName.MySignalWithArgument, "World");
}

----------------------------------------

TITLE: Combining Translation, Rotation, and Scaling in 2D
DESCRIPTION: Demonstrates how to apply translation, rotation, and scaling to a Transform2D object in a single operation.

LANGUAGE: GDScript
CODE:
var t = Transform2D()
# Translation
t.origin = Vector2(350, 150)
# Rotation
var rot = -0.5 # The rotation to apply.
t.x.x = cos(rot)
t.y.y = cos(rot)
t.x.y = sin(rot)
t.y.x = -sin(rot)
# Scale
t.x *= 3
t.y *= 3
transform = t # Change the node's transform to what we calculated.

LANGUAGE: C#
CODE:
Transform2D t = Transform2D.Identity;
// Translation
t.Origin = new Vector2(350, 150);
// Rotation
float rot = -0.5f; // The rotation to apply.
t.X.X = t.Y.Y = Mathf.Cos(rot);
t.X.Y = t.Y.X = Mathf.Sin(rot);
t.Y.X *= -1;
// Scale
t.X *= 3;
t.Y *= 3;
Transform = t; // Change the node's transform to what we calculated.

----------------------------------------

TITLE: Creating a Basis with rotated Z axis
DESCRIPTION: Creates a Basis whose z axis points down by rotating around the X axis.

LANGUAGE: gdscript
CODE:
# Creates a Basis whose z axis points down.
var my_basis = Basis.from_euler(Vector3(TAU / 4, 0, 0))

print(my_basis.z) # Prints (0.0, -1.0, 0.0)

LANGUAGE: csharp
CODE:
// Creates a Basis whose z axis points down.
var myBasis = Basis.FromEuler(new Vector3(Mathf.Tau / 4.0f, 0.0f, 0.0f));

GD.Print(myBasis.Z); // Prints (0, -1, 0)

----------------------------------------

TITLE: Creating Procedural Navigation Obstacles
DESCRIPTION: Examples of creating navigation obstacles programmatically using NavigationServer for both 2D and 3D environments.

LANGUAGE: gdscript
CODE:
# create a new "obstacle" and place it on the default navigation map.
var new_obstacle_rid: RID = NavigationServer2D.obstacle_create()
var default_map_rid: RID = get_world_2d().get_navigation_map()

NavigationServer2D.obstacle_set_map(new_obstacle_rid, default_map_rid)
NavigationServer2D.obstacle_set_position(new_obstacle_rid, global_position)

# Use obstacle dynamic by increasing radius above zero.
NavigationServer2D.obstacle_set_radius(new_obstacle_rid, 5.0)

# Use obstacle static by adding a square that pushes agents out.
var outline = PackedVector2Array([Vector2(-100, -100), Vector2(100, -100), Vector2(100, 100), Vector2(-100, 100)])
NavigationServer2D.obstacle_set_vertices(new_obstacle_rid, outline)

# Enable the obstacle.
NavigationServer2D.obstacle_set_avoidance_enabled(new_obstacle_rid, true)

LANGUAGE: csharp
CODE:
// Create a new "obstacle" and place it on the default navigation map.
Rid newObstacleRid = NavigationServer2D.ObstacleCreate();
Rid defaultMapRid = GetWorld2D().NavigationMap;

NavigationServer2D.ObstacleSetMap(newObstacleRid, defaultMapRid);
NavigationServer2D.ObstacleSetPosition(newObstacleRid, GlobalPosition);

// Use obstacle dynamic by increasing radius above zero.
NavigationServer2D.ObstacleSetRadius(newObstacleRid, 5.0f);

// Use obstacle static by adding a square that pushes agents out.
Vector2[] outline =
[
    new Vector2(-100, -100),
    new Vector2(100, -100),
    new Vector2(100, 100),
    new Vector2(-100, 100),
];
NavigationServer2D.ObstacleSetVertices(newObstacleRid, outline);

// Enable the obstacle.
NavigationServer2D.ObstacleSetAvoidanceEnabled(newObstacleRid, true);

----------------------------------------

TITLE: Waiting for Frame Completion in Godot
DESCRIPTION: Code showing how to wait for the frame to complete before capturing the Viewport content in both GDScript and C#.

LANGUAGE: GDScript
CODE:
# Wait until the frame has finished before getting the texture.
await RenderingServer.frame_post_draw
# You can get the image after this.

LANGUAGE: C#
CODE:
// Wait until the frame has finished before getting the texture.
await RenderingServer.Singleton.ToSignal(RenderingServer.SignalName.FramePostDraw);
// You can get the image after this.

----------------------------------------

TITLE: Generating and Accessing NoiseTexture3D Data in GDScript
DESCRIPTION: This snippet demonstrates how to create a NoiseTexture3D, set its noise generator, and access the generated texture data after it has been computed.

LANGUAGE: GDScript
CODE:
var texture = NoiseTexture3D.new()
texture.noise = FastNoiseLite.new()
await texture.changed
var data = texture.get_data()

----------------------------------------

TITLE: Parsing SVG File with XMLParser in C#
DESCRIPTION: This snippet is the C# equivalent of the GDScript example, demonstrating how to use XMLParser to parse an SVG file in C#. It follows the same logic of opening a file, reading nodes, and accessing node information.

LANGUAGE: csharp
CODE:
var parser = new XmlParser();
parser.Open("path/to/file.svg");
while (parser.Read() != Error.FileEof)
{
    if (parser.GetNodeType() == XmlParser.NodeType.Element)
    {
        var nodeName = parser.GetNodeName();
        var attributesDict = new Godot.Collections.Dictionary();
        for (int idx = 0; idx < parser.GetAttributeCount(); idx++)
        {
            attributesDict[parser.GetAttributeName(idx)] = parser.GetAttributeValue(idx);
        }
        GD.Print($"The {nodeName} element has the following attributes: {attributesDict}");
    }
}

----------------------------------------

TITLE: Vector3 Normalization and Length
DESCRIPTION: Shows how to normalize a vector and calculate its length.

LANGUAGE: gdscript
CODE:
var v = Vector3(3, 4, 5)
var length = v.length()
var normalized = v.normalized()
print(length) # Outputs: 7.071068
print(normalized) # Outputs: (0.424264, 0.565685, 0.707107)
print(normalized.length()) # Outputs: 1.0

----------------------------------------

TITLE: Converting Values to Godot.Variant
DESCRIPTION: Demonstrates different methods to convert C# types to Godot.Variant using implicit conversions and explicit methods.

LANGUAGE: csharp
CODE:
int x = 42;
Variant numberVariant = x;
Variant helloVariant = "Hello, World!";

Variant numberVariant2 = Variant.CreateFrom(x);
Variant numberVariant3 = Variant.From(x);

----------------------------------------

TITLE: Changing Project Settings from GDScript
DESCRIPTION: Demonstrates how to change project settings using set_setting() method and directly modifying engine properties in GDScript.

LANGUAGE: gdscript
CODE:
ProjectSettings.set_setting("application/run/max_fps", 60)
ProjectSettings.set_setting("display/window/size/mode", DisplayServer.WINDOW_MODE_WINDOWED)

Engine.max_fps = 60
DisplayServer.window_set_mode(DisplayServer.WINDOW_MODE_WINDOWED)

----------------------------------------

TITLE: Serializing Game Object Data in Godot
DESCRIPTION: This function demonstrates how to serialize game object data into a dictionary format for saving.

LANGUAGE: GDScript
CODE:
func save():
    var save_dict = {
        "filename" : get_scene_file_path(),
        "parent" : get_parent().get_path(),
        "pos_x" : position.x, # Vector2 is not supported by JSON
        "pos_y" : position.y,
        "attack" : attack,
        "defense" : defense,
        "current_health" : current_health,
        "max_health" : max_health,
        "damage" : damage,
        "regen" : regen,
        "experience" : experience,
        "tnl" : tnl,
        "level" : level,
        "attack_growth" : attack_growth,
        "defense_growth" : defense_growth,
        "health_growth" : health_growth,
        "is_alive" : is_alive,
        "last_attack" : last_attack
    }
    return save_dict

LANGUAGE: C#
CODE:
public Godot.Collections.Dictionary<string, Variant> Save()
{
    return new Godot.Collections.Dictionary<string, Variant>()
    {
        { "Filename", SceneFilePath },
        { "Parent", GetParent().GetPath() },
        { "PosX", Position.X }, // Vector2 is not supported by JSON
        { "PosY", Position.Y },
        { "Attack", Attack },
        { "Defense", Defense },
        { "CurrentHealth", CurrentHealth },
        { "MaxHealth", MaxHealth },
        { "Damage", Damage },
        { "Regen", Regen },
        { "Experience", Experience },
        { "Tnl", Tnl },
        { "Level", Level },
        { "AttackGrowth", AttackGrowth },
        { "DefenseGrowth", DefenseGrowth },
        { "HealthGrowth", HealthGrowth },
        { "IsAlive", IsAlive },
        { "LastAttack", LastAttack }
    };
}

----------------------------------------

TITLE: Handling ItemList Selection
DESCRIPTION: Shows how to connect to the item_selected signal and retrieve selected items.

LANGUAGE: gdscript
CODE:
func _ready():
    var item_list = $ItemList
    item_list.connect("item_selected", self, "_on_item_selected")

func _on_item_selected(index):
    print("Selected item: ", item_list.get_item_text(index))
    
    # Get all selected items
    var selected_items = item_list.get_selected_items()
    print("All selected items: ", selected_items)

----------------------------------------

TITLE: Physics Ray Intersection in Godot 2D
DESCRIPTION: Method that intersects a ray against physics objects in 2D space. Returns collision details including position, normal, and collider information.

LANGUAGE: gdscript
CODE:
Dictionary intersect_ray(parameters: PhysicsRayQueryParameters2D)

----------------------------------------

TITLE: Handling Escape Key Input in GDScript
DESCRIPTION: This snippet demonstrates how to close the game when the escape key is pressed using the _unhandled_input function in GDScript.

LANGUAGE: gdscript
CODE:
func _unhandled_input(event):
    if event is InputEventKey:
        if event.pressed and event.keycode == KEY_ESCAPE:
            get_tree().quit()

----------------------------------------

TITLE: Displaying Messages in C#
DESCRIPTION: Implements a function to show temporary messages on the HUD using C#.

LANGUAGE: C#
CODE:
public void ShowMessage(string text)
{
    var message = GetNode<Label>("Message");
    message.Text = text;
    message.Show();

    GetNode<Timer>("MessageTimer").Start();
}

----------------------------------------

TITLE: Using Input Actions in C#
DESCRIPTION: This snippet shows how to use input actions to detect when the right arrow key is pressed in the _Process function in C#.

LANGUAGE: csharp
CODE:
public override void _Process(double delta)
{
    if (Input.IsActionPressed("ui_right"))
    {
        // Move right.
    }
}

----------------------------------------

TITLE: Handling Control Notifications in C#
DESCRIPTION: Shows how to handle various control notifications using the _Notification() method in C#.

LANGUAGE: csharp
CODE:
public override void _Notification(int what)
{
    switch (what)
    {
        case NotificationMouseEnter:
            // Mouse entered the area of this control.
            break;

        case NotificationMouseExit:
            // Mouse exited the area of this control.
            break;

        case NotificationFocusEnter:
            // Control gained focus.
            break;

        case NotificationFocusExit:
            // Control lost focus.
            break;

        case NotificationThemeChanged:
            // Theme used to draw the control changed;
            // update and redraw is recommended if using a theme.
            break;

        case NotificationVisibilityChanged:
            // Control became visible/invisible;
            // check new status with is_visible().
            break;

        case NotificationResized:
            // Control changed size; check new size with get_size().
            break;

        case NotificationModalClose:
            // For modal pop-ups, notification that the pop-up was closed.
            break;
    }
}

----------------------------------------

TITLE: Converting Godot.Variant to C# Types
DESCRIPTION: Demonstrates different methods to convert Godot.Variant back to C# types using explicit conversions and As methods.

LANGUAGE: csharp
CODE:
int number = (int)numberVariant;
string hello = (string)helloVariant;

int number2 = numberVariant.As<int>();
int number3 = numberVariant.AsInt32();

----------------------------------------

TITLE: Basic Screen Texture Shader in GLSL
DESCRIPTION: A simple canvas_item shader that reads from the screen texture to create an invisible object showing what's behind it.

LANGUAGE: glsl
CODE:
shader_type canvas_item;

uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_nearest;

void fragment() {
    COLOR = textureLod(screen_texture, SCREEN_UV, 0.0);
}

----------------------------------------

TITLE: Getting Point Connections in AStar2D
DESCRIPTION: Shows how to retrieve the connections of a specific point in an AStar2D graph.

LANGUAGE: gdscript
CODE:
var astar = AStar2D.new()
astar.add_point(1, Vector2(0, 0))
astar.add_point(2, Vector2(0, 1))
astar.add_point(3, Vector2(1, 1))
astar.add_point(4, Vector2(2, 0))

astar.connect_points(1, 2, true)
astar.connect_points(1, 3, true)

var neighbors = astar.get_point_connections(1) # Returns [2, 3]

LANGUAGE: csharp
CODE:
var astar = new AStar2D();
astar.AddPoint(1, new Vector2(0, 0));
astar.AddPoint(2, new Vector2(0, 1));
astar.AddPoint(3, new Vector2(1, 1));
astar.AddPoint(4, new Vector2(2, 0));

astar.ConnectPoints(1, 2, true);
astar.ConnectPoints(1, 3, true);

long[] neighbors = astar.GetPointConnections(1); // Returns [2, 3]

----------------------------------------

TITLE: Extending Mesh Vertices with MeshDataTool in GDScript
DESCRIPTION: Example showing how to modify mesh vertices by extending them along their normals using MeshDataTool.

LANGUAGE: gdscript
CODE:
var mesh = ArrayMesh.new()
mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, BoxMesh.new().get_mesh_arrays())
var mdt = MeshDataTool.new()
mdt.create_from_surface(mesh, 0)
for i in range(mdt.get_vertex_count()):
    var vertex = mdt.get_vertex(i)
    vertex += mdt.get_vertex_normal(i)
    mdt.set_vertex(i, vertex)
mesh.clear_surfaces()
mdt.commit_to_surface(mesh)
var mi = MeshInstance.new()
mi.mesh = mesh
add_child(mi)

----------------------------------------

TITLE: Changing Scenes in Godot using PackedScene
DESCRIPTION: Demonstrates scene changing using preloaded PackedScene resources with the change_scene_to_packed method.

LANGUAGE: gdscript
CODE:
var next_scene = preload("res://levels/level2.tscn")

func _my_level_was_completed():
    get_tree().change_scene_to_packed(next_scene)

LANGUAGE: csharp
CODE:
public void _MyLevelWasCompleted()
{
    var nextScene = (PackedScene)ResourceLoader.Load("res://levels/level2.tscn");
    GetTree().ChangeSceneToPacked(nextScene);
}

----------------------------------------

TITLE: Using Translation Contexts in Godot
DESCRIPTION: This snippet demonstrates how to use translation contexts to resolve ambiguities when the same string needs different translations based on context.

LANGUAGE: gdscript
CODE:
# "Close", as in an action (to close something).
button.set_text(tr("Close", "Actions"))

# "Close", as in a distance (opposite of "far").
distance_label.set_text(tr("Close", "Distance"))

----------------------------------------

TITLE: Creating a WebRTC Data Channel
DESCRIPTION: Creates a new WebRTCDataChannel with custom options for reliability and ordering.

LANGUAGE: gdscript
CODE:
var options = {
    "negotiated": true,
    "id": 1,
    "maxRetransmits": 1,
    "ordered": true,
    "protocol": "my-custom-protocol"
}

var channel = peer.create_data_channel("channelLabel", options)

----------------------------------------

TITLE: Polygon Translation in GDScript
DESCRIPTION: Demonstrates how to translate a polygon's vertices using a Transform2D.

LANGUAGE: gdscript
CODE:
var polygon = PackedVector2Array([Vector2(0, 0), Vector2(100, 0), Vector2(100, 100), Vector2(0, 100)])
var offset = Vector2(50, 50)
polygon = Transform2D(0, offset) * polygon
print(polygon) # Prints [(50.0, 50.0), (150.0, 50.0), (150.0, 150.0), (50.0, 150.0)]

----------------------------------------

TITLE: Loading and Saving 3D Scenes with glTF in Godot
DESCRIPTION: Shows how to load a glTF scene file, append it to the current scene, and save a glTF scene to a file.

LANGUAGE: gdscript
CODE:
var gltf_document_load = GLTFDocument.new()
var gltf_state_load = GLTFState.new()
var error = gltf_document_load.append_from_file("/path/to/file.gltf", gltf_state_load)
if error == OK:
    var gltf_scene_root_node = gltf_document_load.generate_scene(gltf_state_load)
    add_child(gltf_scene_root_node)
else:
    show_error("Couldn't load glTF scene (error code: %s)." % error_string(error))

var gltf_document_save := GLTFDocument.new()
var gltf_state_save := GLTFState.new()
gltf_document_save.append_from_scene(gltf_scene_root_node, gltf_state_save)
gltf_document_save.write_to_filesystem(gltf_state_save, path)

LANGUAGE: csharp
CODE:
var gltfDocumentLoad = new GltfDocument();
var gltfStateLoad = new GltfState();
var error = gltfDocumentLoad.AppendFromFile("/Path/To/File.gltf", gltfStateLoad);
if (error == Error.Ok)
{
    var gltfSceneRootNode = gltfDocumentLoad.GenerateScene(gltfStateLoad);
    AddChild(gltfSceneRootNode);
}
else
{
    GD.PrintErr($"Couldn't load glTF scene (error code: {error})");
}

var gltfDocumentSave = new GltfDocument();
var gltfStateSave = new GltfState();
gltfDocumentSave.AppendFromScene(gltfSceneRootNode, gltfStateSave);
gltfDocumentSave.WriteToFilesystem(gltfStateSave, path);

----------------------------------------

TITLE: Setting Project Locale
DESCRIPTION: Sets the current locale for the project. The locale string will be standardized to match known formats.

LANGUAGE: GDScript
CODE:
TranslationServer.set_locale("en_US")

----------------------------------------

TITLE: Accepting TLS Stream Connection
DESCRIPTION: Accepts a peer connection as a server using provided TLS server options. Requires a base StreamPeer and TLSOptions configuration.

LANGUAGE: GDScript
CODE:
accept_stream(stream: StreamPeer, server_options: TLSOptions) -> Error

----------------------------------------

TITLE: Loading MP3 File at Runtime - GDScript
DESCRIPTION: Function to load an MP3 file into memory and create an AudioStreamMP3 instance. The entire file is loaded into memory, so use with caution for large files.

LANGUAGE: gdscript
CODE:
func load_mp3(path):
    var file = FileAccess.open(path, FileAccess.READ)
    var sound = AudioStreamMP3.new()
    sound.data = file.get_buffer(file.get_length())
    return sound

----------------------------------------

TITLE: Basic GDScript Documentation Structure
DESCRIPTION: Shows the basic structure and tags for documenting a GDScript file including script description, tutorials, and experimental tags.

LANGUAGE: gdscript
CODE:
extends Node2D
## A brief description of the class's role and functionality.
##
## The description of the script, what it can do,
## and any further detail.
##
## @tutorial:             https://example.com/tutorial_1
## @tutorial(Tutorial 2): https://example.com/tutorial_2
## @experimental

----------------------------------------

TITLE: Creating Basic POT Template
DESCRIPTION: Example structure of a basic POT (gettext template) file showing different types of localizable strings including regular strings, pluralization, and context-specific translations.

LANGUAGE: gettext
CODE:
# Don't remove the two lines below, they're required for gettext to work correctly.
msgid ""
msgstr ""

# Example of a regular string.
msgid "Hello world!"
msgstr ""

# Example of a string with pluralization.
msgid "There is %d apple."
msgid_plural "There are %d apples."
msgstr[0] ""
msgstr[1] ""

# Example of a string with a translation context.
msgctxt "Actions"
msgid "Close"
msgstr ""

----------------------------------------

TITLE: Basic Global Class Declaration in C#
DESCRIPTION: Demonstrates how to create a basic global class by using the [GlobalClass] attribute. The class name must match the file name in a case-sensitive manner.

LANGUAGE: csharp
CODE:
using Godot;

[GlobalClass]
public partial class MyNode : Node
{
}

----------------------------------------

TITLE: Implementing Timer-Based Operations
DESCRIPTION: Shows how to set up recurring operations using a Timer node instead of per-frame processing. The example creates a timer that triggers every 0.5 seconds.

LANGUAGE: gdscript
CODE:
func _ready():
    var timer = Timer.new()
    timer.autostart = true
    timer.wait_time = 0.5
    add_child(timer)
    timer.timeout.connect(func():
        print("This block runs every 0.5 seconds")
    )

LANGUAGE: csharp
CODE:
public override void _Ready()
{
    var timer = new Timer();
    timer.Autostart = true;
    timer.WaitTime = 0.5;
    AddChild(timer);
    timer.Timeout += () => GD.Print("This block runs every 0.5 seconds");
}

----------------------------------------

TITLE: Adding Points and Connecting Them in AStar2D
DESCRIPTION: Demonstrates how to add points to an AStar2D graph and connect them with weighted edges.

LANGUAGE: gdscript
CODE:
var astar = AStar2D.new()
astar.add_point(1, Vector2(1, 0), 4) # Adds the point (1, 0) with weight_scale 4 and id 1
astar.add_point(2, Vector2(0, 5))
astar.connect_points(1, 2, false)

LANGUAGE: csharp
CODE:
var astar = new AStar2D();
astar.AddPoint(1, new Vector2(1, 0), 4); // Adds the point (1, 0) with weight_scale 4 and id 1
astar.AddPoint(2, new Vector2(0, 5));
astar.ConnectPoints(1, 2, false);

----------------------------------------

TITLE: Closing a Specific Port with UPnP in GDScript
DESCRIPTION: This snippet shows how to close a previously opened port using the UPNP class.

LANGUAGE: GDScript
CODE:
upnp.delete_port_mapping(port)

----------------------------------------

TITLE: Connecting Points in AStar3D (GDScript)
DESCRIPTION: Illustrates how to connect points in an AStar3D instance.

LANGUAGE: gdscript
CODE:
var astar = AStar3D.new()
astar.add_point(1, Vector3(1, 1, 0))
astar.add_point(2, Vector3(0, 5, 0))
astar.connect_points(1, 2, false)

----------------------------------------

TITLE: Positioning GUI Elements Over 3D Viewport
DESCRIPTION: This code demonstrates how to position GUI elements over a 3D viewport using unproject_position() and is_position_behind() methods.

LANGUAGE: GDScript
CODE:
# This code block is part of a script that inherits from Node3D.
# `control` is a reference to a node inheriting from Control.
control.visible = not get_viewport().get_camera_3d().is_position_behind(global_transform.origin)
control.position = get_viewport().get_camera_3d().unproject_position(global_transform.origin)

----------------------------------------

TITLE: Creating and Connecting a Button in C#
DESCRIPTION: Example showing how to create a new Button instance, set its text, and connect a pressed signal handler in C#

LANGUAGE: csharp
CODE:
public override void _Ready()
{
    var button = new Button();
    button.Text = "Click me";
    button.Pressed += ButtonPressed;
    AddChild(button);
}

private void ButtonPressed()
{
    GD.Print("Hello world!");
}

----------------------------------------

TITLE: Demonstrating Component-wise Vector Operations in GLSL
DESCRIPTION: Shows examples of how component-wise operations work on vectors in GLSL shaders. Many functions perform the described operation on each component of the vector/matrix independently.

LANGUAGE: GLSL
CODE:
sqrt(vec2(4, 64))                 // vec2(sqrt(4), sqrt(64))
min(vec2(3, 4), 1)                // vec2(min(3, 1), min(4, 1))
min(vec3(1, 2, 3),vec3(5, 1, 3))  // vec3(min(1, 5), min(2, 1), min(3, 3))
pow(vec3(3, 8, 5 ), 2)            // vec3(pow(3, 2), pow(8, 2), pow(5, 2))
pow(vec3(3, 8, 5), vec3(1, 2, 4)) // vec3(pow(3, 1), pow(8, 2), pow(5, 4))

----------------------------------------

TITLE: Tinting a Sprite Texture Blue
DESCRIPTION: Shows how to modify the blue channel of a sprite's texture in the fragment shader.

LANGUAGE: GLSL
CODE:
void fragment(){
  COLOR = texture(TEXTURE, UV); // Read from texture again.
  COLOR.b = 1.0; //set blue channel to 1.0
}

----------------------------------------

TITLE: Setting Node Process Mode
DESCRIPTION: Code demonstrating how to set a node's process mode programmatically in the _ready function.

LANGUAGE: gdscript
CODE:
func _ready():
    process_mode = Node.PROCESS_MODE_PAUSABLE

LANGUAGE: csharp
CODE:
public override void _Ready()
{
    ProcessMode = Node.ProcessModeEnum.Pausable;
}

----------------------------------------

TITLE: Planet Color and Ocean Generation - GLSL
DESCRIPTION: Final shader implementation including color gradients and ocean reflections.

LANGUAGE: glsl
CODE:
COLOR.xyz = mix(vec3(0.05, 0.3, 0.5), vec3(0.9, 0.4, 0.1), smoothstep(-0.1, 0.0, n));
COLOR.a = 0.3 + 0.7 * smoothstep(-0.1, 0.0, n);

----------------------------------------

TITLE: Running a GDScript file from command line
DESCRIPTION: Example of a GDScript file that can be executed directly from the command line, and the command to run it.

LANGUAGE: python
CODE:
#!/usr/bin/env -S godot -s
extends SceneTree

func _init():
    print("Hello!")
    quit()

LANGUAGE: shell
CODE:
godot -s sayhello.gd

----------------------------------------

TITLE: Creating and Configuring a Static Body
DESCRIPTION: Example of creating a static physics body, adding shapes to it and configuring basic properties.

LANGUAGE: gdscript
CODE:
var body = PhysicsServer2D.body_create()
PhysicsServer2D.body_set_mode(body, PhysicsServer2D.BODY_MODE_STATIC)

# Create and add a rectangle shape
var shape = PhysicsServer2D.rectangle_shape_create()
PhysicsServer2D.shape_set_data(shape, Vector2(10, 10)) # Set half-extents
PhysicsServer2D.body_add_shape(body, shape)

# Set transform
PhysicsServer2D.body_set_state(body, PhysicsServer2D.BODY_STATE_TRANSFORM, Transform2D(0, Vector2(100, 100)))

----------------------------------------

TITLE: GDExtension Project Structure Example
DESCRIPTION: Shows the typical directory structure for a GDExtension C++ project including source, bindings, and demo folders.

LANGUAGE: none
CODE:
gdextension_cpp_example/  # GDExtension directory
|
+--demo/                  # game example/demo to test the extension
|   |
|   +--main.tscn
|   |
|   +--bin/
|       |
|       +--gdexample.gdextension
|
+--godot-cpp/             # C++ bindings
|
+--src/                   # source code of the extension we are building
|   |
|   +--register_types.cpp
|   +--register_types.h
|   +--gdexample.cpp
|   +--gdexample.h

----------------------------------------

TITLE: Processing Multiple RegEx Matches
DESCRIPTION: Shows how to use search_all() to process multiple regex matches in a string using a for loop.

LANGUAGE: GDScript
CODE:
for result in regex.search_all("d01, d03, d0c, x3f and x42"):
    print(result.get_string("digit"))
# Would print 01 03 0 3f 42

----------------------------------------

TITLE: Connecting Meta Click Handler
DESCRIPTION: Example code showing how to connect a function to handle meta tag clicks in a RichTextLabel

LANGUAGE: gdscript
CODE:
# This assumes RichTextLabel's `meta_clicked` signal was connected to
# the function below using the signal connection dialog.
func _richtextlabel_on_meta_clicked(meta):
    # `meta` is of Variant type, so convert it to a String to avoid script errors at run-time.
    OS.shell_open(str(meta))

----------------------------------------

TITLE: Demonstrating Naming Conventions in C#
DESCRIPTION: Shows the proper naming conventions for various C# constructs, including namespaces, classes, methods, properties, and variables.

LANGUAGE: C#
CODE:
namespace ExampleProject
{
    public class PlayerCharacter
    {
        public const float DefaultSpeed = 10f;

        public float CurrentSpeed { get; set; }

        protected int HitPoints;

        private void CalculateWeaponDamage()
        {
        }
    }
}

private Vector3 _aimingAt; // Use a `_` prefix for private fields.

private void Attack(float attackStrength)
{
    Enemy targetFound = FindTarget(_aimingAt);

    targetFound?.Hit(attackStrength);
}

public string Id { get; }

public UIManager UI
{
    get { return uiManager; }
}

----------------------------------------

TITLE: Vector Addition Example in GDScript
DESCRIPTION: Shows how to add two Vector2 objects component-wise

LANGUAGE: gdscript
CODE:
print(Vector2(10, 20) + Vector2(3, 4)) # Prints (13.0, 24.0)

----------------------------------------

TITLE: Unlocking a Mutex in GDScript
DESCRIPTION: Unlocks the Mutex, making it available to other threads. If a thread called lock() or try_lock() multiple times, it must call unlock() the same number of times to fully release the mutex.

LANGUAGE: GDScript
CODE:
mutex.unlock()

----------------------------------------

TITLE: Dot Product and Direction Detection in Godot
DESCRIPTION: Shows how to use the dot product to detect if an object is facing another object in Godot. This is useful for implementing field of view or directional detection in games.

LANGUAGE: GDScript
CODE:
var AP = A.direction_to(P)
if AP.dot(fA) > 0:
    print("A sees P!")

LANGUAGE: C#
CODE:
var AP = A.DirectionTo(P);
if (AP.Dot(fA) > 0)
{
    GD.Print("A sees P!");
}

----------------------------------------

TITLE: Close Button Handler
DESCRIPTION: Event handler for the close button that hides the pause menu and unpauses the game.

LANGUAGE: gdscript
CODE:
func _on_close_button_pressed():
    hide()
    get_tree().paused = false

LANGUAGE: csharp
CODE:
private void OnCloseButtonPressed()
{
    Hide();
    GetTree().Paused = false;
}

----------------------------------------

TITLE: Get Animation Remaining Time
DESCRIPTION: Static method that calculates remaining animation time from node info. For looping animations, returns remaining time only if break_loop is true.

LANGUAGE: GDScript
CODE:
float get_remaining_time(node_info: PackedFloat32Array, break_loop: bool)

----------------------------------------

TITLE: Attempting to Lock a Mutex in GDScript
DESCRIPTION: Tries to lock the Mutex without blocking. Returns true on success, false otherwise. This function returns true if the thread already has ownership of the mutex.

LANGUAGE: GDScript
CODE:
var success = mutex.try_lock()

----------------------------------------

TITLE: Initializing Google Play Billing Plugin in Godot
DESCRIPTION: Sets up the GodotGooglePlayBilling singleton and connects all available signals for handling billing events.

LANGUAGE: gdscript
CODE:
var payment

func _ready():
    if Engine.has_singleton("GodotGooglePlayBilling"):
        payment = Engine.get_singleton("GodotGooglePlayBilling")

        # These are all signals supported by the API
        payment.billing_resume.connect(_on_billing_resume)
        payment.connected.connect(_on_connected)
        payment.disconnected.connect(_on_disconnected)
        payment.connect_error.connect(_on_connect_error)
        payment.price_change_acknowledged.connect(_on_price_acknowledged)
        payment.purchases_updated.connect(_on_purchases_updated)
        payment.purchase_error.connect(_on_purchase_error)
        payment.sku_details_query_completed.connect(_on_product_details_query_completed)
        payment.sku_details_query_error.connect(_on_product_details_query_error)
        payment.purchase_acknowledged.connect(_on_purchase_acknowledged)
        payment.purchase_acknowledgement_error.connect(_on_purchase_acknowledgement_error)
        payment.purchase_consumed.connect(_on_purchase_consumed)
        payment.purchase_consumption_error.connect(_on_purchase_consumption_error)
        payment.query_purchases_response.connect(_on_query_purchases_response)

        payment.startConnection()
    else:
        print("Android IAP support is not enabled. Make sure you have enabled 'Gradle Build' and the GodotGooglePlayBilling plugin in your Android export settings! IAP will not work.")

----------------------------------------

TITLE: Dynamic Velocity Animation
DESCRIPTION: Creates unique swimming speeds for each fish using cosine function and time

LANGUAGE: glsl
CODE:
VELOCITY.z = cos(TIME + CUSTOM.x * 6.28) * 4.0 + 6.0;

----------------------------------------

TITLE: Setting SpotLight3D Parameters - GDScript
DESCRIPTION: Examples of setting spotlight parameters like angle, range and attenuation.

LANGUAGE: gdscript
CODE:
# Set spotlight angle to 60 degrees
spotlight.spot_angle = 60.0

# Set spotlight range to 10 units
spotlight.spot_range = 10.0

# Set physically accurate attenuation
spotlight.spot_attenuation = 2.0

# Adjust angular attenuation
spotlight.spot_angle_attenuation = 1.0

----------------------------------------

TITLE: Creating a Local RenderingDevice
DESCRIPTION: Creates a secondary rendering device for performing GPU operations independently from the rest of the engine.

LANGUAGE: gdscript
CODE:
var rd = RenderingServer.create_local_rendering_device()

----------------------------------------

TITLE: Finding Closest Position in Segment (C#)
DESCRIPTION: Shows how to find the closest position in a segment using AStar3D in C#.

LANGUAGE: csharp
CODE:
var astar = new AStar3D();
astar.AddPoint(1, new Vector3(0, 0, 0));
astar.AddPoint(2, new Vector3(0, 5, 0));
astar.ConnectPoints(1, 2);
Vector3 res = astar.GetClosestPositionInSegment(new Vector3(3, 3, 0)); // Returns (0, 3, 0)

----------------------------------------

TITLE: Using Compute Shaders with RenderingDevice
DESCRIPTION: Shows how to set up and dispatch a compute shader using RenderingDevice.

LANGUAGE: gdscript
CODE:
var rd = RenderingDevice.new()
var compute_list = rd.compute_list_begin()

rd.compute_list_bind_compute_pipeline(compute_list, compute_shader_dilate_pipeline)
rd.compute_list_bind_uniform_set(compute_list, compute_base_uniform_set, 0)
rd.compute_list_bind_uniform_set(compute_list, dilate_uniform_set, 1)

for i in atlas_slices:
    rd.compute_list_set_push_constant(compute_list, push_constant, push_constant.size())
    rd.compute_list_dispatch(compute_list, group_size.x, group_size.y, group_size.z)
    # No barrier, let them run all together.

rd.compute_list_end()

----------------------------------------

TITLE: Parsing Command-Line Arguments in GDScript
DESCRIPTION: Parses command-line arguments into a Dictionary using the --key=value form for arguments.

LANGUAGE: gdscript
CODE:
var arguments = {}
for argument in OS.get_cmdline_args():
    if argument.contains("="):
        var key_value = argument.split("=")
        arguments[key_value[0].trim_prefix("--")] = key_value[1]
    else:
        # Options without an argument will be present in the dictionary,
        # with the value set to an empty string.
        arguments[argument.trim_prefix("--")] = ""

----------------------------------------

TITLE: Configuring Stretch Aspect at Runtime
DESCRIPTION: Sets the content scale aspect of the root viewport to control how the aspect ratio is handled when stretching.

LANGUAGE: GDScript
CODE:
get_tree().root.content_scale_aspect = Window.CONTENT_SCALE_ASPECT_KEEP

----------------------------------------

TITLE: Accessing Time Information in AnimationNode
DESCRIPTION: Shows how to access current length, position, and delta time for an AnimationNode in an AnimationTree.

LANGUAGE: gdscript
CODE:
var current_length = $AnimationTree[parameters/AnimationNodeName/current_length]
var current_position = $AnimationTree[parameters/AnimationNodeName/current_position]
var current_delta = $AnimationTree[parameters/AnimationNodeName/current_delta]

----------------------------------------

TITLE: DirectionalLight3D Shadow Mode Enumeration
DESCRIPTION: Defines the available shadow rendering modes for directional lights including orthogonal and parallel split options.

LANGUAGE: gdscript
CODE:
enum ShadowMode {
    SHADOW_ORTHOGONAL = 0,
    SHADOW_PARALLEL_2_SPLITS = 1,
    SHADOW_PARALLEL_4_SPLITS = 2
}

----------------------------------------

TITLE: Complete ArrayMesh Setup - GDScript
DESCRIPTION: Full implementation of ArrayMesh setup including surface creation in GDScript

LANGUAGE: gdscript
CODE:
extends MeshInstance3D

func _ready():
    var surface_array = []
    surface_array.resize(Mesh.ARRAY_MAX)

    var verts = PackedVector3Array()
    var uvs = PackedVector2Array()
    var normals = PackedVector3Array()
    var indices = PackedInt32Array()

    surface_array[Mesh.ARRAY_VERTEX] = verts
    surface_array[Mesh.ARRAY_TEX_UV] = uvs
    surface_array[Mesh.ARRAY_NORMAL] = normals
    surface_array[Mesh.ARRAY_INDEX] = indices

    mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, surface_array)

----------------------------------------

TITLE: Basic Define and Sample Usage in GLSL
DESCRIPTION: Demonstrates the use of #define with concatenation operator for texture sampling

LANGUAGE: GLSL
CODE:
uniform sampler2D material0;

#define SAMPLE(N) vec4 tex##N = texture(material##N, UV)

void fragment() {
    SAMPLE(0);
    ALBEDO = tex0.rgb;
}

----------------------------------------

TITLE: Instantiating Loaded Scene on Button Press in C#
DESCRIPTION: This snippet shows how to retrieve the loaded scene resource and instantiate it when a button is pressed in C#.

LANGUAGE: csharp
CODE:
private void OnButtonPressed() // Button was pressed.
{
    // Obtain the resource now that we need it.
    var enemyScene = (PackedScene)ResourceLoader.LoadThreadedGet(EnemyScenePath);
    // Instantiate the enemy scene and add it to the current scene.
    var enemy = enemyScene.Instantiate();
    AddChild(enemy);
}

----------------------------------------

TITLE: BoxContainer Property Declaration
DESCRIPTION: Declaration of the core properties for the BoxContainer class including alignment and vertical orientation.

LANGUAGE: GDScript
CODE:
alignment: AlignmentMode = 0
vertical: bool = false

----------------------------------------

TITLE: Binding Values to Signals in C#
DESCRIPTION: Illustrates how to bind values to signals when establishing connections. This example connects two buttons to the same method but with different modifiers.

LANGUAGE: csharp
CODE:
public int Value { get; private set; } = 1;

public override void _Ready()
{
    Button plusButton = GetNode<Button>("PlusButton");
    plusButton.Pressed += () => ModifyValue(1);

    Button minusButton = GetNode<Button>("MinusButton");
    minusButton.Pressed += () => ModifyValue(-1);
}

private void ModifyValue(int modifier)
{
    Value += modifier;
}

----------------------------------------

TITLE: GDScript for Creating Large Triangle Mesh in Godot
DESCRIPTION: This GDScript code creates a large triangle mesh using ArrayMesh for optimized full-screen post-processing effects.

LANGUAGE: gdscript
CODE:
extends MeshInstance3D

func _ready():
  # Create a single triangle out of vertices:
  var verts = PackedVector3Array()
  verts.append(Vector3(-1.0, -1.0, 0.0))
  verts.append(Vector3(-1.0, 3.0, 0.0))
  verts.append(Vector3(3.0, -1.0, 0.0))

  # Create an array of arrays.
  # This could contain normals, colors, UVs, etc.
  var mesh_array = []
  mesh_array.resize(Mesh.ARRAY_MAX) #required size for ArrayMesh Array
  mesh_array[Mesh.ARRAY_VERTEX] = verts #position of vertex array in ArrayMesh Array

  # Create mesh from mesh_array:
  mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, mesh_array)

----------------------------------------

TITLE: Creating/Retrieving Cached Uniform Set in GDScript
DESCRIPTION: This method creates or returns a cached uniform set based on the provided uniforms for a given shader. It takes a shader RID, set index, and an array of RDUniform objects as parameters and returns an RID.

LANGUAGE: GDScript
CODE:
static func get_cache(shader: RID, set: int, uniforms: Array[RDUniform]) -> RID:

----------------------------------------

TITLE: Creating ArrayMesh from CylinderMesh in GDScript
DESCRIPTION: Demonstrates how to create an ArrayMesh from a CylinderMesh using the get_mesh_arrays() method.

LANGUAGE: gdscript
CODE:
var c = CylinderMesh.new()
var arr_mesh = ArrayMesh.new()
arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, c.get_mesh_arrays())

----------------------------------------

TITLE: Adding Jump Arc to Player Animation
DESCRIPTION: This code adds a jumping arc to the player's animation by rotating the Pivot node based on the vertical velocity.

LANGUAGE: GDScript
CODE:
func _physics_process(delta):
    #...
    $Pivot.rotation.x = PI / 6 * velocity.y / jump_impulse

LANGUAGE: C#
CODE:
public override void _PhysicsProcess(double delta)
{
    // ...
    var pivot = GetNode<Node3D>("Pivot");
    pivot.Rotation = new Vector3(Mathf.Pi / 6.0f * Velocity.Y / JumpImpulse, pivot.Rotation.Y, pivot.Rotation.Z);
}

----------------------------------------

TITLE: Generating Sine Wave Audio with AudioStreamGenerator in C#
DESCRIPTION: Shows the C# implementation of sine wave generation using AudioStreamGenerator, demonstrating proper type handling and buffer management in a strongly-typed context.

LANGUAGE: csharp
CODE:
[Export] public AudioStreamPlayer Player { get; set; }

private AudioStreamGeneratorPlayback _playback; // Will hold the AudioStreamGeneratorPlayback.
private float _sampleHz;
private float _pulseHz = 440.0f; // The frequency of the sound wave.
private double phase = 0.0;

public override void _Ready()
{
    if (Player.Stream is AudioStreamGenerator generator) // Type as a generator to access MixRate.
    {
        _sampleHz = generator.MixRate;
        Player.Play();
        _playback = (AudioStreamGeneratorPlayback)Player.GetStreamPlayback();
        FillBuffer();
    }
}

public void FillBuffer()
{
    float increment = _pulseHz / _sampleHz;
    int framesAvailable = _playback.GetFramesAvailable();

    for (int i = 0; i < framesAvailable; i++)
    {
        _playback.PushFrame(Vector2.One * (float)Mathf.Sin(phase * Mathf.Tau));
        phase = Mathf.PosMod(phase + increment, 1.0);
    }
}

----------------------------------------

TITLE: Checking if an Action is Pressed
DESCRIPTION: This method checks if the input event represents a pressed action. It can optionally allow echo events for key presses and ignore additional modifiers or directional input.

LANGUAGE: gdscript
CODE:
is_action_pressed(action: StringName, allow_echo: bool = false, exact_match: bool = false) -> bool

----------------------------------------

TITLE: Accessing Configuration Directory in Godot Editor
DESCRIPTION: Returns the absolute path to the user's configuration folder for persistent user configuration files in the Godot editor. The path varies by operating system.

LANGUAGE: text
CODE:
- Windows: %APPDATA%\Godot\                    (same as `get_data_dir()`)
- macOS: ~/Library/Application Support/Godot/  (same as `get_data_dir()`)
- Linux: ~/.config/godot/

----------------------------------------

TITLE: Creating a Local RenderingDevice in C#
DESCRIPTION: This snippet shows how to create a local RenderingDevice and load a compute shader file in C#.

LANGUAGE: csharp
CODE:
var rd = RenderingServer.CreateLocalRenderingDevice();

var shaderFile = GD.Load<RDShaderFile>("res://compute_example.glsl");
var shaderBytecode = shaderFile.GetSpirV();
var shader = rd.ShaderCreateFromSpirV(shaderBytecode);

----------------------------------------

TITLE: ScriptNameCasing Enumeration Definition
DESCRIPTION: Defines an enumeration for different script naming conventions including auto, pascal case, snake case, and kebab case.

LANGUAGE: RST
CODE:
enum **ScriptNameCasing**:
    SCRIPT_NAME_CASING_AUTO = 0
    SCRIPT_NAME_CASING_PASCAL_CASE = 1
    SCRIPT_NAME_CASING_SNAKE_CASE = 2
    SCRIPT_NAME_CASING_KEBAB_CASE = 3

----------------------------------------

TITLE: Tangent Mode Enumeration
DESCRIPTION: Defines available tangent modes for curve points - free (user-defined) or linear (auto-calculated).

LANGUAGE: GDScript
CODE:
enum TangentMode {
    TANGENT_FREE = 0,
    TANGENT_LINEAR = 1,
    TANGENT_MODE_COUNT = 2
}

----------------------------------------

TITLE: Cross Product Calculation in Godot
DESCRIPTION: Demonstrates how to calculate the cross product of two vectors in Godot. The cross product is useful for finding perpendicular vectors and surface normals.

LANGUAGE: GDScript
CODE:
var c = Vector3()
c.x = (a.y * b.z) - (a.z * b.y)
c.y = (a.z * b.x) - (a.x * b.z)
c.z = (a.x * b.y) - (a.y * b.x)

# Using built-in method
var c = a.cross(b)

LANGUAGE: C#
CODE:
var c = new Vector3();
c.X = (a.Y * b.Z) - (a.Z * b.Y);
c.Y = (a.Z * b.X) - (a.X * b.Z);
c.Z = (a.X * b.Y) - (a.Y * b.X);

// Using built-in method
var c = a.Cross(b);

----------------------------------------

TITLE: Implementing Basic Input Direction Controls
DESCRIPTION: Code to handle left/right rotation input using the Input singleton. Uses a direction multiplier to control rotation based on arrow key input.

LANGUAGE: gdscript
CODE:
var direction = 0
if Input.is_action_pressed("ui_left"):
    direction = -1
if Input.is_action_pressed("ui_right"):
    direction = 1

rotation += angular_speed * direction * delta

LANGUAGE: csharp
CODE:
var direction = 0;
if (Input.IsActionPressed("ui_left"))
{
    direction = -1;
}
if (Input.IsActionPressed("ui_right"))
{
    direction = 1;
}

Rotation += _angularSpeed * direction * (float)delta;

----------------------------------------

TITLE: Implementing Custom CSV Parser in C#
DESCRIPTION: This snippet shows how to create a custom parser in C# that extracts strings from a CSV file for translation purposes in Godot Engine.

LANGUAGE: csharp
CODE:
using Godot;

[Tool]
public partial class CustomParser : EditorTranslationParserPlugin
{
    public override Godot.Collections.Array<string[]> _ParseFile(string path)
    {
        Godot.Collections.Array<string[]> ret;
        using var file = FileAccess.Open(path, FileAccess.ModeFlags.Read);
        string text = file.GetAsText();
        string[] splitStrs = text.Split(",", allowEmpty: false);
        foreach (string s in splitStrs)
        {
            ret.Add([s]);
            //GD.Print($"Extracted string: {s}");
        }
        return ret;
    }

    public override string[] _GetRecognizedExtensions()
    {
        return ["csv"];
    }
}

----------------------------------------

TITLE: Basic Node Type Casting in C#
DESCRIPTION: Demonstrates why explicit type casting is needed when working with Godot nodes, showing an invalid approach that will not compile due to C#'s static typing.

LANGUAGE: csharp
CODE:
var mySprite = GetNode("MySprite");
mySprite.SetFrame(0);

----------------------------------------

TITLE: Basic Velocity Assignment
DESCRIPTION: Sets a constant velocity for all particles

LANGUAGE: glsl
CODE:
VELOCITY.z = 10.0;

----------------------------------------

TITLE: File Hashing Example in C#
DESCRIPTION: C# implementation showing how to compute a SHA-256 hash of a file using HashingContext with chunk-based processing. Demonstrates proper file handling, context management, and hash computation.

LANGUAGE: csharp
CODE:
public const int ChunkSize = 1024;

public void HashFile(string path)
{
    // Check that file exists.
    if (!FileAccess.FileExists(path))
    {
        return;
    }
    // Start an SHA-256 context.
    var ctx = new HashingContext();
    ctx.Start(HashingContext.HashType.Sha256);
    // Open the file to hash.
    using var file = FileAccess.Open(path, FileAccess.ModeFlags.Read);
    // Update the context after reading each chunk.
    while (file.GetPosition() < file.GetLength())
    {
        int remaining = (int)(file.GetLength() - file.GetPosition());
        ctx.Update(file.GetBuffer(Mathf.Min(remaining, ChunkSize)));
    }
    // Get the computed hash.
    byte[] res = ctx.Finish();
    // Print the result as hex string and array.
    GD.PrintT(res.HexEncode(), (Variant)res);
}

----------------------------------------

TITLE: Unsharing Range Values
DESCRIPTION: Method to stop sharing Range values with other nodes. Takes no parameters.

LANGUAGE: gdscript
CODE:
unshare() -> void

----------------------------------------

TITLE: Instantiating Objects
DESCRIPTION: Example showing how to instantiate objects using ClassDB

LANGUAGE: GDScript
CODE:
var can_make = ClassDB.can_instantiate("Node")
var instance = ClassDB.instantiate("Node")

----------------------------------------

TITLE: Testing Movement in PhysicsBody2D
DESCRIPTION: Checks for collisions without moving the body. It takes parameters for the initial transform, motion vector, an optional KinematicCollision2D object, safe_margin, and recovery_as_collision. Returns a boolean indicating if a collision would occur.

LANGUAGE: GDScript
CODE:
test_move(from: Transform2D, motion: Vector2, collision: KinematicCollision2D = null, safe_margin: float = 0.08, recovery_as_collision: bool = false) -> bool

----------------------------------------

TITLE: Creating and Configuring a SpinBox in GDScript
DESCRIPTION: Creates a SpinBox, disables its context menu, and sets its text alignment to right.

LANGUAGE: gdscript
CODE:
var spin_box = SpinBox.new()
add_child(spin_box)
var line_edit = spin_box.get_line_edit()
line_edit.context_menu_enabled = false
spin_box.horizontal_alignment = LineEdit.HORIZONTAL_ALIGNMENT_RIGHT

----------------------------------------

TITLE: Defining GDExtension Configuration
DESCRIPTION: GDExtension configuration file specifying entry points and library paths for different platforms.

LANGUAGE: TOML
CODE:
[configuration]

entry_symbol = "example_library_init"
compatibility_minimum = "4.1"
reloadable = true

[libraries]

macos.debug = "res://bin/libgdexample.macos.template_debug.framework"
macos.release = "res://bin/libgdexample.macos.template_release.framework"
windows.debug.x86_64 = "res://bin/libgdexample.windows.template_debug.x86_64.dll"
windows.release.x86_64 = "res://bin/libgdexample.windows.template_release.x86_64.dll"
linux.debug.x86_64 = "res://bin/libgdexample.linux.template_debug.x86_64.so"
linux.release.x86_64 = "res://bin/libgdexample.linux.template_release.x86_64.so"
# ... (other platforms omitted for brevity)

----------------------------------------

TITLE: Implementing 3D Character Navigation in C#
DESCRIPTION: A C# version of the CharacterBody3D navigation script. Implements the same functionality as the GDScript version, with proper C# syntax and conventions.

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyCharacterBody3D : CharacterBody3D
{
    private NavigationAgent3D _navigationAgent;

    private float _movementSpeed = 2.0f;
    private Vector3 _movementTargetPosition = new Vector3(-3.0f, 0.0f, 2.0f);

    public Vector3 MovementTarget
    {
        get { return _navigationAgent.TargetPosition; }
        set { _navigationAgent.TargetPosition = value; }
    }

    public override void _Ready()
    {
        base._Ready();

        _navigationAgent = GetNode<NavigationAgent3D>("NavigationAgent3D");

        _navigationAgent.PathDesiredDistance = 0.5f;
        _navigationAgent.TargetDesiredDistance = 0.5f;

        Callable.From(ActorSetup).CallDeferred();
    }

    public override void _PhysicsProcess(double delta)
    {
        base._PhysicsProcess(delta);

        if (_navigationAgent.IsNavigationFinished())
        {
            return;
        }

        Vector3 currentAgentPosition = GlobalTransform.Origin;
        Vector3 nextPathPosition = _navigationAgent.GetNextPathPosition();

        Velocity = currentAgentPosition.DirectionTo(nextPathPosition) * _movementSpeed;
        MoveAndSlide();
    }

    private async void ActorSetup()
    {
        await ToSignal(GetTree(), SceneTree.SignalName.PhysicsFrame);
        MovementTarget = _movementTargetPosition;
    }
}

----------------------------------------

TITLE: Plugin Configuration File
DESCRIPTION: INI configuration file for defining plugin metadata including name, description, author, and version.

LANGUAGE: ini
CODE:
[plugin]

name="My Custom Dock"
description="A custom dock made so I can learn how to make plugins."
author="Your Name Here"
version="1.0"
script="custom_dock.gd"

----------------------------------------

TITLE: Implementing AR/VR Mode Switching in Godot
DESCRIPTION: Functions to switch between AR and VR modes by configuring blend modes, viewport transparency, and environment settings. Handles different environment blend modes and ensures proper background rendering.

LANGUAGE: gdscript
CODE:
@onready var viewport : Viewport = get_viewport()
@onready var environment : Environment = $WorldEnvironment.environment

func switch_to_ar() -> bool:
    var xr_interface: XRInterface = XRServer.primary_interface
    if xr_interface:
        var modes = xr_interface.get_supported_environment_blend_modes()
        if XRInterface.XR_ENV_BLEND_MODE_ALPHA_BLEND in modes:
            xr_interface.environment_blend_mode = XRInterface.XR_ENV_BLEND_MODE_ALPHA_BLEND
            viewport.transparent_bg = true
        elif XRInterface.XR_ENV_BLEND_MODE_ADDITIVE in modes:
            xr_interface.environment_blend_mode = XRInterface.XR_ENV_BLEND_MODE_ADDITIVE
            viewport.transparent_bg = false
    else:
        return false

    environment.background_mode = Environment.BG_COLOR
    environment.background_color = Color(0.0, 0.0, 0.0, 0.0)
    environment.ambient_light_source = Environment.AMBIENT_SOURCE_COLOR
    return true

func switch_to_vr() -> bool:
    var xr_interface: XRInterface = XRServer.primary_interface
    if xr_interface:
        var modes = xr_interface.get_supported_environment_blend_modes()
        if XRInterface.XR_ENV_BLEND_MODE_OPAQUE in modes:
            xr_interface.environment_blend_mode = XRInterface.XR_ENV_BLEND_MODE_OPAQUE
        else:
            return false

    viewport.transparent_bg = false
    environment.background_mode = Environment.BG_SKY
    environment.ambient_light_source = Environment.AMBIENT_SOURCE_BG
    return true

----------------------------------------

TITLE: Parsing SVG File with XMLParser in GDScript
DESCRIPTION: This snippet demonstrates how to use XMLParser to parse an SVG file, printing each element and its attributes as a dictionary. It shows the basic usage of opening a file, reading nodes, and accessing node information.

LANGUAGE: gdscript
CODE:
var parser = XMLParser.new()
parser.open("path/to/file.svg")
while parser.read() != ERR_FILE_EOF:
    if parser.get_node_type() == XMLParser.NODE_ELEMENT:
        var node_name = parser.get_node_name()
        var attributes_dict = {}
        for idx in range(parser.get_attribute_count()):
            attributes_dict[parser.get_attribute_name(idx)] = parser.get_attribute_value(idx)
        print("The ", node_name, " element has the following attributes: ", attributes_dict)

----------------------------------------

TITLE: Sharing Range Values Between Nodes
DESCRIPTION: Method to bind Range nodes together to share their values. Takes a Node parameter to share values with.

LANGUAGE: gdscript
CODE:
share(with: Node) -> void

----------------------------------------

TITLE: Setting Minimum Window Size
DESCRIPTION: Sets the minimum size for the application window to prevent UI layout issues.

LANGUAGE: GDScript
CODE:
get_window().set_min_size(Vector2i(800, 600))

----------------------------------------

TITLE: Accessing Built-in Performance Monitors in GDScript
DESCRIPTION: Demonstrates how to access a built-in performance monitor (FPS) using the get_monitor method.

LANGUAGE: gdscript
CODE:
print(Performance.get_monitor(Performance.TIME_FPS)) # Prints the FPS to the console.

----------------------------------------

TITLE: Loading Resources in GDScript
DESCRIPTION: Shows different methods of loading resources in GDScript, including preloading, dynamic loading, and exporting script references.

LANGUAGE: GDScript
CODE:
@tool

# Load resource during scene load.
var preres = preload(path)
# Load resource when program reaches statement.
var res = load(path)

# Note that users load scenes and scripts, by convention, with PascalCase
# names (like typenames), often into constants.
const MyScene = preload("my_scene.tscn") # Static load
const MyScript = preload("my_script.gd")

# This type's value varies, i.e. it is a variable, so it uses snake_case.
@export var script_type: Script

# Must configure from the editor, defaults to null.
@export var const_script: Script:
    set(value):
        if Engine.is_editor_hint():
            const_script = value

# Warn users if the value hasn't been set.
func _get_configuration_warnings():
    if not const_script:
        return ["Must initialize property 'const_script'."]

    return []

----------------------------------------

TITLE: Rotating a Basis
DESCRIPTION: Demonstrates how to rotate a Basis around different axes.

LANGUAGE: gdscript
CODE:
var my_basis = Basis.IDENTITY
var angle = TAU / 2

my_basis = my_basis.rotated(Vector3.UP, angle)    # Rotate around the up axis (yaw).
my_basis = my_basis.rotated(Vector3.RIGHT, angle) # Rotate around the right axis (pitch).
my_basis = my_basis.rotated(Vector3.BACK, angle)  # Rotate around the back axis (roll).

LANGUAGE: csharp
CODE:
var myBasis = Basis.Identity;
var angle = Mathf.Tau / 2.0f;

myBasis = myBasis.Rotated(Vector3.Up, angle);    // Rotate around the up axis (yaw).
myBasis = myBasis.Rotated(Vector3.Right, angle); // Rotate around the right axis (pitch).
myBasis = myBasis.Rotated(Vector3.Back, angle);  // Rotate around the back axis (roll).

----------------------------------------

TITLE: Using select() Method in GDScript
DESCRIPTION: Demonstrates how to use the select() method to select different portions of text in a LineEdit.

LANGUAGE: gdscript
CODE:
text = "Welcome"
select() # Will select "Welcome".
select(4) # Will select "ome".
select(2, 5) # Will select "lco".

----------------------------------------

TITLE: HSeparator Class Definition in RST
DESCRIPTION: ReStructuredText documentation defining the HSeparator class, its inheritance hierarchy, and core functionality as a horizontal separator control in Godot Engine.

LANGUAGE: rst
CODE:
.. _class_HSeparator:

HSeparator
==========

**Inherits:** :ref:`Separator<class_Separator>` **<** :ref:`Control<class_Control>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

A horizontal line used for separating other controls.

----------------------------------------

TITLE: Displaying Game Center Interface in GDScript
DESCRIPTION: Demonstrates how to show the Game Center overlay with specific views and leaderboards.

LANGUAGE: gdscript
CODE:
var result = show_game_center({ "view": "leaderboards", "leaderboard_name": "best_time_leaderboard" })
var result = show_game_center({ "view": "achievements" })

----------------------------------------

TITLE: Adding Translatable Strings with Context in C#
DESCRIPTION: This snippet shows how to add translatable strings with context, plural forms, and comments in C#.

LANGUAGE: csharp
CODE:
// This will add a message with msgid "Test 1", msgctxt "context", msgid_plural "test 1 plurals", and comment "test 1 comment".
ret.Add(["Test 1", "context", "test 1 plurals", "test 1 comment"]);
// This will add a message with msgid "A test without context" and msgid_plural "plurals".
ret.Add(["A test without context", "", "plurals"]);
// This will add a message with msgid "Only with context" and msgctxt "a friendly context".
ret.Add(["Only with context", "a friendly context"]);

----------------------------------------

TITLE: Multiplying Vector3i by float in GDScript
DESCRIPTION: Demonstrates multiplying each component of a Vector3i by a float, resulting in a Vector3.

LANGUAGE: GDScript
CODE:
print(0.9 * Vector3i(10, 15, 20)) # Prints (9.0, 13.5, 18.0)

----------------------------------------

TITLE: Noise Class Definition and Methods
DESCRIPTION: Defines the abstract Noise class interface with methods for generating noise values and noise-based images. Includes functionality for both regular and seamless noise generation in 1D, 2D and 3D spaces.

LANGUAGE: RST
CODE:
class_Noise:

Noise
=====

**Inherits:** Resource < RefCounted < Object
**Inherited By:** FastNoiseLite

Abstract base class for noise generators.

----------------------------------------

TITLE: Implementing Side-to-Side Motion in GLSL Shader
DESCRIPTION: Adds a side-to-side motion to the fish by offsetting the x-coordinate of each vertex using a cosine function.

LANGUAGE: glsl
CODE:
VERTEX.x += cos(time) * side_to_side;

----------------------------------------

TITLE: Line2D Point Management Example
DESCRIPTION: Example showing how to add, remove and modify points in a Line2D node

LANGUAGE: gdscript
CODE:
# Add a point at position (100, 100)
line2d.add_point(Vector2(100, 100))

# Insert a point at index 0
line2d.add_point(Vector2(50, 50), 0)

# Remove point at index 1
line2d.remove_point(1)

# Set point position
line2d.set_point_position(0, Vector2(75, 75))

# Clear all points
line2d.clear_points()

----------------------------------------

TITLE: Property Table Definition in RST
DESCRIPTION: RST table defining the properties of the Popup class, including their types and default values.

LANGUAGE: rst
CODE:
.. table::
   :widths: auto

   +-------------------------+---------------+-------------------------------------------------------------------------+
   | :ref:`bool<class_bool>` | borderless    | ``true`` (overrides :ref:`Window<class_Window_property_borderless>`)    |
   +-------------------------+---------------+-------------------------------------------------------------------------+
   | :ref:`bool<class_bool>` | popup_window  | ``true`` (overrides :ref:`Window<class_Window_property_popup_window>`)  |
   +-------------------------+---------------+-------------------------------------------------------------------------+
   | :ref:`bool<class_bool>` | transient     | ``true`` (overrides :ref:`Window<class_Window_property_transient>`)     |
   +-------------------------+---------------+-------------------------------------------------------------------------+
   | :ref:`bool<class_bool>` | unresizable   | ``true`` (overrides :ref:`Window<class_Window_property_unresizable>`)   |
   +-------------------------+---------------+-------------------------------------------------------------------------+
   | :ref:`bool<class_bool>` | visible       | ``false`` (overrides :ref:`Window<class_Window_property_visible>`)      |
   +-------------------------+---------------+-------------------------------------------------------------------------+
   | :ref:`bool<class_bool>` | wrap_controls | ``true`` (overrides :ref:`Window<class_Window_property_wrap_controls>`) |
   +-------------------------+---------------+-------------------------------------------------------------------------+

----------------------------------------

TITLE: Using Crypto Class for Various Cryptographic Operations in C#
DESCRIPTION: Demonstrates key generation, certificate creation, encryption/decryption, signing, and verification using the Crypto class in C#.

LANGUAGE: csharp
CODE:
using Godot;
using System.Diagnostics;

Crypto crypto = new Crypto();

// Generate new RSA key.
CryptoKey key = crypto.GenerateRsa(4096);

// Generate new self-signed certificate with the given key.
X509Certificate cert = crypto.GenerateSelfSignedCertificate(key, "CN=mydomain.com,O=My Game Company,C=IT");

// Save key and certificate in the user folder.
key.Save("user://generated.key");
cert.Save("user://generated.crt");

// Encryption
string data = "Some data";
byte[] encrypted = crypto.Encrypt(key, data.ToUtf8Buffer());

// Decryption
byte[] decrypted = crypto.Decrypt(key, encrypted);

// Signing
byte[] signature = crypto.Sign(HashingContext.HashType.Sha256, Data.Sha256Buffer(), key);

// Verifying
bool verified = crypto.Verify(HashingContext.HashType.Sha256, Data.Sha256Buffer(), signature, key);

// Checks
Debug.Assert(verified);
Debug.Assert(data.ToUtf8Buffer() == decrypted);

----------------------------------------

TITLE: Implementing Manhattan Distance in AStar3D (GDScript)
DESCRIPTION: Extends AStar3D to use Manhattan distance for cost and heuristic calculations.

LANGUAGE: gdscript
CODE:
class_name MyAStar3D
extends AStar3D

func _compute_cost(u, v):
    var u_pos = get_point_position(u)
    var v_pos = get_point_position(v)
    return abs(u_pos.x - v_pos.x) + abs(u_pos.y - v_pos.y) + abs(u_pos.z - v_pos.z)

func _estimate_cost(u, v):
    var u_pos = get_point_position(u)
    var v_pos = get_point_position(v)
    return abs(u_pos.x - v_pos.x) + abs(u_pos.y - v_pos.y) + abs(u_pos.z - v_pos.z)

----------------------------------------

TITLE: Adding File Filter Example
DESCRIPTION: Example of adding file filters to restrict file selection

LANGUAGE: gdscript
CODE:
# Add filter for image files
file_dialog.add_filter("*.png, *.jpg", "Image Files")

# Add filter for documents
file_dialog.add_filter("*.pdf,*.doc,*.txt", "Documents")

----------------------------------------

TITLE: Pattern Matching with IS Operator in C#
DESCRIPTION: Demonstrates pattern matching using the 'is' operator with variable declaration.

LANGUAGE: csharp
CODE:
if (GetNode("MySprite") is Sprite2D mySprite)
{
    // The mySprite variable only exists inside this block, and it's never null.
    mySprite.SetFrame(0);
}

----------------------------------------

TITLE: Extending Mesh Vertices with MeshDataTool in C#
DESCRIPTION: Example showing how to modify mesh vertices by extending them along their normals using MeshDataTool in C#.

LANGUAGE: csharp
CODE:
var mesh = new ArrayMesh();
mesh.AddSurfaceFromArrays(Mesh.PrimitiveType.Triangles, new BoxMesh().GetMeshArrays());
var mdt = new MeshDataTool();
mdt.CreateFromSurface(mesh, 0);
for (var i = 0; i < mdt.GetVertexCount(); i++)
{
    Vector3 vertex = mdt.GetVertex(i);
    vertex += mdt.GetVertexNormal(i);
    mdt.SetVertex(i, vertex);
}
mesh.ClearSurfaces();
mdt.CommitToSurface(mesh);
var mi = new MeshInstance();
mi.Mesh = mesh;
AddChild(mi);

----------------------------------------

TITLE: Customizing LineEdit Context Menu in GDScript
DESCRIPTION: Example of how to customize the LineEdit's context menu by adding a custom item and connecting a callback.

LANGUAGE: gdscript
CODE:
func _ready():
    var menu = get_menu()
    # Remove all items after "Redo".
    menu.item_count = menu.get_item_index(MENU_REDO) + 1
    # Add custom items.
    menu.add_separator()
    menu.add_item("Insert Date", MENU_MAX + 1)
    # Connect callback.
    menu.id_pressed.connect(_on_item_pressed)

func _on_item_pressed(id):
    if id == MENU_MAX + 1:
        insert_text_at_caret(Time.get_date_string_from_system())

----------------------------------------

TITLE: Complete Main Screen Plugin Implementation
DESCRIPTION: Full implementation of the main screen plugin that instantiates and manages the custom panel. Includes lifecycle management and visibility control.

LANGUAGE: gdscript
CODE:
@tool
extends EditorPlugin

const MainPanel = preload("res://addons/main_screen/main_panel.tscn")

var main_panel_instance

func _enter_tree():
    main_panel_instance = MainPanel.instantiate()
    EditorInterface.get_editor_main_screen().add_child(main_panel_instance)
    _make_visible(false)

func _exit_tree():
    if main_panel_instance:
        main_panel_instance.queue_free()

func _has_main_screen():
    return true

func _make_visible(visible):
    if main_panel_instance:
        main_panel_instance.visible = visible

func _get_plugin_name():
    return "Main Screen Plugin"

func _get_plugin_icon():
    return EditorInterface.get_editor_theme().get_icon("Node", "EditorIcons")

LANGUAGE: csharp
CODE:
#if TOOLS
using Godot;

[Tool]
public partial class MainScreenPlugin : EditorPlugin
{
    PackedScene MainPanel = ResourceLoader.Load<PackedScene>("res://addons/main_screen/main_panel.tscn");
    Control MainPanelInstance;

    public override void _EnterTree()
    {
        MainPanelInstance = (Control)MainPanel.Instantiate();
        EditorInterface.Singleton.GetEditorMainScreen().AddChild(MainPanelInstance);
        _MakeVisible(false);
    }

    public override void _ExitTree()
    {
        if (MainPanelInstance != null)
        {
            MainPanelInstance.QueueFree();
        }
    }

    public override bool _HasMainScreen()
    {
        return true;
    }

    public override void _MakeVisible(bool visible)
    {
        if (MainPanelInstance != null)
        {
            MainPanelInstance.Visible = visible;
        }
    }

    public override string _GetPluginName()
    {
        return "Main Screen Plugin";
    }

    public override Texture2D _GetPluginIcon()
    {
        return EditorInterface.Singleton.GetEditorTheme().GetIcon("Node", "EditorIcons");
    }
}
#endif

----------------------------------------

TITLE: OpenXR Command Line Switch
DESCRIPTION: Command line parameter to force enable OpenXR mode

LANGUAGE: RST
CODE:
--xr-mode on

----------------------------------------

TITLE: NavigationAgent2D with RigidBody2D in C#
DESCRIPTION: Implements basic movement and avoidance for a RigidBody2D using NavigationAgent2D in C#.

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyRigidBody2D : RigidBody2D
{
    [Export]
    public float MovementSpeed { get; set; } = 4.0f;
    NavigationAgent2D _navigationAgent;

    public override void _Ready()
    {
        _navigationAgent = GetNode<NavigationAgent2D>("NavigationAgent2D");
        _navigationAgent.VelocityComputed += OnVelocityComputed;
    }

    private void SetMovementTarget(Vector2 movementTarget)
    {
        _navigationAgent.TargetPosition = movementTarget;
    }

    public override void _PhysicsProcess(double delta)
    {
        // Do not query when the map has never synchronized and is empty.
        if (NavigationServer2D.MapGetIterationId(_navigationAgent.GetNavigationMap()) == 0)
        {
            return;
        }

        if (_navigationAgent.IsNavigationFinished())
        {
            return;
        }

        Vector2 nextPathPosition = _navigationAgent.GetNextPathPosition();
        Vector2 newVelocity = GlobalPosition.DirectionTo(nextPathPosition) * MovementSpeed;
        if (_navigationAgent.AvoidanceEnabled)
        {
            _navigationAgent.Velocity = newVelocity;
        }
        else
        {
            OnVelocityComputed(newVelocity);
        }
    }

    private void OnVelocityComputed(Vector2 safeVelocity)
    {
        LinearVelocity = safeVelocity;
    }
}

----------------------------------------

TITLE: Class Definition - VFlowContainer
DESCRIPTION: Class inheritance hierarchy for VFlowContainer, showing it inherits from FlowContainer and other base classes in the Godot engine.

LANGUAGE: rst
CODE:
**Inherits:** :ref:`FlowContainer<class_FlowContainer>` **<** :ref:`Container<class_Container>` **<** :ref:`Control<class_Control>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

----------------------------------------

TITLE: Basic Gizmo Plugin Setup
DESCRIPTION: Initial setup of a custom gizmo plugin and its editor plugin integration. Defines the basic structure required for a gizmo plugin implementation.

LANGUAGE: GDScript
CODE:
# my_custom_gizmo_plugin.gd
extends EditorNode3DGizmoPlugin

func _get_gizmo_name():
    return "CustomNode"

LANGUAGE: GDScript
CODE:
# MyCustomEditorPlugin.gd
@tool
extends EditorPlugin

const MyCustomGizmoPlugin = preload("res://addons/my-addon/my_custom_gizmo_plugin.gd")

var gizmo_plugin = MyCustomGizmoPlugin.new()

func _enter_tree():
    add_node_3d_gizmo_plugin(gizmo_plugin)

func _exit_tree():
    remove_node_3d_gizmo_plugin(gizmo_plugin)

----------------------------------------

TITLE: Evaluating Basic Mathematical Expression in GDScript
DESCRIPTION: Demonstrates how to use the Expression class to evaluate a simple mathematical expression.

LANGUAGE: GDScript
CODE:
var expression = Expression.new()
expression.parse("20 + 10*2 - 5/2.0")
var result = expression.execute()
print(result)  # 37.5

----------------------------------------

TITLE: Shape2D Motion Collision Test
DESCRIPTION: Method to test collision between two Shape2D instances considering their motion vectors.

LANGUAGE: GDScript
CODE:
collide_with_motion(local_xform: Transform2D, local_motion: Vector2, with_shape: Shape2D, shape_xform: Transform2D, shape_motion: Vector2) -> bool

----------------------------------------

TITLE: String Case Conversion - C#
DESCRIPTION: Converting string cases between snake_case, camelCase and PascalCase in C#

LANGUAGE: csharp
CODE:
"Node2D".ToSnakeCase();               // Returns "node_2d"
"2nd place".ToSnakeCase();            // Returns "2_nd_place"
"Texture3DAssetFolder".ToSnakeCase(); // Returns "texture_3d_asset_folder"

----------------------------------------

TITLE: Ad-hoc Signing Unsigned macOS App
DESCRIPTION: Terminal commands to remove quarantine attribute and perform ad-hoc signing of an unsigned macOS application, enabling it to run on Apple Silicon Macs.

LANGUAGE: bash
CODE:
xattr -dr com.apple.quarantine "Unsigned Game.app"
codesign -s - --force --deep "Unsigned Game.app"

----------------------------------------

TITLE: Parsing Built-in Script Types in GDScript
DESCRIPTION: This snippet demonstrates how to parse built-in script types (GDScript, C#, etc.) using ResourceLoader in GDScript.

LANGUAGE: gdscript
CODE:
func _parse_file(path):
    var res = ResourceLoader.load(path, "Script")
    var text = res.source_code
    # Parsing logic.

func _get_recognized_extensions():
    return ["gd"]

----------------------------------------

TITLE: Loading and Applying a Font File in GDScript
DESCRIPTION: Example of loading a TTF font file and applying it to a Label node with custom font size

LANGUAGE: gdscript
CODE:
var f = load("res://BarlowCondensed-Bold.ttf")
$Label.add_theme_font_override("font", f)
$Label.add_theme_font_size_override("font_size", 64)

----------------------------------------

TITLE: Using the remap() function
DESCRIPTION: Demonstrates how to use the remap() function to map a value from one range to another.

LANGUAGE: GDScript
CODE:
remap(75, 0, 100, -1, 1) # Returns 0.5

----------------------------------------

TITLE: Defining Table of Contents for GUI Skinning in reStructuredText
DESCRIPTION: This code snippet defines a table of contents for GUI skinning and theming topics using reStructuredText syntax. It includes links to pages about GUI skinning, using the theme editor, theme type variations, and using fonts.

LANGUAGE: reStructuredText
CODE:
.. toctree::
   :maxdepth: 1
   :name: toc-gui-skinning

   gui_skinning
   gui_using_theme_editor
   gui_theme_type_variations
   gui_using_fonts

----------------------------------------

TITLE: Getting Available Frame Count in AudioStreamGeneratorPlayback
DESCRIPTION: Returns the number of frames that can be pushed without overflow.

LANGUAGE: gdscript
CODE:
get_frames_available() -> int

----------------------------------------

TITLE: Manage Breakpoints
DESCRIPTION: Methods to insert and remove breakpoints at specific lines in source files.

LANGUAGE: GDScript
CODE:
EngineDebugger.insert_breakpoint(line_number, source_name)
EngineDebugger.remove_breakpoint(line_number, source_name)

----------------------------------------

TITLE: Property Definitions for SphereMesh Class
DESCRIPTION: Defines the configurable properties of a SphereMesh including height, radius, segments, and hemisphere option.

LANGUAGE: RST
CODE:
+---------------------------+-------------------------------------------------------------------+-----------+
| :ref:`float<class_float>` | :ref:`height<class_SphereMesh_property_height>`                   | ``1.0``   |
+---------------------------+-------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`   | :ref:`is_hemisphere<class_SphereMesh_property_is_hemisphere>`     | ``false`` |
+---------------------------+-------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`     | :ref:`radial_segments<class_SphereMesh_property_radial_segments>` | ``64``    |
+---------------------------+-------------------------------------------------------------------+-----------+
| :ref:`float<class_float>` | :ref:`radius<class_SphereMesh_property_radius>`                   | ``0.5``   |
+---------------------------+-------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`     | :ref:`rings<class_SphereMesh_property_rings>`                     | ``32``    |
+---------------------------+-------------------------------------------------------------------+-----------+

----------------------------------------

TITLE: Removing Quarantine Attribute from macOS App
DESCRIPTION: Terminal command to remove the quarantine extended file attribute from a macOS application, allowing it to run without Gatekeeper restrictions.

LANGUAGE: bash
CODE:
xattr -dr com.apple.quarantine "Unsigned Game.app"

----------------------------------------

TITLE: Connecting to TLS Stream
DESCRIPTION: Establishes a TLS connection to a peer using an underlying StreamPeer, verifying the remote certificate for the given common name. Optional client options can be provided for custom CA trust or to disable verification.

LANGUAGE: GDScript
CODE:
connect_to_stream(stream: StreamPeer, common_name: String, client_options: TLSOptions = null) -> Error

----------------------------------------

TITLE: Setting Pixel Color with Vector2i in GDScript
DESCRIPTION: Creates an image and sets the color of a specific pixel using set_pixelv() with a Vector2i argument

LANGUAGE: gdscript
CODE:
var img_width = 10
var img_height = 5
var img = Image.create(img_width, img_height, false, Image.FORMAT_RGBA8)

img.set_pixelv(Vector2i(1, 2), Color.RED) # Sets the color at (1, 2) to red.

----------------------------------------

TITLE: Setting Custom Data for Fish Instances in GDScript
DESCRIPTION: Assigns random custom data to each fish instance to create variation in swim cycles.

LANGUAGE: gdscript
CODE:
$School.multimesh.set_instance_custom_data(i, Color(randf(), randf(), randf(), randf()))

----------------------------------------

TITLE: Version Check Example
DESCRIPTION: Example showing how to check engine version using hex values

LANGUAGE: gdscript
CODE:
if Engine.get_version_info().hex >= 0x040100:
    pass # Do things specific to version 4.1 or later.
else:
    pass # Do things specific to versions before 4.1.

LANGUAGE: csharp
CODE:
if ((int)Engine.GetVersionInfo()["hex"] >= 0x040100)
{
    // Do things specific to version 4.1 or later.
}
else{
    // Do things specific to versions before 4.1.
}

----------------------------------------

TITLE: Creating and Adding Files to a PCK Package in GDScript
DESCRIPTION: Demonstrates how to create a PCK package, add a file to it, and flush the changes.

LANGUAGE: gdscript
CODE:
var packer = PCKPacker.new()
packer.pck_start("test.pck")
packer.add_file("res://text.txt", "text.txt")
packer.flush()

----------------------------------------

TITLE: Node2D Movement Methods
DESCRIPTION: Methods for moving and rotating a Node2D node.

LANGUAGE: restructuredtext
CODE:
rotate(radians: float)
global_translate(offset: Vector2)
translate(offset: Vector2)
move_local_x(delta: float, scaled: bool = false)
move_local_y(delta: float, scaled: bool = false)

----------------------------------------

TITLE: Finding a Path
DESCRIPTION: Calculates a path between two points on a navigation map.

LANGUAGE: gdscript
CODE:
var path = NavigationServer2D.map_get_path(map_rid, start_pos, end_pos, true)

----------------------------------------

TITLE: Reading a Single File from ZIP Archive in GDScript
DESCRIPTION: This function demonstrates how to read a single file from a ZIP archive using ZIPReader. It opens the archive, reads the content of a specific file, and returns the result as a PackedByteArray.

LANGUAGE: GDScript
CODE:
func read_zip_file():
    var reader = ZIPReader.new()
    var err = reader.open("user://archive.zip")
    if err != OK:
        return PackedByteArray()
    var res = reader.read_file("hello.txt")
    reader.close()
    return res

----------------------------------------

TITLE: Sampling Curve Values
DESCRIPTION: Gets Y value at a given X offset along the curve. Provides both direct sampling and baked (cached) sampling methods.

LANGUAGE: GDScript
CODE:
sample(offset: float)
sample_baked(offset: float)

----------------------------------------

TITLE: Generating a Keystore for Google Play Store
DESCRIPTION: Command to generate a non-debug keystore file required for uploading AAB or APK files to Google Play Store. This keystore is used to verify developer identity.

LANGUAGE: bash
CODE:
keytool -v -genkey -keystore mygame.keystore -alias mygame -keyalg RSA -validity 10000

----------------------------------------

TITLE: Registering GDExtension Types in C++
DESCRIPTION: Implementation of functions to initialize and uninitialize the GDExtension module, including registering the custom class.

LANGUAGE: C++
CODE:
#include "register_types.h"

#include "gdexample.h"

#include <gdextension_interface.h>
#include <godot_cpp/core/defs.hpp>
#include <godot_cpp/godot.hpp>

using namespace godot;

void initialize_example_module(ModuleInitializationLevel p_level) {
    if (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) {
        return;
    }

    GDREGISTER_RUNTIME_CLASS(GDExample);
}

void uninitialize_example_module(ModuleInitializationLevel p_level) {
    if (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) {
        return;
    }
}

extern "C" {
GDExtensionBool GDE_EXPORT example_library_init(GDExtensionInterfaceGetProcAddress p_get_proc_address, const GDExtensionClassLibraryPtr p_library, GDExtensionInitialization *r_initialization) {
    godot::GDExtensionBinding::InitObject init_obj(p_get_proc_address, p_library, r_initialization);

    init_obj.register_initializer(initialize_example_module);
    init_obj.register_terminator(uninitialize_example_module);
    init_obj.set_minimum_library_initialization_level(MODULE_INITIALIZATION_LEVEL_SCENE);

    return init_obj.init();
}
}

----------------------------------------

TITLE: Fragment Shader for Depth Texture Access in Godot
DESCRIPTION: This GLSL fragment shader demonstrates how to access and linearize the depth texture, calculate view space position, and visualize depth or world coordinates.

LANGUAGE: glsl
CODE:
shader_type spatial;
render_mode unshaded, fog_disabled;

uniform sampler2D depth_texture : hint_depth_texture;

void vertex() {
  POSITION = vec4(VERTEX.xy, 1.0, 1.0);
}

void fragment() {
  float depth = texture(depth_texture, SCREEN_UV).x;
  vec3 ndc = vec3(SCREEN_UV * 2.0 - 1.0, depth);
  vec4 view = INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
  view.xyz /= view.w;
  float linear_depth = -view.z;

  vec4 world = INV_VIEW_MATRIX * INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
  vec3 world_position = world.xyz / world.w;

  // Visualize linear depth
  ALBEDO.rgb = vec3(fract(linear_depth));

  // Visualize world coordinates
  //ALBEDO.rgb = fract(world_position).xyz;
}

----------------------------------------

TITLE: Initializing PackedVector3Array with elements
DESCRIPTION: Example of creating a PackedVector3Array with initial Vector3 values

LANGUAGE: gdscript
CODE:
var array = PackedVector3Array([Vector3(12, 34, 56), Vector3(78, 90, 12)])

----------------------------------------

TITLE: Handling MIDI Input in GDScript
DESCRIPTION: This code snippet demonstrates how to open MIDI inputs, print connected devices, and handle MIDI events in GDScript. It includes functions to print detailed information about received MIDI messages.

LANGUAGE: gdscript
CODE:
func _ready():
    OS.open_midi_inputs()
    print(OS.get_connected_midi_inputs())

func _input(input_event):
    if input_event is InputEventMIDI:
        _print_midi_info(input_event)

func _print_midi_info(midi_event):
    print(midi_event)
    print("Channel ", midi_event.channel)
    print("Message ", midi_event.message)
    print("Pitch ", midi_event.pitch)
    print("Velocity ", midi_event.velocity)
    print("Instrument ", midi_event.instrument)
    print("Pressure ", midi_event.pressure)
    print("Controller number: ", midi_event.controller_number)
    print("Controller value: ", midi_event.controller_value)

----------------------------------------

TITLE: Installing Android SDK Components with sdkmanager
DESCRIPTION: Command to install required Android SDK components using the sdkmanager command-line tool. This includes platform-tools, build-tools, platforms, command-line tools, CMake, and NDK.

LANGUAGE: bash
CODE:
sdkmanager --sdk_root=<android_sdk_path> "platform-tools" "build-tools;34.0.0" "platforms;android-34" "cmdline-tools;latest" "cmake;3.10.2.4988404" "ndk;23.2.8568313"

----------------------------------------

TITLE: Printing Font Variation Axes in GDScript
DESCRIPTION: Example of loading a variable font and printing its available variation axes.

LANGUAGE: gdscript
CODE:
var fv = FontVariation.new()
fv.base_font = load("res://RobotoFlex.ttf")
var variation_list = fv.get_supported_variation_list()
for tag in variation_list:
    var name = TextServerManager.get_primary_interface().tag_to_name(tag)
    var values = variation_list[tag]
    print("variation axis: %s (%d)\n\tmin, max, default: %s" % [name, tag, values])

----------------------------------------

TITLE: Connecting Cancel Button Event in GDScript
DESCRIPTION: Example showing how to connect a callback function to the cancel button's pressed signal in GDScript

LANGUAGE: gdscript
CODE:
get_cancel_button().pressed.connect(_on_canceled)

----------------------------------------

TITLE: Centering UI Controls with Anchors in C#
DESCRIPTION: Shows how to center a TextureRect control in its parent container using C# code, demonstrating anchor point setting and offset calculations.

LANGUAGE: csharp
CODE:
var rect = new TextureRect();

rect.Texture = ResourceLoader.Load<Texture>("res://icon.png");
rect.AnchorLeft = 0.5f;
rect.AnchorRight = 0.5f;
rect.AnchorTop = 0.5f;
rect.AnchorBottom = 0.5f;

var textureSize = rect.Texture.GetSize();

rect.OffsetLeft = -textureSize.X / 2;
rect.OffsetRight = textureSize.X / 2;
rect.OffsetTop = -textureSize.Y / 2;
rect.OffsetBottom = textureSize.Y / 2;
AddChild(rect);

----------------------------------------

TITLE: Adding a Point to Curve3D
DESCRIPTION: Adds a new point to the curve with specified position and optional control points.

LANGUAGE: GDScript
CODE:
add_point(position: Vector3, in: Vector3 = Vector3(0, 0, 0), out: Vector3 = Vector3(0, 0, 0), index: int = -1)

----------------------------------------

TITLE: Clear Breakpoints
DESCRIPTION: Method to clear all breakpoints in the debugger.

LANGUAGE: GDScript
CODE:
EngineDebugger.clear_breakpoints()

----------------------------------------

TITLE: Example Environment Properties
DESCRIPTION: Common properties that can be set in the Environment resource for controlling background, fog and other effects

LANGUAGE: ini
CODE:
Background Mode: Sky
Ambient Light: Background
Glow Enabled: true
Glow Intensity: 0.8
Glow Strength: 1.0

----------------------------------------

TITLE: Detecting Dedicated Server Mode in GDScript
DESCRIPTION: Code to detect if the current build is running as a dedicated server by checking for the dedicated_server feature tag.

LANGUAGE: gdscript
CODE:
if OS.has_feature("dedicated_server"):
    # Run your server startup code here...
    pass

----------------------------------------

TITLE: ENet Peer Packet Sending
DESCRIPTION: Example of sending a packet over an ENet peer connection with specific flags and channel

LANGUAGE: GDScript
CODE:
send(channel: int, packet: PackedByteArray, flags: int)

----------------------------------------

TITLE: Connecting Cancel Button Event in C#
DESCRIPTION: Example showing how to connect a callback function to the cancel button's pressed signal in C#

LANGUAGE: csharp
CODE:
GetCancelButton().Pressed += OnCanceled;

----------------------------------------

TITLE: Generating RSA Key and Self-Signed Certificate in C#
DESCRIPTION: Demonstrates how to generate an RSA key and create a self-signed X509 certificate using the Crypto class in C#.

LANGUAGE: csharp
CODE:
var crypto = new Crypto();
// Generate 4096 bits RSA key.
CryptoKey key = crypto.GenerateRsa(4096);
// Generate self-signed certificate using the given key.
X509Certificate cert = crypto.GenerateSelfSignedCertificate(key, "CN=mydomain.com,O=My Game Company,C=IT");

----------------------------------------

TITLE: 3D Collision Detection Algorithm in GDScript
DESCRIPTION: Presents a comprehensive 3D collision detection algorithm that handles cases where simple plane separation fails. It includes edge-to-edge checks to ensure robust collision detection between 3D polyhedral shapes.

LANGUAGE: gdscript
CODE:
var overlapping = true

for p in planes_of_A:
    var all_out = true
    for v in points_of_B:
        if (p.distance_to(v) < 0):
            all_out = false
            break

    if (all_out):
        overlapping = false
        break

if (overlapping):
    for p in planes_of_B:
        var all_out = true
        for v in points_of_A:
            if (p.distance_to(v) < 0):
                all_out = false
                break

        if (all_out):
            overlapping = false
            break

if (overlapping):
    for ea in edges_of_A:
        for eb in edges_of_B:
            var n = ea.cross(eb)
            if (n.length() == 0):
                continue

            var max_A = -1e20
            var min_A = 1e20

            for v in points_of_A:
                var d = n.dot(v)
                max_A = max(max_A, d)
                min_A = min(min_A, d)

            var max_B = -1e20
            var min_B = 1e20

            for v in points_of_B:
                var d = n.dot(v)
                max_B = max(max_B, d)
                min_B = min(min_B, d)

            if (min_A > max_B or min_B > max_A):
                overlapping = false
                break

        if (not overlapping):
            break

if (overlapping):
   print("Polygons collided!")

----------------------------------------

TITLE: Converting Variant to Base64
DESCRIPTION: Method to encode a Variant value to Base64 format, with optional object encoding support.

LANGUAGE: GDScript
CODE:
variant_to_base64(variant: Variant, full_objects: bool = false) -> String

----------------------------------------

TITLE: Creating and Using a PackedByteArray in GDScript
DESCRIPTION: Demonstrates creating a PackedByteArray, appending values, and accessing elements.

LANGUAGE: gdscript
CODE:
var bytes = PackedByteArray()
bytes.append(65) # ASCII 'A'
bytes.append(66) # ASCII 'B'
print(bytes[0]) # Prints: 65
print(bytes.get_string_from_ascii()) # Prints: AB

----------------------------------------

TITLE: Transform2D Scale Preservation Example - GDScript
DESCRIPTION: Demonstrates how scale is preserved when rotating a Transform2D

LANGUAGE: gdscript
CODE:
var my_transform = Transform2D(
    Vector2(2, 0),
    Vector2(0, 4),
    Vector2(0, 0)
)
# Rotating the Transform2D in any way preserves its scale.
my_transform = my_transform.rotated(TAU / 2)

print(my_transform.get_scale()) # Prints (2.0, 4.0)

----------------------------------------

TITLE: Extracting All Files from ZIP Archive in GDScript
DESCRIPTION: This function demonstrates how to extract all files from a ZIP archive, preserving the directory structure. It uses ZIPReader to open the archive, iterates through all files, creates directories as needed, and writes file contents to the destination.

LANGUAGE: GDScript
CODE:
func extract_all_from_zip():
    var reader = ZIPReader.new()
    reader.open("res://archive.zip")

    var root_dir = DirAccess.open("user://")

    var files = reader.get_files()
    for file_path in files:
        if file_path.ends_with("/"):
            root_dir.make_dir_recursive(file_path)
            continue

        root_dir.make_dir_recursive(root_dir.get_current_dir().path_join(file_path).get_base_dir())
        var file = FileAccess.open(root_dir.get_current_dir().path_join(file_path), FileAccess.WRITE)
        var buffer = reader.read_file(file_path)
        file.store_buffer(buffer)

----------------------------------------

TITLE: TabContainer Properties Example
DESCRIPTION: Example showing basic TabContainer property usage

LANGUAGE: gdscript
CODE:
var tab_container = TabContainer.new()
tab_container.current_tab = 0
tab_container.tabs_visible = true
tab_container.drag_to_rearrange_enabled = true

----------------------------------------

TITLE: Array Typing in GDScript
DESCRIPTION: Shows how to specify the element type of an Array in GDScript and demonstrates type checking in a for loop.

LANGUAGE: GDScript
CODE:
var scores: Array[int] = [10, 20, 30]
var vehicles: Array[Node] = [$Car, $Plane]
var items: Array[Item] = [Item.new()]
var array_of_arrays: Array[Array] = [[], []]

for score in scores:
    # score has type `int`

# The following would be errors:
scores += vehicles
var s: String = scores[0]
scores[0] = "lots"

----------------------------------------

TITLE: Setting and Getting FBXState Property in GDScript
DESCRIPTION: Demonstrates how to set and get the 'allow_geometry_helper_nodes' property of an FBXState object. This boolean property determines whether geometry helper nodes are used during the import process to preserve pivots and transformations.

LANGUAGE: GDScript
CODE:
# Setting the property
fbx_state.set_allow_geometry_helper_nodes(true)

# Getting the property
var use_helper_nodes = fbx_state.get_allow_geometry_helper_nodes()

----------------------------------------

TITLE: Loading CompressedTexture2D
DESCRIPTION: Method to load a compressed texture from a specified file path. Returns an Error enum value indicating success or failure.

LANGUAGE: gdscript
CODE:
load(path: String) -> Error

----------------------------------------

TITLE: Handling GUI Input in Custom Control with GDScript
DESCRIPTION: Demonstrates how to handle GUI input events in a custom control using the _gui_input() method in GDScript.

LANGUAGE: gdscript
CODE:
extends Control

func _gui_input(event):
   if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT and event.pressed:
       print("Left mouse button was pressed!")

----------------------------------------

TITLE: CanvasLayer Transform Operations
DESCRIPTION: Shows how to manipulate the transform properties of a CanvasLayer including rotation, scale and offset.

LANGUAGE: gdscript
CODE:
var canvas_layer = CanvasLayer.new()
canvas_layer.rotation = 0.0
canvas_layer.scale = Vector2(1, 1)
canvas_layer.transform = Transform2D(1, 0, 0, 1, 0, 0)

----------------------------------------

TITLE: Detecting Headless Mode in GDScript
DESCRIPTION: Code to check if the current instance is running in headless mode using the DisplayServer name.

LANGUAGE: gdscript
CODE:
if DisplayServer.get_name() == "headless":
    # Run your server startup code here...
    pass

----------------------------------------

TITLE: Accessing SliderJoint3D Parameters
DESCRIPTION: Examples of getting and setting joint parameters using the get_param and set_param methods

LANGUAGE: gdscript
CODE:
# Get the upper linear limit
var upper_limit = get_param(PARAM_LINEAR_LIMIT_UPPER)

# Set the linear motion damping
set_param(PARAM_LINEAR_MOTION_DAMPING, 0.5)

# Set the angular limits
set_param(PARAM_ANGULAR_LIMIT_UPPER, PI/4)
set_param(PARAM_ANGULAR_LIMIT_LOWER, -PI/4)

----------------------------------------

TITLE: Game Scene Implementation in C#
DESCRIPTION: A basic implementation of a Game scene in C#, showing how to start the game and notify the server when the scene is loaded.

LANGUAGE: csharp
CODE:
using Godot;

public partial class Game : Node3D // Or Node2D.
{
    public override void _Ready()
    {
        // Preconfigure game.

        Lobby.Instance.RpcId(1, Lobby.MethodName.PlayerLoaded); // Tell the server that this peer has loaded.
    }

    // Called only on the server.
    public void StartGame()
    {
        // All peers are ready to receive RPCs in this scene.
    }
}

----------------------------------------

TITLE: Initializing WebRTCPeerConnection with ICE Servers
DESCRIPTION: Initializes a WebRTCPeerConnection with STUN and TURN server configuration options.

LANGUAGE: gdscript
CODE:
var configuration = {
    "iceServers": [
        {
            "urls": [ "stun:stun.example.com:3478" ],
        },
        {
            "urls": [ "turn:turn.example.com:3478" ],
            "username": "a_username",
            "credential": "a_password",
        }
    ]
}

var peer = WebRTCPeerConnection.new()
peer.initialize(configuration)

----------------------------------------

TITLE: Putting ASCII string data in C#
DESCRIPTION: Shows how to put an ASCII string into the stream without prepending its size using PutData() method in C#.

LANGUAGE: csharp
CODE:
PutData("Hello World".ToAsciiBuffer());

----------------------------------------

TITLE: Restart Particle System
DESCRIPTION: Shows how to restart a particle system while preserving the random seed

LANGUAGE: gdscript
CODE:
var particles = GPUParticles3D.new()
particles.use_fixed_seed = true
particles.seed = 12345
particles.restart(true) # Keep seed

----------------------------------------

TITLE: Allocating Memory in Godot (C++-style)
DESCRIPTION: Shows the C++-style memory allocation macros provided by Godot. These macros handle object creation and deletion, notifying Objects after creation and before deletion.

LANGUAGE: C++
CODE:
memnew( Class / Class(args) )
memdelete( instance )

memnew_arr( Class , amount )
memdelete_arr( pointer to array )

----------------------------------------

TITLE: Creating Plane Instances
DESCRIPTION: Different constructors available for creating Plane objects using various parameters like normal vectors and points.

LANGUAGE: GDScript
CODE:
var plane1 = Plane()  # Default initialized
var plane2 = Plane(Vector3.UP, 5.0)  # From normal and distance
var plane3 = Plane(point1, point2, point3)  # From three points

----------------------------------------

TITLE: Setting Shadow Casting
DESCRIPTION: Example of setting the shadow casting mode for a GeometryInstance3D object.

LANGUAGE: GDScript
CODE:
geometry_instance.cast_shadow = GeometryInstance3D.SHADOW_CASTING_SETTING_ON

----------------------------------------

TITLE: File Operations - GDScript
DESCRIPTION: Methods for working with files within the directory, including counting, indexing and retrieving file properties.

LANGUAGE: GDScript
CODE:
get_file_count() # Returns number of files
get_file(idx) # Returns filename at index
get_file_path(idx) # Returns full file path
get_file_type(idx) # Returns resource type

----------------------------------------

TITLE: Multi-Resolution Sky Shader with Cloud Generation
DESCRIPTION: Implements a sky shader using multiple resolution passes for efficient cloud rendering, performing expensive calculations at lower resolutions to improve performance.

LANGUAGE: glsl
CODE:
shader_type sky;
render_mode use_half_res_pass;

void sky() {
    if (AT_HALF_RES_PASS) {
        // Run cloud calculation for 1/4 of the pixels
        vec4 color = generate_clouds(EYEDIR);
        COLOR = color.rgb;
        ALPHA = color.a;
    } else {
        // At full resolution pass, blend sky and clouds together
        vec3 color = generate_sky(EYEDIR);
        COLOR = color + HALF_RES_COLOR.rgb * HALF_RES_COLOR.a;
    }
}

----------------------------------------

TITLE: Creating and Adding Files to a PCK Package in C#
DESCRIPTION: Demonstrates how to create a PCK package, add a file to it, and flush the changes using C#.

LANGUAGE: csharp
CODE:
var packer = new PckPacker();
packer.PckStart("test.pck");
packer.AddFile("res://text.txt", "text.txt");
packer.Flush();

----------------------------------------

TITLE: OpenXRAction Enumeration Definition
DESCRIPTION: Defines the available action types for OpenXR interactions, including boolean, float, vector2, and pose types.

LANGUAGE: RST
CODE:
enum ActionType:
    OPENXR_ACTION_BOOL = 0
    OPENXR_ACTION_FLOAT = 1
    OPENXR_ACTION_VECTOR2 = 2
    OPENXR_ACTION_POSE = 3

----------------------------------------

TITLE: Setting Mesh LOD Threshold in GDScript
DESCRIPTION: Sets the mesh LOD threshold on the root viewport to control how aggressive mesh LOD transitions should be. Higher values result in earlier LOD transitions.

LANGUAGE: gdscript
CODE:
get_tree().root.mesh_lod_threshold = 4.0

----------------------------------------

TITLE: Allocating Memory in Godot (C-style)
DESCRIPTION: Demonstrates the C-style memory allocation macros provided by Godot for better memory tracking and debugging. These macros should be used instead of standard C library calls.

LANGUAGE: C++
CODE:
memalloc()
memrealloc()
memfree()

----------------------------------------

TITLE: Setting Visibility Range
DESCRIPTION: Example of configuring visibility range and fade settings for LOD.

LANGUAGE: GDScript
CODE:
geometry_instance.visibility_range_begin = 10.0
geometry_instance.visibility_range_end = 100.0
geometry_instance.visibility_range_fade_mode = GeometryInstance3D.VISIBILITY_RANGE_FADE_SELF

----------------------------------------

TITLE: Parsing and Executing Expressions in C#
DESCRIPTION: This snippet shows the C# equivalent of parsing and executing expressions. It creates an Expression object, connects to a LineEdit's TextSubmitted event, parses the input, executes the expression, and updates the LineEdit with the result.

LANGUAGE: csharp
CODE:
private Expression _expression = new Expression();

public override void _Ready()
{
    GetNode<LineEdit>("LineEdit").TextSubmitted += OnTextEntered;
}

private void OnTextEntered(string command)
{
    Error error = _expression.Parse(command);
    if (error != Error.Ok)
    {
        GD.Print(_expression.GetErrorText());
        return;
    }
    Variant result = _expression.Execute();
    if (!_expression.HasExecuteFailed())
    {
        GetNode<LineEdit>("LineEdit").Text = result.ToString();
    }
}

----------------------------------------

TITLE: Implementing DTLS Server in GDScript
DESCRIPTION: Shows how to set up a DTLS server that listens for connections, handles handshaking, and processes encrypted packets. Requires private key and certificate files for secure communication.

LANGUAGE: gdscript
CODE:
# server_node.gd
extends Node

var dtls = DTLSServer.new()
var server = UDPServer.new()
var peers = []

func _ready():
    server.listen(4242)
    var key = load("key.key") # Your private key.
    var cert = load("cert.crt") # Your X509 certificate.
    dtls.setup(TlsOptions.server(key, cert))

func _process(delta):
    while server.is_connection_available():
        var peer = server.take_connection()
        var dtls_peer = dtls.take_connection(peer)
        if dtls_peer.get_status() != PacketPeerDTLS.STATUS_HANDSHAKING:
            continue # It is normal that 50% of the connections fails due to cookie exchange.
        print("Peer connected!")
        peers.append(dtls_peer)

    for p in peers:
        p.poll() # Must poll to update the state.
        if p.get_status() == PacketPeerDTLS.STATUS_CONNECTED:
            while p.get_available_packet_count() > 0:
                print("Received message from client: %s" % p.get_packet().get_string_from_utf8())
                p.put_packet("Hello DTLS client".to_utf8_buffer())

----------------------------------------

TITLE: Attempting to Wait on a Semaphore in GDScript
DESCRIPTION: Tries to wait on the Semaphore without blocking. Returns true if successful (Semaphore value was non-zero), false otherwise.

LANGUAGE: GDScript
CODE:
try_wait() -> bool

----------------------------------------

TITLE: JSONRPC Error Code Enumeration
DESCRIPTION: Defines error code constants used in JSON-RPC error responses.

LANGUAGE: GDScript
CODE:
enum ErrorCode {
    PARSE_ERROR = -32700,
    INVALID_REQUEST = -32600,
    METHOD_NOT_FOUND = -32601,
    INVALID_PARAMS = -32602,
    INTERNAL_ERROR = -32603
}

----------------------------------------

TITLE: BaseButton Property Example - Button Mask Configuration
DESCRIPTION: Demonstrates how to configure button mouse mask to respond to multiple mouse buttons

LANGUAGE: rst
CODE:
button_mask = MOUSE_BUTTON_MASK_LEFT | MOUSE_BUTTON_MASK_RIGHT # Allow both left and right clicks

----------------------------------------

TITLE: Generic6DOFJoint3D Configuration Example
DESCRIPTION: Example of basic Generic6DOFJoint3D setup with linear and angular motion limits.

LANGUAGE: GDScript
CODE:
var joint = Generic6DOFJoint3D.new()

# Configure linear motion limits
joint.linear_limit_x/enabled = true
joint.linear_limit_x/upper_distance = 5.0
joint.linear_limit_x/lower_distance = -5.0

# Configure angular motion limits
joint.angular_limit_y/enabled = true
joint.angular_limit_y/upper_angle = deg_to_rad(45)
joint.angular_limit_y/lower_angle = deg_to_rad(-45)

# Enable motor
joint.linear_motor_x/enabled = true
joint.linear_motor_x/target_velocity = 2.0
joint.linear_motor_x/force_limit = 100.0

----------------------------------------

TITLE: Creating and Using a SceneTreeTimer in GDScript
DESCRIPTION: Demonstrates how to create and use a SceneTreeTimer to introduce a delay in GDScript. The timer is created using SceneTree.create_timer() and the code waits for the timeout signal using await.

LANGUAGE: gdscript
CODE:
func some_function():
    print("Timer started.")
    await get_tree().create_timer(1.0).timeout
    print("Timer ended.")

----------------------------------------

TITLE: Shape2D Collision Detection
DESCRIPTION: Method to check collision between two Shape2D instances with given transforms.

LANGUAGE: GDScript
CODE:
collide(local_xform: Transform2D, with_shape: Shape2D, shape_xform: Transform2D) -> bool

----------------------------------------

TITLE: Implementing Idle Processing in GDScript
DESCRIPTION: Demonstrates how to implement the _process method for idle processing in GDScript. This method is called every frame and receives a delta time parameter.

LANGUAGE: GDScript
CODE:
func _process(delta):
    # Do something...
    pass

----------------------------------------

TITLE: Using Callables for Flexible Method Access in C#
DESCRIPTION: Shows how to use Callables in C# to provide flexible method access with minimal dependencies.

LANGUAGE: C#
CODE:
// Child.cs
using Godot;

public partial class Child : Node
{
    public Callable? Callable { get; set; }

    public void MyMethod()
    {
        Callable?.Call();
    }
}

// Parent.cs
using Godot;

public partial class Parent : Node
{
    private Child _child;

    public void _Ready()
    {
        _child = GetNode<Child>("Child");
        _child.Callable = Callable.From(PrintMe);
        _child.MyMethod();
    }

    public void PrintMe()
    {
        GD.Print(Name);
    }
}

----------------------------------------

TITLE: Getting Tile Data from Mouse Position
DESCRIPTION: Get custom tile data from the tile at the mouse cursor position

LANGUAGE: gdscript
CODE:
func get_clicked_tile_power():
    var clicked_cell = tile_map.local_to_map(tile_map.get_local_mouse_position())
    var data = tile_map.get_cell_tile_data(0, clicked_cell)
    if data:
        return data.get_custom_data("power")
    else:
        return 0

----------------------------------------

TITLE: Value Change Handler in Range Control
DESCRIPTION: Virtual method called when the Range's value changes. Takes a single float parameter for the new value.

LANGUAGE: gdscript
CODE:
_value_changed(new_value: float) -> void

----------------------------------------

TITLE: Appending from Buffer Example
DESCRIPTION: Takes a byte array containing glTF data and imports it into a GLTFState object

LANGUAGE: GDScript
CODE:
var gltf_doc = GLTFDocument.new()
var state = GLTFState.new()
var err = gltf_doc.append_from_buffer(bytes, base_path, state)

----------------------------------------

TITLE: Iterating Godot List Container
DESCRIPTION: Demonstrates how to iterate over Godot's List container using pointers. This pattern is common for List, Set, and Map containers in Godot.

LANGUAGE: C++
CODE:
for(List<int>::Element *E=somelist.front();E;E=E->next()) {
    print_line(E->get()); // print the element
}

----------------------------------------

TITLE: Configuring Material Override
DESCRIPTION: Example of setting a material override that will replace all surface materials.

LANGUAGE: GDScript
CODE:
geometry_instance.material_override = preload("res://my_material.tres")

----------------------------------------

TITLE: Initializing EditorFileDialog in GDScript
DESCRIPTION: Example of creating and configuring an EditorFileDialog instance

LANGUAGE: gdscript
CODE:
var file_dialog = EditorFileDialog.new()
file_dialog.access = EditorFileDialog.ACCESS_FILESYSTEM
file_dialog.file_mode = EditorFileDialog.FILE_MODE_OPEN_FILE
file_dialog.add_filter("*.png ; PNG Images")
file_dialog.connect("file_selected", self, "_on_file_selected")
self.add_child(file_dialog)
file_dialog.popup_file_dialog()

----------------------------------------

TITLE: Creating and Using a SceneTreeTimer in C#
DESCRIPTION: Shows how to create and use a SceneTreeTimer to introduce a delay in C#. The timer is created using GetTree().CreateTimer() and the code waits for the timeout signal using await ToSignal().

LANGUAGE: csharp
CODE:
public async Task SomeFunction()
{
    GD.Print("Timer started.");
    await ToSignal(GetTree().CreateTimer(1.0f), SceneTreeTimer.SignalName.Timeout);
    GD.Print("Timer ended.");
}

----------------------------------------

TITLE: TextureProgressBar Fill Modes
DESCRIPTION: Enumeration showing all available fill modes for TextureProgressBar

LANGUAGE: gdscript
CODE:
enum FillMode {
    FILL_LEFT_TO_RIGHT = 0,
    FILL_RIGHT_TO_LEFT = 1,
    FILL_TOP_TO_BOTTOM = 2,
    FILL_BOTTOM_TO_TOP = 3,
    FILL_CLOCKWISE = 4,
    FILL_COUNTER_CLOCKWISE = 5,
    FILL_BILINEAR_LEFT_AND_RIGHT = 6,
    FILL_BILINEAR_TOP_AND_BOTTOM = 7,
    FILL_CLOCKWISE_AND_COUNTER_CLOCKWISE = 8
}

----------------------------------------

TITLE: Setting and Getting VisualShaderNodeIs Function Property in GDScript
DESCRIPTION: Demonstrates the setter and getter methods for the 'function' property of VisualShaderNodeIs, which determines the comparison operation.

LANGUAGE: GDScript
CODE:
# Setter
func set_function(value: Function) -> void:
    # Implementation not shown

# Getter
func get_function() -> Function:
    # Implementation not shown

----------------------------------------

TITLE: Starting Ragdoll Simulation in GDScript
DESCRIPTION: This snippet shows how to start the ragdoll simulation by calling the physical_bones_start_simulation() method in the _ready function of a script attached to the skeleton node.

LANGUAGE: GDScript
CODE:
func _ready():
    physical_bones_start_simulation()

----------------------------------------

TITLE: Accessing Project and Editor Settings in Godot C++
DESCRIPTION: Demonstrates how to access project and editor settings using GLOBAL_DEF, EDITOR_DEF, GLOBAL_GET, and EDITOR_GET macros in Godot's C++ code.

LANGUAGE: cpp
CODE:
GLOBAL_DEF("section/subsection/value", false);

EDITOR_DEF("section/subsection/value", "Untitled");

GLOBAL_GET("section/subsection/value");

EDITOR_GET("section/subsection/value");

----------------------------------------

TITLE: Offloading Enemy AI Processing to Worker Threads in GDScript
DESCRIPTION: Demonstrates how to use WorkerThreadPool to distribute enemy AI processing across multiple threads. The process_enemy_ai function is called for each enemy in the array using a group task.

LANGUAGE: gdscript
CODE:
var enemies = [] # An array to be filled with enemies.

func process_enemy_ai(enemy_index):
    var processed_enemy = enemies[enemy_index]
    # Expensive logic...

func _process(delta):
    var task_id = WorkerThreadPool.add_group_task(process_enemy_ai, enemies.size())
    # Other code...
    WorkerThreadPool.wait_for_group_task_completion(task_id)
    # Other code that depends on the enemy AI already being processed.

----------------------------------------

TITLE: Setting a Tile Proxy in TileSet
DESCRIPTION: Creates an alternative-level proxy for the given tile identifiers, mapping one set of identifiers to another.

LANGUAGE: GDScript
CODE:
func set_alternative_level_tile_proxy(source_from: int, coords_from: Vector2i, alternative_from: int, source_to: int, coords_to: Vector2i, alternative_to: int) -> void:
    # Implementation details

----------------------------------------

TITLE: Setting Animation Frame and Progress in GDScript
DESCRIPTION: Example code showing how to change an animation while preserving the current frame and progress values.

LANGUAGE: gdscript
CODE:
var current_frame = animated_sprite.get_frame()
var current_progress = animated_sprite.get_frame_progress()
animated_sprite.play("walk_another_skin")
animated_sprite.set_frame_and_progress(current_frame, current_progress)

----------------------------------------

TITLE: Generating RSA Key and Self-Signed Certificate in GDScript
DESCRIPTION: Shows how to generate an RSA key and create a self-signed X509 certificate using the Crypto class.

LANGUAGE: gdscript
CODE:
var crypto = Crypto.new()
# Generate 4096 bits RSA key.
var key = crypto.generate_rsa(4096)
# Generate self-signed certificate using the given key.
var cert = crypto.generate_self_signed_certificate(key, "CN=example.com,O=A Game Company,C=IT")

----------------------------------------

TITLE: Implementing Container Size Flags - Horizontal
DESCRIPTION: Method to specify allowed horizontal size flags for container children. Returns an array of permitted size flag values that will be available in the Inspector dock.

LANGUAGE: GDScript
CODE:
PackedInt32Array _get_allowed_size_flags_horizontal() virtual const

----------------------------------------

TITLE: Accessing Pan Gesture Delta in GDScript
DESCRIPTION: Demonstrates how to access the delta property of an InputEventPanGesture object, which represents the panning amount since the last pan event.

LANGUAGE: GDScript
CODE:
func _input(event):
    if event is InputEventPanGesture:
        var pan_delta = event.delta
        print("Pan delta: ", pan_delta)

----------------------------------------

TITLE: Processing Audio in AudioEffectInstance (GDScript)
DESCRIPTION: This method is called by the AudioServer to process the audio effect. It is only called when the bus is active, unless _process_silence() is overridden to return true.

LANGUAGE: gdscript
CODE:
func _process(src_buffer: const void*, dst_buffer: AudioFrame*, frame_count: int) -> void:

----------------------------------------

TITLE: Getting the closest connection at a point in GraphEdit
DESCRIPTION: This method returns the closest connection to a given point in screen space. If no connection is found within the specified maximum distance, an empty Dictionary is returned.

LANGUAGE: gdscript
CODE:
var connection = get_closest_connection_at_point(mouse_event.get_position())

----------------------------------------

TITLE: Getting RigidBody3D Inertia - C#
DESCRIPTION: C# version showing how to get the computed inertia of a RigidBody3D node using PhysicsServer3D

LANGUAGE: csharp
CODE:
private RigidBody3D _ball;

public override void _Ready()
{
    _ball = GetNode<RigidBody3D>("Ball");
}

private Vector3 GetBallInertia()
{
    return PhysicsServer3D.BodyGetDirectState(_ball.GetRid()).InverseInertia.Inverse();
}

----------------------------------------

TITLE: Implementing Lighten Blend Mode in GDScript
DESCRIPTION: Formula for the lighten blend mode used in the VisualShaderNodeColorOp class.

LANGUAGE: gdscript
CODE:
result = max(a, b);

----------------------------------------

TITLE: Creating Scene Instance from Placeholder
DESCRIPTION: Creates and loads an actual scene instance from the placeholder. The created node is placed as a sibling above the placeholder in the scene tree. Takes optional parameters for replacement behavior and custom scene specification.

LANGUAGE: gdscript
CODE:
create_instance(replace: bool = false, custom_scene: PackedScene = null) -> Node

----------------------------------------

TITLE: Getting Shortcut Text Representation in GDScript
DESCRIPTION: Shows how to get a text representation of the first valid InputEvent in a Shortcut.

LANGUAGE: GDScript
CODE:
var shortcut = Shortcut.new()
var text = shortcut.get_as_text()
print("Shortcut text: ", text)

----------------------------------------

TITLE: Implementing Basic Text-to-Speech in C#
DESCRIPTION: C# implementation of text-to-speech functionality showing voice selection, speaking text, and interrupting speech. Demonstrates the same functionality as the GDScript version using C# syntax.

LANGUAGE: csharp
CODE:
// One-time steps.
// Pick a voice. Here, we arbitrarily pick the first English voice.
string[] voices = DisplayServer.TtsGetVoicesForLanguage("en");
string voiceId = voices[0];

// Say "Hello, world!".
DisplayServer.TtsSpeak("Hello, world!", voiceId);

// Say a longer sentence, and then interrupt it.
// Note that this method is asynchronous: execution proceeds to the next line immediately,
// before the voice finishes speaking.
string longMessage = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur";
DisplayServer.TtsSpeak(longMessage, voiceId);

// Immediately stop the current text mid-sentence and say goodbye instead.
DisplayServer.TtsStop();
DisplayServer.TtsSpeak("Goodbye!", voiceId);

----------------------------------------

TITLE: Using the abs() function in GDScript
DESCRIPTION: Demonstrates how to use the abs() function to get absolute values of different types.

LANGUAGE: GDScript
CODE:
var a = abs(-1)
# a is 1

var b = abs(-1.2)
# b is 1.2

var c = abs(Vector2(-3.5, -4))
# c is (3.5, 4)

var d = abs(Vector2i(-5, -6))
# d is (5, 6)

var e = abs(Vector3(-7, 8.5, -3.8))
# e is (7, 8.5, 3.8)

var f = abs(Vector3i(-7, -8, -9))
# f is (7, 8, 9)

----------------------------------------

TITLE: Creating a Time Counter Label in C#
DESCRIPTION: Shows how to create a Label node that displays a continuously incrementing time counter using the _Process method in C#.

LANGUAGE: C#
CODE:
using Godot;

public partial class CustomLabel : Label
{
    private double _time;

    public override void _Process(double delta)
    {
        _time += delta;
        Text = _time.ToString(); // 'Text' is a built-in Label property.
    }
}

----------------------------------------

TITLE: Godot Physical Bone Simulation Example
DESCRIPTION: Example showing how to start physics simulation on specified bones

LANGUAGE: RST
CODE:
physical_bones_start_simulation(bones: Array[StringName] = [])

----------------------------------------

TITLE: Initializing Main Scene with Mob Scene Export in GDScript
DESCRIPTION: Defines the Main scene script with an exported variable for the mob scene. This allows assigning the mob scene in the editor.

LANGUAGE: GDScript
CODE:
extends Node

@export var mob_scene: PackedScene

----------------------------------------

TITLE: Creating a Simple Triangle with SurfaceTool in GDScript
DESCRIPTION: Demonstrates how to use SurfaceTool to create a basic triangle mesh with colors and UVs.

LANGUAGE: gdscript
CODE:
var st = SurfaceTool.new()
st.begin(Mesh.PRIMITIVE_TRIANGLES)
st.set_color(Color(1, 0, 0))
st.set_uv(Vector2(0, 0))
st.add_vertex(Vector3(0, 0, 0))

----------------------------------------

TITLE: Godot Bone Transform Example
DESCRIPTION: Example showing how to set a bone's global transform pose

LANGUAGE: RST
CODE:
set_bone_global_pose(bone_idx: int, pose: Transform3D)

----------------------------------------

TITLE: Using JavaClassWrapper with DateTime Example in GDScript
DESCRIPTION: Demonstrates how to use JavaClassWrapper to interact with Java's DateTime classes. Shows wrapping Java classes, creating instances, and calling methods.

LANGUAGE: gdscript
CODE:
var LocalDateTime = JavaClassWrapper.wrap("java.time.LocalDateTime")
var DateTimeFormatter = JavaClassWrapper.wrap("java.time.format.DateTimeFormatter")

var datetime = LocalDateTime.now()
var formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss")

print(datetime.format(formatter))

----------------------------------------

TITLE: Converting Numbers to Strings in Godot C++
DESCRIPTION: Demonstrates how to convert integers and floats to strings in Godot's C++ code using itos() and rtos() functions.

LANGUAGE: cpp
CODE:
String int_to_string = itos(42);

String real_to_string = rtos(123.45);

----------------------------------------

TITLE: Configuring TextMesh Dimensions
DESCRIPTION: Example demonstrating how to configure the physical dimensions and properties of a TextMesh.

LANGUAGE: GDScript
CODE:
var text_mesh = TextMesh.new()
text_mesh.depth = 0.05
text_mesh.pixel_size = 0.01
text_mesh.width = 500.0
text_mesh.offset = Vector2(0, 0)

----------------------------------------

TITLE: Setting Pixel Color with Vector2I in C#
DESCRIPTION: Creates an image and sets the color of a specific pixel using SetPixelv() with a Vector2I argument

LANGUAGE: csharp
CODE:
int imgWidth = 10;
int imgHeight = 5;
var img = Image.Create(imgWidth, imgHeight, false, Image.Format.Rgba8);

img.SetPixelv(new Vector2I(1, 2), Colors.Red); // Sets the color at (1, 2) to red.

----------------------------------------

TITLE: Clearing Grid Map Selection
DESCRIPTION: Method to deselect any currently selected cells in the grid map editor.

LANGUAGE: GDScript
CODE:
void clear_selection()

----------------------------------------

TITLE: Vector Multiplication Example in GDScript
DESCRIPTION: Shows how to multiply two Vector2 objects component-wise

LANGUAGE: gdscript
CODE:
print(Vector2(10, 20) * Vector2(3, 4)) # Prints (30.0, 80.0)

----------------------------------------

TITLE: Accessing Collision Shapes from Body Signals
DESCRIPTION: Example code showing how to get the CollisionShape2D nodes from shape indices when handling body shape entered signals

LANGUAGE: gdscript
CODE:
var body_shape_owner = body.shape_find_owner(body_shape_index)
var body_shape_node = body.shape_owner_get_owner(body_shape_owner)

var local_shape_owner = shape_find_owner(local_shape_index)
var local_shape_node = shape_owner_get_owner(local_shape_owner)

----------------------------------------

TITLE: Setting Basic PhysicalSkyMaterial Properties
DESCRIPTION: Example showing how to configure basic properties of a PhysicalSkyMaterial including energy multiplier, ground color, and turbidity

LANGUAGE: gdscript
CODE:
var sky_material = PhysicalSkyMaterial.new()
sky_material.energy_multiplier = 1.0
sky_material.ground_color = Color(0.1, 0.07, 0.034)
sky_material.turbidity = 10.0

----------------------------------------

TITLE: Setting CapsuleShape2D Properties
DESCRIPTION: Shows the property definitions for CapsuleShape2D including height and radius with their default values. These properties can be accessed and modified through getter and setter methods.

LANGUAGE: gdscript
CODE:
# Properties
height = 30.0  # The capsule's height
radius = 10.0  # The capsule's radius

# Getter/Setter methods
set_height(value: float)
get_height() -> float
set_radius(value: float)
get_radius() -> float

----------------------------------------

TITLE: Microbenchmarking in Godot C++
DESCRIPTION: Shows how to perform simple microbenchmarking in Godot's C++ code using Time::get_singleton()->get_ticks_usec().

LANGUAGE: cpp
CODE:
uint64_t begin = Time::get_singleton()->get_ticks_usec();

// Your code here...

uint64_t end = Time::get_singleton()->get_ticks_usec();
print_line(vformat("Snippet took %d microseconds", end - begin));

----------------------------------------

TITLE: Querying Custom Navigation Paths in 2D GDScript
DESCRIPTION: This snippet demonstrates how to set up and use NavigationPathQueryObjects for 2D custom path queries in Godot. It initializes query objects and defines a function to perform the path query with customizable parameters.

LANGUAGE: gdscript
CODE:
# Prepare query objects.
var query_parameters := NavigationPathQueryParameters2D.new()
var query_result := NavigationPathQueryResult2D.new()

func query_path(p_start_position: Vector2, p_target_position: Vector2, p_navigation_layers: int = 1) -> PackedVector2Array:
    if not is_inside_tree():
        return PackedVector2Array()

    query_parameters.map = get_world_2d().get_navigation_map()
    query_parameters.start_position = p_start_position
    query_parameters.target_position = p_target_position
    query_parameters.navigation_layers = p_navigation_layers

    NavigationServer2D.query_path(query_parameters, query_result)
    var path: PackedVector2Array = query_result.get_path()

    return path

----------------------------------------

TITLE: Creating and Configuring a SpinBox in C#
DESCRIPTION: Creates a SpinBox, disables its context menu, and sets its text alignment to right.

LANGUAGE: csharp
CODE:
var spinBox = new SpinBox();
AddChild(spinBox);
var lineEdit = spinBox.GetLineEdit();
lineEdit.ContextMenuEnabled = false;
spinBox.AlignHorizontal = LineEdit.HorizontalAlignEnum.Right;

----------------------------------------

TITLE: Custom Menu Example
DESCRIPTION: Example showing how to customize the RichTextLabel context menu

LANGUAGE: gdscript
CODE:
func _ready():
    var menu = get_menu()
    # Remove "Select All" item.
    menu.remove_item(MENU_SELECT_ALL)
    # Add custom items.
    menu.add_separator()
    menu.add_item("Duplicate Text", MENU_MAX + 1)
    # Connect callback.
    menu.id_pressed.connect(_on_item_pressed)

func _on_item_pressed(id):
    if id == MENU_MAX + 1:
        add_text("\n" + get_parsed_text())

----------------------------------------

TITLE: Serializing GLTFCamera to Dictionary
DESCRIPTION: Converts GLTFCamera instance into a Dictionary format suitable for glTF export.

LANGUAGE: gdscript
CODE:
to_dictionary() -> Dictionary

----------------------------------------

TITLE: Forwarding a Specific Port with UPnP in GDScript
DESCRIPTION: This snippet demonstrates how to use the UPNP class to discover devices and add a port mapping for port 7777.

LANGUAGE: GDScript
CODE:
var upnp = UPNP.new()
upnp.discover()
upnp.add_port_mapping(7777)

----------------------------------------

TITLE: Registering Classes with ClassDB in C++
DESCRIPTION: Demonstrates how to register classes with ClassDB, allowing them to be instanced by scripts and code.

LANGUAGE: cpp
CODE:
ClassDB::register_class<MyCustomClass>()

LANGUAGE: cpp
CODE:
ClassDB::register_virtual_class<MyCustomClass>()

----------------------------------------

TITLE: Checking if an InputEvent Matches an Action
DESCRIPTION: This method checks if the input event matches a predefined action. It can optionally ignore additional modifiers or directional input for certain event types.

LANGUAGE: gdscript
CODE:
is_action(action: StringName, exact_match: bool = false) -> bool

----------------------------------------

TITLE: Using SkeletonIK3D in GDScript
DESCRIPTION: Example showing how to start, stop, and control the influence of a SkeletonIK3D node.

LANGUAGE: gdscript
CODE:
# Apply IK effect automatically on every new frame (not the current)
skeleton_ik_node.start()

# Apply IK effect only on the current frame
skeleton_ik_node.start(true)

# Stop IK effect and reset bones_global_pose_override on Skeleton
skeleton_ik_node.stop()

# Apply full IK effect
skeleton_ik_node.set_influence(1.0)

# Apply half IK effect
skeleton_ik_node.set_influence(0.5)

# Apply zero IK effect (a value at or below 0.01 also removes bones_global_pose_override on Skeleton)
skeleton_ik_node.set_influence(0.0)

----------------------------------------

TITLE: Path Access Examples
DESCRIPTION: Examples showing how to access resource and user data paths in Godot projects.

LANGUAGE: GDScript
CODE:
# Accessing project resources
res://character.png

# Accessing user data
user://save_game.dat

----------------------------------------

TITLE: Checking Resource Dependencies in GDScript
DESCRIPTION: Demonstrates how to iterate through and print the dependencies of a resource using ResourceLoader.get_dependencies().

LANGUAGE: gdscript
CODE:
for dependency in ResourceLoader.get_dependencies(path):
    print(dependency.get_slice("::", 0)) # Prints the UID.
    print(dependency.get_slice("::", 2)) # Prints the path.

----------------------------------------

TITLE: Using Named Capturing Groups
DESCRIPTION: Demonstrates how to use named capturing groups in regular expressions to extract specific pattern matches.

LANGUAGE: GDScript
CODE:
var regex = RegEx.new()
regex.compile("d(?<digit>[0-9]+)|x(?<digit>[0-9a-f]+)")
var result = regex.search("the number is x2f")
if result:
    print(result.get_string("digit")) # Would print 2f

----------------------------------------

TITLE: Loading Imported Texture in GDScript
DESCRIPTION: Shows the preferred method of loading imported textures using load() instead of creating them from images dynamically. This approach is recommended for exported projects.

LANGUAGE: GDScript
CODE:
var texture = load("res://icon.svg")
$Sprite2D.texture = texture

----------------------------------------

TITLE: Vector Division Example in GDScript
DESCRIPTION: Shows how to divide two Vector2 objects component-wise

LANGUAGE: gdscript
CODE:
print(Vector2(10, 20) / Vector2(2, 5)) # Prints (5.0, 4.0)

----------------------------------------

TITLE: Implementing JSON Resource Loader Header
DESCRIPTION: Header file defining the ResourceFormatLoaderJson class for loading JSON files in Godot. Declares virtual methods for loading resources, handling file extensions, and type checking.

LANGUAGE: cpp
CODE:
#ifndef RESOURCE_LOADER_JSON_H
#define RESOURCE_LOADER_JSON_H

#include "core/io/resource_loader.h"

class ResourceFormatLoaderJson : public ResourceFormatLoader {
    GDCLASS(ResourceFormatLoaderJson, ResourceFormatLoader);
public:
    virtual RES load(const String &p_path, const String &p_original_path, Error *r_error = NULL);
    virtual void get_recognized_extensions(List<String> *r_extensions) const;
    virtual bool handles_type(const String &p_type) const;
    virtual String get_resource_type(const String &p_path) const;
};
#endif // RESOURCE_LOADER_JSON_H

----------------------------------------

TITLE: Setting Pixel Color in C#
DESCRIPTION: Creates an image and sets the color of a specific pixel using SetPixel()

LANGUAGE: csharp
CODE:
int imgWidth = 10;
int imgHeight = 5;
var img = Image.Create(imgWidth, imgHeight, false, Image.Format.Rgba8);

img.SetPixel(1, 2, Colors.Red); // Sets the color at (1, 2) to red.

----------------------------------------

TITLE: Getting Current GridMap Instance
DESCRIPTION: Method to retrieve the currently edited GridMap node in the editor.

LANGUAGE: GDScript
CODE:
GridMap get_current_grid_map() const

----------------------------------------

TITLE: Implementing Custom CSV Parser in GDScript
DESCRIPTION: This snippet demonstrates how to create a custom parser that extracts strings from a CSV file to write into a POT file for translation purposes.

LANGUAGE: gdscript
CODE:
@tool
extends EditorTranslationParserPlugin

func _parse_file(path):
    var ret: Array[PackedStringArray] = []
    var file = FileAccess.open(path, FileAccess.READ)
    var text = file.get_as_text()
    var split_strs = text.split(",", false)
    for s in split_strs:
        ret.append(PackedStringArray([s]))
        #print("Extracted string: " + s)

    return ret

func _get_recognized_extensions():
    return ["csv"]

----------------------------------------

TITLE: XR Environment Blend Mode Setup Example
DESCRIPTION: Example code showing how to check supported environment blend modes and set the desired mode at runtime

LANGUAGE: gdscript
CODE:
func _ready():
    var xr_interface = XRServer.find_interface("OpenXR")
    if xr_interface and xr_interface.is_initialized():
        var vp = get_viewport()
        vp.use_xr = true
        var acceptable_modes = [XRInterface.XR_ENV_BLEND_MODE_OPAQUE, XRInterface.XR_ENV_BLEND_MODE_ADDITIVE]
        var modes = xr_interface.get_supported_environment_blend_modes()
        for mode in acceptable_modes:
            if mode in modes:
                xr_interface.set_environment_blend_mode(mode)
                break

----------------------------------------

TITLE: Checking Buffer Space in AudioStreamGeneratorPlayback
DESCRIPTION: Determines if a buffer of a given size can be pushed without overflow.

LANGUAGE: gdscript
CODE:
can_push_buffer(amount: int) -> bool

----------------------------------------

TITLE: NavigationAgent2D with Node2D in GDScript
DESCRIPTION: Implements basic movement and avoidance for a Node2D using NavigationAgent2D in GDScript.

LANGUAGE: gdscript
CODE:
extends Node2D

@export var movement_speed: float = 4.0
@onready var navigation_agent: NavigationAgent2D = get_node("NavigationAgent2D")
var movement_delta: float

func _ready() -> void:
    navigation_agent.velocity_computed.connect(Callable(_on_velocity_computed))

func set_movement_target(movement_target: Vector2):
    navigation_agent.set_target_position(movement_target)

func _physics_process(delta):
    # Do not query when the map has never synchronized and is empty.
    if NavigationServer2D.map_get_iteration_id(navigation_agent.get_navigation_map()) == 0:
        return
    if navigation_agent.is_navigation_finished():
        return

    movement_delta = movement_speed * delta
    var next_path_position: Vector2 = navigation_agent.get_next_path_position()
    var new_velocity: Vector2 = global_position.direction_to(next_path_position) * movement_delta
    if navigation_agent.avoidance_enabled:
        navigation_agent.set_velocity(new_velocity)
    else:
        _on_velocity_computed(new_velocity)

func _on_velocity_computed(safe_velocity: Vector2) -> void:
    global_position = global_position.move_toward(global_position + safe_velocity, movement_delta)

----------------------------------------

TITLE: RST Table of Contents Structure
DESCRIPTION: ReStructuredText markup defining the hierarchical documentation structure for Godot's 3D features, including toctree directives for organizing content sections.

LANGUAGE: rst
CODE:
.. toctree::
   :maxdepth: 1
   :name: toc-learn-features-3d

   introduction_to_3d
   using_transforms
   procedural_geometry/index
   3d_text

----------------------------------------

TITLE: SmoothStep Operation Definition
DESCRIPTION: Implements smoothstep(edge0, edge1, x) shader function that returns 0.0 if x is below edge0, 1.0 if x is above edge1, and interpolates between 0.0 and 1.0 using Hermite polynomials otherwise.

LANGUAGE: GDScript
CODE:
smoothstep(edge0, edge1, x)

----------------------------------------

TITLE: Accessing GLTFState Properties
DESCRIPTION: Example of accessing some key properties of a GLTFState instance.

LANGUAGE: gdscript
CODE:
var state = GLTFState.new()

# Access basic properties
print(state.filename)
print(state.base_path)
print(state.major_version)
print(state.minor_version)

# Access arrays of glTF elements
print(state.get_nodes().size())
print(state.get_meshes().size())
print(state.get_materials().size())

# Access root nodes
print(state.root_nodes)

----------------------------------------

TITLE: Accessing Viewport Texture in Godot
DESCRIPTION: Code demonstrating how to access a Viewport's texture and assign it to a sprite in both GDScript and C#.

LANGUAGE: GDScript
CODE:
# This gives us the ViewportTexture.
var tex = viewport.get_texture()
sprite.texture = tex

LANGUAGE: C#
CODE:
// This gives us the ViewportTexture.
var tex = viewport.GetTexture();
sprite.Texture = tex;

----------------------------------------

TITLE: Grouping do/undo operations in C#
DESCRIPTION: Example of how to group do and undo operations separately when registering multiple dependent properties/methods in C#.

LANGUAGE: csharp
CODE:
_undo_redo.CreateAction("Add object");

// DO
_undo_redo.AddDoMethod(new Callable(this, MethodName.CreateObject));
_undo_redo.AddDoMethod(new Callable(this, MethodName.AddObjectToSingleton));

// UNDO
_undo_redo.AddUndoMethod(new Callable(this, MethodName.RemoveObjectFromSingleton));
_undo_redo.AddUndoMethod(new Callable(this, MethodName.DestroyThatObject));

_undo_redo.CommitAction();

----------------------------------------

TITLE: Generating Optimized Translation Method Definition
DESCRIPTION: Method signature for generating an optimized translation from a Translation resource. This method is intended for editor use and has no effect in exported projects.

LANGUAGE: RST
CODE:
|void| **generate**\ (\ from\: :ref:`Translation<class_Translation>`\ )

----------------------------------------

TITLE: Converting Camera3D to GLTFCamera
DESCRIPTION: Static method that creates a GLTFCamera instance from an existing Godot Camera3D node, translating Godot camera properties to glTF format.

LANGUAGE: gdscript
CODE:
GLTFCamera.from_node(camera_node: Camera3D) -> GLTFCamera

----------------------------------------

TITLE: Creating a Triangle Mesh with ArrayMesh in GDScript
DESCRIPTION: Demonstrates how to create a simple triangle mesh using ArrayMesh in GDScript. It sets up vertex positions, creates an ArrayMesh, adds a surface from the vertex array, and assigns it to a MeshInstance3D.

LANGUAGE: gdscript
CODE:
var vertices = PackedVector3Array()
vertices.push_back(Vector3(0, 1, 0))
vertices.push_back(Vector3(1, 0, 0))
vertices.push_back(Vector3(0, 0, 1))

# Initialize the ArrayMesh.
var arr_mesh = ArrayMesh.new()
var arrays = []
arrays.resize(Mesh.ARRAY_MAX)
arrays[Mesh.ARRAY_VERTEX] = vertices

# Create the Mesh.
arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)
var m = MeshInstance3D.new()
m.mesh = arr_mesh

----------------------------------------

TITLE: Marking API as Deprecated or Experimental in Godot Class Reference
DESCRIPTION: Examples of how to mark API elements as deprecated or experimental in the Godot class reference XML.

LANGUAGE: xml
CODE:
<class name="Parallax2D" inherits="Node2D" experimental="This node is meant to replace [ParallaxBackground] and [ParallaxLayer]. The implementation may change in the future." xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
    [...]
</class>

<constant name="RESPONSE_USE_PROXY" value="305" enum="ResponseCode" deprecated="Many clients ignore this response code for security reasons. It is also deprecated by the HTTP standard.">
    HTTP status code [code]305 Use Proxy[/code].
</constant>

<member name="auto_translate" type="bool" setter="set_auto_translate" getter="is_auto_translating" deprecated="Use [member Node.auto_translate_mode] instead.">
    Toggles if any text should automatically change to its translated version depending on the current locale.
</member>

<method name="get_method_call_mode" qualifiers="const" deprecated="Use [member AnimationMixer.callback_mode_method] instead.">
    <return type="int" enum="AnimationPlayer.AnimationMethodCallMode" />
    <description>
        Returns the call mode used for "Call Method" tracks.
    </description>
</method>

----------------------------------------

TITLE: Removing Camera Feed Method
DESCRIPTION: Method to remove a specific camera feed from the CameraServer.

LANGUAGE: GDScript
CODE:
void remove_feed(feed: CameraFeed)

----------------------------------------

TITLE: Creating a PackedVector2Array in GDScript
DESCRIPTION: Demonstrates how to initialize a PackedVector2Array with Vector2 elements in GDScript.

LANGUAGE: gdscript
CODE:
var array = PackedVector2Array([Vector2(12, 34), Vector2(56, 78)])

----------------------------------------

TITLE: Checking Class Existence and Inheritance
DESCRIPTION: Example showing how to check if a class exists and check inheritance relationships

LANGUAGE: GDScript
CODE:
var exists = ClassDB.class_exists("Node")
var is_child = ClassDB.is_parent_class("Node2D", "Node")
var parent = ClassDB.get_parent_class("Node2D")

----------------------------------------

TITLE: Pushing Single Audio Frame in AudioStreamGeneratorPlayback
DESCRIPTION: Pushes a single audio data frame to the buffer. More efficient in GDScript.

LANGUAGE: gdscript
CODE:
push_frame(frame: Vector2) -> bool

----------------------------------------

TITLE: Implementing Complex Wave Function in GLSL
DESCRIPTION: Defines a complex wave function using sine waves and noise textures to create realistic ocean wave patterns.

LANGUAGE: GLSL
CODE:
float wave(vec2 position){
  position += texture(noise, position / 10.0).x * 2.0 - 1.0;
  vec2 wv = 1.0 - abs(sin(position));
  return pow(1.0 - pow(wv.x * wv.y, 0.65), 4.0);
}

----------------------------------------

TITLE: Slider Property Declarations
DESCRIPTION: Property declarations for the Slider class including editable, scrollable, tick_count and ticks_on_borders flags.

LANGUAGE: GDScript
CODE:
var editable: bool = true
var scrollable: bool = true
var tick_count: int = 0
var ticks_on_borders: bool = false

----------------------------------------

TITLE: Creating Nodes in Godot (GDScript)
DESCRIPTION: Demonstrates how to create a new node (Sprite2D in this case) from code and add it as a child of the current node using GDScript.

LANGUAGE: gdscript
CODE:
var sprite2d

func _ready():
    var sprite2d = Sprite2D.new() # Create a new Sprite2D.
    add_child(sprite2d) # Add it as a child of this node.

----------------------------------------

TITLE: Version-Specific Feature Detection
DESCRIPTION: Shows how to use preprocessor directives to handle features that are only available in specific Godot versions.

LANGUAGE: csharp
CODE:
public void UseCoolFeature()
{
#if GODOT4_3_OR_GREATER || GODOT4_2_2_OR_GREATER
    // Use CoolFeature, that was added to Godot in 4.3 and cherry-picked into 4.2.2, here.
#else
    // Use a workaround for the absence of CoolFeature here.
#endif
}

----------------------------------------

TITLE: Handling Start Button Press in C#
DESCRIPTION: Handles the start button press event, hiding the button and emitting a signal using C#.

LANGUAGE: C#
CODE:
private void OnStartButtonPressed()
{
    GetNode<Button>("StartButton").Hide();
    EmitSignal(SignalName.StartGame);
}

----------------------------------------

TITLE: Creating a static body
DESCRIPTION: Creates a static physics body and adds a shape to it

LANGUAGE: gdscript
CODE:
var body = PhysicsServer3D.body_create()
PhysicsServer3D.body_set_mode(body, PhysicsServer3D.BODY_MODE_STATIC)

var shape = PhysicsServer3D.box_shape_create()
PhysicsServer3D.shape_set_data(shape, Vector3(1, 1, 1))
PhysicsServer3D.body_add_shape(body, shape)

----------------------------------------

TITLE: Getting String Size from Label Font in GDScript
DESCRIPTION: Example of getting the string size as displayed by a single-line Label using the font's get_string_size method.

LANGUAGE: gdscript
CODE:
var string_size = $Label.get_theme_font("font").get_string_size($Label.text, HORIZONTAL_ALIGNMENT_LEFT, -1, $Label.get_theme_font_size("font_size"))

----------------------------------------

TITLE: Usage Example
DESCRIPTION: Example showing usage of get_texture() method with RenderingServer signal

LANGUAGE: gdscript
CODE:
func _ready():
    await RenderingServer.frame_post_draw
    $Viewport.get_texture().get_image().save_png("user://Screenshot.png")

----------------------------------------

TITLE: Defining Table of Contents in reStructuredText for Web Platform Documentation
DESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It specifies the maximum depth of the table and includes links to various web-related topics for the Godot engine.

LANGUAGE: reStructuredText
CODE:
.. toctree::
   :maxdepth: 1
   :name: toc-learn-features-platform-html5

   javascript_bridge
   html5_shell_classref
   customizing_html5_shell

----------------------------------------

TITLE: Setting Texture of GPUParticlesAttractorVectorField3D in GDScript
DESCRIPTION: Sets the 3D texture to be used for defining the attraction field. The texture's values are linearly interpolated between pixels.

LANGUAGE: GDScript
CODE:
attractor.set_texture(texture_3d)

----------------------------------------

TITLE: Committing Changes to Mesh Surface
DESCRIPTION: Shows how to commit MeshDataTool modifications back to the original mesh.

LANGUAGE: gdscript
CODE:
mesh.clear_surfaces() # Deletes all of the mesh's surfaces.
mdt.commit_to_surface(mesh)

----------------------------------------

TITLE: ResourceUID Conversion Methods
DESCRIPTION: Methods for converting between UID integer values and their string representations.

LANGUAGE: GDScript
CODE:
# Convert UID to text format
func id_to_text(id: int) -> String

# Convert text format to UID
func text_to_id(text_id: String) -> int

----------------------------------------

TITLE: Saving a Scene with Node Ownership
DESCRIPTION: Shows how to create and save a scene hierarchy with specific node ownership. Demonstrates creating nodes, establishing hierarchy, setting ownership, and saving to disk.

LANGUAGE: gdscript
CODE:
var node = Node2D.new()
var body = RigidBody2D.new()
var collision = CollisionShape2D.new()

body.add_child(collision)
node.add_child(body)

body.owner = node
var scene = PackedScene.new()

var result = scene.pack(node)
if result == OK:
    var error = ResourceSaver.save(scene, "res://path/name.tscn")
    if error != OK:
        push_error("An error occurred while saving the scene to disk.")

LANGUAGE: csharp
CODE:
var node = new Node2D();
var body = new RigidBody2D();
var collision = new CollisionShape2D();

body.AddChild(collision);
node.AddChild(body);

body.Owner = node;
var scene = new PackedScene();

Error result = scene.Pack(node);
if (result == Error.Ok)
{
    Error error = ResourceSaver.Save(scene, "res://path/name.tscn");
    if (error != Error.Ok)
    {
        GD.PushError("An error occurred while saving the scene to disk.");
    }
}

----------------------------------------

TITLE: Implementing _parse_begin method in EditorInspectorPlugin
DESCRIPTION: This method is called to allow adding controls at the beginning of the property list for an object.

LANGUAGE: GDScript
CODE:
func _parse_begin(object: Object) -> void:
    # Add controls at the beginning of the property list
    pass

----------------------------------------

TITLE: VisualShaderNodeVectorBase Property Definition
DESCRIPTION: Property definition for the operation type used in vector calculations. Default value is 1 (3D vector operations).

LANGUAGE: GDScript
CODE:
var op_type: OpType = 1

func set_op_type(value: OpType) -> void:
    pass

func get_op_type() -> OpType:
    pass

----------------------------------------

TITLE: Advanced Godot Engine Initialization with Manual File Loading
DESCRIPTION: JavaScript code demonstrating a more complex initialization process for the Godot engine. It manually loads the WebAssembly file and preloads the PCK file before starting the engine with custom arguments.

LANGUAGE: javascript
CODE:
const myWasm = 'mygame.wasm';
const myPck = 'mygame.pck';
const engine = new Engine();
Promise.all([
    // Load and init the engine
    engine.init(myWasm),
    // And the pck concurrently
    engine.preloadFile(myPck),
]).then(() => {
    // Now start the engine.
    return engine.start({ args: ['--main-pack', myPck] });
}).then(() => {
    console.log('Engine has started!');
});

----------------------------------------

TITLE: XR Interface Variables
DESCRIPTION: Declares variables for managing XR interface settings including refresh rate and focus state tracking.

LANGUAGE: gdscript
CODE:
@export var maximum_refresh_rate : int = 90

var xr_interface : OpenXRInterface
var xr_is_focussed = false

LANGUAGE: csharp
CODE:
[Export]
public int MaximumRefreshRate { get; set; } = 90;

private OpenXRInterface _xrInterface;
private bool _xrIsFocused;

----------------------------------------

TITLE: Retrieving Buttons and Pressed Button in GDScript
DESCRIPTION: Demonstrates how to get all buttons in a ButtonGroup and retrieve the currently pressed button.

LANGUAGE: gdscript
CODE:
var button_group = ButtonGroup.new()
var buttons = button_group.get_buttons()
var pressed_button = button_group.get_pressed_button()

----------------------------------------

TITLE: Setting Navigation Link Properties
DESCRIPTION: Example showing how to configure basic properties of a NavigationLink2D node to create a bidirectional link between two positions with custom costs.

LANGUAGE: GDScript
CODE:
var nav_link = NavigationLink2D.new()
nav_link.start_position = Vector2(0, 0)
nav_link.end_position = Vector2(100, 0)
nav_link.bidirectional = true
nav_link.enter_cost = 0.0
nav_link.travel_cost = 1.0
nav_link.enabled = true

----------------------------------------

TITLE: Accessing and Setting Dummy Text Server in GDScript
DESCRIPTION: This snippet demonstrates how to access the dummy text server, set it as the primary interface, and optionally remove other text servers. It also mentions a command line argument to force the dummy text server usage.

LANGUAGE: GDScript
CODE:
var dummy_text_server = TextServerManager.find_interface("Dummy")
if dummy_text_server != null:
    TextServerManager.set_primary_interface(dummy_text_server)
    # If the other text servers are unneeded, they can be removed:
    for i in TextServerManager.get_interface_count():
        var text_server = TextServerManager.get_interface(i)
        if text_server != dummy_text_server:
            TextServerManager.remove_interface(text_server)

----------------------------------------

TITLE: Loading Buffer View Data in GLTFBufferView
DESCRIPTION: Method to load buffer view data from a referenced buffer in GLTFState. Returns data as PackedByteArray. Note that interleaved data with byte stride is not currently supported.

LANGUAGE: GDScript
CODE:
PackedByteArray load_buffer_view_data(state: GLTFState) const

----------------------------------------

TITLE: Outline Properties in LabelSettings
DESCRIPTION: Properties controlling text outline appearance.

LANGUAGE: GDScript
CODE:
var outline_color: Color = Color(1, 1, 1, 1) # Color of text outline
var outline_size: int = 0 # Size of text outline

----------------------------------------

TITLE: Setting Up Collision and Navigation
DESCRIPTION: Examples demonstrating how to configure collision shapes and navigation mesh properties for MeshLibrary items.

LANGUAGE: GDScript
CODE:
# Set up collision shapes
var shapes = [collision_shape, Transform3D.IDENTITY] 
mesh_library.set_item_shapes(id, shapes)

# Configure navigation
mesh_library.set_item_navigation_mesh(id, nav_mesh)
mesh_library.set_item_navigation_layers(id, nav_layers)

----------------------------------------

TITLE: Accessing PinJoint3D Parameters
DESCRIPTION: Methods for getting and setting PinJoint3D parameters like bias, damping, and impulse clamp. These parameters control joint behavior and physics constraints.

LANGUAGE: GDScript
CODE:
# Get a parameter value
get_param(param: Param) -> float

# Set a parameter value
set_param(param: Param, value: float) -> void

----------------------------------------

TITLE: Defining Parameter Reference Properties
DESCRIPTION: Defines the parameter_name property which stores the name of the referenced shader parameter. The default value is "[None]".

LANGUAGE: RST
CODE:
parameter_name = "[None]" 🔗

- void set_parameter_name(value: String)
- String get_parameter_name()

----------------------------------------

TITLE: Constructing a Plane in 2D using GDScript and C#
DESCRIPTION: Shows how to construct a 2D plane from either a normal vector and a point, or from two points in space. This is useful for creating boundaries or collision surfaces in 2D games.

LANGUAGE: gdscript
CODE:
# From normal and point
var N = normal
var D = normal.dot(point)

# From two points
var dvec = point_a.direction_to(point_b)
var normal = Vector2(dvec.y, -dvec.x)
var N = normal
var D = normal.dot(point_a)

LANGUAGE: csharp
CODE:
// From normal and point
var N = normal;
var D = normal.Dot(point);

// From two points
var dvec = pointA.DirectionTo(pointB);
var normal = new Vector2(dvec.Y, -dvec.X);
var N = normal;
var D = normal.Dot(pointA);

----------------------------------------

TITLE: Handling Message Timer Timeout in GDScript
DESCRIPTION: Hides the message when the message timer times out.

LANGUAGE: GDScript
CODE:
func _on_message_timer_timeout():
    $Message.hide()

----------------------------------------

TITLE: Encoding and Decoding Values in PackedByteArray
DESCRIPTION: Shows how to encode and decode different data types using PackedByteArray methods.

LANGUAGE: gdscript
CODE:
var bytes = PackedByteArray()
bytes.resize(8)
bytes.encode_u32(0, 123456) # Encode 32-bit unsigned int
bytes.encode_float(4, 3.14) # Encode 32-bit float
print(bytes.decode_u32(0)) # Prints: 123456
print(bytes.decode_float(4)) # Prints: 3.14

----------------------------------------

TITLE: Callable with Dictionary Example
DESCRIPTION: Shows how to properly create Callables from Dictionary methods.

LANGUAGE: gdscript
CODE:
var dictionary = {"hello": "world"}

# This will not work, `clear` is treated as a key.
tween.tween_callback(dictionary.clear)

# This will work.
tween.tween_callback(Callable.create(dictionary, "clear"))

----------------------------------------

TITLE: Getting Hand Joint Transform
DESCRIPTION: Gets the transform for a specific hand joint

LANGUAGE: GDScript
CODE:
var transform = get_hand_joint_transform(XRHandTracker.HAND_JOINT_INDEX_FINGER_TIP)

----------------------------------------

TITLE: Offloading Enemy AI Processing to Worker Threads in C#
DESCRIPTION: C# equivalent of the GDScript example, showing how to use WorkerThreadPool to distribute enemy AI processing across multiple threads in Godot Engine.

LANGUAGE: csharp
CODE:
private List<Node> _enemies = new List<Node>(); // A list to be filled with enemies.

private void ProcessEnemyAI(int enemyIndex)
{
    Node processedEnemy = _enemies[enemyIndex];
    // Expensive logic here.
}

public override void _Process(double delta)
{
    long taskId = WorkerThreadPool.AddGroupTask(Callable.From<int>(ProcessEnemyAI), _enemies.Count);
    // Other code...
    WorkerThreadPool.WaitForGroupTaskCompletion(taskId);
    // Other code that depends on the enemy AI already being processed.
}

----------------------------------------

TITLE: Vertex Transformation Example
DESCRIPTION: Demonstrates iterating over vertices and applying transformations.

LANGUAGE: gdscript
CODE:
for i in range(get_vertex_count):
    var vert = mdt.get_vertex(i)
    vert *= 2.0 # Scales the vertex by doubling size.
    mdt.set_vertex(i, vert)

----------------------------------------

TITLE: Sending Packet Data
DESCRIPTION: Methods for sending packet data, supporting both raw packets and variant serialization. Includes options for object encoding.

LANGUAGE: GDScript
CODE:
var error = put_packet(buffer)
var result = put_var(data, false) # Don't encode full objects

----------------------------------------

TITLE: Sending UDP Packets in GDScript
DESCRIPTION: Demonstrates how to create a PacketPeerUDP instance, bind it to a local port, set a destination address, and send a packet.

LANGUAGE: gdscript
CODE:
var peer = PacketPeerUDP.new()

# Optionally, you can select the local port used to send the packet.
peer.bind(4444)

peer.set_dest_address("1.1.1.1", 4433)
peer.put_packet("hello".to_utf8_buffer())

----------------------------------------

TITLE: Initializing GLTFCamera from Dictionary
DESCRIPTION: Static method that creates a new GLTFCamera instance by parsing a Dictionary containing camera parameters from glTF data.

LANGUAGE: gdscript
CODE:
GLTFCamera.from_dictionary(dictionary: Dictionary) -> GLTFCamera

----------------------------------------

TITLE: Getting CollisionShape3D from Body Shape Index
DESCRIPTION: Example showing how to get the CollisionShape3D node from a shape index during a body shape entered event.

LANGUAGE: gdscript
CODE:
var body_shape_owner = body.shape_find_owner(body_shape_index)
var body_shape_node = body.shape_owner_get_owner(body_shape_owner)

var local_shape_owner = shape_find_owner(local_shape_index)
var local_shape_node = shape_owner_get_owner(local_shape_owner)

----------------------------------------

TITLE: Setting Audio Filter Properties in GDScript
DESCRIPTION: Example showing how to access and set the main properties of an AudioEffectFilter instance. The filter allows configuration of cutoff frequency, db level, gain, and resonance.

LANGUAGE: gdscript
CODE:
var audio_effect = AudioEffectFilter.new()
audio_effect.cutoff_hz = 2000.0
audio_effect.db = AudioEffectFilter.FILTER_12DB
audio_effect.gain = 1.0
audio_effect.resonance = 0.5

----------------------------------------

TITLE: Creating Custom Visual Shader Node Class
DESCRIPTION: Basic example showing how to create a custom visual shader node by extending VisualShaderNodeCustom with the required tool annotation and class name

LANGUAGE: GDScript
CODE:
@tool
extends VisualShaderNodeCustom
class_name VisualShaderNodeNoise

----------------------------------------

TITLE: Vector Operation Type Enumeration in VisualShaderNodeVectorBase
DESCRIPTION: Enumeration defining the supported vector operation types (2D, 3D, 4D vectors). Used to specify which type of vector operation the node will perform.

LANGUAGE: GDScript
CODE:
enum OpType {
    OP_TYPE_VECTOR_2D = 0,  # A 2D vector type
    OP_TYPE_VECTOR_3D = 1,  # A 3D vector type
    OP_TYPE_VECTOR_4D = 2,  # A 4D vector type
    OP_TYPE_MAX = 3        # Size of the OpType enum
}

----------------------------------------

TITLE: Buffer Size Configuration
DESCRIPTION: Property to configure maximum buffer size for variant encoding operations. Default is 8388608 bytes.

LANGUAGE: GDScript
CODE:
peer.encode_buffer_max_size = 8388608

----------------------------------------

TITLE: Implementing _can_handle method in EditorInspectorPlugin
DESCRIPTION: This method determines if the plugin can handle a given object. It should return true if the object type is supported by the plugin.

LANGUAGE: GDScript
CODE:
func _can_handle(object: Object) -> bool:
    # Return true if this object can be handled by this plugin
    pass

----------------------------------------

TITLE: Instantiating GDScript Class Example
DESCRIPTION: Demonstrates how to load a GDScript file and create a new instance of the script class. Shows validation that the instance's script matches the loaded class.

LANGUAGE: gdscript
CODE:
var MyClass = load("myclass.gd")
var instance = MyClass.new()
print(instance.get_script() == MyClass) # Prints true

----------------------------------------

TITLE: Integer Literals in C#
DESCRIPTION: Demonstrates integer literal representations in C# using binary, hexadecimal and decimal notation with separators.

LANGUAGE: csharp
CODE:
int x = 0b1001; // x is 9
int y = 0xF5; // y is 245
int z = 10_000_000; // z is 10000000

----------------------------------------

TITLE: Clipping Polygon Against Plane in GDScript
DESCRIPTION: Takes a polygon defined by points and clips it against a plane, returning the clipped polygon points

LANGUAGE: GDScript
CODE:
var points = PackedVector3Array([Vector3(0,0,0), Vector3(1,0,0), Vector3(1,1,0)])
var plane = Plane(Vector3.UP, 0.5)
var clipped = Geometry3D.clip_polygon(points, plane)

----------------------------------------

TITLE: Shadow Properties in LabelSettings
DESCRIPTION: Properties controlling text shadow effects.

LANGUAGE: GDScript
CODE:
var shadow_color: Color = Color(0, 0, 0, 0) # Shadow color, alpha 0 = no shadow
var shadow_offset: Vector2 = Vector2(1, 1) # Shadow offset in pixels
var shadow_size: int = 1 # Size of shadow effect

----------------------------------------

TITLE: Line Intersection in C#
DESCRIPTION: Shows how to find the intersection point between two lines using the LineIntersectsLine method in C#.

LANGUAGE: csharp
CODE:
var fromA = Vector2.Zero;
var dirA = Vector2.Right;
var fromB = Vector2.Down;

// Returns new Vector2(1, 0)
Geometry2D.LineIntersectsLine(fromA, dirA, fromB, new Vector2(1, -1));
// Returns new Vector2(-1, 0)
Geometry2D.LineIntersectsLine(fromA, dirA, fromB, new Vector2(-1, -1));
// Returns null
Geometry2D.LineIntersectsLine(fromA, dirA, fromB, Vector2.Right);

----------------------------------------

TITLE: Loading and Parsing a ConfigFile in C#
DESCRIPTION: This snippet shows how to load a ConfigFile from disk and parse its contents into a dictionary using C#.

LANGUAGE: csharp
CODE:
var score_data = new Godot.Collections.Dictionary();
var config = new ConfigFile();

// Load data from a file.
Error err = config.Load("user://scores.cfg");

// If the file didn't load, ignore it.
if (err != Error.Ok)
{
    return;
}

// Iterate over all sections.
foreach (String player in config.GetSections())
{
    // Fetch the data for each section.
    var player_name = (String)config.GetValue(player, "player_name");
    var player_score = (int)config.GetValue(player, "best_score");
    score_data[player_name] = player_score;
}

----------------------------------------

TITLE: Line2D Property Configuration Example
DESCRIPTION: Example showing how to configure visual properties of a Line2D node

LANGUAGE: gdscript
CODE:
# Configure line appearance
line2d.width = 10.0
line2d.default_color = Color(1, 0, 0, 1) # Red
line2d.antialiased = true

# Set joint and cap modes
line2d.joint_mode = Line2D.LINE_JOINT_ROUND
line2d.begin_cap_mode = Line2D.LINE_CAP_ROUND
line2d.end_cap_mode = Line2D.LINE_CAP_ROUND

----------------------------------------

TITLE: Environment Dictionary Example in GDScript
DESCRIPTION: Example showing the structure of the environment dictionary when parsing BBCode tags with different argument types.

LANGUAGE: GDScript
CODE:
{"foo": "hello", "bar": true, "baz": 42, "color": Color(1, 1, 1, 1)}

----------------------------------------

TITLE: Loading Ogg Vorbis Audio from Buffer in GDScript
DESCRIPTION: Creates a new AudioStreamOggVorbis instance from a buffer containing Ogg Vorbis data. This static method allows loading audio data directly from memory.

LANGUAGE: GDScript
CODE:
var ogg_stream = AudioStreamOggVorbis.load_from_buffer(stream_data)

----------------------------------------

TITLE: GDScript Translation Examples
DESCRIPTION: Examples of how to mark strings for translation in GDScript, including usage of NO_TRANSLATE and TRANSLATORS comments for providing context to translators.

LANGUAGE: gdscript
CODE:
$CharacterName.text = "???" # NO_TRANSLATE

# NO_TRANSLATE: Language name.
$TabContainer.set_tab_title(0, "Python")

item.text = "Tool" # TRANSLATORS: Up to 10 characters.

# TRANSLATORS: This is a reference to Lewis Carroll's poem "Jabberwocky",
# make sure to keep this as it is important to the plot.
say(tr("He took his vorpal sword in hand. The end?"))

----------------------------------------

TITLE: Visual Shader Node Compare Properties
DESCRIPTION: Properties defining comparison behavior including type, function and condition for vector comparisons. The node compares values of various types and returns boolean results based on specified comparison functions.

LANGUAGE: GDScript
CODE:
# ComparisonType enum values
CTYPE_SCALAR = 0      # Float scalar
CTYPE_SCALAR_INT = 1  # Integer scalar 
CTYPE_SCALAR_UINT = 2 # Unsigned integer scalar
CTYPE_VECTOR_2D = 3   # 2D vector
CTYPE_VECTOR_3D = 4   # 3D vector
CTYPE_VECTOR_4D = 5   # 4D vector
CTYPE_BOOLEAN = 6     # Boolean 
CTYPE_TRANSFORM = 7   # Transform matrix

# Function enum values
FUNC_EQUAL = 0            # a == b
FUNC_NOT_EQUAL = 1        # a != b
FUNC_GREATER_THAN = 2     # a > b 
FUNC_GREATER_THAN_EQUAL = 3 # a >= b
FUNC_LESS_THAN = 4        # a < b
FUNC_LESS_THAN_EQUAL = 5  # a <= b

# Condition enum values
COND_ALL = 0 # All components must satisfy condition
COND_ANY = 1 # Any component must satisfy condition

----------------------------------------

TITLE: Implementing Vector-based Input Control in Godot
DESCRIPTION: Demonstrates how to handle two-axis input (like joystick movement) using Input.get_vector() for proper deadzone handling.

LANGUAGE: gdscript
CODE:
var velocity = Input.get_vector("move_left", "move_right", "move_forward", "move_back")

var velocity = Vector2(
        Input.get_action_strength("move_right") - Input.get_action_strength("move_left"),
        Input.get_action_strength("move_back") - Input.get_action_strength("move_forward")
).limit_length(1.0)

LANGUAGE: csharp
CODE:
Vector2 velocity = Input.GetVector("move_left", "move_right", "move_forward", "move_back");

Vector2 velocity = new Vector2(
        Input.GetActionStrength("move_right") - Input.GetActionStrength("move_left"),
        Input.GetActionStrength("move_back") - Input.GetActionStrength("move_forward")
).LimitLength(1.0);

----------------------------------------

TITLE: Initializing Variables for XR Controller Interaction in GDScript
DESCRIPTION: Sets up export variables and state variables for handling XR controller interaction with a composition layer quad.

LANGUAGE: GDScript
CODE:
extends OpenXRCompositionLayerQuad

const NO_INTERSECTION = Vector2(-1.0, -1.0)

@export var controller : XRController3D
@export var button_action : String = "trigger_click"

var was_pressed : bool = false
var was_intersect : Vector2 = NO_INTERSECTION

----------------------------------------

TITLE: Moving a File to Trash in C#
DESCRIPTION: Demonstrates how to move a file to the system's recycle bin using OS.MoveToTrash().

LANGUAGE: csharp
CODE:
var fileToRemove = "user://slot1.save";
OS.MoveToTrash(ProjectSettings.GlobalizePath(fileToRemove));

----------------------------------------

TITLE: Connecting Signals in GDScript
DESCRIPTION: Demonstrates how to connect signals using different methods in GDScript, including the recommended Signal.connect() approach and the legacy Object.connect() method.

LANGUAGE: gdscript
CODE:
func _ready():
    var button = Button.new()
    # `button_down` here is a Signal variant type, and we thus call the Signal.connect() method, not Object.connect().
    # See discussion below for a more in-depth overview of the API.
    button.button_down.connect(_on_button_down)

    # This assumes that a `Player` class exists, which defines a `hit` signal.
    var player = Player.new()
    # We use Signal.connect() again, and we also use the Callable.bind() method,
    # which returns a new Callable with the parameter binds.
    player.hit.connect(_on_player_hit.bind("sword", 100))

func _on_button_down():
    print("Button down!")

func _on_player_hit(weapon_type, damage):
    print("Hit with weapon %s for %d damage." % [weapon_type, damage])

----------------------------------------

TITLE: Starting Decompression in StreamPeerGZIP
DESCRIPTION: Initializes the StreamPeerGZIP for decompression. The 'use_deflate' parameter determines whether to use deflate instead of GZIP, and 'buffer_size' sets the internal buffer size.

LANGUAGE: GDScript
CODE:
start_decompression(use_deflate: bool = false, buffer_size: int = 65535) -> Error

----------------------------------------

TITLE: Setting Multiple Variation Axes in GDScript
DESCRIPTION: Illustrates how to set coordinates for multiple variation axes using a FontVariation instance.

LANGUAGE: gdscript
CODE:
var fv = FontVariation.new();
var ts = TextServerManager.get_primary_interface()
fv.base_font = load("res://BarlowCondensed-Regular.ttf")
fv.variation_opentype = { ts.name_to_tag("wght"): 900, ts.name_to_tag("custom_hght"): 900 }

----------------------------------------

TITLE: OpType Enumeration
DESCRIPTION: Defines the operation types available for the SmoothStep node, including scalar and vector operations with different dimensions (2D, 3D, 4D).

LANGUAGE: GDScript
CODE:
enum OpType {
    OP_TYPE_SCALAR = 0,
    OP_TYPE_VECTOR_2D = 1,
    OP_TYPE_VECTOR_2D_SCALAR = 2,
    OP_TYPE_VECTOR_3D = 3,
    OP_TYPE_VECTOR_3D_SCALAR = 4,
    OP_TYPE_VECTOR_4D = 5,
    OP_TYPE_VECTOR_4D_SCALAR = 6,
    OP_TYPE_MAX = 7
}

----------------------------------------

TITLE: Creating a Simulated Bold Font Variant in C#
DESCRIPTION: Shows how to create a FontVariation instance with simulated bold effect and apply it to a Label node using C#.

LANGUAGE: csharp
CODE:
var fv = new FontVariation();
fv.SetBaseFont(ResourceLoader.Load<FontFile>("res://BarlowCondensed-Regular.ttf"));
fv.SetVariationEmbolden(1.2);
GetNode("Label").AddThemeFontOverride("font", fv);
GetNode("Label").AddThemeFontSizeOverride("font_size", 64);

----------------------------------------

TITLE: Adding a Multistate Item to PopupMenu in GDScript
DESCRIPTION: Demonstrates how to add a multistate item to a PopupMenu and handle its state changes. The item cycles through 3 states when clicked.

LANGUAGE: gdscript
CODE:
func _ready():
    add_multistate_item("Item", 3, 0)

    index_pressed.connect(func(index: int):
            toggle_item_multistate(index)
            match get_item_multistate(index):
                0:
                    print("First state")
                1:
                    print("Second state")
                2:
                    print("Third state")
        )

----------------------------------------

TITLE: Defining a Global Class in C#
DESCRIPTION: Shows how to define a global class name for a script in C# using the [GlobalClass] attribute.

LANGUAGE: csharp
CODE:
using Godot;

[GlobalClass]
public partial class MyNode : Node
{
}

----------------------------------------

TITLE: Using Select() Method in C#
DESCRIPTION: Demonstrates how to use the Select() method to select different portions of text in a LineEdit in C#.

LANGUAGE: csharp
CODE:
Text = "Welcome";
Select(); // Will select "Welcome".
Select(4); // Will select "ome".
Select(2, 5); // Will select "lco".

----------------------------------------

TITLE: Getting Band Gain in AudioEffectEQ
DESCRIPTION: Retrieves the gain of a specific frequency band in decibels. Takes the band index as an integer parameter and returns a float value.

LANGUAGE: GDScript
CODE:
get_band_gain_db(band_idx: int) -> float

----------------------------------------

TITLE: Get Environment Method Implementation
DESCRIPTION: Virtual method that must be implemented to return the RID of the environment object.

LANGUAGE: gdscript
CODE:
RID _get_environment() virtual const

----------------------------------------

TITLE: Implementing Burn Blend Mode in GDScript
DESCRIPTION: Formula for the burn blend mode used in the VisualShaderNodeColorOp class.

LANGUAGE: gdscript
CODE:
result = vec3(1.0) - (vec3(1.0) - a) / b;

----------------------------------------

TITLE: RDTextureFormat Method Definitions
DESCRIPTION: RST documentation showing method definitions for RDTextureFormat including shareable format management.

LANGUAGE: RST
CODE:
Methods
-------

+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| |void| | :ref:`add_shareable_format<class_RDTextureFormat_method_add_shareable_format>`\ (\ format\: :ref:`DataFormat<enum_RenderingDevice_DataFormat>`\ )       |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| |void| | :ref:`remove_shareable_format<class_RDTextureFormat_method_remove_shareable_format>`\ (\ format\: :ref:`DataFormat<enum_RenderingDevice_DataFormat>`\ ) |

----------------------------------------

TITLE: Node and Resource Exports
DESCRIPTION: Shows how to export node references and resources

LANGUAGE: csharp
CODE:
[Export]
public PackedScene PackedScene { get; set; }

[Export]
public RigidBody2D RigidBody2D { get; set; }

----------------------------------------

TITLE: Creating and Saving a ConfigFile in C#
DESCRIPTION: This snippet demonstrates how to create a new ConfigFile, set values, and save it to disk using C#.

LANGUAGE: csharp
CODE:
// Create new ConfigFile object.
var config = new ConfigFile();

// Store some values.
config.SetValue("Player1", "player_name", "Steve");
config.SetValue("Player1", "best_score", 10);
config.SetValue("Player2", "player_name", "V3geta");
config.SetValue("Player2", "best_score", 9001);

// Save it to a file (overwrite if already exists).
config.Save("user://scores.cfg");

----------------------------------------

TITLE: Raising float to power of float in GDScript
DESCRIPTION: Demonstrates raising a float to the power of another float.

LANGUAGE: GDScript
CODE:
print(39.0625**0.25) # 2.5

----------------------------------------

TITLE: Retrieving Supported Languages for EditorSyntaxHighlighter in GDScript
DESCRIPTION: Virtual method to be overridden to return an array of supported language names. This method is const and doesn't modify any instance variables.

LANGUAGE: gdscript
CODE:
func _get_supported_languages() -> PackedStringArray:

----------------------------------------

TITLE: Accessing Editor Settings in GDScript
DESCRIPTION: Shows how to access and modify editor settings programmatically

LANGUAGE: gdscript
CODE:
var settings = EditorInterface.get_editor_settings()
settings.set("some/property", 10)
settings.get_setting("some/property")
var list_of_settings = settings.get_property_list()

----------------------------------------

TITLE: Defining the CodeEdit Class in GDScript
DESCRIPTION: Defines the CodeEdit class which inherits from TextEdit and provides code editing functionality.

LANGUAGE: GDScript
CODE:
class_name CodeEdit
extends TextEdit

----------------------------------------

TITLE: Setting Original Class Name Property
DESCRIPTION: Property to get or set the original class name of the missing resource. This represents the intended class type before it became missing.

LANGUAGE: gdscript
CODE:
set_original_class(value: String)
get_original_class() -> String

----------------------------------------

TITLE: Setting Port Definitions Example
DESCRIPTION: Shows how to define multiple ports using the string format specification.

LANGUAGE: gdscript
CODE:
set_inputs("0,4,input1;1,1,input2;")
set_outputs("0,4,output1;1,1,output2;")

----------------------------------------

TITLE: Configuring Scene Tree for Hierarchical LOD in Godot
DESCRIPTION: Demonstrates the structure of a scene tree for implementing Hierarchical Level of Detail (HLOD) using visibility ranges in Godot Engine.

LANGUAGE: plaintext
CODE:
┖╴BatchOfHouses
    ┠╴House1
    ┠╴House2
    ┠╴House3
    ┖╴House4

----------------------------------------

TITLE: Taking a TCP Connection in GDScript
DESCRIPTION: Retrieves an available connection from the TCP server as a StreamPeerTCP object. This method should be called when a connection is available.

LANGUAGE: GDScript
CODE:
StreamPeerTCP take_connection()

----------------------------------------

TITLE: NavigationAgent2D Movement Loop
DESCRIPTION: Example showing typical movement logic for NavigationAgent2D

LANGUAGE: gdscript
CODE:
func _physics_process(delta):
    if not agent.is_navigation_finished():
        var next_pos = agent.get_next_path_position()
        var current_pos = global_position
        var move = (next_pos - current_pos).normalized() * speed * delta
        global_position += move
        agent.set_velocity(move)

----------------------------------------

TITLE: Creating and Configuring ENet Host
DESCRIPTION: Example showing how to create and configure an ENet host with bandwidth limits and compression

LANGUAGE: gdscript
CODE:
var connection = ENetConnection.new()
connection.create_host(32, 2) # 32 max peers, 2 channels
connection.bandwidth_limit(1000000, 1000000) # 1 Mbps in/out
connection.compress(ENetConnection.COMPRESS_RANGE_CODER)

----------------------------------------

TITLE: Creating a Simulated Bold Font Variant in GDScript
DESCRIPTION: Demonstrates how to create a FontVariation instance with simulated bold effect and apply it to a Label node.

LANGUAGE: gdscript
CODE:
var fv = FontVariation.new()
fv.base_font = load("res://BarlowCondensed-Regular.ttf")
fv.variation_embolden = 1.2
$Label.add_theme_font_override("font", fv)
$Label.add_theme_font_size_override("font_size", 64)

----------------------------------------

TITLE: Creating and Using Vector3 Instances
DESCRIPTION: Demonstrates how to create Vector3 instances and perform basic operations.

LANGUAGE: gdscript
CODE:
var v1 = Vector3(1, 2, 3)
var v2 = Vector3(4, 5, 6)
var sum = v1 + v2
var dot_product = v1.dot(v2)
var cross_product = v1.cross(v2)
print(sum) # Outputs: (5, 7, 9)
print(dot_product) # Outputs: 32
print(cross_product) # Outputs: (-3, 6, -3)

----------------------------------------

TITLE: Adding Vertex with Attributes in ImmediateMesh
DESCRIPTION: Demonstrates how to add a single vertex with normal and UV attributes to an ImmediateMesh surface.

LANGUAGE: gdscript
CODE:
# Add a vertex with normal and uv.
surface_set_normal(Vector3(0, 1, 0))
surface_set_uv(Vector2(1, 1))
surface_add_vertex(Vector3(0, 0, 1))

----------------------------------------

TITLE: Scene Node Name Modification in C#
DESCRIPTION: A C# implementation of the node name modification script. It performs the same functionality as the GDScript version, adding 'modified_' prefix to all node names in the imported scene.

LANGUAGE: csharp
CODE:
using Godot;

// This sample changes all node names.
// Called right after the scene is imported and gets the root node.
[Tool]
public partial class NodeRenamer : EditorScenePostImport
{
    public override GodotObject _PostImport(Node scene)
    {
        // Change all node names to "modified_[oldnodename]"
        Iterate(scene);
        return scene; // Remember to return the imported scene
    }

    public void Iterate(Node node)
    {
        if (node != null)
        {
            node.Name = $"modified_{node.Name}";
            foreach (Node child in node.GetChildren())
            {
                Iterate(child);
            }
        }
    }
}

----------------------------------------

TITLE: Light2D BlendMode Enumeration
DESCRIPTION: Enumeration defining how the light blends with the scene

LANGUAGE: rst
CODE:
enum **BlendMode**:
**BLEND_MODE_ADD** = ``0``
**BLEND_MODE_SUB** = ``1``
**BLEND_MODE_MIX** = ``2``

----------------------------------------

TITLE: Creating Custom Tooltip in GDScript
DESCRIPTION: This method creates and returns a custom tooltip Control for a resource at the given path. It uses metadata from the preview generator and can incorporate the base tooltip provided.

LANGUAGE: GDScript
CODE:
func _make_tooltip_for_path(path, metadata, base):
    var t_rect = TextureRect.new()
    request_thumbnail(path, t_rect)
    base.add_child(t_rect) # The TextureRect will appear at the bottom of the tooltip.
    return base

----------------------------------------

TITLE: Adding Custom Context Menu Item
DESCRIPTION: Demonstrates how to add a custom context menu item with a callback and icon.

LANGUAGE: gdscript
CODE:
func _popup_menu(paths):
    add_context_menu_item("File Custom options", handle, ICON)

----------------------------------------

TITLE: Implementing Camera Projection Method in GDExtension
DESCRIPTION: Method to be implemented in GDExtension to return the camera Projection.

LANGUAGE: GDScript
CODE:
Projection _get_cam_projection() virtual const

----------------------------------------

TITLE: Accessing Texture2DRD RID in GDScript
DESCRIPTION: This snippet shows how to get and set the RID of the texture object created on the RenderingDevice for a Texture2DRD instance.

LANGUAGE: GDScript
CODE:
# Getting the texture RID
var texture_rid = texture_2d_rd.get_texture_rd_rid()

# Setting the texture RID
texture_2d_rd.set_texture_rd_rid(new_rid)

----------------------------------------

TITLE: Basic GLTFPhysicsBody Property Initialization
DESCRIPTION: Example showing initialization of basic GLTFPhysicsBody properties with their default values

LANGUAGE: gdscript
CODE:
var physics_body = GLTFPhysicsBody.new()
physics_body.body_type = "rigid"
physics_body.mass = 1.0
physics_body.linear_velocity = Vector3(0, 0, 0)
physics_body.angular_velocity = Vector3(0, 0, 0)
physics_body.center_of_mass = Vector3(0, 0, 0)

----------------------------------------

TITLE: Search Text Example in GDScript
DESCRIPTION: Demonstrates how to perform a text search in TextEdit and handle the results

LANGUAGE: gdscript
CODE:
var result = search("print", SEARCH_WHOLE_WORDS, 0, 0)
if result.x != -1:
    # Result found.
    var line_number = result.y
    var column_number = result.x

----------------------------------------

TITLE: Adding Handles to a Gizmo
DESCRIPTION: Adds interactive handles that can be used to edit Node3D properties. The handles are added with a material, IDs, and can be configured as billboarded or secondary handles.

LANGUAGE: GDScript
CODE:
add_handles(handles: PackedVector3Array, material: Material, ids: PackedInt32Array, billboard: bool = false, secondary: bool = false)

----------------------------------------

TITLE: Multiplying Vector4i by float in GDScript
DESCRIPTION: Shows multiplication of each component of a Vector4i by a float, resulting in a Vector4.

LANGUAGE: GDScript
CODE:
print(0.9 * Vector4i(10, 15, 20, -10)) # Prints (9.0, 13.5, 18.0, -9.0)

----------------------------------------

TITLE: Export Plugin Example Code
DESCRIPTION: Example showing how to override export options in an EditorExportPlugin

LANGUAGE: gdscript
CODE:
class MyExportPlugin extends EditorExportPlugin:
    func _get_name() -> String:
        return "MyExportPlugin"

    func _supports_platform(platform) -> bool:
        if platform is EditorExportPlatformPC:
            # Run on all desktop platforms including Windows, MacOS and Linux.
            return true
        return false

    func _get_export_options_overrides(platform) -> Dictionary:
        # Override "Embed PCK" to always be enabled.
        return {
            "binary_format/embed_pck": true,
        }

----------------------------------------

TITLE: Adding a TileSetSource to TileSet
DESCRIPTION: Adds a TileSetSource to the TileSet with an optional source ID override. Returns the added source ID or -1 if failed.

LANGUAGE: GDScript
CODE:
func add_source(source: TileSetSource, atlas_source_id_override: int = -1) -> int:
    # Implementation details

----------------------------------------

TITLE: Accessing Editor Settings in C#
DESCRIPTION: Shows how to access and modify editor settings programmatically from C#

LANGUAGE: csharp
CODE:
EditorSettings settings = EditorInterface.Singleton.GetEditorSettings();
settings.SetSetting("some/property", Value);
settings.GetSetting("some/property");
Godot.Collections.Array<Godot.Collections.Dictionary> listOfSettings = settings.GetPropertyList();

----------------------------------------

TITLE: Using range to generate sequences
DESCRIPTION: Demonstrates different ways to use the range function to generate sequences of numbers.

LANGUAGE: GDScript
CODE:
print(range(4))        # Prints [0, 1, 2, 3]
print(range(2, 5))     # Prints [2, 3, 4]
print(range(0, 6, 2))  # Prints [0, 2, 4]
print(range(4, 1, -1)) # Prints [4, 3, 2]

----------------------------------------

TITLE: Accessing Java Parent Class in Godot
DESCRIPTION: Returns a JavaClass instance representing the parent class of the current Java class. This method is constant and has no side effects.

LANGUAGE: GDScript
CODE:
get_java_parent_class()

----------------------------------------

TITLE: Setting Up AudioStreamPlayer3D
DESCRIPTION: Example of how to set up basic properties of an AudioStreamPlayer3D node.

LANGUAGE: GDScript
CODE:
var audio_player = AudioStreamPlayer3D.new()
audio_player.stream = preload("res://my_sound.ogg")
audio_player.unit_size = 50.0
audio_player.max_db = 5.0
audio_player.autoplay = true
add_child(audio_player)

----------------------------------------

TITLE: Accessing EditorSettings in C#
DESCRIPTION: Demonstrates how to access the EditorSettings singleton in C# using the Singleton property.

LANGUAGE: csharp
CODE:
EditorSettings settings = EditorInterface.Singleton.GetEditorSettings();

----------------------------------------

TITLE: Creating and Showing a Popup Window in GDScript
DESCRIPTION: Example of creating a popup window and displaying it centered on the screen.

LANGUAGE: gdscript
CODE:
var popup = Window.new()
popup.title = "Popup Window"
popup.size = Vector2i(300, 200)
popup.popup_centered()

----------------------------------------

TITLE: Getting Port Type in VisualShaderNodeReroute
DESCRIPTION: A method that returns the current port type of the reroute node. This method is constant and doesn't modify any instance variables.

LANGUAGE: gdscript
CODE:
PortType get_port_type() const

----------------------------------------

TITLE: Setting Transition Type for MethodTweener in GDScript
DESCRIPTION: Sets the transition type for the MethodTweener from the TransitionType enum. Returns the MethodTweener instance for method chaining.

LANGUAGE: GDScript
CODE:
set_trans(trans: Tween.TransitionType) -> MethodTweener

----------------------------------------

TITLE: Godot Integration in Kotlin Activity
DESCRIPTION: Kotlin code showing how to integrate Godot Fragment into an Android Activity.

LANGUAGE: kotlin
CODE:
private var godotFragment: GodotFragment? = null

override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)

    setContentView(R.layout.activity_main)

    val currentGodotFragment = supportFragmentManager.findFragmentById(R.id.godot_fragment_container)
    if (currentGodotFragment is GodotFragment) {
        godotFragment = currentGodotFragment
    } else {
        godotFragment = GodotFragment()
        supportFragmentManager.beginTransaction()
            .replace(R.id.godot_fragment_container, godotFragment!!)
            .commitNowAllowingStateLoss()
    }

    ...

----------------------------------------

TITLE: Basic File Operations Example - C#
DESCRIPTION: Example showing how to write and read string content to/from a file using FileAccess in C#.

LANGUAGE: csharp
CODE:
public void SaveToFile(string content)
{
    using var file = FileAccess.Open("user://save_game.dat", FileAccess.ModeFlags.Write);
    file.StoreString(content);
}

public string LoadFromFile()
{
    using var file = FileAccess.Open("user://save_game.dat", FileAccess.ModeFlags.Read);
    string content = file.GetAsText();
    return content;
}

----------------------------------------

TITLE: Integer Literals in GDScript
DESCRIPTION: Shows different ways to represent integer literals using binary, hexadecimal and decimal notation with separators.

LANGUAGE: gdscript
CODE:
var x = 0b1001 # x is 9
var y = 0xF5 # y is 245
var z = 10_000_000 # z is 10000000

----------------------------------------

TITLE: Getting the Primary TextServer Interface
DESCRIPTION: Shows how to get the currently active TextServer instance.

LANGUAGE: gdscript
CODE:
var ts = TextServerManager.get_primary_interface()

LANGUAGE: csharp
CODE:
var ts = TextServerManager.GetPrimaryInterface();

----------------------------------------

TITLE: Node2D Default Property Values
DESCRIPTION: Default values for Node2D transform properties.

LANGUAGE: restructuredtext
CODE:
position = Vector2(0, 0)
rotation = 0.0
scale = Vector2(1, 1)
skew = 0.0

----------------------------------------

TITLE: Putting ASCII string data in GDScript
DESCRIPTION: Demonstrates how to put an ASCII string into the stream without prepending its size using put_data() method.

LANGUAGE: gdscript
CODE:
put_data("Hello world".to_ascii_buffer())

----------------------------------------

TITLE: Handling Resource Types in EditorResourcePreviewGenerator
DESCRIPTION: This method checks if the generator supports a specific resource type. Implement to return true for supported types.

LANGUAGE: GDScript
CODE:
func _handles(type: String) -> bool:
    # Check if type is supported
    return false

----------------------------------------

TITLE: Updating ImageTexture3D Data
DESCRIPTION: Updates the existing texture data with new image layers. The data array size must match the original texture parameters.

LANGUAGE: GDScript
CODE:
update(data: Array[Image])

----------------------------------------

TITLE: Setting Member Keyword Colors Example - CodeHighlighter
DESCRIPTION: Example of setting color for a member keyword that will be highlighted when not preceded by a dot.

LANGUAGE: GDScript
CODE:
add_member_keyword_color("self", Color(0.9, 0.3, 0.3))

----------------------------------------

TITLE: Triggering Custom Input Events in GDScript
DESCRIPTION: Example of programmatically triggering an input event using parse_input_event()

LANGUAGE: gdscript
CODE:
var cancel_event = InputEventAction.new()
cancel_event.action = "ui_cancel"
cancel_event.pressed = true
Input.parse_input_event(cancel_event)

----------------------------------------

TITLE: Using the acos() function
DESCRIPTION: Shows how to use the acos() function to get the arc cosine of a value.

LANGUAGE: GDScript
CODE:
# c is 0.523599 or 30 degrees if converted with rad_to_deg(c)
var c = acos(0.866025)

----------------------------------------

TITLE: Disabling a Feature in EditorFeatureProfile
DESCRIPTION: Disables a specific editor feature using the set_disable_feature method. This example disables the 3D editor feature.

LANGUAGE: GDScript
CODE:
var profile = EditorFeatureProfile.new()
profile.set_disable_feature(EditorFeatureProfile.FEATURE_3D, true)

----------------------------------------

TITLE: Removing Collision Exception from Physical Bones in GDScript
DESCRIPTION: Removes a previously added collision exception from the physical bones.

LANGUAGE: GDScript
CODE:
physical_bones_remove_collision_exception(exception: RID) -> void

----------------------------------------

TITLE: Configuring Bone Joints
DESCRIPTION: Example demonstrating how to set up the two bone joints for the IK modification

LANGUAGE: gdscript
CODE:
var mod = SkeletonModification2DTwoBoneIK.new()
mod.set_joint_one_bone2d_node(NodePath("Bone1"))
mod.set_joint_one_bone_idx(0)
mod.set_joint_two_bone2d_node(NodePath("Bone2"))
mod.set_joint_two_bone_idx(1)

----------------------------------------

TITLE: Pushing Toast Notification in Godot Editor
DESCRIPTION: This method pushes a toast notification to the editor for display. It takes a message string, a severity level, and an optional tooltip string as parameters.

LANGUAGE: gdscript
CODE:
push_toast(message: String, severity: Severity = 0, tooltip: String = "")

----------------------------------------

TITLE: Property Getters and Setters for InputEventWithModifiers
DESCRIPTION: Code showing the property declarations and their getter/setter methods for managing modifier key states. These include alt_pressed, ctrl_pressed, meta_pressed, shift_pressed and command_or_control_autoremap properties.

LANGUAGE: GDScript
CODE:
bool alt_pressed = false
bool command_or_control_autoremap = false
bool ctrl_pressed = false
bool meta_pressed = false
bool shift_pressed = false

----------------------------------------

TITLE: Generating and Accessing NoiseTexture2D Data in GDScript
DESCRIPTION: This snippet demonstrates how to create a NoiseTexture2D, set its noise generator, wait for it to be generated, and then access the image data.

LANGUAGE: gdscript
CODE:
var texture = NoiseTexture2D.new()
texture.noise = FastNoiseLite.new()
await texture.changed
var image = texture.get_image()
var data = image.get_data()

----------------------------------------

TITLE: Accessing EditorSettings in GDScript
DESCRIPTION: Shows how to access the EditorSettings singleton in GDScript.

LANGUAGE: gdscript
CODE:
var editor_settings = EditorInterface.get_editor_settings()

----------------------------------------

TITLE: Loading CryptoKey from File in GDScript
DESCRIPTION: Loads a cryptographic key from a file path. Can optionally load only the public key.

LANGUAGE: GDScript
CODE:
load(path: String, public_only: bool = false) -> Error

----------------------------------------

TITLE: Putting UTF-8 string data in C#
DESCRIPTION: Demonstrates putting a UTF-8 string into the stream without prepending its size using PutData() method in C#.

LANGUAGE: csharp
CODE:
PutData("Hello World".ToUtf8Buffer());

----------------------------------------

TITLE: Posting to a Semaphore in GDScript
DESCRIPTION: Lowers the Semaphore, allowing one or more threads to proceed. The count parameter specifies how many threads can be allowed through.

LANGUAGE: GDScript
CODE:
post(count: int = 1)

----------------------------------------

TITLE: Initializing PackedColorArray with values in GDScript
DESCRIPTION: Example showing how to initialize a PackedColorArray with Color values

LANGUAGE: gdscript
CODE:
var array = PackedColorArray([Color(0.1, 0.2, 0.3), Color(0.4, 0.5, 0.6)])

----------------------------------------

TITLE: Setting Frame Properties Example - GDScript
DESCRIPTION: Example showing how to configure basic properties of a VisualShaderNodeFrame instance

LANGUAGE: GDScript
CODE:
var frame = VisualShaderNodeFrame.new()
frame.title = "My Frame"
frame.tint_color_enabled = true
frame.tint_color = Color(0.3, 0.3, 0.3, 0.75)
frame.autoshrink = true

----------------------------------------

TITLE: Getting Intersected Shape Example in C#
DESCRIPTION: Shows how to get the shape node of an intersected CollisionObject3D using shape IDs and owner IDs

LANGUAGE: csharp
CODE:
var target = (CollisionObject3D)GetCollider(); // A CollisionObject3D.
var shapeId = GetColliderShape(); // The shape index in the collider.
var ownerId = target.ShapeFindOwner(shapeId); // The owner ID in the collider.
var shape = target.ShapeOwnerGetOwner(ownerId);

----------------------------------------

TITLE: Clearing Audio Buffer in AudioStreamGeneratorPlayback
DESCRIPTION: Clears the audio sample data buffer.

LANGUAGE: gdscript
CODE:
clear_buffer()

----------------------------------------

TITLE: Setting Pixel Color in GDScript
DESCRIPTION: Creates an image and sets the color of a specific pixel using set_pixel()

LANGUAGE: gdscript
CODE:
var img_width = 10
var img_height = 5
var img = Image.create(img_width, img_height, false, Image.FORMAT_RGBA8)

img.set_pixel(1, 2, Color.RED) # Sets the color at (1, 2) to red.

----------------------------------------

TITLE: Getting Selected Cells
DESCRIPTION: Method that returns an array of Vector3i coordinates for all selected cells.

LANGUAGE: GDScript
CODE:
Array get_selected_cells() const

----------------------------------------

TITLE: Polygon Translation in C#
DESCRIPTION: Shows how to translate a polygon's vertices using a Transform2D in C#.

LANGUAGE: csharp
CODE:
Vector2[] polygon = [new Vector2(0, 0), new Vector2(100, 0), new Vector2(100, 100), new Vector2(0, 100)];
var offset = new Vector2(50, 50);
polygon = new Transform2D(0, offset) * polygon;
GD.Print((Variant)polygon); // Prints [(50, 50), (150, 50), (150, 150), (50, 150)]

----------------------------------------

TITLE: Getting Shader Parameter in GDScript
DESCRIPTION: Retrieves the current value of a uniform parameter in the shader material. The parameter name is case-sensitive and must match the name in the shader code exactly.

LANGUAGE: GDScript
CODE:
var value = get_shader_parameter("param_name")

----------------------------------------

TITLE: Setting Cull Mask Property
DESCRIPTION: Property for configuring which particle rendering layers will be affected by the collision shape. Default value is 4294967295 (all layers). Used to selectively enable/disable collision for different particle systems.

LANGUAGE: GDScript
CODE:
# Get current cull mask
var mask = collision_shape.get_cull_mask()

# Set new cull mask
collision_shape.set_cull_mask(new_mask)

----------------------------------------

TITLE: Adding Color Region Example - CodeHighlighter
DESCRIPTION: Example of adding a color region for syntax highlighting. Useful for defining regions like comments or strings with specific colors.

LANGUAGE: GDScript
CODE:
add_color_region("//", "", Color(0.5, 0.5, 0.5), true)

----------------------------------------

TITLE: GLTFNode Scene Path
DESCRIPTION: Example of getting the node path in the final Godot scene

LANGUAGE: GDScript
CODE:
var node = GLTFNode.new()
var gltf_state = GLTFState.new()
var node_path = node.get_scene_node_path(gltf_state, true)

----------------------------------------

TITLE: Setting Default Vector2 Value in GDScript
DESCRIPTION: Sets the default Vector2 value for the shader parameter. This value will be used if default_value_enabled is true.

LANGUAGE: gdscript
CODE:
var vec2_param = VisualShaderNodeVec2Parameter.new()
vec2_param.set_default_value(Vector2(1.0, 2.0))

----------------------------------------

TITLE: Setting Source Image Property in GLTFTexture
DESCRIPTION: Defines a property for specifying the index of the associated image. When set to -1, indicates no image is assigned to the texture.

LANGUAGE: gdscript
CODE:
var src_image: int = -1

----------------------------------------

TITLE: Setting FABRIK Joint Properties
DESCRIPTION: Example showing property access methods for FABRIK joints including setting bone nodes, indices, magnet positions and target rotation behavior.

LANGUAGE: GDScript
CODE:
# Set bone node for joint
set_fabrik_joint_bone2d_node(joint_idx, bone2d_nodepath)

# Set bone index for joint
set_fabrik_joint_bone_index(joint_idx, bone_idx)

# Set magnet position for joint
set_fabrik_joint_magnet_position(joint_idx, magnet_position)

# Configure target rotation usage
set_fabrik_joint_use_target_rotation(joint_idx, use_target_rotation)

----------------------------------------

TITLE: Implementing Resource Loader Methods
DESCRIPTION: Required methods to implement when creating a custom ResourceFormatLoader. Includes handling file extensions, dependencies, resource types and loading logic.

LANGUAGE: GDScript
CODE:
func _get_recognized_extensions() -> PackedStringArray:
    return ["ext"]

func _get_resource_type(path: String) -> String:
    return "Resource"

func _handles_type(type: StringName) -> bool:
    return type == "Resource"

func _load(path: String, original_path: String, use_sub_threads: bool, cache_mode: int) -> Variant:
    # Load resource implementation
    return null

----------------------------------------

TITLE: Adding Custom Property Info
DESCRIPTION: Example of adding custom property information with type hints

LANGUAGE: gdscript
CODE:
var settings = EditorInterface.get_editor_settings()
settings.set("category/property_name", 0)

var property_info = {
    "name": "category/property_name",
    "type": TYPE_INT,
    "hint": PROPERTY_HINT_ENUM,
    "hint_string": "one,two,three"
}

settings.add_property_info(property_info)

----------------------------------------

TITLE: AudioEffectEQ6 Class Definition
DESCRIPTION: Class definition showing inheritance hierarchy and core functionality of the AudioEffectEQ6 class. This 6-band equalizer provides control over frequencies between 32 Hz and 10000 Hz, with modulation range of -60/+24 dB per band.

LANGUAGE: rst
CODE:
AudioEffectEQ6
==============

**Inherits:** :ref:`AudioEffectEQ<class_AudioEffectEQ>` **<** :ref:`AudioEffect<class_AudioEffect>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

----------------------------------------

TITLE: Creating Vector2 from Angle Example in GDScript
DESCRIPTION: Shows how to create a unit Vector2 from an angle

LANGUAGE: gdscript
CODE:
print(Vector2.from_angle(0)) # Prints (1.0, 0.0)
print(Vector2(1, 0).angle()) # Prints 0.0, which is the angle used above.
print(Vector2.from_angle(PI / 2)) # Prints (0.0, 1.0)

----------------------------------------

TITLE: Setting and Getting Curve2D Property in Path2D
DESCRIPTION: Demonstrates how to set and get the Curve2D property of a Path2D object. The curve property describes the path that PathFollow2D nodes can follow.

LANGUAGE: GDScript
CODE:
# Setting the curve
set_curve(value: Curve2D)

# Getting the curve
get_curve() -> Curve2D

----------------------------------------

TITLE: ParallaxLayer Properties Reference
DESCRIPTION: Configuration properties available for the ParallaxLayer node including motion scaling, offset, and mirroring settings.

LANGUAGE: RST
CODE:
+---------------------------------------------------------------------+------------------------------------------------------------------------+-------------------------------------------------------------------------------+
| Vector2                                                                  | motion_mirroring                                                           | Vector2(0, 0)                                                               |
+---------------------------------------------------------------------+------------------------------------------------------------------------+-------------------------------------------------------------------------------+
| Vector2                                                                  | motion_offset                                                              | Vector2(0, 0)                                                               |
+---------------------------------------------------------------------+------------------------------------------------------------------------+-------------------------------------------------------------------------------+
| Vector2                                                                  | motion_scale                                                               | Vector2(1, 1)                                                               |
+---------------------------------------------------------------------+------------------------------------------------------------------------+-------------------------------------------------------------------------------+
| PhysicsInterpolationMode                                                 | physics_interpolation_mode                                                 | 2                                                                           |
+---------------------------------------------------------------------+------------------------------------------------------------------------+-------------------------------------------------------------------------------+

----------------------------------------

TITLE: Accessing Resolved Depth Buffer in GDScript
DESCRIPTION: Example showing how to access the resolved depth buffer inside a render callback when MSAA is enabled

LANGUAGE: gdscript
CODE:
var render_scene_buffers = render_data.get_render_scene_buffers()
var depth_buffer = render_scene_buffers.get_texture("render_buffers", "depth")

----------------------------------------

TITLE: Setting BoxShape3D Size in GDScript
DESCRIPTION: Demonstrates how to set the size property of a BoxShape3D instance. The size is a Vector3 representing the box's width, height, and depth.

LANGUAGE: gdscript
CODE:
var box_shape = BoxShape3D.new()
box_shape.size = Vector3(2, 3, 1)

----------------------------------------

TITLE: Waiting on a Semaphore in GDScript
DESCRIPTION: Waits for the Semaphore to become non-zero. If the Semaphore value is zero, this method blocks until it becomes non-zero.

LANGUAGE: GDScript
CODE:
wait()

----------------------------------------

TITLE: Setting Range Value Without Signal
DESCRIPTION: Method to set the Range's value without emitting the value_changed signal. Takes a float parameter for the new value.

LANGUAGE: gdscript
CODE:
set_value_no_signal(value: float) -> void

----------------------------------------

TITLE: GLTFNode Basic Usage
DESCRIPTION: Shows basic usage of GLTFNode properties to set up node transforms and relationships

LANGUAGE: GDScript
CODE:
var node = GLTFNode.new()
node.position = Vector3(1, 2, 3)
node.rotation = Quaternion(0, 0, 0, 1)
node.scale = Vector3(1, 1, 1)
node.parent = 0 # Parent node index
node.append_child_index(1) # Add child node index

----------------------------------------

TITLE: Creating HeightMapShape3D from Image in GDScript
DESCRIPTION: This snippet demonstrates how to create a HeightMapShape3D using an image file. It loads a heightmap texture, converts it to the required format, and updates the shape's map data with specified height range.

LANGUAGE: gdscript
CODE:
var heightmap_texture = ResourceLoader.load("res://heightmap_image.exr")
var heightmap_image = heightmap_texture.get_image()
heightmap_image.convert(Image.FORMAT_RF)

var height_min = 0.0
var height_max = 10.0

update_map_data_from_image(heightmap_image, height_min, height_max)

----------------------------------------

TITLE: Clearing IDs from RDUniform in GDScript
DESCRIPTION: Removes all currently bound IDs from the uniform.

LANGUAGE: GDScript
CODE:
clear_ids()

----------------------------------------

TITLE: Adding Items to an ItemList
DESCRIPTION: Demonstrates how to add items with text and icons to an ItemList control.

LANGUAGE: gdscript
CODE:
var item_list = ItemList.new()

# Add a text-only item
item_list.add_item("Item 1")

# Add an item with text and icon
var icon = preload("res://icon.png")
item_list.add_item("Item 2", icon)

# Add an icon-only item
item_list.add_icon_item(icon)

----------------------------------------

TITLE: Adding a Custom Data Layer in TileSet
DESCRIPTION: Adds a custom data layer to the TileSet at the specified position or at the end if not specified.

LANGUAGE: GDScript
CODE:
func add_custom_data_layer(to_position: int = -1) -> void:
    # Implementation details

----------------------------------------

TITLE: Vector3 Rotation and Transformation
DESCRIPTION: Demonstrates how to rotate a vector and transform it using a basis.

LANGUAGE: gdscript
CODE:
var v = Vector3(1, 0, 0)
var axis = Vector3(0, 1, 0)
var angle = PI / 2 # 90 degrees
var rotated = v.rotated(axis, angle)
print(rotated) # Outputs: (0, 0, -1)

var basis = Basis(Vector3(0, 1, 0), PI / 4) # 45 degrees around Y axis
var transformed = basis * v
print(transformed) # Outputs: (0.707107, 0, -0.707107)

----------------------------------------

TITLE: Multiplying Color by float in GDScript
DESCRIPTION: Demonstrates multiplying each component of a Color by a float value.

LANGUAGE: GDScript
CODE:
print(1.5 * Color(0.5, 0.5, 0.5)) # Prints (0.75, 0.75, 0.75, 1.5)

----------------------------------------

TITLE: Running Frames Check Example
DESCRIPTION: Example demonstrating how to execute code based on process frame count

LANGUAGE: gdscript
CODE:
func _process(_delta):
    if Engine.get_process_frames() % 5 == 0:
        pass # Run expensive logic only once every 5 process (render) frames here.

LANGUAGE: csharp
CODE:
public override void _Process(double delta)
{
    base._Process(delta);

    if (Engine.GetProcessFrames() % 5 == 0)
    {
        // Run expensive logic only once every 5 process (render) frames here.
    }
}

----------------------------------------

TITLE: Creating and Using HMACContext in GDScript
DESCRIPTION: This snippet demonstrates how to create an HMACContext, initialize it with a key, update it with message parts, and finish to get the HMAC result.

LANGUAGE: gdscript
CODE:
extends Node
var ctx = HMACContext.new()

func _ready():
    var key = "supersecret".to_utf8_buffer()
    var err = ctx.start(HashingContext.HASH_SHA256, key)
    assert(err == OK)
    var msg1 = "this is ".to_utf8_buffer()
    var msg2 = "super duper secret".to_utf8_buffer()
    err = ctx.update(msg1)
    assert(err == OK)
    err = ctx.update(msg2)
    assert(err == OK)
    var hmac = ctx.finish()
    print(hmac.hex_encode())

----------------------------------------

TITLE: Accessing Vertex Data in Faces
DESCRIPTION: Example demonstrating how to access vertex data through face indices.

LANGUAGE: gdscript
CODE:
var index = mesh_data_tool.get_face_vertex(0, 1) # Gets the index of the second vertex of the first face.
var position = mesh_data_tool.get_vertex(index)
var normal = mesh_data_tool.get_vertex_normal(index)

----------------------------------------

TITLE: Setting XROrigin3D Properties in GDScript
DESCRIPTION: Demonstrates the core property setters and getters for XROrigin3D class including current status and world scale configuration.

LANGUAGE: GDScript
CODE:
# Set/get whether this origin is currently active
set_current(value: bool) -> void
is_current() -> bool

# Set/get the world scale (1.0 = 1 meter)
set_world_scale(value: float) -> void
get_world_scale() -> float

----------------------------------------

TITLE: Setting Debanding Usage in RenderSceneBuffersExtension
DESCRIPTION: Implement this method in GDExtension to react to changes in the debanding flag. It takes a boolean parameter indicating whether debanding should be used.

LANGUAGE: GDScript
CODE:
func _set_use_debanding(use_debanding: bool) -> void:

----------------------------------------

TITLE: Setting up Basic TextMesh Properties
DESCRIPTION: Example showing how to set basic properties of a TextMesh including text content, font size, and alignment.

LANGUAGE: GDScript
CODE:
var text_mesh = TextMesh.new()
text_mesh.text = "Hello World"
text_mesh.font_size = 16
text_mesh.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
text_mesh.vertical_alignment = VERTICAL_ALIGNMENT_CENTER

----------------------------------------

TITLE: Setting Sphere Collision Radius Property
DESCRIPTION: Property to control the radius of the sphere collision shape in 3D units. Includes getter and setter methods.

LANGUAGE: gdscript
CODE:
radius = 1.0  # Default value

# Setter method
set_radius(value: float)

# Getter method
get_radius() -> float

----------------------------------------

TITLE: TransitionToTime Enumeration
DESCRIPTION: Enumeration defining where playback should start in the target clip during transitions.

LANGUAGE: rst
CODE:
enum **TransitionToTime**:
    **TRANSITION_TO_TIME_SAME_POSITION** = "0"
    **TRANSITION_TO_TIME_START** = "1"

----------------------------------------

TITLE: Loading and Applying a Font File in C#
DESCRIPTION: Example of loading a TTF font file and applying it to a Label node with custom font size

LANGUAGE: csharp
CODE:
var f = ResourceLoader.Load<FontFile>("res://BarlowCondensed-Bold.ttf");
GetNode("Label").AddThemeFontOverride("font", f);
GetNode("Label").AddThemeFontSizeOverride("font_size", 64);

----------------------------------------

TITLE: Accessing Motion Vector Buffer in GDScript
DESCRIPTION: Example showing how to access the motion vector buffer when motion vectors are enabled

LANGUAGE: gdscript
CODE:
var render_scene_buffers = render_data.get_render_scene_buffers()
var motion_buffer = render_scene_buffers.get_velocity_texture()

----------------------------------------

TITLE: Implementing CCDIK Joint Methods
DESCRIPTION: Method implementations for managing CCDIK joints, including bone assignments, constraints, and rotation settings.

LANGUAGE: RST
CODE:
|void| **set_ccdik_joint_bone2d_node**\ (\ joint_idx\: :ref:`int<class_int>`, bone2d_nodepath\: :ref:`NodePath<class_NodePath>`\ )

|void| **set_ccdik_joint_constraint_angle_max**\ (\ joint_idx\: :ref:`int<class_int>`, angle_max\: :ref:`float<class_float>`\ )

|void| **set_ccdik_joint_rotate_from_joint**\ (\ joint_idx\: :ref:`int<class_int>`, rotate_from_joint\: :ref:`bool<class_bool>`\ )

----------------------------------------

TITLE: Chroma Key Control Script in GDScript
DESCRIPTION: GDScript code for handling UI controls to adjust chroma key shader parameters in real-time during video playback.

LANGUAGE: gdscript
CODE:
extends Control

func _on_color_picker_button_color_changed(color):
    $VideoStreamPlayer.material.set("shader_parameter/chroma_key_color", color)

func _on_h_slider_value_changed(value):
    $VideoStreamPlayer.material.set("shader_parameter/pickup_range", value)

func _on_h_slider_2_value_changed(value):
    $VideoStreamPlayer.material.set("shader_parameter/fade_amount", value)

func _on_video_stream_player_finished():
    $VideoStreamPlayer.play()

----------------------------------------

TITLE: Using Rect2 abs() Method in C#
DESCRIPTION: Shows the C# equivalent of getting a rectangle with non-negative size using abs().

LANGUAGE: csharp
CODE:
var rect = new Rect2(25, 25, -100, -50);
var absolute = rect.Abs(); // absolute is Rect2(-75, -25, 100, 50)

----------------------------------------

TITLE: Casting Motion Method Definition
DESCRIPTION: Virtual method for implementing custom motion casting functionality. Takes shape parameters and returns collision information.

LANGUAGE: gdscript
CODE:
bool _cast_motion(RID shape_rid, Transform3D transform, Vector3 motion, float margin, int collision_mask, bool collide_with_bodies, bool collide_with_areas, float* closest_safe, float* closest_unsafe, PhysicsServer3DExtensionShapeRestInfo* info)

----------------------------------------

TITLE: CanvasItemMaterial Blend Mode Constants
DESCRIPTION: Enumeration defining the available blend modes for canvas item materials, including mix, add, subtract, multiply and premultiplied alpha modes.

LANGUAGE: GDScript
CODE:
BLEND_MODE_MIX = 0
BLEND_MODE_ADD = 1
BLEND_MODE_SUB = 2
BLEND_MODE_MUL = 3
BLEND_MODE_PREMULT_ALPHA = 4

----------------------------------------

TITLE: Setting Background Color
DESCRIPTION: Sets the background color to red

LANGUAGE: GDScript
CODE:
var environment = Environment.new()
environment.background_color = Color.RED

----------------------------------------

TITLE: Setting Replication Mode for a Property in GDScript
DESCRIPTION: Sets the replication mode for a specific property using a NodePath and ReplicationMode enum value.

LANGUAGE: GDScript
CODE:
config.property_set_replication_mode("player/health", SceneReplicationConfig.REPLICATION_MODE_ON_CHANGE)

----------------------------------------

TITLE: CheckButton Theme Constants and Properties
DESCRIPTION: Details theme constants and properties available for the CheckButton control including vertical offset and icons for different states.

LANGUAGE: RST
CODE:
+-------------------------------------------------------------------+-------------+-------------------------------------------------------------------------------+
| HorizontalAlignment                                                | alignment   | ``0`` (overrides Button.alignment)                                             |
+-------------------------------------------------------------------+-------------+-------------------------------------------------------------------------------+
| bool                                                           | toggle_mode | ``true`` (overrides BaseButton.toggle_mode)                                 |
+-------------------------------------------------------------------+-------------+-------------------------------------------------------------------------------+

----------------------------------------

TITLE: Getting BoxShape3D Size in GDScript
DESCRIPTION: Shows how to retrieve the current size of a BoxShape3D instance. The get_size() method returns a Vector3 representing the box's dimensions.

LANGUAGE: gdscript
CODE:
var box_shape = BoxShape3D.new()
var current_size = box_shape.get_size()

----------------------------------------

TITLE: Accessing EditorScriptPicker Properties
DESCRIPTION: Methods for getting and setting the script owner Node property. The script_owner property must be set for custom context menu items to function.

LANGUAGE: GDScript
CODE:
set_script_owner(value: Node) -> void
get_script_owner() -> Node

----------------------------------------

TITLE: Signal Parameter Binding in C#
DESCRIPTION: Demonstrates how to bind parameters when connecting signals and their interaction with emitted signal parameters in C#.

LANGUAGE: csharp
CODE:
public override void _Ready()
{
    // This assumes that a `Player` class exists, which defines a `Hit` signal.
    var player = new Player();
    // Using lambda expressions that create a closure that captures the additional parameters.
    // The lambda only receives the parameters defined by the signal's delegate.
    player.Hit += (hitBy, level) => OnPlayerHit(hitBy, level, "sword", 100);

    // Parameters added when emitting the signal are passed first.
    player.EmitSignal(SignalName.Hit, "Dark lord", 5);
}

// We pass two arguments when emitting (`hit_by`, `level`),
// and bind two more arguments when connecting (`weapon_type`, `damage`).
private void OnPlayerHit(string hitBy, int level, string weaponType, int damage)
{
    GD.Print($"Hit by {hitBy} (level {level}) with weapon {weaponType} for {damage} damage.");
}

----------------------------------------

TITLE: Checking for Available Connections in GDScript
DESCRIPTION: Checks if there are any connections available to be accepted by the TCP server. Returns a boolean value.

LANGUAGE: GDScript
CODE:
bool is_connection_available() const

----------------------------------------

TITLE: Rectangle Intersection Example in GDScript
DESCRIPTION: Demonstrates how to get the intersection between two rectangles.

LANGUAGE: gdscript
CODE:
var rect1 = Rect2(0, 0, 5, 10)
var rect2 = Rect2(2, 0, 8, 4)

var a = rect1.intersection(rect2) # a is Rect2(2, 0, 3, 4)

----------------------------------------

TITLE: Asynchronous DNS Resolution in GDScript
DESCRIPTION: This snippet demonstrates how to perform asynchronous DNS resolution using resolve_hostname_queue_item() and related methods. It allows for non-blocking hostname resolution.

LANGUAGE: GDScript
CODE:
var hostname = "example.com"
var query_id = IP.resolve_hostname_queue_item(hostname, IP.TYPE_ANY)

# Check status later
var status = IP.get_resolve_item_status(query_id)
if status == IP.RESOLVER_STATUS_DONE:
    var resolved_ip = IP.get_resolve_item_address(query_id)
    print("Resolved IP: %s" % resolved_ip)
    IP.erase_resolve_item(query_id)

----------------------------------------

TITLE: Setting Gradient Interpolation Mode in GDScript
DESCRIPTION: Shows how to set the interpolation mode for a Gradient.

LANGUAGE: GDScript
CODE:
var gradient = Gradient.new()
gradient.interpolation_mode = Gradient.GRADIENT_INTERPOLATE_CUBIC
gradient.interpolation_color_space = Gradient.GRADIENT_COLOR_SPACE_OKLAB

----------------------------------------

TITLE: Getting Texture of GPUParticlesAttractorVectorField3D in GDScript
DESCRIPTION: Retrieves the current 3D texture used for the attraction field.

LANGUAGE: GDScript
CODE:
var texture = attractor.get_texture()

----------------------------------------

TITLE: XRHandModifier3D BoneUpdate Enumeration
DESCRIPTION: Defines the bone update modes for hand tracking: full update (position and rotation), rotation only, and enum size constant.

LANGUAGE: rst
CODE:
BONE_UPDATE_FULL = ``0``
BONE_UPDATE_ROTATION_ONLY = ``1``
BONE_UPDATE_MAX = ``2``

----------------------------------------

TITLE: Setting PlaceholderTexture3D Size in GDScript
DESCRIPTION: Demonstrates how to set the size of a PlaceholderTexture3D object. The size is represented as a Vector3i, specifying the dimensions in pixels.

LANGUAGE: GDScript
CODE:
var texture = PlaceholderTexture3D.new()
texture.set_size(Vector3i(256, 256, 256))

----------------------------------------

TITLE: Setting Decal Sorting Offset in GDScript
DESCRIPTION: Demonstrates how to set the sorting offset property of a Decal node to control rendering order. Higher values make the decal render on top of others, while negative values make it render behind.

LANGUAGE: GDScript
CODE:
# Ensure the decal is always rendered on top
decal.set_sorting_offset(10.0)

# Make the decal render behind others
decal.set_sorting_offset(-10.0)

----------------------------------------

TITLE: Printing Hello World from Godot Editor in GDScript
DESCRIPTION: Demonstrates how to create an EditorScript that prints a message to the editor console when run. The script must have tool mode enabled to execute in the editor context.

LANGUAGE: gdscript
CODE:
@tool
extends EditorScript

func _run():
    print("Hello from the Godot Editor!")

----------------------------------------

TITLE: Register Message Capture
DESCRIPTION: Registers a message capture handler for debugging messages with a specific prefix. The callable receives the message without prefix and data array.

LANGUAGE: GDScript
CODE:
EngineDebugger.register_message_capture("my_message", my_callable)

----------------------------------------

TITLE: Enumeration Definitions
DESCRIPTION: Enumerations for VisualShader including Type, VaryingMode and VaryingType with their possible values.

LANGUAGE: rst
CODE:
enum **Type**:
    **TYPE_VERTEX** = ``0``
    **TYPE_FRAGMENT** = ``1``
    **TYPE_LIGHT** = ``2``
    // ... etc

enum **VaryingMode**:
    **VARYING_MODE_VERTEX_TO_FRAG_LIGHT** = ``0``
    **VARYING_MODE_FRAG_TO_LIGHT** = ``1``
    // ... etc

enum **VaryingType**:
    **VARYING_TYPE_FLOAT** = ``0`` 
    **VARYING_TYPE_INT** = ``1``
    // ... etc

----------------------------------------

TITLE: Converting from GPUParticles3D
DESCRIPTION: Converting a GPUParticles3D node to CPUParticles3D

LANGUAGE: gdscript
CODE:
var cpu_particles = CPUParticles3D.new()
cpu_particles.convert_from_particles(gpu_particles_node)

----------------------------------------

TITLE: Defining Table of Contents for Shading Reference in reStructuredText
DESCRIPTION: This snippet creates a table of contents using reStructuredText directives. It sets up a toctree with maximum depth of 1 and includes various shader-related documentation pages.

LANGUAGE: reStructuredText
CODE:
.. toctree::
   :maxdepth: 1
   :name: toc-shading-reference

   shading_language
   shader_functions
   shader_preprocessor
   spatial_shader
   canvas_item_shader
   particle_shader
   sky_shader
   fog_shader

----------------------------------------

TITLE: Point Intersection Test in Godot 2D
DESCRIPTION: Method that checks if a point intersects with any solid shapes in physics space. Returns array of intersecting objects.

LANGUAGE: gdscript
CODE:
Array[Dictionary] intersect_point(parameters: PhysicsPointQueryParameters2D, max_results: int = 32)

----------------------------------------

TITLE: Get Render Scene Buffers Method Implementation
DESCRIPTION: Virtual method that must be implemented to return the RenderSceneBuffers object.

LANGUAGE: gdscript
CODE:
RenderSceneBuffers _get_render_scene_buffers() virtual const

----------------------------------------

TITLE: RST Class Declaration
DESCRIPTION: Defines the class hierarchy and inheritance structure for AudioEffectNotchFilter in Godot engine documentation format

LANGUAGE: rst
CODE:
.. _class_AudioEffectNotchFilter:

AudioEffectNotchFilter
======================

**Inherits:** :ref:`AudioEffectFilter<class_AudioEffectFilter>` **<** :ref:`AudioEffect<class_AudioEffect>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

----------------------------------------

TITLE: Getting Segments from ConcavePolygonShape2D in GDScript
DESCRIPTION: Shows how to retrieve the segments property from a ConcavePolygonShape2D object. The returned value is a PackedVector2Array containing pairs of points representing line segments.

LANGUAGE: GDScript
CODE:
var shape = ConcavePolygonShape2D.new()
var segments = shape.get_segments()

----------------------------------------

TITLE: Locking a Mutex in GDScript
DESCRIPTION: Locks the Mutex, blocking until it is unlocked by the current owner. This method returns without blocking if the thread already has ownership of the mutex.

LANGUAGE: GDScript
CODE:
mutex.lock()

----------------------------------------

TITLE: Retrieving Synchronized Properties in GDScript
DESCRIPTION: Gets an array of NodePaths for all synchronized properties.

LANGUAGE: GDScript
CODE:
var properties = config.get_properties()

----------------------------------------

TITLE: Getting Single Camera Feed Method
DESCRIPTION: Method to get a specific camera feed by index.

LANGUAGE: GDScript
CODE:
CameraFeed get_feed(index: int)

----------------------------------------

TITLE: Getting BoxOccluder3D Size in GDScript
DESCRIPTION: Shows how to retrieve the current size of a BoxOccluder3D object using the get_size method. The returned value is a Vector3 representing the dimensions of the box.

LANGUAGE: GDScript
CODE:
var box_occluder = BoxOccluder3D.new()
var size = box_occluder.get_size()
print("Box size: ", size)

----------------------------------------

TITLE: Converting Base64 to Raw Data
DESCRIPTION: Method to decode a Base64 string back into a PackedByteArray.

LANGUAGE: GDScript
CODE:
base64_to_raw(base64_str: String) -> PackedByteArray

----------------------------------------

TITLE: Enabling Fog
DESCRIPTION: Enables fog and sets its color

LANGUAGE: GDScript
CODE:
var environment = Environment.new()
environment.fog_enabled = true
environment.fog_light_color = Color(0.5, 0.6, 0.7)

----------------------------------------

TITLE: Creating a VCS Status File Dictionary
DESCRIPTION: Helper method to create a dictionary containing the status of a versioned file

LANGUAGE: GDScript
CODE:
create_status_file(file_path: String, change_type: ChangeType, area: TreeArea) -> Dictionary

----------------------------------------

TITLE: Implementing Monster Spawning Logic in GDScript
DESCRIPTION: Defines the _on_mob_timer_timeout function that handles monster spawning. It creates a new mob instance, chooses a random spawn location, and initializes the mob with its position and the player's position.

LANGUAGE: GDScript
CODE:
func _on_mob_timer_timeout():
    # Create a new instance of the Mob scene.
    var mob = mob_scene.instantiate()

    # Choose a random location on the SpawnPath.
    # We store the reference to the SpawnLocation node.
    var mob_spawn_location = get_node("SpawnPath/SpawnLocation")
    # And give it a random offset.
    mob_spawn_location.progress_ratio = randf()

    var player_position = $Player.position
    mob.initialize(mob_spawn_location.position, player_position)

    # Spawn the mob by adding it to the Main scene.
    add_child(mob)

----------------------------------------

TITLE: DampedSpringJoint2D Property Methods
DESCRIPTION: Getter and setter method signatures for accessing and modifying the joint's properties. These methods allow runtime modification of the spring joint's characteristics.

LANGUAGE: gdscript
CODE:
func set_damping(value: float) -> void
func get_damping() -> float
func set_length(value: float) -> void
func get_length() -> float
func set_rest_length(value: float) -> void
func get_rest_length() -> float
func set_stiffness(value: float) -> void
func get_stiffness() -> float

----------------------------------------

TITLE: Node Parenting Example
DESCRIPTION: Example showing how to move a child node between different parents

LANGUAGE: gdscript
CODE:
var child_node = get_child(0)
if child_node.get_parent():
    child_node.get_parent().remove_child(child_node)
add_child(child_node)

----------------------------------------

TITLE: Setting Delay for SubtweenTweener in GDScript
DESCRIPTION: Sets the time in seconds after which the SubtweenTweener will start running the subtween. By default, there's no delay.

LANGUAGE: GDScript
CODE:
set_delay(delay: float) -> SubtweenTweener

----------------------------------------

TITLE: Handling Window Input Events in GDScript
DESCRIPTION: Example of connecting to the window_input signal to handle input events.

LANGUAGE: gdscript
CODE:
func _ready():
    get_window().window_input.connect(_on_window_input)

func _on_window_input(event):
    if event is InputEventMouseButton:
        print("Mouse clicked at: ", event.position)

----------------------------------------

TITLE: Exporting Godot Project Pack File
DESCRIPTION: Command for exporting only the PCK/ZIP pack file from a Godot project, which can be used with multiple Godot executables.

LANGUAGE: shell
CODE:
godot --export-pack "Windows Desktop" some_name.pck

----------------------------------------

TITLE: Implementing DTLS Client in GDScript
DESCRIPTION: Example of a DTLS client that connects to a DTLS server and handles secure communication. Shows connection setup and packet exchange.

LANGUAGE: gdscript
CODE:
# client_node.gd
extends Node

var dtls = PacketPeerDTLS.new()
var udp = PacketPeerUDP.new()
var connected = false

func _ready():
    udp.connect_to_host("127.0.0.1", 4242)
    dtls.connect_to_peer(udp, false) # Use true in production for certificate validation!

func _process(delta):
    dtls.poll()
    if dtls.get_status() == PacketPeerDTLS.STATUS_CONNECTED:
        if !connected:
            # Try to contact server
            dtls.put_packet("The answer is... 42!".to_utf8_buffer())
        while dtls.get_available_packet_count() > 0:
            print("Connected: %s" % dtls.get_packet().get_string_from_utf8())
            connected = true

----------------------------------------

TITLE: Creating and Sampling a Gradient in GDScript
DESCRIPTION: Demonstrates how to create a Gradient, add color points, and sample colors from it.

LANGUAGE: GDScript
CODE:
var gradient = Gradient.new()
gradient.add_point(0.0, Color.red)
gradient.add_point(0.5, Color.green)
gradient.add_point(1.0, Color.blue)

var sampled_color = gradient.sample(0.25) # Returns a color between red and green

----------------------------------------

TITLE: Getting Action Events in Godot
DESCRIPTION: Retrieves all input events associated with a specific action from InputMap.

LANGUAGE: GDScript
CODE:
var events = InputMap.action_get_events("jump")

----------------------------------------

TITLE: XRHandModifier3D Properties and Enums Definition in RST
DESCRIPTION: Documents the properties and enumerations for XRHandModifier3D class, including bone update modes and hand tracker configuration.

LANGUAGE: rst
CODE:
+-----------------------------------------------------+-------------------------------------------------------------------+--------------------------------+
| BoneUpdate                                           | bone_update                                                         | ``0``                          |
+-----------------------------------------------------+-------------------------------------------------------------------+--------------------------------+
| StringName                                          | hand_tracker                                                        | ``&"/user/hand_tracker/left"`` |
+-----------------------------------------------------+-------------------------------------------------------------------+--------------------------------+

----------------------------------------

TITLE: Initializing Plane Constants
DESCRIPTION: Default plane constants defined in three orientations - YZ, XZ and XY planes.

LANGUAGE: GDScript
CODE:
PLANE_YZ = Plane(1, 0, 0, 0)
PLANE_XZ = Plane(0, 1, 0, 0)
PLANE_XY = Plane(0, 0, 1, 0)

----------------------------------------

TITLE: Interface Management Method Signatures in TextServerManager
DESCRIPTION: Core method signatures for managing TextServer interfaces, including adding, removing, finding, and setting the primary interface.

LANGUAGE: rst
CODE:
void add_interface(interface: TextServer)
TextServer find_interface(name: String) const
TextServer get_interface(idx: int) const
int get_interface_count() const
Array[Dictionary] get_interfaces() const
TextServer get_primary_interface() const
void remove_interface(interface: TextServer)
void set_primary_interface(index: TextServer)

----------------------------------------

TITLE: Calculating Particles Per Second
DESCRIPTION: Mathematical formula to calculate the emission rate based on the Amount and Lifetime properties of a particle system.

LANGUAGE: math
CODE:
Particles per second = Amount/Lifetime

----------------------------------------

TITLE: Getting Selected Nodes in GDScript
DESCRIPTION: Returns an array of currently selected nodes in the editor.

LANGUAGE: GDScript
CODE:
get_selected_nodes() -> Array[Node]

----------------------------------------

TITLE: Removing Old Mobs in GDScript
DESCRIPTION: Clears all existing mobs from the game scene using group functionality.

LANGUAGE: GDScript
CODE:
get_tree().call_group("mobs", "queue_free")

----------------------------------------

TITLE: Getting PlaceholderTexture3D Size in GDScript
DESCRIPTION: Shows how to retrieve the size of a PlaceholderTexture3D object. The size is returned as a Vector3i, representing the dimensions in pixels.

LANGUAGE: GDScript
CODE:
var texture = PlaceholderTexture3D.new()
var size = texture.get_size()
print("Texture size: ", size)

----------------------------------------

TITLE: Node Access Methods in GDScript
DESCRIPTION: Illustrates various ways to access and cache node references in GDScript, including dynamic lookups, onready variables, exported node references, and autoloads.

LANGUAGE: GDScript
CODE:
extends Node

# Slow.
func dynamic_lookup_with_dynamic_nodepath():
    print(get_node("Child"))

# Faster. GDScript only.
func dynamic_lookup_with_cached_nodepath():
    print($Child)

# Fastest. Doesn't break if node moves later.
# Note that `@onready` annotation is GDScript-only.
# Other languages must do...
#     var child
#     func _ready():
#         child = get_node("Child")
@onready var child = $Child
func lookup_and_cache_for_future_access():
    print(child)

# Fastest. Doesn't break if node is moved in the Scene tree dock.
# Node must be selected in the inspector as it's an exported property.
@export var child: Node
func lookup_and_cache_for_future_access():
    print(child)

# Delegate reference assignment to an external source.
# Con: need to perform a validation check.
# Pro: node makes no requirements of its external structure.
#      'prop' can come from anywhere.
var prop
func call_me_after_prop_is_initialized_by_parent():
    # Validate prop in one of three ways.

    # Fail with no notification.
    if not prop:
        return

    # Fail with an error message.
    if not prop:
        printerr("'prop' wasn't initialized")
        return

    # Fail and terminate.
    # NOTE: Scripts run from a release export template don't run `assert`s.
    assert(prop, "'prop' wasn't initialized")

# Use an autoload.
# Dangerous for typical nodes, but useful for true singleton nodes
# that manage their own data and don't interfere with other objects.
func reference_a_global_autoloaded_variable():
    print(globals)
    print(globals.prop)
    print(globals.my_getter())

----------------------------------------

TITLE: OpenXRAction Property Declarations
DESCRIPTION: Declares the core properties of the OpenXRAction class including action_type, localized_name, and toplevel_paths.

LANGUAGE: RST
CODE:
Properties:
   action_type: ActionType = 1
   localized_name: String = ""
   toplevel_paths: PackedStringArray = PackedStringArray()

----------------------------------------

TITLE: Class Definition in RST
DESCRIPTION: RST markup defining the VisualShaderNodeOutput class inheritance hierarchy and basic description

LANGUAGE: rst
CODE:
VisualShaderNodeOutput
======================

**Inherits:** :ref:`VisualShaderNode<class_VisualShaderNode>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`VisualShaderNodeParticleOutput<class_VisualShaderNodeParticleOutput>`

Represents the output shader parameters within the visual shader graph.

----------------------------------------

TITLE: Putting UTF-8 string data in GDScript
DESCRIPTION: Illustrates putting a UTF-8 string into the stream without prepending its size using put_data() method.

LANGUAGE: gdscript
CODE:
put_data("Hello world".to_utf8_buffer())

----------------------------------------

TITLE: Creating a Quaternion
DESCRIPTION: Different ways to construct a Quaternion object

LANGUAGE: GDScript
CODE:
# Default constructor - creates identity quaternion
var q1 = Quaternion()

# From axis and angle (in radians)
var q2 = Quaternion(Vector3(0, 1, 0), PI/2)

# From individual components
var q3 = Quaternion(0.0, 0.0, 0.0, 1.0)

# From Euler angles
var q4 = Quaternion.from_euler(Vector3(0, PI/2, 0))

----------------------------------------

TITLE: Getting ID Path in AStar3D (C#)
DESCRIPTION: Shows how to get the ID path between two points using AStar3D in C#.

LANGUAGE: csharp
CODE:
var astar = new AStar3D();
astar.AddPoint(1, new Vector3(0, 0, 0));
astar.AddPoint(2, new Vector3(0, 1, 0), 1); // Default weight is 1
astar.AddPoint(3, new Vector3(1, 1, 0));
astar.AddPoint(4, new Vector3(2, 0, 0));
astar.ConnectPoints(1, 2, false);
astar.ConnectPoints(2, 3, false);
astar.ConnectPoints(4, 3, false);
astar.ConnectPoints(1, 4, false);
long[] res = astar.GetIdPath(1, 3); // Returns [1, 2, 3]

----------------------------------------

TITLE: Enum Definition Example in RST
DESCRIPTION: Defines the MixTarget enum for audio channel mixing options

LANGUAGE: rst
CODE:
enum **MixTarget**: :ref:`🔗<enum_AudioStreamPlayer_MixTarget>`

:ref:`MixTarget<enum_AudioStreamPlayer_MixTarget>` **MIX_TARGET_STEREO** = ``0``
:ref:`MixTarget<enum_AudioStreamPlayer_MixTarget>` **MIX_TARGET_SURROUND** = ``1``
:ref:`MixTarget<enum_AudioStreamPlayer_MixTarget>` **MIX_TARGET_CENTER** = ``2``

----------------------------------------

TITLE: URL Encoding Example
DESCRIPTION: Demonstrates encoding a URL with uri_encode() method

LANGUAGE: gdscript
CODE:
var prefix = "$DOCS_URL/?highlight="
var url = prefix + "Godot Engine:docs".uri_encode()

print(url) # Prints "$DOCS_URL/?highlight=Godot%20Engine%3%docs"

----------------------------------------

TITLE: Sprite3D Property Example Region Settings
DESCRIPTION: Example demonstrating how to enable and set a region rect to display only a portion of the sprite's texture.

LANGUAGE: GDScript
CODE:
sprite.region_enabled = false
sprite.region_rect = Rect2(0, 0, 0, 0)

----------------------------------------

TITLE: Converting X509 Certificate to String
DESCRIPTION: Returns a string representation of the X509 certificate. Returns an empty string if the certificate is invalid.

LANGUAGE: GDScript
CODE:
save_to_string() -> String

----------------------------------------

TITLE: Propagating Input Events in SubViewportContainer
DESCRIPTION: Virtual method for handling input event propagation to SubViewport children. Returns boolean indicating if event should be propagated.

LANGUAGE: gdscript
CODE:
func _propagate_input_event(event: InputEvent) -> bool:
    # Return true to propagate event to SubViewport children
    # Return false to prevent propagation
    return true

----------------------------------------

TITLE: Implementing a Custom MainLoop in GDScript
DESCRIPTION: This snippet demonstrates how to create a simple custom MainLoop in GDScript. It includes initialization, process, and finalization methods, as well as a time tracking feature.

LANGUAGE: gdscript
CODE:
class_name CustomMainLoop
extends MainLoop

var time_elapsed = 0

func _initialize():
    print("Initialized:")
    print("  Starting time: %s" % str(time_elapsed))

func _process(delta):
    time_elapsed += delta
    # Return true to end the main loop.
    return Input.get_mouse_button_mask() != 0 || Input.is_key_pressed(KEY_ESCAPE)

func _finalize():
    print("Finalized:")
    print("  End time: %s" % str(time_elapsed))

----------------------------------------

TITLE: Search Text Example in C#
DESCRIPTION: Shows how to search for text in TextEdit using C#

LANGUAGE: csharp
CODE:
Vector2I result = Search("print", (uint)TextEdit.SearchFlags.WholeWords, 0, 0);
if (result.X != -1)
{
    // Result found.
    int lineNumber = result.Y;
    int columnNumber = result.X;
}

----------------------------------------

TITLE: Getting GDExtension Initialization Level
DESCRIPTION: Method to retrieve the minimum initialization level required for the extension to function properly

LANGUAGE: RST
CODE:
InitializationLevel get_minimum_library_initialization_level() const

----------------------------------------

TITLE: Retrieving IDs from RDUniform in GDScript
DESCRIPTION: Returns an array of all RIDs currently bound to the uniform.

LANGUAGE: GDScript
CODE:
get_ids() -> Array[RID]

----------------------------------------

TITLE: Creating and Joining PackedStringArray in GDScript
DESCRIPTION: Creates a PackedStringArray with two strings and joins them with a space separator to create a single string.

LANGUAGE: gdscript
CODE:
var string_array = PackedStringArray(["hello", "world"])
var string = " ".join(string_array)
print(string) # "hello world"

----------------------------------------

TITLE: Getting Description Method in OpenXRBindingModifier
DESCRIPTION: Virtual method that returns the description of the class used for the binding modifier editor's title bar.

LANGUAGE: gdscript
CODE:
String _get_description() virtual const

----------------------------------------

TITLE: Example Camera Attributes Properties
DESCRIPTION: Properties that can be set in the CameraAttributes resource for controlling exposure and depth of field

LANGUAGE: ini
CODE:
Speed: 2.0
Min Sensitivity: 50 
Max Sensitivity: 3200
Exposure: 1.0

----------------------------------------

TITLE: Basic Property Usage - Configuring VoxelGIData
DESCRIPTION: Example showing common property configurations for VoxelGIData

LANGUAGE: gdscript
CODE:
var voxel_data = VoxelGIData.new()

# Configure basic properties
voxel_data.energy = 1.0
voxel_data.bias = 1.5
voxel_data.normal_bias = 0.0
voxel_data.propagation = 0.5
voxel_data.interior = false
voxel_data.use_two_bounces = true
voxel_data.dynamic_range = 2.0

----------------------------------------

TITLE: Accessing CodeEdit in Script Editor Context Menu
DESCRIPTION: Shows how to access the CodeEdit node when handling the Script Editor code context menu.

LANGUAGE: gdscript
CODE:
func _popup_menu(paths):
    var code_edit = Engine.get_main_loop().root.get_node(paths[0]);

----------------------------------------

TITLE: Mob Spawning Logic - GDScript
DESCRIPTION: Implementation of mob spawning functionality including random position and direction calculation.

LANGUAGE: gdscript
CODE:
func _on_mob_timer_timeout():
    var mob = mob_scene.instantiate()
    var mob_spawn_location = $MobPath/MobSpawnLocation
    mob_spawn_location.progress_ratio = randf()
    mob.position = mob_spawn_location.position
    var direction = mob_spawn_location.rotation + PI / 2
    direction += randf_range(-PI / 4, PI / 4)
    mob.rotation = direction
    var velocity = Vector2(randf_range(150.0, 250.0), 0.0)
    mob.linear_velocity = velocity.rotated(direction)
    add_child(mob)

----------------------------------------

TITLE: RenderSceneBuffersConfiguration Property Example
DESCRIPTION: Example showing typical property values and types used in RenderSceneBuffersConfiguration.

LANGUAGE: gdscript
CODE:
var config = RenderSceneBuffersConfiguration.new()
config.anisotropic_filtering_level = 2
config.fsr_sharpness = 0.0
config.internal_size = Vector2i(0, 0)
config.msaa_3d = 0
config.render_target = RID()
config.scaling_3d_mode = 255
config.screen_space_aa = 0
config.target_size = Vector2i(0, 0)
config.texture_mipmap_bias = 0.0
config.view_count = 1

----------------------------------------

TITLE: Detecting Sprite2D Click - C#
DESCRIPTION: Example showing how to detect if a Sprite2D was clicked using _Input function and local coordinates check in C#.

LANGUAGE: csharp
CODE:
public override void _Input(InputEvent @event)
{
    if (@event is InputEventMouseButton inputEventMouse)
    {
        if (inputEventMouse.Pressed && inputEventMouse.ButtonIndex == MouseButton.Left)
        {
            if (GetRect().HasPoint(ToLocal(inputEventMouse.Position)))
            {
                GD.Print("A click!");
            }
        }
    }
}

----------------------------------------

TITLE: Setting OmniLight3D Properties
DESCRIPTION: Example of setting core properties of an OmniLight3D node including range, attenuation, and shadow mode.

LANGUAGE: gdscript
CODE:
var light = OmniLight3D.new()
light.omni_range = 5.0
light.omni_attenuation = 1.0
light.omni_shadow_mode = OmniLight3D.SHADOW_CUBE
light.light_specular = 0.5
light.shadow_normal_bias = 1.0

----------------------------------------

TITLE: Light2D ShadowFilter Enumeration
DESCRIPTION: Enumeration defining shadow filtering options

LANGUAGE: rst
CODE:
enum **ShadowFilter**:
**SHADOW_FILTER_NONE** = ``0``
**SHADOW_FILTER_PCF5** = ``1``
**SHADOW_FILTER_PCF13** = ``2``

----------------------------------------

TITLE: Get Reference Count
DESCRIPTION: Method to retrieve the current reference count of the object.

LANGUAGE: GDScript
CODE:
get_reference_count()

----------------------------------------

TITLE: Parsing Built-in Script Types in C#
DESCRIPTION: This snippet shows how to parse built-in script types (GDScript, C#, etc.) using ResourceLoader in C#.

LANGUAGE: csharp
CODE:
public override Godot.Collections.Array<string[]> _ParseFile(string path)
{
    var res = ResourceLoader.Load<Script>(path, "Script");
    string text = res.SourceCode;
    // Parsing logic.
}

public override string[] _GetRecognizedExtensions()
{
    return ["gd"];
}

----------------------------------------

TITLE: Accessing ButtonGroup Properties in GDScript
DESCRIPTION: Shows how to access and set the allow_unpress property of a ButtonGroup instance.

LANGUAGE: gdscript
CODE:
var button_group = ButtonGroup.new()
button_group.set_allow_unpress(true)
var is_unpress_allowed = button_group.is_allow_unpress()

----------------------------------------

TITLE: Getting Point Connections in AStar3D (C#)
DESCRIPTION: Shows how to get point connections in AStar3D using C#.

LANGUAGE: csharp
CODE:
var astar = new AStar3D();
astar.AddPoint(1, new Vector3(0, 0, 0));
astar.AddPoint(2, new Vector3(0, 1, 0));
astar.AddPoint(3, new Vector3(1, 1, 0));
astar.AddPoint(4, new Vector3(2, 0, 0));
astar.ConnectPoints(1, 2, true);
astar.ConnectPoints(1, 3, true);

long[] neighbors = astar.GetPointConnections(1); // Returns [2, 3]

----------------------------------------

TITLE: Setting Pan Property in AudioEffectPanner
DESCRIPTION: Demonstrates the pan property which controls the audio position between left (-1.0) and right (1.0) channels. The default value is 0.0 for center position.

LANGUAGE: godot
CODE:
pan = 0.0

----------------------------------------

TITLE: PackedVector3Array constructors
DESCRIPTION: Different ways to construct a PackedVector3Array

LANGUAGE: gdscript
CODE:
# Empty array
var array1 = PackedVector3Array()

# Copy from another PackedVector3Array
var array2 = PackedVector3Array(array1)

# From regular Array
var array3 = PackedVector3Array([Vector3(1,2,3)])

----------------------------------------

TITLE: Sprite3D Property Example Frame Usage
DESCRIPTION: Example of accessing the frame property which determines which frame to display from a sprite sheet. The frame number must be within bounds defined by hframes and vframes.

LANGUAGE: GDScript
CODE:
sprite.frame = 0

----------------------------------------

TITLE: Creating a Rect2 for the Entire BitMap in GDScript
DESCRIPTION: This snippet demonstrates how to create a Rect2 object covering the entire bitmap, which can be used with the opaque_to_polygons method.

LANGUAGE: GDScript
CODE:
Rect2(Vector2(), get_size())

----------------------------------------

TITLE: Creating a Placeholder CubemapArray in GDScript
DESCRIPTION: Creates a placeholder version of a CubemapArray resource. This method returns a PlaceholderCubemapArray object.

LANGUAGE: gdscript
CODE:
func create_placeholder() -> Resource:

----------------------------------------

TITLE: Resetting Player Position in C#
DESCRIPTION: Implements a method to reset the player's position and visibility when starting a new game in C#.

LANGUAGE: C#
CODE:
public void Start(Vector2 position)
{
    Position = position;
    Show();
    GetNode<CollisionShape2D>("CollisionShape2D").Disabled = false;
}

----------------------------------------

TITLE: Creating or Obtaining Cached Framebuffer in GDScript
DESCRIPTION: Uses the get_cache_multipass static method to create or obtain a cached framebuffer. It takes arrays of texture RIDs and RDFramebufferPass objects, along with the number of views, and returns a RID for the framebuffer.

LANGUAGE: GDScript
CODE:
var framebuffer_rid: RID = FramebufferCacheRD.get_cache_multipass(textures, passes, views)

----------------------------------------

TITLE: Creating and Accessing Arrays in GDScript
DESCRIPTION: Demonstrates creating an array and accessing elements by index in GDScript.

LANGUAGE: gdscript
CODE:
var array = ["First", 2, 3, "Last"]
print(array[0])  # Prints "First"
print(array[2])  # Prints 3
print(array[-1]) # Prints "Last"

array[1] = "Second"
print(array[1])  # Prints "Second"
print(array[-3]) # Prints "Second"

----------------------------------------

TITLE: Getting FABRIK Joint Properties
DESCRIPTION: Example showing how to retrieve FABRIK joint properties including bone nodes, indices, magnet positions and target rotation settings.

LANGUAGE: GDScript
CODE:
# Get bone node for joint
var bone_node = get_fabrik_joint_bone2d_node(joint_idx)

# Get bone index for joint
var bone_index = get_fabrik_joint_bone_index(joint_idx)

# Get magnet position for joint
var magnet_pos = get_fabrik_joint_magnet_position(joint_idx)

# Get target rotation usage
var uses_target_rot = get_fabrik_joint_use_target_rotation(joint_idx)

----------------------------------------

TITLE: Implementing Custom Drag and Drop in GDScript
DESCRIPTION: Demonstrates how to implement custom drag and drop functionality for a Control node, including creating a drag preview.

LANGUAGE: gdscript
CODE:
@export var color = Color(1, 0, 0, 1)

func _get_drag_data(position):
    # Use a control that is not in the tree
    var cpb = ColorPickerButton.new()
    cpb.color = color
    cpb.size = Vector2(50, 50)
    set_drag_preview(cpb)
    return color

----------------------------------------

TITLE: Implementing Basic Mob Movement in GDScript
DESCRIPTION: Initial mob setup with minimum and maximum speed properties and basic movement using move_and_slide()

LANGUAGE: gdscript
CODE:
extends CharacterBody3D

# Minimum speed of the mob in meters per second.
@export var min_speed = 10
# Maximum speed of the mob in meters per second.
@export var max_speed = 18


func _physics_process(_delta):
    move_and_slide()

----------------------------------------

TITLE: Customizing LineEdit Context Menu in C#
DESCRIPTION: Example of how to customize the LineEdit's context menu by adding a custom item and connecting an event handler in C#.

LANGUAGE: csharp
CODE:
public override void _Ready()
{
    var menu = GetMenu();
    // Remove all items after "Redo".
    menu.ItemCount = menu.GetItemIndex(LineEdit.MenuItems.Redo) + 1;
    // Add custom items.
    menu.AddSeparator();
    menu.AddItem("Insert Date", LineEdit.MenuItems.Max + 1);
    // Add event handler.
    menu.IdPressed += OnItemPressed;
}

public void OnItemPressed(int id)
{
    if (id == LineEdit.MenuItems.Max + 1)
    {
        InsertTextAtCaret(Time.GetDateStringFromSystem());
    }
}

----------------------------------------

TITLE: Getting String Size from Label Font in C#
DESCRIPTION: Example of getting the string size as displayed by a single-line Label using the font's GetStringSize method in C#.

LANGUAGE: csharp
CODE:
Label label = GetNode<Label>("Label");
Vector2 stringSize = label.GetThemeFont("font").GetStringSize(label.Text, HorizontalAlignment.Left, -1, label.GetThemeFontSize("font_size"));

----------------------------------------

TITLE: Increment Reference Counter
DESCRIPTION: Method to manually increment the internal reference counter. Returns boolean indicating success.

LANGUAGE: GDScript
CODE:
reference()

----------------------------------------

TITLE: Compressing and Decompressing PackedByteArray Data
DESCRIPTION: Demonstrates compressing and decompressing data using PackedByteArray methods.

LANGUAGE: gdscript
CODE:
var original = PackedByteArray()
original.resize(1000)
original.fill(65) # Fill with 'A' ASCII character
var compressed = original.compress(FileAccess.COMPRESSION_GZIP)
var decompressed = compressed.decompress(1000, FileAccess.COMPRESSION_GZIP)
print(decompressed.get_string_from_ascii()) # Prints 1000 'A' characters

----------------------------------------

TITLE: Retrieving Occluder3D Indices in GDScript
DESCRIPTION: This method returns the vertex indices of the occluder shape as a PackedInt32Array.

LANGUAGE: GDScript
CODE:
PackedInt32Array get_indices() const

----------------------------------------

TITLE: Class Definition in RST Documentation
DESCRIPTION: RST documentation showing the inheritance hierarchy and basic description of the TextureCubemapArrayRD class for Godot Engine.

LANGUAGE: rst
CODE:
TextureCubemapArrayRD
=====================

**Inherits:** :ref:`TextureLayeredRD<class_TextureLayeredRD>` **<** :ref:`TextureLayered<class_TextureLayered>` **<** :ref:`Texture<class_Texture>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

----------------------------------------

TITLE: Configuring HTC Trackers in Godot Engine
DESCRIPTION: This snippet demonstrates how to set up HTC Trackers for full body tracking in Godot Engine. It involves adding XRController3D nodes as children to the XROrigin3D node and assigning specific tracker roles.

LANGUAGE: GDScript
CODE:
# Add XRController3D nodes as children to the XROrigin3D node
# Assign one of the following tracker roles:

# /user/vive_tracker_htcx/role/handheld_object
# /user/vive_tracker_htcx/role/left_foot
# /user/vive_tracker_htcx/role/right_foot
# /user/vive_tracker_htcx/role/left_shoulder
# /user/vive_tracker_htcx/role/right_shoulder
# /user/vive_tracker_htcx/role/left_elbow
# /user/vive_tracker_htcx/role/right_elbow
# /user/vive_tracker_htcx/role/left_knee
# /user/vive_tracker_htcx/role/right_knee
# /user/vive_tracker_htcx/role/waist
# /user/vive_tracker_htcx/role/chest
# /user/vive_tracker_htcx/role/camera
# /user/vive_tracker_htcx/role/keyboard

----------------------------------------

TITLE: Defining Compositor Effects Property
DESCRIPTION: Property definition for compositor_effects which stores an Array of CompositorEffect objects used to customize viewport rendering. The property includes getter and setter methods.

LANGUAGE: GDScript
CODE:
compositor_effects = []

----------------------------------------

TITLE: Creating Cubemap Skybox Shader in Godot
DESCRIPTION: This shader code demonstrates how to use a Cubemap texture as a skybox in Godot. It applies the cubemap to the sky and allows for exposure adjustment.

LANGUAGE: glsl
CODE:
shader_type sky;

uniform samplerCube source_panorama : filter_linear, source_color, hint_default_black;
uniform float exposure : hint_range(0, 128) = 1.0;

void sky() {
    // If importing a cubemap from another engine, you may need to flip one of the `EYEDIR` components below
    // by replacing it with `-EYEDIR`.
    vec3 eyedir = vec3(EYEDIR.x, EYEDIR.y, EYEDIR.z);
    COLOR = texture(source_panorama, eyedir).rgb * exposure;
}

----------------------------------------

TITLE: Deleting Git Branches
DESCRIPTION: Commands to delete both local and remote Git branches after a pull request is merged.

LANGUAGE: shell
CODE:
git branch -d better-project-manager
git push origin -d better-project-manager

----------------------------------------

TITLE: Quaternion Operations
DESCRIPTION: Common operations performed with quaternions

LANGUAGE: GDScript
CODE:
# Rotate a vector using quaternion
var rotated = quat * vector

# Interpolate between quaternions
var interpolated = quat1.slerp(quat2, 0.5)

# Get Euler angles from quaternion
var euler = quat.get_euler()

# Normalize a quaternion
var normalized = quat.normalized()

----------------------------------------

TITLE: Converting UTF-8 String to Base64
DESCRIPTION: Method to encode a UTF-8 string into Base64 format.

LANGUAGE: GDScript
CODE:
utf8_to_base64(utf8_str: String) -> String

----------------------------------------

TITLE: Method Declaration - Set Recording Active
DESCRIPTION: Method to enable or disable audio recording. Enabling recording will clear any previous recording.

LANGUAGE: RST
CODE:
void set_recording_active(bool record)

----------------------------------------

TITLE: Generic GetNode Method in Godot C#
DESCRIPTION: Shows type conversion using Godot's generic GetNode<T>() method which throws InvalidCastException on failed casts.

LANGUAGE: csharp
CODE:
Sprite2D mySprite = GetNode<Sprite2D>("MySprite");
mySprite.SetFrame(0);

----------------------------------------

TITLE: Setting Face Blend Shape Weight
DESCRIPTION: Sets the weight value for a specific facial blend shape.

LANGUAGE: gdscript
CODE:
set_blend_shape(XRFaceTracker.FT_MOUTH_SMILE, 1.0)

----------------------------------------

TITLE: Managing Property Recording State
DESCRIPTION: Property to control whether new properties can be added to the missing resource. When true, allows adding new properties via Object.set().

LANGUAGE: gdscript
CODE:
set_recording_properties(value: bool)
is_recording_properties() -> bool

----------------------------------------

TITLE: Getting Frame Texture from AnimatedTexture
DESCRIPTION: Retrieves the Texture2D assigned to a specific frame in the AnimatedTexture.

LANGUAGE: gdscript
CODE:
get_frame_texture(frame: int) -> Texture2D

----------------------------------------

TITLE: Accessing Joint Transforms
DESCRIPTION: Gets the transform data for a specific body joint

LANGUAGE: GDScript
CODE:
var joint_transform = xr_body_tracker.get_joint_transform(XRBodyTracker.JOINT_HEAD)

----------------------------------------

TITLE: Stopping the TCP Server in GDScript
DESCRIPTION: Stops the TCP server from listening for new connections. This method has no return value.

LANGUAGE: GDScript
CODE:
void stop()

----------------------------------------

TITLE: Setting SegmentShape2D Properties
DESCRIPTION: Example of setting the start (a) and end (b) points of a SegmentShape2D. The segment is defined by two Vector2 coordinates, with default values of (0,0) for point a and (0,10) for point b.

LANGUAGE: GDScript
CODE:
var segment = SegmentShape2D.new()
segment.a = Vector2(0, 0)
segment.b = Vector2(0, 10)

----------------------------------------

TITLE: Defining SkeletonModification2DCCDIK Properties
DESCRIPTION: Core property definitions for the CCDIK modification, including chain length and node paths for target and tip nodes.

LANGUAGE: RST
CODE:
.. _class_SkeletonModification2DCCDIK_property_ccdik_data_chain_length:

:ref:`int<class_int>` **ccdik_data_chain_length** = ``0``

.. _class_SkeletonModification2DCCDIK_property_target_nodepath:

:ref:`NodePath<class_NodePath>` **target_nodepath** = ``NodePath("")"

.. _class_SkeletonModification2DCCDIK_property_tip_nodepath:

:ref:`NodePath<class_NodePath>` **tip_nodepath** = ``NodePath("")"

----------------------------------------

TITLE: Setting and Getting MultiMesh in GDScript
DESCRIPTION: Demonstrates how to set and get the MultiMesh property of a MultiMeshInstance3D. The MultiMesh resource is shared among all instances of the MultiMeshInstance3D.

LANGUAGE: GDScript
CODE:
# Setting the MultiMesh
set_multimesh(value: MultiMesh)

# Getting the MultiMesh
get_multimesh() -> MultiMesh

----------------------------------------

TITLE: Setting Up Custom Multiplayer Implementation
DESCRIPTION: Example showing how to configure a custom MultiplayerAPI implementation as the main multiplayer interface in an autoload script.

LANGUAGE: gdscript
CODE:
# autoload.gd
func _enter_tree():
    # Sets our custom multiplayer as the main one in SceneTree.
    get_tree().set_multiplayer(LogMultiplayer.new())

----------------------------------------

TITLE: Accessing Data Directory in Godot Editor
DESCRIPTION: Returns the absolute path to the user's data folder for persistent user data files such as installed export templates in the Godot editor. The path varies by operating system.

LANGUAGE: text
CODE:
- Windows: %APPDATA%\Godot\                    (same as `get_config_dir()`)
- macOS: ~/Library/Application Support/Godot/  (same as `get_config_dir()`)
- Linux: ~/.local/share/godot/

----------------------------------------

TITLE: Setting Face Tracker Property in XRFaceModifier3D
DESCRIPTION: Sets the XRFaceTracker path for the XRFaceModifier3D node. The default value is "/user/face_tracker".

LANGUAGE: GDScript
CODE:
face_tracker = &"/user/face_tracker"

----------------------------------------

TITLE: RST Documentation Directives
DESCRIPTION: ReStructuredText directives for documentation generation and class inheritance definition

LANGUAGE: rst
CODE:
:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/modules/interactive_music/doc_classes/AudioStreamPlaybackPlaylist.xml.

----------------------------------------

TITLE: Implementing a Custom MainLoop in C#
DESCRIPTION: This snippet shows how to create a simple custom MainLoop in C#. It includes initialization, process, and finalization methods, as well as a time tracking feature.

LANGUAGE: csharp
CODE:
using Godot;

[GlobalClass]
public partial class CustomMainLoop : MainLoop
{
    private double _timeElapsed = 0;

    public override void _Initialize()
    {
        GD.Print("Initialized:");
        GD.Print($"  Starting Time: {_timeElapsed}");
    }

    public override bool _Process(double delta)
    {
        _timeElapsed += delta;
        // Return true to end the main loop.
        return Input.GetMouseButtonMask() != 0 || Input.IsKeyPressed(Key.Escape);
    }

    private void _Finalize()
    {
        GD.Print("Finalized:");
        GD.Print($"  End Time: {_timeElapsed}");
    }
}

----------------------------------------

TITLE: Disabling Gatekeeper in macOS Terminal
DESCRIPTION: Command to disable Gatekeeper entirely on macOS, allowing the execution of unsigned applications. This reduces system security and should be used with caution.

LANGUAGE: bash
CODE:
sudo spctl --master-disable

----------------------------------------

TITLE: Accessing Resolved Color Buffer in GDScript
DESCRIPTION: Example showing how to access the resolved color buffer inside a render callback when MSAA is enabled

LANGUAGE: gdscript
CODE:
var render_scene_buffers = render_data.get_render_scene_buffers()
var color_buffer = render_scene_buffers.get_texture("render_buffers", "color")

----------------------------------------

TITLE: Accessing CompressedTexture3D Load Path
DESCRIPTION: Property to get or set the file path of the CompressedTexture3D. The path should point to a .ctex3d file.

LANGUAGE: GDScript
CODE:
var texture = CompressedTexture3D.new()
texture.load_path = "path/to/texture.ctex3d"
var current_path = texture.get_load_path()

----------------------------------------

TITLE: Pushing Changes to a Remote Git Repository
DESCRIPTION: Command to push local changes to a remote Git repository.

LANGUAGE: shell
CODE:
git push origin better-project-manager

----------------------------------------

TITLE: Registering PhysicsServer2D Implementation
DESCRIPTION: Method to register a new PhysicsServer2D implementation by providing a name and a callback that creates the server instance.

LANGUAGE: GDScript
CODE:
register_server(name: String, create_callback: Callable)

----------------------------------------

TITLE: Resolving Hostname to IP Address in GDScript
DESCRIPTION: This snippet shows how to resolve a hostname to an IP address using the resolve_hostname() method. It allows specifying the IP address type (IPv4 or IPv6) to resolve.

LANGUAGE: GDScript
CODE:
var hostname = "example.com"
var ip_address = IP.resolve_hostname(hostname, IP.TYPE_ANY)
print("IP address of %s: %s" % [hostname, ip_address])

----------------------------------------

TITLE: Clearing StreamPeerGZIP State
DESCRIPTION: Resets the internal state of the StreamPeerGZIP, clearing any buffered data and preparing it for a new operation.

LANGUAGE: GDScript
CODE:
clear() -> void

----------------------------------------

TITLE: Container Sort Queue Method
DESCRIPTION: Method to request resorting of contained children. While sorting happens automatically, this method allows manual triggering of the sort operation.

LANGUAGE: GDScript
CODE:
void queue_sort()

----------------------------------------

TITLE: Typed Dictionary Declaration in C#
DESCRIPTION: Example showing how to create a typed dictionary with string keys and variant values in Godot C#.

LANGUAGE: csharp
CODE:
// The keys must be string, but the values can be any Variant-compatible type.
var dictionary = new Godot.Collections.Dictionary<string, Variant>();

----------------------------------------

TITLE: Getting Float Input from XRController3D
DESCRIPTION: Shows how to retrieve a float value from a controller input, such as a trigger.

LANGUAGE: GDScript
CODE:
var trigger_value = controller.get_float("trigger")

----------------------------------------

TITLE: Checking Public-Only CryptoKey in GDScript
DESCRIPTION: Determines if a CryptoKey instance only contains the public part of the key, without the private component.

LANGUAGE: GDScript
CODE:
is_public_only() -> bool

----------------------------------------

TITLE: Complete 3D Terrain Shader in Godot
DESCRIPTION: The full shader code combining vertex displacement with noise-based height and normal mapping for realistic 3D terrain in Godot Engine.

LANGUAGE: GLSL
CODE:
shader_type spatial;

uniform float height_scale = 0.5;
uniform sampler2D noise;
uniform sampler2D normalmap;

varying vec2 tex_position;

void vertex() {
  tex_position = VERTEX.xz / 2.0 + 0.5;
  float height = texture(noise, tex_position).x;
  VERTEX.y += height * height_scale;
}

void fragment() {
  NORMAL_MAP = texture(normalmap, tex_position).xyz;
}

----------------------------------------

TITLE: Managing Debug Tabs
DESCRIPTION: Shows how to add and remove custom debug tabs from the session interface.

LANGUAGE: GDScript
CODE:
add_session_tab($CustomDebugTab)
remove_session_tab($CustomDebugTab)

----------------------------------------

TITLE: Using Rect2 abs() Method in GDScript
DESCRIPTION: Demonstrates how to get an equivalent rectangle with non-negative size using the abs() method.

LANGUAGE: gdscript
CODE:
var rect = Rect2(25, 25, -100, -50)
var absolute = rect.abs() # absolute is Rect2(-75, -25, 100, 50)

----------------------------------------

TITLE: Implementing Container Size Flags - Vertical
DESCRIPTION: Method to specify allowed vertical size flags for container children. Returns an array of permitted size flag values that will be available in the Inspector dock.

LANGUAGE: GDScript
CODE:
PackedInt32Array _get_allowed_size_flags_vertical() virtual const

----------------------------------------

TITLE: Creating and Connecting a Button in GDScript
DESCRIPTION: Example showing how to create a new Button instance, set its text, and connect a pressed signal handler in GDScript

LANGUAGE: gdscript
CODE:
func _ready():
    var button = Button.new()
    button.text = "Click me"
    button.pressed.connect(_button_pressed)
    add_child(button)

func _button_pressed():
    print("Hello world!")

----------------------------------------

TITLE: Disabling 3D Support in Godot
DESCRIPTION: Removes 3D engine support for 2D-only games, reducing binary size by about 15%. This option requires disabling the editor tools.

LANGUAGE: shell
CODE:
scons target=template_release disable_3d=yes

----------------------------------------

TITLE: Setting Default PhysicsServer2D
DESCRIPTION: Method to set the default PhysicsServer2D implementation by name if the provided priority exceeds the current default's priority.

LANGUAGE: GDScript
CODE:
set_default_server(name: String, priority: int)

----------------------------------------

TITLE: Sampling a Point on Curve3D
DESCRIPTION: Returns a point on the curve at a specified offset along its length.

LANGUAGE: GDScript
CODE:
sample_baked(offset: float = 0.0, cubic: bool = false) -> Vector3

----------------------------------------

TITLE: Creating ArrayMesh from CylinderMesh in C#
DESCRIPTION: Demonstrates how to create an ArrayMesh from a CylinderMesh using the GetMeshArrays() method in C#.

LANGUAGE: csharp
CODE:
var c = new CylinderMesh();
var arrMesh = new ArrayMesh();
arrMesh.AddSurfaceFromArrays(Mesh.PrimitiveType.Triangles, c.GetMeshArrays());

----------------------------------------

TITLE: Using PackedDataContainerRef with Nested Arrays in GDScript
DESCRIPTION: Example demonstrating how to use PackedDataContainer with nested arrays and access elements using PackedDataContainerRef.

LANGUAGE: gdscript
CODE:
var packed = PackedDataContainer.new()
packed.pack([1, 2, 3, ["nested1", "nested2"], 4, 5, 6])

for element in packed:
    if element is PackedDataContainerRef:
        for subelement in element:
            print("::", subelement)
    else:
        print(element)

----------------------------------------

TITLE: Adding a Shape to a Shape Owner in CollisionObject3D
DESCRIPTION: Adds a Shape3D to the specified shape owner using the owner_id.

LANGUAGE: gdscript
CODE:
shape_owner_add_shape(owner_id, shape)

----------------------------------------

TITLE: Adding Commands to EditorCommandPalette - GDScript Example
DESCRIPTION: Demonstrates how to add a custom command to the editor command palette using GDScript. The example shows creating a command with a callable function and binding arguments.

LANGUAGE: gdscript
CODE:
var command_palette = EditorInterface.get_command_palette()
# external_command is a function that will be called with the command is executed.
var command_callable = Callable(self, "external_command").bind(arguments)
command_palette.add_command("command", "test/command",command_callable)

----------------------------------------

TITLE: GLTFNode Additional Data
DESCRIPTION: Example of using additional data storage for GLTFNode extensions

LANGUAGE: GDScript
CODE:
var node = GLTFNode.new()
node.set_additional_data("my_extension", {"custom_property": 123})
var data = node.get_additional_data("my_extension")

----------------------------------------

TITLE: AudioBusLayout Class Definition
DESCRIPTION: Class definition showing inheritance hierarchy for AudioBusLayout, which inherits from Resource, RefCounted, and Object base classes.

LANGUAGE: rst
CODE:
**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

----------------------------------------

TITLE: ImporterMeshInstance3D Property Access
DESCRIPTION: Code examples showing the property getter and setter methods for ImporterMeshInstance3D properties including cast_shadow, layer_mask, mesh, skeleton_path, skin, and visibility range settings.

LANGUAGE: gdscript
CODE:
# Getting property values
var shadow_setting = get_cast_shadows_setting()
var layer = get_layer_mask()
var mesh_instance = get_mesh()
var skeleton = get_skeleton_path()
var skin_resource = get_skin()

# Setting property values
set_cast_shadows_setting(GeometryInstance3D.SHADOW_CASTING_SETTING_ON)
set_layer_mask(1)
set_mesh(some_mesh)
set_skeleton_path(NodePath(""))
set_skin(some_skin)

----------------------------------------

TITLE: Setup Local To Scene Resource Example in GDScript
DESCRIPTION: Example showing how to override _setup_local_to_scene() to customize a resource when duplicating scenes

LANGUAGE: GDScript
CODE:
extends Resource

var damage = 0

func _setup_local_to_scene():
    damage = randi_range(10, 40)

----------------------------------------

TITLE: Detecting Dedicated Server Mode in C#
DESCRIPTION: C# implementation to detect if the current build is running as a dedicated server by checking for the dedicated_server feature tag.

LANGUAGE: csharp
CODE:
if (OS.HasFeature("dedicated_server"))
{
    // Run your server startup code here...
}

----------------------------------------

TITLE: Adding Camera Feed Method
DESCRIPTION: Method to add a new camera feed to the CameraServer.

LANGUAGE: GDScript
CODE:
void add_feed(feed: CameraFeed)

----------------------------------------

TITLE: External Skeleton Setup Example
DESCRIPTION: Example demonstrating how to configure an external skeleton reference

LANGUAGE: gdscript
CODE:
var bone_attachment = BoneAttachment3D.new()
bone_attachment.set_use_external_skeleton(true)
bone_attachment.set_external_skeleton(NodePath("../Skeleton3D"))

----------------------------------------

TITLE: Stripping Debug Symbols from Godot Binary
DESCRIPTION: Removes debug symbols from the compiled Godot binary, significantly reducing its size. This is applicable for Windows (MinGW), Linux, and macOS builds.

LANGUAGE: shell
CODE:
strip path/to/godot.binary

----------------------------------------

TITLE: Defining Humanoid Skeleton Structure in GDScript
DESCRIPTION: This code snippet illustrates the structure of a humanoid skeleton as defined by the SkeletonProfileHumanoid class. It shows the hierarchy of 54 bones divided into 4 groups: Body, Face, LeftHand, and RightHand.

LANGUAGE: GDScript
CODE:
Root
└─ Hips
    ├─ LeftUpperLeg
    │  └─ LeftLowerLeg
    │     └─ LeftFoot
    │        └─ LeftToes
    ├─ RightUpperLeg
    │  └─ RightLowerLeg
    │     └─ RightFoot
    │        └─ RightToes
    └─ Spine
        └─ Chest
            └─ UpperChest
                ├─ Neck
                │   └─ Head
                │       ├─ Jaw
                │       ├─ LeftEye
                │       └─ RightEye
                ├─ LeftShoulder
                │  └─ LeftUpperArm
                │     └─ LeftLowerArm
                │        └─ LeftHand
                │           ├─ LeftThumbMetacarpal
                │           │  └─ LeftThumbProximal
                │           │    └─ LeftThumbDistal
                │           ├─ LeftIndexProximal
                │           │  └─ LeftIndexIntermediate
                │           │    └─ LeftIndexDistal
                │           ├─ LeftMiddleProximal
                │           │  └─ LeftMiddleIntermediate
                │           │    └─ LeftMiddleDistal
                │           ├─ LeftRingProximal
                │           │  └─ LeftRingIntermediate
                │           │    └─ LeftRingDistal
                │           └─ LeftLittleProximal
                │              └─ LeftLittleIntermediate
                │                └─ LeftLittleDistal
                └─ RightShoulder
                   └─ RightUpperArm
                      └─ RightLowerArm
                         └─ RightHand
                            ├─ RightThumbMetacarpal
                            │  └─ RightThumbProximal
                            │     └─ RightThumbDistal
                            ├─ RightIndexProximal
                            │  └─ RightIndexIntermediate
                            │     └─ RightIndexDistal
                            ├─ RightMiddleProximal
                            │  └─ RightMiddleIntermediate
                            │     └─ RightMiddleDistal
                            ├─ RightRingProximal
                            │  └─ RightRingIntermediate
                            │     └─ RightRingDistal
                            └─ RightLittleProximal
                               └─ RightLittleIntermediate
                                 └─ RightLittleDistal

----------------------------------------

TITLE: Getting External Texture ID from ExternalTexture
DESCRIPTION: Retrieves the external texture ID associated with the ExternalTexture. This ID can be used with platform APIs, such as when creating an android.graphics.SurfaceTexture on Android.

LANGUAGE: GDScript
CODE:
get_external_texture_id() -> int

----------------------------------------

TITLE: Adding Resource to Preloader in GDScript
DESCRIPTION: Demonstrates how to add a resource to the ResourcePreloader with a specified name. If a resource with the given name exists, it will be renamed with an incrementing number.

LANGUAGE: GDScript
CODE:
add_resource(name: StringName, resource: Resource)

----------------------------------------

TITLE: Tessellating Curve3D
DESCRIPTION: Generates a list of points approximating the curve's shape with curvature-controlled density.

LANGUAGE: GDScript
CODE:
tessellate(max_stages: int = 5, tolerance_degrees: float = 4) -> PackedVector3Array

----------------------------------------

TITLE: Creating a Navigation Map
DESCRIPTION: Creates a new navigation map and sets it as active.

LANGUAGE: gdscript
CODE:
var map_rid = NavigationServer2D.map_create()
NavigationServer2D.map_set_active(map_rid, true)

----------------------------------------

TITLE: Using Shape RID for Physics Queries in GDScript
DESCRIPTION: Example showing how to create and use a circle shape RID for physics queries using PhysicsServer2D

LANGUAGE: gdscript
CODE:
var shape_rid = PhysicsServer2D.circle_shape_create()
var radius = 64
PhysicsServer2D.shape_set_data(shape_rid, radius)

var params = PhysicsShapeQueryParameters2D.new()
params.shape_rid = shape_rid

# Execute physics queries here...

# Release the shape when done with physics queries.
PhysicsServer2D.free_rid(shape_rid)

----------------------------------------

TITLE: Implementing Height Scale Uniform in Godot Terrain Shader
DESCRIPTION: Adds a uniform variable to control the scale of terrain height, allowing for dynamic adjustment of terrain features.

LANGUAGE: GLSL
CODE:
uniform float height_scale = 0.5;

void vertex() {
  float height = texture(noise, VERTEX.xz / 2.0 + 0.5).x;
  VERTEX.y += height * height_scale;
}

----------------------------------------

TITLE: Multiplying Vector2i by float in GDScript
DESCRIPTION: Illustrates multiplying each component of a Vector2i by a float, resulting in a Vector2.

LANGUAGE: GDScript
CODE:
print(0.9 * Vector2i(10, 15)) # Prints (9.0, 13.5)

----------------------------------------

TITLE: Retrieving Vector2 Input from XRController3D
DESCRIPTION: Illustrates how to get a Vector2 input from a controller, typically used for thumbsticks or touchpads.

LANGUAGE: GDScript
CODE:
var thumbstick_position = controller.get_vector2("thumbstick")

----------------------------------------

TITLE: Getting Faces from ConcavePolygonShape3D
DESCRIPTION: Method to retrieve the faces of the trimesh shape as an array of vertices. Returns a PackedVector3Array where each three consecutive vertices represent a triangle.

LANGUAGE: GDScript
CODE:
get_faces() -> PackedVector3Array

----------------------------------------

TITLE: Creating and Using PackedFloat32Array
DESCRIPTION: Basic examples of creating and manipulating a PackedFloat32Array

LANGUAGE: GDScript
CODE:
# Create empty array
var arr = PackedFloat32Array()

# Create from regular array
var arr2 = PackedFloat32Array([1.0, 2.0, 3.0])

# Add elements
arr.push_back(1.5)
arr.append(2.5)

# Access elements
print(arr[0]) # Prints 1.5

----------------------------------------

TITLE: Resource Property Change Notification in GDScript
DESCRIPTION: Example showing how to properly notify changes to resource properties by emitting the changed signal

LANGUAGE: GDScript
CODE:
var damage:
    set(new_value):
        if damage != new_value:
            damage = new_value
            emit_changed()

----------------------------------------

TITLE: Configuring Navigation Layers
DESCRIPTION: Example demonstrating how to set up navigation layers for a NavigationLink2D node to control which navigation layers the link belongs to.

LANGUAGE: GDScript
CODE:
var nav_link = NavigationLink2D.new()
nav_link.navigation_layers = 1
nav_link.set_navigation_layer_value(1, true)
nav_link.set_navigation_layer_value(2, false)

----------------------------------------

TITLE: Copying Decal Textures in C#
DESCRIPTION: Demonstrates how to copy all textures from one Decal to another using a loop in C#.

LANGUAGE: csharp
CODE:
for (int i = 0; i < (int)Decal.DecalTexture.Max; i++)
{
    GetNode<Decal>("NewDecal").SetTexture(i, GetNode<Decal>("OldDecal").GetTexture(i));
}

----------------------------------------

TITLE: Listing All Built-in Include Files
DESCRIPTION: Static method that returns an array of all registered built-in include files.

LANGUAGE: GDScript
CODE:
PackedStringArray list_built_in_include_files()

----------------------------------------

TITLE: Getting Current Clip Name in GDScript
DESCRIPTION: This snippet demonstrates how to get the name of the currently playing clip from inside an AudioStreamPlayer node using the get_current_clip_index() method.

LANGUAGE: gdscript
CODE:
var playing_clip_name = stream.get_clip_name(get_stream_playback().get_current_clip_index())

----------------------------------------

TITLE: ENet Peer Throttle Configuration
DESCRIPTION: Configuration of packet throttling parameters for network performance

LANGUAGE: GDScript
CODE:
throttle_configure(interval: int, acceleration: int, deceleration: int)

----------------------------------------

TITLE: Converting AVI to MP4 with FFmpeg
DESCRIPTION: Command to convert an AVI video to MP4 format using FFmpeg with a Constant Rate Factor (CRF) of 15.

LANGUAGE: shell
CODE:
ffmpeg -i input.avi -crf 15 output.mp4

----------------------------------------

TITLE: Setting Property Values in CanvasTexture
DESCRIPTION: Example of property declarations in CanvasTexture class showing supported texture types and their default values.

LANGUAGE: RST
CODE:
Texture2D diffuse_texture
Texture2D normal_texture
Color specular_color = Color(1, 1, 1, 1)
float specular_shininess = 1.0
Texture2D specular_texture
TextureFilter texture_filter = 0
TextureRepeat texture_repeat = 0

----------------------------------------

TITLE: Creating a scaled Basis
DESCRIPTION: Constructs a new Basis that only represents scale, with no rotation or shear.

LANGUAGE: gdscript
CODE:
var my_basis = Basis.from_scale(Vector3(2, 4, 8))

print(my_basis.x) # Prints (2.0, 0.0, 0.0)
print(my_basis.y) # Prints (0.0, 4.0, 0.0)
print(my_basis.z) # Prints (0.0, 0.0, 8.0)

LANGUAGE: csharp
CODE:
var myBasis = Basis.FromScale(new Vector3(2.0f, 4.0f, 8.0f));

GD.Print(myBasis.X); // Prints (2, 0, 0)
GD.Print(myBasis.Y); // Prints (0, 4, 0)
GD.Print(myBasis.Z); // Prints (0, 0, 8)

----------------------------------------

TITLE: Adding Local NuGet Source
DESCRIPTION: Command to configure NuGet to use a local source for development packages

LANGUAGE: shell
CODE:
dotnet nuget add source <my_local_source> --name MyLocalNugetSource

----------------------------------------

TITLE: Property Definition in RST
DESCRIPTION: Defines the window_id property which stores the ID of the Window that received the input event. This property can be accessed and modified through getter and setter methods.

LANGUAGE: rst
CODE:
int window_id = 0

set_window_id(value: int)
get_window_id() -> int

----------------------------------------

TITLE: Creating ENet Server Instance
DESCRIPTION: Sets up an ENet server that listens for client connections with configurable maximum clients, channels, and bandwidth settings.

LANGUAGE: GDScript
CODE:
create_server(4242, 32, 2, 0, 0)

----------------------------------------

TITLE: Setting SeparationRayShape3D Properties
DESCRIPTION: Example showing how to set the length and slide_on_slope properties of a SeparationRayShape3D instance.

LANGUAGE: gdscript
CODE:
var ray_shape = SeparationRayShape3D.new()
ray_shape.length = 1.0
ray_shape.slide_on_slope = false

----------------------------------------

TITLE: Basic Color Usage Examples - GDScript and C#
DESCRIPTION: Examples showing basic color construction and manipulation

LANGUAGE: GDScript
CODE:
var red = Color(1, 0, 0) # Pure red
var dark_blue = Color(0, 0, 0.2) # Dark blue
var my_color = Color(1.2, 1, 0, 0.4) # Yellow-red with alpha

LANGUAGE: C#
CODE:
var red = new Color(1.0f, 0.0f, 0.0f); // Pure red
var darkBlue = new Color(0.0f, 0.0f, 0.2f); // Dark blue
var myColor = new Color(1.2f, 1.0f, 0.0f, 0.4f); // Yellow-red with alpha

----------------------------------------

TITLE: Defining VisualShaderNodeIntFunc Function Enumeration in GDScript
DESCRIPTION: Enumerates the available functions for the VisualShaderNodeIntFunc node, including absolute value, negation, sign extraction, and bitwise NOT operations.

LANGUAGE: gdscript
CODE:
enum Function {
    FUNC_ABS = 0,
    FUNC_NEGATE = 1,
    FUNC_SIGN = 2,
    FUNC_BITWISE_NOT = 3,
    FUNC_MAX = 4
}

----------------------------------------

TITLE: Using Mouse Passthrough Example
DESCRIPTION: Example showing how to set up mouse passthrough regions using Path2D or Polygon2D nodes

LANGUAGE: GDScript
CODE:
# Set region, using Path2D node.
DisplayServer.window_set_mouse_passthrough($Path2D.curve.get_baked_points())

# Set region, using Polygon2D node.
DisplayServer.window_set_mouse_passthrough($Polygon2D.polygon)

# Reset region to default.
DisplayServer.window_set_mouse_passthrough([])

LANGUAGE: C#
CODE:
// Set region, using Path2D node.
DisplayServer.WindowSetMousePassthrough(GetNode<Path2D>("Path2D").Curve.GetBakedPoints());

// Set region, using Polygon2D node.
DisplayServer.WindowSetMousePassthrough(GetNode<Polygon2D>("Polygon2D").Polygon);

// Reset region to default.
DisplayServer.WindowSetMousePassthrough([]);

----------------------------------------

TITLE: Mix Resampled Audio Method Definition
DESCRIPTION: Virtual method that handles mixing resampled audio data into a destination buffer. Takes a destination buffer pointer and frame count as parameters.

LANGUAGE: gdscript
CODE:
int _mix_resampled(dst_buffer: AudioFrame*, frame_count: int) virtual

----------------------------------------

TITLE: Setting Shader Parameters in GDScript
DESCRIPTION: Shows how to set shader parameters from GDScript code.

LANGUAGE: GDScript
CODE:
var blue_value = 1.0
material.set_shader_parameter("blue", blue_value)

----------------------------------------

TITLE: 3D Noise Implementation - GLSL
DESCRIPTION: Implementation of 3D noise functions for generating realistic terrain patterns.

LANGUAGE: glsl
CODE:
vec3 hash(vec3 p) {
    p = vec3(dot(p, vec3(127.1, 311.7, 74.7)),
             dot(p, vec3(269.5, 183.3, 246.1)),
             dot(p, vec3(113.5, 271.9, 124.6)));

    return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);
}

----------------------------------------

TITLE: Custom Option Example
DESCRIPTION: Example of adding custom option buttons to the dialog

LANGUAGE: gdscript
CODE:
# Add a dropdown option
file_dialog.add_option("Format", ["PNG", "JPEG", "WEBP"], 0)

# Add a checkbox option
file_dialog.add_option("Compress", [], 0)

----------------------------------------

TITLE: Creating and Managing MeshLibrary Items
DESCRIPTION: Examples showing basic MeshLibrary item management including creating items, setting meshes, and retrieving properties.

LANGUAGE: GDScript
CODE:
# Create new item
var id = mesh_library.get_last_unused_item_id()
mesh_library.create_item(id)

# Set item properties
mesh_library.set_item_mesh(id, some_mesh)
mesh_library.set_item_name(id, "my_mesh")

# Get item properties
var mesh = mesh_library.get_item_mesh(id)
var name = mesh_library.get_item_name(id)

----------------------------------------

TITLE: AABB Enclosure Test Example
DESCRIPTION: Demonstrates how to check if one AABB completely encloses another

LANGUAGE: gdscript
CODE:
var a = AABB(Vector3(0, 0, 0), Vector3(4, 4, 4))
var b = AABB(Vector3(1, 1, 1), Vector3(3, 3, 3))
var c = AABB(Vector3(2, 2, 2), Vector3(8, 8, 8))

print(a.encloses(a)) # Prints true
print(a.encloses(b)) # Prints true
print(a.encloses(c)) # Prints false

LANGUAGE: csharp
CODE:
var a = new Aabb(new Vector3(0, 0, 0), new Vector3(4, 4, 4));
var b = new Aabb(new Vector3(1, 1, 1), new Vector3(3, 3, 3));
var c = new Aabb(new Vector3(2, 2, 2), new Vector3(8, 8, 8));

GD.Print(a.Encloses(a)); // Prints True
GD.Print(a.Encloses(b)); // Prints True
GD.Print(a.Encloses(c)); // Prints False

----------------------------------------

TITLE: Installing Vulkan Validation Layers on openSUSE
DESCRIPTION: Package installation command for Vulkan validation layers on openSUSE using zypper

LANGUAGE: shell
CODE:
zypper install vulkan-validationlayers

----------------------------------------

TITLE: Class Definition RST Markup
DESCRIPTION: ReStructuredText markup defining the GLTFDocumentExtensionConvertImporterMesh class hierarchy and documentation structure.

LANGUAGE: rst
CODE:
.. _class_GLTFDocumentExtensionConvertImporterMesh:

GLTFDocumentExtensionConvertImporterMesh
========================================

**Inherits:** :ref:`GLTFDocumentExtension<class_GLTFDocumentExtension>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

----------------------------------------

TITLE: Node2D Transform Method Example
DESCRIPTION: Example showing how to transform a Node2D using the apply_scale method.

LANGUAGE: restructuredtext
CODE:
apply_scale(ratio: Vector2)
- Multiplies the current scale by the ratio vector

----------------------------------------

TITLE: Method Declarations for MultiplayerPeerExtension
DESCRIPTION: Core virtual methods that must be implemented when extending MultiplayerPeerExtension class to create custom multiplayer functionality. These methods handle connection management, packet transmission, and networking state.

LANGUAGE: gdscript
CODE:
func _close() -> void:
    pass

func _disconnect_peer(peer: int, force: bool) -> void:
    pass
    
func _get_available_packet_count() -> int:
    return 0
    
func _get_connection_status() -> int: # Returns ConnectionStatus enum
    return CONNECTION_DISCONNECTED
    
func _get_max_packet_size() -> int:
    return 0
    
func _get_packet(buffer: Array, buffer_size: int) -> int: # Returns Error enum
    return ERR_UNCONFIGURED
    
func _get_packet_channel() -> int:
    return 0
    
func _get_packet_mode() -> int: # Returns TransferMode enum
    return TRANSFER_MODE_RELIABLE
    
func _get_unique_id() -> int:
    return 0

----------------------------------------

TITLE: Complex Query String Generation in GDScript
DESCRIPTION: Shows advanced query string generation with null values and arrays

LANGUAGE: gdscript
CODE:
var fields = {"single": 123, "not_valued": null, "multiple": [22, 33, 44]}
var query_string = http_client.query_string_from_dict(fields)
# Returns "single=123&not_valued&multiple=22&multiple=33&multiple=44"

----------------------------------------

TITLE: Adding Context Menu Item with Shortcut
DESCRIPTION: Shows how to add a context menu item with an associated shortcut.

LANGUAGE: gdscript
CODE:
func _init():
    add_menu_shortcut(SHORTCUT, handle)

func _popup_menu(paths):
    add_context_menu_item_from_shortcut("File Custom options", SHORTCUT, ICON)

----------------------------------------

TITLE: Iterating Through Slide Collisions in C#
DESCRIPTION: Example of iterating through slide collisions after calling MoveAndSlide() in C#

LANGUAGE: csharp
CODE:
for (int i = 0; i < GetSlideCollisionCount(); i++)
{
    KinematicCollision2D collision = GetSlideCollision(i);
    GD.Print("Collided with: ", (collision.GetCollider() as Node).Name);
}

----------------------------------------

TITLE: Setting Properties in SpringBoneCollisionCapsule3D
DESCRIPTION: Property declarations and accessor methods for the capsule collision shape, including height, radius, and inside collision behavior.

LANGUAGE: gdscript
CODE:
# Property: height
set_height(value: float) -> void
get_height() -> float

# Property: inside
set_inside(value: bool) -> void
is_inside() -> bool

# Property: radius
set_radius(value: float) -> void
get_radius() -> float

----------------------------------------

TITLE: Getting Synchronized Stream Volume in GDScript
DESCRIPTION: Retrieves the volume of one of the synchronized streams by index using the get_sync_stream_volume method.

LANGUAGE: GDScript
CODE:
get_sync_stream_volume(stream_index: int) -> float

----------------------------------------

TITLE: Generating Resource Preview in EditorResourcePreviewGenerator
DESCRIPTION: This method generates a preview for a given resource. It must be implemented and can return null if generation fails.

LANGUAGE: GDScript
CODE:
func _generate(resource: Resource, size: Vector2i, metadata: Dictionary) -> Texture2D:
    # Implementation here
    return null

----------------------------------------

TITLE: String manipulation in C# for Godot
DESCRIPTION: Shows an example of string manipulation in C# using extension methods provided by Godot.

LANGUAGE: csharp
CODE:
string text = "Get up!";
string[] bigrams = text.Bigrams(); // ["Ge", "et", "t ", " u", "up", "p!"]

----------------------------------------

TITLE: Property Definitions in RST
DESCRIPTION: Defines the properties available in the AnimationNodeBlendSpace1D class including blend mode, space limits, snap value, sync and labels.

LANGUAGE: rst
CODE:
+------------------------------------------------------------+--------------------------------------------------------------------------+-------------+
| BlendMode                                                   | blend_mode                                                               | "0"       |
+------------------------------------------------------------+--------------------------------------------------------------------------+-------------+
| float                                                      | max_space                                                                | "1.0"     |
+------------------------------------------------------------+--------------------------------------------------------------------------+-------------+
| float                                                      | min_space                                                                | "-1.0"    |
+------------------------------------------------------------+--------------------------------------------------------------------------+-------------+
| float                                                      | snap                                                                     | "0.1"     |
+------------------------------------------------------------+--------------------------------------------------------------------------+-------------+
| bool                                                       | sync                                                                     | "false"   |
+------------------------------------------------------------+--------------------------------------------------------------------------+-------------+
| String                                                     | value_label                                                              | "value"   |
+------------------------------------------------------------+--------------------------------------------------------------------------+-------------+

----------------------------------------

TITLE: Capturing animation example in GDScript
DESCRIPTION: Example showing how to capture an animation with specific parameters

LANGUAGE: gdscript
CODE:
capture(name, duration, trans_type, ease_type)
play(name, custom_blend, custom_speed, from_end)

----------------------------------------

TITLE: Installing Vulkan Validation Layers on Mageia
DESCRIPTION: Package installation command for Vulkan validation layers on Mageia using urpmi

LANGUAGE: shell
CODE:
urpmi vulkan-validation-layers

----------------------------------------

TITLE: Defining Marker2D Property in RST
DESCRIPTION: RST documentation defining the gizmo_extents property of Marker2D class, which controls the size of the editor gizmo cross.

LANGUAGE: rst
CODE:
float **gizmo_extents** = "10.0"

- void **set_gizmo_extents**( value: float )
- float **get_gizmo_extents**( )

Size of the gizmo cross that appears in the editor.

----------------------------------------

TITLE: Loading an EditorFeatureProfile from File
DESCRIPTION: Demonstrates how to load an editor feature profile from a file using the load_from_file method.

LANGUAGE: GDScript
CODE:
var profile = EditorFeatureProfile.new()
var error = profile.load_from_file("user://my_profile.profile")

----------------------------------------

TITLE: Setting WorldBoundaryShape3D Plane in GDScript
DESCRIPTION: Example of how to set the plane property of a WorldBoundaryShape3D instance. The plane defines the boundary's orientation and position.

LANGUAGE: GDScript
CODE:
var shape = WorldBoundaryShape3D.new()
shape.plane = Plane(Vector3.UP, 5.0)

----------------------------------------

TITLE: Accessing Sky Properties in GDScript
DESCRIPTION: Example of how to set and get properties of a Sky object in GDScript. This includes setting the process mode, radiance size, and sky material.

LANGUAGE: gdscript
CODE:
var sky = Sky.new()

# Set process mode
sky.set_process_mode(Sky.PROCESS_MODE_QUALITY)

# Set radiance size
sky.set_radiance_size(Sky.RADIANCE_SIZE_256)

# Set sky material
var material = PanoramaSkyMaterial.new()
sky.set_material(material)

# Get properties
print(sky.get_process_mode())
print(sky.get_radiance_size())
print(sky.get_material())

----------------------------------------

TITLE: Adding a Node to Selection in GDScript
DESCRIPTION: Adds a node to the editor selection. Note that the newly selected node will not be automatically edited in the inspector.

LANGUAGE: GDScript
CODE:
add_node(node: Node)

----------------------------------------

TITLE: Getting Skip Count in AudioStreamGeneratorPlayback
DESCRIPTION: Returns the number of times playback skipped due to buffer underrun.

LANGUAGE: gdscript
CODE:
get_skips() -> int

----------------------------------------

TITLE: Defining Type Aliases for Shader Function Documentation
DESCRIPTION: Defines type aliases used throughout the documentation to represent various vector and matrix types. These aliases map to actual GLSL types.

LANGUAGE: GLSL
CODE:
vec_type        // float, vec2, vec3, or vec4
vec_int_type    // int, ivec2, ivec3, or ivec4
vec_uint_type   // uint, uvec2, uvec3, or uvec4
vec_bool_type   // bool, bvec2, bvec3, or bvec4
mat_type        // mat2, mat3, or mat4
gvec4_type      // vec4, ivec4, or uvec4
gsampler2D      // sampler2D, isampler2D, or uSampler2D
gsampler2DArray // sampler2DArray, isampler2DArray, or uSampler2DArray
gsampler3D      // sampler3D, isampler3D, or uSampler3D

----------------------------------------

TITLE: Depth Texture Position Retrieval in GLSL
DESCRIPTION: A shader snippet showing how to access the screen depth buffer and convert it to 3D position using the inverse projection matrix.

LANGUAGE: glsl
CODE:
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable, filter_nearest;

void fragment() {
    float depth = textureLod(depth_texture, SCREEN_UV, 0.0).r;
    vec4 upos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, depth, 1.0);
    vec3 pixel_position = upos.xyz / upos.w;
}

----------------------------------------

TITLE: Implementing Hard Light Blend Mode in GDScript
DESCRIPTION: Formula for the hard light blend mode used in the VisualShaderNodeColorOp class.

LANGUAGE: gdscript
CODE:
for (int i = 0; i < 3; i++) {
    float base = a[i];
    float blend = b[i];
    if (base < 0.5) {
        result[i] = base * (2.0 * blend);
    } else {
        result[i] = 1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5));
    }
}

----------------------------------------

TITLE: Setting Faces for ConcavePolygonShape3D
DESCRIPTION: Method to set triangle faces for a ConcavePolygonShape3D using an array of vertices. Each consecutive three vertices define a triangle.

LANGUAGE: GDScript
CODE:
set_faces(faces: PackedVector3Array)

----------------------------------------

TITLE: Transfer Mode Enumeration
DESCRIPTION: Defines the packet transfer modes that control reliability and ordering of network packets.

LANGUAGE: gdscript
CODE:
enum TransferMode {
    TRANSFER_MODE_UNRELIABLE = 0,
    TRANSFER_MODE_UNRELIABLE_ORDERED = 1,
    TRANSFER_MODE_RELIABLE = 2
}

----------------------------------------

TITLE: Checking Resource Existence in GDScript
DESCRIPTION: Checks if a resource with the specified name exists in the preloader.

LANGUAGE: GDScript
CODE:
has_resource(name: StringName) -> bool

----------------------------------------

TITLE: Listening for UDP Packets in GDScript
DESCRIPTION: Shows how to set up a PacketPeerUDP instance to listen for incoming packets on a specific port and process them in the _process function.

LANGUAGE: gdscript
CODE:
var peer

func _ready():
    peer = PacketPeerUDP.new()
    peer.bind(4433)


func _process(_delta):
    if peer.get_available_packet_count() > 0:
        var array_bytes = peer.get_packet()
        var packet_string = array_bytes.get_string_from_ascii()
        print("Received message: ", packet_string)

----------------------------------------

TITLE: Setting Color Property in CanvasModulate (GDScript)
DESCRIPTION: Demonstrates how to set and get the color property of a CanvasModulate node. The color property determines the tint applied to the canvas.

LANGUAGE: GDScript
CODE:
# Setting the color
canvas_modulate.set_color(Color(1, 0, 0, 1))  # Sets tint to red

# Getting the color
var current_color = canvas_modulate.get_color()

----------------------------------------

TITLE: Setting Bone Properties Example
DESCRIPTION: Example showing how to set basic bone attachment properties

LANGUAGE: gdscript
CODE:
var bone_attachment = BoneAttachment3D.new()
bone_attachment.bone_name = "Bone1"
bone_attachment.bone_idx = 1
bone_attachment.override_pose = false

----------------------------------------

TITLE: Creating and Configuring AudioEffectChorus in GDScript
DESCRIPTION: Example demonstrating how to create and configure an AudioEffectChorus effect with voice settings

LANGUAGE: GDScript
CODE:
var chorus = AudioEffectChorus.new()

# Configure basic properties
chorus.voice_count = 2
chorus.dry = 1.0
chorus.wet = 0.5

# Configure first voice
chorus.set_voice_delay_ms(0, 15.0)
chorus.set_voice_rate_hz(0, 0.8)
chorus.set_voice_depth_ms(0, 2.0)
chorus.set_voice_pan(0, -0.5)
chorus.set_voice_cutoff_hz(0, 8000.0)
chorus.set_voice_level_db(0, 0.0)

# Configure second voice
chorus.set_voice_delay_ms(1, 20.0)
chorus.set_voice_rate_hz(1, 1.2)
chorus.set_voice_depth_ms(1, 3.0)
chorus.set_voice_pan(1, 0.5)
chorus.set_voice_cutoff_hz(1, 8000.0)
chorus.set_voice_level_db(1, 0.0)

----------------------------------------

TITLE: Setting Up SSH Remote Deployment
DESCRIPTION: Example demonstrating configuration of SSH remote deployment settings including host, port, and script templates

LANGUAGE: GDScript
CODE:
export_platform.ssh_remote_deploy/enabled = true
export_platform.ssh_remote_deploy/host = "user@hostname"
export_platform.ssh_remote_deploy/port = "22"

----------------------------------------

TITLE: Exporting Global Class Property
DESCRIPTION: Shows how to export a property of a global class type, which enables type-restricted assignment in the Godot editor.

LANGUAGE: csharp
CODE:
public partial class Main : Node
{
    [Export]
    public MyNode MyNode { get; set; }
}

----------------------------------------

TITLE: BaseButton Property Example - Button Group Assignment
DESCRIPTION: Shows how to assign a button group to configure a button as a radio button

LANGUAGE: rst
CODE:
button_group = ButtonGroup.new() # The button will be configured as a radio button

----------------------------------------

TITLE: Creating a Simple Animation in C#
DESCRIPTION: Creates an animation that moves an enemy node to the right by 100 pixels over 2 seconds.

LANGUAGE: csharp
CODE:
var animation = new Animation();
int trackIndex = animation.AddTrack(Animation.TrackType.Value);
animation.TrackSetPath(trackIndex, "Enemy:position:x");
animation.TrackInsertKey(trackIndex, 0.0f, 0);
animation.TrackInsertKey(trackIndex, 2.0f, 100);
animation.Length = 2.0f;

----------------------------------------

TITLE: Activating Virtual Environment
DESCRIPTION: Commands to activate the created virtual environment on different platforms.

LANGUAGE: powershell
CODE:
godot-docs-venv\Scripts\activate.bat

LANGUAGE: sh
CODE:
source godot-docs-venv/bin/activate

----------------------------------------

TITLE: Setting Input Name Property in VisualShaderNodeInput
DESCRIPTION: Demonstrates the input_name property that specifies the shader input constant. The value should be in lower-case format representing shader constants like 'vertex' or 'point_size'.

LANGUAGE: GDScript
CODE:
input_name = "vertex"  # Sets the input to use VERTEX constant
input_name = "point_size"  # Sets the input to use POINT_SIZE constant

----------------------------------------

TITLE: Adding Submenu to Context Menu
DESCRIPTION: Illustrates how to add a submenu to the context menu with custom options.

LANGUAGE: gdscript
CODE:
func _popup_menu(paths):
    var popup_menu = PopupMenu.new()
    popup_menu.add_item("Blue")
    popup_menu.add_item("White")
    popup_menu.id_pressed.connect(_on_color_submenu_option)

    add_context_submenu_item("Set Node Color", popup_menu)

----------------------------------------

TITLE: GraphNode Signal Definition
DESCRIPTION: Signal emitted when any GraphNode slot is updated

LANGUAGE: gdscript
CODE:
signal slot_updated(slot_index: int)

----------------------------------------

TITLE: Checking Built-in Include File Existence
DESCRIPTION: Static method that checks if a shader include file exists in the database.

LANGUAGE: GDScript
CODE:
bool has_built_in_include_file(filename: String)

----------------------------------------

TITLE: Applying Mask to Wave Motion in GLSL Shader
DESCRIPTION: Limits the wave motion to the back half of the fish using the calculated mask.

LANGUAGE: glsl
CODE:
VERTEX.x += cos(time + body) * mask * wave;

----------------------------------------

TITLE: TextureButton Enumeration Definition
DESCRIPTION: Defines the StretchMode enumeration that controls how textures are displayed within the button's bounding rectangle.

LANGUAGE: gdscript
CODE:
enum StretchMode {
    STRETCH_SCALE = 0,            # Scale to fit bounding rectangle
    STRETCH_TILE = 1,             # Tile inside bounding rectangle
    STRETCH_KEEP = 2,             # Keep original size in top-left corner
    STRETCH_KEEP_CENTERED = 3,    # Keep original size and center
    STRETCH_KEEP_ASPECT = 4,      # Scale with maintained aspect ratio
    STRETCH_KEEP_ASPECT_CENTERED = 5, # Scale with aspect ratio and center
    STRETCH_KEEP_ASPECT_COVERED = 6  # Scale to fit shorter side
}

----------------------------------------

TITLE: GLTFPhysicsShape Property Example
DESCRIPTION: Sample property values for GLTFPhysicsShape showing default values and types

LANGUAGE: gdscript
CODE:
var shape = GLTFPhysicsShape.new()
shape.height = 2.0
shape.is_trigger = false
shape.mesh_index = -1
shape.radius = 0.5
shape.shape_type = ""
shape.size = Vector3(1, 1, 1)

----------------------------------------

TITLE: Vertex Color Pass-through Example in GLSL
DESCRIPTION: Demonstrates how to pass vertex color through to the fragment shader using varyings.

LANGUAGE: GLSL
CODE:
varying vec4 vertex_color;
void vertex() {
  vertex_color = COLOR;
}
void fragment() {
  COLOR = vertex_color;
}

----------------------------------------

TITLE: Brightness, Contrast and Saturation Shader in GLSL
DESCRIPTION: A shader demonstrating screen texture manipulation to adjust brightness, contrast, and saturation of the rendered image.

LANGUAGE: glsl
CODE:
shader_type canvas_item;

uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_nearest;

uniform float brightness = 1.0;
uniform float contrast = 1.0;
uniform float saturation = 1.0;

void fragment() {
    vec3 c = textureLod(screen_texture, SCREEN_UV, 0.0).rgb;

    c.rgb = mix(vec3(0.0), c.rgb, brightness);
    c.rgb = mix(vec3(0.5), c.rgb, contrast);
    c.rgb = mix(vec3(dot(vec3(1.0), c.rgb) * 0.33333), c.rgb, saturation);

    COLOR.rgb = c;
}

----------------------------------------

TITLE: Defining TorusMesh Properties and Methods
DESCRIPTION: Lists the properties and accessor methods for the TorusMesh class, including inner_radius, outer_radius, ring_segments, and rings properties.

LANGUAGE: RST
CODE:
float inner_radius = 0.5
float outer_radius = 1.0
int ring_segments = 32
int rings = 64

void set_inner_radius(float value)
float get_inner_radius()
void set_outer_radius(float value)
float get_outer_radius()
void set_ring_segments(int value)
int get_ring_segments()
void set_rings(int value)
int get_rings()

----------------------------------------

TITLE: Setting SpringBoneCollisionSphere3D Properties in GDScript
DESCRIPTION: Example of how to set the 'inside' and 'radius' properties of a SpringBoneCollisionSphere3D object in GDScript.

LANGUAGE: GDScript
CODE:
var sphere_collision = SpringBoneCollisionSphere3D.new()
sphere_collision.inside = true
sphere_collision.radius = 0.5

----------------------------------------

TITLE: Method Declaration - Get Recording
DESCRIPTION: Method for retrieving the recorded audio sample as an AudioStreamWAV object.

LANGUAGE: RST
CODE:
AudioStreamWAV get_recording() const

----------------------------------------

TITLE: Embedding Image in reStructuredText for Godot Documentation
DESCRIPTION: This snippet demonstrates how to embed an image in a Godot Engine documentation file using reStructuredText syntax. It specifies the path to the image file 'expres.png' in the 'img' directory.

LANGUAGE: reStructuredText
CODE:
.. image:: img/expres.png

----------------------------------------

TITLE: Drawing Hello World Text Example
DESCRIPTION: Example showing how to draw text using the default font

LANGUAGE: gdscript
CODE:
var default_font = ThemeDB.fallback_font
var default_font_size = ThemeDB.fallback_font_size
draw_string(default_font, Vector2(64, 64), "Hello world", HORIZONTAL_ALIGNMENT_LEFT, -1, default_font_size)

LANGUAGE: csharp
CODE:
Font defaultFont = ThemeDB.FallbackFont;
int defaultFontSize = ThemeDB.FallbackFontSize;
DrawString(defaultFont, new Vector2(64, 64), "Hello world", HORIZONTAL_ALIGNMENT_LEFT, -1, defaultFontSize);

----------------------------------------

TITLE: Basic Integer Operations in C#
DESCRIPTION: Shows integer operations and type limits in C#, including both 32-bit and 64-bit integers.

LANGUAGE: csharp
CODE:
int x = 1; // x is 1
x = (int)4.2; // x is 4, because 4.2 gets truncated
// We use long below, because GDScript's int is 64-bit while C#'s int is 32-bit.
long maxLong = 9223372036854775807; // Biggest value a long can store
maxLong++; // maxLong is now -9223372036854775808, because it wrapped around.

// Alternatively with C#'s 32-bit int type, which has a smaller maximum value.
int maxInt = 2147483647; // Biggest value an int can store
maxInt++; // maxInt is now -2147483648, because it wrapped around

----------------------------------------

TITLE: Removing Resource from Preloader in GDScript
DESCRIPTION: Removes a resource from the preloader using its name.

LANGUAGE: GDScript
CODE:
remove_resource(name: StringName)

----------------------------------------

TITLE: Scaling a Basis
DESCRIPTION: Shows how to scale a Basis by multiplying its components.

LANGUAGE: gdscript
CODE:
var my_basis = Basis(
    Vector3(1, 1, 1),
    Vector3(2, 2, 2),
    Vector3(3, 3, 3)
)
my_basis = my_basis.scaled(Vector3(0, 2, -2))

print(my_basis.x) # Prints (0.0, 2.0, -2.0)
print(my_basis.y) # Prints (0.0, 4.0, -4.0)
print(my_basis.z) # Prints (0.0, 6.0, -6.0)

LANGUAGE: csharp
CODE:
var myBasis = new Basis(
    new Vector3(1.0f, 1.0f, 1.0f),
    new Vector3(2.0f, 2.0f, 2.0f),
    new Vector3(3.0f, 3.0f, 3.0f)
);
myBasis = myBasis.Scaled(new Vector3(0.0f, 2.0f, -2.0f));

GD.Print(myBasis.X); // Prints (0, 2, -2)
GD.Print(myBasis.Y); // Prints (0, 4, -4)
GD.Print(myBasis.Z); // Prints (0, 6, -6)

----------------------------------------

TITLE: CanvasTexture Property Methods
DESCRIPTION: Getter and setter method declarations for CanvasTexture properties

LANGUAGE: RST
CODE:
void set_diffuse_texture(Texture2D value)
Texture2D get_diffuse_texture()
void set_normal_texture(Texture2D value)
Texture2D get_normal_texture()
void set_specular_color(Color value)
Color get_specular_color()
void set_specular_shininess(float value)
float get_specular_shininess()
void set_specular_texture(Texture2D value)
Texture2D get_specular_texture()
void set_texture_filter(TextureFilter value)
TextureFilter get_texture_filter()
void set_texture_repeat(TextureRepeat value)
TextureRepeat get_texture_repeat()

----------------------------------------

TITLE: Setting Basic Material Features
DESCRIPTION: Examples of enabling and configuring core material features like albedo color, metallic, roughness and transparency

LANGUAGE: gdscript
CODE:
var material = BaseMaterial3D.new()
material.albedo_color = Color(1.0, 0.0, 0.0, 1.0) # Red
material.metallic = 0.5
material.roughness = 0.2
material.transparency = BaseMaterial3D.TRANSPARENCY_ALPHA

----------------------------------------

TITLE: Querying Magnitude for Frequency Range in GDScript
DESCRIPTION: This method returns the magnitude of frequencies within a specified range as a Vector2. The x component represents the left stereo channel, and y represents the right channel. The mode parameter determines how the frequency range is processed.

LANGUAGE: GDScript
CODE:
get_magnitude_for_frequency_range(from_hz: float, to_hz: float, mode: MagnitudeMode = 1) -> Vector2

----------------------------------------

TITLE: Saving CryptoKey to String in GDScript
DESCRIPTION: Returns the cryptographic key as a string in PEM format. Can optionally return only the public key.

LANGUAGE: GDScript
CODE:
save_to_string(public_only: bool = false) -> String

----------------------------------------

TITLE: Using Shape RID for Physics Queries in C#
DESCRIPTION: Example showing how to create and use a circle shape RID for physics queries using PhysicsServer2D in C#

LANGUAGE: csharp
CODE:
RID shapeRid = PhysicsServer2D.CircleShapeCreate();
int radius = 64;
PhysicsServer2D.ShapeSetData(shapeRid, radius);

var params = new PhysicsShapeQueryParameters2D();
params.ShapeRid = shapeRid;

// Execute physics queries here...

// Release the shape when done with physics queries.
PhysicsServer2D.FreeRid(shapeRid);

----------------------------------------

TITLE: Implementing Hex Pixelization Shader in GLSL
DESCRIPTION: A single-pass shader that creates a hexagonal pixelization effect. Uses screen texture sampling and UV manipulation to create a hex mosaic pattern.

LANGUAGE: glsl
CODE:
shader_type canvas_item;

uniform vec2 size = vec2(32.0, 28.0);
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_nearest;

void fragment() {
        vec2 norm_size = size * SCREEN_PIXEL_SIZE;
        bool less_than_half = mod(SCREEN_UV.y / 2.0, norm_size.y) / norm_size.y < 0.5;
        vec2 uv = SCREEN_UV + vec2(norm_size.x * 0.5 * float(less_than_half), 0.0);
        vec2 center_uv = floor(uv / norm_size) * norm_size;
        vec2 norm_uv = mod(uv, norm_size) / norm_size;
        center_uv += mix(vec2(0.0, 0.0),
                         mix(mix(vec2(norm_size.x, -norm_size.y),
                                 vec2(0.0, -norm_size.y),
                                 float(norm_uv.x < 0.5)),
                             mix(vec2(0.0, -norm_size.y),
                                 vec2(-norm_size.x, -norm_size.y),
                                 float(norm_uv.x < 0.5)),
                             float(less_than_half)),
                         float(norm_uv.y < 0.3333333) * float(norm_uv.y / 0.3333333 < (abs(norm_uv.x - 0.5) * 2.0)));

        COLOR = textureLod(screen_texture, center_uv, 0.0);
}

----------------------------------------

TITLE: Basic CPUParticles3D Usage
DESCRIPTION: Example showing basic CPUParticles3D emitter setup

LANGUAGE: gdscript
CODE:
var particles = CPUParticles3D.new()
particles.amount = 50
particles.gravity = Vector3(0, -9.8, 0)
particles.lifetime = 2.0
particles.emitting = true

----------------------------------------

TITLE: Implementing Custom AudioEffectInstance in GDScript
DESCRIPTION: Demonstrates how to override the _instantiate method to create a custom AudioEffectInstance. This allows for customization of the effect's behavior when applied to an audio bus.

LANGUAGE: GDScript
CODE:
extends AudioEffect

@export var strength = 4.0

func _instantiate():
    var effect = CustomAudioEffectInstance.new()
    effect.base = self

    return effect

----------------------------------------

TITLE: FFmpeg Command for Video Resizing and Conversion
DESCRIPTION: Resizes a video to 720p height while preserving aspect ratio, then converts it to Ogg Theora format with specified quality settings.

LANGUAGE: shell
CODE:
ffmpeg -i input.mp4 -vf "scale=-1:720" -q:v 6 -q:a 6 -g:v 64 output.ogv

----------------------------------------

TITLE: Getting Listener Transform
DESCRIPTION: Method that returns the global orthonormalized Transform3D of the audio listener.

LANGUAGE: gdscript
CODE:
get_listener_transform() -> Transform3D

----------------------------------------

TITLE: Checking GDExtension Library Status
DESCRIPTION: Method to check if a GDExtension library is currently open and available for use

LANGUAGE: RST
CODE:
bool is_library_open() const

----------------------------------------

TITLE: Basic HTML Template for Godot Web Export
DESCRIPTION: A minimal HTML template for hosting a Godot web export. It includes placeholders for the Godot engine URL and configuration, as well as a canvas element and script to initialize and start the game.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
    <head>
        <title>My Template</title>
        <meta charset="UTF-8">
    </head>
    <body>
        <canvas id="canvas"></canvas>
        <script src="$GODOT_URL"></script>
        <script>
            var engine = new Engine($GODOT_CONFIG);
            engine.startGame();
        </script>
    </body>
</html>

----------------------------------------

TITLE: Sending Debug Messages
DESCRIPTION: Demonstrates how to send a debug message to a remote instance with optional data array.

LANGUAGE: GDScript
CODE:
send_message("debug_message", ["additional", "data"])

----------------------------------------

TITLE: Defining VisualShaderNodeIs Function Enumeration in GDScript
DESCRIPTION: Defines the Function enumeration for VisualShaderNodeIs, which specifies the comparison types available for the node.

LANGUAGE: GDScript
CODE:
enum Function {
    FUNC_IS_INF = 0,
    FUNC_IS_NAN = 1,
    FUNC_MAX = 2
}

----------------------------------------

TITLE: Position Transform Assignment
DESCRIPTION: Assigns the generated random position to the particle's transform

LANGUAGE: glsl
CODE:
TRANSFORM[3].xyz = position * 20.0;

----------------------------------------

TITLE: Shader Fragment Function Declaration
DESCRIPTION: Basic implementation of a fragment shader function that sets pixel color. This demonstrates how shaders process pixels in parallel rather than sequentially.

LANGUAGE: glsl
CODE:
void fragment() {
  COLOR = some_color;
}

----------------------------------------

TITLE: Method Override Example - Create Gizmo
DESCRIPTION: Example of overriding the _create_gizmo method to return a custom gizmo type for specific nodes

LANGUAGE: gdscript
CODE:
func _create_gizmo(for_node_3d: Node3D) -> EditorNode3DGizmo:
    if for_node_3d is MyCustomNode:
        return MyCustomGizmo.new()
    return null

----------------------------------------

TITLE: Setting emission shape parameters
DESCRIPTION: Configures the emission shape and related properties for controlling where particles spawn.

LANGUAGE: gdscript
CODE:
var particle_material = ParticleProcessMaterial.new()
particle_material.emission_shape = ParticleProcessMaterial.EMISSION_SHAPE_SPHERE
particle_material.emission_sphere_radius = 2.0
particle_material.spread = 45.0
particle_material.direction = Vector3(0, 1, 0)

----------------------------------------

TITLE: POST Request with Form Data in GDScript
DESCRIPTION: Example of making a POST request with form-encoded data

LANGUAGE: gdscript
CODE:
var fields = {"username" : "user", "password" : "pass"}
var query_string = http_client.query_string_from_dict(fields)
var headers = ["Content-Type: application/x-www-form-urlencoded", "Content-Length: " + str(query_string.length())]
var result = http_client.request(http_client.METHOD_POST, "/index.php", headers, query_string)

----------------------------------------

TITLE: Configuring Texture Parameters
DESCRIPTION: Examples of setting up various texture maps for albedo, normal mapping, roughness etc.

LANGUAGE: gdscript
CODE:
material.albedo_texture = preload("res://albedo.png")
material.normal_enabled = true
material.normal_texture = preload("res://normal.png")
material.roughness_texture = preload("res://roughness.png")

----------------------------------------

TITLE: Loading CryptoKey from String in GDScript
DESCRIPTION: Loads a cryptographic key from a string. Can optionally load only the public key.

LANGUAGE: GDScript
CODE:
load_from_string(string_key: String, public_only: bool = false) -> Error

----------------------------------------

TITLE: Setting BoxOccluder3D Size in GDScript
DESCRIPTION: Demonstrates how to set the size of a BoxOccluder3D object using the set_size method. The size is specified as a Vector3 representing the dimensions of the box in 3D space.

LANGUAGE: GDScript
CODE:
var box_occluder = BoxOccluder3D.new()
box_occluder.set_size(Vector3(2, 3, 4))

----------------------------------------

TITLE: Property Declarations - AudioEffectDelay
DESCRIPTION: Property declarations showing default values and types for the AudioEffectDelay class

LANGUAGE: RST
CODE:
float dry = 1.0
bool feedback_active = false
float feedback_delay_ms = 340.0
float feedback_level_db = -6.0
float feedback_lowpass = 16000.0
bool tap1_active = true
float tap1_delay_ms = 250.0
float tap1_level_db = -6.0
float tap1_pan = 0.2
bool tap2_active = true
float tap2_delay_ms = 500.0
float tap2_level_db = -12.0
float tap2_pan = -0.4

----------------------------------------

TITLE: Checking if AudioListener2D is Current in GDScript
DESCRIPTION: Returns a boolean indicating whether this AudioListener2D is currently active.

LANGUAGE: GDScript
CODE:
is_current() -> bool

----------------------------------------

TITLE: Setting Current AudioListener3D
DESCRIPTION: Method to enable this audio listener as the current active listener, overriding the camera's default listener.

LANGUAGE: gdscript
CODE:
make_current()

----------------------------------------

TITLE: Controlling Particle Behavior
DESCRIPTION: Setting up particle behavior parameters

LANGUAGE: gdscript
CODE:
particles.emission_shape = CPUParticles3D.EMISSION_SHAPE_SPHERE
particles.emission_sphere_radius = 2.0
particles.spread = 45.0
particles.initial_velocity_min = 5.0
particles.initial_velocity_max = 10.0

----------------------------------------

TITLE: Setting AnimationTree TimeSeek Parameter in C#
DESCRIPTION: Shows how to use AnimationNodeTimeSeek to play child animations from the start or a specific timestamp in C#.

LANGUAGE: csharp
CODE:
// Play child animation from the start.
animationTree.Set("parameters/TimeSeek/seek_request", 0.0);

// Play child animation from 12 second timestamp.
animationTree.Set("parameters/TimeSeek/seek_request", 12.0);

----------------------------------------

TITLE: Animating Water Height using TIME in GLSL Vertex Shader
DESCRIPTION: Uses the built-in TIME variable to animate water height in the vertex shader, creating moving waves.

LANGUAGE: GLSL
CODE:
float height(vec2 position, float time) {
  vec2 offset = 0.01 * cos(position + time);
  return texture(noise, (position / 10.0) - offset).x;
}

void vertex() {
  vec2 pos = VERTEX.xz;
  float k = height(pos, TIME);
  VERTEX.y = k;
  NORMAL = normalize(vec3(k - height(pos + vec2(0.1, 0.0), TIME), 0.1, k - height(pos + vec2(0.0, 0.1), TIME)));
}

----------------------------------------

TITLE: Properties Definition in RST
DESCRIPTION: RST table defining the properties of AudioEffectStereoEnhance class, including pan_pullout, surround, and time_pullout_ms properties.

LANGUAGE: rst
CODE:
+---------------------------+---------------------------------------------------------------------------------+---------+
| :ref:`float<class_float>` | :ref:`pan_pullout<class_AudioEffectStereoEnhance_property_pan_pullout>`         | ``1.0`` |
+---------------------------+---------------------------------------------------------------------------------+---------+
| :ref:`float<class_float>` | :ref:`surround<class_AudioEffectStereoEnhance_property_surround>`               | ``0.0`` |
+---------------------------+---------------------------------------------------------------------------------+---------+
| :ref:`float<class_float>` | :ref:`time_pullout_ms<class_AudioEffectStereoEnhance_property_time_pullout_ms>` | ``0.0`` |
+---------------------------+---------------------------------------------------------------------------------+---------+

----------------------------------------

TITLE: Creating Layered Textures from Images in GDScript
DESCRIPTION: Demonstrates how to create Texture2DArray, Cubemap, and CubemapArray from an array of Images. It shows filling images with different colors, creating the layered textures, and saving them as resources.

LANGUAGE: GDScript
CODE:
# Fill in an array of Images with different colors.
var images = []
const LAYERS = 6
for i in LAYERS:
    var image = Image.create_empty(128, 128, false, Image.FORMAT_RGB8)
    if i % 3 == 0:
        image.fill(Color.RED)
    elif i % 3 == 1:
        image.fill(Color.GREEN)
    else:
        image.fill(Color.BLUE)
    images.push_back(image)

# Create and save a 2D texture array. The array of images must have at least 1 Image.
var texture_2d_array = Texture2DArray.new()
texture_2d_array.create_from_images(images)
ResourceSaver.save(texture_2d_array, "res://texture_2d_array.res", ResourceSaver.FLAG_COMPRESS)

# Create and save a cubemap. The array of images must have exactly 6 Images.
# The cubemap's images are specified in this order: X+, X-, Y+, Y-, Z+, Z-
# (in Godot's coordinate system, so Y+ is "up" and Z- is "forward").
var cubemap = Cubemap.new()
cubemap.create_from_images(images)
ResourceSaver.save(cubemap, "res://cubemap.res", ResourceSaver.FLAG_COMPRESS)

# Create and save a cubemap array. The array of images must have a multiple of 6 Images.
# Each cubemap's images are specified in this order: X+, X-, Y+, Y-, Z+, Z-
# (in Godot's coordinate system, so Y+ is "up" and Z- is "forward").
var cubemap_array = CubemapArray.new()
cubemap_array.create_from_images(images)
ResourceSaver.save(cubemap_array, "res://cubemap_array.res", ResourceSaver.FLAG_COMPRESS)

----------------------------------------

TITLE: Setting Segments for ConcavePolygonShape2D in GDScript
DESCRIPTION: Demonstrates how to set the segments property of a ConcavePolygonShape2D object. The segments are defined as a PackedVector2Array containing pairs of points representing line segments.

LANGUAGE: GDScript
CODE:
var shape = ConcavePolygonShape2D.new()
shape.set_segments(PackedVector2Array([Vector2(0, 0), Vector2(10, 10), Vector2(10, 10), Vector2(20, 0)]))

----------------------------------------

TITLE: Setting Delay for MethodTweener in GDScript
DESCRIPTION: Sets the delay time in seconds before the MethodTweener starts interpolating. Returns the MethodTweener instance for method chaining.

LANGUAGE: GDScript
CODE:
set_delay(delay: float) -> MethodTweener

----------------------------------------

TITLE: Generating VRS Texture Method
DESCRIPTION: Method that generates a VRS texture based on target size and eye focal points. Returns an RID (Resource ID) and caches the result for repeated calls with the same parameters.

LANGUAGE: gdscript
CODE:
func make_vrs_texture(target_size: Vector2, eye_foci: PackedVector2Array) -> RID:
    # Implementation details not shown in documentation
    pass

----------------------------------------

TITLE: Getting Size of GPUParticlesAttractorVectorField3D in GDScript
DESCRIPTION: Retrieves the current size of the vector field box as a Vector3.

LANGUAGE: GDScript
CODE:
var size = attractor.get_size()

----------------------------------------

TITLE: Creating Rotation Matrix for Pivot Motion in GLSL Shader
DESCRIPTION: Constructs a 2D rotation matrix to implement a pivoting motion for the fish.

LANGUAGE: glsl
CODE:
float pivot_angle = cos(time) * 0.1 * pivot;
mat2 rotation_matrix = mat2(vec2(cos(pivot_angle), -sin(pivot_angle)), vec2(sin(pivot_angle), cos(pivot_angle)));

----------------------------------------

TITLE: Pixel Color Update Comparison in GDScript
DESCRIPTION: Traditional pixel color update implementation using nested loops in GDScript to process each pixel individually.

LANGUAGE: gdscript
CODE:
for x in range(width):
  for y in range(height):
    set_color(x, y, some_color)

----------------------------------------

TITLE: DirectionalLight3D Sky Mode Enumeration
DESCRIPTION: Defines how the directional light interacts with scene lighting and sky rendering.

LANGUAGE: gdscript
CODE:
enum SkyMode {
    SKY_MODE_LIGHT_AND_SKY = 0,
    SKY_MODE_LIGHT_ONLY = 1,
    SKY_MODE_SKY_ONLY = 2
}

----------------------------------------

TITLE: Getting Band Count in AudioEffectEQ
DESCRIPTION: Returns the number of frequency bands in the equalizer. This method is constant and does not modify the object's state.

LANGUAGE: GDScript
CODE:
get_band_count() -> int

----------------------------------------

TITLE: Setting and Getting Sync Property in AnimationNodeSync
DESCRIPTION: These methods allow setting and retrieving the 'sync' property of AnimationNodeSync. When sync is true, blended animations advance frames even when blend value is 0.

LANGUAGE: gdscript
CODE:
set_use_sync(value: bool) -> void
is_using_sync() -> bool

----------------------------------------

TITLE: Setting Render Modes for Toon Shading in GLSL
DESCRIPTION: Demonstrates how to set render modes for toon shading in a Godot spatial shader. This affects how diffuse and specular lighting is calculated.

LANGUAGE: GLSL
CODE:
render_mode diffuse_toon, specular_toon;

----------------------------------------

TITLE: Defining Table of Contents for Godot File Formats in reStructuredText
DESCRIPTION: This RST code defines a table of contents for Godot file format documentation. It includes links to GDScript grammar and TSCN file format documentation.

LANGUAGE: rst
CODE:
:allow_comments: False

Godot file formats
==================

.. toctree::
   :maxdepth: 1
   :name: toc-devel-file-formats

   gdscript_grammar.rst
   tscn.rst

----------------------------------------

TITLE: Iterating Through Slide Collisions in GDScript
DESCRIPTION: Example of iterating through slide collisions after calling move_and_slide()

LANGUAGE: gdscript
CODE:
for i in get_slide_collision_count():
    var collision = get_slide_collision(i)
    print("Collided with: ", collision.get_collider().name)

----------------------------------------

TITLE: GraphNode Method Example
DESCRIPTION: Method to set properties of a slot in a GraphNode

LANGUAGE: gdscript
CODE:
set_slot(slot_index: int, enable_left_port: bool, type_left: int, color_left: Color, enable_right_port: bool, type_right: int, color_right: Color, custom_icon_left: Texture2D = null, custom_icon_right: Texture2D = null, draw_stylebox: bool = true)

----------------------------------------

TITLE: Using set_point_cloud Method
DESCRIPTION: Demonstrates how to use the set_point_cloud method to automatically generate a convex hull from a set of points. This method removes unnecessary points to create an optimal convex shape.

LANGUAGE: GDScript
CODE:
var shape = ConvexPolygonShape2D.new()
shape.set_point_cloud(PackedVector2Array([Vector2(0, 0), Vector2(5, 5), Vector2(10, 0), Vector2(10, 10), Vector2(0, 10)]))

----------------------------------------

TITLE: Modifying GLTFState Data
DESCRIPTION: Example of modifying GLTFState data during import or export processes.

LANGUAGE: gdscript
CODE:
var state = GLTFState.new()

# Add a used extension
state.add_used_extension("KHR_materials_unlit", true)

# Append data to buffers
var buffer_data = PackedByteArray([1, 2, 3, 4])
var buffer_view_index = state.append_data_to_buffers(buffer_data, true)

# Set unique names
state.set_unique_names(["Node1", "Node2", "Node3"])

# Set additional custom data
state.set_additional_data("MyExtension", {"custom_property": 42})

----------------------------------------

TITLE: AudioEffectReverb Property Definitions
DESCRIPTION: Defines the customizable properties of the AudioEffectReverb class, including damping, dry/wet mix, high-pass filter, predelay settings, room size, and stereo spread.

LANGUAGE: rst
CODE:
.. table::
   :widths: auto

   +---------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`damping<class_AudioEffectReverb_property_damping>`                     | ``0.5``   |
   +---------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`dry<class_AudioEffectReverb_property_dry>`                             | ``1.0``   |
   +---------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`hipass<class_AudioEffectReverb_property_hipass>`                       | ``0.0``   |
   +---------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`predelay_feedback<class_AudioEffectReverb_property_predelay_feedback>` | ``0.4``   |
   +---------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`predelay_msec<class_AudioEffectReverb_property_predelay_msec>`         | ``150.0`` |
   +---------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`room_size<class_AudioEffectReverb_property_room_size>`                 | ``0.8``   |
   +---------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`spread<class_AudioEffectReverb_property_spread>`                       | ``1.0``   |
   +---------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>` | :ref:`wet<class_AudioEffectReverb_property_wet>`                             | ``0.5``   |
   +---------------------------+------------------------------------------------------------------------------+-----------+

----------------------------------------

TITLE: Managing Physical Bone Chain
DESCRIPTION: Methods for manipulating the physical bone chain, including fetching bones and setting/getting physical bone nodes at specific indices.

LANGUAGE: GDScript
CODE:
# Fetch all PhysicalBone2D nodes from Skeleton2D
fetch_physical_bones()

# Get PhysicalBone2D node at index
var bone = get_physical_bone_node(0)

# Set PhysicalBone2D node at index
set_physical_bone_node(0, NodePath("path/to/bone"))

----------------------------------------

TITLE: Connection Status Enumeration
DESCRIPTION: Defines the possible connection states for a MultiplayerPeer instance.

LANGUAGE: gdscript
CODE:
enum ConnectionStatus {
    CONNECTION_DISCONNECTED = 0,
    CONNECTION_CONNECTING = 1, 
    CONNECTION_CONNECTED = 2
}

----------------------------------------

TITLE: Customizing Silence Processing in AudioEffectInstance (GDScript)
DESCRIPTION: This method can be overridden to customize the processing behavior of the effect instance. Returning true forces the AudioServer to always call _process(), even if the bus is muted or inaudible.

LANGUAGE: gdscript
CODE:
func _process_silence() -> bool:

----------------------------------------

TITLE: Implementing Monster Squashing in C#
DESCRIPTION: Adds logic to detect collisions with monsters and squash them when jumped on using C#.

LANGUAGE: C#
CODE:
public override void _PhysicsProcess(double delta)
{
    // ...

    for (int index = 0; index < GetSlideCollisionCount(); index++)
    {
        KinematicCollision3D collision = GetSlideCollision(index);

        if (collision.GetCollider() is Mob mob)
        {
            if (Vector3.Up.Dot(collision.GetNormal()) > 0.1f)
            {
                mob.Squash();
                _targetVelocity.Y = BounceImpulse;
                break;
            }
        }
    }
}

----------------------------------------

TITLE: Configuring Rider Debug Settings for Godot Editor
DESCRIPTION: Configuration settings for debugging the Godot editor in Rider. Specifies the executable path, program arguments, working directory, and build step.

LANGUAGE: cpp
CODE:
Exe Path : $(LocalDebuggerCommand)
Program Arguments: -e --path <path to the Godot project>
Working Directory: $(LocalDebuggerWorkingDirectory)
Before Launch: Build Project

----------------------------------------

TITLE: Creating and Using Shape RID for Physics Queries
DESCRIPTION: Demonstrates how to create a sphere shape RID, configure query parameters, and properly clean up resources when done.

LANGUAGE: gdscript
CODE:
var shape_rid = PhysicsServer3D.shape_create(PhysicsServer3D.SHAPE_SPHERE)
var radius = 2.0
PhysicsServer3D.shape_set_data(shape_rid, radius)

var params = PhysicsShapeQueryParameters3D.new()
params.shape_rid = shape_rid

# Execute physics queries here...

# Release the shape when done with physics queries.
PhysicsServer3D.free_rid(shape_rid)

LANGUAGE: csharp
CODE:
RID shapeRid = PhysicsServer3D.ShapeCreate(PhysicsServer3D.ShapeType.Sphere);
float radius = 2.0f;
PhysicsServer3D.ShapeSetData(shapeRid, radius);

var params = new PhysicsShapeQueryParameters3D();
params.ShapeRid = shapeRid;

// Execute physics queries here...

// Release the shape when done with physics queries.
PhysicsServer3D.FreeRid(shapeRid);

----------------------------------------

TITLE: Using assert for runtime checks
DESCRIPTION: Demonstrates how to use the assert function to check conditions at runtime and display error messages.

LANGUAGE: GDScript
CODE:
var speed = -10
assert(speed < 20) # True, the program will continue.
assert(speed >= 0) # False, the program will stop.
assert(speed >= 0 and speed < 20) # You can also combine the two conditional statements in one check.
assert(speed < 20, "the speed limit is 20") # Show a message.

----------------------------------------

TITLE: Emitting Subparticle with Custom Properties in GLSL
DESCRIPTION: This snippet demonstrates how to emit a new particle with specified position, velocity, and color using the emit_subparticle() function. It creates a custom transform matrix to set the particle's position.

LANGUAGE: GLSL
CODE:
mat4 custom_transform = mat4(1.0);
custom_transform[3].xyz = vec3(10.5, 0.0, 4.0);
emit_subparticle(custom_transform, vec3(1.0, 0.5, 1.0), vec4(1.0, 0.0, 0.0, 1.0), vec4(1.0), FLAG_EMIT_POSITION | FLAG_EMIT_VELOCITY | FLAG_EMIT_COLOR);

----------------------------------------

TITLE: Extracting Xcode and iOS SDK on Linux
DESCRIPTION: Commands for extracting the Xcode .xip file and iOS SDK on a Linux system. This process involves using xar and pbzx tools to unpack the Xcode archive and copy the necessary SDK files.

LANGUAGE: shell
CODE:
mkdir xcode
xar -xf /path/to/Xcode_X.x.xip -C xcode
pbzx -n Content | cpio -i

[...]
######### Blocks

export IOS_SDK_VERSION="x.x"
mkdir -p iPhoneSDK/iPhoneOS${IOS_SDK_VERSION}.sdk
cp -r xcode/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/* iPhoneSDK/iPhoneOS${IOS_SDK_VERSION}.sdk
cp -r xcode/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/* iPhoneSDK/iPhoneOS${IOS_SDK_VERSION}.sdk/usr/include/c++
fusermount -u xcode

----------------------------------------

TITLE: Adding Animation Node
DESCRIPTION: Adds an AnimationNode to the blend tree at a specified position

LANGUAGE: GDScript
CODE:
add_node(name: StringName, node: AnimationNode, position: Vector2 = Vector2(0, 0))

----------------------------------------

TITLE: Class References in RST Documentation
DESCRIPTION: RST markup for referencing Godot engine classes

LANGUAGE: rst
CODE:
:ref:`RigidBody2D <class_RigidBody2D>`
:ref:`Sprite2D <class_Sprite2D>`
:ref:`CollisionShape2D <class_CollisionShape2D>`

----------------------------------------

TITLE: Defining VisualShaderNodeMultiplyAdd OpType Enumeration in GDScript
DESCRIPTION: Defines the OpType enumeration for the VisualShaderNodeMultiplyAdd class, specifying different types of operands and return values for the multiply-add operation.

LANGUAGE: GDScript
CODE:
enum OpType {
    OP_TYPE_SCALAR,
    OP_TYPE_VECTOR_2D,
    OP_TYPE_VECTOR_3D,
    OP_TYPE_VECTOR_4D,
    OP_TYPE_MAX
}

----------------------------------------

TITLE: Saving X509 Certificate to File
DESCRIPTION: Saves the X509 certificate to a .crt file on disk. Returns an Error code indicating success or failure.

LANGUAGE: GDScript
CODE:
save(path: String) -> Error

----------------------------------------

TITLE: Adding Downloadable Files in RST
DESCRIPTION: Shows how to include downloadable attachments in RST documentation using both the download directive and direct linking.

LANGUAGE: rst
CODE:
:download:`file_name.zip <files/file_name.zip>`\n\n`file_name.zip <https://github.com/godotengine/godot-docs-project-starters/releases/download/latest-4.x/file_name.zip>`_

----------------------------------------

TITLE: Creating Navigation Regions with NavigationServer in 3D
DESCRIPTION: Examples demonstrating how to create new navigation regions using the NavigationServer3D API and assign them to a navigation map.

LANGUAGE: gdscript
CODE:
extends Node3D

func _ready() -> void:
    var new_region_rid: RID = NavigationServer3D.region_create()
    var default_map_rid: RID = get_world_3d().get_navigation_map()
    NavigationServer3D.region_set_map(new_region_rid, default_map_rid)

LANGUAGE: csharp
CODE:
public partial class MyNode3D : Node3D
{
    public override void _Ready()
    {
        Rid newRegionRid = NavigationServer3D.RegionCreate();
        Rid defaultMapRid = GetWorld3D().NavigationMap;
        NavigationServer3D.RegionSetMap(newRegionRid, defaultMapRid);
    }
}

----------------------------------------

TITLE: Retrieving Compute Shader Results in GDScript
DESCRIPTION: This snippet demonstrates how to retrieve and print the results of a compute shader execution in GDScript.

LANGUAGE: gdscript
CODE:
var output_bytes := rd.buffer_get_data(buffer)
var output := output_bytes.to_float32_array()
print("Input: ", input)
print("Output: ", output)

----------------------------------------

TITLE: Label3D Property Access - Text Content
DESCRIPTION: Basic property access for setting and getting the 3D label's text content

LANGUAGE: gdscript
CODE:
var label = Label3D.new()
label.text = "Hello World"
var current_text = label.text

----------------------------------------

TITLE: Interacting with JavaScript Objects using JavaScriptObject in GDScript
DESCRIPTION: Demonstrates how to create and manipulate JavaScript objects using JavaScriptObject in Godot. Shows creation of ArrayBuffer, Uint8Array manipulation, console logging, and callback handling.

LANGUAGE: GDScript
CODE:
extends Node

var _my_js_callback = JavaScriptBridge.create_callback(myCallback) # This reference must be kept
var console = JavaScriptBridge.get_interface("console")

func _init():
    var buf = JavaScriptBridge.create_object("ArrayBuffer", 10) # new ArrayBuffer(10)
    print(buf) # Prints [JavaScriptObject:OBJECT_ID]
    var uint8arr = JavaScriptBridge.create_object("Uint8Array", buf) # new Uint8Array(buf)
    uint8arr[1] = 255
    prints(uint8arr[1], uint8arr.byteLength) # Prints "255 10"

    # Prints "Uint8Array(10) [ 0, 255, 0, 0, 0, 0, 0, 0, 0, 0 ]" in the browser's console.
    console.log(uint8arr)

    # Equivalent of JavaScriptBridge: Array.from(uint8arr).forEach(myCallback)
    JavaScriptBridge.get_interface("Array").from(uint8arr).forEach(_my_js_callback)

func myCallback(args):
    # Will be called with the parameters passed to the "forEach" callback
    # [0, 0, [JavaScriptObject:1173]]
    # [255, 1, [JavaScriptObject:1173]]
    # ...
    # [0, 9, [JavaScriptObject:1180]]
    print(args)

----------------------------------------

TITLE: Checking if a connection is valid in GraphEdit
DESCRIPTION: This virtual method can be used to insert additional error detection while the user is dragging a connection over a valid port. It returns true if the connection is valid, or false if it's impossible.

LANGUAGE: gdscript
CODE:
func _is_node_hover_valid(from, from_port, to, to_port):
    return from != to

LANGUAGE: csharp
CODE:
public override bool _IsNodeHoverValid(StringName fromNode, int fromPort, StringName toNode, int toPort)
{
    return fromNode != toNode;
}

----------------------------------------

TITLE: Configuring Backface Collision
DESCRIPTION: Property to enable or disable collision detection on both sides of the concave shape faces. When false, collisions only occur along face normals.

LANGUAGE: GDScript
CODE:
backface_collision: bool = false

----------------------------------------

TITLE: Managing Palette Selection
DESCRIPTION: Methods for getting and setting the selected MeshLibrary item in the grid map editor's palette.

LANGUAGE: GDScript
CODE:
int get_selected_palette_item() const
void set_selected_palette_item(item: int) const

----------------------------------------

TITLE: Begin Resample Method Definition
DESCRIPTION: Method to initialize the resampling process. Returns void and takes no parameters.

LANGUAGE: gdscript
CODE:
void begin_resample()

----------------------------------------

TITLE: Getting Modification Stack - GDScript
DESCRIPTION: Method to retrieve the currently held SkeletonModificationStack2D instance. Returns the modification stack that this modification is holding.

LANGUAGE: GDScript
CODE:
get_held_modification_stack() -> SkeletonModificationStack2D

----------------------------------------

TITLE: Retrieving JavaClass from JavaObject in GDScript
DESCRIPTION: This method returns the JavaClass that the JavaObject is an instance of. It is a constant method that doesn't modify the object's state.

LANGUAGE: GDScript
CODE:
JavaClass get_java_class() const

----------------------------------------

TITLE: Setting Advance Condition in C#
DESCRIPTION: Example of setting the advance condition for an AnimationNodeStateMachineTransition in C#. This snippet demonstrates how to control the transition based on a character's state.

LANGUAGE: csharp
CODE:
GetNode<AnimationTree>("animation_tree").Set("parameters/conditions/idle", IsOnFloor && (LinearVelocity.X == 0));

----------------------------------------

TITLE: Generating Self-Signed Certificate in Godot
DESCRIPTION: Uses Godot's Crypto class to generate a self-signed certificate for development purposes. This method is part of Godot's built-in cryptography functionality.

LANGUAGE: gdscript
CODE:
Crypto.generate_self_signed_certificate

----------------------------------------

TITLE: Configuring Server Bind IP
DESCRIPTION: Sets the IP address that the server will bind to for listening to connections. Defaults to wildcard '*' for all interfaces.

LANGUAGE: GDScript
CODE:
set_bind_ip("192.168.1.1")

----------------------------------------

TITLE: Setting Window Flags in GDScript
DESCRIPTION: Example of how to set various window flags using the set_flag method.

LANGUAGE: gdscript
CODE:
var window = Window.new()
window.set_flag(Window.FLAG_BORDERLESS, true)
window.set_flag(Window.FLAG_ALWAYS_ON_TOP, true)
window.set_flag(Window.FLAG_TRANSPARENT, true)

----------------------------------------

TITLE: Fog Shader Volume Built-ins
DESCRIPTION: Built-in variables specific to fog volume processing, including position data, UV mapping, and output parameters for color and density control.

LANGUAGE: glsl
CODE:
in vec3 WORLD_POSITION   // Froxel cell position in world space
in vec3 OBJECT_POSITION  // FogVolume center position
in vec3 UVW              // 3D texture mapping coordinates
in vec3 SIZE             // FogVolume size
in vec3 SDF              // Signed distance field
out vec3 ALBEDO         // Output base color
out float DENSITY       // Output density value
out vec3 EMISSION       // Output emission color

----------------------------------------

TITLE: Compiling Godot for iOS using SCons
DESCRIPTION: SCons command to compile Godot for iOS, specifying the platform, architecture, build target, SDK path, toolchain path, and iOS triple. This command initiates the cross-compilation process.

LANGUAGE: shell
CODE:
scons platform=ios arch=arm64 target=template_release IOS_SDK_PATH="/path/to/iPhoneSDK" IOS_TOOLCHAIN_PATH="/path/to/iostoolchain" ios_triple="arm-apple-darwin11-"

----------------------------------------

TITLE: Controlling Animation State Machine in GDScript
DESCRIPTION: Example showing how to get the state machine playback object and trigger a state transition in GDScript.

LANGUAGE: gdscript
CODE:
var state_machine = $AnimationTree.get("parameters/playback")
state_machine.travel("some_state")

----------------------------------------

TITLE: File Extensions in RST Documentation
DESCRIPTION: RST markup showing file extension references

LANGUAGE: rst
CODE:
``.tscn``

----------------------------------------

TITLE: Adding Visual Elements to a Gizmo
DESCRIPTION: Shows how to add visual elements like lines, meshes and billboards to display the gizmo in the editor.

LANGUAGE: GDScript
CODE:
add_lines(lines: PackedVector3Array, material: Material, billboard: bool = false)
add_mesh(mesh: Mesh, material: Material)
add_unscaled_billboard(material: Material, default_scale: float = 1)

----------------------------------------

TITLE: Setting Camera as Current in Godot
DESCRIPTION: Code snippet showing how to set a camera as the current active camera for a Viewport in both GDScript and C#.

LANGUAGE: GDScript
CODE:
camera.make_current()

LANGUAGE: C#
CODE:
camera.MakeCurrent();

----------------------------------------

TITLE: Converting GLTFCamera to Camera3D
DESCRIPTION: Converts GLTFCamera instance into a Godot Camera3D node, translating glTF camera properties to Godot format.

LANGUAGE: gdscript
CODE:
to_node() -> Camera3D

----------------------------------------

TITLE: Handling Line Breaks in Editor Interface Translations
DESCRIPTION: Example of translating a C++ string with line breaks. The '\n' characters should be preserved as line breaks in the translation.

LANGUAGE: po
CODE:
"Scene '%s' is currently being edited.\n"
"Changes will only take effect when reloaded."

----------------------------------------

TITLE: Querying Navigation Path in 3D C#
DESCRIPTION: This snippet shows how to obtain a 3D navigation path using the default navigation map in C#. It uses NavigationServer3D to get the path between two Vector3 positions.

LANGUAGE: csharp
CODE:
using Godot;
using System;

public partial class MyNode3D : Node3D
{
    // Basic query for a navigation path using the default navigation map.

    private Vector3[] GetNavigationPath(Vector3 startPosition, Vector3 targetPosition)
    {
        if (!IsInsideTree())
        {
            return Array.Empty<Vector3>();
        }

        Rid defaultMapRid = GetWorld3D().NavigationMap;
        Vector3[] path = NavigationServer3D.MapGetPath(
            defaultMapRid,
            startPosition,
            targetPosition,
            true
        );
        return path;
    }
}

----------------------------------------

TITLE: Renderer-Specific Color Selection
DESCRIPTION: Example showing how to use built-in renderer defines to select different colors based on the current renderer

LANGUAGE: GLSL
CODE:
shader_type spatial;

void fragment() {
#if CURRENT_RENDERER == RENDERER_COMPATIBILITY
    ALBEDO = vec3(0.0, 0.0, 1.0);
#elif CURRENT_RENDERER == RENDERER_MOBILE
    ALBEDO = vec3(1.0, 0.0, 0.0);
#else // CURRENT_RENDERER == RENDERER_FORWARD_PLUS
    ALBEDO = vec3(0.0, 1.0, 0.0);
#endif
}

----------------------------------------

TITLE: CanvasItemMaterial Light Mode Constants
DESCRIPTION: Enumeration defining the available lighting modes for canvas item materials, controlling how materials interact with light sources.

LANGUAGE: GDScript
CODE:
LIGHT_MODE_NORMAL = 0
LIGHT_MODE_UNSHADED = 1
LIGHT_MODE_LIGHT_ONLY = 2

----------------------------------------

TITLE: Generating LODs
DESCRIPTION: Method to generate level of detail variations for the mesh with control over normal angles and bone transformations.

LANGUAGE: GDScript
CODE:
generate_lods(
  normal_merge_angle,
  normal_split_angle,
  bone_transform_array
)

----------------------------------------

TITLE: Enumerating WebRTCDataChannel ChannelState Constants
DESCRIPTION: Constants defining the possible states of a WebRTC data channel - connecting, open, closing, closed.

LANGUAGE: gdscript
CODE:
enum ChannelState {
    STATE_CONNECTING = 0,  # Channel created but not connected
    STATE_OPEN = 1,       # Channel is open and ready
    STATE_CLOSING = 2,    # Channel is closing
    STATE_CLOSED = 3      # Channel is closed
}

----------------------------------------

TITLE: Calculating World Space Coordinates in GLSL Shader (Correct Method)
DESCRIPTION: The proper way to calculate world space coordinates in a shader when using double-precision builds by computing in vertex function and passing through varying.

LANGUAGE: glsl
CODE:
varying vec3 world;
void vertex() {
    world = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
}

----------------------------------------

TITLE: Optimizing Godot Build for Size
DESCRIPTION: Configures the build process to optimize for size instead of speed. This is particularly useful for platforms like WebAssembly.

LANGUAGE: shell
CODE:
scons target=template_release optimize=size

----------------------------------------

TITLE: Building Web Editor
DESCRIPTION: Command for building the Godot editor that can run in a web browser.

LANGUAGE: shell
CODE:
scons platform=web target=editor

----------------------------------------

TITLE: Setting and Getting Radius Property in GPUParticlesAttractorSphere3D
DESCRIPTION: These methods are used to set and get the radius property of the GPUParticlesAttractorSphere3D. The radius defines the size of the attractor sphere in 3D units.

LANGUAGE: gdscript
CODE:
set_radius(value: float) -> void
get_radius() -> float

----------------------------------------

TITLE: Setting up a SpringBoneSimulator3D
DESCRIPTION: Example of creating and configuring a SpringBoneSimulator3D for a hair bone chain

LANGUAGE: gdscript
CODE:
var spring_bone = SpringBoneSimulator3D.new()
spring_bone.set_root_bone(0, 10) # Set root bone index
spring_bone.set_end_bone(0, 15) # Set end bone index
spring_bone.set_stiffness(0, 0.5) # Set stiffness
spring_bone.set_gravity(0, 9.8) # Set gravity
spring_bone.set_drag(0, 0.3) # Set drag
add_child(spring_bone)

----------------------------------------

TITLE: Implementing View Count Method in GDExtension
DESCRIPTION: Method to be implemented in GDExtension to return the view count.

LANGUAGE: GDScript
CODE:
int _get_view_count() virtual const

----------------------------------------

TITLE: Accessing Collision Shapes from Area2D Signals
DESCRIPTION: Example code showing how to get the CollisionShape2D nodes from shape indices when handling area shape entered signals

LANGUAGE: gdscript
CODE:
var other_shape_owner = area.shape_find_owner(area_shape_index)
var other_shape_node = area.shape_owner_get_owner(other_shape_owner)

var local_shape_owner = shape_find_owner(local_shape_index)
var local_shape_node = shape_owner_get_owner(local_shape_owner)

----------------------------------------

TITLE: Setting Frame Texture in AnimatedTexture
DESCRIPTION: Assigns a Texture2D to a specific frame in the AnimatedTexture. Frame IDs start at 0, and the maximum number of frames is defined by the MAX_FRAMES constant.

LANGUAGE: gdscript
CODE:
set_frame_texture(frame: int, texture: Texture2D)

----------------------------------------

TITLE: Adding Custom Performance Monitors in C#
DESCRIPTION: Shows how to add custom performance monitors with different categories using the AddCustomMonitor method in C#.

LANGUAGE: csharp
CODE:
public override void _Ready()
{
    var monitorValue = new Callable(this, MethodName.GetMonitorValue);

    // Adds monitor with name "MyName" to category "MyCategory".
    Performance.AddCustomMonitor("MyCategory/MyMonitor", monitorValue);
    // Adds monitor with name "MyName" to category "Custom".
    // Note: "MyCategory/MyMonitor" and "MyMonitor" have same name but different ids so the code is valid.
    Performance.AddCustomMonitor("MyMonitor", monitorValue);

    // Adds monitor with name "MyName" to category "Custom".
    // Note: "MyMonitor" and "Custom/MyMonitor" have same name and same category but different ids so the code is valid.
    Performance.AddCustomMonitor("Custom/MyMonitor", monitorValue);

    // Adds monitor with name "MyCategoryOne/MyCategoryTwo/MyMonitor" to category "Custom".
    Performance.AddCustomMonitor("MyCategoryOne/MyCategoryTwo/MyMonitor", monitorValue);
}

public int GetMonitorValue()
{
    return GD.Randi() % 25;
}

----------------------------------------

TITLE: Configuring and Structuring Asset Library Documentation in reStructuredText
DESCRIPTION: This snippet sets up the configuration and structure for the Asset Library documentation. It disables comments and creates a table of contents with links to various sections of the documentation.

LANGUAGE: reStructuredText
CODE:
:allow_comments: False

Asset Library
=============

.. toctree::
   :maxdepth: 1
   :name: toc-learn-features-assetlib

   what_is_assetlib
   using_assetlib
   submitting_to_assetlib

----------------------------------------

TITLE: Defining Table of Contents for Assets Pipeline in reStructuredText
DESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It includes various topics related to asset pipelines in Godot Engine, such as importing processes, different asset types, and exporting scenes.

LANGUAGE: reStructuredText
CODE:
.. toctree::
   :maxdepth: 1
   :name: toc-learn-workflow-assets

   import_process
   importing_images
   importing_audio_samples
   importing_translations
   importing_3d_scenes/index
   retargeting_3d_skeletons
   exporting_3d_scenes
   escn_exporter/index

----------------------------------------

TITLE: String Comparison and Similarity - GDScript
DESCRIPTION: Examples of comparing strings using similarity, case sensitivity and pattern matching.

LANGUAGE: gdscript
CODE:
print("ABC123".similarity("ABC123")) # Prints 1.0
print("ABC123".similarity("XYZ456")) # Prints 0.0
print("ABC123".similarity("123ABC")) # Prints 0.8
print("ABC123".similarity("abc123")) # Prints 0.4

----------------------------------------

TITLE: Loading and Playing WAV File Example
DESCRIPTION: Example showing how to load a WAV file from a file drop event and play it through an AudioStreamPlayer with custom sample rate settings.

LANGUAGE: GDScript
CODE:
@onready var audio_player = $AudioStreamPlayer

func _ready():
    get_window().files_dropped.connect(_on_files_dropped)

func _on_files_dropped(files):
    if files[0].get_extension() == "wav":
        audio_player.stream = AudioStreamWAV.load_from_file(files[0], {
                "force/max_rate": true,
                "force/max_rate_hz": 11025
            })
        audio_player.play()

----------------------------------------

TITLE: Enabling and Checking Default Value in VisualShaderNodeBooleanParameter
DESCRIPTION: These methods enable the usage of the default value and check if it's enabled for the boolean parameter in the visual shader.

LANGUAGE: gdscript
CODE:
set_default_value_enabled(value: bool)
is_default_value_enabled() -> bool

----------------------------------------

TITLE: Offsetting Animation Time in GLSL Shader
DESCRIPTION: Modifies the time variable to give each fish a unique position in the swim cycle using INSTANCE_CUSTOM.

LANGUAGE: glsl
CODE:
float time = (TIME * time_scale) + (6.28318 * INSTANCE_CUSTOM.x);

----------------------------------------

TITLE: Setting Encryption Key as Environment Variable (Windows PowerShell)
DESCRIPTION: This command sets the generated encryption key as an environment variable in Windows PowerShell.

LANGUAGE: powershell
CODE:
$env:SCRIPT_AES256_ENCRYPTION_KEY="your_generated_key"

----------------------------------------

TITLE: Randomizing Particle Parameters Formula
DESCRIPTION: Formula used to calculate randomized values for particle physics parameters, where the final value is based on the parameter value and randomness factor

LANGUAGE: gdscript
CODE:
initial_value = param_value + param_value * randomness

----------------------------------------

TITLE: Handling Input Event in CollisionObject3D
DESCRIPTION: Virtual method to receive unhandled InputEvents. Requires input_ray_pickable to be true and at least one collision_layer bit to be set.

LANGUAGE: gdscript
CODE:
func _input_event(camera, event, event_position, normal, shape_idx):
    # Handle input event here

----------------------------------------

TITLE: Managing Grid Selection
DESCRIPTION: Methods for getting and setting the cell selection bounds in the grid map editor.

LANGUAGE: GDScript
CODE:
AABB get_selection() const
void set_selection(begin: Vector3i, end: Vector3i)
bool has_selection() const

----------------------------------------

TITLE: Translating C++ Format Specifiers in Editor Interface
DESCRIPTION: Example of translating a C++ string with a format specifier for a filename. The '%s' specifier should be preserved in the translation.

LANGUAGE: po
CODE:
"There is no '%s' file."

----------------------------------------

TITLE: Querying Navigation Path in 2D GDScript
DESCRIPTION: This snippet demonstrates how to obtain a 2D navigation path using the default navigation map in GDScript. It uses NavigationServer2D to get the path between two Vector2 positions.

LANGUAGE: gdscript
CODE:
extends Node2D

# Basic query for a navigation path using the default navigation map.

func get_navigation_path(p_start_position: Vector2, p_target_position: Vector2) -> PackedVector2Array:
    if not is_inside_tree():
        return PackedVector2Array()

    var default_map_rid: RID = get_world_2d().get_navigation_map()
    var path: PackedVector2Array = NavigationServer2D.map_get_path(
        default_map_rid,
        p_start_position,
        p_target_position,
        true
    )
    return path

----------------------------------------

TITLE: Handling Escape Key Input in C#
DESCRIPTION: This snippet shows how to close the game when the escape key is pressed using the _UnhandledInput function in C#.

LANGUAGE: csharp
CODE:
public override void _UnhandledInput(InputEvent @event)
{
    if (@event is InputEventKey eventKey)
        if (eventKey.Pressed && eventKey.Keycode == Key.Escape)
            GetTree().Quit();
}

----------------------------------------

TITLE: Method Declaration - Is Recording Active
DESCRIPTION: Method that returns whether audio recording is currently active.

LANGUAGE: RST
CODE:
bool is_recording_active() const

----------------------------------------

TITLE: Connecting to XRController3D Button Press Signal
DESCRIPTION: Demonstrates how to connect to the button_pressed signal of an XRController3D node.

LANGUAGE: GDScript
CODE:
controller.connect("button_pressed", self, "_on_button_pressed")

----------------------------------------

TITLE: Setting Texture Sampler Property in GLTFTexture
DESCRIPTION: Defines a property for specifying the texture sampler ID. When set to -1, the default texture sampler is used with linear filtering and repeat wrapping in both axes.

LANGUAGE: gdscript
CODE:
var sampler: int = -1

----------------------------------------

TITLE: Particle Emission Example
DESCRIPTION: Demonstrates basic particle emission setup with Transform3D, velocity, color and custom data

LANGUAGE: gdscript
CODE:
var particles = GPUParticles3D.new()
particles.emit_particle(
    Transform3D.IDENTITY,
    Vector3(0, 1, 0), # Upward velocity
    Color.WHITE,
    Color(0, 0, 0, 1), # Custom data
    GPUParticles3D.EMIT_FLAG_POSITION | GPUParticles3D.EMIT_FLAG_VELOCITY
)

----------------------------------------

TITLE: Decrement Reference Counter
DESCRIPTION: Method to manually decrement the internal reference counter. Returns boolean indicating if object should be freed.

LANGUAGE: GDScript
CODE:
unreference()

----------------------------------------

TITLE: Getting Point Connections in AStar3D (GDScript)
DESCRIPTION: Demonstrates how to get point connections in AStar3D.

LANGUAGE: gdscript
CODE:
var astar = AStar3D.new()
astar.add_point(1, Vector3(0, 0, 0))
astar.add_point(2, Vector3(0, 1, 0))
astar.add_point(3, Vector3(1, 1, 0))
astar.add_point(4, Vector3(2, 0, 0))

astar.connect_points(1, 2, true)
astar.connect_points(1, 3, true)

var neighbors = astar.get_point_connections(1) # Returns [2, 3]

----------------------------------------

TITLE: Class Definition and Inheritance
DESCRIPTION: Class definition for AudioStreamPlaybackPlaylist showing inheritance hierarchy

LANGUAGE: rst
CODE:
.. _class_AudioStreamPlaybackPlaylist:

AudioStreamPlaybackPlaylist
===========================

**Inherits:** :ref:`AudioStreamPlayback<class_AudioStreamPlayback>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

----------------------------------------

TITLE: Setting RDTextureFormat Properties
DESCRIPTION: RST documentation showing property definitions for RDTextureFormat including dimensions, format, layers, and other texture configuration options.

LANGUAGE: RST
CODE:
Properties
----------

+------------------------------------------------------------------------------+----------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`                                                        | :ref:`array_layers<class_RDTextureFormat_property_array_layers>`           | ``1``     |
+------------------------------------------------------------------------------+----------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`                                                        | :ref:`depth<class_RDTextureFormat_property_depth>`                         | ``1``     |
+------------------------------------------------------------------------------+----------------------------------------------------------------------------+-----------+
| :ref:`DataFormat<enum_RenderingDevice_DataFormat>`                           | :ref:`format<class_RDTextureFormat_property_format>`                       | ``8``     |

----------------------------------------

TITLE: Getting Tile Power Example
DESCRIPTION: Example shows how to get custom tile data from the clicked tile

LANGUAGE: gdscript
CODE:
func get_clicked_tile_power():
    var clicked_cell = tile_map_layer.local_to_map(tile_map_layer.get_local_mouse_position())
    var data = tile_map_layer.get_cell_tile_data(clicked_cell)
    if data:
        return data.get_custom_data("power")
    else:
        return 0

----------------------------------------

TITLE: Basic AudioStreamPlayer2D Usage - RST Documentation
DESCRIPTION: RST documentation showing the inheritance hierarchy and key functionality of the AudioStreamPlayer2D class, including its core purpose of playing positional audio in 2D space.

LANGUAGE: rst
CODE:
AudioStreamPlayer2D
===================

**Inherits:** :ref:`Node2D<class_Node2D>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

Plays positional sound in 2D space.

----------------------------------------

TITLE: Creating a Basic Tree Structure
DESCRIPTION: Example showing how to create a basic tree structure with a hidden root, two children, and a subchild

LANGUAGE: gdscript
CODE:
func _ready():
    var tree = Tree.new()
    var root = tree.create_item()
    tree.hide_root = true
    var child1 = tree.create_item(root)
    var child2 = tree.create_item(root)
    var subchild1 = tree.create_item(child1)
    subchild1.set_text(0, "Subchild1")

LANGUAGE: csharp
CODE:
public override void _Ready()
{
    var tree = new Tree();
    TreeItem root = tree.CreateItem();
    tree.HideRoot = true;
    TreeItem child1 = tree.CreateItem(root);
    TreeItem child2 = tree.CreateItem(root);
    TreeItem subchild1 = tree.CreateItem(child1);
    subchild1.SetText(0, "Subchild1");
}

----------------------------------------

TITLE: Calculating Body Position for Wave Motion in GLSL Shader
DESCRIPTION: Computes a 'body' variable representing the position along the fish's spine, used for wave and twist motions.

LANGUAGE: glsl
CODE:
float body = (VERTEX.z + 1.0) / 2.0;

----------------------------------------

TITLE: Binding Methods in Godot C++
DESCRIPTION: Shows how to bind methods to make them accessible from scripts, including handling default argument values.

LANGUAGE: cpp
CODE:
ClassDB::bind_method(D_METHOD("methodname", "arg1name", "arg2name", "arg3name"), &MyCustomType::method);

LANGUAGE: cpp
CODE:
ClassDB::bind_method(D_METHOD("methodname", "arg1name", "arg2name", "arg3name"), &MyCustomType::method, DEFVAL(-1), DEFVAL(-2)); // Default values for arg2name (-1) and arg3name (-2).

----------------------------------------

TITLE: Exporting Enums and Flags in GDScript
DESCRIPTION: Shows how to export enum and flag variables. This allows for selection from predefined options in the editor.

LANGUAGE: GDScript
CODE:
enum NamedEnum {THING_1, THING_2, ANOTHER_THING = -1}
@export var x: NamedEnum

@export_enum("Warrior", "Magician", "Thief") var character_class: int

@export_flags("Fire", "Water", "Earth", "Wind") var spell_elements = 0

----------------------------------------

TITLE: Finding the Closest Point in an AStar2D Segment
DESCRIPTION: Shows how to find the closest position within a segment of connected points to a given position.

LANGUAGE: gdscript
CODE:
var astar = AStar2D.new()
astar.add_point(1, Vector2(0, 0))
astar.add_point(2, Vector2(0, 5))
astar.connect_points(1, 2)
var res = astar.get_closest_position_in_segment(Vector2(3, 3)) # Returns (0, 3)

LANGUAGE: csharp
CODE:
var astar = new AStar2D();
astar.AddPoint(1, new Vector2(0, 0));
astar.AddPoint(2, new Vector2(0, 5));
astar.ConnectPoints(1, 2);
Vector2 res = astar.GetClosestPositionInSegment(new Vector2(3, 3)); // Returns (0, 3)

----------------------------------------

TITLE: GLSL Implementation of Perlin Noise 3D
DESCRIPTION: Contains the GLSL shader code that implements the Perlin 3D noise algorithm, including helper functions for noise generation and interpolation.

LANGUAGE: glsl
CODE:
vec3 mod289_3(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289_4(vec4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
    return mod289_4(((x * 34.0) + 1.0) * x);
}

vec4 taylorInvSqrt(vec4 r) {
    return 1.79284291400159 - 0.85373472095314 * r;
}

vec3 fade(vec3 t) {
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

// Classic Perlin noise.
float cnoise(vec3 P) {
    vec3 Pi0 = floor(P); // Integer part for indexing.
    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1.
    Pi0 = mod289_3(Pi0);
    Pi1 = mod289_3(Pi1);
    vec3 Pf0 = fract(P); // Fractional part for interpolation.
    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0.
    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
    vec4 iy = vec4(Pi0.yy, Pi1.yy);
    vec4 iz0 = vec4(Pi0.z);
    vec4 iz1 = vec4(Pi1.z);

    vec4 ixy = permute(permute(ix) + iy);
    vec4 ixy0 = permute(ixy + iz0);
    vec4 ixy1 = permute(ixy + iz1);

    vec4 gx0 = ixy0 * (1.0 / 7.0);
    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
    gx0 = fract(gx0);
    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
    vec4 sz0 = step(gz0, vec4(0.0));
    gx0 -= sz0 * (step(0.0, gx0) - 0.5);
    gy0 -= sz0 * (step(0.0, gy0) - 0.5);

    vec4 gx1 = ixy1 * (1.0 / 7.0);
    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
    gx1 = fract(gx1);
    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
    vec4 sz1 = step(gz1, vec4(0.0));
    gx1 -= sz1 * (step(0.0, gx1) - 0.5);
    gy1 -= sz1 * (step(0.0, gy1) - 0.5);

    vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);
    vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);
    vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);
    vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);
    vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);
    vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);
    vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);
    vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);

    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
    g000 *= norm0.x;
    g010 *= norm0.y;
    g100 *= norm0.z;
    g110 *= norm0.w;
    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
    g001 *= norm1.x;
    g011 *= norm1.y;
    g101 *= norm1.z;
    g111 *= norm1.w;

    float n000 = dot(g000, Pf0);
    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
    float n111 = dot(g111, Pf1);

    vec3 fade_xyz = fade(Pf0);
    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
    return 2.2 * n_xyz;

----------------------------------------

TITLE: Accessing Built-in Performance Monitors in C#
DESCRIPTION: Shows how to access a built-in performance monitor (FPS) using the GetMonitor method in C#.

LANGUAGE: csharp
CODE:
GD.Print(Performance.GetMonitor(Performance.Monitor.TimeFps)); // Prints the FPS to the console.

----------------------------------------

TITLE: Generating Class Reference XML Documentation in Godot Engine
DESCRIPTION: Command to regenerate XML documentation files using the compiled Godot binary with the --doctool option. Must be run from the Godot root directory after compiling the engine.

LANGUAGE: shell
CODE:
./bin/godot.linuxbsd.editor.x86_64 --doctool

----------------------------------------

TITLE: Manipulating NavigationLayers in 2D C#
DESCRIPTION: This snippet shows how to change navigation layers for regions and agents, and how to perform path queries with specific layer restrictions in 2D using C#.

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyNode2D : Node2D
{
    private Rid _map;
    private Vector2 _startPosition;
    private Vector2 _targetPosition;

    private void ChangeLayers()
    {
        NavigationRegion2D region = GetNode<NavigationRegion2D>("NavigationRegion2D");
        // Enables the 4th layer for this region.
        region.NavigationLayers = EnableBitmaskInx(region.NavigationLayers, 4);
        // Disables the 1st layer for this region.
        region.NavigationLayers = DisableBitmaskInx(region.NavigationLayers, 1);

        NavigationAgent2D agent = GetNode<NavigationAgent2D>("NavigationAgent2D");
        // Make future path queries of this agent ignore regions with the 4th layer.
        agent.NavigationLayers = DisableBitmaskInx(agent.NavigationLayers, 4);

        uint pathQueryNavigationLayers = 0;
        pathQueryNavigationLayers = EnableBitmaskInx(pathQueryNavigationLayers, 2);
        // Get a path that only considers 2nd layer regions.
        Vector2[] path = NavigationServer2D.MapGetPath(
            _map,
            _startPosition,
            _targetPosition,
            true,
            pathQueryNavigationLayers
        );
    }

    private static bool IsBitmaskInxEnabled(uint bitmask, int index)
    {
        return (bitmask & (1 << index)) != 0;
    }

    private static uint EnableBitmaskInx(uint bitmask, int index)
    {
        return bitmask | (1u << index);
    }

    private static uint DisableBitmaskInx(uint bitmask, int index)
    {
        return bitmask & ~(1u << index);
    }
}

----------------------------------------

TITLE: Input Event Debugging
DESCRIPTION: Script to print input event information for debugging purposes.

LANGUAGE: gdscript
CODE:
extends Node

func _input(event):
    print(event.as_text())

LANGUAGE: csharp
CODE:
using Godot;

public partial class Node : Godot.Node
{
    public override void _Input(InputEvent @event)
    {
        GD.Print(@event.AsText());
    }
}

----------------------------------------

TITLE: SpringBoneCollision3D Property Declarations
DESCRIPTION: Property declarations for bone index, bone name, position offset and rotation offset that define the collision object's relationship to a Skeleton3D bone.

LANGUAGE: GDScript
CODE:
var bone: int = -1
var bone_name: String = ""
var position_offset: Vector3
var rotation_offset: Quaternion

----------------------------------------

TITLE: String Split Example
DESCRIPTION: Shows how to split a string into an array using delimiters

LANGUAGE: gdscript
CODE:
var some_array = "One,Two,Three,Four".split(",", true, 2)

print(some_array.size()) # Prints 3
print(some_array[0])     # Prints "One"
print(some_array[1])     # Prints "Two" 
print(some_array[2])     # Prints "Three,Four"

----------------------------------------

TITLE: Creating 2D Navigation Obstacles with Source Geometry
DESCRIPTION: Demonstrates how to create and configure 2D navigation obstacles using source geometry data for navigation mesh baking.

LANGUAGE: gdscript
CODE:
var obstacle_outline = PackedVector2Array([
    Vector2(-50, -50),
    Vector2(50, -50),
    Vector2(50, 50),
    Vector2(-50, 50)
])

var navigation_mesh = NavigationPolygon.new()
var source_geometry = NavigationMeshSourceGeometryData2D.new()

NavigationServer2D.parse_source_geometry_data(navigation_mesh, source_geometry, $MyTestRootNode)

var obstacle_carve: bool = true

source_geometry.add_projected_obstruction(obstacle_outline, obstacle_carve)

NavigationServer2D.bake_from_source_geometry_data(navigation_mesh, source_geometry)

LANGUAGE: csharp
CODE:
Vector2[] obstacleOutline
[
    new Vector2(-50, -50),
    new Vector2(50, -50),
    new Vector2(50, 50),
    new Vector2(-50, 50),
];

var navigationMesh = new NavigationPolygon();
var sourceGeometry = new NavigationMeshSourceGeometryData2D();

NavigationServer2D.ParseSourceGeometryData(navigationMesh, sourceGeometry, GetNode<Node2D>("MyTestRootNode"));

bool obstacleCarve = true;

sourceGeometry.AddProjectedObstruction(obstacleOutline, obstacleCarve);
NavigationServer2D.BakeFromSourceGeometryData(navigationMesh, sourceGeometry);

----------------------------------------

TITLE: Defining Reference Counted Objects in Godot C++
DESCRIPTION: Demonstrates how to define and use reference counted objects using the Ref<> template.

LANGUAGE: cpp
CODE:
class MyReference: public RefCounted {
    GDCLASS(MyReference, RefCounted);
};

Ref<MyReference> myref(memnew(MyReference));

----------------------------------------

TITLE: Renaming Web Template Archives
DESCRIPTION: Commands for renaming the compiled template archives to the standard naming convention.

LANGUAGE: shell
CODE:
mv bin/godot.web.template_release.wasm32.zip bin/web_release.zip
mv bin/godot.web.template_debug.wasm32.zip bin/web_debug.zip

----------------------------------------

TITLE: GLTFSkin Transform Methods
DESCRIPTION: Methods for handling inverse bind matrices and joint mappings

LANGUAGE: gdscript
CODE:
var skin = GLTFSkin.new()
var inverse_binds = skin.get_inverse_binds()
var joint_mappings = skin.get_joint_i_to_name()
var bone_mappings = skin.get_joint_i_to_bone_i()

----------------------------------------

TITLE: Retrieving Image from Imported Texture in GDScript
DESCRIPTION: Demonstrates how to retrieve the image from an imported texture using the get_image() method, which returns a copy of the image.

LANGUAGE: GDScript
CODE:
var texture = load("res://icon.svg")
var image = texture.get_image()

----------------------------------------

TITLE: Setting Material Property - GDScript
DESCRIPTION: Property for setting and getting the Material used to draw the CSG shape.

LANGUAGE: GDScript
CODE:
set_material(value: Material)
get_material() -> Material

----------------------------------------

TITLE: Encrypting and Decrypting Data with AES in C#
DESCRIPTION: Demonstrates how to use AesContext for encrypting and decrypting data in both ECB and CBC modes using C#. It includes key and IV generation, encryption, decryption, and result verification.

LANGUAGE: csharp
CODE:
using Godot;
using System.Diagnostics;

public partial class MyNode : Node
{
    private AesContext _aes = new AesContext();

    public override void _Ready()
    {
        string key = "My secret key!!!"; // Key must be either 16 or 32 bytes.
        string data = "My secret text!!"; // Data size must be multiple of 16 bytes, apply padding if needed.
        // Encrypt ECB
        _aes.Start(AesContext.Mode.EcbEncrypt, key.ToUtf8Buffer());
        byte[] encrypted = _aes.Update(data.ToUtf8Buffer());
        _aes.Finish();
        // Decrypt ECB
        _aes.Start(AesContext.Mode.EcbDecrypt, key.ToUtf8Buffer());
        byte[] decrypted = _aes.Update(encrypted);
        _aes.Finish();
        // Check ECB
        Debug.Assert(decrypted == data.ToUtf8Buffer());

        string iv = "My secret iv!!!!"; // IV must be of exactly 16 bytes.
        // Encrypt CBC
        _aes.Start(AesContext.Mode.EcbEncrypt, key.ToUtf8Buffer(), iv.ToUtf8Buffer());
        encrypted = _aes.Update(data.ToUtf8Buffer());
        _aes.Finish();
        // Decrypt CBC
        _aes.Start(AesContext.Mode.EcbDecrypt, key.ToUtf8Buffer(), iv.ToUtf8Buffer());
        decrypted = _aes.Update(encrypted);
        _aes.Finish();
        // Check CBC
        Debug.Assert(decrypted == data.ToUtf8Buffer());
    }
}

----------------------------------------

TITLE: Implementing _handles Method in GDScript
DESCRIPTION: This method determines if the plugin will handle a given Resource type. It should return true if the plugin can create a tooltip for the specified type.

LANGUAGE: GDScript
CODE:
func _handles(type: String) -> bool:
    # Implementation here
    pass

----------------------------------------

TITLE: TextServerManager Signal Declarations
DESCRIPTION: Signal declarations for interface addition and removal notifications.

LANGUAGE: rst
CODE:
interface_added(interface_name: StringName)
interface_removed(interface_name: StringName)

----------------------------------------

TITLE: Setting Base Instance for Expression Method Calls in GDScript
DESCRIPTION: Illustrates how to set a base instance for an expression to allow method calls.

LANGUAGE: GDScript
CODE:
func double(number):
    return number * 2

func _ready():
    var expression = Expression.new()
    expression.parse("double(10)")
    var result = expression.execute([], self)
    print(result)  # 20

----------------------------------------

TITLE: Initializing GDScriptSyntaxHighlighter in C#
DESCRIPTION: Creates a new TextEdit node, initializes a GDScriptSyntaxHighlighter, and assigns it to the TextEdit node using C# syntax.

LANGUAGE: csharp
CODE:
var codePreview = new TextEdit();
var highlighter = new GDScriptSyntaxHighlighter();
codePreview.SyntaxHighlighter = highlighter;

----------------------------------------

TITLE: Class Definition in RST
DESCRIPTION: RST markup defining the AudioSamplePlayback class structure and inheritance hierarchy.

LANGUAGE: rst
CODE:
.. _class_AudioSamplePlayback:\n\nAudioSamplePlayback\n===================\n\n**Experimental:** This class may be changed or removed in future versions.\n\n**Inherits:** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

----------------------------------------

TITLE: StyleBoxTexture Axis Stretch Configuration
DESCRIPTION: Shows how to set up axis stretch modes for horizontal and vertical texture stretching

LANGUAGE: GDScript
CODE:
var style_box = StyleBoxTexture.new()
style_box.axis_stretch_horizontal = StyleBoxTexture.AXIS_STRETCH_MODE_TILE
style_box.axis_stretch_vertical = StyleBoxTexture.AXIS_STRETCH_MODE_TILE_FIT

----------------------------------------

TITLE: Defining RST Table of Contents for Input Handling
DESCRIPTION: ReStructuredText markup defining a table of contents tree for input handling documentation sections, with maxdepth of 1 level and specific navigation name.

LANGUAGE: rst
CODE:
.. toctree::
   :maxdepth: 1
   :name: toc-learn-features-inputs

   inputevent
   input_examples
   mouse_and_input_coordinates
   custom_mouse_cursor
   controllers_gamepads_joysticks
   handling_quit_requests

----------------------------------------

TITLE: FFmpeg Video Compression Command
DESCRIPTION: Command line instruction for compressing video files using FFmpeg with quality control via CRF value. Converts input video to WebM format.

LANGUAGE: bash
CODE:
ffmpeg -i input.mp4 -crf 23 output.webm

----------------------------------------

TITLE: Adding Items to Inventory with Static Typing in GDScript
DESCRIPTION: Demonstrates the use of static typing in a method that adds items to an inventory. It shows type hints for parameters and return value, as well as typed variable declarations.

LANGUAGE: GDScript
CODE:
class_name Inventory

func add(reference: Item, amount: int = 1):
    var item := find_item(reference)
    if not item:
        item = _instance_item_from_db(reference)
    item.amount += amount

----------------------------------------

TITLE: Creating Motion Mask in GLSL Shader
DESCRIPTION: Generates a mask to limit motion to the back half of the fish using smoothstep.

LANGUAGE: glsl
CODE:
float mask = smoothstep(mask_black, mask_white, 1.0 - body);

----------------------------------------

TITLE: Get Render Scene Data Method Implementation
DESCRIPTION: Virtual method that must be implemented to return the RenderSceneData object.

LANGUAGE: gdscript
CODE:
RenderSceneData _get_render_scene_data() virtual const

----------------------------------------

TITLE: Clamping Values in Godot C++
DESCRIPTION: Demonstrates the use of MAX, MIN, and CLAMP macros for clamping values in Godot's C++ code.

LANGUAGE: cpp
CODE:
int a = 3;
int b = 5;

MAX(b, 6); // 6
MIN(2, a); // 2
CLAMP(a, 10, 30); // 10

----------------------------------------

TITLE: Setting Edge Connection Margin for 3D Navigation in C#
DESCRIPTION: This C# snippet demonstrates setting the edge connection margin for the default 3D navigation map to 0.5 world units at runtime. It uses the NavigationServer3D API and retrieves the default map RID from the World3D.

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyNode3D : Node3D
{
    public override void _Ready()
    {
        // 3D margins are designed to work with 3D world unit values.
        Rid defaultMapRid = GetWorld3D().NavigationMap;
        NavigationServer3D.MapSetEdgeConnectionMargin(defaultMapRid, 0.5f);
    }
}

----------------------------------------

TITLE: Initializing Default Basis in GDScript and C#
DESCRIPTION: Shows how to create and access a default basis structure with its default axis vectors in both GDScript and C#.

LANGUAGE: gdscript
CODE:
var basis = Basis()
# Contains the following default values:
basis.x = Vector3(1, 0, 0) # Vector pointing along the X axis
basis.y = Vector3(0, 1, 0) # Vector pointing along the Y axis
basis.z = Vector3(0, 0, 1) # Vector pointing along the Z axis

LANGUAGE: csharp
CODE:
// Due to technical limitations on structs in C# the default
// constructor will contain zero values for all fields.
var defaultBasis = new Basis();
GD.Print(defaultBasis); // prints: ((0, 0, 0), (0, 0, 0), (0, 0, 0))

// Instead we can use the Identity property.
var identityBasis = Basis.Identity;
GD.Print(identityBasis.X); // prints: (1, 0, 0)
GD.Print(identityBasis.Y); // prints: (0, 1, 0)
GD.Print(identityBasis.Z); // prints: (0, 0, 1)

// The Identity basis is equivalent to:
var basis = new Basis(Vector3.Right, Vector3.Up, Vector3.Back);
GD.Print(basis); // prints: ((1, 0, 0), (0, 1, 0), (0, 0, 1))

----------------------------------------

TITLE: Documentation Abbreviations
DESCRIPTION: Definitions of documentation abbreviations used throughout the documentation

LANGUAGE: rst
CODE:
.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`

----------------------------------------

TITLE: Generating Sine Wave Audio with AudioStreamGenerator in GDScript
DESCRIPTION: Demonstrates how to generate a sine wave using AudioStreamGenerator by implementing buffer filling logic in GDScript. Uses an AudioStreamPlayer to output the generated sound.

LANGUAGE: gdscript
CODE:
var playback # Will hold the AudioStreamGeneratorPlayback.
@onready var sample_hz = $AudioStreamPlayer.stream.mix_rate
var pulse_hz = 440.0 # The frequency of the sound wave.
var phase = 0.0

func _ready():
    $AudioStreamPlayer.play()
    playback = $AudioStreamPlayer.get_stream_playback()
    fill_buffer()

func fill_buffer():
    var increment = pulse_hz / sample_hz
    var frames_available = playback.get_frames_available()

    for i in range(frames_available):
        playback.push_frame(Vector2.ONE * sin(phase * TAU))
        phase = fmod(phase + increment, 1.0)

----------------------------------------

TITLE: GLTFSkin Property Access
DESCRIPTION: Example of accessing the main properties of a GLTFSkin object

LANGUAGE: gdscript
CODE:
var skin = GLTFSkin.new()
skin.godot_skin = Skin.new()
skin.joints = PackedInt32Array()
skin.skeleton = -1
skin.skin_root = -1

----------------------------------------

TITLE: Setting Collision Layer Value in CollisionObject3D
DESCRIPTION: Enables or disables a specific layer in the collision_layer property.

LANGUAGE: gdscript
CODE:
set_collision_layer_value(layer_number, value)

----------------------------------------

TITLE: Game-side Debugger Implementation in GDScript
DESCRIPTION: Example implementation of the game-side debug message handling, showing how to register message captures and send debug messages using the EngineDebugger singleton.

LANGUAGE: gdscript
CODE:
extends Node

func _ready():
    EngineDebugger.register_message_capture("my_plugin", _capture)
    EngineDebugger.send_message("my_plugin:ping", ["test"])

func _capture(message, data):
    # Note that the "my_plugin:" prefix is not used here.
    if message == "echo":
        prints("Echo received:", data)
        return true
    return false

----------------------------------------

TITLE: AABB Absolute Value Example
DESCRIPTION: Shows how to get an AABB with non-negative size using the abs() method

LANGUAGE: gdscript
CODE:
var box = AABB(Vector3(5, 0, 5), Vector3(-20, -10, -5))
var absolute = box.abs()
print(absolute.position) # Prints (-15.0, -10.0, 0.0)
print(absolute.size)     # Prints (20.0, 10.0, 5.0)

LANGUAGE: csharp
CODE:
var box = new Aabb(new Vector3(5, 0, 5), new Vector3(-20, -10, -5));
var absolute = box.Abs();
GD.Print(absolute.Position); // Prints (-15, -10, 0)
GD.Print(absolute.Size);     // Prints (20, 10, 5)

----------------------------------------

TITLE: TabContainer Methods Example
DESCRIPTION: Example demonstrating common TabContainer method calls

LANGUAGE: gdscript
CODE:
var tab_container = TabContainer.new()
tab_container.set_tab_title(0, "My Tab")
tab_container.set_tab_icon(0, some_texture)
tab_container.get_tab_count()
tab_container.get_current_tab_control()

----------------------------------------

TITLE: Accessing StyleBox Content Margins in GDScript
DESCRIPTION: Demonstrates how to get and set content margins on a StyleBox instance. Content margins define the space between the edge of the StyleBox and its contents.

LANGUAGE: GDScript
CODE:
var style_box = StyleBoxFlat.new()

# Get content margin
var top_margin = style_box.get_content_margin(SIDE_TOP)

# Set content margin
style_box.set_content_margin(SIDE_LEFT, 10)

# Set all content margins at once
style_box.set_content_margin_all(5)

----------------------------------------

TITLE: Setting and Getting Node Size in VisualShaderNodeResizableBase
DESCRIPTION: This snippet shows the property and methods for managing the size of a resizable visual shader node. The size property is a Vector2 representing the dimensions of the node in the visual shader graph.

LANGUAGE: GDScript
CODE:
# Setting the size of the node
node.set_size(Vector2(100, 50))

# Getting the current size of the node
var current_size = node.get_size()

----------------------------------------

TITLE: Adding Animation to Global Library - GDScript
DESCRIPTION: Demonstrates adding an animation to the global animation library

LANGUAGE: gdscript
CODE:
var global_library = mixer.get_animation_library("")
global_library.add_animation("animation_name", animation_resource)

----------------------------------------

TITLE: Setting StyleBoxTexture Properties Example
DESCRIPTION: Example showing how to configure basic StyleBoxTexture properties including texture margins and expand margins

LANGUAGE: GDScript
CODE:
var style_box = StyleBoxTexture.new()
style_box.texture = preload("res://border_texture.png")
style_box.set_texture_margin_all(10.0)
style_box.set_expand_margin_all(5.0)
style_box.draw_center = true
style_box.modulate_color = Color(1, 1, 1, 1)

----------------------------------------

TITLE: Performance Optimization Commands
DESCRIPTION: Commands to optimize documentation build performance using parallel processing and file filtering.

LANGUAGE: powershell
CODE:
set SPHINXOPTS=-j2 && make html

LANGUAGE: sh
CODE:
make html SPHINXOPTS=-j2

LANGUAGE: sh
CODE:
make html FILELIST='classes/class_node.rst classes/class_resource.rst'

LANGUAGE: sh
CODE:
make html FILELIST="$(git diff HEAD --name-only | sed -z 's/\n/ /g')"

LANGUAGE: sh
CODE:
make html FILELIST="$(git diff master --name-only | sed -z 's/\n/ /g')"

----------------------------------------

TITLE: Type Casting in GDScript
DESCRIPTION: Demonstrates type casting in GDScript using the 'as' keyword and shows how to handle potential null values.

LANGUAGE: GDScript
CODE:
func _on_body_entered(body: PhysicsBody2D) -> void:
    var player := body as PlayerController
    if not player:
        return

    player.damage()

----------------------------------------

TITLE: Playing Animations with AnimationNodeOneShot in C#
DESCRIPTION: Examples of controlling one-shot animations including playing, aborting, fading out and checking states using C#.

LANGUAGE: csharp
CODE:
// Play child animation connected to "shot" port.
animationTree.Set("parameters/OneShot/request", (int)AnimationNodeOneShot.OneShotRequest.Fire);

// Abort child animation connected to "shot" port.
animationTree.Set("parameters/OneShot/request", (int)AnimationNodeOneShot.OneShotRequest.Abort);

// Abort child animation with fading out connected to "shot" port.
animationTree.Set("parameters/OneShot/request", (int)AnimationNodeOneShot.OneShotRequest.FadeOut);

// Get current state (read-only).
animationTree.Get("parameters/OneShot/active");

// Get current internal state (read-only).
animationTree.Get("parameters/OneShot/internal_active");

----------------------------------------

TITLE: Loading CompressedTexture3D from Path
DESCRIPTION: Method to load a CompressedTexture3D from a specified file path. Returns an Error code indicating success or failure of the operation.

LANGUAGE: GDScript
CODE:
var texture = CompressedTexture3D.new()
var error = texture.load("path/to/texture.ctex3d")

----------------------------------------

TITLE: Getting Java Method List in Godot
DESCRIPTION: Returns an Array of Dictionaries containing information about Java methods and their signatures, similar to Object.get_method_list(). This method is constant and has no side effects.

LANGUAGE: GDScript
CODE:
get_java_method_list()

----------------------------------------

TITLE: Registering Custom Server in Godot
DESCRIPTION: Code for registering the custom HilbertHotel server in Godot's engine, including type registration and singleton setup.

LANGUAGE: cpp
CODE:
#include "register_types.h"

#include "core/object/class_db.h"
#include "core/config/engine.h"

#include "hilbert_hotel.h"

static HilbertHotel *hilbert_hotel = NULL;
static _HilbertHotel *_hilbert_hotel = NULL;

void register_hilbert_hotel_types() {
    hilbert_hotel = memnew(HilbertHotel);
    hilbert_hotel->init();
    _hilbert_hotel = memnew(_HilbertHotel);
    ClassDB::register_class<_HilbertHotel>();
    Engine::get_singleton()->add_singleton(Engine::Singleton("HilbertHotel", _HilbertHotel::get_singleton()));
}

void unregister_hilbert_hotel_types() {
    if (hilbert_hotel) {
        hilbert_hotel->finish();
        memdelete(hilbert_hotel);
    }

    if (_hilbert_hotel) {
        memdelete(_hilbert_hotel);
    }
}

----------------------------------------

TITLE: Working with ZIP Archives in Godot
DESCRIPTION: Shows how to read files from a ZIP archive, list them in an ItemList node, and create a new ZIP archive by copying files from the original.

LANGUAGE: gdscript
CODE:
var zip_reader = ZIPReader.new()
zip_reader.open(path)
var files = zip_reader.get_files()
files.sort()
for file in files:
    $ItemList.add_item(file, null)
    $ItemList.set_item_disabled(-1, file.ends_with("/"))

var zip_packer = ZIPPacker.new()
var error = zip_packer.open(path)
if error != OK:
    push_error("Couldn't open path for saving ZIP archive (error code: %s)." % error_string(error))
    return

for file in zip_reader.get_files():
    zip_packer.start_file(file)
    zip_packer.write_file(zip_reader.read_file(file))
    zip_packer.close_file()

zip_packer.close()

LANGUAGE: csharp
CODE:
var zipReader = new ZipReader();
zipReader.Open(path);
string[] files = zipReader.GetFiles();
Array.Sort(files);
foreach (string file in files)
{
    GetNode<ItemList>("ItemList").AddItem(file);
    GetNode<ItemList>("ItemList").SetItemDisabled(-1, file.EndsWith('/'));
}

var zipPacker = new ZipPacker();
var error = zipPacker.Open(path);
if (error != Error.Ok)
{
    GD.PrintErr($"Couldn't open path for saving ZIP archive (error code: {error}).");
    return;
}

foreach (string file in zipReader.GetFiles())
{
    zipPacker.StartFile(file);
    zipPacker.WriteFile(zipReader.ReadFile(file));
    zipPacker.CloseFile();
}

zipPacker.Close();

----------------------------------------

TITLE: Initializing MeshDataTool from Surface
DESCRIPTION: Creates a new MeshDataTool instance and initializes it from an existing mesh surface.

LANGUAGE: gdscript
CODE:
var mdt = MeshDataTool.new()
mdt.create_from_surface(mesh, 0)

----------------------------------------

TITLE: Accessing Texture3DRD RID in GDScript
DESCRIPTION: Demonstrates getting and setting the RID of the texture object created on the RenderingDevice. The RID is used to reference the texture in low-level rendering operations.

LANGUAGE: GDScript
CODE:
# Getting the RID
var texture_rid = texture_3d_rd.get_texture_rd_rid()

# Setting the RID
texture_3d_rd.set_texture_rd_rid(new_rid)

----------------------------------------

TITLE: Checking Automatic Small Preview Generation in EditorResourcePreviewGenerator
DESCRIPTION: This method determines if small previews should be automatically generated from the normal preview. Override to return true if needed.

LANGUAGE: GDScript
CODE:
func _generate_small_preview_automatically() -> bool:
    return false

----------------------------------------

TITLE: ResourceUID Core Methods
DESCRIPTION: Core methods for managing resource UIDs including creation, validation, and path management.

LANGUAGE: GDScript
CODE:
# Add a new UID mapped to a resource path
func add_id(id: int, path: String) -> void

# Generate a unique resource UID
func create_id() -> int

# Get path for a given UID
func get_id_path(id: int) -> String

# Check if UID exists
func has_id(id: int) -> bool

----------------------------------------

TITLE: Listing Imported Files in Hidden Directory
DESCRIPTION: This snippet displays the contents of the hidden .godot/imported/ directory, showing the imported asset files generated by Godot during the import process.

LANGUAGE: shell
CODE:
ls .godot/imported
example.png-218a8f2b3041327d8a5756f3a245f83b.ctex
example.png-218a8f2b3041327d8a5756f3a245f83b.md5

----------------------------------------

TITLE: Including External JavaScript Libraries in Godot HTML5 Export
DESCRIPTION: Demonstrates how to include external JavaScript libraries in the Godot HTML5 export by customizing the Head Include.

LANGUAGE: html
CODE:
<!-- Axios -->
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<!-- Custom function -->
<script>
function myFunc() {
    alert("My func!");
}
</script>

----------------------------------------

TITLE: Creating Windows Export Templates
DESCRIPTION: Commands to compile Windows export templates for different architectures and configurations

LANGUAGE: shell
CODE:
scons platform=windows target=template_debug arch=x86_32
scons platform=windows target=template_release arch=x86_32
scons platform=windows target=template_debug arch=x86_64
scons platform=windows target=template_release arch=x86_64
scons platform=windows target=template_debug arch=arm64
scons platform=windows target=template_release arch=arm64

----------------------------------------

TITLE: Handling Additional Data in GLTFAnimation
DESCRIPTION: Illustrates how to set and retrieve additional data for a GLTFAnimation. This is useful for storing custom data related to GLTF document extensions.

LANGUAGE: GDScript
CODE:
# Setting additional data
animation.set_additional_data("MyExtension", {"custom_property": 42})

# Getting additional data
var extra_data = animation.get_additional_data("MyExtension")

----------------------------------------

TITLE: PinJoint3D Parameter Constants
DESCRIPTION: Enumeration defining the available parameters for PinJoint3D configuration: PARAM_BIAS, PARAM_DAMPING, and PARAM_IMPULSE_CLAMP.

LANGUAGE: GDScript
CODE:
enum Param {
    PARAM_BIAS = 0,         # Positional relation force
    PARAM_DAMPING = 1,      # Velocity relation force
    PARAM_IMPULSE_CLAMP = 2  # Maximum impulse value
}

----------------------------------------

TITLE: Method Override Example - Has Gizmo
DESCRIPTION: Example of overriding the _has_gizmo method to define which Node3D nodes should have a gizmo from this plugin

LANGUAGE: gdscript
CODE:
func _has_gizmo(for_node_3d: Node3D) -> bool:
    return for_node_3d is MyCustomNode

----------------------------------------

TITLE: Cloning and Setting Up Documentation Repository
DESCRIPTION: Commands to clone the Godot documentation repository and install required dependencies.

LANGUAGE: sh
CODE:
git clone https://github.com/godotengine/godot-docs.git
cd godot-docs
pip3 install -r requirements.txt

----------------------------------------

TITLE: Setting and Getting Magnify Gesture Factor in GDScript
DESCRIPTION: Demonstrates how to set and get the factor property of an InputEventMagnifyGesture object. The factor represents the amount or delta of the magnifying gesture.

LANGUAGE: gdscript
CODE:
# Setting the factor
gesture.set_factor(1.5)

# Getting the factor
var factor = gesture.get_factor()

----------------------------------------

TITLE: Drawing a StyleBox in GDScript
DESCRIPTION: Shows how to draw a StyleBox onto a CanvasItem. This is typically handled automatically by Controls, but can be done manually if needed.

LANGUAGE: GDScript
CODE:
func _draw():
    var style_box = get_stylebox("normal")
    var rect = Rect2(Vector2.ZERO, get_size())
    style_box.draw(get_canvas_item(), rect)

----------------------------------------

TITLE: Gettext Shell Commands
DESCRIPTION: Collection of essential gettext shell commands for creating and managing translation files, including initialization, merging, and compilation operations.

LANGUAGE: shell
CODE:
msginit --no-translator --input=messages.pot --locale=fr
msgmerge --update --backup=none fr.po messages.pot
msgfmt fr.po --check
msgfmt fr.po --no-hash -o fr.mo
msgunfmt fr.mo > fr.po

----------------------------------------

TITLE: TextureType Enumeration
DESCRIPTION: Defines possible texture types for shader parameters including data, color, normal map and anisotropy textures.

LANGUAGE: rst
CODE:
enum TextureType {
    TYPE_DATA = 0,
    TYPE_COLOR = 1, 
    TYPE_NORMAL_MAP = 2,
    TYPE_ANISOTROPY = 3,
    TYPE_MAX = 4
}

----------------------------------------

TITLE: AnimationNodeAnimation Enum Definition
DESCRIPTION: Defines the PlayMode enumeration for controlling animation playback direction with forward and backward options.

LANGUAGE: GDScript
CODE:
enum PlayMode {
    PLAY_MODE_FORWARD = 0,
    PLAY_MODE_BACKWARD = 1
}

----------------------------------------

TITLE: Implementing Uniform Buffer Retrieval Method in GDExtension
DESCRIPTION: Method to be implemented in GDExtension to return the RID of the uniform buffer containing the scene data as a UBO.

LANGUAGE: GDScript
CODE:
RID _get_uniform_buffer() virtual const

----------------------------------------

TITLE: Drawing a Custom Polygon Shape in GDScript
DESCRIPTION: Demonstrates how to define polygon coordinates and draw a custom shape using draw_polygon in GDScript.

LANGUAGE: GDScript
CODE:
var coords_head : Array = [
    [ 22.952, 83.271 ],  [ 28.385, 98.623 ],
    [ 53.168, 107.647 ], [ 72.998, 107.647 ],
    [ 99.546, 98.623 ],  [ 105.048, 83.271 ],
    [ 105.029, 55.237 ], [ 110.740, 47.082 ],
    [ 102.364, 36.104 ], [ 94.050, 40.940 ],
    [ 85.189, 34.445 ],  [ 85.963, 24.194 ],
    [ 73.507, 19.930 ],  [ 68.883, 28.936 ],
    [ 59.118, 28.936 ],  [ 54.494, 19.930 ],
    [ 42.039, 24.194 ],  [ 42.814, 34.445 ],
    [ 33.951, 40.940 ],  [ 25.637, 36.104 ],
    [ 17.262, 47.082 ],  [ 22.973, 55.237 ]
]

func float_array_to_Vector2Array(coords : Array) -> PackedVector2Array:
    var array : PackedVector2Array = []
    for coord in coords:
        array.append(Vector2(coord[0], coord[1]))
    return array

func _ready():
    head = float_array_to_Vector2Array(coords_head);

func _draw():
    var godot_blue : Color = Color("478cbf")
    draw_polygon(head, [ godot_blue ])

----------------------------------------

TITLE: Plugin Interface Wrapper Class
DESCRIPTION: GDScript wrapper class for simplifying access to plugin Java/Kotlin APIs.

LANGUAGE: gdscript
CODE:
class_name PluginInterface extends Object

var _plugin_name = "GDExtensionAndroidPluginTemplate"
var _plugin_singleton

func _init():
    if Engine.has_singleton(_plugin_name):
        _plugin_singleton = Engine.get_singleton(_plugin_name)
    else:
        printerr("Initialization error: unable to access the java logic")

func helloWorld():
    if _plugin_singleton:
        _plugin_singleton.helloWorld()
    else:
        printerr("Initialization error")

----------------------------------------

TITLE: Converting Intersection Point to Global Position in GDScript
DESCRIPTION: Helper function to convert the intersection point on a composition layer quad to a global 3D position.

LANGUAGE: GDScript
CODE:
func _intersect_to_global_pos(intersect : Vector2) -> Vector3:
    if intersect != NO_INTERSECTION:
        var local_pos : Vector2 = (intersect - Vector2(0.5, 0.5)) * quad_size
        return global_transform * Vector3(local_pos.x, -local_pos.y, 0.0)
    else:
        return Vector3()

----------------------------------------

TITLE: Autoload Registration in Plugin
DESCRIPTION: Code example showing how to register and unregister autoloads/singletons from within a plugin.

LANGUAGE: gdscript
CODE:
@tool
extends EditorPlugin

const AUTOLOAD_NAME = "SomeAutoload"

func _enable_plugin():
    add_autoload_singleton(AUTOLOAD_NAME, "res://addons/my_addon/some_autoload.tscn")

func _disable_plugin():
    remove_autoload_singleton(AUTOLOAD_NAME)

LANGUAGE: csharp
CODE:
#if TOOLS
using Godot;

[Tool]
public partial class MyEditorPlugin : EditorPlugin
{
    private const string AutoloadName = "SomeAutoload";

    public override void _EnablePlugin()
    {
        AddAutoloadSingleton(AutoloadName, "res://addons/MyAddon/SomeAutoload.tscn");
    }

    public override void _DisablePlugin()
    {
        RemoveAutoloadSingleton(AutoloadName);
    }
}
#endif

----------------------------------------

TITLE: Setting Video File Path in GDScript
DESCRIPTION: Sets the file path or URI for the VideoStream resource. This should be an Ogg Theora video file with the .ogv extension for VideoStreamTheora.

LANGUAGE: gdscript
CODE:
var video_stream = VideoStream.new()
video_stream.file = "path/to/video.ogv"

----------------------------------------

TITLE: Generating Godot Solution File with SCons in Windows
DESCRIPTION: Command to generate a Visual Studio solution file for Godot Engine with debug symbols. The 'vsproj' parameter requests VS solution generation, while 'dev_build' includes debug symbols.

LANGUAGE: batch
CODE:
scons platform=windows vsproj=yes dev_build=yes

----------------------------------------

TITLE: Path Structure Examples in Godot
DESCRIPTION: Examples of proper path formatting in Godot, demonstrating the use of forward slashes for cross-platform compatibility.

LANGUAGE: GDScript
CODE:
# Correct path format
res://character.png

# Windows path (not recommended but supported)
C:/Projects/Game

# Incorrect Windows path format
# C:\Projects\Game

----------------------------------------

TITLE: Particle Seed Generation
DESCRIPTION: Generates random seeds for particle positioning using the hash function

LANGUAGE: glsl
CODE:
uint alt_seed1 = hash(NUMBER + uint(1) + RANDOM_SEED);
uint alt_seed2 = hash(NUMBER + uint(27) + RANDOM_SEED);
uint alt_seed3 = hash(NUMBER + uint(43) + RANDOM_SEED);
uint alt_seed4 = hash(NUMBER + uint(111) + RANDOM_SEED);

----------------------------------------

TITLE: Setting AudioListener2D as Current in GDScript
DESCRIPTION: Activates the AudioListener2D, making it the hearing point for sounds. Disables any previously active AudioListener2D. Has no effect if not added to the SceneTree.

LANGUAGE: GDScript
CODE:
make_current()

----------------------------------------

TITLE: GDExtension Initialization Level Enumeration
DESCRIPTION: Enum defining the various initialization levels for GDExtension libraries, from core to editor integration

LANGUAGE: RST
CODE:
enum InitializationLevel {
  INITIALIZATION_LEVEL_CORE = 0,
  INITIALIZATION_LEVEL_SERVERS = 1,
  INITIALIZATION_LEVEL_SCENE = 2,
  INITIALIZATION_LEVEL_EDITOR = 3
}

----------------------------------------

TITLE: Light2D Class Definition
DESCRIPTION: Class definition showing inheritance hierarchy and basic purpose

LANGUAGE: rst
CODE:
Light2D
=======

**Inherits:** :ref:`Node2D<class_Node2D>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`DirectionalLight2D<class_DirectionalLight2D>`, :ref:`PointLight2D<class_PointLight2D>`

----------------------------------------

TITLE: Asynchronous UPnP Port Mapping Setup in GDScript
DESCRIPTION: This example demonstrates how to perform UPnP discovery and port mapping asynchronously using a Thread to avoid blocking the main thread.

LANGUAGE: GDScript
CODE:
signal upnp_completed(error)

const SERVER_PORT = 3928
var thread = null

func _upnp_setup(server_port):
    var upnp = UPNP.new()
    var err = upnp.discover()

    if err != OK:
        push_error(str(err))
        upnp_completed.emit(err)
        return

    if upnp.get_gateway() and upnp.get_gateway().is_valid_gateway():
        upnp.add_port_mapping(server_port, server_port, ProjectSettings.get_setting("application/config/name"), "UDP")
        upnp.add_port_mapping(server_port, server_port, ProjectSettings.get_setting("application/config/name"), "TCP")
        upnp_completed.emit(OK)

func _ready():
    thread = Thread.new()
    thread.start(_upnp_setup.bind(SERVER_PORT))

func _exit_tree():
    thread.wait_to_finish()

----------------------------------------

TITLE: Creating Virtual Environment for Documentation
DESCRIPTION: Commands to create and activate a Python virtual environment for building Godot documentation, with separate instructions for Windows and other platforms.

LANGUAGE: powershell
CODE:
py -m venv godot-docs-venv

LANGUAGE: sh
CODE:
python3 -m venv godot-docs-venv

----------------------------------------

TITLE: Implementing VideoStreamPlayback in GDScript
DESCRIPTION: Example of overriding key methods of VideoStreamPlayback to create a custom video playback implementation.

LANGUAGE: GDScript
CODE:
extends VideoStreamPlayback

func _get_length() -> float:
    return 60.0  # Return video length in seconds

func _get_playback_position() -> float:
    return 30.0  # Return current playback position

func _seek(time: float) -> void:
    # Implement seeking logic
    pass

func _set_paused(paused: bool) -> void:
    # Implement pause/resume logic
    pass

func _play() -> void:
    # Start playback
    pass

func _stop() -> void:
    # Stop playback
    pass

----------------------------------------

TITLE: Querying Directory Information - GDScript
DESCRIPTION: Methods for retrieving basic directory information like name, path and parent directory.

LANGUAGE: GDScript
CODE:
get_name() # Returns directory name
get_path() # Returns full directory path
get_parent() # Returns parent directory object

----------------------------------------

TITLE: Defining UV Function Enumeration in GDScript
DESCRIPTION: Enumerates the available UV manipulation functions for VisualShaderNodeUVFunc, including panning, scaling, and a constant to represent the enum size.

LANGUAGE: GDScript
CODE:
enum Function {
    FUNC_PANNING = 0,
    FUNC_SCALING = 1,
    FUNC_MAX = 2
}

----------------------------------------

TITLE: Using NavigationAgent2D - Basic Setup
DESCRIPTION: Example showing basic NavigationAgent2D property setup

LANGUAGE: gdscript
CODE:
var agent = NavigationAgent2D.new()
agent.navigation_layers = 1
agent.avoidance_enabled = true
agent.target_desired_distance = 10.0
agent.radius = 10.0
agent.max_speed = 100.0

----------------------------------------

TITLE: Drawing with RenderingDevice
DESCRIPTION: Demonstrates a simple drawing operation using RenderingDevice, including setting up a draw list, binding pipelines and uniforms, and performing the draw.

LANGUAGE: gdscript
CODE:
var rd = RenderingDevice.new()
var clear_colors = PackedColorArray([Color(0, 0, 0, 0), Color(0, 0, 0, 0), Color(0, 0, 0, 0)])
var draw_list = rd.draw_list_begin(framebuffers[i], RenderingDevice.CLEAR_COLOR_ALL, clear_colors, true, 1.0f, true, 0, Rect2(), RenderingDevice.OPAQUE_PASS)

# Draw opaque.
rd.draw_list_bind_render_pipeline(draw_list, raster_pipeline)
rd.draw_list_bind_uniform_set(draw_list, raster_base_uniform, 0)
rd.draw_list_set_push_constant(draw_list, raster_push_constant, raster_push_constant.size())
rd.draw_list_draw(draw_list, false, 1, slice_triangle_count[i] * 3)
# Draw wire.
rd.draw_list_bind_render_pipeline(draw_list, raster_pipeline_wire)
rd.draw_list_bind_uniform_set(draw_list, raster_base_uniform, 0)
rd.draw_list_set_push_constant(draw_list, raster_push_constant, raster_push_constant.size())
rd.draw_list_draw(draw_list, false, 1, slice_triangle_count[i] * 3)

rd.draw_list_end()

----------------------------------------

TITLE: Keyboard Shortcuts in RST Documentation
DESCRIPTION: RST markup syntax showing keyboard shortcut representations for different operating systems.

LANGUAGE: rst
CODE:
:kbd:`Ctrl + Shift + Q`
:kbd:`Ctrl + Option + Cmd + Q`
:kbd:`F5`
:kbd:`Cmd + B`
:kbd:`Ctrl + D`
:kbd:`Cmd + D`
:kbd:`Enter`

----------------------------------------

TITLE: Configuring Git autocrlf on Windows
DESCRIPTION: Sets the Git configuration for line ending handling on Windows to prevent unnecessary file modifications.

LANGUAGE: bash
CODE:
git config --global core.autocrlf input

----------------------------------------

TITLE: Custom Server Argument Detection in GDScript
DESCRIPTION: Code to check for a custom --server command line argument to start server mode.

LANGUAGE: gdscript
CODE:
if "--server" in OS.get_cmdline_user_args():
    # Run your server startup code here...
    pass

----------------------------------------

TITLE: Adding a custom control in EditorInspectorPlugin
DESCRIPTION: This method adds a custom control to the inspector, which is not necessarily a property editor.

LANGUAGE: GDScript
CODE:
func add_custom_control(control: Control) -> void:
    # Add a custom control to the inspector
    pass

----------------------------------------

TITLE: Setting Load Path Property
DESCRIPTION: Property for storing the file path to a .ctex file. Can be accessed using get_load_path() method and modified using load() method.

LANGUAGE: gdscript
CODE:
load_path: String = ""

----------------------------------------

TITLE: Updating API Validation File for Compatibility Changes (Text)
DESCRIPTION: Example of updating the API validation file to document the compatibility changes made to AStar classes, including the addition of new arguments and registration of compatibility methods.

LANGUAGE: text
CODE:
GH-88047
--------
Validate extension JSON: Error: Field 'classes/AStar2D/methods/get_id_path/arguments': size changed value in new API, from 2 to 3.
Validate extension JSON: Error: Field 'classes/AStar2D/methods/get_point_path/arguments': size changed value in new API, from 2 to 3.
Validate extension JSON: Error: Field 'classes/AStar3D/methods/get_id_path/arguments': size changed value in new API, from 2 to 3.
Validate extension JSON: Error: Field 'classes/AStar3D/methods/get_point_path/arguments': size changed value in new API, from 2 to 3.
Validate extension JSON: Error: Field 'classes/AStarGrid2D/methods/get_id_path/arguments': size changed value in new API, from 2 to 3.
Validate extension JSON: Error: Field 'classes/AStarGrid2D/methods/get_point_path/arguments': size changed value in new API, from 2 to 3.

Added optional "allow_partial_path" argument to get_id_path and get_point_path methods in AStar classes.
Compatibility methods registered.

----------------------------------------

TITLE: Synchronizing Audio Using System Clock in GDScript
DESCRIPTION: This snippet demonstrates how to use the system clock to synchronize audio playback with gameplay elements in Godot. It calculates the precise playback time by compensating for audio mixing and output latency.

LANGUAGE: GDScript
CODE:
var time_begin
var time_delay


func _ready():
    time_begin = Time.get_ticks_usec()
    time_delay = AudioServer.get_time_to_next_mix() + AudioServer.get_output_latency()
    $Player.play()


func _process(delta):
    # Obtain from ticks.
    var time = (Time.get_ticks_usec() - time_begin) / 1000000.0
    # Compensate for latency.
    time -= time_delay
    # May be below 0 (did not begin yet).
    time = max(0, time)
    print("Time is: ", time)

----------------------------------------

TITLE: Changing Project Settings from C#
DESCRIPTION: Shows how to change project settings using SetSetting() method and directly modifying engine properties in C#.

LANGUAGE: csharp
CODE:
ProjectSettings.SetSetting("application/run/max_fps", 60);
ProjectSettings.SetSetting("display/window/size/mode", (int)DisplayServer.WindowMode.Windowed);

Engine.MaxFps = 60;
DisplayServer.WindowSetMode(DisplayServer.WindowMode.Windowed);

----------------------------------------

TITLE: Managing Attached Nodes Example - GDScript
DESCRIPTION: Example demonstrating the node attachment API for VisualShaderNodeFrame

LANGUAGE: GDScript
CODE:
# Note: Should use VisualShader.attach_node_to_frame() instead
frame.add_attached_node(node_id)

# Note: Should use VisualShader.detach_node_from_frame() instead
frame.remove_attached_node(node_id)

----------------------------------------

TITLE: Slider Signal Definition
DESCRIPTION: Signal definition for drag_ended event that indicates when the slider grabber stops being dragged.

LANGUAGE: GDScript
CODE:
signal drag_ended(value_changed: bool)

----------------------------------------

TITLE: Basic particle material setup
DESCRIPTION: Creates a simple particle material with basic properties like color, initial velocity and gravity.

LANGUAGE: gdscript
CODE:
var particle_material = ParticleProcessMaterial.new()
particle_material.color = Color(1, 1, 1, 1)
particle_material.initial_velocity_min = 5.0
particle_material.initial_velocity_max = 10.0
particle_material.gravity = Vector3(0, -9.8, 0)

----------------------------------------

TITLE: Setting Transform3D Parameter Properties in GDScript
DESCRIPTION: Shows how to work with the Transform3D parameter properties. The node allows setting a default transform value and enabling/disabling the default value functionality.

LANGUAGE: gdscript
CODE:
# Setting default transform value
set_default_value(Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0))

# Getting default transform value
var transform = get_default_value()

# Enable/disable default value usage
set_default_value_enabled(true)

# Check if default value is enabled
var is_enabled = is_default_value_enabled()

----------------------------------------

TITLE: Padding in GDScript Format Strings
DESCRIPTION: Illustrates various padding techniques in format strings, including left padding, zero padding, and right padding.

LANGUAGE: gdscript
CODE:
print("%10d" % 12345)
# output: "     12345"
# 5 leading spaces for a total length of 10

print("%010d" % 12345)
# output: "0000012345"

# Pad to minimum length of 10, round to 3 decimal places
print("%10.3f" % 10000.5555)
# Output: " 10000.556"
# 1 leading space

print("%-10d" % 12345678)
# Output: "12345678  "
# 2 trailing spaces

----------------------------------------

TITLE: Shape Intersection Query in Godot 2D
DESCRIPTION: Method that checks intersections of a shape against physics space. Returns array of dictionaries containing collision information.

LANGUAGE: gdscript
CODE:
Array[Dictionary] intersect_shape(parameters: PhysicsShapeQueryParameters2D, max_results: int = 32)

----------------------------------------

TITLE: Implementing _toggle Method in EngineProfiler
DESCRIPTION: This method is called when the profiler is enabled or disabled. It takes a boolean parameter indicating the enable state and an Array of options.

LANGUAGE: GDScript
CODE:
func _toggle(enable: bool, options: Array) -> void:
    # Implementation goes here
    pass

----------------------------------------

TITLE: Getting CSGPrimitive3D Flip Faces Property in GDScript
DESCRIPTION: Shows how to retrieve the current value of the flip_faces property from a CSGPrimitive3D object. This can be used to check if the mesh faces are currently flipped.

LANGUAGE: GDScript
CODE:
var csg_primitive = CSGPrimitive3D.new()
var is_flipped = csg_primitive.get_flip_faces()

----------------------------------------

TITLE: Setting OpenXRActionSet Properties
DESCRIPTION: Core properties for configuring an OpenXRActionSet including the actions array, localized name, and priority level.

LANGUAGE: gdscript
CODE:
actions = [] # Collection of actions for this action set
localized_name = "" # The localized name of this action set
priority = 0 # The priority for this action set

----------------------------------------

TITLE: Configuring macOS Entitlements for Godot Debugging
DESCRIPTION: XML configuration for editor.entitlements file that enables debugging capabilities for the Godot editor on macOS. Includes necessary security entitlements for debugging, JIT compilation, audio input, and camera access.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
    <dict>
        <key>com.apple.security.cs.allow-dyld-environment-variables</key>
        <true/>
        <key>com.apple.security.cs.allow-jit</key>
        <true/>
        <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
        <true/>
        <key>com.apple.security.cs.disable-executable-page-protection</key>
        <true/>
        <key>com.apple.security.cs.disable-library-validation</key>
        <true/>
        <key>com.apple.security.device.audio-input</key>
        <true/>
        <key>com.apple.security.device.camera</key>
        <true/>
        <key>com.apple.security.get-task-allow</key>
        <true/>
    </dict>
</plist>

----------------------------------------

TITLE: Getting Transformable Selected Nodes in GDScript
DESCRIPTION: Returns an array of selected nodes optimized for transform operations, avoiding parent-child selection conflicts.

LANGUAGE: GDScript
CODE:
get_transformable_selected_nodes() -> Array[Node]

----------------------------------------

TITLE: Implementing Name Retrieval for EditorSyntaxHighlighter in GDScript
DESCRIPTION: Virtual method to be overridden to return the syntax highlighter's name. This method is const and doesn't modify any instance variables.

LANGUAGE: gdscript
CODE:
func _get_name() -> String:

----------------------------------------

TITLE: Detecting Headless Mode in C#
DESCRIPTION: C# implementation to check if the current instance is running in headless mode using the DisplayServer name.

LANGUAGE: csharp
CODE:
using System.Linq;

if (DisplayServer.GetName() == "headless")
{
    // Run your server startup code here...
}

----------------------------------------

TITLE: WebRTCDataChannelExtension Method Declarations
DESCRIPTION: Virtual method declarations for WebRTCDataChannelExtension class providing core data channel functionality including packet handling, state management, and configuration.

LANGUAGE: GDScript
CODE:
func _close() -> void
func _get_available_packet_count() -> int
func _get_buffered_amount() -> int
func _get_id() -> int
func _get_label() -> String
func _get_max_packet_life_time() -> int
func _get_max_packet_size() -> int
func _get_max_retransmits() -> int
func _get_packet(r_buffer: const uint8_t**, r_buffer_size: int32_t*) -> Error
func _get_protocol() -> String
func _get_ready_state() -> ChannelState
func _get_write_mode() -> WriteMode
func _is_negotiated() -> bool
func _is_ordered() -> bool
func _poll() -> Error
func _put_packet(p_buffer: const uint8_t*, p_buffer_size: int) -> Error
func _set_write_mode(p_write_mode: WriteMode) -> void
func _was_string_packet() -> bool

----------------------------------------

TITLE: Getting Collision Exceptions in PhysicsBody2D
DESCRIPTION: Returns an array of PhysicsBody2D nodes that were added as collision exceptions for this body. This method doesn't take any parameters and returns an Array of PhysicsBody2D objects.

LANGUAGE: GDScript
CODE:
get_collision_exceptions() -> Array[PhysicsBody2D]

----------------------------------------

TITLE: Find Children Example
DESCRIPTION: Example showing how to get non-internal groups from a node

LANGUAGE: gdscript
CODE:
# Stores the node's non-internal groups only (as an array of StringNames).
var non_internal_groups = []
for group in get_groups():
    if not str(group).begins_with("_"):
        non_internal_groups.push_back(group)

----------------------------------------

TITLE: Vector Composition in Godot Visual Shader
DESCRIPTION: Creates vector types (vec2, vec3, vec4) by combining individual scalar values through separate input ports in the visual shader graph. Supports composition of Vector2, Vector3 and 4D vectors (represented as Quaternion).

LANGUAGE: RST
CODE:
**Inherits:** :ref:`VisualShaderNodeVectorBase<class_VisualShaderNodeVectorBase>` **<** :ref:`VisualShaderNode<class_VisualShaderNode>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

----------------------------------------

TITLE: Signal Parameter Type Examples in C#
DESCRIPTION: Examples showing invalid and valid signal parameter type declarations in Godot C#. Demonstrates that custom types not deriving from GodotObject are invalid, while Variant-compatible types like System.Int32 are valid.

LANGUAGE: csharp
CODE:
class SomeType { }

// SomeType is not a valid parameter type because it doesn't derive from GodotObject,
// so it's not compatible with Variant.
public void InvalidSignalEventHandler(SomeType someType);

// System.Int32 is a valid type because it's compatible with Variant.
public void ValidSignalEventHandler(int someInt);

----------------------------------------

TITLE: ReStructuredText Table of Contents for Godot Export Documentation
DESCRIPTION: RST markup defining the structure and navigation for Godot's export documentation, including a table of contents tree and cross-references to related documentation.

LANGUAGE: rst
CODE:
:allow_comments: False

.. _doc_export_index:

Export
======

.. seealso::

   This section is about exporting a build of your project. If you're trying
   to export properties from a script, see :ref:`doc_gdscript_exports` or 
   :ref:`doc_c_sharp_exports`.

.. toctree::
   :maxdepth: 1
   :name: toc-learn-workflow-export

   exporting_projects
   exporting_pcks
   feature_tags
   exporting_for_linux
   exporting_for_macos
   running_on_macos
   exporting_for_windows
   changing_application_icon_for_windows
   exporting_for_ios
   exporting_for_android
   android_gradle_build
   exporting_for_web
   exporting_for_dedicated_servers
   one-click_deploy

----------------------------------------

TITLE: Adding a property editor in EditorInspectorPlugin
DESCRIPTION: This method adds a property editor for an individual property. The editor control must extend EditorProperty.

LANGUAGE: GDScript
CODE:
func add_property_editor(property: String, editor: Control, add_to_end: bool = false, label: String = "") -> void:
    # Add a property editor for an individual property
    pass

----------------------------------------

TITLE: Stream Control Methods
DESCRIPTION: Methods for controlling audio stream playback including volume, pitch scale adjustment, and stopping streams.

LANGUAGE: GDScript
CODE:
set_stream_volume(stream: int, volume_db: float)
set_stream_pitch_scale(stream: int, pitch_scale: float)
stop_stream(stream: int)
is_stream_playing(stream: int) -> bool

----------------------------------------

TITLE: Installing MinGW Dependencies with Scoop
DESCRIPTION: Commands to install MinGW and Python dependencies using the Scoop package manager

LANGUAGE: shell
CODE:
scoop install python mingw

----------------------------------------

TITLE: Fading and Removing Decals in GDScript
DESCRIPTION: Shows how to fade out a decal over time using an AnimationPlayer, then remove it from the scene to improve performance.

LANGUAGE: GDScript
CODE:
# Assuming we have an AnimationPlayer node and a Decal node
var animation_player = $AnimationPlayer
var decal = $Decal

# Play the fade-out animation
animation_player.play("fade_out")

# Wait for the animation to finish
await animation_player.animation_finished

# Remove the decal from the scene
decal.queue_free()

----------------------------------------

TITLE: Exporting a Godot project from command line
DESCRIPTION: Commands to export a Godot project for different platforms using command line options.

LANGUAGE: shell
CODE:
godot --headless --export-release "Linux/X11" /var/builds/project
godot --headless --export-release Android /var/builds/project.apk

----------------------------------------

TITLE: Obtaining Stream Playback Instance
DESCRIPTION: Examples of obtaining the playback instance from different audio player types in Godot Engine.

LANGUAGE: GDScript
CODE:
AudioStreamPlayer.get_stream_playback()
AudioStreamPlayer2D.get_stream_playback()
AudioStreamPlayer3D.get_stream_playback()

----------------------------------------

TITLE: Setting Varying Type Property
DESCRIPTION: Property definition for the varying_type that determines where the variable can be accessed in the shader.

LANGUAGE: GDScript
CODE:
varying_type = 0

----------------------------------------

TITLE: Send Debug Message
DESCRIPTION: Sends a debug message with associated data array to the debugger.

LANGUAGE: GDScript
CODE:
EngineDebugger.send_message("message", data_array)

----------------------------------------

TITLE: BoxContainer Method Definition
DESCRIPTION: Definition of the add_spacer method that adds a Control node as a spacer to the container.

LANGUAGE: GDScript
CODE:
func add_spacer(begin: bool) -> Control:
    # Adds a Control node as spacer
    pass

----------------------------------------

TITLE: Creating a Shape Owner in CollisionObject3D
DESCRIPTION: Creates a new shape owner for the given object and returns the owner_id for future reference.

LANGUAGE: gdscript
CODE:
var owner_id = create_shape_owner(self)

----------------------------------------

TITLE: Normalizing Player Movement and Rotation in Godot 3D
DESCRIPTION: Normalizes the movement direction and updates the player's rotation to face the movement direction.

LANGUAGE: GDScript
CODE:
if direction != Vector3.ZERO:
    direction = direction.normalized()
    $Pivot.basis = Basis.looking_at(direction)

LANGUAGE: C#
CODE:
if (direction != Vector3.Zero)
{
    direction = direction.Normalized();
    GetNode<Node3D>("Pivot").Basis = Basis.LookingAt(direction);
}

----------------------------------------

TITLE: Spacing Properties in LabelSettings
DESCRIPTION: Properties controlling vertical spacing between lines and paragraphs.

LANGUAGE: GDScript
CODE:
var line_spacing: float = 3.0 # Additional vertical space between lines
var paragraph_spacing: float = 0.0 # Vertical space between paragraphs

----------------------------------------

TITLE: Registering Menu Shortcut
DESCRIPTION: Shows how to register a shortcut for the plugin's context menu.

LANGUAGE: gdscript
CODE:
func _init():
    add_menu_shortcut(SHORTCUT, handle)

----------------------------------------

TITLE: Setting Varying Name Property
DESCRIPTION: Property definition for the varying_name variable that must be unique for each varying shader value.

LANGUAGE: GDScript
CODE:
varying_name = "[None]"

----------------------------------------

TITLE: Setting Mesh Property - GDScript
DESCRIPTION: Property for setting and getting the Mesh resource used as the CSG shape. Only supports manifold meshes and preserves specific vertex attributes.

LANGUAGE: GDScript
CODE:
set_mesh(value: Mesh)
get_mesh() -> Mesh

----------------------------------------

TITLE: Converting Base64 to Variant
DESCRIPTION: Method to decode a Base64 string back into a Variant value, with optional object decoding support.

LANGUAGE: GDScript
CODE:
base64_to_variant(base64_str: String, allow_objects: bool = false) -> Variant

----------------------------------------

TITLE: Initializing Visual Shader Node Enumeration
DESCRIPTION: Defines the available port types for visual shader nodes including scalar, vector, boolean, transform and sampler types

LANGUAGE: GDScript
CODE:
enum PortType {
    PORT_TYPE_SCALAR = 0,
    PORT_TYPE_SCALAR_INT = 1,
    PORT_TYPE_SCALAR_UINT = 2, 
    PORT_TYPE_VECTOR_2D = 3,
    PORT_TYPE_VECTOR_3D = 4,
    PORT_TYPE_VECTOR_4D = 5,
    PORT_TYPE_BOOLEAN = 6,
    PORT_TYPE_TRANSFORM = 7,
    PORT_TYPE_SAMPLER = 8,
    PORT_TYPE_MAX = 9
}

----------------------------------------

TITLE: Demonstrating Invalid Class Declarations in C# for Godot Engine
DESCRIPTION: This code snippet shows examples of invalid class declarations that violate the GD0003 rule. It includes multiple class declarations with the same name in different contexts, which is not allowed in Godot scripts.

LANGUAGE: csharp
CODE:
public partial class MyNode : Node { }

namespace DifferentNamespace
{
    // Invalid because there's already a type with the name MyNode in this file.
    public partial class MyNode : Node { }
}

// Invalid because there's already a type with the name MyNode in this file.
public partial class MyNode<T> : Node { }

----------------------------------------

TITLE: Normal Mapping in Godot 3D Shader
DESCRIPTION: Implements normal mapping using a separate noise texture to provide realistic lighting on the dynamically generated terrain.

LANGUAGE: GLSL
CODE:
uniform sampler2D normalmap;
varying vec2 tex_position;

void vertex() {
  tex_position = VERTEX.xz / 2.0 + 0.5;
  float height = texture(noise, tex_position).x;
  VERTEX.y += height * height_scale;
}

void fragment() {
  NORMAL_MAP = texture(normalmap, tex_position).xyz;
}

----------------------------------------

TITLE: ColorPickerButton Signal Example - GDScript
DESCRIPTION: Signal definition showing the color_changed event that is emitted when the selected color is modified.

LANGUAGE: GDScript
CODE:
signal color_changed(color: Color)

----------------------------------------

TITLE: Adding particle animation curves
DESCRIPTION: Shows how to add animation curves to control particle properties over their lifetime.

LANGUAGE: gdscript
CODE:
var particle_material = ParticleProcessMaterial.new()
var scale_curve = CurveTexture.new()
# Assume curve is configured
particle_material.scale_curve = scale_curve
particle_material.scale_min = 0.5
particle_material.scale_max = 2.0

----------------------------------------

TITLE: Toggling Occlusion Culling at Runtime in GDScript
DESCRIPTION: This snippet shows how to enable or disable occlusion culling on the root viewport during gameplay using GDScript.

LANGUAGE: gdscript
CODE:
get_tree().root.use_occlusion_culling = true

----------------------------------------

TITLE: Synchronizing Audio Using System Clock in C#
DESCRIPTION: This C# snippet shows how to synchronize audio playback with gameplay using the system clock in Godot. It calculates the precise playback time by accounting for audio mixing and output latency.

LANGUAGE: C#
CODE:
private double _timeBegin;
private double _timeDelay;

public override void _Ready()
{
    _timeBegin = Time.GetTicksUsec();
    _timeDelay = AudioServer.GetTimeToNextMix() + AudioServer.GetOutputLatency();
    GetNode<AudioStreamPlayer>("Player").Play();
}

public override void _Process(double delta)
{
    double time = (Time.GetTicksUsec() - _timeBegin) / 1000000.0d;
    time = Math.Max(0.0d, time - _timeDelay);
    GD.Print(string.Format("Time is: {0}", time));
}

----------------------------------------

TITLE: Adding Points to AStar3D (GDScript)
DESCRIPTION: Demonstrates how to add points to an AStar3D instance.

LANGUAGE: gdscript
CODE:
var astar = AStar3D.new()
astar.add_point(1, Vector3(1, 0, 0), 4) # Adds the point (1, 0, 0) with weight_scale 4 and id 1

----------------------------------------

TITLE: Enumerating SceneState Constants
DESCRIPTION: Constants defining the possible edit states when instantiating a scene, controlling scene state modifications and resource inheritance.

LANGUAGE: GDScript
CODE:
enum GenEditState {
    GEN_EDIT_STATE_DISABLED = 0,
    GEN_EDIT_STATE_INSTANCE = 1,
    GEN_EDIT_STATE_MAIN = 2,
    GEN_EDIT_STATE_MAIN_INHERITED = 3
}

----------------------------------------

TITLE: Setting LinkButton URI Examples - C#
DESCRIPTION: Examples of setting different types of URIs that open in their respective default programs when clicked.

LANGUAGE: csharp
CODE:
Uri = "https://godotengine.org"; // Opens the URL in the default web browser.
Uri = "C:\SomeFolder"; // Opens the file explorer at the given path.
Uri = "C:\SomeImage.png"; // Opens the given image in the default viewing app.

----------------------------------------

TITLE: Property Definition - target_nodepath
DESCRIPTION: Property definition for the NodePath to the target node that the bone will look at.

LANGUAGE: rst
CODE:
NodePath target_nodepath = NodePath("")

----------------------------------------

TITLE: Parent-Child Node Signal Connection
DESCRIPTION: Shows how to safely connect signals between parent and child nodes using NOTIFICATION_PARENTED and NOTIFICATION_UNPARENTED notifications.

LANGUAGE: gdscript
CODE:
extends Node

var parent_cache

func connection_check():
    return parent_cache.has_user_signal("interacted_with")

func _notification(what):
    match what:
        NOTIFICATION_PARENTED:
            parent_cache = get_parent()
            if connection_check():
                parent_cache.interacted_with.connect(_on_parent_interacted_with)
        NOTIFICATION_UNPARENTED:
            if connection_check():
                parent_cache.interacted_with.disconnect(_on_parent_interacted_with)

func _on_parent_interacted_with():
    print("I'm reacting to my parent's interaction!")

----------------------------------------

TITLE: RegExMatch Method Signatures
DESCRIPTION: Core methods for accessing match information including getting start/end positions and captured groups.

LANGUAGE: GDScript
CODE:
func get_end(name: Variant = 0) -> int
func get_group_count() -> int
func get_start(name: Variant = 0) -> int
func get_string(name: Variant = 0) -> String

----------------------------------------

TITLE: Subdirectory Operations - GDScript
DESCRIPTION: Methods for working with subdirectories, including counting and accessing them.

LANGUAGE: GDScript
CODE:
get_subdir_count() # Returns number of subdirectories
get_subdir(idx) # Returns subdirectory at index
find_dir_index(name) # Finds directory index by name

----------------------------------------

TITLE: RST Documentation for PointMesh Class
DESCRIPTION: RST documentation defining the PointMesh class inheritance hierarchy and functionality. Details point mesh behavior, material requirements, and usage limitations.

LANGUAGE: RST
CODE:
**Inherits:** :ref:`PrimitiveMesh<class_PrimitiveMesh>` **<** :ref:`Mesh<class_Mesh>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

----------------------------------------

TITLE: Setting Box Size Property in GPUParticlesCollisionBox3D
DESCRIPTION: Property definition for the size of the collision box in 3D units. The size property uses Vector3 to specify width, height and depth with a default value of Vector3(2, 2, 2).

LANGUAGE: GDScript
CODE:
size = Vector3(2, 2, 2)

----------------------------------------

TITLE: Initializing Player Properties in Godot 3D
DESCRIPTION: Defines basic properties for player movement, including speed, fall acceleration, and target velocity.

LANGUAGE: GDScript
CODE:
extends CharacterBody3D

@export var speed = 14
@export var fall_acceleration = 75

var target_velocity = Vector3.ZERO

LANGUAGE: C#
CODE:
using Godot;

public partial class Player : CharacterBody3D
{
    [Export]
    public int Speed { get; set; } = 14;
    [Export]
    public int FallAcceleration { get; set; } = 75;

    private Vector3 _targetVelocity = Vector3.Zero;
}

----------------------------------------

TITLE: Vector Distance Calculation in GLSL
DESCRIPTION: Calculates the distance between two vector points p0 and p1 using the GLSL distance() function. This is automatically translated in the shader language when used in the visual shader graph.

LANGUAGE: GLSL
CODE:
distance(p0, p1)

----------------------------------------

TITLE: Abbreviation Definitions
DESCRIPTION: RST markup defining various abbreviations used throughout the documentation

LANGUAGE: rst
CODE:
.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`

----------------------------------------

TITLE: Measuring Execution Time in GDScript
DESCRIPTION: Demonstrates how to measure code execution time using Time.get_ticks_usec() for both individual functions and loop operations. The code calculates the time difference in seconds by subtracting start from end timestamps and dividing by 1,000,000.

LANGUAGE: gdscript
CODE:
# Measuring the time it takes for worker_function() to run
var start = Time.get_ticks_usec()
worker_function()
var end = Time.get_ticks_usec()
var worker_time = (end-start)/1000000.0

# Measuring the time spent running a calculation over each element of an array
start = Time.get_ticks_usec()
for calc in calculations:
    result = pow(2, calc.power) * calc.product
end = Time.get_ticks_usec()
var loop_time = (end-start)/1000000.0

print("Worker time: %s\nLoop time: %s" % [worker_time, loop_time])

----------------------------------------

TITLE: ResourceImporterTextureAtlas Class Properties Definition
DESCRIPTION: Property declarations for the ResourceImporterTextureAtlas class, including atlas file path, cropping options, import mode, and alpha border trimming settings.

LANGUAGE: rst
CODE:
+-----------------------------+-----------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`String<class_String>` | :ref:`atlas_file<class_ResourceImporterTextureAtlas_property_atlas_file>`                                       | """"    |
+-----------------------------+-----------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`     | :ref:`crop_to_region<class_ResourceImporterTextureAtlas_property_crop_to_region>`                               | "false" |
+-----------------------------+-----------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`int<class_int>`       | :ref:`import_mode<class_ResourceImporterTextureAtlas_property_import_mode>`                                     | "0"     |
+-----------------------------+-----------------------------------------------------------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`     | :ref:`trim_alpha_border_from_region<class_ResourceImporterTextureAtlas_property_trim_alpha_border_from_region>` | "true"  |
+-----------------------------+-----------------------------------------------------------------------------------------------------------------+-----------+

----------------------------------------

TITLE: Retrieving Base Editor Control in ScriptEditorBase
DESCRIPTION: Returns the underlying Control used for editing scripts. For text scripts, this is typically a CodeEdit control. This method allows access to the core editing component.

LANGUAGE: GDScript
CODE:
get_base_editor() -> Control

----------------------------------------

TITLE: Getting Face Blend Shape Weight
DESCRIPTION: Returns the weight value for a specific facial blend shape.

LANGUAGE: gdscript
CODE:
var weight = get_blend_shape(XRFaceTracker.FT_MOUTH_SMILE)

----------------------------------------

TITLE: Property Definition - bone2d_node
DESCRIPTION: Property definition for specifying the Bone2D node that the modification will operate on.

LANGUAGE: rst
CODE:
NodePath bone2d_node = NodePath("") 

----------------------------------------

TITLE: Input Handling Comparison
DESCRIPTION: Demonstrates different approaches to handling input in Godot, comparing _process vs _unhandled_input methods and their timing characteristics.

LANGUAGE: gdscript
CODE:
func _process(delta):
    if Input.is_action_just_pressed("ui_select"):
        print(delta)

func _unhandled_input(event):
    match event.get_class():
        "InputEventKey":
            if Input.is_action_just_pressed("ui_accept"):
                print(get_process_delta_time())

----------------------------------------

TITLE: Initializing Surface Array - GDScript
DESCRIPTION: Creates and initializes the basic surface array structure needed for an ArrayMesh in GDScript

LANGUAGE: gdscript
CODE:
var surface_array = []
surface_array.resize(Mesh.ARRAY_MAX)

var verts = PackedVector3Array()
var uvs = PackedVector2Array()
var normals = PackedVector3Array()
var indices = PackedInt32Array()

----------------------------------------

TITLE: Adding a Property for Synchronization in GDScript
DESCRIPTION: Adds a property to be synchronized using a NodePath and optional index.

LANGUAGE: GDScript
CODE:
config.add_property("player/position", 0)

----------------------------------------

TITLE: AudioEffectPhaser Property Methods
DESCRIPTION: Getter and setter method signatures for the AudioEffectPhaser properties, allowing control over the phaser effect parameters.

LANGUAGE: gdscript
CODE:
func set_depth(value: float) -> void
func get_depth() -> float
func set_feedback(value: float) -> void
func get_feedback() -> float
func set_range_max_hz(value: float) -> void
func get_range_max_hz() -> float
func set_range_min_hz(value: float) -> void
func get_range_min_hz() -> float
func set_rate_hz(value: float) -> void
func get_rate_hz() -> float

----------------------------------------

TITLE: Basic C++ Test Suite Example
DESCRIPTION: Minimal example of a C++ test suite implementing a simple string comparison test case.

LANGUAGE: cpp
CODE:
#ifndef TEST_STRING_H
#define TEST_STRING_H

#include "tests/test_macros.h"

namespace TestString {

TEST_CASE("[String] Hello World!") {
    String hello = "Hello World!";
    CHECK(hello == "Hello World!");
}

} // namespace TestString

#endif // TEST_STRING_H

----------------------------------------

TITLE: Configuring Include Paths in KDevelop for Godot
DESCRIPTION: List of essential include paths that need to be added to the KDevelop project configuration for proper code navigation and intellisense.

LANGUAGE: none
CODE:
.
core/
core/os/
core/math/
drivers/
platform/<your_platform>/

----------------------------------------

TITLE: Audio Filter DB Level Constants
DESCRIPTION: Enumeration values for different filter steepness levels, measured in decibels per octave.

LANGUAGE: gdscript
CODE:
const FILTER_6DB = 0   # Cutting off at 6dB per octave
const FILTER_12DB = 1  # Cutting off at 12dB per octave
const FILTER_18DB = 2  # Cutting off at 18dB per octave
const FILTER_24DB = 3  # Cutting off at 24dB per octave

----------------------------------------

TITLE: Setting Deferred Vertical Scroll in _ready()
DESCRIPTION: Example showing how to set the vertical scroll position in the _ready() function using deferred execution

LANGUAGE: GDScript
CODE:
func _ready():
    set_deferred("scroll_vertical", 600)

----------------------------------------

TITLE: Copying Decal Textures in GDScript
DESCRIPTION: Demonstrates how to copy all textures from one Decal to another using a loop in GDScript.

LANGUAGE: gdscript
CODE:
for i in Decal.TEXTURE_MAX:
    $NewDecal.set_texture(i, $OldDecal.get_texture(i))

----------------------------------------

TITLE: Loading CompressedTextureLayered from Path
DESCRIPTION: Method to load a compressed texture from a specified file path. Returns an Error code indicating success or failure of the operation.

LANGUAGE: GDScript
CODE:
load(path: String) -> Error

----------------------------------------

TITLE: Managing Physical Bone Simulation
DESCRIPTION: Methods for starting and stopping physics simulation on PhysicalBone2D nodes. Can target specific bones by passing their names as an array.

LANGUAGE: GDScript
CODE:
# Start physics simulation for all bones
start_simulation()

# Start simulation for specific bones only
start_simulation(["bone1", "bone2"])

# Stop physics simulation for all bones
stop_simulation()

# Stop simulation for specific bones only
stop_simulation(["bone1", "bone2"])

----------------------------------------

TITLE: Handling Game Over in GDScript
DESCRIPTION: Implements the game over sequence, showing messages and resetting the game state.

LANGUAGE: GDScript
CODE:
func show_game_over():
    show_message("Game Over")
    # Wait until the MessageTimer has counted down.
    await $MessageTimer.timeout

    $Message.text = "Dodge the Creeps!"
    $Message.show()
    # Make a one-shot timer and wait for it to finish.
    await get_tree().create_timer(1.0).timeout
    $StartButton.show()

----------------------------------------

TITLE: AudioStreamInteractive Class Definition
DESCRIPTION: Class inheritance hierarchy and basic class documentation for AudioStreamInteractive.

LANGUAGE: rst
CODE:
**Inherits:** :ref:`AudioStream<class_AudioStream>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

Audio stream that can playback music interactively, combining clips and a transition table.

----------------------------------------

TITLE: Class Reference Definition
DESCRIPTION: RST markup defining the class reference header and inheritance chain

LANGUAGE: rst
CODE:
.. _class_AnimationNodeBlend3:

AnimationNodeBlend3
===================

**Inherits:** :ref:`AnimationNodeSync<class_AnimationNodeSync>` **<** :ref:`AnimationNode<class_AnimationNode>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

----------------------------------------

TITLE: ResourceImporterOBJ Property Declarations
DESCRIPTION: Property declarations for the ResourceImporterOBJ class, including mesh compression, lightmap generation, LOD settings, and mesh transformation options.

LANGUAGE: GDScript
CODE:
var force_disable_mesh_compression: bool = false
var generate_lightmap_uv2: bool = false
var generate_lightmap_uv2_texel_size: float = 0.2
var generate_lods: bool = true
var generate_shadow_mesh: bool = true
var generate_tangents: bool = true
var offset_mesh: Vector3 = Vector3(0, 0, 0)
var scale_mesh: Vector3 = Vector3(1, 1, 1)

----------------------------------------

TITLE: Transform2D Scale Preservation Example - C#
DESCRIPTION: Demonstrates how scale is preserved when rotating a Transform2D in C#

LANGUAGE: csharp
CODE:
var myTransform = new Transform2D(
    Vector3(2.0f, 0.0f),
    Vector3(0.0f, 4.0f),
    Vector3(0.0f, 0.0f)
);
// Rotating the Transform2D in any way preserves its scale.
myTransform = myTransform.Rotated(Mathf.Tau / 2.0f);

GD.Print(myTransform.GetScale()); // Prints (2, 4)

----------------------------------------

TITLE: Compiling Godot Engine During Bisect
DESCRIPTION: Compiles the Godot engine from source during the bisect process. This assumes a build environment has been set up.

LANGUAGE: shell
CODE:
scons

----------------------------------------

TITLE: Setting Deferred Horizontal Scroll in _ready()
DESCRIPTION: Example showing how to set the horizontal scroll position in the _ready() function using deferred execution

LANGUAGE: GDScript
CODE:
func _ready():
    set_deferred("scroll_horizontal", 600)

----------------------------------------

TITLE: Accessing Mesh Data with MeshDataTool
DESCRIPTION: Examples of accessing various mesh data like vertex count, faces, normals, and edge vertices using MeshDataTool methods.

LANGUAGE: gdscript
CODE:
mdt.get_vertex_count() # Returns number of vertices in vertex array.
mdt.get_vertex_faces(0) # Returns array of faces that contain vertex[0].
mdt.get_face_normal(1) # Calculates and returns face normal of the second face.
mdt.get_edge_vertex(10, 1) # Returns the second vertex comprising the edge at index 10.

----------------------------------------

TITLE: Implementing ExportToolButton Properties in C#
DESCRIPTION: Demonstrates the correct and incorrect ways to implement properties with ExportToolButton attribute. The correct implementation uses an expression-bodied property to avoid storing Callable instances that could prevent assembly unloading.

LANGUAGE: csharp
CODE:
[ExportToolButton("Click me!")]
public Callable ValidClickMeButton => Callable.From(ClickMe);

// Invalid because the Callable will be stored in the property's backing field.
[ExportToolButton("Click me!")]
public Callable InvalidClickMeButton { get; } = Callable.From(ClickMe);

----------------------------------------

TITLE: Setting and Getting Loop Property in GLTFAnimation
DESCRIPTION: Demonstrates how to set and get the 'loop' property of a GLTFAnimation instance. This boolean property likely determines if the animation should loop.

LANGUAGE: GDScript
CODE:
# Setting the loop property
animation.set_loop(true)

# Getting the loop property
var is_looping = animation.get_loop()

----------------------------------------

TITLE: Managing Translations
DESCRIPTION: Adds a translation resource to the main translation domain.

LANGUAGE: GDScript
CODE:
TranslationServer.add_translation(translation_resource)

----------------------------------------

TITLE: Common PackedInt64Array Operations
DESCRIPTION: Examples of common operations like appending, inserting, and accessing elements.

LANGUAGE: gdscript
CODE:
var arr = PackedInt64Array()
arr.append(42) # Add element to end
arr.insert(0, 10) # Insert at index
var val = arr[0] # Access element
arr.sort() # Sort array
arr.resize(5) # Resize array

----------------------------------------

TITLE: Implementing Resampled AudioStream in C++
DESCRIPTION: Demonstrates how to create a resampled version of the custom AudioStream using AudioStreamPlaybackResampled. This allows for handling different sample rates.

LANGUAGE: C++
CODE:
#include "core/reference.h"
#include "core/resource.h"
#include "servers/audio/audio_stream.h"

class AudioStreamMyToneResampled;

class AudioStreamPlaybackResampledMyTone : public AudioStreamPlaybackResampled {
    GDCLASS(AudioStreamPlaybackResampledMyTone, AudioStreamPlaybackResampled)
    friend class AudioStreamMyToneResampled;

private:
    enum {
        PCM_BUFFER_SIZE = 4096
    };
    enum {
        MIX_FRAC_BITS = 13,
        MIX_FRAC_LEN = (1 << MIX_FRAC_BITS),
        MIX_FRAC_MASK = MIX_FRAC_LEN - 1,
    };
    void *pcm_buffer;
    Ref<AudioStreamMyToneResampled> base;
    bool active;

protected:
    virtual void _mix_internal(AudioFrame *p_buffer, int p_frames);

public:
    virtual void start(float p_from_pos = 0.0);
    virtual void stop();
    virtual bool is_playing() const;
    virtual int get_loop_count() const; // times it looped
    virtual float get_playback_position() const;
    virtual void seek(float p_time);
    virtual float get_length() const; // if supported, otherwise return 0
    virtual float get_stream_sampling_rate();
    AudioStreamPlaybackResampledMyTone();
    ~AudioStreamPlaybackResampledMyTone();
};

----------------------------------------

TITLE: Loading Resources in Godot C++
DESCRIPTION: Shows how to load resources using the ResourceLoader API in Godot C++.

LANGUAGE: cpp
CODE:
Ref<Resource> res = ResourceLoader::load("res://someresource.res")

----------------------------------------

TITLE: Loading Ogg Vorbis Audio from File in GDScript
DESCRIPTION: Creates a new AudioStreamOggVorbis instance from a file path. This static method loads an Ogg Vorbis audio file from the specified path on the filesystem.

LANGUAGE: GDScript
CODE:
var ogg_stream = AudioStreamOggVorbis.load_from_file("path/to/audio.ogg")

----------------------------------------

TITLE: Adding Syntax Highlighter in ScriptEditorBase
DESCRIPTION: Adds an EditorSyntaxHighlighter to the open script. This method allows customization of syntax highlighting for the script being edited.

LANGUAGE: GDScript
CODE:
add_syntax_highlighter(highlighter: EditorSyntaxHighlighter)

----------------------------------------

TITLE: Implementing Property Binding in Godot C++
DESCRIPTION: Demonstrates how to implement custom property binding using _set, _get, and _get_property_list methods.

LANGUAGE: cpp
CODE:
protected:
     void _get_property_list(List<PropertyInfo> *r_props) const;      // return list of properties
     bool _get(const StringName &p_property, Variant &r_value) const; // return true if property was found
     bool _set(const StringName &p_property, const Variant &p_value); // return true if property was found

----------------------------------------

TITLE: Getting RigidBody3D Inertia - GDScript
DESCRIPTION: Code snippet showing how to get the computed inertia of a RigidBody3D node using PhysicsServer3D

LANGUAGE: gdscript
CODE:
@onready var ball = $Ball

func get_ball_inertia():
    return PhysicsServer3D.body_get_direct_state(ball.get_rid()).inverse_inertia.inverse()

----------------------------------------

TITLE: Initializing Camera References in Godot
DESCRIPTION: Code for setting up camera and pivot point references in the player script. Accesses nodes using unique names with the @onready decorator.

LANGUAGE: gdscript
CODE:
# Comment out this existing camera line.
# @onready var _camera := $Target/Camera3D as Camera3D

@onready var _camera := %Camera3D as Camera3D
@onready var _camera_pivot := %CameraPivot as Node3D

----------------------------------------

TITLE: Shape Collision Check Method Definition
DESCRIPTION: Virtual method for implementing custom shape collision detection. Takes collision parameters and returns results through pointers.

LANGUAGE: gdscript
CODE:
bool _collide_shape(RID shape_rid, Transform3D transform, Vector3 motion, float margin, int collision_mask, bool collide_with_bodies, bool collide_with_areas, void* results, int max_results, int32_t* result_count)

----------------------------------------

TITLE: ColorRect Property Definition
DESCRIPTION: Defines the color property for the ColorRect class with default white color (1,1,1,1). Includes getter and setter methods for the color property.

LANGUAGE: rst
CODE:
:ref:`Color<class_Color>` **color** = ``Color(1, 1, 1, 1)`` :ref:`🔗<class_ColorRect_property_color>`

- |void| **set_color**\ (\ value\: :ref:`Color<class_Color>`\ )
- :ref:`Color<class_Color>` **get_color**\ (\ )

----------------------------------------

TITLE: TextureProgressBar Property Example
DESCRIPTION: Example showing core properties of TextureProgressBar with their default values

LANGUAGE: gdscript
CODE:
# Core TextureProgressBar properties
fill_mode = 0
nine_patch_stretch = false
radial_center_offset = Vector2(0, 0)
radial_fill_degrees = 360.0
radial_initial_angle = 0.0
texture_progress_offset = Vector2(0, 0)
tint_over = Color(1, 1, 1, 1)
tint_progress = Color(1, 1, 1, 1)
tint_under = Color(1, 1, 1, 1)

----------------------------------------

TITLE: Defining AudioEffectDistortion Properties
DESCRIPTION: Property definitions for the AudioEffectDistortion class including drive, keep_hf_hz, mode, post_gain, and pre_gain with their default values and ranges.

LANGUAGE: RST
CODE:
+----------------------------------------------+--------------------------------------------------------------------+-------------+
| :ref:`float<class_float>`                    | :ref:`drive<class_AudioEffectDistortion_property_drive>`           | ``0.0``     |
+----------------------------------------------+--------------------------------------------------------------------+-------------+
| :ref:`float<class_float>`                    | :ref:`keep_hf_hz<class_AudioEffectDistortion_property_keep_hf_hz>` | ``16000.0`` |
+----------------------------------------------+--------------------------------------------------------------------+-------------+
| :ref:`Mode<enum_AudioEffectDistortion_Mode>` | :ref:`mode<class_AudioEffectDistortion_property_mode>`             | ``0``       |
+----------------------------------------------+--------------------------------------------------------------------+-------------+
| :ref:`float<class_float>`                    | :ref:`post_gain<class_AudioEffectDistortion_property_post_gain>`   | ``0.0``     |
+----------------------------------------------+--------------------------------------------------------------------+-------------+
| :ref:`float<class_float>`                    | :ref:`pre_gain<class_AudioEffectDistortion_property_pre_gain>`     | ``0.0``     |
+----------------------------------------------+--------------------------------------------------------------------+-------------+

----------------------------------------

TITLE: Displaying Messages in GDScript
DESCRIPTION: Implements a function to show temporary messages on the HUD.

LANGUAGE: GDScript
CODE:
func show_message(text):
    $Message.text = text
    $Message.show()
    $MessageTimer.start()

----------------------------------------

TITLE: Skin Class Method Documentation
DESCRIPTION: Reference documentation for methods available in the Skin class, including bind management, pose transforms, and bone operations.

LANGUAGE: rst
CODE:
Methods
-------

+---------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| |void|                                | :ref:`add_bind<class_Skin_method_add_bind>`\ (\ bone\: :ref:`int<class_int>`, pose\: :ref:`Transform3D<class_Transform3D>`\ )                   |
+---------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+
| |void|                                | :ref:`add_named_bind<class_Skin_method_add_named_bind>`\ (\ name\: :ref:`String<class_String>`, pose\: :ref:`Transform3D<class_Transform3D>`\ ) |
+---------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------+

----------------------------------------

TITLE: Processing Animation Node Data
DESCRIPTION: Method for processing animation playback information. Takes playback data array input and returns processed animation data array including length, position, delta, loop mode, and other state flags.

LANGUAGE: GDScript
CODE:
PackedFloat32Array _process_animation_node(playback_info: PackedFloat64Array, test_only: bool)

----------------------------------------

TITLE: Character Range Example
DESCRIPTION: Example showing how to specify character ranges for bitmap font imports. Demonstrates both ASCII and Unicode range formats.

LANGUAGE: GDScript
CODE:
"0-127"         # Full ASCII range
"0x0000-0x007f" # Same range in hex
"' '-'~'"       # Printable ASCII characters
"'a'-'b' 4 5 2" # Range with custom advance and offset

----------------------------------------

TITLE: Checking Current Listener Status
DESCRIPTION: Method that returns whether this AudioListener3D is currently active as the main listener.

LANGUAGE: gdscript
CODE:
is_current() -> bool

----------------------------------------

TITLE: Implementing Summator Class in C++
DESCRIPTION: Implementation of the Summator class, including method definitions and binding methods for use in Godot.

LANGUAGE: C++
CODE:
#include "summator.h"

void Summator::add(int p_value) {
    count += p_value;
}

void Summator::reset() {
    count = 0;
}

int Summator::get_total() const {
    return count;
}

void Summator::_bind_methods() {
    ClassDB::bind_method(D_METHOD("add", "value"), &Summator::add);
    ClassDB::bind_method(D_METHOD("reset"), &Summator::reset);
    ClassDB::bind_method(D_METHOD("get_total"), &Summator::get_total);
}

Summator::Summator() {
    count = 0;
}

----------------------------------------

TITLE: Adding a Navigation Region
DESCRIPTION: Creates a navigation region and adds it to a map.

LANGUAGE: gdscript
CODE:
var region_rid = NavigationServer2D.region_create()
NavigationServer2D.region_set_map(region_rid, map_rid)
NavigationServer2D.region_set_navigation_polygon(region_rid, navigation_polygon)

----------------------------------------

TITLE: Installing Python Dependencies for Godot Documentation
DESCRIPTION: Specifies exact versions of Python packages required for building Godot documentation. Includes Sphinx core, RTD theme, and extensions for features like code tabs, copy buttons, custom 404 pages, Open Graph tags, and video embedding.

LANGUAGE: pip
CODE:
# Base dependencies
pygments==2.19.1

# Sphinx base and RTD theme.
sphinx==8.1.3
sphinx_rtd_theme==3.0.2

# Sphinx extensions.

# Code tabs extension to display codeblocks in different languages as tabs.
sphinx-tabs==3.4.7
# Adds a 'copy' button to the right of codeblocks.
sphinx-copybutton==0.5.2
# Custom 404 error page (more useful than the default).
sphinx-notfound-page==1.1.0
# Adds Open Graph tags in the HTML `<head>` tag.
sphinxext-opengraph==0.9.1

# `.. video::` directive support to embed videos in documentation pages.
sphinxcontrib-video==0.4.1

----------------------------------------

TITLE: Converting Local Coordinates to Screen Coordinates in C#
DESCRIPTION: Demonstrates the C# equivalent of converting a CanvasItem's local coordinates to screen coordinates using multiple transform methods.

LANGUAGE: csharp
CODE:
var screenCoord = GetViewport().GetScreenTransform() * GetGlobalTransformWithCanvas() * localPos;

----------------------------------------

TITLE: Translating Messages
DESCRIPTION: Translates a message string using the current locale and optional context.

LANGUAGE: GDScript
CODE:
var translated = TranslationServer.translate("Hello", "context")

----------------------------------------

TITLE: PlaceholderMesh AABB Property
DESCRIPTION: Defines the smallest axis-aligned bounding box (AABB) that encloses the mesh in local space. Property can be get/set via methods.

LANGUAGE: GDScript
CODE:
aabb = AABB(0, 0, 0, 0, 0, 0)

----------------------------------------

TITLE: Implementing AudioStreamMyTone Class in C++
DESCRIPTION: Defines the AudioStreamMyTone class, which is a custom AudioStream for generating a simple tone. It includes methods for resetting, setting position, and generating PCM data.

LANGUAGE: C++
CODE:
#include "core/reference.h"
#include "core/resource.h"
#include "servers/audio/audio_stream.h"

class AudioStreamMyTone : public AudioStream {
    GDCLASS(AudioStreamMyTone, AudioStream)

private:
    friend class AudioStreamPlaybackMyTone;
    uint64_t pos;
    int mix_rate;
    bool stereo;
    int hz;

public:
    void reset();
    void set_position(uint64_t pos);
    virtual Ref<AudioStreamPlayback> instance_playback();
    virtual String get_stream_name() const;
    void gen_tone(int16_t *pcm_buf, int size);
    virtual float get_length() const { return 0; } // if supported, otherwise return 0
    AudioStreamMyTone();

protected:
    static void _bind_methods();
};

----------------------------------------

TITLE: Setting Encryption Key as Environment Variable (Windows CMD)
DESCRIPTION: This command sets the generated encryption key as an environment variable in Windows Command Prompt.

LANGUAGE: batch
CODE:
set SCRIPT_AES256_ENCRYPTION_KEY=your_generated_key

----------------------------------------

TITLE: Area Collision Monitoring
DESCRIPTION: Setting up an area to monitor collisions with other objects.

LANGUAGE: gdscript
CODE:
var area = PhysicsServer2D.area_create()

# Setup collision detection
PhysicsServer2D.area_set_collision_mask(area, 1)
PhysicsServer2D.area_set_monitorable(area, true)

# Set monitor callback
PhysicsServer2D.area_set_monitor_callback(area, func(status, body_rid, instance_id, body_shape_idx, area_shape_idx):
	if status == PhysicsServer2D.AREA_BODY_ADDED:
		print("Body entered area")
	elif status == PhysicsServer2D.AREA_BODY_REMOVED:
		print("Body exited area"))

----------------------------------------

TITLE: Accessing Layer Data in TextureLayered with GDScript
DESCRIPTION: Shows how to retrieve image data for a specific layer in a TextureLayered object.

LANGUAGE: GDScript
CODE:
var texture_layered: TextureLayered

func get_layer_image(layer: int) -> Image:
    return texture_layered.get_layer_data(layer)

----------------------------------------

TITLE: Connecting Points in AStar3D (C#)
DESCRIPTION: Shows how to connect points in an AStar3D instance using C#.

LANGUAGE: csharp
CODE:
var astar = new AStar3D();
astar.AddPoint(1, new Vector3(1, 1, 0));
astar.AddPoint(2, new Vector3(0, 5, 0));
astar.ConnectPoints(1, 2, false);

----------------------------------------

TITLE: Enumerating WebRTCDataChannel WriteMode Constants
DESCRIPTION: Constants defining the write mode for WebRTCDataChannel data transfer - text or binary.

LANGUAGE: gdscript
CODE:
enum WriteMode {
    WRITE_MODE_TEXT = 0,    # Send data as text string
    WRITE_MODE_BINARY = 1    # Send data as binary buffer
}

----------------------------------------

TITLE: Setting Ceiling DB in AudioEffectHardLimiter
DESCRIPTION: Method for setting and getting the ceiling_db property which controls the maximum allowed waveform value in decibels. Range is -24.0 to 0.0.

LANGUAGE: gdscript
CODE:
set_ceiling_db(value: float)
get_ceiling_db() -> float

----------------------------------------

TITLE: Initializing HUD Signals in C#
DESCRIPTION: Defines a signal for notifying the Main node that the start button has been pressed using C# syntax.

LANGUAGE: C#
CODE:
using Godot;

public partial class HUD : CanvasLayer
{
    // Don't forget to rebuild the project so the editor knows about the new signal.

    [Signal]
    public delegate void StartGameEventHandler();
}

----------------------------------------

TITLE: Implementing Soft Light Blend Mode in GDScript
DESCRIPTION: Formula for the soft light blend mode used in the VisualShaderNodeColorOp class.

LANGUAGE: gdscript
CODE:
for (int i = 0; i < 3; i++) {
    float base = a[i];
    float blend = b[i];
    if (base < 0.5) {
        result[i] = base * (blend + 0.5);
    } else {
        result[i] = 1.0 - (1.0 - base) * (1.0 - (blend - 0.5));
    }
}

----------------------------------------

TITLE: Controlling AnimationNodeTransition in C#
DESCRIPTION: Shows how to play a child animation, get the current state name, and get the current state index using an AnimationNodeTransition in C#.

LANGUAGE: csharp
CODE:
// Play child animation connected to "state_2" port.
animationTree.Set("parameters/Transition/transition_request", "state_2");

// Get current state name (read-only).
animationTree.Get("parameters/Transition/current_state");

// Get current state index (read-only).
animationTree.Get("parameters/Transition/current_index");

----------------------------------------

TITLE: Properties Table in PhysicsPointQueryParameters3D
DESCRIPTION: Table showing all available properties of the PhysicsPointQueryParameters3D class including their types, names and default values.

LANGUAGE: RST
CODE:
+----------------------------------------------------+----------------------------------------------------------------------------------------------+----------------------+
| :ref:`bool<class_bool>`                            | :ref:`collide_with_areas<class_PhysicsPointQueryParameters3D_property_collide_with_areas>`   | ``false``            |
+----------------------------------------------------+----------------------------------------------------------------------------------------------+----------------------+
| :ref:`bool<class_bool>`                            | :ref:`collide_with_bodies<class_PhysicsPointQueryParameters3D_property_collide_with_bodies>` | ``true``             |
+----------------------------------------------------+----------------------------------------------------------------------------------------------+----------------------+
| :ref:`int<class_int>`                              | :ref:`collision_mask<class_PhysicsPointQueryParameters3D_property_collision_mask>`           | ``4294967295``       |
+----------------------------------------------------+----------------------------------------------------------------------------------------------+----------------------+
| :ref:`Array<class_Array>`\[:ref:`RID<class_RID>`\] | :ref:`exclude<class_PhysicsPointQueryParameters3D_property_exclude>`                         | ``[]``               |
+----------------------------------------------------+----------------------------------------------------------------------------------------------+----------------------+
| :ref:`Vector3<class_Vector3>`                      | :ref:`position<class_PhysicsPointQueryParameters3D_property_position>`                       | ``Vector3(0, 0, 0)`` |
+----------------------------------------------------+----------------------------------------------------------------------------------------------+----------------------+

----------------------------------------

TITLE: Clearing Current AudioListener2D in GDScript
DESCRIPTION: Disables the current AudioListener2D. This method has no effect if the listener is not set as current.

LANGUAGE: GDScript
CODE:
clear_current()

----------------------------------------

TITLE: Defining Summator Class Header in C++
DESCRIPTION: Header file defining the Summator class, which inherits from RefCounted and provides methods for adding numbers and getting totals.

LANGUAGE: C++
CODE:
#ifndef SUMMATOR_H
#define SUMMATOR_H

#include "core/object/ref_counted.h"

class Summator : public RefCounted {
    GDCLASS(Summator, RefCounted);

    int count;

protected:
    static void _bind_methods();

public:
    void add(int p_value);
    void reset();
    int get_total() const;

    Summator();
};

#endif // SUMMATOR_H

----------------------------------------

TITLE: Modifier Key State Methods
DESCRIPTION: Methods for querying the state of modifier keys and getting the modifier mask. Includes is_command_or_control_pressed() and get_modifiers_mask() methods.

LANGUAGE: GDScript
CODE:
func get_modifiers_mask() -> int:
    # Returns the keycode combination of modifier keys
    pass

func is_command_or_control_pressed() -> bool:
    # Returns true if Meta (Cmd) is pressed on macOS
    # or if Ctrl is pressed on other platforms
    pass

----------------------------------------

TITLE: Handling URL Tag Clicks in RichTextLabel GDScript
DESCRIPTION: Script to handle clicked URL tags in RichTextLabel by opening them in the default web browser

LANGUAGE: GDScript
CODE:
func _richtextlabel_on_meta_clicked(meta):
    OS.shell_open(str(meta))

----------------------------------------

TITLE: Drawing Connected Lines in C#
DESCRIPTION: Shows how to draw connected lines using draw_polyline in C#.

LANGUAGE: C#
CODE:
private float[,] _coordsMouth =
{
    { 22.817f, 81.100f }, { 38.522f, 82.740f },
    { 39.001f, 90.887f }, { 54.465f, 92.204f },
    { 55.641f, 84.260f }, { 72.418f, 84.177f },
    { 73.629f, 92.158f }, { 88.895f, 90.923f },
    { 89.556f, 82.673f }, { 105.005f, 81.100f }
};

private Vector2[] _mouth;
private float _mouthWidth = 4.4f;

public override void _Ready()
{
    _mouth = FloatArrayToVector2Array(_coordsMouth);
}

public override void _Draw()
{
    Color white = Colors.White;
    DrawPolyline(_mouth, white, _mouthWidth);
}

----------------------------------------

TITLE: Implementing View Projection Method in GDExtension
DESCRIPTION: Method to be implemented in GDExtension to return the view Projection for a given view.

LANGUAGE: GDScript
CODE:
Projection _get_view_projection(view: int) virtual const

----------------------------------------

TITLE: Managing Game Center Achievement in GDScript
DESCRIPTION: Example of awarding achievement progress through the Game Center API.

LANGUAGE: gdscript
CODE:
var result = award_achievement({ "name": "hard_mode_completed", "progress": 6.1 })

----------------------------------------

TITLE: Getting Instance Path
DESCRIPTION: Retrieves the file path to the PackedScene resource that will be loaded by default when creating an instance. This method is not thread-safe.

LANGUAGE: gdscript
CODE:
get_instance_path() -> String

----------------------------------------

TITLE: Building Web Export Templates in Shell
DESCRIPTION: Commands for building release and debug web export templates using SCons build system. These commands compile Godot to WebAssembly format.

LANGUAGE: shell
CODE:
scons platform=web target=template_release
scons platform=web target=template_debug

----------------------------------------

TITLE: Installing SCons with Pip
DESCRIPTION: Command to install the SCons build system using Python's pip package manager

LANGUAGE: shell
CODE:
python -m pip install scons

----------------------------------------

TITLE: Retrieving Java Class Name in Godot
DESCRIPTION: Returns the name of the Java class as a String. This method is constant and has no side effects.

LANGUAGE: GDScript
CODE:
get_java_class_name()

----------------------------------------

TITLE: Generating AES-256 Encryption Key with OpenSSL
DESCRIPTION: This command uses OpenSSL to generate a 256-bit AES key in hexadecimal format and save it to a file named 'godot.gdkey'.

LANGUAGE: shell
CODE:
openssl rand -hex 32 > godot.gdkey

----------------------------------------

TITLE: Setting and Getting Shortcut Property in GDScript
DESCRIPTION: Demonstrates how to set and get the 'shortcut' property of an InputEventShortcut object. The shortcut property is of type Shortcut and represents the keyboard shortcut associated with this event.

LANGUAGE: gdscript
CODE:
# Setting the shortcut property
set_shortcut(value: Shortcut)

# Getting the shortcut property
get_shortcut() -> Shortcut

----------------------------------------

TITLE: Vertex Shader for Full-Screen Quad in Godot
DESCRIPTION: This GLSL vertex shader positions a quad to cover the entire screen in clip space, allowing for full-screen post-processing effects.

LANGUAGE: glsl
CODE:
shader_type spatial;
render_mode unshaded, fog_disabled;

void vertex() {
  POSITION = vec4(VERTEX.xy, 1.0, 1.0);
}

----------------------------------------

TITLE: Setting VRS Properties in XRVRS Class
DESCRIPTION: Code demonstrates the property definitions for VRS parameters including minimum radius, render region, and strength settings. These properties control how the VRS texture is generated and applied.

LANGUAGE: gdscript
CODE:
var vrs_min_radius: float = 20.0
var vrs_render_region: Rect2i = Rect2i(0, 0, 0, 0)
var vrs_strength: float = 1.0

----------------------------------------

TITLE: Setting Frame Duration in AnimatedTexture
DESCRIPTION: Sets the duration of a specific frame in the AnimatedTexture. The duration is in seconds and is affected by the speed_scale property. A duration of 0 will cause the frame to be skipped during playback.

LANGUAGE: gdscript
CODE:
set_frame_duration(frame: int, duration: float)

----------------------------------------

TITLE: Creating ImageTexture3D Instance
DESCRIPTION: Creates a new ImageTexture3D with specified format, dimensions, mipmap settings and data array. Returns an Error code indicating success or failure.

LANGUAGE: GDScript
CODE:
create(format: Format, width: int, height: int, depth: int, use_mipmaps: bool, data: Array[Image])

----------------------------------------

TITLE: Basic CanvasLayer Properties
DESCRIPTION: Demonstrates the core properties of a CanvasLayer including layer index, visibility, transform and viewport following.

LANGUAGE: gdscript
CODE:
var canvas_layer = CanvasLayer.new()
canvas_layer.layer = 1
canvas_layer.visible = true
canvas_layer.offset = Vector2(0, 0)
canvas_layer.follow_viewport_enabled = false
canvas_layer.follow_viewport_scale = 1.0

----------------------------------------

TITLE: Retrieving Object Reference in GDScript
DESCRIPTION: This method returns the Object this WeakRef is referring to. If the object no longer exists, it returns null. It's useful for checking if the weakly referenced object is still valid.

LANGUAGE: gdscript
CODE:
Variant get_ref() const

----------------------------------------

TITLE: Using preload to load resources
DESCRIPTION: Shows how to use preload to load a resource file at parse-time.

LANGUAGE: GDScript
CODE:
# Create instance of a scene.
var diamond = preload("res://diamond.tscn").instantiate()

----------------------------------------

TITLE: Signal Definition Example in RST
DESCRIPTION: Defines the 'finished' signal emitted when audio completes playback normally

LANGUAGE: rst
CODE:
**finished**\ (\) :ref:`🔗<class_AudioStreamPlayer_signal_finished>`

----------------------------------------

TITLE: Controlling AnimationPlayer Animation in GDScript
DESCRIPTION: This snippet demonstrates how to control an AnimationPlayer animation using GDScript. It plays the 'walk' animation when the right arrow key is pressed and stops it when released.

LANGUAGE: GDScript
CODE:
extends CharacterBody2D

@onready var _animation_player = $AnimationPlayer

func _process(_delta):
    if Input.is_action_pressed("ui_right"):
        _animation_player.play("walk")
    else:
        _animation_player.stop()

----------------------------------------

TITLE: Adding Surface with Blend Shapes
DESCRIPTION: Example of adding a surface with vertex data, blend shapes, LODs and material to an ImporterMesh instance.

LANGUAGE: GDScript
CODE:
add_surface(
  primitive,
  arrays,
  blend_shapes = [],
  lods = {},
  material = null,
  name = "",
  flags = 0
)

----------------------------------------

TITLE: Setting Anisotropic Filtering Level in RenderSceneBuffersExtension
DESCRIPTION: Implement this method in GDExtension to change the anisotropic filtering level. It takes an integer parameter representing the new filtering level.

LANGUAGE: GDScript
CODE:
func _set_anisotropic_filtering_level(anisotropic_filtering_level: int) -> void:

----------------------------------------

TITLE: Disabling WebWorker Threads Support
DESCRIPTION: Commands to build web templates without WebWorker threads support for single-threaded operation.

LANGUAGE: shell
CODE:
scons platform=web target=template_release threads=no
scons platform=web target=template_debug threads=no

----------------------------------------

TITLE: Raising float to power of int in GDScript
DESCRIPTION: Shows raising a float to the power of an integer.

LANGUAGE: GDScript
CODE:
print(0.9**3) # 0.729

----------------------------------------

TITLE: Pause Button Handler
DESCRIPTION: Event handler for the pause button that pauses the game and shows the pause menu.

LANGUAGE: gdscript
CODE:
func _on_pause_button_pressed():
    get_tree().paused = true
    show()

LANGUAGE: csharp
CODE:
private void OnPauseButtonPressed()
{
    GetTree().Paused = true;
    Show();
}

----------------------------------------

TITLE: Toggling Navigation Debug Visualization - GDScript
DESCRIPTION: Controls the visibility of navigation debug visualizations using NavigationServer singletons in GDScript. These functions are only available in debug builds.

LANGUAGE: gdscript
CODE:
NavigationServer2D.set_debug_enabled(false)
NavigationServer3D.set_debug_enabled(true)

----------------------------------------

TITLE: Creating Mesh Network Configuration
DESCRIPTION: Initializes a mesh network configuration with a unique peer ID for distributed networking topologies.

LANGUAGE: GDScript
CODE:
create_mesh(1234)

----------------------------------------

TITLE: Output Example of PackedDataContainerRef Usage
DESCRIPTION: Example output showing how nested elements are printed when using PackedDataContainerRef.

LANGUAGE: text
CODE:
1
2
3
::nested1
::nested2
4
5
6

----------------------------------------

TITLE: Compiling iOS Release Template
DESCRIPTION: SCons command to compile a release build of the iOS export template with bundle generation.

LANGUAGE: shell
CODE:
scons platform=ios target=template_release generate_bundle=yes

----------------------------------------

TITLE: Compiling Android Editor
DESCRIPTION: SCons commands for building the Godot editor for Android with support for multiple architectures

LANGUAGE: shell
CODE:
scons platform=android arch=arm32 production=yes target=editor
scons platform=android arch=arm64 production=yes target=editor
scons platform=android arch=x86_32 production=yes target=editor
scons platform=android arch=x86_64 production=yes target=editor generate_apk=yes

----------------------------------------

TITLE: Improving SDFGI Settings for Movie Recording in C#
DESCRIPTION: Shows how to improve SDFGI (Signed Distance Field Global Illumination) settings when recording a movie using C#.

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyNode3D : Node3D
{
    public override void _Ready()
    {
        if (OS.HasFeature("movie"))
        {
            // When recording a movie, improve SDFGI cell density
            // without decreasing its maximum distance.
            GetViewport().World3D.Environment.SdfgiMinCellSize *= 0.25f;
            GetViewport().World3D.Environment.SdfgiCascades = 8;
        }
    }
}

----------------------------------------

TITLE: Using Color8 to create a Color
DESCRIPTION: Creates a Color object using 8-bit integer values for red, green, blue and alpha channels.

LANGUAGE: GDScript
CODE:
var red = Color8(255, 0, 0)             # Same as Color(1, 0, 0).
var dark_blue = Color8(0, 0, 51)        # Same as Color(0, 0, 0.2).
var my_color = Color8(306, 255, 0, 102) # Same as Color(1.2, 1, 0, 0.4).

----------------------------------------

TITLE: Getting Feed Count Method
DESCRIPTION: Method to get the total number of registered camera feeds.

LANGUAGE: GDScript
CODE:
int get_feed_count()

----------------------------------------

TITLE: Implementing Can Generate Small Preview in EditorResourcePreviewGenerator
DESCRIPTION: This method determines if the generator can create small previews. Override to return true if small preview generation is supported.

LANGUAGE: GDScript
CODE:
func _can_generate_small_preview() -> bool:
    return false

----------------------------------------

TITLE: Shader Refraction Implementation
DESCRIPTION: Translates to refract(I, N, eta) in shader language where I is the incident vector, N is normal vector, and eta is the refraction indices ratio. Used within visual shader graphs for calculating refraction vectors.

LANGUAGE: gdscript
CODE:
refract(I, N, eta)

----------------------------------------

TITLE: Implementing JSON Resource Loader Source
DESCRIPTION: Implementation of the ResourceFormatLoaderJson class, providing functionality to load JSON files as resources in Godot.

LANGUAGE: cpp
CODE:
#include "resource_loader_json.h"

#include "resource_json.h"

RES ResourceFormatLoaderJson::load(const String &p_path, const String &p_original_path, Error *r_error) {
Ref<JsonResource> json = memnew(JsonResource);
    if (r_error) {
        *r_error = OK;
    }
    Error err = json->load_file(p_path);
    return json;
}

void ResourceFormatLoaderJson::get_recognized_extensions(List<String> *r_extensions) const {
    if (!r_extensions->find("json")) {
        r_extensions->push_back("json");
    }
}

String ResourceFormatLoaderJson::get_resource_type(const String &p_path) const {
    return "Resource";
}

bool ResourceFormatLoaderJson::handles_type(const String &p_type) const {
    return ClassDB::is_parent_class(p_type, "Resource");
}

----------------------------------------

TITLE: Setting External Buffer ID in ExternalTexture
DESCRIPTION: Sets the external buffer ID for the ExternalTexture. This method is used to associate the texture with an external buffer, typically obtained from platform-specific APIs like SurfaceTexture.getHardwareBuffer() on Android.

LANGUAGE: GDScript
CODE:
set_external_buffer_id(external_buffer_id: int)

----------------------------------------

TITLE: GLTFTextureSampler Property Accessors
DESCRIPTION: Getter and setter method signatures for accessing and modifying the texture sampler properties.

LANGUAGE: GDScript
CODE:
void set_mag_filter(int value)
int get_mag_filter()
void set_min_filter(int value)
int get_min_filter()
void set_wrap_s(int value)
int get_wrap_s()
void set_wrap_t(int value)
int get_wrap_t()

----------------------------------------

TITLE: Customizing Debug Output Handling for Godot Web Export
DESCRIPTION: JavaScript code showing how to set custom callback functions for handling standard output and error streams from the Godot engine, useful for debugging exported projects.

LANGUAGE: javascript
CODE:
function print(text) {
    console.log(text);
}
function printError(text) {
    console.warn(text);
}
engine.startGame({ onPrint: print, onPrintError: printError });

----------------------------------------

TITLE: Disabling JavaScript Eval in Web Build
DESCRIPTION: Commands to build web templates without JavaScript eval functionality for improved security.

LANGUAGE: shell
CODE:
scons platform=web target=template_release javascript_eval=no
scons platform=web target=template_debug javascript_eval=no

----------------------------------------

TITLE: Implementing DTLS Server in C#
DESCRIPTION: C# implementation of a DTLS server that handles secure connections and packet processing. Demonstrates proper connection handling and packet exchange with clients.

LANGUAGE: csharp
CODE:
// ServerNode.cs
using Godot;

public partial class ServerNode : Node
{
    private DtlsServer _dtls = new DtlsServer();
    private UdpServer _server = new UdpServer();
    private Godot.Collections.Array<PacketPeerDtls> _peers = [];

    public override void _Ready()
    {
        _server.Listen(4242);
        var key = GD.Load<CryptoKey>("key.key"); // Your private key.
        var cert = GD.Load<X509Certificate>("cert.crt"); // Your X509 certificate.
        _dtls.Setup(TlsOptions.Server(key, cert));
    }

    public override void _Process(double delta)
    {
        while (_server.IsConnectionAvailable())
        {
            PacketPeerUdp peer = _server.TakeConnection();
            PacketPeerDtls dtlsPeer = _dtls.TakeConnection(peer);
            if (dtlsPeer.GetStatus() != PacketPeerDtls.Status.Handshaking)
            {
                continue; // It is normal that 50% of the connections fails due to cookie exchange.
            }
            GD.Print("Peer connected!");
            _peers.Add(dtlsPeer);
        }

        foreach (var p in _peers)
        {
            p.Poll(); // Must poll to update the state.
            if (p.GetStatus() == PacketPeerDtls.Status.Connected)
            {
                while (p.GetAvailablePacketCount() > 0)
                {
                    GD.Print($"Received Message From Client: {p.GetPacket().GetStringFromUtf8()}");
                    p.PutPacket("Hello DTLS Client".ToUtf8Buffer());
                }
            }
        }
    }
}

----------------------------------------

TITLE: Implementing Jumping Logic in C#
DESCRIPTION: Adds jumping functionality to the player character in the _PhysicsProcess function using C#.

LANGUAGE: C#
CODE:
public override void _PhysicsProcess(double delta)
{
    // ...

    // Jumping.
    if (IsOnFloor() && Input.IsActionJustPressed("jump"))
    {
        _targetVelocity.Y = JumpImpulse;
    }

    // ...
}

----------------------------------------

TITLE: Manipulating NavigationLayers in 3D GDScript
DESCRIPTION: This snippet demonstrates how to change navigation layers for regions and agents, and how to perform path queries with specific layer restrictions in 3D using GDScript.

LANGUAGE: gdscript
CODE:
func change_layers():
    var region: NavigationRegion3D = get_node("NavigationRegion3D")
    # enables 4-th layer for this region
    region.navigation_layers = enable_bitmask_inx(region.navigation_layers, 4)
    # disables 1-rst layer for this region
    region.navigation_layers = disable_bitmask_inx(region.navigation_layers, 1)

    var agent: NavigationAgent3D = get_node("NavigationAgent3D")
    # make future path queries of this agent ignore regions with 4-th layer
    agent.navigation_layers = disable_bitmask_inx(agent.navigation_layers, 4)

    var path_query_navigation_layers: int = 0
    path_query_navigation_layers = enable_bitmask_inx(path_query_navigation_layers, 2)
    # get a path that only considers 2-nd layer regions
    var path: PackedVector3Array = NavigationServer3D.map_get_path(
        map,
        start_position,
        target_position,
        true,
        path_query_navigation_layers
        )

static func is_bitmask_inx_enabled(_bitmask: int, _index: int) -> bool:
    return _bitmask & (1 << _index) != 0

static func enable_bitmask_inx(_bitmask: int, _index: int) -> int:
    return _bitmask | (1 << _index)

static func disable_bitmask_inx(_bitmask: int, _index: int) -> int:
    return _bitmask & ~(1 << _index)

----------------------------------------

TITLE: Manual Function Timing in C#
DESCRIPTION: Shows how to measure execution time of a function in microseconds using C#. Provides the same functionality as the GDScript version but in C# syntax.

LANGUAGE: csharp
CODE:
var timeStart = Time.GetTicksUsec();

// Your function you want to time.
UpdateEnemies();

var timeEnd = Time.GetTicksUsec();
GD.Print($"UpdateEnemies() took {timeEnd - timeStart} microseconds");

----------------------------------------

TITLE: Removing a Node from Selection in GDScript
DESCRIPTION: Removes a specific node from the editor selection.

LANGUAGE: GDScript
CODE:
remove_node(node: Node)

----------------------------------------

TITLE: Setting Keyword Colors Example - CodeHighlighter
DESCRIPTION: Example of setting color for a specific keyword in the code highlighter.

LANGUAGE: GDScript
CODE:
add_keyword_color("func", Color(0.3, 0.6, 0.8))

----------------------------------------

TITLE: Generating Compilation Database for CLion (Bash)
DESCRIPTION: This command generates a compilation database file (compile_commands.json) for CLion to import the Godot project. It uses SCons with the compiledb option.

LANGUAGE: bash
CODE:
scons compiledb=yes

----------------------------------------

TITLE: Compiling Android Debug Templates
DESCRIPTION: SCons commands for building the debug export templates for Android with ARM32 and ARM64 architectures

LANGUAGE: shell
CODE:
scons platform=android target=template_debug arch=arm32
scons platform=android target=template_debug arch=arm64 generate_apk=yes

----------------------------------------

TITLE: Random Number Generation Functions
DESCRIPTION: Helper functions for generating random numbers from seeds in particle shaders. Includes rand_from_seed and hash functions used for particle randomization.

LANGUAGE: glsl
CODE:
float rand_from_seed(in uint seed) {
  int k;
  int s = int(seed);
  if (s == 0)
    s = 305420679;
  k = s / 127773;
  s = 16807 * (s - k * 127773) - 2836 * k;
  if (s < 0)
    s += 2147483647;
  seed = uint(s);
  return float(seed % uint(65536)) / 65535.0;
}

uint hash(uint x) {
  x = ((x >> uint(16)) ^ x) * uint(73244475);
  x = ((x >> uint(16)) ^ x) * uint(73244475);
  x = (x >> uint(16)) ^ x;
  return x;
}

----------------------------------------

TITLE: Installing Ruff Python Linter
DESCRIPTION: Command to install the Ruff Python linter and formatter using pip

LANGUAGE: shell
CODE:
pip3 install ruff --user

----------------------------------------

TITLE: BaseButton Draw Mode Usage
DESCRIPTION: Example of accessing button draw mode for custom rendering implementations

LANGUAGE: rst
CODE:
draw_mode = get_draw_mode() # Returns the visual state used to draw the button

----------------------------------------

TITLE: Implementing Basic Mob Movement in C#
DESCRIPTION: Initial mob setup with minimum and maximum speed properties and basic movement using MoveAndSlide()

LANGUAGE: csharp
CODE:
using Godot;

public partial class Mob : CharacterBody3D
{
    [Export]
    public int MinSpeed { get; set; } = 10;
    [Export]
    public int MaxSpeed { get; set; } = 18;

    public override void _PhysicsProcess(double delta)
    {
        MoveAndSlide();
    }

----------------------------------------

TITLE: Initializing a PackedVector4Array in GDScript
DESCRIPTION: Creates a new PackedVector4Array with two Vector4 elements.

LANGUAGE: gdscript
CODE:
var array = PackedVector4Array([Vector4(12, 34, 56, 78), Vector4(90, 12, 34, 56)])

----------------------------------------

TITLE: AudioEffectLowPassFilter Class Definition in RST
DESCRIPTION: ReStructuredText documentation defining the AudioEffectLowPassFilter class, its inheritance hierarchy, and basic functionality. The class inherits from AudioEffectFilter and provides low-pass filtering capabilities for audio processing.

LANGUAGE: rst
CODE:
.. _class_AudioEffectLowPassFilter:\n\nAudioEffectLowPassFilter\n========================\n\n**Inherits:** :ref:`AudioEffectFilter<class_AudioEffectFilter>` **<** :ref:`AudioEffect<class_AudioEffect>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`\n\nAdds a low-pass filter to the audio bus.

----------------------------------------

TITLE: RST Class Declaration and Description
DESCRIPTION: ReStructuredText documentation defining the HSlider class, its inheritance chain, and basic description of functionality as a horizontal slider control.

LANGUAGE: rst
CODE:
.. _class_HSlider:

HSlider
=======

**Inherits:** :ref:`Slider<class_Slider>` **<** :ref:`Range<class_Range>` **<** :ref:`Control<class_Control>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

A horizontal slider that goes from left (min) to right (max).

----------------------------------------

TITLE: Scene Node Name Modification in GDScript
DESCRIPTION: A tool script that demonstrates how to modify all node names in an imported scene by adding 'modified_' prefix. The script iterates through all nodes recursively and updates their names.

LANGUAGE: gdscript
CODE:
@tool # Needed so it runs in editor.
extends EditorScenePostImport

# This sample changes all node names.
# Called right after the scene is imported and gets the root node.
func _post_import(scene):
    # Change all node names to "modified_[oldnodename]"
    iterate(scene)
    return scene # Remember to return the imported scene

func iterate(node):
    if node != null:
        node.name = "modified_" + node.name
        for child in node.get_children():
            iterate(child)

----------------------------------------

TITLE: Implementing detect.py for Custom Platform Port in Godot
DESCRIPTION: This code snippet outlines the required methods to be implemented in the detect.py file for a custom platform port in Godot. These methods are used by SCons to detect and configure the platform for building.

LANGUAGE: Python
CODE:
def is_active():
    return True

def get_name():
    return "PlatformName"

def can_build():
    return True

def get_opts():
    return []

def get_flags():
    return []

def configure(env):
    pass

----------------------------------------

TITLE: Setting OggPacketSequence Properties
DESCRIPTION: Examples of accessing and setting the core properties of an OggPacketSequence object, including packet data, granule positions, and sampling rate.

LANGUAGE: GDScript
CODE:
# Setting packet data
set_packet_data(packet_array)
var data = get_packet_data()

# Setting granule positions
set_packet_granule_positions(positions_array)
var positions = get_packet_granule_positions()

# Setting sampling rate
set_sampling_rate(44100.0)
var rate = get_sampling_rate()

# Getting stream length
var length = get_length()

----------------------------------------

TITLE: Generating Scene Example
DESCRIPTION: Converts a GLTFState object into a Godot scene node with configurable animation settings

LANGUAGE: GDScript
CODE:
var gltf_doc = GLTFDocument.new()
var node = gltf_doc.generate_scene(state, 30.0, false, true)

----------------------------------------

TITLE: Port Management Example
DESCRIPTION: Demonstrates checking for port existence and removing ports.

LANGUAGE: gdscript
CODE:
if has_input_port(port_id):
    remove_input_port(port_id)

if has_output_port(port_id):
    remove_output_port(port_id)

----------------------------------------

TITLE: Processing Network Events
DESCRIPTION: Example of how to handle network events like connections, disconnections and received data

LANGUAGE: gdscript
CODE:
var event = connection.service()
if event[0] == ENetConnection.EVENT_CONNECT:
    print("New connection from peer")
elif event[0] == ENetConnection.EVENT_RECEIVE:
    print("Received data on channel", event[3])

----------------------------------------

TITLE: AudioEffectPhaser Property Declaration
DESCRIPTION: Property declarations for the AudioEffectPhaser class including depth, feedback, range controls and rate settings. These properties control the phaser effect's behavior.

LANGUAGE: gdscript
CODE:
var depth: float = 1.0
var feedback: float = 0.7
var range_max_hz: float = 1600.0
var range_min_hz: float = 440.0
var rate_hz: float = 0.5

----------------------------------------

TITLE: Applying Mask to Twist Motion in GLSL Shader
DESCRIPTION: Uses mix function to apply the mask to the twist motion, limiting it to the back half of the fish.

LANGUAGE: glsl
CODE:
VERTEX.xy = mix(VERTEX.xy, twist_matrix * VERTEX.xy, mask);

----------------------------------------

TITLE: Accessing Autoloaded Singleton in GDScript
DESCRIPTION: Example of accessing an autoloaded singleton node directly in GDScript code to modify a health variable.

LANGUAGE: gdscript
CODE:
PlayerVariables.health -= 10

----------------------------------------

TITLE: Checking Input Events in Godot
DESCRIPTION: Verifies if an input event matches a registered action in InputMap.

LANGUAGE: GDScript
CODE:
var is_action = InputMap.event_is_action(event, "jump", false)

----------------------------------------

TITLE: Enumerating VisualShaderNodeSample3D Source Types
DESCRIPTION: Defines the possible source types for the VisualShaderNodeSample3D node, including texture and port options.

LANGUAGE: gdscript
CODE:
enum Source {
    SOURCE_TEXTURE = 0,
    SOURCE_PORT = 1,
    SOURCE_MAX = 2
}

----------------------------------------

TITLE: Configuring .gitattributes for Godot Projects and Templates
DESCRIPTION: This .gitattributes configuration normalizes line endings for all text files in a Godot project or template repository.

LANGUAGE: shell
CODE:
# Normalize line endings for all files that Git considers text files.
* text=auto eol=lf

----------------------------------------

TITLE: Compiling Android Release Templates
DESCRIPTION: SCons commands for building the release export templates for Android with ARM32 and ARM64 architectures

LANGUAGE: shell
CODE:
scons platform=android target=template_release arch=arm32
scons platform=android target=template_release arch=arm64 generate_apk=yes

----------------------------------------

TITLE: Varying Fish Speed in GLSL Shader
DESCRIPTION: Uses INSTANCE_CUSTOM to vary the speed of each fish's animation between 50% and 150% of the base speed.

LANGUAGE: glsl
CODE:
float time = (TIME * (0.5 + INSTANCE_CUSTOM.y) * time_scale) + (6.28318 * INSTANCE_CUSTOM.x);

----------------------------------------

TITLE: C++ Header File Template
DESCRIPTION: Example header file structure showing proper copyright notice, include guards, and include organization

LANGUAGE: cpp
CODE:
/**************************************************************************/
/*  my_new_file.h                                                         */
/**************************************************************************/
/*                         This file is part of:                          */
/*                             GODOT ENGINE                               */
/*                        https://godotengine.org                         */
/**************************************************************************/
/* Copyright (c) 2014-present Godot Engine contributors (see AUTHORS.md). */
/* Copyright (c) 2007-2014 Juan Linietsky, Ariel Manzur.                  */
/*                                                                        */
/* Permission is hereby granted, free of charge, to any person obtaining  */
/* a copy of this software and associated documentation files (the        */
/* "Software"), to deal in the Software without restriction, including    */
/* without limitation the rights to use, copy, modify, merge, publish,    */
/* distribute, sublicense, and/or sell copies of the Software, and to     */
/* permit persons to whom the Software is furnished to do so, subject to  */
/* the following conditions:                                              */
/*                                                                        */
/* The above copyright notice and this permission notice shall be         */
/* included in all copies or substantial portions of the Software.        */
/*                                                                        */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        */
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. */
/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY   */
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   */
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE      */
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 */
/**************************************************************************/

#ifndef MY_NEW_FILE_H
#define MY_NEW_FILE_H

#include "core/hash_map.h"
#include "core/list.h"
#include "scene/gui/control.h"

#include <png.h>

...

#endif // MY_NEW_FILE_H

----------------------------------------

TITLE: Property Definition - bone_index
DESCRIPTION: Property definition for the index of the Bone2D node being modified.

LANGUAGE: rst
CODE:
int bone_index = -1

----------------------------------------

TITLE: Getting Frame Duration from AnimatedTexture
DESCRIPTION: Retrieves the duration of a specific frame in the AnimatedTexture, in seconds.

LANGUAGE: gdscript
CODE:
get_frame_duration(frame: int) -> float

----------------------------------------

TITLE: Defining Transform3D Constant Property
DESCRIPTION: Property definition for a Transform3D constant that represents the node's state with default identity matrix values. Includes getter and setter methods for accessing and modifying the constant value.

LANGUAGE: GDScript
CODE:
Transform3D constant = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)

----------------------------------------

TITLE: Testing Signals Example
DESCRIPTION: Example showing how to test signal emissions in Godot using the signal testing macros.

LANGUAGE: cpp
CODE:
SUBCASE("[Timer] Timer process timeout signal must be emitted") {
    SIGNAL_WATCH(test_timer, SNAME("timeout"));
    test_timer->start(0.1);

    SceneTree::get_singleton()->process(0.2);

    Array signal_args;
    signal_args.push_back(Array());

    SIGNAL_CHECK(SNAME("timeout"), signal_args);

    SIGNAL_UNWATCH(test_timer, SNAME("timeout"));
}

----------------------------------------

TITLE: Implementing Overlay Blend Mode in GDScript
DESCRIPTION: Formula for the overlay blend mode used in the VisualShaderNodeColorOp class.

LANGUAGE: gdscript
CODE:
for (int i = 0; i < 3; i++) {
    float base = a[i];
    float blend = b[i];
    if (base < 0.5) {
        result[i] = 2.0 * base * blend;
    } else {
        result[i] = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
    }
}

----------------------------------------

TITLE: Adding Translatable Strings with Context in GDScript
DESCRIPTION: This snippet demonstrates how to add translatable strings with context, plural forms, and comments in GDScript.

LANGUAGE: gdscript
CODE:
# This will add a message with msgid "Test 1", msgctxt "context", msgid_plural "test 1 plurals", and comment "test 1 comment".
ret.append(PackedStringArray(["Test 1", "context", "test 1 plurals", "test 1 comment"]))
# This will add a message with msgid "A test without context" and msgid_plural "plurals".
ret.append(PackedStringArray(["A test without context", "", "plurals"]))
# This will add a message with msgid "Only with context" and msgctxt "a friendly context".
ret.append(PackedStringArray(["Only with context", "a friendly context"]))

----------------------------------------

TITLE: Label3D Drawing Flag Configuration
DESCRIPTION: Setting drawing flags for controlling the 3D label's appearance and behavior

LANGUAGE: gdscript
CODE:
label.set_draw_flag(Label3D.FLAG_SHADED, true)
label.set_draw_flag(Label3D.FLAG_DOUBLE_SIDED, false)
var is_shaded = label.get_draw_flag(Label3D.FLAG_SHADED)

----------------------------------------

TITLE: AudioStreamPlayer2D Properties Table - RST Documentation
DESCRIPTION: RST documentation showing the properties table for AudioStreamPlayer2D, including property types, default values and descriptions.

LANGUAGE: rst
CODE:
Properties
----------

.. table::
   :widths: auto

   +----------------------------------------------------+------------------------------------------------------------------------------+---------------+
   | :ref:`int<class_int>`                              | :ref:`area_mask<class_AudioStreamPlayer2D_property_area_mask>`               | ``1``         |
   +----------------------------------------------------+------------------------------------------------------------------------------+---------------+

----------------------------------------

TITLE: Inverting a Transformation Matrix
DESCRIPTION: Shows how to invert a Transform2D and use it to undo transformations.

LANGUAGE: GDScript
CODE:
var ti = transform.affine_inverse()
var t = ti * transform
# The transform is the identity transform.

var ti = transform.affine_inverse()
position = transform * position
position = ti * position
# The position is the same as before.

LANGUAGE: C#
CODE:
Transform2D ti = Transform.AffineInverse();
Transform2D t = ti * Transform;
// The transform is the identity transform.

Transform2D ti = Transform.AffineInverse();
Position = Transform * Position;
Position = ti * Position;
// The position is the same as before.

----------------------------------------

TITLE: Documentation Table of Contents Structure
DESCRIPTION: reStructuredText directive defining the documentation's table of contents tree structure, organizing content into sections like About, Getting Started, Manual, Contributing, Community and Class Reference

LANGUAGE: reStructuredText
CODE:
.. toctree::
   :hidden:
   :maxdepth: 1
   :caption: About
   :name: sec-general

   about/introduction
   about/list_of_features
   about/system_requirements
   about/faq
   about/complying_with_licenses
   about/release_policy
   about/docs_changelog

----------------------------------------

TITLE: Checking if a Class is Disabled in EditorFeatureProfile
DESCRIPTION: Uses the is_class_disabled method to check if a specific class is disabled in the feature profile.

LANGUAGE: GDScript
CODE:
var profile = EditorFeatureProfile.new()
var is_disabled = profile.is_class_disabled("Sprite2D")

----------------------------------------

TITLE: Setting Target Property in XRFaceModifier3D
DESCRIPTION: Sets the NodePath of the face MeshInstance3D for the XRFaceModifier3D node. The default value is an empty NodePath.

LANGUAGE: GDScript
CODE:
target = NodePath("")

----------------------------------------

TITLE: ResourceImporterScene Class Declaration
DESCRIPTION: RST documentation for the ResourceImporterScene class definition, showing inheritance and primary purpose

LANGUAGE: rst
CODE:
ResourceImporterScene
=====================

**Inherits:** :ref:`ResourceImporter<class_ResourceImporter>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

Imports a glTF, FBX, Collada or Blender 3D scene.

----------------------------------------

TITLE: Getting Real Input Name in VisualShaderNodeInput
DESCRIPTION: Shows usage of the get_input_real_name() method that returns the actual shader language constant name for the current input. For example, converts 'albedo' to 'ALBEDO'.

LANGUAGE: GDScript
CODE:
var real_name = get_input_real_name()  # Returns the actual shader constant name

----------------------------------------

TITLE: IS Operator Type Checking in C#
DESCRIPTION: Shows type checking using the 'is' operator which returns a boolean indicating if the cast is possible.

LANGUAGE: csharp
CODE:
if (GetNode("MySprite") is Sprite2D)
{
    // Yup, it's a Sprite2D!
}

if (null is Sprite2D)
{
    // This block can never happen.
}

----------------------------------------

TITLE: Querying TextureLayered Properties in GDScript
DESCRIPTION: Demonstrates how to retrieve basic properties of a TextureLayered object, including dimensions, format, and layer count.

LANGUAGE: GDScript
CODE:
var texture_layered: TextureLayered

func _ready():
    print("Width: ", texture_layered.get_width())
    print("Height: ", texture_layered.get_height())
    print("Format: ", texture_layered.get_format())
    print("Layers: ", texture_layered.get_layers())
    print("Has Mipmaps: ", texture_layered.has_mipmaps())
    print("Layered Type: ", texture_layered.get_layered_type())

----------------------------------------

TITLE: Installing Godot via package managers
DESCRIPTION: Commands to install Godot using Scoop on Windows or Homebrew on macOS, which automatically adds Godot to the system PATH.

LANGUAGE: shell
CODE:
# Windows (Scoop)
scoop bucket add extras
scoop install godot

# macOS (Homebrew)
brew install godot

----------------------------------------

TITLE: Multiplying Vector2 by float in GDScript
DESCRIPTION: Shows how to multiply each component of a Vector2 by a float value.

LANGUAGE: GDScript
CODE:
print(2.5 * Vector2(1, 3)) # Prints (2.5, 7.5)

----------------------------------------

TITLE: Implementing Compatibility Methods for AStarGrid2D (C++)
DESCRIPTION: Implementation of compatibility methods in a separate .compat.inc file to maintain backwards compatibility for the modified AStarGrid2D methods.

LANGUAGE: cpp
CODE:
TypedArray<Vector2i> AStarGrid2D::_get_id_path_bind_compat_88047(const Vector2i &p_from_id, const Vector2i &p_to_id) {
    return get_id_path(p_from_id, p_to_id, false);
}

Vector<Vector2> AStarGrid2D::_get_point_path_bind_compat_88047(const Vector2i &p_from_id, const Vector2i &p_to_id) {
    return get_point_path(p_from_id, p_to_id, false);
}

void AStarGrid2D::_bind_compatibility_methods() {
    ClassDB::bind_compatibility_method(D_METHOD("get_id_path", "from_id", "to_id"), &AStarGrid2D::_get_id_path_bind_compat_88047);
    ClassDB::bind_compatibility_method(D_METHOD("get_point_path", "from_id", "to_id"), &AStarGrid2D::_get_point_path_bind_compat_88047);
}

----------------------------------------

TITLE: Screen Touch Event Property Example
DESCRIPTION: Properties defined for the InputEventScreenTouch class showing the data structure for touch input events

LANGUAGE: GDScript
CODE:
class InputEventScreenTouch:
    var canceled: bool = false      # Whether touch event was canceled
    var double_tap: bool = false   # Whether touch was a double tap
    var index: int = 0            # Touch index for multi-touch
    var position: Vector2 = Vector2(0, 0)  # Touch position in viewport
    var pressed: bool = false     # Touch press state

----------------------------------------

TITLE: Controlling AnimationNodeTransition in GDScript
DESCRIPTION: Demonstrates how to play a child animation, get the current state name, and get the current state index using an AnimationNodeTransition in GDScript.

LANGUAGE: gdscript
CODE:
# Play child animation connected to "state_2" port.
animation_tree.set("parameters/Transition/transition_request", "state_2")
# Alternative syntax (same result as above).
animation_tree["parameters/Transition/transition_request"] = "state_2"

# Get current state name (read-only).
animation_tree.get("parameters/Transition/current_state")
# Alternative syntax (same result as above).
animation_tree["parameters/Transition/current_state"]

# Get current state index (read-only).
animation_tree.get("parameters/Transition/current_index")
# Alternative syntax (same result as above).
animation_tree["parameters/Transition/current_index"]

----------------------------------------

TITLE: Setting and Getting Operator Property in GDScript
DESCRIPTION: Demonstrates how to set and get the operator property of a VisualShaderNodeIntOp instance, which determines the integer operation to be performed.

LANGUAGE: GDScript
CODE:
# Setting the operator
visual_shader_node_int_op.set_operator(VisualShaderNodeIntOp.OP_ADD)

# Getting the operator
var current_operator = visual_shader_node_int_op.get_operator()

----------------------------------------

TITLE: Writing Unit Tests for Custom Module in C++
DESCRIPTION: Example of writing unit tests for the Summator module using Godot's test framework.

LANGUAGE: C++
CODE:
#ifndef TEST_SUMMATOR_H
#define TEST_SUMMATOR_H

#include "tests/test_macros.h"
#include "modules/summator/summator.h"

namespace TestSummator {

TEST_CASE("[Modules][Summator] Adding numbers") {
    Ref<Summator> s = memnew(Summator);
    CHECK(s->get_total() == 0);

    s->add(10);
    CHECK(s->get_total() == 10);

    s->add(20);
    CHECK(s->get_total() == 30);

    s->add(30);
    CHECK(s->get_total() == 60);

    s->reset();
    CHECK(s->get_total() == 0);
}

} // namespace TestSummator

#endif // TEST_SUMMATOR_H

----------------------------------------

TITLE: Setting Modification Stack - GDScript
DESCRIPTION: Method to set the SkeletonModificationStack2D instance that this modification will hold and execute. Takes a SkeletonModificationStack2D parameter and assigns it to be executed when this modification runs.

LANGUAGE: GDScript
CODE:
set_held_modification_stack(held_modification_stack: SkeletonModificationStack2D) -> void

----------------------------------------

TITLE: Setting and Getting UInt Constant in GDScript
DESCRIPTION: Demonstrates how to set and get the unsigned integer constant value of a VisualShaderNodeUIntConstant node. The constant property represents the state of this node and is translated to 'uint' in the shader language.

LANGUAGE: gdscript
CODE:
# Setting the constant value
node.set_constant(42)

# Getting the constant value
var value = node.get_constant()

----------------------------------------

TITLE: Setting and Getting UInt Constant in GDScript
DESCRIPTION: Demonstrates how to set and get the unsigned integer constant value of a VisualShaderNodeUIntConstant node. The constant property represents the state of this node and is translated to 'uint' in the shader language.

LANGUAGE: gdscript
CODE:
# Setting the constant value
node.set_constant(42)

# Getting the constant value
var value = node.get_constant()

----------------------------------------

TITLE: Setting Mesh LOD Threshold in C#
DESCRIPTION: Sets the mesh LOD threshold on the root viewport to control how aggressive mesh LOD transitions should be. Higher values result in earlier LOD transitions.

LANGUAGE: csharp
CODE:
GetTree().Root.MeshLodThreshold = 4.0f;

----------------------------------------

TITLE: Setting 2D Mode for VisualShaderNodeParticleEmitter in GDScript
DESCRIPTION: Demonstrates how to set the 2D mode property for a VisualShaderNodeParticleEmitter instance. This determines whether the emitter projects particles in 2D or 3D space.

LANGUAGE: GDScript
CODE:
var emitter = VisualShaderNodeParticleEmitter.new()
emitter.set_mode_2d(true)

----------------------------------------

TITLE: TransitionFromTime Enumeration
DESCRIPTION: Enumeration defining when transitions should start relative to the current clip.

LANGUAGE: rst
CODE:
enum **TransitionFromTime**:
    **TRANSITION_FROM_TIME_IMMEDIATE** = "0"
    **TRANSITION_FROM_TIME_NEXT_BEAT** = "1"
    **TRANSITION_FROM_TIME_NEXT_BAR** = "2"
    **TRANSITION_FROM_TIME_END** = "3"

----------------------------------------

TITLE: Operator Property Usage in VisualShaderNodeUIntOp
DESCRIPTION: Property definition for setting and getting the operator type to be applied to two unsigned integer inputs a and b. Supports arithmetic operations like addition and subtraction, as well as bitwise operations.

LANGUAGE: gdscript
CODE:
set_operator(value: Operator)
get_operator() -> Operator

----------------------------------------

TITLE: Operator Property Usage in VisualShaderNodeUIntOp
DESCRIPTION: Property definition for setting and getting the operator type to be applied to two unsigned integer inputs a and b. Supports arithmetic operations like addition and subtraction, as well as bitwise operations.

LANGUAGE: gdscript
CODE:
set_operator(value: Operator)
get_operator() -> Operator

----------------------------------------

TITLE: Initializing Mobile VR Interface in GDScript
DESCRIPTION: Code example showing how to initialize and enable the mobile VR interface in a Godot project. This requires finding the 'Native mobile' interface and enabling XR on the viewport.

LANGUAGE: GDScript
CODE:
var interface = XRServer.find_interface("Native mobile")
if interface and interface.initialize():
    get_viewport().use_xr = true

----------------------------------------

TITLE: RST Documentation for InputEventScreenDrag
DESCRIPTION: ReStructuredText documentation defining the InputEventScreenDrag class, its inheritance chain, properties, and methods for handling screen drag input events in Godot.

LANGUAGE: rst
CODE:
:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/InputEventScreenDrag.xml.

.. _class_InputEventScreenDrag:

InputEventScreenDrag
====================

**Inherits:** :ref:`InputEventFromWindow<class_InputEventFromWindow>` **<** :ref:`InputEvent<class_InputEvent>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

Represents a screen drag event.

----------------------------------------

TITLE: Enabling Default Value Usage in GDScript
DESCRIPTION: Enables the use of the default value for the Vector2 parameter in the shader. When enabled, the shader will use the specified default value.

LANGUAGE: gdscript
CODE:
var vec2_param = VisualShaderNodeVec2Parameter.new()
vec2_param.set_default_value_enabled(true)

----------------------------------------

TITLE: Defining a Custom Object Class in C++
DESCRIPTION: Demonstrates how to create a custom class that inherits from Object using the GDCLASS macro.

LANGUAGE: cpp
CODE:
class CustomObject : public Object {

    GDCLASS(CustomObject, Object); // this is required to inherit
};

----------------------------------------

TITLE: Generating Godot .NET Glue Code
DESCRIPTION: Command to generate C# bindings for the Godot API using a .NET-enabled Godot binary

LANGUAGE: shell
CODE:
<godot_binary> --headless --generate-mono-glue modules/mono/glue

----------------------------------------

TITLE: Setting GradientTexture1D Properties
DESCRIPTION: Examples of property declarations for GradientTexture1D showing the available configuration options including gradient, HDR support, and texture width.

LANGUAGE: GDScript
CODE:
gradient # Gradient resource used to fill the texture
use_hdr = false # Controls HDR support (FORMAT_RGBAF vs FORMAT_RGBA8)
width = 256 # Number of color samples from the gradient

----------------------------------------

TITLE: Retrieving Camera Feeds Method
DESCRIPTION: Method to get an array of all registered camera feeds.

LANGUAGE: GDScript
CODE:
Array[CameraFeed] feeds()

----------------------------------------

TITLE: Implementing Screen Blend Mode in GDScript
DESCRIPTION: Formula for the screen blend mode used in the VisualShaderNodeColorOp class.

LANGUAGE: gdscript
CODE:
result = vec3(1.0) - (vec3(1.0) - a) * (vec3(1.0) - b);

----------------------------------------

TITLE: Formatting Strings in Godot C++
DESCRIPTION: Shows how to use the vformat() function to create formatted strings in Godot's C++ code, similar to C's sprintf().

LANGUAGE: cpp
CODE:
vformat("My name is %s.", "Godette");
vformat("%d bugs on the wall!", 1234);
vformat("Pi is approximately %f.", 3.1416);

vformat("My name is %s.", "Godette").c_str();

----------------------------------------

TITLE: Setting Basic Properties
DESCRIPTION: Example showing how to configure the basic properties of a TwoBoneIK modification

LANGUAGE: gdscript
CODE:
var mod = SkeletonModification2DTwoBoneIK.new()
mod.target_nodepath = NodePath("Target")
mod.flip_bend_direction = false
mod.target_minimum_distance = 10.0
mod.target_maximum_distance = 100.0

----------------------------------------

TITLE: Converting SDF to Screen UV in GLSL
DESCRIPTION: Shader function that converts a signed-distance field position to screen UV coordinates. This is implemented through the sdf_to_screen_uv() function in the shader language.

LANGUAGE: GLSL
CODE:
sdf_to_screen_uv(sdf_pos)

----------------------------------------

TITLE: Reparenting a Button to SplitContainer's Drag Area
DESCRIPTION: Example of how to move a pre-configured Button into the SplitContainer's drag area Control, so it moves along with the split bar.

LANGUAGE: gdscript
CODE:
$BarnacleButton.reparent($SplitContainer.get_drag_area_control())

----------------------------------------

TITLE: Vector Operations Enumeration
DESCRIPTION: Enumerates the available vector operations including addition, subtraction, multiplication, division, modulo, power, max, min, cross product, arctangent, reflection and step operations.

LANGUAGE: GDScript
CODE:
enum Operator {
    OP_ADD = 0,     # Adds two vectors
    OP_SUB = 1,     # Subtracts a vector from a vector
    OP_MUL = 2,     # Multiplies two vectors
    OP_DIV = 3,     # Divides vector by vector
    OP_MOD = 4,     # Returns the remainder of two vectors
    OP_POW = 5,     # Raises first vector to power of second vector
    OP_MAX = 6,     # Returns greater value for each component
    OP_MIN = 7,     # Returns lesser value for each component
    OP_CROSS = 8,   # Calculates cross product
    OP_ATAN2 = 9,   # Returns arc-tangent
    OP_REFLECT = 10, # Returns reflection vector
    OP_STEP = 11,   # Vector step operator
    OP_ENUM_SIZE = 12
}

----------------------------------------

TITLE: Vector Operations Enumeration
DESCRIPTION: Enumerates the available vector operations including addition, subtraction, multiplication, division, modulo, power, max, min, cross product, arctangent, reflection and step operations.

LANGUAGE: GDScript
CODE:
enum Operator {
    OP_ADD = 0,     # Adds two vectors
    OP_SUB = 1,     # Subtracts a vector from a vector
    OP_MUL = 2,     # Multiplies two vectors
    OP_DIV = 3,     # Divides vector by vector
    OP_MOD = 4,     # Returns the remainder of two vectors
    OP_POW = 5,     # Raises first vector to power of second vector
    OP_MAX = 6,     # Returns greater value for each component
    OP_MIN = 7,     # Returns lesser value for each component
    OP_CROSS = 8,   # Calculates cross product
    OP_ATAN2 = 9,   # Returns arc-tangent
    OP_REFLECT = 10, # Returns reflection vector
    OP_STEP = 11,   # Vector step operator
    OP_ENUM_SIZE = 12
}

----------------------------------------

TITLE: Method Declarations for Noise Generation
DESCRIPTION: Lists the core noise generation methods available in the Noise class, including various overloads for different dimensionality and parameter types.

LANGUAGE: RST
CODE:
Methods
-------

Image get_image(width: int, height: int, invert: bool = false, in_3d_space: bool = false, normalize: bool = true) const
Array[Image] get_image_3d(width: int, height: int, depth: int, invert: bool = false, normalize: bool = true) const
float get_noise_1d(x: float) const
float get_noise_2d(x: float, y: float) const
float get_noise_2dv(v: Vector2) const
float get_noise_3d(x: float, y: float, z: float) const
float get_noise_3dv(v: Vector3) const

----------------------------------------

TITLE: Basic Integer Operations in GDScript
DESCRIPTION: Demonstrates basic integer assignment and truncation behavior when converting from float values.

LANGUAGE: gdscript
CODE:
var x: int = 1 # x is 1
x = 4.2 # x is 4, because 4.2 gets truncated
var max_int = 9223372036854775807 # Biggest value an int can store
max_int += 1 # max_int is -9223372036854775808, because it wrapped around

----------------------------------------

TITLE: InputEventAction Property Definitions
DESCRIPTION: Defines the key properties of the InputEventAction class including action name, event index, pressed state, and strength values.

LANGUAGE: RST
CODE:
+-------------------------------------+-----------------------------------------------------------------+-----------+
| :ref:`StringName<class_StringName>` | :ref:`action<class_InputEventAction_property_action>`           | ``&""``   |
+-------------------------------------+-----------------------------------------------------------------+-----------+
| :ref:`int<class_int>`               | :ref:`event_index<class_InputEventAction_property_event_index>` | ``-1``    |
+-------------------------------------+-----------------------------------------------------------------+-----------+
| :ref:`bool<class_bool>`             | :ref:`pressed<class_InputEventAction_property_pressed>`         | ``false`` |
+-------------------------------------+-----------------------------------------------------------------+-----------+
| :ref:`float<class_float>`           | :ref:`strength<class_InputEventAction_property_strength>`       | ``1.0``   |
+-------------------------------------+-----------------------------------------------------------------+-----------+

----------------------------------------

TITLE: Retrieving Scene Path from TileMapLayer in GDScript
DESCRIPTION: This code snippet demonstrates how to find the scene path for a given tile in a TileMapLayer using GDScript. It checks if the source is a TileSetScenesCollectionSource and retrieves the associated PackedScene.

LANGUAGE: gdscript
CODE:
var source_id = tile_map_layer.get_cell_source_id(Vector2i(x, y))
if source_id > -1:
    var scene_source = tile_map_layer.tile_set.get_source(source_id)
    if scene_source is TileSetScenesCollectionSource:
        var alt_id = tile_map_layer.get_cell_alternative_tile(Vector2i(x, y))
        # The assigned PackedScene.
        var scene = scene_source.get_scene_tile_scene(alt_id)

----------------------------------------

TITLE: Installing Android SDK Components
DESCRIPTION: Commands to accept SDK licenses and install required Android SDK components using sdkmanager

LANGUAGE: shell
CODE:
cmdline-tools/latest/bin/sdkmanager --sdk_root=<android_sdk_path> --licenses

cmdline-tools/latest/bin/sdkmanager --sdk_root=<android_sdk_path> "platform-tools" "build-tools;34.0.0" "platforms;android-34" "cmdline-tools;latest" "cmake;3.10.2.4988404" "ndk;23.2.8568313"

----------------------------------------

TITLE: Implementing Difference Blend Mode in GDScript
DESCRIPTION: Formula for the difference blend mode used in the VisualShaderNodeColorOp class.

LANGUAGE: gdscript
CODE:
result = abs(a - b);

----------------------------------------

TITLE: Loading X509 Certificate from String
DESCRIPTION: Loads an X509 certificate from a string containing the certificate data. Returns an Error code indicating success or failure.

LANGUAGE: GDScript
CODE:
load_from_string(string: String) -> Error

----------------------------------------

TITLE: Running Local Web Server for Testing
DESCRIPTION: Command to run the included Python script for hosting a local web server to test the web editor.

LANGUAGE: shell
CODE:
python platform/web/serve.py

----------------------------------------

TITLE: Setting Vector4 Constant Properties
DESCRIPTION: Property definitions for the VisualShaderNodeVec4Constant class, showing the constant property that stores a Quaternion value defaulting to (0,0,0,1).

LANGUAGE: gdscript
CODE:
constant = Quaternion(0, 0, 0, 1)

func set_constant(value: Quaternion) -> void:
    constant = value

func get_constant() -> Quaternion:
    return constant

----------------------------------------

TITLE: Playing Audio Stream
DESCRIPTION: Method for playing an audio stream with customizable parameters including offset, volume, pitch scale, playback type, and bus.

LANGUAGE: GDScript
CODE:
play_stream(stream: AudioStream, from_offset: float = 0, volume_db: float = 0, pitch_scale: float = 1.0, playback_type: PlaybackType = 0, bus: StringName = &"Master")

----------------------------------------

TITLE: Starting Compression in StreamPeerGZIP
DESCRIPTION: Initializes the StreamPeerGZIP for compression. The 'use_deflate' parameter determines whether to use deflate instead of GZIP, and 'buffer_size' sets the internal buffer size.

LANGUAGE: GDScript
CODE:
start_compression(use_deflate: bool = false, buffer_size: int = 65535) -> Error

----------------------------------------

TITLE: Connecting Signals in Godot C++
DESCRIPTION: Demonstrates how to connect signals to methods in Godot C++.

LANGUAGE: cpp
CODE:
obj->connect(<signal>, target_instance, target_method)
// for example:
obj->connect("enter_tree", this, "_node_entered_tree")

----------------------------------------

TITLE: Retrieving Occluder3D Vertices in GDScript
DESCRIPTION: This method returns the vertex positions of the occluder shape as a PackedVector3Array.

LANGUAGE: GDScript
CODE:
PackedVector3Array get_vertices() const

----------------------------------------

TITLE: Accessing Object ID in GDScript
DESCRIPTION: Demonstrates how to get and set the object_id property of an EncodedObjectAsID instance. This property stores the internal identifier of an Object instance.

LANGUAGE: gdscript
CODE:
# Getting the object ID
var id = encoded_object.get_object_id()

# Setting the object ID
encoded_object.set_object_id(some_object.get_instance_id())

----------------------------------------

TITLE: Accessing Object ID in GDScript
DESCRIPTION: Demonstrates how to get and set the object_id property of an EncodedObjectAsID instance. This property stores the internal identifier of an Object instance.

LANGUAGE: gdscript
CODE:
# Getting the object ID
var id = encoded_object.get_object_id()

# Setting the object ID
encoded_object.set_object_id(some_object.get_instance_id())

----------------------------------------

TITLE: Configuring Web Crawler Rules in robots.txt
DESCRIPTION: Basic robots.txt configuration that allows all web crawlers to access the site and provides the location of the XML sitemap.

LANGUAGE: txt
CODE:
user-agent: *

sitemap: https://docs.godotengine.org/sitemap.xml

----------------------------------------

TITLE: Setting and Getting Default Value in VisualShaderNodeBooleanParameter
DESCRIPTION: These methods allow setting and retrieving the default value of the boolean parameter in the visual shader.

LANGUAGE: gdscript
CODE:
set_default_value(value: bool)
get_default_value() -> bool

----------------------------------------

TITLE: Float Operations in Visual Shader
DESCRIPTION: Defines various mathematical operations that can be performed on two floating-point inputs (a and b) within a visual shader. Includes basic arithmetic, comparison, and special mathematical functions.

LANGUAGE: GDScript
CODE:
enum Operator {
    OP_ADD = 0,     # a + b
    OP_SUB = 1,     # a - b
    OP_MUL = 2,     # a * b
    OP_DIV = 3,     # a / b
    OP_MOD = 4,     # mod(a, b)
    OP_POW = 5,     # pow(a, b)
    OP_MAX = 6,     # max(a, b)
    OP_MIN = 7,     # min(a, b)
    OP_ATAN2 = 8,   # atan(a, b)
    OP_STEP = 9,    # step(a, b)
    OP_ENUM_SIZE = 10
}

----------------------------------------

TITLE: Implementing Camera Transform Method in GDExtension
DESCRIPTION: Method to be implemented in GDExtension to return the camera Transform3D.

LANGUAGE: GDScript
CODE:
Transform3D _get_cam_transform() virtual const

----------------------------------------

TITLE: Rectangle Expansion Example in GDScript
DESCRIPTION: Shows how to expand a rectangle to include a point using the expand() method.

LANGUAGE: gdscript
CODE:
var rect = Rect2(0, 0, 5, 2)

rect = rect.expand(Vector2(10, 0)) # rect is Rect2(0, 0, 10, 2)
rect = rect.expand(Vector2(-5, 5)) # rect is Rect2(-5, 0, 15, 5)

----------------------------------------

TITLE: Example of Disallowed Auto Keyword Usage in C++
DESCRIPTION: Demonstrates why the auto keyword is disallowed in Godot's codebase. Shows both a simple and complex case to illustrate how auto can make code confusing to review.

LANGUAGE: cpp
CODE:
// Not so confusing...
auto button = memnew(Button);

// ...but what about this?
auto result = EditorNode::get_singleton()->get_complex_result();

----------------------------------------

TITLE: Tile Rotation Enum - GDScript Example
DESCRIPTION: Demonstrates how to combine transformations to achieve different rotation angles

LANGUAGE: gdscript
CODE:
enum TileTransform {
    ROTATE_0 = 0,
    ROTATE_90 = TileSetAtlasSource.TRANSFORM_TRANSPOSE | TileSetAtlasSource.TRANSFORM_FLIP_H,
    ROTATE_180 = TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_FLIP_V,
    ROTATE_270 = TileSetAtlasSource.TRANSFORM_TRANSPOSE | TileSetAtlasSource.TRANSFORM_FLIP_V,
}

----------------------------------------

TITLE: Cloning Godot Master Branch
DESCRIPTION: Command to clone the latest development version (master branch) of Godot engine source code from GitHub using Git. Includes optional shallow clone argument.

LANGUAGE: shell
CODE:
git clone https://github.com/godotengine/godot.git
# You can add the --depth 1 argument to omit the commit history (shallow clone).
# A shallow clone is faster, but not all Git operations (like blame) will work.

----------------------------------------

TITLE: Fixing Xcode Command Line Tools
DESCRIPTION: Commands to reinstall Xcode command line tools when encountering the 'cstdint file not found' error.

LANGUAGE: shell
CODE:
sudo rm -rf /Library/Developer/CommandLineTools
sudo xcode-select --install

----------------------------------------

TITLE: Implementing Dodge Blend Mode in GDScript
DESCRIPTION: Formula for the dodge blend mode used in the VisualShaderNodeColorOp class.

LANGUAGE: gdscript
CODE:
result = a / (vec3(1.0) - b);

----------------------------------------

TITLE: Adding Collision Elements
DESCRIPTION: Demonstrates adding collision segments and triangles for editor picking and selection of the gizmo.

LANGUAGE: GDScript
CODE:
add_collision_segments(segments: PackedVector3Array)
add_collision_triangles(triangles: TriangleMesh)

----------------------------------------

TITLE: Shape2D Drawing
DESCRIPTION: Method to draw the shape on a CanvasItem with specified color.

LANGUAGE: GDScript
CODE:
draw(canvas_item: RID, color: Color) -> void

----------------------------------------

TITLE: Example JSON Resource Usage in GDScript
DESCRIPTION: Demonstrates how to load and use a custom JSON resource in GDScript.

LANGUAGE: gdscript
CODE:
extends Node

@onready var json_resource = load("res://demo.json")

func _ready():
    print(json_resource.get_dict())

----------------------------------------

TITLE: Setting RemoteTransform3D Properties
DESCRIPTION: Example showing how to configure the main properties of a RemoteTransform3D node in Godot Engine

LANGUAGE: GDScript
CODE:
var remote_transform = RemoteTransform3D.new()
remote_transform.remote_path = NodePath("../TargetNode")
remote_transform.update_position = true
remote_transform.update_rotation = true
remote_transform.update_scale = true
remote_transform.use_global_coordinates = true

----------------------------------------

TITLE: Class Definition - OpenXRHapticBase in RST
DESCRIPTION: Defines the OpenXRHapticBase class structure, showing inheritance from Resource and relationship to OpenXRHapticVibration subclass. This base class provides foundational support for haptic feedback resources in OpenXR.

LANGUAGE: rst
CODE:
OpenXRHapticBase
================

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`OpenXRHapticVibration<class_OpenXRHapticVibration>`

OpenXR Haptic feedback base class.

----------------------------------------

TITLE: Defining VisualShaderNodeCubemapParameter Class in GDScript
DESCRIPTION: This snippet shows the class definition for VisualShaderNodeCubemapParameter, which inherits from VisualShaderNodeTextureParameter. It represents a Cubemap parameter node in the visual shader graph.

LANGUAGE: GDScript
CODE:
class_name VisualShaderNodeCubemapParameter
extends VisualShaderNodeTextureParameter

----------------------------------------

TITLE: Setting Animation Frame and Progress Example - GDScript
DESCRIPTION: Example showing how to change an animation while preserving the current frame and progress state of the animated sprite.

LANGUAGE: gdscript
CODE:
var current_frame = animated_sprite.get_frame()
var current_progress = animated_sprite.get_frame_progress()
animated_sprite.play("walk_another_skin")
animated_sprite.set_frame_and_progress(current_frame, current_progress)

----------------------------------------

TITLE: Creating Twist Motion in GLSL Shader
DESCRIPTION: Implements a twisting motion along the fish's spine using a rotation matrix.

LANGUAGE: glsl
CODE:
float twist_angle = cos(time + body) * 0.3 * twist;
mat2 twist_matrix = mat2(vec2(cos(twist_angle), -sin(twist_angle)), vec2(sin(twist_angle), cos(twist_angle)));
VERTEX.xy = twist_matrix * VERTEX.xy;

----------------------------------------

TITLE: RenderingDevice Implementation - Vulkan
DESCRIPTION: Implementation of the RenderingDevice abstraction for the Vulkan graphics API.

LANGUAGE: C++
CODE:
drivers/vulkan/rendering_device_driver_vulkan.cpp

----------------------------------------

TITLE: SpringBoneCollision3D Skeleton Getter Method
DESCRIPTION: Method to retrieve the parent Skeleton3D node of the parent SpringBoneSimulator3D if one exists.

LANGUAGE: GDScript
CODE:
func get_skeleton() -> Skeleton3D:
    # Returns parent Skeleton3D node if found
    pass

----------------------------------------

TITLE: Compiling iOS Debug Template
DESCRIPTION: SCons command to compile a debug build of the iOS export template with bundle generation.

LANGUAGE: shell
CODE:
scons platform=ios target=template_debug generate_bundle=yes

----------------------------------------

TITLE: Renaming Resource in Preloader in GDScript
DESCRIPTION: Changes the name of an existing resource in the preloader from one name to another.

LANGUAGE: GDScript
CODE:
rename_resource(name: StringName, newname: StringName)

----------------------------------------

TITLE: Implementing AudioStreamPlaybackMyTone Class in C++
DESCRIPTION: Defines the AudioStreamPlaybackMyTone class, which is responsible for playing back the custom audio stream. It includes methods for starting, stopping, and mixing audio data.

LANGUAGE: C++
CODE:
#include "core/reference.h"
#include "core/resource.h"
#include "servers/audio/audio_stream.h"

class AudioStreamPlaybackMyTone : public AudioStreamPlayback {
    GDCLASS(AudioStreamPlaybackMyTone, AudioStreamPlayback)
    friend class AudioStreamMyTone;

private:
    enum {
        PCM_BUFFER_SIZE = 4096
    };
    enum {
        MIX_FRAC_BITS = 13,
        MIX_FRAC_LEN = (1 << MIX_FRAC_BITS),
        MIX_FRAC_MASK = MIX_FRAC_LEN - 1,
    };
    void *pcm_buffer;
    Ref<AudioStreamMyTone> base;
    bool active;

public:
    virtual void start(float p_from_pos = 0.0);
    virtual void stop();
    virtual bool is_playing() const;
    virtual int get_loop_count() const; // times it looped
    virtual float get_playback_position() const;
    virtual void seek(float p_time);
    virtual void mix(AudioFrame *p_buffer, float p_rate_scale, int p_frames);
    virtual float get_length() const; // if supported, otherwise return 0
    AudioStreamPlaybackMyTone();
    ~AudioStreamPlaybackMyTone();
};

----------------------------------------

TITLE: Initializing GDScriptSyntaxHighlighter in GDScript
DESCRIPTION: Creates a new TextEdit node, initializes a GDScriptSyntaxHighlighter, and assigns it to the TextEdit node.

LANGUAGE: gdscript
CODE:
var code_preview = TextEdit.new()
var highlighter = GDScriptSyntaxHighlighter.new()
code_preview.syntax_highlighter = highlighter

----------------------------------------

TITLE: Setting Joint Tracking Flags
DESCRIPTION: Sets tracking validity flags for a specific joint

LANGUAGE: GDScript
CODE:
xr_body_tracker.set_joint_flags(XRBodyTracker.JOINT_HEAD, XRBodyTracker.JOINT_FLAG_POSITION_VALID | XRBodyTracker.JOINT_FLAG_ORIENTATION_VALID)

----------------------------------------

TITLE: Shape2D Contact Points Calculation
DESCRIPTION: Method to get contact points between two colliding Shape2D instances.

LANGUAGE: GDScript
CODE:
collide_and_get_contacts(local_xform: Transform2D, with_shape: Shape2D, shape_xform: Transform2D) -> PackedVector2Array

----------------------------------------

TITLE: Including Compatibility File in AStarGrid2D Implementation (C++)
DESCRIPTION: Example of including the compatibility file in the main implementation file for AStarGrid2D to ensure the compatibility methods are available.

LANGUAGE: cpp
CODE:
#include "a_star_grid_2d.h"
#include "a_star_grid_2d.compat.inc"

#include "core/variant/typed_array.h"

----------------------------------------

TITLE: Starting Physics Simulation for Physical Bones in GDScript
DESCRIPTION: Initiates physics simulation for PhysicalBone3D nodes in the Skeleton. Optionally accepts an array of bone names to simulate specific bones.

LANGUAGE: GDScript
CODE:
physical_bones_start_simulation(bones: Array[StringName] = []) -> void

----------------------------------------

TITLE: Converting Screen UV to SDF in Visual Shader
DESCRIPTION: Translates to 'screen_uv_to_sdf(uv)' in the shader language. If the UV port isn't connected, 'SCREEN_UV' is used as the default input.

LANGUAGE: gdshader
CODE:
screen_uv_to_sdf(uv)

----------------------------------------

TITLE: Configuring Parallax2D Properties
DESCRIPTION: Example showing the key property configurations for a Parallax2D node, including scroll scale, autoscroll, and repeat settings. These properties control how the parallax background moves relative to the camera and how textures are repeated.

LANGUAGE: GDScript
CODE:
var parallax = Parallax2D.new()
parallax.scroll_scale = Vector2(0.5, 0.5)  # Scroll at half camera speed
parallax.autoscroll = Vector2(100, 0)     # Auto-scroll horizontally
parallax.repeat_size = Vector2(1024, 0)   # Repeat horizontally every 1024 pixels
parallax.follow_viewport = true           # Follow the viewport's position
parallax.ignore_camera_scroll = false     # Respect camera movement

----------------------------------------

TITLE: Defining Properties in Godot C++
DESCRIPTION: Shows how to define properties for Objects, including specifying property information and usage flags.

LANGUAGE: cpp
CODE:
PropertyInfo(Variant::INT, "amount", PROPERTY_HINT_RANGE, "0,49,1", PROPERTY_USAGE_EDITOR)

LANGUAGE: cpp
CODE:
PropertyInfo(Variant::STRING, "modes", PROPERTY_HINT_ENUM, "Enabled,Disabled,Turbo")

LANGUAGE: cpp
CODE:
ADD_PROPERTY(PropertyInfo(Variant::INT, "amount"), "set_amount", "get_amount")

----------------------------------------

TITLE: Sprite3D Property Example Frame Coordinates
DESCRIPTION: Example showing how to set frame coordinates for a sprite sheet using Vector2i, specifying the exact row and column of the frame to display.

LANGUAGE: GDScript
CODE:
sprite.frame_coords = Vector2i(0, 0)

----------------------------------------

TITLE: Checking .NET SDK Version
DESCRIPTION: Command to verify installed .NET SDK versions on the system

LANGUAGE: shell
CODE:
dotnet --info

----------------------------------------

TITLE: Creating TTS Header File in C++ for Godot Module
DESCRIPTION: Defines the TTS class header file for the text-to-speech module. It includes necessary Godot headers and declares the class methods.

LANGUAGE: cpp
CODE:
#ifndef GODOT_TTS_H
#define GODOT_TTS_H

#include "core/object/ref_counted.h"

class TTS : public RefCounted {
    GDCLASS(TTS, RefCounted);

protected:
    static void _bind_methods();

public:
    bool say_text(String p_txt);

    TTS();
};

#endif // GODOT_TTS_H

----------------------------------------

TITLE: Implementing File Handler for MovieWriter
DESCRIPTION: Example implementation of _handles_file() virtual method to specify which file extensions the MovieWriter can process. This example checks for .mkv extension case-insensitively.

LANGUAGE: GDScript
CODE:
func _handles_file(path):
    # Allows specifying an output file with a `.mkv` file extension (case-insensitive),
    # either in the Project Settings or with the `--write-movie <path>` command line argument.
    return path.get_extension().to_lower() == "mkv"

----------------------------------------

TITLE: Getting Resource List in GDScript
DESCRIPTION: Returns an array containing the names of all resources stored in the preloader.

LANGUAGE: GDScript
CODE:
get_resource_list() -> PackedStringArray

----------------------------------------

TITLE: Matching Input Events in GDScript
DESCRIPTION: Illustrates how to check if a given InputEvent matches any event in the Shortcut.

LANGUAGE: GDScript
CODE:
var shortcut = Shortcut.new()
var input_event = InputEvent.new()
if shortcut.matches_event(input_event):
    print("Event matches the shortcut")

----------------------------------------

TITLE: Linux/BSD Build Example
DESCRIPTION: Complete set of commands for building Godot with .NET support on Linux/BSD systems

LANGUAGE: shell
CODE:
scons platform=linuxbsd target=editor module_mono_enabled=yes
scons platform=linuxbsd target=template_debug module_mono_enabled=yes
scons platform=linuxbsd target=template_release module_mono_enabled=yes

bin/godot.linuxbsd.editor.x86_64.mono --headless --generate-mono-glue modules/mono/glue
./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=linuxbsd

----------------------------------------

TITLE: Converting Between Local and Canvas Coordinates in C#
DESCRIPTION: Shows the C# equivalent of converting between a CanvasItem's local coordinates and canvas coordinates using global transform methods.

LANGUAGE: csharp
CODE:
// Called from a CanvasItem.
canvasPos = GetGlobalTransform() * localPos;
localPos = GetGlobalTransform().AffineInverse() * canvasPos;

----------------------------------------

TITLE: Defining Custom Time Variable in GLSL Shader
DESCRIPTION: Creates a custom time variable based on the built-in TIME uniform, scaled by a user-defined factor.

LANGUAGE: glsl
CODE:
float time = TIME * time_scale;

----------------------------------------

TITLE: Creating Register Types Header for Godot Module
DESCRIPTION: Declares the initialization and uninitialization functions for the TTS module.

LANGUAGE: cpp
CODE:
void initialize_tts_module(ModuleInitializationLevel p_level);
void uninitialize_tts_module(ModuleInitializationLevel p_level);
/* yes, the word in the middle must be the same as the module folder name */

----------------------------------------

TITLE: Creating Timer with Await in C#
DESCRIPTION: Example showing how to create a one-shot timer with await syntax in C#

LANGUAGE: csharp
CODE:
public async Task SomeFunction()
{
    GD.Print("start");
    await ToSignal(GetTree().CreateTimer(1.0f), SceneTreeTimer.SignalName.Timeout);
    GD.Print("end");
}

----------------------------------------

TITLE: Building cctools for iOS cross-compilation
DESCRIPTION: Commands to clone the cctools-port repository and build the iOS toolchain. This process creates the necessary tools for cross-compiling iOS binaries on Linux.

LANGUAGE: shell
CODE:
git clone https://github.com/tpoechtrager/cctools-port.git
cd cctools-port/usage_examples/ios_toolchain
./build.sh /path/iPhoneOS${IOS_SDK_VERSION}.sdk.tar.xz arm64

----------------------------------------

TITLE: Getting CollisionShape3D from Area Shape Index
DESCRIPTION: Example showing how to get the CollisionShape3D node from a shape index during an area shape entered event.

LANGUAGE: gdscript
CODE:
var other_shape_owner = area.shape_find_owner(area_shape_index)
var other_shape_node = area.shape_owner_get_owner(other_shape_owner)

var local_shape_owner = shape_find_owner(local_shape_index)
var local_shape_node = shape_owner_get_owner(local_shape_owner)

----------------------------------------

TITLE: ReStructuredText Feature Documentation
DESCRIPTION: ReStructuredText document detailing Godot Engine's features including platforms, rendering capabilities, tools, and more

LANGUAGE: RST
CODE:
:allow_comments: False

.. _doc_list_of_features:

List of features
================

This page aims to list **all** features currently supported by Godot.

----------------------------------------

TITLE: Creating Placeholder Texture2DArray Method
DESCRIPTION: This method creates and returns a placeholder version of the Texture2DArray resource as a PlaceholderTexture2DArray object. It is a const method that has no side effects on the instance's member variables.

LANGUAGE: GDScript
CODE:
Resource create_placeholder() const

----------------------------------------

TITLE: Compiling Godot for Debugging in CLion (Bash)
DESCRIPTION: This command compiles Godot with debug symbols for use in CLion. It uses SCons with the dev_build option set to yes.

LANGUAGE: bash
CODE:
scons dev_build=yes

----------------------------------------

TITLE: Checking for Valid Events in GDScript
DESCRIPTION: Shows how to check if a Shortcut object has any valid InputEvents.

LANGUAGE: GDScript
CODE:
var shortcut = Shortcut.new()
if shortcut.has_valid_event():
    print("Shortcut has a valid event")

----------------------------------------

TITLE: Disabling Advanced Text Server in Godot
DESCRIPTION: Replaces the advanced text server with a lightweight fallback version, reducing binary size at the cost of some text rendering features.

LANGUAGE: shell
CODE:
scons target=template_release module_text_server_adv_enabled=no module_text_server_fb_enabled=yes

----------------------------------------

TITLE: Setting Sprite2D Properties for Texture Repetition
DESCRIPTION: Configuration for repeating textures in a Sprite2D node to cover larger viewport areas.

LANGUAGE: gdscript
CODE:
# On Sprite2D node:
texture_repeat = CanvasItem.TEXTURE_REPEAT_ENABLED
region_enabled = true
region_rect = Rect2(0, 0, texture.get_width() * 2, texture.get_height())

----------------------------------------

TITLE: Shader SDF Normal Texture Lookup
DESCRIPTION: Performs a signed-distance field normal texture lookup operation. This translates to texture_sdf_normal(sdf_pos) in the shader language.

LANGUAGE: shader
CODE:
texture_sdf_normal(sdf_pos)

----------------------------------------

TITLE: Setting Encryption Key as Environment Variable (Linux/macOS)
DESCRIPTION: This command sets the generated encryption key as an environment variable in Linux or macOS terminals.

LANGUAGE: shell
CODE:
export SCRIPT_AES256_ENCRYPTION_KEY="your_generated_key"

----------------------------------------

TITLE: ResourceUID Constants
DESCRIPTION: Definition of the INVALID_ID constant used to represent invalid resource UIDs.

LANGUAGE: GDScript
CODE:
INVALID_ID = -1  # Invalid UID value, text representation is "uid://<invalid>"

----------------------------------------

TITLE: Generating Godot Solution File with SCons
DESCRIPTION: Command to generate a Visual Studio solution file for the Godot engine project using SCons. It includes debug symbols for development builds.

LANGUAGE: batch
CODE:
scons platform=windows vsproj=yes dev_build=yes

----------------------------------------

TITLE: Adding Image to RST Documentation
DESCRIPTION: RST code snippet for including an image in a documentation page. The image should be stored in an 'img' folder adjacent to the RST file.

LANGUAGE: rst
CODE:
.. image:: img/documentation_image.webp

----------------------------------------

TITLE: Handling UDP Socket Wait in GDScript and C#
DESCRIPTION: Demonstrates how to use the wait() method and implement a way to interrupt it using a specific packet message in both GDScript and C#.

LANGUAGE: gdscript
CODE:
socket = PacketPeerUDP.new()
# Server
socket.set_dest_address("127.0.0.1", 789)
socket.put_packet("Time to stop".to_ascii_buffer())

# Client
while socket.wait() == OK:
    var data = socket.get_packet().get_string_from_ascii()
    if data == "Time to stop":
        return

LANGUAGE: csharp
CODE:
var socket = new PacketPeerUdp();
// Server
socket.SetDestAddress("127.0.0.1", 789);
socket.PutPacket("Time to stop".ToAsciiBuffer());

// Client
while (socket.Wait() == OK)
{
    string data = socket.GetPacket().GetStringFromASCII();
    if (data == "Time to stop")
    {
        return;
    }
}

----------------------------------------

TITLE: Internationalizing Strings in Godot C++
DESCRIPTION: Shows how to use TTR() and RTR() macros for internationalizing strings in Godot's C++ code, including usage with vformat() for placeholders.

LANGUAGE: cpp
CODE:
TTR("Exit the editor?");

String file_path = "example.txt";
vformat(TTR("Couldn't open \"%s\" for reading."), file_path);

----------------------------------------

TITLE: Initialize Reference Counter
DESCRIPTION: Method to initialize the internal reference counter. Returns a boolean indicating if initialization was successful.

LANGUAGE: GDScript
CODE:
init_ref()

----------------------------------------

TITLE: Setting up iOS toolchain environment
DESCRIPTION: Commands to copy the built toolchain to a designated directory and set up the necessary environment variable for iOS compilation.

LANGUAGE: shell
CODE:
mkdir -p "$HOME/iostoolchain/usr"
cp -r target/bin "$HOME/iostoolchain/usr/"

export OSXCROSS_IOS="anything"

----------------------------------------

TITLE: Initializing Surface Array - C#
DESCRIPTION: Creates and initializes the basic surface array structure needed for an ArrayMesh in C#

LANGUAGE: csharp
CODE:
Godot.Collections.Array surfaceArray = [];
surfaceArray.Resize((int)Mesh.ArrayType.Max);

List<Vector3> verts = [];
List<Vector2> uvs = [];
List<Vector3> normals = [];
List<int> indices = [];

----------------------------------------

TITLE: Container Child Fitting Method
DESCRIPTION: Helper method for fitting a child control within a specified rectangular area. Used when implementing custom container classes.

LANGUAGE: GDScript
CODE:
void fit_child_in_rect(Control child, Rect2 rect)

----------------------------------------

TITLE: Cleaning Android Build Files
DESCRIPTION: Gradle commands to clean generated export templates on different operating systems

LANGUAGE: shell
CODE:
cd platform/android/java
# On Windows
.\gradlew clean
# On Linux and macOS
./gradlew clean

----------------------------------------

TITLE: Implementing View Eye Offset Method in GDExtension
DESCRIPTION: Method to be implemented in GDExtension to return the eye offset for a given view.

LANGUAGE: GDScript
CODE:
Vector3 _get_view_eye_offset(view: int) virtual const

----------------------------------------

TITLE: Installing Vulkan Validation Layers on Debian/Ubuntu
DESCRIPTION: Package installation command for Vulkan validation layers on Debian/Ubuntu systems using apt

LANGUAGE: shell
CODE:
apt install vulkan-validationlayers

----------------------------------------

TITLE: Setting Ease Type for MethodTweener in GDScript
DESCRIPTION: Sets the easing type for the MethodTweener from the EaseType enum. Returns the MethodTweener instance for method chaining.

LANGUAGE: GDScript
CODE:
set_ease(ease: Tween.EaseType) -> MethodTweener

----------------------------------------

TITLE: RegExMatch Property Declarations
DESCRIPTION: Core properties of the RegExMatch class including names dictionary for named groups, strings array for captures, and subject string for source text.

LANGUAGE: GDScript
CODE:
var names: Dictionary = {}
var strings: PackedStringArray = PackedStringArray()
var subject: String = ""

----------------------------------------

TITLE: Configuring Module Build in Python
DESCRIPTION: SCons build configuration file (SCsub) and module configuration file (config.py) for compiling the custom module.

LANGUAGE: Python
CODE:
# SCsub
Import('env')
env.add_source_files(env.modules_sources, "*.cpp")

# config.py
def can_build(env, platform):
    return True

def configure(env):
    pass

----------------------------------------

TITLE: Stopping Physics Simulation for Physical Bones in GDScript
DESCRIPTION: Stops the physics simulation for all PhysicalBone3D nodes in the Skeleton.

LANGUAGE: GDScript
CODE:
physical_bones_stop_simulation() -> void

----------------------------------------

TITLE: Packing iOS SDK for cctools
DESCRIPTION: Command to pack the extracted iOS SDK into a compressed tar archive for use with cctools. This step is necessary for the toolchain build process.

LANGUAGE: shell
CODE:
cd iPhoneSDK
tar -cf - * | xz -9 -c - > iPhoneOS${IOS_SDK_VERSION}.sdk.tar.xz

----------------------------------------

TITLE: Mesh Saving Implementation
DESCRIPTION: Code for saving the generated ArrayMesh to a resource file

LANGUAGE: gdscript
CODE:
ResourceSaver.save(mesh, "res://sphere.tres", ResourceSaver.FLAG_COMPRESS)

LANGUAGE: csharp
CODE:
ResourceSaver.Save(Mesh, "res://sphere.tres", ResourceSaver.SaverFlags.Compress);

----------------------------------------

TITLE: Implementing Darken Blend Mode in GDScript
DESCRIPTION: Formula for the darken blend mode used in the VisualShaderNodeColorOp class.

LANGUAGE: gdscript
CODE:
result = min(a, b);

----------------------------------------

TITLE: Compiling Android Dev Templates
DESCRIPTION: Optional SCons commands for building development export templates for Android with ARM32 and ARM64 architectures

LANGUAGE: shell
CODE:
scons platform=android target=template_debug arch=arm32 dev_build=yes
scons platform=android target=template_debug arch=arm64 dev_build=yes generate_apk=yes

----------------------------------------

TITLE: Setting Properties in ProceduralSkyMaterial
DESCRIPTION: Example of property access and modification for ProceduralSkyMaterial. The class allows configuring sky colors, ground colors, sun parameters and other visual effects through properties.

LANGUAGE: GDScript
CODE:
var sky = ProceduralSkyMaterial.new()
sky.sky_top_color = Color(0.385, 0.454, 0.55, 1)
sky.sky_horizon_color = Color(0.6463, 0.6558, 0.6708, 1)
sky.ground_bottom_color = Color(0.2, 0.169, 0.133, 1)
sky.sun_angle_max = 30.0
sky.use_debanding = true

----------------------------------------

TITLE: Building Godot with Debug Symbols
DESCRIPTION: SCons command for compiling Godot with debugging symbols in production mode for profiling.

LANGUAGE: bash
CODE:
production=yes debug_symbols=yes

----------------------------------------

TITLE: Setting and Getting VisualShaderNodeSample3D Source Property
DESCRIPTION: Demonstrates how to set and get the 'source' property of a VisualShaderNodeSample3D node, which determines the input source type.

LANGUAGE: gdscript
CODE:
# Setting the source
set_source(Source.SOURCE_TEXTURE)

# Getting the source
var current_source = get_source()

----------------------------------------

TITLE: Saving Resources in Godot C++
DESCRIPTION: Demonstrates how to save resources using the ResourceSaver API in Godot C++.

LANGUAGE: cpp
CODE:
ResourceSaver::save("res://someresource.res", instance)

----------------------------------------

TITLE: PacketPeerExtension Virtual Methods
DESCRIPTION: Core virtual methods that should be implemented when extending the PacketPeer class. These methods handle packet counting, size limits, and packet transmission.

LANGUAGE: GDScript
CODE:
func _get_available_packet_count() -> int:
    # Returns the number of packets available for reading
    pass

func _get_max_packet_size() -> int:
    # Returns the maximum allowed packet size
    pass

func _get_packet(r_buffer: const uint8_t**, r_buffer_size: int32_t*) -> Error:
    # Retrieves a packet from the peer
    pass

func _put_packet(p_buffer: const uint8_t*, p_buffer_size: int) -> Error:
    # Sends a packet to the peer
    pass

----------------------------------------

TITLE: Creating Symbolic Link for Godot Binary in Xcode Post-Build Action
DESCRIPTION: Shell script used in Xcode's post-build action to create a symbolic link to the Godot binary with a name that Xcode can recognize for debugging purposes. The script links the compiled Godot binary to a simplified name in the same directory.

LANGUAGE: shell
CODE:
ln -f ${PROJECT_DIR}/godot/bin/godot.macos.tools.64 ${PROJECT_DIR}/godot/bin/godot

----------------------------------------

TITLE: Vertical Gaussian Blur Shader Pass in GLSL
DESCRIPTION: Second pass of a two-pass Gaussian blur implementation that blurs the screen vertically using weighted texture sampling.

LANGUAGE: glsl
CODE:
shader_type canvas_item;

uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_nearest;

void fragment() {
    vec3 col = texture(screen_texture, SCREEN_UV).xyz * 0.16;
    col += texture(screen_texture, SCREEN_UV + vec2(0.0, SCREEN_PIXEL_SIZE.y)).xyz * 0.15;
    col += texture(screen_texture, SCREEN_UV + vec2(0.0, -SCREEN_PIXEL_SIZE.y)).xyz * 0.15;
    col += texture(screen_texture, SCREEN_UV + vec2(0.0, 2.0 * SCREEN_PIXEL_SIZE.y)).xyz * 0.12;
    col += texture(screen_texture, SCREEN_UV + vec2(0.0, 2.0 * -SCREEN_PIXEL_SIZE.y)).xyz * 0.12;
    col += texture(screen_texture, SCREEN_UV + vec2(0.0, 3.0 * SCREEN_PIXEL_SIZE.y)).xyz * 0.09;
    col += texture(screen_texture, SCREEN_UV + vec2(0.0, 3.0 * -SCREEN_PIXEL_SIZE.y)).xyz * 0.09;
    col += texture(screen_texture, SCREEN_UV + vec2(0.0, 4.0 * SCREEN_PIXEL_SIZE.y)).xyz * 0.05;
    col += texture(screen_texture, SCREEN_UV + vec2(0.0, 4.0 * -SCREEN_PIXEL_SIZE.y)).xyz * 0.05;
    COLOR.xyz = col;
}

----------------------------------------

TITLE: Getting Recognized Extensions for a Resource Type in GDScript
DESCRIPTION: Shows how to use the ResourceSaver.get_recognized_extensions() method to retrieve a list of file extensions that can be used to save a specific Resource type.

LANGUAGE: gdscript
CODE:
var texture = ImageTexture.new()
var extensions = ResourceSaver.get_recognized_extensions(texture)
print("Supported extensions for ImageTexture: ", extensions)

----------------------------------------

TITLE: Installing Vulkan Validation Layers on FreeBSD
DESCRIPTION: Package installation command for Vulkan validation layers on FreeBSD using pkg

LANGUAGE: shell
CODE:
pkg install graphics/vulkan-validation-layers

----------------------------------------

TITLE: Defining PlaceholderTexture2D Properties in GDScript
DESCRIPTION: Defines the 'size' property for the PlaceholderTexture2D class, representing the texture's dimensions in pixels.

LANGUAGE: GDScript
CODE:
var size: Vector2 = Vector2(1, 1)

----------------------------------------

TITLE: Godot Engine Encryption Error Message
DESCRIPTION: This error message appears when the encryption key is not properly included in the Godot build, causing issues with reading encrypted PCK files at runtime.

LANGUAGE: plaintext
CODE:
ERROR: open_and_parse: Condition "String::md5(md5.digest) != String::md5(md5d)" is true. Returning: ERR_FILE_CORRUPT
   At: core/io/file_access_encrypted.cpp:103

----------------------------------------

TITLE: Implementing _tick Method in EngineProfiler
DESCRIPTION: This method is called once every engine iteration when the profiler is active. It provides information about the current frame, including frame time, process time, physics time, and physics frame time (all in seconds).

LANGUAGE: GDScript
CODE:
func _tick(frame_time: float, process_time: float, physics_time: float, physics_frame_time: float) -> void:
    # Implementation goes here
    pass

----------------------------------------

TITLE: Retrieving Built-in Shader Include File Content
DESCRIPTION: Static method that returns the code content of a built-in shader fragment file. Can be accessed in shader code using #include "filename".

LANGUAGE: GDScript
CODE:
String get_built_in_include_file(filename: String)

----------------------------------------

TITLE: Adding Signals to a Class in Godot C++
DESCRIPTION: Shows how to add signals to a class using the ADD_SIGNAL macro in the _bind_methods function.

LANGUAGE: cpp
CODE:
ADD_SIGNAL(MethodInfo("been_killed"))

----------------------------------------

TITLE: Font Properties in LabelSettings
DESCRIPTION: Core font-related properties including font object reference, color and size settings.

LANGUAGE: GDScript
CODE:
var font: Font # Font used for text
var font_color: Color = Color(1, 1, 1, 1) # Text color
var font_size: int = 16 # Text size

----------------------------------------

TITLE: Creating Qt Creator Build Configuration
DESCRIPTION: Configuration settings for the build step in Qt Creator using SCons build system, specifying the command and path setup.

LANGUAGE: plaintext
CODE:
Command: scons\nArguments: See Build System documentation for available arguments

----------------------------------------

TITLE: Initializing a CanvasItem Shader in Godot
DESCRIPTION: Declares the shader type as canvas_item, which is used for 2D objects in Godot.

LANGUAGE: GLSL
CODE:
shader_type canvas_item;

----------------------------------------

TITLE: Type Registration for Custom Resource Format
DESCRIPTION: Implementation of registration functions to add the custom JSON resource format loader and saver to Godot's resource handling system.

LANGUAGE: cpp
CODE:
#include "register_types.h"

#include "core/class_db.h"
#include "resource_loader_json.h"
#include "resource_saver_json.h"
#include "resource_json.h"

static Ref<ResourceFormatLoaderJson> json_loader;
static Ref<ResourceFormatSaverJson> json_saver;

void register_json_types() {
    ClassDB::register_class<JsonResource>();

    json_loader.instantiate();
    ResourceLoader::add_resource_format_loader(json_loader);

    json_saver.instantiate();
    ResourceSaver::add_resource_format_saver(json_saver);
}

void unregister_json_types() {
    ResourceLoader::remove_resource_format_loader(json_loader);
    json_loader.unref();

    ResourceSaver::remove_resource_format_saver(json_saver);
    json_saver.unref();
}

----------------------------------------

TITLE: Installing Vulkan Validation Layers on Fedora
DESCRIPTION: Package installation command for Vulkan validation layers on Fedora using dnf

LANGUAGE: shell
CODE:
dnf install vulkan-validation-layers

----------------------------------------

TITLE: Creating Physics Ray Query in GDScript
DESCRIPTION: Example showing how to create and configure physics ray query parameters for a downward ray starting from the current position

LANGUAGE: GDScript
CODE:
var query = PhysicsRayQueryParameters2D.create(global_position, global_position + Vector2(0, 100))
var collision = get_world_2d().direct_space_state.intersect_ray(query)

----------------------------------------

TITLE: Performing an Interactive Rebase in Git
DESCRIPTION: Commands to perform an interactive rebase to squash commits and rewrite history.

LANGUAGE: shell
CODE:
git rebase -i upstream/master

# After editing in the interactive rebase tool:
git push --force origin better-project-manager

----------------------------------------

TITLE: Implementing DTLS Client in C#
DESCRIPTION: C# implementation of a DTLS client that establishes secure connection with a DTLS server and exchanges encrypted messages.

LANGUAGE: csharp
CODE:
// ClientNode.cs
using Godot;
using System.Text;

public partial class ClientNode : Node
{
    private PacketPeerDtls _dtls = new PacketPeerDtls();
    private PacketPeerUdp _udp = new PacketPeerUdp();
    private bool _connected = false;

    public override void _Ready()
    {
        _udp.ConnectToHost("127.0.0.1", 4242);
        _dtls.ConnectToPeer(_udp, validateCerts: false); // Use true in production for certificate validation!
    }

    public override void _Process(double delta)
    {
        _dtls.Poll();
        if (_dtls.GetStatus() == PacketPeerDtls.Status.Connected)
        {
            if (!_connected)
            {
                // Try to contact server
                _dtls.PutPacket("The Answer Is..42!".ToUtf8Buffer());
            }
            while (_dtls.GetAvailablePacketCount() > 0)
            {
                GD.Print($"Connected: {_dtls.GetPacket().GetStringFromUtf8()}");
                _connected = true;
            }
        }
    }
}

----------------------------------------

TITLE: Installing MinGW Dependencies with MSYS2
DESCRIPTION: Commands to install MinGW and dependencies using the MSYS2 package manager

LANGUAGE: shell
CODE:
pacman -S mingw-w64-x86_64-python3-pip mingw-w64-x86_64-gcc  \
    mingw-w64-i686-python3-pip mingw-w64-i686-gcc make

----------------------------------------

TITLE: Setting DampedSpringJoint2D Properties
DESCRIPTION: Property definitions for the DampedSpringJoint2D class including damping, length, rest_length, and stiffness. These properties control the spring joint's behavior and physical characteristics.

LANGUAGE: gdscript
CODE:
var damping: float = 1.0      # Controls spring damping ratio (0-1)
var length: float = 50.0      # Maximum length of the spring joint
var rest_length: float = 0.0    # Natural resting length of the spring
var stiffness: float = 20.0    # Spring resistance to deformation

----------------------------------------

TITLE: Including Images in RST Documentation
DESCRIPTION: Demonstrates how to include images in RST documentation files using both basic image directive and figure directive with alignment.

LANGUAGE: rst
CODE:
.. image:: img/image_name.webp\n\n.. figure:: img/image_name.webp\n    :align: center

----------------------------------------

TITLE: Setting Shader Type for 3D Shaders in Godot
DESCRIPTION: Declares the shader type as spatial, which is required for 3D shaders in Godot Engine.

LANGUAGE: GLSL
CODE:
shader_type spatial;

----------------------------------------

TITLE: Compiling Godot with Tests Enabled
DESCRIPTION: Command to compile Godot Engine with unit testing support enabled using SCons build system.

LANGUAGE: shell
CODE:
scons tests=yes

----------------------------------------

TITLE: Modifying an Existing Pull Request
DESCRIPTION: Commands to modify an existing pull request by amending the last commit and force pushing.

LANGUAGE: shell
CODE:
git checkout better-project-manager
nano editor/project_manager.cpp
git add editor/project_manager.cpp
git commit --amend
git push --force origin better-project-manager

----------------------------------------

TITLE: Setting Projected Obstructions GDScript Example
DESCRIPTION: Example showing the dictionary structure required for setting projected obstructions in NavigationMeshSourceGeometryData3D.

LANGUAGE: gdscript
CODE:
"vertices" : PackedFloat32Array
"elevation" : float
"height" : float
"carve" : bool

----------------------------------------

TITLE: Marking a Godot Build as Bad in Git Bisect
DESCRIPTION: Marks the current Godot build as 'bad' (exhibiting the bug) in the Git bisect process.

LANGUAGE: shell
CODE:
git bisect bad

----------------------------------------

TITLE: Retrieving and Using AnimationNodeStateMachinePlayback in GDScript
DESCRIPTION: Example of how to get the AnimationNodeStateMachinePlayback object from an AnimationTree and use it to travel to a specific state.

LANGUAGE: gdscript
CODE:
var state_machine = $AnimationTree.get("parameters/playback")
state_machine.travel("some_state")

----------------------------------------

TITLE: ColorDefault Enumeration
DESCRIPTION: Defines default color values when no texture is assigned - white, black or transparent.

LANGUAGE: rst
CODE:
enum ColorDefault {
    COLOR_DEFAULT_WHITE = 0,
    COLOR_DEFAULT_BLACK = 1,
    COLOR_DEFAULT_TRANSPARENT = 2,
    COLOR_DEFAULT_MAX = 3
}

----------------------------------------

TITLE: Basic Windows Compilation Command
DESCRIPTION: Basic SCons command to compile Godot for Windows

LANGUAGE: shell
CODE:
scons platform=windows

----------------------------------------

TITLE: Setting Colors Property in ColorPalette
DESCRIPTION: Method for setting and getting the colors array property of a ColorPalette instance. The colors property stores a PackedColorArray containing all colors in the palette.

LANGUAGE: gdscript
CODE:
set_colors(value: PackedColorArray)
get_colors() -> PackedColorArray

----------------------------------------

TITLE: BBCode-style Formatting for Godot Class Reference
DESCRIPTION: Examples of BBCode-style tags used for formatting text, links, and code in the Godot class reference documentation.

LANGUAGE: xml
CODE:
Move the [Sprite2D].
See [constant Color.RED].
Call [method Node3D.hide].
Takes [param size] for the size.
[b]Note:[/b] Only available when using the Vulkan renderer.
[codeblock]
func _ready():
    var sprite = get_node("Sprite2D")
    print(sprite.get_pos())
[/codeblock]

----------------------------------------

TITLE: Managing Audio Recording State in Godot
DESCRIPTION: Handles the recording button press event to start and stop audio recording. Updates UI elements and manages the recording state using AudioEffectRecord methods.

LANGUAGE: gdscript
CODE:
func _on_record_button_pressed():
    if effect.is_recording_active():
        recording = effect.get_recording()
        $PlayButton.disabled = false
        $SaveButton.disabled = false
        effect.set_recording_active(false)
        $RecordButton.text = "Record"
        $Status.text = ""
    else:
        $PlayButton.disabled = true
        $SaveButton.disabled = true
        effect.set_recording_active(true)
        $RecordButton.text = "Stop"
        $Status.text = "Recording..."

LANGUAGE: csharp
CODE:
private void OnRecordButtonPressed()
{
    if (_effect.IsRecordingActive())
    {
        _recording = _effect.GetRecording();
        GetNode<Button>("PlayButton").Disabled = false;
        GetNode<Button>("SaveButton").Disabled = false;
        _effect.SetRecordingActive(false);
        GetNode<Button>("RecordButton").Text = "Record";
        GetNode<Label>("Status").Text = "";
    }
    else
    {
        GetNode<Button>("PlayButton").Disabled = true;
        GetNode<Button>("SaveButton").Disabled = true;
        _effect.SetRecordingActive(true);
        GetNode<Button>("RecordButton").Text = "Stop";
        GetNode<Label>("Status").Text = "Recording...";
    }

----------------------------------------

TITLE: Example Pull Request Checkout Commands
DESCRIPTION: Specific example commands for fetching and checking out pull request #48734 with branch name 'editor_file_dialog_filter_sort'

LANGUAGE: bash
CODE:
# Fetch PR branch locally
git fetch upstream pull/48734/head:editor_file_dialog_filter_sort

git checkout editor_file_dialog_filter_sort

----------------------------------------

TITLE: Translating BBCode-like Markup in Class Reference
DESCRIPTION: Example of translating class reference documentation using BBCode-like markup, including code inline, code blocks, and class references.

LANGUAGE: bbcode
CODE:
Returns a color according to the standardized [code]name[/code] with [code]alpha[/code] ranging from 0 to 1.
[codeblock]
red = ColorN("red", 1)
[/codeblock]
Supported color names are the same as the constants defined in [Color].

----------------------------------------

TITLE: Setting Size of GPUParticlesAttractorVectorField3D in GDScript
DESCRIPTION: Sets the size of the vector field box in 3D units. The size property is a Vector3 representing the dimensions of the box.

LANGUAGE: GDScript
CODE:
attractor.set_size(Vector3(2, 2, 2))

----------------------------------------

TITLE: Starting Git Bisect for Godot Engine Regression
DESCRIPTION: Initializes the Git bisect process by specifying the known good and bad commit hashes for the Godot engine.

LANGUAGE: shell
CODE:
git bisect start
git bisect good <good commit hash>
git bisect bad <bad commit hash>

----------------------------------------

TITLE: Setting Texture Mipmap Bias in RenderSceneBuffersExtension
DESCRIPTION: Implement this method in GDExtension to change the texture mipmap bias. It takes a float parameter representing the new mipmap bias value.

LANGUAGE: GDScript
CODE:
func _set_texture_mipmap_bias(texture_mipmap_bias: float) -> void:

----------------------------------------

TITLE: Building Documentation
DESCRIPTION: Commands to build the documentation using make or sphinx-build directly.

LANGUAGE: sh
CODE:
make html

LANGUAGE: sh
CODE:
sphinx-build -b html ./ _build/html

----------------------------------------

TITLE: Color Blending Example - GDScript and C#
DESCRIPTION: Demonstrates color blending operations between two colors

LANGUAGE: GDScript
CODE:
var bg = Color(0.0, 1.0, 0.0, 0.5) # Green with alpha of 50%
var fg = Color(1.0, 0.0, 0.0, 0.5) # Red with alpha of 50%
var blended_color = bg.blend(fg) # Brown with alpha of 75%

LANGUAGE: C#
CODE:
var bg = new Color(0.0f, 1.0f, 0.0f, 0.5f); // Green with alpha of 50%
var fg = new Color(1.0f, 0.0f, 0.0f, 0.5f); // Red with alpha of 50%
Color blendedColor = bg.Blend(fg); // Brown with alpha of 75%

----------------------------------------

TITLE: Initializing Godot Engine with Default Configuration
DESCRIPTION: JavaScript code to create an instance of the Godot Engine class and start the game using the exported configuration. This is the simplest way to initialize and launch a Godot web export.

LANGUAGE: javascript
CODE:
const engine = new Engine($GODOT_CONFIG);
engine.startGame({
    /* optional override configuration, eg. */
    // unloadAfterInit: false,
    // canvasResizePolicy: 0,
    // ...
});

----------------------------------------

TITLE: Method Checks and Dynamic Calls in GDScript
DESCRIPTION: Illustrates various ways to perform method checks and dynamic method calls in GDScript, including runtime type checking and group-based interfaces.

LANGUAGE: GDScript
CODE:
var child = get_child(0)

# Dynamic lookup.
child.call("set_visible", false)

# Symbol-based dynamic lookup.
# GDScript aliases this into a 'call' method behind the scenes.
child.set_visible(false)

# Dynamic lookup, checks for method existence first.
if child.has_method("set_visible"):
    child.set_visible(false)

# Cast check, followed by dynamic lookup.
# Useful when you make multiple "safe" calls knowing that the class
# implements them all. No need for repeated checks.
# Tricky if one executes a cast check for a user-defined type as it
# forces more dependencies.
if child is CanvasItem:
    child.set_visible(false)
    child.show_on_top = true

# If one does not wish to fail these checks without notifying users,
# one can use an assert instead. These will trigger runtime errors
# immediately if not true.
assert(child.has_method("set_visible"))
assert(child.is_in_group("offer"))
assert(child is CanvasItem)

# Can also use object labels to imply an interface, i.e. assume it
# implements certain methods.
# There are two types, both of which only exist for Nodes: Names and
# Groups.

# Assuming...
# A "Quest" object exists and 1) that it can "complete" or "fail" and
# that it will have text available before and after each state...

# 1. Use a name.
var quest = $Quest
print(quest.text)
quest.complete() # or quest.fail()
print(quest.text) # implied new text content

# 2. Use a group.
for a_child in get_children():
    if a_child.is_in_group("quest"):
        print(quest.text)
        quest.complete() # or quest.fail()
        print(quest.text) # implied new text content

# Note that these interfaces are project-specific conventions the team
# defines (which means documentation! But maybe worth it?).
# Any script that conforms to the documented "interface" of the name or
# group can fill in for it.

----------------------------------------

TITLE: Windows Build Example
DESCRIPTION: Complete set of commands for building Godot with .NET support on Windows

LANGUAGE: shell
CODE:
scons platform=windows target=editor module_mono_enabled=yes
scons platform=windows target=template_debug module_mono_enabled=yes
scons platform=windows target=template_release module_mono_enabled=yes

bin/godot.windows.editor.x86_64.mono --headless --generate-mono-glue modules/mono/glue
./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=windows

----------------------------------------

TITLE: Creating .gdignore File on Windows
DESCRIPTION: This command creates an empty .gdignore file in the current directory on Windows. The .gdignore file prevents Godot from importing screenshots in asset repositories.

LANGUAGE: shell
CODE:
type nul > .gdignore

----------------------------------------

TITLE: Writing glTF to Filesystem Example
DESCRIPTION: Exports a GLTFState object to a glTF file on disk

LANGUAGE: GDScript
CODE:
var gltf_doc = GLTFDocument.new()
var err = gltf_doc.write_to_filesystem(state, "res://model.gltf")

----------------------------------------

TITLE: Updating Python Packages
DESCRIPTION: Optional commands to update pre-installed Python packages in the virtual environment.

LANGUAGE: powershell
CODE:
py -m pip install --upgrade pip setuptools

LANGUAGE: sh
CODE:
pip3 install --upgrade pip setuptools

----------------------------------------

TITLE: Managing Node Positions
DESCRIPTION: Sets or gets the position of a named animation node in the blend tree

LANGUAGE: GDScript
CODE:
set_node_position(name: StringName, position: Vector2)
get_node_position(name: StringName) -> Vector2

----------------------------------------

TITLE: Managing Default Value State in VisualShaderNodeUIntParameter
DESCRIPTION: Methods for enabling and checking if a custom default value is enabled for the parameter.

LANGUAGE: gdscript
CODE:
set_default_value_enabled(value: bool)
is_default_value_enabled() -> bool

----------------------------------------

TITLE: Removing Old Mobs in C#
DESCRIPTION: Clears all existing mobs from the game scene using group functionality in C#.

LANGUAGE: C#
CODE:
// Note that for calling Godot-provided methods with strings,
// we have to use the original Godot snake_case name.
GetTree().CallGroup("mobs", Node.MethodName.QueueFree);

----------------------------------------

TITLE: Setting Release Time in AudioEffectHardLimiter
DESCRIPTION: Method for setting and getting the release property which controls the time in seconds for gain reduction to fully release.

LANGUAGE: gdscript
CODE:
set_release(value: float)
get_release() -> float

----------------------------------------

TITLE: Adding Godot Dependency in Gradle
DESCRIPTION: Configuration to add the Godot Android library dependency in the module's Gradle build file.

LANGUAGE: gradle
CODE:
dependencies {
    implementation("org.godotengine:godot:4.2.0.stable")
}

----------------------------------------

TITLE: Configuring Plugin Settings in INI
DESCRIPTION: Defines the plugin.cfg file with basic information about the import plugin.

LANGUAGE: ini
CODE:
[plugin]

name="Silly Material Importer"
description="Imports a 3D Material from an external text file."
author="Yours Truly"
version="1.0"
script="material_import.gd"

----------------------------------------

TITLE: Building Web Templates with GDExtension Support
DESCRIPTION: Commands for building web templates with GDExtension support enabled and renaming the output files.

LANGUAGE: shell
CODE:
scons platform=web dlink_enabled=yes target=template_release
scons platform=web dlink_enabled=yes target=template_debug
mv bin/godot.web.template_release.wasm32.dlink.zip bin/web_dlink_release.zip
mv bin/godot.web.template_debug.wasm32.dlink.zip bin/web_dlink_debug.zip

----------------------------------------

TITLE: Specifying Python Package Dependencies
DESCRIPTION: This snippet defines the required Python packages and their versions for the project. It includes 'python-dotenv' version 0.18.0 for managing environment variables, and 'requests' version 2.32.0 for making HTTP requests.

LANGUAGE: plaintext
CODE:
python-dotenv==0.18.0
requests==2.32.0

----------------------------------------

TITLE: Defining BBCode Tag for RichTextEffect in C#
DESCRIPTION: Shows how to define a BBCode tag for a RichTextEffect in C#. This allows the effect to be used in a RichTextLabel with custom tags.

LANGUAGE: csharp
CODE:
// The RichTextEffect will be usable like this: `[example]Some text[/example]`
string bbcode = "example";

----------------------------------------

TITLE: Printing License Text in Godot Engine
DESCRIPTION: This snippet demonstrates how to print the Godot Engine license text using the print() function. This method can be used on platforms where a global output log is readable, such as desktop, Android, and HTML5.

LANGUAGE: gdscript
CODE:
print()

----------------------------------------

TITLE: Implementing Register Types for Godot Module
DESCRIPTION: Implements the initialization and uninitialization functions for the TTS module, registering the TTS class with Godot's ClassDB.

LANGUAGE: cpp
CODE:
#include "register_types.h"

#include "core/object/class_db.h"
#include "tts.h"

void initialize_tts_module(ModuleInitializationLevel p_level) {
    if (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) {
        return;
    }
    ClassDB::register_class<TTS>();
}

void uninitialize_tts_module(ModuleInitializationLevel p_level) {
    // Nothing to do here in this example.
}

----------------------------------------

TITLE: Installing Vulkan Validation Layers on Solus
DESCRIPTION: Package installation command for Vulkan validation layers on Solus using eopkg

LANGUAGE: shell
CODE:
eopkg install -c vulkan-validation-layers

----------------------------------------

TITLE: Adding Blend Points
DESCRIPTION: Examples of how to add blend points to an AnimationNodeBlendSpace2D instance

LANGUAGE: GDScript
CODE:
add_blend_point(node, Vector2(0, 0), -1)

----------------------------------------

TITLE: Making StoreKit Purchase Request in GDScript
DESCRIPTION: Example of making a purchase request using the iOS StoreKit API through the InAppStore singleton.

LANGUAGE: gdscript
CODE:
var result = in_app_store.purchase({ "product_id": "my_product" })

----------------------------------------

TITLE: Resource Change Notification System
DESCRIPTION: Shows how to implement notifications for resource changes in tool scripts using signals

LANGUAGE: gdscript
CODE:
@tool
class_name MyTool
extends Node

@export var resource: MyResource:
    set(new_resource):
        if resource != null:
            resource.changed.disconnect(_on_resource_changed)
        resource = new_resource
        resource.changed.connect(_on_resource_changed)

LANGUAGE: csharp
CODE:
[Tool]
public partial class MyTool : Node
{
    private MyResource _resource;

    [Export]
    public MyResource Resource
    {
        get => _resource;
        set
        {
            if (_resource != null)
            {
                _resource.Changed -= OnResourceChanged;
            }
            _resource = value;
            _resource.Changed += OnResourceChanged;
        }
    }
}

----------------------------------------

TITLE: Installing SCons via Homebrew
DESCRIPTION: Command to install the SCons build system using the Homebrew package manager on macOS.

LANGUAGE: shell
CODE:
brew install scons

----------------------------------------

TITLE: Initializing ENet Client Connection
DESCRIPTION: Creates a client connection to an ENet server with configurable parameters including address, port, channels, and bandwidth limits.

LANGUAGE: GDScript
CODE:
create_client("192.168.1.1", 4242, 2, 0, 0, 0)

----------------------------------------

TITLE: FFmpeg Command for Video Conversion to Ogg Theora
DESCRIPTION: Converts an input video to Ogg Theora format while preserving original resolution and using variable bitrate for optimal quality and file size.

LANGUAGE: shell
CODE:
ffmpeg -i input.mp4 -q:v 6 -q:a 6 -g:v 64 output.ogv

----------------------------------------

TITLE: Accessing Cache Directory in Godot Editor
DESCRIPTION: Returns the absolute path to the user's cache folder for temporary data storage in the Godot editor. The path varies by operating system.

LANGUAGE: text
CODE:
- Windows: %LOCALAPPDATA%\Godot\
- macOS: ~/Library/Caches/Godot/
- Linux: ~/.cache/godot/

----------------------------------------

TITLE: Binding Constants and Enums in Godot C++
DESCRIPTION: Demonstrates how to bind constants and enums to make them accessible in the Godot engine.

LANGUAGE: cpp
CODE:
enum SomeMode {
   MODE_FIRST,
   MODE_SECOND
};

VARIANT_ENUM_CAST(MyClass::SomeMode); // now functions that take SomeMode can be bound.

LANGUAGE: cpp
CODE:
BIND_CONSTANT(MODE_FIRST);
BIND_CONSTANT(MODE_SECOND);

----------------------------------------

TITLE: RenderingDevice Implementation - Metal
DESCRIPTION: Implementation of the RenderingDevice abstraction for the Metal graphics API on Apple platforms.

LANGUAGE: C++
CODE:
drivers/metal/rendering_device_driver_metal.mm

----------------------------------------

TITLE: Creating and Configuring Navigation Meshes for Different Actor Sizes in GDScript
DESCRIPTION: This snippet demonstrates how to create and configure navigation meshes for different actor sizes, parse source geometry, bake navigation meshes, create navigation maps and regions, and query paths for different agent sizes using GDScript in Godot.

LANGUAGE: gdscript
CODE:
# Create a navigation mesh resource for each actor size.
var navigation_mesh_standard_size: NavigationMesh = NavigationMesh.new()
var navigation_mesh_small_size: NavigationMesh = NavigationMesh.new()
var navigation_mesh_huge_size: NavigationMesh = NavigationMesh.new()

# Set appropriated agent parameters.
navigation_mesh_standard_size.agent_radius = 0.5
navigation_mesh_standard_size.agent_height = 1.8
navigation_mesh_small_size.agent_radius = 0.25
navigation_mesh_small_size.agent_height = 0.7
navigation_mesh_huge_size.agent_radius = 1.5
navigation_mesh_huge_size.agent_height = 2.5

# Get the root node to parse geometry for the baking.
var root_node: Node3D = get_node("NavigationMeshBakingRootNode")

# Create the source geometry resource that will hold the parsed geometry data.
var source_geometry_data: NavigationMeshSourceGeometryData3D = NavigationMeshSourceGeometryData3D.new()

# Parse the source geometry from the scene tree on the main thread.
# The navigation mesh is only required for the parse settings so any of the three will do.
NavigationServer3D.parse_source_geometry_data(navigation_mesh_standard_size, source_geometry_data, root_node)

# Bake the navigation geometry for each agent size from the same source geometry.
# If required for performance this baking step could also be done on background threads.
NavigationServer3D.bake_from_source_geometry_data(navigation_mesh_standard_size, source_geometry_data)
NavigationServer3D.bake_from_source_geometry_data(navigation_mesh_small_size, source_geometry_data)
NavigationServer3D.bake_from_source_geometry_data(navigation_mesh_huge_size, source_geometry_data)

# Create different navigation maps on the NavigationServer.
var navigation_map_standard: RID = NavigationServer3D.map_create()
var navigation_map_small: RID = NavigationServer3D.map_create()
var navigation_map_huge: RID = NavigationServer3D.map_create()

# Set the new navigation maps as active.
NavigationServer3D.map_set_active(navigation_map_standard, true)
NavigationServer3D.map_set_active(navigation_map_small, true)
NavigationServer3D.map_set_active(navigation_map_huge, true)

# Create a region for each map.
var navigation_region_standard: RID = NavigationServer3D.region_create()
var navigation_region_small: RID = NavigationServer3D.region_create()
var navigation_region_huge: RID = NavigationServer3D.region_create()

# Add the regions to the maps.
NavigationServer3D.region_set_map(navigation_region_standard, navigation_map_standard)
NavigationServer3D.region_set_map(navigation_region_small, navigation_map_small)
NavigationServer3D.region_set_map(navigation_region_huge, navigation_map_huge)

# Set navigation mesh for each region.
NavigationServer3D.region_set_navigation_mesh(navigation_region_standard, navigation_mesh_standard_size)
NavigationServer3D.region_set_navigation_mesh(navigation_region_small, navigation_mesh_small_size)
NavigationServer3D.region_set_navigation_mesh(navigation_region_huge, navigation_mesh_huge_size)

# Create start and end position for the navigation path query.
var start_pos: Vector3 = Vector3(0.0, 0.0, 0.0)
var end_pos: Vector3 = Vector3(2.0, 0.0, 0.0)
var use_corridorfunnel: bool = true

# Query paths for each agent size.
var path_standard_agent = NavigationServer3D.map_get_path(navigation_map_standard, start_pos, end_pos, use_corridorfunnel)
var path_small_agent = NavigationServer3D.map_get_path(navigation_map_small, start_pos, end_pos, use_corridorfunnel)
var path_huge_agent = NavigationServer3D.map_get_path(navigation_map_huge, start_pos, end_pos, use_corridorfunnel)

----------------------------------------

TITLE: Referencing Scene Unique Nodes in C#
DESCRIPTION: Shows how to reference a scene unique node in C# using GetNode<>(). The example demonstrates setting the Text property of a Button named 'RedButton'.

LANGUAGE: csharp
CODE:
GetNode<Button>("%RedButton").Text = "Hello";

----------------------------------------

TITLE: Converting PNG Sequence and WAV to MP4 with FFmpeg
DESCRIPTION: Command to convert a PNG image sequence and WAV audio file to an MP4 video using FFmpeg.

LANGUAGE: shell
CODE:
ffmpeg -r 60 -i input%08d.png -i input.wav -crf 15 output.mp4

----------------------------------------

TITLE: Installing SCons via MacPorts
DESCRIPTION: Command to install the SCons build system using the MacPorts package manager on macOS.

LANGUAGE: shell
CODE:
sudo port install scons

----------------------------------------

TITLE: Chroma Key Shader for Video Stream Player
DESCRIPTION: Custom GLSL shader for implementing chroma key effect on video playback, allowing for color removal and background replacement.

LANGUAGE: glsl
CODE:
shader_type canvas_item;

uniform vec3 chroma_key_color : source_color = vec3(0.0, 1.0, 0.0);
uniform float pickup_range : hint_range(0.0, 1.0) = 0.1;
uniform float fade_amount : hint_range(0.0, 1.0) = 0.1;

void fragment() {
    vec4 color = texture(TEXTURE, UV);
    float distance = length(color.rgb - chroma_key_color);
    if (distance <= pickup_range) {
        discard;
    }
    float fade_factor = smoothstep(pickup_range, pickup_range + fade_amount, distance);
    COLOR = vec4(color.rgb, fade_factor);
}

----------------------------------------

TITLE: Implementing Custom Godot Server
DESCRIPTION: Implementation of the HilbertHotel server class, including thread management, RID operations, and core functionality.

LANGUAGE: cpp
CODE:
#include "hilbert_hotel.h"

#include "core/variant/dictionary.h"
#include "core/os/os.h"

#include "prime_225.h"

void HilbertHotel::thread_func(void *p_udata) {
    HilbertHotel *ac = (HilbertHotel *) p_udata;
    uint64_t msdelay = 1000;

    while (!ac->exit_thread) {
        if (!ac->empty()) {
            ac->lock();
            ac->register_rooms();
            ac->unlock();
        }
        OS::get_singleton()->delay_usec(msdelay * 1000);
    }
}

Error HilbertHotel::init() {
    thread_exited = false;
    counter = 0;
    mutex = Mutex::create();
    thread = Thread::create(HilbertHotel::thread_func, this);
    return OK;
}

// ... (rest of the implementation)

----------------------------------------

TITLE: RenderingDevice Implementation - Direct3D 12
DESCRIPTION: Implementation of the RenderingDevice abstraction for the Direct3D 12 graphics API.

LANGUAGE: C++
CODE:
drivers/d3d12/rendering_device_driver_d3d12.cpp

----------------------------------------

TITLE: Custom Button Implementation
DESCRIPTION: Example of a custom button node implementation that prints a message when clicked.

LANGUAGE: gdscript
CODE:
@tool
extends Button

func _enter_tree():
    pressed.connect(clicked)

func clicked():
    print("You clicked me!")

LANGUAGE: csharp
CODE:
using Godot;

[Tool]
public partial class MyButton : Button
{
    public override void _EnterTree()
    {
        Pressed += Clicked;
    }

    public void Clicked()
    {
        GD.Print("You clicked me!");
    }
}

----------------------------------------

TITLE: Demonstrating Proper Use of Spaces in C#
DESCRIPTION: Illustrates the correct usage of spaces in various C# constructs, including operators, keywords, accessors, and initializers.

LANGUAGE: C#
CODE:
public class MyClass<A, B> : Parent<A, B>
{
    public float MyProperty { get; set; }

    public float AnotherProperty
    {
        get { return MyProperty; }
    }

    public void MyMethod()
    {
        int[] values = { 1, 2, 3, 4 };
        int sum = 0;

        // Single line comment.
        for (int i = 0; i < values.Length; i++)
        {
            switch (i)
            {
                case 3: return;
                default:
                    sum += i > 2 ? 0 : 1;
                    break;
            }
        }

        i += (int)MyProperty; // No space after a type cast.
    }
}

----------------------------------------

TITLE: Using singletons in C# for Godot
DESCRIPTION: Demonstrates how to use singletons as static classes in C#, and how to access the singleton instance when needed.

LANGUAGE: csharp
CODE:
Input.IsActionPressed("ui_down")

Input.Singleton.JoyConnectionChanged += Input_JoyConnectionChanged;

----------------------------------------

TITLE: Creating and Switching Branches in Git
DESCRIPTION: Commands to create a new feature branch and switch between branches.

LANGUAGE: shell
CODE:
git branch better-project-manager
git checkout better-project-manager

# Equivalent shorthand:
git checkout -b better-project-manager

# Switch back to master:
git checkout master

# List branches:
git branch

----------------------------------------

TITLE: Accessing TextureLayeredRD RID Property in GDScript
DESCRIPTION: Shows how to get and set the RID of the texture object created on the RenderingDevice. This property is used to interact with the low-level rendering API.

LANGUAGE: GDScript
CODE:
# Getting the RID
var texture_rid = texture_layered_rd.get_texture_rd_rid()

# Setting the RID
texture_layered_rd.set_texture_rd_rid(new_rid)

----------------------------------------

TITLE: Error Handling Macros in Godot C++
DESCRIPTION: Shows various error handling macros used in Godot's C++ code for conditional and unconditional error reporting and handling.

LANGUAGE: cpp
CODE:
ERR_FAIL_COND_MSG(!mesh.is_valid(), vformat("Couldn't load mesh at: %s", path));

ERR_FAIL_COND_V_MSG(rect.x < 0 || rect.y < 0, 0,
        "Couldn't calculate the rectangle's area.");

ERR_FAIL_INDEX_MSG(index, SomeEnum::QUALITY_MAX,
        vformat("Invalid quality: %d. See SomeEnum for allowed values.", index));

ERR_FAIL_INDEX_V_MSG(index, some_array.size(), -1,
        vformat("Item %d is out of bounds.", index));

if (!complex_error_checking_routine()) {
    ERR_FAIL_MSG("Couldn't reload the filesystem cache.");
}

if (!complex_error_checking_routine()) {
    ERR_FAIL_V_MSG(false, "Couldn't parse the input arguments.");
}

CRASH_NOW_MSG("Can't predict the future! Aborting.");

----------------------------------------

TITLE: RST Table of Contents Structure
DESCRIPTION: ReStructuredText directives defining the hierarchical table of contents for the class reference documentation

LANGUAGE: rst
CODE:
.. toctree::
    :maxdepth: 1
    :name: toc-class-ref-nodes

    class_node
    class_acceptdialog

----------------------------------------

TITLE: Defining Table of Contents for Godot Engine Plugins in reStructuredText
DESCRIPTION: This code snippet defines a table of contents for Godot Engine plugin documentation using reStructuredText. It includes sections for editor extensions and running code in the editor.

LANGUAGE: rst
CODE:
:allow_comments: False

Plugins
=======

.. toctree::
   :maxdepth: 1
   :name: toc-tutorials-extending

   editor/index
   running_code_in_the_editor

----------------------------------------

TITLE: RST Generation Commands
DESCRIPTION: Bash commands to generate reStructuredText documentation files from XML class reference.

LANGUAGE: bash
CODE:
curl -sSLO https://raw.githubusercontent.com/godotengine/godot/refs/heads/master/version.py

curl -sSL https://raw.githubusercontent.com/godotengine/godot/master/doc/tools/make_rst.py | python3 - -o "docs/classes" -l "en" doc_classes

----------------------------------------

TITLE: Implementing Signal in GDExample Class
DESCRIPTION: Adding a signal to the GDExample class that emits the node's position every second.

LANGUAGE: C++
CODE:
void GDExample::_bind_methods() {
    // ... (previous property bindings)

    ADD_SIGNAL(MethodInfo("position_changed", PropertyInfo(Variant::OBJECT, "node"), PropertyInfo(Variant::VECTOR2, "new_pos")));
}

void GDExample::_process(double delta) {
    // ... (position calculation)

    time_emit += delta;
    if (time_emit > 1.0) {
        emit_signal("position_changed", this, new_position);
        time_emit = 0.0;
    }
}

----------------------------------------

TITLE: Translating reStructuredText Markup in Documentation
DESCRIPTION: Examples of translating various reStructuredText markup elements, including bold text, hyperlinks, and internal references.

LANGUAGE: rst
CODE:
Looking for the documentation of the current **development** branch?
`Have a look here <https://docs.godotengine.org/en/latest>`_.

|supported| Backwards-compatible new features (backported from the ``master``
branch) as well as bug, security, and platform support fixes.

See :ref:`doc_ways_to_contribute`.

See :ref:`how to contribute <doc_ways_to_contribute>`.

Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/Linux
or :kbd:`Cmd + S` on macOS.

----------------------------------------

TITLE: IntelliSense Configuration for Godot Development
DESCRIPTION: C/C++ properties configuration for VSCode IntelliSense, including include paths, compiler settings, and project defines.

LANGUAGE: javascript
CODE:
{
  "configurations": [
    {
      "name": "Win32",
      "includePath": [
        "${workspaceFolder}/**",
        "${workspaceFolder}/platform/windows"
      ],
      "defines": [
        "_DEBUG",
        "UNICODE",
        "_UNICODE",
        "TOOLS_ENABLED",
        "DEBUG_ENABLED",
        "TESTS_ENABLED"
      ],
      "windowsSdkVersion": "10.0.22621.0",
      "compilerPath": "C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.39.33519/bin/Hostx64/x64/cl.exe",
      "cStandard": "c17",
      "cppStandard": "c++17",
      "intelliSenseMode": "windows-msvc-x64"
    }
  ],
  "version": 4
}

----------------------------------------

TITLE: Configuring Glow
DESCRIPTION: Enables glow and configures its properties

LANGUAGE: GDScript
CODE:
var environment = Environment.new()
environment.glow_enabled = true
environment.glow_intensity = 1.5
environment.glow_bloom = 0.2

----------------------------------------

TITLE: Scene Switching Implementation
DESCRIPTION: Implementation of scene switching logic in both scenes using the global autoload script.

LANGUAGE: gdscript
CODE:
func _on_button_pressed():
    Global.goto_scene("res://scene_2.tscn")

LANGUAGE: gdscript
CODE:
func _on_button_pressed():
    Global.goto_scene("res://scene_1.tscn")

----------------------------------------

TITLE: Accessing Command Line Arguments in GDScript
DESCRIPTION: Shows how to access command line arguments passed to the Godot project using OS methods. This is useful when working with multiple project instances or custom launch configurations.

LANGUAGE: GDScript
CODE:
OS.get_cmdline_args()
OS.get_cmdline_user_args()

----------------------------------------

TITLE: SCons Documentation Integration
DESCRIPTION: Python code for the SConstruct file to include documentation in the GDExtension build process.

LANGUAGE: python
CODE:
if env["target"] in ["editor", "template_debug"]:
try:
    doc_data = env.GodotCPPDocData("src/gen/doc_data.gen.cpp", source=Glob("doc_classes/*.xml"))
    sources.append(doc_data)
except AttributeError:
    print("Not including class reference as we're targeting a pre-4.3 baseline.")

----------------------------------------

TITLE: Plugin Configuration File
DESCRIPTION: INI configuration file for the Android plugin metadata.

LANGUAGE: ini
CODE:
[plugin]

name="<plugin_name>"
description="<plugin_description>"
author="<plugin_author>"
version="<plugin_version>"
script="<relative_path_to_the_export_tool_script>"

----------------------------------------

TITLE: ColorPickerButton Alpha Control - GDScript
DESCRIPTION: Methods for controlling alpha channel editing visibility in the color picker.

LANGUAGE: GDScript
CODE:
set_edit_alpha(value: bool)
is_editing_alpha() -> bool

----------------------------------------

TITLE: Creating ReadTheDocs Redirects
DESCRIPTION: Command to submit the redirects from the CSV file to ReadTheDocs via their API

LANGUAGE: shell
CODE:
python create_redirects.py

----------------------------------------

TITLE: Demonstrating Valid and Invalid Export Attributes in C#
DESCRIPTION: Examples showing which fields and properties can be exported in Godot Engine. Demonstrates that read-only fields and properties cannot be exported, while mutable fields and properties with both getters and setters can be exported.

LANGUAGE: csharp
CODE:
// Read-only fields can't be exported.
[Export]
public readonly int invalidField;

// This field can be exported because it's not declared 'readonly'.
[Export]
public int validField;

// Read-only properties can't be exported.
[Export]
public int InvalidProperty { get; }

// This property can be exported because it has both a getter and a setter.
[Export]
public int ValidProperty { get; set; }

----------------------------------------

TITLE: Demonstrating Invalid Export of Indexer in C#
DESCRIPTION: This code snippet shows an example of incorrectly applying the [Export] attribute to an indexer property in C#. This is not allowed in Godot and will result in the indexer being ignored, potentially causing runtime errors.

LANGUAGE: csharp
CODE:
private int[] _backingField;

// Indexers can't be exported.
[Export]
public int this[int index]
{
    get => _backingField[index];
    set => _backingField[index] = value;
}

----------------------------------------

TITLE: Configuring Viewport Size in Project Settings
DESCRIPTION: Example showing how to configure viewport width and height in project settings to match background texture size.

LANGUAGE: gdscript
CODE:
# In Project Settings > Display > Window:
display/window/size/viewport_width = 288
display/window/size/viewport_height = 208

----------------------------------------

TITLE: Defining Table of Contents for GUI Basics in reStructuredText
DESCRIPTION: This code snippet defines a table of contents for GUI basics topics using reStructuredText syntax. It includes links to pages about size and anchors, containers, custom controls, navigation, and a control node gallery.

LANGUAGE: reStructuredText
CODE:
.. toctree::
   :maxdepth: 1
   :name: toc-gui-basics

   size_and_anchors
   gui_containers
   custom_gui_controls
   gui_navigation
   control_node_gallery

----------------------------------------

TITLE: GDScript Plugin Method Call Example
DESCRIPTION: Example of calling a plugin method from GDScript.

LANGUAGE: gdscript
CODE:
if Engine.has_singleton("MyPlugin"):
    var singleton = Engine.get_singleton("MyPlugin")
    print(singleton.myPluginFunction("World"))

----------------------------------------

TITLE: Configuring Libraries Section in .gdextension File
DESCRIPTION: This snippet demonstrates how to specify paths to compiled binaries of GDExtension libraries for different platforms and build configurations. It uses feature flags to determine which version should be loaded and exported with the game.

LANGUAGE: ini
CODE:
[libraries]

macos.debug = "res://bin/libgdexample.macos.template_debug.framework"
macos.release = "res://bin/libgdexample.macos.template_release.framework"
windows.debug.x86_32 = "res://bin/libgdexample.windows.template_debug.x86_32.dll"
windows.release.x86_32 = "res://bin/libgdexample.windows.template_release.x86_32.dll"
windows.debug.x86_64 = "res://bin/libgdexample.windows.template_debug.x86_64.dll"
windows.release.x86_64 = "res://bin/libgdexample.windows.template_release.x86_64.dll"
linux.debug.x86_64 = "res://bin/libgdexample.linux.template_debug.x86_64.so"
linux.release.x86_64 = "res://bin/libgdexample.linux.template_release.x86_64.so"
linux.debug.arm64 = "res://bin/libgdexample.linux.template_debug.arm64.so"
linux.release.arm64 = "res://bin/libgdexample.linux.template_release.arm64.so"
linux.debug.rv64 = "res://bin/libgdexample.linux.template_debug.rv64.so"
linux.release.rv64 = "res://bin/libgdexample.linux.template_release.rv64.so"

----------------------------------------

TITLE: Creating Signals at Runtime in C#
DESCRIPTION: Demonstrates how to create custom signals at runtime using the AddUserSignal method. The signal is created and immediately emitted in the _Ready method.

LANGUAGE: csharp
CODE:
public override void _Ready()
{
    AddUserSignal("MyCustomSignal");
    EmitSignal("MyCustomSignal");
}

----------------------------------------

TITLE: Checking Feature Availability
DESCRIPTION: Shows how to query whether a specific feature is available at runtime using the OS singleton API.

LANGUAGE: gdscript
CODE:
OS.has_feature(name)

LANGUAGE: csharp
CODE:
OS.HasFeature(name);

----------------------------------------

TITLE: Converting Intersection Point to Viewport Position in GDScript
DESCRIPTION: Helper function to convert the intersection point on a composition layer quad to a position in the viewport's local coordinate system.

LANGUAGE: GDScript
CODE:
func _intersect_to_viewport_pos(intersect : Vector2) -> Vector2i:
    if layer_viewport and intersect != NO_INTERSECTION:
        var pos : Vector2 = intersect * Vector2(layer_viewport.size)
        return Vector2i(pos)
    else:
        return Vector2i(-1, -1)

----------------------------------------

TITLE: Polling TLS Connection
DESCRIPTION: Polls the TLS connection to check for incoming data. Should be called before checking available bytes.

LANGUAGE: GDScript
CODE:
poll() -> void

----------------------------------------

TITLE: Setting LinkButton URI Examples - GDScript
DESCRIPTION: Examples of setting different types of URIs that open in their respective default programs when clicked.

LANGUAGE: gdscript
CODE:
uri = "https://godotengine.org"  # Opens the URL in the default web browser.
uri = "C:\SomeFolder"  # Opens the file explorer at the given path.
uri = "C:\SomeImage.png"  # Opens the given image in the default viewing app.

----------------------------------------

TITLE: Accessing C# Fields from GDScript in Godot
DESCRIPTION: Illustrates how to access and modify C# fields from GDScript in Godot. Shows direct property access.

LANGUAGE: gdscript
CODE:
# Output: "my c# value".
print(my_csharp_node.MyProperty)
my_csharp_node.MyProperty = "MY C# VALUE"
# Output: "MY C# VALUE".
print(my_csharp_node.MyProperty)

----------------------------------------

TITLE: Handling Asynchronous Plugin Events in GDScript
DESCRIPTION: Demonstrates the pattern for handling asynchronous plugin operations including purchase requests and event processing.

LANGUAGE: gdscript
CODE:
func on_purchase_pressed():
    var result = in_app_store.purchase({ "product_id": "my_product" })
    if result == OK:
        animation.play("busy") # show the "waiting for response" animation
    else:
        show_error()

# put this on a 1 second timer or something
func check_events():
    while in_app_store.get_pending_event_count() > 0:
        var event = in_app_store.pop_pending_event()
        if event.type == "purchase":
            if event.result == "ok":
                show_success(event.product_id)
            else:
                show_error()

----------------------------------------

TITLE: Using UV Coordinates in Fragment Shader
DESCRIPTION: Demonstrates how to use UV coordinates to color pixels based on their position.

LANGUAGE: GLSL
CODE:
void fragment() {
  COLOR = vec4(UV, 0.5, 1.0);
}

----------------------------------------

TITLE: Requesting Notification Permission and Sending Notification in GDScript
DESCRIPTION: Shows how to request notification permission and send a notification using JavaScriptBridge in GDScript.

LANGUAGE: gdscript
CODE:
extends Node

# Here we create a reference to the `_on_permissions` function (below).
# This reference will be kept until the node is freed.
var _permission_callback = JavaScriptBridge.create_callback(_on_permissions)

func _ready():
    # NOTE: This is done in `_ready` for simplicity, but SHOULD BE done in response
    # to user input instead (e.g. during `_input`, or `button_pressed` event, etc.),
    # otherwise it might not work.

    # Get the `window.Notification` JavaScript object.
    var notification = JavaScriptBridge.get_interface("Notification")
    # Call the `window.Notification.requestPermission` method which returns a JavaScript
    # Promise, and bind our callback to it.
    notification.requestPermission().then(_permission_callback)

func _on_permissions(args):
    # The first argument of this callback is the string "granted" if the permission is granted.
    var permission = args[0]
    if permission == "granted":
        print("Permission granted, sending notification.")
        # Create the notification: `new Notification("Hi there!")`
        JavaScriptBridge.create_object("Notification", "Hi there!")
    else:
        print("No notification permission.")

----------------------------------------

TITLE: Managing Original Name of GLTFAnimation
DESCRIPTION: Shows how to set and retrieve the original name of a GLTFAnimation. This property stores the animation's name as it was in the original GLTF file.

LANGUAGE: GDScript
CODE:
# Setting the original name
animation.set_original_name("Walk_Cycle")

# Getting the original name
var anim_name = animation.get_original_name()

----------------------------------------

TITLE: Shader Type Declaration
DESCRIPTION: Example of how to declare a spatial shader type in Godot's shading language.

LANGUAGE: glsl
CODE:
shader_type spatial;

----------------------------------------

TITLE: Loading PCK Files at Runtime in GDScript
DESCRIPTION: Demonstrates how to load a PCK file named 'mod.pck' and access a scene from it using GDScript. This code checks for successful loading and then attempts to load a scene from the pack.

LANGUAGE: gdscript
CODE:
func _your_function():
    # This could fail if, for example, mod.pck cannot be found.
    var success = ProjectSettings.load_resource_pack("res://mod.pck")

    if success:
        # Now one can use the assets as if they had them in the project from the start.
        var imported_scene = load("res://mod_scene.tscn")

----------------------------------------

TITLE: Implementing Basic Water Material Properties in GLSL
DESCRIPTION: Sets up basic material properties for water, including color (ALBEDO), metallic, and roughness values in a Godot spatial shader fragment function.

LANGUAGE: GLSL
CODE:
void fragment() {
  METALLIC = 0.0;
  ROUGHNESS = 0.01;
  ALBEDO = vec3(0.1, 0.3, 0.5);
}

----------------------------------------

TITLE: Enemy Base Class Definition
DESCRIPTION: Defines the base enemy class by extending RigidBody2D in both GDScript and C#.

LANGUAGE: gdscript
CODE:
extends RigidBody2D

LANGUAGE: csharp
CODE:
using Godot;

public partial class Mob : RigidBody2D
{
    // Don't forget to rebuild the project.
}

----------------------------------------

TITLE: Handling WebRTC Connection Events
DESCRIPTION: Sets up signal connections to handle various WebRTC events like ICE candidate creation and session description creation.

LANGUAGE: gdscript
CODE:
peer.connect("ice_candidate_created", self, "_on_ice_candidate_created")
peer.connect("session_description_created", self, "_on_session_description_created")

func _on_ice_candidate_created(media, index, name):
    # Send candidate to remote peer
    pass

func _on_session_description_created(type, sdp):
    peer.set_local_description(type, sdp)
    # Send description to remote peer

----------------------------------------

TITLE: Initializing iOS Plugin Singletons in GDScript
DESCRIPTION: Shows how to check for and initialize iOS plugin singletons for InAppStore and GameCenter functionality.

LANGUAGE: gdscript
CODE:
var in_app_store
var game_center

func _ready():
    if Engine.has_singleton("InAppStore"):
        in_app_store = Engine.get_singleton("InAppStore")
    else:
        print("iOS IAP plugin is not available on this platform.")

    if Engine.has_singleton("GameCenter"):
        game_center = Engine.get_singleton("GameCenter")
    else:
        print("iOS Game Center plugin is not available on this platform.")

----------------------------------------

TITLE: BBCode Tag Escaping for User Input in RichTextLabel
DESCRIPTION: Script demonstrating safe handling of user input by escaping BBCode tags

LANGUAGE: GDScript
CODE:
extends RichTextLabel

func _ready():
    append_chat_line("Player 1", "Hello world!")
    append_chat_line("Player 2", "Hello [color=red]BBCode injection[/color] (no escaping)!")
    append_chat_line_escaped("Player 2", "Hello [color=red]BBCode injection[/color] (with escaping)!")

func escape_bbcode(bbcode_text):
    return bbcode_text.replace("[", "[lb]")

func append_chat_line(username, message):
    append_text("%s: [color=green]%s[/color]\n" % [username, message])

func append_chat_line_escaped(username, message):
    append_text("%s: [color=green]%s[/color]\n" % [escape_bbcode(username), escape_bbcode(message)])

----------------------------------------

TITLE: Simple Gizmo Implementation
DESCRIPTION: Complete implementation of a simple gizmo plugin including material creation, redraw logic, and handle setup. Demonstrates basic gizmo functionality without per-gizmo state.

LANGUAGE: GDScript
CODE:
extends EditorNode3DGizmoPlugin

const MyCustomNode3D = preload("res://addons/my-addon/my_custom_node_3d.gd")

func _init():
    create_material("main", Color(1,0,0))
    create_handle_material("handles")

func _has_gizmo(node):
    return node is MyCustomNode3D

func _redraw(gizmo):
    gizmo.clear()

    var node3d = gizmo.get_node_3d()

    var lines = PackedVector3Array()

    lines.push_back(Vector3(0, 1, 0))
    lines.push_back(Vector3(0, node3d.my_custom_value, 0))

    var handles = PackedVector3Array()

    handles.push_back(Vector3(0, 1, 0))
    handles.push_back(Vector3(0, node3d.my_custom_value, 0))

    gizmo.add_lines(lines, get_material("main", gizmo), false)
    gizmo.add_handles(handles, get_material("handles", gizmo), [])

----------------------------------------

TITLE: Updating GDExtension Entry Symbol for Godot 4.1
DESCRIPTION: Updated version of the GDExtension entry symbol function for Godot 4.1. This shows the required changes to make the extension compatible with 4.1.

LANGUAGE: cpp
CODE:
GDExtensionBool GDE_EXPORT example_library_init(GDExtensionInterfaceGetProcAddress p_get_proc_address, const GDExtensionClassLibraryPtr p_library, GDExtensionInitialization *r_initialization) {
    godot::GDExtensionBinding::InitObject init_obj(p_get_proc_address, p_library, r_initialization);

    init_obj.register_initializer(initialize_example_module);
    init_obj.register_terminator(uninitialize_example_module);
    init_obj.set_minimum_library_initialization_level(MODULE_INITIALIZATION_LEVEL_SCENE);

    return init_obj.init();
}

----------------------------------------

TITLE: RST Property Documentation - pressure
DESCRIPTION: RST documentation defining the deprecated pressure property that is no longer used by the engine.

LANGUAGE: RST
CODE:
:ref:`float<class_float>` **pressure** = ``0.0`` :ref:`🔗<class_InputEventJoypadButton_property_pressure>`

----------------------------------------

TITLE: Toggling Navigation Debug Visualization - C#
DESCRIPTION: Controls the visibility of navigation debug visualizations using NavigationServer singletons in C#. These functions are only available in debug builds.

LANGUAGE: csharp
CODE:
NavigationServer2D.SetDebugEnabled(false);
NavigationServer3D.SetDebugEnabled(true);

----------------------------------------

TITLE: Appending Redirects to CSV File
DESCRIPTION: Command to append generated redirect entries to the redirects.csv file

LANGUAGE: shell
CODE:
python convert_git_renames_to_csv.py stable 3.4 >> redirects.csv

----------------------------------------

TITLE: Configuring Stretch Scale at Runtime
DESCRIPTION: Sets the content scale factor of the root viewport to apply additional scaling.

LANGUAGE: GDScript
CODE:
get_tree().root.content_scale_factor = 2.0

----------------------------------------

TITLE: Dynamic Casting in Godot C++
DESCRIPTION: Shows how to perform dynamic casting between Object-derived classes in Godot.

LANGUAGE: cpp
CODE:
void somefunc(Object *some_obj) {

     Button *button = Object::cast_to<Button>(some_obj);
}

----------------------------------------

TITLE: Setting Vertex and Index Arrays
DESCRIPTION: Method to set both vertex positions and indices for the occluder while only updating once. Takes PackedVector3Array for vertices and PackedInt32Array for indices.

LANGUAGE: GDScript
CODE:
set_arrays(vertices: PackedVector3Array, indices: PackedInt32Array)

----------------------------------------

TITLE: Toggling Occlusion Culling at Runtime in C#
DESCRIPTION: This snippet demonstrates how to enable or disable occlusion culling on the root viewport during gameplay using C#.

LANGUAGE: csharp
CODE:
GetTree().Root.UseOcclusionCulling = true;

----------------------------------------

TITLE: Using Custom Module in GDScript
DESCRIPTION: Example of using the custom Summator module in a GDScript.

LANGUAGE: GDScript
CODE:
var s = Summator.new()
s.add(10)
s.add(20)
s.add(30)
print(s.get_total())
s.reset()

----------------------------------------

TITLE: RST Documentation Structure
DESCRIPTION: ReStructuredText documentation defining the Inspector dock's structure and components, including warnings, sections, and image references.

LANGUAGE: rst
CODE:
:article_outdated: True

.. _doc_editor_inspector_dock:

The Inspector
=============

This page explains how the Inspector dock works in-depth. You will learn how to edit properties, fold and unfold areas, use the search bar, and more.

.. warning:: This page is a work-in-progress.

Overview of the interface
-------------------------

Let's start by looking at the dock's main parts.

.. image:: img/inspector_overview.png

At the top are the file and navigation buttons.

.. image:: img/inspector_top_buttons.png

Below it, you can find the selected node's name, its type, and the tools menu on the right side.

.. image:: img/inspector_node_name_and_tools.png

If you click the tool menu icon, a drop-down menu offers some view and edit options.

.. image:: img/inspector_tools_menu.png

Then comes the search bar. Type anything in it to filter displayed properties. Delete the text to clear the search.

.. image:: img/inspector_search_bar.png

----------------------------------------

TITLE: Basic Object Operations in C++
DESCRIPTION: Shows how to create an object instance and perform basic operations like getting the class name and casting between classes.

LANGUAGE: cpp
CODE:
obj = memnew(CustomObject);
print_line("Object class: ", obj->get_class()); // print object class

obj2 = Object::cast_to<OtherClass>(obj); // converting between classes, this also works without RTTI enabled.

----------------------------------------

TITLE: C# Score Label Implementation
DESCRIPTION: Score tracking and display implementation in C# for Godot.

LANGUAGE: csharp
CODE:
using Godot;

public partial class ScoreLabel : Label
{
    private int _score = 0;

    public void OnMobSquashed()
    {
        _score += 1;
        Text = $"Score: {_score}";
    }
}

----------------------------------------

TITLE: Defining Custom Managed Resource
DESCRIPTION: Definition of the InfiniteBus class, a custom managed resource used by the HilbertHotel server.

LANGUAGE: cpp
CODE:
class InfiniteBus : public RID_Data {
    RID self;

private:
    uint64_t prime_num;
    uint64_t num;

public:
    uint64_t next_room() {
        return prime_num * num++;
    }

    uint64_t get_bus_num() const {
        return prime_num;
    }

    uint64_t get_current_room() const {
        return prime_num * num;
    }

    _FORCE_INLINE_ void set_self(const RID &p_self) {
        self = p_self;
    }

    _FORCE_INLINE_ RID get_self() const {
        return self;
    }

    InfiniteBus(uint64_t prime) : prime_num(prime), num(1) {};
    ~InfiniteBus() {};
}

----------------------------------------

TITLE: Ending the Game in GDScript
DESCRIPTION: This code snippet shows how to end the game when the player is hit in GDScript. It stops the MobTimer to prevent further enemy spawning.

LANGUAGE: gdscript
CODE:
func _on_player_hit():
    $MobTimer.stop()

----------------------------------------

TITLE: Printing Text in Godot C++
DESCRIPTION: Demonstrates various methods for printing text to standard output in Godot's C++ codebase, including regular printing, verbose printing, rich text printing, and error/warning printing.

LANGUAGE: cpp
CODE:
print_line("Message");

print_line("There are", 123, "nodes");

print_verbose("Message");

print_line_rich("[b]Bold[/b], [color=red]Red text[/color]")

ERR_PRINT("Message");
WARN_PRINT("Message");

ERR_PRINT_ONCE("Message");
WARN_PRINT_ONCE("Message");

----------------------------------------

TITLE: SubViewport Clear Mode Enumeration
DESCRIPTION: Defines the clear mode options for the SubViewport render target, controlling how the viewport is cleared before rendering.

LANGUAGE: GDScript
CODE:
enum ClearMode {
    CLEAR_MODE_ALWAYS = 0,  # Always clear render target before drawing
    CLEAR_MODE_NEVER = 1,   # Never clear render target
    CLEAR_MODE_ONCE = 2     # Clear render target once, then switch to NEVER
}

----------------------------------------

TITLE: Initializing Post-Process Shader Effect in GDScript
DESCRIPTION: Defines a PostProcessShader class that extends CompositorEffect, setting up the necessary properties and methods for a custom post-processing effect.

LANGUAGE: GDScript
CODE:
@tool
extends CompositorEffect
class_name PostProcessShader

const template_shader: String = """
#version 450

// Invocations in the (x, y, z) dimension
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba16f, set = 0, binding = 0) uniform image2D color_image;

// Our push constant
layout(push_constant, std430) uniform Params {
    vec2 raster_size;
    vec2 reserved;
} params;

// The code we want to execute in each invocation
void main() {
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = ivec2(params.raster_size);

    if (uv.x >= size.x || uv.y >= size.y) {
        return;
    }

    vec4 color = imageLoad(color_image, uv);

    #COMPUTE_CODE

    imageStore(color_image, uv, color);
}
"""

@export_multiline var shader_code: String = "":
    set(value):
        mutex.lock()
        shader_code = value
        shader_is_dirty = true
        mutex.unlock()

var rd: RenderingDevice
var shader: RID
var pipeline: RID

var mutex: Mutex = Mutex.new()
var shader_is_dirty: bool = true

----------------------------------------

TITLE: Configuring Build Task in VSCode for Godot
DESCRIPTION: Task configuration for building Godot engine using SCons. Enables debugging with breakpoints through dev_build flag.

LANGUAGE: javascript
CODE:
{
  "label": "build",
  "group": "build",
  "type": "shell",
  "command": "scons",
  "args": [
    // enable for debugging with breakpoints
    "dev_build=yes",
  ],
  "problemMatcher": "$msCompile"
}

----------------------------------------

TITLE: Cloning Godot Repository for Editor Icons
DESCRIPTION: Command to clone the Godot repository containing all the editor icons. This is the first step in creating custom icons for the Godot engine editor.

LANGUAGE: bash
CODE:
git clone https://github.com/godotengine/godot.git

----------------------------------------

TITLE: Enum and Flag Exports
DESCRIPTION: Examples of exporting enums and bit flags

LANGUAGE: csharp
CODE:
[Flags]
public enum SpellElements
{
    Fire = 1 << 1,
    Water = 1 << 2,
    Earth = 1 << 3,
    Wind = 1 << 4,
    FireAndWater = Fire | Water,
}

[Export]
public SpellElements MySpellElements { get; set; }

----------------------------------------

TITLE: Building Managed Libraries
DESCRIPTION: Command to build the managed .NET libraries for Godot

LANGUAGE: shell
CODE:
./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin

----------------------------------------

TITLE: Installing Vulkan Validation Layers on Gentoo
DESCRIPTION: Package installation command for Vulkan validation layers on Gentoo using emerge

LANGUAGE: shell
CODE:
emerge -an media-libs/vulkan-layers

----------------------------------------

TITLE: Creating and Using HMACContext in C#
DESCRIPTION: This snippet shows how to use the HMACContext class in C# to create an HMAC by initializing with a key, updating with message parts, and finishing to get the result.

LANGUAGE: csharp
CODE:
using Godot;
using System.Diagnostics;

public partial class MyNode : Node
{
    private HmacContext _ctx = new HmacContext();

    public override void _Ready()
    {
        byte[] key = "supersecret".ToUtf8Buffer();
        Error err = _ctx.Start(HashingContext.HashType.Sha256, key);
        Debug.Assert(err == Error.Ok);
        byte[] msg1 = "this is ".ToUtf8Buffer();
        byte[] msg2 = "super duper secret".ToUtf8Buffer();
        err = _ctx.Update(msg1);
        Debug.Assert(err == Error.Ok);
        err = _ctx.Update(msg2);
        Debug.Assert(err == Error.Ok);
        byte[] hmac = _ctx.Finish();
        GD.Print(hmac.HexEncode());
    }
}

----------------------------------------

TITLE: Installing Android Editor APK
DESCRIPTION: ADB command to install the compiled Godot editor APK on an Android device

LANGUAGE: shell
CODE:
adb install ./bin/android_editor_builds/android_editor-release.apk

----------------------------------------

TITLE: Defining WebRTCPeerConnectionExtension Class Methods in GDScript
DESCRIPTION: This snippet shows the method signatures for the WebRTCPeerConnectionExtension class. These are virtual methods that can be overridden to implement custom WebRTC peer connection functionality.

LANGUAGE: GDScript
CODE:
func _add_ice_candidate(p_sdp_mid_name: String, p_sdp_mline_index: int, p_sdp_name: String) -> Error:
    pass

func _close() -> void:
    pass

func _create_data_channel(p_label: String, p_config: Dictionary) -> WebRTCDataChannel:
    pass

func _create_offer() -> Error:
    pass

func _get_connection_state() -> int:
    pass

func _get_gathering_state() -> int:
    pass

func _get_signaling_state() -> int:
    pass

func _initialize(p_config: Dictionary) -> Error:
    pass

func _poll() -> Error:
    pass

func _set_local_description(p_type: String, p_sdp: String) -> Error:
    pass

func _set_remote_description(p_type: String, p_sdp: String) -> Error:
    pass

----------------------------------------

TITLE: Creating Document Title and Reference in RST
DESCRIPTION: Shows how to properly format a page title with Sphinx reference name in RST format.

LANGUAGE: rst
CODE:
.. _doc_insert_your_title_here:\n\nInsert your title here\n======================

----------------------------------------

TITLE: Converting Git Renames to CSV
DESCRIPTION: Command to generate redirect entries by comparing file renames between Git branches (stable and 3.4)

LANGUAGE: shell
CODE:
python convert_git_renames_to_csv.py stable 3.4

----------------------------------------

TITLE: Adding Collision Exception in PhysicsBody2D
DESCRIPTION: Adds a body to the list of bodies that this PhysicsBody2D can't collide with. This method takes a Node as a parameter, which should be the body to exclude from collisions.

LANGUAGE: GDScript
CODE:
add_collision_exception_with(body: Node)

----------------------------------------

TITLE: Retrieving Godot Engine License Information
DESCRIPTION: These snippets show how to retrieve license information for Godot Engine and its third-party components using the Engine singleton. This ensures that the license information is always up-to-date with the current engine version.

LANGUAGE: gdscript
CODE:
Engine.get_license_text()

LANGUAGE: gdscript
CODE:
Engine.get_license_info()

LANGUAGE: gdscript
CODE:
Engine.get_copyright_info()

----------------------------------------

TITLE: Converting PackedByteArray to Base64
DESCRIPTION: Method to convert a PackedByteArray to a Base64-encoded string representation.

LANGUAGE: GDScript
CODE:
raw_to_base64(array: PackedByteArray) -> String

----------------------------------------

TITLE: Clearing Selection in GDScript
DESCRIPTION: Clears the current editor selection.

LANGUAGE: GDScript
CODE:
clear()

----------------------------------------

TITLE: Finishing StreamPeerGZIP Operation
DESCRIPTION: Finalizes the stream, compressing or decompressing any remaining buffered data. This should be called when the stream operation is complete.

LANGUAGE: GDScript
CODE:
finish() -> Error

----------------------------------------

TITLE: Getting VoxelGI Bounds Information
DESCRIPTION: Example showing how to retrieve bounds information from VoxelGIData

LANGUAGE: gdscript
CODE:
var bounds: AABB = voxel_data.get_bounds()
var octree_size: Vector3 = voxel_data.get_octree_size()
var cell_transform: Transform3D = voxel_data.get_to_cell_xform()

----------------------------------------

TITLE: Adding Points to AStar3D (C#)
DESCRIPTION: Shows how to add points to an AStar3D instance in C#.

LANGUAGE: csharp
CODE:
var astar = new AStar3D();
astar.AddPoint(1, new Vector3(1, 0, 0), 4); // Adds the point (1, 0, 0) with weight_scale 4 and id 1

----------------------------------------

TITLE: Property Declarations for RDVertexAttribute
DESCRIPTION: Defines the core properties of a vertex attribute including format, frequency, location, offset and stride settings for vertex buffer interpretation.

LANGUAGE: RST
CODE:
+--------------------------------------------------------------+--------------------------------------------------------------+---------+
| DataFormat                                                     | format                                                        | "218"   |
+--------------------------------------------------------------+--------------------------------------------------------------+---------+
| VertexFrequency                                               | frequency                                                     | "0"     |
+--------------------------------------------------------------+--------------------------------------------------------------+---------+
| int                                                           | location                                                      | "0"     |
+--------------------------------------------------------------+--------------------------------------------------------------+---------+
| int                                                           | offset                                                        | "0"     |
+--------------------------------------------------------------+--------------------------------------------------------------+---------+
| int                                                           | stride                                                        | "0"     |
+--------------------------------------------------------------+--------------------------------------------------------------+---------+

----------------------------------------

TITLE: Setting CollisionPolygon3D Properties
DESCRIPTION: Shows the property definitions for CollisionPolygon3D, including debug color, depth, margin, and polygon array settings for defining the collision shape.

LANGUAGE: GDScript
CODE:
# Property examples
debug_color = Color(0, 0, 0, 0)
debug_fill = true
depth = 1.0
disabled = false
margin = 0.04
polygon = PackedVector2Array()

----------------------------------------

TITLE: Constructing a PackedInt64Array
DESCRIPTION: Different ways to construct a PackedInt64Array - empty, from another PackedInt64Array, or from a generic Array.

LANGUAGE: gdscript
CODE:
# Empty array
var arr1 = PackedInt64Array()

# From another PackedInt64Array
var arr2 = PackedInt64Array(arr1)

# From generic Array
var arr3 = PackedInt64Array([1, 2, 3])

----------------------------------------

TITLE: AudioSample Class Definition in RST
DESCRIPTION: ReStructuredText markup defining the AudioSample class documentation, including inheritance information and experimental status warning.

LANGUAGE: rst
CODE:
.. _class_AudioSample:\n\nAudioSample\n===========\n\n**Experimental:** This class may be changed or removed in future versions.\n\n**Inherits:** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`\n\nBase class for audio samples.

----------------------------------------

TITLE: Getting the current call stack
DESCRIPTION: Demonstrates how to retrieve and print the current call stack using get_stack.

LANGUAGE: GDScript
CODE:
func _ready():
    foo()

func foo():
    bar()

func bar():
    print(get_stack())

----------------------------------------

TITLE: Retrieving Skeleton RID in GDScript
DESCRIPTION: Gets the RID of the skeleton owned by this SkinReference. This RID is created by the RenderingServer and used for internal rendering purposes.

LANGUAGE: GDScript
CODE:
func get_skeleton() -> RID:

----------------------------------------

TITLE: Array Methods in GDScript
DESCRIPTION: Examples of using various Array methods in GDScript.

LANGUAGE: gdscript
CODE:
var numbers = [1, 2, 3]
var extra = [4, 5, 6]
numbers.append_array(extra)
print(numbers) # Prints [1, 2, 3, 4, 5, 6]

print([1, 4, 5, 8].filter(func(number): return number % 2 == 0)) # Prints [4, 8]

print([1, 2, 3].map(func(number): return number * 2)) # Prints [2, 4, 6]

----------------------------------------

TITLE: Property Declaration - AudioEffectRecord Format
DESCRIPTION: Defines the format property for specifying the recording format of the audio sample.

LANGUAGE: RST
CODE:
Format format = 1

----------------------------------------

TITLE: Playing Animations with AnimationNodeOneShot in GDScript
DESCRIPTION: Examples of controlling one-shot animations including playing, aborting, fading out and checking states using GDScript.

LANGUAGE: gdscript
CODE:
# Play child animation connected to "shot" port.
animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_FIRE)
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/request"] = AnimationNodeOneShot.ONE_SHOT_REQUEST_FIRE

# Abort child animation connected to "shot" port.
animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_ABORT)
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/request"] = AnimationNodeOneShot.ONE_SHOT_REQUEST_ABORT

# Abort child animation with fading out connected to "shot" port.
animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_FADE_OUT)
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/request"] = AnimationNodeOneShot.ONE_SHOT_REQUEST_FADE_OUT

# Get current state (read-only).
animation_tree.get("parameters/OneShot/active")
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/active"]

# Get current internal state (read-only).
animation_tree.get("parameters/OneShot/internal_active")
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/internal_active"]

----------------------------------------

TITLE: RST Property Documentation - button_index
DESCRIPTION: RST documentation defining the button_index property which identifies gamepad buttons using JoyButton constants.

LANGUAGE: RST
CODE:
:ref:`JoyButton<enum_@GlobalScope_JoyButton>` **button_index** = ``0`` :ref:`🔗<class_InputEventJoypadButton_property_button_index>`

----------------------------------------

TITLE: Cloning a Forked Godot Repository
DESCRIPTION: Commands to clone a forked Godot repository and set up the upstream remote.

LANGUAGE: shell
CODE:
git clone https://github.com/USERNAME/godot
cd godot
git remote add upstream https://github.com/godotengine/godot
git fetch upstream

----------------------------------------

TITLE: Updating a Branch with Upstream Changes
DESCRIPTION: Command to update a branch with changes from the upstream master branch using rebase.

LANGUAGE: shell
CODE:
git pull --rebase upstream master

----------------------------------------

TITLE: Rebasing a Branch onto Another Branch
DESCRIPTION: Command to rebase a branch onto a different base branch, useful for moving pull requests.

LANGUAGE: shell
CODE:
git rebase -i --onto master 4.2
git push --force origin better-project-manager

----------------------------------------

TITLE: Git Command Pattern for Pull Request Checkout
DESCRIPTION: Generic command pattern for fetching a pull request branch from the upstream repository. Requires git to be installed and the upstream remote to be configured.

LANGUAGE: bash
CODE:
git fetch upstream pull/PR_NUMBER/head:BRANCH_NAME

----------------------------------------

TITLE: Registering Module Types in C++
DESCRIPTION: Header and implementation files for registering the custom module types with Godot engine.

LANGUAGE: C++
CODE:
// register_types.h
#include "modules/register_module_types.h"

void initialize_summator_module(ModuleInitializationLevel p_level);
void uninitialize_summator_module(ModuleInitializationLevel p_level);

// register_types.cpp
#include "register_types.h"
#include "core/object/class_db.h"
#include "summator.h"

void initialize_summator_module(ModuleInitializationLevel p_level) {
    if (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) {
        return;
    }
    ClassDB::register_class<Summator>();
}

void uninitialize_summator_module(ModuleInitializationLevel p_level) {
    if (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) {
        return;
    }
   // Nothing to do here in this example.
}

----------------------------------------

TITLE: Installing Python Requirements
DESCRIPTION: Command to install required Python packages from requirements.txt file using pip3

LANGUAGE: shell
CODE:
pip3 install -r requirements.txt

----------------------------------------

TITLE: GDScript EBNF Grammar Definition
DESCRIPTION: Complete EBNF grammar specification for GDScript, including program structure, declarations, statements, expressions, and literals. The grammar covers syntax rules for class definitions, methods, variables, control structures, and operators with their precedence levels.

LANGUAGE: ebnf
CODE:
(* GDScript EBNF grammar.
       Uppercase words are terminals generated by the tokenizer.
       INDENT/DEDENT are not generated by the tokenizer yet, but they are added
       here for reading convenience.
       Naturally, this only cover syntax. Semantics can't be inferred from this
       description.
    *)

    program = [ inheritance NEWLINE ] [ className ] { topLevelDecl } ;

    inheritance = "extends" ( IDENTIFIER | STRING ) { "." IDENTIFIER } ;
    className = "class_name" IDENTIFIER [ "," STRING ] NEWLINE ;

    topLevelDecl
        = classVarDecl
        | constDecl
        | signalDecl
        | enumDecl
        | methodDecl
        | constructorDecl
        | innerClass
        | "tool"
        ;

    classVarDecl = [ "onready" ] [ export ] "var" IDENTIFIER [ ":" typeHint ]
        [ "=" expression ] [ setget ] NEWLINE ;
    setget = "setget" [ IDENTIFIER ] [ "," IDENTIFIER] ;
    export = "export" [ "(" [ BUILTINTYPE | IDENTIFIER { "," literal } ] ")" ] ;
    typeHint = BUILTINTYPE | IDENTIFIER ;

    constDecl = "const" IDENTIFIER [ ":" typeHint ] "=" expression NEWLINE ;

    signalDecl = "signal" IDENTIFIER [ signalParList ] NEWLINE ;
    signalParList = "(" [ IDENTIFIER { "," IDENTIFIER } ] ")" ;

    enumDecl = "enum" [ IDENTIFIER ] "{" [ IDENTIFIER [ "=" INTEGER ]
        { "," IDENTIFIER [ "=" INTEGER ] } [ "," ] ] "}" NEWLINE ;

    methodDecl = [ rpc ] [ "static" ] "func" IDENTIFIER "(" [ parList ] ")"
        [ "->" typeHint] ":" stmtOrSuite ;
    parList = parameter { "," parameter } ;
    parameter = [ "var" ] IDENTIFIER [ ":" typeHint ] [ "=" expression ] ;
    rpc = "remote" | "master" | "puppet"
        | "remotesync" | "mastersync"  | "puppetsync";

    constructorDecl = "func" IDENTIFIER "(" [ parList ] ")"
        [ "." "(" [ argList ] ")" ] ":" stmtOrSuite ;
    argList = expression { "," expression } ;

    innerClass = "class" IDENTIFIER [ inheritance ] ":" NEWLINE
        INDENT [ inheritance NEWLINE ] topLevelDecl { topLevelDecl } DEDENT ;

    stmtOrSuite = stmt | NEWLINE INDENT suite DEDENT ;
    suite = stmt { stmt };

    stmt
        = varDeclStmt
        | ifStmt
        | forStmt
        | whileStmt
        | matchStmt
        | flowStmt
        | assignmentStmt
        | exprStmt
        | assertStmt
        | yieldStmt
        | preloadStmt
        | "breakpoint" stmtEnd
        | "pass" stmtEnd
        ;
    stmtEnd = NEWLINE | ";" ;

    ifStmt = "if" expression ":" stmtOrSuite { "elif" expression ":" stmtOrSuite }
        [ "else" ":" stmtOrSuite ] ;
    whileStmt = "while" expression ":" stmtOrSuite;
    forStmt = "for" IDENTIFIER "in" expression ":" stmtOrSuite ;

    matchStmt = "match" expression ":" NEWLINE INDENT matchBlock DEDENT;
    matchBlock = patternList ":" stmtOrSuite { patternList ":" stmtOrSuite };
    patternList = pattern { "," pattern } ;
    pattern = literal | BUILTINTYPE | CONSTANT | "_" | bindingPattern
        | arrayPattern | dictPattern ;
    bindingPattern = "var" IDENTIFIER ;
    arrayPattern = "[" [ pattern { "," pattern } [ ".." ] ] "]" ;
    dictPattern = "{" [ keyValuePattern ] { "," keyValuePattern } [ ".." ] "}" ;
    keyValuePattern = STRING [ ":" pattern ] ;

    flowStmt
        = "continue" stmtEnd
        | "break" stmtEnd
        | "return" [ expression ] stmtEnd
        ;

    assignmentStmt = subscription ( "=" | "+=" | "-=" | "*=" | "/="
    | "%=" | "&=" | "|=" | "^=" ) expression stmtEnd;
    varDeclStmt = "var" IDENTIFIER [ "=" expression ] stmtEnd;

    assertStmt = "assert" "(" expression [ "," STRING ] ")" stmtEnd ;
    yieldStmt = "yield" "(" [ expression "," expression ] ")" ;
    preloadStmt = "preload" "(" CONSTANT ")" ;

    expression = cast [ "[" expression "]" ] ;
    cast = ternaryExpr [ "as" typeHint ];
    ternaryExpr = logicOr [ "if" logicOr "else" logicOr ] ;
    logicOr = logicAnd { ( "or" | "||" ) logicAnd } ;
    logicAnd = logicNot { ( "and" | "&&" ) logicNot };
    logicNot = ( "!" | "not" ) logicNot | in;
    in = comparison { "in" comparison };
    comparison = bitOr { ( "<" | ">" | "<=" | ">=" | "==" | "!=" ) bitOr } ;
    bitOr = bitXor { "|" bitXor } ;
    bitXor = bitAnd { "^" bitAnd } ;
    bitAnd = bitShift { "&" bitShift } ;
    bitShift = minus { ( "<<" | ">>" ) minus } ;
    minus = plus { "-" plus } ;
    plus = factor { "+" factor } ;
    factor = sign { ( "*" | "/" | "%" ) sign } ;
    sign = ( "-" | "+" ) sign | bitNot ;
    bitNot = "~" bitNot | is ;
    is = call [ "is" ( IDENTIFIER | BUILTINTYPE ) ] ;
    call
        = (attribute [ "(" [ argList ] ")" ])
        | "." IDENTIFIER "(" [ argList ] ")"
        | "$" ( STRING | IDENTIFIER { '/' IDENTIFIER } );
    attribute = subscription { "." IDENTIFIER } ;
    subscription = primary [ "[" expression "]" ] ;
    primary = "true" | "false" | "null" | "self" | literal | arrayDecl
        | dictDecl | "(" expression ")" ;

    literal = STRING | NUMBER | IDENTIFIER | BUILTINTYPE
        | "PI" | "TAU" | "NAN" | "INF" ;
    arrayDecl = "[" [ expression { "," expression } "," ] "]" ;
    dictDecl = "{" [ keyValue { "," keyValue } "," ] "}" ;
    keyValue
        = expression ":" expression
        | IDENTIFIER "=" expression
        ;

----------------------------------------

TITLE: Godot Quick Exit Command
DESCRIPTION: Command line option to exit Godot immediately after startup for benchmarking startup/shutdown performance.

LANGUAGE: bash
CODE:
--quit

----------------------------------------

TITLE: FFmpeg Video Compression with Resolution and Framerate Control
DESCRIPTION: Extended FFmpeg command for compressing video while also adjusting resolution to 1280x720 and framerate to 30 FPS.

LANGUAGE: bash
CODE:
ffmpeg -i input.mp4 -crf 23 -vf scale=1280:-2 -r 30 output.webm

----------------------------------------

TITLE: XML Structure for Godot Class Reference
DESCRIPTION: Example of the XML structure used for documenting a Godot class, including brief description, full description, methods, members, and constants.

LANGUAGE: xml
CODE:
<class name="Node2D" inherits="CanvasItem" version="4.0">
    <brief_description>
        A 2D game object, inherited by all 2D-related nodes. Has a position, rotation, scale, and Z index.
    </brief_description>
    <description>
        A 2D game object, with a transform (position, rotation, and scale). All 2D nodes, including physics objects and sprites, inherit from Node2D. Use Node2D as a parent node to move, scale and rotate children in a 2D project. Also gives control of the node's render order.
    </description>
    <tutorials>
        <link title="Custom drawing in 2D">https://docs.godotengine.org/en/latest/tutorials/2d/custom_drawing_in_2d.html</link>
        <link title="All 2D Demos">https://github.com/godotengine/godot-demo-projects/tree/master/2d</link>
    </tutorials>
    <methods>
        <method name="apply_scale">
            <return type="void">
            </return>
            <argument index="0" name="ratio" type="Vector2">
            </argument>
            <description>
                Multiplies the current scale by the [code]ratio[/code] vector.
            </description>
        </method>
        [...]
        <method name="translate">
            <return type="void">
            </return>
            <argument index="0" name="offset" type="Vector2">
            </argument>
            <description>
                Translates the node by the given [code]offset[/code] in local coordinates.
            </description>
        </method>
    </methods>
    <members>
        <member name="global_position" type="Vector2" setter="set_global_position" getter="get_global_position">
            Global position.
        </member>
        [...]
        <member name="z_index" type="int" setter="set_z_index" getter="get_z_index" default="0">
            Z index. Controls the order in which the nodes render. A node with a higher Z index will display in front of others.
        </member>
    </members>
    <constants>
    </constants>
</class>

----------------------------------------

TITLE: Configuring Pseudolocalization at Runtime in GDScript
DESCRIPTION: This snippet demonstrates how to enable specific pseudolocalization properties and reload the configuration at runtime. It enables 'replace_with_accents' and 'double_vowels' settings, then reloads the pseudolocalization.

LANGUAGE: GDScript
CODE:
ProjectSettings.set_setting("internationalization/pseudolocalization/replace_with_accents", true)
ProjectSettings.set_setting("internationalization/pseudolocalization/double_vowels", true)
TranslationServer.reload_pseudolocalization()

----------------------------------------

TITLE: Documentation Generation Command
DESCRIPTION: Command to generate XML documentation files for GDExtension classes using the Godot editor binary.

LANGUAGE: none
CODE:
godot --doctool ../ --gdextension-docs

----------------------------------------

TITLE: Connecting to GDScript Signals from C# in Godot
DESCRIPTION: Demonstrates how to connect to GDScript signals from C# in Godot using the Connect method and Callable.From.

LANGUAGE: csharp
CODE:
myGDScriptNode.Connect("my_signal", Callable.From(MySignalHandler));

myGDScriptNode.Connect("my_signal_with_params", Callable.From<string, int>(MySignalWithParamsHandler));

----------------------------------------

TITLE: Querying Product Details in Google Play Billing
DESCRIPTION: Implementation of product details query functionality to retrieve available items for purchase.

LANGUAGE: gdscript
CODE:
func _on_connected():
  payment.querySkuDetails(["my_iap_item"], "inapp") # "subs" for subscriptions

func _on_product_details_query_completed(product_details):
  for available_product in product_details:
    print(available_product)

func _on_product_details_query_error(response_id, error_message, products_queried):
    print("on_product_details_query_error id:", response_id, " message: ", 
            error_message, " products: ", products_queried)

----------------------------------------

TITLE: GDScript Model Loading Implementation
DESCRIPTION: GDScript code for loading and managing GLTF models in response to Android app signals.

LANGUAGE: gdscript
CODE:
extends Node3D

var current_gltf_node: Node3D = null

func _ready():
  _load_gltf("res://gltfs/food_kit/turkey.glb")

  var appPlugin = Engine.get_singleton("AppPlugin")
  if appPlugin:
    print("App plugin is available")
    appPlugin.connect("show_gltf", _load_gltf)
  else:
    print("App plugin is not available")

func _load_gltf(gltf_path: String):
  if current_gltf_node != null:
    remove_child(current_gltf_node)

  current_gltf_node = load(gltf_path).instantiate()

  add_child(current_gltf_node)

----------------------------------------

TITLE: Converting PNG to ICO using ImageMagick
DESCRIPTION: This command uses ImageMagick to convert a PNG image to an hiDPI-friendly ICO file with multiple sizes (256, 128, 64, 48, 32, 16 pixels).

LANGUAGE: shell
CODE:
magick convert icon.png -define icon:auto-resize=256,128,64,48,32,16 icon.ico

----------------------------------------

TITLE: Manipulating NavigationLayers in 3D C#
DESCRIPTION: This snippet shows how to change navigation layers for regions and agents, and how to perform path queries with specific layer restrictions in 3D using C#.

LANGUAGE: csharp
CODE:
using Godot;

public partial class MyNode3D : Node3D
{
    private Rid _map;
    private Vector3 _startPosition;
    private Vector3 _targetPosition;

    private void ChangeLayers()
    {
        NavigationRegion3D region = GetNode<NavigationRegion3D>("NavigationRegion3D");
        // Enables the 4th layer for this region.
        region.NavigationLayers = EnableBitmaskInx(region.NavigationLayers, 4);
        // Disables the 1st layer for this region.
        region.NavigationLayers = DisableBitmaskInx(region.NavigationLayers, 1);

        NavigationAgent3D agent = GetNode<NavigationAgent3D>("NavigationAgent2D");
        // Make future path queries of this agent ignore regions with the 4th layer.
        agent.NavigationLayers = DisableBitmaskInx(agent.NavigationLayers, 4);

        uint pathQueryNavigationLayers = 0;
        pathQueryNavigationLayers = EnableBitmaskInx(pathQueryNavigationLayers, 2);
        // Get a path that only considers 2nd layer regions.
        Vector3[] path = NavigationServer3D.MapGetPath(
            _map,
            _startPosition,
            _targetPosition,
            true,
            pathQueryNavigationLayers
        );
    }

    private static bool IsBitmaskInxEnabled(uint bitmask, int index)
    {
        return (bitmask & (1 << index)) != 0;
    }

    private static uint EnableBitmaskInx(uint bitmask, int index)
    {
        return bitmask | (1u << index);
    }

    private static uint DisableBitmaskInx(uint bitmask, int index)
    {
        return bitmask & ~(1u << index);
    }
}

----------------------------------------

TITLE: Creating 3D Navigation Obstacles with Source Geometry
DESCRIPTION: Shows how to create and configure 3D navigation obstacles using source geometry data for navigation mesh baking.

LANGUAGE: gdscript
CODE:
var obstacle_outline = PackedVector3Array([
    Vector3(-5, 0, -5),
    Vector3(5, 0, -5),
    Vector3(5, 0, 5),
    Vector3(-5, 0, 5)
])

var navigation_mesh = NavigationMesh.new()
var source_geometry = NavigationMeshSourceGeometryData3D.new()

NavigationServer3D.parse_source_geometry_data(navigation_mesh, source_geometry, $MyTestRootNode)

var obstacle_elevation: float = $MyTestObstacleNode.global_position.y
var obstacle_height: float = 50.0
var obstacle_carve: bool = true

source_geometry.add_projected_obstruction(obstacle_outline, obstacle_elevation, obstacle_height, obstacle_carve)

NavigationServer3D.bake_from_source_geometry_data(navigation_mesh, source_geometry)

LANGUAGE: csharp
CODE:
Vector3[] obstacleOutline =
[
    new Vector3(-5, 0, -5),
    new Vector3(5, 0, -5),
    new Vector3(5, 0, 5),
    new Vector3(-5, 0, 5),
];

var navigationMesh = new NavigationMesh();
var sourceGeometry = new NavigationMeshSourceGeometryData3D();

NavigationServer3D.ParseSourceGeometryData(navigationMesh, sourceGeometry, GetNode<Node3D>("MyTestRootNode"));

float obstacleElevation = GetNode<Node3D>("MyTestObstacleNode").GlobalPosition.Y;
float obstacleHeight = 50.0f;
bool obstacleCarve = true;

sourceGeometry.AddProjectedObstruction(obstacleOutline, obstacleElevation, obstacleHeight, obstacleCarve);
NavigationServer3D.BakeFromSourceGeometryData(navigationMesh, sourceGeometry);

----------------------------------------

TITLE: Fog Shader Global Built-ins
DESCRIPTION: Global built-in variables available everywhere in fog shaders, including custom functions. These include time, mathematical constants, and core engine values.

LANGUAGE: glsl
CODE:
in float TIME    // Global time in seconds since engine start
in float PI      // PI constant (3.141592)
in float TAU     // TAU constant (6.283185)
in float E       // Euler's number (2.718281)

----------------------------------------

TITLE: Manual Vertex Transform Example in GLSL
DESCRIPTION: Demonstrates how to manually transform vertex coordinates when skip_vertex_transform render mode is enabled.

LANGUAGE: GLSL
CODE:
shader_type canvas_item;
render_mode skip_vertex_transform;

void vertex() {
    VERTEX = (MODEL_MATRIX * vec4(VERTEX, 0.0, 1.0)).xy;
}

----------------------------------------

TITLE: Optimized Static Sky Rendering with Cubemap Caching
DESCRIPTION: Shows how to optimize sky rendering by using the radiance cubemap to cache static sky calculations, reducing per-frame computation overhead.

LANGUAGE: glsl
CODE:
shader_type sky;

void sky() {
    if (AT_CUBEMAP_PASS) {
        vec3 dir = EYEDIR;

        vec4 col = vec4(0.0);

        // Complex color calculation

        COLOR = col.xyz;
        ALPHA = 1.0;
    } else {
        COLOR = texture(RADIANCE, EYEDIR).rgb;
    }
}

----------------------------------------

TITLE: Creating Inspector Plugin Handler in Godot
DESCRIPTION: Inspector plugin implementation that handles property parsing and determines which properties to customize in the inspector interface.

LANGUAGE: gdscript
CODE:
extends EditorInspectorPlugin

var RandomIntEditor = preload("res://addons/my_inspector_plugin/random_int_editor.gd")


func _can_handle(object):
    return true


func _parse_property(object, type, name, hint_type, hint_string, usage_flags, wide):
    if type == TYPE_INT:
        add_property_editor(name, RandomIntEditor.new())
        return true
    else:
        return false

LANGUAGE: csharp
CODE:
#if TOOLS
using Godot;

public partial class MyInspectorPlugin : EditorInspectorPlugin
{
    public override bool _CanHandle(GodotObject @object)
    {
        return true;
    }

    public override bool _ParseProperty(GodotObject @object, Variant.Type type,
        string name, PropertyHint hintType, string hintString,
        PropertyUsageFlags usageFlags, bool wide)
    {
        if (type == Variant.Type.Int)
        {
            AddPropertyEditor(name, new RandomIntEditor());
            return true;
        }
        return false;
    }
}
#endif

----------------------------------------

TITLE: Creating a Local RenderingDevice in GDScript
DESCRIPTION: This snippet demonstrates how to create a local RenderingDevice and load a compute shader file in GDScript.

LANGUAGE: gdscript
CODE:
var rd := RenderingServer.create_local_rendering_device()

var shader_file := load("res://compute_example.glsl")
var shader_spirv: RDShaderSPIRV = shader_file.get_spirv()
var shader := rd.shader_create_from_spirv(shader_spirv)

----------------------------------------

TITLE: Basic Particle Shader Type Declaration
DESCRIPTION: Declares the shader type as particles for GPU particle processing

LANGUAGE: glsl
CODE:
shader_type particles

----------------------------------------

TITLE: Example Godot Project File Structure
DESCRIPTION: Shows a typical Godot project directory structure with basic game components including project configuration file, scene files, scripts, and assets.

LANGUAGE: none
CODE:
/project.godot
/enemy/enemy.tscn
/enemy/enemy.gd
/enemy/enemysprite.png
/player/player.gd

----------------------------------------

TITLE: Creating Static Triangle with ImmediateMesh
DESCRIPTION: Shows how to create a static triangle mesh using ImmediateMesh in the _ready() function. Sets up normal and UV attributes for each vertex.

LANGUAGE: gdscript
CODE:
extends MeshInstance3D

func _ready():
    # Begin draw.
    mesh.surface_begin(Mesh.PRIMITIVE_TRIANGLES)

    # Prepare attributes for add_vertex.
    mesh.surface_set_normal(Vector3(0, 0, 1))
    mesh.surface_set_uv(Vector2(0, 0))
    # Call last for each vertex, adds the above attributes.
    mesh.surface_add_vertex(Vector3(-1, -1, 0))

    mesh.surface_set_normal(Vector3(0, 0, 1))
    mesh.surface_set_uv(Vector2(0, 1))
    mesh.surface_add_vertex(Vector3(-1, 1, 0))

    mesh.surface_set_normal(Vector3(0, 0, 1))
    mesh.surface_set_uv(Vector2(1, 1))
    mesh.surface_add_vertex(Vector3(1, 1, 0))

    # End drawing.
    mesh.surface_end()

----------------------------------------

TITLE: Generating Random Numbers in Godot
DESCRIPTION: Shows various methods to generate random numbers in Godot, including integers and floating-point numbers within specific ranges.

LANGUAGE: gdscript
CODE:
# Prints a random integer between 0 and 49.
print(randi() % 50)

# Prints a random integer between 10 and 60.
print(randi() % 51 + 10)

# Prints a random floating-point number between -4 and 6.5.
print(randf_range(-4, 6.5))

# Prints a random integer between -10 and 10.
print(randi_range(-10, 10))

LANGUAGE: csharp
CODE:
// Prints a random integer between 0 and 49.
GD.Print(GD.Randi() % 50);

// Prints a random integer between 10 and 60.
GD.Print(GD.Randi() % 51 + 10);

// Prints a random floating-point number between -4 and 6.5.
GD.Print(GD.RandRange(-4.0, 6.5));

// Prints a random integer number between -10 and 10.
GD.Print(GD.RandRange(-10, 10));

----------------------------------------

TITLE: OpenXR Center on HMD Stage Reference
DESCRIPTION: Code example showing how to handle recentering in Stage reference space using XRServer's center_on_hmd function. Demonstrates two approaches: basic resetting and height-preserving reset.

LANGUAGE: RST
CODE:
XRServer.center_on_hmd(XRServer.RESET_BUT_KEEP_TILT, false)
XRServer.center_on_hmd(XRServer.RESET_BUT_KEEP_TILT, true)

----------------------------------------

TITLE: Setting Minimum Size for GUI Control in C#
DESCRIPTION: Shows how to set a minimum size for a custom GUI control using _GetMinimumSize() method in C#.

LANGUAGE: csharp
CODE:
public override Vector2 _GetMinimumSize()
{
    return new Vector2(20, 20);
}

----------------------------------------

TITLE: Reference Links in RST Documentation
DESCRIPTION: RestructuredText reference links for cross-referencing other documentation sections.

LANGUAGE: rst
CODE:
.. _doc_2d_meshes:\n\n.. seealso:: If you are interested in displaying 3D meshes on a 2D viewport, see the :ref:`doc_viewport_as_texture` tutorial.

----------------------------------------

TITLE: Calculating World Space Coordinates in GLSL Shader (Incorrect Method)
DESCRIPTION: Example showing an incorrect way to calculate world space coordinates in a shader's fragment function when using double-precision builds.

LANGUAGE: glsl
CODE:
vec3 world = (INV_VIEW_MATRIX * vec4(VERTEX, 1.0)).xyz;

----------------------------------------

TITLE: Basic Godot Engine Compilation Command
DESCRIPTION: The basic SCons command to compile Godot engine for the current platform. This is the simplest form of compilation command without any additional options.

LANGUAGE: shell
CODE:
scons

----------------------------------------

TITLE: Seamless Texture Mapping - GLSL
DESCRIPTION: Shader code to create seamless texture mapping using trigonometric functions.

LANGUAGE: glsl
CODE:
COLOR.xyz = vec3(sin(UV.x * 3.14159 * 4.0) * cos(UV.y * 3.14159 * 4.0) * 0.5 + 0.5);

----------------------------------------

TITLE: POST Request with Form Data in C#
DESCRIPTION: Shows how to make a POST request with form-encoded data in C#

LANGUAGE: csharp
CODE:
var fields = new Godot.Collections.Dictionary { { "username", "user" }, { "password", "pass" } };
string queryString = new HttpClient().QueryStringFromDict(fields);
string[] headers = ["Content-Type: application/x-www-form-urlencoded", $"Content-Length: {queryString.Length}"];
var result = new HttpClient().Request(HttpClient.Method.Post, "index.php", headers, queryString);