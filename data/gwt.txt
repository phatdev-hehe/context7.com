TITLE: GWT Hello World Application with Button Click Handler
DESCRIPTION: Complete example of a GWT Hello World application that creates a button with click handling. Demonstrates creating UI widgets, setting up event handlers, and adding elements to the root panel.

LANGUAGE: java
CODE:
package com.google.gwt.sample.hello.client;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.Widget;

/**
 * Hello World application.
 */
public class Hello implements EntryPoint {

  public void onModuleLoad() {
    Button b = new Button("Click me", new ClickHandler() {
      public void onClick(ClickEvent event) {
        Window.alert("Hello, AJAX");
      }
    });

    RootPanel.get().add(b);
  }
}

----------------------------------------

TITLE: Fetching and Displaying Contact Details
DESCRIPTION: RPC call to fetch contact details and update the view with the results.

LANGUAGE: java
CODE:
public class ContactsPresenter implements Presenter {
  ...
  private void fetchContactDetails() {
    rpcService.getContactDetails(new AsyncCallback<ArrayList<ContactDetails>>() {
      public void onSuccess(ArrayList<ContactDetails> result) {
          contacts = result;
          List<String> data = new ArrayList<String>();

          for (int i = 0; i < result.size(); ++i) {
            data.add(contacts.get(i).getDisplayName());
          }

          display.setData(data);
      }

      public void onFailure(Throwable caught) {
        ...
      }
    });
  }
}

----------------------------------------

TITLE: Exporting Java Class to JavaScript using JsType
DESCRIPTION: Demonstrates how to expose a Java class to JavaScript using the @JsType annotation. The example shows a simple class with a constructor and method that can be accessed from JavaScript code.

LANGUAGE: java
CODE:
@JsType
public class MyClass {

  public String name;

  public MyClass(String name) {
    this.name = name;
  }

  public String sayHello() {
    return "Hello " + this.name;
  }
}

LANGUAGE: javascript
CODE:
var aClass = new com.gwt.example.MyClass('World');

console.log(aClass.sayHello());

// result: 'Hello World'

----------------------------------------

TITLE: Configuring a GWT RPC Servlet in XML
DESCRIPTION: Example web.xml configuration for mapping a GWT RPC servlet

LANGUAGE: xml
CODE:
<!-- Example servlet loaded into servlet container -->
<servlet>
  <servlet-name>myServiceImpl</servlet-name>
  <servlet-class>
    com.example.foo.server.MyServiceImpl
  </servlet-class>
</servlet>
<servlet-mapping>
  <servlet-name>myServiceImpl</servlet-name>
  <url-pattern>/com.example.foo.Foo/myService</url-pattern>
</servlet-mapping>

----------------------------------------

TITLE: Basic HTML UiBinder Template and Java Class
DESCRIPTION: Simple example showing basic UiBinder usage with HTML elements and Java binding class

LANGUAGE: XML
CODE:
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'>
  <div>
    Hello, <span ui:field='nameSpan'/>.
  </div>
</ui:UiBinder>

LANGUAGE: Java
CODE:
public class HelloWorld {
  interface MyUiBinder extends UiBinder<DivElement, HelloWorld> {}
  private static final MyUiBinder uiBinder = GWT.create(MyUiBinder.class);

  @UiField SpanElement nameSpan;
  private DivElement root;

  public HelloWorld() {
    root = uiBinder.createAndBindUi(this);
  }

  public Element getElement() {
    return root;
  }

  public void setName(String name) { nameSpan.setInnerText(name); }
}

----------------------------------------

TITLE: Implementing Custom Composite Widget in GWT
DESCRIPTION: Demonstrates creating a composite widget that combines a TextBox and CheckBox in a VerticalPanel. The example shows proper widget composition, event handling, and style management in GWT. The composite widget allows enabling/disabling a text box through a checkbox control.

LANGUAGE: java
CODE:
package com.google.gwt.examples;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.ui.CheckBox;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.Widget;

public class CompositeExample implements EntryPoint {

  private static class OptionalTextBox extends Composite implements
      ClickHandler {

    private TextBox textBox = new TextBox();
    private CheckBox checkBox = new CheckBox();

    public OptionalTextBox(String caption) {
      VerticalPanel panel = new VerticalPanel();
      panel.add(checkBox);
      panel.add(textBox);

      checkBox.setText(caption);
      checkBox.setChecked(true);
      checkBox.addClickHandler(this);

      initWidget(panel);

      setStyleName("example-OptionalCheckBox");
    }

    public void onClick(ClickEvent event) {
      Object sender = event.getSource();
      if (sender == checkBox) {
        textBox.setEnabled(checkBox.isChecked());
      }
    }

    public void setCaption(String caption) {
      checkBox.setText(caption);
    }

    public String getCaption() {
      return checkBox.getText();
    }
  }

  public void onModuleLoad() {
    OptionalTextBox otb = new OptionalTextBox("Check this to enable me");
    RootPanel.get().add(otb);
  }
}

----------------------------------------

TITLE: StockWatcher UI Implementation
DESCRIPTION: Main Java class implementing the StockWatcher UI using GWT widgets and panels. Includes widget initialization, table creation, panel assembly and root panel association.

LANGUAGE: java
CODE:
package com.google.gwt.sample.stockwatcher.client;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.FlexTable;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;

public class StockWatcher implements EntryPoint {

  private VerticalPanel mainPanel = new VerticalPanel();
  private FlexTable stocksFlexTable = new FlexTable();
  private HorizontalPanel addPanel = new HorizontalPanel();
  private TextBox newSymbolTextBox = new TextBox();
  private Button addStockButton = new Button("Add");
  private Label lastUpdatedLabel = new Label();

  public void onModuleLoad() {
    // Create table for stock data.
    stocksFlexTable.setText(0, 0, "Symbol");
    stocksFlexTable.setText(0, 1, "Price");
    stocksFlexTable.setText(0, 2, "Change");
    stocksFlexTable.setText(0, 3, "Remove");

    // Assemble Add Stock panel.
    addPanel.add(newSymbolTextBox);
    addPanel.add(addStockButton);

    // Assemble Main panel.
    mainPanel.add(stocksFlexTable);
    mainPanel.add(addPanel);
    mainPanel.add(lastUpdatedLabel);

    // Associate the Main panel with the HTML host page.
    RootPanel.get("stockList").add(mainPanel);

    // Move cursor focus to the input box.
    newSymbolTextBox.setFocus(true);
  }
}

----------------------------------------

TITLE: Client-Server Validation Best Practices in Java
DESCRIPTION: Illustrates a best practice for handling both client-side and server-side validation. It uses validation groups to separate client and server constraints and demonstrates error handling for both scenarios.

LANGUAGE: java
CODE:
@ServerConstraint(groups = ServerGroup.class)
public class Person {
  @NotNull(groups = ClientGroup.class)
  private String name;
}

Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
// validate on the client
Set<ConstraintViolation<Person>> violations = validator.validate(person, Default.class, ClientGroup.class);
if (!violations.isEmpty()) {
  // client-side violation(s) occurred
} else {
  // client-side validation passed so check server-side
  greetingService.serverSideValidate(person, new AsyncCallback<SafeHtml>() {
    @Override
    public void onFailure(Throwable caught) {
      if (caught instanceof ConstraintViolationException) {
        // server-side violation
      }
      // some other issue
    }
    @Override
    public void onSuccess(SafeHtml result) {
      // server-side validations passed
    }
  }
}

----------------------------------------

TITLE: Implementing Basic GWT Code Splitting in Java
DESCRIPTION: Demonstrates how to use GWT.runAsync to split code and defer downloads in a simple Hello application. The example shows the difference between unsplit and split versions.

LANGUAGE: java
CODE:
public class Hello implements EntryPoint {
  public void onModuleLoad() {
    Button b = new Button("Click me", new ClickHandler() {
      public void onClick(ClickEvent event) {
        GWT.runAsync(new RunAsyncCallback() {
          public void onFailure(Throwable caught) {
            Window.alert("Code download failed");
          }

          public void onSuccess() {
            Window.alert("Hello, AJAX");
          }
        });
      }
    });

    RootPanel.get().add(b);
  }
}

----------------------------------------

TITLE: Defining a View Interface in Java
DESCRIPTION: Demonstrates how to create a simple view interface extending IsWidget for a GWT application.

LANGUAGE: java
CODE:
public interface GoodbyeView extends IsWidget {
    void setName(String goodbyeName);
}

----------------------------------------

TITLE: Defining a GWT RPC Service Interface in Java
DESCRIPTION: Example of defining a synchronous RPC service interface that extends RemoteService

LANGUAGE: java
CODE:
package com.example.foo.client;

import com.google.gwt.user.client.rpc.RemoteService;

public interface MyService extends RemoteService {
  public String myMethod(String s);
}

----------------------------------------

TITLE: Generating GWT Project with Maven Archetype
DESCRIPTION: Command to generate a new GWT project using the modular-webapp archetype. This creates a Maven project with separate modules for client, server, and shared code.

LANGUAGE: shell
CODE:
mvn archetype:generate \
   -DarchetypeGroupId=net.ltgt.gwt.archetypes \
   -DarchetypeVersion=LATEST \
   -DarchetypeArtifactId=modular-webapp

----------------------------------------

TITLE: Implementing a Custom ColorCell in GWT
DESCRIPTION: This snippet demonstrates how to create a custom ColorCell that extends AbstractCell<String> to render colored text in a CellList. It includes the implementation of the render() method and shows how to use SafeHtmlTemplates for secure HTML rendering.

LANGUAGE: Java
CODE:
public class CellExample implements EntryPoint {

  static class ColorCell extends AbstractCell<String> {

    interface Templates extends SafeHtmlTemplates {
      @SafeHtmlTemplates.Template("<div style=\"{0}\">{1}</div>")
      SafeHtml cell(SafeStyles styles, SafeHtml value);
    }

    private static Templates templates = GWT.create(Templates.class);

    @Override
    public void render(Context context, String value, SafeHtmlBuilder sb) {
      if (value == null) {
        return;
      }
      SafeHtml safeValue = SafeHtmlUtils.fromString(value);
      SafeStyles styles = SafeStylesUtils.forTrustedColor(safeValue.asString());
      SafeHtml rendered = templates.cell(styles, safeValue);
      sb.append(rendered);
    }
  }

  private static final List<String> COLORS = Arrays.asList("red", "green", "blue", "violet", "black", "gray");

  @Override
  public void onModuleLoad() {
    ColorCell cell = new ColorCell();
    CellList<String> cellList = new CellList<String>(cell);
    cellList.setRowData(0, COLORS);
    RootPanel.get().add(cellList);
  }
}

----------------------------------------

TITLE: Widget-Based UiBinder Template and Composite Class
DESCRIPTION: Example showing UiBinder usage with GWT widgets in a Composite class

LANGUAGE: XML
CODE:
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
    xmlns:g='urn:import:com.google.gwt.user.client.ui'>

  <g:HTMLPanel>
    Hello, <g:ListBox ui:field='listBox' visibleItemCount='1'/>.
  </g:HTMLPanel>

</ui:UiBinder>

LANGUAGE: Java
CODE:
public class HelloWidgetWorld extends Composite {

  interface MyUiBinder extends UiBinder<Widget, HelloWidgetWorld> {}
  private static final MyUiBinder uiBinder = GWT.create(MyUiBinder.class);

  @UiField ListBox listBox;

  public HelloWidgetWorld(String... names) {
    initWidget(uiBinder.createAndBindUi(this));
    for (String name : names) {
      listBox.addItem(name);
    }
  }
}

----------------------------------------

TITLE: Making a GWT RPC Call in Java
DESCRIPTION: Example of making an asynchronous RPC call from GWT client-side code

LANGUAGE: java
CODE:
public void menuCommandEmptyInbox() {
  // (1) Create the client proxy. Note that although you are creating the
  // service interface proper, you cast the result to the asynchronous
  // version of the interface. The cast is always safe because the
  // generated proxy implements the asynchronous interface automatically.
  //
  MyEmailServiceAsync emailService = (MyEmailServiceAsync) GWT.create(MyEmailService.class);

  // (2) Create an asynchronous callback to handle the result.
  //
  AsyncCallback callback = new AsyncCallback() {
    public void onSuccess(Void result) {
      // do some UI stuff to show success
    }

    public void onFailure(Throwable caught) {
      // do some UI stuff to show failure
    }
  };

  // (3) Make the call. Control flow will continue immediately and later
  // 'callback' will be invoked when the RPC completes.
  //
  emailService.emptyMyInbox(fUsername, fPassword, callback);
}

----------------------------------------

TITLE: GWT RPC Service Interface Definition
DESCRIPTION: Definition of the RPC service interface that extends RemoteService and specifies the getPrices method

LANGUAGE: java
CODE:
@RemoteServiceRelativePath("stockPrices")
public interface StockPriceService extends RemoteService {
  StockPrice[] getPrices(String[] symbols);
}

----------------------------------------

TITLE: Defining Validation Constraints in Java
DESCRIPTION: Demonstrates how to use annotations to specify validation constraints on a Java class. This example shows the use of @NotNull and @Size annotations to validate a Person object's name field.

LANGUAGE: java
CODE:
public class Person implements Serializable {
  @NotNull
  @Size(min = 4, message = "Name must be at least 4 characters long.")
  private String name;
}

----------------------------------------

TITLE: Implementing Column Sorting with ListDataProvider in GWT CellTable
DESCRIPTION: Demonstrates how to implement sortable columns in a CellTable using ListDataProvider for local data sorting. Creates a table displaying contact information with sortable name column and includes ColumnSortEvent.ListHandler implementation.

LANGUAGE: java
CODE:
/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class CellTableExample implements EntryPoint {
  // A simple data type that represents a contact.
  private static class Contact {
    private final String address;
    private final String name;

    public Contact(String name, String address) {
      this.name = name;
      this.address = address;
    }
  }

  // The list of data to display.
  private static List<Contact> CONTACTS = Arrays.asList(new Contact("John",
      "123 Fourth Road"), new Contact("Mary", "222 Lancer Lane"), new Contact(
      "Zander", "94 Road Street"));

  public void onModuleLoad() {

    // Create a CellTable.
    CellTable<Contact> table = new CellTable<Contact>();

    // Create name column.
    TextColumn<Contact> nameColumn = new TextColumn<Contact>() {
      @Override
      public String getValue(Contact contact) {
        return contact.name;
      }
    };

    // Make the name column sortable.
    nameColumn.setSortable(true);

    // Create address column.
    TextColumn<Contact> addressColumn = new TextColumn<Contact>() {
      @Override
      public String getValue(Contact contact) {
        return contact.address;
      }
    };

    // Add the columns.
    table.addColumn(nameColumn, "Name");
    table.addColumn(addressColumn, "Address");

    // Create a data provider.
    ListDataProvider<Contact> dataProvider = new ListDataProvider<Contact>();

    // Connect the table to the data provider.
    dataProvider.addDataDisplay(table);

    // Add the data to the data provider, which automatically pushes it to the
    // widget.
    List<Contact> list = dataProvider.getList();
    for (Contact contact : CONTACTS) {
      list.add(contact);
    }

    // Add a ColumnSortEvent.ListHandler to connect sorting to the
    // java.util.List.
    ListHandler<Contact> columnSortHandler = new ListHandler<Tester.Contact>(
        list);
    columnSortHandler.setComparator(nameColumn,
        new Comparator<Tester.Contact>() {
          public int compare(Contact o1, Contact o2) {
            if (o1 == o2) {
              return 0;
            }

            // Compare the name columns.
            if (o1 != null) {
              return (o2 != null) ? o1.name.compareTo(o2.name) : 1;
            }
            return -1;
          }
        });
    table.addColumnSortHandler(columnSortHandler);

    // We know that the data is sorted alphabetically by default.
    table.getColumnSortList().push(nameColumn);

    // Add it to the root panel.
    RootPanel.get().add(table);
  }
}

----------------------------------------

TITLE: Scheduling Work with Timer in GWT
DESCRIPTION: Demonstrates how to use the Timer class to schedule work to be done in the future. It creates a new Timer instance and overrides the run() method to define the action to be performed when the timer expires.

LANGUAGE: java
CODE:
Timer timer = new Timer() {
  public void run() {
    Window.alert("Timer expired!");
  }
};

// Execute the timer to expire 2 seconds in the future
timer.schedule(2000);

----------------------------------------

TITLE: Handling History Events in AppController
DESCRIPTION: Implementation of ValueChangeHandler to handle history events and manage view transitions.

LANGUAGE: java
CODE:
public class AppController implements ValueChangeHandler<String> {
  ...
  public void onValueChange(ValueChangeEvent<String> event) {
    String token = event.getValue();

    if (token != null) {
      Presenter presenter = null;

      if (token.equals("list")) {
        presenter = new ContactsPresenter(rpcService, eventBus, new ContactView());
      }
      else if (token.equals("add")) {
        presenter = new EditContactPresenter(rpcService, eventBus, new EditContactView());
      }
      else if (token.equals("edit")) {
        presenter = new EditContactPresenter(rpcService, eventBus, new EditContactView());
      }

      if (presenter != null) {
        presenter.go(container);
      }
    }
}

----------------------------------------

TITLE: Implementing a GWT RPC Service in Java
DESCRIPTION: Example of implementing a RPC service by extending RemoteServiceServlet and implementing the service interface

LANGUAGE: java
CODE:
package com.example.foo.server;

import com.google.gwt.user.server.rpc.RemoteServiceServlet;
import com.example.foo.client.MyService;


public class MyServiceImpl extends RemoteServiceServlet implements
    MyService {

  public String myMethod(String s) {
    // Do something interesting with 's' here on the server.
    return s;
  }
}

----------------------------------------

TITLE: Implementing JavaScript Callbacks in Java
DESCRIPTION: Shows how to expose Java methods that accept or return callback functions to JavaScript using @JsFunction annotation.

LANGUAGE: java
CODE:
@JsType
public class Bar {
    @JsFunction
    public interface Foo {
        int exec(int x);
    }

    public static int action1(Foo foo) {
        return foo.exec(40);
    }

    public static Foo action2() {
        return (x) -> x + 2;
    }
}

LANGUAGE: javascript
CODE:
com.example.Bar.action1((x) => x + 2); // will return 42!

var fn = com.example.Bar.action2();
fn(40); // will return 42!

----------------------------------------

TITLE: Leaflet Maps Integration Example
DESCRIPTION: Complete example showing how to wrap and use the Leaflet JavaScript library in a GWT application using JsInterop.

LANGUAGE: java
CODE:
@JsType(isNative = true, namespace = JsPackage.GLOBAL)
public class L {
    public static native Map map(String id);
}

@JsType(isNative = true, namespace = "L")
public class Map {
    public native L setView(double[] center, int zoom);
}

public class Leafletwrapper implements EntryPoint {
    double[] positions = { 51.505, -0.09 };

    public void onModuleLoad() {
        L.map("map").setView(positions, 13);
    }
}

----------------------------------------

TITLE: Implementing a Native JavaScript Method in GWT
DESCRIPTION: Example of a simple JSNI method that displays a JavaScript alert dialog. It demonstrates how to reference the window object using $wnd in JSNI code.

LANGUAGE: Java
CODE:
public static native void alert(String msg) /*-{
  $wnd.alert(msg);
}-*/;

----------------------------------------

TITLE: Implementing a View with UiBinder in Java
DESCRIPTION: Demonstrates a view implementation using UiBinder and a template for UI definition.

LANGUAGE: java
CODE:
public class HelloViewImpl extends Composite implements HelloView {
    private static HelloViewImplUiBinder uiBinder = GWT
            .create(HelloViewImplUiBinder.class);

    interface HelloViewImplUiBinder extends UiBinder<Widget, HelloViewImpl> {
    }

    @UiField
    SpanElement nameSpan;
    @UiField
    Anchor goodbyeLink;
    private Presenter presenter;
    private String name;

    public HelloViewImpl() {
        initWidget(uiBinder.createAndBindUi(this));
    }

    @Override
    public void setName(String name) {
        this.name = name;
        nameSpan.setInnerText(name);
    }

    @UiHandler("goodbyeLink")
    void onClickGoodbye(ClickEvent e) {
        presenter.goTo(new GoodbyePlace(name));
    }

    @Override
    public void setPresenter(Presenter presenter) {
        this.presenter = presenter;
    }
}

----------------------------------------

TITLE: Handling HTML Tags in Translatable Messages
DESCRIPTION: This snippet demonstrates how to include simple HTML tags within a translatable message in a UiBinder template.

LANGUAGE: XML
CODE:
<ui:msg>We <b>strongly</b> urge you to reconsider.</ui:msg>

----------------------------------------

TITLE: Adding ARIA Role to GWT CustomButton
DESCRIPTION: Example of setting the ARIA button role on a CustomButton widget during initialization to indicate proper button behavior to screen readers.

LANGUAGE: java
CODE:
protected CustomButton() {
    ...
    // Add a11y role "button"
    Roles.getButtonRole().set(getElement());
    ...
  }

----------------------------------------

TITLE: Implementing Event Handling in a Custom GWT Cell
DESCRIPTION: This example extends the ColorCell to handle click and keydown events. It demonstrates how to specify events to handle, override the onBrowserEvent() method, and implement the onEnterKeyDown() method for keyboard accessibility.

LANGUAGE: Java
CODE:
public class CellWithEventsExample implements EntryPoint {

  static class ColorCell extends AbstractCell<String> {

    interface Templates extends SafeHtmlTemplates {
      @SafeHtmlTemplates.Template("<div style=\"{0}\">{1}</div>")
      SafeHtml cell(SafeStyles styles, SafeHtml value);
    }

    private static Templates templates = GWT.create(Templates.class);

    public ColorCell() {
      super("click", "keydown");
    }

    @Override
    public void onBrowserEvent(Context context, Element parent, String value, NativeEvent event,
        ValueUpdater<String> valueUpdater) {
      super.onBrowserEvent(context, parent, value, event, valueUpdater);

      if ("click".equals(event.getType())) {
        EventTarget eventTarget = event.getEventTarget();
        if (parent.getFirstChildElement().isOrHasChild(Element.as(eventTarget))) {
          doAction(value, valueUpdater);
        }
      }
    }

    @Override
    public void render(Context context, String value, SafeHtmlBuilder sb) {
      if (value == null) {
        return;
      }
      SafeHtml safeValue = SafeHtmlUtils.fromString(value);
      SafeStyles styles = SafeStylesUtils.forTrustedColor(safeValue.asString());
      SafeHtml rendered = templates.cell(styles, safeValue);
      sb.append(rendered);
    }

    @Override
    protected void onEnterKeyDown(Context context, Element parent, String value, NativeEvent event,
        ValueUpdater<String> valueUpdater) {
      doAction(value, valueUpdater);
    }

    private void doAction(String value, ValueUpdater<String> valueUpdater) {
      Window.alert("You selected the color " + value);
      valueUpdater.update(value);
    }
  }

  private static final List<String> COLORS = Arrays.asList("red", "green", "blue", "violet", "black", "gray");

  @Override
  public void onModuleLoad() {
    ColorCell cell = new ColorCell();
    CellList<String> cellList = new CellList<String>(cell);
    cellList.setRowData(0, COLORS);
    RootPanel.get().add(cellList);
  }
}

----------------------------------------

TITLE: Initializing Activities and Places in GWT EntryPoint
DESCRIPTION: Shows how to set up the Activities and Places framework in the application's entry point.

LANGUAGE: java
CODE:
public class HelloMVP implements EntryPoint {
    private Place defaultPlace = new HelloPlace("World!");
    private SimplePanel appWidget = new SimplePanel();

    public void onModuleLoad() {
        ClientFactory clientFactory = GWT.create(ClientFactory.class);
        EventBus eventBus = clientFactory.getEventBus();
        PlaceController placeController = clientFactory.getPlaceController();

        ActivityMapper activityMapper = new AppActivityMapper(clientFactory);
        ActivityManager activityManager = new ActivityManager(activityMapper, eventBus);
        activityManager.setDisplay(appWidget);

        AppPlaceHistoryMapper historyMapper= GWT.create(AppPlaceHistoryMapper.class);
        PlaceHistoryHandler historyHandler = new PlaceHistoryHandler(historyMapper);
        historyHandler.register(placeController, eventBus, defaultPlace);

        RootPanel.get().add(appWidget);
        historyHandler.handleCurrentHistory();
    }
}

----------------------------------------

TITLE: Implementing a Presenter Test with EasyMock
DESCRIPTION: Demonstrates how to write a JUnit test for a Presenter class using EasyMock to create mock objects for the View and RoomScheduler interfaces.

LANGUAGE: Java
CODE:
import static org.easymock.EasyMock.*;

public class PresenterTest extends TestCase {

   @Test
   public void test_an_unavailable_room_disables_the_save_button() {
     final MeetingView view = createMock(MeetingView.class);
     final RoomScheduler scheduler = createMock(RoomScheduler.class);

     final Meeting meeting = new Meeting();
     final Presenter presenter = new Presenter(meeting, view, scheduler);

     // The schedule service will reply with no available capacity
     expect(scheduler.canAcceptCapacityFor(meeting)).andReturn(false);
     view.disableSaveButton();
     replay(scheduler);
     replay(view);
     presenter.requiredCapacityChanged(new FakeTextContainer("225"));

     verify(scheduler);
     verify(view);

     assertEquals("Should have updated the model's capacity", 225, meeting.getCapacity());
  }
}

----------------------------------------

TITLE: SafeHtmlTemplates Interface Example
DESCRIPTION: Example showing how to create and use HTML templates that safely interpolate variables

LANGUAGE: java
CODE:
public interface MyTemplates extends SafeHtmlTemplates {
  @Template("<span class=\"{3}\">{0}: <a href=\"{1}\">{2}</a></span>")
  SafeHtml messageWithLink(SafeHtml message, String url, String linkText,
      String style);
}

private static final MyTemplates TEMPLATES =
    GWT.create(MyTemplates.class);

public void useTemplate(...) {
  SafeHtml message;
  String url;
  String linkText;
  String style;
  // ...
  InlineHTML messageWithLinkInlineHTML = new InlineHTML(
      TEMPLATES.messageWithLink(message, url, linkText, style));
  // ...
}

----------------------------------------

TITLE: Implementing Column Sorting with AsyncDataProvider in GWT CellTable
DESCRIPTION: Shows how to implement sortable columns in a CellTable using AsyncDataProvider for server-side sorting. Includes async data fetching simulation and ColumnSortEvent.AsyncHandler implementation.

LANGUAGE: java
CODE:
/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class CellTableExample implements EntryPoint {

  // A simple data type that represents a contact.
  private static class Contact {
    private final String address;
    private final String name;

    public Contact(String name, String address) {
      this.name = name;
      this.address = address;
    }
  }

  // The list of data to display.
  private static List<Contact> CONTACTS = Arrays.asList(new Contact("John",
      "123 Fourth Road"), new Contact("Mary", "222 Lancer Lane"), new Contact(
      "Zander", "94 Road Street"));

  public void onModuleLoad() {

    // Create a CellTable.
    final CellTable<Contact> table = new CellTable<Contact>();

    // Create name column.
    TextColumn<Contact> nameColumn = new TextColumn<Contact>() {
      @Override
      public String getValue(Contact contact) {
        return contact.name;
      }
    };

    // Make the name column sortable.
    nameColumn.setSortable(true);

    // Create address column.
    TextColumn<Contact> addressColumn = new TextColumn<Contact>() {
      @Override
      public String getValue(Contact contact) {
        return contact.address;
      }
    };

    // Add the columns.
    table.addColumn(nameColumn, "Name");
    table.addColumn(addressColumn, "Address");

    // Set the total row count. You might send an RPC request to determine the
    // total row count.
    table.setRowCount(CONTACTS.size(), true);

    // Set the range to display. In this case, our visible range is smaller than
    // the data set.
    table.setVisibleRange(0, 3);

    // Create a data provider.
    AsyncDataProvider<Contact> dataProvider = new AsyncDataProvider<Contact>() {
      @Override
      protected void onRangeChanged(HasData<Contact> display) {
        final Range range = display.getVisibleRange();

        // Get the ColumnSortInfo from the table.
        final ColumnSortList sortList = table.getColumnSortList();

        // This timer is here to illustrate the asynchronous nature of this data
        // provider. In practice, you would use an asynchronous RPC call to
        // request data in the specified range.
        new Timer() {
          @Override
          public void run() {
            int start = range.getStart();
            int end = start + range.getLength();
            // This sorting code is here so the example works. In practice, you
            // would sort on the server.
            Collections.sort(CONTACTS, new Comparator<Tester.Contact>() {
              public int compare(Contact o1, Contact o2) {
                if (o1 == o2) {
                  return 0;
                }

                // Compare the name columns.
                int diff = -1;
                if (o1 != null) {
                  diff = (o2 != null) ? o1.name.compareTo(o2.name) : 1;
                }
                return sortList.get(0).isAscending() ? diff : -diff;
              }
            });
            List<Contact> dataInRange = CONTACTS.subList(start, end);

            // Push the data back into the list.
            table.setRowData(start, dataInRange);
          }
        }.schedule(2000);
      }
    };

    // Connect the list to the data provider.
    dataProvider.addDataDisplay(table);

    // Add a ColumnSortEvent.AsyncHandler to connect sorting to the
    // AsyncDataPRrovider.
    AsyncHandler columnSortHandler = new AsyncHandler(table);
    table.addColumnSortHandler(columnSortHandler);

    // We know that the data is sorted alphabetically by default.
    table.getColumnSortList().push(nameColumn);

    // Add it to the root panel.
    RootPanel.get().add(table);
  }
}

----------------------------------------

TITLE: Initializing GWT Application with MVP Structure
DESCRIPTION: The entry point of a GWT application using MVP, creating services and controllers.

LANGUAGE: java
CODE:
public class Contacts implements EntryPoint {

  public void onModuleLoad() {
    ContactsServiceAsync rpcService = GWT.create(ContactsService.class);
    EventBus eventBus = new SimpleEventBus();
    AppController appViewer = new AppController(rpcService, eventBus);
    appViewer.go(RootPanel.get());
  }
}

----------------------------------------

TITLE: Creating a GWT Validator Factory in Java
DESCRIPTION: Shows how to create a custom ValidatorFactory for GWT. This factory extends AbstractGwtValidatorFactory and defines a GwtValidator interface with the @GwtValidation annotation to specify which classes can be validated.

LANGUAGE: java
CODE:
public final class SampleValidatorFactory extends AbstractGwtValidatorFactory {

  /**
   * Validator marker for the Validation Sample project. Only the classes and groups listed
   * in the {@link GwtValidation} annotation can be validated.
   */
  @GwtValidation(Person.class)
  public interface GwtValidator extends Validator {
  }

  @Override
  public AbstractGwtValidator createValidator() {
    return GWT.create(GwtValidator.class);
  }
}

----------------------------------------

TITLE: Basic Application Layout with DockLayoutPanel in GWT UiBinder
DESCRIPTION: UiBinder XML template for a simple application layout with header, navigation, and content areas using DockLayoutPanel.

LANGUAGE: XML
CODE:
<g:DockLayoutPanel unit='EM'>
  <g:north size='4'>
    <g:Label>Header</g:Label>
  </g:north>

  <g:west size='16'>
    <g:Label>Navigation</g:Label>
  </g:west>

  <g:center>
    <g:ScrollPanel>
      <g:Label>Content Area</g:Label>
    </g:ScrollPanel>
  </g:center>
</g:DockLayoutPanel>

----------------------------------------

TITLE: Implementing Async Provider Pattern in GWT
DESCRIPTION: Demonstrates the Async Provider pattern for code splitting in GWT. This pattern helps associate a module with an exclusive fragment for efficient loading.

LANGUAGE: java
CODE:
public class Module {
  // public APIs
  public doSomething() { /* ... */ }
  public somethingElse() { /*  ... */ }

  // the module instance; instantiate it behind a runAsync
  private static Module instance = null;

  // A callback for using the module instance once it's loaded
  public interface ModuleClient {
    void onSuccess(Module instance);
    void onUnavailable();
  }

  /**
   *  Access the module's instance.  The callback
   *  runs asynchronously, once the necessary
   *  code has downloaded.
   */
  public static void createAsync(final ModuleClient client) {
    GWT.runAsync(new RunAsyncCallback() {
      public void onFailure(Throwable err) {
        client.onUnavailable();
      }

      public void onSuccess() {
        if (instance == null) {
          instance = new Module();
        }
        client.onSuccess(instance);
      }
    });
  }
}

----------------------------------------

TITLE: Implementing GWT Messages Interface for Parameterized Strings
DESCRIPTION: Java interface extending GWT Messages to provide localized parameterized messages with default English values. Used for dynamic text like error messages and timestamps.

LANGUAGE: java
CODE:
package com.google.gwt.sample.stockwatcher.client;

import com.google.gwt.i18n.client.Messages;
import java.util.Date;

public interface StockWatcherMessages extends Messages {
  @DefaultMessage("''{0}'' is not a valid symbol.")
  String invalidSymbol(String symbol);

  @DefaultMessage("Last update: {0,date,medium} {0,time,medium}")
  String lastUpdate(Date timestamp);
}

----------------------------------------

TITLE: Implementing Basic GWT Host Page
DESCRIPTION: Example HTML host page that loads a GWT application, showing essential elements like script loading and history support iframe.

LANGUAGE: html
CODE:
<html>
  <head>
    <!-- Properties can be specified to influence deferred binding -->
    <meta name='gwt:property' content='locale=en_UK'>
    
    <!-- Stylesheets are optional, but useful -->
    <link rel="stylesheet" href="Calendar.css">
    
    <!-- Titles are optional, but useful -->
    <title>Calendar App</title>
    
  </head>
  <body>
   
    <!-- This script tag is what actually loads the GWT module.  The -->
    <!-- 'nocache.js' file (also called a "selection script") is     -->
    <!-- produced by the GWT compiler in the module output directory -->
    <!-- or generated automatically in development mode.             -->
    <script language="javascript" src="calendar/calendar.nocache.js"></script>
    
    <!-- Include a history iframe to enable full GWT history support -->
    <!-- (the id must be exactly as shown)                           -->
    <iframe src="javascript:''" id="__gwt_historyFrame" style="width:0;height:0;border:0"></iframe>
    
  </body>
 </html>

----------------------------------------

TITLE: Avoiding Slow Script Warnings with IncrementalCommand in GWT
DESCRIPTION: Shows how to use IncrementalCommand to break up long-running computations, allowing the browser to remain responsive and avoid unresponsive script warnings.

LANGUAGE: java
CODE:
public class IncrementalCommandTest implements EntryPoint {

  static final int MAX_LOOPS = 10000;
  static final int WORK_LOOP_COUNT = 50;
  static final int WORK_CHUNK = 100;

  Button button;

  public void onModuleLoad() {
    button = new Button("Start Computation");

    button.addClickHandler(new ClickHandler () {
      public void onClick(ClickEvent event) {
       doWorkIncremental();
      }
    }
  }

  private void doWorkIncremental () {
    button.setEnabled(false);

    IncrementalCommand ic = new IncrementalCommand(){
      int counter = 0;

      public boolean execute() {
        for (int i=0;i<WORK_CHUNK;i++) {
          counter++;
          result += doWork();
          if (counter == MAX_LOOPS) {
            button.setEnabled(true);
            return false;
          }
        }
        return true;
      }
    };

    Scheduler.get().scheduleIncremental(ic);
  }

  private int doWork() {
    int result;
    // ... computation...
    return result;
  }
}

----------------------------------------

TITLE: Creating Basic CellList Widget in GWT
DESCRIPTION: Shows how to create a simple CellList widget that displays a list of days using a TextCell renderer

LANGUAGE: Java
CODE:
public class CellListExample implements EntryPoint {
  private static final List<String> DAYS = Arrays.asList("Sunday", "Monday",
      "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday");

  public void onModuleLoad() {
    TextCell textCell = new TextCell();
    CellList<String> cellList = new CellList<String>(textCell);
    cellList.setRowCount(DAYS.size(), true);
    cellList.setRowData(0, DAYS);
    RootPanel.get().add(cellList);
  }
}

----------------------------------------

TITLE: Implementing XSRF Protected Service Servlet
DESCRIPTION: Java implementation of a server-side RPC service that extends XsrfProtectedServiceServlet for XSRF protection.

LANGUAGE: java
CODE:
package com.example.foo.server;

import com.google.gwt.user.server.rpc.XsrfProtectedServiceServlet; 

import com.example.client.MyService;

public class MyServiceImpl extends XsrfProtectedServiceServlet implements
    MyService {

  public String myMethod(String s) {
    // Do something interesting with 's' here on the server.
    return s;
  }
}

----------------------------------------

TITLE: Defining an Asynchronous GWT RPC Service Interface in Java
DESCRIPTION: Example of defining the asynchronous version of a RPC service interface

LANGUAGE: java
CODE:
package com.example.foo.client;

interface MyServiceAsync {
  public void myMethod(String s, AsyncCallback<String> callback);
}

----------------------------------------

TITLE: Generating JSON-encoded Stock Data with PHP
DESCRIPTION: This PHP script generates random stock prices and changes for given stock symbols. It outputs the data in JSON format, suitable for consumption by a GWT application. The script handles CORS headers and uses GET parameters to receive stock symbols.

LANGUAGE: php
CODE:
<?php

  header('Content-Type: text/javascript');
  header('Cache-Control: no-cache');
  header('Pragma: no-cache');

  define("MAX_PRICE", 100.0); // $100.00
  define("MAX_PRICE_CHANGE", 0.02); // +/- 2%

  echo '[';

  $q = trim($_GET['q']);
  if ($q) {
    $symbols = explode(' ', $q);

    for ($i=0; $i<count($symbols); $i++) {
      $price = lcg_value() * MAX_PRICE;
      $change = $price * MAX_PRICE_CHANGE * (lcg_value() * 2.0 - 1.0);

      echo '{';
      echo "\"symbol\":\"$symbols[$i]\",";
      echo "\"price\":$price,";
      echo "\"change\":$change";
      echo '}';

      if ($i < (count($symbols) - 1)) {
        echo ',';
      }
    }
  }

  echo ']';
?>

----------------------------------------

TITLE: GWT Messages Interface Definition with Plural Support
DESCRIPTION: Definition of a Messages interface with plural form annotations including DefaultMessage and AlternateMessage for cart items

LANGUAGE: java
CODE:
@DefaultLocale("en") // not required since this is the default\npublic interface MyMessages extends Messages {\n  @DefaultMessage("There are {0,number} items in your cart.")\n  @AlternateMessage({"one", "There is 1 item in your cart."})\n  String cartItems(@PluralCount int itemCount);\n}

----------------------------------------

TITLE: Spanish Localization Properties in GWT
DESCRIPTION: Localized Spanish translations of the strings defined in the default properties file.

LANGUAGE: properties
CODE:
helloWorld = hola, mundo
goodbyeWorld = adiós, mundo

----------------------------------------

TITLE: Date and Time Formatting in GWT
DESCRIPTION: Comprehensive example showing various date and time formatting options using DateTimeFormat class.

LANGUAGE: java
CODE:
Date today = new Date();

// prints Tue Dec 18 12:01:26 GMT-500 2007 in the default locale.
GWT.log(today.toString(), null);

// prints 12/18/07 in the default locale
GWT.log(DateTimeFormat.getShortDateFormat().format(today), null);

// prints December 18, 2007 in the default locale
GWT.log(DateTimeFormat.getLongDateFormat().format(today), null);

// prints 12:01 PM in the default locale
GWT.log(DateTimeFormat.getShortTimeFormat().format(today), null);

// prints 12:01:26 PM GMT-05:00 in the default locale
GWT.log(DateTimeFormat.getLongTimeFormat().format(today), null);

// prints Dec 18, 2007 12:01:26 PM in the default locale
GWT.log(DateTimeFormat.getMediumDateTimeFormat().format(today), null);

----------------------------------------

TITLE: Server-Side RPC Service Implementation
DESCRIPTION: Implementation of the StockPriceService that runs on the server and generates stock price data

LANGUAGE: java
CODE:
public class StockPriceServiceImpl extends RemoteServiceServlet implements StockPriceService {
  private static final double MAX_PRICE = 100.0; // $100.00
  private static final double MAX_PRICE_CHANGE = 0.02; // +/- 2%

  public StockPrice[] getPrices(String[] symbols) {
    Random rnd = new Random();

    StockPrice[] prices = new StockPrice[symbols.length];
    for (int i=0; i<symbols.length; i++) {
      double price = rnd.nextDouble() * MAX_PRICE;
      double change = price * MAX_PRICE_CHANGE * (rnd.nextDouble() * 2f - 1f);

      prices[i] = new StockPrice(symbols[i], price, change);
    }

    return prices;
  }
}

----------------------------------------

TITLE: Implementing Shared ClickHandler in GWT Composite
DESCRIPTION: This snippet shows how to implement a shared ClickHandler for multiple Button widgets within a Composite class. This approach is more memory-efficient but requires more code. It uses the event's getSource() method to distinguish between different widgets.

LANGUAGE: java
CODE:
public class HandlerExample extends Composite implements ClickHandler {
  private FlowPanel fp = new FlowPanel();
  private Button b1 = new Button("Button 1");
  private Button b2 = new Button("Button 2");

  public HandlerExample() {
    initWidget(fp);
    fp.add(b1);
    fp.add(b2);
    b1.addClickHandler(this);
    b2.addClickHandler(this);
  }

  public void onClick(ClickEvent event) {
    // note that in general, events can have sources that are not Widgets.
    Widget sender = (Widget) event.getSource();

    if (sender == b1) {
      // handle b1 being clicked
    } else if (sender == b2) {
      // handle b2 being clicked
    }
  }
}

----------------------------------------

TITLE: Implementing Asynchronous GWT Testing
DESCRIPTION: Example showing how to test asynchronous operations using Timer and GWTTestCase's delay/finish methods.

LANGUAGE: java
CODE:
public void testTimer() {
  // Setup an asynchronous event handler.
  Timer timer = new Timer() {
    public void run() {
      // do some validation logic

      // tell the test system the test is now done
      finishTest();
    }
  };

  // Set a delay period significantly longer than the
  // event is expected to take.
  delayTestFinish(500);

  // Schedule the event and return control to the test system.
  timer.schedule(100);
}

----------------------------------------

TITLE: Configuring RequestFactoryServlet in web.xml
DESCRIPTION: XML configuration for mapping RequestFactoryServlet in the web application deployment descriptor.

LANGUAGE: xml
CODE:
<servlet>
    <servlet-name>requestFactoryServlet</servlet-name>
    <servlet-class>com.google.web.bindery.requestfactory.server.RequestFactoryServlet</servlet-class>
    <init-param>
        <param-name>symbolMapsDirectory</param-name>
        <!-- You'll need to compile with -extras and move the symbolMaps directory
            to this location if you want stack trace deobfuscation to work -->
        <param-value>WEB-INF/classes/symbolMaps/</param-value>
    </init-param>
</servlet>

<servlet-mapping>
    <servlet-name>requestFactoryServlet</servlet-name>
    <url-pattern>/gwtRequest</url-pattern>
</servlet-mapping>

----------------------------------------

TITLE: Checking HTML5 Storage Browser Support in GWT
DESCRIPTION: Demonstrates how to check if the browser supports HTML5 storage features by attempting to get a storage object.

LANGUAGE: java
CODE:
import com.google.gwt.storage.client.Storage;
  private Storage stockStore = null;
  stockStore = Storage.getLocalStorageIfSupported();

----------------------------------------

TITLE: Parsing JSON Strings to JavaScriptObject in GWT
DESCRIPTION: A Java method that uses GWT's JsonUtils to safely parse a JSON string into a JavaScriptObject. This can be used to convert JSON responses from HTTP requests into objects that can be manipulated in GWT code.

LANGUAGE: java
CODE:
/*
 * Takes in a JSON String and evals it.
 * @param JSON String that you trust
 * @return JavaScriptObject that you can cast to an Overlay Type
 */
public static <T extends JavaScriptObject> T parseJson(String jsonStr)
{
  return JsonUtils.safeEval(jsonStr);
}

----------------------------------------

TITLE: Finding Anchor Elements in DOM using JSNI in GWT
DESCRIPTION: This snippet shows a JSNI method that finds all child elements that are anchor tags, assigns them unique IDs, and returns a list of these IDs. It demonstrates how to combine JSNI with Java code to manipulate the DOM in GWT.

LANGUAGE: java
CODE:
/**
 * Find all child elements that are anchor tags,
 * assign a unique id to them, and return a list of
 * the unique ids to the caller.
 */
private native void putElementLinkIDsInList(Element elt, ArrayList<String> list) /*-{
  var links = elt.getElementsByTagName("a");

  for (var i = 0; i < links.length; i++ ) {
    var link = links.item(i);
    link.id = ("uid-a-" + i);
    list.@java.util.ArrayList::add(Ljava/lang/Object;) (link.id);
  }
}-*/;

----------------------------------------

TITLE: Defining a ClientBundle Interface in Java
DESCRIPTION: Example of defining a ClientBundle interface with various resource types

LANGUAGE: Java
CODE:
public interface MyResources extends ClientBundle {
  public static final MyResources INSTANCE =  GWT.create(MyResources.class);

  @Source("my.css")
  public CssResource css();

  @Source("config.xml")
  public TextResource initialConfiguration();

  @Source("manual.pdf")
  public DataResource ownersManual();
}

----------------------------------------

TITLE: Creating a GWT JUnit Test Case
DESCRIPTION: Example implementation of a test case extending GWTTestCase to test an UpperCasingLabel widget.

LANGUAGE: java
CODE:
package com.example.foo.client;
import com.google.gwt.junit.client.GWTTestCase;

public class UpperCasingLabelTest extends GWTTestCase {

  /**
   * Specifies a module to use when running this test case. The returned
   * module must include the source for this class.
   * 
   * @see com.google.gwt.junit.client.GWTTestCase#getModuleName()
   */
  @Override
  public String getModuleName() {
    return "com.example.foo.Foo";
  }
 
  public void testUpperCasingLabel() {
    UpperCasingLabel upperCasingLabel = new UpperCasingLabel();
    
    upperCasingLabel.setText("foo");
    assertEquals("FOO", upperCasingLabel.getText());

    upperCasingLabel.setText("BAR");
    assertEquals("BAR", upperCasingLabel.getText());

    upperCasingLabel.setText("BaZ");
    assertEquals("BAZ", upperCasingLabel.getText());
  }
}

----------------------------------------

TITLE: Defining Constants in GSS for GWT
DESCRIPTION: Demonstrates how to define constants in GSS using the @def at-rule. GSS requires constants to be defined in upper-case and allows the use of GSS functions in constant definitions.

LANGUAGE: css
CODE:
/* CSS */
@def myConstant 12px

/* GSS */
@def MY_CONSTANT 12px;

/* You can also use any gss function to define a constant */
@def MARGIN mult(divide(100%, 6), 4);

----------------------------------------

TITLE: Creating XSRF Protected Service Interface
DESCRIPTION: Java interface definition that extends XsrfProtectedService to enable XSRF protection for all methods.

LANGUAGE: java
CODE:
package com.example.foo.client;

  import com.google.gwt.user.client.rpc.XsrfProtectedService;

  public interface MyService extends XsrfProtectedService {
    public String myMethod(String s);
  }

----------------------------------------

TITLE: Implementing GWT Event Handlers in StockWatcher Class
DESCRIPTION: Main implementation class for the StockWatcher application showing the setup of UI components and event handlers for button clicks and keyboard input. Includes basic input validation for stock symbols.

LANGUAGE: java
CODE:
package com.google.gwt.sample.stockwatcher.client;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.FlexTable;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;

public class StockWatcher implements EntryPoint {

  private VerticalPanel mainPanel = new VerticalPanel();
  private FlexTable stocksFlexTable = new FlexTable();
  private HorizontalPanel addPanel = new HorizontalPanel();
  private TextBox newSymbolTextBox = new TextBox();
  private Button addStockButton = new Button("Add");
  private Label lastUpdatedLabel = new Label();

  public void onModuleLoad() {
    stocksFlexTable.setText(0, 0, "Symbol");
    stocksFlexTable.setText(0, 1, "Price");
    stocksFlexTable.setText(0, 2, "Change");
    stocksFlexTable.setText(0, 3, "Remove");

    addPanel.add(newSymbolTextBox);
    addPanel.add(addStockButton);

    mainPanel.add(stocksFlexTable);
    mainPanel.add(addPanel);
    mainPanel.add(lastUpdatedLabel);

    RootPanel.get("stockList").add(mainPanel);

    newSymbolTextBox.setFocus(true);

    addStockButton.addClickHandler(new ClickHandler() {
      public void onClick(ClickEvent event) {
        addStock();
      }
    });
  }

  private void addStock() {
    // TODO Auto-generated method stub
  }
}

----------------------------------------

TITLE: Implementing Stock Input Validation in GWT
DESCRIPTION: Implementation of the addStock method with input validation logic. Validates stock symbols against a regex pattern and provides user feedback through alert dialogs.

LANGUAGE: java
CODE:
private void addStock() {
  final String symbol = newSymbolTextBox.getText().toUpperCase().trim();
  newSymbolTextBox.setFocus(true);

  // Stock code must be between 1 and 10 chars that are numbers, letters, or dots.
  if (!symbol.matches("^[0-9A-Z\\.]{1,10}$")) {
    Window.alert("'" + symbol + "' is not a valid symbol.");
    newSymbolTextBox.selectAll();
    return;
  }

  newSymbolTextBox.setText("");
      
  // TODO Don't add the stock if it's already in the table.
  // TODO Add the stock to the table
  // TODO Add a button to remove this stock from the table.
  // TODO Get the stock price.
}

----------------------------------------

TITLE: Implementing a SplitLayoutPanel in GWT
DESCRIPTION: Demonstrates creating a SplitLayoutPanel with west navigation area and main content area.

LANGUAGE: Java
CODE:
SplitLayoutPanel p = new SplitLayoutPanel();
p.addWest(new HTML("navigation"), 128);
p.addNorth(new HTML("list"), 384);
p.add(new HTML("details"));

----------------------------------------

TITLE: Implementing CellTable in GWT
DESCRIPTION: Demonstrates creating a CellTable with columns for displaying contact information

LANGUAGE: Java
CODE:
public class CellTableExample implements EntryPoint {
  private static class Contact {
    private final String address;
    private final String name;

    public Contact(String name, String address) {
      this.name = name;
      this.address = address;
    }
  }

  private static List<Contact> CONTACTS = Arrays.asList(
    new Contact("John", "123 Fourth Road"),
    new Contact("Mary", "222 Lancer Lane"));

  public void onModuleLoad() {
    CellTable<Contact> table = new CellTable<Contact>();

    TextColumn<Contact> nameColumn = new TextColumn<Contact>() {
      @Override
      public String getValue(Contact contact) {
        return contact.name;
      }
    };

    TextColumn<Contact> addressColumn = new TextColumn<Contact>() {
      @Override
      public String getValue(Contact contact) {
        return contact.address;
      }
    };

    table.addColumn(nameColumn, "Name");
    table.addColumn(addressColumn, "Address");
    table.setRowCount(CONTACTS.size(), true);
    table.setRowData(0, CONTACTS);
    RootPanel.get().add(table);
  }
}

----------------------------------------

TITLE: Creating StockPrice Class in GWT
DESCRIPTION: Defines a class to encapsulate stock price data including symbol, price, and change.

LANGUAGE: Java
CODE:
public class StockPrice {

  private String symbol;
  private double price;
  private double change;

  public StockPrice() {
  }

  public StockPrice(String symbol, double price, double change) {
    this.symbol = symbol;
    this.price = price;
    this.change = change;
  }

  public String getSymbol() {
    return this.symbol;
  }

  public double getPrice() {
    return this.price;
  }

  public double getChange() {
    return this.change;
  }

  public double getChangePercent() {
    return 10.0 * this.change / this.price;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public void setPrice(double price) {
    this.price = price;
  }

  public void setChange(double change) {
    this.change = change;
  }
}

----------------------------------------

TITLE: Including Widgets in Translatable Messages (HTMLPanel)
DESCRIPTION: This snippet shows how to include widgets within translatable messages inside an HTMLPanel, which automatically handles the translation of surrounding text.

LANGUAGE: XML
CODE:
<g:HTMLPanel>
  <ui:msg>Meeting starts at
    <my:TimePicker ui:field="startPicker"/>
  and ends at
    <my:TimePicker ui:field="endPicker"/>.
  </ui:msg>
</g:HTMLPanel>

----------------------------------------

TITLE: Runtime Substitution in GSS for GWT
DESCRIPTION: Shows how to perform runtime substitution in GSS using the eval() method. This replaces the @eval rule from CssResource and allows calling Java code within GSS.

LANGUAGE: css
CODE:
/* CSS */
@eval myColor com.foo.bar.client.resource.Colors.getColor()

/* GSS */
@def MY_COLOR eval("com.foo.bar.client.resource.Colors.getColor()");

/* direct usage */
.red {
    color: eval("com.foo.bar.client.resource.Colors.getColor()");
}

----------------------------------------

TITLE: GWT RPC Asynchronous Service Interface for Music Store
DESCRIPTION: Java interface defining the asynchronous versions of the remote procedure calls for the Music Store application.

LANGUAGE: Java
CODE:
public interface MusicStoreServiceAsync {
  public void getAccounts(AsyncCallback<List<Account>> callback);

  public void getRecords(AsyncCallback<List<Record>> callback);

  public void saveAccount(Account accountDTO, AsyncCallback<Long> callback);

  public void saveRecord(Record record, AsyncCallback<Long> callback);

  public void saveRecordToAccount(Account accountDTO, Record recordDTO,
AsyncCallback<Void> callback);
}

----------------------------------------

TITLE: Implementing ARIA Live Region for Auto-Complete
DESCRIPTION: Shows how to set up an ARIA live region to announce dynamic content changes in an autocomplete widget.

LANGUAGE: java
CODE:
public AutoCompleteWidget() {
    ...
    // Create a hidden div where we store the current item text for a
    // screen reader to speak
    ariaElement = DOM.createDiv();
    DOM.setStyleAttribute(ariaElement, "display", "none");
    Roles.getRegionRole(ariaElement);
    Roles.getRegionRole().setAriaLiveProperty(ariaElement, LiveValue.ASSERTIVE);
    DOM.appendChild(getElement(), ariaElement);
  }

----------------------------------------

TITLE: Creating a DockLayoutPanel Structure in GWT
DESCRIPTION: Shows how to set up a basic application structure using DockLayoutPanel with header, footer, navigation, and content areas.

LANGUAGE: Java
CODE:
DockLayoutPanel p = new DockLayoutPanel(Unit.EM);
p.addNorth(new HTML("header"), 2);
p.addSouth(new HTML("footer"), 2);
p.addWest(new HTML("navigation"), 10);
p.add(new HTML(content));

----------------------------------------

TITLE: Implementing Server-Side Employee Entity Methods in Java
DESCRIPTION: Example of server-side implementation of Employee entity methods including persistence operations.

LANGUAGE: java
CODE:
// The Employee domain object
@Entity public class Employee {

// properties, getters, and setters omitted
  public static List<Employee> findAllEmployees() {
    EntityManager em = entityManager();
    try {
      List<Employee> list = em.createQuery("select o from Employee o").getResultList();
      // force to get all the employees
      list.size();
      return list;
    } finally {
      em.close();
    }
  }

  public static Employee findEmployee(Long id) {
    if (id == null) {
      return null;
    }
    EntityManager em = entityManager();
    try {
      Employee employee = em.find(Employee.class, id);
      return employee;
    } finally {
      em.close();
    }
  }

  public static final EntityManager entityManager() {
    return EMF.get().createEntityManager();
  }

  public void persist() {
    EntityManager em = entityManager();
    try {
      em.persist(this);
    } finally {
      em.close();
    }
  }

  public void remove() {
    EntityManager em = entityManager();
    try {
      Employee attached = em.find(Employee.class, this.id);
      em.remove(attached);
    } finally {
      em.close();
    }
  }

  ...

}

----------------------------------------

TITLE: Basic AutoBean Implementation
DESCRIPTION: Example showing core AutoBean patterns including interface definition, factory creation, and JSON serialization

LANGUAGE: java
CODE:
interface Person {
  Address getAddress();
  String getName();
  void setName(String name);
  void setAddress(Address a);
}

interface Address {
  // Other properties, as above
}

interface MyFactory extends AutoBeanFactory {
  AutoBean<Address> address();
  AutoBean<Person> person();
}

class DoSomething() {
  // Instantiate the factory
  MyFactory factory = GWT.create(MyFactory.class);
  // In non-GWT code, use AutoBeanFactorySource.create(MyFactory.class);

  Person makePerson() {
    // Construct the AutoBean
    AutoBean<Person> person = factory.person();

    // Return the Person interface shim
    return person.as();
  }

  String serializeToJson(Person person) {
    // Retrieve the AutoBean controller
    AutoBean<Person> bean = AutoBeanUtils.getAutoBean(person);

    return AutoBeanCodex.encode(bean).getPayload();
  }

  Person deserializeFromJson(String json) {
    AutoBean<Person> bean = AutoBeanCodex.decode(factory, Person.class, json);
    return bean.as();
  }
}

----------------------------------------

TITLE: Applying Styles Programmatically in Java
DESCRIPTION: Java code showing how to apply CSS styles to GWT widgets programmatically using addStyleName and addStyleDependentName

LANGUAGE: java
CODE:
// Add styles to elements in the stock list table.
stocksFlexTable.getRowFormatter().addStyleName(0, "watchListHeader");
stocksFlexTable.addStyleName("watchList");
stocksFlexTable.getCellFormatter().addStyleName(0, 1, "watchListNumericColumn");
stocksFlexTable.getCellFormatter().addStyleName(0, 2, "watchListNumericColumn");
stocksFlexTable.getCellFormatter().addStyleName(0, 3, "watchListRemoveColumn");

----------------------------------------

TITLE: Adding Stocks to FlexTable in GWT
DESCRIPTION: Adds a new stock to the ArrayList and FlexTable if it doesn't already exist.

LANGUAGE: Java
CODE:
// Don't add the stock if it's already in the table.
if (stocks.contains(symbol))
  return;

// Add the stock to the table.
int row = stocksFlexTable.getRowCount();
stocks.add(symbol);
stocksFlexTable.setText(row, 0, symbol);

----------------------------------------

TITLE: Multi-Host Selenium Configuration
DESCRIPTION: Example of running tests on multiple remote hosts using Selenium

LANGUAGE: shell
CODE:
-Dgwt.args="-runStyle Selenium:myhost:4444/*firefox,myotherhost:4444/*firefox"

----------------------------------------

TITLE: Adding GWT Widgets to HTML Elements
DESCRIPTION: Example showing how to attach GWT widgets to specific HTML elements using element IDs and RootPanel.

LANGUAGE: html
CODE:
<body>
    <!-- ... other sample HTML omitted   -->
    <table align=center>
      <tr>
        <td id="slot1"></td>
        <td id="slot2"></td>
      </tr>
    </table>
  </body>

LANGUAGE: java
CODE:
final Button button = new Button("Click me");
    final Label label = new Label();

    ...

    RootPanel.get("slot1").add(button);
    RootPanel.get("slot2").add(label);

----------------------------------------

TITLE: Using ImageResource with CssResource
DESCRIPTION: Example of using ImageResource within CssResource for sprite generation

LANGUAGE: CSS
CODE:
@sprite .mySpriteClass {
  gwt-image: "imageAccessor";
  other: property;
}

----------------------------------------

TITLE: HTML UTF-8 Meta Tag For i18n
DESCRIPTION: HTML meta tag required to properly handle internationalized characters by declaring UTF-8 encoding for the page.

LANGUAGE: html
CODE:
<meta charset="utf-8" />

----------------------------------------

TITLE: Implementing Basic GWT EntryPoint Class
DESCRIPTION: Example of creating a basic GWT EntryPoint class that logs a hello world message. Shows the minimal implementation required for a GWT module entry point including the onModuleLoad() method.

LANGUAGE: java
CODE:
package com.example.foo.client;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;

/**
 * Entry point classes define onModuleLoad().
 */
public class Foo implements EntryPoint {

  /**
   * This is the entry point method. Initialize you GWT module here.
   */
  public void onModuleLoad() {

    // Writes Hello World to the module log window.
    GWT.log("Hello World!", null);
  }
}

----------------------------------------

TITLE: Validating with Groups in Java
DESCRIPTION: Demonstrates how to perform validation using specific validation groups. This snippet shows validation using both the Default group and a custom Minimal group.

LANGUAGE: java
CODE:
Address address = new Address();
validator.validate(address);

validator.validate(address, Minimal.class);

----------------------------------------

TITLE: SafeHtml Messages Implementation
DESCRIPTION: Shows how to implement SafeHtml messages to prevent XSS vulnerabilities when using HTML in messages.

LANGUAGE: java
CODE:
public interface ErrorMessages extends Messages {
   @DefaultMessage("A <strong>{0} error</strong> has occurred: {1}.")
   SafeHtml errorHtml(String error, SafeHtml details);
 }
 ErrorMessages msgs = GWT.create(ErrorMessages.class)

 void showError(String error, SafeHtml details) {
   errorBar.setHTML(msgs.errorHtml(error, details));
   errorBar.setVisible(true);
}

----------------------------------------

TITLE: Using RootLayoutPanel in GWT
DESCRIPTION: Example of adding a DockLayoutPanel to the RootLayoutPanel to fill the browser's client area.

LANGUAGE: Java
CODE:
DockLayoutPanel appPanel = new DockLayoutPanel(Unit.EM);
RootLayoutPanel.get().add(appPanel);

----------------------------------------

TITLE: SafeHtmlBuilder List Example
DESCRIPTION: Example showing how to safely build HTML content with escaped user data using SafeHtmlBuilder

LANGUAGE: java
CODE:
public void showItems(List<String> items) {
  SafeHtmlBuilder builder = new SafeHtmlBuilder();
  for (String item : items) {
    builder.appendEscaped(item).appendHtmlConstant("<br/>");
  }
  itemsListHtml.setHTML(builder.toSafeHtml());
}

----------------------------------------

TITLE: Complete Material Design UI Template
DESCRIPTION: Final UiBinder XML template with Material Design components, styles and responsive layout.

LANGUAGE: xml
CODE:
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
             xmlns:g='urn:import:com.google.gwt.user.client.ui'>

    <g:HTMLPanel>
        <style is="custom-style">
            paper-icon-item {
                position: relative;
                overflow: hidden;
            }
            .toolbar {
                background: #4285f4 !important;
            }
            .header {
                font-size: 200%;
                margin-left: 50px;
            }
            .content {
                padding: 15px;
            }
            .add {
                position: absolute;
                bottom: 20px;
                right: 20px;
                --paper-fab-background: var(--paper-red-500);
            }
        </style>
        <paper-drawer-panel ui:field="drawerPanel">
            <div drawer="">
                <paper-header-panel mode="seamed">
                    <paper-toolbar class="toolbar"/>
                    <paper-icon-item ui:field="menuClearAll">
                        <iron-icon icon="delete" item-icon=""/>
                        <div>Clear All</div>
                        <paper-ripple/>
                    </paper-icon-item>
                    <paper-icon-item ui:field="menuClearDone">
                        <iron-icon icon="clear" item-icon=""/>
                        <div>Clear Done</div>
                        <paper-ripple/>
                    </paper-icon-item>
                    <paper-icon-item ui:field="menuSettings">
                        <iron-icon icon="settings" item-icon=""/>
                        <div>Settings</div>
                        <paper-ripple/>
                    </paper-icon-item>
                    <paper-icon-item ui:field="menuAbout">
                        <iron-icon icon="help" item-icon=""/>
                        <div>About</div>
                        <paper-ripple/>
                    </paper-icon-item>
                </paper-header-panel>
            </div>
            <div main="">
                <paper-header-panel mode="seamed">
                    <paper-toolbar class="toolbar">
                        <paper-icon-button ui:field="menu" icon="more-vert" paper-drawer-toggle=""/>
                        <span class="header">Todo List</span>
                    </paper-toolbar>
                    <div ui:field="content" class="content vertical center-justified layout"/>
                </paper-header-panel>
                <paper-fab ui:field="addButton" icon="add" title="add" class="add"/>
            </div>
        </paper-drawer-panel>
    </g:HTMLPanel>
</ui:UiBinder>

----------------------------------------

TITLE: Using SplitLayoutPanel in a DialogBox
DESCRIPTION: Demonstrates how to use a SplitLayoutPanel within a DialogBox, including setting its size explicitly.

LANGUAGE: Java
CODE:
SplitLayoutPanel split = new SplitLayoutPanel();
split.addWest(new HTML("west"), 128);
split.add(new HTML("center"));
split.setSize("20em", "10em");

DialogBox dialog = new DialogBox();
dialog.setText("caption");
dialog.add(split);
dialog.show();

----------------------------------------

TITLE: IsEditor Implementation Example in Java
DESCRIPTION: Demonstrates how to implement IsEditor interface for widget composition.

LANGUAGE: java
CODE:
class LabelDecorator extends Composite implements IsEditor<LeafValueEditor<String>> {
  private final Label wrapped = new Label();

  public LabelDecorator() {
    // Construct a pretty UI around the wrapped label
    initWidget(prettyContents);
  }

  public LeafValueEditor<String> asEditor() {
    return wrapped.asEditor();
  }
}

----------------------------------------

TITLE: Basic Number Formatting in GWT
DESCRIPTION: Demonstrates basic decimal number formatting using GWT's NumberFormat class with default locale settings.

LANGUAGE: java
CODE:
NumberFormat fmt = NumberFormat.getDecimalFormat();
double value = 12345.6789;
String formatted = fmt.format(value);
// Prints 1,2345.6789 in the default locale
GWT.log("Formatted string is" + formatted, null);

----------------------------------------

TITLE: Performing Validation in Java
DESCRIPTION: Demonstrates how to use the Validator to validate a Person object. This code snippet shows how to obtain a Validator instance and use it to validate an object, returning a set of ConstraintViolations.

LANGUAGE: java
CODE:
Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
Set<ConstraintViolation<Person>> violations = validator.validate(person);

----------------------------------------

TITLE: Constants Interface Definition in GWT
DESCRIPTION: Java interface extending Constants to abstract internationalized strings with corresponding method names matching property keys.

LANGUAGE: java
CODE:
public interface MyConstants extends Constants {
  String helloWorld();
  String goodbyeWorld();
}

----------------------------------------

TITLE: Basic HTML Widget Usage Example
DESCRIPTION: Examples showing unsafe and safe ways to create HTML widgets using string literals

LANGUAGE: java
CODE:
HTML widget = new HTML("Some text in the widget");

widget.setHTML(someText);

----------------------------------------

TITLE: Implementing XSRF Protection with Annotations
DESCRIPTION: Java interface using @XsrfProtect annotation to enable XSRF protection at the interface level.

LANGUAGE: java
CODE:
package com.example.foo.client;

  import com.google.gwt.user.client.rpc.RemoteService;
  import com.google.gwt.user.server.rpc.XsrfProtect

  @XsrfProtect
  public interface MyService extends RemoteService {
    public String myMethod(String s);
  }

----------------------------------------

TITLE: Accessing Java Methods and Fields from JSNI
DESCRIPTION: Example showing how to call Java instance and static methods, as well as access Java fields from within JSNI code. It demonstrates the syntax for invoking Java methods and accessing fields in JavaScript.

LANGUAGE: Java
CODE:
public native void bar(JSNIExample x, String s) /*-{
  // Call instance method instanceFoo() on this
  this.@com.google.gwt.examples.JSNIExample::instanceFoo(Ljava/lang/String;)(s);

  // Call instance method instanceFoo() on x
  x.@com.google.gwt.examples.JSNIExample::instanceFoo(Ljava/lang/String;)(s);

  // Call static method staticFoo()
  @com.google.gwt.examples.JSNIExample::staticFoo(Ljava/lang/String;)(s);

  // Read instance field on this
  var val = this.@com.google.gwt.examples.JSNIExample::myInstanceField;

  // Write instance field on x
  x.@com.google.gwt.examples.JSNIExample::myInstanceField = val + " and stuff";

  // Read static field (no qualifier)
  @com.google.gwt.examples.JSNIExample::myStaticField = val + " and stuff";
}-*/;

----------------------------------------

TITLE: JavaScript Event Listener Callback Implementation
DESCRIPTION: Demonstrates mapping JavaScript callbacks to Java functional interfaces using @JsFunction annotation. Shows event listener implementation for DOM elements.

LANGUAGE: java
CODE:
@JsFunction
public interface EventListenerCallback {
    void callEvent(Object event);
}

@JsType(isNative = true)
public class Element {
    public native void addEventListener(String eventType, EventListenerCallback fn);
}

Element element = DomGlobal.document.createElement("button");
element.addEventListener("click", (event) -> {
    GWT.log("clicked!");
});

LANGUAGE: javascript
CODE:
var element = document.createElement("button");
element.addEventListener("click", (event) => {
  console.log("clicked!");
});

----------------------------------------

TITLE: Constants Usage Example in GWT
DESCRIPTION: Example showing how to instantiate and use the Constants interface in GWT code.

LANGUAGE: java
CODE:
public void useMyConstants() {
  MyConstants myConstants = GWT.create(MyConstants.class);
  Window.alert(myConstants.helloWorld());
}

----------------------------------------

TITLE: Implementing a TabLayoutPanel in GWT
DESCRIPTION: Demonstrates creating a TabLayoutPanel with multiple tabs and associated content.

LANGUAGE: Java
CODE:
TabLayoutPanel p = new TabLayoutPanel(1.5, Unit.EM);
p.add(new HTML("this content"), "this");
p.add(new HTML("that content"), "that");
p.add(new HTML("the other content"), "the other");

----------------------------------------

TITLE: Setting Session Cookie Name for XSRF Protection
DESCRIPTION: XML configuration for specifying the session cookie name used for XSRF token generation.

LANGUAGE: xml
CODE:
<context-param>
  <param-name>gwt.xsrf.session_cookie_name</param-name>
  <param-value>JSESSIONID</param-value>
</context-param>

----------------------------------------

TITLE: Todo Item UI Component Definition
DESCRIPTION: UiBinder XML and Java implementation for a Todo list item component. Includes styling, checkbox functionality and data binding.

LANGUAGE: xml
CODE:
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
  xmlns:g='urn:import:com.google.gwt.user.client.ui'
  xmlns:p='urn:import:com.vaadin.polymer.paper.widget'
  xmlns:i='urn:import:com.vaadin.polymer.iron.widget'>
  <ui:style>
    @external .done;
    .item .done {
      text-decoration: line-through;
    }
    .title {
      padding-left: 20px;
      font-size: 150%;
      font-weight: normal;
    }
  </ui:style>
  <g:HTMLPanel
    addStyleNames="vertical center-justified layout {style.item}">
    <style>
    </style>
    <div class="vertical-section">
      <h4>
        <p:PaperCheckbox ui:field="done"></p:PaperCheckbox>
        <span ui:field="title" class='{style.title}'>Go to Google</span>
      </h4>
      <div ui:field="description" class='{style.description}'></div>
    </div>
  </g:HTMLPanel>
</ui:UiBinder>

----------------------------------------

TITLE: Conditional CSS in GSS for GWT
DESCRIPTION: Illustrates how to use conditional CSS in GSS with @if, @elseif, and @else at-rules. It demonstrates the use of the is() function for testing against configuration properties.

LANGUAGE: css
CODE:
/* CSS */
@if user.agent ie8 ie9 {

  .foo {...}

} @else {

  .bar {...}

}

@if locale en {
  .baz {...}
}

/* GSS */
@if (is("ie8") || is("ie9")) {

  .foo {...}

} @else {

  .bar {...}

}

@if (is("locale", "en")) {
  .baz {...}
}

----------------------------------------

TITLE: Configuring AutoBean Module Inheritance
DESCRIPTION: XML configuration to include the AutoBean module in a GWT project

LANGUAGE: xml
CODE:
<inherits name="com.google.web.bindery.autobean.AutoBean"/>

----------------------------------------

TITLE: Initializing GWT Project with webAppCreator
DESCRIPTION: Command to create a new GWT project using the webAppCreator tool, including JUnit setup.

LANGUAGE: shell
CODE:
./webAppCreator -out myapp  
                     -junit ../../../../gwt-tools/lib/junit/junit-3.8.1.jar 
                     com.example.myapp.MyApp

----------------------------------------

TITLE: Basic Person Editor Implementation in Java
DESCRIPTION: Example showing a basic implementation of a Person editor with its corresponding driver and workflow logic.

LANGUAGE: java
CODE:
// Regular POJO, no special types needed
public class Person {
  Address getAddress();
  Person getManager();
  String getName();
  void setManager(Person manager);
  void setName(String name);
}

public class PersonEditor extends Dialog implements Editor<Person> {
  Label nameEditor;
  AddressEditor addressEditor;
  ManagerSelector managerEditor;

  public PersonEditor() {
    // Instantiate my widgets, usually through UiBinder
  }
}

public class EditPersonWorkflow{
  interface Driver extends SimpleBeanEditorDriver<Person, PersonEditor> {}
  Driver driver = GWT.create(Driver.class);

  void edit(Person p) {
    PersonEditor editor = new PersonEditor();
    driver.initialize(editor);
    driver.edit(p);
    editor.center();
  }

  void save() {
    Person edited = driver.flush();
    if (driver.hasErrors()) {
      // A sub-editor reported errors
    }
    doSomethingWithEditedPerson(edited);
  }
}

----------------------------------------

TITLE: CssResource with Conditional CSS
DESCRIPTION: Example of using conditional CSS in CssResource

LANGUAGE: CSS
CODE:
@if (com.module.Foo.staticBooleanFunction()) {
  ... css rules ...
}

@if user.agent safari gecko1_8 { ... }
@if locale en { ... }

@if !user.agent ie6 opera {
  ...
}

----------------------------------------

TITLE: Specifying Initial Load Sequence in GWT Module XML
DESCRIPTION: Shows how to configure the initial load sequence for code splitting using the module XML file. This allows specifying the order of split point loading for optimization.

LANGUAGE: xml
CODE:
<extend-configuration-property name="compiler.splitpoint.initial.sequence"
    value="com.yourcompany.yourprogram.SomeClass"/>
<extend-configuration-property name="compiler.splitpoint.initial.sequence"
    value="com.yourcompany.yourprogram.AnotherClassClass"/>
<extend-configuration-property name="compiler.splitpoint.initial.sequence"
    value="com.yourcompany.yourprogram.YetAnotherClass"/>

----------------------------------------

TITLE: Querying Related Entities with RequestFactory
DESCRIPTION: Java code showing how to query for an entity and its related properties using RequestFactory's with() method.

LANGUAGE: java
CODE:
Request<Person> findReq = requestFactory.personRequest().find(personId).with("address");

// Multiple properties
Request<Person> findReq = find(personId).with("phone","address.city","address.zip");

----------------------------------------

TITLE: GWT Module XML Configuration (XML)
DESCRIPTION: XML configuration for the StockWatcher GWT module. It defines inheritance, entry point, and source paths.

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<module rename-to='stockwatcher'>
  <!-- Inherit the core Web Toolkit stuff.                        -->
  <inherits name='com.google.gwt.user.User'/>

  <!-- Inherit the default GWT style sheet.  You can change       -->
  <!-- the theme of your GWT application by uncommenting          -->
  <!-- any one of the following lines.                            -->
  <inherits name='com.google.gwt.user.theme.standard.Standard'/>
  <!-- <inherits name="com.google.gwt.user.theme.chrome.Chrome"/> -->
  <!-- <inherits name="com.google.gwt.user.theme.dark.Dark"/>     -->

  <!-- Other module inherits                                      -->

  <!-- Specify the app entry point class.                         -->
  <entry-point class='com.google.gwt.sample.stockwatcher.client.StockWatcher'/>

  <!-- Specify the paths for translatable code                    -->
  <source path='client'/>

</module>

----------------------------------------

TITLE: Editing and Updating an Existing Entity with RequestFactory
DESCRIPTION: Java code demonstrating how to edit an existing entity and send updates to the server using RequestFactory.

LANGUAGE: java
CODE:
EmployeeProxy editableEmployee = request.edit(returnedEmployee);
editableEmployee.setDepartment(newDepartment);
...
Request<Void> updateReq = request.persist().using(editableEmployee);

----------------------------------------

TITLE: Number Parsing in GWT
DESCRIPTION: Shows how to parse a numeric string back into a double value using NumberFormat.

LANGUAGE: java
CODE:
double value = NumberFormat.getDecimalFormat().parse("12345.6789");
GWT.log("Parsed value is" + value, null);

----------------------------------------

TITLE: Basic GWT Logging Configuration
DESCRIPTION: Shows the minimal configuration required to enable GWT logging in an application by inheriting the logging module and creating a logger instance.

LANGUAGE: xml
CODE:
# In your .gwt.xml file
    <inherits name="com.google.gwt.logging.Logging"/>

    # In your .java file
    Logger logger = Logger.getLogger("NameOfYourLogger");
    logger.log(Level.SEVERE, "this message should get logged");

----------------------------------------

TITLE: Session Storage Hook Example for GWT
DESCRIPTION: JavaScript code showing how Super Dev Mode uses session storage to redirect module loading.

LANGUAGE: javascript
CODE:
window.sessionStorage["__gwtDevModeHook:hello"]
// returns  "http://localhost:9876/hello/hello.nocache.js"

----------------------------------------

TITLE: Setting ARIA States for GWT CustomButton
DESCRIPTION: Demonstrates initializing ARIA pressed and disabled states for a CustomButton widget.

LANGUAGE: java
CODE:
protected CustomButton() {
    ...
    // Add a11y state "aria-pressed" and "aria-disabled"
    Roles.getButtonRole().setAriaPressedState(getElement(), PressedValue.of(false));
    Roles.getButtonRole().setAriaDisabledState(getElement(), false);
  }

----------------------------------------

TITLE: Servlet Container Directory Structure Example
DESCRIPTION: Shows the required directory structure for deploying a GWT application (DynaTable example) to a servlet container.

LANGUAGE: text
CODE:
webapps/dynatable/DynaTable.html
webapps/dynatable/DynaTable.css
webapps/dynatable/dynatable/dynatable.nocache.js
// The rest of your GWT application files under webapps/dynatable/dynatable/

----------------------------------------

TITLE: Implementing Splitters with SplitLayoutPanel in GWT UiBinder
DESCRIPTION: UiBinder XML template showing how to use SplitLayoutPanel within a DockLayoutPanel for a resizable layout.

LANGUAGE: XML
CODE:
<g:DockLayoutPanel unit='EM'>
  <g:north size='4'>
    <g:Label>Header</g:Label>
  </g:north>

  <g:center>
    <g:SplitLayoutPanel>
      <g:west size='128'>
        <g:Label>Navigation</g:Label>
      </g:west>

      <g:center>
        <g:ScrollPanel>
          <g:Label>Content Area</g:Label>
        </g:ScrollPanel>
      </g:center>
    </g:SplitLayoutPanel>
  </g:center>
</g:DockLayoutPanel>

----------------------------------------

TITLE: Writing Data to HTML5 Storage in GWT
DESCRIPTION: Shows how to write string data to storage using a key-value pair system.

LANGUAGE: java
CODE:
import com.google.gwt.storage.client.Storage;

final String symbol = newSymbolTextBox.getText().toUpperCase().trim();
stockStore = Storage.getLocalStorageIfSupported();
if (stockStore != null) {
  int numStocks = stockStore.getLength();
  stockStore.setItem("Stock."+numStocks, symbol);
}

----------------------------------------

TITLE: Rewriting Anchor Links using DOM in GWT
DESCRIPTION: This snippet demonstrates how to iterate through anchor tags found in the DOM and rewrite their href attributes. It uses the DOM to find elements by ID and modify their properties, showcasing DOM manipulation in GWT.

LANGUAGE: java
CODE:
/**
 * Find all anchor tags and if any point outside the site, 
 * redirect them to a "blocked" page.
 */
 private void rewriteLinksIterative() {
   ArrayList<String> links = new ArrayList<String>();
   putElementLinkIDsInList(this.getElement(), links);
   for (int i = 0; i < links.size(); i++) {
     Element elt = Document.get().getElementById(links.get(i));
     rewriteLink(elt, "www.example.com");
   }
 }

/**
 * Block all accesses out of the website that don't match 'sitename'
 * @param element An anchor link element
 * @param sitename name of the website to check.  e.g. "www.example.com"
 */
private void rewriteLink(Element element, sitename) {
  String href = element.getPropertyString("href");
  if (null == href) {
    return;
  }

  // We want to re-write absolute URLs that go outside of this site
  if (href.startsWith("http://") && 
      !href.startsWith("http://"+sitename+"/") {
    element.setPropertyString("href", "http://"+sitename+"/Blocked.html");
  }
}

----------------------------------------

TITLE: Basic GWT Module Definition
DESCRIPTION: Example of a simple GWT module XML configuration file showing module inheritance and entry point specification.

LANGUAGE: xml
CODE:
<module rename-to="dynatable">
    <inherits name="com.google.gwt.user.User" />
    <entry-point class="com.google.gwt.sample.dynatable.client.DynaTable" />
 </module>

----------------------------------------

TITLE: Configuring XsrfTokenServiceServlet in web.xml
DESCRIPTION: XML configuration for setting up the XSRF token service servlet and its URL mapping in the web.xml file.

LANGUAGE: xml
CODE:
<servlet>
  <servlet-name>xsrf</servlet-name>
  <servlet-class>
    com.google.gwt.user.server.rpc.XsrfTokenServiceServlet
  </servlet-class>
</servlet>
<servlet-mapping>
  <servlet-name>xsrf</servlet-name>
  <url-pattern>/gwt/xsrf</url-pattern>
</servlet-mapping>

----------------------------------------

TITLE: Capturing Keyboard Events using DOM in GWT
DESCRIPTION: This snippet shows how to use GWT's DOM methods to capture keyboard events for specific elements. It demonstrates event preview handling, checking for specific key combinations, and consuming events to prevent further processing.

LANGUAGE: java
CODE:
private ArrayList<Element> keyboardEventReceivers = new ArrayList<Element>();

/**
 * Widgets can register their DOM element object if they would like to be a
 * trigger to intercept keyboard events
 */
public void registerForKeyboardEvents(Element e) {
  this.keyboardEventReceivers.add(e);
}

/**
 * Returns true if this is one of the keys we are interested in
 */
public boolean isInterestingKeycode(int keycode) {
  // ...
  return false;
}

/**
 * Setup the event preview class when the module is loaded.
 */
private void setupKeyboardShortcuts() {
  // Define an inner class to handle the event
  Event.addNativePreviewHandler(new NativePreviewHandler() {
    public void onPreviewNativeEvent(NativePreviewEvent preview) {
      NativeEvent event = preview.getNativeEvent();

      Element elt = event.getEventTarget().cast();
      int keycode = event.getKeyCode();
      boolean ctrl = event.getCtrlKey();
      boolean shift = event.getShiftKey();
      boolean alt = event.getAltKey();
      boolean meta = event.getMetaKey();
      if (event.getType().equalsIgnoreCase("keypress") || ctrl || shift
          || alt || meta || keyboardEventReceivers.contains(elt)
          || !isInterestingKeycode(keycode)) {
        // Tell the event handler to continue processing this event.
        return;
      }

      GWT.log("Processing Keycode" + keycode, null);
      handleKeycode(keycode);

      // Tell the event handler that this event has been consumed
      preview.consume();
    }
  });
}

/**
 * Perform the keycode specific processing
 */
private void handleKeycode(int keycode) {
  switch (keycode) {
  // ...
  }
}

----------------------------------------

TITLE: Using LayoutPanel without RootLayoutPanel in GWT
DESCRIPTION: Shows how to use a LayoutPanel within a normal widget by explicitly setting its size.

LANGUAGE: Java
CODE:
LayoutPanel panel = new LayoutPanel();
RootPanel.get("someId").add(panel);
panel.setSize("20em", "10em");

----------------------------------------

TITLE: Deploying to Google App Engine
DESCRIPTION: Command to deploy a compiled GWT application to Google App Engine using the appcfg utility.

LANGUAGE: shell
CODE:
<appengine_home_dir>/appcfg.sh update war

----------------------------------------

TITLE: Inheriting HTTP Module in GWT
DESCRIPTION: XML configuration to inherit the HTTP module in a GWT application. This is necessary when using the RequestBuilder class for making HTTP requests.

LANGUAGE: xml
CODE:
<inherits name="com.google.gwt.http.HTTP"/>

----------------------------------------

TITLE: JSON Stock Data Format Example
DESCRIPTION: Example of the expected JSON structure for stock data with symbol, price and change fields.

LANGUAGE: json
CODE:
[
  {
    "symbol": "ABC",
    "price": 87.86,
    "change": -0.41
  },
  {
    "symbol": "DEF",
    "price": 62.79,
    "change": 0.49
  },
  {
    "symbol": "GHI",
    "price": 67.64,
    "change": 0.05
  }
]

----------------------------------------

TITLE: Defining ClientFactory Interface in Java
DESCRIPTION: Illustrates the definition of a ClientFactory interface for managing application-wide objects.

LANGUAGE: java
CODE:
public interface ClientFactory {
    EventBus getEventBus();
    PlaceController getPlaceController();
    HelloView getHelloView();
    GoodbyeView getGoodbyeView();
}

----------------------------------------

TITLE: Basic Messages Property and Interface Implementation - Java and Properties
DESCRIPTION: Demonstrates basic usage of Messages interface with property value substitution. Shows how to define a message in properties file and implement corresponding Java interface.

LANGUAGE: properties
CODE:
permissionDenied = Error {0}: User {1} Permission denied.

LANGUAGE: java
CODE:
public interface ErrorMessages extends Messages {
  String permissionDenied(int errorCode, String username);
}
ErrorMessages msgs = GWT.create(ErrorMessages.class)

void permissionDenied(int errorVal, String loginId) {
  Window.alert(msgs.permissionDenied(errorVal, loginId));
}

----------------------------------------

TITLE: Configuring GWT I18N Module
DESCRIPTION: XML configuration required in the module file to enable i18n formatting capabilities.

LANGUAGE: xml
CODE:
<inherits name="com.google.gwt.i18n.I18N"/>

----------------------------------------

TITLE: Defining StockWatcher CSS Styles
DESCRIPTION: CSS rules for styling the StockWatcher application including table formatting and dynamic color changes

LANGUAGE: css
CODE:
/* Formatting specific to the StockWatcher application */
body {
  padding: 10px;
}

.watchListHeader {
  background-color: #2062B8;
  color: white;
  font-style: italic;
}

.watchList {
  border: 1px solid silver;
  padding: 2px;
  margin-bottom:6px;
}

.watchListNumericColumn {
  text-align: right;
  width:8em;
}

.watchListRemoveColumn {
  text-align: center;
}

.addPanel {
  margin: 10px 0px 15px 0px;
}

----------------------------------------

TITLE: Updating ARIA States During Button Interaction
DESCRIPTION: Shows how to update ARIA pressed and disabled states in response to user interactions with a CustomButton.

LANGUAGE: java
CODE:
void toggleDown() {
    // Update a11y state "aria-pressed"
    Roles.getButtonRole().setAriaPressedState(getElement(), PressedValue.of(true));
  }

  void toggleUp() {
    // Update a11y state "aria-pressed"
    Roles.getButtonRole().setAriaPressedState(getElement(), PressedValue.of(false));
  }

  void setInactive() {
    // Update a11y state "aria-disabled"
    Roles.getButtonRole().setAriaDisabledState(getElement(), false);
  }

  void setActive() {
    // Update a11y state "aria-disabled"
    Roles.getButtonRole().setAriaDisabledState(getElement(), true);
  }

----------------------------------------

TITLE: Implementing a ResizeComposite in GWT
DESCRIPTION: Example of creating a custom widget that extends ResizeComposite to properly handle resize events.

LANGUAGE: Java
CODE:
class MyWidget extends ResizeComposite {
  private LayoutPanel p = new LayoutPanel();

  public MyWidget() {
    initWidget(p);
  }
}

----------------------------------------

TITLE: Creating and Persisting a New Entity with RequestFactory
DESCRIPTION: Example of creating a new Employee entity on the client and persisting it to the server using RequestFactory.

LANGUAGE: java
CODE:
EmployeeRequest request = requestFactory.employeeRequest();
EmployeeProxy newEmployee = request.create(EmployeeProxy.class);
newEmployee.setDisplayName(...);
newEmployee.setDepartment(...);
...
Request<Void> createReq = request.persist().using(newEmployee);

createReq.fire(new Receiver<Void>()
{
  @Override
    public void onSuccess(Void arg0)
    {
        // Update display
    }
});

----------------------------------------

TITLE: Generated Properties File for Internationalization
DESCRIPTION: This snippet shows an example of a generated properties file containing an entry for a tagged message in the UiBinder template.

LANGUAGE: Properties
CODE:
# Generated from my.app.HelloWorldMyBinderImplGenMessages
# for locale default

# Description: Greeting
022A824F26735ED0582324BE34F3CAE1=Hello, world.

----------------------------------------

TITLE: Implementing Basic Factorial Test in JUnit
DESCRIPTION: JUnit test method to verify the factorial computation for 0.

LANGUAGE: java
CODE:
public void testFactorial() {
  assertEquals(1, new MyApp().computeFactorial(0));
}

----------------------------------------

TITLE: GWT Theme Configuration
DESCRIPTION: XML configuration example for selecting GWT visual themes in the module file.

LANGUAGE: xml
CODE:
<!-- Inherit the default GWT style sheet. You can change       -->
<!-- the theme of your GWT application by uncommenting          -->
<!-- any one of the following lines.                           -->
<!-- <inherits name='com.google.gwt.user.theme.standard.Standard'/> -->
<!-- <inherits name="com.google.gwt.user.theme.chrome.Chrome"/> -->
<inherits name="com.google.gwt.user.theme.dark.Dark"/>

----------------------------------------

TITLE: Implementing Web Audio API with Elemental in GWT
DESCRIPTION: Demonstrates how to create and configure an audio oscillator using Elemental's Web Audio API bindings. The example shows the initialization of an AudioContext, creation of a square wave oscillator, and setting its frequency to 440Hz.

LANGUAGE: java
CODE:
package com.myapp;
import elemental.client.*;
import elemental.dom.*;
import elemental.html.*;

public class ElementalExample implements EntryPoint {
  public void onModuleLoad() {
    Window window = Browser.getWindow();
    AudioContext audioContext = window.newAudioContext();
    Oscillator osc = audioContext.createOscillator();
    osc.setType(Oscillator.SQUARE);
    osc.connect((AudioParam) audioContext.getDestination(), 0);
    osc.getFrequency().setValue(440.0f);
    osc.noteOn(0);
  }  
}

----------------------------------------

TITLE: GWT Messages Interface with Exact Values
DESCRIPTION: Example showing how to specify exact value matches for plural forms using =N syntax

LANGUAGE: java
CODE:
public interface MyMessages extends Messages {\n  @DefaultMessage("There are {0,number} items in your cart.")\n  @AlternateMessage({\n      "one", "There is 1 item in your cart.",\n      "=0", "Your cart is empty."\n  })\n  String cartItems(@PluralCount int itemCount);\n}

----------------------------------------

TITLE: JRE-based Unit Test for ContactsPresenter
DESCRIPTION: Example of a lightweight JUnit test for the ContactsPresenter using mocks.

LANGUAGE: java
CODE:
public class ExampleJRETest extends TestCase {
  private ContactsPresenter contactsPresenter;
  private ContactsServiceAsync mockRpcService;
  private EventBus eventBus;
  private ContactsPresenter.Display mockDisplay;

  protected void setUp() {
    mockRpcService = createStrictMock(ContactsServiceAsync.class);
    eventBus = new SimpleEventBus();
    mockDisplay = createStrictMock(ContactsPresenter.Display.class);
    contactsPresenter = new ContactsPresenter(mockRpcService, eventBus, mockDisplay);
  }

  public void testContactSort(){
    List<ContactDetails> contactDetails = new ArrayList<ContactDetails>();
    contactDetails.add(new ContactDetails("0", "c_contact"));
    contactDetails.add(new ContactDetails("1", "b_contact"));
    contactDetails.add(new ContactDetails("2", "a_contact"));
    contactsPresenter.setContactDetails(contactDetails);
    contactsPresenter.sortContactDetails();
    assertTrue(contactsPresenter.getContactDetail(0).getDisplayName().equals("a_contact"));
    assertTrue(contactsPresenter.getContactDetail(1).getDisplayName().equals("b_contact"));
    assertTrue(contactsPresenter.getContactDetail(2).getDisplayName().equals("c_contact"));
  }
}

----------------------------------------

TITLE: Updating Stock Table Row in GWT
DESCRIPTION: Method to update a single row in the stock table with formatted price and change values. Contains the code where the bug investigation starts.

LANGUAGE: java
CODE:
  private void updateTable(StockPrice price) {
    // Make sure the stock is still in the stock table.
    if (!stocks.contains(price.getSymbol())) {
      return;
    }
    
    int row = stocks.indexOf(price.getSymbol()) + 1;
    
    // Format the data in the Price and Change fields.
    String priceText = NumberFormat.getFormat("#,##0.00").format(
        price.getPrice());
    NumberFormat changeFormat = NumberFormat.getFormat("+#,##0.00;-#,##0.00");
    String changeText = changeFormat.format(price.getChange());
    String changePercentText = changeFormat.format(price.getChangePercent());
    
    // Populate the Price and Change fields with new data.
    stocksFlexTable.setText(row, 1, priceText);
    stocksFlexTable.setText(row, 2, changeText + " (" + changePercentText
        + "%)");
  }

----------------------------------------

TITLE: Map Properties Example in GWT
DESCRIPTION: Example showing how to define map values in properties files for Map-valued methods.

LANGUAGE: properties
CODE:
colors=header, body, footer
header=red
body=white
footer=blue

----------------------------------------

TITLE: German Properties File for Messages
DESCRIPTION: Properties file containing German translations for parameterized messages, using UTF-8 encoding for international characters.

LANGUAGE: properties
CODE:
lastUpdate = Letzte Aktualisierung: {0,date,medium} {0,time,medium}
invalidSymbol = ''{0}'' ist kein g&uuml;ltiges Aktiensymbol.

----------------------------------------

TITLE: Java Class Member Organization Example
DESCRIPTION: Shows the correct ordering and organization of class members including nested types, fields, initializers, constructors and methods with proper visibility sorting.

LANGUAGE: java
CODE:
public abstract class Foo {
  // Type declarations.
  public class FooBaz {
  }
 
  private class FooBar {
  }

  // Static field declarations.
  // Remember, fields do NOT need to be sorted.
  static String B;
  static String A;

  // Static initializer declarations.
  static {
  }

  // Static methods declarations.
  // Remember, methods do need to be sorted.
  static void aStatic() {
  }

  static void bStatic() {
  }

  // Instance field declaration.
  String bField;
  String aField;

  // Instance Initializer declarations.
  {
  }

  // Constructors declaration.
  public Foo() {
  }

  protected Foo(String s) {
  }

  Foo(int i) {
  }

  private Foo(boolean b) {
  }

  // Instance method declaration.
  public void b() {
  }

  public void c() {
  }

  protected void a() {
  }

  protected void d() {
  }

  protected void e() {
  }

  protected void f() {
  }

  String h() {
  }

  // The "abstract" keyword does not modify the position of the method.
  abstract String i();

  void j() {
  }

  private void g() {
  }
}

----------------------------------------

TITLE: Accessing Server-Provided Data in GWT using Dictionary
DESCRIPTION: Demonstrates how to use GWT's Dictionary class to access data provided by the server in the host page.

LANGUAGE: java
CODE:
public void onModuleLoad() {
  // Looks for a JS variable called "info" in the global scope
  Dictionary info = Dictionary.getDictionary("info");
  String email = info.get("email");
  Window.alert("Welcome, " + email + "!");
}

----------------------------------------

TITLE: Defining Validation Groups in Java
DESCRIPTION: Shows how to define and use validation groups. This example defines a Minimal group and applies it to specific constraints in an Address class.

LANGUAGE: java
CODE:
/** Validates a minimal set of constraints */
public interface Minimal { }

public class Address {
  @NotEmpty(groups = Minimal.class)
  @Size(max=50)
  private String street;
  
  @NotEmpty
  private String city;
  
  @NotEmpty(groups = {Minimal.class, Default.class})
  private String zipCode;
  ...
}

----------------------------------------

TITLE: Complex MenuBar Styling in GWT
DESCRIPTION: CSS example demonstrating complex styling for MenuBar widget including base styles and selected item states.

LANGUAGE: css
CODE:
.gwt-MenuBar { 
       /* properties applying to the menu bar itself */ 
   }
   .gwt-MenuBar .gwt-MenuItem { 
       /* properties applying to the menu bar's menu items */ 
   }
   .gwt-MenuBar .gwt-MenuItem-selected { 
       /* properties applying to the menu bar's selected menu items */
   }

----------------------------------------

TITLE: Example GWT Startup Event in JavaScript
DESCRIPTION: Sample event object showing how to structure a permutation selection event during GWT startup.

LANGUAGE: javascript
CODE:
{ 
  moduleName : 'Showcase',
  subSystem : 'startup',
  evtGroup : 'bootstrap',
  millis : new Date().getTime();
  type : 'selectingPermutation'
}

----------------------------------------

TITLE: Defining Basic Properties File in GWT
DESCRIPTION: Default properties file containing key-value pairs for internationalized strings.

LANGUAGE: properties
CODE:
helloWorld = hello, world
goodbyeWorld = goodbye, world

----------------------------------------

TITLE: Programmatic Locale Access in Java
DESCRIPTION: Examples of accessing locale information programmatically using LocaleInfo class in Java.

LANGUAGE: java
CODE:
if (LocaleInfo.getCurrentLocale().isRTL()) {
  ...
}

for (String localeName : LocaleInfo.getAvailableLocaleNames()) {
  String displayName = LocaleInfo.getLocaleNativeDisplayName(localeName);
  ...
}

----------------------------------------

TITLE: Firing Events After RPC Call
DESCRIPTION: Example of firing a ContactUpdatedEvent after successfully updating a contact via RPC.

LANGUAGE: java
CODE:
public class EditContactPresenter {
  ...
  private void doSave() {
    contact.setFirstName(display.getFirstName().getValue());
    contact.setLastName(display.getLastName().getValue());
    contact.setEmailAddress(display.getEmailAddress().getValue());

    rpcService.updateContact(contact, new AsyncCallback<Contact>() {
        public void onSuccess(Contact result) {
          eventBus.fireEvent(new ContactUpdatedEvent(result));
        }
        public void onFailure(Throwable caught) {
           ... 
        }
    });
  }
  ...
}

----------------------------------------

TITLE: GWT Event Handling Implementation
DESCRIPTION: Shows how GWT implements event handling internally to prevent memory leaks through centralized event dispatch.

LANGUAGE: javascript
CODE:
elem.onclick = (bits & 0x00001) ? $wnd.__dispatchEvent : null;

----------------------------------------

TITLE: Defining a Task Entity in Java
DESCRIPTION: Example of a server-side Task entity class with JPA annotations and basic properties.

LANGUAGE: java
CODE:
package com.google.gwt.sample.mobilewebapp.server.domain;

/**
 * A task used in the task list. 
 */
@Entity
public class Task {

  @Id
  Long id;

  private Date dueDate;

  @NotNull(message = "You must specify a name")
  @Size(min = 3, message = "Name must be at least 3 characters long")
  private String name;

  private String notes;

  /**
   * The unique ID of the user who owns this task.
   */
  @Index
  private String userId;

  /**
   * Get the due date of the Task.
   */
  public Date getDueDate() {
    return dueDate;
  }

  /**
   * Get the unique ID of the Task.
   */
  public Long getId() {
    return id;
  }

  /**
   * Get the name of the Task.
   */
  public String getName() {
    return name;
  }

  /**
   * Get the notes associated with the task.
   */
  public String getNotes() {
    return notes;
  }

  ...
}

----------------------------------------

TITLE: Client-Side Stock Price Generator Implementation
DESCRIPTION: Initial client-side implementation that generates random stock prices before being moved to server-side RPC implementation

LANGUAGE: java
CODE:
private void refreshWatchList() {
  final double MAX_PRICE = 100.0; // $100.00
  final double MAX_PRICE_CHANGE = 0.02; // +/- 2%

  StockPrice[] prices = new StockPrice[stocks.size()];
  for (int i = 0; i < stocks.size(); i++) {
    double price = Random.nextDouble() * MAX_PRICE;
    double change = price * MAX_PRICE_CHANGE
        * (Random.nextDouble() * 2.0 - 1.0);

    prices[i] = new StockPrice(stocks.get(i), price, change);
  }

  updateTable(prices);
}

----------------------------------------

TITLE: Plural Forms Implementation in GWT Messages
DESCRIPTION: Shows how to implement plural forms using Messages interface with @DefaultMessage and @AlternateMessage annotations for handling different count cases.

LANGUAGE: java
CODE:
public interface MyMessages extends Messages {
  @DefaultMessage("You have {0} trees.")
  @AlternateMessage({"one", "You have one tree."})
  String treeCount(@PluralCount int count);
}

----------------------------------------

TITLE: Implementing GWT EntryPoint for TodoList
DESCRIPTION: Java code for the EntryPoint class, demonstrating the creation of a PaperButton using the Widgets API.

LANGUAGE: java
CODE:
package org.gwtproject.tutorial.client;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.user.client.ui.RootPanel;
import com.vaadin.polymer.paper.widget.PaperButton;

public class TodoList implements EntryPoint {
  public void onModuleLoad() {
    // Use Widget API to Create a <paper-button>
    PaperButton button = new PaperButton("Press me!");
    button.setRaised(true);
    RootPanel.get().add(button);
  }
}

----------------------------------------

TITLE: Problematic JavaScript Event Handling Pattern
DESCRIPTION: Shows a JavaScript example that creates memory leaks through reference cycles between DOM elements and JavaScript objects.

LANGUAGE: javascript
CODE:
function makeWidget() {
  var widget = {};
  widget.someVariable = "foo";
  widget.elem = document.createElement ('div');
  widget.elem.onclick = function() {
    alert(widget.someVariable);
  };
}

----------------------------------------

TITLE: Creating Customer Overlay Type in Java
DESCRIPTION: Java class extending JavaScriptObject to create a type-safe wrapper around JavaScript customer objects with native accessor methods.

LANGUAGE: java
CODE:
class Customer extends JavaScriptObject {

  protected Customer() { }

  public final native String getFirstName() /*-{ return this.FirstName; }-*/;
  public final native String getLastName()  /*-{ return this.LastName;  }-*/;

  public final String getFullName() {
    return getFirstName() + " " + getLastName();
  }
}

----------------------------------------

TITLE: Java Callbacks in JavaScript using JSNI
DESCRIPTION: Examples of passing Java methods as callback functions to JavaScript code using JSNI, including parameter handling.

LANGUAGE: java
CODE:
package p;

class C {
  void doCallback(String callbackData) { ..... }
  native void invokeExternal(String data) /*-{
    $wnd.externalJsFunction(data, @p.C::doCallback(Ljava/lang/String;));
  }-*/;
}

LANGUAGE: java
CODE:
package p;

class D {
  void someCallback(int param1, int param2, String param3) { ..... }
  native void invokeExternal(String data) /*-{
    $wnd.externalJsFunction(data, function(int1, int2, string3) {
      @p.D::someCallback(IILjava/lang/String;)(int1, int2, string3);
    });
  }-*/
}

----------------------------------------

TITLE: Building GWT Application for App Engine Deployment
DESCRIPTION: Shell command for building a GWT application using Ant before deployment to Google App Engine.

LANGUAGE: shell
CODE:
ant build

----------------------------------------

TITLE: Implementing Presenter Class for GWT Application
DESCRIPTION: Shows the implementation of the Presenter class, which orchestrates interactions between the view and model in the GWT application example.

LANGUAGE: Java
CODE:
public class Presenter {
  private Meeting meeting;
  private MeetingView meetingView;
  private RoomScheduler roomScheduler;

  public Presenter(Meeting meeting, MeetingView meetingView, RoomScheduler roomScheduler) {
    this.meeting = meeting;
    this.meetingView = meetingView;
    this.roomScheduler = roomScheduler;
  }

  /**
   * Callback when the view's capacity text box changes
   *
   * @param textField the capacity TextBox widget
   */
  public void requiredCapacityChanged(HasText textField) {
    meeting.setCapacity(Integer.parseInt(textField.getText()));
    if (!roomScheduler.canAcceptCapacityFor(meeting)) {
      meetingView.disableSaveButton();
    }
  }

  protected Meeting getMeeting() {
    return meeting;
  }
}

----------------------------------------

TITLE: GWT Stock Data Overlay Type
DESCRIPTION: JavaScript overlay type implementation for handling JSON stock data in GWT client code.

LANGUAGE: java
CODE:
class StockData extends JavaScriptObject {
  protected StockData() {}

  public final native String getSymbol() /*-{ return this.symbol; }-*/;
  public final native double getPrice() /*-{ return this.price; }-*/;
  public final native double getChange() /*-{ return this.change; }-*/;

  public final double getChangePercent() {
    return 100.0 * getChange() / getPrice();
  }
}

----------------------------------------

TITLE: HTML Host Page Structure
DESCRIPTION: Basic HTML structure for embedding the GWT application, including a div placeholder with id 'stockList'.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <link type="text/css" rel="stylesheet" href="StockWatcher.css">
    <title>StockWatcher</title>
    <script type="text/javascript" language="javascript" src="stockwatcher/stockwatcher.nocache.js"></script>
  </head>
  <body>
    <h1>StockWatcher</h1>
    <div id="stockList"></div>
    <iframe src="javascript:''" id="__gwt_historyFrame" tabIndex='-1' style="position:absolute;width:0;height:0;border:0"></iframe>
    <noscript>
      <div style="width: 22em; position: absolute; left: 50%; margin-left: -11em; color: red; background-color: white; border: 1px solid red; padding: 4px; font-family: sans-serif">
        Your web browser must have JavaScript enabled
        in order for this application to display correctly.
      </div>
    </noscript>
  </body>
</html>

----------------------------------------

TITLE: GWT Messages Interface with List Formatting
DESCRIPTION: Example showing list formatting capabilities with plural forms and number formatting

LANGUAGE: java
CODE:
public interface MyMessages extends Messages {\n  @DefaultMessage("Orders {0,list,number} are ready for pickup.")\n  @AlternateMessage({\n      "=0", "No orders are ready for pickup.",\n      "one", "Order {0,list,number} is ready for pickup."\n  })\n  String ordersReady(@PluralCount List<Integer> orders);\n}

----------------------------------------

TITLE: Image Sprites in GSS for GWT
DESCRIPTION: Demonstrates how to define image sprites in GSS using the gwt-sprite property, replacing the @sprite at-rule from CssResource.

LANGUAGE: css
CODE:
/* CSS */
@sprite .logout {
  gwt-image: "iconLogin";
  display: block;
  cursor: pointer;
}

/* GSS */
.logout {
    gwt-sprite: "iconLogin";
    display: block;
    cursor: pointer;
}

----------------------------------------

TITLE: Making an HTTP Request in GWT Java
DESCRIPTION: Example of making an asynchronous HTTP request using GWT's RequestBuilder

LANGUAGE: java
CODE:
import com.google.gwt.http.client.*;
...

String url = "http://www.myserver.com/getData?type=3";
RequestBuilder builder = new RequestBuilder(RequestBuilder.GET, URL.encode(url));

try {
  Request request = builder.sendRequest(null, new RequestCallback() {
    public void onError(Request request, Throwable exception) {
       // Couldn't connect to server (could be timeout, SOP violation, etc.)
    }

    public void onResponseReceived(Request request, Response response) {
      if (200 == response.getStatusCode()) {
          // Process the response in response.getText()
      } else {
        // Handle the error.  Can get the status text from response.getStatusText()
      }
    }
  });
} catch (RequestException e) {
  // Couldn't connect to server
}

----------------------------------------

TITLE: Layout Debugging with Button Positioning in GWT
DESCRIPTION: Example demonstrating how to debug layout issues by creating a DockPanel with two buttons positioned on left and right sides. Shows initial implementation with width setting.

LANGUAGE: java
CODE:
VerticalPanel vertPanel = new VerticalPanel();

    DockPanel dockPanel = new DockPanel();
    dockPanel.setWidth("100%");
    dockPanel.add(new Button("leftButton"), DockPanel.WEST);
    dockPanel.add(new Button("rightButton"), DockPanel.EAST);

    vertPanel.add(dockPanel);

    RootPanel.get().add(vertPanel);

----------------------------------------

TITLE: Creating an EmployeeProxy Interface in Java
DESCRIPTION: Definition of a client-side EntityProxy interface representing an Employee entity.

LANGUAGE: java
CODE:
@ProxyFor(Employee.class)
public interface EmployeeProxy extends EntityProxy {

  String getDepartment();

  String getDisplayName();

  Long getId();

  String getPassword();

  EmployeeProxy getSupervisor();

  String getUserName();

  void setDepartment(String department);

  void setDisplayName(String displayName);

  void setPassword(String password);

  void setSupervisor(EmployeeProxy supervisor);

  void setUserName(String userName);
}

----------------------------------------

TITLE: Translating HTML Attributes
DESCRIPTION: This snippet demonstrates how to mark HTML attributes for translation using the <ui:attribute> element.

LANGUAGE: XML
CODE:
<th title="Gross receipts">
  <ui:attribute ui:name='title' ui:description='Tooltip text for gross column'/>
  <ui:msg description='name of gross column'>Gross</ui:msg>
</th>

----------------------------------------

TITLE: Event Handler Optimization in GWT
DESCRIPTION: Demonstrates efficient event handling for multiple widgets using a shared click handler implementation instead of individual handlers per widget.

LANGUAGE: java
CODE:
class MyApp implements EntryPoint, ClickHandler {

   /* Be careful with saving UI components in datastructures like this:
    * if you remove a button from the app, make sure you also remove
    * its reference from buttonMap HashMap to avoid memory leaks.
    */
   Map buttonMap<Button, Integer> = new HashMap<Button,Integer>();

   public void onModuleLoad() {
     FlowPanel panel = new FlowPanel();
     for (int i = 1; i < 100; ++i) {
        Button newButton = new Button("Option " + i);
        newButton.addClickHandler(this);
        panel.add(newButton);
        buttonmap.add(newButton, Integer.valueOf(i));
     }
     RootPanel.get().add(panel);
   }

   // The shared ClickHandler code.
   public void onClick(ClickEvent event) {
     Object sender = event.getSource();
     if (sender instanceof Button) {
       Button b = (Button) sender;
       Integer context = buttonMap.get(b);
       if (context != null) {
         // ... Handle the button click for this button.
       }
     }
   }
 }

----------------------------------------

TITLE: Running CSS to GSS Conversion Tool
DESCRIPTION: Shell command to run the CSS to GSS conversion tool for a single file.

LANGUAGE: shell
CODE:
java -cp gwt-user.jar com.google.gwt.resources.converter.Css2Gss fileToConvert.css

----------------------------------------

TITLE: Initial Main UiBinder XML Template
DESCRIPTION: Basic UiBinder XML template for the main application screen layout.

LANGUAGE: xml
CODE:
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
             xmlns:g='urn:import:com.google.gwt.user.client.ui'>

  <g:HTMLPanel>

  </g:HTMLPanel>
</ui:UiBinder>

----------------------------------------

TITLE: Generating Random Stock Prices in GWT
DESCRIPTION: Generates random stock prices and change values for the watch list.

LANGUAGE: Java
CODE:
private void refreshWatchList() {
 final double MAX_PRICE = 100.0; // $100.00
 final double MAX_PRICE_CHANGE = 0.02; // +/- 2%

 StockPrice[] prices = new StockPrice[stocks.size()];
 for (int i = 0; i < stocks.size(); i++) {
   double price = Random.nextDouble() * MAX_PRICE;
   double change = price * MAX_PRICE_CHANGE
       * (Random.nextDouble() * 2.0 - 1.0);

   prices[i] = new StockPrice(stocks.get(i), price, change);
 }

 updateTable(prices);
}

----------------------------------------

TITLE: Reading Data from HTML5 Storage in GWT
DESCRIPTION: Shows how to iterate through storage contents and display them in a FlexTable widget.

LANGUAGE: java
CODE:
import com.google.gwt.storage.client.Storage;

private FlexTable stocksFlexTable = new FlexTable();
private Storage stockstore = null;

stockStore = Storage.getLocalStorageIfSupported();
if (stockStore != null){
  for (int i = 0; i < stockStore.getLength(); i++){
    String key = stockStore.key(i);
    stocksFlexTable.setText(i+1, 0, stockStore.getItem(key));
    stocksFlexTable.setWidget(i+1, 2, new Label());
  }
}

----------------------------------------

TITLE: Adding a Linker in GWT Module XML
DESCRIPTION: Demonstrates how to add a linker to a GWT module configuration file. This example shows adding the 'sso' linker to a module that inherits from the Core module.

LANGUAGE: xml
CODE:
<module>
  <inherits name="com.google.gwt.core.Core" />
  <add-linker name="sso" />
</module>

----------------------------------------

TITLE: Updated GWT JSNI Methods for Correct Window Context
DESCRIPTION: Modified JSNI methods to ensure correct window context for script insertion and callback setup in GWT applications.

LANGUAGE: java
CODE:
public native static void setup(Hax0r h, String callback) /*-{
    window[callback] = function(someData) {
      h.@com.google.gwt.hax0r.client.Hax0r::handle(Lcom/google/gwt/core/client/JavaScriptObject;)(someData);
    }
  }-*/;

public native void addScript(String uniqueId, String url) /*-{
  var elem = document.createElement("script");
  elem.setAttribute("language", "JavaScript");
  elem.setAttribute("src", url);
  document.getElementsByTagName("body")[0].appendChild(elem);
}-*/;

----------------------------------------

TITLE: Setting CSS to GSS Autoconversion Mode
DESCRIPTION: XML configuration to set the conversion mode for automatic CSS to GSS conversion.

LANGUAGE: xml
CODE:
<set-configuration-property name="CssResource.conversionMode" value="strict" />

----------------------------------------

TITLE: Template-Based GWT Host Page using JSP
DESCRIPTION: Illustrates how to create a dynamic GWT host page using JSP, which provides a more readable and maintainable approach for complex host pages.

LANGUAGE: jsp
CODE:
<!-- gwt-hosting.jsp -->
<html>
 <head>
<%
   UserService userService = UserServiceFactory.getUserService();
   if (userService.isUserLoggedIn()) {
%>
    <script type="text/javascript" src="sample/sample.nocache.js"></script>
    <script type="text/javascript">
      var info = { "email" : "<%= userService.getCurrentUser().getEmail() %>" };
    </script>
  </head>
  <body>
  <a href="<%= userService.createLogoutURL(request.getRequestURI()) %>">Log out</a>
<%
   } else {
%>
  </head>
  <body>
    <a href="<%= userService.createLoginURL(request.getRequestURI()) %>">Log in</a>
<%
   }
%>
 </body>
</html>

----------------------------------------

TITLE: Arabic Properties File for Plural Forms
DESCRIPTION: Properties file containing Arabic translations with multiple plural forms including none, one, two, few, and many

LANGUAGE: properties
CODE:
cartItems=There are {0,number} items in your cart.\ncartItems[none]=There are no items in your cart.\ncartItems[one]=There is one item in your cart.\ncartItems[two]=There are two items in your cart.\ncartItems[few]=There are {0,number} items in your cart, which are few.\ncartItems[many]=There are {0,number} items in your cart, which are many.

----------------------------------------

TITLE: GWT Messages Interface with Offset Example
DESCRIPTION: Implementation showing the use of @Offset annotation for adjusting plural counts before rule application

LANGUAGE: java
CODE:
public interface MyMessages extends Messages {\n  @DefaultMessage("{1}, {2} and {0} others are here.")\n  @AlternateMessage({\n      "=0", "Nobody is here.",\n      "=1", "{1} is  here.",\n      "=2", "{1} and {2} are here.",\n      "one", "{1}, {2}, and one other are here."\n  })\n  String peopleHere(@PluralCount @Offset(2) String[] names, String name1,\n      String name2);\n}

----------------------------------------

TITLE: Basic English Plural Example
DESCRIPTION: Simple text example showing basic English plural forms

LANGUAGE: text
CODE:
You have 1 tree.\nYou have 2 trees.

----------------------------------------

TITLE: Basic English Plural Example
DESCRIPTION: Simple text example showing basic English plural forms

LANGUAGE: text
CODE:
You have 1 tree.\nYou have 2 trees.

----------------------------------------

TITLE: Gilead Integration for Account Entity
DESCRIPTION: Java class for Account entity modified to work with Gilead for GWT-Hibernate integration.

LANGUAGE: Java
CODE:
import net.sf.gilead.pojo.java5.LightEntity;

public class Account extends LightEntity implements Serializable {
  // ...
}

----------------------------------------

TITLE: Implementing Meeting Model Class for GWT Application
DESCRIPTION: Shows the implementation of the Meeting model class used in the GWT application example.

LANGUAGE: Java
CODE:
public class Meeting {
  private Integer capacity;

  public int getCapacity() {
    return capacity;
  }

  public void setCapacity(int capacity) {
    this.capacity = capacity;
  }
}

----------------------------------------

TITLE: Logger Instance Creation in GWT
DESCRIPTION: Demonstrates how to create different types of loggers in a hierarchy including root, parent, and child loggers.

LANGUAGE: java
CODE:
private static Logger childLogger = Logger.getLogger("ParentLogger.Child");
private static Logger parentLogger = Logger.getLogger("ParentLogger");
private static Logger rootLogger = Logger.getLogger("");

----------------------------------------

TITLE: Setting Default Locale in GWT Module XML
DESCRIPTION: Configuration to set a default locale and fallback behavior in GWT module XML.

LANGUAGE: xml
CODE:
<extend-property name="locale" values="en,es,de,fr,it" /> <!-- 1. full list of supported locales --> 
<set-property name="locale" value="en,es,de,fr,it" />     <!-- 2. remove the 'default' locale permutation -->
<set-property-fallback name="locale" value="en" />        <!-- 3. set the fallback locale, in replacement for the default 'default' locale -->

----------------------------------------

TITLE: French Properties File for Plural Forms
DESCRIPTION: Properties file containing French translations with plural forms for cart items

LANGUAGE: properties
CODE:
cartItems=There are {0,number} items in your cart.\ncartItems[one]=There is {0,number} item in your cart.

----------------------------------------

TITLE: Loading GWT Application Script in HTML
DESCRIPTION: Example of including the GWT application script in the host HTML page. This demonstrates the standard way to bootstrap a GWT application.

LANGUAGE: html
CODE:
<script language="JavaScript" src="http://mydomain.com/<module>.nocache.js"></script>

----------------------------------------

TITLE: Server-side Locale Factory Usage
DESCRIPTION: Example of using GWT's locale factory infrastructure in a generator context.

LANGUAGE: java
CODE:
GwtLocaleFactory factory = LocaleUtils.getLocaleFactory();

Set<GwtLocale> locales = localeUtils.getAllLocales();

----------------------------------------

TITLE: Compiler Error - Element Set Once
DESCRIPTION: Example of assertion error encountered when a widget attempts to call setElement() multiple times in GWT 1.5+.

LANGUAGE: text
CODE:
[ERROR] Uncaught exception escaped
java.lang.AssertionError: Element may only be set once

----------------------------------------

TITLE: Implementing GWT JUnit Test Class in Java
DESCRIPTION: Example of a basic GWT JUnit test class extending GWTTestCase. It includes a method to specify the GWT module name and a simple test case.

LANGUAGE: Java
CODE:
package com.google.gwt.sample.stockwatcher.client;

import com.google.gwt.junit.client.GWTTestCase;

/**
 * GWT JUnit tests must extend GWTTestCase.
 */
public class StockWatcherTest extends GWTTestCase {                       // (1)

  /**
   * Must refer to a valid module that sources this class.
   */
  public String getModuleName() {                                         // (2)
    return "com.google.gwt.sample.stockwatcher.StockWatcher";
  }

  /**
   * Add as many tests as you like.
   */
  public void testSimple() {                                              // (3)
    assertTrue(true);
  }

}

----------------------------------------

TITLE: Enabling GSS Configuration in GWT
DESCRIPTION: XML configuration property to enable GSS processing for all CssResource interfaces in GWT.

LANGUAGE: xml
CODE:
<set-configuration-property name="CssResource.enableGss" value="true" />

----------------------------------------

TITLE: Custom Widget Creation Profiling in Java
DESCRIPTION: Example implementation showing how to profile widget creation time using the StatsEventLogger.

LANGUAGE: java
CODE:
public FlexTable createWidget() {
  FlexTable listings = new FlexTable();
  double startTime = Duration.currentTimeMillis();
  StatsEventLogger.logEvent(GWT.getModuleName(), "listings", "loadListings", startTime, "begin");
  loadListings(listings, range);
  double endTime = Duration.currentTimeMillis();
  StatsEventLogger.logEvent(GWT.getModuleName(), "listings", "loadListings", endTime, "end");
  return listings;
}

----------------------------------------

TITLE: Using ClientBundle Resources in Java
DESCRIPTION: Example of using resources from a ClientBundle instance

LANGUAGE: Java
CODE:
// Inject the contents of the CSS file
MyResources.INSTANCE.css().ensureInjected();

// Display the manual file in an iframe
new Frame(MyResources.INSTANCE.ownersManual().getSafeUri().asString());

----------------------------------------

TITLE: Fixing GWT 2.7.0 Maven POM Configuration
DESCRIPTION: XML snippet to correct a bug in the generated pom.xml file for GWT 2.7.0, adding the missing <type> parameter to the dependencyManagement section.

LANGUAGE: xml
CODE:
<dependencyManagement>
  <dependencies>
    <!-- ensure all GWT deps use the same version (unless overridden) -->
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt</artifactId>
      <version>${gwtVersion}</version>
      <scope>import</scope>
      <type>pom</type>
   </dependency>
 </dependencies>
</dependencyManagement>

----------------------------------------

TITLE: Defining RoomScheduler Interface for GWT Application
DESCRIPTION: Defines the RoomScheduler interface used in the GWT application example.

LANGUAGE: Java
CODE:
public interface RoomScheduler {
  boolean canAcceptCapacityFor(Meeting meeting);
}

----------------------------------------

TITLE: Including Runtime Values in Translatable Messages
DESCRIPTION: This snippet demonstrates how to include elements with ui:field attributes in translatable messages, which allows for runtime value changes.

LANGUAGE: XML
CODE:
<ui:msg description='closed for business message'>
  (closed <span ui:field='closingDate' /> through <span ui:field='reopeningDate'/>)
</ui:msg>

----------------------------------------

TITLE: Setting GSS Default in UiBinder
DESCRIPTION: XML configuration to set GSS as the default styling language in UiBinder.

LANGUAGE: xml
CODE:
<set-configuration-property name="CssResource.gssDefaultInUiBinder" value="true" />

----------------------------------------

TITLE: JSON Stock Data Servlet Implementation
DESCRIPTION: Java servlet that generates random stock data in JSON format based on requested stock symbols.

LANGUAGE: java
CODE:
public class JsonStockData extends HttpServlet {
  private static final double MAX_PRICE = 100.0;
  private static final double MAX_PRICE_CHANGE = 0.02;

  @Override
  protected void doGet(HttpServletRequest req, HttpServletResponse resp)
      throws ServletException, IOException {
    Random rnd = new Random();
    PrintWriter out = resp.getWriter();
    out.println('[');
    String[] stockSymbols = req.getParameter("q").split(" ");
    boolean firstSymbol = true;
    for (String stockSymbol : stockSymbols) {
      double price = rnd.nextDouble() * MAX_PRICE;
      double change = price * MAX_PRICE_CHANGE * (rnd.nextDouble() * 2f - 1f);
      if (firstSymbol) {
        firstSymbol = false;
      } else {
        out.println("  ,");
      }
      out.println("  {");
      out.print("    \"symbol\": \"");
      out.print(stockSymbol);
      out.println("\",");
      out.print("    \"price\": ");
      out.print(price);
      out.println(',');
      out.print("    \"change\": ");
      out.println(change);
      out.println("  }");
    }
    out.println(']');
    out.flush();
  }
}

----------------------------------------

TITLE: Implementing a GWT Generator in Java
DESCRIPTION: Example of a Generator subclass implementation for generating proxy classes for RemoteService interfaces at compile time.

LANGUAGE: Java
CODE:
public class ServiceInterfaceProxyGenerator extends Generator {

  public String generate(TreeLogger logger, GeneratorContext ctx,
      String requestedClass) throws UnableToCompleteException {

    TypeOracle typeOracle = ctx.getTypeOracle();
    assert (typeOracle != null);

    JClassType remoteService = typeOracle.findType(requestedClass);
    if (remoteService == null) {
      logger.log(TreeLogger.ERROR, "Unable to find metadata for type '"
          + requestedClass + "'", null);
      throw new UnableToCompleteException();
    }

    if (remoteService.isInterface() == null) {
      logger.log(TreeLogger.ERROR, remoteService.getQualifiedSourceName()
          + " is not an interface", null);
      throw new UnableToCompleteException();
    }

    ProxyCreator proxyCreator = new ProxyCreator(remoteService);

    TreeLogger proxyLogger = logger.branch(TreeLogger.DEBUG,
        "Generating client proxy for remote service interface '"
            + remoteService.getQualifiedSourceName() + "'", null);

    return proxyCreator.create(proxyLogger, ctx);
  }
}

----------------------------------------

TITLE: Configuring JDO for App Engine Datastore
DESCRIPTION: XML configuration for Java Data Objects (JDO) persistence in App Engine

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<jdoconfig xmlns="http://java.sun.com/xml/ns/jdo/jdoconfig"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://java.sun.com/xml/ns/jdo/jdoconfig">
  <persistence-manager-factory name="transactions-optional">
    <property name="javax.jdo.PersistenceManagerFactoryClass" value="org.datanucleus.store.appengine.jdo.DatastoreJDOPersistenceManagerFactory"/>
    <property name="javax.jdo.option.ConnectionURL" value="appengine"/>
    <property name="javax.jdo.option.NontransactionalRead" value="true"/>
    <property name="javax.jdo.option.NontransactionalWrite" value="true"/>
    <property name="javax.jdo.option.RetainValues" value="true"/>
    <property name="datanucleus.appengine.autoCreateDatastoreTxns" value="true"/>
  </persistence-manager-factory>
</jdoconfig>

----------------------------------------

TITLE: Defining UiBinder Template in XML
DESCRIPTION: Shows the XML template used with UiBinder for defining the UI structure.

LANGUAGE: xml
CODE:
<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
             xmlns:g="urn:import:com.google.gwt.user.client.ui">
    <ui:style>
        .important {
            font-weight: bold;
        }
    </ui:style>
    <g:HTMLPanel>
        Hello,
        <span class="{style.important}" ui:field="nameSpan" />
        <g:Anchor ui:field="goodbyeLink" text="Say good-bye"></g:Anchor>
    </g:HTMLPanel>
</ui:UiBinder>

----------------------------------------

TITLE: Writing a Unit Test for StockPrice Constructor in Java
DESCRIPTION: Example of a JUnit test method to verify the correct initialization of instance fields in the StockPrice class constructor.

LANGUAGE: Java
CODE:
/**
 * Verify that the instance fields in the StockPrice class are set correctly.
 */
public void testStockPriceCtor() {
  String symbol = "XYZ";
  double price = 70.0;
  double change = 2.0;
  double changePercent = 100.0 * change / price;

  StockPrice sp = new StockPrice(symbol, price, change);
  assertNotNull(sp);
  assertEquals(symbol, sp.getSymbol());
  assertEquals(price, sp.getPrice(), 0.001);
  assertEquals(change, sp.getChange(), 0.001);
  assertEquals(changePercent, sp.getChangePercent(), 0.001);
}

----------------------------------------

TITLE: Buggy Change Percentage Calculation in GWT
DESCRIPTION: Original method containing the bug where the change percentage is incorrectly calculated by multiplying by 10 instead of 100.

LANGUAGE: java
CODE:
public double getChangePercent() {
  return 10.0 * this.change / this.price;
}

----------------------------------------

TITLE: Setting Locale via HTML Meta Tag
DESCRIPTION: Example of specifying locale using meta tag in HTML host page.

LANGUAGE: html
CODE:
<html>
  <head>
    <meta name="gwt:property" content="locale=ja_JP">
  </head>
  <body>
    <!-- Load the GWT compiled module code                           -->
    <script src="com.google.gwt.examples.i18n.ColorNameLookupExample.nocache.js " />
  </body>
</html>

----------------------------------------

TITLE: Vulnerable Python CGI Example
DESCRIPTION: Example of a vulnerable Python CGI script that echoes user input without proper escaping, making it susceptible to XSS attacks.

LANGUAGE: python
CODE:
import cgi
f = cgi.FieldStorage()
name = f.getvalue('name') or 'there'

s = '<html><body><div>Hello, ' + name + '!</div></body></html>'

print 'Content-Type: text/html'
print 'Content-Length: %s' % (len(s),)
print
print s

----------------------------------------

TITLE: CSS to GSS Conversion with Scope
DESCRIPTION: Shell command to run the CSS to GSS conversion tool with additional scope files for variable resolution.

LANGUAGE: shell
CODE:
java -cp gwt-user.jar com.google.gwt.resources.converter.Css2Gss -scope foo.css,bar.css fileToConvert.css

----------------------------------------

TITLE: Dozer Mapping Configuration for Hibernate Entities
DESCRIPTION: XML configuration for Dozer mappings between Hibernate entities and DTOs.

LANGUAGE: XML
CODE:
<mappings>
  <mapping>
    <class-a>com.google.musicstore.domain.Account</class-a>
    <class-b>com.google.musicstore.dto.AccountDTO</class-b>
    <field-exclude>
      <a>records</a>
      <b>records</b>
    </field-exclude>
  </mapping>

  <mapping>
    <class-a>com.google.musicstore.domain.Record</class-a>
    <class-b>com.google.musicstore.dto.RecordDTO</class-b>
  </mapping>
</mappings>

----------------------------------------

TITLE: Adding Timestamp to GWT Stock Table Updates
DESCRIPTION: Adds a formatted timestamp showing the last update time for the stock data.

LANGUAGE: Java
CODE:
// Display timestamp showing last refresh.
DateTimeFormat dateFormat = DateTimeFormat.getFormat(
DateTimeFormat.PredefinedFormat.DATE_TIME_MEDIUM);
lastUpdatedLabel.setText("Last update : " 
  + dateFormat.format(new Date()));

----------------------------------------

TITLE: Scientific Notation Formatting in GWT
DESCRIPTION: Example of formatting numbers in scientific notation using GWT's NumberFormat.

LANGUAGE: java
CODE:
double value = 12345.6789;
String formatted = NumberFormat.getScientificFormat().format(value);
// prints 1.2345E4 in the default locale
GWT.log("Formatted string is" + formatted, null);

----------------------------------------

TITLE: UiBinder XML Example (GWT 2.0.0 RC2)
DESCRIPTION: Example showing how to use LayoutPanel with UiBinder markup to define layout in a declarative way.

LANGUAGE: XML
CODE:
<g:LayoutPanel>
  <g:layer left='1em' width='20px'><g:Label>left-width</g:Label></g:Layer>
  <g:layer right='1em' width='20px'><g:Label>right-width</g:Label></g:Layer>
  <g:layer><g:Label>nada</g:Label></g:Layer>
</g:LayoutPanel>

----------------------------------------

TITLE: Defining Event Structure in JavaScript
DESCRIPTION: JSON structure defining the format of metric events including module name, subsystem, event group, timestamp and type.

LANGUAGE: javascript
CODE:
{ 
  moduleName : <Module name>,
  subSystem : <Subsystem name>,
  evtGroup : <Event group>,
  millis : <Current time in millis>,
  type : <Event type>
}

----------------------------------------

TITLE: Implementing Module Entry Point with Customer Access
DESCRIPTION: Example showing how to access JavaScript customer objects using the overlay type from within GWT module code.

LANGUAGE: java
CODE:
class MyModuleEntryPoint implements EntryPoint {
  public void onModuleLoad() {
    Customer c = getFirstCustomer();
    Window.alert("Hello, " + c.getFirstName());
  }

  private native Customer getFirstCustomer() /*-{
    return $wnd.jsonData[0];
  }-*/;
}

----------------------------------------

TITLE: Firefox Profile Manager Command
DESCRIPTION: Command to open Firefox Profile Manager for custom profile creation

LANGUAGE: shell
CODE:
firefox.exe -ProfileManager

----------------------------------------

TITLE: Periodic Execution with Timer in GWT
DESCRIPTION: Illustrates how to use Timer's scheduleRepeating() method for periodic execution. This example updates an elapsed time display every half second.

LANGUAGE: java
CODE:
public class Foo {

  private Timer elapsedTimer;
  private Label elapsedLabel = new Label();
  private long startTime;

  public Foo () {
    elapsedTimer = new Timer () {
      public void run() {
        showElapsed();
      }
    };

    startTime = System.currentTimeMillis();
    elapsedTimer.scheduleRepeating(500);
  }

  private void showElapsed () {
    double elapsedTime = (System.currentTimeMillis() - startTime) / 1000.0;
    NumberFormat n = NumberFormat.getFormat("#,##0.000");
    elapsedLabel.setText("Elapsed: " + n.format(elapsedTime));
  }
}

----------------------------------------

TITLE: Gilead Integration for Record Entity
DESCRIPTION: Java class for Record entity modified to work with Gilead for GWT-Hibernate integration.

LANGUAGE: Java
CODE:
import net.sf.gilead.pojo.java5.LightEntity;

public class Account extends LightEntity implements Serializable {
  // ...
}

----------------------------------------

TITLE: Configuring XSIFrame Linker for GWT 2.5.1
DESCRIPTION: XML configuration required in module.xml file to enable Super Dev Mode for GWT 2.5.1, including linker setup and source map configuration.

LANGUAGE: xml
CODE:
<add-linker name="xsiframe"/>
<set-configuration-property name="devModeRedirectEnabled" value="true"/>
<set-property name="compiler.useSourceMaps" value="true"/>

----------------------------------------

TITLE: Running GWT Development Mode (Shell)
DESCRIPTION: Command to run the GWT application in development mode using Ant.

LANGUAGE: Shell
CODE:
ant devmode

----------------------------------------

TITLE: Defining JSON Data Structure in JavaScript
DESCRIPTION: Example JavaScript array containing JSON objects representing customer data with first and last names.

LANGUAGE: javascript
CODE:
var jsonData = [
  { "FirstName" : "Jimmy", "LastName" : "Webber" },
  { "FirstName" : "Alan",  "LastName" : "Dayal" },
  { "FirstName" : "Keanu", "LastName" : "Spoon" },
  { "FirstName" : "Emily", "LastName" : "Rudnick" }
];

----------------------------------------

TITLE: Runtime Locale Configuration in GWT Module
DESCRIPTION: Adding CLDR locales support for runtime locale handling in GWT module XML.

LANGUAGE: xml
CODE:
<inherits name="com.google.gwt.i18n.CldrLocales"/>

----------------------------------------

TITLE: Handling Widget Visibility in LayoutPanel
DESCRIPTION: Demonstrates the correct way to set a child widget's visibility within a LayoutPanel.

LANGUAGE: Java
CODE:
LayoutPanel panel = ...;
Widget child;
panel.add(child);
panel.setWidgetVisible(child, false);

----------------------------------------

TITLE: Updating Stock Table with Formatted Data in GWT
DESCRIPTION: Updates the FlexTable with formatted price and change data for each stock.

LANGUAGE: Java
CODE:
private void updateTable(StockPrice price) {
  // Make sure the stock is still in the stock table.
  if (!stocks.contains(price.getSymbol())) {
    return;
  }

  int row = stocks.indexOf(price.getSymbol()) + 1;

  // Format the data in the Price and Change fields.
  String priceText = NumberFormat.getFormat("#,##0.00").format(
         price.getPrice());
  NumberFormat changeFormat = NumberFormat.getFormat("+#,##0.00;-#,##0.00");
  String changeText = changeFormat.format(price.getChange());
  String changePercentText = changeFormat.format(price.getChangePercent());

     // Populate the Price and Change fields with new data.
  stocksFlexTable.setText(row, 1, priceText);
  stocksFlexTable.setText(row, 2, changeText + " (" + changePercentText
     + "%)");
}

----------------------------------------

TITLE: Implementing Factorial Computation in Java
DESCRIPTION: Java method to compute the factorial of a given number using recursion.

LANGUAGE: java
CODE:
int computeFactorial(int number) {
  if (number <= 1) {
    return 1;
  }
  return number * computeFactorial(number - 1);
}

----------------------------------------

TITLE: Implementing Test Setup Method
DESCRIPTION: Example implementation of gwtSetUp() method to clean the DOM before each test execution.

LANGUAGE: java
CODE:
private static native String getNodeName(Element elem) /*-{
  return (elem.nodeName || "").toLowerCase();
}-*/;

/**
 * Removes all elements in the body, except scripts and iframes.
 */
public void gwtSetUp () {
  Element bodyElem = RootPanel.getBodyElement();

  List<Element> toRemove = new ArrayList<Element>();
  for (int i = 0, n = DOM.getChildCount(bodyElem); i < n; ++i) {
    Element elem = DOM.getChild(bodyElem, i);
    String nodeName = getNodeName(elem);
    if (!"script".equals(nodeName) && !"iframe".equals(nodeName)) {
      toRemove.add(elem);
    }
  }

  for (int i = 0, n = toRemove.size(); i < n; ++i) {
    DOM.removeChild(bodyElem, toRemove.get(i));
  }
}

----------------------------------------

TITLE: Configuring GWT Module Theme
DESCRIPTION: XML configuration showing how to specify and inherit GWT themes in the module file

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<module rename-to='stockwatcher'>
  <inherits name='com.google.gwt.user.User'/>
  <inherits name='com.google.gwt.user.theme.standard.Standard'/>
  <!-- <inherits name="com.google.gwt.user.theme.chrome.Chrome"/> -->
  <!-- <inherits name="com.google.gwt.user.theme.dark.Dark"/>     -->
  <entry-point class='com.google.gwt.sample.stockwatcher.client.StockWatcher'/>
</module>

----------------------------------------

TITLE: Implementing Global Stats Collector in HTML
DESCRIPTION: HTML implementation of the __gwtStatsEvent() collector function that logs events to a DOM element.

LANGUAGE: html
CODE:
<head>
  <title>Hello</title>

  <script language='javascript'>
    function eventToString(event) {
      // return some string representation of this event
      return event.evtGroup + " | " + event.moduleName + " | " + event.subSystem + " | " + event.type + " | " + event.millis;
    }

    window.__gwtStatsEvent = function(event) {
      var loggingDiv = document.getElementById('log');
      if (!loggingDiv) {
        // Our logging div is not yet attached to the DOM
        // Initialize a temporary buffer if needed
        this.buffer = (this.buffer) ? this.buffer : [];
        // log data here
        this.buffer.push(event);
      } else {
        if (this.buffer) {
        // We have some data that was reported before the div was connected
          for (var i = 0; i < buffer.length; i++) {
            // print it all to the div
            var bufferedEvent = buffer[i];
            var logline = document.createElement("div");
            logline.id = "logline";
            logline.innerHTML = eventToString(bufferedEvent);
            loggingDiv.appendChild(logline);
          }
          this.buffer = null;
        }
        // log the current event to the div
        var logline = document.createElement("div");
        logline.id = "logline";
        logline.innerHTML = eventToString(event);
        loggingDiv.appendChild(logline);
      }
      // The collector function should indicate success
      return true;
    }
  </script>
</head>

----------------------------------------

TITLE: Declaring UI Fields in Main Java Class
DESCRIPTION: Java field declarations for Polymer elements used in the UI, annotated with @UiField for UiBinder integration.

LANGUAGE: java
CODE:
@UiField PaperDrawerPanelElement drawerPanel;
@UiField HTMLElement content;

@UiField PaperFabElement addButton;
@UiField PaperDialogElement addItemDialog;
@UiField PaperInputElement titleInput;
@UiField PaperTextareaElement descriptionInput;
@UiField PaperButtonElement confirmAddButton;

----------------------------------------

TITLE: Animating LayoutPanel in GWT
DESCRIPTION: Java code demonstrating how to animate changes in a LayoutPanel's child widget constraints.

LANGUAGE: Java
CODE:
panel.setWidgetTopHeight(child, 0, PX, 0, PX);
panel.forceLayout();

panel.setWidgetTopHeight(child, 0, PX, 2, EM);
panel.animate(500);

----------------------------------------

TITLE: History URL Token Format Example
DESCRIPTION: Example showing how history tokens appear in the URL fragment after the hash (#) symbol.

LANGUAGE: text
CODE:
http://www.example.com/com.example.gwt.HistoryExample/HistoryExample.html#page1

----------------------------------------

TITLE: Generating HTML Coverage Report with EMMA
DESCRIPTION: Java command to generate an HTML coverage report using EMMA based on collected coverage data.

LANGUAGE: shell
CODE:
java -cp emma.jar emma report -r html -in coverage.em,coverage.ec

----------------------------------------

TITLE: Updating HTML File for GWT TodoList Project
DESCRIPTION: HTML modifications to configure viewport, import polyfill, and prepare for GWT application.

LANGUAGE: html
CODE:
<!doctype html>
<html>
<head>
 <meta name="viewport"
   content="user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1" />
 <script src="todolist/bower_components/webcomponentsjs/webcomponents.js"></script>
 <script type="text/javascript" src="todolist/todolist.nocache.js"></script>
</head>
<body>
</body>
</html>

----------------------------------------

TITLE: Setting Tab Index for Keyboard Accessibility
DESCRIPTION: Example of making a heading element keyboard focusable by setting a tabindex ARIA attribute.

LANGUAGE: java
CODE:
// Set tab index for a heading element
  Roles.getHeadingRole().setTabindexExtraAttribute(heading.getElement(), 0);

----------------------------------------

TITLE: Using RichTextArea in DockLayoutPanel with GWT UiBinder
DESCRIPTION: UiBinder XML template showing how to properly size a RichTextArea within a DockLayoutPanel.

LANGUAGE: XML
CODE:
<g:DockLayoutPanel unit='EM'>
  <g:north size='2'>
    <g:HTML>Header</g:HTML>
  </g:north>

  <g:south size='2'>
    <g:HTML>Footer</g:HTML>
  </g:south>

  <g:center>
    <g:RichTextArea width='100%' height='100%'/>
  </g:center>
</g:DockLayoutPanel>

----------------------------------------

TITLE: Updating GWT Module XML for Vaadin Elements
DESCRIPTION: XML modification to include Vaadin Polymer Elements in the GWT module file.

LANGUAGE: xml
CODE:
<module rename-to="todolist">
  ...
  <inherits name="com.vaadin.polymer.Elements"/>
  ...
</module>

----------------------------------------

TITLE: Creating a GWT Module XML Configuration
DESCRIPTION: Example XML configuration for a GWT test module showing inheritance, entry point and servlet declarations.

LANGUAGE: xml
CODE:
<module>
  <!-- Module com.example.foo.Foo -->

  <!-- Standard inherit.                                           -->
  <inherits name='com.google.gwt.user.User'/>

  <!-- implicitly includes com.example.foo.client package          -->

  <!-- OPTIONAL STUFF FOLLOWS -->

  <!-- It's okay for your module to declare an entry point.        -->
  <!-- This gets ignored when running under JUnit.                 -->
  <entry-point class='com.example.foo.FooModule'/>

  <!-- You can also test remote services during a JUnit run.       -->
  <servlet path='/foo' class='com.example.foo.server.FooServiceImpl'/>
</module>

----------------------------------------

TITLE: Hibernate Utility Class
DESCRIPTION: Java utility class for managing Hibernate SessionFactory initialization and access.

LANGUAGE: Java
CODE:
public class HibernateUtil {

  private static final SessionFactory sessionFactory;

  static {
    try {
      // Create the SessionFactory from hibernate.cfg.xml
      sessionFactory = new Configuration().configure().buildSessionFactory();
    } catch (Throwable ex) {
      // Make sure you log the exception, as it might be swallowed
      System.err.println("Initial SessionFactory creation failed." + ex);
      throw new ExceptionInInitializerError(ex);
    }
  }

  public static SessionFactory getSessionFactory() {
    return sessionFactory;
  }
}

----------------------------------------

TITLE: Data Transfer Object for Record
DESCRIPTION: Java class representing a lightweight DTO for Record entities, used for GWT RPC transfers.

LANGUAGE: Java
CODE:
package com.google.musicstore.client.dto;

import java.io.Serializable;

public class RecordDTO implements Serializable {
  private Long id;
  private String title;
  private int year;
  private double price;

  public RecordDTO() {
  }

  public RecordDTO(Long id) {
  this.id = id;
  }

  public RecordDTO(Long id, String title, int year, double price) {
    this.id = id;
    this.title = title;
    this.year = year;
    this.price = price;
  }

  // Along with corresponding getters + setters.
}

----------------------------------------

TITLE: Invalid CSS/GSS Source Mixing Example
DESCRIPTION: Java code example showing invalid mixing of CSS and GSS source files in a CssResource interface.

LANGUAGE: java
CODE:
// Invalid use since css and gss are mixed one method
@Source({"def.css", "converted.gss"})
MyCssResource css();

----------------------------------------

TITLE: Creating App Engine Web Configuration
DESCRIPTION: XML configuration for deploying a GWT application to App Engine, specifying the application ID and version

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<appengine-web-app xmlns="http://appengine.google.com/ns/1.0">
  <application><!-- Your App Engine application ID goes here --></application>
  <version>1</version>
</appengine-web-app>

----------------------------------------

TITLE: JSNI eval() Usage Example
DESCRIPTION: Demonstrates correct and incorrect ways to use eval() in JSNI methods, accounting for GWT's variable name obfuscation in production mode.

LANGUAGE: java
CODE:
public static native String myMethod(String arg) /*-{
    eval("var myVar = 'arg is ' + arg;");
    return myVar;
}-*/;

LANGUAGE: java
CODE:
public static native String myMethod(String arg) /*-{
    eval("var myVar = 'arg is " + arg + "';");
    return myVar;
}-*/;

----------------------------------------

TITLE: Deferring Logic with Scheduler in GWT
DESCRIPTION: Demonstrates the use of Scheduler.scheduleDeferred() to execute code after the current execution thread has finished and control has returned to the browser.

LANGUAGE: java
CODE:
TextBox dataEntry;

Scheduler.get().scheduleDeferred(new Command() {
  public void execute () {
    dataEntry.setFocus();
  }
});

dataEntry = new TextBox();

----------------------------------------

TITLE: Fixed Change Percentage Calculation in GWT
DESCRIPTION: Corrected version of the getChangePercent method that properly calculates the percentage change by multiplying by 100.

LANGUAGE: java
CODE:
public double getChangePercent() {
  return 100.0 * this.change / this.price;
}

----------------------------------------

TITLE: Creating i18n Files Using i18nCreator
DESCRIPTION: Command line example showing how to use the i18nCreator script to generate the necessary files for internationalization setup.

LANGUAGE: text
CODE:
$ i18nCreator -eclipse Foo com.example.foo.client.FooConstants
  Created file src/com/example/foo/client/FooConstants.properties
  Created file FooConstants-i18n.launch
  Created file FooConstants-i18n

----------------------------------------

TITLE: JSNI Method Closures in Event Handlers
DESCRIPTION: Shows proper handling of this context in JSNI methods used as event handlers using function closures.

LANGUAGE: java
CODE:
public native void doSomething() /*-{
    var foo = this;
    this.@com.company.app.client.MyClass::doSomethingElse(Ljava/lang/String;)("immediate");
    someObj.onclick = function() {
        foo.@com.company.app.client.MyClass::doSomethingElse(Ljava/lang/String;)("on click");
    }
}-*/;

----------------------------------------

TITLE: Introducing a Bug in StockPrice Class in Java
DESCRIPTION: Example of intentionally introducing a bug in the getChangePercent method of the StockPrice class to demonstrate test failure.

LANGUAGE: Java
CODE:
public double getChangePercent() {
  return 10.0 * this.change / this.price;
}

----------------------------------------

TITLE: Main Application Logic Implementation
DESCRIPTION: Java implementation of the main application class handling UI events, item management and dialog interactions.

LANGUAGE: java
CODE:
package org.gwtproject.tutorial.client;

import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiHandler;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.HTMLPanel;
import com.vaadin.polymer.paper.widget.PaperDialog;
import com.vaadin.polymer.paper.widget.PaperDrawerPanel;
import com.vaadin.polymer.paper.widget.PaperInput;
import com.vaadin.polymer.paper.widget.PaperTextarea;

public class Main extends Composite {
  interface MainUiBinder extends UiBinder<HTMLPanel, Main> {
  }

  private static MainUiBinder ourUiBinder = GWT.create(MainUiBinder.class);

  @UiField PaperDrawerPanel drawerPanel;
  @UiField HTMLPanel content;

  @UiField PaperDialog addItemDialog;
  @UiField PaperInput titleInput;
  @UiField PaperTextarea descriptionInput;

  public Main() {
    initWidget(ourUiBinder.createAndBindUi(this));
  }

  @UiHandler("addButton")
  protected void onAddButtonClick(ClickEvent e) {
    addItemDialog.open();
  }

  @UiHandler("confirmAddButton")
  protected void onConfirmAddButtonClick(ClickEvent e) {
    if (!titleInput.getValue().isEmpty()) {
      addItem(titleInput.getValue(), descriptionInput.getValue());
      // clear text fields
      titleInput.setValue("");
      descriptionInput.setValue("");
    }
  }

  private void addItem(String title, String description) {
    Item item = new Item();
    item.setTitle(title);
    item.setDescription(description);
    content.add(item);
  }

  @UiHandler("menuClearAll")
  protected void menuClearAll(ClickEvent e) {
    closeMenu();
    content.clear();
  }

  private void closeMenu() {
    if (drawerPanel.getNarrow()) {
        drawerPanel.closeDrawer();
    }
  }

  @UiHandler("menuClearDone")
  protected void menuClearDone(ClickEvent e) {
    closeMenu();
    for (int i = content.getWidgetCount() - 1; i > -1; i--) {
        Item item = (Item)content.getWidget(i);
        if (item.isDone()) {
            content.remove(item);
        }
    }
  }
}

----------------------------------------

TITLE: Implementing Browser-Specific Logic with JSNI in GWT
DESCRIPTION: Example of a JSNI method implementing browser-specific logic for Internet Explorer 6 in a PopupImpl subclass.

LANGUAGE: Java
CODE:
public native void setVisible(Element popup, boolean visible) /*-{
    if (popup.__frame) {
      popup.__frame.style.visibility = visible ? 'visible' : 'hidden';
    }
  }-*/;

----------------------------------------

TITLE: Implementing MeetingViewWidget for GWT Application
DESCRIPTION: Shows the implementation of the MeetingViewWidget class, which creates the UI components and sets up event listeners in the GWT application example.

LANGUAGE: Java
CODE:
public class MeetingViewWidget extends Composite implements MeetingView {
  private Button saveButton = new Button("Save");
  private TextBox capacityText = new TextBox();

  public MeetingViewWidget() {
    VerticalPanel mainPanel = new VerticalPanel();

    HorizontalPanel row = new HorizontalPanel();
    row.add(new Label("Capacity:"));
    row.add(capacityText);

    mainPanel.add(row);
    mainPanel.add(saveButton);

    // Start with the save button disabled
    saveButton.setEnabled(false);

    // Here the view is responsible for creating the model and presenter
    final Presenter presenter = new Presenter(new Meeting(), this, new RemoteRoomScheduler());
    capacityText.addChangeListener(new ChangeListener() {
      public void onChange(Widget sender) {
        presenter.requiredCapacityChanged((HasText) sender);
      }
    });

    initWidget(mainPanel);
  }

  public void disableSaveButton() {
    saveButton.setEnabled(false);
  }
}

----------------------------------------

TITLE: Exporting Java Methods to JavaScript using JSNI
DESCRIPTION: Example showing how to expose a Java method to external JavaScript code using JSNI. Includes use of $entry wrapper for exception handling.

LANGUAGE: java
CODE:
package mypackage;
public MyUtilityClass
{
    public static int computeLoanInterest(int amt, float interestRate, int term) { ... }
    public static native void exportStaticMethod() /*-{
       $wnd.computeLoanInterest = 
         $entry(@mypackage.MyUtilityClass::computeLoanInterest(IFI));
    }-*/;
}

----------------------------------------

TITLE: Using StorageMap for Key-Value Operations in GWT
DESCRIPTION: Demonstrates using StorageMap to check for existing values before storing new data.

LANGUAGE: java
CODE:
stockStore = Storage.getLocalStorageIfSupported();
if (stockStore != null) {
  stockMap = new StorageMap(stockStore);
  if (stockMap.containsValue(symbol)!= true){
    int numStocks = stockStore.getLength();
    stockStore.setItem("Stock."+numStocks, symbol);
}

----------------------------------------

TITLE: Implementing Timeout Logic for RPC in GWT
DESCRIPTION: Shows how to create timeout logic for a Remote Procedure Call (RPC) using Timer. It includes checks to prevent multiple timers, cancellation of the timer on successful completion, and handling of timeout expiration.

LANGUAGE: java
CODE:
import com.google.gwt.user.client.Timer;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;

public class Foo {

  private Timer timeoutTimer = null;
  private boolean abortFlag = false;
  static final int TIMEOUT = 30; // 30 second timeout

  void startWork () {
    if (timeoutTimer != null) {
        Window.alert("Command is already running!");
        return;
    }

    timeoutTimer = new Timer() {
      public void run() {
        Window.alert("Timeout expired.");
        timeoutTimer = null;
        abortFlag = true;
      }
    };

    abortFlag = false;
    timeoutTimer.schedule(TIMEOUT * 1000);

    myService.myRpcMethod(arg, new AsyncCallback() {
      public void onFailure(Throwable caught) {
         Window.alert("RPC Failed:" + caught);
         cancelTimer();
      }

      public void onSuccess(Object result) {
         cancelTimer();
         if (abortFlag) {
           return;
         }
         Window.alert ("RPC returned: "+ (String)result);
      }
    }
  }

  private void cancelTimer() {
    if (timeoutTimer != null) {
       timeoutTimer.cancel();
       timeoutTimer = null;
    }
  }
}

----------------------------------------

TITLE: Instrumenting Class Files with EMMA
DESCRIPTION: Java command to instrument class files using EMMA for code coverage analysis.

LANGUAGE: shell
CODE:
java -cp emma.jar emma instr -m overwrite -cp war/WEB-INF/classes/com/example/myapp/client

----------------------------------------

TITLE: X11 Virtual Framebuffer Setup
DESCRIPTION: Shell commands to configure virtual X11 display for headless environments.

LANGUAGE: shell
CODE:
export DISPLAY=:2
ps -ef | grep Xvfb | grep -v grep >> /dev/null || Xvfb :2 -ac &

----------------------------------------

TITLE: Implementing Prefetching in GWT Code Splitting
DESCRIPTION: Shows how to implement prefetching in GWT code splitting. This technique allows for preloading code fragments before they are actually needed.

LANGUAGE: java
CODE:
public void showContact(final String contactId) {
  GWT.runAsync(new RunAsyncCallback() {
      public void onFailure(Throwable caught) {
        cb.onFailure(caught);
      }

      public void onSuccess() {
        if (contactId == null) {
          // do nothing: just a prefetch
          return;
        }

        // Show contact contactId...
      }
  });
}

----------------------------------------

TITLE: Creating Add Item Dialog with Polymer Elements in XML
DESCRIPTION: UiBinder XML markup for creating a modal dialog to add new todo items using Polymer paper elements.

LANGUAGE: xml
CODE:
<g:HTMLPanel>
  <paper-dialog ui:field="addItemDialog"
                entry-animation="fade-in-animation"
                class="dialog" modal="">
    <h2>Add Item</h2>
    <paper-input ui:field="titleInput" label="Title" required=""
                 auto-validate="" error-message="required input!"/>
    <div class="textarea-container iron-autogrow-textarea">
        <paper-textarea ui:field="descriptionInput" label="Notes"/>
    </div>
    <div class="buttons">
        <paper-button dialog-dismiss="">Cancel</paper-button>
        <paper-button ui:field="confirmAddButton"
                      dialog-confirm="">OK</paper-button>
    </div>
  </paper-dialog>
</g:HTMLPanel>

----------------------------------------

TITLE: Example JSON Serialization
DESCRIPTION: Sample JSON output format for serialized AutoBean objects including person and address data

LANGUAGE: json
CODE:
{ "name" : "John Doe", "address" : { "street" : "1234 Maple St", "city" : "Nowhere" } }

----------------------------------------

TITLE: Implementing FakeTextContainer for Testing
DESCRIPTION: Demonstrates a simple implementation of the HasText interface used for testing purposes in the GWT application example.

LANGUAGE: Java
CODE:
public class FakeTextContainer implements HasText {
  private String text;

  public FakeTextContainer(String text) {
    this.text = text;
  }

  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }
}

----------------------------------------

TITLE: Adding Gears Package Import
DESCRIPTION: XML configuration to add Gears package support to GWT module.

LANGUAGE: xml
CODE:
<inherits name='com.google.gwt.gears.Gears'>

----------------------------------------

TITLE: Creating Custom Cell Tree Model in GWT
DESCRIPTION: Shows implementation of a custom TreeViewModel for hierarchical data display in a CellTree

LANGUAGE: Java
CODE:
public class CellTreeExample implements EntryPoint {
  private static class CustomTreeModel implements TreeViewModel {
    public <T> NodeInfo<?> getNodeInfo(T value) {
      ListDataProvider<String> dataProvider = new ListDataProvider<String>();
      for (int i = 0; i < 2; i++) {
        dataProvider.getList().add(value + "." + String.valueOf(i));
      }
      return new DefaultNodeInfo<String>(dataProvider, new TextCell());
    }

    public boolean isLeaf(Object value) {
      return value.toString().length() > 10;
    }
  }

  public void onModuleLoad() {
    TreeViewModel model = new CustomTreeModel();
    CellTree tree = new CellTree(model, "Item 1");
    RootLayoutPanel.get().add(tree);
  }
}

----------------------------------------

TITLE: Basic Widget Styling with CSS in GWT
DESCRIPTION: Example of basic CSS styling for GWT Button widgets using the default gwt-Button class name.

LANGUAGE: css
CODE:
.gwt-Button { font-size: 150%; }

----------------------------------------

TITLE: Starting GWT CodeServer for Development
DESCRIPTION: Command to start the GWT CodeServer for development mode, allowing for real-time code updates without recompilation.

LANGUAGE: shell
CODE:
mvn gwt:codeserver -pl *-client -am

----------------------------------------

TITLE: GWT Compiler Generated Files
DESCRIPTION: List of files generated by the GWT compiler in the output directory, showing different JavaScript permutations for browser compatibility.

LANGUAGE: text
CODE:
1FCB598BF80A779999FF8774CEE9E224.cache.js
3880B6B217AFC67D6029EEBC02BDA651.cache.js
91F9F6B3066965A37C6ABEB2C3F0DE8C.cache.js
clear.cache.gif
compilation-mappings.txt
F22DFAA06F25138FB07D27BA32BBE3F1.cache.js
F90AE9A800297A50E40A5072EB33B368.cache.js
gwt
stockwatcher.devmode.js
stockwatcher.nocache.js

----------------------------------------

TITLE: Creating Related Entities in a Single Request
DESCRIPTION: Example of creating and persisting related entities (Person and Address) in a single RequestFactory request.

LANGUAGE: java
CODE:
PersonRequest context = requestFactory.personRequest();
AddressProxy address = context.create(AddressProxy.class);
PersonProxy person = context.create(PersonProxy.class);
person.setAddress(address);
context.persist().using(person).fire(...);

----------------------------------------

TITLE: Combined GWT Compiler Target
DESCRIPTION: Updated Ant target combining compilation with resource copying

LANGUAGE: xml
CODE:
<target name="gwtc" depends="javac,copyresources" description="GWT compile to JavaScript">

----------------------------------------

TITLE: Setting Widget ID in GWT
DESCRIPTION: Example showing how to set a unique ID for a GWT Button widget using DOM manipulation.

LANGUAGE: java
CODE:
Button b = new Button();
  DOM.setElementAttribute(b.getElement(), "id", "my-button-id")

----------------------------------------

TITLE: Generating GWT Class Files with Ant
DESCRIPTION: Ant command to generate class files for the GWT project in development mode.

LANGUAGE: shell
CODE:
ant devmode

----------------------------------------

TITLE: Data Transfer Object for Account
DESCRIPTION: Java class representing a lightweight DTO for Account entities, used for GWT RPC transfers.

LANGUAGE: Java
CODE:
package com.google.musicstore.client.dto;

import java.io.Serializable;
import java.util.Set;

public class AccountDTO implements Serializable {
  private Long id;
  private String name;
  private String password;
  private Set<RecordDTO> records;

  public AccountDTO() {
  }

  public AccountDTO(Long id) {
    this.id = id;
  }

  public AccountDTO(Long id, String name, String password,
      Set<RecordDTO> records) {
    this.id = id;
    this.name = name;
    this.password = password;
    this.records = records;
  }

  // Along with corresponding getters + setters.
}

----------------------------------------

TITLE: Gilead-enabled GWT RPC Service Implementation
DESCRIPTION: Java class implementing the MusicStoreService interface, modified to use Gilead for GWT-Hibernate integration.

LANGUAGE: Java
CODE:
import net.sf.gilead.core.PersistentBeanManager;
import net.sf.gilead.core.hibernate.HibernateUtil;
import net.sf.gilead.core.store.stateless.StatelessProxyStore;
import net.sf.gilead.gwt.PersistentRemoteService;

public class MusicStoreServiceImpl extends PersistentRemoteService implements MusicStoreService {

  /**
   * Constructor
   */
  public MusicStoreServiceImpl() {
    HibernateUtil gileadHibernateUtil = new HibernateUtil();
    gileadHibernateUtil.setSessionFactory(com.google.musicstore.util.HibernateUtil.getSessionFactory());

    PersistentBeanManager persistentBeanManager = new PersistentBeanManager();
    persistentBeanManager.setPersistenceUtil(gileadHibernateUtil);
    persistentBeanManager.setProxyStore(new StatelessProxyStore());

    setBeanManager(persistentBeanManager);
  }
}

----------------------------------------

TITLE: Configuring GWT Module Script Tag
DESCRIPTION: Example showing how to reference the GWT module JavaScript file in the HTML host page

LANGUAGE: html
CODE:
<script language="JavaScript" src="/gwt-files/MyApp.nocache.js"></script>

----------------------------------------

TITLE: Configuring Welcome File in web.xml for GWT Application
DESCRIPTION: Shows how to configure the web.xml file to use a JSP page as the welcome file for a GWT application.

LANGUAGE: xml
CODE:
<welcome-file-list>
  <welcome-file>gwt-hosting.jsp</welcome-file>
</welcome-file-list>

----------------------------------------

TITLE: CSS Link Tag Implementation
DESCRIPTION: HTML example showing how to include a CSS file in GWT host page.

LANGUAGE: html
CODE:
<link rel="stylesheet" href="mystyles.css" type="text/css"/>

----------------------------------------

TITLE: Custom Number Pattern Formatting in GWT
DESCRIPTION: Demonstrates using a custom pattern to format numbers with specific precision and padding requirements.

LANGUAGE: java
CODE:
double value = 12345.6789;
String formatted = NumberFormat.getFormat("000000.000000").format(value);
// prints 012345.678900 in the default locale
GWT.log("Formatted string is" + formatted, null);

----------------------------------------

TITLE: Building GWT Production Mode
DESCRIPTION: Command to compile the GWT application into JavaScript for production deployment

LANGUAGE: shell
CODE:
ant build

----------------------------------------

TITLE: Implementing GWT Entry Point with Polymer
DESCRIPTION: Entry point class that initializes the Polymer elements and starts the application.

LANGUAGE: java
CODE:
package org.gwtproject.tutorial.client;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.user.client.ui.RootPanel;
import com.vaadin.polymer.Polymer;
import com.vaadin.polymer.elemental.Function;
import com.vaadin.polymer.iron.element.IronIconElement;
import com.vaadin.polymer.paper.element.*;

import java.util.Arrays;

public class TodoList implements EntryPoint {

    public void onModuleLoad() {
        Polymer.importHref(Arrays.asList(
                "iron-icons/iron-icons.html",
                PaperIconItemElement.SRC,
                PaperRippleElement.SRC,
                IronIconElement.SRC,
                PaperDrawerPanelElement.SRC,
                PaperHeaderPanelElement.SRC,
                PaperToolbarElement.SRC,
                PaperFabElement.SRC
        ), new Function() {
            public Object call(Object arg) {
                startApplication();
                return null;
            }
        });
    }

    private void startApplication() {
        RootPanel.get().add(new Main());
    }
}

----------------------------------------

TITLE: Configuring Jetty Server in IntelliJ Maven Run Configuration
DESCRIPTION: Maven command configuration for running the Jetty server in development mode. The command targets the server module and sets the environment to development.

LANGUAGE: maven
CODE:
mvn jetty:run -pl *-server -am -Denv=dev

----------------------------------------

TITLE: Hibernate Mapping for Record Entity
DESCRIPTION: XML configuration for mapping the Record Java class to a database table using Hibernate.

LANGUAGE: XML
CODE:
<hibernate-mapping>
  <class name="com.google.musicstore.domain.Record" table="RECORD">
    <id name="id" column="RECORD_ID">
      <generator class="native"/>
    </id>
    <property name="title"/>
    <property name="year"/>
    <property name="price"/>

  </class>
</hibernate-mapping>

----------------------------------------

TITLE: GWT Servlet Configuration
DESCRIPTION: XML configuration for registering a GWT RPC service servlet.

LANGUAGE: xml
CODE:
<!-- Example servlet loaded into development mode web server       -->
<servlet path="/myService" class="com.example.server.MyServiceImpl" />

----------------------------------------

TITLE: UiBinder Style Resource Integration
DESCRIPTION: Example showing CSS style integration and usage in UiBinder templates

LANGUAGE: XML
CODE:
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'>

  <ui:style>
    .pretty { background-color: Skyblue; }
  </ui:style>

  <div class='{style.pretty}'>
    Hello, <span ui:field='nameSpan'/>.
  </div>

</ui:UiBinder>

----------------------------------------

TITLE: Exporting Java Methods for External JavaScript Use
DESCRIPTION: Example of how to make a Java method accessible from external JavaScript code by assigning it to a global JavaScript variable using JSNI. It also demonstrates the use of $entry for exception handling.

LANGUAGE: Java
CODE:
public static native void exportStaticMethod() /*-{
  $wnd.computeLoanInterest =
      $entry(@mypackage.MyUtilityClass::computeLoanInterest(IFI));
}-*/;

----------------------------------------

TITLE: Sample JSON Structure for Google Base Snippets Feed
DESCRIPTION: A simplified example of the JSON structure returned by the Google Base snippets feed, showing the basic layout of the data.

LANGUAGE: javascript
CODE:
{
  'feed': {
    'entry': [
      {'title': {'type': 'text', '$t': 'Some Text'}},
      {'title': {'type': 'text', '$t': 'Some More Text'}}
    ]
  }
}

----------------------------------------

TITLE: GWT Implementation for Handling JSONP Requests
DESCRIPTION: A GWT class that demonstrates handling JSONP requests, including dynamic script tag insertion and callback management.

LANGUAGE: java
CODE:
public class Hax0r implements EntryPoint {
  protected HashMap scriptTags = new HashMap();
  protected HashMap callbacks = new HashMap();
  protected int curIndex = 0;

  public native static void setup(Hax0r h, String callback) /*-{
    $wnd[callback] = function(someData) {
      h.@com.google.gwt.hax0r.client.Hax0r::handle(Lcom/google/gwt/core/client/JavaScriptObject;)(someData);
    }
  }-*/;

  public String reserveCallback() {
    while (true) {
      if (!callbacks.containsKey(new Integer(curIndex))) {
        callbacks.put(new Integer(curIndex), null);
        return "__gwt_callback" + curIndex++;
      }
    }
  }

  public void addScript(String uniqueId, String url) {
    Element e = DOM.createElement("script");
    DOM.setAttribute(e, "language", "JavaScript");
    DOM.setAttribute(e, "src", url);
    scriptTags.put(uniqueId, e);
    DOM.appendChild(RootPanel.get().getElement(), e);
  }

  public void onModuleLoad() {
    String gdata = "http://www.google.com/base/feeds/snippets?alt=json-in-script&callback=";
    String callbackName = reserveCallback();
    setup(this, callbackName);
    addScript(callbackName, gdata + callbackName);
  }

  public void handle(JavaScriptObject jso) {
    JSONObject json = new JSONObject(jso);
    JSONArray ary = json.get("feed").isObject().get("entry").isArray();
    for (int i = 0; i < ary.size(); ++i) {
      RootPanel.get().add(new Label(ary.get(i).isObject().get("title").isObject().get("$t").toString()));
    }
  }
}

----------------------------------------

TITLE: Running GWT Development Mode
DESCRIPTION: Commands to start the GWT development mode server for local testing and debugging

LANGUAGE: shell
CODE:
cd MyWebApp/

ant devmode

----------------------------------------

TITLE: Configuring GWT Module for Validation in XML
DESCRIPTION: XML configuration snippet for a GWT module to enable validation. It inherits the HibernateValidator and specifies a custom ValidatorFactory implementation.

LANGUAGE: xml
CODE:
<inherits name="org.hibernate.validator.HibernateValidator" />
<replace-with
  class="com.google.gwt.sample.validation.client.SampleValidatorFactory">
  <when-type-is class="javax.validation.ValidatorFactory" />
</replace-with>

----------------------------------------

TITLE: Example JSON Structure for Product Data
DESCRIPTION: Demonstrates a sample JSON object structure representing product information, including nested objects and arrays.

LANGUAGE: json
CODE:
{
  "product": {
    "name": "Widget",
    "company": "ACME, Inc",
    "partNumber": "7402-129",
    "prices": [
      { "minQty": 1, "price": 12.49 },
      { "minQty": 10, "price": 9.99 },
      { "minQty": 50, "price": 7.99 }
    ]
  }
}

----------------------------------------

TITLE: Defining PlaceHistoryMapper Interface in Java
DESCRIPTION: Illustrates how to create a PlaceHistoryMapper interface to declare available Places in the application.

LANGUAGE: java
CODE:
@WithTokenizers({HelloPlace.Tokenizer.class, GoodbyePlace.Tokenizer.class})
public interface AppPlaceHistoryMapper extends PlaceHistoryMapper
{
}

----------------------------------------

TITLE: Creating Initial JUnit Test Method
DESCRIPTION: Empty JUnit test method as a placeholder for factorial testing.

LANGUAGE: java
CODE:
public void testFactorial() {
}

----------------------------------------

TITLE: Layout Debugging with Border Styling in GWT
DESCRIPTION: Enhanced version of layout debugging that adds border styling to panels for visual debugging. Includes both Java code for border setup and CSS styling.

LANGUAGE: java
CODE:
VerticalPanel vertPanel = new VerticalPanel();

    DockPanel dockPanel = new DockPanel();
    dockPanel.setWidth("100%");
    dockPanel.add(new Button("leftButton"), DockPanel.WEST);
    dockPanel.add(new Button("rightButton"), DockPanel.EAST);
    dockPanel.setStylePrimaryName("dockPanel");
    dockPanel.setBorderWidth(5);

    vertPanel.add(dockPanel);
    vertPanel.setStylePrimaryName("vertPanel");
    vertPanel.setBorderWidth(5);

    RootPanel.get().add(vertPanel);

LANGUAGE: css
CODE:
.dockPanel {
    border-color: orange;
}
.vertPanel {
    border-color: blue;
}

----------------------------------------

TITLE: Simplifying web.xml for GWT TodoList Project
DESCRIPTION: Removing unnecessary servlet mappings from the web.xml file.

LANGUAGE: xml
CODE:
<web-app>
</web-app>

----------------------------------------

TITLE: Registering Event Handlers in AppController
DESCRIPTION: Example of registering an event handler for EditContactEvent in the AppController.

LANGUAGE: java
CODE:
public class AppController implements ValueChangeHandler {
  ...
  eventBus.addHandler(EditContactEvent.TYPE,
      new EditContactEventHandler() {
        public void onEditContact(EditContactEvent event) {
          doEditContact(event.getId());
        }
      });
  ...
}

----------------------------------------

TITLE: Implementing GWT Entry Point with Icon Loading
DESCRIPTION: Entry point class that handles Polymer icon imports and application initialization

LANGUAGE: java
CODE:
package org.gwtproject.tutorial;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.user.client.ui.RootPanel;
import com.vaadin.polymer.Polymer;
import com.vaadin.polymer.elemental.Function;

public class TodoList implements EntryPoint {

  public void onModuleLoad() {
    // We have to load icon sets before run application
    Polymer.importHref("iron-icons/iron-icons.html", new Function() {
        public Object call(Object arg) {
            // The app is executed when all imports succeed.
            startApplication();
            return null;
        }
    });
  }

  private void startApplication() {
    RootPanel.get().add(new Main());
  }
}

----------------------------------------

TITLE: Configuring GWT Code Server in IntelliJ Maven Run Configuration
DESCRIPTION: Maven command configuration for running the GWT code server in development mode. The command specifies the client module and enables auto-rebuild of modified sources.

LANGUAGE: maven
CODE:
gwt:codeserver -pl mywebapp-client -am

----------------------------------------

TITLE: Configuring UiBinder for Internationalization
DESCRIPTION: This snippet shows how to configure UiBinder for internationalization by adding attributes to the root <ui:UiBinder> element and tagging text for translation using <ui:msg>.

LANGUAGE: XML
CODE:
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
    ui:generateFormat='com.google.gwt.i18n.server.PropertyCatalogFactory'
    ui:generateKeys="com.google.gwt.i18n.server.keygen.MD5KeyGenerator"
    ui:generateLocales="default">
  <div><ui:msg description="Greeting">Hello, world.</ui:msg></div>
</ui:UiBinder>

----------------------------------------

TITLE: Styling GWT User Showcase Page in CSS
DESCRIPTION: This CSS snippet defines styles for the GWT user showcase page, including layout for video interviews and application descriptions. It sets maximum widths, padding, and formatting for various page elements.

LANGUAGE: CSS
CODE:
#body {
  max-width: 700px;
}
.video {
  clear: both;
  width: 100%;
  overflow: visible;
  padding: 5px;
}

.video .screenshot {
  padding-left: 15px;
  padding-top: 20px;
  padding-bottom: 20px;
  vertical-align: middle;
}

.video .description {
  padding-top: 5px;
  padding-bottom: 5px;
  vertical-align: middle;
}

.video .description .title {
  font-weight: bold;
}

.application {
  clear: both;
  width: 100%;
  overflow: visible;
  padding: 5px;
}

.application .screenshot {
  padding-left: 15px;
  padding-top: 20px;
  padding-bottom: 20px;
}

.application .description {
  vertical-align: middle;
}

.application .description .title {
  font-weight: bold;
}

----------------------------------------

TITLE: Select Forms with Gender Enum Example
DESCRIPTION: Demonstrates implementation of select forms using enums to choose different message variants based on gender.

LANGUAGE: java
CODE:
public enum Gender {
  MALE,
  FEMALE,
  UNKNOWN
}

public interface MyMessages extends Messages {
  @DefaultMessage("{0} gave you their credits.")
  @AlternateMessage({
      "MALE", "{0} gave you his credits.",
      "FEMALE", "{0} gave you her credits."
  })
  String gaveCredits(String name, @Select Gender gender);
}

----------------------------------------

TITLE: Adding Vaadin Polymer Elements Dependency to Maven POM
DESCRIPTION: XML snippet to add the Vaadin GWT Polymer Elements dependency to the project's pom.xml file.

LANGUAGE: xml
CODE:
<dependency>
 <groupId>com.vaadin.polymer</groupId>
 <artifactId>vaadin-gwt-polymer-elements</artifactId>
 <version>${gwtPolymerVersion}</version>
 <scope>provided</scope>
</dependency>

----------------------------------------

TITLE: Python HTTP Server for Serving Custom JSON Data
DESCRIPTION: A simple Python HTTP server that serves custom JSON data, wrapping it in a callback function for JSONP-style requests.

LANGUAGE: python
CODE:
import BaseHTTPServer, SimpleHTTPServer, cgi
class MyHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
  def do_GET(self):
    form = self.path.find('?') > -1 and dict([x.split('=') for x in self.path.split('?')[1].split('&')]) or {'callback': 'foo'}
    fun_name = form.get('callback', 'foo')
    body = '%s(%s);' % (fun_name, file('json.js').read())
    self.send_response(200)
    self.send_header('Content-Type', 'text/plain')
    self.send_header('Content-Length', len(body))
    self.end_headers()
    self.wfile.write(body)
bhs = BaseHTTPServer.HTTPServer(('', 8000), MyHandler)
bhs.serve_forever()

----------------------------------------

TITLE: Eclipse VM Arguments Configuration
DESCRIPTION: Example of configuring VM arguments in Eclipse for Selenium testing

LANGUAGE: text
CODE:
-Dgwt.args="-runStyle Selenium:myhost:4444/*firefox"

----------------------------------------

TITLE: Inheriting XML Module in GWT
DESCRIPTION: Add this <inherits> tag to your GWT module XML file to use XML processing classes.

LANGUAGE: xml
CODE:
<inherits name="com.google.gwt.xml.XML" />

----------------------------------------

TITLE: Configuring HtmlUnit Browser Emulation in GWT
DESCRIPTION: Command line argument to configure HtmlUnit to run tests in both Firefox 38 and IE11 emulation modes. This is set through the gwt.args system property.

LANGUAGE: plaintext
CODE:
-runStyle HtmlUnit:FF38,IE11

----------------------------------------

TITLE: Running GWT TodoList Project in SuperDevMode
DESCRIPTION: Commands to build and run the GWT TodoList project in SuperDevMode using Maven.

LANGUAGE: shell
CODE:
$ cd TodoListApp
$ mvn war:exploded
$ mvn gwt:devmode

----------------------------------------

TITLE: Implementing ClickHandler with Anonymous Inner Class in GWT
DESCRIPTION: This snippet demonstrates how to add a custom ClickHandler to a Button instance using an anonymous inner class. This approach is simple but can be memory-intensive for a large number of widgets.

LANGUAGE: java
CODE:
public void anonClickHandlerExample() {
  Button b = new Button("Click Me");
  b.addClickHandler(new ClickHandler() {
    public void onClick(ClickEvent event) {
      // handle the click event
    }
  });
}

----------------------------------------

TITLE: Protecting Parts of Messages from Translation
DESCRIPTION: This snippet shows how to use ui:ph attributes and elements to protect certain parts of a message from being translated, such as CSS classes or trademark symbols.

LANGUAGE: XML
CODE:
<div>
  <ui:msg description="blurb"><span class="brand" ui:ph="brandedSpan">Colgate</span>,
  with MFP!<ui:ph name="trademark"><span class="tm">TM</span></ui:ph></ui:msg>
</div>

----------------------------------------

TITLE: GWT Compiler Output Example
DESCRIPTION: Example console output showing the GWT compiler processing multiple browser permutations during compilation.

LANGUAGE: text
CODE:
Compiling module com.google.gwt.sample.stockwatcher.StockWatcher
   Compiling 6 permutations
      Compiling permutation 0...
      Compiling permutation 1...
      Compiling permutation 2...
      Compiling permutation 3...
      Compiling permutation 4...
      Compiling permutation 5...
   Compile of permutations succeeded
Linking into war/stockwatcher.
   Link succeeded
   Compilation succeeded -- 30.504s

----------------------------------------

TITLE: Adding Remove Button for Stocks in GWT FlexTable
DESCRIPTION: Adds a button to remove a stock from the table and ArrayList when clicked.

LANGUAGE: Java
CODE:
// Add a button to remove this stock from the table.
Button removeStockButton = new Button("x");
removeStockButton.addClickHandler(new ClickHandler() {
  public void onClick(ClickEvent event) {
    int removedIndex = stocks.indexOf(symbol);
    stocks.remove(removedIndex);
    stocksFlexTable.removeRow(removedIndex + 1);
  }
});
stocksFlexTable.setWidget(row, 3, removeStockButton);

----------------------------------------

TITLE: BrowserManagerServer Launch Command
DESCRIPTION: Command to start the BrowserManagerServer for remote testing

LANGUAGE: shell
CODE:
java -cp gwt-user.jar;gwt-dev.jar com.google.gwt.junit.remote.BrowserManagerServer ie8 "C:\Program Files\Internet Explorer\IEXPLORE.EXE"

----------------------------------------

TITLE: Implementing Fixed-Width Columns in GWT CellTable
DESCRIPTION: Shows how to implement fixed-width columns that expand to fill available space. Demonstrates setting table width to 100% and controlling individual column widths using percentages.

LANGUAGE: java
CODE:
/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class Tester implements EntryPoint {
  // A simple data type that represents a contact.
  private static class Contact {
    private final String address;
    private final String name;

    public Contact(String name, String address) {
      this.name = name;
      this.address = address;
    }
  }

  // The list of data to display.
  private static List<Contact> CONTACTS = Arrays.asList(new Contact("John",
      "123 Fourth Road"), new Contact("Mary", "222 Lancer Lane"));

  public void onModuleLoad() {

    // Create a CellTable.
    CellTable<Contact> table = new CellTable<Contact>();

    // Create name column.
    TextColumn<Contact> nameColumn = new TextColumn<Contact>() {
      @Override
      public String getValue(Contact contact) {
        return contact.name;
      }
    };

    // Create address column.
    TextColumn<Contact> addressColumn = new TextColumn<Contact>() {
      @Override
      public String getValue(Contact contact) {
        return contact.address;
      }
    };

    // Add the columns.
    table.addColumn(nameColumn, "Name");
    table.addColumn(addressColumn, "Address");

    // Set the width of the table and put the table in fixed width mode.
    table.setWidth("100%", true);

    // Set the width of each column.
    table.setColumnWidth(nameColumn, 35.0, Unit.PCT);
    table.setColumnWidth(addressColumn, 65.0, Unit.PCT);

    // Set the total row count. This isn't strictly necessary, but it affects
    // paging calculations, so its good habit to keep the row count up to date.
    table.setRowCount(CONTACTS.size(), true);

    // Push the data into the widget.
    table.setRowData(0, CONTACTS);

    // Add it to the root panel.
    RootPanel.get().add(table);
  }
}

----------------------------------------

TITLE: Creating Main UiBinder Component in Java
DESCRIPTION: Defines the main composite widget class using GWT UiBinder that serves as the application's main screen.

LANGUAGE: java
CODE:
package org.gwtproject.tutorial.client;

import com.google.gwt.core.client.GWT;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.HTMLPanel;

public class Main extends Composite {
  interface MainUiBinder extends UiBinder<HTMLPanel, Main> {
  }

  private static MainUiBinder ourUiBinder = GWT.create(MainUiBinder.class);

  public Main() {
    initWidget(ourUiBinder.createAndBindUi(this));
  }
}

----------------------------------------

TITLE: HTML Structure for GWT Download Sections
DESCRIPTION: HTML markup organizing download sections for GWT SDK and Eclipse Plugin, including descriptions, download buttons, and navigation links

LANGUAGE: html
CODE:
<div class='download-block'>
  <h3 style="margin-top: 0em;">GWT SDK</h3>
  <p>
    The GWT SDK contains the core libraries and compiler that you need to write web applications. See the <a href="release-notes.html#Release_Notes_Current">Release Notes for this latest version</a>.
  </p>
  <p style="font-size: 90%;">
    <b style="color: #444;">Note</b> - This download contains the standalone GWT SDK and tools only. If you're using Eclipse, we suggest that you download and install the GWT Eclipse Plugin instead.
  </p>
  <div class='moreinfo'>
    <a class='download-button' href="https://github.com/gwtproject/gwt/releases/download/2.12.2/gwt-2.12.2.zip">Download GWT SDK</a> <br />
    <p style='font-size: 85%;'>
      <a href="versions.html">[Old versions]</a>
    </p>
    <p style='font-size: 90%;'>
      Next: Go to <a href="gettingstarted-v2.html">Getting Started with the GWT SDK</a>
    </p>
  </div>
</div>

----------------------------------------

TITLE: Implementing Asynchronous RPC Callback in GWT Java
DESCRIPTION: Example of implementing an asynchronous RPC callback inline

LANGUAGE: java
CODE:
// This code is called before the RPC starts
 //
  if (startRow == lastStartRow) {
    ...
  }

  // Invoke the RPC call, implementing the callback methods inline:
  //
  calService.getPeople(startRow, maxRows, new AsyncCallback<Person[]>() {

    // When the RPC returns, this code will be called if the RPC fails
    public void onFailure(Throwable caught) {
       statusLabel.setText("Query failed: " + caught.getMessage());
       acceptor.failed(caught);
    }

    // When the RPC returns, this code is called if the RPC succeeds
    public void onSuccess(Person[] result) {
      lastStartRow = startRow;
      lastMaxRows = maxRows;
      lastPeople = result;
      pushResults(acceptor, startRow, result);
      statusLabel.setText("Query reutrned " + result.length + " rows.");
    }
  });

  // The above method call will not block, but return immediately.
  // The following code will execute while the RPC is in progress,
  // before either of onFailure() or onSuccess() are executed.
  //
  statusLabel.setText("Query in progress...");
  ...

----------------------------------------

TITLE: HTML Download Table Structure
DESCRIPTION: HTML table template used consistently across version entries to display platform-specific download information including package links, file sizes and checksums

LANGUAGE: html
CODE:
<table class="downloads" style="width:500px">
  <tbody>
    <tr>
      <th>Platform</th>
      <th>Package</th>
      <th>Size</th>
      <th>SHA1 Sum</th>
    </tr>
    <tr>
      <td>Windows, Mac OS X, and Linux</td>
      <td><a href="https://github.com/gwtproject/gwt/releases/download/2.12.2/gwt-2.12.2.zip">gwt-2.12.2.zip</a></td>
      <td>109 MB</td>
      <td>968dbfffab4f43fcc70a05ce2378ca8013f12af3</td>
    </tr>
  </tbody>
</table>

----------------------------------------

TITLE: Defining Hibernate Entity Class for Account
DESCRIPTION: Java class representing an Account entity to be persisted with Hibernate, including a set of associated Records.

LANGUAGE: Java
CODE:
public class Account implements Serializable {
  Long id;
  String name;
  String password;
  Set<Record> records;

  public Account() {
  }

  public Account(Long id) {
    this.id = id;
  }

  public void addRecord(Record record) {
    if (records == null) {
      records = new HashSet<Record>();
    }
    records.add(record);
  }

  public void removeRecord(Record record) {
    if (records == null) {
      return;
    }
    records.remove(record);
  }

  // Along with corresponding getters + setters.
}

----------------------------------------

TITLE: GWT XSRF Protection Example
DESCRIPTION: Example showing how to implement XSRF protection in GWT applications using RequestBuilder and cookie validation.

LANGUAGE: java
CODE:
RequestBuilder rb = new RequestBuilder(RequestBuilder.POST, url);
rb.setHeader("X-XSRF-Cookie", Cookies.getCookie("myCookieKey"));
rb.sendRequest(null, myCallback);

----------------------------------------

TITLE: Embedding YouTube Video in HTML for GWT SDK Explanation
DESCRIPTION: This HTML snippet embeds a YouTube video explaining how the GWT SDK works. It uses the <object> and <embed> tags to ensure cross-browser compatibility.

LANGUAGE: html
CODE:
<div>
<object width="560" height="340"><param name="movie" value="https://www.youtube.com/v/ShkYDPN5Knc&hl=en_US&fs=1&"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="https://www.youtube.com/v/ShkYDPN5Knc&hl=en_US&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="560" height="340"></embed></object>
</div>

----------------------------------------

TITLE: Generic JavaScript Array Overlay Type
DESCRIPTION: Implementation of a generic array wrapper for JavaScript arrays containing JavaScriptObjects.

LANGUAGE: java
CODE:
class JsArray<E extends JavaScriptObject> extends JavaScriptObject {
  protected JsArray() { }
  public final native int length() /*-{ return this.length; }-*/;
  public final native E get(int i) /*-{ return this[i];     }-*/;
}

----------------------------------------

TITLE: Hibernate Mapping for Account Entity
DESCRIPTION: XML configuration for mapping the Account Java class to a database table using Hibernate, including a many-to-many relationship with Records.

LANGUAGE: XML
CODE:
<hibernate-mapping>
  <class name="com.google.musicstore.domain.Account" table="ACCOUNT">
    <id name="id" column="ACCOUNT_ID">
      <generator class="native"/>
    </id>
    <property name="name"/>
    <property name="password"/>

    <set name="records" table="ACCOUNT_RECORD" lazy="true">
      <key column="ACCOUNT_ID"/>
      <many-to-many column="RECORD_ID" class="com.google.musicstore.domain.Record"/>
    </set>
  </class>
</hibernate-mapping>

----------------------------------------

TITLE: Creating StockWatcher Application with webAppCreator (Shell)
DESCRIPTION: Command to create the StockWatcher GWT application using the webAppCreator tool. It specifies the output directory, JUnit path, and module name.

LANGUAGE: Shell
CODE:
webAppCreator -out StockWatcher
              -junit "C:\eclipse\plugins\org.junit_3.8.2.v200706111738\junit.jar"
              com.google.gwt.sample.stockwatcher.StockWatcher

----------------------------------------

TITLE: GWT XML Logging Configuration
DESCRIPTION: Configuration options for GWT logging in the .gwt.xml file including log level settings and handler enabling/disabling.

LANGUAGE: xml
CODE:
# LogExample.gwt.xml

    <set-property name="gwt.logging.logLevel" value="SEVERE"/>          # To change the  default logLevel
    <set-property name="gwt.logging.enabled" value="FALSE"/>            # To disable logging
    <set-property name="gwt.logging.consoleHandler" value="DISABLED"/>  # To disable a default Handler

----------------------------------------

TITLE: GWT History Implementation Example
DESCRIPTION: Complete example showing how to implement history support in a GWT application using TabPanel with history tokens and handlers.

LANGUAGE: java
CODE:
import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.event.logical.shared.SelectionEvent;
import com.google.gwt.event.logical.shared.SelectionHandler;
import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.TabPanel;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class BrowserHistoryExample implements EntryPoint {

  TabPanel tabPanel;
  /**
   * This is the entry point method.
   */
  public void onModuleLoad() {
    tabPanel = new TabPanel();

    tabPanel.add(new HTML("<h1>Page 0 Content: Llamas</h1>"), " Page 0 ");
    tabPanel.add(new HTML("<h1>Page 1 Content: Alpacas</h1>"), " Page 1 ");
    tabPanel.add(new HTML("<h1>Page 2 Content: Camels</h1>"), " Page 2 ");

    tabPanel.addSelectionHandler(new SelectionHandler<Integer>(){
      public void onSelection(SelectionEvent<Integer> event) {
        History.newItem("page" + event.getSelectedItem());
     );

    History.addValueChangeHandler(new ValueChangeHandler<String>() {
      public void onValueChange(ValueChangeEvent<String> event) {
        String historyToken = event.getValue();

        // Parse the history token
        try {
          if (historyToken.substring(0, 4).equals("page")) {
            String tabIndexToken = historyToken.substring(4, 5);
            int tabIndex = Integer.parseInt(tabIndexToken);
            // Select the specified tab panel
            tabPanel.selectTab(tabIndex);
          } else {
            tabPanel.selectTab(0);
          }

        } catch (IndexOutOfBoundsException e) {
          tabPanel.selectTab(0);
        }
      }
    });

    tabPanel.selectTab(0);
    RootPanel.get().add(tabPanel);
  }
}

----------------------------------------

TITLE: Editor Interface Method Conventions in Java
DESCRIPTION: Shows how to define Editor interfaces with proper method naming conventions.

LANGUAGE: java
CODE:
interface FooEditor extends Editor<Foo> {
  // Edits the Foo.getBar() property
  BarEditor bar();
  // Edits the Foo.getBaz() property
  BazEditor bazEditor();
}

----------------------------------------

TITLE: UiBinder GSS Style Configuration
DESCRIPTION: XML configuration for enabling GSS in UiBinder style tags.

LANGUAGE: xml
CODE:
<ui:style gss="true" >
  /* In here you can now use GSS */
</ui:style>

----------------------------------------

TITLE: Accessing Server-Provided Data in GWT using JSNI
DESCRIPTION: Shows how to access data provided by the server in the host page using JSNI (JavaScript Native Interface) in GWT.

LANGUAGE: java
CODE:
public native String getEmail() /*-{
  return $wnd.info['email'];
}-*/;

----------------------------------------

TITLE: Adding History Frame in HTML
DESCRIPTION: HTML iframe element required for GWT history support that must be embedded in the host HTML page.

LANGUAGE: html
CODE:
<iframe src="javascript:''" 
          id="__gwt_historyFrame"
          style="position:absolute;width:0;height:0;border:0"></iframe>

----------------------------------------

TITLE: Handling Words with Multiple Meanings
DESCRIPTION: This snippet shows how to use the 'meaning' attribute to differentiate between words that have multiple meanings in different contexts for accurate translation.

LANGUAGE: XML
CODE:
Favorite Color:
  <ui:RadioButton name="color"><ui:msg>Red</ui:msg></ui:RadioButton>
  <ui:RadioButton name="color"><ui:msg meaning="the color"/>Orange</ui:msg></ui:RadioButton>

Favorite Fruit:
  <ui:RadioButton name="fruit"><ui:msg>Apple</ui:msg></ui:RadioButton>
  <ui:RadioButton name="fruit"><ui:msg meaning="the fruit">Orange<ui:msg></ui:RadioButton>

----------------------------------------

TITLE: Handling Contact Deletion in Presenter
DESCRIPTION: Logic for deleting selected contacts and updating the view.

LANGUAGE: java
CODE:
public class ContactsPresenter implements Presenter {
  ...
  private void deleteSelectedContacts() {
    List<Integer> selectedRows = display.getSelectedRows();
    ArrayList<String> ids = new ArrayList<String>();

    for (int i = 0; i < selectedRows.size(); ++i) {
      ids.add(contactDetails.get(selectedRows.get(i)).getId());
    }

    rpcService.deleteContacts(ids, new AsyncCallback<ArrayList<ContactDetails>>() {
      public void onSuccess(ArrayList<ContactDetails> result) {
        contactDetails = result;
        List<String> data = new ArrayList<String>();

        for (int i = 0; i < result.size(); ++i) {
          data.add(contactDetails.get(i).getDisplayName());
        }

        display.setData(data);
      }

      public void onFailure(Throwable caught) {
        ...
      }
    });
  }
}

----------------------------------------

TITLE: Importing JavaScript JSON API using JsType
DESCRIPTION: Shows how to import a native JavaScript type (JSON) using @JsType with isNative=true. Maps the global JSON object's stringify and parse methods to Java.

LANGUAGE: java
CODE:
@JsType(isNative = true, namespace = JsPackage.GLOBAL)
public class JSON {
    public static native String stringify(Object obj);

    public static native Object parse(String obj);
}

----------------------------------------

TITLE: Basic RunStyle Command Format
DESCRIPTION: Shows the basic format for specifying a run style argument in GWT testing

LANGUAGE: shell
CODE:
-runStyle <NameStartingWithCaps>:arguments

----------------------------------------

TITLE: Creating a Button in GWT Java Client Code
DESCRIPTION: This snippet demonstrates how to create a button in GWT using Java. It shows the original code and a modified version with updated button text.

LANGUAGE: java
CODE:
final Button sendButton = new Button("Send");

LANGUAGE: java
CODE:
final Button sendButton = new Button("Send to Server");

----------------------------------------

TITLE: Expanding Factorial Test Coverage in JUnit
DESCRIPTION: Enhanced JUnit test method to verify factorial computation for both 0 and 2.

LANGUAGE: java
CODE:
public void testFactorial() {
  assertEquals(1, new MyApp().computeFactorial(0));
  assertEquals(2, new MyApp().computeFactorial(2));
}

----------------------------------------

TITLE: Basic GWT Widget Event Handling Implementation
DESCRIPTION: Demonstrates the basic structure of a GWT widget that handles DOM events using the sinkEvents pattern instead of direct event listeners.

LANGUAGE: java
CODE:
class MyWidget extends Widget {
  public MyWidget() {
    setElement(DOM.createDiv());
    sinkEvents(Event.ONCLICK);
  }

  public void onBrowserEvent(Event evt) {
    switch (DOM.eventGetType(evt)) {
      case Event.ONCLICK:
        // Do something insightful.
        break;
    }
  }
}

----------------------------------------

TITLE: Enabling Cross-Site Iframe Linker in GWT Module XML
DESCRIPTION: XML configuration to enable the cross-site iframe linker in a GWT module. This allows serving GWT application files from a different domain than the host page.

LANGUAGE: xml
CODE:
<add-linker name="xsiframe"/>

----------------------------------------

TITLE: Styling Developer Spotlight Page with CSS
DESCRIPTION: This CSS snippet defines styles for the developer spotlight page, including layout for video sections, application descriptions, and screenshots. It sets maximum width, padding, and text formatting for various elements.

LANGUAGE: CSS
CODE:
#body {
  max-width: 700px;
}
.video {
  clear: both;
  width: 100%;
  overflow: visible;
  padding: 5px;
}

.video .screenshot {
  padding-left: 15px;
  padding-top: 20px;
  padding-bottom: 20px;
  vertical-align: middle;
}

.video .description {
  padding-top: 5px;
  padding-bottom: 5px;
  vertical-align: middle;
}

.video .description .title {
  font-weight: bold;
}

.application {
  clear: both;
  width: 100%;
  overflow: visible;
  padding: 5px;
}

.application .screenshot {
  padding-left: 15px;
  padding-top: 20px;
  padding-bottom: 20px;
}

.application .description {
  vertical-align: middle;
}

.application .description .title {
  font-weight: bold;
}

----------------------------------------

TITLE: Interface Implementation with JavaScriptObject
DESCRIPTION: Example demonstrating how JavaScriptObject subtypes can implement interfaces in GWT 2.0+.

LANGUAGE: java
CODE:
interface Person {
  String getName();
}

class PersonJso extends JavaScriptObject implements Person {
  protected PersonJso() {}

  public static native PersonJso create(String name) /*-{
    return {name: name};
  }-*/;

  public final native String getName() /*-{
    return this.name;
  }-*/;
}

----------------------------------------

TITLE: Complete Material Design UI Layout
DESCRIPTION: Final UiBinder XML layout incorporating Material Design components, responsive layout, and styling

LANGUAGE: xml
CODE:
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
         xmlns:g='urn:import:com.google.gwt.user.client.ui'
         xmlns:p='urn:import:com.vaadin.polymer.paper.widget'
         xmlns:i='urn:import:com.vaadin.polymer.iron.widget'>

  <ui:style>
    paper-icon-item {
      position: relative;
      overflow: hidden;
    }
    .toolbar {
       background: #4285f4 !important;
    }
    .header {
       font-size: 200%;
       margin-left: 50px;
    }
    .content {
       padding: 15px;
    }
  </ui:style>

  <g:HTMLPanel>
    <style is='custom-style'>
      .add {
        position: absolute;
        bottom: 20px;
        right: 20px;
        --paper-fab-background: var(--paper-red-500);
      }
    </style>
    <p:PaperDrawerPanel ui:field="drawerPanel">
       <!-- Drawer content -->
       <div drawer="">
          <p:PaperHeaderPanel mode="seamed">
             <p:PaperToolbar addStyleNames="{style.toolbar}"/>
             <!-- Menu items -->
          </p:PaperHeaderPanel>
       </div>
       <!-- Main content -->
       <div main="">
          <p:PaperHeaderPanel mode="seamed">
            <p:PaperToolbar addStyleNames="{style.toolbar}">
              <p:PaperIconButton ui:field="menu" icon="more-vert"
                                 attributes="paper-drawer-toggle"/>
              <span class="{style.header}">Todo List</span>
            </p:PaperToolbar>
            <g:HTMLPanel ui:field="content"
                         addStyleNames="{style.content} vertical center-justified layout"/>
          </p:PaperHeaderPanel>
          <p:PaperFab ui:field="addButton" icon="add"
                      addStyleNames="add"/>
       </div>
    </p:PaperDrawerPanel>
  </g:HTMLPanel>
</ui:UiBinder>

----------------------------------------

TITLE: GWT Remote Service Interface Example
DESCRIPTION: Example of adding XSRF protection to GWT RPC services by including cookie validation in method signatures.

LANGUAGE: java
CODE:
public interface MyInterface extends RemoteService {
  public boolean doSomething(String cookieValue);
  public void doSomethingElse(String cookieValue, String arg);
}

----------------------------------------

TITLE: Data Resource References in GSS for GWT
DESCRIPTION: Shows how to reference data resources in GSS using the resourceUrl() function, which generates a URL based on the return value of DataResource.getUrl().

LANGUAGE: css
CODE:
/* CSS */
@url BACKGROUND_IMAGE myImageName

/* GSS */
@def BACKGROUND_IMAGE resourceUrl("myImageName");

/* Direct usage of resourceUrl */
.logout {
    background-image: resourceUrl("logout");
}

----------------------------------------

TITLE: Creating GWT TodoList Project with webAppCreator
DESCRIPTION: Uses the GWT webAppCreator tool to generate the initial project structure and build script for the TodoList application.

LANGUAGE: shell
CODE:
$ /full_path_to_gwt_sdk/webAppCreator \
    -templates maven,sample \
    -out TodoListApp \
    org.gwtproject.tutorial.TodoList

----------------------------------------

TITLE: Creating i18n Constants Interface with i18nCreator
DESCRIPTION: Example command for using i18nCreator to generate internationalization support for a Constants interface in a GWT project.

LANGUAGE: text
CODE:
~/Foo> i18nCreator -eclipse Foo com.example.foo.client.FooConstants
 Created file src/com/example/foo/client/FooConstants.properties
 Created file FooConstants-i18n.launch
 Created file FooConstants-i18n

----------------------------------------

TITLE: Configuring LayoutPanel with Widget Constraints in GWT
DESCRIPTION: Demonstrates setting up a LayoutPanel with three child widgets positioned using various constraints.

LANGUAGE: Java
CODE:
Widget child0, child1, child2;
LayoutPanel p = new LayoutPanel();
p.add(child0); p.add(child1); p.add(child2);

p.setWidgetLeftWidth(child0, 0, PCT, 50, PCT);  // Left panel
p.setWidgetRightWidth(child1, 0, PCT, 50, PCT); // Right panel

p.setWidgetLeftRight(child2, 5, EM, 5, EM);     // Center panel
p.setWidgetTopBottom(child2, 5, EM, 5, EM);

----------------------------------------

TITLE: Extracting GWT SDK on Unix Systems
DESCRIPTION: Command to unzip the GWT SDK package on Mac or Linux systems

LANGUAGE: shell
CODE:
unzip gwt-2.10.0.zip

----------------------------------------

TITLE: AutoBean Category Implementation
DESCRIPTION: Example showing how to implement custom behavior in AutoBeans using categories

LANGUAGE: java
CODE:
interface Person {
  String getName();
  void setName(String name);
  boolean marry(Person spouse);
}

@Category(PersonCategory.class)
interface MyFactory {
  // Would be illegal without a category providing an implementation of marry(AutoBean<Person> person, Person spouse)
  AutoBean<Person> person();
}

class PersonCategory {
  public static boolean marry(AutoBean<Person> instance, Person spouse) {
    return new Marriage(instance.as(), spouse).accepted();
  }
}

----------------------------------------

TITLE: Implementing Keyboard Event Handler in GWT
DESCRIPTION: Implementation of keyboard event handling for the input box, specifically handling the Enter key press to add stocks. Uses KeyDownHandler interface for cross-browser compatibility.

LANGUAGE: java
CODE:
newSymbolTextBox.addKeyDownHandler(new KeyDownHandler() {
  public void onKeyDown(KeyDownEvent event) {
    if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
      addStock();
    }
  }
});

----------------------------------------

TITLE: Resource Copy Ant Target
DESCRIPTION: Ant target for copying static resources to the GWT WAR output directory

LANGUAGE: xml
CODE:
<target name="copyresources" description="Copy static resources to war output directory">
    <copy todir="war/myapp">
      <fileset dir="src/com/myapp/resources">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>

----------------------------------------

TITLE: Editor Path Annotations in Java
DESCRIPTION: Example of using @Path annotations to specify property paths in Editor implementations.

LANGUAGE: java
CODE:
class PersonEditor implements Editor<Person> {
  // Corresponds to person.getManager().getName()
  @Path("manager.name");
  Label managerName;
}

----------------------------------------

TITLE: Configuring XSIFrame Linker for GWT 2.6.1
DESCRIPTION: XML configuration required in module.xml file to enable Super Dev Mode for GWT 2.6.1.

LANGUAGE: xml
CODE:
<add-linker name="xsiframe"/>

----------------------------------------

TITLE: Database Updates with CellTable FieldUpdater
DESCRIPTION: Demonstrates handling user input and database updates using FieldUpdater with CellTable

LANGUAGE: Java
CODE:
public class CellTableFieldUpdaterExample implements EntryPoint {
  private static class Contact {
    private static int nextId = 0;
    private final int id;
    private String name;

    public Contact(String name) {
      nextId++;
      this.id = nextId;
      this.name = name;
    }
  }

  private static final ProvidesKey<Contact> KEY_PROVIDER =
      new ProvidesKey<CellTableFieldUpdaterExample.Contact>() {
        @Override
        public Object getKey(Contact item) {
          return item.id;
        }
      };

  @Override
  public void onModuleLoad() {
    final CellTable<Contact> table = new CellTable<Contact>(KEY_PROVIDER);
    final TextInputCell nameCell = new TextInputCell();
    Column<Contact, String> nameColumn = new Column<Contact, String>(nameCell) {
      @Override
      public String getValue(Contact object) {
        return object.name;
      }
    };
    nameColumn.setFieldUpdater(new FieldUpdater<Contact, String>() {
      @Override
      public void update(int index, Contact object, String value) {
        object.name = value;
        table.redraw();
      }
    });
    table.addColumn(nameColumn, "Name");
  }
}

----------------------------------------

TITLE: Implementing Deferred Command Pattern in GWT
DESCRIPTION: Demonstrates how to implement progressive rendering using DeferredCommand and IncrementalCommand to avoid blocking the UI event loop while creating UI elements from a list of data objects.

LANGUAGE: java
CODE:
final List objects = ....;
  DeferredCommand.addCommand(new IncrementalCommand() {
    Iterator i = objects.iterator();
    public boolean execute() {
      Foo foo = (Foo)i.next();
      .... do something ...
      return i.hasNext();
    }
  });

----------------------------------------

TITLE: Disabling CSS to GSS Autoconversion
DESCRIPTION: XML configuration to disable automatic conversion of CSS to GSS after migration is complete.

LANGUAGE: xml
CODE:
<set-configuration-property name="CssResource.conversionMode" value="off" />

----------------------------------------

TITLE: Configuring GWT Maven Plugin for JsInterop
DESCRIPTION: XML configuration to enable the experimental JsInterop feature in the GWT Maven plugin.

LANGUAGE: xml
CODE:
<plugin>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>gwt-maven-plugin</artifactId>
  ...
  <configuration>
    <jsInteropMode>JS</jsInteropMode>
    ...
  </configuration>
</plugin>

----------------------------------------

TITLE: Implementing Timer for Automatic Refresh in GWT
DESCRIPTION: Sets up a timer to automatically refresh the stock list at regular intervals.

LANGUAGE: Java
CODE:
// Setup timer to refresh list automatically.
Timer refreshTimer = new Timer() {
  @Override
  public void run() {
    refreshWatchList();
  }
};
refreshTimer.scheduleRepeating(REFRESH_INTERVAL);

----------------------------------------

TITLE: German Properties File for Constants
DESCRIPTION: Properties file containing German translations for static UI strings, using UTF-8 encoding for international characters.

LANGUAGE: properties
CODE:
stockWatcher = Aktienbeobachter
symbol = Symbol
price = Kurs
change = &Auml;nderung
remove = Entfernen
add = Hinzuf&uuml;gen

----------------------------------------

TITLE: Implementing a GWT Host Page Servlet in Java
DESCRIPTION: Shows how to create a servlet that serves as a dynamic host page for a GWT application, allowing for custom authentication and variable content based on user status.

LANGUAGE: java
CODE:
public class GwtHostingServlet extends HttpServlet {

 @Override
 protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {

   resp.setContentType("text/html");
   resp.setCharacterEncoding("UTF-8");

   // Print a simple HTML page including a <script> tag referencing your GWT module as the response
   PrintWriter writer = resp.getWriter();
   writer.append("<html><head>")
       .append("<script type=\"text/javascript\" src=\"sample/sample.nocache.js\"></script>")
       .append("</head><body><p>Hello, world!</p></body></html>");
  }
}

----------------------------------------

TITLE: Defining Hibernate Entity Class for Record
DESCRIPTION: Java class representing a Record entity to be persisted with Hibernate.

LANGUAGE: Java
CODE:
public class Record implements Serializable {
  private Long id;
  private String title;
  private int year;
  private double price;

  public Record() {
  }

  public Record(Long id) {
    this.id = id;
  }

  // Along with corresponding getters + setters.
}

----------------------------------------

TITLE: Checking User Authentication with GWT-RPC in Java
DESCRIPTION: Demonstrates how to use a GWT-RPC service in the onModuleLoad() method to check if a user is logged in before showing the application or redirecting to a login page.

LANGUAGE: java
CODE:
public void onModuleLoad() {
  // loginService is a GWT-RPC service that checks if the user is logged in
  loginService.checkLoggedIn(new AsyncCallback<Boolean> {
    public void onSuccess(Boolean loggedIn) {
      if (loggedIn) {
        showApp();
      } else {
        Window.Location.assign("/login");
      }
    }
    // ...onFailure()
  }
}

----------------------------------------

TITLE: External Style Classes in GSS for GWT
DESCRIPTION: Illustrates how to use the @external at-rule in GSS to suppress selector obfuscation while still allowing programmatic access to the selector name.

LANGUAGE: css
CODE:
/* CSS */
@external .foo;

/* GSS */
@external foo;

/* Don't obfuscate the class myLegacyClass and all classes starting with gwt- */
@external myLegacyClass 'gwt-*';

----------------------------------------

TITLE: Defining a View Interface with Presenter in Java
DESCRIPTION: Illustrates a more complex view interface that includes a Presenter interface for bi-directional communication.

LANGUAGE: java
CODE:
public interface HelloView extends IsWidget {
    void setName(String helloName);
    void setPresenter(Presenter presenter);

    public interface Presenter {
        void goTo(Place place);
    }
}

----------------------------------------

TITLE: GWT Compiler Ant Build Target
DESCRIPTION: Default Ant build target for compiling GWT applications to JavaScript, including memory and classpath configuration

LANGUAGE: xml
CODE:
<target name="gwtc" depends="javac" description="GWT compile to JavaScript">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
      <classpath>
        <pathelement location="src"/>
        <path refid="project.class.path"/>
      </classpath>
      <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
      <jvmarg value="-Xmx256M"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg value="com.google.gwt.sample.hello.Hello"/>
    </java>
  </target>

----------------------------------------

TITLE: Configuring Deferred Binding Rules in GWT Module XML
DESCRIPTION: Example of defining replacement rules for the PopupPanel widget in a GWT module XML file. It specifies different implementations for various browser environments.

LANGUAGE: XML
CODE:
<module>

  <!--  ... other configuration omitted ... -->

  <!-- Fall through to this rule is the browser isn't IE or Mozilla -->
  <replace-with class="com.google.gwt.user.client.ui.impl.PopupImpl">
    <when-type-is class="com.google.gwt.user.client.ui.impl.PopupImpl"/>
  </replace-with>

  <!-- Mozilla needs a different implementation due to issue #410 -->
  <replace-with class="com.google.gwt.user.client.ui.impl.PopupImplMozilla">
    <when-type-is class="com.google.gwt.user.client.ui.impl.PopupImpl" />
    <any>
      <when-property-is name="user.agent" value="gecko"/>
      <when-property-is name="user.agent" value="gecko1_8" />
    </any>
  </replace-with>

  <!-- IE has a completely different popup implementation -->
  <replace-with class="com.google.gwt.user.client.ui.impl.PopupImplIE6">
    <when-type-is class="com.google.gwt.user.client.ui.impl.PopupImpl"/>
    <when-property-is name="user.agent" value="ie6" />
  </replace-with>
</module>

----------------------------------------

TITLE: Creating Button Widget - Original
DESCRIPTION: Example code showing the original button creation in the GWT application

LANGUAGE: java
CODE:
final Button sendButton = new Button("Send");

----------------------------------------

TITLE: Defining a Place and PlaceTokenizer in Java
DESCRIPTION: Shows how to create a Place class with an associated PlaceTokenizer for URL handling.

LANGUAGE: java
CODE:
public class HelloPlace extends Place {
    private String helloName;

    public HelloPlace(String token) {
        this.helloName = token;
    }

    public String getHelloName() {
        return helloName;
    }

    public static class Tokenizer implements PlaceTokenizer<HelloPlace> {
        @Override
        public String getToken(HelloPlace place) {
            return place.getHelloName();
        }

        @Override
        public HelloPlace getPlace(String token) {
            return new HelloPlace(token);
        }
    }
}

----------------------------------------

TITLE: Running Jetty Server for GWT Application
DESCRIPTION: Command to start the Jetty server for running the GWT application in development mode.

LANGUAGE: shell
CODE:
mvn jetty:run -pl *-server -am -Denv=dev

----------------------------------------

TITLE: Handling XSRF Token in Client-Side RPC Calls
DESCRIPTION: Java code demonstrating how to obtain and include XSRF token in client-side RPC calls, including error handling.

LANGUAGE: java
CODE:
XsrfTokenServiceAsync xsrf = (XsrfTokenServiceAsync)GWT.create(XsrfTokenService.class);
((ServiceDefTarget)xsrf).setServiceEntryPoint(GWT.getModuleBaseURL() + "xsrf");
xsrf.getNewXsrfToken(new AsyncCallback<XsrfToken>() {

  public void onSuccess(XsrfToken token) {
    MyServiceAsync rpc = (MyServiceAsync)GWT.create(MyService.class);
    ((HasRpcToken) rpc).setRpcToken(token);

    // make XSRF protected RPC call
    rpc.doStuff(new AsyncCallback<Void>() {
      // ...
    });
  }

  public void onFailure(Throwable caught) {
    try {
      throw caught;
    } catch (RpcTokenException e) {
      // Can be thrown for several reasons:
      //   - duplicate session cookie, which may be a sign of a cookie
      //     overwrite attack
      //   - XSRF token cannot be generated because session cookie isn't
      //     present
    } catch (Throwable e) {
      // unexpected
    }
});

----------------------------------------

TITLE: Initializing Main UiBinder Component in Java
DESCRIPTION: Core class for the main UI component using GWT's UiBinder pattern to separate logic from layout

LANGUAGE: java
CODE:
package org.gwtproject.tutorial;

import com.google.gwt.core.client.GWT;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.HTMLPanel;

public class Main extends Composite {
  interface MainUiBinder extends UiBinder<HTMLPanel, Main> {
  }

  private static MainUiBinder ourUiBinder = GWT.create(MainUiBinder.class);

  public Main() {
    initWidget(ourUiBinder.createAndBindUi(this));
  }
}

----------------------------------------

TITLE: Creating Button Widget - Modified
DESCRIPTION: Modified button creation code with updated button text

LANGUAGE: java
CODE:
final Button sendButton = new Button("Send to Server");

----------------------------------------

TITLE: HTML Module Reference in Host Page
DESCRIPTION: Example of how to reference a GWT module in an HTML host page using script tags.

LANGUAGE: HTML
CODE:
<script type="text/javascript" src="<module>.nocache.js"></script>

----------------------------------------

TITLE: Creating ArrayList for Stock Data in GWT
DESCRIPTION: Initializes an ArrayList to store stock symbols entered by the user in the StockWatcher class.

LANGUAGE: Java
CODE:
private ArrayList<String> stocks = new ArrayList<String>;

----------------------------------------

TITLE: Import Resolution Error
DESCRIPTION: Example of import resolution error when GWT compiler cannot find required packages.

LANGUAGE: text
CODE:
$ ./gearsTest-compile
Analyzing source in module 'com.example.gearsTest'
   [ERROR] Errors in '/Users/zundel/Documents/workspace2/galgwt-issue3/src/com/example/client/gearsTest.java'
      [ERROR] Line 9:  The import com.google.gwt.gears cannot be resolved
      [ERROR] Line 26:  Gears cannot be resolved

----------------------------------------

TITLE: Creating GWT Web Application - Unix
DESCRIPTION: Command line instructions for creating a new GWT web application project on Mac/Linux, including making the script executable

LANGUAGE: shell
CODE:
cd gwt-2.10.0

chmod u+x webAppCreator

./webAppCreator -out MyWebApp com.mycompany.mywebapp.MyWebApp

----------------------------------------

TITLE: Attaching UiBinder Template to RootLayoutPanel in GWT
DESCRIPTION: Java code to create and attach a UiBinder-based widget to the RootLayoutPanel.

LANGUAGE: Java
CODE:
interface Binder extends UiBinder<Widget, BasicApp> { }
private static final Binder binder = GWT.create(Binder.class);

public void onModuleLoad() {
  RootLayoutPanel.get().add(binder.createAndBindUi());
}

----------------------------------------

TITLE: Creating i18n Messages Interface with i18nCreator
DESCRIPTION: Example command for using i18nCreator to generate internationalization support for a Messages interface in a GWT project.

LANGUAGE: text
CODE:
~/Foo> i18nCreator -eclipse Foo -createMessages com.example.foo.client.FooMessages
 Created file src/com/example/foo/client/FooMessages.properties
 Created file FooMessages-i18n.launch
 Created file FooMessages-i18n

----------------------------------------

TITLE: HTML Structure for GWT Documentation Homepage
DESCRIPTION: HTML markup defining the structure and layout of the GWT documentation homepage, including navigation links, images, and descriptive text for key sections of the documentation.

LANGUAGE: HTML
CODE:
<div style="font-size: 140%; font-weight: bold">Productivity for developers, performance for users</div>
<div style="padding-top: 12px; line-height: 125%;">
  GWT is a development toolkit for building and
  optimizing complex browser-based applications.
  It's open source, completely free, and used by thousands of enthusiastic developers
  around the world.
</div>

<br /><br />
<table class="columns" style="clear: left;">
  <tbody>
    <tr>
      <td>
        <a href="overview.html">
          <img src="images/gwt-sm.png" style="float: left; margin-left: 50px; border: 0;" height="48" width="48" />
        </a>
        <div style="margin-left: 112px; margin-bottom: 10px;">
          <div style="font-size: 120%; font-weight: bold;"><a href="overview.html">Learn More</a></div>
          <div style="padding-top: 5px; line-height: 125%;">
            Learn about GWT, the features and tools it offers, and how you can quickly develop high-performance AJAX applications across all major browsers.<br /><br />
          </div>
        </div>
      </td>
    </tr>
    <tr>
      <td>
        <a href="download.html">
          <img src="images/arrow-48.png" style="float: left; margin-left: 50px; border: 0;" height="48" width="48" />
        </a>
        <div style="margin-left: 112px; margin-bottom: 10px;">
          <div style="font-size: 120%; font-weight: bold;"><a href="download.html">Download</a></div>
          <div style="padding-top: 5px; line-height: 125%;">
            Download and install the tools in GWT, including the SDK, Speed Tracer, and the Google Plugin for Eclipse.<br /><br />
          </div>
        </div>
      </td>
    </tr>
    <tr>
      <td>
        <a href="gettingstarted-v2.html">
          <img src="images/learnmore.gif" style="float: left; margin-left: 50px; border: 0;" height="48" width="48" />
        </a>
        <div style="margin-left: 112px; margin-bottom: 10px;">
          <div style="font-size: 120%; font-weight: bold;"><a href="gettingstarted-v2.html">Get Started</a></div>
          <div style="padding-top: 5px; line-height: 125%;">
            Walk through the first steps needed to get a web application up and running. From there, work through the fundamentals of GWT development with an in-depth tutorial.<br /><br />
          </div>
        </div>
      </td>
    </tr>
    <tr>
      <td>
        <a href="doc/latest/DevGuide.html">
          <img src="images/docs.gif" style="float: left; margin-left: 50px; border: 0;" height="48" width="48" />
        </a>
        <div style="margin-left: 112px;">
          <div style="font-size: 120%; font-weight: bold;"><a href="doc/latest/DevGuide.html">Read the Docs</a></div>
          <div style="padding-top: 5px; line-height: 125%;">
            Everything you need to know about how to use GWT.<br /><br />
          </div>
        </div>
      </td>
    </tr>
  </tbody>
</table>

----------------------------------------

TITLE: GWT Logger Event Handling
DESCRIPTION: Shows how to handle logger events including level changes, message logging, and exception logging.

LANGUAGE: java
CODE:
void handleLevelClick(ChangeEvent e) {
  Level level = Level.parse(levelTextBox.getItemText(
      levelTextBox.getSelectedIndex()));
  logger.log(Level.SEVERE,
      "Setting level to: " + level.getName());
  logger.setLevel(level);
}

void handleLogClick(ClickEvent e) {
  Level level = Level.parse(logTextBox.getItemText(
      logTextBox.getSelectedIndex()));
  logger.log(level, "This is a client log message");
}

void handleExceptionClick(ClickEvent e) {
  try {
    Level n = null;
    n.getName();
  } catch (NullPointerException ex) {
    logger.log(Level.SEVERE, "Null Exception Hit", ex);
  }
}

----------------------------------------

TITLE: Creating an Ant GWT Project with webAppCreator
DESCRIPTION: Example command for using webAppCreator to generate a new GWT project with Ant build configuration, including JUnit path specification.

LANGUAGE: shell
CODE:
webAppCreator -junit /path/to/junit-3.8.1.jar -out foo com.example.foo.Foo

----------------------------------------

TITLE: Building GWT Docs with Maven-Grunt Plugin
DESCRIPTION: Alternative build process using Maven with Grunt profile for those without Grunt installed.

LANGUAGE: bash
CODE:
mvn clean install -Pgrunt

----------------------------------------

TITLE: Manipulating Widget Background Color using DOM in GWT
DESCRIPTION: This snippet demonstrates how to use the DOM to change the background color of a GWT HTML widget. It accesses the underlying DOM element of the widget and sets its background color style property.

LANGUAGE: java
CODE:
private HTML htmlWidget;

// Other code to instantiate the widget...

// Change the description background color.
htmlWidget.getElement().getStyle().setBackgroundColor("#ffee80");

----------------------------------------

TITLE: Creating a StackLayoutPanel in GWT
DESCRIPTION: Shows how to set up a StackLayoutPanel with multiple content sections and headers.

LANGUAGE: Java
CODE:
StackLayoutPanel p = new StackLayoutPanel(Unit.EM);
p.add(new HTML("this content"), new HTML("this"), 4);
p.add(new HTML("that content"), new HTML("that"), 4);
p.add(new HTML("the other content"), new HTML("the other"), 4);

----------------------------------------

TITLE: Running GWT Docs Locally with Maven
DESCRIPTION: Command to serve the documentation site locally using Maven's Jetty plugin.

LANGUAGE: bash
CODE:
mvn jetty:run

----------------------------------------

TITLE: User Agents Configuration
DESCRIPTION: Example of limiting browser permutations using userAgents argument

LANGUAGE: shell
CODE:
-Dgwt.args="-prod -userAgents ie6,gecko1_8 -runStyle Selenium:myhost:4444/*firefox"

----------------------------------------

TITLE: Creating GWT Web Application - Windows
DESCRIPTION: Command line instructions for creating a new GWT web application project on Windows using webAppCreator tool

LANGUAGE: shell
CODE:
cd gwt-2.10.0

webAppCreator -out MyWebApp com.mycompany.mywebapp.MyWebApp

----------------------------------------

TITLE: HTML Links to Meeting Notes
DESCRIPTION: A series of HTML anchor tags linking to individual meeting notes pages organized by date. Each link includes the meeting date as both the link text and part of the URL path.

LANGUAGE: html
CODE:
<a href="meetingnotes/2017-05-10.html">10 May 2017</a>

----------------------------------------

TITLE: Handling HTML5 Storage Events in GWT
DESCRIPTION: Demonstrates how to register and handle storage events to track changes in storage data.

LANGUAGE: java
CODE:
import com.google.gwt.storage.client.Storage;
import com.google.gwt.storage.client.StorageEvent;
private Storage stockstore = null;
stockStore = Storage.getLocalStorageIfSupported();
if (stockStore != null) {
  stockStore.addStorageEventHandler(new StorageEvent.Handler() {
  public void onStorageChange(StorageEvent event) {
    lastStockLabel.setText("Last Update: "+event.getNewValue() +": " +event.getOldValue() +": " +event.getUrl());
  }
});

----------------------------------------

TITLE: Building GWT Docs with Grunt
DESCRIPTION: Steps to build GWT documentation assets using Grunt and Maven.

LANGUAGE: bash
CODE:
grunt
mvn clean install

----------------------------------------

TITLE: Styling GWT Documentation Page with CSS
DESCRIPTION: This CSS snippet defines styles for various elements on the GWT documentation page, including diagrams, content tables, and specific classes for layout and emphasis.

LANGUAGE: css
CODE:
<style>

div.diagram img {
  margin: 20px;
}

.contents {
  border: none;
}

.contents td {
  border: none;
}

.contents .header {
  font-weight: bold;
}

.flow-img {
  float: left;
  margin: 5px 0px 10px 0px;
  width: 80px;
  height: 80px;
}

.flow {
  margin-left: 85px;
}

.gwt-tools {
  margin-left: 90px;
}

.gwt-tools-head {
  font-weight: bold;
  font-size: 110%;
  margin-bottom: 0.2em;
}
</style>

----------------------------------------

TITLE: Creating Basic UiBinder XML Layout
DESCRIPTION: Initial XML layout template for the main UI component using GWT's UiBinder syntax

LANGUAGE: xml
CODE:
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
             xmlns:g='urn:import:com.google.gwt.user.client.ui'>

  <g:HTMLPanel>
  </g:HTMLPanel>

</ui:UiBinder>

----------------------------------------

TITLE: Item Widget UI Definition in XML
DESCRIPTION: UiBinder XML markup for the individual todo item widget with styling and Polymer checkbox element.

LANGUAGE: xml
CODE:
<ui:UiBinder xmlns:ui='urn:ui:com.google.gwt.uibinder'
             xmlns:g='urn:import:com.google.gwt.user.client.ui'
             xmlns:p='urn:import:com.vaadin.polymer.paper.widget'>

  <div class="item vertical center-justified layout">
    <style>
      .title {
        padding-left: 20px;
        font-size: 150%;
        font-weight: normal;
      }
      .done {
        text-decoration: line-through;
      }
      .paper-checkbox {
        top: -2px;
      }
    </style>
    <div class="vertical-section">
      <h4>
        <paper-checkbox ui:field="done"/>
        <span ui:field="title" class='title'>Go to Google</span>
      </h4>
      <div ui:field="description"/>
    </div>
  </div>
</ui:UiBinder>

----------------------------------------

TITLE: Styling GWT Demo Elements with CSS
DESCRIPTION: This CSS snippet defines styles for various elements used in the GWT examples page. It includes styling for demo divs, lists, project sections, screenshots, and text elements.

LANGUAGE: CSS
CODE:
div.demo {
      padding: 3px;
      padding-left: 20px;
      background-image: url("images/newwindow.gif");
      background-repeat: no-repeat;
      background-position: left center;
    }

    ul.demo {
      margin-top: 20px;
      margin-bottom: 10px;
    }

    ul.demo li {
      list-style-image: url("images/newwindow.gif");
      list-style-type: disc;
    }

    .project {
      clear: both;
      margin-bottom: 1.25em;
      padding: 10px 0 10px 0;
    }

    .project .screenshot {
      float: left;
    }

    .project .name {
      font-size: medium;
      background-image: url("/webtoolkit/images/newwindow.gif");
      background-repeat: no-repeat;
      background-position: left center;
    }

    .project .screenshot img {
      width: 125px;
      height: 109px;
      border: 1px solid;
      margin-right: 10px;
    }

    .project .info .apis {
      margin-top: 0.5em;
    }

    .project .head {
      font-size: .8em;
    }

    .project .info .apis .item {
      margin-left: 10px;
      font-size: .8em;
    }

    .example {
      margin-top: 1em;
    }

    .project .snippet {
      font-size: .8em;
    }

    .project .snippet a {
      font-size: .8em;
    }

----------------------------------------

TITLE: Styling Download Button and Layout Components in CSS
DESCRIPTION: CSS styles defining the appearance of download buttons, blocks, and related elements with rounded corners, color transitions, and text formatting

LANGUAGE: css
CODE:
.download-button {
 -webkit-border-radius: 10px;
   -moz-border-radius: 10px;
   border-radius: 10px;
   background: #f93535;
   color: #fff !important;
   text-decoration: none;
   text-align: center;
   padding: 7px 15px 8px 15px;
   font-size: 1.3em !important;
   white-space: nowrap;
   font-family: "soleil", sans-serif;
}

.download-button:hover {
  background-color: #9c1421;
  
}
.download-block {
  overflow: hidden;
}
.moreinfo {
  margin-top: 40px;
}
.moreinfo, .moreinfo p {
  text-align: center !important;
}

----------------------------------------

TITLE: Stateful History Token Format
DESCRIPTION: Example format for history tokens that need to encode application state information.

LANGUAGE: text
CODE:
page=<pagename>;session=<sessionname>

----------------------------------------

TITLE: CodeServer Command Line Options for GWT 2.12.2
DESCRIPTION: Available command line options for launching the Super Dev Mode code server in GWT 2.12.2.

LANGUAGE: text
CODE:
Google Web Toolkit 2.12.2
CodeServer [-[no]allowMissingSrc] [-[no]compileTest] [-compileTestRecompiles count] [-[no]failOnError] [-[no]precompile] [-port port] [-src dir] [-workDir dir] [-launcherDir] [-bindAddress host-name-or-address] [-style (DETAILED|OBFUSCATED|PRETTY)] [-setProperty name=value,value...] [-[no]incremental] [-sourceLevel [auto, 1.8, 9, 10, 11, 17]] [-logLevel (ERROR|WARN|INFO|TRACE|DEBUG|SPAM|ALL)] [-[no]generateJsInteropExports] [-includeJsInteropExports/excludeJsInteropExports regex] [-XmethodNameDisplayMode (NONE|ONLY_METHOD_NAME|ABBREVIATED|FULL)] [-X[no]closureFormattedOutput] [module]

----------------------------------------

TITLE: Sample JSON Output from PHP Stock Data Server
DESCRIPTION: This JSON snippet demonstrates the expected output format from the PHP stock data server. It shows stock data for two symbols (ABC and DEF) with their respective prices and changes.

LANGUAGE: json
CODE:
[
  {"symbol":"ABC","price":40.485578668179,"change":-0.53944918844604},
  {"symbol":"DEF","price":1.3606576154209,"change":0.0051755221198266}
]

----------------------------------------

TITLE: Creating a GWT Test Suite
DESCRIPTION: Example showing how to combine multiple test cases into a test suite using GWTTestSuite.

LANGUAGE: java
CODE:
public class MapsTestSuite extends GWTTestSuite {
  public static Test suite() {
    TestSuite suite = new TestSuite("Test for a Maps Application");
    suite.addTestSuite(MapTest.class); 
    suite.addTestSuite(EventTest.class);
    suite.addTestSuite(CopyTest.class);
    return suite;
  }
}

----------------------------------------

TITLE: Defining a RequestFactory Interface in Java
DESCRIPTION: Example of a RequestFactory interface with multiple service request methods.

LANGUAGE: java
CODE:
public interface ExpensesRequestFactory extends RequestFactory {

  EmployeeRequest employeeRequest();

  ExpenseRequest expenseRequest();

  ReportRequest reportRequest();

}

----------------------------------------

TITLE: Custom Event Logger Implementation in Java
DESCRIPTION: Java class implementing a native method to log custom events to the GWT stats system.

LANGUAGE: java
CODE:
public class StatsEventLogger {
  public static native void logEvent(String moduleName, String subSystem,
      String eventGroup, double millis, String type) /*-{
    $wnd.__gwtStatsEvent({
      'moduleName' : moduleName,
      'subSystem' : subSystem,
      'evtGroup' : eventGroup,
      'millis' : millis,
      'type' : type
    });
  }-*/;
}

----------------------------------------

TITLE: Dynamic GWT Host Page with User Authentication in Java
DESCRIPTION: Demonstrates a more advanced servlet that checks user authentication status and serves different content accordingly, including passing user data to the GWT module.

LANGUAGE: java
CODE:
// In GwtHostingServlet's doGet() method...
PrintWriter writer = resp.getWriter();
writer.append("<html><head>");
writer.append("<script type=\"text/javascript\" src=\"sample/sample.nocache.js\"></script>");

// Open a second <script> tag where we will define some extra data
writer.append("<script type=\"text/javascript\">");

// Define a global JSON object called "info" which can contain some simple key/value pairs
writer.append("var info = { ");

// Include the user's email with the key "email"
writer.append("\"email\" : \"" + userService.getCurrentUser().getEmail() + "\"");

// End the JSON object definition
writer.append(" };");

// End the <script> tag
writer.append("</script>");
writer.append("</head><body>Hello, world!</body></html>");

----------------------------------------

TITLE: Implementing Native JavaScript Method in GWT Java Class
DESCRIPTION: Demonstrates how to implement a native JavaScript method within a GWT Java class, using the HTMLTable class as an example.

LANGUAGE: Java
CODE:
public void setStylePrimaryName(int row, int column, String styleName) {
  UIObject.setStylePrimaryName(getCellElement(bodyElem, row, column), styleName);
}

private native Element getCellElement(Element table, int row, int col) /*-{
  var out = table.rows[row].cells[col];
  return (out == null ? null : out);
}-*/;

----------------------------------------

TITLE: Implementing User Authentication Service
DESCRIPTION: Java implementation of the login service using App Engine's User Service API

LANGUAGE: java
CODE:
public LoginInfo login(String requestUri) {
  UserService userService = UserServiceFactory.getUserService();
  User user = userService.getCurrentUser();
  LoginInfo loginInfo = new LoginInfo();

  if (user != null) {
    loginInfo.setLoggedIn(true);
    loginInfo.setEmailAddress(user.getEmail());
    loginInfo.setNickname(user.getNickname());
    loginInfo.setLogoutUrl(userService.createLogoutURL(requestUri));
  } else {
    loginInfo.setLoggedIn(false);
    loginInfo.setLoginUrl(userService.createLoginURL(requestUri));
  }
  return loginInfo;
}

----------------------------------------

TITLE: Clearing HTML5 Storage Data in GWT
DESCRIPTION: Example of implementing a clear all function that removes data from both UI and storage.

LANGUAGE: java
CODE:
import com.google.gwt.storage.client.Storage;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.FlexTable;
import com.google.gwt.user.client.ui.Widget;

clearAllButton.addClickHandler(new ClickHandler() {
  public void onClick(ClickEvent event) {
  Widget sender = (Widget) event.getSource();
  if (sender == clearAllButton) {
    stockStore = Storage.getLocalStorageIfSupported();
    if (stockStore !=null) {
      for (int ix =0; ix < stockStore.getLength(); ix++) {
        stocksFlexTable.removeRow(1);
      }

      stockStore.clear();}
    }
  }
});

----------------------------------------

TITLE: Web Application Deployment Descriptor Configuration
DESCRIPTION: Configuration of the RPC servlet mapping in web.xml

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app
PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
"http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>
  <!-- Default page to serve -->
  <welcome-file-list>
    <welcome-file>StockWatcher.html</welcome-file>
  </welcome-file-list>

  <!-- Servlets -->
  <servlet>
    <servlet-name>stockPriceServiceImpl</servlet-name>
    <servlet-class>com.google.gwt.sample.stockwatcher.server.StockPriceServiceImpl</servlet-class>
  </servlet>

  <servlet-mapping>
    <servlet-name>stockPriceServiceImpl</servlet-name>
    <url-pattern>/stockwatcher/stockPrices</url-pattern>
  </servlet-mapping>
</web-app>

----------------------------------------

TITLE: Structuring GWT User Showcase Content in HTML
DESCRIPTION: This HTML snippet structures the content for the GWT user showcase page. It includes sections for developer profiles with video interviews, screenshots, and descriptions of GWT applications like GoGrid, scenechronize, and Whirled.

LANGUAGE: HTML
CODE:
<table class="columns">
  <tr class="video">
    <td class="screenshot">
      <img src="images/dev_gal_gogrid.jpg"/>
    </td>
    <td class="description">
      <div class="title"><a href="http://www.gogrid.com">GoGrid</a></div>
      GoGrid is a cloud computing infrastructure service provider which
      enables you to deploy and scale load-balanced cloud server networks via a
      unique multi-server control panel. Justin Kitagawa, senior product manager and lead
      developer on GoGrid, shares how they used GWT to build GoGrid, what he
      likes and would like to see from GWT, and his tips and learnings from
      developing with GWT.
      <ul>
        <li><a href="http://www.youtube.com/watch?v=3dMrILwtiMI">GWT Developers
          - GoGrid</a> (2:50)</li>
        <li><a href="http://www.youtube.com/watch?v=fULUS4VQoeE">GWT Developer
          Soapbox</a> (1:49)</li>
        <li><a href="http://www.youtube.com/watch?v=nsyq6_Mgaxs">GWT Developer
          Tips</a> (0:44)</li>
      </ul>
    </td>
  </tr>
  
  <!-- Similar structure repeated for scenechronize and Whirled -->
</table>

----------------------------------------

TITLE: Implementing a View in Java using Composite
DESCRIPTION: Shows the implementation of a GoodbyeView using Composite to encapsulate Widget dependencies.

LANGUAGE: java
CODE:
public class GoodbyeViewImpl extends Composite implements GoodbyeView {
    SimplePanel viewPanel = new SimplePanel();
    Element nameSpan = DOM.createSpan();

    public GoodbyeViewImpl() {
        viewPanel.getElement().appendChild(nameSpan);
        initWidget(viewPanel);
    }

    @Override
    public void setName(String name) {
        nameSpan.setInnerText("Good-bye, " + name);
    }
}

----------------------------------------

TITLE: Web Application Deployment Descriptor
DESCRIPTION: XML configuration for servlet mapping in web.xml

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
    "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>
  <welcome-file-list>
    <welcome-file>StockWatcher.html</welcome-file>
  </welcome-file-list>

  <servlet>
    <servlet-name>jsonStockData</servlet-name>
    <servlet-class>com.google.gwt.sample.stockwatcher.server.JsonStockData</servlet-class>
  </servlet>

  <servlet-mapping>
    <servlet-name>jsonStockData</servlet-name>
    <url-pattern>/stockwatcher/stockPrices</url-pattern>
  </servlet-mapping>
</web-app>

----------------------------------------

TITLE: Implementing a View in Java using Composite
DESCRIPTION: Shows the implementation of a GoodbyeView using Composite to encapsulate Widget dependencies.

LANGUAGE: java
CODE:
public class GoodbyeViewImpl extends Composite implements GoodbyeView {
    SimplePanel viewPanel = new SimplePanel();
    Element nameSpan = DOM.createSpan();

    public GoodbyeViewImpl() {
        viewPanel.getElement().appendChild(nameSpan);
        initWidget(viewPanel);
    }

    @Override
    public void setName(String name) {
        nameSpan.setInnerText("Good-bye, " + name);
    }
}

----------------------------------------

TITLE: Binding UI Event Handlers in Presenter
DESCRIPTION: Setting up click handlers for UI elements in the presenter.

LANGUAGE: java
CODE:
public class ContactsPresenter implements Presenter {
  ...
  public void bind() {
    display.getAddButton().addClickHandler(new ClickHandler() {
      public void onClick(ClickEvent event) {
        eventBus.fireEvent(new AddContactEvent());
      }
    });

    display.getDeleteButton().addClickHandler(new ClickHandler() {
      public void onClick(ClickEvent event) {
        deleteSelectedContacts();
      }
    });

    display.getList().addClickHandler(new ClickHandler() {
      public void onClick(ClickEvent event) {
        int selectedRow = display.getClickedRow(event);

        if (selectedRow >= 0) {
          String id = contacts.get(selectedRow).getId();
          eventBus.fireEvent(new EditContactEvent(id));
        }
      }
    });
  }
}

----------------------------------------

TITLE: Implementing Stock Service with JDO Persistence
DESCRIPTION: Java implementation of the stock service using JDO for data persistence in App Engine datastore

LANGUAGE: java
CODE:
public class StockServiceImpl extends RemoteServiceServlet implements StockService {
  private static final PersistenceManagerFactory PMF = JDOHelper.getPersistenceManagerFactory("transactions-optional");

  public void addStock(String symbol) throws NotLoggedInException {
    checkLoggedIn();
    PersistenceManager pm = getPersistenceManager();
    try {
      pm.makePersistent(new Stock(getUser(), symbol));
    } finally {
      pm.close();
    }
  }

----------------------------------------

TITLE: Extending Locale Properties in GWT Module XML
DESCRIPTION: Example of adding multiple locale values to a GWT module using the extend-property element in module XML configuration.

LANGUAGE: xml
CODE:
<module>
  <inherits name="com.google.gwt.user.User"/>
  <inherits name="com.google.gwt.i18n.I18N"/>
  
  <!-- French language, independent of country -->
  <extend-property name="locale" values="fr"/>

  <!-- French in France -->
  <extend-property name="locale" values="fr_FR"/>

  <!-- French in Canada -->
  <extend-property name="locale" values="fr_CA"/>
  
  <!-- English language, independent of country -->
  <extend-property name="locale" values="en"/>
</module>

----------------------------------------

TITLE: Styling Presentation Details in CSS
DESCRIPTION: CSS styles for formatting presentation details on the page, including margins, padding and horizontal dividers.

LANGUAGE: CSS
CODE:
div.preso-detail {
  margin-bottom: 30px;
}

div.preso-detail blockquote {
  margin: 20px 2em;
  padding: 0;
}

hr.divider {
  margin: 30px 0;
}

----------------------------------------

TITLE: Reference Cycle Diagram
DESCRIPTION: Illustrates the problematic reference cycle pattern that leads to memory leaks.

LANGUAGE: text
CODE:
widget -> elem(native) -> closure -> widget


----------------------------------------

TITLE: Defining CssResource in XML Configuration
DESCRIPTION: XML configuration to include CssResource in a GWT module

LANGUAGE: XML
CODE:
<inherits name="com.google.gwt.resources.Resources" />

----------------------------------------

TITLE: Modifying GWT Button Label in Java
DESCRIPTION: Example of changing a button label in the GWT application's Java source code.

LANGUAGE: java
CODE:
final Button sendButton = new Button("Send to Server");

----------------------------------------

TITLE: Running GWT Tests with Ant for Coverage
DESCRIPTION: Ant command to run GWT tests in development mode with EMMA for coverage data collection.

LANGUAGE: shell
CODE:
ant test.dev

----------------------------------------

TITLE: Initializing RequestFactory in GWT Client Code
DESCRIPTION: Java code showing how to create and initialize a RequestFactory instance in GWT client-side code.

LANGUAGE: java
CODE:
final EventBus eventBus = new SimpleEventBus();
requestFactory = GWT.create(ExpensesRequestFactory.class);
requestFactory.initialize(eventBus);

----------------------------------------

TITLE: GWT RPC Service Interface for Music Store
DESCRIPTION: Java interface defining the remote procedure calls available for the Music Store application.

LANGUAGE: Java
CODE:
@RemoteServiceRelativePath("musicservice")
public interface MusicStoreService extends RemoteService {
  public List<Account> getAccounts();

  public List<Record> getRecords();

  public Long saveAccount(Account account);

  public Long saveRecord(Record record);

  public void saveRecordToAccount(Account account, Record record);
}

----------------------------------------

TITLE: Java Class Documentation and Style Example
DESCRIPTION: Demonstrates the required file header format including license, package declaration, imports, and class structure according to GWT style guidelines.

LANGUAGE: java
CODE:
/*
 * Copyright 2006 Google Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.google.foo;

import com.google.bar.Blah;
import com.google.bar.Yada;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Does X and Y and provides an abstraction for Z.
 */
public class Foo {
  ...
}