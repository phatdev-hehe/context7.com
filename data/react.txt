TITLE: Declaring a State Variable with useState
DESCRIPTION: Call useState at the top level of your component to declare a state variable. It returns an array with the current state and a function to update it.

LANGUAGE: javascript
CODE:
const [state, setState] = useState(initialState)

----------------------------------------

TITLE: Using useState Hook in React
DESCRIPTION: Demonstrates how to use the useState Hook to add state to a React component. The example shows declaring a state variable 'index' and its setter function 'setIndex' for an ImageGallery component.

LANGUAGE: javascript
CODE:
function ImageGallery() {
  const [index, setIndex] = useState(0);
  // ...


----------------------------------------

TITLE: Creating React Components with JSX
DESCRIPTION: Demonstrates how to create and nest React components using JSX syntax. The Gallery component renders multiple Profile components.

LANGUAGE: jsx
CODE:
function Profile() {
  return (
    <img
      src="https://i.imgur.com/MK3eW3As.jpg"
      alt="Katherine Johnson"
    />
  );
}

export default function Gallery() {
  return (
    <section>
      <h1>Amazing scientists</h1>
      <Profile />
      <Profile />
      <Profile />
    </section>
  );
}

----------------------------------------

TITLE: Creating Basic React Component
DESCRIPTION: Demonstrates how to create a simple React button component using a function that returns JSX markup.

LANGUAGE: JavaScript
CODE:
function MyButton() {
  return (
    <button>I'm a button</button>
  );
}

----------------------------------------

TITLE: Reading context in a component
DESCRIPTION: Call useContext at the top level of your component to read and subscribe to context.

LANGUAGE: javascript
CODE:
const value = useContext(SomeContext)

----------------------------------------

TITLE: Rendering Lists in React
DESCRIPTION: Demonstrates how to render a list of components from an array of data using map(). Each list item requires a unique key prop for React to track items efficiently.

LANGUAGE: jsx
CODE:
export default function List() {
  const listItems = people.map(person =>
    <li key={person.id}>
      <img
        src={getImageUrl(person)}
        alt={person.name}
      />
      <p>
        <b>{person.name}:</b>
        {' ' + person.profession + ' '}
        known for {person.accomplishment}
      </p>
    </li>
  );
  return (
    <article>
      <h1>Scientists</h1>
      <ul>{listItems}</ul>
    </article>
  );
}

----------------------------------------

TITLE: Optimizing re-renders with objects and functions
DESCRIPTION: Use useMemo and useCallback to optimize re-renders when passing objects and functions via context.

LANGUAGE: javascript
CODE:
function MyApp() {
  const [currentUser, setCurrentUser] = useState(null);

  const login = useCallback((response) => {
    storeCredentials(response.credentials);
    setCurrentUser(response.user);
  }, []);

  const contextValue = useMemo(() => ({
    currentUser,
    login
  }), [currentUser, login]);

  return (
    <AuthContext.Provider value={contextValue}>
      <Page />
    </AuthContext.Provider>
  );
}

----------------------------------------

TITLE: Updating State in a React Event Handler
DESCRIPTION: Shows how to update a state variable using its setter function inside an event handler. The 'handleClick' function increments the 'index' state variable.

LANGUAGE: JavaScript
CODE:
function handleClick() {
  setIndex(index + 1);
}

----------------------------------------

TITLE: Initializing State with useState in React
DESCRIPTION: Demonstrates how to initialize a state variable using the useState Hook in a React component. The state variable 'index' is created with an initial value of 0 and a setter function 'setIndex'.

LANGUAGE: JavaScript
CODE:
const [index, setIndex] = useState(0);

----------------------------------------

TITLE: Creating a TasksProvider Component
DESCRIPTION: Encapsulate the reducer and context logic in a separate provider component for cleaner organization.

LANGUAGE: JSX
CODE:
export function TasksProvider({ children }) {
  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);
  return (
    <TasksContext.Provider value={tasks}>
      <TasksDispatchContext.Provider value={dispatch}>
        {children}
      </TasksDispatchContext.Provider>
    </TasksContext.Provider>
  );
}

----------------------------------------

TITLE: Modern Context Usage with useContext
DESCRIPTION: Demonstrates the recommended way to read context values using the useContext hook.

LANGUAGE: javascript
CODE:
function Button() {
  const theme = useContext(ThemeContext);
  return <button className={theme} />;
}

----------------------------------------

TITLE: Forwarding Props with JSX Spread Syntax in React
DESCRIPTION: Demonstrates how to forward all props to a child component using the spread syntax. This can be useful when a component doesn't use props directly but passes them to its children.

LANGUAGE: jsx
CODE:
function Profile(props) {
  return (
    <div className="card">
      <Avatar {...props} />
    </div>
  );
}

----------------------------------------

TITLE: Server Components Build-Time Rendering
DESCRIPTION: Shows how Server Components can render content at build time, eliminating the need for client-side libraries and improving initial load performance.

LANGUAGE: javascript
CODE:
import marked from 'marked'; // Not included in bundle
import sanitizeHtml from 'sanitize-html'; // Not included in bundle

async function Page({page}) {
  // NOTE: loads *during* render, when the app is built.
  const content = await file.readFile(`${page}.md`);
  
  return <div>{sanitizeHtml(marked(content))}</div>;
}

----------------------------------------

TITLE: Interface-based React Component Props
DESCRIPTION: Example demonstrating how to use TypeScript interfaces to define component props with documentation and multiple properties.

LANGUAGE: tsx
CODE:
interface MyButtonProps {
  /** The text to display inside the button */
  title: string;
  /** Whether the button can be interacted with */
  disabled: boolean;
}

function MyButton({ title, disabled }: MyButtonProps) {
  return (
    <button disabled={disabled}>{title}</button>
  );
}

----------------------------------------

TITLE: Implementing a Form with State in React
DESCRIPTION: This snippet demonstrates a React component that uses state to manage a form submission. It shows how setting state triggers a re-render and updates the UI.

LANGUAGE: JavaScript
CODE:
import { useState } from 'react';

export default function Form() {
  const [isSent, setIsSent] = useState(false);
  const [message, setMessage] = useState('Hi!');
  if (isSent) {
    return <h1>Your message is on its way!</h1>
  }
  return (
    <form onSubmit={(e) => {
      e.preventDefault();
      setIsSent(true);
      sendMessage(message);
    }}>
      <textarea
        placeholder="Message"
        value={message}
        onChange={e => setMessage(e.target.value)}
      />
      <button type="submit">Send</button>
    </form>
  );
}

function sendMessage(message) {
  // ...
}

----------------------------------------

TITLE: Basic useRef Hook Usage - React
DESCRIPTION: Basic example of declaring and using a ref with useRef hook. Returns an object with a mutable current property that persists across renders.

LANGUAGE: javascript
CODE:
const ref = useRef(initialValue)

----------------------------------------

TITLE: Sharing State Between Components in React
DESCRIPTION: Illustrates how to lift state up to a common parent component to share it between child components.

LANGUAGE: jsx
CODE:
import { useState } from 'react';

export default function Accordion() {
  const [activeIndex, setActiveIndex] = useState(0);
  return (
    <>
      <h2>Almaty, Kazakhstan</h2>
      <Panel
        title="About"
        isActive={activeIndex === 0}
        onShow={() => setActiveIndex(0)}
      >
        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.
      </Panel>
      <Panel
        title="Etymology"
        isActive={activeIndex === 1}
        onShow={() => setActiveIndex(1)}
      >
        The name comes from <span lang="kk-KZ">алма</span>, the Kazakh word for "apple" and is often translated as "full of apples". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang="la">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.
      </Panel>
    </>
  );
}

function Panel({
  title,
  children,
  isActive,
  onShow
}) {
  return (
    <section className="panel">
      <h3>{title}</h3>
      {isActive ? (
        <p>{children}</p>
      ) : (
        <button onClick={onShow}>
          Show
        </button>
      )}
    </section>
  );
}

----------------------------------------

TITLE: Implementing Lazy Loading with Suspense in a React Component
DESCRIPTION: A complete example showing how to implement lazy loading in a React component. It includes state management, conditional rendering, and error handling with Suspense.

LANGUAGE: javascript
CODE:
import { useState, Suspense, lazy } from 'react';
import Loading from './Loading.js';

const MarkdownPreview = lazy(() => delayForDemo(import('./MarkdownPreview.js')));

export default function MarkdownEditor() {
  const [showPreview, setShowPreview] = useState(false);
  const [markdown, setMarkdown] = useState('Hello, **world**!');
  return (
    <>
      <textarea value={markdown} onChange={e => setMarkdown(e.target.value)} />
      <label>
        <input type="checkbox" checked={showPreview} onChange={e => setShowPreview(e.target.checked)} />
        Show preview
      </label>
      <hr />
      {showPreview && (
        <Suspense fallback={<Loading />}>
          <h2>Preview</h2>
          <MarkdownPreview markdown={markdown} />
        </Suspense>
      )}
    </>
  );
}

// Add a fixed delay so you can see the loading state
function delayForDemo(promise) {
  return new Promise(resolve => {
    setTimeout(resolve, 2000);
  }).then(() => promise);
}

----------------------------------------

TITLE: Choosing State Structure in React
DESCRIPTION: Shows how to simplify state by removing redundant variables and calculating derived values during rendering.

LANGUAGE: jsx
CODE:
import { useState } from 'react';

export default function Form() {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');

  const fullName = firstName + ' ' + lastName;

  function handleFirstNameChange(e) {
    setFirstName(e.target.value);
  }

  function handleLastNameChange(e) {
    setLastName(e.target.value);
  }

  return (
    <>
      <h2>Let's check you in</h2>
      <label>
        First name:{' '}
        <input
          value={firstName}
          onChange={handleFirstNameChange}
        />
      </label>
      <label>
        Last name:{' '}
        <input
          value={lastName}
          onChange={handleLastNameChange}
        />
      </label>
      <p>
        Your ticket will be issued to: <b>{fullName}</b>
      </p>
    </>
  );
}

----------------------------------------

TITLE: Managing State with useState Hook in React
DESCRIPTION: Shows how to use the useState Hook to add state to a component, update it, and render based on state changes.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { sculptureList } from './data.js';

export default function Gallery() {
  const [index, setIndex] = useState(0);
  const [showMore, setShowMore] = useState(false);
  const hasNext = index < sculptureList.length - 1;

  function handleNextClick() {
    if (hasNext) {
      setIndex(index + 1);
    } else {
      setIndex(0);
    }
  }

  function handleMoreClick() {
    setShowMore(!showMore);
  }

  let sculpture = sculptureList[index];
  return (
    // Component JSX
  );
}

----------------------------------------

TITLE: Converting HTML to JSX in React
DESCRIPTION: This snippet demonstrates the process of converting HTML markup to JSX syntax for use in a React component. It shows the original HTML and the resulting JSX, highlighting the differences and necessary adjustments.

LANGUAGE: html
CODE:
<h1>Hedy Lamarr's Todos</h1>
<img 
  src="https://i.imgur.com/yXOvdOSs.jpg" 
  alt="Hedy Lamarr" 
  class="photo"
>
<ul>
    <li>Invent new traffic lights
    <li>Rehearse a movie scene
    <li>Improve the spectrum technology
</ul>

LANGUAGE: jsx
CODE:
export default function TodoList() {
  return (
    <>
      <h1>Hedy Lamarr's Todos</h1>
      <img 
        src="https://i.imgur.com/yXOvdOSs.jpg" 
        alt="Hedy Lamarr" 
        className="photo" 
      />
      <ul>
        <li>Invent new traffic lights</li>
        <li>Rehearse a movie scene</li>
        <li>Improve the spectrum technology</li>
      </ul>
    </>
  );
}

----------------------------------------

TITLE: Demonstrating State Snapshots in React
DESCRIPTION: This snippet shows how React uses state snapshots. It demonstrates that the state value accessed in an asynchronous callback reflects the value at the time the callback was created, not the current state.

LANGUAGE: JavaScript
CODE:
import { useState } from 'react';

export default function Counter() {
  const [number, setNumber] = useState(0);

  return (
    <>
      <h1>{number}</h1>
      <button onClick={() => {
        setNumber(number + 5);
        setTimeout(() => {
          alert(number);
        }, 3000);
      }}>+5</button>
    </>
  )
}

----------------------------------------

TITLE: Using useMemo Hook in React
DESCRIPTION: Shows how to use the useMemo Hook to optimize performance by caching expensive calculations. The example demonstrates memoizing filtered todos based on the 'todos' and 'tab' dependencies.

LANGUAGE: javascript
CODE:
function TodoList({ todos, tab, theme }) {
  const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);
  // ...
}

----------------------------------------

TITLE: Adding Cleanup to an Effect in React
DESCRIPTION: This snippet shows how to add a cleanup function to an Effect. The cleanup function is returned from the Effect and runs before the Effect runs again or when the component unmounts.

LANGUAGE: JavaScript
CODE:
useEffect(() => {
  const connection = createConnection();
  connection.connect();
  return () => {
    connection.disconnect();
  };
}, []);

----------------------------------------

TITLE: Updating State Based on Previous State
DESCRIPTION: Example of using an updater function to set state based on the previous state value, which is useful for avoiding race conditions.

LANGUAGE: javascript
CODE:
function handleClick() {
  setAge(a => a + 1); // setAge(42 => 43)
  setAge(a => a + 1); // setAge(43 => 44)
  setAge(a => a + 1); // setAge(44 => 45)
}

----------------------------------------

TITLE: Importing createRoot from react-dom/client in React
DESCRIPTION: Shows how to import the createRoot function from the react-dom/client package. This function is used to create a root for rendering React components in a browser DOM node.

LANGUAGE: jsx
CODE:
import { createRoot } from 'react-dom/client';

----------------------------------------

TITLE: Updating State with useState Setter Function
DESCRIPTION: Example of using the setter function returned by useState to update state in response to an event.

LANGUAGE: javascript
CODE:
function handleClick() {
  setName('Robin');
}

----------------------------------------

TITLE: Providing context to a component tree
DESCRIPTION: Wrap a component or part of the tree with a context provider to make the context value available to all components inside it.

LANGUAGE: jsx
CODE:
function MyPage() {
  return (
    <ThemeContext.Provider value="dark">
      <Form />
    </ThemeContext.Provider>
  );
}

----------------------------------------

TITLE: useContext with TypeScript
DESCRIPTION: Implementation of React Context using TypeScript with proper typing for theme values and context creation.

LANGUAGE: tsx
CODE:
type Theme = "light" | "dark" | "system";
const ThemeContext = createContext<Theme>("system");

const useGetTheme = () => useContext(ThemeContext);

----------------------------------------

TITLE: Importing and Exporting React Components
DESCRIPTION: Shows how to split React components into separate files and import/export them. The Gallery component imports and renders the Profile component.

LANGUAGE: jsx
CODE:
import Profile from './Profile.js';

export default function Gallery() {
  return (
    <section>
      <h1>Amazing scientists</h1>
      <Profile />
      <Profile />
      <Profile />
    </section>
  );
}

----------------------------------------

TITLE: Preventing Default Behavior in React Events
DESCRIPTION: This example shows how to prevent the default behavior of a form submission event in React using e.preventDefault(). It allows for custom handling of form submissions without page reloads.

LANGUAGE: jsx
CODE:
export default function Signup() {
  return (
    <form onSubmit={e => {
      e.preventDefault();
      alert('Submitting!');
    }}>
      <input />
      <button>Send</button>
    </form>
  );
}

----------------------------------------

TITLE: Interactive React Product Table with State
DESCRIPTION: Final implementation with state management and two-way data binding for search and filtering functionality.

LANGUAGE: jsx
CODE:
function FilterableProductTable({ products }) {
  const [filterText, setFilterText] = useState('');
  const [inStockOnly, setInStockOnly] = useState(false);

  return (
    <div>
      <SearchBar 
        filterText={filterText} 
        inStockOnly={inStockOnly}
        onFilterTextChange={setFilterText}
        onInStockOnlyChange={setInStockOnly} />
      <ProductTable 
        products={products}
        filterText={filterText}
        inStockOnly={inStockOnly} />
    </div>
  );
}

----------------------------------------

TITLE: Using Server Functions with Actions in Client Components
DESCRIPTION: Illustrates how to use Server Functions within Actions in Client Components, including state management and error handling.

LANGUAGE: jsx
CODE:
"use client";

import {updateName} from './actions';

function UpdateName() {
  const [name, setName] = useState('');
  const [error, setError] = useState(null);

  const [isPending, startTransition] = useTransition();

  const submitAction = async () => {
    startTransition(async () => {
      const {error} = await updateName(name);
      if (error) {
        setError(error);
      } else {
        setName('');
      }
    })
  }
  
  return (
    <form action={submitAction}>
      <input type="text" name="name" disabled={isPending}/>
      {error && <span>Failed: {error}</span>}
    </form>
  )
}

----------------------------------------

TITLE: useReducer with TypeScript
DESCRIPTION: Complete example of implementing useReducer with proper TypeScript types for state and actions.

LANGUAGE: tsx
CODE:
interface State {
   count: number 
};

type CounterAction =
  | { type: "reset" }
  | { type: "setCount"; value: State["count"] }

const initialState: State = { count: 0 };

function stateReducer(state: State, action: CounterAction): State {
  switch (action.type) {
    case "reset":
      return initialState;
    case "setCount":
      return { ...state, count: action.value };
    default:
      throw new Error("Unknown action");
  }
}

----------------------------------------

TITLE: Consuming Context with useContext Hook
DESCRIPTION: Example of reading context values in a component using the useContext Hook

LANGUAGE: javascript
CODE:
import { useContext } from 'react';
import { LevelContext } from './LevelContext.js';

export default function Heading({ children }) {
  const level = useContext(LevelContext);
  switch (level) {
    case 1:
      return <h1>{children}</h1>;
    case 2:
      return <h2>{children}</h2>;
    // ... additional cases
  }
}

----------------------------------------

TITLE: Conditional Rendering with Ternary Operator in React
DESCRIPTION: This example shows how to use the ternary operator (? :) to conditionally render JSX inline within a component's return statement.

LANGUAGE: jsx
CODE:
function Item({ name, isPacked }) {
  return (
    <li className="item">
      {isPacked ? (
        <del>
          {name + ' ✅'}
        </del>
      ) : (
        name
      )}
    </li>
  );
}

----------------------------------------

TITLE: Creating Chat Room Connection Hook in React
DESCRIPTION: Illustrates a custom useChatRoom Hook that manages chat room connections with proper cleanup.

LANGUAGE: javascript
CODE:
function useChatRoom({ serverUrl, roomId }) {
  useEffect(() => {
    const options = {
      serverUrl: serverUrl,
      roomId: roomId
    };
    const connection = createConnection(options);
    connection.connect();
    connection.on('message', (msg) => {
      showNotification('New message: ' + msg);
    });
    return () => connection.disconnect();
  }, [roomId, serverUrl]);
}

----------------------------------------

TITLE: Basic createRoot Usage in JavaScript
DESCRIPTION: Basic example of creating a React root and rendering a component into a DOM node

LANGUAGE: javascript
CODE:
import { createRoot } from 'react-dom/client';

const domNode = document.getElementById('root');
const root = createRoot(domNode);
root.render(<App />);

----------------------------------------

TITLE: Managing Form State with Status Enumeration
DESCRIPTION: Shows how to avoid contradictory state by using a single status variable with enumerated values instead of multiple boolean flags.

LANGUAGE: jsx
CODE:
const [status, setStatus] = useState('typing');

async function handleSubmit(e) {
  e.preventDefault();
  setStatus('sending');
  await sendMessage(text);
  setStatus('sent');
}

const isSending = status === 'sending';
const isSent = status === 'sent';

----------------------------------------

TITLE: Basic useReducer Hook Usage
DESCRIPTION: Shows the basic syntax for using useReducer Hook to manage component state with a reducer function.

LANGUAGE: javascript
CODE:
const [state, dispatch] = useReducer(reducer, initialArg, init?)

----------------------------------------

TITLE: Passing JSX as Children Props in React
DESCRIPTION: Shows how to pass JSX content as children to a component. The Card component receives and renders its children prop, allowing flexible content nesting.

LANGUAGE: jsx
CODE:
function Card({ children }) {
  return (
    <div className="card">
      {children}
    </div>
  );
}

export default function Profile() {
  return (
    <Card>
      <Avatar
        size={100}
        person={{ 
          name: 'Katsuko Saruhashi',
          imageId: 'YfeOqp2'
        }}
      />
    </Card>
  );
}

----------------------------------------

TITLE: Comparing useLayoutEffect and useEffect in React
DESCRIPTION: Demonstrates the difference between useLayoutEffect and useEffect in terms of when they execute relative to browser painting.

LANGUAGE: javascript
CODE:
// useLayoutEffect blocks the browser from repainting
useLayoutEffect(() => {
  const { height } = ref.current.getBoundingClientRect();
  setTooltipHeight(height);
}, []);

// useEffect does not block the browser
useEffect(() => {
  const { height } = ref.current.getBoundingClientRect();
  setTooltipHeight(height);
}, []);

----------------------------------------

TITLE: Forwarding Ref Through Multiple Components in React
DESCRIPTION: Example of forwarding a ref through multiple levels of components. FormField forwards its received ref to MyInput, which then forwards it to the input element.

LANGUAGE: javascript
CODE:
const FormField = forwardRef(function FormField(props, ref) {
  // ...
  return (
    <>
      <MyInput ref={ref} />
      ...
    </>
  );
});

----------------------------------------

TITLE: Caching Expensive Calculations with useMemo
DESCRIPTION: Demonstrates using useMemo to cache expensive calculations instead of using Effects.

LANGUAGE: jsx
CODE:
function TodoList({ todos, filter }) {
  const [newTodo, setNewTodo] = useState('');
  const visibleTodos = useMemo(() => {
    // ✅ Does not re-run unless todos or filter change
    return getFilteredTodos(todos, filter);
  }, [todos, filter]);
  // ...
}

----------------------------------------

TITLE: Nesting React Components
DESCRIPTION: Shows how to compose React components by nesting them within other components using JSX syntax.

LANGUAGE: JavaScript
CODE:
export default function MyApp() {
  return (
    <div>
      <h1>Welcome to my app</h1>
      <MyButton />
    </div>
  );
}

----------------------------------------

TITLE: Importing and Declaring Lazy Components in React
DESCRIPTION: Shows how to import the lazy function from React and use it to declare a lazy-loaded component. This enables code splitting and on-demand loading of the component.

LANGUAGE: javascript
CODE:
import { lazy } from 'react';

const MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));

----------------------------------------

TITLE: Streaming Data from Server to Client
DESCRIPTION: Example demonstrating how to stream data from a Server Component to a Client Component using the use API.

LANGUAGE: jsx
CODE:
export default function App() {
  const messagePromise = fetchMessage();
  return (
    <Suspense fallback={<p>waiting for message...</p>}>
      <Message messagePromise={messagePromise} />
    </Suspense>
  );
}

----------------------------------------

TITLE: Using useContext Hook in React
DESCRIPTION: Shows how to use the useContext Hook to access context in a React component. The example demonstrates reading a 'theme' value from ThemeContext in a Button component.

LANGUAGE: javascript
CODE:
function Button() {
  const theme = useContext(ThemeContext);
  // ...


----------------------------------------

TITLE: Updating Nested Arrays in React State with Immer
DESCRIPTION: Example of using Immer to update nested arrays in state more concisely by allowing "mutating" operations on a draft state.

LANGUAGE: JavaScript
CODE:
updateMyTodos(draft => {
  const artwork = draft.find(a => a.id === artworkId);
  artwork.seen = nextSeen;
});

----------------------------------------

TITLE: Enabling StrictMode for Root Component
DESCRIPTION: Demonstrates how to enable StrictMode for an entire React application at the root level

LANGUAGE: javascript
CODE:
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';

const root = createRoot(document.getElementById('root'));
root.render(
  <StrictMode>
    <App />
  </StrictMode>
);

----------------------------------------

TITLE: Memoized Greeting Component Example
DESCRIPTION: Demonstrates a practical implementation of memo with a Greeting component that only re-renders when its name prop changes, ignoring other state changes in the parent component.

LANGUAGE: javascript
CODE:
const Greeting = memo(function Greeting({ name }) {
  return <h1>Hello, {name}!</h1>;
});

export default Greeting;

----------------------------------------

TITLE: useCallback with Dependencies
DESCRIPTION: Illustrates how to specify dependencies for useCallback to control when the function should be recreated.

LANGUAGE: javascript
CODE:
const handleSubmit = useCallback((orderDetails) => {
  post('/product/' + productId + '/buy', {
    referrer,
    orderDetails,
  });
}, [productId, referrer]);

----------------------------------------

TITLE: Using useRef Hook in React
DESCRIPTION: Illustrates the usage of the useRef Hook to create a ref in a React component. The example shows creating a ref named 'inputRef' in a Form component, typically used to hold a DOM node.

LANGUAGE: javascript
CODE:
function Form() {
  const inputRef = useRef(null);
  // ...


----------------------------------------

TITLE: Synchronizing with Effects in React
DESCRIPTION: Illustrates how to use useEffect to synchronize a component with external systems, such as controlling a video player based on state.

LANGUAGE: jsx
CODE:
import { useState, useRef, useEffect } from 'react';

function VideoPlayer({ src, isPlaying }) {
  const ref = useRef(null);

  useEffect(() => {
    if (isPlaying) {
      ref.current.play();
    } else {
      ref.current.pause();
    }
  }, [isPlaying]);

  return <video ref={ref} src={src} loop playsInline />;
}

export default function App() {
  const [isPlaying, setIsPlaying] = useState(false);
  return (
    <>
      <button onClick={() => setIsPlaying(!isPlaying)}>
        {isPlaying ? 'Pause' : 'Play'}
      </button>
      <VideoPlayer
        isPlaying={isPlaying}
        src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4"
      />
    </>
  );
}

----------------------------------------

TITLE: Implementing a Form Declaratively with React State
DESCRIPTION: A React implementation of the same form functionality, using state to manage the UI and handle user interactions declaratively.

LANGUAGE: JavaScript
CODE:
import { useState } from 'react';

export default function Form() {
  const [answer, setAnswer] = useState('');
  const [error, setError] = useState(null);
  const [status, setStatus] = useState('typing');

  if (status === 'success') {
    return <h1>That's right!</h1>
  }

  async function handleSubmit(e) {
    e.preventDefault();
    setStatus('submitting');
    try {
      await submitForm(answer);
      setStatus('success');
    } catch (err) {
      setStatus('typing');
      setError(err);
    }
  }

  function handleTextareaChange(e) {
    setAnswer(e.target.value);
  }

  return (
    <>
      <h2>City quiz</h2>
      <p>
        In which city is there a billboard that turns air into drinkable water?
      </p>
      <form onSubmit={handleSubmit}>
        <textarea
          value={answer}
          onChange={handleTextareaChange}
          disabled={status === 'submitting'}
        />
        <br />
        <button disabled={
          answer.length === 0 ||
          status === 'submitting'
        }>
          Submit
        </button>
        {error !== null &&
          <p className="Error">
            {error.message}
          </p>
        }
      </form>
    </>
  );
}

----------------------------------------

TITLE: Basic useId Hook Usage in React
DESCRIPTION: Simple example demonstrating how to use the useId Hook to generate a unique identifier

LANGUAGE: javascript
CODE:
const id = useId()

----------------------------------------

TITLE: Filtering Todos with useMemo
DESCRIPTION: Example showing how to memoize filtered todo items to optimize performance

LANGUAGE: jsx
CODE:
function TodoList({ todos, tab }) {
  const visibleTodos = useMemo(
    () => filterTodos(todos, tab),
    [todos, tab]
  );
  // ...
}

----------------------------------------

TITLE: Basic useCallback Usage
DESCRIPTION: Demonstrates how to use useCallback to cache a function definition.

LANGUAGE: javascript
CODE:
const cachedFn = useCallback(fn, dependencies)

----------------------------------------

TITLE: Using Fragments in JSX
DESCRIPTION: This snippet shows how to use React Fragments to group multiple elements without adding extra nodes to the DOM. It demonstrates the syntax for both the long-form Fragment and the shorthand empty tags.

LANGUAGE: jsx
CODE:
<>
  <h1>Hedy Lamarr's Todos</h1>
  <img 
    src="https://i.imgur.com/yXOvdOSs.jpg" 
    alt="Hedy Lamarr" 
    class="photo"
  >
  <ul>
    ...
  </ul>
</>

----------------------------------------

TITLE: Rendering an Array of Items in React
DESCRIPTION: Demonstrates how to use map() to render a list of items from an array of data in React.

LANGUAGE: jsx
CODE:
const people = [
  'Creola Katherine Johnson: mathematician',
  'Mario José Molina-Pasquel Henríquez: chemist',
  'Mohammad Abdus Salam: physicist',
  'Percy Lavon Julian: chemist',
  'Subrahmanyan Chandrasekhar: astrophysicist'
];

export default function List() {
  const listItems = people.map(person =>
    <li>{person}</li>
  );
  return <ul>{listItems}</ul>;
}

----------------------------------------

TITLE: Basic Task Manager using useState
DESCRIPTION: Initial implementation of a task management component using useState for state management. Shows handling of adding, editing and deleting tasks.

LANGUAGE: jsx
CODE:
function TaskApp() {
  const [tasks, setTasks] = useState(initialTasks);

  function handleAddTask(text) {
    setTasks([
      ...tasks,
      {
        id: nextId++,
        text: text,
        done: false,
      },
    ]);
  }

  function handleChangeTask(task) {
    setTasks(
      tasks.map((t) => {
        if (t.id === task.id) {
          return task;
        } else {
          return t;
        }
      })
    );
  }

  function handleDeleteTask(taskId) {
    setTasks(tasks.filter((t) => t.id !== taskId));
  }
}

----------------------------------------

TITLE: Using Fragment Shorthand in JSX
DESCRIPTION: Demonstrates the shorthand syntax for the Fragment component in React, which allows grouping multiple JSX nodes without adding extra DOM elements.

LANGUAGE: JSX
CODE:
<>...</>

----------------------------------------

TITLE: DOM Manipulation with useRef - React
DESCRIPTION: Example showing how to manipulate DOM elements directly using refs, specifically focusing an input element.

LANGUAGE: javascript
CODE:
import { useRef } from 'react';

export default function Form() {
  const inputRef = useRef(null);

  function handleClick() {
    inputRef.current.focus();
  }

  return (
    <>
      <input ref={inputRef} />
      <button onClick={handleClick}>
        Focus the input
      </button>
    </>
  );
}

----------------------------------------

TITLE: Specifying Effect Dependencies in React
DESCRIPTION: This example demonstrates how to specify dependencies for an Effect. The Effect will only re-run when the specified dependencies change, optimizing performance.

LANGUAGE: JavaScript
CODE:
useEffect(() => {
  // This runs when the component mounts and when `roomId` changes
  const connection = createConnection(roomId);
  connection.connect();
  return () => connection.disconnect();
}, [roomId]);

----------------------------------------

TITLE: Conditional Rendering in React
DESCRIPTION: Shows how to conditionally render content in React components using JavaScript operators. This example uses the && operator to conditionally display a checkmark.

LANGUAGE: jsx
CODE:
function Item({ name, isPacked }) {
  return (
    <li className="item">
      {name} {isPacked && '✅'}
    </li>
  );
}

export default function PackingList() {
  return (
    <section>
      <h1>Sally Ride's Packing List</h1>
      <ul>
        <Item
          isPacked={true}
          name="Space suit"
        />
        <Item
          isPacked={true}
          name="Helmet with a golden leaf"
        />
        <Item
          isPacked={false}
          name="Photo of Tam"
        />
      </ul>
    </section>
  );
}

----------------------------------------

TITLE: Server-Side Rendering with renderToString
DESCRIPTION: Example showing how to use renderToString in a server route handler to generate HTML response.

LANGUAGE: javascript
CODE:
import { renderToString } from 'react-dom/server';

app.use('/', (request, response) => {
  const html = renderToString(<App />);
  response.send(html);
});

----------------------------------------

TITLE: Creating React Context - Basic Example
DESCRIPTION: Demonstrates the basic creation of a React context using createContext() with a default value.

LANGUAGE: javascript
CODE:
const SomeContext = createContext(defaultValue)

----------------------------------------

TITLE: Server Components Client-Side Data Fetching Example
DESCRIPTION: Demonstrates traditional client-side data fetching approach using Effects, including API endpoint implementation. Shows limitations of client-side loading with heavy dependencies.

LANGUAGE: javascript
CODE:
// bundle.js
import marked from 'marked'; // 35.9K (11.2K gzipped)
import sanitizeHtml from 'sanitize-html'; // 206K (63.3K gzipped)

function Page({page}) {
  const [content, setContent] = useState('');
  // NOTE: loads *after* first page render.
  useEffect(() => {
    fetch(`/api/content/${page}`).then((data) => {
      setContent(data.content);
    });
  }, [page]);
  
  return <div>{sanitizeHtml(marked(content))}</div>;
}

LANGUAGE: javascript
CODE:
// api.js
app.get(`/api/content/:page`, async (req, res) => {
  const page = req.params.page;
  const content = await file.readFile(`${page}.md`);
  res.send({content});
});

----------------------------------------

TITLE: Basic Chat Room Effect Example
DESCRIPTION: Example showing how to connect to a chat room with an Effect, demonstrating synchronization with a roomId prop

LANGUAGE: jsx
CODE:
const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [roomId]);
  // ...
}

----------------------------------------

TITLE: Basic Fragment Usage in React
DESCRIPTION: Demonstrates the basic syntax of using React Fragment with its shorthand notation to group multiple child elements.

LANGUAGE: jsx
CODE:
<>
  <OneChild />
  <AnotherChild />
</>

----------------------------------------

TITLE: Creating a Cached Function in React Server Components
DESCRIPTION: Demonstrates how to use the 'cache' function to create a memoized version of a function for use in React Server Components.

LANGUAGE: javascript
CODE:
const cachedFn = cache(fn);

----------------------------------------

TITLE: Converting to useReducer Implementation
DESCRIPTION: Refactored version using useReducer Hook to centralize state logic into a reducer function. Shows action dispatching and reducer implementation.

LANGUAGE: jsx
CODE:
function tasksReducer(tasks, action) {
  switch (action.type) {
    case 'added': {
      return [...tasks, {
        id: action.id,
        text: action.text,
        done: false
      }];
    }
    case 'changed': {
      return tasks.map(t => {
        if (t.id === action.task.id) {
          return action.task;
        } else {
          return t;
        }
      });
    }
    case 'deleted': {
      return tasks.filter(t => t.id !== action.id);
    }
    default: {
      throw Error('Unknown action: ' + action.type);
    }
  }
}

----------------------------------------

TITLE: Creating Imperative Handle with useImperativeHandle in React
DESCRIPTION: Example of using useImperativeHandle to expose a custom object (imperative handle) instead of a DOM node. This allows for more controlled exposure of functionality to parent components.

LANGUAGE: javascript
CODE:
import { forwardRef, useRef, useImperativeHandle } from 'react';

const MyInput = forwardRef(function MyInput(props, ref) {
  const inputRef = useRef(null);

  useImperativeHandle(ref, () => {
    return {
      focus() {
        inputRef.current.focus();
      },
      scrollIntoView() {
        inputRef.current.scrollIntoView();
      },
    };
  }, []);

  return <input {...props} ref={inputRef} />;
});

----------------------------------------

TITLE: Creating and Using Basic Context
DESCRIPTION: Demonstrates creating a context for heading levels and using it in components

LANGUAGE: javascript
CODE:
import { createContext } from 'react';

export const LevelContext = createContext(1);

----------------------------------------

TITLE: Basic Form Implementation in React
DESCRIPTION: Shows the basic usage of a form component with an input field and submit button. The form uses the action prop to handle form submission.

LANGUAGE: jsx
CODE:
<form action={search}>
    <input name="query" />
    <button type="submit">Search</button>
</form>

----------------------------------------

TITLE: Using Resource APIs in React Components
DESCRIPTION: Demonstrates how to use the 'use' API to read values from resources like Promises or contexts within a React component. This allows components to access external data without incorporating it into their state.

LANGUAGE: javascript
CODE:
function MessageComponent({ messagePromise }) {
  const message = use(messagePromise);
  const theme = use(ThemeContext);
  // ...
}

----------------------------------------

TITLE: Specifying a fallback default value
DESCRIPTION: Provide a default value when creating context to be used when no matching provider is found.

LANGUAGE: javascript
CODE:
const ThemeContext = createContext('light');

----------------------------------------

TITLE: Using server-only and taintUniqueValue for API Security in React
DESCRIPTION: Demonstrates how to use the server-only package and taintUniqueValue to create a secure API helper function that prevents API tokens from being exposed to the client.

LANGUAGE: javascript
CODE:
import "server-only";
import {experimental_taintUniqueValue} from 'react';

experimental_taintUniqueValue(
  'Do not pass the API token password to the client. ' +
    'Instead do all fetches on the server.'
  process,
  process.env.API_PASSWORD
);

----------------------------------------

TITLE: Creating a Simple React Component in JavaScript
DESCRIPTION: This snippet demonstrates how to create a basic React component that renders a greeting. It shows the use of props and JSX syntax.

LANGUAGE: javascript
CODE:
function Greeting({ name }) {
  return <h1>Hello, {name}</h1>;
}

export default function App() {
  return <Greeting name="world" />
}

----------------------------------------

TITLE: Memoizing Form Submit Handler
DESCRIPTION: Example showing how to memoize a function using useMemo and useCallback

LANGUAGE: jsx
CODE:
const handleSubmit = useMemo(() => {
  return (orderDetails) => {
    post('/product/' + productId + '/buy', {
      referrer,
      orderDetails
    });
  };
}, [productId, referrer]);

----------------------------------------

TITLE: Server Components with Dynamic Data Fetching
DESCRIPTION: Illustrates how Server Components can directly access data layers without API endpoints, improving performance by eliminating client-server waterfalls.

LANGUAGE: javascript
CODE:
import db from './database';

async function Note({id}) {
  // NOTE: loads *during* render.
  const note = await db.notes.get(id);
  return (
    <div>
      <Author id={note.authorId} />
      <p>{note}</p>
    </div>
  );
}

async function Author({id}) {
  // NOTE: loads *after* Note,
  // but is fast if data is co-located.
  const author = await db.authors.get(id);
  return <span>By: {author.name}</span>;
}

----------------------------------------

TITLE: Controlled Input Component
DESCRIPTION: Example of a controlled input using React state to manage the input value.

LANGUAGE: javascript
CODE:
function Form() {
  const [firstName, setFirstName] = useState('');
  return (
    <input
      value={firstName}
      onChange={e => setFirstName(e.target.value)}
    />
  );
}

----------------------------------------

TITLE: Correct Prop Handling Using Object Assignment in React
DESCRIPTION: This example demonstrates how to handle props in a React component by creating a new object and deleting unused props before passing them to a child component.

LANGUAGE: javascript
CODE:
function MyDiv(props) {
  const divProps = Object.assign({}, props);
  delete divProps.layout;

  if (props.layout === 'horizontal') {
    return <div {...divProps} style={getHorizontalStyle()} />
  } else {
    return <div {...divProps} style={getVerticalStyle()} />
  }
}

----------------------------------------

TITLE: Resetting Component State with Keys
DESCRIPTION: Shows how to force state reset by using different keys on components. The example uses a chat component that resets its state when switching between different recipients.

LANGUAGE: javascript
CODE:
import { useState } from 'react';

export default function Messenger() {
  const [to, setTo] = useState(contacts[0]);
  return (
    <div>
      <ContactList
        contacts={contacts}
        selectedContact={to}
        onSelect={contact => setTo(contact)}
      />
      <Chat key={to.id} contact={to} />
    </div>
  )
}

----------------------------------------

TITLE: Rendering a React Component in JavaScript
DESCRIPTION: This code demonstrates how to import ReactDOM, create a root, and render a simple React component. It replaces the entire body content with a React-rendered element.

LANGUAGE: javascript
CODE:
import { createRoot } from 'react-dom/client';

// Clear the existing HTML content
document.body.innerHTML = '<div id="app"></div>';

// Render your React component instead
const root = createRoot(document.getElementById('app'));
root.render(<h1>Hello, world</h1>);

----------------------------------------

TITLE: Rendering a Modal Dialog with a Portal
DESCRIPTION: Shows how to use createPortal to render a modal dialog that floats above the rest of the page, avoiding issues with container styling.

LANGUAGE: jsx
CODE:
import { useState } from 'react';
import { createPortal } from 'react-dom';
import ModalContent from './ModalContent.js';

export default function PortalExample() {
  const [showModal, setShowModal] = useState(false);
  return (
    <>
      <button onClick={() => setShowModal(true)}>
        Show modal using a portal
      </button>
      {showModal && createPortal(
        <ModalContent onClose={() => setShowModal(false)} />,
        document.body
      )}
    </>
  );
}

----------------------------------------

TITLE: Server Function Form Implementation
DESCRIPTION: Shows how to handle form submission using a Server Function marked with 'use server'. Includes examples of both direct usage and using bind for additional parameters.

LANGUAGE: jsx
CODE:
import { updateCart } from './lib.js';

function AddToCart({productId}) {
  async function addToCart(formData) {
    'use server'
    const productId = formData.get('productId')
    await updateCart(productId)
  }
  return (
    <form action={addToCart}>
        <input type="hidden" name="productId" value={productId} />
        <button type="submit">Add to Cart</button>
    </form>
  );
}

----------------------------------------

TITLE: Basic useDeferredValue Usage
DESCRIPTION: Basic example showing how to use useDeferredValue hook to create a deferred version of a value.

LANGUAGE: javascript
CODE:
const deferredValue = useDeferredValue(value)

----------------------------------------

TITLE: State Management with useState
DESCRIPTION: Illustrates React state management using the useState hook to create a counter button component.

LANGUAGE: JavaScript
CODE:
function MyButton() {
  const [count, setCount] = useState(0);

  function handleClick() {
    setCount(count + 1);
  }

  return (
    <button onClick={handleClick}>
      Clicked {count} times
    </button>
  );
}

----------------------------------------

TITLE: Class Component with Context
DESCRIPTION: Demonstrates how to use context in a class component with static contextType.

LANGUAGE: jsx
CODE:
class Button extends Component {
  static contextType = ThemeContext;

  render() {
    const theme = this.context;
    const className = 'button-' + theme;
    return (
      <button className={className}>
        {this.props.children}
      </button>
    );
  }
}

----------------------------------------

TITLE: Basic createElement Usage in React
DESCRIPTION: Demonstrates the basic syntax of createElement, showing how to create a React element with a type, props, and children.

LANGUAGE: javascript
CODE:
const element = createElement(type, props, ...children)

----------------------------------------

TITLE: Form Component with Input Focus using createRef
DESCRIPTION: Example of a class component using createRef to manage focus on an input element.

LANGUAGE: javascript
CODE:
import { Component, createRef } from 'react';

export default class Form extends Component {
  inputRef = createRef();

  handleClick = () => {
    this.inputRef.current.focus();
  }

  render() {
    return (
      <>
        <input ref={this.inputRef} />
        <button onClick={this.handleClick}>
          Focus the input
        </button>
      </>
    );
  }
}

----------------------------------------

TITLE: Using Keys in React Lists
DESCRIPTION: Illustrates the importance of using keys when rendering lists in React to help with item identification and updates.

LANGUAGE: jsx
CODE:
const listItems = people.map(person =>
  <li key={person.id}>
    <img
      src={getImageUrl(person)}
      alt={person.name}
    />
    <p>
      <b>{person.name}</b>
        {' ' + person.profession + ' '}
        known for {person.accomplishment}
    </p>
  </li>
);

----------------------------------------

TITLE: Installing Vite for React Project Setup
DESCRIPTION: Command to create a new React project using Vite as the build tool. Vite provides a fast development experience and comes with sensible defaults for React projects.

LANGUAGE: bash
CODE:
npm create vite@latest my-app -- --template react

----------------------------------------

TITLE: Building a stopwatch with refs and state
DESCRIPTION: This example shows how to combine refs and state to create a stopwatch. The ref is used to store the interval ID, while state is used for values that affect rendering.

LANGUAGE: javascript
CODE:
import { useState, useRef } from 'react';

export default function Stopwatch() {
  const [startTime, setStartTime] = useState(null);
  const [now, setNow] = useState(null);
  const intervalRef = useRef(null);

  function handleStart() {
    setStartTime(Date.now());
    setNow(Date.now());

    clearInterval(intervalRef.current);
    intervalRef.current = setInterval(() => {
      setNow(Date.now());
    }, 10);
  }

  function handleStop() {
    clearInterval(intervalRef.current);
  }

  let secondsPassed = 0;
  if (startTime != null && now != null) {
    secondsPassed = (now - startTime) / 1000;
  }

  return (
    <>
      <h1>Time passed: {secondsPassed.toFixed(3)}</h1>
      <button onClick={handleStart}>
        Start
      </button>
      <button onClick={handleStop}>
        Stop
      </button>
    </>
  );
}

----------------------------------------

TITLE: CSS Styling with Style Prop
DESCRIPTION: Example demonstrating dynamic styling using the style prop in React

LANGUAGE: JavaScript
CODE:
<img className="avatar" style={{ width: user.imageSize, height: user.imageSize }} />

----------------------------------------

TITLE: Replacing Items in an Array in React State
DESCRIPTION: Example of replacing specific items in an array stored in state using the map() method to conditionally update values.

LANGUAGE: JavaScript
CODE:
const nextCounters = counters.map((c, i) => {
  if (i === index) {
    return c + 1;
  } else {
    return c;
  }
});
setCounters(nextCounters);

----------------------------------------

TITLE: Basic React Component with TypeScript Props
DESCRIPTION: Simple example showing how to type props in a React component using TypeScript inline type annotation.

LANGUAGE: tsx
CODE:
function MyButton({ title }: { title: string }) {
  return (
    <button>{title}</button>
  );
}

----------------------------------------

TITLE: Implementing useOnlineStatus Hook with useDebugValue
DESCRIPTION: This example shows a full implementation of a custom Hook useOnlineStatus that uses useDebugValue to display the online status in React DevTools. It also demonstrates the use of useSyncExternalStore for managing the online/offline state.

LANGUAGE: javascript
CODE:
import { useSyncExternalStore, useDebugValue } from 'react';

export function useOnlineStatus() {
  const isOnline = useSyncExternalStore(subscribe, () => navigator.onLine, () => true);
  useDebugValue(isOnline ? 'Online' : 'Offline');
  return isOnline;
}

function subscribe(callback) {
  window.addEventListener('online', callback);
  window.addEventListener('offline', callback);
  return () => {
    window.removeEventListener('online', callback);
    window.removeEventListener('offline', callback);
  };
}

----------------------------------------

TITLE: Exposing Custom Methods with useImperativeHandle in React
DESCRIPTION: Shows how to use useImperativeHandle to expose custom focus and scrollIntoView methods for an input component, while keeping the actual DOM node private.

LANGUAGE: javascript
CODE:
import { useRef, useImperativeHandle } from 'react';

function MyInput({ ref }) {
  const inputRef = useRef(null);

  useImperativeHandle(ref, () => {
    return {
      focus() {
        inputRef.current.focus();
      },
      scrollIntoView() {
        inputRef.current.scrollIntoView();
      },
    };
  }, []);

  return <input ref={inputRef} />;
};

----------------------------------------

TITLE: Client-side Hydration Setup
DESCRIPTION: Shows how to set up client-side hydration to make server-generated HTML interactive.

LANGUAGE: javascript
CODE:
import { hydrateRoot } from 'react-dom/client';
import App from './App.js';

hydrateRoot(document, <App />);

----------------------------------------

TITLE: Creating Gallery Component with Multiple Profiles
DESCRIPTION: Example of composing multiple Profile components within a Gallery component.

LANGUAGE: javascript
CODE:
function Profile() {
  return (
    <img
      src="https://i.imgur.com/MK3eW3As.jpg"
      alt="Katherine Johnson"
    />
  );
}

export default function Gallery() {
  return (
    <section>
      <h1>Amazing scientists</h1>
      <Profile />
      <Profile />
      <Profile />
    </section>
  );
}

----------------------------------------

TITLE: Implementing forwardRef Component with Input in React
DESCRIPTION: Example of a forwardRef component that exposes an input element to its parent. The component receives props and a ref, then forwards the ref to the input element.

LANGUAGE: javascript
CODE:
import { forwardRef } from 'react';

const MyInput = forwardRef(function MyInput(props, ref) {
  return (
    <label>
      {props.label}
      <input ref={ref} />
    </label>
  );
});

----------------------------------------

TITLE: Adding an Item to an Array in React State
DESCRIPTION: Example of adding a new item to an array in state using the spread operator to create a new array.

LANGUAGE: JavaScript
CODE:
setArtists([
  ...artists,
  { id: nextId++, name: name }
]);

----------------------------------------

TITLE: Creating a Labeled Textarea with Default Values
DESCRIPTION: Shows how to create a textarea with a label and set default values for rows, columns, and content.

LANGUAGE: jsx
CODE:
<label>
  Write your post:
  <textarea name="postContent" defaultValue="I really enjoyed biking yesterday!" rows={4} cols={40} />
</label>

----------------------------------------

TITLE: Importing flushSync API in React
DESCRIPTION: Shows how to import the flushSync API from react-dom. This API forces React to flush a state update and update the DOM synchronously.

LANGUAGE: javascript
CODE:
import { flushSync } from 'react-dom';

----------------------------------------

TITLE: Creating Basic Profile Component
DESCRIPTION: Example of a simple React component that renders an image.

LANGUAGE: javascript
CODE:
export default function Profile() {
  return (
    <img
      src="https://i.imgur.com/MK3eW3Am.jpg"
      alt="Katherine Johnson"
    />
  )
}

----------------------------------------

TITLE: Custom Comparison Function with memo
DESCRIPTION: Shows how to implement a custom comparison function for memo to control when a component should re-render based on specific prop comparisons.

LANGUAGE: javascript
CODE:
const Chart = memo(function Chart({ dataPoints }) {
  // ...
}, arePropsEqual);

function arePropsEqual(oldProps, newProps) {
  return (
    oldProps.dataPoints.length === newProps.dataPoints.length &&
    oldProps.dataPoints.every((oldPoint, index) => {
      const newPoint = newProps.dataPoints[index];
      return oldPoint.x === newPoint.x && oldPoint.y === newPoint.y;
    })
  );
}

----------------------------------------

TITLE: Implementing Optimistic Updates in a React Form
DESCRIPTION: This example shows a complete implementation of useOptimistic in a React component for handling form submissions. It demonstrates optimistic UI updates for a messaging interface, including handling of pending states.

LANGUAGE: javascript
CODE:
import { useOptimistic, useState, useRef } from "react";
import { deliverMessage } from "./actions.js";

function Thread({ messages, sendMessage }) {
  const formRef = useRef();
  async function formAction(formData) {
    addOptimisticMessage(formData.get("message"));
    formRef.current.reset();
    await sendMessage(formData);
  }
  const [optimisticMessages, addOptimisticMessage] = useOptimistic(
    messages,
    (state, newMessage) => [
      ...state,
      {
        text: newMessage,
        sending: true
      }
    ]
  );

  return (
    <>
      {optimisticMessages.map((message, index) => (
        <div key={index}>
          {message.text}
          {!!message.sending && <small> (Sending...)</small>}
        </div>
      ))}
      <form action={formAction} ref={formRef}>
        <input type="text" name="message" placeholder="Hello!" />
        <button type="submit">Send</button>
      </form>
    </>
  );
}

export default function App() {
  const [messages, setMessages] = useState([
    { text: "Hello there!", sending: false, key: 1 }
  ]);
  async function sendMessage(formData) {
    const sentMessage = await deliverMessage(formData.get("message"));
    setMessages((messages) => [...messages, { text: sentMessage }]);
  }
  return <Thread messages={messages} sendMessage={sendMessage} />;
}

----------------------------------------

TITLE: Async Components with Cross-Boundary Promise Handling
DESCRIPTION: Shows advanced usage of async components with promise handling across server and client boundaries using Suspense and the use hook.

LANGUAGE: javascript
CODE:
// Server Component
import db from './database';

async function Page({id}) {
  const note = await db.notes.get(id);
  const commentsPromise = db.comments.get(note.id);
  return (
    <div>
      {note}
      <Suspense fallback={<p>Loading Comments...</p>}>
        <Comments commentsPromise={commentsPromise} />
      </Suspense>
    </div>
  );
}

LANGUAGE: javascript
CODE:
// Client Component
"use client";
import {use} from 'react';

function Comments({commentsPromise}) {
  const comments = use(commentsPromise);
  return comments.map(commment => <p>{comment}</p>);
}

----------------------------------------

TITLE: Preloading an ESM Module in React
DESCRIPTION: This snippet demonstrates how to use the preloadModule function to eagerly fetch an ESM module. It specifies the module URL and the 'as' option set to 'script'.

LANGUAGE: javascript
CODE:
preloadModule("https://example.com/module.js", {as: "script"});

----------------------------------------

TITLE: Using camelCase in JSX Attributes
DESCRIPTION: This snippet demonstrates the use of camelCase for attribute names in JSX, which is different from HTML. It shows how 'class' becomes 'className' and explains why this change is necessary in React components.

LANGUAGE: jsx
CODE:
<img 
  src="https://i.imgur.com/yXOvdOSs.jpg" 
  alt="Hedy Lamarr" 
  className="photo"
/>

----------------------------------------

TITLE: Basic Suspense Usage with Fallback
DESCRIPTION: Shows basic usage of Suspense component with a loading fallback while content loads

LANGUAGE: jsx
CODE:
<Suspense fallback={<Loading />}>
  <SomeComponent />
</Suspense>

----------------------------------------

TITLE: Custom HTML Element Usage in React
DESCRIPTION: Example showing how to use custom HTML elements in React with different prop handling compared to built-in elements. Custom elements serialize all props to strings and use attributes like 'class' instead of 'className'.

LANGUAGE: JSX
CODE:
<my-element class="my-class" for="my-input">

----------------------------------------

TITLE: Testing Component Rendering with act()
DESCRIPTION: Example showing how to test component rendering using act() with proper setup and assertions.

LANGUAGE: javascript
CODE:
import {act} from 'react';
import ReactDOMClient from 'react-dom/client';
import Counter from './Counter';

it('can render and update a counter', async () => {
  container = document.createElement('div');
  document.body.appendChild(container);
  
  await act(() => {
    ReactDOMClient.createRoot(container).render(<Counter />);
  });
  
  const button = container.querySelector('button');
  const label = container.querySelector('p');
  expect(label.textContent).toBe('You clicked 0 times');
  expect(document.title).toBe('You clicked 0 times');
});

----------------------------------------

TITLE: Basic Usage of <script> Component in React
DESCRIPTION: Demonstrates how to use the <script> component for both inline and external scripts in React.

LANGUAGE: jsx
CODE:
<script> alert("hi!") </script>
<script src="script.js" />

----------------------------------------

TITLE: Context Provider Component Implementation
DESCRIPTION: Shows how to provide context values to child components using Context.Provider

LANGUAGE: javascript
CODE:
export default function Section({ level, children }) {
  return (
    <section className="section">
      <LevelContext value={level}>
        {children}
      </LevelContext>
    </section>
  );
}

----------------------------------------

TITLE: React Clock Component with Time Props
DESCRIPTION: Illustrates React's selective DOM updates by showing a clock component that receives time updates through props while maintaining input state.

LANGUAGE: jsx
CODE:
export default function Clock({ time }) {
  return (
    <>
      <h1>{time}</h1>
      <input />
    </>
  );
}

----------------------------------------

TITLE: Interactive Counter with 'use client'
DESCRIPTION: Implementation of an interactive counter component that requires client-side execution due to state management and event handlers.

LANGUAGE: javascript
CODE:
'use client';

import { useState } from 'react';

export default function Counter({initialValue = 0}) {
  const [countValue, setCountValue] = useState(initialValue);
  const increment = () => setCountValue(countValue + 1);
  const decrement = () => setCountValue(countValue - 1);
  return (
    <>
      <h2>Count Value: {countValue}</h2>
      <button onClick={increment}>+1</button>
      <button onClick={decrement}>-1</button>
    </>
  );
}

----------------------------------------

TITLE: Legacy Context Consumer Usage
DESCRIPTION: Shows the older Consumer pattern for reading context values, though useContext is now preferred.

LANGUAGE: javascript
CODE:
function Button() {
  return (
    <ThemeContext.Consumer>
      {theme => (
        <button className={theme} />
      )}
    </ThemeContext.Consumer>
  );
}

----------------------------------------

TITLE: Importing and Using prefetchDNS in a React Component
DESCRIPTION: Shows how to import the prefetchDNS function from react-dom and use it within a React component. This example demonstrates its usage during component rendering.

LANGUAGE: javascript
CODE:
import { prefetchDNS } from 'react-dom';

function AppRoot() {
  prefetchDNS("https://example.com");
  // ...
}

----------------------------------------

TITLE: Passing Props to React Components
DESCRIPTION: Illustrates how to pass data to child components using props. The Avatar component receives person and size props from its parent.

LANGUAGE: jsx
CODE:
export default function Profile() {
  return (
    <Card>
      <Avatar
        size={100}
        person={{
          name: 'Katsuko Saruhashi',
          imageId: 'YfeOqp2'
        }}
      />
    </Card>
  );
}

function Avatar({ person, size }) {
  return (
    <img
      className="avatar"
      src={getImageUrl(person)}
      alt={person.name}
      width={size}
      height={size}
    />
  );
}

----------------------------------------

TITLE: Basic useLayoutEffect Usage in React
DESCRIPTION: Demonstrates how to use useLayoutEffect to measure layout before browser repaint. The snippet shows a Tooltip component that measures its height and adjusts its position accordingly.

LANGUAGE: javascript
CODE:
import { useState, useRef, useLayoutEffect } from 'react';

function Tooltip() {
  const ref = useRef(null);
  const [tooltipHeight, setTooltipHeight] = useState(0);

  useLayoutEffect(() => {
    const { height } = ref.current.getBoundingClientRect();
    setTooltipHeight(height);
  }, []);
  // ...
}

----------------------------------------

TITLE: Reading Context with use API
DESCRIPTION: Example showing how to read context values using the use API within a component.

LANGUAGE: jsx
CODE:
import { use } from 'react';

function MessageComponent({ messagePromise }) {
  const message = use(messagePromise);
  const theme = use(ThemeContext);
  // ...

----------------------------------------

TITLE: Basic cloneElement Usage
DESCRIPTION: Example showing how to use cloneElement to create a new React element with modified props from an existing element.

LANGUAGE: javascript
CODE:
const clonedElement = cloneElement(
  <Row title="Cabbage">
    Hello
  </Row>,
  { isHighlighted: true },
  'Goodbye'
);

console.log(clonedElement); // <Row title="Cabbage" isHighlighted={true}>Goodbye</Row>

----------------------------------------

TITLE: Basic preinit Usage in React
DESCRIPTION: Basic example of using preinit to fetch a script resource

LANGUAGE: javascript
CODE:
preinit("https://example.com/script.js", {as: "script"});

----------------------------------------

TITLE: Passing Strings in JSX (React)
DESCRIPTION: This snippet demonstrates how to pass string attributes to JSX elements using quotes. It creates an Avatar component that renders an image with className, src, and alt attributes.

LANGUAGE: jsx
CODE:
export default function Avatar() {
  return (
    <img
      className="avatar"
      src="https://i.imgur.com/7vQD0fPs.jpg"
      alt="Gregorio Y. Zara"
    />
  );
}

----------------------------------------

TITLE: Declaring and Using an Effect in React
DESCRIPTION: This snippet shows how to import and use the useEffect Hook to declare an Effect in a React component. The Effect runs after every render by default.

LANGUAGE: JavaScript
CODE:
import { useEffect } from 'react';

function MyComponent() {
  useEffect(() => {
    // Code here will run after *every* render
  });
  return <div />;
}

----------------------------------------

TITLE: Initializing and Using DOM Refs
DESCRIPTION: Basic example showing how to initialize a ref and access a DOM node using the useRef Hook

LANGUAGE: jsx
CODE:
import { useRef } from 'react';

const myRef = useRef(null);

<div ref={myRef}>

----------------------------------------

TITLE: Updating State Based on Previous State in an Effect
DESCRIPTION: When updating state based on previous state in an Effect, use the state updater function to avoid unnecessary Effect re-runs.

LANGUAGE: JavaScript
CODE:
useEffect(() => {
  const intervalId = setInterval(() => {
    setCount(c => c + 1); // ✅ Pass a state updater
  }, 1000);
  return () => clearInterval(intervalId);
}, []); // ✅ Now count is not a dependency

----------------------------------------

TITLE: Importing prerenderToNodeStream API for Node.js Streams in React
DESCRIPTION: The prerenderToNodeStream API renders a React tree to static HTML using a Node.js Stream. It's specifically designed for environments that support Node.js Streams.

LANGUAGE: javascript
CODE:
import { prerenderToNodeStream } from 'react-dom/static';

----------------------------------------

TITLE: Stopping Event Propagation in React
DESCRIPTION: This snippet demonstrates how to stop event propagation in React using e.stopPropagation(). It prevents the event from bubbling up to parent components, allowing for more controlled event handling.

LANGUAGE: jsx
CODE:
function Button({ onClick, children }) {
  return (
    <button onClick={e => {
      e.stopPropagation();
      onClick();
    }}>
      {children}
    </button>
  );
}

export default function Toolbar() {
  return (
    <div className="Toolbar" onClick={() => {
      alert('You clicked on the toolbar!');
    }}>
      <Button onClick={() => alert('Playing!')}>
        Play Movie
      </Button>
      <Button onClick={() => alert('Uploading!')}>
        Upload Image
      </Button>
    </div>
  );
}

----------------------------------------

TITLE: Effect Synchronization Start and Stop
DESCRIPTION: Code showing how an Effect specifies its synchronization logic through its body and cleanup function

LANGUAGE: jsx
CODE:
// Start synchronizing
const connection = createConnection(serverUrl, roomId);
connection.connect();

// Stop synchronizing (cleanup)
return () => {
  connection.disconnect();
};

----------------------------------------

TITLE: Building a Suspense-Enabled Router
DESCRIPTION: Example showing how to implement a basic router using useTransition for navigation state updates.

LANGUAGE: javascript
CODE:
function Router() {
  const [page, setPage] = useState('/');
  const [isPending, startTransition] = useTransition();

  function navigate(url) {
    startTransition(() => {
      setPage(url);
    });
  }
  // ...
}

----------------------------------------

TITLE: Basic useActionState Hook Implementation
DESCRIPTION: Demonstrates the basic usage of useActionState Hook with a simple increment function in a form component.

LANGUAGE: javascript
CODE:
import { useActionState } from "react";

async function increment(previousState, formData) {
  return previousState + 1;
}

function StatefulForm({}) {
  const [state, formAction] = useActionState(increment, 0);
  return (
    <form>
      {state}
      <button formAction={formAction}>Increment</button>
    </form>
  )
}

----------------------------------------

TITLE: Importing and Using useDebugValue in React
DESCRIPTION: This snippet demonstrates how to import and use the useDebugValue Hook in a custom React Hook. It shows how to add a debug label that will be displayed in React DevTools.

LANGUAGE: javascript
CODE:
import { useDebugValue } from 'react';

function useOnlineStatus() {
  // ...
  useDebugValue(isOnline ? 'Online' : 'Offline');
  // ...
}

----------------------------------------

TITLE: Updating Objects in React State
DESCRIPTION: Demonstrates how to correctly update nested objects in state using the spread operator to create new object copies.

LANGUAGE: jsx
CODE:
function handleNameChange(e) {
  setPerson({
    ...person,
    name: e.target.value
  });
}

function handleTitleChange(e) {
  setPerson({
    ...person,
    artwork: {
      ...person.artwork,
      title: e.target.value
    }
  });
}

----------------------------------------

TITLE: Embedding JavaScript Expressions in JSX (React)
DESCRIPTION: This snippet illustrates how to embed JavaScript expressions within JSX using curly braces. It shows a TodoList component that includes a dynamically generated heading with a name variable.

LANGUAGE: jsx
CODE:
export default function TodoList() {
  const name = 'Gregorio Y. Zara';
  return (
    <h1>{name}'s To Do List</h1>
  );
}

----------------------------------------

TITLE: Conditionally Using captureOwnerStack in Development
DESCRIPTION: Demonstrates how to conditionally use captureOwnerStack in files that are bundled for both development and production, using a namespace import.

LANGUAGE: javascript
CODE:
// Don't use named imports of `captureOwnerStack` in files that are bundled for development and production.
import {captureOwnerStack} from 'react';
// Use a namespace import instead and access `captureOwnerStack` conditionally.
import * as React from 'react';

if (process.env.NODE_ENV !== 'production') {
  const ownerStack = React.captureOwnerStack();
  console.log('Owner Stack', ownerStack);
}

----------------------------------------

TITLE: Implementing Data Protection with taintObjectReference in Database Queries
DESCRIPTION: Shows how to protect user data fetched from a database by tainting the user object to prevent it from being passed to client components

LANGUAGE: javascript
CODE:
import {experimental_taintObjectReference} from 'react';

export async function getUser(id) {
  const user = await db`SELECT * FROM users WHERE id = ${id}`;
  experimental_taintObjectReference(
    'Do not pass the entire user object to the client. ' +
      'Instead, pick off the specific properties you need for this use case.',
    user,
  );
  return user;
}

----------------------------------------

TITLE: Installing ESLint with React Configuration
DESCRIPTION: Command to install ESLint with the recommended configuration for React projects. Requires Node.js to be installed.

LANGUAGE: bash
CODE:
npm install eslint-config-react-app

----------------------------------------

TITLE: Transforming Children with Children.map
DESCRIPTION: Example showing how to transform child elements by wrapping each one in a container div

LANGUAGE: JSX
CODE:
const mappedChildren = Children.map(children, child =>
  <div className="Row">
    {child}
  </div>
);

----------------------------------------

TITLE: Import and Usage Example
DESCRIPTION: Shows how to import renderToStaticMarkup from react-dom/server and use it to render a component.

LANGUAGE: javascript
CODE:
import { renderToStaticMarkup } from 'react-dom/server';

const html = renderToStaticMarkup(<Page />);

----------------------------------------

TITLE: Tainting a Unique Value in React Server Components
DESCRIPTION: Demonstrates how to use taintUniqueValue to prevent a secret key from being passed to Client Components. The function takes an error message, a lifetime object, and the value to be tainted.

LANGUAGE: javascript
CODE:
import {experimental_taintUniqueValue} from 'react';

experimental_taintUniqueValue(
  'Do not pass secret keys to the client.',
  process,
  process.env.SECRET_KEY
);

----------------------------------------

TITLE: Overriding context for a part of the tree
DESCRIPTION: Nest context providers to override context values for specific parts of the component tree.

LANGUAGE: jsx
CODE:
<ThemeContext.Provider value="dark">
  ...
  <ThemeContext.Provider value="light">
    <Footer />
  </ThemeContext.Provider>
  ...
</ThemeContext.Provider>

----------------------------------------

TITLE: Using useEffect Hook in React
DESCRIPTION: Demonstrates the useEffect Hook for connecting a component to external systems. The example shows setting up and tearing down a chat room connection based on a 'roomId' prop.

LANGUAGE: javascript
CODE:
function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(roomId);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]);
  // ...


----------------------------------------

TITLE: Client-Side Hydration Setup
DESCRIPTION: Example showing how to set up client-side hydration to make server-rendered content interactive.

LANGUAGE: javascript
CODE:
import { hydrateRoot } from 'react-dom/client';
import App from './App.js';

hydrateRoot(document, <App />);

----------------------------------------

TITLE: Basic useMemo Usage
DESCRIPTION: Basic example showing how to use useMemo to cache a calculation result

LANGUAGE: javascript
CODE:
const cachedValue = useMemo(calculateValue, dependencies)

----------------------------------------

TITLE: Click Counter with useRef - React
DESCRIPTION: Implementation of a click counter using useRef to store count without triggering re-renders.

LANGUAGE: javascript
CODE:
import { useRef } from 'react';

export default function Counter() {
  let ref = useRef(0);

  function handleClick() {
    ref.current = ref.current + 1;
    alert('You clicked ' + ref.current + ' times!');
  }

  return (
    <button onClick={handleClick}>
      Click me!
    </button>
  );
}

----------------------------------------

TITLE: Using startTransition with State Updates
DESCRIPTION: Example demonstrating how to wrap state updates in startTransition to mark them as non-blocking transitions.

LANGUAGE: javascript
CODE:
function selectTab(nextTab) {
  startTransition(() => {
    setTab(nextTab);
  });
}

----------------------------------------

TITLE: Basic Progress Element Usage in React
DESCRIPTION: Simple example of rendering a progress indicator with a value of 0.5 (50% complete).

LANGUAGE: javascript
CODE:
<progress value={0.5} />

----------------------------------------

TITLE: Declaring Multiple Refs in React Class Component
DESCRIPTION: Demonstrates declaring multiple refs in a class component using createRef.

LANGUAGE: javascript
CODE:
import { createRef, Component } from 'react';

class MyComponent extends Component {
  intervalRef = createRef();
  inputRef = createRef();
  // ...

----------------------------------------

TITLE: Displaying Different Content on Server and Client
DESCRIPTION: Use state and Effect to conditionally render different content on the server and client when necessary.

LANGUAGE: JavaScript
CODE:
function MyComponent() {
  const [didMount, setDidMount] = useState(false);

  useEffect(() => {
    setDidMount(true);
  }, []);

  if (didMount) {
    // ... return client-only JSX ...
  }  else {
    // ... return initial JSX ...
  }
}

----------------------------------------

TITLE: Importing and Using PureComponent in React
DESCRIPTION: Demonstrates how to import PureComponent from React and use it to create a class component that optimizes re-renders based on prop changes.

LANGUAGE: jsx
CODE:
import { PureComponent } from 'react';

class Greeting extends PureComponent {
  render() {
    return <h1>Hello, {this.props.name}!</h1>;
  }
}

----------------------------------------

TITLE: Basic Meta Tag Implementation in React
DESCRIPTION: Demonstrates basic usage of the meta component for adding keywords metadata to a document.

LANGUAGE: javascript
CODE:
<meta name="keywords" content="React, JavaScript, semantic markup, html" />

----------------------------------------

TITLE: Declaring Multiple Refs - React
DESCRIPTION: Example showing how to declare multiple refs in a component for different purposes.

LANGUAGE: javascript
CODE:
import { useRef } from 'react';

function MyComponent() {
  const intervalRef = useRef(0);
  const inputRef = useRef(null);
  // ...

----------------------------------------

TITLE: Fragment with Variable Assignment
DESCRIPTION: Demonstrates assigning multiple elements wrapped in a Fragment to a variable for use in a component.

LANGUAGE: jsx
CODE:
function CloseDialog() {
  const buttons = (
    <>
      <OKButton />
      <CancelButton />
    </>
  );
  return (
    <AlertDialog buttons={buttons}>
      Are you sure you want to leave this page?
    </AlertDialog>
  );
}

----------------------------------------

TITLE: Defining a PureComponent Class in React
DESCRIPTION: Shows how to create a class component that extends PureComponent to optimize rendering performance by skipping unnecessary re-renders.

LANGUAGE: jsx
CODE:
class Greeting extends PureComponent {
  render() {
    return <h1>Hello, {this.props.name}!</h1>;
  }
}

----------------------------------------

TITLE: Basic Usage of <link> Component in React
DESCRIPTION: Demonstrates how to use the <link> component to reference an icon file. This snippet shows the simplest form of using <link> in a React application.

LANGUAGE: javascript
CODE:
<link rel="icon" href="favicon.ico" />

----------------------------------------

TITLE: Basic use API Implementation
DESCRIPTION: Basic example of using the use API to read a value from a resource.

LANGUAGE: javascript
CODE:
const value = use(resource);

----------------------------------------

TITLE: Fragment with Text Elements
DESCRIPTION: Shows how to use Fragment to group text and component elements together.

LANGUAGE: jsx
CODE:
function DateRangePicker({ start, end }) {
  return (
    <>
      From
      <DatePicker date={start} />
      to
      <DatePicker date={end} />
    </>
  );
}

----------------------------------------

TITLE: Fragment with Keys in Lists
DESCRIPTION: Demonstrates using the explicit Fragment syntax when rendering lists that require key props.

LANGUAGE: jsx
CODE:
function Blog() {
  return posts.map(post =>
    <Fragment key={post.id}>
      <PostTitle title={post.title} />
      <PostBody body={post.body} />
    </Fragment>
  );
}

----------------------------------------

TITLE: Using prefetchDNS in a React Event Handler
DESCRIPTION: Demonstrates how to use prefetchDNS in an event handler before transitioning to a new page or state. This allows the DNS lookup process to start earlier than if called during the rendering of the new page or state.

LANGUAGE: javascript
CODE:
import { prefetchDNS } from 'react-dom';

function CallToAction() {
  const onClick = () => {
    prefetchDNS('http://example.com');
    startWizard();
  }
  return (
    <button onClick={onClick}>Start Wizard</button>
  );
}

----------------------------------------

TITLE: List Component with cloneElement
DESCRIPTION: Implementation of a List component that uses cloneElement to add highlighting functionality to child Row components.

LANGUAGE: javascript
CODE:
export default function List({ children }) {
  const [selectedIndex, setSelectedIndex] = useState(0);
  return (
    <div className="List">
      {Children.map(children, (child, index) =>
        cloneElement(child, {
          isHighlighted: index === selectedIndex 
        })
      )}
    </div>
  );

----------------------------------------

TITLE: useCallback in Component
DESCRIPTION: Shows how to use useCallback within a React component to optimize a callback function.

LANGUAGE: javascript
CODE:
import { useCallback } from 'react';

export default function ProductPage({ productId, referrer, theme }) {
  const handleSubmit = useCallback((orderDetails) => {
    post('/product/' + productId + '/buy', {
      referrer,
      orderDetails,
    });
  }, [productId, referrer]);

  return (
    <div className={theme}>
      <ShippingForm onSubmit={handleSubmit} />
    </div>
  );
}

----------------------------------------

TITLE: Migrating to React 18 createRoot API
DESCRIPTION: Examples showing how to update client rendering code from ReactDOM.render to the new createRoot API, including changes to unmounting and render callbacks.

LANGUAGE: javascript
CODE:
// Before
import { render } from 'react-dom';
const container = document.getElementById('app');
render(<App tab="home" />, container);

// After
import { createRoot } from 'react-dom/client';
const container = document.getElementById('app');
const root = createRoot(container);
root.render(<App tab="home" />);

LANGUAGE: javascript
CODE:
// Before
unmountComponentAtNode(container);

// After
root.unmount();

----------------------------------------

TITLE: Dynamic Title Implementation - Correct
DESCRIPTION: Proper implementation of dynamic title using template literals to ensure a single string is passed as children.

LANGUAGE: javascript
CODE:
<title>{`Results page ${pageNumber}`}</title>

----------------------------------------

TITLE: Render Prop Alternative
DESCRIPTION: Alternative implementation using render props pattern instead of cloneElement for better data flow transparency.

LANGUAGE: javascript
CODE:
<List
  items={products}
  renderItem={(product, isHighlighted) =>
    <Row
      key={product.id}
      title={product.title}
      isHighlighted={isHighlighted}
    />
  }
/>

----------------------------------------

TITLE: Basic Usage of useImperativeHandle in React
DESCRIPTION: Demonstrates the basic syntax and usage of the useImperativeHandle Hook to customize a ref handle in a React component.

LANGUAGE: javascript
CODE:
import { useImperativeHandle } from 'react';

function MyInput({ ref }) {
  useImperativeHandle(ref, () => {
    return {
      // ... your methods ...
    };
  }, []);
  // ...

----------------------------------------

TITLE: forEach Example with Children
DESCRIPTION: Example showing how to iterate over children with Children.forEach

LANGUAGE: JSX
CODE:
function SeparatorList({ children }) {
  const result = [];
  Children.forEach(children, (child, index) => {
    result.push(child);
    result.push(<hr key={index} />);
  });
  // ...
}

----------------------------------------

TITLE: Preconnect in Event Handlers
DESCRIPTION: Example showing how to use preconnect within an event handler to establish connections before state transitions.

LANGUAGE: javascript
CODE:
import { preconnect } from 'react-dom';

function CallToAction() {
  const onClick = () => {
    preconnect('http://example.com');
    startWizard();
  }
  return (
    <button onClick={onClick}>Start Wizard</button>
  );
}

----------------------------------------

TITLE: Complex Element Creation with createElement in React
DESCRIPTION: Illustrates a more complex use of createElement, creating a Greeting component with multiple children, including nested elements.

LANGUAGE: javascript
CODE:
import { createElement } from 'react';

function Greeting({ name }) {
  return createElement(
    'h1',
    { className: 'greeting' },
    'Hello ',
    createElement('i', null, name),
    '. Welcome!'
  );
}

----------------------------------------

TITLE: Nested Profilers Implementation
DESCRIPTION: Example showing how to nest Profiler components to measure nested component hierarchies.

LANGUAGE: javascript
CODE:
<App>
  <Profiler id="Sidebar" onRender={onRender}>
    <Sidebar />
  </Profiler>
  <Profiler id="Content" onRender={onRender}>
    <Content>
      <Profiler id="Editor" onRender={onRender}>
        <Editor />
      </Profiler>
      <Preview />
    </Content>
  </Profiler>
</App>

----------------------------------------

TITLE: Counting Children Example
DESCRIPTION: Example showing how to count child elements using Children.count

LANGUAGE: JSX
CODE:
function RowList({ children }) {
  return (
    <>
      <h1>Total rows: {Children.count(children)}</h1>
      ...
    </>
  );
}

----------------------------------------

TITLE: Importing and Using preinitModule in React Component
DESCRIPTION: This example shows how to import the preinitModule function from react-dom and use it within a React component. It demonstrates preloading a module during component rendering.

LANGUAGE: javascript
CODE:
import { preinitModule } from 'react-dom';

function AppRoot() {
  preinitModule("https://example.com/module.js", {as: "script"});
  // ...
}

----------------------------------------

TITLE: Complete Example of App Using createElement in React
DESCRIPTION: A full example showing how to create and render a Greeting component using createElement throughout the application.

LANGUAGE: javascript
CODE:
import { createElement } from 'react';

function Greeting({ name }) {
  return createElement(
    'h1',
    { className: 'greeting' },
    'Hello ',
    createElement('i', null, name),
    '. Welcome!'
  );
}

export default function App() {
  return createElement(
    Greeting,
    { name: 'Taylor' }
  );
}

----------------------------------------

TITLE: Basic Profiler Implementation in React
DESCRIPTION: Basic example of wrapping a React component with Profiler to measure rendering performance.

LANGUAGE: javascript
CODE:
<Profiler id="App" onRender={onRender}>
  <App />
</Profiler>

----------------------------------------

TITLE: Memoizing Chat Connection Options
DESCRIPTION: Example showing how to memoize an options object used in an Effect

LANGUAGE: jsx
CODE:
const options = useMemo(() => {
  return {
    serverUrl: 'https://localhost:1234',
    roomId: roomId
  };
}, [roomId]);

----------------------------------------

TITLE: Rendering an Inline Script in React Component
DESCRIPTION: Illustrates how to include an inline script within a React component using the <script> tag.

LANGUAGE: jsx
CODE:
function Tracking() {
  return (
    <script>
      ga('send', 'pageview');
    </script>
  );
}

----------------------------------------

TITLE: Using isValidElement to Check React Elements in JavaScript
DESCRIPTION: This snippet demonstrates how to use the isValidElement function to check if various values are valid React elements. It shows examples of both valid React elements and non-element values.

LANGUAGE: javascript
CODE:
import { isValidElement, createElement } from 'react';

// ✅ React elements
console.log(isValidElement(<p />)); // true
console.log(isValidElement(createElement('p'))); // true

// ❌ Not React elements
console.log(isValidElement(25)); // false
console.log(isValidElement('Hello')); // false
console.log(isValidElement({ age: 42 })); // false

----------------------------------------

TITLE: Profiler with Specific Component Measurement
DESCRIPTION: Example showing how to profile a specific component (Sidebar) while leaving other components unmonitored.

LANGUAGE: javascript
CODE:
<App>
  <Profiler id="Sidebar" onRender={onRender}>
    <Sidebar />
  </Profiler>
  <PageContent />
</App>

----------------------------------------

TITLE: Controlling a Textarea with React State
DESCRIPTION: Illustrates how to create a controlled textarea component using React state and the onChange event handler.

LANGUAGE: jsx
CODE:
function NewPost() {
  const [postContent, setPostContent] = useState('');
  return (
    <textarea
      value={postContent}
      onChange={e => setPostContent(e.target.value)}
    />
  );
}

----------------------------------------

TITLE: Basic Inline Style Usage in React
DESCRIPTION: This snippet shows the basic usage of the <style> component to add an inline CSS stylesheet in React. It sets the color of all paragraph elements to red.

LANGUAGE: jsx
CODE:
<style>{` p { color: red; } `}</style>

----------------------------------------

TITLE: Using captureOwnerStack in React Component
DESCRIPTION: Demonstrates how to use captureOwnerStack within a React component to log the current Owner Stack in development.

LANGUAGE: javascript
CODE:
import * as React from 'react';

function Component() {
  if (process.env.NODE_ENV !== 'production') {
    const ownerStack = React.captureOwnerStack();
    console.log(ownerStack);
  }
}

----------------------------------------

TITLE: Class Component with State Management
DESCRIPTION: Shows state management in a class component using setState.

LANGUAGE: jsx
CODE:
class Counter extends Component {
  state = {
    age: 42,
  };

  handleAgeChange = () => {
    this.setState({
      age: this.state.age + 1
    });
  };

  render() {
    return (
      <>
        <button onClick={this.handleAgeChange}>
          Increment age
        </button>
        <p>You are {this.state.age}.</p>
      </>
    );
  }
}

----------------------------------------

TITLE: Rendering a Basic Textarea in React
DESCRIPTION: Demonstrates how to render a simple textarea element using React JSX syntax.

LANGUAGE: jsx
CODE:
<textarea />

----------------------------------------

TITLE: Item-Specific Metadata Implementation in React
DESCRIPTION: Shows how to use meta tags with itemProp for annotating specific document sections with metadata.

LANGUAGE: javascript
CODE:
<section itemScope>
  <h3>Annotating specific items</h3>
  <meta itemProp="description" content="API reference for using <meta> with itemProp" />
  <p>...</p>
</section>

----------------------------------------

TITLE: Enhancing Custom Error Overlay with captureOwnerStack
DESCRIPTION: Shows how to use captureOwnerStack to enhance a custom error overlay by intercepting console.error calls and including the Owner Stack information.

LANGUAGE: javascript
CODE:
import { captureOwnerStack } from "react";
import { instrumentedConsoleError } from "./errorOverlay";

const originalConsoleError = console.error;
console.error = function patchedConsoleError(...args) {
  originalConsoleError.apply(console, args);
  const ownerStack = captureOwnerStack();
  onConsoleError({
    // Keep in mind that in a real application, console.error can be
    // called with multiple arguments which you should account for.
    consoleMessage: args[0],
    ownerStack,
  });
};

----------------------------------------

TITLE: Multiple React Roots Example
DESCRIPTION: Example showing how to create multiple React roots for different parts of a page

LANGUAGE: javascript
CODE:
import { createRoot } from 'react-dom/client';

const navDomNode = document.getElementById('navigation');
const navRoot = createRoot(navDomNode);
navRoot.render(<Navigation />);

const commentDomNode = document.getElementById('comments');
const commentRoot = createRoot(commentDomNode);
commentRoot.render(<Comments />);

----------------------------------------

TITLE: Controlled Select Component with State Management
DESCRIPTION: Demonstrates how to create a controlled select component using React state, including handling multiple selections and form submissions.

LANGUAGE: javascript
CODE:
export default function FruitPicker() {
  const [selectedFruit, setSelectedFruit] = useState('orange');
  const [selectedVegs, setSelectedVegs] = useState(['corn', 'tomato']);
  return (
    <select
      value={selectedFruit}
      onChange={e => setSelectedFruit(e.target.value)}
    >
      <option value="apple">Apple</option>
      <option value="banana">Banana</option>
      <option value="orange">Orange</option>
    </select>
  );
}

----------------------------------------

TITLE: Linking Stylesheet with Precedence in React
DESCRIPTION: Demonstrates how to link a stylesheet with a specified precedence. The component will suspend while the stylesheet is loading. The precedence prop is required for React's special treatment of stylesheets.

LANGUAGE: javascript
CODE:
export default function SiteMapPage() {
  return (
    <ShowRenderedHTML>
      <link rel="stylesheet" href="sitemap.css" precedence="medium" />
      <p>...</p>
    </ShowRenderedHTML>
  );
}

----------------------------------------

TITLE: Basic React Div Component Usage
DESCRIPTION: Example showing basic usage of a div component with className prop in React

LANGUAGE: JavaScript
CODE:
<div className="wrapper">Some content</div>

----------------------------------------

TITLE: Preloading Responsive Image
DESCRIPTION: Demonstrates preloading an image with responsive sizing options using srcset and sizes attributes.

LANGUAGE: javascript
CODE:
import { preload } from 'react-dom';

function AppRoot() {
  preload("/banner.png", {
    as: "image",
    imageSrcSet: "/banner512.png 512w, /banner1024.png 1024w",
    imageSizes: "(max-width: 512px) 512px, 1024px",
  });
  return ...;
}

----------------------------------------

TITLE: Rendering an External Script in React Component
DESCRIPTION: Shows how to include an external script in a React component, demonstrating the use of async and onLoad props.

LANGUAGE: jsx
CODE:
function Map({lat, long}) {
  return (
    <>
      <script async src="map-api.js" onLoad={() => console.log('script loaded')} />
      <div id="map" data-lat={lat} data-long={long} />
    </>
  );
}

----------------------------------------

TITLE: Basic Title Component Usage in React
DESCRIPTION: Simple implementation of the title component to set document title.

LANGUAGE: javascript
CODE:
<title>My Blog</title>

----------------------------------------

TITLE: Linking Related Resources in React Component
DESCRIPTION: Shows how to use <link> components within a React component to add metadata like favicon and pingback URL. React will place these in the document <head> regardless of where they are rendered in the component tree.

LANGUAGE: javascript
CODE:
export default function BlogPage() {
  return (
    <ShowRenderedHTML>
      <link rel="icon" href="favicon.ico" />
      <link rel="pingback" href="http://www.example.com/xmlrpc.php" />
      <h1>My Blog</h1>
      <p>...</p>
    </ShowRenderedHTML>
  );
}

----------------------------------------

TITLE: Initializing preinitModule Function in React
DESCRIPTION: This snippet demonstrates how to use the preinitModule function to eagerly fetch and evaluate an ESM module. It takes a URL and options as parameters.

LANGUAGE: javascript
CODE:
preinitModule("https://example.com/module.js", {as: "script"});

----------------------------------------

TITLE: Input Types Example
DESCRIPTION: Demonstrates different types of input elements including text, checkbox and radio buttons.

LANGUAGE: javascript
CODE:
export default function MyForm() {
  return (
    <>
      <label>
        Text input: <input name="myInput" />
      </label>
      <hr />
      <label>
        Checkbox: <input type="checkbox" name="myCheckbox" />
      </label>
      <hr />
      <p>
        Radio buttons:
        <label>
          <input type="radio" name="myRadio" value="option1" />
          Option 1
        </label>
        <label>
          <input type="radio" name="myRadio" value="option2" />
          Option 2
        </label>
        <label>
          <input type="radio" name="myRadio" value="option3" />
          Option 3
        </label>
      </p>
    </>
  );
}

----------------------------------------

TITLE: Rendering a Custom Component with createElement in React
DESCRIPTION: Demonstrates how to use createElement to render a custom React component, passing props to it.

LANGUAGE: javascript
CODE:
export default function App() {
  return createElement(Greeting, { name: 'Taylor' });
}

----------------------------------------

TITLE: Deduplicated Stylesheet Rendering in React
DESCRIPTION: Shows how React deduplicates stylesheet links when the same stylesheet is rendered from multiple components. Only a single <link> will be placed in the document head.

LANGUAGE: javascript
CODE:
export default function HomePage() {
  return (
    <ShowRenderedHTML>
      <Component />
      <Component />
      ...
    </ShowRenderedHTML>
  );
}

function Component() {
  return <link rel="stylesheet" href="styles.css" precedence="medium" />;
}

----------------------------------------

TITLE: Basic Select Options Implementation in React
DESCRIPTION: Demonstrates the basic implementation of options within a select element. Shows how to create selectable options with values.

LANGUAGE: javascript
CODE:
<select>
  <option value="someOption">Some option</option>
  <option value="otherOption">Other option</option>
</select>

----------------------------------------

TITLE: Progress Component Implementation Examples
DESCRIPTION: Demonstrates various ways to use the progress element, including different value states, max property usage, and indeterminate state.

LANGUAGE: javascript
CODE:
export default function App() {
  return (
    <>
      <progress value={0} />
      <progress value={0.5} />
      <progress value={0.7} />
      <progress value={75} max={100} />
      <progress value={1} />
      <progress value={null} />
    </>
  );
}

LANGUAGE: css
CODE:
progress { display: block; }

----------------------------------------

TITLE: Basic createRef Usage in React Class Component
DESCRIPTION: Shows the basic syntax for creating a ref using createRef in a class component.

LANGUAGE: javascript
CODE:
class MyInput extends Component {
  inputRef = createRef();
  // ...
}

----------------------------------------

TITLE: Annotating Specific Items with <link> in React
DESCRIPTION: Demonstrates how to use the <link> component with the itemProp prop to annotate specific items within the document. In this case, React will not place these annotations in the document <head>.

LANGUAGE: javascript
CODE:
<section itemScope>
  <h3>Annotating specific items</h3>
  <link itemProp="author" href="http://example.com/" />
  <p>...</p>
</section>

----------------------------------------

TITLE: Incorrect Hook Passing Pattern
DESCRIPTION: Shows an anti-pattern where Hooks are passed as props to components instead of being called directly.

LANGUAGE: javascript
CODE:
function ChatInput() {
  return <Button useData={useDataWithLogging} /> // 🔴 Bad: don't pass Hooks as props
}

----------------------------------------

TITLE: Basic Preconnect Usage in React
DESCRIPTION: Simple example of using the preconnect function to establish a connection to a server.

LANGUAGE: javascript
CODE:
preconnect("https://example.com");

----------------------------------------

TITLE: Basic act() Usage with Async Function
DESCRIPTION: Example showing the basic usage pattern of act() with async/await syntax for testing React components.

LANGUAGE: javascript
CODE:
it ('renders with button disabled', async () => {
  await act(async () => {
    root.render(<TestComponent />)
  });
  expect(container.querySelector('button')).toBeDisabled();
});

----------------------------------------

TITLE: React Site Map Component with Meta Tags
DESCRIPTION: Example of implementing meta tags within a React component, demonstrating how React automatically places meta tags in document head.

LANGUAGE: javascript
CODE:
import ShowRenderedHTML from './ShowRenderedHTML.js';

export default function SiteMapPage() {
  return (
    <ShowRenderedHTML>
      <meta name="keywords" content="React" />
      <meta name="description" content="A site map for the React website" />
      <h1>Site Map</h1>
      <p>...</p>
    </ShowRenderedHTML>
  );
}

----------------------------------------

TITLE: Correct Component Usage in React JSX
DESCRIPTION: Demonstrates the proper way to use components in JSX by letting React handle component calls rather than calling them directly as functions.

LANGUAGE: javascript
CODE:
function BlogPost() {
  return <Layout><Article /></Layout>; // ✅ Good: Only use components in JSX
}

----------------------------------------

TITLE: Preconnect Usage in Component Rendering
DESCRIPTION: Example demonstrating how to use preconnect when rendering a component to optimize resource loading from external hosts.

LANGUAGE: javascript
CODE:
import { preconnect } from 'react-dom';

function AppRoot() {
  preconnect("https://example.com");
  return ...;
}

----------------------------------------

TITLE: Sample Counter Component Implementation
DESCRIPTION: Example React component implementing a counter with state management and side effects.

LANGUAGE: javascript
CODE:
function Counter() {
  const [count, setCount] = useState(0);
  const handleClick = () => {
    setCount(prev => prev + 1);
  }

  useEffect(() => {
    document.title = `You clicked ${count} times`;
  }, [count]);

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={handleClick}>
        Click me
      </button>
    </div>
  )
}

----------------------------------------

TITLE: Interactive Fruit Picker Component in React
DESCRIPTION: Creates a fruit picker component with a labeled select box containing multiple options. Demonstrates proper implementation of options with values and labels.

LANGUAGE: javascript
CODE:
export default function FruitPicker() {
  return (
    <label>
      Pick a fruit:
      <select name="selectedFruit">
        <option value="apple">Apple</option>
        <option value="banana">Banana</option>
        <option value="orange">Orange</option>
      </select>
    </label>
  );
}

LANGUAGE: css
CODE:
select { margin: 5px; }

----------------------------------------

TITLE: Correct Direct Hook Usage
DESCRIPTION: Demonstrates the proper way to use Hooks by calling them directly within components rather than passing them as props.

LANGUAGE: javascript
CODE:
function ChatInput() {
  return <Button />
}

function Button() {
  const data = useDataWithLogging(); // ✅ Good: Use the Hook directly
}

function useDataWithLogging() {
  // If there's any conditional logic to change the Hook's behavior, it should be inlined into
  // the Hook
}

----------------------------------------

TITLE: Importing and Using Preconnect in React Components
DESCRIPTION: Example showing how to import the preconnect function from react-dom and use it within a React component.

LANGUAGE: javascript
CODE:
import { preconnect } from 'react-dom';

function AppRoot() {
  preconnect("https://example.com");
  // ...
}

----------------------------------------

TITLE: Testing Event Dispatching with act()
DESCRIPTION: Example demonstrating how to test event handling in React components using act() with event dispatching.

LANGUAGE: javascript
CODE:
import {act} from 'react';
import ReactDOMClient from 'react-dom/client';
import Counter from './Counter';

it.only('can render and update a counter', async () => {
  const container = document.createElement('div');
  document.body.appendChild(container);
  
  await act( async () => {
    ReactDOMClient.createRoot(container).render(<Counter />);
  });
  
  await act(async () => {
    button.dispatchEvent(new MouseEvent('click', { bubbles: true }));
  });

  const button = container.querySelector('button');
  const label = container.querySelector('p');
  expect(label.textContent).toBe('You clicked 1 times');
  expect(document.title).toBe('You clicked 1 times');
});

----------------------------------------

TITLE: React SVG Component Props
DESCRIPTION: Example demonstrating React's camelCase prop naming convention for SVG attributes, including handling of namespaced attributes.

LANGUAGE: JSX
CODE:
<svg xlinkHref="path" xmlBase="base" tabIndex={0}>

----------------------------------------

TITLE: Correct Static Hook Implementation
DESCRIPTION: Shows the proper way to create custom Hooks by defining them statically rather than dynamically modifying existing Hooks.

LANGUAGE: javascript
CODE:
function ChatInput() {
  const data = useDataWithLogging(); // ✅ Good: Create a new version of the Hook
}

function useDataWithLogging() {
  // ... Create a new version of the Hook and inline the logic here
}

----------------------------------------

TITLE: Preloading External Script
DESCRIPTION: Demonstrates preloading an external JavaScript script file in a React component.

LANGUAGE: javascript
CODE:
import { preload } from 'react-dom';

function AppRoot() {
  preload("https://example.com/script.js", {as: "script"});
  return ...;
}

----------------------------------------

TITLE: Basic Usage of startTransition in React
DESCRIPTION: This code snippet shows the basic syntax for using startTransition. It takes a function as an argument, which is called immediately to mark state updates as Transitions.

LANGUAGE: javascript
CODE:
startTransition(action)

----------------------------------------

TITLE: Creating a Basic Portal in React
DESCRIPTION: Demonstrates how to use createPortal to render a child component into a different part of the DOM, specifically the document body.

LANGUAGE: jsx
CODE:
import { createPortal } from 'react-dom';

<div>
  <p>This child is placed in the parent div.</p>
  {createPortal(
    <p>This child is placed in the document body.</p>,
    document.body
  )}
</div>

----------------------------------------

TITLE: Ref Callback Usage
DESCRIPTION: Example of using a ref callback function to manipulate DOM nodes

LANGUAGE: JavaScript
CODE:
<div ref={(node) => { console.log('Attached', node); return () => { console.log('Clean up', node) } }}>

----------------------------------------

TITLE: Preloading Font with Stylesheet
DESCRIPTION: Example of preloading both a stylesheet and its associated font file together.

LANGUAGE: javascript
CODE:
import { preload } from 'react-dom';

function AppRoot() {
  preload("https://example.com/style.css", {as: "style"});
  preload("https://example.com/font.woff2", {as: "font"});
  return ...;
}

----------------------------------------

TITLE: Stale Content Indication
DESCRIPTION: Example demonstrating how to visually indicate stale content while new content is loading using useDeferredValue.

LANGUAGE: javascript
CODE:
<div style={{
  opacity: query !== deferredQuery ? 0.5 : 1,
}}>
  <SearchResults query={deferredQuery} />
</div>

----------------------------------------

TITLE: Basic Preload Usage in React
DESCRIPTION: Basic example of using preload to fetch a font file. Shows the minimal required parameters of URL and resource type.

LANGUAGE: javascript
CODE:
preload("https://example.com/font.woff2", {as: "font"});

----------------------------------------

TITLE: State-based Routing in React
DESCRIPTION: An example of using useState for basic routing in a React application, highlighting the limitations of this approach.

LANGUAGE: javascript
CODE:
import {useState} from 'react';

import Home from './Home';
import Dashboard from './Dashboard';

export default function App() {
  // ❌ Routing in state does not create URLs
  const [route, setRoute] = useState('home');
  return (
    <div>
      {route === 'home' && <Home />}
      {route === 'dashboard' && <Dashboard />}
    </div>
  )
}

----------------------------------------

TITLE: Preloading in Event Handler
DESCRIPTION: Shows how to preload resources in response to user interaction before they're needed.

LANGUAGE: javascript
CODE:
import { preload } from 'react-dom';

function CallToAction() {
  const onClick = () => {
    preload("https://example.com/wizardStyles.css", {as: "style"});
    startWizard();
  }
  return (
    <button onClick={onClick}>Start Wizard</button>
  );
}

----------------------------------------

TITLE: Basic useInsertionEffect Hook Usage
DESCRIPTION: Basic example showing how to use the useInsertionEffect hook to inject styles in a CSS-in-JS library implementation.

LANGUAGE: javascript
CODE:
import { useInsertionEffect } from 'react';

// Inside your CSS-in-JS library
function useCSS(rule) {
  useInsertionEffect(() => {
    // ... inject <style> tags here ...
  });
  return rule;
}

----------------------------------------

TITLE: Preloading Stylesheet
DESCRIPTION: Shows how to preload a CSS stylesheet using the preload function.

LANGUAGE: javascript
CODE:
import { preload } from 'react-dom';

function AppRoot() {
  preload("https://example.com/style.css", {as: "style"});
  return ...;
}

----------------------------------------

TITLE: Code Splitting with React Router
DESCRIPTION: An example of implementing code splitting using React Router's lazy loading feature for optimized route-based code splitting.

LANGUAGE: javascript
CODE:
import Home from './Home';
import Dashboard from './Dashboard';

// ✅ Routes are downloaded before rendering
const router = createBrowserRouter([
  {path: '/', lazy: () => import('./Home')},
  {path: '/dashboard', lazy: () => import('Dashboard')}
]);

----------------------------------------

TITLE: Basic renderToString Usage
DESCRIPTION: Basic example of using renderToString to convert a React component to an HTML string.

LANGUAGE: javascript
CODE:
const html = renderToString(reactNode, options?)

----------------------------------------

TITLE: Traditional CSS Styling Example
DESCRIPTION: Example showing traditional CSS styling approach in React components.

LANGUAGE: javascript
CODE:
// In your JS file:
<button className="success" />

// In your CSS file:
.success { color: green; }

----------------------------------------

TITLE: Preiniting External Script in React Component
DESCRIPTION: Complete example of preiniting an external script in a React component root

LANGUAGE: javascript
CODE:
import { preinit } from 'react-dom';

function AppRoot() {
  preinit("https://example.com/script.js", {as: "script"});
  return ...;
}

----------------------------------------

TITLE: React Router Implementation
DESCRIPTION: An example of implementing routing using React Router, demonstrating a more robust solution for navigation in React applications.

LANGUAGE: javascript
CODE:
import {RouterProvider, createBrowserRouter} from 'react-router';

import Home from './Home';
import Dashboard from './Dashboard';

// ✅ Each route has it's own URL
const router = createBrowserRouter([
  {path: '/', element: <Home />},
  {path: '/dashboard', element: <Dashboard />}
]);

export default function App() {
  return (
    <RouterProvider value={router} />
  )
}

----------------------------------------

TITLE: Basic renderToStaticMarkup Usage
DESCRIPTION: Basic example showing how to use renderToStaticMarkup to convert a React node to an HTML string.

LANGUAGE: javascript
CODE:
const html = renderToStaticMarkup(reactNode, options?)

----------------------------------------

TITLE: Server-Side CSS Rule Collection
DESCRIPTION: Example showing how to collect CSS rules during server-side rendering while using useInsertionEffect.

LANGUAGE: javascript
CODE:
let collectedRulesSet = new Set();

function useCSS(rule) {
  if (typeof window === 'undefined') {
    collectedRulesSet.add(rule);
  }
  useInsertionEffect(() => {
    // ...
  });
  return rule;
}

----------------------------------------

TITLE: Importing Client-side Rendering APIs in React
DESCRIPTION: Shows how to import client-side rendering APIs from the react-dom/client entry point. These APIs are used for rendering React components in the browser.

LANGUAGE: javascript
CODE:
import { /* client-side APIs */ } from 'react-dom/client';

----------------------------------------

TITLE: Pre-Actions Form Handling Example
DESCRIPTION: Example showing form handling before the introduction of Actions, using useState for managing pending and error states

LANGUAGE: javascript
CODE:
function UpdateName({}) {
  const [name, setName] = useState("");
  const [error, setError] = useState(null);
  const [isPending, setIsPending] = useState(false);

  const handleSubmit = async () => {
    setIsPending(true);
    const error = await updateName(name);
    setIsPending(false);
    if (error) {
      setError(error);
      return;
    } 
    redirect("/path");
  };

  return (
    <div>
      <input value={name} onChange={(event) => setName(event.target.value)} />
      <button onClick={handleSubmit} disabled={isPending}>
        Update
      </button>
      {error && <p>{error}</p>}
    </div>
  );
}

----------------------------------------

TITLE: Preloading a Module in a React Event Handler
DESCRIPTION: This snippet illustrates how to use preloadModule within an event handler in a React component. It preloads a module when a button is clicked, before transitioning to a new state or page.

LANGUAGE: javascript
CODE:
import { preloadModule } from 'react-dom';

function CallToAction() {
  const onClick = () => {
    preloadModule("https://example.com/module.js", {as: "script"});
    startWizard();
  }
  return (
    <button onClick={onClick}>Start Wizard</button>
  );
}

----------------------------------------

TITLE: useLayoutEffect Parameters in React
DESCRIPTION: Explains the parameters of useLayoutEffect, including the setup function and optional dependencies array.

LANGUAGE: javascript
CODE:
useLayoutEffect(setup, dependencies?)

----------------------------------------

TITLE: Importing hydrateRoot from react-dom/client in React
DESCRIPTION: Demonstrates the import of the hydrateRoot function from react-dom/client. This function is used to hydrate a server-rendered React application on the client-side.

LANGUAGE: jsx
CODE:
import { hydrateRoot } from 'react-dom/client';

----------------------------------------

TITLE: Installing React Compiler Beta with Yarn
DESCRIPTION: Commands to install React Compiler Beta and its ESLint plugin using Yarn package manager.

LANGUAGE: bash
CODE:
yarn add -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta

----------------------------------------

TITLE: Importing and Using preloadModule in a React Component
DESCRIPTION: This example shows how to import the preloadModule function from react-dom and use it within a React component. It demonstrates preloading a module during component rendering.

LANGUAGE: javascript
CODE:
import { preloadModule } from 'react-dom';

function AppRoot() {
  preloadModule("https://example.com/module.js", {as: "script"});
  // ...
}

----------------------------------------

TITLE: Basic useSyncExternalStore Usage with External Store
DESCRIPTION: Example showing how to subscribe to an external todos store using useSyncExternalStore. Takes subscribe and getSnapshot functions as arguments to connect to the store.

LANGUAGE: javascript
CODE:
import { useSyncExternalStore } from 'react';
import { todosStore } from './todoStore.js';

function TodosApp() {
  const todos = useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot);
  // ...
}

----------------------------------------

TITLE: Basic Usage of renderToPipeableStream
DESCRIPTION: Demonstrates how to use renderToPipeableStream to render a React component to a Node.js stream, including setting up bootstrap scripts and handling the shell ready event.

LANGUAGE: javascript
CODE:
import { renderToPipeableStream } from 'react-dom/server';

app.use('/', (request, response) => {
  const { pipe } = renderToPipeableStream(<App />, {
    bootstrapScripts: ['/main.js'],
    onShellReady() {
      response.setHeader('content-type', 'text/html');
      pipe(response);
    }
  });
});

----------------------------------------

TITLE: Installing React Compiler Beta with NPM
DESCRIPTION: Commands to install React Compiler Beta and its ESLint plugin using NPM package manager.

LANGUAGE: bash
CODE:
npm install -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta

----------------------------------------

TITLE: Preiniting Stylesheet in React Component
DESCRIPTION: Example demonstrating how to preinit a stylesheet with precedence setting

LANGUAGE: javascript
CODE:
import { preinit } from 'react-dom';

function AppRoot() {
  preinit("https://example.com/style.css", {as: "style", precedence: "medium"});
  return ...;
}

----------------------------------------

TITLE: Nested Suspense Boundaries with Progressive Loading
DESCRIPTION: Example of nested Suspense components to create a progressive loading sequence

LANGUAGE: jsx
CODE:
<Suspense fallback={<BigSpinner />}>
  <Biography />
  <Suspense fallback={<AlbumsGlimmer />}>
    <Panel>
      <Albums />
    </Panel>
  </Suspense>
</Suspense>

----------------------------------------

TITLE: Rendering React App to Static HTML String
DESCRIPTION: Function that uses prerenderToNodeStream to render a React app to a static HTML string. It collects the stream data into a string and returns a Promise that resolves with the complete HTML.

LANGUAGE: javascript
CODE:
import { prerenderToNodeStream } from 'react-dom/static';

async function renderToString() {
  const {prelude} = await prerenderToNodeStream(<App />, {
    bootstrapScripts: ['/main.js']
  });
  
  return new Promise((resolve, reject) => {
    let data = '';
    prelude.on('data', chunk => {
      data += chunk;
    });
    prelude.on('end', () => resolve(data));
    prelude.on('error', reject);
  });
}

----------------------------------------

TITLE: Installing React Compiler ESLint Plugin with NPM
DESCRIPTION: Command to install only the React Compiler ESLint plugin using NPM package manager.

LANGUAGE: bash
CODE:
npm install -D eslint-plugin-react-compiler@beta

----------------------------------------

TITLE: Rendering Inline CSS Stylesheet with Dynamic Content in React
DESCRIPTION: This example demonstrates how to render an inline CSS stylesheet within a React component. It creates a PieChart component that generates a dynamic stylesheet based on color props and uses the useId hook for unique identifiers.

LANGUAGE: jsx
CODE:
import ShowRenderedHTML from './ShowRenderedHTML.js';
import { useId } from 'react';

function PieChart({data, colors}) {
  const id = useId();
  const stylesheet = colors.map((color, index) =>
    `#${id} .color-${index}: \{ color: "${color}"; \}`
  ).join();
  return (
    <>
      <style href={"PieChart-" + JSON.stringify(colors)} precedence="medium">
        {stylesheet}
      </style>
      <svg id={id}>
        …
      </svg>
    </>
  );
}

export default function App() {
  return (
    <ShowRenderedHTML>
      <PieChart data="..." colors={['red', 'green', 'blue']} />
    </ShowRenderedHTML>
  );
}

----------------------------------------

TITLE: Correct and Incorrect Hook Usage in React Functions
DESCRIPTION: This snippet illustrates the correct usage of Hooks in React function components and custom Hooks, as well as an incorrect usage in a regular JavaScript function.

LANGUAGE: javascript
CODE:
function FriendList() {
  const [onlineStatus, setOnlineStatus] = useOnlineStatus(); // ✅
}

function setOnlineStatus() { // ❌ Not a component or custom Hook!
  const [onlineStatus, setOnlineStatus] = useOnlineStatus();
}

----------------------------------------

TITLE: Basic Prerender Usage in React
DESCRIPTION: Demonstrates basic usage of prerender to generate static HTML from a React component with bootstrap scripts.

LANGUAGE: javascript
CODE:
import { prerender } from 'react-dom/static';

async function handler(request) {
  const {prelude} = await prerender(<App />, {
    bootstrapScripts: ['/main.js']
  });
  return new Response(prelude, {
    headers: { 'content-type': 'text/html' },
  });
}

----------------------------------------

TITLE: Installing React Compiler ESLint Plugin with Yarn
DESCRIPTION: Command to install only the React Compiler ESLint plugin using Yarn package manager.

LANGUAGE: bash
CODE:
yarn add -D eslint-plugin-react-compiler@beta

----------------------------------------

TITLE: Basic Server Rendering with renderToReadableStream
DESCRIPTION: Example showing basic usage of renderToReadableStream to render a React app to an HTML stream with bootstrap scripts.

LANGUAGE: javascript
CODE:
import { renderToReadableStream } from 'react-dom/server';

async function handler(request) {
  const stream = await renderToReadableStream(<App />, {
    bootstrapScripts: ['/main.js']
  });
  return new Response(stream, {
    headers: { 'content-type': 'text/html' },
  });
}

----------------------------------------

TITLE: Incorrect Direct Component Function Calls
DESCRIPTION: Shows an anti-pattern where components are called directly as functions instead of being used in JSX syntax.

LANGUAGE: javascript
CODE:
function BlogPost() {
  return <Layout>{Article()}</Layout>; // 🔴 Bad: Never call them directly
}

----------------------------------------

TITLE: Using React Server Component Directives
DESCRIPTION: Code examples demonstrating the use of 'use client' and 'use server' directives for React Server Components. These directives mark code boundaries between client and server execution contexts.

LANGUAGE: markdown
CODE:
'use client'
'use server'

----------------------------------------

TITLE: Error Handling Configuration
DESCRIPTION: Example showing how to configure custom error handling with createRoot in React 19.

LANGUAGE: javascript
CODE:
const root = createRoot(container, {
  onUncaughtError: (error, errorInfo) => {
    // ... log error report
  },
  onCaughtError: (error, errorInfo) => {
    // ... log error report
  }
});

----------------------------------------

TITLE: Importing prerender API for Web Streams in React
DESCRIPTION: The prerender API renders a React tree to static HTML using a Readable Web Stream. It's available in environments supporting Web Streams like browsers, Deno, and some modern edge runtimes.

LANGUAGE: javascript
CODE:
import { prerender } from 'react-dom/static';

----------------------------------------

TITLE: Impure Component Example - React
DESCRIPTION: Demonstrates an impure component that mutates external state during rendering, which should be avoided.

LANGUAGE: jsx
CODE:
let guest = 0;

function Cup() {
  // Bad: changing a preexisting variable!
  guest = guest + 1;
  return <h2>Tea cup for guest #{guest}</h2>;
}

----------------------------------------

TITLE: Basic Server Function Definition
DESCRIPTION: Example of marking an async function as a server function using the 'use server' directive.

LANGUAGE: javascript
CODE:
async function addToCart(data) {
  'use server';
  // ...
}

----------------------------------------

TITLE: Using useState Hook for Counter in React
DESCRIPTION: This example demonstrates how to use the useState hook to create a simple counter in React. It shows state management and event handling.

LANGUAGE: javascript
CODE:
import { useState } from 'react';

export default function Counter() {
  const [count, setCount] = useState(0);

  function handleClick() {
    setCount(count + 1);
  }

  return (
    <button onClick={handleClick}>
      You pressed me {count} times
    </button>
  );
}

----------------------------------------

TITLE: Converting Prerender Stream to String
DESCRIPTION: Example of converting the prerender Web Stream output to a complete HTML string.

LANGUAGE: javascript
CODE:
import { prerender } from 'react-dom/static';

async function renderToString() {
  const {prelude} = await prerender(<App />, {
    bootstrapScripts: ['/main.js']
  });
  
  const reader = prelude.getReader();
  let content = '';
  while (true) {
    const {done, value} = await reader.read();
    if (done) {
      return content;
    }
    content += Buffer.from(value).toString('utf8');
  }
}

----------------------------------------

TITLE: Implementing React Inspiration Quote Generator
DESCRIPTION: A React application that displays inspirational quotes and demonstrates component composition. Shows usage of props, conditional rendering, and state management.

LANGUAGE: javascript
CODE:
import FancyText from './FancyText';
import InspirationGenerator from './InspirationGenerator';
import Copyright from './Copyright';

export default function App() {
  return (
    <>
      <FancyText title text="Get Inspired App" />
      <InspirationGenerator>
        <Copyright year={2004} />
      </InspirationGenerator>
    </>
  );
}

----------------------------------------

TITLE: Server Function with Return Value Handling
DESCRIPTION: Example showing how to handle return values from server functions using useActionState hook in a client component.

LANGUAGE: javascript
CODE:
'use server';

export default async function requestUsername(formData) {
  const username = formData.get('username');
  if (canRequest(username)) {
    // ...
    return 'successful';
  }
  return 'failed';
}

LANGUAGE: javascript
CODE:
'use client';

import { useActionState } from 'react';
import requestUsername from './requestUsername';

function UsernameForm() {
  const [state, action] = useActionState(requestUsername, null, 'n/a');

  return (
    <>
      <form action={action}>
        <input type="text" name="username" />
        <button type="submit">Request</button>
      </form>
      <p>Last submission request returned: {state}</p>
    </>
  );
}

----------------------------------------

TITLE: Conditional Rendering in React with Ternary Operator
DESCRIPTION: This example demonstrates how to use the conditional (ternary) operator for conditional rendering in a React component. It renders different icons based on the 'isPacked' prop.

LANGUAGE: javascript
CODE:
function Item({ name, isPacked }) {
  return (
    <li className="item">
      {name} {isPacked ? '✅' : '❌'}
    </li>
  );
}

export default function PackingList() {
  return (
    <section>
      <h1>Sally Ride's Packing List</h1>
      <ul>
        <Item 
          isPacked={true} 
          name="Space suit" 
        />
        <Item 
          isPacked={true} 
          name="Helmet with a golden leaf" 
        />
        <Item 
          isPacked={false} 
          name="Photo of Tam" 
        />
      </ul>
    </section>
  );
}

----------------------------------------

TITLE: TypeScript Interface Updates for React 18
DESCRIPTION: Example showing required changes to TypeScript interfaces in React 18, particularly for explicitly declaring children props.

LANGUAGE: typescript
CODE:
interface MyButtonProps {
  color: string;
  children?: React.ReactNode;
}

----------------------------------------

TITLE: Styling React Components
DESCRIPTION: CSS styles for the inspiration app components, including fancy text formatting and color box display.

LANGUAGE: css
CODE:
.fancy {
  font-family: 'Georgia';
}
.title {
  color: #007AA3;
  text-decoration: underline;
}
.cursive {
  font-style: italic;
}
.small {
  font-size: 10px;
}
.colorbox {
  height: 100px;
  width: 100px;
  margin: 8px;
}

----------------------------------------

TITLE: Server Function with useTransition
DESCRIPTION: Implementation of a like button that calls a server function within a transition, handling loading states and updates.

LANGUAGE: javascript
CODE:
import incrementLike from './actions';
import { useState, useTransition } from 'react';

function LikeButton() {
  const [isPending, startTransition] = useTransition();
  const [likeCount, setLikeCount] = useState(0);

  const onClick = () => {
    startTransition(async () => {
      const currentCount = await incrementLike();
      setLikeCount(currentCount);
    });
  };

  return (
    <>
      <p>Total Likes: {likeCount}</p>
      <button onClick={onClick} disabled={isPending}>Like</button>;
    </>
  );
}

LANGUAGE: javascript
CODE:
'use server';

let likeCount = 0;
export default async function incrementLike() {
  likeCount++;
  return likeCount;
}

----------------------------------------

TITLE: Updating Server-Side Rendering Code
DESCRIPTION: Example showing migration from hydrate to hydrateRoot for server-side rendering applications.

LANGUAGE: javascript
CODE:
// Before
import { hydrate } from 'react-dom';
const container = document.getElementById('app');
hydrate(<App tab="home" />, container);

// After
import { hydrateRoot } from 'react-dom/client';
const container = document.getElementById('app');
const root = hydrateRoot(container, <App tab="home" />);

----------------------------------------

TITLE: Basic React Component with Create React App
DESCRIPTION: A simple React component example showing a basic landing page for an admin tool using Create React App.

LANGUAGE: javascript
CODE:
export default function App() {
  return (
    <div>
      <h1>Welcome to the Admin Tool!</h1>
    </div>
  )
}

----------------------------------------

TITLE: Using Objects and Double Curly Braces in JSX (React)
DESCRIPTION: This snippet shows how to use JavaScript objects within JSX, particularly for inline styles. It demonstrates the use of double curly braces to pass an object as a style prop in a TodoList component.

LANGUAGE: jsx
CODE:
export default function TodoList() {
  return (
    <ul style={{
      backgroundColor: 'black',
      color: 'pink'
    }}>
      <li>Improve the videophone</li>
      <li>Prepare aeronautics lectures</li>
      <li>Work on the alcohol-fuelled engine</li>
    </ul>
  );
}

----------------------------------------

TITLE: Using Server Functions with Form Actions
DESCRIPTION: Demonstrates how to pass a Server Function directly to a form's action prop for automatic form submission handling.

LANGUAGE: jsx
CODE:
"use client";

import {updateName} from './actions';

function UpdateName() {
  return (
    <form action={updateName}>
      <input type="text" name="name" />
    </form>
  )
}

----------------------------------------

TITLE: Installing React 18 Dependencies
DESCRIPTION: Commands for installing React 18 and React DOM using npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install react react-dom

LANGUAGE: bash
CODE:
yarn add react react-dom

----------------------------------------

TITLE: Optimized Data Fetching with Loader
DESCRIPTION: An example of optimized data fetching using a loader pattern, which allows for parallel data fetching and improved performance.

LANGUAGE: javascript
CODE:
export async function loader() {
  const response = await fetch(`/api/data`);
  const data = await response.json();
  return data;
}

// ✅ Fetching data in parallel while the code is downloading
export default function Dashboard({loaderData}) {
  return (
    <div>
      {loaderData.map(item => <div key={item.id}>{item.name}</div>)}
    </div>
  )
}

----------------------------------------

TITLE: Complex Object Usage in JSX (React)
DESCRIPTION: This example demonstrates more advanced usage of JavaScript objects in JSX. It shows how to use object properties for various attributes and styles in a TodoList component.

LANGUAGE: jsx
CODE:
const person = {
  name: 'Gregorio Y. Zara',
  theme: {
    backgroundColor: 'black',
    color: 'pink'
  }
};

export default function TodoList() {
  return (
    <div style={person.theme}>
      <h1>{person.name}'s Todos</h1>
      <img
        className="avatar"
        src="https://i.imgur.com/7vQD0fPs.jpg"
        alt="Gregorio Y. Zara"
      />
      <ul>
        <li>Improve the videophone</li>
        <li>Prepare aeronautics lectures</li>
        <li>Work on the alcohol-fuelled engine</li>
      </ul>
    </div>
  );
}

----------------------------------------

TITLE: Focusing Text Input Example
DESCRIPTION: Complete example demonstrating how to focus an input element using a ref when a button is clicked

LANGUAGE: jsx
CODE:
import { useRef } from 'react';

export default function Form() {
  const inputRef = useRef(null);

  function handleClick() {
    inputRef.current.focus();
  }

  return (
    <>
      <input ref={inputRef} />
      <button onClick={handleClick}>
        Focus the input
      </button>
    </>
  );
}

----------------------------------------

TITLE: Updating React 18 Root API
DESCRIPTION: Code snippet showing how to update from the old ReactDOM.render API to the new createRoot API in React 18. This change is required when upgrading to React 18.

LANGUAGE: javascript
CODE:
// before
const container = document.getElementById('root');
ReactDOM.render(<App />, container);

// after
const container = document.getElementById('root');
const root = ReactDOM.createRoot(container);
root.render(<App/>);

----------------------------------------

TITLE: React Blog Page Structure in JSX/Markdown
DESCRIPTION: Blog page structure combining Markdown frontmatter with JSX components to display a chronological list of React blog posts. Uses custom BlogCard components to render each post entry with title, date and preview content.

LANGUAGE: jsx
CODE:
---
title: React Blog
---

<Intro>
This blog is the official source for the updates from the React team. Anything important, including release notes or deprecation notices, will be posted here first.

You can also follow the [@react.dev](https://bsky.app/profile/react.dev) account on Bluesky, or [@reactjs](https://twitter.com/reactjs) account on Twitter, but you won't miss anything essential if you only read this blog.
</Intro>

<div className="sm:-mx-5 flex flex-col gap-5 mt-12">
<BlogCard title="Sunsetting Create React App" date="February 13, 2025" url="/blog/2025/02/14/sunsetting-create-react-app">
  Today, we're deprecating Create React App for new apps...
</BlogCard>
/* Additional BlogCard components removed for brevity */
</div>

----------------------------------------

TITLE: Installing React Dependencies with npm
DESCRIPTION: This snippet shows how to install React and ReactDOM using npm, which are necessary dependencies for using React in a project.

LANGUAGE: bash
CODE:
npm install react react-dom

----------------------------------------

TITLE: Managing List of Refs with Callback
DESCRIPTION: Advanced example showing how to manage multiple refs using a ref callback pattern and Map

LANGUAGE: jsx
CODE:
const itemsRef = useRef(null);

<li
  key={cat.id}
  ref={node => {
    const map = getMap();
    map.set(cat, node);
    return () => {
      map.delete(cat);
    };
  }}
>

----------------------------------------

TITLE: Demonstrating ES6 Class Syntax in React (Not Recommended)
DESCRIPTION: This snippet shows an example of ES6 class syntax with property initializers and arrow functions, which is not recommended for use in the documentation due to lack of standardization.

LANGUAGE: javascript
CODE:
class MyComponent extends React.Component {
  state = {value: ''};
  handleChange = (e) => {
    this.setState({value: e.target.value});
  };
}

----------------------------------------

TITLE: Updating React Packages to Canary Channel using NPM
DESCRIPTION: Command to update React packages to the latest Canary release using NPM package manager.

LANGUAGE: bash
CODE:
npm update react@canary react-dom@canary

----------------------------------------

TITLE: Implementing a Server-Only React Component
DESCRIPTION: This code snippet demonstrates how to create a server-only React component that fetches data and passes it to client-side components.

LANGUAGE: javascript
CODE:
async function Talks({ confId }) {
  const talks = await db.Talks.findAll({ confId });
  const videos = talks.map(talk => talk.video);
  return <SearchableVideoList videos={videos} />;
}

----------------------------------------

TITLE: Making Other Changes to an Array in React State
DESCRIPTION: Shows how to make other changes to an array in state, like reversing, by first creating a copy of the array.

LANGUAGE: JavaScript
CODE:
const nextList = [...list];
nextList.reverse();
setList(nextList);

----------------------------------------

TITLE: Demonstrating Preferred ES5 Class Syntax in React
DESCRIPTION: This snippet illustrates the recommended way to write a React component class using ES5 syntax, which is more widely understood and standardized.

LANGUAGE: javascript
CODE:
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.handleChange = this.handleChange.bind(this);
    this.state = {value: ''};
  }
  handleChange(e) {
    this.setState({value: e.target.value});
  }
}

----------------------------------------

TITLE: Installing React DevTools via Package Manager
DESCRIPTION: Commands to install the react-devtools npm package globally using either Yarn or npm package managers.

LANGUAGE: bash
CODE:
# Yarn
yarn global add react-devtools

# Npm
npm install -g react-devtools

----------------------------------------

TITLE: Adding a ref to a React component
DESCRIPTION: This snippet demonstrates how to import and use the useRef Hook to add a ref to a React component. The ref is used to store a counter value that doesn't trigger re-renders when updated.

LANGUAGE: javascript
CODE:
import { useRef } from 'react';

export default function Counter() {
  let ref = useRef(0);

  function handleClick() {
    ref.current = ref.current + 1;
    alert('You clicked ' + ref.current + ' times!');
  }

  return (
    <button onClick={handleClick}>
      Click me!
    </button>
  );
}

----------------------------------------

TITLE: Using Effect Events to Handle Non-Reactive Logic
DESCRIPTION: This example shows how to use the experimental useEffectEvent Hook to extract non-reactive logic from an Effect, allowing certain values to be read without causing the Effect to re-run.

LANGUAGE: jsx
CODE:
function ChatRoom({ roomId, theme }) {
  const onConnected = useEffectEvent(() => {
    showNotification('Connected!', theme);
  });

  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.on('connected', () => {
      onConnected();
    });
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]);

  // ...
}

----------------------------------------

TITLE: Setting Up Rsbuild for React Application
DESCRIPTION: Command to create a new React project using Rsbuild, an Rspack-powered build tool optimized for React applications with built-in performance optimizations.

LANGUAGE: bash
CODE:
npx create-rsbuild --template react

----------------------------------------

TITLE: Adding React DevTools Script to HTML
DESCRIPTION: HTML modification to connect a website to the standalone React Developer Tools by adding a script tag to the head section.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="http://localhost:8097"></script>

----------------------------------------

TITLE: Inserting into an Array in React State
DESCRIPTION: Demonstrates inserting an item at a specific index in an array stored in state using the slice() method and spread syntax.

LANGUAGE: JavaScript
CODE:
const insertAt = 1;
const nextArtists = [
  ...artists.slice(0, insertAt),
  { id: nextId++, name: name },
  ...artists.slice(insertAt)
];
setArtists(nextArtists);

----------------------------------------

TITLE: Pure Function Example - JavaScript
DESCRIPTION: Demonstrates a simple pure function that always returns the same output for a given input by doubling a number.

LANGUAGE: javascript
CODE:
function double(number) {
  return 2 * number;
}

----------------------------------------

TITLE: Implementing Square Component in React
DESCRIPTION: A reusable button component that renders individual squares of the tic-tac-toe board. Takes value and click handler as props.

LANGUAGE: JSX
CODE:
function Square({ value, onSquareClick }) {
  return (
    <button className="square" onClick={onSquareClick}>
      {value}
    </button>
  );
}

----------------------------------------

TITLE: Enabling Format on Save in VS Code
DESCRIPTION: Instructions for enabling the 'format on save' feature in Visual Studio Code settings.

LANGUAGE: markdown
CODE:
1. In VS Code, press `CTRL/CMD + SHIFT + P`.
2. Type "settings"
3. Hit Enter
4. In the search bar, type "format on save"
5. Be sure the "format on save" option is ticked!

----------------------------------------

TITLE: Updating Arrays in React State
DESCRIPTION: Shows how to update arrays in state by creating new arrays or using methods that return new arrays, such as map.

LANGUAGE: jsx
CODE:
function handleToggle(artworkId, nextSeen) {
  setList(list.map(artwork => {
    if (artwork.id === artworkId) {
      return { ...artwork, seen: nextSeen };
    } else {
      return artwork;
    }
  }));
}

----------------------------------------

TITLE: Pure Recipe Component - React
DESCRIPTION: Shows a pure React component that calculates recipe quantities based on number of drinkers, demonstrating predictable output based on props.

LANGUAGE: jsx
CODE:
function Recipe({ drinkers }) {
  return (
    <ol>    
      <li>Boil {drinkers} cups of water.</li>
      <li>Add {drinkers} spoons of tea and {0.5 * drinkers} spoons of spice.</li>
      <li>Add {0.5 * drinkers} cups of milk to boil and sugar to taste.</li>
    </ol>
  );
}

----------------------------------------

TITLE: Implementing Game History in React
DESCRIPTION: Top-level Game component that manages move history and allows time travel between moves using state management.

LANGUAGE: JSX
CODE:
export default function Game() {
  const [history, setHistory] = useState([Array(9).fill(null)]);
  const [currentMove, setCurrentMove] = useState(0);
  const xIsNext = currentMove % 2 === 0;
  const currentSquares = history[currentMove];

  function handlePlay(nextSquares) {
    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];
    setHistory(nextHistory);
    setCurrentMove(nextHistory.length - 1);
  }
  // ... rest of component
}

----------------------------------------

TITLE: ESLint Configuration for React Compiler - Modern Format
DESCRIPTION: Configuration example for setting up the React Compiler ESLint plugin using the modern ESLint config format with ESM imports.

LANGUAGE: javascript
CODE:
import reactCompiler from 'eslint-plugin-react-compiler'

export default [
  {
    plugins: {
      'react-compiler': reactCompiler,
    },
    rules: {
      'react-compiler/react-compiler': 'error',
    },
  },
]

----------------------------------------

TITLE: Implementing Form Actions in React
DESCRIPTION: Example of using the new Actions feature in React to handle form submissions. The code demonstrates how to attach an action function to a form element for handling search functionality.

LANGUAGE: javascript
CODE:
<form action={search}>
  <input name="query" />
  <button type="submit">Search</button>
</form>

----------------------------------------

TITLE: Initializing React Root and Initial Render
DESCRIPTION: Demonstrates how to trigger the initial render of a React application by creating a root and rendering a component. Uses createRoot from react-dom/client to mount the application to a DOM node.

LANGUAGE: javascript
CODE:
import Image from './Image.js';
import { createRoot } from 'react-dom/client';

const root = createRoot(document.getElementById('root'))
root.render(<Image />);

----------------------------------------

TITLE: Product Data Structure in JSON
DESCRIPTION: Sample JSON data structure representing product information including category, price, stock status and name.

LANGUAGE: json
CODE:
[
  { category: "Fruits", price: "$1", stocked: true, name: "Apple" },
  { category: "Fruits", price: "$1", stocked: true, name: "Dragonfruit" },
  { category: "Fruits", price: "$2", stocked: false, name: "Passionfruit" },
  { category: "Vegetables", price: "$2", stocked: true, name: "Spinach" },
  { category: "Vegetables", price: "$4", stocked: false, name: "Pumpkin" },
  { category: "Vegetables", price: "$1", stocked: true, name: "Peas" }
]

----------------------------------------

TITLE: Babel Configuration for React Compiler
DESCRIPTION: Configuration example for setting up React Compiler as a Babel plugin, which must run first in the pipeline.

LANGUAGE: javascript
CODE:
// babel.config.js
const ReactCompilerConfig = { /* ... */ };

module.exports = function () {
  return {
    plugins: [
      ['babel-plugin-react-compiler', ReactCompilerConfig], // must run first!
      // ...
    ],
  };
};

----------------------------------------

TITLE: Migrating from ReactDOM.render to createRoot
DESCRIPTION: Example showing how to migrate from ReactDOM.render to the new createRoot API.

LANGUAGE: javascript
CODE:
// Before
import {render} from 'react-dom';
render(<App />, document.getElementById('root'));

// After
import {createRoot} from 'react-dom/client';
const root = createRoot(document.getElementById('root'));
root.render(<App />);

----------------------------------------

TITLE: Basic Counter Component State Demo
DESCRIPTION: Demonstrates how React preserves state for components rendered in the same position in the tree. Shows two independent Counter components each maintaining their own state.

LANGUAGE: javascript
CODE:
import { useState } from 'react';

export default function App() {
  return (
    <div>
      <Counter />
      <Counter />
    </div>
  );
}

function Counter() {
  const [score, setScore] = useState(0);
  const [hover, setHover] = useState(false);

  let className = 'counter';
  if (hover) {
    className += ' hover';
  }

  return (
    <div
      className={className}
      onPointerEnter={() => setHover(true)}
      onPointerLeave={() => setHover(false)}
    >
      <h1>{score}</h1>
      <button onClick={() => setScore(score + 1)}>
        Add one
      </button>
    </div>
  );
}

----------------------------------------

TITLE: Synchronizing a Video Player with React State
DESCRIPTION: This example demonstrates how to use an Effect to synchronize a video player's play/pause state with React state. It uses a ref to access the DOM element and calls play() or pause() methods in the Effect.

LANGUAGE: JavaScript
CODE:
function VideoPlayer({ src, isPlaying }) {
  const ref = useRef(null);

  useEffect(() => {
    if (isPlaying) {
      ref.current.play();
    } else {
      ref.current.pause();
    }
  });

  return <video ref={ref} src={src} loop playsInline />;
}

----------------------------------------

TITLE: Closing Tags in JSX
DESCRIPTION: This example illustrates the requirement in JSX to explicitly close all tags, including self-closing tags like <img> and wrapping tags like <li>. It shows how to properly close these tags in JSX syntax.

LANGUAGE: jsx
CODE:
<>
  <img 
    src="https://i.imgur.com/yXOvdOSs.jpg" 
    alt="Hedy Lamarr" 
    class="photo"
   />
  <ul>
    <li>Invent new traffic lights</li>
    <li>Rehearse a movie scene</li>
    <li>Improve the spectrum technology</li>
  </ul>
</>

----------------------------------------

TITLE: Actions with useTransition Example
DESCRIPTION: Example demonstrating the use of Actions with useTransition for handling pending states automatically

LANGUAGE: javascript
CODE:
function UpdateName({}) {
  const [name, setName] = useState("");
  const [error, setError] = useState(null);
  const [isPending, startTransition] = useTransition();

  const handleSubmit = () => {
    startTransition(async () => {
      const error = await updateName(name);
      if (error) {
        setError(error);
        return;
      } 
      redirect("/path");
    })
  };

  return (
    <div>
      <input value={name} onChange={(event) => setName(event.target.value)} />
      <button onClick={handleSubmit} disabled={isPending}>
        Update
      </button>
      {error && <p>{error}</p>}
    </div>
  );
}

----------------------------------------

TITLE: Using JavaScript Variables in JSX (React)
DESCRIPTION: This example shows how to use JavaScript variables within JSX by replacing quotes with curly braces. It demonstrates dynamic assignment of src and alt attributes in an Avatar component.

LANGUAGE: jsx
CODE:
export default function Avatar() {
  const avatar = 'https://i.imgur.com/7vQD0fPs.jpg';
  const description = 'Gregorio Y. Zara';
  return (
    <img
      className="avatar"
      src={avatar}
      alt={description}
    />
  );
}

----------------------------------------

TITLE: Using Context in Child Components
DESCRIPTION: Access tasks state and dispatch function in child components using the useContext hook.

LANGUAGE: JavaScript
CODE:
export default function TaskList() {
  const tasks = useContext(TasksContext);
  const dispatch = useContext(TasksDispatchContext);
  // Use tasks and dispatch...
}

----------------------------------------

TITLE: Debugging React Version Mismatch
DESCRIPTION: Code snippet for debugging potential React version mismatches or duplicate React installations in a project. This helps identify if multiple versions of React are being used, which can cause hook-related errors.

LANGUAGE: javascript
CODE:
// Add this in node_modules/react-dom/index.js
window.React1 = require('react');

// Add this in your component file
require('react-dom');
window.React2 = require('react');
console.log(window.React1 === window.React2);

----------------------------------------

TITLE: Data Fetching in React Component
DESCRIPTION: An example of data fetching within a React component using useEffect, illustrating the potential for network waterfalls.

LANGUAGE: javascript
CODE:
export default function Dashboard() {
  const [data, setData] = useState(null);

  // ❌ Fetching data in a component causes network waterfalls
  useEffect(() => {
    fetch('/api/data')
      .then(response => response.json())
      .then(data => setData(data));
  }, []);

  return (
    <div>
      {data.map(item => <div key={item.id}>{item.name}</div>)}
    </div>
  )
}

----------------------------------------

TITLE: Creating Context for Tasks and Dispatch
DESCRIPTION: Create two separate contexts for tasks state and dispatch function using React's createContext API.

LANGUAGE: JavaScript
CODE:
import { createContext } from 'react';

export const TasksContext = createContext(null);
export const TasksDispatchContext = createContext(null);

----------------------------------------

TITLE: Providing Context in TaskApp Component
DESCRIPTION: Wrap child components with context providers to make tasks state and dispatch function available throughout the component tree.

LANGUAGE: JSX
CODE:
export default function TaskApp() {
  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);
  return (
    <TasksContext.Provider value={tasks}>
      <TasksDispatchContext.Provider value={dispatch}>
        <h1>Day off in Kyoto</h1>
        <AddTask />
        <TaskList />
      </TasksDispatchContext.Provider>
    </TasksContext.Provider>
  );
}

----------------------------------------

TITLE: Passing Key Value as Separate Prop in React JSX
DESCRIPTION: Demonstrates the correct pattern for accessing a key's value inside a child component by passing it as a separate prop. Since 'key' is a special React prop that cannot be accessed directly, the value must be duplicated as another prop if needed in the component.

LANGUAGE: jsx
CODE:
<ListItemWrapper key={result.id} id={result.id} />

----------------------------------------

TITLE: Implementing Tic-Tac-Toe Game in React
DESCRIPTION: This code snippet demonstrates how to build a Tic-Tac-Toe game using React components and hooks. It includes state management, conditional rendering, and game logic implementation.

LANGUAGE: javascript
CODE:
import { useState } from 'react';

function Square({ value, onSquareClick }) {
  return (
    <button className="square" onClick={onSquareClick}>
      {value}
    </button>
  );
}

function Board({ xIsNext, squares, onPlay }) {
  function handleClick(i) {
    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    const nextSquares = squares.slice();
    if (xIsNext) {
      nextSquares[i] = 'X';
    } else {
      nextSquares[i] = 'O';
    }
    onPlay(nextSquares);
  }

  const winner = calculateWinner(squares);
  let status;
  if (winner) {
    status = 'Winner: ' + winner;
  } else {
    status = 'Next player: ' + (xIsNext ? 'X' : 'O');
  }

  return (
    <>
      <div className="status">{status}</div>
      <div className="board-row">
        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
      </div>
      <div className="board-row">
        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
      </div>
    </>
  );
}

export default function Game() {
  const [history, setHistory] = useState([Array(9).fill(null)]);
  const [currentMove, setCurrentMove] = useState(0);
  const xIsNext = currentMove % 2 === 0;
  const currentSquares = history[currentMove];

  function handlePlay(nextSquares) {
    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];
    setHistory(nextHistory);
    setCurrentMove(nextHistory.length - 1);
  }

  function jumpTo(nextMove) {
    setCurrentMove(nextMove);
  }

  const moves = history.map((squares, move) => {
    let description;
    if (move > 0) {
      description = 'Go to move #' + move;
    } else {
      description = 'Go to game start';
    }
    return (
      <li key={move}>
        <button onClick={() => jumpTo(move)}>{description}</button>
      </li>
    );
  });

  return (
    <div className="game">
      <div className="game-board">
        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />
      </div>
      <div className="game-info">
        <ol>{moves}</ol>
      </div>
    </div>
  );
}

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}

LANGUAGE: css
CODE:
* {
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  margin: 20px;
  padding: 0;
}

.square {
  background: #fff;
  border: 1px solid #999;
  float: left;
  font-size: 24px;
  font-weight: bold;
  line-height: 34px;
  height: 34px;
  margin-right: -1px;
  margin-top: -1px;
  padding: 0;
  text-align: center;
  width: 34px;
}

.board-row:after {
  clear: both;
  content: '';
  display: table;
}

.status {
  margin-bottom: 10px;
}
.game {
  display: flex;
  flex-direction: row;
}

.game-info {
  margin-left: 20px;
}

----------------------------------------

TITLE: Implementing a Form with Delayed Submission in React
DESCRIPTION: This example demonstrates how React maintains state consistency in asynchronous operations. It shows a form that sends a message with a delay, illustrating how the state snapshot works in practice.

LANGUAGE: JavaScript
CODE:
import { useState } from 'react';

export default function Form() {
  const [to, setTo] = useState('Alice');
  const [message, setMessage] = useState('Hello');

  function handleSubmit(e) {
    e.preventDefault();
    setTimeout(() => {
      alert(`You said ${message} to ${to}`);
    }, 5000);
  }

  return (
    <form onSubmit={handleSubmit}>
      <label>
        To:{' '}
        <select
          value={to}
          onChange={e => setTo(e.target.value)}>
          <option value="Alice">Alice</option>
          <option value="Bob">Bob</option>
        </select>
      </label>
      <textarea
        placeholder="Message"
        value={message}
        onChange={e => setMessage(e.target.value)}
      />
      <button type="submit">Send</button>
    </form>
  );
}

----------------------------------------

TITLE: Implementing a Form Imperatively with DOM Manipulation
DESCRIPTION: An example of a form implemented imperatively using plain JavaScript and DOM manipulation. It shows form submission, input handling, and updating the UI without React.

LANGUAGE: JavaScript
CODE:
async function handleFormSubmit(e) {
  e.preventDefault();
  disable(textarea);
  disable(button);
  show(loadingMessage);
  hide(errorMessage);
  try {
    await submitForm(textarea.value);
    show(successMessage);
    hide(form);
  } catch (err) {
    show(errorMessage);
    errorMessage.textContent = err.message;
  } finally {
    hide(loadingMessage);
    enable(textarea);
    enable(button);
  }
}

function handleTextareaChange() {
  if (textarea.value.length === 0) {
    disable(button);
  } else {
    enable(button);
  }
}

function hide(el) {
  el.style.display = 'none';
}

function show(el) {
  el.style.display = '';
}

function enable(el) {
  el.disabled = false;
}

function disable(el) {
  el.disabled = true;
}

function submitForm(answer) {
  // Pretend it's hitting the network.
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (answer.toLowerCase() === 'istanbul') {
        resolve();
      } else {
        reject(new Error('Good guess but a wrong answer. Try again!'));
      }
    }, 1500);
  });
}

let form = document.getElementById('form');
let textarea = document.getElementById('textarea');
let button = document.getElementById('button');
let loadingMessage = document.getElementById('loading');
let errorMessage = document.getElementById('error');
let successMessage = document.getElementById('success');
form.onsubmit = handleFormSubmit;
textarea.oninput = handleTextareaChange;

----------------------------------------

TITLE: Incorrect Prop Forwarding in React Component
DESCRIPTION: This example demonstrates incorrect prop forwarding in a React component, where the 'layout' prop is unintentionally passed to a div element.

LANGUAGE: javascript
CODE:
function MyDiv(props) {
  if (props.layout === 'horizontal') {
    // BAD! Because you know for sure "layout" is not a prop that <div> understands.
    return <div {...props} style={getHorizontalStyle()} />
  } else {
    // BAD! Because you know for sure "layout" is not a prop that <div> understands.
    return <div {...props} style={getVerticalStyle()} />
  }
}

----------------------------------------

TITLE: Conditional Rendering in React with Logical AND Operator
DESCRIPTION: This example shows how to use the logical AND (&&) operator for conditional rendering in React. It displays an item's importance only if it's greater than zero.

LANGUAGE: javascript
CODE:
function Item({ name, importance }) {
  return (
    <li className="item">
      {name}
      {importance > 0 && ' '}
      {importance > 0 &&
        <i>(Importance: {importance})</i>
      }
    </li>
  );
}

export default function PackingList() {
  return (
    <section>
      <h1>Sally Ride's Packing List</h1>
      <ul>
        <Item 
          importance={9} 
          name="Space suit" 
        />
        <Item 
          importance={0} 
          name="Helmet with a golden leaf" 
        />
        <Item 
          importance={6} 
          name="Photo of Tam" 
        />
      </ul>
    </section>
  );
}

----------------------------------------

TITLE: Installing Parcel as a Build Tool for React
DESCRIPTION: Command to install Parcel as a development dependency. Parcel offers an out-of-the-box development experience and can scale from small to large production applications.

LANGUAGE: bash
CODE:
npm install --save-dev parcel

----------------------------------------

TITLE: React Compiler Directory Configuration
DESCRIPTION: Configuration example showing how to set up React Compiler to only run on specific directories.

LANGUAGE: javascript
CODE:
const ReactCompilerConfig = {
  sources: (filename) => {
    return filename.indexOf('src/path/to/dir') !== -1;
  },
};

----------------------------------------

TITLE: Replacing Simulate with fireEvent from @testing-library/react
DESCRIPTION: Shows how to migrate from the deprecated Simulate utility to fireEvent from @testing-library/react for triggering events in tests.

LANGUAGE: javascript
CODE:
import {Simulate} from 'react-dom/test-utils';

const element = document.querySelector('button');
Simulate.click(element);

LANGUAGE: javascript
CODE:
import {fireEvent} from '@testing-library/react';

const element = document.querySelector('button');
fireEvent.click(element);

----------------------------------------

TITLE: Incorrect Usage of Hooks in React Components
DESCRIPTION: Illustrates common mistakes when using hooks, such as placing them inside conditions, loops, or after conditional returns. These patterns violate the Rules of Hooks and should be avoided.

LANGUAGE: javascript
CODE:
function Bad({ cond }) {
  if (cond) {
    // 🔴 Bad: inside a condition (to fix, move it outside!)
    const theme = useContext(ThemeContext);
  }
  // ...
}

function Bad() {
  for (let i = 0; i < 10; i++) {
    // 🔴 Bad: inside a loop (to fix, move it outside!)
    const theme = useContext(ThemeContext);
  }
  // ...
}

function Bad({ cond }) {
  if (cond) {
    return;
  }
  // 🔴 Bad: after a conditional return (to fix, move it before the return!)
  const theme = useContext(ThemeContext);
  // ...
}

function Bad() {
  function handleClick() {
    // 🔴 Bad: inside an event handler (to fix, move it outside!)
    const theme = useContext(ThemeContext);
  }
  // ...
}

function Bad() {
  const style = useMemo(() => {
    // 🔴 Bad: inside useMemo (to fix, move it outside!)
    const theme = useContext(ThemeContext);
    return createStyle(theme);
  });
  // ...
}

class Bad extends React.Component {
  render() {
    // 🔴 Bad: inside a class component (to fix, write a function component instead of a class!)
    useEffect(() => {})
    // ...
  }
}

----------------------------------------

TITLE: Creating an Expo Project
DESCRIPTION: This command initializes a new Expo project for building universal Android, iOS, and web apps using React Native.

LANGUAGE: bash
CODE:
npx create-expo-app@latest

----------------------------------------

TITLE: ESLint Configuration for React Compiler - Legacy Format
DESCRIPTION: Configuration example for setting up the React Compiler ESLint plugin using the legacy eslintrc format.

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: [
    'eslint-plugin-react-compiler',
  ],
  rules: {
    'react-compiler/react-compiler': 'error',
  },
}

----------------------------------------

TITLE: Correct Hook Usage in React Function Components and Custom Hooks
DESCRIPTION: This snippet demonstrates the correct way to use Hooks at the top level of function components and custom Hooks. It shows examples of using useState in both contexts.

LANGUAGE: javascript
CODE:
function Counter() {
  // ✅ Good: top-level in a function component
  const [count, setCount] = useState(0);
  // ...
}

function useWindowWidth() {
  // ✅ Good: top-level in a custom Hook
  const [width, setWidth] = useState(window.innerWidth);
  // ...
}

----------------------------------------

TITLE: Committing and Pushing Changes
DESCRIPTION: Git commands for staging, committing, and pushing changes to a fork of the repository.

LANGUAGE: bash
CODE:
git add -A && git commit -m "My message"
git push my-fork-name the-name-of-my-branch

----------------------------------------

TITLE: Launching React DevTools CLI
DESCRIPTION: Command to start the React Developer Tools from the terminal after installation.

LANGUAGE: bash
CODE:
react-devtools

----------------------------------------

TITLE: Demonstrating React's State Update Batching
DESCRIPTION: This example shows how React batches multiple state updates in a single event handler. Despite calling setNumber three times, the counter only increments by 1 due to batching.

LANGUAGE: JavaScript
CODE:
import { useState } from 'react';

export default function Counter() {
  const [number, setNumber] = useState(0);

  return (
    <>
      <h1>{number}</h1>
      <button onClick={() => {
        setNumber(number + 1);
        setNumber(number + 1);
        setNumber(number + 1);
      }}>+3</button>
    </>
  )
}

LANGUAGE: CSS
CODE:
button { display: inline-block; margin: 10px; font-size: 20px; }
h1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }

----------------------------------------

TITLE: Accessing Server Function Reference in Client Component
DESCRIPTION: Shows how a Client Component receives and logs a reference to a Server Function passed as a prop.

LANGUAGE: jsx
CODE:
"use client";

export default function Button({onClick}) { 
  console.log(onClick); 
  // {$$typeof: Symbol.for("react.server.reference"), $$id: 'createNoteAction'}
  return <button onClick={() => onClick()}>Create Empty Note</button>
}

----------------------------------------

TITLE: Demonstrating Code Highlighting in Markdown
DESCRIPTION: These snippets show how to use line highlighting in Markdown code blocks for JavaScript, including single line, range, and multiple range highlighting.

LANGUAGE: markdown
CODE:
```js {2}
function hello() {
  // this line will get highlighted
}
```

LANGUAGE: markdown
CODE:
```js {2-4}
function hello() {
  // these lines
  // will get
  // highlighted
}
```

LANGUAGE: markdown
CODE:
```js {2-4,6}
function hello() {
  // these lines
  // will get
  // highlighted
  console.log('hello');
  // also this one
  console.log('there');
}
```

----------------------------------------

TITLE: JSX Fragment Example
DESCRIPTION: Demonstrates the use of JSX fragments to return multiple elements without a wrapper div.

LANGUAGE: JavaScript
CODE:
function AboutPage() {
  return (
    <>
      <h1>About</h1>
      <p>Hello there.<br />How do you do?</p>
    </>
  );
}

----------------------------------------

TITLE: Pure Component with Local Mutation - React
DESCRIPTION: Shows acceptable local mutation within a component where the modified data is created during the render.

LANGUAGE: jsx
CODE:
function TeaGathering() {
  let cups = [];
  for (let i = 1; i <= 12; i++) {
    cups.push(<Cup key={i} guest={i} />);
  }
  return cups;
}

----------------------------------------

TITLE: Creating a Server Function in a Server Component
DESCRIPTION: Demonstrates how to define a Server Function within a Server Component using the 'use server' directive. The function is passed as a prop to a Client Component.

LANGUAGE: jsx
CODE:
// Server Component
import Button from './Button';

function EmptyNote () {
  async function createNoteAction() {
    // Server Function
    'use server';
    
    await db.notes.create();
  }

  return <Button onClick={createNoteAction}/>;
}

----------------------------------------

TITLE: Basic 'use client' Component Implementation
DESCRIPTION: Example showing basic usage of 'use client' directive in a React component file. Demonstrates importing dependencies and creating a component that will run on the client side.

LANGUAGE: javascript
CODE:
'use client';

import { useState } from 'react';
import { formatDate } from './formatters';
import Button from './button';

export default function RichTextEditor({ timestamp, text }) {
  const date = formatDate(timestamp);
  // ...
  const editButton = <Button />;
  // ...
}

----------------------------------------

TITLE: Form Actions with useActionState Example
DESCRIPTION: Example showing simplified form handling using form Actions and useActionState

LANGUAGE: javascript
CODE:
function ChangeName({ name, setName }) {
  const [error, submitAction, isPending] = useActionState(
    async (previousState, formData) => {
      const error = await updateName(formData.get("name"));
      if (error) {
        return error;
      }
      redirect("/path");
      return null;
    },
    null,
  );

  return (
    <form action={submitAction}>
      <input type="text" name="name" />
      <button type="submit" disabled={isPending}>Update</button>
      {error && <p>{error}</p>}
    </form>
  );
}

----------------------------------------

TITLE: Component File Separation in React
DESCRIPTION: Shows how to separate components into different files using import/export. App.js imports Gallery from Gallery.js file.

LANGUAGE: jsx
CODE:
// App.js
import Gallery from './Gallery.js';

export default function App() {
  return (
    <Gallery />
  );
}

LANGUAGE: jsx
CODE:
// Gallery.js
function Profile() {
  return (
    <img
      src="https://i.imgur.com/QIrZWGIs.jpg"
      alt="Alan L. Hart"
    />
  );
}

export default function Gallery() {
  return (
    <section>
      <h1>Amazing scientists</h1>
      <Profile />
      <Profile />
      <Profile />
    </section>
  );
}

----------------------------------------

TITLE: Complete Data Protection Example with Server and Client Components
DESCRIPTION: Demonstrates a full example showing the incorrect way of passing user data and how taintObjectReference prevents security issues

LANGUAGE: javascript
CODE:
// api.js
export async function getUser(id) {
  const user = await db`SELECT * FROM users WHERE id = ${id}`;
  return user;
}

LANGUAGE: javascript
CODE:
import { getUser } from 'api.js';
import { InfoCard } from 'components.js';

export async function Profile(props) {
  const user = await getUser(props.userId);
  // DO NOT DO THIS
  return <InfoCard user={user} />;
}

LANGUAGE: javascript
CODE:
// components.js
"use client";

export async function InfoCard({ user }) {
  return <div>{user.name}</div>;
}

----------------------------------------

TITLE: Canvas Drawing with Client APIs
DESCRIPTION: Example showing how to use browser DOM APIs in a client component by marking it with 'use client' directive.

LANGUAGE: javascript
CODE:
'use client';

import {useRef, useEffect} from 'react';

export default function Circle() {
  const ref = useRef(null);
  useLayoutEffect(() => {
    const canvas = ref.current;
    const context = canvas.getContext('2d');
    context.reset();
    context.beginPath();
    context.arc(100, 75, 50, 0, 2 * Math.PI);
    context.stroke();
  });
  return <canvas ref={ref} />;
}

----------------------------------------

TITLE: Installing React 19 Dependencies
DESCRIPTION: Commands for installing React 19 and its TypeScript types using npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install --save-exact react@^19.0.0 react-dom@^19.0.0

LANGUAGE: bash
CODE:
yarn add --exact react@^19.0.0 react-dom@^19.0.0

LANGUAGE: bash
CODE:
npm install --save-exact @types/react@^19.0.0 @types/react-dom@^19.0.0

LANGUAGE: bash
CODE:
yarn add --exact @types/react@^19.0.0 @types/react-dom@^19.0.0

----------------------------------------

TITLE: Manipulating DOM with refs in React
DESCRIPTION: Shows how to use refs to access and manipulate DOM elements managed by React, such as focusing an input element.

LANGUAGE: jsx
CODE:
import { useRef } from 'react';

export default function Form() {
  const inputRef = useRef(null);

  function handleClick() {
    inputRef.current.focus();
  }

  return (
    <>
      <input ref={inputRef} />
      <button onClick={handleClick}>
        Focus the input
      </button>
    </>
  );
}

----------------------------------------

TITLE: Using useEffectEvent Hook in React
DESCRIPTION: This snippet demonstrates the basic usage of the useEffectEvent Hook in React. It creates an Effect Event named onSomething by passing a callback function to useEffectEvent.

LANGUAGE: javascript
CODE:
const onSomething = useEffectEvent(callback)

----------------------------------------

TITLE: Server Function with Error Handling
DESCRIPTION: Shows a Server Function that includes input validation and error handling.

LANGUAGE: javascript
CODE:
"use server";

export async function updateName(name) {
  if (!name) {
    return {error: 'Name is required'};
  }
  await db.users.updateName(name);
}

----------------------------------------

TITLE: Using useState Hook for Checkbox in React
DESCRIPTION: This example demonstrates how to use the useState hook to manage a checkbox state in React. It shows state management for boolean values and handling checkbox changes.

LANGUAGE: javascript
CODE:
import { useState } from 'react';

export default function MyCheckbox() {
  const [liked, setLiked] = useState(true);

  function handleChange(e) {
    setLiked(e.target.checked);
  }

  return (
    <>
      <label>
        <input
          type="checkbox"
          checked={liked}
          onChange={handleChange}
        />
        I liked this
      </label>
      <p>You {liked ? 'liked' : 'did not like'} this.</p>
    </>
  );
}

----------------------------------------

TITLE: Creating a React Router Project
DESCRIPTION: This command sets up a new React Router framework project using the create-react-router CLI tool.

LANGUAGE: bash
CODE:
npx create-react-router@latest

----------------------------------------

TITLE: Importing and Using useOptimistic Hook in React
DESCRIPTION: This snippet demonstrates how to import and use the useOptimistic Hook in a React component. It shows the basic structure of the Hook, including the state and update function parameters.

LANGUAGE: javascript
CODE:
import { useOptimistic } from 'react';

function AppContainer() {
  const [optimisticState, addOptimistic] = useOptimistic(
    state,
    // updateFn
    (currentState, optimisticValue) => {
      // merge and return new state
      // with optimistic value
    }
  );
}

----------------------------------------

TITLE: Server Functions with useActionState Hook
DESCRIPTION: Shows how to use the useActionState hook with Server Functions to manage action state and handle form submissions.

LANGUAGE: jsx
CODE:
"use client";

import {updateName} from './actions';

function UpdateName() {
  const [state, submitAction, isPending] = useActionState(updateName, {error: null});

  return (
    <form action={submitAction}>
      <input type="text" name="name" disabled={isPending}/>
      {state.error && <span>Failed: {state.error}</span>}
    </form>
  );
}

----------------------------------------

TITLE: Implementing Automatic Batching in React 18
DESCRIPTION: Example showing how state updates are automatically batched in React 18 compared to previous versions. Updates inside timeouts, promises, and native event handlers are now batched by default.

LANGUAGE: JavaScript
CODE:
setTimeout(() => {
  setCount(c => c + 1);
  setFlag(f => !f);
  // React will only re-render once at the end (that's batching!)
}, 1000);

----------------------------------------

TITLE: HTML Structure for Partial React Rendering
DESCRIPTION: This HTML snippet shows the structure of a page where React will render a component in a specific element (nav with id 'navigation') while preserving other HTML content.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <head><title>My app</title></head>
  <body>
    <p>This paragraph is a part of HTML.</p>
    <nav id="navigation"></nav>
    <p>This paragraph is also a part of HTML.</p>
  </body>
</html>

----------------------------------------

TITLE: Implementing Search with Deferred Results
DESCRIPTION: Example showing how to implement a search interface with deferred results using useDeferredValue to maintain responsiveness.

LANGUAGE: javascript
CODE:
import { useState, useDeferredValue } from 'react';

function SearchPage() {
  const [query, setQuery] = useState('');
  const deferredQuery = useDeferredValue(query);
  // ...
}

----------------------------------------

TITLE: Client-Side Alternative to renderToString
DESCRIPTION: Example showing the preferred client-side approach using createRoot instead of renderToString.

LANGUAGE: javascript
CODE:
import { createRoot } from 'react-dom/client';
import { flushSync } from 'react-dom';

const div = document.createElement('div');
const root = createRoot(div);
flushSync(() => {
  root.render(<MyIcon />);
});
console.log(div.innerHTML);

----------------------------------------

TITLE: Implementing Transitions with startTransition API
DESCRIPTION: Example showing how to use the startTransition API to mark state updates as transitions vs urgent updates. Used for handling input events with both immediate feedback and deferred processing.

LANGUAGE: JavaScript
CODE:
import { startTransition } from 'react';

// Urgent: Show what was typed
setInputValue(input);

// Mark any state updates inside as transitions
startTransition(() => {
  // Transition: Show the results
  setSearchQuery(input);
});

----------------------------------------

TITLE: Form Component with Object Spread
DESCRIPTION: Shows correct way to update nested object state using spread operator

LANGUAGE: javascript
CODE:
function handleFirstNameChange(e) {
  setPerson({
    ...person,
    firstName: e.target.value
  });
}

----------------------------------------

TITLE: Username Form with Form Status Tracking
DESCRIPTION: Implementation of a username request form that displays submission status and form data using useFormStatus

LANGUAGE: javascript
CODE:
import {useState, useMemo, useRef} from 'react';
import {useFormStatus} from 'react-dom';

export default function UsernameForm() {
  const {pending, data} = useFormStatus();

  return (
    <div>
      <h3>Request a Username: </h3>
      <input type="text" name="username" disabled={pending}/>
      <button type="submit" disabled={pending}>
        Submit
      </button>
      <br />
      <p>{data ? `Requesting ${data?.get("username")}...`: ''}</p>
    </div>
  );
}

----------------------------------------

TITLE: Server Route Handler Implementation
DESCRIPTION: Example of using renderToStaticMarkup in a server route handler to generate and send HTML response.

LANGUAGE: javascript
CODE:
import { renderToStaticMarkup } from 'react-dom/server';

// The route handler syntax depends on your backend framework
app.use('/', (request, response) => {
  const html = renderToStaticMarkup(<Page />);
  response.send(html);
});

----------------------------------------

TITLE: Installing React 18 Release Candidate
DESCRIPTION: Command to install the React 18 Release Candidate using npm. This allows developers to try out the new version before its official stable release.

LANGUAGE: bash
CODE:
npm install react@rc react-dom@rc

----------------------------------------

TITLE: Form Component with Immer
DESCRIPTION: Demonstrates using Immer for simpler nested state updates

LANGUAGE: javascript
CODE:
const [person, updatePerson] = useImmer({
  name: 'Niki de Saint Phalle',
  artwork: {
    title: 'Blue Nana',
    city: 'Hamburg',
    image: 'https://i.imgur.com/Sd1AgUOm.jpg',
  }
});

function handleTitleChange(e) {
  updatePerson(draft => {
    draft.artwork.title = e.target.value;
  });
}

----------------------------------------

TITLE: Using refs to store mutable values in React
DESCRIPTION: Demonstrates how to use useRef to store a mutable value that doesn't trigger re-renders when changed.

LANGUAGE: jsx
CODE:
import { useRef } from 'react';

export default function Counter() {
  let ref = useRef(0);

  function handleClick() {
    ref.current = ref.current + 1;
    alert('You clicked ' + ref.current + ' times!');
  }

  return (
    <button onClick={handleClick}>
      Click me!
    </button>
  );
}

----------------------------------------

TITLE: Legacy Server Rendering APIs
DESCRIPTION: Traditional methods for server-side rendering React components in non-streaming environments, including renderToString for interactive components and renderToStaticMarkup for non-interactive content.

LANGUAGE: javascript
CODE:
renderToString
renderToStaticMarkup

----------------------------------------

TITLE: Correct Usage of Hooks in React Function Components and Custom Hooks
DESCRIPTION: Demonstrates the proper placement of hooks at the top level of function components and custom hooks. This is the correct way to use hooks in React.

LANGUAGE: javascript
CODE:
function Counter() {
  // ✅ Good: top-level in a function component
  const [count, setCount] = useState(0);
  // ...
}

function useWindowWidth() {
  // ✅ Good: top-level in a custom Hook
  const [width, setWidth] = useState(window.innerWidth);
  // ...
}

----------------------------------------

TITLE: Streaming Content with Suspense
DESCRIPTION: Illustrates how to use Suspense boundaries to stream content as it becomes available, improving perceived loading performance.

LANGUAGE: jsx
CODE:
function ProfilePage() {
  return (
    <ProfileLayout>
      <ProfileCover />
      <Suspense fallback={<BigSpinner />}>
        <Sidebar>
          <Friends />
          <Photos />
        </Sidebar>
        <Suspense fallback={<PostsGlimmer />}>
          <Posts />
        </Suspense>
      </Suspense>
    </ProfileLayout>
  );
}

----------------------------------------

TITLE: Effect with Empty Dependencies
DESCRIPTION: Example demonstrating an Effect that only runs on mount/unmount when it has no dependencies

LANGUAGE: jsx
CODE:
const serverUrl = 'https://localhost:1234';
const roomId = 'general';

function ChatRoom() {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, []); // Empty dependencies
}

----------------------------------------

TITLE: React Form Component Usage
DESCRIPTION: Example of using controlled form components in React where passing a value prop makes them controlled components.

LANGUAGE: JSX
CODE:
<input value={value} onChange={handleChange} />

----------------------------------------

TITLE: Detecting Code that Runs During Render
DESCRIPTION: Demonstrates how to identify code that executes during the render phase versus code that runs in event handlers or effects.

LANGUAGE: javascript
CODE:
function Dropdown() {
  const selectedItems = new Set(); // created during render
  // ...
}

----------------------------------------

TITLE: Error Handling in renderToPipeableStream
DESCRIPTION: Demonstrates how to handle errors during server-side rendering, including shell errors and logging.

LANGUAGE: javascript
CODE:
const { pipe } = renderToPipeableStream(<App />, {
  bootstrapScripts: ['/main.js'],
  onShellReady() {
    response.setHeader('content-type', 'text/html');
    pipe(response);
  },
  onShellError(error) {
    response.statusCode = 500;
    response.setHeader('content-type', 'text/html');
    response.send('<h1>Something went wrong</h1>'); 
  },
  onError(error) {
    console.error(error);
    logServerCrashReport(error);
  }
});

----------------------------------------

TITLE: Handling Prop Changes Over Time in React
DESCRIPTION: Illustrates how props can change over time in a React component. The Clock component receives color and time props that can be updated by its parent component.

LANGUAGE: jsx
CODE:
export default function Clock({ color, time }) {
  return (
    <h1 style={{ color: color }}>
      {time}
    </h1>
  );
}

----------------------------------------

TITLE: Error Handling Configuration
DESCRIPTION: Example showing how to configure error handling callbacks when using hydrateRoot

LANGUAGE: javascript
CODE:
import { hydrateRoot } from "react-dom/client";
import { reportCaughtError } from "./reportError";

const container = document.getElementById("root");
const root = hydrateRoot(container, {
  onCaughtError: (error, errorInfo) => {
    if (error.message !== "Known error") {
      reportCaughtError({
        error,
        componentStack: errorInfo.componentStack,
      });
    }
  },
});

----------------------------------------

TITLE: Fixing Non-Idempotent Clock Component
DESCRIPTION: Example of converting a non-idempotent clock implementation to a proper React component using useEffect for time updates.

LANGUAGE: javascript
CODE:
import { useState, useEffect } from 'react';

function useTime() {
  const [time, setTime] = useState(() => new Date());

  useEffect(() => {
    const id = setInterval(() => {
      setTime(new Date());
    }, 1000);
    return () => clearInterval(id);
  }, []);

  return time;
}

export default function Clock() {
  const time = useTime();
  return <span>{time.toLocaleString()}</span>;
}

----------------------------------------

TITLE: Importing Server-side Rendering APIs in React
DESCRIPTION: Demonstrates how to import server-side rendering APIs from the react-dom/server entry point. These APIs are used for rendering React components on the server.

LANGUAGE: javascript
CODE:
import { /* server-side APIs */ } from 'react-dom/server';

----------------------------------------

TITLE: Using Updater Functions for Multiple State Updates
DESCRIPTION: This example demonstrates how to use updater functions to apply multiple updates to the same state variable before the next render. Each updater function is queued and processed in order.

LANGUAGE: JavaScript
CODE:
import { useState } from 'react';

export default function Counter() {
  const [number, setNumber] = useState(0);

  return (
    <>
      <h1>{number}</h1>
      <button onClick={() => {
        setNumber(n => n + 1);
        setNumber(n => n + 1);
        setNumber(n => n + 1);
      }}>+3</button>
    </>
  )
}

LANGUAGE: CSS
CODE:
button { display: inline-block; margin: 10px; font-size: 20px; }
h1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }

----------------------------------------

TITLE: Rendering React Components to Static HTML Stream
DESCRIPTION: Example of using prerenderToNodeStream to render a React component to a static HTML stream. It demonstrates setting up a route handler, rendering the component, and piping the result to the response.

LANGUAGE: javascript
CODE:
import { prerenderToNodeStream } from 'react-dom/static';

// The route handler syntax depends on your backend framework
app.use('/', async (request, response) => {
  const { prelude } = await prerenderToNodeStream(<App />, {
    bootstrapScripts: ['/main.js'],
  });
  
  response.setHeader('Content-Type', 'text/plain');
  prelude.pipe(response);
});

----------------------------------------

TITLE: Installing React.dev Dependencies
DESCRIPTION: Commands for navigating to the project directory and installing npm dependencies using Yarn package manager.

LANGUAGE: bash
CODE:
cd react.dev
yarn

----------------------------------------

TITLE: Importing and Using Server Functions in Client Components
DESCRIPTION: Demonstrates importing and using a Server Function within a Client Component.

LANGUAGE: jsx
CODE:
"use client";
import {createNote} from './actions';

function EmptyNote() {
  console.log(createNote);
  // {$$typeof: Symbol.for("react.server.reference"), $$id: 'createNote'}
  <button onClick={() => createNote()} />
}

----------------------------------------

TITLE: Removing an Item from an Array in React State
DESCRIPTION: Demonstrates removing an item from an array in state using the filter() method to create a new filtered array.

LANGUAGE: JavaScript
CODE:
setArtists(
  artists.filter(a => a.id !== artist.id)
);

----------------------------------------

TITLE: Hydrating Server-Rendered React App on Client
DESCRIPTION: Example of hydrating a server-rendered React application on the client side using hydrateRoot. This code attaches event listeners to the static HTML, making it interactive.

LANGUAGE: javascript
CODE:
import { hydrateRoot } from 'react-dom/client';
import App from './App.js';

hydrateRoot(document, <App />);

----------------------------------------

TITLE: Git Branch Management Commands
DESCRIPTION: Series of Git commands for creating and updating a new feature branch from the main branch.

LANGUAGE: bash
CODE:
git checkout main
git pull origin main
git checkout -b the-name-of-my-branch

----------------------------------------

TITLE: Progressive Enhancement with useActionState
DESCRIPTION: Demonstrates how to use useActionState for progressive enhancement, allowing form submission before JavaScript loads.

LANGUAGE: jsx
CODE:
"use client";

import {updateName} from './actions';

function UpdateName() {
  const [, submitAction] = useActionState(updateName, null, `/name/update`);

  return (
    <form action={submitAction}>
      ...
    </form>
  );
}

----------------------------------------

TITLE: Unnecessary Effect for State Updates
DESCRIPTION: Example showing unnecessary Effect usage for state updates that can be calculated during render instead.

LANGUAGE: jsx
CODE:
function Form() {
  const [firstName, setFirstName] = useState('Taylor');
  const [lastName, setLastName] = useState('Swift');

  // 🔴 Avoid: redundant state and unnecessary Effect
  const [fullName, setFullName] = useState('');
  useEffect(() => {
    setFullName(firstName + ' ' + lastName);
  }, [firstName, lastName]);
  // ...
}

----------------------------------------

TITLE: Basic Usage of prefetchDNS in React
DESCRIPTION: Demonstrates how to import and use the prefetchDNS function to look up the IP address of a server. This can speed up the loading of resources from that server.

LANGUAGE: javascript
CODE:
prefetchDNS("https://example.com");

----------------------------------------

TITLE: Interactive Server Components with Client Components
DESCRIPTION: Demonstrates composition of Server Components with Client Components to add interactivity while maintaining server-side benefits.

LANGUAGE: javascript
CODE:
// Server Component
import Expandable from './Expandable';

async function Notes() {
  const notes = await db.notes.getAll();
  return (
    <div>
      {notes.map(note => (
        <Expandable key={note.id}>
          <p note={note} />
        </Expandable>
      ))}
    </div>
  )
}

LANGUAGE: javascript
CODE:
// Client Component
"use client"

export default function Expandable({children}) {
  const [expanded, setExpanded] = useState(false);
  return (
    <div>
      <button
        onClick={() => setExpanded(!expanded)}
      >
        Toggle
      </button>
      {expanded && children}
    </div>
  )
}

----------------------------------------

TITLE: Client-side Hydration with hydrateRoot
DESCRIPTION: Shows how to hydrate the server-rendered content on the client using hydrateRoot.

LANGUAGE: javascript
CODE:
import { hydrateRoot } from 'react-dom/client';
import App from './App.js';

hydrateRoot(document, <App />);

----------------------------------------

TITLE: Tainting a User Session Token in React Server Components
DESCRIPTION: Shows how to taint a user's session token within an async function. The user object serves as the lifetime argument, ensuring the token remains tainted as long as the user object exists.

LANGUAGE: javascript
CODE:
import {experimental_taintUniqueValue} from 'react';

export async function getUser(id) {
  const user = await db`SELECT * FROM users WHERE id = ${id}`;
  experimental_taintUniqueValue(
    'Do not pass a user session token to the client.',
    user,
    user.session.token
  );
  return user;
}

----------------------------------------

TITLE: Dynamic Title Implementation - Incorrect
DESCRIPTION: Example showing incorrect way of using variables in title component that results in an array of children.

LANGUAGE: javascript
CODE:
<title>Results page {pageNumber}</title> // 🔴 Problem: This is not a single string

----------------------------------------

TITLE: Basic taintObjectReference Usage in React Server Components
DESCRIPTION: Demonstrates basic usage of taintObjectReference to prevent environment variables from being passed to client components

LANGUAGE: javascript
CODE:
import {experimental_taintObjectReference} from 'react';

experimental_taintObjectReference(
  'Do not pass ALL environment variables to the client.',
  process.env
);

----------------------------------------

TITLE: Configuring Default Robot Access Rules
DESCRIPTION: Defines the default crawling rules for search engine bots and other web crawlers. This configuration allows unrestricted access to all website content for any user agent.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:

----------------------------------------

TITLE: Correct Prop Handling Using Spread Operator in React
DESCRIPTION: This snippet shows the correct way to handle props in a React component using the spread operator to separate known props from the rest.

LANGUAGE: javascript
CODE:
function MyDiv(props) {
  const { layout, ...rest } = props
  if (layout === 'horizontal') {
    return <div {...rest} style={getHorizontalStyle()} />
  } else {
    return <div {...rest} style={getVerticalStyle()} />
  }
}

----------------------------------------

TITLE: React Component Gallery Implementation
DESCRIPTION: Shows a component composition example with a Gallery component rendering multiple Image components. Demonstrates how React recursively renders nested components.

LANGUAGE: jsx
CODE:
export default function Gallery() {
  return (
    <section>
      <h1>Inspiring Sculptures</h1>
      <Image />
      <Image />
      <Image />
    </section>
  );
}

function Image() {
  return (
    <img
      src="https://i.imgur.com/ZF6s192.jpg"
      alt="'Floralis Genérica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals"
    />
  );
}

----------------------------------------

TITLE: Using Effect Events to Avoid Unnecessary Dependencies
DESCRIPTION: This snippet shows how to use Effect Events to read the latest props and state without adding them as dependencies to the Effect.

LANGUAGE: jsx
CODE:
function ChatRoom({ roomId, isEncrypted, onMessage }) {
  const onReceiveMessage = useEffectEvent(onMessage);

  useEffect(() => {
    const connection = createConnection();
    connection.on('message', (msg) => onReceiveMessage(msg));
    // ...
  }, [roomId, isEncrypted]);

----------------------------------------

TITLE: Passing Event Handlers as Props in React
DESCRIPTION: This example shows how to pass event handlers as props from a parent component to a child component. It demonstrates the pattern of creating reusable button components with customizable click behavior.

LANGUAGE: jsx
CODE:
function Button({ onClick, children }) {
  return (
    <button onClick={onClick}>
      {children}
    </button>
  );
}

function PlayButton({ movieName }) {
  function handlePlayClick() {
    alert(`Playing ${movieName}!`);
  }

  return (
    <Button onClick={handlePlayClick}>
      Play "{movieName}"
    </Button>
  );
}

function UploadButton() {
  return (
    <Button onClick={() => alert('Uploading!')}>
      Upload Image
    </Button>
  );
}

export default function Toolbar() {
  return (
    <div>
      <PlayButton movieName="Kiki's Delivery Service" />
      <UploadButton />
    </div>
  );
}

----------------------------------------

TITLE: Resetting State with Key Prop
DESCRIPTION: Shows how to reset component state by using key prop instead of Effects.

LANGUAGE: jsx
CODE:
export default function ProfilePage({ userId }) {
  return (
    <Profile
      userId={userId}
      key={userId}
    />
  );
}

----------------------------------------

TITLE: Defining React Documentation Home Page Metadata in Markdown
DESCRIPTION: This snippet defines the metadata for the React documentation home page using YAML front matter in a markdown file. It specifies the page ID, title, and permalink.

LANGUAGE: markdown
CODE:
---
id: home
title: React
permalink: index.html
---

----------------------------------------

TITLE: Implementing Tab Navigation with useTransition
DESCRIPTION: Example showing how to use useTransition for tab navigation with loading states and pending indicators.

LANGUAGE: jsx
CODE:
function TabButton({ action, children, isActive }) {
  const [isPending, startTransition] = useTransition();
  if (isActive) {
    return <b>{children}</b>
  }
  if (isPending) {
    return <b className="pending">{children}</b>;
  }
  return (
    <button onClick={() => {
      startTransition(() => {
        action();
      });
    }}>
      {children}
    </button>
  );
}

----------------------------------------

TITLE: Profiler onRender Callback Implementation
DESCRIPTION: Implementation of the onRender callback function that receives performance measurements from the Profiler component.

LANGUAGE: javascript
CODE:
function onRender(id, phase, actualDuration, baseDuration, startTime, commitTime) {
  // Aggregate or log render timings...
}

----------------------------------------

TITLE: Handling Form Submission with Textarea Data
DESCRIPTION: Demonstrates how to handle form submission including textarea data using the FormData API.

LANGUAGE: jsx
CODE:
function handleSubmit(e) {
  e.preventDefault();
  const form = e.target;
  const formData = new FormData(form);
  const formJson = Object.fromEntries(formData.entries());
  console.log(formJson);
}

----------------------------------------

TITLE: Multiple Related Elements with useId
DESCRIPTION: Example showing how to generate related IDs for multiple form elements using a single useId call as a prefix

LANGUAGE: javascript
CODE:
import { useId } from 'react';

export default function Form() {
  const id = useId();
  return (
    <form>
      <label htmlFor={id + '-firstName'}>First Name:</label>
      <input id={id + '-firstName'} type="text" />
      <hr />
      <label htmlFor={id + '-lastName'}>Last Name:</label>
      <input id={id + '-lastName'} type="text" />
    </form>
  );
}

----------------------------------------

TITLE: Using preinitModule in React Event Handler
DESCRIPTION: This example shows how to use preinitModule within an event handler before transitioning to a new page or state. It allows for earlier module loading than if called during the rendering of the new page or state.

LANGUAGE: javascript
CODE:
import { preinitModule } from 'react-dom';

function CallToAction() {
  const onClick = () => {
    preinitModule("https://example.com/module.js", {as: "script"});
    startWizard();
  }
  return (
    <button onClick={onClick}>Start Wizard</button>
  );
}

----------------------------------------

TITLE: Declaring an Effect in React
DESCRIPTION: Call useEffect at the top level of your component to declare an Effect. This example shows how to connect to a chat room when the component mounts and disconnect when it unmounts.

LANGUAGE: JavaScript
CODE:
import { useState, useEffect } from 'react';
import { createConnection } from './chat.js';

function ChatRoom({ roomId }) {
  const [serverUrl, setServerUrl] = useState('https://localhost:1234');

  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [serverUrl, roomId]);
  // ...
}

----------------------------------------

TITLE: Updating React Packages to Canary Channel using Yarn
DESCRIPTION: Command to update React packages to the latest Canary release using Yarn package manager.

LANGUAGE: bash
CODE:
yarn upgrade react@canary react-dom@canary

----------------------------------------

TITLE: Adding a Simple Click Event Handler in React
DESCRIPTION: This snippet demonstrates how to add a basic click event handler to a button component in React. It defines a handleClick function that shows an alert when the button is clicked.

LANGUAGE: jsx
CODE:
export default function Button() {
  function handleClick() {
    alert('You clicked me!');
  }

  return (
    <button onClick={handleClick}>
      Click me
    </button>
  );
}

----------------------------------------

TITLE: Form Handling with Server Functions
DESCRIPTION: Implementation of a form that uses a server function to handle username requests, demonstrating form data handling and progressive enhancement.

LANGUAGE: javascript
CODE:
async function requestUsername(formData) {
  'use server';
  const username = formData.get('username');
  // ...
}

export default function App() {
  return (
    <form action={requestUsername}>
      <input type="text" name="username" />
      <button type="submit">Request</button>
    </form>
  );
}

----------------------------------------

TITLE: Custom Hook with useSyncExternalStore
DESCRIPTION: Example of creating a custom Hook that encapsulates useSyncExternalStore logic for reusability across components.

LANGUAGE: javascript
CODE:
import { useSyncExternalStore } from 'react';

export function useOnlineStatus() {
  const isOnline = useSyncExternalStore(subscribe, getSnapshot);
  return isOnline;
}

----------------------------------------

TITLE: Basic useTransition Usage
DESCRIPTION: Basic example showing how to initialize and use the useTransition Hook at the component level.

LANGUAGE: javascript
CODE:
const [isPending, startTransition] = useTransition()

----------------------------------------

TITLE: Partial StrictMode Implementation
DESCRIPTION: Shows how to enable StrictMode for a specific section of a React application

LANGUAGE: jsx
CODE:
function App() {
  return (
    <>
      <Header />
      <StrictMode>
        <main>
          <Sidebar />
          <Content />
        </main>
      </StrictMode>
      <Footer />
    </>
  );
}

----------------------------------------

TITLE: Rendering React Components into Non-React DOM Nodes
DESCRIPTION: Shows how to use createPortal to manage the content of a DOM node that's controlled by a non-React widget, such as a map popup.

LANGUAGE: jsx
CODE:
export default function Map() {
  const containerRef = useRef(null);
  const mapRef = useRef(null);
  const [popupContainer, setPopupContainer] = useState(null);

  useEffect(() => {
    if (mapRef.current === null) {
      const map = createMapWidget(containerRef.current);
      mapRef.current = map;
      const popupDiv = addPopupToMapWidget(map);
      setPopupContainer(popupDiv);
    }
  }, []);

  return (
    <div style={{ width: 250, height: 250 }} ref={containerRef}>
      {popupContainer !== null && createPortal(
        <p>Hello from React!</p>,
        popupContainer
      )}
    </div>
  );
}

----------------------------------------

TITLE: Basic Object State Example
DESCRIPTION: Demonstrates basic useState with an object

LANGUAGE: javascript
CODE:
const [x, setX] = useState(0);

----------------------------------------

TITLE: React Document Root Component
DESCRIPTION: Example of a root App component that renders the complete HTML document structure.

LANGUAGE: javascript
CODE:
export default function App() {
  return (
    <html>
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="stylesheet" href="/styles.css"></link>
        <title>My app</title>
      </head>
      <body>
        <Router />
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Creating Basic HTML Article Structure
DESCRIPTION: Example of HTML markup structure for an article with a heading and ordered list.

LANGUAGE: html
CODE:
<article>
  <h1>My First Component</h1>
  <ol>
    <li>Components: UI Building Blocks</li>
    <li>Defining a Component</li>
    <li>Using a Component</li>
  </ol>
</article>

----------------------------------------

TITLE: Sample React Root Component Structure
DESCRIPTION: Example showing the structure of a root React component that renders a complete HTML document.

LANGUAGE: javascript
CODE:
export default function App() {
  return (
    <html>
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="stylesheet" href="/styles.css"></link>
        <title>My app</title>
      </head>
      <body>
        <Router />
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Basic flushSync Usage in React
DESCRIPTION: Simple example showing how to use flushSync to force immediate DOM updates for state changes.

LANGUAGE: javascript
CODE:
flushSync(() => {
  setSomething(123);
});

----------------------------------------

TITLE: Implementing Conditional Component Rendering
DESCRIPTION: An enhanced version of the inspiration app that conditionally renders either quotes or color blocks based on the inspiration type.

LANGUAGE: javascript
CODE:
import * as React from 'react';
import inspirations from './inspirations';
import FancyText from './FancyText';
import Color from './Color';

export default function InspirationGenerator({children}) {
  const [index, setIndex] = React.useState(0);
  const inspiration = inspirations[index];
  const next = () => setIndex((index + 1) % inspirations.length);

  return (
    <>
      <p>Your inspirational {inspiration.type} is:</p>
      {inspiration.type === 'quote'
      ? <FancyText text={inspiration.value} />
      : <Color value={inspiration.value} />}

      <button onClick={next}>Inspire me again</button>
      {children}
    </>
  );
}

----------------------------------------

TITLE: Initializing forwardRef Component in React
DESCRIPTION: Basic usage of forwardRef to create a component that can receive and forward a ref. This allows the component to expose a DOM node to its parent.

LANGUAGE: javascript
CODE:
const SomeComponent = forwardRef(render)

----------------------------------------

TITLE: Basic useFormStatus Hook Usage in React
DESCRIPTION: Basic example showing how to import and use the useFormStatus Hook to get form submission status

LANGUAGE: javascript
CODE:
const { pending, data, method, action } = useFormStatus();

----------------------------------------

TITLE: Defining a React App Component for Server-Side Rendering
DESCRIPTION: Example of a React App component that represents an entire HTML document. This component is suitable for server-side rendering as it includes the html, head, and body tags.

LANGUAGE: javascript
CODE:
export default function App() {
  return (
    <html>
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="stylesheet" href="/styles.css"></link>
        <title>My app</title>
      </head>
      <body>
        <Router />
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Using useState in a Component
DESCRIPTION: Example of using useState to declare multiple state variables in a React component. Shows how to initialize state and use the setter functions.

LANGUAGE: jsx
CODE:
import { useState } from 'react';

function MyComponent() {
  const [age, setAge] = useState(28);
  const [name, setName] = useState('Taylor');
  const [todos, setTodos] = useState(() => createTodos());
  // ...
}

----------------------------------------

TITLE: Server Rendering Support with useSyncExternalStore
DESCRIPTION: Implementation showing how to add server rendering support by providing a getServerSnapshot function as the third argument.

LANGUAGE: javascript
CODE:
export function useOnlineStatus() {
  const isOnline = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
  return isOnline;
}

function getServerSnapshot() {
  return true; // Always show "Online" for server-generated HTML
}

----------------------------------------

TITLE: Removing Unnecessary Object Dependencies
DESCRIPTION: To avoid unnecessary Effect re-runs, create objects inside the Effect instead of using objects created during rendering as dependencies.

LANGUAGE: JavaScript
CODE:
useEffect(() => {
  const options = {
    serverUrl: serverUrl,
    roomId: roomId
  };
  const connection = createConnection(options);
  connection.connect();
  return () => connection.disconnect();
}, [roomId]);

----------------------------------------

TITLE: Migrating act() Import from react-dom/test-utils to react
DESCRIPTION: Shows how to update the import statement for the act() function from the deprecated react-dom/test-utils location to the new react package location.

LANGUAGE: javascript
CODE:
import {act} from 'react-dom/test-utils';

LANGUAGE: javascript
CODE:
import {act} from 'react';

----------------------------------------

TITLE: MovingDot Component with Mutation Bug
DESCRIPTION: Shows incorrect mutation of object state and how to fix it

LANGUAGE: javascript
CODE:
export default function MovingDot() {
  const [position, setPosition] = useState({
    x: 0,
    y: 0
  });
  return (
    <div
      onPointerMove={e => {
        position.x = e.clientX;
        position.y = e.clientY;
      }}
      style={{
        position: 'relative',
        width: '100vw',
        height: '100vh',
      }}>
      <div style={{
        position: 'absolute',
        backgroundColor: 'red',
        borderRadius: '50%',
        transform: `translate(${position.x}px, ${position.y}px)`,
        left: -10,
        top: -10,
        width: 20,
        height: 20,
      }} />
    </div>
  );
}

----------------------------------------

TITLE: Extracting State Logic into a Reducer in React
DESCRIPTION: Shows how to use the useReducer hook to manage complex state logic outside of the component.

LANGUAGE: jsx
CODE:
import { useReducer } from 'react';
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';

export default function TaskApp() {
  const [tasks, dispatch] = useReducer(
    tasksReducer,
    initialTasks
  );

  function handleAddTask(text) {
    dispatch({
      type: 'added',
      id: nextId++,
      text: text,
    });
  }

  function handleChangeTask(task) {
    dispatch({
      type: 'changed',
      task: task
    });
  }

  function handleDeleteTask(taskId) {
    dispatch({
      type: 'deleted',
      id: taskId
    });
  }

  return (
    <>
      <h1>Prague itinerary</h1>
      <AddTask
        onAddTask={handleAddTask}
      />
      <TaskList
        tasks={tasks}
        onChangeTask={handleChangeTask}
        onDeleteTask={handleDeleteTask}
      />
    </>
  );
}

function tasksReducer(tasks, action) {
  switch (action.type) {
    case 'added': {
      return [...tasks, {
        id: action.id,
        text: action.text,
        done: false
      }];
    }
    case 'changed': {
      return tasks.map(t => {
        if (t.id === action.task.id) {
          return action.task;
        } else {
          return t;
        }
      });
    }
    case 'deleted': {
      return tasks.filter(t => t.id !== action.id);
    }
    default: {
      throw Error('Unknown action: ' + action.type);
    }
  }
}

let nextId = 3;
const initialTasks = [
  { id: 0, text: 'Visit Kafka Museum', done: true },
  { id: 1, text: 'Watch a puppet show', done: false },
  { id: 2, text: 'Lennon Wall pic', done: false }
];

----------------------------------------

TITLE: Migrating PureComponent to Function Component with memo
DESCRIPTION: Shows how to convert a PureComponent class to a function component wrapped in memo to achieve similar optimization in modern React code.

LANGUAGE: jsx
CODE:
import { memo, useState } from 'react';

const Greeting = memo(function Greeting({ name }) {
  console.log("Greeting was rendered at", new Date().toLocaleTimeString());
  return <h3>Hello{name && ', '}{name}!</h3>;
});

export default function MyApp() {
  const [name, setName] = useState('');
  const [address, setAddress] = useState('');
  return (
    <>
      <label>
        Name{': '}
        <input value={name} onChange={e => setName(e.target.value)} />
      </label>
      <label>
        Address{': '}
        <input value={address} onChange={e => setAddress(e.target.value)} />
      </label>
      <Greeting name={name} />
    </>
  );
}

----------------------------------------

TITLE: Conditionally Rendering JSX with if/else in React
DESCRIPTION: This snippet demonstrates how to use an if/else statement to conditionally return different JSX based on a prop value.

LANGUAGE: jsx
CODE:
function Item({ name, isPacked }) {
  if (isPacked) {
    return <li className="item">{name} ✅</li>;
  }
  return <li className="item">{name}</li>;
}

----------------------------------------

TITLE: Scaling Up with Reducer and Context in React
DESCRIPTION: Demonstrates how to combine useReducer and Context to manage complex state in a large application.

LANGUAGE: jsx
CODE:
import AddTask from './AddTask.js';
import TaskList from './TaskList.js';
import { TasksProvider } from './TasksContext.js';

export default function TaskApp() {
  return (
    <TasksProvider>
      <h1>Day off in Kyoto</h1>
      <AddTask />
      <TaskList />
    </TasksProvider>
  );
}

----------------------------------------

TITLE: Basic hydrateRoot Usage
DESCRIPTION: Example showing basic usage of hydrateRoot to attach React to server-rendered HTML content

LANGUAGE: javascript
CODE:
import { hydrateRoot } from 'react-dom/client';

const domNode = document.getElementById('root');
const root = hydrateRoot(domNode, reactNode);

----------------------------------------

TITLE: Node.js Streams API Reference
DESCRIPTION: Methods for rendering React components to Node.js Streams, specifically the renderToPipeableStream method that creates a pipeable Node.js Stream from a React tree.

LANGUAGE: javascript
CODE:
renderToPipeableStream

----------------------------------------

TITLE: Defining Exportable Server Functions
DESCRIPTION: Illustrates how to create Server Functions in a separate file for import in Client Components.

LANGUAGE: javascript
CODE:
"use server";

export async function createNote() {
  await db.notes.create();
}

----------------------------------------

TITLE: Using preinitModule in React Component Render
DESCRIPTION: This snippet demonstrates how to use preinitModule when rendering a component to preload a specific module. It's suitable when you know the component or its children will use the module.

LANGUAGE: javascript
CODE:
import { preinitModule } from 'react-dom';

function AppRoot() {
  preinitModule("https://example.com/module.js", {as: "script"});
  return ...;
}

----------------------------------------

TITLE: Reacting to Input with State in React
DESCRIPTION: Demonstrates how to use state to control UI elements based on user input in a quiz form component.

LANGUAGE: jsx
CODE:
import { useState } from 'react';

export default function Form() {
  const [answer, setAnswer] = useState('');
  const [error, setError] = useState(null);
  const [status, setStatus] = useState('typing');

  if (status === 'success') {
    return <h1>That's right!</h1>
  }

  async function handleSubmit(e) {
    e.preventDefault();
    setStatus('submitting');
    try {
      await submitForm(answer);
      setStatus('success');
    } catch (err) {
      setStatus('typing');
      setError(err);
    }
  }

  function handleTextareaChange(e) {
    setAnswer(e.target.value);
  }

  return (
    <>
      <h2>City quiz</h2>
      <p>
        In which city is there a billboard that turns air into drinkable water?
      </p>
      <form onSubmit={handleSubmit}>
        <textarea
          value={answer}
          onChange={handleTextareaChange}
          disabled={status === 'submitting'}
        />
        <br />
        <button disabled={
          answer.length === 0 ||
          status === 'submitting'
        }>
          Submit
        </button>
        {error !== null &&
          <p className="Error">
            {error.message}
          </p>
        }
      </form>
    </>
  );
}

----------------------------------------

TITLE: Action Function with State Parameter
DESCRIPTION: Shows the structure of an action function that receives the current state as its first parameter.

LANGUAGE: javascript
CODE:
function action(currentState, formData) {
  // ...
  return 'next state';
}

----------------------------------------

TITLE: Preload Implementation in React Component
DESCRIPTION: Example showing how to import and use preload within a React component context.

LANGUAGE: javascript
CODE:
import { preload } from 'react-dom';

function AppRoot() {
  preload("https://example.com/font.woff2", {as: "font"});
  // ...
}

----------------------------------------

TITLE: Checking Various Types with isValidElement in JavaScript
DESCRIPTION: This code snippet shows additional examples of using isValidElement to check different types of values, including JSX tags, createElement results, and non-element values like null, numbers, and arrays.

LANGUAGE: javascript
CODE:
import { isValidElement, createElement } from 'react';

// ✅ JSX tags are React elements
console.log(isValidElement(<p />)); // true
console.log(isValidElement(<MyComponent />)); // true

// ✅ Values returned by createElement are React elements
console.log(isValidElement(createElement('p'))); // true
console.log(isValidElement(createElement(MyComponent))); // true

// ❌ These are *not* React elements
console.log(isValidElement(null)); // false
console.log(isValidElement(25)); // false
console.log(isValidElement('Hello')); // false
console.log(isValidElement({ age: 42 })); // false
console.log(isValidElement([<div />, <div />])); // false
console.log(isValidElement(MyComponent)); // false

----------------------------------------

TITLE: Installing Prettier Extension in VS Code
DESCRIPTION: Steps to install the Prettier extension in Visual Studio Code using the Quick Open feature.

LANGUAGE: markdown
CODE:
1. Launch VS Code
2. Use Quick Open (press Ctrl/Cmd+P)
3. Paste in `ext install esbenp.prettier-vscode`
4. Press Enter

----------------------------------------

TITLE: Using useState Hook for Text Input in React
DESCRIPTION: This example shows how to use the useState hook to manage a text input field in React. It demonstrates state management for string values and handling input changes.

LANGUAGE: javascript
CODE:
import { useState } from 'react';

export default function MyInput() {
  const [text, setText] = useState('hello');

  function handleChange(e) {
    setText(e.target.value);
  }

  return (
    <>
      <input value={text} onChange={handleChange} />
      <p>You typed: {text}</p>
      <button onClick={() => setText('hello')}>
        Reset
      </button>
    </>
  );
}

----------------------------------------

TITLE: Incorrect Higher Order Hook Pattern
DESCRIPTION: Demonstrates an anti-pattern where Hooks are dynamically created or modified through higher-order functions.

LANGUAGE: javascript
CODE:
function ChatInput() {
  const useDataWithLogging = withLogging(useData); // 🔴 Bad: don't write higher order Hooks
  const data = useDataWithLogging();
}

----------------------------------------

TITLE: dangerouslySetInnerHTML Example
DESCRIPTION: Example showing how to set inner HTML content using dangerouslySetInnerHTML

LANGUAGE: JavaScript
CODE:
const markup = { __html: '<p>some raw html</p>' };
return <div dangerouslySetInnerHTML={markup} />;

----------------------------------------

TITLE: Basic StrictMode Usage
DESCRIPTION: Shows how to wrap a React application in StrictMode to enable additional development checks

LANGUAGE: jsx
CODE:
<StrictMode>
  <App />
</StrictMode>

----------------------------------------

TITLE: Defining Basic Class Component
DESCRIPTION: Shows how to define a basic React class component by extending Component and implementing a render method.

LANGUAGE: jsx
CODE:
class Greeting extends Component {
  render() {
    return <h1>Hello, {this.props.name}!</h1>;
  }
}

----------------------------------------

TITLE: Complex Example of useImperativeHandle in React
DESCRIPTION: Illustrates a more complex use case of useImperativeHandle in a Post component, exposing a custom scrollAndFocusAddComment method that combines actions on child components.

LANGUAGE: javascript
CODE:
import { useRef, useImperativeHandle } from 'react';
import CommentList from './CommentList.js';
import AddComment from './AddComment.js';

function Post({ ref }) {
  const commentsRef = useRef(null);
  const addCommentRef = useRef(null);

  useImperativeHandle(ref, () => {
    return {
      scrollAndFocusAddComment() {
        commentsRef.current.scrollToBottom();
        addCommentRef.current.focus();
      }
    };
  }, []);

  return (
    <>
      <article>
        <p>Welcome to my blog!</p>
      </article>
      <CommentList ref={commentsRef} />
      <AddComment ref={addCommentRef} />
    </>
  );
};

export default Post;

----------------------------------------

TITLE: Implementing Form Input Hook in React
DESCRIPTION: Shows how to create a useFormInput Hook that manages form input state and handlers.

LANGUAGE: javascript
CODE:
function useFormInput(initialValue) {
  const [value, setValue] = useState(initialValue);

  function handleChange(e) {
    setValue(e.target.value);
  }

  const inputProps = {
    value: value,
    onChange: handleChange
  };

  return inputProps;
}

----------------------------------------

TITLE: Function Component with useRef Alternative
DESCRIPTION: Shows how to migrate from createRef in a class component to useRef in a function component.

LANGUAGE: javascript
CODE:
import { useRef } from 'react';

export default function Form() {
  const inputRef = useRef(null);

  function handleClick() {
    inputRef.current.focus();
  }

  return (
    <>
      <input ref={inputRef} />
      <button onClick={handleClick}>
        Focus the input
      </button>
    </>
  );
}

----------------------------------------

TITLE: Basic Select Component Implementation in React
DESCRIPTION: Shows how to render a basic select box with options in React. The select component allows users to choose from predefined options.

LANGUAGE: javascript
CODE:
<select>
  <option value="someOption">Some option</option>
  <option value="otherOption">Other option</option>
</select>

----------------------------------------

TITLE: Fragment Usage in Component Return
DESCRIPTION: Shows how to use Fragment to return multiple elements from a React component.

LANGUAGE: jsx
CODE:
function Post() {
  return (
    <>
      <PostTitle />
      <PostBody />
    </>
  );
}

----------------------------------------

TITLE: Creating a Next.js App with CLI
DESCRIPTION: This command initializes a new Next.js application using the create-next-app CLI tool.

LANGUAGE: bash
CODE:
npx create-next-app@latest

----------------------------------------

TITLE: Implementing Suspense for Loading States
DESCRIPTION: Example showing how to use Suspense to declaratively specify loading states for parts of the component tree that are not yet ready to display.

LANGUAGE: JavaScript
CODE:
<Suspense fallback={<Spinner />}>
  <Comments />
</Suspense>

----------------------------------------

TITLE: Error Handling with use API
DESCRIPTION: Example showing how to handle rejected Promises using error boundaries with the use API.

LANGUAGE: jsx
CODE:
import { use } from 'react';

export default function App() {
  const messagePromise = new Promise((resolve, reject) => {
    reject();
  }).catch(() => {
    return "no new message found.";
  });

  return (
    <Suspense fallback={<p>waiting for message...</p>}>
      <Message messagePromise={messagePromise} />
    </Suspense>
  );
}

----------------------------------------

TITLE: Correct Declaration of Lazy Components in React
DESCRIPTION: Demonstrates the correct way to declare lazy components at the top level of a module, avoiding unexpected state resets that can occur when declared inside other components.

LANGUAGE: javascript
CODE:
import { lazy } from 'react';

// ✅ Good: Declare lazy components outside of your components
const MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));

function Editor() {
  // ...
}

----------------------------------------

TITLE: Contact Page Title Implementation
DESCRIPTION: Example showing how to implement a title component within a Contact Us page component, demonstrating proper placement and usage.

LANGUAGE: javascript
CODE:
import ShowRenderedHTML from './ShowRenderedHTML.js';

export default function ContactUsPage() {
  return (
    <ShowRenderedHTML>
      <title>My Site: Contact Us</title>
      <h1>Contact Us</h1>
      <p>Email us at support@example.com</p>
    </ShowRenderedHTML>
  );
}

----------------------------------------

TITLE: Incorrect Hook Usage in Various Contexts
DESCRIPTION: This snippet showcases multiple examples of incorrect Hook usage, including inside conditions, loops, after conditional returns, in event handlers, inside useMemo, in class components, and in try/catch blocks.

LANGUAGE: javascript
CODE:
function Bad({ cond }) {
  if (cond) {
    // 🔴 Bad: inside a condition (to fix, move it outside!)
    const theme = useContext(ThemeContext);
  }
  // ...
}

function Bad() {
  for (let i = 0; i < 10; i++) {
    // 🔴 Bad: inside a loop (to fix, move it outside!)
    const theme = useContext(ThemeContext);
  }
  // ...
}

function Bad({ cond }) {
  if (cond) {
    return;
  }
  // 🔴 Bad: after a conditional return (to fix, move it before the return!)
  const theme = useContext(ThemeContext);
  // ...
}

function Bad() {
  function handleClick() {
    // 🔴 Bad: inside an event handler (to fix, move it outside!)
    const theme = useContext(ThemeContext);
  }
  // ...
}

function Bad() {
  const style = useMemo(() => {
    // 🔴 Bad: inside useMemo (to fix, move it outside!)
    const theme = useContext(ThemeContext);
    return createStyle(theme);
  });
  // ...
}

class Bad extends React.Component {
  render() {
    // 🔴 Bad: inside a class component (to fix, write a function component instead of a class!)
    useEffect(() => {})
    // ...
  }
}

function Bad() {
  try {
    // 🔴 Bad: inside try/catch/finally block (to fix, move it outside!)
    const [x, setX] = useState(0);
  } catch {
    const [x, setX] = useState(1);
  }
}

----------------------------------------

TITLE: Using JavaScript Functions in JSX (React)
DESCRIPTION: This example demonstrates how to call JavaScript functions within JSX using curly braces. It shows a TodoList component that uses a formatDate function to display the current day of the week.

LANGUAGE: jsx
CODE:
const today = new Date();

function formatDate(date) {
  return new Intl.DateTimeFormat(
    'en-US',
    { weekday: 'long' }
  ).format(date);
}

export default function TodoList() {
  return (
    <h1>To Do List for {formatDate(today)}</h1>
  );
}

----------------------------------------

TITLE: Implementing a Chat Room Component with React Hooks
DESCRIPTION: This snippet demonstrates how to use useEffect to connect to a chat room and useState to manage the message state. It shows the separation of concerns between event handlers and Effects.

LANGUAGE: jsx
CODE:
function ChatRoom({ roomId }) {
  const [message, setMessage] = useState('');

  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]);

  function handleSendClick() {
    sendMessage(message);
  }

  return (
    <>
      <input value={message} onChange={e => setMessage(e.target.value)} />
      <button onClick={handleSendClick}>Send</button>
    </>
  );
}

----------------------------------------

TITLE: Document Hydration
DESCRIPTION: Example demonstrating how to hydrate an entire document including the HTML element

LANGUAGE: javascript
CODE:
import { hydrateRoot } from 'react-dom/client';
import App from './App.js';

hydrateRoot(document, <App />);

----------------------------------------

TITLE: Browser API Subscription with useSyncExternalStore
DESCRIPTION: Implementation showing how to subscribe to browser's online/offline status using useSyncExternalStore with window event listeners.

LANGUAGE: javascript
CODE:
function getSnapshot() {
  return navigator.onLine;
}

function subscribe(callback) {
  window.addEventListener('online', callback);
  window.addEventListener('offline', callback);
  return () => {
    window.removeEventListener('online', callback);
    window.removeEventListener('offline', callback);
  };
}

----------------------------------------

TITLE: Runtime Style Injection Implementation
DESCRIPTION: Complete example of implementing runtime style injection using useInsertionEffect in a CSS-in-JS library.

LANGUAGE: javascript
CODE:
// Inside your CSS-in-JS library
let isInserted = new Set();
function useCSS(rule) {
  useInsertionEffect(() => {
    // As explained earlier, we don't recommend runtime injection of <style> tags.
    // But if you have to do it, then it's important to do in useInsertionEffect.
    if (!isInserted.has(rule)) {
      isInserted.add(rule);
      document.head.appendChild(getStyleForRule(rule));
    }
  });
  return rule;
}

function Button() {
  const className = useCSS('...');
  return <div className={className} />;
}

----------------------------------------

TITLE: Updating State Based on Previous State in React Effects
DESCRIPTION: This example demonstrates how to update state based on its previous value inside an Effect without adding the state variable as a dependency.

LANGUAGE: jsx
CODE:
function ChatRoom({ roomId }) {
  const [messages, setMessages] = useState([]);
  useEffect(() => {
    const connection = createConnection();
    connection.connect();
    connection.on('message', (receivedMessage) => {
      setMessages(msgs => [...msgs, receivedMessage]);
    });
    return () => connection.disconnect();
  }, [roomId]); // ✅ All dependencies declared
  // ...
}

----------------------------------------

TITLE: Using Logical AND Operator for Conditional Rendering in React
DESCRIPTION: This snippet demonstrates how to use the logical AND operator (&&) to conditionally render JSX when a condition is true.

LANGUAGE: jsx
CODE:
function Item({ name, isPacked }) {
  return (
    <li className="item">
      {name} {isPacked && '✅'}
    </li>
  );
}

----------------------------------------

TITLE: Conditionally Assigning JSX to a Variable in React
DESCRIPTION: This example shows how to use an if statement to conditionally assign JSX to a variable before rendering it in the component's return statement.

LANGUAGE: jsx
CODE:
function Item({ name, isPacked }) {
  let itemContent = name;
  if (isPacked) {
    itemContent = (
      <del>
        {name + " ✅"}
      </del>
    );
  }
  return (
    <li className="item">
      {itemContent}
    </li>
  );
}

----------------------------------------

TITLE: Composing React Components Layout
DESCRIPTION: Demonstration of how React components can be nested to create page layouts.

LANGUAGE: javascript
CODE:
<PageLayout>
  <NavigationHeader>
    <SearchBar />
    <Link to="/docs">Docs</Link>
  </NavigationHeader>
  <Sidebar />
  <PageContent>
    <TableOfContents />
    <DocumentationText />
  </PageContent>
</PageLayout>

----------------------------------------

TITLE: PureComponent Example with Selective Re-rendering
DESCRIPTION: Illustrates a PureComponent that re-renders only when its 'name' prop changes, not when other state in the parent component updates.

LANGUAGE: jsx
CODE:
import { PureComponent, useState } from 'react';

class Greeting extends PureComponent {
  render() {
    console.log("Greeting was rendered at", new Date().toLocaleTimeString());
    return <h3>Hello{this.props.name && ', '}{this.props.name}!</h3>;
  }
}

export default function MyApp() {
  const [name, setName] = useState('');
  const [address, setAddress] = useState('');
  return (
    <>
      <label>
        Name{': '}
        <input value={name} onChange={e => setName(e.target.value)} />
      </label>
      <label>
        Address{': '}
        <input value={address} onChange={e => setAddress(e.target.value)} />
      </label>
      <Greeting name={name} />
    </>
  );
}

----------------------------------------

TITLE: Using React Context Provider
DESCRIPTION: Demonstrates wrapping components with context providers to provide dynamic values.

LANGUAGE: javascript
CODE:
function App() {
  const [theme, setTheme] = useState('light');
  // ...
  return (
    <ThemeContext.Provider value={theme}>
      <Page />
    </ThemeContext.Provider>
  );
}

----------------------------------------

TITLE: Transforming an Array in React State
DESCRIPTION: Shows how to transform items in an array stored in state using the map() method to create a new array with updated values.

LANGUAGE: JavaScript
CODE:
const nextShapes = shapes.map(shape => {
  if (shape.type === 'square') {
    return shape;
  } else {
    return {
      ...shape,
      y: shape.y + 50,
    };
  }
});
setShapes(nextShapes);

----------------------------------------

TITLE: Importing createPortal API in React
DESCRIPTION: Demonstrates how to import the createPortal API from react-dom. This API allows rendering child components in a different part of the DOM tree.

LANGUAGE: javascript
CODE:
import { createPortal } from 'react-dom';

----------------------------------------

TITLE: Creating a Greeting Component with createElement in React
DESCRIPTION: Shows how to create a Greeting component using createElement instead of JSX, demonstrating the creation of an h1 element with props and children.

LANGUAGE: javascript
CODE:
import { createElement } from 'react';

function Greeting({ name }) {
  return createElement(
    'h1',
    { className: 'greeting' },
    'Hello'
  );
}

----------------------------------------

TITLE: Controlling Stylesheet Precedence in React
DESCRIPTION: Illustrates how to control the order of stylesheets using the precedence prop. Components with the same precedence are grouped together in the <head>.

LANGUAGE: javascript
CODE:
export default function HomePage() {
  return (
    <ShowRenderedHTML>
      <FirstComponent />
      <SecondComponent />
      <ThirdComponent/>
      ...
    </ShowRenderedHTML>
  );
}

function FirstComponent() {
  return <link rel="stylesheet" href="first.css" precedence="first" />;
}

function SecondComponent() {
  return <link rel="stylesheet" href="second.css" precedence="second" />;
}

function ThirdComponent() {
  return <link rel="stylesheet" href="third.css" precedence="first" />;
}

----------------------------------------

TITLE: Creating a Chat Room Connection in React
DESCRIPTION: This snippet shows how to create a chat room connection using the useEffect hook. It demonstrates the initial implementation with a dependency on the roomId prop.

LANGUAGE: jsx
CODE:
const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]); // ✅ All dependencies declared
  // ...
}

----------------------------------------

TITLE: Form Submission with Select Component
DESCRIPTION: Shows how to handle form submission with select components, including preventing default form behavior and processing form data.

LANGUAGE: javascript
CODE:
export default function EditPost() {
  function handleSubmit(e) {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);
    console.log([...formData.entries()]);
  }

  return (
    <form method="post" onSubmit={handleSubmit}>
      <select name="selectedFruit" defaultValue="orange">
        <option value="apple">Apple</option>
        <option value="banana">Banana</option>
        <option value="orange">Orange</option>
      </select>
    </form>
  );
}

----------------------------------------

TITLE: Safe Local Mutation Example
DESCRIPTION: Shows acceptable local mutation patterns within React components that don't violate purity rules.

LANGUAGE: javascript
CODE:
function FriendList({ friends }) {
  const items = [];
  for (let i = 0; i < friends.length; i++) {
    const friend = friends[i];
    items.push(
      <Friend key={friend.id} friend={friend} />
    );
  }
  return <section>{items}</section>;
}

----------------------------------------

TITLE: Complete React Component with State
DESCRIPTION: A full React component that uses state to display a gallery of sculptures. It uses the useState Hook to manage the current index and whether to show more details.

LANGUAGE: JavaScript
CODE:
import { useState } from 'react';
import { sculptureList } from './data.js';

export default function Gallery() {
  const [index, setIndex] = useState(0);
  const [showMore, setShowMore] = useState(false);

  function handleNextClick() {
    setIndex(index + 1);
  }

  function handleMoreClick() {
    setShowMore(!showMore);
  }

  let sculpture = sculptureList[index];
  return (
    <>
      <button onClick={handleNextClick}>
        Next
      </button>
      <h2>
        <i>{sculpture.name} </i> 
        by {sculpture.artist}
      </h2>
      <h3>  
        ({index + 1} of {sculptureList.length})
      </h3>
      <button onClick={handleMoreClick}>
        {showMore ? 'Hide' : 'Show'} details
      </button>
      {showMore && <p>{sculpture.description}</p>}
      <img 
        src={sculpture.url} 
        alt={sculpture.alt}
      />
    </>
  );
}

----------------------------------------

TITLE: Rendering a React Component in a Specific HTML Element
DESCRIPTION: This example shows how to render a React component inside a specific HTML element without clearing the entire page content. It uses createRoot to render a NavigationBar component in a designated nav element.

LANGUAGE: javascript
CODE:
import { createRoot } from 'react-dom/client';

function NavigationBar() {
  // TODO: Actually implement a navigation bar
  return <h1>Hello from React!</h1>;
}

const domNode = document.getElementById('navigation');
const root = createRoot(domNode);
root.render(<NavigationBar />);

----------------------------------------

TITLE: Using startTransition in React for Non-blocking UI Updates
DESCRIPTION: This snippet demonstrates how to use the startTransition function to mark a state update as a Transition. It wraps the setTab state update function inside startTransition, allowing for non-blocking UI updates.

LANGUAGE: javascript
CODE:
import { startTransition } from 'react';

function TabContainer() {
  const [tab, setTab] = useState('about');

  function selectTab(nextTab) {
    startTransition(() => {
      setTab(nextTab);
    });
  }
  // ...
}

----------------------------------------

TITLE: Preloading Data in React Server Components
DESCRIPTION: Demonstrates how to use a cached function to preload data before rendering a component, potentially reducing delays in data fetching.

LANGUAGE: jsx
CODE:
const getUser = cache(async (id) => {
  return await db.user.query(id);
});

async function Profile({id}) {
  const user = await getUser(id);
  return (
    <section>
      <img src={user.profilePic} />
      <h2>{user.name}</h2>
    </section>
  );
}

function Page({id}) {
  // ✅ Good: start fetching the user data
  getUser(id);
  // ... some computational work
  return (
    <>
      <Profile id={id} />
    </>
  );
}

----------------------------------------

TITLE: Passing Props to Avatar Component in React
DESCRIPTION: Demonstrates how to pass props to a child component and read them inside the component. The Avatar component receives person and size props from its parent Profile component.

LANGUAGE: jsx
CODE:
export default function Profile() {
  return (
    <Avatar
      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}
      size={100}
    />
  );
}

function Avatar({ person, size }) {
  // person and size are available here
}

----------------------------------------

TITLE: Integrating React Components with Non-React Server Markup
DESCRIPTION: Demonstrates how to use createPortal to render React components into specific parts of a page that includes non-React server-rendered content.

LANGUAGE: jsx
CODE:
import { createPortal } from 'react-dom';

const sidebarContentEl = document.getElementById('sidebar-content');

export default function App() {
  return (
    <>
      <MainContent />
      {createPortal(
        <SidebarContent />,
        sidebarContentEl
      )}
    </>
  );
}

function MainContent() {
  return <p>This part is rendered by React</p>;
}

function SidebarContent() {
  return <p>This part is also rendered by React!</p>;
}

----------------------------------------

TITLE: Filtering and Rendering a List in React
DESCRIPTION: Shows how to use filter() and map() together to render a filtered list of items based on a condition.

LANGUAGE: jsx
CODE:
const people = [{
  id: 0,
  name: 'Creola Katherine Johnson',
  profession: 'mathematician',
}, {
  id: 1,
  name: 'Mario José Molina-Pasquel Henríquez',
  profession: 'chemist',
}, {
  id: 2,
  name: 'Mohammad Abdus Salam',
  profession: 'physicist',
}, {
  id: 3,
  name: 'Percy Lavon Julian',
  profession: 'chemist',  
}, {
  id: 4,
  name: 'Subrahmanyan Chandrasekhar',
  profession: 'astrophysicist',
}];

export default function List() {
  const chemists = people.filter(person =>
    person.profession === 'chemist'
  );
  const listItems = chemists.map(person =>
    <li>
       <img
         src={getImageUrl(person)}
         alt={person.name}
       />
       <p>
         <b>{person.name}:</b>
         {' ' + person.profession + ' '}
         known for {person.accomplishment}
       </p>
    </li>
  );
  return <ul>{listItems}</ul>;
}

----------------------------------------

TITLE: Configure act() Test Environment
DESCRIPTION: Configuration code needed to enable act() support in the test environment.

LANGUAGE: javascript
CODE:
global.IS_REACT_ACT_ENVIRONMENT=true

----------------------------------------

TITLE: Passing Data Deeply with Context in React
DESCRIPTION: Illustrates how to use React Context to pass data deeply through the component tree without prop drilling.

LANGUAGE: jsx
CODE:
import Heading from './Heading.js';
import Section from './Section.js';

export default function Page() {
  return (
    <Section>
      <Heading>Title</Heading>
      <Section>
        <Heading>Heading</Heading>
        <Heading>Heading</Heading>
        <Heading>Heading</Heading>
        <Section>
          <Heading>Sub-heading</Heading>
          <Heading>Sub-heading</Heading>
          <Heading>Sub-heading</Heading>
          <Section>
            <Heading>Sub-sub-heading</Heading>
            <Heading>Sub-sub-heading</Heading>
            <Heading>Sub-sub-heading</Heading>
          </Section>
        </Section>
      </Section>
    </Section>
  );
}

----------------------------------------

TITLE: Using Suspense for Loading States
DESCRIPTION: This code snippet shows how to use React Suspense to specify a loading state for a component while data is being fetched.

LANGUAGE: jsx
CODE:
<Suspense fallback={<TalksLoading />}>
  <Talks confId={conf.id} />
</Suspense>

----------------------------------------

TITLE: Preiniting in React Event Handler
DESCRIPTION: Example showing how to use preinit within an event handler before transitioning pages

LANGUAGE: javascript
CODE:
import { preinit } from 'react-dom';

function CallToAction() {
  const onClick = () => {
    preinit("https://example.com/wizardStyles.css", {as: "style"});
    startWizard();
  }
  return (
    <button onClick={onClick}>Start Wizard</button>
  );
}

----------------------------------------

TITLE: Using useDebugValue with a Formatting Function
DESCRIPTION: This snippet demonstrates how to use useDebugValue with a formatting function. The function is passed as the second argument and is only called when the component is inspected in React DevTools, optimizing performance for complex formatting operations.

LANGUAGE: javascript
CODE:
useDebugValue(date, date => date.toDateString());

----------------------------------------

TITLE: Removing Unnecessary Function Dependencies
DESCRIPTION: To avoid unnecessary Effect re-runs, declare functions inside the Effect instead of using functions created during rendering as dependencies.

LANGUAGE: JavaScript
CODE:
useEffect(() => {
  function createOptions() {
    return {
      serverUrl: serverUrl,
      roomId: roomId
    };
  }

  const options = createOptions();
  const connection = createConnection(options);
  connection.connect();
  return () => connection.disconnect();
}, [roomId]);

----------------------------------------

TITLE: Prefetching DNS When Rendering a React Component
DESCRIPTION: Illustrates how to call prefetchDNS when rendering a component, which is useful when you know that its children will load external resources from a specific host.

LANGUAGE: javascript
CODE:
import { prefetchDNS } from 'react-dom';

function AppRoot() {
  prefetchDNS("https://example.com");
  return ...;
}

----------------------------------------

TITLE: Basic memo Usage
DESCRIPTION: Demonstrates the basic syntax for memoizing a React component using memo. Shows the fundamental pattern of wrapping a component to prevent unnecessary re-renders.

LANGUAGE: javascript
CODE:
import { memo } from 'react';

const SomeComponent = memo(function SomeComponent(props) {
  // ...
});

----------------------------------------

TITLE: Running React.dev Development Server
DESCRIPTION: Commands for starting the Next.js-powered development server and opening the site in a browser at localhost:3000.

LANGUAGE: bash
CODE:
yarn dev
open http://localhost:3000

----------------------------------------

TITLE: Specifying Default Prop Value in React Component
DESCRIPTION: Shows how to set a default value for a prop using destructuring in the function parameter. If the size prop is not provided, it defaults to 100.

LANGUAGE: jsx
CODE:
function Avatar({ person, size = 100 }) {
  // ...
}

----------------------------------------

TITLE: Basic Input Usage
DESCRIPTION: Simple example showing basic input element usage in React.

LANGUAGE: javascript
CODE:
<input />

----------------------------------------

TITLE: Demonstrating Limitations of Tainting in React
DESCRIPTION: Illustrates that deriving new values from tainted ones doesn't automatically taint the new value. In this example, uppercasing a tainted password creates an untainted value.

LANGUAGE: javascript
CODE:
import {experimental_taintUniqueValue} from 'react';

const password = 'correct horse battery staple';

experimental_taintUniqueValue(
  'Do not pass the password to the client.',
  globalThis,
  password
);

const uppercasePassword = password.toUpperCase() // `uppercasePassword` is not tainted

----------------------------------------

TITLE: Multiple Form Actions Implementation
DESCRIPTION: Demonstrates handling multiple submission types within a single form using formAction prop on buttons to execute different actions based on which button is clicked.

LANGUAGE: jsx
CODE:
export default function Search() {
  function publish(formData) {
    const content = formData.get("content");
    const button = formData.get("button");
    alert(`'${content}' was published with the '${button}' button`);
  }

  function save(formData) {
    const content = formData.get("content");
    alert(`Your draft of '${content}' has been saved!`);
  }

  return (
    <form action={publish}>
      <textarea name="content" rows={4} cols={40} />
      <br />
      <button type="submit" name="button" value="submit">Publish</button>
      <button formAction={save}>Save draft</button>
    </form>
  );
}

----------------------------------------

TITLE: Document Metadata Implementation in React
DESCRIPTION: Shows how to add multiple metadata entries including author, keywords, and description to a document.

LANGUAGE: html
CODE:
<meta name="author" content="John Smith" />
<meta name="keywords" content="React, JavaScript, semantic markup, html" />
<meta name="description" content="API reference for the <meta> component in React DOM" />

----------------------------------------

TITLE: Loading React 19 via ESM CDN
DESCRIPTION: Example showing how to load React 19 using ESM-based CDN in browser.

LANGUAGE: html
CODE:
<script type="module">
  import React from "https://esm.sh/react@19/?dev"
  import ReactDOMClient from "https://esm.sh/react-dom@19/client?dev"
  ...
</script>

----------------------------------------

TITLE: Static React Product Table Components
DESCRIPTION: Initial implementation of React components for rendering a static product table with filtering capabilities.

LANGUAGE: jsx
CODE:
function ProductCategoryRow({ category }) {
  return (
    <tr>
      <th colSpan="2">
        {category}
      </th>
    </tr>
  );
}

function ProductRow({ product }) {
  const name = product.stocked ? product.name :
    <span style={{ color: 'red' }}>
      {product.name}
    </span>;

  return (
    <tr>
      <td>{name}</td>
      <td>{product.price}</td>
    </tr>
  );
}

function ProductTable({ products }) {
  const rows = [];
  let lastCategory = null;

  products.forEach((product) => {
    if (product.category !== lastCategory) {
      rows.push(
        <ProductCategoryRow
          category={product.category}
          key={product.category} />
      );
    }
    rows.push(
      <ProductRow
        product={product}
        key={product.name} />
    );
    lastCategory = product.category;
  });

  return (
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Price</th>
        </tr>
      </thead>
      <tbody>{rows}</tbody>
    </table>
  );
}

----------------------------------------

TITLE: Replacing renderIntoDocument with @testing-library/react render
DESCRIPTION: Demonstrates how to replace the deprecated renderIntoDocument utility with the modern render function from @testing-library/react.

LANGUAGE: javascript
CODE:
import {renderIntoDocument} from 'react-dom/test-utils';

renderIntoDocument(<Component />);

LANGUAGE: javascript
CODE:
import {render} from '@testing-library/react';

render(<Component />);

----------------------------------------

TITLE: Using forwardRef Component in Parent Form in React
DESCRIPTION: Demonstration of how a parent component can use a forwardRef child component. The Form component creates a ref and passes it to MyInput, allowing it to access the input DOM node.

LANGUAGE: javascript
CODE:
function Form() {
  const ref = useRef(null);

  function handleClick() {
    ref.current.focus();
  }

  return (
    <form>
      <MyInput label="Enter your name:" ref={ref} />
      <button type="button" onClick={handleClick}>
        Edit
      </button>
    </form>
  );
}

----------------------------------------

TITLE: Importing and Using preinit in React Component
DESCRIPTION: Example showing how to import and use preinit within a React component

LANGUAGE: javascript
CODE:
import { preinit } from 'react-dom';

function AppRoot() {
  preinit("https://example.com/script.js", {as: "script"});
  // ...
}

----------------------------------------

TITLE: Print Dialog Integration with React flushSync
DESCRIPTION: Complete example demonstrating how to use flushSync with browser print APIs to ensure state updates are reflected before the print dialog opens.

LANGUAGE: javascript
CODE:
import { useState, useEffect } from 'react';
import { flushSync } from 'react-dom';

export default function PrintApp() {
  const [isPrinting, setIsPrinting] = useState(false);

  useEffect(() => {
    function handleBeforePrint() {
      flushSync(() => {
        setIsPrinting(true);
      })
    }

    function handleAfterPrint() {
      setIsPrinting(false);
    }

    window.addEventListener('beforeprint', handleBeforePrint);
    window.addEventListener('afterprint', handleAfterPrint);
    return () => {
      window.removeEventListener('beforeprint', handleBeforePrint);
      window.removeEventListener('afterprint', handleAfterPrint);
    }
  }, []);

  return (
    <>
      <h1>isPrinting: {isPrinting ? 'yes' : 'no'}</h1>
      <button onClick={() => window.print()}>
        Print
      </button>
    </>
  );
}