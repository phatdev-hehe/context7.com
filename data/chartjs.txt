TITLE: Basic Chart.js Configuration Structure
DESCRIPTION: Demonstrates the top-level structure of a Chart.js configuration object, showing the main properties: type, data, options, and plugins.

LANGUAGE: javascript
CODE:
const config = {
  type: 'line',
  data: {},
  options: {},
  plugins: []
}

----------------------------------------

TITLE: Configuring Chart.js Bar Chart
DESCRIPTION: JavaScript configuration for creating a bar chart with Chart.js, including data structure, labels, and scale options.

LANGUAGE: html
CODE:
<script>
  const ctx = document.getElementById('myChart');

  new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
      datasets: [{
        label: '# of Votes',
        data: [12, 19, 3, 5, 2, 3],
        borderWidth: 1
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
</script>

----------------------------------------

TITLE: Creating Basic Bar Chart with Chart.js
DESCRIPTION: Complete example showing HTML structure and JavaScript code for creating a basic bar chart using Chart.js. Includes canvas setup, CDN integration, and chart configuration with data visualization for vote counts.

LANGUAGE: html
CODE:
<div>
  <canvas id="myChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  const ctx = document.getElementById('myChart');

  new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
      datasets: [{
        label: '# of Votes',
        data: [12, 19, 3, 5, 2, 3],
        borderWidth: 1
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
</script>

----------------------------------------

TITLE: Basic Chart.js Implementation
DESCRIPTION: Initial Chart.js setup with bar chart configuration and dummy data

LANGUAGE: jsx
CODE:
import Chart from 'chart.js/auto'

(async function() {
  const data = [
    { year: 2010, count: 10 },
    { year: 2011, count: 20 },
    { year: 2012, count: 15 },
    { year: 2013, count: 25 },
    { year: 2014, count: 22 },
    { year: 2015, count: 30 },
    { year: 2016, count: 28 },
  ];

  new Chart(
    document.getElementById('acquisitions'),
    {
      type: 'bar',
      data: {
        labels: data.map(row => row.year),
        datasets: [
          {
            label: 'Acquisitions by year',
            data: data.map(row => row.count)
          }
        ]
      }
    }
  );
})();

----------------------------------------

TITLE: Installing Chart.js via npm
DESCRIPTION: Command to install Chart.js using the Node Package Manager (npm). This is the recommended method for projects using Node.js or modern JavaScript build tools.

LANGUAGE: sh
CODE:
npm install chart.js

----------------------------------------

TITLE: External HTML Tooltip Implementation in Chart.js
DESCRIPTION: Complete example of implementing an external HTML-based tooltip with custom positioning and styling.

LANGUAGE: javascript
CODE:
const myPieChart = new Chart(ctx, {
    type: 'pie',
    data: data,
    options: {
        plugins: {
            tooltip: {
                enabled: false,
                external: function(context) {
                    let tooltipEl = document.getElementById('chartjs-tooltip');
                    if (!tooltipEl) {
                        tooltipEl = document.createElement('div');
                        tooltipEl.id = 'chartjs-tooltip';
                        tooltipEl.innerHTML = '<table></table>';
                        document.body.appendChild(tooltipEl);
                    }
                    const tooltipModel = context.tooltip;
                    if (tooltipModel.opacity === 0) {
                        tooltipEl.style.opacity = 0;
                        return;
                    }
                    tooltipEl.classList.remove('above', 'below', 'no-transform');
                    if (tooltipModel.yAlign) {
                        tooltipEl.classList.add(tooltipModel.yAlign);
                    } else {
                        tooltipEl.classList.add('no-transform');
                    }
                    function getBody(bodyItem) {
                        return bodyItem.lines;
                    }
                    if (tooltipModel.body) {
                        const titleLines = tooltipModel.title || [];
                        const bodyLines = tooltipModel.body.map(getBody);
                        let innerHtml = '<thead>';
                        titleLines.forEach(function(title) {
                            innerHtml += '<tr><th>' + title + '</th></tr>';
                        });
                        innerHtml += '</thead><tbody>';
                        bodyLines.forEach(function(body, i) {
                            const colors = tooltipModel.labelColors[i];
                            let style = 'background:' + colors.backgroundColor;
                            style += '; border-color:' + colors.borderColor;
                            style += '; border-width: 2px';
                            const span = '<span style="' + style + '">' + body + '</span>';
                            innerHtml += '<tr><td>' + span + '</td></tr>';
                        });
                        innerHtml += '</tbody>';
                        let tableRoot = tooltipEl.querySelector('table');
                        tableRoot.innerHTML = innerHtml;
                    }
                    const position = context.chart.canvas.getBoundingClientRect();
                    const bodyFont = Chart.helpers.toFont(tooltipModel.options.bodyFont);
                    tooltipEl.style.opacity = 1;
                    tooltipEl.style.position = 'absolute';
                    tooltipEl.style.left = position.left + window.pageXOffset + tooltipModel.caretX + 'px';
                    tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY + 'px';
                    tooltipEl.style.font = bodyFont.string;
                    tooltipEl.style.padding = tooltipModel.padding + 'px ' + tooltipModel.padding + 'px';
                    tooltipEl.style.pointerEvents = 'none';
                }
            }
        }
    }
});

----------------------------------------

TITLE: Basic Line Chart Configuration in Chart.js
DESCRIPTION: Creates a basic line chart with a single dataset showing monthly data points. Demonstrates basic setup with labels, data points, and styling properties like border color and line tension.

LANGUAGE: javascript
CODE:
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First Dataset',
    data: [65, 59, 80, 81, 56, 55, 40],
    fill: false,
    borderColor: 'rgb(75, 192, 192)',
    tension: 0.1
  }]
};

const config = {
  type: 'line',
  data: data,
};

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Basic HTML Structure for Chart.js
DESCRIPTION: HTML template with canvas elements for rendering Chart.js charts

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <title>Chart.js example</title>
  </head>
  <body>
    <div style="width: 800px;"><canvas id="acquisitions"></canvas></div>
    <script type="module" src="acquisitions.js"></script>
  </body>
</html>

----------------------------------------

TITLE: Global Line Chart Configuration in Chart.js
DESCRIPTION: Shows how to set global configuration options for all line charts using Chart.js overrides system.

LANGUAGE: javascript
CODE:
Chart.overrides.line.spanGaps = true;

----------------------------------------

TITLE: Initializing Basic Bar Chart - Chart.js
DESCRIPTION: Creates a basic vertical bar chart with customized colors and data points. Includes setup for labels, dataset configuration, and chart options with y-axis starting at zero.

LANGUAGE: javascript
CODE:
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First Dataset',
    data: [65, 59, 80, 81, 56, 55, 40],
    backgroundColor: [
      'rgba(255, 99, 132, 0.2)',
      'rgba(255, 159, 64, 0.2)',
      'rgba(255, 205, 86, 0.2)',
      'rgba(75, 192, 192, 0.2)',
      'rgba(54, 162, 235, 0.2)',
      'rgba(153, 102, 255, 0.2)',
      'rgba(201, 203, 207, 0.2)'
    ],
    borderColor: [
      'rgb(255, 99, 132)',
      'rgb(255, 159, 64)',
      'rgb(255, 205, 86)',
      'rgb(75, 192, 192)',
      'rgb(54, 162, 235)',
      'rgb(153, 102, 255)',
      'rgb(201, 203, 207)'
    ],
    borderWidth: 1
  }]
};

const config = {
  type: 'bar',
  data: data,
  options: {
    scales: {
      y: {
        beginAtZero: true
      }
    }
  },
};

----------------------------------------

TITLE: Setting up Chart.js Canvas Container
DESCRIPTION: HTML markup for creating a canvas element container for Chart.js visualization. The container helps with chart responsiveness.

LANGUAGE: html
CODE:
<div>
  <canvas id="myChart"></canvas>
</div>

----------------------------------------

TITLE: Implementing Hide and Show Transitions in Chart.js
DESCRIPTION: Demonstrates how to configure show/hide transitions for a line chart. The animations control how data points appear and disappear by animating their x and y coordinates.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const data = {
  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
  datasets: [{
    label: 'Try hiding me',
    data: [65, 59, 80, 81, 26, 55, 40],
    fill: false,
    borderColor: 'rgb(75, 192, 192)',
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    transitions: {
      show: {
        animations: {
          x: {
            from: 0
          },
          y: {
            from: 0
          }
        }
      },
      hide: {
        animations: {
          x: {
            to: 0
          },
          y: {
            to: 0
          }
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Loading Chart.js via Script Tag in HTML
DESCRIPTION: This snippet demonstrates how to include Chart.js using a script tag in an HTML file and create a basic chart instance.

LANGUAGE: html
CODE:
<script src="path/to/chartjs/dist/chart.umd.js"></script>
<script>
    const myChart = new Chart(ctx, {...});
</script>

----------------------------------------

TITLE: Creating a Chart Instance in JavaScript
DESCRIPTION: Example of creating a new Chart instance using Chart.js.

LANGUAGE: javascript
CODE:
const myLineChart = new Chart(ctx, config);

----------------------------------------

TITLE: Creating Interactive Radar Chart with Chart.js
DESCRIPTION: Complete configuration for a radar chart with dynamic styling, data generation, and interactive features. Includes setup for randomized data, custom point styles, dynamic radius calculation, and color manipulation. The chart displays data across seven categories with customizable visual properties.

LANGUAGE: javascript
CODE:
// <block:setup:2>
const DATA_COUNT = 7;
Utils.srand(110);

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
];
// </block:setup>

// <block:data:1>
function generateData() {
  return Utils.numbers({
    count: DATA_COUNT,
    min: 0,
    max: 100
  });
}

const data = {
  labels: [['Eating', 'Dinner'], ['Drinking', 'Water'], 'Sleeping', ['Designing', 'Graphics'], 'Coding', 'Cycling', 'Running'],
  datasets: [{
    data: generateData()
  }]
};
// </block:data>

// <block:options:0>
function getLineColor(ctx) {
  return Utils.color(ctx.datasetIndex);
}

function alternatePointStyles(ctx) {
  const index = ctx.dataIndex;
  return index % 2 === 0 ? 'circle' : 'rect';
}

function makeHalfAsOpaque(ctx) {
  return Utils.transparentize(getLineColor(ctx));
}

function make20PercentOpaque(ctx) {
  return Utils.transparentize(getLineColor(ctx), 0.8);
}

function adjustRadiusBasedOnData(ctx) {
  const v = ctx.parsed.y;
  return v < 10 ? 5
    : v < 25 ? 7
    : v < 50 ? 9
    : v < 75 ? 11
    : 15;
}

const config = {
  type: 'radar',
  data: data,
  options: {
    plugins: {
      legend: false,
      tooltip: false,
    },
    elements: {
      line: {
        backgroundColor: make20PercentOpaque,
        borderColor: getLineColor,
      },
      point: {
        backgroundColor: getLineColor,
        hoverBackgroundColor: makeHalfAsOpaque,
        radius: adjustRadiusBasedOnData,
        pointStyle: alternatePointStyles,
        hoverRadius: 15,
      }
    }
  }
};
// </block:options>

module.exports = {
  actions,
  config,
};

----------------------------------------

TITLE: Implementing Scriptable Options in Chart.js
DESCRIPTION: Demonstrates how to use scriptable options in Chart.js for dynamic color assignment based on data values and indices. Also shows how to access other option values within a scriptable function.

LANGUAGE: javascript
CODE:
color: function(context) {
    const index = context.dataIndex;
    const value = context.dataset.data[index];
    return value < 0 ? 'red' :  // draw negative values in red
        index % 2 ? 'blue' :    // else, alternate values in blue and green
        'green';
},
borderColor: function(context, options) {
    const color = options.color; // resolve the value of another scriptable option: 'red', 'blue' or 'green'
    return Chart.helpers.color(color).lighten(0.2);
}

----------------------------------------

TITLE: Updating Chart Data and Animating Changes in JavaScript
DESCRIPTION: Shows how to update chart data and trigger an animation using the update() method.

LANGUAGE: javascript
CODE:
myLineChart.data.datasets[0].data[2] = 50; // Would update the first dataset's value of 'March' to be 50
myLineChart.update(); // Calling update now animates the position of March from 90 to 50.

----------------------------------------

TITLE: Configuring Basic Radar Chart in Chart.js
DESCRIPTION: Demonstrates the setup of a radar chart with two datasets, including data configuration, styling, and chart options. Shows how to create a comparative visualization of multiple metrics.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const data = {
  labels: [
    'Eating',
    'Drinking',
    'Sleeping',
    'Designing',
    'Coding',
    'Cycling',
    'Running'
  ],
  datasets: [{
    label: 'My First Dataset',
    data: [65, 59, 90, 81, 56, 55, 40],
    fill: true,
    backgroundColor: 'rgba(255, 99, 132, 0.2)',
    borderColor: 'rgb(255, 99, 132)',
    pointBackgroundColor: 'rgb(255, 99, 132)',
    pointBorderColor: '#fff',
    pointHoverBackgroundColor: '#fff',
    pointHoverBorderColor: 'rgb(255, 99, 132)'
  }, {
    label: 'My Second Dataset',
    data: [28, 48, 40, 19, 96, 27, 100],
    fill: true,
    backgroundColor: 'rgba(54, 162, 235, 0.2)',
    borderColor: 'rgb(54, 162, 235)',
    pointBackgroundColor: 'rgb(54, 162, 235)',
    pointBorderColor: '#fff',
    pointHoverBackgroundColor: '#fff',
    pointHoverBorderColor: 'rgb(54, 162, 235)'
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'radar',
  data: data,
  options: {
    elements: {
      line: {
        borderWidth: 3
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Implementing Responsive Chart Container in HTML
DESCRIPTION: Demonstrates the correct way to create a responsive chart container using relative positioning and viewport units. This approach ensures proper chart resizing while maintaining render quality.

LANGUAGE: html
CODE:
<div class="chart-container" style="position: relative; height:40vh; width:80vw">
    <canvas id="chart"></canvas>
</div>

----------------------------------------

TITLE: Creating Doughnut Chart - JavaScript Chart.js
DESCRIPTION: Implementation of a basic doughnut chart with three colored segments representing different values. Uses Chart.js configuration to set up data, colors, and hover effects.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const data = {
  labels: [
    'Red',
    'Blue',
    'Yellow'
  ],
  datasets: [{
    label: 'My First Dataset',
    data: [300, 50, 100],
    backgroundColor: [
      'rgb(255, 99, 132)',
      'rgb(54, 162, 235)',
      'rgb(255, 205, 86)'
    ],
    hoverOffset: 4
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'doughnut',
  data: data,
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Initializing a Mixed Bar and Line Chart with Chart.js
DESCRIPTION: This snippet shows how to create a mixed chart with both bar and line datasets using Chart.js. It demonstrates setting up data for both chart types and specifying the chart type for each dataset.

LANGUAGE: javascript
CODE:
const mixedChart = new Chart(ctx, {
    data: {
        datasets: [{
            type: 'bar',
            label: 'Bar Dataset',
            data: [10, 20, 30, 40]
        }, {
            type: 'line',
            label: 'Line Dataset',
            data: [50, 50, 50, 50],
        }],
        labels: ['January', 'February', 'March', 'April']
    },
    options: options
});

----------------------------------------

TITLE: Implementing Multi-Color Fill in Chart.js
DESCRIPTION: Shows how to configure multiple fill colors above and below a target value in Chart.js area charts.

LANGUAGE: javascript
CODE:
new Chart(ctx, {
    data: {
        datasets: [
            {
              fill: {
                target: 'origin',
                above: 'rgb(255, 0, 0)',   // Area will be red above the origin
                below: 'rgb(0, 0, 255)'    // And blue below the origin
              }
            }
        ]
    }
});

----------------------------------------

TITLE: Using Shared Plugins in Chart.js
DESCRIPTION: Demonstrates how to create a plugin and use it across multiple chart instances. Also shows how to create a chart without using the plugin.

LANGUAGE: javascript
CODE:
const plugin = { /* plugin implementation */ };

// chart1 and chart2 use "plugin"
const chart1 = new Chart(ctx, {
    plugins: [plugin]
});

const chart2 = new Chart(ctx, {
    plugins: [plugin]
});

// chart3 doesn't use "plugin"
const chart3 = new Chart(ctx, {});

----------------------------------------

TITLE: Configuring Scatter Chart with Chart.js
DESCRIPTION: This snippet demonstrates how to create a scatter chart with 4 data points using Chart.js. It includes setup for data, chart configuration, and export for module use.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const data = {
  datasets: [{
    label: 'Scatter Dataset',
    data: [{
      x: -10,
      y: 0
    }, {
      x: 0,
      y: 10
    }, {
      x: 10,
      y: 5
    }, {
      x: 0.5,
      y: 5.5
    }],
    backgroundColor: 'rgb(255, 99, 132)'
  }],
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'scatter',
  data: data,
  options: {
    scales: {
      x: {
        type: 'linear',
        position: 'bottom'
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Configuring Line Styles with Chart.js
DESCRIPTION: Creates a line chart configuration with three different line styles (unfilled, dashed, and filled) using Chart.js. The configuration includes data generation, styling options, responsive design, and axis labels. Uses utility functions for generating sample data and colors.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: DATA_COUNT});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Unfilled',
      fill: false,
      backgroundColor: Utils.CHART_COLORS.blue,
      borderColor: Utils.CHART_COLORS.blue,
      data: Utils.numbers(NUMBER_CFG),
    }, {
      label: 'Dashed',
      fill: false,
      backgroundColor: Utils.CHART_COLORS.green,
      borderColor: Utils.CHART_COLORS.green,
      borderDash: [5, 5],
      data: Utils.numbers(NUMBER_CFG),
    }, {
      label: 'Filled',
      backgroundColor: Utils.CHART_COLORS.red,
      borderColor: Utils.CHART_COLORS.red,
      data: Utils.numbers(NUMBER_CFG),
      fill: true,
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Line Chart'
      },
    },
    interaction: {
      mode: 'index',
      intersect: false
    },
    scales: {
      x: {
        display: true,
        title: {
          display: true,
          text: 'Month'
        }
      },
      y: {
        display: true,
        title: {
          display: true,
          text: 'Value'
        }
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Creating an Accessible Canvas with Fallback Content in HTML
DESCRIPTION: This example shows how to provide fallback content within a canvas element to ensure accessibility for screen readers and browsers that don't support canvas.

LANGUAGE: html
CODE:
<canvas id="okCanvas2" width="400" height="100">
    <p>Hello Fallback World</p>
</canvas>

----------------------------------------

TITLE: Importing and Registering Chart.js Components
DESCRIPTION: Example of importing and registering specific Chart.js components for tree-shaking benefits in version 3.x

LANGUAGE: javascript
CODE:
import { Chart, LineController, LineElement, PointElement, LinearScale, Title } from `chart.js`

Chart.register(LineController, LineElement, PointElement, LinearScale, Title);

const chart = new Chart(ctx, {
    type: 'line',
    // data: ...
    options: {
        plugins: {
            title: {
                display: true,
                text: 'Chart Title'
            }
        },
        scales: {
            x: {
                type: 'linear'
            },
            y: {
                type: 'linear'
            }
        }
    }
})

----------------------------------------

TITLE: Configuring Currency Label Format in Chart.js Tooltip
DESCRIPTION: Example showing how to customize tooltip labels to display currency values with proper formatting using the Intl.NumberFormat API.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        plugins: {
            tooltip: {
                callbacks: {
                    label: function(context) {
                        let label = context.dataset.label || '';

                        if (label) {
                            label += ': ';
                        }
                        if (context.parsed.y !== null) {
                            label += new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(context.parsed.y);
                        }
                        return label;
                    }
                }
            }
        }
    }
});

----------------------------------------

TITLE: Configuring Chart.js Doughnut Chart with Interactive Controls
DESCRIPTION: Creates a doughnut chart with interactive controls for data manipulation. Includes functionality to randomize data, add/remove datasets and data points, and toggle visibility of chart elements. Uses Chart.js utility functions for data generation and color management.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: [],
        data: [],
      };

      for (let i = 0; i < data.labels.length; i++) {
        newDataset.data.push(Utils.numbers({count: 1, min: 0, max: 100}));

        const colorIndex = i % Object.keys(Utils.CHART_COLORS).length;
        newDataset.backgroundColor.push(Object.values(Utils.CHART_COLORS)[colorIndex]);
      }

      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels.push('data #' + (data.labels.length + 1));

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(0, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Hide(0)',
    handler(chart) {
      chart.hide(0);
    }
  },
  {
    name: 'Show(0)',
    handler(chart) {
      chart.show(0);
    }
  },
  {
    name: 'Hide (0, 1)',
    handler(chart) {
      chart.hide(0, 1);
    }
  },
  {
    name: 'Show (0, 1)',
    handler(chart) {
      chart.show(0, 1);
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 5;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const data = {
  labels: ['Red', 'Orange', 'Yellow', 'Green', 'Blue'],
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Object.values(Utils.CHART_COLORS),
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'doughnut',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Doughnut Chart'
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Controlling Drawing Order in Mixed Charts with Chart.js
DESCRIPTION: This snippet illustrates how to control the drawing order of datasets in a mixed chart using the 'order' property. Lower order values are drawn on top, allowing for customization of dataset layering.

LANGUAGE: javascript
CODE:
const mixedChart = new Chart(ctx, {
    type: 'bar',
    data: {
        datasets: [{
            label: 'Bar Dataset',
            data: [10, 20, 30, 40],
            // this dataset is drawn below
            order: 2
        }, {
            label: 'Line Dataset',
            data: [10, 10, 10, 10],
            type: 'line',
            // this dataset is drawn on top
            order: 1
        }],
        labels: ['January', 'February', 'March', 'April']
    },
    options: options
});

----------------------------------------

TITLE: Configuring Per-Dataset Colors in Chart.js
DESCRIPTION: This example shows how to set individual background and border colors for multiple datasets in a Chart.js configuration object.

LANGUAGE: javascript
CODE:
const data = {
  labels: ['A', 'B', 'C'],
  datasets: [
    {
      label: 'Dataset 1',
      data: [1, 2, 3],
      borderColor: '#36A2EB',
      backgroundColor: '#9BD0F5',
    },
    {
      label: 'Dataset 2',
      data: [2, 3, 4],
      borderColor: '#FF6384',
      backgroundColor: '#FFB1C1',
    }
  ]
};

----------------------------------------

TITLE: Configuring Chart.js Pie Chart with Interactive Actions
DESCRIPTION: Complete configuration for a Chart.js pie chart including action handlers for randomizing data, adding/removing datasets and data points, and initial chart setup. Uses the Chart.js Utils helper for generating random numbers and colors.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: [],
        data: [],
      };

      for (let i = 0; i < data.labels.length; i++) {
        newDataset.data.push(Utils.numbers({count: 1, min: 0, max: 100}));

        const colorIndex = i % Object.keys(Utils.CHART_COLORS).length;
        newDataset.backgroundColor.push(Object.values(Utils.CHART_COLORS)[colorIndex]);
      }

      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels.push('data #' + (data.labels.length + 1));

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(0, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 5;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const data = {
  labels: ['Red', 'Orange', 'Yellow', 'Green', 'Blue'],
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Object.values(Utils.CHART_COLORS),
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'pie',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Pie Chart'
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Creating Logarithmic Scale Chart with Chart.js
DESCRIPTION: Creates a line chart with logarithmic Y-axis scale using Chart.js. Includes random data generation function, chart configuration with logarithmic scale, and a randomize action for data updates. Uses utility functions for colors and month labels.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const logNumbers = (num) => {
  const data = [];

  for (let i = 0; i < num; ++i) {
    data.push(Math.ceil(Math.random() * 10.0) * Math.pow(10, Math.ceil(Math.random() * 5)));
  }

  return data;
};

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = logNumbers(chart.data.labels.length);
      });
      chart.update();
    }
  },
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: logNumbers(DATA_COUNT),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.CHART_COLORS.red,
      fill: false,
    },
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Line Chart - Logarithmic'
      }
    },
    scales: {
      x: {
        display: true,
      },
      y: {
        display: true,
        type: 'logarithmic',
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Configuring Chart.js Fonts with Global and Specific Settings
DESCRIPTION: Demonstrates how to set global font size defaults and override them with specific configuration for legend labels. Shows the interaction between global Chart.js font settings and local chart configuration options.

LANGUAGE: javascript
CODE:
Chart.defaults.font.size = 16;
let chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        plugins: {
            legend: {
                labels: {
                    // This more specific font property overrides the global property
                    font: {
                        size: 14
                    }
                }
            }
        }
    }
});

----------------------------------------

TITLE: Configuring Point Styles for Chart.js Line Chart
DESCRIPTION: This code snippet sets up a Chart.js line chart with customizable point styles. It defines actions to change point styles, initializes chart data, and configures chart options. The chart displays a single dataset with customizable point styles, sizes, and colors.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'pointStyle: circle (default)',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'circle';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: cross',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'cross';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: crossRot',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'crossRot';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: dash',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'dash';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: line',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'line';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: rect',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'rect';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: rectRounded',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'rectRounded';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: rectRot',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'rectRot';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: star',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'star';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: triangle',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = 'triangle';
      });
      chart.update();
    }
  },
  {
    name: 'pointStyle: false',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.pointStyle = false;
      });
      chart.update();
    }
  }
];
// </block:actions>

// <block:setup:1>
const data = {
  labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6'],
  datasets: [
    {
      label: 'Dataset',
      data: Utils.numbers({count: 6, min: -100, max: 100}),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      pointStyle: 'circle',
      pointRadius: 10,
      pointHoverRadius: 15
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: (ctx) => 'Point Style: ' + ctx.chart.data.datasets[0].pointStyle,
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Creating Pie Chart - JavaScript Chart.js
DESCRIPTION: Implementation of a basic pie chart with three colored segments. Similar to the doughnut chart but with a different chart type configuration.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const data = {
  labels: [
    'Red',
    'Blue',
    'Yellow'
  ],
  datasets: [{
    label: 'My First Dataset',
    data: [300, 50, 100],
    backgroundColor: [
      'rgb(255, 99, 132)',
      'rgb(54, 162, 235)',
      'rgb(255, 205, 86)'
    ],
    hoverOffset: 4
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'pie',
  data: data,
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Configuring Chart.js Vertical Bar Chart
DESCRIPTION: This snippet defines the configuration for the vertical bar chart. It specifies the chart type, data, and various options such as responsiveness, legend position, and chart title.

LANGUAGE: javascript
CODE:
const config = {
  type: 'bar',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Bar Chart'
      }
    }
  },
};

----------------------------------------

TITLE: Setting Active Elements in JavaScript
DESCRIPTION: Shows how to programmatically set active (hovered) elements on the chart.

LANGUAGE: javascript
CODE:
chart.setActiveElements([
    {datasetIndex: 0, index: 1},
]);

----------------------------------------

TITLE: Creating Multiple Axes in Chart.js
DESCRIPTION: This snippet shows how to create multiple axes in Chart.js. It creates two y-axes and binds different datasets to each axis using the yAxisID property.

LANGUAGE: javascript
CODE:
const myChart = new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            data: [20, 50, 100, 75, 25, 0],
            label: 'Left dataset',
            yAxisID: 'left-y-axis'
        }, {
            data: [0.1, 0.5, 1.0, 2.0, 1.5, 0],
            label: 'Right dataset',
            yAxisID: 'right-y-axis'
        }],
        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
    },
    options: {
        scales: {
            'left-y-axis': {
                type: 'linear',
                position: 'left'
            },
            'right-y-axis': {
                type: 'linear',
                position: 'right'
            }
        }
    }
});

----------------------------------------

TITLE: Configuring Chart.js with Object Array Data
DESCRIPTION: Illustrates how to use an array of objects for data points in a line chart, including examples with date strings and categorical data.

LANGUAGE: javascript
CODE:
const cfg = {
  type: 'line',
  data: {
    datasets: [{
      data: [{x: 10, y: 20}, {x: 15, y: null}, {x: 20, y: 10}]
    }]
  }
}

LANGUAGE: javascript
CODE:
const cfg = {
  type: 'line',
  data: {
    datasets: [{
      data: [{x: '2016-12-25', y: 20}, {x: '2016-12-26', y: 10}]
    }]
  }
}

LANGUAGE: javascript
CODE:
const cfg = {
  type: 'bar',
  data: {
    datasets: [{
      data: [{x: 'Sales', y: 20}, {x: 'Revenue', y: 10}]
    }]
  }
}

----------------------------------------

TITLE: Configuring Chart.js for Horizontal Bar Chart
DESCRIPTION: Sets up the configuration for the horizontal bar chart, including chart type, data, and various options such as axis orientation, element styles, responsiveness, and plugins for legend and title.

LANGUAGE: javascript
CODE:
const config = {
  type: 'bar',
  data: data,
  options: {
    indexAxis: 'y',
    // Elements options apply to all of the options unless overridden in a dataset
    // In this case, we are setting the border of each horizontal bar to be 2px wide
    elements: {
      bar: {
        borderWidth: 2,
      }
    },
    responsive: true,
    plugins: {
      legend: {
        position: 'right',
      },
      title: {
        display: true,
        text: 'Chart.js Horizontal Bar Chart'
      }
    }
  },
};

----------------------------------------

TITLE: TypeScript Type Definitions for Custom Chart
DESCRIPTION: TypeScript declaration file example showing how to add type definitions for a custom chart type using declaration merging.

LANGUAGE: typescript
CODE:
import { ChartTypeRegistry } from 'chart.js';

declare module 'chart.js' {
    interface ChartTypeRegistry {
        derivedBubble: ChartTypeRegistry['bubble']
    }
}

----------------------------------------

TITLE: Basic Chart.js Legend Configuration Example
DESCRIPTION: Demonstrates how to create a bar chart with legend enabled and custom text color configuration.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
    type: 'bar',
    data: data,
    options: {
        plugins: {
            legend: {
                display: true,
                labels: {
                    color: 'rgb(255, 99, 132)'
                }
            }
        }
    }
});

----------------------------------------

TITLE: Configuring Chart Options in Chart.js
DESCRIPTION: This snippet sets up the configuration for the chart, including its type, data, and various options. It specifies scale settings, plugin configurations, and interaction behavior.

LANGUAGE: javascript
CODE:
// <block:config:1>
const config = {
  type: 'line',
  data: data,
  options: {
    scales: {
      y: {
        stacked: true
      }
    },
    plugins: {
      filler: {
        propagate: false
      },
      'samples-filler-analyser': {
        target: 'chart-analyser'
      }
    },
    interaction: {
      intersect: false,
    },
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Implementing Color Background Plugin in Chart.js
DESCRIPTION: A custom Chart.js plugin that adds a solid color background to the canvas. The plugin uses the beforeDraw hook to render the background color behind the chart elements using canvas operations. The background color is configurable through plugin options.

LANGUAGE: javascript
CODE:
const data = {
  labels: [
    'Red',
    'Blue',
    'Yellow'
  ],
  datasets: [{
    label: 'My First Dataset',
    data: [300, 50, 100],
    backgroundColor: [
      'rgb(255, 99, 132)',
      'rgb(54, 162, 235)',
      'rgb(255, 205, 86)'
    ],
    hoverOffset: 4
  }]
};

const plugin = {
  id: 'customCanvasBackgroundColor',
  beforeDraw: (chart, args, options) => {
    const {ctx} = chart;
    ctx.save();
    ctx.globalCompositeOperation = 'destination-over';
    ctx.fillStyle = options.color || '#99ffff';
    ctx.fillRect(0, 0, chart.width, chart.height);
    ctx.restore();
  }
};

const config = {
  type: 'doughnut',
  data: data,
  options: {
    plugins: {
      customCanvasBackgroundColor: {
        color: 'lightGreen',
      }
    }
  },
  plugins: [plugin],
};

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Configuring a Mixed Chart with Custom Styling in Chart.js
DESCRIPTION: This code block sets up a more complex mixed chart configuration with custom styling for both bar and line datasets. It includes color settings, fill options, and axis configuration.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const data = {
  labels: [
    'January',
    'February',
    'March',
    'April'
  ],
  datasets: [{
    type: 'bar',
    label: 'Bar Dataset',
    data: [10, 20, 30, 40],
    borderColor: 'rgb(255, 99, 132)',
    backgroundColor: 'rgba(255, 99, 132, 0.2)'
  }, {
    type: 'line',
    label: 'Line Dataset',
    data: [50, 50, 50, 50],
    fill: false,
    borderColor: 'rgb(54, 162, 235)'
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'scatter',
  data: data,
  options: {
    scales: {
      y: {
        beginAtZero: true
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Implementing Grace Percentage in Chart.js Bar Chart
DESCRIPTION: Demonstrates how to use grace percentage in a bar chart's linear scale to extend the scale range. Uses a 5% grace value to add padding above and below the data range.

LANGUAGE: javascript
CODE:
const labels = Utils.months({count: 7});
const data = {
  labels: ['Positive', 'Negative'],
  datasets: [{
    data: [100, -50],
    backgroundColor: 'rgb(255, 99, 132)'
  }],
};

const config = {
  type: 'bar',
  data,
  options: {
    scales: {
      y: {
        type: 'linear',
        grace: '5%'
      }
    },
    plugins: {
      legend: false
    }
  }
};

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Configuring Line Chart Datasets with Chart.js
DESCRIPTION: This snippet sets up the data structure for a line chart with multiple datasets. It includes functions for generating labels and data, and defines the appearance of each dataset including colors and fill options.

LANGUAGE: javascript
CODE:
// <block:setup:2>
const inputs = {
  min: 20,
  max: 80,
  count: 8,
  decimals: 2,
  continuity: 1
};

const generateLabels = () => {
  return Utils.months({count: inputs.count});
};

const generateData = () => (Utils.numbers(inputs));

Utils.srand(42);
// </block:setup>

// <block:data:0>
const data = {
  labels: generateLabels(),
  datasets: [
    {
      label: 'D0',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red),
      hidden: true
    },
    {
      label: 'D1',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.orange,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.orange),
      fill: '-1'
    },
    {
      label: 'D2',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.yellow,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.yellow),
      hidden: true,
      fill: 1
    },
    {
      label: 'D3',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.green,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green),
      fill: '-1'
    },
    {
      label: 'D4',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue),
      fill: '-1'
    },
    {
      label: 'D5',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.grey,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.grey),
      fill: '+2'
    },
    {
      label: 'D6',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.purple,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.purple),
      fill: false
    },
    {
      label: 'D7',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red),
      fill: 8
    },
    {
      label: 'D8',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.orange,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.orange),
      fill: 'end',
      hidden: true
    },
    {
      label: 'D9',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.yellow,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.yellow),
      fill: {above: 'blue', below: 'red', target: {value: 350}}
    }
  ]
};
// </block:data>

----------------------------------------

TITLE: Generating Random Data for Progressive Line Chart in JavaScript
DESCRIPTION: This snippet generates two arrays of random data points for use in a progressive line chart. Each data point consists of an x-coordinate and a y-coordinate, with the y-value fluctuating based on the previous point.

LANGUAGE: javascript
CODE:
const data = [];
const data2 = [];
let prev = 100;
let prev2 = 80;
for (let i = 0; i < 1000; i++) {
  prev += 5 - Math.random() * 10;
  data.push({x: i, y: prev});
  prev2 += 5 - Math.random() * 10;
  data2.push({x: i, y: prev2});
}

----------------------------------------

TITLE: Configuring Grid Lines in Chart.js
DESCRIPTION: This example shows how to customize the grid lines of a Cartesian axis in Chart.js. It sets the grid color to red and the border and tick colors to grey.

LANGUAGE: javascript
CODE:
const config = {
  type: 'line',
  data,
  options: {
    scales: {
      x: {
        grid: {
          color: 'red',
          borderColor: 'grey',
          tickColor: 'grey'
        }
      }
    }
  }
};

----------------------------------------

TITLE: Implementing Custom Tooltip Content in Chart.js
DESCRIPTION: This code snippet creates a line chart using Chart.js with two datasets. It demonstrates how to customize the tooltip by adding a footer callback that calculates and displays the sum of y-values for all datasets at the current x-position.

LANGUAGE: javascript
CODE:
// <block:footer:2>
const footer = (tooltipItems) => {
  let sum = 0;

  tooltipItems.forEach(function(tooltipItem) {
    sum += tooltipItem.parsed.y;
  });
  return 'Sum: ' + sum;
};

// </block:footer>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100, decimals: 0};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    },
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    interaction: {
      intersect: false,
      mode: 'index',
    },
    plugins: {
      tooltip: {
        callbacks: {
          footer: footer,
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Stopping Chart Animation in JavaScript
DESCRIPTION: Demonstrates how to stop the current animation of a chart using the stop() method.

LANGUAGE: javascript
CODE:
// Stops the charts animation loop at its current frame
myLineChart.stop();
// => returns 'this' for chainability

----------------------------------------

TITLE: Changing Scale Type from Time to Logarithmic in Chart.js
DESCRIPTION: These snippets show how to change the scale type from Time to Logarithmic in Chart.js. It includes the initial configuration and the scale update, demonstrating the need to add 'bounds: 'ticks'' when changing to a Logarithmic scale.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        scales: {
            x: {
                type: 'time',
            }
        }
    }
});

LANGUAGE: javascript
CODE:
chart.options.scales.x = {
    type: 'logarithmic',
    bounds: 'ticks'
};

----------------------------------------

TITLE: Configuring Chart.js with Object Data
DESCRIPTION: Demonstrates how to use an object for data in a line chart, where property names are used for the index scale and values for the value scale.

LANGUAGE: javascript
CODE:
const cfg = {
  type: 'line',
  data: {
    datasets: [{
      data: {
        January: 10,
        February: 20
      }
    }]
  }
}

----------------------------------------

TITLE: Grid Line Configuration Example in Chart.js
DESCRIPTION: This snippet demonstrates the structure of the grid line configuration object in Chart.js. It shows various properties that can be set to customize the appearance of grid lines on an axis.

LANGUAGE: javascript
CODE:
{
  circular: false,
  color: 'Chart.defaults.borderColor',
  display: true,
  drawOnChartArea: true,
  drawTicks: true,
  lineWidth: 1,
  offset: false,
  tickBorderDash: [],
  tickBorderDashOffset: 0,
  tickColor: 'gridLineColor',
  tickLength: 8,
  tickWidth: 1,
  z: -1
}

----------------------------------------

TITLE: Configuring Chart.js Line Chart with Time Scale
DESCRIPTION: This snippet sets up a Chart.js line chart with three datasets and a time scale on the x-axis. It includes data generation, chart configuration, and a randomize action. The chart uses custom colors and formatting for the time axis.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data.forEach(function(dataObj, j) {
          const newVal = Utils.rand(0, 100);

          if (typeof dataObj === 'object') {
            dataObj.y = newVal;
          } else {
            dataset.data[j] = newVal;
          }
        });
      });
      chart.update();
    }
  },
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const data = {
  labels: [ // Date Objects
    Utils.newDate(0),
    Utils.newDate(1),
    Utils.newDate(2),
    Utils.newDate(3),
    Utils.newDate(4),
    Utils.newDate(5),
    Utils.newDate(6)
  ],
  datasets: [{
    label: 'My First dataset',
    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    borderColor: Utils.CHART_COLORS.red,
    fill: false,
    data: Utils.numbers(NUMBER_CFG),
  }, {
    label: 'My Second dataset',
    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    borderColor: Utils.CHART_COLORS.blue,
    fill: false,
    data: Utils.numbers(NUMBER_CFG),
  }, {
    label: 'Dataset with point data',
    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green, 0.5),
    borderColor: Utils.CHART_COLORS.green,
    fill: false,
    data: [{
      x: Utils.newDateString(0),
      y: Utils.rand(0, 100)
    }, {
      x: Utils.newDateString(5),
      y: Utils.rand(0, 100)
    }, {
      x: Utils.newDateString(7),
      y: Utils.rand(0, 100)
    }, {
      x: Utils.newDateString(15),
      y: Utils.rand(0, 100)
    }],
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      title: {
        text: 'Chart.js Time Scale',
        display: true
      }
    },
    scales: {
      x: {
        type: 'time',
        time: {
          // Luxon format string
          tooltipFormat: 'DD T'
        },
        title: {
          display: true,
          text: 'Date'
        }
      },
      y: {
        title: {
          display: true,
          text: 'value'
        }
      }
    },
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Implementing Chart.js Subtitle Configuration in JavaScript
DESCRIPTION: Demonstrates how to create a Chart.js chart with a custom subtitle. The example shows the basic configuration needed to display a subtitle using the plugins.subtitle namespace.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        plugins: {
            subtitle: {
                display: true,
                text: 'Custom Chart Subtitle'
            }
        }
    }
});

----------------------------------------

TITLE: Configuring and Initializing Chart.js Scatter Multi Axis Chart
DESCRIPTION: This snippet sets up the data, configuration, and actions for a Chart.js scatter chart with multiple y-axes. It includes data generation, chart options, and interactive handlers for manipulating the chart.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, rmin: 1, rmax: 1, min: -100, max: 100};

const data = {
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.bubbles(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      yAxisID: 'y',
    },
    {
      label: 'Dataset 2',
      data: Utils.bubbles(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.orange,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),
      yAxisID: 'y2',
    }
  ]
};
// </block:setup>

// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.bubbles({count: DATA_COUNT, rmin: 1, rmax: 1, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const chartData = chart.data;
      const dsColor = Utils.namedColor(chartData.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (chartData.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        data: Utils.bubbles({count: DATA_COUNT, rmin: 1, rmax: 1, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const chartData = chart.data;
      if (chartData.datasets.length > 0) {

        for (let index = 0; index < chartData.datasets.length; ++index) {
          chartData.datasets[index].data.push(Utils.bubbles({count: 1, rmin: 1, rmax: 1, min: -100, max: 100})[0]);
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
// </block:actions>

// <block:config:0>
const config = {
  type: 'scatter',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Scatter Multi Axis Chart'
      }
    },
    scales: {
      y: {
        type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
        position: 'left',
        ticks: {
          color: Utils.CHART_COLORS.red
        }
      },
      y2: {
        type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
        position: 'right',
        reverse: true,
        ticks: {
          color: Utils.CHART_COLORS.blue
        },
        grid: {
          drawOnChartArea: false // only want the grid lines for one axis to show up
        }
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Registering the Colors Plugin in Chart.js
DESCRIPTION: This snippet shows how to import and register the Colors plugin in Chart.js, which provides a default color palette for charts.

LANGUAGE: javascript
CODE:
import { Colors } from 'chart.js';

Chart.register(Colors);

----------------------------------------

TITLE: Configuring and Rendering Multi-Axis Line Chart with Chart.js
DESCRIPTION: This code snippet sets up a multi-axis line chart using Chart.js. It defines the chart data, configuration, and a randomize action. The chart displays two datasets on separate Y-axes, with customized colors and axis positions.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      yAxisID: 'y',
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      yAxisID: 'y1',
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    interaction: {
      mode: 'index',
      intersect: false,
    },
    stacked: false,
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Line Chart - Multi Axis'
      }
    },
    scales: {
      y: {
        type: 'linear',
        display: true,
        position: 'left',
      },
      y1: {
        type: 'linear',
        display: true,
        position: 'right',

        // grid line settings
        grid: {
          drawOnChartArea: false, // only want the grid lines for one axis to show up
        },
      },
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Legend Item Interface Implementation in JavaScript
DESCRIPTION: Defines the interface for legend items that are passed to the onClick function. Includes properties for display text, styling, and dataset references.

LANGUAGE: javascript
CODE:
{
    // Label that will be displayed
    text: string,

    // Border radius of the legend item.
    // Introduced in 3.1.0
    borderRadius?: number | BorderRadius,

    // Index of the associated dataset
    datasetIndex: number,

    // Fill style of the legend box
    fillStyle: Color,

    // Text color
    fontColor: Color,

    // If true, this item represents a hidden dataset. Label will be rendered with a strike-through effect
    hidden: boolean,

    // For box border. See https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap
    lineCap: string,

    // For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash
    lineDash: number[],

    // For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset
    lineDashOffset: number,

    // For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin
    lineJoin: string,

    // Width of box border
    lineWidth: number,

    // Stroke style of the legend box
    strokeStyle: Color,

    // Point style of the legend box (only used if usePointStyle is true)
    pointStyle: string | Image | HTMLCanvasElement,

    // Rotation of the point in degrees (only used if usePointStyle is true)
    rotation: number
}

----------------------------------------

TITLE: Defining Inline Plugins in Chart.js
DESCRIPTION: Shows how to define a plugin directly in the chart's configuration. This approach is useful for chart-specific customizations but not ideal for applying to multiple charts.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
    plugins: [{
        beforeInit: function(chart, args, options) {
            //...
        }
    }]
});

----------------------------------------

TITLE: Configuring Chart.js Radar Chart with Interactive Actions
DESCRIPTION: Complete setup of a radar chart including action handlers for data manipulation, initial data setup, and chart configuration. The code defines actions for randomizing data, adding/removing datasets and data points, and includes styling with colors and transparency.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        data: Utils.numbers({count: data.labels.length, min: 0, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(0, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'radar',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Radar Chart'
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Creating Custom Tick Formats with Dollar Sign in Chart.js
DESCRIPTION: This snippet shows how to override the ticks.callback method to add a dollar sign to Y-axis labels in a Chart.js line chart. It demonstrates customizing tick formats for better data representation.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        scales: {
            y: {
                ticks: {
                    // Include a dollar sign in the ticks
                    callback: function(value, index, ticks) {
                        return '$' + value;
                    }
                }
            }
        }
    }
});

----------------------------------------

TITLE: Creating an Accessible Canvas with ARIA Attributes in HTML
DESCRIPTION: This snippet demonstrates how to create an accessible canvas element by setting the 'role' attribute to 'img' and providing an 'aria-label' for screen readers.

LANGUAGE: html
CODE:
<canvas id="goodCanvas1" width="400" height="100" aria-label="Hello ARIA World" role="img"></canvas>

----------------------------------------

TITLE: Enabling Custom Chart Title in Chart.js
DESCRIPTION: This snippet demonstrates how to enable and set a custom title for a Chart.js chart. It shows the basic configuration of the title plugin within the chart options.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        plugins: {
            title: {
                display: true,
                text: 'Custom Chart Title'
            }
        }
    }
});

----------------------------------------

TITLE: Configuring Point Labels in Chart.js Radar Chart
DESCRIPTION: This snippet illustrates how to customize the point labels of a radial axis in a Chart.js radar chart. It sets the color of the point labels to red.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First dataset',
    backgroundColor: 'rgba(54, 162, 235, 0.5)',
    borderColor: 'rgb(54, 162, 235)',
    borderWidth: 1,
    data: [10, 20, 30, 40, 50, 0, 5],
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'radar',
  data,
  options: {
    scales: {
      r: {
        pointLabels: {
          color: 'red'
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Example of an Inaccessible Canvas Element in HTML
DESCRIPTION: This snippet illustrates an inaccessible canvas element that lacks both an accessible name and role, making it difficult for screen readers to interpret.

LANGUAGE: html
CODE:
<canvas id="badCanvas1" width="400" height="100"></canvas>

----------------------------------------

TITLE: ChartJS Axis Ticks Configuration Options
DESCRIPTION: Configuration options for axis ticks in ChartJS, including visual properties like colors, fonts, padding, and backdrop settings. These options apply to all axis types and control how tick labels are displayed on the chart.

LANGUAGE: markdown
CODE:
| Name | Type | Scriptable | Default | Description
| ---- | ---- | :-------------------------------: | ------- | -----------
| `backdropColor` | [`Color`](../../general/colors.md) | Yes | `'rgba(255, 255, 255, 0.75)'` | Color of label backdrops.
| `backdropPadding` | [`Padding`](../../general/padding.md) | | `2` | Padding of label backdrop.
| `callback` | `function` | | | Returns the string representation of the tick value as it should be displayed on the chart. See [callback](/axes/labelling.md#creating-custom-tick-formats).
| `display` | `boolean` | | `true` | If true, show tick labels.
| `color` | [`Color`](/general/colors.md) | Yes | `Chart.defaults.color` | Color of ticks.
| `font` | `Font` | Yes | `Chart.defaults.font` | See [Fonts](/general/fonts.md)
| `major` | `object` | | `{}` | [Major ticks configuration](/axes/styling.md#major-tick-configuration).
| `padding` | `number` | | `3` | Sets the offset of the tick labels from the axis
| `showLabelBackdrop` | `boolean` | Yes | `true` for radial scale, `false` otherwise | If true, draw a background behind the tick labels.
| `textStrokeColor` | [`Color`](/general/colors.md) | Yes | `` | The color of the stroke around the text.
| `textStrokeWidth` | `number` | Yes | `0` | Stroke width around the text.
| `z` | `number` | | `0` | z-index of tick layer. Useful when ticks are drawn on chart area. Values <= 0 are drawn under datasets, > 0 on top.

----------------------------------------

TITLE: Basic Polar Area Chart Configuration in Chart.js
DESCRIPTION: Demonstrates the basic setup of a polar area chart with custom labels and colors. The example shows how to configure data structure with labels, datasets, and styling options.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const data = {
  labels: [
    'Red',
    'Green',
    'Yellow',
    'Grey',
    'Blue'
  ],
  datasets: [{
    label: 'My First Dataset',
    data: [11, 16, 7, 3, 14],
    backgroundColor: [
      'rgb(255, 99, 132)',
      'rgb(75, 192, 192)',
      'rgb(255, 205, 86)',
      'rgb(201, 203, 207)',
      'rgb(54, 162, 235)'
    ]
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'polarArea',
  data: data,
  options: {}
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Configuring Chart.js with External Tooltip
DESCRIPTION: This snippet sets up the data and configuration for a Chart.js line chart with an external HTML tooltip. It includes dataset definitions and chart options.

LANGUAGE: javascript
CODE:
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100, decimals: 0};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    },
  ]
};

const config = {
  type: 'line',
  data: data,
  options: {
    interaction: {
      mode: 'index',
      intersect: false,
    },
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Line Chart - External Tooltips'
      },
      tooltip: {
        enabled: false,
        position: 'nearest',
        external: externalTooltipHandler
      }
    }
  }
};

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Major Tick Configuration Example in Chart.js
DESCRIPTION: This snippet shows the structure of the major tick configuration object in Chart.js. It includes the 'enabled' property which determines whether major ticks are generated.

LANGUAGE: javascript
CODE:
{
  enabled: false
}

----------------------------------------

TITLE: Web Worker Implementation for Chart.js
DESCRIPTION: Worker-side implementation for Chart.js offscreen rendering, handling canvas and configuration setup within the worker thread.

LANGUAGE: javascript
CODE:
onmessage = function(event) {
    const {canvas, config} = event.data;
    const chart = new Chart(canvas, config);

    // Resizing the chart must be done manually, since OffscreenCanvas does not include event listeners.
    canvas.width = 100;
    canvas.height = 100;
    chart.resize();
};

----------------------------------------

TITLE: Configuring ChartJS Cartesian Axis Ticks
DESCRIPTION: Configuration options available under options.scales[scaleId].ticks namespace for controlling tick behavior in ChartJS cartesian axes. These settings affect how ticks are displayed, aligned, and automatically adjusted based on available space.

LANGUAGE: javascript
CODE:
{
  scales: {
    xAxis: {
      ticks: {
        align: 'center',
        crossAlign: 'near',
        sampleSize: 10,
        autoSkip: true,
        autoSkipPadding: 3,
        includeBounds: true,
        labelOffset: 0,
        maxRotation: 50,
        minRotation: 0,
        mirror: false,
        padding: 0,
        maxTicksLimit: 11
      }
    }
  }
}

----------------------------------------

TITLE: Modifying Default Tick Format in Chart.js
DESCRIPTION: This snippet demonstrates how to call the default numeric formatter and then modify its output to add a dollar sign. It's useful when you want to maintain the default formatting while adding custom elements.

LANGUAGE: javascript
CODE:
// call the default formatter, forwarding `this`
return '$' + Chart.Ticks.formatters.numeric.apply(this, [value, index, ticks]);

----------------------------------------

TITLE: Configuring Chart.js Stepped Line Chart Options in JavaScript
DESCRIPTION: This snippet sets up the configuration object for a Chart.js stepped line chart. It specifies the chart type, data, responsiveness, interaction settings, and plugins for displaying a title that updates based on the current stepping mode.

LANGUAGE: javascript
CODE:
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    interaction: {
      intersect: false,
      axis: 'x'
    },
    plugins: {
      title: {
        display: true,
        text: (ctx) => 'Step ' + ctx.chart.data.datasets[0].stepped + ' Interpolation',
      }
    }
  }
};

----------------------------------------

TITLE: Optional Controller Methods
DESCRIPTION: Optional methods that can be implemented by derived dataset controllers for custom functionality.

LANGUAGE: javascript
CODE:
{
    // Draw the representation of the dataset. The base implementation works in most cases, and an example of a derived version
    // can be found in the line controller
    draw: function() {},

    // Initializes the controller
    initialize: function() {},

    // Ensures that the dataset represented by this controller is linked to a scale. Overridden to helpers.noop in the polar area and doughnut controllers as these
    // chart types using a single scale
    linkScales: function() {},

    // Parse the data into the controller meta data. The default implementation will work for cartesian parsing, but an example of an overridden
    // version can be found in the doughnut controller
    parse: function(start, count) {},
}

----------------------------------------

TITLE: Configuring Point Style Tooltips in Chart.js
DESCRIPTION: Creates a line chart with three datasets using different point styles (triangles, circles, and stars). Includes configuration for tooltip point style display and an action handler to toggle the tooltip style. Uses Chart.js utilities for data generation and color management.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Toggle Tooltip Point Style',
    handler(chart) {
      chart.options.plugins.tooltip.usePointStyle = !chart.options.plugins.tooltip.usePointStyle;
      chart.update();
    }
  },
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Triangles',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      pointStyle: 'triangle',
      pointRadius: 6,
    },
    {
      label: 'Circles',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      pointStyle: 'circle',
      pointRadius: 6,
    },
    {
      label: 'Stars',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.green,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green, 0.5),
      pointStyle: 'star',
      pointRadius: 6,
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    interaction: {
      mode: 'index',
    },
    plugins: {
      title: {
        display: true,
        text: (ctx) => 'Tooltip point style: ' + ctx.chart.options.plugins.tooltip.usePointStyle,
      },
      tooltip: {
        usePointStyle: true,
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Configuring Locale Option in Chart.js
DESCRIPTION: This snippet shows the configuration option for setting the locale in Chart.js. It specifies the option name, type, default value, and description for the 'locale' setting.

LANGUAGE: markdown
CODE:
| Name | Type | Default | Description
| ---- | ---- | ------- | -----------
| `locale` | `string` | `undefined` | a string with a BCP 47 language tag, leveraging on [INTL NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat).

----------------------------------------

TITLE: Configuring Stepped Line Chart Actions in JavaScript
DESCRIPTION: This snippet defines actions to toggle different stepping modes for a Chart.js line chart. It includes options for no stepping, full stepping, and stepping before, after, or in the middle of data points.

LANGUAGE: javascript
CODE:
const actions = [
  {
    name: 'Step: false (default)',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.stepped = false;
      });
      chart.update();
    }
  },
  {
    name: 'Step: true',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.stepped = true;
      });
      chart.update();
    }
  },
  {
    name: 'Step: before',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.stepped = 'before';
      });
      chart.update();
    }
  },
  {
    name: 'Step: after',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.stepped = 'after';
      });
      chart.update();
    }
  },
  {
    name: 'Step: middle',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.stepped = 'middle';
      });
      chart.update();
    }
  }
];

----------------------------------------

TITLE: Configuring ChartJS Tick Options in JavaScript
DESCRIPTION: Implementation of a line chart with custom tick configurations. Shows how to create a chart with two datasets, custom axis labels, and configurable tick alignment. Includes action handlers for dynamic tick alignment changes and custom tick callback function for label filtering.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Alignment: start',
    handler(chart) {
      chart.options.scales.x.ticks.align = 'start';
      chart.update();
    }
  },
  {
    name: 'Alignment: center (default)',
    handler(chart) {
      chart.options.scales.x.ticks.align = 'center';
      chart.update();
    }
  },
  {
    name: 'Alignment: end',
    handler(chart) {
      chart.options.scales.x.ticks.align = 'end';
      chart.update();
    }
  },
];
// </block:actions>


// <block:setup:1>
const DATA_COUNT = 12;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};
const data = {
  labels: [['June', '2015'], 'July', 'August', 'September', 'October', 'November', 'December', ['January', '2016'], 'February', 'March', 'April', 'May'],
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Chart with Tick Configuration'
      }
    },
    scales: {
      x: {
        ticks: {
          // For a category axis, the val is the index so the lookup via getLabelForValue is needed
          callback: function(val, index) {
            // Hide every 2nd tick label
            return index % 2 === 0 ? this.getLabelForValue(val) : '';
          },
          color: 'red',
        }
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Configuring Angle Lines in Chart.js Radar Chart
DESCRIPTION: This snippet demonstrates how to customize the angle lines of a radial axis in a Chart.js radar chart. It sets the color of the angle lines to red.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First dataset',
    backgroundColor: 'rgba(54, 162, 235, 0.5)',
    borderColor: 'rgb(54, 162, 235)',
    borderWidth: 1,
    data: [10, 20, 30, 40, 50, 0, 5],
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'radar',
  data,
  options: {
    scales: {
      r: {
        angleLines: {
          color: 'red'
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Setting Uniform Padding in Chart.js
DESCRIPTION: This snippet demonstrates how to set a uniform 20px padding on all sides of a Chart.js chart using a single number in the options.

LANGUAGE: javascript
CODE:
let chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        layout: {
            padding: 20
        }
    }
});

----------------------------------------

TITLE: Setting Custom Padding for Each Side in Chart.js
DESCRIPTION: This example shows how to set custom padding for individual sides of a Chart.js chart using an object with top, left, bottom, and right properties. In this case, 50px padding is added to the left side.

LANGUAGE: javascript
CODE:
let chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        layout: {
            padding: {
                left: 50
            }
        }
    }
});

----------------------------------------

TITLE: Configuring Chart.js Polar Area Chart Options
DESCRIPTION: Defines the chart configuration including type, data, and styling options. Specifies centered point labels with custom font size and includes responsive behavior settings.

LANGUAGE: javascript
CODE:
const config = {
  type: 'polarArea',
  data: data,
  options: {
    responsive: true,
    scales: {
      r: {
        pointLabels: {
          display: true,
          centerPointLabels: true,
          font: {
            size: 18
          }
        }
      }
    },
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Polar Area Chart With Centered Point Labels'
      }
    }
  },
};

----------------------------------------

TITLE: Defining Chart.js Axis Configuration Options in Markdown
DESCRIPTION: This snippet defines a table of common configuration options for all axes in Chart.js. It includes option names, types, default values, and descriptions for various axis properties such as type, display, styling, and range settings.

LANGUAGE: markdown
CODE:
| Name | Type | Default | Description
| ---- | ---- | ------- | -----------
| `type` | `string` | | Type of scale being employed. Custom scales can be created and registered with a string key. This allows changing the type of an axis for a chart.
| `alignToPixels` | `boolean` | `false` | Align pixel values to device pixels.
| `backgroundColor` | [`Color`](/general/colors.md) | | Background color of the scale area.
| `border` | `object` | | Border configuration. [more...](/axes/styling.md#border-configuration)
| `display` | `boolean`\|`string` | `true` | Controls the axis global visibility (visible when `true`, hidden when `false`). When `display: 'auto'`, the axis is visible only if at least one associated dataset is visible.
| `grid` | `object` | | Grid line configuration. [more...](/axes/styling.md#grid-line-configuration)
| `min` | `number` | | User defined minimum number for the scale, overrides minimum value from data. [more...](/axes/index.md#axis-range-settings)
| `max` | `number` | | User defined maximum number for the scale, overrides maximum value from data. [more...](/axes/index.md#axis-range-settings)
| `reverse` | `boolean` | `false` | Reverse the scale.
| `stacked` | `boolean`\|`string` | `false` | Should the data be stacked. [more...](/axes/index.md#stacking)
| `suggestedMax` | `number` | | Adjustment used when calculating the maximum data value. [more...](/axes/index.md#axis-range-settings)
| `suggestedMin` | `number` | | Adjustment used when calculating the minimum data value. [more...](/axes/index.md#axis-range-settings)
| `ticks` | `object` | | Tick configuration. [more...](/axes/index.md#tick-configuration)
| `weight` | `number` | `0` | The weight used to sort the axis. Higher weights are further away from the chart area.

----------------------------------------

TITLE: Configuring Pie Chart with Dynamic Coloring in Chart.js
DESCRIPTION: This snippet sets up a pie chart using Chart.js. It includes functions for data generation, dynamic coloring based on data values, and chart configuration options. The chart supports randomization of data and toggling between pie and doughnut views.

LANGUAGE: javascript
CODE:
// <block:setup:2>
const DATA_COUNT = 5;
Utils.srand(110);

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
  {
    name: 'Toggle Doughnut View',
    handler(chart) {
      if (chart.options.cutout) {
        chart.options.cutout = 0;
      } else {
        chart.options.cutout = '50%';
      }
      chart.update();
    }
  }
];
// </block:setup>

// <block:data:1>
function generateData() {
  return Utils.numbers({
    count: DATA_COUNT,
    min: -100,
    max: 100
  });
}

const data = {
  datasets: [{
    data: generateData()
  }]
};
// </block:data>

// <block:options:0>
function colorize(opaque, hover, ctx) {
  const v = ctx.parsed;
  const c = v < -50 ? '#D60000'
    : v < 0 ? '#F46300'
    : v < 50 ? '#0358B6'
    : '#44DE28';

  const opacity = hover ? 1 - Math.abs(v / 150) - 0.2 : 1 - Math.abs(v / 150);

  return opaque ? c : Utils.transparentize(c, opacity);
}

function hoverColorize(ctx) {
  return colorize(false, true, ctx);
}

const config = {
  type: 'pie',
  data: data,
  options: {
    plugins: {
      legend: false,
      tooltip: false,
    },
    elements: {
      arc: {
        backgroundColor: colorize.bind(null, false, false),
        hoverBackgroundColor: hoverColorize
      }
    }
  }
};
// </block:options>

module.exports = {
  actions,
  config,
};

----------------------------------------

TITLE: Optional Scale Interface Methods in Chart.js
DESCRIPTION: This snippet shows optional methods that can be overwritten in custom Chart.js scales. These methods have default implementations in the Chart.Scale base class but can be customized for specific needs.

LANGUAGE: javascript
CODE:
{
    // Adds labels to objects in the ticks array. The default implementation simply calls this.options.ticks.callback(numericalTick, index, ticks);
    generateTickLabels: function() {},

    // Determine how much the labels will rotate by. The default implementation will only rotate labels if the scale is horizontal.
    calculateLabelRotation: function() {},

    // Fits the scale into the canvas.
    // this.maxWidth and this.maxHeight will tell you the maximum dimensions the scale instance can be. Scales should endeavour to be as efficient as possible with canvas space.
    // this.margins is the amount of space you have on either side of your scale that you may expand in to. This is used already for calculating the best label rotation
    // You must set this.minSize to be the size of your scale. It must be an object containing 2 properties: width and height.
    // You must set this.width to be the width and this.height to be the height of the scale
    fit: function() {},

    // Draws the scale onto the canvas. this.(left|right|top|bottom) will have been populated to tell you the area on the canvas to draw in
    // @param chartArea : an object containing four properties: left, right, top, bottom. This is the rectangle that lines, bars, etc will be drawn in. It may be used, for example, to draw grid lines.
    draw: function(chartArea) {}
}

----------------------------------------

TITLE: Including Chart.js via CDN
DESCRIPTION: Script tag to include Chart.js library from CDN for web projects.

LANGUAGE: html
CODE:
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

----------------------------------------

TITLE: Stacked Bar Chart Configuration - Chart.js
DESCRIPTION: Demonstrates how to configure axes for creating stacked bar charts to show data series composition.

LANGUAGE: javascript
CODE:
const stackedBar = new Chart(ctx, {
    type: 'bar',
    data: data,
    options: {
        scales: {
            x: {
                stacked: true
            },
            y: {
                stacked: true
            }
        }
    }
});

----------------------------------------

TITLE: Handling Click Events on Chart Elements in JavaScript
DESCRIPTION: Demonstrates how to handle click events and get clicked elements using getElementsAtEventForMode().

LANGUAGE: javascript
CODE:
function clickHandler(evt) {
    const points = myChart.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, true);

    if (points.length) {
        const firstPoint = points[0];
        const label = myChart.data.labels[firstPoint.index];
        const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];
    }
}

----------------------------------------

TITLE: Chart.js Fill Propagation Configuration
DESCRIPTION: Demonstrates fill propagation settings when target datasets are hidden, showing how the fill property cascades through datasets.

LANGUAGE: javascript
CODE:
new Chart(ctx, {
    data: {
        datasets: [
            {fill: 'origin'},   // 0: fill to 'origin'
            {fill: '-1'},       // 1: fill to dataset 0
            {fill: 1},          // 2: fill to dataset 1
            {fill: false},      // 3: no fill
            {fill: '-2'}        // 4: fill to dataset 2
        ]
    },
    options: {
        plugins: {
            filler: {
                propagate: true
            }
        }
    }
});

----------------------------------------

TITLE: Configuring the Colors Plugin in Chart.js UMD Version
DESCRIPTION: This example demonstrates how to disable the Colors plugin in the UMD version of Chart.js where it's enabled by default.

LANGUAGE: javascript
CODE:
const options = {
  plugins: {
    colors: {
      enabled: false
    }
  }
};

----------------------------------------

TITLE: Implementing Empty State Plugin for Chart.js Doughnut Charts
DESCRIPTION: Creates a Chart.js plugin that displays a placeholder circle when the doughnut chart contains no data. The plugin allows customization of the empty state circle's color, width, and radius through configuration options. It checks all datasets for data and draws a circular outline if no data is present.

LANGUAGE: javascript
CODE:
// <block:data:2>
const data = {
  labels: [],
  datasets: [
    {
      label: 'Dataset 1',
      data: []
    }
  ]
};
// </block:data>

// <block:plugin:1>
const plugin = {
  id: 'emptyDoughnut',
  afterDraw(chart, args, options) {
    const {datasets} = chart.data;
    const {color, width, radiusDecrease} = options;
    let hasData = false;

    for (let i = 0; i < datasets.length; i += 1) {
      const dataset = datasets[i];
      hasData |= dataset.data.length > 0;
    }

    if (!hasData) {
      const {chartArea: {left, top, right, bottom}, ctx} = chart;
      const centerX = (left + right) / 2;
      const centerY = (top + bottom) / 2;
      const r = Math.min(right - left, bottom - top) / 2;

      ctx.beginPath();
      ctx.lineWidth = width || 2;
      ctx.strokeStyle = color || 'rgba(255, 128, 0, 0.5)';
      ctx.arc(centerX, centerY, (r - radiusDecrease || 0), 0, 2 * Math.PI);
      ctx.stroke();
    }
  }
};
// </block:plugin>

// <block:config:0>
const config = {
  type: 'doughnut',
  data: data,
  options: {
    plugins: {
      emptyDoughnut: {
        color: 'rgba(255, 128, 0, 0.5)',
        width: 2,
        radiusDecrease: 20
      }
    }
  },
  plugins: [plugin]
};
// </block:config>

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.points(NUMBER_CFG);
      });
      chart.update();
    }
  },
];

module.exports = {
  actions,
  config,
};

----------------------------------------

TITLE: Loading Chart.js with RequireJS
DESCRIPTION: This code demonstrates how to load Chart.js using RequireJS, emphasizing the need to use UMD builds for compatibility.

LANGUAGE: javascript
CODE:
require(['path/to/chartjs/dist/chart.umd.js'], function(Chart){
    const myChart = new Chart(ctx, {...});
});

----------------------------------------

TITLE: Using Patternomaly Library for Dataset Fills in Chart.js
DESCRIPTION: This snippet shows how to use the Patternomaly library to generate pattern fills for datasets in Chart.js, which can improve accessibility for viewers with vision deficiencies.

LANGUAGE: javascript
CODE:
const chartData = {
  datasets: [{
    data: [45, 25, 20, 10],
    backgroundColor: [
      pattern.draw('square', '#ff6384'),
      pattern.draw('circle', '#36a2eb'),
      pattern.draw('diamond', '#cc65fe'),
      pattern.draw('triangle', '#ffce56')
    ]
  }],
  labels: ['Red', 'Blue', 'Purple', 'Yellow']
};

----------------------------------------

TITLE: Configuring Chart.js Line Chart with Multiple Interpolation Modes
DESCRIPTION: This snippet sets up a Chart.js line chart with three datasets, each demonstrating a different interpolation mode. It includes data generation, chart configuration, and styling options. The chart displays cubic interpolation (monotone), cubic interpolation, and linear interpolation (default) for comparison.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const DATA_COUNT = 12;
const labels = [];
for (let i = 0; i < DATA_COUNT; ++i) {
  labels.push(i.toString());
}
const datapoints = [0, 20, 20, 60, 60, 120, NaN, 180, 120, 125, 105, 110, 170];
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Cubic interpolation (monotone)',
      data: datapoints,
      borderColor: Utils.CHART_COLORS.red,
      fill: false,
      cubicInterpolationMode: 'monotone',
      tension: 0.4
    }, {
      label: 'Cubic interpolation',
      data: datapoints,
      borderColor: Utils.CHART_COLORS.blue,
      fill: false,
      tension: 0.4
    }, {
      label: 'Linear interpolation (default)',
      data: datapoints,
      borderColor: Utils.CHART_COLORS.green,
      fill: false
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Line Chart - Cubic interpolation mode'
      },
    },
    interaction: {
      intersect: false,
    },
    scales: {
      x: {
        display: true,
        title: {
          display: true
        }
      },
      y: {
        display: true,
        title: {
          display: true,
          text: 'Value'
        },
        suggestedMin: -10,
        suggestedMax: 200
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Border Configuration Example in Chart.js
DESCRIPTION: This snippet illustrates the structure of the border configuration object in Chart.js. It includes properties to control the display, color, width, and other aspects of the border between the axis and the chart area.

LANGUAGE: javascript
CODE:
{
  display: true,
  color: 'Chart.defaults.borderColor',
  width: 1,
  dash: [],
  dashOffset: 0.0,
  z: 0
}

----------------------------------------

TITLE: Configuring Actions for Chart.js Line Chart
DESCRIPTION: Defines interactive actions for manipulating chart data including randomizing values, adding/removing datasets and data points. Each action includes a handler function that modifies the chart's data and triggers an update.

LANGUAGE: javascript
CODE:
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1);
      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });
      chart.update();
    }
  }
];

----------------------------------------

TITLE: Configuring Data Decimation Options in Chart.js
DESCRIPTION: This snippet shows the configuration options available for the data decimation plugin in Chart.js. It includes options for enabling decimation, choosing the algorithm, and setting thresholds.

LANGUAGE: markdown
CODE:
| Name | Type | Default | Description
| ---- | ---- | ------- | -----------
| `enabled` | `boolean` | `false` | Is decimation enabled?
| `algorithm` | `string` | `'min-max'` | Decimation algorithm to use. See the [more...](#decimation-algorithms)
| `samples` | `number` | | If the `'lttb'` algorithm is used, this is the number of samples in the output dataset. Defaults to the canvas width to pick 1 sample per pixel.
| `threshold` | `number` | | If the number of samples in the current axis range is above this value, the decimation will be triggered. Defaults to 4 times the canvas width.<br />The number of point after decimation can be higher than the `threshold` value.

----------------------------------------

TITLE: Configuring Chart.js Chart Options
DESCRIPTION: Defines the chart configuration including chart type, data, and styling options. Enables stacking on the Y-axis and sets up the chart title.

LANGUAGE: javascript
CODE:
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Stacked Line/Bar Chart'
      }
    },
    scales: {
      y: {
        stacked: true
      }
    }
  },
};

----------------------------------------

TITLE: Configuring and Creating a Stacked Bar Chart with Chart.js
DESCRIPTION: This snippet sets up data, defines a randomize action, and configures a stacked bar chart using Chart.js. It includes three datasets, custom color settings, and stacked x and y axes.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.red,
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.blue,
    },
    {
      label: 'Dataset 3',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.green,
    },
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'bar',
  data: data,
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Bar Chart - Stacked'
      },
    },
    responsive: true,
    scales: {
      x: {
        stacked: true,
      },
      y: {
        stacked: true
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Configuring Suggested Min and Max Values for Radial Axis in Chart.js
DESCRIPTION: This snippet demonstrates how to set suggested minimum and maximum values for a radial axis in a Chart.js radar chart. It extends the axis range while maintaining auto-fit behavior.

LANGUAGE: javascript
CODE:
let chart = new Chart(ctx, {
    type: 'radar',
    data: {
        datasets: [{
            label: 'First dataset',
            data: [0, 20, 40, 50]
        }],
        labels: ['January', 'February', 'March', 'April']
    },
    options: {
        scales: {
            r: {
                suggestedMin: 50,
                suggestedMax: 100
            }
        }
    }
});

----------------------------------------

TITLE: Configuring Chart.js for Progressive Line Chart in JavaScript
DESCRIPTION: This snippet sets up the configuration object for a Chart.js progressive line chart. It defines two datasets with different colors, sets up the animation, and configures various chart options such as interaction and scales.

LANGUAGE: javascript
CODE:
const config = {
  type: 'line',
  data: {
    datasets: [{
      borderColor: Utils.CHART_COLORS.red,
      borderWidth: 1,
      radius: 0,
      data: data,
    },
    {
      borderColor: Utils.CHART_COLORS.blue,
      borderWidth: 1,
      radius: 0,
      data: data2,
    }]
  },
  options: {
    animation,
    interaction: {
      intersect: false
    },
    plugins: {
      legend: false
    },
    scales: {
      x: {
        type: 'linear'
      }
    }
  }
};

module.exports = {
  config
};

----------------------------------------

TITLE: Configuring Axis Border in Chart.js
DESCRIPTION: This snippet demonstrates how to configure the border of a Cartesian axis in Chart.js. It sets the border color of the x-axis to red.

LANGUAGE: javascript
CODE:
const config = {
  type: 'line',
  data,
  options: {
    scales: {
      x: {
        border: {
          color: 'red'
        }
      }
    }
  }
};

----------------------------------------

TITLE: Configuring and Initializing a Chart.js Combo Bar/Line Chart in JavaScript
DESCRIPTION: This snippet sets up a Chart.js configuration for a combined bar and line chart. It includes data generation, chart options, and interactive actions like randomizing data, adding/removing datasets, and adding/removing data points.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        borderWidth: 1,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      order: 1
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      type: 'line',
      order: 0
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'bar',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Combined Line/Bar Chart'
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Exporting Chart.js Scatter Chart Configuration in JavaScript
DESCRIPTION: This snippet exports the actions and configuration objects for the Chart.js scatter chart. These exported objects can be used to initialize and interact with the chart in other parts of the application.

LANGUAGE: javascript
CODE:
module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Configuring Chart.js with Custom Property Objects
DESCRIPTION: Demonstrates how to use custom property parsing for complex data objects in bar and doughnut charts.

LANGUAGE: javascript
CODE:
const cfg = {
  type: 'bar',
  data: {
    datasets: [{
      data: [{id: 'Sales', nested: {value: 1500}}, {id: 'Purchases', nested: {value: 500}}]
    }]
  },
  options: {
    parsing: {
      xAxisKey: 'id',
      yAxisKey: 'nested.value'
    }
  }
}

LANGUAGE: javascript
CODE:
const cfg = {
  type: 'doughnut',
  data: {
    datasets: [{
      data: [{id: 'Sales', nested: {value: 1500}}, {id: 'Purchases', nested: {value: 500}}]
    }]
  },
  options: {
    parsing: {
      key: 'nested.value'
    }
  }
}

----------------------------------------

TITLE: Configuring Line Segment Styling in ChartJS
DESCRIPTION: Creates a line chart with custom segment styling where gaps in data are rendered as dashed lines and downward trending segments are colored differently. Uses helper functions to determine segment styles based on data characteristics.

LANGUAGE: javascript
CODE:
const skipped = (ctx, value) => ctx.p0.skip || ctx.p1.skip ? value : undefined;
const down = (ctx, value) => ctx.p0.parsed.y > ctx.p1.parsed.y ? value : undefined;

const genericOptions = {
  fill: false,
  interaction: {
    intersect: false
  },
  radius: 0,
};

const config = {
  type: 'line',
  data: {
    labels: Utils.months({count: 7}),
    datasets: [{
      label: 'My First Dataset',
      data: [65, 59, NaN, 48, 56, 57, 40],
      borderColor: 'rgb(75, 192, 192)',
      segment: {
        borderColor: ctx => skipped(ctx, 'rgb(0,0,0,0.2)') || down(ctx, 'rgb(192,75,75)'),
        borderDash: ctx => skipped(ctx, [6, 6]),
      },
      spanGaps: true
    }]
  },
  options: genericOptions
};

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Implementing Looping Tension Animation in Chart.js
DESCRIPTION: Creates a line chart with a looping tension animation effect. The tension animation cycles between values of 1 and 0 over a 1000ms duration using linear easing.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const data = {
  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
  datasets: [{
    label: 'Looping tension',
    data: [65, 59, 80, 81, 26, 55, 40],
    fill: false,
    borderColor: 'rgb(75, 192, 192)',
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    animations: {
      tension: {
        duration: 1000,
        easing: 'linear',
        from: 1,
        to: 0,
        loop: true
      }
    },
    scales: {
      y: {
        min: 0,
        max: 100
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Extending Bubble Chart Example
DESCRIPTION: Complete example of extending the BubbleController to create a custom chart type with additional drawing functionality.

LANGUAGE: javascript
CODE:
import {BubbleController} from 'chart.js';
class Custom extends BubbleController {
    draw() {
        // Call bubble controller method to draw all the points
        super.draw(arguments);

        // Now we can do some custom drawing for this dataset. Here we'll draw a red box around the first point in each dataset
        const meta = this.getMeta();
        const pt0 = meta.data[0];

        const {x, y} = pt0.getProps(['x', 'y']);
        const {radius} = pt0.options;

        const ctx = this.chart.ctx;
        ctx.save();
        ctx.strokeStyle = 'red';
        ctx.lineWidth = 1;
        ctx.strokeRect(x - radius, y - radius, 2 * radius, 2 * radius);
        ctx.restore();
    }
};
Custom.id = 'derivedBubble';
Custom.defaults = BubbleController.defaults;

// Stores the controller so that the chart initialization routine can look it up
Chart.register(Custom);

// Now we can create and use our new chart type
new Chart(ctx, {
    type: 'derivedBubble',
    data: data,
    options: options
});

----------------------------------------

TITLE: Chart.js Utility Functions
DESCRIPTION: Collection of helper functions used in Chart.js sample pages for generating charts. These utilities are meant for demonstration purposes and should not be used in production.

LANGUAGE: javascript
CODE:
@/scripts/utils.js

----------------------------------------

TITLE: Configuring Bar Chart with Border Radius in Chart.js
DESCRIPTION: Creates a responsive bar chart with two datasets demonstrating different border radius settings. Includes action handlers for data randomization and configurations for chart appearance including colors, borders, and legends.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Fully Rounded',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      borderWidth: 2,
      borderRadius: Number.MAX_VALUE,
      borderSkipped: false,
    },
    {
      label: 'Small Radius',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      borderWidth: 2,
      borderRadius: 5,
      borderSkipped: false,
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'bar',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Bar Chart'
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Configuring Line Chart with Dynamic Styling in Chart.js
DESCRIPTION: This snippet sets up a line chart with randomized data, custom styling functions, and interactive features. It demonstrates advanced Chart.js concepts like scriptable options for dynamic chart element styling based on data values.

LANGUAGE: javascript
CODE:
// <block:setup:2>
const DATA_COUNT = 12;
Utils.srand(110);

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
];
// </block:setup>

// <block:data:1>
function generateData() {
  return Utils.numbers({
    count: DATA_COUNT,
    min: 0,
    max: 100
  });
}

const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [{
    data: generateData()
  }]
};
// </block:data>

// <block:options:0>
function getLineColor(ctx) {
  return Utils.color(ctx.datasetIndex);
}

function alternatePointStyles(ctx) {
  const index = ctx.dataIndex;
  return index % 2 === 0 ? 'circle' : 'rect';
}

function makeHalfAsOpaque(ctx) {
  return Utils.transparentize(getLineColor(ctx));
}

function adjustRadiusBasedOnData(ctx) {
  const v = ctx.parsed.y;
  return v < 10 ? 5
    : v < 25 ? 7
    : v < 50 ? 9
    : v < 75 ? 11
    : 15;
}

const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      legend: false,
      tooltip: true,
    },
    elements: {
      line: {
        fill: false,
        backgroundColor: getLineColor,
        borderColor: getLineColor,
      },
      point: {
        backgroundColor: getLineColor,
        hoverBackgroundColor: makeHalfAsOpaque,
        radius: adjustRadiusBasedOnData,
        pointStyle: alternatePointStyles,
        hoverRadius: 15,
      }
    }
  }
};
// </block:options>

module.exports = {
  actions,
  config,
};

----------------------------------------

TITLE: Updating Chart.js Scales Configuration
DESCRIPTION: Shows how to update chart scales configuration, including changing scale types and IDs. Demonstrates handling of scale references after updates.

LANGUAGE: javascript
CODE:
function updateScales(chart) {
    let xScale = chart.scales.x;
    let yScale = chart.scales.y;
    chart.options.scales = {
        newId: {
            display: true
        },
        y: {
            display: true,
            type: 'logarithmic'
        }
    };
    chart.update();
    // need to update the reference
    xScale = chart.scales.newId;
    yScale = chart.scales.y;
}

----------------------------------------

TITLE: Configuring and Initializing Chart.js Bubble Chart
DESCRIPTION: Complete setup for a Chart.js bubble chart including data initialization, action handlers for chart manipulation, and configuration options. Features include dataset randomization, adding/removing datasets and data points, with responsive layout and customizable styling.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, rmin: 5, rmax: 15, min: 0, max: 100};

const data = {
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.bubbles(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.bubbles(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.orange,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),
    }
  ]
};
// </block:setup>

// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.bubbles({count: DATA_COUNT, rmin: 5, rmax: 15, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const chartData = chart.data;
      const dsColor = Utils.namedColor(chartData.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (chartData.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        data: Utils.bubbles({count: DATA_COUNT, rmin: 5, rmax: 15, min: 0, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const chartData = chart.data;
      if (chartData.datasets.length > 0) {

        for (let index = 0; index < chartData.datasets.length; ++index) {
          chartData.datasets[index].data.push(Utils.bubbles({count: 1, rmin: 5, rmax: 15, min: 0, max: 100})[0]);
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
// </block:actions>

// <block:config:0>
const config = {
  type: 'bubble',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Bubble Chart'
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Basic Chart Print Resize Handler
DESCRIPTION: Implements a basic print handler that resizes all Chart.js instances before printing using the onbeforeprint event.

LANGUAGE: javascript
CODE:
function beforePrintHandler () {
    for (let id in Chart.instances) {
        Chart.instances[id].resize();
    }
}

----------------------------------------

TITLE: Setting Up Chart.js Polar Area Data
DESCRIPTION: Initializes the chart data structure with labels and a dataset. Includes configuration for data points count and color settings with transparency.

LANGUAGE: javascript
CODE:
const DATA_COUNT = 5;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = ['Red', 'Orange', 'Yellow', 'Green', 'Blue'];
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: [
        Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
        Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),
        Utils.transparentize(Utils.CHART_COLORS.yellow, 0.5),
        Utils.transparentize(Utils.CHART_COLORS.green, 0.5),
        Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      ]
    }
  ]
};

----------------------------------------

TITLE: Initializing Chart.js Scatter Chart Data and Configuration in JavaScript
DESCRIPTION: This snippet sets up the initial data and configuration for a Chart.js scatter chart. It creates two datasets with random bubble data, defines chart options, and specifies the chart type as 'scatter'. The configuration includes responsive design and customized plugins for legend and title display.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, rmin: 1, rmax: 1, min: 0, max: 100};

const data = {
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.bubbles(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.bubbles(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.orange,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'scatter',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Scatter Chart'
      }
    }
  },
};
// </block:config>

----------------------------------------

TITLE: Implementing Chart Actions in Chart.js
DESCRIPTION: This snippet defines actions for the chart, including randomizing data, toggling propagation, and smoothing lines. These actions can be triggered to modify the chart's appearance and behavior.

LANGUAGE: javascript
CODE:
// <block:actions:3>
let smooth = false;
let propagate = false;

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
  {
    name: 'Propagate',
    handler(chart) {
      propagate = !propagate;
      chart.options.plugins.filler.propagate = propagate;
      chart.update();
    }
  },
  {
    name: 'Smooth',
    handler(chart) {
      smooth = !smooth;
      chart.options.elements.line.tension = smooth ? 0.4 : 0;
      chart.update();
    }
  }
];
// </block:actions>

----------------------------------------

TITLE: Setting Global Chart.js Interaction Mode
DESCRIPTION: Shows how to set global defaults for all charts and how to override them for specific chart instances. Demonstrates the interaction mode configuration.

LANGUAGE: javascript
CODE:
Chart.defaults.interaction.mode = 'nearest';

// Interaction mode is set to nearest because it was not overridden here
const chartInteractionModeNearest = new Chart(ctx, {
    type: 'line',
    data: data
});

// This chart would have the interaction mode that was passed in
const chartDifferentInteractionMode = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        interaction: {
            // Overrides the global setting
            mode: 'index'
        }
    }
});

----------------------------------------

TITLE: Implementing Quadrants Plugin for Chart.js Scatter Plot
DESCRIPTION: A complete implementation of a Chart.js plugin that draws colored quadrants in a scatter plot. The code includes data generation with random points, a custom quadrants plugin that draws colored rectangles in each quadrant, and chart configuration with plugin options. The implementation allows for dynamic data updates through a randomize action.

LANGUAGE: javascript
CODE:
// <block:data:2>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.points(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.points(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
// </block:data>

// <block:plugin:1>
const quadrants = {
  id: 'quadrants',
  beforeDraw(chart, args, options) {
    const {ctx, chartArea: {left, top, right, bottom}, scales: {x, y}} = chart;
    const midX = x.getPixelForValue(0);
    const midY = y.getPixelForValue(0);
    ctx.save();
    ctx.fillStyle = options.topLeft;
    ctx.fillRect(left, top, midX - left, midY - top);
    ctx.fillStyle = options.topRight;
    ctx.fillRect(midX, top, right - midX, midY - top);
    ctx.fillStyle = options.bottomRight;
    ctx.fillRect(midX, midY, right - midX, bottom - midY);
    ctx.fillStyle = options.bottomLeft;
    ctx.fillRect(left, midY, midX - left, bottom - midY);
    ctx.restore();
  }
};
// </block:plugin>

// <block:config:0>
const config = {
  type: 'scatter',
  data: data,
  options: {
    plugins: {
      quadrants: {
        topLeft: Utils.CHART_COLORS.red,
        topRight: Utils.CHART_COLORS.blue,
        bottomRight: Utils.CHART_COLORS.green,
        bottomLeft: Utils.CHART_COLORS.yellow,
      }
    }
  },
  plugins: [quadrants]
};
// </block:config>

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.points(NUMBER_CFG);
      });
      chart.update();
    }
  },
];

module.exports = {
  actions,
  config,
};

----------------------------------------

TITLE: ChartJS Cartesian Axes Configuration Table
DESCRIPTION: A markdown table defining the common configuration options for cartesian axes, including property names, types, default values, and descriptions. Properties include bounds, clip, position, stack, stackWeight, axis, offset, and title configurations.

LANGUAGE: markdown
CODE:
| Name | Type | Default | Description
| ---- | ---- | ------- | -----------
| `bounds` | `string` | `'ticks'` | Determines the scale bounds. [more...](./index.md#scale-bounds)
| `clip` | `boolean` | `true` | If true, clip the dataset drawing against the size of the scale instead of chart area
| `position` | `string` \| `object` | | Position of the axis. [more...](./index.md#axis-position)
| `stack` | `string` | | Stack group. Axes at the same `position` with same `stack` are stacked.
| `stackWeight` | `number` | 1 | Weight of the scale in stack group. Used to determine the amount of allocated space for the scale within the group.
| `axis` | `string` | | Which type of axis this is. Possible values are: `'x'`, `'y'`. If not set, this is inferred from the first character of the ID which should be `'x'` or `'y'`.
| `offset` | `boolean` | `false` | If true, extra space is added to the both edges and the axis is scaled to fit into the chart area. This is set to `true` for a bar chart by default.
| `title` | `object` | | Scale title configuration. [more...](../labelling.md#scale-title-configuration)

----------------------------------------

TITLE: Generating Random Data for Progressive Line Chart in JavaScript
DESCRIPTION: This snippet generates two arrays of random data points for use in a progressive line chart. Each data point consists of an x-coordinate and a y-coordinate, with the y-value fluctuating based on the previous value.

LANGUAGE: javascript
CODE:
const data = [];
const data2 = [];
let prev = 100;
let prev2 = 80;
for (let i = 0; i < 1000; i++) {
  prev += 5 - Math.random() * 10;
  data.push({x: i, y: prev});
  prev2 += 5 - Math.random() * 10;
  data2.push({x: i, y: prev2});
}

----------------------------------------

TITLE: Implementing Floating Bar Chart with Chart.js in JavaScript
DESCRIPTION: This code snippet sets up a floating bar chart using Chart.js. It defines actions for randomizing data, initializes chart data with two datasets, and configures chart options. The chart uses floating bars where each bar's start and end points are defined by an array of two numbers.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = chart.data.labels.map(() => {
          return [Utils.rand(-100, 100), Utils.rand(-100, 100)];
        });
      });
      chart.update();
    }
  },
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: labels.map(() => {
        return [Utils.rand(-100, 100), Utils.rand(-100, 100)];
      }),
      backgroundColor: Utils.CHART_COLORS.red,
    },
    {
      label: 'Dataset 2',
      data: labels.map(() => {
        return [Utils.rand(-100, 100), Utils.rand(-100, 100)];
      }),
      backgroundColor: Utils.CHART_COLORS.blue,
    },
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'bar',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Floating Bar Chart'
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Hiding Datasets or Data Elements in JavaScript
DESCRIPTION: Shows how to hide datasets or specific data elements using the hide() method.

LANGUAGE: javascript
CODE:
chart.hide(1); // hides dataset at index 1 and does 'hide' animation.
chart.hide(0, 2); // hides the data element at index 2 of the first dataset.

----------------------------------------

TITLE: Configuring Chart.js Axis Titles with Custom Styling
DESCRIPTION: Creates a line chart with two datasets and customized axis titles. Demonstrates how to configure title display, text, color, font properties, and padding for both X and Y axes. The configuration shows different font families, sizes, and styles for each axis title.

LANGUAGE: javascript
CODE:
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};

const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    scales: {
      x: {
        display: true,
        title: {
          display: true,
          text: 'Month',
          color: '#911',
          font: {
            family: 'Comic Sans MS',
            size: 20,
            weight: 'bold',
            lineHeight: 1.2,
          },
          padding: {top: 20, left: 0, right: 0, bottom: 0}
        }
      },
      y: {
        display: true,
        title: {
          display: true,
          text: 'Value',
          color: '#191',
          font: {
            family: 'Times',
            size: 20,
            style: 'normal',
            lineHeight: 1.2
          },
          padding: {top: 30, left: 0, right: 0, bottom: 0}
        }
      }
    }
  },
};

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Setting Up Initial Chart Data
DESCRIPTION: Initializes the chart data structure with two datasets, including labels and styling configuration. Uses utility functions to generate random data points within specified ranges.

LANGUAGE: javascript
CODE:
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};

----------------------------------------

TITLE: Defining Scatter Chart Data Structure in JavaScript
DESCRIPTION: This snippet shows the expected data structure for scatter charts in Chart.js. Each data point is represented as an object with 'x' and 'y' properties.

LANGUAGE: javascript
CODE:
data: [{
        x: 10,
        y: 20
    }, {
        x: 15,
        y: 10
    }]

----------------------------------------

TITLE: Configuring Animation for Progressive Line Chart in JavaScript
DESCRIPTION: This snippet defines the animation settings for the progressive line chart. It sets up a total duration and calculates delays between points. The animation is configured separately for x and y coordinates, with custom easing and delay functions.

LANGUAGE: javascript
CODE:
const totalDuration = 10000;
const delayBetweenPoints = totalDuration / data.length;
const previousY = (ctx) => ctx.index === 0 ? ctx.chart.scales.y.getPixelForValue(100) : ctx.chart.getDatasetMeta(ctx.datasetIndex).data[ctx.index - 1].getProps(['y'], true).y;
const animation = {
  x: {
    type: 'number',
    easing: 'linear',
    duration: delayBetweenPoints,
    from: NaN, // the point is initially skipped
    delay(ctx) {
      if (ctx.type !== 'data' || ctx.xStarted) {
        return 0;
      }
      ctx.xStarted = true;
      return ctx.index * delayBetweenPoints;
    }
  },
  y: {
    type: 'number',
    easing: 'linear',
    duration: delayBetweenPoints,
    from: previousY,
    delay(ctx) {
      if (ctx.type !== 'data' || ctx.yStarted) {
        return 0;
      }
      ctx.yStarted = true;
      return ctx.index * delayBetweenPoints;
    }
  }
};

----------------------------------------

TITLE: Configuring Chart.js Line Chart Options
DESCRIPTION: Defines the main chart configuration including chart type, data references, and display options such as responsiveness, legend position, and title settings.

LANGUAGE: javascript
CODE:
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Line Chart'
      }
    }
  },
};

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Configuring Chart.js Line Chart with Linear Scale Step Size
DESCRIPTION: Complete Chart.js configuration showcasing a line chart with customized linear scale and step size of 50 units. Includes dataset management actions like randomization, adding/removing datasets and data points, and scale configuration with min/max bounds.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: dsColor,
        borderColor: dsColor,
        data: Utils.numbers({count: data.labels.length, min: 0, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(0, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.CHART_COLORS.red,
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.CHART_COLORS.blue,
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      tooltip: {
        mode: 'index',
        intersect: false
      },
      title: {
        display: true,
        text: 'Chart.js Line Chart'
      }
    },
    hover: {
      mode: 'index',
      intersect: false
    },
    scales: {
      x: {
        title: {
          display: true,
          text: 'Month'
        }
      },
      y: {
        title: {
          display: true,
          text: 'Value'
        },
        min: 0,
        max: 100,
        ticks: {
          // forces step size to be 50 units
          stepSize: 50
        }
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Configuring Actions for Chart.js Vertical Bar Chart
DESCRIPTION: This snippet defines a set of actions that can be performed on the chart, such as randomizing data, adding/removing datasets, and modifying data points. These actions allow for dynamic interaction with the chart.

LANGUAGE: javascript
CODE:
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        borderWidth: 1,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];

----------------------------------------

TITLE: Creating Stacked Bar Chart Groups with Chart.js
DESCRIPTION: Configures a stacked bar chart with three datasets divided into two stacks. Includes data randomization functionality, responsive layout, and interaction settings. Uses Chart.js utilities for data generation and color management.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.red,
      stack: 'Stack 0',
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.blue,
      stack: 'Stack 0',
    },
    {
      label: 'Dataset 3',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.green,
      stack: 'Stack 1',
    },
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'bar',
  data: data,
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Bar Chart - Stacked'
      },
    },
    responsive: true,
    interaction: {
      intersect: false,
    },
    scales: {
      x: {
        stacked: true,
      },
      y: {
        stacked: true
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Configuring Radial Gradient Polar Area Chart with Chart.js
DESCRIPTION: This snippet sets up the data, configuration, and utilities for creating a polar area chart with radial gradients. It includes functions for generating random data, creating radial gradients, and configuring chart options.

LANGUAGE: javascript
CODE:
// <block:setup:3>
const DATA_COUNT = 5;
Utils.srand(110);

const chartColors = Utils.CHART_COLORS;
const colors = [chartColors.red, chartColors.orange, chartColors.yellow, chartColors.green, chartColors.blue];

const cache = new Map();
let width = null;
let height = null;

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
];
// </block:setup>

// <block:createRadialGradient3:0>
function createRadialGradient3(context, c1, c2, c3) {
  const chartArea = context.chart.chartArea;
  if (!chartArea) {
    // This case happens on initial chart load
    return;
  }

  const chartWidth = chartArea.right - chartArea.left;
  const chartHeight = chartArea.bottom - chartArea.top;
  if (width !== chartWidth || height !== chartHeight) {
    cache.clear();
  }
  let gradient = cache.get(c1 + c2 + c3);
  if (!gradient) {
    // Create the gradient because this is either the first render
    // or the size of the chart has changed
    width = chartWidth;
    height = chartHeight;
    const centerX = (chartArea.left + chartArea.right) / 2;
    const centerY = (chartArea.top + chartArea.bottom) / 2;
    const r = Math.min(
      (chartArea.right - chartArea.left) / 2,
      (chartArea.bottom - chartArea.top) / 2
    );
    const ctx = context.chart.ctx;
    gradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, r);
    gradient.addColorStop(0, c1);
    gradient.addColorStop(0.5, c2);
    gradient.addColorStop(1, c3);
    cache.set(c1 + c2 + c3, gradient);
  }

  return gradient;
}
// </block:createRadialGradient3>

// <block:data:2>
function generateData() {
  return Utils.numbers({
    count: DATA_COUNT,
    min: 0,
    max: 100
  });
}

const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [{
    data: generateData()
  }]
};
// </block:data>

// <block:config:1>
const config = {
  type: 'polarArea',
  data: data,
  options: {
    plugins: {
      legend: false,
      tooltip: false,
    },
    elements: {
      arc: {
        backgroundColor: function(context) {
          let c = colors[context.dataIndex];
          if (!c) {
            return;
          }
          if (context.active) {
            c = helpers.getHoverColor(c);
          }
          const mid = helpers.color(c).desaturate(0.2).darken(0.2).rgbString();
          const start = helpers.color(c).lighten(0.2).rotate(270).rgbString();
          const end = helpers.color(c).lighten(0.1).rgbString();
          return createRadialGradient3(context, start, mid, end);
        },
      }
    }
  }
};
// </block:config>

module.exports = {
  actions,
  config,
};

----------------------------------------

TITLE: Configuring Chart.js Actions and Data Handlers
DESCRIPTION: Defines a set of action handlers for manipulating chart data including randomization, dataset addition/removal, and data point management. Each handler includes logic for updating the chart after modifications.

LANGUAGE: javascript
CODE:
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1);
      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });
      chart.update();
    }
  }
];

----------------------------------------

TITLE: Implementing Interactive Pie Chart with Legend Hover Effects in ChartJS
DESCRIPTION: Creates a pie chart with interactive legend highlighting using ChartJS. When hovering over legend items, the chart applies opacity to non-selected segments by adding an alpha channel to their colors. Includes data configuration, hover event handling, and legend interaction setup.

LANGUAGE: javascript
CODE:
// <block:data:3>
const data = {
  labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
  datasets: [{
    label: '# of Votes',
    data: [12, 19, 3, 5, 2, 3],
    borderWidth: 1,
    backgroundColor: ['#CB4335', '#1F618D', '#F1C40F', '#27AE60', '#884EA0', '#D35400'],
  }]
};
// </block:data>

// <block:handleHover:1>
// Append '4d' to the colors (alpha channel), except for the hovered index
function handleHover(evt, item, legend) {
  legend.chart.data.datasets[0].backgroundColor.forEach((color, index, colors) => {
    colors[index] = index === item.index || color.length === 9 ? color : color + '4D';
  });
  legend.chart.update();
}
// </block:handleHover>

// <block:handleLeave:2>
// Removes the alpha channel from background colors
function handleLeave(evt, item, legend) {
  legend.chart.data.datasets[0].backgroundColor.forEach((color, index, colors) => {
    colors[index] = color.length === 9 ? color.slice(0, -2) : color;
  });
  legend.chart.update();
}
// </block:handleLeave>

// <block:config:0>
const config = {
  type: 'pie',
  data: data,
  options: {
    plugins: {
      legend: {
        onHover: handleHover,
        onLeave: handleLeave
      }
    }
  }
};
// </block:config>

module.exports = {
  config
};

----------------------------------------

TITLE: Configuring Min Value for Chart.js Time Scale
DESCRIPTION: This snippet illustrates how to set a minimum value for the x-axis in a Chart.js time scale. It uses the 'min' property to set the start date to November 7, 2021.

LANGUAGE: javascript
CODE:
let chart = new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            data: [{
                x: '2021-11-06 23:39:30',
                y: 50
            }, {
                x: '2021-11-07 01:00:28',
                y: 60
            }, {
                x: '2021-11-07 09:00:28',
                y: 20
            }]
        }],
    },
    options: {
        scales: {
            x: {
                min: '2021-11-07 00:00:00',
            }
        }
    }
});

----------------------------------------

TITLE: Triggering Tooltip Events in Chart.js
DESCRIPTION: This function toggles the tooltip of a chart. It either clears the active tooltip or sets a tooltip for specific data points at the center of the chart area, then updates the chart.

LANGUAGE: javascript
CODE:
function triggerTooltip(chart) {
  const tooltip = chart.tooltip;
  if (tooltip.getActiveElements().length > 0) {
    tooltip.setActiveElements([], {x: 0, y: 0});
  } else {
    const chartArea = chart.chartArea;
    tooltip.setActiveElements([
      {
        datasetIndex: 0,
        index: 2,
      }, {
        datasetIndex: 1,
        index: 2,
      }
    ],
    {
      x: (chartArea.left + chartArea.right) / 2,
      y: (chartArea.top + chartArea.bottom) / 2,
    });
  }

  chart.update();
}

----------------------------------------

TITLE: Configuring Legend Position in Chart.js
DESCRIPTION: This code snippet sets up a line chart using Chart.js and defines actions to change the legend position dynamically. It includes data setup, chart configuration, and action handlers for updating the legend position.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Position: top',
    handler(chart) {
      chart.options.plugins.legend.position = 'top';
      chart.update();
    }
  },
  {
    name: 'Position: right',
    handler(chart) {
      chart.options.plugins.legend.position = 'right';
      chart.update();
    }
  },
  {
    name: 'Position: bottom',
    handler(chart) {
      chart.options.plugins.legend.position = 'bottom';
      chart.update();
    }
  },
  {
    name: 'Position: left',
    handler(chart) {
      chart.options.plugins.legend.position = 'left';
      chart.update();
    }
  },
];
// </block:actions>


// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Checking Plugin Enablement in JavaScript
DESCRIPTION: Demonstrates how to check if a plugin is enabled for a chart instance.

LANGUAGE: javascript
CODE:
chart.isPluginEnabled('filler');

----------------------------------------

TITLE: Configuring Chart.js Polar Area Chart with Interactive Controls
DESCRIPTION: Complete setup for a Chart.js polar area chart including data structure, configuration, and interactive action handlers. Implements functionality for randomizing data, adding new data points, and removing existing data points. Uses a color-coded dataset with transparency effects.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels.push('data #' + (data.labels.length + 1));

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(0, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 5;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = ['Red', 'Orange', 'Yellow', 'Green', 'Blue'];
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: [
        Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
        Utils.transparentize(Utils.CHART_COLORS.orange, 0.5),
        Utils.transparentize(Utils.CHART_COLORS.yellow, 0.5),
        Utils.transparentize(Utils.CHART_COLORS.green, 0.5),
        Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      ]
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'polarArea',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Chart.js Polar Area Chart'
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Implementing Basic Chart Controller in JavaScript
DESCRIPTION: Basic implementation of a custom chart type by extending Chart.DatasetController class and registering it with Chart.js.

LANGUAGE: javascript
CODE:
class MyType extends Chart.DatasetController {

}

Chart.register(MyType);

// Now we can create a new instance of our chart, using the Chart.js API
new Chart(ctx, {
    // this is the string the constructor was registered at, ie Chart.controllers.MyType
    type: 'MyType',
    data: data,
    options: options
});

----------------------------------------

TITLE: Defining Chart.js Actions for Event Triggers
DESCRIPTION: This code defines an array of actions that can be used to trigger hover and tooltip events programmatically. Each action has a name and a handler function.

LANGUAGE: javascript
CODE:
const actions = [
  {
    name: 'Trigger Hover',
    handler: triggerHover
  },
  {
    name: 'Trigger Tooltip',
    handler: triggerTooltip
  }
];

----------------------------------------

TITLE: Getting Chart Instance by Key in JavaScript
DESCRIPTION: Shows how to retrieve a chart instance using a key with the static getChart() method.

LANGUAGE: javascript
CODE:
const chart = Chart.getChart("canvas-id");

----------------------------------------

TITLE: Configuring Chart.js with Decimation Settings
DESCRIPTION: Sets up the main chart configuration with decimation plugin settings, time scale, and performance optimizations. Includes settings for animations, data parsing, and interaction modes.

LANGUAGE: javascript
CODE:
const decimation = {
  enabled: false,
  algorithm: 'min-max',
};

const config = {
  type: 'line',
  data: data,
  options: {
    animation: false,
    parsing: false,
    interaction: {
      mode: 'nearest',
      axis: 'x',
      intersect: false
    },
    plugins: {
      decimation: decimation,
    },
    scales: {
      x: {
        type: 'time',
        ticks: {
          source: 'auto',
          maxRotation: 0,
          autoSkip: true,
        }
      }
    }
  }
};

----------------------------------------

TITLE: Configuring Chart.js Line Chart Options
DESCRIPTION: Defines the chart configuration including type, responsive behavior, plugins, interaction modes, and axis settings. Includes stacked Y-axis configuration and custom title display.

LANGUAGE: javascript
CODE:
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: (ctx) => 'Chart.js Line Chart - stacked=' + ctx.chart.options.scales.y.stacked
      },
      tooltip: {
        mode: 'index'
      },
    },
    interaction: {
      mode: 'nearest',
      axis: 'x',
      intersect: false
    },
    scales: {
      x: {
        title: {
          display: true,
          text: 'Month'
        }
      },
      y: {
        stacked: true,
        title: {
          display: true,
          text: 'Value'
        }
      }
    }
  }
};

----------------------------------------

TITLE: Configuring Chart.js Stacked Line Chart Actions
DESCRIPTION: Defines a set of interactive actions for manipulating the chart, including toggling stacked mode, randomizing data, and adding/removing datasets and data points.

LANGUAGE: javascript
CODE:
const actions = [
  {
    name: 'Stacked: true',
    handler: (chart) => {
      chart.options.scales.y.stacked = true;
      chart.update();
    }
  },
  {
    name: 'Stacked: false (default)',
    handler: (chart) => {
      chart.options.scales.y.stacked = false;
      chart.update();
    }
  },
  {
    name: 'Stacked Single',
    handler: (chart) => {
      chart.options.scales.y.stacked = 'single';
      chart.update();
    }
  },
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: dsColor,
        borderColor: dsColor,
        fill: true,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1);
      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });
      chart.update();
    }
  }
];

----------------------------------------

TITLE: Exporting Chart.js Vertical Bar Chart Configuration
DESCRIPTION: This snippet exports the actions and configuration objects for use in other parts of the application or external modules.

LANGUAGE: javascript
CODE:
module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Configuring Chart.js Fill Modes
DESCRIPTION: Demonstrates different fill modes in Chart.js area charts, including origin filling, relative dataset filling, and disabled filling.

LANGUAGE: javascript
CODE:
new Chart(ctx, {
    data: {
        datasets: [
            {fill: 'origin'},      // 0: fill to 'origin'
            {fill: '+2'},          // 1: fill to dataset 3
            {fill: 1},             // 2: fill to dataset 1
            {fill: false},         // 3: no fill
            {fill: '-2'},          // 4: fill to dataset 2
            {fill: {value: 25}}    // 5: fill to axis value 25
        ]
    }
});

----------------------------------------

TITLE: Triggering Hover Events in Chart.js
DESCRIPTION: This function toggles the active elements of a chart to simulate a hover event. It either clears all active elements or sets specific elements as active, then updates the chart.

LANGUAGE: javascript
CODE:
function triggerHover(chart) {
  if (chart.getActiveElements().length > 0) {
    chart.setActiveElements([]);
  } else {
    chart.setActiveElements([
      {
        datasetIndex: 0,
        index: 0,
      }, {
        datasetIndex: 1,
        index: 0,
      }
    ]);
  }
  chart.update();
}

----------------------------------------

TITLE: Configuring Step Size in Chart.js Linear Axis
DESCRIPTION: Example showing how to configure fixed step size for a linear y-axis scale. Sets up ticks from 0 to 5 with 0.5 increments.

LANGUAGE: javascript
CODE:
let options = {
    scales: {
        y: {
            max: 5,
            min: 0,
            ticks: {
                stepSize: 0.5
            }
        }
    }
};

----------------------------------------

TITLE: Required Scale Interface Methods in Chart.js
DESCRIPTION: This code snippet outlines the required methods that must be implemented for a custom scale to work with Chart.js. It includes methods for determining data limits, building ticks, and handling pixel-to-value conversions.

LANGUAGE: javascript
CODE:
{
    // Determines the data limits. Should set this.min and this.max to be the data max/min
    determineDataLimits: function() {},

    // Generate tick marks. this.chart is the chart instance. The data object can be accessed as this.chart.data
    // buildTicks() should create a ticks array on the axis instance, if you intend to use any of the implementations from the base class
    buildTicks: function() {},

    // Get the label to show for the given value
    getLabelForValue: function(value) {},

    // Get the pixel (x coordinate for horizontal axis, y coordinate for vertical axis) for a given value
    // @param index: index into the ticks array
    getPixelForTick: function(index) {},

    // Get the pixel (x coordinate for horizontal axis, y coordinate for vertical axis) for a given value
    // @param value : the value to get the pixel for
    // @param [index] : index into the data array of the value
    getPixelForValue: function(value, index) {},

    // Get the value for a given pixel (x coordinate for horizontal axis, y coordinate for vertical axis)
    // @param pixel : pixel value
    getValueForPixel: function(pixel) {}
}

----------------------------------------

TITLE: Setting Up Data for Chart.js Bar Chart
DESCRIPTION: This code sets up the data for a Chart.js bar chart with two datasets. It includes labels, data generation, and styling options for the datasets.

LANGUAGE: javascript
CODE:
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      hoverBorderWidth: 5,
      hoverBorderColor: 'green',
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      hoverBorderWidth: 5,
      hoverBorderColor: 'green',
    }
  ]
};

----------------------------------------

TITLE: Configuring Polar Area Chart with Dynamic Coloring in Chart.js
DESCRIPTION: This snippet demonstrates the creation of a polar area chart using Chart.js. It includes functions for generating random data, dynamic color assignment based on data values, and configuration for chart interactivity. The chart uses a custom color scheme and hover effects.

LANGUAGE: javascript
CODE:
// <block:setup:2>
const DATA_COUNT = 7;
Utils.srand(110);

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
];
// </block:setup>

// <block:data:1>
function generateData() {
  return Utils.numbers({
    count: DATA_COUNT,
    min: 0,
    max: 100
  });
}

const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [{
    data: generateData()
  }]
};
// </block:data>

// <block:options:0>
function colorize(opaque, hover, ctx) {
  const v = ctx.raw;
  const c = v < 35 ? '#D60000'
    : v < 55 ? '#F46300'
    : v < 75 ? '#0358B6'
    : '#44DE28';

  const opacity = hover ? 1 - Math.abs(v / 150) - 0.2 : 1 - Math.abs(v / 150);

  return opaque ? c : Utils.transparentize(c, opacity);
}

function hoverColorize(ctx) {
  return colorize(false, true, ctx);
}

const config = {
  type: 'polarArea',
  data: data,
  options: {
    plugins: {
      legend: false,
      tooltip: false,
    },
    elements: {
      arc: {
        backgroundColor: colorize.bind(null, false, false),
        hoverBackgroundColor: hoverColorize
      }
    }
  }
};
// </block:options>

module.exports = {
  actions,
  config,
};

----------------------------------------

TITLE: Utility Functions in Chart.Scale Base Class
DESCRIPTION: This code block shows utility functions available in the Core.Scale base class of Chart.js. These functions can be useful when implementing custom scales, providing methods to check scale orientation and retrieve tick objects.

LANGUAGE: javascript
CODE:
{
    // Returns true if the scale instance is horizontal
    isHorizontal: function() {},

    // Returns the scale tick objects ({label, major})
    getTicks: function() {}
}

----------------------------------------

TITLE: Configuring Chart.js Bar Chart
DESCRIPTION: This code configures a Chart.js bar chart using the previously defined data. It specifies the chart type as 'bar' and includes an empty options object for potential customization.

LANGUAGE: javascript
CODE:
const config = {
  type: 'bar',
  data: data,
  options: {
  },
};

----------------------------------------

TITLE: Implementing Chart.js Area Border Plugin with Data Configuration
DESCRIPTION: A complete example showing how to implement a Chart.js plugin that draws a border around the chart area. The code includes data setup with two datasets, plugin implementation for drawing borders, and chart configuration with customizable border properties.

LANGUAGE: javascript
CODE:
// <block:data:2>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
// </block:data>

// <block:plugin:1>
const chartAreaBorder = {
  id: 'chartAreaBorder',
  beforeDraw(chart, args, options) {
    const {ctx, chartArea: {left, top, width, height}} = chart;
    ctx.save();
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.setLineDash(options.borderDash || []);
    ctx.lineDashOffset = options.borderDashOffset;
    ctx.strokeRect(left, top, width, height);
    ctx.restore();
  }
};
// </block:plugin>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      chartAreaBorder: {
        borderColor: 'red',
        borderWidth: 2,
        borderDash: [5, 5],
        borderDashOffset: 2,
      }
    }
  },
  plugins: [chartAreaBorder]
};
// </block:config>

module.exports = {
  config: config,
};

----------------------------------------

TITLE: Programmatically Resizing Chart Container
DESCRIPTION: Shows how to programmatically resize a chart by modifying its container dimensions. Requires maintainAspectRatio to be set to false for proper height adjustment.

LANGUAGE: javascript
CODE:
chart.canvas.parentNode.style.height = '128px';
chart.canvas.parentNode.style.width = '128px';

----------------------------------------

TITLE: Setting Up Chart.js Initial Data and Dataset Configuration
DESCRIPTION: Initializes the chart data structure with two datasets, including custom styling and animation properties. Configures initial data points using utility functions and sets up visual properties like colors and fill options.

LANGUAGE: javascript
CODE:
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      animations: {
        y: {
          duration: 2000,
          delay: 500
        }
      },
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      fill: 1,
      tension: 0.5
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};

----------------------------------------

TITLE: Registering Chart Components Globally in JavaScript
DESCRIPTION: Demonstrates how to register plugins, axis types, or chart types globally using the static register() method.

LANGUAGE: javascript
CODE:
import { Chart, Tooltip, LinearScale, PointElement, BubbleController } from 'chart.js';

Chart.register(Tooltip, LinearScale, PointElement, BubbleController);

----------------------------------------

TITLE: Implementing Interactive Actions for Chart.js Horizontal Bar Chart
DESCRIPTION: Defines a set of interactive actions for manipulating the chart, including randomizing data, adding/removing datasets and data points. These actions can be triggered to dynamically update the chart.

LANGUAGE: javascript
CODE:
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        borderWidth: 1,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];

----------------------------------------

TITLE: Configuring Chart.js Actions and Data Management
DESCRIPTION: Defines a set of actions for manipulating chart data including randomization, adding/removing datasets and data points. Each action updates the chart dynamically after modifying the underlying data structure.

LANGUAGE: javascript
CODE:
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1);

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];

----------------------------------------

TITLE: Chart.js Actions Configuration
DESCRIPTION: Defines chart manipulation actions including randomizing data, adding new data points, and removing data points. Each action updates the chart after modification.

LANGUAGE: javascript
CODE:
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1);

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];

----------------------------------------

TITLE: Registering Custom Scale with Chart.js
DESCRIPTION: This code snippet shows how to register a custom scale with the global Chart object, making it available for use in chart configurations. It also includes an alternative method for registering scales that don't extend Chart.Scale.

LANGUAGE: javascript
CODE:
Chart.register(MyScale);

// If the new scale is not extending Chart.Scale, the prototype can not be used to detect what
// you are trying to register - so you need to be explicit:

// Chart.registry.addScales(MyScale);

----------------------------------------

TITLE: Initializing Chart.js Data Structure
DESCRIPTION: Sets up the initial data structure for the chart with two datasets, including labels and styling configurations. Uses utility functions to generate random data points within specified ranges.

LANGUAGE: javascript
CODE:
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: DATA_COUNT});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      tension: 0.4,
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      tension: 0.2,
    }
  ]
};

----------------------------------------

TITLE: Getting Data Visibility State in JavaScript
DESCRIPTION: Demonstrates how to get the visibility state of a data item using getDataVisibility().

LANGUAGE: javascript
CODE:
const visible = chart.getDataVisibility(2);

----------------------------------------

TITLE: Initializing Chart.js with Global Category Labels
DESCRIPTION: Creates a new Chart.js instance with globally defined category labels using the data.labels property.

LANGUAGE: javascript
CODE:
let chart = new Chart(ctx, {
    type: ...
    data: {
        labels: ['January', 'February', 'March', 'April', 'May', 'June'],
        datasets: ...
    }
});

----------------------------------------

TITLE: Configuring Chart.js Options and Animations
DESCRIPTION: Defines the chart configuration including type, animations, hover effects, and interaction settings. Features custom radius animations and disabled tooltips for enhanced visualization.

LANGUAGE: javascript
CODE:
const config = {
  type: 'line',
  data: data,
  options: {
    animations: {
      radius: {
        duration: 400,
        easing: 'linear',
        loop: (context) => context.active
      }
    },
    hoverRadius: 12,
    hoverBackgroundColor: 'yellow',
    interaction: {
      mode: 'nearest',
      intersect: false,
      axis: 'x'
    },
    plugins: {
      tooltip: {
        enabled: false
      }
    }
  },
};

----------------------------------------

TITLE: Setting Dataset Visibility in JavaScript
DESCRIPTION: Demonstrates how to set the visibility of a dataset using setDatasetVisibility().

LANGUAGE: javascript
CODE:
chart.setDatasetVisibility(1, false); // hides dataset at index 1
chart.update(); // chart now renders with dataset hidden

----------------------------------------

TITLE: Stacked Line Chart Configuration in Chart.js
DESCRIPTION: Demonstrates how to configure a stacked line chart by enabling stacking on the y-axis.

LANGUAGE: javascript
CODE:
const stackedLine = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        scales: {
            y: {
                stacked: true
            }
        }
    }
});

----------------------------------------

TITLE: Configuring Progressive Animation for Chart.js Line Chart
DESCRIPTION: This snippet defines the animation configuration for a progressive line chart. It includes custom easing, duration, and delay functions to create a smooth animation effect as the chart is drawn.

LANGUAGE: javascript
CODE:
let easing = helpers.easingEffects.easeOutQuad;
let restart = false;
const totalDuration = 5000;
const duration = (ctx) => easing(ctx.index / data.length) * totalDuration / data.length;
const delay = (ctx) => easing(ctx.index / data.length) * totalDuration;
const previousY = (ctx) => ctx.index === 0 ? ctx.chart.scales.y.getPixelForValue(100) : ctx.chart.getDatasetMeta(ctx.datasetIndex).data[ctx.index - 1].getProps(['y'], true).y;
const animation = {
  x: {
    type: 'number',
    easing: 'linear',
    duration: duration,
    from: NaN, // the point is initially skipped
    delay(ctx) {
      if (ctx.type !== 'data' || ctx.xStarted) {
        return 0;
      }
      ctx.xStarted = true;
      return delay(ctx);
    }
  },
  y: {
    type: 'number',
    easing: 'linear',
    duration: duration,
    from: previousY,
    delay(ctx) {
      if (ctx.type !== 'data' || ctx.yStarted) {
        return 0;
      }
      ctx.yStarted = true;
      return delay(ctx);
    }
  }
};

----------------------------------------

TITLE: Configuring Chart.js with Log2 Axis
DESCRIPTION: This snippet demonstrates how to set up a Chart.js line chart with a custom Log2 axis. It includes data generation, chart configuration, and axis type specification.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const DATA_COUNT = 12;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 1000};
const labels = Utils.months({count: DATA_COUNT});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'My First dataset',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      fill: false,
    }
  ],
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data,
  options: {
    responsive: true,
    scales: {
      x: {
        display: true,
      },
      y: {
        display: true,
        type: 'log2',
      }
    }
  }
};

// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Configuring Chart.js with Log2 Axis
DESCRIPTION: This snippet demonstrates how to set up a Chart.js line chart with a custom Log2 axis. It includes data generation, chart configuration, and axis type specification.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const DATA_COUNT = 12;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 1000};
const labels = Utils.months({count: DATA_COUNT});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'My First dataset',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      fill: false,
    }
  ],
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data,
  options: {
    responsive: true,
    scales: {
      x: {
        display: true,
      },
      y: {
        display: true,
        type: 'log2',
      }
    }
  }
};

// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Configuring Chart.js Grid Styling with Dynamic Colors
DESCRIPTION: Creates a line chart with two datasets and customizable grid styling. Features include conditional Y-axis grid line coloring based on value ranges and configurable X-axis grid visibility settings for border, chart area, and tick marks.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: [10, 30, 39, 20, 25, 34, -10],
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: [18, 33, 22, 19, 11, -39, 30],
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
// </block:setup>

// <block:config:0>
// Change these settings to change the display for different parts of the X axis
// grid configuration
const DISPLAY = true;
const BORDER = true;
const CHART_AREA = true;
const TICKS = true;

const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Grid Line Settings'
      }
    },
    scales: {
      x: {
        border: {
          display: BORDER
        },
        grid: {
          display: DISPLAY,
          drawOnChartArea: CHART_AREA,
          drawTicks: TICKS,
        }
      },
      y: {
        border: {
          display: false
        },
        grid: {
          color: function(context) {
            if (context.tick.value > 0) {
              return Utils.CHART_COLORS.green;
            } else if (context.tick.value < 0) {
              return Utils.CHART_COLORS.red;
            }

            return '#000000';
          },
        },
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Configuring Chart.js for Progressive Line Chart with Easing
DESCRIPTION: This snippet sets up the Chart.js configuration for a progressive line chart with two datasets. It includes custom animation settings, interaction options, and scale configurations.

LANGUAGE: javascript
CODE:
const config = {
  type: 'line',
  data: {
    datasets: [{
      borderColor: Utils.CHART_COLORS.red,
      borderWidth: 1,
      radius: 0,
      data: data,
    },
    {
      borderColor: Utils.CHART_COLORS.blue,
      borderWidth: 1,
      radius: 0,
      data: data2,
    }]
  },
  options: {
    animation,
    interaction: {
      intersect: false
    },
    plugins: {
      legend: false,
      title: {
        display: true,
        text: () => easing.name
      }
    },
    scales: {
      x: {
        type: 'linear'
      }
    }
  }
};

----------------------------------------

TITLE: Configuring Grid Lines in Chart.js Radar Chart
DESCRIPTION: This snippet shows how to customize the grid lines of a radial axis in a Chart.js radar chart. It sets the color of the grid lines to red.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First dataset',
    backgroundColor: 'rgba(54, 162, 235, 0.5)',
    borderColor: 'rgb(54, 162, 235)',
    borderWidth: 1,
    data: [10, 20, 30, 40, 50, 0, 5],
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'radar',
  data,
  options: {
    scales: {
      r: {
        grid: {
          color: 'red'
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Configuring Chart Events in JavaScript
DESCRIPTION: Example showing how to configure a Chart.js instance to respond only to click events by setting the events option.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
  type: 'line',
  data: data,
  options: {
    // This chart will not respond to mousemove, etc
    events: ['click']
  }
});

----------------------------------------

TITLE: Configuring Line Chart with DrawTime Options - JavaScript
DESCRIPTION: Demonstrates setup and configuration of a line chart with area fills using Chart.js. Includes data generation, multiple datasets with different colors, and interactive controls for changing drawTime settings and chart appearance.

LANGUAGE: javascript
CODE:
// <block:setup:2>
const inputs = {
  min: -100,
  max: 100,
  count: 8,
  decimals: 2,
  continuity: 1
};

const generateLabels = () => {
  return Utils.months({count: inputs.count});
};

Utils.srand(3);
const generateData = () => (Utils.numbers(inputs));
// </block:setup>

// <block:data:0>
const data = {
  labels: generateLabels(),
  datasets: [
    {
      label: 'Dataset 1',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.CHART_COLORS.red,
      fill: true
    },
    {
      label: 'Dataset 2',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue),
      fill: true
    }
  ]
};
// </block:data>

// <block:actions:3>
let smooth = false;

const actions = [
  {
    name: 'drawTime: beforeDatasetDraw (default)',
    handler: (chart) => {
      chart.options.plugins.filler.drawTime = 'beforeDatasetDraw';
      chart.update();
    }
  },
  {
    name: 'drawTime: beforeDatasetsDraw',
    handler: (chart) => {
      chart.options.plugins.filler.drawTime = 'beforeDatasetsDraw';
      chart.update();
    }
  },
  {
    name: 'drawTime: beforeDraw',
    handler: (chart) => {
      chart.options.plugins.filler.drawTime = 'beforeDraw';
      chart.update();
    }
  },
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
  {
    name: 'Smooth',
    handler(chart) {
      smooth = !smooth;
      chart.options.elements.line.tension = smooth ? 0.4 : 0;
      chart.update();
    }
  }
];
// </block:actions>

// <block:config:1>
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      filler: {
        propagate: false,
      },
      title: {
        display: true,
        text: (ctx) => 'drawTime: ' + ctx.chart.options.plugins.filler.drawTime
      }
    },
    pointBackgroundColor: '#fff',
    radius: 10,
    interaction: {
      intersect: false,
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Configuring and Initializing Radar Chart with Skipped Points using Chart.js
DESCRIPTION: This snippet sets up a radar chart with three datasets, each skipping a point at the beginning, middle, or end. It includes data generation, chart configuration, and a randomization action. The chart uses custom colors and transparency for each dataset.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach((dataset, i) => {
        const data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});

        if (i === 0) {
          data[0] = null;
        } else if (i === 1) {
          data[Number.parseInt(data.length / 2, 10)] = null;
        } else {
          data[data.length - 1] = null;
        }

        dataset.data = data;
      });
      chart.update();
    }
  }
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const dataFirstSkip = Utils.numbers(NUMBER_CFG);
const dataMiddleSkip = Utils.numbers(NUMBER_CFG);
const dataLastSkip = Utils.numbers(NUMBER_CFG);

dataFirstSkip[0] = null;
dataMiddleSkip[Number.parseInt(dataMiddleSkip.length / 2, 10)] = null;
dataLastSkip[dataLastSkip.length - 1] = null;

const data = {
  labels: labels,
  datasets: [
    {
      label: 'Skip first dataset',
      data: dataFirstSkip,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Skip mid dataset',
      data: dataMiddleSkip,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    },
    {
      label: 'Skip last dataset',
      data: dataLastSkip,
      borderColor: Utils.CHART_COLORS.green,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green, 0.5),
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'radar',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Radar Skip Points Chart'
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config
};

----------------------------------------

TITLE: Setting Shorthand Padding with x and y Properties in Chart.js
DESCRIPTION: This snippet illustrates how to use the shorthand x and y properties to set padding for left/right and top/bottom respectively. It sets 10px left/right and 4px top/bottom padding on a Radial Linear Axis tick backdrop.

LANGUAGE: javascript
CODE:
let chart = new Chart(ctx, {
    type: 'radar',
    data: data,
    options: {
        scales: {
          r: {
            ticks: {
              backdropPadding: {
                  x: 10,
                  y: 4
              }
            }
        }
    }
});

----------------------------------------

TITLE: Initializing Chart.js Data Structure
DESCRIPTION: Sets up the initial data structure for the chart with four datasets representing different categories, each with randomly generated values within a specified range.

LANGUAGE: javascript
CODE:
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'My First dataset',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.CHART_COLORS.red,
      fill: true
    },
    {
      label: 'My Second dataset',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.CHART_COLORS.blue,
      fill: true
    },
    {
      label: 'My Third dataset',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.green,
      backgroundColor: Utils.CHART_COLORS.green,
      fill: true
    },
    {
      label: 'My Fourth dataset',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.yellow,
      backgroundColor: Utils.CHART_COLORS.yellow,
      fill: true
    }
  ]
};

----------------------------------------

TITLE: Initializing a Basic Bubble Chart with Chart.js
DESCRIPTION: This snippet demonstrates how to set up a basic bubble chart using Chart.js. It defines the data structure and configuration options required to render a simple bubble chart with two data points.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const data = {
  datasets: [{
    label: 'First Dataset',
    data: [{
      x: 20,
      y: 30,
      r: 15
    }, {
      x: 40,
      y: 10,
      r: 10
    }],
    backgroundColor: 'rgb(255, 99, 132)'
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'bubble',
  data: data,
  options: {}
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Creating Dynamic Color Bar Chart with Chart.js
DESCRIPTION: Creates a bar chart with 16 data points where bar colors are determined by their y-values. Includes setup for random data generation, color selection logic based on value thresholds, and chart configuration with customizable opacity. Features a randomize action to refresh data dynamically.

LANGUAGE: javascript
CODE:
// <block:setup:2>
const DATA_COUNT = 16;
Utils.srand(110);

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
];
// </block:setup>

// <block:data:1>
function generateData() {
  return Utils.numbers({
    count: DATA_COUNT,
    min: -100,
    max: 100
  });
}

const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [{
    data: generateData(),
  }]
};
// </block:data>

// <block:options:0>
function colorize(opaque) {
  return (ctx) => {
    const v = ctx.parsed.y;
    const c = v < -50 ? '#D60000'
      : v < 0 ? '#F46300'
      : v < 50 ? '#0358B6'
      : '#44DE28';

    return opaque ? c : Utils.transparentize(c, 1 - Math.abs(v / 150));
  };
}

const config = {
  type: 'bar',
  data: data,
  options: {
    plugins: {
      legend: false,
    },
    elements: {
      bar: {
        backgroundColor: colorize(false),
        borderColor: colorize(true),
        borderWidth: 2
      }
    }
  }
};
// </block:options>

module.exports = {
  actions,
  config,
};

----------------------------------------

TITLE: Creating Dynamic Color Bar Chart with Chart.js
DESCRIPTION: Creates a bar chart with 16 data points where bar colors are determined by their y-values. Includes setup for random data generation, color selection logic based on value thresholds, and chart configuration with customizable opacity. Features a randomize action to refresh data dynamically.

LANGUAGE: javascript
CODE:
// <block:setup:2>
const DATA_COUNT = 16;
Utils.srand(110);

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
];
// </block:setup>

// <block:data:1>
function generateData() {
  return Utils.numbers({
    count: DATA_COUNT,
    min: -100,
    max: 100
  });
}

const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [{
    data: generateData(),
  }]
};
// </block:data>

// <block:options:0>
function colorize(opaque) {
  return (ctx) => {
    const v = ctx.parsed.y;
    const c = v < -50 ? '#D60000'
      : v < 0 ? '#F46300'
      : v < 50 ? '#0358B6'
      : '#44DE28';

    return opaque ? c : Utils.transparentize(c, 1 - Math.abs(v / 150));
  };
}

const config = {
  type: 'bar',
  data: data,
  options: {
    plugins: {
      legend: false,
    },
    elements: {
      bar: {
        backgroundColor: colorize(false),
        borderColor: colorize(true),
        borderWidth: 2
      }
    }
  }
};
// </block:options>

module.exports = {
  actions,
  config,
};

----------------------------------------

TITLE: Setting Up Data for Chart.js Horizontal Bar Chart
DESCRIPTION: Initializes the data for the horizontal bar chart, including labels and two datasets with random data. Uses utility functions for generating month labels and random numbers within a specified range.

LANGUAGE: javascript
CODE:
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};

----------------------------------------

TITLE: Setting Plugin Defaults in Chart.js
DESCRIPTION: Demonstrates how to set default values for plugin options using the 'defaults' entry in the plugin object. This example sets a default background color for the canvas.

LANGUAGE: javascript
CODE:
const plugin = {
    id: 'custom_canvas_background_color',
    beforeDraw: (chart, args, options) => {
        const {ctx} = chart;
        ctx.save();
        ctx.globalCompositeOperation = 'destination-over';
        ctx.fillStyle = options.color;
        ctx.fillRect(0, 0, chart.width, chart.height);
        ctx.restore();
    },
    defaults: {
        color: 'lightGreen'
    }
}

----------------------------------------

TITLE: Adding and Removing Data in Chart.js
DESCRIPTION: Functions to dynamically add and remove data points from a Chart.js chart. The addData function appends new labels and data points, while removeData removes the last elements from both arrays.

LANGUAGE: javascript
CODE:
function addData(chart, label, newData) {
    chart.data.labels.push(label);
    chart.data.datasets.forEach((dataset) => {
        dataset.data.push(newData);
    });
    chart.update();
}

function removeData(chart) {
    chart.data.labels.pop();
    chart.data.datasets.forEach((dataset) => {
        dataset.data.pop();
    });
    chart.update();
}

----------------------------------------

TITLE: Adding and Removing Data in Chart.js
DESCRIPTION: Functions to dynamically add and remove data points from a Chart.js chart. The addData function appends new labels and data points, while removeData removes the last elements from both arrays.

LANGUAGE: javascript
CODE:
function addData(chart, label, newData) {
    chart.data.labels.push(label);
    chart.data.datasets.forEach((dataset) => {
        dataset.data.push(newData);
    });
    chart.update();
}

function removeData(chart) {
    chart.data.labels.pop();
    chart.data.datasets.forEach((dataset) => {
        dataset.data.pop();
    });
    chart.update();
}

----------------------------------------

TITLE: Configuring Chart.js Polar Area Chart Actions
DESCRIPTION: Defines action handlers for randomizing data, adding new data points, and removing data points from the chart. These actions allow dynamic manipulation of the chart's dataset.

LANGUAGE: javascript
CODE:
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels.push('data #' + (data.labels.length + 1));

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(0, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1);
      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });
      chart.update();
    }
  }
];

----------------------------------------

TITLE: Chart.js Configuration
DESCRIPTION: Defines the main chart configuration including chart type, data reference, and responsive options with legend positioning.

LANGUAGE: javascript
CODE:
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
    }
  },
};

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Configuring and Initializing Stacked Radar Chart with Chart.js
DESCRIPTION: This snippet sets up a stacked radar chart with multiple datasets, custom colors, and filling options. It includes data generation functions, chart configuration, and action handlers for randomization and styling changes.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const inputs = {
  min: 8,
  max: 16,
  count: 8,
  decimals: 2,
  continuity: 1
};

const generateLabels = () => {
  return Utils.months({count: inputs.count});
};

const generateData = () => {
  const values = Utils.numbers(inputs);
  inputs.from = values;
  return values;
};

const labels = Utils.months({count: 8});
const data = {
  labels: generateLabels(),
  datasets: [
    {
      label: 'D0',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red),
    },
    {
      label: 'D1',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.orange,
      hidden: true,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.orange),
      fill: '-1'
    },
    {
      label: 'D2',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.yellow,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.yellow),
      fill: 1
    },
    {
      label: 'D3',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.green,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green),
      fill: false
    },
    {
      label: 'D4',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue),
      fill: '-1'
    },
    {
      label: 'D5',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.purple,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.purple),
      fill: '-1'
    },
    {
      label: 'D6',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.grey,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.grey),
      fill: {value: 85}
    }
  ]
};
// </block:setup>

// <block:actions:2>
let smooth = false;
let propagate = false;

const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      inputs.from = [];
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
  {
    name: 'Propagate',
    handler(chart) {
      propagate = !propagate;
      chart.options.plugins.filler.propagate = propagate;
      chart.update();

    }
  },
  {
    name: 'Smooth',
    handler(chart) {
      smooth = !smooth;
      chart.options.elements.line.tension = smooth ? 0.4 : 0;
      chart.update();
    }
  }
];
// </block:actions>

// <block:config:0>
const config = {
  type: 'radar',
  data: data,
  options: {
    plugins: {
      filler: {
        propagate: false
      },
      'samples-filler-analyser': {
        target: 'chart-analyser'
      }
    },
    interaction: {
      intersect: false
    }
  }
};
// </block:config>

module.exports = {
  actions: actions,
  config: config
};

----------------------------------------

TITLE: Configuring Multi Series Pie Chart in Chart.js
DESCRIPTION: Creates a pie chart configuration with multiple datasets, custom legend labels, and interactive tooltips. Includes data setup with color configurations and custom plugin options for legend generation and click handling.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const DATA_COUNT = 5;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: ['Overall Yay', 'Overall Nay', 'Group A Yay', 'Group A Nay', 'Group B Yay', 'Group B Nay', 'Group C Yay', 'Group C Nay'],
  datasets: [
    {
      backgroundColor: ['#AAA', '#777'],
      data: [21, 79]
    },
    {
      backgroundColor: ['hsl(0, 100%, 60%)', 'hsl(0, 100%, 35%)'],
      data: [33, 67]
    },
    {
      backgroundColor: ['hsl(100, 100%, 60%)', 'hsl(100, 100%, 35%)'],
      data: [20, 80]
    },
    {
      backgroundColor: ['hsl(180, 100%, 60%)', 'hsl(180, 100%, 35%)'],
      data: [10, 90]
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'pie',
  data: data,
  options: {
    responsive: true,
    plugins: {
      legend: {
        labels: {
          generateLabels: function(chart) {
            // Get the default label list
            const original = Chart.overrides.pie.plugins.legend.labels.generateLabels;
            const labelsOriginal = original.call(this, chart);

            // Build an array of colors used in the datasets of the chart
            let datasetColors = chart.data.datasets.map(function(e) {
              return e.backgroundColor;
            });
            datasetColors = datasetColors.flat();

            // Modify the color and hide state of each label
            labelsOriginal.forEach(label => {
              // There are twice as many labels as there are datasets. This converts the label index into the corresponding dataset index
              label.datasetIndex = (label.index - label.index % 2) / 2;

              // The hidden state must match the dataset's hidden state
              label.hidden = !chart.isDatasetVisible(label.datasetIndex);

              // Change the color to match the dataset
              label.fillStyle = datasetColors[label.index];
            });

            return labelsOriginal;
          }
        },
        onClick: function(mouseEvent, legendItem, legend) {
          // toggle the visibility of the dataset from what it currently is
          legend.chart.getDatasetMeta(
            legendItem.datasetIndex
          ).hidden = legend.chart.isDatasetVisible(legendItem.datasetIndex);
          legend.chart.update();
        }
      },
      tooltip: {
        callbacks: {
          title: function(context) {
            const labelIndex = (context[0].datasetIndex * 2) + context[0].dataIndex;
            return context[0].chart.data.labels[labelIndex] + ': ' + context[0].formattedValue;
          }
        }
      }
    }
  },
};
// </block:config>

module.exports = {
  config: config,
};

----------------------------------------

TITLE: Configuring Plugin Options in Chart.js
DESCRIPTION: Illustrates how to configure plugin options within a chart's configuration. Options are scoped by the plugin ID under the 'options.plugins' object.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
    options: {
        foo: { ... },           // chart 'foo' option
        plugins: {
            p1: {
                foo: { ... },   // p1 plugin 'foo' option
                bar: { ... }
            },
            p2: {
                foo: { ... },   // p2 plugin 'foo' option
                bla: { ... }
            }
        }
    }
});

----------------------------------------

TITLE: Simple Data Structure Example for Polar Area Chart
DESCRIPTION: Shows the minimal data structure required to create a polar area chart with three segments. Includes data points and corresponding labels for tooltips and legends.

LANGUAGE: javascript
CODE:
data = {
    datasets: [{
        data: [10, 20, 30]
    }],

    // These labels appear in the legend and in the tooltips when hovering different arcs
    labels: [
        'Red',
        'Yellow',
        'Blue'
    ]
};

----------------------------------------

TITLE: Configuring Chart.js Stacked Bar/Line Chart Actions
DESCRIPTION: Defines action handlers for manipulating chart data including randomization, adding/removing datasets and data points. These actions provide interactive functionality for dynamic chart updates.

LANGUAGE: javascript
CODE:
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        borderWidth: 1,
        stack: 'combined',
        data: Utils.numbers({count: data.labels.length, min: 0, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(0, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1);
      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });
      chart.update();
    }
  }
];

----------------------------------------

TITLE: Configuring Chart.js Time Scale Combo Chart
DESCRIPTION: Complete setup for a Chart.js combo chart with time-based x-axis. Includes three datasets (two bar charts and one line chart) with randomization capability. Uses time scale configuration for x-axis with daily unit intervals and custom styling for each dataset type.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: 0, max: 100});
      });
      chart.update();
    }
  },
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = [];

for (let i = 0; i < DATA_COUNT; ++i) {
  labels.push(Utils.newDate(i));
}

const data = {
  labels: labels,
  datasets: [{
    type: 'bar',
    label: 'Dataset 1',
    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    borderColor: Utils.CHART_COLORS.red,
    data: Utils.numbers(NUMBER_CFG),
  }, {
    type: 'bar',
    label: 'Dataset 2',
    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    borderColor: Utils.CHART_COLORS.blue,
    data: Utils.numbers(NUMBER_CFG),
  }, {
    type: 'line',
    label: 'Dataset 3',
    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.green, 0.5),
    borderColor: Utils.CHART_COLORS.green,
    fill: false,
    data: Utils.numbers(NUMBER_CFG),
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      title: {
        text: 'Chart.js Combo Time Scale',
        display: true
      }
    },
    scales: {
      x: {
        type: 'time',
        display: true,
        offset: true,
        ticks: {
          source: 'data'
        },
        time: {
          unit: 'day'
        },
      },
    },
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Configuring Chart.js Interaction Modes and Actions
DESCRIPTION: This snippet defines action handlers for changing interaction modes and axis settings in a Chart.js chart. It also sets up the chart data and configuration, including custom tooltips and title display.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Mode: index',
    handler(chart) {
      chart.options.interaction.axis = 'xy';
      chart.options.interaction.mode = 'index';
      chart.update();
    }
  },
  {
    name: 'Mode: dataset',
    handler(chart) {
      chart.options.interaction.axis = 'xy';
      chart.options.interaction.mode = 'dataset';
      chart.update();
    }
  },
  {
    name: 'Mode: point',
    handler(chart) {
      chart.options.interaction.axis = 'xy';
      chart.options.interaction.mode = 'point';
      chart.update();
    }
  },
  {
    name: 'Mode: nearest, axis: xy',
    handler(chart) {
      chart.options.interaction.axis = 'xy';
      chart.options.interaction.mode = 'nearest';
      chart.update();
    }
  },
  {
    name: 'Mode: nearest, axis: x',
    handler(chart) {
      chart.options.interaction.axis = 'x';
      chart.options.interaction.mode = 'nearest';
      chart.update();
    }
  },
  {
    name: 'Mode: nearest, axis: y',
    handler(chart) {
      chart.options.interaction.axis = 'y';
      chart.options.interaction.mode = 'nearest';
      chart.update();
    }
  },
  {
    name: 'Mode: x',
    handler(chart) {
      chart.options.interaction.mode = 'x';
      chart.update();
    }
  },
  {
    name: 'Mode: y',
    handler(chart) {
      chart.options.interaction.mode = 'y';
      chart.update();
    }
  },
  {
    name: 'Toggle Intersect',
    handler(chart) {
      chart.options.interaction.intersect = !chart.options.interaction.intersect;
      chart.update();
    }
  },
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    },
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    interaction: {
      intersect: false,
      mode: 'index',
    },
    plugins: {
      title: {
        display: true,
        text: (ctx) => {
          const {axis = 'xy', intersect, mode} = ctx.chart.options.interaction;
          return 'Mode: ' + mode + ', axis: ' + axis + ', intersect: ' + intersect;
        }
      },
    }
  }
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Setting Up Chart.js Data Structure
DESCRIPTION: Initializes the chart data structure with two datasets - one bar and one line chart dataset. Both datasets are configured to stack together with different colors and transparency levels.

LANGUAGE: javascript
CODE:
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
      stack: 'combined',
      type: 'bar'
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      stack: 'combined'
    }
  ]
};

----------------------------------------

TITLE: Implementing Line Chart with Dynamic Fill Boundaries in Chart.js
DESCRIPTION: Creates a configurable line chart with multiple fill boundary options and interactive controls. Includes data generation functions, dataset configuration, and action handlers for switching between different fill modes and smoothing options. Demonstrates the usage of Chart.js fill boundaries including 'origin', 'start', and 'end' modes.

LANGUAGE: javascript
CODE:
// <block:setup:2>
const inputs = {
  min: -100,
  max: 100,
  count: 8,
  decimals: 2,
  continuity: 1
};

const generateLabels = () => {
  return Utils.months({count: inputs.count});
};

const generateData = () => (Utils.numbers(inputs));
// </block:setup>

// <block:data:0>
const data = {
  labels: generateLabels(),
  datasets: [
    {
      label: 'Dataset',
      data: generateData(),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red),
      fill: false
    }
  ]
};
// </block:data>

// <block:actions:3>
let smooth = false;

const actions = [
  {
    name: 'Fill: false (default)',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.fill = false;
      });
      chart.update();
    }
  },
  {
    name: 'Fill: origin',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.fill = 'origin';
      });
      chart.update();
    }
  },
  {
    name: 'Fill: start',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.fill = 'start';
      });
      chart.update();
    }
  },
  {
    name: 'Fill: end',
    handler: (chart) => {
      chart.data.datasets.forEach(dataset => {
        dataset.fill = 'end';
      });
      chart.update();
    }
  },
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = generateData();
      });
      chart.update();
    }
  },
  {
    name: 'Smooth',
    handler(chart) {
      smooth = !smooth;
      chart.options.elements.line.tension = smooth ? 0.4 : 0;
      chart.update();
    }
  }
];
// </block:actions>

// <block:config:1>
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      filler: {
        propagate: false,
      },
      title: {
        display: true,
        text: (ctx) => 'Fill: ' + ctx.chart.data.datasets[0].fill
      }
    },
    interaction: {
      intersect: false,
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Disabling Animations in Chart.js
DESCRIPTION: Example showing how to disable animations in Chart.js charts to improve rendering performance and reduce CPU usage. Setting animation to false ensures the chart only renders once during updates.

LANGUAGE: javascript
CODE:
new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        animation: false
    }
});

----------------------------------------

TITLE: Configuring Linear Scale Min-Max in ChartJS
DESCRIPTION: Creates a line chart with two datasets and custom y-axis scale settings using suggestedMin and suggestedMax properties. The chart includes responsive behavior and displays multiple data points across 7 months with custom styling for each dataset.

LANGUAGE: javascript
CODE:
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: [10, 30, 39, 20, 25, 34, -10],
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.CHART_COLORS.red,
    },
    {
      label: 'Dataset 2',
      data: [18, 33, 22, 19, 11, 39, 30],
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.CHART_COLORS.blue,
    }
  ]
};

const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Suggested Min and Max Settings'
      }
    },
    scales: {
      y: {
        suggestedMin: 30,
        suggestedMax: 50,
      }
    }
  },
};

module.exports = {
  config: config,
};

----------------------------------------

TITLE: Disabling Global Plugins for Specific Chart Instances in Chart.js
DESCRIPTION: Shows how to disable a global plugin for a specific chart instance by setting the plugin options to false. Also demonstrates how to disable all plugins for a chart instance.

LANGUAGE: javascript
CODE:
Chart.register({
    id: 'p1',
    // ...
});

const chart = new Chart(ctx, {
    options: {
        plugins: {
            p1: false   // disable plugin 'p1' for this instance
        }
    }
});

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
    options: {
        plugins: false // all plugins are disabled for this instance
    }
});

----------------------------------------

TITLE: Registering Global Plugins in Chart.js
DESCRIPTION: Demonstrates how to register a plugin globally so that it applies to all chart instances. This is useful for applying consistent customizations across multiple charts.

LANGUAGE: javascript
CODE:
Chart.register({
    // plugin implementation
});

----------------------------------------

TITLE: Chart.js Progress Bar Implementation
DESCRIPTION: Configures a line chart with animation progress tracking and interactive data manipulation. Includes setup for two datasets with random data, animation callbacks to update progress bars, and utility functions for adding/removing data points and datasets.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const data = chart.data;
      const dsColor = Utils.namedColor(chart.data.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (data.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const data = chart.data;
      if (data.datasets.length > 0) {
        data.labels = Utils.months({count: data.labels.length + 1});

        for (let index = 0; index < data.datasets.length; ++index) {
          data.datasets[index].data.push(Utils.rand(-100, 100));
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.labels.splice(-1, 1); // remove the label first

      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
// </block:actions>

// <block:setup:1>
const initProgress = document.getElementById('initialProgress');
const progress = document.getElementById('animationProgress');

const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    animation: {
      duration: 2000,
      onProgress: function(context) {
        if (context.initial) {
          initProgress.value = context.currentStep / context.numSteps;
        } else {
          progress.value = context.currentStep / context.numSteps;
        }
      },
      onComplete: function(context) {
        if (context.initial) {
          console.log('Initial animation finished');
        } else {
          console.log('animation finished');
        }
      }
    },
    interaction: {
      mode: 'nearest',
      axis: 'x',
      intersect: false
    },
    plugins: {
      title: {
        display: true,
        text: 'Chart.js Line Chart - Animation Progress Bar'
      }
    },
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
  output: 'console.log output is displayed here'
};

----------------------------------------

TITLE: Implementing Image Background Plugin in Chart.js
DESCRIPTION: A custom Chart.js plugin that adds an image background to the canvas. The plugin loads an external image and centers it in the chart area. It handles both immediate and asynchronous image loading scenarios.

LANGUAGE: javascript
CODE:
const data = {
  labels: [
    'Red',
    'Blue',
    'Yellow'
  ],
  datasets: [{
    label: 'My First Dataset',
    data: [300, 50, 100],
    backgroundColor: [
      'rgb(255, 99, 132)',
      'rgb(54, 162, 235)',
      'rgb(255, 205, 86)'
    ],
    hoverOffset: 4
  }]
};

const image = new Image();
image.src = 'https://www.chartjs.org/img/chartjs-logo.svg';

const plugin = {
  id: 'customCanvasBackgroundImage',
  beforeDraw: (chart) => {
    if (image.complete) {
      const ctx = chart.ctx;
      const {top, left, width, height} = chart.chartArea;
      const x = left + width / 2 - image.width / 2;
      const y = top + height / 2 - image.height / 2;
      ctx.drawImage(image, x, y);
    } else {
      image.onload = () => chart.draw();
    }
  }
};

const config = {
  type: 'doughnut',
  data: data,
  plugins: [plugin],
};

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Destroying a Chart Instance in JavaScript
DESCRIPTION: Demonstrates how to destroy a specific chart instance using the destroy() method.

LANGUAGE: javascript
CODE:
myLineChart.destroy();

----------------------------------------

TITLE: Progress Bar HTML Elements
DESCRIPTION: HTML progress elements used to display animation progress for both initial and subsequent chart animations.

LANGUAGE: html
CODE:
<progress id="initialProgress" max="1" value="0" style="width: 100%"></progress>

<progress id="animationProgress" max="1" value="0" style="width: 100%"></progress>

----------------------------------------

TITLE: Scale Properties in Chart.js
DESCRIPTION: This code block outlines the properties given to scale instances during the fitting process in Chart.js. It includes positioning properties, dimensions, margins, and padding values.

LANGUAGE: javascript
CODE:
{
    left: number, // left edge of the scale bounding box
    right: number, // right edge of the bounding box
    top: number,
    bottom: number,
    width: number, // the same as right - left
    height: number, // the same as bottom - top

    // Margin on each side. Like css, this is outside the bounding box.
    margins: {
        left: number,
        right: number,
        top: number,
        bottom: number
    },

    // Amount of padding on the inside of the bounding box (like CSS)
    paddingLeft: number,
    paddingRight: number,
    paddingTop: number,
    paddingBottom: number
}

----------------------------------------

TITLE: Configuring Chart.js with Array of Arrays Data
DESCRIPTION: Shows how to set up a line chart using an array of arrays (tuples) for data points.

LANGUAGE: javascript
CODE:
const cfg = {
  type: 'line',
  data: {
    datasets: [{
      data: [[10, 20], [15, null], [20, 10]]
    }]
  }
}

----------------------------------------

TITLE: Importing Chart.js in JavaScript Bundlers
DESCRIPTION: This code shows how to import Chart.js in bundlers like Webpack or Rollup for quick start with all features available.

LANGUAGE: javascript
CODE:
import Chart from 'chart.js/auto';

----------------------------------------

TITLE: Configuring Chart.js with Primitive Array Data
DESCRIPTION: Demonstrates how to set up a bar chart using an array of primitive values for data and labels.

LANGUAGE: javascript
CODE:
const cfg = {
  type: 'bar',
  data: {
    datasets: [{
      data: [20, 10],
    }],
    labels: ['a', 'b']
  }
}

----------------------------------------

TITLE: Configuring Chart.js with Escaped Property Keys
DESCRIPTION: Shows how to use escaped property keys when the key contains a dot in a line chart configuration.

LANGUAGE: javascript
CODE:
const cfg = {
  type: 'line',
  data: {
    datasets: [{
      data: [{'data.key': 'one', 'data.value': 20}, {'data.key': 'two', 'data.value': 30}]
    }]
  },
  options: {
    parsing: {
      xAxisKey: 'data\\.key',
      yAxisKey: 'data\\.value'
    }
  }
}

----------------------------------------

TITLE: Loading Chart.js with Time Scale using RequireJS
DESCRIPTION: This example shows how to load Chart.js with a time scale using RequireJS, including the necessary date adapter and library.

LANGUAGE: javascript
CODE:
require(['chartjs'], function(Chart) {
    require(['moment'], function() {
        require(['chartjs-adapter-moment'], function() {
            new Chart(ctx, {...});
        });
    });
});

----------------------------------------

TITLE: Configuring Derived Bubble Chart in Chart.js
DESCRIPTION: Sets up data and configuration for a derived bubble chart type. Includes data generation with random values and chart styling options like colors and responsive behavior. Uses utility functions for color handling and bubble data generation.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100, rmin: 1, rmax: 20};
const data = {
  datasets: [
    {
      label: 'My First dataset',
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
      borderColor: Utils.CHART_COLORS.blue,
      borderWidth: 1,
      boxStrokeStyle: 'red',
      data: Utils.bubbles(NUMBER_CFG)
    }
  ],
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'derivedBubble',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Derived Chart Type'
      },
    }
  }
};

// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Chart.js Data Setup
DESCRIPTION: Initializes chart data with 7 data points using utility functions. Configures dataset with dynamic border color using the gradient generator.

LANGUAGE: javascript
CODE:
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const labels = Utils.months({count: 7});

const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: function(context) {
        const chart = context.chart;
        const {ctx, chartArea} = chart;

        if (!chartArea) {
          return;
        }
        return getGradient(ctx, chartArea);
      },
    },
  ]
};

----------------------------------------

TITLE: Generating Charts with Chart.js and Skia-Canvas in Node.js
DESCRIPTION: Creates a line chart using Chart.js and skia-canvas in Node.js environment. Demonstrates chart configuration, data plotting, and saving the result as a PNG file. Requires Chart.js and skia-canvas packages.

LANGUAGE: javascript
CODE:
import {CategoryScale, Chart, LinearScale, LineController, LineElement, PointElement} from 'chart.js';
import {Canvas} from 'skia-canvas';
import fsp from 'node:fs/promises';

Chart.register([
  CategoryScale,
  LineController,
  LineElement,
  LinearScale,
  PointElement
]);

const canvas = new Canvas(400, 300);
const chart = new Chart(
  canvas, // TypeScript needs "as any" here
  {
    type: 'line',
    data: {
      labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
      datasets: [{
        label: '# of Votes',
        data: [12, 19, 3, 5, 2, 3],
        borderColor: 'red'
      }]
    }
  }
);
const pngBuffer = await canvas.toBuffer('png', {matte: 'white'});
await fsp.writeFile('output.png', pngBuffer);
chart.destroy();

----------------------------------------

TITLE: Specifying Separate Top and Bottom Title Padding in Chart.js
DESCRIPTION: This example illustrates how to set different padding values for the top and bottom of a chart title in Chart.js. It demonstrates the use of the padding option within the title plugin configuration.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        plugins: {
            title: {
                display: true,
                text: 'Custom Chart Title',
                padding: {
                    top: 10,
                    bottom: 30
                }
            }
        }
    }
});

----------------------------------------

TITLE: Chart.js Bar Chart with Custom Time Scale
DESCRIPTION: Demonstrates creating a bar chart with custom time scale axis and explicit axis ID configuration.

LANGUAGE: javascript
CODE:
let chart = new Chart(ctx, {
  type: 'bar',
  data: {
    datasets: [{
      yAxisID: 'yAxis'
    }]
  },
  options: {
    scales: {
      xAxis: {
        type: 'time'
      }
    }
  }
});

----------------------------------------

TITLE: Setting up package.json for Chart.js Project
DESCRIPTION: Initial package.json configuration with Chart.js and Parcel dependencies

LANGUAGE: json
CODE:
{
  "name": "chartjs-example",
  "version": "1.0.0",
  "license": "MIT",
  "scripts": {
    "dev": "parcel src/index.html",
    "build": "parcel build src/index.html"
  },
  "devDependencies": {
    "parcel": "^2.6.2"
  },
  "dependencies": {
    "@cubejs-client/core": "^0.31.0",
    "chart.js": "^4.0.0"
  }
}

----------------------------------------

TITLE: Updating Single Scale in Chart.js
DESCRIPTION: Demonstrates how to update a specific scale by its ID, showing the minimal configuration needed to change a scale's type.

LANGUAGE: javascript
CODE:
function updateScale(chart) {
    chart.options.scales.y = {
        type: 'logarithmic'
    };
    chart.update();
}

----------------------------------------

TITLE: Chart.js Line Chart with Suggested Scale Range
DESCRIPTION: Demonstrates setting suggested minimum and maximum values for the y-axis scale while maintaining auto-fit behavior.

LANGUAGE: javascript
CODE:
let chart = new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            label: 'First dataset',
            data: [0, 20, 40, 50]
        }],
        labels: ['January', 'February', 'March', 'April']
    },
    options: {
        scales: {
            y: {
                suggestedMin: 50,
                suggestedMax: 100
            }
        }
    }
});

----------------------------------------

TITLE: Resetting Chart to Initial State in JavaScript
DESCRIPTION: Shows how to reset a chart to its state before the initial animation using the reset() method.

LANGUAGE: javascript
CODE:
myLineChart.reset();

----------------------------------------

TITLE: Setting Default Colors in Chart.js
DESCRIPTION: This snippet demonstrates how to reset the default colors for background, border, and font in Chart.js by updating the Chart.defaults object.

LANGUAGE: javascript
CODE:
Chart.defaults.backgroundColor = '#9BD0F5';
Chart.defaults.borderColor = '#36A2EB';
Chart.defaults.color = '#000';

----------------------------------------

TITLE: Getting Visible Dataset Count in JavaScript
DESCRIPTION: Shows how to get the number of visible datasets using getVisibleDatasetCount().

LANGUAGE: javascript
CODE:
const numberOfVisibleDatasets = chart.getVisibleDatasetCount();

----------------------------------------

TITLE: Resizing Chart Canvas in JavaScript
DESCRIPTION: Shows different ways to resize the chart canvas using the resize() method.

LANGUAGE: javascript
CODE:
// Resizes & redraws to fill its container element
myLineChart.resize();
// => returns 'this' for chainability

// With an explicit size:
myLineChart.resize(width, height);

----------------------------------------

TITLE: Configuring Centered Axes in Chart.js Scatter Plot
DESCRIPTION: Creates a scatter plot with configurable axis positioning using Chart.js. Includes three different positioning modes: default (edges), centered, and custom coordinate positioning. Uses two datasets with random points and demonstrates responsive chart configuration with customizable scales.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Default Positions',
    handler(chart) {
      chart.options.scales.x.position = 'bottom';
      chart.options.scales.y.position = 'left';
      chart.update();
    }
  },
  {
    name: 'Position: center',
    handler(chart) {
      chart.options.scales.x.position = 'center';
      chart.options.scales.y.position = 'center';
      chart.update();
    }
  },
  {
    name: 'Position: Vertical: x=-60, Horizontal: y=30',
    handler(chart) {
      chart.options.scales.x.position = {y: 30};
      chart.options.scales.y.position = {x: -60};
      chart.update();
    }
  },
];
// </block:actions>


// <block:setup:1>
const DATA_COUNT = 6;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.points(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.points(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'scatter',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Axis Center Positioning'
      }
    },
    scales: {
      x: {
        min: -100,
        max: 100,
      },
      y: {
        min: -100,
        max: 100,
      }
    }
  },
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Setting Up Chart Data for Stepped Line Chart in JavaScript
DESCRIPTION: This snippet defines the data structure for a stepped line chart using Chart.js. It includes labels for the x-axis and a dataset with random numerical values. The dataset is configured with a red border color and stepped line interpolation.

LANGUAGE: javascript
CODE:
const data = {
  labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6'],
  datasets: [
    {
      label: 'Dataset',
      data: Utils.numbers({count: 6, min: -100, max: 100}),
      borderColor: Utils.CHART_COLORS.red,
      fill: false,
      stepped: true,
    }
  ]
};

----------------------------------------

TITLE: Clearing Chart Canvas in JavaScript
DESCRIPTION: Demonstrates how to clear the chart canvas using the clear() method.

LANGUAGE: javascript
CODE:
// Will clear the canvas that myLineChart is drawn on
myLineChart.clear();
// => returns 'this' for chainability

----------------------------------------

TITLE: Configuring Stacked Linear and Category Chart with Chart.js
DESCRIPTION: This snippet sets up data and configuration for a Chart.js chart with both linear and category scales. It includes two datasets with different types of data and configures stacked scales with custom colors and labels.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: [10, 30, 50, 20, 25, 44, -10],
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.CHART_COLORS.red,
    },
    {
      label: 'Dataset 2',
      data: ['ON', 'ON', 'OFF', 'ON', 'OFF', 'OFF', 'ON'],
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.CHART_COLORS.blue,
      stepped: true,
      yAxisID: 'y2',
    }
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    responsive: true,
    plugins: {
      title: {
        display: true,
        text: 'Stacked scales',
      },
    },
    scales: {
      y: {
        type: 'linear',
        position: 'left',
        stack: 'demo',
        stackWeight: 2,
        border: {
          color: Utils.CHART_COLORS.red
        }
      },
      y2: {
        type: 'category',
        labels: ['ON', 'OFF'],
        offset: true,
        position: 'left',
        stack: 'demo',
        stackWeight: 1,
        border: {
          color: Utils.CHART_COLORS.blue
        }
      }
    }
  },
};
// </block:config>

module.exports = {
  config: config,
};

----------------------------------------

TITLE: Configuring ESM Package Type in package.json
DESCRIPTION: Configuration required in package.json to handle Chart.js as an ESM-only package. This setting enables ES module support in your project.

LANGUAGE: json
CODE:
{
  "type": "module"
}

----------------------------------------

TITLE: Converting Chart to Base64 Image in JavaScript
DESCRIPTION: Shows how to convert the current state of a chart to a base64 encoded image string.

LANGUAGE: javascript
CODE:
myLineChart.toBase64Image();
// => returns png data url of the image on the canvas

myLineChart.toBase64Image('image/jpeg', 1)
// => returns a jpeg data url in the highest quality of the canvas

----------------------------------------

TITLE: Using Chart.js Helper Functions with Bundlers
DESCRIPTION: This example demonstrates how to import and use Chart.js helper functions separately when using bundlers, specifically for converting events to data values.

LANGUAGE: javascript
CODE:
import Chart from 'chart.js/auto';
import { getRelativePosition } from 'chart.js/helpers';

const chart = new Chart(ctx, {
  type: 'line',
  data: data,
  options: {
    onClick: (e) => {
      const canvasPosition = getRelativePosition(e, chart);

      // Substitute the appropriate scale IDs
      const dataX = chart.scales.x.getValueForPixel(canvasPosition.x);
      const dataY = chart.scales.y.getValueForPixel(canvasPosition.y);
    }
  }
});

----------------------------------------

TITLE: Updating Chart with Specific Mode in JavaScript
DESCRIPTION: Demonstrates updating a chart with a specific mode for transition configuration.

LANGUAGE: javascript
CODE:
myChart.update('active');

----------------------------------------

TITLE: Getting Visible Dataset Metadata in JavaScript
DESCRIPTION: Shows how to retrieve metadata for visible datasets using getSortedVisibleDatasetMetas().

LANGUAGE: javascript
CODE:
const visibleMetas = chart.getSortedVisibleDatasetMetas();

----------------------------------------

TITLE: Custom Label Color Styling in Chart.js Tooltip
DESCRIPTION: Demonstrates how to customize tooltip label colors and styles including border color, background color, and border properties.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        plugins: {
            tooltip: {
                callbacks: {
                    labelColor: function(context) {
                        return {
                            borderColor: 'rgb(0, 0, 255)',
                            backgroundColor: 'rgb(255, 0, 0)',
                            borderWidth: 2,
                            borderDash: [2, 2],
                            borderRadius: 2,
                        };
                    },
                    labelTextColor: function(context) {
                        return '#543453';
                    }
                }
            }
        }
    }
});

----------------------------------------

TITLE: Using Image Patterns as Dataset Fill in Chart.js
DESCRIPTION: This example demonstrates how to use a CanvasPattern created from an image to fill a dataset in Chart.js.

LANGUAGE: javascript
CODE:
const img = new Image();
img.src = 'https://example.com/my_image.png';
img.onload = () => {
  const ctx = document.getElementById('canvas').getContext('2d');
  const fillPattern = ctx.createPattern(img, 'repeat');

  const chart = new Chart(ctx, {
    data: {
      labels: ['Item 1', 'Item 2', 'Item 3'],
      datasets: [{
        data: [10, 20, 30],
        backgroundColor: fillPattern
      }]
    }
  });
};

----------------------------------------

TITLE: Toggling Data Visibility in JavaScript
DESCRIPTION: Shows how to toggle the visibility of a data item across all datasets using toggleDataVisibility().

LANGUAGE: javascript
CODE:
chart.toggleDataVisibility(2); // toggles the item in all datasets, at index 2
chart.update(); // chart now renders with item hidden

----------------------------------------

TITLE: Configuring Chart.js Title Alignment
DESCRIPTION: Demonstrates how to create a line chart with configurable title alignment. The code includes action handlers to dynamically change title alignment between start, center, and end positions, along with basic chart setup including data generation and styling configuration.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Title Alignment: start',
    handler(chart) {
      chart.options.plugins.title.align = 'start';
      chart.update();
    }
  },
  {
    name: 'Title Alignment: center (default)',
    handler(chart) {
      chart.options.plugins.title.align = 'center';
      chart.update();
    }
  },
  {
    name: 'Title Alignment: end',
    handler(chart) {
      chart.options.plugins.title.align = 'end';
      chart.update();
    }
  },
];
// </block:actions>


// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Chart Title',
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Defining Data Structure for Radar Chart in Chart.js
DESCRIPTION: Demonstrates the proper data structure format for radar charts, including labels and dataset configuration.

LANGUAGE: javascript
CODE:
data: {
    labels: ['Running', 'Swimming', 'Eating', 'Cycling'],
    datasets: [{
        data: [20, 10, 4, 2]
    }]
}

----------------------------------------

TITLE: Showing Datasets or Data Elements in JavaScript
DESCRIPTION: Demonstrates how to show hidden datasets or specific data elements using the show() method.

LANGUAGE: javascript
CODE:
chart.show(1); // shows dataset at index 1 and does 'show' animation.
chart.show(0, 2); // shows the data element at index 2 of the first dataset.

----------------------------------------

TITLE: Extending Chart.Scale in JavaScript for Custom Axis Creation
DESCRIPTION: This snippet demonstrates how to create a custom scale by extending the Chart.Scale class. It shows the basic structure for defining a new scale, including setting an ID and default configuration.

LANGUAGE: javascript
CODE:
class MyScale extends Chart.Scale {
    /* extensions ... */
}
MyScale.id = 'myScale';
MyScale.defaults = defaultConfigObject;

// MyScale is now derived from Chart.Scale

----------------------------------------

TITLE: Generating Large Dataset for Chart.js
DESCRIPTION: Creates a large dataset of 100,000 points with timestamps and random values. Points are generated every 30 seconds with most values in range [0,20) and rare values in range [0,100).

LANGUAGE: javascript
CODE:
const NUM_POINTS = 100000;
Utils.srand(10);

const start = Utils.parseISODate('2021-04-01T00:00:00Z').toMillis();
const pointData = [];

for (let i = 0; i < NUM_POINTS; ++i) {
  const max = Math.random() < 0.001 ? 100 : 20;
  pointData.push({x: start + (i * 30000), y: Utils.rand(0, max)});
}

const data = {
  datasets: [{
    borderColor: Utils.CHART_COLORS.red,
    borderWidth: 1,
    data: pointData,
    label: 'Large Dataset',
    radius: 0,
  }]
};

----------------------------------------

TITLE: Dataset Controller Interface Definition
DESCRIPTION: Interface specification for Chart.js dataset controllers, including required properties and methods.

LANGUAGE: javascript
CODE:
{
    // Defaults for charts of this type
    defaults: {
        // If set to `false` or `null`, no dataset level element is created.
        // If set to a string, this is the type of element to create for the dataset.
        // For example, a line create needs to create a line element so this is the string 'line'
        datasetElementType: string | null | false,

        // If set to `false` or `null`, no elements are created for each data value.
        // If set to a string, this is the type of element to create for each data value.
        // For example, a line create needs to create a point element so this is the string 'point'
        dataElementType: string | null | false,
    }

    // ID of the controller
    id: string;

    // Update the elements in response to new data
    // @param mode : update mode, core calls this method using any of `'active'`, `'hide'`, `'reset'`, `'resize'`, `'show'` or `undefined`
    update: function(mode) {}
}

----------------------------------------

TITLE: Configuring Chart.js Legend Position and Alignment
DESCRIPTION: A complete Chart.js setup that demonstrates dynamic legend positioning and alignment. The code includes action handlers for changing legend position, data setup with random values, and chart configuration with customizable legend title options.

LANGUAGE: javascript
CODE:
const actions = [
  {
    name: 'Title Position: start',
    handler(chart) {
      chart.options.plugins.legend.align = 'start';
      chart.options.plugins.legend.title.position = 'start';
      chart.update();
    }
  },
  {
    name: 'Title Position: center (default)',
    handler(chart) {
      chart.options.plugins.legend.align = 'center';
      chart.options.plugins.legend.title.position = 'center';
      chart.update();
    }
  },
  {
    name: 'Title Position: end',
    handler(chart) {
      chart.options.plugins.legend.align = 'end';
      chart.options.plugins.legend.title.position = 'end';
      chart.update();
    }
  },
];

const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
  ]
};

const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      legend: {
        title: {
          display: true,
          text: 'Legend Title',
        }
      }
    }
  }
};

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Defining Interactive Actions for Chart.js Scatter Chart in JavaScript
DESCRIPTION: This snippet defines a set of interactive actions for manipulating the Chart.js scatter chart. It includes functions to randomize data, add/remove datasets, and add/remove data points. These actions can be used to dynamically update the chart's appearance and data.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.bubbles({count: DATA_COUNT, rmin: 1, rmax: 1, min: 0, max: 100});
      });
      chart.update();
    }
  },
  {
    name: 'Add Dataset',
    handler(chart) {
      const chartData = chart.data;
      const dsColor = Utils.namedColor(chartData.datasets.length);
      const newDataset = {
        label: 'Dataset ' + (chartData.datasets.length + 1),
        backgroundColor: Utils.transparentize(dsColor, 0.5),
        borderColor: dsColor,
        data: Utils.bubbles({count: DATA_COUNT, rmin: 1, rmax: 1, min: 0, max: 100}),
      };
      chart.data.datasets.push(newDataset);
      chart.update();
    }
  },
  {
    name: 'Add Data',
    handler(chart) {
      const chartData = chart.data;
      if (chartData.datasets.length > 0) {

        for (let index = 0; index < chartData.datasets.length; ++index) {
          chartData.datasets[index].data.push(Utils.bubbles({count: 1, rmin: 1, rmax: 1, min: 0, max: 100})[0]);
        }

        chart.update();
      }
    }
  },
  {
    name: 'Remove Dataset',
    handler(chart) {
      chart.data.datasets.pop();
      chart.update();
    }
  },
  {
    name: 'Remove Data',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data.pop();
      });

      chart.update();
    }
  }
];
// </block:actions>

----------------------------------------

TITLE: Installing Chart.js Development Dependencies with pnpm
DESCRIPTION: Command to install local development dependencies for Chart.js using pnpm package manager.

LANGUAGE: bash
CODE:
> pnpm install

----------------------------------------

TITLE: Customizing Ticks and Tick Marks in Chart.js
DESCRIPTION: This snippet illustrates how to customize ticks and tick marks in Chart.js. It sets the tick color to red and the tick label color to blue.

LANGUAGE: javascript
CODE:
const config = {
  type: 'line',
  data,
  options: {
    scales: {
      x: {
        grid: {
          tickColor: 'red'
        },
        ticks: {
          color: 'blue',
        }
      }
    }
  }
};

----------------------------------------

TITLE: Disabling Line Drawing in Chart.js
DESCRIPTION: Example of disabling line rendering to improve performance with large datasets by only drawing points, configurable per dataset or globally.

LANGUAGE: javascript
CODE:
new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            showLine: false // disable for a single dataset
        }]
    },
    options: {
        showLine: false // disable for all datasets
    }
});

----------------------------------------

TITLE: Chart.js Development Commands
DESCRIPTION: Available commands for building, testing, and linting Chart.js, including build distribution files, watch for changes, run tests, and perform code linting.

LANGUAGE: bash
CODE:
> pnpm run build             // build dist files in ./dist
> pnpm run autobuild         // build and watch for source changes
> pnpm run dev               // run tests and watch for source and test changes
> pnpm run lint              // perform code linting (ESLint, tsc)
> pnpm test                  // perform code linting and run unit tests with coverage

----------------------------------------

TITLE: Configuring Data Decimation Options in Chart.js
DESCRIPTION: Defines action handlers for toggling different decimation algorithms and settings. Includes options for no decimation, min-max decimation, and LTTB decimation with different sample sizes.

LANGUAGE: javascript
CODE:
const actions = [
  {
    name: 'No decimation (default)',
    handler(chart) {
      chart.options.plugins.decimation.enabled = false;
      chart.update();
    }
  },
  {
    name: 'min-max decimation',
    handler(chart) {
      chart.options.plugins.decimation.algorithm = 'min-max';
      chart.options.plugins.decimation.enabled = true;
      chart.update();
    },
  },
  {
    name: 'LTTB decimation (50 samples)',
    handler(chart) {
      chart.options.plugins.decimation.algorithm = 'lttb';
      chart.options.plugins.decimation.enabled = true;
      chart.options.plugins.decimation.samples = 50;
      chart.update();
    }
  },
  {
    name: 'LTTB decimation (500 samples)',
    handler(chart) {
      chart.options.plugins.decimation.algorithm = 'lttb';
      chart.options.plugins.decimation.enabled = true;
      chart.options.plugins.decimation.samples = 500;
      chart.update();
    }
  }
];

----------------------------------------

TITLE: Disabling Point Drawing in Chart.js
DESCRIPTION: Shows how to disable point rendering for better performance with large datasets by setting point radius to zero, configurable at multiple levels.

LANGUAGE: javascript
CODE:
new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            pointRadius: 0 // disable for a single dataset
        }]
    },
    options: {
        datasets: {
            line: {
                pointRadius: 0 // disable for all `'line'` datasets
            }
        },
        elements: {
            point: {
                radius: 0 // default to disabled in all datasets
            }
        }
    }
});

----------------------------------------

TITLE: Running Chart.js Documentation Server
DESCRIPTION: Command to start the local documentation server using Vuepress for development of Chart.js documentation.

LANGUAGE: bash
CODE:
> pnpm run docs:dev

----------------------------------------

TITLE: Configuring Ticks in Chart.js Radar Chart
DESCRIPTION: This snippet demonstrates how to customize the ticks of a radial axis in a Chart.js radar chart. It sets the color of the ticks to red.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    label: 'My First dataset',
    backgroundColor: 'rgba(54, 162, 235, 0.5)',
    borderColor: 'rgb(54, 162, 235)',
    borderWidth: 1,
    data: [10, 20, 30, 40, 50, 0, 5],
  }]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'radar',
  data,
  options: {
    scales: {
      r: {
        ticks: {
          color: 'red'
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Importing Chart.js in CommonJS Modules
DESCRIPTION: This snippet shows how to import Chart.js in CommonJS modules using dynamic import, as Chart.js is an ESM library.

LANGUAGE: javascript
CODE:
const { Chart } = await import('chart.js');

----------------------------------------

TITLE: Configuring Rollup for Chart.js Extension UMD Build
DESCRIPTION: This Rollup configuration maps Chart.js ESM imports to their UMD equivalents, ensuring compatibility between ESM and UMD builds. It specifically handles the conversion of chart.js helpers to the global Chart.helpers object.

LANGUAGE: javascript
CODE:
module.exports = {
  // ...
  output: {
    globals: {
      'chart.js': 'Chart',
      'chart.js/helpers': 'Chart.helpers'
    }
  }
};

----------------------------------------

TITLE: Adding and Styling Axis Title in Chart.js
DESCRIPTION: This example demonstrates how to add and style an axis title in Chart.js. It sets the title color to red, enables its display, and sets the text to 'Month'.

LANGUAGE: javascript
CODE:
const config = {
  type: 'line',
  data,
  options: {
    scales: {
      x: {
        title: {
          color: 'red',
          display: true,
          text: 'Month'
        }
      }
    }
  }
};

----------------------------------------

TITLE: Limiting Plugin Events in Chart.js
DESCRIPTION: Demonstrates how to limit events for specific plugins while maintaining default events for the chart.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
  type: 'line',
  data: data,
  options: {
    events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],
    plugins: {
      tooltip: {
        // Tooltip will only receive click events
        events: ['click']
      }
    }
  }
});

----------------------------------------

TITLE: Converting Chart Events to Data Values
DESCRIPTION: Example of converting click event coordinates to actual data values using Chart.js helper functions.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        onClick: (e) => {
            const canvasPosition = Chart.helpers.getRelativePosition(e, chart);

            // Substitute the appropriate scale IDs
            const dataX = chart.scales.x.getValueForPixel(canvasPosition.x);
            const dataY = chart.scales.y.getValueForPixel(canvasPosition.y);
        }
    }
});

----------------------------------------

TITLE: Configuring Chart.js Dataset Options
DESCRIPTION: Illustrates how to configure dataset-specific options globally and override them for individual datasets. Shows configuration of line visibility across multiple datasets.

LANGUAGE: javascript
CODE:
// Do not show lines for all datasets by default
Chart.defaults.datasets.line.showLine = false;

// This chart would show a line only for the third dataset
const chart = new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            data: [0, 0],
        }, {
            data: [0, 1]
        }, {
            data: [1, 0],
            showLine: true // overrides the `line` dataset default
        }, {
            type: 'scatter', // 'line' dataset default does not affect this dataset since it's a 'scatter'
            data: [1, 1]
        }]
    }
});

----------------------------------------

TITLE: Implementing Easing Function Changes for Chart.js Animation
DESCRIPTION: This snippet defines actions for changing the easing function of the chart animation. It includes a function to restart animations and an array of actions for different easing effects.

LANGUAGE: javascript
CODE:
function restartAnims(chart) {
  chart.stop();
  const meta0 = chart.getDatasetMeta(0);
  const meta1 = chart.getDatasetMeta(1);
  for (let i = 0; i < data.length; i++) {
    const ctx0 = meta0.controller.getContext(i);
    const ctx1 = meta1.controller.getContext(i);
    ctx0.xStarted = ctx0.yStarted = false;
    ctx1.xStarted = ctx1.yStarted = false;
  }
  chart.update();
}

const actions = [
  {
    name: 'easeOutQuad',
    handler(chart) {
      easing = helpers.easingEffects.easeOutQuad;
      restartAnims(chart);
    }
  },
  {
    name: 'easeOutCubic',
    handler(chart) {
      easing = helpers.easingEffects.easeOutCubic;
      restartAnims(chart);
    }
  },
  {
    name: 'easeOutQuart',
    handler(chart) {
      easing = helpers.easingEffects.easeOutQuart;
      restartAnims(chart);
    }
  },
  {
    name: 'easeOutQuint',
    handler(chart) {
      easing = helpers.easingEffects.easeOutQuint;
      restartAnims(chart);
    }
  },
  {
    name: 'easeInQuad',
    handler(chart) {
      easing = helpers.easingEffects.easeInQuad;
      restartAnims(chart);
    }
  },
  {
    name: 'easeInCubic',
    handler(chart) {
      easing = helpers.easingEffects.easeInCubic;
      restartAnims(chart);
    }
  },
  {
    name: 'easeInQuart',
    handler(chart) {
      easing = helpers.easingEffects.easeInQuart;
      restartAnims(chart);
    }
  },
  {
    name: 'easeInQuint',
    handler(chart) {
      easing = helpers.easingEffects.easeInQuint;
      restartAnims(chart);
    }
  },
];

----------------------------------------

TITLE: Configuring Chart.js with Specific Axis Labels
DESCRIPTION: Demonstrates how to create a Chart.js instance with category labels defined specifically for an axis using the scales configuration option.

LANGUAGE: javascript
CODE:
let chart = new Chart(ctx, {
    type: ...
    data: ...
    options: {
        scales: {
            x: {
                type: 'category',
                labels: ['January', 'February', 'March', 'April', 'May', 'June']
            }
        }
    }
});

----------------------------------------

TITLE: Configuring Radar Chart Scale Options in Chart.js
DESCRIPTION: Shows how to configure scale options for a radar chart, including angle lines display and suggested minimum and maximum values.

LANGUAGE: javascript
CODE:
options = {
    scales: {
        r: {
            angleLines: {
                display: false
            },
            suggestedMin: 50,
            suggestedMax: 100
        }
    }
};

----------------------------------------

TITLE: Configuring Delayed Animations in Chart.js
DESCRIPTION: Creates a stacked bar chart with three datasets and implements delayed animations. The animation delay is calculated based on data index and dataset index, creating a cascading effect. Includes randomization functionality and stacked axis configuration.

LANGUAGE: javascript
CODE:
// <block:actions:2>
const actions = [
  {
    name: 'Randomize',
    handler(chart) {
      chart.data.datasets.forEach(dataset => {
        dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});
      });
      chart.update();
    }
  },
];
// </block:actions>

// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.red,
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.blue,
    },
    {
      label: 'Dataset 3',
      data: Utils.numbers(NUMBER_CFG),
      backgroundColor: Utils.CHART_COLORS.green,
    },
  ]
};
// </block:setup>

// <block:config:0>
let delayed;
const config = {
  type: 'bar',
  data: data,
  options: {
    animation: {
      onComplete: () => {
        delayed = true;
      },
      delay: (context) => {
        let delay = 0;
        if (context.type === 'data' && context.mode === 'default' && !delayed) {
          delay = context.dataIndex * 300 + context.datasetIndex * 100;
        }
        return delay;
      },
    },
    scales: {
      x: {
        stacked: true,
      },
      y: {
        stacked: true
      }
    }
  }
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Setting Scale Min/Max Values in Chart.js
DESCRIPTION: Demonstrates how to specify explicit min and max values for scales to avoid range computation from data, improving performance for time and linear scales.

LANGUAGE: javascript
CODE:
new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        scales: {
            x: {
                type: 'time',
                min: new Date('2019-01-01').valueOf(),
                max: new Date('2019-12-31').valueOf()
            },
            y: {
                type: 'linear',
                min: 0,
                max: 100
            }
        }
    }
});

----------------------------------------

TITLE: Vertical Line Chart Configuration in Chart.js
DESCRIPTION: Creates a vertical line chart by setting the indexAxis to 'y', including custom colors and styling for each data point.

LANGUAGE: javascript
CODE:
const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [{
    axis: 'y',
    label: 'My First Dataset',
    data: [65, 59, 80, 81, 56, 55, 40],
    fill: false,
    backgroundColor: [
      'rgba(255, 99, 132, 0.2)',
      'rgba(255, 159, 64, 0.2)',
      'rgba(255, 205, 86, 0.2)',
      'rgba(75, 192, 192, 0.2)',
      'rgba(54, 162, 235, 0.2)',
      'rgba(153, 102, 255, 0.2)',
      'rgba(201, 203, 207, 0.2)'
    ],
    borderColor: [
      'rgb(255, 99, 132)',
      'rgb(255, 159, 64)',
      'rgb(255, 205, 86)',
      'rgb(75, 192, 192)',
      'rgb(54, 162, 235)',
      'rgb(153, 102, 255)',
      'rgb(201, 203, 207)'
    ],
    borderWidth: 1
  }]
};

const config = {
  type: 'line',
  data: data,
  options: {
    indexAxis: 'y',
    scales: {
      x: {
        beginAtZero: true
      }
    }
  }
};

module.exports = {
  actions: [],
  config: config,
};

----------------------------------------

TITLE: Custom Event Handling with Chart.js Plugin
DESCRIPTION: Shows how to capture events that don't fire over chartArea using a custom plugin implementation.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
  type: 'line',
  data: data,
  options: {},
  plugins: [{
    id: 'myEventCatcher',
    beforeEvent(chart, args, pluginOptions) {
      const event = args.event;
      if (event.type === 'mouseout') {
        // process the event
      }
    }
  }]
});

----------------------------------------

TITLE: Custom Legend Click Handler Implementation
DESCRIPTION: Shows how to implement a custom click handler for legend items that links the visibility of the first two datasets together.

LANGUAGE: javascript
CODE:
const defaultLegendClickHandler = Chart.defaults.plugins.legend.onClick;
const pieDoughnutLegendClickHandler = Chart.controllers.doughnut.overrides.plugins.legend.onClick;
const newLegendClickHandler = function (e, legendItem, legend) {
    const index = legendItem.datasetIndex;
    const type = legend.chart.config.type;

    if (index > 1) {
        // Do the original logic
        if (type === 'pie' || type === 'doughnut') {
            pieDoughnutLegendClickHandler(e, legendItem, legend)
        } else {
            defaultLegendClickHandler(e, legendItem, legend);
        }

    } else {
        let ci = legend.chart;
        [
            ci.getDatasetMeta(0),
            ci.getDatasetMeta(1)
        ].forEach(function(meta) {
            meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
        });
        ci.update();
    }
};

const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        plugins: {
            legend: {
                onClick: newLegendClickHandler
            }
        }
    }
});

----------------------------------------

TITLE: Data Structure Example - JavaScript Chart.js
DESCRIPTION: Example showing the basic data structure required for pie and doughnut charts, including dataset values and labels configuration.

LANGUAGE: javascript
CODE:
data = {
    datasets: [{
        data: [10, 20, 30]
    }],

    // These labels appear in the legend and in the tooltips when hovering different arcs
    labels: [
        'Red',
        'Yellow',
        'Blue'
    ]
};

----------------------------------------

TITLE: Configuring Tooltip Position Modes in ChartJS
DESCRIPTION: Complete setup of a line chart with configurable tooltip positions. Includes action handlers for switching between different position modes, data setup with two datasets, custom tooltip positioner implementation, and chart configuration.

LANGUAGE: javascript
CODE:
// <block:actions:3>
const actions = [
  {
    name: 'Position: average',
    handler(chart) {
      chart.options.plugins.tooltip.position = 'average';
      chart.update();
    }
  },
  {
    name: 'Position: nearest',
    handler(chart) {
      chart.options.plugins.tooltip.position = 'nearest';
      chart.update();
    }
  },
  {
    name: 'Position: bottom (custom)',
    handler(chart) {
      chart.options.plugins.tooltip.position = 'bottom';
      chart.update();
    }
  },
];
// </block:actions>

// <block:setup:2>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    },
  ]
};
// </block:setup>

// <block:positioner:1>
// Create a custom tooltip positioner to put at the bottom of the chart area
components.Tooltip.positioners.bottom = function(items) {
  const pos = components.Tooltip.positioners.average(items);

  // Happens when nothing is found
  if (pos === false) {
    return false;
  }

  const chart = this.chart;

  return {
    x: pos.x,
    y: chart.chartArea.bottom,
    xAlign: 'center',
    yAlign: 'bottom',
  };
};

// </block:positioner>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    interaction: {
      intersect: false,
      mode: 'index',
    },
    plugins: {
      title: {
        display: true,
        text: (ctx) => 'Tooltip position mode: ' + ctx.chart.options.plugins.tooltip.position,
      },
    }
  }
};
// </block:config>

module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Setting Global Bar Chart Border Width in Chart.js
DESCRIPTION: This snippet demonstrates how to set the border width for all bar charts globally using Chart.js defaults.

LANGUAGE: javascript
CODE:
Chart.defaults.elements.bar.borderWidth = 2;

----------------------------------------

TITLE: Horizontal Bar Chart Configuration - Chart.js
DESCRIPTION: Creates a horizontal bar chart by modifying the index axis orientation with customized styling and data points.

LANGUAGE: javascript
CODE:
const data = {
  labels: labels,
  datasets: [{
    axis: 'y',
    label: 'My First Dataset',
    data: [65, 59, 80, 81, 56, 55, 40],
    fill: false,
    backgroundColor: [
      'rgba(255, 99, 132, 0.2)',
      'rgba(255, 159, 64, 0.2)',
      'rgba(255, 205, 86, 0.2)',
      'rgba(75, 192, 192, 0.2)',
      'rgba(54, 162, 235, 0.2)',
      'rgba(153, 102, 255, 0.2)',
      'rgba(201, 203, 207, 0.2)'
    ],
    borderColor: [...],
    borderWidth: 1
  }]
};

const config = {
  type: 'bar',
  data,
  options: {
    indexAxis: 'y',
  }
};

----------------------------------------

TITLE: Declaring TypeScript Types for Chart.js Plugins
DESCRIPTION: Shows how to provide TypeScript typings for a custom plugin using declaration merging. This example adds typings for a canvas background color plugin.

LANGUAGE: typescript
CODE:
import {ChartType, Plugin} from 'chart.js';

declare module 'chart.js' {
  interface PluginOptionsByType<TType extends ChartType> {
    customCanvasBackgroundColor?: {
      color?: string
    }
  }
}

----------------------------------------

TITLE: Chart.js Gradient Generator
DESCRIPTION: Function to create and return a linear gradient based on chart dimensions. The gradient transitions between blue, yellow, and red colors. It recreates the gradient only when chart dimensions change.

LANGUAGE: javascript
CODE:
let width, height, gradient;
function getGradient(ctx, chartArea) {
  const chartWidth = chartArea.right - chartArea.left;
  const chartHeight = chartArea.bottom - chartArea.top;
  if (!gradient || width !== chartWidth || height !== chartHeight) {
    width = chartWidth;
    height = chartHeight;
    gradient = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);
    gradient.addColorStop(0, Utils.CHART_COLORS.blue);
    gradient.addColorStop(0.5, Utils.CHART_COLORS.yellow);
    gradient.addColorStop(1, Utils.CHART_COLORS.red);
  }

  return gradient;
}

----------------------------------------

TITLE: Example Dataset Configuration - Chart.js Bar Chart
DESCRIPTION: Shows basic dataset configuration for a bar chart including bar sizing parameters and data points.

LANGUAGE: javascript
CODE:
data: {
    datasets: [{
        barPercentage: 0.5,
        barThickness: 6,
        maxBarThickness: 8,
        minBarLength: 2,
        data: [10, 20, 30, 40, 50, 60, 70]
    }]
};

----------------------------------------

TITLE: Using Custom Scale in Chart.js Configuration
DESCRIPTION: This example demonstrates how to use a custom scale in a Chart.js configuration. It shows how to specify the custom scale type in the options object when creating a new chart instance.

LANGUAGE: javascript
CODE:
const lineChart = new Chart(ctx, {
    data: data,
    type: 'line',
    options: {
        scales: {
            y: {
                type: 'myScale' // this is the same id that was set on the scale
            }
        }
    }
});

----------------------------------------

TITLE: Chart.js Bar Chart with Custom Logarithmic Scale
DESCRIPTION: Creates a bar chart with custom logarithmic scale positioned on the right side using 'myScale' configuration.

LANGUAGE: javascript
CODE:
let chart = new Chart(ctx, {
  type: 'bar',
  data: {
    datasets: [{
      data: [1, 2, 3]
    }]
  },
  options: {
    scales: {
      myScale: {
        type: 'logarithmic',
        position: 'right'
      }
    }
  }
});

----------------------------------------

TITLE: Configuring Chart.js with Multiple Datasets and Custom Parsing
DESCRIPTION: Shows how to configure multiple datasets from a single data source using custom parsing for different properties in a bar chart.

LANGUAGE: javascript
CODE:
const data = [{x: 'Jan', net: 100, cogs: 50, gm: 50}, {x: 'Feb', net: 120, cogs: 55, gm: 75}];
const cfg = {
  type: 'bar',
  data: {
    labels: ['Jan', 'Feb'],
    datasets: [{
      label: 'Net sales',
      data: data,
      parsing: {
        yAxisKey: 'net'
      }
    }, {
      label: 'Cost of goods sold',
      data: data,
      parsing: {
        yAxisKey: 'cogs'
      }
    }, {
      label: 'Gross margin',
      data: data,
      parsing: {
        yAxisKey: 'gm'
      }
    }]
  },
};

----------------------------------------

TITLE: Advanced Chart Print Resize Handler
DESCRIPTION: Advanced implementation of print handlers using both beforeprint and afterprint events to ensure proper chart sizing during printing and viewing.

LANGUAGE: javascript
CODE:
window.addEventListener('beforeprint', () => {
  myChart.resize(600, 600);
});
window.addEventListener('afterprint', () => {
  myChart.resize();
});

----------------------------------------

TITLE: Importing Chart.js Components Reference
DESCRIPTION: Shows how chart components are imported and bundled for use in samples. These components are normally accessible via the Chart object when using Chart.js as a browser script.

LANGUAGE: javascript
CODE:
@/scripts/components.js

----------------------------------------

TITLE: Using TypeScript with Custom Data Structures in Chart.js
DESCRIPTION: Demonstrates how to use TypeScript with Chart.js when using a custom data structure, specifying the data type in the ChartData interface.

LANGUAGE: typescript
CODE:
import {ChartData} from 'chart.js';

const datasets: ChartData <'bar', {key: string, value: number} []> = {
  datasets: [{
    data: [{key: 'Sales', value: 20}, {key: 'Revenue', value: 10}],
    parsing: {
      xAxisKey: 'key',
      yAxisKey: 'value'
    }
  }],
};

----------------------------------------

TITLE: Exporting Chart.js Configuration and Actions
DESCRIPTION: This code exports the actions and configuration objects for use in other parts of the application or for Chart.js initialization.

LANGUAGE: javascript
CODE:
module.exports = {
  actions: actions,
  config: config,
};

----------------------------------------

TITLE: Defining Layout Options in Chart.js
DESCRIPTION: This snippet outlines the available layout options in Chart.js, including their types, default values, scriptability, and descriptions. It covers the 'autoPadding' and 'padding' properties within the 'options.layout' namespace.

LANGUAGE: markdown
CODE:
# Layout

Namespace: `options.layout`, the global options for the chart layout is defined in `Chart.defaults.layout`.

| Name | Type | Default | [Scriptable](../general/options.md#scriptable-options) | Description
| ---- | ---- | ------- | :----: | -----------
| `autoPadding` | `boolean` | `true` | No | Apply automatic padding so visible elements are completely drawn.
| `padding` | [`Padding`](../general/padding.md) | `0` | Yes | The padding to add inside the chart.

----------------------------------------

TITLE: Setting Min Value for Category Axis in Chart.js
DESCRIPTION: Shows how to configure a Chart.js instance with a minimum value for the category axis, limiting the display range of labels.

LANGUAGE: javascript
CODE:
let chart = new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            data: [10, 20, 30, 40, 50, 60]
        }],
        labels: ['January', 'February', 'March', 'April', 'May', 'June']
    },
    options: {
        scales: {
            x: {
                min: 'March'
            }
        }
    }
});

----------------------------------------

TITLE: Chart.js Radar Chart Initialization
DESCRIPTION: Creates a basic radar chart with default 'r' scale.

LANGUAGE: javascript
CODE:
let chart = new Chart(ctx, {
  type: 'radar'
});

----------------------------------------

TITLE: Implementing Custom Interaction Modes
DESCRIPTION: Demonstrates how to create and register custom interaction modes in Chart.js with TypeScript support.

LANGUAGE: javascript
CODE:
import { Interaction } from 'chart.js';
import { getRelativePosition } from 'chart.js/helpers';

Interaction.modes.myCustomMode = function(chart, e, options, useFinalPosition) {
  const position = getRelativePosition(e, chart);

  const items = [];
  Interaction.evaluateInteractionItems(chart, 'x', position, (element, datasetIndex, index) => {
    if (element.inXRange(position.x, useFinalPosition) && myCustomLogic(element)) {
      items.push({element, datasetIndex, index});
    }
  });
  return items;
};

LANGUAGE: typescript
CODE:
declare module 'chart.js' {
  interface InteractionModeMap {
    myCustomMode: InteractionModeFunction;
  }
}

----------------------------------------

TITLE: Updating Chart.js Scale Defaults
DESCRIPTION: Shows how to modify the default configuration for all linear scales by setting a minimum value of 0.

LANGUAGE: javascript
CODE:
Chart.defaults.scales.linear.min = 0;

----------------------------------------

TITLE: Accessing Dataset Metadata in JavaScript
DESCRIPTION: Demonstrates how to access metadata for a specific dataset using getDatasetMeta().

LANGUAGE: javascript
CODE:
const meta = myChart.getDatasetMeta(0);
const x = meta.data[0].x;

----------------------------------------

TITLE: Configuring Options for Chart.js Bubble Chart
DESCRIPTION: This snippet defines the configuration options for the bubble chart. It includes functions for colorizing bubbles based on their position and value, and sets various options for bubble appearance such as size, border width, and hover effects.

LANGUAGE: javascript
CODE:
// <block:options:0>
function channelValue(x, y, values) {
  return x < 0 && y < 0 ? values[0] : x < 0 ? values[1] : y < 0 ? values[2] : values[3];
}

function colorize(opaque, context) {
  const value = context.raw;
  const x = value.x / 100;
  const y = value.y / 100;
  const r = channelValue(x, y, [250, 150, 50, 0]);
  const g = channelValue(x, y, [0, 50, 150, 250]);
  const b = channelValue(x, y, [0, 150, 150, 250]);
  const a = opaque ? 1 : 0.5 * value.v / 1000;

  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
}

const config = {
  type: 'bubble',
  data: data,
  options: {
    aspectRatio: 1,
    plugins: {
      legend: false,
      tooltip: false,
    },
    elements: {
      point: {
        backgroundColor: colorize.bind(null, false),

        borderColor: colorize.bind(null, true),

        borderWidth: function(context) {
          return Math.min(Math.max(1, context.datasetIndex + 1), 8);
        },

        hoverBackgroundColor: 'transparent',

        hoverBorderColor: function(context) {
          return Utils.color(context.datasetIndex);
        },

        hoverBorderWidth: function(context) {
          return Math.round(8 * context.raw.v / 1000);
        },

        radius: function(context) {
          const size = context.chart.width;
          const base = Math.abs(context.raw.v) / 1000;
          return (size / 24) * base;
        }
      }
    }
  }
};
// </block:options>

module.exports = {
  actions,
  config,
};

----------------------------------------

TITLE: Migrating Scale Configuration
DESCRIPTION: Example of migrating scale configuration from Chart.js 2.x to 3.x syntax

LANGUAGE: javascript
CODE:
// Chart.js 2.x
options: {
  scales: {
    xAxes: [{
      id: 'x',
      type: 'time',
      display: true,
      title: {
        display: true,
        text: 'Date'
      },
      ticks: {
        major: {
          enabled: true
        },
        font: function(context) {
          if (context.tick && context.tick.major) {
            return {
              weight: 'bold',
              color: '#FF0000'
            };
          }
        }
      }
    }],
    yAxes: [{
      id: 'y',
      display: true,
      title: {
        display: true,
        text: 'value'
      }
    }]
  }
}

// Chart.js 3.x
options: {
  scales: {
    x: {
      type: 'time',
      display: true,
      title: {
        display: true,
        text: 'Date'
      },
      ticks: {
        major: {
          enabled: true
        },
        color: (context) => context.tick && context.tick.major && '#FF0000',
        font: function(context) {
          if (context.tick && context.tick.major) {
            return {
              weight: 'bold'
            };
          }
        }
      }
    },
    y: {
      display: true,
      title: {
        display: true,
        text: 'value'
      }
    }
  }
}

----------------------------------------

TITLE: Setting up Data for Chart.js Vertical Bar Chart
DESCRIPTION: This snippet initializes the data for the vertical bar chart. It sets up labels and datasets with random data points. The chart displays two datasets with different colors.

LANGUAGE: javascript
CODE:
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};

const labels = Utils.months({count: 7});
const data = {
  labels: labels,
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
    {
      label: 'Dataset 2',
      data: Utils.numbers(NUMBER_CFG),
      borderColor: Utils.CHART_COLORS.blue,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
    }
  ]
};

----------------------------------------

TITLE: Chart.js Radar Chart with Custom Scale
DESCRIPTION: Creates a radar chart with custom 'myScale' radial axis configuration.

LANGUAGE: javascript
CODE:
let chart = new Chart(ctx, {
  type: 'radar',
  scales: {
    myScale: {
      axis: 'r'
    }
  }
});

----------------------------------------

TITLE: Forcing Color Override in Chart.js Colors Plugin
DESCRIPTION: This snippet shows how to configure the Colors plugin to always color datasets, useful for dynamic datasets at runtime.

LANGUAGE: javascript
CODE:
const options = {
  plugins: {
    colors: {
      forceOverride: true
    }
  }
};

----------------------------------------

TITLE: Setting Display Format for Chart.js Time Scale
DESCRIPTION: This example shows how to set a custom display format for the 'quarter' unit in a Chart.js time scale. It uses the 'time.displayFormats' configuration to specify the format as 'MMM YYYY'.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        scales: {
            x: {
                type: 'time',
                time: {
                    displayFormats: {
                        quarter: 'MMM YYYY'
                    }
                }
            }
        }
    }
});

----------------------------------------

TITLE: Example of a Canvas with Inaccessible Fallback Content in HTML
DESCRIPTION: This example shows a canvas element with fallback content that is not accessible, as it only provides information about browser compatibility rather than meaningful alternative content.

LANGUAGE: html
CODE:
<canvas id="badCanvas2" width="400" height="100">Your browser does not support the canvas element.</canvas>

----------------------------------------

TITLE: Configuring Chart.js Line Chart with Title and Subtitle
DESCRIPTION: This code snippet demonstrates how to create a line chart using Chart.js, including configuration for data, chart type, and plugin options for title and subtitle. It showcases custom styling for the subtitle including color, font properties, and padding.

LANGUAGE: javascript
CODE:
// <block:setup:1>
const DATA_COUNT = 7;
const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};
const data = {
  labels: Utils.months({count: DATA_COUNT}),
  datasets: [
    {
      label: 'Dataset 1',
      data: Utils.numbers(NUMBER_CFG),
      fill: false,
      borderColor: Utils.CHART_COLORS.red,
      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
    },
  ]
};
// </block:setup>

// <block:config:0>
const config = {
  type: 'line',
  data: data,
  options: {
    plugins: {
      title: {
        display: true,
        text: 'Chart Title',
      },
      subtitle: {
        display: true,
        text: 'Chart Subtitle',
        color: 'blue',
        font: {
          size: 12,
          family: 'tahoma',
          weight: 'normal',
          style: 'italic'
        },
        padding: {
          bottom: 10
        }
      }
    }
  }
};
// </block:config>

module.exports = {
  config: config,
};

----------------------------------------

TITLE: Setting Step Size for Radial Axis Ticks in Chart.js
DESCRIPTION: This example shows how to configure the step size for ticks on a radial axis in Chart.js. It sets up a chart with a y-axis that creates ticks at intervals of 0.5 from 0 to 5.

LANGUAGE: javascript
CODE:
let options = {
    scales: {
        r: {
            max: 5,
            min: 0,
            ticks: {
                stepSize: 0.5
            }
        }
    }
};

----------------------------------------

TITLE: Configuring Time Unit for Chart.js Time Scale
DESCRIPTION: This snippet demonstrates how to create a Chart.js chart with a time scale that always displays units per month. It uses the 'time.unit' configuration option to force the time unit to 'month'.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        scales: {
            x: {
                type: 'time',
                time: {
                    unit: 'month'
                }
            }
        }
    }
});

----------------------------------------

TITLE: Configuring Time Series Axis in Chart.js
DESCRIPTION: Demonstrates how to initialize a Chart.js line chart with a time series x-axis scale. The configuration sets the x-axis type to 'timeseries' which ensures equidistant data point distribution.

LANGUAGE: javascript
CODE:
const chart = new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        scales: {
            x: {
                type: 'timeseries',
            }
        }
    }
});

----------------------------------------

TITLE: Web Worker Setup for Chart.js
DESCRIPTION: Example of setting up Chart.js rendering in a web worker using OffscreenCanvas for parallel processing. Shows main thread code for transferring canvas control to worker.

LANGUAGE: javascript
CODE:
const config = {};
const canvas = new HTMLCanvasElement();
const offscreenCanvas = canvas.transferControlToOffscreen();

const worker = new Worker('worker.js');
worker.postMessage({canvas: offscreenCanvas, config}, [offscreenCanvas]);