TITLE: Initializing Redis Client in Node.js/Browser
DESCRIPTION: Shows how to initialize Redis client in Node.js environments using environment variables or direct configuration. Includes alternative import path for Node.js v17 and earlier that need fetch polyfill.

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis"

const redis = new Redis({
  url: <UPSTASH_REDIS_REST_URL>,
  token: <UPSTASH_REDIS_REST_TOKEN>,
})

// or load directly from env
const redis = Redis.fromEnv()

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis/with-fetch";

----------------------------------------

TITLE: Implementing Leaderboard API with Cloudflare Workers
DESCRIPTION: This JavaScript code implements the leaderboard API using Cloudflare Workers. It includes functions for handling requests, getting the leaderboard, and adding scores, with edge caching for improved performance.

LANGUAGE: javascript
CODE:
addEventListener("fetch", (event) => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  if (request.method === "GET") {
    return getLeaderboard();
  } else if (request.method === "POST") {
    return addScore(request);
  } else {
    return new Response("Invalid Request!");
  }
}

async function getLeaderboard() {
  let url =
    "https://us1-full-bug-31874.upstash.io/zrevrange/scores/0/1000/WITHSCORES/?_token=" +
    TOKEN;
  let res = await fetch(new Request(url), {
    cf: {
      cacheTtl: 10,
      cacheEverything: true,
      cacheKey: url,
    },
  });
  return res;
}

async function addScore(request) {
  const { searchParams } = new URL(request.url);
  let player = searchParams.get("player");
  let score = searchParams.get("score");
  let url =
    "https://us1-full-bug-31874.upstash.io/zadd/scores/" +
    score +
    "/" +
    player +
    "?_token=" +
    TOKEN;
  let res = await fetch(url);
  return new Response(await res.text());
}

----------------------------------------

TITLE: Implementing Rate Limit Check with Protection
DESCRIPTION: Shows how to check rate limits while incorporating protection features. The code includes IP address, user agent, and country checks against deny lists.

LANGUAGE: tsx
CODE:
const { success, pending, reason, deniedValue } = ratelimit.limit("userId", {
  ip: "ip-address",
  userAgent: "user-agent",
  country: "country",
});

await pending; // await pending if you have analytics enabled

console.log(success, reason, deniedValue);
// prints: false, "denyList", "ip-address"

----------------------------------------

TITLE: Implementing FastAPI Application with Redis Caching
DESCRIPTION: Python code for a FastAPI application that fetches weather data and caches it in Redis. It includes Redis connection setup, API endpoint definition, and caching logic.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from upstash_redis import Redis
import requests
import os

app = FastAPI()

# Connect to Redis using environment variables
redis = Redis.from_env()

# Mock API endpoint for weather data
WEATHER_API_URL = "https://api.weatherapi.com/v1/current.json"
API_KEY = os.getenv("WEATHER_API_KEY")

@app.get("/weather/{city}")
def get_weather(city: str):
    cache_key = f"weather:{city}"
    
    # Check if the data exists in cache
    cached_data = redis.get(cache_key)
    if cached_data:
        return {"source": "cache", "data": cached_data}
    
    # Fetch data from external API
    response = requests.get(f"{WEATHER_API_URL}?key={API_KEY}&q={city}")
    weather_data = response.json()
    
    # Store the data in Redis cache with a 10-minute expiration
    redis.setex(cache_key, 600, weather_data)
    
    return {"source": "api", "data": weather_data}

----------------------------------------

TITLE: Implementing Flask Server with SocketIO and Upstash Redis for Chat Application
DESCRIPTION: This Python script sets up a Flask server with SocketIO for real-time communication, using Upstash Redis as the message queue. It includes handlers for WebSocket events and serves the chat interface.

LANGUAGE: python
CODE:
from flask import Flask, render_template
from flask_socketio import SocketIO
import os

# Initialize Flask app
app = Flask(__name__)
app.config["SECRET_KEY"] = os.getenv("SECRET_KEY", os.urandom(24))

# Set up Redis URL with TLS
redis_password = os.getenv('UPSTASH_REDIS_PASSWORD')
redis_host = os.getenv('UPSTASH_REDIS_HOST')
redis_port = int(os.getenv('UPSTASH_REDIS_PORT', 6379))
redis_url = f"rediss://:{redis_password}@{redis_host}:{redis_port}"

# Initialize SocketIO with Redis message queue
socketio = SocketIO(app, message_queue=redis_url, cors_allowed_origins="*")

# WebSocket handlers
@socketio.on("connect")
def handle_connect():
    print("Client connected.")

@socketio.on("disconnect")
def handle_disconnect():
    print("Client disconnected.")

@socketio.on("message")
def handle_message(data):
    """Handle incoming chat messages."""
    print(f"Message received: {data}")
    # Broadcast the message to all connected clients except the sender
    socketio.emit("message", data, include_self=False)

# Serve the chat HTML page
@app.route("/")
def index():
    return render_template("chat.html")  # Render the chat interface template

if __name__ == "__main__":
    socketio.run(app, debug=True, host="0.0.0.0", port=8000)

----------------------------------------

TITLE: Implementing Fixed Window Rate Limiting with Upstash Redis in TypeScript
DESCRIPTION: Creates a new rate limiter that allows 10 requests per 10 seconds using the Fixed Window algorithm. Shows implementation for both regional and multi-regional setups.

LANGUAGE: typescript
CODE:
const ratelimit = new Ratelimit({
  redis: Redis.fromEnv(),
  limiter: Ratelimit.fixedWindow(10, "10 s"),
});

LANGUAGE: typescript
CODE:
const ratelimit = new MultiRegionRatelimit({
  redis: [
    new Redis({
      /* auth */
    }),
    new Redis({
      /* auth */
    })
  ],
  limiter: MultiRegionRatelimit.fixedWindow(10, "10 s"),
});

----------------------------------------

TITLE: Implementing Rate-Limited AWS Lambda Function in JavaScript
DESCRIPTION: JavaScript code for the AWS Lambda function using Upstash Redis for rate limiting based on client IP address.

LANGUAGE: javascript
CODE:
const { Ratelimit } = require("@upstash/ratelimit");
const { Redis } = require("@upstash/redis");

const ratelimit = new Ratelimit({
  redis: Redis.fromEnv(),
  limiter: Ratelimit.slidingWindow(10, "10 s"),
  prefix: "@upstash/ratelimit",
  analytics: true,
});

exports.ratelimit = async (event) => {
  const identifier = event.requestContext.http.sourceIP;
  const { success, limit, remaining, pending } = await ratelimit.limit(
    identifier
  );
  const response = {
    success: success,
    limit: limit,
    remaining: remaining,
  };

  // pending is a promise for handling the analytics submission
  await pending;

  if (!success) {
    return {
      statusCode: 429,
      body: JSON.stringify(response),
    };
  }
  return {
    statusCode: 200,
    body: JSON.stringify(response),
  };
};

----------------------------------------

TITLE: Implementing Redis Counter in Next.js App Router
DESCRIPTION: Implementation of a simple counter using Upstash Redis in a Next.js page component. Demonstrates Redis connection setup and increment operation.

LANGUAGE: tsx
CODE:
import { Redis } from "@upstash/redis";

const redis = Redis.fromEnv();

export default async function Home() {
  const count = await redis.incr("counter");
  return (
    <div className="flex h-screen w-screen items-center justify-center">
      <h1 className="text-4xl font-bold">Counter: {count}</h1>
    </div>
  )
}

----------------------------------------

TITLE: Implementing Express Session with Redis Store
DESCRIPTION: Complete Express application setup that implements session management using Redis as the session store. Includes Redis client configuration, Express session middleware setup, and route handlers that demonstrate session usage by tracking page views.

LANGUAGE: javascript
CODE:
var express = require("express");
var parseurl = require("parseurl");
var session = require("express-session");
const redis = require("redis");

var RedisStore = require("connect-redis")(session);
var client = redis.createClient({
  // REPLACE HERE
});

var app = express();

app.use(
  session({
    store: new RedisStore({ client: client }),
    secret: "forest squirrel",
    resave: false,
    saveUninitialized: true,
  })
);

app.use(function (req, res, next) {
  if (!req.session.views) {
    req.session.views = {};
  }

  // get the url pathname
  var pathname = parseurl(req).pathname;

  // count the views
  req.session.views[pathname] = (req.session.views[pathname] || 0) + 1;
  next();
});

app.get("/foo", function (req, res, next) {
  res.send("you viewed this page " + req.session.views["/foo"] + " times");
});

app.get("/bar", function (req, res, next) {
  res.send("you viewed this page " + req.session.views["/bar"] + " times");
});

app.listen(3000, function () {
  console.log("Example app listening on port 3000!");
});

----------------------------------------

TITLE: Implementing Sliding Window Rate Limiting with Upstash Redis in TypeScript
DESCRIPTION: Creates a new rate limiter that allows 10 requests per 10 seconds using the Sliding Window algorithm. Shows implementation for both regional and multi-regional setups, with a warning about performance in multi-regional setup.

LANGUAGE: typescript
CODE:
const ratelimit = new Ratelimit({
  redis: Redis.fromEnv(),
  limiter: Ratelimit.slidingWindow(10, "10 s"),
});

LANGUAGE: typescript
CODE:
const ratelimit = new MultiRegionRatelimit({
  redis: [
    new Redis({
      /* auth */
    }),
    new Redis({
      /* auth */
    })
  ],
  limiter: MultiRegionRatelimit.slidingWindow(10, "10 s"),
});

----------------------------------------

TITLE: Initializing Upstash Redis Client with Credentials
DESCRIPTION: Examples of initializing both synchronous and asynchronous Redis clients using explicit credentials from the Upstash console.

LANGUAGE: python
CODE:
# for sync client
from upstash_redis import Redis

redis = Redis(url="UPSTASH_REDIS_REST_URL", token="UPSTASH_REDIS_REST_TOKEN")

# for async client
from upstash_redis.asyncio import Redis

redis = Redis(url="UPSTASH_REDIS_REST_URL", token="UPSTASH_REDIS_REST_TOKEN")

----------------------------------------

TITLE: Implementing Redis-based Autocomplete Handler in Node.js
DESCRIPTION: AWS Lambda handler function that implements autocomplete functionality using Redis sorted sets. It queries country names based on input prefix and returns matching results.

LANGUAGE: javascript
CODE:
var Redis = require("ioredis");
if (typeof client === "undefined") {
  var client = new Redis(process.env.REDIS_URL);
}
const headers = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Credentials": true,
};

module.exports.query = async (event, context, callback) => {
  if (!event.queryStringParameters || !event.queryStringParameters.term) {
    return {
      statusCode: 400,
      headers: headers,
      body: JSON.stringify({
        message: "Invalid parameters. Term needed as query param.",
      }),
    };
  }
  let term = event.queryStringParameters.term.toUpperCase();
  let res = [];
  let rank = await client.zrank("terms", term);
  if (rank != null) {
    let temp = await client.zrange("terms", rank, rank + 100);
    for (const el of temp) {
      if (!el.startsWith(term)) {
        break;
      }
      if (el.endsWith("*")) {
        res.push(el.substring(0, el.length - 1));
      }
    }
  }
  return {
    statusCode: 200,
    headers: headers,
    body: JSON.stringify({
      message: "Query:" + event.queryStringParameters.term,
      result: res,
    }),
  };
};

----------------------------------------

TITLE: Efficient Use of Auto-Pipelining with Promise.all in Upstash Redis (TypeScript)
DESCRIPTION: Demonstrates the recommended approach for using auto-pipelining efficiently with Promise.all. This method ensures that multiple commands are executed in a single PIPELINE call, improving performance.

LANGUAGE: typescript
CODE:
// makes a single PIPELINE call:
const [ foo, bar ] = await Promise.all([
  redis.get("foo"),
  redis.get("bar")
])

----------------------------------------

TITLE: Implementing Redis Counter in Google Cloud Functions
DESCRIPTION: Creates an HTTP-triggered Cloud Function that implements a counter using Upstash Redis. The function increments a counter value and returns it in the response. Uses the @upstash/redis client library with REST URL and token authentication.

LANGUAGE: javascript
CODE:
const { Redis } = require("@upstash/redis");
const functions = require('@google-cloud/functions-framework');

const redis = new Redis({
  url: process.env.UPSTASH_REDIS_REST_URL,
  token: process.env.UPSTASH_REDIS_REST_TOKEN
});

functions.http('counter', async (req, res) => {
  const count = await redis.incr("counter");
  res.send("Counter:" + count);
});

----------------------------------------

TITLE: Implementing Multiple Rate Limits in Upstash Redis
DESCRIPTION: Shows how to apply different rate limits to different user types (e.g., free and paid users). Separate Ratelimit instances are created with different configurations for each user type.

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis";
import { Ratelimit } from "@upstash/ratelimit";

const redis = Redis.fromEnv();

const ratelimit = {
  free: new Ratelimit({
    redis,
    analytics: true,
    prefix: "ratelimit:free",
    limiter: Ratelimit.slidingWindow(10, "10s"),
  }),
  paid: new Ratelimit({
    redis,
    analytics: true,
    prefix: "ratelimit:paid",
    limiter: Ratelimit.slidingWindow(60, "10s"),
  }),
};

await ratelimit.free.limit(ip);
// or for a paid user you might have an email or userId available:
await ratelimit.paid.limit(userId);

----------------------------------------

TITLE: Implementing Token Bucket Rate Limiting with Upstash Redis in TypeScript
DESCRIPTION: Creates a new token bucket that refills 5 tokens every 10 seconds and has a maximum size of 10. Only regional implementation is shown as multi-regional is not yet supported.

LANGUAGE: typescript
CODE:
const ratelimit = new Ratelimit({
  redis: Redis.fromEnv(),
  limiter: Ratelimit.tokenBucket(5, "10 s", 10),
  analytics: true,
});

----------------------------------------

TITLE: Flask Application with Upstash Redis Counter
DESCRIPTION: Main Flask application implementing a page visit counter using Upstash Redis. Creates a route that increments and displays a counter for each page visit.

LANGUAGE: python
CODE:
from flask import Flask
from upstash_redis import Redis

app = Flask(__name__)

redis = Redis.from_env()

@app.route('/')
def index():
    count = redis.incr('counter')
    return f'Page visited {count} times.'

if __name__ == '__main__':
    app.run(debug=True)

----------------------------------------

TITLE: Implementing Redis Transaction in TypeScript
DESCRIPTION: Example demonstrating how to create and execute a Redis transaction for atomic command execution. Transactions ensure all commands are executed sequentially without interruption from other clients.

LANGUAGE: typescript
CODE:
const tx = redis.multi();
tx.set("foo", "bar");
tx.get("foo");
const res = await tx.exec();

----------------------------------------

TITLE: Implementing Pipeline Operations with Upstash Redis in TypeScript
DESCRIPTION: This snippet demonstrates how to create, chain, and execute pipeline commands using the Upstash Redis client. It shows setting values, incrementing, and working with hash sets. The pipeline allows sending multiple commands in a single HTTP request, though execution is not atomic.

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis";

const redis = new Redis({
  /* auth */
});

const p = redis.pipeline();

// Now you can chain multiple commands to create your pipeline:

p.set("key", 2);
p.incr("key");

// or inline:
p.hset("key2", "field", { hello: "world" }).hvals("key2");

// Execute the pipeline once you are done building it:
// `exec` returns an array where each element represents the response of a command in the pipeline.
// You can optionally provide a type like this to get a typed response.
const res = await p.exec<[Type1, Type2, Type3]>();

----------------------------------------

TITLE: Configuring Upstash Redis as Laravel's Cache Driver
DESCRIPTION: Environment variables to set Upstash Redis as the caching driver for Laravel. It also includes a PHP code example of using Laravel's caching functions.

LANGUAGE: shell
CODE:
CACHE_STORE="redis"
REDIS_CACHE_DB="0"

LANGUAGE: php
CODE:
Cache::put('key', 'value', now()->addMinutes(10));
$value = Cache::get('key');

----------------------------------------

TITLE: Implementing Token Bucket Rate Limiting with Upstash Redis
DESCRIPTION: Implementation of Token Bucket rate limiting algorithm that manages a bucket of tokens refilling at a constant rate. This example configures a bucket with 10 maximum tokens, refilling 5 tokens every 10 seconds.

LANGUAGE: python
CODE:
from upstash_ratelimit import Ratelimit, TokenBucket
from upstash_redis import Redis

ratelimit = Ratelimit(
    redis=Redis.from_env(),
    limiter=TokenBucket(max_tokens=10, refill_rate=5, interval=10),
)

----------------------------------------

TITLE: Implementing URL Shortener with Redis in Python
DESCRIPTION: This Python script implements a URL shortener using Redis. It includes functions for generating short codes, shortening URLs with expiration times, and retrieving original URLs from short codes.

LANGUAGE: python
CODE:
import string
import random
from upstash_redis import Redis
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

# Redis connection
redis = Redis.from_env()

# Characters to generate the short URL from
CHARS = string.ascii_letters + string.digits
BASE_URL = "https://short.url/"

# Function to generate a random string for the short URL
def generate_short_code(length=6):
    return ''.join(random.choices(CHARS, k=length))

# Function to shorten the URL with an expiration time
def shorten_url(url, expiration=3600):
    # Generate a random short code
    short_code = generate_short_code()
    # Save the short code in Redis
    redis.set(short_code, url, ex=expiration)
    return BASE_URL + short_code

# Function to get the original URL from the short URL
def get_original_url(short_code):
    return redis.get(short_code)

# Example usage
if __name__ == "__main__":
    original_url = "https://example.com/my-very-long-url"

    # Shorten the URL
    short_url = shorten_url(original_url, expiration=600)
    print(f"Shortened URL: {short_url}")

    # Get the original URL
    original_url = get_original_url(short_url.split("/")[-1])

    if original_url:
        print(f"Original URL: {original_url}")
    else:
        print("Short URL expired or not found")

----------------------------------------

TITLE: FastAPI Session Management Implementation
DESCRIPTION: Main application code implementing session management with login, profile, and logout endpoints using FastAPI and Upstash Redis with sliding session expiration.

LANGUAGE: python
CODE:
from fastapi import FastAPI, Response, Cookie, HTTPException
from pydantic import BaseModel
from upstash_redis import Redis
from dotenv import load_dotenv
import uuid

# Load environment variables
load_dotenv()
redis = Redis.from_env()

app = FastAPI()

SESSION_TIMEOUT_SECONDS = 900  # 15 minutes

# Define the request body model for login
class LoginRequest(BaseModel):
    username: str

@app.post("/login/")
async def login(request: LoginRequest, response: Response):
    session_id = str(uuid.uuid4())
    redis.hset(f"session:{session_id}", values={"user": request.username, "status": "active"})
    redis.expire(f"session:{session_id}", SESSION_TIMEOUT_SECONDS)

    response.set_cookie(key="session_id", value=session_id, httponly=True)
    return {"message": "Logged in successfully", "session_id": session_id}


@app.get("/profile/")
async def get_profile(session_id: str = Cookie(None)):
    if not session_id:
        raise HTTPException(status_code=403, detail="No session cookie found")

    session_data = redis.hgetall(f"session:{session_id}")
    if not session_data:
        response = Response()
        response.delete_cookie(key="session_id") # Clear the expired cookie
        raise HTTPException(status_code=404, detail="Session expired")

    # Update the session expiration time (sliding expiration)
    redis.expire(f"session:{session_id}", SESSION_TIMEOUT_SECONDS)

    return {"session_id": session_id, "session_data": session_data}


@app.post("/logout/")
async def logout(response: Response, session_id: str = Cookie(None)):
    if session_id:
        redis.delete(f"session:{session_id}")
        response.delete_cookie(key="session_id")
    return {"message": "Logged out successfully"}

----------------------------------------

TITLE: Implementing Redis-based Greeting Function in Cloudflare Worker
DESCRIPTION: This TypeScript code snippet shows the implementation of a Cloudflare Worker function that uses Upstash Redis to retrieve location-based greetings. It checks the user's country from the request headers and fetches the corresponding greeting from Redis.

LANGUAGE: typescript
CODE:
import { Redis } from '@upstash/redis/cloudflare';

type RedisEnv = {
	UPSTASH_REDIS_REST_URL: string;
	UPSTASH_REDIS_REST_TOKEN: string;
};

export default {
	async fetch(request: Request, env: RedisEnv) {
		const redis = Redis.fromEnv(env);

		const country = request.headers.get('cf-ipcountry');
		if (country) {
			const greeting = await redis.get<string>(country);
			if (greeting) {
				return new Response(greeting);
			}
		}

		return new Response('Hello!');
	},
};

----------------------------------------

TITLE: Initializing Upstash Redis Client from Environment Variables
DESCRIPTION: Examples of initializing both synchronous and asynchronous Redis clients using credentials loaded from environment variables.

LANGUAGE: python
CODE:
# for sync use
from upstash_redis import Redis
redis = Redis.from_env()

# for async use
from upstash_redis.asyncio import Redis
redis = Redis.from_env()

----------------------------------------

TITLE: Implementing Redis View Counter in Deno Deploy
DESCRIPTION: TypeScript code that creates an HTTP server using Deno's serve function and implements a view counter using Upstash Redis. The server increments a counter for each non-favicon request and returns the current count as JSON.

LANGUAGE: typescript
CODE:
import { serve } from "https://deno.land/std@0.142.0/http/server.ts";
import { Redis } from "https://deno.land/x/upstash_redis@v1.14.0/mod.ts";

serve(async (_req: Request) => {
  if (!_req.url.endsWith("favicon.ico")) {
    const redis = new Redis({
      url: "UPSTASH_REDIS_REST_URL",
      token: "UPSTASH_REDIS_REST_TOKEN",
    });

    const counter = await redis.incr("deno-counter");
    return new Response(JSON.stringify({ counter }), { status: 200 });
  }
});

----------------------------------------

TITLE: Implementing Redis Counter in Django View
DESCRIPTION: Create a Django view that increments a Redis counter on each page visit. This uses the Upstash Redis client to interact with the Redis database.

LANGUAGE: python
CODE:
from django.http import HttpResponse
from upstash_redis import Redis

redis = Redis.from_env()

def index(request):
    count = redis.incr('counter')
    return HttpResponse(f'Page visited {count} times.')

----------------------------------------

TITLE: Initializing Redisson Client with Upstash Redis
DESCRIPTION: Example code showing how to configure and use Redisson client with Upstash Redis, including connection setup and basic map operations. Supports both standard and SSL connections.

LANGUAGE: typescript
CODE:
public class Main {

    public static void main(String[] args) {
        Config config = new Config();
        config.useSingleServer().setPassword("YOUR_PASSWORD")
                // use "rediss://" for SSL connection
                .setAddress("YOUR_ENDPOINT");
        RedissonClient redisson = Redisson.create(config);
        RMap<String, String> map = redisson.getMap("map");
        map.put("foo", "bar");
        System.out.println(map.get("foo"));
    }
}

----------------------------------------

TITLE: Auto IP Deny List Implementation
DESCRIPTION: Demonstrates the setup for automatic IP blocking using open-source IP deny lists. Includes initialization with protection enabled.

LANGUAGE: ts
CODE:
const ratelimit = new Ratelimit({
  redis: Redis.fromEnv(),
  limiter: Ratelimit.slidingWindow(10, "10 s"),
  enableProtection: true,
});

----------------------------------------

TITLE: Initializing Ratelimit with Protection
DESCRIPTION: Configures a new Ratelimit instance with protection enabled using a sliding window algorithm. The configuration includes Redis connection, rate limit settings, and protection features.

LANGUAGE: tsx
CODE:
const ratelimit = new Ratelimit({
  redis: Redis.fromEnv(),
  limiter: Ratelimit.slidingWindow(10, "10 s"),
  enableProtection: true
  analytics: true,
});

----------------------------------------

TITLE: Basic Redis Operations with Upstash Client
DESCRIPTION: Demonstrates common Redis operations including string operations, sorted sets, lists, hashes, and sets using the Upstash Redis client. Shows connection setup and various data type manipulations.

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis"

const redis = new Redis({
  url: <UPSTASH_REDIS_REST_URL>,
  token: <UPSTASH_REDIS_REST_TOKEN>,
})

// string
await redis.set('key', 'value');
let data = await redis.get('key');
console.log(data)

await redis.set('key2', 'value2', {ex: 1});

// sorted set
await redis.zadd('scores', { score: 1, member: 'team1' })
data = await redis.zrange('scores', 0, 100 )
console.log(data)

// list
await redis.lpush('elements', 'magnesium')
data = await redis.lrange('elements', 0, 100 )
console.log(data)

// hash
await redis.hset('people', {name: 'joe'})
data = await redis.hget('people', 'name' )
console.log(data)

// sets
await redis.sadd('animals', 'cat')
data  = await redis.spop('animals', 1)
console.log(data)

----------------------------------------

TITLE: Setting Multiple Keys with MSET in Upstash Redis (TypeScript)
DESCRIPTION: This example demonstrates how to use the MSET command to set multiple keys with different value types in a single operation. It sets three keys: 'key1' with a number value, 'key2' with a string value, and 'key3' with an object value.

LANGUAGE: typescript
CODE:
await redis.mset({
    key1: 1,
    key2: "hello",
    key3: { a: 1, b: "hello" },
});

----------------------------------------

TITLE: Limiting Requests with Ratelimit in TypeScript
DESCRIPTION: The limit method is the core of the Ratelimit algorithm. It takes an identifier and optional request parameters, returning a Promise with rate limiting metadata.

LANGUAGE: typescript
CODE:
ratelimit.limit(
  identifier: string,
  req?: {
    geo?: Geo;
    rate?: number,
    ip?: string,
    userAgent?: string,
    country?: string
  },
): Promise<RatelimitResponse>

----------------------------------------

TITLE: Creating Dockerfile for Node.js Application
DESCRIPTION: Dockerfile configuration for containerizing the Node.js application, including dependency installation and startup command.

LANGUAGE: dockerfile
CODE:
# Use the official lightweight Node.js 12 image.
# https://hub.docker.com/_/node
FROM node:12-slim

# Create and change to the app directory.
WORKDIR /usr/src/app

# Copy application dependency manifests to the container image.
# A wildcard is used to ensure both package.json AND package-lock.json are copied.
# Copying this separately prevents re-running npm install on every code change.
COPY package*.json ./

# Install dependencies.
RUN npm install

# Copy local code to the container image.
COPY . ./

# Run the web service on container startup.
CMD [ "npm", "start" ]

----------------------------------------

TITLE: Executing SET Command via Upstash Redis REST API
DESCRIPTION: This snippet demonstrates how to execute a SET command using the Upstash Redis REST API with curl. It sets the key 'foo' to the value 'bar' and includes the required authorization header.

LANGUAGE: shell
CODE:
curl https://us1-merry-cat-32748.upstash.io/set/foo/bar \
 -H "Authorization: Bearer 2553feg6a2d9842h2a0gcdb5f8efe9934"

----------------------------------------

TITLE: Implementing Rate Limiting in FastAPI with Upstash Redis
DESCRIPTION: Python code demonstrating the implementation of rate limiting in a FastAPI application using Upstash Redis. It includes setting up the FastAPI app, initializing Redis client, creating a rate limiter, and defining an API endpoint with rate limiting.

LANGUAGE: python
CODE:
from fastapi import FastAPI, HTTPException
from upstash_ratelimit import Ratelimit, FixedWindow
from upstash_redis import Redis
from dotenv import load_dotenv
import requests

# Load environment variables from .env file
load_dotenv()

# Initialize the FastAPI app
app = FastAPI()

# Initialize Redis client
redis = Redis.from_env()

# Create a rate limiter that allows 10 requests per 10 seconds
ratelimit = Ratelimit(
    redis=redis,
    limiter=FixedWindow(max_requests=10, window=10),  # 10 requests per 10 seconds
    prefix="@upstash/ratelimit"
)

@app.get("/expensive_calculation")
def expensive_calculation():
    identifier = "api"  # Common identifier for rate limiting all users equally
    response = ratelimit.limit(identifier)

    if not response.allowed:
        raise HTTPException(status_code=429, detail="Rate limit exceeded. Please try again later.")
    
    # Placeholder for a resource-intensive operation
    result = do_expensive_calculation()
    return {"message": "Here is your result", "result": result}

# Simulated function for an expensive calculation
def do_expensive_calculation():
    return "Expensive calculation result"

# Test function to check rate limiting
def test_rate_limiting():
    url = "http://127.0.0.1:8000/expensive_calculation"
    success_count = 0
    fail_count = 0

    # Attempt 15 requests in quick succession
    for i in range(15):
        response = requests.get(url)
        
        if response.status_code == 200:
            success_count += 1
            print(f"Request {i+1}: Success - {response.json()['message']}")
        elif response.status_code == 429:
            fail_count += 1
            print(f"Request {i+1}: Failed - Rate limit exceeded")

        # Small delay to avoid flooding

    print("\nTest Summary:")
    print(f"Total Successful Requests: {success_count}")
    print(f"Total Failed Requests due to Rate Limit: {fail_count}")

if __name__ == "__main__":
    # Run the FastAPI app in a separate thread or terminal with:
    # uvicorn main:app --reload

    # To test rate limiting after the server is running
    test_rate_limiting()

----------------------------------------

TITLE: Test Script for Session Management
DESCRIPTION: Python script to test the session management implementation including login, profile access, and logout functionality.

LANGUAGE: python
CODE:
import requests

base_url = "http://127.0.0.1:8000"

# Test login
response = requests.post(f"{base_url}/login/", json={"username": "abdullah"})
print("Login Response:", response.json())

# In the browser, you don't need to set cookies manually. The browser will handle it automatically.
session_cookie = response.cookies.get("session_id")

# Test profile
profile_response = requests.get(f"{base_url}/profile/", cookies={"session_id": session_cookie})
print("Access Profile Response:", profile_response.json())

# Test logout
logout_response = requests.post(f"{base_url}/logout/", cookies={"session_id": session_cookie})
print("Logout Response:", logout_response.json())

# Test profile after logout
profile_after_logout_response = requests.get(f"{base_url}/profile/", cookies={"session_id": session_cookie})
print("Access Profile After Logout Response:", profile_after_logout_response.text)

----------------------------------------

TITLE: Using Upstash Redis Client for Synchronous Operations
DESCRIPTION: Example of using the synchronous Redis client to set and get a value. This demonstrates basic Redis operations in a non-async context.

LANGUAGE: python
CODE:
from upstash_redis import Redis

redis = Redis.from_env()

def main():
  redis.set("a", "b")
  print(redis.get("a"))

----------------------------------------

TITLE: Implementing Express App with Redis Session Management
DESCRIPTION: JavaScript code for creating an Express app that uses Redis for session management, including route handlers for different paths.

LANGUAGE: javascript
CODE:
var express = require("express");
var parseurl = require("parseurl");
var session = require("express-session");
const redis = require("redis");

var RedisStore = require("connect-redis")(session);
var client = redis.createClient({
  // REPLACE HERE
});

var app = express();

app.use(
  session({
    store: new RedisStore({ client: client }),
    secret: "forest squirrel",
    resave: false,
    saveUninitialized: true,
  })
);

app.use(function (req, res, next) {
  if (!req.session.views) {
    req.session.views = {};
  }

  // get the url pathname
  var pathname = parseurl(req).pathname;

  // count the views
  req.session.views[pathname] = (req.session.views[pathname] || 0) + 1;
  next();
});

app.get("/", function (req, res, next) {
  res.send("you viewed this page " + req.session.views["/"] + " times");
});

app.get("/foo", function (req, res, next) {
  res.send("you viewed this page " + req.session.views["/foo"] + " times");
});

app.get("/bar", function (req, res, next) {
  res.send("you viewed this page " + req.session.views["/bar"] + " times");
});

app.listen(8080, function () {
  console.log("Example app listening on port 8080!");
});

----------------------------------------

TITLE: Using Upstash Redis Client for Asynchronous Operations
DESCRIPTION: Example of using the asynchronous Redis client to set and get a value. This demonstrates basic Redis operations in an async context.

LANGUAGE: python
CODE:
from upstash_redis.asyncio import Redis

redis = Redis.from_env()

async def main():
  await redis.set("a", "b")
  print(await redis.get("a"))

----------------------------------------

TITLE: Implementing Redis Transactions
DESCRIPTION: Shows how to use Redis transactions for atomic command execution, ensuring no other commands interfere during the transaction execution.

LANGUAGE: python
CODE:
pipeline = redis.multi()

pipeline.set("foo", 1)
pipeline.incr("foo")
pipeline.get("foo")

result = pipeline.exec()

print(result)
# prints [True, 2, '2']

----------------------------------------

TITLE: Implementing Upstash Redis in Cloudflare Worker (JavaScript)
DESCRIPTION: This JavaScript code snippet shows how to use Upstash Redis in a Cloudflare Worker. It demonstrates connecting to Redis and incrementing a counter.

LANGUAGE: javascript
CODE:
import { Redis } from "@upstash/redis/cloudflare";

export default {
  async fetch(request, env, ctx) {
    const redis = Redis.fromEnv(env);

    const count = await redis.incr("counter");

    return new Response(JSON.stringify({ count }));
  },
};

----------------------------------------

TITLE: Setting Multiple Key-Value Pairs with MSET in Upstash Redis (Python)
DESCRIPTION: This code snippet demonstrates how to use the MSET command to set multiple key-value pairs in a single operation. The method takes a dictionary as an argument, where keys are the Redis keys and values are the corresponding values to be set.

LANGUAGE: python
CODE:
redis.mset({
  "key1": "value1",
  "key2": "value2"
})

----------------------------------------

TITLE: Setting JSON Values in Upstash Redis using TypeScript
DESCRIPTION: Basic example of setting a JSON value at a specific path in a key using Upstash Redis. The command requires a key, path, and value parameter.

LANGUAGE: typescript
CODE:
redis.json.set(key, "$.path", value);

----------------------------------------

TITLE: Node.js Consumer Application for Task Queue
DESCRIPTION: Consumer application that processes events from the Bull queue. Continuously monitors the queue for new employee registration events.

LANGUAGE: javascript
CODE:
var Queue = require("bull");

var settings = {
  stalledInterval: 300000, // How often check for stalled jobs (use 0 for never checking).
  guardInterval: 5000, // Poll interval for delayed jobs and added jobs.
  drainDelay: 300, // A timeout for when the queue is in drained state (empty waiting for jobs).
};

var taskQueue = new Queue(
  "employee registration",
  {
    redis: {
      port: 32016,
      host: "us1-upward-ant-32016.upstash.io",
      password: "ake4ff120d6b4216df220736be7eab087",
      tls: {},
    },
  },
  settings
);

taskQueue
  .process(function (job, done) {
    console.log(job.data);
    // TODO process the new employee event
    done();
  })
  .catch((err) => {
    console.log(err);
  });

----------------------------------------

TITLE: Implementing Page View Counter with Google Cloud Functions and Upstash Redis
DESCRIPTION: This code snippet demonstrates how to create a Google Cloud Function that increments a counter in Redis and returns the current count. It uses the ioredis client to connect to an Upstash Redis database.

LANGUAGE: javascript
CODE:
var Redis = require("ioredis");

if (typeof client === "undefined") {
  var client = new Redis("rediss://:YOUR_PASSWORD@YOUR_ENDPOINT:YOUR_PORT");
}

exports.helloGET = async (req, res) => {
  let count = await client.incr("counter");
  res.send("Page view:" + count);
};

----------------------------------------

TITLE: Implementing AWS Lambda Function with Upstash Redis Connection
DESCRIPTION: Node.js code for an AWS Lambda function that connects to Upstash Redis, sets a key-value pair, and retrieves the value. It uses the ioredis client to interact with the database.

LANGUAGE: javascript
CODE:
var Redis = require("ioredis");

if (typeof client === "undefined") {
  var client = new Redis("rediss://:YOUR_PASSWORD@YOUR_ENDPOINT:YOUR_PORT");
}
exports.handler = async (event) => {
  await client.set("foo", "bar");
  let result = await client.get("foo");
  let response = {
    statusCode: 200,
    body: JSON.stringify({
      result: result,
    }),
  };
  return response;
};

----------------------------------------

TITLE: Enabling Auto-Pipelining in Upstash Redis Client (TypeScript)
DESCRIPTION: Demonstrates how to enable auto-pipelining when creating a Redis client using both Redis.fromEnv() and new Redis() methods. It requires setting the enableAutoPipelining option to true.

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis";

const redis = Redis.fromEnv({
  latencyLogging: false,
  enableAutoPipelining: true
});

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis";

const redis = new Redis({
  url: <UPSTASH_REDIS_REST_URL>,
  token: <UPSTASH_REDIS_REST_TOKEN>,
  enableAutoPipelining: true
})

----------------------------------------

TITLE: Adding Start Script to package.json
DESCRIPTION: JSON snippet to add the start script to the package.json file for running the application.

LANGUAGE: json
CODE:
"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node index"
  }

----------------------------------------

TITLE: Using Custom Rates in Upstash Redis Rate Limiting
DESCRIPTION: Demonstrates how to use custom rates when calling the limit method. This allows for subtracting different amounts from the available tokens based on the request, useful for handling batch inputs.

LANGUAGE: typescript
CODE:
const { success } = await ratelimit.limit("identifier", { rate: batchSize });

----------------------------------------

TITLE: Implementing Main Page Functionality for Roadmap Voting App in JavaScript
DESCRIPTION: This code snippet shows the core functionality of the main page in the roadmap voting application. It includes methods for refreshing data, voting on features, adding new features, and handling email subscriptions.

LANGUAGE: javascript
CODE:
import Head from 'next/head'
import { ToastContainer, toast } from 'react-toastify';
import * as React from "react";

class Home extends React.Component {
    ...
    refreshData() {
        fetch("api/list")
            .then(res => res.json())
            .then(
                (result) => {
                    this.setState({
                        isLoaded: true,
                        items: result.body
                    });
                    this.inputNewFeature.current.value = "";
                },
                (error) => {
                    this.setState({
                        isLoaded: true,
                        error
                    });
                }
            )
    }

    vote(event, title) {
        const requestOptions = {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({"title": title})
        };
        console.log(requestOptions);
        fetch('api/vote', requestOptions)
            .then(response => response.json()).then(data => {
                console.log(data)
                if(data.error) {
                    toast.error(data.error, {hideProgressBar: true, autoClose: 3000});
                } else {
                    this.refreshData()
                }
        })
    }

    handleNewFeature(event) {
        const requestOptions = {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({"title": this.inputNewFeature.current.value})
        };
        fetch('api/create', requestOptions)
            .then(response => response.json()).then(data => {
            if(data.error) {
                toast.error(data.error, {hideProgressBar: true, autoClose: 5000});
            } else {
                toast.info("Your feature has been added to the list.", {hideProgressBar: true, autoClose: 3000});
                this.refreshData()
            }
        });
        event.preventDefault();
    }

    handleNewEmail(event) {
        const requestOptions = {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({"email": this.inputEmail.current.value})
        };
        console.log(requestOptions);
        fetch('api/addemail', requestOptions)
            .then(response => response.json()).then(data => {
            if(data.error) {
                toast.error(data.error, {hideProgressBar: true, autoClose: 3000});
            } else {
                toast.info("Your email has been added to the list.", {hideProgressBar: true, autoClose: 3000});
                this.refreshData()
            }
        });
        event.preventDefault();
    }
}
export default Home;

----------------------------------------

TITLE: Database Initialization Script for Redis Autocomplete
DESCRIPTION: Script to populate Redis sorted set with country names and their prefixes for autocomplete functionality. Each country name is stored with all possible prefixes.

LANGUAGE: javascript
CODE:
require('dotenv').config()
var Redis = require("ioredis");

var countries = [
    {"name": "Afghanistan", "code": "AF"},
    {"name": "Åland Islands", "code": "AX"},
    {"name": "Albania", "code": "AL"},
    {"name": "Algeria", "code": "DZ"},
    ...
]
var client = new Redis(process.env.REDIS_URL);

for (const country of countries) {
    let term = country.name.toUpperCase();
    let terms = [];

    for (let i = 1; i < term.length; i++) {
        terms.push(0);
        terms.push(term.substring(0, i));
    }
    terms.push(0);
    terms.push(term + "*");
    (async () => {
        await client.zadd("terms", ...terms)
    })();
}

----------------------------------------

TITLE: Implementing List API for Roadmap Voting App in JavaScript
DESCRIPTION: This API connects to Redis and fetches feature requests ordered by their scores (votes) from the Sorted Set 'roadmap'. It uses the ioredis library to interact with Redis.

LANGUAGE: javascript
CODE:
import { fixUrl } from "./utils";
import Redis from "ioredis";

module.exports = async (req, res) => {
  let redis = new Redis(fixUrl(process.env.REDIS_URL));
  let n = await redis.zrevrange("roadmap", 0, 100, "WITHSCORES");
  let result = [];
  for (let i = 0; i < n.length - 1; i += 2) {
    let item = {};
    item["title"] = n[i];
    item["score"] = n[i + 1];
    result.push(item);
  }

  redis.quit();

  res.json({
    body: result,
  });
};

----------------------------------------

TITLE: Retrieving All Fields from a Hash Using HGETALL in Upstash Redis (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the HGETALL command in Upstash Redis to retrieve all fields from a hash. It first sets a hash using HSET, then retrieves all fields using HGETALL. The result is an object containing all fields and their values from the hash.

LANGUAGE: typescript
CODE:
await redis.hset("key", {
  field1: "value1",
  field2: "value2",
  });
const hash = await redis.hgetall("key");
console.log(hash); // { field1: "value1", field2: "value2" }

----------------------------------------

TITLE: Creating a FastAPI Application with Upstash Redis Integration
DESCRIPTION: Set up a FastAPI application that uses Upstash Redis. This snippet includes initializing the FastAPI app, creating a Redis client, and defining a route that increments a counter in Redis.

LANGUAGE: python
CODE:
from fastapi import FastAPI

from upstash_redis import Redis

app = FastAPI()

redis = Redis.from_env()

@app.get("/")
def read_root():
    count = redis.incr('counter')
    return {"count": count}

----------------------------------------

TITLE: Implementing Stateful Page View Counter with Node.js and Redis
DESCRIPTION: This Node.js script creates a simple HTTP server that increments a counter in Redis for each page view. It uses the ioredis library to interact with Redis and expects a REDIS_URL environment variable for the connection string.

LANGUAGE: javascript
CODE:
var Redis = require("ioredis");
const http = require("http");

if (typeof client === "undefined") {
  var client = new Redis(process.env.REDIS_URL);
}

const requestListener = async function (req, res) {
  if (req.url !== "/favicon.ico") {
    let count = await client.incr("counter");
    res.writeHead(200);
    res.end("Page view:" + count);
  }
};

const server = http.createServer(requestListener);
server.listen(8080);

----------------------------------------

TITLE: AWS Lambda Producer Function for Task Queue
DESCRIPTION: Producer function that creates a Bull queue instance and adds new employee registration events to the queue. Uses Upstash Redis as the queue backend.

LANGUAGE: javascript
CODE:
var Queue = require("bull");

var settings = {
  stalledInterval: 300000, // How often check for stalled jobs (use 0 for never checking).
  guardInterval: 5000, // Poll interval for delayed jobs and added jobs.
  drainDelay: 300, // A timeout for when the queue is in drained state (empty waiting for jobs).
};

module.exports.hello = async (event) => {
  var taskQueue = new Queue(
    "employee registration",
    {
      redis: {
        port: 32016,
        host: "us1-upward-ant-32016.upstash.io",
        password: "ake4ff120d6b4216df220736be7eab087",
        tls: {},
      },
    },
    settings
  );
  await taskQueue.add({ event: event });

  // TODO save the employee record to a database
  return { message: "New employee event enqueued! 34", event };
};

----------------------------------------

TITLE: Initializing Redis Client in Cloudflare Workers
DESCRIPTION: Demonstrates Redis client initialization in Cloudflare Workers environment, supporting both service worker and module worker formats with environment variable configuration.

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis/cloudflare"

const redis = new Redis({
  url: <UPSTASH_REDIS_REST_URL>,
  token: <UPSTASH_REDIS_REST_TOKEN>,
})


// or load directly from global env

// service worker
const redis = Redis.fromEnv()


// module worker
export default {
  async fetch(request: Request, env: Bindings) {
    const redis = Redis.fromEnv(env)
    // ...
  }
}

----------------------------------------

TITLE: Implementing Counter Function with Upstash Redis
DESCRIPTION: TypeScript code for the Lambda function that increments a counter in Redis and returns the current count.

LANGUAGE: typescript
CODE:
import { Redis } from '@upstash/redis';

const redis = Redis.fromEnv();

export const handler = async function() {
    const count = await redis.incr("counter");
    return {
        statusCode: 200,
        body: JSON.stringify('Counter: ' + count),
    };
};

----------------------------------------

TITLE: Building and Deploying Java Lambda
DESCRIPTION: Commands to build the Java project with Maven and deploy it using Serverless Framework

LANGUAGE: shell
CODE:
mvn clean install

LANGUAGE: shell
CODE:
serverless deploy

----------------------------------------

TITLE: Using Auto-Pipelining for Async Requests in Upstash Redis (TypeScript)
DESCRIPTION: Illustrates how to use auto-pipelining for async requests and batching. It shows how multiple Redis commands are automatically executed as a single pipeline when awaited.

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis";

const redis = Redis.fromEnv({
  latencyLogging: false,
  enableAutoPipelining: true
});

// async call to redis. Not executed right away, instead
// added to the pipeline
redis.hincrby("Brooklyn", "visited", 1);

// making requests in batches
const brooklynInfo = Promise.all([
  redis.hget("Brooklyn", "coordinates"),
  redis.hget("Brooklyn", "population")
]);

// when we call await, the three commands are executed
// as a pipeline automatically. A single PIPELINE command
// is executed instead of three requests and the results
// are returned:
const [ coordinates, population ] = await brooklynInfo;

----------------------------------------

TITLE: Implementing Redis counter logic in Supabase Function
DESCRIPTION: This TypeScript code implements the main logic for the Redis counter function. It increments a counter for each region, retrieves all counters, and returns the results as JSON.

LANGUAGE: typescript
CODE:
import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { Redis } from "https://deno.land/x/upstash_redis@v1.19.3/mod.ts";
console.log(`Function "upstash-redis-counter" up and running!`);
serve(async (_req) => {
  try {
    const redis = new Redis({
      url: Deno.env.get("UPSTASH_REDIS_REST_URL")!,
      token: Deno.env.get("UPSTASH_REDIS_REST_TOKEN")!,
    });
    const deno_region = Deno.env.get("DENO_REGION");
    if (deno_region) {
      // Increment region counter
      await redis.hincrby("supa-edge-counter", deno_region, 1);
    } else {
      // Increment localhost counter
      await redis.hincrby("supa-edge-counter", "localhost", 1);
    }
    // Get all values
    const counterHash: Record<string, number> | null = await redis.hgetall(
      "supa-edge-counter"
    );
    const counters = Object.entries(counterHash!)
      .sort(([, a], [, b]) => b - a) // sort desc
      .reduce(
        (r, [k, v]) => ({
          total: r.total + v,
          regions: { ...r.regions, [k]: v },
        }),
        {
          total: 0,
          regions: {},
        }
      );
    return new Response(JSON.stringify({ counters }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      status: 200,
    });
  }
});

----------------------------------------

TITLE: Initializing CDK Project with TypeScript
DESCRIPTION: Commands to create a new directory, initialize a CDK project with TypeScript, and install the Upstash Redis client.

LANGUAGE: shell
CODE:
mkdir counter-cdk && cd counter-cdk

LANGUAGE: shell
CODE:
cdk init app --language typescript

LANGUAGE: shell
CODE:
npm install @upstash/redis

----------------------------------------

TITLE: Configuring Redis Connection
DESCRIPTION: Example of manually configuring Redis connection parameters instead of using environment variables.

LANGUAGE: typescript
CODE:
new Redis({
  url: "https://****.upstash.io",
  token: "********",
});

----------------------------------------

TITLE: Counting Database Keys with DBSIZE in TypeScript for Upstash Redis
DESCRIPTION: This code snippet demonstrates how to use the DBSIZE command with Upstash Redis in TypeScript. It retrieves the total number of keys in the database and logs the result. The command takes no arguments and returns an integer representing the key count.

LANGUAGE: typescript
CODE:
const keys = await redis.dbsize();
console.log(keys) // 20

----------------------------------------

TITLE: Creating API Directory - Shell Command
DESCRIPTION: Command to create the api directory under lib folder for Lambda function code.

LANGUAGE: shell
CODE:
mkdir lib/api

----------------------------------------

TITLE: Executing PING Command with Upstash Redis in TypeScript
DESCRIPTION: Demonstrates how to send a PING command to a Redis server using Upstash Redis client. The command returns 'PONG' if the server is alive and responsive. This is commonly used for health checks and connection testing.

LANGUAGE: typescript
CODE:
const response = await redis.ping();
console.log(response); // "PONG"

----------------------------------------

TITLE: Implementing Coin List Display with GraphQL Query
DESCRIPTION: Main component implementation in index.js that queries and displays cryptocurrency data using Apollo Client and GraphQL, including loading states and UI rendering

LANGUAGE: javascript
CODE:
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { gql, useQuery } from "@apollo/client";
import React from "react";

const GET_COIN_LIST = gql`
  query {
    redisLRange(key: "coins", start: 0, stop: 6)
  }
`;

export default function Home() {
  let coins = [];
  const { loading, error, data } = useQuery(GET_COIN_LIST);

  if (!loading && !error) {
    for (let x of data.redisLRange) {
      let dd = JSON.parse(x);
      coins.push(dd);
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h3 className={styles.title}>Coin Price List</h3>

        <div className={styles.grid}>
          <table className={styles.coins}>
            <tbody>
              {!loading ? (
                coins.map((item, ind) => (
                  <tr key={ind}>
                    <td>
                      <img src={item.image} width="25" />
                    </td>
                    <td>{item.name}</td>
                    <td className={styles.price}>${item.price}</td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td>
                    <img src="/loader.gif" />
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </main>

      <footer className={styles.footer}>
        <p className={styles.description}>
          <a href="https://docs.upstash.com"> Click for the tutorial </a>
        </p>
      </footer>
    </div>
  );

----------------------------------------

TITLE: Initializing Redis Client with Environment Variables in Vercel
DESCRIPTION: Creates a Redis client instance using environment variables set through Vercel integration. Demonstrates basic set and get operations using the @upstash/redis package.

LANGUAGE: typescript
CODE:
const { Redis } = require("@upstash/redis");

module.exports = async (req, res) => {
  /**
   * Redis.fromEnv() will read the following from environment variables:
   * - UPSTASH_REDIS_REST_URL
   * - UPSTASH_REDIS_REST_TOKEN
   */
  const redis = Redis.fromEnv();
  await redis.set("foo", "bar");
  const bar = await redis.get("foo");

  res.json({
    body: `foo: ${bar}`,
  });
};

----------------------------------------

TITLE: Configuring and Using BullMQ with Upstash Redis
DESCRIPTION: This code snippet demonstrates how to create a BullMQ queue using Upstash Redis as the backend, and add jobs to the queue. It includes connection configuration for Upstash Redis.

LANGUAGE: javascript
CODE:
import { Queue } from 'bullmq';

const myQueue = new Queue('foo', { connection: {
        host: "UPSTASH_REDIS_ENDPOINT",
        port: 6379,
        password: "UPSTASH_REDIS_PASSWORD",
        tls: {}
    }});

async function addJobs() {
    await myQueue.add('myJobName', { foo: 'bar' });
    await myQueue.add('myJobName', { qux: 'baz' });
}

await addJobs();

----------------------------------------

TITLE: Implementing Transaction Operations with Upstash Redis in TypeScript
DESCRIPTION: This snippet shows how to create and execute transaction commands using the Upstash Redis client. Transactions ensure atomic execution of multiple commands, unlike pipelines. The example includes setting values, incrementing, and working with hash sets.

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis";

const redis = new Redis({
  /* auth */
});

const p = redis.multi();

p.set("key", 2);
p.incr("key");

// or inline:
p.hset("key2", "field", { hello: "world" }).hvals("key2");

// execute the transaction
const res = await p.exec<[Type1, Type2, Type3]>();

----------------------------------------

TITLE: Removing Single Element from List using LPOP - Python
DESCRIPTION: Demonstrates pushing multiple elements to a list and then removing the first element using LPOP. The operation returns and removes the first element 'one' from the list.

LANGUAGE: python
CODE:
redis.rpush("mylist", "one", "two", "three")

assert redis.lpop("mylist") == "one"

----------------------------------------

TITLE: Setting a Key with Expiration in Upstash Redis using TypeScript
DESCRIPTION: This example shows how to set a key-value pair with an expiration time of 60 seconds in Upstash Redis using TypeScript. It uses the 'ex' option to specify the expiration time.

LANGUAGE: typescript
CODE:
await redis.set("my-key", {my: "value"}, {
  ex: 60
});

----------------------------------------

TITLE: Querying JSON Value Type in TypeScript using upstash-redis
DESCRIPTION: This snippet demonstrates how to use the json.type method to retrieve the type of a JSON value at a specific path within a JSON entry. It requires an initialized redis client and returns the type of the value or null if it doesn't exist.

LANGUAGE: typescript
CODE:
const myType = await redis.json.type("key", "$.path.to.value");

----------------------------------------

TITLE: Implementing Add Email API for Roadmap Voting App in JavaScript
DESCRIPTION: This API adds the user's email to a Redis Set. It checks if the input is a valid email before adding it to the set, which ensures uniqueness of email addresses.

LANGUAGE: javascript
CODE:
import Redis from "ioredis";
import { fixUrl } from "./utils";

module.exports = async (req, res) => {
  let redis = new Redis(fixUrl(process.env.REDIS_URL));

  const body = req.body;
  const email = body["email"];

  redis.on("error", function (err) {
    throw err;
  });

  if (email && validateEmail(email)) {
    await redis.sadd("emails", email);
    redis.quit();
    res.json({
      body: "success",
    });
  } else {
    redis.quit();
    res.json({
      error: "Invalid email",
    });
  }
};

function validateEmail(email) {
  const re =
    /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(String(email).toLowerCase());
}

----------------------------------------

TITLE: Initializing CDK Project - Shell Command
DESCRIPTION: Command to initialize a new CDK project using TypeScript as the infrastructure language.

LANGUAGE: shell
CODE:
cdk init app --language typescript

----------------------------------------

TITLE: Initializing Redis Client with Environment Variables
DESCRIPTION: TypeScript example demonstrating how to initialize the Redis client using environment variables for credentials, with automatic loading of UPSTASH_REDIS_REST_URL and UPSTASH_REDIS_REST_TOKEN.

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis";

const redis = Redis.fromEnv()(async () => {
  try {
    const data = await redis.get("key");
    console.log(data);
  } catch (error) {
    console.error(error);
  }
})();

----------------------------------------

TITLE: Scanning Redis Database Keys with TypeScript
DESCRIPTION: Demonstrates how to scan Redis database keys using cursor-based iteration. The command returns a tuple containing the new cursor position and an array of matching keys. Supports optional pattern matching, count limiting, and type filtering.

LANGUAGE: typescript
CODE:
const [newCursor, keys] = await redis.scan(0, {match: "*"});

----------------------------------------

TITLE: Setting a Value at Specific Index in Redis List using TypeScript
DESCRIPTION: This snippet demonstrates how to use the LSET command in Redis to set a value at a specific index in a list. It first pushes elements to a list using LPUSH, then uses LSET to modify an element at index 1.

LANGUAGE: typescript
CODE:
await redis.lpush("key", "a", "b", "c"); 
await redis.lset("key", 1, "d"); 

// list is now ["a", "d", "c"]

----------------------------------------

TITLE: Serverless Framework Configuration
DESCRIPTION: YAML configuration for Serverless Framework defining the service, runtime, environment variables, and function endpoints.

LANGUAGE: yaml
CODE:
service: counter-serverless

provider:
  name: aws
  runtime: nodejs20.x
  environment:
    UPSTASH_REDIS_REST_URL: ${env:UPSTASH_REDIS_REST_URL}
    UPSTASH_REDIS_REST_TOKEN: ${env:UPSTASH_REDIS_REST_TOKEN}

functions:
  counter:
    handler: handler.counter
    events:
      - httpApi:
          path: /
          method: get

----------------------------------------

TITLE: Querying Redis Stream Entries with XRANGE in Python
DESCRIPTION: Example showing how to use the XRANGE command to retrieve all entries from a Redis stream between minimum ('-') and maximum ('+') IDs. The response returns a dictionary of stream entries where each key is a stream ID and the value contains the entry's field-value pairs.

LANGUAGE: python
CODE:
entries = redis.xrange(key, "-", "+")
print(entries)
# {
#   "1548149259438-0": {
#     "field1": "value1",
#     "field2": "value2"
#   },
#   "1548149259438-1": {
#     "field1": "value3",
#     "field2": "value4"
#   }
# }

----------------------------------------

TITLE: Setting Single Field in Redis Hash using HSET in Python
DESCRIPTION: This snippet demonstrates how to set a single field in a Redis hash using the HSET command. It sets the field 'field1' with the value 'Hello' in the hash 'myhash' and asserts that one field was added.

LANGUAGE: python
CODE:
# Set a single field
assert redis.hset("myhash", "field1", "Hello") == 1

----------------------------------------

TITLE: Running Rate Limiting Test Script
DESCRIPTION: Command to execute the Python script that tests the rate limiting functionality of the FastAPI application.

LANGUAGE: shell
CODE:
python main.py

----------------------------------------

TITLE: Executing Simple Lua Script with Redis EVAL Command in TypeScript
DESCRIPTION: Example demonstrating how to execute a basic Lua script using Redis EVAL command. The script simply returns the first argument passed to it, showing the basic interaction between TypeScript and Redis Lua scripting.

LANGUAGE: typescript
CODE:
const script = `
    return ARGV[1]
`
const result = await redis.eval(script, [], ["hello"]);
console.log(result) // "hello"

----------------------------------------

TITLE: Querying Redis Stream Entries with XRANGE in Python
DESCRIPTION: Example showing how to use the XRANGE command to retrieve all entries from a Redis stream between minimum ('-') and maximum ('+') IDs. The response returns a dictionary of stream entries where each key is a stream ID and the value contains the entry's field-value pairs.

LANGUAGE: python
CODE:
entries = redis.xrange(key, "-", "+")
print(entries)
# {
#   "1548149259438-0": {
#     "field1": "value1",
#     "field2": "value2"
#   },
#   "1548149259438-1": {
#     "field1": "value3",
#     "field2": "value4"
#   }
# }

----------------------------------------

TITLE: Querying Redis Keys with Pattern Matching in TypeScript
DESCRIPTION: Demonstrates how to use the Redis KEYS command to retrieve keys matching specific patterns. Includes examples for matching keys with a prefix and matching all keys. Note that this command should be avoided in production due to potential performance impact.

LANGUAGE: typescript
CODE:
const keys = await redis.keys("prefix*");

LANGUAGE: typescript
CODE:
const keys = await redis.keys("*");

----------------------------------------

TITLE: ZRANGE Query with Scores in Python
DESCRIPTION: Shows how to retrieve elements along with their scores using the withscores parameter. Returns tuples containing both the member and its score.

LANGUAGE: python
CODE:
redis.zadd("myset", {"a": 1, "b": 2, "c": 3})

assert redis.zrange("myset", 0, 1, withscores=True) == [("a", 1), ("b", 2)]

----------------------------------------

TITLE: Checking Key Existence with EXISTS Command in Upstash Redis (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the EXISTS command in Upstash Redis to check if multiple keys exist. It sets two keys, then checks for the existence of three keys, including one that wasn't set.

LANGUAGE: typescript
CODE:
await redis.set("key1", "value1")
await redis.set("key2", "value2")
const keys = await redis.exists("key1", "key2", "key3");
console.log(keys) // 2

----------------------------------------

TITLE: Scanning Sorted Set with Pattern Matching in Redis using TypeScript
DESCRIPTION: This example demonstrates how to use the ZSCAN command to iterate over a Redis sorted set, filtering members with a pattern. It first adds elements to a sorted set, then scans the set with a pattern match.

LANGUAGE: typescript
CODE:
await redis.zadd("key", 
    { score: 1, member: "a" },
    { score: 2, member: "ab" },
    { score: 3, member: "b" },
    { score: 4, member: "c" },
    { score: 5, member: "d" },
)
const [newCursor, members] = await redis.sscan("key", 0, { match: "a*"});
console.log(newCursor); // likely `0` since this is a very small set
console.log(members); // ["a", "ab"]

----------------------------------------

TITLE: Configuring Redis Client Retry Settings in TypeScript
DESCRIPTION: Example showing how to initialize a Redis client with custom retry settings. The code demonstrates configuring both the number of retry attempts and the backoff calculation function. The backoff duration increases exponentially with each retry attempt.

LANGUAGE: typescript
CODE:
new Redis({
  url: UPSTASH_REDIS_REST_URL,
  token: UPSTASH_REDIS_REST_TOKEN,
  retry: {
    retries: 5,
    backoff: (retryCount) => Math.exp(retryCount) * 50,
  },
});

----------------------------------------

TITLE: Setting Expiry on Redis Key with PEXPIREAT in Python
DESCRIPTION: Demonstrates how to use the PEXPIREAT command to set an expiry on a Redis key. The example shows two methods: using a Unix timestamp and using a datetime object.

LANGUAGE: python
CODE:
# With a unix timestamp
redis.set("mykey", "Hello")
redis.pexpireat("mykey", int(time.time() * 1000) )

# With a datetime object
redis.set("mykey", "Hello")
redis.pexpireat("mykey", datetime.datetime.now() + datetime.timedelta(seconds=5))

----------------------------------------

TITLE: Implementing Multiple Rate Limits with Upstash Redis in Python
DESCRIPTION: This snippet shows how to implement different rate limits for different user types (free and paid) using Upstash Redis. It creates two rate limiters: one allowing 10 requests per 10 seconds for free users, and another allowing 60 requests per 10 seconds for paid users.

LANGUAGE: python
CODE:
from upstash_ratelimit import Ratelimit, SlidingWindow
from upstash_redis import Redis

class MultiRL:
    def __init__(self) -> None:
        redis = Redis.from_env()
        self.free = Ratelimit(
            redis=redis,
            limiter=SlidingWindow(max_requests=10, window=10),
            prefix="ratelimit:free",
        )

        self.paid = Ratelimit(
            redis=redis,
            limiter=SlidingWindow(max_requests=60, window=10),
            prefix="ratelimit:paid",
        )

# Create a new ratelimiter, that allows 10 requests per 10 seconds
ratelimit = MultiRL()

ratelimit.free.limit("userIP")
ratelimit.paid.limit("userIP")

----------------------------------------

TITLE: Loading Lua Script into Redis Cache using TypeScript
DESCRIPTION: Demonstrates how to load a simple Lua script that retrieves a value from Redis into the script cache. The script is first defined as a template literal and then loaded using redis.scriptLoad(), which returns the SHA1 hash of the script.

LANGUAGE: typescript
CODE:
const script = `
  local value = redis.call('GET', KEYS[1])
  return value
`;
const sha1 = await redis.scriptLoad(script);

LANGUAGE: lua
CODE:
local value = redis.call('GET', KEYS[1])
return value

----------------------------------------

TITLE: Implementing Redis Counter in Next.js Home Page
DESCRIPTION: Next.js page component that uses Upstash Redis to increment and display a counter. It demonstrates server-side props and client-side rendering of the counter value.

LANGUAGE: tsx
CODE:
import type { InferGetServerSidePropsType, GetServerSideProps } from 'next'
import { Redis } from "@upstash/redis";

const redis = Redis.fromEnv();

export const getServerSideProps = (async () => {
  const count = await redis.incr("counter");
  return { props: { count } }
}) satisfies GetServerSideProps<{ count: number }>

export default function Home({
  count,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <div className="flex h-screen w-screen items-center justify-center">
      <h1 className="text-4xl font-bold">Counter: {count}</h1>
    </div>
  )
}

----------------------------------------

TITLE: Retrieving a Value Using GET in Redis with Python
DESCRIPTION: This snippet demonstrates how to set a key-value pair and then retrieve the value using the GET operation in Redis. It uses the 'set' method to store a value and the 'get' method to retrieve it, followed by an assertion to verify the correct value is returned.

LANGUAGE: python
CODE:
redis.set("key", "value")

assert redis.get("key") == "value"

----------------------------------------

TITLE: Adding Multiple Members to Redis Set using SADD
DESCRIPTION: Example demonstrating how to add multiple members to a Redis set using the SADD command. The command returns the number of new elements added to the set, excluding any elements that were already present.

LANGUAGE: python
CODE:
assert redis.sadd("key", "a", "b", "c") == 3

----------------------------------------

TITLE: Deleting Keys with Upstash Redis DEL Command in TypeScript
DESCRIPTION: Demonstrates how to use the DEL command to remove one or more keys from Upstash Redis. The command returns the number of keys that were successfully removed. It can be used with individual key arguments or by spreading an array of keys.

LANGUAGE: typescript
CODE:
await redis.del("key1", "key2");

LANGUAGE: typescript
CODE:
// in case you have an array of keys
const keys = ["key1", "key2"];
await redis.del(...keys)

----------------------------------------

TITLE: Adding Multiple Members to Redis Set using SADD
DESCRIPTION: Example demonstrating how to add multiple members to a Redis set using the SADD command. The command returns the number of new elements added to the set, excluding any elements that were already present.

LANGUAGE: python
CODE:
assert redis.sadd("key", "a", "b", "c") == 3

----------------------------------------

TITLE: Implementing rate limiting with Upstash Redis in Python
DESCRIPTION: This snippet demonstrates how to set up and use rate limiting with Upstash Redis. It creates a ratelimiter that allows 10 requests per 10 seconds, checks if a request is allowed, and handles the response accordingly.

LANGUAGE: python
CODE:
from upstash_ratelimit import Ratelimit, FixedWindow
from upstash_redis import Redis

# Create a new ratelimiter, that allows 10 requests per 10 seconds
ratelimit = Ratelimit(
    redis=Redis.from_env(),
    limiter=FixedWindow(max_requests=10, window=10),
    # Optional prefix for the keys used in Redis. This is useful
    # if you want to share a Redis instance with other applications
    # and want to avoid key collisions. The default prefix is
    # "@upstash/ratelimit"
    prefix="@upstash/ratelimit",
)

# Use a constant string to limit all requests with a single ratelimit
# Or use a user ID, API key or IP address for individual limits.
identifier = "api"
response = ratelimit.limit(identifier)

if not response.allowed:
    print("Unable to process at this time")
else:
    do_expensive_calculation()
    print("Here you go!")

----------------------------------------

TITLE: Setting Individual Bits with Redis SETBIT - Python
DESCRIPTION: Sets a bit value at a specified offset in a Redis string and returns the original bit value. Takes a key name, offset position, and new bit value (0 or 1) as parameters. Returns the original bit value that was stored at the specified offset before the operation.

LANGUAGE: python
CODE:
original_bit = redis.setbit(key, 4, 1)

----------------------------------------

TITLE: Setting Timeout for Rate Limiting Requests in Upstash Redis
DESCRIPTION: Shows how to configure a timeout for rate limiting requests. If the Redis request takes longer than the specified timeout, the request is allowed to pass. This can prevent network issues from causing unnecessary request rejections.

LANGUAGE: typescript
CODE:
const ratelimit = new Ratelimit({
  redis: Redis.fromEnv(),
  limiter: Ratelimit.slidingWindow(10, "10 s"),
  timeout: 1000, // 1 second
  analytics: true,
});

----------------------------------------

TITLE: Executing Cached Lua Script with EVALSHA_RO in Python
DESCRIPTION: Example showing how to execute a cached read-only Lua script using its SHA1 hash with the EVALSHA_RO command. The script is referenced using its SHA1 hash 'fb67a0c03b48ddbf8b4c9b011e779563bdbc28cb' and takes a single argument 'hello'.

LANGUAGE: python
CODE:
result = redis.evalsha_ro("fb67a0c03b48ddbf8b4c9b011e779563bdbc28cb", args=["hello"])
assert result = "hello"

----------------------------------------

TITLE: Setting Multiple Hash Fields with HSET in Upstash Redis (TypeScript)
DESCRIPTION: This example demonstrates how to use the HSET command to set multiple fields in a hash using Upstash Redis. It sets three fields (id, username, and name) for a given key.

LANGUAGE: typescript
CODE:
await redis.hset("key", {
  id: 1,
  username: "chronark",
  name: "andreas"
  });

----------------------------------------

TITLE: Checking Set Membership with SISMEMBER in Python
DESCRIPTION: This snippet demonstrates how to use the SISMEMBER command in Redis using Python. It first adds elements to a set, then checks if a specific member exists in the set.

LANGUAGE: python
CODE:
redis.sadd("set", "a", "b", "c")

assert redis.sismember("set", "a") == True

----------------------------------------

TITLE: Retrieving Element by Index from Redis List using LINDEX in TypeScript
DESCRIPTION: This example demonstrates how to use the LINDEX command to retrieve an element from a Redis list by its index. It first pushes elements to a list using RPUSH, then retrieves the element at index 0 using LINDEX.

LANGUAGE: typescript
CODE:
await redis.rpush("key", "a", "b", "c");
const element = await redis.lindex("key", 0);
console.log(element); // "a"

----------------------------------------

TITLE: Using ZADD with CH Option to Return Count of Changed Elements
DESCRIPTION: Demonstrates how to use the CH option with ZADD to return the number of new elements added or existing elements updated in the sorted set.

LANGUAGE: typescript
CODE:
await redis.zadd(
    "key",
    { ch: true },
    { score: 2, member: "member" },
)

----------------------------------------

TITLE: Checking Field Existence in Redis Hash using HEXISTS
DESCRIPTION: This example demonstrates how to use the HEXISTS command in Redis to check if a field exists in a hash. It first sets a field in a hash using HSET, then checks for its existence using HEXISTS.

LANGUAGE: typescript
CODE:
await redis.hset("key", "field", "value");
const exists = await redis.hexists("key", "field");
console.log(exists); // 1

----------------------------------------

TITLE: Setting Multiple Fields in Redis Hash using HSET in Python
DESCRIPTION: This snippet shows how to set multiple fields in a Redis hash using the HSET command. It sets two fields ('field1' and 'field2') with their respective values in the hash 'myhash' and asserts that two fields were added.

LANGUAGE: python
CODE:
# Set multiple fields
assert redis.hset("myhash", values={
  "field1": "Hello",
  "field2": "World"
}) == 2

----------------------------------------

TITLE: Retrieving Single Random Member from Redis Set in Python
DESCRIPTION: This snippet demonstrates how to use the SRANDMEMBER command to retrieve a single random member from a Redis set. It first adds members to a set and then asserts that the returned random member is one of the added values.

LANGUAGE: python
CODE:
redis.sadd("myset", "one", "two", "three")

assert redis.srandmember("myset") in {"one", "two", "three"}

----------------------------------------

TITLE: Implementing Upstash Redis in Cloudflare Worker (TypeScript)
DESCRIPTION: This TypeScript code snippet demonstrates how to configure and use Upstash Redis in a Cloudflare Worker. It includes environment variable typing and a simple counter increment operation.

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis/cloudflare";

export interface Env {
  UPSTASH_REDIS_REST_URL: string;
  UPSTASH_REDIS_REST_TOKEN: string;
}

export default {
  async fetch(
    request: Request,
    env: Env,
    ctx: ExecutionContext
  ): Promise<Response> {
    const redis = Redis.fromEnv(env);
    const count = await redis.incr("counter");
    return new Response(JSON.stringify({ count }));
  },
};

----------------------------------------

TITLE: Sending PING Command in Python with Upstash Redis
DESCRIPTION: This code snippet demonstrates how to use the PING command with Upstash Redis in Python. It sends a ping to the server and asserts that the response is 'PONG', confirming that the server is alive and responsive.

LANGUAGE: python
CODE:
assert redis.ping() == "PONG"

----------------------------------------

TITLE: Executing Custom Redis Commands
DESCRIPTION: Shows how to execute custom Redis commands that aren't directly implemented in the client library by using the execute function with a command list.

LANGUAGE: python
CODE:
redis.execute(["XLEN", "test_stream"])

----------------------------------------

TITLE: Updating Existing Members in Redis Sorted Set with ZADD XX Option
DESCRIPTION: Shows how to use the XX option with ZADD to only update scores of existing members in the sorted set.

LANGUAGE: typescript
CODE:
await redis.zadd(
    "key",
    { xx: true },
    { score: 2, member: "member" },
)

----------------------------------------

TITLE: Adding Redisson Maven Dependency
DESCRIPTION: Maven dependency configuration required to use Redisson client in a Java project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.redisson</groupId>
    <artifactId>redisson</artifactId>
    <version>3.15.4</version>
</dependency>

----------------------------------------

TITLE: Disabling Automatic Serialization in Upstash Redis Client (TypeScript)
DESCRIPTION: This snippet demonstrates how to disable automatic JSON serialization when initializing the Upstash Redis client. It shows two methods: using the Redis constructor and using the fromEnv method. Disabling serialization may affect type definitions and could potentially cause issues with certain operations.

LANGUAGE: typescript
CODE:
const redis = new Redis({
  // ...
  automaticDeserialization: false,
});

// or
const redis = Redis.fromEnv({
  automaticDeserialization: false,
});

----------------------------------------

TITLE: Unlinking Multiple Keys in Upstash Redis using Python
DESCRIPTION: This snippet demonstrates how to use the UNLINK command to remove multiple keys from Upstash Redis. The command returns the number of keys that were successfully unlinked.

LANGUAGE: python
CODE:
assert redis.unlink("key1", "key2", "key3") == 3

----------------------------------------

TITLE: Setting a Key-Value Pair in Upstash Redis using TypeScript
DESCRIPTION: This snippet demonstrates how to set a key-value pair in Upstash Redis using TypeScript. It shows a basic usage of the SET command, setting a key 'my-key' with an object value.

LANGUAGE: typescript
CODE:
await redis.set("my-key", {my: "value"});

----------------------------------------

TITLE: Connecting with redis-py in Python
DESCRIPTION: Example of connecting to Upstash Redis using the redis-py client in Python. Uses explicit host, port, and password configuration with SSL enabled.

LANGUAGE: python
CODE:
import redis
r = redis.Redis(
host= 'YOUR_ENDPOINT',
port= 'YOUR_PORT',
password= 'YOUR_PASSWORD', 
ssl=True)
r.set('foo','bar')
print(r.get('foo'))

----------------------------------------

TITLE: Using RENAMENX Command in Python Redis Client
DESCRIPTION: Demonstrates how to use the RENAMENX command to conditionally rename Redis keys. The example shows both successful and failed rename operations based on key existence. It verifies the results by checking the values of affected keys.

LANGUAGE: python
CODE:
redis.set("key1", "Hello")
redis.set("key2", "World")

# Rename failed because "key2" already exists.
assert redis.renamenx("key1", "key2") == False

assert redis.renamenx("key1", "key3") == True

assert redis.get("key1") is None
assert redis.get("key2") == "World"
assert redis.get("key3") == "Hello"

----------------------------------------

TITLE: Conditional Key Setting in Redis with NX and XX Options
DESCRIPTION: This example shows how to use the 'nx' and 'xx' options to conditionally set keys in Redis. 'nx' sets the key only if it doesn't exist, while 'xx' sets it only if it already exists.

LANGUAGE: python
CODE:
# Only set the key if it does not already exist.
assert redis.set("key", "value", nx=True) == False

# Only set the key if it already exists.
assert redis.set("key", "value", xx=True) == True

----------------------------------------

TITLE: Inserting Elements in Redis List using LINSERT in TypeScript
DESCRIPTION: This snippet demonstrates how to use the LINSERT command in Redis to insert an element into a list. It first pushes elements to the right of the list using RPUSH, then inserts a new element before a specified pivot element.

LANGUAGE: typescript
CODE:
await redis.rpush("key", "a", "b", "c");
await redis.linsert("key", "before", "b", "x");

----------------------------------------

TITLE: Setting Redis Keys with Expiration Times
DESCRIPTION: This snippet demonstrates how to set keys in Redis with expiration times, using both seconds (ex) and milliseconds (px) options.

LANGUAGE: python
CODE:
# Set the key to expire in 10 seconds.
assert redis.set("key", "value", ex=10) == True

# Set the key to expire in 10000 milliseconds.
assert redis.set("key", "value", px=10000) == True

----------------------------------------

TITLE: Retrieving Multiple Keys Using Redis MGET
DESCRIPTION: Demonstrates how to use the MGET command to retrieve multiple key-value pairs from Redis in a single operation. The example shows setting two keys individually and then retrieving both values simultaneously using MGET.

LANGUAGE: python
CODE:
redis.set("key1", "value1")

redis.set("key2", "value2")

assert redis.mget("key1", "key2") == ["value1", "value2"]

----------------------------------------

TITLE: Simple ZUNIONSTORE Operation in TypeScript
DESCRIPTION: Basic example of computing the union of two sorted sets and storing the result in a destination key. Shows how to add members to source sets and perform the union operation.

LANGUAGE: typescript
CODE:
await redis.zadd("key1", { score: 1, member: "member1" })
await redis.zadd("key2",{ score: 1, member: "member1" },{ score: 2, member: "member2" })

const res = await redis.zunionstore("destination", 2, ["key1", "key2"]);
console.log(res) // 2

----------------------------------------

TITLE: Incrementing Hash Field Values with Redis HINCRBY
DESCRIPTION: Demonstrates how to use the HINCRBY command to increment a hash field value by a specified amount. The example first sets a hash field value to 5, then increments it by 10 to reach a final value of 15.

LANGUAGE: python
CODE:
redis.hset("myhash", "field1", 5)

assert redis.hincrby("myhash", "field1", 10) == 15

----------------------------------------

TITLE: Deleting Multiple Redis Keys Using Python
DESCRIPTION: Demonstrates how to delete multiple keys from Redis using the delete() method. The example shows setting two keys, deleting them, and verifying they no longer exist.

LANGUAGE: python
CODE:
redis.set("key1", "Hello")
redis.set("key2", "World")
redis.delete("key1", "key2")

assert redis.get("key1") is None
assert redis.get("key2") is None

----------------------------------------

TITLE: Connecting with Upstash Redis REST Client in TypeScript
DESCRIPTION: Example of connecting to Upstash Redis using the HTTP-based upstash-redis client, recommended for serverless functions. Uses REST URL and token for authentication.

LANGUAGE: typescript
CODE:
import { Redis } from '@upstash/redis';

const redis = new Redis({ url: 'UPSTASH_REDIS_REST_URL', token: 'UPSTASH_REDIS_REST_TOKEN' });

(async () => {
  try {
    const data = await redis.get('key');
    console.log(data);
  } catch (error) {
    console.error(error);
  }
})();

----------------------------------------

TITLE: Sorted ZRANGE Query by Score in Python
DESCRIPTION: Demonstrates using ZRANGE with the sortby parameter set to BYSCORE to sort elements based on their scores rather than lexicographically.

LANGUAGE: python
CODE:
redis.zadd("myset", {"a": 1, "b": 2, "c": 3})

assert redis.zrange("myset", 0, 1, sortby="BYSCORE") == ["a", "b"]

----------------------------------------

TITLE: Removing Multiple Elements with LPOP in TypeScript
DESCRIPTION: Shows how to remove and return multiple elements from the beginning of a Redis list using LPOP with a count parameter. Pushes elements to the list first, then removes two elements at once.

LANGUAGE: typescript
CODE:
await redis.rpush("key", "a", "b", "c"); 
const element = await redis.lpop("key", 2);
console.log(element); // ["a", "b"]

----------------------------------------

TITLE: Initializing Redis Client in Deno
DESCRIPTION: Demonstrates Redis client initialization in Deno environment, compatible with Deno Deploy and Netlify Edge platforms.

LANGUAGE: typescript
CODE:
import { Redis } from "https://deno.land/x/upstash_redis/mod.ts"

const redis = new Redis({
  url: <UPSTASH_REDIS_REST_URL>,
  token: <UPSTASH_REDIS_REST_TOKEN>,
})

// or
const redis = Redis.fromEnv();

----------------------------------------

TITLE: Adding and Updating Elements in Redis Sorted Sets using ZADD
DESCRIPTION: This code snippet demonstrates various uses of the ZADD command in Redis, including adding new elements, updating existing ones, and using different options like nx, xx, and gt. It shows how to add multiple elements at once and how the command's behavior changes with different flags.

LANGUAGE: python
CODE:
# Add three elements
assert redis.zadd("myset", {
    "one": 1,
    "two": 2,
    "three": 3
}) == 3

# No element is added since "one" and "two" already exist
assert redis.zadd("myset", {
    "one": 1,
    "two": 2
}, nx=True) == 0

# New element is not added since it does not exist
assert redis.zadd("myset", {
    "new-element": 1
}, xx=True) == 0

# Only "three" is updated since new score was greater
assert redis.zadd("myset", {
    "three": 10, "two": 0
}, gt=True) == 1

# Only "three" is updated since new score was greater
assert redis.zadd("myset", {
    "three": 10,
    "two": 0
}, gt=True) == 1

----------------------------------------

TITLE: Retrieving Hash Field Values with HGET in Python
DESCRIPTION: Demonstrates using the HGET command to retrieve values from hash fields. Shows setting a hash field value with HSET and then retrieving it with HGET, including handling of non-existent fields which return None.

LANGUAGE: python
CODE:
redis.hset("myhash", "field1", "Hello")

assert redis.hget("myhash", "field1") == "Hello"
assert redis.hget("myhash", "field2") is None

----------------------------------------

TITLE: Checking Key Existence with EXISTS in Python for Upstash Redis
DESCRIPTION: This snippet demonstrates how to use the EXISTS command in Upstash Redis to check for the existence of one or more keys. It sets two keys, checks their existence, deletes one, and then checks again.

LANGUAGE: python
CODE:
redis.set("key1", "Hello")
redis.set("key2", "World")

assert redis.exists("key1", "key2") == 2

redis.delete("key1")

assert redis.exists("key1", "key2") == 1

----------------------------------------

TITLE: Installing Celery with Redis support using pip
DESCRIPTION: Command to install Celery with Redis support using pip package manager.

LANGUAGE: bash
CODE:
pip install "celery[redis]"

----------------------------------------

TITLE: Inserting Values into JSON Array with Redis
DESCRIPTION: Demonstrates how to insert multiple values into a JSON array at a specific index using the json.arrinsert method. The operation returns the new length of the array after insertion. Values are inserted at the specified index, shifting existing elements to the right.

LANGUAGE: python
CODE:
length = redis.json.arrinsert("key", "$.path.to.array", 2, "a", "b")

----------------------------------------

TITLE: Retrieving List Length with LLEN in TypeScript
DESCRIPTION: This example demonstrates how to use the LLEN command to get the length of a Redis list. It first pushes elements to a list using RPUSH, then retrieves the length using LLEN.

LANGUAGE: typescript
CODE:
await redis.rpush("key", "a", "b", "c");
const length = await redis.llen("key");
console.log(length); // 3

----------------------------------------

TITLE: Iterating Over Redis Sorted Set Members Using ZSCAN in Python
DESCRIPTION: Demonstrates how to use the ZSCAN command to retrieve all elements from a Redis sorted set using cursor-based pagination. The code iteratively fetches members and their scores, accumulating results until the cursor returns 0, indicating completion of the iteration.

LANGUAGE: python
CODE:
# Get all elements of an ordered set.

cursor = 0
results = []

while True:
    cursor, keys = redis.zscan("myzset", cursor, match="*")

    results.extend(keys)
    if cursor == 0:
        break

for key, score in results:
    print(key, score)

----------------------------------------

TITLE: Popping Single Element from Redis List using RPOP in Python
DESCRIPTION: This snippet demonstrates how to use the RPOP command to remove and return the last element from a Redis list. It first pushes elements to the list using RPUSH, then pops the last element using RPOP.

LANGUAGE: python
CODE:
redis.rpush("mylist", "one", "two", "three")

assert redis.rpop("mylist") == "three"

----------------------------------------

TITLE: Initializing Redis Client in Fastly
DESCRIPTION: Shows Redis client setup in Fastly environment using backend configuration. Requires manual instance creation with backend name specification.

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis/fastly"

const redis = new Redis({
  url: <UPSTASH_REDIS_REST_URL>,
  token: <UPSTASH_REDIS_REST_TOKEN>,
  backend: <BACKEND_NAME>,
})

----------------------------------------

TITLE: Incrementing Redis Key Value in Python
DESCRIPTION: This snippet demonstrates how to use the INCR command in Redis using Python. It first sets a key to an initial value, then increments it and verifies the result.

LANGUAGE: python
CODE:
redis.set("key", 6)

assert redis.incr("key") == 7

----------------------------------------

TITLE: Example Usage of blockUntilReady in TypeScript
DESCRIPTION: Demonstrates how to use the blockUntilReady method with a Ratelimit instance, allowing 10 requests per 10 seconds and waiting up to 30 seconds for processing.

LANGUAGE: typescript
CODE:
const ratelimit = new Ratelimit({
  redis: Redis.fromEnv(),
  limiter: Ratelimit.slidingWindow(10, "10 s"),
  analytics: true,
});

const { success } = await ratelimit.blockUntilReady("id", 30_000);

if (!success) {
  return "Unable to process, even after 30 seconds";
}
doExpensiveCalculation();
return "Here you go!";

----------------------------------------

TITLE: Appending String Values in Redis using TypeScript
DESCRIPTION: Demonstrates how to append a string value to an existing key in Redis. Returns the length of the resulting string after the append operation.

LANGUAGE: typescript
CODE:
await redis.append(key, "Hello");
// returns 5

----------------------------------------

TITLE: Creating .env file for Upstash Redis credentials
DESCRIPTION: Example of a .env file containing Upstash Redis credentials for use with python-dotenv.

LANGUAGE: text
CODE:
UPSTASH_REDIS_HOST=<YOUR_HOST>
UPSTASH_REDIS_PORT=<YOUR_PORT>
UPSTASH_REDIS_PASSWORD=<YOUR_PASSWORD

----------------------------------------

TITLE: Getting List Length with Redis LLEN in Python
DESCRIPTION: Demonstrates how to use the LLEN command to get the length of a Redis list. First pushes three elements to a list using RPUSH, then verifies the list length is 3 using LLEN.

LANGUAGE: python
CODE:
redis.rpush("key", "a", "b", "c")

assert redis.llen("key") == 3

----------------------------------------

TITLE: Appending String Values in Redis using Python
DESCRIPTION: Demonstrates how to append a string value to an existing key using Redis APPEND command. Shows setting an initial value, appending additional text, and verifying the final concatenated result.

LANGUAGE: python
CODE:
redis.set("key", "Hello")

assert redis.append("key", " World") == 11

assert redis.get("key") == "Hello World"

----------------------------------------

TITLE: Popping Multiple Elements from Redis List using RPOP in Python
DESCRIPTION: This example shows how to use RPOP with a count argument to remove and return multiple elements from the end of a Redis list. It pushes three elements to the list, then pops the last two elements in a single operation.

LANGUAGE: python
CODE:
redis.rpush("mylist", "one", "two", "three")

assert redis.rpop("mylist", 2) == ["three", "two"]

----------------------------------------

TITLE: Appending and Trimming Redis Stream with XADD
DESCRIPTION: This example shows how to use the XADD command with trimming options. It adds a new entry to the stream and simultaneously trims the stream to a maximum length of 1000 entries using the MAXLEN trim mode.

LANGUAGE: python
CODE:
redis.xadd(key, "*", { name: "John Doe", age: 30 }, {
  trim: {
    type: "MAXLEN",
    threshold: 1000,
    comparison: "=",
  },
})

----------------------------------------

TITLE: Implementing Ephemeral Caching in Upstash Redis Rate Limiting
DESCRIPTION: Demonstrates how to use an ephemeral in-memory cache to improve performance and reduce Redis calls for rate limiting. The cache is created outside the serverless function handler and passed as an option to the Ratelimit constructor.

LANGUAGE: typescript
CODE:
const cache = new Map(); // must be outside of your serverless function handler

// ...

const ratelimit = new Ratelimit({
  // ...
  ephemeralCache: cache,
});

----------------------------------------

TITLE: Decrementing Integer Value Using DECRBY in Python with Upstash Redis
DESCRIPTION: This snippet demonstrates how to use the DECRBY command in Upstash Redis using Python. It first sets a key to an initial value of 6, then decrements it by 4 using the decrby method. The assertion verifies that the final value is 2.

LANGUAGE: python
CODE:
redis.set("key", 6)

assert redis.decrby("key", 4) == 2

----------------------------------------

TITLE: Using Celery task in Python application
DESCRIPTION: Python code demonstrating how to use a Celery task (add) asynchronously and retrieve its result.

LANGUAGE: python
CODE:
from tasks import add

result = add.delay(4, 6)
print(f"Task state: {result.state}")  # Outputs 'PENDING' initially

# Wait for the result
output = result.get(timeout=10)
print(f"Task result: {output}")  # Outputs '10'

----------------------------------------

TITLE: Iterating Set Members with SSCAN in Python
DESCRIPTION: Demonstrates how to use the SSCAN command to incrementally scan all members of a Redis set. The example shows a pattern for handling cursor-based iteration until all members are retrieved, with support for pattern matching and count limiting.

LANGUAGE: python
CODE:
# Get all members of a set.

cursor = 0
results = set()

while True:
    cursor, keys = redis.sscan("myset", cursor, match="*")

    results.extend(keys)
    if cursor == 0:
        break

----------------------------------------

TITLE: Pushing Elements to List Head with LPUSH in TypeScript
DESCRIPTION: This snippet demonstrates how to use the LPUSH command with Upstash Redis in TypeScript. It shows pushing multiple elements at once and then a single element, returning the updated list length each time.

LANGUAGE: typescript
CODE:
const length1 = await redis.lpush("key", "a", "b", "c"); 
console.log(length1); // 3
const length2 = await redis.lpush("key", "d"); 
console.log(length2); // 4

----------------------------------------

TITLE: Using STRLEN Command in Redis with Python
DESCRIPTION: This snippet demonstrates how to use the STRLEN command in Redis using Python. It sets a key with a string value and then asserts the length of that string using STRLEN.

LANGUAGE: python
CODE:
redis.set("key", "Hello World")

assert redis.strlen("key") == 11

----------------------------------------

TITLE: Retrieving Hash Field Names with HKEYS in Upstash Redis (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the HKEYS command to retrieve all field names from a hash in Upstash Redis. It first sets a hash using HSET, then retrieves the field names using HKEYS.

LANGUAGE: typescript
CODE:
await redis.hset("key", {
  id: 1,
  username: "chronark",
  });
const fields = await redis.hkeys("key");
console.log(fields); // ["id", "username"]

----------------------------------------

TITLE: Retrieving JSON Value with Options in TypeScript for Redis
DESCRIPTION: Shows how to use the json.get method with additional formatting options. This example includes settings for indentation, newline characters, and spacing between keys and values when retrieving JSON data.

LANGUAGE: typescript
CODE:
const value = await redis.json.get("key", {
    indent: "  ",
    newline: "\n",
    space: " ",
}, "$.path.to.somewhere");

----------------------------------------

TITLE: Decrementing Integer Value with DECR Command in TypeScript
DESCRIPTION: Example showing how to use the DECR command to decrement a numeric value stored in Redis. The example first sets a key to 6 and then decrements it to 5.

LANGUAGE: typescript
CODE:
await redis.set("key", 6);
await redis.decr("key");
// returns 5

----------------------------------------

TITLE: Pushing Elements to List Head with LPUSH in Python
DESCRIPTION: This example demonstrates how to use the LPUSH operation to add multiple elements to the head of a list in Redis. It then verifies the operation by checking the list's length and contents.

LANGUAGE: python
CODE:
assert redis.lpush("mylist", "one", "two", "three") == 3

assert lrange("mylist", 0, -1) == ["three", "two", "one"]

----------------------------------------

TITLE: Executing Multiple Bitfield Operations in Python with Upstash Redis
DESCRIPTION: This snippet demonstrates how to use the bitfield function to perform multiple operations on a bitfield in a single command. It sets the first 4 bits to 1 and increments the next 4 bits by 1.

LANGUAGE: python
CODE:
redis.set("mykey", "")

# Sets the first 4 bits to 1
# Increments the next 4 bits by 1
result = redis.bitfield("mykey")
        .set("u4", 0, 16)
        .incr("u4", 4, 1)
        .execute()

assert result == [0, 1]

----------------------------------------

TITLE: Moving Elements Between Redis Sets using SMOVE in Python
DESCRIPTION: Demonstrates using the SMOVE command to transfer a member from one set to another. The example shows adding elements to source and destination sets, moving an element between them, and verifying the resulting set contents.

LANGUAGE: python
CODE:
redis.sadd("src", "one", "two", "three")

redis.sadd("dest", "four")

assert redis.smove("src", "dest", "three") == True

assert redis.smembers("source") == {"one", "two"}

assert redis.smembers("destination") == {"three", "four"}

----------------------------------------

TITLE: Using ZRANK Command in Python with Redis
DESCRIPTION: Example demonstrates how to use the ZRANK command to get the rank (position) of members in a sorted set. First adds members with scores to a sorted set, then retrieves their ranks where rank 0 is the lowest score. Shows that non-existent members return None.

LANGUAGE: python
CODE:
redis.zadd("myset", {"a": 1, "b": 2, "c": 3})

assert redis.zrank("myset", "a") == 0

assert redis.zrank("myset", "d") == None

assert redis.zrank("myset", "b") == 1

assert redis.zrank("myset", "c") == 2

----------------------------------------

TITLE: Retrieving Hash Field Value with Redis HGET in TypeScript
DESCRIPTION: Demonstrates how to set and get a hash field value using Redis HGET command. The example shows setting a hash field with HSET and then retrieving it with HGET.

LANGUAGE: typescript
CODE:
await redis.hset("key", {field: "value"});
const field = await redis.hget("key", "field");
console.log(field); // "value"

----------------------------------------

TITLE: Pushing Elements to a Redis List using RPUSH in Python
DESCRIPTION: This example demonstrates how to use the RPUSH command to add multiple elements to the end of a Redis list. It then verifies the operation by retrieving all elements of the list using LRANGE.

LANGUAGE: python
CODE:
assert redis.rpush("mylist", "one", "two", "three") == 3

assert lrange("mylist", 0, -1) == ["one", "two", "three"]

----------------------------------------

TITLE: Performing Set Union Operation with Redis in Python
DESCRIPTION: Demonstrates how to use the SUNION command to get the union of two Redis sets. The example shows creating two sets with sadd and then computing their union using sunion, resulting in a combined set of all unique elements.

LANGUAGE: python
CODE:
redis.sadd("key1", "a", "b", "c")

redis.sadd("key2", "c", "d", "e")

assert redis.sunion("key1", "key2") == {"a", "b", "c", "d", "e"}

----------------------------------------

TITLE: Using BITFIELD Commands in Upstash Redis Python
DESCRIPTION: Demonstrates the usage of BITFIELD and BITFIELD_RO commands for bit manipulation operations. Shows how to chain multiple operations and execute them using the dedicated command classes.

LANGUAGE: python
CODE:
redis.bitfield("test_key") \
  .incrby(encoding="i8", offset=100, increment=100) \
  .overflow("SAT") \
  .incrby(encoding="i8", offset=100, increment=100) \
  .execute()

redis.bitfield_ro("test_key_2") \
  .get(encoding="u8", offset=0) \
  .get(encoding="u8", offset="#1") \
  .execute()

----------------------------------------

TITLE: Asynchronous Script Flush in TypeScript
DESCRIPTION: Example demonstrating how to flush Redis script cache asynchronously by passing options object with async flag.

LANGUAGE: typescript
CODE:
await redis.scriptFlush({
  async: true
});

----------------------------------------

TITLE: Using BITPOS Command with Range in Python
DESCRIPTION: This example shows how to use the BITPOS command with a specific range in Python. It searches for the first set bit (1) between positions 5 and 20 in the key.

LANGUAGE: python
CODE:
redis.bitpos("key", 1, 5, 20)

----------------------------------------

TITLE: Retrieving Single Bit Using GETBIT in TypeScript
DESCRIPTION: Example of using the getbit command to retrieve a single bit value from a Redis bitset at a specified offset. The command returns the bit value (0 or 1) stored at the given offset position.

LANGUAGE: typescript
CODE:
const bit = await redis.getbit(key, 4);

----------------------------------------

TITLE: Retrieving List Element by Index using LINDEX in Python
DESCRIPTION: This example demonstrates how to use the LINDEX command to retrieve an element from a Redis list. It first pushes multiple elements to a list using RPUSH, then retrieves the element at index 0 using LINDEX.

LANGUAGE: python
CODE:
redis.rpush("key", "a", "b", "c")

assert redis.lindex("key", 0) == "a"

----------------------------------------

TITLE: Getting JSON Array Length with Upstash Redis in TypeScript
DESCRIPTION: Demonstrates how to use the json.arrlen command to get the length of a JSON array at a specified path. Takes a key and path parameter, returning the array length as an integer.

LANGUAGE: typescript
CODE:
const length = await redis.json.arrlen("key", "$.path.to.array");

----------------------------------------

TITLE: Using LSET to Modify Redis List in Python
DESCRIPTION: This example demonstrates how to use the LSET command to modify a Redis list. It shows creating a list, setting a value at a specific index, and handling out-of-range index attempts. The code also verifies the results using LRANGE.

LANGUAGE: python
CODE:
redis.rpush("mylist", "one", "two", "three")

assert redis.lset("mylist", 1, "Hello") == True

assert redis.lrange("mylist", 0, -1) == ["one", "Hello", "three"]

assert redis.lset("mylist", 5, "Hello") == False

assert redis.lrange("mylist", 0, -1) == ["one", "Hello", "three"]

----------------------------------------

TITLE: Merging JSON Values in Redis using Python
DESCRIPTION: This snippet demonstrates how to use the JSON.MERGE command in Redis with Python. It merges a new JSON value at a specified path within an existing key. The operation requires a key, a path to the value, and the new value to be merged.

LANGUAGE: python
CODE:
redis.json.merge("key", "$.path.to.value", {"new": "value"})

----------------------------------------

TITLE: Using LSET to Modify Redis List in Python
DESCRIPTION: This example demonstrates how to use the LSET command to modify a Redis list. It shows creating a list, setting a value at a specific index, and handling out-of-range index attempts. The code also verifies the results using LRANGE.

LANGUAGE: python
CODE:
redis.rpush("mylist", "one", "two", "three")

assert redis.lset("mylist", 1, "Hello") == True

assert redis.lrange("mylist", 0, -1) == ["one", "Hello", "three"]

assert redis.lset("mylist", 5, "Hello") == False

assert redis.lrange("mylist", 0, -1) == ["one", "Hello", "three"]

----------------------------------------

TITLE: Retrieving JSON Values with JSON.GET in Python
DESCRIPTION: Demonstrates how to use the JSON.GET command to fetch a value from a specific path within a JSON document stored in Redis. The command accepts a key and a JSON path expression to locate the desired value.

LANGUAGE: python
CODE:
value = redis.json.get("key", "$.path.to.somewhere")

----------------------------------------

TITLE: Basic Script Flush in TypeScript
DESCRIPTION: Simple example showing how to flush all scripts from Redis cache using the default options.

LANGUAGE: typescript
CODE:
await redis.scriptFlush();

----------------------------------------

TITLE: Evaluating Read-Only Lua Script with Key Access in Redis
DESCRIPTION: Example showing how to execute a read-only Lua script that retrieves a value using GET command. The script demonstrates accessing a key from the KEYS array and returning its value.

LANGUAGE: python
CODE:
script = """
local value = redis.call("GET", KEYS[1])
return value
"""

redis.set("mykey", "Hello")

assert redis.eval_ro(script, keys=["mykey"]) == "Hello"

----------------------------------------

TITLE: Counting Set Bits with BITCOUNT in Redis using TypeScript
DESCRIPTION: These examples demonstrate how to use the BITCOUNT command in Redis with TypeScript. The first example counts all set bits in a key, while the second example counts set bits within a specified byte range.

LANGUAGE: typescript
CODE:
const bits = await redis.bitcount(key);

LANGUAGE: typescript
CODE:
const bits = await redis.bitcount(key, 5, 10);

----------------------------------------

TITLE: Moving Elements Between Redis Lists using TypeScript
DESCRIPTION: Demonstrates moving an element from one Redis list to another using the LMOVE command. First pushes elements to a source list, then moves an element to a destination list specifying the source and destination sides.

LANGUAGE: typescript
CODE:
await redis.rpush("source", "a", "b", "c");
const element = await redis.move("source", "destination", "left", "left");

----------------------------------------

TITLE: Retrieving Reverse Rank of Member in Sorted Set using Upstash Redis in TypeScript
DESCRIPTION: This code snippet demonstrates how to use the ZREVRANK command in Upstash Redis to get the reverse rank of a member in a sorted set. It takes a key and a member as arguments and returns the reverse rank as an integer.

LANGUAGE: typescript
CODE:
const rank = await redis.rank("key", "member");

----------------------------------------

TITLE: Querying Database Size with Redis DBSIZE Command in Python
DESCRIPTION: Demonstrates how to get the total number of keys in a Redis database using the dbsize() command. The command takes no arguments and returns an integer representing the total key count.

LANGUAGE: python
CODE:
redis.dbsize()

----------------------------------------

TITLE: Renaming Redis Key Using RENAMENX in TypeScript
DESCRIPTION: Example showing how to rename a Redis key using the RENAMENX command. The operation returns 1 if successful (key was renamed) or 0 if the operation failed (destination key already exists).

LANGUAGE: typescript
CODE:
const renamed = await redis.rename("old", "new");

----------------------------------------

TITLE: Incrementing JSON Number Value in Redis using Python
DESCRIPTION: Demonstrates how to increment a numeric value stored at a specific JSON path within a Redis key. The command takes a key name, JSON path expression, and increment value as arguments, returning the new value after incrementing.

LANGUAGE: python
CODE:
newValue = redis.json.numincrby("key", "$.path.to.value", 2)

----------------------------------------

TITLE: Using LPOS Command with Count Option in Upstash Redis
DESCRIPTION: Illustrates the usage of the LPOS command with the count option to retrieve multiple indices of a matching element in a Redis list. This example shows how to find the positions of all occurrences of an element.

LANGUAGE: typescript
CODE:
await redis.rpush("key", "a", "b", "b");
const positions = await redis.lpos("key", "b", { count: 2 });
console.log(positions); // [1, 2]

----------------------------------------

TITLE: Executing FLUSHDB Command in Python (Synchronous)
DESCRIPTION: This snippet demonstrates how to execute the FLUSHDB command synchronously in Python using Upstash Redis. It deletes all keys in the database immediately.

LANGUAGE: python
CODE:
redis.flushall()

----------------------------------------

TITLE: Querying JSON Object Length in Python using Upstash Redis
DESCRIPTION: Demonstrates how to use the json.objlen() method to get the number of keys in a JSON object at a specified path. Takes a key parameter and an optional path parameter that defaults to root ($).

LANGUAGE: python
CODE:
lengths = redis.json.objlen("key", "$.path")

----------------------------------------

TITLE: Incrementing Hash Field Value with HINCRBYFLOAT in Python
DESCRIPTION: Demonstrates how to increment a hash field value by a float using Redis HINCRBYFLOAT command. The example first sets an initial float value using HSET, then increments it by 10.1 and verifies the result is approximately 15.6.

LANGUAGE: python
CODE:
redis.hset("myhash", "field1", 5.5)

assert redis.hincrbyfloat("myhash", "field1", 10.1) - 15.6 < 0.0001

----------------------------------------

TITLE: Retrieving Substring from Redis Key using GETRANGE in TypeScript
DESCRIPTION: This snippet demonstrates how to use the GETRANGE command in Upstash Redis to retrieve a substring of a value stored at a specific key. It requires the key name and the start and end indices of the desired substring.

LANGUAGE: typescript
CODE:
const substring = await redis.getrange("key", 2, 4);

----------------------------------------

TITLE: Removing Members from a Set using SREM in Python with Upstash Redis
DESCRIPTION: This example demonstrates how to use the SREM command to remove members from a set in Upstash Redis. It first adds members to a set using SADD, then removes one existing and one non-existing member using SREM. The command returns the number of members successfully removed.

LANGUAGE: python
CODE:
redis.sadd("myset", "one", "two", "three")

assert redis.srem("myset", "one", "four") == 1

----------------------------------------

TITLE: Setting Individual Bits in Redis String with TypeScript
DESCRIPTION: Sets a single bit at the specified offset in a Redis string value. Takes a key name, offset position, and bit value (0 or 1) as arguments. Returns the original bit value that was stored at the offset before modification.

LANGUAGE: typescript
CODE:
const originalBit = await redis.setbit(key, 4, 1);

----------------------------------------

TITLE: Retrieving Typed Data with GET in Upstash Redis (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the GET operation in Upstash Redis to retrieve typed data. It shows type definition, key retrieval, and handling of non-existent keys.

LANGUAGE: typescript
CODE:
type MyType = {
    a: number;
    b: string;
}
const value = await redis.get<MyType>("key");
if (!value) {
    // key doesn't exist
} else {
    // value is of type MyType
}

----------------------------------------

TITLE: Setting a Basic Key-Value Pair in Redis using Python
DESCRIPTION: This snippet demonstrates how to set a simple key-value pair in Redis and then verify it using the get method.

LANGUAGE: python
CODE:
assert redis.set("key", "value") == True

assert redis.get("key") == "value"

----------------------------------------

TITLE: Using JSON.STRLEN in TypeScript with Upstash Redis
DESCRIPTION: Example showing how to use the JSON.STRLEN command to get the length of a JSON string at a specific path. The command takes a key and path parameter, returning the length of the string value found at that location.

LANGUAGE: typescript
CODE:
await redis.json.strlen("key", "$.path.to.str", "a");

----------------------------------------

TITLE: Retrieving Key Type in Redis using TypeScript
DESCRIPTION: Demonstrates how to check the data type of a Redis key. First sets a string value, then retrieves its type which returns 'string'. The TYPE command can return string, list, set, zset, hash, or none depending on the key's data type.

LANGUAGE: typescript
CODE:
await redis.set("key", "value");
const t = await redis.type("key");
console.log(t) // "string"

----------------------------------------

TITLE: Appending JSON String Values in Upstash Redis using Python
DESCRIPTION: This code snippet demonstrates how to use the JSON.STRAPPEND command in Upstash Redis with Python. It appends the string 'abc' to the existing string at the specified JSON path '$.path.to.str' for the given key.

LANGUAGE: python
CODE:
redis.json.strappend("key", "$.path.to.str", "abc")

----------------------------------------

TITLE: Using TYPE Command in Upstash Redis with Python
DESCRIPTION: This snippet demonstrates how to use the TYPE command in Upstash Redis to get the type of different keys. It shows examples for string, list, and non-existent keys.

LANGUAGE: python
CODE:
redis.set("key1", "Hello")

assert redis.type("key1") == "string"

redis.lpush("key2", "Hello")

assert redis.type("key2") == "list"

assert redis.type("non-existent-key") == "none"

----------------------------------------

TITLE: Retrieving Set Members using SMEMBERS in Redis with TypeScript
DESCRIPTION: This example demonstrates how to add members to a set using SADD and then retrieve all members using SMEMBERS. The SMEMBERS command returns an array of all members in the specified set.

LANGUAGE: typescript
CODE:
await redis.sadd("set", "a", "b", "c"); 
const members =  await redis.smembers("set");
console.log(members); // ["a", "b", "c"]

----------------------------------------

TITLE: Removing Highest Scored Members from Sorted Set using ZPOPMAX in TypeScript
DESCRIPTION: This example demonstrates how to use the ZPOPMAX command to remove and return up to 4 members with the highest scores from a sorted set stored at the specified key. The command returns the number of elements removed.

LANGUAGE: typescript
CODE:
const popped = await redis.zpopmax("key", 4);

----------------------------------------

TITLE: Setting Multiple JSON Values with JSON.MSET in Python
DESCRIPTION: This snippet demonstrates how to use the JSON.MSET operation in Upstash Redis using Python. It sets multiple JSON values at specified paths in multiple keys using a list of tuples.

LANGUAGE: python
CODE:
redis.json.set([(key, "$.path", value), (key2, "$.path2", value2)])

----------------------------------------

TITLE: Implementing Redis Counter Handler in Java
DESCRIPTION: Java implementation of AWS Lambda handler that uses Redis to increment and return a counter value

LANGUAGE: java
CODE:
package com.serverless;

import java.util.Map;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import redis.clients.jedis.Jedis;

public class Handler implements RequestHandler<Map<String, Object>, ApiGatewayResponse> {
	@Override
	public ApiGatewayResponse handleRequest(Map<String, Object> input, Context context) {
		Jedis jedis = new Jedis("lasting-roughy-29092.upstash.io", 6379, true);
		jedis.auth("********");
		Long value = jedis.incr("counter");
		jedis.close();
		String message = "Hello World, Count:" + value;
		return ApiGatewayResponse.builder()
				.setStatusCode(200)
				.setObjectBody(message)
				.build();
	}
}

----------------------------------------

TITLE: Retrieving Object Keys with JSON.OBJKEYS in Upstash Redis (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the JSON.OBJKEYS command to retrieve the keys of an object at a specified path in Upstash Redis. It requires a Redis client instance and returns an array of strings representing the object keys.

LANGUAGE: typescript
CODE:
const keys = await redis.json.objkeys("key", "$.path");

----------------------------------------

TITLE: Removing Multiple Elements with RPOP in TypeScript
DESCRIPTION: Shows how to remove and return multiple elements from the end of a Redis list using RPOP with a count parameter. Demonstrates pushing elements first, then retrieving the last two elements.

LANGUAGE: typescript
CODE:
await redis.rpush("key", "a", "b", "c"); 
const element = await redis.rpop("key", 2);
console.log(element); // ["c", "b"]

----------------------------------------

TITLE: Trimming JSON Array in Upstash Redis using TypeScript
DESCRIPTION: This snippet demonstrates how to use the JSON.ARRTRIM operation in Upstash Redis to trim an array to a specified range. It takes a key, a path to the array, and start and stop indices as parameters. The operation returns the length of the array after trimming.

LANGUAGE: typescript
CODE:
const length = await redis.json.arrtrim("key", "$.path.to.array", 2, 10);

----------------------------------------

TITLE: Retrieving Element Index in Redis List using LPOS in Python
DESCRIPTION: This snippet demonstrates the basic usage of the LPOS command to find the index of an element in a Redis list. It first pushes elements to a list and then retrieves the index of a specific element.

LANGUAGE: python
CODE:
redis.rpush("key", "a", "b", "c"); 

assert redis.lpos("key", "b") == 1

----------------------------------------

TITLE: Popping Last Element from JSON Array in Upstash Redis using TypeScript
DESCRIPTION: This snippet demonstrates how to use the JSON.ARRPOP command to remove and return the last element from a JSON array stored in Upstash Redis. It uses the default behavior of popping the last element when no index is specified.

LANGUAGE: typescript
CODE:
const element = await redis.json.arrpop("key", "$.path.to.array");

----------------------------------------

TITLE: ZRANGE with Scores in TypeScript
DESCRIPTION: Shows how to retrieve elements with their scores using the withScores option. Returns an interleaved array of members and scores.

LANGUAGE: typescript
CODE:
await redis.zadd("key", 
    { score: 1, member: "m1" },
    { score: 2, member: "m2" },
)
const res = await redis.zrange("key", 1, 3, { withScores: true })
console.log(res) // ["m2", 2]

----------------------------------------

TITLE: Retrieving List Elements with LRANGE in Python
DESCRIPTION: This snippet demonstrates how to use the LRANGE command in Redis using Python. It shows pushing elements to a list and then retrieving ranges of elements, including using negative indices for reverse indexing.

LANGUAGE: python
CODE:
redis.rpush("mylist", "one", "two", "three")

assert redis.lrange("mylist", 0, 1) == ["one", "two"]

assert redis.lrange("mylist", 0, -1) == ["one", "two", "three"]

----------------------------------------

TITLE: Incrementing Integer Value Using INCRBY in Upstash Redis (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the INCRBY command in Upstash Redis to increment the integer value of a key. It first sets a key with an initial value, then increments it by a specified amount. The example shows incrementing the value of 'key' by 4, resulting in a final value of 10.

LANGUAGE: typescript
CODE:
await redis.set("key", 6);
await redis.incrby("key", 4);
// returns 10

----------------------------------------

TITLE: Multiplying JSON Number Values with Upstash Redis in TypeScript
DESCRIPTION: Demonstrates how to use the JSON.NUMMULTBY command to multiply a numeric value stored in a JSON structure. The command takes a key name, JSON path to the target number, and a multiplier value. Returns the new value after multiplication.

LANGUAGE: typescript
CODE:
const newValue = await redis.json.nummultby("key", "$.path.to.value", 2);

----------------------------------------

TITLE: Publishing Messages to Redis Channel - Python
DESCRIPTION: Demonstrates how to publish a message to a Redis channel using the publish() method. The method takes a channel name and message as arguments, and returns the number of clients that received the message.

LANGUAGE: python
CODE:
listeners = redis.publish("my-topic", "my-message")

----------------------------------------

TITLE: Appending Values to JSON Array in Upstash Redis using TypeScript
DESCRIPTION: This snippet demonstrates how to use the JSON.ARRAPPEND command to append a value to an array within a JSON document stored in Upstash Redis. It uses the 'redis' object to execute the command, specifying the key, path to the array, and the value to append.

LANGUAGE: typescript
CODE:
await redis.json.arrappend("key", "$.path.to.array", "a");

----------------------------------------

TITLE: Removing Elements from Redis Sorted Set by Score Range in Python
DESCRIPTION: This snippet demonstrates how to use the ZREMRANGEBYSCORE command in Python to remove elements from a Redis sorted set. It removes all members with scores between 2 and 5 (inclusive) from the sorted set with the key 'key'.

LANGUAGE: python
CODE:
redis.zremrangebyscore("key", 2, 5)

----------------------------------------

TITLE: Using GETDEL Command in Python with Redis
DESCRIPTION: Demonstrates how to use the GETDEL command to retrieve a value and delete the key atomically. The example shows setting a key-value pair, retrieving and deleting it with GETDEL, and verifying the key no longer exists.

LANGUAGE: python
CODE:
redis.set("key", "value")

assert redis.getdel("key") == "value"

assert redis.get("key") == None

----------------------------------------

TITLE: Checking Multiple Set Members with SMISMEMBER in Python
DESCRIPTION: This snippet demonstrates how to use the SMISMEMBER command to check for the existence of multiple members in a Redis set. It first adds elements to a set, then checks for the presence of existing and non-existing members.

LANGUAGE: python
CODE:
redis.sadd("myset", "one", "two", "three")

assert redis.smismember("myset", "one", "four") == [True, False]

assert redis.smismember("myset", "four", "five") == [False, False]

----------------------------------------

TITLE: Retrieving Member Score from Redis Sorted Set using TypeScript
DESCRIPTION: Demonstrates how to add multiple members to a sorted set and retrieve a specific member's score using Redis ZSCORE command. The example shows adding four members with different scores and then retrieving the score for member 'm2'.

LANGUAGE: typescript
CODE:
await redis.zadd("key", 
    { score: 1, member: "m1" },
    { score: 2, member: "m2" },
    { score: 3, member: "m3" },
    { score: 4, member: "m4" },
)

const score = await redis.zscore("key", "m2")
console.log(score) // 2

----------------------------------------

TITLE: Incrementing Float Value in Redis using Python
DESCRIPTION: This snippet demonstrates how to use the INCRBYFLOAT command in Redis using Python. It first sets a key with an initial value, then increments it by a float value.

LANGUAGE: python
CODE:
redis.set("key", 6)

# returns 10.5
redis.incrbyfloat("key", 4,5)

----------------------------------------

TITLE: Searching JSON Array Index in Redis using TypeScript
DESCRIPTION: Demonstrates how to search for a value's first occurrence in a JSON array using the Redis JSON.ARRINDEX command. The command returns the index position of the first matching value or -1 if not found. It accepts parameters for key, path, search value, and optional start/stop indices.

LANGUAGE: typescript
CODE:
const index = await redis.json.arrindex("key", "$.path.to.array", "a");

----------------------------------------

TITLE: Toggling a Boolean Value in JSON using Upstash Redis in Python
DESCRIPTION: This snippet demonstrates how to use the JSON.TOGGLE command to toggle a boolean value stored at a specific path in a JSON object. The command takes a key and a path as arguments and returns the new value of the boolean.

LANGUAGE: python
CODE:
bool = redis.json.toggle("key", "$.path.to.bool")

----------------------------------------

TITLE: Retrieving JSON Value with TypeScript in Redis
DESCRIPTION: Demonstrates how to use the json.get method to retrieve a value from a JSON document stored in Redis. The example shows fetching a value at a specific path within the JSON structure.

LANGUAGE: typescript
CODE:
const value = await redis.json.get("key", "$.path.to.somewhere");

----------------------------------------

TITLE: Querying JSON Value Type in Redis using Python
DESCRIPTION: Demonstrates how to retrieve the type of a JSON value at a specific path within a Redis key. The command returns either the type as a string or null if the value doesn't exist at the specified path.

LANGUAGE: python
CODE:
myType = redis.json.type("key", "$.path.to.value")

----------------------------------------

TITLE: Removing a Random Member from a Set using SPOP in Upstash Redis (TypeScript)
DESCRIPTION: This example demonstrates how to use the SPOP command to remove and return a random member from a set in Upstash Redis. It first adds elements to a set using SADD, then uses SPOP to remove and return a random member.

LANGUAGE: typescript
CODE:
await redis.sadd("set", "a", "b", "c"); 
const popped = await redis.spop("set");
console.log(popped); // "a"

----------------------------------------

TITLE: Using TOUCH Command with Upstash Redis in TypeScript
DESCRIPTION: This snippet demonstrates how to use the TOUCH command with Upstash Redis to alter the last access time of multiple keys. The command takes one or more key names as arguments and returns the number of keys that were touched.

LANGUAGE: typescript
CODE:
await redis.touch("key1", "key2", "key3");

----------------------------------------

TITLE: Performing Set Intersection with SINTER in Redis using TypeScript
DESCRIPTION: This snippet demonstrates how to use the SINTER command to find the intersection of two Redis sets. It first adds elements to two sets using SADD, then performs the intersection operation using SINTER.

LANGUAGE: typescript
CODE:
await redis.sadd("set1", "a", "b", "c"); 
await redis.sadd("set2", "c", "d", "e"); 
const intersection =  await redis.sinter("set1", "set2");
console.log(intersection); // ["c"]

----------------------------------------

TITLE: Querying JSON String Length in Redis using Python
DESCRIPTION: Example showing how to use the JSON.STRLEN command to get the length of a JSON string at a specific path. The command takes a key and a path parameter, returning the length of the string found at that location.

LANGUAGE: python
CODE:
redis.json.strlen("key", "$.path.to.str")

----------------------------------------

TITLE: Incrementing Float Value in Redis using TypeScript
DESCRIPTION: This snippet demonstrates how to use the INCRBYFLOAT command in Redis using TypeScript. It sets an initial value for a key, then increments it by a float value, returning the new value after the operation.

LANGUAGE: typescript
CODE:
await redis.set("key", 6);
await redis.incrbyfloat("key", 4,5);
// returns 10.5

----------------------------------------

TITLE: Performing Bitwise AND Operation with Redis BITOP Command in TypeScript
DESCRIPTION: This snippet demonstrates how to use the BITOP command in Redis to perform a bitwise AND operation between two source keys and store the result in a destination key. The command is executed asynchronously using a Redis client.

LANGUAGE: typescript
CODE:
await redis.bitop("AND", "destKey", "sourceKey1", "sourceKey2");

----------------------------------------

TITLE: Querying JSON Object Length in Upstash Redis using TypeScript
DESCRIPTION: This snippet demonstrates how to use the JSON.OBJLEN command in Upstash Redis to get the number of keys in a JSON object at a specified path. It uses the 'redis' client to execute the command.

LANGUAGE: typescript
CODE:
const lengths = await redis.json.objlen("key", "$.path");

----------------------------------------

TITLE: Checking Key Expiration Time with PTTL in Python
DESCRIPTION: Demonstrates how to use the PTTL command to check key expiration time in milliseconds. Shows setting a key, checking its TTL, setting expiration, and removing expiration with persist.

LANGUAGE: python
CODE:
redis.set("key1", "Hello")

assert redis.pttl("key1") == -1

redis.expire("key1", 1000)

assert redis.pttl("key1") > 0

redis.persist("key1")

assert redis.pttl("key1") == -1

----------------------------------------

TITLE: Executing ECHO Command in Python with Redis
DESCRIPTION: This snippet demonstrates how to use the ECHO command in a Python Redis client. It sends a message 'hello world' to the server and asserts that the returned message is identical, showcasing the basic functionality of ECHO for connection debugging.

LANGUAGE: python
CODE:
assert redis.echo("hello world") == "hello world"

----------------------------------------

TITLE: Redis Set Union with Score Aggregation
DESCRIPTION: Shows how to use zunionstore with score aggregation. Combines two sets while summing their scores and including scores in the result.

LANGUAGE: python
CODE:
redis.zadd("key1", {"a": 1, "b": 2, "c": 3})

redis.zadd("key2", {"a": 3, "b": 4, "c": 5})

result = redis.zunionstore(["key1", "key2"], withscores=True, aggregate="SUM")

assert result == [("a", 4), ("b", 6), ("c", 8)]

----------------------------------------

TITLE: Removing Elements by Lexicographical Range in Redis Sorted Set using TypeScript
DESCRIPTION: Demonstrates how to remove elements from a Redis sorted set that fall within a specified lexicographical range using min and max bounds. Returns the number of elements removed from the set.

LANGUAGE: typescript
CODE:
await redis.zremrangebylex("key", "alpha", "omega")

----------------------------------------

TITLE: Flushing Redis Script Cache in Python
DESCRIPTION: Demonstrates how to flush all cached scripts from Redis using the script_flush command. The flush_type parameter determines whether the operation is performed synchronously or asynchronously.

LANGUAGE: python
CODE:
redis.script_flush(flush_type="ASYNC")

----------------------------------------

TITLE: Removing Elements by Lexicographical Range in Redis Sorted Set using TypeScript
DESCRIPTION: Demonstrates how to remove elements from a Redis sorted set that fall within a specified lexicographical range using min and max bounds. Returns the number of elements removed from the set.

LANGUAGE: typescript
CODE:
await redis.zremrangebylex("key", "alpha", "omega")

----------------------------------------

TITLE: Appending String Values with JSON.STRAPPEND in TypeScript
DESCRIPTION: Demonstrates how to append a string value to an existing JSON string at a specified path using Upstash Redis. The command takes a key, path, and value as arguments and returns the length of the resulting array.

LANGUAGE: typescript
CODE:
await redis.json.strappend("key", "$.path.to.str", "abc");

----------------------------------------

TITLE: Using ECHO Command with Upstash Redis in TypeScript
DESCRIPTION: Demonstrates how to use the ECHO command to send a test message to the Redis server and receive the same message back. This is commonly used for testing connectivity and debugging purposes.

LANGUAGE: typescript
CODE:
const response = await redis.echo("hello world");
console.log(response); // "hello world"

----------------------------------------

TITLE: Trimming JSON Array with Redis
DESCRIPTION: Demonstrates how to use the JSON.ARRTRIM command to trim an array in a JSON structure stored in Redis. The command takes a key, path to the array, start index, and stop index as parameters and returns the new length of the array after trimming.

LANGUAGE: python
CODE:
length = redis.json.arrtrim("key", "$.path.to.array", 2, 10)

----------------------------------------

TITLE: Retrieving TTL Value in TypeScript with Upstash Redis
DESCRIPTION: Demonstrates how to get the remaining time to live (in seconds) for a Redis key. Returns a negative value if the key doesn't exist or has no expiration set. Requires an initialized Redis client instance.

LANGUAGE: typescript
CODE:
const seconds = await redis.ttl(key);

----------------------------------------

TITLE: Setting JSON Values in Redis - Basic Example
DESCRIPTION: Basic example of setting a JSON value at a specific path within a Redis key. Takes a key name, path expression, and value as parameters.

LANGUAGE: python
CODE:
redis.json.set(key, "$.path", value)

----------------------------------------

TITLE: Executing Cached Lua Script with EVALSHA in TypeScript
DESCRIPTION: This example demonstrates how to use the EVALSHA command to execute a pre-cached Lua script on the Redis server. The script is identified by its SHA1 hash, and the example passes an argument to the script.

LANGUAGE: typescript
CODE:
const result = await redis.evalsha("fb67a0c03b48ddbf8b4c9b011e779563bdbc28cb", [], ["hello"]);
console.log(result) // "hello"

----------------------------------------

TITLE: Using ZMSCORE Command with Redis in TypeScript
DESCRIPTION: This example demonstrates how to use the ZMSCORE command with Redis in TypeScript. It first adds members to a sorted set using zadd, then retrieves scores for specific members using zmscore.

LANGUAGE: typescript
CODE:
await redis.zadd("key", 
    { score: 1, member: "m1" },
    { score: 2, member: "m2" },
    { score: 3, member: "m3" },
    { score: 4, member: "m4" },
)

const scores = await redis.zmscore("key", ["m2", "m4"])
console.log(scores) // [2, 4]

----------------------------------------

TITLE: Setting Multiple Keys Conditionally with MSETNX in TypeScript
DESCRIPTION: Demonstrates how to use the MSETNX command to set multiple key-value pairs atomically. The operation only succeeds if none of the specified keys already exist. Returns true if all keys were set, false if at least one key was not set due to existence.

LANGUAGE: typescript
CODE:
redis.msetnx({
  "key1": "value1",
  "key2": "value2"
})

----------------------------------------

TITLE: Pushing Element to Existing List with RPUSHX in TypeScript
DESCRIPTION: This snippet demonstrates using the RPUSHX command to add an element to an existing list in Redis. It first creates a list using LPUSH, then uses RPUSHX to add another element, and finally logs the new length of the list.

LANGUAGE: typescript
CODE:
await redis.lpush("key", "a", "b", "c"); 
const length = await redis.rpushx("key", "d"); 
console.log(length); // 4

----------------------------------------

TITLE: Checking Multiple Set Members with Redis SMISMEMBER
DESCRIPTION: Example demonstrating how to check if multiple members exist in a Redis set using SMISMEMBER. The command returns an array of 1s and 0s indicating whether each member exists in the set.

LANGUAGE: typescript
CODE:
await redis.sadd("set", "a", "b", "c"); 
const members =  await redis.smismember("set", ["a", "b", "d"]);
console.log(members); // [1, 1, 0]

----------------------------------------

TITLE: Modifying String Values with Redis SETRANGE in Python
DESCRIPTION: Demonstrates using the SETRANGE command to modify a portion of a string value in Redis. The example shows setting an initial string value, then modifying it at a specific offset, and verifying the result.

LANGUAGE: python
CODE:
redis.set("key", "Hello World")

assert redis.setrange("key", 6, "Redis") == 11

assert redis.get("key") == "Hello Redis"

----------------------------------------

TITLE: Multiplying JSON Number Values in Upstash Redis using Python
DESCRIPTION: Demonstrates how to use the json.nummultby command to multiply a numeric value stored at a specific JSON path. The operation takes a key, a path expression, and a multiplier as arguments and returns the new value after multiplication.

LANGUAGE: python
CODE:
newValue = redis.json.nummultby("key", "$.path.to.value", 2)

----------------------------------------

TITLE: Retrieving All Fields from a Hash using HGETALL in Python
DESCRIPTION: This example demonstrates how to use the HGETALL command in Redis to retrieve all fields from a hash. It first sets multiple fields in a hash using HSET, then retrieves all fields using HGETALL.

LANGUAGE: python
CODE:
redis.hset("myhash", values={
"field1": "Hello",
"field2": "World"
})

assert redis.hgetall("myhash") == {"field1": "Hello", "field2": "World"}

----------------------------------------

TITLE: Loading and Executing Lua Script in Redis using Python
DESCRIPTION: Demonstrates loading a simple Lua script into Redis cache using script_load() and executing it using evalsha(). The example loads a basic script that returns 1 and verifies the execution.

LANGUAGE: python
CODE:
sha1 = redis.script_load("return 1")

assert redis.evalsha(sha1) == 1

----------------------------------------

TITLE: Basic Hash Scanning with Redis
DESCRIPTION: Demonstrates basic usage of hscan to retrieve all fields and values from a Redis hash. Sets sample data and retrieves it using hscan with cursor 0.

LANGUAGE: typescript
CODE:
await redis.hset("key", {
  id: 1,
  username: "chronark",
  name: "andreas"
 });
const [newCursor, fields] = await redis.hscan("key", 0);
console.log(newCursor); // likely `0` since this is a very small hash
console.log(fields); // ["id", 1, "username", "chronark", "name", "andreas"]

----------------------------------------

TITLE: Installing Fetch Polyfill for Node.js
DESCRIPTION: Shows how to add fetch support for Node.js v17 and earlier using isomorphic-fetch polyfill when the native fetch is not available.

LANGUAGE: bash
CODE:
npm i isomorphic-fetch

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis";
import "isomorphic-fetch";

const redis = new Redis({
  /*...*/
});

----------------------------------------

TITLE: Incrementing Sorted Set Member Score with Redis ZINCRBY
DESCRIPTION: Example demonstrating how to increment a member's score in a Redis sorted set. First creates a sorted set with three members, then increments the score of member 'one' by 2, resulting in a new score of 3.

LANGUAGE: python
CODE:
redis.zadd("myset", {"one": 1, "two": 2, "three": 3})

assert redis.zincrby("myset", 2, "one") == 3

----------------------------------------

TITLE: Moving Set Members with Redis SMOVE in TypeScript
DESCRIPTION: Demonstrates moving a member from one Redis set to another using the SMOVE command. First adds multiple members to an 'original' set, then moves one member to a 'destination' set. Returns 1 on successful move, 0 if the member doesn't exist in the source set.

LANGUAGE: typescript
CODE:
await redis.sadd("original", "a", "b", "c"); 
const moved =  await redis.smove("original", "destination", "a");
// moved:       1
// original:    ["b", "c"]
// destination: ["a"]

----------------------------------------

TITLE: Deleting Hash Fields with HDEL in Python for Upstash Redis
DESCRIPTION: This snippet demonstrates how to use the HDEL command to delete multiple fields from a hash in Upstash Redis. It first sets two fields in a hash using HSET, then deletes both fields using HDEL, asserting that two fields were removed.

LANGUAGE: python
CODE:
redis.hset("myhash", "field1", "Hello")
redis.hset("myhash", "field2", "World")

assert redis.hdel("myhash", "field1", "field2") == 2

----------------------------------------

TITLE: Clearing JSON Values in Upstash Redis using Python
DESCRIPTION: Demonstrates how to use the json.clear method to clear JSON values in Upstash Redis. The method can be used with or without specifying a path within the JSON structure.

LANGUAGE: python
CODE:
redis.json.clear("key")

LANGUAGE: python
CODE:
redis.json.clear("key", "$.my.key")

----------------------------------------

TITLE: Counting Fields in Redis Hash using HLEN in Python
DESCRIPTION: This example demonstrates how to use the HLEN command to count the number of fields in a Redis hash. It first checks an empty hash, then adds fields and verifies the count.

LANGUAGE: python
CODE:
assert redis.hlen("myhash") == 0

redis.hset("myhash", values={
    "field1": "Hello",
    "field2": "World"
})

assert redis.hlen("myhash") == 2

----------------------------------------

TITLE: ZINTERSTORE with Weights in Python
DESCRIPTION: Illustrates the use of ZINTERSTORE with custom weights applied to each input set, along with score summation and inclusion.

LANGUAGE: python
CODE:
redis.zadd("key1", {"a": 1})

redis.zadd("key2", {"a": 1})

result = redis.zinterstore("dest", ["key1", "key2"],
                      withscores=True,
                      aggregate="SUM",
                      weights=[2, 3])

assert result == 1

----------------------------------------

TITLE: Working with Large Numbers
DESCRIPTION: Illustrates how large numbers exceeding JavaScript's safe integer limit (2^53 - 1) are automatically returned as strings to prevent precision loss.

LANGUAGE: typescript
CODE:
await redis.set("key", "101600000000150081467");
const res = await redis("get");

// "101600000000150081467"

----------------------------------------

TITLE: Storing Set Differences with Redis SDIFFSTORE in Python
DESCRIPTION: Demonstrates using SDIFFSTORE to compute and store the difference between two Redis sets. The example shows creating two sets with SADD, computing their difference with SDIFFSTORE, and verifying the result with SMEMBERS.

LANGUAGE: python
CODE:
redis.sadd("key1", "a", "b", "c")

redis.sadd("key2", "c", "d", "e")

# Store the result in a new set
assert redis.sdiffstore("res", "key1", "key2") == 2

assert redis.smembers("set") == {"a", "b"}

----------------------------------------

TITLE: Redis Set Intersection with Aggregation in Python
DESCRIPTION: Example showing how to perform a union operation with score aggregation. Uses the SUM aggregation method and includes scores in the result.

LANGUAGE: python
CODE:
redis.zadd("key1", {"a": 1, "b": 2, "c": 3})

redis.zadd("key2", {"a": 3, "b": 4, "c": 5})

result = redis.zunion(["key1", "key2"], withscores=True, aggregate="SUM")

assert result == [("a", 4), ("b", 6), ("c", 8)]

----------------------------------------

TITLE: Removing Members from a Set using SREM in Upstash Redis with TypeScript
DESCRIPTION: This example demonstrates how to use the SREM command to remove members from a set in Upstash Redis. It first adds members to a set using SADD, then removes some members using SREM, and finally logs the number of members removed.

LANGUAGE: typescript
CODE:
await redis.sadd("set", "a", "b", "c"); 
const removed = await redis.srem("set", "a", "b", "d");
console.log(removed); // 2

----------------------------------------

TITLE: Using Redis TOUCH Command in Python
DESCRIPTION: Example showing how to use the TOUCH command to update the last access time of multiple Redis keys. The command returns the number of keys that were successfully touched.

LANGUAGE: python
CODE:
redis.touch("key1", "key2", "key3")

----------------------------------------

TITLE: Renaming Keys in Upstash Redis using Python
DESCRIPTION: This snippet demonstrates how to use the RENAME command in Upstash Redis using Python. It shows setting a key, renaming it, and verifying the results. It also illustrates that attempting to rename a nonexistent key throws an exception.

LANGUAGE: python
CODE:
redis.set("key1", "Hello")
redis.rename("key1", "key2")

assert redis.get("key1") is None
assert redis.get("key2") == "Hello"

# Renaming a nonexistent key throws an exception
redis.rename("nonexistent", "key3")

----------------------------------------

TITLE: Retrieving Multiple JSON Values with JSON.MGET in TypeScript
DESCRIPTION: Demonstrates how to fetch values from the same path across multiple JSON documents using the JSON.MGET command. The command accepts multiple keys and a JSON path expression, returning an array of values or null for non-existent paths.

LANGUAGE: typescript
CODE:
const values = await redis.json.mget(["key1", "key2"],  "$.path.to.somewhere");

----------------------------------------

TITLE: Iterating Hash Fields Using HSCAN in Python
DESCRIPTION: Demonstrates how to use the HSCAN command to iteratively retrieve all fields from a Redis hash. The code uses a cursor-based approach to fetch fields in batches until the complete hash is scanned.

LANGUAGE: python
CODE:
# Get all members of a hash.

cursor = 0
results = []

while True:
    cursor, keys = redis.hscan("myhash", cursor, match="*")

    results.extend(keys)
    if cursor == 0:
        break

----------------------------------------

TITLE: Using STRLEN Command with Redis in TypeScript
DESCRIPTION: This example demonstrates how to use the STRLEN command in Redis using TypeScript. It first sets a key with a string value, then retrieves the length of that string using STRLEN.

LANGUAGE: typescript
CODE:
await redis.set("key", "helloworld")
const length = await redis.strlen("key");
console.log(length); // 10

----------------------------------------

TITLE: Initializing Cloudflare Worker Project with Wrangler CLI
DESCRIPTION: This snippet demonstrates the process of creating a new Cloudflare Worker project using the Wrangler CLI. It sets up a TypeScript-based Hello World example.

LANGUAGE: shell
CODE:
➜  tutorials > ✗ npx wrangler init
╭ Create an application with Cloudflare Step 1 of 3
│
├ In which directory do you want to create your application?
│ dir ./greetings-cloudflare
│
├ What would you like to start with?
│ category Hello World example
│
├ Which template would you like to use?
│ type Hello World Worker
│
├ Which language do you want to use?
│ lang TypeScript
│
├ Copying template files
│ files copied to project directory
│
├ Updating name in `package.json`
│ updated `package.json`
│
├ Installing dependencies
│ installed via `npm install`
│
╰ Application created

╭ Configuring your application for Cloudflare Step 2 of 3
│
├ Installing @cloudflare/workers-types
│ installed via npm
│
├ Adding latest types to `tsconfig.json`
│ added @cloudflare/workers-types/2023-07-01
│
├ Retrieving current workerd compatibility date
│ compatibility date 2024-10-22
│
├ Do you want to use git for version control?
│ no git
│
╰ Application configured

----------------------------------------

TITLE: Weighted Redis Set Intersection in Python
DESCRIPTION: Advanced example demonstrating union operation with custom weights and score aggregation. Shows how to apply different weights to different sets during the union operation.

LANGUAGE: python
CODE:
redis.zadd("key1", {"a": 1})

redis.zadd("key2", {"a": 1})

result = redis.zunion(["key1", "key2"],
                      withscores=True,
                      aggregate="SUM",
                      weights=[2, 3])

assert result == [("a", 5)]

----------------------------------------

TITLE: Removing Single Element with LPOP in TypeScript
DESCRIPTION: Demonstrates removing and returning a single element from the beginning of a Redis list using the LPOP command. First pushes multiple elements to the list using RPUSH, then removes the first element.

LANGUAGE: typescript
CODE:
await redis.rpush("key", "a", "b", "c"); 
const element = await redis.lpop("key");
console.log(element); // "a"

----------------------------------------

TITLE: Retrieving Single Random Member from Redis Set - TypeScript
DESCRIPTION: Example showing how to retrieve a single random member from a Redis set. First adds multiple members to a set using sadd, then retrieves one random member using srandmember.

LANGUAGE: typescript
CODE:
await redis.sadd("set", "a", "b", "c"); 
const member = await redis.srandmember("set");
console.log(member); // "a"

----------------------------------------

TITLE: Using RANDOMKEY Command in Python with Upstash Redis
DESCRIPTION: This example demonstrates how to use the RANDOMKEY command in Python with Upstash Redis. It shows checking for an empty database, setting keys, and then retrieving a random key.

LANGUAGE: python
CODE:
assert redis.randomkey() is None

redis.set("key1", "Hello")
redis.set("key2", "World")

assert redis.randomkey() is not None

----------------------------------------

TITLE: Deleting JSON Path Using JSON.FORGET in TypeScript
DESCRIPTION: Demonstrates how to delete a specific path from a JSON document using the JSON.FORGET command. The command returns the number of paths that were successfully deleted.

LANGUAGE: typescript
CODE:
await redis.json.forget("key", "$.path.to.value");

----------------------------------------

TITLE: Executing HSETNX Command in Python with Redis
DESCRIPTION: Demonstrates using the HSETNX command to conditionally set hash fields. The first attempt sets the field successfully while the second attempt fails since the field already exists.

LANGUAGE: python
CODE:
assert redis.hsetnx("myhash", "field1", "Hello") == True
assert redis.hsetnx("myhash", "field1", "World") == False

----------------------------------------

TITLE: Importing Data to Global Upstash Redis Database
DESCRIPTION: Command to import data from a dump file to a global Upstash Redis database using the upstash-redis-dump tool. It specifies the database, host, port, password, enables TLS, and uses the import flag.

LANGUAGE: bash
CODE:
cat redis.dump | upstash-redis-dump -db 0 -host YOUR_GLOBAL_HOST -port 6379 -pass YOUR_PASSWORD -tls -import

----------------------------------------

TITLE: Removing Members from Redis Sorted Set using ZREM
DESCRIPTION: Example demonstrates using ZREM to remove members from a sorted set. The code first adds members to a sorted set with scores, then attempts to remove two members ('one' and 'four'), returning the count of successfully removed members.

LANGUAGE: python
CODE:
redis.zadd("myset", {"one": 1, "two": 2, "three": 3})

assert redis.zrem("myset", "one", "four") == 1

----------------------------------------

TITLE: Popping First Element from JSON Array in Upstash Redis using TypeScript
DESCRIPTION: This example shows how to use the JSON.ARRPOP command to remove and return the first element (index 0) from a JSON array stored in Upstash Redis. It explicitly specifies the index as 0 to pop the first element.

LANGUAGE: typescript
CODE:
const firstElement = await redis.json.arrpop("key", "$.path.to.array", 0);

----------------------------------------

TITLE: Simple ZINTERSTORE Operation in Python
DESCRIPTION: Demonstrates a basic usage of ZINTERSTORE to find the intersection of two sorted sets and store the result in a new key.

LANGUAGE: python
CODE:
redis.zadd("key1", {"a": 1, "b": 2, "c": 3})

redis.zadd("key2", {"c": 3, "d": 4, "e": 5})

result = redis.zinterstore("dest", ["key1", "key2"])

assert result == 1

----------------------------------------

TITLE: Calculating Set Difference using Redis SDIFF Command in Python
DESCRIPTION: Demonstrates how to use the SDIFF command to find the difference between two Redis sets. The example adds elements to two sets and then finds elements that exist in the first set but not in the second set.

LANGUAGE: python
CODE:
redis.sadd("set1", "a", "b", "c"); 
redis.sadd("set2", "c", "d", "e"); 

assert redis.sdiff("set1", "set2") == {"a", "b"}

----------------------------------------

TITLE: Executing BITPOS Command in Python with Redis
DESCRIPTION: This snippet demonstrates how to use the BITPOS command in Python with Redis. It shows setting bits, finding the first set and clear bit positions, and using range parameters.

LANGUAGE: python
CODE:
redis.setbit("mykey", 7, 1)
redis.setbit("mykey", 8, 1)

assert redis.bitpos("mykey", 1) == 7
assert redis.bitpos("mykey", 0) == 0

# With a range
assert redis.bitpos("mykey", 1, 0, 2) == 0
assert redis.bitpos("mykey", 1, 2, 3) == -1

----------------------------------------

TITLE: Setting Expiration on Redis Keys using PEXPIRE in Python
DESCRIPTION: Demonstrates how to use the PEXPIRE command to set a timeout on Redis keys. Shows examples using both milliseconds and datetime.timedelta.

LANGUAGE: python
CODE:
# With milliseconds
redis.set("mykey", "Hello")
redis.expire("mykey", 500)

# With a timedelta
redis.set("mykey", "Hello")
redis.expire("mykey", datetime.timedelta(milliseconds=500))

----------------------------------------

TITLE: Installing Next.js and Redis Package
DESCRIPTION: Commands to create a new Next.js application with App Router and install the @upstash/redis package.

LANGUAGE: shell
CODE:
npx create-next-app@latest
cd my-app
npm install @upstash/redis

----------------------------------------

TITLE: Removing Elements from Redis List using LREM in Python
DESCRIPTION: This example demonstrates how to use the LREM command to remove elements from a Redis list. It creates a list, removes two occurrences of the element 'two', and verifies the result using LRANGE.

LANGUAGE: python
CODE:
redis.rpush("mylist", "one", "two", "three", "two", "one")

assert redis.lrem("mylist", 2, "two") == 2

assert redis.lrange("mylist", 0, -1) == ["one", "three", "one"]

----------------------------------------

TITLE: Remove List Elements Using LREM - TypeScript
DESCRIPTION: Demonstrates using the LREM command to remove multiple occurrences of elements from a Redis list. First pushes multiple elements to a list using LPUSH, then removes occurrences of a specific element using LREM. Returns the count of elements removed.

LANGUAGE: typescript
CODE:
await redis.lpush("key", "a", "a", "b", "b", "c"); 
const removed = await redis.lrem("key", 4, "b"); 
console.log(removed) // 2

----------------------------------------

TITLE: Executing Lua Script with EVAL in Redis (Python)
DESCRIPTION: This example demonstrates how to use the EVAL command to execute a Lua script that retrieves a value from Redis. It sets a key-value pair and then uses EVAL to fetch the value.

LANGUAGE: python
CODE:
script = """
local value = redis.call("GET", KEYS[1])
return value
"""

redis.set("mykey", "Hello")

assert redis.eval(script, keys=["mykey"]) == "Hello"

----------------------------------------

TITLE: Retrieving Reverse Rank from Redis Sorted Set in Python
DESCRIPTION: Demonstrates adding members to a sorted set and retrieving the reverse rank of a member. The example shows how scores are ordered from high to low, with the member having score 1 having a reverse rank of 2.

LANGUAGE: python
CODE:
redis.zadd("myset", {"a": 1, "b": 2, "c": 3})

assert redis.zrevrank("myset", "a") == 2

----------------------------------------

TITLE: Adding Members to Redis Sorted Set using ZADD
DESCRIPTION: Demonstrates the basic usage of the ZADD command to add multiple members with their scores to a sorted set.

LANGUAGE: typescript
CODE:
await redis.zadd(
    "key", 
    { score: 2, member: "member" }, 
    { score: 3, member: "member2"},
);

----------------------------------------

TITLE: Retrieving a Single Bit with GETBIT in Python
DESCRIPTION: This snippet demonstrates how to use the GETBIT command in Redis using Python. It retrieves the value of a single bit at a specified offset within a bitset.

LANGUAGE: python
CODE:
bit = redis.getbit(key, 4)

----------------------------------------

TITLE: Setting Key Expiration with EXPIREAT in Python
DESCRIPTION: Demonstrates how to use the EXPIREAT command to set a timeout on a Redis key using both a datetime object and a unix timestamp. The key will be automatically deleted when the timeout is reached.

LANGUAGE: python
CODE:
# With a datetime object
redis.set("mykey", "Hello")
redis.expireat("mykey", datetime.datetime.now() + datetime.timedelta(seconds=5))

# With a unix timestamp
redis.set("mykey", "Hello")
redis.expireat("mykey", int(time.time()) + 5)

----------------------------------------

TITLE: Running the Flask-SocketIO Chat Application
DESCRIPTION: This command starts the Flask server, making the chat application accessible at http://localhost:8000/.

LANGUAGE: bash
CODE:
python app.py

----------------------------------------

TITLE: Using LPUSHX in Python with Redis
DESCRIPTION: This example demonstrates how to use the LPUSHX command in Python with Redis. It shows initializing a list, pushing multiple elements to an existing list, and attempting to push to a non-existent list.

LANGUAGE: python
CODE:
# Initialize the list
redis.lpush("mylist", "one")

assert redis.lpushx("mylist", "two", "three") == 3

assert lrange("mylist", 0, -1) == ["three", "two", "one"]

# Non existing key
assert redis.lpushx("non-existent-list", "one") == 0

----------------------------------------

TITLE: Publishing Messages to Redis Channel using TypeScript
DESCRIPTION: Demonstrates how to publish a message to a Redis channel using Upstash Redis client. The command returns the number of subscribers that received the message.

LANGUAGE: typescript
CODE:
const listeners = await redis.publish("my-topic", "my-message");

----------------------------------------

TITLE: Using ZCARD Command with Redis in Python
DESCRIPTION: This example demonstrates how to use the ZCARD command in Redis using Python. It first adds elements to a sorted set named 'myset' using the ZADD command, then uses ZCARD to count the number of elements in the set.

LANGUAGE: python
CODE:
redis.zadd("myset", {"one": 1, "two": 2, "three": 3})

assert redis.zcard("myset") == 3

----------------------------------------

TITLE: Setting Key Expiration with EXPIREAT in TypeScript
DESCRIPTION: Example showing how to set a value and then apply an expiration timestamp 10 seconds in the future. The code first sets a key-value pair and then uses expireat to set its expiration time.

LANGUAGE: typescript
CODE:
await redis.set("mykey", "Hello");
const tenSecondsFromNow = Math.floor(Date.now() / 1000) + 10;
await redis.expireat("mykey", tenSecondsFromNow);

----------------------------------------

TITLE: Removing Multiple Elements from List using LPOP - Python
DESCRIPTION: Shows how to remove multiple elements from the beginning of a list using LPOP with a count parameter. The example removes and returns the first two elements as an array.

LANGUAGE: python
CODE:
redis.rpush("mylist", "one", "two", "three")

assert redis.lpop("mylist", 2) == ["one", "two"]

----------------------------------------

TITLE: Querying Hash String Length with HSTRLEN in TypeScript
DESCRIPTION: This example demonstrates how to use the HSTRLEN command to get the length of a string value in a Redis hash. It requires a Redis client instance named 'redis' and returns the length of the specified field's value.

LANGUAGE: typescript
CODE:
const length = await redis.hstrlen("key", "field")

----------------------------------------

TITLE: Using BITCOUNT in Python with Redis
DESCRIPTION: Demonstrates how to use the BITCOUNT command in Python to count set bits in a Redis binary string. Shows both range-based counting and full string counting after setting specific bits using SETBIT.

LANGUAGE: python
CODE:
redis.setbit("mykey", 7, 1)
redis.setbit("mykey", 8, 1)
redis.setbit("mykey", 9, 1)

# With range
assert redis.bitcount("mykey", 0, 10) == 3

# Without range
assert redis.bitcount("mykey") == 3

----------------------------------------

TITLE: Installing Required Libraries for Flask-SocketIO Chat Application
DESCRIPTION: This command installs Flask, Flask-SocketIO, and the Redis library, which are necessary for building the chat application.

LANGUAGE: bash
CODE:
pip install flask flask-socketio redis

----------------------------------------

TITLE: Retrieving Range of Elements from Redis List using LRANGE in TypeScript
DESCRIPTION: This example demonstrates how to use the LRANGE command to retrieve a range of elements from a Redis list. It first pushes elements to a list using LPUSH, then retrieves elements from index 1 to 2 using LRANGE.

LANGUAGE: typescript
CODE:
await redis.lpush("key", "a", "b", "c");
const elements = await redis.lrange("key", 1, 2);
console.log(elements) // ["b", "c"]

----------------------------------------

TITLE: Appending Entry to Redis Stream using XADD in TypeScript
DESCRIPTION: This snippet demonstrates how to use the XADD command to append a new entry to a Redis stream. It uses an automatically generated ID and adds key-value data for 'name' and 'age'.

LANGUAGE: typescript
CODE:
await redis.xadd(key, "*", { name: "John Doe", age: 30 });

----------------------------------------

TITLE: Executing EVALSHA Command in Python with Redis
DESCRIPTION: This snippet demonstrates how to use the EVALSHA command in Python to evaluate a cached Lua script on the Redis server. It passes a SHA1 hash of the script and an argument, then asserts the expected result.

LANGUAGE: python
CODE:
result = redis.evalsha("fb67a0c03b48ddbf8b4c9b011e779563bdbc28cb", args=["hello"])
assert result = "hello"

----------------------------------------

TITLE: Using LPOS with Rank Parameter in Redis List with Python
DESCRIPTION: This example shows how to use the LPOS command with the 'rank' parameter to find the index of a specific occurrence of an element in a Redis list. It pushes multiple elements to a list and then finds the second occurrence of 'b'.

LANGUAGE: python
CODE:
redis.rpush("key", "a", "b", "c", "b"); 

assert redis.lpos("key", "b", rank=2) == 3

----------------------------------------

TITLE: Using GETDEL with TypeScript Generics in Upstash Redis
DESCRIPTION: Demonstrates how to use the GETDEL command with TypeScript generics to retrieve and delete a typed key-value pair. The example shows retrieving an object with specific type structure.

LANGUAGE: typescript
CODE:
type MyType = {
    a: number;
    b: string;
}
await redis.getdel<MyType>("key");
// returns {a: 1, b: "2"}

----------------------------------------

TITLE: Retrieving Hash Values with HVALS in Python
DESCRIPTION: This example demonstrates how to use the HVALS command in Redis to retrieve all values from a hash. It first sets values in a hash using HSET, then retrieves all values using HVALS.

LANGUAGE: python
CODE:
redis.hset("myhash", values={
  "field1": "Hello",
  "field2": "World"
})

assert redis.hvals("myhash") == ["Hello", "World"]

----------------------------------------

TITLE: Retrieving JSON Array Length in Redis using Python
DESCRIPTION: Example showing how to get the length of a JSON array stored in Redis using the json.arrlen method. The method takes a key and a JSONPath expression to specify the location of the array.

LANGUAGE: python
CODE:
length = redis.json.arrlen("key", "$.path.to.array")

----------------------------------------

TITLE: Creating Java Serverless Project
DESCRIPTION: Commands to create and navigate to a new AWS Java Maven project using Serverless Framework

LANGUAGE: shell
CODE:
serverless create --template aws-java-maven --name counter-api -p aws-java-counter-api

LANGUAGE: shell
CODE:
cd aws-java-counter-api

----------------------------------------

TITLE: Trimming a List with LTRIM in Upstash Redis (TypeScript)
DESCRIPTION: This example demonstrates how to use the LTRIM command to trim a Redis list to a specified range. It first pushes elements to a list using LPUSH, then trims the list to keep only the second and third elements.

LANGUAGE: typescript
CODE:
await redis.lpush("key", "a", "b", "c", "d"); 
await redis.ltrim("key", 1, 2); 
// the list is now ["b", "c"]

----------------------------------------

TITLE: Executing LMOVE Command in Redis with Python
DESCRIPTION: This snippet demonstrates how to use the LMOVE command in Redis using Python. It shows moving an element from the right of a source list to the left of a destination list, and then verifies the operation's result.

LANGUAGE: python
CODE:
redis.rpush("source", "one", "two", "three")
redis.lpush("destination", "four", "five", "six")

assert redis.lmove("source", "destination", "RIGHT", "LEFT") == "three"

assert redis.lrange("source", 0, -1) == ["one", "two"]

----------------------------------------

TITLE: Modifying String Values with SETRANGE in TypeScript
DESCRIPTION: Demonstrates how to use the SETRANGE command to partially update a Redis string value. The example shows setting an initial value with SET, then using SETRANGE to modify a portion of the string at offset 5. Returns the final string length after modification.

LANGUAGE: typescript
CODE:
await redis.set("key", "helloworld")
const length = await redis.setrange("key", 5, "redis");
console.log(length); // 10

// The value of "key" is now "helloredis"

----------------------------------------

TITLE: Incrementing Score of a Member in Redis Sorted Set using TypeScript
DESCRIPTION: This snippet demonstrates how to use the ZINCRBY command in Redis. It first adds a member to a sorted set, then increments its score, and finally logs the new score.

LANGUAGE: typescript
CODE:
await redis.zadd("key", 1, "member");
const value = await redis.zincrby("key", 2, "member");
console.log(value); // 3

----------------------------------------

TITLE: Using GETRANGE in Python with Upstash Redis
DESCRIPTION: This example demonstrates how to use the GETRANGE command in Python with Upstash Redis. It first sets a key-value pair and then retrieves a substring of the value using GETRANGE.

LANGUAGE: python
CODE:
redis.set("key", "Hello World")

assert redis.getrange("key", 0, 4) == "Hello"

----------------------------------------

TITLE: Checking Set Membership with SISMEMBER in Upstash Redis (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the SISMEMBER command to check if a member exists in a set. It first adds elements to a set using SADD, then checks for membership using SISMEMBER.

LANGUAGE: typescript
CODE:
await redis.sadd("set", "a", "b", "c"); 
const isMember =  await redis.sismember("set", "a");
console.log(isMember); // 1

----------------------------------------

TITLE: Appending Values to JSON Array in Upstash Redis using Python
DESCRIPTION: This snippet demonstrates how to use the JSON.ARRAPPEND command in Upstash Redis to append a value to an array within a JSON document. It requires a Redis connection and uses the 'json' module of the Redis client. The command takes a key, a path to the array, and one or more values to append.

LANGUAGE: python
CODE:
redis.json.arrappend("key", "$.path.to.array", "a")

----------------------------------------

TITLE: Package Dependencies Configuration for Google Cloud Functions
DESCRIPTION: Package.json configuration specifying required dependencies for the Redis counter function, including @upstash/redis client and Google Cloud Functions framework.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "@google-cloud/functions-framework": "^3.0.0",
    "@upstash/redis": "^1.31.6"
  }
}

----------------------------------------

TITLE: Executing Pipeline Commands via Upstash Redis REST API
DESCRIPTION: This snippet demonstrates how to execute multiple Redis commands in a pipeline using the Upstash Redis REST API. It includes SET, SETEX, INCR, and ZADD commands in a single request.

LANGUAGE: shell
CODE:
curl -X POST https://us1-merry-cat-32748.upstash.io/pipeline \
 -H "Authorization: Bearer 2553feg6a2d9842h2a0gcdb5f8efe9934" \
 -d '
    [
      ["SET", "key1", "valuex"],
      ["SETEX", "key2", 13, "valuez"],
      ["INCR", "key1"],
      ["ZADD", "myset", 11, "item1", 22, "item2"]
    ]
    '

----------------------------------------

TITLE: Removing Multiple Random Members from Redis Set using SPOP with Count
DESCRIPTION: Shows how to remove multiple random members from a set using SPOP with a count parameter. The example adds three members and removes two random members, verifying they were part of the original set.

LANGUAGE: python
CODE:
redis.sadd("myset", "one", "two", "three")

assert redis.spop("myset", 2) in {"one", "two", "three"}

----------------------------------------

TITLE: Initializing AWS SAM Project
DESCRIPTION: Interactive CLI commands to create a new AWS SAM project with basic Hello World template.

LANGUAGE: shell
CODE:
➜  tutorials > ✗ sam init
Which template source would you like to use?
	1 - AWS Quick Start Templates
	2 - Custom Template Location
Choice: 1

Choose an AWS Quick Start application template
	1 - Hello World Example
	2 - Data processing
	3 - Hello World Example with Powertools for AWS Lambda
	4 - Multi-step workflow
	5 - Scheduled task
	6 - Standalone function
	7 - Serverless API
	8 - Infrastructure event management
	9 - Lambda Response Streaming
	10 - Serverless Connector Hello World Example
	11 - Multi-step workflow with Connectors
	12 - GraphQLApi Hello World Example
	13 - Full Stack
	14 - Lambda EFS example
	15 - DynamoDB Example
	16 - Machine Learning
Template: 1

Use the most popular runtime and package type? (Python and zip) [y/N]: y

Would you like to enable X-Ray tracing on the function(s) in your application?  [y/N]: N

Would you like to enable monitoring using CloudWatch Application Insights?
For more info, please view https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch-application-insights.html [y/N]: N

Would you like to set Structured Logging in JSON format on your Lambda functions?  [y/N]: N

----------------------------------------

TITLE: Retrieving JSON Value in RESP Format with Redis in Python
DESCRIPTION: This snippet demonstrates how to use the json.resp method to retrieve a JSON value at a specified path in Redis serialization protocol format. It requires a Redis connection and takes a key and path as arguments.

LANGUAGE: python
CODE:
resp = redis.json.resp("key", "$.path")

----------------------------------------

TITLE: Setting JSON Values with NX Option in Upstash Redis
DESCRIPTION: Example of setting a JSON value with the NX option, which only sets the value if the path doesn't exist.

LANGUAGE: typescript
CODE:
const value = ...
redis.json.set(key, "$.path", value, { nx:true });

----------------------------------------

TITLE: Setting JSON Values in Redis - NX Flag
DESCRIPTION: Sets a JSON value at the specified path only if it does not already exist. Uses the nx=true flag to implement this conditional behavior.

LANGUAGE: python
CODE:
value = ...
redis.json.set(key, "$.path", value, nx=true)

----------------------------------------

TITLE: Deleting a JSON Key with JSON.DEL in Python for Upstash Redis
DESCRIPTION: This snippet demonstrates how to use the JSON.DEL command in Upstash Redis using Python. It deletes a specific path within a JSON document stored under a given key.

LANGUAGE: python
CODE:
redis.json.del("key", "$.path.to.value")

----------------------------------------

TITLE: Configuring Serverless YAML
DESCRIPTION: YAML configuration for AWS Lambda function with Java 17 runtime and HTTP API endpoint

LANGUAGE: yaml
CODE:
service: counter-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: java17

package:
  artifact: target/hello-dev.jar

functions:
 hello:
   handler: com.serverless.Handler
   events:
     - httpApi:
         path: /hello
         method: get

----------------------------------------

TITLE: Creating React Application with create-react-app
DESCRIPTION: Initial setup command to create a new React application for the notification system

LANGUAGE: shell
CODE:
npx create-react-app serverless-notification-api

----------------------------------------

TITLE: Removing Multiple Random Members from a Set using SPOP with Count in Upstash Redis (TypeScript)
DESCRIPTION: This example shows how to use the SPOP command with a count parameter to remove and return multiple random members from a set in Upstash Redis. It adds elements to a set using SADD, then uses SPOP with a count of 2 to remove and return two random members.

LANGUAGE: typescript
CODE:
await redis.sadd("set", "a", "b", "c"); 
const popped = await redis.spop("set", 2);
console.log(popped); // ["a", "b"]

----------------------------------------

TITLE: Appending and Trimming Redis Stream using XADD in TypeScript
DESCRIPTION: This example shows how to use the XADD command with trimming options. It appends a new entry to the stream and applies a MAXLEN trim to limit the stream to 1000 entries.

LANGUAGE: typescript
CODE:
await redis.xadd(key, "*", { name: "John Doe", age: 30 }, {
  trim: {
    type: "MAXLEN",
    threshold: 1000,
    comparison: "=",
  },
});

----------------------------------------

TITLE: Controlling Result Count with HSCAN
DESCRIPTION: Illustrates how to control the number of returned fields using the count option in hscan. Sets a specific count to limit the number of fields returned per call.

LANGUAGE: typescript
CODE:
await redis.hset("key", {
  id: 1,
  username: "chronark",
  name: "andreas",
});
const [newCursor, fields] = await redis.hscan("key", 0, { count: 2 });
console.log(fields); // ["id", 1, "name", "andreas", "username", "chronark"]

----------------------------------------

TITLE: Setting JSON Values in Redis - XX Flag
DESCRIPTION: Sets a JSON value at the specified path only if it already exists. Uses the xx=true flag to implement this conditional behavior.

LANGUAGE: python
CODE:
value = ...
redis.json.set(key, "$.path", value, xx=true)

----------------------------------------

TITLE: Setting Key Expiration with PEXPIRE in Typescript for Upstash Redis
DESCRIPTION: This snippet demonstrates how to use the PEXPIRE command to set a timeout on a key in Upstash Redis. It sets the expiration time to 60,000 milliseconds (1 minute) for the specified key.

LANGUAGE: typescript
CODE:
await redis.pexpire(key, 60_000); // 1 minute

----------------------------------------

TITLE: Reverse Order ZRANGE Query in Python
DESCRIPTION: Shows how to retrieve elements in reverse order using the rev parameter. Returns elements from highest to lowest score.

LANGUAGE: python
CODE:
redis.zadd("myset", {"a": 1, "b": 2, "c": 3})

assert redis.zrange("myset", 0, 1, rev=True) == ["c", "b"]

----------------------------------------

TITLE: Deleting JSON Key Using JSON.FORGET in Python with Upstash Redis
DESCRIPTION: This snippet demonstrates how to use the JSON.FORGET command in Upstash Redis to delete a specific key from a JSON document. It takes two arguments: the key of the JSON entry and the path to forget within the JSON structure.

LANGUAGE: python
CODE:
redis.json.forget("key", "$.path.to.value")

----------------------------------------

TITLE: Environment Configuration - Shell Commands
DESCRIPTION: Commands to export the required Upstash Redis credentials as environment variables.

LANGUAGE: shell
CODE:
export UPSTASH_REDIS_REST_URL=<YOUR_URL>
export UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Running the Python Web Scraper Script
DESCRIPTION: Command to execute the Python script containing the multithreaded web scraper with Redis caching.

LANGUAGE: bash
CODE:
python your_script_name.py

----------------------------------------

TITLE: Retrieving Set Cardinality with SCARD in TypeScript
DESCRIPTION: This example demonstrates how to use the SCARD command to get the number of members in a Redis set. It first adds elements to a set using SADD, then retrieves the cardinality using SCARD.

LANGUAGE: typescript
CODE:
await redis.sadd("key", "a", "b", "c"); 
const cardinality = await redis.scard("key");
console.log(cardinality); // 3

----------------------------------------

TITLE: Setting Multiple Values with MSET in Upstash Redis (TypeScript)
DESCRIPTION: Shows how to use the MSET command to set multiple key-value pairs simultaneously in Upstash Redis. This operation counts as a single command for billing purposes. The example demonstrates setting different types of values including an object, a string, and a boolean.

LANGUAGE: typescript
CODE:
await redis.mset({
  key1: { a: 1 },
  key2: "value2",
  key3: true,
});

----------------------------------------

TITLE: Removing Key Timeout using Redis PERSIST Command in TypeScript
DESCRIPTION: Example showing how to remove a timeout from a Redis key using the PERSIST command. The command takes a key parameter and returns 1 if the timeout was successfully removed or 0 if the key doesn't exist or had no timeout.

LANGUAGE: typescript
CODE:
await redis.persist(key);

----------------------------------------

TITLE: Scanning Sorted Set with Count Limit in Redis using TypeScript
DESCRIPTION: This example shows how to use the ZSCAN command with a count limit to control the number of returned members per iteration. It adds elements to a sorted set, then scans the set with a pattern match and a count limit.

LANGUAGE: typescript
CODE:
await redis.zadd("key", 
    { score: 1, member: "a" },
    { score: 2, member: "ab" },
    { score: 3, member: "b" },
    { score: 4, member: "c" },
    { score: 5, member: "d" },
)
const [newCursor, members] = await redis.sscan("key", 0, { match: "a*", count: 1});
console.log(newCursor); // likely `0` since this is a very small set
console.log(members); // ["a"]

----------------------------------------

TITLE: Retrieving Old Value When Setting a New Key in Redis
DESCRIPTION: This example shows how to use the 'get' option to retrieve the old value of a key when setting a new value in Redis.

LANGUAGE: python
CODE:
# Get the old value stored at the key.
assert redis.set("key", "new-value", get=True) == "old-value"

----------------------------------------

TITLE: Setting Key Expiration in Redis using TypeScript
DESCRIPTION: Demonstrates how to set a value for a key and then configure it to expire after a specified number of seconds. The example shows setting 'mykey' with value 'Hello' and configuring it to expire after 10 seconds.

LANGUAGE: typescript
CODE:
await redis.set("mykey", "Hello");
await redis.expire("mykey", 10);

----------------------------------------

TITLE: Running Nuxt.js Application with Redis Integration
DESCRIPTION: Start the Nuxt.js development server and test the Redis-integrated API endpoint using curl.

LANGUAGE: bash
CODE:
npm run dev

LANGUAGE: bash
CODE:
curl http://localhost:3000/api/increment

----------------------------------------

TITLE: Installing Upstash Redis Python Client via PyPI
DESCRIPTION: Command to install the upstash-redis package using pip package manager.

LANGUAGE: bash
CODE:
pip install upstash-redis

----------------------------------------

TITLE: Demonstrating SDIFFSTORE in TypeScript with Redis
DESCRIPTION: This example shows how to use the SDIFFSTORE command in TypeScript. It adds elements to two sets, performs a set difference operation, and stores the result in a new set.

LANGUAGE: typescript
CODE:
await redis.sadd("set1", "a", "b", "c"); 
await redis.sadd("set2", "c", "d", "e"); 
await redis.sdiff("dest", "set1", "set2");
console.log(diff); // ["a", "b"]

----------------------------------------

TITLE: Decrementing Integer Value Using DECRBY in Upstash Redis (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the DECRBY command in Upstash Redis. It first sets a key to an initial value of 6, then decrements it by 4, resulting in a final value of 2.

LANGUAGE: typescript
CODE:
await redis.set("key", 6);
await redis.decrby("key", 4);
// returns 2

----------------------------------------

TITLE: Setting Key Expiration in Redis using TypeScript
DESCRIPTION: Demonstrates how to set a value for a key and then configure it to expire after a specified number of seconds. The example shows setting 'mykey' with value 'Hello' and configuring it to expire after 10 seconds.

LANGUAGE: typescript
CODE:
await redis.set("mykey", "Hello");
await redis.expire("mykey", 10);

----------------------------------------

TITLE: Importing and Using TagFilters Component in React
DESCRIPTION: This code snippet demonstrates how to import and use a custom TagFilters component to display a list of Upstash Redis examples. Each item in the list represents a tutorial or article with associated tags, type, and external link.

LANGUAGE: jsx
CODE:
import TagFilters from "../../src/components/Filter.js"

<TagFilters>
  <TagFilters.Item
    externalLink
    type="Article"
    tags={["Svelte"]}
    url="https://blog.upstash.com/sveltekit-todo-redis"
  >
    SvelteKit TODO App with Redis
  </TagFilters.Item>
  {/* Additional TagFilters.Item components... */}
</TagFilters>

----------------------------------------

TITLE: Configuring Celery with Upstash Redis in Python
DESCRIPTION: Python code to set up Celery with Upstash Redis as both broker and backend. It loads environment variables, constructs the connection string, and defines a sample task.

LANGUAGE: python
CODE:
import os
from celery import Celery
from dotenv import load_dotenv

load_dotenv()

# Configure Celery with Upstash Redis
UPSTASH_REDIS_HOST = os.getenv("UPSTASH_REDIS_HOST")
UPSTASH_REDIS_PORT = os.getenv("UPSTASH_REDIS_PORT")
UPSTASH_REDIS_PASSWORD = os.getenv("UPSTASH_REDIS_PASSWORD")

connection_link = f"rediss://:{UPSTASH_REDIS_PASSWORD}@{UPSTASH_REDIS_HOST}:{UPSTASH_REDIS_PORT}?ssl_cert_reqs=required"

celery_app = Celery("tasks", broker=connection_link, backend=connection_link)

@celery_app.task
def add(x, y):
    return x + y

----------------------------------------

TITLE: Executing Transaction Commands via Upstash Redis REST API
DESCRIPTION: This snippet demonstrates how to execute multiple Redis commands in a transaction using the Upstash Redis REST API. It includes SET, SETEX, INCR, and ZADD commands in a single atomic transaction.

LANGUAGE: shell
CODE:
curl -X POST https://us1-merry-cat-32748.upstash.io/multi-exec \
 -H "Authorization: Bearer 2553feg6a2d9842h2a0gcdb5f8efe9934" \
 -d '
    [
      ["SET", "key1", "valuex"],
      ["SETEX", "key2", 13, "valuez"],
      ["INCR", "key1"],
      ["ZADD", "myset", 11, "item1", 22, "item2"]
    ]
    '

----------------------------------------

TITLE: Basic ZRANGE Query in Python
DESCRIPTION: Demonstrates basic usage of ZRANGE to retrieve elements from a sorted set. Creates a sorted set with three elements and retrieves the first two elements by index.

LANGUAGE: python
CODE:
redis.zadd("myset", {"a": 1, "b": 2, "c": 3})

assert redis.zrange("myset", 0, 1) == ["a", "b"]

----------------------------------------

TITLE: Updating Wrangler Configuration for Deployment
DESCRIPTION: This TOML configuration update changes the project type to 'webpack' for deployment of the Cloudflare Workers project.

LANGUAGE: toml
CODE:
name = "edge-leaderboard"
type = "webpack"

----------------------------------------

TITLE: Executing Cached Lua Script with EVALSHA_RO in TypeScript
DESCRIPTION: Demonstrates how to execute a cached read-only Lua script using its SHA1 hash. The example shows calling evalsha_ro with a hash value, empty keys array, and a single argument array containing 'hello'.

LANGUAGE: typescript
CODE:
const result = await redis.evalsha_ro("fb67a0c03b48ddbf8b4c9b011e779563bdbc28cb", [], ["hello"]);
console.log(result) // "hello"

----------------------------------------

TITLE: Appending Entries to Redis Stream with XADD
DESCRIPTION: This snippet demonstrates how to use the XADD command to append a new entry to a Redis stream. It adds a key-value pair with a name and age to the stream, using an automatically generated ID.

LANGUAGE: python
CODE:
redis.xadd(key, "*", { name: "John Doe", age: 30 })

----------------------------------------

TITLE: Adding and Counting Members in Redis Sorted Set using Python
DESCRIPTION: Example showing how to add multiple members with scores to a sorted set using ZADD and verify the count using ZLEXCOUNT. The code demonstrates adding three members with different scores and checking the total count.

LANGUAGE: python
CODE:
redis.zadd("myset", {"a": 1, "b": 2, "c": 3})

assert redis.zlexcount("myset", "-", "+") == 3

----------------------------------------

TITLE: Starting Celery worker from command line
DESCRIPTION: Bash command to start a Celery worker that will execute tasks defined in the 'tasks' module.

LANGUAGE: bash
CODE:
celery -A tasks worker --loglevel=info

----------------------------------------

TITLE: Subscribing to a Channel via Upstash Redis REST API
DESCRIPTION: This snippet demonstrates how to subscribe to a Redis channel named 'chat' using the Upstash Redis REST API with Server Sent Events.

LANGUAGE: shell
CODE:
curl -X POST https://us1-merry-cat-32748.upstash.io/subscribe/chat \
  -H "Authorization: Bearer 2553feg6a2d9842h2a0gcdb5f8efe9934" \
  -H "Accept:text/event-stream"

----------------------------------------

TITLE: Using LPOS Command with Rank Option in Upstash Redis
DESCRIPTION: Shows how to use the LPOS command with the rank option to find the index of a specific occurrence of an element in a Redis list. This example demonstrates finding the second occurrence of an element.

LANGUAGE: typescript
CODE:
await redis.rpush("key", "a", "b", "c", "b"); 
const index = await redis.lpos("key", "b", { rank: 2 });
console.log(index); // 3

----------------------------------------

TITLE: Testing Leaderboard API with cURL Commands
DESCRIPTION: These shell commands demonstrate how to test the leaderboard API by adding scores and retrieving the leaderboard, including a command to measure request latency.

LANGUAGE: shell
CODE:
curl -X POST http://127.0.0.1:8787\?player\=messi\&score\=13

curl -X POST http://127.0.0.1:8787\?player\=ronaldo\&score\=17

curl -X POST http://127.0.0.1:8787\?player\=benzema\&score\=18

curl -w '\n Latency: %{time_total}s\n' http://127.0.0.1:8787

----------------------------------------

TITLE: Counting Elements in Redis Sorted Set using ZCOUNT
DESCRIPTION: This example demonstrates how to use the ZCOUNT command in Redis. It first adds elements to a sorted set with scores, then counts the number of elements with scores between a specified range.

LANGUAGE: python
CODE:
redis.zadd("key", 
    { score: 1, member: "one"}, 
    { score: 2, member: "two" },
)
elements = redis.zcount("key", "(1", "+inf")
print(elements); # 1

----------------------------------------

TITLE: Retrieving and Setting Redis Value Atomically with GETSET in Python
DESCRIPTION: This example demonstrates how to use the GETSET command in Redis using Python. It sets an initial value, then uses GETSET to retrieve the old value while setting a new one.

LANGUAGE: python
CODE:
redis.set("key", "old-value")

assert redis.getset("key", "newvalue") == "old-value"

----------------------------------------

TITLE: Creating Project Directory - Shell Commands
DESCRIPTION: Initial setup commands to create and navigate to the project directory for the CDK application.

LANGUAGE: shell
CODE:
mkdir counter-cdk && cd counter-cdk

----------------------------------------

TITLE: Installing Sidekiq Dependencies
DESCRIPTION: Initial setup commands to create a new Ruby project and add Sidekiq dependency using Bundler.

LANGUAGE: bash
CODE:
bundle init 
bundle add sidekiq

----------------------------------------

TITLE: Setting Redis Greetings via CLI
DESCRIPTION: Redis CLI commands to set greeting messages for different countries using the Upstash Redis database.

LANGUAGE: shell
CODE:
usw1-selected-termite-30690.upstash.io:30690> set GB "Ey up?"
OK
usw1-selected-termite-30690.upstash.io:30690> set US "Yo, what's up?"
OK
usw1-selected-termite-30690.upstash.io:30690> set TR "Naber dostum?"
OK
usw1-selected-termite-30690.upstash.io:30690> set DE "Was ist los?"

----------------------------------------

TITLE: Configuring Sidekiq with Upstash Redis
DESCRIPTION: Complete implementation of Sidekiq worker for email service, including Redis configuration, worker class definition, and helper methods for email scheduling and queue management.

LANGUAGE: python
CODE:
require "sidekiq"
require "sidekiq/api"
 
connection_url = ENV['UPSTASH_REDIS_LINK']
 
Sidekiq.configure_client do |config|
    config.redis = {url: connection_url}
end
 
Sidekiq.configure_server do |config|
    config.redis = {url: connection_url}
end
 
class EmailService
    include Sidekiq::Worker
    def perform(id, type)
        # Logic goes here. Let's assume sending email by printing to console.
        puts "Emailed to: " +  id + ": " + "'Congrats on " + type + " plan.'"
    end
end
 
def updateEmail(id, newType)
    jobFound = false
 
    a = Sidekiq::ScheduledSet.new
    a.each do |job|
        if job.args[0] == id
            job.delete
            jobFound = true
        end
    end
 
    if jobFound
        EmailService.perform_async(id, ("starting using our service and upgrading it to " + newType))
    else
        EmailService.perform_async(id, ("upgrading to " + newType))
    end
end
 
def sendEmail(id, type)
    case type
    when "free"
        # if free, delay for 10 seconds.
        EmailService.perform_in("10", id, "free")
    when "paid"
        # if paid, delay for 5 seconds.
        EmailService.perform_in("5", id, "paid")
    when "enterprise"
        # if enterprise, immediately queue.
        EmailService.perform_async(id, "enterprise")
    when "enterprise10k"
        EmailService.perform_async(id, "enterprise10k")
    else
        puts "Only plans are: `free`, `paid` and `enterprise`"
    end
end
 
def clearSchedules()
    Sidekiq::ScheduledSet.new.clear
    Sidekiq::Queue.new.clear
end

----------------------------------------

TITLE: Implementing Location-Based Greetings in Cloudflare Worker
DESCRIPTION: JavaScript code for a Cloudflare Worker that retrieves client location from request headers and serves corresponding greetings from Redis.

LANGUAGE: javascript
CODE:
// src/index.js

import { Redis } from "@upstash/redis/cloudflare";

export default {
  async fetch(request, env) {
    const redis = Redis.fromEnv(env);

    const country = request.headers.get("cf-ipcountry");
    if (country) {
      const greeting = await redis.get(country);
      if (greeting) {
        return new Response(greeting);
      }
    }

    return new Response("Hello!");
  },
};

----------------------------------------

TITLE: Attempting LPUSHX on Non-Existent Redis List in TypeScript
DESCRIPTION: This example shows the behavior of LPUSHX when trying to push an element to a non-existent list. The operation returns 0, indicating that no element was pushed and the list was not created.

LANGUAGE: typescript
CODE:
const length = await redis.lpushx("key", "a");
console.log(length); // 0

----------------------------------------

TITLE: Configuring Wrangler for Cloudflare Workers Project
DESCRIPTION: This TOML configuration sets up the Cloudflare Workers project, including the project name, type, account ID, and Upstash Redis token.

LANGUAGE: toml
CODE:
name = "edge-leaderboard"
type = "javascript"

account_id = "REPLACE_YOUR_ACCOUNT_ID"
workers_dev = true
route = ""
zone_id = ""

[vars]
TOKEN = "REPLACE_YOUR_UPSTASH_REST_TOKEN"

----------------------------------------

TITLE: Performing Set Intersection with SINTER in Python
DESCRIPTION: This snippet demonstrates how to use the SINTER command in Upstash Redis using Python. It creates two sets, performs an intersection, and stores the result in a destination key.

LANGUAGE: python
CODE:
redis.sadd("set1", "a", "b", "c"); 

redis.sadd("set2", "c", "d", "e"); 

assert redis.sinter("destination", "set1", "set2") == 1

----------------------------------------

TITLE: Incrementing a Key Value using INCR in Upstash Redis (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the INCR command in Upstash Redis to increment the value of a key. It first sets a key with an initial value, then increments it using the incr method. The expected result is the incremented value.

LANGUAGE: typescript
CODE:
await redis.set("key", 6);
await redis.incr("key");
// returns 7

----------------------------------------

TITLE: Deployment Commands - Shell
DESCRIPTION: CDK commands to synthesize, bootstrap, and deploy the application stack.

LANGUAGE: shell
CODE:
cdk synth
cdk bootstrap
cdk deploy

----------------------------------------

TITLE: Performing Set Union with Redis SUNIONSTORE in Python
DESCRIPTION: Demonstrates using the SUNIONSTORE command to combine two sets and store the result. First creates two sets with overlapping elements, then performs a union operation storing the result in a destination key.

LANGUAGE: python
CODE:
redis.sadd("set1", "a", "b", "c"); 
redis.sadd("set2", "c", "d", "e"); 
redis.sunionstore("destination", "set1", "set2")

----------------------------------------

TITLE: Configuring Upstash Redis Connection in Laravel
DESCRIPTION: Environment variables to be set in the .env file for connecting Laravel to an Upstash Redis database. It includes the Redis host, port, and password.

LANGUAGE: shell
CODE:
REDIS_HOST="<YOUR_ENDPOINT>"
REDIS_PORT=6379
REDIS_PASSWORD="<YOUR_PASSWORD>"

----------------------------------------

TITLE: Removing Single Element with RPOP in TypeScript
DESCRIPTION: Demonstrates using RPOP to remove and return the last element from a Redis list. First pushes elements to a list with RPUSH, then retrieves the last element using RPOP.

LANGUAGE: typescript
CODE:
await redis.rpush("key", "a", "b", "c"); 
const element = await redis.rpop("key");
console.log(element); // "c"

----------------------------------------

TITLE: Configuring Apollo Client in Next.js App
DESCRIPTION: Setup of Apollo Client for GraphQL integration in Next.js _app.js file, including authentication configuration with read-only access token

LANGUAGE: javascript
CODE:
import "../styles/globals.css";
import {
  ApolloClient,
  ApolloProvider,
  createHttpLink,
  InMemoryCache,
} from "@apollo/client";

const link = createHttpLink({
  uri: "https://graphql-us-east-1.upstash.io/",
  headers: {
    Authorization: "Bearer YOUR_ACCESS_TOKEN",
  },
});
const client = new ApolloClient({
  uri: "https://graphql-us-east-1.upstash.io/",
  cache: new InMemoryCache(),
  link,
});

function MyApp({ Component, pageProps }) {
  return (
    <ApolloProvider client={client}>
      <Component {...pageProps} />{" "}
    </ApolloProvider>
  );
}

export default MyApp;

----------------------------------------

TITLE: Incrementing Integer Value Using Redis INCRBY Command in Python
DESCRIPTION: Demonstrates how to increment a numeric value stored in Redis by a specified amount. First sets a key to value 6, then increments it by 4 to reach 10. Shows both the set and incrby operations.

LANGUAGE: python
CODE:
redis.set("key", 6)

assert redis.incrby("key", 4) == 10

----------------------------------------

TITLE: Implementing status and home page controllers
DESCRIPTION: Define controller actions for the status page and home page, including Redis connection testing.

LANGUAGE: elixir
CODE:
defmodule RedixDemoWeb.PageController do
  use RedixDemoWeb, :controller

  defmodule Payload do
    defstruct text: nil, weather: nil, location: nil
  end

  def status(conn, _params) do
    case Redix.command(:redix, ["PING"]) do
      {:ok, response} ->
        render_home(conn, %Payload{text: "Redis Connection Status: Success! Response to 'PING': '#{response}'"})
      {:error, response} ->
        render_home(conn, %Payload{text: "Redis Connection Status: Error. Reason: #{response.reason}"})
      end
  end

  def home(conn, _params) do
    render_home(conn, %Payload{text: "Enter a location above to get the weather info!"})
  end

  defp render_home(conn, %Payload{} = payload) do
    render(conn, "home.html", text: payload.text, weather: payload.weather, location: payload.location)
  end
end

----------------------------------------

TITLE: Removing Single Random Member from Redis Set using SPOP
DESCRIPTION: Demonstrates adding multiple members to a set and then removing a single random member using SPOP. The example validates that the popped member is one of the original set members.

LANGUAGE: python
CODE:
redis.sadd("myset", "one", "two", "three")

assert redis.spop("myset") in {"one", "two", "three"}

----------------------------------------

TITLE: Setting Upstash Redis as Laravel's Session Driver
DESCRIPTION: Environment variable to configure Upstash Redis as the session storage driver for Laravel, ensuring fast and reliable session management.

LANGUAGE: shell
CODE:
SESSION_DRIVER="redis"

----------------------------------------

TITLE: Incrementing Bitfield Values in Python with Upstash Redis
DESCRIPTION: This example shows how to increment values in a bitfield using the incr command. It increments two 4-bit unsigned integers at different offsets by different amounts.

LANGUAGE: python
CODE:
redis.set("mykey", "")

# Increment offset 0 by 16, return 
# Increment offset 4 by 1

result = redis.bitfield("mykey") \
    .incr("u4", 0, 16) \
    .incr("u4", 4, 1) \
    .execute()

assert result == [0, 1]

----------------------------------------

TITLE: Setting Up Environment Variables for Upstash Redis
DESCRIPTION: Export the Upstash Redis REST URL and token as environment variables. These are required for connecting to the Redis database.

LANGUAGE: shell
CODE:
export UPSTASH_REDIS_REST_URL=<YOUR_URL>
export UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Attempting RPUSHX on Non-Existent List in TypeScript
DESCRIPTION: This example shows the behavior of RPUSHX when used on a non-existent list. It attempts to push an element to a key that doesn't exist, resulting in no change and a return value of 0.

LANGUAGE: typescript
CODE:
const length = await redis.rpushx("key", "a"); 
console.log(length); // 0

----------------------------------------

TITLE: Setting Up Upstash Redis Environment Variables
DESCRIPTION: Shell commands to export Upstash Redis credentials as environment variables for the application.

LANGUAGE: shell
CODE:
export UPSTASH_REDIS_REST_URL=<YOUR_URL>
export UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Popping Last Element from JSON Array in Redis
DESCRIPTION: Removes and returns the last element from a JSON array stored in Redis. Uses default behavior of -1 index to pop the last element from the specified array path.

LANGUAGE: python
CODE:
element = redis.json.arrpop("key", "$.path.to.array")

----------------------------------------

TITLE: Retrieving Multiple Keys with MGET in Upstash Redis (TypeScript)
DESCRIPTION: Demonstrates how to use the MGET command to load multiple keys at once in Upstash Redis. This operation counts as a single command for billing purposes. If a key is not found, it will be returned as null in the response array.

LANGUAGE: typescript
CODE:
const values = await redis.mget("key1", "key2", "key3");

----------------------------------------

TITLE: Installing upstash-redis-dump Tool
DESCRIPTION: Command to install the upstash-redis-dump tool globally using npm. This tool is used for exporting and importing Redis data between databases.

LANGUAGE: bash
CODE:
npm install -g upstash-redis-dump

----------------------------------------

TITLE: Decrementing Integer Value Using Redis DECR Command
DESCRIPTION: Demonstrates how to use the DECR command to decrease a numeric value in Redis by one. First sets a key to value 6, then decrements it to 5. Shows both the SET and DECR operations.

LANGUAGE: python
CODE:
redis.set("key", 6)

assert redis.decr("key") == 5

----------------------------------------

TITLE: Running Django Development Server
DESCRIPTION: Start the Django development server to run the application locally. This makes the web application accessible at http://127.0.0.1:8000/.

LANGUAGE: shell
CODE:
python manage.py runserver

----------------------------------------

TITLE: ZUNIONSTORE with Weighted Sets
DESCRIPTION: Example demonstrating ZUNIONSTORE with weighted set operations, where different weights are applied to each input set before computing the union.

LANGUAGE: typescript
CODE:
await redis.zadd("key1", { score: 1, member: "member1" })
await redis.zadd("key2",{ score: 1, member: "member1" },{ score: 2, member: "member2" })
const res = await redis.zunionstore("destination",2,["key1", "key2"],{ weights: [2, 3] });
console.log(res) // 2

----------------------------------------

TITLE: Configuring AWS CDK Stack for Counter Function
DESCRIPTION: TypeScript code to set up the AWS CDK stack, including the Lambda function configuration and function URL.

LANGUAGE: typescript
CODE:
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as nodejs from 'aws-cdk-lib/aws-lambda-nodejs';

export class CounterCdkStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const counterFunction = new nodejs.NodejsFunction(this, 'CounterFunction', {
      entry: 'api/counter.ts',
      handler: 'handler',
      runtime: lambda.Runtime.NODEJS_20_X,
      environment: {
        UPSTASH_REDIS_REST_URL: process.env.UPSTASH_REDIS_REST_URL || '',
        UPSTASH_REDIS_REST_TOKEN: process.env.UPSTASH_REDIS_REST_TOKEN || '',
      },
      bundling: {
        format: nodejs.OutputFormat.ESM,
        target: "node20",
        nodeModules: ['@upstash/redis'],
      },
    });

    const counterFunctionUrl = counterFunction.addFunctionUrl({
      authType: lambda.FunctionUrlAuthType.NONE,
    });

    new cdk.CfnOutput(this, "counterFunctionUrlOutput", {
      value: counterFunctionUrl.url,
    })
  }
}

----------------------------------------

TITLE: Weighted Set Union in Redis
DESCRIPTION: Demonstrates zunionstore with weighted sets. Applies different weights to each input set before combining them, with score aggregation enabled.

LANGUAGE: python
CODE:
redis.zadd("key1", {"a": 1})

redis.zadd("key2", {"a": 1})

result = redis.zunionstore(["key1", "key2"],
                      withscores=True,
                      aggregate="SUM",
                      weights=[2, 3])

assert result == [("a", 5)]

----------------------------------------

TITLE: Adding New Members to Redis Sorted Set with ZADD NX Option
DESCRIPTION: Illustrates the use of the NX option with ZADD to only add new members to the sorted set, without updating existing ones.

LANGUAGE: typescript
CODE:
await redis.zadd(
    "key",
    { nx: true },
    { score: 2, member: "member" },
)

----------------------------------------

TITLE: Creating Next.js Project with Upstash Redis
DESCRIPTION: Commands to create a new Next.js application and install the Upstash Redis package.

LANGUAGE: shell
CODE:
npx create-next-app@latest
cd my-app
npm install @upstash/redis

----------------------------------------

TITLE: Connecting with Redigo in Go
DESCRIPTION: Example of connecting to Upstash Redis using the Redigo client in Go. Demonstrates connection with TLS, authentication, and basic operations.

LANGUAGE: go
CODE:
func main() {
  c, err := redis.Dial("tcp", "YOUR_ENDPOINT:YOUR_PORT", redis.DialUseTLS(true))
  if err != nil {
      panic(err)
  }

  _, err = c.Do("AUTH", "YOUR_PASSWORD")
  if err != nil {
      panic(err)
  }

  _, err = c.Do("SET", "foo", "bar")
  if err != nil {
      panic(err)
  }

  value, err := redis.String(c.Do("GET", "foo"))
  if err != nil {
      panic(err)
  }

  println(value)
}

----------------------------------------

TITLE: Running the Flask Application
DESCRIPTION: Command to start the Flask development server.

LANGUAGE: shell
CODE:
python app.py

----------------------------------------

TITLE: Configuring Upstash Terraform Provider
DESCRIPTION: Configuration block for initializing the Upstash Terraform provider with email and API key credentials. An API key from the Upstash console is required.

LANGUAGE: hcl
CODE:
provider "upstash" {
  email = ""
  api_key = ""
}

----------------------------------------

TITLE: Initializing Upstash Redis Connection in JavaScript
DESCRIPTION: Basic code snippet showing how to initialize a connection to Upstash Redis using the @upstash/redis package

LANGUAGE: javascript
CODE:
import { Redis } from "@upstash/redis";

const redis = new Redis({
  url: "<YOUR_UPSTASH_REDIS_REST_URL>",
  token: "<YOUR_UPSTASH_REDIS_REST_TOKEN>",
});

const data = await redis.set("foo", "bar");

----------------------------------------

TITLE: Retrieving Multiple Hash Fields with Redis HMGET in Python
DESCRIPTION: Demonstrates how to retrieve multiple field values from a Redis hash using the HMGET command. The example first sets hash fields using HSET then retrieves multiple fields using HMGET. The command returns a list of values corresponding to the requested fields.

LANGUAGE: python
CODE:
redis.hset("myhash", values={
    "field1": "Hello",
    "field2": "World"
})

assert redis.hmget("myhash", "field1", "field2") == ["Hello", "World"]

----------------------------------------

TITLE: Implementing Block Until Ready Rate Limiting with Upstash Redis in Python
DESCRIPTION: This snippet demonstrates how to use the block_until_ready method for rate limiting. It creates a rate limiter that allows 10 requests per 10 seconds and blocks for up to 30 seconds if the limit is exceeded.

LANGUAGE: python
CODE:
from upstash_ratelimit import Ratelimit, SlidingWindow
from upstash_redis import Redis

# Create a new ratelimiter, that allows 10 requests per 10 seconds
ratelimit = Ratelimit(
    redis=Redis.from_env(),
    limiter=SlidingWindow(max_requests=10, window=10),
)

response = ratelimit.block_until_ready("id", timeout=30)

if not response.allowed:
    print("Unable to process, even after 30 seconds")
else:
    do_expensive_calculation()
    print("Here you go!")

----------------------------------------

TITLE: Package Reference - @upstash/redis
DESCRIPTION: Package name and reference for the Upstash Redis client library. Used for importing the package in TypeScript applications.

LANGUAGE: typescript
CODE:
@upstash/redis

----------------------------------------

TITLE: Retrieving Multiple Hash Fields with Redis HMGET in Python
DESCRIPTION: Demonstrates how to retrieve multiple field values from a Redis hash using the HMGET command. The example first sets hash fields using HSET then retrieves multiple fields using HMGET. The command returns a list of values corresponding to the requested fields.

LANGUAGE: python
CODE:
redis.hset("myhash", values={
    "field1": "Hello",
    "field2": "World"
})

assert redis.hmget("myhash", "field1", "field2") == ["Hello", "World"]

----------------------------------------

TITLE: Incrementing Score with ZADD INCR Option
DESCRIPTION: Shows how to use the INCR option with ZADD to increment the score of a member in the sorted set, similar to ZINCRBY command.

LANGUAGE: typescript
CODE:
await redis.zadd(
    "key",
    { cincrh: true },
    { score: 2, member: "member" },
)

----------------------------------------

TITLE: Creating Nuxt.js Project with Upstash Redis
DESCRIPTION: Initialize a new Nuxt.js project and install the Upstash Redis client library.

LANGUAGE: bash
CODE:
npx nuxi@latest init nuxtjs-with-redis

LANGUAGE: bash
CODE:
npm install @upstash/redis

----------------------------------------

TITLE: Disabling Keyspace Notifications
DESCRIPTION: Commands to disable all keyspace notifications by setting notify-keyspace-events to an empty string using both cURL and redis-cli.

LANGUAGE: bash
CODE:
curl -X POST \
    -d '["CONFIG", "SET", "notify-keyspace-events", ""]' \
    -H "Authorization: Bearer $UPSTASH_REDIS_REST_TOKEN" \
    $UPSTASH_REDIS_REST_URL

LANGUAGE: bash
CODE:
redis-cli --tls -u $UPSTASH_REDIS_CLI_URL config set notify-keyspace-events ""

----------------------------------------

TITLE: Adding Redix client to the application
DESCRIPTION: Configure the Redix client in the application's children list with the extracted connection parameters.

LANGUAGE: elixir
CODE:
children = [
  # ...
  {
    Redix,
    name: :redix,
    host: host,
    port: port,
    password: password,
    socket_opts: [:inet6]
  }
]

----------------------------------------

TITLE: Library Import Reference
DESCRIPTION: Example package name reference for the Upstash Redis rate limiting library

LANGUAGE: python
CODE:
upstash-ratelimit

----------------------------------------

TITLE: Basic ZRANGE Example in TypeScript
DESCRIPTION: Demonstrates basic usage of ZRANGE command to retrieve elements from a sorted set within a numeric range.

LANGUAGE: typescript
CODE:
await redis.zadd("key", 
    { score: 1, member: "m1" },
    { score: 2, member: "m2" },
)
const res = await redis.zrange("key", 1, 3)
console.log(res) // ["m2"]

----------------------------------------

TITLE: Retrieving Hash Keys with HKEYS in Python
DESCRIPTION: This example demonstrates how to use the HKEYS command to retrieve all field names from a hash in Upstash Redis. It first sets a hash with two fields using HSET, then uses HKEYS to retrieve the field names.

LANGUAGE: python
CODE:
redis.hset("myhash", values={
    "field1": "Hello",
    "field2": "World"
})

assert redis.hkeys("myhash") == ["field1", "field2"]

----------------------------------------

TITLE: Retrieving Sorted Set Size with ZCARD in TypeScript
DESCRIPTION: Demonstrates how to get the number of elements in a Redis sorted set using ZCARD command. The example first adds elements to a sorted set using ZADD, then retrieves the count using ZCARD.

LANGUAGE: typescript
CODE:
await redis.zadd("key", 
    { score: 1, member: "one"}, 
    { score: 2, member: "two" },
);
const elements = await redis.zrank("key");
console.log(elements); // 2

----------------------------------------

TITLE: Installing Required Dependencies with pip
DESCRIPTION: Command to install necessary Python packages including FastAPI, Upstash Redis, and other dependencies.

LANGUAGE: bash
CODE:
pip install fastapi upstash-redis uvicorn python-dotenv

----------------------------------------

TITLE: Implementing Redis MONITOR Command with ioredis in TypeScript
DESCRIPTION: This code snippet demonstrates how to set up a monitor for an Upstash Redis instance using ioredis in TypeScript. It creates a monitor instance and sets up an event listener to log all executed commands to the console.

LANGUAGE: typescript
CODE:
const monitor = await redis.monitor()

monitor.on("monitor", (time, args, source, database) => {
  console.log(time, args, source, database)
})

----------------------------------------

TITLE: Updating Phoenix router for status and home pages
DESCRIPTION: Define routes for the status page and home page in the Phoenix router.

LANGUAGE: elixir
CODE:
scope "/", RedixDemoWeb do
  pipe_through :browser

  get "/status", PageController, :status

  get "/", PageController, :home
  get "/:text", PageController, :home
end

----------------------------------------

TITLE: Generating Upstash Developer API Key using Access Token
DESCRIPTION: This cURL command uses the access token obtained from the OAuth 2.0 flow to generate a Developer API key for Upstash. The API key is created with a custom name including the application name and timestamp.

LANGUAGE: bash
CODE:
curl https://api.upstash.com/apikey -H "Authorization: Bearer JWT_KEY" -d '{ "name" : "APPNAME_API_KEY_TIMESTAMP" }'

----------------------------------------

TITLE: Package Configuration for Upstash Redis
DESCRIPTION: Package.json configuration specifying @upstash/redis as a dependency.

LANGUAGE: json
CODE:
{
    "dependencies": {
      "@upstash/redis": "latest"
    }
  }

----------------------------------------

TITLE: OAuth 2.0 Token Exchange Response
DESCRIPTION: This JSON response contains the access_token, refresh_token, scope, expires_in, and token_type returned after a successful OAuth 2.0 token exchange.

LANGUAGE: json
CODE:
{
  "access_token": "XXXXXXXXXX",
  "refresh_token": "XXXXXXXXXXX",
  "scope": "offline_access",
  "expires_in": 172800,
  "token_type": "Bearer"
}

----------------------------------------

TITLE: Counting Elements in Sorted Set with ZCOUNT in TypeScript
DESCRIPTION: This example demonstrates how to use the ZCOUNT command in Upstash Redis. It first adds elements to a sorted set using ZADD, then counts the elements within a specific score range using ZCOUNT.

LANGUAGE: typescript
CODE:
await redis.zadd("key", 
    { score: 1, member: "one"}, 
    { score: 2, member: "two" },
);
const elements = await redis.zcount("key", "(1", "+inf");
console.log(elements); // 1

----------------------------------------

TITLE: Redis Set Intersection with Weighted Scores
DESCRIPTION: Advanced example demonstrating ZINTER with weighted scores, where different weights are applied to each set before aggregation.

LANGUAGE: python
CODE:
redis.zadd("key1", {"a": 1})

redis.zadd("key2", {"a": 1})

result = redis.zinter(["key1", "key2"],
                      withscores=True,
                      aggregate="SUM",
                      weights=[2, 3])

assert result == [("a", 5)]

----------------------------------------

TITLE: Removing Lowest Scored Members from Sorted Set in Upstash Redis (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the ZPOPMIN command in Upstash Redis to remove and return up to 4 members with the lowest scores from a sorted set. The 'key' parameter specifies the sorted set, and the second argument (4) indicates the maximum number of members to remove.

LANGUAGE: typescript
CODE:
const popped = await redis.zpopmin("key", 4);

----------------------------------------

TITLE: Initializing Azure Functions Project
DESCRIPTION: Initialize a new Azure Functions project with TypeScript support

LANGUAGE: shell
CODE:
func init --typescript

----------------------------------------

TITLE: Publishing to a Channel via Upstash Redis REST API
DESCRIPTION: This snippet demonstrates how to publish a message to a Redis channel named 'chat' using the Upstash Redis REST API.

LANGUAGE: shell
CODE:
curl -X POST https://us1-merry-cat-32748.upstash.io/publish/chat/hello \
  -H "Authorization: Bearer 2553feg6a2d9842h2a0gcdb5f8efe9934"

----------------------------------------

TITLE: CDK Stack Configuration - TypeScript
DESCRIPTION: AWS CDK stack configuration in TypeScript that sets up the Lambda function with necessary environment variables and function URL.

LANGUAGE: typescript
CODE:
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as path from 'path';

export class CounterCdkStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const counterFunction = new lambda.Function(this, 'CounterFunction', {
      code: lambda.Code.fromAsset(path.join(__dirname, 'api'), {
        bundling: {
          image: lambda.Runtime.PYTHON_3_9.bundlingImage,
          command: [
            'bash', '-c',
            'pip install -r requirements.txt -t /asset-output && cp -au . /asset-output'
          ],
        },
      }),
      runtime: lambda.Runtime.PYTHON_3_9,
      handler: 'index.handler',
      environment: {
        UPSTASH_REDIS_REST_URL: process.env.UPSTASH_REDIS_REST_URL || '',
        UPSTASH_REDIS_REST_TOKEN: process.env.UPSTASH_REDIS_REST_TOKEN || '',
      },
    });

    const counterFunctionUrl = counterFunction.addFunctionUrl({
      authType: lambda.FunctionUrlAuthType.NONE,
    });

    new cdk.CfnOutput(this, "counterFunctionUrlOutput", {
      value: counterFunctionUrl.url,
    })
  }
}

----------------------------------------

TITLE: Synchronized Redis Write and Read Operations in TypeScript
DESCRIPTION: Enhanced version of Redis operations using sync tokens to ensure read-your-writes consistency across different client instances. Demonstrates proper token handling for cross-client synchronization.

LANGUAGE: typescript
CODE:
export const writeRequest = async () => {
  const redis = Redis.fromEnv();
  const randomKey = nanoid();
  await redis.set(randomKey, "value");

  // Get the token **after** making the write
  const token = redis.readYourWritesSyncToken;
  return { randomKey, token };
};

export const readRequest = async (
  randomKey: string,
  token: string | undefined
) => {
  const redis = Redis.fromEnv();

  // Set the token **before** making the read
  redis.readYourWritesSyncToken = token;

  const value = await redis.get(randomKey);
  return value;
};

const { randomKey, token } = await writeRequest();
await readRequest(randomKey, token);

----------------------------------------

TITLE: Executing GETSET Command in TypeScript with Upstash Redis
DESCRIPTION: Shows how to use the getset() method to atomically retrieve the current value of a key and replace it with a new value. Returns the old value or null if the key didn't exist.

LANGUAGE: typescript
CODE:
const oldValue = await redis.getset("key", newValue);

----------------------------------------

TITLE: Executing BITPOS Operation in Redis using TypeScript
DESCRIPTION: This snippet demonstrates how to use the BITPOS operation in Redis to find the position of the first set bit in a string key. It shows a basic example and an example with a specified range.

LANGUAGE: typescript
CODE:
await redis.bitpos("key", 1);

LANGUAGE: typescript
CODE:
await redis.bitpos("key", 1, 5, 20);

----------------------------------------

TITLE: ZRANGE by Score in TypeScript
DESCRIPTION: Illustrates how to query elements by score range instead of index range using the byScore option.

LANGUAGE: typescript
CODE:
await redis.zadd("key", 
    { score: 1, member: "m1" },
    { score: 2, member: "m2" },
    { score: 3, member: "m3" },
)
const res = await redis.zrange("key", 1, 2, { byScore: true })
console.log(res) // ["m1", "m2"]

----------------------------------------

TITLE: Subscribing to All Keyspace Notifications
DESCRIPTION: Command to subscribe to all keyspace notification channels using redis-cli with CSV output format.

LANGUAGE: bash
CODE:
redis-cli --tls -u $UPSTASH_REDIS_CLI_URL --csv psubscribe '__key*__:*'

----------------------------------------

TITLE: Applying IP-based Rate Limit in Strapi with Upstash Redis
DESCRIPTION: This JSON configuration sets up an IP-based rate limit for all routes in a Strapi application using Upstash Redis. It uses a fixed-window algorithm allowing 10 requests per 20 seconds per IP address.

LANGUAGE: json
CODE:
{
  "strapi-plugin-upstash-ratelimit": {
    "enabled": true,
    "resolve": "./src/plugins/strapi-plugin-upstash-ratelimit",
    "config": {
      "enabled": true,
      "token": "process.env.UPSTASH_REDIS_REST_TOKEN",
      "url": "process.env.UPSTASH_REDIS_REST_URL",
      "strategy": [
        {
          "methods": ["GET", "POST"],
          "path": "*",
          "identifierSource": "ip",
          "limiter": {
            "algorithm": "fixed-window",
            "tokens": 10,
            "window": "20s"
          }
        }
      ],
      "prefix": "@strapi"
    }
  }
}

----------------------------------------

TITLE: Building and Deploying to Google Cloud Run
DESCRIPTION: Commands for building the Docker image, submitting it to Google Cloud Build, and deploying the application to Google Cloud Run.

LANGUAGE: bash
CODE:
gcloud builds submit --tag gcr.io/cloud-run-sessions/main

gcloud run deploy cloud-run-sessions \
  --image gcr.io/cloud-run-sessions/main:v0.1 \
  --platform managed \
  --region us-central1 \
  --allow-unauthenticated

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Setting up the required Upstash Redis credentials in the environment configuration file.

LANGUAGE: shell
CODE:
UPSTASH_REDIS_REST_TOKEN="<YOUR_TOKEN>"
UPSTASH_REDIS_REST_URL="<YOUR_URL>"

----------------------------------------

TITLE: Setting Up Environment Variables for Upstash Redis
DESCRIPTION: Copy the example environment file and set the Upstash Redis credentials.

LANGUAGE: bash
CODE:
cp .env.example .env

LANGUAGE: bash
CODE:
UPSTASH_REDIS_REST_URL=""
UPSTASH_REDIS_REST_TOKEN=""

----------------------------------------

TITLE: Creating Express.js Application with Upstash Redis Counter
DESCRIPTION: Complete Node.js application using Express and Upstash Redis to implement a visit counter. Uses environment variables for configuration and implements a simple GET route.

LANGUAGE: javascript
CODE:
const { Redis } = require("@upstash/redis");
const express = require("express");

const app = express();
const redis = Redis.fromEnv();

app.get("/", async (req, res) => {
  const value = await redis.get("counter");
  await redis.set("counter", parseInt(value || 0) + 1);
  res.send(`Counter: ${value || 0}`);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

----------------------------------------

TITLE: Checking Redis Script Existence with TypeScript
DESCRIPTION: Demonstrates how to check if scripts exist in Redis script cache using their SHA1 hashes. Returns an array of 1s and 0s indicating existence of each script. Each SHA1 hash should be provided as a string argument.

LANGUAGE: typescript
CODE:
await redis.scriptExists("<sha1>", "<sha2>")

// Returns 1 
// [1, 0]

----------------------------------------

TITLE: Counting Elements in Redis Sorted Set Using ZLEXCOUNT in Python
DESCRIPTION: This example demonstrates how to use the ZLEXCOUNT command in Python to count elements in a Redis sorted set within a specified lexicographical range. It first adds elements to a sorted set and then counts all elements using the full range.

LANGUAGE: python
CODE:
redis.zadd("myset", {"a": 1, "b": 2, "c": 3})

assert redis.zlexcount("myset", "-", "+") == 3

----------------------------------------

TITLE: Removing Members from Redis Sorted Set
DESCRIPTION: Shows how to remove members from a Redis sorted set using the ZREM command. The command returns the number of members that were successfully removed from the sorted set. It accepts a key parameter and one or more member values to remove.

LANGUAGE: typescript
CODE:
await redis.zrem("key", "member");

LANGUAGE: typescript
CODE:
await redis.zrem("key", "member1", "member2");

----------------------------------------

TITLE: Connecting to Upstash Redis using redis-cli
DESCRIPTION: This snippet demonstrates how to connect to an Upstash Redis database using the redis-cli tool. It shows the connection command and some basic Redis operations like setting, getting, and incrementing a counter.

LANGUAGE: bash
CODE:
> redis-cli --tls -a PASSWORD -h ENDPOINT -p PORT
Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.
ENDPOINT:PORT> set counter 0
OK
ENDPOINT:PORT> get counter
"0"
ENDPOINT:PORT> incr counter
(int) 1
ENDPOINT:PORT> incr counter
(int) 2

----------------------------------------

TITLE: Creating Django Project from Vercel Template
DESCRIPTION: Initializes a new Django project using Vercel's template with create-next-app command

LANGUAGE: shell
CODE:
npx create-next-app vercel-django --example "https://github.com/vercel/examples/tree/main/python/django"
cd vercel-django

----------------------------------------

TITLE: Redis HMSET Command for Data Storage
DESCRIPTION: Redis command to store IoT sensor data using HMSET, mapping client ID to timestamp and temperature values.

LANGUAGE: bash
CODE:
HMSET ${client_id} ${up_timestamp} ${temp}

----------------------------------------

TITLE: Creating a New Django Project and App
DESCRIPTION: Use Django's command-line tools to create a new project and app. This sets up the basic structure for the web application.

LANGUAGE: shell
CODE:
django-admin startproject myproject
cd myproject
python manage.py startapp myapp

----------------------------------------

TITLE: Executing Read-Only Lua Script with EVAL_RO in Redis using TypeScript
DESCRIPTION: This example demonstrates how to use the EVAL_RO command to execute a read-only Lua script in Redis. The script simply returns the first argument passed to it. The result is then logged to the console.

LANGUAGE: typescript
CODE:
const script = `
    return ARGV[1]
`
const result = await redis.eval_ro(script, [], ["hello"]);
console.log(result) // "hello"

----------------------------------------

TITLE: Checking Hash Field Existence with Redis HEXISTS
DESCRIPTION: Demonstrates how to check if a field exists in a Redis hash using the HEXISTS command. The example first sets a hash field using HSET and then verifies its existence using HEXISTS, which returns True for existing fields.

LANGUAGE: python
CODE:
redis.hset("key", "field", "value")

assert redis.hexists("key", "field") == True

----------------------------------------

TITLE: Simple Set Union in Redis using Python
DESCRIPTION: Demonstrates basic usage of zunionstore command to combine two sorted sets. Creates two sets with some overlapping members and combines them into a single set.

LANGUAGE: python
CODE:
redis.zadd("key1", {"a": 1, "b": 2, "c": 3})

redis.zadd("key2", {"c": 3, "d": 4, "e": 5})

result = redis.zunionstore(["key1", "key2"])

assert result == 5

----------------------------------------

TITLE: Connecting with Jedis in Java
DESCRIPTION: Example of connecting to Upstash Redis using the Jedis client in Java. Uses host, port configuration with SSL and authentication.

LANGUAGE: java
CODE:
Jedis jedis = new Jedis("YOUR_ENDPOINT", "YOUR_PORT", true);
jedis.auth("YOUR_PASSWORD");
jedis.set("foo", "bar");
String value = jedis.get("foo");
System.out.println(value);

----------------------------------------

TITLE: Creating Python Environment
DESCRIPTION: Sets up a Conda environment with Python 3.12 and installs project dependencies

LANGUAGE: shell
CODE:
conda create --name vercel-django python=3.12
conda activate vercel-django
pip install -r requirements.txt

----------------------------------------

TITLE: Basic Redis Write and Read Operations in TypeScript
DESCRIPTION: Example of separate write and read operations using different Redis client instances, demonstrating potential consistency issues when clients are not synchronized.

LANGUAGE: typescript
CODE:
export const writeRequest = async () => {
  const redis = Redis.fromEnv();
  const randomKey = nanoid();
  await redis.set(randomKey, "value");
  return randomKey;
};

export const readRequest = async (randomKey: string) => {
  const redis = Redis.fromEnv();
  const value = await redis.get(randomKey);
  return value;
};

----------------------------------------

TITLE: Deploying Supabase function with Upstash Redis counter
DESCRIPTION: These commands deploy the 'upstash-redis-counter' function to Supabase and set the necessary secrets from the environment file.

LANGUAGE: shell
CODE:
supabase functions deploy upstash-redis-counter --no-verify-jwt
supabase secrets set --env-file supabase/functions/upstash-redis-counter/.env

----------------------------------------

TITLE: Installing Dependencies for FastAPI and Upstash Redis
DESCRIPTION: Command to install FastAPI, Upstash Redis client, Upstash rate limiting package, and ASGI server using pip.

LANGUAGE: shell
CODE:
pip install fastapi upstash-redis upstash-ratelimit uvicorn[standard]

----------------------------------------

TITLE: Using Redis PERSIST Command in Python
DESCRIPTION: Demonstrates how to use the PERSIST command to remove a timeout from a key. The example shows setting a value, adding an expiration timeout, then removing it with persist(), verified by checking the TTL before and after.

LANGUAGE: python
CODE:
redis.set("key1", "Hello")
redis.expire("key1", 10)

assert redis.ttl("key1") == 10

redis.persist("key1")

assert redis.ttl("key1") == -1

----------------------------------------

TITLE: Getting Remaining Tokens with Ratelimit in TypeScript
DESCRIPTION: The getRemaining method returns the remaining tokens/requests available for a given identifier, along with the reset timestamp.

LANGUAGE: typescript
CODE:
ratelimit.getRemaining(identifier: string): Promise<{
  remaining: number;
  reset: number;
}>

----------------------------------------

TITLE: Toggling Boolean Value in JSON using Upstash Redis
DESCRIPTION: Demonstrates how to toggle a boolean value stored at a specific path within a JSON structure using the json.toggle method. The method takes a key parameter to identify the JSON entry and a path parameter to specify the location of the boolean value to toggle. Returns the new boolean value after toggling.

LANGUAGE: typescript
CODE:
const bool = await redis.json.toggle("key", "$.path.to.bool");

----------------------------------------

TITLE: Executing FLUSHALL Command in TypeScript
DESCRIPTION: Demonstrates two ways to flush all keys from Redis: synchronous (default) and asynchronous execution. The async parameter determines whether the operation should be performed asynchronously.

LANGUAGE: typescript
CODE:
await redis.flushall();

LANGUAGE: typescript
CODE:
await redis.flushall({async: true})

----------------------------------------

TITLE: Querying Key Expiration Time with PTTL in TypeScript
DESCRIPTION: Demonstrates how to fetch the remaining time to live (TTL) in milliseconds for a Redis key. Returns a negative value if the key doesn't exist or has no expiration set. The method is asynchronous and returns a Promise resolving to an integer.

LANGUAGE: typescript
CODE:
const millis = await redis.pttl(key);

----------------------------------------

TITLE: Python Dependencies Configuration
DESCRIPTION: Requirements file specifying Upstash Redis dependency for Python Lambda function

LANGUAGE: txt
CODE:
upstash-redis

----------------------------------------

TITLE: Removing Elements by Rank Range in Redis Sorted Set using TypeScript
DESCRIPTION: Demonstrates how to remove elements from a Redis sorted set using rank-based range. The command takes a key name and min/max rank values to define the range of elements to remove. Returns the number of elements that were removed from the set.

LANGUAGE: typescript
CODE:
await redis.zremrangebyrank("key", 4, 20)

----------------------------------------

TITLE: Implementing Multiple Rate Limit Algorithms for Different Routes in Strapi
DESCRIPTION: This configuration demonstrates how to apply different rate limiting algorithms to different routes in a Strapi application using Upstash Redis. It uses a fixed-window algorithm for one route and a token bucket algorithm for another, both identified by a custom header.

LANGUAGE: json
CODE:
{
  "strapi-plugin-upstash-ratelimit": {
    "enabled": true,
    "resolve": "./src/plugins/strapi-plugin-upstash-ratelimit",
    "config": {
      "enabled": true,
      "token": "process.env.UPSTASH_REDIS_REST_TOKEN",
      "url": "process.env.UPSTASH_REDIS_REST_URL",
      "strategy": [
        {
          "methods": ["GET", "POST"],
          "path": "/api/restaurants/:id",
          "identifierSource": "header.x-author",
          "limiter": {
            "algorithm": "fixed-window",
            "tokens": 10,
            "window": "20s"
          }
        },
        {
          "methods": ["GET"],
          "path": "/api/restaurants",
          "identifierSource": "header.x-author",
          "limiter": {
            "algorithm": "tokenBucket",
            "tokens": 10,
            "window": "20s",
            "refillRate": 1
          }
        }
      ],
      "prefix": "@strapi"
    }
  }
}

----------------------------------------

TITLE: Resetting Used Tokens with Ratelimit in TypeScript
DESCRIPTION: The resetUsedTokens method resets the state of the algorithm for a given identifier.

LANGUAGE: typescript
CODE:
ratelimit.resetUsedTokens(identifier: string): Promise<void>

----------------------------------------

TITLE: ZUNIONSTORE with Aggregation
DESCRIPTION: Example showing how to use ZUNIONSTORE with aggregation options to control how scores are combined when computing the union of sorted sets.

LANGUAGE: typescript
CODE:
await redis.zadd("key1", { score: 1, member: "member1" })
await redis.zadd("key2",{ score: 1, member: "member1" },{ score: 2, member: "member2" })
const res = await redis.zunionstore("destination",2,["key1", "key2"],{ aggregate: "sum" });
console.log(res) // 2

----------------------------------------

TITLE: Deploying CDK Stack to AWS
DESCRIPTION: Commands to synthesize the CloudFormation template, bootstrap the AWS environment if needed, and deploy the CDK stack to create the Lambda function and associated resources.

LANGUAGE: shell
CODE:
cdk synth
cdk bootstrap
cdk deploy

----------------------------------------

TITLE: Handling Redis Connections in Serverless Functions with JavaScript
DESCRIPTION: This code snippet demonstrates how to efficiently manage Redis connections in a serverless function. It creates a Redis client, performs operations, and then closes the connection to avoid reaching the concurrent connection limit.

LANGUAGE: javascript
CODE:
exports.handler = async (event) => {
  const client = new Redis(process.env.REDIS_URL);
  /*
    do stuff with redis
     */
  await client.quit();
  /*
  do other stuff
   */
  return {
    response: "response",
  };
};

----------------------------------------

TITLE: CDK Deployment Commands
DESCRIPTION: Shell commands to deploy the AWS CDK stack

LANGUAGE: shell
CODE:
cdk synth
cdk bootstrap
cdk deploy

----------------------------------------

TITLE: Configuring SRH and Redis with Docker Compose
DESCRIPTION: This Docker Compose configuration sets up both a Redis server and an SRH instance. It demonstrates how to connect SRH to Redis within a Docker network and exposes SRH on port 8079.

LANGUAGE: yml
CODE:
version: "3"
services:
  redis:
    image: redis
    ports:
      - "6379:6379"
  serverless-redis-http:
    ports:
      - "8079:80"
    image: hiett/serverless-redis-http:latest
    environment:
      SRH_MODE: env
      SRH_TOKEN: example_token
      SRH_CONNECTION_STRING: "redis://redis:6379" # Using `redis` hostname since they're in the same Docker network.

----------------------------------------

TITLE: Inserting JSON Values into Array with Upstash Redis in TypeScript
DESCRIPTION: This snippet demonstrates how to use the JSON.ARRINSERT command to insert multiple values into a JSON array at a specific index. It returns the length of the array after insertion.

LANGUAGE: typescript
CODE:
const length = await redis.json.arrinsert("key", "$.path.to.array", 2, "a", "b");

----------------------------------------

TITLE: Installing Upstash Ratelimit Package
DESCRIPTION: Commands for installing the Upstash Strapi rate limiting plugin using npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install --save @upstash/strapi-plugin-upstash-ratelimit

LANGUAGE: bash
CODE:
yarn add @upstash/strapi-plugin-upstash-ratelimit

----------------------------------------

TITLE: RatelimitResponse Type Definition in TypeScript
DESCRIPTION: Defines the structure of the response returned by the limit method, including success status, limit details, and metadata for handling asynchronous operations.

LANGUAGE: typescript
CODE:
export type RatelimitResponse = {
  success: boolean;
  limit: number;
  remaining: number;
  reset: number;
  pending: Promise<unknown>;
  reason?: RatelimitResponseType;
  deniedValue?: string;
};

----------------------------------------

TITLE: Clearing JSON Values with Upstash Redis in TypeScript
DESCRIPTION: Examples demonstrating how to use the JSON.CLEAR command to clear JSON values in Upstash Redis. The command can be used with or without a specific path parameter to clear container values or reset numeric values to 0.

LANGUAGE: typescript
CODE:
await redis.json.clear("key");

LANGUAGE: typescript
CODE:
await redis.json.clear("key", "$.my.key");

----------------------------------------

TITLE: Installing Upstash Redis Package
DESCRIPTION: Install the Upstash Redis client package via npm

LANGUAGE: shell
CODE:
npm install @upstash/redis

----------------------------------------

TITLE: Displaying Upstash Redis Max Requests Limit Exceeded Error
DESCRIPTION: This snippet shows the error message returned when the maximum request limit is exceeded in Upstash Redis. It's typically thrown as an exception by the Redis client when the database has reached its monthly request count limit.

LANGUAGE: plaintext
CODE:
ReplyError: ERR max requests limit exceeded. 

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Commands to install Flask and Upstash Redis Python client using pip package manager.

LANGUAGE: shell
CODE:
pip install flask
pip install upstash-redis

----------------------------------------

TITLE: Using ZRANDMEMBER Command with Redis in Python
DESCRIPTION: This snippet demonstrates how to use the ZRANDMEMBER command in Redis using Python. It shows adding members to a sorted set and then retrieving random members from it.

LANGUAGE: python
CODE:
redis.zadd("myset", {"one": 1, "two": 2, "three": 3})

# "one"
redis.zrandmember("myset")

# ["one", "three"]
redis.zrandmember("myset", 2)

----------------------------------------

TITLE: Blocking Until Ready with Ratelimit in TypeScript
DESCRIPTION: The blockUntilReady method waits until a request can be processed or until a timeout occurs. It's similar to the limit method but automatically waits for the next window if the limit is exceeded.

LANGUAGE: typescript
CODE:
ratelimit.blockUntilReady(
  identifier: string,
  timeout: number
): Promise<RatelimitResponse>

----------------------------------------

TITLE: Configuring IP-based Rate Limiting in Strapi with Upstash Redis
DESCRIPTION: This configuration sets up IP-based rate limiting for all routes in a Strapi application using Upstash Redis. It uses a fixed-window algorithm allowing 10 requests per 20-second window for each IP address.

LANGUAGE: json
CODE:
{
  "strapi-plugin-upstash-ratelimit": {
    "enabled": true,
    "resolve": "./src/plugins/strapi-plugin-upstash-ratelimit",
    "config": {
      "enabled": true,
      "token": "process.env.UPSTASH_REDIS_REST_TOKEN",
      "url": "process.env.UPSTASH_REDIS_REST_URL",
      "strategy": [
        {
          "methods": ["GET", "POST"],
          "path": "*",
          "identifierSource": "ip",
          "limiter": {
            "algorithm": "fixed-window",
            "tokens": 10,
            "window": "20s"
          }
        }
      ],
      "prefix": "@strapi"
    }
  }
}

----------------------------------------

TITLE: Using LPOS with Count Parameter in Redis List using Python
DESCRIPTION: This snippet demonstrates the usage of LPOS command with the 'count' parameter to retrieve multiple indices of a matching element in a Redis list. It pushes elements to a list and then retrieves the indices of all occurrences of 'b'.

LANGUAGE: python
CODE:
redis.rpush("key", "a", "b", "b")

assert redis.lpos("key", "b", count=2) == [1, 2]

----------------------------------------

TITLE: Azure Resource Management Commands
DESCRIPTION: Collection of Azure CLI commands for creating and managing necessary resources

LANGUAGE: shell
CODE:
az account list-locations

LANGUAGE: shell
CODE:
az group create --name AzureFunctionsQuickstart-rg --location <REGION>

LANGUAGE: shell
CODE:
az storage account create --name <STORAGE_NAME> --location <REGION> --resource-group AzureFunctionsQuickstart-rg --sku Standard_LRS --allow-blob-public-access false

LANGUAGE: shell
CODE:
az functionapp create --resource-group AzureFunctionsQuickstart-rg --consumption-plan-location <REGION> --runtime node --runtime-version 18 --functions-version 4 --name <APP_NAME> --storage-account <STORAGE_NAME>

----------------------------------------

TITLE: Configuring Local Backend in Fastly TOML
DESCRIPTION: TOML configuration for setting up the Upstash Redis backend for local development.

LANGUAGE: toml
CODE:
[local_server.backends.upstash]
url = "UPSTASH_REDIS_REST_URL"

----------------------------------------

TITLE: Setting Upstash Redis Environment Variables
DESCRIPTION: Shell commands to set required environment variables for Upstash Redis connection.

LANGUAGE: shell
CODE:
export UPSTASH_REDIS_REST_URL=<YOUR_URL>
export UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Executing ZINTERSTORE Command in Upstash Redis (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the ZINTERSTORE command to find the intersection of two sorted sets and store the result in a new key. It shows basic usage, usage with weights, and usage with aggregation.

LANGUAGE: typescript
CODE:
await redis.zadd(
    "key1", 
    { score: 1, member: "member1" },
)
await redis.zadd(
    "key2",
    { score: 1, member: "member1" },
    { score: 2, member: "member2" },
)

const res = await redis.zinterstore("destination", 2, ["key1", "key2"]);
console.log(res) // 1

LANGUAGE: typescript
CODE:
await redis.zadd(
    "key1", 
    { score: 1, member: "member1" },
)
await redis.zadd(
    "key2",
    { score: 1, member: "member1" },
    { score: 2, member: "member2" },
)
const res = await redis.zinterstore(
    "destination",
    2,
    ["key1", "key2"],
    { weights: [2, 3] },
);
console.log(res) // 1

LANGUAGE: typescript
CODE:
await redis.zadd(
    "key1", 
    { score: 1, member: "member1" },
)
await redis.zadd(
    "key2",
    { score: 1, member: "member1" },
    { score: 2, member: "member2" },
)
const res = await redis.zinterstore(
    "destination",
    2,
    ["key1", "key2"],
    { aggregate: "sum" },
);
console.log(res) // 1

----------------------------------------

TITLE: Express Server with Redis Integration
DESCRIPTION: Node.js Express application setup with Redis client integration, implementing a simple visitor counter using Redis for storage.

LANGUAGE: javascript
CODE:
const express = require("express");
const redis = require("redis");
const { promisify } = require("util");

const app = express();
const client = redis.createClient(process.env.REDIS_URL);

const getAsync = promisify(client.get).bind(client);
const setAsync = promisify(client.set).bind(client);

app.get("/", async (req, res) => {
  const value = await getAsync("counter");
  await setAsync("counter", parseInt(value || 0) + 1);
  res.send(`Hello, visitor number ${value || 0}!`);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

----------------------------------------

TITLE: Executing ZDIFF Command with Scores in Python using Upstash Redis
DESCRIPTION: This example shows how to use the ZDIFF command with the 'withscores' option set to True. It computes the difference between two sorted sets and returns the result with associated scores.

LANGUAGE: python
CODE:
redis.zadd("key1", {"a": 1, "b": 2, "c": 3})

redis.zadd("key2", {"c": 3, "d": 4, "e": 5})

result = redis.zdiff(["key1", "key2"], withscores=True)

assert result == [("a", 1), ("b", 2)]

----------------------------------------

TITLE: Rate Limit Check with IP Protection
DESCRIPTION: Shows how to implement rate limiting with IP protection and handle asynchronous updates of the IP deny list.

LANGUAGE: ts
CODE:
const { success, pending } = await ratelimit.limit(
  content,
  {ip: "ip-address"}
);

await pending;

----------------------------------------

TITLE: Handling Serverless Runtime Completion
DESCRIPTION: Example showing how to ensure rate limiting operations complete correctly in serverless environments using context.waitUntil.

LANGUAGE: typescript
CODE:
const { pending } = await ratelimit.limit("id");
context.waitUntil(pending);

----------------------------------------

TITLE: Executing ZDIFFSTORE Command in TypeScript with Upstash Redis
DESCRIPTION: This snippet demonstrates how to use the zdiffstore method of the Redis client to compute the difference between two sorted sets and store the result in a new key. It takes the destination key and the keys to compare as arguments.

LANGUAGE: typescript
CODE:
const values = await redis.zdiffstore("destination", 2, "key1", "key2");

----------------------------------------

TITLE: Configuring Upstash Redis Credentials in wrangler.toml
DESCRIPTION: This YAML snippet shows how to manually set up Upstash Redis credentials in the wrangler.toml file for a Cloudflare Workers project.

LANGUAGE: yaml
CODE:
[vars]
UPSTASH_REDIS_REST_URL="REPLACE_HERE"
UPSTASH_REDIS_REST_TOKEN="REPLACE_HERE"

----------------------------------------

TITLE: Getting Bitfield Values in Python with Upstash Redis
DESCRIPTION: This example shows how to retrieve multiple values from a bitfield using the get command. It gets three 8-bit unsigned integers from different offsets.

LANGUAGE: python
CODE:
redis.set("mykey", "\x05\x06\x07")

result = redis.bitfield("mykey") \
    .get("u8", 0) \
    .get("u8", 8) \
    .get("u8", 16) \
    .execute()

assert result == [5, 6, 7]

----------------------------------------

TITLE: Initializing Fastly Compute Project Setup
DESCRIPTION: CLI commands to initialize a new Fastly Compute@Edge project with JavaScript configuration and empty starter template.

LANGUAGE: shell
CODE:
> fastly compute init

Creating a new Compute@Edge project.

Press ^C at any time to quit.

Name: [fastly-upstash]
Description:
Author: [enes@upstash.com]
Language:
[1] Rust
[2] JavaScript
[3] AssemblyScript (beta)
[4] Other ('bring your own' Wasm binary)
Choose option: [1] 2
Starter kit:
[1] Default starter for JavaScript
    A basic starter kit that demonstrates routing, simple synthetic responses and
    overriding caching rules.
    https://github.com/fastly/compute-starter-kit-javascript-default
[2] Empty starter for JavaScript
    An empty application template for the Fastly Compute@Edge environment which simply
    returns a 200 OK response.
    https://github.com/fastly/compute-starter-kit-javascript-empty
Choose option or paste git URL: [1] 2

----------------------------------------

TITLE: Checking Script Existence in Redis using Python
DESCRIPTION: Demonstrates how to verify if scripts exist in Redis script cache by their SHA1 hashes. Returns a list of boolean values indicating existence of each script. The example shows checking two scripts where one exists (1) and one doesn't (0).

LANGUAGE: python
CODE:
# Script 1 exists
# Script 0 does not
await redis.scriptExists("<sha1>", "<sha2>") == [1, 0]

----------------------------------------

TITLE: Creating Project Directory and Installing Dependencies
DESCRIPTION: Commands to create a new project directory, initialize a Node.js project, and install required dependencies.

LANGUAGE: bash
CODE:
mkdir cloud-run-sessions

cd cloud-run-sessions

npm init

npm install express redis connect-redis express-session

----------------------------------------

TITLE: Environment Variable Configuration
DESCRIPTION: Example of setting environment variables in a local Next.js project configuration file.

LANGUAGE: plaintext
CODE:
UPSTASH_REDIS_REST_URL=****
UPSTASH_REDIS_REST_TOKEN=****

----------------------------------------

TITLE: Deleting Hash Fields with HDEL in TypeScript
DESCRIPTION: Demonstrates how to delete multiple fields from a hash using the HDEL command. The command returns the number of fields that were successfully removed from the hash.

LANGUAGE: typescript
CODE:
await redis.hdel(key, 'field1', 'field2');
// returns 5

----------------------------------------

TITLE: Configuring Django URL Pattern
DESCRIPTION: Set up the URL routing in Django to connect the view to a URL pattern. This maps the root URL to the index view.

LANGUAGE: python
CODE:
from django.urls import path
from myapp import views

urlpatterns = [
    path('', views.index),
]

----------------------------------------

TITLE: Incrementing JSON Numeric Value with Upstash Redis in TypeScript
DESCRIPTION: This snippet demonstrates how to use the json.numincrby method to increment a numeric value within a JSON object stored in Upstash Redis. It specifies the key, the path to the value, and the increment amount.

LANGUAGE: typescript
CODE:
const newValue = await redis.json.numincrby("key", "$.path.to.value", 2);

----------------------------------------

TITLE: Installing Serverless Framework
DESCRIPTION: Command to install Serverless Framework version 3.39.0 globally using npm

LANGUAGE: shell
CODE:
npm i serverless@3.39.0 -g

----------------------------------------

TITLE: Evaluating Read-Only Lua Script with Arguments in Redis
DESCRIPTION: Example demonstrating how to pass and access arguments in a read-only Lua script using ARGV array. The script simply returns the first argument passed to it.

LANGUAGE: python
CODE:
assert redis.eval_ro("return ARGV[1]", args=["Hello"]) == "Hello"

----------------------------------------

TITLE: Configuring Serverless YAML for AWS Lambda Deployment
DESCRIPTION: YAML configuration for serverless.yml to define the AWS Lambda function, environment variables, and API Gateway event.

LANGUAGE: yaml
CODE:
service: ratelimit-serverless

provider:
  name: aws
  runtime: nodejs20.x
  environment:
    UPSTASH_REDIS_REST_URL: ${env:UPSTASH_REDIS_REST_URL}
    UPSTASH_REDIS_REST_TOKEN: ${env:UPSTASH_REDIS_REST_TOKEN}

functions:
  ratelimit:
    handler: handler.ratelimit
    events:
      - httpApi:
          path: /
          method: get

----------------------------------------

TITLE: Setting Multiple Keys with MSETNX in Python
DESCRIPTION: Demonstrates how to use the MSETNX command to set multiple key-value pairs atomically. The command accepts an object with key-value pairs and returns 1 if all keys were set successfully, or 0 if any key already existed. Supports different value types including numbers, strings, and objects.

LANGUAGE: python
CODE:
redis.msetnx({
    key1: 1,
    key2: "hello",
    key3: { a: 1, b: "hello" },
})

----------------------------------------

TITLE: Installing Dependencies for URL Shortener
DESCRIPTION: This command installs the necessary Python package (upstash-redis) for interacting with Redis in the URL shortener application.

LANGUAGE: shell
CODE:
pip install upstash-redis

----------------------------------------

TITLE: Implementing Basic Rate Limiting
DESCRIPTION: Example showing how to initialize and implement basic rate limiting with Upstash Redis, allowing 10 requests per 10 seconds.

LANGUAGE: typescript
CODE:
import { Ratelimit } from "@upstash/ratelimit";
import { Redis } from "@upstash/redis";

const ratelimit = new Ratelimit({
  redis: Redis.fromEnv(),
  limiter: Ratelimit.slidingWindow(10, "10 s"),
  analytics: true,
  prefix: "@upstash/ratelimit",
});

const identifier = "api";
const { success } = await ratelimit.limit(identifier);

if (!success) {
  return "Unable to process at this time";
}
doExpensiveCalculation();
return "Here you go!";

----------------------------------------

TITLE: Setting Hash Field with HSETNX in TypeScript
DESCRIPTION: Demonstrates how to conditionally set a field in a Redis hash using HSETNX. The operation returns 1 if the field was set (didn't exist) or 0 if the field already existed. The value parameter accepts any type and will be automatically serialized to JSON if it's not a string.

LANGUAGE: typescript
CODE:
await redis.hsetnx("key", "id", 1)

----------------------------------------

TITLE: Adding Redix dependencies to mix.exs
DESCRIPTION: Update the dependencies in mix.exs to include Redix and CaStore for Redis communication.

LANGUAGE: elixir
CODE:
defp deps do
  [
    {:redix, "~> 1.1"},
    {:castore, ">= 0.0.0"}
  ]
end

----------------------------------------

TITLE: Installing Dependencies for FastAPI and Redis
DESCRIPTION: Command to install FastAPI, Upstash Redis client, and Uvicorn ASGI server using pip.

LANGUAGE: shell
CODE:
pip install fastapi upstash-redis uvicorn[standard]

----------------------------------------

TITLE: Setting Up Environment Variables for Upstash Redis Connection
DESCRIPTION: This snippet shows the content of a .env file containing the necessary credentials for connecting to an Upstash Redis database.

LANGUAGE: bash
CODE:
UPSTASH_REDIS_HOST=your_upstash_redis_host
UPSTASH_REDIS_PORT=your_upstash_redis_port
UPSTASH_REDIS_PASSWORD=your_upstash_redis_password

----------------------------------------

TITLE: Retrieving Random Field from Hash using HRANDFIELD in Upstash Redis (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the HRANDFIELD command to retrieve a single random field from a hash in Upstash Redis. It first sets a hash with multiple fields using HSET, then retrieves a random field using HRANDFIELD.

LANGUAGE: typescript
CODE:
await redis.hset("key", {
  id: 1,
  username: "chronark",
  name: "andreas"
 });
const randomField = await redis.hrandfield("key");
console.log(randomField); // one of "id", "username" or  "name"

----------------------------------------

TITLE: Setting Environment Variables for Redis Connection
DESCRIPTION: These commands export the Redis connection URL and token as environment variables, which are required for connecting to the Redis database.

LANGUAGE: shell
CODE:
export UPSTASH_REDIS_REST_URL=<YOUR_URL>
export UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Installing @upstash/ratelimit Package
DESCRIPTION: Commands for installing the rate limit package using npm or importing via deno.

LANGUAGE: bash
CODE:
npm install @upstash/ratelimit

LANGUAGE: typescript
CODE:
import { Ratelimit } from "https://cdn.skypack.dev/@upstash/ratelimit@latest";

----------------------------------------

TITLE: Counting Hash Fields with HLEN in Upstash Redis (TypeScript)
DESCRIPTION: This example demonstrates how to use the HLEN command to count the number of fields in a hash. It first sets a hash using HSET, then retrieves the field count using HLEN.

LANGUAGE: typescript
CODE:
await redis.hset("key", {
  id: 1,
  username: "chronark",
  });
const fields = await redis.hlen("key");
console.log(fields); // 2

----------------------------------------

TITLE: Implementing weather fetching and caching logic
DESCRIPTION: Define functions to fetch weather data from cache or external API, and cache the results in Redis.

LANGUAGE: elixir
CODE:
defp fetch_weather(location) do
  location = String.replace(location, " ", "%20")
  case fetch_weather_from_cache(location) do
    {:ok, cached_weather} ->
      {:ok, cached_weather}
    {:error, :not_found} ->
      fetch_weather_from_api(location)
    {:error, reason} ->
      {:error, reason}
  end
end

defp fetch_weather_from_cache(location) do
  case Redix.command(:redix, ["GET", "weather:#{location}"]) do
    {:ok, nil} ->
      {:error, :not_found}
    {:ok, cached_weather_json} ->
      {:ok, Jason.decode!(cached_weather_json)}
    {:error, _reason} ->
      {:error, "Failed to fetch weather data from cache."}
  end
end

defp fetch_weather_from_api(location) do
  weather_api_key = System.get_env("WEATHER_API_KEY")
  url = "http://api.weatherapi.com/v1/current.json?key=#{weather_api_key}&q=#{location}&aqi=no"

  case HTTPoison.get(url) do
    {:ok, %{status_code: 200, body: body}} ->
      weather_info = body
                    |> Jason.decode!()
                    |> get_weather_info()

      # Cache the weather response in Redis for 8 hours
      cache_weather_response(location, Jason.encode!(weather_info))

      {:ok, weather_info}
    {:ok, %{status_code: status_code, body: body}} ->
      {:error, "#{body} (#{status_code})"}
    {:error, _reason} ->
      {:error, "Failed to fetch weather data."}
  end
end

defp cache_weather_response(location, weather_data) do
  case Redix.command(:redix, ["SET", "weather:#{location}", weather_data, "EX", 8 * 60 * 60]) do
    {:ok, _} ->
      :ok
    {:error, _reason} ->
      {:error, "Failed to cache weather data."}
  end
end

----------------------------------------

TITLE: SQL Query for Temperature and Humidity Data Processing
DESCRIPTION: SQL rule that processes MQTT messages from temp_hum/emqx topic, extracting timestamp, client ID, temperature and humidity values from the payload.

LANGUAGE: sql
CODE:
SELECT
timestamp as up_timestamp,
clientid as client_id,
payload.temp as temp,
payload.hum as hum
FROM
"temp_hum/emqx"

----------------------------------------

TITLE: Setting Environment Variables for Redis and Weather API
DESCRIPTION: Shell commands to export environment variables for Redis connection and Weather API key.

LANGUAGE: shell
CODE:
export UPSTASH_REDIS_REST_URL=<YOUR_URL>
export UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>
export WEATHER_API_KEY=<YOUR_KEY>

----------------------------------------

TITLE: Inserting Elements in Redis List using LINSERT - Python
DESCRIPTION: Demonstrates how to insert an element 'x' before the existing element 'b' in a Redis list. First creates a list with rpush then uses linsert to add the new element at the specified position.

LANGUAGE: python
CODE:
redis.rpush("key", "a", "b", "c")
redis.linsert("key", "before", "b", "x")

----------------------------------------

TITLE: Creating Serverless Project with AWS Node.js
DESCRIPTION: Shell commands to create a new serverless project using the Serverless framework.

LANGUAGE: shell
CODE:
➜  serverless

Serverless: No project detected. Do you want to create a new one? Yes

Serverless: What do you want to make? AWS Node.js

Serverless: What do you want to call this project? producer

Project successfully created in 'producer' folder.

You can monitor, troubleshoot, and test your new service with a free Serverless account.

Serverless: Would you like to enable this? No

You can run the "serverless" command again if you change your mind later.

----------------------------------------

TITLE: Adding Members to Redis Set using SADD Command
DESCRIPTION: Demonstrates how to use the SADD command to add multiple members to a Redis set. The first example shows adding new members returning 3 successful additions, while the second example shows adding existing members returning 0 since they're already present in the set.

LANGUAGE: typescript
CODE:
// 3
await redis.sadd("key", "a", "b", "c"); 

// 0
await redis.sadd("key", "a", "b"); 

----------------------------------------

TITLE: Creating .env File for Redis Credentials
DESCRIPTION: This snippet shows the content of a .env file used to store Redis credentials, which can be loaded using python-dotenv for secure configuration management.

LANGUAGE: text
CODE:
UPSTASH_REDIS_REST_URL=<YOUR_URL>
UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Response structure for rate limiting in Python
DESCRIPTION: This code snippet defines the structure of the response returned by the limit method. It includes fields for whether the request is allowed, the request limit, remaining requests, and reset time.

LANGUAGE: python
CODE:
@dataclasses.dataclass
class Response:
    allowed: bool
    """
    Whether the request may pass(`True`) or exceeded the limit(`False`)
    """

    limit: int
    """
    Maximum number of requests allowed within a window.
    """

    remaining: int
    """
    How many requests the user has left within the current window.
    """

    reset: float
    """
    Unix timestamp in seconds when the limits are reset
    """

----------------------------------------

TITLE: Using LPOS Command in Upstash Redis with TypeScript
DESCRIPTION: Demonstrates how to use the LPOS command to find the index of an element in a Redis list. The example shows pushing elements to a list and then finding the index of a specific element.

LANGUAGE: typescript
CODE:
await redis.rpush("key", "a", "b", "c"); 
const index = await redis.lpos("key", "b");
console.log(index); // 1

----------------------------------------

TITLE: Setting Upstash Redis Environment Variables
DESCRIPTION: Export the Upstash Redis credentials as environment variables. These are required for connecting to the Redis database in the application.

LANGUAGE: shell
CODE:
export UPSTASH_REDIS_REST_URL=<YOUR_URL>
export UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Performing Set Intersection and Storing Result with SINTERSTORE in TypeScript
DESCRIPTION: This snippet demonstrates how to use the SINTERSTORE command in Redis. It first adds elements to two sets, then performs an intersection operation and stores the result in a destination set.

LANGUAGE: typescript
CODE:
await redis.sadd("set1", "a", "b", "c"); 
await redis.sadd("set2", "c", "d", "e"); 
await redis.sinterstore("destination", "set1", "set2");

----------------------------------------

TITLE: Creating Project Directory and Installing Dependencies
DESCRIPTION: These commands create a new directory for the project, initialize a Node.js project, and install the ioredis dependency.

LANGUAGE: bash
CODE:
mkdir app_runner_example

cd app_runner_example

npm init

npm install ioredis

----------------------------------------

TITLE: Performing Bitwise AND Operation with Redis BITOP Command in Python
DESCRIPTION: This example demonstrates how to use the BITOP command to perform a bitwise AND operation on two keys and store the result in a destination key. It sets specific bits in two keys, performs the AND operation, and then verifies the result.

LANGUAGE: python
CODE:
# key1 = 00000001
# key2 = 00000010
redis.setbit("key1", 0, 1)
redis.setbit("key2", 0, 0)
redis.setbit("key2", 1, 1)

assert redis.bitop("AND", "dest", "key1", "key2") == 1

# result = 00000000
assert redis.getbit("dest", 0) == 0
assert redis.getbit("dest", 1) == 0

----------------------------------------

TITLE: Running the URL Shortener Python Script
DESCRIPTION: This command executes the Python script that implements the URL shortener, demonstrating how to run the application.

LANGUAGE: shell
CODE:
python url_shortener.py

----------------------------------------

TITLE: Installing upstash-ratelimit package using pip
DESCRIPTION: This command installs the upstash-ratelimit package using pip, the Python package installer.

LANGUAGE: bash
CODE:
pip install upstash-ratelimit

----------------------------------------

TITLE: Pushing Elements to List End with RPUSH in Upstash Redis (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the RPUSH command to add elements to the end of a list in Upstash Redis. It shows pushing multiple elements at once and then a single element, returning the updated list length after each operation.

LANGUAGE: typescript
CODE:
const length1 = await redis.rpush("key", "a", "b", "c"); 
console.log(length1); // 3
const length2 = await redis.rpush("key", "d"); 
console.log(length2); // 4

----------------------------------------

TITLE: Fly.io Environment Configuration
DESCRIPTION: TOML configuration for setting up Redis URL environment variable in Fly.io application.

LANGUAGE: toml
CODE:
[env]
  REDIS_URL = "<your-upstash-redis-url>"

----------------------------------------

TITLE: Initializing Redis Coin Data with Shell Commands
DESCRIPTION: Shell command to populate Redis database with cryptocurrency data including name, price, and image URLs using rpush command

LANGUAGE: shell
CODE:
rpush coins '{ "name" : "Bitcoin", "price": 56819, "image": "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"}' '{ "name" : "Ethereum", "price": 2130, "image": "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"}' '{ "name" : "Cardano", "price": 1.2, "image": "https://s2.coinmarketcap.com/static/img/coins/64x64/2010.png"}' '{ "name" : "Polkadot", "price": 35.96, "image": "https://s2.coinmarketcap.com/static/img/coins/64x64/6636.png"}' '{ "name" : "Stellar", "price": 0.506, "image": "https://s2.coinmarketcap.com/static/img/coins/64x64/512.png"}'

----------------------------------------

TITLE: Installing Upstash Redis Package
DESCRIPTION: npm command to install the @upstash/redis package for Redis integration in the project.

LANGUAGE: shell
CODE:
npm install @upstash/redis

----------------------------------------

TITLE: Using ZLEXCOUNT with Redis in TypeScript
DESCRIPTION: This example demonstrates how to use the ZLEXCOUNT command with Redis in TypeScript. It first adds elements to a sorted set using ZADD, then counts elements within a lexicographical range using ZLEXCOUNT.

LANGUAGE: typescript
CODE:
await redis.zadd("key", 
    { score: 1, member: "one"}, 
    { score: 2, member: "two" },
);
const elements = await redis.zlexcount("key", "two", "+");
console.log(elements); // 1

----------------------------------------

TITLE: Configuring Upstash Redis Environment Variables
DESCRIPTION: Environment variable configuration for Upstash Redis connection credentials.

LANGUAGE: shell
CODE:
UPSTASH_REDIS_REST_URL=<YOUR_URL>
UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Renaming Redis Keys using TypeScript
DESCRIPTION: Example showing how to rename a Redis key from 'old' to 'new' using the RENAME command. The operation returns 'OK' on success.

LANGUAGE: typescript
CODE:
await redis.rename("old", "new");

----------------------------------------

TITLE: Python Dependencies - Requirements File
DESCRIPTION: Requirements.txt file specifying the upstash-redis package as a dependency for the Lambda function.

LANGUAGE: txt
CODE:
upstash-redis

----------------------------------------

TITLE: Redis Set Intersection with Score Aggregation
DESCRIPTION: Example showing how to use ZINTER with score aggregation, returning both elements and their combined scores using the SUM aggregation method.

LANGUAGE: python
CODE:
redis.zadd("key1", {"a": 1, "b": 2, "c": 3})

redis.zadd("key2", {"a": 3, "b": 4, "c": 5})

result = redis.zinter(["key1", "key2"], withscores=True, aggregate="SUM")

assert result == [("a", 4), ("b", 6), ("c", 8)]

----------------------------------------

TITLE: Setting JSON Values with XX Option in Upstash Redis
DESCRIPTION: Example of setting a JSON value with the XX option, which only sets the value if the path already exists.

LANGUAGE: typescript
CODE:
const value = ...
redis.json.set(key, "$.path", value, { xx:true });

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Environment variable configuration for Upstash Redis credentials.

LANGUAGE: shell
CODE:
UPSTASH_REDIS_REST_URL=<YOUR_URL>
UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Installing Upstash Ratelimit Package
DESCRIPTION: Commands to install the Upstash rate limiting plugin for Strapi using npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install --save @upstash/strapi-plugin-upstash-ratelimit

LANGUAGE: bash
CODE:
yarn add @upstash/strapi-plugin-upstash-ratelimit

----------------------------------------

TITLE: Deployment Commands
DESCRIPTION: Commands for setting production secrets and deploying the SST application

LANGUAGE: shell
CODE:
npx sst secrets set --stage prod UPSTASH_REDIS_REST_URL <YOUR_URL>
npx sst secrets set --stage prod UPSTASH_REDIS_REST_TOKEN <YOUR_TOKEN>
npx sst deploy --stage prod

----------------------------------------

TITLE: Counting Set Members with SCARD in Redis using Python
DESCRIPTION: This example demonstrates how to use the SCARD command in Redis to count the number of members in a set. It first adds elements to a set using SADD, then uses SCARD to verify the count.

LANGUAGE: python
CODE:
redis.sadd("key", "a", "b", "c");

assert redis.scard("key") == 3

----------------------------------------

TITLE: Lambda Function Implementation - Python
DESCRIPTION: Python implementation of the Lambda function that increments and returns a counter value using Upstash Redis.

LANGUAGE: python
CODE:
from upstash_redis import Redis

redis = Redis.from_env()

def handler(event, context):
    count = redis.incr('counter')
    return {
        'statusCode': 200,
        'body': f'Counter: {count}'
    }

----------------------------------------

TITLE: Retrieving Set Members with SMEMBERS in Python
DESCRIPTION: This example demonstrates how to use the SMEMBERS command in Redis to retrieve all members of a set. It first adds elements to a set using SADD, then retrieves and verifies the set members using SMEMBERS.

LANGUAGE: python
CODE:
redis.sadd("set", "a", "b", "c"); 
assert redis.smembers("set") == {"a", "b", "c"}

----------------------------------------

TITLE: Retrieving Multiple Random Members from Redis Set - TypeScript
DESCRIPTION: Example demonstrating how to retrieve multiple random members from a Redis set by specifying a count parameter. Creates a set with multiple members and retrieves two random members.

LANGUAGE: typescript
CODE:
await redis.sadd("set", "a", "b", "c"); 
const members = await redis.srandmember("set", 2);
console.log(members); // ["a", "b"]

----------------------------------------

TITLE: Interacting with Redis using Laravel's Redis Facade
DESCRIPTION: PHP code demonstrating how to use Laravel's Redis Facade to store and retrieve values from Redis. This is useful for simple caching or temporary data storage.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Redis;

// Storing a value in Redis
Redis::set('key', 'value');

// Retrieving a value from Redis
$value = Redis::get('key');

----------------------------------------

TITLE: Removing Members from Sorted Set by Score Range in Upstash Redis using TypeScript
DESCRIPTION: This snippet demonstrates how to use the ZREMRANGEBYSCORE command in Upstash Redis to remove members from a sorted set based on a score range. It requires a Redis client instance, a key for the sorted set, and minimum and maximum scores for the range to be removed.

LANGUAGE: typescript
CODE:
await redis.zremrangebyscore("key", 2, 5)

----------------------------------------

TITLE: Redis Command Examples
DESCRIPTION: Examples of newer Redis commands being added to Upstash

LANGUAGE: markdown
CODE:
EXPIRETIME, LMPOP, ZINTERCARD, EVAL_RO

----------------------------------------

TITLE: Connecting with ioredis in Node.js
DESCRIPTION: Example of connecting to Upstash Redis using the ioredis client in Node.js. Uses Redis connection string with SSL enabled.

LANGUAGE: javascript
CODE:
const Redis = require("ioredis");

let client = new Redis("rediss://:YOUR_PASSWORD@YOUR_ENDPOINT:YOUR_PORT");
await client.set("foo", "bar");
let x = await client.get("foo");
console.log(x);

----------------------------------------

TITLE: Redis Error Message Example
DESCRIPTION: Example of the error message returned when a Redis command exceeds the maximum request size limit of 1MB for Free and Pay-as-you-go databases.

LANGUAGE: plaintext
CODE:
ReplyError: ERR max request size exceeded

----------------------------------------

TITLE: Enabling Hash Command Notifications in Upstash Redis
DESCRIPTION: Commands to enable keyspace notifications for hash operations using both cURL and redis-cli. Sets the notify-keyspace-events configuration to 'Kh' for hash command monitoring.

LANGUAGE: bash
CODE:
curl -X POST \
    -d '["CONFIG", "SET", "notify-keyspace-events", "Kh"]' \
    -H "Authorization: Bearer $UPSTASH_REDIS_REST_TOKEN" \
    $UPSTASH_REDIS_REST_URL

LANGUAGE: bash
CODE:
redis-cli --tls -u $UPSTASH_REDIS_CLI_URL config set notify-keyspace-events Kh

----------------------------------------

TITLE: Serverless Framework Configuration for AWS Lambda
DESCRIPTION: YAML configuration for deploying the autocomplete API using Serverless Framework. Defines AWS Lambda function settings, API Gateway integration, and environment variables.

LANGUAGE: yaml
CODE:
service: auto-complete-api
useDotenv: true
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  environment:
    REDIS_URL: REPLACE_YOUR_REDIS_URL

functions:
  query:
    handler: handler.query
    events:
      - httpApi:
          path: /query
          method: get
          cors: true

----------------------------------------

TITLE: Performing Set Intersection in Redis using Python
DESCRIPTION: Shows how to use the SINTER command to find common elements between two Redis sets. The example creates two sets and demonstrates finding their intersection using the sinter() method.

LANGUAGE: python
CODE:
redis.sadd("set1", "a", "b", "c"); 
redis.sadd("set2", "c", "d", "e"); 

assert redis.sinter("set1", "set2") == {"c"}

----------------------------------------

TITLE: Deleting JSON Values with Upstash Redis in TypeScript
DESCRIPTION: Demonstrates how to delete a value from a JSON document stored in Redis using the json.del command. The command takes a key and an optional JSON path parameter, returning the number of paths that were deleted.

LANGUAGE: typescript
CODE:
await redis.json.del("key", "$.path.to.value");

----------------------------------------

TITLE: Configuring Upstash Redis Environment Variables
DESCRIPTION: Environment variable configuration for Upstash Redis connection credentials.

LANGUAGE: shell
CODE:
UPSTASH_REDIS_REST_URL=<YOUR_URL>
UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Installing required Python libraries
DESCRIPTION: Command to install necessary Python libraries for the web scraper project using pip.

LANGUAGE: bash
CODE:
pip install threading requests upstash-redis python-dotenv

----------------------------------------

TITLE: Running Supabase function locally with Upstash Redis counter
DESCRIPTION: These commands start the Supabase project locally and serve the 'upstash-redis-counter' function with environment variables, without JWT verification.

LANGUAGE: shell
CODE:
supabase start
supabase functions serve upstash-redis-counter --no-verify-jwt --env-file supabase/functions/upstash-redis-counter/.env

----------------------------------------

TITLE: Creating Serverless Framework Project for AWS Lambda
DESCRIPTION: Commands to set up a new Serverless Framework project for AWS Lambda with Node.js and HTTP API.

LANGUAGE: shell
CODE:
➜  tutorials > ✗ serverless
Serverless ϟ Framework

Welcome to Serverless Framework V.4

Create a new project by selecting a Template to generate scaffolding for a specific use-case.

✔ Select A Template: · AWS / Node.js / HTTP API

✔ Name Your Project: · ratelimit-serverless

✔ Template Downloaded

✔ Create Or Select An Existing App: · Create A New App

✔ Name Your New App: · ratelimit-serverless

Your new Service "ratelimit-serverless" is ready. Here are next steps:

• Open Service Directory: cd ratelimit-serverless
• Install Dependencies: npm install (or use another package manager)
• Deploy Your Service: serverless deploy

----------------------------------------

TITLE: Searching Array Index with JSON.ARRINDEX in Python for Upstash Redis
DESCRIPTION: This snippet demonstrates how to use the JSON.ARRINDEX command in Upstash Redis to find the index of a value in a JSON array. It takes a key, a path to the array, and a value to search for, returning the index of the first occurrence or -1 if not found.

LANGUAGE: python
CODE:
index = redis.json.arrindex("key", "$.path.to.array", "a")

----------------------------------------

TITLE: Checking Redis Key TTL Values with Python
DESCRIPTION: Demonstrates how to check TTL values for Redis keys, including setting values, checking non-existent keys, and setting expiration times. Shows various TTL scenarios: keys with no expiration (-1), keys with expiration (>0), and non-existent keys (-2).

LANGUAGE: python
CODE:
# Get the TTL of a key
redis.set("my-key", "value")

assert redis.ttl("my-key") == -1

redis.expire("my-key", 10)

assert redis.ttl("my-key") > 0

# Non existent key
assert redis.ttl("non-existent-key") == -2

----------------------------------------

TITLE: Configuring Upstash Redis Environment Variables
DESCRIPTION: Example of setting up the required environment variables for Upstash Redis in the .env file.

LANGUAGE: shell
CODE:
UPSTASH_REDIS_REST_URL=<YOUR_URL>
UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: Command to run the FastAPI application using Uvicorn ASGI server with auto-reload enabled.

LANGUAGE: shell
CODE:
uvicorn main:app --reload

----------------------------------------

TITLE: Creating Next.js Project and Installing Dependencies
DESCRIPTION: Commands to create a new Next.js application, initialize SST, and install Upstash Redis package.

LANGUAGE: shell
CODE:
npx create-next-app@latest
cd my-app

LANGUAGE: shell
CODE:
sst init

LANGUAGE: shell
CODE:
npm install @upstash/redis

----------------------------------------

TITLE: Configuring package.json for Upstash Redis Dependencies
DESCRIPTION: JSON configuration for package.json to include @upstash/ratelimit and @upstash/redis dependencies.

LANGUAGE: json
CODE:
{
    "dependencies": {
      "@upstash/ratelimit": "latest",
      "@upstash/redis": "latest"
    }
  }

----------------------------------------

TITLE: Retrieving Random Fields with Values from Redis Hash in Python
DESCRIPTION: This snippet illustrates using the HRANDFIELD command with both count and withvalues parameters. It retrieves a single random field along with its value from a Redis hash, returning the result as a dictionary.

LANGUAGE: python
CODE:
redis.hset("myhash", values={
    "field1": "Hello",
    "field2": "World"
})

assert redis.hrandfield("myhash", count=1, withvalues=True) in [
    {"field1": "Hello"},
    {"field2": "World"}
]

----------------------------------------

TITLE: Using ZDIFFSTORE Command in Python with Redis
DESCRIPTION: This snippet demonstrates how to use the ZDIFFSTORE command in Python with Redis. It adds elements to two sorted sets, then calculates and stores the difference between them in a new key.

LANGUAGE: python
CODE:
redis.zadd("key1", {"a": 1, "b": 2, "c": 3})

redis.zadd("key2", {"c": 3, "d": 4, "e": 5})

# a and b
assert redis.zdiffstore("dest", ["key1", "key2"]) == 2

----------------------------------------

TITLE: Implementing Redis Counter API Route Handler
DESCRIPTION: Next.js API route implementation using Upstash Redis to create a counter endpoint. The route increments a counter value and returns it as JSON response.

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis";
import { NextResponse } from "next/server";

const redis = Redis.fromEnv();

export async function GET() {
    const count = await redis.incr("counter");
    return NextResponse.json({ count });
}

export const dynamic = 'force-dynamic'

----------------------------------------

TITLE: Installing Upstash Redis in Cloudflare Worker Project
DESCRIPTION: This snippet shows the commands to navigate to the project directory and install the Upstash Redis package using npm.

LANGUAGE: shell
CODE:
cd greetings-cloudflare
npm install @upstash/redis

----------------------------------------

TITLE: Environment Configuration for Upstash Redis
DESCRIPTION: Environment variable configuration for Upstash Redis connection credentials.

LANGUAGE: shell
CODE:
UPSTASH_REDIS_REST_URL=<YOUR_URL>
UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Setting Multiple Hash Fields with Redis HSET in Python
DESCRIPTION: Example showing how to set multiple fields in a Redis hash using the hset method. The code demonstrates setting two fields ('field1' and 'field2') in a hash named 'myhash' and verifies that 2 fields were added via assertion.

LANGUAGE: python
CODE:
# Set multiple fields
assert redis.hset("myhash"{
  "field1": "Hello",
  "field2": "World"
}) == 2

----------------------------------------

TITLE: Retrieving All Keys Using SCAN in Python with Upstash Redis
DESCRIPTION: This code snippet demonstrates how to use the SCAN operation in a loop to retrieve all keys from an Upstash Redis database. It uses a cursor-based approach, continuing the loop until the cursor returns 0, indicating that all keys have been fetched.

LANGUAGE: python
CODE:
# Get all keys

cursor = 0
results = []

while True:
    cursor, keys = redis.scan(cursor, match="*")

    results.extend(keys)
    if cursor == 0:
        break

----------------------------------------

TITLE: Updating Requirements File
DESCRIPTION: Specifies the project dependencies including Django and upstash-redis package

LANGUAGE: txt
CODE:
Django==4.1.3
upstash-redis

----------------------------------------

TITLE: Incrementing Hash Field Value with HINCRBYFLOAT in TypeScript
DESCRIPTION: This example demonstrates how to use the HINCRBYFLOAT command in Redis. It first sets a hash field value using HSET, then increments it by a float value using HINCRBY, and finally logs the result.

LANGUAGE: typescript
CODE:
await redis.hset("key", {
  field: 20,
  });
const after = await redis.hincrby("key", "field", 2.5);
console.log(after); // 22.5

----------------------------------------

TITLE: Setting Upstash Redis Environment Variables
DESCRIPTION: Exports the required Upstash Redis credentials as environment variables

LANGUAGE: shell
CODE:
export UPSTASH_REDIS_REST_URL=<YOUR_URL>
export UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Querying Redis Keys with Pattern Matching
DESCRIPTION: Examples of using the Redis KEYS command to retrieve keys matching specific patterns. Includes both prefix matching and matching all keys. Note: This command should be avoided in production due to potential performance impact.

LANGUAGE: python
CODE:
keys = redis.keys("prefix*")

LANGUAGE: python
CODE:
keys = redis.keys("*")

----------------------------------------

TITLE: Creating Project Directory for AWS CDK
DESCRIPTION: Shell commands to create and navigate to the project directory for the AWS CDK application.

LANGUAGE: shell
CODE:
mkdir counter-cdk && cd counter-cdk

----------------------------------------

TITLE: Retrieving Random Fields with Values from Hash using HRANDFIELD in Upstash Redis (TypeScript)
DESCRIPTION: This snippet demonstrates using HRANDFIELD to retrieve random fields along with their values from a hash. It sets a hash with multiple fields, then retrieves two random fields with their values using the count and withValues parameters.

LANGUAGE: typescript
CODE:
await redis.hset("key", {
  id: 1,
  username: "chronark",
  name: "andreas",
});
const randomFields = await redis.hrandfield("key", 2, true);
console.log(randomFields); // { id: "1", username: "chronark" } or any other combination

----------------------------------------

TITLE: Setting Up Upstash Redis Environment Variables
DESCRIPTION: Shell commands to export the Upstash Redis REST URL and token as environment variables, which are required for the Lambda function to connect to the Redis database.

LANGUAGE: shell
CODE:
export UPSTASH_REDIS_REST_URL=<YOUR_URL>
export UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Configuring Upstash Redis Environment Variables
DESCRIPTION: Environment variable configuration for Upstash Redis connection credentials.

LANGUAGE: shell
CODE:
UPSTASH_REDIS_REST_URL=<YOUR_URL>
UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Running the FastAPI Application
DESCRIPTION: Command to start the FastAPI server with hot reload enabled.

LANGUAGE: bash
CODE:
uvicorn main:app --reload

----------------------------------------

TITLE: Initializing AWS CDK Project with TypeScript
DESCRIPTION: Shell command to initialize a new AWS CDK project using TypeScript as the programming language.

LANGUAGE: shell
CODE:
cdk init app --language typescript

----------------------------------------

TITLE: Retrieving Multiple Random Fields from Hash using HRANDFIELD in Upstash Redis (TypeScript)
DESCRIPTION: This example shows how to use HRANDFIELD to retrieve multiple random fields from a hash. It sets a hash with multiple fields, then retrieves two random fields using the count parameter.

LANGUAGE: typescript
CODE:
await redis.hset("key", {
  id: 1,
  username: "chronark",
  name: "andreas",
});
const randomFields = await redis.hrandfield("key", 2);
console.log(randomFields); // ["id", "username"] or any other combination

----------------------------------------

TITLE: Executing SET Command with Token as URL Parameter
DESCRIPTION: This snippet demonstrates an alternative method to execute a SET command using the Upstash Redis REST API, where the authentication token is provided as a URL parameter instead of a header.

LANGUAGE: shell
CODE:
curl https://us1-merry-cat-32748.upstash.io/set/foo/bar?_token=2553feg6a2d9842h2a0gcdb5f8efe9934

----------------------------------------

TITLE: Implementing Redis API Endpoint
DESCRIPTION: Next.js API route implementation using Upstash Redis for counter functionality

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis";
import type { NextApiRequest, NextApiResponse } from "next";
import { Config } from "sst/node/config";

const redis = new Redis({
  url: Config.UPSTASH_REDIS_REST_URL,
  token: Config.UPSTASH_REDIS_REST_TOKEN,
  });

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse,
) {
  const count = await redis.incr("counter");
  res.status(200).json({ count });
}

----------------------------------------

TITLE: Implementing Counter Function with Upstash Redis in TypeScript
DESCRIPTION: Lambda function that increments a counter in Upstash Redis and returns the current count. It uses the Redis client initialized from environment variables.

LANGUAGE: typescript
CODE:
import { Redis } from '@upstash/redis';

const redis = Redis.fromEnv();

export const handler = async function() {
    const count = await redis.incr("counter");
    return {
        statusCode: 200,
        body: JSON.stringify('Counter: ' + count),
    };
};

----------------------------------------

TITLE: Running Cloudflare Worker Locally with Wrangler
DESCRIPTION: This shell command starts a local development session for the Cloudflare Worker using Wrangler.

LANGUAGE: shell
CODE:
npx wrangler dev

----------------------------------------

TITLE: Retrieving Single Random Field from Redis Hash in Python
DESCRIPTION: This snippet demonstrates how to use the HRANDFIELD command to retrieve a single random field from a Redis hash. It first sets up a hash with two fields, then asserts that the returned random field is one of the two fields.

LANGUAGE: python
CODE:
redis.hset("myhash", values={
    "field1": "Hello",
    "field2": "World"
})

assert redis.hrandfield("myhash") in ["field1", "field2"]

----------------------------------------

TITLE: Exporting Data from Regional Upstash Redis Database
DESCRIPTION: Command to export data from a regional Upstash Redis database using the upstash-redis-dump tool. It specifies the database, host, port, password, and enables TLS.

LANGUAGE: bash
CODE:
upstash-redis-dump -db 0 -host YOUR_REGIONAL_HOST -port YOUR_DATABASE_PORT -pass YOUR_PASSWORD -tls > redis.dump

----------------------------------------

TITLE: Setting Upstash Redis Secrets
DESCRIPTION: Commands to set Upstash Redis credentials as SST secrets

LANGUAGE: shell
CODE:
npx sst secrets set UPSTASH_REDIS_REST_URL <YOUR_URL>
npx sst secrets set UPSTASH_REDIS_REST_TOKEN <YOUR_TOKEN>

----------------------------------------

TITLE: Deploying Cloudflare Worker with Wrangler
DESCRIPTION: This shell command builds and deploys the Cloudflare Worker to the Cloudflare network using Wrangler.

LANGUAGE: shell
CODE:
npx wrangler deploy

----------------------------------------

TITLE: Retrieving All Hash Values with HVALS in Upstash Redis (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the HVALS command to retrieve all values from a hash in Upstash Redis. It first sets a hash using HSET, then retrieves all values using HVALS.

LANGUAGE: typescript
CODE:
await redis.hset("key", {
  field1: "Hello",
  field2: "World",
})
const values = await redis.hvals("key")
console.log(values) // ["Hello", "World"]

----------------------------------------

TITLE: Python Lambda Function Implementation
DESCRIPTION: AWS Lambda function implementation in Python that increments a counter using Upstash Redis

LANGUAGE: python
CODE:
from upstash_redis import Redis

redis = Redis.from_env()

def handler(event, context):
    count = redis.incr('counter')
    return {
        'statusCode': 200,
        'body': f'Counter: {count}'
    }

----------------------------------------

TITLE: AWS CDK Stack Configuration
DESCRIPTION: TypeScript code for configuring AWS CDK stack with Lambda function and environment variables

LANGUAGE: typescript
CODE:
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as path from 'path';

export class CounterCdkStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const counterFunction = new lambda.Function(this, 'CounterFunction', {
      code: lambda.Code.fromAsset(path.join(__dirname, 'api'), {
        bundling: {
          image: lambda.Runtime.PYTHON_3_9.bundlingImage,
          command: [
            'bash', '-c',
            'pip install -r requirements.txt -t /asset-output && cp -au . /asset-output'
          ],
        },
      }),
      runtime: lambda.Runtime.PYTHON_3_9,
      handler: 'index.handler',
      environment: {
        UPSTASH_REDIS_REST_URL: process.env.UPSTASH_REDIS_REST_URL || '',
        UPSTASH_REDIS_REST_TOKEN: process.env.UPSTASH_REDIS_REST_TOKEN || '',
      },
    });

    const counterFunctionUrl = counterFunction.addFunctionUrl({
      authType: lambda.FunctionUrlAuthType.NONE,
    });

    new cdk.CfnOutput(this, "counterFunctionUrlOutput", {
      value: counterFunctionUrl.url,
    })
  }
}

----------------------------------------

TITLE: Installing SST and Dependencies
DESCRIPTION: Commands to create a new SST Next.js application and install required dependencies

LANGUAGE: shell
CODE:
npx create-sst@latest --template standard/nextjs
cd my-sst-app
npm install

----------------------------------------

TITLE: Implementing Serverless Page View Counter in Golang with Redis
DESCRIPTION: This code snippet demonstrates a serverless function that increments a page view counter in Redis and returns the count as a JSON response. It uses the go-redis client to interact with an Upstash Redis database and is designed to run on AWS Lambda with API Gateway.

LANGUAGE: go
CODE:
package main
import (
    "context"
    "encoding/json"
    "github.com/aws/aws-lambda-go/events"
    "github.com/aws/aws-lambda-go/lambda"
    "github.com/go-redis/redis/v8"
    "strconv"
)
var ctx = context.Background()

type MyResponse struct {
    Count string `json:"count:"`
}

var rdb = redis.NewClient(&redis.Options{
    Addr: "YOUR_REDIS_ENDPOINT",
    Password: "YOUR_REDIS_PASSWORD",
    DB: 0,
})

func handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
    count, err := rdb.Incr(ctx, "count").Result()
    if err != nil {
        panic(err)
    }
    response := &MyResponse{
        Count: strconv.FormatInt(count, 10),
    }
    body, err := json.Marshal(response)
    return events.APIGatewayProxyResponse{
        Headers: map[string]string{"Content-Type": "application/json"},
        Body: string(body),
        StatusCode: 200,
        }, nil
}

func main() {
    lambda.Start(handler)
}

----------------------------------------

TITLE: Installing Upstash Redis SDK
DESCRIPTION: This command installs the Upstash Redis SDK for use in the Cloudflare Workers project.

LANGUAGE: shell
CODE:
npm install @upstash/redis

----------------------------------------

TITLE: Configuring SST Stack with Redis Secrets
DESCRIPTION: TypeScript configuration for SST stack that binds Redis secrets to the Next.js site

LANGUAGE: typescript
CODE:
import { Config, StackContext, NextjsSite } from "sst/constructs";

export function Default({ stack }: StackContext) {
  const UPSTASH_REDIS_REST_URL = new Config.Secret(stack, "UPSTASH_REDIS_REST_URL");
  const UPSTASH_REDIS_REST_TOKEN = new Config.Secret(stack, "UPSTASH_REDIS_REST_TOKEN");
  const site = new NextjsSite(stack, "site", {
    bind: [UPSTASH_REDIS_REST_URL, UPSTASH_REDIS_REST_TOKEN],
    path: "packages/web",
  });
  stack.addOutputs({
    SiteUrl: site.url,
  });
}

----------------------------------------

TITLE: Installing Laravel CLI and Creating a New Project
DESCRIPTION: Commands for installing the Laravel CLI globally using Composer and creating a new Laravel project. It also provides an alternative method using Composer directly.

LANGUAGE: shell
CODE:
composer global require laravel/installer

LANGUAGE: shell
CODE:
laravel new example-app
cd example-app

LANGUAGE: shell
CODE:
composer create-project laravel/laravel example-app
cd example-app

----------------------------------------

TITLE: Environment Configuration
DESCRIPTION: Shell commands to set up Upstash Redis environment variables

LANGUAGE: shell
CODE:
export UPSTASH_REDIS_REST_URL=<YOUR_URL>
export UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Testing the Task Queue System
DESCRIPTION: Shell command to test the producer function by invoking it locally with sample employee data.

LANGUAGE: shell
CODE:
serverless invoke local -f hello -d "{name:'Bill Gates', email:'bill@upstash.com', position:'Developer', date:'20210620'}"

----------------------------------------

TITLE: Setting Bitfield Values in Python with Upstash Redis
DESCRIPTION: This snippet demonstrates how to set values in a bitfield using the set command. It sets two 4-bit unsigned integers at different offsets.

LANGUAGE: python
CODE:
redis.set("mykey", "")

result = redis.bitfield("mykey") \
    .set("u4", 0, 16) \
    .set("u4", 4, 1) \
    .execute()
  
assert result == [0, 1]

----------------------------------------

TITLE: Implementing Redis Counter API Route
DESCRIPTION: Next.js API route implementation using Upstash Redis to create a simple counter increment function.

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis";
import type { NextApiRequest, NextApiResponse } from "next";

const redis = Redis.fromEnv();

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse,
) {
  const count = await redis.incr("counter");
  res.status(200).json({ count });
}

----------------------------------------

TITLE: Next.js Page Implementation with Redis Counter
DESCRIPTION: Implementation of a Next.js page component that increments and displays a Redis counter.

LANGUAGE: tsx
CODE:
import { Redis } from "@upstash/redis";

const redis = Redis.fromEnv();

export default async function Home() {
  const count = await redis.incr("counter");
  return (
    <div className="flex h-screen w-screen items-center justify-center">
      <h1 className="text-4xl font-bold">Counter: {count}</h1>
    </div>
  )
}

----------------------------------------

TITLE: Installing Next.js and Upstash Redis
DESCRIPTION: Commands to create a new Next.js application with Pages Router and install the @upstash/redis package.

LANGUAGE: shell
CODE:
npx create-next-app@latest
cd my-app
npm install @upstash/redis

----------------------------------------

TITLE: Configuring Redis Environment Variables
DESCRIPTION: Environment variable setup for Redis connection in the .env file, including options for Vercel & Upstash integration.

LANGUAGE: shell
CODE:
UPSTASH_REDIS_REST_URL=<YOUR_URL>
UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

LANGUAGE: shell
CODE:
KV_REST_API_URL=<YOUR_URL>
KV_REST_API_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Development and Deployment Commands
DESCRIPTION: Commands for running the application locally and deploying to AWS using SST.

LANGUAGE: shell
CODE:
npm run dev

LANGUAGE: shell
CODE:
sst deploy

----------------------------------------

TITLE: Executing FLUSHALL Command in Python for Upstash Redis
DESCRIPTION: These snippets demonstrate how to use the FLUSHALL command in Python with Upstash Redis. The command deletes all keys from the database. It can be executed synchronously (default) or asynchronously using the 'flush_type' argument.

LANGUAGE: python
CODE:
redis.flushall()

LANGUAGE: python
CODE:
redis.flushall(flush_type="ASYNC")

----------------------------------------

TITLE: Creating Redis Database with Fly CLI
DESCRIPTION: Command line process for creating a new Redis database instance using Fly CLI, including organization selection, database naming, and plan selection.

LANGUAGE: shell
CODE:
> flyctl redis create
? Select Organization: upstash (upstash)
? Choose a Redis database name (leave blank to generate one):
? Choose a primary region (can't be changed later) San Jose, California (US) (sjc)

Upstash Redis can evict objects when memory is full. This is useful when caching in Redis. This setting can be changed later.
Learn more at https://fly.io/docs/reference/redis/#memory-limits-and-object-eviction-policies
? Would you like to enable eviction? No
? Optionally, choose one or more replica regions (can be changed later):
? Select an Upstash Redis plan 3G: 3 GB Max Data Size

Your Upstash Redis database silent-tree-6201 is ready.
Apps in the upstash org can connect to at redis://default:978ba2e07tyrt67598acd8ac916a@fly-silent-tree-6201.upstash.io
If you have redis-cli installed, use fly redis connect to connect to your database.

----------------------------------------

TITLE: Dockerfile for Node.js Application with Upstash Redis
DESCRIPTION: Multi-stage Dockerfile that builds and runs a Node.js application with Upstash Redis integration. Includes security best practices and proper dependency management.

LANGUAGE: dockerfile
CODE:
FROM node:18-alpine AS base

FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm ci

FROM base AS runner
WORKDIR /app
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nodejs
COPY --from=deps /app/node_modules ./node_modules
COPY . .
USER node
EXPOSE 3000
ENV PORT 3000
CMD ["npm", "run", "start"]

----------------------------------------

TITLE: Implementing Redis Counter in Next.js Home Page
DESCRIPTION: Next.js component that initializes a Redis connection, increments a counter, and displays its value. This code goes in the /app/page.tsx file.

LANGUAGE: tsx
CODE:
import { Redis } from "@upstash/redis";

const redis = Redis.fromEnv();

export default async function Home() {
  const count = await redis.incr("counter");
  return (
    <div className="flex h-screen w-screen items-center justify-center">
      <h1 className="text-4xl font-bold">Counter: {count}</h1>
    </div>
  )
}

----------------------------------------

TITLE: Installing Next.js and Upstash Redis
DESCRIPTION: Commands to create a new Next.js application and install the Upstash Redis package.

LANGUAGE: shell
CODE:
npx create-next-app@latest
cd my-app
npm install @upstash/redis

----------------------------------------

TITLE: Simple Set Intersection in Redis using Python
DESCRIPTION: Basic example of finding the intersection between two sorted sets using the ZINTER command. Demonstrates adding elements with scores and finding common elements.

LANGUAGE: python
CODE:
redis.zadd("key1", {"a": 1, "b": 2, "c": 3})

redis.zadd("key2", {"c": 3, "d": 4, "e": 5})

result = redis.zinter(["key1", "key2"])

assert result == ["c"]

----------------------------------------

TITLE: Implementing Redis Counter with Fastly
DESCRIPTION: JavaScript implementation showing how to integrate Upstash Redis with Fastly Compute@Edge to create a view counter.

LANGUAGE: javascript
CODE:
import { Redis } from "@upstash/redis/fastly";

addEventListener("fetch", (event) => event.respondWith(handleRequest(event)));

async function handleRequest(event) {
  const redis = new Redis({
    url: "UPSTASH_REDIS_REST_URL",
    token: "UPSTASH_REDIS_REST_TOKEN",
    backend: "upstash",
  });
  const data = await redis.incr("count");
  return new Response("View Count:" + data, { status: 200 });
}

----------------------------------------

TITLE: Installing FastAPI and Upstash Redis
DESCRIPTION: Install the required Python packages for the project using pip. This includes FastAPI for creating the API and upstash-redis for interacting with Upstash Redis.

LANGUAGE: shell
CODE:
pip install fastapi
pip install upstash-redis

----------------------------------------

TITLE: Implementing Serverless Notification React Component
DESCRIPTION: React component implementation that fetches notifications from Redis using REST API and displays them using react-toastify. Uses local storage to track notification versions and prevent duplicate displays.

LANGUAGE: javascript
CODE:
import logo from "./logo.svg";
import "./App.css";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useEffect } from "react";

function App() {
  useEffect(() => {
    async function fetchData() {
      try {
        let version = localStorage.getItem("notification-version");
        version = version ? version : 0;
        const response = await fetch(
          "REPLACE_UPSTASH_REDIS_REST_URL/zrevrangebyscore/messages/+inf/" +
            version +
            "/WITHSCORES/LIMIT/0/1",
          {
            headers: {
              Authorization: "Bearer REPLACE_UPSTASH_REDIS_REST_TOKEN",
            },
          }
        );
        const res = await response.json();
        const v = parseInt(res.result[1]);
        if (v) {
          localStorage.setItem("notification-version", v + 1);
        }
        toast(res.result[0]);
      } catch (e) {
        console.error(e);
      }
    }
    fetchData();
  });

  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
      <ToastContainer />
    </div>
  );
}

export default App;

----------------------------------------

TITLE: Configuring Upstash Redis as Laravel's Queue Driver
DESCRIPTION: Environment variable to set Upstash Redis as the queue driver for Laravel's job processing system.

LANGUAGE: shell
CODE:
QUEUE_CONNECTION="redis"

----------------------------------------

TITLE: Executing ZPOPMAX Command in Python with Redis
DESCRIPTION: This example demonstrates how to use the ZPOPMAX command in Python with Redis. It first adds members to a sorted set using zadd, then uses zpopmax to remove and return the member with the highest score.

LANGUAGE: python
CODE:
redis.zadd("myset", {"a": 1, "b": 2, "c": 3})

assert redis.zpopmax("myset") == [("c", 3)]

----------------------------------------

TITLE: Creating Cloudflare Worker Project with C3
DESCRIPTION: This snippet shows how to use the create-cloudflare CLI tool to set up a new Cloudflare Workers project. It demonstrates the interactive prompts and choices for project configuration.

LANGUAGE: shell
CODE:
npm create cloudflare@latest

LANGUAGE: shell
CODE:
yarn create cloudflare@latest

----------------------------------------

TITLE: Extracting Redis connection parameters from environment variable
DESCRIPTION: Use regex to extract password, host, and port from the REDIS_URL environment variable.

LANGUAGE: elixir
CODE:
def start(_type, _args) do
  [_, password, host, port] = Regex.run(
    ~r{(.+):(.+)@(.+):(\d+)},
    System.get_env("REDIS_URL"),
    capture: :all_but_first
  )
  port = elem(Integer.parse(port), 0)

  # ...
end

----------------------------------------

TITLE: Environment Configuration for Upstash Redis
DESCRIPTION: Environment variables configuration for Upstash Redis connection settings.

LANGUAGE: bash
CODE:
UPSTASH_REDIS_REST_URL=your_upstash_redis_url
UPSTASH_REDIS_REST_TOKEN=your_upstash_redis_token

----------------------------------------

TITLE: Conditional Update of a Key in Upstash Redis using TypeScript
DESCRIPTION: This snippet demonstrates how to conditionally update a key in Upstash Redis using TypeScript. It uses the 'xx' option to only set the key if it already exists.

LANGUAGE: typescript
CODE:
await redis.set("my-key", {my: "value"}, {
  xx: true
});

----------------------------------------

TITLE: Enabling Analytics for Upstash Redis Rate Limiting
DESCRIPTION: Demonstrates how to enable analytics for rate limiting. When enabled, data about rate limit successes and failures is collected and can be viewed in the Upstash console dashboard.

LANGUAGE: javascript
CODE:
const ratelimit = new Ratelimit({
  redis,
  analytics: true,
  limiter: Ratelimit.slidingWindow(60, "10s"),
});

----------------------------------------

TITLE: Configuring Upstash Redis Credentials
DESCRIPTION: Set Upstash Redis connection credentials in Azure Function App settings

LANGUAGE: shell
CODE:
az functionapp config appsettings set --name <APP_NAME> --resource-group AzureFunctionsQuickstart-rg --settings UPSTASH_REDIS_REST_URL=<YOUR_URL> UPSTASH_REDIS_REST_TOKEN=<YOUR_TOKEN>

----------------------------------------

TITLE: Implementing Counter Function with Upstash Redis
DESCRIPTION: TypeScript implementation of an Azure Function that increments a counter in Upstash Redis

LANGUAGE: typescript
CODE:
import { app, HttpRequest, HttpResponseInit, InvocationContext } from "@azure/functions";
import { Redis } from "@upstash/redis";

const redis = new Redis({
    url: process.env.UPSTASH_REDIS_REST_URL,
    token: process.env.UPSTASH_REDIS_REST_TOKEN
});

export async function CounterFunction(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {
    const count = await redis.incr("counter");

    return { status: 200, body: `Counter: ${count}` };
};

app.http('CounterFunction', {
    methods: ['GET', 'POST'],
    authLevel: 'anonymous',
    handler: CounterFunction
});

----------------------------------------

TITLE: Creating Serverless Framework Project
DESCRIPTION: Interactive CLI output showing the creation of a new Serverless Framework project with AWS Node.js HTTP API template.

LANGUAGE: shell
CODE:
➜  tutorials > ✗ serverless
Serverless ϟ Framework

Welcome to Serverless Framework V.4

Create a new project by selecting a Template to generate scaffolding for a specific use-case.

✔ Select A Template: · AWS / Node.js / HTTP API

✔ Name Your Project: · counter-serverless

✔ Template Downloaded

✔ Create Or Select An Existing App: · Create A New App

✔ Name Your New App: · counter-serverless

Your new Service "counter-serverless" is ready. Here are next steps:

• Open Service Directory: cd counter-serverless
• Install Dependencies: npm install (or use another package manager)
• Deploy Your Service: serverless deploy

----------------------------------------

TITLE: SST Configuration Setup
DESCRIPTION: TypeScript configuration file for SST deployment with environment variables for Upstash Redis.

LANGUAGE: typescript
CODE:
/// <reference path="./.sst/platform/config.d.ts" />

export default $config({
  app(input) {
    return {
      name: "my-app",
      removal: input?.stage === "production" ? "retain" : "remove",
      home: "aws",
    };
  },
  async run() {
    new sst.aws.Nextjs("MyWeb", {
      environment: {
        UPSTASH_REDIS_REST_URL: process.env.UPSTASH_REDIS_REST_URL || "",
        UPSTASH_REDIS_REST_TOKEN: process.env.UPSTASH_REDIS_REST_TOKEN || "",
      },
    });
  },
});

----------------------------------------

TITLE: Configuring CDK Stack for Lambda Function with Upstash Redis
DESCRIPTION: CDK stack configuration that sets up the Lambda function with necessary environment variables and function URL. It also configures the build process for the Node.js Lambda function.

LANGUAGE: typescript
CODE:
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as nodejs from 'aws-cdk-lib/aws-lambda-nodejs';

export class CounterCdkStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const counterFunction = new nodejs.NodejsFunction(this, 'CounterFunction', {
      entry: 'api/counter.ts',
      handler: 'handler',
      runtime: lambda.Runtime.NODEJS_20_X,
      environment: {
        UPSTASH_REDIS_REST_URL: process.env.UPSTASH_REDIS_REST_URL || '',
        UPSTASH_REDIS_REST_TOKEN: process.env.UPSTASH_REDIS_REST_TOKEN || '',
      },
      bundling: {
        format: nodejs.OutputFormat.ESM,
        target: "node20",
        nodeModules: ['@upstash/redis'],
      },
    });

    const counterFunctionUrl = counterFunction.addFunctionUrl({
      authType: lambda.FunctionUrlAuthType.NONE,
    });

    new cdk.CfnOutput(this, "counterFunctionUrlOutput", {
      value: counterFunctionUrl.url,
    })
  }
}

----------------------------------------

TITLE: Handling Asynchronous Synchronization in Cloudflare Workers
DESCRIPTION: Demonstrates how to handle asynchronous database synchronization in Cloudflare Workers and Vercel Edge functions using the waitUntil method to ensure pending operations complete.

LANGUAGE: typescript
CODE:
const { pending } = await ratelimit.limit("id");
context.waitUntil(pending);

----------------------------------------

TITLE: Importing upstash-redis Python Client
DESCRIPTION: Example of importing the upstash-redis client in Python. This is inferred from the context, as no explicit code snippet is provided.

LANGUAGE: python
CODE:
from upstash_redis import Redis

----------------------------------------

TITLE: Configuring CDK Stack for Lambda Function with Upstash Redis
DESCRIPTION: CDK stack configuration that sets up the Lambda function with necessary environment variables and function URL. It also configures the build process for the Node.js Lambda function.

LANGUAGE: typescript
CODE:
import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as nodejs from 'aws-cdk-lib/aws-lambda-nodejs';

export class CounterCdkStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const counterFunction = new nodejs.NodejsFunction(this, 'CounterFunction', {
      entry: 'api/counter.ts',
      handler: 'handler',
      runtime: lambda.Runtime.NODEJS_20_X,
      environment: {
        UPSTASH_REDIS_REST_URL: process.env.UPSTASH_REDIS_REST_URL || '',
        UPSTASH_REDIS_REST_TOKEN: process.env.UPSTASH_REDIS_REST_TOKEN || '',
      },
      bundling: {
        format: nodejs.OutputFormat.ESM,
        target: "node20",
        nodeModules: ['@upstash/redis'],
      },
    });

    const counterFunctionUrl = counterFunction.addFunctionUrl({
      authType: lambda.FunctionUrlAuthType.NONE,
    });

    new cdk.CfnOutput(this, "counterFunctionUrlOutput", {
      value: counterFunctionUrl.url,
    })
  }
}

----------------------------------------

TITLE: Installing BullMQ and Upstash Redis Dependencies
DESCRIPTION: This command installs the required npm packages for using BullMQ with Upstash Redis.

LANGUAGE: bash
CODE:
npm install bullmq upstash-redis

----------------------------------------

TITLE: Implementing Counter Function Handler
DESCRIPTION: JavaScript implementation of the counter function using Upstash Redis to increment a counter value.

LANGUAGE: javascript
CODE:
const { Redis } = require('@upstash/redis');

const redis = Redis.fromEnv();

exports.counter = async (event) => {
    const count = await redis.incr("counter");
    return {
        statusCode: 200,
        body: JSON.stringify('Counter: ' + count),
    };
};

----------------------------------------

TITLE: Importing upstash-redis Python Client
DESCRIPTION: Example of importing the upstash-redis client in Python. This is inferred from the context, as no explicit code snippet is provided.

LANGUAGE: python
CODE:
from upstash_redis import Redis

----------------------------------------

TITLE: Implementing Redis Pipeline in TypeScript
DESCRIPTION: Example showing how to create and execute a Redis pipeline to perform multiple commands in sequence. Pipeline operations allow commands to be interleaved with other clients' commands.

LANGUAGE: typescript
CODE:
const p = redis.pipeline();
p.set("foo", "bar");
p.get("foo");
const res = await p.exec();

----------------------------------------

TITLE: Applying Rate Limit for All Routes in Strapi with Upstash Redis
DESCRIPTION: This JSON configuration applies a rate limit to all routes in a Strapi application using Upstash Redis. It sets a fixed-window algorithm limiting to 10 requests per 20 seconds, identified by the Authorization header.

LANGUAGE: json
CODE:
{
   "strapi-plugin-upstash-ratelimit":{
      "enabled":true,
      "resolve":"./src/plugins/strapi-plugin-upstash-ratelimit",
      "config":{
         "enabled":true,
         "token":"process.env.UPSTASH_REDIS_REST_TOKEN",
         "url":"process.env.UPSTASH_REDIS_REST_URL",
         "strategy":[
            {
               "methods":[
                  "GET",
                  "POST"
               ],
               "path":"*",
               "identifierSource":"header.Authorization",
               "limiter":{
                  "algorithm":"fixed-window",
                  "tokens":10,
                  "window":"20s"
               }
            }
         ],
         "prefix":"@strapi"
      }
   }
}

----------------------------------------

TITLE: Configuring Strapi Plugin in JavaScript
DESCRIPTION: JavaScript configuration for the Upstash rate limiting plugin, including rate limit strategy settings and Redis connection details.

LANGUAGE: javascript
CODE:
module.exports = () => ({
  "strapi-plugin-upstash-ratelimit": {
    enabled: true,
    resolve: "./src/plugins/strapi-plugin-upstash-ratelimit",
    config: {
      enabled: true,
      token: process.env.UPSTASH_REDIS_REST_TOKEN,
      url: process.env.UPSTASH_REDIS_REST_URL,
      strategy: [
        {
          methods: ["GET", "POST"],
          path: "*",
          limiter: {
            algorithm: "fixed-window",
            tokens: 10,
            window: "20s",
          },
        },
      ],
      prefix: "@strapi",
    },
  },
});

----------------------------------------

TITLE: Redis ECONNRESET Error Example
DESCRIPTION: Example error stack trace showing the ECONNRESET error that occurs when attempting to connect to a TLS-enabled Redis server without proper TLS configuration.

LANGUAGE: javascript
CODE:
[ioredis] Unhandled error event: Error: read ECONNRESET
    at TCP.onStreamRead (node:internal/stream_base_commons:211:20)

----------------------------------------

TITLE: Incrementing Hash Field Value with HINCRBY in Redis using TypeScript
DESCRIPTION: This example demonstrates how to use the HINCRBY command in Redis. It first sets a hash field using HSET, then increments the field's value using HINCRBY. The new value after the increment is then logged to the console.

LANGUAGE: typescript
CODE:
await redis.hset("key", {
  field: 20,
  });
const after = await redis.hincrby("key", "field", 2);
console.log(after); // 22

----------------------------------------

TITLE: Deploying AWS CDK Stack
DESCRIPTION: Shell commands to synthesize, bootstrap, and deploy the AWS CDK stack for the counter application.

LANGUAGE: shell
CODE:
cdk synth
cdk bootstrap
cdk deploy

----------------------------------------

TITLE: Exporting Upstash Redis credentials as environment variables
DESCRIPTION: Bash commands to export Upstash Redis host, port, and password as environment variables for use in the application.

LANGUAGE: bash
CODE:
export UPSTASH_REDIS_HOST=<YOUR_HOST>
export UPSTASH_REDIS_PORT=<YOUR_PORT>
export UPSTASH_REDIS_PASSWORD=<YOUR_PASSWORD>

----------------------------------------

TITLE: Configuring Wrangler Environment Variables
DESCRIPTION: TOML configuration for Wrangler showing how to set Upstash Redis REST API credentials as environment variables.

LANGUAGE: toml
CODE:
# wrangler.toml

# existing config

[vars]
UPSTASH_REDIS_REST_TOKEN = "AX_sASQgODM5ZjExZGEtMmI3Mi00Mjcwk3NDIxMmEwNmNkYjVmOGVmZTk5MzQ="
UPSTASH_REDIS_REST_URL = "https://us1-merry-macaque-31458.upstash.io/"

----------------------------------------

TITLE: Displaying Upstash Redis Authentication Error
DESCRIPTION: This snippet shows the error message returned when there's an invalid or missing auth token for Upstash Redis connections.

LANGUAGE: plaintext
CODE:
UpstashError: WRONGPASS invalid or missing auth token

----------------------------------------

TITLE: Creating a new Supabase function for Upstash Redis counter
DESCRIPTION: This command uses the Supabase CLI to create a new function named 'upstash-redis-counter' in the project.

LANGUAGE: shell
CODE:
supabase functions new upstash-redis-counter

----------------------------------------

TITLE: Configuring Kafka Client in Vercel Environment
DESCRIPTION: Initializes a Kafka client using environment variables and demonstrates message production to a topic using the @upstash/kafka package.

LANGUAGE: typescript
CODE:
import { Kafka } from "@upstash/kafka";

const kafka = new Kafka({
  url: process.env.UPSTASH_KAFKA_REST_URL,
  username: process.env.UPSTASH_KAFKA_REST_USERNAME,
  password: process.env.UPSTASH_KAFKA_REST_PASSWORD,
});

await kafka.producer().produce("my-topic", "my-message");

----------------------------------------

TITLE: Checking Notification Configuration
DESCRIPTION: Commands to retrieve current keyspace notification settings using both cURL and redis-cli.

LANGUAGE: bash
CODE:
curl -X POST \
    -d '["CONFIG", "GET", "notify-keyspace-events"]' \
    -H "Authorization: Bearer $UPSTASH_REDIS_REST_TOKEN" \
    $UPSTASH_REDIS_REST_URL

LANGUAGE: bash
CODE:
redis-cli --tls -u $UPSTASH_REDIS_CLI_URL config get notify-keyspace-events

----------------------------------------

TITLE: Connecting to Upstash Redis with TLS Enabled using ioredis
DESCRIPTION: This snippet demonstrates the correct URL format for connecting to an Upstash Redis database with TLS enabled using the ioredis client. It includes the password in the connection string.

LANGUAGE: javascript
CODE:
rediss://:YOUR_PASSWORD@YOUR_ENDPOINT:YOUR_PORT

----------------------------------------

TITLE: Publishing Fastly Compute Service
DESCRIPTION: CLI commands to publish the Fastly Compute service and configure the Upstash Redis backend.

LANGUAGE: shell
CODE:
> fastly compute publish
✓ Initializing...
✓ Verifying package manifest...
✓ Verifying local javascript toolchain...
✓ Building package using javascript toolchain...
✓ Creating package archive...

SUCCESS: Built package 'fastly-upstash' (pkg/fastly-upstash.tar.gz)


There is no Fastly service associated with this package. To connect to an existing service
add the Service ID to the fastly.toml file, otherwise follow the prompts to create a
service now.

Press ^C at any time to quit.

Create new service: [y/N] y

✓ Initializing...
✓ Creating service...

Domain: [supposedly-included-corgi.edgecompute.app]

Backend (hostname or IP address, or leave blank to stop adding backends): global-concise-scorpion-30984.upstash.io
Backend port number: [80] 443
Backend name: [backend_1] upstash

Backend (hostname or IP address, or leave blank to stop adding backends):

✓ Creating domain 'supposedly-smart-corgi.edgecompute.app'...
✓ Creating backend 'upstash' (host: global-concise-scorpion-30984.upstash.io, port: 443)...
✓ Uploading package...
✓ Activating version...

----------------------------------------

TITLE: Outputting Upstash Database Credentials
DESCRIPTION: Output configuration blocks to expose the database endpoint, port, and password after creation. These values can be referenced in other parts of the Terraform configuration.

LANGUAGE: hcl
CODE:
output "endpoint" {
  value = "${upstash_database.mydb.endpoint}"
}

output "port" {
  value = "${upstash_database.mydb.port}"
}
output "password" {
  value = "${upstash_database.mydb.password}"
}

----------------------------------------

TITLE: Implementing Django View with Redis Counter
DESCRIPTION: Creates a Django view that implements a counter using Upstash Redis, incrementing and displaying the count on each page visit

LANGUAGE: python
CODE:
from datetime import datetime

from django.http import HttpResponse

from upstash_redis import Redis

redis = Redis.from_env()

def index(request):
    count = redis.incr('counter')
    html = f'''
    <html>
        <body>
            <h1>Counter: { count }</h1p>
        </body>
    </html>
    '''
    return HttpResponse(html)

----------------------------------------

TITLE: Displaying Redis XReadGroup Cancellation Error
DESCRIPTION: This snippet shows the error message received when the Pending Entries List limit is about to be reached for a consumer in a Redis Stream. It includes details about the current state and limits of the stream.

LANGUAGE: text
CODE:
ReplyError: ERR XReadGroup is cancelled. Pending Entries List limit per consumer is about to be reached. Limit: 1000, Current PEL size: 90, Requested Read: 20, Key: mstream, Group: group1, Consumer: consumer1.

----------------------------------------

TITLE: Executing FLUSHDB Command in Python (Asynchronous)
DESCRIPTION: This snippet shows how to execute the FLUSHDB command asynchronously in Python using Upstash Redis. It deletes all keys in the database in the background, allowing the program to continue execution immediately.

LANGUAGE: python
CODE:
redis.flushall(flush_type="ASYNC")

----------------------------------------

TITLE: Initializing Node.js Project for AWS Lambda
DESCRIPTION: Commands to create a new Node.js project and install the ioredis client for connecting to Upstash Redis.

LANGUAGE: bash
CODE:
npm init
npm install ioredis

----------------------------------------

TITLE: Installing Next.js and Upstash Redis Dependencies
DESCRIPTION: Commands to create a new Next.js application and install the Upstash Redis package.

LANGUAGE: shell
CODE:
npx create-next-app@latest
cd my-app
npm install @upstash/redis

----------------------------------------

TITLE: Creating an Upstash Redis Database using API
DESCRIPTION: This cURL request demonstrates how to create a new Upstash Redis database using the Upstash API. It specifies the database name, region, primary region, read regions, and TLS settings.

LANGUAGE: bash
CODE:
curl -X POST \
  https://api.upstash.com/v2/redis/database \
  -u 'EMAIL:API_KEY' \
  -d '{"name":"myredis", "region":"global", "primary_region":"us-east-1", "read_regions":["us-west-1","us-west-2"], "tls": true}'

----------------------------------------

TITLE: Package Configuration for Google Cloud Functions
DESCRIPTION: Defines the required dependencies for the Cloud Function including the Upstash Redis client and Google Cloud Functions framework.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "@google-cloud/functions-framework": "^3.0.0",
    "@upstash/redis": "^1.31.6"
  }
}

----------------------------------------

TITLE: Initializing Redis Client with Direct Credentials
DESCRIPTION: TypeScript example showing how to initialize the Redis client using explicit URL and token credentials, followed by a basic key retrieval operation with error handling.

LANGUAGE: typescript
CODE:
import { Redis } from "@upstash/redis";

const redis = new Redis({
  url: "UPSTASH_REDIS_REST_URL",
  token: "UPSTASH_REDIS_REST_TOKEN",
});

(async () => {
  try {
    const data = await redis.get("key");
    console.log(data);
  } catch (error) {
    console.error(error);
  }
})();

----------------------------------------

TITLE: Setting up environment variables for Upstash Redis in Supabase Functions
DESCRIPTION: This command copies the example environment file to set up the necessary Upstash Redis credentials for the Supabase function.

LANGUAGE: shell
CODE:
cp supabase/functions/upstash-redis-counter/.env.example supabase/functions/upstash-redis-counter/.env

----------------------------------------

TITLE: Setting up QStash Client for Message Publishing
DESCRIPTION: Demonstrates how to create a QStash client for publishing JSON messages to specified endpoints using the @upstash/qstash package.

LANGUAGE: typescript
CODE:
import { Client } from "@upstash/qstash";

const c = new Client({
  token: process.env.QSTASH_TOKEN,
});

const res = await c.publishJSON({
  url: "https://my-api...",
  body: {
    hello: "world",
  },
});

----------------------------------------

TITLE: Pushing Elements to Existing Redis List with LPUSHX in TypeScript
DESCRIPTION: This example demonstrates using the LPUSHX command to push an element to an existing Redis list. It first creates a list with LPUSH, then uses LPUSHX to add another element, returning the new length of the list.

LANGUAGE: typescript
CODE:
await redis.lpush("key", "a", "b", "c");
const length = await redis.lpushx("key", "d");
console.log(length); // 4

----------------------------------------

TITLE: Installing Upstash Redis Client
DESCRIPTION: Command to install the @upstash/redis package using npm package manager.

LANGUAGE: bash
CODE:
npm install @upstash/redis

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: Command to run the FastAPI application using Uvicorn ASGI server with auto-reload enabled.

LANGUAGE: shell
CODE:
uvicorn main:app --reload

----------------------------------------

TITLE: Implementing QStash Message Receiver with Verification
DESCRIPTION: Shows how to set up a QStash receiver to verify incoming messages using signing keys from environment variables.

LANGUAGE: typescript
CODE:
import { Receiver } from "@upstash/qstash";

const r = new Receiver({
  currentSigningKey: process.env.QSTASH_CURRENT_SIGNING_KEY,
  nextSigningKey: process.env.QSTASH_NEXT_SIGNING_KEY,
});

const isValid = await r.verify(
  signature: "..."
  body: "..."
})

----------------------------------------

TITLE: Implementing Multithreaded Web Scraper with Redis Caching in Python
DESCRIPTION: Complete Python code for a multithreaded web scraper that uses Redis for caching HTTP responses. It includes URL grouping, Redis client initialization, and a threaded scraper class.

LANGUAGE: python
CODE:
import threading
import requests
from upstash_redis import Redis
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Initialize Redis client
redis = Redis.from_env()

# Group URLs by thread, with one or two overlapping URLs across groups
urls_to_scrape_groups = [
    [
        'https://httpbin.org/delay/1',
        'https://httpbin.org/delay/4',
        'https://httpbin.org/delay/2',
        'https://httpbin.org/delay/5',
        'https://httpbin.org/delay/3',
    ],
    [
        'https://httpbin.org/delay/5',  # Overlapping URL
        'https://httpbin.org/delay/6',
        'https://httpbin.org/delay/7',
        'https://httpbin.org/delay/2',  # Overlapping URL
        'https://httpbin.org/delay/8',
    ],
    [
        'https://httpbin.org/delay/3',  # Overlapping URL
        'https://httpbin.org/delay/9',
        'https://httpbin.org/delay/10',
        'https://httpbin.org/delay/4',  # Overlapping URL
        'https://httpbin.org/delay/11',
    ],
]

class Scraper(threading.Thread):
    def __init__(self, urls):
        threading.Thread.__init__(self)
        self.urls = urls
        self.results = {}

    def run(self):
        for url in self.urls:
            cache_key = f"url:{url}"
            
            # Attempt to retrieve cached response
            cached_response = redis.get(cache_key)
            
            if cached_response:
                print(f"[CACHE HIT] {self.name} - URL: {url}")
                self.results[url] = cached_response
                continue  # Skip to the next URL if cache is found
            
            # If no cache, perform the HTTP request
            print(f"[FETCHING] {self.name} - URL: {url}")
            response = requests.get(url)
            if response.status_code == 200:
                self.results[url] = response.text
                # Store the response in Redis cache
                redis.set(cache_key, response.text)
            else:
                print(f"[ERROR] {self.name} - Failed to retrieve {url}")
                self.results[url] = None

def main():
    threads = []
    for urls in urls_to_scrape_groups:
        scraper = Scraper(urls)
        threads.append(scraper)
        scraper.start()

    # Wait for all threads to complete
    for scraper in threads:
        scraper.join()

    print("\nScraping results:")
    for scraper in threads:
        for url, result in scraper.results.items():
            print(f"Thread {scraper.name} - URL: {url} - Response Length: {len(result) if result else 'Failed'}")

if __name__ == "__main__":
    main()

----------------------------------------

TITLE: Implementing Multithreaded Web Scraper with Redis Caching in Python
DESCRIPTION: Complete Python code for a multithreaded web scraper that uses Redis for caching HTTP responses. It includes URL grouping, Redis client initialization, and a threaded scraper class.

LANGUAGE: python
CODE:
import threading
import requests
from upstash_redis import Redis
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Initialize Redis client
redis = Redis.from_env()

# Group URLs by thread, with one or two overlapping URLs across groups
urls_to_scrape_groups = [
    [
        'https://httpbin.org/delay/1',
        'https://httpbin.org/delay/4',
        'https://httpbin.org/delay/2',
        'https://httpbin.org/delay/5',
        'https://httpbin.org/delay/3',
    ],
    [
        'https://httpbin.org/delay/5',  # Overlapping URL
        'https://httpbin.org/delay/6',
        'https://httpbin.org/delay/7',
        'https://httpbin.org/delay/2',  # Overlapping URL
        'https://httpbin.org/delay/8',
    ],
    [
        'https://httpbin.org/delay/3',  # Overlapping URL
        'https://httpbin.org/delay/9',
        'https://httpbin.org/delay/10',
        'https://httpbin.org/delay/4',  # Overlapping URL
        'https://httpbin.org/delay/11',
    ],
]

class Scraper(threading.Thread):
    def __init__(self, urls):
        threading.Thread.__init__(self)
        self.urls = urls
        self.results = {}

    def run(self):
        for url in self.urls:
            cache_key = f"url:{url}"
            
            # Attempt to retrieve cached response
            cached_response = redis.get(cache_key)
            
            if cached_response:
                print(f"[CACHE HIT] {self.name} - URL: {url}")
                self.results[url] = cached_response
                continue  # Skip to the next URL if cache is found
            
            # If no cache, perform the HTTP request
            print(f"[FETCHING] {self.name} - URL: {url}")
            response = requests.get(url)
            if response.status_code == 200:
                self.results[url] = response.text
                # Store the response in Redis cache
                redis.set(cache_key, response.text)
            else:
                print(f"[ERROR] {self.name} - Failed to retrieve {url}")
                self.results[url] = None

def main():
    threads = []
    for urls in urls_to_scrape_groups:
        scraper = Scraper(urls)
        threads.append(scraper)
        scraper.start()

    # Wait for all threads to complete
    for scraper in threads:
        scraper.join()

    print("\nScraping results:")
    for scraper in threads:
        for url, result in scraper.results.items():
            print(f"Thread {scraper.name} - URL: {url} - Response Length: {len(result) if result else 'Failed'}")

if __name__ == "__main__":
    main()

----------------------------------------

TITLE: Generating Upstash Developer API Key using cURL
DESCRIPTION: This code snippet demonstrates how to generate a Developer API key for Upstash using a JWT token obtained from the OAuth 2.0 flow. The API key is created with a custom name including the application name and timestamp.

LANGUAGE: bash
CODE:
curl -XPOST https://api.upstash.com/apikey \
    -H "Authorization: Bearer JWT_KEY" \
    -H "Content-Type: application/json" \
    -d '{ "name": "APPNAME_API_KEY_TIMESTAMP" }'

----------------------------------------

TITLE: Installing React Toast Component
DESCRIPTION: Command to install react-toastify package for displaying notifications

LANGUAGE: shell
CODE:
npm install --save react-toastify

----------------------------------------

TITLE: Using Redis Pipeline Operations
DESCRIPTION: Demonstrates how to use Redis pipelining to batch multiple commands together and reduce network roundtrips. Shows both individual command execution and command chaining approaches.

LANGUAGE: python
CODE:
pipeline = redis.pipeline()

pipeline.set("foo", 1)
pipeline.incr("foo")
pipeline.get("foo")

result = pipeline.exec()

print(result)
# prints [True, 2, '2']

----------------------------------------

TITLE: Exporting Redis Data Using upstash-redis-dump CLI
DESCRIPTION: Example command showing how to dump Redis data to a file using the upstash-redis-dump tool. The command connects to a specific Upstash Redis instance using host, port, and password authentication with TLS encryption.

LANGUAGE: shell
CODE:
$ upstash-redis-dump -db 0 -host eu1-moving-loon-6379.upstash.io -port 6379 -pass PASSWORD -tls > redis.dump
Database 0: 9 keys dumped

----------------------------------------

TITLE: Executing MONITOR Command via Upstash Redis REST API
DESCRIPTION: This snippet demonstrates how to use the MONITOR command with the Upstash Redis REST API using Server Sent Events. It listens for Redis monitor events and receives incoming data as a stream.

LANGUAGE: shell
CODE:
curl -X POST https://us1-merry-cat-32748.upstash.io/monitor \
  -H "Authorization: Bearer 2553feg6a2d9842h2a0gcdb5f8efe9934" \
  -H "Accept:text/event-stream"

----------------------------------------

TITLE: Configuring Google Cloud SDK
DESCRIPTION: Commands to set up Google Cloud SDK, configure the project, and enable necessary services.

LANGUAGE: bash
CODE:
gcloud config set project cloud-run-sessions

gcloud services enable run.googleapis.com

gcloud services enable cloudbuild.googleapis.com

----------------------------------------

TITLE: Chaining Redis Pipeline Commands
DESCRIPTION: Demonstrates how to chain multiple Redis commands in a pipeline for more concise command batching syntax.

LANGUAGE: python
CODE:
pipeline = redis.pipeline()

pipeline.set("foo", 1).incr("foo").get("foo")
result = pipeline.exec()

print(result)
# prints [True, 2, '2']

----------------------------------------

TITLE: Popping First Element from JSON Array in Redis
DESCRIPTION: Removes and returns the first element from a JSON array stored in Redis by specifying index 0. Demonstrates explicit index-based element removal from the array.

LANGUAGE: python
CODE:
firstElement = redis.json.arrpop("key", "$.path.to.array", 0)

----------------------------------------

TITLE: JSON Response for Successful SET Command
DESCRIPTION: This snippet shows the JSON response format for a successful SET command execution using the Upstash Redis REST API.

LANGUAGE: json
CODE:
{ "result": "OK" }

----------------------------------------

TITLE: Local Redis Development Setup
DESCRIPTION: Example code for establishing connection to Redis through Fly.io tunnel during local development.

LANGUAGE: javascript
CODE:
const redis = require("redis");

// Local Redis URL for development
const LOCAL_REDIS_URL = 'redis://localhost:10000'; // Replace with your actual local address
const REDIS_URL = process.env.NODE_ENV === 'development' ? LOCAL_REDIS_URL : process.env.REDIS_URL;

const client = redis.createClient({
    url: REDIS_URL
});

client.on("error", function(error) {
  console.error(error);
});

// Rest of your Redis-related code

----------------------------------------

TITLE: Implementing Custom Rates for Rate Limiting with Upstash Redis in Python
DESCRIPTION: This snippet demonstrates how to use custom rates when rate limiting with Upstash Redis. It creates a rate limiter that allows 10 requests per 10 seconds and shows how to consume 5 tokens in a single request.

LANGUAGE: python
CODE:
from upstash_ratelimit import Ratelimit, FixedWindow
from upstash_redis import Redis

ratelimit = Ratelimit(
    redis=Redis.from_env(),
    limiter=FixedWindow(max_requests=10, window=10),
)

# pass rate as 5 to subtract 5 from the number of
# allowed requests in the window:
identifier = "api"
response = ratelimit.limit(identifier, rate=5)

----------------------------------------

TITLE: Configuring AWS Lambda Test Event
DESCRIPTION: JSON structure for creating a test event in AWS Lambda to simulate an API Gateway request with key-value parameters.

LANGUAGE: json
CODE:
{
  "key": "foo",
  "value": "bar"
}

----------------------------------------

TITLE: Applying Rate Limit for All Routes in Strapi with Upstash Redis
DESCRIPTION: This snippet demonstrates how to configure rate limiting for all routes in a Strapi application using Upstash Redis. It sets up a fixed-window algorithm with 10 tokens per 20-second window, identifying users by the Authorization header.

LANGUAGE: json
CODE:
{
   "strapi-plugin-upstash-ratelimit":{
      "enabled":true,
      "resolve":"./src/plugins/strapi-plugin-upstash-ratelimit",
      "config":{
         "enabled":true,
         "token":"process.env.UPSTASH_REDIS_REST_TOKEN",
         "url":"process.env.UPSTASH_REDIS_REST_URL",
         "strategy":[
            {
               "methods":[
                  "GET",
                  "POST"
               ],
               "path":"*",
               "identifierSource":"header.Authorization",
               "limiter":{
                  "algorithm":"fixed-window",
                  "tokens":10,
                  "window":"20s"
               }
            }
         ],
         "prefix":"@strapi"
      }
   }
}

----------------------------------------

TITLE: Configuring Strapi Plugin in TypeScript
DESCRIPTION: TypeScript configuration for the Upstash rate limiting plugin, including rate limit strategy settings and Redis connection details.

LANGUAGE: typescript
CODE:
export default () => ({
  "strapi-plugin-upstash-ratelimit": {
    enabled: true,
    resolve: "./src/plugins/strapi-plugin-upstash-ratelimit",
    config: {
      enabled: true,
      token: process.env.UPSTASH_REDIS_REST_TOKEN,
      url: process.env.UPSTASH_REDIS_REST_URL,
      strategy: [
        {
          methods: ["GET", "POST"],
          path: "*",
          limiter: {
            algorithm: "fixed-window",
            tokens: 10,
            window: "20s",
          },
        },
      ],
      prefix: "@strapi",
    },
  },
});

----------------------------------------

TITLE: Installing Upstash Redis via Package Managers
DESCRIPTION: Install @upstash/redis using different Node.js package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm install @upstash/redis

LANGUAGE: bash
CODE:
yarn add @upstash/redis

LANGUAGE: bash
CODE:
pnpm add @upstash/redis

----------------------------------------

TITLE: Creating Upstash Redis Database
DESCRIPTION: Resource configuration for creating an Upstash Redis database. Requires specifying the database name, region, and type (e.g. free tier).

LANGUAGE: hcl
CODE:
resource "upstash_database" "mydb" {
  database_name = "testdblstr"
  region = "eu-west-1"
  type = "free"
}

----------------------------------------

TITLE: Configuring Different Rate Limit Algorithms for Specific Routes in Strapi
DESCRIPTION: This JSON configuration demonstrates setting up different rate limit algorithms for specific routes in a Strapi application. It uses fixed-window for one route and token-bucket for another, both identified by a custom header.

LANGUAGE: json
CODE:
{
  "strapi-plugin-upstash-ratelimit": {
    "enabled": true,
    "resolve": "./src/plugins/strapi-plugin-upstash-ratelimit",
    "config": {
      "enabled": true,
      "token": "process.env.UPSTASH_REDIS_REST_TOKEN",
      "url": "process.env.UPSTASH_REDIS_REST_URL",
      "strategy": [
        {
          "methods": ["GET", "POST"],
          "path": "/api/restaurants/:id",
          "identifierSource": "header.x-author",
          "limiter": {
            "algorithm": "fixed-window",
            "tokens": 10,
            "window": "20s"
          }
        },
        {
          "methods": ["GET"],
          "path": "/api/restaurants",
          "identifierSource": "header.x-author",
          "limiter": {
            "algorithm": "tokenBucket",
            "tokens": 10,
            "window": "20s",
            "refillRate": 1
          }
        }
      ],
      "prefix": "@strapi"
    }
  }
}

----------------------------------------

TITLE: Creating Counter Function
DESCRIPTION: Create a new HTTP-triggered Azure Function with anonymous authentication

LANGUAGE: shell
CODE:
func new --name CounterFunction --template "HTTP trigger" --authlevel "anonymous"

----------------------------------------

TITLE: Redis Version Reference
DESCRIPTION: Reference to supported Redis protocol versions and newer commands being added

LANGUAGE: markdown
CODE:
6.2, 7.0, 7.2

----------------------------------------

TITLE: Exchanging OAuth 2.0 Authorization Code for Access Token
DESCRIPTION: This cURL request exchanges an OAuth 2.0 authorization code for an access token and refresh token. It includes the necessary parameters such as client_id, code, and redirect_uri.

LANGUAGE: bash
CODE:
curl -XPOST 'https://auth.upstash.com/oauth/token' \
  --header 'content-type: application/x-www-form-urlencoded' \
  --data 'grant_type=authorization_code --data audience=upstash-api' \
  --data 'client_id=XXXXXXXXXXX' \
  --data 'code=XXXXXXXXXXXX' \
  --data 'redirect_uri=localhost:3000'

----------------------------------------

TITLE: Integrating SRH in GitHub Actions Workflow
DESCRIPTION: This GitHub Actions workflow demonstrates how to set up SRH alongside a Redis server as services. It includes steps to run tests against the SRH instance, simulating an Upstash Redis environment.

LANGUAGE: yml
CODE:
name: Test @upstash/redis compatibility
on:
  push:
  workflow_dispatch:

env:
  SRH_TOKEN: example_token

jobs:
  container-job:
    runs-on: ubuntu-latest
    container: denoland/deno
    services:
      redis:
        image: redis/redis-stack-server:6.2.6-v6 # 6.2 is the Upstash compatible Redis version
      srh:
        image: hiett/serverless-redis-http:latest
        env:
          SRH_MODE: env # We are using env mode because we are only connecting to one server.
          SRH_TOKEN: ${{ env.SRH_TOKEN }}
          SRH_CONNECTION_STRING: redis://redis:6379

    steps:
      # You can place your normal testing steps here. In this example, we are running SRH against the upstash/upstash-redis test suite.
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: upstash/upstash-redis

      - name: Run @upstash/redis Test Suite
        run: deno test -A ./pkg
        env:
          UPSTASH_REDIS_REST_URL: http://srh:80
          UPSTASH_REDIS_REST_TOKEN: ${{ env.SRH_TOKEN }}

----------------------------------------

TITLE: Pattern Matching with HSCAN
DESCRIPTION: Shows how to use pattern matching with hscan to filter hash fields. Uses the 'match' option to filter fields matching a specific pattern (user*).

LANGUAGE: typescript
CODE:
await redis.hset("key", {
  id: 1,
  username: "chronark",
  name: "andreas",
});
const [newCursor, fields] = await redis.hscan("key", 0, { match: "user*" });
console.log(newCursor); // likely `0` since this is a very small hash
console.log(fields); // ["username", "chronark"]

----------------------------------------

TITLE: Creating Project Directory
DESCRIPTION: Shell commands to create and initialize a new CDK project with TypeScript

LANGUAGE: shell
CODE:
mkdir counter-cdk && cd counter-cdk

LANGUAGE: shell
CODE:
cdk init app --language typescript

----------------------------------------

TITLE: Installing Django and Upstash Redis Client
DESCRIPTION: Install the required dependencies using pip. This includes Django for web development and the Upstash Redis client for Python.

LANGUAGE: shell
CODE:
pip install django
pip install upstash-redis

----------------------------------------

TITLE: Creating a new Phoenix app without Ecto
DESCRIPTION: Command to create a new Phoenix application without the Ecto database adapter.

LANGUAGE: shell
CODE:
mix phx.new redix_demo --no-ecto