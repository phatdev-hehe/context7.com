TITLE: First Route Implementation
DESCRIPTION: Implementation of the first route with counter functionality and server functions.

LANGUAGE: tsx
CODE:
// app/routes/index.tsx
import * as fs from 'fs'
import { createFileRoute, useRouter } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'

const filePath = 'count.txt'

async function readCount() {
  return parseInt(
    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),
  )
}

const getCount = createServerFn({
  method: 'GET',
}).handler(() => {
  return readCount()
})

const updateCount = createServerFn({ method: 'POST' })
  .validator((d: number) => d)
  .handler(async ({ data }) => {
    const count = await readCount()
    await fs.promises.writeFile(filePath, `${count + data}`)
  })

export const Route = createFileRoute('/')({ 
  component: Home,
  loader: async () => await getCount(),
})

function Home() {
  const router = useRouter()
  const state = Route.useLoaderData()

  return (
    <button
      onClick={() => {
        updateCount({ data: 1 }).then(() => {
          router.invalidate()
        })
      }}
    >
      Add 1 to {state}?
    </button>
  )
}

----------------------------------------

TITLE: Creating and Using TanStack Router Instance in React
DESCRIPTION: This example demonstrates how to create a router instance using createRouter function and use it with RouterProvider in a React application. It configures the router with a route tree and default preload option.

LANGUAGE: tsx
CODE:
import { createRouter, RouterProvider } from '@tanstack/react-router'
import { routeTree } from './routeTree.gen'

const router = createRouter({
  routeTree,
  defaultPreload: 'intent',
})

export default function App() {
  return <RouterProvider router={router} />
}

----------------------------------------

TITLE: Creating Basic Route with TanStack Router in TypeScript/React
DESCRIPTION: Demonstrates how to create a basic route using createRoute function, including route configuration with a parent route, path, loader function for data fetching, and a React component. Shows usage of useLoaderData hook to access loaded data.

LANGUAGE: tsx
CODE:
import { createRoute } from '@tanstack/react-router'
import { rootRoute } from './__root'

const Route = createRoute({
  getParentRoute: () => rootRoute,
  path: '/',
  loader: () => {
    return 'Hello World'
  },
  component: IndexComponent,
})

function IndexComponent() {
  const data = Route.useLoaderData()
  return <div>{data}</div>
}

----------------------------------------

TITLE: Creating Basic Route with TanStack Router
DESCRIPTION: Demonstrates how to create a basic route using createFileRoute function. The route takes a path string and returns a configuration object with a component property.

LANGUAGE: tsx
CODE:
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/posts')({ 
  component: PostsComponent,
})

----------------------------------------

TITLE: Initializing Parent Route with TypeScript
DESCRIPTION: Demonstrates how to properly type parent routes using the Route class getParentRoute option.

LANGUAGE: tsx
CODE:
const parentRoute = createRoute({
  getParentRoute: () => parentRoute,
})

----------------------------------------

TITLE: Implementing Basic About Route
DESCRIPTION: Example of implementing a basic route for an about page. Shows the complete implementation including the component definition.

LANGUAGE: tsx
CODE:
// about.tsx
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/about')({ 
  component: AboutComponent,
})

function AboutComponent() {
  return <div>About</div>
}

----------------------------------------

TITLE: Creating File Route with TanStack Router in TSX
DESCRIPTION: Demonstrates how to create a file-based route using createFileRoute function. The example shows defining a route with a loader and component, where the loader returns a string and the component displays the loaded data.

LANGUAGE: tsx
CODE:
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/')({
  loader: () => {
    return 'Hello World'
  },
  component: IndexComponent,
})

function IndexComponent() {
  const data = Route.useLoaderData()
  return <div>{data}</div>
}

----------------------------------------

TITLE: Implementing a Home Route with Server Functions in React
DESCRIPTION: Demonstrates a home route implementation using TanStack Router and server functions. It includes data loading, server-side file operations, and client-side updates with invalidation.

LANGUAGE: tsx
CODE:
// app/routes/index.tsx
import * as fs from 'node:fs'
import { createFileRoute, useRouter } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'

const filePath = 'count.txt'

async function readCount() {
  return parseInt(
    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),
  )
}

const getCount = createServerFn({
  method: 'GET',
}).handler(() => {
  return readCount()
})

const updateCount = createServerFn({ method: 'POST' })
  .validator((d: number) => d)
  .handler(async ({ data }) => {
    const count = await readCount()
    await fs.promises.writeFile(filePath, `${count + data}`)
  })

export const Route = createFileRoute('/')({
  component: Home,
  loader: async () => await getCount(),
})

function Home() {
  const router = useRouter()
  const state = Route.useLoaderData()

  return (
    <button
      type="button"
      onClick={() => {
        updateCount({ data: 1 }).then(() => {
          router.invalidate()
        })
      }}
    >
      Add 1 to {state}?
    </button>
  )
}

----------------------------------------

TITLE: Configuring Code-Based Route Tree - TanStack Router in TypeScript
DESCRIPTION: Creates a route tree manually using the root route's addChildren method for code-based routing approach.

LANGUAGE: tsx
CODE:
const routeTree = rootRoute.addChildren([
  // ...
])

----------------------------------------

TITLE: Initializing TanStack Router with Router Class in React
DESCRIPTION: This example demonstrates how to create a new Router instance and use it with RouterProvider in a React application. It includes importing necessary components, configuring the router with options, and rendering the RouterProvider.

LANGUAGE: tsx
CODE:
import { Router, RouterProvider } from '@tanstack/react-router'
import { routeTree } from './routeTree.gen'

const router = new Router({
  routeTree,
  defaultPreload: 'intent',
})

export default function App() {
  return <RouterProvider router={router} />
}

----------------------------------------

TITLE: Installing TanStack Router Dependencies
DESCRIPTION: Commands for installing TanStack Router core package, Vite plugin, and router devtools using different package managers.

LANGUAGE: sh
CODE:
npm install @tanstack/react-router
npm install -D @tanstack/router-plugin @tanstack/react-router-devtools

----------------------------------------

TITLE: Creating Root Route Component
DESCRIPTION: Implementation of the root route component with navigation links and router devtools integration.

LANGUAGE: tsx
CODE:
import { createRootRoute, Link, Outlet } from '@tanstack/react-router'
import { TanStackRouterDevtools } from '@tanstack/react-router-devtools'

export const Route = createRootRoute({
  component: () => (
    <>
      <div className="p-2 flex gap-2">
        <Link to="/" className="[&.active]:font-bold">Home</Link>{' '}
        <Link to="/about" className="[&.active]:font-bold">About</Link>
      </div>
      <hr />
      <Outlet />
      <TanStackRouterDevtools />
    </>
  ),
})

----------------------------------------

TITLE: Using useRouter Hook in TanStack Router (TSX)
DESCRIPTION: This snippet demonstrates how to import and use the useRouter hook in a React component. The hook returns the current Router instance, which can be used to access router-related functionality.

LANGUAGE: tsx
CODE:
import { useRouter } from '@tanstack/react-router'

function Component() {
  const router = useRouter()
  //    ^ Router

  // ...
}

----------------------------------------

TITLE: Implementing Pathless Layout Route
DESCRIPTION: Shows how to create a pathless layout route that provides layout structure without requiring a matching path in the URL.

LANGUAGE: tsx
CODE:
import { Outlet, createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/_pathlessLayout')({ 
  component: PathlessLayoutComponent,
})

function PathlessLayoutComponent() {
  return (
    <div>
      <h1>Pathless layout</h1>
      <Outlet />
    </div>
  )
}

----------------------------------------

TITLE: Creating a Root Route and Router in TanStack Router
DESCRIPTION: This example demonstrates how to use the createRootRoute function to create a root route, add child routes, and initialize a router. It shows the basic setup for a TanStack Router application.

LANGUAGE: tsx
CODE:
import { createRootRoute, createRouter, Outlet } from '@tanstack/react-router'

const rootRoute = createRootRoute({
  component: () => <Outlet />,
  // ... root route options
})

const routeTree = rootRoute.addChildren([
  // ... other routes
])

const router = createRouter({
  routeTree,
})

----------------------------------------

TITLE: Installing TanStack Router via Package Managers
DESCRIPTION: Command-line instructions for installing TanStack Router using different package managers including NPM, PNPM, Yarn, Bun, and Deno.

LANGUAGE: sh
CODE:
npm install @tanstack/react-router
# or
pnpm add @tanstack/react-router
# or
yarn add @tanstack/react-router
# or
bun add @tanstack/react-router
# or
deno add npm:@tanstack/react-router

----------------------------------------

TITLE: Using useNavigate Hook in React Components with TanStack Router
DESCRIPTION: This snippet demonstrates how to use the useNavigate hook in different scenarios, including navigating to specific routes, adding search parameters, hash, and state to the navigation.

LANGUAGE: tsx
CODE:
import { useNavigate } from '@tanstack/react-router'

function PostsPage() {
  const navigate = useNavigate({ from: '/posts' })
  const handleClick = () => navigate({ search: { page: 2 } })
  // ...
}

function Component() {
  const navigate = useNavigate()
  return (
    <div>
      <button
        onClick={() =>
          navigate({
            to: '/posts',
          })
        }
      >
        Posts
      </button>
      <button
        onClick={() =>
          navigate({
            to: '/posts',
            search: { page: 2 },
          })
        }
      >
        Posts (Page 2)
      </button>
      <button
        onClick={() =>
          navigate({
            to: '/posts',
            hash: 'my-hash',
          })
        }
      >
        Posts (Hash)
      </button>
      <button
        onClick={() =>
          navigate({
            to: '/posts',
            state: { from: 'home' },
          })
        }
      >
        Posts (State)
      </button>
    </div>
  )
}

----------------------------------------

TITLE: Initializing Router Instance - TanStack Router in TypeScript
DESCRIPTION: Creates a basic router instance using the createRouter function from TanStack Router. This is the fundamental setup required to begin using the router.

LANGUAGE: tsx
CODE:
import { createRouter } from '@tanstack/react-router'

const router = createRouter({
  // ...
})

----------------------------------------

TITLE: Creating Root Route in TanStack Router
DESCRIPTION: Shows how to create a root route using createRootRoute function and how to add context with createRootRouteWithContext. The root route serves as the top-most route in the routing tree.

LANGUAGE: tsx
CODE:
// Standard root route
import { createRootRoute } from '@tanstack/react-router'

export const Route = createRootRoute()

// Root route with Context
import { createRootRouteWithContext } from '@tanstack/react-router'
import type { QueryClient } from '@tanstack/react-query'

export interface MyRouterContext {
  queryClient: QueryClient
}
export const Route = createRootRouteWithContext<MyRouterContext>()

----------------------------------------

TITLE: Creating Router for SSR in TypeScript
DESCRIPTION: This snippet demonstrates how to create a router function that can be used in both server and client environments for SSR with TanStack Router.

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { createRouter as createTanstackRouter } from '@tanstack/react-router'
import { routeTree } from './routeTree.gen'

export function createRouter() {
  return createTanstackRouter({ routeTree })
}

declare module '@tanstack/react-router' {
  interface Register {
    router: ReturnType<typeof createRouter>
  }
}

----------------------------------------

TITLE: Using useParams Hook in TanStack Router with TypeScript/TSX
DESCRIPTION: Demonstrates various ways to use the useParams hook including basic usage, route-specific usage with routeApi, parameter selection, and loose parameter matching. The hook returns path parameters from the closest match and parent matches.

LANGUAGE: tsx
CODE:
import { useParams } from '@tanstack/react-router'

const routeApi = getRouteApi('/posts/$postId')

function Component() {
  const params = useParams({ from: '/posts/$postId' })

  // OR

  const routeParams = routeApi.useParams()

  // OR

  const postId = useParams({
    from: '/posts/$postId',
    select: (params) => params.postId,
  })

  // OR

  const looseParams = useParams({ strict: false })

  // ...
}

----------------------------------------

TITLE: Basic Route Loader Implementation in TypeScript
DESCRIPTION: Demonstrates how to create a basic route loader function for fetching posts data.

LANGUAGE: tsx
CODE:
export const Route = createFileRoute('/posts')({\n  loader: () => fetchPosts(),\n})

----------------------------------------

TITLE: Error Handling Component Configuration
DESCRIPTION: Shows how to implement error handling and custom error components in routes.

LANGUAGE: tsx
CODE:
export const Route = createFileRoute('/posts')({\n  loader: () => fetchPosts(),\n  errorComponent: ({ error, reset }) => {\n    return (\n      <div>\n        {error.message}\n        <button\n          onClick={() => {\n            reset()\n          }}\n        >\n          retry\n        </button>\n      </div>\n    )\n  },\n})

----------------------------------------

TITLE: Using useLoaderData Hook in TanStack Router with TypeScript
DESCRIPTION: Demonstrates basic usage of the useLoaderData hook within a React component. The example shows how to retrieve typed loader data from a specific route using the 'from' option.

LANGUAGE: tsx
CODE:
import { useLoaderData } from '@tanstack/react-router'

function Component() {
  const loaderData = useLoaderData({ from: '/posts/$postId' })
  //     ^? { postId: string, body: string, ... }
  // ...
}

----------------------------------------

TITLE: Creating File-Based Route with FileRoute in TypeScript/React
DESCRIPTION: Example demonstrating how to create a file-based route using the FileRoute class. Shows initialization, route configuration with loader and component, and component implementation using the route's loader data.

LANGUAGE: tsx
CODE:
import { FileRoute } from '@tanstack/react-router'

export const Route = new FileRoute('/').createRoute({
  loader: () => {
    return 'Hello World'
  },
  component: IndexComponent,
})

function IndexComponent() {
  const data = Route.useLoaderData()
  return <div>{data}</div>
}

----------------------------------------

TITLE: Creating Root Route with Context in TypeScript React
DESCRIPTION: This example demonstrates how to use the createRootRouteWithContext function to create a root route that requires a QueryClient context. It shows the process of defining the context interface, creating the root route, building the route tree, and initializing the router with the required context.

LANGUAGE: tsx
CODE:
import {
  createRootRouteWithContext,
  createRouter,
} from '@tanstack/react-router'
import { QueryClient } from '@tanstack/react-query'

interface MyRouterContext {
  queryClient: QueryClient
}

const rootRoute = createRootRouteWithContext<MyRouterContext>()(
  component: () => <Outlet />,
  // ... root route options
})

const routeTree = rootRoute.addChildren([
  // ... other routes
])

const queryClient = new QueryClient()

const router = createRouter({
  routeTree,
  context: {
    queryClient,
  },
})

----------------------------------------

TITLE: Implementing Route Protection with Redirect in TanStack Router
DESCRIPTION: Demonstrates how to protect routes using beforeLoad hook and redirect users to a login page when not authenticated. The code includes handling the redirect URL for post-login navigation.

LANGUAGE: tsx
CODE:
export const Route = createFileRoute('/_authenticated')({ 
  beforeLoad: async ({ location }) => {
    if (!isAuthenticated()) {
      throw redirect({
        to: '/login',
        search: {
          redirect: location.href,
        },
      })
    }
  },
})

----------------------------------------

TITLE: Using useMatches Hook in React Component
DESCRIPTION: Demonstrates how to import and use the useMatches hook in a React component to retrieve RouteMatch objects. The hook returns an array of RouteMatch objects from the router regardless of the component's position in the React tree.

LANGUAGE: tsx
CODE:
import { useMatches } from '@tanstack/react-router'

function Component() {
  const matches = useMatches()
  //     ^? [RouteMatch, RouteMatch, ...]
  // ...
}

----------------------------------------

TITLE: Creating Routes with TanStack Router Route Class in TypeScript/React
DESCRIPTION: Demonstrates how to create a route instance using the Route class, configure it with options including a parent route, path, loader function, and component. The example shows both route configuration and component implementation using the loader data.

LANGUAGE: tsx
CODE:
import { Route } from '@tanstack/react-router'
import { rootRoute } from './__root'

const indexRoute = new Route({
  getParentRoute: () => rootRoute,
  path: '/',
  loader: () => {
    return 'Hello World'
  },
  component: IndexComponent,
})

function IndexComponent() {
  const data = indexRoute.useLoaderData()
  return <div>{data}</div>
}

----------------------------------------

TITLE: Configuring Document Head in TanStack Router Root Route
DESCRIPTION: Demonstrates how to configure document head elements including meta tags, title, links, and scripts using the routeOptions.head property in a root route.

LANGUAGE: tsx
CODE:
export const Route = createRootRoute()({\n  head: () => ({\n    meta: [\n      {\n        name: 'description',\n        content: 'My App is a web application',\n      },\n      {\n        title: 'My App',\n      },\n    ],\n    links: [\n      {\n        rel: 'icon',\n        href: '/favicon.ico',\n      },\n    ],\n    scripts: [\n      {\n        src: 'https://www.google-analytics.com/analytics.js',\n      },\n    ],\n  }),\n})

----------------------------------------

TITLE: Defining Virtual File Routes in TypeScript
DESCRIPTION: Example of creating a route tree using virtual file routes with root, index, layout and physical routes.

LANGUAGE: tsx
CODE:
import {
  rootRoute,
  route,
  index,
  layout,
  physical,
} from '@tanstack/virtual-file-routes'

export const routes = rootRoute('root.tsx', [
  index('index.tsx'),
  layout('pathlessLayout.tsx', [
    route('/dashboard', 'app/dashboard.tsx', [
      index('app/dashboard-index.tsx'),
      route('/invoices', 'app/dashboard-invoices.tsx', [
        index('app/invoices-index.tsx'),
        route('$id', 'app/invoice-detail.tsx'),
      ]),
    ]),
    physical('/posts', 'posts'),
  ]),
])

----------------------------------------

TITLE: Setting Up Router Context for Authentication
DESCRIPTION: Configuration of root route and router setup with TypeScript interfaces for authentication context integration.

LANGUAGE: tsx
CODE:
interface MyRouterContext {
  auth: AuthState
}

export const Route = createRootRouteWithContext<MyRouterContext>()({ 
  component: () => <Outlet />,
})

LANGUAGE: tsx
CODE:
export const router = createRouter({
  routeTree,
  context: {
    auth: undefined!,
  },
})

----------------------------------------

TITLE: Implementing Authenticated Pathless Layout Route in TanStack Router
DESCRIPTION: This code snippet demonstrates how to create a pathless layout route with authentication check using TanStack Router. It uses the createFileRoute function to define the route, implements a beforeLoad function for authentication, and renders a component with an Outlet for nested routes.

LANGUAGE: tsx
CODE:
// src/routes/_pathless-layout.tsx
import { createFileRoute, Outlet } from '@tanstack/react-router'
import { isAuthenticated } from '../utils/auth'

export const Route = createFileRoute('/_pathless-layout', {
  beforeLoad: async () => {
    // Check if the user is authenticated
    const authed = await isAuthenticated()
    if (!authed) {
      // Redirect the user to the login page
      return '/login'
    }
  },
  component: PathlessLayoutRouteComponent,
  // ...
})

function PathlessLayoutRouteComponent() {
  return (
    <div>
      <h1>You are authed</h1>
      <Outlet />
    </div>
  )
}

----------------------------------------

TITLE: Accessing Path Params in Component with TanStack Router (TypeScript)
DESCRIPTION: This code shows how to access path parameters in a React component using the route's useParams hook. It demonstrates creating a route with a component and using the postId parameter.

LANGUAGE: tsx
CODE:
export const Route = createFileRoute('/posts/$postId')({
  component: PostComponent,
})

function PostComponent() {
  const { postId } = Route.useParams()
  return <div>Post {postId}</div>
}

----------------------------------------

TITLE: Basic Route Matching with useMatchRoute in TanStack Router
DESCRIPTION: Examples demonstrating various use cases of the useMatchRoute hook, including basic route matching, fuzzy matching, pending route matching, and parameter handling.

LANGUAGE: tsx
CODE:
import { useMatchRoute } from '@tanstack/react-router'

// Current location: /posts/123
function Component() {
  const matchRoute = useMatchRoute()
  const params = matchRoute({ to: '/posts/$postId' })
  //    ^ { postId: '123' }
}

// Current location: /posts/123
function Component() {
  const matchRoute = useMatchRoute()
  const params = matchRoute({ to: '/posts' })
  //    ^ false
}

// Current location: /posts/123
function Component() {
  const matchRoute = useMatchRoute()
  const params = matchRoute({ to: '/posts', fuzzy: true })
  //    ^ {}
}

// Current location: /posts
// Pending location: /posts/123
function Component() {
  const matchRoute = useMatchRoute()
  const params = matchRoute({ to: '/posts/$postId', pending: true })
  //    ^ { postId: '123' }
}

// Current location: /posts/123/foo/456
function Component() {
  const matchRoute = useMatchRoute()
  const params = matchRoute({ to: '/posts/$postId/foo/$fooId' })
  //    ^ { postId: '123', fooId: '456' }
}

// Current location: /posts/123/foo/456
function Component() {
  const matchRoute = useMatchRoute()
  const params = matchRoute({
    to: '/posts/$postId/foo/$fooId',
    params: { postId: '123' },
  })
  //    ^ { postId: '123', fooId: '456' }
}

// Current location: /posts/123/foo/456
function Component() {
  const matchRoute = useMatchRoute()
  const params = matchRoute({
    to: '/posts/$postId/foo/$fooId',
    params: { postId: '789' },
  })
  //    ^ false
}

// Current location: /posts/123/foo/456
function Component() {
  const matchRoute = useMatchRoute()
  const params = matchRoute({
    to: '/posts/$postId/foo/$fooId',
    params: { fooId: '456' },
  })
  //    ^ { postId: '123', fooId: '456' }
}

// Current location: /posts/123/foo/456
function Component() {
  const matchRoute = useMatchRoute()
  const params = matchRoute({
    to: '/posts/$postId/foo/$fooId',
    params: { postId: '123', fooId: '456' },
  })
  //    ^ { postId: '123', fooId: '456' }
}

// Current location: /posts/123/foo/456
function Component() {
  const matchRoute = useMatchRoute()
  const params = matchRoute({
    to: '/posts/$postId/foo/$fooId',
    params: { postId: '789', fooId: '456' },
  })
  //    ^ false
}

----------------------------------------

TITLE: Creating Typed Router Context in TypeScript
DESCRIPTION: Demonstrates how to create a typed router context using createRootRouteWithContext and createRouter functions. It includes defining a custom interface for the context and creating the root route and router with this context.

LANGUAGE: tsx
CODE:
import {
  createRootRouteWithContext,
  createRouter,
} from '@tanstack/react-router'

interface MyRouterContext {
  user: User
}

// Use the routerContext to create your root route
const rootRoute = createRootRouteWithContext<MyRouterContext>()({ 
  component: App,
})

const routeTree = rootRoute.addChildren([
  // ...
])

// Use the routerContext to create your router
const router = createRouter({
  routeTree,
})

----------------------------------------

TITLE: Using defer Function with TanStack Router in TypeScript/React
DESCRIPTION: This example demonstrates how to use the defer function in a TanStack Router route. It shows the function being used in a route loader and then consumed in a component using both the useAwaited hook and the Await component.

LANGUAGE: tsx
CODE:
import { defer } from '@tanstack/react-router'

const route = createRoute({
  loader: () => {
    const deferredPromise = defer(fetch('/api/data'))
    return { deferredPromise }
  },
  component: MyComponent,
})

function MyComponent() {
  const { deferredPromise } = Route.useLoaderData()

  const data = useAwaited({ promise: deferredPromise })

  // or

  return (
    <Await promise={deferredPromise}>
      {(data) => <div>{JSON.stringify(data)}</div>}
    </Await>
  )
}

----------------------------------------

TITLE: Building Layout Routes with Outlet Component
DESCRIPTION: Demonstrates how to create layout routes that wrap child components using the Outlet component for nested routing.

LANGUAGE: tsx
CODE:
const postsRoute = createRoute({
  getParentRoute: () => rootRoute,
  path: 'posts',
  component: PostsLayoutComponent,
})

function PostsLayoutComponent() {
  return (
    <div>
      <h1>Posts</h1>
      <Outlet />
    </div>
  )
}

----------------------------------------

TITLE: Using useSearch Hook with TanStack Router in TypeScript/React
DESCRIPTION: Demonstrates different ways to use the useSearch hook to access search query parameters. Shows strict typing with route-specific parameters, selecting specific search values, and using loose typing across all routes.

LANGUAGE: tsx
CODE:
import { useSearch } from '@tanstack/react-router'

function Component() {
  const search = useSearch({ from: '/posts/$postId' })
  //    ^ FullSearchSchema

  // OR

  const selected = useSearch({
    from: '/posts/$postId',
    select: (search) => search.postView,
  })
  //    ^ string

  // OR

  const looseSearch = useSearch({ strict: false })
  //    ^ Partial<FullSearchSchema>

  // ...
}

----------------------------------------

TITLE: Creating a Server Function for User Retrieval in TypeScript
DESCRIPTION: Illustrates the creation of a server function to fetch user data. It demonstrates data validation using Zod and server-side database querying.

LANGUAGE: typescript
CODE:
import { createServerFn } from '@tanstack/react-start'
import * as fs from 'node:fs'
import { z } from 'zod'

const getUserById = createServerFn({ method: 'GET' })
  // Always validate data sent to the function, here we use Zod
  .validator(z.string())
  // The handler function is where you perform the server-side logic
  .handler(async ({ data }) => {
    return db.query.users.findFirst({ where: eq(users.id, data) })
  })

// Somewhere else in your application
const user = await getUserById({ data: '1' })

----------------------------------------

TITLE: Using Link Component for Navigation in TanStack Router with TypeScript
DESCRIPTION: This example demonstrates how to use the Link component from TanStack Router to create a navigation link. It shows how to specify the destination path, route parameters, and search query parameters.

LANGUAGE: tsx
CODE:
import { Link } from '@tanstack/react-router'

function Component() {
  return (
    <Link
      to="/somewhere/$somewhereId"
      params={{ somewhereId: 'baz' }}
      search={(prev) => ({ ...prev, foo: 'bar' })}
    >
      Click me
    </Link>
  )
}

----------------------------------------

TITLE: Navigating with Path Params in TanStack Router (TypeScript)
DESCRIPTION: These examples show how to navigate to a route with path parameters using both object and function styles in the Link component.

LANGUAGE: tsx
CODE:
function Component() {
  return (
    <Link to="/blog/$postId" params={{ postId: '123' }}>
      Post 123
    </Link>
  )
}

function Component() {
  return (
    <Link to="/blog/$postId" params={(prev) => ({ ...prev, postId: '123' })}>
      Post 123
    </Link>
  )
}

----------------------------------------

TITLE: Dynamic Link Implementation
DESCRIPTION: Example of creating dynamic links with parameterized routes and type-safe parameters.

LANGUAGE: tsx
CODE:
const link = (
  <Link
    to="/blog/post/$postId"
    params={{
      postId: 'my-first-blog-post',
    }}
  >
    Blog Post
  </Link>
)

----------------------------------------

TITLE: Using MatchRoute Component with TanStack Router in React
DESCRIPTION: Example showing how to use the MatchRoute component to conditionally render content based on route matching. The example demonstrates using the component with a parameterized route and a pending state for loading indication.

LANGUAGE: tsx
CODE:
import { MatchRoute } from '@tanstack/react-router'

function Component() {
  return (
    <div>
      <MatchRoute to="/posts/$postId" params={{ postId: '123' }} pending>
        {(match) => <Spinner show={!!match} wait="delay-50" />}
      </MatchRoute>
    </div>
  )
}

----------------------------------------

TITLE: Implementing Outlet Component in Root Route with TanStack Router in TSX
DESCRIPTION: This code snippet demonstrates how to use the Outlet component in a root route of a TanStack Router application. It creates a root route with a RootComponent that renders a title and an Outlet for child routes.

LANGUAGE: tsx
CODE:
import { createRootRoute, Outlet } from '@tanstack/react-router'

export const Route = createRootRoute({
  component: RootComponent,
})

function RootComponent() {
  return (
    <div>
      <h1>My App</h1>
      <Outlet /> {/* This is where child routes will render */}
    </div>
  )
}

----------------------------------------

TITLE: Implementing Outlet Component in Root Route with TanStack Router in TSX
DESCRIPTION: This code snippet demonstrates how to use the Outlet component in a root route of a TanStack Router application. It creates a root route with a RootComponent that renders a title and an Outlet for child routes.

LANGUAGE: tsx
CODE:
import { createRootRoute, Outlet } from '@tanstack/react-router'

export const Route = createRootRoute({
  component: RootComponent,
})

function RootComponent() {
  return (
    <div>
      <h1>My App</h1>
      <Outlet /> {/* This is where child routes will render */}
    </div>
  )
}

----------------------------------------

TITLE: Configuring Default Router-Wide Not Found Component
DESCRIPTION: Shows how to set up a default not found component that applies to all routes in the application through router configuration.

LANGUAGE: tsx
CODE:
const router = createRouter({\n  defaultNotFoundComponent: () => {\n    return (\n      <div>\n        <p>Not found!</p>\n        <Link to=\"/\">Go home</Link>\n      </div>\n    )\n  },\n})

----------------------------------------

TITLE: Defining RouteMatch Interface in TypeScript for TanStack Router
DESCRIPTION: This TypeScript interface defines the RouteMatch type, which represents a route match in TanStack Router. It includes properties for route identification, navigation state, data loading, error handling, and context information.

LANGUAGE: typescript
CODE:
interface RouteMatch {
  id: string
  routeId: string
  pathname: string
  params: Route['allParams']
  status: 'pending' | 'success' | 'error'
  isFetching: boolean
  showPending: boolean
  error: unknown
  paramsError: unknown
  searchError: unknown
  updatedAt: number
  loadPromise?: Promise<void>
  loaderData?: Route['loaderData']
  context: Route['allContext']
  search: Route['fullSearchSchema']
  fetchedAt: number
  abortController: AbortController
  cause: 'enter' | 'stay'
}

----------------------------------------

TITLE: Using Await Component in React with TanStack Router
DESCRIPTION: This example demonstrates how to use the Await component from TanStack Router in a React component. It shows how to pass a deferred promise to the Await component and render the resolved data.

LANGUAGE: tsx
CODE:
import { Await } from '@tanstack/react-router'

function Component() {
  const { deferredPromise } = route.useLoaderData()

  return (
    <Await promise={deferredPromise}>
      {(data) => <div>{JSON.stringify(data)}</div>}
    </Await>
  )
}

----------------------------------------

TITLE: Zod Integration for Search Param Validation
DESCRIPTION: Example of using Zod schema validation library to validate and type search parameters with better error handling.

LANGUAGE: tsx
CODE:
import { z } from 'zod'

const productSearchSchema = z.object({
  page: z.number().catch(1),
  filter: z.string().catch(''),
  sort: z.enum(['newest', 'oldest', 'price']).catch('newest'),
})

type ProductSearch = z.infer<typeof productSearchSchema>

export const Route = createFileRoute('/shop/products')({
  validateSearch: (search) => productSearchSchema.parse(search),
})

----------------------------------------

TITLE: Defining RouterState Type in TypeScript for TanStack Router
DESCRIPTION: This code snippet defines the RouterState type, which represents the internal state of the TanStack Router. It includes properties for router status, loading state, transitions, matches, and locations.

LANGUAGE: tsx
CODE:
type RouterState = {
  status: 'pending' | 'idle'
  isLoading: boolean
  isTransitioning: boolean
  matches: Array<RouteMatch>
  pendingMatches: Array<RouteMatch>
  location: ParsedLocation
  resolvedLocation: ParsedLocation
}

----------------------------------------

TITLE: Implementing Router Context with TypeScript
DESCRIPTION: Shows how to create and type router context using createRootRouteWithContext.

LANGUAGE: tsx
CODE:
const rootRoute = createRootRouteWithContext<{ whateverYouWant: true }>()({
  component: App,
})

const routeTree = rootRoute.addChildren([
  // ... all child routes will have access to `whateverYouWant` in their context
])

const router = createRouter({
  routeTree,
  context: {
    // This will be required to be passed now
    whateverYouWant: true,
  },
})

----------------------------------------

TITLE: Implementing Deferred Data Loading with Await in TanStack Router (TSX)
DESCRIPTION: Demonstrates how to use deferred data loading in a TanStack Router loader by returning an unresolved promise. The component uses the Await component to handle the deferred data.

LANGUAGE: tsx
CODE:
// src/routes/posts.$postId.tsx
import { createFileRoute, defer } from '@tanstack/react-router'

export const Route = createFileRoute('/posts/$postId')({
  loader: async () => {
    // Fetch some slower data, but do not await it
    const slowDataPromise = fetchSlowData()

    // Fetch and await some data that resolves quickly
    const fastData = await fetchFastData()

    return {
      fastData,
      deferredSlowData: slowDataPromise,
    }
  },
})

LANGUAGE: tsx
CODE:
// src/routes/posts.$postId.tsx
import { createFileRoute, Await } from '@tanstack/react-router'

export const Route = createFileRoute('/posts/$postId')({
  // ...
  component: PostIdComponent,
})

function PostIdComponent() {
  const { deferredSlowData, fastData } = Route.useLoaderData()

  // do something with fastData

  return (
    <Await promise={deferredSlowData} fallback={<div>Loading...</div>}>
      {(data) => {
        return <div>{data}</div>
      }}
    </Await>
  )
}

----------------------------------------

TITLE: Implementing CatchBoundary Component in TanStack Router
DESCRIPTION: Example showing how to use the CatchBoundary component to handle errors in a React component. The component is configured with a reset key function and an error callback handler.

LANGUAGE: tsx
CODE:
import { CatchBoundary } from '@tanstack/react-router'

function Component() {
  return (
    <CatchBoundary
      getResetKey={() => 'reset'}
      onCatch={(error) => console.error(error)}
    >
      <div>My Component</div>
    </CatchBoundary>
  )
}

----------------------------------------

TITLE: Using Router Context in Route Definition
DESCRIPTION: Shows how to access and use the router context within a route definition, specifically in the loader function to fetch todos based on the user ID from the context.

LANGUAGE: tsx
CODE:
// src/routes/todos.tsx
export const Route = createFileRoute('/todos')({
  component: Todos,
  loader: ({ context }) => fetchTodosByUserId(context.user.id),
})

----------------------------------------

TITLE: TanStack Query Integration Example
DESCRIPTION: Shows how to properly integrate TanStack Query with the router using queryOptions and useSuspenseQuery for efficient data loading and caching.

LANGUAGE: tsx
CODE:
const postsQueryOptions = queryOptions({
  queryKey: ['posts'],
  queryFn: () => fetchPosts(),
})

export const Route = createFileRoute('/posts')({
  loader: () => queryClient.ensureQueryData(postsQueryOptions),
  component: () => {
    const {
      data: { posts },
    } = useSuspenseQuery(postsQueryOptions)

    return (
      <div>
        {posts.map((post) => (
          <Post key={post.id} post={post} />
        ))}
      </div>
    )
  },
})

----------------------------------------

TITLE: Preloadable Link Implementation
DESCRIPTION: Example of implementing link preloading for improved perceived performance.

LANGUAGE: tsx
CODE:
const link = (
  <Link to="/blog/post/$postId" preload="intent" preloadTimeout={100}>
    Blog Post
  </Link>
)

----------------------------------------

TITLE: Defining NavigateOptions Type in TypeScript for TanStack Router
DESCRIPTION: This snippet defines the NavigateOptions type, which extends ToOptions and includes various properties for configuring navigation behavior in TanStack Router. It specifies options for history manipulation, scroll behavior, view transitions, and more.

LANGUAGE: tsx
CODE:
type NavigateOptions = ToOptions & {
  replace?: boolean
  resetScroll?: boolean
  hashScrollIntoView?: boolean | ScrollIntoViewOptions
  viewTransition?: boolean | ViewTransitionOptions
  ignoreBlocker?: boolean
  reloadDocument?: boolean
  href?: string
}

----------------------------------------

TITLE: Search Parameter Validation and Loading
DESCRIPTION: Example of validating and using search parameters in route loaders with dependency tracking.

LANGUAGE: tsx
CODE:
export const Route = createFileRoute('/posts')({\n  validateSearch: z.object({\n    offset: z.number().int().nonnegative().catch(0),\n  }),\n  loaderDeps: ({ search: { offset } }) => ({ offset }),\n  loader: async ({ deps: { offset } }) =>\n    fetchPosts({\n      offset,\n    }),\n})

----------------------------------------

TITLE: Integrating External Data Fetching Library with Router Context
DESCRIPTION: Demonstrates how to integrate an external data fetching library (QueryClient) with the router context, allowing it to be used in route loaders.

LANGUAGE: tsx
CODE:
import {
  createRootRouteWithContext,
  createRouter,
} from '@tanstack/react-router'

interface MyRouterContext {
  queryClient: QueryClient
}

const rootRoute = createRootRouteWithContext<MyRouterContext>()({ 
  component: App,
})

const queryClient = new QueryClient()

const router = createRouter({
  routeTree: rootRoute,
  context: {
    queryClient,
  },
})

----------------------------------------

TITLE: Basic Route Loader Implementation with Cache
DESCRIPTION: Demonstrates a basic (naive) implementation of using route loaders to seed a cache with data. This example shows the fundamental concept though it's not recommended for production use.

LANGUAGE: tsx
CODE:
let postsCache = []

export const Route = createFileRoute('/posts')({
  loader: async () => {
    postsCache = await fetchPosts()
  },
  component: () => {
    return (
      <div>
        {postsCache.map((post) => (
          <Post key={post.id} post={post} />
        ))}
      </div>
    )
  },
})

----------------------------------------

TITLE: Configuring Router with Custom Wrap Component in TypeScript
DESCRIPTION: Example of creating a router instance with a custom Wrap component to provide context to the entire router. This demonstrates how to use the Wrap property in RouterOptions.

LANGUAGE: tsx
CODE:
import { createRouter } from '@tanstack/react-router'

const router = createRouter({
  // ...
  Wrap: ({ children }) => {
    return <MyContext.Provider value={myContext}>{children}</MyContext>
  },
})

----------------------------------------

TITLE: Basic Link Navigation with Search Params in TanStack Router
DESCRIPTION: Demonstrates how to create a link with structured search parameters that will be automatically JSON-serialized in the URL.

LANGUAGE: tsx
CODE:
const link = (
  <Link
    to="/shop"
    search={{
      pageIndex: 3,
      includeCategories: ['electronics', 'gifts'],
      sortBy: 'price',
      desc: true,
    }}
  />
)

----------------------------------------

TITLE: Implementing Type-Safe Route References
DESCRIPTION: Example of using type-safe route references with the Link component instead of plain strings.

LANGUAGE: tsx
CODE:
import { Route as aboutRoute } from './routes/about.tsx'

function Comp() {
  return <Link to={aboutRoute.to}>About</Link>
}

----------------------------------------

TITLE: SSR Dehydration/Hydration Setup
DESCRIPTION: Illustrates the setup for server-side rendering with data dehydration and client-side hydration using TanStack Query integration.

LANGUAGE: tsx
CODE:
export function createRouter() {
  const queryClient = new QueryClient()

  return createRouter({
    routeTree,
    context: {
      queryClient,
    },
    dehydrate: () => {
      return {
        queryClientState: dehydrate(queryClient),
      }
    },
    hydrate: (dehydrated) => {
      hydrate(queryClient, dehydrated.queryClientState)
    },
    Wrap: ({ children }) => {
      return (
        <QueryClientProvider client={queryClient}>
          {children}
        </QueryClientProvider>
      )
    },
  })
}

----------------------------------------

TITLE: Route Context and Dependency Injection Setup
DESCRIPTION: Shows how to set up router context and inject dependencies for data fetching across routes.

LANGUAGE: tsx
CODE:
export const fetchPosts = async () => {\n  const res = await fetch(`/api/posts?page=${pageIndex}`)\n  if (!res.ok) throw new Error('Failed to fetch posts')\n  return res.json()\n}

LANGUAGE: tsx
CODE:
export const Route = createRootRouteWithContext<{\n  fetchPosts: typeof fetchPosts\n}>()() 

----------------------------------------

TITLE: Using router.subscribe for Mutation State Reset in TypeScript
DESCRIPTION: This snippet shows how to use the router.subscribe method to reset mutation states when the route changes. It subscribes to the 'onResolved' event to clear the mutation cache when the location path changes and resolves.

LANGUAGE: tsx
CODE:
const router = createRouter()
const coolMutationCache = createCoolMutationCache()

const unsubscribeFn = router.subscribe('onResolved', () => {
  // Reset mutation states when the route changes
  coolMutationCache.clear()
})

----------------------------------------

TITLE: Implementing ErrorComponent in React
DESCRIPTION: This snippet shows a basic implementation of the ErrorComponent. It renders an error message, toggles visibility of the error details, and provides a reset button.

LANGUAGE: jsx
CODE:
function ErrorComponent({ error, reset }: ErrorComponentProps) {
  const [showError, setShowError] = useState(process.env.NODE_ENV === 'development');

  return (
    <div>
      <h1>An error occurred</h1>
      <button onClick={() => setShowError(!showError)}>
        {showError ? 'Hide' : 'Show'} Error
      </button>
      {showError && <pre>{error.message}</pre>}
      <button onClick={reset}>Try again</button>
    </div>
  );
}

----------------------------------------

TITLE: Implementing Deferred Data Loading with External Libraries in TanStack Router (TSX)
DESCRIPTION: Shows how to implement deferred data loading using external libraries like TanStack Query in TanStack Router. The loader initiates data fetching, and the component uses library-specific hooks to access the data.

LANGUAGE: tsx
CODE:
// src/routes/posts.$postId.tsx
import { createFileRoute } from '@tanstack/react-router'
import { slowDataOptions, fastDataOptions } from '~/api/query-options'

export const Route = createFileRoute('/posts/$postId')({
  loader: async ({ context: { queryClient } }) => {
    // Kick off the fetching of some slower data, but do not await it
    queryClient.prefetchQuery(slowDataOptions())

    // Fetch and await some data that resolves quickly
    await queryClient.ensureQueryData(fastDataOptions())
  },
})

LANGUAGE: tsx
CODE:
// src/routes/posts.$postId.tsx
import { createFileRoute } from '@tanstack/react-router'
import { useSuspenseQuery } from '@tanstack/react-query'
import { slowDataOptions, fastDataOptions } from '~/api/query-options'

export const Route = createFileRoute('/posts/$postId')({
  // ...
  component: PostIdComponent,
})

function PostIdComponent() {
  const fastData = useSuspenseQuery(fastDataOptions())

  // do something with fastData

  return (
    <Suspense fallback={<div>Loading...</div>}>
      <SlowDataComponent />
    </Suspense>
  )
}

function SlowDataComponent() {
  const data = useSuspenseQuery(slowDataOptions())

  return <div>{data}</div>
}

----------------------------------------

TITLE: Defining a Route with Path Param in TanStack Router (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a file route with a path parameter for a post ID. It includes a loader function that fetches the post data using the parameter.

LANGUAGE: tsx
CODE:
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/posts/$postId')({
  loader: async ({ params }) => {
    return fetchPost(params.postId)
  },
})

----------------------------------------

TITLE: Using useRouteContext Hook in React with TanStack Router
DESCRIPTION: Demonstrates two ways to use the useRouteContext hook: retrieving the full route context and selecting specific data from the context. Shows how to access route parameters like postId from the current route context.

LANGUAGE: tsx
CODE:
import { useRouteContext } from '@tanstack/react-router'

function Component() {
  const context = useRouteContext({ from: '/posts/$postId' })
  //    ^ RouteContext

  // OR

  const selected = useRouteContext({
    from: '/posts/$postId',
    select: (context) => context.postId,
  })
  //    ^ string

  // ...
}

----------------------------------------

TITLE: Type-Safe Menu Component Implementation
DESCRIPTION: Implementation of a Menu component that uses ValidateLinkOptionsArray for type-safe validation of an array of link options. Includes support for relative navigation paths.

LANGUAGE: tsx
CODE:
export interface MenuProps<
  TRouter extends RegisteredRouter = RegisteredRouter,
  TItems extends ReadonlyArray<unknown> = ReadonlyArray<unknown>,
  TFrom extends string = string,
> {
  from: ValidateFromPath<TRouter, TFrom>
  items: ValidateLinkOptionsArray<TRouter, TItems, TFrom>
}

export function Menu<
  TRouter extends RegisteredRouter = RegisteredRouter,
  TItems extends ReadonlyArray<unknown>,
  TFrom extends string = string,
>(props: MenuProps<TRouter, TItems, TFrom>): React.ReactNode
export function Menu(props: MenuProps): React.ReactNode {
  return (
    <ul>
      {props.items.map((item) => (
        <li>
          <Link {...item} from={props.from} />
        </li>
      ))}
    </ul>
  )
}

----------------------------------------

TITLE: Demonstrating Route Matching for '/blog/my-post' URL in TanStack Router
DESCRIPTION: This code snippet shows the route matching process for the '/blog/my-post' URL. It demonstrates how the router handles dynamic routes with parameters.

LANGUAGE: plaintext
CODE:
Root
  ❌ /
  ❌ about/us
  ❌ about
  ⏩ blog
    ❌ /
    ❌ new
    ✅ $postId
  - *

----------------------------------------

TITLE: Implementing Hook-Based Navigation Blocking in TanStack Router
DESCRIPTION: Demonstrates how to use the useBlocker hook to prevent navigation when a form has unsaved changes. The hook checks if the form is dirty and shows a confirmation dialog.

LANGUAGE: tsx
CODE:
import { useBlocker } from '@tanstack/react-router'

function MyComponent() {
  const [formIsDirty, setFormIsDirty] = useState(false)

  useBlocker({
    shouldBlockFn: () => {
      if (!formIsDirty) return false

      const shouldLeave = confirm('Are you sure you want to leave?')
      return !shouldLeave
    },
  })

  // ...
}

----------------------------------------

TITLE: Accessing Path Params Globally in TanStack Router (TypeScript)
DESCRIPTION: This snippet demonstrates how to access path parameters from any component in the app using the globally exported useParams hook with the strict: false option.

LANGUAGE: tsx
CODE:
function PostComponent() {
  const { postId } = useParams({ strict: false })
  return <div>Post {postId}</div>
}

----------------------------------------

TITLE: Demonstrating Route Matching for '/' URL in TanStack Router
DESCRIPTION: This code snippet illustrates the route matching process for the root URL '/'. It shows how the router quickly matches the index route.

LANGUAGE: plaintext
CODE:
Root
  ✅ /
  - about/us
  - about
  - blog
    - /
    - new
    - $postId
  - *

----------------------------------------

TITLE: Creating MUI Custom Link and Button Components
DESCRIPTION: Multiple implementations showing how to create custom link components using Material-UI (MUI) components, including both Link and Button variants.

LANGUAGE: tsx
CODE:
import React from 'react'
import { createLink } from '@tanstack/react-router'
import { Button } from '@mui/material'
import type { ButtonProps } from '@mui/material'
import type { LinkComponent } from '@tanstack/react-router'

interface MUIButtonLinkProps extends ButtonProps<'a'> {
  // Add any additional props you want to pass to the Button
}

const MUIButtonLinkComponent = React.forwardRef<
  HTMLAnchorElement,
  MUIButtonLinkProps
>((props, ref) => <Button ref={ref} component="a" {...props} />)

const CreatedButtonLinkComponent = createLink(MUIButtonLinkComponent)

export const CustomButtonLink: LinkComponent<typeof MUIButtonLinkComponent> = (
  props,
) => {
  return <CreatedButtonLinkComponent preload={'intent'} {...props} />
}

----------------------------------------

TITLE: Defining LinkProps Type in TypeScript for TanStack Router
DESCRIPTION: Type definition for LinkProps that extends ActiveLinkOptions and React anchor attributes. It includes a children prop that can accept either React nodes or a function that receives an isActive state and returns React nodes.

LANGUAGE: typescript
CODE:
type LinkProps = ActiveLinkOptions &
  Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'children'> & {
    children?:
      | React.ReactNode
      | ((state: { isActive: boolean }) => React.ReactNode)
  }

----------------------------------------

TITLE: Component-Based Navigation Blocking in TanStack Router
DESCRIPTION: Demonstrates using the Block component for navigation blocking with both simple confirmation and resolver-based approaches.

LANGUAGE: tsx
CODE:
import { Block } from '@tanstack/react-router'

function MyComponent() {
  const [formIsDirty, setFormIsDirty] = useState(false)

  return (
    <Block
      shouldBlockFn={() => {
        if (!formIsDirty) return false

        const shouldLeave = confirm('Are you sure you want to leave?')
        return !shouldLeave
      }}
    />
  )

  // OR

  return (
    <Block shouldBlockFn={() => !formIsDirty} withResolver>
      {({ status, proceed, reset }) => <>{/* ... */}</>}
    </Block>
  )
}

----------------------------------------

TITLE: Initializing and Using RouteApi in React with TanStack Router
DESCRIPTION: This example demonstrates how to create a RouteApi instance for a specific route and use it to access loader data in a React component. The RouteApi is initialized with a route ID and then used within a component to retrieve data.

LANGUAGE: tsx
CODE:
import { RouteApi } from '@tanstack/react-router'

const routeApi = new RouteApi({ id: '/posts' })

export function PostsPage() {
  const posts = routeApi.useLoaderData()
  // ...
}

----------------------------------------

TITLE: Configuring Scroll-to-Top Selectors in TanStack Router
DESCRIPTION: Demonstrates how to configure TanStack Router to scroll additional main scrollable areas to the top after navigation, in addition to the default window scrolling.

LANGUAGE: tsx
CODE:
const router = createRouter({
  scrollToTopSelectors: ['#main-scrollable-area'],
})

----------------------------------------

TITLE: Defining a Basic Server Function in TypeScript
DESCRIPTION: Shows how to create a simple server function that returns the current server time.

LANGUAGE: typescript
CODE:
import { createServerFn } from '@tanstack/react-start'

export const getServerTime = createServerFn().handler(async () => {
  // Wait for 1 second
  await new Promise((resolve) => setTimeout(resolve, 1000))
  // Return the current time
  return new Date().toISOString()
})

----------------------------------------

TITLE: File-Based Route Tree Structure in TanStack Router
DESCRIPTION: Illustrates a comprehensive file-based route tree structure for a larger site using TanStack Router.

LANGUAGE: tsx
CODE:
/routes
├── __root.tsx
├── index.tsx
├── about.tsx
├── posts/
│   ├── index.tsx
│   ├── $postId.tsx
├── posts.$postId.edit.tsx
├── settings/
│   ├── profile.tsx
│   ├── notifications.tsx
├── _pathlessLayout/
│   ├── route-a.tsx
├── ├── route-b.tsx
├── files/
│   ├── $.tsx

----------------------------------------

TITLE: Defining ActiveLinkOptions Type in TypeScript
DESCRIPTION: TypeScript type definition for ActiveLinkOptions that extends LinkOptions with activeProps and inactiveProps. These properties allow for dynamic styling of anchor elements based on their active/inactive states using React anchor HTML attributes.

LANGUAGE: tsx
CODE:
type ActiveLinkOptions = LinkOptions & {
  activeProps?:
    | React.AnchorHTMLAttributes<HTMLAnchorElement>
    | (() => React.AnchorHTMLAttributes<HTMLAnchorElement>)
  inactiveProps?:
    | React.AnchorHTMLAttributes<HTMLAnchorElement>
    | (() => React.AnchorHTMLAttributes<HTMLAnchorElement>)
}

----------------------------------------

TITLE: Route Loader Type Definition in TypeScript
DESCRIPTION: Type definition for the loader method that handles data loading for a route. Includes options for AbortController, search params, context, and location handling.

LANGUAGE: tsx
CODE:
type loader = (
  opts: RouteMatch & {
    search: TFullSearchSchema
    abortController: AbortController
    preload: boolean
    params: TAllParams
    context: TAllContext
    location: ParsedLocation
    navigate: NavigateFn<AnyRoute> // @deprecated
    buildLocation: BuildLocationFn<AnyRoute>
    cause: 'enter' | 'stay'
  },
) => Promise<TLoaderData> | TLoaderData | void

----------------------------------------

TITLE: Server-Side Entry Point for Non-Streaming SSR
DESCRIPTION: This code snippet shows the server-side entry point for non-streaming SSR, including router creation, memory history setup, and application rendering.

LANGUAGE: tsx
CODE:
import * as React from 'react'
import ReactDOMServer from 'react-dom/server'
import { createMemoryHistory } from '@tanstack/react-router'
import { StartServer } from '@tanstack/react-start/server'
import { createRouter } from './router'

export async function render(url, response) {
  const router = createRouter()

  const memoryHistory = createMemoryHistory({
    initialEntries: [url],
  })

  router.update({
    history: memoryHistory,
  })

  await router.load()

  const appHtml = ReactDOMServer.renderToString(<StartServer router={router} />)

  response.statusCode = router.hasNotFoundMatch() ? 404 : 200
  response.setHeader('Content-Type', 'text/html')
  response.end(`<!DOCTYPE html>${appHtml}`)
}

----------------------------------------

TITLE: Defining AsyncRouteComponent Type in TypeScript for tanstack-router
DESCRIPTION: This code snippet defines the AsyncRouteComponent type, which extends SyncRouteComponent and includes an optional preload method. It's used for code-split route components that can be preloaded.

LANGUAGE: tsx
CODE:
type AsyncRouteComponent<TProps> = SyncRouteComponent<TProps> & {
  preload?: () => Promise<void>
}

----------------------------------------

TITLE: Registering Router Types with Module Declaration
DESCRIPTION: Shows how to register router types with the library using TypeScript declaration merging.

LANGUAGE: typescript
CODE:
const router = createRouter({
  // ...
})

declare module '@tanstack/react-router' {
  interface Register {
    router: typeof router
  }
}

----------------------------------------

TITLE: Setting Preload Stale Time for Individual Routes in TanStack Router
DESCRIPTION: This code demonstrates how to configure the preload stale time for a specific route in TanStack Router, overriding the default setting.

LANGUAGE: tsx
CODE:
// src/routes/posts.$postId.tsx
export const Route = createFileRoute('/posts/$postId')({
  loader: async ({ params }) => fetchPost(params.postId),
  // Preload the route again if the preload cache is older than 10 seconds
  preloadStaleTime: 10_000,
})

----------------------------------------

TITLE: Setting Default Preload Delay in TanStack Router
DESCRIPTION: This code shows how to configure the default preload delay for TanStack Router, which determines how long to wait before initiating preloading on hover or touch events.

LANGUAGE: tsx
CODE:
import { createRouter } from '@tanstack/react-router'

const router = createRouter({
  // ...
  defaultPreloadDelay: 100,
})

----------------------------------------

TITLE: Implementing useMatch Method in RouteApi for TanStack Router
DESCRIPTION: This method provides a type-safe version of the useMatch hook, pre-bound to a specific route ID. It allows for optional selection and structural sharing of the returned match data.

LANGUAGE: tsx
CODE:
  useMatch<TSelected = TAllContext>(opts?: {
    select?: (match: TAllContext) => TSelected
  }): TSelected

----------------------------------------

TITLE: Non-Redirected Authentication Component in TanStack Router
DESCRIPTION: Shows how to implement in-place authentication without redirecting, by conditionally rendering either a login component or the route content using Outlet.

LANGUAGE: tsx
CODE:
export const Route = createFileRoute('/_authenticated')({
  component: () => {
    if (!isAuthenticated()) {
      return <Login />
    }
    return <Outlet />
  },
})

----------------------------------------

TITLE: Using useAwaited Hook in React Component with TanStack Router
DESCRIPTION: Demonstrates how to use the useAwaited hook to handle a deferred promise in a React component. The hook suspends until the promise resolves or rejects, and returns the resolved value when complete.

LANGUAGE: tsx
CODE:
import { useAwaited } from '@tanstack/react-router'

function Component() {
  const { deferredPromise } = route.useLoaderData()

  const data = useAwaited({ promise: myDeferredPromise })
  // ...
}

----------------------------------------

TITLE: Creating Layout Route with Outlet
DESCRIPTION: Example of creating a layout route that wraps child routes with additional components and structure using the Outlet component.

LANGUAGE: tsx
CODE:
import { Outlet, createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/app')({ 
  component: AppLayoutComponent,
})

function AppLayoutComponent() {
  return (
    <div>
      <h1>App Layout</h1>
      <Outlet />
    </div>
  )
}

----------------------------------------

TITLE: Using getRouteApi with TanStack Router in TypeScript/React
DESCRIPTION: Demonstrates how to use the getRouteApi function to create a route-specific API instance for accessing loader data in a Posts page component. The function returns a RouteApi instance that provides type-safe access to route-specific hooks.

LANGUAGE: tsx
CODE:
import { getRouteApi } from '@tanstack/react-router'

const routeApi = getRouteApi('/posts')

export function PostsPage() {
  const posts = routeApi.useLoaderData()
  // ...
}

----------------------------------------

TITLE: Defining Route Hierarchy in TanStack Router
DESCRIPTION: Example of a nested route hierarchy for a blog post URL structure in TanStack Router.

LANGUAGE: tsx
CODE:
├── blog
│   ├── posts
│   │   ├── $postId

----------------------------------------

TITLE: Implementing Conditional Navigation Hook
DESCRIPTION: Implementation of a useConditionalNavigate hook that uses ValidateNavigateOptions for type-safe navigation with enable/disable functionality.

LANGUAGE: tsx
CODE:
export interface UseConditionalNavigateResult {
  enable: () => void
  disable: () => void
  navigate: () => void
}

export function useConditionalNavigate<
  TRouter extends RegisteredRouter = RegisteredRouter,
  TOptions,
>(
  navigateOptions: ValidateNavigateOptions<TRouter, TOptions>,
): UseConditionalNavigateResult
export function useConditionalNavigate(
  navigateOptions: ValidateNavigateOptions,
): UseConditionalNavigateResult {
  const [enabled, setEnabled] = useState(false)
  const navigate = useNavigate()
  return {
    enable: () => setEnabled(true),
    disable: () => setEnabled(false),
    navigate: () => {
      if (enabled) {
        navigate(navigateOptions)
      }
    },
  }
}

----------------------------------------

TITLE: Implementing Devtools in Root Route
DESCRIPTION: Example showing how to integrate devtools within the root route component using RouterProvider.

LANGUAGE: tsx
CODE:
const rootRoute = createRootRoute({
  component: () => (
    <>
      <Outlet />
      <TanStackRouterDevtools />
    </>
  ),
})

const routeTree = rootRoute.addChildren([
  // ... other routes
])

const router = createRouter({
  routeTree,
})

function App() {
  return <RouterProvider router={router} />
}

----------------------------------------

TITLE: Defining Static Route Data in TanStack Router
DESCRIPTION: Demonstrates how to create a route with static data using createFileRoute. The example shows adding a customData property to the route's static data.

LANGUAGE: tsx
CODE:
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/posts')({\n  staticData: {\n    customData: 'Hello!',\n  },\n})

----------------------------------------

TITLE: Using notFound Function in TanStack Router Route Configuration
DESCRIPTION: Demonstrates how to use the notFound function in a route's loader to handle cases where a post or team is not found. It shows both throwing the error and returning it for different scopes of not-found handling.

LANGUAGE: tsx
CODE:
import { notFound, createFileRoute, rootRouteId } from '@tanstack/react-router'

const Route = new createFileRoute('/posts/$postId')({
  // throwing a not-found object
  loader: ({ context: { post } }) => {
    if (!post) {
      throw notFound()
    }
  },
  // or if you want to show a not-found on the whole page
  loader: ({ context: { team } }) => {
    if (!team) {
      throw notFound({ routeId: rootRouteId })
    }
  },
  // ... other route options
})

----------------------------------------

TITLE: Implementing useSearch Method in RouteApi for TanStack Router
DESCRIPTION: This method provides a type-safe version of the useSearch hook, pre-bound to a specific route ID. It allows for optional selection and structural sharing of the returned search data.

LANGUAGE: tsx
CODE:
  useSearch<TSelected = TFullSearchSchema>(opts?: {
    select?: (search: TFullSearchSchema) => TSelected
  }): TSelected

----------------------------------------

TITLE: Implementing Route Masking with Location State in TanStack Router
DESCRIPTION: This snippet demonstrates how route masking is implemented using the location.state API. It stores the desired runtime location inside the location that will be written to the URL under the __tempLocation state property.

LANGUAGE: tsx
CODE:
const location = {
  pathname: '/photos/5',
  search: '',
  hash: '',
  state: {
    key: 'wesdfs',
    __tempKey: 'sadfasd',
    __tempLocation: {
      pathname: '/photo/5/modal',
      search: '',
      hash: '',
      state: {},
    },
  },
}

----------------------------------------

TITLE: Using Middleware in Server Functions with TanStack Router
DESCRIPTION: This example shows how to apply middleware to a server function using the createServerFn function. It demonstrates the integration of logging middleware into a server function.

LANGUAGE: tsx
CODE:
import { createServerFn } from '@tanstack/react-start'
import { loggingMiddleware } from './middleware'

const fn = createServerFn()
  .middleware([loggingMiddleware])
  .handler(async () => {
    // ...
  })

----------------------------------------

TITLE: Creating a Root Route with Context in TanStack Router (TSX)
DESCRIPTION: This example demonstrates how to use the rootRouteWithContext function to create a root route that requires a context type. It shows the setup of a router with a QueryClient context.

LANGUAGE: tsx
CODE:
import { rootRouteWithContext, createRouter } from '@tanstack/react-router'
import { QueryClient } from '@tanstack/react-query'

interface MyRouterContext {
  queryClient: QueryClient
}

const rootRoute = rootRouteWithContext<MyRouterContext>()({
  component: () => <Outlet />,
  // ... root route options
})

const routeTree = rootRoute.addChildren([
  // ... other routes
])

const queryClient = new QueryClient()

const router = createRouter({
  routeTree,
  context: {
    queryClient,
  },
})

----------------------------------------

TITLE: Creating Mantine Custom Link Component
DESCRIPTION: Implementation of a custom link component using Mantine's Anchor component with TanStack Router integration.

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { createLink, LinkComponent } from '@tanstack/react-router'
import { Anchor, AnchorProps } from '@mantine/core'

interface MantineAnchorProps extends Omit<AnchorProps, 'href'> {
  // Add any additional props you want to pass to the anchor
}

const MantineLinkComponent = React.forwardRef<
  HTMLAnchorElement,
  MantineAnchorProps
>((props, ref) => {
  return <Anchor ref={ref} {...props} />
})

const CreatedLinkComponent = createLink(MantineLinkComponent)

export const CustomLink: LinkComponent<typeof MantineLinkComponent> = (
  props,
) => {
  return <CreatedLinkComponent preload="intent" {...props} />
}

----------------------------------------

TITLE: Fine-grained Selector Usage in TanStack Router
DESCRIPTION: Shows how to use selective search parameter subscription to prevent unnecessary re-renders when other parameters change.

LANGUAGE: tsx
CODE:
const foo = Route.useSearch({ select: ({ foo }) => foo })

----------------------------------------

TITLE: Rendering Child Routes with TanStack Router Outlet Component
DESCRIPTION: The Outlet component is a special component in TanStack Router that renders the matched child route of a parent route. It doesn't accept any props and returns either the matched child route's component (including error, pending, or not found components) or null if no match is found.

LANGUAGE: jsx
CODE:
<Outlet />

----------------------------------------

TITLE: Integrating React Aria Components with TanStack Router Link
DESCRIPTION: Custom implementation of a link component using React Aria's useLink hook with TanStack Router. Includes support for hover, focus, and press states.

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { createLink, LinkComponent } from '@tanstack/react-router'
import {
  mergeProps,
  useFocusRing,
  useHover,
  useLink,
  useObjectRef,
} from 'react-aria'
import type { AriaLinkOptions } from 'react-aria'

interface RACLinkProps extends Omit<AriaLinkOptions, 'href'> {
  children?: React.ReactNode
}

const RACLinkComponent = React.forwardRef<HTMLAnchorElement, RACLinkProps>(
  (props, forwardedRef) => {
    const ref = useObjectRef(forwardedRef)

    const { isPressed, linkProps } = useLink(props, ref)
    const { isHovered, hoverProps } = useHover(props)
    const { isFocusVisible, isFocused, focusProps } = useFocusRing(props)

    return (
      <a
        {...mergeProps(linkProps, hoverProps, focusProps, props)}
        ref={ref}
        data-hovered={isHovered || undefined}
        data-pressed={isPressed || undefined}
        data-focus-visible={isFocusVisible || undefined}
        data-focused={isFocused || undefined}
      />
    )
  },
)

const CreatedLinkComponent = createLink(RACLinkComponent)

export const CustomLink: LinkComponent<typeof RACLinkComponent> = (props) => {
  return <CreatedLinkComponent preload={'intent'} {...props} />
}

----------------------------------------

TITLE: Subscribing to Router Events in TanStack Router
DESCRIPTION: This example demonstrates how to create a router instance and subscribe to the 'onResolved' event using the TanStack Router library. It shows the basic setup for handling router events.

LANGUAGE: tsx
CODE:
import { createRouter } from '@tanstack/react-router'
import { routeTree } from './routeTree.gen'

const router = createRouter({ routeTree })

const unsub = router.subscribe('onResolved', (evt) => {
  // ...
})

----------------------------------------

TITLE: Configuring Allowed Characters for Path Params in TanStack Router (TypeScript)
DESCRIPTION: This code shows how to configure the router to allow specific characters in path parameters, such as '@' or '+', using the pathParamsAllowedCharacters option.

LANGUAGE: tsx
CODE:
const router = createRouter({
  ...
  pathParamsAllowedCharacters: ['@']
})

----------------------------------------

TITLE: Implementing Back Button with useCanGoBack in React
DESCRIPTION: Demonstrates how to implement a conditional back button using the useCanGoBack hook from TanStack Router. The component renders a back button only when navigation history is available, using router.history.back() for navigation.

LANGUAGE: tsx
CODE:
import { useRouter, useCanGoBack } from '@tanstack/react-router'

function Component() {
  const router = useRouter()
  const canGoBack = useCanGoBack()

  return (
    <div>
      {canGoBack ? (
        <button onClick={() => router.history.back()}>Go back</button>
      ) : null}

      {/* ... */}
    </div>
  )
}

----------------------------------------

TITLE: HeadContent Implementation for Single-Page Applications
DESCRIPTION: Demonstrates how to implement HeadContent component in a single-page application's root route.

LANGUAGE: tsx
CODE:
import { HeadContent } from '@tanstack/react-router'\n\nconst rootRoute = createRoute({\n  component: () => (\n    <>\n      <HeadContent />\n      <Outlet />\n    </>\n  ),\n})

----------------------------------------

TITLE: Protected Dashboard Route Implementation
DESCRIPTION: Demonstrates how to protect a specific route (dashboard) using the beforeLoad hook with authentication context.

LANGUAGE: tsx
CODE:
export const Route = createFileRoute('/dashboard')({
  beforeLoad: ({ context, location }) => {
    if (!context.auth.isAuthenticated) {
      throw redirect({
        to: '/login',
        search: {
          redirect: location.href,
        },
      })
    }
  },
})

----------------------------------------

TITLE: Defining ToOptions Interface in TypeScript
DESCRIPTION: Core interface used across all navigation and route matching APIs in TanStack Router. Defines options for route paths, parameters, search queries, and state management.

LANGUAGE: typescript
CODE:
type ToOptions<
  TRouteTree extends AnyRoute = AnyRoute,
  TFrom extends RoutePaths<TRouteTree> | string = string,
  TTo extends string = '',
> = {
  from: string
  to: string
  params:
    | Record<string, unknown>
    | ((prevParams: Record<string, unknown>) => Record<string, unknown>)
  search:
    | Record<string, unknown>
    | ((prevSearch: Record<string, unknown>) => Record<string, unknown>)
  hash?: string | ((prevHash: string) => string)
  state?:
    | Record<string, any>
    | ((prevState: Record<string, unknown>) => Record<string, unknown>)
}

----------------------------------------

TITLE: Basic Usage of useBlocker Hook in React
DESCRIPTION: This example demonstrates the basic usage of the useBlocker hook in a React component. It blocks navigation when a form is dirty.

LANGUAGE: tsx
CODE:
import { useBlocker } from '@tanstack/react-router'

function MyComponent() {
  const [formIsDirty, setFormIsDirty] = useState(false)

  useBlocker({
    shouldBlockFn: () => formIsDirty,
  })

  // ...
}

----------------------------------------

TITLE: Using redirect Function in TanStack Router Route Configuration
DESCRIPTION: Demonstrates two ways of using the redirect function in a route loader: throwing a redirect object manually and using the throw option in the redirect function. Both examples check for user authentication and redirect to a login page if the user is not authenticated.

LANGUAGE: tsx
CODE:
import { redirect } from '@tanstack/react-router'

const route = createRoute({
  // throwing a redirect object
  loader: () => {
    if (!user) {
      throw redirect({
        to: '/login',
      })
    }
  },
  // or forcing `redirect` to throw itself
  loader: () => {
    if (!user) {
      redirect({
        to: '/login',
        throw: true,
      })
    }
  },
  // ... other route options
})

----------------------------------------

TITLE: Defining MatchRouteOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for MatchRouteOptions that specifies configuration options for route matching. It includes boolean flags for pending state, case sensitivity, search parameter inclusion, and fuzzy matching behavior.

LANGUAGE: tsx
CODE:
interface MatchRouteOptions {
  pending?: boolean
  caseSensitive?: boolean
  includeSearch?: boolean
  fuzzy?: boolean
}

----------------------------------------

TITLE: Customizing Scroll Restoration Cache Keys in TanStack Router
DESCRIPTION: Demonstrates how to customize the cache key used for scroll positions, allowing for more control over scroll restoration behavior based on different conditions.

LANGUAGE: tsx
CODE:
import { createRouter } from '@tanstack/react-router'

const router = createRouter({
  getScrollRestorationKey: (location) => {
    const paths = ['/', '/chat']
    return paths.includes(location.pathname)
      ? location.pathname
      : location.state.key!
  },
})

----------------------------------------

TITLE: Conditional Blocking with useBlocker Hook in React
DESCRIPTION: This example demonstrates conditional blocking using the useBlocker hook. It blocks navigation except when navigating to paths containing 'step/'.

LANGUAGE: tsx
CODE:
import { useBlocker } from '@tanstack/react-router'

function MyComponent() {
  const { proceed, reset, status } = useBlocker({
    shouldBlockFn: ({ next }) => {
      return !next.pathname.includes('step/')
    },
    withResolver: true,
  })

  // ...

  return (
    <>
      {/* ... */}
      {status === 'blocked' && (
        <div>
          <p>Are you sure you want to leave?</p>
          <button onClick={proceed}>Yes</button>
          <button onClick={reset}>No</button>
        </div>
      )}
    </>
  )
}

----------------------------------------

TITLE: Defining UseMatchRouteOptions Type in TypeScript for tanstack-router
DESCRIPTION: This code snippet defines the UseMatchRouteOptions type by extending ToOptions and incorporating MatchRouteOptions. It is used to specify additional options for the useMatchRoute hook in the tanstack-router project.

LANGUAGE: tsx
CODE:
export type UseMatchRouteOptions = ToOptions & MatchRouteOptions

----------------------------------------

TITLE: Creating Route with Component and Loader
DESCRIPTION: Shows how to create a route with a component and loader configuration, including dynamic parameter handling.

LANGUAGE: tsx
CODE:
const postIdRoute = createRoute({
  getParentRoute: () => postsRoute,
  path: '$postId',
  loader: ({ params }) => fetchPost(params.postId),
  component: PostComponent,
})

function PostComponent() {
  const { postId } = postIdRoute.useParams()
  return <div>Post ID: {postId}</div>
}

----------------------------------------

TITLE: Implementing Default Search Param Behavior in TanStack Router
DESCRIPTION: Shows how to implement the default search parameter parsing and stringifying behavior using JSON methods.

LANGUAGE: tsx
CODE:
import {
  createRouter,
  parseSearchWith,
  stringifySearchWith,
} from '@tanstack/react-router'

const router = createRouter({
  // ...
  parseSearch: parseSearchWith(JSON.parse),
  stringifySearch: stringifySearchWith(JSON.stringify),
})

----------------------------------------

TITLE: Retaining Specific Search Parameters with TanStack Router in TSX
DESCRIPTION: Example demonstrating how to retain specific search parameters using the retainSearchParams middleware in a root route. Uses Zod for search parameter validation and specifies retention of 'rootValue' parameter.

LANGUAGE: tsx
CODE:
import { z } from 'zod'
import { createRootRoute, retainSearchParams } from '@tanstack/react-router'
import { zodValidator } from '@tanstack/zod-adapter'

const searchSchema = z.object({
  rootValue: z.string().optional(),
})

export const Route = createRootRoute({
  validateSearch: zodValidator(searchSchema),
  search: {
    middlewares: [retainSearchParams(['rootValue'])],
  },
})

----------------------------------------

TITLE: Virtual Subtree Configuration
DESCRIPTION: Example of defining virtual routes for a specific subtree using defineVirtualSubtreeConfig.

LANGUAGE: tsx
CODE:
import {
  defineVirtualSubtreeConfig,
  index,
  route,
} from '@tanstack/virtual-file-routes'

export default defineVirtualSubtreeConfig([
  index('home.tsx'),
  route('$id', 'details.tsx'),
])

----------------------------------------

TITLE: Search Param Validation with TypeScript
DESCRIPTION: Shows how to validate and type search parameters using TypeScript and the validateSearch route option.

LANGUAGE: tsx
CODE:
type ProductSearchSortOptions = 'newest' | 'oldest' | 'price'

type ProductSearch = {
  page: number
  filter: string
  sort: ProductSearchSortOptions
}

export const Route = createFileRoute('/shop/products')({
  validateSearch: (search: Record<string, unknown>): ProductSearch => {
    return {
      page: Number(search?.page ?? 1),
      filter: (search.filter as string) || '',
      sort: (search.sort as ProductSearchSortOptions) || 'newest',
    }
  },
})

----------------------------------------

TITLE: Invalidating Router Context in React Component
DESCRIPTION: Demonstrates how to invalidate the router context within a React component, specifically in an authentication use case where the user state changes.

LANGUAGE: tsx
CODE:
function useAuth() {
  const router = useRouter()
  const [user, setUser] = useState<User | null>(null)

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged((user) => {
      setUser(user)
      router.invalidate()
    })

    return unsubscribe
  }, [])

  return user
}

----------------------------------------

TITLE: Configuring Router with Custom InnerWrap Component in TypeScript
DESCRIPTION: Example of creating a router instance with a custom InnerWrap component to provide context to the inner contents of the router. This demonstrates how to use the InnerWrap property in RouterOptions.

LANGUAGE: tsx
CODE:
import { createRouter } from '@tanstack/react-router'

const router = createRouter({
  // ...
  InnerWrap: ({ children }) => {
    const routerState = useRouterState()

    return (
      <MyContext.Provider value={myContext}>
        {children}
      </MyContext>
    )
  },
})

----------------------------------------

TITLE: Displaying Unsorted Route Tree in TanStack Router
DESCRIPTION: This code snippet shows an example of an unsorted route tree in TanStack Router. It includes various route types such as index, static, dynamic, and splat/wildcard routes.

LANGUAGE: plaintext
CODE:
Root
  - blog
    - $postId
    - /
    - new
  - /
  - *
  - about
  - about/us

----------------------------------------

TITLE: Configuring Vite Plugin for TanStack Router
DESCRIPTION: Configuration setup for the Vite plugin to enable TanStack Router with React support and auto code splitting.

LANGUAGE: tsx
CODE:
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { TanStackRouterVite } from '@tanstack/router-plugin/vite'

export default defineConfig({
  plugins: [
    TanStackRouterVite({ target: 'react', autoCodeSplitting: true }),
    react(),
  ],
})

----------------------------------------

TITLE: VSCode Settings for Route Tree
DESCRIPTION: VSCode settings to manage the generated route tree file, including read-only status and exclusion from search and file watching

LANGUAGE: json
CODE:
{
  "files.readonlyInclude": {
    "**/routeTree.gen.ts": true
  },
  "files.watcherExclude": {
    "**/routeTree.gen.ts": true
  },
  "search.exclude": {
    "**/routeTree.gen.ts": true
  }
}

----------------------------------------

TITLE: Configuring Link Options with TypeScript in TanStack Router
DESCRIPTION: Demonstrates how to use linkOptions to create a type-checked configuration object for Link components. The example shows setting up route parameters and search queries for a user dashboard link.

LANGUAGE: tsx
CODE:
const userLinkOptions = linkOptions({
  to: '/dashboard/users/user',
  search: {
    usersView: {
      sortBy: 'email',
      filterBy: 'filter',
    },
    userId: 0,
  },
})

function DashboardComponent() {
  return <Link {...userLinkOptions} />
}

----------------------------------------

TITLE: Using useParentMatches Hook in React with TanStack Router
DESCRIPTION: Example demonstrating how to use the useParentMatches hook to access parent route matches in a React component. The hook returns an array of RouteMatch objects representing the parent routes from root to immediate parent.

LANGUAGE: tsx
CODE:
import { useParentMatches } from '@tanstack/react-router'

function Component() {
  const parentMatches = useParentMatches()
  //    ^ [RouteMatch, RouteMatch, ...]
}

----------------------------------------

TITLE: Installing TanStack Router Plugin
DESCRIPTION: Command to install the TanStack Router plugin package for Webpack integration

LANGUAGE: sh
CODE:
npm install -D @tanstack/router-plugin

----------------------------------------

TITLE: Creating Basic Custom Link Component with TanStack Router
DESCRIPTION: Implementation of a basic custom link component using createLink utility. The component extends React's anchor element attributes and adds custom styling.

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { createLink, LinkComponent } from '@tanstack/react-router'

interface BasicLinkProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {
  // Add any additional props you want to pass to the anchor element
}

const BasicLinkComponent = React.forwardRef<HTMLAnchorElement, BasicLinkProps>(
  (props, ref) => {
    return (
      <a ref={ref} {...props} className={'block px-3 py-2 text-blue-700'} />
    )
  },
)

const CreatedLinkComponent = createLink(BasicLinkComponent)

export const CustomLink: LinkComponent<typeof BasicLinkComponent> = (props) => {
  return <CreatedLinkComponent preload={'intent'} {...props} />
}

----------------------------------------

TITLE: Configuring Custom Data Serializer for SSR
DESCRIPTION: This code demonstrates how to set up a custom data serializer (SuperJSON in this example) for handling complex data types during SSR serialization and deserialization.

LANGUAGE: tsx
CODE:
import { SuperJSON } from 'superjson'

const router = createRouter({
  serializer: SuperJSON,
})

----------------------------------------

TITLE: Defining createLazyRoute Return Type in TypeScript
DESCRIPTION: This snippet shows the TypeScript type definition for the function returned by createLazyRoute. It specifies which route options can be configured for lazy routes.

LANGUAGE: typescript
CODE:
Pick<
  RouteOptions,
  'component' | 'pendingComponent' | 'errorComponent' | 'notFoundComponent'
>

----------------------------------------

TITLE: Stripping Default Search Params in TanStack Router
DESCRIPTION: Example showing how to strip default search parameter values using an object that matches the schema defaults. Uses Zod for validation and defines default values for 'one' and 'two' parameters.

LANGUAGE: tsx
CODE:
import { z } from 'zod'
import { createFileRoute, stripSearchParams } from '@tanstack/react-router'
import { zodValidator } from '@tanstack/zod-adapter'

const defaultValues = {
  one: 'abc',
  two: 'xyz',
}

const searchSchema = z.object({
  one: z.string().default(defaultValues.one),
  two: z.string().default(defaultValues.two),
})

export const Route = createFileRoute('/hello')({
  validateSearch: zodValidator(searchSchema),
  search: {
    // strip default values
    middlewares: [stripSearchParams(defaultValues)],
  },
})

----------------------------------------

TITLE: Checking Route Rendering with useMatch Hook in TypeScript React
DESCRIPTION: This example demonstrates how to use the useMatch hook to check if a specific route is currently rendered. It uses the 'shouldThrow' option set to false to handle cases where the route might not be rendered.

LANGUAGE: tsx
CODE:
import { useMatch } from '@tanstack/react-router'

function Component() {
  const match = useMatch({ from: '/posts', shouldThrow: false })
  //     ^? RouteMatch | undefined
  if (match !== undefined) {
    // ...
  }
}

----------------------------------------

TITLE: Installing TanStack Router Plugin for Rspack
DESCRIPTION: Command to install the @tanstack/router-plugin package using npm.

LANGUAGE: sh
CODE:
npm install -D @tanstack/router-plugin

----------------------------------------

TITLE: Navigate Component Type Definition - TanStack Router TypeScript
DESCRIPTION: The Navigate component accepts NavigateOptions as props and returns null. It triggers navigation effects when rendered through a useEffect hook.

LANGUAGE: typescript
CODE:
interface NavigateProps extends NavigateOptions {
  // Extends NavigateOptions type
}

Navigate: React.FC<NavigateProps> // Returns null

----------------------------------------

TITLE: Installing TanStack Router CLI
DESCRIPTION: Command to install the TanStack Router CLI package as a development dependency.

LANGUAGE: sh
CODE:
npm install -D @tanstack/router-cli

----------------------------------------

TITLE: Configuring Package.json Scripts
DESCRIPTION: Script configurations in package.json for generating and watching routes using the TanStack Router CLI.

LANGUAGE: json
CODE:
{
  "scripts": {
    "generate-routes": "tsr generate",
    "watch-routes": "tsr watch",
    "build": "npm run generate-routes && ...",
    "dev": "npm run watch-routes && ..."
  }
}

----------------------------------------

TITLE: Using useLocation Hook in React with TanStack Router
DESCRIPTION: Demonstrates two ways to use the useLocation hook: getting the full location object and selecting specific properties using the select option. The hook returns either a ParsedLocation object or a selected value based on the provided selector function.

LANGUAGE: tsx
CODE:
import { useLocation } from '@tanstack/react-router'

function Component() {
  const location = useLocation()
  //    ^ ParsedLocation

  // OR

  const pathname = useLocation({
    select: (location) => location.pathname,
  })
  //    ^ string

  // ...
}

----------------------------------------

TITLE: VSCode Settings Configuration
DESCRIPTION: VSCode settings to handle the generated route tree file, including readonly status and exclusion from search and file watching.

LANGUAGE: json
CODE:
{
  "files.readonlyInclude": {
    "**/routeTree.gen.ts": true
  },
  "files.watcherExclude": {
    "**/routeTree.gen.ts": true
  },
  "search.exclude": {
    "**/routeTree.gen.ts": true
  }
}

----------------------------------------

TITLE: Using Mutation Keys for State Management in TypeScript React
DESCRIPTION: This example illustrates the use of mutation keys to manage mutation state in relation to route changes. It demonstrates how to clear mutation state when a key (in this case, roomId) changes.

LANGUAGE: tsx
CODE:
const routeApi = getRouteApi('/posts/$postId/edit')

function EditPost() {
  const { roomId } = routeApi.useParams()

  const sendMessageMutation = useCoolMutation({
    fn: sendMessage,
    // Clear the mutation state when the roomId changes
    // including any submission state
    key: ['sendMessage', roomId],
  })

  // Fire off a bunch of messages
  const test = () => {
    sendMessageMutation.mutate({ roomId, message: 'Hello!' })
    sendMessageMutation.mutate({ roomId, message: 'How are you?' })
    sendMessageMutation.mutate({ roomId, message: 'Goodbye!' })
  }

  return (
    <>
      {sendMessageMutation.submissions.map((submission) => {
        return (
          <div>
            <div>{submission.status}</div>
            <div>{submission.message}</div>
          </div>
        )
      })}
    </>
  )
}

----------------------------------------

TITLE: Implementing Lazy Loading for TanStack Router in a Monorepo
DESCRIPTION: Each feature exports a createLazyRoute function that returns a lazy route. This lazy route is then used in the router map to bind the lazy route to the actual route, allowing libraries to define their components, pending, error, and not found components directly.

LANGUAGE: TypeScript
CODE:
// Example structure (not actual code)
export const createLazyRoute = () => ({
  component: lazy(() => import('./Component')),
  pendingComponent: LazyPending,
  errorComponent: LazyError,
  notFoundComponent: LazyNotFound,
});

----------------------------------------

TITLE: Server Entry Point Configuration
DESCRIPTION: Server-side entry point setup for SSR functionality.

LANGUAGE: tsx
CODE:
// app/ssr.tsx
import {
  createStartHandler,
  defaultStreamHandler,
} from '@tanstack/react-start/server'
import { getRouterManifest } from '@tanstack/react-start/router-manifest'

import { createRouter } from './router'

export default createStartHandler({
  createRouter,
  getRouterManifest,
})(defaultStreamHandler)

----------------------------------------

TITLE: Using useLoaderDeps Hook in React with TanStack Router
DESCRIPTION: Demonstrates three different ways to use the useLoaderDeps hook: direct path usage, route API usage, and with a select function for specific dependency selection.

LANGUAGE: tsx
CODE:
import { useLoaderDeps } from '@tanstack/react-router'

const routeApi = getRouteApi('/posts/$postId')

function Component() {
  const deps = useLoaderDeps({ from: '/posts/$postId' })

  // OR

  const routeDeps = routeApi.useLoaderDeps()

  // OR

  const postId = useLoaderDeps({
    from: '/posts',
    select: (deps) => deps.view,
  })

  // ...
}

----------------------------------------

TITLE: Initializing Memory History Router in TanStack
DESCRIPTION: Demonstrates how to create a memory history instance and initialize a router with it. Memory history keeps routing state in memory and accepts initial URL entries.

LANGUAGE: typescript
CODE:
import { createMemoryHistory, createRouter } from '@tanstack/react-router'

const memoryHistory = createMemoryHistory({
  initialEntries: ['/'], // Pass your initial url
})

const router = createRouter({ routeTree, history: memoryHistory })

----------------------------------------

TITLE: Installing React Dependencies
DESCRIPTION: Commands for installing React core and development dependencies.

LANGUAGE: shell
CODE:
npm i react react-dom @vitejs/plugin-react

LANGUAGE: shell
CODE:
npm i -D typescript @types/react @types/react-dom

----------------------------------------

TITLE: Defining ShouldBlockFn Types in TypeScript
DESCRIPTION: This snippet defines the TypeScript interfaces and types used for the shouldBlockFn option in the useBlocker hook. It includes ShouldBlockFnLocation and ShouldBlockFnArgs types.

LANGUAGE: typescript
CODE:
interface ShouldBlockFnLocation<...> {
  routeId: TRouteId
  fullPath: TFullPath
  pathname: string
  params: TAllParams
  search: TFullSearchSchema
}

type ShouldBlockFnArgs = {
  current: ShouldBlockFnLocation
  next: ShouldBlockFnLocation
  action: HistoryAction
}

----------------------------------------

TITLE: Implementing Lazy Route Components with TanStack Router in TypeScript
DESCRIPTION: Examples demonstrating how to create lazy-loaded route components using lazyRouteComponent function. Shows both default and named export implementations with dynamic imports.

LANGUAGE: tsx
CODE:
import { lazyRouteComponent } from '@tanstack/react-router'

const route = createRoute({
  path: '/posts/$postId',
  component: lazyRouteComponent(() => import('./Post')), // default export
})

// or

const route = createRoute({
  path: '/posts/$postId',
  component: lazyRouteComponent(
    () => import('./Post'),
    'PostByIdPageComponent', // named export
  ),
})

----------------------------------------

TITLE: TypeScript Configuration Setup
DESCRIPTION: Basic TypeScript configuration for React with JSX support and modern module settings.

LANGUAGE: jsonc
CODE:
{
  "compilerOptions": {
    "jsx": "react-jsx",
    "moduleResolution": "Bundler",
    "module": "Preserve",
    "target": "ES2022",
    "skipLibCheck": true,
  },
}

----------------------------------------

TITLE: Using getRouteApi for Route Access
DESCRIPTION: Example of accessing route APIs in separate files using the getRouteApi helper function.

LANGUAGE: typescript
CODE:
// my-route.tsx
import { createRoute } from '@tanstack/react-router'
import { MyComponent } from './MyComponent'

const route = createRoute({
  path: '/my-route',
  loader: () => ({
    foo: 'bar',
  }),
  component: MyComponent,
})

LANGUAGE: typescript
CODE:
// MyComponent.tsx
import { getRouteApi } from '@tanstack/react-router'

const route = getRouteApi('/my-route')

export function MyComponent() {
  const loaderData = route.useLoaderData()
  //    ^? { foo: string }

  return <div>...</div>
}

----------------------------------------

TITLE: Defining ParsedLocation Interface in TypeScript for TanStack Router
DESCRIPTION: This code snippet defines the ParsedLocation interface, which represents a parsed location in TanStack Router. It includes properties for URL components such as href, pathname, search params, hash, as well as location state and route masking information.

LANGUAGE: tsx
CODE:
interface ParsedLocation {
  href: string
  pathname: string
  search: TFullSearchSchema
  searchStr: string
  state: ParsedHistoryState
  hash: string
  maskedLocation?: ParsedLocation
  unmaskOnReload?: boolean
}

----------------------------------------

TITLE: Root Application Component
DESCRIPTION: Root component setup with head content and basic layout structure.

LANGUAGE: tsx
CODE:
// app/routes/__root.tsx
import { createRootRoute, HeadContent, Scripts } from '@tanstack/react-router'
import { Outlet } from '@tanstack/react-router'
import * as React from 'react'

export const Route = createRootRoute({
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      {
        title: 'TanStack Start Starter',
      },
    ],
  }),
  component: RootComponent,
})

function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  )
}

function RootDocument({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        {children}
        <Scripts />
      </body>
    </html>
  )
}

----------------------------------------

TITLE: useBlocker Hook Without Resolver in React
DESCRIPTION: This example shows how to use the useBlocker hook without a resolver, handling the blocking logic directly in the shouldBlockFn.

LANGUAGE: tsx
CODE:
import { useBlocker } from '@tanstack/react-router'

function MyComponent() {
  const [formIsDirty, setFormIsDirty] = useState(false)

  useBlocker({
    shouldBlockFn: ({ next }) => {
      if (next.pathname.includes('step/')) {
        return false
      }

      const shouldLeave = confirm('Are you sure you want to leave?')
      return !shouldLeave
    },
  })

  // ...
}

----------------------------------------

TITLE: Defining Redirect Type in TanStack Router
DESCRIPTION: Type definition for the Redirect object that represents a redirect action in TanStack Router. It extends NavigateOptions and includes optional properties for status code, throw behavior, and HTTP headers.

LANGUAGE: tsx
CODE:
export type Redirect = {
  statusCode?: number
  throw?: any
  headers?: HeadersInit
} & NavigateOptions

----------------------------------------

TITLE: Configuring TanStack Router in TypeScript
DESCRIPTION: Sets up the TanStack Router with scroll restoration and type declarations. This configuration is crucial for defining the routing behavior in a TanStack Start application.

LANGUAGE: tsx
CODE:
// app/router.tsx
import { createRouter as createTanStackRouter } from '@tanstack/react-router'
import { routeTree } from './routeTree.gen'

export function createRouter() {
  const router = createTanStackRouter({
    routeTree,
    scrollRestoration: true,
  })

  return router
}

declare module '@tanstack/react-router' {
  interface Register {
    router: ReturnType<typeof createRouter>
  }
}

----------------------------------------

TITLE: Rendering Default Not Found Component in TanStack Router (TSX)
DESCRIPTION: The DefaultGlobalNotFound component renders a simple 'Not Found' message as a paragraph element. It is used as the default fallback when no routes match and no custom notFoundComponent is specified in the TanStack Router configuration.

LANGUAGE: tsx
CODE:
<p>Not Found</p>

----------------------------------------

TITLE: Implementing Lazy Loading with .lazy.tsx Pattern
DESCRIPTION: Example of splitting a route into critical and non-critical configurations using the .lazy.tsx suffix pattern.

LANGUAGE: typescript
CODE:
// src/routes/posts.tsx
import { createFileRoute } from '@tanstack/react-router'
import { fetchPosts } from './api'

export const Route = createFileRoute('/posts')({
  loader: fetchPosts,
})

LANGUAGE: typescript
CODE:
// src/routes/posts.lazy.tsx
import { createLazyFileRoute } from '@tanstack/react-router'

export const Route = createLazyFileRoute('/posts')({
  component: Posts,
})

function Posts() {
  // ...
}

----------------------------------------

TITLE: Configuring SSR Handler in TanStack Router
DESCRIPTION: Creates a server-side rendering handler using TanStack Start. The handler is configured with a router creator and manifest generator, utilizing the defaultStreamHandler for streaming responses to the client.

LANGUAGE: tsx
CODE:
// app/ssr.tsx

import {
  createStartHandler,
  defaultStreamHandler,
} from '@tanstack/react-start/server'
import { getRouterManifest } from '@tanstack/react-start/router-manifest'

import { createRouter } from './router'

export default createStartHandler({
  createRouter,
  getRouterManifest,
})(defaultStreamHandler)

----------------------------------------

TITLE: Creating Link Options with Object Literal in TypeScript React
DESCRIPTION: This snippet shows an initial approach to creating link options using an object literal. However, this method lacks type safety and can lead to errors that are only detected when the options are used.

LANGUAGE: tsx
CODE:
const dashboardLinkOptions = {
  to: '/dashboard',
  search: { search: '' },
}

function DashboardComponent() {
  return <Link {...dashboardLinkOptions} />
}

----------------------------------------

TITLE: Creating and Using a Route Mask with createRouteMask in TypeScript React
DESCRIPTION: This example demonstrates how to create a route mask using the createRouteMask function and use it when setting up a Router instance. The mask is configured to transform a photo modal route to a photo detail route.

LANGUAGE: tsx
CODE:
import { createRouteMask, createRouter } from '@tanstack/react-router'

const photoModalToPhotoMask = createRouteMask({
  routeTree,
  from: '/photos/$photoId/modal',
  to: '/photos/$photoId',
  params: true,
})

// Set up a Router instance
const router = createRouter({
  routeTree,
  routeMasks: [photoModalToPhotoMask],
})

----------------------------------------

TITLE: Implementing Client-Side Middleware Logic in TanStack Router
DESCRIPTION: This example demonstrates how to create client-side middleware logic using the client method. It logs the request and response on the client side.

LANGUAGE: tsx
CODE:
const loggingMiddleware = createMiddleware().client(async ({ next }) => {
  console.log('Request sent')
  const result = await next()
  console.log('Response received')
  return result
})

----------------------------------------

TITLE: Defining NotFoundError Type in TypeScript
DESCRIPTION: Type definition for NotFoundError, which represents a not-found error in TanStack Router. The type includes optional properties for global handling, custom data, throwing behavior, and route identification.

LANGUAGE: typescript
CODE:
export type NotFoundError = {
  global?: boolean
  data?: any
  throw?: boolean
  routeId?: string
}

----------------------------------------

TITLE: Defining ToMaskOptions Type in TypeScript
DESCRIPTION: Defines a type that extends ToOptions to include additional masking options for routes. The unmaskOnReload property controls whether the route should be unmasked when the page reloads.

LANGUAGE: tsx
CODE:
type ToMaskOptions = ToOptions & {
  unmaskOnReload?: boolean
}

----------------------------------------

TITLE: Implementing Workspace Middleware with Zod Validation in TypeScript
DESCRIPTION: This snippet shows how to create middleware that validates input data using Zod. It demonstrates the use of the validator method to ensure the presence of a workspaceId.

LANGUAGE: tsx
CODE:
import { createMiddleware } from '@tanstack/react-start'
import { zodValidator } from '@tanstack/zod-adapter'
import { z } from 'zod'

const mySchema = z.object({
  workspaceId: z.string(),
})

const workspaceMiddleware = createMiddleware()
  .validator(zodValidator(mySchema))
  .server(({ next, data }) => {
    console.log('Workspace ID:', data.workspaceId)
    return next()
  })

----------------------------------------

TITLE: Defining NotFoundRoute Constructor Type in TypeScript
DESCRIPTION: This code snippet defines the type for the NotFoundRoute constructor options. It omits certain properties from the RouteOptions type.

LANGUAGE: tsx
CODE:
Omit<
  RouteOptions,
  | 'path'
  | 'id'
  | 'getParentRoute'
  | 'caseSensitive'
  | 'parseParams'
  | 'stringifyParams'
>

----------------------------------------

TITLE: Configuring Declarative Route Masking in TanStack Router
DESCRIPTION: This example demonstrates how to set up declarative route masking using the routeMasks option in the router configuration. It creates a mask for a photo modal route.

LANGUAGE: tsx
CODE:
import { createRouteMask } from '@tanstack/react-router'

const photoModalToPhotoMask = createRouteMask({
  routeTree,
  from: '/photos/$photoId/modal',
  to: '/photos/$photoId',
  params: (prev) => ({
    photoId: prev.photoId,
  }),
})

const router = createRouter({
  routeTree,
  routeMasks: [photoModalToPhotoMask],
})

----------------------------------------

TITLE: Implementing Wildcard Parameters in API Routes
DESCRIPTION: This example shows how to use wildcard parameters in API routes. It creates a route that captures any path after '/api/file/' and returns it in the response.

LANGUAGE: typescript
CODE:
// routes/api/file/$.ts
import { createAPIFileRoute } from '@tanstack/react-start/api'

export const APIRoute = createAPIFileRoute('/file/$')({
  GET: async ({ params }) => {
    const { _splat } = params
    return new Response(`File: ${_splat}`)
  },
})

----------------------------------------

TITLE: Per-hook Structural Sharing Configuration
DESCRIPTION: Demonstrates enabling structural sharing for individual hook usage rather than globally.

LANGUAGE: tsx
CODE:
const result = Route.useSearch({
  select: (search) => {
    return {
      foo: search.foo,
      hello: `hello ${search.foo}`,
    }
  },
  structuralSharing: true,
})

----------------------------------------

TITLE: Component-Based Navigation Blocking
DESCRIPTION: Shows how to implement navigation blocking using the Block component, with both basic confirmation and resolver pattern implementations.

LANGUAGE: tsx
CODE:
import { Block } from '@tanstack/solid-router'

function MyComponent() {
  const [formIsDirty, setFormIsDirty] = createSignal(false)

  return (
    <Block
      shouldBlockFn={() => {
        if (!formIsDirty()) return false

        const shouldLeave = confirm('Are you sure you want to leave?')
        return !shouldLeave
      }}
    />
  )

  // OR

  return (
    <Block shouldBlockFn={() => !formIsDirty} withResolver>
      {({ status, proceed, reset }) => <>{/* ... */}</>}
    </Block>
  )
}

----------------------------------------

TITLE: Setting Response Status Code in API Routes
DESCRIPTION: This example shows two methods to set the status code of the response in API routes: using the Response constructor and using the setResponseStatus helper function.

LANGUAGE: typescript
CODE:
// routes/api/hello.ts
import { json } from '@tanstack/react-start'
import { createAPIFileRoute } from '@tanstack/react-start/api'
import { setResponseStatus } from '@tanstack/react-start/server'

export const APIRoute = createAPIFileRoute('/users/$id')({
  GET: async ({ request, params }) => {
    const user = await findUser(params.id)
    if (!user) {
      setResponseStatus(404)
      return new Response('User not found')
    }
    return json(user)
  },
})

----------------------------------------

TITLE: Defining ParsedHistoryState Type in TypeScript
DESCRIPTION: Extends the base HistoryState type to include a unique key property and a mandatory __TSR_index number property. This type is used for internal state management in the TanStack Router to track route history and navigation.

LANGUAGE: typescript
CODE:
export type ParsedHistoryState = HistoryState & {
  key?: string
  __TSR_index: number
}

----------------------------------------

TITLE: Custom UI Hook-Based Blocking with Resolver
DESCRIPTION: Implements navigation blocking with a custom UI using the useBlocker hook and resolver pattern, providing a more controlled user experience.

LANGUAGE: tsx
CODE:
import { useBlocker } from '@tanstack/solid-router'

function MyComponent() {
  const [formIsDirty, setFormIsDirty] = createSignal(false)

  const { proceed, reset, status } = useBlocker({
    shouldBlockFn: () => formIsDirty(),
    withResolver: true,
  })

  // ...

  return (
    <>
      {/* ... */}
      {status === 'blocked' && (
        <div>
          <p>Are you sure you want to leave?</p>
          <button onClick={proceed}>Yes</button>
          <button onClick={reset}>No</button>
        </div>
      )}
    </>
}

----------------------------------------

TITLE: Building TanStack Router for Netlify Deployment
DESCRIPTION: Command to build a TanStack Router application for Netlify deployment using the --preset flag.

LANGUAGE: shell
CODE:
npm run build --preset netlify

----------------------------------------

TITLE: Defining Register Type in TanStack Router (TypeScript)
DESCRIPTION: This snippet shows the structure of the Register type used in TanStack Router. It's designed to hold the router type, which enables full type safety when used with the router instance.

LANGUAGE: tsx
CODE:
export type Register = {
  // router: [Your router type here]
}

----------------------------------------

TITLE: Custom UI Navigation Blocking with Hook without Resolver
DESCRIPTION: Demonstrates implementing custom UI blocking using modal management and Promises without a resolver pattern.

LANGUAGE: tsx
CODE:
import { useBlocker } from '@tanstack/react-router'

function MyComponent() {
  const [formIsDirty, setFormIsDirty] = useState(false)

  useBlocker({
    shouldBlockFn: () => {
      if (!formIsDirty) {
        return false
      }

      const shouldBlock = new Promise<boolean>((resolve) => {
        // Using a modal manager of your choice
        modals.open({
          title: 'Are you sure you want to leave?',
          children: (
            <SaveBlocker
              confirm={() => {
                modals.closeAll()
                resolve(false)
              }}
              reject={() => {
                modals.closeAll()
                resolve(true)
              }}
            />
          ),
          onClose: () => resolve(true),
        })
      })
      return shouldBlock
    },
  })

  // ...
}

----------------------------------------

TITLE: Configuring Cloudflare Pages Deployment in TanStack Router
DESCRIPTION: Sets the server preset to 'cloudflare-pages' and configures unenv in the app.config.ts file for deploying a TanStack Router application to Cloudflare Pages.

LANGUAGE: typescript
CODE:
// app.config.ts
import { defineConfig } from '@tanstack/react-start/config'
import { cloudflare } from 'unenv'

export default defineConfig({
  server: {
    preset: 'cloudflare-pages',
    unenv: cloudflare,
  },
})

----------------------------------------

TITLE: Custom UI with useBlocker Hook in React
DESCRIPTION: This example shows how to use the useBlocker hook with a custom UI for handling navigation blocking. It displays a confirmation dialog when navigation is blocked.

LANGUAGE: tsx
CODE:
import { useBlocker } from '@tanstack/react-router'

function MyComponent() {
  const [formIsDirty, setFormIsDirty] = useState(false)

  const { proceed, reset, status, next } = useBlocker({
    shouldBlockFn: () => formIsDirty,
    withResolver: true,
  })

  // ...

  return (
    <>
      {/* ... */}
      {status === 'blocked' && (
        <div>
          <p>You are navigating to {next.pathname}</p>
          <p>Are you sure you want to leave?</p>
          <button onClick={proceed}>Yes</button>
          <button onClick={reset}>No</button>
        </div>
      )}
    </>
}

----------------------------------------

TITLE: Installing TanStack Router Dependencies
DESCRIPTION: Command line instructions for installing TanStack Router core packages and devtools using various package managers

LANGUAGE: sh
CODE:
npm install @tanstack/solid-router
npm install -D @tanstack/router-plugin @tanstack/solid-router-devtools

----------------------------------------

TITLE: Accessing Request Context in Server Functions
DESCRIPTION: Demonstrates how to access the request context within a server function.

LANGUAGE: typescript
CODE:
import { createServerFn } from '@tanstack/react-start'
import { getWebRequest } from '@tanstack/react-start/server'

export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    const request = getWebRequest()

    console.log(request.method) // GET

    console.log(request.headers.get('User-Agent')) // Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3
  },
)

----------------------------------------

TITLE: Defining RouteMask Type Properties in TypeScript
DESCRIPTION: This snippet outlines the properties of the RouteMask type, which extends ToOptions and includes additional options for route masking. It specifies the required routeTree property and the optional unmaskOnReload property.

LANGUAGE: typescript
CODE:
type RouteMask = ToOptions & {
  options: {
    routeTree: TRouteTree;
    unmaskOnReload?: boolean;
  };
}

----------------------------------------

TITLE: Implementing Client-Side Entry Point
DESCRIPTION: Configures client-side hydration using StartClient component and router initialization.

LANGUAGE: tsx
CODE:
// app/client.tsx
/// <reference types="vinxi/types/client" />
import { hydrate } from 'solid-js/web'
import { StartClient } from '@tanstack/solid-start'
import { createRouter } from './router'

const router = createRouter()

hydrate(() => <StartClient router={router} />, document)

----------------------------------------

TITLE: Customizing Static Server Function Cache in TanStack Router
DESCRIPTION: Demonstrates how to create and set a custom static cache implementation for server functions. Includes methods for setting, getting, and fetching items from the cache.

LANGUAGE: tsx
CODE:
import {
  createServerFnStaticCache,
  setServerFnStaticCache,
} from '@tanstack/react-start/client'

const myCustomStaticCache = createServerFnStaticCache({
  setItem: async (ctx, data) => {
    // Store the static data in your custom cache
  },
  getItem: async (ctx) => {
    // Retrieve the static data from your custom cache
  },
  fetchItem: async (ctx) => {
    // During runtime, fetch the static data from your custom cache
  },
})

setServerFnStaticCache(myCustomStaticCache)

----------------------------------------

TITLE: Router navigate Type Definition
DESCRIPTION: TypeScript type definition for the navigate method that handles navigation to new locations.

LANGUAGE: tsx
CODE:
type navigate = (options: NavigateOptions) => Promise<void>

----------------------------------------

TITLE: Accessing a Route Match with useMatch Hook in TypeScript React
DESCRIPTION: This example demonstrates how to use the useMatch hook to access a route match for a specific route. It shows the basic usage of the hook with the 'from' option set to a route path.

LANGUAGE: tsx
CODE:
import { useMatch } from '@tanstack/react-router'

function Component() {
  const match = useMatch({ from: '/posts/$postId' })
  //     ^? strict match for RouteMatch
  // ...
}

----------------------------------------

TITLE: Configuring TanStack Router with React Query for External Data Loading
DESCRIPTION: This snippet demonstrates how to set up TanStack Router with React Query for external data loading. It shows the creation of a QueryClient, wrapping the app with QueryClientProvider, and defining routes with loaders that use React Query.

LANGUAGE: javascript
CODE:
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ReactRouter, Outlet, Link } from '@tanstack/react-router'

// Create a client
const queryClient = new QueryClient()

const rootRoute = new RootRoute({
  component: () => (
    <>
      <div>
        <Link to="/">Home</Link> <Link to="/about">About</Link>
      </div>
      <hr />
      <Outlet />
    </>
  ),
})

const indexRoute = new Route({
  getParentRoute: () => rootRoute,
  path: '/',
  loader: ({ context: { queryClient } }) =>
    queryClient.ensureQueryData(['posts']),
  component: () => {
    const postsQuery = useQuery(['posts'])
    return (
      <div>
        {postsQuery.data.map((post) => (
          <div key={post.id}>{post.title}</div>
        ))}
      </div>
    )
  },
})

const routeTree = rootRoute.addChildren([indexRoute])

const router = new ReactRouter({ routeTree })

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <RouterProvider router={router} />
    </QueryClientProvider>
  )
}

----------------------------------------

TITLE: Client Entry Point Setup
DESCRIPTION: Client-side entry point configuration for hydration.

LANGUAGE: tsx
CODE:
// app/client.tsx
import { hydrateRoot } from 'react-dom/client'
import { StartClient } from '@tanstack/react-start'
import { createRouter } from './router'

const router = createRouter({
  scrollRestoration: true,
})

hydrateRoot(document!, <StartClient router={router} />)

----------------------------------------

TITLE: Injecting TanStack Server Functions Plugin into Vite Config
DESCRIPTION: Demonstrates how to inject the TanStack Server Functions Plugin into the appropriate Vite config plugin arrays for client, SSR, and server environments.

LANGUAGE: typescript
CODE:
clientVitePlugins: [TanStackServerFnsPlugin.client]
ssrVitePlugins: [TanStackServerFnsPlugin.ssr]
serverVitePlugins: [TanStackServerFnsPlugin.server]

----------------------------------------

TITLE: Using TanStack Router's useLoader Hook with React Query
DESCRIPTION: This snippet shows how to use TanStack Router's useLoader hook in combination with React Query. It demonstrates fetching data in a loader function and accessing it in the component using useLoader.

LANGUAGE: jsx
CODE:
const postsRoute = new Route({
  getParentRoute: () => rootRoute,
  path: 'posts',
  loader: ({ context: { queryClient } }) =>
    queryClient.ensureQueryData(['posts']),
  component: Posts,
})

function Posts() {
  const postsQuery = useLoader()

  return (
    <div>
      {postsQuery.data.map((post) => (
        <div key={post.id}>{post.title}</div>
      ))}
    </div>
  )
}

----------------------------------------

TITLE: Optional Static Data Type Definition
DESCRIPTION: Shows how to define optional static data types using TypeScript. Makes the customData property optional in the StaticDataRouteOption interface.

LANGUAGE: tsx
CODE:
declare module '@tanstack/react-router' {
  interface StaticDataRouteOption {
    customData?: string
  }
}

----------------------------------------

TITLE: Configuring Bun Server Deployment in TanStack Start
DESCRIPTION: Configuration and deployment steps for running a TanStack Start application on a Bun server

LANGUAGE: shell
CODE:
npm install solid-js

LANGUAGE: typescript
CODE:
// app.config.ts
import { defineConfig } from '@tanstack/solid-start/config'

export default defineConfig({
  server: {
    preset: 'bun',
  },
})

LANGUAGE: shell
CODE:
bun run build
bun run .output/server/index.mjs

----------------------------------------

TITLE: Markdown Configuration for Documentation
DESCRIPTION: YAML-style frontmatter configuration block that specifies the documentation reference path and replacement instructions

LANGUAGE: markdown
CODE:
---
ref: docs/router/framework/react/guide/not-found-errors.md
replace: { 'react-router': 'solid-router' }
---

----------------------------------------

TITLE: Using query-string Library for Search Param Serialization
DESCRIPTION: Shows how to integrate the query-string library for custom search parameter parsing and stringifying in TanStack Router.

LANGUAGE: tsx
CODE:
import { createRouter } from '@tanstack/react-router'
import qs from 'query-string'

const router = createRouter({
  // ...
  stringifySearch: stringifySearchWith((value) =>
    qs.stringify(value, {
      // ...options
    }),
  ),
  parseSearch: parseSearchWith((value) =>
    qs.parse(value, {
      // ...options
    }),
  ),
})

----------------------------------------

TITLE: Implementing Type-Safe Fetch with Redirect
DESCRIPTION: Implementation of a fetchOrRedirect function that uses ValidateRedirectOptions for type-safe redirect handling when a fetch request fails.

LANGUAGE: tsx
CODE:
export async function fetchOrRedirect<
  TRouter extends RegisteredRouter = RegisteredRouter,
  TOptions,
>(
  url: string,
  redirectOptions: ValidateRedirectOptions<TRouter, TOptions>,
): Promise<unknown>
export async function fetchOrRedirect(
  url: string,
  redirectOptions: ValidateRedirectOptions,
): Promise<unknown> {
  const response = await fetch(url)

  if (!response.ok && response.status === 401) {
    throw redirect(redirectOptions)
  }

  return await response.json()
}

----------------------------------------

TITLE: Setting Solid.js as Target in TanStack Router Configuration
DESCRIPTION: This snippet demonstrates how to configure TanStack Router to use Solid.js as the target framework. It sets the 'target' property to 'solid' in the tsr.config.json file.

LANGUAGE: json
CODE:
{
  "target": "solid"
}

----------------------------------------

TITLE: Passing Initial Router Context in TanStack Router
DESCRIPTION: Shows how to pass the initial router context when creating the router. This example includes passing a user object as part of the context.

LANGUAGE: tsx
CODE:
import { createRouter } from '@tanstack/react-router'

// Use the routerContext you created to create your router
const router = createRouter({
  routeTree,
  context: {
    user: {
      id: '123',
      name: 'John Doe',
    },
  },
})

----------------------------------------

TITLE: Configuring Cloudflare Pages Deployment in TanStack Start
DESCRIPTION: Configuration setup for deploying to Cloudflare Pages, including necessary unenv installation and wrangler.toml configuration

LANGUAGE: shell
CODE:
npm install unenv

LANGUAGE: typescript
CODE:
// app.config.ts
import { defineConfig } from '@tanstack/solid-start/config'
import { cloudflare } from 'unenv'

export default defineConfig({
  server: {
    preset: 'cloudflare-pages',
    unenv: cloudflare,
  },
})

LANGUAGE: toml
CODE:
# wrangler.toml
name = "your-cloudflare-project-name"
pages_build_output_dir = "./dist"
compatibility_flags = ["nodejs_compat"]
compatibility_date = "2024-11-13"

----------------------------------------

TITLE: Configuring Vite with TanStack Router Plugin
DESCRIPTION: Configuration setup for Vite to enable TanStack Router with Solid.js support and automatic code splitting.

LANGUAGE: typescript
CODE:
// vite.config.ts
import { defineConfig } from 'vite'
import solid from 'vite-plugin-solid'
import { TanStackRouterVite } from '@tanstack/router-plugin/vite'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    TanStackRouterVite({ target: 'solid', autoCodeSplitting: true }),
    solid(),
    // ...
  ],
})

----------------------------------------

TITLE: Creating an Array of Link Options with linkOptions Function in TypeScript React
DESCRIPTION: This snippet shows how to use the `linkOptions` function to create an array of type-safe link options. It's useful for scenarios like constructing a navigation bar by looping over an array of options.

LANGUAGE: tsx
CODE:
const options = linkOptions([
  {
    to: '/dashboard',
    label: 'Summary',
    activeOptions: { exact: true },
  },
  {
    to: '/dashboard/invoices',
    label: 'Invoices',
  },
  {
    to: '/dashboard/users',
    label: 'Users',
  },
])

function DashboardComponent() {
  return (
    <>
      <div className="flex items-center border-b">
        <h2 className="text-xl p-2">Dashboard</h2>
      </div>

      <div className="flex flex-wrap divide-x">
        {options.map((option) => {
          return (
            <Link
              {...option}
              key={option.to}
              activeProps={{ className: `font-bold` }}
              className="p-2"
            >
              {option.label}
            </Link>
          )
        })}
      </div>
      <hr />

      <Outlet />
    </>
  )
}

----------------------------------------

TITLE: Installing Dependencies for TanStack Router Example (npm/yarn)
DESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.

LANGUAGE: markdown
CODE:
- `npm install` or `yarn`

----------------------------------------

TITLE: Configuring Custom Flat Config in ESLint 9.0+
DESCRIPTION: Custom configuration setup using the flat config format, allowing specific rule selection.

LANGUAGE: javascript
CODE:
// eslint.config.js
import pluginRouter from '@tanstack/eslint-plugin-router'

export default [
  {
    plugins: {
      '@tanstack/router': pluginRouter,
    },
    rules: {
      '@tanstack/router/create-route-property-order': 'error',
    },
  },
  // Any other config...
]

----------------------------------------

TITLE: Installing and Running TanStack Router Example
DESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install
npm start

LANGUAGE: bash
CODE:
yarn
yarn start

----------------------------------------

TITLE: Implementing Type-Safe Header Link Component in TypeScript
DESCRIPTION: Implementation of a HeadingLink component that uses ValidateLinkOptions for type-safe link option validation. The component combines a heading with a navigation link.

LANGUAGE: tsx
CODE:
export interface HeaderLinkProps<
  TRouter extends RegisteredRouter = RegisteredRouter,
  TOptions = unknown,
> {
  title: string
  linkOptions: ValidateLinkOptions<TRouter, TOptions>
}

export function HeadingLink<TRouter extends RegisteredRouter, TOptions>(
  props: HeaderLinkProps<TRouter, TOptions>,
): React.ReactNode
export function HeadingLink(props: HeaderLinkProps): React.ReactNode {
  return (
    <>
      <h1>{props.title}</h1>
      <Link {...props.linkOptions} />
    </>
  )
}

----------------------------------------

TITLE: Installing TanStack Router Devtools
DESCRIPTION: Different package manager commands to install the TanStack Router devtools as a development dependency.

LANGUAGE: sh
CODE:
npm install -D @tanstack/react-router-devtools

LANGUAGE: sh
CODE:
pnpm add -D @tanstack/react-router-devtools

LANGUAGE: sh
CODE:
yarn add -D @tanstack/react-router-devtools

LANGUAGE: sh
CODE:
bun add -D @tanstack/react-router-devtools

----------------------------------------

TITLE: Starting the Example Project
DESCRIPTION: Commands for starting the example project using either npm or yarn package manager.

LANGUAGE: shell
CODE:
npm start

LANGUAGE: shell
CODE:
yarn start

----------------------------------------

TITLE: Generating Page Title from Accumulated Route Context
DESCRIPTION: Shows how to use accumulated route context to generate a dynamic page title in the root route component.

LANGUAGE: tsx
CODE:
// src/routes/__root.tsx
export const Route = createRootRoute({
  component: () => {
    const matches = useRouterState({ select: (s) => s.matches })

    const matchWithTitle = [...matches]
      .reverse()
      .find((d) => d.context.getTitle)

    const title = matchWithTitle?.context.getTitle() || 'My App'

    return (
      <html>
        <head>
          <title>{title}</title>
        </head>
        <body>{/* ... */}</body>
      </html>
    )
  },
})

----------------------------------------

TITLE: Installing and Running TanStack Router in Development Mode
DESCRIPTION: Commands to install dependencies and start the TanStack Router app in development mode. This process rebuilds assets on file changes.

LANGUAGE: sh
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Framework Reference Replacement Configuration
DESCRIPTION: YAML-style frontmatter configuration that specifies file reference and replacement mapping for framework documentation.

LANGUAGE: markdown
CODE:
---
ref: docs/start/framework/react/middleware.md
replace: { 'react': 'solid' }
---

----------------------------------------

TITLE: Setting Up and Running TanStack.com Locally
DESCRIPTION: Commands to navigate to the TanStack.com directory, install dependencies, and run the app in development mode. The app will run on https://localhost:3000 by default.

LANGUAGE: sh
CODE:
cd tanstack.com
pnpm i
# The app will run on https://localhost:3000 by default
pnpm dev

----------------------------------------

TITLE: Disabling Built-in Caching for External Library Integration in TanStack Router
DESCRIPTION: This snippet shows how to disable TanStack Router's built-in caching to allow integration with external caching libraries like React Query.

LANGUAGE: tsx
CODE:
import { createRouter } from '@tanstack/react-router'

const router = createRouter({
  // ...
  defaultPreloadStaleTime: 0,
})

----------------------------------------

TITLE: Cloning TanStack Repositories
DESCRIPTION: Commands to navigate to the 'tanstack' directory and clone the TanStack.com website repository and a specific project repository (in this case, TanStack Form).

LANGUAGE: sh
CODE:
cd tanstack
git clone git@github.com:TanStack/tanstack.com.git
git clone git@github.com:TanStack/form.git

----------------------------------------

TITLE: Markdown Configuration for Documentation
DESCRIPTION: YAML-style frontmatter configuration specifying the documentation reference path and replacement instructions for router terminology.

LANGUAGE: markdown
CODE:
---
ref: docs/router/framework/react/guide/preloading.md
replace: { 'react-router': 'solid-router' }
---

----------------------------------------

TITLE: Creating Directory for TanStack Projects
DESCRIPTION: Command to create a new directory called 'tanstack' for hosting TanStack projects and documentation.

LANGUAGE: sh
CODE:
mkdir tanstack

----------------------------------------

TITLE: Code-Based Route Splitting Implementation
DESCRIPTION: Demonstration of code splitting implementation using code-based routing approach with createLazyRoute.

LANGUAGE: typescript
CODE:
// src/posts.tsx
export const Route = createLazyRoute('/posts')({
  component: MyComponent,
})

function MyComponent() {
  return <div>My Component</div>
}

LANGUAGE: typescript
CODE:
// src/app.tsx
const postsRoute = createRoute({
  getParentRoute: () => rootRoute,
  path: '/posts',
}).lazy(() => import('./posts.lazy').then((d) => d.Route))

----------------------------------------

TITLE: Implementing Index Route
DESCRIPTION: Creation of the index route component using lazy file-based routing.

LANGUAGE: tsx
CODE:
import { createLazyFileRoute } from '@tanstack/react-router'

export const Route = createLazyFileRoute('/')({ 
  component: Index,
})

function Index() {
  return (
    <div className="p-2">
      <h3>Welcome Home!</h3>
    </div>
  )
}

----------------------------------------

TITLE: Setting Up and Running TanStack.com Development Server
DESCRIPTION: Commands to navigate to the TanStack.com directory, install dependencies, and start the development server. The server runs on localhost:3000 by default.

LANGUAGE: sh
CODE:
cd tanstack.com
pnpm i
# The app will run on https://localhost:3000 by default
pnpm dev

----------------------------------------

TITLE: Defining ErrorComponent Props in TypeScript
DESCRIPTION: This snippet defines the props for the ErrorComponent. It includes an 'error' prop of type 'any' and a 'reset' prop which is a function that returns void.

LANGUAGE: typescript
CODE:
interface ErrorComponentProps {
  error: any;
  reset: () => void;
}

----------------------------------------

TITLE: Creating Directory for TanStack Projects
DESCRIPTION: Command to create a new directory called 'tanstack' for hosting project repositories.

LANGUAGE: sh
CODE:
mkdir tanstack

----------------------------------------

TITLE: Document Metadata Configuration - YAML
DESCRIPTION: YAML frontmatter configuration specifying the documentation reference path and text replacement rules for router documentation.

LANGUAGE: yaml
CODE:
---
ref: docs/router/framework/react/guide/code-splitting.md
replace: { 'react-router': 'solid-router' }
---

----------------------------------------

TITLE: Setting Up Local Development Environment
DESCRIPTION: Commands to enter the tanstack.com directory, install dependencies, and start the development server.

LANGUAGE: sh
CODE:
cd tanstack.com
pnpm i
# The app will run on https://localhost:3000 by default
pnpm dev

----------------------------------------

TITLE: Data Loader Code Splitting Example
DESCRIPTION: Implementation of code splitting for data loaders using lazyFn, with type safety considerations.

LANGUAGE: typescript
CODE:
import { lazyFn } from '@tanstack/react-router'

const route = createRoute({
  path: '/my-route',
  component: MyComponent,
  loader: lazyFn(() => import('./loader'), 'loader'),
})

// In another file...
export const loader = async (context: LoaderContext) => {
  /// ...
}

----------------------------------------

TITLE: Installing and Running TanStack Router Development Server
DESCRIPTION: Basic commands to install dependencies and start the development server using pnpm package manager.

LANGUAGE: sh
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Installing and Running TanStack Router Example
DESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install
npm start

LANGUAGE: shell
CODE:
yarn
yarn start

----------------------------------------

TITLE: Starting the Development Server
DESCRIPTION: Commands for starting the development server using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Implementing Floating Mode Devtools
DESCRIPTION: Configuration for floating mode devtools with localStorage persistence.

LANGUAGE: js
CODE:
import { TanStackRouterDevtools } from '@tanstack/react-router-devtools'

function App() {
  return (
    <>
      <Router />
      <TanStackRouterDevtools initialIsOpen={false} />
    </>
  )
}

----------------------------------------

TITLE: Implementing JSURL2 for Search Param Serialization
DESCRIPTION: Demonstrates the use of JSURL2 library for compressing and maintaining readability in URL search parameters.

LANGUAGE: tsx
CODE:
import {
  Router,
  parseSearchWith,
  stringifySearchWith,
} from '@tanstack/react-router'
import { parse, stringify } from 'jsurl2'

const router = createRouter({
  // ...
  parseSearch: parseSearchWith(parse),
  stringifySearch: stringifySearchWith(stringify),
})

----------------------------------------

TITLE: Installing Dependencies for TanStack Router Example (npm/yarn)
DESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.

LANGUAGE: markdown
CODE:
- `npm install` or `yarn`

----------------------------------------

TITLE: Enabling Scroll Restoration in TanStack Router
DESCRIPTION: Shows how to enable the built-in scroll restoration feature in TanStack Router, which handles monitoring, caching, and restoring scroll positions for multiple scrollable areas.

LANGUAGE: tsx
CODE:
import { createRouter } from '@tanstack/react-router'

const router = createRouter({
  scrollRestoration: true,
})

----------------------------------------

TITLE: Installing and Starting Development Server with PNPM
DESCRIPTION: Basic commands to install dependencies and start the development server with automatic asset rebuilding on file changes.

LANGUAGE: sh
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Installing and Running TanStack Router Development Environment
DESCRIPTION: Commands to install dependencies and start the development server for the TanStack Router project.

LANGUAGE: sh
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Installing and Starting Development Server with PNPM
DESCRIPTION: Basic commands to install dependencies and start the development server with automatic asset rebuilding on file changes.

LANGUAGE: sh
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Starting TanStack Router Example Project (npm/yarn)
DESCRIPTION: Commands to start the TanStack Router example project using either npm or yarn package managers.

LANGUAGE: markdown
CODE:
- `npm start` or `yarn start`

----------------------------------------

TITLE: Displaying Sorted Route Tree in TanStack Router
DESCRIPTION: This code snippet demonstrates how TanStack Router automatically sorts the route tree to match the most specific routes first. The routes are ordered as index, static (most to least specific), dynamic (longest to shortest), and splat/wildcard routes.

LANGUAGE: plaintext
CODE:
Root
  - /
  - about/us
  - about
  - blog
    - /
    - new
    - $postId
  - *

----------------------------------------

TITLE: Installing and Running TanStack Router Development Server
DESCRIPTION: Basic commands to install dependencies and start the development server using pnpm package manager.

LANGUAGE: sh
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Installing Dependencies with Package Managers
DESCRIPTION: Commands for installing project dependencies using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Setting Up Local Development Environment
DESCRIPTION: Commands to install dependencies and start the development server for local documentation preview.

LANGUAGE: sh
CODE:
cd tanstack.com
pnpm i
# The app will run on https://localhost:3000 by default
pnpm dev

----------------------------------------

TITLE: Route File Pattern Examples in TypeScript/TSX
DESCRIPTION: Examples demonstrating various file naming patterns for TanStack Router routes, including dynamic parameters and pathless routes.

LANGUAGE: typescript
CODE:
posts.$postId.tsx

LANGUAGE: typescript
CODE:
_app.tsx

LANGUAGE: typescript
CODE:
_app.a.tsx

LANGUAGE: typescript
CODE:
_app.b.tsx

----------------------------------------

TITLE: Using isNotFound Function in TypeScript/React
DESCRIPTION: Example demonstrating how to use the isNotFound function to check if an object is a NotFoundError instance. The function takes an unknown input and returns a boolean indicating whether the object is a NotFoundError.

LANGUAGE: tsx
CODE:
import { isNotFound } from '@tanstack/react-router'

function somewhere(obj: unknown) {
  if (isNotFound(obj)) {
    // ...
  }
}

----------------------------------------

TITLE: Cloning TanStack Repositories
DESCRIPTION: Commands to clone the TanStack website and form repositories for local development.

LANGUAGE: sh
CODE:
cd tanstack
git clone git@github.com:TanStack/tanstack.com.git
git clone git@github.com:TanStack/form.git

----------------------------------------

TITLE: Fixed Mode Implementation with Shadow DOM
DESCRIPTION: Example of using TanStackRouterDevtoolsPanel with shadow DOM integration.

LANGUAGE: js
CODE:
import { TanStackRouterDevtoolsPanel } from '@tanstack/react-router-devtools'

<TanStackRouterDevtoolsPanel
  shadowDOMTarget={shadowContainer}
  router={router}
/>

----------------------------------------

TITLE: Starting TanStack Router Example Project (npm/yarn)
DESCRIPTION: Commands to start the TanStack Router example project using either npm or yarn package managers.

LANGUAGE: markdown
CODE:
- `npm start` or `yarn start`

----------------------------------------

TITLE: Starting the Development Server
DESCRIPTION: Commands for starting the development server using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Cloning TanStack Repositories
DESCRIPTION: Commands to navigate to the tanstack directory and clone the tanstack.com and form repositories.

LANGUAGE: sh
CODE:
cd tanstack
git clone git@github.com:TanStack/tanstack.com.git
git clone git@github.com:TanStack/form.git

----------------------------------------

TITLE: TypeScript Configuration for TanStack Router
DESCRIPTION: Required TypeScript compiler options for using TanStack Router with Solid.js.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "jsx": "preserve",
    "jsxImportSource": "solid-js"
  }
}

----------------------------------------

TITLE: Installing Dependencies for TanStack Router Example (npm/yarn)
DESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.

LANGUAGE: markdown
CODE:
- `npm install` or `yarn`

----------------------------------------

TITLE: Installing and Running TanStack Router Example
DESCRIPTION: Commands for installing project dependencies and starting the example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install
npm start

LANGUAGE: bash
CODE:
yarn
yarn start

----------------------------------------

TITLE: Creating Directory for TanStack Projects
DESCRIPTION: Command to create a new directory called 'tanstack' for housing TanStack projects.

LANGUAGE: sh
CODE:
mkdir tanstack

----------------------------------------

TITLE: Navigation Configuration in TanStack Router
DESCRIPTION: Configuration file showing the replacement of react-router with solid-router in the documentation context.

LANGUAGE: markdown
CODE:
---
ref: docs/router/framework/react/guide/navigation.md
replace: { 'react-router': 'solid-router' }
---

----------------------------------------

TITLE: Processing Accumulated Route Context for Breadcrumbs
DESCRIPTION: Demonstrates how to use accumulated route context to generate breadcrumbs in the root route component.

LANGUAGE: tsx
CODE:
// src/routes/__root.tsx
export const Route = createRootRoute({
  component: () => {
    const matches = useRouterState({ select: (s) => s.matches })

    const breadcrumbs = matches
      .filter((match) => match.context.getTitle)
      .map(({ pathname, context }) => {
        return {
          title: context.getTitle(),
          path: pathname,
        }
      })

    // ...
  },
})

----------------------------------------

TITLE: Installing Dependencies via Package Manager
DESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install
npm dev

# or

yarn
yarn dev

----------------------------------------

TITLE: Demonstrating Route Matching for '/not-a-route' URL in TanStack Router
DESCRIPTION: This code snippet shows the route matching process for a non-existent route '/not-a-route'. It demonstrates how the router falls back to the splat/wildcard route when no other matches are found.

LANGUAGE: plaintext
CODE:
Root
  ❌ /
  ❌ about/us
  ❌ about
  ❌ blog
    - /
    - new
    - $postId
  ✅ *

----------------------------------------

TITLE: Installing and Running TanStack Router Example
DESCRIPTION: Commands to install dependencies and start the example project using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install
npm start

LANGUAGE: shell
CODE:
yarn
yarn start

----------------------------------------

TITLE: Setting Up TanStack.com Development Environment
DESCRIPTION: Commands to enter the TanStack.com directory, install dependencies, and start the development server.

LANGUAGE: sh
CODE:
cd tanstack.com
pnpm i
# The app will run on https://localhost:3000 by default
pnpm dev

----------------------------------------

TITLE: Installing and Starting TanStack Router Example
DESCRIPTION: Commands for installing project dependencies and starting the example application using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install
npm start

LANGUAGE: shell
CODE:
yarn
yarn start

----------------------------------------

TITLE: Basic Hook-Based Navigation Blocking
DESCRIPTION: Demonstrates basic navigation blocking using the useBlocker hook with a simple confirmation dialog. Uses form dirty state to determine when to block navigation.

LANGUAGE: tsx
CODE:
import { useBlocker } from '@tanstack/solid-router'

function MyComponent() {
  const [formIsDirty, setFormIsDirty] = createSignal(false)

  useBlocker({
    shouldBlockFn: () => {
      if (!formIsDirty()) return false

      const shouldLeave = confirm('Are you sure you want to leave?')
      return !shouldLeave
    },
  })

  // ...
}

----------------------------------------

TITLE: Installing and Running Tanstack Router Example - Shell Commands
DESCRIPTION: Shell commands for setting up and running a Tanstack Router example project. Provides options for both npm and yarn package managers.

LANGUAGE: shell
CODE:
npm install
npm start

LANGUAGE: shell
CODE:
yarn
yarn start

----------------------------------------

TITLE: Cloning TanStack Repositories
DESCRIPTION: Commands to navigate to the tanstack directory and clone both the website and form repositories using git.

LANGUAGE: sh
CODE:
cd tanstack
git clone git@github.com:TanStack/tanstack.com.git
git clone git@github.com:TanStack/form.git

----------------------------------------

TITLE: Running TanStack Router Performance Test Commands
DESCRIPTION: These commands install dependencies, generate routes, build the route tree, and run type checking and diagnostics for the TanStack Router performance test.

LANGUAGE: markdown
CODE:
- `pnpm install`
- `pnpm gen` to generate routes
- `pnpm build` to update route tree
- `pnpm test:types` to type check and run diagnostics

----------------------------------------

TITLE: YAML Frontmatter Configuration for Documentation
DESCRIPTION: YAML frontmatter block defining the document reference path and replacement mapping for documentation generation.

LANGUAGE: yaml
CODE:
---
ref: docs/router/framework/react/guide/search-params.md
replace: { 'react-router': 'solid-router' }
---

----------------------------------------

TITLE: Index Route File Path Examples in TanStack Router
DESCRIPTION: Examples showing equivalent index route file paths and their corresponding URLs.

LANGUAGE: txt
CODE:
src/routes/posts.index.tsx -> /posts/
src/routes/posts/index.tsx -> /posts/

----------------------------------------

TITLE: Starting TanStack Router Example Project (npm/yarn)
DESCRIPTION: Commands to start the TanStack Router example project using either npm or yarn package managers.

LANGUAGE: markdown
CODE:
- `npm start` or `yarn start`

----------------------------------------

TITLE: Scripts Component Implementation Examples
DESCRIPTION: Shows two different implementations of the Scripts component - one for full-stack applications and one for single-page applications.

LANGUAGE: tsx
CODE:
import { createFileRoute, Scripts } from '@tanstack/react-router'\nexport const Router = createFileRoute('/')({\n  component: () => (\n    <html>\n      <head />\n      <body>\n        <Outlet />\n        <Scripts />\n      </body>\n    </html>\n  ),\n})

LANGUAGE: tsx
CODE:
import { Scripts, createRootRoute } from '@tanstack/react-router'\n\nexport const Route = createRootRoute()({\n  component: () => (\n    <>\n      <Outlet />\n      <Scripts />\n    </>\n  ),\n})

----------------------------------------

TITLE: Installing Dependencies with Package Managers
DESCRIPTION: Commands for installing project dependencies using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Creating Directory for TanStack Projects
DESCRIPTION: Command to create a new directory called 'tanstack' for hosting project repositories.

LANGUAGE: sh
CODE:
mkdir tanstack

----------------------------------------

TITLE: Starting TanStack Router Example Project (npm/yarn)
DESCRIPTION: Commands to start the TanStack Router example project using either npm or yarn package managers.

LANGUAGE: markdown
CODE:
- `npm start` or `yarn start`

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration block specifying the document reference path and replacement instructions for converting React Router references to Solid Router.

LANGUAGE: yaml
CODE:
---
ref: docs/router/framework/react/guide/history-types.md
replace: { 'react-router': 'solid-router' }
---

----------------------------------------

TITLE: Installing and Running TanStack Router Example
DESCRIPTION: Commands to install dependencies and start the example project using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install
npm start

LANGUAGE: shell
CODE:
yarn
yarn start

----------------------------------------

TITLE: Installing TanStack Start CLI with PNPM
DESCRIPTION: Command to install the TanStack Start CLI tool using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create @tanstack/start

----------------------------------------

TITLE: Installing Dependencies for TanStack Router Example (npm/yarn)
DESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.

LANGUAGE: markdown
CODE:
- `npm install` or `yarn`

----------------------------------------

TITLE: Installing TanStack Router ESLint Plugin
DESCRIPTION: Various package manager commands to install the TanStack Router ESLint plugin as a dev dependency.

LANGUAGE: sh
CODE:
npm install -D @tanstack/eslint-plugin-router

LANGUAGE: sh
CODE:
pnpm add -D @tanstack/eslint-plugin-router

LANGUAGE: sh
CODE:
yarn add -D @tanstack/eslint-plugin-router

LANGUAGE: sh
CODE:
bun add -D @tanstack/eslint-plugin-router

----------------------------------------

TITLE: Defining a Basic API Route in TypeScript
DESCRIPTION: This example shows how to create a simple API route using the createAPIFileRoute function. It defines a GET handler that returns a 'Hello, World!' response.

LANGUAGE: typescript
CODE:
// routes/api/hello.ts
import { createAPIFileRoute } from '@tanstack/react-start/api'

export const APIRoute = createAPIFileRoute('/api/hello')({
  GET: async ({ request }) => {
    return new Response('Hello, World! from ' + request.url)
  },
})

----------------------------------------

TITLE: Using Mutation Function in React
DESCRIPTION: Example of how to use a Convex mutation function in a React component using the useMutation hook, showing both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction)
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: 'Hello!', second: 'me' })
  // OR
  // use the result once the mutation has completed
  mutation({ first: 'Hello!', second: 'me' }).then((result) =>
    console.log(result),
  )
}

----------------------------------------

TITLE: Setting up Memory History Router with Initial URL
DESCRIPTION: Illustrates memory history configuration with initial URL entries. This approach is particularly useful for non-browser environments or when URL manipulation should be prevented.

LANGUAGE: typescript
CODE:
import { createMemoryHistory, createRouter } from '@tanstack/react-router'

const memoryHistory = createMemoryHistory({
  initialEntries: ['/'], // Pass your initial url
})

const router = createRouter({ routeTree, history: memoryHistory })

----------------------------------------

TITLE: Installing Dependencies for TanStack Router Example (npm/yarn)
DESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install

LANGUAGE: shell
CODE:
yarn

----------------------------------------

TITLE: Displaying TanStack Start CLI Help
DESCRIPTION: Command to show all available options for the TanStack Start CLI tool.

LANGUAGE: bash
CODE:
pnpm create @tanstack/start --help

----------------------------------------

TITLE: Starting TanStack Router Example Project
DESCRIPTION: Command to start the TanStack Router example project using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Configuring Recommended Flat Config in ESLint 9.0+
DESCRIPTION: Setup for enabling all recommended rules using the new flat config format in eslint.config.js.

LANGUAGE: javascript
CODE:
// eslint.config.js
import pluginRouter from '@tanstack/eslint-plugin-router'

export default [
  ...pluginRouter.configs['flat/recommended'],
  // Any other config...
]

----------------------------------------

TITLE: Installing TanStack Router Dependencies
DESCRIPTION: Commands for installing project dependencies using either npm or yarn package manager.

LANGUAGE: shell
CODE:
npm install

LANGUAGE: shell
CODE:
yarn

----------------------------------------

TITLE: Creating TanStack Start Module
DESCRIPTION: JavaScript code structure for creating a module in TanStack Start projects. It outlines the chain of methods used to define module behavior.

LANGUAGE: javascript
CODE:
createModule(schema)
  .init((configFromSchema) => { ... })
  .prompt((configFromInit) => { ... })
  .validateAndApply({
    validate({ cfg, targetPath }) {
      // check preconditions and return issues
    },
    apply({ cfg, targetPath }) {
      // modify filesystem
    }
  })

----------------------------------------

TITLE: Installing and Running Tanstack Router Example
DESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install
npm start

LANGUAGE: bash
CODE:
yarn
yarn start

----------------------------------------

TITLE: Configuring Recommended Legacy ESLint Config
DESCRIPTION: Setup for enabling all recommended rules using the legacy .eslintrc configuration format.

LANGUAGE: json
CODE:
{
  "extends": ["plugin:@tanstack/eslint-plugin-router/recommended"]
}

----------------------------------------

TITLE: Registering Global Middleware in TanStack Router
DESCRIPTION: This example demonstrates how to register global middleware that runs for every server function in the application. It shows the setup in a global-middleware.ts file.

LANGUAGE: tsx
CODE:
// app/global-middleware.ts
import { registerGlobalMiddleware } from '@tanstack/react-start'
import { authMiddleware } from './middleware'

registerGlobalMiddleware({
  middleware: [authMiddleware],
})

----------------------------------------

TITLE: Installing and Running TanStack Router Development Server
DESCRIPTION: Basic commands to install dependencies and start the development server for TanStack Router

LANGUAGE: sh
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Manual Router Instance Configuration
DESCRIPTION: Example of manually passing router instance to devtools outside RouterProvider.

LANGUAGE: tsx
CODE:
function App() {
  return (
    <>
      <RouterProvider router={router} />
      <TanStackRouterDevtools router={router} />
    </>
  )
}

----------------------------------------

TITLE: Installing and Running TanStack Router Example
DESCRIPTION: Commands for installing dependencies and starting the example application using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install
npm start

LANGUAGE: shell
CODE:
yarn
yarn start

----------------------------------------

TITLE: Setting Up Local Development Environment
DESCRIPTION: Commands to install dependencies and start the development server for the TanStack.com website, running on localhost:3000 by default.

LANGUAGE: sh
CODE:
cd tanstack.com
pnpm i
# The app will run on https://localhost:3000 by default
pnpm dev

----------------------------------------

TITLE: Configuring Custom Legacy ESLint Config
DESCRIPTION: Custom configuration setup using the legacy .eslintrc format, allowing specific rule selection.

LANGUAGE: json
CODE:
{
  "plugins": ["@tanstack/eslint-plugin-router"],
  "rules": {
    "@tanstack/router/create-route-property-order": "error"
  }
}

----------------------------------------

TITLE: Creating TanStack Project Directory
DESCRIPTION: Command to create a new directory for TanStack projects local development.

LANGUAGE: sh
CODE:
mkdir tanstack

----------------------------------------

TITLE: Cloning TanStack Repositories
DESCRIPTION: Commands to clone the TanStack.com website and Form project repositories for local development and documentation editing.

LANGUAGE: sh
CODE:
cd tanstack
git clone git@github.com:TanStack/tanstack.com.git
git clone git@github.com:TanStack/form.git

----------------------------------------

TITLE: Implementing Dynamic Route Prerendering with Nitro Hooks
DESCRIPTION: Advanced configuration showing how to prerender dynamic routes using Nitro's prerender:routes hook. This example demonstrates fetching blog posts and adding their routes to the prerender set.

LANGUAGE: typescript
CODE:
// app.config.ts
import { defineConfig } from '@tanstack/react-start/config'

export default defineConfig({
  server: {
    hooks: {
      'prerender:routes': async (routes) => {
        // fetch the pages you want to render
        const posts = await fetch('https://api.example.com/posts')
        const postsData = await posts.json()

        // add each post path to the routes set
        postsData.forEach((post) => {
          routes.add(`/posts/${post.id}`)
        })
      },
    },
    prerender: {
      routes: ['/'],
      crawlLinks: true,
    },
  },
})

----------------------------------------

TITLE: Handling Redirects in Server Functions
DESCRIPTION: Shows how to throw a redirect from within a server function.

LANGUAGE: typescript
CODE:
import { redirect } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'

export const doStuff = createServerFn({ method: 'GET' }).handler(async () => {
  // Redirect the user to the home page
  throw redirect({
    to: '/',
  })
})

----------------------------------------

TITLE: Installing and Running TanStack Router Development Server
DESCRIPTION: Commands to install dependencies and start the development server with hot-reload capability for asset rebuilding on file changes.

LANGUAGE: sh
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Configuring Scroll Behavior in TanStack Router
DESCRIPTION: Demonstrates how to configure the scroll behavior when navigating between pages in TanStack Router, allowing for instant transitions instead of smooth scrolling.

LANGUAGE: tsx
CODE:
import { createRouter } from '@tanstack/react-router'

const router = createRouter({
  scrollBehavior: 'instant',
})

----------------------------------------

TITLE: Installing and Running TanStack Router Example with PNPM
DESCRIPTION: Commands for installing project dependencies and starting the development server using pnpm package manager.

LANGUAGE: shell
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Configuring Node.js Server Deployment in TanStack Start
DESCRIPTION: Configuration and deployment steps for running a TanStack Start application on a Node.js server

LANGUAGE: typescript
CODE:
// app.config.ts
import { defineConfig } from '@tanstack/solid-start/config'

export default defineConfig({
  server: {
    preset: 'node-server',
  },
})

LANGUAGE: shell
CODE:
npm run build
node .output/server/index.mjs

----------------------------------------

TITLE: Installing vite-tsconfig-paths Plugin
DESCRIPTION: npm command to install the vite-tsconfig-paths plugin as a development dependency.

LANGUAGE: sh
CODE:
npm install -D vite-tsconfig-paths

----------------------------------------

TITLE: Installing and Running TanStack Router Example
DESCRIPTION: Commands to install project dependencies using pnpm and start the development server.

LANGUAGE: shell
CODE:
pnpm install

LANGUAGE: shell
CODE:
pnpm dev

----------------------------------------

TITLE: Implementing First Route with Counter in TanStack Start
DESCRIPTION: First route implementation (app/routes/index.tsx) with a counter, demonstrating server functions, file handling, and client-side updates.

LANGUAGE: tsx
CODE:
import * as fs from 'node:fs'
import { createFileRoute, useRouter } from '@tanstack/solid-router'
import { createServerFn } from '@tanstack/solid-start'

const filePath = 'count.txt'

async function readCount() {
  return parseInt(
    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),
  )
}

const getCount = createServerFn({
  method: 'GET',
}).handler(() => {
  return readCount()
})

const updateCount = createServerFn({ method: 'POST' })
  .validator((d: number) => d)
  .handler(async ({ data }) => {
    const count = await readCount()
    await fs.promises.writeFile(filePath, `${count + data}`)
  })

export const Route = createFileRoute('/')({
  component: Home,
  loader: async () => await getCount(),
})

function Home() {
  const router = useRouter()
  const state = Route.useLoaderData()

  return (
    <button
      type="button"
      onClick={() => {
        updateCount({ data: 1 }).then(() => {
          router.invalidate()
        })
      }}
    >
      Add 1 to {state()}?
    </button>
  )
}

----------------------------------------

TITLE: Defining Logging Middleware for Server Functions in TypeScript
DESCRIPTION: This snippet demonstrates how to create a simple logging middleware using the createMiddleware function. It logs requests and responses for server functions.

LANGUAGE: tsx
CODE:
import { createMiddleware } from '@tanstack/react-start'

const loggingMiddleware = createMiddleware().server(async ({ next, data }) => {
  console.log('Request received:', data)
  const result = await next()
  console.log('Response processed:', result)
  return result
})

----------------------------------------

TITLE: Configuring Path Aliases in tsconfig.json
DESCRIPTION: Configuration for TypeScript compiler options to enable path aliases. Sets up the '~' alias to point to the src directory for shorter import paths.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "~/*": ["./src/*"]
    }
  }
}

----------------------------------------

TITLE: Configuring Server Entry Point for TanStack Start
DESCRIPTION: Server entry point file (app/ssr.tsx) for TanStack Start, setting up the start handler and router manifest.

LANGUAGE: tsx
CODE:
import {
  createStartHandler,
  defaultStreamHandler,
} from '@tanstack/solid-start/server'
import { getRouterManifest } from '@tanstack/solid-start/router-manifest'

import { createRouter } from './router'

export default createStartHandler({
  createRouter,
  getRouterManifest,
})(defaultStreamHandler)

----------------------------------------

TITLE: Implementing useParams Method in RouteApi for TanStack Router
DESCRIPTION: This method offers a type-safe version of the useParams hook, pre-bound to a specific route ID. It allows for optional selection and structural sharing of the returned parameter data.

LANGUAGE: tsx
CODE:
  useParams<TSelected = TAllParams>(opts?: {
    select?: (params: TAllParams) => TSelected
  }): TSelected

----------------------------------------

TITLE: Configuring Vercel Deployment in TanStack Start
DESCRIPTION: Configuration for deploying a TanStack Start application to Vercel using the vercel preset in app.config.ts

LANGUAGE: typescript
CODE:
// app.config.ts
import { defineConfig } from '@tanstack/solid-start/config'

export default defineConfig({
  server: {
    preset: 'vercel',
  },
})

----------------------------------------

TITLE: Configuring TanStack Start with app.config.ts
DESCRIPTION: Configuration file for TanStack Start, setting up Vite plugins and TypeScript path resolution.

LANGUAGE: typescript
CODE:
import { defineConfig } from '@tanstack/solid-start/config'
import tsConfigPaths from 'vite-tsconfig-paths'

export default defineConfig({
  vite: {
    plugins: [
      tsConfigPaths({
        projects: ['./tsconfig.json'],
      }),
    ],
  },
})

----------------------------------------

TITLE: Implementing Server-Side Rendering Entry Point in React
DESCRIPTION: Defines the server-side rendering entry point for TanStack Start. It sets up the handler for streaming HTML and manages router creation and manifest generation for each request.

LANGUAGE: tsx
CODE:
// app/ssr.tsx
import {
  createStartHandler,
  defaultStreamHandler,
} from '@tanstack/react-start/server'
import { getRouterManifest } from '@tanstack/react-start/router-manifest'

import { createRouter } from './router'

export default createStartHandler({
  createRouter,
  getRouterManifest,
})(defaultStreamHandler)

----------------------------------------

TITLE: Configuring Root Application Layout
DESCRIPTION: Implements the root route configuration with meta tags and basic layout structure using createRootRoute.

LANGUAGE: tsx
CODE:
// app/routes/__root.tsx
import {
  Outlet,
  createRootRoute,
  HeadContent,
  Scripts,
} from '@tanstack/solid-router'

export const Route = createRootRoute({
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      {
        title: 'TanStack Start Starter',
      },
    ],
  }),
  component: RootComponent,
})

function RootComponent() {
  return <Outlet />
}

----------------------------------------

TITLE: Incorrect Property Order in TanStack Router Route Creation
DESCRIPTION: Demonstrates incorrect property ordering where loader is placed before beforeLoad, which breaks type inference in TanStack Router.

LANGUAGE: tsx
CODE:
/* eslint "@tanstack/router/create-route-property-order": "warn" */
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/foo/bar/$id')({
  loader: async ({context}) => {
    await context.queryClient.ensureQueryData(getQueryOptions(context.hello)),
  },
  beforeLoad: () => ({hello: 'world'})
})

----------------------------------------

TITLE: Setting Up Client-Side Hydration in React
DESCRIPTION: Configures the client-side entry point for TanStack Start. It hydrates the application on the client side, enabling client-side routing after the initial server request is fulfilled.

LANGUAGE: tsx
CODE:
// app/client.tsx
import { hydrateRoot } from 'react-dom/client'
import { StartClient } from '@tanstack/react-start'
import { createRouter } from './router'

const router = createRouter()

hydrateRoot(document, <StartClient router={router} />)

----------------------------------------

TITLE: Manually Deploying TanStack Router Example
DESCRIPTION: This snippet demonstrates how to manually clone and deploy a TanStack Router example project, replacing 'EXAMPLE_SLUG' with the desired example slug.

LANGUAGE: bash
CODE:
npx gitpick TanStack/router/tree/main/examples/react/EXAMPLE_SLUG my-new-project
cd my-new-project
npm install
npm run dev

----------------------------------------

TITLE: Default Route Tree File Footer Configuration
DESCRIPTION: Default content appended to the generated route tree file.

LANGUAGE: json
CODE:
[]

----------------------------------------

TITLE: Default Search Object Example in TanStack Router
DESCRIPTION: Demonstrates a typical search object structure used in TanStack Router before serialization.

LANGUAGE: tsx
CODE:
const search = {
  page: 1,
  sort: 'asc',
  filters: { author: 'tanner', min_words: 800 },
}

----------------------------------------

TITLE: Implementing Server-Side Entry Point
DESCRIPTION: Sets up the server-side rendering entry point using createStartHandler with router manifest and stream handling configuration.

LANGUAGE: tsx
CODE:
// app/ssr.tsx
import {
  createStartHandler,
  defaultStreamHandler,
} from '@tanstack/solid-start/server'
import { getRouterManifest } from '@tanstack/solid-start/router-manifest'

import { createRouter } from './router'

export default createStartHandler({
  createRouter,
  getRouterManifest,
})(defaultStreamHandler)

----------------------------------------

TITLE: Configuring Netlify Deployment in TanStack Router
DESCRIPTION: Sets the server preset to 'netlify' in the app.config.ts file for deploying a TanStack Router application to Netlify.

LANGUAGE: typescript
CODE:
// app.config.ts
import { defineConfig } from '@tanstack/react-start/config'

export default defineConfig({
  server: {
    preset: 'netlify',
  },
})

----------------------------------------

TITLE: Configuring TanStack Router Setup
DESCRIPTION: Creates and configures the main router instance with scroll restoration functionality. Includes type declaration for router registration.

LANGUAGE: tsx
CODE:
// app/router.tsx
import { createRouter as createTanStackRouter } from '@tanstack/solid-router'
import { routeTree } from './routeTree.gen'

export function createRouter() {
  const router = createTanStackRouter({
    routeTree,
    scrollRestoration: true,
  })

  return router
}

declare module '@tanstack/solid-router' {
  interface Register {
    router: ReturnType<typeof createRouter>
  }
}

----------------------------------------

TITLE: Building TanStack Router for Vercel Deployment
DESCRIPTION: Command to build a TanStack Router application for Vercel deployment using the --preset flag.

LANGUAGE: shell
CODE:
npm run build --preset vercel

----------------------------------------

TITLE: Basic Search Parameter Access in TanStack Router
DESCRIPTION: Demonstrates the basic usage of Route.useSearch() hook to access search parameters in a route.

LANGUAGE: tsx
CODE:
const search = Route.useSearch()

----------------------------------------

TITLE: Defining ToOptions Type Structure in TypeScript
DESCRIPTION: Defines the ToOptions type that describes router destination properties including from/to paths, hash handling, state management, search parameters, and path parameters. The type uses generics and conditional types to provide type safety for router navigation.

LANGUAGE: typescript
CODE:
type ToOptions = {
  from?: ValidRoutePath | string
  to?: ValidRoutePath | string
  hash?: true | string | ((prev?: string) => string)
  state?: true | HistoryState | ((prev: HistoryState) => HistoryState)
} & SearchParamOptions &
  PathParamOptions

type SearchParamOptions = {
  search?: true | TToSearch | ((prev: TFromSearch) => TToSearch)
}

type PathParamOptions = {
  path?: true | Record<string, TPathParam> | ((prev: TFromParams) => TToParams)
}

----------------------------------------

TITLE: Setting up Client Entry Point for TanStack Start
DESCRIPTION: Client entry point file (app/client.tsx) for TanStack Start, handling client-side hydration and routing.

LANGUAGE: tsx
CODE:
/// <reference types="vinxi/types/client" />
import { hydrate } from 'solid-js/web'
import { StartClient } from '@tanstack/solid-start'
import { createRouter } from './router'

const router = createRouter()

hydrate(() => <StartClient router={router} />, document.body)

----------------------------------------

TITLE: Configuring Node.js Deployment in TanStack Router
DESCRIPTION: Sets the server preset to 'node-server' in the app.config.ts file for deploying a TanStack Router application to a Node.js server.

LANGUAGE: typescript
CODE:
// app.config.ts
import { defineConfig } from '@tanstack/react-start/config'

export default defineConfig({
  server: {
    preset: 'node-server',
  },
})

----------------------------------------

TITLE: Configuring TypeScript for TanStack Start
DESCRIPTION: TypeScript configuration file (tsconfig.json) with recommended settings for a TanStack Start project.

LANGUAGE: jsonc
CODE:
{
  "compilerOptions": {
    "jsx": "preserve",
    "jsxImportSource": "solid-js",
    "moduleResolution": "Bundler",
    "module": "ESNext",
    "target": "ES2022",
    "skipLibCheck": true,
    "strictNullChecks": true,
  },
}

----------------------------------------

TITLE: Configuring Bun Deployment in TanStack Router
DESCRIPTION: Sets the server preset to 'bun' in the app.config.ts file for deploying a TanStack Router application to a Bun server.

LANGUAGE: typescript
CODE:
// app.config.ts
import { defineConfig } from '@tanstack/react-start/config'

export default defineConfig({
  server: {
    preset: 'bun',
  },
})

----------------------------------------

TITLE: Object-Based Route Configuration Example in TypeScript
DESCRIPTION: Shows an alternative approach using nested objects for route configuration, highlighting scalability issues.

LANGUAGE: tsx
CODE:
const router = createRouter({
  routes: {
    posts: {
      component: PostsPage, // /posts
      children: {
        $postId: {
          component: PostIdPage, // /posts/$postId
        },
      },
    },
    // ...
  },
})

----------------------------------------

TITLE: Invalidating TanStack Router after Mutation in TypeScript React
DESCRIPTION: This snippet demonstrates how to use the router.invalidate() method to force reloading of all current route matches after a mutation. It includes examples of both synchronous and asynchronous invalidation.

LANGUAGE: tsx
CODE:
const router = useRouter()

const addTodo = async (todo: Todo) => {
  try {
    await api.addTodo()
    router.invalidate()
  } catch {
    //
  }
}

LANGUAGE: tsx
CODE:
const router = useRouter()

const addTodo = async (todo: Todo) => {
  try {
    await api.addTodo()
    await router.invalidate({ sync: true })
  } catch {
    //
  }
}

----------------------------------------

TITLE: Initializing Project and Installing Dependencies
DESCRIPTION: Commands to create a new project directory, initialize it, and install necessary dependencies for a TanStack Start project.

LANGUAGE: shell
CODE:
mkdir myApp
cd myApp
npm init -y

npm i @tanstack/solid-start @tanstack/solid-router vinxi

npm i solid-js
npm i -D vite-plugin-solid vite-tsconfig-paths

npm i -D typescript

----------------------------------------

TITLE: Starting TanStack Router on Bun Server
DESCRIPTION: Command to start a TanStack Router application on a Bun server after building.

LANGUAGE: shell
CODE:
bun run .output/server/index.mjs

----------------------------------------

TITLE: Creating Main Application Entry
DESCRIPTION: Main application entry point setup with router initialization and provider configuration

LANGUAGE: tsx
CODE:
import { render } from 'solid-js/web'
import { RouterProvider, createRouter } from '@tanstack/solid-router'

// Import the generated route tree
import { routeTree } from './routeTree.gen'

// Create a new router instance
const router = createRouter({ routeTree })

// Register the router instance for type safety
declare module '@tanstack/solid-router' {
  interface Register {
    router: typeof router
  }
}

// Render the app
const rootElement = document.getElementById('root')!
if (!rootElement.innerHTML) {
  render(() => <RouterProvider router={router} />, rootElement)
}

----------------------------------------

TITLE: Handling Dynamic Path Parameters in API Routes
DESCRIPTION: This snippet demonstrates how to use dynamic path parameters in API routes. It creates a route that accepts a user ID and returns it in the response.

LANGUAGE: typescript
CODE:
// routes/api/users/$id.ts
import { createAPIFileRoute } from '@tanstack/react-start/api'

export const APIRoute = createAPIFileRoute('/users/$id')({
  GET: async ({ params }) => {
    const { id } = params
    return new Response(`User ID: ${id}`)
  },
})

----------------------------------------

TITLE: Component-Based Custom UI Blocking
DESCRIPTION: Demonstrates how to implement a custom UI for navigation blocking using the Block component with the resolver pattern.

LANGUAGE: tsx
CODE:
import { Block } from '@tanstack/solid-router'

function MyComponent() {
  const [formIsDirty, setFormIsDirty] = createSignal(false)

  return (
    <Block shouldBlockFn={() => formIsDirty()} withResolver>
      {({ status, proceed, reset }) => (
        <>
          {/* ... */}
          {status === 'blocked' && (
            <div>
              <p>Are you sure you want to leave?</p>
              <button onClick={proceed}>Yes</button>
              <button onClick={reset}>No</button>
            </div>
          )}
        </>
      )}
    </Block>
  )
}

----------------------------------------

TITLE: Creating Chakra UI Custom Link Component
DESCRIPTION: Implementation of a custom link component using Chakra UI's Link component with TanStack Router integration.

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { createLink, LinkComponent } from '@tanstack/react-router'
import { Link } from '@chakra-ui/react'

interface ChakraLinkProps
  extends Omit<React.ComponentPropsWithoutRef<typeof Link>, 'href'> {
  // Add any additional props you want to pass to the link
}

const ChakraLinkComponent = React.forwardRef<
  HTMLAnchorElement,
  ChakraLinkProps
>((props, ref) => {
  return <Link ref={ref} {...props} />
})

const CreatedLinkComponent = createLink(ChakraLinkComponent)

export const CustomLink: LinkComponent<typeof ChakraLinkComponent> = (
  props,
) => {
  return (
    <CreatedLinkComponent
      textDecoration={'underline'}
      _hover={{ textDecoration: 'none' }}
      _focus={{ textDecoration: 'none' }}
      preload={'intent'}
      {...props}
    />
  )
}

----------------------------------------

TITLE: Implementing Root Route Component
DESCRIPTION: Root route implementation with navigation links and router devtools integration

LANGUAGE: tsx
CODE:
import { createRootRoute, Link, Outlet } from '@tanstack/solid-router'
import { TanStackRouterDevtools } from '@tanstack/solid-router-devtools'

export const Route = createRootRoute({
  component: () => (
    <>
      <div class="p-2 flex gap-2">
        <Link to="/" class="[&.active]:font-bold">
          Home
        </Link>{' '}
        <Link to="/about" class="[&.active]:font-bold">
          About
        </Link>
      </div>
      <hr />
      <Outlet />
      <TanStackRouterDevtools />
    </>
  ),
})

----------------------------------------

TITLE: Handling POST Requests with JSON Body in API Routes
DESCRIPTION: This snippet demonstrates how to handle POST requests with a JSON body in API routes. It extracts the 'name' field from the request body and includes it in the response.

LANGUAGE: typescript
CODE:
// routes/api/hello.ts
import { createAPIFileRoute } from '@tanstack/react-start/api'

export const APIRoute = createAPIFileRoute('/api/hello')({
  POST: async ({ request }) => {
    const body = await request.json()
    return new Response(`Hello, ${body.name}!`)
  },
})

----------------------------------------

TITLE: Configuring Documentation Frontmatter in YAML
DESCRIPTION: YAML frontmatter configuration that specifies the documentation reference path and defines a replacement mapping from 'react-router' to 'solid-router'.

LANGUAGE: yaml
CODE:
---
ref: docs/router/framework/react/guide/link-options.md
replace: { 'react-router': 'solid-router' }
---

----------------------------------------

TITLE: Responding with JSON in API Routes
DESCRIPTION: This example shows how to return a JSON response from an API route. It uses the Response constructor with appropriate headers to set the content type.

LANGUAGE: typescript
CODE:
// routes/api/hello.ts
import { createAPIFileRoute } from '@tanstack/react-start/api'

export const APIRoute = createAPIFileRoute('/api/hello')({
  GET: async ({ request }) => {
    return new Response(JSON.stringify({ message: 'Hello, World!' }), {
      headers: {
        'Content-Type': 'application/json',
      },
    })
  },
})

----------------------------------------

TITLE: Creating Index Route for Posts
DESCRIPTION: Demonstrates how to create an index route that matches when the parent route is matched exactly. Uses a trailing slash to indicate an index route.

LANGUAGE: tsx
CODE:
// posts.index.tsx
import { createFileRoute } from '@tanstack/react-router'

// Note the trailing slash, which is used to target index routes
export const Route = createFileRoute('/posts/')({ 
  component: PostsIndexComponent,
})

function PostsIndexComponent() {
  return <div>Please select a post!</div>
}

----------------------------------------

TITLE: Type Narrowing with useBlocker Hook in React
DESCRIPTION: This example demonstrates type narrowing with the useBlocker hook, blocking navigation based on specific route and search parameters.

LANGUAGE: tsx
CODE:
import { useBlocker } from '@tanstack/react-router'

function MyComponent() {
  const [formIsDirty, setFormIsDirty] = useState(false)

  // block going from editor-1 to /foo/123?hello=world
  const { proceed, reset, status } = useBlocker({
    shouldBlockFn: ({ current, next }) => {
      if (
        current.routeId === '/editor-1' &&
        next.fullPath === '/foo/$id' &&
        next.params.id === '123' &&
        next.search.hello === 'world'
      ) {
        return true
      }
      return false
    },
    enableBeforeUnload: false,
    withResolver: true,
  })

  // ...
}

----------------------------------------

TITLE: Creating Custom Link Component with SolidJS and TanStack Router
DESCRIPTION: Implementation of a custom link component using createLink from TanStack Router with SolidJS. The example shows how to create a basic link component with custom styling and additional props support, along with preload functionality.

LANGUAGE: tsx
CODE:
import * as Solid from 'solid-js'
import { createLink, LinkComponent } from '@tanstack/solid-router'

export const Route = createRootRoute({
  component: RootComponent,
})

type BasicLinkProps = Solid.JSX.IntrinsicElements['a'] & {
  // Add any additional props you want to pass to the anchor element
}

const BasicLinkComponent: Solid.Component<BasicLinkProps> = (props) => (
  <a {...props} class="block px-3 py-2 text-red-700">
    {props.children}
  </a>
)

const CreatedLinkComponent = createLink(BasicLinkComponent)

export const CustomLink: LinkComponent<typeof BasicLinkComponent> = (props) => {
  return <CreatedLinkComponent preload={'intent'} {...props} />
}

----------------------------------------

TITLE: Setting Response Headers in API Routes
DESCRIPTION: This snippet demonstrates two methods to set headers in the response of API routes: using the Response constructor and using the setHeaders helper function.

LANGUAGE: typescript
CODE:
// routes/api/hello.ts
import { createAPIFileRoute } from '@tanstack/react-start/api'
import { setHeaders } from '@tanstack/react-start/server'

export const APIRoute = createAPIFileRoute('/api/hello')({
  GET: async ({ request }) => {
    setHeaders({
      'Content-Type': 'text/plain',
    })
    return new Response('Hello, World!')
  },
})

----------------------------------------

TITLE: CLI Configuration with JSON
DESCRIPTION: TanStack Router CLI configuration using tsr.config.json for virtual routes.

LANGUAGE: json
CODE:
{
  "virtualRouteConfig": {
    "type": "root",
    "file": "root.tsx",
    "children": [
      {
        "type": "index",
        "file": "home.tsx"
      },
      {
        "type": "route",
        "file": "posts/posts.tsx",
        "path": "/posts",
        "children": [
          {
            "type": "index",
            "file": "posts/posts-home.tsx"
          },
          {
            "type": "route",
            "file": "posts/posts-detail.tsx",
            "path": "$postId"
          }
        ]
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring Vite Plugin for TanStack Router
DESCRIPTION: Configuration setup for integrating TanStack Router with Vite bundler using the router plugin.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { TanStackRouterVite } from '@tanstack/router-plugin/vite'

export default defineConfig({
  // ...
  plugins: [TanStackRouterVite(), react()],
})

----------------------------------------

TITLE: Setting Up Router Instance and Provider
DESCRIPTION: Main application entry point configuration with router instance creation and provider setup.

LANGUAGE: typescript
CODE:
import React from 'react'
import ReactDOM from 'react-dom'
import { createRouter, RouterProvider } from '@tanstack/react-router'

import { routeTree } from './routeTree.gen'

const router = createRouter({ routeTree })

declare module '@tanstack/react-router' {
  interface Register {
    router: typeof router
  }
}

const domElementId = 'root'

const rootElement = document.getElementById(domElementId)
if (!rootElement) {
  throw new Error(`Element with id ${domElementId} not found`)
}

ReactDOM.createRoot(rootElement).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>,
)

----------------------------------------

TITLE: Defining RouterEvents Type in TypeScript for TanStack Router
DESCRIPTION: This code snippet defines the RouterEvents type, which contains all events that the TanStack router can emit. Each event is represented by a key with its corresponding payload type.

LANGUAGE: tsx
CODE:
type RouterEvents = {
  onBeforeNavigate: {
    type: 'onBeforeNavigate'
    fromLocation?: ParsedLocation
    toLocation: ParsedLocation
    pathChanged: boolean
    hrefChanged: boolean
  }
  onBeforeLoad: {
    type: 'onBeforeLoad'
    fromLocation?: ParsedLocation
    toLocation: ParsedLocation
    pathChanged: boolean
    hrefChanged: boolean
  }
  onLoad: {
    type: 'onLoad'
    fromLocation?: ParsedLocation
    toLocation: ParsedLocation
    pathChanged: boolean
    hrefChanged: boolean
  }
  onResolved: {
    type: 'onResolved'
    fromLocation?: ParsedLocation
    toLocation: ParsedLocation
    pathChanged: boolean
    hrefChanged: boolean
  }
  onBeforeRouteMount: {
    type: 'onBeforeRouteMount'
    fromLocation?: ParsedLocation
    toLocation: ParsedLocation
    pathChanged: boolean
    hrefChanged: boolean
  }
  onInjectedHtml: {
    type: 'onInjectedHtml'
    promise: Promise<string>
  }
  onRendered: {
    type: 'onRendered'
    fromLocation?: ParsedLocation
    toLocation: ParsedLocation
  }
}

----------------------------------------

TITLE: Configuring Virtual Routes in Vite
DESCRIPTION: Configuration example for virtual routes using the TanStackRouter Vite plugin.

LANGUAGE: tsx
CODE:
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { TanStackRouterVite } from '@tanstack/router-plugin/vite'

export default defineConfig({
  plugins: [
    TanStackRouterVite({
      target: 'react',
      virtualRouteConfig: './routes.ts',
    }),
    react(),
  ],
})

----------------------------------------

TITLE: Using useRouterState Hook in React TypeScript
DESCRIPTION: Demonstrates how to use the useRouterState hook to access router state in a React component. Shows both basic usage and advanced usage with select option for accessing specific state properties.

LANGUAGE: tsx
CODE:
import { useRouterState } from '@tanstack/react-router'

function Component() {
  const state = useRouterState()
  //    ^ RouterState

  // OR

  const selected = useRouterState({
    select: (state) => state.location,
  })
  //    ^ ParsedLocation

  // ...
}

----------------------------------------

TITLE: Default Plugin Configuration
DESCRIPTION: Default configuration options for TanStack Router Plugin with Webpack for file-based routing

LANGUAGE: json
CODE:
{
  "routesDirectory": "./src/routes",
  "generatedRouteTree": "./src/routeTree.gen.ts",
  "routeFileIgnorePrefix": "-",
  "quoteStyle": "single"
}

----------------------------------------

TITLE: Creating New Project Directory
DESCRIPTION: Shell commands to create and initialize a new Node.js project.

LANGUAGE: shell
CODE:
mkdir myApp
cd myApp
npm init -y

----------------------------------------

TITLE: Importing File-Based Route Tree - TanStack Router in TypeScript
DESCRIPTION: Imports a generated route tree from the default location when using file-based routing.

LANGUAGE: tsx
CODE:
import { routeTree } from './routeTree.gen'

----------------------------------------

TITLE: Importing TanStack Router Devtools
DESCRIPTION: Import statements for different devtools components including production version.

LANGUAGE: js
CODE:
import { TanStackRouterDevtools } from '@tanstack/react-router-devtools'

LANGUAGE: tsx
CODE:
import { TanStackRouterDevtoolsInProd } from '@tanstack/react-router-devtools'

----------------------------------------

TITLE: Installing TanStack Router Plugin
DESCRIPTION: Command to install the TanStack Router plugin package for Vite integration

LANGUAGE: sh
CODE:
npm install -D @tanstack/router-plugin

----------------------------------------

TITLE: Package.json Configuration
DESCRIPTION: Package.json configuration for Vinxi CLI integration and module type setting.

LANGUAGE: jsonc
CODE:
{
  "type": "module",
  "scripts": {
    "dev": "vinxi dev",
    "build": "vinxi build",
    "start": "vinxi start",
  },
}

----------------------------------------

TITLE: VSCode Settings for Ignoring Generated Route Tree File
DESCRIPTION: JSON configuration for VSCode to mark the generated route tree file as readonly and exclude it from search results and file watcher.

LANGUAGE: json
CODE:
{
  "files.readonlyInclude": {
    "**/routeTree.gen.ts": true
  },
  "files.watcherExclude": {
    "**/routeTree.gen.ts": true
  },
  "search.exclude": {
    "**/routeTree.gen.ts": true
  }
}

----------------------------------------

TITLE: Configuring 404 Not Found Route - TanStack Router in TypeScript
DESCRIPTION: Sets up a not found route handler by adding a notFoundComponent to the root route configuration. This handles cases where no suitable route match is found.

LANGUAGE: tsx
CODE:
export const Route = createRootRoute({
  component: () => (
    // ...
  ),
  notFoundComponent: () => <div>404 Not Found</div>,
});

----------------------------------------

TITLE: Using Server Functions in Solid Route Handlers
DESCRIPTION: This example shows how to integrate server functions into Solid route handlers. It demonstrates data fetching and state management within a route component.

LANGUAGE: jsx
CODE:
import { createServerData$ } from '@solidjs/router'

const useUser = createServerData$(
  async (_, { request }) => {
    const user = await authenticateUser(request)
    if (!user) {
      throw new Response('Unauthorized', { status: 401 })
    }
    return user
  },
  { key: () => ['user'] }
)

function UserRoute() {
  const user = useUser()
  return (
    <div>
      <h1>Welcome {user()?.name}</h1>
      <p>Email: {user()?.email}</p>
    </div>
  )
}

----------------------------------------

TITLE: File-Based Route Configuration in TypeScript
DESCRIPTION: Demonstrates the simplified file-based routing approach using TanStack Router's file route creation.

LANGUAGE: tsx
CODE:
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/posts/')({
  component: () => 'Posts index component goes here!!!',
})

----------------------------------------

TITLE: Configuring Rspack/Rsbuild with TanStack Router Plugin
DESCRIPTION: Example configuration for Rsbuild/Rspack to use the TanStack Router plugin. It sets up the React plugin and adds the TanStackRouterRspack plugin with specific options.

LANGUAGE: tsx
CODE:
// rsbuild.config.ts
import { defineConfig } from '@rsbuild/core'
import { pluginReact } from '@rsbuild/plugin-react'
import { TanStackRouterRspack } from '@tanstack/router-plugin/rspack'

export default defineConfig({
  plugins: [pluginReact()],
  tools: {
    rspack: {
      plugins: [
        TanStackRouterRspack({ target: 'react', autoCodeSplitting: true }),
      ],
    },
  },
})

----------------------------------------

TITLE: Configuring Post Route Not Found Component with Loader
DESCRIPTION: Demonstrates how to handle missing posts using notFound() in a loader function combined with a notFoundComponent for the UI response.

LANGUAGE: tsx
CODE:
export const Route = createFileRoute('/posts/$postId')({\n  loader: async ({ params: { postId } }) => {\n    const post = await getPost(postId)\n    if (!post) throw notFound()\n    return { post }\n  },\n  component: ({ post }) => {\n    return (\n      <div>\n        <h1>{post.title}</h1>\n        <p>{post.body}</p>\n      </div>\n    )\n  },\n  notFoundComponent: () => {\n    return <p>Post not found!</p>\n  },\n})

----------------------------------------

TITLE: Default Plugin Configuration
DESCRIPTION: Default configuration options for TanStack Router Plugin with Esbuild, including routes directory and file settings.

LANGUAGE: json
CODE:
{
  "routesDirectory": "./src/routes",
  "generatedRouteTree": "./src/routeTree.gen.ts",
  "routeFileIgnorePrefix": "-",
  "quoteStyle": "single"
}

----------------------------------------

TITLE: Building TanStack Router Project
DESCRIPTION: Commands for building the project, including options for full builds and development mode with watchers.

LANGUAGE: bash
CODE:
pnpm build:all
pnpm build
pnpm dev

----------------------------------------

TITLE: Creating Root Route Component
DESCRIPTION: Implementation of the root route component with navigation links and router DevTools setup.

LANGUAGE: typescript
CODE:
import { createRootRoute, Outlet, Link } from '@tanstack/react-router'
import { TanStackRouterDevtools } from '@tanstack/router-devtools'

export const Route = createRootRoute({
  component: () => {
    return (
      <>
        <div>
          <Link to="/" activeOptions={{ exact: true }}>
            Home
          </Link>
          <Link to="/posts">Posts</Link>
        </div>
        <hr />
        <Outlet />
        <TanStackRouterDevtools />
      </>
    )
  },
})

----------------------------------------

TITLE: Implementing Posts Route with Data Loading
DESCRIPTION: Posts route implementation with loader function for data fetching and navigation component setup.

LANGUAGE: typescript
CODE:
import { createFileRoute, Link, Outlet } from '@tanstack/react-router'

export const Route = createFileRoute('/posts')({
  component: Posts,
  loader: async () => {
    const posts = await fetchPosts()
    return {
      posts,
    }
  },
})

function Posts() {
  const { posts } = Route.useLoaderData()
  return (
    <div>
      <nav>
        {posts.map((post) => (
          <Link
            key={post.id}
            to={`/posts/$postId`}
            params={{ postId: post.id }}
          >
            {post.title}
          </Link>
        ))}
      </nav>
      <Outlet />
    </div>
  )
}

----------------------------------------

TITLE: Router Configuration Setup
DESCRIPTION: Router configuration file for TanStack Router integration.

LANGUAGE: tsx
CODE:
// app/router.tsx
import { createRouter as createTanStackRouter } from '@tanstack/react-router'
import { routeTree } from './routeTree.gen'

export function createRouter() {
  const router = createTanStackRouter({
    routeTree,
  })

  return router
}

declare module '@tanstack/react-router' {
  interface Register {
    router: ReturnType<typeof createRouter>
  }
}

----------------------------------------

TITLE: Creating Root Component for TanStack Start Application
DESCRIPTION: Root component file (app/routes/__root.tsx) for TanStack Start, defining the base layout and metadata for all routes.

LANGUAGE: tsx
CODE:
import {
  Outlet,
  createRootRoute,
  HeadContent,
  Scripts,
} from '@tanstack/solid-router'

export const Route = createRootRoute({
  head: () => ({
    meta: [
      {
        charset: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      {
        title: 'TanStack Start Starter',
      },
    ],
  }),
  component: RootComponent,
})

function RootComponent() {
  return <Outlet />
}

----------------------------------------

TITLE: Route Configuration with Parent Route in TypeScript
DESCRIPTION: Shows how to configure routes with parent route relationships for proper type inference.

LANGUAGE: tsx
CODE:
import { createRoute } from '@tanstack/react-router'
import { postsRoute } from './postsRoute'

export const postsIndexRoute = createRoute({
  getParentRoute: () => postsRoute,
  path: '/',
})

----------------------------------------

TITLE: Accessing Static Route Data in Root Component
DESCRIPTION: Shows how to access static route data from matches in a root component using useMatches hook. Demonstrates iteration over matches to display custom data.

LANGUAGE: tsx
CODE:
import { createRootRoute } from '@tanstack/react-router'

export const Route = createRootRoute({
  component: () => {
    const matches = useMatches()

    return (
      <div>
        {matches.map((match) => {
          return <div key={match.id}>{match.staticData.customData}</div>
        })}
      </div>
    )
  },
})

----------------------------------------

TITLE: Complex Search Parameter Selection with Structural Sharing
DESCRIPTION: Example of using select function to transform search parameters while maintaining render optimization.

LANGUAGE: tsx
CODE:
const result = Route.useSearch({
  select: (search) => {
    return {
      foo: search.foo,
      hello: `hello ${search.foo}`,
    }
  },
})

----------------------------------------

TITLE: Configuring TanStack Start Documentation Front Matter
DESCRIPTION: YAML front matter configuration for TanStack Start documentation, including title, reference path, and text replacement rules to convert React documentation to Solid.

LANGUAGE: yaml
CODE:
---
title: TanStack Start Overview
ref: docs/start/framework/react/overview.md
replace:
  {
    'TanStack Start is a full-stack React': 'TanStack Start (**Experimental for Solid**) is a full-stack',
    "- You're looking for a React-Server-Component-first framework. [(]We'll support RSCs soon in our own awesome flavor![)]': '',
    'React': 'Solid',
  }
---

----------------------------------------

TITLE: Router Type Declaration in TypeScript
DESCRIPTION: Demonstrates how to declare router types using TypeScript module declaration for global type inference.

LANGUAGE: tsx
CODE:
declare module '@tanstack/react-router' {
  interface Register {
    router: typeof router
  }
}

----------------------------------------

TITLE: Configuring Default Preload Stale Time in TanStack Router
DESCRIPTION: This snippet illustrates how to set the default preload stale time for TanStack Router, which determines how long preloaded data is considered fresh.

LANGUAGE: tsx
CODE:
import { createRouter } from '@tanstack/react-router'

const router = createRouter({
  // ...
  defaultPreloadStaleTime: 10_000,
})

----------------------------------------

TITLE: Configuring Default Preload Strategy in TanStack Router
DESCRIPTION: This snippet demonstrates how to set the default preload strategy to 'intent' for all routes in a TanStack Router application.

LANGUAGE: tsx
CODE:
import { createRouter } from '@tanstack/react-router'

const router = createRouter({
  // ...
  defaultPreload: 'intent',
})

----------------------------------------

TITLE: Framework Path Alias Configuration in Markdown
DESCRIPTION: Markdown frontmatter configuration specifying document reference and framework replacement instructions to convert React documentation to Solid documentation.

LANGUAGE: markdown
CODE:
---
ref: docs/start/framework/react/path-aliases.md
replace: { 'react': 'solid' }
---

----------------------------------------

TITLE: TanStack Router Configuration File
DESCRIPTION: Basic configuration file for TanStack Router specifying routes directory and generated route tree location.

LANGUAGE: json
CODE:
{
  "routesDirectory": "./src/routes",
  "generatedRouteTree": "./src/routeTree.gen.ts"
}

----------------------------------------

TITLE: Custom UI Navigation Blocking with Hook and Resolver
DESCRIPTION: Shows how to implement a custom UI for navigation blocking using the useBlocker hook with resolver pattern.

LANGUAGE: tsx
CODE:
import { useBlocker } from '@tanstack/react-router'

function MyComponent() {
  const [formIsDirty, setFormIsDirty] = useState(false)

  const { proceed, reset, status } = useBlocker({
    shouldBlockFn: () => formIsDirty,
    withResolver: true,
  })

  // ...

  return (
    <>
      {/* ... */}
      {status === 'blocked' && (
        <div>
          <p>Are you sure you want to leave?</p>
          <button onClick={proceed}>Yes</button>
          <button onClick={reset}>No</button>
        </div>
      )}
    </>
}

----------------------------------------

TITLE: Configuring Netlify Deployment in TanStack Start
DESCRIPTION: Configuration for deploying a TanStack Start application to Netlify using the netlify preset in app.config.ts

LANGUAGE: typescript
CODE:
// app.config.ts
import { defineConfig } from '@tanstack/solid-start/config'

export default defineConfig({
  server: {
    preset: 'netlify',
  },
})

----------------------------------------

TITLE: Installing Core Dependencies
DESCRIPTION: Commands for installing TanStack Start, React Router, and Vinxi dependencies.

LANGUAGE: shell
CODE:
npm i @tanstack/react-start @tanstack/react-router vinxi

----------------------------------------

TITLE: Configuring Hash History Router in TanStack
DESCRIPTION: Shows how to set up hash-based routing using TanStack Router. Hash routing is useful when server doesn't support URL rewrites to index.html.

LANGUAGE: typescript
CODE:
import { createHashHistory, createRouter } from '@tanstack/react-router'

const hashHistory = createHashHistory()

const router = createRouter({ routeTree, history: hashHistory })

----------------------------------------

TITLE: Error Handling with TanStack Query
DESCRIPTION: Demonstrates error handling implementation using TanStack Query's error boundary and reset functionality for graceful error recovery.

LANGUAGE: tsx
CODE:
export const Route = createFileRoute('/posts')({
  loader: () => queryClient.ensureQueryData(postsQueryOptions),
  errorComponent: ({ error, reset }) => {
    const router = useRouter()
    const queryErrorResetBoundary = useQueryErrorResetBoundary()

    useEffect(() => {
      queryErrorResetBoundary.reset()
    }, [queryErrorResetBoundary])

    return (
      <div>
        {error.message}
        <button
          onClick={() => {
            router.invalidate()
          }}
        >
          retry
        </button>
      </div>
    )
  },
})

----------------------------------------

TITLE: Installing Basic TanStack Router Example
DESCRIPTION: Commands to clone the basic TanStack Router example, install dependencies, and start the development server

LANGUAGE: bash
CODE:
npx degit https://github.com/tanstack/router/examples/solid/start-basic start-basic
cd start-basic
npm install
npm run dev

----------------------------------------

TITLE: Configuring Vite with TanStack Router
DESCRIPTION: Configuration setup for Vite to use TanStack Router plugin with React support and auto code splitting enabled

LANGUAGE: typescript
CODE:
// vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { TanStackRouterVite } from '@tanstack/router-plugin/vite'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    TanStackRouterVite({ target: 'react', autoCodeSplitting: true }),
    react(),
    // ...
  ],
})

----------------------------------------

TITLE: Body Scripts Configuration in TanStack Router
DESCRIPTION: Example of configuring body scripts using the routeOptions.scripts property in a root route.

LANGUAGE: tsx
CODE:
export const Route = createRootRoute()({\n  scripts: [\n    {\n      children: 'console.log("Hello, world!")',\n    },\n  ],\n})

----------------------------------------

TITLE: Installing and Running TanStack Router Example with Package Managers
DESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install
npm start

LANGUAGE: bash
CODE:
yarn
yarn start

----------------------------------------

TITLE: Configuring Webpack Plugin
DESCRIPTION: Configuration of TanStack Router Webpack plugin with React target and auto code splitting enabled

LANGUAGE: tsx
CODE:
// webpack.config.ts
import { TanStackRouterWebpack } from '@tanstack/router-plugin/webpack'

export default {
  plugins: [
    TanStackRouterWebpack({ target: 'react', autoCodeSplitting: true }),
  ],
}

----------------------------------------

TITLE: Safe Binary Encoding Function for URL Search Params
DESCRIPTION: Provides a safe method to encode strings to binary format for use in URL search parameters, addressing non-UTF8 character issues.

LANGUAGE: typescript
CODE:
export function encodeToBinary(str: string): string {
  return btoa(
    encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, p1) {
      return String.fromCharCode(parseInt(p1, 16))
    }),
  )
}

----------------------------------------

TITLE: Stripping All Search Params in TanStack Router
DESCRIPTION: Shows how to remove all search parameters using stripSearchParams(true). This approach can only be used when the search schema has no required parameters.

LANGUAGE: tsx
CODE:
import { z } from 'zod'
import { createFileRoute, stripSearchParams } from '@tanstack/react-router'
import { zodValidator } from '@tanstack/zod-adapter'

const searchSchema = z.object({
  one: z.string().default('abc'),
  two: z.string().default('xyz'),
})

export const Route = createFileRoute('/hello')({
  validateSearch: zodValidator(searchSchema),
  search: {
    // remove all search params
    middlewares: [stripSearchParams(true)],
  },
})

----------------------------------------

TITLE: Installing and Running TanStack Router Example
DESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install
npm start

LANGUAGE: bash
CODE:
yarn
yarn start

----------------------------------------

TITLE: Configuring wrangler.toml for Cloudflare Pages
DESCRIPTION: Creates a wrangler.toml configuration file for deploying a TanStack Router application to Cloudflare Pages.

LANGUAGE: toml
CODE:
# wrangler.toml
name = "your-cloudflare-project-name"
pages_build_output_dir = "./dist"
compatibility_flags = ["nodejs_compat"]
compatibility_date = "2024-11-13"

----------------------------------------

TITLE: Stripping Specific Search Params in TanStack Router
DESCRIPTION: Demonstrates how to remove specific search parameters by providing an array of parameter names. This example removes the 'hello' parameter while maintaining a required parameter.

LANGUAGE: tsx
CODE:
import { z } from 'zod'
import { createRootRoute, stripSearchParams } from '@tanstack/react-router'
import { zodValidator } from '@tanstack/zod-adapter'

const searchSchema = z.object({
  hello: z.string().default('world'),
  requiredParam: z.string(),
})

export const Route = createRootRoute({
  validateSearch: zodValidator(searchSchema),
  search: {
    // always remove `hello`
    middlewares: [stripSearchParams(['hello'])],
  },
})

----------------------------------------

TITLE: Starting TanStack Router Example Project (npm/yarn)
DESCRIPTION: Commands to start the TanStack Router example project using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm start

LANGUAGE: shell
CODE:
yarn start

----------------------------------------

TITLE: Using Path Aliases in Imports
DESCRIPTION: Example showing how to use the configured path alias in import statements, comparing the new shorter syntax with the traditional relative path approach.

LANGUAGE: typescript
CODE:
// app/routes/posts/$postId/edit.tsx
import { Input } from '~/components/ui/input'

// instead of

import { Input } from '../../../components/ui/input'

----------------------------------------

TITLE: Extending HistoryState Interface in TypeScript
DESCRIPTION: Example showing how to declare additional properties for the HistoryState interface. This code extends the @tanstack/react-router module to add both required and optional custom properties to the state object.

LANGUAGE: typescript
CODE:
// src/main.tsx
declare module '@tanstack/react-router' {
  // ...

  interface HistoryState {
    additionalRequiredProperty: number
    additionalProperty?: string
  }
}

----------------------------------------

TITLE: Configuring Route Tree with Lazy Routes in TanStack Router
DESCRIPTION: This snippet shows how to set up a route tree using createRootRouteWithContext and createRoute, including the integration of a lazy-loaded route.

LANGUAGE: tsx
CODE:
// src/routeTree.tsx
import {
  createRootRouteWithContext,
  createRoute,
  Outlet,
} from '@tanstack/react-router'

interface MyRouterContext {
  foo: string
}

const rootRoute = createRootRouteWithContext<MyRouterContext>()({ 
  component: () => <Outlet />,
})

const indexRoute = createRoute({
  getParentRoute: () => rootRoute,
  path: '/',
}).lazy(() => import('./route-pages/index').then((d) => d.Route))

export const routeTree = rootRoute.addChildren([indexRoute])

----------------------------------------

TITLE: Installing and Running TanStack Router Example
DESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install
npm start

LANGUAGE: shell
CODE:
yarn
yarn start

----------------------------------------

TITLE: Configuring Path Aliases in app.config.ts
DESCRIPTION: Configuration for the Vite plugin in app.config.ts to enable path alias support in the TanStack Router project.

LANGUAGE: typescript
CODE:
// app.config.ts
import { defineConfig } from '@tanstack/react-start/config'
import viteTsConfigPaths from 'vite-tsconfig-paths'

export default defineConfig({
  vite: {
    plugins: [
      // this is the plugin that enables path aliases
      viteTsConfigPaths({
        projects: ['./tsconfig.json'],
      }),
    ],
  },
})

----------------------------------------

TITLE: Creating a Lazy Route with createLazyRoute in React
DESCRIPTION: This example demonstrates how to use createLazyRoute to define a lazy-loaded route for the index page. It includes the route definition and the associated component.

LANGUAGE: tsx
CODE:
// src/route-pages/index.tsx
import { createLazyRoute } from '@tanstack/react-router'

export const Route = createLazyRoute('/')({
  component: IndexComponent,
})

function IndexComponent() {
  const data = Route.useLoaderData()
  return <div>{data}</div>
}

----------------------------------------

TITLE: Running Example Projects
DESCRIPTION: Commands for navigating to and running example projects in the repository.

LANGUAGE: bash
CODE:
cd examples/react/basic
pnpm dev

----------------------------------------

TITLE: Installing and Starting TanStack Router Example
DESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install
npm start

LANGUAGE: bash
CODE:
yarn
yarn start

----------------------------------------

TITLE: Implementing Manual Scroll Restoration with TanStack Router and Virtual in React
DESCRIPTION: This code snippet demonstrates how to implement manual scroll restoration in a React component using TanStack Router and TanStack Virtual. It uses a unique scroll restoration ID and integrates with a virtualized list to maintain scroll position across navigations.

LANGUAGE: tsx
CODE:
function Component() {
  // We need a unique ID for manual scroll restoration on a specific element
  // It should be as unique as possible for this element across your app
  const scrollRestorationId = 'myVirtualizedContent'

  // We use that ID to get the scroll entry for this element
  const scrollEntry = useElementScrollRestoration({
    id: scrollRestorationId,
  })

  // Let's use TanStack Virtual to virtualize some content!
  let virtualizerParentRef: any
  const virtualizer = createVirtualizer({
    count: 10000,
    getScrollElement: () => virtualizerParentRef,
    estimateSize: () => 100,
    // We pass the scrollY from the scroll restoration entry to the virtualizer
    // as the initial offset
    initialOffset: scrollEntry?.scrollY,
  })

  return (
    <div
      ref={virtualizerParentRef}
      // We pass the scroll restoration ID to the element
      // as a custom attribute that will get picked up by the
      // scroll restoration watcher
      data-scroll-restoration-id={scrollRestorationId}
      class="flex-1 border rounded-lg overflow-auto relative"
    >
      ...
    </div>
  )
}

----------------------------------------

TITLE: Embedding Analytics Tracking Image in HTML
DESCRIPTION: This snippet embeds an image tag used for analytics tracking. The image source includes a unique identifier, likely for user or session tracking purposes.

LANGUAGE: HTML
CODE:
<img src="https://static.scarf.sh/a.png?x-pxid=d988eb79-b0fc-4a2b-8514-6a1ab932d188" />

----------------------------------------

TITLE: Setting Up TanStack.com Development Environment
DESCRIPTION: Commands to navigate to the TanStack.com directory, install dependencies, and start the development server.

LANGUAGE: sh
CODE:
cd tanstack.com
pnpm i
# The app will run on https://localhost:3000 by default
pnpm dev

----------------------------------------

TITLE: Installing Dependencies for tanstack-router Example (npm/yarn)
DESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.

LANGUAGE: markdown
CODE:
- `npm install` or `yarn`

----------------------------------------

TITLE: Route File Path Examples in TanStack Router
DESCRIPTION: Examples showing equivalent route file paths and their corresponding URLs.

LANGUAGE: txt
CODE:
src/routes/posts.tsx -> /posts
src/routes/posts.route.tsx -> /posts
src/routes/posts/route.tsx -> /posts

----------------------------------------

TITLE: Starting TanStack Router Example Project (npm/yarn)
DESCRIPTION: Commands to start the TanStack Router example project using either npm or yarn package managers.

LANGUAGE: markdown
CODE:
- `npm start` or `yarn start`

----------------------------------------

TITLE: Installing and Running TanStack Router Trello Example
DESCRIPTION: Commands to install dependencies and start the development server for the Trello-like example application using pnpm package manager

LANGUAGE: sh
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Installing Dependencies for TanStack Router
DESCRIPTION: Commands for installing project dependencies using either npm or yarn package manager.

LANGUAGE: shell
CODE:
npm install

LANGUAGE: shell
CODE:
yarn

----------------------------------------

TITLE: Demonstrating Route File Structure in TanStack Router
DESCRIPTION: Example of route file structure showing ignored components using routeFileIgnorePrefix.

LANGUAGE: txt
CODE:
src/routes
├── posts
│   ├── -components  // Ignored
│   │   ├── Post.tsx
│   ├── index.tsx
│   ├── route.tsx

----------------------------------------

TITLE: Cloning TanStack Repositories
DESCRIPTION: Commands to clone the TanStack.com website repository and a TanStack project repository (using 'form' as an example) into the 'tanstack' directory.

LANGUAGE: sh
CODE:
cd tanstack
git clone git@github.com:TanStack/tanstack.com.git
git clone git@github.com:TanStack/form.git

----------------------------------------

TITLE: Creating Directory for TanStack Projects
DESCRIPTION: Command to create a new directory called 'tanstack' for hosting TanStack projects.

LANGUAGE: sh
CODE:
mkdir tanstack

----------------------------------------

TITLE: Starting TanStack Router Example
DESCRIPTION: Commands for starting the example project using either npm or yarn package manager.

LANGUAGE: shell
CODE:
npm start

LANGUAGE: shell
CODE:
yarn start

----------------------------------------

TITLE: Configuring Default Routes Directory Path in TanStack Router
DESCRIPTION: Default path configuration for the routes directory relative to the current working directory.

LANGUAGE: txt
CODE:
./src/routes

----------------------------------------

TITLE: Installing and Running TanStack Router Development Server
DESCRIPTION: Commands to install dependencies and start the development server for the TanStack Router project.

LANGUAGE: sh
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Using Query Function in React
DESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook with typed arguments.

LANGUAGE: typescript
CODE:
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: 'hello',
})

----------------------------------------

TITLE: Installing Dependencies for TanStack Router Example (Shell)
DESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install

LANGUAGE: shell
CODE:
yarn

----------------------------------------

TITLE: Implementing Code-Based Route Configuration
DESCRIPTION: Complete example of code-based routing setup with root, index, and about routes defined programmatically

LANGUAGE: tsx
CODE:
import { render } from 'solid-js/web'
import {
  Outlet,
  RouterProvider,
  Link,
  createRouter,
  createRoute,
  createRootRoute,
} from '@tanstack/solid-router'
import { TanStackRouterDevtools } from '@tanstack/solid-router-devtools'

const rootRoute = createRootRoute({
  component: () => (
    <>
      <div class="p-2 flex gap-2">
        <Link to="/" class="[&.active]:font-bold">
          Home
        </Link>{' '}
        <Link to="/about" class="[&.active]:font-bold">
          About
        </Link>
      </div>
      <hr />
      <Outlet />
      <TanStackRouterDevtools />
    </>
  ),
})

const indexRoute = createRoute({
  getParentRoute: () => rootRoute,
  path: '/',
  component: function Index() {
    return (
      <div class="p-2">
        <h3>Welcome Home!</h3>
      </div>
    )
  },
})

const aboutRoute = createRoute({
  getParentRoute: () => rootRoute,
  path: '/about',
  component: function About() {
    return <div class="p-2">Hello from About!</div>
  },
})

const routeTree = rootRoute.addChildren([indexRoute, aboutRoute])

const router = createRouter({ routeTree })

declare module '@tanstack/solid-router' {
  interface Register {
    router: typeof router
  }
}

const rootElement = document.getElementById('app')!
if (!rootElement.innerHTML) {
  render(() => <RouterProvider router={router} />, rootElement)
}

----------------------------------------

TITLE: Cloning TanStack Repositories
DESCRIPTION: Commands to clone the TanStack.com repository and a specific project repository (in this case, 'form') into the 'tanstack' directory.

LANGUAGE: sh
CODE:
cd tanstack
git clone git@github.com:TanStack/tanstack.com.git
git clone git@github.com:TanStack/form.git

----------------------------------------

TITLE: Creating Directory for TanStack Projects
DESCRIPTION: Command to create a new directory called 'tanstack' for hosting TanStack projects and documentation repositories.

LANGUAGE: sh
CODE:
mkdir tanstack

----------------------------------------

TITLE: Installing and Running TanStack Router Example
DESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install
npm start

LANGUAGE: shell
CODE:
yarn
yarn start

----------------------------------------

TITLE: Setting Up Local Development Environment
DESCRIPTION: Commands for entering the project directory, installing dependencies, and starting the development server on the default port 3000.

LANGUAGE: sh
CODE:
cd tanstack.com
pnpm i
# The app will run on https://localhost:3000 by default
pnpm dev

----------------------------------------

TITLE: Setting Up Local Development Environment
DESCRIPTION: Commands for entering the project directory, installing dependencies, and starting the development server on the default port 3000.

LANGUAGE: sh
CODE:
cd tanstack.com
pnpm i
# The app will run on https://localhost:3000 by default
pnpm dev

----------------------------------------

TITLE: Creating TanStack Directory Structure
DESCRIPTION: Command to create a new directory for TanStack projects.

LANGUAGE: sh
CODE:
mkdir tanstack

----------------------------------------

TITLE: Configuring Vercel Deployment in TanStack Router
DESCRIPTION: Sets the server preset to 'vercel' in the app.config.ts file for deploying a TanStack Router application to Vercel.

LANGUAGE: typescript
CODE:
// app.config.ts
import { defineConfig } from '@tanstack/react-start/config'

export default defineConfig({
  server: {
    preset: 'vercel',
  },
})

----------------------------------------

TITLE: Installing Dependencies for TanStack Router Example (npm/yarn)
DESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.

LANGUAGE: markdown
CODE:
- `npm install` or `yarn`

----------------------------------------

TITLE: Setting Up TanStack.com Development Environment
DESCRIPTION: Commands to navigate to the tanstack.com directory, install dependencies, and start the development server.

LANGUAGE: sh
CODE:
cd tanstack.com
pnpm i
# The app will run on https://localhost:3000 by default
pnpm dev

----------------------------------------

TITLE: Using JSON Helper Function in API Routes
DESCRIPTION: This snippet demonstrates the use of the 'json' helper function to simplify JSON responses in API routes. It automatically sets the Content-Type header and serializes the JSON object.

LANGUAGE: typescript
CODE:
// routes/api/hello.ts
import { json } from '@tanstack/react-start'
import { createAPIFileRoute } from '@tanstack/react-start/api'

export const APIRoute = createAPIFileRoute('/api/hello')({
  GET: async ({ request }) => {
    return json({ message: 'Hello, World!' })
  },
})

----------------------------------------

TITLE: Configuring Basic Static Prerendering in TanStack Router
DESCRIPTION: Basic configuration setup for enabling static prerendering in a TanStack Router application. Demonstrates how to configure prerendering for the root route with crawling enabled.

LANGUAGE: javascript
CODE:
// app.config.js

import { defineConfig } from '@tanstack/react-start/config'

export default defineConfig({
  server: {
    prerender: {
      routes: ['/'],
      crawlLinks: true,
    },
  },
})

----------------------------------------

TITLE: Using Server Functions in No-JS Environments
DESCRIPTION: Demonstrates how to use server functions when JavaScript is disabled, using HTML forms.

LANGUAGE: tsx
CODE:
const yourFn = createServerFn({ method: 'POST' })
  .validator((formData) => {
    if (!(formData instanceof FormData)) {
      throw new Error('Invalid form data')
    }

    const name = formData.get('name')

    if (!name) {
      throw new Error('Name is required')
    }

    return name
  })
  .handler(async ({ data: name }) => {
    console.log(name) // 'John'
  })

function Component() {
  return (
    <form action={yourFn.url} method="POST">
      <input name="name" defaultValue="John" />
      <button type="submit">Click me!</button>
    </form>
  )
}

----------------------------------------

TITLE: Installing Dependencies with Package Managers
DESCRIPTION: Commands for installing project dependencies using either npm or yarn package manager.

LANGUAGE: shell
CODE:
npm install

LANGUAGE: shell
CODE:
yarn

----------------------------------------

TITLE: Implementing Static Server Function in TanStack Router
DESCRIPTION: Creates a static server function using createServerFn with the static type option. This function will be executed at build time and its result cached as a static asset.

LANGUAGE: tsx
CODE:
const myServerFn = createServerFn({ type: 'static' }).handler(async () => {
  return 'Hello, world!'
})

----------------------------------------

TITLE: Accepting Parameters in Server Functions
DESCRIPTION: Shows how to create a server function that accepts a parameter and performs input validation.

LANGUAGE: typescript
CODE:
import { createServerFn } from '@tanstack/react-start'

export const greet = createServerFn({
  method: 'GET',
})
  .validator((data: string) => data)
  .handler(async (ctx) => {
    return `Hello, ${ctx.data}!`
  })

greet({
  data: 'John',
})

----------------------------------------

TITLE: Configuring Server Function Options in TypeScript
DESCRIPTION: Demonstrates how to set configuration options when creating a server function.

LANGUAGE: typescript
CODE:
import { createServerFn } from '@tanstack/react-start'

export const getData = createServerFn({
  method: 'GET', // HTTP method to use
  response: 'data', // Response handling mode
}).handler(async () => {
  // Function implementation
})

----------------------------------------

TITLE: Installing and Running TanStack Router Example
DESCRIPTION: Commands to install dependencies and start the development server for a TanStack Router example project using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Configuring Firebase Environment Variables
DESCRIPTION: Environment variables required for Firebase configuration including API keys and project identifiers. These values should be obtained from your Firebase project console and stored in .env.local file.

LANGUAGE: env
CODE:
VITE_FIREBASE_API_KEY=
VITE_FIREBASE_AUTH_DOMAIN=
VITE_FIREBASE_PROJECT_ID=
VITE_FIREBASE_STORAGE_BUCKET=
VITE_FIREBASE_MESSAGING_SENDER_ID=
VITE_FIREBASE_APP_ID=

----------------------------------------

TITLE: Sending Client Context to Server in TanStack Router Middleware
DESCRIPTION: This snippet shows how to send client context to the server using middleware. It demonstrates sending a workspaceId from the client to the server.

LANGUAGE: tsx
CODE:
const requestLogger = createMiddleware()
  .client(async ({ next, context }) => {
    return next({
      sendContext: {
        // Send the workspace ID to the server
        workspaceId: context.workspaceId,
      },
    })
  })
  .server(async ({ next, data, context }) => {
    // Woah! We have the workspace ID from the client!
    console.log('Workspace ID:', context.workspaceId)
    return next()
  })

----------------------------------------

TITLE: Advanced Hook-Based Custom UI Blocking
DESCRIPTION: Shows how to implement navigation blocking with a custom modal system using Promises for more complex UI interactions.

LANGUAGE: tsx
CODE:
import { useBlocker } from '@tanstack/solid-router'

function MyComponent() {
  const [formIsDirty, setFormIsDirty] = createSignal(false)

  useBlocker({
    shouldBlockFn: () => {
      if (!formIsDirty()) {
        return false
      }

      const shouldBlock = new Promise<boolean>((resolve) => {
        // Using a modal manager of your choice
        modals.open({
          title: 'Are you sure you want to leave?',
          children: (
            <SaveBlocker
              confirm={() => {
                modals.closeAll()
                resolve(false)
              }}
              reject={() => {
                modals.closeAll()
                resolve(true)
              }}
            />
          ),
          onClose: () => resolve(true),
        })
      })
      return shouldBlock
    },
  })

  // ...
}

----------------------------------------

TITLE: Setting Up Test Routes for TanStack Router Scroll Restoration
DESCRIPTION: Instructions for creating and updating test routes in the TanStack Router scroll restoration testing sandbox.

LANGUAGE: markdown
CODE:
- Create your files in `src/routes` directory.
- Make sure you update the arrays in the following files with the expected routes
  - `tests/app.spec.ts` > routes array
  - `src/routes/__root.tsx` > Nav component, routes array
  - `src/routes/index.tsx` > Navigation test suite, routes array

----------------------------------------

TITLE: Mapping Lazy Routes in TanStack Router App
DESCRIPTION: In the app's main file, a map of routes to components is created, tying the router to the components. Types are used to ensure the lazy route matches the correct route path, preventing runtime errors.

LANGUAGE: TypeScript
CODE:
// Example structure from packages/app/src/main.tsx (not actual code)
const routeMap = {
  '/posts': createLazyRoute('posts'),
  '/posts/$postId': createLazyRoute('post'),
} as const;

----------------------------------------

TITLE: Creating TanStack Directory Structure
DESCRIPTION: Command to create the base directory for TanStack local development

LANGUAGE: sh
CODE:
mkdir tanstack

----------------------------------------

TITLE: Implementing Client-side RPC Function for TanStack Server Functions
DESCRIPTION: Creates a client-side RPC function that uses fetch to call server functions. It includes URL construction, argument serialization, and optional property assignment for debugging.

LANGUAGE: typescript
CODE:
function createClientRpc(functionId: string) {
  const url = `${process.env.YOUR_SERVER_BASE}/_server-fn/${functionId}`

  const fn = async (...args: any[]) => {
    const res = await fetch(url, {
      method: 'POST',
      // You'll likely want to use a better serializer here
      body: JSON.stringify(args),
    })

    return await res.json()
  }

  // You can also assign any other properties you want to the function
  // for things like form actions, or debugging
  Object.assign(fn, {
    url: url,
  })

  return fn
}

----------------------------------------

TITLE: Cloning TanStack Repositories
DESCRIPTION: Commands to clone the TanStack website and form repositories for local development

LANGUAGE: sh
CODE:
cd tanstack
git clone git@github.com:TanStack/tanstack.com.git
git clone git@github.com:TanStack/form.git

----------------------------------------

TITLE: Configuring TanStack Server Functions Plugin in TypeScript
DESCRIPTION: Creates a new instance of the TanStack Server Functions Plugin with client, SSR, and server configurations. It defines the manifest virtual import ID and runtime code for each environment.

LANGUAGE: typescript
CODE:
const TanStackServerFnsPlugin = createTanStackServerFnPlugin({
  manifestVirtualImportId: 'tsr:server-fn-manifest',
  client: {
    getRuntimeCode: () =>
      `import { createClientRpc } from '@tanstack/react-start/client-runtime'`,
    replacer: (opts) => `createClientRpc(${JSON.stringify(opts.functionId)})`,
  },
  ssr: {
    getRuntimeCode: () =>
      `import { createSsrRpc } from '@tanstack/react-start/ssr-runtime'`,
    replacer: (opts) => `createSsrRpc(${JSON.stringify(opts.functionId)})`,
  },
  server: {
    getRuntimeCode: () =>
      `import { createServerRpc } from '@tanstack/react-start/server-runtime'`,
    replacer: (opts) =>
      `createServerRpc(${JSON.stringify(opts.functionId)}, ${opts.fn})`,
  },
})

----------------------------------------

TITLE: Installation Commands for Scroll Restoration Test Setup
DESCRIPTION: Basic npm commands to install dependencies and start the testing environment.

LANGUAGE: shell
CODE:
npm install
npm start

----------------------------------------

TITLE: Installing TanStack Router Plugin via NPM
DESCRIPTION: Command to install the TanStack Router Plugin as a development dependency using npm package manager.

LANGUAGE: bash
CODE:
npm install -D @tanstack/router-plugin

----------------------------------------

TITLE: File Path References for Route Configuration
DESCRIPTION: List of critical file paths where route configurations need to be updated for testing setup.

LANGUAGE: plaintext
CODE:
tests/app.spec.ts > routes array
src/routes/__root.tsx > Nav component, routes array
src/routes/index.tsx > Navigation test suite, routes array

----------------------------------------

TITLE: Installing and Running TanStack Router Example
DESCRIPTION: Commands for installing project dependencies and starting the example application using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install
npm start

LANGUAGE: bash
CODE:
yarn
yarn start

----------------------------------------

TITLE: Front Matter Configuration for Framework Documentation
DESCRIPTION: YAML front matter that defines the document reference path and replacement instructions to convert React documentation to Solid framework version.

LANGUAGE: yaml
CODE:
---
ref: docs/start/framework/react/ssr.md
replace: { 'react': 'solid' }
---

----------------------------------------

TITLE: Installing Dependencies for TanStack Router Example
DESCRIPTION: Command to install project dependencies using either npm or yarn package manager.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Installing TanStack Router Repository
DESCRIPTION: Commands for cloning the repository and installing project dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
gh repo clone TanStack/router
pnpm install
pnpm exec playwright install

----------------------------------------

TITLE: Installing and Running TanStack Router Example
DESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install
npm start

LANGUAGE: shell
CODE:
yarn
yarn start

----------------------------------------

TITLE: Starting the Example Project
DESCRIPTION: Commands for starting the example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm start

LANGUAGE: bash
CODE:
yarn start

----------------------------------------

TITLE: Installing Dependencies with Package Managers
DESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Installing and Running the Trello Clone Project
DESCRIPTION: Commands to install project dependencies and start the development server using pnpm package manager.

LANGUAGE: shell
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Cloning TanStack Repositories
DESCRIPTION: Commands to navigate to the tanstack directory and clone both the main website and form project repositories.

LANGUAGE: sh
CODE:
cd tanstack
git clone git@github.com:TanStack/tanstack.com.git
git clone git@github.com:TanStack/form.git

----------------------------------------

TITLE: Starting TanStack Router Example Project (Shell)
DESCRIPTION: Commands to start the TanStack Router example project using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm start

LANGUAGE: shell
CODE:
yarn start

----------------------------------------

TITLE: Installing and Running Tanstack Router Example
DESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install
npm start

LANGUAGE: shell
CODE:
yarn
yarn start

----------------------------------------

TITLE: Starting TanStack Router Example
DESCRIPTION: Commands for starting the example project using either npm or yarn package manager.

LANGUAGE: shell
CODE:
npm start

LANGUAGE: shell
CODE:
yarn start

----------------------------------------

TITLE: Starting TanStack Router Example Project (npm/yarn)
DESCRIPTION: Commands to start the TanStack Router example project using either npm or yarn package managers.

LANGUAGE: markdown
CODE:
- `npm start` or `yarn start`

----------------------------------------

TITLE: Installing Dependencies for TanStack Router Example (npm/yarn)
DESCRIPTION: Commands to install project dependencies using either npm or yarn package managers.

LANGUAGE: markdown
CODE:
- `npm install` or `yarn`

----------------------------------------

TITLE: Installing and Running TanStack Router Example
DESCRIPTION: Commands to install dependencies and start the example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install
npm start

LANGUAGE: bash
CODE:
yarn
yarn start

----------------------------------------

TITLE: Installing and Running TanStack Router Example
DESCRIPTION: Commands for installing dependencies and starting the example project using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install
npm start

LANGUAGE: bash
CODE:
yarn
yarn start

----------------------------------------

TITLE: Installing and Running TanStack Router Example
DESCRIPTION: Commands for installing project dependencies and starting the example project using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install
npm start

LANGUAGE: shell
CODE:
yarn
yarn start

----------------------------------------

TITLE: Setting Up Local Development Environment
DESCRIPTION: Commands to install dependencies and start the development server in the TanStack.com directory

LANGUAGE: sh
CODE:
cd tanstack.com
pnpm i
# The app will run on https://localhost:3000 by default
pnpm dev

----------------------------------------

TITLE: Installing and Running TanStack Router Scroll Restoration Test Sandbox
DESCRIPTION: Commands for installing dependencies and starting the test sandbox for TanStack Router scroll restoration testing.

LANGUAGE: markdown
CODE:
- `npm install`
- `npm start`

----------------------------------------

TITLE: Running Development Server for tanstack-router Example (Shell)
DESCRIPTION: Command to start the development server for the tanstack-router example project.

LANGUAGE: shell
CODE:
pnpm dev

----------------------------------------

TITLE: Installing Dependencies for tanstack-router Example (Shell)
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: shell
CODE:
pnpm install

----------------------------------------

TITLE: Configuring Vite Plugin for TanStack Router
DESCRIPTION: Vite configuration setup for TanStack Router with SolidJS integration and auto code splitting enabled

LANGUAGE: tsx
CODE:
// vite.config.ts
import { defineConfig } from 'vite'
import solid from 'vite-plugin-solid'
import { TanStackRouterVite } from '@tanstack/router-plugin/vite'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    TanStackRouterVite({ target: 'solid', autoCodeSplitting: true }),
    solid(),
    // ...,
  ],
})

----------------------------------------

TITLE: Setting up Router Configuration for TanStack Start
DESCRIPTION: Router configuration file (app/router.tsx) for TanStack Router, including route tree and scroll restoration settings.

LANGUAGE: tsx
CODE:
import { createRouter as createTanStackRouter } from '@tanstack/solid-router'
import { routeTree } from './routeTree.gen'

export function createRouter() {
  const router = createTanStackRouter({
    routeTree,
    scrollRestoration: true,
  })

  return router
}

declare module '@tanstack/solid-router' {
  interface Register {
    router: ReturnType<typeof createRouter>
  }
}

----------------------------------------

TITLE: Default TanStack Router CLI Configuration
DESCRIPTION: Default configuration options for TanStack Router CLI including routes directory, generated file location, and formatting preferences.

LANGUAGE: json
CODE:
{
  "routesDirectory": "./src/routes",
  "generatedRouteTree": "./src/routeTree.gen.ts",
  "routeFileIgnorePrefix": "-",
  "quoteStyle": "single"
}

----------------------------------------

TITLE: Default TanStack Router Plugin Configuration
DESCRIPTION: Default configuration options for the TanStack Router Plugin when used with Rspack or Rsbuild for file-based routing.

LANGUAGE: json
CODE:
{
  "routesDirectory": "./src/routes",
  "generatedRouteTree": "./src/routeTree.gen.ts",
  "routeFileIgnorePrefix": "-",
  "quoteStyle": "single"
}

----------------------------------------

TITLE: Default Route Tree File Header Configuration
DESCRIPTION: Default content prepended to the generated route tree file.

LANGUAGE: json
CODE:
[
  "/* eslint-disable */",
  "// @ts-nocheck",
  "// noinspection JSUnusedGlobalSymbols"
]

----------------------------------------

TITLE: Cloning TanStack Repositories
DESCRIPTION: Commands to navigate to the 'tanstack' directory and clone the TanStack.com and Form repositories.

LANGUAGE: sh
CODE:
cd tanstack
git clone git@github.com:TanStack/tanstack.com.git
git clone git@github.com:TanStack/form.git

----------------------------------------

TITLE: Creating Directory for TanStack Projects
DESCRIPTION: Command to create a new directory called 'tanstack' for hosting TanStack projects.

LANGUAGE: sh
CODE:
mkdir tanstack

----------------------------------------

TITLE: Installing and Running TanStack Router Development Environment
DESCRIPTION: Commands to install dependencies and start the development server for the TanStack Router project.

LANGUAGE: sh
CODE:
pnpm install
pnpm dev