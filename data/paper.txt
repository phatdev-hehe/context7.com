TITLE: Paper Server Startup with Aikar's Flags
DESCRIPTION: Complete JVM startup command with optimized flags for running a Paper Minecraft server. Includes memory allocation, G1GC configuration, and performance tuning parameters.

LANGUAGE: bash
CODE:
java -Xms10G -Xmx10G -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -Dusing.aikars.flags=https://mcflags.emc.gs -Daikars.new.flags=true -jar paper.jar --nogui

----------------------------------------

TITLE: Configuring Gradle for Paper Project in Kotlin
DESCRIPTION: This snippet shows how to set up the build.gradle.kts file for a Paper project. It includes adding the Paper repository, specifying the Paper API dependency, and setting the Java language version.

LANGUAGE: kotlin
CODE:
repositories {
    mavenCentral()
    maven("https://repo.papermc.io/repository/maven-public/")
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.19.4-R0.1-SNAPSHOT")
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

----------------------------------------

TITLE: Creating a Basic Custom Event in Java for Paper
DESCRIPTION: Demonstrates how to create a basic custom event class that extends Event. Includes the required HandlerList and associated methods.

LANGUAGE: java
CODE:
public class PaperIsCoolEvent extends Event {

    private static final HandlerList HANDLER_LIST = new HandlerList();

    public static HandlerList getHandlerList() {
        return HANDLER_LIST;
    }

    @Override
    public HandlerList getHandlers() {
        return HANDLER_LIST;
    }
}

----------------------------------------

TITLE: Creating a Listener Class in Java for Bukkit Plugins
DESCRIPTION: Demonstrates how to create a basic listener class that implements the Listener interface. This is the foundation for handling events in Bukkit plugins.

LANGUAGE: java
CODE:
public class ExampleListener implements Listener {
    // ...
}

----------------------------------------

TITLE: Configuring Paper Dependencies with Gradle Kotlin DSL
DESCRIPTION: Build configuration for adding Paper as a dependency using Gradle Kotlin DSL. Sets up the Paper repository and configures the Paper API dependency with Java 21 toolchain.

LANGUAGE: kotlin
CODE:
repositories {
    maven {
        name = "papermc"
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:%%_MAJ_MIN_PAT_MC_%%-R0.1-SNAPSHOT")
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(21))
}

----------------------------------------

TITLE: Declaring Dependencies in paper-plugin.yml
DESCRIPTION: Example of how to declare dependencies for a Paper plugin in the paper-plugin.yml file. It shows how to specify bootstrap and server dependencies with load order, requirements, and classpath joining options.

LANGUAGE: yaml
CODE:
dependencies:
  bootstrap:
    RegistryPlugin:
      load: BEFORE
      required: true
      join-classpath: true
  server:
    RequiredPlugin:
      load: AFTER
      required: true
      join-classpath: false

----------------------------------------

TITLE: Basic Paper Plugin Implementation
DESCRIPTION: Example implementation of a basic Paper plugin main class that extends JavaPlugin and implements a player join event listener.

LANGUAGE: java
CODE:
package io.papermc.testplugin;

import net.kyori.adventure.text.Component;
import org.bukkit.Bukkit;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.plugin.java.JavaPlugin;

public class ExamplePlugin extends JavaPlugin implements Listener {

    @Override
    public void onEnable() {
        Bukkit.getPluginManager().registerEvents(this, this);
    }

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        event.getPlayer().sendMessage(Component.text("Hello, " + event.getPlayer().getName() + "!"));
    }

}

----------------------------------------

TITLE: Creating Event Handler Method in Java
DESCRIPTION: Demonstrates how to create an event handler method using the @EventHandler annotation and specifying the event type as a parameter.

LANGUAGE: java
CODE:
public class ExampleListener implements Listener {

    @EventHandler
    public void onPlayerMove(PlayerMoveEvent event) {
        // ...
    }
}

----------------------------------------

TITLE: Registering Commands in JavaPlugin for Paper Minecraft Plugin
DESCRIPTION: Demonstrates how to register commands inside the onEnable method of a JavaPlugin using the LifecycleEventManager. This approach registers commands that won't be available to datapack functions.

LANGUAGE: java
CODE:
public class YourPluginClass extends JavaPlugin {

    @Override
    public void onEnable() {
        LifecycleEventManager<Plugin> manager = this.getLifecycleManager();
        manager.registerEventHandler(LifecycleEvents.COMMANDS, event -> {
            final Commands commands = event.registrar();
            commands.register(
                Commands.literal("new-command")
                    .executes(ctx -> {
                        ctx.getSource().getSender().sendPlainMessage("some message");
                        return Command.SINGLE_SUCCESS;
                    })
                    .build(),
                "some bukkit help description string",
                List.of("an-alias")
            );
        });
    }
}

----------------------------------------

TITLE: Basic Paper Plugin Implementation
DESCRIPTION: Example implementation of a basic Paper plugin main class that extends JavaPlugin. Demonstrates event handling for player join events using the Paper API.

LANGUAGE: java
CODE:
package io.papermc.testplugin;

import net.kyori.adventure.text.Component;
import org.bukkit.Bukkit;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.plugin.java.JavaPlugin;

public class ExamplePlugin extends JavaPlugin implements Listener {

    @Override
    public void onEnable() {
        Bukkit.getPluginManager().registerEvents(this, this);
    }

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        event.getPlayer().sendMessage(Component.text("Hello, " + event.getPlayer().getName() + "!"));
    }

}

----------------------------------------

TITLE: Example Bukkit Plugin YML Configuration
DESCRIPTION: Demonstrates a basic plugin.yml configuration with essential fields such as name, version, main class, description, author, website, and API version.

LANGUAGE: yaml
CODE:
name: ExamplePlugin
version: 1.0.0
main: io.papermc.testplugin.ExamplePlugin
description: An example plugin
author: PaperMC
website: https://papermc.io
api-version: '%%_MAJ_MIN_PAT_MC_%%'

----------------------------------------

TITLE: Running Paper Server via Command Line
DESCRIPTION: Basic command to start a Paper Minecraft server with 4GB RAM allocation and disabled GUI. The command sets minimum and maximum heap size and specifies the server JAR file to execute.

LANGUAGE: bash
CODE:
java -Xms4G -Xmx4G -jar paper.jar --nogui

----------------------------------------

TITLE: Basic Plugin.yml Structure Example
DESCRIPTION: Shows the basic required fields for a plugin.yml file including name, version, main class, and API version.

LANGUAGE: yaml
CODE:
name: ExamplePlugin
version: 1.0.0
main: io.papermc.testplugin.ExamplePlugin
description: An example plugin
author: PaperMC
website: https://papermc.io
api-version: '%%_MAJ_MIN_PAT_MC_%%'

----------------------------------------

TITLE: Configuring Gradle Build for Paper Plugin
DESCRIPTION: Basic Gradle configuration for a Paper plugin project, including repository setup, dependencies, and Java toolchain configuration.

LANGUAGE: kotlin
CODE:
repositories {
    mavenCentral()
    maven("https://repo.papermc.io/repository/maven-public/")
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:%%_MAJ_MIN_PAT_MC_%%-R0.1-SNAPSHOT")
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(21))
}

----------------------------------------

TITLE: Configuring Paper Plugin YAML
DESCRIPTION: Example configuration for paper-plugin.yml showing basic plugin metadata including name, version, main class, and API version. Also demonstrates bootstrapper and loader configuration.

LANGUAGE: yaml
CODE:
name: Paper-Test-Plugin
version: '1.0'
main: io.papermc.testplugin.TestPlugin
description: Paper Test Plugin
api-version: '1.19'
bootstrapper: io.papermc.testplugin.TestPluginBootstrap
loader: io.papermc.testplugin.TestPluginLoader

----------------------------------------

TITLE: Configuring paper-plugin.yml for Paper Plugins
DESCRIPTION: Example configuration for a paper-plugin.yml file, which is used to define a Paper plugin. It includes basic plugin information, API version, and references to bootstrapper and loader classes.

LANGUAGE: yaml
CODE:
name: Paper-Test-Plugin
version: '1.0'
main: io.papermc.testplugin.TestPlugin
description: Paper Test Plugin
api-version: '%%_MAJ_MIN_PAT_MC_%%'
bootstrapper: io.papermc.testplugin.TestPluginBootstrap
loader: io.papermc.testplugin.TestPluginLoader

----------------------------------------

TITLE: Creating a Player-Specific Display Entity in Java
DESCRIPTION: This code shows how to create a display entity that is only visible to specific players and can be mounted on another entity. It also demonstrates proper cleanup of temporary displays.

LANGUAGE: java
CODE:
TextDisplay display = world.spawn(location, TextDisplay.class, entity -> {
    // ...

    entity.setVisibleByDefault(false); // hide it for everyone
    entity.setPersistent(false); // don't save the display, it's temporary
});

entity.addPassenger(display); // mount it on top of an entity's head
player.showEntity(plugin, display); // show it to a player
// ...
display.remove(); // done with the display

----------------------------------------

TITLE: Registering Commands in Plugin Main Class
DESCRIPTION: Shows how to register commands inside a plugin's main class using the LifecycleEventManager. This method is an alternative for plugins not using paper-plugin.yml.

LANGUAGE: java
CODE:
public final class PluginMainClass extends JavaPlugin {

    @Override
    public void onEnable() {
        this.getLifecycleManager().registerEventHandler(LifecycleEvents.COMMANDS, commands -> {
            // register your commands here ...
        });
    }
}

----------------------------------------

TITLE: Implementing Runnable Task in Java
DESCRIPTION: This example shows how to create a separate class implementing Runnable for a scheduled task in a Bukkit plugin.

LANGUAGE: java
CODE:
public class MyRunnableTask implements Runnable {

    private final MyPlugin plugin;

    public MyRunnableTask(MyPlugin plugin) {
        this.plugin = plugin;
    }

    @Override
    public void run() {
        this.plugin.getServer().broadcast(Component.text("Hello, World!"));
    }
}

----------------------------------------

TITLE: Implementing Player Argument Command in Java
DESCRIPTION: Creates a command that uses the player argument to select a single player and 'yeet' them into the air. It demonstrates how to resolve the PlayerSelectorArgumentResolver and manipulate the selected player.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> playerArgument() {
    return Commands.literal("player")
        .then(Commands.argument("target", ArgumentTypes.player())
            .executes(ctx -> {
                final PlayerSelectorArgumentResolver targetResolver = ctx.getArgument("target", PlayerSelectorArgumentResolver.class);
                final Player target = targetResolver.resolve(ctx.getSource()).getFirst();

                target.setVelocity(new Vector(0, 100, 0));
                target.sendRichMessage("<rainbow>Yeeeeeeeeeet");

                ctx.getSource().getSender().sendRichMessage("Yeeted <target>!",
                    Placeholder.component("target", target.name())
                );
                return Command.SINGLE_SUCCESS;
            }))
        .build();
}

----------------------------------------

TITLE: Creating Components in Java
DESCRIPTION: Demonstrates two methods of creating components in Java: a sub-optimal approach creating new instances with each change, and an optimal approach using a builder pattern.

LANGUAGE: java
CODE:
// This is a sub-optimal construction of the
// component as each change creates a new component
final Component component = Component.text("Hello")
    .color(TextColor.color(0x13f832))
    .append(Component.text(" world!", NamedTextColor.GREEN));

/* This is an optimal use of the builder to create
   the same component. Also note that Adventure
   Components are designed for use with static method imports
   to make code less verbose */
final Component component = text()
    .content("Hello").color(color(0x13f832))
    .append(text(" world!", GREEN))
    .build();

----------------------------------------

TITLE: Implementing BukkitRunnable Class
DESCRIPTION: Demonstrates creating a custom BukkitRunnable class that can self-cancel when needed.

LANGUAGE: java
CODE:
public class CustomRunnable extends BukkitRunnable {

    private final UUID entityId;

    public CustomRunnable(UUID uuid) {
        this.entityId = uuid;
    }

    @Override
    public void run() {
        Entity entity = Bukkit.getServer().getEntity(this.entityId);

        if (entity instanceof LivingEntity livingEntity) {
            livingEntity.addPotionEffect(new PotionEffect(PotionEffectType.SPEED, 20, 1));
            return;
        }

        task.cancel();
    }
}

----------------------------------------

TITLE: Custom Configuration File Loading
DESCRIPTION: Example of loading and saving custom configuration files using YamlConfiguration

LANGUAGE: java
CODE:
File file = new File(plugin.getDataFolder(), "items.yml");
YamlConfiguration config = YamlConfiguration.loadConfiguration(file);
// Work with config here
config.save(file);

----------------------------------------

TITLE: Implementing BukkitRunnable in Java
DESCRIPTION: This example demonstrates how to create a custom BukkitRunnable class for a scheduled task that can cancel itself without needing access to the BukkitTask instance.

LANGUAGE: java
CODE:
public class CustomRunnable extends BukkitRunnable {

    private final UUID entityId;

    public CustomRunnable(UUID uuid) {
        this.entityId = uuid;
    }

    @Override
    public void run() {
        Entity entity = Bukkit.getServer().getEntity(this.entityId);

        if (entity instanceof LivingEntity livingEntity) {
            livingEntity.addPotionEffect(new PotionEffect(PotionEffectType.SPEED, 20, 1));
            return;
        }

        this.cancel(); // The entity is no longer valid, there's no point in continuing to run this task
    }
}

----------------------------------------

TITLE: Adding Functionality to Custom Event in Java for Paper Minecraft Plugin
DESCRIPTION: This snippet shows how to add functionality to the custom event by including a message property with getter and setter methods.

LANGUAGE: java
CODE:
public class PaperIsCoolEvent extends Event {

    private static final HandlerList HANDLER_LIST = new HandlerList();
    private Component message;

    public PaperIsCoolEvent(Component message) {
        this.message = message;
    }

    public static HandlerList getHandlerList() {
        return HANDLER_LIST;
    }

    @Override
    public HandlerList getHandlers() {
        return HANDLER_LIST;
    }

    public Component getMessage() {
        return this.message;
    }
    
    public void setMessage(Component message) {
        this.message = message;
    }
}

----------------------------------------

TITLE: Java 8-10 GC Logging Configuration
DESCRIPTION: GC logging flags for Java versions 8-10 to enable detailed garbage collection analysis and logging rotation.

LANGUAGE: bash
CODE:
-Xloggc:gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=1M

----------------------------------------

TITLE: Adding Data to PDC in Java
DESCRIPTION: Demonstrates how to create a NamespacedKey and store a string value in the PDC of an ItemMeta object.

LANGUAGE: java
CODE:
// Create a NamespacedKey
NamespacedKey key = new NamespacedKey(pluginInstance, "example-key");

ItemStack item = new ItemStack(Material.DIAMOND);
// ItemMeta implements PersistentDataHolder, so we can get the PDC from it
ItemMeta meta = item.getItemMeta();
meta.getPersistentDataContainer().set(key, PersistentDataType.STRING, "I love Tacos!");
item.setItemMeta(meta);

----------------------------------------

TITLE: Handling Cancellable Custom Event in Java for Paper Minecraft Plugin
DESCRIPTION: This snippet demonstrates how to handle a cancellable custom event in the plugin class, checking if the event is cancelled before broadcasting the message.

LANGUAGE: java
CODE:
public class ExamplePlugin extends JavaPlugin {

    // ...

    public void callCoolPaperEvent() {
        PaperIsCoolEvent coolEvent = new PaperIsCoolEvent(Component.text("Paper is cool!"));
        if (coolEvent.callEvent()) { // Directly get the output from callEvent
            Bukkit.broadcast(coolEvent.getMessage());
        }
    }
}

----------------------------------------

TITLE: Setting Event Priority in Java
DESCRIPTION: Demonstrates how to set the priority of an event handler using the priority parameter in the @EventHandler annotation.

LANGUAGE: java
CODE:
public class ExampleListener implements Listener {

    @EventHandler(priority = EventPriority.HIGH)
    public void onPlayerMove(PlayerMoveEvent event) {
        // ...
    }
}

----------------------------------------

TITLE: Initializing SQLite Database Connection in Java
DESCRIPTION: Demonstrates how to establish a basic SQLite database connection using JDBC driver. The code loads the SQLite driver class and creates a connection to a database file.

LANGUAGE: java
CODE:
public class DatabaseManager {

    public void connect() {
        Class.forName("org.sqlite.JDBC");
        Connection connection = DriverManager.getConnection("jdbc:sqlite:plugins/TestPlugin/database.db");
    }
}

----------------------------------------

TITLE: Implementing Custom InventoryHolder in Java for Bukkit
DESCRIPTION: This snippet demonstrates how to create a custom InventoryHolder class that implements the InventoryHolder interface. It includes a constructor that creates an Inventory and the required getInventory() method.

LANGUAGE: java
CODE:
public class MyInventory implements InventoryHolder {

    private final Inventory inventory;

    public MyInventory(MyPlugin plugin) {
        // Create an Inventory with 9 slots, `this` here is our InventoryHolder.
        this.inventory = plugin.getServer().createInventory(this, 9);
    }

    @Override
    public Inventory getInventory() {
        return this.inventory;
    }

}

----------------------------------------

TITLE: Setting JVM Startup Flags for Minecraft Server
DESCRIPTION: These flags optimize memory usage and garbage collection for Minecraft servers. They are designed to work with any amount of allocated memory, but modern Minecraft versions require a significant amount for optimal performance.

LANGUAGE: bash
CODE:
java -Xms10G -Xmx10G -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -Dusing.aikars.flags=https://mcflags.emc.gs -Daikars.new.flags=true -jar paper.jar --nogui

----------------------------------------

TITLE: Calling a Custom Event in Java for Bukkit/Paper Plugins
DESCRIPTION: This snippet shows how to call a custom event from within a plugin. It creates an instance of the custom event, calls it, and then broadcasts a message. It also demonstrates how to handle potential modifications made by other plugins listening to the event.

LANGUAGE: java
CODE:
public class ExamplePlugin extends JavaPlugin {

    // ...

    public void callCoolPaperEvent() {
        PaperIsCoolEvent coolEvent = new PaperIsCoolEvent(Component.text("Paper is cool!"));
        coolEvent.callEvent();
        // Plugins could have changed the message from inside their listeners here. So we need to get the message again.
        // This event structure allows for other plugins to change the message to their taste.
        // Like, for example, a plugin that adds a prefix to all messages.
        Bukkit.broadcast(coolEvent.getMessage());
    }
}

----------------------------------------

TITLE: Retrieving Data from PDC
DESCRIPTION: Shows how to retrieve previously stored data from a PDC using a NamespacedKey and the correct PersistentDataType.

LANGUAGE: java
CODE:
// Create a NamespacedKey
NamespacedKey key = new NamespacedKey(pluginInstance, "example-key");

ItemStack item = ...; // Retrieve the item from before
// Get the data from the PDC
PersistentDataContainer container = item.getItemMeta().getPersistentDataContainer();
if (container.has(key, PersistentDataType.STRING)) {
    String value = container.get(key, PersistentDataType.STRING);
    // Do something with the value
    player.sendMessage(Component.text(value));
}

----------------------------------------

TITLE: Accessing LifecycleManager in Plugin
DESCRIPTION: Demonstrates how to access the LifecycleEventManager from a plugin's main class.

LANGUAGE: java
CODE:
@Override
public void onEnable() {
    final LifecycleEventManager<Plugin> lifecycleManager = this.getLifecycleManager();
}

----------------------------------------

TITLE: Registering Commands in PluginBootstrap for Paper Minecraft Plugin
DESCRIPTION: Shows how to register commands in a plugin's bootstrapper, making them available to datapack functions. This method uses the same approach as JavaPlugin but in a different context.

LANGUAGE: java
CODE:
public class YourPluginBootstrap implements PluginBootstrap {

    @Override
    public void bootstrap(BootstrapContext context) {
        LifecycleEventManager<BootstrapContext> manager = context.getLifecycleManager();
        // Same as for JavaPlugin
    }
}

----------------------------------------

TITLE: Accessing LifecycleManager in Plugin
DESCRIPTION: Demonstrates how to access the LifecycleEventManager from a plugin's main class.

LANGUAGE: java
CODE:
@Override
public void onEnable() {
    final LifecycleEventManager<Plugin> lifecycleManager = this.getLifecycleManager();
}

----------------------------------------

TITLE: Creating Shaped Recipe in Bukkit
DESCRIPTION: Demonstrates how to create a shaped recipe for a diamond sword using specific pattern placement. Uses ShapedRecipe class to define a crafting pattern where diamonds and sticks must be placed in exact positions.

LANGUAGE: java
CODE:
public class TestPlugin extends JavaPlugin {
    @Override
    public void onEnable() {
        NamespacedKey key = new NamespacedKey(this, "WarriorSword");
        ItemStack item = new ItemStack(Material.DIAMOND_SWORD);

        ShapedRecipe recipe = new ShapedRecipe(key, item);
        recipe.shape(" A ", "AAA", " B ");
        recipe.setIngredient('A', Material.DIAMOND);
        recipe.setIngredient('B', Material.STICK);

        getServer().addRecipe(recipe);
    }
}

----------------------------------------

TITLE: Using MiniMessage for Component Creation in Java
DESCRIPTION: Shows how to use the MiniMessage library to create components from string representations, including a helper method for more concise usage.

LANGUAGE: java
CODE:
final Component component = MiniMessage.miniMessage().deserialize(
    "<#438df2><b>This is the parent component; its style is " +
    "applied to all children.\n<u><!b>This is the first child, " +
    "which is rendered after the parent</!b></u><key:key.inventory></b></#438df2>"
);


// if the syntax above is too verbose for you, create a helper method!

public final class Components {
    public static Component mm(String miniMessageString) { // mm, short for MiniMessage
        return MiniMessage.miniMessage().deserialize(miniMessageString);
    }
}

// ...

import static io.papermc.docs.util.Components.mm; // replace with your own package

final Component component = mm("<blue>Hello <red>World!");

----------------------------------------

TITLE: Accessing Event HandlerList Examples in Java
DESCRIPTION: Demonstrates different ways to access an event's HandlerList through both an event instance and static access. Shows implementation within a Listener class using PlayerJoinEvent as an example.

LANGUAGE: java
CODE:
public class ExampleListener implements Listener {

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        HandlerList handlerList = event.getHandlerList();
        // ...
    }
    
    // Or:
    
    public ExampleListener() {
        // Access the handler list through the static getter
        HandlerList handlerList = PlayerJoinEvent.getHandlerList();
        // ...
    }
}

----------------------------------------

TITLE: Defining a Basic Custom Event in Java for Bukkit/Paper
DESCRIPTION: This snippet shows how to create a basic custom event class extending Event and implementing the required HandlerList methods. It demonstrates the minimal structure needed for a custom event in Bukkit/Paper plugins.

LANGUAGE: java
CODE:
public class PaperIsCoolEvent extends Event {

    private static final HandlerList HANDLER_LIST = new HandlerList();

    public static HandlerList getHandlerList() {
        return HANDLER_LIST;
    }

    @Override
    public HandlerList getHandlers() {
        return HANDLER_LIST;
    }
}

----------------------------------------

TITLE: Obtaining BukkitScheduler Instance
DESCRIPTION: Shows how to get the scheduler instance from the server in the onEnable method of a plugin.

LANGUAGE: java
CODE:
@Override
public void onEnable() {
    BukkitScheduler scheduler = this.getServer().getScheduler();
}

----------------------------------------

TITLE: Initializing a Root Command in Java with Brigadier
DESCRIPTION: Shows how to create the root of a command tree using Brigadier's LiteralArgumentBuilder.

LANGUAGE: java
CODE:
LiteralArgumentBuilder<CommandSourceStack> root = Commands.literal("customplugin");

----------------------------------------

TITLE: Logging Debug Messages in Paper Plugins
DESCRIPTION: Demonstrates how to log debug messages using the plugin's component logger instead of System.out.println(). This approach provides better plugin identification in logs.

LANGUAGE: java
CODE:
plugin.getComponentLogger().debug(Component.text("SuperDuperBad Thing has happened"));

----------------------------------------

TITLE: Logging Debug Messages in Paper Plugins
DESCRIPTION: Demonstrates how to log debug messages using the plugin's component logger instead of System.out.println(). This approach provides better plugin identification in logs.

LANGUAGE: java
CODE:
plugin.getComponentLogger().debug(Component.text("SuperDuperBad Thing has happened"));

----------------------------------------

TITLE: Implementing Number Arguments with Range Constraints
DESCRIPTION: Demonstrates how to use number arguments with range constraints. The example creates a 'flyspeed' command that accepts a float value between 0 and 1.

LANGUAGE: java
CODE:
Commands.literal("flyspeed")
    .then(Commands.argument("speed", FloatArgumentType.floatArg(0, 1.0f))
        .executes(ctx -> {
            float speed = ctx.getArgument("speed", float.class);
            /* Set player's flight speed */
            return Command.SINGLE_SUCCESS;
        })
    );

----------------------------------------

TITLE: Enhanced InventoryHolder with Click Counter
DESCRIPTION: Advanced implementation of the custom InventoryHolder that includes click tracking functionality and dynamic inventory updates. Demonstrates how to store and manage custom data within the holder.

LANGUAGE: java
CODE:
public class MyInventory implements InventoryHolder {

    private final Inventory inventory;

    private int clicks = 0; // Store the amount of clicks.

    public MyInventory(MyPlugin plugin) {
        this.inventory = plugin.getServer().createInventory(this, 9);

        // Set the stone that we're going to be clicking.
        this.inventory.setItem(0, ItemStack.of(Material.STONE));
    }

    // A method we will call in the listener whenever the player clicks the stone.
    public void addClick() {
        this.clicks++;
        this.updateCounter();
    }

    // A method that will update the counter item.
    private void updateCounter() {
        this.inventory.setItem(8, ItemStack.of(Material.BEDROCK, this.clicks));
    }

    @Override
    public Inventory getInventory() {
        return this.inventory;
    }

}

----------------------------------------

TITLE: Registering Commands in PluginBootstrap
DESCRIPTION: Demonstrates how to register commands inside a plugin bootstrapper using the LifecycleEventManager. This method is preferred for paper-plugin.yml plugins.

LANGUAGE: java
CODE:
public class CustomPluginBootstrap implements PluginBootstrap {

    @Override
    public void bootstrap(BootstrapContext context) {
        context.getLifecycleManager().registerEventHandler(LifecycleEvents.COMMANDS, commands -> {
            // register your commands here ...
        });
    }
}

----------------------------------------

TITLE: Saving Plugin Configuration in Java
DESCRIPTION: Shows how to save the default configuration file in a Paper plugin's onEnable method, with options to replace existing files.

LANGUAGE: java
CODE:
public class TestPlugin extends JavaPlugin {

    @Override
    public void onEnable() {
        saveResource("config.yml", /* replace */ false);

        // You can also use this for configuration files:
        saveDefaultConfig();
        // Where the default config.yml will be saved if it does not already exist

        // getConfig()...
    }
}

----------------------------------------

TITLE: Implementing ConfigurationSerializable for Custom Classes in Java
DESCRIPTION: Shows how to create a custom class that can be serialized and deserialized in configuration files by implementing ConfigurationSerializable.

LANGUAGE: java
CODE:
public class TeleportOptions implements ConfigurationSerializable {

    private int chunkX;
    private int chunkZ;
    private String name;

    public TeleportOptions(int chunkX, int chunkZ, String name) {
        // Set the values
    }

    public Map<String, Object> serialize() {
        Map<String, Object> data = new HashMap<>();

        data.put("chunk-x", this.chunkX);
        data.put("chunk-z", this.chunkZ);
        data.put("name", this.name);

        return data;
    }

    public static TeleportOptions deserialize(Map<String, Object> args) {
        return new TeleportOptions(
                (int) args.get("chunk-x"),
                (int) args.get("chunk-z"),
                (String) args.get("name")
        );
    }
}

----------------------------------------

TITLE: Adding Subcommands to a Root Command in Java
DESCRIPTION: Demonstrates how to add subcommands to a root command using the .then() method in Brigadier.

LANGUAGE: java
CODE:
LiteralArgumentBuilder<CommandSourceStack> root = Commands.literal("customplugin");
root.then(Commands.literal("reload"));
root.then(Commands.literal("tphere"));
root.then(Commands.literal("killall"));

----------------------------------------

TITLE: Implementing MySQL Connection with HikariCP
DESCRIPTION: Example showing how to configure and use HikariCP connection pooling with MySQL, including connection pool settings and basic usage pattern.

LANGUAGE: java
CODE:
public class DatabaseManager {

    public void connect() {
        HikariConfig config = new HikariConfig();
        config.setJdbcUrl("jdbc://mysql://localhost:3306/mydatabase"); // Address of your running MySQL database
        config.setUsername("username"); // Username
        config.setPassword("password"); // Password
        config.setMaximumPoolSize(10); // Pool size defaults to 10

        config.addDataSourceProperty("", ""); // MISC settings to add
        HikariDataSource dataSource = new HikariDataSource(config);

        try (Connection connection = dataSource.getConnection()) {
            // Use a try-with-resources here to autoclose the connection.
            PreparedStatement sql = connection.prepareStatement("SQL");
            // Execute statement
        } catch (Exception e) {
            // Handle any exceptions that arise from getting / handing the exception.
        }
    }
}

----------------------------------------

TITLE: Implementing Listener Interface in Java
DESCRIPTION: Shows how to create a class that implements the Listener interface, which is required for handling Bukkit events.

LANGUAGE: java
CODE:
public class ExampleListener implements Listener {
    // ...
}

----------------------------------------

TITLE: Creating Text Display Entity in Minecraft
DESCRIPTION: Demonstrates how to spawn and configure a TextDisplay entity with custom text, billboard settings and background color.

LANGUAGE: java
CODE:
TextDisplay display = world.spawn(location, TextDisplay.class, entity -> {
    entity.text(Component.text("Some awesome content", NamedTextColor.BLACK));
    entity.setBillboard(Display.Billboard.VERTICAL);
    entity.setBackgroundColor(Color.RED);
});

----------------------------------------

TITLE: Using Entity Scheduler for Entity-Specific Tasks
DESCRIPTION: Shows how to obtain and use the entity scheduler for executing tasks that need to follow an entity as it moves between regions.

LANGUAGE: java
CODE:
EntityScheduler scheduler = entity.getScheduler();

----------------------------------------

TITLE: Implementing Named Color Argument Handler in Java
DESCRIPTION: Creates a command that handles named color selections from the 16 built-in colors. Applies the selected color to a user-provided message.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> namedColorArgument() {
    return Commands.literal("namedcolor")
        .then(Commands.argument("color", ArgumentTypes.namedColor())
            .then(Commands.argument("message", StringArgumentType.greedyString())
                .executes(ctx -> {
                    final NamedTextColor color = ctx.getArgument("color", NamedTextColor.class);
                    final String msg = StringArgumentType.getString(ctx, "message");

                    ctx.getSource().getSender().sendMessage(
                        Component.text(msg).color(color)
                    );
                    return Command.SINGLE_SUCCESS;
                })))
        .build();
}

----------------------------------------

TITLE: Creating Components in Java using Adventure API
DESCRIPTION: Demonstrates two methods of creating text components using the Adventure API: a sub-optimal approach creating new instances with each change, and an optimal approach using a builder pattern.

LANGUAGE: java
CODE:
// This is a sub-optimal construction of the
// component as each change creates a new component
final Component component = Component.text("Hello")
    .color(TextColor.color(0x13f832))
    .append(Component.text(" world!", NamedTextColor.GREEN));

/* This is an optimal use of the builder to create
   the same component. Also note that Adventure
   Components are designed for use with static method imports
   to make code less verbose */
final Component component = text()
    .content("Hello").color(color(0x13f832))
    .append(text(" world!", GREEN))
    .build();

----------------------------------------

TITLE: Handling Inventory Click Events
DESCRIPTION: Shows how to create an event listener for inventory interactions that specifically targets inventories using the custom InventoryHolder.

LANGUAGE: java
CODE:
@EventHandler
public void onInventoryClick(InventoryClickEvent event) {
    Inventory inventory = event.getInventory();
    // Check if the holder is our MyInventory,
    // if yes, use instanceof pattern matching to store it in a variable immediately.
    if (!(inventory.getHolder(false) instanceof MyInventory myInventory)) {
        // It's not our inventory, ignore it.
        return;
    }

    // Do what we need in the event.
}

----------------------------------------

TITLE: Making Players Look at Positions or Entities in Java
DESCRIPTION: Shows how to use the lookAt API to make a player face a specific position or entity. The LookAnchor parameter determines whether the player's eyes or feet are used as the reference point.

LANGUAGE: java
CODE:
player.lookAt(
    position,
    LookAnchor.EYES // the player's eyes will be facing the position
);

player.lookAt(
    entity,
    LookAnchor.EYES // the player's eyes will be facing the entity
    LookAnchor.FEET // the player will be facing the entity's feet
);

----------------------------------------

TITLE: Implementing Style Argument Handler in Java
DESCRIPTION: Implements a command that processes Adventure style arguments using JSON format. Applies the style to a provided message component.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> styleArgument() {
    return Commands.literal("style")
        .then(Commands.argument("style", ArgumentTypes.style())
            .then(Commands.argument("message", StringArgumentType.greedyString())
                .executes(ctx -> {
                    final Style style = ctx.getArgument("style", Style.class);
                    final String msg = StringArgumentType.getString(ctx, "message");

                    ctx.getSource().getSender().sendRichMessage("Your input: <input>",
                        Placeholder.component("input", Component.text(message).style(style))
                    );
                    return Command.SINGLE_SUCCESS;
                })))
        .build();
}

----------------------------------------

TITLE: Creating Block Display Entity in Minecraft
DESCRIPTION: Shows how to spawn and configure a BlockDisplay entity to display a grass block.

LANGUAGE: java
CODE:
BlockDisplay display = world.spawn(location, BlockDisplay.class, entity -> {
    entity.setBlock(Material.GRASS_BLOCK.createBlockData());
});

----------------------------------------

TITLE: Registering Outgoing Plugin Channel in Java
DESCRIPTION: Demonstrates how to register an outgoing plugin channel for the BungeeCord messaging system in a Paper plugin.

LANGUAGE: java
CODE:
public final class PluginMessagingSample extends JavaPlugin {

    @Override
    public void onEnable() {
        getServer().getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");
        // Blah blah blah...
    }

}

----------------------------------------

TITLE: Using Lambda Expression for ChatRenderer in Java
DESCRIPTION: This snippet shows how to use a lambda expression to implement the ChatRenderer in the AsyncChatEvent handler. It's an alternative to implementing the ChatRenderer interface in a separate class.

LANGUAGE: java
CODE:
public class ChatListener implements Listener {

    @EventHandler
    public void onChat(AsyncChatEvent event) {
        event.renderer((source, sourceDisplayName, message, viewer) -> {
            // ...
        });
    }
}

----------------------------------------

TITLE: Creating Custom Enchantment in Paper Plugin Bootstrap
DESCRIPTION: Demonstrates creating a new custom enchantment during server bootstrap phase using the registry freeze event.

LANGUAGE: java
CODE:
public class TestPluginBootstrap implements PluginBootstrap {

    @Override
    public void bootstrap(BootstrapContext context) {
        // Register a new handler for the freeze lifecycle event on the enchantment registry
        context.getLifecycleManager().registerEventHandler(RegistryEvents.ENCHANTMENT.freeze().newHandler(event -> {
            event.registry().register(
                // The key of the registry
                // Plugins should use their own namespace instead of minecraft or papermc
                EnchantmentKeys.create(Key.key("papermc:pointy")),
                b -> b.description(Component.text("Pointy"))
                    .supportedItems(event.getOrCreateTag(ItemTypeTagKeys.SWORDS))
                    .anvilCost(1)
                    .maxLevel(25)
                    .weight(10)
                    .minimumCost(EnchantmentRegistryEntry.EnchantmentCost.of(1, 1))
                    .maximumCost(EnchantmentRegistryEntry.EnchantmentCost.of(3, 1))
                    .activeSlots(EquipmentSlotGroup.ANY)
            );
        }));
    }
}

----------------------------------------

TITLE: Implementing Signed Message Argument Handler in Java
DESCRIPTION: Demonstrates handling of signed messages in commands, allowing players to send verifiable messages. Includes target player selection and message signing verification.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> signedMessageArgument() {
    return Commands.literal("signedmessage")
        .then(Commands.argument("target", ArgumentTypes.player())
            .then(Commands.argument("message", ArgumentTypes.signedMessage())
                .executes(MinecraftArguments::executeSignedMessageCommand)))
        .build();
}

private static int executeSignedMessageCommand(final CommandContext<CommandSourceStack> ctx) throws CommandSyntaxException {
    final Player target = ctx.getArgument("target", PlayerSelectorArgumentResolver.class).resolve(ctx.getSource()).getFirst();
    final SignedMessageResolver messageResolver = ctx.getArgument("message", SignedMessageResolver.class);

    messageResolver.resolveSignedMessage("message", ctx).thenAccept(msg -> {
        target.sendMessage(msg, ChatType.CHAT.bind(ctx.getSource().getSender().name()));
    });


    return Command.SINGLE_SUCCESS;
}

----------------------------------------

TITLE: ChatRenderer Method Implementation
DESCRIPTION: Core method structure for rendering chat messages in Paper. Shows the basic parameters needed for chat message customization including source player, display name, message content, and viewer.

LANGUAGE: java
CODE:
public Component render(Player source, Component sourceDisplayName, Component message, Audience viewer) {
    // ...
}

----------------------------------------

TITLE: ChatRenderer Interface Implementation
DESCRIPTION: Example of implementing the ChatRenderer interface in a listener class, showing how to set up a custom renderer for chat events using the class implementation approach.

LANGUAGE: java
CODE:
public class ChatListener implements Listener, ChatRenderer { // Implement the ChatRenderer and Listener interface

    // Listen for the AsyncChatEvent
    @EventHandler
    public void onChat(AsyncChatEvent event) {
        event.renderer(this); // Tell the event to use our renderer
    }

    // Override the render method
    @Override
    public Component render(Player source, Component sourceDisplayName, Component message, Audience viewer) {
        // ...
    }
}

----------------------------------------

TITLE: Shorthand Lifecycle Event Handler Registration
DESCRIPTION: Demonstrates a concise way to register a lifecycle event handler without separate configuration steps. This method is useful for simple handlers that don't require specific priority or monitor settings.

LANGUAGE: java
CODE:
@Override
public void onEnable() {
  final LifecycleEventManager<Plugin> lifecycleManager = this.getLifecycleManager();
  lifecycleManager.registerEventHandler(LifecycleEvents.COMMANDS, (event) -> {
    // Handler for the event
  });
}

----------------------------------------

TITLE: Using Translatable Components
DESCRIPTION: Shows how to create a translatable component using a translation key with arguments

LANGUAGE: java
CODE:
final Component message = Component.translatable("some.translation.key", Component.text("The Argument"))

----------------------------------------

TITLE: Retrieving Information from Audience using Pointers in Java
DESCRIPTION: Shows how to use the pointer system to retrieve arbitrary information from an Audience, such as UUID and display name. Demonstrates the use of Optional for handling potentially missing data.

LANGUAGE: java
CODE:
// Get the uuid from an audience member, returning an Optional<UUID>
Optional<UUID> uuid = audience.get(Identity.UUID);

// Get the display name, returning a default
Component name = audience.getOrDefault(Identity.DISPLAY_NAME, Component.text("no display name!"));

----------------------------------------

TITLE: Storing List Data in PDC in Java
DESCRIPTION: Shows how to store and retrieve a list of strings in a PersistentDataContainer using different methods.

LANGUAGE: java
CODE:
// Storing a list of strings in a container by verbosely creating
// a list data type wrapping the string data type.
container.set(
  key,
  PersistentDataType.LIST.listTypeFrom(PersistentDataType.STRING),
  List.of("a", "list", "of", "strings")
);

// Storing a list of strings in a container by using the api
// provided pre-definitions of commonly used list types.
container.set(key, PersistentDataType.LIST.strings(), List.of("a", "list", "of", "strings"));

// Retrieving a list of strings from the container.
List<String> strings = container.get(key, PersistentDataType.LIST.strings());

----------------------------------------

TITLE: ItemStack PDC Direct Access
DESCRIPTION: Demonstrates the optimized way to edit an ItemStack's PDC without creating ItemMeta.

LANGUAGE: java
CODE:
ItemStack itemStack = ...;
itemStack.editPersistentDataContainer(pdc -> {
    pdc.set(key, PersistentDataType.STRING, "I love Tacos!");
});

----------------------------------------

TITLE: Opening Custom Inventory for Player in Java
DESCRIPTION: Demonstrates how to instantiate the custom MyInventory class and open the inventory for a player. This code snippet shows the process of creating and displaying the custom inventory.

LANGUAGE: java
CODE:
Player player; // Assume we have a Player instance.
               // This can be a command, another event or anywhere else you have a Player.

MyInventory myInventory = new MyInventory(myPlugin);
player.openInventory(myInventory.getInventory());

----------------------------------------

TITLE: Ignoring Cancelled Events in Java for Bukkit Plugins
DESCRIPTION: Shows how to ignore cancelled events by setting the ignoreCancelled parameter in the @EventHandler annotation. This is useful when you only want to handle events that haven't been cancelled by other plugins.

LANGUAGE: java
CODE:
public class ExampleListener implements Listener {

    @EventHandler(ignoreCancelled = true)
    public void onPlayerMove(PlayerMoveEvent event) {
        // ...
    }
}

----------------------------------------

TITLE: Defining a Basic Command Structure in YAML
DESCRIPTION: Demonstrates a simple command structure with a root command and several subcommands.

LANGUAGE: yaml
CODE:
/customplugin reload
/customplugin tphere
/customplugin killall

----------------------------------------

TITLE: Setting Custom Model Data on ItemStack in Java
DESCRIPTION: Demonstrates how to set a custom model data value on an ItemStack using a builder pattern.

LANGUAGE: java
CODE:
// Set a custom model data value on this item
stack.setData(DataComponentTypes.CUSTOM_MODEL_DATA, CustomModelData.customModelData()
    .addFloat(0.5f)
    .addFlag(true)
    .build()
);

----------------------------------------

TITLE: Implementing Paper Plugin Bootstrapper
DESCRIPTION: Java code example showing how to implement the PluginBootstrap interface for a Paper plugin, allowing custom initialization logic.

LANGUAGE: java
CODE:
public class TestPluginBootstrap implements PluginBootstrap {

    @Override
    public void bootstrap(@NotNull BootstrapContext context) {

    }

    @Override
    public @NotNull JavaPlugin createPlugin(@NotNull PluginProviderContext context) {
        return new TestPlugin("My custom parameter");
    }

}

----------------------------------------

TITLE: Setting Event Priority in Java for Paper Minecraft Plugin Event Handlers
DESCRIPTION: Shows how to set the priority of an event handler using the priority parameter in the @EventHandler annotation. This determines the order in which event handlers are called.

LANGUAGE: java
CODE:
public class ExampleListener implements Listener {

    @EventHandler(priority = EventPriority.HIGH)
    public void onPlayerJoin(PlayerJoinEvent event) {
        // ...
    }
}

----------------------------------------

TITLE: Setting Up TranslationRegistry with ResourceBundle
DESCRIPTION: Demonstrates how to create and configure a TranslationRegistry using ResourceBundle for server-side translations. Creates a registry under a namespace and registers US locale translations.

LANGUAGE: java
CODE:
TranslationRegistry registry = TranslationRegistry.create(Key.key("namespace:value"));

ResourceBundle bundle = ResourceBundle.getBundle("your.plugin.Bundle", Locale.US, UTF8ResourceBundleControl.get());
registry.registerAll(Locale.US, bundle, true);
GlobalTranslator.translator().addSource(registry);

----------------------------------------

TITLE: Sending Raw Chat Messages via BungeeCord in Java
DESCRIPTION: Demonstrates how to send a raw chat component message to all players across a BungeeCord network using the MessageRaw message type.

LANGUAGE: java
CODE:
public class MyPlugin extends JavaPlugin {

    @Override
    public void onEnable() {
        this.getServer().getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");

        Player player = ...;
        ByteArrayDataOutput out = ByteStreams.newDataOutput();
        out.writeUTF("MessageRaw");
        out.writeUTF("ALL");
        out.writeUTF(GsonComponentSerializer.gson().serialize(
                Component.text("Click Me!").clickEvent(ClickEvent.openUrl("https://papermc.io"))
        ));
        player.sendPluginMessage(this, "BungeeCord", out.toByteArray());
    }
}

----------------------------------------

TITLE: Setting Up TranslationRegistry with ResourceBundle
DESCRIPTION: Demonstrates how to create and configure a TranslationRegistry using ResourceBundle for server-side translations. Creates a registry under a namespace and registers US locale translations.

LANGUAGE: java
CODE:
TranslationRegistry registry = TranslationRegistry.create(Key.key("namespace:value"));

ResourceBundle bundle = ResourceBundle.getBundle("your.plugin.Bundle", Locale.US, UTF8ResourceBundleControl.get());
registry.registerAll(Locale.US, bundle, true);
GlobalTranslator.translator().addSource(registry);

----------------------------------------

TITLE: Sending Player to Another Server via BungeeCord in Java
DESCRIPTION: Shows how to send a plugin message on the BungeeCord channel to transfer a player to another server when they jump.

LANGUAGE: java
CODE:
public final class PluginMessagingSample extends JavaPlugin implements Listener {

    @Override
    public void onEnable() {
        getServer().getPluginManager().registerEvents(this, this);
        getServer().getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");
    }

    @EventHandler
    public void onPlayerJump(PlayerJumpEvent event) {
        Player player = event.getPlayer();

        ByteArrayDataOutput out = ByteStreams.newDataOutput();
        out.writeUTF("Connect");
        out.writeUTF("hub2");
        player.sendPluginMessage(this, "BungeeCord", out.toByteArray());
    }

}

----------------------------------------

TITLE: Creating a Custom Sword with Multiple Data Components in Java
DESCRIPTION: Demonstrates creating a custom sword by modifying multiple data components, including lore, enchantments, rarity, and special effects.

LANGUAGE: java
CODE:
ItemStack sword = ItemStack.of(Material.DIAMOND_SWORD);
sword.setData(DataComponentTypes.LORE, ItemLore.lore().addLine(Component.text("Cool sword!")).build());
sword.setData(DataComponentTypes.ENCHANTMENTS, ItemEnchantments.itemEnchantments().add(Enchantment.SHARPNESS, 10).build());
sword.setData(DataComponentTypes.RARITY, ItemRarity.RARE);

sword.unsetData(DataComponentTypes.TOOL); // Remove the tool component

sword.setData(DataComponentTypes.MAX_DAMAGE, 10);
sword.setData(DataComponentTypes.ENCHANTMENT_GLINT_OVERRIDE, true); // Make it glow!

----------------------------------------

TITLE: Sending Raw Chat Messages via BungeeCord in Java
DESCRIPTION: Demonstrates how to send a raw chat component message to all players across a BungeeCord network using the MessageRaw message type.

LANGUAGE: java
CODE:
public class MyPlugin extends JavaPlugin {

    @Override
    public void onEnable() {
        this.getServer().getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");

        Player player = ...;
        ByteArrayDataOutput out = ByteStreams.newDataOutput();
        out.writeUTF("MessageRaw");
        out.writeUTF("ALL");
        out.writeUTF(GsonComponentSerializer.gson().serialize(
                Component.text("Click Me!").clickEvent(ClickEvent.openUrl("https://papermc.io"))
        ));
        player.sendPluginMessage(this, "BungeeCord", out.toByteArray());
    }
}

----------------------------------------

TITLE: Modifying Prototype Component Values for Helmet in Java
DESCRIPTION: Demonstrates advanced usage with builders to modify the equippable component of a diamond helmet, changing its appearance and equip sound.

LANGUAGE: java
CODE:
ItemStack helmet = ItemStack.of(Material.DIAMOND_HELMET);
// Get the equippable component for this item, and make it a builder.
// Note: Not all types have .toBuilder() methods
// This is the prototype value of the diamond helmet.
Equippable.Builder builder = helmet.getData(DataComponentTypes.EQUIPPABLE).toBuilder();

// Make the helmet look like netherite
// We get the prototype equippable value from NETHERITE_HELMET
builder.assetId(Material.NETHERITE_HELMET.getDefaultData(DataComponentTypes.EQUIPPABLE).assetId());
// And give it a spooky sound when putting it on
builder.equipSound(SoundEventKeys.ENTITY_GHAST_HURT);

// Set our new item
helmet.setData(DataComponentTypes.EQUIPPABLE, builder);

----------------------------------------

TITLE: Retrieving Data from PDC Using Java
DESCRIPTION: Shows how to retrieve previously stored data from a PDC using a NamespacedKey and PersistentDataType. Includes null checking and type safety.

LANGUAGE: java
CODE:
// Create a NamespacedKey
NamespacedKey key = new NamespacedKey(pluginInstance, "example-key");

ItemStack item = ...; // Retrieve the item from before
// Get the data from the PDC
PersistentDataContainer container = item.getItemMeta().getPersistentDataContainer();
if (container.has(key, PersistentDataType.STRING)) {
    String value = container.get(key, PersistentDataType.STRING);
    // Do something with the value
    player.sendMessage(Component.text(value));
}

----------------------------------------

TITLE: Scaling a Block Display Entity in Java
DESCRIPTION: This code demonstrates how to apply a scaling transformation to a BlockDisplay entity, making it twice as large on all axes.

LANGUAGE: java
CODE:
world.spawn(location, BlockDisplay.class, entity -> {
    entity.setBlock(Material.GRASS_BLOCK.createBlockData());
    entity.setTransformation(
        new Transformation(
                new Vector3f(), // no translation
                new AxisAngle4f(), // no left rotation
                new Vector3f(2, 2, 2), // scale up by a factor of 2 on all axes
                new AxisAngle4f() // no right rotation
        )
    );
    // or set a raw transformation matrix from JOML
    // entity.setTransformationMatrix(
    //         new Matrix4f()
    //                 .scale(2) // scale up by a factor of 2 on all axes
    // );
});

----------------------------------------

TITLE: Scaling Display Entities in Minecraft
DESCRIPTION: Example of applying scale transformation to a block display entity.

LANGUAGE: java
CODE:
world.spawn(location, BlockDisplay.class, entity -> {
    entity.setBlock(Material.GRASS_BLOCK.createBlockData());
    entity.setTransformation(
        new Transformation(
                new Vector3f(),
                new AxisAngle4f(),
                new Vector3f(2, 2, 2),
                new AxisAngle4f()
        )
    );
});

----------------------------------------

TITLE: Handling Time Argument in Java Command API
DESCRIPTION: Demonstrates the use of the time argument to define a time frame. The example shows a command that advances the world time by the specified amount of ticks.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> timeArgument() {
    return Commands.literal("timearg")
        .then(Commands.argument("time", ArgumentTypes.time())
            .executes(ctx -> {
                final int timeInTicks = IntegerArgumentType.getInteger(ctx, "time");

                if (ctx.getSource().getExecutor() instanceof Player player) {
                    player.getWorld().setFullTime(player.getWorld().getFullTime() + timeInTicks);
                    player.sendRichMessage("Moved time forward by " + timeInTicks + " ticks!");
                    return Command.SINGLE_SUCCESS;
                }

                ctx.getSource().getSender().sendPlainMessage("This argument requires a player!");
                return Command.SINGLE_SUCCESS;
            })
        ).build();
}

----------------------------------------

TITLE: Creating a Block Display Entity in Java
DESCRIPTION: This code shows how to spawn and customize a BlockDisplay entity to display a grass block in the world.

LANGUAGE: java
CODE:
BlockDisplay display = world.spawn(location, BlockDisplay.class, entity -> {
    // customize the entity!
    entity.setBlock(Material.GRASS_BLOCK.createBlockData());
});

----------------------------------------

TITLE: Detecting Folia Platform in Java
DESCRIPTION: Utility method to check if the current server is running Folia by attempting to load a Folia-specific class.

LANGUAGE: java
CODE:
private static boolean isFolia() {
    try {
        Class.forName("io.papermc.paper.threadedregions.RegionizedServer");
        return true;
    } catch (ClassNotFoundException e) {
        return false;
    }
}

----------------------------------------

TITLE: Creating Lifecycle Event Handler
DESCRIPTION: Example of creating and configuring a lifecycle event handler with event type selection.

LANGUAGE: java
CODE:
@Override
public void onEnable() {
    final LifecycleEventManager<Plugin> lifecycleManager = this.getLifecycleManager();
    PrioritizedLifecycleEventHandlerConfiguration<LifecycleEventOwner> config = LifecycleEvents.SOME_EVENT.newHandler((event) -> {
        // Handler for the event
    });
}

----------------------------------------

TITLE: Unregistering Event Listeners in Java
DESCRIPTION: Shows how to unregister event listeners using HandlerList's unregister method. Demonstrates unregistration both from within an event handler and from the constructor.

LANGUAGE: java
CODE:
public class ExampleListener implements Listener {

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        HandlerList handlerList = event.getHandlerList();
        handlerList.unregister(this);
        // ...
    }
    
    // Or:
    
    public ExampleListener() {
        // Access the handler list through the static getter
        HandlerList handlerList = PlayerJoinEvent.getHandlerList();
        handlerList.unregister(this);
        // Granted this is a pretty stupid example...
    }
}

----------------------------------------

TITLE: Configuring Anti-Xray Engine Mode 1 for Nether World
DESCRIPTION: YAML configuration for Anti-Xray engine mode 1 in the Nether world. This configuration is tailored for Nether-specific ores and blocks.

LANGUAGE: yaml
CODE:
anticheat:
  anti-xray:
    enabled: true
    engine-mode: 1
    hidden-blocks:
    - ancient_debris
    - nether_gold_ore
    - nether_quartz_ore
    lava-obscures: false
    max-block-height: 128
    replacement-blocks: []
    update-radius: 2
    use-permission: false

----------------------------------------

TITLE: Rendering Chat Messages with Components in Java
DESCRIPTION: This snippet demonstrates how to render a chat message using Components. It combines the source display name and the message to create a formatted chat message.

LANGUAGE: java
CODE:
public class ChatListener implements Listener, ChatRenderer {

    // Listener logic

    @Override
    public @NotNull Component render(@NotNull Player source, @NotNull Component sourceDisplayName, @NotNull Component message, @NotNull Audience viewer) {
        return sourceDisplayName
                .append(Component.text(": "))
                .append(message);
    }
}

----------------------------------------

TITLE: Retrieving and Cancelling All Tasks for a Plugin in Java using Velocity Scheduler
DESCRIPTION: This snippet demonstrates how to retrieve all tasks scheduled by a specific plugin using the Velocity Scheduler API, and then cancel all of these tasks.

LANGUAGE: java
CODE:
Collection<ScheduledTask> tasks = server.getScheduler().tasksByPlugin(plugin);
// then you can control them, for example, cancel all task scheduled by a plugin
for (ScheduledTask task : tasks) {
  task.cancel();
}

----------------------------------------

TITLE: Implementing Entity Argument Command in Java
DESCRIPTION: Creates a command that uses the entity argument to select a single entity and display its name. It demonstrates how to resolve the EntitySelectorArgumentResolver and handle the result.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> entityArgument() {
    return Commands.literal("entityarg")
        .then(Commands.argument("arg", ArgumentTypes.entity())
            .executes(ctx -> {
                final EntitySelectorArgumentResolver entitySelectorArgumentResolver = ctx.getArgument("arg", EntitySelectorArgumentResolver.class);
                final List<Entity> entities = entitySelectorArgumentResolver.resolve(ctx.getSource());

                ctx.getSource().getSender().sendRichMessage("Found <green><entityname>",
                    Placeholder.component("entityname", entities.getFirst().name())
                );

                return Command.SINGLE_SUCCESS;
            }))
        .build();
}

----------------------------------------

TITLE: Creating ForwardingAudience in Java using Bukkit Server
DESCRIPTION: Demonstrates how to create a ForwardingAudience using the Bukkit server instance, which includes all online players and the console. Also shows how to construct an audience from a collection of players.

LANGUAGE: java
CODE:
// Server is a ForwardingAudience which includes all online players and the console
ForwardingAudience audience = Bukkit.getServer();

// To construct an audience from a collection of players, use:
Audience audience = Audience.audience(Audience...);
// If you pass in a single Audience, it will be returned as-is. If you pass in a collection of Audiences, they will be
// wrapped in a ForwardingAudience.

----------------------------------------

TITLE: Using Region Scheduler for Block Operations
DESCRIPTION: Demonstration of using the region scheduler to modify blocks in a specific location, ensuring thread-safe operations across regions.

LANGUAGE: java
CODE:
Location locationToChange = ...;
RegionScheduler scheduler = server.getRegionScheduler();

scheduler.execute(plugin, locationToChange, () -> {
    locationToChange.getBlock().setType(Material.BEEHIVE);
});

----------------------------------------

TITLE: Resource Key Argument Example
DESCRIPTION: Example demonstrating how to use resourceKey argument type with error handling

LANGUAGE: java
CODE:
Commands.argument("item", ArgumentTypes.resourceKey(RegistryKey.ITEM))
    .executes(ctx -> {
        final TypedKey<ItemType> itemKey = RegistryArgumentExtractor.getTypedKey(ctx, RegistryKey.ITEM, "item");
        ItemType item = RegistryAccess.registryAccess().getRegistry(itemKey.registryKey()).get(itemKey.key());

        if (item == null) {
            ctx.getSource().getSender().sendRichMessage("<red>Please provide a valid item!");
            return Command.SINGLE_SUCCESS;
        }

        if (ctx.getSource().getExecutor() instanceof Player player) {
            player.getInventory().addItem(item.createItemStack());
        }

        return Command.SINGLE_SUCCESS;
    })

----------------------------------------

TITLE: Event Listener with Priority in Java
DESCRIPTION: Shows how to create an event listener with custom priority and order settings.

LANGUAGE: java
CODE:
@Subscribe(priority = 0, order = PostOrder.CUSTOM)
public void onPlayerChat(PlayerChatEvent event) {
	// do stuff
}

----------------------------------------

TITLE: Implementing Block Position Argument in Paper Command API
DESCRIPTION: Demonstrates how to create and handle a block position argument in commands. Uses BlockPositionResolver to get exact block coordinates from user input. Returns the x, y, z coordinates as a BlockPosition object.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> blockPositionArgument() {
    return Commands.literal("blockpositionargument")
        .then(Commands.argument("arg", ArgumentTypes.blockPosition())
            .executes(ctx -> {
                final BlockPositionResolver blockPositionResolver = ctx.getArgument("arg", BlockPositionResolver.class);
                final BlockPosition blockPosition = blockPositionResolver.resolve(ctx.getSource());

                ctx.getSource().getSender().sendPlainMessage("Put in " + blockPosition.x() + " " + blockPosition.y() + " " + blockPosition.z());
                return Command.SINGLE_SUCCESS;
            }))
        .build();
}

----------------------------------------

TITLE: Implementing Player Profiles Argument Command in Java
DESCRIPTION: Creates a command that uses the player profiles argument to lookup player profiles. It demonstrates how to resolve the PlayerProfileListResolver and handle the resulting collection of PlayerProfiles, which can include both online and offline players.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> playerProfilesArgument() {
    return Commands.literal("lookup")
        .then(Commands.argument("profile", ArgumentTypes.playerProfiles())
            .executes(ctx -> {
                final PlayerProfileListResolver profilesResolver = ctx.getArgument("profile", PlayerProfileListResolver.class);
                final Collection<PlayerProfile> foundProfiles = profilesResolver.resolve(ctx.getSource());

                for (final PlayerProfile profile : foundProfiles) {
                    ctx.getSource().getSender().sendPlainMessage("Found " + profile.getName());
                }

                return Command.SINGLE_SUCCESS;
            }))
        .build();
}

----------------------------------------

TITLE: Custom Serializable Configuration Class
DESCRIPTION: Implementation of ConfigurationSerializable interface for custom configuration data structure

LANGUAGE: java
CODE:
public class TeleportOptions implements ConfigurationSerializable {
    private int chunkX;
    private int chunkZ;
    private String name;

    public TeleportOptions(int chunkX, int chunkZ, String name) {
        // Set the values
    }

    public Map<String, Object> serialize() {
        Map<String, Object> data = new HashMap<>();

        data.put("chunk-x", this.chunkX);
        data.put("chunk-z", this.chunkZ);
        data.put("name", this.name);

        return data;
    }

    public static TeleportOptions deserialize(Map<String, Object> args) {
        return new TeleportOptions(
                (int) args.get("chunk-x"),
                (int) args.get("chunk-z"),
                (String) args.get("name")
        );
    }
}

----------------------------------------

TITLE: Handling NamespacedKey Argument in Java Command API
DESCRIPTION: Illustrates the usage of the namespaced key argument to retrieve a NamespacedKey object. The example shows a command that echoes the provided key back to the user.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> namespacedKeyArgument() {
    return Commands.literal("namespacedkey")
        .then(Commands.argument("key", ArgumentTypes.namespacedKey())
            .executes(ctx -> {
                final NamespacedKey key = ctx.getArgument("key", NamespacedKey.class);

                ctx.getSource().getSender().sendRichMessage("You put in <aqua><key></aqua>!",
                    Placeholder.unparsed("key", key.toString())
                );
                return Command.SINGLE_SUCCESS;
            }))
        .build();
}

----------------------------------------

TITLE: Creating and Registering a Shapeless Recipe in Bukkit
DESCRIPTION: This snippet shows how to create a shapeless recipe for a diamond sword using the ShapelessRecipe class. It adds ingredients without specifying a pattern and registers the recipe with the server.

LANGUAGE: java
CODE:
public class TestPlugin extends JavaPlugin {

    @Override
    public void onEnable() {
        NamespacedKey key = new NamespacedKey(this, "WarriorSword");
        ItemStack item = ItemStack.of(Material.DIAMOND_SWORD);

        ShapelessRecipe recipe = new ShapelessRecipe(key, item);
        recipe.addIngredient(3, Material.DIAMOND);
        recipe.addIngredient(2, Material.STICK);

        getServer().addRecipe(recipe);
    }
}

----------------------------------------

TITLE: Accessing CraftBukkit Classes via Reflection
DESCRIPTION: Utility method to dynamically access CraftBukkit classes using reflection by determining the correct package name at runtime. This approach handles version-specific package names.

LANGUAGE: java
CODE:
private static final String CRAFTBUKKIT_PACKAGE = Bukkit.getServer().getClass().getPackageName();

public static String cbClass(String clazz) {
    return CRAFTBUKKIT_PACKAGE + "." + clazz;
}

// You can then use this method to get the CraftBukkit class:
Class.forName(cbClass("entity.CraftBee"));

----------------------------------------

TITLE: Implementing Double Range Validation in Java Command API
DESCRIPTION: Creates a command that validates if numbers fall within a specified double range. The command outputs test results for values 0-4 against the provided range.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> doubleRangeArgument() {
    return Commands.literal("doublerange")
        .then(Commands.argument("arg", ArgumentTypes.doubleRange())
            .executes(ctx -> {
                final DoubleRangeProvider doubleRangeProvider = ctx.getArgument("arg", DoubleRangeProvider.class);
                final CommandSender sender = ctx.getSource().getSender();

                for (int i = 0; i < 5; i++) {
                    sender.sendRichMessage("Is <index> in bounds? <result>",
                        Placeholder.unparsed("index", Integer.toString(i)),
                        Placeholder.unparsed("result", Boolean.toString(doubleRangeProvider.range().test((double) i)))
                    );
                }
                return Command.SINGLE_SUCCESS;
            }))
        .build();
}

----------------------------------------

TITLE: Scheduling Runnable Task with Lambda in Java
DESCRIPTION: This snippet demonstrates how to schedule a task using a lambda expression with the BukkitScheduler.

LANGUAGE: java
CODE:
scheduler.runTaskLater(plugin, () -> {
    this.plugin.getServer().broadcast(Component.text("Hello, World!"));
}, 20);

----------------------------------------

TITLE: Registering Outgoing Plugin Channel in Java
DESCRIPTION: This snippet demonstrates how to register an outgoing plugin channel for the BungeeCord messaging system in a Paper plugin.

LANGUAGE: java
CODE:
public final class PluginMessagingSample extends JavaPlugin {

    @Override
    public void onEnable() {
        getServer().getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");
        // Blah blah blah...
    }

}

----------------------------------------

TITLE: Accessing Event HandlerList in Java
DESCRIPTION: Demonstrates how to access an event's HandlerList either through an event instance or through the static getter method. Shows implementation within a Listener class with two different approaches.

LANGUAGE: java
CODE:
public class ExampleListener implements Listener {

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        HandlerList handlerList = event.getHandlerList();
        // ...
    }
    
    // Or:
    
    public ExampleListener() {
        // Access the handler list through the static getter
        HandlerList handlerList = PlayerJoinEvent.getHandlerList();
        // ...
    }
}

----------------------------------------

TITLE: Adding Paperweight Plugin in Gradle
DESCRIPTION: Configuration to add the paperweight-userdev plugin to a Gradle project.

LANGUAGE: kotlin
CODE:
plugins {
    id("io.papermc.paperweight.userdev") version "%%_MAJ_MIN_PAT_USERDEV_%%"
}

----------------------------------------

TITLE: Receiving Plugin Messages from Players in Velocity
DESCRIPTION: This code snippet demonstrates how to receive and handle plugin messages sent by players in Velocity. It includes registering a channel identifier, subscribing to the ProxyInitializeEvent and PluginMessageEvent, and processing the received data.

LANGUAGE: java
CODE:
public static final MinecraftChannelIdentifier IDENTIFIER = MinecraftChannelIdentifier.from("custom:main");

@Subscribe
public void onProxyInitialization(ProxyInitializeEvent event) {
    proxyServer.getChannelRegistrar().register(IDENTIFIER);
}

@Subscribe
public void onPluginMessageFromPlayer(PluginMessageEvent event) {
    if (!IDENTIFIER.equals(event.getIdentifier())) {
        return;
    }

    event.setResult(PluginMessageEvent.ForwardResult.handled());

    if (!(event.getSource() instanceof Player player)) {
        return;
    }

    ByteArrayDataInput in = ByteStreams.newDataInput(event.getData());
    // handle packet data
}

----------------------------------------

TITLE: Creating Markdown Page Header in PaperMC Docs
DESCRIPTION: Example of how to structure the header of a new documentation page with slug and title in Markdown format

LANGUAGE: markdown
CODE:
---
slug: /reference/paper-plugins
---

# Paper Plugins

This documentation page serves to explain all the new semantics and possible confusions that Paper plugins may introduce.

----------------------------------------

TITLE: Adding paperweight-userdev Plugin to Gradle Build
DESCRIPTION: Adds the paperweight-userdev Gradle plugin to the project's build.gradle.kts file. This plugin provides access to internal Minecraft server code during development.

LANGUAGE: kotlin
CODE:
plugins {
    id("io.papermc.paperweight.userdev") version "1.7.1" // Check for new versions at https://plugins.gradle.org/plugin/io.papermc.paperweight.userdev
}

----------------------------------------

TITLE: Initializing Basic Command Structure in Java
DESCRIPTION: Demonstrates the basic structure of a command class implementing the BasicCommand interface, including the required execute method and optional permission method.

LANGUAGE: java
CODE:
package your.package.name;

import io.papermc.paper.command.brigadier.BasicCommand;
import io.papermc.paper.command.brigadier.CommandSourceStack;
import org.jspecify.annotations.NullMarked;
import org.jspecify.annotations.Nullable;

@NullMarked
public class BroadcastCommand implements BasicCommand {

    @Override
    public void execute(CommandSourceStack commandSourceStack, String[] args) {

    }

    @Override
    public @Nullable String permission() {
        return "example.broadcast.use";
    }
}

----------------------------------------

TITLE: Defining YAML Configuration Structure
DESCRIPTION: Demonstrates the basic structure of a YAML configuration file using key-value pairs and nested levels.

LANGUAGE: yaml
CODE:
root:
  one-key: 10
  another-key: David

----------------------------------------

TITLE: Example Bukkit Plugin YML Configuration
DESCRIPTION: Demonstrates a basic plugin.yml file with essential fields such as name, version, main class, description, author, website, and API version.

LANGUAGE: yaml
CODE:
name: ExamplePlugin
version: 1.0.0
main: io.papermc.testplugin.ExamplePlugin
description: An example plugin
author: PaperMC
website: https://papermc.io
api-version: '1.19'

----------------------------------------

TITLE: Accessing CraftBukkit Classes via Reflection
DESCRIPTION: Utility method to get CraftBukkit class names with proper package versioning. Uses reflection to dynamically access the server's package name for version compatibility.

LANGUAGE: java
CODE:
private static final String CRAFTBUKKIT_PACKAGE = Bukkit.getServer().getClass().getPackage().getName();

public static String cbClass(String clazz) {
    return CRAFTBUKKIT_PACKAGE + "." + clazz;
}

// You can then use this method to get the CraftBukkit class:
Class.forName(cbClass("entity.CraftBee"));

----------------------------------------

TITLE: Importing and Rendering Spigot Configuration Component in React
DESCRIPTION: This code snippet imports necessary React components and configuration data, then renders a ConfigDocBlock component to display the Spigot configuration structure.

LANGUAGE: jsx
CODE:
import React from 'react';
import ConfigDocBlock from '@site/src/components/config/ConfigDocBlock';
import SpigotConfigSpec from '!!raw-loader!@site/config-specs/paper/spigot.yml';

<ConfigDocBlock data={SpigotConfigSpec}/>

----------------------------------------

TITLE: Configuring Main Aikar's Flags for Paper Server
DESCRIPTION: Primary set of JVM startup flags optimized for Paper servers. Includes memory allocation, garbage collection, and performance tuning parameters. Recommended for servers with 6-10GB RAM allocation.

LANGUAGE: bash
CODE:
java -Xms10G -Xmx10G -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -Dusing.aikars.flags=https://mcflags.emc.gs -Daikars.new.flags=true -jar paper.jar --nogui

----------------------------------------

TITLE: Using Boolean Arguments in Brigadier Commands
DESCRIPTION: Shows how to create a command with a boolean argument. The example implements a 'serverflight' command that takes a boolean parameter to enable or disable server flight.

LANGUAGE: java
CODE:
Commands.literal("serverflight")
    .then(Commands.argument("allow", BoolArgumentType.bool())
        .executes(ctx -> {
            boolean allowed = ctx.getArgument("allow", boolean.class);
            /* Toggle server flying */
        })
    );

----------------------------------------

TITLE: Enchantment Registry Command Implementation
DESCRIPTION: Example of implementing a command that uses enchantment registry to enchant items

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> enchantmentRegistry() {
    return Commands.literal("enchants-registry")
        .then(Commands.argument("enchantment", ArgumentTypes.resource(RegistryKey.ENCHANTMENT))
            .executes(ctx -> {
                final Enchantment enchantment = ctx.getArgument("enchantment", Enchantment.class);

                if (ctx.getSource().getExecutor() instanceof Player player) {
                    final ItemStack stack = player.getInventory().getItemInMainHand();
                    stack.addUnsafeEnchantment(enchantment, 10);
                    ctx.getSource().getSender().sendRichMessage("Enchanted <player>'s <item> with <enchantment>!",
                        Placeholder.component("player", player.name()),
                        Placeholder.component("item", Component.translatable(stack)),
                        Placeholder.component("enchantment", enchantment.displayName(10))
                    );
                    return Command.SINGLE_SUCCESS;
                }

                ctx.getSource().getSender().sendRichMessage("<red>This command requires a player!");
                return Command.SINGLE_SUCCESS;
            }))
        .build();
}

----------------------------------------

TITLE: Defining Literal Commands in Brigadier
DESCRIPTION: Demonstrates how to create a command tree with literal branches using Brigadier. The example shows a 'plant' command with 'tree' and 'grass' sub-commands.

LANGUAGE: java
CODE:
Commands.literal("plant")
    .then(Commands.literal("tree")
        .executes(ctx -> {
            /* Here we are on /plant tree */
        })
    )
    .then(Commands.literal("grass")
        .executes(ctx -> {
             /* Here we are on /plant grass */
        }));

----------------------------------------

TITLE: Configuring Anti-Xray for Nether and End Dimensions with Engine Mode 2 in Paper YAML
DESCRIPTION: YAML configuration for setting up Anti-Xray engine mode 2 in the nether dimension and disabling it in the end dimension. This configuration is appended to the main paper.yml file.

LANGUAGE: yaml
CODE:
  world_nether:
    anti-xray:
      max-block-height: 128
      hidden-blocks:
      - air
      - ancient_debris
      - bone_block
      - glowstone
      - magma_block
      - nether_bricks
      - nether_gold_ore
      - nether_quartz_ore
      - polished_blackstone_bricks
      replacement-blocks:
      - basalt
      - blackstone
      - gravel
      - netherrack
      - soul_sand
      - soul_soil
  world_the_end:
    anti-xray:
      enabled: false

----------------------------------------

TITLE: Implementing HeightMap Argument in Paper Minecraft Command
DESCRIPTION: This snippet demonstrates the use of the HeightMap argument in a Paper Minecraft command. It creates a command that accepts a HeightMap type as input and sends a message with the selected HeightMap.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> heightMapArgument() {
    return Commands.literal("heightmap")
        .then(Commands.argument("arg", ArgumentTypes.heightMap())
            .executes(ctx -> {
                final HeightMap heightMap = ctx.getArgument("arg", HeightMap.class);

                ctx.getSource().getSender().sendRichMessage("You selected <gold><selection></gold>",
                    Placeholder.unparsed("selection", heightMap.name())
                );

                return Command.SINGLE_SUCCESS;
            }))
        .build();
}

----------------------------------------

TITLE: Implementing Key Argument Handler in Java
DESCRIPTION: Shows how to create a command that processes namespaced keys using the Adventure Key type. Validates and handles key inputs for use in the Paper API.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> keyArgument() {
    return Commands.literal("key")
        .then(Commands.argument("key_input", ArgumentTypes.key())
            .executes(ctx -> {
                final Key key = ctx.getArgument("key_input", Key.class);

                ctx.getSource().getSender().sendRichMessage("You put in <aqua><key></aqua>!",
                    Placeholder.unparsed("key", key.asString())
                );

                return Command.SINGLE_SUCCESS;
            }))
        .build();
}

----------------------------------------

TITLE: Implementing Flyspeed Command in Java
DESCRIPTION: Demonstrates the implementation of a flyspeed command using Brigadier. It shows how to retrieve arguments, handle different command senders, and set a player's flight speed.

LANGUAGE: java
CODE:
Commands.literal("flyspeed")
    .then(Commands.argument("speed", FloatArgumentType.floatArg(0, 1.0f))
        .executes(ctx -> {
            float speed = FloatArgumentType.getFloat(ctx, "speed"); // Retrieve the speed argument
            CommandSender sender = ctx.getSource().getSender(); // Retrieve the command sender
            Entity executor = ctx.getSource().getExecutor(); // Retrieve the command executor, which may or may not be the same as the sender

            // Check whether the executor is a player, as you can only set a player's flight speed
            if (!(executor instanceof Player player)) {
                // If a non-player tried to set their own flight speed
                sender.sendPlainMessage("Only players can fly!");
                return Command.SINGLE_SUCCESS;
            }

            // Set the player's speed
            player.setFlySpeed(speed);

            if (sender == executor) {
                // If the player executed the command themselves
                player.sendPlainMessage("Successfully set your flight speed to " + speed);
                return Command.SINGLE_SUCCESS;
            }

            // If the speed was set by a different sender (Like using /execute)
            sender.sendRichMessage("Successfully set <playername>'s flight speed to " + speed, Placeholder.component("playername", player.name()));
            player.sendPlainMessage("Your flight speed has been set to " + speed);
            return Command.SINGLE_SUCCESS;
        })
    );

----------------------------------------

TITLE: Importing React Component for Config Display in JSX
DESCRIPTION: This snippet imports React and a custom ConfigDocBlock component to display the Paper global configuration specification.

LANGUAGE: jsx
CODE:
import React from 'react';
import ConfigDocBlock from '@site/src/components/config/ConfigDocBlock';
import GlobalConfigSpec from '!!raw-loader!@site/config-specs/paper/paper-global.yml';

----------------------------------------

TITLE: Configuring Anti-Xray Engine Mode 2 for Overworld in Paper YAML
DESCRIPTION: YAML configuration for setting up Anti-Xray engine mode 2 in the overworld. This mode replaces both hidden blocks and replacement blocks with randomly generated hidden blocks for enhanced protection.

LANGUAGE: yaml
CODE:
    anti-xray:
      enabled: true
      engine-mode: 2
      max-block-height: 64
      update-radius: 2
      lava-obscures: false
      use-permission: false
      hidden-blocks:
      - air
      - copper_ore
      - deepslate_copper_ore
      - raw_copper_block
      - diamond_ore
      - deepslate_diamond_ore
      - gold_ore
      - deepslate_gold_ore
      - iron_ore
      - deepslate_iron_ore
      - raw_iron_block
      - lapis_ore
      - deepslate_lapis_ore
      - redstone_ore
      - deepslate_redstone_ore
      replacement-blocks:
      - chest
      - amethyst_block
      - andesite
      - budding_amethyst
      - calcite
      - coal_ore
      - deepslate_coal_ore
      - deepslate
      - diorite
      - dirt
      - emerald_ore
      - deepslate_emerald_ore
      - granite
      - gravel
      - oak_planks
      - smooth_basalt
      - stone
      - tuff

----------------------------------------

TITLE: Making Players Look at Positions or Entities in Java
DESCRIPTION: Shows how to use the lookAt API to make a player face a specific position or entity. The LookAnchor parameter determines whether the player's eyes or feet are used as the reference point.

LANGUAGE: java
CODE:
player.lookAt(
    position,
    LookAnchor.EYES // the player's eyes will be facing the position
);

player.lookAt(
    entity,
    LookAnchor.EYES // the player's eyes will be facing the entity
    LookAnchor.FEET // the player will be facing the entity's feet
);

----------------------------------------

TITLE: Permissions Configuration Example
DESCRIPTION: Shows how to define permission nodes with descriptions, default values, and child permissions.

LANGUAGE: yaml
CODE:
permissions:
    permission.node:
        description: "This is a permission node"
        default: op
        children:
            permission.node.child: true
    another.permission.node:
        description: "This is another permission node"
        default: not op

----------------------------------------

TITLE: Teleporting Entities Synchronously and Asynchronously in Java
DESCRIPTION: Demonstrates how to teleport entities using both synchronous and asynchronous methods. The asynchronous method is recommended for teleporting to unloaded chunks to avoid performance issues.

LANGUAGE: java
CODE:
entity.teleport(location); // loads chunks synchronously and teleports the entity

entity.teleportAsync(location).thenAccept(success -> { // loads chunks asynchronously and teleports the entity
    // this code is ran when the teleport completes
    // the Future is completed on the main thread, so it is safe to use the API here

    if (success) {
        // the entity was teleported successfully!
    }
});

----------------------------------------

TITLE: Defining Plugin Permissions in YML
DESCRIPTION: Illustrates how to define permission nodes for the plugin, including descriptions, default values, and child permissions.

LANGUAGE: yaml
CODE:
permissions :
    permission.node:
        description: "This is a permission node"
        default: op
        children:
            permission.node.child: true
    another.permission.node:
        description: "This is another permission node"
        default: not op

----------------------------------------

TITLE: Configuring Anti-Xray Engine Mode 2 for Default World
DESCRIPTION: YAML configuration for Anti-Xray engine mode 2 in the default world. This mode replaces both hidden blocks and replacement blocks with randomly generated hidden blocks.

LANGUAGE: yaml
CODE:
anticheat:
  anti-xray:
    enabled: true
    engine-mode: 2
    hidden-blocks:
    - air
    - copper_ore
    - deepslate_copper_ore
    - raw_copper_block
    - diamond_ore
    - deepslate_diamond_ore
    - gold_ore
    - deepslate_gold_ore
    - iron_ore
    - deepslate_iron_ore
    - raw_iron_block
    - lapis_ore
    - deepslate_lapis_ore
    - redstone_ore
    - deepslate_redstone_ore
    lava-obscures: false
    max-block-height: 64
    replacement-blocks:
    - chest
    - amethyst_block
    - andesite
    - budding_amethyst
    - calcite
    - coal_ore
    - deepslate_coal_ore
    - deepslate
    - diorite
    - dirt
    - emerald_ore
    - deepslate_emerald_ore
    - granite
    - gravel
    - oak_planks
    - smooth_basalt
    - stone
    - tuff
    update-radius: 2
    use-permission: false

----------------------------------------

TITLE: Configuring Gradle (Groovy DSL) for Velocity Plugin
DESCRIPTION: Gradle Groovy DSL configuration that sets up the required repository and dependencies for Velocity plugin development, including annotation processor.

LANGUAGE: groovy
CODE:
repositories {
    maven {
        name = 'papermc'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
}

dependencies {
    compileOnly 'com.velocitypowered:velocity-api:%%_MAJ_MIN_PAT_VEL_%%'
    annotationProcessor 'com.velocitypowered:velocity-api:%%_MAJ_MIN_PAT_VEL_%%'
}

----------------------------------------

TITLE: Teleporting Entities Synchronously and Asynchronously in Java
DESCRIPTION: Demonstrates how to teleport entities using both synchronous and asynchronous methods. The asynchronous method is recommended for teleporting to unloaded chunks to avoid performance issues.

LANGUAGE: java
CODE:
entity.teleport(location); // loads chunks synchronously and teleports the entity

entity.teleportAsync(location).thenAccept(success -> { // loads chunks asynchronously and teleports the entity
    // this code is ran when the teleport completes
    // the Future is completed on the main thread, so it is safe to use the API here

    if (success) {
        // the entity was teleported successfully!
    }
});

----------------------------------------

TITLE: Removing and Resetting Data Components in Java
DESCRIPTION: Shows how to remove an existing component or reset a component to its default (prototype) value.

LANGUAGE: java
CODE:
// Remove an existing component (e.g. tool)
stack.unsetData(DataComponentTypes.TOOL);

// Reset a component to the default (prototype) value for its item type (e.g. max stack size)
stack.resetData(DataComponentTypes.MAX_STACK_SIZE);

----------------------------------------

TITLE: Creating and Registering a Shaped Recipe in Bukkit
DESCRIPTION: This snippet demonstrates how to create a shaped recipe for a diamond sword using the ShapedRecipe class. It defines the recipe pattern, sets ingredients, and registers the recipe with the server.

LANGUAGE: java
CODE:
public class TestPlugin extends JavaPlugin {

    @Override
    public void onEnable() {
        NamespacedKey key = new NamespacedKey(this, "WarriorSword");
        ItemStack item = ItemStack.of(Material.DIAMOND_SWORD);

        ShapedRecipe recipe = new ShapedRecipe(key, item);
        recipe.shape(" A ", "AAA", " B ");
        recipe.setIngredient('A', Material.DIAMOND);
        recipe.setIngredient('B', Material.STICK);

        getServer().addRecipe(recipe);
    }
}

----------------------------------------

TITLE: Importing React Components for Bukkit Config Documentation
DESCRIPTION: React imports and component setup for displaying Bukkit commands configuration documentation. Uses a custom ConfigDocBlock component and raw loader for parsing the commands.yml specification.

LANGUAGE: jsx
CODE:
import React from 'react';
import ConfigDocBlock from '@site/src/components/config/ConfigDocBlock';
import BukkitCommandsSpec from '!!raw-loader!@site/config-specs/paper/commands.yml';

----------------------------------------

TITLE: Initializing Velocity Plugin and Registering Events
DESCRIPTION: This snippet demonstrates how to properly initialize a Velocity plugin and register events using the ProxyInitializeEvent. It avoids the pitfall of accessing the API during construction by waiting for the initialization phase.

LANGUAGE: java
CODE:
@Subscribe
public void onProxyInitialization(ProxyInitializeEvent event) {
    // Do some operation demanding access to the Velocity API here.
    // For instance, we could register an event:
    server.getEventManager().register(this, new PluginListener());
}

----------------------------------------

TITLE: Handling PlayerCount Plugin Message in Java
DESCRIPTION: Demonstrates how to send a PlayerCount request and handle the response using the BungeeCord plugin messaging system.

LANGUAGE: java
CODE:
public class MyPlugin extends JavaPlugin implements PluginMessageListener {

    @Override
    public void onEnable() {
        this.getServer().getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");
        this.getServer().getMessenger().registerIncomingPluginChannel(this, "BungeeCord", this);

        Player player = ...;
        ByteArrayDataOutput out = ByteStreams.newDataOutput();
        out.writeUTF("PlayerCount");
        out.writeUTF("lobby");
        player.sendPluginMessage(this, "BungeeCord", out.toByteArray());
        // The response will be handled in onPluginMessageReceived
    }

    @Override
    public void onPluginMessageReceived(String channel, Player player, byte[] message) {
        if (!channel.equals("BungeeCord")) {
            return;
        }
        ByteArrayDataInput in = ByteStreams.newDataInput(message);
        String subchannel = in.readUTF();
        if (subchannel.equals("PlayerCount")) {
            // This is our response to the PlayerCount request
            String server = in.readUTF();
            int playerCount = in.readInt();
        }
    }
}

----------------------------------------

TITLE: Manipulating Non-Valued Data Components in Java
DESCRIPTION: Illustrates how to set and unset flag-like components that don't carry a value, such as the glider component.

LANGUAGE: java
CODE:
// Make the item a glider to be used like elytra (combined with the equippable component)
stack.setData(DataComponentTypes.GLIDER);

// Remove the glider flag
stack.unsetData(DataComponentTypes.GLIDER);

----------------------------------------

TITLE: Vulnerable SQL Query Example
DESCRIPTION: Example of unsafe SQL query construction that is vulnerable to SQL injection attacks. Shows how string concatenation can lead to security vulnerabilities.

LANGUAGE: java
CODE:
public void login(String username, String password) {
    String sql = "SELECT * FROM users WHERE username = '" + username + "' AND password = '" + password + "'";
    // Execute SQL
}

----------------------------------------

TITLE: Rendering Configuration Documentation Block
DESCRIPTION: React component usage that renders the world configuration documentation using the loaded YAML specification data.

LANGUAGE: jsx
CODE:
<ConfigDocBlock data={WorldConfigSpec}/>

----------------------------------------

TITLE: Configuring TNT and Piston Duplication in Paper
DESCRIPTION: Configuration setting to enable TNT, carpet, and rail duplication through pistons. This setting is considered unsupported and may cause stability issues.

LANGUAGE: yaml
CODE:
unsupported-settings:
  allow-piston-duplication: true

----------------------------------------

TITLE: Handling ItemStack Argument in Java Command API
DESCRIPTION: Shows how to use the item stack argument to retrieve an ItemStack object. The example demonstrates a command that adds the specified item to a player's inventory and sends a confirmation message.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> itemStackArgument() {
    return Commands.literal("itemstack")
        .then(Commands.argument("stack", ArgumentTypes.itemStack())
            .executes(ctx -> {
                final ItemStack itemStack = ctx.getArgument("stack", ItemStack.class);

                if (ctx.getSource().getExecutor() instanceof Player player) {
                    player.getInventory().addItem(itemStack);
                    ctx.getSource().getSender().sendRichMessage("<green>Successfully gave <player> a <item>",
                        Placeholder.component("player", player.name()),
                        Placeholder.component("item", Component.translatable(itemStack))
                    );
                    return Command.SINGLE_SUCCESS;
                }

                ctx.getSource().getSender().sendRichMessage("<red>This argument requires a player!");
                return Command.SINGLE_SUCCESS;
            }))
        .build();
}

----------------------------------------

TITLE: Scheduling a Delayed Task in Java using Velocity Scheduler
DESCRIPTION: This snippet demonstrates how to schedule a task to run after a 2-second delay using the Velocity Scheduler API. It uses a TaskBuilder to configure and schedule the task.

LANGUAGE: java
CODE:
server.getScheduler()
  .buildTask(plugin, () -> {
    // do stuff here
  })
  .delay(2L, TimeUnit.SECONDS)
  .schedule();

----------------------------------------

TITLE: Adding Selector Permission Requirement in Java
DESCRIPTION: Adds a requirement to check if the command sender has the 'minecraft.command.selector' permission. This is advised when using entity selectors in commands.

LANGUAGE: java
CODE:
.requires(ctx -> ctx.getSender().hasPermission("minecraft.command.selector"))

----------------------------------------

TITLE: Adding HikariCP Dependency in Maven
DESCRIPTION: Maven dependency configuration for including the HikariCP connection pooling library in a project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>com.zaxxer</groupId>
    <artifactId>HikariCP</artifactId>
    <version>4.0.3</version>
    <scope>compile</scope>
</dependency>

----------------------------------------

TITLE: Rendering Bukkit Commands Configuration with Custom Component
DESCRIPTION: This code snippet uses a custom React component called ConfigDocBlock to render the Bukkit commands configuration specification. The component takes the imported BukkitCommandsSpec as a prop.

LANGUAGE: jsx
CODE:
<ConfigDocBlock data={BukkitCommandsSpec}/>

----------------------------------------

TITLE: Interpolated Animation of Display Entities
DESCRIPTION: Implementation of smooth animation using transformation interpolation to create a rotating item display.

LANGUAGE: java
CODE:
ItemDisplay display = location.getWorld().spawn(location, ItemDisplay.class, entity -> {
    entity.setItemStack(ItemStack.of(Material.GOLDEN_SWORD));
});

int duration = 5 * 20;

Matrix4f mat = new Matrix4f().scale(0.5F);
Bukkit.getScheduler().runTaskTimer(plugin, task -> {
    if (!display.isValid()) {
        task.cancel();
        return;
    }

    display.setTransformationMatrix(mat.rotateY(((float) Math.toRadians(180)) + 0.1F));
    display.setInterpolationDelay(0);
    display.setInterpolationDuration(duration);
}, 1, duration);

----------------------------------------

TITLE: Configuring Per-World Settings in Paper YAML
DESCRIPTION: Demonstrates how to enable the 'lootables.auto-replenish' option for a specific world named 'resource' by editing the paper-world.yml file within the world folder.

LANGUAGE: yaml
CODE:
_version: 28

lootables:
  auto-replenish: true

----------------------------------------

TITLE: Calling a Custom Event in Java for Paper Minecraft Plugin
DESCRIPTION: This snippet demonstrates how to call the custom event from within a plugin class and handle the event's message.

LANGUAGE: java
CODE:
public class ExamplePlugin extends JavaPlugin {

    // ...

    public void callCoolPaperEvent() {
        PaperIsCoolEvent coolEvent = new PaperIsCoolEvent(Component.text("Paper is cool!"));
        coolEvent.callEvent();
        Bukkit.broadcast(coolEvent.getMessage());
    }
}

----------------------------------------

TITLE: Building PaperMC Docs for Production
DESCRIPTION: This command builds a production-ready deployment of the PaperMC documentation into the 'build' directory. The resulting files are ready for hosting on any static content server.

LANGUAGE: bash
CODE:
$ pnpm run build

----------------------------------------

TITLE: Importing React Components for Paper Configuration Display
DESCRIPTION: This code snippet imports React and custom components used to display the Paper global configuration structure. It also imports the raw YAML content of the configuration specification.

LANGUAGE: jsx
CODE:
import React from 'react';
import ConfigDocBlock from '@site/src/components/config/ConfigDocBlock';
import GlobalConfigSpec from '!!raw-loader!@site/config-specs/paper/paper-global.yml';

----------------------------------------

TITLE: Starting spark Profiler in Paper
DESCRIPTION: Command to initiate spark profiler with a 10-minute timeout period. Returns a URL to a profiler report that can be analyzed or shared with developers.

LANGUAGE: bash
CODE:
/spark profiler start --timeout 600

----------------------------------------

TITLE: Storing Lists in PDC
DESCRIPTION: Demonstrates different ways to store and retrieve lists of data in a PDC using both verbose and simplified syntax.

LANGUAGE: java
CODE:
// Storing a list of strings in a container by verbosely creating
// a list data type wrapping the string data type.
container.set(
    key,
    PersistentDataType.LIST.listTypeFrom(PersistentDataType.STRING),
    List.of("a", "list", "of", "strings")
);

// Storing a list of strings in a container by using the api
// provided pre-definitions of commonly used list types.
container.set(key, PersistentDataType.LIST.strings(), List.of("a", "list", "of", "strings"));

// Retrieving a list of strings from the container.
List<String> strings = container.get(key, PersistentDataType.LIST.strings());

----------------------------------------

TITLE: Implementing RawCommand in Velocity
DESCRIPTION: This snippet demonstrates how to create a custom command using RawCommand, which is useful for commands that don't need argument processing or for use with external command frameworks.

LANGUAGE: java
CODE:
package com.example.velocityplugin;

import com.velocitypowered.api.command.RawCommand;
import net.kyori.adventure.text.Component;

public final class EchoCommand implements RawCommand {

    @Override
    public void execute(final Invocation invocation) {
        invocation.source().sendMessage(Component.text(invocation.arguments()));
    }

    @Override
    public boolean hasPermission(final Invocation invocation) {
        return invocation.source().hasPermission("command.echo");
    }
}

----------------------------------------

TITLE: Installing Java 21 on DNF-based Linux Distributions
DESCRIPTION: This code installs Java 21 on Fedora, CentOS/RHEL 7+, and related distributions using DNF package manager.

LANGUAGE: bash
CODE:
sudo rpm --import https://yum.corretto.aws/corretto.key
sudo curl -Lo /etc/yum.repos.d/corretto.repo https://yum.corretto.aws/corretto.repo
sudo dnf -y install java-21-amazon-corretto-devel

----------------------------------------

TITLE: Permission Table Component Usage
DESCRIPTION: React component implementations for displaying various permission tables including Vanilla, Bukkit, and Paper commands and permissions.

LANGUAGE: jsx
CODE:
<CommandsPermissionsTable data={vanillaCommands} />
<CommandsPermissionsTable data={bukkitCommands} />
<CommandsPermissionsTable data={paperCommands} />
<PermissionsTable data={vanillaPermissions}/>
<PermissionsTable data={bukkitPermissions}/>
<PermissionsTable data={paperPermissions}/>

----------------------------------------

TITLE: Reading Damage Value from ItemStack in Java
DESCRIPTION: Illustrates how to read the damage value from an ItemStack, including null checking for optional components.

LANGUAGE: java
CODE:
// The damage of an item can be null, so we require a null check
Integer damageValue = stack.getData(DataComponentTypes.DAMAGE);
if (damageValue != null) {
    logger.info("Current damage: " + damageValue);
} else {
    logger.info("This item doesn't have a damage component set.");
}

// Certain components, like the max stack size, will always be present on an item
Integer maxStackSize = stack.getData(DataComponentTypes.MAX_STACK_SIZE);

----------------------------------------

TITLE: Implementing Synchronous and Asynchronous Suggestions in Java
DESCRIPTION: Two examples of implementing suggestions, one synchronously and one asynchronously. The synchronous method is safer for using Paper API, while the asynchronous method allows for potentially time-consuming operations.

LANGUAGE: java
CODE:
// Synchronous
Commands.argument("name", StringArgumentType.word())
    .suggests((ctx, builder) -> {
        builder.suggest("first");
        builder.suggest("second");

        return builder.buildFuture();
    });

// Asynchronous
Commands.argument("name", StringArgumentType.word())
    .suggests((ctx, builder) -> CompletableFuture.supplyAsync(() -> {
        builder.suggest("first");
        builder.suggest("second");

        return builder.build();
    }));

----------------------------------------

TITLE: Importing Docusaurus Components for Documentation
DESCRIPTION: Sets up the required Docusaurus theme components for rendering a documentation page with a card list of items from the current sidebar category

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

LANGUAGE: jsx
CODE:
<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Importing and Rendering DocCardList Component in React
DESCRIPTION: This code snippet imports the DocCardList component and a custom hook from Docusaurus theme. It then renders a title and the DocCardList component, passing it the items from the current sidebar category.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

# Tools

Collection of useful tools for server admins or plugin developers.

---

<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Setting Paper System Property in Bash
DESCRIPTION: Demonstrates how to set a Paper system property when starting the server using a bash command. This example sets the log level to FINE.

LANGUAGE: bash
CODE:
java -Dpaper.log-level=FINE -jar paper.jar

----------------------------------------

TITLE: Importing Docusaurus Components for Documentation
DESCRIPTION: Sets up the required Docusaurus theme components for rendering a documentation page with a card list of items from the current sidebar category

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

LANGUAGE: jsx
CODE:
<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Basic Event Listener Implementation in Java
DESCRIPTION: Demonstrates how to create a basic event listener method using the @Subscribe annotation in Velocity.

LANGUAGE: java
CODE:
@Subscribe
public void onPlayerChat(PlayerChatEvent event) {
	// do stuff
}

----------------------------------------

TITLE: Importing Configuration Components in React JSX
DESCRIPTION: React component imports for rendering the Paper world configuration documentation, including a custom ConfigDocBlock component and raw YAML loader for the configuration specification.

LANGUAGE: jsx
CODE:
import React from 'react';
import ConfigDocBlock from '@site/src/components/config/ConfigDocBlock';
import WorldConfigSpec from '!!raw-loader!@site/config-specs/paper/paper-world-defaults.yml';

----------------------------------------

TITLE: Importing React Configuration Documentation Block
DESCRIPTION: React component imports and configuration display setup for the Bukkit configuration documentation page.

LANGUAGE: jsx
CODE:
import React from 'react';
import ConfigDocBlock from '@site/src/components/config/ConfigDocBlock';
import BukkitConfigSpec from '!!raw-loader!@site/config-specs/paper/bukkit.yml';

<ConfigDocBlock data={BukkitConfigSpec}/>

----------------------------------------

TITLE: Rendering Documentation Navigation Cards with DocCardList
DESCRIPTION: Creates a navigation interface using DocCardList component with links to different documentation sections including Administration, Development, and Contributing pages. Each card includes a label, href link, and custom emoji icon.

LANGUAGE: jsx
CODE:
<DocCardList items={[
  {
    "type": "link",
    "label": "Administration",
    "href": "/paper/admin",
    "customEmoji": "mdi:account-cog",
  },
  {
    "type": "link",
    "label": "Development",
    "href": "/paper/dev",
    "customEmoji": "mdi:code-braces",
  },
  {
    "type": "link",
    "label": "Contributing",
    "href": "/paper/contributing",
    "customEmoji": "mdi:comment-edit",
  },
]}/>

----------------------------------------

TITLE: Implementing Fine Position Argument in Paper Command API
DESCRIPTION: Shows implementation of fine position argument handling that accepts decimal coordinates. Features optional centering of integer inputs and uses FinePositionResolver to process coordinates. Supports precise location specifications with decimal points.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> finePositionArgument() {
    return Commands.literal("fineposition")
        .then(Commands.argument("arg", ArgumentTypes.finePosition(true))
            .executes(ctx -> {
                final FinePositionResolver resolver = ctx.getArgument("arg", FinePositionResolver.class);
                final FinePosition finePosition = resolver.resolve(ctx.getSource());

                ctx.getSource().getSender().sendRichMessage("Position: <red><x></red> <green><y></green> <blue><z></blue>",
                    Placeholder.unparsed("x", Double.toString(finePosition.x())),
                    Placeholder.unparsed("y", Double.toString(finePosition.y())),
                    Placeholder.unparsed("z", Double.toString(finePosition.z()))
                );
                return Command.SINGLE_SUCCESS;
            }))
        .build();
}

----------------------------------------

TITLE: Rendering Documentation Navigation Cards with DocCardList
DESCRIPTION: Creates a navigation interface using DocCardList component with links to different documentation sections including Administration, Development, and Contributing pages. Each card includes a label, href link, and custom emoji icon.

LANGUAGE: jsx
CODE:
<DocCardList items={[
  {
    "type": "link",
    "label": "Administration",
    "href": "/paper/admin",
    "customEmoji": "mdi:account-cog",
  },
  {
    "type": "link",
    "label": "Development",
    "href": "/paper/dev",
    "customEmoji": "mdi:code-braces",
  },
  {
    "type": "link",
    "label": "Contributing",
    "href": "/paper/contributing",
    "customEmoji": "mdi:comment-edit",
  },
]}/>

----------------------------------------

TITLE: GitHub Actions Workflow for Hangar Publishing
DESCRIPTION: GitHub Actions workflow configuration for automated publishing to Hangar. Triggers on push to specified branches and handles the build and publish process.

LANGUAGE: yaml
CODE:
name: Publish to Hangar
on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Publish
        env:
          HANGAR_API_TOKEN: ${{ secrets.HANGAR_API_TOKEN }}
        run: ./gradlew build publishPluginPublicationToHangar --stacktrace

----------------------------------------

TITLE: Importing Configuration Components in React JSX
DESCRIPTION: React component imports for rendering the Paper world configuration documentation, including a custom ConfigDocBlock component and raw YAML loader for the configuration specification.

LANGUAGE: jsx
CODE:
import React from 'react';
import ConfigDocBlock from '@site/src/components/config/ConfigDocBlock';
import WorldConfigSpec from '!!raw-loader!@site/config-specs/paper/paper-world-defaults.yml';

----------------------------------------

TITLE: Rendering Bukkit Commands Configuration Block
DESCRIPTION: Component implementation for displaying the Bukkit commands configuration using the ConfigDocBlock component with the loaded specification data.

LANGUAGE: jsx
CODE:
<ConfigDocBlock data={BukkitCommandsSpec}/>

----------------------------------------

TITLE: Importing DocCardList Component in React/JSX
DESCRIPTION: Imports the DocCardList theme component used for documentation navigation.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";

----------------------------------------

TITLE: Implementing PluginLoader for Paper Plugins
DESCRIPTION: Java code example demonstrating how to implement the PluginLoader interface for a Paper plugin. It shows how to add JAR libraries and use a Maven library resolver to set up the plugin's classpath.

LANGUAGE: java
CODE:
public class TestPluginLoader implements PluginLoader {

    @Override
    public void classloader(PluginClasspathBuilder classpathBuilder) {
        classpathBuilder.addLibrary(new JarLibrary(Path.of("dependency.jar")));

        MavenLibraryResolver resolver = new MavenLibraryResolver();
        resolver.addDependency(new Dependency(new DefaultArtifact("com.example:example:version"), null));
        resolver.addRepository(new RemoteRepository.Builder("paper", "default", "https://repo.papermc.io/repository/maven-public/").build());

        classpathBuilder.addLibrary(resolver);
    }
}

----------------------------------------

TITLE: Importing DocCardList Component in JSX
DESCRIPTION: This snippet imports the DocCardList component from the theme, which is likely used to create a list of documentation cards or links.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";

----------------------------------------

TITLE: Importing DocCardList Component in React/JSX
DESCRIPTION: Imports the DocCardList theme component used for documentation navigation.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";

----------------------------------------

TITLE: Implementing Operator Check Command in Java
DESCRIPTION: Shows how to create a command that verifies if the sender is a server operator before allowing execution.

LANGUAGE: java
CODE:
Commands.literal("testcmd")
    .requires(sender -> sender.getSender().isOp())
    .executes(ctx -> {
        ctx.getSource().getSender().sendRichMessage("<gold>You are a server operator!");
        return Command.SINGLE_SUCCESS;
    });

----------------------------------------

TITLE: Implementing Broadcast Command Execution in Java
DESCRIPTION: Shows the complete implementation of the execute method for a broadcast command, including argument handling, message composition, and broadcasting.

LANGUAGE: java
CODE:
package your.package.name;

import io.papermc.paper.command.brigadier.BasicCommand;
import io.papermc.paper.command.brigadier.CommandSourceStack;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.minimessage.MiniMessage;
import net.kyori.adventure.text.minimessage.tag.resolver.Placeholder;
import org.bukkit.Bukkit;
import org.jspecify.annotations.NullMarked;
import org.jspecify.annotations.Nullable;

@NullMarked
public class BroadcastCommand implements BasicCommand {

    @Override
    public void execute(CommandSourceStack commandSourceStack, String[] args) {
        final Component name = commandSourceStack.getExecutor() != null
            ? commandSourceStack.getExecutor().name()
            : commandSourceStack.getSender().name();

        if (args.length == 0) {
            commandSourceStack.getSender().sendRichMessage("<red>You cannot send an empty broadcast!");
            return;
        }

        final String message = String.join(" ", args);
        final Component broadcastMessage = MiniMessage.miniMessage().deserialize(
            "<red><bold>BROADCAST</red> <name> <dark_gray>»</dark_gray> <message>",
            Placeholder.component("name", name),
            Placeholder.unparsed("message", message)
        );

        Bukkit.broadcast(broadcastMessage);
    }

    @Override
    public @Nullable String permission() {
        return "example.broadcast.use";
    }
}

----------------------------------------

TITLE: Configuring Spigot/Paper for Legacy Forwarding
DESCRIPTION: Enable BungeeCord support in the spigot.yml configuration file to allow Spigot or Paper to understand forwarded data from Velocity.

LANGUAGE: yaml
CODE:
settings:
  bungeecord: true

----------------------------------------

TITLE: Rotating a Block Display Entity in Java
DESCRIPTION: This snippet shows how to apply rotation transformations to a BlockDisplay entity, tipping it on its corner by rotating around the X and Z axes.

LANGUAGE: java
CODE:
world.spawn(location, BlockDisplay.class, entity -> {
    entity.setBlock(Material.GRASS_BLOCK.createBlockData());
    entity.setTransformation(
        new Transformation(
                new Vector3f(), // no translation
                new AxisAngle4f((float) -Math.toRadians(45), 1, 0, 0), // rotate -45 degrees on the X axis
                new Vector3f(2, 2, 2), // scale up by a factor of 2 on all axes
                new AxisAngle4f((float) Math.toRadians(45), 0, 0, 1) // rotate +45 degrees on the Z axis
        )
    );
    // or set a raw transformation matrix from JOML
    // entity.setTransformationMatrix(
    //         new Matrix4f()
    //                 .scale(2) // scale up by a factor of 2 on all axes
    //                 .rotateXYZ(
    //                         (float) Math.toRadians(360 - 45), // rotate -45 degrees on the X axis
    //                         0,
    //                         (float) Math.toRadians(45) // rotate +45 degrees on the Z axis
    //                 )
    // );
});

----------------------------------------

TITLE: Importing React Components for Waterfall Configuration Display
DESCRIPTION: This code snippet imports necessary React components and configuration data to display Waterfall's configuration options. It uses a custom ConfigDocBlock component to render the configuration structure.

LANGUAGE: jsx
CODE:
import React from 'react';
import ConfigDocBlock from '@site/src/components/config/ConfigDocBlock';
import WaterfallConfigSpec from '!!raw-loader!@site/config-specs/waterfall/waterfall-config.yml';

----------------------------------------

TITLE: Rendering Documentation Cards for Paper API
DESCRIPTION: This JSX code renders a DocCardList component, passing it the items from the current sidebar category. This dynamically generates a list of documentation cards for the Paper API guide based on the sidebar structure.

LANGUAGE: JSX
CODE:
<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Configuring Plugin Commands in YML
DESCRIPTION: Demonstrates how to define commands for the plugin, including descriptions, usage instructions, aliases, and required permissions.

LANGUAGE: yaml
CODE:
commands:
    command:
        description: "This is a command"
        usage: "/command <arg>"
        aliases: [cmd, command]
        permission: permission.node
        permission-message: "You do not have permission to use this command"

----------------------------------------

TITLE: Configuring BungeeGuard Forwarding in Velocity TOML
DESCRIPTION: Set the player-info-forwarding-mode to 'bungeeguard' in the velocity.toml configuration file to enable BungeeGuard forwarding for added security.

LANGUAGE: toml
CODE:
player-info-forwarding-mode = "bungeeguard"

----------------------------------------

TITLE: Registering Commands in Velocity Plugin
DESCRIPTION: This snippet shows how to register custom commands within a Velocity plugin. It demonstrates creating command metadata, building a BrigadierCommand, and registering it with the CommandManager.

LANGUAGE: java
CODE:
package com.example.velocityplugin;

import com.google.inject.Inject;
import com.velocitypowered.api.command.BrigadierCommand;
import com.velocitypowered.api.event.Subscribe;
import com.velocitypowered.api.event.proxy.ProxyInitializeEvent;
import com.velocitypowered.api.plugin.Plugin;
import com.velocitypowered.api.proxy.ProxyServer;

@Plugin(id = "helloworld")
public final class HelloWorldPlugin {
    private final ProxyServer proxy;

    @Inject
    public HelloWorldPlugin(ProxyServer proxy) {
        this.proxy = proxy;
    }

    @Subscribe
    public void onProxyInitialize(ProxyInitializeEvent event) {
        CommandManager commandManager = proxy.getCommandManager();
        CommandMeta commandMeta = commandManager.metaBuilder("test")
            .aliases("otherAlias", "anotherAlias")
            .plugin(this)
            .build();

        BrigadierCommand commandToRegister = TestBrigadierCommand.createBrigadierCommand(proxy);

        commandManager.register(commandMeta, commandToRegister);
    }
}

----------------------------------------

TITLE: Implementing BrigadierCommand in Velocity
DESCRIPTION: This snippet demonstrates how to create a custom command using BrigadierCommand, which allows for complex argument handling and suggestions. It includes examples of permission checks, subcommands, and custom suggestions.

LANGUAGE: java
CODE:
package com.example.velocityplugin;

import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.Command;
import com.mojang.brigadier.tree.LiteralCommandNode;
import com.velocitypowered.api.command.BrigadierCommand;
import com.velocitypowered.api.command.CommandSource;
import com.velocitypowered.api.command.VelocityBrigadierMessage;
import com.velocitypowered.api.proxy.ProxyServer;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;

public final class TestBrigadierCommand {

    public static BrigadierCommand createBrigadierCommand(final ProxyServer proxy) {
        LiteralCommandNode<CommandSource> helloNode = BrigadierCommand.literalArgumentBuilder("test")
            .requires(source -> source.hasPermission("test.permission"))
            .executes(context -> {
                CommandSource source = context.getSource();

                Component message = Component.text("Hello World", NamedTextColor.AQUA);
                source.sendMessage(message);

                return Command.SINGLE_SUCCESS;
            })
            .then(BrigadierCommand.requiredArgumentBuilder("argument", StringArgumentType.word())
                .suggests((ctx, builder) -> {
                    proxy.getAllPlayers().forEach(player -> builder.suggest(
                            player.getUsername(),
                            VelocityBrigadierMessage.tooltip(
                                    MiniMessage.miniMessage().deserialize("<rainbow>" + player.getUsername())
                            )
                    ));
                    builder.suggest("all");
                    return builder.buildFuture();
                })
                .executes(context -> {
                    String argumentProvided = context.getArgument("argument", String.class);
                    proxy.getPlayer(argumentProvided).ifPresent(player ->
                        player.sendMessage(Component.text("Hello!"))
                    );
                    return Command.SINGLE_SUCCESS;
                })
            )
            .build();

        return new BrigadierCommand(helloNode);
    }
}

----------------------------------------

TITLE: Implementing SimpleCommand in Velocity
DESCRIPTION: This snippet shows how to create a custom command using SimpleCommand, which provides a simpler interface for command handling. It includes methods for execution, permission checking, and suggestion generation.

LANGUAGE: java
CODE:
package com.example.velocityplugin;

import com.velocitypowered.api.command.CommandSource;
import com.velocitypowered.api.command.SimpleCommand;
import java.util.concurrent.CompletableFuture;
import java.util.List;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;

public final class TestCommand implements SimpleCommand {

    @Override
    public void execute(final Invocation invocation) {
        CommandSource source = invocation.source();
        String[] args = invocation.arguments();

        source.sendMessage(Component.text("Hello World!", NamedTextColor.AQUA));
    }

    @Override
    public boolean hasPermission(final Invocation invocation) {
        return invocation.source().hasPermission("command.test");
    }

    @Override
    public List<String> suggest(final Invocation invocation) {
        return List.of();
    }

    @Override
    public CompletableFuture<List<String>> suggestAsync(final Invocation invocation) {
        return CompletableFuture.completedFuture(List.of());
    }
}

----------------------------------------

TITLE: Server Startup Command with Debug Configuration
DESCRIPTION: Shows the startup command for enabling remote debugging on a Paper server. Includes JVM debug arguments for remote connection.

LANGUAGE: bash
CODE:
java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -jar paper-%%_MAJ_MIN_PAT_MC_%%.jar nogui

----------------------------------------

TITLE: Implementing TemplateRotation Argument in Paper Minecraft Command
DESCRIPTION: This snippet shows how to use the TemplateRotation argument in a Paper Minecraft command. It creates a command that accepts a StructureRotation as input and sends a message with the selected rotation.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> templateRotationArgument() {
    return Commands.literal("templaterotation")
        .then(Commands.argument("rotation", ArgumentTypes.templateRotation())
            .executes(ctx -> {
                final StructureRotation rotation = ctx.getArgument("rotation", StructureRotation.class);

                ctx.getSource().getSender().sendPlainMessage("You selected: " + rotation.name());

                return Command.SINGLE_SUCCESS;
            })
        ).build();
}

----------------------------------------

TITLE: Displaying Java Version Property in Velocity Configuration
DESCRIPTION: This snippet shows how to reference a property for the minimum required Java version in Velocity documentation.

LANGUAGE: markdown
CODE:
Velocity 3.3.x requires Java <Property name="VELOCITY_JAVA_MIN" /> or above.

----------------------------------------

TITLE: Implementing World Argument in Paper Command API
DESCRIPTION: Implements world selection argument handling that allows users to choose from loaded worlds. Includes player teleportation functionality and proper error handling for non-player execution.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> worldArgument() {
    return Commands.literal("teleport-to-world")
        .then(Commands.argument("world", ArgumentTypes.world())
            .executes(ctx -> {
                final World world = ctx.getArgument("world", World.class);

                if (ctx.getSource().getExecutor() instanceof Player player) {
                    player.teleport(world.getSpawnLocation(), PlayerTeleportEvent.TeleportCause.COMMAND);
                    ctx.getSource().getSender().sendRichMessage("Successfully teleported <player> to <aqua><world></aqua>",
                        Placeholder.component("player", player.name()),
                        Placeholder.unparsed("world", world.getName())
                    );
                    return Command.SINGLE_SUCCESS;
                }

                ctx.getSource().getSender().sendRichMessage("<red>This command requires a player!");
                return Command.SINGLE_SUCCESS;
            })
        ).build();
}

----------------------------------------

TITLE: Cancelling a Scheduled Task in Java using Velocity Scheduler
DESCRIPTION: This snippet demonstrates how to schedule a repeating task, store the ScheduledTask object, and later cancel the task. It also shows how to check the task's status.

LANGUAGE: java
CODE:
ScheduledTask task = server.getScheduler()
  .buildTask(plugin, () -> {
    // do stuff here
  })
  .repeat(5L, TimeUnit.MINUTES)
  .schedule();
// ...
task.cancel();
// ...
System.out.println(task.status());

----------------------------------------

TITLE: Importing and Rendering Component API Introduction in MDX
DESCRIPTION: Sets up documentation page metadata using frontmatter and imports the Introduction component from the site documentation path to render the component API introduction content.

LANGUAGE: mdx
CODE:
---
slug: /dev/component-api/introduction
description: An introduction to how components work.
title: Introduction
---

import Introduction from "@site/docs/paper/dev/api/component-api/intro.mdx";

<Introduction/>

----------------------------------------

TITLE: Permission Table Component Implementation
DESCRIPTION: Implementation of permission table components for different server types, displaying both command permissions and general permissions with imported data.

LANGUAGE: jsx
CODE:
<CommandsPermissionsTable data={vanillaCommands} />
<CommandsPermissionsTable data={bukkitCommands} />
<CommandsPermissionsTable data={paperCommands} />
<PermissionsTable data={vanillaPermissions}/>
<PermissionsTable data={bukkitPermissions}/>
<PermissionsTable data={paperPermissions}/>

----------------------------------------

TITLE: Logging Invalid Payload Error in Velocity
DESCRIPTION: This code snippet shows a log message when a player is kicked from a server due to an invalid payload registration.

LANGUAGE: plaintext
CODE:
[server connection] player1 -> hub has connected
[connected player] player1 (/localhost:58943): kicked from server hub: Invalid payload REGISTER!

----------------------------------------

TITLE: Accessing LifecycleEventManager in Bootstrapper
DESCRIPTION: Shows how to access the LifecycleEventManager within a plugin bootstrapper. This manager is tied to the BootstrapContext and allows registration of lifecycle event handlers during early initialization.

LANGUAGE: java
CODE:
@Override
public void bootstrap(@NotNull BootstrapContext context) {
  final LifecycleEventManager<BootstrapContext> lifecycleManager = context.getLifecycleManager();
}

----------------------------------------

TITLE: Complete Plugin Class with Event Registration
DESCRIPTION: Example of a complete Velocity plugin class showing dependency injection and event listener registration.

LANGUAGE: java
CODE:
@Plugin(id = "myfirstplugin", name = "My Plugin", version = "0.1.0", dependencies = {@Dependency(id = "wonderplugin")})
public class VelocityTest {

  private final ProxyServer server;
  private final Logger logger;

  @Inject
  public VelocityTest(ProxyServer server, Logger logger) {
    this.server = server;
    this.logger = logger;
  }

  @Subscribe
  public void onInitialize(ProxyInitializeEvent event) {
    server.getEventManager().register(this, new MyListener());
  }
}

public class MyListener {

  @Subscribe(order = PostOrder.EARLY)
  public void onPlayerChat(PlayerChatEvent event) {
    // do something here
  }

}

----------------------------------------

TITLE: Basic Velocity Plugin Structure
DESCRIPTION: Shows the basic structure of a Velocity plugin using the @Plugin annotation with core metadata.

LANGUAGE: java
CODE:
@Plugin(
  id = "myfirstplugin",
  name = "My Plugin",
  version = "0.1.0"
)
public class VelocityTest {
  // ...
}

----------------------------------------

TITLE: Plugin Mapping Configuration for Mojang Mappings
DESCRIPTION: Build configuration to specify Mojang mappings for plugins in Paper 1.20.5+. Sets the paperweight-mappings-namespace manifest attribute.

LANGUAGE: kotlin
CODE:
tasks.jar {
  manifest {
    attributes["paperweight-mappings-namespace"] = "mojang"
  }
}
// if you have shadowJar configured
tasks.shadowJar {
  manifest {
    attributes["paperweight-mappings-namespace"] = "mojang"
  }
}

----------------------------------------

TITLE: Configure ReobfJar Task
DESCRIPTION: Configuration to make the reobfJar task run as part of the default build task.

LANGUAGE: kotlin
CODE:
tasks.assemble {
    dependsOn(tasks.reobfJar)
}

----------------------------------------

TITLE: Logging Signed Chat Message Cancellation Error in Velocity
DESCRIPTION: This snippet shows a log message when a plugin attempts to cancel a signed chat message, which is not possible in Minecraft 1.19.1 and newer.

LANGUAGE: plaintext
CODE:
A plugin tried to cancel a signed chat message. This is no longer possible in 1.19.1 and newer. Disconnecting player <player>

----------------------------------------

TITLE: React Imports and Component Usage for Permission Tables
DESCRIPTION: React component imports and data usage for rendering permission tables. Uses custom components to display command and general permissions for Vanilla, Bukkit, and Paper server components.

LANGUAGE: jsx
CODE:
import React from "react";
import { CommandsPermissionsTable, PermissionsTable } from "@site/src/components/permission/Permissions";
import {vanillaCommands, bukkitCommands, paperCommands, vanillaPermissions, bukkitPermissions, paperPermissions} from "@site/src/components/permission/PermissionSpec";

----------------------------------------

TITLE: Adding Required Plugin Dependencies
DESCRIPTION: Demonstrates how to add required plugin dependencies using the @Dependency annotation within the @Plugin annotation.

LANGUAGE: java
CODE:
@Plugin(
  id = "myfirstplugin",
  name = "My Plugin",
  version = "0.1.0",
  dependencies = {
    @Dependency(id = "wonderplugin")
  }
)
public class VelocityTest {
  // ...
}

----------------------------------------

TITLE: Configuring Legacy Forwarding in Velocity TOML
DESCRIPTION: Set the player-info-forwarding-mode to 'legacy' in the velocity.toml configuration file to enable BungeeCord-compatible forwarding.

LANGUAGE: toml
CODE:
player-info-forwarding-mode = "legacy"

----------------------------------------

TITLE: React Imports and Component Usage for Permission Tables
DESCRIPTION: React component imports and data usage for rendering permission tables. Uses custom components to display command and general permissions for Vanilla, Bukkit, and Paper server components.

LANGUAGE: jsx
CODE:
import React from "react";
import { CommandsPermissionsTable, PermissionsTable } from "@site/src/components/permission/Permissions";
import {vanillaCommands, bukkitCommands, paperCommands, vanillaPermissions, bukkitPermissions, paperPermissions} from "@site/src/components/permission/PermissionSpec";

----------------------------------------

TITLE: Java 11+ GC Logging Configuration
DESCRIPTION: GC logging flags for Java 11 and newer versions, configuring log rotation and detailed garbage collection analysis.

LANGUAGE: bash
CODE:
-Xlog:gc*:logs/gc.log:time,uptime:filecount=5,filesize=1M

----------------------------------------

TITLE: Configuring Event Handler Priority
DESCRIPTION: Shows how to configure event handler priority and monitor status in the lifecycle system.

LANGUAGE: java
CODE:
@Override
public void onEnable() {
    final LifecycleEventManager<Plugin> lifecycleManager = this.getLifecycleManager();
    PrioritizedLifecycleEventHandlerConfiguration<LifecycleEventOwner> config = LifecycleEvents.SOME_EVENT.newHandler((event) -> {
        // Handler for the event
    });
    config.priority(10); // sets a priority of 10
    // or
    config.monitor(); // marks the handler as a monitor
}

----------------------------------------

TITLE: Velocity Server Configuration
DESCRIPTION: TOML configuration for defining Minecraft servers that Velocity can connect to, including server addresses and connection attempt order.

LANGUAGE: toml
CODE:
[servers]
# Configure your servers here. Each key represents the server's name, and the value
# represents the IP address of the server to connect to.
lobby = "127.0.0.1:30066"
factions = "127.0.0.1:30067"
minigames = "127.0.0.1:30068"

# In what order we should try servers when a player logs in or is kicked from a server.
try = [
  "lobby",
  "factions"
]

----------------------------------------

TITLE: Configuring Modern Forwarding in Velocity TOML
DESCRIPTION: Set the player-info-forwarding-mode to 'modern' in the velocity.toml configuration file to enable Velocity's modern forwarding format.

LANGUAGE: toml
CODE:
player-info-forwarding-mode = "modern"

----------------------------------------

TITLE: Setting Global Default Values in Paper YAML
DESCRIPTION: Shows the structure of the paper-world-defaults.yml file, which contains global default settings for spawn limits and lootable replenishment that can be overridden per world.

LANGUAGE: yaml
CODE:
lootables:
  auto-replenish: true
entities:
  spawning:
    spawn-limits:
      ambient: 70
      axolotls: 10
      creature: 15
      monster: 5
      underground_water_creature: 5
      water_ambient: 5
      water_creature: 20

----------------------------------------

TITLE: Registering Configured Event Handler
DESCRIPTION: Demonstrates how to register a configured lifecycle event handler with the manager.

LANGUAGE: java
CODE:
@Override
public void onEnable() {
    final LifecycleEventManager<Plugin> lifecycleManager = this.getLifecycleManager();
    PrioritizedLifecycleEventHandlerConfiguration<LifecycleEventOwner> config = LifecycleEvents.SOME_EVENT.newHandler((event) -> {
        // Handler for the event
    }).priority(10);
    lifecycleManager.registerEventHandler(config);
}

----------------------------------------

TITLE: Configuring Gravity Block Duplication in Paper
DESCRIPTION: Configuration setting to enable gravity block duplication using end portals. This setting is considered unsafe and may cause server stability issues.

LANGUAGE: yaml
CODE:
unsupported-settings:
  allow-unsafe-end-portal-teleportation: true

----------------------------------------

TITLE: Linux/macOS Velocity Launch Script
DESCRIPTION: Shell script for launching Velocity proxy server on Unix-based systems with optimized JVM arguments.

LANGUAGE: bash
CODE:
#!/bin/sh

java -Xms1G -Xmx1G -XX:+UseG1GC -XX:G1HeapRegionSize=4M -XX:+UnlockExperimentalVMOptions -XX:+ParallelRefProcEnabled -XX:+AlwaysPreTouch -XX:MaxInlineLevel=15 -jar velocity*.jar

----------------------------------------

TITLE: Velocity Startup Log Output
DESCRIPTION: Example console output showing successful Velocity proxy server startup with version information and initialization status.

LANGUAGE: log
CODE:
[05:41:13 INFO]: Booting up Velocity 3.3.0-SNAPSHOT (git-74c932e5-b363)...
[05:41:13 INFO]: Loading localizations...
[05:41:13 INFO]: Connections will use epoll channels, libdeflate (Linux aarch64) compression, OpenSSL (Linux aarch64) ciphers
[05:41:13 INFO]: Loading plugins...
[05:41:13 INFO]: Loaded 0 plugins
[05:41:13 INFO]: Listening on /[0:0:0:0:0:0:0:0%0]:25565
[05:41:13 INFO]: Done (0.36s)!

----------------------------------------

TITLE: Retrieving Latest Version for Paper Project using Shell and jq
DESCRIPTION: This script fetches the latest available Minecraft version for the Paper project using the PaperMC API. It requires jq to be installed for JSON parsing.

LANGUAGE: shell
CODE:
#!/usr/bin/env sh

PROJECT="paper"

LATEST_VERSION=$(curl -s https://api.papermc.io/v2/projects/${PROJECT} | \
    jq -r '.versions[-1]')

echo "Latest version is $LATEST_VERSION"

----------------------------------------

TITLE: Configuration Documentation Components
DESCRIPTION: React components that render configuration documentation blocks for different server configuration files.

LANGUAGE: jsx
CODE:
<ConfigDocBlock data={ServerProperties} showVanillaValues={true}/>

<ConfigDocBlock data={VanillaWorldDefaults} showVanillaValues={true}/>

<ConfigDocBlock data={VanillaGlobalDefaults} showVanillaValues={true}/>

<ConfigDocBlock data={SpigotChanges} showVanillaValues={true}/>

----------------------------------------

TITLE: Scheduling a Self-Cancelling Task in Java using Velocity Scheduler
DESCRIPTION: This example shows how to create a self-cancelling task using a Consumer<ScheduledTask>. The task cancels itself after executing 10 times, demonstrating conditional self-cancellation.

LANGUAGE: java
CODE:
AtomicInteger integer = new AtomicInteger(0);

ScheduledTask task = server.getScheduler()
  .buildTask(plugin, (selfTask) -> {
    // do stuff here, for example...
    if (integer.addAndGet(1) > 10) {
      selfTask.cancel();
    }
  })
  .repeat(Duration.ofSeconds(4L))
  .schedule();

----------------------------------------

TITLE: Configuring JVM Startup Flags for Velocity Proxy
DESCRIPTION: These JVM flags are recommended for tuning the G1 garbage collector and improving overall performance for the Velocity proxy. They focus on optimizing garbage collection behavior and increasing inline method levels.

LANGUAGE: bash
CODE:
-XX:+UseG1GC -XX:G1HeapRegionSize=4M -XX:+UnlockExperimentalVMOptions -XX:+ParallelRefProcEnabled -XX:+AlwaysPreTouch -XX:MaxInlineLevel=15

----------------------------------------

TITLE: Windows Velocity Launch Script
DESCRIPTION: Batch script for launching Velocity proxy server on Windows with optimized JVM arguments for memory and garbage collection.

LANGUAGE: batch
CODE:
@echo off
java -Xms1G -Xmx1G -XX:+UseG1GC -XX:G1HeapRegionSize=4M -XX:+UnlockExperimentalVMOptions -XX:+ParallelRefProcEnabled -XX:+AlwaysPreTouch -XX:MaxInlineLevel=15 -jar velocity.jar
pause

----------------------------------------

TITLE: Installing Java 21 on macOS using Homebrew
DESCRIPTION: This snippet installs Java 21 on macOS using the Homebrew package manager.

LANGUAGE: bash
CODE:
brew install openjdk@21

----------------------------------------

TITLE: Implementing Item Predicate Validation in Java Command API
DESCRIPTION: Creates a command that tests if items match specified criteria using an item predicate. Demonstrates validation using a wooden sword as an example.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> itemPredicateArgument() {
    return Commands.literal("itempredicate")
        .then(Commands.argument("predicate", ArgumentTypes.itemPredicate())
            .executes(ctx -> {
                final ItemStackPredicate predicate = ctx.getArgument("predicate", ItemStackPredicate.class);
                final ItemStack defaultWoodenSword = ItemType.WOODEN_SWORD.createItemStack();

                ctx.getSource().getSender().sendRichMessage("Does predicate include a default wooden sword? <result>",
                    Placeholder.parsed("result", predicate.test(defaultWoodenSword) ? "<green>true</green>" : "<red>false</red>")
                );
                return Command.SINGLE_SUCCESS;
            }))
        .build();
}

----------------------------------------

TITLE: Importing Start Script Generator Component in JSX
DESCRIPTION: This code snippet imports a custom React component called StartScriptGenerator from a specific file path. The component is then rendered within the page content.

LANGUAGE: jsx
CODE:
import StartScriptGenerator from "@site/src/components/StartScriptGenerator";

<StartScriptGenerator />

----------------------------------------

TITLE: Sending Plugin Messages to Backend Servers in Velocity
DESCRIPTION: This snippet shows two methods for sending plugin messages to backend servers in Velocity: one using any connected player, and another using a specific player's connection. These methods are useful for different scenarios of server communication.

LANGUAGE: java
CODE:
public boolean sendPluginMessageToBackend(RegisteredServer server, ChannelIdentifier identifier, byte[] data) {
    return server.sendPluginMessage(identifier, data);
}

public boolean sendPluginMessageToBackendUsingPlayer(Player player, ChannelIdentifier identifier, byte[] data) {
    Optional<ServerConnection> connection = player.getCurrentServer();
    if (connection.isPresent()) {
        return connection.get().sendPluginMessage(identifier, data);
    }
    return false;
}

----------------------------------------

TITLE: Scheduling Runnable Task
DESCRIPTION: Shows two ways to schedule a runnable task: using a class instance and using a lambda expression.

LANGUAGE: java
CODE:
scheduler.runTaskLater(plugin, new MyRunnableTask(plugin), 20);

LANGUAGE: java
CODE:
scheduler.runTaskLater(plugin, () -> {
    this.plugin.getServer().broadcast(Component.text("Hello, World!"));
}, 20);

----------------------------------------

TITLE: Sample Velocity Configuration in TOML
DESCRIPTION: This snippet demonstrates the structure and common settings found in a velocity.toml configuration file. It includes examples of root settings, server definitions, and advanced options.

LANGUAGE: TOML
CODE:
# Root section
config-version = "2.6"
bind = "0.0.0.0:25565"
motd = "<rainbow>Welcome to my Velocity server!</rainbow>"
show-max-players = 500
online-mode = true
player-info-forwarding-mode = "MODERN"

# Servers section
[servers]
lobby = "lobby.example.com:25565"
survival = "survival.example.com:25565"
creative = "creative.example.com:25565"

try = ["lobby", "survival"]

# Forced hosts section
[forced-hosts]
"lobby.example.com" = ["lobby"]
"survival.example.com" = ["survival"]

# Advanced section
[advanced]
compression-threshold = 256
compression-level = -1
login-ratelimit = 3000
connection-timeout = 5000
read-timeout = 30000
haproxy-protocol = false
tcp-fast-open = false

# Query section
[query]
enabled = false
port = 25577
map = "Velocity"
show-plugins = false

----------------------------------------

TITLE: Installing Java 21 on YUM-based Linux Distributions
DESCRIPTION: This code installs Java 21 on older releases of CentOS/RHEL and Fedora using YUM package manager.

LANGUAGE: bash
CODE:
sudo rpm --import https://yum.corretto.aws/corretto.key
sudo curl -Lo /etc/yum.repos.d/corretto.repo https://yum.corretto.aws/corretto.repo
sudo yum -y install java-21-amazon-corretto-devel

----------------------------------------

TITLE: Importing ItemCommandConverter Component in React
DESCRIPTION: Import statement for the ItemCommandConverter React component used to handle the conversion of Minecraft item commands.

LANGUAGE: jsx
CODE:
import ItemCommandConverter from "@site/src/components/ItemCommandConverter";

----------------------------------------

TITLE: Sending Plugin Messages to Players in Velocity
DESCRIPTION: This snippet illustrates how to send plugin messages to players in Velocity. It's particularly useful when working with client-side mods that can interpret these messages.

LANGUAGE: java
CODE:
public boolean sendPluginMessageToPlayer(Player player, ChannelIdentifier identifier, byte[] data) {
    return player.sendPluginMessage(identifier, data);
}

----------------------------------------

TITLE: Implementing Custom PersistentDataType for UUID in Java
DESCRIPTION: Demonstrates how to create a custom PersistentDataType for storing and retrieving UUID objects in a PDC.

LANGUAGE: java
CODE:
public class UUIDDataType implements PersistentDataType<byte[], UUID> {
     @Override
     public Class<byte[]> getPrimitiveType() {
         return byte[].class;
     }

     @Override
     public Class<UUID> getComplexType() {
         return UUID.class;
     }

     @Override
     public byte[] toPrimitive(UUID complex, PersistentDataAdapterContext context) {
         ByteBuffer bb = ByteBuffer.wrap(new byte[16]);
         bb.putLong(complex.getMostSignificantBits());
         bb.putLong(complex.getLeastSignificantBits());
         return bb.array();
     }

     @Override
     public UUID fromPrimitive(byte[] primitive, PersistentDataAdapterContext context) {
         ByteBuffer bb = ByteBuffer.wrap(primitive);
         long firstLong = bb.getLong();
         long secondLong = bb.getLong();
         return new UUID(firstLong, secondLong);
     }
 }

----------------------------------------

TITLE: Creating Documentation Version in PaperMC
DESCRIPTION: Command to create a new version snapshot of the documentation using Docusaurus

LANGUAGE: bash
CODE:
pnpm docusaurus docs:version:paper "1.20"

----------------------------------------

TITLE: Installing Java 21 on Zypper-based Linux Distributions
DESCRIPTION: This snippet installs Java 21 on openSUSE, SLES, and related distributions using Zypper package manager.

LANGUAGE: bash
CODE:
sudo zypper addrepo https://yum.corretto.aws/corretto.repo
sudo zypper refresh
sudo zypper install java-21-amazon-corretto-devel

----------------------------------------

TITLE: Accessing Global Region Scheduler in Folia
DESCRIPTION: Example of obtaining the global region scheduler for executing tasks that don't belong to any particular region.

LANGUAGE: java
CODE:
GlobalRegionScheduler globalScheduler = server.getGlobalRegionScheduler();

----------------------------------------

TITLE: Fetching Latest Stable Build Number for Paper Project using Shell and jq
DESCRIPTION: This script retrieves the latest stable build number for a specific Minecraft version of the Paper project. It filters builds by the 'default' channel to ensure stability.

LANGUAGE: shell
CODE:
#!/usr/bin/env sh

PROJECT="paper"
MINECRAFT_VERSION="%%_MAJ_MIN_PAT_MC_%%"

LATEST_BUILD=$(curl -s https://api.papermc.io/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION}/builds | \
    jq '.builds | map(select(.channel == "default") | .build) | .[-1]')

if [ "$LATEST_BUILD" != "null" ]; then
    echo "Latest stable build is $LATEST_BUILD"
else
    echo "No stable build for version $MINECRAFT_VERSION found :("
fi

----------------------------------------

TITLE: Custom Event Implementation in Java
DESCRIPTION: Example of creating a custom event class with result handling capabilities.

LANGUAGE: java
CODE:
public class PrivateMessageEvent implements ResultedEvent<GenericResult> {

  private final Player sender;
  private final Player recipient;
  private final String message;

  private GenericResult result = GenericResult.allowed(); // Allowed by default

  public PrivateMessageEvent(Player sender, Player recipient, String message) {
    this.sender = sender;
    this.recipient = recipient;
    this.message = message;
  }

  public Player sender() {
    return sender;
  }

  public Player recipient() {
    return recipient;
  }

  public String message() {
    return message;
  }

  @Override
  public GenericResult result() {
    return result;
  }

  @Override
  public void setResult(GenericResult result) {
    this.result = Objects.requireNonNull(result);
  }

}

----------------------------------------

TITLE: Using SoftwareVersion Component in PaperMC Docs
DESCRIPTION: Examples of using the SoftwareVersion component to embed different version formats of the software

LANGUAGE: jsx
CODE:
<SoftwareVersion versionType={"maj-min-pat"}/> // e.g. 1.19.2
<SoftwareVersion versionType={"maj-min"}/> // e.g. 1.19
<SoftwareVersion versionType={"maj"}/> // e.g. 1

// You can set the project name to be used for the versioning (defaults to paper):
<SoftwareVersion versionType={"maj-min-pat"} project={"velocity"}/> // e.g. 3.3.0-SNAPSHOT

----------------------------------------

TITLE: Resource World Custom Configuration
DESCRIPTION: Configuration override for a resource world, customizing multiple spawn limits and spawn loading behavior.

LANGUAGE: yaml
CODE:
entities:
  spawning:
    spawn-limits:
      axolotls: 8
      creature: 15
      monster: 2
spawn:
  keep-spawn-loaded: false

----------------------------------------

TITLE: Configuring Platform Versions in Gradle Properties
DESCRIPTION: Defines the compatible platform versions for Paper, Velocity and Waterfall in gradle.properties. Supports version ranges and wildcards for platform compatibility declaration.

LANGUAGE: properties
CODE:
# Specify the platform versions for Paper and Velocity.
# Hangar also allows version ranges (such as 1.19-1.20.2) and wildcards (such as 1.20.x).
# TODO: Remove the platforms you don't need and put in the correct versions.
paperVersion=1.12.2, 1.16.5, 1.19-1.20.2
velocityVersion=3.2
waterfallVersion=1.20

----------------------------------------

TITLE: Adding SNAPSHOT Repository
DESCRIPTION: Configuration to add Paper's Maven repository for accessing SNAPSHOT versions.

LANGUAGE: kotlin
CODE:
pluginManagement {
    repositories {
        gradlePluginPortal()
        maven("https://repo.papermc.io/repository/maven-public/")
    }
}

----------------------------------------

TITLE: Implementing Global Scheduler in Folia
DESCRIPTION: Example of accessing the global region scheduler for tasks that don't belong to any particular region.

LANGUAGE: java
CODE:
GlobalRegionScheduler globalScheduler = server.getGlobalRegionScheduler();

----------------------------------------

TITLE: Starting PaperMC Docs Development Server
DESCRIPTION: This command starts the local development server for the PaperMC documentation project. It enables live updates for most changes without needing to restart the server or reload the browser.

LANGUAGE: bash
CODE:
$ pnpm run dev

----------------------------------------

TITLE: GC Logging Configuration for Java 11+
DESCRIPTION: JVM flags to enable garbage collection logging for debugging purposes in Java 11 and newer versions. Uses unified logging syntax.

LANGUAGE: bash
CODE:
-Xlog:gc*:logs/gc.log:time,uptime:filecount=5,filesize=1M

----------------------------------------

TITLE: Installing Java 21 Dependencies on Debian-based Linux
DESCRIPTION: This snippet installs necessary dependencies and tools for Java 21 installation on Debian-based Linux distributions.

LANGUAGE: bash
CODE:
sudo apt-get update && sudo apt-get upgrade
sudo apt-get install ca-certificates apt-transport-https gnupg wget

----------------------------------------

TITLE: Adding Dev Bundle Dependency
DESCRIPTION: Configuration to add the Paper development bundle dependency.

LANGUAGE: kotlin
CODE:
dependencies {
    // Other Dependencies
    paperweight.paperDevBundle("%%_MAJ_MIN_PAT_MC_%%-R0.1-SNAPSHOT")
}

----------------------------------------

TITLE: Implementing Cancellation for Custom Event in Java for Paper Minecraft Plugin
DESCRIPTION: This snippet shows how to make a custom event cancellable by implementing the Cancellable interface and adding the necessary methods.

LANGUAGE: java
CODE:
public class PaperIsCoolEvent extends Event implements Cancellable {

    private static final HandlerList HANDLER_LIST = new HandlerList();
    private Component message;
    private boolean cancelled;

    // ...

    @Override
    public boolean isCancelled() {
        return this.cancelled;
    }

    @Override
    public void setCancelled(boolean cancelled) {
        this.cancelled = cancelled;
    }
}

----------------------------------------

TITLE: Running Paper Minecraft Server with Java
DESCRIPTION: Command to start a Paper Minecraft server with 2GB RAM allocation and no GUI. The command uses -Xms for initial heap size and -Xmx for maximum heap size, with the --nogui flag to disable the graphical interface.

LANGUAGE: bash
CODE:
java -Xms2G -Xmx2G -jar paper.jar --nogui

----------------------------------------

TITLE: Rendering Config Documentation Block in JSX
DESCRIPTION: This code renders the ConfigDocBlock component, passing it the GlobalConfigSpec data to display the Paper global configuration interactively.

LANGUAGE: jsx
CODE:
<ConfigDocBlock data={GlobalConfigSpec}/>

----------------------------------------

TITLE: Rendering DocCardList Component with Navigation Links in JSX
DESCRIPTION: This JSX code renders the DocCardList component with two navigation items for Administration and Development sections. Each item includes a label, href, and custom emoji.

LANGUAGE: JSX
CODE:
<DocCardList items={[
  {
    "type": "link",
    "label": "Administration",
    "href": "/velocity/admin",
    "customEmoji": "mdi:account-cog",
  },
  {
    "type": "link",
    "label": "Development",
    "href": "/velocity/dev",
    "customEmoji": "mdi:code-braces",
  },
]}></DocCardList>

----------------------------------------

TITLE: Converting Legacy Text to MiniMessage Format in Java
DESCRIPTION: Demonstrates how to convert legacy formatted text (using color codes) to the MiniMessage format using serializers. This is useful for migrating older text representations to the newer, more flexible format.

LANGUAGE: java
CODE:
final String legacyString = ChatColor.RED + "This is a legacy " + ChatColor.GOLD + "string";

// runs the legacy string through two serializers to convert legacy -> MiniMessage
final String miniMessageString = MiniMessage.miniMessage().serialize(
    LegacyComponentSerializer.legacySection().deserialize(legacyString)
);

----------------------------------------

TITLE: Adding Paper Dev Bundle Dependency
DESCRIPTION: Adds the Paper development bundle dependency to the project's build.gradle.kts file. This provides access to the Paper API and internal server code.

LANGUAGE: kotlin
CODE:
dependencies {
    // Other Dependencies
    paperweight.paperDevBundle("%%_MAJ_MIN_PAT_MC_%%-R0.1-SNAPSHOT")
}

----------------------------------------

TITLE: Converting Legacy Text to MiniMessage Format in Java
DESCRIPTION: Demonstrates how to convert legacy formatted text (using color codes) to the MiniMessage format using serializers. This is useful for migrating older text representations to the newer, more flexible format.

LANGUAGE: java
CODE:
final String legacyString = ChatColor.RED + "This is a legacy " + ChatColor.GOLD + "string";

// runs the legacy string through two serializers to convert legacy -> MiniMessage
final String miniMessageString = MiniMessage.miniMessage().serialize(
    LegacyComponentSerializer.legacySection().deserialize(legacyString)
);

----------------------------------------

TITLE: Rendering Config Documentation Block in JSX
DESCRIPTION: This code renders the ConfigDocBlock component, passing it the GlobalConfigSpec data to display the Paper global configuration interactively.

LANGUAGE: jsx
CODE:
<ConfigDocBlock data={GlobalConfigSpec}/>

----------------------------------------

TITLE: Invalid Plugin Configuration Error Log
DESCRIPTION: Example log output showing a plugin failing to load due to an invalid plugin.yml configuration file.

LANGUAGE: log
CODE:
Could not load 'plugins/MyAwesomePlugin-1.0.0.jar' in folder 'plugins'
org.bukkit.plugin.InvalidDescriptionException: Invalid plugin.yml

----------------------------------------

TITLE: Configuring Anti-Xray Engine Mode 2 for Default World
DESCRIPTION: Configuration for engine mode 2 which replaces both hidden and replacement blocks with randomly generated hidden blocks. This mode provides better prevention but is more resource intensive.

LANGUAGE: yaml
CODE:
anticheat:
  anti-xray:
    enabled: true
    engine-mode: 2
    hidden-blocks:
    - air
    - copper_ore
    - deepslate_copper_ore
    - raw_copper_block
    - diamond_ore
    - deepslate_diamond_ore
    - gold_ore
    - deepslate_gold_ore
    - iron_ore
    - deepslate_iron_ore
    - raw_iron_block
    - lapis_ore
    - deepslate_lapis_ore
    - redstone_ore
    - deepslate_redstone_ore
    lava-obscures: false
    max-block-height: 64
    replacement-blocks:
    - chest
    - amethyst_block
    - andesite
    - budding_amethyst
    - calcite
    - coal_ore
    - deepslate_coal_ore
    - deepslate
    - diorite
    - dirt
    - emerald_ore
    - deepslate_emerald_ore
    - granite
    - gravel
    - oak_planks
    - smooth_basalt
    - stone
    - tuff
    update-radius: 2
    use-permission: false

----------------------------------------

TITLE: Configuring Docusaurus Admin Guide Page with React Components
DESCRIPTION: Sets up a documentation page using Docusaurus theme components to display an admin guide. Uses DocCardList to render a list of documentation items from the current sidebar category.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Configuring reobfJar Task to Run on Build
DESCRIPTION: Configures the reobfJar task to run as part of the default build task. This ensures that the plugin JAR is re-obfuscated for use with standard Paper servers.

LANGUAGE: kotlin
CODE:
tasks.assemble {
    dependsOn(reobfJar)
}

----------------------------------------

TITLE: Creating Translatable Components in Adventure
DESCRIPTION: This snippet shows how to create a translatable component using Adventure's component system. It uses a translation key and provides an argument to be inserted into the translated message.

LANGUAGE: java
CODE:
final Component message = Component.translatable("some.translation.key", Component.text("The Argument"))

----------------------------------------

TITLE: Display Entity Transformation Flow
DESCRIPTION: Flowchart showing the order of transformations applied to display entities.

LANGUAGE: mermaid
CODE:
flowchart LR;
    translation[Translation]-->left_rotation[Left rotation];
    left_rotation-->scale[Scale];
    scale-->right_rotation[Right rotation];

----------------------------------------

TITLE: Configuring Gradle (Kotlin DSL) for Velocity Plugin
DESCRIPTION: Gradle Kotlin DSL configuration that sets up the required repository and dependencies for Velocity plugin development, including annotation processor.

LANGUAGE: kotlin
CODE:
repositories {
    maven {
        name = "papermc"
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }
}

dependencies {
    compileOnly("com.velocitypowered:velocity-api:%%_MAJ_MIN_PAT_VEL_%%")
    annotationProcessor("com.velocitypowered:velocity-api:%%_MAJ_MIN_PAT_VEL_%%")
}

----------------------------------------

TITLE: Configuring Spigot Mappings for Paper Plugins
DESCRIPTION: Sets the reobfArtifactConfiguration to use Spigot mappings for Paper plugins. This is used when explicitly choosing to use Spigot mappings instead of the default Mojang mappings.

LANGUAGE: kotlin
CODE:
paperweight.reobfArtifactConfiguration = io.papermc.paperweight.userdev.ReobfArtifactConfiguration.REOBF_PRODUCTION

----------------------------------------

TITLE: Example Java Stacktrace Analysis
DESCRIPTION: A sample stacktrace showing a NullPointerException in a Minecraft plugin, demonstrating the call stack and error trace format. The stacktrace shows the exact line where the error occurred and the execution path that led to it.

LANGUAGE: javastacktrace
CODE:
[15:20:42 ERROR]: Could not pass event PluginEnableEvent to TestPlugin v1.0
java.lang.NullPointerException: Cannot invoke "Object.toString()" because "player" is null
        at io.papermc.testplugin.TestPlugin.onPluginEnable(TestPlugin.java:23) ~[TestPlugin-1.0-SNAPSHOT.jar:?]
        at com.destroystokyo.paper.event.executor.asm.generated.GeneratedEventExecutor1.execute(Unknown Source) ~[?:?]
        at org.bukkit.plugin.EventExecutor$2.execute(EventExecutor.java:77) ~[paper-api-1.20.2-R0.1-SNAPSHOT.jar:?]
        at co.aikar.timings.TimedEventExecutor.execute(TimedEventExecutor.java:81) ~[paper-api-1.20.2-R0.1-SNAPSHOT.jar:git-Paper-49]
        at org.bukkit.plugin.RegisteredListener.callEvent(RegisteredListener.java:70) ~[paper-api-1.20.2-R0.1-SNAPSHOT.jar:?]
        at io.papermc.paper.plugin.manager.PaperEventManager.callEvent(PaperEventManager.java:54) ~[paper-1.20.2.jar:git-Paper-49]
        at io.papermc.paper.plugin.manager.PaperPluginManagerImpl.callEvent(PaperPluginManagerImpl.java:126) ~[paper-1.20.2.jar:git-Paper-49]
        at org.bukkit.plugin.SimplePluginManager.callEvent(SimplePluginManager.java:615) ~[paper-api-1.20.2-R0.1-SNAPSHOT.jar:?]
        at io.papermc.paper.plugin.manager.PaperPluginInstanceManager.enablePlugin(PaperPluginInstanceManager.java:200) ~[paper-1.20.2.jar:git-Paper-49]
        at io.papermc.paper.plugin.manager.PaperPluginManagerImpl.enablePlugin(PaperPluginManagerImpl.java:104) ~[paper-1.20.2.jar:git-Paper-49]
        at org.bukkit.plugin.SimplePluginManager.enablePlugin(SimplePluginManager.java:507) ~[paper-api-1.20.2-R0.1-SNAPSHOT.jar:?]
        at org.bukkit.craftbukkit.v1_20_R2.CraftServer.enablePlugin(CraftServer.java:636) ~[paper-1.20.2.jar:git-Paper-49]
        at org.bukkit.craftbukkit.v1_20_R2.CraftServer.enablePlugins(CraftServer.java:547) ~[paper-1.20.2.jar:git-Paper-49]
        at net.minecraft.server.MinecraftServer.loadWorld0(MinecraftServer.java:636) ~[paper-1.20.2.jar:git-Paper-49]
        at net.minecraft.server.MinecraftServer.loadLevel(MinecraftServer.java:435) ~[paper-1.20.2.jar:git-Paper-49]
        at net.minecraft.server.dedicated.DedicatedServer.initServer(DedicatedServer.java:308) ~[paper-1.20.2.jar:git-Paper-49]
        at net.minecraft.server.MinecraftServer.runServer(MinecraftServer.java:1101) ~[paper-1.20.2.jar:git-Paper-49]
        at net.minecraft.server.MinecraftServer.lambda$spin$0(MinecraftServer.java:318) ~[paper-1.20.2.jar:git-Paper-49]
        at java.lang.Thread.run(Thread.java:833) ~[?:?]

----------------------------------------

TITLE: Accessing Async Scheduler in Folia
DESCRIPTION: Example of obtaining the async scheduler for running tasks independent of the server tick process.

LANGUAGE: java
CODE:
AsyncScheduler asyncScheduler = server.getAsyncScheduler();

----------------------------------------

TITLE: Receiving Plugin Messages from Backend Servers in Velocity
DESCRIPTION: This code demonstrates how to receive and process plugin messages from backend servers in Velocity. It includes channel registration, event subscription, and handling of the received data, with considerations for message forwarding and security.

LANGUAGE: java
CODE:
public static final MinecraftChannelIdentifier IDENTIFIER = MinecraftChannelIdentifier.from("custom:main");

@Subscribe
public void onProxyInitialization(ProxyInitializeEvent event) {
    proxyServer.getChannelRegistrar().register(IDENTIFIER);
}

@Subscribe
public void onPluginMessageFromBackend(PluginMessageEvent event) {
    if (!IDENTIFIER.equals(event.getIdentifier())) {
        return;
    }

    event.setResult(PluginMessageEvent.ForwardResult.handled());

    if (!(event.getSource() instanceof ServerConnection backend)) {
        return;
    }

    ByteArrayDataInput in = ByteStreams.newDataInput(event.getData());
    // handle packet data
}

----------------------------------------

TITLE: Checking for Custom Name Data Component in Java
DESCRIPTION: Shows how to check if an ItemStack has a custom name data component using the hasData method.

LANGUAGE: java
CODE:
// Check if this item has a custom name data component
boolean hasCustomName = stack.hasData(DataComponentTypes.CUSTOM_NAME);
logger.info("Has custom name? " + hasCustomName);

----------------------------------------

TITLE: Adding Hikari Dependency in Maven
DESCRIPTION: Maven configuration for adding HikariCP database connection pooling library as a project dependency.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>com.zaxxer</groupId>
    <artifactId>HikariCP</artifactId>
    <version>4.0.3</version>
    <scope>compile</scope>
</dependency>

----------------------------------------

TITLE: Overriding Monster Spawn Limit for Nether World in Paper (YAML)
DESCRIPTION: Demonstrates how to override the monster spawn limit specifically for the Nether world in Paper configuration.

LANGUAGE: yaml
CODE:
entities:
  spawning:
    spawn-limits:
      monster: 90

----------------------------------------

TITLE: Importing and Rendering Internationalization Component in JSX
DESCRIPTION: This snippet imports the Internationalization component from a specific path and renders it within the page. This is likely part of a documentation site built with a framework like Docusaurus.

LANGUAGE: jsx
CODE:
import Internationalization from "@site/docs/paper/dev/api/component-api/i18n.mdx";

<Internationalization/>

----------------------------------------

TITLE: Adding Hikari Dependency in Gradle
DESCRIPTION: Gradle configuration for adding HikariCP database connection pooling library as a project dependency.

LANGUAGE: kotlin
CODE:
dependencies {
    implementation("com.zaxxer:HikariCP:4.0.3")
}

----------------------------------------

TITLE: Importing React Component for Bukkit Configuration Display
DESCRIPTION: This code snippet imports React and a custom ConfigDocBlock component, along with the raw content of the Bukkit configuration specification file. It's used to render an interactive configuration reference.

LANGUAGE: jsx
CODE:
import React from 'react';
import ConfigDocBlock from '@site/src/components/config/ConfigDocBlock';
import BukkitConfigSpec from '!!raw-loader!@site/config-specs/paper/bukkit.yml';

----------------------------------------

TITLE: Scheduling Consumer<BukkitTask> with Lambda in Java
DESCRIPTION: This snippet demonstrates how to schedule a task using a lambda expression that implements Consumer<BukkitTask> with the BukkitScheduler.

LANGUAGE: java
CODE:
scheduler.runTaskTimer(plugin, task -> {
    Entity entity = Bukkit.getServer().getEntity(entityId);

    if (entity instanceof LivingEntity livingEntity) {
        livingEntity.addPotionEffect(new PotionEffect(PotionEffectType.SPEED, 20, 1));
        return;
    }

    task.cancel(); // The entity is no longer valid, there's no point in continuing to run this task
}, 0, 20);

----------------------------------------

TITLE: Configuring Paper for Velocity Modern Forwarding
DESCRIPTION: Enable Velocity support in Paper's configuration file (paper-global.yml or paper.yml) by setting the appropriate values for the Velocity proxy.

LANGUAGE: yaml
CODE:
proxies:
  velocity:
    enabled: true
    secret: "your_secret_here"
    online-mode: true

----------------------------------------

TITLE: Comparing ItemStacks Ignoring Specific Data Components in Java
DESCRIPTION: Illustrates how to compare two ItemStacks while ignoring certain data components, such as durability, using the matchesWithoutData method.

LANGUAGE: java
CODE:
ItemStack originalSword = ItemStack.of(Material.DIAMOND_SWORD);
ItemStack damagedSword = ItemStack.of(Material.DIAMOND_SWORD);
damagedSword.setData(DataComponentTypes.DAMAGE, 100);

boolean match = damagedSword.matchesWithoutData(originalSword, Set.of(DataComponentTypes.DAMAGE), false);
logger.info("Do the sword match? " + match); // -> true

----------------------------------------

TITLE: Vulnerable SQL Query Example
DESCRIPTION: Demonstrates an unsafe SQL query construction that is vulnerable to SQL injection attacks.

LANGUAGE: java
CODE:
public void login(String username, String password) {
    String sql = "SELECT * FROM users WHERE username = '" + username + "' AND password = '" + password + "'";
    // Execute SQL
}

----------------------------------------

TITLE: Enabling String-Based Duplication Bugs in Paper
DESCRIPTION: This YAML configuration enables string-based duplication bugs in Paper, which are normally fixed. This relates to a long-term Minecraft bug (MC-129055) that Mojang has not yet addressed.

LANGUAGE: yaml
CODE:
unsupported-settings:
  allow-tripwire-disarming-exploits: true

----------------------------------------

TITLE: SQL Injection Example Query
DESCRIPTION: Example of how a malicious SQL injection attack could manipulate a vulnerable query to bypass authentication.

LANGUAGE: sql
CODE:
SELECT * FROM users WHERE username = '' OR 1=1; -- AND password = 'password'

----------------------------------------

TITLE: Importing Docusaurus Components for JSX Documentation Layout
DESCRIPTION: This code snippet imports necessary Docusaurus components and hooks for rendering the documentation layout. It includes DocCardList for displaying a list of documentation items and useCurrentSidebarCategory for accessing the current sidebar category.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

----------------------------------------

TITLE: Adding Amazon Corretto Repository on Debian-based Linux
DESCRIPTION: This code adds the Amazon Corretto public key and apt repository to the system for Java 21 installation.

LANGUAGE: bash
CODE:
wget -O - https://apt.corretto.aws/corretto.key | sudo gpg --dearmor -o /usr/share/keyrings/corretto-keyring.gpg && \
echo "deb [signed-by=/usr/share/keyrings/corretto-keyring.gpg] https://apt.corretto.aws stable main" | sudo tee /etc/apt/sources.list.d/corretto.list

----------------------------------------

TITLE: Importing and Rendering Docusaurus Documentation Cards
DESCRIPTION: Sets up a documentation page using Docusaurus components to display a list of miscellaneous development guides. Uses DocCardList component to render sidebar category items.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

# Miscellaneous Development Guides

These guides are for helping developers with parts of the development process that don't fit into the other categories.

---

<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Configuring Anti-Xray Engine Mode 1 for Default World
DESCRIPTION: Configuration for engine mode 1 which replaces specified blocks with dimension-appropriate fake blocks. This mode is less resource intensive but only hides completely covered ores.

LANGUAGE: yaml
CODE:
anticheat:
  anti-xray:
    enabled: true
    engine-mode: 1
    hidden-blocks:
    - chest
    - coal_ore
    - deepslate_coal_ore
    - copper_ore
    - deepslate_copper_ore
    - raw_copper_block
    - diamond_ore
    - deepslate_diamond_ore
    - emerald_ore
    - deepslate_emerald_ore
    - gold_ore
    - deepslate_gold_ore
    - iron_ore
    - deepslate_iron_ore
    - raw_iron_block
    - lapis_ore
    - deepslate_lapis_ore
    - redstone_ore
    - deepslate_redstone_ore
    lava-obscures: false
    max-block-height: 64
    replacement-blocks: []
    update-radius: 2
    use-permission: false

----------------------------------------

TITLE: Importing and Rendering Docusaurus Documentation Cards
DESCRIPTION: Sets up a documentation page using Docusaurus components to display a list of miscellaneous development guides. Uses DocCardList component to render sidebar category items.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

# Miscellaneous Development Guides

These guides are for helping developers with parts of the development process that don't fit into the other categories.

---

<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Cancelling Events in Java for Bukkit Plugins
DESCRIPTION: Demonstrates how to cancel an event that implements the Cancellable interface. This prevents the action associated with the event from occurring.

LANGUAGE: java
CODE:
public class ExampleListener implements Listener {

    @EventHandler
    public void onPlayerMove(PlayerMoveEvent event) {
        event.setCancelled(true);
    }
}

----------------------------------------

TITLE: Advanced Version Management in Gradle
DESCRIPTION: Extended Gradle configuration for managing version strings, commit messages, and channel selection based on version format. Includes helper methods for Git operations.

LANGUAGE: kotlin
CODE:
import java.io.ByteArrayOutputStream

fun executeGitCommand(vararg command: String): String {
    val byteOut = ByteArrayOutputStream()
    exec {
        commandLine = listOf("git", *command)
        standardOutput = byteOut
    }
    return byteOut.toString(Charsets.UTF_8.name()).trim()
}

fun latestCommitMessage(): String {
    return executeGitCommand("log", "-1", "--pretty=%B")
}

val versionString: String = version as String
val isRelease: Boolean = !versionString.contains('-')

val suffixedVersion: String = if (isRelease) {
    versionString
} else {
    versionString + "+" + System.getenv("GITHUB_RUN_NUMBER")
}

val changelogContent: String = latestCommitMessage()

hangarPublish {
    publications.register("plugin") {
        version.set(suffixedVersion)
        channel.set(if (isRelease) "Release" else "Snapshot")
        changelog.set(changelogContent)
    }
}

----------------------------------------

TITLE: Java 8-10 GC Logging Configuration
DESCRIPTION: Garbage collection logging configuration for Java versions 8-10. Enables detailed GC logging with file rotation and size limits.

LANGUAGE: bash
CODE:
-Xloggc:gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=1M

----------------------------------------

TITLE: Troubleshooting Missing Dependencies Error Log
DESCRIPTION: Example log output showing a plugin failing to load due to missing dependencies, specifically the Vault plugin requirement.

LANGUAGE: log
CODE:
Could not load 'plugins/MyAwesomePlugin-1.0.0.jar' in folder 'plugins'
org.bukkit.plugin.UnknownDependencyException: Unknown/missing dependency plugins: [Vault]. Please download and install these plugins to run 'MyAwesomePlugin'.

----------------------------------------

TITLE: Setting Event Priority in Java for Bukkit Plugins
DESCRIPTION: Shows how to set the priority of an event handler using the priority parameter in the @EventHandler annotation. This determines the order in which event handlers are called.

LANGUAGE: java
CODE:
public class ExampleListener implements Listener {

    @EventHandler(priority = EventPriority.HIGH)
    public void onPlayerMove(PlayerMoveEvent event) {
        // ...
    }
}

----------------------------------------

TITLE: Optimized Waterfall Launch with Aikar's Flags
DESCRIPTION: Enhanced Java launch command using Aikar's recommended flags for optimized performance, including G1GC garbage collector settings and experimental VM options.

LANGUAGE: bash
CODE:
java -Xms512M -Xmx512M -XX:+UseG1GC -XX:G1HeapRegionSize=4M -XX:+UnlockExperimentalVMOptions -XX:+ParallelRefProcEnabled -XX:+AlwaysPreTouch -jar waterfall-###.jar

----------------------------------------

TITLE: Importing and Rendering DocCardList Component in JSX
DESCRIPTION: This code snippet imports the DocCardList component and a utility function from Docusaurus theme, then renders a welcome message and the DocCardList component with sidebar category items.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

# Development Guide

Welcome to the Paper Development Guide! This guide includes information and tutorials for developers
to create and expand on Paper plugins.

---

<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Building and Registering a LiteralCommandNode
DESCRIPTION: Demonstrates how to build a LiteralCommandNode using LiteralArgumentBuilder and register it using the Commands class.

LANGUAGE: java
CODE:
LiteralCommandNode<CommandSourceStack> buildCommand = Commands.literal("testcmd")
    .then(Commands.literal("argument_one"))
    .then(Commands.literal("argument_two"))
    .build();

this.getLifecycleManager().registerEventHandler(LifecycleEvents.COMMANDS, commands -> {
    commands.registrar().register(buildCommand);
});

----------------------------------------

TITLE: Disabling Anti-Xray for End World in YAML
DESCRIPTION: YAML configuration to disable Anti-Xray in the End world.

LANGUAGE: yaml
CODE:
anticheat:
  anti-xray:
    enabled: false

----------------------------------------

TITLE: Displaying Cyclic Loading Error in Java
DESCRIPTION: This snippet shows the error message displayed when Paper detects a cyclic loading issue between plugins. It includes the detected circular load order and instructions for resolving or bypassing the issue.

LANGUAGE: plaintext
CODE:
Circular plugin loading detected!
Circular load order:
 MyPlugin -> MyOtherPlugin -> MyWorldPlugin -> MyPlugin
Please report this to the plugin authors of the first plugin of each loop or join the PaperMC Discord server for further help.
If you would like to still load these plugins, acknowledging that there may be unexpected plugin loading issues, run the server with -Dpaper.useLegacyPluginLoading=true
Failed to start the minecraft server

----------------------------------------

TITLE: Implementing a Custom Event with Message Functionality in Java for Paper
DESCRIPTION: Expands on the basic custom event by adding a message field with getter and setter methods. This allows the event to carry and modify a message.

LANGUAGE: java
CODE:
public class PaperIsCoolEvent extends Event {

    private static final HandlerList HANDLER_LIST = new HandlerList();
    private Component message;

    public PaperIsCoolEvent(Component message) {
        this.message = message;
    }

    public static HandlerList getHandlerList() {
        return HANDLER_LIST;
    }

    @Override
    public HandlerList getHandlers() {
        return HANDLER_LIST;
    }

    public Component getMessage() {
        return this.message;
    }
    
    public void setMessage(Component message) {
        this.message = message;
    }
}

----------------------------------------

TITLE: Implementing BasicCommand for Paper Minecraft Plugin
DESCRIPTION: Demonstrates the implementation and registration of a BasicCommand, which is a simpler alternative to the full Brigadier command system provided by Paper.

LANGUAGE: java
CODE:
LifecycleEventManager<BootstrapContext> manager = context.getLifecycleManager();
manager.registerEventHandler(LifecycleEvents.COMMANDS, event -> {
    final Commands commands = event.registrar();
    commands.register("fun", "some help description string", new FunCommand());
});

LANGUAGE: java
CODE:
class FunCommand implements BasicCommand {

    @Override
    public void execute(@NotNull CommandSourceStack stack, @NotNull String[] args) {
        if (args.length == 1 && args[0].equalsIgnoreCase("start")) {
            stack.getSender().sendRichMessage("<rainbow>Fun activated!");
        }
    }
}

----------------------------------------

TITLE: Configuring Anti-Xray Engine Mode 2 for Default World in YAML
DESCRIPTION: YAML configuration for Anti-Xray engine mode 2 in the default world. It specifies hidden blocks, replacement blocks, and other settings to prevent X-ray cheating more effectively.

LANGUAGE: yaml
CODE:
anticheat:
  anti-xray:
    enabled: true
    engine-mode: 2
    hidden-blocks:
    - air
    - copper_ore
    - deepslate_copper_ore
    - raw_copper_block
    - diamond_ore
    - deepslate_diamond_ore
    - gold_ore
    - deepslate_gold_ore
    - iron_ore
    - deepslate_iron_ore
    - raw_iron_block
    - lapis_ore
    - deepslate_lapis_ore
    - redstone_ore
    - deepslate_redstone_ore
    lava-obscures: false
    max-block-height: 64
    replacement-blocks:
    - chest
    - amethyst_block
    - andesite
    - budding_amethyst
    - calcite
    - coal_ore
    - deepslate_coal_ore
    - deepslate
    - diorite
    - dirt
    - emerald_ore
    - deepslate_emerald_ore
    - granite
    - gravel
    - oak_planks
    - smooth_basalt
    - stone
    - tuff
    update-radius: 2
    use-permission: false

----------------------------------------

TITLE: Calling a Custom Event in Java for Paper Plugin
DESCRIPTION: Shows how to instantiate and call a custom event within a Paper plugin. Demonstrates creating the event, calling it, and using the potentially modified message.

LANGUAGE: java
CODE:
public class ExamplePlugin extends JavaPlugin {

    // ...

    public void callCoolPaperEvent() {
        PaperIsCoolEvent coolEvent = new PaperIsCoolEvent(Component.text("Paper is cool!"));
        coolEvent.callEvent();
        // Plugins could have changed the message from inside their listeners here. So we need to get the message again.
        // This event structure allows for other plugins to change the message to their taste. 
        // Like, for example, a plugin that adds a prefix to all messages.
        Bukkit.broadcast(coolEvent.getMessage());
    }
}

----------------------------------------

TITLE: Importing DocCardList Component in JavaScript/JSX
DESCRIPTION: Imports the DocCardList component from the theme, used to create a list of documentation cards.

LANGUAGE: javascript
CODE:
import DocCardList from "@theme/DocCardList";

----------------------------------------

TITLE: Registering Paper/Brigadier Command
DESCRIPTION: Code snippet demonstrating how to register a Brigadier command using Paper's LifecycleEventManager system.

LANGUAGE: java
CODE:
this.getLifecycleManager().registerEventHandler(LifecycleEvents.COMMANDS, commands -> {
    commands.registrar().register(PaperPartyCommand.createCommand("paperparty"), "Have a nice party");
});

----------------------------------------

TITLE: Basic World Configuration in Paper
DESCRIPTION: Example showing how to disable keep-spawn-loaded for a specific world in Paper server configuration.

LANGUAGE: yaml
CODE:
_version: 28

spawn:
  keep-spawn-loaded: false

----------------------------------------

TITLE: Unregistering a Listener from HandlerList in Java
DESCRIPTION: Shows how to unregister a listener using the HandlerList, either within an event handler method or in the constructor. It also mentions the ability to unregister based on Listener or Plugin, and to unregister all listeners for a specific event.

LANGUAGE: java
CODE:
public class ExampleListener implements Listener {

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        HandlerList handlerList = event.getHandlerList();
        handlerList.unregister(this);
        // ...
    }
    
    // Or:
    
    public ExampleListener() {
        // Access the handler list through the static getter
        HandlerList handlerList = PlayerJoinEvent.getHandlerList();
        handlerList.unregister(this);
        // Granted this is a pretty stupid example...
    }
}

----------------------------------------

TITLE: Rendering Server Properties Documentation with React
DESCRIPTION: React component setup that imports and displays server properties configuration documentation using a custom ConfigDocBlock component. The component reads from a YAML specification file to generate the documentation.

LANGUAGE: jsx
CODE:
import React from 'react';
import ConfigDocBlock from '@site/src/components/config/ConfigDocBlock';
import ServerPropertiesSpec from '!!raw-loader!@site/config-specs/paper/server-properties.yml';

<ConfigDocBlock data={ServerPropertiesSpec} separator={"="} defaultValue={""}/>

----------------------------------------

TITLE: Configuring Anti-Xray Engine Mode 2 for Nether World in YAML
DESCRIPTION: YAML configuration for Anti-Xray engine mode 2 in the Nether world. It specifies hidden blocks and replacement blocks specific to the Nether dimension to prevent X-ray cheating more effectively.

LANGUAGE: yaml
CODE:
anticheat:
  anti-xray:
    enabled: true
    engine-mode: 2
    hidden-blocks:
    - air
    - ancient_debris
    - bone_block
    - glowstone
    - magma_block
    - nether_bricks
    - nether_gold_ore
    - nether_quartz_ore
    - polished_blackstone_bricks
    lava-obscures: false
    max-block-height: 128
    replacement-blocks:
    - basalt
    - blackstone
    - gravel
    - netherrack
    - soul_sand
    - soul_soil
    update-radius: 2
    use-permission: false

----------------------------------------

TITLE: Declaring Plugin Dependencies
DESCRIPTION: YAML configuration showing how to declare plugin dependencies with required and bootstrap flags.

LANGUAGE: yaml
CODE:
dependencies:
  - name: DependencyName
    required: true
    bootstrap: true

----------------------------------------

TITLE: Importing React Permission Components
DESCRIPTION: Imports React components and permission specifications for displaying permission tables in the documentation.

LANGUAGE: jsx
CODE:
import React from "react";
import { CommandsPermissionsTable, PermissionsTable } from "@site/src/components/permission/Permissions";
import {vanillaCommands, bukkitCommands, paperCommands, vanillaPermissions, bukkitPermissions, paperPermissions} from "@site/src/components/permission/PermissionSpec";

----------------------------------------

TITLE: Implementing Players Argument Command in Java
DESCRIPTION: Creates a command that uses the players argument to select multiple players and 'yeet' them into the air. It shows how to resolve the PlayerSelectorArgumentResolver for multiple players and perform actions on each selected player.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> playersArgument() {
    return Commands.literal("players")
        .then(Commands.argument("targets", ArgumentTypes.players())
            .executes(ctx -> {
                final PlayerSelectorArgumentResolver targetResolver = ctx.getArgument("targets", PlayerSelectorArgumentResolver.class);
                final List<Player> targets = targetResolver.resolve(ctx.getSource());
                final CommandSender sender = ctx.getSource().getSender();

                for (final Player target : targets) {
                    target.setVelocity(new Vector(0, 100, 0));
                    target.sendRichMessage("<rainbow>Yeeeeeeeeeet");

                    sender.sendRichMessage("Yeeted <target>!",
                        Placeholder.component("target", target.name())
                    );
                }
                return Command.SINGLE_SUCCESS;
            }))
        .build();
}

----------------------------------------

TITLE: Implementing Players Argument Command in Java
DESCRIPTION: Creates a command that uses the players argument to select multiple players and 'yeet' them into the air. It shows how to resolve the PlayerSelectorArgumentResolver for multiple players and perform actions on each selected player.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> playersArgument() {
    return Commands.literal("players")
        .then(Commands.argument("targets", ArgumentTypes.players())
            .executes(ctx -> {
                final PlayerSelectorArgumentResolver targetResolver = ctx.getArgument("targets", PlayerSelectorArgumentResolver.class);
                final List<Player> targets = targetResolver.resolve(ctx.getSource());
                final CommandSender sender = ctx.getSource().getSender();

                for (final Player target : targets) {
                    target.setVelocity(new Vector(0, 100, 0));
                    target.sendRichMessage("<rainbow>Yeeeeeeeeeet");

                    sender.sendRichMessage("Yeeted <target>!",
                        Placeholder.component("target", target.name())
                    );
                }
                return Command.SINGLE_SUCCESS;
            }))
        .build();
}

----------------------------------------

TITLE: Minecraft Version Incompatibility Error Example
DESCRIPTION: Example of a runtime exception indicating an attempt to load chunks saved with a newer version of Minecraft than the server version.

LANGUAGE: plaintext
CODE:
[00:00:00 WARN]: java.lang.RuntimeException: Server attempted to load chunk saved with newer version of minecraft! 3218 > 3120

----------------------------------------

TITLE: Comparing World Storage Structures in Vanilla and Paper
DESCRIPTION: This table illustrates the differences in world directory structures between Vanilla and Paper Minecraft servers. It shows the locations of the Overworld, Nether, and End dimensions for each server type.

LANGUAGE: markdown
CODE:
| Server Software | Overworld | Nether                | End                   |
| --------------- | --------- | --------------------- | --------------------- |
| Vanilla         | `/world`  | `/world/DIM-1`        | `/world/DIM1`         |
| Paper           | `/world`  | `/world_nether/DIM-1` | `/world_the_end/DIM1` |

----------------------------------------

TITLE: Configuring Load Order - Before
DESCRIPTION: YAML configuration for specifying plugins that should load after this plugin.

LANGUAGE: yaml
CODE:
load-before:
  - name: PluginName
    bootstrap: false

----------------------------------------

TITLE: Allowing Bedrock and End Portal Frame Breaking in Paper
DESCRIPTION: This YAML configuration restores the ability to break Bedrock and End Portal frames in Paper. This is not recommended as it can lead to unintended gameplay effects.

LANGUAGE: yaml
CODE:
unsupported-settings:
  allow-permanent-block-break-exploits: true

----------------------------------------

TITLE: Setting Velocity System Properties via Command Line
DESCRIPTION: Demonstrates how to set system properties when starting a Velocity server using the -D flag. The example shows enabling packet decode logging.

LANGUAGE: bash
CODE:
java -Dvelocity.packet-decode-logging=true -jar velocity.jar

----------------------------------------

TITLE: Invalid Plugin Configuration Error Log
DESCRIPTION: Log output demonstrating an error when attempting to load an invalid or corrupted plugin file.

LANGUAGE: log
CODE:
Could not load 'plugins/MyAwesomePlugin-1.0.0.jar' in folder 'plugins'
org.bukkit.plugin.InvalidDescriptionException: Invalid plugin.yml

----------------------------------------

TITLE: Implementing Plugin Loader
DESCRIPTION: Java implementation of PluginLoader interface demonstrating how to configure the plugin classpath with external libraries and Maven dependencies.

LANGUAGE: java
CODE:
public class TestPluginLoader implements PluginLoader {

    @Override
    public void classloader(@NotNull PluginClasspathBuilder classpathBuilder) {
        classpathBuilder.addLibrary(new JarLibrary(Path.of("dependency.jar")));

        MavenLibraryResolver resolver = new MavenLibraryResolver();
        resolver.addDependency(new Dependency(new DefaultArtifact("com.example:example:version"), null));
        resolver.addRepository(new RemoteRepository.Builder("paper", "default", "https://repo.papermc.io/repository/maven-public/").build());

        classpathBuilder.addLibrary(resolver);
    }
}

----------------------------------------

TITLE: Starting Paper Minecraft Server Command
DESCRIPTION: Basic command to start a Paper Minecraft server with 4GB RAM allocation. The --nogui flag disables the vanilla GUI interface. The command should be run from the server directory with the correct JAR filename.

LANGUAGE: bash
CODE:
java -Xms4G -Xmx4G -jar paper.jar --nogui

----------------------------------------

TITLE: Shorthand Event Handler Registration
DESCRIPTION: Shows the simplified method for registering an event handler without configuration.

LANGUAGE: java
CODE:
@Override
public void onEnable() {
    final LifecycleEventManager<Plugin> lifecycleManager = this.getLifecycleManager();
    lifecycleManager.registerEventHandler(LifecycleEvents.COMMANDS, (event) -> {
        // Handler for the event
    });
}

----------------------------------------

TITLE: Logging Invalid plugin.yml Error for Paper Plugin
DESCRIPTION: This log entry demonstrates an error that occurs when a plugin file has an invalid plugin.yml configuration. This can happen if the file is not a valid Paper plugin or if it failed to download completely.

LANGUAGE: log
CODE:
[00:00:00] [Server thread/WARN] Could not load 'plugins/MyAwesomePlugin-1.0.0.jar' in folder 'plugins'
[00:00:00] [Server thread/WARN] org.bukkit.plugin.InvalidDescriptionException: Invalid plugin.yml

----------------------------------------

TITLE: Enabling GC Logging for Java 11+
DESCRIPTION: These flags enable garbage collection logging for Java versions 11 and above. They provide detailed information about GC operations in a more compact format compared to earlier Java versions.

LANGUAGE: bash
CODE:
-Xlog:gc*:logs/gc.log:time,uptime:filecount=5,filesize=1M

----------------------------------------

TITLE: Defining Plugin Libraries in YML
DESCRIPTION: Shows how to specify external libraries that the plugin depends on, which will be downloaded from Maven central repository.

LANGUAGE: yaml
CODE:
libraries:
  - com.google.guava:guava:30.1.1-jre
  - com.google.code.gson:gson:2.8.6

----------------------------------------

TITLE: Initializing Docusaurus Navigation Component
DESCRIPTION: Sets up navigation for Paper administration documentation using Docusaurus components DocCardList and useCurrentSidebarCategory hook.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Ambiguous Plugin Name Error Log
DESCRIPTION: Example log output showing an error when multiple versions of the same plugin (EssentialsX) are installed simultaneously.

LANGUAGE: log
CODE:
Ambiguous plugin name `Essentials' for files `plugins/EssentialsX-2.19.4.jar' and `plugins/Essentialsx-2.20.0-dev.jar' in `plugins'

----------------------------------------

TITLE: Importing Docusaurus Components for Documentation Navigation
DESCRIPTION: Imports required Docusaurus theme components and hooks to create a documentation navigation page with card-style links. Uses DocCardList component to render sidebar category items.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

# Development Guide

Welcome to the Paper development guide! This guide includes information and tutorials on
how to start developing plugins for Paper.

---

<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Forwarding Plugin Messages to Other Servers in Java
DESCRIPTION: Shows how to use the Forward message type to send plugin messages to other servers in a BungeeCord network.

LANGUAGE: java
CODE:
public class MyPlugin extends JavaPlugin implements PluginMessageListener {

    @Override
    public void onEnable() {
        this.getServer().getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");
        this.getServer().getMessenger().registerIncomingPluginChannel(this, "BungeeCord", this);

        Player player = ...;
        ByteArrayDataOutput out = ByteStreams.newDataOutput();
        out.writeUTF("Forward");
        out.writeUTF("ALL"); // This is the target server. "ALL" will message all servers apart from the one sending the message
        out.writeUTF("SecretInternalChannel"); // This is the channel.

        ByteArrayOutputStream msgbytes = new ByteArrayOutputStream();
        DataOutputStream msgout = new DataOutputStream(msgbytes);
        msgout.writeUTF("Paper is the meaning of life"); // You can do anything you want with msgout
        msgout.writeShort(42); // Writing a random short

        out.writeShort(msgbytes.toByteArray().length); // This is the length.
        out.write(msgbytes.toByteArray()); // This is the message.

        player.sendPluginMessage(this, "BungeeCord", out.toByteArray());
        // The response will be handled in onPluginMessageReceived
    }

    @Override
    public void onPluginMessageReceived(String channel, Player player, byte[] message) {
        if (!channel.equals("BungeeCord")) {
            return;
        }
        ByteArrayDataInput in = ByteStreams.newDataInput(message);
        String subchannel = in.readUTF();
        if (subchannel.equals("SecretInternalChannel")) {
            short len = in.readShort();
            byte[] msgbytes = new byte[len];
            in.readFully(msgbytes);

            DataInputStream msgIn = new DataInputStream(new ByteArrayInputStream(msgbytes));
            String secretMessage = msgIn.readUTF(); // Read the data in the same way you wrote it
            short meaningofLife = msgIn.readShort();
        }
    }
}

----------------------------------------

TITLE: Logging Missing Dependencies for Paper Plugin
DESCRIPTION: This log snippet shows an error message when a plugin is missing required dependencies. It indicates that 'MyAwesomePlugin' cannot load because it depends on the 'Vault' plugin, which is not installed.

LANGUAGE: log
CODE:
[00:00:00] [Server thread/WARN] Could not load 'plugins/MyAwesomePlugin-1.0.0.jar' in folder 'plugins'
[00:00:00] [Server thread/WARN] org.bukkit.plugin.UnknownDependencyException: Unknown/missing dependency plugins: [Vault]. Please download and install these plugins to run 'MyAwesomePlugin'.

----------------------------------------

TITLE: Configuring Plugin Permissions in YML
DESCRIPTION: Illustrates how to define permission nodes for the plugin, including descriptions, default values, and child permissions.

LANGUAGE: yaml
CODE:
permissions :
    permission.node:
        description: "This is a permission node"
        default: op
        children:
            permission.node.child: true
    another.permission.node:
        description: "This is another permission node"
        default: not op

----------------------------------------

TITLE: Forwarding Plugin Messages to Other Servers in Java
DESCRIPTION: Shows how to use the Forward message type to send plugin messages to other servers in a BungeeCord network.

LANGUAGE: java
CODE:
public class MyPlugin extends JavaPlugin implements PluginMessageListener {

    @Override
    public void onEnable() {
        this.getServer().getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");
        this.getServer().getMessenger().registerIncomingPluginChannel(this, "BungeeCord", this);

        Player player = ...;
        ByteArrayDataOutput out = ByteStreams.newDataOutput();
        out.writeUTF("Forward");
        out.writeUTF("ALL"); // This is the target server. "ALL" will message all servers apart from the one sending the message
        out.writeUTF("SecretInternalChannel"); // This is the channel.

        ByteArrayOutputStream msgbytes = new ByteArrayOutputStream();
        DataOutputStream msgout = new DataOutputStream(msgbytes);
        msgout.writeUTF("Paper is the meaning of life"); // You can do anything you want with msgout
        msgout.writeShort(42); // Writing a random short

        out.writeShort(msgbytes.toByteArray().length); // This is the length.
        out.write(msgbytes.toByteArray()); // This is the message.

        player.sendPluginMessage(this, "BungeeCord", out.toByteArray());
        // The response will be handled in onPluginMessageReceived
    }

    @Override
    public void onPluginMessageReceived(String channel, Player player, byte[] message) {
        if (!channel.equals("BungeeCord")) {
            return;
        }
        ByteArrayDataInput in = ByteStreams.newDataInput(message);
        String subchannel = in.readUTF();
        if (subchannel.equals("SecretInternalChannel")) {
            short len = in.readShort();
            byte[] msgbytes = new byte[len];
            in.readFully(msgbytes);

            DataInputStream msgIn = new DataInputStream(new ByteArrayInputStream(msgbytes));
            String secretMessage = msgIn.readUTF(); // Read the data in the same way you wrote it
            short meaningofLife = msgIn.readShort();
        }
    }
}

----------------------------------------

TITLE: Defining a Complex Command Structure in YAML
DESCRIPTION: Illustrates a more advanced command structure with multiple levels of subcommands.

LANGUAGE: yaml
CODE:
/advanced
 ┣━┳ killall
 ┃ ┣━━ entities
 ┃ ┣━━ players
 ┃ ┗━━ zombies
 ┗━┳ eat
   ┣━━ ice-cream
   ┗━━ main-dish

----------------------------------------

TITLE: Custom UUID Data Type Implementation
DESCRIPTION: Implementation of a custom PersistentDataType for storing UUID values in PDC by converting them to and from byte arrays.

LANGUAGE: java
CODE:
public class UUIDDataType implements PersistentDataType<byte[], UUID> {
    @Override
    public Class<byte[]> getPrimitiveType() {
        return byte[].class;
    }

    @Override
    public Class<UUID> getComplexType() {
        return UUID.class;
    }

    @Override
    public byte[] toPrimitive(UUID complex, PersistentDataAdapterContext context) {
        ByteBuffer bb = ByteBuffer.allocate(Long.BYTES * 2);
        bb.putLong(complex.getMostSignificantBits());
        bb.putLong(complex.getLeastSignificantBits());
        return bb.array();
    }

    @Override
    public UUID fromPrimitive(byte[] primitive, PersistentDataAdapterContext context) {
        ByteBuffer bb = ByteBuffer.wrap(primitive);
        long firstLong = bb.getLong();
        long secondLong = bb.getLong();
        return new UUID(firstLong, secondLong);
    }
}

----------------------------------------

TITLE: Logging Ambiguous Plugin Name Error for Paper Server
DESCRIPTION: This log snippet shows an error that occurs when two plugins with the same name are installed. In this case, two versions of EssentialsX are present, causing a naming conflict that prevents proper loading.

LANGUAGE: log
CODE:
[00:00:00] [Server thread/WARN] Ambiguous plugin name `Essentials' for files `plugins/EssentialsX-2.19.4.jar' and `plugins/Essentialsx-2.20.0-dev.jar' in `plugins'

----------------------------------------

TITLE: File Structure for Bukkit Plugin Project
DESCRIPTION: Shows the typical directory structure for a Bukkit plugin project, highlighting the location of the plugin.yml file.

LANGUAGE: plaintext
CODE:
example-plugin
├── build.gradle.kts
├── settings.gradle.kts
└── src
    └── main
        ├── java
        └── resources
            └── plugin.yml

----------------------------------------

TITLE: Creating Nested PDC Containers
DESCRIPTION: Example of creating nested PDC containers for more complex data storage structures.

LANGUAGE: java
CODE:
// Get the existing container
PersistentDataContainer container = ...;
// Create a new container
PersistentDataContainer newContainer = container.getAdapterContext().newPersistentDataContainer();

----------------------------------------

TITLE: Enabling Gravity Block Duplication via End Portals in Paper
DESCRIPTION: This YAML configuration restores the ability to duplicate gravity blocks (e.g., sand) using end portals in Paper. This is not recommended due to potential server issues.

LANGUAGE: yaml
CODE:
unsupported-settings:
  allow-unsafe-end-portal-teleportation: true

----------------------------------------

TITLE: Implementing a Cancellable Custom Event in Java for Paper
DESCRIPTION: Demonstrates how to make a custom event cancellable by implementing the Cancellable interface. Includes methods for checking and setting the cancelled state.

LANGUAGE: java
CODE:
public class PaperIsCoolEvent extends Event implements Cancellable {

    private static final HandlerList HANDLER_LIST = new HandlerList();
    private Component message;
    private boolean cancelled;

    // ...

    @Override
    public boolean isCancelled() {
        return this.cancelled;
    }

    @Override
    public void setCancelled(boolean cancelled) {
        this.cancelled = cancelled;
    }
}

----------------------------------------

TITLE: Separating Command Logic in Java
DESCRIPTION: Shows how to separate the command logic into a separate method for better readability, using a method reference in the executes method.

LANGUAGE: java
CODE:
public class FlightSpeedCommand {

    public static LiteralArgumentBuilder<CommandSourceStack> createCommand() {
        return Commands.literal("flyspeed")
            .then(Commands.argument("speed", FloatArgumentType.floatArg(0, 1.0f))
                .executes(FlightSpeedCommand::runFlySpeedLogic)
            );
    }

    private static int runFlySpeedLogic(CommandContext<CommandSourceStack> ctx) {
        float speed = FloatArgumentType.getFloat(ctx, "speed"); // Retrieve the speed argument
        CommandSender sender = ctx.getSource().getSender(); // Retrieve the command sender
        Entity executor = ctx.getSource().getExecutor(); // Retrieve the command executor, which may or may not be the same as the sender

        // Check whether the executor is a player, as you can only set a player's flight speed
        if (!(executor instanceof Player player)) {
            // If a non-player tried to set their own flight speed
            sender.sendPlainMessage("Only players can fly!");
            return Command.SINGLE_SUCCESS;
        }

        // Set the player's speed
        player.setFlySpeed(speed);

        if (sender == executor) {
            // If the player executed the command themselves
            player.sendPlainMessage("Successfully set your flight speed to " + speed);
            return Command.SINGLE_SUCCESS;
        }

        // If the speed was set by a different sender (Like using /execute)
        sender.sendRichMessage("Successfully set <playername>'s flight speed to " + speed, Placeholder.component("playername", player.name()));
        player.sendPlainMessage("Your flight speed has been set to " + speed);
        return Command.SINGLE_SUCCESS;
    }
}

----------------------------------------

TITLE: Remote Debugger Server Launch Command
DESCRIPTION: Server startup command with JVM debug arguments to enable remote debugging on port 5005.

LANGUAGE: bash
CODE:
java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -jar paper-%%_MAJ_MIN_PAT_MC_%%.jar nogui

----------------------------------------

TITLE: Detecting Folia Server Platform in Java
DESCRIPTION: Utility method to check if the current server is running Folia by attempting to load a Folia-specific class. Returns true if running on Folia, false otherwise.

LANGUAGE: java
CODE:
private static boolean isFolia() {
    try {
        Class.forName("io.papermc.paper.threadedregions.RegionizedServer");
        return true;
    } catch (ClassNotFoundException e) {
        return false;
    }
}

----------------------------------------

TITLE: Using Audience Pointers in Java
DESCRIPTION: Shows how to retrieve information from audience members using the pointer system. Demonstrates getting UUID and display name with default value handling.

LANGUAGE: java
CODE:
// Get the uuid from an audience member, returning an Optional<UUID>
Optional<UUID> uuid = audience.get(Identity.UUID);

// Get the display name, returning a default
Component name = audience.getOrDefault(Identity.DISPLAY_NAME, Component.text("no display name!"));

----------------------------------------

TITLE: Configuring Anti-Xray Engine Mode 1 for Overworld in Paper YAML
DESCRIPTION: YAML configuration for setting up Anti-Xray engine mode 1 in the overworld. This mode replaces specified blocks with fake blocks to prevent x-ray cheating.

LANGUAGE: yaml
CODE:
    anti-xray:
      enabled: true
      engine-mode: 1
      max-block-height: 64
      update-radius: 2
      lava-obscures: false
      use-permission: false
      hidden-blocks:
      - chest
      - coal_ore
      - deepslate_coal_ore
      - copper_ore
      - deepslate_copper_ore
      - raw_copper_block
      - diamond_ore
      - deepslate_diamond_ore
      - emerald_ore
      - deepslate_emerald_ore
      - gold_ore
      - deepslate_gold_ore
      - iron_ore
      - deepslate_iron_ore
      - raw_iron_block
      - lapis_ore
      - deepslate_lapis_ore
      - redstone_ore
      - deepslate_redstone_ore
      replacement-blocks:
      - stone
      - oak_planks
      - deepslate

----------------------------------------

TITLE: Rendering Paper World Configuration Documentation
DESCRIPTION: This code renders the world configuration documentation using a custom React component. It passes the imported YAML data to the ConfigDocBlock component for interactive display.

LANGUAGE: jsx
CODE:
<ConfigDocBlock data={WorldConfigSpec}/>

----------------------------------------

TITLE: Handling Cancellable Custom Events in Java for Bukkit/Paper
DESCRIPTION: This snippet shows how to call a cancellable custom event and check its cancellation status before proceeding with an action. It demonstrates two approaches: using isCancelled() method and using the return value of callEvent() directly.

LANGUAGE: java
CODE:
public class ExamplePlugin extends JavaPlugin {

    // ...

    public void callCoolPaperEvent() {
        PaperIsCoolEvent coolEvent = new PaperIsCoolEvent(Component.text("Paper is cool!"));
        coolEvent.callEvent();
        if (!coolEvent.isCancelled()) {
            Bukkit.broadcast(coolEvent.getMessage());
        }
    }
}

LANGUAGE: java
CODE:
public class ExamplePlugin extends JavaPlugin {

    // ...

    public void callCoolPaperEvent() {
        PaperIsCoolEvent coolEvent = new PaperIsCoolEvent(Component.text("Paper is cool!"));
        if (coolEvent.callEvent()) { // Directly get the output from callEvent
            Bukkit.broadcast(coolEvent.getMessage());
        }
    }
}

----------------------------------------

TITLE: Relative Teleportation with Teleport Flags in Java
DESCRIPTION: Demonstrates how to use teleport flags for relative teleportation, which prevents velocity from being reset in specified axes.

LANGUAGE: java
CODE:
player.teleport(
    location,
    TeleportFlag.Relative.VELOCITY_X,
    TeleportFlag.Relative.VELOCITY_Y,
    TeleportFlag.Relative.VELOCITY_Z
);

----------------------------------------

TITLE: Initializing Docusaurus DocCardList Component
DESCRIPTION: Sets up imports and renders a DocCardList component to display miscellaneous documentation items using the current sidebar category context.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

# Misc

Documentation that does not cleanly fit in any other category.

---

<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Rendering Waterfall Configuration Documentation
DESCRIPTION: This JSX code renders the Waterfall configuration documentation. It uses the ConfigDocBlock component to display the configuration structure and default values from the imported YAML file.

LANGUAGE: jsx
CODE:
<ConfigDocBlock data={WaterfallConfigSpec} />

----------------------------------------

TITLE: Adding Functionality to a Custom Event in Java for Bukkit/Paper
DESCRIPTION: This snippet expands on the basic custom event by adding a message field with getter and setter methods. It demonstrates how to add custom functionality to an event, allowing for data to be passed and modified when the event is called.

LANGUAGE: java
CODE:
public class PaperIsCoolEvent extends Event {

    private static final HandlerList HANDLER_LIST = new HandlerList();
    private Component message;

    public PaperIsCoolEvent(Component message) {
        this.message = message;
    }

    public Component getMessage() {
        return this.message;
    }

    public void setMessage(Component message) {
        this.message = message;
    }

    public static HandlerList getHandlerList() {
        return HANDLER_LIST;
    }

    @Override
    public HandlerList getHandlers() {
        return HANDLER_LIST;
    }
}

----------------------------------------

TITLE: Rotating Display Entities in Minecraft
DESCRIPTION: Example of applying rotation transformations to a block display entity.

LANGUAGE: java
CODE:
world.spawn(location, BlockDisplay.class, entity -> {
    entity.setBlock(Material.GRASS_BLOCK.createBlockData());
    entity.setTransformation(
        new Transformation(
                new Vector3f(),
                new AxisAngle4f((float) -Math.toRadians(45), 1, 0, 0),
                new Vector3f(2, 2, 2),
                new AxisAngle4f((float) Math.toRadians(45), 0, 0, 1)
        )
    );
});

----------------------------------------

TITLE: Creating a Text Display Entity in Java
DESCRIPTION: This snippet demonstrates how to spawn and customize a TextDisplay entity in the world. It shows setting the text content, billboard mode, and background color.

LANGUAGE: java
CODE:
TextDisplay display = world.spawn(location, TextDisplay.class, entity -> {
    // customize the entity!
    entity.text(Component.text("Some awesome content", NamedTextColor.BLACK));
    entity.setBillboard(Display.Billboard.VERTICAL); // pivot only around the vertical axis
    entity.setBackgroundColor(Color.RED); // make the background red

    // see the Display and TextDisplay Javadoc, there are many more options
});

----------------------------------------

TITLE: Rotating Display Entities in Minecraft
DESCRIPTION: Example of applying rotation transformations to a block display entity.

LANGUAGE: java
CODE:
world.spawn(location, BlockDisplay.class, entity -> {
    entity.setBlock(Material.GRASS_BLOCK.createBlockData());
    entity.setTransformation(
        new Transformation(
                new Vector3f(),
                new AxisAngle4f((float) -Math.toRadians(45), 1, 0, 0),
                new Vector3f(2, 2, 2),
                new AxisAngle4f((float) Math.toRadians(45), 0, 0, 1)
        )
    );
});

----------------------------------------

TITLE: Rendering Bukkit Configuration Reference Component
DESCRIPTION: This JSX code renders the ConfigDocBlock component, passing the Bukkit configuration specification as a prop. It creates an interactive display of the bukkit.yml structure and default values.

LANGUAGE: jsx
CODE:
<ConfigDocBlock data={BukkitConfigSpec}/>

----------------------------------------

TITLE: Implementing an Event Handler Method in Java for Bukkit Plugins
DESCRIPTION: Shows how to create an event handler method using the @EventHandler annotation. This method listens for a specific event (PlayerMoveEvent in this case) and can contain custom logic to handle the event.

LANGUAGE: java
CODE:
public class ExampleListener implements Listener {

    @EventHandler
    public void onPlayerMove(PlayerMoveEvent event) {
        // ...
    }
}

----------------------------------------

TITLE: Lambda Expression ChatRenderer Implementation
DESCRIPTION: Alternative approach to implementing chat rendering using a lambda expression, demonstrating a more concise way to handle chat events.

LANGUAGE: java
CODE:
public class ChatListener implements Listener {

    @EventHandler
    public void onChat(AsyncChatEvent event) {
        event.renderer((source, sourceDisplayName, message, viewer) -> {
            // ...
        });
    }
}

----------------------------------------

TITLE: Installing Java 21 on Debian-based Linux
DESCRIPTION: This snippet installs Java 21 and required dependencies on Debian-based Linux distributions.

LANGUAGE: bash
CODE:
sudo apt-get update
sudo apt-get install -y java-21-amazon-corretto-jdk libxi6 libxtst6 libxrender1

----------------------------------------

TITLE: Customizing Spawn Settings for Resource World in Paper (YAML)
DESCRIPTION: Shows how to customize multiple spawn settings and disable keep-spawn-loaded for a specific resource world in Paper configuration.

LANGUAGE: yaml
CODE:
entities:
  spawning:
    spawn-limits:
      axolotls: 8
      creature: 15
      monster: 2
spawn:
  keep-spawn-loaded: false

----------------------------------------

TITLE: Creating Item Display Entity in Minecraft
DESCRIPTION: Demonstrates spawning and configuring an ItemDisplay entity to show a skeleton skull.

LANGUAGE: java
CODE:
ItemDisplay display = world.spawn(location, ItemDisplay.class, entity -> {
    entity.setItemStack(ItemStack.of(Material.SKELETON_SKULL));
});

----------------------------------------

TITLE: Handling PlayerCount Plugin Message in Java
DESCRIPTION: This snippet demonstrates how to send a 'PlayerCount' plugin message and handle its response, which returns the number of players on a specified server.

LANGUAGE: java
CODE:
public class MyPlugin extends JavaPlugin implements PluginMessageListener {

    @Override
    public void onEnable() {
        this.getServer().getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");
        this.getServer().getMessenger().registerIncomingPluginChannel(this, "BungeeCord", this);

        Player player = ...;
        ByteArrayDataOutput out = ByteStreams.newDataOutput();
        out.writeUTF("PlayerCount");
        out.writeUTF("lobby");
        player.sendPluginMessage(this, "BungeeCord", out.toByteArray());
        // The response will be handled in onPluginMessageReceived
    }

    @Override
    public void onPluginMessageReceived(String channel, Player player, byte[] message) {
        if (!channel.equals("BungeeCord")) {
            return;
        }
        ByteArrayDataInput in = ByteStreams.newDataInput(message);
        String subchannel = in.readUTF();
        if (subchannel.equals("PlayerCount")) {
            // This is our response to the PlayerCount request
            String server = in.readUTF();
            int playerCount = in.readInt();
        }
    }
}

----------------------------------------

TITLE: Importing React Components for Paper API Documentation
DESCRIPTION: This code snippet imports the DocCardList component from the Docusaurus theme and a hook for accessing the current sidebar category. These are used to dynamically generate a list of documentation cards for the Paper API guide.

LANGUAGE: JavaScript
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

----------------------------------------

TITLE: Customizing Resource World Settings in Paper YAML
DESCRIPTION: Shows how to customize both lootable replenishment and spawn limits for a resource world by editing the resource_world/paper-world.yml file.

LANGUAGE: yaml
CODE:
lootables:
  auto-replenish: false
entities:
  spawning:
    spawn-limits:
      axolotls: 8
      creature: 15
      monster: 2

----------------------------------------

TITLE: Registering Basic Command in Paper Plugin
DESCRIPTION: Shows how to register the BasicCommand implementation in a Paper plugin's main class.

LANGUAGE: java
CODE:
@Override
public void onEnable() {
    this.getLifecycleManager().registerEventHandler(LifecycleEvents.COMMANDS,
        event -> event.registrar().register("broadcast", new BroadcastCommand())
    );
}

----------------------------------------

TITLE: Storing PDC Data on TileState in Java
DESCRIPTION: Shows how to store data in the PDC of a TileState object, specifically a Chest block.

LANGUAGE: java
CODE:
Block block = ...;
if (block.getState() instanceof Chest chest) {
    chest.getPersistentDataContainer().set(key, PersistentDataType.STRING, "I love Tacos!");
    chest.update();
}

----------------------------------------

TITLE: Verifying Java Installation
DESCRIPTION: This command checks the installed Java version to verify successful installation of Java 21.

LANGUAGE: bash
CODE:
java -version

----------------------------------------

TITLE: Rendering DocCardList Component with Navigation Links in JSX
DESCRIPTION: Creates a DocCardList component with links to Administration, Development, and Contributing sections. Each link includes a label, href, and custom emoji.

LANGUAGE: jsx
CODE:
<DocCardList items={[
  {
    "type": "link",
    "label": "Administration",
    "href": "/paper/admin",
    "customEmoji": "mdi:account-cog",
  },
  {
    "type": "link",
    "label": "Development",
    "href": "/paper/dev",
    "customEmoji": "mdi:code-braces",
  },
  {
    "type": "link",
    "label": "Contributing",
    "href": "/paper/contributing",
    "customEmoji": "mdi:comment-edit",
  },
]}/>

----------------------------------------

TITLE: Defining Command Interface in Java
DESCRIPTION: Shows the Command interface definition, which is a functional interface with a run method that takes a CommandContext and returns an integer.

LANGUAGE: java
CODE:
@FunctionalInterface
public interface Command<S> {
    int SINGLE_SUCCESS = 1;

    int run(CommandContext<S> ctx) throws CommandSyntaxException;
}

----------------------------------------

TITLE: Demonstrating Deprecated Method Annotation in Java
DESCRIPTION: Shows the basic syntax for marking a method as deprecated using the @Deprecated annotation.

LANGUAGE: java
CODE:
@Deprecated
public void exampleMethod(); // Example deprecated method

----------------------------------------

TITLE: Specifying Markdown Frontmatter for FAQ Page
DESCRIPTION: This code snippet defines the frontmatter for a Markdown page, setting the slug and description for the FAQ page in the Paper project documentation.

LANGUAGE: markdown
CODE:
---
slug: /faq
description: Questions frequently asked by our community, answered by us!
---

----------------------------------------

TITLE: Rendering Documentation Card List for Paper Admin Guide
DESCRIPTION: This code snippet renders a DocCardList component, populating it with items from the current sidebar category. It's used to display a list of documentation topics related to Paper server administration.

LANGUAGE: jsx
CODE:
<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Implementing Item Amount Suggestions in Java
DESCRIPTION: A comprehensive example of a command that gives items to players and suggests common item amounts. It demonstrates argument declaration, suggestion implementation, and command execution logic.

LANGUAGE: java
CODE:
@NullMarked
public class SuggestionsTest {

    public static LiteralCommandNode<CommandSourceStack> constructGiveItemCommand() {
        return Commands.literal("giveitem")
            .requires(ctx -> ctx.getExecutor() instanceof Player)
            .then(Commands.argument("item", ArgumentTypes.itemStack())
                .then(Commands.argument("amount", IntegerArgumentType.integer(1, 99))
                    .suggests(SuggestionsTest::getAmountSuggestions)
                    .executes(SuggestionsTest::executeCommandLogic)
                )
            )
            .build();
    }

    private static CompletableFuture<Suggestions> getAmountSuggestions(final CommandContext<CommandSourceStack> ctx, final SuggestionsBuilder builder) {
        builder.suggest(1);
        builder.suggest(16);
        builder.suggest(32);
        builder.suggest(64);
        return builder.buildFuture();
    }

    private static int executeCommandLogic(final CommandContext<CommandSourceStack> ctx) {
        if (!(ctx.getSource().getExecutor() instanceof Player player)) {
            return Command.SINGLE_SUCCESS;
        }

        final int firstEmptySlot = player.getInventory().firstEmpty();
        if (firstEmptySlot == -1) {
            player.sendRichMessage("<light_purple>You do not have enough space in your inventory!");
            return Command.SINGLE_SUCCESS;
        }

        final ItemStack item = ctx.getArgument("item", ItemStack.class);
        final int amount = IntegerArgumentType.getInteger(ctx, "amount");

        item.setAmount(amount);
        player.getInventory().setItem(firstEmptySlot, item);

        player.sendRichMessage("<light_purple>You have been given <white><amount>x</white> <aqua><item></aqua>!",
            Placeholder.component("amount", Component.text(amount)),
            Placeholder.component("item", Component.translatable(item).hoverEvent(item))
        );
        return Command.SINGLE_SUCCESS;
    }
}

----------------------------------------

TITLE: Rendering Documentation Card List in JSX
DESCRIPTION: This JSX code renders a DocCardList component, populating it with items from the current sidebar category. It's used to display a list of documentation cards related to Paper plugin development.

LANGUAGE: JSX
CODE:
<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Configuring Anti-Xray Engine Mode 3 for Default World
DESCRIPTION: YAML configuration for Anti-Xray engine mode 3 in the default world. This mode is similar to mode 2 but randomizes blocks for each layer of a chunk instead of every block.

LANGUAGE: yaml
CODE:
anticheat:
  anti-xray:
    enabled: true
    engine-mode: 3
    hidden-blocks:
    - air
    - copper_ore
    - deepslate_copper_ore
    - raw_copper_block
    - diamond_ore
    - deepslate_diamond_ore
    - gold_ore
    - deepslate_gold_ore
    - iron_ore
    - deepslate_iron_ore
    - raw_iron_block
    - lapis_ore
    - deepslate_lapis_ore
    - redstone_ore
    - deepslate_redstone_ore
    lava-obscures: false
    max-block-height: 64
    replacement-blocks:
    - chest
    - amethyst_block
    - andesite
    - budding_amethyst
    - calcite
    - coal_ore
    - deepslate_coal_ore
    - deepslate
    - diorite
    - dirt
    - emerald_ore
    - deepslate_emerald_ore
    - granite
    - gravel
    - oak_planks
    - smooth_basalt
    - stone
    - tuff
    update-radius: 2
    use-permission: false

----------------------------------------

TITLE: Downloading Latest Stable Build for Paper Project using Shell and curl
DESCRIPTION: This script downloads the latest stable build JAR file for a specific Minecraft version of the Paper project. It first fetches the build number, constructs the download URL, and then uses curl to download the file.

LANGUAGE: shell
CODE:
#!/usr/bin/env sh

PROJECT="paper"
MINECRAFT_VERSION="%%_MAJ_MIN_PAT_MC_%%"

LATEST_BUILD=$(curl -s https://api.papermc.io/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION}/builds | \
    jq -r '.builds | map(select(.channel == "default") | .build) | .[-1]')

if [ "$LATEST_BUILD" != "null" ]; then
    JAR_NAME=${PROJECT}-${MINECRAFT_VERSION}-${LATEST_BUILD}.jar
    PAPERMC_URL="https://api.papermc.io/v2/projects/${PROJECT}/versions/${MINECRAFT_VERSION}/builds/${LATEST_BUILD}/downloads/${JAR_NAME}"

    # Download the latest Paper version
    curl -o server.jar $PAPERMC_URL
    echo "Download completed"
else
    echo "No stable build for version $MINECRAFT_VERSION found :("
fi

----------------------------------------

TITLE: Importing Docusaurus Components in JSX
DESCRIPTION: This code snippet imports necessary components from Docusaurus themes and hooks to create a dynamic list of documentation pages related to Paper server administration.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

----------------------------------------

TITLE: Adding Suggestions with Tooltips in Java
DESCRIPTION: This snippet demonstrates how to add a suggestion with a tooltip using the SuggestionsBuilder. It uses MiniMessage to create a formatted tooltip.

LANGUAGE: java
CODE:
builder.suggest("suggestion", MessageComponentSerializer.message().serialize(
    MiniMessage.miniMessage().deserialize("<green>Suggestion tooltip")
));

----------------------------------------

TITLE: Configuring Mojang Mappings in Maven
DESCRIPTION: Maven configuration for specifying Mojang mappings namespace in the plugin manifest.

LANGUAGE: xml
CODE:
<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-jar-plugin</artifactId>
  <version>3.4.1</version>
  <configuration>
    <archive>
      <manifestEntries>
        <paperweight-mappings-namespace>mojang</paperweight-mappings-namespace>
      </manifestEntries>
    </archive>
  </configuration>
</plugin>

----------------------------------------

TITLE: Logging Ambiguous Plugin Name Error for Paper Server
DESCRIPTION: This log snippet shows an error message when two plugins with the same name are installed. In this case, two versions of EssentialsX are present, causing a conflict.

LANGUAGE: log
CODE:
[00:00:00] [Server thread/WARN] Ambiguous plugin name `Essentials' for files `plugins/EssentialsX-2.19.4.jar' and `plugins/Essentialsx-2.20.0-dev.jar' in `plugins'

----------------------------------------

TITLE: Importing Docusaurus Components for Paper Development Guide
DESCRIPTION: This code snippet imports necessary components from Docusaurus theme and common utilities. It's used to render a list of documentation cards for the Paper Development Guide.

LANGUAGE: javascript
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

LANGUAGE: jsx
CODE:
<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Implementing TemplateMirror Argument in Paper Minecraft Command
DESCRIPTION: This snippet demonstrates the use of the TemplateMirror argument in a Paper Minecraft command. It creates a command that accepts a Mirror type as input and sends a message with the selected mirror.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> templateMirrorArgument() {
    return Commands.literal("templatemirror")
        .then(Commands.argument("mirror", ArgumentTypes.templateMirror())
            .executes(ctx -> {
                final Mirror mirror = ctx.getArgument("mirror", Mirror.class);

                ctx.getSource().getSender().sendPlainMessage("You selected: " + mirror.name());

                return Command.SINGLE_SUCCESS;
            })
        ).build();
}

----------------------------------------

TITLE: Adding Paper Maven Repository to Gradle Settings
DESCRIPTION: Adds the Paper Maven repository to the project's settings.gradle.kts file. This is necessary for using SNAPSHOT versions of paperweight-userdev.

LANGUAGE: kotlin
CODE:
pluginManagement {
    repositories {
        gradlePluginPortal()
        maven("https://repo.papermc.io/repository/maven-public/")
    }
}

----------------------------------------

TITLE: Configuring Hangar Publish Plugin in Gradle
DESCRIPTION: Gradle build script configuration for the Hangar publish plugin, including platform setup, version management, and dependency declarations.

LANGUAGE: kotlin
CODE:
plugins {
    id("io.papermc.hangar-publish-plugin") version "0.1.2"
}

LANGUAGE: kotlin
CODE:
import io.papermc.hangarpublishplugin.model.Platforms

hangarPublish {
    publications.register("plugin") {
        version.set(project.version as String)
        channel.set("Snapshot") // We're using the 'Snapshot' channel
        // TODO: Edit the project name to match your Hangar project
        id.set("hangar-project")
        apiKey.set(System.getenv("HANGAR_API_TOKEN"))
        platforms {
            register(Platforms.PAPER) {
                jar.set(tasks.jar.flatMap { it.archiveFile })

                val versions: List<String> = (property("paperVersion") as String)
                        .split(",")
                        .map { it.trim() }
                platformVersions.set(versions)

                dependencies {
                    hangar("Maintenance") {
                        required.set(false)
                    }
                    url("Debuggery", "https://github.com/PaperMC/Debuggery") {
                        required.set(true)
                    }
                }
            }
        }
    }
}

----------------------------------------

TITLE: Initializing Docusaurus Documentation Components
DESCRIPTION: Imports required Docusaurus theme components and hooks to create a documentation page with a card list navigation. Uses DocCardList to display sidebar category items.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

LANGUAGE: jsx
CODE:
<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Overriding Nether World Spawn Limits in Paper YAML
DESCRIPTION: Demonstrates how to override the monster spawn limit specifically for the Nether world by modifying the world_nether/paper-world.yml file.

LANGUAGE: yaml
CODE:
entities:
  spawning:
    spawn-limits:
      monster: 90

----------------------------------------

TITLE: Overriding Nether World Spawn Limits in Paper YAML
DESCRIPTION: Demonstrates how to override the monster spawn limit specifically for the Nether world by modifying the world_nether/paper-world.yml file.

LANGUAGE: yaml
CODE:
entities:
  spawning:
    spawn-limits:
      monster: 90

----------------------------------------

TITLE: Player Movement Debug Example in Java
DESCRIPTION: Example event handler demonstrating where to place breakpoints for debugging player movement in the Nether dimension.

LANGUAGE: java
CODE:
@EventHandler
public void onPlayerMove(PlayerMoveEvent event) {
    Player player = event.getPlayer();
    Location location = player.getLocation();

    if (location.getWorld() == null)
        return;

    if (location.getWorld().getEnvironment() == World.Environment.NETHER) {
        player.sendMessage("You are in the nether!");
    }
}

----------------------------------------

TITLE: Docusaurus Page Frontmatter Configuration
DESCRIPTION: Defines the page slug for routing in Docusaurus using frontmatter metadata.

LANGUAGE: markdown
CODE:
---
slug: /admin
---

----------------------------------------

TITLE: Importing Components for Velocity Admin Guide in JSX
DESCRIPTION: This code snippet imports the DocCardList component from the Docusaurus theme and the useCurrentSidebarCategory hook from the theme-common package. These are used to render a list of documentation cards for the Velocity administration guide.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

LANGUAGE: jsx
CODE:
<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Configuring Permanent Block Break Exploits in Paper
DESCRIPTION: Configuration setting to enable breaking of normally unbreakable blocks like Bedrock and End Portal frames. This setting is not recommended and may cause server issues.

LANGUAGE: yaml
CODE:
unsupported-settings:
  allow-permanent-block-break-exploits: true

----------------------------------------

TITLE: Importing Docusaurus Components for Documentation
DESCRIPTION: Imports required components from Docusaurus theme for rendering documentation cards. Uses DocCardList component and sidebar category hook to display contribution guide sections.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

# Contributing Guide

Welcome to the Paper contributing guide! This guide includes information and tutorials for developers
wishing to contribute to the Paper project.

---

<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Rendering ItemCommandConverter Component
DESCRIPTION: JSX code for rendering the ItemCommandConverter component in the page layout.

LANGUAGE: jsx
CODE:
<ItemCommandConverter />

----------------------------------------

TITLE: Paper Watchdog Thread Error Example
DESCRIPTION: Example of a Paper watchdog thread dump error message that indicates server response delays. This is not necessarily a bug but could indicate performance issues or hardware limitations.

LANGUAGE: plaintext
CODE:
[00:00:00] [Paper Watchdog Thread/ERROR]: --- DO NOT REPORT THIS TO PAPER - THIS IS NOT A BUG OR A CRASH - git-Paper-366 (MC: 1.19.3) ---
[00:00:00] [Paper Watchdog Thread/ERROR]: The server has not responded for 10 seconds! Creating thread dump
[00:00:00] [Paper Watchdog Thread/ERROR]: ------------------------------

----------------------------------------

TITLE: Importing DocCardList Component in JavaScript/JSX
DESCRIPTION: This snippet imports the DocCardList component from the theme, which is likely used for rendering a list of documentation cards.

LANGUAGE: JavaScript
CODE:
import DocCardList from "@theme/DocCardList";

----------------------------------------

TITLE: Paper Watchdog Thread Error Example
DESCRIPTION: Example of a Paper watchdog thread dump error message that indicates server response delays. This is not necessarily a bug but could indicate performance issues or hardware limitations.

LANGUAGE: plaintext
CODE:
[00:00:00] [Paper Watchdog Thread/ERROR]: --- DO NOT REPORT THIS TO PAPER - THIS IS NOT A BUG OR A CRASH - git-Paper-366 (MC: 1.19.3) ---
[00:00:00] [Paper Watchdog Thread/ERROR]: The server has not responded for 10 seconds! Creating thread dump
[00:00:00] [Paper Watchdog Thread/ERROR]: ------------------------------

----------------------------------------

TITLE: Logging Invalid plugin.yml Error for Paper Plugin
DESCRIPTION: This log snippet demonstrates an error message when a plugin has an invalid plugin.yml file. This can occur if the file is not a valid Paper plugin or if the download was incomplete.

LANGUAGE: log
CODE:
[00:00:00] [Server thread/WARN] Could not load 'plugins/MyAwesomePlugin-1.0.0.jar' in folder 'plugins'
[00:00:00] [Server thread/WARN] org.bukkit.plugin.InvalidDescriptionException: Invalid plugin.yml

----------------------------------------

TITLE: Logging Invalid plugin.yml Error for Paper Plugin
DESCRIPTION: This log snippet demonstrates an error message when a plugin has an invalid plugin.yml file. This can occur if the file is not a valid Paper plugin or if the download was incomplete.

LANGUAGE: log
CODE:
[00:00:00] [Server thread/WARN] Could not load 'plugins/MyAwesomePlugin-1.0.0.jar' in folder 'plugins'
[00:00:00] [Server thread/WARN] org.bukkit.plugin.InvalidDescriptionException: Invalid plugin.yml

----------------------------------------

TITLE: Configuring Anti-Xray Engine Mode 1 for Default World
DESCRIPTION: YAML configuration for Anti-Xray engine mode 1 in the default world. This mode replaces specified hidden blocks with fake blocks based on the dimension.

LANGUAGE: yaml
CODE:
anticheat:
  anti-xray:
    enabled: true
    engine-mode: 1
    hidden-blocks:
    - chest
    - coal_ore
    - deepslate_coal_ore
    - copper_ore
    - deepslate_copper_ore
    - raw_copper_block
    - diamond_ore
    - deepslate_diamond_ore
    - emerald_ore
    - deepslate_emerald_ore
    - gold_ore
    - deepslate_gold_ore
    - iron_ore
    - deepslate_iron_ore
    - raw_iron_block
    - lapis_ore
    - deepslate_lapis_ore
    - redstone_ore
    - deepslate_redstone_ore
    lava-obscures: false
    max-block-height: 64
    replacement-blocks: []
    update-radius: 2
    use-permission: false

----------------------------------------

TITLE: Configuring Anti-Xray Engine Mode 1 for Default World
DESCRIPTION: YAML configuration for Anti-Xray engine mode 1 in the default world. This mode replaces specified hidden blocks with fake blocks based on the dimension.

LANGUAGE: yaml
CODE:
anticheat:
  anti-xray:
    enabled: true
    engine-mode: 1
    hidden-blocks:
    - chest
    - coal_ore
    - deepslate_coal_ore
    - copper_ore
    - deepslate_copper_ore
    - raw_copper_block
    - diamond_ore
    - deepslate_diamond_ore
    - emerald_ore
    - deepslate_emerald_ore
    - gold_ore
    - deepslate_gold_ore
    - iron_ore
    - deepslate_iron_ore
    - raw_iron_block
    - lapis_ore
    - deepslate_lapis_ore
    - redstone_ore
    - deepslate_redstone_ore
    lava-obscures: false
    max-block-height: 64
    replacement-blocks: []
    update-radius: 2
    use-permission: false

----------------------------------------

TITLE: Configuring Anti-Xray Engine Mode 1 for Default World
DESCRIPTION: YAML configuration for Anti-Xray engine mode 1 in the default world. This mode replaces specified hidden blocks with fake blocks based on the dimension.

LANGUAGE: yaml
CODE:
anticheat:
  anti-xray:
    enabled: true
    engine-mode: 1
    hidden-blocks:
    - chest
    - coal_ore
    - deepslate_coal_ore
    - copper_ore
    - deepslate_copper_ore
    - raw_copper_block
    - diamond_ore
    - deepslate_diamond_ore
    - emerald_ore
    - deepslate_emerald_ore
    - gold_ore
    - deepslate_gold_ore
    - iron_ore
    - deepslate_iron_ore
    - raw_iron_block
    - lapis_ore
    - deepslate_lapis_ore
    - redstone_ore
    - deepslate_redstone_ore
    lava-obscures: false
    max-block-height: 64
    replacement-blocks: []
    update-radius: 2
    use-permission: false

----------------------------------------

TITLE: Using Property Component in PaperMC Docs
DESCRIPTION: Example of using the Property component to embed configurable values in documentation

LANGUAGE: jsx
CODE:
<Property name="PAPER_JAVA_MIN" />

----------------------------------------

TITLE: Displaying Unknown Argument Type Error in Velocity
DESCRIPTION: This snippet shows an error message when Velocity encounters an unknown argument type identifier.

LANGUAGE: plaintext
CODE:
Argument type identifier <namespace>:<name> unknown.

----------------------------------------

TITLE: Importing Docusaurus Components for Guide Display
DESCRIPTION: Imports required Docusaurus theme components and hooks to create a documentation page that displays miscellaneous development guides using DocCardList.

LANGUAGE: jsx
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

# Miscellaneous Development Guides

These guides are for helping developers with parts of the development process that don't fit into the other categories.

---

<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Using Javadoc Component in PaperMC Docs
DESCRIPTION: Example of using the Javadoc component to create links to the current version of Javadoc

LANGUAGE: jsx
CODE:
<Javadoc name={"org.bukkit.event.Event"}>here</Javadoc>
// The project can also be set here, and defaults to Paper

----------------------------------------

TITLE: Handling Objective Criteria Argument in Java Command API
DESCRIPTION: Illustrates the usage of the objective criteria argument to retrieve a Criteria enum value. The example shows a command that displays the default render type for the specified criteria.

LANGUAGE: java
CODE:
public static LiteralCommandNode<CommandSourceStack> objectiveCriteriaArgument() {
    return Commands.literal("objectivecriteria")
        .then(Commands.argument("criteria", ArgumentTypes.objectiveCriteria())
            .executes(ctx -> {
                final Criteria criteria = ctx.getArgument("criteria", Criteria.class);

                ctx.getSource().getSender().sendRichMessage("Default render type for <criteria>: <rendertype>",
                    Placeholder.unparsed("criteria", criteria.getName()),
                    Placeholder.unparsed("rendertype", criteria.getDefaultRenderType().name())
                );
                return Command.SINGLE_SUCCESS;
            }))
        .build();
}

----------------------------------------

TITLE: Logging Missing Dependencies for Paper Plugin
DESCRIPTION: This log snippet shows an error message when a plugin is missing required dependencies. It indicates that 'MyAwesomePlugin' requires 'Vault' to be installed.

LANGUAGE: log
CODE:
[00:00:00] [Server thread/WARN] Could not load 'plugins/MyAwesomePlugin-1.0.0.jar' in folder 'plugins'
[00:00:00] [Server thread/WARN] org.bukkit.plugin.UnknownDependencyException: Unknown/missing dependency plugins: [Vault]. Please download and install these plugins to run 'MyAwesomePlugin'.

----------------------------------------

TITLE: Installing Dependencies for PaperMC Docs
DESCRIPTION: This command installs all required dependencies for the PaperMC documentation project using pnpm package manager.

LANGUAGE: bash
CODE:
$ pnpm install

----------------------------------------

TITLE: Configuring Sponge for Legacy Forwarding
DESCRIPTION: Enable BungeeCord support and IP forwarding in Sponge's global.conf configuration file to allow Sponge to understand forwarded data from Velocity.

LANGUAGE: yaml
CODE:
modules {
  bungeecord = true
}
bungeecord {
  ip-forwarding = true
}

----------------------------------------

TITLE: Importing Audiences Component Documentation in MDX
DESCRIPTION: Imports and renders the Audiences component documentation from a MDX module file

LANGUAGE: mdx
CODE:
import Audiences from "@site/docs/paper/dev/api/component-api/audiences.mdx";

<Audiences/>

----------------------------------------

TITLE: Importing Components for Folia Development Guide in React
DESCRIPTION: This code snippet imports the DocCardList component from the Docusaurus theme and the useCurrentSidebarCategory hook from the theme-common package. These are used to create a dynamic list of documentation cards based on the current sidebar category.

LANGUAGE: JavaScript
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

LANGUAGE: JSX
CODE:
<DocCardList items={useCurrentSidebarCategory().items} />

----------------------------------------

TITLE: Cloning PaperMC Documentation Repository
DESCRIPTION: This command clones the PaperMC documentation repository from GitHub. It's the first step in setting up the local development environment.

LANGUAGE: bash
CODE:
$ git clone https://github.com/PaperMC/docs

----------------------------------------

TITLE: Importing Components for Paper API Documentation in React
DESCRIPTION: This code snippet imports necessary components from Docusaurus theme for rendering a list of documentation cards. It uses the DocCardList component and a hook to access the current sidebar category.

LANGUAGE: JavaScript
CODE:
import DocCardList from "@theme/DocCardList";
import { useCurrentSidebarCategory } from "@docusaurus/theme-common";

----------------------------------------

TITLE: Using VersionFormattedCode Component in PaperMC Docs
DESCRIPTION: Example of using the VersionFormattedCode component to embed version-aware code blocks with placeholders

LANGUAGE: jsx
CODE:
<VersionFormattedCode language={"yaml"}>
```
name: Paper-Test-Plugin
version: '1.0'
main: io.papermc.testplugin.TestPlugin
description: Paper Test Plugin
api-version: '%%_MAJ_MIN_PAT_MC_%%'
bootstrapper: io.papermc.testplugin.TestPluginBootstrap
loader: io.papermc.testplugin.TestPluginLoader
```
</VersionFormattedCode>

----------------------------------------

TITLE: Basic Waterfall Proxy Launch Command
DESCRIPTION: Basic Java command to start the Waterfall proxy with 512MB minimum and maximum memory allocation.

LANGUAGE: bash
CODE:
java -Xms512M -Xmx512M -jar waterfall-###.jar

----------------------------------------

TITLE: Using Entity Scheduler in Folia
DESCRIPTION: Example of accessing the entity-specific scheduler that follows entities across regions.

LANGUAGE: java
CODE:
EntityScheduler scheduler = entity.getScheduler();

----------------------------------------

TITLE: Creating Basic Velocity Plugin Class
DESCRIPTION: Demonstrates how to create a basic Velocity plugin class with dependency injection for ProxyServer and Logger. Shows the main plugin class structure with @Plugin annotation for metadata.

LANGUAGE: java
CODE:
package com.example.velocityplugin;

import com.google.inject.Inject;
import com.velocitypowered.api.plugin.Plugin;
import com.velocitypowered.api.proxy.ProxyServer;
import org.slf4j.Logger;

@Plugin(id = "myfirstplugin", name = "My First Plugin", version = "0.1.0-SNAPSHOT",
        url = "https://example.org", description = "I did it!", authors = {"Me"})
public class VelocityTest {

    private final ProxyServer server;
    private final Logger logger;

    @Inject
    public VelocityTest(ProxyServer server, Logger logger) {
        this.server = server;
        this.logger = logger;

        logger.info("Hello there! I made my first plugin with Velocity.");
    }
}

----------------------------------------

TITLE: Player Movement Debug Example
DESCRIPTION: Example event handler demonstrating where to place breakpoints for debugging player movement in the Nether dimension.

LANGUAGE: java
CODE:
@EventHandler
public void onPlayerMove(PlayerMoveEvent event) {
    Player player = event.getPlayer();
    Location location = player.getLocation();

    if (location.getWorld() == null)
        return;

    if (location.getWorld().getEnvironment() == World.Environment.NETHER) {
        player.sendMessage("You are in the nether!");
    }
}

----------------------------------------

TITLE: Adding Command Suggestions in Java
DESCRIPTION: Implements the suggest method to provide player name suggestions for the broadcast command, with filtering based on user input.

LANGUAGE: java
CODE:
@Override
public Collection<String> suggest(CommandSourceStack commandSourceStack, String[] args) {
    if (args.length == 0) {
        return Bukkit.getOnlinePlayers().stream().map(Player::getName).toList();
    }

    return Bukkit.getOnlinePlayers().stream()
        .map(Player::getName)
        .filter(name -> name.toLowerCase().startsWith(args[args.length - 1].toLowerCase()))
        .toList();
}

----------------------------------------

TITLE: PDC Usage with TileState
DESCRIPTION: Example of storing data in a PDC attached to a block entity (TileState) like a chest.

LANGUAGE: java
CODE:
Block block = ...;
if (block.getState() instanceof Chest chest) {
    chest.getPersistentDataContainer().set(key, PersistentDataType.STRING, "I love Tacos!");
    chest.update();
}

----------------------------------------

TITLE: Marking Method for Removal in Java
DESCRIPTION: Demonstrates how to mark a method for removal in a specific version using @ApiStatus.ScheduledForRemoval and @Deprecated annotations. This clearly indicates that the method will be removed in version 1.20 and should not be used.

LANGUAGE: java
CODE:
@ApiStatus.ScheduledForRemoval(inVersion = "1.20")
@Deprecated(forRemoval = true)
public void exampleMethod(); // Example method marked for removal in 1.20

----------------------------------------

TITLE: Rendering Docusaurus DocCardList Component in JSX
DESCRIPTION: This code snippet renders the DocCardList component, populating it with items from the current sidebar category. It's used to display a list of documentation pages or sections available in the Waterfall documentation.

LANGUAGE: jsx
CODE:
<DocCardList items={useCurrentSidebarCategory().items} />