TITLE: HTTP POST Endpoint for Executing Queries
DESCRIPTION: Documents the main API endpoint that allows executing batches of SQL statements as transactions. This route handles query execution and returns results.

LANGUAGE: http
CODE:
POST /

----------------------------------------

TITLE: Basic SQLite Database Operations with Rusqlite in Rust
DESCRIPTION: A complete example demonstrating how to create a table, insert data, and query records from an in-memory SQLite database using Rusqlite. The example includes creating a Person struct, mapping database rows to this struct, and iterating through query results.

LANGUAGE: rust
CODE:
use rusqlite::{Connection, Result};

#[derive(Debug)]
struct Person {
    id: i32,
    name: String,
    data: Option<Vec<u8>>,
}

fn main() -> Result<()> {
    let conn = Connection::open_in_memory()?;

    conn.execute(
        "CREATE TABLE person (
            id    INTEGER PRIMARY KEY,
            name  TEXT NOT NULL,
            data  BLOB
        )",
        (), // empty list of parameters.
    )?;
    let me = Person {
        id: 0,
        name: "Steven".to_string(),
        data: None,
    };
    conn.execute(
        "INSERT INTO person (name, data) VALUES (?1, ?2)",
        (&me.name, &me.data),
    )?;

    let mut stmt = conn.prepare("SELECT id, name, data FROM person")?;
    let person_iter = stmt.query_map([], |row| {
        Ok(Person {
            id: row.get(0)?,
            name: row.get(1)?,
            data: row.get(2)?,
        })
    })?;

    for person in person_iter {
        println!("Found person {:?}", person.unwrap());
    }
    Ok()
}

----------------------------------------

TITLE: Implementing a WebAssembly User-Defined Function in Rust with libsql_bindgen
DESCRIPTION: Example of creating a decryption function in Rust using the libsql_bindgen macro to handle type conversions automatically. The function takes encrypted data and a key as strings and returns the decrypted string.

LANGUAGE: rust
CODE:
#[libsql_bindgen::libsql_bindgen]
pub fn decrypt(data: String, key: String) -> String {
  use magic_crypt::MagicCryptTrait;
  let mc = magic_crypt::new_magic_crypt!(key, 256);
  mc.decrypt_base64_to_string(data)
      .unwrap_or("[ACCESS DENIED]".to_owned())
}

----------------------------------------

TITLE: Creating a WebAssembly-based Fibonacci Function in SQL
DESCRIPTION: Example of creating a user-defined function using WebAssembly. This defines a 'fib' function that calculates Fibonacci numbers using WebAssembly text format (WAT) within SQL.

LANGUAGE: sql
CODE:
CREATE FUNCTION IF NOT EXISTS fib LANGUAGE wasm AS '
(module 
 (type (;0;) (func (param i64) (result i64))) 
 (func $fib (type 0) (param i64) (result i64) 
 (local i64) 
 i64.const 0 
 local.set 1 
 block ;; label = @1 
 local.get 0 
 i64.const 2 
 i64.lt_u 
 br_if 0 (;@1;) 
 i64.const 0 
 local.set 1 
 loop ;; label = @2 
 local.get 0 
 i64.const -1 
 i64.add 
 call $fib 
 local.get 1 
 i64.add 
 local.set 1 
 local.get 0 
 i64.const -2 
 i64.add 
 local.tee 0 
 i64.const 1 
 i64.gt_u 
 br_if 0 (;@2;) 
 end 
 end 
 local.get 0 
 local.get 1 
 i64.add) 
 (memory (;0;) 16) 
 (global $__stack_pointer (mut i32) (i32.const 1048576)) 
 (global (;1;) i32 (i32.const 1048576)) 
 (global (;2;) i32 (i32.const 1048576)) 
 (export "memory" (memory 0)) 
 (export "fib" (func $fib)))
';

----------------------------------------

TITLE: User Authentication API in SQLite
DESCRIPTION: The API function to authenticate a user with username and password credentials for a SQLite database connection. Returns SQLITE_OK on successful authentication or SQLITE_ERROR if authentication fails.

LANGUAGE: c
CODE:
int sqlite3_user_authenticate(
  sqlite3 *db,           /* The database connection */
  const char *zUsername, /* Username */
  const char *aPW,       /* Password or credentials */
  int nPW                /* Number of bytes in aPW[] */
);

----------------------------------------

TITLE: Syncing WAL Between Databases using libSQL WAL API
DESCRIPTION: Example function demonstrating how to synchronize the Write-Ahead Log between two databases using libSQL's WAL API. This allows replicating changes from a primary to a backup database.

LANGUAGE: c
CODE:
static void sync_db(sqlite3 *db_primary, sqlite3 *db_backup){
  unsigned int max_frame;

  libsql_wal_frame_count(db_primary, &max_frame);
  libsql_wal_begin_commit(db_backup);
  for(int i=1; i<=max_frame; i++){
    char frame[4096+24];
    libsql_wal_get_frame(db_primary, i, frame, sizeof(frame));
    int conflict;
    libsql_wal_insert_frame(db_backup, i, frame, sizeof(frame), &conflict);
  }
  libsql_wal_end_commit(db_backup);
}

----------------------------------------

TITLE: Building libSQL from Source
DESCRIPTION: Command to build the SQLite-compatible C library and tools using Cargo's xtask system.

LANGUAGE: sh
CODE:
cargo xtask build

----------------------------------------

TITLE: Implementing Connection Close Hook in C with libSQL
DESCRIPTION: The libsql_close_hook function allows setting a callback that executes before a connection is closed, enabling proper cleanup of resources like cached prepared statements. This extension addresses issues with cleanup order during connection termination.

LANGUAGE: c
CODE:
void *libsql_close_hook(
  sqlite3 *db,              /* Attach the hook to this connection */
  void(*xCallback)(         /* Callback function */
    void*,sqlite3*),
  void *pArg                /* First callback argument */
);

----------------------------------------

TITLE: Demonstrating Basic Usage of libSQL Shell
DESCRIPTION: This example shows the basic usage of the libSQL shell, including creating tables, inserting data (including BLOBs, strings, numbers, and NULL values), and running SELECT queries with functions like length() and hex().

LANGUAGE: console
CODE:
$ ./libsql
libSQL version 0.2.0
Connected to a transient in-memory database.

libsql> create table test(id, v);
libsql> insert into test values(42, zeroblob(12));
libsql> insert into test values(3.14, 'hello');
libsql> insert into test values(null, null);
libsql> select id, v, length(v), hex(v) from test;
 id   | v                  | length(v) | hex(v)                   
------+--------------------+-----------+--------------------------
 42   | 0xAAAAAAAAAAAAAAAA | 12        | 000000000000000000000000 
 3.14 | hello              | 5         | 68656C6C6F               
 null | null               | null      |                          
libsql> 

----------------------------------------

TITLE: Running the libSQL SQL Shell
DESCRIPTION: Example of launching the libSQL interactive SQL shell which provides a command-line interface for database operations, similar to the SQLite shell.

LANGUAGE: console
CODE:
$ cd libsql-sqlite3 && ./libsql
libSQL version 0.2.1 (based on SQLite version 3.43.0) 2023-05-23 11:47:56
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.
libsql>

----------------------------------------

TITLE: Defining Hrana Protocol Message Types in TypeScript
DESCRIPTION: Core type definitions for client and server messages in the Hrana protocol. This defines the basic message structure that forms the protocol's communication layer.

LANGUAGE: typescript
CODE:
type ClientMsg =
    | HelloMsg
    | RequestMsg

type ServerMsg =
    | HelloOkMsg
    | HelloErrorMsg
    | ResponseOkMsg
    | ResponseErrorMsg

----------------------------------------

TITLE: SQLite Value Type Definition in TypeScript
DESCRIPTION: Defines the Value type structure used to represent SQLite data types in the Hrana protocol. It handles null values, integers, floats, text strings, and binary blobs with appropriate type information.

LANGUAGE: typescript
CODE:
type Value =
    | { "type": "null" }
    | { "type": "integer", "value": string }
    | { "type": "float", "value": number }
    | { "type": "text", "value": string }
    | { "type": "blob", "base64": string }

----------------------------------------

TITLE: Launching a Primary LibSQL Server Instance with Docker
DESCRIPTION: Command to run a primary LibSQL server container, exposing port 8080 and setting the node type to primary.

LANGUAGE: console
CODE:
docker run --name some-sqld -p 8080:8080 -ti \
    -e SQLD_NODE=primary \
    ghcr.io/tursodatabase/libsql-server:latest

----------------------------------------

TITLE: Executing SQL Statements in Hrana Protocol (TypeScript)
DESCRIPTION: Defines the request and response types for executing a single SQL statement on a stream. The client sends an execute request with a statement, and the server responds with the result of the statement execution.

LANGUAGE: typescript
CODE:
type ExecuteReq = {
    "type": "execute",
    "stream_id": int32,
    "stmt": Stmt,
}

type ExecuteResp = {
    "type": "execute",
    "result": StmtResult,
}

----------------------------------------

TITLE: Creating and Populating a Temporary Table with Complex JSON Data
DESCRIPTION: Creates a temporary table for JSON storage and populates it with 25,000 complex JSON objects using recursive CTEs and JSON functions. Each object contains nested arrays and various data types.

LANGUAGE: sql
CODE:
CREATE TEMP TABLE t2(x JSON TEXT);
WITH RECURSIVE
  c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<25000),
  array1(y) AS (
    SELECT json_group_array(
             json_object('x',x,'y',random(),'z',hex(randomblob(50)))
           )
      FROM c
  ),
  c2(n) AS (VALUES(1) UNION ALL SELECT n+1 FROM c2 WHERE n<5)
INSERT INTO t2(x)
  SELECT jsonb_object('a',n,'b',n*2,'c',y,'d',3,'e',5,'f',6) FROM array1, c2;

----------------------------------------

TITLE: Example of Positional Parameter Binding in JSON
DESCRIPTION: Demonstrates how to use positional parameters (?) in queries, providing their values as an ordered array in the params field.

LANGUAGE: json
CODE:
{
    "q": "SELECT * FROM users WHERE name = ?",
    "params": ["adhoc"]
}

----------------------------------------

TITLE: Launching a sqld Primary Server with TLS
DESCRIPTION: Command to start a sqld server in primary mode with TLS configuration. The server will listen for SQL over HTTP and use gRPC with TLS for replication.

LANGUAGE: console
CODE:
sqld \
  --http-listen-addr 127.0.0.1:8081 \
  --grpc-listen-addr 127.0.0.1:5001 \
  --grpc-tls \
  --grpc-ca-cert-file ca_cert.pem \
  --grpc-cert-file server_cert.pem \
  --grpc-key-file server_key.pem

----------------------------------------

TITLE: Stream Request and Response Type Definitions in TypeScript
DESCRIPTION: TypeScript union types defining all possible stream request and response types in the Hrana protocol, showing the available operations for database interaction.

LANGUAGE: typescript
CODE:
type StreamRequest =
    | CloseStreamReq
    | ExecuteStreamReq
    | BatchStreamReq
    | SequenceStreamReq
    | DescribeStreamReq
    | StoreSqlStreamReq
    | CloseSqlStreamReq
    | GetAutocommitStreamReq

type StreamResponse =
    | CloseStreamResp
    | ExecuteStreamResp
    | BatchStreamResp
    | SequenceStreamResp
    | DescribeStreamResp
    | StoreSqlStreamResp
    | CloseSqlStreamResp
    | GetAutocommitStreamReq

----------------------------------------

TITLE: Executing SQL Statements via HTTP API v1
DESCRIPTION: Endpoint for executing a single SQL statement. It receives a statement object and returns the execution result, following the same semantics as the 'execute' request in the Hrana protocol.

LANGUAGE: HTTP
CODE:
POST /v1/execute

-> {
    "stmt": Stmt,
}

<- {
    "result": StmtResult,
}

----------------------------------------

TITLE: Defining Query Body Structure in TypeScript
DESCRIPTION: Describes the request body format for the query endpoint, showing how to structure statement batches with both simple string queries and parameterized queries.

LANGUAGE: typescript
CODE:
type QueryBody = {
    statements: Array<Query>
}

type Query = string | ParamQuery;
type ParamQuery = { q: string, params: undefined | Record<string, Value> | Array<Value> }

----------------------------------------

TITLE: SQLite User Authentication Table Schema
DESCRIPTION: The schema for the special sqlite_user table that identifies an authentication-required database. This table stores usernames, admin status, and encrypted passwords. It's inaccessible to non-admin users and read-only for admins.

LANGUAGE: sql
CODE:
CREATE TABLE sqlite_user(
  uname TEXT PRIMARY KEY,
  isAdmin BOOLEAN,
  pw BLOB
) WITHOUT ROWID;

----------------------------------------

TITLE: HTTP GET Endpoint for Server Health Check
DESCRIPTION: Documents the health endpoint that returns a 200 OK status if the server is running properly.

LANGUAGE: http
CODE:
GET /health

----------------------------------------

TITLE: SQL Statement Result Structure in libsql Protocol
DESCRIPTION: Defines the structure of a statement execution result, containing column information, rows of data, the number of affected rows for DML statements, and the last insert rowid when applicable.

LANGUAGE: typescript
CODE:
type StmtResult = {
    "cols": Array<Col>,
    "rows": Array<Array<Value>>,
    "affected_row_count": int32,
    "last_insert_rowid": string | null,
}

type Col = {
    "name": string | null,
}

----------------------------------------

TITLE: Creating a Table with Primary Key in SQL
DESCRIPTION: Example of creating a users table with an integer primary key, which will serve as the referenced table in a foreign key relationship.

LANGUAGE: sql
CODE:
CREATE TABLE users (id INT PRIMARY KEY);

----------------------------------------

TITLE: Adding Users API in SQLite Authentication
DESCRIPTION: The API function to add a new user to a SQLite database. Requires admin privileges to execute. When used on a no-authentication database with isAdmin=true, it converts the database to an authentication-required database.

LANGUAGE: c
CODE:
int sqlite3_user_add(
  sqlite3 *db,           /* Database connection */
  const char *zUsername, /* Username to be added */
  const char *aPW,       /* Password or credentials */
  int nPW,               /* Number of bytes in aPW[] */
  int isAdmin            /* True to give new user admin privilege */
);

----------------------------------------

TITLE: Verifying sqld Installation via Homebrew
DESCRIPTION: Command to verify that sqld was correctly installed by displaying its help information.

LANGUAGE: bash
CODE:
sqld --help

----------------------------------------

TITLE: Read Operation Flow Sequence Diagram in SQLite Server Architecture
DESCRIPTION: This sequence diagram illustrates the read operation flow in the sqld architecture. It shows how a client sends SQL SELECT queries to a replica server, which executes the query locally and returns results. It also demonstrates how replicas poll the primary server for WAL updates to maintain data consistency.

LANGUAGE: mermaid
CODE:
sequenceDiagram
    autonumber
    participant Client
    participant Replica
    participant Primary
    Client->>Replica: SQL SELECT
    Replica->>Client: SQL result set
    Replica->>Primary: Request WAL updates
    Primary->>Replica: WAL entries

----------------------------------------

TITLE: Shared Protocol Structures in Protobuf
DESCRIPTION: Defines common data structures used by both WebSocket and HTTP implementations of the Hrana protocol. Includes error handling, SQL statements, parameter binding, result sets, batch operations, and cursor navigation.

LANGUAGE: proto
CODE:
syntax = "proto3";
package hrana;

message Error {
  string message = 1;
  optional string code = 2;
}

message Stmt {
  optional string sql = 1;
  optional int32 sql_id = 2;
  repeated Value args = 3;
  repeated NamedArg named_args = 4;
  optional bool want_rows = 5;
}

message NamedArg {
  string name = 1;
  Value value = 2;
}

message StmtResult {
  repeated Col cols = 1;
  repeated Row rows = 2;
  uint64 affected_row_count = 3;
  optional sint64 last_insert_rowid = 4;
}

message Col {
  optional string name = 1;
  optional string decltype = 2;
}

message Row {
  repeated Value values = 1;
}

message Batch {
  repeated BatchStep steps = 1;
}

message BatchStep {
  optional BatchCond condition = 1;
  Stmt stmt = 2;
}

message BatchCond {
  oneof cond {
    uint32 step_ok = 1;
    uint32 step_error = 2;
    BatchCond not = 3;
    CondList and = 4;
    CondList or = 5;
    IsAutocommit is_autocommit = 6;
  }

  message CondList {
    repeated BatchCond conds = 1;
  }

  message IsAutocommit {
  }
}

message BatchResult {
  map<uint32, StmtResult> step_results = 1;
  map<uint32, Error> step_errors = 2;
}

message CursorEntry {
  oneof entry {
    StepBeginEntry step_begin = 1;
    StepEndEntry step_end = 2;
    StepErrorEntry step_error = 3;
    Row row = 4;
    Error error = 5;
  }
}

message StepBeginEntry {
  uint32 step = 1;
  repeated Col cols = 2;
}

message StepEndEntry {
  uint64 affected_row_count = 1;
  optional sint64 last_insert_rowid = 2;
}

message StepErrorEntry {
  uint32 step = 1;
  Error error = 2;
}

message DescribeResult {
  repeated DescribeParam params = 1;
  repeated DescribeCol cols = 2;
  bool is_explain = 3;
  bool is_readonly = 4;
}

message DescribeParam {
  optional string name = 1;
}

message DescribeCol {
  string name = 1;
  optional string decltype = 2;
}

message Value {
  oneof value {
    Null null = 1;
    sint64 integer = 2;
    double float = 3;
    string text = 4;
    bytes blob = 5;
  }

  message Null {}
}

----------------------------------------

TITLE: Defining Query Response Format in TypeScript
DESCRIPTION: Details the structure of successful query responses, showing how each query result contains column information, row data, and performance metrics.

LANGUAGE: typescript
CODE:
type BatchResponse = Array<QueryResult>|Error

type QueryResult = {
    results: {
        columns: Array<string>,
        rows: Array<Array<Value>>,
        rows_read: uint64,
        rows_written: uint64,
        query_duration_ms: double
    }
}

----------------------------------------

TITLE: Hrana HTTP Protocol Definition in Protobuf
DESCRIPTION: Defines the message formats for the Hrana protocol over HTTP connections. Includes pipeline requests/responses, cursor operations, and stream-based SQL operations with corresponding parameters and result structures.

LANGUAGE: proto
CODE:
syntax = "proto3";
package hrana.http;

message PipelineReqBody {
  optional string baton = 1;
  repeated StreamRequest requests = 2;
}

message PipelineRespBody {
  optional string baton = 1;
  optional string base_url = 2;
  repeated StreamResult results = 3;
}

message StreamResult {
  oneof result {
    StreamResponse ok = 1;
    Error error = 2;
  }
}

message CursorReqBody {
  optional string baton = 1;
  Batch batch = 2;
}

message CursorRespBody {
  optional string baton = 1;
  optional string base_url = 2;
}

message StreamRequest {
  oneof request {
    CloseStreamReq close = 1;
    ExecuteStreamReq execute = 2;
    BatchStreamReq batch = 3;
    SequenceStreamReq sequence = 4;
    DescribeStreamReq describe = 5;
    StoreSqlStreamReq store_sql = 6;
    CloseSqlStreamReq close_sql = 7;
    GetAutocommitStreamReq get_autocommit = 8;
  }
}

message StreamResponse {
  oneof response {
    CloseStreamResp close = 1;
    ExecuteStreamResp execute = 2;
    BatchStreamResp batch = 3;
    SequenceStreamResp sequence = 4;
    DescribeStreamResp describe = 5;
    StoreSqlStreamResp store_sql = 6;
    CloseSqlStreamResp close_sql = 7;
    GetAutocommitStreamResp get_autocommit = 8;
  }
}

message CloseStreamReq {
}

message CloseStreamResp {
}

message ExecuteStreamReq {
  Stmt stmt = 1;
}

message ExecuteStreamResp {
  StmtResult result = 1;
}

message BatchStreamReq {
  Batch batch = 1;
}

message BatchStreamResp {
  BatchResult result = 1;
}

message SequenceStreamReq {
  optional string sql = 1;
  optional int32 sql_id = 2;
}

message SequenceStreamResp {
}

message DescribeStreamReq {
  optional string sql = 1;
  optional int32 sql_id = 2;
}

message DescribeStreamResp {
  DescribeResult result = 1;
}

message StoreSqlStreamReq {
  int32 sql_id = 1;
  string sql = 2;
}

message StoreSqlStreamResp {
}

message CloseSqlStreamReq {
  int32 sql_id = 1;
}

message CloseSqlStreamResp {
}

message GetAutocommitStreamReq {
}

message GetAutocommitStreamResp {
  bool is_autocommit = 1;
}

----------------------------------------

TITLE: Running sqld Using Docker Image
DESCRIPTION: Command to run the latest sqld Docker image from GitHub Container Registry, mapping port 8080 to the host machine.

LANGUAGE: bash
CODE:
docker run -p 8080:8080 -d ghcr.io/tursodatabase/libsql-server:latest

----------------------------------------

TITLE: Registering and Managing Virtual WAL Methods in C
DESCRIPTION: C functions for finding, registering, and unregistering custom virtual WAL (Write-Ahead Log) methods in libSQL. These functions allow developers to implement pluggable backends for the write-ahead log.

LANGUAGE: c
CODE:
  libsql_wal_methods_find
  libsql_wal_methods_register
  libsql_wal_methods_unregister

----------------------------------------

TITLE: Compiling SQLite on Unix-like Systems
DESCRIPTION: Step-by-step commands to unpack, configure, and build SQLite on Unix-like systems. This includes steps for running tests and building the amalgamation source file.

LANGUAGE: sh
CODE:
tar xzf sqlite.tar.gz    ;#  Unpack the source tree into "sqlite"
mkdir bld                ;#  Build will occur in a sibling directory
cd bld                   ;#  Change to the build directory
../sqlite/configure      ;#  Run the configure script
make                     ;#  Run the makefile.
make sqlite3.c           ;#  Build the "amalgamation" source file
make test                ;#  Run some tests (requires Tcl)

----------------------------------------

TITLE: Defining Authentication Message Types in TypeScript
DESCRIPTION: TypeScript type definitions for the authentication messages in the Hrana protocol. These types define how clients authenticate with the server and how the server responds.

LANGUAGE: typescript
CODE:
type HelloMsg = {
    "type": "hello",
    "jwt": string | null,
}

type HelloOkMsg = {
    "type": "hello_ok",
}

type HelloErrorMsg = {
    "type": "hello_error",
    "error": Error,
}

----------------------------------------

TITLE: Persisting LibSQL Database with Custom Path
DESCRIPTION: Command to run LibSQL server with a custom database path, allowing for flexible data storage locations within the container.

LANGUAGE: console
CODE:
docker run --name some-sqld -ti \
    -v sqld-data:/data/sqld \ # to mount data in different directory set SQLD_DB_PATH env var
    -e SQLD_NODE=primary \
    -e SQLD_DB_PATH=/data/sqld \
    ghcr.io/tursodatabase/libsql-server:latest

----------------------------------------

TITLE: Generating JSON Struct Descriptions from C for JavaScript Bindings
DESCRIPTION: A complete example of a C function that generates JSON descriptions of struct types with accurate size and offset information. This approach uses macros to build descriptions that can be consumed by JavaScript struct binding mechanisms, ensuring proper memory layout compatibility between C and JavaScript.

LANGUAGE: c
CODE:
#include <string.h> /* memset() */
#include <stddef.h> /* offsetof() */
#include <stdio.h>  /* snprintf() */
#include <stdint.h> /* int64_t */
#include <assert.h>

struct ExampleStruct {
  int v4;
  void * ppV;
  int64_t v8;
  void (*xFunc)(void*);
};
typedef struct ExampleStruct ExampleStruct;

const char * wasm__ctype_json(void){
  static char strBuf[512 * 8] = {0}
    /* Static buffer which must be sized large enough for
       our JSON. The string-generation macros try very
       hard to assert() if this buffer is too small. */;
  int n = 0, structCount = 0 /* counters for the macros */;
  char * pos = &strBuf[1]
    /* Write-position cursor. Skip the first byte for now to help
       protect against a small race condition */;
  char const * const zEnd = pos + sizeof(strBuf)
    /* one-past-the-end cursor (virtual EOF) */;
  if(strBuf[0]) return strBuf; // Was set up in a previous call.

  ////////////////////////////////////////////////////////////////////
  // First we need to build up our macro framework...

  ////////////////////////////////////////////////////////////////////
  // Core output-generating macros...
#define lenCheck assert(pos < zEnd - 100)
#define outf(format,...) \
  pos += snprintf(pos, ((size_t)(zEnd - pos)), format, __VA_ARGS__); \
  lenCheck
#define out(TXT) outf("%s",TXT)
#define CloseBrace(LEVEL) \
  assert(LEVEL<5); memset(pos, '}', LEVEL); pos+=LEVEL; lenCheck

  ////////////////////////////////////////////////////////////////////
  // Macros for emiting StructBinders...
#define StructBinder__(TYPE)                 \
  n = 0;                                     \
  outf("%s{", (structCount++ ? ", " : ""));  \
  out("\"name\": \"" # TYPE "\",");          \
  outf("\"sizeof\": %d", (int)sizeof(TYPE)); \
  out(",\"members\": {");
#define StructBinder_(T) StructBinder__(T)
// ^^^ extra indirection needed to expand CurrentStruct
#define StructBinder StructBinder_(CurrentStruct)
#define _StructBinder CloseBrace(2)
#define M(MEMBER,SIG)                                         \
  outf("%s\"%s\": "                                           \
       "{\"offset\":%d,\"sizeof\": %d,\"signature\":\"%s\"}", \
       (n++ ? ", " : ""), #MEMBER,                            \
       (int)offsetof(CurrentStruct,MEMBER),                   \
       (int)sizeof(((CurrentStruct*)0)->MEMBER),              \
       SIG)
  // End of macros.
  ////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////
  // With that out of the way, we can do what we came here to do.
  out("\"structs\": ["); {

// For each struct description, do...
#define CurrentStruct ExampleStruct
    StructBinder {
      M(v4,"i");
      M(ppV,"p");
      M(v8,"j");
      M(xFunc,"v(p)");
    } _StructBinder;
#undef CurrentStruct

  } out( "]"/*structs*/);
  ////////////////////////////////////////////////////////////////////
  // Done! Finalize the output...
  out("}"/*top-level wrapper*/);
  *pos = 0;
  strBuf[0] = '{'/*end of the race-condition workaround*/;
  return strBuf;

// If this file will ever be concatenated or #included with others,
// it's good practice to clean up our macros:
#undef StructBinder
#undef StructBinder_
#undef StructBinder__
#undef M
#undef _StructBinder
#undef CloseBrace
#undef out
#undef outf
#undef lenCheck
}

----------------------------------------

TITLE: Defining Request and Response Types in TypeScript
DESCRIPTION: TypeScript type definitions for the various types of requests and responses in the Hrana protocol. This defines the complete set of operations clients can request from the server.

LANGUAGE: typescript
CODE:
type Request =
    | OpenStreamReq
    | CloseStreamReq
    | ExecuteReq
    | BatchReq
    | OpenCursorReq
    | CloseCursorReq
    | FetchCursorReq
    | SequenceReq
    | DescribeReq
    | StoreSqlReq
    | CloseSqlReq
    | GetAutocommitReq

type Response =
    | OpenStreamResp
    | CloseStreamResp
    | ExecuteResp
    | BatchResp
    | OpenCursorResp
    | CloseCursorResp
    | FetchCursorResp
    | SequenceResp
    | DescribeResp
    | StoreSqlReq
    | CloseSqlReq
    | GetAutocommitResp

----------------------------------------

TITLE: Docker Compose Configuration for LibSQL Server
DESCRIPTION: A Docker Compose YAML file for setting up LibSQL server with persistent storage and proper port exposure. Suitable for local development environments.

LANGUAGE: yaml
CODE:
version: "3"
services:
  db:
    image: ghcr.io/tursodatabase/libsql-server:latest
    platform: linux/amd64
    ports:
      - "8080:8080"
      - "5001:5001"
    # environment:
    #   - SQLD_NODE=primary
    volumes:
      - ./data/libsql:/var/lib/sqld

----------------------------------------

TITLE: HTTP Pipeline Endpoint for Request Execution (JSON)
DESCRIPTION: Defines the HTTP endpoint for executing a pipeline of SQL requests using JSON format. The endpoint allows for creating or continuing a stream session using a baton token system.

LANGUAGE: http
CODE:
POST v3/pipeline
-> JSON: PipelineReqBody
<- JSON: PipelineRespBody

----------------------------------------

TITLE: Building sqld Docker Image
DESCRIPTION: Command to build a Docker image for sqld from source, tagging it as "libsql/sqld:latest".

LANGUAGE: bash
CODE:
docker build -t libsql/sqld:latest .

----------------------------------------

TITLE: Defining Core Request and Response Types in TypeScript for Hrana Protocol v2
DESCRIPTION: Type definitions showing the new request and response types introduced in Hrana protocol version 2, extending the existing types from version 1.

LANGUAGE: typescript
CODE:
type Request =
    | ...
    | SequenceReq
    | DescribeReq
    | StoreSqlReq
    | CloseSqlReq

type Response =
    | ...
    | SequenceResp
    | DescribeResp
    | StoreSqlReq
    | CloseSqlReq

----------------------------------------

TITLE: Configuring S3 Bottomless Replication with Environment Variables
DESCRIPTION: Environment variables needed to configure sqld's bottomless replication to an S3-compatible storage bucket, including bucket name, endpoint, and credentials.

LANGUAGE: bash
CODE:
LIBSQL_BOTTOMLESS_BUCKET=my-bucket                 # Default bucket name: bottomless
LIBSQL_BOTTOMLESS_ENDPOINT='http://localhost:9000' # address can be overridden for local testing, e.g. with Minio
LIBSQL_BOTTOMLESS_AWS_SECRET_ACCESS_KEY=           # regular AWS variables are used
LIBSQL_BOTTOMLESS_AWS_ACCESS_KEY_ID=               # ... to set up auth, regions, etc.
LIBSQL_BOTTOMLESS_AWS_REGION=                      # .

----------------------------------------

TITLE: HTTP Pipeline Endpoint for Request Execution (Protobuf)
DESCRIPTION: Defines the HTTP endpoint that uses Protobuf encoding for executing a pipeline of SQL requests, providing a more efficient binary alternative to the JSON endpoint.

LANGUAGE: text
CODE:
POST v3-protobuf/pipeline
-> Protobuf: PipelineReqBody
<- Protobuf: PipelineRespBody

----------------------------------------

TITLE: Creating Docker Volume for sqld Data
DESCRIPTION: Command to create a Docker volume for persisting sqld database files across container restarts.

LANGUAGE: bash
CODE:
docker volume create sqld-data

----------------------------------------

TITLE: Defining SQL Statement Types in Hrana Protocol
DESCRIPTION: Defines the TypeScript interface for SQL statements in the Hrana protocol. It specifies how to structure SQL statements with direct SQL text or SQL IDs, along with positional and named arguments.

LANGUAGE: typescript
CODE:
type Stmt = {
    "sql"?: string | null,
    "sql_id"?: int32 | null,
    "args"?: Array<Value>,
    "named_args"?: Array<NamedArg>,
    "want_rows"?: boolean,
}

type NamedArg = {
    "name": string,
    "value": Value,
}

----------------------------------------

TITLE: Execute Statement Request and Response Type Definitions
DESCRIPTION: TypeScript type definitions for executing a single SQL statement on a stream, mirroring the behavior of the WebSocket-based execute request.

LANGUAGE: typescript
CODE:
type ExecuteStreamReq = {
    "type": "execute",
    "stmt": Stmt,
}

type ExecuteStreamResp = {
    "type": "execute",
    "result": StmtResult,
}

----------------------------------------

TITLE: Defining Statement Results in Hrana Protocol
DESCRIPTION: Defines the structure for SQL statement execution results, including column metadata, rows, affected row count, and performance metrics.

LANGUAGE: typescript
CODE:
type StmtResult = {
    "cols": Array<Col>,
    "rows": Array<Array<Value>>,
    "affected_row_count": uint64,
    "last_insert_rowid": string | null,
    "rows_read": uint64,
    "rows_written": uint64,
    "query_duration_ms": double,
}

type Col = {
    "name": string | null,
    "decltype": string | null,
}

----------------------------------------

TITLE: Registering a WebAssembly Function in libSQL using SQL
DESCRIPTION: SQL command that registers a compiled WebAssembly function as a user-defined function in libSQL. The source code can be provided either as a binary .wasm blob or in WebAssembly Text format.

LANGUAGE: sql
CODE:
CREATE FUNCTION your_function LANGUAGE wasm AS <source-code>

----------------------------------------

TITLE: Running sqld Container with Persistent Storage
DESCRIPTION: Command to run sqld in a Docker container with persistent storage using a volume and exposing port 8080 locally.

LANGUAGE: bash
CODE:
docker container run \
  -d \
  --name sqld \
  -v sqld-data:/var/lib/sqld \
  -p 127.0.0.1:8080:8080 \
  libsql/sqld:latest

----------------------------------------

TITLE: Implementing xPreparedSql Virtual Table Callback in C
DESCRIPTION: Example of implementing the xPreparedSql callback for a virtual table in C. This new libSQL-specific callback allows virtual table implementations to receive the SQL string submitted for execution.

LANGUAGE: c
CODE:
static int helloPreparedSql(sqlite3_vtab_cursor *cur, const char *sql) {
    printf("Prepared SQL: %s\n", sql);
    return SQLITE_OK;
}

static sqlite3_module helloModule = {
    .iVersion     = 700,
    .xCreate      = helloCreate,
    .xConnect     = helloConnect,
    // ...
    .xPreparedSql = helloPreparedSql,
};

----------------------------------------

TITLE: Defining Client and Server Message Types in TypeScript
DESCRIPTION: TypeScript type definitions for the core client and server message structures in the Hrana protocol. These types define the foundation of the protocol's communication system.

LANGUAGE: typescript
CODE:
type ClientMsg =
    | HelloMsg
    | RequestMsg

type ServerMsg =
    | HelloOkMsg
    | HelloErrorMsg
    | ResponseOkMsg
    | ResponseErrorMsg

----------------------------------------

TITLE: Enabling WebAssembly Runtime with Configure
DESCRIPTION: Command to enable the experimental WebAssembly runtime support in libSQL during build configuration. This allows for WebAssembly-based user-defined functions.

LANGUAGE: bash
CODE:
./configure --enable-wasm-runtime

----------------------------------------

TITLE: Generating TLS Certificates for sqld Development
DESCRIPTION: Command to generate TLS keys and certificates for development and testing purposes. Creates CA certificate, primary server certificate, and replica client certificate files needed for secure communication in a sqld cluster.

LANGUAGE: console
CODE:
python scripts/gen_certs.py

----------------------------------------

TITLE: Executing SQL Statement Sequences in Hrana Protocol (TypeScript)
DESCRIPTION: Defines the request and response types for executing multiple SQL statements separated by semicolons. Either direct SQL text or a reference to stored SQL can be provided, with execution stopping at the first statement failure.

LANGUAGE: typescript
CODE:
type SequenceReq = {
    "type": "sequence",
    "stream_id": int32,
    "sql"?: string | null,
    "sql_id"?: int32 | null,
}

type SequenceResp = {
    "type": "sequence",
}

----------------------------------------

TITLE: Running libSQL with WebAssembly UDF Support in Docker
DESCRIPTION: Docker command to run a pre-configured libSQL container with WebAssembly user-defined function support enabled. This provides a ready-to-use environment for experimenting with WebAssembly functions.

LANGUAGE: bash
CODE:
docker run -it piotrsarna/libsql:libsql-0.1.0-wasm-udf ./libsql

----------------------------------------

TITLE: Defining Stream Management Types in TypeScript
DESCRIPTION: TypeScript type definitions for opening and closing streams in the Hrana protocol. These operations manage the lifecycle of SQL connections to the database.

LANGUAGE: typescript
CODE:
type OpenStreamReq = {
    "type": "open_stream",
    "stream_id": int32,
}

type OpenStreamResp = {
    "type": "open_stream",
}

type CloseStreamReq = {
    "type": "close_stream",
    "stream_id": int32,
}

type CloseStreamResp = {
    "type": "close_stream",
}

----------------------------------------

TITLE: Write Operation Flow Sequence Diagram in SQLite Server Architecture
DESCRIPTION: This sequence diagram illustrates the write operation flow in the sqld architecture. It shows how clients send SQL INSERT statements to the primary server, which then processes these writes either against its local libSQL database or through the mvSQLite backend that uses FoundationDB.

LANGUAGE: mermaid
CODE:
sequenceDiagram
    autonumber
    participant Client
    participant Primary
    participant mvSQLite
    Client->>Primary: SQL INSERT
    Server->>mvSQLite: WAL

----------------------------------------

TITLE: Running LibSQL Server on Apple Silicon with Docker
DESCRIPTION: Command to run LibSQL server on Apple Silicon machines using x86_64 emulation via the linux/amd64 platform flag.

LANGUAGE: console
CODE:
docker run --name some-sqld  -p 8080:8080 -ti \
    -e SQLD_NODE=primary \
    --platform linux/amd64 \
    ghcr.io/tursodatabase/libsql-server:latest

----------------------------------------

TITLE: Checking Autocommit State in Hrana Protocol (TypeScript)
DESCRIPTION: Defines the request and response types for checking whether a stream is in autocommit state (not inside an explicit transaction). This helps clients understand the current transaction context.

LANGUAGE: typescript
CODE:
type GetAutocommitReq = {
    "type": "get_autocommit",
    "stream_id": int32,
}

type GetAutocommitResp = {
    "type": "get_autocommit",
    "is_autocommit": bool,
}

----------------------------------------

TITLE: Creating Tables with ICU Collation Sequences in SQLite
DESCRIPTION: Example of creating a table that uses custom ICU collation sequences for text columns. This allows for locale-specific sorting of text data.

LANGUAGE: sql
CODE:
CREATE TABLE aust_turkish_penpals(
  australian_penpal_name TEXT COLLATE australian,
  turkish_penpal_name    TEXT COLLATE turkish
);

----------------------------------------

TITLE: Executing Write Operations on sqld Replica
DESCRIPTION: Curl command to create a table and insert data on a sqld replica server. Write operations sent to replicas are delegated to the primary node.

LANGUAGE: console
CODE:
curl -d '{"statements": ["CREATE TABLE IF NOT EXISTS users (username)", "INSERT INTO users VALUES (\"alice\")"]}' 127.0.0.1:8082

----------------------------------------

TITLE: Opening and Closing SQLite Database in Java
DESCRIPTION: Demonstrates how to open an in-memory SQLite database, check for errors, and properly close the database using the JNI bindings. This example shows the basic pattern for handling SQLite resources safely with proper error checking and resource cleanup.

LANGUAGE: java
CODE:
final sqlite3 db = sqlite3_open(":memory:");
try {
  final int rc = sqlite3_errcode(db);
  if( 0 != rc ){
    if( null != db ){
      System.out.print("Error opening db: "+sqlite3_errmsg(db));
    }else{
      System.out.print("Error opening db: rc="+rc);
    }
    ... handle error ...
  }
  // ... else use the db ...
}finally{
  // ALWAYS close databases using sqlite3_close() or sqlite3_close_v2()
  // when done with them. All of their active statement handles must
  // first have been passed to sqlite3_finalize().
  sqlite3_close_v2(db);
}

----------------------------------------

TITLE: SQL Sequence Execution Request and Response Type Definitions
DESCRIPTION: TypeScript type definitions for executing a sequence of SQL statements, accepting either direct SQL text or a reference to previously stored SQL via sql_id.

LANGUAGE: typescript
CODE:
type SequenceStreamReq = {
    "type": "sequence",
    "sql"?: string | null,
    "sql_id"?: int32 | null,
}

type SequenceStreamResp = {
    "type": "sequence",
}

----------------------------------------

TITLE: Launching a sqld Replica Server with TLS
DESCRIPTION: Command to start a sqld server in replica mode connecting to a primary server. The replica will listen for SQL over HTTP and connect to the primary server using gRPC with TLS.

LANGUAGE: console
CODE:
sqld \
  --http-listen-addr 127.0.0.1:8082 \
  --primary-grpc-url https://127.0.0.1:5001 \
  --primary-grpc-tls \
  --primary-grpc-ca-cert-file ca_cert.pem \
  --primary-grpc-cert-file client_cert.pem \
  --primary-grpc-key-file client_key.pem

----------------------------------------

TITLE: Configuring S3 Storage Endpoint and Bucket
DESCRIPTION: Environment variables to configure the S3 endpoint URL and bucket name for the bottomless WAL implementation.

LANGUAGE: shell
CODE:
export LIBSQL_BOTTOMLESS_ENDPOINT='http://localhost:9042'

LANGUAGE: shell
CODE:
export LIBSQL_BOTTOMLESS_BUCKET='custom-bucket'

----------------------------------------

TITLE: Testing sqld Deployment on Fly.io
DESCRIPTION: Curl commands to test a deployed sqld instance on Fly.io by creating a table, inserting data, and querying the results.

LANGUAGE: console
CODE:
curl -X POST -d '{"statements": ["create table testme(a,b,c)"]}' $YOUR_APP.fly.dev
curl -X POST -d '{"statements": ["insert into testme values(1,2,3)"]}' $YOUR_APP.fly.dev
curl -X POST -d '{"statements": ["select * from testme"]}' $YOUR_APP.fly.dev

----------------------------------------

TITLE: Compiling the sqlite3_expert Application in C
DESCRIPTION: Command for compiling the sqlite3_expert application from source code files. This combines sqlite3.c, expert.c, and sqlite3expert.c into an executable application.

LANGUAGE: bash
CODE:
gcc -O2 sqlite3.c expert.c sqlite3expert.c -o sqlite3_expert

----------------------------------------

TITLE: Batch Execution Request and Response Type Definitions
DESCRIPTION: TypeScript type definitions for executing a batch of SQL statements on a stream, mirroring the behavior of the WebSocket-based batch request.

LANGUAGE: typescript
CODE:
type BatchStreamReq = {
    "type": "batch",
    "batch": Batch,
}

type BatchStreamResp = {
    "type": "batch",
    "result": BatchResult,
}

----------------------------------------

TITLE: Running blobtest to Compare Blob Read Performance
DESCRIPTION: Example of using the blobtest tool to demonstrate the performance difference between standard blob reads and optimized reads using sqlite3_blob_reopen API. Shows significant performance improvement with the reopen method.

LANGUAGE: bash
CODE:
$> LD_LIBRARY_PATH=../.libs/ ./blobtest blob-read-simple.db read simple 1000 1000
open sqlite db at 'blob-read-simple.db'
blob table: ready to prepare
blob table: prepared
time: 3.76 micros (avg.), 1000 (count)
$> LD_LIBRARY_PATH=../.libs/ ./blobtest blob-read-reopen.db read reopen 1000 1000
open sqlite db at 'blob-read-reopen.db'
blob table: ready to prepare
blob table: prepared
time: 0.31 micros (avg.), 1000 (count)

----------------------------------------

TITLE: JSON Response from sqld Query
DESCRIPTION: Example JSON response from a sqld server when querying data. Shows the format of results returned from a SELECT query.

LANGUAGE: json
CODE:
[{"b":2,"a":1,"c":3}]

----------------------------------------

TITLE: Running sqlite3_expert with SQL Query
DESCRIPTION: Command for running the sqlite3_expert application with a single SQL query against a database named test.db.

LANGUAGE: bash
CODE:
./sqlite3_expert -sql <sql-query> test.db

----------------------------------------

TITLE: Cursor Request and Response Type Definitions in TypeScript
DESCRIPTION: TypeScript type definitions for cursor request and response bodies, used for streaming batch execution results from the server to client.

LANGUAGE: typescript
CODE:
type CursorReqBody = {
    "baton": string | null,
    "batch": Batch,
}

type CursorRespBody = {
    "baton": string | null,
    "base_url": string | null,
}

----------------------------------------

TITLE: Configuring sqld for Incremental Snapshots
DESCRIPTION: Command to configure sqld to generate incremental snapshots every 5 seconds and invoke a shell script when snapshots are generated. This helps maintain fresh data for local replicas.

LANGUAGE: console
CODE:
sqld --snapshot-exec ./snapshot.sh --max-log-duration 5

----------------------------------------

TITLE: Rust Code for Applying sqld Incremental Snapshots
DESCRIPTION: Rust application that demonstrates how to apply incremental snapshots to a local libSQL database. It uses the libsql and libsql_replication crates to synchronize frames from a snapshot file.

LANGUAGE: rust
CODE:
use libsql::Database;
use libsql_replication::{Frames, TempSnapshot};

#[tokio::main]
async fn main() {
    tracing_subscriber::fmt::init();

    let opts = libsql::Opts::with_sync();
    let db = Database::open_with_opts("test.db", opts).await.unwrap();
    let conn = db.connect().unwrap();

    let args = std::env::args().collect::<Vec<String>>();
    if args.len() < 2 {
        println!("Usage: {} <snapshot path>", args[0]);
        return;
    }
    let snapshot_path = args.get(1).unwrap();
    let snapshot = TempSnapshot::from_snapshot_file(snapshot_path.as_ref()).unwrap();

    db.sync_frames(Frames::Snapshot(snapshot)).unwrap();

    let rows = conn
        .query("SELECT * FROM sqlite_master", ())
        .unwrap()
        .unwrap();
    while let Ok(Some(row)) = rows.next() {
        println!(
            "| {:024} | {:024} | {:024} | {:024} |",
            row.get::<&str>(0).unwrap(),
            row.get::<&str>(1).unwrap(),
            row.get::<&str>(2).unwrap(),
            row.get::<&str>(3).unwrap(),
        );
    }
}

----------------------------------------

TITLE: Building sqld from Source with Cargo
DESCRIPTION: Command to build sqld from source code using Cargo, Rust's package manager and build tool.

LANGUAGE: bash
CODE:
cargo build

----------------------------------------

TITLE: Querying Data from sqld Primary Server
DESCRIPTION: Curl command to query data from a sqld primary server. This demonstrates querying the data that was written to the replica and propagated to the primary.

LANGUAGE: console
CODE:
curl -d '{"statements": ["SELECT * FROM users"]}' 127.0.0.1:8081

----------------------------------------

TITLE: Defining Cursor Entries in Hrana Protocol
DESCRIPTION: Defines the union type for cursor entries, which represent an incremental way to receive batch execution results without keeping the entire result in memory.

LANGUAGE: typescript
CODE:
type CursorEntry =
    | StepBeginEntry
    | StepEndEntry
    | StepErrorEntry
    | RowEntry
    | ErrorEntry

----------------------------------------

TITLE: Building SQLite3 JNI Bindings
DESCRIPTION: Shows command-line instructions for building the SQLite3 JNI binding. Demonstrates setting the JAVA_HOME environment variable and using make commands to build, test, and clean the project.

LANGUAGE: bash
CODE:
$ export JAVA_HOME=/path/to/jdk/root
$ make
$ make test
$ make clean

----------------------------------------

TITLE: Launching a Replica LibSQL Server Instance with Docker
DESCRIPTION: Command to run a replica LibSQL server container, connecting to a primary instance. The replica exposes port 8081 and requires the primary URL to be specified.

LANGUAGE: console
CODE:
docker run --name some-sqld-replica -p 8081:8080 -ti \
    -e SQLD_NODE=replica \
    -e SQLD_PRIMARY_URL=https://<host>:<port> \
    ghcr.io/tursodatabase/libsql-server:latest

----------------------------------------

TITLE: Pulling Official sqld Docker Image
DESCRIPTION: Command to pull the official Docker image for sqld from GitHub Container Registry. This image can be used to deploy sqld in Docker containers.

LANGUAGE: console
CODE:
docker pull ghcr.io/libsql/sqld:main

----------------------------------------

TITLE: Pipeline Request and Response Type Definitions in TypeScript
DESCRIPTION: TypeScript type definitions for pipeline request and response bodies, including stream request and result types. These structures define how multiple SQL operations can be batched and processed in a single HTTP request.

LANGUAGE: typescript
CODE:
type PipelineReqBody = {
    "baton": string | null,
    "requests": Array<StreamRequest>,
}

type PipelineRespBody = {
    "baton": string | null,
    "base_url": string | null,
    "results": Array<StreamResult>
}

type StreamResult =
    | StreamResultOk
    | StreamResultError

type StreamResultOk = {
    "type": "ok",
    "response": StreamResponse,
}

type StreamResultError = {
    "type": "error",
    "error": Error,
}

----------------------------------------

TITLE: Forking a Namespace HTTP Route
DESCRIPTION: HTTP POST route for creating a new namespace by forking an existing one, specifying both the source and target namespace names in the URL path.

LANGUAGE: HTTP
CODE:
POST /v1/namespaces/:namespace/fork/:to

----------------------------------------

TITLE: Adding Column Type and DEFAULT Value with ALTER COLUMN
DESCRIPTION: Example of modifying a column to specify its data type as TEXT and setting a default value. This operation changes the column to store text with 'hai' as the default.

LANGUAGE: sql
CODE:
ALTER TABLE t ALTER COLUMN v TO v TEXT DEFAULT 'hai';

----------------------------------------

TITLE: Example of Named Parameter Binding in JSON
DESCRIPTION: Shows how to use named parameters in queries, demonstrating how to reference parameters with different prefixes (:, @, $) and provide their values in the params object.

LANGUAGE: json
CODE:
{
    "q": "SELECT * FROM users WHERE name = :name AND age = &age AND height > @height AND address = $address",
    "params": {
        ":name": "adhoc",
        "age" : "18",
        "@height" : "170",
        "$address" : "very nice place",
    }
}

----------------------------------------

TITLE: Running Specific sqld Version with Docker
DESCRIPTION: Command to run a specific version of sqld using a versioned Docker image tag from GitHub Container Registry.

LANGUAGE: bash
CODE:
docker run -p 8080:8080 -d ghcr.io/tursodatabase/libsql-server:vX.Y.Z

----------------------------------------

TITLE: Execute SQL Sequence Request and Response Types
DESCRIPTION: Type definitions for executing a sequence of SQL statements. This has the same semantics as the sequence request in the Hrana protocol.

LANGUAGE: typescript
CODE:
type SequenceStreamReq = {
    "type": "sequence",
    "sql"?: string | null,
    "sql_id"?: int32 | null,
}

type SequenceStreamResp = {
    "type": "sequence",
}

----------------------------------------

TITLE: Value Type System in libsql Protocol
DESCRIPTION: Defines the type system for values passed to and from SQL statements. Supports null, integer, float, text, and blob types, with special handling for integers to preserve precision.

LANGUAGE: typescript
CODE:
type Value =
    | { "type": "null" }
    | { "type": "integer", "value": string }
    | { "type": "float", "value": number }
    | { "type": "text", "value": string }
    | { "type": "blob", "base64": string }

----------------------------------------

TITLE: Defining the Value Type in TypeScript
DESCRIPTION: Describes the structure of the Value type that represents SQLite values in JSON responses. It explains the five variants: Text, Integer, Real, Blob, and Null.

LANGUAGE: typescript
CODE:
type Error = {
    error: string
}

----------------------------------------

TITLE: Verifying sqld Build from Source
DESCRIPTION: Command to verify a successful build of sqld from source by displaying its help information.

LANGUAGE: bash
CODE:
./target/debug/sqld --help

----------------------------------------

TITLE: Describe Statement Request and Response Types
DESCRIPTION: Type definitions for describing an SQL statement. This has the same semantics as the describe request in the Hrana protocol.

LANGUAGE: typescript
CODE:
type DescribeStreamReq = {
    "type": "describe",
    "sql"?: string | null,
    "sql_id"?: int32 | null,
}

type DescribeStreamResp = {
    "type": "describe",
    "result": DescribeResult,
}

----------------------------------------

TITLE: Activating Emscripten Environment Variables
DESCRIPTION: Commands to set up the shell environment for using Emscripten's compiler (emcc). This needs to be run for each new shell instance that will be used for building WASM modules.

LANGUAGE: bash
CODE:
# Activate PATH and other environment variables in the current terminal:
$ source ./emsdk_env.sh

$ which emcc
/path/to/emsdk/upstream/emscripten/emcc

----------------------------------------

TITLE: Defining SQL Statement Description Request/Response in TypeScript for Hrana Protocol
DESCRIPTION: Type definitions for DescribeReq and DescribeResp which allow clients to parse and analyze SQL statements without execution, returning metadata about parameters and result columns.

LANGUAGE: typescript
CODE:
type DescribeReq = {
    "type": "describe",
    "stream_id": int32,
    "sql"?: string | null,
    "sql_id"?: int32 | null,
}

type DescribeResp = {
    "type": "describe",
    "result": DescribeResult,
}

----------------------------------------

TITLE: Building WASM Components for SQLite/libsql
DESCRIPTION: Commands for building the WebAssembly components of the SQLite/libsql project, either from the project root or from within the ext/wasm directory.

LANGUAGE: bash
CODE:
$ make fiddle

LANGUAGE: bash
CODE:
$ cd ext/wasm
$ make

----------------------------------------

TITLE: Running Tests for sqld
DESCRIPTION: Command to run the test suite for sqld using the xtask system.

LANGUAGE: console
CODE:
cargo xtask test

----------------------------------------

TITLE: Execute Statement Request and Response Types
DESCRIPTION: Type definitions for executing a single SQL statement. This has the same semantics as the execute request in the Hrana protocol.

LANGUAGE: typescript
CODE:
type ExecuteStreamReq = {
    "type": "execute",
    "stmt": Stmt,
}

type ExecuteStreamResp = {
    "type": "execute",
    "result": StmtResult,
}

----------------------------------------

TITLE: Defining Batch Results in Hrana Protocol
DESCRIPTION: Defines the structure for batch execution results, containing arrays of statement results or errors for each step in the batch.

LANGUAGE: typescript
CODE:
type BatchResult = {
    "step_results": Array<StmtResult | null>,
    "step_errors": Array<Error | null>,
}

----------------------------------------

TITLE: Serving WASM Applications with althttpd
DESCRIPTION: Command for using althttpd to serve the WASM applications with the necessary headers for SharedArrayBuffer support. This allows testing the applications in a browser.

LANGUAGE: bash
CODE:
$ cd ext/wasm
$ althttpd --enable-sab --max-age 1 --page index.html

----------------------------------------

TITLE: Improved Java-Idiomatic SQLite Collation Interface
DESCRIPTION: A redesigned Java interface for registering custom collations that follows idiomatic Java patterns. It combines the callback and state into a single class parameter for better usability.

LANGUAGE: java
CODE:
int sqlite3_create_collation(sqlite3 db, String name, int eTextRep,
                             SomeCallbackType collation);

----------------------------------------

TITLE: Defining Statement Description Result Types in TypeScript for Hrana Protocol
DESCRIPTION: Type definitions for the result structure returned by the describe operation, including statement metadata, parameter information, and column details.

LANGUAGE: typescript
CODE:
type DescribeResult = {
    "params": Array<DescribeParam>,
    "cols": Array<DescribeCol>,
    "is_explain": boolean,
    "is_readonly": boolean,
}

----------------------------------------

TITLE: Configuring Jaccwabyt in Emscripten Environment
DESCRIPTION: Example configuration of the StructBinderFactory for a conventional Emscripten setup, using Module's memory, malloc, and free functions.

LANGUAGE: javascript
CODE:
{
    heap:    Module['asm']['memory'],
    //Or:
    // heap: ()=>Module['HEAP8'],
    alloc:   (n)=>Module['_malloc'](n),
    dealloc: (m)=>Module['_free'](m)
}

----------------------------------------

TITLE: Stream Request and Response Type Definitions
DESCRIPTION: Type definitions for stream requests and responses in the HTTP API, mirroring the structure of Hrana protocol. These define the core operations that can be performed on a stream.

LANGUAGE: typescript
CODE:
type StreamRequest =
    | CloseStreamReq
    | ExecuteStreamReq
    | BatchStreamReq
    | SequenceStreamReq
    | DescribeStreamReq
    | StoreSqlStreamReq
    | CloseSqlStreamReq

type StreamResponse =
    | CloseStreamResp
    | ExecuteStreamResp
    | BatchStreamResp
    | SequenceStreamResp
    | DescribeStreamResp
    | StoreSqlStreamResp
    | CloseSqlStreamResp

----------------------------------------

TITLE: Creating a JavaScript Constructor for C Structs
DESCRIPTION: Shows how to create a JavaScript constructor function for a C struct using the MyBinder function with a struct description object.

LANGUAGE: javascript
CODE:
const MyStruct = MyBinder(myStructDescription);

----------------------------------------

TITLE: Example Usage of Java-Friendly Collation Registration
DESCRIPTION: Demonstrates how to use the redesigned collation API in Java with an anonymous class implementation. Shows how to implement the required comparison function, optional finalizer, and maintain local state in the object.

LANGUAGE: java
CODE:
int rc = sqlite3_create_collation(db, "mycollation", SQLITE_UTF8, new SomeCallbackType(){

  // Required comparison function:
  @Override public int call(byte[] lhs, byte[] rhs){ ... }

  // Optional finalizer function:
  @Override public void xDestroy(){ ... }

  // Optional local state:
  private String localState1 =
    "This is local state. There are many like it, but this one is mine.";
  private MyStateType localState2 = new MyStateType();
  ...
});

----------------------------------------

TITLE: Defining Parameter Description Type in TypeScript for Hrana Protocol
DESCRIPTION: Type definition for DescribeParam which provides metadata about SQL statement parameters, particularly their names or null for anonymous parameters.

LANGUAGE: typescript
CODE:
type DescribeParam = {
    "name": string | null,
}

----------------------------------------

TITLE: HTTP GET Endpoint for Server Version
DESCRIPTION: Documents the endpoint for retrieving the server's version information.

LANGUAGE: http
CODE:
GET /version

----------------------------------------

TITLE: StructBinderFactory Function Signature
DESCRIPTION: Defines the main factory function that creates struct binders, used for binding JavaScript to C structs.

LANGUAGE: javascript
CODE:
Function StructBinderFactory(object configOptions);

----------------------------------------

TITLE: Running sqld Tests with Cargo
DESCRIPTION: Command to run all tests for both libsql and libsql-server components using cargo xtask.

LANGUAGE: bash
CODE:
cargo xtask test

----------------------------------------

TITLE: Defining SQL Storage Request/Response in TypeScript for Hrana Protocol
DESCRIPTION: Type definitions for StoreSqlReq and StoreSqlResp which allow clients to store SQL text on the server with an assigned ID for later reuse, reducing network overhead.

LANGUAGE: typescript
CODE:
type StoreSqlReq = {
    "type": "store_sql",
    "sql_id": int32,
    "sql": string,
}

type StoreSqlResp = {
    "type": "store_sql",
}

----------------------------------------

TITLE: StructBinder Function Signature
DESCRIPTION: Shows the function signature for creating struct constructors from struct descriptions, with optional struct name parameter.

LANGUAGE: javascript
CODE:
Function StructBinder([string structName,] object structDescription)

----------------------------------------

TITLE: Generating Flamegraphs with Benchmarks for libSQL Rust API
DESCRIPTION: Configures the system for performance profiling and runs benchmarks with flamegraph generation. Disables perf event restrictions and runs benchmarks with a 5-second profile time.

LANGUAGE: console
CODE:
echo -1 | sudo tee /proc/sys/kernel/perf_event_paranoid
cargo bench --bench benchmark -- --profile-time=5

----------------------------------------

TITLE: Detailed explanation of 'mdevtest' command
DESCRIPTION: Sequence of commands that 'mdevtest' executes, showing the two build configurations tested and how tests are run for each one.

LANGUAGE: bash
CODE:
$TOP/configure --enable-all --enable-debug
make fuzztest
make testfixture
./testfixture $TOP/test/testrunner.tcl veryquick

# Then, after removing files created by the tests above:
$TOP/configure --enable-all OPTS="-O0"
make fuzztest
make testfixture
./testfixture $TOP/test/testrunner.tcl veryquick

----------------------------------------

TITLE: Building the Bottomless WAL Extension
DESCRIPTION: Commands to build the libSQL extension with bottomless WAL implementation, for both debug and release modes.

LANGUAGE: shell
CODE:
LIBSQL_DIR=/path/to/your/libsql/directory make

LANGUAGE: shell
CODE:
LIBSQL_DIR=/path/to/your/libsql/directory make release

----------------------------------------

TITLE: Defining SQL Closure Request/Response in TypeScript for Hrana Protocol
DESCRIPTION: Type definitions for CloseSqlReq and CloseSqlResp which allow clients to delete previously stored SQL text from the server, enabling ID reuse.

LANGUAGE: typescript
CODE:
type CloseSqlReq = {
    "type": "close_sql",
    "sql_id": int32,
}

type CloseSqlResp = {
    "type": "close_sql",
}

----------------------------------------

TITLE: Checking Support for Hrana v3 with JSON Encoding (HTTP)
DESCRIPTION: HTTP GET request to check if the server supports version 3 of the Hrana protocol with JSON encoding. The server should return a 2xx response if supported.

LANGUAGE: HTTP
CODE:
GET v3

----------------------------------------

TITLE: Running Default SQLite Tests with Automatic Core Detection
DESCRIPTION: Shows the basic execution of testrunner.tcl without parameters, which automatically detects and utilizes all available CPU cores. The output displays the number of jobs that will be used for test execution.

LANGUAGE: bash
CODE:
$ ./testfixture $TESTDIR/testrunner.tcl
splitting work across 16 jobs
... more output ...

----------------------------------------

TITLE: Creating a Namespace HTTP Route
DESCRIPTION: HTTP POST route for creating a new namespace with an optional dump URL parameter.

LANGUAGE: HTTP
CODE:
POST /v1/namespaces/:namespace/create

----------------------------------------

TITLE: Setting SQLite Modes and Querying JSON Data with Parameters
DESCRIPTION: Sets up SQLite modes, enables timer, sets a parameter, and performs a JSON query with the parameter. This snippet shows how to extract a specific JSON field using the -> operator and filter results based on JSON content.

LANGUAGE: sql
CODE:
.mode qbox
.timer on
.param set $label 'q87'
SELECT rowid, x->>$label FROM data1 WHERE x->>$label IS NOT NULL;

----------------------------------------

TITLE: Running the 'full' test suite with testrunner.tcl
DESCRIPTION: Command to run the 'full' test suite, which includes all Tcl test scripts that can be found in the source tree.

LANGUAGE: bash
CODE:
./testfixture $TESTDIR/testrunner.tcl full

----------------------------------------

TITLE: Checking Support for Hrana v3 with Protobuf Encoding (HTTP)
DESCRIPTION: HTTP GET request to check if the server supports version 3 of the Hrana protocol with Protobuf encoding. The server should return a 2xx response if supported.

LANGUAGE: text
CODE:
GET v3-protobuf

----------------------------------------

TITLE: Running a subset of tests matching a pattern
DESCRIPTION: Commands to run a subset of the 'full' test suite where the test file names match a specified pattern. The example shows running all tests starting with 'fts5'.

LANGUAGE: bash
CODE:
./testfixture $TESTDIR/testrunner.tcl fts5%
./testfixture $TESTDIR/testrunner.tcl 'fts5*'

----------------------------------------

TITLE: Snapshot Handler Script for sqld Incremental Snapshots
DESCRIPTION: Shell script that handles incremental snapshot generation notifications from sqld. The script receives the snapshot file path and namespace as arguments and must remove the snapshot file after processing.

LANGUAGE: bash
CODE:
#!/bin/bash

SNAPSHOT_FILE="$1"
NAMESPACE="$2"

echo "Generated incremental snapshot $SNAPSHOT_FILE for namespace $NAMESPACE"

# At this point we can ship the snapshot file to wherever we would like but we
# must delete it from its location on disk or else sqld will panic.
rm $SNAPSHOT_FILE

----------------------------------------

TITLE: Configuring SQLite Environment and Querying JSON Data
DESCRIPTION: Sets up the SQLite environment with qbox mode, timer on, and a parameter, then performs a query to extract JSON data using the arrow operator.

LANGUAGE: sql
CODE:
.mode qbox
.timer on
.param set $label 'q87'
SELECT rowid, x->>$label FROM data1 WHERE x->>$label IS NOT NULL;

----------------------------------------

TITLE: HTTP Cursor Endpoint for Streaming Results (JSON)
DESCRIPTION: Defines the HTTP endpoint for executing batches of SQL statements using a cursor approach, allowing results to be streamed from server to client in JSON format.

LANGUAGE: http
CODE:
POST v3/cursor
-> JSON: CursorReqBody
<- line of JSON: CursorRespBody
   lines of JSON: CursorEntry

----------------------------------------

TITLE: Running 'all' tests (full tests plus permutations)
DESCRIPTION: Command to run 'all' tests, which includes the full test set plus a dozen or so permutations defined in testrunner_data.tcl.

LANGUAGE: bash
CODE:
./testfixture $TESTDIR/testrunner.tcl all

----------------------------------------

TITLE: Running a test with a specific permutation
DESCRIPTION: Command to run a specific test script with a particular permutation. This is needed when a test fails as part of a permutation test.

LANGUAGE: bash
CODE:
./testfixture $TESTDIR/testrunner.tcl $PERMUTATION $PATH_TO_SCRIPT

----------------------------------------

TITLE: Converting JSON to JSONB Format
DESCRIPTION: SQL commands to convert standard JSON content to JSONB format within an SQLite database and optimize storage with VACUUM.

LANGUAGE: sql
CODE:
UPDATE data1 SET x=jsonb(x);
VACUUM;

----------------------------------------

TITLE: Running the 'veryquick' test set with testrunner.tcl
DESCRIPTION: Commands to run the 'veryquick' test set, which is a subset of all Tcl test scripts that excludes very slow tests. The two commands shown are equivalent.

LANGUAGE: bash
CODE:
./testfixture $TESTDIR/testrunner.tcl
./testfixture $TESTDIR/testrunner.tcl veryquick

----------------------------------------

TITLE: Instantiating and Using a C Struct in JavaScript
DESCRIPTION: Demonstrates instantiating a C struct in JavaScript and accessing its members. Shows basic property access and how to properly dispose of the struct when finished.

LANGUAGE: javascript
CODE:
const my = new MyStruct();

----------------------------------------

TITLE: Running 'sdevtest' for sanitizer testing
DESCRIPTION: Command to run 'sdevtest', which is similar to 'mdevtest' but includes a sanitizer build with OPTS="-fsanitize=address,undefined".

LANGUAGE: bash
CODE:
tclsh $TESTDIR/testrunner.tcl sdevtest

----------------------------------------

TITLE: Running ZipVFS tests with testrunner.tcl
DESCRIPTION: Command to run tests from the ZipVFS project using testrunner.tcl. This builds a zipvfs-enabled testfixture and uses it to run ZipVFS tests.

LANGUAGE: bash
CODE:
tclsh $TESTDIR/testrunner.tcl --zipvfs $PATH_TO_ZIPVFS

----------------------------------------

TITLE: Measuring JSON Parsing Speed
DESCRIPTION: SQL script to benchmark JSON parsing speed by repeatedly validating the test data. The MB/s processing rate can be calculated by dividing 2500 by the elapsed time.

LANGUAGE: sql
CODE:
.open json100mb.db
.timer on
WITH RECURSIVE c(n) AS (VALUES(1) UNION ALL SELECT n+1 FROM c WHERE n<25)
SELECT sum(json_valid(x)) FROM c, data1;

----------------------------------------

TITLE: Creating a Struct Instance in JavaScript
DESCRIPTION: Demonstrates how to create a new instance of a struct type using a constructor returned from StructBinder. This basic usage creates a struct with automatically managed memory.

LANGUAGE: javascript
CODE:
const x = new MyStruct;

----------------------------------------

TITLE: Creating and Populating a Temporary Table with Complex JSON Data
DESCRIPTION: Creates a temporary table with a JSON TEXT column and populates it with nested JSON data using recursive common table expressions. Generates 25,000 records with random values and complex JSON objects containing arrays.

LANGUAGE: sql
CODE:
CREATE TEMP TABLE t2(x JSON TEXT);
WITH RECURSIVE
  c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<25000),
  array1(y) AS (
    SELECT json_group_array(
             json_object('x',x,'y',random(),'z',hex(randomblob(50)))
           )
      FROM c
  ),
  c2(n) AS (VALUES(1) UNION ALL SELECT n+1 FROM c2 WHERE n<5)
INSERT INTO t2(x)
  SELECT json_object('a',n,'b',n*2,'c',y,'d',3,'e',5,'f',6) FROM array1, c2;

----------------------------------------

TITLE: Running both SQLite and ZipVFS tests
DESCRIPTION: Command to test both SQLite and ZipVFS with a single command, combining the --zipvfs option with standard test suites like 'mdevtest'.

LANGUAGE: bash
CODE:
tclsh $TESTDIR/testrunner.tcl --zipvfs $PATH_TO_ZIPVFS mdevtest

----------------------------------------

TITLE: Create Namespace Request Body Format
DESCRIPTION: JSON format for the request body when creating a namespace, containing an optional dump_url parameter.

LANGUAGE: json
CODE:
{
    "dump_url"?: string,
}

----------------------------------------

TITLE: Creating JSON Indexes and Updating JSON Data
DESCRIPTION: Creates indexes on specific JSON fields to optimize queries, then demonstrates JSON manipulation functions. Updates JSON data using json_replace, json_set, and json_remove to modify and remove fields within the JSON structure.

LANGUAGE: sql
CODE:
CREATE INDEX t2x1 ON t2(x->>'a');
CREATE INDEX t2x2 ON t2(x->>'b');
CREATE INDEX t2x3 ON t2(x->>'e');
CREATE INDEX t2x4 ON t2(x->>'f');
UPDATE t2 SET x=json_replace(x,'$.f',(x->>'f')+1);
UPDATE t2 SET x=json_set(x,'$.e',(x->>'f')-1);
UPDATE t2 SET x=json_remove(x,'$.d');

----------------------------------------

TITLE: Querying Non-Overlapping Polygons in SQL
DESCRIPTION: Demonstrates how to find polygons that do not overlap with the query polygon using NOT geopoly_overlap. Includes EXPLAIN QUERY PLAN and SVG visualization of the results.

LANGUAGE: sql
CODE:
.print '<h1>Not Overlap Query</h1>'
.print '<pre>'
.print 'SELECT *'
.print '  FROM geo1, querypoly'
.print ' WHERE NOT geopoly_overlap(_shape, poly);'
.print 
EXPLAIN QUERY PLAN
SELECT geopoly_svg(_shape,
         printf('style="fill:none;stroke:%s;stroke-width:1"',geo1.clr)
       )
  FROM geo1, querypoly
 WHERE NOT geopoly_overlap(_shape, poly);
.print '</pre>'
.print '<svg width="1000" height="800" style="border:1px solid black">'
SELECT geopoly_svg(_shape,
         printf('style="fill:none;stroke:%s;stroke-width:1"',geo1.clr)
       )
  FROM geo1, querypoly
 WHERE NOT geopoly_overlap(_shape, poly);
SELECT geopoly_svg(poly, 
         printf('style="fill:%s;fill-opacity:0.5;"',clr)
       )
  FROM querypoly;
.print '</svg>'

----------------------------------------

TITLE: Running Baseline JSON Performance Test
DESCRIPTION: Shell command to execute the performance test script against the trunk version for standard JSON processing.

LANGUAGE: sh
CODE:
sh json-speed-check.sh trunk

----------------------------------------

TITLE: Performing Dry Run of SQLite Tests
DESCRIPTION: Demonstrates using the --dryrun option with testrunner.tcl to log the shell commands that would be executed without actually building binaries or running tests. This is useful for test debugging and validation.

LANGUAGE: bash
CODE:
# Log the shell commmands that make up the mdevtest test.
tclsh $TESTDIR/testrunner.tcl --dryrun mdevtest

----------------------------------------

TITLE: Deleting a Namespace HTTP Route
DESCRIPTION: HTTP DELETE route for removing an existing namespace by specifying the namespace name in the URL path.

LANGUAGE: HTTP
CODE:
DELETE /v1/namespaces/:namespace

----------------------------------------

TITLE: Visualizing Polygon Overlap After Translation in SQL
DESCRIPTION: Updates the query polygon with a translation transformation and visualizes the overlap between geo1 shapes and the translated query polygon. Only shapes that overlap with the query polygon are displayed in the SVG output.

LANGUAGE: sql
CODE:
.print '<h1>Overlap With Translated Query Polygon</h1>'
UPDATE querypoly SET poly=geopoly_xform(poly,1,0,0,1,300,0);
.print '<svg width="1000" height="800" style="border:1px solid black">'
SELECT geopoly_svg(_shape,
         printf('style="fill:none;stroke:%s;stroke-width:1"',geo1.clr)
       )
  FROM geo1
 WHERE geopoly_overlap(_shape,(SELECT poly FROM querypoly));
SELECT geopoly_svg(poly,'style="fill:none;stroke:black;stroke-width:2"')
  FROM querypoly;
ROLLBACK;
.print '</svg>'

----------------------------------------

TITLE: Running Baseline JSONB Performance Test
DESCRIPTION: Shell command to execute the performance test script against the trunk version with the JSONB flag enabled.

LANGUAGE: sh
CODE:
sh json-speed-check.sh trunk --jsonb

----------------------------------------

TITLE: Specifying Job Count for SQLite Test Execution
DESCRIPTION: Demonstrates how to override the default job count using the --jobs or -j option when running testrunner.tcl. This allows controlling the level of parallelism during test execution.

LANGUAGE: bash
CODE:
$ ./testfixture $TESTDIR/testrunner.tcl --jobs 8
splitting work across 8 jobs
... more output ...

----------------------------------------

TITLE: Persisting LibSQL Database with Named Volume
DESCRIPTION: Command to run LibSQL server with a named Docker volume for data persistence, which is managed by Docker and can be easily backed up.

LANGUAGE: console
CODE:
docker run --name some-sqld -ti \
    -v sqld-data:/var/lib/sqld \ # or create named volume
    -e SQLD_NODE=primary \
    ghcr.io/tursodatabase/libsql-server:latest

----------------------------------------

TITLE: Running Custom JSON Performance Test
DESCRIPTION: Shell command to run the JSON performance test script with a custom label for comparing different implementations.

LANGUAGE: sh
CODE:
sh json-speed-check.sh x1

----------------------------------------

TITLE: Creating a Database Namespace in sqld
DESCRIPTION: Curl command to create a new database namespace using the sqld admin API. In a multi-tenant environment, this allows for multiple databases to be hosted by a single sqld instance.

LANGUAGE: console
CODE:
curl -X POST http://localhost:8080/v1/namespaces/db1/create

----------------------------------------

TITLE: Running Custom JSONB Performance Test
DESCRIPTION: Shell command to run the JSONB performance test script with a custom label for comparing different implementations.

LANGUAGE: sh
CODE:
sh json-speed-check.sh x1 --jsonb

----------------------------------------

TITLE: Creating a Feature Branch in Git for libsql Contributions
DESCRIPTION: Command for creating a new Git branch for feature development or bug fixes when contributing to libsql. This is the first step after forking and cloning the repository.

LANGUAGE: bash
CODE:
git checkout -b feature-name

----------------------------------------

TITLE: Persisting LibSQL Database with Local Path Mounting
DESCRIPTION: Command to run LibSQL server with a bind mount to persist database files in the current directory. This ensures data survives container restarts.

LANGUAGE: console
CODE:
docker run --name some-sqld -ti \
    -v $(pwd)/sqld-data:/var/lib/sqld \ # you can mount local path
    -e SQLD_NODE=primary \
    ghcr.io/tursodatabase/libsql-server:latest

----------------------------------------

TITLE: Defining Column Description in Hrana Protocol
DESCRIPTION: Defines the structure for column descriptions, providing information about column names and their declared types.

LANGUAGE: typescript
CODE:
type DescribeCol = {
    "name": string,
    "decltype": string | null,
}

----------------------------------------

TITLE: Building SQLite Source Files
DESCRIPTION: Shell command to clean previous builds and create the baseline SQLite source files needed for testing.

LANGUAGE: sh
CODE:
make clean sqlite3.c

----------------------------------------

TITLE: Pushing Changes to Forked Repository in Git
DESCRIPTION: Command for pushing local changes to a forked repository on GitHub after making code modifications. This step is necessary before creating a pull request to the main libsql repository.

LANGUAGE: bash
CODE:
git push origin feature-name

----------------------------------------

TITLE: Installing sqld via Homebrew
DESCRIPTION: Command to install sqld using Homebrew after adding the tap, which builds and installs the binary into your Homebrew prefix directory.

LANGUAGE: bash
CODE:
brew install sqld

----------------------------------------

TITLE: Creating a 100MB JSON Database
DESCRIPTION: Command to generate a 100MB test database for JSON performance testing by piping the output of a Tcl script into SQLite.

LANGUAGE: sh
CODE:
tclsh json-generator.tcl | sqlite3 json100mb.db

----------------------------------------

TITLE: Hrana WebSocket Protocol Definition in Protobuf
DESCRIPTION: Defines the message formats for the Hrana protocol over WebSocket connections. Includes client-server message structures, request-response patterns, and operations for streams, cursors, SQL execution, and transaction management.

LANGUAGE: proto
CODE:
syntax = "proto3";
package hrana.ws;

message ClientMsg {
  oneof msg {
    HelloMsg hello = 1;
    RequestMsg request = 2;
  }
}

message ServerMsg {
  oneof msg {
    HelloOkMsg hello_ok = 1;
    HelloErrorMsg hello_error = 2;
    ResponseOkMsg response_ok = 3;
    ResponseErrorMsg response_error = 4;
  }
}

message HelloMsg {
  optional string jwt = 1;
}

message HelloOkMsg {
}

message HelloErrorMsg {
  Error error = 1;
}

message RequestMsg {
  int32 request_id = 1;
  oneof request {
    OpenStreamReq open_stream = 2;
    CloseStreamReq close_stream = 3;
    ExecuteReq execute = 4;
    BatchReq batch = 5;
    OpenCursorReq open_cursor = 6;
    CloseCursorReq close_cursor = 7;
    FetchCursorReq fetch_cursor = 8;
    SequenceReq sequence = 9;
    DescribeReq describe = 10;
    StoreSqlReq store_sql = 11;
    CloseSqlReq close_sql = 12;
    GetAutocommitReq get_autocommit = 13;
  }
}

message ResponseOkMsg {
  int32 request_id = 1;
  oneof response {
    OpenStreamResp open_stream = 2;
    CloseStreamResp close_stream = 3;
    ExecuteResp execute = 4;
    BatchResp batch = 5;
    OpenCursorResp open_cursor = 6;
    CloseCursorResp close_cursor = 7;
    FetchCursorResp fetch_cursor = 8;
    SequenceResp sequence = 9;
    DescribeResp describe = 10;
    StoreSqlResp store_sql = 11;
    CloseSqlResp close_sql = 12;
    GetAutocommitResp get_autocommit = 13;
  }
}

message ResponseErrorMsg {
  int32 request_id = 1;
  Error error = 2;
}

message OpenStreamReq {
  int32 stream_id = 1;
}

message OpenStreamResp {
}

message CloseStreamReq {
  int32 stream_id = 1;
}

message CloseStreamResp {
}

message ExecuteReq {
  int32 stream_id = 1;
  Stmt stmt = 2;
}

message ExecuteResp {
  StmtResult result = 1;
}

message BatchReq {
  int32 stream_id = 1;
  Batch batch = 2;
}

message BatchResp {
  BatchResult result = 1;
}

message OpenCursorReq {
  int32 stream_id = 1;
  int32 cursor_id = 2;
  Batch batch = 3;
}

message OpenCursorResp {
}

message CloseCursorReq {
  int32 cursor_id = 1;
}

message CloseCursorResp {
}

message FetchCursorReq {
  int32 cursor_id = 1;
  uint32 max_count = 2;
}

message FetchCursorResp {
  repeated CursorEntry entries = 1;
  bool done = 2;
}

message StoreSqlReq {
  int32 sql_id = 1;
  string sql = 2;
}

message StoreSqlResp {
}

message CloseSqlReq {
  int32 sql_id = 1;
}

message CloseSqlResp {
}

message SequenceReq {
  int32 stream_id = 1;
  optional string sql = 2;
  optional int32 sql_id = 3;
}

message SequenceResp {
}

message DescribeReq {
  int32 stream_id = 1;
  optional string sql = 2;
  optional int32 sql_id = 3;
}

message DescribeResp {
  DescribeResult result = 1;
}

message GetAutocommitReq {
  int32 stream_id = 1;
}

message GetAutocommitResp {
  bool is_autocommit = 1;
}

----------------------------------------

TITLE: Restoring Database from Bottomless WAL
DESCRIPTION: Example of using the bottomless-cli to restore a database from the most recent generation in S3 storage.

LANGUAGE: console
CODE:
$ RUST_LOG=info bottomless-cli -e http://localhost:9000 restore
2022-12-23T10:16:10.703557Z  INFO bottomless::replicator: Bucket bottomless exists and is accessible
2022-12-23T10:16:10.709526Z  INFO bottomless_cli: Database: test.db
2022-12-23T10:16:10.713070Z  INFO bottomless::replicator: Restoring from generation e4eb3c29-fe84-7347-a0c0-b9a3a71d0fc2
2022-12-23T10:16:10.727646Z  INFO bottomless::replicator: Restored the main database file

----------------------------------------

TITLE: Implementing Custom Collation Functions in C for SQLite
DESCRIPTION: The original C API for SQLite's custom collation registration, showing both the standard function and the v2 version with a destroy callback. These functions allow registering custom string comparison functions for use in SQL queries.

LANGUAGE: c
CODE:
// C:
int sqlite3_create_collation(sqlite3 * db, const char * name, int eTextRep,
                             void *pUserData,
                             int (*xCompare)(void*,int,void const *,int,void const *));

int sqlite3_create_collation_v2(sqlite3 * db, const char * name, int eTextRep,
                                void *pUserData,
                                int (*xCompare)(void*,int,void const *,int,void const *),
                                void (*xDestroy)(void*));

----------------------------------------

TITLE: Adding libsql/sqld Tap to Homebrew
DESCRIPTION: Command to add the libsql/sqld tap to Homebrew, which is necessary before installing sqld via Homebrew.

LANGUAGE: bash
CODE:
brew tap libsql/sqld

----------------------------------------

TITLE: Get Autocommit State Request and Response Type Definitions
DESCRIPTION: TypeScript type definitions for checking the current autocommit state of a database connection, determining whether transactions are automatically committed.

LANGUAGE: typescript
CODE:
type GetAutocommitStreamReq = {
    "type": "get_autocommit",
}

type GetAutocommitStreamResp = {
    "type": "get_autocommit",
    "is_autocommit": bool,
}

----------------------------------------

TITLE: Using Bottomless WAL in libSQL Shell
DESCRIPTION: SQL commands to load the bottomless extension, open a database with bottomless WAL, and set the journal mode to WAL.

LANGUAGE: sql
CODE:
.load ../target/debug/bottomless
.open file:test.db?wal=bottomless
PRAGMA journal_mode=wal;

----------------------------------------

TITLE: Direct Java Binding for SQLite Collation (Awkward Implementation)
DESCRIPTION: A direct translation of the C collation API to Java, preserving the separate callback and user data parameters. This implementation is described as awkward for Java use since it doesn't align with Java's object-oriented paradigm.

LANGUAGE: java
CODE:
// Java:
int sqlite3_create_collation(sqlite3 db, String name, int eTextRep,
                             Object pUserData, xCompareType xCompare);

int sqlite3_create_collation_v2(sqlite3 db, String name, int eTextRep,
                                Object pUserData,
                                xCompareType xCompare, xDestroyType xDestroy);

----------------------------------------

TITLE: Connecting to sqld with Turso CLI
DESCRIPTION: Command to connect to a running sqld instance using the Turso CLI, which allows you to interact with the database through a shell interface.

LANGUAGE: console
CODE:
turso db shell http://127.0.0.1:8080

----------------------------------------

TITLE: Running Benchmarks for libSQL Rust API
DESCRIPTION: Executes performance benchmarks for the libSQL Rust API using Cargo's benchmark tools.

LANGUAGE: sh
CODE:
cargo bench

----------------------------------------

TITLE: Checking Support for HTTP API v2
DESCRIPTION: A simple GET request to determine if the server supports version 2 of the HTTP API. This serves as a crude version negotiation mechanism.

LANGUAGE: typescript
CODE:
GET /v2

----------------------------------------

TITLE: Setting Environment Variables for libSQL Rust API
DESCRIPTION: Sets the LIBSQL_STATIC_LIB_DIR environment variable to the current directory's .libs folder. This tells the build system where to find the libSQL static libraries.

LANGUAGE: sh
CODE:
export LIBSQL_STATIC_LIB_DIR=$(pwd)/../../.libs

----------------------------------------

TITLE: Format Specification for x-libsql-client-version Header
DESCRIPTION: Defines the format patterns that should be used for the x-libsql-client-version HTTP header. Remote clients and embedded replica clients each have their own format, with both needing to include language and version information.

LANGUAGE: markdown
CODE:
- Hrana/Remote clients should be `libsql-remote-<language>-<version>`
- Embedded replica clients should be `libsql-rpc-<language>-<version>`

----------------------------------------

TITLE: Building the libSQL Rust API
DESCRIPTION: Builds the libSQL Rust API using Cargo, Rust's package manager and build system.

LANGUAGE: sh
CODE:
cargo build

----------------------------------------

TITLE: Close Stream Request and Response Types
DESCRIPTION: Type definitions for closing a stream. After this request, any further requests on the same stream will result in an error.

LANGUAGE: typescript
CODE:
type CloseStreamReq = {
    "type": "close",
}

type CloseStreamResp = {
    "type": "close",
}

----------------------------------------

TITLE: Running sqld with S3 Bottomless Replication
DESCRIPTION: Command to run sqld with HTTP listener on 127.0.0.1:8000 and enabled bottomless replication to S3-compatible storage.

LANGUAGE: bash
CODE:
sqld --http-listen-addr=127.0.0.1:8000 --enable-bottomless-replication

----------------------------------------

TITLE: Server Architecture Class Diagram for Tower-based Service Design
DESCRIPTION: This class diagram shows the simplified architecture of the sqld server using the service design pattern with Tower middleware. It illustrates the relationship between Server, PgConnectionFactory, and SchedulerService components, demonstrating how services are isolated and composable.

LANGUAGE: mermaid
CODE:
classDiagram
    Server --|> PgConnectionFactory
    PgConnectionFactory --|> SchedulerService

    class Server {
    }

    class PgConnectionFactory {
    }

    class SchedulerService {
    }

----------------------------------------

TITLE: Running Tests for libSQL Rust API
DESCRIPTION: Executes the test suite for the libSQL Rust API using Cargo's test runner.

LANGUAGE: sh
CODE:
cargo test

----------------------------------------

TITLE: Setting up Database Schema for Performance Testing
DESCRIPTION: Command to create the necessary database schema for performance testing by importing the pgbench schema SQL file into a local PostgreSQL instance.

LANGUAGE: console
CODE:
psql -h 127.0.0.1 -p 5432 < pg_bench_schema.sql

----------------------------------------

TITLE: Execute Batch Request and Response Types
DESCRIPTION: Type definitions for executing a batch of SQL statements. This has the same semantics as the batch request in the Hrana protocol.

LANGUAGE: typescript
CODE:
type BatchStreamReq = {
    "type": "batch",
    "batch": Batch,
}

type BatchStreamResp = {
    "type": "batch",
    "result": BatchResult,
}

----------------------------------------

TITLE: Building and Running benchtest with Bruteforce Workload
DESCRIPTION: Instructions for building liblibsql.so and then running the benchtest tool with a bruteforce workload. The example shows creating a table with 1000 vector embeddings and searching using cosine distance.

LANGUAGE: bash
CODE:
$> basename $(pwd)
libsql-sqlite3
$> make # this command will generate libs in the .libs directory
$> cd benchmark
$> make bruteforce
open queries file at bruteforce.sql
open sqlite db at 'test.db'
executed simple statement: 'PRAGMA journal_mode=WAL;'
executed simple statement: 'CREATE TABLE x ( id INTEGER PRIMARY KEY, embedding FLOAT32(64) );'
prepared statement: 'INSERT INTO x VALUES (?, vector(?));'
inserts (bruteforce.sql):
  insert: 46.27 micros (avg.), 1000 (count)
  size  : 0.2695 MB
  reads : 1.00 (avg.), 1000 (total)
  writes: 1.00 (avg.), 1000 (total)
prepared statement: 'SELECT id FROM x ORDER BY vector_distance_cos(embedding, vector(?)) LIMIT ?;'
search (bruteforce.sql):
  select: 329.32 micros (avg.), 1000 (count)
  size  : 0.2695 MB
  reads : 2000.00 (avg.), 2000000 (total)

----------------------------------------

TITLE: Executing Requests on a Stream with Pipeline Endpoint
DESCRIPTION: The pipeline endpoint allows executing multiple requests on a stream. It uses batons to maintain stream state between requests and can include multiple stream operations in a single HTTP request.

LANGUAGE: typescript
CODE:
POST /v2/pipeline

-> {
    "baton": string | null,
    "requests": Array<StreamRequest>,
}

<- {
    "baton": string | null,
    "base_url": string | null,
    "results": Array<StreamResult>
}

type StreamResult =
    | StreamResultOk
    | StreamResultError

type StreamResultOk = {
    "type": "ok",
    "response": StreamResponse,
}

type StreamResultError = {
    "type": "error",
    "error": Error,
}

----------------------------------------

TITLE: Querying Polygons Not Contained Within Another Polygon in SQL
DESCRIPTION: Shows how to find polygons that are not completely contained within the query polygon using NOT geopoly_within. Includes EXPLAIN QUERY PLAN and SVG visualization.

LANGUAGE: sql
CODE:
.print '<h1>Not Within Query</h1>'
.print '<pre>'
.print 'SELECT *'
.print '  FROM geo1, querypoly'
.print ' WHERE NOT geopoly_within(_shape, poly);'
.print 
EXPLAIN QUERY PLAN
SELECT geopoly_svg(_shape,
         printf('style="fill:none;stroke:%s;stroke-width:1"',geo1.clr)
       )
  FROM geo1, querypoly
 WHERE NOT geopoly_within(_shape, poly);
.print '</pre>'
.print '<svg width="1000" height="800" style="border:1px solid black">'
SELECT geopoly_svg(_shape,
         printf('style="fill:none;stroke:%s;stroke-width:1"',geo1.clr)
       )
  FROM geo1, querypoly
 WHERE NOT geopoly_within(_shape, poly);
SELECT geopoly_svg(poly, 
         printf('style="fill:%s;fill-opacity:0.5;"',clr)
       )
  FROM querypoly;
.print '</svg>'

----------------------------------------

TITLE: Defining Error Message Structure in TypeScript
DESCRIPTION: Type definition for error messages in the Hrana protocol. This structure provides both human-readable error messages and machine-readable error codes.

LANGUAGE: typescript
CODE:
type Error = {
    "message": string,
    "code"?: string | null,
}

----------------------------------------

TITLE: Visualizing Polygon Overlap with Bounding Boxes in SQL
DESCRIPTION: Creates an SVG visualization showing overlapping polygons along with their bounding boxes. Uses geopoly_bbox and geopoly_group_bbox functions to generate and display bounding rectangles.

LANGUAGE: sql
CODE:
.print '<h1>Overlap Query And Result Bounding Box</h1>'
.print '<svg width="1000" height="800" style="border:1px solid black">'
SELECT geopoly_svg(_shape,
         printf('style="fill:none;stroke:%s;stroke-width:1"',geo1.clr)
       )
  FROM geo1, querypoly
 WHERE geopoly_overlap(_shape, poly);
SELECT geopoly_svg(geopoly_bbox(poly),
         'style="fill:none;stroke:black;stroke-width:3"'
       )
  FROM querypoly;
SELECT geopoly_svg(poly, 
         printf('style="fill:%s;fill-opacity:0.5;"',clr)
       )
  FROM querypoly;
SELECT geopoly_svg(geopoly_group_bbox(_shape),
         'style="fill:none;stroke:red;stroke-width:3"'
       )
  FROM geo1, querypoly
 WHERE geopoly_overlap(_shape, poly);
.print '</svg>'

----------------------------------------

TITLE: Store SQL Text Request and Response Types
DESCRIPTION: Type definitions for storing an SQL text on the server. Unlike Hrana, the scope of the SQL texts is limited to a single stream rather than the whole connection.

LANGUAGE: typescript
CODE:
type StoreSqlStreamReq = {
    "type": "store_sql",
    "sql_id": int32,
    "sql": string,
}

type StoreSqlStreamResp = {
    "type": "store_sql",
}

----------------------------------------

TITLE: Changing Polygon Colors Based on Overlap Status in SQL
DESCRIPTION: Demonstrates updating polygon colors conditionally based on whether they overlap with the query polygon. Uses a transaction to make temporary changes and visualizes the results.

LANGUAGE: sql
CODE:
.print '<h1>Color-Change For Overlapping Elements</h1>'
BEGIN;
UPDATE geo1
   SET clr=CASE WHEN rowid IN (SELECT geo1.rowid FROM geo1, querypoly
                                WHERE geopoly_overlap(_shape,poly))
           THEN 'red' ELSE 'blue' END;
.print '<svg width="1000" height="800" style="border:1px solid black">'
SELECT geopoly_svg(_shape,
         printf('style="fill:none;stroke:%s;stroke-width:1"',geo1.clr)
       )
  FROM geo1;
SELECT geopoly_svg(poly,'style="fill:none;stroke:black;stroke-width:2"')
  FROM querypoly;
ROLLBACK;
.print '</svg>'

----------------------------------------

TITLE: Generating HTML/SVG Visualization for All Polygons in SQL
DESCRIPTION: Generates HTML and SVG code to visualize all polygons stored in the geo1 table and the query polygon. The SVG visualization includes styling for each polygon based on its color attribute.

LANGUAGE: sql
CODE:
/* Generate the HTML */
.print '<html>'
.print '<h1>Everything</h1>'
.print '<svg width="1000" height="800" style="border:1px solid black">'
SELECT geopoly_svg(_shape, 
         printf('style="fill:none;stroke:%s;stroke-width:1"',clr)
       )
  FROM geo1;
SELECT geopoly_svg(poly, 
         printf('style="fill:%s;fill-opacity:0.5;"',clr)
       )
  FROM querypoly;
.print '</svg>'

----------------------------------------

TITLE: Defining Stream Management Types in TypeScript
DESCRIPTION: Type definitions for opening and closing SQL streams in the Hrana protocol. These operations manage the lifecycle of execution contexts for SQL statements.

LANGUAGE: typescript
CODE:
type OpenStreamReq = {
    "type": "open_stream",
    "stream_id": int32,
}

type OpenStreamResp = {
    "type": "open_stream",
}

LANGUAGE: typescript
CODE:
type CloseStreamReq = {
    "type": "close_stream",
    "stream_id": int32,
}

type CloseStreamResp = {
    "type": "close_stream",
}

----------------------------------------

TITLE: Querying Polygon Overlap with SVG Visualization in SQL
DESCRIPTION: Demonstrates how to query for polygons that overlap with a query polygon, including displaying the EXPLAIN QUERY PLAN results. The results are visualized using SVG with appropriate styling.

LANGUAGE: sql
CODE:
.print '<h1>Overlap Query</h1>'
.print '<pre>'
.print 'SELECT *'
.print '  FROM geo1, querypoly'
.print ' WHERE geopoly_overlap(_shape, poly);'
.print 
EXPLAIN QUERY PLAN
SELECT geopoly_svg(_shape,
         printf('style="fill:none;stroke:%s;stroke-width:1"',geo1.clr)
       )
  FROM geo1, querypoly
 WHERE geopoly_overlap(_shape, poly);
.print '</pre>'
.print '<svg width="1000" height="800" style="border:1px solid black">'
SELECT geopoly_svg(_shape,
         printf('style="fill:none;stroke:%s;stroke-width:1"',geo1.clr)
       )
  FROM geo1, querypoly
 WHERE geopoly_overlap(_shape, poly);
SELECT geopoly_svg(poly, 
         printf('style="fill:%s;fill-opacity:0.5;"',clr)
       )
  FROM querypoly;
.print '</svg>'

----------------------------------------

TITLE: Defining Request-Response Message Types in TypeScript
DESCRIPTION: Type definitions for the core request-response communication pattern in Hrana. These types facilitate operations on SQL streams after authentication is complete.

LANGUAGE: typescript
CODE:
type RequestMsg = {
    "type": "request",
    "request_id": int32,
    "request": Request,
}

LANGUAGE: typescript
CODE:
type ResponseOkMsg = {
    "type": "response_ok",
    "request_id": int32,
    "response": Response,
}

type ResponseErrorMsg = {
    "type": "response_error",
    "request_id": int32,
    "error": Error,
}

----------------------------------------

TITLE: Starting Transaction for Color Change and Moving Overlapping Elements in SQL
DESCRIPTION: Begins a transaction to change colors and move polygons that overlap with the query polygon. This snippet is incomplete as it ends mid-statement.

LANGUAGE: sql
CODE:
.print '<h1>Color-Change And Move Overlapping Elements</h1>'
BEGIN;
UPDATE geo1
   SET clr=CASE WHEN rowid IN (SELECT geo1.rowid FROM geo1, querypoly

----------------------------------------

TITLE: Defining Enhanced Statement Type in TypeScript for Hrana Protocol v2
DESCRIPTION: Type definition for Stmt showing the extended functionality in v2, including the ability to reference stored SQL by ID and making want_rows optional.

LANGUAGE: typescript
CODE:
type Stmt = {
    "sql"?: string | undefined,
    "sql_id"?: int32 | undefined,
    "args"?: Array<Value>,
    "named_args"?: Array<NamedArg>,
    "want_rows"?: boolean,
}

----------------------------------------

TITLE: Creating and Populating Transformation Table in SQL
DESCRIPTION: Creates a temporary table 'xform' with transformation parameters including rotation matrix values (A, B, C, D) and colors. This table defines different rotations and associated colors for the shapes.

LANGUAGE: sql
CODE:
CREATE TEMP TABLE xform(A,B,C,D,clr);
INSERT INTO xform(A,B,clr) VALUES
  (1,0,'black'),
  (0.707,0.707,'blue'),
  (0.5,0.866,'red'),
  (-0.866,0.5,'green');

----------------------------------------

TITLE: Batch Condition Logic in libsql Protocol
DESCRIPTION: Defines the conditional expressions that control whether batch steps are executed. Supports basic logical operations (ok, error, not, and, or) with references to previous steps' execution status.

LANGUAGE: typescript
CODE:
type BatchCond =
    | { "type": "ok", "step": int32 }
    | { "type": "error", "step": int32 }
    | { "type": "not", "cond": BatchCond }
    | { "type": "and", "conds": Array<BatchCond> }
    | { "type": "or", "conds": Array<BatchCond> }

----------------------------------------

TITLE: Updating Polygon Shapes with Transformation and Overlap Checking in SQL
DESCRIPTION: Updates polygon shapes in the geo1 table by applying a transformation matrix and filtering based on overlap with a query polygon. The transformation translates shapes by 300 units horizontally while maintaining other dimensions.

LANGUAGE: sql
CODE:
UPDATE geo1
   SET _shape=geopoly_xform(_shape,1,0,0,1,300,0)
 WHERE geopoly_overlap(_shape,(SELECT poly FROM querypoly));

----------------------------------------

TITLE: Using Upper and Lower Case Mapping Functions in SQLite ICU Extension
DESCRIPTION: Examples of using the ICU-enhanced upper() and lower() functions for both general and language-specific case mapping. These functions provide case mapping for the full range of Unicode characters, unlike SQLite's built-in functions which only handle English letters.

LANGUAGE: sql
CODE:
upper('abc') -> 'ABC'
lower('ABC') -> 'abc'

lower('I', 'en_us') -> 'i'
lower('I', 'tr_tr') -> 'ı' (small dotless i)

----------------------------------------

TITLE: Closing Stored SQL Text in Hrana Protocol (TypeScript)
DESCRIPTION: Defines the request and response types for deleting SQL text previously stored on the server. After receiving the response, the client can safely reuse the SQL text ID for other SQL statements.

LANGUAGE: typescript
CODE:
type CloseSqlReq = {
    "type": "close_sql",
    "sql_id": int32,
}

type CloseSqlResp = {
    "type": "close_sql",
}

----------------------------------------

TITLE: Configuring Rust Backtrace Environment Variable
DESCRIPTION: Environment variable setting to control the display of backtraces when Rust panics occur. Set to 1 for full backtraces or 0 to disable them when debugging libsql.

LANGUAGE: shell
CODE:
export RUST_BACKTRACE=0/1

----------------------------------------

TITLE: Defining Request and Response Message Types in TypeScript
DESCRIPTION: TypeScript type definitions for request and response messages in the Hrana protocol. These types define the structure of client requests and server responses, including request identification.

LANGUAGE: typescript
CODE:
type RequestMsg = {
    "type": "request",
    "request_id": int32,
    "request": Request,
}

type ResponseOkMsg = {
    "type": "response_ok",
    "request_id": int32,
    "response": Response,
}

type ResponseErrorMsg = {
    "type": "response_error",
    "request_id": int32,
    "error": Error,
}

----------------------------------------

TITLE: Generating SVG Representation of Polygon Shapes in SQL
DESCRIPTION: Creates an SVG visualization of polygon shapes from the geo1 table with conditional formatting based on their clr attribute. The SVG includes stroke styling with different colors for each polygon.

LANGUAGE: sql
CODE:
.print '<svg width="1000" height="800" style="border:1px solid black">'
SELECT geopoly_svg(_shape,
         printf('style="fill:none;stroke:%s;stroke-width:1"',geo1.clr)
       )
  FROM geo1;
SELECT geopoly_svg(poly,'style="fill:none;stroke:black;stroke-width:2"')
  FROM querypoly;
--ROLLBACK;
.print '</svg>'

----------------------------------------

TITLE: Running sqlite3_expert with Query File
DESCRIPTION: Command for running the sqlite3_expert application with a file containing multiple SQL queries against a database.

LANGUAGE: bash
CODE:
./sqlite3_expert -file <text-file> test.db

----------------------------------------

TITLE: Running Specific Test File in libsql
DESCRIPTION: Command to run a specific test file named 'tableinfo' instead of the entire test suite. This allows for focused testing on a particular component of libsql.

LANGUAGE: shell
CODE:
cargo test --test tableinfo

----------------------------------------

TITLE: Executing Batches of SQL Statements in Hrana Protocol (TypeScript)
DESCRIPTION: Defines the request and response types for executing a batch of SQL statements on a stream. The server responds with the result of the batch execution, with errors for individual statements contained in the BatchResult structure.

LANGUAGE: typescript
CODE:
type BatchReq = {
    "type": "batch",
    "stream_id": int32,
    "batch": Batch,
}

type BatchResp = {
    "type": "batch",
    "result": BatchResult,
}

----------------------------------------

TITLE: Generating Regular Polygons with Varying Sides in SQL
DESCRIPTION: Creates and visualizes regular polygons with different numbers of sides (3 to 30) using the geopoly_regular function. Each polygon is positioned at different x-coordinates and styled with different colors for visual distinction.

LANGUAGE: sql
CODE:
.print '<h1>Regular Polygons</h1>'
.print '<svg width="1000" height="200" style="border:1px solid black">'
SELECT geopoly_svg(geopoly_regular(100,100,40,3),'style="fill:none;stroke:red;stroke-width:1"');
SELECT geopoly_svg(geopoly_regular(200,100,40,4),'style="fill:none;stroke:orange;stroke-width:1"');
SELECT geopoly_svg(geopoly_regular(300,100,40,5),'style="fill:none;stroke:green;stroke-width:1"');
SELECT geopoly_svg(geopoly_regular(400,100,40,6),'style="fill:none;stroke:blue;stroke-width:1"');
SELECT geopoly_svg(geopoly_regular(500,100,40,7),'style="fill:none;stroke:purple;stroke-width:1"');
SELECT geopoly_svg(geopoly_regular(600,100,40,8),'style="fill:none;stroke:red;stroke-width:1"');
SELECT geopoly_svg(geopoly_regular(700,100,40,10),'style="fill:none;stroke:orange;stroke-width:1"');
SELECT geopoly_svg(geopoly_regular(800,100,40,20),'style="fill:none;stroke:green;stroke-width:1"');
SELECT geopoly_svg(geopoly_regular(900,100,40,30),'style="fill:none;stroke:blue;stroke-width:1"');
.print '</svg>'

----------------------------------------

TITLE: Initial State Command Sequence for SQLite Test Script Interpreter
DESCRIPTION: A sequence of commands that defines the initial state of the interpreter at the start of processing each test script. It closes all connections, sets the default connection to 0, creates a new test database, and sets the NULL display value.

LANGUAGE: bash
CODE:
--close all
--db 0
--new test.db
--null nil

----------------------------------------

TITLE: Creating build scripts for failed test investigation
DESCRIPTION: Commands to create build scripts that recreate specific build configurations. These scripts help in investigating test failures by reproducing the exact build environment.

LANGUAGE: bash
CODE:
# Create a script that recreates build configuration "Device-One" on 
# Linux or OSX:
tclsh $TESTDIR/testrunner.tcl script Device-One > make.sh 

# Create a script that recreates build configuration "Have-Not" on Windows:
tclsh $TESTDIR/testrunner.tcl script Have-Not > make.bat 

----------------------------------------

TITLE: Using the --json and --json-block Commands in libsql
DESCRIPTION: The --json and --json-block commands function like --result and --tableresult but append column values literally without enclosing or escaping characters. Comparison is done using exact strcmp() rather than GLOB.

LANGUAGE: shell
CODE:
--json
--json-block

----------------------------------------

TITLE: Opening a Cursor for Batch Execution in Hrana Protocol (TypeScript)
DESCRIPTION: Defines the request and response types for opening a cursor that executes a batch of statements. Unlike the batch request, this allows incremental reading of results through a cursor identified by a client-assigned ID.

LANGUAGE: typescript
CODE:
type OpenCursorReq = {
    "type": "open_cursor",
    "stream_id": int32,
    "cursor_id": int32,
    "batch": Batch,
}

type OpenCursorResp = {
    "type": "open_cursor",
}

----------------------------------------

TITLE: Inserting Test Data into xyoff Table in SQL
DESCRIPTION: Inserts multiple rows of coordinate data into the xyoff table. Each row contains numeric values representing polygon coordinate information with id1, id2, xoff, and yoff columns.

LANGUAGE: sql
CODE:
INSERT INTO xyoff VALUES(6,4,120,538);
INSERT INTO xyoff VALUES(6,4,403,663);
INSERT INTO xyoff VALUES(6,4,477,677);
INSERT INTO xyoff VALUES(6,4,690,154);
INSERT INTO xyoff VALUES(6,4,606,498);
INSERT INTO xyoff VALUES(6,4,430,665);
INSERT INTO xyoff VALUES(6,4,499,273);
INSERT INTO xyoff VALUES(7,1,118,526);
INSERT INTO xyoff VALUES(7,1,817,522);
INSERT INTO xyoff VALUES(7,1,388,638);
INSERT INTO xyoff VALUES(7,1,181,265);
INSERT INTO xyoff VALUES(7,1,442,332);
INSERT INTO xyoff VALUES(7,1,475,282);
INSERT INTO xyoff VALUES(7,1,722,633);
INSERT INTO xyoff VALUES(7,1,104,394);
INSERT INTO xyoff VALUES(7,1,631,262);
INSERT INTO xyoff VALUES(7,1,372,392);
INSERT INTO xyoff VALUES(7,2,600,413);
INSERT INTO xyoff VALUES(7,2,386,223);
INSERT INTO xyoff VALUES(7,2,839,174);
INSERT INTO xyoff VALUES(7,2,293,410);
INSERT INTO xyoff VALUES(7,2,281,391);
INSERT INTO xyoff VALUES(7,2,859,387);
INSERT INTO xyoff VALUES(7,2,478,347);
INSERT INTO xyoff VALUES(7,2,646,690);
INSERT INTO xyoff VALUES(7,2,713,234);
INSERT INTO xyoff VALUES(7,2,199,588);
INSERT INTO xyoff VALUES(7,3,389,256);
INSERT INTO xyoff VALUES(7,3,349,542);
INSERT INTO xyoff VALUES(7,3,363,345);
INSERT INTO xyoff VALUES(7,3,751,302);
INSERT INTO xyoff VALUES(7,3,423,386);
INSERT INTO xyoff VALUES(7,3,267,444);
INSERT INTO xyoff VALUES(7,3,243,182);
INSERT INTO xyoff VALUES(7,3,453,658);
INSERT INTO xyoff VALUES(7,3,126,345);
INSERT INTO xyoff VALUES(7,3,120,472);
INSERT INTO xyoff VALUES(7,4,359,654);
INSERT INTO xyoff VALUES(7,4,339,516);
INSERT INTO xyoff VALUES(7,4,710,452);
INSERT INTO xyoff VALUES(7,4,810,560);
INSERT INTO xyoff VALUES(7,4,644,692);
INSERT INTO xyoff VALUES(7,4,826,327);
INSERT INTO xyoff VALUES(7,4,465,462);
INSERT INTO xyoff VALUES(7,4,310,456);
INSERT INTO xyoff VALUES(7,4,577,613);
INSERT INTO xyoff VALUES(7,4,502,555);
INSERT INTO xyoff VALUES(8,1,601,620);
INSERT INTO xyoff VALUES(8,1,372,683);
INSERT INTO xyoff VALUES(8,1,758,399);
INSERT INTO xyoff VALUES(8,1,485,552);
INSERT INTO xyoff VALUES(8,1,159,563);
INSERT INTO xyoff VALUES(8,1,536,303);
INSERT INTO xyoff VALUES(8,1,122,263);
INSERT INTO xyoff VALUES(8,1,836,435);
INSERT INTO xyoff VALUES(8,1,544,146);
INSERT INTO xyoff VALUES(8,1,270,277);
INSERT INTO xyoff VALUES(8,2,849,281);
INSERT INTO xyoff VALUES(8,2,563,242);
INSERT INTO xyoff VALUES(8,2,704,463);
INSERT INTO xyoff VALUES(8,2,102,165);
INSERT INTO xyoff VALUES(8,2,797,524);
INSERT INTO xyoff VALUES(8,2,612,426);
INSERT INTO xyoff VALUES(8,2,345,372);
INSERT INTO xyoff VALUES(8,2,820,376);
INSERT INTO xyoff VALUES(8,2,789,156);
INSERT INTO xyoff VALUES(8,2,321,466);
INSERT INTO xyoff VALUES(8,3,150,332);
INSERT INTO xyoff VALUES(8,3,136,152);
INSERT INTO xyoff VALUES(8,3,468,528);
INSERT INTO xyoff VALUES(8,3,409,192);
INSERT INTO xyoff VALUES(8,3,820,216);
INSERT INTO xyoff VALUES(8,3,847,249);
INSERT INTO xyoff VALUES(8,3,801,267);
INSERT INTO xyoff VALUES(8,3,181,670);
INSERT INTO xyoff VALUES(8,3,398,563);
INSERT INTO xyoff VALUES(8,3,439,576);
INSERT INTO xyoff VALUES(8,4,123,309);
INSERT INTO xyoff VALUES(8,4,190,496);
INSERT INTO xyoff VALUES(8,4,571,531);
INSERT INTO xyoff VALUES(8,4,290,255);
INSERT INTO xyoff VALUES(8,4,244,412);
INSERT INTO xyoff VALUES(8,4,264,596);
INSERT INTO xyoff VALUES(8,4,253,420);
INSERT INTO xyoff VALUES(8,4,847,536);
INSERT INTO xyoff VALUES(8,4,120,288);
INSERT INTO xyoff VALUES(8,4,331,639);

----------------------------------------

TITLE: Configuring Compression Support with ZLIB in SQLite3MC
DESCRIPTION: Handles the configuration for compression-related features that depend on ZLIB. It either uses the built-in miniz library or locates the system ZLIB, then enables compression extensions like sqlar and zipfile when available.

LANGUAGE: CMake
CODE:
if(SQLITE3MC_USE_MINIZ OR _SQLITE3MC_REQUIRE_ZLIB)
  if(_SQLITE3MC_REQUIRE_ZLIB)
    # Use ZLIB_ROOT to specify the location to look
    find_package(ZLIB)
    if(NOT ZLIB_FOUND)
      message( FATAL_ERROR "One of the flags specified requires zlib. Zlib is not found. Try specifying the ZLIB_ROOT environment variable.")
    endif()
  endif()
  if(SQLITE3MC_USE_MINIZ OR ZLIB_FOUND)
    set(SQLITE3MC_BASE_DEFINITIONS 
      ${SQLITE3MC_BASE_DEFINITIONS}
      $<$<BOOL:${SQLITE_ENABLE_COMPRESS}>:SQLITE_ENABLE_COMPRESS=1>
    )
    set(SQLITE3MC_ZLIB_DEFINITIONS 
      ${SQLITE3MC_ZLIB_DEFINITIONS}
      $<$<BOOL:${SQLITE_ENABLE_SQLAR}>:SQLITE_ENABLE_SQLAR=1>
      $<$<BOOL:${SQLITE_ENABLE_ZIPFILE}>:SQLITE_ENABLE_ZIPFILE=1>
    )
    set(SQLITE3MC_SHELL_DEFINITIONS 
      ${SQLITE3MC_SHELL_DEFINITIONS}
      SQLITE_HAVE_ZLIB=1
    )
  endif()
endif()

----------------------------------------

TITLE: Using the --run Command in libsql
DESCRIPTION: The --run command executes SQL statements in the input buffer without adding anything to the result buffer. Output and errors are silently ignored. It can optionally take an integer argument (0-6) to specify which database connection to use.

LANGUAGE: shell
CODE:
--run

----------------------------------------

TITLE: HTTP Cursor Endpoint for Streaming Results (Protobuf)
DESCRIPTION: Defines the HTTP endpoint that uses Protobuf encoding for executing batches with cursor-based result streaming, providing a binary alternative to the JSON endpoint.

LANGUAGE: text
CODE:
POST v3-protobuf/cursor
-> Protobuf: CursorReqBody
<- length-delimited Protobuf: CursorRespBody
   length-delimited Protobufs: CursorEntry

----------------------------------------

TITLE: Creating and Populating Geopoly Virtual Table in SQL
DESCRIPTION: Creates a virtual table using the geopoly extension with type and clr columns, then populates it by transforming data from the xyoff table using the geopoly_xform function.

LANGUAGE: sql
CODE:
/* Create the geopoly object from test data above */
CREATE VIRTUAL TABLE geo1 USING geopoly(type,clr);
INSERT INTO geo1(_shape,type,clr)
  SELECT geopoly_xform(jshape,A,B,-B,A,xoff,yoff), basis.name, xform.clr
    FROM basis, xform, xyoff
   WHERE xyoff.id1=basis.rowid AND xyoff.id2=xform.rowid;

----------------------------------------

TITLE: Example Initialization Sequence for SQLite Test Script Interpreter
DESCRIPTION: Demonstrates the initial command sequence automatically run at the start of processing each test script. This includes closing all connections, setting the default database connection, creating a new test database, and setting the NULL display value.

LANGUAGE: bash
CODE:
--close all
--db 0
--new test.db
--null nil

----------------------------------------

TITLE: Configuring SQLite3MC Shell Executable
DESCRIPTION: Creates and configures the SQLite3MC shell executable target if enabled, including necessary definitions, include directories, and link libraries. Also configures optional ICU support for the shell.

LANGUAGE: CMake
CODE:
# Shell Executable project
if(SQLITE3MC_BUILD_SHELL)
  add_executable(${SQLITE3MC_SHELL_TARGET}
    ${SQLITE3MC_SHELL_SRCS}
  )
  target_include_directories(${SQLITE3MC_SHELL_TARGET} PRIVATE
    ${SQLITE3MC_INCLUDEDIRS}
  )
  target_compile_definitions(${SQLITE3MC_SHELL_TARGET} PRIVATE
    ${_DEFAULT_DEFINITIONS}
    ${SQLITE3MC_BASE_DEFINITIONS}
    ${SQLITE3MC_SHELL_DEFINITIONS}
  )
  target_link_libraries(${SQLITE3MC_SHELL_TARGET} PRIVATE
    ${SQLITE3MC_SHELL_SYSTEM_LINKS}
    ${SQLITE3MC_LINK_LIBRARIES}
  )
  if(ZLIB_FOUND)
    target_include_directories(${SQLITE3MC_SHELL_TARGET} PRIVATE
      ${ZLIB_INCLUDE_DIRS}
    )
    target_link_libraries(${SQLITE3MC_SHELL_TARGET} PRIVATE
      ${ZLIB_LIBRARIES}
    )
  endif()

  if(SQLITE3MC_WITH_ICU)
    target_compile_definitions(${SQLITE3MC_SHELL_TARGET} PRIVATE
      ${SQLITE3MC_ICU_DEFINITIONS}
    )
    target_include_directories(${SQLITE3MC_SHELL_TARGET} PRIVATE 
      ${ICU_INCLUDE_DIRS}
    )
    target_link_libraries(${SQLITE3MC_SHELL_TARGET} PRIVATE
      ${ICU_LIBRARIES}
    )
    message("Will build ${SQLITE3MC_SHELL_TARGET} with ICU")
  endif()

  if(SQLITE3MC_RUNTIME_LINK)
    message("Will build ${SQLITE3MC_SHELL_TARGET} with static runtime")
    _Enable_MT(${SQLIT3MC_SHELL_TARGET})
  endif()
  message("Will build ${SQLITE3MC_SHELL_TARGET}")

  INSTALL(TARGETS ${SQLITE3MC_SHELL_TARGET}
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
    PUBLIC_HEADER DESTINATION include/${CMAKE_PROJECT_NAME}
    RUNTIME DESTINATION bin
  )
endif()

----------------------------------------

TITLE: SQLite Function Call Reference in Markdown
DESCRIPTION: References to SQLite internal functions used in the memory allocation process of the sorter module, including sqlite3Realloc() for growing buffers and sqlite3HeapNearlyFull() for memory condition checking.

LANGUAGE: markdown
CODE:
sqlite3Realloc()

LANGUAGE: markdown
CODE:
sqlite3VdbeSorterWrite()

LANGUAGE: markdown
CODE:
sqlite3HeapNearlyFull()

LANGUAGE: markdown
CODE:
sqlite3_file.xFetch()

----------------------------------------

TITLE: SQL Statement Description Request and Response Type Definitions
DESCRIPTION: TypeScript type definitions for describing an SQL statement without executing it, providing information about the statement's structure and expected results.

LANGUAGE: typescript
CODE:
type DescribeStreamReq = {
    "type": "describe",
    "sql"?: string | null,
    "sql_id"?: int32 | null,
}

type DescribeStreamResp = {
    "type": "describe",
    "result": DescribeResult,
}

----------------------------------------

TITLE: Creating and Populating Query Polygon in SQL
DESCRIPTION: Creates a temporary table to store a polygon for querying, then inserts a single orange polygon defined as a JSON array of coordinates.

LANGUAGE: sql
CODE:
/* Query polygon */
CREATE TEMP TABLE querypoly(poly JSON, clr TEXT);
INSERT INTO querypoly(clr, poly) VALUES
  ('orange', '[[300,300],[400,350],[500,250],[480,500],[400,480],[300,550],[280,450],[320,400],[280,350],[300,300]]');

----------------------------------------

TITLE: Setting SQLite3MC Library Definitions and Target Configurations
DESCRIPTION: Defines library-specific configuration settings and determines whether to build as static or shared library based on the SQLITE3MC_STATIC option.

LANGUAGE: CMake
CODE:
set(_LIB_DIFINITIONS
  _LIB
)

set(_DEFAULT_DEFINITIONS
  _CRT_SECURE_NO_WARNINGS
  _CRT_SECURE_NO_DEPRECATE
  _CRT_NONSTDC_NO_WARNINGS
  _CRT_NONSTDC_NO_DEPRECATE
  _UNICODE
  UNICODE
)

set(SQLITE3MC_SHELL_TARGET "sqlite3mc_shell")

if(SQLITE3MC_STATIC)
  set(SQLITE3MC_LINK "STATIC")
  set(SQLITE3MC_TARGET "sqlite3mc_static")
else()
  set(SQLITE3MC_LINK "SHARED")
  set(SQLITE3MC_TARGET "sqlite3mc")
  list(APPEND SQLITE3MC_BASE_SRCS ${SQLITE3MC_DLLRES_SRCS})
endif()

----------------------------------------

TITLE: Configuring libSQL with WasmEdge Support
DESCRIPTION: Command to configure libSQL build with WebAssembly runtime support using WasmEdge instead of Wasmtime. This requires the libwasmedge library to be installed on the system.

LANGUAGE: bash
CODE:
./configure --enable-wasm-runtime-wasmedge

----------------------------------------

TITLE: SQL Storage Request and Response Type Definitions
DESCRIPTION: TypeScript type definitions for storing SQL text on the server with an associated ID, allowing reuse of the SQL in subsequent requests without retransmitting the full text.

LANGUAGE: typescript
CODE:
type StoreSqlStreamReq = {
    "type": "store_sql",
    "sql_id": int32,
    "sql": string,
}

type StoreSqlStreamResp = {
    "type": "store_sql",
}

----------------------------------------

TITLE: Querying Bounding Box Overlap in SQL
DESCRIPTION: Demonstrates how to query for overlapping bounding boxes instead of actual polygons. Uses geopoly_bbox to get rectangle boundaries for each polygon and visualizes the results with SVG.

LANGUAGE: sql
CODE:
.print '<h1>Bounding-Box Overlap Query</h1>'
.print '<svg width="1000" height="800" style="border:1px solid black">'
SELECT geopoly_svg(_shape,
         printf('style="fill:none;stroke:%s;stroke-width:1"',geo1.clr)
       ),
       geopoly_svg(geopoly_bbox(_shape),
         'style="fill:none;stroke:black;stroke-width:1"'
       )
  FROM geo1, querypoly
 WHERE geopoly_overlap(geopoly_bbox(_shape), geopoly_bbox(poly));
SELECT geopoly_svg(poly, 
         printf('style="fill:%s;fill-opacity:0.5;"',clr)
       )
  FROM querypoly;
SELECT geopoly_svg(geopoly_bbox(poly),
         'style="fill:none;stroke:black;stroke-width:3"'
       )
  FROM querypoly;
.print '</svg>'

----------------------------------------

TITLE: Dropping a WebAssembly-based User-Defined Function in SQL
DESCRIPTION: Example of removing a previously created WebAssembly user-defined function using the DROP FUNCTION statement.

LANGUAGE: sql
CODE:
DROP FUNCTION IF EXISTS fib;

----------------------------------------

TITLE: Configuring Library-Only Definitions in SQLite3MC
DESCRIPTION: Sets compiler definitions that only apply to the library build of sqlite3mc. These control extensions like fileio, regexp, series, and SHA3 that are only available when building the library.

LANGUAGE: CMake
CODE:
set(SQLITE3MC_LIBONLY_DEFINITIONS 
  $<$<BOOL:${SQLITE_ENABLE_FILEIO}>:SQLITE_ENABLE_FILEIO=1>
  $<$<BOOL:${SQLITE_ENABLE_REGEXP}>:SQLITE_ENABLE_REGEXP=1>
  $<$<BOOL:${SQLITE_ENABLE_SERIES}>:SQLITE_ENABLE_SERIES=1>
  $<$<BOOL:${SQLITE_ENABLE_SHA3}>:SQLITE_ENABLE_SHA3=1>
)

----------------------------------------

TITLE: Opening a Database with Custom WAL Methods via URI
DESCRIPTION: Example of specifying a custom WAL implementation when opening a database using a URI parameter. This allows selecting different WAL implementations at runtime.

LANGUAGE: text
CODE:
.open file:test.db?wal=my_impl_of_wal_methods

----------------------------------------

TITLE: Error Structure Type Definition
DESCRIPTION: TypeScript type definition for the standard error structure used throughout the Hrana protocol. It includes a human-readable message and an optional machine-readable error code.

LANGUAGE: typescript
CODE:
type Error = {
    "message": string,
    "code"?: string | null,
}

----------------------------------------

TITLE: SQLite Visual Test Script for Geopoly Virtual Table
DESCRIPTION: This script is a test case for the geopoly virtual table in SQLite. It's intended to be run in the sqlite3 CLI with output redirected to an HTML file, which can then be viewed in a web browser to visually inspect the results.

LANGUAGE: sql
CODE:
#!sqlite3
#
# This is a visual test case for the geopoly virtual table.
#
# Run this script in the sqlite3 CLI, and redirect output into an
# HTML file.  This display the HTML in a webbrowser.

----------------------------------------

TITLE: Configuring Platform-Specific Compiler Flags for SQLite3MC
DESCRIPTION: Sets compiler flags and link libraries based on the target platform (Linux, macOS, or Windows) and processor architecture, with special handling for ARM processors.

LANGUAGE: CMake
CODE:
if (CMAKE_SYSTEM_NAME STREQUAL "Linux"
    OR CMAKE_SYSTEM_NAME STREQUAL "Darwin")

  # Do not set `-maes -msee4.2` when we are on arm which doesn't support
  # this instruction set.
  if (CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64"
      OR CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  else()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse4.2 -maes")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.2 -maes")
  endif()

  set(SQLITE3MC_LINK_LIBRARIES
    pthread
    dl
    m
  )
  if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    list(APPEND SQLITE3MC_LINK_LIBRARIES "-framework Security")
  endif()
  set(SHARED_LIB_EXPORT_DEFINITION "__attribute__((visibility(\"default\")))")
else()
  if (CMAKE_C_COMPILER_ID STREQUAL "GNU" AND NOT (
      CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64"
  ))
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse4.2 -maes")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.2 -maes")
  endif()
  set(SHARED_LIB_EXPORT_DEFINITION "__declspec(dllexport)")
endif()

if (CMAKE_C_COMPILER_ID STREQUAL "Clang" AND NOT (
      CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64"
  ))
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse4.2 -maes -Wno-error=incompatible-function-pointer-types")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.2 -maes")
endif()

----------------------------------------

TITLE: Adding NOT NULL and CHECK Constraints with ALTER COLUMN
DESCRIPTION: Example of modifying a column to add NOT NULL and CHECK constraints. This operation adds validation that the value must be less than 42.

LANGUAGE: sql
CODE:
ALTER TABLE t ALTER COLUMN v TO v NOT NULL CHECK(v < 42);

----------------------------------------

TITLE: Defining Batch Operations in Hrana Protocol
DESCRIPTION: Specifies the structure for batch operations, allowing multiple SQL statements to be executed sequentially with conditional execution based on the results of previous statements.

LANGUAGE: typescript
CODE:
type Batch = {
    "steps": Array<BatchStep>,
}

type BatchStep = {
    "condition"?: BatchCond | null,
    "stmt": Stmt,
}

----------------------------------------

TITLE: Building the Fuzz Target
DESCRIPTION: Command to build the fuzzing target using cargo-afl, which prepares the code for fuzzing tests.

LANGUAGE: bash
CODE:
cargo afl build

----------------------------------------

TITLE: Creating a Simple Table for Column Attribute Demonstrations
DESCRIPTION: Creating a minimal table with two columns for demonstrating various column attribute modifications using ALTER COLUMN.

LANGUAGE: sql
CODE:
CREATE TABLE t(id, v);

----------------------------------------

TITLE: Defining SQLite3MC Build Directories and Dependencies
DESCRIPTION: Sets up include directories and default link libraries for the SQLite3MC project, with special handling for MSVC.

LANGUAGE: CMake
CODE:
set(SQLITE3MC_INCLUDEDIRS
  src
)

set(SQLITE3MC_LINK_LIBRARIES )

set(SQLITE3MC_DLL_DEFINITIONS )

set(SQLITE3MC_SHELL_SYSTEM_LINKS )

if(MSVC)
  set(SQLITE3MC_DLL_DEFINITIONS
    _USRDLL
  )
endif()

----------------------------------------

TITLE: Creating a Table with RANDOM ROWID Option
DESCRIPTION: Example of creating a table with the RANDOM ROWID option, which causes libSQL to generate random rowid values for new rows instead of sequential ones.

LANGUAGE: sql
CODE:
CREATE TABLE shopping_list(item text, quantity int) RANDOM ROWID;

----------------------------------------

TITLE: Defining Step Result Entries in Cursor API
DESCRIPTION: Defines the entry types for step execution in the cursor API, including step beginning, individual rows, and step completion entries.

LANGUAGE: typescript
CODE:
type StepBeginEntry = {
    "type": "step_begin",
    "step": uint32,
    "cols": Array<Col>,
}

type StepEndEntry = {
    "type": "step_end",
    "affected_row_count": uint32,
    "last_insert_rowid": string | null,
}

type RowEntry = {
    "type": "row",
    "row": Array<Value>,
}

----------------------------------------

TITLE: Installing cargo-afl for Fuzzing Tests
DESCRIPTION: Command to install cargo-afl, which is needed to run American Fuzzy Lop (AFL) fuzzing tests with Rust.

LANGUAGE: bash
CODE:
cargo install cargo-afl

----------------------------------------

TITLE: Configuring ICU Support in SQLite3MC
DESCRIPTION: Sets up International Components for Unicode (ICU) support in sqlite3mc. When enabled, it locates the ICU libraries and adds the necessary compiler definition to enable ICU integration with SQLite.

LANGUAGE: CMake
CODE:
if(SQLITE3MC_WITH_ICU)
  find_package(ICU REQUIRED COMPONENTS data i18n io uc)
  if(ICU_FOUND)
    set(SQLITE3MC_ICU_DEFINITIONS
      SQLITE_ENABLE_ICU=1
    )
  else()
    message( FATAL_ERROR "ICU not found.")
  endif()
endif()

----------------------------------------

TITLE: Implementing F2FS Atomic Transaction Commit in C
DESCRIPTION: Complete implementation of SQLite's atomic transaction commit process using F2FS features. This includes acquiring a write lock, starting the atomic write operation, writing dirty pages, committing the transaction, and handling potential failures.

LANGUAGE: c
CODE:
/* Take an F_WRLCK lock on the database file. This prevents any other
** SQLite clients from reading or writing the file until the lock
** is released.  */
rc = fcntl(fd, F_SETLK, ...);
if( rc!=0 ) goto failed;

rc = ioctl(fd, F2FS_IOC_START_ATOMIC_WRITE);
if( rc!=0 ) goto fallback_to_legacy_journal_commit;

foreach (dirty page){
  rc = write(fd, ...dirty page...);
  if( rc!=0 ){
    ioctl(fd, F2FS_IOC_ABORT_VOLATILE_WRITE);
    goto fallback_to_legacy_journal_commit;
  }
}

rc = ioctl(fd, F2FS_IOC_COMMIT_ATOMIC_WRITE);
if( rc!=0 ){
  ioctl(fd, F2FS_IOC_ABORT_VOLATILE_WRITE);
  goto fallback_to_legacy_journal_commit;
}

/* If we get there, the transaction has been successfully 
** committed to persistent storage. The following call
** relinquishes the F_WRLCK lock.  */
fcntl(fd, F_SETLK, ...);

----------------------------------------

TITLE: Defining Error Entries in Cursor API
DESCRIPTION: Defines the entry types for error reporting in the cursor API, including errors occurring during step execution and batch-level errors.

LANGUAGE: typescript
CODE:
type StepErrorEntry = {
    "type": "step_error",
    "step": uint32,
    "error": Error,
}

type ErrorEntry = {
    "type": "error",
    "error": Error,
}

----------------------------------------

TITLE: Running Fuzzing Tests with Dictionary
DESCRIPTION: Command to execute the fuzzing tests against the parser, using an SQL dictionary for improved test coverage. Inputs are read from the 'dicts' directory and outputs are written to the 'out' directory.

LANGUAGE: bash
CODE:
cargo afl fuzz -i dicts -x dicts/sql.dict -o out target/debug/fuzz parser

----------------------------------------

TITLE: Building SQLite with Custom Preprocessor Defines
DESCRIPTION: NMAKE command with custom preprocessor definitions for enabling STAT4 and omitting JSON functionality.

LANGUAGE: nmake
CODE:
"OPTS=-DSQLITE_ENABLE_STAT4=1 -DSQLITE_OMIT_JSON=1"

----------------------------------------

TITLE: Configuring a C Project with SQLite3 Encrypted Database in CMake
DESCRIPTION: CMake configuration for a C project that tests the sqlite3mc library (SQLite Multi-Cipher). The configuration specifies minimum CMake version, project name and language, finds the required sqlite3mc package, defines the executable with its source file, and links the executable with the sqlite3mc library.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.24.0)
project(test_sqlite3mc C)

find_package(sqlite3mc REQUIRED)

add_executable(${PROJECT_NAME}
  main.c
)

target_link_libraries(${PROJECT_NAME}
  sqlite3mc::sqlite3mc
)

----------------------------------------

TITLE: Building SQLite for WinRT 8.0
DESCRIPTION: NMAKE command with parameters for building SQLite for Windows Runtime 8.0 using Visual C++ 2012 or later.

LANGUAGE: nmake
CODE:
FOR_WINRT=1
"NSDKLIBPATH=%WindowsSdkDir%\..\8.0\lib\win8\um\x86"

----------------------------------------

TITLE: Defining Statement Description Results in Hrana Protocol
DESCRIPTION: Defines the structure for statement description results, providing metadata about parameters, columns, and statement characteristics without execution.

LANGUAGE: typescript
CODE:
type DescribeResult = {
    "params": Array<DescribeParam>,
    "cols": Array<DescribeCol>,
    "is_explain": boolean,
    "is_readonly": boolean,
}

----------------------------------------

TITLE: Running 'mdevtest' for quick source code testing
DESCRIPTION: Command to run the 'mdevtest' which tests two build configurations: one with debugging enabled and one without. Both are --enable-all builds.

LANGUAGE: bash
CODE:
tclsh $TESTDIR/testrunner.tcl mdevtest

----------------------------------------

TITLE: Defining F2FS IOCTL Constants in C
DESCRIPTION: Definition of F2FS IOCTL magic number and commands used for atomic write operations in SQLite's OS layer.

LANGUAGE: c
CODE:
#define F2FS_IOCTL_MAGIC        0xf5
#define F2FS_IOC_START_ATOMIC_WRITE     _IO(F2FS_IOCTL_MAGIC, 1)
#define F2FS_IOC_COMMIT_ATOMIC_WRITE    _IO(F2FS_IOCTL_MAGIC, 2)
#define F2FS_IOC_START_VOLATILE_WRITE   _IO(F2FS_IOCTL_MAGIC, 3)
#define F2FS_IOC_ABORT_VOLATILE_WRITE   _IO(F2FS_IOCTL_MAGIC, 5)
#define F2FS_IOC_GET_FEATURES           _IOR(F2FS_IOCTL_MAGIC, 12, u32)
#define F2FS_FEATURE_ATOMIC_WRITE       0x0004

----------------------------------------

TITLE: Defining MT Runtime Helper Macro in CMake
DESCRIPTION: A helper macro that enables static linking of the C++ runtime library in Visual Studio builds. It sets the appropriate compile options for both Release (/MT) and Debug (/MTd) configurations.

LANGUAGE: CMake
CODE:
macro(_Enable_MT _target)
  target_compile_options(${_target} PRIVATE
    $<$<CONFIG:Release>:/MT>$<$<CONFIG:Debug>:/MTd>
  )
endmacro()

----------------------------------------

TITLE: Removing a Foreign Key Constraint in SQL
DESCRIPTION: Example of removing a foreign key constraint by altering the column definition. This operation redefines the column without the REFERENCES clause.

LANGUAGE: sql
CODE:
ALTER TABLE emails ALTER COLUMN user_id TO user_id INT;

----------------------------------------

TITLE: Running a subset of 'release' tests matching a pattern
DESCRIPTION: Command to run a subset of the 'release' test set where tests match a specific pattern. The example shows running rtree tests in all builds and configurations.

LANGUAGE: bash
CODE:
tclsh $TESTDIR/testrunner.tcl release rtree%

----------------------------------------

TITLE: Configuring Memory Security Options in SQLite3MC
DESCRIPTION: Sets compiler definitions for enhanced memory security features. These options control whether freed memory is secured by zeroing it out or filling it with random data to prevent data leakage.

LANGUAGE: CMake
CODE:
if(SQLITE3MC_SECURE_MEMORY)
  set(SQLITE3MC_BASE_DEFINITIONS 
    ${SQLITE3MC_BASE_DEFINITIONS}
    SQLITE3MC_SECURE_MEMORY=1
  )
endif()
if(SQLITE3MC_USE_RANDOM_FILL_MEMORY)
  set(SQLITE3MC_BASE_DEFINITIONS 
    ${SQLITE3MC_BASE_DEFINITIONS}
    SQLITE3MC_USE_RANDOM_FILL_MEMORY=1
  )
endif()

----------------------------------------

TITLE: Cloning SQLite Repository with Fossil
DESCRIPTION: Commands for creating a new Fossil repository for SQLite, cloning the source code, and opening the repository. This creates the initial local copy of the SQLite source code.

LANGUAGE: sh
CODE:
mkdir -p ~/sqlite ~/Fossils
cd ~/sqlite
fossil clone https://www.sqlite.org/src ~/Fossils/sqlite.fossil
fossil open ~/Fossils/sqlite.fossil

----------------------------------------

TITLE: Configuring Static Runtime Linking for SQLite3MC
DESCRIPTION: Enables static runtime linking for the SQLite3MC library if requested and sets up installation targets for the library.

LANGUAGE: CMake
CODE:
if(SQLITE3MC_STATIC_RUNTIME_LINK)
  message("Will build ${SQLITE3MC_TARGET} with static runtime link")
  _Enable_MT(${SQLITE3MC_TARGET})
endif()
message("Will build ${SQLITE3MC_TARGET} as ${SQLITE3MC_LINK}")

set_target_properties(${SQLITE3MC_TARGET} PROPERTIES PUBLIC_HEADER "${SQLITE3MC_PUBLIC_HEADERS}")
INSTALL(TARGETS ${SQLITE3MC_TARGET}
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  PUBLIC_HEADER DESTINATION include/${CMAKE_PROJECT_NAME}
  RUNTIME DESTINATION bin
)

----------------------------------------

TITLE: Configuring libSQL with Dynamic Wasmtime Support
DESCRIPTION: Command to configure libSQL build with WebAssembly runtime support using dynamically linked Wasmtime library instead of the default static linking.

LANGUAGE: bash
CODE:
./configure --enable-wasm-runtime-dynamic

----------------------------------------

TITLE: Running 'release' tests for comprehensive testing
DESCRIPTION: Command to run the 'release' test set, which runs many combinations of builds and tests based on the current operating system (Linux, Windows, or OSX).

LANGUAGE: bash
CODE:
tclsh $TESTDIR/testrunner.tcl release

----------------------------------------

TITLE: Compiling SQLite with MSVC on Windows
DESCRIPTION: Commands for building SQLite on Windows using MSVC and NMAKE with the provided Makefile.msc. This shows how to build various targets including DLL, EXE, and test files.

LANGUAGE: batch
CODE:
mkdir bld
cd bld
nmake /f ..\sqlite\Makefile.msc TOP=..\sqlite
nmake /f ..\sqlite\Makefile.msc sqlite3.c TOP=..\sqlite
nmake /f ..\sqlite\Makefile.msc sqlite3.dll TOP=..\sqlite
nmake /f ..\sqlite\Makefile.msc sqlite3.exe TOP=..\sqlite
nmake /f ..\sqlite\Makefile.msc test TOP=..\sqlite

----------------------------------------

TITLE: Close SQL Request and Response Type Definitions
DESCRIPTION: TypeScript type definitions for releasing stored SQL from server memory. This request frees resources by removing previously stored SQL text identified by sql_id.

LANGUAGE: typescript
CODE:
type CloseSqlStreamReq = {
    "type": "close_sql",
    "sql_id": int32,
}

type CloseSqlStreamResp = {
    "type": "close_sql",
}

----------------------------------------

TITLE: Running testrunner.tcl to view test status
DESCRIPTION: Command to check the status of currently running tests using the testrunner.tcl script. This provides a report on the current state of the test suite execution.

LANGUAGE: bash
CODE:
./testfixture $(TESTDIR)/testrunner.tcl status

----------------------------------------

TITLE: Querying the testrunner database for failed tests
DESCRIPTION: SQL query to find all tests that have failed in the testrunner.db database. This database maintains the state of all tests that have been run by testrunner.tcl.

LANGUAGE: sql
CODE:
SELECT * FROM script WHERE state='failed'

----------------------------------------

TITLE: Close Stream Request and Response Type Definitions
DESCRIPTION: TypeScript type definitions for closing a database stream. This request terminates the stream session, preventing further operations on the same stream.

LANGUAGE: typescript
CODE:
type CloseStreamReq = {
    "type": "close",
}

type CloseStreamResp = {
    "type": "close",
}

----------------------------------------

TITLE: Building SQLite for UWP 10.0
DESCRIPTION: NMAKE command with parameters for building SQLite for Universal Windows Platform 10.0 using Visual C++ 2015 or later.

LANGUAGE: nmake
CODE:
FOR_WINRT=1 FOR_UWP=1
"NSDKLIBPATH=%WindowsSdkDir%\..\10\lib\10.0.10586.0\um\x86"
"PSDKLIBPATH=%WindowsSdkDir%\..\10\lib\10.0.10586.0\um\x86"
"NUCRTLIBPATH=%UniversalCRTSdkDir%\..\10\lib\10.0.10586.0\ucrt\x86"

----------------------------------------

TITLE: Defining Batch Conditions in Hrana Protocol
DESCRIPTION: Defines the conditional expressions that can be used to control the execution of statements in a batch, including success/error checking of previous steps and logical operations.

LANGUAGE: typescript
CODE:
type BatchCond =
    | { "type": "ok", "step": uint32 }
    | { "type": "error", "step": uint32 }
    | { "type": "not", "cond": BatchCond }
    | { "type": "and", "conds": Array<BatchCond> }
    | { "type": "or", "conds": Array<BatchCond> }
    | { "type": "is_autocommit" }

----------------------------------------

TITLE: Monitoring test progress with watch command
DESCRIPTION: Command that continuously monitors the status of running tests using the watch utility. This is useful to keep track of a long-running test execution.

LANGUAGE: bash
CODE:
watch ./testfixture $(TESTDIR)/testrunner.tcl status

----------------------------------------

TITLE: Building SQLite Test Binaries without Test Execution
DESCRIPTION: Uses the --buildonly option with testrunner.tcl to compile binaries required for a release test without running the actual tests. This is useful for preparing test environments or verifying build configurations.

LANGUAGE: bash
CODE:
# Build binaries required by release test.
tclsh $TESTDIR/testrunner.tcl --buildonly release

----------------------------------------

TITLE: Building SQLite for Windows 10 SDK
DESCRIPTION: NMAKE command with parameters for building SQLite for Windows 10 SDK using Visual C++ 2015 or later.

LANGUAGE: nmake
CODE:
FOR_WIN10=1

----------------------------------------

TITLE: Fetching Entries from a Cursor in Hrana Protocol (TypeScript)
DESCRIPTION: Defines the request and response types for incrementally fetching data from a cursor. The client can specify the maximum number of entries to receive, and the server indicates when all data has been retrieved through the done field.

LANGUAGE: typescript
CODE:
type FetchCursorReq = {
    "type": "fetch_cursor",
    "cursor_id": int32,
    "max_count": uint32,
}

type FetchCursorResp = {
    "type": "fetch_cursor",
    "entries": Array<CursorEntry>,
    "done": boolean,
}

----------------------------------------

TITLE: Running an individual test script
DESCRIPTION: Command to run an individual Tcl test script directly. This is useful for investigating test failures identified by testrunner.tcl.

LANGUAGE: bash
CODE:
./testfixture $PATH_TO_SCRIPT

----------------------------------------

TITLE: Running Smoke Tests for Bottomless WAL
DESCRIPTION: Command to execute the smoke test script for testing the bottomless WAL functionality.

LANGUAGE: shell
CODE:
LIBSQL_DIR=/path/to/your/libsql/directory make test

----------------------------------------

TITLE: Storing SQL Text on Server in Hrana Protocol (TypeScript)
DESCRIPTION: Defines the request and response types for storing SQL text on the server with a client-assigned ID. This allows for referencing the same SQL in subsequent requests without repeatedly sending the text.

LANGUAGE: typescript
CODE:
type StoreSqlReq = {
    "type": "store_sql",
    "sql_id": int32,
    "sql": string,
}

type StoreSqlResp = {
    "type": "store_sql",
}

----------------------------------------

TITLE: Building SQLite on POSIX with Custom Compiler Flags
DESCRIPTION: Example of configuring SQLite build with optimized size and without debugging symbols.

LANGUAGE: bash
CODE:
CFLAGS="-Os" ./configure

----------------------------------------

TITLE: Defining Column Description Type in TypeScript for Hrana Protocol
DESCRIPTION: Type definition for DescribeCol which provides metadata about result columns, including the name and declared type when available.

LANGUAGE: typescript
CODE:
type DescribeCol = {
    "name": string,
    "decltype": string | null,
}

----------------------------------------

TITLE: Dynamically Changing Job Count During Test Execution
DESCRIPTION: Shows how to modify the number of jobs while testrunner.tcl is already running by executing a command from the directory containing testrunner.log and testrunner.db files.

LANGUAGE: bash
CODE:
./testfixture $TESTDIR/testrunner.tcl njob $NEW_NUMBER_OF_JOBS

----------------------------------------

TITLE: Installing Bottomless CLI
DESCRIPTION: Command to install the bottomless-cli tool, which supports browsing, restoring, and removing snapshot generations.

LANGUAGE: shell
CODE:
RUSTFLAGS="--cfg uuid_unstable" cargo install bottomless-cli

----------------------------------------

TITLE: Building SQLite for WinRT 8.1
DESCRIPTION: NMAKE command with parameters for building SQLite for Windows Runtime 8.1 using Visual C++ 2013 or later.

LANGUAGE: nmake
CODE:
FOR_WINRT=1
"NSDKLIBPATH=%WindowsSdkDir%\..\8.1\lib\winv6.3\um\x86"

----------------------------------------

TITLE: Defining Enhanced Column Type in TypeScript for Hrana Protocol v2
DESCRIPTION: Type definition for Col showing the extended column metadata in v2, which now includes the declared type of the column when available.

LANGUAGE: typescript
CODE:
type Col = {
    "name": string | null,
    "decltype": string | null,
}

----------------------------------------

TITLE: Querying Direct-Only SQL Functions Using pragma_function_list
DESCRIPTION: SQL query to display all SQL functions that are never allowed to be used in the schema or in triggers or views by filtering function list entries with the SQLITE_DIRECTONLY flag.

LANGUAGE: sql
CODE:
SELECT DISTINCT name FROM pragma_function_list
    WHERE (flags & 0x80000)!=0
    ORDER BY name;

----------------------------------------

TITLE: Running Local Tests with Minio
DESCRIPTION: Shell commands to run smoke and restore tests with a local Minio S3-compatible server.

LANGUAGE: shell
CODE:
cd test/
export LIBSQL_BOTTOMLESS_ENDPOINT=http://localhost:9000
./smoke_test.sh
./restore_test.sh

----------------------------------------

TITLE: Defining SQL Sequence Execution Request/Response in TypeScript for Hrana Protocol
DESCRIPTION: Type definitions for SequenceReq and SequenceResp which enable clients to execute multiple SQL statements in a batch, with the option to reference stored SQL by ID.

LANGUAGE: typescript
CODE:
type SequenceReq = {
    "type": "sequence",
    "stream_id": int32,
    "sql"?: string | null,
    "sql_id"?: int32 | null,
}

type SequenceResp = {
    "type": "sequence",
}

----------------------------------------

TITLE: Updating the Emscripten SDK
DESCRIPTION: Commands for updating an existing Emscripten SDK installation to the latest version. This updates the tools without requiring a complete reinstallation.

LANGUAGE: bash
CODE:
$ git pull
$ ./emsdk install latest
$ ./emsdk activate latest

----------------------------------------

TITLE: SQL Statement Definition in libsql Protocol
DESCRIPTION: Defines the structure of an SQL statement with its parameters. Supports both positional and named arguments, with the want_rows flag controlling whether results are returned.

LANGUAGE: typescript
CODE:
type Stmt = {
    "sql": string,
    "args"?: Array<Value>,
    "named_args"?: Array<NamedArg>,
    "want_rows": boolean,
}

type NamedArg = {
    "name": string,
    "value": Value,
}

----------------------------------------

TITLE: SQLite PRAGMA Setting Example in Markdown
DESCRIPTION: Demonstrates the SQLite PRAGMA statement used to configure cache size, which affects the buffer size threshold in the sorter module. The example shows setting the main pager cache to 2MB.

LANGUAGE: markdown
CODE:
"PRAGMA main.cache_size = -2048"

----------------------------------------

TITLE: Running benchtest with Vector Database Example
DESCRIPTION: Example of using the benchtest tool to execute SQL queries against a database file. The example demonstrates creating a table with vector data, inserting records, and performing vector search operations.

LANGUAGE: bash
CODE:
$> LD_LIBRARY_PATH=../.libs/ ./benchtest queries.sql data.db
open queries file at queries.sql
open sqlite db at 'data.db'
executed simple statement: 'CREATE TABLE t ( id INTEGER PRIMARY KEY, emb FLOAT32(4) );'
executed simple statement: 'CREATE INDEX t_idx ON t ( libsql_vector_idx(emb) );'
prepared statement: 'INSERT INTO t VALUES ( ?, vector(?) );'
inserts (queries.sql):
  insert: 710.25 micros (avg.), 4 (count)
  size  : 0.2695 MB
  reads : 1.00 (avg.), 4 (total)
  writes: 1.00 (avg.), 4 (total)
prepared statement: 'SELECT * FROM vector_top_k('t_idx', vector(?), ?);'
search (queries.sql):
  select: 63.25 micros (avg.), 4 (count)
  size  : 0.2695 MB
  reads : 1.00 (avg.), 4 (total)

----------------------------------------

TITLE: Building and Running LibSQL JavaScript Bindings with wasm-pack
DESCRIPTION: Commands for building the LibSQL JavaScript bindings using wasm-pack targeting Node.js, followed by running an example script. This process compiles the library to WebAssembly for use in Node.js environments.

LANGUAGE: bash
CODE:
wasm-pack build --target nodejs
node example.js

----------------------------------------

TITLE: Executing SQL Statements in libsql Protocol
DESCRIPTION: Defines the request and response types for executing a single SQL statement on a stream. The client sends an execute request with the statement details, and the server responds with the result.

LANGUAGE: typescript
CODE:
type ExecuteReq = {
    "type": "execute",
    "stream_id": int32,
    "stmt": Stmt,
}

type ExecuteResp = {
    "type": "execute",
    "result": StmtResult,
}

----------------------------------------

TITLE: Detecting F2FS Atomic Commit Support in C
DESCRIPTION: Code that checks whether a file on Linux (including Android) supports F2FS atomic commits by using the F2FS_IOC_GET_FEATURES ioctl call to query supported features.

LANGUAGE: c
CODE:
u32 flags = 0;
rc = ioctl(fd, F2FS_IOC_GET_FEATURES, &flags);
if( rc==0 && (flags & F2FS_FEATURE_ATOMIC_WRITE) ){
  /* File supports F2FS atomic commits */
}else{
  /* File does NOT support F2FS atomic commits */
}

----------------------------------------

TITLE: Installing Python Dependencies for Libsql Benchmarks
DESCRIPTION: Commands to set up a Python virtual environment and install required dependencies for the benchmark tools. The primary dependency is numpy which is needed for some of the scripts.

LANGUAGE: python
CODE:
$> python -m venv .env
$> source .env/bin/activate
$> pip install -r requirements.txt

----------------------------------------

TITLE: Executing SQL Batches via HTTP API v1
DESCRIPTION: Endpoint for executing a batch of SQL statements. It receives a batch object and returns the execution results, following the same semantics as the 'batch' request in the Hrana protocol.

LANGUAGE: HTTP
CODE:
POST /v1/batch

-> {
    "batch": Batch,
}

<- {
    "result": BatchResult,
}

----------------------------------------

TITLE: Setting up SQLite Extensions with Trusted List
DESCRIPTION: Example of a trusted.lst file that contains SHA256 checksums of SQLite extensions to be preloaded at server startup.

LANGUAGE: console
CODE:
$ cat trusted.lst
04cd193d2547ff99d672fbfc6dcd7e0b220869a1ab867a9bb325f7374d168533  vector0.so
74f9029cbf6e31b155c097a273e08517eb4e56f2300dede65c801407b01eb248  vss0.so
5bbbe0f80dd7721162157f852bd5f364348eb504f9799ae521f832d44c13a3a1  crypto.so
731a8cbe150351fed02944a00ca586fc60d8f3814e4f83efbe60fcef62d4332b  fuzzy.so
1dbe9e4e58c4b994a119f1b507d07eb7a4311a80b96482c979b3bc0defd485fb  math.so
511bf71b0621977bd9575d71e90adf6d02967008e460066a33aed8720957fecb  stats.so
ae7fff8412e4e66e7f22b9af620bd24074bc9c77da6746221a9aba9d2b38d6a6  text.so
9ed6e7f4738c2223e194c7a80525d87f323df269c04d155a769d733e0ab3b4d0  unicode.so
19106ded4fd3fd4986a5111433d062a73bcf9557e07fa6d9154e088523e02bb0  uuid.so

----------------------------------------

TITLE: Unicode Character Case Mapping Table for Latin Letters
DESCRIPTION: A mapping table that defines case relationships between uppercase and lowercase Unicode characters. Each line contains the uppercase character code, mapping type (C/F/T), and corresponding lowercase character code(s), with character descriptions in comments.

LANGUAGE: plaintext
CODE:
0041; C; 0061; # LATIN CAPITAL LETTER A
0042; C; 0062; # LATIN CAPITAL LETTER B
0043; C; 0063; # LATIN CAPITAL LETTER C
0044; C; 0064; # LATIN CAPITAL LETTER D
0045; C; 0065; # LATIN CAPITAL LETTER E
0046; C; 0066; # LATIN CAPITAL LETTER F
0047; C; 0067; # LATIN CAPITAL LETTER G
0048; C; 0068; # LATIN CAPITAL LETTER H
0049; C; 0069; # LATIN CAPITAL LETTER I
0049; T; 0131; # LATIN CAPITAL LETTER I
004A; C; 006A; # LATIN CAPITAL LETTER J
004B; C; 006B; # LATIN CAPITAL LETTER K
004C; C; 006C; # LATIN CAPITAL LETTER L
004D; C; 006D; # LATIN CAPITAL LETTER M
004E; C; 006E; # LATIN CAPITAL LETTER N
004F; C; 006F; # LATIN CAPITAL LETTER O
0050; C; 0070; # LATIN CAPITAL LETTER P
0051; C; 0071; # LATIN CAPITAL LETTER Q
0052; C; 0072; # LATIN CAPITAL LETTER R
0053; C; 0073; # LATIN CAPITAL LETTER S
0054; C; 0074; # LATIN CAPITAL LETTER T
0055; C; 0075; # LATIN CAPITAL LETTER U
0056; C; 0076; # LATIN CAPITAL LETTER V
0057; C; 0077; # LATIN CAPITAL LETTER W
0058; C; 0078; # LATIN CAPITAL LETTER X
0059; C; 0079; # LATIN CAPITAL LETTER Y
005A; C; 007A; # LATIN CAPITAL LETTER Z
00B5; C; 03BC; # MICRO SIGN
00C0; C; 00E0; # LATIN CAPITAL LETTER A WITH GRAVE
00C1; C; 00E1; # LATIN CAPITAL LETTER A WITH ACUTE
00C2; C; 00E2; # LATIN CAPITAL LETTER A WITH CIRCUMFLEX
00C3; C; 00E3; # LATIN CAPITAL LETTER A WITH TILDE
00C4; C; 00E4; # LATIN CAPITAL LETTER A WITH DIAERESIS
00C5; C; 00E5; # LATIN CAPITAL LETTER A WITH RING ABOVE
00C6; C; 00E6; # LATIN CAPITAL LETTER AE
00C7; C; 00E7; # LATIN CAPITAL LETTER C WITH CEDILLA
00C8; C; 00E8; # LATIN CAPITAL LETTER E WITH GRAVE
00C9; C; 00E9; # LATIN CAPITAL LETTER E WITH ACUTE
00CA; C; 00EA; # LATIN CAPITAL LETTER E WITH CIRCUMFLEX
00CB; C; 00EB; # LATIN CAPITAL LETTER E WITH DIAERESIS
00CC; C; 00EC; # LATIN CAPITAL LETTER I WITH GRAVE
00CD; C; 00ED; # LATIN CAPITAL LETTER I WITH ACUTE
00CE; C; 00EE; # LATIN CAPITAL LETTER I WITH CIRCUMFLEX
00CF; C; 00EF; # LATIN CAPITAL LETTER I WITH DIAERESIS
00D0; C; 00F0; # LATIN CAPITAL LETTER ETH
00D1; C; 00F1; # LATIN CAPITAL LETTER N WITH TILDE
00D2; C; 00F2; # LATIN CAPITAL LETTER O WITH GRAVE
00D3; C; 00F3; # LATIN CAPITAL LETTER O WITH ACUTE
00D4; C; 00F4; # LATIN CAPITAL LETTER O WITH CIRCUMFLEX
00D5; C; 00F5; # LATIN CAPITAL LETTER O WITH TILDE
00D6; C; 00F6; # LATIN CAPITAL LETTER O WITH DIAERESIS
00D8; C; 00F8; # LATIN CAPITAL LETTER O WITH STROKE
00D9; C; 00F9; # LATIN CAPITAL LETTER U WITH GRAVE
00DA; C; 00FA; # LATIN CAPITAL LETTER U WITH ACUTE
00DB; C; 00FB; # LATIN CAPITAL LETTER U WITH CIRCUMFLEX
00DC; C; 00FC; # LATIN CAPITAL LETTER U WITH DIAERESIS
00DD; C; 00FD; # LATIN CAPITAL LETTER Y WITH ACUTE
00DE; C; 00FE; # LATIN CAPITAL LETTER THORN
00DF; F; 0073 0073; # LATIN SMALL LETTER SHARP S
0100; C; 0101; # LATIN CAPITAL LETTER A WITH MACRON
0102; C; 0103; # LATIN CAPITAL LETTER A WITH BREVE
0104; C; 0105; # LATIN CAPITAL LETTER A WITH OGONEK
0106; C; 0107; # LATIN CAPITAL LETTER C WITH ACUTE
0108; C; 0109; # LATIN CAPITAL LETTER C WITH CIRCUMFLEX
010A; C; 010B; # LATIN CAPITAL LETTER C WITH DOT ABOVE
010C; C; 010D; # LATIN CAPITAL LETTER C WITH CARON
010E; C; 010F; # LATIN CAPITAL LETTER D WITH CARON
0110; C; 0111; # LATIN CAPITAL LETTER D WITH STROKE
0112; C; 0113; # LATIN CAPITAL LETTER E WITH MACRON
0114; C; 0115; # LATIN CAPITAL LETTER E WITH BREVE
0116; C; 0117; # LATIN CAPITAL LETTER E WITH DOT ABOVE
0118; C; 0119; # LATIN CAPITAL LETTER E WITH OGONEK
011A; C; 011B; # LATIN CAPITAL LETTER E WITH CARON
011C; C; 011D; # LATIN CAPITAL LETTER G WITH CIRCUMFLEX
011E; C; 011F; # LATIN CAPITAL LETTER G WITH BREVE
0120; C; 0121; # LATIN CAPITAL LETTER G WITH DOT ABOVE
0122; C; 0123; # LATIN CAPITAL LETTER G WITH CEDILLA
0124; C; 0125; # LATIN CAPITAL LETTER H WITH CIRCUMFLEX
0126; C; 0127; # LATIN CAPITAL LETTER H WITH STROKE
0128; C; 0129; # LATIN CAPITAL LETTER I WITH TILDE
012A; C; 012B; # LATIN CAPITAL LETTER I WITH MACRON
012C; C; 012D; # LATIN CAPITAL LETTER I WITH BREVE
012E; C; 012F; # LATIN CAPITAL LETTER I WITH OGONEK
0130; F; 0069 0307; # LATIN CAPITAL LETTER I WITH DOT ABOVE
0130; T; 0069; # LATIN CAPITAL LETTER I WITH DOT ABOVE
0132; C; 0133; # LATIN CAPITAL LIGATURE IJ
0134; C; 0135; # LATIN CAPITAL LETTER J WITH CIRCUMFLEX
0136; C; 0137; # LATIN CAPITAL LETTER K WITH CEDILLA
0139; C; 013A; # LATIN CAPITAL LETTER L WITH ACUTE
013B; C; 013C; # LATIN CAPITAL LETTER L WITH CEDILLA
013D; C; 013E; # LATIN CAPITAL LETTER L WITH CARON
013F; C; 0140; # LATIN CAPITAL LETTER L WITH MIDDLE DOT
0141; C; 0142; # LATIN CAPITAL LETTER L WITH STROKE
0143; C; 0144; # LATIN CAPITAL LETTER N WITH ACUTE
0145; C; 0146; # LATIN CAPITAL LETTER N WITH CEDILLA
0147; C; 0148; # LATIN CAPITAL LETTER N WITH CARON
0149; F; 02BC 006E; # LATIN SMALL LETTER N PRECEDED BY APOSTROPHE
014A; C; 014B; # LATIN CAPITAL LETTER ENG
014C; C; 014D; # LATIN CAPITAL LETTER O WITH MACRON
014E; C; 014F; # LATIN CAPITAL LETTER O WITH BREVE
0150; C; 0151; # LATIN CAPITAL LETTER O WITH DOUBLE ACUTE
0152; C; 0153; # LATIN CAPITAL LIGATURE OE
0154; C; 0155; # LATIN CAPITAL LETTER R WITH ACUTE
0156; C; 0157; # LATIN CAPITAL LETTER R WITH CEDILLA
0158; C; 0159; # LATIN CAPITAL LETTER R WITH CARON
015A; C; 015B; # LATIN CAPITAL LETTER S WITH ACUTE
015C; C; 015D; # LATIN CAPITAL LETTER S WITH CIRCUMFLEX
015E; C; 015F; # LATIN CAPITAL LETTER S WITH CEDILLA
0160; C; 0161; # LATIN CAPITAL LETTER S WITH CARON
0162; C; 0163; # LATIN CAPITAL LETTER T WITH CEDILLA
0164; C; 0165; # LATIN CAPITAL LETTER T WITH CARON
0166; C; 0167; # LATIN CAPITAL LETTER T WITH STROKE
0168; C; 0169; # LATIN CAPITAL LETTER U WITH TILDE
016A; C; 016B; # LATIN CAPITAL LETTER U WITH MACRON
016C; C; 016D; # LATIN CAPITAL LETTER U WITH BREVE
016E; C; 016F; # LATIN CAPITAL LETTER U WITH RING ABOVE
0170; C; 0171; # LATIN CAPITAL LETTER U WITH DOUBLE ACUTE
0172; C; 0173; # LATIN CAPITAL LETTER U WITH OGONEK
0174; C; 0175; # LATIN CAPITAL LETTER W WITH CIRCUMFLEX
0176; C; 0177; # LATIN CAPITAL LETTER Y WITH CIRCUMFLEX
0178; C; 00FF; # LATIN CAPITAL LETTER Y WITH DIAERESIS
0179; C; 017A; # LATIN CAPITAL LETTER Z WITH ACUTE
017B; C; 017C; # LATIN CAPITAL LETTER Z WITH DOT ABOVE
017D; C; 017E; # LATIN CAPITAL LETTER Z WITH CARON
017F; C; 0073; # LATIN SMALL LETTER LONG S
0181; C; 0253; # LATIN CAPITAL LETTER B WITH HOOK
0182; C; 0183; # LATIN CAPITAL LETTER B WITH TOPBAR
0184; C; 0185; # LATIN CAPITAL LETTER TONE SIX
0186; C; 0254; # LATIN CAPITAL LETTER OPEN O
0187; C; 0188; # LATIN CAPITAL LETTER C WITH HOOK
0189; C; 0256; # LATIN CAPITAL LETTER AFRICAN D
018A; C; 0257; # LATIN CAPITAL LETTER D WITH HOOK
018B; C; 018C; # LATIN CAPITAL LETTER D WITH TOPBAR
018E; C; 01DD; # LATIN CAPITAL LETTER REVERSED E
018F; C; 0259; # LATIN CAPITAL LETTER SCHWA
0190; C; 025B; # LATIN CAPITAL LETTER OPEN E
0191; C; 0192; # LATIN CAPITAL LETTER F WITH HOOK
0193; C; 0260; # LATIN CAPITAL LETTER G WITH HOOK
0194; C; 0263; # LATIN CAPITAL LETTER GAMMA
0196; C; 0269; # LATIN CAPITAL LETTER IOTA
0197; C; 0268; # LATIN CAPITAL LETTER I WITH STROKE
0198; C; 0199; # LATIN CAPITAL LETTER K WITH HOOK
019C; C; 026F; # LATIN CAPITAL LETTER TURNED M
019D; C; 0272; # LATIN CAPITAL LETTER N WITH LEFT HOOK
019F; C; 0275; # LATIN CAPITAL LETTER O WITH MIDDLE TILDE
01A0; C; 01A1; # LATIN CAPITAL LETTER O WITH HORN
01A2; C; 01A3; # LATIN CAPITAL LETTER OI
01A4; C; 01A5; # LATIN CAPITAL LETTER P WITH HOOK
01A6; C; 0280; # LATIN LETTER YR
01A7; C; 01A8; # LATIN CAPITAL LETTER TONE TWO
01A9; C; 0283; # LATIN CAPITAL LETTER ESH
01AC; C; 01AD; # LATIN CAPITAL LETTER T WITH HOOK
01AE; C; 0288; # LATIN CAPITAL LETTER T WITH RETROFLEX HOOK
01AF; C; 01B0; # LATIN CAPITAL LETTER U WITH HORN
01B1; C; 028A; # LATIN CAPITAL LETTER UPSILON
01B2; C; 028B; # LATIN CAPITAL LETTER V WITH HOOK
01B3; C; 01B4; # LATIN CAPITAL LETTER Y WITH HOOK
01B5; C; 01B6; # LATIN CAPITAL LETTER Z WITH STROKE
01B7; C; 0292; # LATIN CAPITAL LETTER EZH
01B8; C; 01B9; # LATIN CAPITAL LETTER EZH REVERSED
01BC; C; 01BD; # LATIN CAPITAL LETTER TONE FIVE
01C4; C; 01C6; # LATIN CAPITAL LETTER DZ WITH CARON
01C5; C; 01C6; # LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON
01C7; C; 01C9; # LATIN CAPITAL LETTER LJ
01C8; C; 01C9; # LATIN CAPITAL LETTER L WITH SMALL LETTER J
01CA; C; 01CC; # LATIN CAPITAL LETTER NJ
01CB; C; 01CC; # LATIN CAPITAL LETTER N WITH SMALL LETTER J
01CD; C; 01CE; # LATIN CAPITAL LETTER A WITH CARON
01CF; C; 01D0; # LATIN CAPITAL LETTER I WITH CARON
01D1; C; 01D2; # LATIN CAPITAL LETTER O WITH CARON
01D3; C; 01D4; # LATIN CAPITAL LETTER U WITH CARON
01D5; C; 01D6; # LATIN CAPITAL LETTER U WITH DIAERESIS AND MACRON
01D7; C; 01D8; # LATIN CAPITAL LETTER U WITH DIAERESIS AND ACUTE
01D9; C; 01DA; # LATIN CAPITAL LETTER U WITH DIAERESIS AND CARON
01DB; C; 01DC; # LATIN CAPITAL LETTER U WITH DIAERESIS AND GRAVE
01DE; C; 01DF; # LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON
01E0; C; 01E1; # LATIN CAPITAL LETTER A WITH DOT ABOVE AND MACRON
01E2; C; 01E3; # LATIN CAPITAL LETTER AE WITH MACRON
01E4; C; 01E5; # LATIN CAPITAL LETTER G WITH STROKE
01E6; C; 01E7; # LATIN CAPITAL LETTER G WITH CARON
01E8; C; 01E9; # LATIN CAPITAL LETTER K WITH CARON
01EA; C; 01EB; # LATIN CAPITAL LETTER O WITH OGONEK
01EC; C; 01ED; # LATIN CAPITAL LETTER O WITH OGONEK AND MACRON
01EE; C; 01EF; # LATIN CAPITAL LETTER EZH WITH CARON
01F0; F; 006A 030C; # LATIN SMALL LETTER J WITH CARON
01F1; C; 01F3; # LATIN CAPITAL LETTER DZ
01F2; C; 01F3; # LATIN CAPITAL LETTER D WITH SMALL LETTER Z
01F4; C; 01F5; # LATIN CAPITAL LETTER G WITH ACUTE
01F6; C; 0195; # LATIN CAPITAL LETTER HWAIR
01F7; C; 01BF; # LATIN CAPITAL LETTER WYNN
01F8; C; 01F9; # LATIN CAPITAL LETTER N WITH GRAVE
01FA; C; 01FB; # LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE
01FC; C; 01FD; # LATIN CAPITAL LETTER AE WITH ACUTE
01FE; C; 01FF; # LATIN CAPITAL LETTER O WITH STROKE AND ACUTE
0200; C; 0201; # LATIN CAPITAL LETTER A WITH DOUBLE GRAVE
0202; C; 0203; # LATIN CAPITAL LETTER A WITH INVERTED BREVE
0204; C; 0205; # LATIN CAPITAL LETTER E WITH DOUBLE GRAVE

----------------------------------------

TITLE: Generating Data and Running anntest for Vector Recall Testing
DESCRIPTION: Example of using workload.py to generate test data and then using anntest to compare vector search performance between exact and approximate nearest neighbor (ANN) methods, measuring recall metrics.

LANGUAGE: bash
CODE:
$> python workload.py recall_uniform 64 1000 1000 > recall_uniform.sql
$> LD_LIBRARY_PATH=../.libs/ ./benchtest recall_uniform.sql recall_uniform.db
$> # ./anntext [db path] [test name (used only for printed stats)] [ann query] [exact query]
$> LD_LIBRARY_PATH=../.libs/ ./anntest recall_uniform.db 10-recall@10 "SELECT rowid FROM vector_top_k('data_idx', ?, 10)" "SELECT id FROM data ORDER BY vector_distance_cos(emb, ?) LIMIT 10"
open sqlite db at 'recall_uniform.db'
ready to perform 1000 queries with SELECT rowid FROM vector_top_k('data_idx', ?, 10) ann query and SELECT id FROM data ORDER BY vector_distance_cos(emb, ?) LIMIT 10 exact query
88.91% 10-recall@10 (avg.)

----------------------------------------

TITLE: Installing bottomless-cli for Replication Management
DESCRIPTION: Command to install the bottomless-cli tool for managing and inspecting replicated database snapshots using cargo with required Rust flags.

LANGUAGE: bash
CODE:
RUSTFLAGS='--cfg uuid_unstable' cargo install bottomless-cli

----------------------------------------

TITLE: Configuring CMake Build for RLemon Project
DESCRIPTION: Defines a CMake build configuration for the rlemon project. It sets the minimum CMake version to 3.6, specifies the project name as 'rlemon', identifies the source file from the third-party lemon directory, and creates an executable target.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.6)
project(rlemon)

set(SOURCE_FILES third_party/lemon/lemon.c)
add_executable(rlemon ${SOURCE_FILES})

----------------------------------------

TITLE: Unicode Character Mapping Table for Latin and Greek Characters
DESCRIPTION: This plaintext table defines Unicode character relationships for Latin and Greek characters with diacritical marks. Each line represents a character mapping with hexadecimal code points, following a specific format of source code point, mapping type (C/F/S), and target code point(s), with comments describing the character.

LANGUAGE: plaintext
CODE:
1E86; C; 1E87; # LATIN CAPITAL LETTER W WITH DOT ABOVE
1E88; C; 1E89; # LATIN CAPITAL LETTER W WITH DOT BELOW
1E8A; C; 1E8B; # LATIN CAPITAL LETTER X WITH DOT ABOVE
1E8C; C; 1E8D; # LATIN CAPITAL LETTER X WITH DIAERESIS
1E8E; C; 1E8F; # LATIN CAPITAL LETTER Y WITH DOT ABOVE
1E90; C; 1E91; # LATIN CAPITAL LETTER Z WITH CIRCUMFLEX
1E92; C; 1E93; # LATIN CAPITAL LETTER Z WITH DOT BELOW
1E94; C; 1E95; # LATIN CAPITAL LETTER Z WITH LINE BELOW
1E96; F; 0068 0331; # LATIN SMALL LETTER H WITH LINE BELOW
1E97; F; 0074 0308; # LATIN SMALL LETTER T WITH DIAERESIS
1E98; F; 0077 030A; # LATIN SMALL LETTER W WITH RING ABOVE
1E99; F; 0079 030A; # LATIN SMALL LETTER Y WITH RING ABOVE
1E9A; F; 0061 02BE; # LATIN SMALL LETTER A WITH RIGHT HALF RING
1E9B; C; 1E61; # LATIN SMALL LETTER LONG S WITH DOT ABOVE
1E9E; F; 0073 0073; # LATIN CAPITAL LETTER SHARP S
1E9E; S; 00DF; # LATIN CAPITAL LETTER SHARP S
1EA0; C; 1EA1; # LATIN CAPITAL LETTER A WITH DOT BELOW
1EA2; C; 1EA3; # LATIN CAPITAL LETTER A WITH HOOK ABOVE
1EA4; C; 1EA5; # LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE
1EA6; C; 1EA7; # LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE
1EA8; C; 1EA9; # LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE
1EAA; C; 1EAB; # LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE
1EAC; C; 1EAD; # LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW
1EAE; C; 1EAF; # LATIN CAPITAL LETTER A WITH BREVE AND ACUTE
1EB0; C; 1EB1; # LATIN CAPITAL LETTER A WITH BREVE AND GRAVE
1EB2; C; 1EB3; # LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE
1EB4; C; 1EB5; # LATIN CAPITAL LETTER A WITH BREVE AND TILDE
1EB6; C; 1EB7; # LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW
1EB8; C; 1EB9; # LATIN CAPITAL LETTER E WITH DOT BELOW
1EBA; C; 1EBB; # LATIN CAPITAL LETTER E WITH HOOK ABOVE
1EBC; C; 1EBD; # LATIN CAPITAL LETTER E WITH TILDE
1EBE; C; 1EBF; # LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE
1EC0; C; 1EC1; # LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE
1EC2; C; 1EC3; # LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE
1EC4; C; 1EC5; # LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE
1EC6; C; 1EC7; # LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW
1EC8; C; 1EC9; # LATIN CAPITAL LETTER I WITH HOOK ABOVE
1ECA; C; 1ECB; # LATIN CAPITAL LETTER I WITH DOT BELOW
1ECC; C; 1ECD; # LATIN CAPITAL LETTER O WITH DOT BELOW
1ECE; C; 1ECF; # LATIN CAPITAL LETTER O WITH HOOK ABOVE
1ED0; C; 1ED1; # LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE
1ED2; C; 1ED3; # LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE
1ED4; C; 1ED5; # LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE
1ED6; C; 1ED7; # LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE
1ED8; C; 1ED9; # LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW
1EDA; C; 1EDB; # LATIN CAPITAL LETTER O WITH HORN AND ACUTE
1EDC; C; 1EDD; # LATIN CAPITAL LETTER O WITH HORN AND GRAVE
1EDE; C; 1EDF; # LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE
1EE0; C; 1EE1; # LATIN CAPITAL LETTER O WITH HORN AND TILDE
1EE2; C; 1EE3; # LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW
1EE4; C; 1EE5; # LATIN CAPITAL LETTER U WITH DOT BELOW
1EE6; C; 1EE7; # LATIN CAPITAL LETTER U WITH HOOK ABOVE
1EE8; C; 1EE9; # LATIN CAPITAL LETTER U WITH HORN AND ACUTE
1EEA; C; 1EEB; # LATIN CAPITAL LETTER U WITH HORN AND GRAVE
1EEC; C; 1EED; # LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE
1EEE; C; 1EEF; # LATIN CAPITAL LETTER U WITH HORN AND TILDE
1EF0; C; 1EF1; # LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW
1EF2; C; 1EF3; # LATIN CAPITAL LETTER Y WITH GRAVE
1EF4; C; 1EF5; # LATIN CAPITAL LETTER Y WITH DOT BELOW
1EF6; C; 1EF7; # LATIN CAPITAL LETTER Y WITH HOOK ABOVE
1EF8; C; 1EF9; # LATIN CAPITAL LETTER Y WITH TILDE
1EFA; C; 1EFB; # LATIN CAPITAL LETTER MIDDLE-WELSH LL
1EFC; C; 1EFD; # LATIN CAPITAL LETTER MIDDLE-WELSH V
1EFE; C; 1EFF; # LATIN CAPITAL LETTER Y WITH LOOP
1F08; C; 1F00; # GREEK CAPITAL LETTER ALPHA WITH PSILI
1F09; C; 1F01; # GREEK CAPITAL LETTER ALPHA WITH DASIA
1F0A; C; 1F02; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA
1F0B; C; 1F03; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA
1F0C; C; 1F04; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA
1F0D; C; 1F05; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA
1F0E; C; 1F06; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI
1F0F; C; 1F07; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI
1F18; C; 1F10; # GREEK CAPITAL LETTER EPSILON WITH PSILI
1F19; C; 1F11; # GREEK CAPITAL LETTER EPSILON WITH DASIA
1F1A; C; 1F12; # GREEK CAPITAL LETTER EPSILON WITH PSILI AND VARIA
1F1B; C; 1F13; # GREEK CAPITAL LETTER EPSILON WITH DASIA AND VARIA
1F1C; C; 1F14; # GREEK CAPITAL LETTER EPSILON WITH PSILI AND OXIA
1F1D; C; 1F15; # GREEK CAPITAL LETTER EPSILON WITH DASIA AND OXIA
1F28; C; 1F20; # GREEK CAPITAL LETTER ETA WITH PSILI
1F29; C; 1F21; # GREEK CAPITAL LETTER ETA WITH DASIA
1F2A; C; 1F22; # GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA
1F2B; C; 1F23; # GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA
1F2C; C; 1F24; # GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA
1F2D; C; 1F25; # GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA
1F2E; C; 1F26; # GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI
1F2F; C; 1F27; # GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI
1F38; C; 1F30; # GREEK CAPITAL LETTER IOTA WITH PSILI
1F39; C; 1F31; # GREEK CAPITAL LETTER IOTA WITH DASIA
1F3A; C; 1F32; # GREEK CAPITAL LETTER IOTA WITH PSILI AND VARIA
1F3B; C; 1F33; # GREEK CAPITAL LETTER IOTA WITH DASIA AND VARIA
1F3C; C; 1F34; # GREEK CAPITAL LETTER IOTA WITH PSILI AND OXIA
1F3D; C; 1F35; # GREEK CAPITAL LETTER IOTA WITH DASIA AND OXIA
1F3E; C; 1F36; # GREEK CAPITAL LETTER IOTA WITH PSILI AND PERISPOMENI
1F3F; C; 1F37; # GREEK CAPITAL LETTER IOTA WITH DASIA AND PERISPOMENI
1F48; C; 1F40; # GREEK CAPITAL LETTER OMICRON WITH PSILI
1F49; C; 1F41; # GREEK CAPITAL LETTER OMICRON WITH DASIA
1F4A; C; 1F42; # GREEK CAPITAL LETTER OMICRON WITH PSILI AND VARIA
1F4B; C; 1F43; # GREEK CAPITAL LETTER OMICRON WITH DASIA AND VARIA
1F4C; C; 1F44; # GREEK CAPITAL LETTER OMICRON WITH PSILI AND OXIA
1F4D; C; 1F45; # GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA
1F50; F; 03C5 0313; # GREEK SMALL LETTER UPSILON WITH PSILI
1F52; F; 03C5 0313 0300; # GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA
1F54; F; 03C5 0313 0301; # GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA
1F56; F; 03C5 0313 0342; # GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI
1F59; C; 1F51; # GREEK CAPITAL LETTER UPSILON WITH DASIA
1F5B; C; 1F53; # GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA
1F5D; C; 1F55; # GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA
1F5F; C; 1F57; # GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI
1F68; C; 1F60; # GREEK CAPITAL LETTER OMEGA WITH PSILI
1F69; C; 1F61; # GREEK CAPITAL LETTER OMEGA WITH DASIA
1F6A; C; 1F62; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA
1F6B; C; 1F63; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA
1F6C; C; 1F64; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA
1F6D; C; 1F65; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA
1F6E; C; 1F66; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI
1F6F; C; 1F67; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI
1F80; F; 1F00 03B9; # GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI
1F81; F; 1F01 03B9; # GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI
1F82; F; 1F02 03B9; # GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA AND YPOGEGRAMMENI
1F83; F; 1F03 03B9; # GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA AND YPOGEGRAMMENI
1F84; F; 1F04 03B9; # GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA AND YPOGEGRAMMENI
1F85; F; 1F05 03B9; # GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA AND YPOGEGRAMMENI
1F86; F; 1F06 03B9; # GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI
1F87; F; 1F07 03B9; # GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI
1F88; F; 1F00 03B9; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI
1F88; S; 1F80; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI
1F89; F; 1F01 03B9; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND PROSGEGRAMMENI
1F89; S; 1F81; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND PROSGEGRAMMENI
1F8A; F; 1F02 03B9; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA AND PROSGEGRAMMENI
1F8A; S; 1F82; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA AND PROSGEGRAMMENI
1F8B; F; 1F03 03B9; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA AND PROSGEGRAMMENI
1F8B; S; 1F83; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA AND PROSGEGRAMMENI
1F8C; F; 1F04 03B9; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA AND PROSGEGRAMMENI
1F8C; S; 1F84; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA AND PROSGEGRAMMENI
1F8D; F; 1F05 03B9; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA AND PROSGEGRAMMENI
1F8D; S; 1F85; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA AND PROSGEGRAMMENI
1F8E; F; 1F06 03B9; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI
1F8E; S; 1F86; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI
1F8F; F; 1F07 03B9; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI
1F8F; S; 1F87; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI
1F90; F; 1F20 03B9; # GREEK SMALL LETTER ETA WITH PSILI AND YPOGEGRAMMENI
1F91; F; 1F21 03B9; # GREEK SMALL LETTER ETA WITH DASIA AND YPOGEGRAMMENI
1F92; F; 1F22 03B9; # GREEK SMALL LETTER ETA WITH PSILI AND VARIA AND YPOGEGRAMMENI
1F93; F; 1F23 03B9; # GREEK SMALL LETTER ETA WITH DASIA AND VARIA AND YPOGEGRAMMENI
1F94; F; 1F24 03B9; # GREEK SMALL LETTER ETA WITH PSILI AND OXIA AND YPOGEGRAMMENI
1F95; F; 1F25 03B9; # GREEK SMALL LETTER ETA WITH DASIA AND OXIA AND YPOGEGRAMMENI
1F96; F; 1F26 03B9; # GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI
1F97; F; 1F27 03B9; # GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI
1F98; F; 1F20 03B9; # GREEK CAPITAL LETTER ETA WITH PSILI AND PROSGEGRAMMENI

----------------------------------------

TITLE: Wrapping Existing C Struct Pointers in JavaScript
DESCRIPTION: Shows how to wrap an existing C-side struct without taking ownership of its memory by passing a pointer to the constructor.

LANGUAGE: js
CODE:
const m = new MyStruct( functionReturningASharedPtr() );
// calling m.dispose() will _not_ free the wrapped C-side instance
// but will trigger any ondispose handler.

----------------------------------------

TITLE: Creating SQLite Test Database with Tables, Indices and Views
DESCRIPTION: A comprehensive SQL script that generates a test database with multiple tables containing varied data, creates relationships between tables, establishes indices, and defines various views to demonstrate different query patterns. The script uses recursive common table expressions for data generation and performs different types of joins and aggregations.

LANGUAGE: sql
CODE:
.open -new testdb01.db
PRAGMA page_size=512;
BEGIN;
CREATE TABLE t1(a INTEGER PRIMARY KEY, b INT, c INT, d INT, e INT);
WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<50)
INSERT INTO t1(a,b,c,d,e) SELECT x,abs(random()%51),
   abs(random()%100), abs(random()%51), abs(random()%100) FROM c;
CREATE TABLE t2(a INT, b INT, c INT,d INT,e INT,PRIMARY KEY(b,a))WITHOUT ROWID;
INSERT INTO t2 SELECT * FROM t1;
CREATE TABLE t3(a,b,c,d,e);
INSERT INTO t3 SELECT a,b,c,d,e FROM t1 ORDER BY random() LIMIT 5;
INSERT INTO t3 SELECT null,b,c,d,e FROM t1 ORDER BY random() LIMIT 5;
INSERT INTO t3 SELECT a,null,c,d,e FROM t1 ORDER BY random() LIMIT 5;
INSERT INTO t3 SELECT a,b,null,d,e FROM t1 ORDER BY random() LIMIT 5;
INSERT INTO t3 SELECT a,b,c,null,e FROM t1 ORDER BY random() LIMIT 5;
INSERT INTO t3 SELECT a,b,c,d,null FROM t1 ORDER BY random() LIMIT 5;
INSERT INTO t3 SELECT null,null,null,null,null FROM t1 LIMIT 5;
CREATE INDEX t3x1 ON t3(a,b,c,d,e);
CREATE TABLE t4(a INT UNIQUE NOT NULL, b INT UNIQUE NOT NULL,c,d,e);
INSERT OR IGNORE INTO t4 SELECT a,b,c,d,e FROM t3;
CREATE TABLE t5(a INTEGER PRIMARY KEY, b TEXT UNIQUE,c,d,e);
INSERT INTO t5(b) VALUES
   ('truth'),
   ('works'),
   ('offer'),
   ('can'),
   ('anger'),
   ('wisdom'),
   ('send'),
   ('though'),
   ('save'),
   ('between'),
   ('some'),
   ('wine'),
   ('ark'),
   ('smote'),
   ('therein'),
   ('shew'),
   ('morning'),
   ('dwelt'),
   ('begat'),
   ('nothing'),
   ('war'),
   ('above'),
   ('known'),
   ('sacrifice'),
   ('tell'),
   ('departed'),
   ('thyself'),
   ('places'),
   ('bear'),
   ('part'),
   ('while'),
   ('gone'),
   ('cubits'),
   ('walk'),
   ('long'),
   ('near'),
   ('serve'),
   ('fruit'),
   ('doth'),
   ('poor'),
   ('ways'),
   ('child'),
   ('temple'),
   ('angel'),
   ('inhabitants'),
   ('oil'),
   ('died'),
   ('six'),
   ('tree'),
   ('wrath');
UPDATE t1 SET e=(SELECT b FROM t5 WHERE t5.a=(t1.e%51));
UPDATE t5 SET (c,d,e) = 
   (SELECT c,d,e FROM t1 WHERE t1.a=abs(t5.a+random()/100)%50+1);
UPDATE t2 SET e=(SELECT b FROM t5 WHERE t5.a=(t2.e%51));
UPDATE t3 SET e=(SELECT b FROM t5 WHERE t5.a=t3.e);
CREATE INDEX t1e ON t1(e);
CREATE INDEX t2ed ON t2(e,d);
CREATE VIEW v00(a,b,c,d,e) AS SELECT 1,1,1,1,'one';
CREATE VIEW v10(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t1 WHERE a<>25;
CREATE VIEW v20(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t2 WHERE a<>25;
CREATE VIEW v30(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t3 WHERE a<>25;
CREATE VIEW v40(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t4 WHERE a<>25;
CREATE VIEW v50(a,b) AS SELECT a,b FROM t5 WHERE a<>25;
CREATE VIEW v11(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t1 ORDER BY b LIMIT 10;
CREATE VIEW v21(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t2 ORDER BY b LIMIT 10;
CREATE VIEW v31(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t3 ORDER BY b LIMIT 10;
CREATE VIEW v41(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t4 ORDER BY b LIMIT 10;
CREATE VIEW v51(a,b) AS SELECT a,b FROM t5 ORDER BY b LIMIT 10;
CREATE VIEW v12(a,b,c,d,e) AS
  SELECT sum(a), avg(b), count(*), min(d), e FROM t1 GROUP BY 5;
CREATE VIEW v22(a,b,c,d,e) AS
  SELECT sum(a), avg(b), count(*), min(d), e FROM t2 GROUP BY 5
    HAVING count(*)>1 ORDER BY 3, 1;
CREATE VIEW v32(a,b,c,d,e) AS
  SELECT sum(a), avg(b), count(*), min(d), e FROM t3 GROUP BY 5
    HAVING count(*)>1 ORDER BY 3, 1;
CREATE VIEW v42(a,b,c,d,e) AS
  SELECT sum(a), avg(b), count(*), min(d), e FROM t4 GROUP BY 5
    HAVING min(d)<30 ORDER BY 3, 1;
CREATE VIEW v52(a,b,c,d,e) AS
  SELECT count(*), min(b), substr(b,1,1), min(a), max(a) FROM t5
   GROUP BY 3 ORDER BY 1;

CREATE VIEW v13(a,b,c,d,e) AS
  SELECT a,b,c,d,e FROM t1
  UNION SELECT a,b,c,d,e FROM t2
  UNION SELECT a,b,c,d,e FROM t3;
CREATE VIEW v23(a,b,c,d,e) AS
  SELECT a,b,c,d,e FROM t1
  EXCEPT SELECT a,b,c,d,e FROM t1 WHERE b<25;

CREATE VIEW v60(a,b,c,d,e) AS
  SELECT t1.a,t2.b,t1.c,t2.d,t1.e
    FROM t1 LEFT JOIN t2 ON (t1.a=t2.b);
CREATE VIEW v61(a,b,c,d,e) AS
  SELECT t2.a,t3.b,t2.c,t3.d,t2.e
    FROM t2 LEFT JOIN t3 ON (t2.a=t3.a);
CREATE VIEW v62(a,b,c,d,e) AS
  SELECT t1.a,t2.b,t3.c,t4.d,t5.b
    FROM t1 JOIN t2 ON (t1.a=t2.b)
            JOIN t3 ON (t1.a=t3.a)
            JOIN t4 ON (t4.b=t3.b)
            LEFT JOIN t5 ON (t5.a=t1.c);
CREATE VIEW v70(a,b,c,d,e) AS
  WITH RECURSIVE c0(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c0 WHERE x<9)
  SELECT x, b, c, d, e FROM c0 JOIN t1 ON (t1.a=50-c0.x);
COMMIT;
VACUUM;
.shell bin2c testdb01.db

----------------------------------------

TITLE: Deploying sqld on Fly.io
DESCRIPTION: Command to launch sqld on Fly.io using the existing configuration in the repository. This allows for easy deployment of sqld to the Fly.io platform.

LANGUAGE: console
CODE:
flyctl launch

----------------------------------------

TITLE: Creating Indexes on JSON Properties
DESCRIPTION: Creates four indexes on specific JSON properties extracted using the arrow operator, which enables efficient querying of JSON data.

LANGUAGE: sql
CODE:
CREATE INDEX t2x1 ON t2(x->>'a');
CREATE INDEX t2x2 ON t2(x->>'b');
CREATE INDEX t2x3 ON t2(x->>'e');
CREATE INDEX t2x4 ON t2(x->>'f');

----------------------------------------

TITLE: Unicode Character Case Mapping Table
DESCRIPTION: A comprehensive table of Unicode character mappings that shows the relationship between uppercase and lowercase letter forms. Each line contains the hexadecimal code point of a capital letter, followed by its conversion type (C for single character, F for ligature mapping), and the target lowercase character code point(s). This mapping is essential for case conversion operations in text processing systems.

LANGUAGE: Unicode
CODE:
2C1B; C; 2C4B; # GLAGOLITIC CAPITAL LETTER SHTA
2C1C; C; 2C4C; # GLAGOLITIC CAPITAL LETTER TSI
2C1D; C; 2C4D; # GLAGOLITIC CAPITAL LETTER CHRIVI
2C1E; C; 2C4E; # GLAGOLITIC CAPITAL LETTER SHA
2C1F; C; 2C4F; # GLAGOLITIC CAPITAL LETTER YERU
2C20; C; 2C50; # GLAGOLITIC CAPITAL LETTER YERI
2C21; C; 2C51; # GLAGOLITIC CAPITAL LETTER YATI
2C22; C; 2C52; # GLAGOLITIC CAPITAL LETTER SPIDERY HA
2C23; C; 2C53; # GLAGOLITIC CAPITAL LETTER YU
2C24; C; 2C54; # GLAGOLITIC CAPITAL LETTER SMALL YUS
2C25; C; 2C55; # GLAGOLITIC CAPITAL LETTER SMALL YUS WITH TAIL
2C26; C; 2C56; # GLAGOLITIC CAPITAL LETTER YO
2C27; C; 2C57; # GLAGOLITIC CAPITAL LETTER IOTATED SMALL YUS
2C28; C; 2C58; # GLAGOLITIC CAPITAL LETTER BIG YUS
2C29; C; 2C59; # GLAGOLITIC CAPITAL LETTER IOTATED BIG YUS
2C2A; C; 2C5A; # GLAGOLITIC CAPITAL LETTER FITA
2C2B; C; 2C5B; # GLAGOLITIC CAPITAL LETTER IZHITSA
2C2C; C; 2C5C; # GLAGOLITIC CAPITAL LETTER SHTAPIC
2C2D; C; 2C5D; # GLAGOLITIC CAPITAL LETTER TROKUTASTI A
2C2E; C; 2C5E; # GLAGOLITIC CAPITAL LETTER LATINATE MYSLITE
2C60; C; 2C61; # LATIN CAPITAL LETTER L WITH DOUBLE BAR
2C62; C; 026B; # LATIN CAPITAL LETTER L WITH MIDDLE TILDE
2C63; C; 1D7D; # LATIN CAPITAL LETTER P WITH STROKE
2C64; C; 027D; # LATIN CAPITAL LETTER R WITH TAIL
2C67; C; 2C68; # LATIN CAPITAL LETTER H WITH DESCENDER
2C69; C; 2C6A; # LATIN CAPITAL LETTER K WITH DESCENDER
2C6B; C; 2C6C; # LATIN CAPITAL LETTER Z WITH DESCENDER
2C6D; C; 0251; # LATIN CAPITAL LETTER ALPHA
2C6E; C; 0271; # LATIN CAPITAL LETTER M WITH HOOK
2C6F; C; 0250; # LATIN CAPITAL LETTER TURNED A
2C70; C; 0252; # LATIN CAPITAL LETTER TURNED ALPHA
2C72; C; 2C73; # LATIN CAPITAL LETTER W WITH HOOK
2C75; C; 2C76; # LATIN CAPITAL LETTER HALF H
2C7E; C; 023F; # LATIN CAPITAL LETTER S WITH SWASH TAIL
2C7F; C; 0240; # LATIN CAPITAL LETTER Z WITH SWASH TAIL
2C80; C; 2C81; # COPTIC CAPITAL LETTER ALFA
2C82; C; 2C83; # COPTIC CAPITAL LETTER VIDA
2C84; C; 2C85; # COPTIC CAPITAL LETTER GAMMA
2C86; C; 2C87; # COPTIC CAPITAL LETTER DALDA
2C88; C; 2C89; # COPTIC CAPITAL LETTER EIE
2C8A; C; 2C8B; # COPTIC CAPITAL LETTER SOU
2C8C; C; 2C8D; # COPTIC CAPITAL LETTER ZATA
2C8E; C; 2C8F; # COPTIC CAPITAL LETTER HATE
2C90; C; 2C91; # COPTIC CAPITAL LETTER THETHE
2C92; C; 2C93; # COPTIC CAPITAL LETTER IAUDA
2C94; C; 2C95; # COPTIC CAPITAL LETTER KAPA
2C96; C; 2C97; # COPTIC CAPITAL LETTER LAULA
2C98; C; 2C99; # COPTIC CAPITAL LETTER MI
2C9A; C; 2C9B; # COPTIC CAPITAL LETTER NI
2C9C; C; 2C9D; # COPTIC CAPITAL LETTER KSI
2C9E; C; 2C9F; # COPTIC CAPITAL LETTER O
2CA0; C; 2CA1; # COPTIC CAPITAL LETTER PI
2CA2; C; 2CA3; # COPTIC CAPITAL LETTER RO
2CA4; C; 2CA5; # COPTIC CAPITAL LETTER SIMA
2CA6; C; 2CA7; # COPTIC CAPITAL LETTER TAU
2CA8; C; 2CA9; # COPTIC CAPITAL LETTER UA
2CAA; C; 2CAB; # COPTIC CAPITAL LETTER FI
2CAC; C; 2CAD; # COPTIC CAPITAL LETTER KHI
2CAE; C; 2CAF; # COPTIC CAPITAL LETTER PSI
2CB0; C; 2CB1; # COPTIC CAPITAL LETTER OOU
2CB2; C; 2CB3; # COPTIC CAPITAL LETTER DIALECT-P ALEF
2CB4; C; 2CB5; # COPTIC CAPITAL LETTER OLD COPTIC AIN
2CB6; C; 2CB7; # COPTIC CAPITAL LETTER CRYPTOGRAMMIC EIE
2CB8; C; 2CB9; # COPTIC CAPITAL LETTER DIALECT-P KAPA
2CBA; C; 2CBB; # COPTIC CAPITAL LETTER DIALECT-P NI
2CBC; C; 2CBD; # COPTIC CAPITAL LETTER CRYPTOGRAMMIC NI
2CBE; C; 2CBF; # COPTIC CAPITAL LETTER OLD COPTIC OOU
2CC0; C; 2CC1; # COPTIC CAPITAL LETTER SAMPI
2CC2; C; 2CC3; # COPTIC CAPITAL LETTER CROSSED SHEI
2CC4; C; 2CC5; # COPTIC CAPITAL LETTER OLD COPTIC SHEI
2CC6; C; 2CC7; # COPTIC CAPITAL LETTER OLD COPTIC ESH
2CC8; C; 2CC9; # COPTIC CAPITAL LETTER AKHMIMIC KHEI
2CCA; C; 2CCB; # COPTIC CAPITAL LETTER DIALECT-P HORI
2CCC; C; 2CCD; # COPTIC CAPITAL LETTER OLD COPTIC HORI
2CCE; C; 2CCF; # COPTIC CAPITAL LETTER OLD COPTIC HA
2CD0; C; 2CD1; # COPTIC CAPITAL LETTER L-SHAPED HA
2CD2; C; 2CD3; # COPTIC CAPITAL LETTER OLD COPTIC HEI
2CD4; C; 2CD5; # COPTIC CAPITAL LETTER OLD COPTIC HAT
2CD6; C; 2CD7; # COPTIC CAPITAL LETTER OLD COPTIC GANGIA
2CD8; C; 2CD9; # COPTIC CAPITAL LETTER OLD COPTIC DJA
2CDA; C; 2CDB; # COPTIC CAPITAL LETTER OLD COPTIC SHIMA
2CDC; C; 2CDD; # COPTIC CAPITAL LETTER OLD NUBIAN SHIMA
2CDE; C; 2CDF; # COPTIC CAPITAL LETTER OLD NUBIAN NGI
2CE0; C; 2CE1; # COPTIC CAPITAL LETTER OLD NUBIAN NYI
2CE2; C; 2CE3; # COPTIC CAPITAL LETTER OLD NUBIAN WAU
2CEB; C; 2CEC; # COPTIC CAPITAL LETTER CRYPTOGRAMMIC SHEI
2CED; C; 2CEE; # COPTIC CAPITAL LETTER CRYPTOGRAMMIC GANGIA
2CF2; C; 2CF3; # COPTIC CAPITAL LETTER BOHAIRIC KHEI
A640; C; A641; # CYRILLIC CAPITAL LETTER ZEMLYA
A642; C; A643; # CYRILLIC CAPITAL LETTER DZELO
A644; C; A645; # CYRILLIC CAPITAL LETTER REVERSED DZE
A646; C; A647; # CYRILLIC CAPITAL LETTER IOTA
A648; C; A649; # CYRILLIC CAPITAL LETTER DJERV
A64A; C; A64B; # CYRILLIC CAPITAL LETTER MONOGRAPH UK
A64C; C; A64D; # CYRILLIC CAPITAL LETTER BROAD OMEGA
A64E; C; A64F; # CYRILLIC CAPITAL LETTER NEUTRAL YER
A650; C; A651; # CYRILLIC CAPITAL LETTER YERU WITH BACK YER
A652; C; A653; # CYRILLIC CAPITAL LETTER IOTIFIED YAT
A654; C; A655; # CYRILLIC CAPITAL LETTER REVERSED YU
A656; C; A657; # CYRILLIC CAPITAL LETTER IOTIFIED A
A658; C; A659; # CYRILLIC CAPITAL LETTER CLOSED LITTLE YUS
A65A; C; A65B; # CYRILLIC CAPITAL LETTER BLENDED YUS
A65C; C; A65D; # CYRILLIC CAPITAL LETTER IOTIFIED CLOSED LITTLE YUS
A65E; C; A65F; # CYRILLIC CAPITAL LETTER YN
A660; C; A661; # CYRILLIC CAPITAL LETTER REVERSED TSE
A662; C; A663; # CYRILLIC CAPITAL LETTER SOFT DE
A664; C; A665; # CYRILLIC CAPITAL LETTER SOFT EL
A666; C; A667; # CYRILLIC CAPITAL LETTER SOFT EM
A668; C; A669; # CYRILLIC CAPITAL LETTER MONOCULAR O
A66A; C; A66B; # CYRILLIC CAPITAL LETTER BINOCULAR O
A66C; C; A66D; # CYRILLIC CAPITAL LETTER DOUBLE MONOCULAR O
A680; C; A681; # CYRILLIC CAPITAL LETTER DWE
A682; C; A683; # CYRILLIC CAPITAL LETTER DZWE
A684; C; A685; # CYRILLIC CAPITAL LETTER ZHWE
A686; C; A687; # CYRILLIC CAPITAL LETTER CCHE
A688; C; A689; # CYRILLIC CAPITAL LETTER DZZE
A68A; C; A68B; # CYRILLIC CAPITAL LETTER TE WITH MIDDLE HOOK
A68C; C; A68D; # CYRILLIC CAPITAL LETTER TWE
A68E; C; A68F; # CYRILLIC CAPITAL LETTER TSWE
A690; C; A691; # CYRILLIC CAPITAL LETTER TSSE
A692; C; A693; # CYRILLIC CAPITAL LETTER TCHE
A694; C; A695; # CYRILLIC CAPITAL LETTER HWE
A696; C; A697; # CYRILLIC CAPITAL LETTER SHWE
A722; C; A723; # LATIN CAPITAL LETTER EGYPTOLOGICAL ALEF
A724; C; A725; # LATIN CAPITAL LETTER EGYPTOLOGICAL AIN
A726; C; A727; # LATIN CAPITAL LETTER HENG
A728; C; A729; # LATIN CAPITAL LETTER TZ
A72A; C; A72B; # LATIN CAPITAL LETTER TRESILLO
A72C; C; A72D; # LATIN CAPITAL LETTER CUATRILLO
A72E; C; A72F; # LATIN CAPITAL LETTER CUATRILLO WITH COMMA
A732; C; A733; # LATIN CAPITAL LETTER AA
A734; C; A735; # LATIN CAPITAL LETTER AO
A736; C; A737; # LATIN CAPITAL LETTER AU
A738; C; A739; # LATIN CAPITAL LETTER AV
A73A; C; A73B; # LATIN CAPITAL LETTER AV WITH HORIZONTAL BAR
A73C; C; A73D; # LATIN CAPITAL LETTER AY
A73E; C; A73F; # LATIN CAPITAL LETTER REVERSED C WITH DOT
A740; C; A741; # LATIN CAPITAL LETTER K WITH STROKE
A742; C; A743; # LATIN CAPITAL LETTER K WITH DIAGONAL STROKE
A744; C; A745; # LATIN CAPITAL LETTER K WITH STROKE AND DIAGONAL STROKE
A746; C; A747; # LATIN CAPITAL LETTER BROKEN L
A748; C; A749; # LATIN CAPITAL LETTER L WITH HIGH STROKE
A74A; C; A74B; # LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY
A74C; C; A74D; # LATIN CAPITAL LETTER O WITH LOOP
A74E; C; A74F; # LATIN CAPITAL LETTER OO
A750; C; A751; # LATIN CAPITAL LETTER P WITH STROKE THROUGH DESCENDER
A752; C; A753; # LATIN CAPITAL LETTER P WITH FLOURISH
A754; C; A755; # LATIN CAPITAL LETTER P WITH SQUIRREL TAIL
A756; C; A757; # LATIN CAPITAL LETTER Q WITH STROKE THROUGH DESCENDER
A758; C; A759; # LATIN CAPITAL LETTER Q WITH DIAGONAL STROKE
A75A; C; A75B; # LATIN CAPITAL LETTER R ROTUNDA
A75C; C; A75D; # LATIN CAPITAL LETTER RUM ROTUNDA
A75E; C; A75F; # LATIN CAPITAL LETTER V WITH DIAGONAL STROKE
A760; C; A761; # LATIN CAPITAL LETTER VY
A762; C; A763; # LATIN CAPITAL LETTER VISIGOTHIC Z
A764; C; A765; # LATIN CAPITAL LETTER THORN WITH STROKE
A766; C; A767; # LATIN CAPITAL LETTER THORN WITH STROKE THROUGH DESCENDER
A768; C; A769; # LATIN CAPITAL LETTER VEND
A76A; C; A76B; # LATIN CAPITAL LETTER ET
A76C; C; A76D; # LATIN CAPITAL LETTER IS
A76E; C; A76F; # LATIN CAPITAL LETTER CON
A779; C; A77A; # LATIN CAPITAL LETTER INSULAR D
A77B; C; A77C; # LATIN CAPITAL LETTER INSULAR F
A77D; C; 1D79; # LATIN CAPITAL LETTER INSULAR G
A77E; C; A77F; # LATIN CAPITAL LETTER TURNED INSULAR G
A780; C; A781; # LATIN CAPITAL LETTER TURNED L
A782; C; A783; # LATIN CAPITAL LETTER INSULAR R
A784; C; A785; # LATIN CAPITAL LETTER INSULAR S
A786; C; A787; # LATIN CAPITAL LETTER INSULAR T
A78B; C; A78C; # LATIN CAPITAL LETTER SALTILLO
A78D; C; 0265; # LATIN CAPITAL LETTER TURNED H
A790; C; A791; # LATIN CAPITAL LETTER N WITH DESCENDER
A792; C; A793; # LATIN CAPITAL LETTER C WITH BAR
A7A0; C; A7A1; # LATIN CAPITAL LETTER G WITH OBLIQUE STROKE
A7A2; C; A7A3; # LATIN CAPITAL LETTER K WITH OBLIQUE STROKE
A7A4; C; A7A5; # LATIN CAPITAL LETTER N WITH OBLIQUE STROKE
A7A6; C; A7A7; # LATIN CAPITAL LETTER R WITH OBLIQUE STROKE
A7A8; C; A7A9; # LATIN CAPITAL LETTER S WITH OBLIQUE STROKE
A7AA; C; 0266; # LATIN CAPITAL LETTER H WITH HOOK
FB00; F; 0066 0066; # LATIN SMALL LIGATURE FF
FB01; F; 0066 0069; # LATIN SMALL LIGATURE FI
FB02; F; 0066 006C; # LATIN SMALL LIGATURE FL
FB03; F; 0066 0066 0069; # LATIN SMALL LIGATURE FFI
FB04; F; 0066 0066 006C; # LATIN SMALL LIGATURE FFL
FB05; F; 0073 0074; # LATIN SMALL LIGATURE LONG S T
FB06; F; 0073 0074; # LATIN SMALL LIGATURE ST
FB13; F; 0574 0576; # ARMENIAN SMALL LIGATURE MEN NOW
FB14; F; 0574 0565; # ARMENIAN SMALL LIGATURE MEN ECH
FB15; F; 0574 056B; # ARMENIAN SMALL LIGATURE MEN INI
FB16; F; 057E 0576; # ARMENIAN SMALL LIGATURE VEW NOW
FB17; F; 0574 056D; # ARMENIAN SMALL LIGATURE MEN XEH
FF21; C; FF41; # FULLWIDTH LATIN CAPITAL LETTER A
FF22; C; FF42; # FULLWIDTH LATIN CAPITAL LETTER B
FF23; C; FF43; # FULLWIDTH LATIN CAPITAL LETTER C
FF24; C; FF44; # FULLWIDTH LATIN CAPITAL LETTER D
FF25; C; FF45; # FULLWIDTH LATIN CAPITAL LETTER E

----------------------------------------

TITLE: Creating a Struct Instance with Existing Memory
DESCRIPTION: Shows how to create a struct instance that uses existing memory by passing a WASM heap pointer. This approach is used for proxying C-side instances without taking ownership of the memory.

LANGUAGE: javascript
CODE:
const x = new MyStruct( someCFuncWhichReturnsAMyStructPointer() );
...
x.dispose(); // does NOT free the memory

----------------------------------------

TITLE: Comment About Static Feature in libsql
DESCRIPTION: A comment questioning why a feature is marked as 'static'. This appears to be a development note related to the project's feature configuration.

LANGUAGE: rust
CODE:
// why is it `static` feature?

----------------------------------------

TITLE: Simple Full-Scan Algorithm for IN-Operator in libsql
DESCRIPTION: Implementation of a simple full-scan algorithm for evaluating IN operators. This algorithm always produces correct results but may be inefficient for large RHS sets. It checks each row in the RHS against the LHS, returning TRUE on match, tracking NULL conditions, and returning FALSE as a fallback.

LANGUAGE: markdown
CODE:
  1.  Set the null-flag to false
  2.  For each row in the RHS:
      <ol type='a'>
      <li>  Compare the LHS against the RHS
      <li>  If the LHS exactly matches the RHS, immediately return TRUE
      <li>  If the comparison result is NULL, set the null-flag to true
      </ol>
  3.  If the null-flag is true, return NULL.
  4.  Return FALSE

----------------------------------------

TITLE: Unicode Case Mapping Definitions for Fullwidth Latin and Deseret Characters
DESCRIPTION: This snippet contains mappings between uppercase and lowercase Unicode characters. Each line follows the format 'uppercase_code; mapping_type; lowercase_code; # character_description' where 'C' indicates a simple case mapping relationship.

LANGUAGE: plaintext
CODE:
FF26; C; FF46; # FULLWIDTH LATIN CAPITAL LETTER F
FF27; C; FF47; # FULLWIDTH LATIN CAPITAL LETTER G
FF28; C; FF48; # FULLWIDTH LATIN CAPITAL LETTER H
FF29; C; FF49; # FULLWIDTH LATIN CAPITAL LETTER I
FF2A; C; FF4A; # FULLWIDTH LATIN CAPITAL LETTER J
FF2B; C; FF4B; # FULLWIDTH LATIN CAPITAL LETTER K
FF2C; C; FF4C; # FULLWIDTH LATIN CAPITAL LETTER L
FF2D; C; FF4D; # FULLWIDTH LATIN CAPITAL LETTER M
FF2E; C; FF4E; # FULLWIDTH LATIN CAPITAL LETTER N
FF2F; C; FF4F; # FULLWIDTH LATIN CAPITAL LETTER O
FF30; C; FF50; # FULLWIDTH LATIN CAPITAL LETTER P
FF31; C; FF51; # FULLWIDTH LATIN CAPITAL LETTER Q
FF32; C; FF52; # FULLWIDTH LATIN CAPITAL LETTER R
FF33; C; FF53; # FULLWIDTH LATIN CAPITAL LETTER S
FF34; C; FF54; # FULLWIDTH LATIN CAPITAL LETTER T
FF35; C; FF55; # FULLWIDTH LATIN CAPITAL LETTER U
FF36; C; FF56; # FULLWIDTH LATIN CAPITAL LETTER V
FF37; C; FF57; # FULLWIDTH LATIN CAPITAL LETTER W
FF38; C; FF58; # FULLWIDTH LATIN CAPITAL LETTER X
FF39; C; FF59; # FULLWIDTH LATIN CAPITAL LETTER Y
FF3A; C; FF5A; # FULLWIDTH LATIN CAPITAL LETTER Z
10400; C; 10428; # DESERET CAPITAL LETTER LONG I
10401; C; 10429; # DESERET CAPITAL LETTER LONG E
10402; C; 1042A; # DESERET CAPITAL LETTER LONG A
10403; C; 1042B; # DESERET CAPITAL LETTER LONG AH
10404; C; 1042C; # DESERET CAPITAL LETTER LONG O
10405; C; 1042D; # DESERET CAPITAL LETTER LONG OO
10406; C; 1042E; # DESERET CAPITAL LETTER SHORT I
10407; C; 1042F; # DESERET CAPITAL LETTER SHORT E
10408; C; 10430; # DESERET CAPITAL LETTER SHORT A
10409; C; 10431; # DESERET CAPITAL LETTER SHORT AH
1040A; C; 10432; # DESERET CAPITAL LETTER SHORT O
1040B; C; 10433; # DESERET CAPITAL LETTER SHORT OO
1040C; C; 10434; # DESERET CAPITAL LETTER AY
1040D; C; 10435; # DESERET CAPITAL LETTER OW
1040E; C; 10436; # DESERET CAPITAL LETTER WU
1040F; C; 10437; # DESERET CAPITAL LETTER YEE
10410; C; 10438; # DESERET CAPITAL LETTER H
10411; C; 10439; # DESERET CAPITAL LETTER PEE
10412; C; 1043A; # DESERET CAPITAL LETTER BEE
10413; C; 1043B; # DESERET CAPITAL LETTER TEE
10414; C; 1043C; # DESERET CAPITAL LETTER DEE
10415; C; 1043D; # DESERET CAPITAL LETTER CHEE
10416; C; 1043E; # DESERET CAPITAL LETTER JEE
10417; C; 1043F; # DESERET CAPITAL LETTER KAY
10418; C; 10440; # DESERET CAPITAL LETTER GAY
10419; C; 10441; # DESERET CAPITAL LETTER EF
1041A; C; 10442; # DESERET CAPITAL LETTER VEE
1041B; C; 10443; # DESERET CAPITAL LETTER ETH
1041C; C; 10444; # DESERET CAPITAL LETTER THEE
1041D; C; 10445; # DESERET CAPITAL LETTER ES
1041E; C; 10446; # DESERET CAPITAL LETTER ZEE
1041F; C; 10447; # DESERET CAPITAL LETTER ESH
10420; C; 10448; # DESERET CAPITAL LETTER ZHEE
10421; C; 10449; # DESERET CAPITAL LETTER ER
10422; C; 1044A; # DESERET CAPITAL LETTER EL
10423; C; 1044B; # DESERET CAPITAL LETTER EM
10424; C; 1044C; # DESERET CAPITAL LETTER EN
10425; C; 1044D; # DESERET CAPITAL LETTER ENG
10426; C; 1044E; # DESERET CAPITAL LETTER OI
10427; C; 1044F; # DESERET CAPITAL LETTER EW

----------------------------------------

TITLE: C Struct Definition Example
DESCRIPTION: Example of a C struct that would be bound using Jaccwabyt. This struct contains an integer, a pointer, and a 64-bit integer which will be mapped to JavaScript.

LANGUAGE: c
CODE:
// C-side:
struct Foo {
  int member1;
  void * member2;
  int64_t member3;
};

----------------------------------------

TITLE: SQLite3 Database Format Magic Definitions
DESCRIPTION: Magic(5) pattern definitions for recognizing SQLite3 databases with various application IDs. The patterns match the SQLite3 file header string and then check offsets 68 (application_id) or 60 (user_version) to identify specific applications that use SQLite as their file format.

LANGUAGE: magic
CODE:
0    string  =SQLite\ format\ 3
>68  belong  =0x0f055112  Fossil checkout -
>68  belong  =0x0f055113  Fossil global configuration -
>68  belong  =0x0f055111  Fossil repository -
>68  belong  =0x42654462  Bentley Systems BeSQLite Database -
>68  belong  =0x42654c6e  Bentley Systems Localization File -
>60  belong  =0x5f4d544e  Monotone source repository -
>68  belong  =0x47504b47  OGC GeoPackage file -
>68  belong  =0x47503130  OGC GeoPackage version 1.0 file -
>68  belong  =0x45737269  Esri Spatially-Enabled Database -
>68  belong  =0x4d504258  MBTiles tileset -
>68  belong  =0x6a035744  TeXnicard card database
>0   string  =SQLite      SQLite3 database

----------------------------------------

TITLE: Unicode Character Case Mapping Table for Latin, Greek, and Cyrillic Letters
DESCRIPTION: A comprehensive mapping table showing Unicode code point relationships between uppercase and lowercase letters. Each line contains the source code point, the mapping type (C for case mapping, F for compatibility formatting), the target code point, and a comment describing the character.

LANGUAGE: plaintext
CODE:
0206; C; 0207; # LATIN CAPITAL LETTER E WITH INVERTED BREVE
0208; C; 0209; # LATIN CAPITAL LETTER I WITH DOUBLE GRAVE
020A; C; 020B; # LATIN CAPITAL LETTER I WITH INVERTED BREVE
020C; C; 020D; # LATIN CAPITAL LETTER O WITH DOUBLE GRAVE
020E; C; 020F; # LATIN CAPITAL LETTER O WITH INVERTED BREVE
0210; C; 0211; # LATIN CAPITAL LETTER R WITH DOUBLE GRAVE
0212; C; 0213; # LATIN CAPITAL LETTER R WITH INVERTED BREVE
0214; C; 0215; # LATIN CAPITAL LETTER U WITH DOUBLE GRAVE
0216; C; 0217; # LATIN CAPITAL LETTER U WITH INVERTED BREVE
0218; C; 0219; # LATIN CAPITAL LETTER S WITH COMMA BELOW
021A; C; 021B; # LATIN CAPITAL LETTER T WITH COMMA BELOW
021C; C; 021D; # LATIN CAPITAL LETTER YOGH
021E; C; 021F; # LATIN CAPITAL LETTER H WITH CARON
0220; C; 019E; # LATIN CAPITAL LETTER N WITH LONG RIGHT LEG
0222; C; 0223; # LATIN CAPITAL LETTER OU
0224; C; 0225; # LATIN CAPITAL LETTER Z WITH HOOK
0226; C; 0227; # LATIN CAPITAL LETTER A WITH DOT ABOVE
0228; C; 0229; # LATIN CAPITAL LETTER E WITH CEDILLA
022A; C; 022B; # LATIN CAPITAL LETTER O WITH DIAERESIS AND MACRON
022C; C; 022D; # LATIN CAPITAL LETTER O WITH TILDE AND MACRON
022E; C; 022F; # LATIN CAPITAL LETTER O WITH DOT ABOVE
0230; C; 0231; # LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON
0232; C; 0233; # LATIN CAPITAL LETTER Y WITH MACRON
023A; C; 2C65; # LATIN CAPITAL LETTER A WITH STROKE
023B; C; 023C; # LATIN CAPITAL LETTER C WITH STROKE
023D; C; 019A; # LATIN CAPITAL LETTER L WITH BAR
023E; C; 2C66; # LATIN CAPITAL LETTER T WITH DIAGONAL STROKE
0241; C; 0242; # LATIN CAPITAL LETTER GLOTTAL STOP
0243; C; 0180; # LATIN CAPITAL LETTER B WITH STROKE
0244; C; 0289; # LATIN CAPITAL LETTER U BAR
0245; C; 028C; # LATIN CAPITAL LETTER TURNED V
0246; C; 0247; # LATIN CAPITAL LETTER E WITH STROKE
0248; C; 0249; # LATIN CAPITAL LETTER J WITH STROKE
024A; C; 024B; # LATIN CAPITAL LETTER SMALL Q WITH HOOK TAIL
024C; C; 024D; # LATIN CAPITAL LETTER R WITH STROKE
024E; C; 024F; # LATIN CAPITAL LETTER Y WITH STROKE
0345; C; 03B9; # COMBINING GREEK YPOGEGRAMMENI
0370; C; 0371; # GREEK CAPITAL LETTER HETA
0372; C; 0373; # GREEK CAPITAL LETTER ARCHAIC SAMPI
0376; C; 0377; # GREEK CAPITAL LETTER PAMPHYLIAN DIGAMMA
0386; C; 03AC; # GREEK CAPITAL LETTER ALPHA WITH TONOS
0388; C; 03AD; # GREEK CAPITAL LETTER EPSILON WITH TONOS
0389; C; 03AE; # GREEK CAPITAL LETTER ETA WITH TONOS
038A; C; 03AF; # GREEK CAPITAL LETTER IOTA WITH TONOS
038C; C; 03CC; # GREEK CAPITAL LETTER OMICRON WITH TONOS
038E; C; 03CD; # GREEK CAPITAL LETTER UPSILON WITH TONOS
038F; C; 03CE; # GREEK CAPITAL LETTER OMEGA WITH TONOS
0390; F; 03B9 0308 0301; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS
0391; C; 03B1; # GREEK CAPITAL LETTER ALPHA
0392; C; 03B2; # GREEK CAPITAL LETTER BETA
0393; C; 03B3; # GREEK CAPITAL LETTER GAMMA
0394; C; 03B4; # GREEK CAPITAL LETTER DELTA
0395; C; 03B5; # GREEK CAPITAL LETTER EPSILON
0396; C; 03B6; # GREEK CAPITAL LETTER ZETA
0397; C; 03B7; # GREEK CAPITAL LETTER ETA
0398; C; 03B8; # GREEK CAPITAL LETTER THETA
0399; C; 03B9; # GREEK CAPITAL LETTER IOTA
039A; C; 03BA; # GREEK CAPITAL LETTER KAPPA
039B; C; 03BB; # GREEK CAPITAL LETTER LAMDA
039C; C; 03BC; # GREEK CAPITAL LETTER MU
039D; C; 03BD; # GREEK CAPITAL LETTER NU
039E; C; 03BE; # GREEK CAPITAL LETTER XI
039F; C; 03BF; # GREEK CAPITAL LETTER OMICRON
03A0; C; 03C0; # GREEK CAPITAL LETTER PI
03A1; C; 03C1; # GREEK CAPITAL LETTER RHO
03A3; C; 03C3; # GREEK CAPITAL LETTER SIGMA
03A4; C; 03C4; # GREEK CAPITAL LETTER TAU
03A5; C; 03C5; # GREEK CAPITAL LETTER UPSILON
03A6; C; 03C6; # GREEK CAPITAL LETTER PHI
03A7; C; 03C7; # GREEK CAPITAL LETTER CHI
03A8; C; 03C8; # GREEK CAPITAL LETTER PSI
03A9; C; 03C9; # GREEK CAPITAL LETTER OMEGA
03AA; C; 03CA; # GREEK CAPITAL LETTER IOTA WITH DIALYTIKA
03AB; C; 03CB; # GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA
03B0; F; 03C5 0308 0301; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS
03C2; C; 03C3; # GREEK SMALL LETTER FINAL SIGMA
03CF; C; 03D7; # GREEK CAPITAL KAI SYMBOL
03D0; C; 03B2; # GREEK BETA SYMBOL
03D1; C; 03B8; # GREEK THETA SYMBOL
03D5; C; 03C6; # GREEK PHI SYMBOL
03D6; C; 03C0; # GREEK PI SYMBOL
03D8; C; 03D9; # GREEK LETTER ARCHAIC KOPPA
03DA; C; 03DB; # GREEK LETTER STIGMA
03DC; C; 03DD; # GREEK LETTER DIGAMMA
03DE; C; 03DF; # GREEK LETTER KOPPA
03E0; C; 03E1; # GREEK LETTER SAMPI
03E2; C; 03E3; # COPTIC CAPITAL LETTER SHEI
03E4; C; 03E5; # COPTIC CAPITAL LETTER FEI
03E6; C; 03E7; # COPTIC CAPITAL LETTER KHEI
03E8; C; 03E9; # COPTIC CAPITAL LETTER HORI
03EA; C; 03EB; # COPTIC CAPITAL LETTER GANGIA
03EC; C; 03ED; # COPTIC CAPITAL LETTER SHIMA
03EE; C; 03EF; # COPTIC CAPITAL LETTER DEI
03F0; C; 03BA; # GREEK KAPPA SYMBOL
03F1; C; 03C1; # GREEK RHO SYMBOL
03F4; C; 03B8; # GREEK CAPITAL THETA SYMBOL
03F5; C; 03B5; # GREEK LUNATE EPSILON SYMBOL
03F7; C; 03F8; # GREEK CAPITAL LETTER SHO
03F9; C; 03F2; # GREEK CAPITAL LUNATE SIGMA SYMBOL
03FA; C; 03FB; # GREEK CAPITAL LETTER SAN
03FD; C; 037B; # GREEK CAPITAL REVERSED LUNATE SIGMA SYMBOL
03FE; C; 037C; # GREEK CAPITAL DOTTED LUNATE SIGMA SYMBOL
03FF; C; 037D; # GREEK CAPITAL REVERSED DOTTED LUNATE SIGMA SYMBOL
0400; C; 0450; # CYRILLIC CAPITAL LETTER IE WITH GRAVE
0401; C; 0451; # CYRILLIC CAPITAL LETTER IO
0402; C; 0452; # CYRILLIC CAPITAL LETTER DJE
0403; C; 0453; # CYRILLIC CAPITAL LETTER GJE
0404; C; 0454; # CYRILLIC CAPITAL LETTER UKRAINIAN IE
0405; C; 0455; # CYRILLIC CAPITAL LETTER DZE
0406; C; 0456; # CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I
0407; C; 0457; # CYRILLIC CAPITAL LETTER YI
0408; C; 0458; # CYRILLIC CAPITAL LETTER JE
0409; C; 0459; # CYRILLIC CAPITAL LETTER LJE
040A; C; 045A; # CYRILLIC CAPITAL LETTER NJE
040B; C; 045B; # CYRILLIC CAPITAL LETTER TSHE
040C; C; 045C; # CYRILLIC CAPITAL LETTER KJE
040D; C; 045D; # CYRILLIC CAPITAL LETTER I WITH GRAVE
040E; C; 045E; # CYRILLIC CAPITAL LETTER SHORT U
040F; C; 045F; # CYRILLIC CAPITAL LETTER DZHE
0410; C; 0430; # CYRILLIC CAPITAL LETTER A
0411; C; 0431; # CYRILLIC CAPITAL LETTER BE
0412; C; 0432; # CYRILLIC CAPITAL LETTER VE
0413; C; 0433; # CYRILLIC CAPITAL LETTER GHE
0414; C; 0434; # CYRILLIC CAPITAL LETTER DE
0415; C; 0435; # CYRILLIC CAPITAL LETTER IE
0416; C; 0436; # CYRILLIC CAPITAL LETTER ZHE
0417; C; 0437; # CYRILLIC CAPITAL LETTER ZE
0418; C; 0438; # CYRILLIC CAPITAL LETTER I
0419; C; 0439; # CYRILLIC CAPITAL LETTER SHORT I
041A; C; 043A; # CYRILLIC CAPITAL LETTER KA
041B; C; 043B; # CYRILLIC CAPITAL LETTER EL
041C; C; 043C; # CYRILLIC CAPITAL LETTER EM
041D; C; 043D; # CYRILLIC CAPITAL LETTER EN
041E; C; 043E; # CYRILLIC CAPITAL LETTER O
041F; C; 043F; # CYRILLIC CAPITAL LETTER PE
0420; C; 0440; # CYRILLIC CAPITAL LETTER ER
0421; C; 0441; # CYRILLIC CAPITAL LETTER ES
0422; C; 0442; # CYRILLIC CAPITAL LETTER TE
0423; C; 0443; # CYRILLIC CAPITAL LETTER U
0424; C; 0444; # CYRILLIC CAPITAL LETTER EF
0425; C; 0445; # CYRILLIC CAPITAL LETTER HA
0426; C; 0446; # CYRILLIC CAPITAL LETTER TSE
0427; C; 0447; # CYRILLIC CAPITAL LETTER CHE
0428; C; 0448; # CYRILLIC CAPITAL LETTER SHA
0429; C; 0449; # CYRILLIC CAPITAL LETTER SHCHA
042A; C; 044A; # CYRILLIC CAPITAL LETTER HARD SIGN
042B; C; 044B; # CYRILLIC CAPITAL LETTER YERU
042C; C; 044C; # CYRILLIC CAPITAL LETTER SOFT SIGN
042D; C; 044D; # CYRILLIC CAPITAL LETTER E
042E; C; 044E; # CYRILLIC CAPITAL LETTER YU
042F; C; 044F; # CYRILLIC CAPITAL LETTER YA
0460; C; 0461; # CYRILLIC CAPITAL LETTER OMEGA
0462; C; 0463; # CYRILLIC CAPITAL LETTER YAT
0464; C; 0465; # CYRILLIC CAPITAL LETTER IOTIFIED E
0466; C; 0467; # CYRILLIC CAPITAL LETTER LITTLE YUS
0468; C; 0469; # CYRILLIC CAPITAL LETTER IOTIFIED LITTLE YUS
046A; C; 046B; # CYRILLIC CAPITAL LETTER BIG YUS
046C; C; 046D; # CYRILLIC CAPITAL LETTER IOTIFIED BIG YUS
046E; C; 046F; # CYRILLIC CAPITAL LETTER KSI
0470; C; 0471; # CYRILLIC CAPITAL LETTER PSI
0472; C; 0473; # CYRILLIC CAPITAL LETTER FITA
0474; C; 0475; # CYRILLIC CAPITAL LETTER IZHITSA
0476; C; 0477; # CYRILLIC CAPITAL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT
0478; C; 0479; # CYRILLIC CAPITAL LETTER UK
047A; C; 047B; # CYRILLIC CAPITAL LETTER ROUND OMEGA
047C; C; 047D; # CYRILLIC CAPITAL LETTER OMEGA WITH TITLO
047E; C; 047F; # CYRILLIC CAPITAL LETTER OT
0480; C; 0481; # CYRILLIC CAPITAL LETTER KOPPA
048A; C; 048B; # CYRILLIC CAPITAL LETTER SHORT I WITH TAIL
048C; C; 048D; # CYRILLIC CAPITAL LETTER SEMISOFT SIGN
048E; C; 048F; # CYRILLIC CAPITAL LETTER ER WITH TICK
0490; C; 0491; # CYRILLIC CAPITAL LETTER GHE WITH UPTURN
0492; C; 0493; # CYRILLIC CAPITAL LETTER GHE WITH STROKE
0494; C; 0495; # CYRILLIC CAPITAL LETTER GHE WITH MIDDLE HOOK
0496; C; 0497; # CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER
0498; C; 0499; # CYRILLIC CAPITAL LETTER ZE WITH DESCENDER
049A; C; 049B; # CYRILLIC CAPITAL LETTER KA WITH DESCENDER
049C; C; 049D; # CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE
049E; C; 049F; # CYRILLIC CAPITAL LETTER KA WITH STROKE
04A0; C; 04A1; # CYRILLIC CAPITAL LETTER BASHKIR KA
04A2; C; 04A3; # CYRILLIC CAPITAL LETTER EN WITH DESCENDER
04A4; C; 04A5; # CYRILLIC CAPITAL LIGATURE EN GHE
04A6; C; 04A7; # CYRILLIC CAPITAL LETTER PE WITH MIDDLE HOOK
04A8; C; 04A9; # CYRILLIC CAPITAL LETTER ABKHASIAN HA
04AA; C; 04AB; # CYRILLIC CAPITAL LETTER ES WITH DESCENDER
04AC; C; 04AD; # CYRILLIC CAPITAL LETTER TE WITH DESCENDER
04AE; C; 04AF; # CYRILLIC CAPITAL LETTER STRAIGHT U
04B0; C; 04B1; # CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE
04B2; C; 04B3; # CYRILLIC CAPITAL LETTER HA WITH DESCENDER
04B4; C; 04B5; # CYRILLIC CAPITAL LIGATURE TE TSE
04B6; C; 04B7; # CYRILLIC CAPITAL LETTER CHE WITH DESCENDER
04B8; C; 04B9; # CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE
04BA; C; 04BB; # CYRILLIC CAPITAL LETTER SHHA
04BC; C; 04BD; # CYRILLIC CAPITAL LETTER ABKHASIAN CHE
04BE; C; 04BF; # CYRILLIC CAPITAL LETTER ABKHASIAN CHE WITH DESCENDER
04C0; C; 04CF; # CYRILLIC LETTER PALOCHKA
04C1; C; 04C2; # CYRILLIC CAPITAL LETTER ZHE WITH BREVE
04C3; C; 04C4; # CYRILLIC CAPITAL LETTER KA WITH HOOK
04C5; C; 04C6; # CYRILLIC CAPITAL LETTER EL WITH TAIL
04C7; C; 04C8; # CYRILLIC CAPITAL LETTER EN WITH HOOK

----------------------------------------

TITLE: Unicode Character Mapping Data for Greek and Cyrillic Alphabets
DESCRIPTION: A detailed reference mapping of Unicode character codepoints for Greek and Cyrillic alphabets. Each line includes the hex code, character name, general category, bidirectional class, decomposition, numeric value, and case mappings.

LANGUAGE: data
CODE:
03C0;GREEK SMALL LETTER PI;Ll;0;L;;;;;N;;;03A0;;03A0
03C1;GREEK SMALL LETTER RHO;Ll;0;L;;;;;N;;;03A1;;03A1
03C2;GREEK SMALL LETTER FINAL SIGMA;Ll;0;L;;;;;N;;;03A3;;03A3
03C3;GREEK SMALL LETTER SIGMA;Ll;0;L;;;;;N;;;03A3;;03A3
03C4;GREEK SMALL LETTER TAU;Ll;0;L;;;;;N;;;03A4;;03A4
03C5;GREEK SMALL LETTER UPSILON;Ll;0;L;;;;;N;;;03A5;;03A5
03C6;GREEK SMALL LETTER PHI;Ll;0;L;;;;;N;;;03A6;;03A6
03C7;GREEK SMALL LETTER CHI;Ll;0;L;;;;;N;;;03A7;;03A7
03C8;GREEK SMALL LETTER PSI;Ll;0;L;;;;;N;;;03A8;;03A8
03C9;GREEK SMALL LETTER OMEGA;Ll;0;L;;;;;N;;;03A9;;03A9
03CA;GREEK SMALL LETTER IOTA WITH DIALYTIKA;Ll;0;L;03B9 0308;;;;N;GREEK SMALL LETTER IOTA DIAERESIS;;03AA;;03AA
03CB;GREEK SMALL LETTER UPSILON WITH DIALYTIKA;Ll;0;L;03C5 0308;;;;N;GREEK SMALL LETTER UPSILON DIAERESIS;;03AB;;03AB
03CC;GREEK SMALL LETTER OMICRON WITH TONOS;Ll;0;L;03BF 0301;;;;N;GREEK SMALL LETTER OMICRON TONOS;;038C;;038C
03CD;GREEK SMALL LETTER UPSILON WITH TONOS;Ll;0;L;03C5 0301;;;;N;GREEK SMALL LETTER UPSILON TONOS;;038E;;038E
03CE;GREEK SMALL LETTER OMEGA WITH TONOS;Ll;0;L;03C9 0301;;;;N;GREEK SMALL LETTER OMEGA TONOS;;038F;;038F
03CF;GREEK CAPITAL KAI SYMBOL;Lu;0;L;;;;;N;;;;03D7;
03D0;GREEK BETA SYMBOL;Ll;0;L;<compat> 03B2;;;;N;GREEK SMALL LETTER CURLED BETA;;0392;;0392
03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398
03D2;GREEK UPSILON WITH HOOK SYMBOL;Lu;0;L;<compat> 03A5;;;;N;GREEK CAPITAL LETTER UPSILON HOOK;;;;
03D3;GREEK UPSILON WITH ACUTE AND HOOK SYMBOL;Lu;0;L;03D2 0301;;;;N;GREEK CAPITAL LETTER UPSILON HOOK TONOS;;;;
03D4;GREEK UPSILON WITH DIAERESIS AND HOOK SYMBOL;Lu;0;L;03D2 0308;;;;N;GREEK CAPITAL LETTER UPSILON HOOK DIAERESIS;;;;
03D5;GREEK PHI SYMBOL;Ll;0;L;<compat> 03C6;;;;N;GREEK SMALL LETTER SCRIPT PHI;;03A6;;03A6
03D6;GREEK PI SYMBOL;Ll;0;L;<compat> 03C0;;;;N;GREEK SMALL LETTER OMEGA PI;;03A0;;03A0
03D7;GREEK KAI SYMBOL;Ll;0;L;;;;;N;;;03CF;;03CF
03D8;GREEK LETTER ARCHAIC KOPPA;Lu;0;L;;;;;N;;;;03D9;
03D9;GREEK SMALL LETTER ARCHAIC KOPPA;Ll;0;L;;;;;N;;;03D8;;03D8
03DA;GREEK LETTER STIGMA;Lu;0;L;;;;;N;GREEK CAPITAL LETTER STIGMA;;;03DB;
03DB;GREEK SMALL LETTER STIGMA;Ll;0;L;;;;;N;;;03DA;;03DA
03DC;GREEK LETTER DIGAMMA;Lu;0;L;;;;;N;GREEK CAPITAL LETTER DIGAMMA;;;03DD;
03DD;GREEK SMALL LETTER DIGAMMA;Ll;0;L;;;;;N;;;03DC;;03DC
03DE;GREEK LETTER KOPPA;Lu;0;L;;;;;N;GREEK CAPITAL LETTER KOPPA;;;03DF;
03DF;GREEK SMALL LETTER KOPPA;Ll;0;L;;;;;N;;;03DE;;03DE
03E0;GREEK LETTER SAMPI;Lu;0;L;;;;;N;GREEK CAPITAL LETTER SAMPI;;;03E1;
03E1;GREEK SMALL LETTER SAMPI;Ll;0;L;;;;;N;;;03E0;;03E0
03E2;COPTIC CAPITAL LETTER SHEI;Lu;0;L;;;;;N;GREEK CAPITAL LETTER SHEI;;;03E3;
03E3;COPTIC SMALL LETTER SHEI;Ll;0;L;;;;;N;GREEK SMALL LETTER SHEI;;03E2;;03E2
03E4;COPTIC CAPITAL LETTER FEI;Lu;0;L;;;;;N;GREEK CAPITAL LETTER FEI;;;03E5;
03E5;COPTIC SMALL LETTER FEI;Ll;0;L;;;;;N;GREEK SMALL LETTER FEI;;03E4;;03E4
03E6;COPTIC CAPITAL LETTER KHEI;Lu;0;L;;;;;N;GREEK CAPITAL LETTER KHEI;;;03E7;
03E7;COPTIC SMALL LETTER KHEI;Ll;0;L;;;;;N;GREEK SMALL LETTER KHEI;;03E6;;03E6
03E8;COPTIC CAPITAL LETTER HORI;Lu;0;L;;;;;N;GREEK CAPITAL LETTER HORI;;;03E9;
03E9;COPTIC SMALL LETTER HORI;Ll;0;L;;;;;N;GREEK SMALL LETTER HORI;;03E8;;03E8
03EA;COPTIC CAPITAL LETTER GANGIA;Lu;0;L;;;;;N;GREEK CAPITAL LETTER GANGIA;;;03EB;
03EB;COPTIC SMALL LETTER GANGIA;Ll;0;L;;;;;N;GREEK SMALL LETTER GANGIA;;03EA;;03EA
03EC;COPTIC CAPITAL LETTER SHIMA;Lu;0;L;;;;;N;GREEK CAPITAL LETTER SHIMA;;;03ED;
03ED;COPTIC SMALL LETTER SHIMA;Ll;0;L;;;;;N;GREEK SMALL LETTER SHIMA;;03EC;;03EC
03EE;COPTIC CAPITAL LETTER DEI;Lu;0;L;;;;;N;GREEK CAPITAL LETTER DEI;;;03EF;
03EF;COPTIC SMALL LETTER DEI;Ll;0;L;;;;;N;GREEK SMALL LETTER DEI;;03EE;;03EE
03F0;GREEK KAPPA SYMBOL;Ll;0;L;<compat> 03BA;;;;N;GREEK SMALL LETTER SCRIPT KAPPA;;039A;;039A
03F1;GREEK RHO SYMBOL;Ll;0;L;<compat> 03C1;;;;N;GREEK SMALL LETTER TAILED RHO;;03A1;;03A1
03F2;GREEK LUNATE SIGMA SYMBOL;Ll;0;L;<compat> 03C2;;;;N;GREEK SMALL LETTER LUNATE SIGMA;;03F9;;03F9
03F3;GREEK LETTER YOT;Ll;0;L;;;;;N;;;;;
03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;
03F5;GREEK LUNATE EPSILON SYMBOL;Ll;0;L;<compat> 03B5;;;;N;;;0395;;0395
03F6;GREEK REVERSED LUNATE EPSILON SYMBOL;Sm;0;ON;;;;;N;;;;;
03F7;GREEK CAPITAL LETTER SHO;Lu;0;L;;;;;N;;;;03F8;
03F8;GREEK SMALL LETTER SHO;Ll;0;L;;;;;N;;;03F7;;03F7
03F9;GREEK CAPITAL LUNATE SIGMA SYMBOL;Lu;0;L;<compat> 03A3;;;;N;;;;03F2;
03FA;GREEK CAPITAL LETTER SAN;Lu;0;L;;;;;N;;;;03FB;
03FB;GREEK SMALL LETTER SAN;Ll;0;L;;;;;N;;;03FA;;03FA
03FC;GREEK RHO WITH STROKE SYMBOL;Ll;0;L;;;;;N;;;;;
03FD;GREEK CAPITAL REVERSED LUNATE SIGMA SYMBOL;Lu;0;L;;;;;N;;;;037B;
03FE;GREEK CAPITAL DOTTED LUNATE SIGMA SYMBOL;Lu;0;L;;;;;N;;;;037C;
03FF;GREEK CAPITAL REVERSED DOTTED LUNATE SIGMA SYMBOL;Lu;0;L;;;;;N;;;;037D;
0400;CYRILLIC CAPITAL LETTER IE WITH GRAVE;Lu;0;L;0415 0300;;;;N;;;;0450;
0401;CYRILLIC CAPITAL LETTER IO;Lu;0;L;0415 0308;;;;N;;;;0451;
0402;CYRILLIC CAPITAL LETTER DJE;Lu;0;L;;;;;N;;;;0452;
0403;CYRILLIC CAPITAL LETTER GJE;Lu;0;L;0413 0301;;;;N;;;;0453;
0404;CYRILLIC CAPITAL LETTER UKRAINIAN IE;Lu;0;L;;;;;N;CYRILLIC CAPITAL LETTER E;;;0454;
0405;CYRILLIC CAPITAL LETTER DZE;Lu;0;L;;;;;N;;;;0455;
0406;CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I;Lu;0;L;;;;;N;CYRILLIC CAPITAL LETTER I;;;0456;
0407;CYRILLIC CAPITAL LETTER YI;Lu;0;L;0406 0308;;;;N;;;;0457;
0408;CYRILLIC CAPITAL LETTER JE;Lu;0;L;;;;;N;;;;0458;
0409;CYRILLIC CAPITAL LETTER LJE;Lu;0;L;;;;;N;;;;0459;
040A;CYRILLIC CAPITAL LETTER NJE;Lu;0;L;;;;;N;;;;045A;
040B;CYRILLIC CAPITAL LETTER TSHE;Lu;0;L;;;;;N;;;;045B;
040C;CYRILLIC CAPITAL LETTER KJE;Lu;0;L;041A 0301;;;;N;;;;045C;
040D;CYRILLIC CAPITAL LETTER I WITH GRAVE;Lu;0;L;0418 0300;;;;N;;;;045D;
040E;CYRILLIC CAPITAL LETTER SHORT U;Lu;0;L;0423 0306;;;;N;;;;045E;
040F;CYRILLIC CAPITAL LETTER DZHE;Lu;0;L;;;;;N;;;;045F;
0410;CYRILLIC CAPITAL LETTER A;Lu;0;L;;;;;N;;;;0430;
0411;CYRILLIC CAPITAL LETTER BE;Lu;0;L;;;;;N;;;;0431;
0412;CYRILLIC CAPITAL LETTER VE;Lu;0;L;;;;;N;;;;0432;
0413;CYRILLIC CAPITAL LETTER GHE;Lu;0;L;;;;;N;CYRILLIC CAPITAL LETTER GE;;;0433;
0414;CYRILLIC CAPITAL LETTER DE;Lu;0;L;;;;;N;;;;0434;
0415;CYRILLIC CAPITAL LETTER IE;Lu;0;L;;;;;N;;;;0435;
0416;CYRILLIC CAPITAL LETTER ZHE;Lu;0;L;;;;;N;;;;0436;
0417;CYRILLIC CAPITAL LETTER ZE;Lu;0;L;;;;;N;;;;0437;
0418;CYRILLIC CAPITAL LETTER I;Lu;0;L;;;;;N;CYRILLIC CAPITAL LETTER II;;;0438;
0419;CYRILLIC CAPITAL LETTER SHORT I;Lu;0;L;0418 0306;;;;N;CYRILLIC CAPITAL LETTER SHORT II;;;0439;
041A;CYRILLIC CAPITAL LETTER KA;Lu;0;L;;;;;N;;;;043A;
041B;CYRILLIC CAPITAL LETTER EL;Lu;0;L;;;;;N;;;;043B;
041C;CYRILLIC CAPITAL LETTER EM;Lu;0;L;;;;;N;;;;043C;
041D;CYRILLIC CAPITAL LETTER EN;Lu;0;L;;;;;N;;;;043D;
041E;CYRILLIC CAPITAL LETTER O;Lu;0;L;;;;;N;;;;043E;
041F;CYRILLIC CAPITAL LETTER PE;Lu;0;L;;;;;N;;;;043F;
0420;CYRILLIC CAPITAL LETTER ER;Lu;0;L;;;;;N;;;;0440;
0421;CYRILLIC CAPITAL LETTER ES;Lu;0;L;;;;;N;;;;0441;
0422;CYRILLIC CAPITAL LETTER TE;Lu;0;L;;;;;N;;;;0442;
0423;CYRILLIC CAPITAL LETTER U;Lu;0;L;;;;;N;;;;0443;
0424;CYRILLIC CAPITAL LETTER EF;Lu;0;L;;;;;N;;;;0444;
0425;CYRILLIC CAPITAL LETTER HA;Lu;0;L;;;;;N;CYRILLIC CAPITAL LETTER KHA;;;0445;
0426;CYRILLIC CAPITAL LETTER TSE;Lu;0;L;;;;;N;;;;0446;
0427;CYRILLIC CAPITAL LETTER CHE;Lu;0;L;;;;;N;;;;0447;
0428;CYRILLIC CAPITAL LETTER SHA;Lu;0;L;;;;;N;;;;0448;
0429;CYRILLIC CAPITAL LETTER SHCHA;Lu;0;L;;;;;N;;;;0449;
042A;CYRILLIC CAPITAL LETTER HARD SIGN;Lu;0;L;;;;;N;;;;044A;
042B;CYRILLIC CAPITAL LETTER YERU;Lu;0;L;;;;;N;CYRILLIC CAPITAL LETTER YERI;;;044B;
042C;CYRILLIC CAPITAL LETTER SOFT SIGN;Lu;0;L;;;;;N;;;;044C;
042D;CYRILLIC CAPITAL LETTER E;Lu;0;L;;;;;N;CYRILLIC CAPITAL LETTER REVERSED E;;;044D;
042E;CYRILLIC CAPITAL LETTER YU;Lu;0;L;;;;;N;CYRILLIC CAPITAL LETTER IU;;;044E;
042F;CYRILLIC CAPITAL LETTER YA;Lu;0;L;;;;;N;CYRILLIC CAPITAL LETTER IA;;;044F;
0430;CYRILLIC SMALL LETTER A;Ll;0;L;;;;;N;;;0410;;0410
0431;CYRILLIC SMALL LETTER BE;Ll;0;L;;;;;N;;;0411;;0411
0432;CYRILLIC SMALL LETTER VE;Ll;0;L;;;;;N;;;0412;;0412
0433;CYRILLIC SMALL LETTER GHE;Ll;0;L;;;;;N;CYRILLIC SMALL LETTER GE;;0413;;0413
0434;CYRILLIC SMALL LETTER DE;Ll;0;L;;;;;N;;;0414;;0414
0435;CYRILLIC SMALL LETTER IE;Ll;0;L;;;;;N;;;0415;;0415
0436;CYRILLIC SMALL LETTER ZHE;Ll;0;L;;;;;N;;;0416;;0416
0437;CYRILLIC SMALL LETTER ZE;Ll;0;L;;;;;N;;;0417;;0417
0438;CYRILLIC SMALL LETTER I;Ll;0;L;;;;;N;CYRILLIC SMALL LETTER II;;0418;;0418
0439;CYRILLIC SMALL LETTER SHORT I;Ll;0;L;0438 0306;;;;N;CYRILLIC SMALL LETTER SHORT II;;0419;;0419
043A;CYRILLIC SMALL LETTER KA;Ll;0;L;;;;;N;;;041A;;041A
043B;CYRILLIC SMALL LETTER EL;Ll;0;L;;;;;N;;;041B;;041B
043C;CYRILLIC SMALL LETTER EM;Ll;0;L;;;;;N;;;041C;;041C
043D;CYRILLIC SMALL LETTER EN;Ll;0;L;;;;;N;;;041D;;041D
043E;CYRILLIC SMALL LETTER O;Ll;0;L;;;;;N;;;041E;;041E
043F;CYRILLIC SMALL LETTER PE;Ll;0;L;;;;;N;;;041F;;041F
0440;CYRILLIC SMALL LETTER ER;Ll;0;L;;;;;N;;;0420;;0420
0441;CYRILLIC SMALL LETTER ES;Ll;0;L;;;;;N;;;0421;;0421
0442;CYRILLIC SMALL LETTER TE;Ll;0;L;;;;;N;;;0422;;0422
0443;CYRILLIC SMALL LETTER U;Ll;0;L;;;;;N;;;0423;;0423
0444;CYRILLIC SMALL LETTER EF;Ll;0;L;;;;;N;;;0424;;0424
0445;CYRILLIC SMALL LETTER HA;Ll;0;L;;;;;N;CYRILLIC SMALL LETTER KHA;;0425;;0425
0446;CYRILLIC SMALL LETTER TSE;Ll;0;L;;;;;N;;;0426;;0426
0447;CYRILLIC SMALL LETTER CHE;Ll;0;L;;;;;N;;;0427;;0427
0448;CYRILLIC SMALL LETTER SHA;Ll;0;L;;;;;N;;;0428;;0428
0449;CYRILLIC SMALL LETTER SHCHA;Ll;0;L;;;;;N;;;0429;;0429
044A;CYRILLIC SMALL LETTER HARD SIGN;Ll;0;L;;;;;N;;;042A;;042A
044B;CYRILLIC SMALL LETTER YERU;Ll;0;L;;;;;N;CYRILLIC SMALL LETTER YERI;;042B;;042B
044C;CYRILLIC SMALL LETTER SOFT SIGN;Ll;0;L;;;;;N;;;042C;;042C
044D;CYRILLIC SMALL LETTER E;Ll;0;L;;;;;N;CYRILLIC SMALL LETTER REVERSED E;;042D;;042D
044E;CYRILLIC SMALL LETTER YU;Ll;0;L;;;;;N;CYRILLIC SMALL LETTER IU;;042E;;042E
044F;CYRILLIC SMALL LETTER YA;Ll;0;L;;;;;N;CYRILLIC SMALL LETTER IA;;042F;;042F
0450;CYRILLIC SMALL LETTER IE WITH GRAVE;Ll;0;L;0435 0300;;;;N;;;0400;;0400
0451;CYRILLIC SMALL LETTER IO;Ll;0;L;0435 0308;;;;N;;;0401;;0401
0452;CYRILLIC SMALL LETTER DJE;Ll;0;L;;;;;N;;;0402;;0402

----------------------------------------

TITLE: Unicode Character Database Entries for Braille Patterns and Arrows
DESCRIPTION: This data represents a subset of the Unicode Character Database (UCD) containing definitions for Braille patterns and directional arrow symbols. Each line follows the UCD format with fields for code point, character name, general category, and various other properties.

LANGUAGE: data
CODE:
2889;BRAILLE PATTERN DOTS-148;So;0;L;;;;;N;;;;;
288A;BRAILLE PATTERN DOTS-248;So;0;L;;;;;N;;;;;
288B;BRAILLE PATTERN DOTS-1248;So;0;L;;;;;N;;;;;
288C;BRAILLE PATTERN DOTS-348;So;0;L;;;;;N;;;;;
288D;BRAILLE PATTERN DOTS-1348;So;0;L;;;;;N;;;;;
288E;BRAILLE PATTERN DOTS-2348;So;0;L;;;;;N;;;;;
288F;BRAILLE PATTERN DOTS-12348;So;0;L;;;;;N;;;;;
2890;BRAILLE PATTERN DOTS-58;So;0;L;;;;;N;;;;;
2891;BRAILLE PATTERN DOTS-158;So;0;L;;;;;N;;;;;
2892;BRAILLE PATTERN DOTS-258;So;0;L;;;;;N;;;;;
2893;BRAILLE PATTERN DOTS-1258;So;0;L;;;;;N;;;;;
2894;BRAILLE PATTERN DOTS-358;So;0;L;;;;;N;;;;;
2895;BRAILLE PATTERN DOTS-1358;So;0;L;;;;;N;;;;;
2896;BRAILLE PATTERN DOTS-2358;So;0;L;;;;;N;;;;;
2897;BRAILLE PATTERN DOTS-12358;So;0;L;;;;;N;;;;;
2898;BRAILLE PATTERN DOTS-458;So;0;L;;;;;N;;;;;
2899;BRAILLE PATTERN DOTS-1458;So;0;L;;;;;N;;;;;
289A;BRAILLE PATTERN DOTS-2458;So;0;L;;;;;N;;;;;
289B;BRAILLE PATTERN DOTS-12458;So;0;L;;;;;N;;;;;
289C;BRAILLE PATTERN DOTS-3458;So;0;L;;;;;N;;;;;
289D;BRAILLE PATTERN DOTS-13458;So;0;L;;;;;N;;;;;
289E;BRAILLE PATTERN DOTS-23458;So;0;L;;;;;N;;;;;
289F;BRAILLE PATTERN DOTS-123458;So;0;L;;;;;N;;;;;
28A0;BRAILLE PATTERN DOTS-68;So;0;L;;;;;N;;;;;
28A1;BRAILLE PATTERN DOTS-168;So;0;L;;;;;N;;;;;
28A2;BRAILLE PATTERN DOTS-268;So;0;L;;;;;N;;;;;
28A3;BRAILLE PATTERN DOTS-1268;So;0;L;;;;;N;;;;;
28A4;BRAILLE PATTERN DOTS-368;So;0;L;;;;;N;;;;;
28A5;BRAILLE PATTERN DOTS-1368;So;0;L;;;;;N;;;;;
28A6;BRAILLE PATTERN DOTS-2368;So;0;L;;;;;N;;;;;
28A7;BRAILLE PATTERN DOTS-12368;So;0;L;;;;;N;;;;;
28A8;BRAILLE PATTERN DOTS-468;So;0;L;;;;;N;;;;;
28A9;BRAILLE PATTERN DOTS-1468;So;0;L;;;;;N;;;;;
28AA;BRAILLE PATTERN DOTS-2468;So;0;L;;;;;N;;;;;
28AB;BRAILLE PATTERN DOTS-12468;So;0;L;;;;;N;;;;;
28AC;BRAILLE PATTERN DOTS-3468;So;0;L;;;;;N;;;;;
28AD;BRAILLE PATTERN DOTS-13468;So;0;L;;;;;N;;;;;
28AE;BRAILLE PATTERN DOTS-23468;So;0;L;;;;;N;;;;;
28AF;BRAILLE PATTERN DOTS-123468;So;0;L;;;;;N;;;;;
28B0;BRAILLE PATTERN DOTS-568;So;0;L;;;;;N;;;;;
28B1;BRAILLE PATTERN DOTS-1568;So;0;L;;;;;N;;;;;
28B2;BRAILLE PATTERN DOTS-2568;So;0;L;;;;;N;;;;;
28B3;BRAILLE PATTERN DOTS-12568;So;0;L;;;;;N;;;;;
28B4;BRAILLE PATTERN DOTS-3568;So;0;L;;;;;N;;;;;
28B5;BRAILLE PATTERN DOTS-13568;So;0;L;;;;;N;;;;;
28B6;BRAILLE PATTERN DOTS-23568;So;0;L;;;;;N;;;;;
28B7;BRAILLE PATTERN DOTS-123568;So;0;L;;;;;N;;;;;
28B8;BRAILLE PATTERN DOTS-4568;So;0;L;;;;;N;;;;;
28B9;BRAILLE PATTERN DOTS-14568;So;0;L;;;;;N;;;;;
28BA;BRAILLE PATTERN DOTS-24568;So;0;L;;;;;N;;;;;
28BB;BRAILLE PATTERN DOTS-124568;So;0;L;;;;;N;;;;;
28BC;BRAILLE PATTERN DOTS-34568;So;0;L;;;;;N;;;;;
28BD;BRAILLE PATTERN DOTS-134568;So;0;L;;;;;N;;;;;
28BE;BRAILLE PATTERN DOTS-234568;So;0;L;;;;;N;;;;;
28BF;BRAILLE PATTERN DOTS-1234568;So;0;L;;;;;N;;;;;
28C0;BRAILLE PATTERN DOTS-78;So;0;L;;;;;N;;;;;
28C1;BRAILLE PATTERN DOTS-178;So;0;L;;;;;N;;;;;
28C2;BRAILLE PATTERN DOTS-278;So;0;L;;;;;N;;;;;
28C3;BRAILLE PATTERN DOTS-1278;So;0;L;;;;;N;;;;;
28C4;BRAILLE PATTERN DOTS-378;So;0;L;;;;;N;;;;;
28C5;BRAILLE PATTERN DOTS-1378;So;0;L;;;;;N;;;;;
28C6;BRAILLE PATTERN DOTS-2378;So;0;L;;;;;N;;;;;
28C7;BRAILLE PATTERN DOTS-12378;So;0;L;;;;;N;;;;;
28C8;BRAILLE PATTERN DOTS-478;So;0;L;;;;;N;;;;;
28C9;BRAILLE PATTERN DOTS-1478;So;0;L;;;;;N;;;;;
28CA;BRAILLE PATTERN DOTS-2478;So;0;L;;;;;N;;;;;
28CB;BRAILLE PATTERN DOTS-12478;So;0;L;;;;;N;;;;;
28CC;BRAILLE PATTERN DOTS-3478;So;0;L;;;;;N;;;;;
28CD;BRAILLE PATTERN DOTS-13478;So;0;L;;;;;N;;;;;
28CE;BRAILLE PATTERN DOTS-23478;So;0;L;;;;;N;;;;;
28CF;BRAILLE PATTERN DOTS-123478;So;0;L;;;;;N;;;;;
28D0;BRAILLE PATTERN DOTS-578;So;0;L;;;;;N;;;;;
28D1;BRAILLE PATTERN DOTS-1578;So;0;L;;;;;N;;;;;
28D2;BRAILLE PATTERN DOTS-2578;So;0;L;;;;;N;;;;;
28D3;BRAILLE PATTERN DOTS-12578;So;0;L;;;;;N;;;;;
28D4;BRAILLE PATTERN DOTS-3578;So;0;L;;;;;N;;;;;
28D5;BRAILLE PATTERN DOTS-13578;So;0;L;;;;;N;;;;;
28D6;BRAILLE PATTERN DOTS-23578;So;0;L;;;;;N;;;;;
28D7;BRAILLE PATTERN DOTS-123578;So;0;L;;;;;N;;;;;
28D8;BRAILLE PATTERN DOTS-4578;So;0;L;;;;;N;;;;;
28D9;BRAILLE PATTERN DOTS-14578;So;0;L;;;;;N;;;;;
28DA;BRAILLE PATTERN DOTS-24578;So;0;L;;;;;N;;;;;
28DB;BRAILLE PATTERN DOTS-124578;So;0;L;;;;;N;;;;;
28DC;BRAILLE PATTERN DOTS-34578;So;0;L;;;;;N;;;;;
28DD;BRAILLE PATTERN DOTS-134578;So;0;L;;;;;N;;;;;
28DE;BRAILLE PATTERN DOTS-234578;So;0;L;;;;;N;;;;;
28DF;BRAILLE PATTERN DOTS-1234578;So;0;L;;;;;N;;;;;
28E0;BRAILLE PATTERN DOTS-678;So;0;L;;;;;N;;;;;
28E1;BRAILLE PATTERN DOTS-1678;So;0;L;;;;;N;;;;;
28E2;BRAILLE PATTERN DOTS-2678;So;0;L;;;;;N;;;;;
28E3;BRAILLE PATTERN DOTS-12678;So;0;L;;;;;N;;;;;
28E4;BRAILLE PATTERN DOTS-3678;So;0;L;;;;;N;;;;;
28E5;BRAILLE PATTERN DOTS-13678;So;0;L;;;;;N;;;;;
28E6;BRAILLE PATTERN DOTS-23678;So;0;L;;;;;N;;;;;
28E7;BRAILLE PATTERN DOTS-123678;So;0;L;;;;;N;;;;;
28E8;BRAILLE PATTERN DOTS-4678;So;0;L;;;;;N;;;;;
28E9;BRAILLE PATTERN DOTS-14678;So;0;L;;;;;N;;;;;
28EA;BRAILLE PATTERN DOTS-24678;So;0;L;;;;;N;;;;;
28EB;BRAILLE PATTERN DOTS-124678;So;0;L;;;;;N;;;;;
28EC;BRAILLE PATTERN DOTS-34678;So;0;L;;;;;N;;;;;
28ED;BRAILLE PATTERN DOTS-134678;So;0;L;;;;;N;;;;;
28EE;BRAILLE PATTERN DOTS-234678;So;0;L;;;;;N;;;;;
28EF;BRAILLE PATTERN DOTS-1234678;So;0;L;;;;;N;;;;;
28F0;BRAILLE PATTERN DOTS-5678;So;0;L;;;;;N;;;;;
28F1;BRAILLE PATTERN DOTS-15678;So;0;L;;;;;N;;;;;
28F2;BRAILLE PATTERN DOTS-25678;So;0;L;;;;;N;;;;;
28F3;BRAILLE PATTERN DOTS-125678;So;0;L;;;;;N;;;;;
28F4;BRAILLE PATTERN DOTS-35678;So;0;L;;;;;N;;;;;
28F5;BRAILLE PATTERN DOTS-135678;So;0;L;;;;;N;;;;;
28F6;BRAILLE PATTERN DOTS-235678;So;0;L;;;;;N;;;;;
28F7;BRAILLE PATTERN DOTS-1235678;So;0;L;;;;;N;;;;;
28F8;BRAILLE PATTERN DOTS-45678;So;0;L;;;;;N;;;;;
28F9;BRAILLE PATTERN DOTS-145678;So;0;L;;;;;N;;;;;
28FA;BRAILLE PATTERN DOTS-245678;So;0;L;;;;;N;;;;;
28FB;BRAILLE PATTERN DOTS-1245678;So;0;L;;;;;N;;;;;
28FC;BRAILLE PATTERN DOTS-345678;So;0;L;;;;;N;;;;;
28FD;BRAILLE PATTERN DOTS-1345678;So;0;L;;;;;N;;;;;
28FE;BRAILLE PATTERN DOTS-2345678;So;0;L;;;;;N;;;;;
28FF;BRAILLE PATTERN DOTS-12345678;So;0;L;;;;;N;;;;;
2900;RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE;Sm;0;ON;;;;;N;;;;;
2901;RIGHTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE;Sm;0;ON;;;;;N;;;;;
2902;LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE;Sm;0;ON;;;;;N;;;;;
2903;RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE;Sm;0;ON;;;;;N;;;;;
2904;LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE;Sm;0;ON;;;;;N;;;;;
2905;RIGHTWARDS TWO-HEADED ARROW FROM BAR;Sm;0;ON;;;;;N;;;;;
2906;LEFTWARDS DOUBLE ARROW FROM BAR;Sm;0;ON;;;;;N;;;;;
2907;RIGHTWARDS DOUBLE ARROW FROM BAR;Sm;0;ON;;;;;N;;;;;
2908;DOWNWARDS ARROW WITH HORIZONTAL STROKE;Sm;0;ON;;;;;N;;;;;
2909;UPWARDS ARROW WITH HORIZONTAL STROKE;Sm;0;ON;;;;;N;;;;;
290A;UPWARDS TRIPLE ARROW;Sm;0;ON;;;;;N;;;;;
290B;DOWNWARDS TRIPLE ARROW;Sm;0;ON;;;;;N;;;;;
290C;LEFTWARDS DOUBLE DASH ARROW;Sm;0;ON;;;;;N;;;;;
290D;RIGHTWARDS DOUBLE DASH ARROW;Sm;0;ON;;;;;N;;;;;
290E;LEFTWARDS TRIPLE DASH ARROW;Sm;0;ON;;;;;N;;;;;
290F;RIGHTWARDS TRIPLE DASH ARROW;Sm;0;ON;;;;;N;;;;;
2910;RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW;Sm;0;ON;;;;;N;;;;;
2911;RIGHTWARDS ARROW WITH DOTTED STEM;Sm;0;ON;;;;;N;;;;;
2912;UPWARDS ARROW TO BAR;Sm;0;ON;;;;;N;;;;;
2913;DOWNWARDS ARROW TO BAR;Sm;0;ON;;;;;N;;;;;
2914;RIGHTWARDS ARROW WITH TAIL WITH VERTICAL STROKE;Sm;0;ON;;;;;N;;;;;
2915;RIGHTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE;Sm;0;ON;;;;;N;;;;;
2916;RIGHTWARDS TWO-HEADED ARROW WITH TAIL;Sm;0;ON;;;;;N;;;;;
2917;RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE;Sm;0;ON;;;;;N;;;;;
2918;RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE;Sm;0;ON;;;;;N;;;;;
2919;LEFTWARDS ARROW-TAIL;Sm;0;ON;;;;;N;;;;;
291A;RIGHTWARDS ARROW-TAIL;Sm;0;ON;;;;;N;;;;;
291B;LEFTWARDS DOUBLE ARROW-TAIL;Sm;0;ON;;;;;N;;;;;
291C;RIGHTWARDS DOUBLE ARROW-TAIL;Sm;0;ON;;;;;N;;;;;
291D;LEFTWARDS ARROW TO BLACK DIAMOND;Sm;0;ON;;;;;N;;;;;
291E;RIGHTWARDS ARROW TO BLACK DIAMOND;Sm;0;ON;;;;;N;;;;;
291F;LEFTWARDS ARROW FROM BAR TO BLACK DIAMOND;Sm;0;ON;;;;;N;;;;;
2920;RIGHTWARDS ARROW FROM BAR TO BLACK DIAMOND;Sm;0;ON;;;;;N;;;;;
2921;NORTH WEST AND SOUTH EAST ARROW;Sm;0;ON;;;;;N;;;;;
2922;NORTH EAST AND SOUTH WEST ARROW;Sm;0;ON;;;;;N;;;;;
2923;NORTH WEST ARROW WITH HOOK;Sm;0;ON;;;;;N;;;;;
2924;NORTH EAST ARROW WITH HOOK;Sm;0;ON;;;;;N;;;;;
2925;SOUTH EAST ARROW WITH HOOK;Sm;0;ON;;;;;N;;;;;
2926;SOUTH WEST ARROW WITH HOOK;Sm;0;ON;;;;;N;;;;;
2927;NORTH WEST ARROW AND NORTH EAST ARROW;Sm;0;ON;;;;;N;;;;;
2928;NORTH EAST ARROW AND SOUTH EAST ARROW;Sm;0;ON;;;;;N;;;;;
2929;SOUTH EAST ARROW AND SOUTH WEST ARROW;Sm;0;ON;;;;;N;;;;;
292A;SOUTH WEST ARROW AND NORTH WEST ARROW;Sm;0;ON;;;;;N;;;;;
292B;RISING DIAGONAL CROSSING FALLING DIAGONAL;Sm;0;ON;;;;;N;;;;;
292C;FALLING DIAGONAL CROSSING RISING DIAGONAL;Sm;0;ON;;;;;N;;;;;
292D;SOUTH EAST ARROW CROSSING NORTH EAST ARROW;Sm;0;ON;;;;;N;;;;;
292E;NORTH EAST ARROW CROSSING SOUTH EAST ARROW;Sm;0;ON;;;;;N;;;;;
292F;FALLING DIAGONAL CROSSING NORTH EAST ARROW;Sm;0;ON;;;;;N;;;;;
2930;RISING DIAGONAL CROSSING SOUTH EAST ARROW;Sm;0;ON;;;;;N;;;;;
2931;NORTH EAST ARROW CROSSING NORTH WEST ARROW;Sm;0;ON;;;;;N;;;;;
2932;NORTH WEST ARROW CROSSING NORTH EAST ARROW;Sm;0;ON;;;;;N;;;;;
2933;WAVE ARROW POINTING DIRECTLY RIGHT;Sm;0;ON;;;;;N;;;;;
2934;ARROW POINTING RIGHTWARDS THEN CURVING UPWARDS;Sm;0;ON;;;;;N;;;;;
2935;ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS;Sm;0;ON;;;;;N;;;;;
2936;ARROW POINTING DOWNWARDS THEN CURVING LEFTWARDS;Sm;0;ON;;;;;N;;;;;
2937;ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS;Sm;0;ON;;;;;N;;;;;
2938;RIGHT-SIDE ARC CLOCKWISE ARROW;Sm;0;ON;;;;;N;;;;;
2939;LEFT-SIDE ARC ANTICLOCKWISE ARROW;Sm;0;ON;;;;;N;;;;;
293A;TOP ARC ANTICLOCKWISE ARROW;Sm;0;ON;;;;;N;;;;;
293B;BOTTOM ARC ANTICLOCKWISE ARROW;Sm;0;ON;;;;;N;;;;;
293C;TOP ARC CLOCKWISE ARROW WITH MINUS;Sm;0;ON;;;;;N;;;;;
293D;TOP ARC ANTICLOCKWISE ARROW WITH PLUS;Sm;0;ON;;;;;N;;;;;
293E;LOWER RIGHT SEMICIRCULAR CLOCKWISE ARROW;Sm;0;ON;;;;;N;;;;;
293F;LOWER LEFT SEMICIRCULAR ANTICLOCKWISE ARROW;Sm;0;ON;;;;;N;;;;;
2940;ANTICLOCKWISE CLOSED CIRCLE ARROW;Sm;0;ON;;;;;N;;;;;
2941;CLOCKWISE CLOSED CIRCLE ARROW;Sm;0;ON;;;;;N;;;;;

----------------------------------------

TITLE: JSON Struct Description for Jaccwabyt
DESCRIPTION: A JSON-format description of a C struct used by Jaccwabyt to create JavaScript bindings. It contains the struct name, size, and detailed information about each member including byte offset, size, and data type signature.

LANGUAGE: json
CODE:
{
  "name": "Foo",
  "sizeof": 16,
  "members": {
    "member1": {"offset": 0,"sizeof": 4,"signature": "i"},
    "member2": {"offset": 4,"sizeof": 4,"signature": "p"},
    "member3": {"offset": 8,"sizeof": 8,"signature": "j"}
  }
}

----------------------------------------

TITLE: Defining Unicode Character Equivalence Mappings for Greek and Roman Characters
DESCRIPTION: This code snippet defines mappings between Unicode characters with their equivalence relationships. Each line follows the format of 'source code point; relationship type; target code point(s); # description'. The relationship types include 'F' (full), 'S' (simple), and 'C' (case folding) equivalences.

LANGUAGE: plain text
CODE:
1F98; S; 1F90; # GREEK CAPITAL LETTER ETA WITH PSILI AND PROSGEGRAMMENI
1F99; F; 1F21 03B9; # GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI
1F99; S; 1F91; # GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI
1F9A; F; 1F22 03B9; # GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI
1F9A; S; 1F92; # GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI
1F9B; F; 1F23 03B9; # GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI
1F9B; S; 1F93; # GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI
1F9C; F; 1F24 03B9; # GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI
1F9C; S; 1F94; # GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI
1F9D; F; 1F25 03B9; # GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI
1F9D; S; 1F95; # GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI
1F9E; F; 1F26 03B9; # GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI
1F9E; S; 1F96; # GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI
1F9F; F; 1F27 03B9; # GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI
1F9F; S; 1F97; # GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI
1FA0; F; 1F60 03B9; # GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI
1FA1; F; 1F61 03B9; # GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI
1FA2; F; 1F62 03B9; # GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI
1FA3; F; 1F63 03B9; # GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI
1FA4; F; 1F64 03B9; # GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI
1FA5; F; 1F65 03B9; # GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI
1FA6; F; 1F66 03B9; # GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI
1FA7; F; 1F67 03B9; # GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI
1FA8; F; 1F60 03B9; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI
1FA8; S; 1FA0; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI
1FA9; F; 1F61 03B9; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI
1FA9; S; 1FA1; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI
1FAA; F; 1F62 03B9; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI
1FAA; S; 1FA2; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI
1FAB; F; 1F63 03B9; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI
1FAB; S; 1FA3; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI
1FAC; F; 1F64 03B9; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI
1FAC; S; 1FA4; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI
1FAD; F; 1F65 03B9; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI
1FAD; S; 1FA5; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI
1FAE; F; 1F66 03B9; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI
1FAE; S; 1FA6; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI
1FAF; F; 1F67 03B9; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI
1FAF; S; 1FA7; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI
1FB2; F; 1F70 03B9; # GREEK SMALL LETTER ALPHA WITH VARIA AND YPOGEGRAMMENI
1FB3; F; 03B1 03B9; # GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI
1FB4; F; 03AC 03B9; # GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI
1FB6; F; 03B1 0342; # GREEK SMALL LETTER ALPHA WITH PERISPOMENI
1FB7; F; 03B1 0342 03B9; # GREEK SMALL LETTER ALPHA WITH PERISPOMENI AND YPOGEGRAMMENI
1FB8; C; 1FB0; # GREEK CAPITAL LETTER ALPHA WITH VRACHY
1FB9; C; 1FB1; # GREEK CAPITAL LETTER ALPHA WITH MACRON
1FBA; C; 1F70; # GREEK CAPITAL LETTER ALPHA WITH VARIA
1FBB; C; 1F71; # GREEK CAPITAL LETTER ALPHA WITH OXIA
1FBC; F; 03B1 03B9; # GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI
1FBC; S; 1FB3; # GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI
1FBE; C; 03B9; # GREEK PROSGEGRAMMENI
1FC2; F; 1F74 03B9; # GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI
1FC3; F; 03B7 03B9; # GREEK SMALL LETTER ETA WITH YPOGEGRAMMENI
1FC4; F; 03AE 03B9; # GREEK SMALL LETTER ETA WITH OXIA AND YPOGEGRAMMENI
1FC6; F; 03B7 0342; # GREEK SMALL LETTER ETA WITH PERISPOMENI
1FC7; F; 03B7 0342 03B9; # GREEK SMALL LETTER ETA WITH PERISPOMENI AND YPOGEGRAMMENI
1FC8; C; 1F72; # GREEK CAPITAL LETTER EPSILON WITH VARIA
1FC9; C; 1F73; # GREEK CAPITAL LETTER EPSILON WITH OXIA
1FCA; C; 1F74; # GREEK CAPITAL LETTER ETA WITH VARIA
1FCB; C; 1F75; # GREEK CAPITAL LETTER ETA WITH OXIA
1FCC; F; 03B7 03B9; # GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI
1FCC; S; 1FC3; # GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI
1FD2; F; 03B9 0308 0300; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA
1FD3; F; 03B9 0308 0301; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA
1FD6; F; 03B9 0342; # GREEK SMALL LETTER IOTA WITH PERISPOMENI
1FD7; F; 03B9 0308 0342; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI
1FD8; C; 1FD0; # GREEK CAPITAL LETTER IOTA WITH VRACHY
1FD9; C; 1FD1; # GREEK CAPITAL LETTER IOTA WITH MACRON
1FDA; C; 1F76; # GREEK CAPITAL LETTER IOTA WITH VARIA
1FDB; C; 1F77; # GREEK CAPITAL LETTER IOTA WITH OXIA
1FE2; F; 03C5 0308 0300; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA
1FE3; F; 03C5 0308 0301; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA
1FE4; F; 03C1 0313; # GREEK SMALL LETTER RHO WITH PSILI
1FE6; F; 03C5 0342; # GREEK SMALL LETTER UPSILON WITH PERISPOMENI
1FE7; F; 03C5 0308 0342; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI
1FE8; C; 1FE0; # GREEK CAPITAL LETTER UPSILON WITH VRACHY
1FE9; C; 1FE1; # GREEK CAPITAL LETTER UPSILON WITH MACRON
1FEA; C; 1F7A; # GREEK CAPITAL LETTER UPSILON WITH VARIA
1FEB; C; 1F7B; # GREEK CAPITAL LETTER UPSILON WITH OXIA
1FEC; C; 1FE5; # GREEK CAPITAL LETTER RHO WITH DASIA
1FF2; F; 1F7C 03B9; # GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI
1FF3; F; 03C9 03B9; # GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI
1FF4; F; 03CE 03B9; # GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI
1FF6; F; 03C9 0342; # GREEK SMALL LETTER OMEGA WITH PERISPOMENI
1FF7; F; 03C9 0342 03B9; # GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI
1FF8; C; 1F78; # GREEK CAPITAL LETTER OMICRON WITH VARIA
1FF9; C; 1F79; # GREEK CAPITAL LETTER OMICRON WITH OXIA
1FFA; C; 1F7C; # GREEK CAPITAL LETTER OMEGA WITH VARIA
1FFB; C; 1F7D; # GREEK CAPITAL LETTER OMEGA WITH OXIA
1FFC; F; 03C9 03B9; # GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI
1FFC; S; 1FF3; # GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI
2126; C; 03C9; # OHM SIGN
212A; C; 006B; # KELVIN SIGN
212B; C; 00E5; # ANGSTROM SIGN
2132; C; 214E; # TURNED CAPITAL F
2160; C; 2170; # ROMAN NUMERAL ONE
2161; C; 2171; # ROMAN NUMERAL TWO
2162; C; 2172; # ROMAN NUMERAL THREE
2163; C; 2173; # ROMAN NUMERAL FOUR
2164; C; 2174; # ROMAN NUMERAL FIVE
2165; C; 2175; # ROMAN NUMERAL SIX
2166; C; 2176; # ROMAN NUMERAL SEVEN
2167; C; 2177; # ROMAN NUMERAL EIGHT
2168; C; 2178; # ROMAN NUMERAL NINE
2169; C; 2179; # ROMAN NUMERAL TEN
216A; C; 217A; # ROMAN NUMERAL ELEVEN
216B; C; 217B; # ROMAN NUMERAL TWELVE
216C; C; 217C; # ROMAN NUMERAL FIFTY
216D; C; 217D; # ROMAN NUMERAL ONE HUNDRED
216E; C; 217E; # ROMAN NUMERAL FIVE HUNDRED
216F; C; 217F; # ROMAN NUMERAL ONE THOUSAND
2183; C; 2184; # ROMAN NUMERAL REVERSED ONE HUNDRED
24B6; C; 24D0; # CIRCLED LATIN CAPITAL LETTER A
24B7; C; 24D1; # CIRCLED LATIN CAPITAL LETTER B
24B8; C; 24D2; # CIRCLED LATIN CAPITAL LETTER C
24B9; C; 24D3; # CIRCLED LATIN CAPITAL LETTER D
24BA; C; 24D4; # CIRCLED LATIN CAPITAL LETTER E
24BB; C; 24D5; # CIRCLED LATIN CAPITAL LETTER F
24BC; C; 24D6; # CIRCLED LATIN CAPITAL LETTER G
24BD; C; 24D7; # CIRCLED LATIN CAPITAL LETTER H
24BE; C; 24D8; # CIRCLED LATIN CAPITAL LETTER I
24BF; C; 24D9; # CIRCLED LATIN CAPITAL LETTER J
24C0; C; 24DA; # CIRCLED LATIN CAPITAL LETTER K
24C1; C; 24DB; # CIRCLED LATIN CAPITAL LETTER L
24C2; C; 24DC; # CIRCLED LATIN CAPITAL LETTER M
24C3; C; 24DD; # CIRCLED LATIN CAPITAL LETTER N
24C4; C; 24DE; # CIRCLED LATIN CAPITAL LETTER O
24C5; C; 24DF; # CIRCLED LATIN CAPITAL LETTER P
24C6; C; 24E0; # CIRCLED LATIN CAPITAL LETTER Q
24C7; C; 24E1; # CIRCLED LATIN CAPITAL LETTER R
24C8; C; 24E2; # CIRCLED LATIN CAPITAL LETTER S
24C9; C; 24E3; # CIRCLED LATIN CAPITAL LETTER T
24CA; C; 24E4; # CIRCLED LATIN CAPITAL LETTER U
24CB; C; 24E5; # CIRCLED LATIN CAPITAL LETTER V
24CC; C; 24E6; # CIRCLED LATIN CAPITAL LETTER W
24CD; C; 24E7; # CIRCLED LATIN CAPITAL LETTER X
24CE; C; 24E8; # CIRCLED LATIN CAPITAL LETTER Y
24CF; C; 24E9; # CIRCLED LATIN CAPITAL LETTER Z
2C00; C; 2C30; # GLAGOLITIC CAPITAL LETTER AZU
2C01; C; 2C31; # GLAGOLITIC CAPITAL LETTER BUKY
2C02; C; 2C32; # GLAGOLITIC CAPITAL LETTER VEDE
2C03; C; 2C33; # GLAGOLITIC CAPITAL LETTER GLAGOLI
2C04; C; 2C34; # GLAGOLITIC CAPITAL LETTER DOBRO
2C05; C; 2C35; # GLAGOLITIC CAPITAL LETTER YESTU
2C06; C; 2C36; # GLAGOLITIC CAPITAL LETTER ZHIVETE
2C07; C; 2C37; # GLAGOLITIC CAPITAL LETTER DZELO
2C08; C; 2C38; # GLAGOLITIC CAPITAL LETTER ZEMLJA
2C09; C; 2C39; # GLAGOLITIC CAPITAL LETTER IZHE
2C0A; C; 2C3A; # GLAGOLITIC CAPITAL LETTER INITIAL IZHE
2C0B; C; 2C3B; # GLAGOLITIC CAPITAL LETTER I
2C0C; C; 2C3C; # GLAGOLITIC CAPITAL LETTER DJERVI
2C0D; C; 2C3D; # GLAGOLITIC CAPITAL LETTER KAKO
2C0E; C; 2C3E; # GLAGOLITIC CAPITAL LETTER LJUDIJE
2C0F; C; 2C3F; # GLAGOLITIC CAPITAL LETTER MYSLITE
2C10; C; 2C40; # GLAGOLITIC CAPITAL LETTER NASHI
2C11; C; 2C41; # GLAGOLITIC CAPITAL LETTER ONU
2C12; C; 2C42; # GLAGOLITIC CAPITAL LETTER POKOJI
2C13; C; 2C43; # GLAGOLITIC CAPITAL LETTER RITSI
2C14; C; 2C44; # GLAGOLITIC CAPITAL LETTER SLOVO
2C15; C; 2C45; # GLAGOLITIC CAPITAL LETTER TVRIDO
2C16; C; 2C46; # GLAGOLITIC CAPITAL LETTER UKU
2C17; C; 2C47; # GLAGOLITIC CAPITAL LETTER FRITU
2C18; C; 2C48; # GLAGOLITIC CAPITAL LETTER HERU
2C19; C; 2C49; # GLAGOLITIC CAPITAL LETTER OTU
2C1A; C; 2C4A; # GLAGOLITIC CAPITAL LETTER PE

----------------------------------------

TITLE: Configuring SQLite Blocking Locks on Unix-like Systems
DESCRIPTION: Instructions for enabling blocking locks in SQLite by building with SQLITE_ENABLE_SETLK_TIMEOUT defined and configuring a timeout using the sqlite3_busy_timeout() API. This configuration allows waiting database clients to block rather than continuously poll for locks.

LANGUAGE: markdown
CODE:
* building the library with SQLITE\_ENABLE\_SETLK\_TIMEOUT defined, and
* configuring a timeout in ms using the sqlite3\_busy\_timeout() API.

----------------------------------------

TITLE: Unicode Code Point Definitions for Mathematical Alphanumeric Symbols
DESCRIPTION: Definition of Unicode code points for mathematical symbols (double-struck, bold fraktur, and sans-serif variants) of Latin letters. Each line contains the hexadecimal code point, descriptive name, character category, directionality, font mapping, and other properties.

LANGUAGE: plaintext
CODE:
1D552;MATHEMATICAL DOUBLE-STRUCK SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D553;MATHEMATICAL DOUBLE-STRUCK SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D554;MATHEMATICAL DOUBLE-STRUCK SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D555;MATHEMATICAL DOUBLE-STRUCK SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D556;MATHEMATICAL DOUBLE-STRUCK SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D557;MATHEMATICAL DOUBLE-STRUCK SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D558;MATHEMATICAL DOUBLE-STRUCK SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D559;MATHEMATICAL DOUBLE-STRUCK SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D55A;MATHEMATICAL DOUBLE-STRUCK SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D55B;MATHEMATICAL DOUBLE-STRUCK SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D55C;MATHEMATICAL DOUBLE-STRUCK SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D55D;MATHEMATICAL DOUBLE-STRUCK SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D55E;MATHEMATICAL DOUBLE-STRUCK SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D55F;MATHEMATICAL DOUBLE-STRUCK SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D560;MATHEMATICAL DOUBLE-STRUCK SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D561;MATHEMATICAL DOUBLE-STRUCK SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D562;MATHEMATICAL DOUBLE-STRUCK SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D563;MATHEMATICAL DOUBLE-STRUCK SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D564;MATHEMATICAL DOUBLE-STRUCK SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D565;MATHEMATICAL DOUBLE-STRUCK SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D566;MATHEMATICAL DOUBLE-STRUCK SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D567;MATHEMATICAL DOUBLE-STRUCK SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D568;MATHEMATICAL DOUBLE-STRUCK SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D569;MATHEMATICAL DOUBLE-STRUCK SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D56A;MATHEMATICAL DOUBLE-STRUCK SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D56B;MATHEMATICAL DOUBLE-STRUCK SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D56C;MATHEMATICAL BOLD FRAKTUR CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D56D;MATHEMATICAL BOLD FRAKTUR CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D56E;MATHEMATICAL BOLD FRAKTUR CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D56F;MATHEMATICAL BOLD FRAKTUR CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D570;MATHEMATICAL BOLD FRAKTUR CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D571;MATHEMATICAL BOLD FRAKTUR CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D572;MATHEMATICAL BOLD FRAKTUR CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D573;MATHEMATICAL BOLD FRAKTUR CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D574;MATHEMATICAL BOLD FRAKTUR CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D575;MATHEMATICAL BOLD FRAKTUR CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D576;MATHEMATICAL BOLD FRAKTUR CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D577;MATHEMATICAL BOLD FRAKTUR CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D578;MATHEMATICAL BOLD FRAKTUR CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D579;MATHEMATICAL BOLD FRAKTUR CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D57A;MATHEMATICAL BOLD FRAKTUR CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D57B;MATHEMATICAL BOLD FRAKTUR CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D57C;MATHEMATICAL BOLD FRAKTUR CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D57D;MATHEMATICAL BOLD FRAKTUR CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D57E;MATHEMATICAL BOLD FRAKTUR CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D57F;MATHEMATICAL BOLD FRAKTUR CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D580;MATHEMATICAL BOLD FRAKTUR CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D581;MATHEMATICAL BOLD FRAKTUR CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D582;MATHEMATICAL BOLD FRAKTUR CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D583;MATHEMATICAL BOLD FRAKTUR CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D584;MATHEMATICAL BOLD FRAKTUR CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D585;MATHEMATICAL BOLD FRAKTUR CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D586;MATHEMATICAL BOLD FRAKTUR SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D587;MATHEMATICAL BOLD FRAKTUR SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D588;MATHEMATICAL BOLD FRAKTUR SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D589;MATHEMATICAL BOLD FRAKTUR SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D58A;MATHEMATICAL BOLD FRAKTUR SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D58B;MATHEMATICAL BOLD FRAKTUR SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D58C;MATHEMATICAL BOLD FRAKTUR SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D58D;MATHEMATICAL BOLD FRAKTUR SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D58E;MATHEMATICAL BOLD FRAKTUR SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D58F;MATHEMATICAL BOLD FRAKTUR SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D590;MATHEMATICAL BOLD FRAKTUR SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D591;MATHEMATICAL BOLD FRAKTUR SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D592;MATHEMATICAL BOLD FRAKTUR SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D593;MATHEMATICAL BOLD FRAKTUR SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D594;MATHEMATICAL BOLD FRAKTUR SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D595;MATHEMATICAL BOLD FRAKTUR SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D596;MATHEMATICAL BOLD FRAKTUR SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D597;MATHEMATICAL BOLD FRAKTUR SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D598;MATHEMATICAL BOLD FRAKTUR SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D599;MATHEMATICAL BOLD FRAKTUR SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D59A;MATHEMATICAL BOLD FRAKTUR SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D59B;MATHEMATICAL BOLD FRAKTUR SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D59C;MATHEMATICAL BOLD FRAKTUR SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D59D;MATHEMATICAL BOLD FRAKTUR SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D59E;MATHEMATICAL BOLD FRAKTUR SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D59F;MATHEMATICAL BOLD FRAKTUR SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D5A0;MATHEMATICAL SANS-SERIF CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D5A1;MATHEMATICAL SANS-SERIF CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D5A2;MATHEMATICAL SANS-SERIF CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D5A3;MATHEMATICAL SANS-SERIF CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D5A4;MATHEMATICAL SANS-SERIF CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D5A5;MATHEMATICAL SANS-SERIF CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D5A6;MATHEMATICAL SANS-SERIF CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D5A7;MATHEMATICAL SANS-SERIF CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D5A8;MATHEMATICAL SANS-SERIF CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D5A9;MATHEMATICAL SANS-SERIF CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D5AA;MATHEMATICAL SANS-SERIF CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D5AB;MATHEMATICAL SANS-SERIF CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D5AC;MATHEMATICAL SANS-SERIF CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D5AD;MATHEMATICAL SANS-SERIF CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D5AE;MATHEMATICAL SANS-SERIF CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D5AF;MATHEMATICAL SANS-SERIF CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D5B0;MATHEMATICAL SANS-SERIF CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D5B1;MATHEMATICAL SANS-SERIF CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D5B2;MATHEMATICAL SANS-SERIF CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D5B3;MATHEMATICAL SANS-SERIF CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D5B4;MATHEMATICAL SANS-SERIF CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D5B5;MATHEMATICAL SANS-SERIF CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D5B6;MATHEMATICAL SANS-SERIF CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D5B7;MATHEMATICAL SANS-SERIF CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D5B8;MATHEMATICAL SANS-SERIF CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D5B9;MATHEMATICAL SANS-SERIF CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D5BA;MATHEMATICAL SANS-SERIF SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D5BB;MATHEMATICAL SANS-SERIF SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D5BC;MATHEMATICAL SANS-SERIF SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D5BD;MATHEMATICAL SANS-SERIF SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D5BE;MATHEMATICAL SANS-SERIF SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D5BF;MATHEMATICAL SANS-SERIF SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D5C0;MATHEMATICAL SANS-SERIF SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D5C1;MATHEMATICAL SANS-SERIF SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D5C2;MATHEMATICAL SANS-SERIF SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D5C3;MATHEMATICAL SANS-SERIF SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D5C4;MATHEMATICAL SANS-SERIF SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D5C5;MATHEMATICAL SANS-SERIF SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D5C6;MATHEMATICAL SANS-SERIF SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D5C7;MATHEMATICAL SANS-SERIF SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D5C8;MATHEMATICAL SANS-SERIF SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D5C9;MATHEMATICAL SANS-SERIF SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D5CA;MATHEMATICAL SANS-SERIF SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D5CB;MATHEMATICAL SANS-SERIF SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D5CC;MATHEMATICAL SANS-SERIF SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D5CD;MATHEMATICAL SANS-SERIF SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D5CE;MATHEMATICAL SANS-SERIF SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D5CF;MATHEMATICAL SANS-SERIF SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D5D0;MATHEMATICAL SANS-SERIF SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D5D1;MATHEMATICAL SANS-SERIF SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D5D2;MATHEMATICAL SANS-SERIF SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D5D3;MATHEMATICAL SANS-SERIF SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D5D4;MATHEMATICAL SANS-SERIF BOLD CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D5D5;MATHEMATICAL SANS-SERIF BOLD CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D5D6;MATHEMATICAL SANS-SERIF BOLD CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D5D7;MATHEMATICAL SANS-SERIF BOLD CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D5D8;MATHEMATICAL SANS-SERIF BOLD CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D5D9;MATHEMATICAL SANS-SERIF BOLD CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D5DA;MATHEMATICAL SANS-SERIF BOLD CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D5DB;MATHEMATICAL SANS-SERIF BOLD CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D5DC;MATHEMATICAL SANS-SERIF BOLD CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D5DD;MATHEMATICAL SANS-SERIF BOLD CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D5DE;MATHEMATICAL SANS-SERIF BOLD CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D5DF;MATHEMATICAL SANS-SERIF BOLD CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D5E0;MATHEMATICAL SANS-SERIF BOLD CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;

----------------------------------------

TITLE: Converting Struct Signature Format for Emscripten's addFunction() in JavaScript
DESCRIPTION: A JavaScript regular expression that converts the struct binding signature format to a format compatible with Emscripten's addFunction(). It strips out parentheses and replaces pointer, char, and unsigned char types with integer types.

LANGUAGE: javascript
CODE:
signature.replace(/[^vipPsjfdcC]/g,'').replace(/[pPscC]/g,'i');

----------------------------------------

TITLE: Using .open --hexdb Command in SQLite CLI
DESCRIPTION: Shows how to use the .open --hexdb command in the SQLite CLI to read database content in hexadecimal format. This command can read from an optional filename or directly from input stream terminated by "| end".

LANGUAGE: shellsession
CODE:
.open --hexdb  ?OPTIONAL-FILENAME?

----------------------------------------

TITLE: Egyptian Hieroglyph Unicode Mapping Data
DESCRIPTION: A structured list of Egyptian hieroglyph Unicode code points with their respective properties. Each line contains the hexadecimal code point, the full name of the hieroglyph, and its character categorization in Unicode (Lo;0;L indicates Letter, Other, with bidirectional property of Left-to-Right).

LANGUAGE: plaintext
CODE:
1321F;EGYPTIAN HIEROGLYPH N042;Lo;0;L;;;;;N;;;;;
13220;EGYPTIAN HIEROGLYPH NL001;Lo;0;L;;;;;N;;;;;
13221;EGYPTIAN HIEROGLYPH NL002;Lo;0;L;;;;;N;;;;;
13222;EGYPTIAN HIEROGLYPH NL003;Lo;0;L;;;;;N;;;;;
13223;EGYPTIAN HIEROGLYPH NL004;Lo;0;L;;;;;N;;;;;
13224;EGYPTIAN HIEROGLYPH NL005;Lo;0;L;;;;;N;;;;;
13225;EGYPTIAN HIEROGLYPH NL005A;Lo;0;L;;;;;N;;;;;
13226;EGYPTIAN HIEROGLYPH NL006;Lo;0;L;;;;;N;;;;;
13227;EGYPTIAN HIEROGLYPH NL007;Lo;0;L;;;;;N;;;;;
13228;EGYPTIAN HIEROGLYPH NL008;Lo;0;L;;;;;N;;;;;
13229;EGYPTIAN HIEROGLYPH NL009;Lo;0;L;;;;;N;;;;;
1322A;EGYPTIAN HIEROGLYPH NL010;Lo;0;L;;;;;N;;;;;
1322B;EGYPTIAN HIEROGLYPH NL011;Lo;0;L;;;;;N;;;;;
1322C;EGYPTIAN HIEROGLYPH NL012;Lo;0;L;;;;;N;;;;;
1322D;EGYPTIAN HIEROGLYPH NL013;Lo;0;L;;;;;N;;;;;
1322E;EGYPTIAN HIEROGLYPH NL014;Lo;0;L;;;;;N;;;;;
1322F;EGYPTIAN HIEROGLYPH NL015;Lo;0;L;;;;;N;;;;;
13230;EGYPTIAN HIEROGLYPH NL016;Lo;0;L;;;;;N;;;;;
13231;EGYPTIAN HIEROGLYPH NL017;Lo;0;L;;;;;N;;;;;
13232;EGYPTIAN HIEROGLYPH NL017A;Lo;0;L;;;;;N;;;;;
13233;EGYPTIAN HIEROGLYPH NL018;Lo;0;L;;;;;N;;;;;
13234;EGYPTIAN HIEROGLYPH NL019;Lo;0;L;;;;;N;;;;;
13235;EGYPTIAN HIEROGLYPH NL020;Lo;0;L;;;;;N;;;;;
13236;EGYPTIAN HIEROGLYPH NU001;Lo;0;L;;;;;N;;;;;
13237;EGYPTIAN HIEROGLYPH NU002;Lo;0;L;;;;;N;;;;;
13238;EGYPTIAN HIEROGLYPH NU003;Lo;0;L;;;;;N;;;;;
13239;EGYPTIAN HIEROGLYPH NU004;Lo;0;L;;;;;N;;;;;
1323A;EGYPTIAN HIEROGLYPH NU005;Lo;0;L;;;;;N;;;;;
1323B;EGYPTIAN HIEROGLYPH NU006;Lo;0;L;;;;;N;;;;;
1323C;EGYPTIAN HIEROGLYPH NU007;Lo;0;L;;;;;N;;;;;
1323D;EGYPTIAN HIEROGLYPH NU008;Lo;0;L;;;;;N;;;;;
1323E;EGYPTIAN HIEROGLYPH NU009;Lo;0;L;;;;;N;;;;;
1323F;EGYPTIAN HIEROGLYPH NU010;Lo;0;L;;;;;N;;;;;
13240;EGYPTIAN HIEROGLYPH NU010A;Lo;0;L;;;;;N;;;;;
13241;EGYPTIAN HIEROGLYPH NU011;Lo;0;L;;;;;N;;;;;
13242;EGYPTIAN HIEROGLYPH NU011A;Lo;0;L;;;;;N;;;;;
13243;EGYPTIAN HIEROGLYPH NU012;Lo;0;L;;;;;N;;;;;
13244;EGYPTIAN HIEROGLYPH NU013;Lo;0;L;;;;;N;;;;;
13245;EGYPTIAN HIEROGLYPH NU014;Lo;0;L;;;;;N;;;;;
13246;EGYPTIAN HIEROGLYPH NU015;Lo;0;L;;;;;N;;;;;
13247;EGYPTIAN HIEROGLYPH NU016;Lo;0;L;;;;;N;;;;;
13248;EGYPTIAN HIEROGLYPH NU017;Lo;0;L;;;;;N;;;;;
13249;EGYPTIAN HIEROGLYPH NU018;Lo;0;L;;;;;N;;;;;
1324A;EGYPTIAN HIEROGLYPH NU018A;Lo;0;L;;;;;N;;;;;
1324B;EGYPTIAN HIEROGLYPH NU019;Lo;0;L;;;;;N;;;;;
1324C;EGYPTIAN HIEROGLYPH NU020;Lo;0;L;;;;;N;;;;;
1324D;EGYPTIAN HIEROGLYPH NU021;Lo;0;L;;;;;N;;;;;
1324E;EGYPTIAN HIEROGLYPH NU022;Lo;0;L;;;;;N;;;;;
1324F;EGYPTIAN HIEROGLYPH NU022A;Lo;0;L;;;;;N;;;;;
13250;EGYPTIAN HIEROGLYPH O001;Lo;0;L;;;;;N;;;;;
13251;EGYPTIAN HIEROGLYPH O001A;Lo;0;L;;;;;N;;;;;
13252;EGYPTIAN HIEROGLYPH O002;Lo;0;L;;;;;N;;;;;
13253;EGYPTIAN HIEROGLYPH O003;Lo;0;L;;;;;N;;;;;
13254;EGYPTIAN HIEROGLYPH O004;Lo;0;L;;;;;N;;;;;
13255;EGYPTIAN HIEROGLYPH O005;Lo;0;L;;;;;N;;;;;
13256;EGYPTIAN HIEROGLYPH O005A;Lo;0;L;;;;;N;;;;;
13257;EGYPTIAN HIEROGLYPH O006;Lo;0;L;;;;;N;;;;;
13258;EGYPTIAN HIEROGLYPH O006A;Lo;0;L;;;;;N;;;;;
13259;EGYPTIAN HIEROGLYPH O006B;Lo;0;L;;;;;N;;;;;
1325A;EGYPTIAN HIEROGLYPH O006C;Lo;0;L;;;;;N;;;;;
1325B;EGYPTIAN HIEROGLYPH O006D;Lo;0;L;;;;;N;;;;;
1325C;EGYPTIAN HIEROGLYPH O006E;Lo;0;L;;;;;N;;;;;
1325D;EGYPTIAN HIEROGLYPH O006F;Lo;0;L;;;;;N;;;;;
1325E;EGYPTIAN HIEROGLYPH O007;Lo;0;L;;;;;N;;;;;
1325F;EGYPTIAN HIEROGLYPH O008;Lo;0;L;;;;;N;;;;;
13260;EGYPTIAN HIEROGLYPH O009;Lo;0;L;;;;;N;;;;;
13261;EGYPTIAN HIEROGLYPH O010;Lo;0;L;;;;;N;;;;;
13262;EGYPTIAN HIEROGLYPH O010A;Lo;0;L;;;;;N;;;;;
13263;EGYPTIAN HIEROGLYPH O010B;Lo;0;L;;;;;N;;;;;
13264;EGYPTIAN HIEROGLYPH O010C;Lo;0;L;;;;;N;;;;;
13265;EGYPTIAN HIEROGLYPH O011;Lo;0;L;;;;;N;;;;;
13266;EGYPTIAN HIEROGLYPH O012;Lo;0;L;;;;;N;;;;;
13267;EGYPTIAN HIEROGLYPH O013;Lo;0;L;;;;;N;;;;;
13268;EGYPTIAN HIEROGLYPH O014;Lo;0;L;;;;;N;;;;;
13269;EGYPTIAN HIEROGLYPH O015;Lo;0;L;;;;;N;;;;;
1326A;EGYPTIAN HIEROGLYPH O016;Lo;0;L;;;;;N;;;;;
1326B;EGYPTIAN HIEROGLYPH O017;Lo;0;L;;;;;N;;;;;
1326C;EGYPTIAN HIEROGLYPH O018;Lo;0;L;;;;;N;;;;;
1326D;EGYPTIAN HIEROGLYPH O019;Lo;0;L;;;;;N;;;;;
1326E;EGYPTIAN HIEROGLYPH O019A;Lo;0;L;;;;;N;;;;;
1326F;EGYPTIAN HIEROGLYPH O020;Lo;0;L;;;;;N;;;;;
13270;EGYPTIAN HIEROGLYPH O020A;Lo;0;L;;;;;N;;;;;
13271;EGYPTIAN HIEROGLYPH O021;Lo;0;L;;;;;N;;;;;
13272;EGYPTIAN HIEROGLYPH O022;Lo;0;L;;;;;N;;;;;
13273;EGYPTIAN HIEROGLYPH O023;Lo;0;L;;;;;N;;;;;
13274;EGYPTIAN HIEROGLYPH O024;Lo;0;L;;;;;N;;;;;
13275;EGYPTIAN HIEROGLYPH O024A;Lo;0;L;;;;;N;;;;;
13276;EGYPTIAN HIEROGLYPH O025;Lo;0;L;;;;;N;;;;;
13277;EGYPTIAN HIEROGLYPH O025A;Lo;0;L;;;;;N;;;;;
13278;EGYPTIAN HIEROGLYPH O026;Lo;0;L;;;;;N;;;;;
13279;EGYPTIAN HIEROGLYPH O027;Lo;0;L;;;;;N;;;;;
1327A;EGYPTIAN HIEROGLYPH O028;Lo;0;L;;;;;N;;;;;
1327B;EGYPTIAN HIEROGLYPH O029;Lo;0;L;;;;;N;;;;;
1327C;EGYPTIAN HIEROGLYPH O029A;Lo;0;L;;;;;N;;;;;
1327D;EGYPTIAN HIEROGLYPH O030;Lo;0;L;;;;;N;;;;;
1327E;EGYPTIAN HIEROGLYPH O030A;Lo;0;L;;;;;N;;;;;
1327F;EGYPTIAN HIEROGLYPH O031;Lo;0;L;;;;;N;;;;;
13280;EGYPTIAN HIEROGLYPH O032;Lo;0;L;;;;;N;;;;;
13281;EGYPTIAN HIEROGLYPH O033;Lo;0;L;;;;;N;;;;;
13282;EGYPTIAN HIEROGLYPH O033A;Lo;0;L;;;;;N;;;;;
13283;EGYPTIAN HIEROGLYPH O034;Lo;0;L;;;;;N;;;;;
13284;EGYPTIAN HIEROGLYPH O035;Lo;0;L;;;;;N;;;;;
13285;EGYPTIAN HIEROGLYPH O036;Lo;0;L;;;;;N;;;;;
13286;EGYPTIAN HIEROGLYPH O036A;Lo;0;L;;;;;N;;;;;
13287;EGYPTIAN HIEROGLYPH O036B;Lo;0;L;;;;;N;;;;;
13288;EGYPTIAN HIEROGLYPH O036C;Lo;0;L;;;;;N;;;;;
13289;EGYPTIAN HIEROGLYPH O036D;Lo;0;L;;;;;N;;;;;
1328A;EGYPTIAN HIEROGLYPH O037;Lo;0;L;;;;;N;;;;;
1328B;EGYPTIAN HIEROGLYPH O038;Lo;0;L;;;;;N;;;;;
1328C;EGYPTIAN HIEROGLYPH O039;Lo;0;L;;;;;N;;;;;
1328D;EGYPTIAN HIEROGLYPH O040;Lo;0;L;;;;;N;;;;;
1328E;EGYPTIAN HIEROGLYPH O041;Lo;0;L;;;;;N;;;;;
1328F;EGYPTIAN HIEROGLYPH O042;Lo;0;L;;;;;N;;;;;
13290;EGYPTIAN HIEROGLYPH O043;Lo;0;L;;;;;N;;;;;
13291;EGYPTIAN HIEROGLYPH O044;Lo;0;L;;;;;N;;;;;
13292;EGYPTIAN HIEROGLYPH O045;Lo;0;L;;;;;N;;;;;
13293;EGYPTIAN HIEROGLYPH O046;Lo;0;L;;;;;N;;;;;
13294;EGYPTIAN HIEROGLYPH O047;Lo;0;L;;;;;N;;;;;
13295;EGYPTIAN HIEROGLYPH O048;Lo;0;L;;;;;N;;;;;
13296;EGYPTIAN HIEROGLYPH O049;Lo;0;L;;;;;N;;;;;
13297;EGYPTIAN HIEROGLYPH O050;Lo;0;L;;;;;N;;;;;
13298;EGYPTIAN HIEROGLYPH O050A;Lo;0;L;;;;;N;;;;;
13299;EGYPTIAN HIEROGLYPH O050B;Lo;0;L;;;;;N;;;;;
1329A;EGYPTIAN HIEROGLYPH O051;Lo;0;L;;;;;N;;;;;
1329B;EGYPTIAN HIEROGLYPH P001;Lo;0;L;;;;;N;;;;;
1329C;EGYPTIAN HIEROGLYPH P001A;Lo;0;L;;;;;N;;;;;
1329D;EGYPTIAN HIEROGLYPH P002;Lo;0;L;;;;;N;;;;;
1329E;EGYPTIAN HIEROGLYPH P003;Lo;0;L;;;;;N;;;;;
1329F;EGYPTIAN HIEROGLYPH P003A;Lo;0;L;;;;;N;;;;;
132A0;EGYPTIAN HIEROGLYPH P004;Lo;0;L;;;;;N;;;;;
132A1;EGYPTIAN HIEROGLYPH P005;Lo;0;L;;;;;N;;;;;
132A2;EGYPTIAN HIEROGLYPH P006;Lo;0;L;;;;;N;;;;;
132A3;EGYPTIAN HIEROGLYPH P007;Lo;0;L;;;;;N;;;;;
132A4;EGYPTIAN HIEROGLYPH P008;Lo;0;L;;;;;N;;;;;
132A5;EGYPTIAN HIEROGLYPH P009;Lo;0;L;;;;;N;;;;;
132A6;EGYPTIAN HIEROGLYPH P010;Lo;0;L;;;;;N;;;;;
132A7;EGYPTIAN HIEROGLYPH P011;Lo;0;L;;;;;N;;;;;
132A8;EGYPTIAN HIEROGLYPH Q001;Lo;0;L;;;;;N;;;;;
132A9;EGYPTIAN HIEROGLYPH Q002;Lo;0;L;;;;;N;;;;;
132AA;EGYPTIAN HIEROGLYPH Q003;Lo;0;L;;;;;N;;;;;
132AB;EGYPTIAN HIEROGLYPH Q004;Lo;0;L;;;;;N;;;;;
132AC;EGYPTIAN HIEROGLYPH Q005;Lo;0;L;;;;;N;;;;;
132AD;EGYPTIAN HIEROGLYPH Q006;Lo;0;L;;;;;N;;;;;
132AE;EGYPTIAN HIEROGLYPH Q007;Lo;0;L;;;;;N;;;;;
132AF;EGYPTIAN HIEROGLYPH R001;Lo;0;L;;;;;N;;;;;
132B0;EGYPTIAN HIEROGLYPH R002;Lo;0;L;;;;;N;;;;;
132B1;EGYPTIAN HIEROGLYPH R002A;Lo;0;L;;;;;N;;;;;
132B2;EGYPTIAN HIEROGLYPH R003;Lo;0;L;;;;;N;;;;;
132B3;EGYPTIAN HIEROGLYPH R003A;Lo;0;L;;;;;N;;;;;
132B4;EGYPTIAN HIEROGLYPH R003B;Lo;0;L;;;;;N;;;;;
132B5;EGYPTIAN HIEROGLYPH R004;Lo;0;L;;;;;N;;;;;
132B6;EGYPTIAN HIEROGLYPH R005;Lo;0;L;;;;;N;;;;;
132B7;EGYPTIAN HIEROGLYPH R006;Lo;0;L;;;;;N;;;;;
132B8;EGYPTIAN HIEROGLYPH R007;Lo;0;L;;;;;N;;;;;
132B9;EGYPTIAN HIEROGLYPH R008;Lo;0;L;;;;;N;;;;;
132BA;EGYPTIAN HIEROGLYPH R009;Lo;0;L;;;;;N;;;;;
132BB;EGYPTIAN HIEROGLYPH R010;Lo;0;L;;;;;N;;;;;
132BC;EGYPTIAN HIEROGLYPH R010A;Lo;0;L;;;;;N;;;;;
132BD;EGYPTIAN HIEROGLYPH R011;Lo;0;L;;;;;N;;;;;
132BE;EGYPTIAN HIEROGLYPH R012;Lo;0;L;;;;;N;;;;;
132BF;EGYPTIAN HIEROGLYPH R013;Lo;0;L;;;;;N;;;;;
132C0;EGYPTIAN HIEROGLYPH R014;Lo;0;L;;;;;N;;;;;
132C1;EGYPTIAN HIEROGLYPH R015;Lo;0;L;;;;;N;;;;;
132C2;EGYPTIAN HIEROGLYPH R016;Lo;0;L;;;;;N;;;;;
132C3;EGYPTIAN HIEROGLYPH R016A;Lo;0;L;;;;;N;;;;;
132C4;EGYPTIAN HIEROGLYPH R017;Lo;0;L;;;;;N;;;;;
132C5;EGYPTIAN HIEROGLYPH R018;Lo;0;L;;;;;N;;;;;
132C6;EGYPTIAN HIEROGLYPH R019;Lo;0;L;;;;;N;;;;;
132C7;EGYPTIAN HIEROGLYPH R020;Lo;0;L;;;;;N;;;;;
132C8;EGYPTIAN HIEROGLYPH R021;Lo;0;L;;;;;N;;;;;
132C9;EGYPTIAN HIEROGLYPH R022;Lo;0;L;;;;;N;;;;;
132CA;EGYPTIAN HIEROGLYPH R023;Lo;0;L;;;;;N;;;;;
132CB;EGYPTIAN HIEROGLYPH R024;Lo;0;L;;;;;N;;;;;
132CC;EGYPTIAN HIEROGLYPH R025;Lo;0;L;;;;;N;;;;;
132CD;EGYPTIAN HIEROGLYPH R026;Lo;0;L;;;;;N;;;;;
132CE;EGYPTIAN HIEROGLYPH R027;Lo;0;L;;;;;N;;;;;
132CF;EGYPTIAN HIEROGLYPH R028;Lo;0;L;;;;;N;;;;;
132D0;EGYPTIAN HIEROGLYPH R029;Lo;0;L;;;;;N;;;;;
132D1;EGYPTIAN HIEROGLYPH S001;Lo;0;L;;;;;N;;;;;
132D2;EGYPTIAN HIEROGLYPH S002;Lo;0;L;;;;;N;;;;;
132D3;EGYPTIAN HIEROGLYPH S002A;Lo;0;L;;;;;N;;;;;
132D4;EGYPTIAN HIEROGLYPH S003;Lo;0;L;;;;;N;;;;;
132D5;EGYPTIAN HIEROGLYPH S004;Lo;0;L;;;;;N;;;;;
132D6;EGYPTIAN HIEROGLYPH S005;Lo;0;L;;;;;N;;;;;
132D7;EGYPTIAN HIEROGLYPH S006;Lo;0;L;;;;;N;;;;;
132D8;EGYPTIAN HIEROGLYPH S006A;Lo;0;L;;;;;N;;;;;
132D9;EGYPTIAN HIEROGLYPH S007;Lo;0;L;;;;;N;;;;;
132DA;EGYPTIAN HIEROGLYPH S008;Lo;0;L;;;;;N;;;;;
132DB;EGYPTIAN HIEROGLYPH S009;Lo;0;L;;;;;N;;;;;
132DC;EGYPTIAN HIEROGLYPH S010;Lo;0;L;;;;;N;;;;;
132DD;EGYPTIAN HIEROGLYPH S011;Lo;0;L;;;;;N;;;;;
132DE;EGYPTIAN HIEROGLYPH S012;Lo;0;L;;;;;N;;;;;
132DF;EGYPTIAN HIEROGLYPH S013;Lo;0;L;;;;;N;;;;;
132E0;EGYPTIAN HIEROGLYPH S014;Lo;0;L;;;;;N;;;;;
132E1;EGYPTIAN HIEROGLYPH S014A;Lo;0;L;;;;;N;;;;;
132E2;EGYPTIAN HIEROGLYPH S014B;Lo;0;L;;;;;N;;;;;
132E3;EGYPTIAN HIEROGLYPH S015;Lo;0;L;;;;;N;;;;;
132E4;EGYPTIAN HIEROGLYPH S016;Lo;0;L;;;;;N;;;;;
132E5;EGYPTIAN HIEROGLYPH S017;Lo;0;L;;;;;N;;;;;
132E6;EGYPTIAN HIEROGLYPH S017A;Lo;0;L;;;;;N;;;;;
132E7;EGYPTIAN HIEROGLYPH S018;Lo;0;L;;;;;N;;;;;
132E8;EGYPTIAN HIEROGLYPH S019;Lo;0;L;;;;;N;;;;;

----------------------------------------

TITLE: Defining Unicode Mapping for Mathematical Sans-Serif Characters
DESCRIPTION: This table defines Unicode mapping entries for mathematical sans-serif characters including bold, italic, and bold italic variants. Each line contains the hexadecimal code point, character name, category (Lu for uppercase, Ll for lowercase), bidirectional class, decomposition mapping, and other properties.

LANGUAGE: text
CODE:
1D5E1;MATHEMATICAL SANS-SERIF BOLD CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D5E2;MATHEMATICAL SANS-SERIF BOLD CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D5E3;MATHEMATICAL SANS-SERIF BOLD CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D5E4;MATHEMATICAL SANS-SERIF BOLD CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D5E5;MATHEMATICAL SANS-SERIF BOLD CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D5E6;MATHEMATICAL SANS-SERIF BOLD CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D5E7;MATHEMATICAL SANS-SERIF BOLD CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D5E8;MATHEMATICAL SANS-SERIF BOLD CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D5E9;MATHEMATICAL SANS-SERIF BOLD CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D5EA;MATHEMATICAL SANS-SERIF BOLD CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D5EB;MATHEMATICAL SANS-SERIF BOLD CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D5EC;MATHEMATICAL SANS-SERIF BOLD CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D5ED;MATHEMATICAL SANS-SERIF BOLD CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D5EE;MATHEMATICAL SANS-SERIF BOLD SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D5EF;MATHEMATICAL SANS-SERIF BOLD SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D5F0;MATHEMATICAL SANS-SERIF BOLD SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D5F1;MATHEMATICAL SANS-SERIF BOLD SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D5F2;MATHEMATICAL SANS-SERIF BOLD SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D5F3;MATHEMATICAL SANS-SERIF BOLD SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D5F4;MATHEMATICAL SANS-SERIF BOLD SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D5F5;MATHEMATICAL SANS-SERIF BOLD SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D5F6;MATHEMATICAL SANS-SERIF BOLD SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D5F7;MATHEMATICAL SANS-SERIF BOLD SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D5F8;MATHEMATICAL SANS-SERIF BOLD SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D5F9;MATHEMATICAL SANS-SERIF BOLD SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D5FA;MATHEMATICAL SANS-SERIF BOLD SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D5FB;MATHEMATICAL SANS-SERIF BOLD SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D5FC;MATHEMATICAL SANS-SERIF BOLD SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D5FD;MATHEMATICAL SANS-SERIF BOLD SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D5FE;MATHEMATICAL SANS-SERIF BOLD SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D5FF;MATHEMATICAL SANS-SERIF BOLD SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D600;MATHEMATICAL SANS-SERIF BOLD SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D601;MATHEMATICAL SANS-SERIF BOLD SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D602;MATHEMATICAL SANS-SERIF BOLD SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D603;MATHEMATICAL SANS-SERIF BOLD SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D604;MATHEMATICAL SANS-SERIF BOLD SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D605;MATHEMATICAL SANS-SERIF BOLD SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D606;MATHEMATICAL SANS-SERIF BOLD SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D607;MATHEMATICAL SANS-SERIF BOLD SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D608;MATHEMATICAL SANS-SERIF ITALIC CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D609;MATHEMATICAL SANS-SERIF ITALIC CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D60A;MATHEMATICAL SANS-SERIF ITALIC CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D60B;MATHEMATICAL SANS-SERIF ITALIC CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D60C;MATHEMATICAL SANS-SERIF ITALIC CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D60D;MATHEMATICAL SANS-SERIF ITALIC CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D60E;MATHEMATICAL SANS-SERIF ITALIC CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D60F;MATHEMATICAL SANS-SERIF ITALIC CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D610;MATHEMATICAL SANS-SERIF ITALIC CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D611;MATHEMATICAL SANS-SERIF ITALIC CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D612;MATHEMATICAL SANS-SERIF ITALIC CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D613;MATHEMATICAL SANS-SERIF ITALIC CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D614;MATHEMATICAL SANS-SERIF ITALIC CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D615;MATHEMATICAL SANS-SERIF ITALIC CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D616;MATHEMATICAL SANS-SERIF ITALIC CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D617;MATHEMATICAL SANS-SERIF ITALIC CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D618;MATHEMATICAL SANS-SERIF ITALIC CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D619;MATHEMATICAL SANS-SERIF ITALIC CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D61A;MATHEMATICAL SANS-SERIF ITALIC CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D61B;MATHEMATICAL SANS-SERIF ITALIC CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D61C;MATHEMATICAL SANS-SERIF ITALIC CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D61D;MATHEMATICAL SANS-SERIF ITALIC CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D61E;MATHEMATICAL SANS-SERIF ITALIC CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D61F;MATHEMATICAL SANS-SERIF ITALIC CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D620;MATHEMATICAL SANS-SERIF ITALIC CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D621;MATHEMATICAL SANS-SERIF ITALIC CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D622;MATHEMATICAL SANS-SERIF ITALIC SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D623;MATHEMATICAL SANS-SERIF ITALIC SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D624;MATHEMATICAL SANS-SERIF ITALIC SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D625;MATHEMATICAL SANS-SERIF ITALIC SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D626;MATHEMATICAL SANS-SERIF ITALIC SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D627;MATHEMATICAL SANS-SERIF ITALIC SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D628;MATHEMATICAL SANS-SERIF ITALIC SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D629;MATHEMATICAL SANS-SERIF ITALIC SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D62A;MATHEMATICAL SANS-SERIF ITALIC SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D62B;MATHEMATICAL SANS-SERIF ITALIC SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D62C;MATHEMATICAL SANS-SERIF ITALIC SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D62D;MATHEMATICAL SANS-SERIF ITALIC SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D62E;MATHEMATICAL SANS-SERIF ITALIC SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D62F;MATHEMATICAL SANS-SERIF ITALIC SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D630;MATHEMATICAL SANS-SERIF ITALIC SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D631;MATHEMATICAL SANS-SERIF ITALIC SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D632;MATHEMATICAL SANS-SERIF ITALIC SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D633;MATHEMATICAL SANS-SERIF ITALIC SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D634;MATHEMATICAL SANS-SERIF ITALIC SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D635;MATHEMATICAL SANS-SERIF ITALIC SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D636;MATHEMATICAL SANS-SERIF ITALIC SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D637;MATHEMATICAL SANS-SERIF ITALIC SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D638;MATHEMATICAL SANS-SERIF ITALIC SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D639;MATHEMATICAL SANS-SERIF ITALIC SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D63A;MATHEMATICAL SANS-SERIF ITALIC SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D63B;MATHEMATICAL SANS-SERIF ITALIC SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D63C;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D63D;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D63E;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D63F;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D640;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D641;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D642;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D643;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D644;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D645;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D646;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D647;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D648;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D649;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D64A;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D64B;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D64C;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D64D;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D64E;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D64F;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D650;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D651;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D652;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D653;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D654;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D655;MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D656;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D657;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D658;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D659;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D65A;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D65B;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D65C;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D65D;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D65E;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D65F;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D660;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D661;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D662;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D663;MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;

----------------------------------------

TITLE: Testing WASM Applications on a Remote Machine via SSH
DESCRIPTION: Commands for testing WASM applications when the server is on a remote machine accessed via SSH. This setup creates an SSH tunnel to meet the browser security requirements for SharedArrayBuffer.

LANGUAGE: bash
CODE:
# Remote: althttpd --enable-sab --port 8080 --popup
# Local:  ssh -L 8180:localhost:8080 remote
# Local:  Point your web-browser at http://localhost:8180/index.html

----------------------------------------

TITLE: Latin Character Unicode Mapping Database
DESCRIPTION: A structured database of Unicode codepoints for Latin characters with their properties. Each line contains a hex code, character name, category, bidirectional class, decomposition mapping, and case mappings for uppercase and lowercase forms.

LANGUAGE: data
CODE:
00C3;LATIN CAPITAL LETTER A WITH TILDE;Lu;0;L;0041 0303;;;;N;LATIN CAPITAL LETTER A TILDE;;;00E3;
00C4;LATIN CAPITAL LETTER A WITH DIAERESIS;Lu;0;L;0041 0308;;;;N;LATIN CAPITAL LETTER A DIAERESIS;;;00E4;
00C5;LATIN CAPITAL LETTER A WITH RING ABOVE;Lu;0;L;0041 030A;;;;N;LATIN CAPITAL LETTER A RING;;;00E5;
00C6;LATIN CAPITAL LETTER AE;Lu;0;L;;;;;N;LATIN CAPITAL LETTER A E;;;00E6;
00C7;LATIN CAPITAL LETTER C WITH CEDILLA;Lu;0;L;0043 0327;;;;N;LATIN CAPITAL LETTER C CEDILLA;;;00E7;
00C8;LATIN CAPITAL LETTER E WITH GRAVE;Lu;0;L;0045 0300;;;;N;LATIN CAPITAL LETTER E GRAVE;;;00E8;
00C9;LATIN CAPITAL LETTER E WITH ACUTE;Lu;0;L;0045 0301;;;;N;LATIN CAPITAL LETTER E ACUTE;;;00E9;
00CA;LATIN CAPITAL LETTER E WITH CIRCUMFLEX;Lu;0;L;0045 0302;;;;N;LATIN CAPITAL LETTER E CIRCUMFLEX;;;00EA;
00CB;LATIN CAPITAL LETTER E WITH DIAERESIS;Lu;0;L;0045 0308;;;;N;LATIN CAPITAL LETTER E DIAERESIS;;;00EB;
00CC;LATIN CAPITAL LETTER I WITH GRAVE;Lu;0;L;0049 0300;;;;N;LATIN CAPITAL LETTER I GRAVE;;;00EC;
00CD;LATIN CAPITAL LETTER I WITH ACUTE;Lu;0;L;0049 0301;;;;N;LATIN CAPITAL LETTER I ACUTE;;;00ED;
00CE;LATIN CAPITAL LETTER I WITH CIRCUMFLEX;Lu;0;L;0049 0302;;;;N;LATIN CAPITAL LETTER I CIRCUMFLEX;;;00EE;
00CF;LATIN CAPITAL LETTER I WITH DIAERESIS;Lu;0;L;0049 0308;;;;N;LATIN CAPITAL LETTER I DIAERESIS;;;00EF;
00D0;LATIN CAPITAL LETTER ETH;Lu;0;L;;;;;N;;;;00F0;
00D1;LATIN CAPITAL LETTER N WITH TILDE;Lu;0;L;004E 0303;;;;N;LATIN CAPITAL LETTER N TILDE;;;00F1;
00D2;LATIN CAPITAL LETTER O WITH GRAVE;Lu;0;L;004F 0300;;;;N;LATIN CAPITAL LETTER O GRAVE;;;00F2;
00D3;LATIN CAPITAL LETTER O WITH ACUTE;Lu;0;L;004F 0301;;;;N;LATIN CAPITAL LETTER O ACUTE;;;00F3;
00D4;LATIN CAPITAL LETTER O WITH CIRCUMFLEX;Lu;0;L;004F 0302;;;;N;LATIN CAPITAL LETTER O CIRCUMFLEX;;;00F4;
00D5;LATIN CAPITAL LETTER O WITH TILDE;Lu;0;L;004F 0303;;;;N;LATIN CAPITAL LETTER O TILDE;;;00F5;
00D6;LATIN CAPITAL LETTER O WITH DIAERESIS;Lu;0;L;004F 0308;;;;N;LATIN CAPITAL LETTER O DIAERESIS;;;00F6;
00D7;MULTIPLICATION SIGN;Sm;0;ON;;;;;N;;;;;
00D8;LATIN CAPITAL LETTER O WITH STROKE;Lu;0;L;;;;;N;LATIN CAPITAL LETTER O SLASH;;;00F8;
00D9;LATIN CAPITAL LETTER U WITH GRAVE;Lu;0;L;0055 0300;;;;N;LATIN CAPITAL LETTER U GRAVE;;;00F9;
00DA;LATIN CAPITAL LETTER U WITH ACUTE;Lu;0;L;0055 0301;;;;N;LATIN CAPITAL LETTER U ACUTE;;;00FA;
00DB;LATIN CAPITAL LETTER U WITH CIRCUMFLEX;Lu;0;L;0055 0302;;;;N;LATIN CAPITAL LETTER U CIRCUMFLEX;;;00FB;
00DC;LATIN CAPITAL LETTER U WITH DIAERESIS;Lu;0;L;0055 0308;;;;N;LATIN CAPITAL LETTER U DIAERESIS;;;00FC;
00DD;LATIN CAPITAL LETTER Y WITH ACUTE;Lu;0;L;0059 0301;;;;N;LATIN CAPITAL LETTER Y ACUTE;;;00FD;
00DE;LATIN CAPITAL LETTER THORN;Lu;0;L;;;;;N;;;;00FE;
00DF;LATIN SMALL LETTER SHARP S;Ll;0;L;;;;;N;;;;;
00E0;LATIN SMALL LETTER A WITH GRAVE;Ll;0;L;0061 0300;;;;N;LATIN SMALL LETTER A GRAVE;;00C0;;00C0
00E1;LATIN SMALL LETTER A WITH ACUTE;Ll;0;L;0061 0301;;;;N;LATIN SMALL LETTER A ACUTE;;00C1;;00C1
00E2;LATIN SMALL LETTER A WITH CIRCUMFLEX;Ll;0;L;0061 0302;;;;N;LATIN SMALL LETTER A CIRCUMFLEX;;00C2;;00C2
00E3;LATIN SMALL LETTER A WITH TILDE;Ll;0;L;0061 0303;;;;N;LATIN SMALL LETTER A TILDE;;00C3;;00C3
00E4;LATIN SMALL LETTER A WITH DIAERESIS;Ll;0;L;0061 0308;;;;N;LATIN SMALL LETTER A DIAERESIS;;00C4;;00C4
00E5;LATIN SMALL LETTER A WITH RING ABOVE;Ll;0;L;0061 030A;;;;N;LATIN SMALL LETTER A RING;;00C5;;00C5
00E6;LATIN SMALL LETTER AE;Ll;0;L;;;;;N;LATIN SMALL LETTER A E;;00C6;;00C6
00E7;LATIN SMALL LETTER C WITH CEDILLA;Ll;0;L;0063 0327;;;;N;LATIN SMALL LETTER C CEDILLA;;00C7;;00C7
00E8;LATIN SMALL LETTER E WITH GRAVE;Ll;0;L;0065 0300;;;;N;LATIN SMALL LETTER E GRAVE;;00C8;;00C8
00E9;LATIN SMALL LETTER E WITH ACUTE;Ll;0;L;0065 0301;;;;N;LATIN SMALL LETTER E ACUTE;;00C9;;00C9
00EA;LATIN SMALL LETTER E WITH CIRCUMFLEX;Ll;0;L;0065 0302;;;;N;LATIN SMALL LETTER E CIRCUMFLEX;;00CA;;00CA
00EB;LATIN SMALL LETTER E WITH DIAERESIS;Ll;0;L;0065 0308;;;;N;LATIN SMALL LETTER E DIAERESIS;;00CB;;00CB
00EC;LATIN SMALL LETTER I WITH GRAVE;Ll;0;L;0069 0300;;;;N;LATIN SMALL LETTER I GRAVE;;00CC;;00CC
00ED;LATIN SMALL LETTER I WITH ACUTE;Ll;0;L;0069 0301;;;;N;LATIN SMALL LETTER I ACUTE;;00CD;;00CD
00EE;LATIN SMALL LETTER I WITH CIRCUMFLEX;Ll;0;L;0069 0302;;;;N;LATIN SMALL LETTER I CIRCUMFLEX;;00CE;;00CE
00EF;LATIN SMALL LETTER I WITH DIAERESIS;Ll;0;L;0069 0308;;;;N;LATIN SMALL LETTER I DIAERESIS;;00CF;;00CF
00F0;LATIN SMALL LETTER ETH;Ll;0;L;;;;;N;;;00D0;;00D0
00F1;LATIN SMALL LETTER N WITH TILDE;Ll;0;L;006E 0303;;;;N;LATIN SMALL LETTER N TILDE;;00D1;;00D1
00F2;LATIN SMALL LETTER O WITH GRAVE;Ll;0;L;006F 0300;;;;N;LATIN SMALL LETTER O GRAVE;;00D2;;00D2
00F3;LATIN SMALL LETTER O WITH ACUTE;Ll;0;L;006F 0301;;;;N;LATIN SMALL LETTER O ACUTE;;00D3;;00D3
00F4;LATIN SMALL LETTER O WITH CIRCUMFLEX;Ll;0;L;006F 0302;;;;N;LATIN SMALL LETTER O CIRCUMFLEX;;00D4;;00D4
00F5;LATIN SMALL LETTER O WITH TILDE;Ll;0;L;006F 0303;;;;N;LATIN SMALL LETTER O TILDE;;00D5;;00D5
00F6;LATIN SMALL LETTER O WITH DIAERESIS;Ll;0;L;006F 0308;;;;N;LATIN SMALL LETTER O DIAERESIS;;00D6;;00D6
00F7;DIVISION SIGN;Sm;0;ON;;;;;N;;;;;
00F8;LATIN SMALL LETTER O WITH STROKE;Ll;0;L;;;;;N;LATIN SMALL LETTER O SLASH;;00D8;;00D8
00F9;LATIN SMALL LETTER U WITH GRAVE;Ll;0;L;0075 0300;;;;N;LATIN SMALL LETTER U GRAVE;;00D9;;00D9
00FA;LATIN SMALL LETTER U WITH ACUTE;Ll;0;L;0075 0301;;;;N;LATIN SMALL LETTER U ACUTE;;00DA;;00DA
00FB;LATIN SMALL LETTER U WITH CIRCUMFLEX;Ll;0;L;0075 0302;;;;N;LATIN SMALL LETTER U CIRCUMFLEX;;00DB;;00DB
00FC;LATIN SMALL LETTER U WITH DIAERESIS;Ll;0;L;0075 0308;;;;N;LATIN SMALL LETTER U DIAERESIS;;00DC;;00DC
00FD;LATIN SMALL LETTER Y WITH ACUTE;Ll;0;L;0079 0301;;;;N;LATIN SMALL LETTER Y ACUTE;;00DD;;00DD
00FE;LATIN SMALL LETTER THORN;Ll;0;L;;;;;N;;;00DE;;00DE
00FF;LATIN SMALL LETTER Y WITH DIAERESIS;Ll;0;L;0079 0308;;;;N;LATIN SMALL LETTER Y DIAERESIS;;0178;;0178
0100;LATIN CAPITAL LETTER A WITH MACRON;Lu;0;L;0041 0304;;;;N;LATIN CAPITAL LETTER A MACRON;;;0101;
0101;LATIN SMALL LETTER A WITH MACRON;Ll;0;L;0061 0304;;;;N;LATIN SMALL LETTER A MACRON;;0100;;0100
0102;LATIN CAPITAL LETTER A WITH BREVE;Lu;0;L;0041 0306;;;;N;LATIN CAPITAL LETTER A BREVE;;;0103;
0103;LATIN SMALL LETTER A WITH BREVE;Ll;0;L;0061 0306;;;;N;LATIN SMALL LETTER A BREVE;;0102;;0102
0104;LATIN CAPITAL LETTER A WITH OGONEK;Lu;0;L;0041 0328;;;;N;LATIN CAPITAL LETTER A OGONEK;;;0105;
0105;LATIN SMALL LETTER A WITH OGONEK;Ll;0;L;0061 0328;;;;N;LATIN SMALL LETTER A OGONEK;;0104;;0104
0106;LATIN CAPITAL LETTER C WITH ACUTE;Lu;0;L;0043 0301;;;;N;LATIN CAPITAL LETTER C ACUTE;;;0107;
0107;LATIN SMALL LETTER C WITH ACUTE;Ll;0;L;0063 0301;;;;N;LATIN SMALL LETTER C ACUTE;;0106;;0106
0108;LATIN CAPITAL LETTER C WITH CIRCUMFLEX;Lu;0;L;0043 0302;;;;N;LATIN CAPITAL LETTER C CIRCUMFLEX;;;0109;
0109;LATIN SMALL LETTER C WITH CIRCUMFLEX;Ll;0;L;0063 0302;;;;N;LATIN SMALL LETTER C CIRCUMFLEX;;0108;;0108
010A;LATIN CAPITAL LETTER C WITH DOT ABOVE;Lu;0;L;0043 0307;;;;N;LATIN CAPITAL LETTER C DOT;;;010B;
010B;LATIN SMALL LETTER C WITH DOT ABOVE;Ll;0;L;0063 0307;;;;N;LATIN SMALL LETTER C DOT;;010A;;010A
010C;LATIN CAPITAL LETTER C WITH CARON;Lu;0;L;0043 030C;;;;N;LATIN CAPITAL LETTER C HACEK;;;010D;
010D;LATIN SMALL LETTER C WITH CARON;Ll;0;L;0063 030C;;;;N;LATIN SMALL LETTER C HACEK;;010C;;010C
010E;LATIN CAPITAL LETTER D WITH CARON;Lu;0;L;0044 030C;;;;N;LATIN CAPITAL LETTER D HACEK;;;010F;
010F;LATIN SMALL LETTER D WITH CARON;Ll;0;L;0064 030C;;;;N;LATIN SMALL LETTER D HACEK;;010E;;010E
0110;LATIN CAPITAL LETTER D WITH STROKE;Lu;0;L;;;;;N;LATIN CAPITAL LETTER D BAR;;;0111;
0111;LATIN SMALL LETTER D WITH STROKE;Ll;0;L;;;;;N;LATIN SMALL LETTER D BAR;;0110;;0110
0112;LATIN CAPITAL LETTER E WITH MACRON;Lu;0;L;0045 0304;;;;N;LATIN CAPITAL LETTER E MACRON;;;0113;
0113;LATIN SMALL LETTER E WITH MACRON;Ll;0;L;0065 0304;;;;N;LATIN SMALL LETTER E MACRON;;0112;;0112
0114;LATIN CAPITAL LETTER E WITH BREVE;Lu;0;L;0045 0306;;;;N;LATIN CAPITAL LETTER E BREVE;;;0115;
0115;LATIN SMALL LETTER E WITH BREVE;Ll;0;L;0065 0306;;;;N;LATIN SMALL LETTER E BREVE;;0114;;0114
0116;LATIN CAPITAL LETTER E WITH DOT ABOVE;Lu;0;L;0045 0307;;;;N;LATIN CAPITAL LETTER E DOT;;;0117;
0117;LATIN SMALL LETTER E WITH DOT ABOVE;Ll;0;L;0065 0307;;;;N;LATIN SMALL LETTER E DOT;;0116;;0116
0118;LATIN CAPITAL LETTER E WITH OGONEK;Lu;0;L;0045 0328;;;;N;LATIN CAPITAL LETTER E OGONEK;;;0119;
0119;LATIN SMALL LETTER E WITH OGONEK;Ll;0;L;0065 0328;;;;N;LATIN SMALL LETTER E OGONEK;;0118;;0118
011A;LATIN CAPITAL LETTER E WITH CARON;Lu;0;L;0045 030C;;;;N;LATIN CAPITAL LETTER E HACEK;;;011B;
011B;LATIN SMALL LETTER E WITH CARON;Ll;0;L;0065 030C;;;;N;LATIN SMALL LETTER E HACEK;;011A;;011A
011C;LATIN CAPITAL LETTER G WITH CIRCUMFLEX;Lu;0;L;0047 0302;;;;N;LATIN CAPITAL LETTER G CIRCUMFLEX;;;011D;
011D;LATIN SMALL LETTER G WITH CIRCUMFLEX;Ll;0;L;0067 0302;;;;N;LATIN SMALL LETTER G CIRCUMFLEX;;011C;;011C
011E;LATIN CAPITAL LETTER G WITH BREVE;Lu;0;L;0047 0306;;;;N;LATIN CAPITAL LETTER G BREVE;;;011F;
011F;LATIN SMALL LETTER G WITH BREVE;Ll;0;L;0067 0306;;;;N;LATIN SMALL LETTER G BREVE;;011E;;011E
0120;LATIN CAPITAL LETTER G WITH DOT ABOVE;Lu;0;L;0047 0307;;;;N;LATIN CAPITAL LETTER G DOT;;;0121;
0121;LATIN SMALL LETTER G WITH DOT ABOVE;Ll;0;L;0067 0307;;;;N;LATIN SMALL LETTER G DOT;;0120;;0120
0122;LATIN CAPITAL LETTER G WITH CEDILLA;Lu;0;L;0047 0327;;;;N;LATIN CAPITAL LETTER G CEDILLA;;;0123;
0123;LATIN SMALL LETTER G WITH CEDILLA;Ll;0;L;0067 0327;;;;N;LATIN SMALL LETTER G CEDILLA;;0122;;0122
0124;LATIN CAPITAL LETTER H WITH CIRCUMFLEX;Lu;0;L;0048 0302;;;;N;LATIN CAPITAL LETTER H CIRCUMFLEX;;;0125;
0125;LATIN SMALL LETTER H WITH CIRCUMFLEX;Ll;0;L;0068 0302;;;;N;LATIN SMALL LETTER H CIRCUMFLEX;;0124;;0124
0126;LATIN CAPITAL LETTER H WITH STROKE;Lu;0;L;;;;;N;LATIN CAPITAL LETTER H BAR;;;0127;
0127;LATIN SMALL LETTER H WITH STROKE;Ll;0;L;;;;;N;LATIN SMALL LETTER H BAR;;0126;;0126
0128;LATIN CAPITAL LETTER I WITH TILDE;Lu;0;L;0049 0303;;;;N;LATIN CAPITAL LETTER I TILDE;;;0129;
0129;LATIN SMALL LETTER I WITH TILDE;Ll;0;L;0069 0303;;;;N;LATIN SMALL LETTER I TILDE;;0128;;0128

----------------------------------------

TITLE: Defining Extended Unicode Variation Selectors in Plaintext
DESCRIPTION: This code snippet contains Unicode character definitions for variation selectors 44-248 (code points E011B-E01E7). Each line follows the standard Unicode Character Database format, specifying the hexadecimal code point, character name, general category (Mn - Mark, Nonspacing), bidirectional class (NSM - Nonspacing Mark), and other Unicode properties.

LANGUAGE: plaintext
CODE:
E011B;VARIATION SELECTOR-44;Mn;0;NSM;;;;;N;;;;;
E011C;VARIATION SELECTOR-45;Mn;0;NSM;;;;;N;;;;;
E011D;VARIATION SELECTOR-46;Mn;0;NSM;;;;;N;;;;;
E011E;VARIATION SELECTOR-47;Mn;0;NSM;;;;;N;;;;;
E011F;VARIATION SELECTOR-48;Mn;0;NSM;;;;;N;;;;;
E0120;VARIATION SELECTOR-49;Mn;0;NSM;;;;;N;;;;;
E0121;VARIATION SELECTOR-50;Mn;0;NSM;;;;;N;;;;;
E0122;VARIATION SELECTOR-51;Mn;0;NSM;;;;;N;;;;;
E0123;VARIATION SELECTOR-52;Mn;0;NSM;;;;;N;;;;;
E0124;VARIATION SELECTOR-53;Mn;0;NSM;;;;;N;;;;;
E0125;VARIATION SELECTOR-54;Mn;0;NSM;;;;;N;;;;;
E0126;VARIATION SELECTOR-55;Mn;0;NSM;;;;;N;;;;;
E0127;VARIATION SELECTOR-56;Mn;0;NSM;;;;;N;;;;;
E0128;VARIATION SELECTOR-57;Mn;0;NSM;;;;;N;;;;;
E0129;VARIATION SELECTOR-58;Mn;0;NSM;;;;;N;;;;;
E012A;VARIATION SELECTOR-59;Mn;0;NSM;;;;;N;;;;;
E012B;VARIATION SELECTOR-60;Mn;0;NSM;;;;;N;;;;;
E012C;VARIATION SELECTOR-61;Mn;0;NSM;;;;;N;;;;;
E012D;VARIATION SELECTOR-62;Mn;0;NSM;;;;;N;;;;;
E012E;VARIATION SELECTOR-63;Mn;0;NSM;;;;;N;;;;;
E012F;VARIATION SELECTOR-64;Mn;0;NSM;;;;;N;;;;;
E0130;VARIATION SELECTOR-65;Mn;0;NSM;;;;;N;;;;;
E0131;VARIATION SELECTOR-66;Mn;0;NSM;;;;;N;;;;;
E0132;VARIATION SELECTOR-67;Mn;0;NSM;;;;;N;;;;;
E0133;VARIATION SELECTOR-68;Mn;0;NSM;;;;;N;;;;;
E0134;VARIATION SELECTOR-69;Mn;0;NSM;;;;;N;;;;;
E0135;VARIATION SELECTOR-70;Mn;0;NSM;;;;;N;;;;;
E0136;VARIATION SELECTOR-71;Mn;0;NSM;;;;;N;;;;;
E0137;VARIATION SELECTOR-72;Mn;0;NSM;;;;;N;;;;;
E0138;VARIATION SELECTOR-73;Mn;0;NSM;;;;;N;;;;;
E0139;VARIATION SELECTOR-74;Mn;0;NSM;;;;;N;;;;;
E013A;VARIATION SELECTOR-75;Mn;0;NSM;;;;;N;;;;;
E013B;VARIATION SELECTOR-76;Mn;0;NSM;;;;;N;;;;;
E013C;VARIATION SELECTOR-77;Mn;0;NSM;;;;;N;;;;;
E013D;VARIATION SELECTOR-78;Mn;0;NSM;;;;;N;;;;;
E013E;VARIATION SELECTOR-79;Mn;0;NSM;;;;;N;;;;;
E013F;VARIATION SELECTOR-80;Mn;0;NSM;;;;;N;;;;;
E0140;VARIATION SELECTOR-81;Mn;0;NSM;;;;;N;;;;;
E0141;VARIATION SELECTOR-82;Mn;0;NSM;;;;;N;;;;;
E0142;VARIATION SELECTOR-83;Mn;0;NSM;;;;;N;;;;;
E0143;VARIATION SELECTOR-84;Mn;0;NSM;;;;;N;;;;;
E0144;VARIATION SELECTOR-85;Mn;0;NSM;;;;;N;;;;;
E0145;VARIATION SELECTOR-86;Mn;0;NSM;;;;;N;;;;;
E0146;VARIATION SELECTOR-87;Mn;0;NSM;;;;;N;;;;;
E0147;VARIATION SELECTOR-88;Mn;0;NSM;;;;;N;;;;;
E0148;VARIATION SELECTOR-89;Mn;0;NSM;;;;;N;;;;;
E0149;VARIATION SELECTOR-90;Mn;0;NSM;;;;;N;;;;;
E014A;VARIATION SELECTOR-91;Mn;0;NSM;;;;;N;;;;;
E014B;VARIATION SELECTOR-92;Mn;0;NSM;;;;;N;;;;;
E014C;VARIATION SELECTOR-93;Mn;0;NSM;;;;;N;;;;;
E014D;VARIATION SELECTOR-94;Mn;0;NSM;;;;;N;;;;;
E014E;VARIATION SELECTOR-95;Mn;0;NSM;;;;;N;;;;;
E014F;VARIATION SELECTOR-96;Mn;0;NSM;;;;;N;;;;;
E0150;VARIATION SELECTOR-97;Mn;0;NSM;;;;;N;;;;;
E0151;VARIATION SELECTOR-98;Mn;0;NSM;;;;;N;;;;;
E0152;VARIATION SELECTOR-99;Mn;0;NSM;;;;;N;;;;;
E0153;VARIATION SELECTOR-100;Mn;0;NSM;;;;;N;;;;;
E0154;VARIATION SELECTOR-101;Mn;0;NSM;;;;;N;;;;;
E0155;VARIATION SELECTOR-102;Mn;0;NSM;;;;;N;;;;;
E0156;VARIATION SELECTOR-103;Mn;0;NSM;;;;;N;;;;;
E0157;VARIATION SELECTOR-104;Mn;0;NSM;;;;;N;;;;;
E0158;VARIATION SELECTOR-105;Mn;0;NSM;;;;;N;;;;;
E0159;VARIATION SELECTOR-106;Mn;0;NSM;;;;;N;;;;;
E015A;VARIATION SELECTOR-107;Mn;0;NSM;;;;;N;;;;;
E015B;VARIATION SELECTOR-108;Mn;0;NSM;;;;;N;;;;;
E015C;VARIATION SELECTOR-109;Mn;0;NSM;;;;;N;;;;;
E015D;VARIATION SELECTOR-110;Mn;0;NSM;;;;;N;;;;;
E015E;VARIATION SELECTOR-111;Mn;0;NSM;;;;;N;;;;;
E015F;VARIATION SELECTOR-112;Mn;0;NSM;;;;;N;;;;;
E0160;VARIATION SELECTOR-113;Mn;0;NSM;;;;;N;;;;;
E0161;VARIATION SELECTOR-114;Mn;0;NSM;;;;;N;;;;;
E0162;VARIATION SELECTOR-115;Mn;0;NSM;;;;;N;;;;;
E0163;VARIATION SELECTOR-116;Mn;0;NSM;;;;;N;;;;;
E0164;VARIATION SELECTOR-117;Mn;0;NSM;;;;;N;;;;;
E0165;VARIATION SELECTOR-118;Mn;0;NSM;;;;;N;;;;;
E0166;VARIATION SELECTOR-119;Mn;0;NSM;;;;;N;;;;;
E0167;VARIATION SELECTOR-120;Mn;0;NSM;;;;;N;;;;;
E0168;VARIATION SELECTOR-121;Mn;0;NSM;;;;;N;;;;;
E0169;VARIATION SELECTOR-122;Mn;0;NSM;;;;;N;;;;;
E016A;VARIATION SELECTOR-123;Mn;0;NSM;;;;;N;;;;;
E016B;VARIATION SELECTOR-124;Mn;0;NSM;;;;;N;;;;;
E016C;VARIATION SELECTOR-125;Mn;0;NSM;;;;;N;;;;;
E016D;VARIATION SELECTOR-126;Mn;0;NSM;;;;;N;;;;;
E016E;VARIATION SELECTOR-127;Mn;0;NSM;;;;;N;;;;;
E016F;VARIATION SELECTOR-128;Mn;0;NSM;;;;;N;;;;;
E0170;VARIATION SELECTOR-129;Mn;0;NSM;;;;;N;;;;;
E0171;VARIATION SELECTOR-130;Mn;0;NSM;;;;;N;;;;;
E0172;VARIATION SELECTOR-131;Mn;0;NSM;;;;;N;;;;;
E0173;VARIATION SELECTOR-132;Mn;0;NSM;;;;;N;;;;;
E0174;VARIATION SELECTOR-133;Mn;0;NSM;;;;;N;;;;;
E0175;VARIATION SELECTOR-134;Mn;0;NSM;;;;;N;;;;;
E0176;VARIATION SELECTOR-135;Mn;0;NSM;;;;;N;;;;;
E0177;VARIATION SELECTOR-136;Mn;0;NSM;;;;;N;;;;;
E0178;VARIATION SELECTOR-137;Mn;0;NSM;;;;;N;;;;;
E0179;VARIATION SELECTOR-138;Mn;0;NSM;;;;;N;;;;;
E017A;VARIATION SELECTOR-139;Mn;0;NSM;;;;;N;;;;;
E017B;VARIATION SELECTOR-140;Mn;0;NSM;;;;;N;;;;;
E017C;VARIATION SELECTOR-141;Mn;0;NSM;;;;;N;;;;;
E017D;VARIATION SELECTOR-142;Mn;0;NSM;;;;;N;;;;;
E017E;VARIATION SELECTOR-143;Mn;0;NSM;;;;;N;;;;;
E017F;VARIATION SELECTOR-144;Mn;0;NSM;;;;;N;;;;;
E0180;VARIATION SELECTOR-145;Mn;0;NSM;;;;;N;;;;;
E0181;VARIATION SELECTOR-146;Mn;0;NSM;;;;;N;;;;;
E0182;VARIATION SELECTOR-147;Mn;0;NSM;;;;;N;;;;;
E0183;VARIATION SELECTOR-148;Mn;0;NSM;;;;;N;;;;;
E0184;VARIATION SELECTOR-149;Mn;0;NSM;;;;;N;;;;;
E0185;VARIATION SELECTOR-150;Mn;0;NSM;;;;;N;;;;;
E0186;VARIATION SELECTOR-151;Mn;0;NSM;;;;;N;;;;;
E0187;VARIATION SELECTOR-152;Mn;0;NSM;;;;;N;;;;;
E0188;VARIATION SELECTOR-153;Mn;0;NSM;;;;;N;;;;;
E0189;VARIATION SELECTOR-154;Mn;0;NSM;;;;;N;;;;;
E018A;VARIATION SELECTOR-155;Mn;0;NSM;;;;;N;;;;;
E018B;VARIATION SELECTOR-156;Mn;0;NSM;;;;;N;;;;;
E018C;VARIATION SELECTOR-157;Mn;0;NSM;;;;;N;;;;;
E018D;VARIATION SELECTOR-158;Mn;0;NSM;;;;;N;;;;;
E018E;VARIATION SELECTOR-159;Mn;0;NSM;;;;;N;;;;;
E018F;VARIATION SELECTOR-160;Mn;0;NSM;;;;;N;;;;;
E0190;VARIATION SELECTOR-161;Mn;0;NSM;;;;;N;;;;;
E0191;VARIATION SELECTOR-162;Mn;0;NSM;;;;;N;;;;;
E0192;VARIATION SELECTOR-163;Mn;0;NSM;;;;;N;;;;;
E0193;VARIATION SELECTOR-164;Mn;0;NSM;;;;;N;;;;;
E0194;VARIATION SELECTOR-165;Mn;0;NSM;;;;;N;;;;;
E0195;VARIATION SELECTOR-166;Mn;0;NSM;;;;;N;;;;;
E0196;VARIATION SELECTOR-167;Mn;0;NSM;;;;;N;;;;;
E0197;VARIATION SELECTOR-168;Mn;0;NSM;;;;;N;;;;;
E0198;VARIATION SELECTOR-169;Mn;0;NSM;;;;;N;;;;;
E0199;VARIATION SELECTOR-170;Mn;0;NSM;;;;;N;;;;;
E019A;VARIATION SELECTOR-171;Mn;0;NSM;;;;;N;;;;;
E019B;VARIATION SELECTOR-172;Mn;0;NSM;;;;;N;;;;;
E019C;VARIATION SELECTOR-173;Mn;0;NSM;;;;;N;;;;;
E019D;VARIATION SELECTOR-174;Mn;0;NSM;;;;;N;;;;;
E019E;VARIATION SELECTOR-175;Mn;0;NSM;;;;;N;;;;;
E019F;VARIATION SELECTOR-176;Mn;0;NSM;;;;;N;;;;;
E01A0;VARIATION SELECTOR-177;Mn;0;NSM;;;;;N;;;;;
E01A1;VARIATION SELECTOR-178;Mn;0;NSM;;;;;N;;;;;
E01A2;VARIATION SELECTOR-179;Mn;0;NSM;;;;;N;;;;;
E01A3;VARIATION SELECTOR-180;Mn;0;NSM;;;;;N;;;;;
E01A4;VARIATION SELECTOR-181;Mn;0;NSM;;;;;N;;;;;
E01A5;VARIATION SELECTOR-182;Mn;0;NSM;;;;;N;;;;;
E01A6;VARIATION SELECTOR-183;Mn;0;NSM;;;;;N;;;;;
E01A7;VARIATION SELECTOR-184;Mn;0;NSM;;;;;N;;;;;
E01A8;VARIATION SELECTOR-185;Mn;0;NSM;;;;;N;;;;;
E01A9;VARIATION SELECTOR-186;Mn;0;NSM;;;;;N;;;;;
E01AA;VARIATION SELECTOR-187;Mn;0;NSM;;;;;N;;;;;
E01AB;VARIATION SELECTOR-188;Mn;0;NSM;;;;;N;;;;;
E01AC;VARIATION SELECTOR-189;Mn;0;NSM;;;;;N;;;;;
E01AD;VARIATION SELECTOR-190;Mn;0;NSM;;;;;N;;;;;
E01AE;VARIATION SELECTOR-191;Mn;0;NSM;;;;;N;;;;;
E01AF;VARIATION SELECTOR-192;Mn;0;NSM;;;;;N;;;;;
E01B0;VARIATION SELECTOR-193;Mn;0;NSM;;;;;N;;;;;
E01B1;VARIATION SELECTOR-194;Mn;0;NSM;;;;;N;;;;;
E01B2;VARIATION SELECTOR-195;Mn;0;NSM;;;;;N;;;;;
E01B3;VARIATION SELECTOR-196;Mn;0;NSM;;;;;N;;;;;
E01B4;VARIATION SELECTOR-197;Mn;0;NSM;;;;;N;;;;;
E01B5;VARIATION SELECTOR-198;Mn;0;NSM;;;;;N;;;;;
E01B6;VARIATION SELECTOR-199;Mn;0;NSM;;;;;N;;;;;
E01B7;VARIATION SELECTOR-200;Mn;0;NSM;;;;;N;;;;;
E01B8;VARIATION SELECTOR-201;Mn;0;NSM;;;;;N;;;;;
E01B9;VARIATION SELECTOR-202;Mn;0;NSM;;;;;N;;;;;
E01BA;VARIATION SELECTOR-203;Mn;0;NSM;;;;;N;;;;;
E01BB;VARIATION SELECTOR-204;Mn;0;NSM;;;;;N;;;;;
E01BC;VARIATION SELECTOR-205;Mn;0;NSM;;;;;N;;;;;
E01BD;VARIATION SELECTOR-206;Mn;0;NSM;;;;;N;;;;;
E01BE;VARIATION SELECTOR-207;Mn;0;NSM;;;;;N;;;;;
E01BF;VARIATION SELECTOR-208;Mn;0;NSM;;;;;N;;;;;
E01C0;VARIATION SELECTOR-209;Mn;0;NSM;;;;;N;;;;;
E01C1;VARIATION SELECTOR-210;Mn;0;NSM;;;;;N;;;;;
E01C2;VARIATION SELECTOR-211;Mn;0;NSM;;;;;N;;;;;
E01C3;VARIATION SELECTOR-212;Mn;0;NSM;;;;;N;;;;;
E01C4;VARIATION SELECTOR-213;Mn;0;NSM;;;;;N;;;;;
E01C5;VARIATION SELECTOR-214;Mn;0;NSM;;;;;N;;;;;
E01C6;VARIATION SELECTOR-215;Mn;0;NSM;;;;;N;;;;;
E01C7;VARIATION SELECTOR-216;Mn;0;NSM;;;;;N;;;;;
E01C8;VARIATION SELECTOR-217;Mn;0;NSM;;;;;N;;;;;
E01C9;VARIATION SELECTOR-218;Mn;0;NSM;;;;;N;;;;;
E01CA;VARIATION SELECTOR-219;Mn;0;NSM;;;;;N;;;;;
E01CB;VARIATION SELECTOR-220;Mn;0;NSM;;;;;N;;;;;
E01CC;VARIATION SELECTOR-221;Mn;0;NSM;;;;;N;;;;;
E01CD;VARIATION SELECTOR-222;Mn;0;NSM;;;;;N;;;;;
E01CE;VARIATION SELECTOR-223;Mn;0;NSM;;;;;N;;;;;
E01CF;VARIATION SELECTOR-224;Mn;0;NSM;;;;;N;;;;;
E01D0;VARIATION SELECTOR-225;Mn;0;NSM;;;;;N;;;;;
E01D1;VARIATION SELECTOR-226;Mn;0;NSM;;;;;N;;;;;
E01D2;VARIATION SELECTOR-227;Mn;0;NSM;;;;;N;;;;;
E01D3;VARIATION SELECTOR-228;Mn;0;NSM;;;;;N;;;;;
E01D4;VARIATION SELECTOR-229;Mn;0;NSM;;;;;N;;;;;
E01D5;VARIATION SELECTOR-230;Mn;0;NSM;;;;;N;;;;;
E01D6;VARIATION SELECTOR-231;Mn;0;NSM;;;;;N;;;;;
E01D7;VARIATION SELECTOR-232;Mn;0;NSM;;;;;N;;;;;
E01D8;VARIATION SELECTOR-233;Mn;0;NSM;;;;;N;;;;;
E01D9;VARIATION SELECTOR-234;Mn;0;NSM;;;;;N;;;;;
E01DA;VARIATION SELECTOR-235;Mn;0;NSM;;;;;N;;;;;
E01DB;VARIATION SELECTOR-236;Mn;0;NSM;;;;;N;;;;;
E01DC;VARIATION SELECTOR-237;Mn;0;NSM;;;;;N;;;;;
E01DD;VARIATION SELECTOR-238;Mn;0;NSM;;;;;N;;;;;
E01DE;VARIATION SELECTOR-239;Mn;0;NSM;;;;;N;;;;;
E01DF;VARIATION SELECTOR-240;Mn;0;NSM;;;;;N;;;;;
E01E0;VARIATION SELECTOR-241;Mn;0;NSM;;;;;N;;;;;
E01E1;VARIATION SELECTOR-242;Mn;0;NSM;;;;;N;;;;;
E01E2;VARIATION SELECTOR-243;Mn;0;NSM;;;;;N;;;;;
E01E3;VARIATION SELECTOR-244;Mn;0;NSM;;;;;N;;;;;
E01E4;VARIATION SELECTOR-245;Mn;0;NSM;;;;;N;;;;;
E01E5;VARIATION SELECTOR-246;Mn;0;NSM;;;;;N;;;;;
E01E6;VARIATION SELECTOR-247;Mn;0;NSM;;;;;N;;;;;
E01E7;VARIATION SELECTOR-248;Mn;0;NSM;;;;;N;;;;;

----------------------------------------

TITLE: Installing and Configuring Emscripten SDK on Linux
DESCRIPTION: Commands for cloning, installing, and activating the Emscripten SDK on a Linux system. This process only needs to be performed once to set up the development environment.

LANGUAGE: bash
CODE:
# Clone the emscripten repository:
$ sudo apt install git
$ git clone https://github.com/emscripten-core/emsdk.git
$ cd emsdk

# Download and install the latest SDK tools:
$ ./emsdk install latest

# Make the "latest" SDK "active" for the current user:
$ ./emsdk activate latest

----------------------------------------

TITLE: Loading ICU Collation Sequences in SQLite
DESCRIPTION: Examples of using the icu_load_collation() function to register ICU collation sequences with SQLite. This enables culturally accurate string comparisons based on specific locale rules.

LANGUAGE: sql
CODE:
SELECT icu_load_collation('tr_TR', 'turkish');

SELECT icu_load_collation('en_AU', 'australian');

----------------------------------------

TITLE: Running SQLite tests with sqlite3_checker
DESCRIPTION: Command to run the 'test.tcl' script using the sqlite3_checker tool. The command allows specifying the path to the test script and optionally adding individual test modules.

LANGUAGE: shell
CODE:
./sqlite3_checker --test $path/test.tcl

----------------------------------------

TITLE: Compiling SQLite ICU Extension as a Shared Library
DESCRIPTION: Command for compiling the ICU extension as a dynamically loadable SQLite extension on Unix-like systems. The command uses gcc with pkg-config to find the required ICU libraries.

LANGUAGE: bash
CODE:
gcc -fPIC -shared icu.c `pkg-config --libs --cflags icu-uc icu-io` \
    -o libSqliteIcu.so

----------------------------------------

TITLE: Java Interface for User-defined SQL Functions (UDFs)
DESCRIPTION: The Java interface for registering user-defined SQL functions in SQLite. This simplified API uses a single SQLFunction parameter instead of multiple function pointers as in the C API.

LANGUAGE: java
CODE:
int sqlite3_create_function(sqlite3 db, String funcName, int nArgs,
                            int encoding, SQLFunction func);

----------------------------------------

TITLE: Using the --db Command in libsql
DESCRIPTION: The --db command switches between up to 7 different SQLite database connections. The argument is an integer between 0 and 6 that selects which database connection to use for subsequent operations.

LANGUAGE: shell
CODE:
--db

----------------------------------------

TITLE: Running sqlite3_expert with Sample Percentage
DESCRIPTION: Commands for running sqlite3_expert with sampling configuration. The first example uses 25% of the database rows for statistics, while the second example disables statistics generation completely.

LANGUAGE: bash
CODE:
# Generate statistics based on 25% of the user database rows:
./sqlite3_expert -sample 25 -sql <sql-query> test.db

# Do not generate any statistics at all:
./sqlite3_expert -sample 0 -sql <sql-query> test.db

----------------------------------------

TITLE: Using the --close Command in libsql
DESCRIPTION: The --close command closes an existing database connection. It accepts a connection number (0-6) as an argument, or 'all' to close all connections. If no argument is provided, it closes the currently active connection.

LANGUAGE: shell
CODE:
--close

----------------------------------------

TITLE: Egyptian Hieroglyph Unicode Data Definition
DESCRIPTION: Unicode code point definitions for Egyptian hieroglyphs with character properties. Each line contains the hexadecimal code point, character name, general category (Lo), bidirectional class, and other Unicode properties.

LANGUAGE: data
CODE:
13089;EGYPTIAN HIEROGLYPH D019;Lo;0;L;;;;;N;;;;;
1308A;EGYPTIAN HIEROGLYPH D020;Lo;0;L;;;;;N;;;;;
1308B;EGYPTIAN HIEROGLYPH D021;Lo;0;L;;;;;N;;;;;
1308C;EGYPTIAN HIEROGLYPH D022;Lo;0;L;;;;;N;;;;;
1308D;EGYPTIAN HIEROGLYPH D023;Lo;0;L;;;;;N;;;;;
1308E;EGYPTIAN HIEROGLYPH D024;Lo;0;L;;;;;N;;;;;
1308F;EGYPTIAN HIEROGLYPH D025;Lo;0;L;;;;;N;;;;;
13090;EGYPTIAN HIEROGLYPH D026;Lo;0;L;;;;;N;;;;;
13091;EGYPTIAN HIEROGLYPH D027;Lo;0;L;;;;;N;;;;;
13092;EGYPTIAN HIEROGLYPH D027A;Lo;0;L;;;;;N;;;;;
13093;EGYPTIAN HIEROGLYPH D028;Lo;0;L;;;;;N;;;;;
13094;EGYPTIAN HIEROGLYPH D029;Lo;0;L;;;;;N;;;;;
13095;EGYPTIAN HIEROGLYPH D030;Lo;0;L;;;;;N;;;;;
13096;EGYPTIAN HIEROGLYPH D031;Lo;0;L;;;;;N;;;;;
13097;EGYPTIAN HIEROGLYPH D031A;Lo;0;L;;;;;N;;;;;
13098;EGYPTIAN HIEROGLYPH D032;Lo;0;L;;;;;N;;;;;
13099;EGYPTIAN HIEROGLYPH D033;Lo;0;L;;;;;N;;;;;
1309A;EGYPTIAN HIEROGLYPH D034;Lo;0;L;;;;;N;;;;;
1309B;EGYPTIAN HIEROGLYPH D034A;Lo;0;L;;;;;N;;;;;
1309C;EGYPTIAN HIEROGLYPH D035;Lo;0;L;;;;;N;;;;;
1309D;EGYPTIAN HIEROGLYPH D036;Lo;0;L;;;;;N;;;;;
1309E;EGYPTIAN HIEROGLYPH D037;Lo;0;L;;;;;N;;;;;
1309F;EGYPTIAN HIEROGLYPH D038;Lo;0;L;;;;;N;;;;;
130A0;EGYPTIAN HIEROGLYPH D039;Lo;0;L;;;;;N;;;;;
130A1;EGYPTIAN HIEROGLYPH D040;Lo;0;L;;;;;N;;;;;
130A2;EGYPTIAN HIEROGLYPH D041;Lo;0;L;;;;;N;;;;;
130A3;EGYPTIAN HIEROGLYPH D042;Lo;0;L;;;;;N;;;;;
130A4;EGYPTIAN HIEROGLYPH D043;Lo;0;L;;;;;N;;;;;
130A5;EGYPTIAN HIEROGLYPH D044;Lo;0;L;;;;;N;;;;;
130A6;EGYPTIAN HIEROGLYPH D045;Lo;0;L;;;;;N;;;;;
130A7;EGYPTIAN HIEROGLYPH D046;Lo;0;L;;;;;N;;;;;
130A8;EGYPTIAN HIEROGLYPH D046A;Lo;0;L;;;;;N;;;;;
130A9;EGYPTIAN HIEROGLYPH D047;Lo;0;L;;;;;N;;;;;
130AA;EGYPTIAN HIEROGLYPH D048;Lo;0;L;;;;;N;;;;;
130AB;EGYPTIAN HIEROGLYPH D048A;Lo;0;L;;;;;N;;;;;
130AC;EGYPTIAN HIEROGLYPH D049;Lo;0;L;;;;;N;;;;;
130AD;EGYPTIAN HIEROGLYPH D050;Lo;0;L;;;;;N;;;;;
130AE;EGYPTIAN HIEROGLYPH D050A;Lo;0;L;;;;;N;;;;;
130AF;EGYPTIAN HIEROGLYPH D050B;Lo;0;L;;;;;N;;;;;
130B0;EGYPTIAN HIEROGLYPH D050C;Lo;0;L;;;;;N;;;;;
130B1;EGYPTIAN HIEROGLYPH D050D;Lo;0;L;;;;;N;;;;;
130B2;EGYPTIAN HIEROGLYPH D050E;Lo;0;L;;;;;N;;;;;
130B3;EGYPTIAN HIEROGLYPH D050F;Lo;0;L;;;;;N;;;;;
130B4;EGYPTIAN HIEROGLYPH D050G;Lo;0;L;;;;;N;;;;;
130B5;EGYPTIAN HIEROGLYPH D050H;Lo;0;L;;;;;N;;;;;
130B6;EGYPTIAN HIEROGLYPH D050I;Lo;0;L;;;;;N;;;;;
130B7;EGYPTIAN HIEROGLYPH D051;Lo;0;L;;;;;N;;;;;
130B8;EGYPTIAN HIEROGLYPH D052;Lo;0;L;;;;;N;;;;;
130B9;EGYPTIAN HIEROGLYPH D052A;Lo;0;L;;;;;N;;;;;
130BA;EGYPTIAN HIEROGLYPH D053;Lo;0;L;;;;;N;;;;;
130BB;EGYPTIAN HIEROGLYPH D054;Lo;0;L;;;;;N;;;;;
130BC;EGYPTIAN HIEROGLYPH D054A;Lo;0;L;;;;;N;;;;;
130BD;EGYPTIAN HIEROGLYPH D055;Lo;0;L;;;;;N;;;;;
130BE;EGYPTIAN HIEROGLYPH D056;Lo;0;L;;;;;N;;;;;
130BF;EGYPTIAN HIEROGLYPH D057;Lo;0;L;;;;;N;;;;;
130C0;EGYPTIAN HIEROGLYPH D058;Lo;0;L;;;;;N;;;;;
130C1;EGYPTIAN HIEROGLYPH D059;Lo;0;L;;;;;N;;;;;
130C2;EGYPTIAN HIEROGLYPH D060;Lo;0;L;;;;;N;;;;;
130C3;EGYPTIAN HIEROGLYPH D061;Lo;0;L;;;;;N;;;;;
130C4;EGYPTIAN HIEROGLYPH D062;Lo;0;L;;;;;N;;;;;
130C5;EGYPTIAN HIEROGLYPH D063;Lo;0;L;;;;;N;;;;;
130C6;EGYPTIAN HIEROGLYPH D064;Lo;0;L;;;;;N;;;;;
130C7;EGYPTIAN HIEROGLYPH D065;Lo;0;L;;;;;N;;;;;
130C8;EGYPTIAN HIEROGLYPH D066;Lo;0;L;;;;;N;;;;;
130C9;EGYPTIAN HIEROGLYPH D067;Lo;0;L;;;;;N;;;;;
130CA;EGYPTIAN HIEROGLYPH D067A;Lo;0;L;;;;;N;;;;;
130CB;EGYPTIAN HIEROGLYPH D067B;Lo;0;L;;;;;N;;;;;
130CC;EGYPTIAN HIEROGLYPH D067C;Lo;0;L;;;;;N;;;;;
130CD;EGYPTIAN HIEROGLYPH D067D;Lo;0;L;;;;;N;;;;;
130CE;EGYPTIAN HIEROGLYPH D067E;Lo;0;L;;;;;N;;;;;
130CF;EGYPTIAN HIEROGLYPH D067F;Lo;0;L;;;;;N;;;;;
130D0;EGYPTIAN HIEROGLYPH D067G;Lo;0;L;;;;;N;;;;;
130D1;EGYPTIAN HIEROGLYPH D067H;Lo;0;L;;;;;N;;;;;
130D2;EGYPTIAN HIEROGLYPH E001;Lo;0;L;;;;;N;;;;;
130D3;EGYPTIAN HIEROGLYPH E002;Lo;0;L;;;;;N;;;;;
130D4;EGYPTIAN HIEROGLYPH E003;Lo;0;L;;;;;N;;;;;
130D5;EGYPTIAN HIEROGLYPH E004;Lo;0;L;;;;;N;;;;;
130D6;EGYPTIAN HIEROGLYPH E005;Lo;0;L;;;;;N;;;;;
130D7;EGYPTIAN HIEROGLYPH E006;Lo;0;L;;;;;N;;;;;
130D8;EGYPTIAN HIEROGLYPH E007;Lo;0;L;;;;;N;;;;;
130D9;EGYPTIAN HIEROGLYPH E008;Lo;0;L;;;;;N;;;;;
130DA;EGYPTIAN HIEROGLYPH E008A;Lo;0;L;;;;;N;;;;;
130DB;EGYPTIAN HIEROGLYPH E009;Lo;0;L;;;;;N;;;;;
130DC;EGYPTIAN HIEROGLYPH E009A;Lo;0;L;;;;;N;;;;;
130DD;EGYPTIAN HIEROGLYPH E010;Lo;0;L;;;;;N;;;;;
130DE;EGYPTIAN HIEROGLYPH E011;Lo;0;L;;;;;N;;;;;
130DF;EGYPTIAN HIEROGLYPH E012;Lo;0;L;;;;;N;;;;;
130E0;EGYPTIAN HIEROGLYPH E013;Lo;0;L;;;;;N;;;;;
130E1;EGYPTIAN HIEROGLYPH E014;Lo;0;L;;;;;N;;;;;
130E2;EGYPTIAN HIEROGLYPH E015;Lo;0;L;;;;;N;;;;;
130E3;EGYPTIAN HIEROGLYPH E016;Lo;0;L;;;;;N;;;;;
130E4;EGYPTIAN HIEROGLYPH E016A;Lo;0;L;;;;;N;;;;;
130E5;EGYPTIAN HIEROGLYPH E017;Lo;0;L;;;;;N;;;;;
130E6;EGYPTIAN HIEROGLYPH E017A;Lo;0;L;;;;;N;;;;;
130E7;EGYPTIAN HIEROGLYPH E018;Lo;0;L;;;;;N;;;;;
130E8;EGYPTIAN HIEROGLYPH E019;Lo;0;L;;;;;N;;;;;
130E9;EGYPTIAN HIEROGLYPH E020;Lo;0;L;;;;;N;;;;;
130EA;EGYPTIAN HIEROGLYPH E020A;Lo;0;L;;;;;N;;;;;
130EB;EGYPTIAN HIEROGLYPH E021;Lo;0;L;;;;;N;;;;;
130EC;EGYPTIAN HIEROGLYPH E022;Lo;0;L;;;;;N;;;;;
130ED;EGYPTIAN HIEROGLYPH E023;Lo;0;L;;;;;N;;;;;
130EE;EGYPTIAN HIEROGLYPH E024;Lo;0;L;;;;;N;;;;;
130EF;EGYPTIAN HIEROGLYPH E025;Lo;0;L;;;;;N;;;;;
130F0;EGYPTIAN HIEROGLYPH E026;Lo;0;L;;;;;N;;;;;
130F1;EGYPTIAN HIEROGLYPH E027;Lo;0;L;;;;;N;;;;;
130F2;EGYPTIAN HIEROGLYPH E028;Lo;0;L;;;;;N;;;;;
130F3;EGYPTIAN HIEROGLYPH E028A;Lo;0;L;;;;;N;;;;;
130F4;EGYPTIAN HIEROGLYPH E029;Lo;0;L;;;;;N;;;;;
130F5;EGYPTIAN HIEROGLYPH E030;Lo;0;L;;;;;N;;;;;
130F6;EGYPTIAN HIEROGLYPH E031;Lo;0;L;;;;;N;;;;;
130F7;EGYPTIAN HIEROGLYPH E032;Lo;0;L;;;;;N;;;;;
130F8;EGYPTIAN HIEROGLYPH E033;Lo;0;L;;;;;N;;;;;
130F9;EGYPTIAN HIEROGLYPH E034;Lo;0;L;;;;;N;;;;;
130FA;EGYPTIAN HIEROGLYPH E034A;Lo;0;L;;;;;N;;;;;
130FB;EGYPTIAN HIEROGLYPH E036;Lo;0;L;;;;;N;;;;;
130FC;EGYPTIAN HIEROGLYPH E037;Lo;0;L;;;;;N;;;;;
130FD;EGYPTIAN HIEROGLYPH E038;Lo;0;L;;;;;N;;;;;
130FE;EGYPTIAN HIEROGLYPH F001;Lo;0;L;;;;;N;;;;;
130FF;EGYPTIAN HIEROGLYPH F001A;Lo;0;L;;;;;N;;;;;
13100;EGYPTIAN HIEROGLYPH F002;Lo;0;L;;;;;N;;;;;
13101;EGYPTIAN HIEROGLYPH F003;Lo;0;L;;;;;N;;;;;
13102;EGYPTIAN HIEROGLYPH F004;Lo;0;L;;;;;N;;;;;
13103;EGYPTIAN HIEROGLYPH F005;Lo;0;L;;;;;N;;;;;
13104;EGYPTIAN HIEROGLYPH F006;Lo;0;L;;;;;N;;;;;
13105;EGYPTIAN HIEROGLYPH F007;Lo;0;L;;;;;N;;;;;
13106;EGYPTIAN HIEROGLYPH F008;Lo;0;L;;;;;N;;;;;
13107;EGYPTIAN HIEROGLYPH F009;Lo;0;L;;;;;N;;;;;
13108;EGYPTIAN HIEROGLYPH F010;Lo;0;L;;;;;N;;;;;
13109;EGYPTIAN HIEROGLYPH F011;Lo;0;L;;;;;N;;;;;
1310A;EGYPTIAN HIEROGLYPH F012;Lo;0;L;;;;;N;;;;;
1310B;EGYPTIAN HIEROGLYPH F013;Lo;0;L;;;;;N;;;;;
1310C;EGYPTIAN HIEROGLYPH F013A;Lo;0;L;;;;;N;;;;;
1310D;EGYPTIAN HIEROGLYPH F014;Lo;0;L;;;;;N;;;;;
1310E;EGYPTIAN HIEROGLYPH F015;Lo;0;L;;;;;N;;;;;
1310F;EGYPTIAN HIEROGLYPH F016;Lo;0;L;;;;;N;;;;;
13110;EGYPTIAN HIEROGLYPH F017;Lo;0;L;;;;;N;;;;;
13111;EGYPTIAN HIEROGLYPH F018;Lo;0;L;;;;;N;;;;;
13112;EGYPTIAN HIEROGLYPH F019;Lo;0;L;;;;;N;;;;;
13113;EGYPTIAN HIEROGLYPH F020;Lo;0;L;;;;;N;;;;;
13114;EGYPTIAN HIEROGLYPH F021;Lo;0;L;;;;;N;;;;;
13115;EGYPTIAN HIEROGLYPH F021A;Lo;0;L;;;;;N;;;;;
13116;EGYPTIAN HIEROGLYPH F022;Lo;0;L;;;;;N;;;;;
13117;EGYPTIAN HIEROGLYPH F023;Lo;0;L;;;;;N;;;;;
13118;EGYPTIAN HIEROGLYPH F024;Lo;0;L;;;;;N;;;;;
13119;EGYPTIAN HIEROGLYPH F025;Lo;0;L;;;;;N;;;;;
1311A;EGYPTIAN HIEROGLYPH F026;Lo;0;L;;;;;N;;;;;
1311B;EGYPTIAN HIEROGLYPH F027;Lo;0;L;;;;;N;;;;;
1311C;EGYPTIAN HIEROGLYPH F028;Lo;0;L;;;;;N;;;;;
1311D;EGYPTIAN HIEROGLYPH F029;Lo;0;L;;;;;N;;;;;
1311E;EGYPTIAN HIEROGLYPH F030;Lo;0;L;;;;;N;;;;;
1311F;EGYPTIAN HIEROGLYPH F031;Lo;0;L;;;;;N;;;;;
13120;EGYPTIAN HIEROGLYPH F031A;Lo;0;L;;;;;N;;;;;
13121;EGYPTIAN HIEROGLYPH F032;Lo;0;L;;;;;N;;;;;
13122;EGYPTIAN HIEROGLYPH F033;Lo;0;L;;;;;N;;;;;
13123;EGYPTIAN HIEROGLYPH F034;Lo;0;L;;;;;N;;;;;
13124;EGYPTIAN HIEROGLYPH F035;Lo;0;L;;;;;N;;;;;
13125;EGYPTIAN HIEROGLYPH F036;Lo;0;L;;;;;N;;;;;
13126;EGYPTIAN HIEROGLYPH F037;Lo;0;L;;;;;N;;;;;
13127;EGYPTIAN HIEROGLYPH F037A;Lo;0;L;;;;;N;;;;;
13128;EGYPTIAN HIEROGLYPH F038;Lo;0;L;;;;;N;;;;;
13129;EGYPTIAN HIEROGLYPH F038A;Lo;0;L;;;;;N;;;;;
1312A;EGYPTIAN HIEROGLYPH F039;Lo;0;L;;;;;N;;;;;
1312B;EGYPTIAN HIEROGLYPH F040;Lo;0;L;;;;;N;;;;;
1312C;EGYPTIAN HIEROGLYPH F041;Lo;0;L;;;;;N;;;;;
1312D;EGYPTIAN HIEROGLYPH F042;Lo;0;L;;;;;N;;;;;
1312E;EGYPTIAN HIEROGLYPH F043;Lo;0;L;;;;;N;;;;;
1312F;EGYPTIAN HIEROGLYPH F044;Lo;0;L;;;;;N;;;;;
13130;EGYPTIAN HIEROGLYPH F045;Lo;0;L;;;;;N;;;;;
13131;EGYPTIAN HIEROGLYPH F045A;Lo;0;L;;;;;N;;;;;
13132;EGYPTIAN HIEROGLYPH F046;Lo;0;L;;;;;N;;;;;
13133;EGYPTIAN HIEROGLYPH F046A;Lo;0;L;;;;;N;;;;;
13134;EGYPTIAN HIEROGLYPH F047;Lo;0;L;;;;;N;;;;;
13135;EGYPTIAN HIEROGLYPH F047A;Lo;0;L;;;;;N;;;;;
13136;EGYPTIAN HIEROGLYPH F048;Lo;0;L;;;;;N;;;;;
13137;EGYPTIAN HIEROGLYPH F049;Lo;0;L;;;;;N;;;;;
13138;EGYPTIAN HIEROGLYPH F050;Lo;0;L;;;;;N;;;;;
13139;EGYPTIAN HIEROGLYPH F051;Lo;0;L;;;;;N;;;;;
1313A;EGYPTIAN HIEROGLYPH F051A;Lo;0;L;;;;;N;;;;;
1313B;EGYPTIAN HIEROGLYPH F051B;Lo;0;L;;;;;N;;;;;
1313C;EGYPTIAN HIEROGLYPH F051C;Lo;0;L;;;;;N;;;;;
1313D;EGYPTIAN HIEROGLYPH F052;Lo;0;L;;;;;N;;;;;
1313E;EGYPTIAN HIEROGLYPH F053;Lo;0;L;;;;;N;;;;;
1313F;EGYPTIAN HIEROGLYPH G001;Lo;0;L;;;;;N;;;;;
13140;EGYPTIAN HIEROGLYPH G002;Lo;0;L;;;;;N;;;;;
13141;EGYPTIAN HIEROGLYPH G003;Lo;0;L;;;;;N;;;;;
13142;EGYPTIAN HIEROGLYPH G004;Lo;0;L;;;;;N;;;;;
13143;EGYPTIAN HIEROGLYPH G005;Lo;0;L;;;;;N;;;;;
13144;EGYPTIAN HIEROGLYPH G006;Lo;0;L;;;;;N;;;;;
13145;EGYPTIAN HIEROGLYPH G006A;Lo;0;L;;;;;N;;;;;
13146;EGYPTIAN HIEROGLYPH G007;Lo;0;L;;;;;N;;;;;
13147;EGYPTIAN HIEROGLYPH G007A;Lo;0;L;;;;;N;;;;;
13148;EGYPTIAN HIEROGLYPH G007B;Lo;0;L;;;;;N;;;;;
13149;EGYPTIAN HIEROGLYPH G008;Lo;0;L;;;;;N;;;;;
1314A;EGYPTIAN HIEROGLYPH G009;Lo;0;L;;;;;N;;;;;
1314B;EGYPTIAN HIEROGLYPH G010;Lo;0;L;;;;;N;;;;;
1314C;EGYPTIAN HIEROGLYPH G011;Lo;0;L;;;;;N;;;;;
1314D;EGYPTIAN HIEROGLYPH G011A;Lo;0;L;;;;;N;;;;;
1314E;EGYPTIAN HIEROGLYPH G012;Lo;0;L;;;;;N;;;;;
1314F;EGYPTIAN HIEROGLYPH G013;Lo;0;L;;;;;N;;;;;
13150;EGYPTIAN HIEROGLYPH G014;Lo;0;L;;;;;N;;;;;
13151;EGYPTIAN HIEROGLYPH G015;Lo;0;L;;;;;N;;;;;
13152;EGYPTIAN HIEROGLYPH G016;Lo;0;L;;;;;N;;;;;
13153;EGYPTIAN HIEROGLYPH G017;Lo;0;L;;;;;N;;;;;

----------------------------------------

TITLE: Using the --null Command in libsql
DESCRIPTION: The --null command changes the text representation of SQL NULL values in the result buffer. This allows customizing how NULL values appear in query results.

LANGUAGE: shell
CODE:
--null

----------------------------------------

TITLE: Defining Unicode Mathematical Alphanumeric Symbols
DESCRIPTION: A comprehensive mapping of Unicode code points for mathematical alphanumeric symbols. Each line defines a character with its Unicode code point, descriptive name, general category (Lu for uppercase, Ll for lowercase), and formatting properties.

LANGUAGE: text
CODE:
1D40C;MATHEMATICAL BOLD CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D40D;MATHEMATICAL BOLD CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D40E;MATHEMATICAL BOLD CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D40F;MATHEMATICAL BOLD CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D410;MATHEMATICAL BOLD CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D411;MATHEMATICAL BOLD CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D412;MATHEMATICAL BOLD CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D413;MATHEMATICAL BOLD CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D414;MATHEMATICAL BOLD CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D415;MATHEMATICAL BOLD CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D416;MATHEMATICAL BOLD CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D417;MATHEMATICAL BOLD CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D418;MATHEMATICAL BOLD CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D419;MATHEMATICAL BOLD CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D41A;MATHEMATICAL BOLD SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D41B;MATHEMATICAL BOLD SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D41C;MATHEMATICAL BOLD SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D41D;MATHEMATICAL BOLD SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D41E;MATHEMATICAL BOLD SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D41F;MATHEMATICAL BOLD SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D420;MATHEMATICAL BOLD SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D421;MATHEMATICAL BOLD SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D422;MATHEMATICAL BOLD SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D423;MATHEMATICAL BOLD SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D424;MATHEMATICAL BOLD SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D425;MATHEMATICAL BOLD SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D426;MATHEMATICAL BOLD SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D427;MATHEMATICAL BOLD SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D428;MATHEMATICAL BOLD SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D429;MATHEMATICAL BOLD SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D42A;MATHEMATICAL BOLD SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D42B;MATHEMATICAL BOLD SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D42C;MATHEMATICAL BOLD SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D42D;MATHEMATICAL BOLD SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D42E;MATHEMATICAL BOLD SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D42F;MATHEMATICAL BOLD SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D430;MATHEMATICAL BOLD SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D431;MATHEMATICAL BOLD SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D432;MATHEMATICAL BOLD SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D433;MATHEMATICAL BOLD SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D434;MATHEMATICAL ITALIC CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D435;MATHEMATICAL ITALIC CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D436;MATHEMATICAL ITALIC CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D437;MATHEMATICAL ITALIC CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D438;MATHEMATICAL ITALIC CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D439;MATHEMATICAL ITALIC CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D43A;MATHEMATICAL ITALIC CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D43B;MATHEMATICAL ITALIC CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D43C;MATHEMATICAL ITALIC CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D43D;MATHEMATICAL ITALIC CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D43E;MATHEMATICAL ITALIC CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D43F;MATHEMATICAL ITALIC CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D440;MATHEMATICAL ITALIC CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D441;MATHEMATICAL ITALIC CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D442;MATHEMATICAL ITALIC CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D443;MATHEMATICAL ITALIC CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D444;MATHEMATICAL ITALIC CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D445;MATHEMATICAL ITALIC CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D446;MATHEMATICAL ITALIC CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D447;MATHEMATICAL ITALIC CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D448;MATHEMATICAL ITALIC CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D449;MATHEMATICAL ITALIC CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D44A;MATHEMATICAL ITALIC CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D44B;MATHEMATICAL ITALIC CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D44C;MATHEMATICAL ITALIC CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D44D;MATHEMATICAL ITALIC CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D44E;MATHEMATICAL ITALIC SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D44F;MATHEMATICAL ITALIC SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D450;MATHEMATICAL ITALIC SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D451;MATHEMATICAL ITALIC SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D452;MATHEMATICAL ITALIC SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D453;MATHEMATICAL ITALIC SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D454;MATHEMATICAL ITALIC SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D456;MATHEMATICAL ITALIC SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D457;MATHEMATICAL ITALIC SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D458;MATHEMATICAL ITALIC SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D459;MATHEMATICAL ITALIC SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D45A;MATHEMATICAL ITALIC SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D45B;MATHEMATICAL ITALIC SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D45C;MATHEMATICAL ITALIC SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D45D;MATHEMATICAL ITALIC SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D45E;MATHEMATICAL ITALIC SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D45F;MATHEMATICAL ITALIC SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D460;MATHEMATICAL ITALIC SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D461;MATHEMATICAL ITALIC SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D462;MATHEMATICAL ITALIC SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D463;MATHEMATICAL ITALIC SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D464;MATHEMATICAL ITALIC SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D465;MATHEMATICAL ITALIC SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D466;MATHEMATICAL ITALIC SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D467;MATHEMATICAL ITALIC SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D468;MATHEMATICAL BOLD ITALIC CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D469;MATHEMATICAL BOLD ITALIC CAPITAL B;Lu;0;L;<font> 0042;;;;N;;;;;
1D46A;MATHEMATICAL BOLD ITALIC CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D46B;MATHEMATICAL BOLD ITALIC CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D46C;MATHEMATICAL BOLD ITALIC CAPITAL E;Lu;0;L;<font> 0045;;;;N;;;;;
1D46D;MATHEMATICAL BOLD ITALIC CAPITAL F;Lu;0;L;<font> 0046;;;;N;;;;;
1D46E;MATHEMATICAL BOLD ITALIC CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D46F;MATHEMATICAL BOLD ITALIC CAPITAL H;Lu;0;L;<font> 0048;;;;N;;;;;
1D470;MATHEMATICAL BOLD ITALIC CAPITAL I;Lu;0;L;<font> 0049;;;;N;;;;;
1D471;MATHEMATICAL BOLD ITALIC CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D472;MATHEMATICAL BOLD ITALIC CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D473;MATHEMATICAL BOLD ITALIC CAPITAL L;Lu;0;L;<font> 004C;;;;N;;;;;
1D474;MATHEMATICAL BOLD ITALIC CAPITAL M;Lu;0;L;<font> 004D;;;;N;;;;;
1D475;MATHEMATICAL BOLD ITALIC CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D476;MATHEMATICAL BOLD ITALIC CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D477;MATHEMATICAL BOLD ITALIC CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D478;MATHEMATICAL BOLD ITALIC CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;
1D479;MATHEMATICAL BOLD ITALIC CAPITAL R;Lu;0;L;<font> 0052;;;;N;;;;;
1D47A;MATHEMATICAL BOLD ITALIC CAPITAL S;Lu;0;L;<font> 0053;;;;N;;;;;
1D47B;MATHEMATICAL BOLD ITALIC CAPITAL T;Lu;0;L;<font> 0054;;;;N;;;;;
1D47C;MATHEMATICAL BOLD ITALIC CAPITAL U;Lu;0;L;<font> 0055;;;;N;;;;;
1D47D;MATHEMATICAL BOLD ITALIC CAPITAL V;Lu;0;L;<font> 0056;;;;N;;;;;
1D47E;MATHEMATICAL BOLD ITALIC CAPITAL W;Lu;0;L;<font> 0057;;;;N;;;;;
1D47F;MATHEMATICAL BOLD ITALIC CAPITAL X;Lu;0;L;<font> 0058;;;;N;;;;;
1D480;MATHEMATICAL BOLD ITALIC CAPITAL Y;Lu;0;L;<font> 0059;;;;N;;;;;
1D481;MATHEMATICAL BOLD ITALIC CAPITAL Z;Lu;0;L;<font> 005A;;;;N;;;;;
1D482;MATHEMATICAL BOLD ITALIC SMALL A;Ll;0;L;<font> 0061;;;;N;;;;;
1D483;MATHEMATICAL BOLD ITALIC SMALL B;Ll;0;L;<font> 0062;;;;N;;;;;
1D484;MATHEMATICAL BOLD ITALIC SMALL C;Ll;0;L;<font> 0063;;;;N;;;;;
1D485;MATHEMATICAL BOLD ITALIC SMALL D;Ll;0;L;<font> 0064;;;;N;;;;;
1D486;MATHEMATICAL BOLD ITALIC SMALL E;Ll;0;L;<font> 0065;;;;N;;;;;
1D487;MATHEMATICAL BOLD ITALIC SMALL F;Ll;0;L;<font> 0066;;;;N;;;;;
1D488;MATHEMATICAL BOLD ITALIC SMALL G;Ll;0;L;<font> 0067;;;;N;;;;;
1D489;MATHEMATICAL BOLD ITALIC SMALL H;Ll;0;L;<font> 0068;;;;N;;;;;
1D48A;MATHEMATICAL BOLD ITALIC SMALL I;Ll;0;L;<font> 0069;;;;N;;;;;
1D48B;MATHEMATICAL BOLD ITALIC SMALL J;Ll;0;L;<font> 006A;;;;N;;;;;
1D48C;MATHEMATICAL BOLD ITALIC SMALL K;Ll;0;L;<font> 006B;;;;N;;;;;
1D48D;MATHEMATICAL BOLD ITALIC SMALL L;Ll;0;L;<font> 006C;;;;N;;;;;
1D48E;MATHEMATICAL BOLD ITALIC SMALL M;Ll;0;L;<font> 006D;;;;N;;;;;
1D48F;MATHEMATICAL BOLD ITALIC SMALL N;Ll;0;L;<font> 006E;;;;N;;;;;
1D490;MATHEMATICAL BOLD ITALIC SMALL O;Ll;0;L;<font> 006F;;;;N;;;;;
1D491;MATHEMATICAL BOLD ITALIC SMALL P;Ll;0;L;<font> 0070;;;;N;;;;;
1D492;MATHEMATICAL BOLD ITALIC SMALL Q;Ll;0;L;<font> 0071;;;;N;;;;;
1D493;MATHEMATICAL BOLD ITALIC SMALL R;Ll;0;L;<font> 0072;;;;N;;;;;
1D494;MATHEMATICAL BOLD ITALIC SMALL S;Ll;0;L;<font> 0073;;;;N;;;;;
1D495;MATHEMATICAL BOLD ITALIC SMALL T;Ll;0;L;<font> 0074;;;;N;;;;;
1D496;MATHEMATICAL BOLD ITALIC SMALL U;Ll;0;L;<font> 0075;;;;N;;;;;
1D497;MATHEMATICAL BOLD ITALIC SMALL V;Ll;0;L;<font> 0076;;;;N;;;;;
1D498;MATHEMATICAL BOLD ITALIC SMALL W;Ll;0;L;<font> 0077;;;;N;;;;;
1D499;MATHEMATICAL BOLD ITALIC SMALL X;Ll;0;L;<font> 0078;;;;N;;;;;
1D49A;MATHEMATICAL BOLD ITALIC SMALL Y;Ll;0;L;<font> 0079;;;;N;;;;;
1D49B;MATHEMATICAL BOLD ITALIC SMALL Z;Ll;0;L;<font> 007A;;;;N;;;;;
1D49C;MATHEMATICAL SCRIPT CAPITAL A;Lu;0;L;<font> 0041;;;;N;;;;;
1D49E;MATHEMATICAL SCRIPT CAPITAL C;Lu;0;L;<font> 0043;;;;N;;;;;
1D49F;MATHEMATICAL SCRIPT CAPITAL D;Lu;0;L;<font> 0044;;;;N;;;;;
1D4A2;MATHEMATICAL SCRIPT CAPITAL G;Lu;0;L;<font> 0047;;;;N;;;;;
1D4A5;MATHEMATICAL SCRIPT CAPITAL J;Lu;0;L;<font> 004A;;;;N;;;;;
1D4A6;MATHEMATICAL SCRIPT CAPITAL K;Lu;0;L;<font> 004B;;;;N;;;;;
1D4A9;MATHEMATICAL SCRIPT CAPITAL N;Lu;0;L;<font> 004E;;;;N;;;;;
1D4AA;MATHEMATICAL SCRIPT CAPITAL O;Lu;0;L;<font> 004F;;;;N;;;;;
1D4AB;MATHEMATICAL SCRIPT CAPITAL P;Lu;0;L;<font> 0050;;;;N;;;;;
1D4AC;MATHEMATICAL SCRIPT CAPITAL Q;Lu;0;L;<font> 0051;;;;N;;;;;

----------------------------------------

TITLE: Building sqlite3_checker in libsql
DESCRIPTION: Command to build the sqlite3_checker tool which is needed to run SQLite tests. This must be executed before running any tests.

LANGUAGE: shell
CODE:
make sqlite3_checker

----------------------------------------

TITLE: Format of Unicode Case Folding Entries
DESCRIPTION: Specifies the machine-readable format used for case folding entries in the file. Each entry contains a code point, status indicator (C, F, S, or T), mapping information, and a name comment.

LANGUAGE: txt
CODE:
<code>; <status>; <mapping>; # <name>

----------------------------------------

TITLE: Creating and Populating Basis Table with Shape Definitions in SQL
DESCRIPTION: Creates a temporary table 'basis' containing shape definitions as JSON polylines with shape name and coordinates. The shapes include geometric patterns like boxes, houses, lines, arrows, triangles, angles, and stars.

LANGUAGE: sql
CODE:
CREATE TEMP TABLE basis(name TEXT, jshape TEXT);
INSERT INTO basis(name,jshape) VALUES
  ('box-20','[[0,0],[20,0],[20,20],[0,20],[0,0]]'),
  ('house-70','[[0,0],[50,0],[50,50],[25,70],[0,50],[0,0]]'),
  ('line-40','[[0,0],[40,0],[40,5],[0,5],[0,0]]'),
  ('line-80','[[0,0],[80,0],[80,7],[0,7],[0,0]]'),
  ('arrow-50','[[0,0],[25,25],[0,50],[15,25],[0,0]]'),
  ('triangle-30','[[0,0],[30,0],[15,30],[0,0]]'),
  ('angle-30','[[0,0],[30,0],[30,30],[26,30],[26,4],[0,4],[0,0]]'),
  ('star-10','[[1,0],[5,2],[9,0],[7,4],[10,8],[7,7],[5,10],[3,7],[0,8],[3,4],[1,0]]');

----------------------------------------

TITLE: Implementing SQLite Tokenizer Benchmarks in Rust
DESCRIPTION: Benchmark script that measures the performance of tokenizing SQL queries. The code uses criterion for benchmarking and includes configuration for test setup and execution.

LANGUAGE: rust
CODE:
use criterion::{criterion_group, criterion_main, Criterion};
use sqlparser::dialect::SQLiteDialect;
use sqlparser::tokenizer::Tokenizer;

fn tokenize(sql: &str) -> Result<(), sqlparser::tokenizer::TokenizerError> {
    let dialect = SQLiteDialect {};
    let mut tokenizer = Tokenizer::new(&dialect, sql);
    let tokens = tokenizer.tokenize()?;
    criterion::black_box(tokens);
    Ok(())
}

fn criterion_benchmark(c: &mut Criterion) {
    let sql = std::fs::read_to_string("test.sql").expect("Could not read test.sql");
    c.bench_function("tokenize", |b| {
        b.iter(|| {
            tokenize(&sql).unwrap();
        })
    });
}

criterion_group!(benches, criterion_benchmark);
criterion_main!(benches);

----------------------------------------

TITLE: Creating and Populating Coordinate Offsets Table in SQL
DESCRIPTION: Creates a temporary table 'xyoff' with x and y coordinates for positioning shapes on the canvas. The table has a compound primary key and is created WITHOUT ROWID for efficiency. Hundreds of coordinate pairs are inserted for various shape placements.

LANGUAGE: sql
CODE:
CREATE TEMP TABLE xyoff(id1,id2,xoff,yoff,PRIMARY KEY(id1,id2,xoff,yoff))
  WITHOUT ROWID;
INSERT INTO xyoff VALUES(1,1,811,659);
INSERT INTO xyoff VALUES(1,1,235,550);
INSERT INTO xyoff VALUES(1,1,481,620);
INSERT INTO xyoff VALUES(1,1,106,494);
INSERT INTO xyoff VALUES(1,1,487,106);
INSERT INTO xyoff VALUES(1,1,817,595);
INSERT INTO xyoff VALUES(1,1,240,504);
INSERT INTO xyoff VALUES(1,1,806,457);
INSERT INTO xyoff VALUES(1,1,608,107);
INSERT INTO xyoff VALUES(1,1,768,662);
INSERT INTO xyoff VALUES(1,2,808,528);
INSERT INTO xyoff VALUES(1,2,768,528);
INSERT INTO xyoff VALUES(1,2,771,171);
INSERT INTO xyoff VALUES(1,2,275,671);
INSERT INTO xyoff VALUES(1,2,326,336);
INSERT INTO xyoff VALUES(1,2,690,688);
INSERT INTO xyoff VALUES(1,2,597,239);
INSERT INTO xyoff VALUES(1,2,317,528);
INSERT INTO xyoff VALUES(1,2,366,223);
INSERT INTO xyoff VALUES(1,2,621,154);
INSERT INTO xyoff VALUES(1,3,829,469);
INSERT INTO xyoff VALUES(1,3,794,322);
INSERT INTO xyoff VALUES(1,3,358,387);
INSERT INTO xyoff VALUES(1,3,184,444);
INSERT INTO xyoff VALUES(1,3,729,500);
INSERT INTO xyoff VALUES(1,3,333,523);
INSERT INTO xyoff VALUES(1,3,117,595);
INSERT INTO xyoff VALUES(1,3,496,201);
INSERT INTO xyoff VALUES(1,3,818,601);
INSERT INTO xyoff VALUES(1,3,541,343);
INSERT INTO xyoff VALUES(1,4,603,248);
INSERT INTO xyoff VALUES(1,4,761,649);
INSERT INTO xyoff VALUES(1,4,611,181);
INSERT INTO xyoff VALUES(1,4,607,233);
INSERT INTO xyoff VALUES(1,4,860,206);
INSERT INTO xyoff VALUES(1,4,310,231);
INSERT INTO xyoff VALUES(1,4,727,539);
INSERT INTO xyoff VALUES(1,4,660,661);
INSERT INTO xyoff VALUES(1,4,403,133);
INSERT INTO xyoff VALUES(1,4,619,331);
INSERT INTO xyoff VALUES(2,1,712,578);
INSERT INTO xyoff VALUES(2,1,567,313);
INSERT INTO xyoff VALUES(2,1,231,423);
INSERT INTO xyoff VALUES(2,1,490,175);
INSERT INTO xyoff VALUES(2,1,898,353);
INSERT INTO xyoff VALUES(2,1,589,483);
INSERT INTO xyoff VALUES(2,1,188,462);
INSERT INTO xyoff VALUES(2,1,720,106);
INSERT INTO xyoff VALUES(2,1,793,380);
INSERT INTO xyoff VALUES(2,1,154,396);
INSERT INTO xyoff VALUES(2,2,324,218);
INSERT INTO xyoff VALUES(2,2,120,327);
INSERT INTO xyoff VALUES(2,2,655,133);
INSERT INTO xyoff VALUES(2,2,516,603);
INSERT INTO xyoff VALUES(2,2,529,572);
INSERT INTO xyoff VALUES(2,2,481,212);
INSERT INTO xyoff VALUES(2,2,802,107);
INSERT INTO xyoff VALUES(2,2,234,509);
INSERT INTO xyoff VALUES(2,2,501,269);
INSERT INTO xyoff VALUES(2,2,349,553);
INSERT INTO xyoff VALUES(2,3,495,685);
INSERT INTO xyoff VALUES(2,3,897,372);
INSERT INTO xyoff VALUES(2,3,350,681);
INSERT INTO xyoff VALUES(2,3,832,257);
INSERT INTO xyoff VALUES(2,3,778,149);
INSERT INTO xyoff VALUES(2,3,683,426);
INSERT INTO xyoff VALUES(2,3,693,217);
INSERT INTO xyoff VALUES(2,3,746,317);
INSERT INTO xyoff VALUES(2,3,805,369);
INSERT INTO xyoff VALUES(2,3,336,585);
INSERT INTO xyoff VALUES(2,4,890,255);
INSERT INTO xyoff VALUES(2,4,556,565);
INSERT INTO xyoff VALUES(2,4,865,555);
INSERT INTO xyoff VALUES(2,4,230,293);
INSERT INTO xyoff VALUES(2,4,247,251);
INSERT INTO xyoff VALUES(2,4,730,563);
INSERT INTO xyoff VALUES(2,4,318,282);
INSERT INTO xyoff VALUES(2,4,220,431);
INSERT INTO xyoff VALUES(2,4,828,336);
INSERT INTO xyoff VALUES(2,4,278,525);
INSERT INTO xyoff VALUES(3,1,324,656);
INSERT INTO xyoff VALUES(3,1,625,362);
INSERT INTO xyoff VALUES(3,1,155,570);
INSERT INTO xyoff VALUES(3,1,267,433);
INSERT INTO xyoff VALUES(3,1,599,121);
INSERT INTO xyoff VALUES(3,1,873,498);
INSERT INTO xyoff VALUES(3,1,789,520);
INSERT INTO xyoff VALUES(3,1,656,378);
INSERT INTO xyoff VALUES(3,1,831,601);
INSERT INTO xyoff VALUES(3,1,256,471);
INSERT INTO xyoff VALUES(3,2,332,258);
INSERT INTO xyoff VALUES(3,2,305,463);
INSERT INTO xyoff VALUES(3,2,796,341);
INSERT INTO xyoff VALUES(3,2,830,229);
INSERT INTO xyoff VALUES(3,2,413,271);
INSERT INTO xyoff VALUES(3,2,269,140);
INSERT INTO xyoff VALUES(3,2,628,441);
INSERT INTO xyoff VALUES(3,2,747,643);
INSERT INTO xyoff VALUES(3,2,584,435);
INSERT INTO xyoff VALUES(3,2,784,314);
INSERT INTO xyoff VALUES(3,3,722,233);
INSERT INTO xyoff VALUES(3,3,815,421);
INSERT INTO xyoff VALUES(3,3,401,267);
INSERT INTO xyoff VALUES(3,3,451,650);
INSERT INTO xyoff VALUES(3,3,329,485);
INSERT INTO xyoff VALUES(3,3,878,370);
INSERT INTO xyoff VALUES(3,3,162,616);
INSERT INTO xyoff VALUES(3,3,844,183);
INSERT INTO xyoff VALUES(3,3,161,216);
INSERT INTO xyoff VALUES(3,3,176,676);
INSERT INTO xyoff VALUES(3,4,780,128);
INSERT INTO xyoff VALUES(3,4,566,121);
INSERT INTO xyoff VALUES(3,4,646,120);
INSERT INTO xyoff VALUES(3,4,223,557);
INSERT INTO xyoff VALUES(3,4,251,117);
INSERT INTO xyoff VALUES(3,4,139,209);
INSERT INTO xyoff VALUES(3,4,813,597);
INSERT INTO xyoff VALUES(3,4,454,538);
INSERT INTO xyoff VALUES(3,4,616,198);
INSERT INTO xyoff VALUES(3,4,210,159);
INSERT INTO xyoff VALUES(4,1,208,415);
INSERT INTO xyoff VALUES(4,1,326,665);
INSERT INTO xyoff VALUES(4,1,612,133);
INSERT INTO xyoff VALUES(4,1,537,513);
INSERT INTO xyoff VALUES(4,1,638,438);
INSERT INTO xyoff VALUES(4,1,808,269);
INSERT INTO xyoff VALUES(4,1,552,121);
INSERT INTO xyoff VALUES(4,1,100,189);
INSERT INTO xyoff VALUES(4,1,643,664);
INSERT INTO xyoff VALUES(4,1,726,378);
INSERT INTO xyoff VALUES(4,2,478,409);
INSERT INTO xyoff VALUES(4,2,497,507);
INSERT INTO xyoff VALUES(4,2,233,148);
INSERT INTO xyoff VALUES(4,2,587,237);
INSERT INTO xyoff VALUES(4,2,604,166);
INSERT INTO xyoff VALUES(4,2,165,455);
INSERT INTO xyoff VALUES(4,2,320,258);
INSERT INTO xyoff VALUES(4,2,353,496);
INSERT INTO xyoff VALUES(4,2,347,495);
INSERT INTO xyoff VALUES(4,2,166,622);
INSERT INTO xyoff VALUES(4,3,461,332);
INSERT INTO xyoff VALUES(4,3,685,278);
INSERT INTO xyoff VALUES(4,3,427,594);
INSERT INTO xyoff VALUES(4,3,467,346);
INSERT INTO xyoff VALUES(4,3,125,548);
INSERT INTO xyoff VALUES(4,3,597,680);
INSERT INTO xyoff VALUES(4,3,820,445);
INSERT INTO xyoff VALUES(4,3,144,330);
INSERT INTO xyoff VALUES(4,3,557,434);
INSERT INTO xyoff VALUES(4,3,254,315);
INSERT INTO xyoff VALUES(4,4,157,339);
INSERT INTO xyoff VALUES(4,4,249,220);
INSERT INTO xyoff VALUES(4,4,391,323);
INSERT INTO xyoff VALUES(4,4,589,429);
INSERT INTO xyoff VALUES(4,4,859,592);
INSERT INTO xyoff VALUES(4,4,337,680);
INSERT INTO xyoff VALUES(4,4,410,288);
INSERT INTO xyoff VALUES(4,4,636,596);
INSERT INTO xyoff VALUES(4,4,734,433);
INSERT INTO xyoff VALUES(4,4,559,549);
INSERT INTO xyoff VALUES(5,1,549,607);
INSERT INTO xyoff VALUES(5,1,584,498);
INSERT INTO xyoff VALUES(5,1,699,116);
INSERT INTO xyoff VALUES(5,1,525,524);
INSERT INTO xyoff VALUES(5,1,304,667);
INSERT INTO xyoff VALUES(5,1,302,232);
INSERT INTO xyoff VALUES(5,1,403,149);
INSERT INTO xyoff VALUES(5,1,824,403);
INSERT INTO xyoff VALUES(5,1,697,203);
INSERT INTO xyoff VALUES(5,1,293,689);
INSERT INTO xyoff VALUES(5,2,199,275);
INSERT INTO xyoff VALUES(5,2,395,393);
INSERT INTO xyoff VALUES(5,2,657,642);
INSERT INTO xyoff VALUES(5,2,200,655);
INSERT INTO xyoff VALUES(5,2,882,234);
INSERT INTO xyoff VALUES(5,2,483,565);
INSERT INTO xyoff VALUES(5,2,755,640);
INSERT INTO xyoff VALUES(5,2,810,305);
INSERT INTO xyoff VALUES(5,2,731,655);
INSERT INTO xyoff VALUES(5,2,466,690);
INSERT INTO xyoff VALUES(5,3,563,584);
INSERT INTO xyoff VALUES(5,3,491,117);
INSERT INTO xyoff VALUES(5,3,779,292);
INSERT INTO xyoff VALUES(5,3,375,637);
INSERT INTO xyoff VALUES(5,3,253,553);
INSERT INTO xyoff VALUES(5,3,797,514);
INSERT INTO xyoff VALUES(5,3,229,480);
INSERT INTO xyoff VALUES(5,3,257,194);
INSERT INTO xyoff VALUES(5,3,449,555);
INSERT INTO xyoff VALUES(5,3,849,630);
INSERT INTO xyoff VALUES(5,4,329,286);
INSERT INTO xyoff VALUES(5,4,640,197);
INSERT INTO xyoff VALUES(5,4,104,150);
INSERT INTO xyoff VALUES(5,4,438,272);
INSERT INTO xyoff VALUES(5,4,773,226);
INSERT INTO xyoff VALUES(5,4,441,650);
INSERT INTO xyoff VALUES(5,4,242,340);
INSERT INTO xyoff VALUES(5,4,301,435);
INSERT INTO xyoff VALUES(5,4,171,397);
INSERT INTO xyoff VALUES(5,4,541,619);
INSERT INTO xyoff VALUES(6,1,651,301);
INSERT INTO xyoff VALUES(6,1,637,137);
INSERT INTO xyoff VALUES(6,1,765,643);
INSERT INTO xyoff VALUES(6,1,173,296);
INSERT INTO xyoff VALUES(6,1,263,192);
INSERT INTO xyoff VALUES(6,1,791,302);
INSERT INTO xyoff VALUES(6,1,860,601);
INSERT INTO xyoff VALUES(6,1,780,445);
INSERT INTO xyoff VALUES(6,1,462,214);
INSERT INTO xyoff VALUES(6,1,802,207);
INSERT INTO xyoff VALUES(6,2,811,685);
INSERT INTO xyoff VALUES(6,2,533,531);
INSERT INTO xyoff VALUES(6,2,390,614);
INSERT INTO xyoff VALUES(6,2,260,580);
INSERT INTO xyoff VALUES(6,2,116,377);
INSERT INTO xyoff VALUES(6,2,860,458);
INSERT INTO xyoff VALUES(6,2,438,590);
INSERT INTO xyoff VALUES(6,2,604,562);
INSERT INTO xyoff VALUES(6,2,241,242);
INSERT INTO xyoff VALUES(6,2,667,298);
INSERT INTO xyoff VALUES(6,3,787,698);
INSERT INTO xyoff VALUES(6,3,868,521);
INSERT INTO xyoff VALUES(6,3,412,587);
INSERT INTO xyoff VALUES(6,3,640,131);
INSERT INTO xyoff VALUES(6,3,748,410);
INSERT INTO xyoff VALUES(6,3,257,244);
INSERT INTO xyoff VALUES(6,3,411,195);
INSERT INTO xyoff VALUES(6,3,464,356);
INSERT INTO xyoff VALUES(6,3,157,339);
INSERT INTO xyoff VALUES(6,3,434,505);
INSERT INTO xyoff VALUES(6,4,480,671);
INSERT INTO xyoff VALUES(6,4,519,228);
INSERT INTO xyoff VALUES(6,4,404,513);

----------------------------------------

TITLE: Configuring Rusqlite with Bundled SQLite in Cargo.toml
DESCRIPTION: A Cargo.toml configuration snippet showing how to enable the 'bundled' feature in rusqlite to compile SQLite from source rather than using a system library. This is the simplest solution to build problems.

LANGUAGE: toml
CODE:
[dependencies.rusqlite]
version = "0.29.0"
features = ["bundled"]

----------------------------------------

TITLE: Querying Polygons Contained Within Another Polygon in SQL
DESCRIPTION: Demonstrates the geopoly_within function to find polygons that are completely contained within the query polygon. Includes the EXPLAIN QUERY PLAN and SVG visualization of the results.

LANGUAGE: sql
CODE:
.print '<h1>Within Query</h1>'
.print '<pre>'
.print 'SELECT *'
.print '  FROM geo1, querypoly'
.print ' WHERE geopoly_within(_shape, poly);'
.print 
EXPLAIN QUERY PLAN
SELECT geopoly_svg(_shape,
         printf('style="fill:none;stroke:%s;stroke-width:1"',geo1.clr)
       )
  FROM geo1, querypoly
 WHERE geopoly_within(_shape, poly);
.print '</pre>'
.print '<svg width="1000" height="800" style="border:1px solid black">'
SELECT geopoly_svg(_shape,
         printf('style="fill:none;stroke:%s;stroke-width:1"',geo1.clr)
       )
  FROM geo1, querypoly
 WHERE geopoly_within(_shape, poly);
SELECT geopoly_svg(poly, 
         printf('style="fill:%s;fill-opacity:0.5;"',clr)
       )
  FROM querypoly;
.print '</svg>'

----------------------------------------

TITLE: Optimized Algorithm for IN-Operator in libsql
DESCRIPTION: An optimized algorithm for evaluating IN operators that produces the same results as the full-scan algorithm but with improved performance. It includes optimizations like binary search, early termination, and special handling for NULL values and constant lists.

LANGUAGE: markdown
CODE:
  1.  If the RHS is a constant list of length 1 or 2, then rewrite the
      IN operator as a simple expression.  Implement

            x IN (y1,y2)

      as if it were

            x=y1 OR x=y2

      This is the INDEX_NOOP optimization and is only undertaken if the
      IN operator is used for membership testing.  If the IN operator is
      driving a loop, then skip this step entirely.

  2.  Check the LHS to see if it is a partial-NULL and if it is, jump
      ahead to step 5.

  3.  Do a binary search of the RHS using the LHS as a probe.  If
      an exact match is found, return TRUE.

  4.  If the RHS is non-NULL then return FALSE.

  5.  If we do not need to distinguish between FALSE and NULL,
      then return FALSE.
  
  6.  For each row in the RHS, compare that row against the LHS and
      if the result is NULL, immediately return NULL.  In the case
      of a scalar IN operator, we only need to look at the very first
      row the RHS because for a scalar RHS, all NULLs will always come 
      first.  If the RHS is empty, this step is a no-op.

  7.  Return FALSE.

----------------------------------------

TITLE: Querying Bounding Boxes Contained Within Another Bounding Box in SQL
DESCRIPTION: Shows how to find polygons whose bounding boxes are completely within the query polygon's bounding box. Visualizes both the polygons and their bounding boxes using SVG.

LANGUAGE: sql
CODE:
.print '<h1>Bounding-Box WITHIN Query</h1>'
.print '<svg width="1000" height="800" style="border:1px solid black">'
SELECT geopoly_svg(_shape,
         printf('style="fill:none;stroke:%s;stroke-width:1"',geo1.clr)
       ),
       geopoly_svg(geopoly_bbox(_shape),
         'style="fill:none;stroke:black;stroke-width:1"'
       )
  FROM geo1, querypoly
 WHERE geopoly_within(geopoly_bbox(_shape), geopoly_bbox(poly));
SELECT geopoly_svg(poly, 
         printf('style="fill:%s;fill-opacity:0.5;"',clr)
       )
  FROM querypoly;
SELECT geopoly_svg(geopoly_bbox(poly),
         'style="fill:none;stroke:black;stroke-width:3"'
       )
  FROM querypoly;
.print '</svg>'

----------------------------------------

TITLE: Changing User Credentials API in SQLite Authentication
DESCRIPTION: The API function to change a user's credentials or admin status in a SQLite database. Users can change their own passwords, but only admins can change other users' credentials or admin privileges.

LANGUAGE: c
CODE:
int sqlite3_user_change(
  sqlite3 *db,           /* Database connection */
  const char *zUsername, /* Username to change */
  const void *aPW,       /* Modified password or credentials */
  int nPW,               /* Number of bytes in aPW[] */
  int isAdmin            /* Modified admin privilege for the user */
);

----------------------------------------

TITLE: Deleting Users API in SQLite Authentication
DESCRIPTION: The API function to delete a user from a SQLite database. Requires admin privileges to execute. The currently logged-in user cannot be deleted to ensure there's always at least one admin user.

LANGUAGE: c
CODE:
int sqlite3_user_delete(
  sqlite3 *db,           /* Database connection */
  const char *zUsername  /* Username to remove */
);

----------------------------------------

TITLE: Using the --column-names Command in libsql
DESCRIPTION: The --column-names command takes a boolean argument (0 or 1) to disable or enable the inclusion of column names in SQL output. When enabled, each column value is prefixed by its column name with a space between them.

LANGUAGE: shell
CODE:
--column-names

----------------------------------------

TITLE: Initializing Jaccwabyt StructBinderFactory with WASM Configuration
DESCRIPTION: Creates a factory for processing struct descriptions by configuring it for a specific WASM environment. This configuration requires specifying the WASM memory heap, memory allocator, and deallocator functions.

LANGUAGE: javascript
CODE:
const MyBinder = StructBinderFactory({
  // These config options are all required:
  heap: WebAssembly.Memory instance or a function which returns
        a Uint8Array or Int8Array view of the WASM memory,
  alloc:   function(howMuchMemory){...},
  dealloc: function(pointerToFree){...}
});

----------------------------------------

TITLE: Using the --print Command in libsql
DESCRIPTION: The --print command outputs both its arguments and body to stdout with indentation for each line. This is useful for displaying information during script execution.

LANGUAGE: shell
CODE:
--print

----------------------------------------

TITLE: Architecture Diagram of Jaccwabyt Components
DESCRIPTION: A Pikchr diagram illustrating the relationships between different components of the Jaccwabyt framework, including StructBinderFactory, StructBinder, StructType, Struct Constructor, and Struct Instances.

LANGUAGE: pikchr
CODE:
BSBF: box rad 0.3*boxht "StructBinderFactory" fit fill lightblue
BSB: box same "StructBinder" fit at 0.75 e of 0.7 s of BSBF.c
BST: box same "StructType<T>" fit at 1.5 e of BSBF
BSC: box same "Struct<T>" "Ctor" fit at 1.5 s of BST
BSI: box same "Struct<T>" "Instances" fit at 1 right of BSB.e
BC: box same at 0.25 right of 1.6 e of BST "C Structs" fit fill lightgrey

arrow -> from BSBF.s to BSB.w "Generates" aligned above
arrow -> from BSB.n to BST.sw "Contains" aligned above
arrow -> from BSB.s to BSC.nw "Generates" aligned below
arrow -> from BSC.ne to BSI.s "Constructs" aligned below
arrow <- from BST.se to BSI.n "Inherits" aligned above
arrow <-> from BSI.e to BC.s dotted "Shared" aligned above "Memory" aligned below
arrow -> from BST.e to BC.w dotted "Mirrors Struct" aligned above "Model From" aligned below
arrow -> from BST.s to BSC.n "Prototype of" aligned above

----------------------------------------

TITLE: Removing Column Constraints with ALTER COLUMN
DESCRIPTION: Example of removing all constraints from a column by altering it to a basic definition without specifying any type or constraints.

LANGUAGE: sql
CODE:
ALTER TABLE t ALTER COLUMN v TO v;

----------------------------------------

TITLE: Memory Management Pattern for C Structs in JavaScript
DESCRIPTION: Illustrates a try/finally pattern for ensuring proper cleanup of struct instances to prevent WASM memory leaks. Shows how to access, modify, and use struct properties safely.

LANGUAGE: javascript
CODE:
const my = new MyStruct();
try {
  console.log(my.member1, my.member2, my.member3);
  my.member1 = 12;
  assert(12 === my.member1);
  /* ^^^ it may seem silly to test that, but recall that assigning that
     property encodes the value into a byte array in heap memory, not
     a normal JS property. Similarly, fetching the property decodes it
     from the byte array. */
  // Pass the struct to C code which takes a MyStruct pointer:
  aCFunction( my.pointer );
} finally {
  my.dispose();
}

----------------------------------------

TITLE: Adding a Foreign Key Constraint Using ALTER COLUMN in SQL
DESCRIPTION: Example of altering a column to add a foreign key constraint. This modifies the user_id column in the emails table to reference the id column in the users table.

LANGUAGE: sql
CODE:
ALTER TABLE emails ALTER COLUMN user_id TO user_id INT REFERENCES users(id);

----------------------------------------

TITLE: Modifying JSON Data Using libsql JSON Functions
DESCRIPTION: Demonstrates three JSON modification functions: jsonb_replace to change a value, jsonb_set to update a value based on another property, and jsonb_remove to delete a property from the JSON object.

LANGUAGE: sql
CODE:
UPDATE t2 SET x=jsonb_replace(x,'$.f',(x->>'f')+1);
UPDATE t2 SET x=jsonb_set(x,'$.e',(x->>'f')-1);
UPDATE t2 SET x=jsonb_remove(x,'$.d');

----------------------------------------

TITLE: Creating a Table for Foreign Key Relationship in SQL
DESCRIPTION: Example of creating a table that will contain a foreign key reference. This emails table is created with columns but no constraints initially.

LANGUAGE: sql
CODE:
CREATE TABLE emails (user_id INT, email TEXT);

----------------------------------------

TITLE: Running Performance Benchmark with pgbench
DESCRIPTION: Command to execute performance benchmarks using pgbench against a local PostgreSQL instance, using a custom script file with 10 concurrent clients and 1000 transactions per client.

LANGUAGE: console
CODE:
pgbench -h 127.0.0.1 -p 5432 -f pg_bench_script.sql -c 10 -t 1000

----------------------------------------

TITLE: Compiling Rust Function to WebAssembly for libSQL
DESCRIPTION: Command to compile a Rust function to WebAssembly format targeting the wasm32-unknown-unknown platform, which can then be used as a user-defined function in libSQL.

LANGUAGE: bash
CODE:
cargo build --release --target wasm32-unknown-unknown

----------------------------------------

TITLE: Listing Bottomless WAL Generations with CLI
DESCRIPTION: Example of using the bottomless-cli to list available generations with verbose output and limiting to 3 generations.

LANGUAGE: console
CODE:
$ bottomless-cli -e http://localhost:9000 ls -v -l3
e4eb3c21-ff53-7b2e-a6ea-ca396f4df9b1
	created at (UTC):     2022-12-23 08:24:52.500
	change counter:       [0, 0, 0, 51]
	consistent WAL frame: 0
	WAL frame checksum:   0
	main database snapshot:
		object size:   408
		last modified: 2022-12-23T08:24:53Z

e4eb3c22-0359-7af6-9acb-285ed7b6ed59
	created at (UTC):     2022-12-23 08:24:51.470
	change counter:       [0, 0, 0, 51]
	consistent WAL frame: 1
	WAL frame checksum:   5335f2a044d2f455
	main database snapshot:
		object size:   399
		last modified: 2022-12-23T08:24:52Z

e4eb3c22-0941-73eb-85df-4e8552a0e88c
	created at (UTC):     2022-12-23 08:24:49.958
	change counter:       [0, 0, 0, 50]
	consistent WAL frame: 10
	WAL frame checksum:   6ac65882f9a2dba7
	main database snapshot:
		object size:   401
		last modified: 2022-12-23T08:24:51Z

----------------------------------------

TITLE: Opening a Database with Custom WAL Methods in C
DESCRIPTION: Function for opening a libSQL database connection with custom WAL methods. This allows specifying a custom WAL implementation when creating a new database connection.

LANGUAGE: c
CODE:
int libsql_open(
  const char *filename,   /* Database filename (UTF-8) */
  sqlite3 **ppDb,         /* OUT: SQLite db handle */
  int flags,              /* Flags */
  const char *zVfs,       /* Name of VFS module to use, NULL for default */
  const char *zWal        /* Name of WAL module to use, NULL for default */
)

----------------------------------------

TITLE: Removing Old Bottomless WAL Snapshots
DESCRIPTION: Example of using the bottomless-cli to remove generations older than a specified date.

LANGUAGE: console
CODE:
$ bottomless-cli -e http://localhost:9000 rm -v --older-than 2022-12-15
Removed 4 generations

----------------------------------------

TITLE: Configuring SQLite3MC CMake Build Settings
DESCRIPTION: Sets up build configuration types and defines source file lists for the SQLite3MC project, including public headers, base source files, and shell application sources.

LANGUAGE: CMake
CODE:
# Only generate Debug and Release configuration types.
set(CMAKE_CONFIGURATION_TYPES Debug Release)

set(SQLITE3MC_PUBLIC_HEADERS
  src/sqlite3.h
  src/sqlite3ext.h
  src/sqlite3mc.h
  src/sqlite3mc_version.h
  src/sqlite3mc_vfs.h
  src/sqlite3userauth.h
)

set(SQLITE3MC_BASE_SRCS
  src/sqlite3mc.c
  src/cipher_common.h
  src/cipher_config.h
  src/fastpbkdf2.h
  src/mystdint.h
  src/rijndael.h
  src/sha1.h
  src/sha2.h
  src/test_windirent.h
  ${SQLITE3MC_PUBLIC_HEADERS}
)
set(SQLITE3MC_DLLRES_SRCS
  src/sqlite3mc.rc
)
set(SQLITE3MC_SHELL_SRCS
  src/shell.c
  src/sqlite3mc.c
  src/sqlite3mc_shell.rc
)

----------------------------------------

TITLE: Setting Shell-Specific Definitions in SQLite3MC
DESCRIPTION: Configures compiler definitions specific to the sqlite3mc shell application. These control features like explain comments, virtual tables, and handling of unknown SQL functions that are only needed for the command-line shell.

LANGUAGE: CMake
CODE:
set(SQLITE3MC_SHELL_DEFINITIONS 
  $<$<BOOL:${SQLITE_SHELL_IS_UTF8}>:SQLITE_SHELL_IS_UTF8=1>
  $<$<BOOL:${SQLITE_ENABLE_EXPLAIN_COMMENTS}>:SQLITE_ENABLE_EXPLAIN_COMMENTS=1>
  $<$<BOOL:${SQLITE_ENABLE_DBPAGE_VTAB}>:SQLITE_ENABLE_DBPAGE_VTAB=1>
  $<$<BOOL:${SQLITE_ENABLE_DBSTAT_VTAB}>:SQLITE_ENABLE_DBSTAT_VTAB=1>
  $<$<BOOL:${SQLITE_ENABLE_STMTVTAB}>:SQLITE_ENABLE_STMTVTAB=1>
  $<$<BOOL:${SQLITE_ENABLE_UNKNOWN_SQL_FUNCTION}>:SQLITE_ENABLE_UNKNOWN_SQL_FUNCTION=1>
)

----------------------------------------

TITLE: Setting SQLite3MC Base Compiler Definitions
DESCRIPTION: Configures the base compiler definitions for sqlite3mc based on user-selected options. These definitions control features like encryption type, threading, full-text search capabilities, and various SQLite extensions.

LANGUAGE: CMake
CODE:
set(SQLITE3MC_BASE_DEFINITIONS 
  $<$<BOOL:${SQLITE_SHELL_IS_UTF8}>:SQLITE_SHELL_IS_UTF8=1>
  CODEC_TYPE=CODEC_TYPE_${CODEC_TYPE}
  SQLITE_DQS=${SQLITE_DQS}
  SQLITE_MAX_ATTACHED=${SQLITE_MAX_ATTACHED}
  $<$<BOOL:${SQLITE_USER_AUTHENTICATION}>:SQLITE_USER_AUTHENTICATION=1>
  $<$<BOOL:${SQLITE_ENABLE_DEBUG}>:SQLITE_ENABLE_DEBUG=1>
  SQLITE_THREADSAFE=${SQLITE_THREADSAFE}
  $<$<BOOL:${SQLITE_SOUNDEX}>:SQLITE_SOUNDEX=1>
  $<$<BOOL:${SQLITE_ENABLE_COLUMN_METADATA}>:SQLITE_ENABLE_COLUMN_METADATA=1>
  $<$<BOOL:${SQLITE_SECURE_DELETE}>:SQLITE_SECURE_DELETE=1>
  $<$<BOOL:${SQLITE_ENABLE_FTS3}>:SQLITE_ENABLE_FTS3=1>
  $<$<BOOL:${SQLITE_ENABLE_FTS3_PARENTHESIS}>:SQLITE_ENABLE_FTS3_PARENTHESIS=1>
  $<$<BOOL:${SQLITE_ENABLE_FTS4}>:SQLITE_ENABLE_FTS4=1>
  $<$<BOOL:${SQLITE_ENABLE_FTS5}>:SQLITE_ENABLE_FTS5=1>
  $<$<BOOL:${SQLITE_ENABLE_JSON1}>:SQLITE_ENABLE_JSON1=1>
  $<$<BOOL:${SQLITE_ENABLE_RTREE}>:SQLITE_ENABLE_RTREE=1>
  $<$<BOOL:${SQLITE_ENABLE_GEOPOLY}>:SQLITE_ENABLE_GEOPOLY=1>
  $<$<BOOL:${SQLITE_ENABLE_EXTFUNC}>:SQLITE_ENABLE_EXTFUNC=1>
  $<$<BOOL:${SQLITE_ENABLE_CARRAY}>:SQLITE_ENABLE_CARRAY=1>
  $<$<BOOL:${SQLITE_ENABLE_UUID}>:SQLITE_ENABLE_UUID=1>
  SQLITE_TEMP_STORE=2
  $<$<BOOL:${SQLITE_USE_URI}>:SQLITE_USE_URI=1>
  $<$<BOOL:${SQLITE_USER_AUTHENTICATION}>:SQLITE_USER_AUTHENTICATION=1>
  $<$<BOOL:${SQLITE_ENABLE_PREUPDATE_HOOK}>:SQLITE_ENABLE_PREUPDATE_HOOK=1>
  $<$<BOOL:${SQLITE_ENABLE_SESSION}>:SQLITE_ENABLE_SESSION=1>
  $<$<BOOL:${SQLITE3MC_USE_MINIZ}>:SQLITE3MC_USE_MINIZ=1>
  $<$<BOOL:${SQLITE3MC_OMIT_AES_HARDWARE_SUPPORT}>:SQLITE3MC_OMIT_AES_HARDWARE_SUPPORT=1>
  $<$<BOOL:${LIBSQL_ENABLE_WASM_RUNTIME}>:LIBSQL_ENABLE_WASM_RUNTIME=1>
  LIBSQL_EXTRA_PRAGMAS=1
  LIBSQL_CUSTOM_PAGER_CODEC=1

  SQLITE_ENABLE_DBSTAT_VTAB=1
  SQLITE_ENABLE_DBPAGE_VTAB=1
  SQLITE_ENABLE_STMTVTAB=1
  SQLITE_DEFAULT_FOREIGN_KEYS=1

  HAVE_CIPHER_AES_128_CBC=0
  HAVE_CIPHER_AES_256_CBC=1
  HAVE_CIPHER_CHACHA20=0   
  HAVE_CIPHER_SQLCIPHER=0   
  HAVE_CIPHER_RC4=0   
  HAVE_CIPHER_ASCON128=0
#  $<$<BOOL:${SQLITE_USE_TCL}>:SQLITE_USE_TCL=1>
)

----------------------------------------

TITLE: Configuring Legacy Encryption Mode in SQLite3MC
DESCRIPTION: Adds special compiler definitions when legacy encryption modes are enabled. This supports compatibility with sqleet and sqlcipher encryption implementations by setting appropriate compiler flags.

LANGUAGE: CMake
CODE:
if(SQLITE3MC_USE_SQLEET_LEGACY)
  set(SQLITE3MC_BASE_DEFINITIONS 
    ${SQLITE3MC_BASE_DEFINITIONS}
    SQLITE3MC_USE_SQLEET_LEGACY=1
  )
endif()
if(SQLITE3MC_USE_SQLCIPHER_LEGACY)
  if(NOT DEFINED SQLCIPHER_VERSION_DEFAULT)
    set(SQLCIPHER_VERSION_DEFAULT "4")
  endif()
  set(SQLITE3MC_BASE_DEFINITIONS 
    ${SQLITE3MC_BASE_DEFINITIONS}
    SQLITE3MC_USE_SQLCIPHER_LEGACY=1
    SQLCIPHER_VERSION_DEFAULT=${SQLCIPHER_VERSION_DEFAULT}
  )
endif()

----------------------------------------

TITLE: Defining Parameter Description in Hrana Protocol
DESCRIPTION: Defines the structure for parameter descriptions, providing information about named and unnamed parameters in a statement.

LANGUAGE: typescript
CODE:
type DescribeParam = {
    "name": string | null,
}

----------------------------------------

TITLE: Configuring SQLite3MC Library Target
DESCRIPTION: Creates and configures the SQLite3MC library target with appropriate include directories, compile definitions, and link libraries. Handles export definitions for shared libraries.

LANGUAGE: CMake
CODE:
# Lib Project
add_library(${SQLITE3MC_TARGET} ${SQLITE3MC_LINK}
  ${SQLITE3MC_BASE_SRCS}
)
target_include_directories(${SQLITE3MC_TARGET} PRIVATE
  ${SQLITE3MC_INCLUDEDIRS}
)
target_compile_definitions(${SQLITE3MC_TARGET} PRIVATE
  ${_LIB_DIFINITIONS}
  ${_DEFAULT_DEFINITIONS}
  ${SQLITE3MC_BASE_DEFINITIONS}
  ${SQLITE3MC_LIBONLY_DEFINITIONS}
  ${SQLITE3MC_ZLIB_DEFINITIONS}
)
target_link_libraries(${SQLITE3MC_TARGET} PRIVATE
  ${SQLITE3MC_LINK_LIBRARIES}
)

if(NOT SQLITE3MC_STATIC)
  target_compile_definitions(${SQLITE3MC_TARGET} PRIVATE
    SQLITE_API=${SHARED_LIB_EXPORT_DEFINITION}
  )
endif()

----------------------------------------

TITLE: Close Stored SQL Text Request and Response Types
DESCRIPTION: Type definitions for closing a stored SQL text. Unlike Hrana, the scope of the SQL texts is limited to a single stream rather than the whole connection.

LANGUAGE: typescript
CODE:
type CloseSqlStreamReq = {
    "type": "close_sql",
    "sql_id": int32,
}

type CloseSqlStreamResp = {
    "type": "close_sql",
}

----------------------------------------

TITLE: Configuring Optional ZLIB Support for SQLite3MC
DESCRIPTION: Adds ZLIB support to the SQLite3MC library if ZLIB is available, including necessary include directories and link libraries.

LANGUAGE: CMake
CODE:
if(ZLIB_FOUND)
  target_include_directories(${SQLITE3MC_TARGET} PRIVATE
    ${ZLIB_INCLUDE_DIRS}
  )
  target_link_libraries(${SQLITE3MC_TARGET} PRIVATE
    ${ZLIB_LIBRARIES}
  )
  message(${ZLIB_LIBRARIES})
endif()

----------------------------------------

TITLE: Describing SQL Statements in Hrana Protocol (TypeScript)
DESCRIPTION: Defines the request and response types for parsing and analyzing SQL statements. This allows examining a statement's structure without executing it, using either direct SQL text or a reference to stored SQL.

LANGUAGE: typescript
CODE:
type DescribeReq = {
    "type": "describe",
    "stream_id": int32,
    "sql"?: string | null,
    "sql_id"?: int32 | null,
}

type DescribeResp = {
    "type": "describe",
    "result": DescribeResult,
}

----------------------------------------

TITLE: Configuring Optional ICU Support for SQLite3MC
DESCRIPTION: Adds International Components for Unicode (ICU) support to the SQLite3MC library if requested, including necessary definitions, include directories, and link libraries.

LANGUAGE: CMake
CODE:
if(SQLITE3MC_WITH_ICU)
  target_compile_definitions(${SQLITE3MC_TARGET} PRIVATE
    ${SQLITE3MC_ICU_DEFINITIONS}
  )
  target_include_directories(${SQLITE3MC_TARGET} PRIVATE 
    ${ICU_INCLUDE_DIRS}
  )
  target_link_libraries(${SQLITE3MC_TARGET} PRIVATE
    ${ICU_LIBRARIES}
  )
  message("Will build ${SQLITE3MC_TARGET} with ICU")
endif()

----------------------------------------

TITLE: Closing a Cursor in Hrana Protocol (TypeScript)
DESCRIPTION: Defines the request and response types for closing a cursor previously opened with open_cursor. This allows the server to release resources and continue processing other requests for the given stream.

LANGUAGE: typescript
CODE:
type CloseCursorReq = {
    "type": "close_cursor",
    "cursor_id": int32,
}

type CloseCursorResp = {
    "type": "close_cursor",
}

----------------------------------------

TITLE: Configuring Rusqlite Dependency in Cargo.toml
DESCRIPTION: Adding Rusqlite to a Rust project's dependencies in Cargo.toml with the 'bundled' feature enabled to compile and link SQLite automatically.

LANGUAGE: toml
CODE:
[dependencies]
# `bundled` causes us to automatically compile and link in an up to date
# version of SQLite for you. This avoids many common build issues, and
# avoids depending on the version of SQLite on the users system (or your
# system), which may be old or missing. It's the right choice for most
# programs that control their own SQLite databases.
#
# That said, it's not ideal for all scenarios and in particular, generic
# libraries built around `rusqlite` should probably not enable it, which
# is why it is not a default feature -- it could become hard to disable.
rusqlite = { version = "0.29.0", features = ["bundled"] }

----------------------------------------

TITLE: Defining Request and Response Types in TypeScript
DESCRIPTION: Type definitions for the different request-response operations supported by the Hrana protocol, including stream management and SQL execution.

LANGUAGE: typescript
CODE:
type Request =
    | OpenStreamReq
    | CloseStreamReq
    | ExecuteReq
    | BatchReq

type Response =
    | OpenStreamResp
    | CloseStreamResp
    | ExecuteResp
    | BatchResp

----------------------------------------

TITLE: Defining Hello Message Types in TypeScript
DESCRIPTION: Type definitions for authentication messages in the Hrana protocol. These types handle the initial connection handshake between client and server, including JWT authentication.

LANGUAGE: typescript
CODE:
type HelloMsg = {
    "type": "hello",
    "jwt": string | null,
}

LANGUAGE: typescript
CODE:
type HelloOkMsg = {
    "type": "hello_ok",
}

type HelloErrorMsg = {
    "type": "hello_error",
    "error": Error,
}

----------------------------------------

TITLE: Defining Response Format Structure in TypeScript
DESCRIPTION: Illustrates the general structure of API responses, showing how they can either contain a payload specific to the endpoint or an Error object in case of failures.

LANGUAGE: typescript
CODE:
type Response<T> = T | Error;