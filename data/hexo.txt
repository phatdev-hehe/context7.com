TITLE: Basic Layout Template Structure in Hexo
DESCRIPTION: Demonstrates the basic structure of layout templates in Hexo, showing how index.ejs and layout.ejs work together to generate the final HTML output.

LANGUAGE: html
CODE:
index

LANGUAGE: html
CODE:
<!doctype html>
<html>
  <body>
    <%- body %>
  </body>
</html>

LANGUAGE: html
CODE:
<!doctype html>
<html>
  <body>
    index
  </body>
</html>

----------------------------------------

TITLE: Initializing Hexo Website
DESCRIPTION: Initializes a new Hexo website in the specified folder or current directory. Clones starter template and installs dependencies.

LANGUAGE: bash
CODE:
$ hexo init [folder]

----------------------------------------

TITLE: Demonstrating Code Block Syntax in Hexo Markdown
DESCRIPTION: Shows three different ways to create code blocks in Hexo: using codeblock tag plugin, code tag plugin, and fenced code blocks.

LANGUAGE: markdown
CODE:
{% codeblock [title] [lang:language] [url] [link text] [additional options] %}
code snippet
{% endcodeblock %}

{% code [title] [lang:language] [url] [link text] [additional options] %}
code snippet
{% endcode %}

```[language] [title] [url] [link text] [additional options]
code snippet
```

----------------------------------------

TITLE: Creating New Hexo Post
DESCRIPTION: Command to create a new post or page in Hexo with specified layout and title. The layout parameter is optional and defaults to 'post'.

LANGUAGE: bash
CODE:
$ hexo new [layout] <title>

----------------------------------------

TITLE: Deploying Website
DESCRIPTION: Deploys the website with optional pre-deployment generation.

LANGUAGE: bash
CODE:
$ hexo deploy

----------------------------------------

TITLE: Initializing New Hexo Project
DESCRIPTION: Commands to create and initialize a new Hexo project in a specified folder. Includes project creation and dependency installation.

LANGUAGE: bash
CODE:
$ hexo init <folder>
$ cd <folder>
$ npm install

----------------------------------------

TITLE: Tag with Configuration Access
DESCRIPTION: Example showing how to access user configuration, theme configuration, and front-matter data within a tag plugin.

LANGUAGE: javascript
CODE:
hexo.extend.tag.register('foo', function (args) {
  const [firstArg] = args;

  // User config
  const { config } = hexo;
  const editor = config.author + firstArg;

  // Theme config
  const { config: themeCfg } = hexo.theme;
  if (themeCfg.fancybox) // do something...

  // Front-matter
  const { title } = this; // article's (post/page) title

  // Article's content
  const { _content } = this; // original content
  const { content } = this; // HTML-rendered content

  return 'foo';
});

----------------------------------------

TITLE: Generating Routes for All Posts in Hexo
DESCRIPTION: Demonstrates how to create routes for all posts in a Hexo site. This generator iterates over all posts and creates a route for each, setting the path, data, and layout.

LANGUAGE: javascript
CODE:
hexo.extend.generator.register("post", function (locals) {
  return locals.posts.map(function (post) {
    return {
      path: post.path,
      data: post,
      layout: "post",
    };
  });
});

----------------------------------------

TITLE: GitHub Actions Workflow Configuration for Hexo
DESCRIPTION: GitHub Actions workflow configuration file that automates the build and deployment process of a Hexo site to GitHub Pages. Includes Node.js setup, dependency caching, and deployment steps.

LANGUAGE: yml
CODE:
name: Pages

on:
  push:
    branches:
      - main # default branch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # If your repository depends on submodule, please see: https://github.com/actions/checkout
          submodules: recursive
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          # Examples: 20, 18.19, >=16.20.2, lts/Iron, lts/Hydrogen, *, latest, current, node
          # Ref: https://github.com/actions/setup-node#supported-version-syntax
          node-version: "20"
      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.OS }}-npm-cache
          restore-keys: |
            ${{ runner.OS }}-npm-cache
      - name: Install Dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

----------------------------------------

TITLE: Git Deployment Configuration
DESCRIPTION: Configuration settings for deploying to Git repositories including GitHub Pages, Bitbucket, etc.

LANGUAGE: yaml
CODE:
deploy:
  type: git
  repo: <repository url> # https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io
  branch: [branch]
  message: [message]

----------------------------------------

TITLE: GitHub Actions Workflow Configuration for Hexo
DESCRIPTION: GitHub Actions workflow configuration file that automates the build and deployment process of a Hexo site to GitHub Pages. Includes Node.js setup, dependency caching, and deployment steps.

LANGUAGE: yml
CODE:
name: Pages

on:
  push:
    branches:
      - main # default branch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # If your repository depends on submodule, please see: https://github.com/actions/checkout
          submodules: recursive
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          # Examples: 20, 18.19, >=16.20.2, lts/Iron, lts/Hydrogen, *, latest, current, node
          # Ref: https://github.com/actions/setup-node#supported-version-syntax
          node-version: "20"
      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.OS }}-npm-cache
          restore-keys: |
            ${{ runner.OS }}-npm-cache
      - name: Install Dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

----------------------------------------

TITLE: Installing Hexo CLI with NPM
DESCRIPTION: Command to globally install the Hexo command-line interface using NPM package manager.

LANGUAGE: bash
CODE:
$ npm install -g hexo-cli

----------------------------------------

TITLE: Displaying Hexo Theme Folder Structure
DESCRIPTION: This snippet shows the basic folder structure required for a Hexo theme, including configuration, languages, layout, scripts, and source directories.

LANGUAGE: plain
CODE:
.
├── _config.yml
├── languages
├── layout
├── scripts
└── source

----------------------------------------

TITLE: Registering a Hexo Generator in JavaScript
DESCRIPTION: Demonstrates the basic syntax for registering a custom generator in Hexo. The generator function receives a 'locals' argument containing site variables, allowing access to website data without directly querying the database.

LANGUAGE: javascript
CODE:
hexo.extend.generator.register(name, function (locals) {
  // ...
});

----------------------------------------

TITLE: Handling New Post Event in Hexo
DESCRIPTION: Example of listening to the 'new' event which is emitted after a new post is created. The event handler receives a post object containing the full path and content of the post file.

LANGUAGE: javascript
CODE:
hexo.on("new", function (post) {
  //
});

----------------------------------------

TITLE: Registering Helper Function in Hexo
DESCRIPTION: Basic syntax for registering a new helper function in Hexo. Helper functions allow you to add reusable code snippets to your templates.

LANGUAGE: javascript
CODE:
hexo.extend.helper.register(name, function () {
  // ...
});

----------------------------------------

TITLE: Registering a Hexo Generator in JavaScript
DESCRIPTION: Demonstrates the basic syntax for registering a custom generator in Hexo. The generator function receives a 'locals' argument containing site variables, allowing access to website data without directly querying the database.

LANGUAGE: javascript
CODE:
hexo.extend.generator.register(name, function (locals) {
  // ...
});

----------------------------------------

TITLE: Creating a Post in Hexo using JavaScript
DESCRIPTION: This function creates a new post in Hexo. It takes data and a replace flag as arguments. The data object can include various attributes such as title, slug, layout, path, and date.

LANGUAGE: js
CODE:
hexo.post.create(data, replace);

----------------------------------------

TITLE: Creating a Post in Hexo using JavaScript
DESCRIPTION: This function creates a new post in Hexo. It takes data and a replace flag as arguments. The data object can include various attributes such as title, slug, layout, path, and date.

LANGUAGE: js
CODE:
hexo.post.create(data, replace);

----------------------------------------

TITLE: Hexo Project Directory Structure
DESCRIPTION: Shows the default folder structure of a newly initialized Hexo project, including configuration files and content directories.

LANGUAGE: plain
CODE:
.
├── _config.yml
├── package.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes

----------------------------------------

TITLE: Cloning and Setting Up Hexo Repository in Bash
DESCRIPTION: Instructions for cloning the Hexo repository, installing dependencies, and initializing submodules. This is the first step in the development workflow.

LANGUAGE: bash
CODE:
$ git clone https://github.com/<username>/hexo.git
$ cd hexo
$ npm install
$ git submodule update --init

----------------------------------------

TITLE: Injecting CSS and JavaScript Resources
DESCRIPTION: Example showing how to inject CSS and JavaScript resources into specific page layouts using the injector API.

LANGUAGE: javascript
CODE:
const css = hexo.extend.helper.get("css").bind(hexo);
const js = hexo.extend.helper.get("js").bind(hexo);

hexo.extend.injector.register(
  "head_end",
  () => {
    return css(
      "https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css",
    );
  },
  "music",
);

hexo.extend.injector.register(
  "body_end",
  '<script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js">',
  "music",
);

hexo.extend.injector.register("body_end", () => {
  return js("/js/jquery.js");
});

----------------------------------------

TITLE: Basic Injector API Usage in Hexo
DESCRIPTION: Basic syntax for registering code injections in Hexo, showing the main function signature with entry, value and target parameters.

LANGUAGE: javascript
CODE:
hexo.extend.injector.register(entry, value, to);

----------------------------------------

TITLE: Pretty URLs Configuration in YAML
DESCRIPTION: Example showing how to configure pretty URLs by removing trailing index.html from permalinks

LANGUAGE: yaml
CODE:
# e.g. page.permalink is http://example.com/foo/bar/index.html
pretty_urls:
  trailing_index: false
# becomes http://example.com/foo/bar/

----------------------------------------

TITLE: Local Variables in Hexo Templates
DESCRIPTION: Demonstrates how to pass and use local variables in Hexo templates and partials.

LANGUAGE: html
CODE:
<h1 id="logo"><%= title %></h1>

LANGUAGE: html
CODE:
<%- partial('partial/header', {title: 'Hello World'}) %>
<div id="content">Home page</div>

LANGUAGE: html
CODE:
<h1 id="logo">Hello World</h1>
<div id="content">Home page</div>

----------------------------------------

TITLE: After Post Render Filter Example
DESCRIPTION: Demonstrates the use of the 'after_post_render' filter to modify post content after rendering, replacing Twitter usernames with profile links.

LANGUAGE: javascript
CODE:
hexo.extend.filter.register("after_post_render", function (data) {
  data.content = data.content.replace(
    /@(\d+)/,
    '<a href="http://twitter.com/$1">#$1</a>',
  );
  return data;
});

----------------------------------------

TITLE: Creating Language Files in YAML
DESCRIPTION: Shows an example of a language file (en.yml) containing translations for various keys. This file would be placed in the 'languages' folder of the Hexo theme.

LANGUAGE: yaml
CODE:
index:
  title: Home
  add: Add
  video:
    zero: No videos
    one: One video
    other: %d videos

----------------------------------------

TITLE: Registering Custom Hexo Deployer in JavaScript
DESCRIPTION: Shows how to register a new custom deployer in Hexo using the deployer extension API. The function receives an args parameter containing deployment configuration from _config.yml and command line inputs.

LANGUAGE: javascript
CODE:
hexo.extend.deployer.register(name, function (args) {
  // ...
});

----------------------------------------

TITLE: Creating a Paginated Archive in Hexo
DESCRIPTION: Shows how to create a paginated archive page using the hexo-pagination plugin. This generator creates multiple pages for the archives route with 10 posts per page.

LANGUAGE: javascript
CODE:
var pagination = require("hexo-pagination");

hexo.extend.generator.register("archive", function (locals) {
  // hexo-pagination makes an index.html for the /archives route
  return pagination("archives", locals.posts, {
    perPage: 10,
    layout: ["archive", "index"],
    data: {},
  });
});

----------------------------------------

TITLE: Updating Routes in Hexo Generator
DESCRIPTION: Shows how to update routes using a Hexo generator. The example demonstrates returning both a single object and an array of objects, each defining a route with path and data attributes.

LANGUAGE: javascript
CODE:
hexo.extend.generator.register("test", function (locals) {
  // Object
  return {
    path: "foo",
    data: "foo",
  };

  // Array
  return [
    { path: "foo", data: "foo" },
    { path: "bar", data: "bar" },
  ];
});

----------------------------------------

TITLE: Rendering with Options in Hexo
DESCRIPTION: Illustrates how to pass additional options when rendering content in Hexo.

LANGUAGE: javascript
CODE:
hexo.render.render({ text: "" }, { foo: "foo" }).then(function (result) {
  // ...
});

----------------------------------------

TITLE: Configuring Syntax Highlighting in Hexo (v7.0.0+)
DESCRIPTION: YAML configuration for syntax highlighting in Hexo versions 7.0.0 and above, with updated syntax for selecting the highlighter.

LANGUAGE: yaml
CODE:
# _config.yml
syntax_highlighter: highlight.js
highlight:
  auto_detect: false
  line_number: true
  line_threshold: 0
  tab_replace: ""
  exclude_languages:
    - example
  wrap: true
  hljs: false
prismjs:
  preprocess: true
  line_number: true
  line_threshold: 0
  tab_replace: ""

----------------------------------------

TITLE: Configuring Language Settings in Hexo YAML
DESCRIPTION: Demonstrates how to set the default language and multiple languages in Hexo's _config.yml file. This configuration determines the language(s) used for the site.

LANGUAGE: yaml
CODE:
language: zh-tw

language:
- zh-tw
- en

----------------------------------------

TITLE: GitHub Actions Workflow Configuration for Hexo
DESCRIPTION: GitHub Actions workflow configuration file that handles building and deploying a Hexo site to GitHub Pages. Includes Node.js setup, dependency caching, and automated deployment steps.

LANGUAGE: yaml
CODE:
name: Pages

on:
  push:
    branches:
      - main # default branch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # If your repository depends on submodule, please see: https://github.com/actions/checkout
          submodules: recursive
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          # Examples: 20, 18.19, >=16.20.2, lts/Iron, lts/Hydrogen, *, latest, current, node
          # Ref: https://github.com/actions/setup-node#supported-version-syntax
          node-version: "20"
      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.OS }}-npm-cache
          restore-keys: |
            ${{ runner.OS }}-npm-cache
      - name: Install Dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

----------------------------------------

TITLE: Getting Output Extension in Hexo
DESCRIPTION: Shows how to get the output extension of rendered files using getOutput method.

LANGUAGE: javascript
CODE:
hexo.render.getOutput("layout.swig"); // html
hexo.render.getOutput("image.png"); // '''

----------------------------------------

TITLE: Skip Render Configuration in YAML
DESCRIPTION: Examples demonstrating how to exclude files and directories from being rendered by Hexo using the skip_render option

LANGUAGE: yaml
CODE:
skip_render: "mypage/**/*"
# will output `source/mypage/index.html` and `source/mypage/code.js` without altering them.

## This also can be used to exclude posts,
skip_render: "_posts/test-post.md"
# will ignore the `source/_posts/test-post.md`.

----------------------------------------

TITLE: Implementing Fragment Caching in Hexo Templates
DESCRIPTION: Demonstrates how to use the fragment_cache helper to cache static content in Hexo templates. This feature significantly improves generation time by caching repeated content fragments.

LANGUAGE: javascript
CODE:
<%- fragment_cache('header', function(){
  return '<header></header>';
}); %>

----------------------------------------

TITLE: Using Translation Helpers in Hexo Templates
DESCRIPTION: Demonstrates how to use the '__' and '_p' helpers in Hexo templates to retrieve translated strings. The '_p' helper is used for plural strings with numeric placeholders.

LANGUAGE: javascript
CODE:
<%= __('index.title') %>
// Home

<%= _p('index.video', 3) %>
// 3 videos

----------------------------------------

TITLE: URL Helper Functions in Hexo
DESCRIPTION: Helper functions for generating URLs including url_for, relative_url, and full_url_for with various configuration options.

LANGUAGE: javascript
CODE:
<%- url_for(path, [option]) %>
<%- relative_url(from, to) %>
<%- full_url_for(path) %>

----------------------------------------

TITLE: Cloning and Installing Hexo Site Repository
DESCRIPTION: This shell command sequence demonstrates how to clone the Hexo site repository and install its dependencies for theme publishing.

LANGUAGE: shell
CODE:
$ git clone https://github.com/<username>/site.git
$ cd site
$ npm install

----------------------------------------

TITLE: Configuring highlight.js in Hexo (v7.0.0+)
DESCRIPTION: YAML configuration for enabling and customizing highlight.js in Hexo versions 7.0.0 and above.

LANGUAGE: yaml
CODE:
# _config.yml
syntax_highlighter: highlight.js
highlight:
  auto_detect: false
  line_number: true
  line_threshold: 0
  tab_replace: "  "
  exclude_languages:
    - example
  wrap: true
  hljs: false

----------------------------------------

TITLE: Configuring Syntax Highlighting in Hexo (pre-v7.0.0)
DESCRIPTION: YAML configuration for syntax highlighting in Hexo versions before 7.0.0, including options for highlight.js and PrismJS.

LANGUAGE: yaml
CODE:
# _config.yml
highlight:
  enable: true
  auto_detect: false
  line_number: true
  line_threshold: 0
  tab_replace: ""
  exclude_languages:
    - example
  wrap: true
  hljs: false
prismjs:
  enable: false
  preprocess: true
  line_number: true
  line_threshold: 0
  tab_replace: ""

----------------------------------------

TITLE: Setting Up Hexo Documentation Repository
DESCRIPTION: Instructions for cloning the Hexo documentation repository and installing dependencies. This is the first step in contributing to Hexo's documentation.

LANGUAGE: bash
CODE:
$ npm install hexo-cli -g # If you don't have hexo-cli installed
$ git clone https://github.com/<username>/site.git
$ cd site
$ npm install

----------------------------------------

TITLE: Registering Basic Hexo Tag
DESCRIPTION: Basic syntax for registering a new tag plugin in Hexo, showing the fundamental structure with args and content parameters.

LANGUAGE: javascript
CODE:
hexo.extend.tag.register(
  name,
  function (args, content) {
    // ...
  },
  options,
);

----------------------------------------

TITLE: Conditional Tag Helpers
DESCRIPTION: Helper functions for checking current page context and state like is_home, is_post, is_page etc.

LANGUAGE: javascript
CODE:
<%- is_current(path, [strict]) %>
<%- is_home() %>
<%- is_post() %>

----------------------------------------

TITLE: Basic Hexo Plugin Structure
DESCRIPTION: Shows the required file structure for a Hexo plugin, which must include an index.js for the plugin code and a package.json for metadata.

LANGUAGE: plain
CODE:
.
├── index.js
└── package.json

----------------------------------------

TITLE: Publishing a Draft in Hexo using JavaScript
DESCRIPTION: This function publishes a draft post in Hexo. It takes data and a replace flag as arguments. The data object must include a slug (file name) and can optionally specify a layout.

LANGUAGE: js
CODE:
hexo.post.publish(data, replace);

----------------------------------------

TITLE: Implementing a Hexo Console Command to Display Configuration
DESCRIPTION: Provides a complete example of registering a console command named 'config' that displays the Hexo configuration when executed. It demonstrates the use of the register method and handling of command arguments.

LANGUAGE: javascript
CODE:
hexo.extend.console.register(
  "config",
  "Display configuration",
  function (args) {
    console.log(hexo.config);
  },
);

----------------------------------------

TITLE: Using Partials in Hexo Templates
DESCRIPTION: Shows how to implement and use partials in Hexo templates for sharing components between pages, with an example of header implementation.

LANGUAGE: html
CODE:
<h1 id="logo"><%= config.title %></h1>

LANGUAGE: html
CODE:
<%- partial('partial/header') %>
<div id="content">Home page</div>

LANGUAGE: html
CODE:
<h1 id="logo">My Site</h1>
<div id="content">Home page</div>

----------------------------------------

TITLE: Injecting CSS and JavaScript Resources
DESCRIPTION: Example showing how to inject CSS and JavaScript resources into specific page layouts using the injector API.

LANGUAGE: javascript
CODE:
const css = hexo.extend.helper.get("css").bind(hexo);
const js = hexo.extend.helper.get("js").bind(hexo);

hexo.extend.injector.register(
  "head_end",
  () => {
    return css(
      "https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css",
    );
  },
  "music",
);

hexo.extend.injector.register(
  "body_end",
  '<script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js">',
  "music",
);

hexo.extend.injector.register("body_end", () => {
  return js("/js/jquery.js");
});

----------------------------------------

TITLE: Rendering a File in Hexo
DESCRIPTION: Shows how to render a file using hexo.render.render. The engine is automatically detected based on the file extension, but can be explicitly defined if needed.

LANGUAGE: javascript
CODE:
hexo.render.render({ path: "path/to/file.swig" }).then(function (result) {
  // ...
});

----------------------------------------

TITLE: Using Data File in Hexo EJS Template
DESCRIPTION: This snippet demonstrates how to use the data from a YAML file (menu.yml) in a Hexo EJS template. It iterates over the menu items and generates HTML links for each entry.

LANGUAGE: ejs
CODE:
<% for (var link in site.data.menu) { %>
  <a href="<%= site.data.menu[link] %>"> <%= link %> </a>
<% } %>

----------------------------------------

TITLE: Implementing a Hexo Console Command to Display Configuration
DESCRIPTION: Provides a complete example of registering a console command named 'config' that displays the Hexo configuration when executed. It demonstrates the use of the register method and handling of command arguments.

LANGUAGE: javascript
CODE:
hexo.extend.console.register(
  "config",
  "Display configuration",
  function (args) {
    console.log(hexo.config);
  },
);

----------------------------------------

TITLE: Initializing Hexo Instance in JavaScript
DESCRIPTION: Creates a new Hexo instance and initializes it with the current working directory and default options. This is the first step in programmatically working with Hexo.

LANGUAGE: javascript
CODE:
var Hexo = require("hexo");
var hexo = new Hexo(process.cwd(), {});

hexo.init().then(function () {
  // ...
});

----------------------------------------

TITLE: Using Asset Tags in Hexo Markdown
DESCRIPTION: These examples demonstrate how to use Hexo's built-in asset tag plugins to reference images and other assets in posts. This method ensures correct rendering in index pages and archives.

LANGUAGE: markdown
CODE:
{% asset_img example.jpg This is an example image %}
{% asset_img "spaced asset.jpg" "spaced title" %}

----------------------------------------

TITLE: Executing Filters in Hexo
DESCRIPTION: Shows how to execute filters synchronously and asynchronously in Hexo. Includes options for specifying context and additional arguments.

LANGUAGE: javascript
CODE:
hexo.extend.filter.exec(type, data, options);
hexo.extend.filter.execSync(type, data, options);

----------------------------------------

TITLE: Rendering a String in Hexo
DESCRIPTION: Demonstrates how to render a string using the asynchronous hexo.render.render method. The engine parameter specifies which rendering engine to use.

LANGUAGE: javascript
CODE:
hexo.render.render({ text: "example", engine: "swig" }).then(function (result) {
  // ...
});

----------------------------------------

TITLE: Defining Front-matter in YAML for Hexo
DESCRIPTION: Example of using YAML syntax to define Front-matter in Hexo. This snippet shows how to set the title and date for a post.

LANGUAGE: yaml
CODE:
---
title: Hello World
date: 2013/7/13 20:46:25
---

----------------------------------------

TITLE: Registering Hexo Renderer Basic Structure
DESCRIPTION: Basic syntax for registering a new renderer in Hexo. Shows the core registration function with name, output, rendering function, and sync mode parameters.

LANGUAGE: javascript
CODE:
hexo.extend.renderer.register(
  name,
  output,
  function (data, options) {
    // ...
  },
  sync,
);

----------------------------------------

TITLE: Creating New Content in Hexo
DESCRIPTION: Command to create a new article or page in Hexo. The layout parameter is optional, with 'post' as the default layout.

LANGUAGE: bash
CODE:
$ hexo new [layout] <title>

----------------------------------------

TITLE: Defining Front-matter in YAML for Hexo
DESCRIPTION: Example of using YAML syntax to define Front-matter in Hexo. This snippet shows how to set the title and date for a post.

LANGUAGE: yaml
CODE:
---
title: Hello World
date: 2013/7/13 20:46:25
---

----------------------------------------

TITLE: Configuring Syntax Highlighting in Hexo (v7.0.0+)
DESCRIPTION: YAML configuration for syntax highlighting in Hexo versions 7.0.0 and above, with updated syntax and options.

LANGUAGE: yaml
CODE:
# _config.yml
syntax_highlighter: highlight.js
highlight:
  auto_detect: false
  line_number: true
  line_threshold: 0
  tab_replace: ""
  exclude_languages:
    - example
  wrap: true
  hljs: false
prismjs:
  preprocess: true
  line_number: true
  line_threshold: 0
  tab_replace: ""

----------------------------------------

TITLE: Writing Code Blocks in Hexo Markdown
DESCRIPTION: Demonstrates three ways to write code blocks in Hexo: using the codeblock tag plugin, the code tag plugin, and Markdown's fenced code block syntax.

LANGUAGE: markdown
CODE:
{% codeblock [title] [lang:language] [url] [link text] [additional options] %}
code snippet
{% endcodeblock %}

{% code [title] [lang:language] [url] [link text] [additional options] %}
code snippet
{% endcode %}

```[language] [title] [url] [link text] [additional options]
code snippet
```

----------------------------------------

TITLE: Accessing Hexo Configuration and Front-matter in Tag Plugins
DESCRIPTION: Demonstrates how to access various Hexo configurations, theme settings, and front-matter data within a tag plugin function. This example shows two different approaches to structuring the plugin code.

LANGUAGE: javascript
CODE:
hexo.extend.tag.register('foo', function (args) {
  const [firstArg] = args;

  // User config
  const { config } = hexo;
  const editor = config.author + firstArg;

  // Theme config
  const { config: themeCfg } = hexo.theme;
  if (themeCfg.fancybox) // do something...

  // Front-matter
  const { title } = this; // article's (post/page) title

  // Article's content
  const { _content } = this; // original content
  const { content } = this; // HTML-rendered content

  return 'foo';
});

LANGUAGE: javascript
CODE:
hexo.extend.tag.register("foo", require("./lib/foo")(hexo));

LANGUAGE: javascript
CODE:
module.exports = hexo => {
  return function fooFn(args) {
    const [firstArg] = args;

    const { config } = hexo;
    const editor = config.author + firstArg;

    const { config: themeCfg } = hexo.theme;
    if (themeCfg.fancybox) // do something...

    const { title, _content, content } = this;

    return 'foo';
  };
};

----------------------------------------

TITLE: Registering a Console Command in Hexo
DESCRIPTION: Demonstrates the basic syntax for registering a new console command in Hexo. It includes parameters for the command name, description, options, and the function to execute.

LANGUAGE: javascript
CODE:
hexo.extend.console.register(name, desc, options, function (args) {
  // ...
});

----------------------------------------

TITLE: HTML Tag Helper Functions
DESCRIPTION: Helper functions for generating common HTML tags like css, js, link_to, image_tag etc. with customizable attributes.

LANGUAGE: javascript
CODE:
<%- css(path, ...) %>
<%- js(path, ...) %>
<%- link_to(path, [text], [options]) %>

----------------------------------------

TITLE: Disabling Nunjucks Tags in Hexo Markdown Renderer
DESCRIPTION: Shows how to disable processing of Nunjucks tags in the Markdown renderer, allowing use of {{ }} or {% %} without content escaping.

LANGUAGE: javascript
CODE:
const renderer = hexo.render.renderer.get("md");
if (renderer) {
  renderer.disableNunjucks = true;
  hexo.extend.renderer.register("md", "html", renderer);
}

----------------------------------------

TITLE: Defining Front-matter in JSON for Hexo
DESCRIPTION: Example of using JSON syntax to define Front-matter in Hexo. This snippet demonstrates setting the title and date for a post using JSON format.

LANGUAGE: json
CODE:
"title": "Hello World",
"date": "2013/7/13 20:46:25"
;;;

----------------------------------------

TITLE: Escaping Content in Hexo Templates
DESCRIPTION: Shows various methods to escape content containing Nunjucks syntax in Hexo templates to prevent parsing issues.

LANGUAGE: plain
CODE:
{% raw %}
Hello {{ world }}
{% endraw %}

LANGUAGE: plain
CODE:
```
Hello {{ world }}
```

----------------------------------------

TITLE: Generating Table of Contents in Hexo Templates
DESCRIPTION: The toc helper parses all heading tags (h1~h6) on the page and generates a table of contents.

LANGUAGE: EJS
CODE:
<%- toc(str, [options]) %>

----------------------------------------

TITLE: Registering a Hexo Migrator Extension in JavaScript
DESCRIPTION: This code snippet demonstrates how to register a new migrator extension in Hexo. The function takes a name parameter and a callback function that handles the migration process. The callback receives an 'args' parameter containing user input from the terminal.

LANGUAGE: javascript
CODE:
hexo.extend.migrator.register(name, function (args) {
  // ...
});

----------------------------------------

TITLE: Migrating WordPress Content to Hexo
DESCRIPTION: This command migrates WordPress content to Hexo using the exported WordPress file. The source can be a file path or URL to the WordPress export file.

LANGUAGE: bash
CODE:
$ hexo migrate wordpress <source>

----------------------------------------

TITLE: Pull Quote Tag with End Tags
DESCRIPTION: Implementation of a pull quote tag that uses end tags to wrap content, showing how to handle tag arguments and content.

LANGUAGE: javascript
CODE:
hexo.extend.tag.register(
  "pullquote",
  function (args, content) {
    var className = args.join(" ");
    return (
      '<blockquote class="pullquote' +
      className +
      '">' +
      content +
      "</blockquote>"
    );
  },
  { ends: true },
);

----------------------------------------

TITLE: Configuring PrismJS in Hexo (v7.0.0+)
DESCRIPTION: YAML configuration for enabling and customizing PrismJS in Hexo versions 7.0.0 and above.

LANGUAGE: yaml
CODE:
# _config.yml
syntax_highlighter: prismjs
prismjs:
  preprocess: true
  line_number: true
  line_threshold: 0
  tab_replace: ""

----------------------------------------

TITLE: Listing Categories in Hexo Templates
DESCRIPTION: The list_categories helper inserts a list of all categories with various customization options.

LANGUAGE: EJS
CODE:
<%- list_categories([options]) %>

----------------------------------------

TITLE: Inserting Open Graph Data in Hexo Templates
DESCRIPTION: The open_graph helper inserts Open Graph data with various options.

LANGUAGE: EJS
CODE:
<%- open_graph([options]) %>

----------------------------------------

TITLE: Configuring GitLab CI for Hexo Deployment
DESCRIPTION: This YAML configuration sets up a GitLab CI pipeline for building and deploying a Hexo site. It uses a Node.js Alpine image, caches node_modules, installs dependencies, and runs the build script. The resulting public directory is set as an artifact for GitLab Pages.

LANGUAGE: yaml
CODE:
image: node:16-alpine
cache:
  paths:
    - node_modules/

before_script:
  - npm install hexo-cli -g
  - npm install

pages:
  script:
    - npm run build
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

----------------------------------------

TITLE: Loading Files with Box in JavaScript
DESCRIPTION: Demonstrates how to load and watch files using Box's process() and watch() methods. The process method loads all files once, while watch continues monitoring for changes.

LANGUAGE: javascript
CODE:
box.process().then(function () {
  // ...
});

box.watch().then(function () {
  // You can call box.unwatch() later to stop watching.
});

----------------------------------------

TITLE: Loading Files with Box in JavaScript
DESCRIPTION: Demonstrates how to load and watch files using Box's process() and watch() methods. The process method loads all files once, while watch continues monitoring for changes.

LANGUAGE: javascript
CODE:
box.process().then(function () {
  // ...
});

box.watch().then(function () {
  // You can call box.unwatch() later to stop watching.
});

----------------------------------------

TITLE: Registering a Filter in Hexo
DESCRIPTION: Demonstrates how to register a filter in Hexo, including access to user and theme configurations. The priority parameter determines execution order.

LANGUAGE: javascript
CODE:
hexo.extend.filter.register(type, function() {
  // User configuration
  const { config } = this;
  if (config.external_link.enable) // do something...

  // Theme configuration
  const { config: themeCfg } = this.theme;
  if (themeCfg.fancybox) // do something...

}, priority);

----------------------------------------

TITLE: Hexo Plugin YAML Configuration
DESCRIPTION: Example YAML configuration for publishing a plugin to the Hexo plugin list, including description, link and tags.

LANGUAGE: yaml
CODE:
description: Server module for Hexo.
link: https://github.com/hexojs/hexo-server
tags:
  - official
  - server
  - console

----------------------------------------

TITLE: Registering a Filter in Hexo
DESCRIPTION: Demonstrates how to register a filter in Hexo, including access to user and theme configurations. The priority parameter determines execution order.

LANGUAGE: javascript
CODE:
hexo.extend.filter.register(type, function() {
  // User configuration
  const { config } = this;
  if (config.external_link.enable) // do something...

  // Theme configuration
  const { config: themeCfg } = this.theme;
  if (themeCfg.fancybox) // do something...

}, priority);

----------------------------------------

TITLE: Creating Tag Clouds in Hexo Templates
DESCRIPTION: The tagcloud helper creates a tag cloud with various customization options.

LANGUAGE: EJS
CODE:
<%- tagcloud([tags], [options]) %>

----------------------------------------

TITLE: Configuring Hexo for Embedded Images in Markdown
DESCRIPTION: This YAML configuration enables the feature to embed images in markdown without using asset tags. It requires hexo-renderer-marked 3.1.0 or later and sets up the necessary options in _config.yml.

LANGUAGE: yaml
CODE:
post_asset_folder: true
marked:
  prependRoot: true
  postAsset: true

----------------------------------------

TITLE: Asynchronous File Include Tag
DESCRIPTION: Example of an asynchronous tag that reads and includes file content, demonstrating async tag implementation.

LANGUAGE: javascript
CODE:
var fs = require("hexo-fs");
var pathFn = require("path");

hexo.extend.tag.register(
  "include_code",
  function (args) {
    var filename = args[0];
    var path = pathFn.join(hexo.source_dir, filename);

    return fs.readFile(path).then(function (content) {
      return "<pre><code>" + content + "</code></pre>";
    });
  },
  { async: true },
);

----------------------------------------

TITLE: Basic Injector Registration Syntax
DESCRIPTION: Basic syntax for registering an injector in Hexo to add code snippets to HTML files. Takes entry point, value, and target page as parameters.

LANGUAGE: javascript
CODE:
hexo.extend.injector.register(entry, value, to);

----------------------------------------

TITLE: Filter Execution with Multiple Arguments
DESCRIPTION: Illustrates how to register and execute filters with multiple arguments, demonstrating data modification between filters.

LANGUAGE: javascript
CODE:
hexo.extend.filter.register("test", function (data, arg1, arg2) {
  // data === 'some data'
  // arg1 === 'foo'
  // arg2 === 'bar'

  return "something";
});

hexo.extend.filter.register("test", function (data, arg1, arg2) {
  // data === 'something'
});

hexo.extend.filter.exec("test", "some data", {
  args: ["foo", "bar"],
});

----------------------------------------

TITLE: Fragment Caching in Hexo
DESCRIPTION: Examples of implementing fragment caching in Hexo for performance optimization, showing both direct fragment_cache usage and partial caching.

LANGUAGE: javascript
CODE:
<%- fragment_cache('header', function(){
  return '<header></header>';
});

LANGUAGE: javascript
CODE:
<%- partial('header', {}, {cache: true});

----------------------------------------

TITLE: Inserting Search Form in Hexo Templates
DESCRIPTION: The search_form helper inserts a Google search form.

LANGUAGE: EJS
CODE:
<%- search_form(options) %>

----------------------------------------

TITLE: Inserting Full Date and Time in Hexo Templates
DESCRIPTION: The full_date helper inserts formatted date and time.

LANGUAGE: EJS
CODE:
<%- full_date(date, [format]) %>

----------------------------------------

TITLE: Unregistering and Replacing Hexo Tags
DESCRIPTION: Example showing how to unregister an existing tag plugin and replace it with a custom implementation.

LANGUAGE: javascript
CODE:
const tagFn = (args, content) => {
  content = "something";
  return content;
};

// https://hexo.io/docs/tag-plugins#YouTube
hexo.extend.tag.unregister("youtube");

hexo.extend.tag.register("youtube", tagFn);

----------------------------------------

TITLE: Creating an Archive Page in Hexo
DESCRIPTION: Demonstrates how to create an archive page using a Hexo generator. The generator sets the path, passes all posts as data, and specifies multiple layout options for rendering.

LANGUAGE: javascript
CODE:
hexo.extend.generator.register("archive", function (locals) {
  return {
    path: "archives/index.html",
    data: locals,
    layout: ["archive", "index"],
  };
});

----------------------------------------

TITLE: Configuring GitLab CI for Hexo Deployment
DESCRIPTION: This YAML configuration sets up a GitLab CI pipeline to build and deploy a Hexo site. It uses a Node.js Alpine image, caches node_modules, installs dependencies, and deploys the built site to GitLab Pages.

LANGUAGE: yaml
CODE:
image: node:16-alpine
cache:
  paths:
    - node_modules/

before_script:
  - npm install hexo-cli -g
  - npm install

pages:
  script:
    - npm run build
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

----------------------------------------

TITLE: Running Hexo Tests
DESCRIPTION: Command to run the test suite for Hexo. This should be done before submitting a pull request to ensure all tests pass.

LANGUAGE: bash
CODE:
$ npm test

----------------------------------------

TITLE: Registering a Hexo Helper Function in JavaScript
DESCRIPTION: Demonstrates the basic syntax for registering a new helper function in Hexo. This snippet shows the structure of the helper registration process.

LANGUAGE: javascript
CODE:
hexo.extend.helper.register(name, function () {
  // ...
});

----------------------------------------

TITLE: Caching Fragment Content in Hexo Templates
DESCRIPTION: The fragment_cache helper caches the content of a fragment and serves from cache in subsequent requests.

LANGUAGE: EJS
CODE:
<%- fragment_cache(id, function(){
  return '<header></header>';
}) %>

----------------------------------------

TITLE: Increasing Node.js Heap Memory for Hexo CLI
DESCRIPTION: Shows how to modify the Hexo CLI script to increase the Node.js heap memory size, preventing out of memory errors during generation.

LANGUAGE: bash
CODE:
#!/usr/bin/env node --max_old_space_size=8192

----------------------------------------

TITLE: Modular Tag Implementation
DESCRIPTION: Example of a modular tag implementation using separate files and module exports.

LANGUAGE: javascript
CODE:
hexo.extend.tag.register("foo", require("./lib/foo")(hexo));

LANGUAGE: javascript
CODE:
module.exports = hexo => {
  return function fooFn(args) {
    const [firstArg] = args;

    const { config } = hexo;
    const editor = config.author + firstArg;

    const { config: themeCfg } = hexo.theme;
    if (themeCfg.fancybox) // do something...

    const { title, _content, content } = this;

    return 'foo';
  };
};

----------------------------------------

TITLE: Getting Variables in Hexo Templates - JavaScript
DESCRIPTION: Demonstrates how to retrieve a local variable value from Hexo templates using the locals.get() method.

LANGUAGE: javascript
CODE:
hexo.locals.get("posts");

----------------------------------------

TITLE: Fixing YAML Parsing Errors in Hexo Configuration
DESCRIPTION: Demonstrates how to properly format YAML strings containing colons and ensure correct indentation to avoid parsing errors.

LANGUAGE: yaml
CODE:
last_updated: "Last updated: %s"

last_updated: "Last updated: %s"

----------------------------------------

TITLE: Word Wrapping in Hexo Templates
DESCRIPTION: The word_wrap helper wraps text at a specified length.

LANGUAGE: EJS
CODE:
<%- word_wrap(str, [length]) %>

----------------------------------------

TITLE: Truncating Text in Hexo Templates
DESCRIPTION: The truncate helper truncates text to a specified length with options for separator and omission text.

LANGUAGE: EJS
CODE:
<%- truncate(text, [options]) %>

----------------------------------------

TITLE: Generating Static Files
DESCRIPTION: Generates static website files with options for deployment, watching changes, and parallel processing.

LANGUAGE: bash
CODE:
$ hexo generate

----------------------------------------

TITLE: Creating New Hexo Content
DESCRIPTION: Creates new articles or pages with specified layout and title. Supports custom paths and URL slugs.

LANGUAGE: bash
CODE:
$ hexo new [layout] <title>

LANGUAGE: bash
CODE:
hexo new page --path about/me "About me"

LANGUAGE: bash
CODE:
hexo new page --path about/me

----------------------------------------

TITLE: Vercel Package Configuration
DESCRIPTION: Build script configuration for deploying to Vercel platform.

LANGUAGE: json
CODE:
{
  "scripts": {
    "build": "hexo generate"
  }
}

----------------------------------------

TITLE: Hexo Project Package.json Configuration
DESCRIPTION: Default package.json configuration for a Hexo project, including core dependencies and renderers for EJS, Stylus, and Markdown.

LANGUAGE: json
CODE:
{
  "name": "hexo-site",
  "version": "0.0.0",
  "private": true,
  "hexo": {
    "version": ""
  },
  "dependencies": {
    "hexo": "^7.0.0",
    "hexo-generator-archive": "^2.0.0",
    "hexo-generator-category": "^2.0.0",
    "hexo-generator-index": "^3.0.0",
    "hexo-generator-tag": "^2.0.0",
    "hexo-renderer-ejs": "^2.0.0",
    "hexo-renderer-stylus": "^3.0.0",
    "hexo-renderer-marked": "^6.0.0",
    "hexo-server": "^3.0.0",
    "hexo-theme-landscape": "^1.0.0"
  }
}

----------------------------------------

TITLE: Heroku Deployment Configuration
DESCRIPTION: Configuration settings for deploying to Heroku platform.

LANGUAGE: yaml
CODE:
deploy:
  type: heroku
  repo: <repository url>
  message: [message]

----------------------------------------

TITLE: Inserting Images in Hexo Templates
DESCRIPTION: The image_tag helper inserts an image with various attributes like alt text and dimensions.

LANGUAGE: EJS
CODE:
<%- image_tag(path, [options]) %>

----------------------------------------

TITLE: Hexo Syntax Highlighting Configuration (v7.0.0+)
DESCRIPTION: Updated configuration options for syntax highlighting in Hexo version 7.0.0 and later.

LANGUAGE: yaml
CODE:
syntax_highlighter: highlight.js
highlight:
  auto_detect: false
  line_number: true
  line_threshold: 0
  tab_replace: ""
  exclude_languages:
    - example
  wrap: true
  hljs: false
prismjs:
  preprocess: true
  line_number: true
  line_threshold: 0
  tab_replace: ""

----------------------------------------

TITLE: HTML Output for highlight.js without Wrapping
DESCRIPTION: Example of HTML output for a code block highlighted by highlight.js when both line_number and wrap are disabled.

LANGUAGE: html
CODE:
<pre><code class="yaml">
<span class="comment"># _config.yml</span>
<span class="attr">hexo:</span> <span class="string">hexo</span>
</code></pre>

----------------------------------------

TITLE: Inserting Block Quotes in Hexo
DESCRIPTION: Demonstrates how to use the blockquote tag plugin in Hexo to add quotes with optional author, source, and title information.

LANGUAGE: markdown
CODE:
{% blockquote [author[, source]] [link] [source_link_title] %}
content
{% endblockquote %}

----------------------------------------

TITLE: Setting Custom IP Address
DESCRIPTION: Command to run Hexo server on a specific IP address using the -i flag. Overrides the default 0.0.0.0 binding.

LANGUAGE: bash
CODE:
$ hexo server -i 192.168.1.1

----------------------------------------

TITLE: Inserting Favicon in Hexo Templates
DESCRIPTION: The favicon_tag helper inserts a favicon link.

LANGUAGE: EJS
CODE:
<%- favicon_tag(path) %>

----------------------------------------

TITLE: Inserting XML-Formatted Dates in Hexo Templates
DESCRIPTION: The date_xml helper inserts date in XML format.

LANGUAGE: EJS
CODE:
<%- date_xml(date) %>

----------------------------------------

TITLE: List Helper Functions
DESCRIPTION: Helper functions for generating lists of categories, tags, archives and posts with various formatting options.

LANGUAGE: javascript
CODE:
<%- list_categories([options]) %>
<%- list_tags([options]) %>
<%- list_archives([options]) %>

----------------------------------------

TITLE: Alternate Config Usage with Hexo CLI
DESCRIPTION: Examples of using alternate configuration files with the Hexo CLI

LANGUAGE: bash
CODE:
# use 'custom.yml' in place of '_config.yml'
$ hexo server --config custom.yml

# use 'custom.yml' & 'custom2.json', prioritizing 'custom2.json'
$ hexo server --config custom.yml,custom2.json

----------------------------------------

TITLE: SFTP Deployment Configuration
DESCRIPTION: Configuration settings for deploying via SFTP with support for passwordless authentication.

LANGUAGE: yaml
CODE:
deploy:
  type: sftp
  host: <host>
  user: <user>
  pass: <password>
  remotePath: [remote path]
  port: [port]
  privateKey: [path/to/privateKey]
  passphrase: [passphrase]
  agent: [path/to/agent/socket]

----------------------------------------

TITLE: Getting Output Extension in Hexo
DESCRIPTION: Demonstrates the use of the getOutput method to retrieve the extension of the rendered output for a given file.

LANGUAGE: javascript
CODE:
hexo.render.getOutput("layout.swig"); // html
hexo.render.getOutput("image.png"); // '''

----------------------------------------

TITLE: Implementing Sync EJS Renderer
DESCRIPTION: Example of registering a synchronous EJS renderer that converts .ejs files to HTML. Uses the sync mode flag and returns rendered content directly.

LANGUAGE: javascript
CODE:
var ejs = require("ejs");

hexo.extend.renderer.register(
  "ejs",
  "html",
  function (data, options) {
    options.filename = data.path;
    return ejs.render(data.text, options);
  },
  true,
);

----------------------------------------

TITLE: Inserting Meta Generator Tag in Hexo Templates
DESCRIPTION: The meta_generator helper inserts generator meta tags.

LANGUAGE: EJS
CODE:
<%- meta_generator() %>

----------------------------------------

TITLE: Including Partial Templates in Hexo
DESCRIPTION: The partial helper loads other template files with options for local variables and caching.

LANGUAGE: EJS
CODE:
<%- partial(layout, [locals], [options]) %>

----------------------------------------

TITLE: Accessing Helper in Extensions
DESCRIPTION: Demonstrates how to access and use a registered helper function within other Hexo extensions by binding the correct context.

LANGUAGE: javascript
CODE:
const url_for = hexo.extend.helper.get("url_for").bind(hexo);

----------------------------------------

TITLE: Getting a Path with Hexo Router in JavaScript
DESCRIPTION: Demonstrates how to retrieve a path using the Hexo router's get method and pipe it to a writable stream. This example shows how to save the path data to a specified destination.

LANGUAGE: javascript
CODE:
var data = hexo.route.get("index.html");
var dest = fs.createWriteStream("somewhere");

data.pipe(dest);

----------------------------------------

TITLE: Getting a Path with Hexo Router in JavaScript
DESCRIPTION: Demonstrates how to retrieve a path using the Hexo router's get method and pipe it to a writable stream. This example shows how to save the path data to a specified destination.

LANGUAGE: javascript
CODE:
var data = hexo.route.get("index.html");
var dest = fs.createWriteStream("somewhere");

data.pipe(dest);

----------------------------------------

TITLE: Generating URLs in Hexo
DESCRIPTION: Demonstrates the use of url_for and full_url_for tag plugins in Hexo to generate internal and full URLs with proper encoding.

LANGUAGE: markdown
CODE:
{% url_for text path [relative] %}
{% full_url_for text path %}

----------------------------------------

TITLE: Listing Posts in Hexo
DESCRIPTION: The list_posts helper function inserts a list of posts.

LANGUAGE: JavaScript
CODE:
<%- list_posts([options]) %>

----------------------------------------

TITLE: Checking if Current Page is a Category in Hexo
DESCRIPTION: The is_category helper function checks if the current page is a category page.

LANGUAGE: JavaScript
CODE:
<%- is_category() %>

----------------------------------------

TITLE: Starting Hexo Server
DESCRIPTION: Basic command to start the Hexo development server. Runs on http://localhost:4000 by default with automatic file watching and updates.

LANGUAGE: bash
CODE:
$ hexo server

----------------------------------------

TITLE: Setting a Scaffold in Hexo (JavaScript)
DESCRIPTION: Creates or updates a scaffold with the specified name and content using the Hexo API. This function allows for the creation or modification of scaffold templates.

LANGUAGE: javascript
CODE:
hexo.scaffold.set(name, content);

----------------------------------------

TITLE: Creating a Pull Quote Tag Plugin with End Tags
DESCRIPTION: Shows how to implement a tag plugin that uses end tags to wrap content. This example creates a pull quote with optional CSS classes specified as arguments.

LANGUAGE: javascript
CODE:
hexo.extend.tag.register(
  "pullquote",
  function (args, content) {
    var className = args.join(" ");
    return (
      '<blockquote class="pullquote' +
      className +
      '">' +
      content +
      "</blockquote>"
    );
  },
  { ends: true },
);

----------------------------------------

TITLE: Checking if Current Page is a Page in Hexo
DESCRIPTION: The is_page helper function checks if the current page is a page.

LANGUAGE: JavaScript
CODE:
<%- is_page() %>

----------------------------------------

TITLE: Formatting Dates in Hexo Templates
DESCRIPTION: The date helper inserts formatted date. It accepts various date formats and customization options.

LANGUAGE: EJS
CODE:
<%- date(date, [format]) %>

----------------------------------------

TITLE: Defining Multiple Category Hierarchies in Hexo Front-matter
DESCRIPTION: Example of creating multiple independent category hierarchies for a single post in Hexo using YAML Front-matter. This approach allows for more complex categorization of content.

LANGUAGE: yaml
CODE:
categories:
  - [Sports, Baseball]
  - [MLB, American League, Boston Red Sox]
  - [MLB, American League, New York Yankees]
  - Rivalries

----------------------------------------

TITLE: Adding Code Blocks in Hexo
DESCRIPTION: Shows how to use the codeblock tag plugin in Hexo to insert code snippets with various options like language specification, line numbers, and highlighting.

LANGUAGE: markdown
CODE:
{% codeblock [title] [lang:language] [url] [link text] [additional options] %}
code snippet
{% endcodeblock %}

----------------------------------------

TITLE: Removing a Scaffold in Hexo (JavaScript)
DESCRIPTION: Deletes a scaffold by name using the Hexo API. This function is used to remove an existing scaffold template from the Hexo project.

LANGUAGE: javascript
CODE:
hexo.scaffold.remove(name);

----------------------------------------

TITLE: Template Locals Filter Example
DESCRIPTION: Shows how to use the 'template_locals' filter to add custom variables to template rendering, in this case adding the current timestamp.

LANGUAGE: javascript
CODE:
hexo.extend.filter.register("template_locals", function (locals) {
  locals.now = Date.now();
  return locals;
});

----------------------------------------

TITLE: Inserting Images in Hexo
DESCRIPTION: The image_tag helper function inserts an image tag with various options.

LANGUAGE: JavaScript
CODE:
<%- image_tag(path, [options]) %>

----------------------------------------

TITLE: Inserting Links in Hexo
DESCRIPTION: The link_to helper function inserts a link with various options.

LANGUAGE: JavaScript
CODE:
<%- link_to(path, [text], [options]) %>

----------------------------------------

TITLE: Registering Basic Hexo Renderer
DESCRIPTION: Basic syntax for registering a new renderer in Hexo. Shows the fundamental structure with name, output extension, and rendering function parameters.

LANGUAGE: javascript
CODE:
hexo.extend.renderer.register(
  name,
  output,
  function (data, options) {
    // ...
  },
  sync,
);

----------------------------------------

TITLE: Running Hexo Server in Windows Subsystem for Linux
DESCRIPTION: Demonstrates how to run the Hexo server in WSL environments where live updating is not supported due to filesystem watcher limitations.

LANGUAGE: sh
CODE:
$ hexo generate
$ hexo server -s

----------------------------------------

TITLE: Include/Exclude Files Configuration in YAML
DESCRIPTION: Comprehensive example of including and excluding files/folders using glob patterns

LANGUAGE: yaml
CODE:
# Include/Exclude Files/Folders
include:
  - ".nojekyll"
  # Include 'source/css/_typing.css'.
  - "css/_typing.css"
  # Include any file in 'source/_css/'.
  - "_css/*"
  # Include any file and subfolder in 'source/_css/'.
  - "_css/**/*"

exclude:
  # Exclude 'source/js/test.js'.
  - "js/test.js"
  # Exclude any file in 'source/js/'.
  - "js/*"
  # Exclude any file and subfolder in 'source/js/'.
  - "js/**/*"
  # Exclude any file with filename that starts with 'test' in 'source/js/'.
  - "js/test*"
  # Exclude any file with filename that starts with 'test' in 'source/js/' and its subfolders.
  - "js/**/test*"

ignore:
  # Ignore any folder named 'foo'.
  - "**/foo"
  # Ignore 'foo' folder in 'themes/' only.
  - "**/themes/*/foo"
  # Same as above, but applies to every subfolders of 'themes/'.
  - "**/themes/**/foo"

----------------------------------------

TITLE: Setting a View in Hexo Theme
DESCRIPTION: Sets a view in the Hexo theme object using a specified path and data.

LANGUAGE: javascript
CODE:
hexo.theme.setView(path, data);

----------------------------------------

TITLE: Setting a View in Hexo Theme
DESCRIPTION: Sets a view in the Hexo theme object using a specified path and data.

LANGUAGE: javascript
CODE:
hexo.theme.setView(path, data);

----------------------------------------

TITLE: Creating a YAML Data File for Menu in Hexo
DESCRIPTION: This snippet shows how to create a YAML data file named menu.yml in the source/_data folder of a Hexo project. It defines a simple menu structure with page names and their corresponding URLs.

LANGUAGE: yaml
CODE:
Home: /
Gallery: /gallery/
Archives: /archives/

----------------------------------------

TITLE: Rendering String with Specified Engine in Hexo
DESCRIPTION: The render helper function renders a string with a specified engine.

LANGUAGE: JavaScript
CODE:
<%- render(str, engine, [options]) %>

----------------------------------------

TITLE: Registering a Processor in Hexo (JavaScript)
DESCRIPTION: This snippet shows how to register a processor in Hexo. The processor is used to process files in the 'source' folder. It takes a rule and a function as parameters. The function receives a 'file' object to process.

LANGUAGE: javascript
CODE:
hexo.extend.processor.register(rule, function (file) {
  // ...
});

----------------------------------------

TITLE: Installing RSS Migrator Plugin for Hexo
DESCRIPTION: This command installs the hexo-migrator-rss plugin, which is required for migrating content from RSS feeds to Hexo.

LANGUAGE: bash
CODE:
$ npm install hexo-migrator-rss --save

----------------------------------------

TITLE: Before Post Render Filter in Hexo
DESCRIPTION: Example of a filter that runs before a post is rendered, transforming the post title to lowercase.

LANGUAGE: javascript
CODE:
hexo.extend.filter.register("before_post_render", function (data) {
  data.title = data.title.toLowerCase();
  return data;
});

----------------------------------------

TITLE: Setting a Path with Hexo Router in JavaScript
DESCRIPTION: Shows various ways to set a path using the Hexo router's set method. Examples include using a string, Buffer, Promise-based function, and callback function.

LANGUAGE: javascript
CODE:
// String
hexo.route.set("index.html", "index");

// Buffer
hexo.route.set("index.html", new Buffer("index"));

// Function (Promise)
hexo.route.set("index.html", function () {
  return new Promise(function (resolve, reject) {
    resolve("index");
  });
});

// Function (Callback)
hexo.route.set("index.html", function (callback) {
  callback(null, "index");
});

----------------------------------------

TITLE: Registering a Processor in Hexo (JavaScript)
DESCRIPTION: This snippet shows how to register a processor in Hexo. The processor is used to process files in the 'source' folder. It takes a rule and a function as parameters. The function receives a 'file' object to process.

LANGUAGE: javascript
CODE:
hexo.extend.processor.register(rule, function (file) {
  // ...
});

----------------------------------------

TITLE: Formatting Time in Hexo
DESCRIPTION: The time helper function inserts formatted time. It supports UNIX time, ISO string, Date object, or Moment.js object.

LANGUAGE: JavaScript
CODE:
<%- time(date, [format]) %>

----------------------------------------

TITLE: Stripping HTML Tags in Hexo
DESCRIPTION: The strip_html helper function removes HTML tags from a string.

LANGUAGE: JavaScript
CODE:
<%- strip_html(string) %>

----------------------------------------

TITLE: Loading JavaScript Files in Hexo
DESCRIPTION: The js helper function loads JavaScript files. It can handle string, array, or object inputs.

LANGUAGE: JavaScript
CODE:
<%- js(path, ...) %>

----------------------------------------

TITLE: Cleaning Generated Files
DESCRIPTION: Cleans cache and generated files from the project.

LANGUAGE: bash
CODE:
$ hexo clean

----------------------------------------

TITLE: Getting a Scaffold in Hexo (JavaScript)
DESCRIPTION: Retrieves a scaffold by name using the Hexo API. This function is used to fetch the content of an existing scaffold template.

LANGUAGE: javascript
CODE:
hexo.scaffold.get(name);

----------------------------------------

TITLE: Template Locals Filter in Hexo
DESCRIPTION: Example of modifying local variables in templates, adding the current time to the template's local variables.

LANGUAGE: javascript
CODE:
hexo.extend.filter.register("template_locals", function (locals) {
  locals.now = Date.now();
  return locals;
});

----------------------------------------

TITLE: Getting a Scaffold in Hexo (JavaScript)
DESCRIPTION: Retrieves a scaffold by name using the Hexo API. This function is used to fetch the content of an existing scaffold template.

LANGUAGE: javascript
CODE:
hexo.scaffold.get(name);

----------------------------------------

TITLE: Using URL Helper in Custom Helper
DESCRIPTION: Shows how to use an existing helper (url_for) within a custom helper implementation by accessing the shared context.

LANGUAGE: javascript
CODE:
hexo.extend.helper.register("lorem", function (path) {
  return '<script src="' + this.url_for(path) + '"></script>';
});

----------------------------------------

TITLE: Escaping HTML in Hexo
DESCRIPTION: The escape_html helper function escapes HTML entities in a string.

LANGUAGE: JavaScript
CODE:
<%- escape_html(str) %>

----------------------------------------

TITLE: Removing Hexo Scaffold
DESCRIPTION: Deletes an existing scaffold template from Hexo by its name. The operation permanently removes the specified scaffold.

LANGUAGE: javascript
CODE:
hexo.scaffold.remove(name);

----------------------------------------

TITLE: Migrating Content
DESCRIPTION: Migrates content from other blog systems with specified type.

LANGUAGE: bash
CODE:
$ hexo migrate <type>

----------------------------------------

TITLE: Registering a Hexo Generator
DESCRIPTION: Demonstrates how to register a new generator in Hexo. The function receives a 'locals' argument containing site variables, which should be used to access website data instead of querying the database directly.

LANGUAGE: javascript
CODE:
hexo.extend.generator.register(name, function (locals) {
  // ...
});

----------------------------------------

TITLE: Rendering a Post in Hexo using JavaScript
DESCRIPTION: This function renders a post in Hexo. It takes an optional source file path and a data object as arguments. The data must contain a 'content' attribute. The rendering process includes executing filters, rendering with Markdown or other renderers, and rendering with Nunjucks.

LANGUAGE: js
CODE:
hexo.post.render(source, data);

----------------------------------------

TITLE: Registering Box Processors in JavaScript
DESCRIPTION: Example of adding a processor to Box using the addProcessor method, showing how to handle files matching a specific path pattern.

LANGUAGE: javascript
CODE:
box.addProcessor("posts/:id", function (file) {
  //
});

----------------------------------------

TITLE: Registering a Hexo Migrator Extension in JavaScript
DESCRIPTION: This snippet demonstrates how to register a new migrator extension in Hexo. The function takes a name and a callback function as parameters. The callback function receives an 'args' argument containing user input from the terminal.

LANGUAGE: javascript
CODE:
hexo.extend.migrator.register(name, function (args) {
  // ...
});

----------------------------------------

TITLE: Setting Hexo Scaffold Content
DESCRIPTION: Creates or updates a scaffold template with the specified content. Requires both the scaffold name and the content to be set.

LANGUAGE: javascript
CODE:
hexo.scaffold.set(name, content);

----------------------------------------

TITLE: Invalidating Local Variables Cache in Hexo (JavaScript)
DESCRIPTION: Shows how to invalidate the cache for local variables in Hexo.

LANGUAGE: javascript
CODE:
hexo.locals.invalidate();

----------------------------------------

TITLE: Running in Special Modes
DESCRIPTION: Various special execution modes including safe mode, debug mode, and silent mode.

LANGUAGE: bash
CODE:
$ hexo --safe

LANGUAGE: bash
CODE:
$ hexo --debug

LANGUAGE: bash
CODE:
$ hexo --silent

----------------------------------------

TITLE: Updating Routes in Hexo Generator
DESCRIPTION: Shows how to update routes in a Hexo generator. The function can return either a single object or an array of objects, each defining a path and its corresponding data.

LANGUAGE: javascript
CODE:
hexo.extend.generator.register("test", function (locals) {
  // Object
  return {
    path: "foo",
    data: "foo",
  };

  // Array
  return [
    { path: "foo", data: "foo" },
    { path: "bar", data: "bar" },
  ];
});

----------------------------------------

TITLE: Basic Hexo Deploy Command
DESCRIPTION: The basic command to deploy a Hexo site after configuration.

LANGUAGE: bash
CODE:
$ hexo deploy

----------------------------------------

TITLE: Modular Injector Configuration
DESCRIPTION: Example of modular configuration using separate files for injector implementation.

LANGUAGE: javascript
CODE:
/* global hexo */

hexo.extend.injector.register("head_end", require("./lib/inject").bind(hexo));

LANGUAGE: javascript
CODE:
module.exports = function () {
  const css = this.extend.helper.get("css");
  const { cssPath } = this.config.fooPlugin;
  return css(cssPath);
};

----------------------------------------

TITLE: Creating a Paginated Archive Page in Hexo
DESCRIPTION: Shows how to create a paginated archive page using the hexo-pagination plugin. It sets up pagination for the archives route with 10 posts per page.

LANGUAGE: javascript
CODE:
var pagination = require("hexo-pagination");

hexo.extend.generator.register("archive", function (locals) {
  // hexo-pagination makes an index.html for the /archives route
  return pagination("archives", locals.posts, {
    perPage: 10,
    layout: ["archive", "index"],
    data: {},
  });
});

----------------------------------------

TITLE: Retrieving All Local Variables in Hexo (JavaScript)
DESCRIPTION: Demonstrates how to get all local variables in Hexo as an object.

LANGUAGE: javascript
CODE:
hexo.locals.toObject();

----------------------------------------

TITLE: Using Custom Config Files
DESCRIPTION: Specifies custom configuration files and working directory.

LANGUAGE: bash
CODE:
$ hexo --config custom.yml

LANGUAGE: bash
CODE:
$ hexo --config custom.yml,custom2.json

LANGUAGE: bash
CODE:
$ hexo --cwd /path/to/cwd

----------------------------------------

TITLE: Accessing User Configuration - Module Pattern
DESCRIPTION: Example of accessing user configuration using a separate module with binding.

LANGUAGE: javascript
CODE:
/* global hexo */

hexo.extend.injector.register("head_end", require("./lib/inject").bind(hexo));

LANGUAGE: javascript
CODE:
module.exports = function () {
  const css = this.extend.helper.get("css");
  const { cssPath } = this.config.fooPlugin;
  return css(cssPath);
};

----------------------------------------

TITLE: Increasing File Descriptor Limit in Unix Systems
DESCRIPTION: Shows how to increase the maximum number of open files allowed by the system to prevent EMFILE errors when generating a large number of files.

LANGUAGE: bash
CODE:
$ ulimit -n 10000

----------------------------------------

TITLE: Disabling Syntax Highlighting in Hexo (pre-v7.0.0)
DESCRIPTION: YAML configuration to disable both highlight.js and PrismJS in Hexo versions before 7.0.0.

LANGUAGE: yaml
CODE:
# _config.yml
highlight:
  enable: false
prismjs:
  enable: false

----------------------------------------

TITLE: Removing a Path with Hexo Router in JavaScript
DESCRIPTION: Shows how to remove a path using the Hexo router's remove method.

LANGUAGE: javascript
CODE:
hexo.route.remove("index.html");

----------------------------------------

TITLE: Setting Path Modification Status with Hexo Router in JavaScript
DESCRIPTION: Demonstrates how to set a path with a boolean indicating whether it has been modified. This can optimize file generation by ignoring unmodified files.

LANGUAGE: javascript
CODE:
hexo.route.set("index.html", {
  data: "index",
  modified: false
});

// hexo.route.isModified('index.html') => false

----------------------------------------

TITLE: JavaScript Minification using After_render Filter
DESCRIPTION: Implements a JavaScript minifier using Hexo's after_render filters with UglifyJS.

LANGUAGE: javascript
CODE:
var UglifyJS = require("uglify-js");

hexo.extend.filter.register("after_render:js", function (str, data) {
  var result = UglifyJS.minify(str);
  return result.code;
});

----------------------------------------

TITLE: Accessing User Configuration - Factory Pattern
DESCRIPTION: Example of accessing user configuration using a factory pattern with explicit hexo instance passing.

LANGUAGE: javascript
CODE:
/* global hexo */

hexo.extend.injector.register("head_end", require("./lib/inject")(hexo));

LANGUAGE: javascript
CODE:
module.exports = (hexo) => () => {
  const css = hexo.extend.helper.get("css").bind(hexo);
  const { cssPath } = hexo.config.fooPlugin;
  return css(cssPath);
};

----------------------------------------

TITLE: Installing WordPress Migrator Plugin for Hexo
DESCRIPTION: This command installs the hexo-migrator-wordpress plugin, which is necessary for migrating content from WordPress to Hexo.

LANGUAGE: bash
CODE:
$ npm install hexo-migrator-wordpress --save

----------------------------------------

TITLE: Adding File Processors in Box
DESCRIPTION: Demonstrates how to add a processor to handle files matching a specific path pattern. Processors receive file information including source path, relative path, type, and matched parameters.

LANGUAGE: javascript
CODE:
box.addProcessor("posts/:id", function (file) {
  //
});

----------------------------------------

TITLE: Setting Modified Flag in Hexo Router
DESCRIPTION: Demonstrates how to set a path with a modified flag to optimize file generation by skipping unmodified files.

LANGUAGE: javascript
CODE:
hexo.route.set("index.html", {
  data: "index",
  modified: false
});

// hexo.route.isModified('index.html') => false

----------------------------------------

TITLE: Checking File Renderability in Hexo
DESCRIPTION: Demonstrates how to check if a file is renderable using isRenderable method.

LANGUAGE: javascript
CODE:
hexo.render.isRenderable("layout.swig"); // true
hexo.render.isRenderable("image.png"); // false

----------------------------------------

TITLE: Rendering Post Content in Hexo using JavaScript
DESCRIPTION: This snippet illustrates the process of rendering post content in Hexo. It takes an optional source file path and data as arguments. The function executes several steps including running filters, rendering with Markdown or other renderers, and processing with Nunjucks.

LANGUAGE: javascript
CODE:
hexo.post.render(source, data);

----------------------------------------

TITLE: Category Mapping Configuration in YAML
DESCRIPTION: Example showing how to override category slugs with custom mappings

LANGUAGE: yaml
CODE:
category_map:
  "yesterday's thoughts": yesterdays-thoughts
  "C++": c-plus-plus

----------------------------------------

TITLE: Installing Joomla Migrator Plugin for Hexo
DESCRIPTION: This command installs the hexo-migrator-joomla plugin, which is required for migrating content from Joomla to Hexo.

LANGUAGE: bash
CODE:
$ npm install hexo-migrator-joomla --save

----------------------------------------

TITLE: Creating Hexo Theme Configuration YAML
DESCRIPTION: This YAML snippet shows an example configuration for publishing a new Hexo theme, including description, links, preview URL, and tags.

LANGUAGE: yaml
CODE:
description: A brand new default theme for Hexo.
link: https://github.com/hexojs/hexo-theme-landscape
preview: http://hexo.io/hexo-theme-landscape
tags:
  - official
  - responsive
  - widget
  - two_column
  - one_column

----------------------------------------

TITLE: Getting All Variables in Hexo Templates - JavaScript
DESCRIPTION: Shows how to retrieve all local variables as an object using the locals.toObject() method.

LANGUAGE: javascript
CODE:
hexo.locals.toObject();

----------------------------------------

TITLE: Helper Usage in Templates
DESCRIPTION: Demonstrates how to use the registered js helper in template files to generate script tags.

LANGUAGE: javascript
CODE:
<%- js('script.js') %>
// <script src="script.js"></script>

----------------------------------------

TITLE: Removing Variables in Hexo Templates - JavaScript
DESCRIPTION: Demonstrates how to remove a local variable from Hexo templates using the locals.remove() method.

LANGUAGE: javascript
CODE:
hexo.locals.remove("posts");

----------------------------------------

TITLE: Removing a View from Hexo Theme
DESCRIPTION: Removes a view from the Hexo theme object using a specified path.

LANGUAGE: javascript
CODE:
hexo.theme.removeView(path);

----------------------------------------

TITLE: Getting a View in Hexo Theme
DESCRIPTION: Retrieves a view from the Hexo theme using the specified path.

LANGUAGE: javascript
CODE:
hexo.theme.getView(path);

----------------------------------------

TITLE: Helper Usage in Templates
DESCRIPTION: Demonstrates how to use the registered js helper in template files to generate script tags.

LANGUAGE: javascript
CODE:
<%- js('script.js') %>
// <script src="script.js"></script>

----------------------------------------

TITLE: Direct User Configuration Access
DESCRIPTION: Example of accessing user configuration directly within the injector function.

LANGUAGE: javascript
CODE:
const css = hexo.extend.helper.get("css").bind(hexo);

hexo.extend.injector.register("head_end", () => {
  const { cssPath } = hexo.config.fooPlugin;
  return css(cssPath);
});

----------------------------------------

TITLE: Post Front Matter Example in YAML
DESCRIPTION: Sample front matter configuration for a blog post showing title, date and category settings.

LANGUAGE: yaml
CODE:
title: Hello World
date: 2013-07-14 17:01:34
categories:
  - foo
  - bar

----------------------------------------

TITLE: Hexo Variable Documentation Table Structure
DESCRIPTION: Markdown tables documenting the different types of variables available in Hexo templates, including their descriptions and data types.

LANGUAGE: markdown
CODE:
| Variable | Description | Type |
| -------- | ----------- | ---- |
| `site` | Sitewide information. | `object`; see [Site Variables] |
| `page` | Page specific information and custom variables set in front-matter. | `object`; see [Page Variables] |
| `config` | Site configuration. | `object` (your site's _config file) |
| `theme` | Theme configuration. Inherits from site configuration. | `object` (your theme's _config file) |
| `path` | Path of current page | `string` |
| `url` | Full URL of current page | `string` |
| `env` | Environment variables | ??? |

----------------------------------------

TITLE: Listing Routes with Hexo Router in JavaScript
DESCRIPTION: Demonstrates how to get a list of all routes using the Hexo router's list method.

LANGUAGE: javascript
CODE:
hexo.route.list();

----------------------------------------

TITLE: Initializing Hexo Instance in JavaScript
DESCRIPTION: Creates a new Hexo instance with the current working directory and initializes it. This snippet demonstrates how to set up a basic Hexo environment programmatically.

LANGUAGE: javascript
CODE:
var Hexo = require("hexo");
var hexo = new Hexo(process.cwd(), {});

hexo.init().then(function () {
  // ...
});

----------------------------------------

TITLE: Running in Static Mode
DESCRIPTION: Command to run Hexo server in static mode using the -s flag. Only serves files from public folder without file watching.

LANGUAGE: bash
CODE:
$ hexo server -s

----------------------------------------

TITLE: Rendering Files
DESCRIPTION: Renders specified files with custom output destination option.

LANGUAGE: bash
CODE:
$ hexo render <file1> [file2] ...

----------------------------------------

TITLE: Multi-language Post Configuration in YAML
DESCRIPTION: Configuration settings for enabling multi-language support in Hexo posts.

LANGUAGE: yaml
CODE:
new_post_name: :lang/:title.md
permalink: :lang/:title/

----------------------------------------

TITLE: Including Code Snippets in Hexo
DESCRIPTION: Demonstrates how to use the include_code tag plugin in Hexo to insert code snippets from external files with options for specifying language and line ranges.

LANGUAGE: markdown
CODE:
{% include_code [title] [lang:language] [from:line] [to:line] path/to/file %}

----------------------------------------

TITLE: Inserting Images in Hexo
DESCRIPTION: Demonstrates the use of the img tag plugin in Hexo to embed images with specified size, title, and alt text.

LANGUAGE: markdown
CODE:
{% img [class names] /path/to/image [width] [height] '"title text" "alt text"' %}

----------------------------------------

TITLE: Formatting a Path with Hexo Router in JavaScript
DESCRIPTION: Shows how to use the Hexo router's format method to transform a string into a valid path.

LANGUAGE: javascript
CODE:
hexo.route.format("archives/");
// archives/index.html

----------------------------------------

TITLE: Executing Hexo Console Commands Programmatically
DESCRIPTION: Shows how to call Hexo console commands explicitly using the call method. Examples include generating static files and listing posts.

LANGUAGE: javascript
CODE:
hexo.call("generate", {}).then(function () {
  // ...
});

LANGUAGE: javascript
CODE:
hexo.call("list", { _: ["post"] }).then(function () {
  // ...
});

----------------------------------------

TITLE: Inserting Paginator in Hexo
DESCRIPTION: The paginator helper function inserts a paginator.

LANGUAGE: JavaScript
CODE:
<%- paginator(options) %>

----------------------------------------

TITLE: Creating Multi-language Post in Bash
DESCRIPTION: Command line example for creating a new post with language specification using Hexo CLI.

LANGUAGE: bash
CODE:
$ hexo new "Hello World" --lang tw
# => source/_posts/tw/Hello-World.md

----------------------------------------

TITLE: Simple YouTube Embed Tag Implementation
DESCRIPTION: Implementation of a tag plugin that embeds YouTube videos using an iframe, demonstrating a basic tag without end tags.

LANGUAGE: javascript
CODE:
hexo.extend.tag.register("youtube", function (args) {
  var id = args[0];
  return (
    '<div class="video-container"><iframe width="560" height="315" src="http://www.youtube.com/embed/' +
    id +
    '" frameborder="0" allowfullscreen></iframe></div>'
  );
});

----------------------------------------

TITLE: Invalidating Cache in Hexo Templates - JavaScript
DESCRIPTION: Demonstrates how to invalidate the local variables cache using the locals.invalidate() method.

LANGUAGE: javascript
CODE:
hexo.locals.invalidate();

----------------------------------------

TITLE: Basic Hexo Injector Syntax
DESCRIPTION: Core syntax for registering an injector in Hexo with entry point, value and target specification.

LANGUAGE: javascript
CODE:
hexo.extend.injector.register(entry, value, to);

----------------------------------------

TITLE: Rendering Markdown in Hexo
DESCRIPTION: The markdown helper function renders a string with Markdown.

LANGUAGE: JavaScript
CODE:
<%- markdown(str) %>

----------------------------------------

TITLE: Stripping HTML Tags in Hexo Templates
DESCRIPTION: The strip_html helper sanitizes all HTML tags in a string.

LANGUAGE: EJS
CODE:
<%- strip_html(string) %>

----------------------------------------

TITLE: Rendering a View in Hexo Theme
DESCRIPTION: Demonstrates how to render a view asynchronously with options. The render method processes the template, loads helpers, and handles layouts if present.

LANGUAGE: javascript
CODE:
var view = hexo.theme.getView("layout.swig");

view.render({ foo: 1, bar: 2 }).then(function (result) {
  // ...
});

----------------------------------------

TITLE: Server Middleware Filter Example
DESCRIPTION: Demonstrates how to use the 'server_middleware' filter to add custom middleware to the Hexo server, in this case adding a custom header.

LANGUAGE: javascript
CODE:
hexo.extend.filter.register("server_middleware", function (app) {
  app.use(function (req, res, next) {
    res.setHeader("X-Powered-By", "Hexo");
    next();
  });
});

----------------------------------------

TITLE: JavaScript Script Tag Helper Implementation
DESCRIPTION: Example of a helper function that generates HTML script tags. Takes a path parameter and returns a formatted script tag string.

LANGUAGE: javascript
CODE:
hexo.extend.helper.register("js", function (path) {
  return '<script src="' + path + '"></script>';
});

----------------------------------------

TITLE: Inserting Pagination in Hexo Templates
DESCRIPTION: The paginator helper inserts pagination with various customization options.

LANGUAGE: EJS
CODE:
<%- paginator(options) %>

----------------------------------------

TITLE: Generating Table of Contents in Hexo
DESCRIPTION: The toc helper function parses all heading tags in the content and inserts a table of contents.

LANGUAGE: JavaScript
CODE:
<%- toc(str, [options]) %>

----------------------------------------

TITLE: Categories Example in YAML
DESCRIPTION: Demonstrates how to set simple categories and tags for a post using YAML format.

LANGUAGE: yaml
CODE:
categories:
  - Sports
  - Baseball
tags:
  - Injury
  - Fight
  - Shocking

----------------------------------------

TITLE: Titlecasing Strings in Hexo Templates
DESCRIPTION: The titlecase helper properly capitalizes a string for use as a title.

LANGUAGE: EJS
CODE:
<%- titlecase(string) %>

----------------------------------------

TITLE: Unregistering Filters in Hexo
DESCRIPTION: Demonstrates how to unregister filters in Hexo, including examples for named functions and CommonJS modules.

LANGUAGE: javascript
CODE:
// Unregister a filter which is registered with named function

const filterFn = (data) => {
  data = "something";
  return data;
};
hexo.extend.filter.register("example", filterFn);

hexo.extend.filter.unregister("example", filterFn);

// Unregister a filter which is registered with commonjs module

hexo.extend.filter.register("example", require("path/to/filter"));

hexo.extend.filter.unregister("example", require("path/to/filter"));

----------------------------------------

TITLE: Escaping HTML in Hexo Templates
DESCRIPTION: The escape_html helper escapes HTML entities in a string.

LANGUAGE: EJS
CODE:
<%- escape_html(str) %>

----------------------------------------

TITLE: Listing Archives in Hexo Templates
DESCRIPTION: The list_archives helper inserts a list of archives with various customization options.

LANGUAGE: EJS
CODE:
<%- list_archives([options]) %>

----------------------------------------

TITLE: Inserting Search Form in Hexo
DESCRIPTION: The search_form helper function inserts a Google search form.

LANGUAGE: JavaScript
CODE:
<%- search_form(options) %>

----------------------------------------

TITLE: Creating a Feature Branch in Git
DESCRIPTION: Command to create a new feature branch for Hexo development.

LANGUAGE: bash
CODE:
$ git checkout -b new_feature

----------------------------------------

TITLE: Checking Home Page in Hexo Templates
DESCRIPTION: The is_home helper checks if the current page is the home page.

LANGUAGE: EJS
CODE:
<%- is_home() %>

----------------------------------------

TITLE: Defining Options for a Hexo Console Command
DESCRIPTION: Demonstrates how to specify additional options for a console command using the 'options' property. Each option includes a name (with short and long forms) and a description.

LANGUAGE: javascript
CODE:
{
  options: [{ name: "-r, --replace", desc: "Replace existing files" }];
}

----------------------------------------

TITLE: Specifying Arguments for a Hexo Console Command
DESCRIPTION: Illustrates how to define and describe the arguments for a console command using the 'arguments' option. Each argument is given a name and description.

LANGUAGE: javascript
CODE:
{
  arguments: [
    { name: "layout", desc: "Post layout" },
    { name: "title", desc: "Post title" },
  ];
}

----------------------------------------

TITLE: Inserting Feed Link in Hexo Templates
DESCRIPTION: The feed_tag helper inserts a feed link with options for title and type.

LANGUAGE: EJS
CODE:
<%- feed_tag(path, [options]) %>

----------------------------------------

TITLE: Listing Posts in Hexo Templates
DESCRIPTION: The list_posts helper inserts a list of posts with various customization options.

LANGUAGE: EJS
CODE:
<%- list_posts([options]) %>

----------------------------------------

TITLE: Inserting Open Graph Data in Hexo
DESCRIPTION: The open_graph helper function inserts Open Graph data.

LANGUAGE: JavaScript
CODE:
<%- open_graph([options]) %>

----------------------------------------

TITLE: Hexo Deployment Configuration
DESCRIPTION: Configuration settings for the Hexo _config.yml file to enable Git-based deployment to GitHub Pages.

LANGUAGE: yaml
CODE:
deploy:
  type: git
  repo: https://github.com/<username>/<project>
  # example, https://github.com/hexojs/hexojs.github.io
  branch: gh-pages

----------------------------------------

TITLE: Checking Category Page in Hexo Templates
DESCRIPTION: The is_category helper checks if the current page is a category page, optionally for a specific category.

LANGUAGE: EJS
CODE:
<%- is_category() %>
<%- is_category('hobby') %>

----------------------------------------

TITLE: Displaying Version
DESCRIPTION: Shows Hexo version information.

LANGUAGE: bash
CODE:
$ hexo version

----------------------------------------

TITLE: Checking Post Page in Hexo Templates
DESCRIPTION: The is_post helper checks if the current page is a post.

LANGUAGE: EJS
CODE:
<%- is_post() %>

----------------------------------------

TITLE: Listing Tags in Hexo Templates
DESCRIPTION: The list_tags helper inserts a list of all tags with various customization options.

LANGUAGE: EJS
CODE:
<%- list_tags([options]) %>

----------------------------------------

TITLE: Checking if Current Page is a Post in Hexo
DESCRIPTION: The is_post helper function checks if the current page is a post.

LANGUAGE: JavaScript
CODE:
<%- is_post() %>

----------------------------------------

TITLE: Git Push Command for Main Branch
DESCRIPTION: Command to push the main branch to GitHub repository for initial setup of Hexo site deployment.

LANGUAGE: bash
CODE:
$ git push -u origin main

----------------------------------------

TITLE: Starting Hexo Documentation Server
DESCRIPTION: Command to start the Hexo server for live previewing of documentation changes. This is useful when editing the documentation.

LANGUAGE: bash
CODE:
$ hexo server

----------------------------------------

TITLE: Starting Local Server
DESCRIPTION: Starts a local development server with customizable port and logging options.

LANGUAGE: bash
CODE:
$ hexo server

----------------------------------------

TITLE: Configuring Syntax Highlighter
DESCRIPTION: YAML configuration to specify the syntax highlighting engine to be used in Hexo 7.0.0. Options include highlight.js, prismjs, or empty value.

LANGUAGE: yaml
CODE:
syntax_highlighter: highlight.js # highlight.js | prismjs | <empty>

----------------------------------------

TITLE: Inserting Time in Hexo Templates
DESCRIPTION: The time helper inserts formatted time.

LANGUAGE: EJS
CODE:
<%- time(date, [format]) %>

----------------------------------------

TITLE: Configuring PrismJS in Hexo (v7.0.0+)
DESCRIPTION: YAML configuration for enabling and customizing PrismJS in Hexo versions 7.0.0 and above.

LANGUAGE: yaml
CODE:
# _config.yml
syntax_highlighter: prismjs
prismjs:
  preprocess: true
  line_number: true
  line_threshold: 0
  tab_replace: ""

----------------------------------------

TITLE: Formatting Dates in Hexo
DESCRIPTION: The date helper function inserts formatted date. It supports UNIX time, ISO string, Date object, or Moment.js object.

LANGUAGE: JavaScript
CODE:
<%- date(date, [format]) %>

----------------------------------------

TITLE: Formatting Numbers in Hexo
DESCRIPTION: The number_format helper function formats a number.

LANGUAGE: JavaScript
CODE:
<%- number_format(number, [options]) %>

----------------------------------------

TITLE: Running Hexo Server on a Different Port
DESCRIPTION: Demonstrates how to start the Hexo server on a specific port to avoid conflicts with other applications.

LANGUAGE: bash
CODE:
$ hexo server -p 5000

----------------------------------------

TITLE: Installing hexo-tag-embed Package
DESCRIPTION: Command to install the hexo-tag-embed package which provides support for previously built-in tags like gist, youtube, jsfiddle, and vimeo that were removed in Hexo 7.0.0

LANGUAGE: sh
CODE:
$ npm i hexo-tag-embed

----------------------------------------

TITLE: Inserting Relative Date in Hexo Templates
DESCRIPTION: The relative_date helper inserts relative time from now.

LANGUAGE: EJS
CODE:
<%- relative_date(date) %>

----------------------------------------

TITLE: Configuring Highlight.js in Hexo (v7.0.0+)
DESCRIPTION: YAML configuration for enabling and customizing highlight.js in Hexo versions 7.0.0 and above.

LANGUAGE: yaml
CODE:
# _config.yml
syntax_highlighter: highlight.js
highlight:
  auto_detect: false
  line_number: true
  line_threshold: 0
  tab_replace: "  "
  exclude_languages:
    - example
  wrap: true
  hljs: false

----------------------------------------

TITLE: Inserting Generator Meta Tag in Hexo
DESCRIPTION: The meta_generator helper function inserts the generator meta tag.

LANGUAGE: JavaScript
CODE:
<%- meta_generator() %>

----------------------------------------

TITLE: Generating Gravatar URL in Hexo
DESCRIPTION: The gravatar helper function returns the gravatar image URL for a given email address.

LANGUAGE: JavaScript
CODE:
<%- gravatar(email, [size]) %>

----------------------------------------

TITLE: Updating js-yaml Dependency for Hexo
DESCRIPTION: Shows how to manually update the js-yaml dependency to resolve YAMLException errors when upgrading to Hexo 6.1.0 or later.

LANGUAGE: sh
CODE:
$ npm install js-yaml@latest

LANGUAGE: sh
CODE:
$ yarn add js-yaml@latest

----------------------------------------

TITLE: Configuring Less.js Options in Hexo
DESCRIPTION: Shows how to configure Less.js options in Hexo's _config.yml file, specifically setting global variables for Less compilation.

LANGUAGE: yaml
CODE:
less:
  options:
    globalVars:
      var1: 'some value'

----------------------------------------

TITLE: Using Nunjucks Tags in CSS with disableNunjucks Option
DESCRIPTION: Demonstrates the use of Nunjucks tags in CSS content when the disableNunjucks option is enabled, allowing for safe use of curly braces in CSS.

LANGUAGE: css
CODE:
div::before {
  content: "{{}}";
}

----------------------------------------

TITLE: Inserting Time Tag in Hexo Templates
DESCRIPTION: The time_tag helper inserts formatted time with an HTML time tag.

LANGUAGE: EJS
CODE:
<%- time_tag(date, [format]) %>

----------------------------------------

TITLE: Disabling Syntax Highlighting in Hexo (v7.0.0+)
DESCRIPTION: YAML configuration to disable syntax highlighting in Hexo versions 7.0.0 and above.

LANGUAGE: yaml
CODE:
# _config.yml
syntax_highlighter: # empty

----------------------------------------

TITLE: Caching Fragment Content in Hexo
DESCRIPTION: The fragment_cache helper function caches the contents in a fragment.

LANGUAGE: JavaScript
CODE:
<%- fragment_cache(id, fn) %>

----------------------------------------

TITLE: Converting to Title Case in Hexo
DESCRIPTION: The titlecase helper function transforms a string into proper title case.

LANGUAGE: JavaScript
CODE:
<%- titlecase(string) %>

----------------------------------------

TITLE: Configuring System-wide File Descriptor Limits
DESCRIPTION: Provides steps to permanently increase the file descriptor limit by modifying system configuration files.

LANGUAGE: plain
CODE:
* - nofile 10000

# '*' applies to all users and '-' set both soft and hard limits

LANGUAGE: plain
CODE:
session required pam_limits.so

LANGUAGE: plain
CODE:
DefaultLimitNOFILE=10000

----------------------------------------

TITLE: Extending Stylus Renderer with Hexo Filter in JavaScript
DESCRIPTION: Shows how to use Hexo's filter API to interact with the Stylus API, allowing for custom variable definitions and functions within Stylus stylesheets.

LANGUAGE: javascript
CODE:
hexo.extend.filter.register('stylus:renderer', function(style) {
  style
    // we may define a global variable by passing a `Node`
    .define('has-canvas', require('stylus').nodes.false);
    // stylus also casts JavaScript values to their Stylus equivalents when possible
    .define('families', ['Helvetica Neue', 'Helvetica', 'sans-serif'])
    // also allows you to provide a JavaScript-defined function to Stylus
    .define('get-list', function() {
      return ['foo', 'bar', 'baz'];
    });
})

----------------------------------------

TITLE: Formatting Numbers in Hexo Templates
DESCRIPTION: The number_format helper formats numbers with options for precision and separators.

LANGUAGE: EJS
CODE:
<%- number_format(number, [options]) %>

----------------------------------------

TITLE: Configuring Syntax Highlighting in Hexo (pre-v7.0.0)
DESCRIPTION: YAML configuration for syntax highlighting in Hexo versions before 7.0.0, including options for highlight.js and PrismJS.

LANGUAGE: yaml
CODE:
# _config.yml
highlight:
  enable: true
  auto_detect: false
  line_number: true
  line_threshold: 0
  tab_replace: ""
  exclude_languages:
    - example
  wrap: true
  hljs: false
prismjs:
  enable: false
  preprocess: true
  line_number: true
  line_threshold: 0
  tab_replace: ""

----------------------------------------

TITLE: Listing Categories in Hexo
DESCRIPTION: The list_categories helper function inserts a list of all categories.

LANGUAGE: JavaScript
CODE:
<%- list_categories([categories], [options]) %>

----------------------------------------

TITLE: Listing Tags in Hexo
DESCRIPTION: The list_tags helper function inserts a list of all tags.

LANGUAGE: JavaScript
CODE:
<%- list_tags([tags], [options]) %>

----------------------------------------

TITLE: Installing Hexo Without Optional Dependencies
DESCRIPTION: Shows how to install Hexo without optional dependencies to avoid issues with DTrace on Mac OS X.

LANGUAGE: sh
CODE:
$ npm install hexo --no-optional

----------------------------------------

TITLE: Configuring Tab Replacement and Disabling Wrapping in Hexo Highlighting
DESCRIPTION: YAML configuration to set tab replacement and disable wrapping in Hexo's syntax highlighting.

LANGUAGE: yaml
CODE:
highlight:
  tab_replace: '  '
  wrap: false

----------------------------------------

TITLE: Using KaTeX in Hexo with Tag Plugin Syntax
DESCRIPTION: Example of using the KaTeX tag plugin in Hexo for rendering mathematical equations.

LANGUAGE: markdown
CODE:
{% katex %}
c = \pm\sqrt{a^2 + b^2}
{% endkatex %}

----------------------------------------

TITLE: Generating Full URL with Config Prefix in Hexo
DESCRIPTION: The full_url_for helper function returns a URL with the config.url prefixed. It automatically encodes the output.

LANGUAGE: JavaScript
CODE:
<%- full_url_for(path) %>

----------------------------------------

TITLE: Accessing User Configuration - Module Approach
DESCRIPTION: Module-based approach for accessing user configuration with separate files.

LANGUAGE: javascript
CODE:
/* global hexo */

hexo.extend.injector.register("head_end", require("./lib/inject").bind(hexo));

LANGUAGE: javascript
CODE:
module.exports = function () {
  const css = this.extend.helper.get("css");
  const { cssPath } = this.config.fooPlugin;
  return css(cssPath);
};

----------------------------------------

TITLE: Generating XML Date in Hexo
DESCRIPTION: The date_xml helper function inserts date in XML format.

LANGUAGE: JavaScript
CODE:
<%- date_xml(date) %>

----------------------------------------

TITLE: Loading Partial Templates in Hexo
DESCRIPTION: The partial helper function loads other template files with optional local variables.

LANGUAGE: JavaScript
CODE:
<%- partial(layout, [locals], [options]) %>

----------------------------------------

TITLE: Rsync Deployment Configuration
DESCRIPTION: Configuration settings for deploying using Rsync protocol.

LANGUAGE: yaml
CODE:
deploy:
  type: rsync
  host: <host>
  user: <user>
  root: <root>
  port: [port]
  delete: [true|false]
  verbose: [true|false]
  ignore_errors: [true|false]

----------------------------------------

TITLE: Enabling Lazy Loading for Images in Hexo Marked Renderer
DESCRIPTION: YAML configuration to enable lazy loading of images when using the Hexo Marked renderer.

LANGUAGE: yaml
CODE:
marked:
  lazyload: true

----------------------------------------

TITLE: Checking if Current Page is Home in Hexo
DESCRIPTION: The is_home helper function checks if the current page is the home page.

LANGUAGE: JavaScript
CODE:
<%- is_home() %>

----------------------------------------

TITLE: Markdown Code Block Syntax
DESCRIPTION: Shows the three supported ways to create code blocks in Hexo using codeblock tag plugin, code tag plugin, and markdown fenced code blocks.

LANGUAGE: markdown
CODE:
{% codeblock [title] [lang:language] [url] [link text] [additional options] %}
code snippet
{% endcodeblock %}

{% code [title] [lang:language] [url] [link text] [additional options] %}
code snippet
{% endcode %}

```[language] [title] [url] [link text] [additional options]
code snippet
```

----------------------------------------

TITLE: Formatting Full Date and Time in Hexo
DESCRIPTION: The full_date helper function inserts formatted date and time. It supports UNIX time, ISO string, Date object, or Moment.js object.

LANGUAGE: JavaScript
CODE:
<%- full_date(date, [format]) %>

----------------------------------------

TITLE: Inserting Email Links in Hexo
DESCRIPTION: The mail_to helper function inserts an email link with various options.

LANGUAGE: JavaScript
CODE:
<%- mail_to(path, [text], [options]) %>

----------------------------------------

TITLE: Configuring Syntax Highlighting in Hexo (v7.0.0+)
DESCRIPTION: YAML configuration for syntax highlighting in Hexo versions 7.0.0 and above, with a new syntax_highlighter option and separate configurations for highlight.js and prismjs.

LANGUAGE: yaml
CODE:
# _config.yml
syntax_highlighter: highlight.js
highlight:
  auto_detect: false
  line_number: true
  line_threshold: 0
  tab_replace: ""
  exclude_languages:
    - example
  wrap: true
  hljs: false
prismjs:
  preprocess: true
  line_number: true
  line_threshold: 0
  tab_replace: ""

----------------------------------------

TITLE: WordPress Migrator Excerpt Example
DESCRIPTION: Example showing how markup is retained in excerpts when migrating from WordPress with the new excerpt import feature.

LANGUAGE: markdown
CODE:
title: foo bar
date: 2020-01-01 00:00:00
---

Lorem ipsum [dolor](http://example.com/) sit amet, **nam** ex putant _intellegat_ reprehendunt.

<!-- more -->

Cu nulla aeterno nec, tibique deterruisset an eam, ea pro dolorem vituperata.

----------------------------------------

TITLE: Embedding Swig Tags in Code Blocks
DESCRIPTION: Example of how to embed Swig tags inside code blocks in Hexo 5.

LANGUAGE: html
CODE:
<pre><code>`{% foo %}{{ bar }}{% endfoo %}`</code></pre>

----------------------------------------

TITLE: Checking if Current Page is First Home Page in Hexo
DESCRIPTION: The is_home_first_page helper function checks if the current page is the first page of the home page.

LANGUAGE: JavaScript
CODE:
<%- is_home_first_page() %>

----------------------------------------

TITLE: Generating Tag Cloud in Hexo
DESCRIPTION: The tagcloud helper function inserts a tag cloud.

LANGUAGE: JavaScript
CODE:
<%- tagcloud([tags], [options]) %>

----------------------------------------

TITLE: Rendering Markdown in Hexo Templates
DESCRIPTION: The markdown helper renders a string using Markdown.

LANGUAGE: EJS
CODE:
<%- markdown(str) %>

----------------------------------------

TITLE: Checking Month Archive in Hexo Templates
DESCRIPTION: The is_month helper checks if the current page is a monthly archive page.

LANGUAGE: EJS
CODE:
<%- is_month() %>

----------------------------------------

TITLE: HTML Output for Disabled Syntax Highlighting
DESCRIPTION: Example of HTML output for a code block when syntax highlighting is disabled in Hexo, showing how the language is added as a class to the code element.

LANGUAGE: html
CODE:
<pre>
  <code class="yaml">hello: hexo</code>
</pre>

----------------------------------------

TITLE: Configuring External Links in Hexo 5
DESCRIPTION: New configuration format for external links in Hexo 5, replacing the deprecated boolean option.

LANGUAGE: yaml
CODE:
``` yml _config.yml
# Deprecated
external_link: true|false

# New option
external_link:
  enable: true|false

# Deprecated
use_date_for_updated: true

# New option
# https://hexo.io/docs/configuration#Date-Time-format
updated_option: date
```

----------------------------------------

TITLE: Trimming Whitespace in Hexo
DESCRIPTION: The trim helper function removes whitespace from the start and end of a string.

LANGUAGE: JavaScript
CODE:
<%- trim(string) %>

----------------------------------------

TITLE: Listing Archives in Hexo
DESCRIPTION: The list_archives helper function inserts a list of archives.

LANGUAGE: JavaScript
CODE:
<%- list_archives([options]) %>

----------------------------------------

TITLE: Rendering Strings with Custom Engines in Hexo Templates
DESCRIPTION: The render helper processes a string with a specified rendering engine.

LANGUAGE: EJS
CODE:
<%- render(str, engine, [options]) %>

----------------------------------------

TITLE: Loading CSS Files in Hexo Templates
DESCRIPTION: The css helper loads CSS files. It automatically adds the root URL and .css extension if not present.

LANGUAGE: EJS
CODE:
<%- css(path, ...) %>

----------------------------------------

TITLE: HTML Output with Line Numbers in Highlight.js
DESCRIPTION: Example of HTML output generated by Hexo when using highlight.js with line numbers enabled, showing the structure with figure and table elements.

LANGUAGE: html
CODE:
<figure class="highlight yaml">
  <table>
    <tbody>
      <tr>
        <td class="gutter">
          <pre><span class="line">1</span><br></pre>
        </td>
        <td class="code">
          <pre><span class="line"><span class="attr">hello:</span><span class="string">hexo</span></span><br></pre>
        </td>
      </tr>
    </tbody>
  </table>
</figure>

----------------------------------------

TITLE: Configuring external_link Options in hexo-renderer-marked
DESCRIPTION: Configuration for external link behavior including enabling/disabling, excluding domains, and nofollow attributes for SEO.

LANGUAGE: yaml
CODE:
external_link:
  enable: false
  exclude: []
  nofollow: false

----------------------------------------

TITLE: File Operations in hexo-fs
DESCRIPTION: Methods that were updated in hexo-fs 2.0.1 for Node.js 14 compatibility

LANGUAGE: javascript
CODE:
writeFile()
copyFile()

----------------------------------------

TITLE: Generating Relative Date in Hexo
DESCRIPTION: The relative_date helper function inserts relative time from now. It supports UNIX time, ISO string, Date object, or Moment.js object.

LANGUAGE: JavaScript
CODE:
<%- relative_date(date) %>

----------------------------------------

TITLE: Using Moment.js in Hexo
DESCRIPTION: The moment helper function provides access to the Moment.js library.

LANGUAGE: JavaScript
CODE:
<%- moment(date) %>

----------------------------------------

TITLE: Generating Gravatar Image URL in Hexo
DESCRIPTION: The gravatar helper returns the gravatar image URL for a given email address.

LANGUAGE: EJS
CODE:
<%- gravatar(email, [options]) %>

----------------------------------------

TITLE: Generating Relative URL in Hexo
DESCRIPTION: The relative_url helper returns a relative URL path from 'from' to 'to'.

LANGUAGE: EJS
CODE:
<%- relative_url(from, to) %>

----------------------------------------

TITLE: HTML Output with HLJS Classes in Highlight.js
DESCRIPTION: Example of HTML output generated by Hexo when using highlight.js with the hljs option enabled, showing class names prefixed with 'hljs-'.

LANGUAGE: html
CODE:
<pre><code class="yaml hljs">
<span class="hljs-comment"># _config.yml</span>
<span class="hljs-attr">hexo:</span> <span class="hljs-string">hexo</span>
</code></pre>

----------------------------------------

TITLE: Reinstalling Node Modules after Updating package.json in Hexo
DESCRIPTION: These commands remove the existing node_modules directory and reinstall all dependencies after updating package.json. This ensures that the new versions of hexo-util and hexo-fs are installed.

LANGUAGE: bash
CODE:
```
$ rm -rf node_modules/
$ npm install
```

----------------------------------------

TITLE: Inserting Time Tag in Hexo
DESCRIPTION: The time_tag helper function inserts a time tag with formatted date. It supports UNIX time, ISO string, Date object, or Moment.js object.

LANGUAGE: JavaScript
CODE:
<%- time_tag(date, [format]) %>

----------------------------------------

TITLE: Word Wrapping in Hexo
DESCRIPTION: The word_wrap helper function wraps text to ensure each line is no longer than the specified length.

LANGUAGE: JavaScript
CODE:
<%- word_wrap(str, [length]) %>

----------------------------------------

TITLE: Generating URL with Root Prefix in Hexo
DESCRIPTION: The url_for helper generates a URL with the root path prefix. It should be used instead of concatenating config.root + path starting from Hexo 2.7.

LANGUAGE: EJS
CODE:
<%- url_for(path) %>

----------------------------------------

TITLE: Loading JavaScript Files in Hexo Templates
DESCRIPTION: The js helper loads JavaScript files. It automatically adds the root URL and .js extension if not present.

LANGUAGE: EJS
CODE:
<%- js(path, ...) %>

----------------------------------------

TITLE: Inserting Favicon in Hexo
DESCRIPTION: The favicon_tag helper function inserts a favicon link.

LANGUAGE: JavaScript
CODE:
<%- favicon_tag(path) %>

----------------------------------------

TITLE: Updating package.json for Node 14 Compatibility in Hexo
DESCRIPTION: This diff shows how to modify package.json to force upgrade hexo-util and hexo-fs for compatibility with Node 14. It adds specific versions of these dependencies to resolve compatibility issues.

LANGUAGE: diff
CODE:
``` diff package.json
{
  ...
  "dependencies": {
    "hexo": "^4.0.0",
    "hexo-generator-archive": "^1.0.0",
    "hexo-generator-category": "^1.0.0",
    "hexo-generator-index": "^1.0.0",
    "hexo-generator-tag": "^1.0.0",
    "hexo-renderer-ejs": "^1.0.0",
    "hexo-renderer-stylus": "^1.1.0",
    "hexo-renderer-marked": "^2.0.0",
    "hexo-server": "^1.0.0",
+    "hexo-util": "^2.1.0",
+    "hexo-fs": "^3.0.1"
  }
}
```

----------------------------------------

TITLE: Configuring Markdown Permalink Side in Hexo
DESCRIPTION: Configuration example for setting the permalink symbol position in markdown headings. The permalinkSide option allows placing the permalink symbol either before (default) or after the heading text.

LANGUAGE: yaml
CODE:
markdown:
  anchors:
    permalink: true
    permalinkSide: 'right'

----------------------------------------

TITLE: Complex Categories Hierarchy in YAML
DESCRIPTION: Shows how to create multiple independent category hierarchies using nested arrays in YAML format.

LANGUAGE: yaml
CODE:
categories:
  - [Sports, Baseball]
  - [MLB, American League, Boston Red Sox]
  - [MLB, American League, New York Yankees]
  - Rivalries

----------------------------------------

TITLE: Checking if Current Page is a Tag in Hexo
DESCRIPTION: The is_tag helper function checks if the current page is a tag page.

LANGUAGE: JavaScript
CODE:
<%- is_tag() %>

----------------------------------------

TITLE: Configuring PrismJS in Hexo (pre-v7.0.0)
DESCRIPTION: YAML configuration for enabling and customizing PrismJS in Hexo versions before 7.0.0.

LANGUAGE: yaml
CODE:
# _config.yml
highlight:
  enable: false
prismjs:
  enable: true
  preprocess: true
  line_number: true
  line_threshold: 0
  tab_replace: ""

----------------------------------------

TITLE: Checking Tag Page in Hexo Templates
DESCRIPTION: The is_tag helper checks if the current page is a tag page, optionally for a specific tag.

LANGUAGE: EJS
CODE:
<%- is_tag() %>
<%- is_tag('hobby') %>

----------------------------------------

TITLE: Checking if Current Page is a Month Archive in Hexo
DESCRIPTION: The is_month helper function checks if the current page is a monthly archive page.

LANGUAGE: JavaScript
CODE:
<%- is_month() %>

----------------------------------------

TITLE: Async Arrow Function Spacing Example
DESCRIPTION: JavaScript code examples showing correct and incorrect spacing between async keyword and arrow function parameters according to new eslint rules.

LANGUAGE: javascript
CODE:
const foo = async(a) => await a

LANGUAGE: javascript
CODE:
const foo = async (a) => await a

----------------------------------------

TITLE: Using Partial Helper with Fragment Caching
DESCRIPTION: Shows how to enable fragment caching when using the partial helper by adding the cache option.

LANGUAGE: javascript
CODE:
<%- partial('header', {}, {cache: true}) %>

----------------------------------------

TITLE: Checking if Current Page is a Year Archive in Hexo
DESCRIPTION: The is_year helper function checks if the current page is a yearly archive page.

LANGUAGE: JavaScript
CODE:
<%- is_year() %>

----------------------------------------

TITLE: Disabling Syntax Highlighting in Hexo (pre-v7.0.0)
DESCRIPTION: YAML configuration to disable both highlight.js and PrismJS in Hexo versions before 7.0.0.

LANGUAGE: yaml
CODE:
# _config.yml
highlight:
  enable: false
prismjs:
  enable: false

----------------------------------------

TITLE: Checking Archive Page in Hexo Templates
DESCRIPTION: The is_archive helper checks if the current page is an archive page.

LANGUAGE: EJS
CODE:
<%- is_archive() %>

----------------------------------------

TITLE: Truncating Text in Hexo
DESCRIPTION: The truncate helper function truncates text after a certain length.

LANGUAGE: JavaScript
CODE:
<%- truncate(text, length) %>

----------------------------------------

TITLE: Using TOC Helper with Minimum Depth
DESCRIPTION: JavaScript code demonstrating how to use the table of contents helper with a minimum depth parameter to control which heading levels are included.

LANGUAGE: javascript
CODE:
<%- toc(page.content, { min_depth: 2 }) %>

----------------------------------------

TITLE: Configuring Server Cache in Hexo
DESCRIPTION: YAML configuration to enable caching in hexo-server for production environments. This setting allows rendered HTML to be cached for better performance.

LANGUAGE: yaml
CODE:
server:
  cache: true

----------------------------------------

TITLE: Creating Typed Posts
DESCRIPTION: Command for creating new posts with type specification using Hexo CLI

LANGUAGE: bash
CODE:
$ hexo new "Hello World" --type test

----------------------------------------

TITLE: Checking if Current Page is an Archive in Hexo
DESCRIPTION: The is_archive helper function checks if the current page is an archive page.

LANGUAGE: JavaScript
CODE:
<%- is_archive() %>

----------------------------------------

TITLE: HTML Output for highlight.js with Line Numbers
DESCRIPTION: Example of HTML output generated by Hexo for a code block highlighted by highlight.js with line numbers enabled.

LANGUAGE: html
CODE:
<figure class="highlight yaml">
  <table>
    <tbody>
      <tr>
        <td class="gutter">
          <pre><span class="line">1</span><br></pre>
        </td>
        <td class="code">
          <pre><span class="line"><span class="attr">hello:</span><span class="string">hexo</span></span><br></pre>
        </td>
      </tr>
    </tbody>
  </table>
</figure>

----------------------------------------

TITLE: Setting Up Hexo Documentation Repository
DESCRIPTION: Commands for setting up the Hexo documentation repository, including installing Hexo CLI globally, cloning the repository, and installing dependencies.

LANGUAGE: bash
CODE:
$ npm install hexo-cli -g # If you don't have hexo-cli installed
$ git clone https://github.com/<username>/site.git
$ cd site
$ npm install

----------------------------------------

TITLE: Modifying Data with Multiple Filters in Hexo
DESCRIPTION: Illustrates how multiple filters can modify data sequentially, with each filter receiving the output of the previous one. It also shows how to pass additional arguments to filters.

LANGUAGE: javascript
CODE:
hexo.extend.filter.register("test", function (data, arg1, arg2) {
  // data === 'some data'
  // arg1 === 'foo'
  // arg2 === 'bar'

  return "something";
});

hexo.extend.filter.register("test", function (data, arg1, arg2) {
  // data === 'something'
});

hexo.extend.filter.exec("test", "some data", {
  args: ["foo", "bar"],
});

----------------------------------------

TITLE: Enabling markdown-it-cjk-breaks Plugin in hexo-renderer-markdown-it Configuration
DESCRIPTION: This snippet shows how to specifically enable the markdown-it-cjk-breaks plugin in the hexo-renderer-markdown-it configuration. This plugin handles line breaks for CJK (Chinese, Japanese, Korean) text.

LANGUAGE: yaml
CODE:
markdown:
  plugins:
    - markdown-it-cjk-breaks

----------------------------------------

TITLE: Creating Multi-language Posts
DESCRIPTION: Commands demonstrating creation of posts in different languages using the lang option

LANGUAGE: bash
CODE:
$ hexo new "Hello World" --lang en
# => This post will be saved to source/_posts/en/Hello-World.md
# => URL: http://localhost:4000/en/Hello-World/

$ hexo new "你好世界" --lang tw
# => This post will be saved to source/_posts/tw/你好世界.md
# => URL: http://localhost:4000/tw/你好世界/

----------------------------------------

TITLE: Checking Current Page URL in Hexo
DESCRIPTION: The is_current helper function checks if the 'path' matches the URL of the current page.

LANGUAGE: JavaScript
CODE:
<%- is_current(path, [strict]) %>

----------------------------------------

TITLE: Configuring highlight.js in Hexo (pre-v7.0.0)
DESCRIPTION: YAML configuration for enabling and customizing highlight.js in Hexo versions before 7.0.0.

LANGUAGE: yaml
CODE:
# _config.yml
highlight:
  enable: true
  auto_detect: false
  line_number: true
  line_threshold: 0
  tab_replace: "  "
  exclude_languages:
    - example
  wrap: true
  hljs: false
prismjs:
  enable: false

----------------------------------------

TITLE: Starting Hexo Documentation Server
DESCRIPTION: Command to start the Hexo server for real-time preview of documentation changes. This is useful when editing the Hexo documentation.

LANGUAGE: bash
CODE:
$ hexo server

----------------------------------------

TITLE: After Post Render Filter in Hexo
DESCRIPTION: Example of a filter that runs after a post is rendered, replacing @username mentions with links to Twitter profiles.

LANGUAGE: javascript
CODE:
hexo.extend.filter.register("after_post_render", function (data) {
  data.content = data.content.replace(
    /@(\d+)/,
    '<a href="http://twitter.com/$1">#$1</a>',
  );
  return data;
});

----------------------------------------

TITLE: Enabling Official markdown-it Plugins in hexo-renderer-markdown-it Configuration
DESCRIPTION: This snippet demonstrates how to enable various official markdown-it plugins in the hexo-renderer-markdown-it configuration. These plugins extend the functionality of markdown rendering.

LANGUAGE: yaml
CODE:
markdown:
  plugins:
    - markdown-it-abbr
    - markdown-it-cjk-breaks
    - markdown-it-container
    - markdown-it-deflist
    - markdown-it-emoji
    - markdown-it-footnote
    - markdown-it-ins
    - markdown-it-mark
    - markdown-it-sub
    - markdown-it-sup

----------------------------------------

TITLE: Configuring Highlight Options in Hexo
DESCRIPTION: YAML configuration for code highlighting in Hexo, specifically setting wrap and hljs options to control code block rendering behavior.

LANGUAGE: yaml
CODE:
_config.yml
highlight:
  wrap: false
  hljs: true

----------------------------------------

TITLE: Installing Hexo CLI and Core Globally
DESCRIPTION: This command installs the Hexo Command Line Interface (CLI) globally on the system. It's a prerequisite for using Hexo 3.0 and should be run before updating Hexo itself.

LANGUAGE: bash
CODE:
$ npm install hexo-cli -g

----------------------------------------

TITLE: Inserting Feed Link in Hexo
DESCRIPTION: The feed_tag helper function inserts a feed link with various options.

LANGUAGE: JavaScript
CODE:
<%- feed_tag(path, [options]) %>

----------------------------------------

TITLE: HTML Output Example with Line Numbers
DESCRIPTION: Example of generated HTML output when line numbers are enabled, showing the structure with figure and table elements.

LANGUAGE: html
CODE:
<figure class="highlight yaml">
  <table>
    <tbody>
      <tr>
        <td class="gutter">
          <pre><span class="line">1</span><br></pre>
        </td>
        <td class="code">
          <pre><span class="line"><span class="attr">hello:</span><span class="string">hexo</span></span><br></pre>
        </td>
      </tr>
    </tbody>
  </table>
</figure>

----------------------------------------

TITLE: Cloning and Setting Up Hexo Repository
DESCRIPTION: Commands for cloning the Hexo repository, installing dependencies, and updating submodules. This is the initial setup process for contributing to Hexo development.

LANGUAGE: bash
CODE:
$ git clone https://github.com/<username>/hexo.git
$ cd hexo
$ npm install
$ git submodule update --init

----------------------------------------

TITLE: Server Middleware Filter in Hexo
DESCRIPTION: Example of adding middleware to the server, specifically adding an X-Powered-By header to the response.

LANGUAGE: javascript
CODE:
hexo.extend.filter.register("server_middleware", function (app) {
  app.use(function (req, res, next) {
    res.setHeader("X-Powered-By", "Hexo");
    next();
  });
});

----------------------------------------

TITLE: Configuring Pretty URLs in Hexo
DESCRIPTION: YAML configuration to remove trailing .html from URLs in Hexo for improved SEO. Sets the trailing_html option under pretty_urls configuration.

LANGUAGE: yaml
CODE:
_config.yml
pretty_urls:
  trailing_html: false

----------------------------------------

TITLE: Updating package.json for Jade to Pug Migration in Hexo
DESCRIPTION: This diff shows the changes required in package.json to migrate from hexo-renderer-jade to hexo-renderer-pug. It replaces the deprecated jade renderer with the new pug renderer.

LANGUAGE: diff
CODE:
-  "hexo-renderer-jade": "^0.4.1",
+  "hexo-renderer-pug": "^1.0.0",

----------------------------------------

TITLE: Configuring PrismJS in Hexo (v7.0.0+)
DESCRIPTION: YAML configuration for using PrismJS as the syntax highlighter in Hexo versions 7.0.0 and above, with various PrismJS options explained.

LANGUAGE: yaml
CODE:
# _config.yml
syntax_highlighter: prismjs
prismjs:
  preprocess: true
  line_number: true
  line_threshold: 0
  tab_replace: ""

----------------------------------------

TITLE: Hexo Highlight Configuration v7.0.0+
DESCRIPTION: Updated configuration syntax for Hexo version 7.0.0 and above, showing the new syntax_highlighter option.

LANGUAGE: yaml
CODE:
syntax_highlighter: highlight.js
highlight:
  auto_detect: false
  line_number: true
  line_threshold: 0
  tab_replace: ""
  exclude_languages:
    - example
  wrap: true
  hljs: false
prismjs:
  preprocess: true
  line_number: true
  line_threshold: 0
  tab_replace: ""

----------------------------------------

TITLE: Hexo Injector Example with Multiple Registrations
DESCRIPTION: Example showing how to inject CSS and JavaScript files into specific parts of HTML pages using the injector API.

LANGUAGE: javascript
CODE:
const css = hexo.extend.helper.get("css").bind(hexo);
const js = hexo.extend.helper.get("js").bind(hexo);

hexo.extend.injector.register(
  "head_end",
  () => {
    return css(
      "https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css",
    );
  },
  "music",
);

hexo.extend.injector.register(
  "body_end",
  '<script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js">',
  "music",
);

hexo.extend.injector.register("body_end", () => {
  return js("/js/jquery.js");
});

----------------------------------------

TITLE: Rendering String with Engine in Hexo
DESCRIPTION: Demonstrates how to render a string using a specified engine in Hexo using the asynchronous render method.

LANGUAGE: javascript
CODE:
hexo.render.render({ text: "example", engine: "swig" }).then(function (result) {
  // ...
});

----------------------------------------

TITLE: Configuring Code Block Wrapping in Hexo
DESCRIPTION: Demonstrates how to configure the wrapping of backtick code blocks in Hexo's _config.yml file, allowing control over the HTML structure of code snippets.

LANGUAGE: yaml
CODE:
highlight:
  line_number: false # must be disabled to disable wrap:
  wrap: false

----------------------------------------

TITLE: Using Custom Attributes with JS and CSS Helpers in Hexo
DESCRIPTION: Examples of using the js() and css() helpers with custom attributes in Hexo, allowing for more flexible script and stylesheet inclusion.

LANGUAGE: javascript
CODE:
<%- js({ src: 'script.js', integrity: 'foo', async: true }) %>
// <script src="/script.js" integrity="foo" async></script>

<%- css({ href: 'style.css', integrity: 'foo' }) %>
// <link rel="stylesheet" href="/style.css" integrity="foo">

----------------------------------------

TITLE: Inserting Meta Generator Tag in Hexo Theme Layout
DESCRIPTION: Demonstrates how to use the meta_generator helper to insert a metadata element tag in a Hexo theme layout. This adds information about the Hexo version used to generate the site.

LANGUAGE: javascript
CODE:
<%- meta_generator() %>

----------------------------------------

TITLE: Configuring PrismJS in Hexo (pre-v7.0.0)
DESCRIPTION: YAML configuration for using PrismJS as the syntax highlighter in Hexo versions before 7.0.0, with highlight.js disabled and various PrismJS options explained.

LANGUAGE: yaml
CODE:
# _config.yml
highlight:
  enable: false
prismjs:
  enable: true
  preprocess: true
  line_number: true
  line_threshold: 0
  tab_replace: ""

----------------------------------------

TITLE: Setting Up Hexo Documentation Repository
DESCRIPTION: Commands to set up the Hexo documentation repository for contributing to the documentation.

LANGUAGE: bash
CODE:
$ npm install hexo-cli -g # If you don't have hexo-cli installed
$ git clone https://github.com/<username>/site.git
$ cd site
$ npm install

----------------------------------------

TITLE: Hexo Deployment Configuration (YAML)
DESCRIPTION: Configuration for the hexo-deployer-git plugin in the Hexo _config.yml file. This setup enables one-command deployment to GitHub Pages.

LANGUAGE: yaml
CODE:
deploy:
  type: git
  repo: https://github.com/<username>/<project>
  # example, https://github.com/hexojs/hexojs.github.io
  branch: gh-pages

----------------------------------------

TITLE: Removing Path in Hexo Router
DESCRIPTION: Shows how to remove a path from the router using the remove method.

LANGUAGE: javascript
CODE:
hexo.route.remove("index.html");

----------------------------------------

TITLE: Using isExternalLink in JavaScript
DESCRIPTION: Demonstrates how to use the isExternalLink function with the new parameter structure in hexo-util 1.6.0. It now requires passing the site config or URL as a parameter.

LANGUAGE: javascript
CODE:
isExternalLink('https://example.com', hexo.config.url);

----------------------------------------

TITLE: Configuring New Default Settings for hexo-renderer-markdown-it in YAML
DESCRIPTION: This snippet shows the new default configuration for hexo-renderer-markdown-it. It includes settings for HTML rendering, typographer options, and anchor configurations.

LANGUAGE: yaml
CODE:
markdown:
  render:
    html: true
    xhtmlOut: false
    breaks: true
    linkify: true
    typographer: true
    quotes: '""'''
  plugins:
  anchors:
    level: 2
    collisionSuffix: ''
    permalink: false
    permalinkClass: 'header-anchor'
    permalinkSymbol: '¶'
    case: 0
    separator: '-'

----------------------------------------

TITLE: HTML Output without Wrapping in Highlight.js
DESCRIPTION: Example of HTML output generated by Hexo when using highlight.js with both line_number and wrap disabled, showing the basic structure without additional elements.

LANGUAGE: html
CODE:
<pre><code class="yaml">
<span class="comment"># _config.yml</span>
<span class="attr">hexo:</span> <span class="string">hexo</span>
</code></pre>

----------------------------------------

TITLE: Starting Hexo Documentation Server
DESCRIPTION: Command to start the Hexo server for live previewing of documentation changes.

LANGUAGE: bash
CODE:
$ hexo server

----------------------------------------

TITLE: Injecting CSS and JavaScript Resources
DESCRIPTION: Example showing how to inject CSS and JavaScript resources into specific page layouts using the injector API.

LANGUAGE: javascript
CODE:
const css = hexo.extend.helper.get("css").bind(hexo);
const js = hexo.extend.helper.get("js").bind(hexo);

hexo.extend.injector.register(
  "head_end",
  () => {
    return css(
      "https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css",
    );
  },
  "music",
);

hexo.extend.injector.register(
  "body_end",
  '<script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js">',
  "music",
);

hexo.extend.injector.register("body_end", () => {
  return js("/js/jquery.js");
});

----------------------------------------

TITLE: Console Command Arguments Configuration
DESCRIPTION: Example demonstrating how to configure and describe command arguments using the arguments array.

LANGUAGE: javascript
CODE:
{
  arguments: [
    { name: "layout", desc: "Post layout" },
    { name: "title", desc: "Post title" }
  ];
}

----------------------------------------

TITLE: Configuring Source File Inclusion/Exclusion in YAML
DESCRIPTION: Configuration example showing how to include or exclude specific source files from processing using YAML syntax.

LANGUAGE: yaml
CODE:
include:
  - .htaccess

exclude:
  - tmp/**/*

----------------------------------------

TITLE: Permalink Configuration
DESCRIPTION: YAML configuration example showing permalink and new post name settings using variables

LANGUAGE: yaml
CODE:
permalink: :type/:title/
new_post_name: :type/:title.md

----------------------------------------

TITLE: Configuring New Anchor Options in hexo-renderer-markdown-it
DESCRIPTION: This snippet demonstrates the new options available for configuring anchors in hexo-renderer-markdown-it. It includes settings for case transformation and separator character.

LANGUAGE: yaml
CODE:
markdown:
  anchors:
    case: 0 # Set to 1 to transform anchors to lowercase, 2 for uppercase
    separator: '-' # Replace the space with a dash, can be any character

----------------------------------------

TITLE: Configuring Highlight.js in Hexo (v7.0.0+)
DESCRIPTION: YAML configuration for using highlight.js as the syntax highlighter in Hexo versions 7.0.0 and above, with various options explained.

LANGUAGE: yaml
CODE:
# _config.yml
syntax_highlighter: highlight.js
highlight:
  auto_detect: false
  line_number: true
  line_threshold: 0
  tab_replace: "  "
  exclude_languages:
    - example
  wrap: true
  hljs: false

----------------------------------------

TITLE: Running Hexo Tests
DESCRIPTION: Command to run the test suite for Hexo before submitting a pull request.

LANGUAGE: bash
CODE:
$ npm test

----------------------------------------

TITLE: Basic Injector Usage in Hexo
DESCRIPTION: Basic syntax for registering code injections in Hexo HTML files. Shows the core method with its parameters.

LANGUAGE: javascript
CODE:
hexo.extend.injector.register(entry, value, to);

----------------------------------------

TITLE: Configuring PrismJS in Hexo (pre-v7.0.0)
DESCRIPTION: YAML configuration for enabling and customizing PrismJS in Hexo versions before 7.0.0.

LANGUAGE: yaml
CODE:
# _config.yml
highlight:
  enable: false
prismjs:
  enable: true
  preprocess: true
  line_number: true
  line_threshold: 0
  tab_replace: ""

----------------------------------------

TITLE: Accessing User Configuration - Factory Function
DESCRIPTION: Factory function approach for accessing user configuration with dependency injection.

LANGUAGE: javascript
CODE:
/* global hexo */

hexo.extend.injector.register("head_end", require("./lib/inject")(hexo));

LANGUAGE: javascript
CODE:
module.exports = (hexo) => () => {
  const css = hexo.extend.helper.get("css").bind(hexo);
  const { cssPath } = hexo.config.fooPlugin;
  return css(cssPath);
};

----------------------------------------

TITLE: Updating Hexo Version in package.json
DESCRIPTION: Shows how to update the Hexo version in package.json from 5.4.1 to 6.0.0. This change is necessary to upgrade to Hexo v6.

LANGUAGE: JSON
CODE:
``` diff package.json
-  "hexo": "^5.4.1",
+  "hexo": "^6.0.0",
```

----------------------------------------

TITLE: Converting Root Path References to url_for Helper
DESCRIPTION: Example of replacing direct root path concatenation with the url_for helper to support relative links in themes.

LANGUAGE: javascript
CODE:
<%- config.root %><%- path %>

LANGUAGE: javascript
CODE:
<%- url_for(path) %>

----------------------------------------

TITLE: One-command Hexo Deployment (Bash)
DESCRIPTION: A single command to clean the Hexo build and deploy the site to GitHub Pages using the hexo-deployer-git plugin.

LANGUAGE: bash
CODE:
hexo clean && hexo deploy

----------------------------------------

TITLE: Implementing Async Stylus Renderer
DESCRIPTION: Examples of implementing asynchronous renderers using both callback and Promise patterns. Shows how to register a Stylus to CSS renderer.

LANGUAGE: javascript
CODE:
var stylus = require("stylus");

// Callback
hexo.extend.renderer.register(
  "styl",
  "css",
  function (data, options, callback) {
    stylus(data.text).set("filename", data.path).render(callback);
  },
);

// Promise
hexo.extend.renderer.register("styl", "css", function (data, options) {
  return new Promise(function (resolve, reject) {
    resolve("test");
  });
});

----------------------------------------

TITLE: HTML Output for highlight.js with hljs Option
DESCRIPTION: Example of HTML output for a code block highlighted by highlight.js when the hljs option is set to true.

LANGUAGE: html
CODE:
<pre><code class="yaml hljs">
<span class="hljs-comment"># _config.yml</span>
<span class="hljs-attr">hexo:</span> <span class="hljs-string">hexo</span>
</code></pre>

----------------------------------------

TITLE: Basic Injector Synopsis in Hexo
DESCRIPTION: Basic syntax for registering an injector in Hexo with entry point, value and target specification.

LANGUAGE: javascript
CODE:
hexo.extend.injector.register(entry, value, to);

----------------------------------------

TITLE: Accessing User Configuration - Inline Method
DESCRIPTION: Example of accessing user configuration directly within the injector registration.

LANGUAGE: javascript
CODE:
const css = hexo.extend.helper.get("css").bind(hexo);

hexo.extend.injector.register("head_end", () => {
  const { cssPath } = hexo.config.fooPlugin;
  return css(cssPath);
});

----------------------------------------

TITLE: Creating a New Feature Branch in Git
DESCRIPTION: Git command to create and switch to a new branch for developing a feature in Hexo. This is part of the workflow for contributing new features or changes.

LANGUAGE: bash
CODE:
$ git checkout -b new_feature

----------------------------------------

TITLE: Implementing Server Middleware in Hexo
DESCRIPTION: Demonstrates how to register a server middleware filter that adds custom headers to HTTP responses. This example shows adding an X-Powered-By header.

LANGUAGE: javascript
CODE:
hexo.extend.filter.register('server_middleware', function(app){
  app.use(function(req, res, next){
    res.setHeader('X-Powered-By', 'Hexo');
    next();
  });
});

----------------------------------------

TITLE: Listing Routes in Hexo Router
DESCRIPTION: Demonstrates how to get a list of all available routes.

LANGUAGE: javascript
CODE:
hexo.route.list();

----------------------------------------

TITLE: Disabling Nunjucks Tag Processing
DESCRIPTION: Example showing how to disable Nunjucks tag processing in a custom renderer by setting the disableNunjucks flag.

LANGUAGE: javascript
CODE:
function lessFn(data, options) {
  // do something
}

lessFn.disableNunjucks = true;

hexo.extend.renderer.register("less", "css", lessFn);

----------------------------------------

TITLE: Linking to Other Posts in Hexo
DESCRIPTION: Shows how to use the post_link and post_path tag plugins in Hexo to create links to other posts within the site.

LANGUAGE: markdown
CODE:
{% post_path filename %}
{% post_link filename [title] [escape] %}

----------------------------------------

TITLE: Pushing a New Feature Branch to GitHub
DESCRIPTION: Git command to push the newly created feature branch to the remote repository on GitHub. This step is necessary before creating a pull request.

LANGUAGE: bash
CODE:
$ git push origin new_feature

----------------------------------------

TITLE: Draft Publishing API Implementation
DESCRIPTION: JavaScript API for programmatically publishing drafts with specified slug and layout

LANGUAGE: javascript
CODE:
hexo.post.publish({slug: 'hello-world', layout: 'post'}, function(err, target){
  // ...
});

----------------------------------------

TITLE: Removing a Local Variable in Hexo (JavaScript)
DESCRIPTION: Illustrates the method to remove a specific local variable in Hexo. This example removes the 'posts' variable.

LANGUAGE: javascript
CODE:
hexo.locals.remove("posts");

----------------------------------------

TITLE: Registering Hexo Processor in JavaScript
DESCRIPTION: Demonstrates how to register a custom processor in Hexo to handle files in the source folder. The processor takes a rule parameter and a callback function that receives a file object for processing.

LANGUAGE: javascript
CODE:
hexo.extend.processor.register(rule, function (file) {
  // ...
});

----------------------------------------

TITLE: Creating Links in Hexo
DESCRIPTION: Shows how to use the link tag plugin in Hexo to create links with target="_blank" attribute and optional title.

LANGUAGE: markdown
CODE:
{% link text url [external] [title] %}

----------------------------------------

TITLE: Adding Hexo Version to package.json
DESCRIPTION: Demonstrates how to add the Hexo version to package.json to ensure all commands are recognized and executed properly.

LANGUAGE: json
CODE:
{
  "hexo": {
    "version": "3.2.2"
  }
}

----------------------------------------

TITLE: Cleaning Hexo Cache
DESCRIPTION: Shows the command to clean Hexo's cache when data is not updating or generated files are identical to previous versions.

LANGUAGE: bash
CODE:
$ hexo clean

----------------------------------------

TITLE: Basic Hexo Static File Generation
DESCRIPTION: Basic command to generate static files using Hexo.

LANGUAGE: bash
CODE:
$ hexo generate

----------------------------------------

TITLE: Installing Hexo Plugins
DESCRIPTION: This set of commands installs various Hexo plugins, including the server, generators for different content types, and deployers for various platforms. Users should install only the plugins they need for their specific project.

LANGUAGE: bash
CODE:
$ npm install hexo-server --save
$ npm install hexo-generator-index --save
$ npm install hexo-generator-archive --save
$ npm install hexo-generator-category --save
$ npm install hexo-generator-tag --save
$ npm install hexo-deployer-git --save
$ npm install hexo-deployer-heroku --save
$ npm install hexo-deployer-rsync --save
$ npm install hexo-deployer-openshift --save

----------------------------------------

TITLE: Creating an Archive Page in Hexo
DESCRIPTION: Demonstrates how to create an archive page at 'archives/index.html'. It passes all posts as data to the templates and specifies multiple layout options for rendering.

LANGUAGE: javascript
CODE:
hexo.extend.generator.register("archive", function (locals) {
  return {
    path: "archives/index.html",
    data: locals,
    layout: ["archive", "index"],
  };
});

----------------------------------------

TITLE: Retrieving a Local Variable in Hexo (JavaScript)
DESCRIPTION: Demonstrates how to get a specific local variable in Hexo. This example retrieves the 'posts' variable.

LANGUAGE: javascript
CODE:
hexo.locals.get("posts");

----------------------------------------

TITLE: Passing Render Options in Hexo
DESCRIPTION: Illustrates how to pass additional options to the render method as a second argument.

LANGUAGE: javascript
CODE:
hexo.render.render({ text: "" }, { foo: "foo" }).then(function (result) {
  // ...
});

----------------------------------------

TITLE: Running Hexo Tests
DESCRIPTION: Command to run the test suite for Hexo. This step is crucial before submitting a pull request to ensure all tests pass.

LANGUAGE: bash
CODE:
$ npm test

----------------------------------------

TITLE: Watch Mode for Hexo Generation
DESCRIPTION: Command to enable file watching mode in Hexo. This automatically regenerates files when changes are detected using SHA1 checksum comparison.

LANGUAGE: bash
CODE:
$ hexo generate --watch

----------------------------------------

TITLE: Installing hexo-filter-nofollow Plugin via NPM
DESCRIPTION: Command to install the hexo-filter-nofollow plugin as a project dependency using npm package manager.

LANGUAGE: bash
CODE:
$ npm i hexo-filter-nofollow --save

----------------------------------------

TITLE: Publishing a Draft in Hexo using JavaScript
DESCRIPTION: This code shows how to publish a draft post using the Hexo API. It requires data (including at least the slug) and a replace flag. The layout can also be specified, defaulting to the 'default_layout' setting if not provided.

LANGUAGE: javascript
CODE:
hexo.post.publish(data, replace);

----------------------------------------

TITLE: Accessing User Configuration - Direct Method
DESCRIPTION: Example of accessing user configuration directly within the injector function.

LANGUAGE: javascript
CODE:
const css = hexo.extend.helper.get("css").bind(hexo);

hexo.extend.injector.register("head_end", () => {
  const { cssPath } = hexo.config.fooPlugin;
  return css(cssPath);
});

----------------------------------------

TITLE: Disabling Nunjucks Tag Processing
DESCRIPTION: Example showing how to disable Nunjucks tag processing in a custom renderer by setting the disableNunjucks flag.

LANGUAGE: javascript
CODE:
function lessFn(data, options) {
  // do something
}

lessFn.disableNunjucks = true;

hexo.extend.renderer.register("less", "css", lessFn);

----------------------------------------

TITLE: Pushing a Feature Branch to Origin
DESCRIPTION: Command to push a new feature branch to the remote repository.

LANGUAGE: bash
CODE:
$ git push origin new_feature

----------------------------------------

TITLE: Defining Hexo Blog Post Title in Markdown
DESCRIPTION: This snippet demonstrates how to set up the title for a Hexo blog post using a placeholder variable. The title will be dynamically replaced with the actual post title when the site is generated.

LANGUAGE: markdown
CODE:
title: {{ title }}
---

----------------------------------------

TITLE: Configuring Custom Port
DESCRIPTION: Command to start Hexo server on a custom port using the -p flag. Useful when default port 4000 is already in use.

LANGUAGE: bash
CODE:
$ hexo server -p 5000

----------------------------------------

TITLE: Updating Hexo Version in package.json
DESCRIPTION: Diff snippet showing how to update the Hexo version in package.json from 3.9.0 to 4.0.0.

LANGUAGE: diff
CODE:
-  "hexo": "^3.9.0",
+  "hexo": "^4.0.0",

----------------------------------------

TITLE: Hexo Injector with Direct Configuration Access
DESCRIPTION: Example showing how to access user configuration directly in the injector function.

LANGUAGE: javascript
CODE:
const css = hexo.extend.helper.get("css").bind(hexo);

hexo.extend.injector.register("head_end", () => {
  const { cssPath } = hexo.config.fooPlugin;
  return css(cssPath);
});

----------------------------------------

TITLE: Creating a JavaScript Inclusion Helper in Hexo
DESCRIPTION: Example of a custom helper function that generates an HTML script tag. This helper takes a path parameter and returns the corresponding script tag.

LANGUAGE: javascript
CODE:
hexo.extend.helper.register("js", function (path) {
  return '<script src="' + path + '"></script>';
});

----------------------------------------

TITLE: Defining Markdown Front Matter for Hexo About Page
DESCRIPTION: Sets the title and layout for the Hexo about page using YAML front matter. This metadata is used by Hexo to generate the appropriate page structure.

LANGUAGE: markdown
CODE:
---
title: About
layout: about
---

----------------------------------------

TITLE: Increasing File Watch Limit on Linux
DESCRIPTION: Provides a command to increase the maximum number of files that can be watched on Linux systems to resolve ENOSPC errors.

LANGUAGE: bash
CODE:
$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

----------------------------------------

TITLE: Using hexo-generator-feed 2.0.0
DESCRIPTION: Major version update requiring Node 8+. Adds support for post images, customizable feed icons, per-post descriptions via 'intro' front-matter, and configurable post ordering. Improves IDN compatibility and removes unnecessary package files.



----------------------------------------

TITLE: Accessing User Configuration - Module Pattern
DESCRIPTION: Demonstrates how to access user configuration using a separate module file with bind context.

LANGUAGE: javascript
CODE:
/* global hexo */

hexo.extend.injector.register("head_end", require("./lib/inject").bind(hexo));

LANGUAGE: javascript
CODE:
module.exports = function () {
  const css = this.extend.helper.get("css");
  const { cssPath } = this.config.fooPlugin;
  return css(cssPath);
};

----------------------------------------

TITLE: Creating a Hexo Helper with Dependency on Another Helper
DESCRIPTION: Example of a custom helper that uses another registered helper (url_for) within its implementation. This demonstrates how to access and use other helpers in the same context.

LANGUAGE: javascript
CODE:
hexo.extend.helper.register("lorem", function (path) {
  return '<script src="' + this.url_for(path) + '"></script>';
});

----------------------------------------

TITLE: RSS Migrator Excerpt Example
DESCRIPTION: Example showing how markup is retained in excerpts when migrating from RSS feeds with the new excerpt import feature.

LANGUAGE: markdown
CODE:
title: foo bar
date: 2020-01-01 00:00:00
---

Lorem ipsum [dolor](http://example.com/) sit amet, **nam** ex putant _intellegat_ reprehendunt.

<!-- more -->

Cu nulla aeterno nec, tibique deterruisset an eam, ea pro dolorem vituperata.

----------------------------------------

TITLE: Iterating Over Hexo Data Models in Templates
DESCRIPTION: Demonstrates how to properly iterate over Hexo's data models in Jade or Swig templates using the toArray() method.

LANGUAGE: plain
CODE:
{% for post in site.posts.toArray() %}
{% endfor %}

----------------------------------------

TITLE: Configuring Post Permalink with Hour and Minute in Hexo
DESCRIPTION: Example of how to add hour and minute to post permalinks in Hexo's _config.yml file. This allows for more granular URL structures.

LANGUAGE: yaml
CODE:
permalink: :year/:month/:day/:hour/:minute/:title/

----------------------------------------

TITLE: Basic Injector Registration in Hexo
DESCRIPTION: Core syntax for registering an injector in Hexo. Shows the basic function call with its three main parameters: entry point, value to inject, and target page type.

LANGUAGE: javascript
CODE:
hexo.extend.injector.register(entry, value, to);

----------------------------------------

TITLE: Accessing a Hexo Helper in Other Extensions
DESCRIPTION: Shows how to retrieve and use a registered helper function in other Hexo extensions like Filters or Injectors. This example demonstrates binding the helper to the Hexo context.

LANGUAGE: javascript
CODE:
const url_for = hexo.extend.helper.get("url_for").bind(hexo);

----------------------------------------

TITLE: Configuring Post Permalink in Hexo
DESCRIPTION: Example of configuring post permalink in Hexo's _config.yml file.

LANGUAGE: yaml
CODE:
``` yml _config.yml
permalink: :year/:month/:day/:title/
```

----------------------------------------

TITLE: Publishing Hexo Draft
DESCRIPTION: Command to move a draft post from source/_drafts to source/_posts folder. Works similarly to the new command but specifically for publishing draft content.

LANGUAGE: bash
CODE:
$ hexo publish [layout] <title>

----------------------------------------

TITLE: Configuring File and Folder Ignoring in Hexo
DESCRIPTION: Example of how to configure Hexo to ignore specific files or folders, such as node_modules in themes, to prevent processing issues.

LANGUAGE: yaml
CODE:
ignore: '**/themes/*/node_modules/**'

----------------------------------------

TITLE: Accessing Configuration and Content in Hexo Tag Plugins
DESCRIPTION: Shows how to access user configuration, theme configuration, front-matter, and article content within a tag plugin function. This example demonstrates various ways to retrieve and use this data.

LANGUAGE: javascript
CODE:
hexo.extend.tag.register('foo', function (args) {
  const [firstArg] = args;

  // User config
  const { config } = hexo;
  const editor = config.author + firstArg;

  // Theme config
  const { config: themeCfg } = hexo.theme;
  if (themeCfg.fancybox) // do something...

  // Front-matter
  const { title } = this; // article's (post/page) title

  // Article's content
  const { _content } = this; // original content
  const { content } = this; // HTML-rendered content

  return 'foo';
});

----------------------------------------

TITLE: Configuring New Post Name Format in Hexo
DESCRIPTION: This YAML configuration sets the format for new post filenames in Hexo, which is useful when migrating from Jekyll or Octopress.

LANGUAGE: yaml
CODE:
new_post_name: :year-:month-:day-:title.md

----------------------------------------

TITLE: Configuring Previous Default Settings for hexo-renderer-markdown-it in YAML
DESCRIPTION: This snippet shows the previous default configuration for hexo-renderer-markdown-it, specifically focusing on the anchor settings that have been changed in the new version.

LANGUAGE: yaml
CODE:
markdown:
  anchors:
    permalink: true
    level: 1
    collisionSuffix: 'v'
    case: 1

----------------------------------------

TITLE: Creating Hexo Photo Post
DESCRIPTION: Example command demonstrating how to create a new post using a custom scaffold template named 'photo'.

LANGUAGE: bash
CODE:
$ hexo new photo "My Gallery"

----------------------------------------

TITLE: Referencing CacheStream Function in hexo-util
DESCRIPTION: Example of how to reference the CacheStream function which was fixed for Node 14 compatibility in hexo-util 1.9.1

LANGUAGE: javascript
CODE:
CacheStream()

----------------------------------------

TITLE: Implementing JavaScript Minifier with after_render Filter in Hexo
DESCRIPTION: Demonstrates how to use the after_render filter to implement a JavaScript minifier using UglifyJS.

LANGUAGE: javascript
CODE:
var UglifyJS = require("uglify-js");

hexo.extend.filter.register("after_render:js", function (str, data) {
  var result = UglifyJS.minify(str);
  return result.code;
});

----------------------------------------

TITLE: Migrating Joomla Content to Hexo
DESCRIPTION: This command migrates Joomla content to Hexo using the exported Joomla file. The source can be a file path or URL to the Joomla export file.

LANGUAGE: bash
CODE:
$ hexo migrate joomla <source>

----------------------------------------

TITLE: HTML Tag Usage with URL Encoding in hexo-util
DESCRIPTION: Example of using the htmlTag function with URL encoding and HTML escaping disabled via the fourth parameter.

LANGUAGE: JavaScript
CODE:
htmlTag('a', {href: 'http://foo.com/'}, '<b>bold</b>', false)

----------------------------------------

TITLE: Console Command Usage Definition
DESCRIPTION: Example showing how to define the usage pattern for a console command using the options object.

LANGUAGE: javascript
CODE:
{
  usage: "[layout] <title>";
}
// hexo new [layout] <title>

----------------------------------------

TITLE: Checking External Link Configuration in JavaScript
DESCRIPTION: Updated JavaScript code to check external link configuration, maintaining backward compatibility.

LANGUAGE: javascript
CODE:
``` js
<% if ((typeof config.external_link === 'boolean' && config.external_link === true) || (typeof config.external_link === 'object' && config.external_link.enable === true)) { %>
```

----------------------------------------

TITLE: Factory Function Injector Pattern
DESCRIPTION: Example of using a factory function pattern for injector configuration.

LANGUAGE: javascript
CODE:
/* global hexo */

hexo.extend.injector.register("head_end", require("./lib/inject")(hexo));

LANGUAGE: javascript
CODE:
module.exports = (hexo) => () => {
  const css = hexo.extend.helper.get("css").bind(hexo);
  const { cssPath } = hexo.config.fooPlugin;
  return css(cssPath);
};

----------------------------------------

TITLE: Setting Node Modules Path in Linux
DESCRIPTION: Command to add local node_modules/.bin to PATH in Linux for direct Hexo command execution.

LANGUAGE: bash
CODE:
echo 'PATH="$PATH:./node_modules/.bin"' >> ~/.profile

----------------------------------------

TITLE: Configuring Highlight.js Auto-Detection in YAML
DESCRIPTION: Configuration snippet to disable automatic language detection in highlight.js for improved performance.

LANGUAGE: yaml
CODE:
highlight:
  auto_detect: false

----------------------------------------

TITLE: Hexo Deployment Configuration
DESCRIPTION: Configuration settings for the hexo-deployer-git plugin to enable one-command deployment to GitHub Pages

LANGUAGE: yml
CODE:
deploy:
  type: git
  repo: https://github.com/<username>/<project>
  # example, https://github.com/hexojs/hexojs.github.io
  branch: gh-pages

----------------------------------------

TITLE: Registering a Custom Deployer in Hexo
DESCRIPTION: This snippet shows how to register a custom deployer in Hexo. The function takes a name parameter and a callback function that receives deployment arguments. The args object contains configuration from _config.yml and user input from the terminal.

LANGUAGE: javascript
CODE:
hexo.extend.deployer.register(name, function (args) {
  // ...
});

----------------------------------------

TITLE: Hexo Deployment Configuration
DESCRIPTION: Configuration settings for the hexo-deployer-git plugin to enable one-command deployment to GitHub Pages

LANGUAGE: yml
CODE:
deploy:
  type: git
  repo: https://github.com/<username>/<project>
  # example, https://github.com/hexojs/hexojs.github.io
  branch: gh-pages

----------------------------------------

TITLE: Configuring Permalink with Seconds in Hexo
DESCRIPTION: Example of using the new :second attribute in permalink configuration.

LANGUAGE: yaml
CODE:
``` yml
permalink: :year/:month/:day/:hour/:minute/:second/:title.html
```

----------------------------------------

TITLE: Injector Usage Example with APlayer Integration
DESCRIPTION: Example showing how to inject APlayer CSS and JavaScript files into specific pages, along with jQuery inclusion across all pages.

LANGUAGE: javascript
CODE:
const css = hexo.extend.helper.get("css").bind(hexo);
const js = hexo.extend.helper.get("js").bind(hexo);

hexo.extend.injector.register(
  "head_end",
  () => {
    return css(
      "https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css",
    );
  },
  "music",
);

hexo.extend.injector.register(
  "body_end",
  '<script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js">',
  "music",
);

hexo.extend.injector.register("body_end", () => {
  return js("/js/jquery.js");
});

----------------------------------------

TITLE: Hexo Deployment Configuration
DESCRIPTION: Configuration settings for the hexo-deployer-git plugin to enable one-command deployment to GitHub Pages

LANGUAGE: yml
CODE:
deploy:
  type: git
  repo: https://github.com/<username>/<project>
  # example, https://github.com/hexojs/hexojs.github.io
  branch: gh-pages

----------------------------------------

TITLE: Executing Filters in Hexo
DESCRIPTION: Shows how to execute filters in Hexo using both synchronous and asynchronous methods. It includes options for setting context and additional arguments.

LANGUAGE: javascript
CODE:
hexo.extend.filter.exec(type, data, options);
hexo.extend.filter.execSync(type, data, options);

----------------------------------------

TITLE: Using MathJax in Hexo with Tag Plugin Syntax
DESCRIPTION: Example of using the MathJax tag plugin in Hexo for rendering mathematical equations.

LANGUAGE: markdown
CODE:
{% mathjax %}
\frac{1}{x^2-1}
{% endmathjax %}

----------------------------------------

TITLE: Configuring Less Paths with Globbing in Hexo
DESCRIPTION: Demonstrates how to use globbing patterns to specify Less paths in Hexo's configuration file for more flexible stylesheet organization.

LANGUAGE: yaml
CODE:
less:
  paths:
    - '**/css/variables/*'

----------------------------------------

TITLE: Installing Hexo Tag Embed Package
DESCRIPTION: Command to install the hexo-tag-embed package which provides support for gist, youtube, jsfiddle, and vimeo tags that were removed in Hexo 7.0.0

LANGUAGE: sh
CODE:
$ npm i hexo-tag-embed

----------------------------------------

TITLE: Unregistering Filters in Hexo
DESCRIPTION: Demonstrates how to unregister filters in Hexo, including examples for both named functions and CommonJS modules.

LANGUAGE: javascript
CODE:
hexo.extend.filter.unregister(type, filter);

// Unregister a filter which is registered with named function

const filterFn = (data) => {
  data = "something";
  return data;
};
hexo.extend.filter.register("example", filterFn);

hexo.extend.filter.unregister("example", filterFn);

// Unregister a filter which is registered with commonjs module

hexo.extend.filter.register("example", require("path/to/filter"));

hexo.extend.filter.unregister("example", require("path/to/filter"));

----------------------------------------

TITLE: Breaking Change in hexo-front-matter Import Statement
DESCRIPTION: Changed import pattern for hexo-front-matter module requiring specific function declaration instead of object import.

LANGUAGE: JavaScript
CODE:
- const yfm = require('hexo-front-matter');
+ const { parse: yfm } = require('hexo-front-matter');

----------------------------------------

TITLE: Configuring disableNunjucks in Hexo Front-matter
DESCRIPTION: Demonstrates how to enable the 'disableNunjucks' option in a post's front-matter to disable tag plugin processing. This setting overrides the renderer's configuration.

LANGUAGE: yaml
CODE:
---
title: foo
date: 2020-01-02 03:04:05
disableNunjucks: true|false
---

----------------------------------------

TITLE: Configuring Prism.js Highlighting in Hexo
DESCRIPTION: This YAML configuration enables Prism.js syntax highlighting in Hexo and disables the default highlighter.

LANGUAGE: yaml
CODE:
highlight:
  enable: false
prismjs:
  enable: true

----------------------------------------

TITLE: Loading Files in Hexo
DESCRIPTION: Demonstrates how to load files from the source folder and theme data using the 'load' method. Also shows how to use the 'watch' method to continuously monitor for file changes.

LANGUAGE: javascript
CODE:
hexo.load().then(function () {
  // ...
});

hexo.watch().then(function () {
  // You can call hexo.unwatch() later to stop watching.
});

----------------------------------------

TITLE: Asset Image Tag Usage Examples
DESCRIPTION: Examples showing how to use the asset_img tag plugin to reference images in posts, including handling spaces in filenames.

LANGUAGE: text
CODE:
{% asset_img example.jpg This is an example image %}
{% asset_img "spaced asset.jpg" "spaced title" %}

----------------------------------------

TITLE: Using Hexo-util's Spawn Function with String Argument
DESCRIPTION: JavaScript example demonstrating the use of hexo-util's spawn function with a string argument.

LANGUAGE: javascript
CODE:
spawn('cat', 'test.txt').then((content) => {
  console.log(content);
});

----------------------------------------

TITLE: Configuring Post Asset Folder and Marked Renderer in Hexo
DESCRIPTION: YAML configuration to enable post asset folders and configure the Marked renderer to prepend root paths and handle post assets.

LANGUAGE: yaml
CODE:
post_asset_folder: true
marked:
  prependRoot: true
  postAsset: true

----------------------------------------

TITLE: Formatting Paths in Hexo Router
DESCRIPTION: Shows how to format a path string into a valid route path using the format method.

LANGUAGE: javascript
CODE:
hexo.route.format("archives/");
// archives/index.html

----------------------------------------

TITLE: Markdown Image Configuration in Hexo
DESCRIPTION: YAML configuration for enabling direct markdown image embedding with hexo-renderer-marked 3.1.0+.

LANGUAGE: yaml
CODE:
post_asset_folder: true
marked:
  prependRoot: true
  postAsset: true

----------------------------------------

TITLE: Using Caption in Markdown Code Blocks with Prism.js
DESCRIPTION: This example demonstrates how to add a caption to a code block using Prism.js in Markdown.

LANGUAGE: markdown
CODE:
``` js caption
console.log('foo')
```

----------------------------------------

TITLE: Disabling Code Block Wrapping in Hexo Highlighting
DESCRIPTION: YAML configuration to disable wrapping of code blocks in Hexo's syntax highlighting.

LANGUAGE: yaml
CODE:
highlight:
  wrap: false # defaults to true

----------------------------------------

TITLE: Removing a View from Hexo Theme
DESCRIPTION: Removes a view from the Hexo theme using the specified path.

LANGUAGE: javascript
CODE:
hexo.theme.removeView(path);

----------------------------------------

TITLE: Publishing Drafts
DESCRIPTION: Publishes draft content with specified layout and filename.

LANGUAGE: bash
CODE:
$ hexo publish [layout] <filename>

----------------------------------------

TITLE: Using Codeblock Tag with Language, Marking, and Line Numbers in Hexo
DESCRIPTION: Example of using the codeblock tag in Hexo with language specification, line marking, and line numbers.

LANGUAGE: markdown
CODE:
{% codeblock lang:js mark:2,5 %}
const input = [
  { name: 'lorem', item: 'ipsum' },
  { name: 'per', item: 'doming' },
  { name: 'dolor', item: 'lorem' },
  { name: 'usu', item: 'pericula' }
]
{% endcodeblock %}

----------------------------------------

TITLE: Styling Code Block Captions with CSS
DESCRIPTION: CSS rules for styling the caption of code blocks when using Prism.js highlighting.

LANGUAGE: css
CODE:
pre div.caption {
  font-size: 0.9em;
  color: #888;
}

pre div.caption a {
  float: right;
}

----------------------------------------

TITLE: Enabling Post Asset Folder in Hexo Configuration
DESCRIPTION: This YAML snippet shows how to enable the post asset folder feature in Hexo's _config.yml file. When set to true, Hexo will create a separate folder for each post's assets.

LANGUAGE: yaml
CODE:
post_asset_folder: true

----------------------------------------

TITLE: Creating a Feature Branch in Git
DESCRIPTION: Command to create a new feature branch in Git. This is part of the development workflow for adding new features or making changes to Hexo.

LANGUAGE: bash
CODE:
$ git checkout -b new_feature

----------------------------------------

TITLE: Updating Hexo Version in package.json
DESCRIPTION: Update the Hexo version in package.json to 5.0.0 for upgrading.

LANGUAGE: diff
CODE:
``` diff package.json
-  "hexo": "^4.2.1",
+  "hexo": "^5.0.0",
```

----------------------------------------

TITLE: HTML Output for Captioned Code Block with Prism.js
DESCRIPTION: This shows the HTML structure generated for a code block with a caption when using Prism.js highlighting.

LANGUAGE: html
CODE:
<pre><div class="caption"><span>caption</span></div><code>console...</code></pre>

----------------------------------------

TITLE: Loading and Watching Files in Hexo
DESCRIPTION: Demonstrates how to load files from the source directory and theme data using Hexo's load and watch methods. The watch method also continuously monitors for file changes.

LANGUAGE: javascript
CODE:
hexo.load().then(function () {
  // ...
});

hexo.watch().then(function () {
  // You can call hexo.unwatch() later to stop watching.
});

----------------------------------------

TITLE: Combined Generation and Deployment in Hexo
DESCRIPTION: Commands that combine static file generation with deployment. Both commands are equivalent and perform the same operation.

LANGUAGE: bash
CODE:
$ hexo generate --deploy
$ hexo deploy --generate

----------------------------------------

TITLE: Theme Configuration Merging Example
DESCRIPTION: YAML configuration examples showing how theme configs are merged between main config and theme's config files.

LANGUAGE: yaml
CODE:
theme_config:
  a:
    b: 'foo'

----------------------------------------

TITLE: Hexo Default Category Configuration
DESCRIPTION: YAML configuration example showing how to set the default category in Hexo configuration file.

LANGUAGE: yaml
CODE:
default_category: uncategorized

----------------------------------------

TITLE: Proper Exit Handling in Hexo
DESCRIPTION: Demonstrates the correct way to exit Hexo after command execution, ensuring important tasks like saving the database are completed. Includes error handling.

LANGUAGE: javascript
CODE:
hexo
  .call("generate")
  .then(function () {
    return hexo.exit();
  })
  .catch(function (err) {
    return hexo.exit(err);
  });

----------------------------------------

TITLE: Setting Default Permalink Variables in YAML
DESCRIPTION: Example of defining default values for permalink variables in _config.yml configuration file.

LANGUAGE: yaml
CODE:
permalink_defaults:
  lang: en

----------------------------------------

TITLE: Disabling Meta Generator Tag in Hexo Configuration
DESCRIPTION: Shows how to disable the automatic insertion of the meta generator tag in Hexo's _config.yml file for performance optimization.

LANGUAGE: yaml
CODE:
meta_generator: false

----------------------------------------

TITLE: Configuring Permalink Format in Hexo
DESCRIPTION: Examples of valid permalink configurations in Hexo, showing the required trailing slash or .html.

LANGUAGE: yaml
CODE:
``` yml
permalink: :year/:month/:day/:title/ # default
# or
permalink: :year/:month/:day/:title.html
```

----------------------------------------

TITLE: Hexo Injector with Function Export
DESCRIPTION: Example showing alternative module export pattern with explicit hexo parameter passing.

LANGUAGE: javascript
CODE:
/* global hexo */

hexo.extend.injector.register("head_end", require("./lib/inject")(hexo));

LANGUAGE: javascript
CODE:
module.exports = (hexo) => () => {
  const css = hexo.extend.helper.get("css").bind(hexo);
  const { cssPath } = hexo.config.fooPlugin;
  return css(cssPath);
};

LANGUAGE: javascript
CODE:
const injectFn = (hexo) => {
  const css = hexo.extend.helper.get("css").bind(hexo);
  const { cssPath } = hexo.config.fooPlugin;
  return css(cssPath);
};

module.exports = (hexo) => injectFn(hexo);

----------------------------------------

TITLE: Installing Hexo Server Module
DESCRIPTION: Command to install the hexo-server module as a project dependency using npm.

LANGUAGE: bash
CODE:
$ npm install hexo-server --save

----------------------------------------

TITLE: Using Wrap Option in Codeblock Tag Plugin in Hexo
DESCRIPTION: Shows how to use the wrap option in the codeblock tag plugin to control code wrapping on a per-block basis in Hexo.

LANGUAGE: javascript
CODE:
{% codeblock lang:js wrap:false %}
const foo = (bar) => {
  return bar;
};
{% endcodeblock %}

----------------------------------------

TITLE: Setting Custom Permalink in Post Front-matter
DESCRIPTION: Example of setting a custom permalink for a specific post using front-matter.

LANGUAGE: yaml
CODE:
``` yml source/foo-bar.md
---
title: foo bar
permalink: breaking-news/
---
```

----------------------------------------

TITLE: Git Push Command for Main Branch
DESCRIPTION: Command to push the main branch to GitHub repository for initial setup of Hexo site deployment.

LANGUAGE: bash
CODE:
$ git push -u origin main

----------------------------------------

TITLE: Configuring Hexo Plugins Page Layout in YAML
DESCRIPTION: YAML front matter block that specifies the layout configuration for a Hexo plugins page. Sets the layout type, title, data source, partial template, and comments settings.

LANGUAGE: yaml
CODE:
layout: plugins
title: Plugins
data: plugins
partial: plugin
comments: false

----------------------------------------

TITLE: Configuring Custom Feed Template in YAML
DESCRIPTION: Shows how to set a custom template for the feed generator in hexo-generator-feed 2.2.0 using YAML configuration.

LANGUAGE: yaml
CODE:
feed:
  template: './path/to/template'

----------------------------------------

TITLE: Configuring prependRoot Option in hexo-renderer-marked
DESCRIPTION: Configuration example for the prependRoot option which automatically prepends root path to image URLs.

LANGUAGE: yaml
CODE:
root: /blog/
marked:
  prependRoot: true # disabled by default

----------------------------------------

TITLE: Asset Tag Plugin Syntax in Hexo
DESCRIPTION: Examples of Hexo tag plugins for referencing assets with proper path resolution on all pages.

LANGUAGE: text
CODE:
{% asset_path slug %}
{% asset_img slug [title] %}
{% asset_link slug [title] %}

----------------------------------------

TITLE: Configuring Robot Access Rules for Hexo Themes
DESCRIPTION: Defines crawler access rules that prevent indexing of specific Hexo theme directories while allowing access to other content. Blocks access to landscape, light, and phase theme directories.

LANGUAGE: robotstxt
CODE:
User-agent: *
Disallow: /hexo-theme-landscape/
Disallow: /hexo-theme-light/
Disallow: /hexo-theme-phase/

----------------------------------------

TITLE: Using hexo-generator-feed 2.1.0
DESCRIPTION: Node.js feed generator plugin for Hexo requiring Node 8.10+. Supports RSS autodiscovery, feed icons in RSS2, and can generate both atom and RSS2 feeds. Includes fixes for pathname encoding and autodiscovery element injection.



----------------------------------------

TITLE: Installing Cheerio Dependency
DESCRIPTION: Shell command to install cheerio as a dependency after it was removed from Hexo's core dependencies.

LANGUAGE: shell
CODE:
npm install --save cheerio

----------------------------------------

TITLE: Checking File Renderability in Hexo
DESCRIPTION: Shows how to use the isRenderable method to check if a file is renderable based on registered renderers.

LANGUAGE: javascript
CODE:
hexo.render.isRenderable("layout.swig"); // true
hexo.render.isRenderable("image.png"); // false

----------------------------------------

TITLE: Generating Hexo Website
DESCRIPTION: This command generates the static files for the Hexo website.

LANGUAGE: bash
CODE:
hexo generate

----------------------------------------

TITLE: Configuring Pretty URLs in Hexo
DESCRIPTION: YAML configuration snippet to remove the trailing index.html from permalink variables in Hexo.

LANGUAGE: yml
CODE:
pretty_urls:
  trailing_index: false

----------------------------------------

TITLE: Enabling ES6 Support in hexo-uglify
DESCRIPTION: Demonstrates how to enable ES6+ syntax support in hexo-uglify 1.1.0 using YAML configuration to utilize Terser for minification.

LANGUAGE: yaml
CODE:
uglify:
  es6: true

----------------------------------------

TITLE: Implementing Template Precompilation in JavaScript
DESCRIPTION: Example implementation of template precompilation for EJS renderer to improve generation speed. Shows how to add a compile function to the renderer using EJS.

LANGUAGE: javascript
CODE:
var ejs = require('ejs');
var assign = require('object-assign');

function ejsRenderer(data, locals) {
  return ejs.render(data.text, assign({filename: data.path}, locals));
}

ejsRenderer.compile = function(data) {
  return ejs.compile(data.text, {
    filename: data.path
  });
};

module.exports = ejsRenderer;

----------------------------------------

TITLE: Using hexo-util 1.5.0
DESCRIPTION: Utility package for Hexo with updated URL encoding behavior for IDN domains. Adds external link checking functionality and improves HTML escaping. Includes fixes for highlight wrapping options and backquote escaping.



----------------------------------------

TITLE: Getting a View in Hexo Theme
DESCRIPTION: Retrieves a view from the Hexo theme object using a specified path.

LANGUAGE: javascript
CODE:
hexo.theme.getView(path);

----------------------------------------

TITLE: Modifying package.json for Hexo 3.0 Update
DESCRIPTION: This snippet shows how to modify the package.json file to prepare for updating to Hexo 3.0. It sets the hexo version to an empty string, allowing for a fresh installation of the new version.

LANGUAGE: json
CODE:
{
  "hexo": {
    "version": ""
  }
}

----------------------------------------

TITLE: Publishing Drafts Using Hexo CLI
DESCRIPTION: Command line syntax for publishing drafts with optional layout specification using the Hexo CLI

LANGUAGE: bash
CODE:
$ hexo publish [layout] <filename>

----------------------------------------

TITLE: Pushing a Feature Branch to GitHub
DESCRIPTION: Command to push a new feature branch to the remote repository on GitHub. This is done after making changes and before creating a pull request.

LANGUAGE: bash
CODE:
$ git push origin new_feature

----------------------------------------

TITLE: Installing Hexo Core Locally
DESCRIPTION: This command installs the Hexo core module locally in the project directory. It adds Hexo as a dependency in the project's package.json file.

LANGUAGE: bash
CODE:
$ npm install hexo --save

----------------------------------------

TITLE: Disabling Syntax Highlighting in Hexo (pre-v7.0.0)
DESCRIPTION: YAML configuration to disable both highlight.js and prismjs in Hexo versions before 7.0.0.

LANGUAGE: yaml
CODE:
# _config.yml
highlight:
  enable: false
prismjs:
  enable: false

----------------------------------------

TITLE: Installing Hexo Package for Advanced Usage
DESCRIPTION: Command to install the main Hexo package for advanced users who prefer direct package usage over CLI.

LANGUAGE: bash
CODE:
$ npm install hexo

----------------------------------------

TITLE: Default Language Configuration
DESCRIPTION: YAML configuration for setting default language in permalink variables

LANGUAGE: yaml
CODE:
permalink_defaults:
  lang: en

----------------------------------------

TITLE: Defining Code Blocks in Hexo Markdown
DESCRIPTION: Demonstrates three ways to create code blocks in Hexo: using the codeblock tag plugin, the code tag plugin, and Markdown's fenced code block syntax with Hexo extensions.

LANGUAGE: markdown
CODE:
{% codeblock [title] [lang:language] [url] [link text] [additional options] %}
code snippet
{% endcodeblock %}

{% code [title] [lang:language] [url] [link text] [additional options] %}
code snippet
{% endcode %}

```[language] [title] [url] [link text] [additional options]
code snippet
```

----------------------------------------

TITLE: Configuring i18n Directory in Hexo YAML
DESCRIPTION: Shows how to set the 'i18n_dir' in Hexo's _config.yml to enable automatic language detection based on URL structure. This allows for language-specific URL paths.

LANGUAGE: yaml
CODE:
i18n_dir: :lang

----------------------------------------

TITLE: Multi-language Permalink Configuration
DESCRIPTION: YAML configuration for setting up multi-language support in permalinks and post names

LANGUAGE: yaml
CODE:
permalink: :lang/:title/
new_post_name: :lang/:title.md

----------------------------------------

TITLE: Creating a Modular Tag Plugin in Hexo
DESCRIPTION: Demonstrates how to create a modular tag plugin by separating the main registration and the tag function into different files. This approach allows for better code organization and reusability.

LANGUAGE: javascript
CODE:
hexo.extend.tag.register("foo", require("./lib/foo")(hexo));

LANGUAGE: javascript
CODE:
module.exports = hexo => {
  return function fooFn(args) {
    const [firstArg] = args;

    const { config } = hexo;
    const editor = config.author + firstArg;

    const { config: themeCfg } = hexo.theme;
    if (themeCfg.fancybox) // do something...

    const { title, _content, content } = this;

    return 'foo';
  };
};

----------------------------------------

TITLE: Disabling Syntax Highlighting in Hexo (v7.0.0+)
DESCRIPTION: YAML configuration to disable syntax highlighting in Hexo versions 7.0.0 and above by setting syntax_highlighter to empty.

LANGUAGE: yaml
CODE:
# _config.yml
syntax_highlighter: # empty

----------------------------------------

TITLE: Structuring Hexo Landing Page Features in HTML
DESCRIPTION: This HTML snippet creates an unordered list to display the main features of Hexo. Each feature is represented by an icon, title, and description. The structure is designed to be easily styled with CSS for a visually appealing layout.

LANGUAGE: HTML
CODE:
<ul id="intro-feature-list">
  <li class="intro-feature-wrap">
    <div class="intro-feature">
      <div class="intro-feature-icon">
        <i class="fa fa-bolt"></i>
      </div>
      <h3 class="intro-feature-title">Blazing Fast</h3>
      <p class="intro-feature-desc">Incredible generating speed powered by Node.js. Hundreds of files take only seconds to build.</p>
    </div>
  </li>
  <li class="intro-feature-wrap">
    <div class="intro-feature">
      <div class="intro-feature-icon">
        <i class="fa fa-pencil"></i>
      </div>
      <h3 class="intro-feature-title">Markdown Support</h3>
      <p class="intro-feature-desc">All features of GitHub Flavored Markdown are supported, including most Octopress plugins.</p>
    </div></li><li class="intro-feature-wrap">
    <div class="intro-feature">
      <div class="intro-feature-icon">
        <i class="fa fa-cloud-upload"></i>
      </div>
      <h3 class="intro-feature-title">One-Command Deployment</h3>
        <p class="intro-feature-desc">You only need one command to deploy your site to GitHub Pages, Heroku or other platforms.</p>
      </div></li><li class="intro-feature-wrap">
    <div class="intro-feature">
      <div class="intro-feature-icon">
        <i class="fa fa-cog"></i>
      </div>
      <h3 class="intro-feature-title">Plugins</h3>
      <p class="intro-feature-desc">Features powerful APIs for limitless extensibility. Various plugins are available to support most template engines (EJS, Pug, Nunjucks, and many others). Easily integrate with existing NPM packages (Babel, PostCSS, Less/Sass, etc).</p>
    </div>
  </li>
</ul>

----------------------------------------

TITLE: Creating an Asynchronous File Include Tag in Hexo
DESCRIPTION: Demonstrates how to create an asynchronous tag plugin that reads and includes file contents. This example uses the 'async' option and returns a promise.

LANGUAGE: javascript
CODE:
var fs = require("hexo-fs");
var pathFn = require("path");

hexo.extend.tag.register(
  "include_code",
  function (args) {
    var filename = args[0];
    var path = pathFn.join(hexo.source_dir, filename);

    return fs.readFile(path).then(function (content) {
      return "<pre><code>" + content + "</code></pre>";
    });
  },
  { async: true }
);

----------------------------------------

TITLE: Accessing User Configuration - Factory Method
DESCRIPTION: Example of accessing user configuration using factory functions and closure patterns.

LANGUAGE: javascript
CODE:
/* global hexo */

hexo.extend.injector.register("head_end", require("./lib/inject")(hexo));

LANGUAGE: javascript
CODE:
module.exports = (hexo) => () => {
  const css = hexo.extend.helper.get("css").bind(hexo);
  const { cssPath } = hexo.config.fooPlugin;
  return css(cssPath);
};

LANGUAGE: javascript
CODE:
const injectFn = (hexo) => {
  const css = hexo.extend.helper.get("css").bind(hexo);
  const { cssPath } = hexo.config.fooPlugin;
  return css(cssPath);
};

module.exports = (hexo) => injectFn(hexo);

----------------------------------------

TITLE: Demonstrating Hexo Template Engine Selection
DESCRIPTION: This snippet illustrates how Hexo selects the template engine based on the file extension of the template files in the layout folder.

LANGUAGE: plain
CODE:
layout.ejs   - uses EJS
layout.njk   - uses Nunjucks

----------------------------------------

TITLE: Setting a Scaffold in Hexo (JavaScript)
DESCRIPTION: Creates or updates a scaffold with the specified name and content using the Hexo API. This function allows for the creation or modification of scaffold templates.

LANGUAGE: javascript
CODE:
hexo.scaffold.set(name, content);

----------------------------------------

TITLE: Configuring Highlight.js in Hexo (pre-v7.0.0)
DESCRIPTION: YAML configuration for enabling and customizing highlight.js in Hexo versions before 7.0.0.

LANGUAGE: yaml
CODE:
# _config.yml
highlight:
  enable: true
  auto_detect: false
  line_number: true
  line_threshold: 0
  tab_replace: "  "
  exclude_languages:
    - example
  wrap: true
  hljs: false
prismjs:
  enable: false

----------------------------------------

TITLE: Configuring Categories and Tags in Hexo Front-matter
DESCRIPTION: Example of defining categories and tags in Hexo Front-matter using YAML. This snippet shows how to create a hierarchical category structure and add multiple tags to a post.

LANGUAGE: yaml
CODE:
categories:
  - Sports
  - Baseball
tags:
  - Injury
  - Fight
  - Shocking

----------------------------------------

TITLE: Getting a Scaffold in Hexo (JavaScript)
DESCRIPTION: Retrieves a scaffold by name using the Hexo API. This function is used to fetch existing scaffold templates for content creation.

LANGUAGE: javascript
CODE:
hexo.scaffold.get(name);

----------------------------------------

TITLE: Accessing User Configuration - Direct Approach
DESCRIPTION: Direct method to access user configuration within the injector function.

LANGUAGE: javascript
CODE:
const css = hexo.extend.helper.get("css").bind(hexo);

hexo.extend.injector.register("head_end", () => {
  const { cssPath } = hexo.config.fooPlugin;
  return css(cssPath);
});

----------------------------------------

TITLE: Rendered HTML Output from Hexo Template
DESCRIPTION: This snippet shows the expected HTML output after rendering the EJS template that uses the menu data file. It displays the generated HTML links for the menu items.

LANGUAGE: html
CODE:
<a href="/"> Home </a>
<a href="/gallery/"> Gallery </a>
<a href="/archives/"> Archives </a>

----------------------------------------

TITLE: Configuring Hexo Theme Page YAML Front Matter
DESCRIPTION: YAML front matter configuration block that defines the basic settings for a Hexo themes listing page. Specifies the layout type, page title, data source, partial template, and disables comments.

LANGUAGE: yaml
CODE:
layout: plugins
title: Themes
data: themes
partial: theme
comments: false

----------------------------------------

TITLE: Creating New Posts in Hexo (JavaScript)
DESCRIPTION: Creates a new post in Hexo with specified data attributes. Supports customization of title, slug, layout, path, and date through the data parameter. Can optionally replace existing files.

LANGUAGE: javascript
CODE:
hexo.post.create(data, replace);

----------------------------------------

TITLE: Registering a Tag Plugin in Hexo
DESCRIPTION: Demonstrates how to register a new tag plugin in Hexo using the hexo.extend.tag.register() method. The function takes the tag name, a handler function, and optional configuration.

LANGUAGE: javascript
CODE:
hexo.extend.tag.register(
  name,
  function (args, content) {
    // ...
  },
  options,
);

----------------------------------------

TITLE: Publishing Drafts in Hexo (JavaScript)
DESCRIPTION: Publishes a draft post to make it publicly visible. Requires a slug in the data parameter and supports optional layout configuration. Can replace existing files if specified.

LANGUAGE: javascript
CODE:
hexo.post.publish(data, replace);

----------------------------------------

TITLE: HTML Output for Unhighlighted Code Block
DESCRIPTION: Example of HTML output for a code block when no built-in syntax highlighting is enabled in Hexo.

LANGUAGE: html
CODE:
<pre>
  <code class="yaml">hello: hexo</code>
</pre>

----------------------------------------

TITLE: Disabling Syntax Highlighting in Hexo (v7.0.0+)
DESCRIPTION: YAML configuration to disable syntax highlighting in Hexo versions 7.0.0 and above by setting the syntax_highlighter option to empty.

LANGUAGE: yaml
CODE:
# _config.yml
syntax_highlighter: # empty

----------------------------------------

TITLE: Graceful Exit in Hexo
DESCRIPTION: Demonstrates the proper way to exit Hexo after command execution, ensuring important tasks like saving the database are completed. Includes error handling for unsuccessful command execution.

LANGUAGE: javascript
CODE:
hexo
  .call("generate")
  .then(function () {
    return hexo.exit();
  })
  .catch(function (err) {
    return hexo.exit(err);
  });

----------------------------------------

TITLE: Implementing Async Stylus Renderer
DESCRIPTION: Example of registering an asynchronous Stylus renderer that converts .styl files to CSS. Shows both callback and Promise-based implementations.

LANGUAGE: javascript
CODE:
var stylus = require("stylus");

// Callback
hexo.extend.renderer.register(
  "styl",
  "css",
  function (data, options, callback) {
    stylus(data.text).set("filename", data.path).render(callback);
  },
);

// Promise
hexo.extend.renderer.register("styl", "css", function (data, options) {
  return new Promise(function (resolve, reject) {
    resolve("test");
  });
});

----------------------------------------

TITLE: Configuring Highlight.js in Hexo (pre-v7.0.0)
DESCRIPTION: YAML configuration for using highlight.js as the syntax highlighter in Hexo versions before 7.0.0, with various options explained.

LANGUAGE: yaml
CODE:
# _config.yml
highlight:
  enable: true
  auto_detect: false
  line_number: true
  line_threshold: 0
  tab_replace: "  "
  exclude_languages:
    - example
  wrap: true
  hljs: false
prismjs:
  enable: false

----------------------------------------

TITLE: Installing Dependencies for Hexo Website
DESCRIPTION: This snippet shows how to clone the Hexo website repository, navigate to the project directory, and install the necessary dependencies using npm.

LANGUAGE: bash
CODE:
git clone https://github.com/hexojs/site.git
cd site
npm install

----------------------------------------

TITLE: Defining Hexo Post Frontmatter in YAML
DESCRIPTION: This snippet shows the frontmatter section of a Hexo blog post. It defines the title of the post using a placeholder that will be replaced with the actual title when the post is generated.

LANGUAGE: yaml
CODE:
---
title: {{ title }}
---