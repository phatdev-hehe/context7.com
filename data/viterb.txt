TITLE: Installing Vite Ruby Gem in Ruby Project
DESCRIPTION: Add the vite_rails (or vite_hanami for Hanami apps, vite_ruby for Rack apps) gem to your application's Gemfile. This is the first step in integrating Vite with your Ruby project.

LANGUAGE: ruby
CODE:
gem 'vite_rails' # vite_hanami for Hanami apps, vite_ruby for Rack apps

----------------------------------------

TITLE: Installing and Configuring Vite Ruby via Command Line
DESCRIPTION: After adding the gem to the Gemfile, run these commands to install Vite Ruby and generate the necessary configuration files. This sets up the initial Vite configuration for your Ruby project.

LANGUAGE: bash
CODE:
bundle install
bundle exec vite install

----------------------------------------

TITLE: Installing Vite Rails Gem
DESCRIPTION: Adding the vite_rails gem to a Ruby application's Gemfile for Vite integration.

LANGUAGE: ruby
CODE:
gem 'vite_rails'

----------------------------------------

TITLE: Configuring Rails Plugin for Vite.js
DESCRIPTION: Configuration for vite-plugin-rails which bundles essential plugins for Rails applications including environment variables, full reload, Stimulus HMR, and asset compression.

LANGUAGE: typescript
CODE:
plugins: [
  Rails({
    envVars: { RAILS_ENV: 'development' },
  }),
],

----------------------------------------

TITLE: Configuring Vite Ruby JSON Settings
DESCRIPTION: Standard configuration file for Vite Ruby defining environment-specific settings including watch paths, build directories, and ports.

LANGUAGE: json
CODE:
{
  "all": {
    "watchAdditionalPaths": []
  },
  "development": {
    "autoBuild": true,
    "publicOutputDir": "vite-dev",
    "port": 3036
  },
  "test": {
    "autoBuild": true,
    "publicOutputDir": "vite-test",
    "port": 3037
  }
}

----------------------------------------

TITLE: Installing Vite Rails in Bash
DESCRIPTION: These commands install the Vite Rails gem and run the initial setup. It uses Bundler to install the gem and then executes the vite install command.

LANGUAGE: bash
CODE:
bundle install
bundle exec vite install

----------------------------------------

TITLE: Importing Components with Vite Aliases in JavaScript
DESCRIPTION: Demonstrates how to use the '~/' and '@/' aliases to import files from the sourceCodeDir in Vite.

LANGUAGE: javascript
CODE:
import App from '~/components/App.vue'
import '@/channels/index.js'

----------------------------------------

TITLE: Initializing Vite Configuration with Ruby Plugin
DESCRIPTION: Basic Vite configuration setup with the Ruby plugin for Rails integration.

LANGUAGE: javascript
CODE:
// vite.config.ts
import { defineConfig } from 'vite'
import RubyPlugin from 'vite-plugin-ruby'

export default defineConfig({
  plugins: [
    RubyPlugin(),
  ],
})

----------------------------------------

TITLE: Using import.meta.glob in Vite 3 with TypeScript
DESCRIPTION: Demonstrates the changes in import.meta.glob behavior in Vite 3, where keys are now relative to the current module. It shows the before and after transformation of the glob import.

LANGUAGE: typescript
CODE:
// app/frontend/controllers/index.js
const controllers = import.meta.glob('../**/*_controller.js', { eager: true })

LANGUAGE: typescript
CODE:
const controllers = {
-  '../controllers/home_controller.js': () => {}
+  './home_controller.js': () => {}
}

----------------------------------------

TITLE: Configuring vite-plugin-rails in Vite configuration
DESCRIPTION: Example of how to add vite-plugin-rails to the plugins array in a Vite configuration file. It also shows usage with another plugin (@vitejs/plugin-vue) for context.

LANGUAGE: typescript
CODE:
// vite.config.ts
import Vue from '@vitejs/plugin-vue' // Example, could be using other plugins.
import ViteRails from 'vite-plugin-rails'

export default {
  plugins: [
    Vue(),
    ViteRails(),
  ],
};

----------------------------------------

TITLE: Importing CSS Styles in JavaScript
DESCRIPTION: Shows how to import CSS files directly in JavaScript for automatic injection on load.

LANGUAGE: javascript
CODE:
import '~/styles/theme.css'

----------------------------------------

TITLE: Using Vite Asset Path Helpers in Rails ERB
DESCRIPTION: Shows how to use Vite asset path helpers for various asset types in Rails ERB templates.

LANGUAGE: erb
CODE:
<link rel="apple-touch-icon" type="image/png" href="<%= vite_asset_path 'images/favicon.png' %>" />
<link rel="prefetch" href="<%= vite_asset_path 'typography.css' %>" />

----------------------------------------

TITLE: Setting Up Environment Variables Plugin
DESCRIPTION: Configuration for vite-plugin-environment to expose specific environment variables to client-side code.

LANGUAGE: typescript
CODE:
plugins: [
  Environment(['NODE_ENV', 'API_KEY', 'APP_VERSION']),

----------------------------------------

TITLE: Accessing Asset Path in Ruby with Vite
DESCRIPTION: Example of using vite_asset_path helper to reference images stored in the frontend assets directory.

LANGUAGE: ruby
CODE:
vite_asset_path 'images/logo.svg' # app/frontend/images/logo.svg

----------------------------------------

TITLE: Basic Vite Asset Integration in Hanami View
DESCRIPTION: Example of including Vite-managed assets in a Hanami view template header, showing usage of vite_client, vite_stylesheet, and vite_typescript helpers

LANGUAGE: erb
CODE:
<head>
  <title>Example</title>
  <%= favicon %>
  <%= vite_client %>

  <%= vite_stylesheet 'styles' %>
  <%= vite_typescript 'application' %>
</head>

----------------------------------------

TITLE: Running Linters and Tests for Vite Ruby
DESCRIPTION: These commands run various checks and tests to ensure code quality and functionality. They include JavaScript linting, Ruby style checking, and running the test suite.

LANGUAGE: shell
CODE:
pnpm lint --fix

LANGUAGE: shell
CODE:
bin/rubocop -A

LANGUAGE: shell
CODE:
bin/m

----------------------------------------

TITLE: Enabling Debug Output for Vite Commands
DESCRIPTION: Demonstrates how to enable debug output for Vite commands using the --debug flag and DEBUG environment variable.

LANGUAGE: bash
CODE:
DEBUG=*
DEBUG=vite:*
DEBUG=vite-plugin-ruby:*

----------------------------------------

TITLE: Disabling Preload Links Header in Rails Development Configuration
DESCRIPTION: This Ruby code snippet shows how to disable the preload links header in the Rails development environment, which can work around a Safari caching bug affecting HMR.

LANGUAGE: ruby
CODE:
# config/environments/development.rb

Rails.application.configure do
  # Disable `Link: ... rel=preload` header to workaround Safari caching bug
  # https://bugs.webkit.org/show_bug.cgi?id=193533
  config.action_view.preload_links_header = false
end

----------------------------------------

TITLE: Installing Vite Rails Legacy Gem in Ruby
DESCRIPTION: This code snippet shows how to add the vite_rails_legacy gem to a Rails application's Gemfile. This is the first step in integrating Vite with a Rails 4 project.

LANGUAGE: ruby
CODE:
gem 'vite_rails_legacy'

----------------------------------------

TITLE: Configuring Capistrano for Vite Ruby in Ruby
DESCRIPTION: Shows how to extend Capistrano configuration to work with Vite Ruby by linking directories and specifying asset manifests in the deploy.rb file.

LANGUAGE: ruby
CODE:
append :linked_dirs, "public/vite"
append :assets_manifests, "public/vite/.vite/manifest*.*"

----------------------------------------

TITLE: Implementing Vite Legacy JavaScript Tags in ERB
DESCRIPTION: Example of using vite_legacy_javascript_tag in an ERB template to include legacy JavaScript and polyfills, alongside modern JavaScript tags.

LANGUAGE: erb
CODE:
<head>
  <title>Example</title>
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  <%= vite_client_tag %>

  <%= vite_javascript_tag 'application' %>
</head>
<body>
  <%= yield %>
  <%= vite_legacy_javascript_tag 'application' %>
</body>

----------------------------------------

TITLE: Using Vite Asset Path Helper in HAML
DESCRIPTION: Demonstrates how to use vite_asset_path helper for images and other asset types in HAML templates

LANGUAGE: haml
CODE:
%img{ src: vite_asset_path('images/logo.svg') }
%link{ rel: 'prefetch', href: vite_asset_path('typography.css') }

----------------------------------------

TITLE: Final Asset Path Configuration in Ruby
DESCRIPTION: Examples of correct path usage after implementing the recommended directory structure with additionalEntrypoints.

LANGUAGE: ruby
CODE:
✅ vite_javascript_tag 'entrypoints/nested/application'
✅ vite_asset_path 'images/logo.svg'

----------------------------------------

TITLE: Configuring Vite Aliases
DESCRIPTION: Vite configuration example showing how to set up path aliases for asset resolution using defineConfig.

LANGUAGE: javascript
CODE:
import { resolve } from 'path'
import { defineConfig } from 'vite'

export default defineConfig({
  resolve: {
    alias: {
      '@assets': resolve(__dirname, 'app/assets'),
    },
  },
})

----------------------------------------

TITLE: Docker Setup Commands
DESCRIPTION: Commands for setting up the application using Docker, including building images and database creation.

LANGUAGE: bash
CODE:
bin/docker_setup

----------------------------------------

TITLE: Importing and Rendering Home Component in Vue.js
DESCRIPTION: Vue.js script that imports the Home component from the theme directory and sets it up for use in the template. This script is used to render the home page content.

LANGUAGE: vue
CODE:
<script setup>
import Home from '/@theme/components/Home.vue'
</script>

<Home />

----------------------------------------

TITLE: Registering Stimulus Controllers
DESCRIPTION: Using stimulus-vite-helpers to automatically register all Stimulus controllers using Vite's glob import feature.

LANGUAGE: typescript
CODE:
const controllers = import.meta.glob('./**/*_controller.js', { eager: true })
registerControllers(application, controllers)

----------------------------------------

TITLE: Installing and Configuring Vite Padrino via Bash
DESCRIPTION: Run these commands to install the gem, generate configuration files, and set up a sample Vite integration in your Padrino project.

LANGUAGE: bash
CODE:
bundle install
bundle exec vite install

----------------------------------------

TITLE: Checking Vite Ruby Dev Server Status in Ruby Console
DESCRIPTION: This snippet demonstrates how to verify if the Vite Ruby development server is running by using the ViteRuby instance method in a Ruby console.

LANGUAGE: ruby
CODE:
> ViteRuby.instance.dev_server_running?

----------------------------------------

TITLE: Development Server Commands
DESCRIPTION: Commands for starting the development servers, including both Rails and Vite.js servers.

LANGUAGE: bash
CODE:
bin/rails s
bin/vite dev

----------------------------------------

TITLE: Using JS From Routes API Example
DESCRIPTION: Example of using js_from_routes to generate type-safe path helpers and API methods from Rails routes.

LANGUAGE: typescript
CODE:
import { videoClips } from '~/api'

const video = await videoClips.get({ id: '5' })

const path = videoClips.download.path(video) // "/video_clips/5/download"

----------------------------------------

TITLE: Using Local JavaScript Library with PNPM
DESCRIPTION: Shows how to use a local JavaScript library in package.json when using PNPM.

LANGUAGE: json
CODE:
"devDependencies": {
  "vite": "file:../vite/packages/vite"
}

----------------------------------------

TITLE: Vite Asset Path Usage in Hanami Templates
DESCRIPTION: Demonstrates using vite_asset_path helper to reference static assets like images and CSS files in Hanami templates

LANGUAGE: erb
CODE:
<img src="<%= vite_asset_path 'images/logo.svg' %>" />
<link rel="prefetch" href="<%= vite_asset_path 'typography.css' %>" />

----------------------------------------

TITLE: Using Local Path for Ruby Gem Dependency
DESCRIPTION: Shows how to use a local path for a Ruby gem dependency in a Gemfile.

LANGUAGE: ruby
CODE:
gem 'vite_ruby', path: '../vite_ruby' # Assuming the same parent directory

----------------------------------------

TITLE: HTML Header with Project Links and Badges
DESCRIPTION: HTML markup for the project header including logo, links, and status badges for build, maintainability, test coverage, version and license.

LANGUAGE: html
CODE:
<h1 align="center">
  <a href="https://vite-ruby.netlify.app/">
    <img src="https://raw.githubusercontent.com/ElMassimo/vite_ruby/main/logo.svg" width="120px"/>
  </a>

  <br>

  <a href="https://vite-ruby.netlify.app/">
    Vite Ruby
  </a>

  <br>

  <p align="center">
    <a href="https://github.com/ElMassimo/vite_ruby/actions">
      <img alt="Build Status" src="https://github.com/ElMassimo/vite_ruby/workflows/build/badge.svg"/>
    </a>
    <a href="https://codeclimate.com/github/ElMassimo/vite_ruby">
      <img alt="Maintainability" src="https://codeclimate.com/github/ElMassimo/vite_ruby/badges/gpa.svg"/>
    </a>
    <a href="https://codeclimate.com/github/ElMassimo/vite_ruby">
      <img alt="Test Coverage" src="https://codeclimate.com/github/ElMassimo/vite_ruby/badges/coverage.svg"/>
    </a>
    <a href="https://rubygems.org/gems/vite_ruby">
      <img alt="Gem Version" src="https://img.shields.io/gem/v/vite_ruby.svg?colorB=e9573f"/>
    </a>
    <a href="https://github.com/ElMassimo/vite_ruby/blob/master/LICENSE.txt">
      <img alt="License" src="https://img.shields.io/badge/license-MIT-428F7E.svg"/>
    </a>
  </p>
</h1>

----------------------------------------

TITLE: Configuring Vite Development Port and Output Directory
DESCRIPTION: Configuration settings for vite.json to avoid conflicts with parent application by specifying unique development port and public output directory.

LANGUAGE: json
CODE:
{
  "publicOutputDir": "unique-dir",
  "development": {
    "port": "unique-port"
  }
}

----------------------------------------

TITLE: Installing and Configuring Vite for Hanami
DESCRIPTION: Run these commands to install the gem, generate configuration files, and set up a sample Vite configuration for your Hanami project.

LANGUAGE: bash
CODE:
bundle install
bundle exec vite install

----------------------------------------

TITLE: Configuring Empty Additional Entrypoints in Vite
DESCRIPTION: JSON configuration to opt out of default additional entrypoints bundling in Vite.

LANGUAGE: json
CODE:
    "additionalEntrypoints": []

----------------------------------------

TITLE: Configuring compression options in vite-plugin-rails
DESCRIPTION: Examples of how to configure compression options in vite-plugin-rails, including disabling Brotli compression or disabling compression entirely.

LANGUAGE: typescript
CODE:
    ViteRails({
      compress: { brotli: false }
    }),

LANGUAGE: typescript
CODE:
    ViteRails({
      compress: false
    }),

----------------------------------------

TITLE: Using Vite Asset URL Helper in Rails ERB
DESCRIPTION: Demonstrates how to use the Vite asset URL helper for full URLs in Rails ERB templates.

LANGUAGE: erb
CODE:
<meta property="twitter:image" content="<%= vite_asset_url 'images/social-banner.png' %>">

----------------------------------------

TITLE: Using Asset Path Helper in Ruby
DESCRIPTION: Example of using vite_asset_path helper to reference image assets from the frontend images directory.

LANGUAGE: ruby
CODE:
vite_asset_path 'images/logo.svg' # app/frontend/images/logo.svg

----------------------------------------

TITLE: Setting Up Development Environment for Vite Ruby
DESCRIPTION: These commands are used to set up the development environment for the Vite Ruby project. They install the necessary Ruby gems and Node.js packages using Bundler and pnpm respectively.

LANGUAGE: shell
CODE:
bundle install

LANGUAGE: shell
CODE:
pnpm install

----------------------------------------

TITLE: Adding Stylesheets with ERB Template Helper
DESCRIPTION: Demonstrates how to include stylesheets in ERB templates using the vite_stylesheet_tag helper.

LANGUAGE: erb
CODE:
<%= vite_stylesheet_tag 'styles.scss' %> # app/frontend/entrypoints/styles.scss

----------------------------------------

TITLE: Setting Runtime Environment Variables in Ruby
DESCRIPTION: Example of configuring runtime environment variables for Vite Ruby using a Ruby configuration file.

LANGUAGE: ruby
CODE:
# config/vite.rb
ViteRuby.env['ADMINISTRATOR_ASSETS_PATH'] =
  "#{ Gem.loaded_specs['administrator'].full_gem_path }/app/frontend"

----------------------------------------

TITLE: Configuring Host for Vite Ruby in JSON
DESCRIPTION: This JSON configuration snippet shows how to explicitly set the host to '127.0.0.1' for Vite Ruby in the development environment, which can help resolve connection issues.

LANGUAGE: json
CODE:
  "development": {
    "host": "127.0.0.1",
    "port": 3036,


----------------------------------------

TITLE: Configuring Import Aliases in Vite
DESCRIPTION: Setting up path aliases for imports in Vite configuration using resolve.alias.

LANGUAGE: javascript
CODE:
import { resolve } from 'path'
import { defineConfig } from 'vite'

export default defineConfig({
  resolve: {
    alias: {
      '@assets': resolve(__dirname, 'app/assets'),
    },
  },
})

----------------------------------------

TITLE: Using Vite Image and Picture Tag Helpers in Rails ERB
DESCRIPTION: Demonstrates the usage of Vite-specific image and picture tag helpers in Rails ERB templates.

LANGUAGE: erb
CODE:
<%= vite_image_tag 'images/logo.jpg' %>
<%= vite_picture_tag 'images/logo.avif', 'images/logo.jpg', image: {alt: 'example'}) %>

----------------------------------------

TITLE: Linking Local JavaScript Library with Yarn
DESCRIPTION: Demonstrates how to link a local JavaScript library using Yarn link command.

LANGUAGE: bash
CODE:
cd packages/vite # Location of the package.json for the library
yarn link

# In the project you are debugging:
yarn link vite # Name of the library

----------------------------------------

TITLE: Smart Output HTML Example in Production
DESCRIPTION: Shows the complete HTML output generated by vite_javascript_tag in production, including preloaded modules and stylesheets

LANGUAGE: html
CODE:
<script src="/vite/assets/application.a0ba047e.js" type="module" crossorigin="anonymous"/>
<link rel="modulepreload" href="/vite/assets/example_import.8e1fddc0.js" as="script" type="text/javascript" crossorigin="anonymous">
<link rel="stylesheet" media="screen" href="/vite/assets/application.cccfef34.css">

----------------------------------------

TITLE: Installing and Initializing Vite Rails Legacy in Bash
DESCRIPTION: These Bash commands install the vite_rails_legacy gem and run the Vite installation script. This sets up the necessary configuration files and a sample setup for using Vite in a Rails 4 project.

LANGUAGE: bash
CODE:
bundle install
bundle exec vite install

----------------------------------------

TITLE: Configuring Windi CSS Plugin
DESCRIPTION: Setup for vite-plugin-windicss with configuration for scanning utility classes in various file types and directories.

LANGUAGE: typescript
CODE:
plugins: [
  WindiCSS({
    root: __dirname,
    scan: {
      fileExtensions: ['erb', 'haml', 'html', 'vue', 'js', 'ts', 'jsx', 'tsx'],
      dirs: ['app/views', 'app/frontend'], // or app/javascript, or app/packs
    },
  }),

----------------------------------------

TITLE: Installing Vite Ruby Rake Tasks in Ruby
DESCRIPTION: Demonstrates how to add Vite Ruby rake tasks to a non-Rails Ruby application by requiring 'vite_ruby' and installing the tasks in the Rakefile.

LANGUAGE: ruby
CODE:
require 'vite_ruby'
ViteRuby.install_tasks

----------------------------------------

TITLE: Smart Output HTML Example in Development
DESCRIPTION: Shows the generated HTML output when using vite_javascript_tag in development mode

LANGUAGE: html
CODE:
<script src="/vite/assets/application.js" type="module" crossorigin="anonymous"/>

----------------------------------------

TITLE: Fixing User Config Server Origin Override
DESCRIPTION: Bug fix to prevent overriding userConfig.server.origin when provided by the user.

LANGUAGE: JavaScript
CODE:
// No code snippet available, this was a bug fix

----------------------------------------

TITLE: Configuring Full Page Reload Plugin
DESCRIPTION: Setup for vite-plugin-full-reload to trigger page reloads when server-side files are modified, with a specified delay.

LANGUAGE: typescript
CODE:
plugins: [
  FullReload(['config/routes.rb', 'app/views/**/*'], { delay: 200 })

----------------------------------------

TITLE: Setting up Vite Configuration with Ruby Plugin
DESCRIPTION: TypeScript configuration file for Vite that includes the vite-plugin-ruby plugin for Rails integration.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite'
import RubyPlugin from 'vite-plugin-ruby'

export default defineConfig({
  plugins: [RubyPlugin()]
})

----------------------------------------

TITLE: Using Breakpoints in Ruby with Pry
DESCRIPTION: Demonstrates how to use breakpoints in Ruby code using the pry debugger.

LANGUAGE: ruby
CODE:
.tap { |val| binding.pry }

----------------------------------------

TITLE: Importing Component Files Using Vite Glob Imports
DESCRIPTION: JavaScript code demonstrating how to use Vite's glob imports to automatically import all component files from a directory.

LANGUAGE: javascript
CODE:
// app/frontend/entrypoints/application.js
import.meta.glob('../../components/**/*_component.js', { eager: true })

----------------------------------------

TITLE: Configuring Vite with Ruby Plugin
DESCRIPTION: Example configuration for vite.config.js showing how to integrate vite-plugin-ruby with other plugins like Vue. The configuration demonstrates the basic setup needed to enable the Ruby plugin in a Vite project.

LANGUAGE: typescript
CODE:
// vite.config.js
import Vue from '@vitejs/plugin-vue' // Example, could be using other plugins.
import ViteRuby from 'vite-plugin-ruby'

export default {
  plugins: [
    Vue(),
    ViteRuby(),
  ],
};

----------------------------------------

TITLE: Configuring full reload paths in vite-plugin-rails
DESCRIPTION: Example of how to configure additional paths for full page reload in vite-plugin-rails.

LANGUAGE: typescript
CODE:
    ViteRails({
      fullReload: {
        additionalPaths: ['app/serializers/**/*']
      },
    }),

----------------------------------------

TITLE: Using Aliases with import.meta.glob in Vite 3 TypeScript
DESCRIPTION: Shows how to use aliases with import.meta.glob in Vite 3 to maintain full path references. This approach is more explicit and robust when refactoring.

LANGUAGE: typescript
CODE:
const controllers = import.meta.glob('~/controllers/**/*_controller.js', { eager: true })

----------------------------------------

TITLE: Starting Hanami Development Console
DESCRIPTION: Command to launch the development console for the Hanami Bookshelf project.

LANGUAGE: bash
CODE:
% bundle exec hanami console

----------------------------------------

TITLE: Adding Package Manager Config Option
DESCRIPTION: Feature to add 'package_manager' config option, with experimental support for bun.

LANGUAGE: JavaScript
CODE:
// Example usage of package_manager option
module.exports = {
  package_manager: 'bun'
}

----------------------------------------

TITLE: Installing vite_hanami Gem in Ruby
DESCRIPTION: Add the vite_hanami gem to your Hanami application's Gemfile. This is the first step in integrating Vite with your Hanami project.

LANGUAGE: ruby
CODE:
gem 'vite_hanami'

----------------------------------------

TITLE: Installing Gem Dependencies with Bundler
DESCRIPTION: Command to install the vite_plugin_legacy gem and its dependencies using Bundler package manager.

LANGUAGE: bash
CODE:
bundle install

----------------------------------------

TITLE: Loading Component JavaScript in ERB Template
DESCRIPTION: ERB template code showing how to include a component's JavaScript file using Vite's tag helper.

LANGUAGE: ruby
CODE:
<%= vite_javascript_tag '/app/components/comment_component' %>

----------------------------------------

TITLE: Using Vite Tag Helpers in Rails ERB Templates
DESCRIPTION: Demonstrates how to use Vite-specific tag helpers in Rails ERB templates to include JavaScript, TypeScript, and CSS files managed by Vite.

LANGUAGE: erb
CODE:
<head>
  <title>Example</title>
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  <%= vite_client_tag %>

  <%= vite_javascript_tag 'application' %>
  <%= vite_stylesheet_tag 'typography', media: 'print' %>
</head>

----------------------------------------

TITLE: Using Vite Tag Helpers in Rails ERB Templates
DESCRIPTION: Demonstrates how to use Vite-specific tag helpers in Rails ERB templates to include JavaScript, TypeScript, and CSS files managed by Vite.

LANGUAGE: erb
CODE:
<head>
  <title>Example</title>
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  <%= vite_client_tag %>

  <%= vite_javascript_tag 'application' %>
  <%= vite_stylesheet_tag 'typography', media: 'print' %>
</head>

----------------------------------------

TITLE: Changing Default Execution to Use npx vite
DESCRIPTION: Feature change to use 'npx vite' as the default execution method instead of the previous approach.

LANGUAGE: JavaScript
CODE:
// No code snippet available, this was a default behavior change

----------------------------------------

TITLE: Rendering Vite Asset Tags in Padrino HAML Template
DESCRIPTION: Example showing how to include Vite.js client, stylesheet and TypeScript tags in a Padrino HAML template head section

LANGUAGE: haml
CODE:
%head
  %title Example
  = vite_client_tag

  = vite_stylesheet_tag 'styles'
  = vite_typescript_tag 'application'

----------------------------------------

TITLE: Installing vite-plugin-rails using npm or yarn
DESCRIPTION: Command to install the vite-plugin-rails package using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm i vite-plugin-rails # yarn add vite-plugin-rails

----------------------------------------

TITLE: Smart Output Examples with Vite JavaScript
DESCRIPTION: Examples of how vite_javascript helper automatically injects related asset tags in both production and development environments

LANGUAGE: erb
CODE:
<%= vite_javascript 'application' %>

LANGUAGE: erb
CODE:
<script src="/vite/assets/application.a0ba047e.js" type="module" crossorigin="anonymous"/>
<link rel="modulepreload" href="/vite/assets/example_import.8e1fddc0.js" as="script" type="text/javascript" crossorigin="anonymous">
<link rel="stylesheet" media="screen" href="/vite/assets/application.cccfef34.css">

LANGUAGE: erb
CODE:
<script src="/vite/assets/application.js" type="module" crossorigin="anonymous"/>

----------------------------------------

TITLE: Standard Setup Commands
DESCRIPTION: Commands for setting up the application in a standard environment, including dependency installation and database setup.

LANGUAGE: bash
CODE:
bundle install
yarn install
bin/rake db:create db:migrate

----------------------------------------

TITLE: Converting Webpack Glob Imports to Vite
DESCRIPTION: Example showing how to replace Webpack's require.context with Vite's import.meta.glob for dynamic imports of controllers.

LANGUAGE: diff
CODE:
- const context = require.context("./controllers", true, /\.js$/)
+ const controllers = import.meta.glob('./**/*_controller.js', { eager: true })

----------------------------------------

TITLE: Running Tests in Hanami Bookshelf Project
DESCRIPTION: Command to execute the test suite for the Hanami Bookshelf project using Rake.

LANGUAGE: bash
CODE:
% bundle exec rake

----------------------------------------

TITLE: Preparing Hanami Database for Development and Test Environments
DESCRIPTION: Commands to create and migrate the database for both development and test environments in the Hanami Bookshelf project.

LANGUAGE: bash
CODE:
% bundle exec hanami db prepare

% HANAMI_ENV=test bundle exec hanami db prepare

----------------------------------------

TITLE: Version Headers and Change Descriptions in Markdown
DESCRIPTION: Changelog entries documenting version updates, bug fixes, features and breaking changes for vite_rails_legacy package

LANGUAGE: markdown
CODE:
# [3.1.0](https://github.com/ElMassimo/vite_ruby/compare/vite_rails_legacy@3.0.5...vite_rails_legacy@3.1.0) (2024-11-06)

## [3.0.5](https://github.com/ElMassimo/vite_ruby/compare/vite_rails_legacy@3.0.4...vite_rails_legacy@3.0.5) (2022-04-29)

### Features

* add vite_asset_url helper ([#208](https://github.com/ElMassimo/vite_ruby/issues/208)) ([d269793](https://github.com/ElMassimo/vite_ruby/commit/d2697934b5a866ea5b14588b650a00dfe88454a3))

----------------------------------------

TITLE: Defining Robots.txt Configuration for Web Crawlers
DESCRIPTION: This snippet represents the entire contents of a robots.txt file. It currently only contains a comment pointing to the official documentation for robots.txt usage. The file is empty of actual directives, implying default crawler behavior is allowed.

LANGUAGE: robotstxt
CODE:
# See https://www.robotstxt.org/robotstxt.html for documentation on how to use the robots.txt file


----------------------------------------

TITLE: Using Vite Tag Helpers in ERB Template
DESCRIPTION: This ERB snippet demonstrates how to use Vite Ruby tag helpers to include necessary JavaScript tags for React Hot Module Replacement (HMR) in a Rails view.

LANGUAGE: erb
CODE:
  <%= vite_client_tag %>
  <%= vite_react_refresh_tag %>
  <%= vite_javascript_tag 'application' %>

----------------------------------------

TITLE: Nested Entrypoint Path Examples in Ruby
DESCRIPTION: Demonstration of correct and incorrect path references for nested entrypoints and assets in Vite Ruby v3.

LANGUAGE: ruby
CODE:
❌ vite_javascript_tag 'nested/application'
✅ vite_javascript_tag 'entrypoints/nested/application'

❌ vite_asset_path 'images/logo.svg'
✅ vite_asset_path 'entrypoints/images/logo.svg'

----------------------------------------

TITLE: Example of Vite Asset Path Resolution in Ruby
DESCRIPTION: Illustrates how Vite resolves asset paths in Ruby, showing the difference between entrypoints and other directories.

LANGUAGE: ruby
CODE:
vite_asset_path 'images/logo.svg' # app/frontend/images/logo.svg
vite_asset_path 'typography.css'  # app/frontend/entrypoints/typography.css
vite_asset_path 'logo.svg'        # app/frontend/entrypoints/logo.svg

----------------------------------------

TITLE: Entrypoint Path Resolution in Ruby
DESCRIPTION: Examples showing correct and incorrect ways to reference JavaScript entrypoints in nested directories after the v3 update.

LANGUAGE: ruby
CODE:
vite_javascript_tag 'application' # entrypoints/application.js

----------------------------------------

TITLE: Enabling Stimulus HMR Plugin
DESCRIPTION: Configuration for vite-plugin-stimulus-hmr to enable Hot Module Replacement for Stimulus controllers.

LANGUAGE: typescript
CODE:
plugins: [
  StimulusHMR(),

----------------------------------------

TITLE: Configuring Vite Source Directory in JSON
DESCRIPTION: Example configuration for setting the source code directory in vite.json, typically used when migrating from Webpacker's app/javascript structure.

LANGUAGE: json
CODE:
{
  "all": {
    "sourceCodeDir": "app/javascript",
    ...


----------------------------------------

TITLE: Asset Path Resolution Examples in Ruby
DESCRIPTION: Examples showing how vite_asset_path resolves file paths relative to the entrypoints directory

LANGUAGE: ruby
CODE:
vite_asset_path 'logo.svg'        # app/frontend/entrypoints/logo.svg
vite_asset_path 'images/logo.svg' # app/frontend/images/logo.svg

----------------------------------------

TITLE: Using Vite Tag Helpers with Pre-processors in Rails ERB
DESCRIPTION: Shows how to use Vite tag helpers with pre-processed files like JSX or SCSS in Rails ERB templates.

LANGUAGE: erb
CODE:
<%= vite_javascript_tag 'application.tsx' %>
<%= vite_stylesheet_tag 'theme.scss' %>

----------------------------------------

TITLE: Installing Vite Plugin Legacy via Gemfile
DESCRIPTION: Instructions for adding the vite_plugin_legacy gem to a Ruby application's Gemfile for dependency management.

LANGUAGE: ruby
CODE:
gem 'vite_plugin_legacy'

----------------------------------------

TITLE: Installing Vite Plugin Legacy via Gemfile
DESCRIPTION: Instructions for adding the vite_plugin_legacy gem to a Ruby application's Gemfile for dependency management.

LANGUAGE: ruby
CODE:
gem 'vite_plugin_legacy'

----------------------------------------

TITLE: Configuring environment variables in vite-plugin-rails
DESCRIPTION: Example of how to configure environment variables in vite-plugin-rails, including setting default values and required variables.

LANGUAGE: typescript
CODE:
    ViteRails({
      envVars: {
        API_KEY: null,
        OPTIONAL_KEY: '<opt-value>',
      },
    }),

----------------------------------------

TITLE: Running Hanami Development Server
DESCRIPTION: Command to start the development server for the Hanami Bookshelf project.

LANGUAGE: bash
CODE:
% bundle exec hanami server

----------------------------------------

TITLE: Inferring Correct Dirname for Custom Manifest
DESCRIPTION: Bug fix to infer the correct dirname when a custom manifest is provided.

LANGUAGE: JavaScript
CODE:
// No code snippet available, this was a bug fix

----------------------------------------

TITLE: Configuring Viterb Home Page Features in YAML
DESCRIPTION: YAML frontmatter defining the page configuration and feature highlights for the Viterb project's home page. It specifies page settings and three main features with titles, details, and links.

LANGUAGE: yaml
CODE:
---
page: true
sidebar: false
features:
  - title: 🔥 Fast Server Start
    details: Unlike Webpacker, files are processed on demand!
    link: /motivation.html#webpack—increasing-load-times
  - title: ⚡️ Instant Changes
    details: Fast updates thanks to HMR. Goodbye full-page reloads!
    link: /guide/introduction.html#why-vite-🤔
  - title: 🚀 Zero-Config Deploys
    details: Integrates with Rake asset management tasks.
    link: /guide/deployment.html
---

----------------------------------------

TITLE: Installing Vite Rails Gem in Ruby
DESCRIPTION: This snippet shows how to add the Vite Rails gem to a Rails application's Gemfile. It includes a note for using the legacy version with Rails 4.

LANGUAGE: ruby
CODE:
gem 'vite_rails' # vite_rails_legacy if using Rails 4

----------------------------------------

TITLE: Installing Vite Ruby and Vite Rails from GitHub
DESCRIPTION: This code snippet shows how to install the latest development versions of Vite Ruby and Vite Rails gems directly from their GitHub repositories.

LANGUAGE: ruby
CODE:
gem "vite_ruby", github: "ElMassimo/vite_ruby"
gem "vite_rails", github: "ElMassimo/vite_rails"

----------------------------------------

TITLE: Installing Vite Padrino in Ruby
DESCRIPTION: Add the vite_padrino gem to your Gemfile to integrate Vite with your Padrino application.

LANGUAGE: ruby
CODE:
gem 'vite_padrino'

----------------------------------------

TITLE: Installing vite-plugin-ruby with NPM or Yarn
DESCRIPTION: Command to install the vite-plugin-ruby package using either npm or yarn package managers.

LANGUAGE: bash
CODE:
npm i vite-plugin-ruby # yarn add vite-plugin-ruby