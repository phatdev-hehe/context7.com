TITLE: Configuring AppKit with Wagmi Provider in TypeScript/React
DESCRIPTION: Sets up Reown AppKit with Wagmi adapter integration, including QueryClient configuration, project setup, and network configuration. This snippet demonstrates the complete provider setup with metadata configuration and network selection.

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit/react'

import { WagmiProvider } from 'wagmi'
import { arbitrum, mainnet } from '@reown/appkit/networks'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

// 0. Setup queryClient
const queryClient = new QueryClient()

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Create a metadata object - optional
const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 3. Set the networks
const networks = [mainnet, arbitrum]

// 4. Create Wagmi Adapter
const wagmiAdapter = new WagmiAdapter({
  networks,
  projectId,
  ssr: true
})

// 5. Create modal
createAppKit({
  adapters: [wagmiAdapter],
  networks,
  projectId,
  metadata,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

export function AppKitProvider({ children }) {
  return (
    <WagmiProvider config={wagmiAdapter.wagmiConfig}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Metadata Configuration
DESCRIPTION: Setting up app metadata including name, description, icons and URL

LANGUAGE: typescript
CODE:
createAppKit({
  // ...
  metadata: {
    name: 'My App',
    description: 'My App Description',
    icons: ['https://myapp.com/icon.png'],
    url: 'https://myapp.com'
  }
})

----------------------------------------

TITLE: Configuring AppKit Bitcoin for Wallet Integration in TypeScript React
DESCRIPTION: This code snippet demonstrates how to set up AppKit Bitcoin in a React application. It includes creating a Bitcoin adapter, configuring networks, setting metadata, and creating a modal for wallet connections. The snippet also shows how to trigger the modal programmatically.

LANGUAGE: tsx
CODE:
// App.tsx
import { createAppKit } from '@reown/appkit'
import { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'
import { bitcoin } from '@reown/appkit/networks'

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Set the networks
const networks = [bitcoin]

// 3. Set up Bitcoin Adapter
const bitcoinAdapter = new BitcoinAdapter({
  projectId
})

// 4. Create a metadata object - optional
const metadata = {
  name: 'AppKit',
  description: 'AppKit Bitcoin Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 5. Create modal
const modal = createAppKit({
  adapters: [bitcoinAdapter],
  networks,
  metadata,
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration,
    email: false,
    socials: []
  }
})

// 6. Trigger modal programaticaly
const openConnectModalBtn = document.getElementById('open-connect-modal')
const openNetworkModalBtn = document.getElementById('open-network-modal')

openConnectModalBtn.addEventListener('click', () => modal.open())
openNetworkModalBtn.addEventListener('click', () => modal.open({ view: 'Networks' }))

----------------------------------------

TITLE: Configuring Reown AppKit with Wagmi Adapter in TypeScript
DESCRIPTION: This snippet demonstrates how to set up Reown AppKit with a Wagmi adapter, configure metadata, create a modal, and add event listeners for opening the modal. It includes steps for importing necessary modules, setting up networks, and configuring the AppKit instance.

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { mainnet, arbitrum } from '@reown/appkit/networks'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

// 1. Get a project ID at https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

export const networks = [mainnet, arbitrum]

// 2. Set up Wagmi adapter
const wagmiAdapter = new WagmiAdapter({
  projectId,
  networks
})

// 3. Configure the metadata
const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 3. Create the modal
const modal = createAppKit({
  adapters: [wagmiAdapter],
  networks: [mainnet, arbitrum],
  metadata,
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

// 4. Trigger modal programaticaly
const openConnectModalBtn = document.getElementById('open-connect-modal')
const openNetworkModalBtn = document.getElementById('open-network-modal')

openConnectModalBtn.addEventListener('click', () => modal.open())
openNetworkModalBtn.addEventListener('click', () => modal.open({ view: 'Networks' }))

// 5. Alternatively use w3m component buttons within the index.html file

----------------------------------------

TITLE: Initializing Reown AppKit with React and Ethers
DESCRIPTION: Demonstrates how to create and configure a Reown AppKit instance with Ethers adapter, multiple networks, and custom metadata. The configuration must be set up outside React components to prevent unnecessary rerenders. Includes project ID setup, network configuration, metadata definition, and optional analytics features.

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit/react'
import { EthersAdapter } from '@reown/appkit-adapter-ethers'
import { arbitrum, mainnet } from '@reown/appkit/networks'

// 1. Get projectId
const projectId = 'YOUR_PROJECT_ID'

// 2. Set the networks
const networks = [arbitrum, mainnet]

// 3. Create a metadata object - optional
const metadata = {
  name: 'My Website',
  description: 'My Website description',
  url: 'https://mywebsite.com', // origin must match your domain & subdomain
  icons: ['https://avatars.mywebsite.com/']
}

// 4. Create a AppKit instance
createAppKit({
  adapters: [new EthersAdapter()],
  networks,
  metadata,
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

export default function App() {
  return <YourApp /> // Configure the <appkit-button> or a similar button inside
}

----------------------------------------

TITLE: Configuring Wagmi Custom Connectors with AppKit
DESCRIPTION: Implementation of custom Wagmi connectors including WalletConnect, Coinbase Wallet, and injected providers. Sets up network configuration and wagmi adapter with custom connectors for use with AppKit.

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { reconnect, http, createConfig } from '@wagmi/core'
import { CreateConnectorFn } from 'wagmi'
import { sepolia } from '@reown/appkit/networks'
import { walletConnect, coinbaseWallet, injected } from 'wagmi/connectors'

const projectId = 'YOUR_PROJECT_ID'

const metadata = {
  //...
}

// create the connectors (delete the ones you don't need)
const connectors: CreateConnectorFn[] = []
connectors.push(walletConnect({ projectId, metadata, showQrModal: false })) // showQrModal must be false
connectors.push(injected({ shimDisconnect: true }))
connectors.push(
  coinbaseWallet({
    appName: metadata.name,
    appLogoUrl: metadata.icons[0]
  })
)

export const networks = [sepolia]

export const wagmiAdapter = new WagmiAdapter({
  storage:
  transports: {
    [sepolia.id]: http()
  },
  connectors,
  projectId,
  networks
})

export const config = wagmiAdapter.wagmiConfig

createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [sepolia]
})

----------------------------------------

TITLE: Custom Wallets Configuration
DESCRIPTION: Adding custom wallets with detailed wallet information

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  customWallets: [
    {
      id: 'myCustomWallet',
      name: 'My Custom Wallet',
      homepage: 'www.mycustomwallet.com', // Optional
      image_url: 'my_custom_wallet_image', // Optional
      mobile_link: 'mobile_link', // Optional - Deeplink or universal
      desktop_link: 'desktop_link', // Optional - Deeplink
      webapp_link: 'webapp_link', // Optional
      app_store: 'app_store', // Optional
      play_store: 'play_store' // Optional
    }
  ]
})

----------------------------------------

TITLE: Initializing ReOwn AppKit with Ethers5Adapter in TypeScript
DESCRIPTION: This code snippet shows how to set up the ReOwn AppKit in a main.js file. It includes importing required modules, defining project metadata, and creating an AppKit instance with specific configurations for networks and features.

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { Ethers5Adapter } from '@reown/appkit-adapter-ethers5'
import { mainnet, arbitrum } from '@reown/appkit/networks'

// 1. Get projectId at https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Create your application's metadata object
const metadata = {
  name: 'My Website',
  description: 'My Website description',
  url: 'https://mywebsite.com', // url must match your domain & subdomain
  icons: ['https://avatars.mywebsite.com/']
}

// 3. Create a AppKit instance
const modal = createAppKit({
  adapters: [new Ethers5Adapter()],
  metadata: metadata,
  networks: [mainnet, arbitrum],
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

----------------------------------------

TITLE: Installing AppKit CLI for Next.js
DESCRIPTION: This command installs the AppKit CLI, which provides a guided setup for a minimal version of AppKit in a Next.js project.

LANGUAGE: bash
CODE:
npx @reown/appkit-cli

----------------------------------------

TITLE: Configuring Wagmi Adapter for Reown AppKit in TypeScript
DESCRIPTION: This snippet demonstrates how to set up the Wagmi configuration for Reown AppKit. It includes creating a WagmiAdapter instance with projectId, networks, and storage options.

LANGUAGE: typescript
CODE:
import { cookieStorage, createStorage, http } from '@wagmi/core'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { mainnet, arbitrum } from '@reown/appkit/networks'

// Get projectId from https://cloud.reown.com
export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID

if (!projectId) {
  throw new Error('Project ID is not defined')
}

export const networks = [mainnet, arbitrum]

//Set up the Wagmi Adapter (Config)
export const wagmiAdapter = new WagmiAdapter({
  storage: createStorage({
    storage: cookieStorage
  }),
  ssr: true,
  projectId,
  networks
})

export const config = wagmiAdapter.wagmiConfig

----------------------------------------

TITLE: Configuring AppKit with Solana Adapter in React
DESCRIPTION: Demonstrates the complete setup of AppKit with Solana integration for a React application. Includes adapter initialization, project configuration, metadata setup, and AppKit creation with network specifications and analytics features.

LANGUAGE: tsx
CODE:
// App.tsx
import { createAppKit } from '@reown/appkit/react'
import { SolanaAdapter } from '@reown/appkit-adapter-solana/react'
import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'

// 0. Set up Solana Adapter
const solanaWeb3JsAdapter = new SolanaAdapter()

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Create a metadata object - optional
const metadata = {
  name: 'AppKit',
  description: 'AppKit Solana Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 3. Create modal
createAppKit({
  adapters: [solanaWeb3JsAdapter],
  networks: [solana, solanaTestnet, solanaDevnet],
  metadata: metadata,
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

export default function App() {
  return <YourApp />
}

----------------------------------------

TITLE: Implementing Wallet Provider with Message Signing
DESCRIPTION: Example of using AppKit hooks for wallet integration and message signing using Ethers.js. Shows how to access wallet provider, account address, and chain ID for blockchain interactions.

LANGUAGE: tsx
CODE:
import { useAppKitAccount, useAppKitProvider, useAppKitNetwork  } from '@reown/appkit/react'
import { ethers } from 'ethers'
import { useAppKitProvider } from '@reown/appkit/react'

function Components() {
  const { walletProvider } = useAppKitProvider('eip155')
  const { address } = useAppKitAccount()
  const { chainId } = useAppKitNetwork()

  async function onSignMessage() {
    const provider = new ethers.providers.Web3Provider(walletProvider, chainId)
    const signer = provider.getSigner(address)
    const signature = await signer?.signMessage('Hello AppKit Ethers')
    console.log(signature)
  }

  return <button onClick={() => onSignMessage()}>Sign Message</button>
}

----------------------------------------

TITLE: Basic AppKit Configuration
DESCRIPTION: Basic structure for initializing createAppKit with core parameters including adapters, projectId and networks

LANGUAGE: typescript
CODE:
createAppKit({ adapters, projectId, networks, ...options })

----------------------------------------

TITLE: Configuring Vue.js App with Reown AppKit
DESCRIPTION: Setup example showing how to configure Reown AppKit in a Vue.js application. Demonstrates project initialization, metadata configuration, network setup, and WagmiAdapter implementation. Includes WalletConnect, Coinbase and Injected connectors integration.

LANGUAGE: html
CODE:
<script lang="ts" setup>
  import { createAppKit } from '@reown/appkit/vue'
  import { arbitrum, mainnet, type AppKitNetwork } from '@reown/appkit/networks'
  import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

  // 1. Get projectId from https://cloud.reown.com
  const projectId = 'YOUR_PROJECT_ID'

  // 2. Create a metadata object
  const metadata = {
    name: 'AppKit',
    description: 'AppKit Example',
    url: 'https://example.com', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/179229932']
  }

  // 3. Set the networks
  const networks: [AppKitNetwork, ...AppKitNetwork[]] = [mainnet, polygon, base]

  // 4. Create Wagmi Adapter
  const wagmiAdapter = new WagmiAdapter({
    networks,
    projectId
  })

  // 5. Create the modal
  const modal = createAppKit({
    adapters: [wagmiAdapter],
    networks,
    projectId,
    metadata,
    features: {
      analytics: true // Optional - defaults to your Cloud configuration
    }
  })
</script>

<template> // Rest of your app ... </template>

----------------------------------------

TITLE: Configuring AppKit Instance in React with TypeScript
DESCRIPTION: This snippet shows how to create and configure an AppKit instance using TypeScript. It includes setting up adapters, metadata, networks, and optional features.

LANGUAGE: tsx
CODE:
'use client'

import { createAppKit } from '@reown/appkit/react'
import { EthersAdapter } from '@reown/appkit-adapter-ethers'
import { mainnet, arbitrum } from '@reown/appkit/networks'

// 1. Get projectId at https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Create a metadata object
const metadata = {
  name: 'My Website',
  description: 'My Website description',
  url: 'https://mywebsite.com', // origin must match your domain & subdomain
  icons: ['https://avatars.mywebsite.com/']
}

// 3. Create the AppKit instance
createAppKit({
  adapters: [new EthersAdapter()],
  metadata,
  networks: [mainnet, arbitrum],
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

export function AppKit() {
  return (
    <YourApp /> //make sure you have configured the <appkit-button> inside
  )
}

----------------------------------------

TITLE: Implementing VerifyContext Structure in Swift
DESCRIPTION: Defines the VerifyContext structure used for domain verification in session proposals and requests. The structure contains the origin domain, validation status (unknown/valid/invalid), and verify URL server information.

LANGUAGE: swift
CODE:
public struct VerifyContext: Equatable, Hashable {
   public enum ValidationStatus {
       case unknown
       case valid
       case invalid
   }

   public let origin: String?
   public let validation: ValidationStatus
   public let verifyUrl: String
}

----------------------------------------

TITLE: Configuring Solana Custom Wallet Adapters
DESCRIPTION: Setup of Solana adapter with custom wallet implementations for Phantom and Solflare, including network configuration and AppKit initialization.

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { SolanaAdapter } from '@reown/appkit-adapter-solana'
import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'

import { SolflareWalletAdapter, PhantomWalletAdapter } from '@solana/wallet-adapter-wallets'

// 0. Set up Solana adapter
const solanaWeb3JsAdapter = new SolanaAdapter({
  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()]
})

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Set up the metadata
const metadata = {
  //...
}

// 3. Create modal
const modal = createAppkit({
  adapters: [solanaWeb3JsAdapter],
  networks: [solana, solanaTestnet, solanaDevnet],
  metadata: metadata,
  projectId,
  features: {
    analytics: true,
  }
})

----------------------------------------

TITLE: Network Configuration
DESCRIPTION: Example of configuring networks from @reown/appkit/networks library

LANGUAGE: typescript
CODE:
import { mainnet, solana } from '@reown/appkit/networks'

createAppKit({
  // ...
  networks: [mainnet, solana]
})

----------------------------------------

TITLE: Implementing VerifyContext Structure in Swift
DESCRIPTION: Defines the VerifyContext structure used for domain verification in session proposals and requests. The structure contains the origin domain, validation status (unknown/valid/invalid), and verify URL server information.

LANGUAGE: swift
CODE:
public struct VerifyContext: Equatable, Hashable {
   public enum ValidationStatus {
       case unknown
       case valid
       case invalid
   }

   public let origin: String?
   public let validation: ValidationStatus
   public let verifyUrl: String
}

----------------------------------------

TITLE: Initializing AppKit with Wagmi Configuration in React Native
DESCRIPTION: Core setup for AppKit integration including WagmiProvider configuration, QueryClient setup, and basic app structure. Requires project ID from reown.cloud and proper configuration of chains and metadata.

LANGUAGE: tsx
CODE:
import '@walletconnect/react-native-compat'
import { WagmiProvider } from 'wagmi'
import { mainnet, polygon, arbitrum } from '@wagmi/core/chains'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { createAppKit, defaultWagmiConfig, AppKit } from '@reown/appkit-wagmi-react-native'

// 0. Setup queryClient
const queryClient = new QueryClient()

// 1. Get projectId at https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Create config
const metadata = {
  name: 'AppKit RN',
  description: 'AppKit RN Example',
  url: 'https://reown.com/appkit',
  icons: ['https://avatars.githubusercontent.com/u/179229932'],
  redirect: {
    native: 'YOUR_APP_SCHEME://',
    universal: 'YOUR_APP_UNIVERSAL_LINK.com'
  }
}

const chains = [mainnet, polygon, arbitrum] as const

const wagmiConfig = defaultWagmiConfig({ chains, projectId, metadata })

// 3. Create modal
createAppKit({
  projectId,
  wagmiConfig,
  defaultChain: mainnet, // Optional
  enableAnalytics: true // Optional - defaults to your Cloud configuration
})

export default function App() {
  return (
    <WagmiProvider config={wagmiConfig}>
      <QueryClientProvider client={queryClient}>
        // Rest of your app...
        <AppKit />
      </QueryClientProvider>
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Configuring Wagmi Adapter with Custom Connectors in TypeScript
DESCRIPTION: This snippet demonstrates how to set up a Wagmi adapter with custom connectors like WalletConnect and Coinbase for use with AppKit. It includes importing necessary dependencies, creating connectors, and configuring the Wagmi adapter.

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit/vue'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

import { http, WagmiProvider, CreateConnectorFn } from 'wagmi'
import { sepolia } from '@reown/appkit/networks'
import { walletConnect, coinbaseWallet, injected } from 'wagmi/connectors'

const projectId = 'YOUR_PROJECT_ID'

const metadata = {
  //....
}

// create the connectors (delete the ones you don't need)
const connectors: CreateConnectorFn[] = []
connectors.push(walletConnect({ projectId, metadata, showQrModal: false })) // showQrModal must be false
connectors.push(injected({ shimDisconnect: true }))
connectors.push(
  coinbaseWallet({
    appName: metadata.name,
    appLogoUrl: metadata.icons[0]
  })
)

const export networks = [sepolia]

export const wagmiAdapter = new WagmiAdapter({
  transports: {
    [sepolia.id]: http()
  },
  connectors,
  projectId,
  networks
})

export const config = wagmiAdapter.wagmiConfig

createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [sepolia]
})

----------------------------------------

TITLE: Initializing AppKit SDK with Core Client
DESCRIPTION: Shows how to initialize the AppKit SDK by setting up connection type, project ID, and app metadata. Includes callback handling for success and error cases.

LANGUAGE: kotlin
CODE:
val connectionType = ConnectionType.AUTOMATIC or ConnectionType.MANUAL
val projectId = "" // Get Project ID at https://cloud.reown.com/
val appMetaData = Core.Model.AppMetaData(
    name = "Kotlin.AppKit",
    description = "Kotlin AppKit Implementation",
    url = "kotlin.reown.com",
    icons = listOf("https://gblobscdn.gitbook.com/spaces%2F-LJJeCjcLrr53DcT1Ml7%2Favatar.png?alt=media"),
    redirect = "kotlin-modal-wc://request"
)

CoreClient.initialize(projectId = projectId, connectionType = connectionType, application = this, metaData = appMetaData)

AppKit.initialize(
    init = Modal.Params.Init(CoreClient),
    onSuccess = {
        // Callback will be called if initialization is successful
     },
    onError = { error ->
        // Error will be thrown if there's an issue during initialization
    }
)

----------------------------------------

TITLE: Implementing Account Registration with Web3 Signatures using Wagmi
DESCRIPTION: Example code showing how to handle account registration using wagmi hooks for signature generation and registration. The implementation includes error handling and supports both regular and EIP-1271 signatures from smart wallets. Uses useSignMessage, useW3iAccount, usePrepareRegistration, and useRegister hooks.

LANGUAGE: typescript
CODE:
import { useSignMessage } from '@wagmi'
const { signMessageAsync } = useSignMessage()

const { isRegistered } = useW3iAccount('eip155:1:0x9A...')

const { prepareRegistration } = usePrepareRegistration()
const { register, isLoading: isRegistering } = useRegister()

const handleRegistration = async () => {
  try {
    const { message, registerParams } = await prepareRegistration()
    const signature = await signMessageAsync({ message: message })
    await register({ registerParams, signature })
  } catch (registerIdentityError: any) {
    console.error(registerIdentityError)
  }
}

----------------------------------------

TITLE: Modal View Selection in TypeScript
DESCRIPTION: Examples of using the open function to display different modal views, including blockchain-specific connection views. The function accepts a configuration object with view and optional namespace parameters to control which modal interface is displayed.

LANGUAGE: typescript
CODE:
open({ view: 'Account' })

// to connect and show multi wallets view
open({ view: 'Connect'})

// to connect and show only solana wallets
open({ view: 'Connect', namespace: 'solana' })

// to connect and show only bitcoin wallets
open({ view: 'Connect', namespace: 'bip122' })

// to connect and show only ethereum wallets
open({ view: 'Connect', namespace: 'eip155' })

----------------------------------------

TITLE: Configuring Custom Network in Reown AppKit using Javascript
DESCRIPTION: Demonstrates how to define and configure a custom EVM network in Reown AppKit using the defineChain method. Shows setup of chain ID, network name, native currency, RPC URLs, and block explorers. The example also includes how to pass the custom network to AppKit initialization with chain logo customization.

LANGUAGE: javascript
CODE:
import { defineChain } from '@reown/appkit/networks';

// Define the custom network
const customNetwork = defineChain({
  id: 123456789,
  caipNetworkId: 'eip155:123456789',
  chainNamespace: 'eip155',
  name: 'Custom Network',
  nativeCurrency: {
    decimals: 18,
    name: 'Ether',
    symbol: 'ETH',
  },
  rpcUrls: {
    default: {
      http: ['RPC_URL'],
      webSocket: ['WS_RPC_URL'],
    },
  },
  blockExplorers: {
    default: { name: 'Explorer', url: 'BLOCK_EXPLORER_URL' },
  },
  contracts: {
    // Add the contracts here
  }
})

// Then pass it to the AppKit
createAppKit({
    adapters: [...],
    networks: [customNetwork],
    chainImages: { // Customize networks' logos
      123456789: '/custom-network-logo.png', // <chainId>: 'www.network.com/logo.png'
    }
})

----------------------------------------

TITLE: Configuring AppKit Bitcoin for React Application
DESCRIPTION: This code snippet demonstrates how to configure AppKit Bitcoin for a React application. It includes setting up the project ID, networks, Bitcoin adapter, metadata, and creating an AppKit instance with specific features.

LANGUAGE: tsx
CODE:
// App.tsx
import { createAppKit } from '@reown/appkit/react'
import { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'
import { bitcoin } from '@reown/appkit/networks'

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Set the networks
const networks = [bitcoin]

// 3. Set up Bitcoin Adapter
const bitcoinAdapter = new BitcoinAdapter({
  projectId
})

// 4. Create a metadata object - optional
const metadata = {
  name: 'AppKit',
  description: 'AppKit Bitcoin Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 5. Create modal
createAppKit({
  adapters: [bitcoinAdapter],
  networks,
  metadata,
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration,
    email: false,
    socials: []
  }
})

export default function App() {
  return <YourApp />
}

----------------------------------------

TITLE: Installing SIWE Packages for One-Click Auth in Node.js
DESCRIPTION: This command installs the necessary packages for implementing One-Click Auth with SIWE in a Node.js environment.

LANGUAGE: bash
CODE:
npm i @reown/appkit-siwe siwe

----------------------------------------

TITLE: Approving Authentication Requests in TypeScript
DESCRIPTION: Implementation of authentication request approval process with two approaches: single signature and multi-chain signatures.

LANGUAGE: typescript
CODE:
// Approach 1
// Sign the authentication message(s) to create a verifiable authentication object(s)
const signature = await cryptoWallet.signMessage(message, privateKey)
// Build the authentication object(s)
const auth = buildAuthObject(
  authPayload,
  {
    t: 'eip191',
    s: signature
  },
  iss
)

// Approve
await walletKit.approveSessionAuthenticate({
  id: payload.id,
  auths: [auth]
})

// Approach 2
// Note that you can also sign multiple messages for every requested chain/address pair
const auths = []
authPayload.chains.forEach(async chain => {
  const message = walletKit.formatAuthMessage({
    request: authPayload,
    iss: `${chain}:${cryptoWallet.address}`
  })
  const signature = await cryptoWallet.signMessage(message)
  const auth = buildAuthObject(
    authPayload,
    {
      t: 'eip191', // signature type
      s: signature
    },
    `${chain}:${cryptoWallet.address}`
  )
  auths.push(auth)
})

// Approve
await walletKit.approveSessionAuthenticate({
  id: payload.id,
  auths
})

----------------------------------------

TITLE: Installing AppKit Dependencies for Wagmi in Next.js
DESCRIPTION: This command installs the necessary dependencies for using AppKit with Wagmi in a Next.js project.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-wagmi wagmi viem @tanstack/react-query

----------------------------------------

TITLE: Configuring AppKit Bitcoin Integration in React
DESCRIPTION: Initial setup for AppKit Bitcoin integration including project configuration, network setup, adapter initialization, and metadata definition. The code demonstrates the complete configuration process that should be performed outside React components to prevent unnecessary rerenders.

LANGUAGE: tsx
CODE:
// App.tsx
import { createAppKit } from '@reown/appkit/react'
import { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'
import { bitcoin  } from '@reown/appkit/networks'

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Set the networks
const networks = [bitcoin]

// 3. Set up Bitcoin Adapter
const bitcoinAdapter = new BitcoinAdapter({
  projectId
})

// 4. Create a metadata object - optional
const metadata = {
  name: 'AppKit',
  description: 'AppKit Bitcoin Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 5. Create modal
createAppKit({
  adapters: [bitcoinAdapter],
  networks,
  metadata,
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration,
    email: false,
    socials: []
  }
})

export default function App() {
  return <YourApp />
}

----------------------------------------

TITLE: Using useAppKitWallet Hook for Wallet Integration
DESCRIPTION: Hook for implementing direct wallet connections and social logins without the modal interface.

LANGUAGE: bash
CODE:
npm i @reown/appkit-wallet-button

LANGUAGE: typescript
CODE:
import { useAppKitWallet } from '@reown/appkit-wallet-button/react'

LANGUAGE: tsx
CODE:
const { isReady, isPending, connect } = useAppKitWallet({
    onSuccess() {
      // ...
    },
    onError(error) {
      // ...
    }
  })

...

// Connect to a wallet
<Button onClick={() => connect("walletConnect")} />

----------------------------------------

TITLE: Setting up AppKit in Vue.js Application
DESCRIPTION: Configuration setup for AppKit in a Vue.js application using TypeScript. Includes project initialization with Ethers adapter, network configuration for mainnet and arbitrum, and metadata setup. Requires a project ID from cloud.reown.com and proper domain URL configuration for verification purposes.

LANGUAGE: html
CODE:
<script setup lang="ts">
  import { createAppKit, useAppKit } from '@reown/appkit/vue'
  import { EthersAdapter } from '@reown/appkit-adapter-ethers'
  import { mainnet, arbitrum } from '@reown/appkit/networks'

  // 1. Get projectId from https://cloud.reown.com
  const projectId = 'YOUR_PROJECT_ID'

  // 2. Create your application's metadata object
  const metadata = {
    name: 'My Website',
    description: 'My Website description',
    url: 'https://mywebsite.com', // url must match your domain & subdomain
    icons: ['https://avatars.mywebsite.com/']
  }

  // 3. Create a AppKit instance
   createAppKit({
    adapters: [new EthersAdapter()],
    networks: [mainnet, arbitrum],
    metadata,
    projectId,
    features: {
      analytics: true // Optional - defaults to your Cloud configuration
    }
  })

  // 4. Use modal composable
  const modal = useAppKit()
</script>

<template> // Rest of your app ... </template>

----------------------------------------

TITLE: Configuring Reown AppKit in Vue Component
DESCRIPTION: Sets up Reown AppKit configuration in a Vue component with Solana network integration. Includes project initialization, metadata configuration, and network adapter setup. Requires a project ID from cloud.reown.com and proper domain configuration.

LANGUAGE: vue
CODE:
<script setup>
  
  import { createAppKit } from '@reown/appkit/vue'
  import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'
  import { reconnect } from '@wagmi/core'

  // 1. Define constants
  const projectId = process.env.VUE_APP_PROJECT_ID // get it from cloud.reown.com

  // 2. Create wagmiConfig
  const metadata = {
    name: 'Appkit Solana',
    description: 'Appkit Solana Example',
    url: 'https://example.com', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/179229932']
  }

  // 3. Create Wagmi Adapter
  const solanaWeb3JsAdapter = new SolanaAdapter()

  reconnect(solanaConfig)

  // 3. Create modal
  createAppKit({
    projectId,
    metadata,
    networks: [solana, solanaTestnet, solanaDevnet],
    adapters: [solanaWeb3JsAdapter],
  })
</script>

<template>
  // Rest of your app ...
</template>

----------------------------------------

TITLE: Configuring AppKit with React Native
DESCRIPTION: Initial setup and configuration of AppKit including project ID, metadata, chain configurations, and app integration. Requires @walletconnect/react-native-compat as a prerequisite.

LANGUAGE: tsx
CODE:
import '@walletconnect/react-native-compat'

import { createAppKit, defaultConfig, AppKit } from '@reown/appkit-ethers-react-native'

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Create config
const metadata = {
  name: 'AppKit RN',
  description: 'AppKit RN Example',
  url: 'https://reown.com/appkit',
  icons: ['https://avatars.githubusercontent.com/u/179229932'],
  redirect: {
    native: 'YOUR_APP_SCHEME://'
  }
}

const config = defaultConfig({ metadata })

// 3. Define your chains
const mainnet = {
  chainId: 1,
  name: 'Ethereum',
  currency: 'ETH',
  explorerUrl: 'https://etherscan.io',
  rpcUrl: 'https://cloudflare-eth.com'
}

const polygon = {
  chainId: 137,
  name: 'Polygon',
  currency: 'MATIC',
  explorerUrl: 'https://polygonscan.com',
  rpcUrl: 'https://polygon-rpc.com'
}

const chains = [mainnet, polygon]

// 4. Create modal
createAppKit({
  projectId,
  chains,
  config,
  enableAnalytics: true // Optional - defaults to your Cloud configuration
})

export default function App() {
  return (
    <>
      // Rest of your app...
      <AppKit />
    </>
  )
}

----------------------------------------

TITLE: Initializing AppKit with Ethers in React Native
DESCRIPTION: This snippet shows how to import necessary dependencies, create AppKit configuration, define chains, and initialize AppKit in a React Native application. It includes setting up project ID, metadata, and chain configurations for Ethereum and Polygon.

LANGUAGE: tsx
CODE:
import '@walletconnect/react-native-compat'
import '@ethersproject/shims'

import { createAppKit, defaultConfig, AppKit } from '@reown/appkit-ethers5-react-native'

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Create config
const metadata = {
  name: 'AppKit RN',
  description: 'AppKit RN Example',
  url: 'https://reown.com/appkit',
  icons: ['https://avatars.githubusercontent.com/u/179229932'],
  redirect: {
    native: 'YOUR_APP_SCHEME://'
  }
}

const config = defaultConfig({ metadata })

// 3. Define your chains
const mainnet = {
  chainId: 1,
  name: 'Ethereum',
  currency: 'ETH',
  explorerUrl: 'https://etherscan.io',
  rpcUrl: 'https://cloudflare-eth.com'
}

const polygon = {
  chainId: 137,
  name: 'Polygon',
  currency: 'MATIC',
  explorerUrl: 'https://polygonscan.com',
  rpcUrl: 'https://polygon-rpc.com'
}

const chains = [mainnet, polygon]

// 4. Create modal
createAppKit({
  projectId,
  chains,
  config,
  enableAnalytics: true // Optional - defaults to your Cloud configuration
})

export default function App() {
  return (
    <>
      // Rest of your app...
      <AppKit />
    </>
  )
}

----------------------------------------

TITLE: Initializing WalletKit Client with Core
DESCRIPTION: Creates new instances of Core and WalletKit with project configuration and metadata

LANGUAGE: javascript
CODE:
import { Core } from '@walletconnect/core'
import { WalletKit } from '@reown/walletkit'

const core = new Core({
  projectId: process.env.PROJECT_ID
})

const walletKit = await WalletKit.init({
  core, // <- pass the shared `core` instance
  metadata: {
    name: 'Demo app',
    description: 'Demo Client as Wallet/Peer',
    url: 'https://reown.com/walletkit',
    icons: []
  }
})

----------------------------------------

TITLE: Defining BitcoinConnector Interface in TypeScript
DESCRIPTION: This snippet defines the BitcoinConnector interface which extends ChainAdapterConnector and Provider. It includes methods for getting account addresses, signing messages, sending transfers, and signing PSBTs.

LANGUAGE: typescript
CODE:
export interface BitcoinConnector extends ChainAdapterConnector, Provider {
  getAccountAddresses(): Promise<BitcoinConnector.AccountAddress[]>
  signMessage(params: BitcoinConnector.SignMessageParams): Promise<string>
  sendTransfer(params: BitcoinConnector.SendTransferParams): Promise<string>
  signPSBT(params: BitcoinConnector.SignPSBTParams): Promise<BitcoinConnector.SignPSBTResponse>
}

----------------------------------------

TITLE: Implementing Web3Inbox Client with TypeScript
DESCRIPTION: Demonstrates the complete implementation of Web3Inbox client including initialization, account registration, subscription management, and notification handling. Uses Web3InboxClient from @web3inbox/core and signMessage from @wagmi/core for blockchain interactions.

LANGUAGE: typescript
CODE:
import { Web3InboxClient } from '@web3inbox/core'
import { signMessage } from '@wagmi/core'

const client = await Web3InboxClient.init({ projectId: '...' })

const account = 'eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029'

// Set the account to a CAIP-10 account ID
await client.setAccount(account)

const { message, registerParams } = await client.prepareRegistration({ account })
const { signature } = await signMessage(message)
await client.register({ signature, registerParams })

// Get the current notification subscription or watch for updates
const subscription = client.getSubscription()
client.watchSubscription(subscription => console.log({ subscription }))

// Subscribe to the app
await client.subscribeToDapp()

// Get notification history
const notificationsPerPage = 5
const isInfiniteScroll = true

client.pageNotifications(
  notificationsPerPage,
  isInfiniteScroll
)(notifications => {
  // add logic to display notifications here.
  // if isInfiniteScroll is true, notifications will contain all notifications fetched so far, else it will only fetch current page
  // See API docs for more information on `pageNotifications()` and how to use `notifications`
})

----------------------------------------

TITLE: Initializing AppKit with Solana Adapter in TypeScript
DESCRIPTION: Configures AppKit library with Solana adapter integration. Sets up wallet connectivity with project ID, metadata, and network configurations. Includes options for mainnet, testnet, and devnet networks with analytics feature toggle.

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit'
import { SolanaAdapter } from '@reown/appkit-adapter-solana'
import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'

// 0. Set up Solana Adapter
const solanaWeb3JsAdapter = new SolanaAdapter()

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Create a metadata object - optional
const metadata = {
  name: 'AppKit',
  description: 'AppKit Solana Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 3. Create modal
createAppKit({
  adapters: [solanaWeb3JsAdapter],
  networks: [solana, solanaTestnet, solanaDevnet],
  metadata: metadata,
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

----------------------------------------

TITLE: Configuring AppKit Solana in React Application
DESCRIPTION: This code snippet demonstrates how to set up AppKit Solana in a React application. It includes importing required modules, creating a Solana adapter, setting up project ID and metadata, and initializing AppKit with specific configurations.

LANGUAGE: tsx
CODE:
// App.tsx
import { createAppKit } from '@reown/appkit/react'
import { SolanaAdapter } from '@reown/appkit-adapter-solana/react'
import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'

// 0. Set up Solana Adapter
const solanaWeb3JsAdapter = new SolanaAdapter()

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Create a metadata object - optional
const metadata = {
  name: 'AppKit',
  description: 'AppKit Solana Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 3. Create modal
createAppKit({
  adapters: [solanaWeb3JsAdapter],
  networks: [solana, solanaTestnet, solanaDevnet],
  metadata: metadata,
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

export default function App() {
  return <YourApp />
}

----------------------------------------

TITLE: Using useAppKitAccount Hook for Account Data
DESCRIPTION: Hook for accessing account data and connection status, with support for both single and multi-chain environments.

LANGUAGE: typescript
CODE:
import { useAppKitAccount } from "@reown/appkit/react";

const { address, isConnected, caipAddress, status, embeddedWalletInfo } = useAppKitAccount()

LANGUAGE: typescript
CODE:
import { useAppKitAccount } from "@reown/appkit/react";

const eip155Account = useAppKitAccount({ namespace: 'eip155' }) // for EVM chains
const solanaAccount = useAppKitAccount({ namespace: 'solana' })
const bip122Account = useAppKitAccount({ namespace: 'bip122' }) // for bitcoin

----------------------------------------

TITLE: Configuring Client-Side SIWE Authentication
DESCRIPTION: Implementation of client-side SIWE configuration including session management, message verification, and SIWE configuration setup. Uses the @reown/appkit-siwe library to handle SIWE message creation and verification.

LANGUAGE: typescript
CODE:
import { SiweMessage } from 'siwe'
import {
    type SIWESession,
    type SIWEVerifyMessageArgs,
    type SIWECreateMessageArgs,
    createSIWEConfig,
    formatMessage,
  } from '@reown/appkit-siwe'

const BASE_URL = 'http://localhost:8080';

async function getSession(){
   const res = await fetch(BASE_URL + "/session", {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
    credentials: 'include',
  });
  if (!res.ok) {
      throw new Error('Network response was not ok');
  }
  
  const data = await res.json();
  
  const isValidData = typeof data === 'object' && typeof data.address === 'string' && typeof data.chainId === 'number';

  return isValidData ? data as SIWESession : null;
}

const verifyMessage = async ({ message, signature }: SIWEVerifyMessageArgs) => {
    try {
        const response = await fetch(BASE_URL + "/verify", {
            method: "POST",
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json',
            },
            mode: 'cors',
            body: JSON.stringify({ message, signature }),
            credentials: 'include'
        });

        if (!response.ok) {
            return false;
        }
        
        const result = await response.json();
        return result === true;
      } catch (error) {
        return false;
      }
}

export const siweConfig = createSIWEConfig({
  getMessageParams: async () => ({
    domain: window.location.host,
    uri: window.location.origin, 
    chains: [1, 2020],
      statement: 'Please sign with your account',
  }),
  createMessage: ({ address, ...args }: SIWECreateMessageArgs) => formatMessage(args, address),

  getNonce: async () => {
    const nonce = "YOUR_NONCE_GETTER"
    if (!nonce) {
      throw new Error('Failed to get nonce!')
    }
    return nonce
  },
  getSession,
  verifyMessage,
  signOut: async () => {
  }
});

----------------------------------------

TITLE: Integrating Custom Connectors with Wagmi in React
DESCRIPTION: This snippet demonstrates how to set up custom connectors like WalletConnect and Coinbase with Wagmi in a React application. It includes creating connectors, configuring the WagmiAdapter, and setting up the context provider.

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit/react'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

import { http, WagmiProvider, CreateConnectorFn } from 'wagmi'
import { sepolia } from '@reown/appkit/networks'
import { walletConnect, coinbaseWallet, injected } from 'wagmi/connectors'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

const queryClient = new QueryClient()

export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID

const metadata = {
  //...
}

// create the connectors (delete the ones you don't need)
const connectors: CreateConnectorFn[] = []
connectors.push(walletConnect({ projectId, metadata, showQrModal: false })) // showQrModal must be false
connectors.push(injected({ shimDisconnect: true }))
connectors.push(
  coinbaseWallet({
    appName: metadata.name,
    appLogoUrl: metadata.icons[0]
  })
)

export const networks = [sepolia]

export const wagmiAdapter = new WagmiAdapter({
  storage:
  transports: {
    [sepolia.id]: http()
  },
  connectors,
  projectId,
  networks
})

export const config = wagmiAdapter.wagmiConfig

createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [sepolia]
})

export function ContextProvider({ children }) {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Initializing ReOwn AppKit with Ethers5 Adapter in React
DESCRIPTION: Sets up the ReOwn AppKit instance with Ethers5 adapter, configuring metadata, networks (mainnet and arbitrum), project ID, and optional analytics features. The metadata URL must match the application's domain for wallet verification purposes.

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit/react'
import { Ethers5Adapter } from '@reown/appkit-adapter-ethers5'
import { mainnet, arbitrum } from '@reown/appkit/networks'

// 1. Get projectId
const projectId = 'YOUR_PROJECT_ID'

// 2. Create a metadata object - optional
const metadata = {
  name: 'My Website',
  description: 'My Website description',
  url: 'https://mywebsite.com', // origin must match your domain & subdomain
  icons: ['https://avatars.mywebsite.com/']
}

// 3. Create the AppKit instance
createAppKit({
  adapters: [new Ethers5Adapter()],
  metadata: metadata,
  networks: [mainnet, arbitrum],
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

export default function App() {
  return <YourApp /> //make sure you have configured the <appkit-button> inside
}

----------------------------------------

TITLE: Initializing WalletKit Client in Kotlin
DESCRIPTION: Sets up the WalletKit client with project ID, connection type, telemetry settings and app metadata. Initializes core client and wallet functionality.

LANGUAGE: kotlin
CODE:
val projectId = "" // Get Project ID at https://cloud.reown.com/
val connectionType = ConnectionType.AUTOMATIC or ConnectionType.MANUAL
val telemetryEnabled: Boolean = true
val appMetaData = Core.Model.AppMetaData(
    name = "Wallet Name",
    description = "Wallet Description",
    url = "Wallet URL",
    icons = /*list of icon url strings*/,
    redirect = "kotlin-wallet-wc:/request" // Custom Redirect URI
)

CoreClient.initialize(projectId = projectId, connectionType = connectionType, application = this, metaData = appMetaData, telemetryEnabled = telemetryEnabled)

val initParams = Wallet.Params.Init(core = CoreClient)

WalletKit.initialize(initParams) { error ->
    // Error will be thrown if there's an issue during initialization
}

----------------------------------------

TITLE: Configuring AppKit Bitcoin in Vue.js
DESCRIPTION: This snippet demonstrates how to set up AppKit Bitcoin in a Vue.js application. It includes importing necessary components, configuring networks and adapters, setting metadata, and creating the AppKit instance with specified features.

LANGUAGE: vue
CODE:
<script setup lang="ts">

import { createAppKit } from '@reown/appkit/react'
import { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'
import { bitcoin } from '@reown/appkit/networks'

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Set the networks
const networks = [bitcoin]

// 3. Set up Bitcoin Adapter
const bitcoinAdapter = new BitcoinAdapter({
  projectId
})

// 4. Create a metadata object - optional
const metadata = {
  name: 'AppKit',
  description: 'AppKit Bitcoin Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 5. Create modal
createAppKit({
  adapters: [bitcoinAdapter],
  networks,
  metadata,
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration,
    email: false,
    socials: []
  }
})
</script>

<template> // Rest of your app ... </template>

----------------------------------------

TITLE: Initializing and Controlling Modal
DESCRIPTION: Shows how to create and control a modal instance with basic open/close functionality. The modal can be initialized with adapters, networks, and a project ID.

LANGUAGE: typescript
CODE:
const modal = createAppKit({
   adapters: [wagmiAdapter], 
   networks: [mainnet, arbitrum],
   projectId 
  })

modal.open()

modal.close()

----------------------------------------

TITLE: React Implementation - AppKit Configuration
DESCRIPTION: Configuration setup for Reown AppKit with EthersAdapter in React

LANGUAGE: typescript
CODE:
createAppKit({
 adapters: [new EthersAdapter()],
 networks: [mainnet, arbitrum],
 metadata,
 projectId,
 features: {
   analytics: true,
 }
})

----------------------------------------

TITLE: Configuring AppKit with Solana Adapter in React
DESCRIPTION: This code snippet demonstrates how to configure AppKit for a React application using Solana networks. It includes setting up the project ID, defining chain configurations, creating metadata, initializing the Solana adapter, and creating an AppKit instance.

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit/react'
import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'
import { SolanaAdapter } from '@reown/appkit-adapter-solana/react'

// 1. Get projectId
const projectId = 'YOUR_PROJECT_ID'

// 2. Set chains
const mainnet = {
  chainId: '5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp',
  name: 'Solana',
  currency: 'SOL',
  explorerUrl: 'https://solscan.io',
  rpcUrl: 'https://rpc.walletconnect.org/v1'
}

// 3. Create a metadata object
const metadata = {
  name: 'My Website',
  description: 'My Website description',
  url: 'https://mywebsite.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 4. Create Wagmi Adapter
const solanaWeb3JsAdapter = new SolanaAdapter()

// 5. Create a AppKit instance
const modal = createAppKit({
  projectId,
  metadata,
  networks: [solana, solanaTestnet, solanaDevnet],
  adapters: [solanaWeb3JsAdapter],
})

export default function App() {
  return <YourApp />
}

----------------------------------------

TITLE: Using AppKitButton Component in React Native
DESCRIPTION: Example usage of the AppKitButton component with its available props. This button component is part of the AppKit package and supports features like disabling, showing balance, and customizing size and labels.

LANGUAGE: JavaScript
CODE:
<AppKitButton
  disabled={false}
  balance="show"
  size="md"
  label="Connect"
  loadingLabel="Connecting..."
/>

----------------------------------------

TITLE: Initializing and Switching Networks with AppKit
DESCRIPTION: Demonstrates how to initialize the AppKit modal with network configurations and perform network switching. Uses wagmi adapter and supports multiple networks like mainnet, arbitrum, and polygon.

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit/react'
import { mainnet, arbitrum, polygon } from '@reown/appkit/networks'

const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    analytics: true,
  }
})

modal.switchNetwork(polygon)

----------------------------------------

TITLE: Integrating AppKit Component in React Layout
DESCRIPTION: This snippet demonstrates how to import and use the custom AppKit component in the root layout of a React application. It wraps the entire application to provide AppKit functionality.

LANGUAGE: tsx
CODE:
import './globals.css'

import { AppKit } from '../context/appkit'

export const metadata = {
  title: 'AppKit',
  description: 'AppKit Example'
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <AppKit>{children}</AppKit>
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Defining and Configuring Custom Network in Reown AppKit (JavaScript)
DESCRIPTION: This snippet demonstrates how to define a custom network object and configure it within Reown AppKit. It includes setting up essential network properties such as ID, name, native currency, RPC URLs, and block explorers.

LANGUAGE: javascript
CODE:
import { defineChain } from '@reown/appkit/networks';

// Define the custom network
const customNetwork = defineChain({
  id: 123456789,
  caipNetworkId: 'eip155:123456789',
  chainNamespace: 'eip155',
  name: 'Custom Network',
  nativeCurrency: {
    decimals: 18,
    name: 'Ether',
    symbol: 'ETH',
  },
  rpcUrls: {
    default: {
      http: ['RPC_URL'],
      webSocket: ['WS_RPC_URL'],
    },
  },
  blockExplorers: {
    default: { name: 'Explorer', url: 'BLOCK_EXPLORER_URL' },
  },
  contracts: {
    // Add the contracts here
  }
})

// Then pass it to the AppKit
createAppKit({
    adapters: [...],
    networks: [customNetwork],
    chainImages: { // Customize networks' logos
      123456789: '/custom-network-logo.png', // <chainId>: 'www.network.com/logo.png'
    }
})

----------------------------------------

TITLE: Implementing AppKit Connect Modal with Hooks in React
DESCRIPTION: This snippet shows how to use the useAppKit hook to trigger the AppKit modal in a React component. It demonstrates opening the default connect modal and the network modal with different options.

LANGUAGE: tsx
CODE:
import { useAppKit } from '@reown/appkit/react'

export default function ConnectButton() {
  // 4. Use modal hook
  const { open } = useAppKit()

  return (
    <>
      <button onClick={() => open()}>Open Connect Modal</button>
      <button onClick={() => open({ view: 'Networks' })}>Open Network Modal</button>
    </>
  )
}

----------------------------------------

TITLE: Signing Messages with useSignMessage Hook from Wagmi in React
DESCRIPTION: This snippet shows how to use the useSignMessage hook from the Wagmi library to sign messages with a connected account. It includes a button component that triggers the message signing process.

LANGUAGE: tsx
CODE:
import { useSignMessage } from 'wagmi'

function App() {
  const { signMessage } = useSignMessage()

  return <button onClick={() => signMessage({ message: 'hello world' })}>Sign message</button>
}

----------------------------------------

TITLE: Defining SIWX Configuration Interface in TypeScript
DESCRIPTION: Core interface definition for SIWX configuration showing the required methods for message creation and session management.

LANGUAGE: typescript
CODE:
interface SIWXConfig {
  createMessage: (input: SIWXMessage.Input) => Promise<SIWXMessage>
  addSession: (session: SIWXSession) => Promise<void>
  revokeSession: (chainId: CaipNetworkId, address: string) => Promise<void>
  setSessions: (sessions: SIWXSession[]) => Promise<void>
  getSessions: (chainId: CaipNetworkId, address: string) => Promise<SIWXSession[]>
}

----------------------------------------

TITLE: Defining Smart Contract Configuration
DESCRIPTION: Declaration of smart contract address and ABI interface defining the contract's functions and data structure

LANGUAGE: jsx
CODE:
const storageSC = "0xEe6D291CC60d7CeD6627fA4cd8506912245c8cA4";

const storageABI = [
	{
		"inputs": [],
		"name": "retrieve",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "num",
				"type": "uint256"
			}
		],
		"name": "store",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]

----------------------------------------

TITLE: Using useAppKitAccount Hook for Account Data
DESCRIPTION: Hook for accessing account data and connection status, with support for multi-chain environments.

LANGUAGE: typescript
CODE:
import { useAppKitAccount } from "@reown/appkit/react";

const { address, isConnected, caipAddress, status, embeddedWalletInfo } = useAppKitAccount()

LANGUAGE: typescript
CODE:
import { useAppKitAccount } from "@reown/appkit/react";

const eip155Account = useAppKitAccount({ namespace: 'eip155' }) // for EVM chains
const solanaAccount = useAppKitAccount({ namespace: 'solana' })
const bip122Account = useAppKitAccount({ namespace: 'bip122' }) // for bitcoin

----------------------------------------

TITLE: Writing to Smart Contract in ReownAppKit (Flutter)
DESCRIPTION: This snippet demonstrates how to write data to a smart contract using ReownAppKit. It includes examples of transferring tokens and calling a 'sayHello' function to write a message.

LANGUAGE: javascript
CODE:
final decimalUnits = (decimals.first as BigInt); // decimals value from `decimals` contract function
final transferValue = _formatValue(0.23, decimals: decimalUnits); // your format value function

// Transfer USDT
Future<void> transferToken() async {
  final chainId = _appKitModal.selectedChain!.chainId;
  final namespace = ReownAppKitModalNetworks.getNamespaceForChainId(chainId);

  // Transfer 0.01 amount of Token using Smart Contract's transfer function
  final result = await _appKitModal.requestWriteContract(
    topic: _appKitModal.session!.topic,
    chainId: chainId,
    deployedContract: deployedContract,
    functionName: 'transfer',
    transaction: Transaction(
      from: EthereumAddress.fromHex(_appKitModal.session!.getAddress(namespace)), // sender address
    ),
    parameters: [
      EthereumAddress.fromHex('0x59e2f66C0E96803206B6486cDb39029abAE834c0'), // recipient address
      transferValue, // == 0.23 USDT
    ],
  );
}

// Write a message data
Future<void> writeMessage() async {
  final chainId = _appKitModal.selectedChain!.chainId;
  final namespace = ReownAppKitModalNetworks.getNamespaceForChainId(chainId);

  final result = await _appKitModal.requestWriteContract(
    topic: _appKitModal.session!.topic,
    chainId: chainId,
    deployedContract: deployedContract,
    functionName: 'sayHello',
    transaction: Transaction(
      from: EthereumAddress.fromHex(_appKitModal.session!.getAddress(namespace)), // sender address
    ),
    parameters: ['Hello world!'],
  );
}

----------------------------------------

TITLE: Initializing AppKit Client in Swift
DESCRIPTION: This snippet demonstrates how to initialize an AppKit client using the configure method. It sets up the app metadata including name, description, URL, icons, and an optional verify URL.

LANGUAGE: swift
CODE:
let metadata = AppMetadata(
    name: "Example Wallet",
    description: "Wallet description",
    url: "example.wallet",
    icons: ["https://avatars.githubusercontent.com/u/179229932"],
    // Used for the Verify: to opt-out verification ignore this parameter
    verifyUrl: "verify.walletconnect.com"
)

AppKit.configure(
    projectId: PROJECT_ID,
    metadata: metadata
)

----------------------------------------

TITLE: Initializing ReownAppKitModal in Flutter
DESCRIPTION: This code demonstrates how to initialize a ReownAppKitModal instance with project ID and metadata in a Flutter app.

LANGUAGE: javascript
CODE:
final _appKitModal = ReownAppKitModal(
  context: context,
  projectId: '{YOUR_PROJECT_ID}',
  metadata: const PairingMetadata(
    name: 'Example App',
    description: 'Example app description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect(  // OPTIONAL
      native: 'exampleapp://',
      universal: 'https://reown.com/exampleapp',
      linkMode: true|false,
    ),
  ),
);

// Register here the event callbacks on the service you'd like to use. See `Events` section.

await _appKitModal.init();

----------------------------------------

TITLE: Creating Context Provider for Reown AppKit in Next.js
DESCRIPTION: This snippet demonstrates how to create a context provider for Reown AppKit in a Next.js application. It includes setting up the AppKit, WagmiProvider, and QueryClientProvider.

LANGUAGE: typescript
CODE:
'use client'

import { wagmiAdapter, projectId } from '@/config'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { createAppKit } from '@reown/appkit/react'
import { mainnet, arbitrum } from '@reown/appkit/networks'
import React, { type ReactNode } from 'react'
import { cookieToInitialState, WagmiProvider, type Config } from 'wagmi'

// Set up queryClient
const queryClient = new QueryClient()

if (!projectId) {
  throw new Error('Project ID is not defined')
}

// Set up metadata
const metadata = {
  name: 'appkit-example',
  description: 'AppKit Example',
  url: 'https://appkitexampleapp.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// Create the modal
const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  defaultNetwork: mainnet,
  metadata: metadata,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

function ContextProvider({ children, cookies }: { children: ReactNode; cookies: string | null }) {
  const initialState = cookieToInitialState(wagmiAdapter.wagmiConfig as Config, cookies)

  return (
    <WagmiProvider config={wagmiAdapter.wagmiConfig as Config} initialState={initialState}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  )
}

export default ContextProvider

----------------------------------------

TITLE: Default EVM and Solana Configuration
DESCRIPTION: Basic configuration example for supporting EVM and Solana networks with email and social login features.

LANGUAGE: javascript
CODE:
final _appKitModal = ReownAppKitModal(
  context: context,
  projectId: '{YOUR_PROJECT_ID}',
  metadata: const PairingMetadata(
    name: 'Example App',
    description: 'Example app description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect(
      native: 'exampleapp://',
      universal: 'https://reown.com/exampleapp',
      linkMode: false,
    ),
  ),
  featuresConfig: FeaturesConfig(
    email: true,
    socials: [...],
    showMainWallets: true|false,
  ),
);

----------------------------------------

TITLE: Installing Additional Dependencies for React Native
DESCRIPTION: This command adds extra packages necessary for async storage, polyfills, SVG support, modals, network information, and WalletConnect compatibility in React Native. These packages enhance the functionality and compatibility of the Reown AppKit in a React Native environment.

LANGUAGE: bash
CODE:
yarn add @react-native-async-storage/async-storage react-native-get-random-values react-native-svg react-native-modal @react-native-community/netinfo @walletconnect/react-native-compat

----------------------------------------

TITLE: Implementing Solana Counter Smart Contract Interaction in Vue
DESCRIPTION: A Vue.js component that implements a counter using Solana smart contracts. It demonstrates account creation, transaction signing, and state management using @solana/web3.js and @reown/appkit libraries. The component includes functionality to create a new counter account and increment its value on the Solana blockchain.

LANGUAGE: tsx
CODE:
import { ref } from 'vue';
import {
  SystemProgram,
  PublicKey,
  Keypair,
  Transaction,
  TransactionInstruction,
  LAMPORTS_PER_SOL
} from '@solana/web3.js';
import { useAppKitAccount, useAppKitProvider } from '@reown/appkit/vue'
import { useAppKitConnection, type Provider } from '@reown/appkit-adapter-solana/vue'

export default {
  setup() {
    const counterMessage = ref('');
    const { address } = useAppKitAccount();
    const { connection } = useAppKitConnection()
    const { walletProvider } = useAppKitProvider<Provider>('solana')

    function deserializeCounterAccount(data) {
      if (data?.byteLength !== 8) {
        throw Error('Need exactly 8 bytes to deserialize counter');
      }

      return {
        count: Number(data[0])
      };
    }

    async function onIncrementCounter() {
      try {
        const PROGRAM_ID = new PublicKey('Cb5aXEgXptKqHHWLifvXu5BeAuVLjojQ5ypq6CfQj1hy');

        const counterKeypair = Keypair.generate();
        const counter = counterKeypair.publicKey;

        const balance = await connection.getBalance(walletProvider.publicKey);
        if (balance < LAMPORTS_PER_SOL / 100) {
          throw Error('Not enough SOL in wallet');
        }

        const COUNTER_ACCOUNT_SIZE = 8;
        const allocIx = SystemProgram.createAccount({
          fromPubkey: walletProvider.publicKey,
          newAccountPubkey: counter,
          lamports: await connection.getMinimumBalanceForRentExemption(COUNTER_ACCOUNT_SIZE),
          space: COUNTER_ACCOUNT_SIZE,
          programId: PROGRAM_ID
        });

        const incrementIx = new TransactionInstruction({
          programId: PROGRAM_ID,
          keys: [
            {
              pubkey: counter,
              isSigner: false,
              isWritable: true
            }
          ],
          data: Buffer.from([0x0])
        });

        const tx = new Transaction().add(allocIx).add(incrementIx);

        tx.feePayer = walletProvider.publicKey;
        tx.recentBlockhash = (await connection.getLatestBlockhash('confirmed')).blockhash;

        await walletProvider.signAndSendTransaction(tx, [counterKeypair]);

        const counterAccountInfo = await connection.getAccountInfo(counter, {
          commitment: 'confirmed'
        });

        if (!counterAccountInfo) {
          throw new Error('Expected counter account to have been created');
        }

        const counterAccount = deserializeCounterAccount(counterAccountInfo?.data);

        if (counterAccount.count !== 1) {
          throw new Error('Expected count to have been 1');
        }

        counterMessage.value = `[alloc+increment] count is: ${counterAccount.count}`;
      } catch (error) {
        console.error(error);
        counterMessage.value = `Error: ${error.message}`;
      }
    }

    return {
      onIncrementCounter,
      counterMessage
    };
  }
};

----------------------------------------

TITLE: Using AppKit Account Hook in React
DESCRIPTION: Hook that provides access to client wallet information including address, CAIP-formatted address, and connection status

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from '@reown/appkit/react'

function Components() {
  const { address, caipAddress, isConnected } = useAppKitAccount();

  //...
}

----------------------------------------

TITLE: Getting Subscribers using JavaScript
DESCRIPTION: Example of retrieving subscriber information using JavaScript's Fetch API with type definitions.

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const requestBody: RequestBody = {
  accounts: [
    'eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029',
    'eip155:1:0x0000000000000000000000000000000000000000'
  ]
}

const response = await fetch(`https://notify.walletconnect.com/v1/${PROJECT_ID}/subscribers`, {
  method: 'POST',
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`
  }
  body: JSON.stringify(requestBody)
})

const subscribers: ResponseBody = await response.json()

type RequestBody = {
  // Max 100 accounts
  accounts: string[]
}
type ResponseBody = {
  [account: string]: Subscriber
}
type Subscriber = {
  notification_types: string[]
}

----------------------------------------

TITLE: Implementing Solana Counter Contract Interaction in TypeScript
DESCRIPTION: Implementation of a counter smart contract interaction on Solana blockchain. The code demonstrates account creation, transaction construction, signing, and state verification using @solana/web3.js and AppKit integration. It includes account deserialization, balance checking, and transaction execution.

LANGUAGE: tsx
CODE:
import {
  SystemProgram,
  PublicKey,
  Keypair,
  Transaction,
  TransactionInstruction,
  LAMPORTS_PER_SOL
} from '@solana/web3.js'
import { useAppKitAccount, useAppKitProvider } from '@reown/appkit/react'
import { useAppKitConnection, type Provider } from '@reown/appkit-adapter-solana/react'

function deserializeCounterAccount(data?: Buffer): { count: number } {
  if (data?.byteLength !== 8) {
    throw Error('Need exactly 8 bytes to deserialize counter')
  }

  return {
    count: Number(data[0])
  }
}

const { address } = useAppKitAccount()
const { connection } = useAppKitConnection()
const { walletProvider } = useAppKitProvider<Provider>('solana')

async function onIncrementCounter() {
  const PROGRAM_ID = new PublicKey('Cb5aXEgXptKqHHWLifvXu5BeAuVLjojQ5ypq6CfQj1hy')

  const counterKeypair = Keypair.generate()
  const counter = counterKeypair.publicKey

  const balance = await connection.getBalance(walletProvider.publicKey)
  if (balance < LAMPORTS_PER_SOL / 100) {
    throw Error('Not enough SOL in wallet')
  }

  const COUNTER_ACCOUNT_SIZE = 8
  const allocIx: TransactionInstruction = SystemProgram.createAccount({
    fromPubkey: walletProvider.publicKey,
    newAccountPubkey: counter,
    lamports: await connection.getMinimumBalanceForRentExemption(COUNTER_ACCOUNT_SIZE),
    space: COUNTER_ACCOUNT_SIZE,
    programId: PROGRAM_ID
  })

  const incrementIx: TransactionInstruction = new TransactionInstruction({
    programId: PROGRAM_ID,
    keys: [
      {
        pubkey: counter,
        isSigner: false,
        isWritable: true
      }
    ],
    data: Buffer.from([0x0])
  })

  const tx = new Transaction().add(allocIx).add(incrementIx)

  tx.feePayer = walletProvider.publicKey
  tx.recentBlockhash = (await connection.getLatestBlockhash('confirmed')).blockhash

  await walletProvider.signAndSendTransaction(tx, [counterKeypair])

  const counterAccountInfo = await connection.getAccountInfo(counter, {
    commitment: 'confirmed'
  })

  if (!counterAccountInfo) {
    throw new Error('Expected counter account to have been created')
  }

  const counterAccount = deserializeCounterAccount(counterAccountInfo?.data)

  if (counterAccount.count !== 1) {
    throw new Error('Expected count to have been 1')
  }

  console.log(`[alloc+increment] count is: ${counterAccount.count}`);
}

----------------------------------------

TITLE: Configuring Default Session Parameters in Swift
DESCRIPTION: This code sets up default session parameters for AppKit, including methods, events, and blockchains. It defines a set of EIP155 namespaces with specific chains, methods, and events.

LANGUAGE: swift
CODE:
let methods: Set<String> = ["eth_sendTransaction", "personal_sign", "eth_signTypedData"]
let events: Set<String> = ["chainChanged", "accountsChanged"]
let blockchains: Set<Blockchain> = [Blockchain("eip155:1")!]
let namespaces: [String: ProposalNamespace] = [
    "eip155": ProposalNamespace(
        chains: blockchains,
        methods: methods,
        events: events
    )
]

let defaultSessionParams =  SessionParams(
                                requiredNamespaces: namespaces,
                                optionalNamespaces: nil,
                                sessionProperties: nil
                            )

----------------------------------------

TITLE: Implementing Web3Inbox Registration and Subscription in React
DESCRIPTION: This snippet demonstrates how to use Web3Inbox hooks in a React component to handle user registration, subscription, and unsubscription. It also integrates with Wagmi for account and signature functionality.

LANGUAGE: tsx
CODE:
// Index.tsx
import {
  useNotifications,
  usePrepareRegistration,
  useRegister,
  useSubscribe,
  useSubscription,
  useUnsubscribe,
  useWeb3InboxAccount,
  useWeb3InboxClient
} from '@web3inbox/react'
import { useCallback, useEffect } from 'react'
import { useSignMessage, useAccount } from 'wagmi'

import Notifications from './Notifications'

export default function App() {
  // Wagmi Hooks
  const { address } = useAccount()
  const { signMessageAsync } = useSignMessage()

  // W3I Hooks
  const { prepareRegistration } = usePrepareRegistration()
  const { register, isLoading: isRegistering } = useRegister()
  const { data: w3iClient, isLoading: w3iClientIsLoading } = useWeb3InboxClient()
  const { isRegistered } = useWeb3InboxAccount(`eip155:1:${address}`)

  // Registration of your address to allow notifications
  // This is done via a signature of a message (SIWE) and the
  // signMessageAsync function from wagmi
  const handleRegistration = async () => {
    try {
      const { message, registerParams } = await prepareRegistration()
      const signature = await signMessageAsync({ message: message })
      await register({ registerParams, signature })
    } catch (registerIdentityError: any) {
      console.error(registerIdentityError)
    }
  }

  // Subscription to dapp notifications
  // Subscribe can be called as a function post registration
  // Can be moved above but shown for example clarity
  const { subscribe, isLoading: isSubscribing } = useSubscribe()
  const { unsubscribe, isLoading: isUnsubscribing } = useUnsubscribe()
  const { data: subscription } = useSubscription()
  const isSubscribed = Boolean(subscription)

  // Note: We are using AppKit for the dapp <> wallet connection.
  // The <appkit-button /> module is from AppKit. Check AppKit Docs for further info.
  return (
    <>
      <main className={styles.main}>
        {w3iClientIsLoading ? (
          <div>Loading W3I Client</div>
        ) : (
          <div>
            <h1>W3I QuickStart</h1>
            <appkit-button />
            <div className={styles.flexColumn}>
              <button onClick={handleRegistration} disabled={isRegistered}>
                {isRegistered ? 'Registered' : 'Register'}
              </button>
              <button
                onClick={isSubscribed ? unsubscribe : subscribe}
                disabled={isSubscribing || isUnsubscribing}
              >
                {isSubscribed ? 'Unsubscribe' : 'Subscribe'}
              </button>
              <hr />
              {isSubscribed ? <Notifications /> : null}
            </div>
          </div>
        )}
      </main>
    </>
  )
}

----------------------------------------

TITLE: Accessing Wallet Information
DESCRIPTION: Demonstrates how to subscribe to and retrieve wallet metadata information including name and icon.

LANGUAGE: typescript
CODE:
function handler({ name, icon }) {
  console.log(name, icon)
}

modal.subscribeWalletInfo(handler)

//or

const { name, icon } = modal.getWalletInfo()

----------------------------------------

TITLE: Implementing DApp Redirection in React Native
DESCRIPTION: Demonstrates how to handle DApp redirection after session approval using React Native's Linking API. The code checks for a native redirect scheme in the session metadata and opens the URL if available, otherwise prompting for manual return.

LANGUAGE: javascript
CODE:
import { Linking } from 'react-native'

async function onApprove(proposal, namespaces) {
  const session = await walletKit.approveSession({ id: proposal.id, namespaces })

  const dappScheme = session.peer.metadata.redirect?.native

  if (dappScheme) {
    Linking.openURL(dappScheme)
  } else {
    // Inform the user to manually return to the DApp
  }
}

----------------------------------------

TITLE: Implementing DApp Redirection in React Native
DESCRIPTION: Demonstrates how to handle DApp redirection after session approval using React Native's Linking API. The code checks for a native redirect scheme in the session metadata and opens the URL if available, otherwise prompting for manual return.

LANGUAGE: javascript
CODE:
import { Linking } from 'react-native'

async function onApprove(proposal, namespaces) {
  const session = await walletKit.approveSession({ id: proposal.id, namespaces })

  const dappScheme = session.peer.metadata.redirect?.native

  if (dappScheme) {
    Linking.openURL(dappScheme)
  } else {
    // Inform the user to manually return to the DApp
  }
}

----------------------------------------

TITLE: Initializing WalletKit with AppMetadata in Swift
DESCRIPTION: Configures WalletKit with application metadata, crypto provider, and optional push notification settings. This is the first step in setting up WalletKit for use in an iOS app.

LANGUAGE: swift
CODE:
let telemetryEnabled = true;
let metadata = AppMetadata(
    name: "Example Wallet",
    description: "Wallet description",
    url: "example.wallet",
    icons: ["https://avatars.githubusercontent.com/u/37784886"],
    redirect: AppMetadata.Redirect(native: "example://", universal: nil)
)

WalletKit.configure(
    metadata: metadata,
    crypto: DefaultCryptoProvider(),
    // Used for the Push: "echo.walletconnect.com" will be used by default if not provided
    pushHost: "echo.walletconnect.com",
    // Used for the Push: "APNSEnvironment.production" will be used by default if not provided
    environment: .production,
    telemetryEnabled: telemetryEnabled
)

----------------------------------------

TITLE: Switching Networks with Reown AppKit in TypeScript
DESCRIPTION: This code demonstrates how to initialize the Reown AppKit with specific networks and then switch to a different network. It requires importing necessary dependencies and configuring the AppKit with adapters, project ID, networks, and features.

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { mainnet, arbitrum, polygon } from '@reown/appkit/networks'

const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    analytics: true,
  }
})

modal.switchNetwork(polygon)

----------------------------------------

TITLE: Integrating Custom Connectors with Wagmi
DESCRIPTION: Demonstrates how to set up AppKit with Wagmi adapter and custom wallet connectors including WalletConnect and Coinbase Wallet. Uses React Query for state management and supports EIP-6963.

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit/react'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

import { http, WagmiProvider, CreateConnectorFn } from 'wagmi'
import { sepolia } from '@reown/appkit/networks'
import { walletConnect, coinbaseWallet, injected } from 'wagmi/connectors'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

const queryClient = new QueryClient()

const projectId = 'YOUR_PROJECT_ID'

const metadata = {
  //...
}

// create the connectors (delete the ones you don't need)
const connectors: CreateConnectorFn[] = []
connectors.push(walletConnect({ projectId, metadata, showQrModal: false })) // showQrModal must be false
connectors.push(injected({ shimDisconnect: true }))
connectors.push(
  coinbaseWallet({
    appName: metadata.name,
    appLogoUrl: metadata.icons[0]
  })
)

export const networks = [sepolia]

export const wagmiAdapter = new WagmiAdapter({
  storage:
  transports: {
    [sepolia.id]: http()
  },
  connectors,
  projectId,
  networks
})

export const config = wagmiAdapter.wagmiConfig

createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [sepolia]
})

export function ContextProvider({ children }) {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Adding Custom Wallets Configuration
DESCRIPTION: Customize the wallet selection by adding custom wallet definitions with specific parameters like ID, name, and various connection links.

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  customWallets: [
    {
      id: 'myCustomWallet',
      name: 'My Custom Wallet',
      homepage: 'www.mycustomwallet.com', // Optional
      mobile_link: 'mobile_link', // Optional - Deeplink or universal
      link_mode: 'universal_link', // Optional - Universal link if the wallet supports link-mode
      desktop_link: 'desktop_link', // Optional - Deeplink
      webapp_link: 'webapp_link', // Optional
      app_store: 'app_store', // Optional
      play_store: 'play_store' // Optional
    }
  ]
})

----------------------------------------

TITLE: Configuring and Switching Networks with AppKit
DESCRIPTION: Shows how to create an AppKit instance with specific configurations and switch to a different network using the switchNetwork function.

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit/vue'
import { mainnet, arbitrum, polygon } from '@reown/appkit/networks'

const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    analytics: true,
  }
})

modal.switchNetwork(polygon)

----------------------------------------

TITLE: Installing AppKit with Wagmi for Ethereum
DESCRIPTION: Command to install AppKit and its dependencies for use with Wagmi and Ethereum.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-wagmi wagmi viem

----------------------------------------

TITLE: Accessing Account Data with Wagmi getAccount
DESCRIPTION: Demonstrates how to use the getAccount action from Wagmi core to access Ethereum account data and connection status. Returns the current account state including address and connection details.

LANGUAGE: tsx
CODE:
import { getAccount } from '@wagmi/core'

const account = getAccount()

----------------------------------------

TITLE: Implementing AppKit Modal Using React Hooks
DESCRIPTION: Demonstrates how to implement AppKit modal functionality using the useAppKit hook. Shows how to trigger the modal with different views and handle modal opening programmatically.

LANGUAGE: tsx
CODE:
import { useAppKit } from '@reown/appkit/react'

export default function ConnectButton() {
  // 4. Use modal hook
  const { open } = useAppKit()

  return (
    <>
      <button onClick={() => open()}>Open Connect Modal</button>
      <button onClick={() => open({ view: 'Networks' })}>Open Network Modal</button>
    </>
  )
}

----------------------------------------

TITLE: Integrating AppKit with Wagmi and Bitcoin
DESCRIPTION: Implementation example showing how to configure AppKit with Wagmi and Bitcoin adapters, including network setup and metadata configuration.

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

import { mainnet, arbitrum, sepolia, bitcoin } from '@reown/appkit/networks'

const networks: [AppKitNetwork, ...AppKitNetwork[]] = [mainnet, arbitrum, sepolia, bitcoin]

const projectId = 'YOUR_PROJECT_ID'

export const wagmiAdapter = new WagmiAdapter({
  ssr: true,
  projectId, 
  networks
})

const bitcoinAdapter = new BitcoinAdapter({
  projectId
})

const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://example.com',
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

const modal = createAppKit({
  adapters: [wagmiAdapter, bitcoinAdapter],
  networks,
  metadata,
  projectId,
  features: {
    analytics: true,
  }
})

----------------------------------------

TITLE: Using useAppKit Hook in React
DESCRIPTION: Hook for controlling the modal with open and close functionality.

LANGUAGE: typescript
CODE:
import { useAppKit } from '@reown/appkit/react'

export default function Component() {
  const { open, close } = useAppKit()
}

----------------------------------------

TITLE: Conditional Transaction Sending with EIP-5792
DESCRIPTION: Demonstrates conditional logic for sending transactions based on whether the wallet supports EIP-5792 capabilities. Shows fallback to traditional writeContractAsync when EIP-5792 is not supported.

LANGUAGE: typescript
CODE:
if (supported) {
  sendCalls(...)
}
else {
  writeContractAsync(...)
}

----------------------------------------

TITLE: Executing eth_sendTransaction Method in Ethereum JSON-RPC
DESCRIPTION: This snippet demonstrates how to use the eth_sendTransaction method to create a new message call transaction or contract creation. It includes the request format with parameters and the expected result format.

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "eth_sendTransaction",
  "params":[{see above}],
}

// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"
}

----------------------------------------

TITLE: Sending ERC20 Tokens in C# using AppKit
DESCRIPTION: This code snippet shows how to send ERC20 tokens using AppKit. It demonstrates estimating gas, preparing arguments for the transfer function, and sending the transaction using Evm.WriteContractAsync method.

LANGUAGE: csharp
CODE:
const string contractAddress = "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984";
const string recipientAddress = "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045";
const string abi = "..."; // ABI of the ERC20 token contract

BigInteger amount = 1;

// Arguments for the transfer method. The order of the arguments must match the order in the method signature.
// Method signature: `function transfer(address _to, uint256 _value) public returns (bool success)`
var arguments = new object[]
{
    recipientAddress,
    amount
};

// Estimate gas amount
var gasAmount = await AppKit.Evm.EstimateGasAsync(contractAddress, abi, "transfer", arguments: arguments);

// Send transaction
var result = await AppKit.Evm.WriteContractAsync(contractAddress, abi, "transfer", gasAmount, arguments);

----------------------------------------

TITLE: Registering Users with Message Signing in TypeScript using @wagmi/core
DESCRIPTION: This snippet demonstrates the process of preparing registration parameters, checking account registration status, signing a message, and registering a user. It utilizes the @wagmi/core library for message signing and custom client methods for registration-related operations.

LANGUAGE: typescript
CODE:
import { signMessageAsync } from '@wagmi/core'

const { registerParams, signature } = await client.prepareRegistration({
  account
})
const isRegistered = await client.getAccountIsRegistered(account)
const signature = await signMessageAsync({ message })
await register({ registerParams, signature })

----------------------------------------

TITLE: Integrating AppKit with Wagmi and Solana
DESCRIPTION: Implementation example showing how to configure AppKit with Wagmi and Solana adapters, including network setup and metadata configuration.

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { SolanaAdapter } from '@reown/appkit-adapter-solana'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

import { mainnet, arbitrum, sepolia, solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/types'

const networks: [AppKitNetwork, ...AppKitNetwork[]] = [mainnet, arbitrum, sepolia, solana, solanaTestnet, solanaDevnet]

const projectId = 'YOUR_PROJECT_ID'

export const wagmiAdapter = new WagmiAdapter({
  ssr: true,
  projectId, 
  networks
})

const solanaWeb3JsAdapter = new SolanaAdapter()

const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://example.com',
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

const modal = createAppKit({
  adapters: [wagmiAdapter, solanaWeb3JsAdapter],
  networks,
  metadata,
  projectId,
  features: {
    analytics: true,
  }
})

----------------------------------------

TITLE: Configuring AppKit v5 with Default Settings in JavaScript
DESCRIPTION: This code snippet shows how to configure AppKit v5 using default settings in a JavaScript environment. It includes importing necessary modules, creating a Wagmi configuration, and initializing the Web3Modal.

LANGUAGE: ts
CODE:
import { createWeb3Modal, defaultWagmiConfig } from '@web3modal/wagmi/react'
import { createConfig } from '@wagmi/core'
import { arbitrum, mainnet } from 'viem/chains'

const chains = [arbitrum, mainnet]
const projectId = 'YOUR_PROJECT_ID'

const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://example.com',
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}
const wagmiConfig = defaultWagmiConfig({ chains, projectId, appName: metadata.name })

createWeb3Modal({
  wagmiConfig,
  projectId,
  enableAnalytics: true
})

----------------------------------------

TITLE: Configuring AppKit with Project Settings
DESCRIPTION: Configuration code for initializing AppKit with project ID and metadata. Required fields include project name, description, URL, and icon URL.

LANGUAGE: csharp
CODE:
await AppKit.InitializeAsync(
    new AppKitConfig(
        projectId: "YOUR PROJECT ID",
        new Metadata(
            name: "My Game",
            description: "Short description
            url: "https://example.com",
            iconUrl: "https://example.com/logo.png"
        )
    )
);

----------------------------------------

TITLE: Pairing with WalletKit in TypeScript
DESCRIPTION: Demonstrates how to pair a wallet with a dapp using the WalletKit client. It includes error handling for potential pairing issues.

LANGUAGE: typescript
CODE:
const uri = 'xxx'; // pairing uri
try {
    await walletKit.pair({ uri });
} catch (error) {
    // some error happens while pairing - check Expected errors section
}

----------------------------------------

TITLE: Defining ContractCallPermission Type in TypeScript
DESCRIPTION: TypeScript definition for the ContractCallPermission type, including enums for ParamOperator and Operation, and types for ArgumentCondition and FunctionPermission.

LANGUAGE: typescript
CODE:
export enum ParamOperator {
  EQUAL = 'EQUAL',
  GREATER_THAN = 'GREATER_THAN',
  LESS_THAN = 'LESS_THAN'
}

export enum Operation {
  Call = 'Call',
  DelegateCall = 'DelegateCall'
}

export type ArgumentCondition = {
  operator: ParamOperator
  value: `0x${string}`
}

export type FunctionPermission = {
  functionName: string
  args?: ArgumentCondition[]
  valueLimit?: `0x${string}`
  operation?: Operation
}
export type ContractCallPermission = {
  type: 'contract-call'
  data: {
    address: `0x${string}`
    abi: Record<string, unknown>[]
    functions: FunctionPermission[]
  }
}

----------------------------------------

TITLE: Fetching dApp Listings with HTTP GET
DESCRIPTION: Endpoint to retrieve paginated dApp listings from the public cloud explorer. Requires a valid project ID.

LANGUAGE: http
CODE:
GET https://explorer-api.walletconnect.com/v3/dapps?projectId=YOUR_PROJECT_ID&entries=5&page=1

----------------------------------------

TITLE: Configuring Custom Network in Reown AppKit using JavaScript
DESCRIPTION: Demonstrates how to define and configure a custom EVM network in Reown AppKit using the defineChain function. Shows the setup of essential network parameters including chain ID, CAIP network ID, native currency, RPC URLs, and block explorers.

LANGUAGE: javascript
CODE:
import { defineChain } from '@reown/appkit/networks';

// Define the custom network
const customNetwork = defineChain({
  id: 123456789,
  caipNetworkId: 'eip155:123456789',
  chainNamespace: 'eip155',
  name: 'Custom Network',
  nativeCurrency: {
    decimals: 18,
    name: 'Ether',
    symbol: 'ETH',
  },
  rpcUrls: {
    default: {
      http: ['RPC_URL'],
      webSocket: ['WS_RPC_URL'],
    },
  },
  blockExplorers: {
    default: { name: 'Explorer', url: 'BLOCK_EXPLORER_URL' },
  },
  contracts: {
    // Add the contracts here
  }
})

// Then pass it to the AppKit
createAppKit({
    adapters: [...],
    networks: [customNetwork],
    chainImages: { // Customize networks' logos
      123456789: '/custom-network-logo.png', // <chainId>: 'www.network.com/logo.png'
    }
})

----------------------------------------

TITLE: Using AppKit Account Hook in React
DESCRIPTION: Demonstrates how to use the useAppKitAccount hook to access client information including wallet address and connection status. Returns address, CAIP-formatted address, and connection state.

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from '@reown/appkit/react'

function Components() {
  const { address, caipAddress, isConnected } = useAppKitAccount();

  //...
}

----------------------------------------

TITLE: Installing AppKit via CLI
DESCRIPTION: Command to install AppKit using the dedicated CLI tool which provides an interactive setup process.

LANGUAGE: bash
CODE:
npx @reown/appkit-cli

----------------------------------------

TITLE: Adding Reown AppKit Dependencies in Android Module (Gradle Kotlin DSL)
DESCRIPTION: This code snippet demonstrates how to add Reown's Android Core and AppKit dependencies to an Android module's build.gradle.kts file. It uses a platform dependency for version management and includes both core and appkit libraries.

LANGUAGE: gradle
CODE:
implementation(platform("com.reown:android-bom:$BOM_VERSION"))
implementation("com.reown:android-core")
implementation("com.reown:appkit")

----------------------------------------

TITLE: Initializing AppKit with SIWE Configuration in TypeScript
DESCRIPTION: This code snippet demonstrates how to initialize AppKit with SIWE configuration. It includes setting up adapters, project ID, networks, and other features along with the SIWE config.

LANGUAGE: typescript
CODE:
// Pass your siweConfig inside the createAppKit() function
  const modal = createAppKit({
      adapters: [wagmiAdapter], //or your Ethers adapter
      projectId,
      networks: [mainnet, arbitrum],
      defaultNetwork: mainnet,
      features: {
        analytics: true, // Optional - defaults to your Cloud configuration
      },
      siweConfig: siweConfig // pass your siweConfig
  })

----------------------------------------

TITLE: Setting Up Push Notifications for Notify API in React Native
DESCRIPTION: Configures push notifications for the Notify API in a React Native application using Firebase Cloud Messaging and Notifee.

LANGUAGE: javascript
CODE:
import { AppRegistry } from 'react-native'
import { name as appName } from './app.json'
import crypto from 'react-native-quick-crypto'

import messaging from '@react-native-firebase/messaging'
import notifee, { AndroidImportance, AndroidVisibility, EventType } from '@notifee/react-native'
import { NotifyClient } from '@walletconnect/notify-client'
import { decryptMessage } from '@walletconnect/notify-message-decrypter'

import App from './src/App'

const polyfillDigest = async (algorithm, data) => {
  const algo = algorithm.replace('-', '').toLowerCase()
  const hash = crypto.createHash(algo)
  hash.update(data)
  return hash.digest()
}

globalThis.crypto = crypto
globalThis.crypto.subtle = {
  digest: polyfillDigest
}

notifee.createChannel({
  id: 'default',
  name: 'Default Channel',
  lights: false,
  vibration: true,
  importance: AndroidImportance.HIGH,
  visibility: AndroidVisibility.PUBLIC
})

let notifyClient

const projectId = process.env.ENV_PROJECT_ID

async function registerAppWithFCM() {
  if (Platform.OS === 'android') {
    await messaging().registerDeviceForRemoteMessages()
  }
}

async function registerClient(deviceToken, clientId) {
  const body = JSON.stringify({
    client_id: clientId,
    token: deviceToken,
    type: 'fcm',
    always_raw: true
  })

  const requestOptions = {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body
  }

  return fetch(`https://echo.walletconnect.com/${projectId}/clients`, requestOptions)
    .then(response => response.json())
    .then(result => console.log('>>> registered client', result))
    .catch(error => console.log('>>> error while registering client', error))
}

async function handleGetToken(token) {
  const status = await messaging().requestPermission()
  const enabled =
    status === messaging.AuthorizationStatus.AUTHORIZED ||
    status === messaging.AuthorizationStatus.PROVISIONAL

  if (enabled) {
    notifyClient = await NotifyClient.init({ projectId })
    const clientId = await notifyClient.core.crypto.getClientId()
    return registerClient(token, clientId)
  }
}

messaging().getToken().then(handleGetToken)
messaging().onTokenRefresh(handleGetToken)

async function onMessageReceived(remoteMessage) {
  if (!remoteMessage.data?.blob || !remoteMessage.data?.topic) {
    console.log('Missing blob or topic on notification message.')
    return
  }

  const decryptedMessage = await decryptMessage({
    topic: remoteMessage.data?.topic,
    encryptedMessage: remoteMessage.data?.blob
  })

  return notifee.displayNotification({
    title: decryptedMessage.title,
    body: decryptedMessage.body,
    id: 'default',
    android: {
      channelId: 'default',
      importance: AndroidImportance.HIGH,
      visibility: AndroidVisibility.PUBLIC,
      smallIcon: 'ic_launcher',
      pressAction: {
        id: 'default'
      }
    }
  })
}

messaging().onMessage(onMessageReceived)
messaging().setBackgroundMessageHandler(onMessageReceived)

notifee.onBackgroundEvent(async ({ type, detail }) => {
  const { notification, pressAction } = detail

  if (type === EventType.ACTION_PRESS && pressAction.id === 'mark-as-read') {
    await notifee.cancelNotification(notification.id)
  }
})

function HeadlessCheck({ isHeadless }) {
  if (isHeadless) {
    return null
  }

  return <App />
}

AppRegistry.registerComponent(appName, () => HeadlessCheck)

----------------------------------------

TITLE: Configuring AppKit in App.tsx
DESCRIPTION: Code snippet for setting up AppKit configuration including chains, project ID, and metadata in App.tsx.

LANGUAGE: tsx
CODE:
// 0. Setup chains
const chains = [solana, solanaTestnet, solanaDevnet]

//  Get projectId at https://cloud.reown.com
const projectId = import.meta.env.VITE_PROJECT_ID
if (!projectId) throw new Error('Project ID is undefined')

// 2. Create solanaConfig
const metadata = {
  name: 'Appkit Solana Example',
  description: 'Appkit Solana Example',
  url: 'https://example.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

const solanaConfig = defaultSolanaConfig({
  metadata,
  chains,
  projectId,
  auth: {
    email: true,
    socials: ['google', 'x', 'farcaster', 'github']
  }
})

//  Create modal
createWeb3Modal({
  metadata,
  solanaConfig,
  chains,
  projectId
})

----------------------------------------

TITLE: Installing SIWE Dependencies
DESCRIPTION: Command to install required packages for SIWE implementation including AppKit SIWE, SIWE library, and viem.

LANGUAGE: bash
CODE:
npm i @reown/appkit-siwe siwe viem

----------------------------------------

TITLE: Configuring AppKit with Solana in Vue.js
DESCRIPTION: This snippet shows how to set up AppKit with Solana integration in a Vue.js component. It includes importing required modules, configuring project details, setting up Solana adapter, and creating an AppKit instance with specified adapters, networks, and wallets.

LANGUAGE: html
CODE:
<script setup lang="ts">
  import { createAppKit, useAppKit} from '@reown/appkit-solana/vue'
  import { SolanaAdapter } from '@reown/appkit-adapter-solana/vue'
  import {solana, solanaTestnet, solanaDevnet} from '@reown/appkit/networks'

  // 1. Get projectId from https://cloud.reown.com
  const projectId = 'YOUR_PROJECT_ID'

  // 2. Set up metadata
  const metadata = {
    name: 'AppKit',
    description: 'AppKit Solana Example',
    url: 'https://example.com', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/179229932']
  }

  // 3. Set up Solana Adapter
  const solanaWeb3JsAdapter = new SolanaAdapter()

  // 4. Create modal
  createAppKit({
    adapters: [solanaWeb3JsAdapter],
    metadata,
    networks: [solana, solanaTestnet, solanaDevnet],
    projectId,
    wallets: [
      new PhantomWalletAdapter(),
      new SolflareWalletAdapter(),
    ]
  })
</script>

<template> // Rest of your app ... </template>

----------------------------------------

TITLE: Initializing ReOwn AppKit with EthersAdapter in TypeScript
DESCRIPTION: This code snippet demonstrates how to set up and configure the ReOwn AppKit using TypeScript. It includes importing required modules, defining project metadata, and creating an AppKit instance with specific adapters, networks, and features. The configuration requires a project ID from ReOwn Cloud and proper metadata setup for application verification.

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { EthersAdapter } from '@reown/appkit-adapter-ethers'
import { mainnet, arbitrum } from '@reown/appkit/networks'

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Create your application's metadata object
const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://reown.com/appkit', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// 3. Create a AppKit instance
const modal = createAppKit({
  adapters: [new EthersAdapter()],
  networks: [mainnet, arbitrum],
  metadata,
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

----------------------------------------

TITLE: Installing SIWE Dependencies
DESCRIPTION: Command to install required packages for SIWE implementation including AppKit SIWE, SIWE library, and viem.

LANGUAGE: bash
CODE:
npm i @reown/appkit-siwe siwe viem

----------------------------------------

TITLE: Implementing ENSProvider Class in TypeScript
DESCRIPTION: Implements the ENSProvider interface using ethers.js library. It includes methods to resolve ENS names and addresses using a provided provider.

LANGUAGE: typescript
CODE:
import { Provider } from '@ethersproject/abstract-provider';
import { getAddress } from '@ethersproject/address';

export class ENS implements ENSProvider {
  provider: Provider;

  constructor(provider: Provider) {
    this.provider = provider;
  }

  async getAddress(ensName: string): Promise<string> {
    const address = await this.provider.resolveName(ensName);
    if (address === null) {
      throw new Error(`Unable to resolve ENS name: ${ensName}`);
    }
    return getAddress(address);
  }

  async getName(address: string): Promise<string> {
    const name = await this.provider.lookupAddress(address);
    if (name === null) {
      throw new Error(`Unable to resolve address: ${address}`);
    }
    return name;
  }
}

----------------------------------------

TITLE: Setting AppKit Delegate - Kotlin
DESCRIPTION: Sets the delegate for AppKit to receive updates from the Wallet.

LANGUAGE: kotlin
CODE:
AppKit.setDelegate(appKitModalDelegate)

----------------------------------------

TITLE: Using useAppKitConnection Hook in Vue.js for Solana
DESCRIPTION: This snippet demonstrates how to use the useAppKitConnection hook to obtain a Solana connection object. The connection object can be used for various Solana-specific operations.

LANGUAGE: tsx
CODE:
import { useAppKitConnection } from '@reown/appkit-adapter-solana/vue'

...

const { connection } = useAppKitConnection()

----------------------------------------

TITLE: Setting Up Chains Configuration
DESCRIPTION: Demonstrates how to define and set up Ethereum chains for AppKit. Must be configured before opening the modal.

LANGUAGE: kotlin
CODE:
AppKit.setChains(AppKitChainsPresets.ethChains.values.toList())

----------------------------------------

TITLE: Configuring Authentication Features in AppKit with Wagmi
DESCRIPTION: This snippet demonstrates how to configure the 'features' parameter in the createAppKit function to enable email and social login options using the Wagmi adapter.

LANGUAGE: typescript
CODE:
const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata,
  /* highlight-add-start */
  features: {
    email: true, // default to true
    socials: ['google', 'x', 'github', 'discord', 'apple', 'facebook', 'farcaster'],
    emailShowWallets: true, // default to true
  },
  allWallets: 'SHOW', // default to SHOW
  /* highlight-add-end */
})

----------------------------------------

TITLE: Event Handling in Universal Provider
DESCRIPTION: Implementation of event listeners for various provider events including URI display, session ping, events, updates, and deletion

LANGUAGE: typescript
CODE:
// Subscribe for pairing URI
provider.on('display_uri', uri => {
  console.log('display_uri', uri)
})

// Subscribe to session ping
provider.on('session_ping', ({ id, topic }) => {
  console.log('session_ping', id, topic)
})

// Subscribe to session event
provider.on('session_event', ({ event, chainId }) => {
  console.log('session_event', event, chainId)
})

// Subscribe to session update
provider.on('session_update', ({ topic, params }) => {
  console.log('session_update', topic, params)
})

// Subscribe to session delete
provider.on('session_delete', ({ id, topic }) => {
  console.log('session_delete', id, topic)
})

----------------------------------------

TITLE: Initializing AppKit Configuration
DESCRIPTION: Creates and configures an AppKit instance with Ethers5 adapter, project metadata, network settings, and analytics features. Requires a project ID from cloud.reown.com and proper domain configuration in metadata.

LANGUAGE: tsx
CODE:
'use client'

import { createAppKit } from '@reown/appkit/react'
import { Ethers5Adapter } from '@reown/appkit-adapter-ethers5'
import { mainnet, arbitrum } from '@reown/appkit/networks'

// 1. Get projectId at https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Create a metadata object
const metadata = {
  name: 'My Website',
  description: 'My Website description',
  url: 'https://mywebsite.com', // origin must match your domain & subdomain
  icons: ['https://avatars.mywebsite.com/']
}

// 3. Create the AppKit instance
createAppKit({
  adapters: [new Ethers5Adapter()],
  metadata: metadata,
  networks: [mainnet, arbitrum],
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

export function AppKit() {
  return (
    <YourApp /> //make sure you have configured the <appkit-button> inside
  )
}

----------------------------------------

TITLE: Handling Authentication Event Subscription in TypeScript
DESCRIPTION: Event handler setup for processing incoming authentication requests through WalletKit, outlining the main steps for handling auth requests.

LANGUAGE: typescript
CODE:
walletKit.on('session_authenticate', async payload => {
  // Process the authentication request here.
  // Steps include:
  // 1. Populate the authentication payload with the supported chains and methods
  // 2. Format the authentication message using the payload and the user's account
  // 3. Present the authentication message to the user
  // 4. Sign the authentication message(s) to create a verifiable authentication object(s)
  // 5. Approve the authentication request with the authentication object(s)
})

----------------------------------------

TITLE: Reading Contract Data with useReadContract Hook
DESCRIPTION: Hook for reading data from a smart contract. Accepts contract ABI, address, and function name as parameters and handles loading, success, and error states.

LANGUAGE: tsx
CODE:
import { View, Text } from 'react-native'
import { useReadContract } from './abi'

function App() {
  const { data, isError, isPending, isSuccess } = useReadContract({
    abi,
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    functionName: 'totalSupply'
  })

  return (
    <View>
      {isPending && <Text>Loading</Text>}
      {isSuccess && <Text>Response: {data?.toString()}</Text>}
      {isError && <Text>Error reading contract</Text>}
    </View>
  )
}

----------------------------------------

TITLE: Wagmi Hooks Implementation
DESCRIPTION: Implementation of smart contract interaction using Wagmi hooks for reading and writing data

LANGUAGE: jsx
CODE:
import { useReadContract, useWriteContract } from 'wagmi'

const { writeContract, isSuccess } = useWriteContract()
const readContract = useReadContract({
  address: storageSC,
  abi: storageABI,
  functionName: 'retrieve',
  query: {
    enabled: false, // disable the query in onload
  }
})

LANGUAGE: jsx
CODE:
const handleReadSmartContract = async () => {
  const { data } = await readContract.refetch();
  console.log("data: ", data)
}

const handleWriteSmartContract = () => {
  writeContract({
    address: storageSC,
    abi: storageABI,
    functionName: 'store',
    args: [123n],
  })
}

useEffect(() => {
  if (isSuccess) {
    console.log("contract write success");
  }
}, [isSuccess])

----------------------------------------

TITLE: Initializing AppKit in Vue.js with TypeScript
DESCRIPTION: Sets up AppKit configuration in a Vue.js application including project metadata, blockchain adapters, and network settings. Requires a project ID from cloud.reown.com and proper domain URL configuration for wallet verification.

LANGUAGE: vue
CODE:
<script setup lang="ts">
  import { createAppKit, useAppKit } from '@reown/appkit/vue'
  import { Ethers5Adapter } from '@reown/appkit-adapter-ethers5'
  import { mainnet, arbitrum } from '@reown/appkit/networks'

  // 1. Get projectId at https://cloud.reown.com
  const projectId = 'YOUR_PROJECT_ID'

  function getBlockchainApiRpcUrl(chainId) {
  return `https://rpc.walletconnect.org/v1/?chainId=eip155:${chainId}&projectId=${projectId}`
}

  // 2. Create your application's metadata object
  const metadata = {
    name: 'My Website',
    description: 'My Website description',
    url: 'https://mywebsite.com', // url must match your domain & subdomain
    icons: ['https://avatars.mywebsite.com/']
  }

  // 3. Create a AppKit instance
  createAppKit({
    adapters: [new Ethers5Adapter()],
    networks: [mainnet, arbitrum],
    projectId,
    features: {
      analytics: true // Optional - defaults to your Cloud configuration
    }
  })

  // 4. Use modal composable
  const modal = useAppKit()
</script>

<template> // Rest of your app ... </template>

----------------------------------------

TITLE: Overriding AppKit Theme Variables in CSS
DESCRIPTION: This CSS snippet demonstrates how to override default AppKit theme variables to customize colors and styles.

LANGUAGE: css
CODE:
@import url("/Packages/com.reown.appkit.unity/UI Toolkit/AppKit Base Theme.tss");

* {
    --ro-color-accent-100: rgb(156, 81, 65);

    --ro-accent-glass-090: rgba(156, 81, 65, 0.9);
    --ro-accent-glass-080: rgba(156, 81, 65, 0.8);
    --ro-accent-glass-020: rgba(156, 81, 65, 0.2);
    --ro-accent-glass-015: rgba(156, 81, 65, 0.15);
    --ro-accent-glass-010: rgba(156, 81, 65, 0.1);
    --ro-accent-glass-005: rgba(156, 81, 65, 0.05);
    --ro-accent-glass-002: rgba(156, 81, 65, 0.02);
}

Modal {
    --ro-modal-border-color: #9a9085;
    --ro-modal-border-width: 3px;
}

----------------------------------------

TITLE: AppKit Initialization with SIWE Config
DESCRIPTION: Example of initializing AppKit with SIWE configuration and other required parameters.

LANGUAGE: javascript
CODE:
const modal = createAppKit({
    adapters: [wagmiAdapter],
    projectId,
    networks: [mainnet, arbitrum],
    defaultNetwork: mainnet,
    features: {
      analytics: true,
    },
    siweConfig: siweConfig
})

----------------------------------------

TITLE: Implementing Web3Button Component
DESCRIPTION: Demonstrates implementation of Web3Button in both Compose and XML view formats. The button supports different sizes and types through ConnectButtonSize and AccountButtonType parameters.

LANGUAGE: kotlin
CODE:
YourAppScreen(navController: NavController) {
    val appKitState = rememberAppKitState(navController = navController)
    Web3Button(
        state = appKitState,
        accountButtonType = AccountButtonType.NORMAL || AccountButtonType.MIXED,
        connectButtonSize = ConnectButtonSize.NORMAL || ConnectButtonSize.SMALL
    )
}

LANGUAGE: xml
CODE:
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:gravity="center"
    android:orientation="vertical">

        <com.reown.appkit.ui.components.button.views.Web3Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            app:connect_button_size="NORMAL" || "SMALL"
            app:account_button_type="NORMAL" || "MIXED"
        />
</LinearLayout>

----------------------------------------

TITLE: Session Approval Implementation
DESCRIPTION: Shows how to implement session approval functionality with success and error handling.

LANGUAGE: kotlin
CODE:
WalletKit.approveSession(approveProposal,
    onSuccess = {
        //Session approval response was sent successfully - update your UI
    }
    onError = { error ->
        //Error while sending session approval - update your UI
    })

----------------------------------------

TITLE: Implementing Verify API Domain Validation in JavaScript
DESCRIPTION: Example showing how to handle Verify API authentication requests and validate domains based on verifyContext. Demonstrates handling of VALID, INVALID, UNKNOWN validation states and malicious domain detection through isScam flag.

LANGUAGE: javascript
CODE:
walletKit.on("auth_request", async (authRequest) => {
  const { verifyContext } = authRequest
  const validation = verifyContext.verified.validation // can be VALID, INVALID or UNKNOWN
  const origin = verifyContext.verified.origin // the actual verified origin of the request
  const isScam = verifyContext.verified.isScam // true if the domain is flagged as malicious

  // if the domain is flagged as malicious, you should warn the user as they may lose their funds - check the `Threat` case for more info
  if(isScam) {
    // show a warning screen to the user
    // and proceed only if the user accepts the risk
  }

  switch(validation) {
    case "VALID":
      // proceed with the request - check the `Domain match` case for more info
      break
    case "INVALID":
      // show a warning dialog to the user - check the `Mismatch` case for more info
      // and proceed only if the user accepts the risk
      break
    case "UNKNOWN":
      // show a warning dialog to the user - check the `Unverified` case for more info
      // and proceed only if the user accepts the risk
      break
  }
})

----------------------------------------

TITLE: Handling AppKit Events in C#
DESCRIPTION: This code snippet demonstrates how to subscribe to and handle various events provided by the AppKit. It includes handlers for initialization, account connection and disconnection, account changes, and chain changes.

LANGUAGE: csharp
CODE:
//Invoked after successful initialization of AppKit
AppKit.Initialized += (sender, eventArgs) => { };

// Invoked after successful connection of an account
AppKit.AccountConnected += (sender, eventArgs) => {
    Account activeAccount = eventArgs.GetAccount();
};

// Invoked after successful disconnection of an account
AppKit.AccountDisconnected += (sender, eventArgs) => { };

// Invoked after account has changed
// This happens when the wallet updates a session or the user changes the active chain.
AppKit.AccountChanged += (sender, eventArgs) => {
    Account newAccount = eventArgs.Account;
};

// Invoked after active chain has changed
AppKit.ChainChanged += (sender, eventArgs) => {
    Chain newChain = eventArgs.Chain;
};

----------------------------------------

TITLE: Importing Reown AppKit Package in Flutter
DESCRIPTION: This snippet shows how to import the Reown AppKit package in a Flutter application.

LANGUAGE: javascript
CODE:
import 'package:reown_appkit/reown_appkit.dart';

----------------------------------------

TITLE: Using useAppKitProvider Hook for Wallet Interactions
DESCRIPTION: This snippet demonstrates how to use the useAppKitProvider hook to get the wallet provider and sign messages using ethers.js.

LANGUAGE: tsx
CODE:
import { BrowserProvider } from 'ethers'
import { useAppKitProvider } from '@reown/appkit/react'

function Components() {
  const { walletProvider } = useAppKitProvider('eip155')

  async function onSignMessage() {
    const provider = new BrowserProvider(walletProvider)
    const signer = await provider.getSigner()
    const signature = await signer?.signMessage('Hello AppKit Ethers')
    console.log(signature)
  }

  return <button onClick={() => onSignMessage()}>Sign Message</button>
}

----------------------------------------

TITLE: Initializing ReownAppKitModal with Basic Configuration
DESCRIPTION: Sets up the core ReownAppKitModal with project ID and metadata including app name, description, URL, and icons. Includes optional redirect configuration for native and universal links.

LANGUAGE: javascript
CODE:
final _appKitModal = ReownAppKitModal(
  context: context,
  projectId: '{YOUR_PROJECT_ID}',
  metadata: const PairingMetadata(
    name: 'Example App',
    description: 'Example app description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect( // OPTIONAL
      native: 'exampleapp://',
      universal: 'https://reown.com/exampleapp',
      linkMode: false,
    ),
  ),
);

----------------------------------------

TITLE: Initializing Shared WalletConnect Core Instance with TypeScript
DESCRIPTION: Demonstrates how to create a single Core instance and share it between SignClient and AuthClient SDKs. This approach prevents duplicate resource allocation and improves efficiency. Requires @walletconnect/core, @walletconnect/sign-client, and @walletconnect/auth-client packages.

LANGUAGE: typescript
CODE:
import { Core } from '@walletconnect/core'
import SignClient from '@walletconnect/sign-client'
import { AuthClient } from '@walletconnect/auth-client'

// First instantiate a separate `Core` instance.
const core = new Core({
  projectId: '<YOUR_PROJECT_ID>'
})

const metadata = {
  name: 'Example Dapp',
  description: 'Example Dapp',
  url: '#',
  icons: ['https://walletconnect.com/walletconnect-logo.png']
}

// Pass `core` to the SignClient on init.
const signClient = await SignClient.init({ core, metadata })

// Pass `core` to the AuthClient on init.
const authClient = await AuthClient.init({ core, metadata })

----------------------------------------

TITLE: Integrating Custom Wallet Adapters for Solana
DESCRIPTION: This snippet shows how to set up custom wallet adapters for Solana, including Phantom and Solflare wallets. It demonstrates creating a SolanaAdapter, configuring networks, and initializing the AppKit with Solana-specific settings.

LANGUAGE: ts
CODE:
import { createAppKit } from '@reown/appkit/react'
import { SolanaAdapter } from '@reown/appkit-adapter-solana/react'
import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'

import { SolflareWalletAdapter, PhantomWalletAdapter } from '@solana/wallet-adapter-wallets'

// 0. Set up Solana adapter
const solanaWeb3JsAdapter = new SolanaAdapter({
  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()]
})

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Set up the metadata
const metadata = {
  //...
}

// 3. Create the modal
const modal = createAppKit({
  adapters: [solanaWeb3JsAdapter],
  networks: [solana, solanaTestnet, solanaDevnet],
  metadata: metadata,
  projectId,
  features: {
    analytics: true,
  }
})

----------------------------------------

TITLE: Using useAppKit Hook for Modal Control
DESCRIPTION: Hook that provides functions to control the modal's open and close state.

LANGUAGE: typescript
CODE:
import { useAppKit } from '@reown/appkit/react'

export default function Component() {
  const { open, close } = useAppKit()
}

----------------------------------------

TITLE: Implementing useSendTransaction with Chain Abstraction in React/Wagmi
DESCRIPTION: Demonstrates how to properly configure the useSendTransaction hook from Wagmi for chain abstraction support. Sets gas parameter to null to allow wallet-side gas estimation, enabling cross-chain functionality.

LANGUAGE: tsx
CODE:
import { useSendTransaction } from 'wagmi'
import { parseEther } from 'viem'

function App() {
  const { sendTransaction } = useSendTransaction()

  return (
    <button
      onClick={() =>
        sendTransaction({
          to: '0xd2135CfB216b74109775236E36d4b433F1DF507B',
          value: parseEther('0.01'),
          gas: null // <- Add this
        })
      }
    >
      Send transaction
    </button>
  )
}

----------------------------------------

TITLE: Using Wagmi Sign Message Hook in React
DESCRIPTION: Shows implementation of the useSignMessage hook from wagmi library for signing messages with a connected wallet. Provides a button component that triggers message signing functionality.

LANGUAGE: tsx
CODE:
import { useSignMessage } from 'wagmi'

function App() {
  const { signMessage } = useSignMessage()

  return <button onClick={() => signMessage({ message: 'hello world' })}>Sign message</button>
}

----------------------------------------

TITLE: Retrieving Wallet Provider Type in TypeScript
DESCRIPTION: This snippet illustrates how to get the wallet or protocol type of the wallet provider using the getWalletProviderType method from the Reown modal.

LANGUAGE: typescript
CODE:
const walletProviderType = modal.getWalletProviderType()

----------------------------------------

TITLE: Managing Modal State
DESCRIPTION: Shows how to get and subscribe to modal state changes including open status and selected network ID.

LANGUAGE: typescript
CODE:
const modal = createAppKit({
   adapters: [wagmiAdapter], 
   networks: [mainnet, arbitrum],
   projectId 
  })

const { open, selectedNetworkId } = modal.getState()

// Subscribe to state changes
const modal = createAppKit({ wagmiConfig, projectId })

modal.subscribeState(newState => console.log(newState))

----------------------------------------

TITLE: Defining and Configuring Custom Network in Reown AppKit
DESCRIPTION: This code snippet demonstrates how to define a custom network using the defineChain function and configure it in the AppKit. It includes setting up network properties such as ID, name, native currency, RPC URLs, and block explorers.

LANGUAGE: javascript
CODE:
import { defineChain } from '@reown/appkit/networks';

// Define the custom network
const customNetwork = defineChain({
  id: 123456789,
  caipNetworkId: 'eip155:123456789',
  chainNamespace: 'eip155',
  name: 'Custom Network',
  nativeCurrency: {
    decimals: 18,
    name: 'Ether',
    symbol: 'ETH',
  },
  rpcUrls: {
    default: {
      http: ['RPC_URL'],
      webSocket: ['WS_RPC_URL'],
    },
  },
  blockExplorers: {
    default: { name: 'Explorer', url: 'BLOCK_EXPLORER_URL' },
  },
  contracts: {
    // Add the contracts here
  }
})

// Then pass it to the AppKit
createAppKit({
    adapters: [...],
    networks: [customNetwork],
    chainImages: { // Customize networks' logos
      123456789: '/custom-network-logo.png', // <chainId>: 'www.network.com/logo.png'
    }
})

----------------------------------------

TITLE: Implementing AppKit with Navigation Graph XML
DESCRIPTION: Shows implementation using XML navigation graph configuration.

LANGUAGE: xml
CODE:
<navigation >
    <fragment
        android:id="@+id/HomeFragment"
        android:name="com.reown.sample.HomeFragment">
    </fragment>

    <include app:graph ="@navigation/appkit_graph"/>
</navigation>

----------------------------------------

TITLE: Implementing Balance Hook Setup
DESCRIPTION: Setup of hooks to get wallet address and balance information using AppKit and Wagmi.

LANGUAGE: jsx
CODE:
const { address, isConnected } = useAppKitAccount() 

const { refetch } = useBalance({
    address: address as Address
}); 

----------------------------------------

TITLE: AppKit Context Provider Setup
DESCRIPTION: Implementation of ContextProvider component with AppKit and WagmiProvider configuration

LANGUAGE: tsx
CODE:
'use client'

import { wagmiAdapter, projectId } from '@/config'
import { createAppKit } from '@reown/appkit/react' 
import { mainnet, arbitrum } from '@reown/appkit/networks'
import { vTestnet } from '@/app/tenderly.config'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import React, { type ReactNode } from 'react'
import { cookieToInitialState, WagmiProvider, type Config } from 'wagmi'

const queryClient = new QueryClient()

if (!projectId) {
  throw new Error('Project ID is not defined')
}

const metadata = {
  name: "appkit-example",
  description: "AppKit Example - EVM",
  url: "https://exampleapp.com",
  icons: ["https://avatars.githubusercontent.com/u/37784886"]
}

const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum, vTestnet],
  metadata: metadata,
  features: {
    analytics: true,
  }
})

function ContextProvider({ children, cookies }: { children: ReactNode; cookies: string | null }) {
  const initialState = cookieToInitialState(wagmiAdapter.wagmiConfig as Config, cookies)

  return (
    <WagmiProvider config={wagmiAdapter.wagmiConfig as Config} initialState={initialState}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  )
}

export default ContextProvider

----------------------------------------

TITLE: Subscribing to Authentication Request Events
DESCRIPTION: Implementation of event subscription for handling incoming authentication requests in a wallet application. Shows how to set up an event listener and handle incoming auth requests.

LANGUAGE: javascript
CODE:
// subscribe to onSessionAuthRequest with a handler
_walletKit!.onSessionAuthRequest.subscribe(_onSessionAuthRequest);
//
void _onSessionAuthRequest(SessionAuthRequest? args) {
  if (args != null) {
    // Process the authentication request here.
    // Steps include:
    // 1. Populate the authentication payload with the supported chains and methods
    // 2. Format the authentication message using the payload and the user's account
    // 3. Present the authentication message to the user
    // 4. Sign the authentication message(s) to create a verifiable authentication object(s)
    // 5. Approve the authentication request with the authentication object(s)
  }
}

----------------------------------------

TITLE: Opening Reown Modal Views with TypeScript
DESCRIPTION: Demonstrates how to use the `open` function to select different views in the Reown modal, including options for connecting to specific blockchain networks.

LANGUAGE: typescript
CODE:
open({ view: 'Account' })

// to connect and show multi wallets view
open({ view: 'Connect'})

// to connect and show only solana wallets
open({ view: 'Connect', namespace: 'solana' })

// to connect and show only bitcoin wallets
open({ view: 'Connect', namespace: 'bip122' })

// to connect and show only ethereum wallets
open({ view: 'Connect', namespace: 'eip155' })

----------------------------------------

TITLE: Defining Smart Contract ABI for Donut Purchase
DESCRIPTION: Defines the ABI interface and contract address for a donut purchase smart contract that will be used with the paymaster service.

LANGUAGE: typescript
CODE:
const donutContractAbi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256'
      }
    ],
    name: 'purchase',
    outputs: [],
    stateMutability: 'payable',
    type: 'function'
  },
]

const donutContactAddress = '0x2E65BAfA07238666c3b239E94F32DaD3cDD6498D' as const

----------------------------------------

TITLE: Approving Authentication Requests in Kotlin
DESCRIPTION: Shows how to approve an authentication request by constructing Wallet.Model.Cacao instances for each supported chain and calling approveSessionAuthenticate with the request ID and authentication objects.

LANGUAGE: kotlin
CODE:
 val approveAuthenticate = Wallet.Params.ApproveSessionAuthenticate(id = sessionAuthenticate.id, auths = auths)
WalletKit.approveSessionAuthenticate(approveProposal,
  onSuccess = {
    //Redirect back to the dapp if redirect is set: sessionAuthenticate.participant.metadata?.redirect
  },
  onError = { error ->
      //Handle error
  }
)

----------------------------------------

TITLE: Configuring AppKit Authentication Features
DESCRIPTION: Setup of authentication features in the AppKit configuration, including email and social authentication options.

LANGUAGE: typescript
CODE:
createAppKit({
  projectId,
  wagmiConfig,
  features: {
    email: true, // default to true
    socials: ['x', 'discord', 'apple'], // default value
    emailShowWallets: true // default to true
  }
})

----------------------------------------

TITLE: Using AppKit Provider Hook with Ethers.js
DESCRIPTION: Hook that provides access to the wallet provider and enables Ethereum transactions and message signing using ethers.js library.

LANGUAGE: tsx
CODE:
import { ethers } from 'ethers'
import { useAppKitProvider } from '@reown/appkit-ethers5-react-native'

function Components() {
  const { walletProvider } = useAppKitProvider()

  async function onSignMessage() {
    const provider = new ethers.providers.Web3Provider(walletProvider)
    const signer = provider.getSigner()
    const signature = await signer?.signMessage('Hello AppKit Ethers')
    console.log(signature)
  }

  return <button onClick={() => onSignMessage()}>Sign Message</button>
}

----------------------------------------

TITLE: Using AppKit Provider with Ethers.js in React
DESCRIPTION: This snippet shows how to use the useAppKitProvider hook to access the wallet provider and sign a message using Ethers.js. It demonstrates integration between AppKit and Ethers.js for blockchain interactions.

LANGUAGE: tsx
CODE:
import { BrowserProvider } from 'ethers'
import { useAppKitProvider } from '@reown/appkit/react'

function Components() {
  const { walletProvider } = useAppKitProvider('eip155')

  async function onSignMessage() {
    const provider = new BrowserProvider(walletProvider)
    const signer = await provider.getSigner()
    const signature = await signer?.signMessage('Hello AppKit Ethers')
    console.log(signature)
  }

  return <button onClick={() => onSignMessage()}>Sign Message</button>
}

----------------------------------------

TITLE: Connecting to WalletConnect Session in Swift
DESCRIPTION: Establishes a connection to a WalletConnect session. Allows specifying required and optional namespaces, session properties, and a topic. An alternative method without namespace specification is also provided.

LANGUAGE: swift
CODE:
try await AppKit.instance.connect(
    requiredNamespaces: [String: ProposalNamespace],
    optionalNamespaces: [String: ProposalNamespace]?,
    sessionProperties: [String: String]?,
    topic: topic // Can be existing topic or nil to create new one
)

// Or without specifying namespaces to stick with default values

try await AppKit.instance.connect(
    topic: topic // Can be existing topic or nil to create new one
)

----------------------------------------

TITLE: Initializing ReownAppKitModal with Email and Social Wallet Support in Dart
DESCRIPTION: This snippet demonstrates how to initialize the ReownAppKitModal with support for email and social wallet creation. It includes configuration for enabling specific social login options and controlling the display of main wallet options.

LANGUAGE: dart
CODE:
final _appKitModal = ReownAppKitModal(
  context: context,
  projectId: '{YOUR_PROJECT_ID}',
  metadata: const PairingMetadata(
    name: 'Example App',
    description: 'Example app description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect(
      native: 'exampleapp://',
      universal: 'https://reown.com/exampleapp',
    ),
  ),
  featuresConfig: FeaturesConfig(
    email: true,
    socials: [
      AppKitSocialOption.Farcaster,
      AppKitSocialOption.X,
      AppKitSocialOption.Apple,
      AppKitSocialOption.Discord,
    ],
    showMainWallets: false,
  ),
);

----------------------------------------

TITLE: Configuring Basic SIWE in C#
DESCRIPTION: Creates a basic SIWE configuration for local address verification without backend integration. Sets up message parameters and event handlers for sign-in/sign-out events.

LANGUAGE: csharp
CODE:
var siweConfig = new SiweConfig
{
    GetMessageParams = () => new SiweMessageParams
    {
        Domain = "mywebsite.com",
        Uri = "my-app://"
    },
    SignOutOnChainChange = false
};

siweConfig.SignInSuccess += _ => Debug.Log("Address verified successfully!");
siweConfig.SignOutSuccess += () => Debug.Log("Address verification canceled or wallet disconnected.");

----------------------------------------

TITLE: Opening Modal Views with TypeScript Configuration
DESCRIPTION: Shows different ways to open the modal with specific views and network namespaces. Demonstrates how to show account views, multi-wallet connections, and network-specific wallet connections for Solana, Bitcoin, and Ethereum.

LANGUAGE: typescript
CODE:
open({ view: 'Account' })

// to connect and show multi wallets view
open({ view: 'Connect'})

// to connect and show only solana wallets
open({ view: 'Connect', namespace: 'solana' })

// to connect and show only bitcoin wallets
open({ view: 'Connect', namespace: 'bip122' })

// to connect and show only ethereum wallets
open({ view: 'Connect', namespace: 'eip155' })

----------------------------------------

TITLE: Creating Wagmi and Solana Adapters for Multi-Chain Support in Reown AppKit
DESCRIPTION: This code snippet demonstrates how to create adapters for multiple blockchain networks using Reown AppKit. It shows the creation of a Wagmi adapter for EVM chains and a Solana adapter, illustrating AppKit's multi-chain capabilities.

LANGUAGE: jsx
CODE:
// 1. Create the Wagmi adapter
export const wagmiAdapter = new WagmiAdapter({
  ssr: true,
  projectId, 
  networks
})

// 2. Create Solana adapter
const solanaWeb3JsAdapter = new SolanaAdapter()

----------------------------------------

TITLE: Interacting with Smart Contracts using Ethers in Vue
DESCRIPTION: Vue component showing how to interact with smart contracts using Ethers, including reading token balance.

LANGUAGE: html
CODE:
<script setup lang="ts">
  import { useAppKitProvider, useAppKitAccount } from "@reown/appkit/vue";
  import { BrowserProvider, Contract, formatUnits } from 'ethers'

  const USDTAddress = '0x617f3112bf5397D0467D315cC709EF968D9ba546'

  // The ERC-20 Contract ABI, which is a common contract interface
  // for tokens (this is the Human-Readable ABI format)
  const USDTAbi = [
    'function name() view returns (string)',
    'function symbol() view returns (string)',
    'function balanceOf(address) view returns (uint)',
    'function transfer(address to, uint amount)',
    'event Transfer(address indexed from, address indexed to, uint amount)'
  ]

  function Components() {
    const { address, isConnected } = useAppKitAccount()
    const { walletProvider } = useAppKitProvider('eip155')

    async function getBalance() {
    if (!isConnected) throw Error('User disconnected')

    const ethersProvider = new BrowserProvider(walletProvider)
    const signer = await ethersProvider.getSigner()
    // The Contract object
    const USDTContract = new Contract(USDTAddress, USDTAbi, signer)
    const USDTBalance = await USDTContract.balanceOf(address)

    console.log(formatUnits(USDTBalance, 18))
  }
  return <button onClick={getBalance}>Get User Balance</button>
}
</script>

----------------------------------------

TITLE: Accessing Account Data with useAppKitAccount in Vue
DESCRIPTION: Shows how to use the useAppKitAccount composable to access account data and connection status. It can be used for single-chain or multi-chain environments.

LANGUAGE: typescript
CODE:
import { useAppKitAccount } from "@reown/appkit/vue";

const accountData = useAppKitAccount()

LANGUAGE: typescript
CODE:
import { useAppKitAccount } from "@reown/appkit/vue";

const eip155Account = useAppKitAccount({ namespace: 'eip155' }) // for EVM chains
const solanaAccount = useAppKitAccount({ namespace: 'solana' })
const bip122Account = useAppKitAccount({ namespace: 'bip122' }) // for bitcoin

----------------------------------------

TITLE: Configuring LSApplicationQueriesSchemes for Wallet Detection (XML)
DESCRIPTION: This XML snippet shows how to configure the Info.plist file to enable installed wallet detection. It demonstrates adding wallet schemes to the LSApplicationQueriesSchemes array.

LANGUAGE: xml
CODE:
<key>LSApplicationQueriesSchemes</key>
<array>
  <string>metamask</string>
  <string>trust</string>
  <string>safe</string>
  <string>rainbow</string>
  <string>uniswap</string>
  <!-- Add other wallet schemes names here -->
</array>

----------------------------------------

TITLE: Using useAppKit Hook with Ethers in React Native
DESCRIPTION: Shows how to use the useAppKit hook from the @reown/appkit-ethers-react-native package to control the modal in a React Native component.

LANGUAGE: typescript
CODE:
import { useAppKit } from '@reown/appkit-ethers-react-native'

export default function Component() {
  const { open, close } = useAppKit()

  open()

  //...
}

----------------------------------------

TITLE: Configuring and Switching Networks with AppKit
DESCRIPTION: This code snippet shows how to create an AppKit instance with specific configurations and switch networks using the switchNetwork function.

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit/react'
import { mainnet, arbitrum, polygon } from '@reown/appkit/networks'

const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    analytics: true,
  }
})

modal.switchNetwork(polygon)

----------------------------------------

TITLE: Chain Abstraction Usage Example in Kotlin
DESCRIPTION: This snippet demonstrates how to use the prepare and execute methods for chain abstraction in WalletKit, including error handling and success scenarios.

LANGUAGE: kotlin
CODE:
val initialTransaction = Wallet.Model.Transaction(...)
WalletKit.ChainAbstraction.prepare(
  initialTransaction,
  onSuccess = { prepareSuccess ->
    when (prepareSuccess) {
      is Wallet.Model.PrepareSuccess.Available -> {
        //Sign all the fulfilment transactions and init transaction
        //Use execute method
        
        //Call the execute
        WalletKit.ChainAbstraction.execute(prepareSuccess, prepareSignedTxs, initSignedTx
            onSuccess = {
                //The execution of the Chain Abstraction is successfull
                //Send the response to the Dapp
            },
            onError = {
                //Execute error - wallet should send the JsonRpcError to a dapp for given request and display error to the user
            }
        )
      }

      is Wallet.Model.PrepareSuccess.NotRequired -> {
          //Chain abstraction is not required, handle transaction as usual
      }
    }
  },
  onError = { prepareError ->
        // One of the possible errors: NoRoutesAvailable, InsufficientFunds, InsufficientGasFunds - wallet should send the JsonRpcError to a dapp for given request and display error to the user
  }
)

----------------------------------------

TITLE: Using AppKit Provider Hooks for Wallet Integration
DESCRIPTION: Illustrates the usage of AppKit hooks for accessing wallet provider, account, and network information. Includes implementation of message signing using ethers.js integration.

LANGUAGE: tsx
CODE:
import { useAppKitAccount, useAppKitProvider, useAppKitNetwork  } from '@reown/appkit/react'
import { ethers } from 'ethers'
import { useAppKitProvider } from '@reown/appkit/react'

function Components() {
  const { walletProvider } = useAppKitProvider('eip155')
  const { address } = useAppKitAccount()
  const { chainId } = useAppKitNetwork()

  async function onSignMessage() {
    const provider = new ethers.providers.Web3Provider(walletProvider, chainId)
    const signer = provider.getSigner(address)
    const signature = await signer?.signMessage('Hello AppKit Ethers')
    console.log(signature)
  }

  return <button onClick={() => onSignMessage()}>Sign Message</button>
}

----------------------------------------

TITLE: Implementing Social Login Connection Methods in C#
DESCRIPTION: Example showing both async-await and event-based approaches for handling social login connections in AppKit.

LANGUAGE: csharp
CODE:
// Async-await approach
await SocialLogin.Google.ConnectAsync();

// You can also pass a CancellationToken to the method to cancel the connection
await SocialLogin.Google.ConnectAsync(cancellationToken: myCancellationToken);


// Event-based approach
AppKit.AccountConnected += (_, args) => {
    // Handle the event
    // Also triggered when user connects an external wallet
};
SocialLogin.Google.Open();

----------------------------------------

TITLE: Implementing Wallet Pairing in Multiple Platforms
DESCRIPTION: Code examples for implementing wallet pairing functionality across web, React Native, iOS and Android platforms using WalletKit.

LANGUAGE: jsx
CODE:
const uri = 'xxx'; // pairing uri
try {
    await walletKit.pair({ uri });
} catch (error) {
    // some error happens while pairing
}

LANGUAGE: swift
CODE:
let uri = WalletConnectURI(string: urlString)

if let uri {
Task {
try await WalletKit.instance.pair(uri: uri)
}
}

LANGUAGE: kotlin
CODE:
val pairingParams = Wallet.Params.Pair(pairingUri)
WalletKit.pair(pairingParams,
    onSuccess = {
        //Subscribed on the pairing topic successfully.
    },
    onError = { error ->
        //Some error happens while pairing
    }
}

----------------------------------------

TITLE: Getting Subscriber Information using Fetch API in TypeScript
DESCRIPTION: This code snippet shows how to retrieve subscriber information using the Fetch API in TypeScript. It includes type definitions for the request and response bodies.

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const requestBody: RequestBody = {
  accounts: [
    'eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029',
    'eip155:1:0x0000000000000000000000000000000000000000'
  ]
}

const response = await fetch(`https://notify.walletconnect.com/v1/${PROJECT_ID}/subscribers`, {
  method: 'POST',
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`
  }
  body: JSON.stringify(requestBody)
})

const subscribers: ResponseBody = await response.json()

type RequestBody = {
  // Max 100 accounts
  accounts: string[]
}
type ResponseBody = {
  [account: string]: Subscriber
}
type Subscriber = {
  notification_types: string[]
}

----------------------------------------

TITLE: Defining Request Body Type for Sending Notifications in TypeScript
DESCRIPTION: Defines the TypeScript type for the request body when sending notifications using the Reown Notify API. Includes fields for notification details and recipient accounts.

LANGUAGE: typescript
CODE:
type RequestBody = {
  notification_id?: string | null
  notification: {
    type: string
    title: string
    body: string
    url?: string | null
  }
  accounts: string[]
}

----------------------------------------

TITLE: Checking Connection Status in TypeScript
DESCRIPTION: This snippet shows how to check if the wallet is currently connected using the Reown AppKit.

LANGUAGE: typescript
CODE:
const isConnected = modal.getIsConnected()

----------------------------------------

TITLE: Accessing Account Data with Wagmi getAccount
DESCRIPTION: Demonstrates how to use the getAccount action from Wagmi core to access account data and connection status. Requires wagmiConfig to be initialized.

LANGUAGE: tsx
CODE:
import { getAccount } from '@wagmi/core'
import { wagmiConfig } from './main'

const account = getAccount(wagmiConfig)

----------------------------------------

TITLE: Reading Ether Balance in C# using AppKit
DESCRIPTION: This code snippet shows how to retrieve the Ether balance of an account using AppKit. It uses GetAccountAsync to get the current account and GetBalanceAsync to fetch its balance, then converts the balance from Wei to Ether for display.

LANGUAGE: csharp
CODE:
Account account = await AppKit.GetAccountAsync();
BigInteger balance = await AppKit.Evm.GetBalanceAsync(account.Address);

Debug.Log($"Balance: {Web3.Convert.FromWei(balance.Value)} ETH");

----------------------------------------

TITLE: Integrating W3iWidget Component in React with TypeScript
DESCRIPTION: This code snippet shows how to import and use the W3iWidget component from the @web3inbox/widget-react package. It demonstrates the basic setup, including importing necessary styles, using the useManageView hook, and rendering the W3iWidget component with required props.

LANGUAGE: typescript
CODE:
import { W3iWidget, useManageView } from "@web3inbox/widget-react";
import "@web3inbox/widget-react/dist/compiled.css";
...

const { open } = useManageView()
open();

return (
	<W3iWidget
		account="eip155:1:0x..."
		projectId="7a..."
		onSign={yourSignFunction}
		onConnect={connectFunction}
	/>
)

----------------------------------------

TITLE: Initializing AppKit with SIWE Config
DESCRIPTION: Demonstrates how to integrate SIWE configuration into AppKit initialization, including project ID and metadata setup.

LANGUAGE: csharp
CODE:
var appKitConfig = new AppKitConfig
{
    projectId = "MY_PROJECT_ID",
    metadata = new Metadata(
        "App Name",
        "App Description",
        "https://reown.com",
        "https://raw.githubusercontent.com/reown-com/reown-dotnet/main/media/appkit-icon.png",
        new RedirectData
        {
            Native = "my-app://"
        }
    ),
    siweConfig = siweConfig
};

----------------------------------------

TITLE: Excluding Wallets from AppKit Explorer (Swift)
DESCRIPTION: This code shows how to exclude specific wallets from the AppKit explorer. It allows defining an array of wallet IDs to be excluded from the WalletGuide fetch.

LANGUAGE: swift
CODE:
AppKit.configure(
    ...
    excludedWalletIds: [String]
    ...
)

----------------------------------------

TITLE: Responding to Session Request in Swift
DESCRIPTION: Demonstrates how to respond to a session request using WalletKit. It handles the response process asynchronously and includes error handling.

LANGUAGE: swift
CODE:
do {
    try await WalletKit.instance.respond(requestId: request.id, signature: signature, from: account)
    // update UI -> remove the loader
} catch {
    // present error to the user
}

----------------------------------------

TITLE: Implementing Domain Verification in Kotlin
DESCRIPTION: Defines the data structures for domain verification context and validation states. The VerifyContext class contains the verification ID, origin domain, validation status, and verify URL. The Validation enum defines the three possible verification states: VALID, INVALID, and UNKNOWN.

LANGUAGE: kotlin
CODE:
data class VerifyContext(
    val id: Long,
    val origin: String,
    val validation: Model.Validation,
    val verifyUrl: String
)

enum class Validation {
    VALID, INVALID, UNKNOWN
}

----------------------------------------

TITLE: Message Signing Implementation
DESCRIPTION: Complete implementation of message signing functionality using AppKit provider and Solana wallet

LANGUAGE: javascript
CODE:
const handleSignMsg = async () => {
    const encodedMessage = new TextEncoder().encode("Hello Reown AppKit!");
    const sig = await walletProvider.signMessage(encodedMessage);
    console.log(Buffer.from(sig).toString("hex"));
}

----------------------------------------

TITLE: Implementing Paymaster Service in EIP 5792 Calls
DESCRIPTION: Demonstrates how to integrate a paymaster service within EIP 5792 calls using the capabilities field. The code shows configuration of paymaster URL and optional context parameters for transaction sponsorship.

LANGUAGE: typescript
CODE:
sendCalls({
  calls: ...callsToSend,
  capabilities: {
    paymasterService: {
      url: paymasterServiceUrl,
      context?: {
        // Any additional context
      }
    }
  }
})

----------------------------------------

TITLE: Message Signing with AppKit Provider Hook
DESCRIPTION: Implementation of message signing functionality using the wallet provider hook. Demonstrates how to access the wallet provider, encode messages, and handle signatures with error handling.

LANGUAGE: tsx
CODE:
import { useAppKitAccount, useAppKitProvider } from '@reown/appkit/react'
import type { Provider } from '@reown/appkit-adapter-solana'

function SignMessage() {
  // 0. Get account and provider
  const { address } = useAppKitAccount()
  const { walletProvider } = useAppKitProvider<Provider>('solana')

  // 1. Create a function to sign a message
  async function onSignMessage() {
    try {
      if (!walletProvider || !address) {
        throw Error('user is disconnected')
      }

      // 2. Encode message and sign it
      const encodedMessage = new TextEncoder().encode('Hello from AppKit')
      const signature = await walletProvider.signMessage(encodedMessage)

      console.log(signature)
    } catch (err) {
      // Handle Error Here
    }
  }

  // 3. Create a button to trigger the function
  return <button onClick={onSignMessage}>Sign Message</button>
}

----------------------------------------

TITLE: Setting WalletConnectModal Theme for React Native
DESCRIPTION: This snippet shows how to configure the theme mode and accent color for WalletConnectModal in a React Native application.

LANGUAGE: ts
CODE:
<WalletConnectModal
  ...
  accentColor="#9090FF"
/>

----------------------------------------

TITLE: Sending Notifications with Reown Notify API using JavaScript
DESCRIPTION: Demonstrates how to send a notification using the Reown Notify API with JavaScript. Uses fetch to make a POST request with the necessary headers and body.

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const response = await fetch(`https://notify.walletconnect.com/${PROJECT_ID}/notify`, {
  method: 'POST',
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    notification: {
      type: 'a1e53b95-18e5-4af8-9f03-9308ec87b687',
      title: 'The price of Ethereum has risen',
      body: 'The price of Ethereum has gone up 10%',
      url: 'https://app.example.com'
    },
    accounts: ['eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029']
  })
})

----------------------------------------

TITLE: Implementing PushMessagingService for WalletKit in Kotlin
DESCRIPTION: This code snippet shows how to implement the PushMessagingService class for handling push notifications in WalletKit. It includes methods for handling new tokens, registration failures, incoming messages, and errors.

LANGUAGE: kotlin
CODE:
class SampleFirebaseService: PushMessagingService() {

    override fun newToken(token: String) {
        // Triggered when Firebase Cloud Messaging creates a new token
    }

    override fun registeringFailed(token: String, throwable: Throwable) {
        // Triggered when Firebase Cloud Messaging if there is an error with registering with the Push Server with a new token
    }

    override fun onMessage(message: Core.Model.Message, originalMessage: RemoteMessage) {
        // Triggered when a message is sent from the Push Server through Firebase Cloud Messaging and the message contains `Core.Model.Message`. The original FCM RemoteMessage is also returned
    }

    override fun onDefaultBehavior(message: RemoteMessage) {
        // Triggered when a message is sent from the Push Server through Firebase Cloud Messaging and the message does not contain `Core.Model.Message` in the payload. The original FCM RemoteMessage returned instead
    }

    override fun onError(throwable: Throwable, defaultMessage: RemoteMessage) {
        // Triggered when there is an error that occurs when a message is received from the Push Server
    }
}

----------------------------------------

TITLE: Sending Transaction with Ethers
DESCRIPTION: Example of using Ethers to send a transaction. This snippet shows how to create a transaction, get a signer, and send the transaction using Ethers library.

LANGUAGE: tsx
CODE:
import { BrowserProvider, Contract, parseEther } from 'ethers'

const provider = await modal.subscribeProviders(state => {
  return state['eip155'];
})

const addressFrom = await modal.subscribeAccount(state => {
  return state;
})

if (!provider) throw Error('No provider found');
if (!addressFrom) throw Error('No address found');

function sendTransaction() {
  const tx = {
    from: addressFrom,
    to: "0x...", // any address
    value: parseEther("0.0001")
  }
  const ethersProvider = new BrowserProvider(provider);
  const signer = await ethersProvider.getSigner();
  const tx = await signer.sendTransaction(tx);
  console.log("transaction:", tx)
}

----------------------------------------

TITLE: Sending Ether Transaction in C# using AppKit
DESCRIPTION: This snippet demonstrates how to send Ether to a specified address using AppKit's Evm.SendTransactionAsync method. It converts the amount to Wei and logs the transaction hash.

LANGUAGE: csharp
CODE:
const string toAddress = "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045";
BigInteger amount = Web3.Convert.ToWei(0.001);
string result = await AppKit.Evm.SendTransactionAsync(toAddress, amount);

Debug.Log("Transaction hash: " + result);

----------------------------------------

TITLE: Configuring SIWE Client with One-Click Auth
DESCRIPTION: TypeScript configuration for SIWE client setup using One-Click Auth, including message creation, session management, and signature verification.

LANGUAGE: typescript
CODE:
import { getCsrfToken, signIn, signOut, getSession } from 'next-auth/react'
import type { SIWEVerifyMessageArgs, SIWECreateMessageArgs, SIWESession } from '@reown/appkit-siwe'
import { createSIWEConfig, formatMessage } from '@reown/appkit-siwe'
import { mainnet, sepolia } from '@reown/appkit/networks'

export const siweConfig = createSIWEConfig({
  getMessageParams: async () => ({
    domain: typeof window !== 'undefined' ? window.location.host : '',
    uri: typeof window !== 'undefined' ? window.location.origin : '',
    chains: [mainnet.id, sepolia.id],
    statement: 'Please sign with your account'
  }),
  createMessage: ({ address, ...args }: SIWECreateMessageArgs) => formatMessage(args, address),
  getNonce: async () => {
    const nonce = await getCsrfToken()
    if (!nonce) {
      throw new Error('Failed to get nonce!')
    }
    return nonce
  },
  getSession: async () => {
    const session = await getSession();
    if (!session) {
      return null;
    }
    if (typeof session.address !== "string" || typeof session.chainId !== "number") {
      return null;
    }
    return { address: session.address, chainId: session.chainId } satisfies SIWESession;
  },
  verifyMessage: async ({ message, signature }: SIWEVerifyMessageArgs) => {
    try {
      const success = await signIn('credentials', {
        message,
        redirect: false,
        signature,
        callbackUrl: '/protected'
      })
      return Boolean(success?.ok)
    } catch (error) {
      return false
    }
  },
  signOut: async () => {
    try {
      await signOut({
        redirect: false
      })
      return true
    } catch (error) {
      return false
    }
  }
})

----------------------------------------

TITLE: Transaction Sending Implementation
DESCRIPTION: Complete implementation of transaction sending functionality using Wagmi hooks.

LANGUAGE: jsx
CODE:
import { useEstimateGas, useSendTransaction } from 'wagmi'
import { parseGwei, type Address } from 'viem'

const TEST_TX = {
  to: "0xd8da6bf26964af9d7eed9e03e53415d37aa96045" as Address,
  value: parseGwei('0.0001')
}

const { data: gas } = useEstimateGas({...TEST_TX});
const { data: hash, sendTransaction, } = useSendTransaction(); 
const { isConnected } = useAppKitAccount() 

const handleSendTx = () => {
    try {
    sendTransaction({
        ...TEST_TX,
        gas
    });
    } catch (err) {
        console.log('Error sending transaction:', err);
    }
}

----------------------------------------

TITLE: Signing Hedera Transaction with JSON-RPC
DESCRIPTION: Example of using the hedera_signTransaction method to sign a TransactionBody and return a SignatureMap. It shows the request format with signerAccountId and transactionBody parameters, and the expected result format with the base64 encoded SignatureMap.

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "hedera_signTransaction",
  "params": {
    "signerAccountId": "hedera:testnet:0.0.12345",
    "transactionBody": "Co8BKowBCocBChoKDAjchKWmBhDW..."
  }
}

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": {
    "signatureMap": "VGhpcyBpcyBqdXN0IHNvbWUgc3R1..."
  }
}

----------------------------------------

TITLE: Using useAppKitProvider Hook for Wallet Interactions in Vue
DESCRIPTION: This snippet illustrates the usage of the useAppKitProvider hook to access the wallet provider and perform operations like signing messages. It uses the ethers library to create a BrowserProvider and interact with the wallet.

LANGUAGE: tsx
CODE:
import { BrowserProvider } from 'ethers'
import { useAppKitProvider } from '@reown/appkit/vue'

function Components() {
  const { walletProvider } = useAppKitProvider('eip155')

  async function onSignMessage() {
    const provider = new BrowserProvider(walletProvider)
    const signer = await provider.getSigner()
    const signature = await signer?.signMessage('Hello AppKit Ethers')
    console.log(signature)
  }

  return <button onClick={() => onSignMessage()}>Sign Message</button>
}

----------------------------------------

TITLE: Using useAppKit Composable for Modal Control in Vue
DESCRIPTION: Demonstrates how to use the useAppKit composable to control the modal in a Vue component. It provides functions to open and close the modal.

LANGUAGE: typescript
CODE:
import { useAppKit } from '@reown/appkit/vue'

export default function Component() {
  const { open, close } = useAppKit()
}

----------------------------------------

TITLE: Implementing Two-Step Registration in Web3Inbox Core with TypeScript
DESCRIPTION: Demonstrates the updated registration process which is split into two steps: preparing registration parameters and completing registration with a signature. Uses @wagmi's useSignMessage hook for signature generation.

LANGUAGE: typescript
CODE:
import { useSignMessage } from '@wagmi'
const { signMessageAsync } = useSignMessage()

/* highlight-delete-start */
client.register(signMessageAsync)
/* highlight-delete-end */
/* highlight-add-start */
const { registerParams, message } = client.prepareRegistration({ account: 'eip155:1:0x..' })
const signature = await signMessageAsync(message)
client.register({ registerParams, signature })
/* highlight-add-end */

----------------------------------------

TITLE: Using useAppKitAccount Hook in Vue.js
DESCRIPTION: This snippet demonstrates how to use the useAppKitAccount hook to retrieve client information such as address, CAIP address, and connection status.

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from '@reown/appkit/vue'

function Components() {
  const { address, caipAddress, isConnected } = useAppKitAccount();

  //...
}

----------------------------------------

TITLE: Managing AppKit State
DESCRIPTION: Demonstrates how to create and use AppKitState for managing component state and interactions. Provides methods to track connection and component open states.

LANGUAGE: kotlin
CODE:
val appKitState = rememberAppKitState(navController)

appKitState.isOpen    // returns StateFlow<Boolean>
appKitState.isConnected    // returns StateFlow<Boolean>

----------------------------------------

TITLE: Retrieving All Subscribers with Reown Notify API using cURL
DESCRIPTION: Shows how to get a list of all subscribed accounts using the Reown Notify API with a cURL command. Includes the necessary authorization header.

LANGUAGE: bash
CODE:
curl 'https://notify.walletconnect.com/<PROJECT_ID>/subscribers' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'

----------------------------------------

TITLE: Registering Device Token for WalletKit Push Notifications in Kotlin
DESCRIPTION: This snippet demonstrates how to register a device token with WalletKit to enable push notifications. It uses the Firebase Access Token and includes callbacks for success and error handling.

LANGUAGE: kotlin
CODE:
val firebaseAccessToken: String = //FCM access token received through the Firebase Messaging SDK
val enableEncrypted: Boolean = true //Flag that enables receiveing the detailed notifications

WalletKit.registerDeviceToken(
    firebaseAccessToken = firebaseAccessToken,
    enableEncrypted = enableEncrypted,
    onSuccess = {
        // callback triggered once registered successfully with the Push Server
    },
    onError = { error: Wallet.Model.Error ->
        // callback triggered if there's an exception thrown during the registration process
    })

----------------------------------------

TITLE: Signing Messages with Wagmi signMessage
DESCRIPTION: Shows how to use the signMessage action from Wagmi core to sign messages with a connected account. Requires wagmiConfig and accepts a message parameter.

LANGUAGE: typescript
CODE:
import { signMessage } from '@wagmi/core'
import { wagmiConfig } from './main'

await signMessage(wagmiConfig, { message: 'hello world' })

----------------------------------------

TITLE: Handling Authentication Event Subscription in TypeScript
DESCRIPTION: Demonstrates how to subscribe to and handle session_authenticate events in a wallet application using TypeScript.

LANGUAGE: typescript
CODE:
walletKit.on('session_authenticate', async payload => {
  // Process the authentication request here.
  // Steps include:
  // 1. Populate the authentication payload with the supported chains and methods
  // 2. Format the authentication message using the payload and the user's account
  // 3. Present the authentication message to the user
  // 4. Sign the authentication message(s) to create a verifiable authentication object(s)
  // 5. Approve the authentication request with the authentication object(s)
})

----------------------------------------

TITLE: Handling Session Request Expiry
DESCRIPTION: Implementation of WalletDelegate to handle session request expiry events.

LANGUAGE: kotlin
CODE:
val walletDelegate = object : WalletKit.WalletDelegate {
    override fun onRequestExpired(request: Wallet.Model.ExpiredRequest) {
        //Here this event is triggered when a session request expires - update your UI
    }
    ...other callbacks
}
WalletKit.setWalletDelegate(walletDelegate)

----------------------------------------

TITLE: Handling Pairing Expiry Events
DESCRIPTION: Shows how to handle pairing expiry events. Pairings expire after 5 minutes when inactive or 30 days when active.

LANGUAGE: typescript
CODE:
core.pairing.events.on("pairing_expire", (event) => {
    // pairing expired before user approved/rejected a session proposal
    const { topic } = topic;
});

----------------------------------------

TITLE: Retrieving Web3Inbox Notifications in TypeScript
DESCRIPTION: Shows the updated method for retrieving notifications using the useNotifications hook. This new approach supports pagination and infinite scroll functionality.

LANGUAGE: typescript
CODE:
/* highlight-delete-start */
- import { useMessages } from "@web3inbox/widget-react"
/* highlight-delete-end */
/* highlight-add-start */
+ import { useNotifications } from "@web3inbox/react"
/* highlight-add-end */

/* highlight-delete-start */
- const { messages } = useMessages()
/* highlight-delete-end */
/* highlight-add-start */
+ const notificationsPerPage = 5
+ const isInfiniteScroll = true
+
+ const { data: notifications, nextPage } = useNotifications(
+   notificationsPerPage,
+   isInfiniteScroll
+ )
+
+ const getMoreNotifications = () => {
+   nextPage()
+ }
/* highlight-add-end */

----------------------------------------

TITLE: Message Signing Implementation
DESCRIPTION: Complete implementation of message signing functionality using Wagmi hooks.

LANGUAGE: jsx
CODE:
import { useSignMessage } from 'wagmi'

const { signMessageAsync } = useSignMessage() 
const { address, isConnected } = useAppKitAccount() 

const handleSignMsg = async () => {
    const msg = "Hello Reown AppKit!" 
    const sig = await signMessageAsync({ message: msg, account: address as Address }); 
}

----------------------------------------

TITLE: Configuring Next.js Layout for Reown AppKit Integration
DESCRIPTION: This code snippet shows how to set up the Next.js layout file to integrate Reown AppKit. It includes importing the ContextProvider and handling cookies for SSR.

LANGUAGE: typescript
CODE:
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'

const inter = Inter({ subsets: ['latin'] })

import { headers } from 'next/headers' // added
import ContextProvider from '@/context'

export const metadata: Metadata = {
  title: 'AppKit Example App',
  description: 'Powered by Reown'
}

export default function RootLayout({
  children
}: Readonly<{
  children: React.ReactNode
}>) {

  const headersObj = await headers();
  const cookies = headersObj.get('cookie')

  return (
    <html lang="en">
      <body className={inter.className}>
        <ContextProvider cookies={cookies}>{children}</ContextProvider>
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Implementing AppKit in Root Layout
DESCRIPTION: Sets up the root layout component to wrap the application with AppKit provider. Includes basic metadata configuration for the application.

LANGUAGE: tsx
CODE:
import './globals.css'

import { AppKit } from '../context/appkit'

export const metadata = {
  title: 'AppKit',
  description: 'AppKit Example'
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <AppKit>{children}</AppKit>
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Complete JSON Policy Example for Reown Paymaster
DESCRIPTION: A comprehensive example of a Reown Paymaster JSON policy, including policy type, static properties, metadata, and complex conditional logic for sponsoring specific smart contract interactions.

LANGUAGE: json
CODE:
{
  "policyType": "useroperation_payload_control",
  "policyStaticProps": {
    "contract1": {
      "abi": [...]
    }
  },
  "metadata": {
    "chainIds": [
      1,
      137,
      11155111
    ],
    "startTime": "2024-10-23T15:50:00.000Z",
    "endTime": null
  },
  "params": {
    "key": "callData",
    "op": "callDataToEquals",
    "value": "0xa123cd918..."
  },
  "ands": [
    {
      "params": {
        "key": "callData",
        "op": "callDataMethodEquals",
        "value": "methodFoo"
      },
      "metadata": {
        "contractAbi": "<contract1.abi>"
      }
    }
  ],
  "ors": [
    {
      "params": {
        "key": "callData",
        "op": "callDataMethodEquals",
        "value": "methodBar"
      },
      "metadata": {
        "contractAbi": "<contract1.abi>"
      }
    },
    {
      "params": {
        "key": "callData",
        "op": "callDataMethodEquals",
        "value": "methodBaz"
      },
      "metadata": {
        "contractAbi": "<contract1.abi>"
      }
    }
  ]
}

----------------------------------------

TITLE: Adding Polkadot Network Support
DESCRIPTION: Demonstrates how to add Polkadot networks to ReownAppKit's supported networks list, including both mainnet and testnet configurations.

LANGUAGE: javascript
CODE:
ReownAppKitModalNetworks.addSupportedNetworks('polkadot', [
  ReownAppKitModalNetworkInfo(
    name: 'Polkadot',
    chainId: '91b171bb158e2d3848fa23a9f1c25182',
    chainIcon: 'https://cryptologos.cc/logos/polkadot-new-dot-logo.png',
    currency: 'DOT',
    rpcUrl: 'https://rpc.polkadot.io',
    explorerUrl: 'https://polkadot.subscan.io',
  ),
  ReownAppKitModalNetworkInfo(
    name: 'Westend',
    chainId: 'e143f23803ac50e8f6f8e62695d1ce9e',
    currency: 'DOT',
    rpcUrl: 'https://westend-rpc.polkadot.io',
    explorerUrl: 'https://westend.subscan.io',
    isTestNetwork: true,
  ),
]);

----------------------------------------

TITLE: Implementing AppKit Modal Delegate - Kotlin
DESCRIPTION: Implementation of AppKit.ModalDelegate interface for handling various session events, requests, and connection states. Includes callbacks for session approval, rejection, updates, events, and error handling.

LANGUAGE: kotlin
CODE:
val appKitModalDelegate = object : AppKit.ModalDelegate {
    override fun onSessionApproved(approvedSession: Modal.Model.ApprovedSession) {
        // Triggered when receives the session approval from wallet
    }

    override fun onSessionRejected(rejectedSession: Modal.Model.RejectedSession) {
        // Triggered when receives the session rejection from wallet
    }

    override fun onSessionUpdate(updatedSession: Modal.Model.UpdatedSession) {
        // Triggered when receives the session update from wallet
    }

    override fun onSessionExtend(session: Modal.Model.Session) {
        // Triggered when receives the session extend from wallet
    }

    override fun onSessionEvent(sessionEvent: Modal.Model.SessionEvent) {
        // Triggered when the peer emits events that match the list of events agreed upon session settlement
    }

    override fun onSessionDelete(deletedSession: Modal.Model.DeletedSession) {
        // Triggered when receives the session delete from wallet
    }

    override fun onSessionRequestResponse(response: Modal.Model.SessionRequestResponse) {
        // Triggered when receives the session request response from wallet
    }

    override fun onProposalExpired(proposal: Modal.Model.ExpiredProposal) {
        // Triggered when a proposal becomes expired
    }

    override fun onRequestExpired(request: Modal.Model.ExpiredRequest) {
        // Triggered when a request becomes expired
    }

    override fun onConnectionStateChange(state: Modal.Model.ConnectionState) {
        //Triggered whenever the connection state is changed
    }

    override fun onError(error: Modal.Model.Error) {
        // Triggered whenever there is an issue inside the SDK
    }
}

----------------------------------------

TITLE: iOS Wallet Detection Configuration
DESCRIPTION: Configuration in Info.plist to enable detection of installed wallets on iOS devices.

LANGUAGE: xml
CODE:
<key>LSApplicationQueriesSchemes</key>
<array>
  <string>metamask</string>
  <string>trust</string>
  <string>safe</string>
  <string>rainbow</string>
  <!-- Add other wallet schemes names here -->
</array>

----------------------------------------

TITLE: Supporting Session Events in ReownWalletKit
DESCRIPTION: Registers and emits session events such as chainChanged or accountChanged for supported chains.

LANGUAGE: javascript
CODE:
final supportedChains = ['eip155:1', 'eip155:137'];
const supportedEvents = ['chainChanged', 'accountChanged'];
for (var chainId in supportedChains) {
  for (var event in supportedEvents) {
    _walletKit.registerEventEmitter(
      chainId: chainId,
      event: event,
    );
  }
}

// Emitting an event
await _walletKit.emitSessionEvent(
  topic: session.topic,
  chainId: 'eip155:1',
  event: SessionEventParams(
    name: 'chainChanged',
    data: 1,
  ),
);

----------------------------------------

TITLE: Initializing Solana Connection and Performing Transactions in JavaScript
DESCRIPTION: This snippet sets up a connection to the Solana network, defines functions for sending transactions and retrieving wallet balances. It uses the @Solana/web3.js library and requires a wallet provider.

LANGUAGE: javascript
CODE:
import { PublicKey, LAMPORTS_PER_SOL, Transaction, SystemProgram } from "@solana/web3.js";

import type { Provider } from '@reown/appkit-adapter-solana'

const solanaProvider = {};
const solanaConnection = {};
modal.subscribeProviders(state => {
    solanaProvider = state['solana'];
    const url = solanaProvider.getActiveChain().rpcUrls.default.http[0];
    const solanaConnection = new Connection(url);
})

const addressFrom = await modal.subscribeAccount(state => {
  return state;
})

const sendTransaction = async () => {
  if (!addressFrom || !solanaConnection) throw Error('user is disconnected');

  const wallet = new PublicKey(addressFrom);
  if (!wallet) throw Error('wallet provider is not available');

  const latestBlockhash = await solanaConnection.getLatestBlockhash();

  const transaction = new Transaction({
    feePayer: wallet,
    recentBlockhash: latestBlockhash?.blockhash,
  }).add(
    SystemProgram.transfer({
      fromPubkey: wallet,
      toPubkey: new PublicKey(address), // destination address
      lamports: 1000,
    })
  );

  return await provider.sendTransaction(transaction, solanaConnection);
}

const getBalance = async () => {
  if (!addressFrom || !solanaConnection) throw Error('user is disconnected');

  const wallet = new PublicKey(addressFrom);
  const balance = await solanaConnection?.getBalance(wallet);
  if (balance !== undefined) {
    return `${balance / LAMPORTS_PER_SOL}`;
  } else {
    return '-';
  }
}

----------------------------------------

TITLE: Getting Wallet Provider Type in TypeScript
DESCRIPTION: This snippet shows how to retrieve the type of the current wallet provider using the Reown AppKit.

LANGUAGE: typescript
CODE:
const walletProviderType = modal.getWalletProviderType()

----------------------------------------

TITLE: Configuring AppKit with Custom Session Parameters in Swift
DESCRIPTION: This snippet shows how to configure AppKit with custom session parameters. It allows for more flexibility in setting up the AppKit client with specific session configurations.

LANGUAGE: swift
CODE:
let metadata = AppMetadata(...)

let sessionParams = SessionParams(...)

AppKit.configure(
    projectId: PROJECT_ID,
    metadata: metadata,
    sessionParams: sessionParams
)

----------------------------------------

TITLE: Integrating Solana Wallet Adapters
DESCRIPTION: Demonstrates how to set up AppKit with Solana adapter and custom wallet adapters like Phantom and Solflare. Includes network configuration for mainnet, testnet, and devnet.

LANGUAGE: ts
CODE:
import { createAppKit } from '@reown/appkit/react'
import { SolanaAdapter } from '@reown/appkit-adapter-solana/react'
import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'

import { SolflareWalletAdapter, PhantomWalletAdapter } from '@solana/wallet-adapter-wallets'

// 0. Set up Solana adapter
const solanaWeb3JsAdapter = new SolanaAdapter({
  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()]
})

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Set up the metadata
const metadata = {
  //...
}

// 3. Create the modal
const modal = createAppKit({
  adapters: [solanaWeb3JsAdapter],
  networks: [solana, solanaTestnet, solanaDevnet],
  metadata: metadata,
  projectId,
  features: {
    analytics: true
  }
})

----------------------------------------

TITLE: Retrieving Approved Chains in ReownAppKit (Flutter)
DESCRIPTION: This snippet demonstrates how to get a list of approved chains by the connected wallet using ReownAppKit.

LANGUAGE: javascript
CODE:
_appKitModal.getApprovedChains();

----------------------------------------

TITLE: Using Reown AppKit Modal Buttons in Flutter
DESCRIPTION: This code snippet shows how to use various AppKit Modal buttons in a Flutter application, including connect, network select, and account buttons.

LANGUAGE: javascript
CODE:
Column(
  mainAxisAlignment: MainAxisAlignment.center,
  children: [
    AppKitModalNetworkSelectButton(appKit: _appKitModal),
    AppKitModalConnectButton(appKit: _appKitModal),
    Visibility(
      visible: _appKitModal.isConnected,
      child: AppKitModalAccountButton(appKit: _appKitModal),
    )
  ],
),

----------------------------------------

TITLE: Using Solana Connection Hook
DESCRIPTION: Demonstrates how to use the useAppKitConnection hook to access the Solana connection object for blockchain interactions.

LANGUAGE: tsx
CODE:
import { useAppKitConnection } from '@reown/appkit-adapter-solana/react'

...

const { connection } = useAppKitConnection()

----------------------------------------

TITLE: Configuring Reown AppKit in React
DESCRIPTION: Example of how to configure Reown AppKit in a React application, replacing Web3Modal configuration.

LANGUAGE: JavaScript
CODE:
createAppKit({
 adapters: [wagmiAdapter],
 networks: [mainnet, arbitrum],
 metadata: metadata,
 projectId,
 features: {
   analytics: true,
 }
})

----------------------------------------

TITLE: Retrieving and Managing Paginated Notifications in TypeScript
DESCRIPTION: Demonstrates how to fetch paginated notifications, implement infinite scroll, and manage notification read status. Includes examples of marking individual and multiple notifications as read.

LANGUAGE: typescript
CODE:
const notificationsPage = client.getNotificationHistory({
  limit: 3,
  // The `id` of the last notification, for example:
  startingAfter: 'some-notification-id'
})

const notificationsPerPage = 5
const isInfiniteScroll = true
const unreadFirst = true

let notifications = []

const onUpdate = ({notifications: fetchedNotifications}: GetNotificationsReturn) => {
  notifications = fetchedNotifications
}

const {
  nextPage,
  markNotificationAsRead,
  markAllNotificationsAsRead
} = client.pageNotifications(
  notificationsPerPage,
  isInfiniteScroll,
  specifiedAccount // OR undefined,
  specifiedDomain // OR undefined,
  unreadFirst
)(onUpdate)


// marking a single notification as read
await notifications[0].markAsRead();

// mark specific notifications as read
await markNotificationsAsRead(notifications.slice(2).map(n => n.id));

// mark all notifications as read
await markAllNotificationsAsRead();

----------------------------------------

TITLE: Balance Fetching Function
DESCRIPTION: Function to fetch and log the wallet balance when triggered.

LANGUAGE: jsx
CODE:
const handleGetBalance = async () => {
    const balance = await refetch();
    console.log(`${balance?.data?.value.toString()} ${balance?.data?.symbol.toString()}`);
}

----------------------------------------

TITLE: Sending Notifications using cURL
DESCRIPTION: This cURL command demonstrates how to send a notification using the command line. It includes the necessary headers and JSON payload structure.

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/<PROJECT_ID>/notify' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "notification": {
      "type": "a1e53b95-18e5-4af8-9f03-9308ec87b687",
      "title": "The price of Ethereum has risen",
      "body": "The price of Ethereum has gone up 10%",
      "url": "https://app.example.com"
    },
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029"
    ]
  }'

----------------------------------------

TITLE: Installing AppKit with Ethers v6 for Ethereum
DESCRIPTION: Command to install AppKit and its dependencies for use with Ethers v6 and Ethereum.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-ethers ethers

----------------------------------------

TITLE: Defining Proposal Namespace for Multiple Chains in JavaScript
DESCRIPTION: This code snippet demonstrates how to define a proposal namespace for a dapp that supports connecting to Polkadot, Ethereum, Polygon, and Cosmos chains. It specifies the chains, methods, and events for each namespace.

LANGUAGE: javascript
CODE:
{
  "polkadot": {
    "chains": [
        "polkadot:91b171bb158e2d3848fa23a9f1c25182", // Polkadot
        "polkadot:b0a8d493285c2df73290dfb7e61f870f", // Kusama
        ],
    "methods": ["polkadot_signMessage"],
    "events": ["accountsChanged"]
  },
  "eip155": {
    "chains": [
        "eip155:1",   // Ethereum
        "eip155:137"  // Polygon
        ],
    "methods": ["eth_sign"],
    "events": ["accountsChanged"]
  },
  "cosmos": {
    "chains": ["cosmos:cosmoshub-4"], // Cosmos
    "methods": ["cosmos_signDirect"],
    "events": ["someCosmosEvent"]
  }
}

----------------------------------------

TITLE: Retrieving Wallet Provider in TypeScript
DESCRIPTION: This snippet demonstrates how to get the current wallet provider using the getWalletProvider method from the Reown modal.

LANGUAGE: typescript
CODE:
const walletProvider = modal.getWalletProvider()

----------------------------------------

TITLE: Modal View Selection
DESCRIPTION: Demonstrates different ways to open the modal with specific views and namespaces for various blockchain networks.

LANGUAGE: typescript
CODE:
modal.open({ view: 'Account' })

// to connect and show multi wallets view
modal.open({ view: 'Connect'})

// to connect and show only solana wallets
modal.open({ view: 'Connect', namespace: 'solana' })

// to connect and show only bitcoin wallets
modal.open({ view: 'Connect', namespace: 'bip122' })

// to connect and show only ethereum wallets
modal.open({ view: 'Connect', namespace: 'eip155' })

----------------------------------------

TITLE: Available AppKit Publishers in Swift
DESCRIPTION: This code block lists the available publishers in AppKit that developers can subscribe to. These publishers provide various session-related events and socket connection status updates.

LANGUAGE: swift
CODE:
public var sessionPublisher: AnyPublisher<[Session], Never>
public var sessionSettlePublisher: AnyPublisher<Session, Never>
public var sessionRejectionPublisher: AnyPublisher<(Session.Proposal, Reason), Never>
public var sessionDeletePublisher: AnyPublisher<(String, Reason), Never>
public var sessionResponsePublisher: AnyPublisher<Response, Never>
public var socketConnectionStatusPublisher: AnyPublisher<SocketConnectionStatus, Never>
public var authResponsePublisher: AnyPublisher<(id: RPCID, result: Result<(Session?, [Cacao]), AuthError>), Never>

----------------------------------------

TITLE: Registering Firebase Token with Web3Inbox SDK
DESCRIPTION: Demonstrates how to obtain a Firebase Cloud Messaging token and register it with the Web3Inbox SDK. The process involves initializing Firebase messaging, getting a token with a VAPID key, and registering it with the push server.

LANGUAGE: typescript
CODE:
import { getToken } from 'firebase/messaging

// initialize Firebase's messaging object via Firebase's `getMessaging` function

const firebaseToken = getToken(firebaseMessaging, {
  vapidKey: "YOUR_FIREBASE_VAPID_KEY"
})

// The Client ID that registered with this token, can be used for debugging purposes or logs
const clientId = client.registerWithPushServer(firebaseToken)

----------------------------------------

TITLE: Getting Subscriber Information using cURL
DESCRIPTION: This cURL command demonstrates how to retrieve subscriber information using the command line. It includes the necessary headers and JSON payload.

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/subscribers' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029",
      "eip155:1:0x0000000000000000000000000000000000000000"
    ]
  }'

----------------------------------------

TITLE: Approving Authentication Requests
DESCRIPTION: Shows two approaches for approving authentication requests: single signature and multi-chain signatures. Includes message signing and CACAO object creation.

LANGUAGE: javascript
CODE:
// Approach 1
// Sign the authentication message(s) to create a verifiable authentication object(s)
final credentials = EthPrivateKey.fromHex('$privateKey');
final signature = credentials.signPersonalMessageToUint8List(
  Uint8List.fromList(message.codeUnits),
);
final hexSignature = bytesToHex(signature, include0x: true);
// Build the authentication object(s)
final cacao = AuthSignature.buildAuthObject(
  requestPayload: cacaoRequestPayload,
  signature: CacaoSignature(
    t: CacaoSignature.EIP191,
    s: hexSignature,
  ),
  iss: iss,
);

// Approve
await _walletKit!.approveSessionAuthenticate(
  id: args.id,
  auths: [cacao],
);

// Approach 2
// Note that you can also sign multiple messages for every requested chain/address pair
final List<Cacao> cacaos = [];
for (var chain in newAuthPayload.chains) {
  final message = _walletKit!.formatAuthMessage(
    iss: iss,
    cacaoPayload: cacaoRequestPayload,
  );
  final credentials = EthPrivateKey.fromHex('$privateKey');
  final signature = credentials.signPersonalMessageToUint8List(
    Uint8List.fromList(message.codeUnits),
  );
  final hexSignature = bytesToHex(signature, include0x: true);
  final cacao = AuthSignature.buildAuthObject(
    requestPayload: cacaoRequestPayload,
    signature: CacaoSignature(
      t: CacaoSignature.EIP191,
      s: hexSignature,
    ),
    iss: iss,
  );
  cacaos.add(cacao)
}

// Approve
await _walletKit!.approveSessionAuthenticate(
  id: args.id,
  auths: cacaos,
);

----------------------------------------

TITLE: Retrieving All Subscribers with Reown Notify API using JavaScript
DESCRIPTION: Shows how to retrieve all subscribers using the Reown Notify API with JavaScript. It includes setting up the API call and handling the response.

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const response = await fetch(`https://notify.walletconnect.com/${PROJECT_ID}/subscribers`, {
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`
  }
})
const subscribers: string[] = await response.json()

----------------------------------------

TITLE: Installing AppKit for Solana
DESCRIPTION: Command to install AppKit and its dependencies for use with Solana.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-solana

----------------------------------------

TITLE: Retrieving Client Information with useAppKitAccount Hook in React
DESCRIPTION: This snippet demonstrates the usage of the useAppKitAccount hook from @reown/appkit/react to access client information such as address, CAIP address, and connection status.

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from '@reown/appkit/react'

function Components() {
  const { address, caipAddress, isConnected } = useAppKitAccount();

  //...
}

----------------------------------------

TITLE: Disconnecting Session with useDisconnect in Vue
DESCRIPTION: Demonstrates how to use the useDisconnect composable to disconnect the current session.

LANGUAGE: typescript
CODE:
import { useDisconnect } from '@reown/appkit/vue'

const { disconnect } = useDisconnect()

await disconnect()

----------------------------------------

TITLE: Importing Reown AppKit Components in React
DESCRIPTION: Updated import statements for Reown AppKit, replacing Web3Modal imports in a React application.

LANGUAGE: JavaScript
CODE:
import { createAppKit } from '@reown/appkit/react'
import { arbitrum, mainnet } from '@reown/appkit/networks'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { WagmiProvider } from 'wagmi'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

----------------------------------------

TITLE: Signing Multiple NEAR Transactions
DESCRIPTION: Demonstrates how to sign multiple transactions in a batch using near-api-js compatibility. Processes an array of encoded transactions and returns an array of encoded SignedTransactions.

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "near_signTransactions",
  "params": {
  "transactions": [
      { "type": "Buffer", "data": [32, 0, 0, 0, 100, 101, 118, 45, 49, 54, 55, 49, 53, 52, 49, 55, 56, 57, 51, 50 ...] },
      { "type": "Buffer", "data": [32, 0, 0, 0, 100, 101, 118, 45, 49, 54, 55, 49, 53, 52, 49, 55, 56, 57, 51, 50 ...] }
    ]
  }
}

// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": [
    { "type": "Buffer", "data": [32, 0, 0, 0, 100, 101, 118, 45, 49, 54, 55, 49, 53, 52, 49, 55, 56, 57, 51, 50 ...] },
    { "type": "Buffer", "data": [32, 0, 0, 0, 100, 101, 118, 45, 49, 54, 55, 49, 53, 52, 49, 55, 56, 57, 51, 50 ...] }
  ]
}

----------------------------------------

TITLE: Presenting AppKit Modal in Swift
DESCRIPTION: These snippets demonstrate how to present the AppKit modal. The first method automatically traverses the view hierarchy to present from the topmost controller, while the second allows specifying a particular view controller.

LANGUAGE: swift
CODE:
AppKit.present()

LANGUAGE: swift
CODE:
AppKit.present(from: viewController)

----------------------------------------

TITLE: Marking All Notifications as Read using JavaScript
DESCRIPTION: Example of marking all notifications as read using JavaScript's Fetch API.

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const response = await fetch(`https://notify.walletconnect.com/v1/${PROJECT_ID}/mark-all-as-read`, {
  method: 'POST',
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`
  }
})

----------------------------------------

TITLE: Installing WalletConnect Sign Client for C#
DESCRIPTION: Command to install the WalletConnect Sign Client package for C# applications using the .NET CLI and NuGet package manager.

LANGUAGE: shell
CODE:
dotnet add package WalletConnect.Sign

----------------------------------------

TITLE: Managing Session Proposal Actions
DESCRIPTION: Demonstrates handling session proposal approval and rejection with proper loading state management and error handling.

LANGUAGE: typescript
CODE:
try {
    await walletKit.approveSession(params);
    // update UI -> remove the loader
} catch (error) {
    // present error to the user
}

LANGUAGE: typescript
CODE:
try {
    await walletKit.rejectSession(params);
    // update UI -> remove the loader
} catch (error) {
    // present error to the user
}

----------------------------------------

TITLE: Retrieving Wallet Address in TypeScript
DESCRIPTION: This snippet shows how to get the current wallet address using the getAddress method from the Reown modal.

LANGUAGE: typescript
CODE:
const address = modal.getAddress()

----------------------------------------

TITLE: Alternative Initialization of ReownAppKitModal in Flutter
DESCRIPTION: This code shows an alternative way to initialize ReownAppKitModal using a ReownAppKit instance in a Flutter application.

LANGUAGE: javascript
CODE:
final appKit = ReownAppKit.createInstance(
  projectId: '{YOUR_PROJECT_ID}',
  metadata: const PairingMetadata(
    name: 'Example App',
    description: 'Example app description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect(
      native: 'exampleapp://',
      universal: 'https://reown.com/exampleapp',
      linkMode: true|false,
    ),
  ),
);

final _appKitModal = ReownAppKitModal(
  context: context,
  appKit: appKit,
);

// Register here the event callbacks on the service you'd like to use. See `Events` section.

await _appKitModal.init();

----------------------------------------

TITLE: Initializing Web3InboxClient in TypeScript
DESCRIPTION: Demonstrates how to initialize the Web3InboxClient with configuration parameters. The client requires a projectId from Reown Cloud, and optionally accepts domain and allApps parameters to control subscription access and domain settings.

LANGUAGE: typescript
CODE:
const client = await Web3InboxClient.init({ projectId, domain, allApps })

----------------------------------------

TITLE: XRPL Multi-Signature Transaction Example
DESCRIPTION: Example of adding a signature to a multi-signed payment transaction using xrpl_signTransactionFor method. Demonstrates a transaction with 3 existing signatures and adding a 4th signature with auto-submission enabled.

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "xrpl_signTransactionFor",
    "params": {
        "submit": true,
        "tx_signer": "rJ4wmkgK8n93UjtaqQTaj1vxBwQWdLrBjP",
        "tx_json": {
            "Account": "rh2EsAe2xVE71ZBjx7oEL2zpD4zmSs3sY9",
            "TransactionType": "Payment",
            "Amount": "400000000000000",
            "Destination": "r9NpyVfLfUG8hatuCCHKzosyDtKnBdsEN3",
            "Fee": "5000",
            "Flags": 2147483648,
            "LastLedgerSequence": 73541531,
            "Sequence": 38,
            "Signers": [
                {
                    "Signer": {
                        "Account": "re3LGjhrCvthtWWwrfKbVJjXN9PYDeQDJ",
                        "SigningPubKey": "0320ECD5569CAFA4E23147BE238DBFB268DB3B5A502ED339387AC7DCA0ADC6FB90",
                        "TxnSignature": "3045022100EC2BF025E748A028187EDB3C350D518F91F05BC201EAFC9C92566DE9E48AA1B7022018847D172386E93679630E3905BD30481359E5766931944F79F1BA6D910F5C01"
                    }
                },
                {
                    "Signer": {
                        "Account": "rpcL6T32dYb6FDgdm4CnC1DZQSoMvvkLRd",
                        "SigningPubKey": "030BF97DA9A563A9A0679DD527F615CF8EA6B2DB55543075B72822B8D39910B5E1",
                        "TxnSignature": "304402201A891AF3945C81E2D6B95213B79E9A31635209AF0FB94DA8C0983D15F454179B0220388679E02CE6DE2AAC904A9C2F42208418BEF60743A7F9F76FC36D519902DA8C"
                    }
                },
                {
                    "Signer": {
                        "Account": "r3vw3FnkXn2L7St45tzpySZsXVgG75seNk",
                        "SigningPubKey": "030BE281F6DFF9AFD260003375B64235DDBCD5B7A54511BE3DA1FEF1ADE4A85D87",
                        "TxnSignature": "3044022049D36ACE39F1208B4C78A1550F458E54E21161FA4B52B3763C8FA9C4FE45B52C022003BE3579B5B5558A27BB7DC6A8ED163999A451665974138298469C1FDACA615F"
                    }
                }
            ],
            "SigningPubKey": ""
        }
    }
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "tx_json": {
            "Account": "rh2EsAe2xVE71ZBjx7oEL2zpD4zmSs3sY9",
            "TransactionType": "Payment",
            "Amount": "400000000000000",
            "Destination": "r9NpyVfLfUG8hatuCCHKzosyDtKnBdsEN3",
            "Fee": "5000",
            "Flags": 2147483648,
            "LastLedgerSequence": 73541531,
            "Sequence": 38,
            "Signers": [
                {
                    "Signer": {
                        "Account": "re3LGjhrCvthtWWwrfKbVJjXN9PYDeQDJ",
                        "SigningPubKey": "0320ECD5569CAFA4E23147BE238DBFB268DB3B5A502ED339387AC7DCA0ADC6FB90",
                        "TxnSignature": "3045022100EC2BF025E748A028187EDB3C350D518F91F05BC201EAFC9C92566DE9E48AA1B7022018847D172386E93679630E3905BD30481359E5766931944F79F1BA6D910F5C01"
                    }
                },
                {
                    "Signer": {
                        "Account": "rpcL6T32dYb6FDgdm4CnC1DZQSoMvvkLRd",
                        "SigningPubKey": "030BF97DA9A563A9A0679DD527F615CF8EA6B2DB55543075B72822B8D39910B5E1",
                        "TxnSignature": "304402201A891AF3945C81E2D6B95213B79E9A31635209AF0FB94DA8C0983D15F454179B0220388679E02CE6DE2AAC904A9C2F42208418BEF60743A7F9F76FC36D519902DA8C"
                    }
                },
                {
                    "Signer": {
                        "Account": "r3vw3FnkXn2L7St45tzpySZsXVgG75seNk",
                        "SigningPubKey": "030BE281F6DFF9AFD260003375B64235DDBCD5B7A54511BE3DA1FEF1ADE4A85D87",
                        "TxnSignature": "3044022049D36ACE39F1208B4C78A1550F458E54E21161FA4B52B3763C8FA9C4FE45B52C022003BE3579B5B5558A27BB7DC6A8ED163999A451665974138298469C1FDACA615F"
                    }
                },
                {
                    "Signer": {
                        "Account": "rJ4wmkgK8n93UjtaqQTaj1vxBwQWdLrBjP",
                        "SigningPubKey": "02D5D616D4005B91DE02BF6E29157B514C667810860F389CF36DC9E4D5E73BFE79",
                        "TxnSignature": "304402207589FA73E72F85A2C8F82BBCB3C7C67C455D4C14A946BA427A4735F4ED106123022069845499A9DE50F26765F097BA0EA3C96E56A1304B380E0533514AEEF29363D7"
                    }
                }
            ],
            "SigningPubKey": "",
            "hash": "BA2AF0C652F46C97B85C1D17080EEC7422C092B0BD906DCA344B42EF30FA8285"
        }
    }
}

----------------------------------------

TITLE: Responding to Session Requests in WalletKit with TypeScript
DESCRIPTION: Shows how to respond to session requests using WalletKit, including error handling and UI update suggestions.

LANGUAGE: typescript
CODE:
try {
    await walletKit.respondSessionRequest(params);
    // update UI -> remove the loader
} catch (error) {
    // present error to the user
}

----------------------------------------

TITLE: Subscribing to Relay-specific Events in JavaScript
DESCRIPTION: This snippet illustrates how to subscribe to relay-specific events such as relay client connect, error, and disconnect events. These events provide updates on the status of the relay client connection.

LANGUAGE: javascript
CODE:
_appKitModal.appKit!.core.relayClient.onRelayClientConnect.subscribe((EventArgs? event) {});

_appKitModal.appKit!.core.relayClient.onRelayClientError.subscribe((EventArgs? event) {});

_appKitModal.appKit!.core.relayClient.onRelayClientDisconnect.subscribe((EventArgs? event) {});

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Setting up environment variables for project ID and Tenderly Virtual TestNet RPC URL

LANGUAGE: jsx
CODE:
NEXT_PUBLIC_PROJECT_ID = <YOUR_PROJECT_ID_HERE>
TENDERLY_VIRTUAL_TESTNET_RPC = <YOUR_TENDERLY_VIRTUAL_TESTNET_RPC_URL>

----------------------------------------

TITLE: Retrieving and Updating Notification Types in TypeScript
DESCRIPTION: This snippet shows how to get current notification types, watch for changes in notification types, and update enabled notification types for a client's subscription to a dapp. It uses the client object to interact with the notification system.

LANGUAGE: typescript
CODE:
// get scopes of current account's subscription to current dapp
const types = client.getNotificationTypes()

// watch scopes of specific account's subscription to specific dapp
client.watchNotificationTypes(scp => {
  console.log(scp)
})

client.update(['enabledType-1', 'enabledType-2'])

----------------------------------------

TITLE: Importing Migration Component in React MDX
DESCRIPTION: Import statement for the Migration component from a shared notifications frontend integration directory

LANGUAGE: javascript
CODE:
import Migration from '../../../shared/notifications/frontend-integration/migration/react.mdx'

----------------------------------------

TITLE: Adding Custom Wallets to AppKit Configuration (Swift)
DESCRIPTION: This snippet illustrates how to add custom wallets that are not included in the explorer. It allows specifying detailed wallet information including ID, name, homepage, and other properties.

LANGUAGE: swift
CODE:
AppKit.configure(
    ...
    customWallets: [
                .init(
                    id: "swift-sample",
                    name: "Swift Sample Wallet",
                    homepage: "https://reown.com/",
                    imageUrl: "https://avatars.githubusercontent.com/u/179229932?s=200&v=4",
                    order: 1,
                    mobileLink: "walletapp://",
                    linkMode: "https://appkit-lab.reown.com/example"
                )
            ]
    ...
)

----------------------------------------

TITLE: Using useAppKitAccount Hook in React Native
DESCRIPTION: The useAppKitAccount hook returns the client's information including address, chainId, and connection status. It's used to access wallet account details in a React component.

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from '@reown/appkit-ethers-react-native'

function Components() {
  const { address, chainId, isConnected } = useAppKitAccount()

  //...
}

----------------------------------------

TITLE: Sending Notifications using JavaScript Fetch API
DESCRIPTION: Example of sending notifications using JavaScript's Fetch API with project ID and API secret authentication.

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const response = await fetch(`https://notify.walletconnect.com/${PROJECT_ID}/notify`, {
  method: 'POST',
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    notification: {
      type: 'a1e53b95-18e5-4af8-9f03-9308ec87b687',
      title: 'The price of Ethereum has risen',
      body: 'The price of Ethereum has gone up 10%',
      url: 'https://app.example.com'
    },
    accounts: ['eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029']
  })
})

----------------------------------------

TITLE: Updating Import Statements for AppKit in Kotlin
DESCRIPTION: This code snippet demonstrates how to update the import statements in Kotlin files from Web3Modal to AppKit. It replaces the old WalletConnect imports with new Reown imports.

LANGUAGE: kotlin
CODE:
import com.reown.android.*
import com.reown.appkit.*

----------------------------------------

TITLE: Subscribing to Provider Changes in TypeScript
DESCRIPTION: This code illustrates how to subscribe to changes in the wallet provider using the Reown AppKit. It defines a callback function that receives updated provider information and registers it with the subscribeProvider method.

LANGUAGE: typescript
CODE:
function handleChange({ provider, providerType, address, error, chainId, isConnected }) {
  //...
}

modal.subscribeProvider(handleChange)

----------------------------------------

TITLE: Retrieving Chain ID in TypeScript
DESCRIPTION: This snippet illustrates how to get the current chain ID using the getChainId method from the Reown modal.

LANGUAGE: typescript
CODE:
const chainId = modal.getChainId()

----------------------------------------

TITLE: Configuring Intent Filter for Android in AndroidManifest.xml
DESCRIPTION: This XML snippet demonstrates how to add an intent filter to the AndroidManifest.xml file for Android to enable deep linking in a Flutter app using Reown AppKit.

LANGUAGE: xml
CODE:
<intent-filter>
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <!-- your own custom scheme -->
    <!-- Should be the same you set on Redirect.native on Flutter side -->
    <!-- Be mind of removing :// for this step -->
    <data android:scheme="exampleapp" />
</intent-filter>

----------------------------------------

TITLE: Triggering Web3Modal in React
DESCRIPTION: This code snippet demonstrates how to trigger the Web3Modal in a React component using the useWeb3Modal hook from AppKit v5.

LANGUAGE: tsx
CODE:
import { useWeb3Modal } from '@web3modal/wagmi/react'

function HomePage() {
  const { open } = useWeb3Modal()

  return <button onClick={() => open()}>Connect</button>
}

----------------------------------------

TITLE: Getting Bitcoin Balance using AppKit and Mempool API in React
DESCRIPTION: Functions to fetch and calculate Bitcoin balance using UTXOs from Mempool API.

LANGUAGE: javascript
CODE:
const handleGetBalance = () => {
    const isTestnet = true;

    const response = await fetch(
        `https://mempool.space${isTestnet ? '/testnet' : ''}/api/address/${address}/utxo`
    );
    const data = await response.json();

    const utxos = await getUTXOs(address, isTestnet)
    const balance = utxos.reduce((sum, utxo) => sum + utxo.value, 0)

    console.log(balance);
}

const getUTXOs = async (address: string, isTestnet: boolean = false): Promise<UTXO[]> => {
    const response = await fetch(
        `https://mempool.space${isTestnet ? '/testnet' : ''}/api/address/${address}/utxo`
    )
    return await response.json();
}

type UTXO = {
    txid: string
    vout: number
    value: number
    status: {
        confirmed: boolean
        block_height: number
        block_hash: string
        block_time: number
    }
}

----------------------------------------

TITLE: Sending RPC Request for Personal Sign in ReownAppKit (Flutter)
DESCRIPTION: This snippet shows how to send an RPC request for personal signing using ReownAppKit. It encodes a message, determines the chain and namespace, and sends the request.

LANGUAGE: javascript
CODE:
final bytes = utf8.encode(message);
final encodedMessage = hex.encode(bytes);

final chainId = _appKitModal.selectedChain!.chainId;
final namespace = ReownAppKitModalNetworks.getNamespaceForChainId(chainId);

final result = await _appKitModal.request(
  topic: _appKitModal.session!.topic,
  chainId: chainId,
  request: SessionRequestParams(
    method: 'personal_sign',
    params: [
      '0x$encodedMessage',
      _appKitModal.session!.getAddress(namespace)!;
    ],
  ),
);

----------------------------------------

TITLE: Using useAppKitProvider Hook with Ethers in React Native
DESCRIPTION: The useAppKitProvider hook returns the walletProvider and WalletProviderType. This example demonstrates how to use it with ethers.js to sign a message using the wallet provider.

LANGUAGE: tsx
CODE:
import { BrowserProvider } from 'ethers'
import { useAppKitProvider } from '@reown/appkit-ethers-react-native'

function Components() {
  const { walletProvider } = useAppKitProvider()

  async function onSignMessage() {
    const ethersProvider = new BrowserProvider(walletProvider)
    const signer = await ethersProvider.getSigner()
    const message = 'hello appkit rn + ethers'
    const signature = await signer.signMessage(message)
    console.log(signature.toString())
  }

  return <button onClick={() => onSignMessage()}>Sign Message</button>
}

----------------------------------------

TITLE: NextAuth API Route Configuration
DESCRIPTION: Implementation of the NextAuth API route with SIWE credential provider and session handling.

LANGUAGE: typescript
CODE:
import NextAuth from 'next-auth'
import credentialsProvider from 'next-auth/providers/credentials'
import {
  type SIWESession,
  verifySignature,
  getChainIdFromMessage,
  getAddressFromMessage
} from '@reown/appkit-siwe'

declare module 'next-auth' {
  interface Session extends SIWESession {
    address: string
    chainId: number
  }
}

const nextAuthSecret = process.env.NEXTAUTH_SECRET
if (!nextAuthSecret) {
  throw new Error('NEXTAUTH_SECRET is not set')
}

const projectId = process.env.NEXT_PUBLIC_PROJECT_ID
if (!projectId) {
  throw new Error('NEXT_PUBLIC_PROJECT_ID is not set')
}

const providers = [
  credentialsProvider({
    name: 'Ethereum',
    credentials: {
      message: {
        label: 'Message',
        type: 'text',
        placeholder: '0x0'
      },
      signature: {
        label: 'Signature',
        type: 'text',
        placeholder: '0x0'
      }
    },
    async authorize(credentials) {
      try {
        if (!credentials?.message) {
          throw new Error('SiweMessage is undefined')
        }
        const { message, signature } = credentials
        const address = getAddressFromMessage(message)
        const chainId = getChainIdFromMessage(message)

        const isValid = await verifySignature({ address, message, signature, chainId, projectId })

        if (isValid) {
          return {
            id: `${chainId}:${address}`
          }
        }
        return null
      } catch (e) {
        return null
      }
    }
  })
]

const handler = NextAuth({
  secret: nextAuthSecret,
  providers,
  session: {
    strategy: 'jwt'
  },
  callbacks: {
    session({ session, token }) {
      if (!token.sub) {
        return session
      }
      const [, chainId, address] = token.sub.split(':')
      if (chainId && address) {
        session.address = address
        session.chainId = parseInt(chainId, 10)
      }
      return session
    }
  }
})

export { handler as GET, handler as POST }

----------------------------------------

TITLE: Reading from Smart Contract in ReownAppKit (Flutter)
DESCRIPTION: This snippet shows how to read data from a smart contract using ReownAppKit. It includes creating a DeployedContract object and calling read functions like 'decimals', 'balanceOf', and 'totalSupply'.

LANGUAGE: javascript
CODE:
final tetherContract = DeployedContract(
  ContractAbi.fromJson(
    jsonEncode([{.....}]), // ABI object
    'Tether USD',
  ),
  EthereumAddress.fromHex('0xdAC17F958D2ee523a2206206994597C13D831ec7'), // https://etherscan.io/token/0xdAC17F958D2ee523a2206206994597C13D831ec7
);

final chainId = _appKitModal.selectedChain!.chainId;
final namespace = ReownAppKitModalNetworks.getNamespaceForChainId(chainId);

// Get token decimals
final decimals = await _appKitModal.requestReadContract(
  topic: _appKitModal.session!.topic,
  chainId: chainId,
  deployedContract: tetherContract,
  functionName: 'decimals',
);

// Get balance of wallet
final balanceOf = await _appKitModal.requestReadContract(
  deployedContract: tetherContract,
  topic: _appKitModal.session!.topic,
  chainId: chainId,
  functionName: 'balanceOf',
  parameters: [
    EthereumAddress.fromHex(_appKitModal.session!.getAddress(namespace)),
  ],
);

// Get token total supply
final totalSupply = await _appKitModal.requestReadContract(
  deployedContract: tetherContract,
  topic: _appKitModal.session!.topic,
  chainId: _appKitModal.selectedChain!.chainId,
  functionName: 'totalSupply',
);

----------------------------------------

TITLE: Graduation Header in Markdown
DESCRIPTION: Basic markdown heading announcing graduation

LANGUAGE: markdown
CODE:
# Graduation

----------------------------------------

TITLE: Detecting Smart Contract Wallets using web3.js
DESCRIPTION: This code snippet shows how to detect if an address belongs to a smart contract wallet using web3.js. It fetches the bytecode of the address and verifies if it's non-empty.

LANGUAGE: javascript
CODE:
import Web3 from 'web3'

const web3 = new Web3(rpcUrl)

const bytecode = await web3.eth.getCode(address)

const isSmartContract = bytecode && utils.hexStripZeros(bytecode) !== '0x'

----------------------------------------

TITLE: Updating ProGuard Rules for AppKit in Android
DESCRIPTION: This code snippet demonstrates how to update the ProGuard rules for AppKit. It replaces the old Web3Modal class paths with the new AppKit class paths to ensure proper code obfuscation.

LANGUAGE: proguard
CODE:
-keep class com.reown.appkit.client.Wallet$Model { *; }
-keep class com.reown.appkit.client.Wallet { *; }

----------------------------------------

TITLE: Handling Session Requests in Swift
DESCRIPTION: Sets up a subscription to handle incoming session requests and demonstrates how to respond to them.

LANGUAGE: swift
CODE:
WalletKit.instance.sessionRequestPublisher
  .receive(on: DispatchQueue.main)
  .sink { [weak self] session in
      self?.verifyDapp(session.context)
      self?.showSessionRequest(session.request)
  }.store(in: &publishers)

// Responding to a request
let response: AnyCodable = sign(request: sessionRequest) // Implement your signing method
try await WalletKit.instance.respond(topic: request.topic, requestId: request.id, response: .response(response))

----------------------------------------

TITLE: Configuring On-Ramp Feature in AppKit using TypeScript
DESCRIPTION: Example of creating an AppKit instance with On-Ramp feature configuration. Shows how to optionally disable the On-Ramp feature which is enabled by default. The configuration works for both EVM and Solana networks.

LANGUAGE: typescript
CODE:
const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    /* highlight-add-start */
    onramp: false // Optional - true by default
    /* highlight-add-end */
  }
})

----------------------------------------

TITLE: Updating dependencies in package.json for Wagmi
DESCRIPTION: Replace the old @web3modal packages with the new @reown/appkit packages in the package.json file. This step is crucial for updating the project dependencies.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "@reown/appkit-wagmi-react-native": '1.0.0',
    "@reown/appkit-auth-wagmi-react-native": '1.0.0',
    "@reown/appkit-coinbase-wagmi-react-native": '1.0.0',
    "@reown/appkit-siwe-react-native": "1.0.0"
  }
}

----------------------------------------

TITLE: Executing eth_sign Method in Ethereum JSON-RPC
DESCRIPTION: This snippet shows how to use the eth_sign method to calculate an Ethereum-specific signature. It includes the request format with parameters and the expected result format.

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "eth_sign",
  "params": ["0x9b2055d370f73ec7d8a03e965129118dc8f5bf83", "0xdeadbeaf"],
}


// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": "0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b"
}

----------------------------------------

TITLE: Importing Smart Account MDX Component
DESCRIPTION: Imports and renders a shared Smart Account documentation component using MDX syntax.

LANGUAGE: jsx
CODE:
import SmartAccount from '../../shared/smart-accounts.mdx'

<SmartAccount />

----------------------------------------

TITLE: Making Requests with AppKit - Kotlin
DESCRIPTION: Demonstrates how to make requests using AppKit with method parameters and callbacks for success and error handling.

LANGUAGE: kotlin
CODE:
val requestParams = Modal.Params.Request(
    method = /* Selected method */,
    params = /* Method params  */,
)

AppKit.request(
    request = requestParams,
    onSuccess = {
    /* callback that letting you know that you have successful request */
    },
    onError = { error ->
    /* callback for error */
    }
)

----------------------------------------

TITLE: Using AppKit Error Hook
DESCRIPTION: Hook for handling and accessing error states in the AppKit integration.

LANGUAGE: ts
CODE:
import { useAppKitError } from '@reown/appkit-ethers5-react-native'

function Components() {
  const { error } = useAppKitError()

  //...
}

----------------------------------------

TITLE: Opening Specific Screens in Reown AppKit Modal
DESCRIPTION: This code shows how to open specific screens of the Reown AppKit Modal using the openModalView() method with different arguments.

LANGUAGE: javascript
CODE:
// With no options will open default screen depending on the connection status
_appKitModal.openModalView();

 // Will open Network Selection screen independently of the connection status
 // This option is not needed if you use AppKitModalNetworkSelectButton()
_appKitModal.openModalView(ReownAppKitModalSelectNetworkPage());

 // Will open QR Code screen for connection.
 // Will work only if not yet connected.
_appKitModal.openModalView(ReownAppKitModalQRCodePage());

// Will open All Wallets screen for connection
// Will work only if not yet connected.
_appKitModal.openModalView(ReownAppKitModalAllWalletsPage());

----------------------------------------

TITLE: Using useAppKitProvider Hook for Wallet Interactions
DESCRIPTION: Demonstrates how to use the useAppKitProvider hook along with ethers.js to interact with the wallet, including signing messages.

LANGUAGE: tsx
CODE:
import { useAppKitAccount, useAppKitProvider, useAppKitNetwork  } from '@reown/appkit/vue'
import { ethers } from 'ethers'
import { useAppKitProvider } from '@reown/appkit/vue'

function Components() {
  const { walletProvider } = useAppKitProvider('eip155')
  const { address } = useAppKitAccount()
  const { chainId } = useAppKitNetwork()

  async function onSignMessage() {
    const provider = new ethers.providers.Web3Provider(walletProvider, chainId)
    const signer = provider.getSigner(address)
    const signature = await signer?.signMessage('Hello AppKit Ethers')
    console.log(signature)
  }

  return <button onClick={() => onSignMessage()}>Sign Message</button>
}

----------------------------------------

TITLE: Updating Import Statements for AppKit
DESCRIPTION: Demonstrates how to update the import statement from Web3Modal to AppKit.

LANGUAGE: swift
CODE:
import AppKit

----------------------------------------

TITLE: Configuring Optional Namespaces
DESCRIPTION: Shows how to configure optional namespaces for multiple blockchain networks including EVM, Solana, and Polkadot.

LANGUAGE: javascript
CODE:
optionalNamespaces: {
  'eip155': RequiredNamespace.fromJson({
    'chains': ReownAppKitModalNetworks.getAllSupportedNetworks(
      namespace: 'eip155',
    ).map((chain) => '${chain.chainId}').toList(),
    'methods': NetworkUtils.defaultNetworkMethods['eip155']!.toList(),
    'events': NetworkUtils.defaultNetworkEvents['eip155']!.toList(),
  }),
  'solana': RequiredNamespace.fromJson({
    'chains': ReownAppKitModalNetworks.getAllSupportedNetworks(
      namespace: 'solana',
    ).map((chain) => '${chain.chainId}').toList(),
    'methods': NetworkUtils.defaultNetworkMethods['solana']!.toList(),
    'events': [],
  }),
  'polkadot': RequiredNamespace.fromJson({
    'chains': ReownAppKitModalNetworks.getAllSupportedNetworks(
      namespace: 'polkadot',
    ).map((chain) => '${chain.chainId}').toList(),
    'methods': [
      'polkadot_signMessage',
      'polkadot_signTransaction',
    ],
    'events': []
  }),
},

----------------------------------------

TITLE: Updating USS Variable Names
DESCRIPTION: Example of updating USS variable names from the Web3Modal prefix to the AppKit prefix.

LANGUAGE: css
CODE:
--ro-color-accent-100: rgb(156, 81, 65);

----------------------------------------

TITLE: Registering an Account with Notify API in JavaScript
DESCRIPTION: Demonstrates how to register an account with the Notify API, including checking registration status and signing a SIWE message.

LANGUAGE: javascript
CODE:
const account = `eip155:1:0x63Be2c680685d2A9620c11b0068291261aa62d76`
const domain =  'app.mydomain.com'
const allApps =  true

if (notifyClient.isRegistered({ account, domain, allApps })) return;

const {registerParams, message}  = notifyClient.prepareRegistration({
  account,
  domain,
  allApps
});

const signature = await ethersWallet.signMessage(message);

await notifyClient.register({
  registerParams,
  signature,
})

----------------------------------------

TITLE: Event Tracking
DESCRIPTION: Shows how to track and subscribe to modal events.

LANGUAGE: typescript
CODE:
modal.getEvent() // get last event
modal.subscribeEvents(event => console.log(event)) // subscribe to events

----------------------------------------

TITLE: Updating Component imports for Wagmi
DESCRIPTION: Update the import statements for various components used in the application. This step ensures that the correct components from the new AppKit package are being used.

LANGUAGE: tsx
CODE:
import {
  AccountButton,
  AppKitButton,
  ConnectButton,
  NetworkButton,
  AppKit
} from '@reown/appkit-wagmi-react-native';

----------------------------------------

TITLE: Updating Hook imports for Wagmi
DESCRIPTION: Update the import statements for various hooks used in the application. This step ensures that the correct hooks from the new AppKit package are being used.

LANGUAGE: tsx
CODE:
import {
  useAppKit,
  useAppKitState,
  useAppKitEvents,
  useWalletInfo,
} from '@reown/appkit-wagmi-react-native';

----------------------------------------

TITLE: Retrieving Wallet Provider in TypeScript
DESCRIPTION: This code demonstrates how to get the current wallet provider using the Reown AppKit.

LANGUAGE: typescript
CODE:
const walletProvider = modal.getWalletProvider()

----------------------------------------

TITLE: Importing and Rendering Social Media Component in MDX
DESCRIPTION: Imports a reusable social media component from a shared directory and renders it on the page. Uses MDX frontmatter to define the page title.

LANGUAGE: mdx
CODE:
---
title: Email & Socials
---

import Socials from '../../shared/socials.mdx'

<Socials />

----------------------------------------

TITLE: Getting Selected Chain in AppKit - Kotlin
DESCRIPTION: Retrieves the currently selected blockchain chain using AppKit's getSelectedChain method.

LANGUAGE: kotlin
CODE:
AppKit.getSelectedChain()

----------------------------------------

TITLE: Getting Active Account - Kotlin
DESCRIPTION: Retrieves the current active account connected via AppKit.

LANGUAGE: kotlin
CODE:
AppKit.getAccount()

----------------------------------------

TITLE: Using useAppKitAccount Hook in Vue
DESCRIPTION: This snippet demonstrates how to use the useAppKitAccount hook to retrieve the client's information in a Vue application. It provides access to the user's address, connection status, and overall status.

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from '@reown/appkit/vue'

const { address, status, isConnected } = useAppKitAccount()

----------------------------------------

TITLE: Initializing AppKit in Unity Start Method
DESCRIPTION: Example of initializing AppKit from a Unity MonoBehaviour Start method

LANGUAGE: csharp
CODE:
public async void Start()
{
    var config = new AppKitConfig(...);
    await AppKit.InitializeAsync(config);
}

----------------------------------------

TITLE: Updating Import Statements for AppKit Configuration
DESCRIPTION: Changes in import statements to use AppKit's WagmiAdapter instead of RainbowKit's getDefaultConfig.

LANGUAGE: tsx
CODE:
/* highlight-delete-start */
- import { getDefaultConfig } from '@rainbow-me/rainbowkit';
/* highlight-delete-end */
/* highlight-add-start */
+ import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
/* highlight-add-end */

----------------------------------------

TITLE: Type Definitions for Account Information
DESCRIPTION: TypeScript type definitions for embedded wallet information and account return types.

LANGUAGE: typescript
CODE:
type EmbeddedWalletInfo {
  user: {
    username: string
    email: string
  },
  accountType: 'eoa' | 'smartAccount',
  authProvider: 'google' | 'apple' | 'facebook' | 'x' | 'discord' | 'farcaster' | 'github' | 'email',
  isSmartAccountDeployed: boolean
}

type ConnectionStatus = 'connected' | 'disconnected' | 'connecting' | 'reconnecting'

type UseAppKitAccountReturnType = {
  isConnected: boolean
  allAccounts: Account[]
  status?: ConnectionStatus
  address?: string
  caipAddress?: `${string}:${string}`
  embeddedWalletInfo?: EmbeddedWalletInfo
}

----------------------------------------

TITLE: Retrieving Bitcoin Public Key using AppKit in React
DESCRIPTION: Function to get the public key from the connected Bitcoin account using AppKit.

LANGUAGE: javascript
CODE:
const handleGetPublicKey = async () => {
    const bip122Account = allAccounts?.find(a => a.address === address)
    let publicKey = bip122Account?.publicKey || ''
    
    console.log(publicKey);
}

----------------------------------------

TITLE: Integrating AppKit with Ethers
DESCRIPTION: Shows how to initialize AppKit with Ethers adapter, including metadata configuration and analytics features. Demonstrates basic setup for React applications.

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit/react'
import { EthersAdapter } from '@reown/appkit-adapter-ethers'
import { sepolia } from '@reown/appkit/networks'

const projectId = 'YOUR_PROJECT_ID'

// Create a metadata object
const metadata = {
  //...
}

// Create Ethers adapter
const ethersAdapter = new EthersAdapter()

// Create a AppKit instance
createAppKit({
  adapters: [ethersAdapter],
  networks: [sepolia],
  metadata,
  projectId,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

// Now, you can render connect button
ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <appkit-button />
  </React.StrictMode>
)

----------------------------------------

TITLE: Creating Custom Themes for ReownAppKitModal in Flutter
DESCRIPTION: Demonstrates how to create custom light and dark themes by modifying ReownAppKitModalThemeData parameters.

LANGUAGE: javascript
CODE:
final _themeData = ReownAppKitModalThemeData(
  lightColors: ReownAppKitModalColors.lightMode.copyWith(
    accent100: Colors.red,
    background125: Colors.yellow.shade300,
  ),
  darkColors: ReownAppKitModalColors.darkMode.copyWith(
    accent100: Colors.green,
    background125: Colors.brown,
  ),
);

----------------------------------------

TITLE: Retrieving Subscriber Information with Reown Notify API using cURL
DESCRIPTION: Demonstrates how to retrieve subscriber information using the Reown Notify API with a cURL command. It includes the API endpoint, authorization header, and JSON payload for the account addresses to query.

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/subscribers' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029",
      "eip155:1:0x0000000000000000000000000000000000000000"
    ]
  }'

----------------------------------------

TITLE: Using AppKit Hooks for Custom Modal Trigger in React Native
DESCRIPTION: Implementation of custom modal trigger using the useAppKit hook, allowing for more flexibility in UI design.

LANGUAGE: tsx
CODE:
import { Pressable, Text } from 'react-native'
import { useAppKit } from '@reown/appkit-wagmi-react-native'

export default function ConnectView() {
  const { open } = useAppKit()

  return (
    <>
      <Pressable onClick={() => open()}>
        <Text>Open Connect Modal</Text>
      </Pressable>
    </>
  )
}

----------------------------------------

TITLE: Updating dependencies in package.json for Ethers
DESCRIPTION: Replace the old @web3modal packages with the new @reown/appkit packages in the package.json file for Ethers integration. This step is crucial for updating the project dependencies.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "@reown/appkit-ethers-react-native": '1.0.0',
    "@reown/appkit-auth-ethers-react-native": '1.0.0',
    "@reown/appkit-coinbase-ethers-react-native": '1.0.0',
    "@reown/appkit-siwe-react-native": "1.0.0"
  }
}

----------------------------------------

TITLE: Importing and Rendering Verify Component in JSX
DESCRIPTION: This snippet imports the Verify component from a relative path and renders it within the page. It uses JSX syntax to include the component.

LANGUAGE: jsx
CODE:
import Verify from '../../../cloud/verify.mdx'

<Verify />

----------------------------------------

TITLE: Configuring Android Wallet Detection
DESCRIPTION: XML configuration for AndroidManifest.xml to enable wallet detection on Android devices by specifying wallet package names.

LANGUAGE: xml
CODE:
<queries>
  <package android:name="io.metamask"/>
  <package android:name="com.wallet.crypto.trustapp"/>
  <package android:name="io.gnosis.safe"/>
  <package android:name="me.rainbow"/>
  <!-- Add other wallet package names here -->
</queries>

----------------------------------------

TITLE: Updating Component imports for Ethers
DESCRIPTION: Update the import statements for various components used in the application with Ethers integration. This step ensures that the correct components from the new AppKit package are being used.

LANGUAGE: tsx
CODE:
import {
  AccountButton,
  AppKitButton,
  ConnectButton,
  NetworkButton,
  AppKit
} from '@reown/appkit-ethers-react-native';

----------------------------------------

TITLE: Fetching Error State in TypeScript
DESCRIPTION: This code shows how to retrieve the current error state from the Reown AppKit.

LANGUAGE: typescript
CODE:
const error = modal.getError()

----------------------------------------

TITLE: Marking All Notifications as Read with Reown Notify API using JavaScript
DESCRIPTION: Illustrates how to mark all existing notifications as read using the Reown Notify API with JavaScript. Uses fetch to make a POST request with the necessary authorization header.

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const response = await fetch(`https://notify.walletconnect.com/v1/${PROJECT_ID}/mark-all-as-read`, {
  method: 'POST',
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`
  }
})

----------------------------------------

TITLE: Installing AppKit with Bitcoin for Vue
DESCRIPTION: npm command to install AppKit with Bitcoin adapter for Vue projects.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-bitcoin

----------------------------------------

TITLE: Updating Subscription Notification Settings in Notify API
DESCRIPTION: Allows users to modify their notification settings for a dapp, filtering out unwanted alerts based on the latest options provided by the dapp.

LANGUAGE: kotlin
CODE:
val topic: String = // active subscription topic
val scope: List<String> = // list of notification types
val timeout: Duration? = // Optional. Timeout - min 5 sec, max 60 sec, default 60 sec
val params = Notify.Params.UpdateSubscription(topic, scope, timeout)

NotifyClient.update(params).let { result ->
    when (result) {
        is Notify.Result.UpdateSubscription.Success -> {
          // callback for when the update request was successful
        }
        is Notify.Result.UpdateSubscription.Error -> {
          // callback for when the update request has failed
        }
    }
}

----------------------------------------

TITLE: Handling Session Proposals in iOS
DESCRIPTION: Handle incoming session proposals in iOS applications.

LANGUAGE: swift
CODE:
Sign.instance.sessionProposalPublisher
    .receive(on: DispatchQueue.main)
    .sink { [weak self] session in
        self?.verifyDapp(session.context)
        self?.showSessionProposal(session.proposal)
    }.store(in: &publishers)

----------------------------------------

TITLE: Configuring Recommended Wallets in AppKit (Swift)
DESCRIPTION: This snippet demonstrates how to set recommended wallet IDs in the AppKit configuration. It allows prioritizing specific wallets fetched from WalletGuide.

LANGUAGE: swift
CODE:
AppKit.configure(
    ...
    recommendedWalletIds: [String]
    ...
)

----------------------------------------

TITLE: Initializing Notification Hook in TypeScript
DESCRIPTION: Sets up a notification hook with pagination, infinite scroll, and unread-first sorting. Returns notification data and functions to manage read status.

LANGUAGE: typescript
CODE:
const notificationsPerPage = 5
const isInfiniteScroll = true
const unreadFirst = true

const {
  data: notifications,
  nextPage,
  markNotificationsAsRead,
  markAllNotificationsAsRead
} = useNotifications(
  notificationsPerPage,
  isInfiniteScroll,
  account,
  domain,
  unreadFirst,
  onRead // optional function to run whenever messages are read
)

----------------------------------------

TITLE: Updating Imports for Vue Implementation
DESCRIPTION: Changes required in import statements when migrating from Web3Modal v5 to Reown AppKit in Vue.

LANGUAGE: tsx
CODE:
import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'
import { createAppKit } from '@reown/appkit/vue'
import { SolanaAdapter } from '@reown/appkit-adapter-solana/vue'

----------------------------------------

TITLE: Implementing AppKit Button Component in React Native
DESCRIPTION: Example of using the pre-built AppKitButton component to trigger the AppKit modal.

LANGUAGE: tsx
CODE:
import { AppKitButton } from '@reown/appkit-wagmi-react-native'

export default function ConnectView() {
  return (
    <>
      ...rest of your view
      <AppKitButton />
    </>
  )
}

----------------------------------------

TITLE: Importing and Rendering Relay Component in JSX
DESCRIPTION: This snippet imports a Relay component from a relative path and renders it within the current file. It demonstrates how to include modular documentation or configuration components in a React-based documentation system.

LANGUAGE: jsx
CODE:
import Relay from '../../../cloud/relay.mdx'

<Relay />

----------------------------------------

TITLE: Configuring AppKit Modal with Link Mode in Flutter
DESCRIPTION: Demonstrates how to initialize ReownAppKitModal with Link Mode enabled by configuring PairingMetadata and setting the linkMode property to true.

LANGUAGE: javascript
CODE:
final _appKitModal = ReownAppKitModal(
  context: context,
  projectId: '{YOUR_PROJECT_ID}',
  metadata: const PairingMetadata(
    name: 'Example App',
    description: 'Example app description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect(
      native: 'exampleapp://',
      universal: 'https://reown.com/exampleapp',
      linkMode: true,
    ),
  ),
);

----------------------------------------

TITLE: Using useAppKitEvents Hook with Ethers in React Native
DESCRIPTION: Shows how to use the useAppKitEvents hook from the @reown/appkit-ethers-react-native package to get the last tracked modal event and execute a callback function.

LANGUAGE: typescript
CODE:
import { useAppKitEvents } from '@reown/appkit-ethers-react-native'

const event = useAppKitEvents(event => {
  // your code here
})

----------------------------------------

TITLE: Updating Coinbase Wallet import for Ethers
DESCRIPTION: Update the import statement for the CoinbaseProvider with Ethers integration. This change is necessary to use the new AppKit Coinbase package.

LANGUAGE: tsx
CODE:
import { CoinbaseProvider } from '@reown/appkit-coinbase-ethers-react-native';

----------------------------------------

TITLE: Reading Contract Data with Wagmi
DESCRIPTION: Example of using Wagmi to read data from a smart contract. This snippet demonstrates how to use the readContract function from @wagmi/core to interact with a smart contract.

LANGUAGE: javascript
CODE:
import { readContract } from '@wagmi/core'
import { USDTAbi } from '../abi/USDTAbi'

const USDTAddress = '0x...'

const data = readContract(wagmiConfig, {
  address: USDTAddress,
  abi: USDTAbi,
  functionName: 'totalSupply',
  args: []
})

----------------------------------------

TITLE: Using SIWX Custom Component
DESCRIPTION: JSX component usage within MDX documentation to render the SIWX custom content.

LANGUAGE: mdx
CODE:
<SiwxCustom />

----------------------------------------

TITLE: Accessing Verify API Validations in JavaScript
DESCRIPTION: This code snippet demonstrates how to access the Verify API validations from the verifyContext included in a SessionProposalEvent. It checks for scam, invalid, valid, and unknown validation states.

LANGUAGE: javascript
CODE:
_walletKit!.onSessionProposal.subscribe((SessionProposalEvent? args) {
  if (args != null) {
    final scamApp = args.verifyContext?.validation.scam;
    final invalidApp = args.verifyContext?.validation.invalid;
    final validApp = args.verifyContext?.validation.valid;
    final unknown = args.verifyContext?.validation.unknown;
  }
});

----------------------------------------

TITLE: Installing AppKit for Bitcoin
DESCRIPTION: Command to install AppKit and its dependencies for use with Bitcoin.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-bitcoin

----------------------------------------

TITLE: Updating React Component to Use AppKit Button
DESCRIPTION: Changes required in the React component to replace RainbowKit's ConnectButton with AppKit's Button.

LANGUAGE: tsx
CODE:
/* highlight-delete-start */
- import { ConnectButton } from '@rainbow-me/rainbowkit';
/* highlight-delete-end */

/* highlight-delete-start */
- <ConnectButton />
/* highlight-delete-end */
/* highlight-add-start */
+ <appkit-button />
/* highlight-add-end */

----------------------------------------

TITLE: Setting up NotifyClient.Delegate in Android
DESCRIPTION: Demonstrates how to set up NotifyClient.Delegate to handle asynchronous updates from dapps, including subscription and notification events.

LANGUAGE: kotlin
CODE:
val walletDelegate = object : NotifyClient.Delegate {

    override fun onNotifySubscription(notifySubscribe: Notify.Event.Subscription) {
        // Triggered when a wallet initiated subscription has been created
    }

    override fun onNotifyNotification(notifyNotification: Notify.Event.Notification) {
        // Triggered when a message has been sent by the Dapp. The message contains the title, body, icon, and url
    }

    override fun onError(error: Notify.Model.Error) {
        // Triggered when there's an error inside the SDK
    }
}

NotifyClient.setDelegate(walletDelegate)

----------------------------------------

TITLE: Executing Chain Abstraction in Kotlin with WalletKit
DESCRIPTION: This method executes the chain abstraction operation by broadcasting bridging and initial transactions. It requires the @ChainAbstractionExperimentalApi annotation.

LANGUAGE: kotlin
CODE:
@ChainAbstractionExperimentalApi
fun execute(
  prepareAvailable: Wallet.Model.PrepareSuccess.Available,
  prepareSignedTxs: List<String>,
  initSignedTx: String,
  onSuccess: (Wallet.Model.ExecuteSuccess) -> Unit,
  onError: (Wallet.Model.Error) -> Unit
)

----------------------------------------

TITLE: Opening AppKit Modal with Composables in Vue
DESCRIPTION: This snippet demonstrates how to use the useAppKit composable to open the AppKit modal. It shows two buttons: one to open the default connect modal and another to open the network modal.

LANGUAGE: html
CODE:
<template>
  <button @click="modal.open()">Open Connect Modal</button>
  <button @click="modal.open({ view: 'Networks' })">Open Network Modal</button>
</template>

----------------------------------------

TITLE: React Implementation - Import Changes
DESCRIPTION: Updates to import statements when migrating from Web3Modal to Reown AppKit in React

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit/react'
import { arbitrum, mainnet } from '@reown/appkit/networks'
import { EthersAdapter } from '@reown/appkit-adapter-ethers'

----------------------------------------

TITLE: Defining Smart Session Permission Request in TypeScript
DESCRIPTION: Example of creating a SmartSessionGrantPermissionsRequest object with expiry, chainId, address, signer, permissions, and policies.

LANGUAGE: typescript
CODE:
const request: SmartSessionGrantPermissionsRequest = {
      expiry: Math.floor(Date.now() / 1000) + 24 * 60 * 60, // 24 hours
      chainId: toHex(baseSepolia.id),
      address: address,
      signer: {
        type: 'keys',
        data: {
          keys :[{
          type: 'secp256k1',
          publicKey: '0x...' //public key of dapp signer
        }]
        }
      },
      permissions: [ {
        type: 'contract-call',
        data: {
          address: '0x2E65BAfA07238666c3b239E94F32DaD3cDD6498D', // sample donut contract address
          abi: [
            {
              inputs: [{ internalType: 'uint256', name: 'amount', type: 'uint256' }],
              name: 'purchase',
              outputs: [],
              stateMutability: 'payable',
              type: 'function'
            }
          ],
          functions: [ {
            functionName: 'purchase'
          } ]
        }
      }],
      policies: []
    }

----------------------------------------

TITLE: Launching Connected Wallet in Swift
DESCRIPTION: Opens the wallet that the dapp is currently connected to.

LANGUAGE: swift
CODE:
AppKit.instance.launchCurrentWallet()

----------------------------------------

TITLE: Importing Web3 Notification Components in React/Next.js
DESCRIPTION: Imports required components and assets for the web3 notifications documentation page. Includes button components, wrapper components, and framework-specific logo assets.

LANGUAGE: JavaScript
CODE:
import Button from '../../components/button'
import Wrapper from '../../components/Home/Wrapper'
import useBaseUrl from '@docusaurus/useBaseUrl'

import reactLogo from '../../../static/assets/home/reactLogo.png'
import nextjsLogo from '../../../static/assets/home/nextjsLogo.png'
import vueLogo from '../../../static/assets/home/vueLogo.png'
import javascriptLogo from '../../../static/assets/home/javascriptLogo.png'

LANGUAGE: JSX
CODE:
<Wrapper
  type="large"
  fit={false}
  items={[
    {
      name: 'React',
      type: 'react', 
      description: 'Get started with AppKit in React.',
      icon: reactLogo,
      href: '../react/notifications/overview'
    },
    {
      name: 'Next.js',
      type: 'next',
      description: 'Get started with AppKit in Next.js.',
      icon: nextjsLogo,
      href: '../next/notifications/overview',
      isWhite: true
    },
    {
      name: 'Vue',
      type: 'vue',
      description: 'Get started with AppKit in Vue.',
      icon: vueLogo,
      href: '../vue/notifications/overview'
    },
    {
      name: 'JavaScript',
      type: 'javascript',
      description: 'Get started with AppKit in JavaScript.',
      icon: javascriptLogo,
      href: '../javascript/notifications/overview'
    }
  ]}
/>

----------------------------------------

TITLE: Importing and Rendering Web3Inbox Widget in React
DESCRIPTION: This snippet demonstrates how to import the necessary components from the @web3inbox/widget-react package, use the useManageView hook to open the widget, and render the W3iWidget component with required props.

LANGUAGE: typescript
CODE:
import { W3iWidget, useManageView } from "@web3inbox/widget-react";
import "@web3inbox/widget-react/dist/compiled.css";
...

const { open } = useManageView()
open();

return (
	<W3iWidget
		account="eip155:1:0x..."
		projectId="7a..."
		onSign={yourSignFunction}
		onConnect={connectFunction}
	/>
)

----------------------------------------

TITLE: Importing and Rendering ExplorerSubmission Component in JSX
DESCRIPTION: This code snippet imports the ExplorerSubmission component from a relative path and renders it within the current file. It uses JSX syntax, which is commonly used with React.

LANGUAGE: jsx
CODE:
import ExplorerSubmission from '../../../cloud/explorer-submission.mdx'

<ExplorerSubmission />

----------------------------------------

TITLE: Configuring AppKit Auth Request Parameters - Kotlin
DESCRIPTION: Sets up authentication request parameters for SIWE message creation including chain specifications, domain details, and authorization methods.

LANGUAGE: kotlin
CODE:
val authParams = Modal.Model.AuthPayloadParams(
    chains = ["eip155:1", "eip155:137"],
    domain = "yourDappDomain.com",
    uri = "https://yourDappDomain.com/login",
    nonce = //uniqueNonce,
    statement = "I accept the Terms of Service: https://yourDappDomain.com/",
    methods = ["personal_sign", "eth_sendTransaction"],
    resources = null //// Here your dapp may request authorization with ReCaps
)

----------------------------------------

TITLE: Integrating AppKit with Swift Package Manager Dependencies
DESCRIPTION: Configuration for adding AppKit dependency to Package.swift manifest file. Specifies version constraints and package source URL.

LANGUAGE: swift
CODE:
dependencies: [
  .package(
    name: "AppKit",
    url: "https://github.com/reown-com/reown-swift",
    .upToNextMajor(from: "1.0.0")
  ),

  // Any other dependencies you have...
],

----------------------------------------

TITLE: Configuring Reown AppKit in Vue
DESCRIPTION: Example of how to configure Reown AppKit in a Vue application, replacing Web3Modal configuration.

LANGUAGE: JavaScript
CODE:
const modal = createAppKit({
 adapters: [wagmiAdapter],
 networks: [mainnet, arbitrum],
 metadata: metadata,
 projectId,
 features: {
   analytics: true,
 }
})

----------------------------------------

TITLE: Using AppKit Hooks for Solana Interaction
DESCRIPTION: Code snippet demonstrating the use of AppKit hooks to access wallet and connection information.

LANGUAGE: tsx
CODE:
const { address } = useWeb3ModalAccount()
const { walletProvider, connection } = useWeb3ModalProvider()

----------------------------------------

TITLE: Importing and Rendering Shared Components Documentation in MDX
DESCRIPTION: This code snippet imports a shared components documentation file and renders it within the current MDX file. It uses a custom import statement and a JSX-like syntax to include the shared documentation.

LANGUAGE: jsx
CODE:
import Components from '../../shared/components.mdx'

<Components />

----------------------------------------

TITLE: Flutter Deep Linking Configuration
DESCRIPTION: Additional configuration required for Flutter apps to enable deep linking functionality in iOS.

LANGUAGE: xml
CODE:
<key>FlutterDeepLinkingEnabled</key>
<true/>

----------------------------------------

TITLE: Using AppKit Wallet Button Integration
DESCRIPTION: Implementation of wallet connection buttons using the AppKit Wallet Button library.

LANGUAGE: bash
CODE:
npm i @reown/appkit-wallet-button

LANGUAGE: typescript
CODE:
import { useAppKitWallet } from '@reown/appkit-wallet-button/react'

LANGUAGE: tsx
CODE:
const { isReady, isPending, connect } = useAppKitWallet({
    onSuccess() {
      // ...
    },
    onError(error) {
      // ...
    }
  })

...

// Connect to a wallet
<Button onClick={() => connect("walletConnect")} />

----------------------------------------

TITLE: Using AppKit Wallet Button Component
DESCRIPTION: Example of implementing the wallet button component with MetaMask integration.

LANGUAGE: tsx
CODE:
<appkit-wallet-button wallet="metamask" />

----------------------------------------

TITLE: Creating WalletConnect Pairing in Swift
DESCRIPTION: Creates a new WalletConnect pairing using the AppKit instance. Returns a WalletConnectURI.

LANGUAGE: swift
CODE:
let uri: WalletConnectURI = try await AppKit.instance.createPairing()

----------------------------------------

TITLE: Subscription Operations in TypeScript for Reown Project
DESCRIPTION: This code snippet demonstrates various subscription-related operations using the client object in the Reown project. It includes methods for checking subscription status, subscribing to dapps, unsubscribing, and retrieving subscription information. The snippet also shows how to use these methods with different accounts and dapps.

LANGUAGE: typescript
CODE:
// check if current account is subscribed to current dapp
const isSubscribed = client.isSubscribedToDapp()

// watch if current account is subscribed to current dapp
client.watchIsSubscribed(isSubbed => console.log({ isSubbed }))

// subscribe to current dapp with current account
await client.subscribeToDapp()

// subscribe to same dapp with different account
await client.subscribeToDapp(differentAccount)

// subscribe to different dapp with current account
await client.subscribeToDapp(undefined, differentDomain)

// subscribe to different dapp with different account
await client.subscribeToDapp(differentAccount, differentDomain)

// unsubscribe from current dapp with current account
await client.unsubscribeFromDapp()

// get current account's subscription to current dapp
const subscription = client.getSubscription()

// watch current account's subscription to current dapp
client.watchSubscription(subscription => console.log({ subscription }))

// get current account's subscriptions
const subscriptions = client.getSubscriptions()

// watch current account's subscriptions
client.watchSubscriptions(subscriptions => console.log({ subscriptions }))

----------------------------------------

TITLE: Notification Interface Definition in TypeScript
DESCRIPTION: Defines the TypeScript interface for notification objects, including properties like title, timestamp, body, read status, and utility methods.

LANGUAGE: typescript
CODE:
{
  title: string
  sentAt: number
  body: string
  id: string
  isRead: boolean // since 1.3.0
  url: string | null
  type: string
  read: () => Promise<void> // since 1.3.0
}

----------------------------------------

TITLE: Installing AppKit with Ethers v6 for Vue
DESCRIPTION: npm command to install AppKit with Ethers v6 adapter and related dependencies for Vue projects.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-ethers ethers

----------------------------------------

TITLE: Importing and Rendering ExplorerSubmission Component in MDX
DESCRIPTION: This snippet imports the ExplorerSubmission component from a relative path and renders it within the MDX file. It demonstrates how to include a React component in an MDX document.

LANGUAGE: JSX
CODE:
import ExplorerSubmission from '../../../cloud/explorer-submission.mdx'

<ExplorerSubmission />

----------------------------------------

TITLE: Setting Included Wallet IDs
DESCRIPTION: Shows how to specify an exclusive list of wallets to be displayed in the modal. Only the listed wallet IDs will be shown to users.

LANGUAGE: javascript
CODE:
final Set<String> includedWalletIds = {
  'c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96', // MetaMask
  '4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0', // Trust
  'fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa', // Coinbase Wallet
}

----------------------------------------

TITLE: Marking All Notifications as Read using cURL
DESCRIPTION: This cURL command shows how to mark all notifications as read using the command line. It includes the necessary authorization header and POST method.

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/mark-all-as-read' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'

----------------------------------------

TITLE: Opening On-Ramp Modal with JavaScript
DESCRIPTION: Shows how to programmatically trigger the On-Ramp providers modal using the modal.open() method. This code opens a view that displays available On-Ramp providers to users.

LANGUAGE: javascript
CODE:
modal.open({ view: 'OnRampProviders' })

----------------------------------------

TITLE: Retrieving Subscriber Information with Reown Notify API using JavaScript
DESCRIPTION: Illustrates how to get subscriber information using the Reown Notify API with JavaScript. Includes type definitions for the request and response bodies.

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const requestBody: RequestBody = {
  accounts: [
    'eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029',
    'eip155:1:0x0000000000000000000000000000000000000000'
  ]
}

const response = await fetch(`https://notify.walletconnect.com/v1/${PROJECT_ID}/subscribers`, {
  method: 'POST',
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`
  }
  body: JSON.stringify(requestBody)
})

const subscribers: ResponseBody = await response.json()

type RequestBody = {
  // Max 100 accounts
  accounts: string[]
}
type ResponseBody = {
  [account: string]: Subscriber
}
type Subscriber = {
  notification_types: string[]
}

----------------------------------------

TITLE: Initializing WalletConnect SignClient with Project ID in JavaScript
DESCRIPTION: This snippet demonstrates how to instantiate a WalletConnect SignClient using a project ID. The project ID is used to initialize the client, allowing it to connect to the Relay service.

LANGUAGE: javascript
CODE:
import SignClient from '@walletconnect/sign-client'
const signClient = await SignClient.init({
  projectId: 'c4f79cc821944d9680842e34466bfb'
})

----------------------------------------

TITLE: Session Proposal Handling in JavaScript
DESCRIPTION: Implementation of session proposal handling and redirection back to the dapp after approval.

LANGUAGE: javascript
CODE:
_walletKit!.onSessionProposal.subscribe(_onSessionProposal);
//
void _onSessionProposal(SessionProposalEvent? event) async {
  if (event != null) {
    // Process session proposal
    // ....
    // Redirect back to proposer dapp
    try {
      await _walletKit.redirectToDapp(
        topic: topic,
        redirect: event.params.proposer.metadata.redirect,
      );
    } catch (e) {
      ...
    }
  }
}

----------------------------------------

TITLE: Applying AppKitTheme in Kotlin Compose
DESCRIPTION: This snippet shows how to wrap a composable component with AppKitTheme. It demonstrates setting the theme mode and overriding light and dark colors.

LANGUAGE: kotlin
CODE:
import com.reown.appkit.ui.AppKitTheme

AppKitTheme(
    mode = AppKitTheme.Mode.AUTO || AppKitTheme.Mode.LIGHT || AppKitTheme.Mode.DARK,
    lightColors = AppKitTheme.provideLightAppKitColors(
        // Override colors
    ),
    darkColors = AppKitTheme.provideDarkAppKitColors(
        // Override colors
    )
)    {
    /* any AppKit component or graph */
}

----------------------------------------

TITLE: Handling Session Request Expiry in TypeScript
DESCRIPTION: Demonstrates how to listen for and handle session request expiry events using WalletKit. This helps in removing expired request modals from the UI.

LANGUAGE: typescript
CODE:
walletKit.on("session_request_expire", (event) => {
    // request expired and any modal displaying it should be removed
    const { id } = event;
});

----------------------------------------

TITLE: Monitoring WebSocket Connection State in Swift
DESCRIPTION: Illustrates how to subscribe to the socket connection status publisher to track the WebSocket connection state with the relay server.

LANGUAGE: swift
CODE:
WalletKit.instance.socketConnectionStatusPublisher
    .receive(on: DispatchQueue.main)
    .sink { status in
    switch status {
    case .connected:
        // ...
    case .disconnected:
        // ...
    }
}.store(in: &publishers)

----------------------------------------

TITLE: Monitoring WebSocket Connection State in TypeScript
DESCRIPTION: Shows how to track the WebSocket connection state with the relay server using WalletKit core. It includes handlers for both connect and disconnect events.

LANGUAGE: typescript
CODE:
core.relayer.on("relayer_connect", () => {
    // connection to the relay server is established
})

core.relayer.on("relayer_disconnect", () => {
// connection to the relay server is lost
})

----------------------------------------

TITLE: Implementing AppKit Button Component in React TSX
DESCRIPTION: Example showing how to create a React component that renders the AppKit button web component. The appkit-button is a global HTML element that requires no explicit import.

LANGUAGE: tsx
CODE:
export default function ConnectButton() {
  return <appkit-button />
}

----------------------------------------

TITLE: Implementing Transaction Sending
DESCRIPTION: Functions to create and send a test transaction using Ethers

LANGUAGE: jsx
CODE:
const TEST_TX = {
  to: "0xd8da6bf26964af9d7eed9e03e53415d37aa96045" as Address,
  value: parseUnits('0.0001', 'gwei')
}

LANGUAGE: jsx
CODE:
const handleSendTx = async () => {
    const provider = new BrowserProvider(walletProvider, chainId);
    const signer = new JsonRpcSigner(provider, address)
    const tx = await signer.sendTransaction(TEST_TX);
    console.log(tx);
}

----------------------------------------

TITLE: Handling SIWE Authentication Response in AppKit using Swift
DESCRIPTION: This code snippet shows how to subscribe to the authResponsePublisher in AppKit to check whether the user has successfully signed a SIWE message. It demonstrates handling the authentication response and determining if the user has authenticated.

LANGUAGE: swift
CODE:
AppKit.instance.authResponsePublisher.sink { (id, result) in
    switch result {
    case .success((session, cacaos)):
        // User has authenticated
        ...
    }
}

----------------------------------------

TITLE: Importing AppKit Components in React Native
DESCRIPTION: Instructions for importing AppKit components in a React Native project. These components can be imported from either the wagmi or ethers version of the AppKit package.

LANGUAGE: JavaScript
CODE:
import { AppKitButton, AccountButton, ConnectButton, NetworkButton } from "@reown/appkit-wagmi-react-native"
// or
import { AppKitButton, AccountButton, ConnectButton, NetworkButton } from "@reown/appkit-ethers-react-native"

----------------------------------------

TITLE: Subscription Interface Definition
DESCRIPTION: Defines the TypeScript interface for subscription data, including topic, account, relay information, metadata, scope, expiry, symkey, and unread count.

LANGUAGE: typescript
CODE:
{
  topic: string
  account: string
  relay: relayertypes.protocoloptions
  metadata: Metadata
  scope: ScopeMap
  expiry: number
  symkey: string
  unreadCount: number
}

----------------------------------------

TITLE: Fetching Wallet Listings with HTTP GET
DESCRIPTION: Endpoint to retrieve paginated wallet listings from the cloud explorer. Supports filtering by platforms, chains, SDKs and other parameters. Requires a valid project ID.

LANGUAGE: http
CODE:
GET https://explorer-api.walletconnect.com/v3/wallets?projectId=YOUR_PROJECT_ID&entries=5&page=1

----------------------------------------

TITLE: Configuring Excluded Wallets in AppKit
DESCRIPTION: Shows how to specify which wallets should be excluded when fetching from WalletGuide using wallet IDs.

LANGUAGE: csharp
CODE:
await AppKit.InitializeAsync(new AppKitConfig
{
    excludedWalletIds = new []
    {
        "c57ca95...74e97267d96",
    }
});

----------------------------------------

TITLE: Processing WalletKit Push Notifications in React Native
DESCRIPTION: This snippet demonstrates how to process incoming WalletKit push notifications in a React Native app. It includes decrypting the message, handling metadata, and preparing for local notification display.

LANGUAGE: typescript
CODE:
import { WalletKit } from '@reown/walletkit';
import messaging from '@react-native-firebase/messaging';

messaging().onMessage(async notification => {
    // get the topic, encrypted message & tag from the notification payload
    const { topic, message, tag } = notification.data;

    // decrypt the message
    // note this is static method and can be called without initializing the walletKit
    const decryptedMessage = await WalletKit.notifications.decryptMessage({
    topic,
    encryptedMessage: message,
  });

    /*
    * `decryptedMessage` is JsonRpcRequest object, with the full payload of the incoming request such as method, params, id, etc.
    * You can use it to emit local push notification with the request to the user and ask for their approval.
    */

   /*
   * the metadata contains name, description, icon and url of the dapp that initiated the request
   * note that only notifications with tag `1108`(session requests) will have metadata,
   */
   let metadata

   if(tag == 1108) {
        metadata = await WalletKit.notifications.getMetadata({ topic });
   } else {
        // session proposals contain metadata in the request itself
        metadata = decryptedMessage.params.proposer.metadata
   }

    // with this information you can show a local push notification to the user
   ...
});

----------------------------------------

TITLE: Handling Session Requests in ReownWalletKit
DESCRIPTION: Demonstrates two methods for handling session requests: using request handlers or subscribing to onSessionRequest events.

LANGUAGE: javascript
CODE:
final supportedChains = ['eip155:1', 'eip155:137'];
Map<String, dynamic Function(String, dynamic)> supportedMethods = {
  'personal_sign': _personalSignHandler,
  'eth_sendTransaction': _ethSendTransactionHandler,
};
for (var chainId in supportedChains) {
  for (var method in supportedMethods.entries) {
    _walletKit.registerRequestHandler(
      chainId: chainId,
      method: method.key,
      handler: method.value,
    );
  }
}

Future<void> _personalSignHandler(String topic, dynamic params) async {
  final id = _walletKit.pendingRequests.getAll().first;

  // message should arrive encoded
  final decoded = hex.decode(params.first.substring(2));
  final message = utf8.decode(decoded);

  // display a prompt for the user to approve or reject the request
  // if approved
  if (approved) {
    // Your code to sign the message here
    final signature = ...

    return _walletKit.respondSessionRequest(
      topic: topic,
      response: JsonRpcResponse(
        id: id,
        jsonrpc: '2.0',
        result: signature,
      ),
    );
  }
  // if rejected
  return _walletKit.respondSessionRequest(
    topic: topic,
    response: JsonRpcResponse(
      id: id,
      jsonrpc: '2.0',
      error: const JsonRpcError(code: 5001, message: 'User rejected method'),
    ),
  );
}

----------------------------------------

TITLE: Creating Authentication Payloads in TypeScript
DESCRIPTION: Shows how to create and populate authentication payloads with supported chains and methods, and format authentication messages.

LANGUAGE: typescript
CODE:
import { populateAuthPayload } from "@walletconnect/utils";

// Solana chains that your wallet supports
const supportedChains = [ "solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp", "solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ" ]
// Solana methods that your wallet supports
const supportedMethods = ["solana_signMessage", "solana_signTransaction"];
// Populate the authentication payload with the supported chains and methods
const authPayload = populateAuthPayload({
  authPayload: payload.params.authPayload,
  chains: supportedChains,
  methods: supportedMethods,
});
// Prepare the user's address in CAIP10(https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md) format
const iss = `solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp:8nJ694gNrHx76L2eyJzQw7JBGRoW8Fdtrxf588pEqyYh`;
// Now you can use the authPayload to format the authentication message
const message = walletKit.formatAuthMessage({
  request: authPayload,
  iss
});

// Present the authentication message to the user
...

----------------------------------------

TITLE: Using WalletConnectRouter for Automatic Redirection in iOS
DESCRIPTION: This Swift code demonstrates how to use the WalletConnectRouter to automatically redirect users back to the DApp after interacting with a wallet via a deep link. It shows the approval process and the redirection logic.

LANGUAGE: swift
CODE:
import WalletConnectRouter

try await Sign.instance.approve(proposalId: <proposalId>, namespaces: <namespaces>)

if let uri = proposal.proposer.redirect?.native {
    WalletConnectRouter.goBack(uri: uri)
} else {
    // Inform the user to manually return to the DApp
}

----------------------------------------

TITLE: Subscribing to Pairing State in Swift
DESCRIPTION: Shows how to subscribe to the pairing state publisher to handle UI updates based on the pairing process. It uses Combine to manage the subscription.

LANGUAGE: swift
CODE:
WalletKit.instance.pairingStatePublisher
    .receive(on: DispatchQueue.main)
    .sink { [weak self] isPairing in
    self?.showPairingLoading = isPairing
}.store(in: &disposeBag)

----------------------------------------

TITLE: Sending Notification with Reown Notify API using JavaScript
DESCRIPTION: Demonstrates how to send a notification using the Reown Notify API with JavaScript. It includes setting up the project ID and API secret, constructing the request body, and making a POST request to the notify endpoint.

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const response = await fetch(`https://notify.walletconnect.com/${PROJECT_ID}/notify`, {
  method: 'POST',
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    notification: {
      type: 'a1e53b95-18e5-4af8-9f03-9308ec87b687',
      title: 'The price of Ethereum has risen',
      body: 'The price of Ethereum has gone up 10%',
      url: 'https://app.example.com'
    },
    accounts: ['eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029']
  })
})

----------------------------------------

TITLE: Using useWalletInfo Hook with Wagmi in React Native
DESCRIPTION: Demonstrates how to use the useWalletInfo hook from the @reown/appkit-wagmi-react-native package to get metadata information from the connected wallet.

LANGUAGE: typescript
CODE:
import { useWalletInfo } from '@reown/appkit-wagmi-react-native'

const { walletInfo } = useWalletInfo()

----------------------------------------

TITLE: Configuring Wrapper Component with Platform Options
DESCRIPTION: JSX implementation of the Wrapper component configured with multiple platform options for WalletKit integration, including Web, Android, iOS, React Native, and Flutter.

LANGUAGE: jsx
CODE:
<Wrapper
  type="large"
  fit={false}
  items={[
    {
      name: 'Web',
      type: 'javascript',
      description: 'Get started with WalletKit in Web.',
      icon: javascriptLogo,
      href: '../web/one-click-auth'
    },
    {
      name: 'Android',
      type: 'android',
      description: 'Get started with WalletKit in Android.',
      icon: androidLogo,
      href: '../android/one-click-auth'
    },
    {
      name: 'iOS',
      type: 'ios',
      description: 'Get started with WalletKit in iOS.',
      icon: iosLogo,
      href: '../ios/one-click-auth',
      isWhite: true
    },
    {
      name: 'React Native',
      type: 'react-native',
      description: 'Get started with WalletKit in React Native.',
      icon: rnLogo,
      href: '../react-native/one-click-auth'
    },
    {
      name: 'Flutter',
      type: 'flutter',
      description: 'Get started with WalletKit in Flutter.',
      icon: flutterLogo,
      href: '../flutter/one-click-auth'
    }
  ]}
/>

----------------------------------------

TITLE: Implementing Balance Check Function
DESCRIPTION: Function to fetch and display wallet balance in SOL using Solana connection object

LANGUAGE: javascript
CODE:
const handleGetBalance = async () => {
    const wallet = new PublicKey(address);
    const balance = await connection?.getBalance(wallet);
    console.log(`${balance / LAMPORTS_PER_SOL} SOL`);
}

----------------------------------------

TITLE: Emitting Session Events in JavaScript
DESCRIPTION: Shows how to emit session events, such as 'accountsChanged' and 'chainChanged', using the WalletKit. This is useful for updating the dapp about changes in the wallet's state.

LANGUAGE: javascript
CODE:
await walletKit.emitSessionEvent({
  topic,
  event: {
    name: 'accountsChanged',
    data: ['0xab16a96D359eC26a11e2C2b3d8f8B8942d5Bfcdb']
  },
  chainId: 'eip155:1'
})

await walletKit.emitSessionEvent({
  topic,
  event: {
    name: 'chainChanged',
    data: 1
  },
  chainId: 'eip155:1'
})

----------------------------------------

TITLE: Defining Notification Scope Map Type in TypeScript
DESCRIPTION: This snippet defines a TypeScript type 'ScopeMap' which represents a record of notification scopes. Each scope has a name, description, and enabled status.

LANGUAGE: typescript
CODE:
type ScopeMap = Record<
  string,
  {
    name: string
    description: string
    enabled: boolean
  }
>

----------------------------------------

TITLE: Configuring Included Wallets in AppKit
DESCRIPTION: Demonstrates how to specify which wallets should be included when fetching from WalletGuide. Accepts an array of wallet IDs to prioritize in the displayed order.

LANGUAGE: csharp
CODE:
await AppKit.InitializeAsync(new AppKitConfig
{
    includedWalletIds = new []
    {
        "c57ca95...74e97267d96",
    }
});

----------------------------------------

TITLE: Fetching Subscription Notifications with Notify API in JavaScript
DESCRIPTION: Retrieves the notification history for a given account.

LANGUAGE: javascript
CODE:
const notifications = notifyClient.getNotificationHistory(account)

----------------------------------------

TITLE: Approving Authentication Requests in Swift
DESCRIPTION: This snippet shows how to approve an authentication request using WalletKit. It takes a request ID and an array of authentication objects, and returns a session if successful.

LANGUAGE: swift
CODE:
let session = try await WalletKit.instance.approveSessionAuthenticate(requestId: requestId, auths: authObjects)

----------------------------------------

TITLE: Approving Session in WalletKit with TypeScript
DESCRIPTION: Demonstrates how to approve a session proposal using WalletKit, including error handling and UI update suggestions.

LANGUAGE: typescript
CODE:
try {
    await walletKit.approveSession(params);
    // update UI -> remove the loader
} catch (error) {
    // present error to the user
}

----------------------------------------

TITLE: Initializing WalletKit Core Client in C#
DESCRIPTION: Creates and initializes a Core instance with project ID and metadata configuration

LANGUAGE: csharp
CODE:
var options = new CoreOptions()
{
    ProjectId = "...",
    Name = "my-app",
}

var core = new CoreClient(options);

----------------------------------------

TITLE: Rejecting Authentication Requests in TypeScript
DESCRIPTION: Shows how to reject authentication requests with appropriate error handling.

LANGUAGE: typescript
CODE:
import { getSdkError } from '@walletconnect/utils'

await walletKit.rejectSessionAuthenticate({
  id: payload.id,
  reason: getSdkError('USER_REJECTED') // or choose a different reason if applicable
})

----------------------------------------

TITLE: Creating Custom Account Presenter in C#
DESCRIPTION: This C# class extends the base AccountPresenter to add custom functionality, including a new OpenSea button.

LANGUAGE: csharp
CODE:
public class CustomAccountPresenter : AccountPresenter
{
    public CustomAccountPresenter(RouterController router, VisualElement parent) : base(router, parent)
    {
    }

    protected override void CreateButtons(VisualElement buttonsListView)
    {
        CreateOpenSeaButton(buttonsListView);

        base.CreateButtons(buttonsListView);
    }

    private void CreateOpenSeaButton(VisualElement buttonsListView)
    {
        var openSeaIcon = Resources.Load<Sprite>("OpenSea Logo");
        var openSeaButton = new ListItem(
            "OpenSea",
            openSeaIcon,
            OnOpenSeaButtonClick,
            iconType: ListItem.IconType.Circle,
            iconStyle: ListItem.IconStyle.Accent);

        Buttons.Add(openSeaButton);
        buttonsListView.Add(openSeaButton);
    }

    private void OnOpenSeaButtonClick()
    {
        var address = AppKit.AccountController.Address;
        var url = $"https://opensea.io/{address}";
        Application.OpenURL(url);
    }
}

----------------------------------------

TITLE: Session Proposal Response Handling
DESCRIPTION: Kotlin implementation for handling session proposal responses in a wallet application, including deep link redirection logic.

LANGUAGE: kotlin
CODE:
 WalletKit.approveSession(approveProposal,
        onSuccess = {
            // trigger deeplink: proposal.redirect
    }
)

----------------------------------------

TITLE: Example Deep Link and Universal Link URLs for WalletConnect
DESCRIPTION: These example URLs demonstrate the format for deep links and universal links used in WalletConnect integration. They show how the wallet URI is included in the link for establishing a connection.

LANGUAGE: bash
CODE:
# For deep links
examplewallet://wc?uri=wc:94caa59c77dae0dd234b5818fb7292540d017b27d41f7f387ee75b22b9738c94@2?relay-protocol=irn&symKey=ce3a2c7724c03cf1769ba8b1bdedad5414cc7b920aa3fb72112b997d1916266f

# For universal links
https://example.wallet/wc?uri=wc:94caa59c77dae0dd234b5818fb7292540d017b27d41f7f387ee75b22b9738c94@2?relay-protocol=irn&symKey=ce3a2c7724c03cf1769ba8b1bdedad5414cc7b920aa3fb72112b997d1916266f

----------------------------------------

TITLE: Manual WebSocket Connection Configuration in Swift
DESCRIPTION: Configuration for manual websocket connection handling including connection type setting and control methods.

LANGUAGE: swift
CODE:
Networking.configure(projectId: <String>, socketFactory: SocketFactory(), socketConnectionType: .manual)

LANGUAGE: swift
CODE:
try Networking.instance.connect()

LANGUAGE: swift
CODE:
try Networking.instance.disconnect()

----------------------------------------

TITLE: Disconnecting from AppKit - Kotlin
DESCRIPTION: Implements the disconnect functionality with success and error callbacks.

LANGUAGE: kotlin
CODE:
AppKit.disconnect(
    onSuccess = {
    /* callback that letting you know that you have successfully disconnected */
    },
    onError = { error ->
    /* callback for error while trying to disconnection with a peer */
    }
)

----------------------------------------

TITLE: Using useAppKit Hook with Wagmi in React Native
DESCRIPTION: Demonstrates how to use the useAppKit hook from the @reown/appkit-wagmi-react-native package to control the modal in a React Native component.

LANGUAGE: typescript
CODE:
import { useAppKit } from '@reown/appkit-wagmi-react-native'

export default function Component() {
  const { open, close } = useAppKit()

  open()

  //...
}

----------------------------------------

TITLE: Signature Verification with Viem
DESCRIPTION: Implementation of SIWE signature verification using the Viem library. This approach is recommended over the built-in verifySignature function for compatibility with social logins and non-deployed smart accounts.

LANGUAGE: typescript
CODE:
import { createPublicClient, http } from 'viem'

const publicClient = createPublicClient(
  {
    transport: http(
      `https://rpc.walletconnect.org/v1/?chainId=${chainId}&projectId=${projectId}`
    )
  }
);
const isValid = await publicClient.verifyMessage({
  message,
  address: address as `0x${string}`,
  signature: signature as `0x${string}`
});

----------------------------------------

TITLE: Creating a Connection Function for WalletConnect in JavaScript
DESCRIPTION: Define a function to handle the connection process when a user scans a WalletConnect QR code or manually enters a URI. This function initiates the pairing process with the dapp.

LANGUAGE: javascript
CODE:
const onConnect = async (uri: string) => {
  // call walletKit.core.pairing.pair( { uri: uri })
  // with the uri received from the dapp in order to emit the
  // `session_proposal` event
  const result = await walletKit.core.pairing.pair({ uri })
}

----------------------------------------

TITLE: Installing Bitcoin Dependencies
DESCRIPTION: NPM installation command for Bitcoin-based AppKit implementation.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-bitcoin

----------------------------------------

TITLE: Installing Additional Dependencies for React Native
DESCRIPTION: This command installs various packages to support async storage, polyfills, SVGs, and other functionalities in a React Native project using Reown. These packages enhance the compatibility and feature set of the application.

LANGUAGE: bash
CODE:
yarn add @ethersproject/shims@5.7.0 @react-native-async-storage/async-storage react-native-get-random-values react-native-svg react-native-modal @react-native-community/netinfo @walletconnect/react-native-compat

----------------------------------------

TITLE: Rendering Send Transaction Button Component
DESCRIPTION: Implements a button component that triggers the transaction with paymaster service when clicked.

LANGUAGE: typescript
CODE:
return (
  <Button
    onClick={onSendCalls}
    disabled={!sendCalls}
  >
    SendCalls w/ Paymaster Service
  </Button>
)

----------------------------------------

TITLE: Rendering Bitcoin Wallet Function Buttons in React
DESCRIPTION: JSX code to render buttons for various Bitcoin wallet functions when the user is connected.

LANGUAGE: jsx
CODE:
return (
    isConnected && (
    <div >
        <button onClick={handleSignMsg}>Sign Message</button>  
        <button onClick={handleSendTx}>Send Transaction</button>  
        <button onClick={handleGetBalance}>Get Balance</button>  
        <button onClick={handleGetPublicKey}>Get Public Key</button>  
    </div>
    )
  )

----------------------------------------

TITLE: Setting Preset Theme Shortcuts for ReownAppKitModal in Flutter
DESCRIPTION: Demonstrates how to use preset theme shortcuts like square or circular radiuses in ReownAppKitModalThemeData.

LANGUAGE: javascript
CODE:
final _themeData = ReownAppKitModalThemeData(
  lightColors: ReownAppKitModalColors.lightMode.copyWith(
    accent100: Colors.red,
    background125: Colors.yellow.shade300,
  ),
  darkColors: ReownAppKitModalColors.darkMode.copyWith(
    accent100: Colors.green,
    background125: Colors.brown,
  ),
  // No corner radius, modal will look square, use ReownAppKitModalRadiuses.circular to make everything circular
  radiuses: ReownAppKitModalRadiuses.square,
);

----------------------------------------

TITLE: Extending a Session in ReownWalletKit
DESCRIPTION: Extends the duration of an existing session using the extendSession method.

LANGUAGE: javascript
CODE:
await _walletKit.extendSession(topic: 'topic')

----------------------------------------

TITLE: Registering Device Token with WalletKit in Swift
DESCRIPTION: Implementation of device token registration in AppDelegate for encrypted push notifications using WalletKit's registration method.

LANGUAGE: swift
CODE:
func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
    Task(priority: .high) {
        try await WalletKit.instance.register(deviceToken: deviceToken, enableEncrypted: true)
    }
}

----------------------------------------

TITLE: Structuring Notifications API Documentation
DESCRIPTION: This snippet shows the structure of the API documentation using markdown and JSX components. It outlines various sections of the API including initialization, account management, subscription management, and event listening.

LANGUAGE: JSX
CODE:
# API

## Initialization

<Initialization/>

## Managing Account

### Setting account for web3inbox

<SettingAccount/>

### Registering an account

<Registering/>

## Managing Subscription

<Managing/>

## Managing Notifications

<ManagingNotifications/>

## Notification Types

<Types/>

## Registering for Device Push Notifications

<RegisteringPush/>

## Listening For Events

<Events/>

----------------------------------------

TITLE: Rendering Platform-Specific Tabs in React
DESCRIPTION: This snippet demonstrates the usage of PlatformTabs and PlatformTabItem components to create a tabbed interface for iOS, Android, and web platforms. It includes links to platform-specific documentation and sample app builds.

LANGUAGE: jsx
CODE:
<PlatformTabs
	groupId="w3iw"
	activeOptions={["ios", "android", "web"]}
>

<PlatformTabItem value="web">
- [React Native](../../../walletkit/react-native/notifications/notify/installation)

</PlatformTabItem>

<PlatformTabItem value="ios">

- [Swift](../../../walletkit/ios/notifications/notify/installation)
- [Testflight](https://testflight.apple.com/join/09bTAryp)

</PlatformTabItem>

<PlatformTabItem value="android">

- [Kotlin](../../../walletkit/android/notifications/notify/installation)
- [Firebase](https://appdistribution.firebase.dev/i/d2c86e879abd5a86)

</PlatformTabItem>
</PlatformTabs>

----------------------------------------

TITLE: Installing WalletKit Dependencies with npm/yarn
DESCRIPTION: Command to install WalletKit and its required WalletConnect dependencies using npm or yarn package managers. Installs @reown/walletkit along with @walletconnect/utils and @walletconnect/core packages.

LANGUAGE: bash
CODE:
npm install @reown/walletkit @walletconnect/utils @walletconnect/core

----------------------------------------

TITLE: Web Socket Connection Control in Kotlin
DESCRIPTION: Implementation of manual websocket connection control in Android using CoreClient.

LANGUAGE: kotlin
CODE:
CoreClient.initialize(projectId = projectId, connectionType = ConnectionType.MANUAL, application = application)

CoreClient.Relay.connect() { error -> /*Error when wrong connection type is in use*/}

CoreClient.Relay.disconnect() { error -> /*Error when wrong connection type is in use*/}

----------------------------------------

TITLE: Importing AppKit Wallet Button Library
DESCRIPTION: Import statement to include the AppKit wallet button library in a React project.

LANGUAGE: tsx
CODE:
import '@reown/appkit-wallet-button/react'

----------------------------------------

TITLE: ENS Provider Header
DESCRIPTION: A markdown header indicating ENS Provider functionality

LANGUAGE: markdown
CODE:
# ENS Provider

----------------------------------------

TITLE: Provider Method Interfaces
DESCRIPTION: Type definitions and implementation for making JSON RPC requests through the provider

LANGUAGE: typescript
CODE:
interface RequestArguments {
  method: string;
  params?: any[] | undefined;
}

// Send JSON RPC requests

/**
 * @param payload
 * @param chain - optionally specify which chain should handle this request
 * in the format `<namespace>:<chainId>` e.g. `eip155:1`
 */
const result = await provider.request(payload: RequestArguments, chain: string | undefined);

----------------------------------------

TITLE: WalletConnect Text Style Variables
DESCRIPTION: CSS variables for fine-tuning text styles including size, weight, line height, letter spacing, and text transformation for different text variants in the WalletConnect interface.

LANGUAGE: css
CODE:
--w3m-text-big-bold-size: 2rem;
--w3m-text-big-bold-weight: bold;
--w3m-text-big-bold-line-height: 14px;
--w3m-text-big-bold-letter-spacing: 1px;
--w3m-text-big-bold-text-transform: uppercase;
--w3m-text-big-bold-font-family: Helvetica, sans-serif;
--w3m-text-medium-regular-size: 1rem;
--w3m-text-medium-regular-weight: normal;
--w3m-text-medium-regular-line-height: 14px;
--w3m-text-medium-regular-letter-spacing: 1px;
--w3m-text-medium-regular-text-transform: capitalize;
--w3m-text-medium-regular-font-family: Arial, sans-serif;
--w3m-text-small-regular-size: 0.75rem;
--w3m-text-small-regular-weight: normal;
--w3m-text-small-regular-line-height: 14px;
--w3m-text-small-regular-letter-spacing: 1px;
--w3m-text-small-regular-text-transform: capitalize;
--w3m-text-small-regular-font-family: Helvetica, sans-serif;
--w3m-text-small-thin-size: 0.65rem;
--w3m-text-small-thin-weight: lighter;
--w3m-text-small-thin-line-height: 0.8rem;
--w3m-text-small-thin-letter-spacing: 0.01em;
--w3m-text-small-thin-text-transform: none;
--w3m-text-small-thin-font-family: Arial, sans-serif;
--w3m-text-xsmall-bold-size: 0.5rem;
--w3m-text-xsmall-bold-weight: bold;
--w3m-text-xsmall-bold-line-height: 10px;
--w3m-text-xsmall-bold-letter-spacing: -0.03em;
--w3m-text-xsmall-bold-text-transform: uppercase;
--w3m-text-xsmall-bold-font-family: Arial, sans-serif;
--w3m-text-xsmall-regular-size: 0.5rem;
--w3m-text-xsmall-regular-weight: normal;
--w3m-text-xsmall-regular-line-height: 10px;
--w3m-text-xsmall-regular-letter-spacing: 0.1em;
--w3m-text-xsmall-regular-text-transform: none;
--w3m-text-xsmall-regular-font-family: Helvetica, sans-serif;

----------------------------------------

TITLE: Using AppKit Account Hook in React Native
DESCRIPTION: Hook that retrieves client account information including wallet address, chain ID, and connection status from AppKit.

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from '@reown/appkit-ethers5-react-native'

function Components() {
  const { address, chainId, isConnected } = useAppKitAccount()

  //...
}

----------------------------------------

TITLE: Updating App Component for AppKit Integration
DESCRIPTION: Changes required in the main App component to integrate AppKit, including import updates and AppKit initialization.

LANGUAGE: tsx
CODE:
import '../styles/globals.css';
/* highlight-delete-start */
- import '@rainbow-me/rainbowkit/styles.css';
/* highlight-delete-end */

import type { AppProps } from 'next/app';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';

/* highlight-delete-start */
- import { WagmiProvider } from 'wagmi';
- import { config } from '../wagmi';
/* highlight-delete-end */
/* highlight-add-start */
+ import { wagmiAdapter, projectId } from '@/config'
/* highlight-add-end */

/* highlight-delete-start*/
- import { RainbowKitProvider } from '@rainbow-me/rainbowkit';
/* highlight-delete-end */
/* highlight-add-start */
+ import { createAppKit } from "@reown/appkit/react"
/* highlight-add-end */

const client = new QueryClient()

/* highlight-add-start */
// Set up metadata
const metadata = {
  //this is optional
  name: 'appkit-example',
  description: 'AppKit Example',
  url: 'https://exampleapp.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/37784886']
}
/* highlight-add-end */

/* highlight-add-start */
// Create modal
const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})
/* highlight-add-end */

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={client}>
        /* highlight-delete-start */
        <RainbowKitProvider>
          /* highlight-delete-end */
          <Component {...pageProps} />
          /* highlight-delete-start */
        </RainbowKitProvider>
        /* highlight-delete-end */
      </QueryClientProvider>
    </WagmiProvider>
  )
}

----------------------------------------

TITLE: Android Intent Filter Configuration for Deep Linking
DESCRIPTION: XML configuration for AndroidManifest.xml to enable deep linking functionality for a wallet application. Defines intent filters for handling custom URI schemes.

LANGUAGE: xml
CODE:
<intent-filter>
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data android:scheme="examplewallet" /> <!-- your own custom scheme -->
</intent-filter>

----------------------------------------

TITLE: Defining Session Namespaces in JavaScript
DESCRIPTION: This code snippet illustrates the structure of session namespaces that comply with the requested proposal namespaces. It includes additional access to chains, methods, and events not originally requested in the proposal.

LANGUAGE: javascript
CODE:
{
  "eip155": {
    "accounts": [
      "eip155:137:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb",
      "eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb"
    ],
    "methods": ["eth_sign"],
    "events": ["accountsChanged"]
  },
  "cosmos": {
    "accounts": [
      "cosmos:cosmoshub-4:cosmos1t2uflqwqe0fsj0shcfkrvpukewcw40yjj6hdc0"
    ],
    "methods": ["cosmos_signDirect", "personal_sign"],
    "events": ["someCosmosEvent", "proofFinalized"]
  }
}

----------------------------------------

TITLE: Importing Networks for Reown AppKit in JavaScript
DESCRIPTION: This snippet shows how to import various network configurations from Reown AppKit's networks module. It demonstrates importing mainnet, arbitrum, base, scroll, and polygon networks, which are based on Viem networks.

LANGUAGE: javascript
CODE:
import { createAppKit } from '@reown/appkit'
/* highlight-add-start */
import { mainnet, arbitrum, base, scroll, polygon } from '@reown/appkit/networks'
/* highlight-add-end */

----------------------------------------

TITLE: Implementing AppKit Modal Actions in JavaScript
DESCRIPTION: This JavaScript snippet shows how to add event listeners to custom buttons to open the AppKit modal programmatically. It uses the modal.open() method to trigger the modal, with an optional parameter to open the Networks view.

LANGUAGE: javascript
CODE:
// Trigger modal programaticaly
// Add this code inside `main.js` file at the end of the code file
const openConnectModalBtn = document.getElementById('open-connect-modal')
const openNetworkModalBtn = document.getElementById('open-network-modal')

openConnectModalBtn.addEventListener('click', () => modal.open())
openNetworkModalBtn.addEventListener('click', () => modal.open({ view: 'Networks' }))

----------------------------------------

TITLE: Updating Index Page Component
DESCRIPTION: Replacing ConnectKit button component with Reown AppKit's w3m-button in the main page component.

LANGUAGE: tsx
CODE:
import type { NextPage } from 'next';

const Home: NextPage = () => {
  return (
    <div
      style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        height: '100vh',
      }}
    >
      <w3m-button />
    </div>
  );
};

export default Home;

----------------------------------------

TITLE: Adding WalletKit Dependencies in Gradle
DESCRIPTION: Dependency declarations for WalletKit core and SDK packages in the app-level build.gradle.kts file.

LANGUAGE: gradle
CODE:
implementation("com.reown:android-core:release_version")
implementation("com.reown:walletkit:release_version")

----------------------------------------

TITLE: Configuring AppKit Client with AuthRequestParams for SIWE in Swift
DESCRIPTION: This snippet demonstrates how to configure the AppKit client with AuthRequestParams, which are required for creating a SIWE message for user authentication. It includes an example of creating a stub AuthRequestParams object with customizable parameters.

LANGUAGE: swift
CODE:
AppKit.configure(
    ...
    authRequestParams: authRequestParams,
    ...
)

LANGUAGE: swift
CODE:
extension AuthRequestParams {
    static func stub(
        domain: String = "yourDappDomain.com",
        chains: [String] = ["eip155:1", "eip155:137"],
        nonce: String = "uniqueNonce",
        uri: String = "https://yourDappDomain.com/login",
        statement: String? = "I accept the Terms of Service: https://yourDappDomain.com/tos",
        resources: [String]? = nil, // Here your dapp may request authorization with ReCaps
        methods: [String]? = ["personal_sign", "eth_sendTransaction"]
    ) -> AuthRequestParams {
        return try! AuthRequestParams(
            domain: domain,
            chains: chains,
            nonce: nonce,
            uri: uri,
            statement: statement,
            resources: resources,
            methods: methods
        )
    }
}

----------------------------------------

TITLE: Handling Session Proposal Expiry
DESCRIPTION: Implementation of WalletDelegate to handle session proposal expiry events.

LANGUAGE: kotlin
CODE:
val walletDelegate = object : WalletKit.WalletDelegate {
    override fun onProposalExpired(proposal: Wallet.Model.ExpiredProposal) {
            //Here this event is triggered when a proposal expires - update your UI
    }
    ...other callbacks
}
WalletKit.setWalletDelegate(walletDelegate)

----------------------------------------

TITLE: Initializing and Connecting Universal Provider
DESCRIPTION: Example showing how to initialize the Universal Provider with project configuration and connect to chains with specific namespaces

LANGUAGE: typescript
CODE:
import UniversalProvider from '@walletconnect/universal-provider'

//  Initialize the provider
const provider = await UniversalProvider.init({
  projectId: 'YOUR_PROJECT_ID',
  metadata: {
    name: 'React App',
    description: 'React App for WalletConnect',
    url: 'https://walletconnect.com/',
    icons: ['https://avatars.githubusercontent.com/u/37784886']
  },
  client: undefined // optional instance of @walletconnect/sign-client
})

//  create sub providers for each namespace/chain
await provider.connect({
  optionalNamespaces: {
    eip155: {
      methods: [
        'eth_sendTransaction',
        'eth_signTransaction',
        'eth_sign',
        'personal_sign',
        'eth_signTypedData'
      ],
      chains: ['eip155:80001'],
      events: ['chainChanged', 'accountsChanged'],
      rpcMap: {
        80001:
          'https://rpc.walletconnect.com?chainId=eip155:80001&projectId=<your walletconnect project id>'
      }
    }
  },
  pairingTopic: '<123...topic>', // optional topic to connect to
  skipPairing: false // optional to skip pairing ( later it can be resumed by invoking .pair())
})

----------------------------------------

TITLE: Installing AppKit Wallet Button Package
DESCRIPTION: Command to install the AppKit wallet button package using npm or yarn.

LANGUAGE: bash
CODE:
npm i @reown/appkit-wallet-button

----------------------------------------

TITLE: Retrieving All Subscribers with Reown Notify API using JavaScript
DESCRIPTION: Shows how to retrieve all subscribers using the Reown Notify API with JavaScript. It includes setting up the project ID and API secret, and sending a GET request to the subscribers endpoint.

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const response = await fetch(`https://notify.walletconnect.com/${PROJECT_ID}/subscribers`, {
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`
  }
})
const subscribers: string[] = await response.json()

----------------------------------------

TITLE: Sending Tezos Transactions using JSON-RPC
DESCRIPTION: This snippet shows how to use the tezos_send method to send Tezos transactions. It includes parameters for the signing account and operations to be performed. The method returns the operation hash of the submitted transaction.

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "tezos_send",
    "params": {
        "account": "tz1VQA4RP4fLjEEMW2FR4pE9kAg5abb5h5GL",
        "operations": [
            {
                "kind": "transaction";
                "amount": "1";
                "destination": "tz1VQA4RP4fLjEEMW2FR4pE9kAg5abb5h5GL";
            }
        ]
    }
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result":  {
        "operationHash": "op..."
    }
}

----------------------------------------

TITLE: Implementing Solana Context with WalletConnect
DESCRIPTION: React component that sets up the Solana wallet context with WalletConnect integration. Includes configuration for the WalletConnect adapter with project ID and network settings.

LANGUAGE: typescript
CODE:
import { ReactNode, useMemo, useState } from 'react'
import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react'
import { WalletAdapterNetwork } from '@solana/wallet-adapter-base'
import { WalletModalProvider } from '@solana/wallet-adapter-react-ui'
import { clusterApiUrl } from '@solana/web3.js'

import '@solana/wallet-adapter-react-ui/styles.css'

import { WalletConnectWalletAdapter } from '@walletconnect/solana-adapter'

export const SolanaContext = ({ children }: { children: ReactNode }) => {
	const endpoint = useMemo(() => clusterApiUrl(WalletAdapterNetwork.Mainnet), [])

	const wallets = useMemo(
		() => [
			new WalletConnectWalletAdapter({
				network: WalletAdapterNetwork.Mainnet,
				options: {
					projectId: 'YOUR_PROJECT_ID',
				},
			}),
		],
		// eslint-disable-next-line react-hooks/exhaustive-deps
		[],
	)

	return (
		<ConnectionProvider endpoint={endpoint}>
			<WalletProvider wallets={wallets} autoConnect>
				<WalletModalProvider>
					{children}
				</WalletModalProvider>
			</WalletProvider>
		</ConnectionProvider>
	)

----------------------------------------

TITLE: Opening On-Ramp Modal with AppKit in JavaScript
DESCRIPTION: Demonstrates how to programmatically open the On-Ramp providers modal using the AppKit hook. Uses the useAppKit hook to access the open function and triggers the OnRampProviders view.

LANGUAGE: javascript
CODE:
const { open } = useAppKit()

open({ view: 'OnRampProviders' })

----------------------------------------

TITLE: Integrating AppKit Button Component in HTML
DESCRIPTION: This HTML snippet shows how to include the AppKit button component in a basic HTML document structure. The <appkit-button> element is added to the body, allowing users to open the AppKit interface. A script tag is also included to load additional JavaScript functionality.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>HTML Example</title>
  </head>
  <body>
    /* highlight-add-start */
    <appkit-button></appkit-button>
    /* highlight-add-end */
    <script type="module" src="main.js"></script>
  </body>
</html>

----------------------------------------

TITLE: Registering for Subscriptions in Android
DESCRIPTION: Set up a delegate to handle subscription events in Android.

LANGUAGE: kotlin
CODE:
val walletDelegate = object : NotifyClient.Delegate {

    override fun onNotifySubscription(notifySubscribe: Notify.Event.Subscription) {
        // Handle new subscription
    }

    override fun onNotifyMessage(notifyMessage: Notify.Event.Message) {
        // Handle incoming message
    }

    override fun onNotifyDelete(notifyDelete: Notify.Event.Delete) {
        // Handle subscription deletion
    }

    override fun onNotifyUpdate(notifyUpdate: Notify.Event.Update) {
        // Handle subscription update
    }

    override fun onError(error: Notify.Model.Error) {
        // Handle error
    }
}

NotifyClient.setDelegate(walletDelegate)

----------------------------------------

TITLE: Initializing WalletConnectModal for Web
DESCRIPTION: Imports the WalletConnectModal package and initializes it with a project ID and chain configuration.

LANGUAGE: javascript
CODE:
import { WalletConnectModal } from '@walletconnect/modal'

const modal = new WalletConnectModal({
  projectId: 'YOUR_PROJECT_ID',
  chains: ['eip155:1']
})

----------------------------------------

TITLE: Defining SignMessageParams Type in TypeScript
DESCRIPTION: This snippet defines the SignMessageParams type used for signing messages. It includes the message to be signed and the address to sign with.

LANGUAGE: typescript
CODE:
export type SignMessageParams = {
  /**
   * The message to be signed
   */
  message: string
  /**
   * The address to sign the message with
   */
  address: string
}

----------------------------------------

TITLE: Defining ScopeMap Type for Notification Types in TypeScript
DESCRIPTION: This snippet defines the ScopeMap type, which represents a record of notification types. Each notification type has a name, description, and enabled status. This type is used to structure the data returned by the getNotificationTypes function.

LANGUAGE: typescript
CODE:
type ScopeMap = Record<
  string,
  {
    name: string
    description: string
    enabled: boolean
  }
>

----------------------------------------

TITLE: Updating Imports in Dart for WalletKit
DESCRIPTION: This code snippet demonstrates how to update the import statement from walletconnect_flutter_v2 to reown_walletkit in Dart files.

LANGUAGE: dart
CODE:
/* highlight-delete-start */
import 'package:walletconnect_flutter_v2/walletconnect_flutter_v2.dart';
/* highlight-delete-end */
/* highlight-add-start */
import 'package:reown_walletkit/reown_walletkit.dart';
/* highlight-add-end */

----------------------------------------

TITLE: Defining Custom Wallet Array in TypeScript
DESCRIPTION: This code snippet demonstrates the structure for defining an array of custom desktop or web-based wallets. Each wallet object includes an id, name, and links for native and universal access. Native links are for deeplinking, while universal links are for web redirection.

LANGUAGE: typescript
CODE:
desktopWallets: [
  {
    id: string,
    name: string,
    links: {
      native: string
      universal: string,
    },
  },
];

----------------------------------------

TITLE: Configuring MacOS Network Permissions for WalletKit
DESCRIPTION: XML configuration required in DebugProfile.entitlements and Release.entitlements files to enable WebSocket server connectivity for MacOS applications.

LANGUAGE: xml
CODE:
<key>com.apple.security.network.client</key>
<true/>

----------------------------------------

TITLE: EVM Balance and Signing Operations
DESCRIPTION: Methods for checking balances and signing messages on EVM-compatible chains.

LANGUAGE: csharp
CODE:
BigInteger balance = await AppKit.EVM.GetBalanceAsync("0x123...");

LANGUAGE: csharp
CODE:
// Sign a string message
string signature = await AppKit.EVM.SignMessageAsync("Hello World");

// Sign raw bytes
byte[] rawMessage = System.Text.Encoding.UTF8.GetBytes("Hello World");
string signature = await AppKit.EVM.SignMessageAsync(rawMessage);

// Sign with specific address (optional)
string signature = await AppKit.EVM.SignMessageAsync("Hello World", "0x123...");

----------------------------------------

TITLE: Rendering Swaps Component
DESCRIPTION: Shows the MDX syntax for rendering the imported Swaps component within the document.

LANGUAGE: mdx
CODE:
<Swaps/>

----------------------------------------

TITLE: Installing WalletConnect Notify Client for Web
DESCRIPTION: Install the WalletConnect Notify Client package using npm or yarn.

LANGUAGE: bash
CODE:
npm install @walletconnect/notify-client

----------------------------------------

TITLE: Fetching Hybrid Listings with HTTP GET
DESCRIPTION: Endpoint to retrieve paginated hybrid listings from the public cloud explorer. Requires a valid project ID.

LANGUAGE: http
CODE:
GET https://explorer-api.walletconnect.com/v3/hybrid?projectId=YOUR_PROJECT_ID&entries=5&page=1

----------------------------------------

TITLE: Initializing WalletConnect SignClient with Custom Relay URL
DESCRIPTION: Configuration example showing how to initialize a WalletConnect SignClient with a custom relay URL when the default endpoint is blocked. Requires a project ID and metadata configuration.

LANGUAGE: javascript
CODE:
const signClient = await SignClient.init({
  projectId: '<YOUR PROJECT ID>',
  relayUrl: 'wss://relay.walletconnect.org',
  metadata: {}
})

----------------------------------------

TITLE: Importing Components for Notifications API Documentation
DESCRIPTION: This snippet imports necessary components and MDX files for structuring the API documentation. It includes tabs, cloud banner, and various sections of the API documentation.

LANGUAGE: JavaScript
CODE:
import Tabs from '@theme/Tabs'
import TabItem from '@theme/TabItem'
import CloudBanner from '../../../../components/CloudBanner'

import Initialization from '../../../shared/notifications/frontend-integration/api/initialization/javascript.mdx'
import SettingAccount from '../../../shared/notifications/frontend-integration/api/setting-account/javascript.mdx'
import Registering from '../../../shared/notifications/frontend-integration/api/registering-accounts/javascript.mdx'
import Managing from '../../../shared/notifications/frontend-integration/api/managing-subscription/javascript.mdx'
import ManagingNotifications from '../../../shared/notifications/frontend-integration/api/managing-notifications/javascript.mdx'
import Types from '../../../shared/notifications/frontend-integration/api/types/javascript.mdx'
import RegisteringPush from '../../../shared/notifications/frontend-integration/api/registering-push/javascript.mdx'
import Events from '../../../shared/notifications/frontend-integration/api/events/javascript.mdx'

----------------------------------------

TITLE: Importing SIWX Default Component in MDX
DESCRIPTION: This snippet demonstrates how to import a shared MDX component for SIWX default usage instructions. The component is likely to contain detailed information about implementing SIWX with default settings.

LANGUAGE: MDX
CODE:
import SiwxDefault from '../../shared/siwx/siwx-default.mdx'

----------------------------------------

TITLE: Creating Pairing URI for Dapp on iOS
DESCRIPTION: Swift code for generating a pairing URI in a dapp on iOS.

LANGUAGE: swift
CODE:
let uri = try await Pair.instance.create()

----------------------------------------

TITLE: Configuring WalletConnect Core for C#
DESCRIPTION: Code snippet for creating metadata and configuring the WalletConnect Core instance in C#.

LANGUAGE: csharp
CODE:
var metadata = new Metadata()
{
    Name = "my-app",
    Description = "My app description",
    Icons = new[] { "https://walletconnect.com/meta/favicon.ico" },
    Url = "https://walletconnect.com",
}

var options = new CoreOptions()
{
    ProjectId = "...",
    Name = "my-app",
}

var core = new WalletConnectCore(options);
core.Pairing.Configure(metadata);

----------------------------------------

TITLE: Signing and Submitting Stellar XDR Transaction
DESCRIPTION: This method sends a Stellar transaction encoded as XDR to the wallet for signing and submission to the Stellar network. It handles multisig accounts and returns the transaction status.

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "stellar_signAndSubmitXDR",
  "params": {
    "xdr": "AAAAAPewD+/6X8o0bx3bp49Wf+mUhG3o+TUrcjcst717DWJVAAAAyAFvzscADTkNAAAAAAAAAAAAAAACAAAAAAAAAAYAAAACWE1BVEsAAAAAAAAAAAAAAAPvNOuztX4IjvV8pztsEc1/ZnTz0G3p5Cx4vcf04+xUAAONfqTGgAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAD2NyeXB0b21hcmluZS5ldQAAAAAAAAAAAAAAAAF7DWJVAAAAQK3vfUCZ8mbjW3ssMd0n1tJTF9Fv6EbuJ6cWKkYXBqG5itqanPbFzIQoZEHbPS8nr2vo4dROvKI0uQzNcfExKwM="
  }
}

// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": {
    "status": "success"
  }
}

----------------------------------------

TITLE: Initializing Web3Inbox Client in TypeScript
DESCRIPTION: This function initializes the Web3Inbox client with configuration options. It requires a projectId and optionally accepts domain, allApps, and logLevel parameters. The projectId is obtained from Reown Cloud, while other parameters control access permissions and logging verbosity.

LANGUAGE: typescript
CODE:
initWeb3inboxClient({ projectId, domain, allApps, logLevel })

----------------------------------------

TITLE: Importing CloudBanner and useBaseUrl in JavaScript
DESCRIPTION: Imports the CloudBanner component and useBaseUrl function from specific paths. These are likely used for rendering cloud-related UI elements and handling base URLs in a documentation framework.

LANGUAGE: javascript
CODE:
import CloudBanner from '../../../components/CloudBanner'
import useBaseUrl from '@docusaurus/useBaseUrl'

----------------------------------------

TITLE: Pairing Wallet with Dapp in C#
DESCRIPTION: C# code for pairing a wallet with a dapp using a URI string.

LANGUAGE: csharp
CODE:
var uri = "...";
PairingStruct pairingData = await core.Pairing.Pair(uri);

----------------------------------------

TITLE: Installing WalletConnect Core SDK for Android
DESCRIPTION: Steps to add the WalletConnect Core SDK to an Android project using Gradle.

LANGUAGE: gradle
CODE:
allprojects {
 repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
 }
}

LANGUAGE: gradle
CODE:
implementation("com.walletconnect:android-core:release_version")

----------------------------------------

TITLE: Signing and Sending Solana Transactions
DESCRIPTION: Method to sign and submit a transaction to the Solana network with configurable send options. Returns the transaction signature as an ID.

LANGUAGE: typescript
CODE:
{
	"id": 1,
	"jsonrpc": "2.0",
	"method": "solana_signAndSendTransaction",
	"params": {
    "transaction": "string",
    "sendOptions": {
	    "skipPreflight"?: "boolean",
	    "preflightCommitment"?: "'processed' | 'confirmed' | 'finalized' | 'recent' | 'single' | 'singleGossip' | 'root' | 'max'",
	    "maxRetries"?: "number",
	    "minContextSlot"?: "number"
    }
	}
}

----------------------------------------

TITLE: Initializing AppKit with SIWE Configuration in TypeScript
DESCRIPTION: This code snippet shows how to initialize AppKit with the SIWE configuration. It imports the siweConfig and adds it to the createAppKit function.

LANGUAGE: typescript
CODE:
import { siweConfig } from './siweConfig.ts'

createAppKit({
  //...
  /* highlight-add-start */
  siweConfig
  /* highlight-add-end */
})

----------------------------------------

TITLE: Account Management Operations
DESCRIPTION: Functions for handling user accounts including retrieval and disconnection.

LANGUAGE: csharp
CODE:
// Get active account in CAIP-10 format
Account account = AppKit.GetAccountAsync();

Debug.Log(account.Address); // e.g. '0x12345...'
Debug.Log(account.ChainId); // e.g. 'eip155:1'
Debug.Log(account.AccountId); // e.g. 'eip155:1:0x12345...'

LANGUAGE: csharp
CODE:
await AppKit.DisconnectAsync();

----------------------------------------

TITLE: Setting Up FCM Notification Listeners in React Native
DESCRIPTION: This code sets up listeners for Firebase Cloud Messaging notifications in a React Native app. It handles both foreground and background notifications.

LANGUAGE: typescript
CODE:
import messaging from '@react-native-firebase/messaging';

// emitted when the app is open and a notification is received
messaging().onMessage(async notification => {
    ...
});

// emitted when the app is in the background or closed and a notification is received
messaging().setBackgroundMessageHandler(async notification => {
    ...
});

----------------------------------------

TITLE: Defining RequestBody Type for Notify API in TypeScript
DESCRIPTION: Defines the TypeScript interface for the request body when sending notifications using the Reown Notify API. It includes fields for notification_id, notification details, and recipient accounts.

LANGUAGE: typescript
CODE:
type RequestBody = {
  notification_id?: string | null
  notification: {
    type: string
    title: string
    body: string
    url?: string | null
  }
  accounts: string[]
}

----------------------------------------

TITLE: Signing Stellar XDR Transaction
DESCRIPTION: This method sends a Stellar transaction encoded as XDR to the wallet for signing. The wallet signs the transaction and returns the signed XDR without submitting it to the network.

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "stellar_signXDR",
  "params": {
    "xdr": "AAAAAPewD+/6X8o0bx3bp49Wf+mUhG3o+TUrcjcst717DWJVAAAAyAFvzscADTkNAAAAAAAAAAAAAAACAAAAAAAAAAYAAAACWE1BVEsAAAAAAAAAAAAAAAPvNOuztX4IjvV8pztsEc1/ZnTz0G3p5Cx4vcf04+xUAAONfqTGgAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAD2NyeXB0b21hcmluZS5ldQAAAAAAAAAAAAAAAAF7DWJVAAAAQK3vfUCZ8mbjW3ssMd0n1tJTF9Fv6EbuJ6cWKkYXBqG5itqanPbFzIQoZEHbPS8nr2vo4dROvKI0uQzNcfExKwM="
  }
}

// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": {
    "signedXDR": "AAAAAPewD+/6X8o0bx3bp49Wf+mUhG3o+TUrcjcst717DWJVAAAAyAFvzscADTkNAAAAAAAAAAAAAAACAAAAAAAAAAYAAAACWE1BVEsAAAAAAAAAAAAAAAPvNOuztX4IjvV8pztsEc1/ZnTz0G3p5Cx4vcf04+xUAAONfqTGgAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAD2NyeXB0b21hcmluZS5ldQAAAAAAAAAAAAAAAAF7DWJVAAAAQK3vfUCZ8mbjW3ssMd0n1tJTF9Fv6EbuJ6cWKkYXBqG5itqanPbFzIQoZEHbPS8nr2vo4dROvKI0uQzNcfExKwM="
  }
}

----------------------------------------

TITLE: Approving Authentication Requests in TypeScript
DESCRIPTION: Demonstrates two approaches for approving authentication requests: single signature and multiple signatures for different chains.

LANGUAGE: typescript
CODE:
// Approach 1
// Sign the authentication message(s) to create a verifiable authentication object(s)
const signature = await cryptoWallet.signMessage(message, privateKey)
// Build the authentication object(s)
const auth = buildAuthObject(
  authPayload,
  {
    t: 'caip122',
    s: signature
  },
  iss
)

// Approve
await walletKit.approveSessionAuthenticate({
  id: payload.id,
  auths: [auth]
})

// Approach 2
// Note that you can also sign multiple messages for every requested chain/address pair
const auths = []
authPayload.chains.forEach(async chain => {
  const message = walletKit.formatAuthMessage({
    request: authPayload,
    iss: `${chain}:${cryptoWallet.address}`
  })
  const signature = await cryptoWallet.signMessage(message)
  const auth = buildAuthObject(
    authPayload,
    {
      t: 'caip122', // signature type
      s: signature
    },
    `${chain}:${cryptoWallet.address}`
  )
  auths.push(auth)
})

// Approve
await walletKit.approveSessionAuthenticate({
  id: payload.id,
  auths
})

----------------------------------------

TITLE: Using SIWX Cloud Auth Component in JSX
DESCRIPTION: This snippet shows how to use the imported SIWX Cloud Auth component within a JSX file. The component is self-closing, indicating it likely renders the necessary UI and functionality for SIWX authentication.

LANGUAGE: jsx
CODE:
<SiwxCloudAuth />

----------------------------------------

TITLE: Example Response for Subscriber Information in JSONC
DESCRIPTION: Shows an example response from the Reown Notify API when retrieving subscriber information. The response includes the subscribed account and its notification types.

LANGUAGE: jsonc
CODE:
{
  "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029": {
    "notification_types": ["4d1c97ad-c182-4097-8f2c-8f80c0674df2"]
  }
}

----------------------------------------

TITLE: Authentication Payload Configuration in TypeScript
DESCRIPTION: Shows how to configure and populate authentication payloads with supported chains and methods, and format authentication messages.

LANGUAGE: typescript
CODE:
import { populateAuthPayload } from "@walletconnect/utils";

// EVM chains that your wallet supports
const supportedChains = ["eip155:1", "eip155:2", 'eip155:137'];
// EVM methods that your wallet supports
const supportedMethods = ["personal_sign", "eth_sendTransaction", "eth_signTypedData"];
// Populate the authentication payload with the supported chains and methods
const authPayload = populateAuthPayload({
  authPayload: payload.params.authPayload,
  chains: supportedChains,
  methods: supportedMethods,
});
// Prepare the user's address in CAIP10(https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md) format
const iss = `eip155:1:0x0Df6d2a56F90e8592B4FfEd587dB3D5F5ED9d6ef`;
// Now you can use the authPayload to format the authentication message
const message = walletKit.formatAuthMessage({
  request: authPayload,
  iss
});

// Present the authentication message to the user
...

----------------------------------------

TITLE: Android Gradle Configuration
DESCRIPTION: Gradle configuration for installing WalletConnectModal in Android applications.

LANGUAGE: gradle
CODE:
implementation(platform("com.walletconnect:android-bom:$BOM_VERSION"))
implementation("com.walletconnect:android-core")
implementation("com.walletconnect:walletconnect-modal")

----------------------------------------

TITLE: Rendering SIWX Default Component in MDX
DESCRIPTION: This snippet shows how to render the imported SIWX default usage component within the MDX file. This will display the default SIWX implementation instructions to the user.

LANGUAGE: MDX
CODE:
<SiwxDefault />

----------------------------------------

TITLE: Handling Pairing Expiry
DESCRIPTION: Implementation of CoreDelegate to handle pairing expiry events in WalletKit.

LANGUAGE: kotlin
CODE:
val coreDelegate = object : CoreClient.CoreDelegate {
    override fun onPairingExpired(expiredPairing: Core.Model.ExpiredPairing) {
        //Here a pairing expiry is triggered
    }
    ...other callbacks
}

CoreClient.setDelegate(coreDelegate)

----------------------------------------

TITLE: Implementing WebSocketFactory with Starscream in Swift
DESCRIPTION: Basic implementation of WebSocketFactory using Starscream v3 library for websocket connections.

LANGUAGE: swift
CODE:
import Starscream

extension WebSocket: WebSocketConnecting { }

struct SocketFactory: WebSocketFactory {
    func create(with url: URL) -> WebSocketConnecting {
        return WebSocket(url: url)
    }
}

----------------------------------------

TITLE: Retrieving Tezos Accounts using JSON-RPC
DESCRIPTION: This snippet demonstrates how to use the tezos_getAccounts method to retrieve an array of available Tezos accounts. The method returns account data including the signing algorithm, address, and public key.

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "tezos_getAccounts",
    "params": {}
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result":  [
        {
            "algo": "ed25519",
            "address": "tz1VQA4RP4fLjEEMW2FR4pE9kAg5abb5h5GL",
            "pubkey": "edpku4US3ZykcZifjzSGFCmFr3zRgCKndE82estE4irj4d5oqDNDvf"
        }
    ]
}

----------------------------------------

TITLE: Android Wallet Detection Configuration
DESCRIPTION: XML configuration for enabling installed wallet detection on Android devices through manifest queries.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <queries>
        <package android:name="io.metamask"/>
        <package android:name="com.wallet.crypto.trustapp"/>
        <package android:name="io.gnosis.safe"/>
        <package android:name="me.rainbow"/>
        <!-- Add other wallet schemes names here -->
    </queries>

    <application>
        ...
    </application>
</manifest>

----------------------------------------

TITLE: Subscribing to Session-specific Events in JavaScript
DESCRIPTION: This code snippet shows how to subscribe to session-specific events including session expiration, update, and general session events. These events are only available through the WalletConnect protocol and won't be triggered for Coinbase Wallet or Email/Social Login connections.

LANGUAGE: javascript
CODE:
_appKitModal.onSessionExpireEvent.subscribe((SessionExpire? event) {});

_appKitModal.onSessionUpdateEvent.subscribe((SessionUpdate? event) {});

_appKitModal.onSessionEventEvent.subscribe((SessionEvent? event) {});

----------------------------------------

TITLE: Triggering Modal in React
DESCRIPTION: Example of how to trigger the modal in a React component using Reown AppKit.

LANGUAGE: tsx
CODE:
import { useAppKit } from '@reown/appkit/react'

function HomePage() {
  const { open } = useAppKit()

  return <button onClick={open}>Connect</button>
}

----------------------------------------

TITLE: Defining Theme Mode Type in TypeScript for AppKit
DESCRIPTION: This code snippet defines a TypeScript type for the theme mode of AppKit. It specifies that the theme mode can be either 'dark' or 'light', which allows for type-safe control of the application's appearance.

LANGUAGE: typescript
CODE:
themeMode: 'dark' | 'light'

----------------------------------------

TITLE: Switching Networks with AppKit in React
DESCRIPTION: This snippet demonstrates how to create an AppKit instance with specific configurations and switch to a different network. It utilizes the createAppKit function and specifies adapters, networks, and features.

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit/react'
import { mainnet, arbitrum, polygon } from '@reown/appkit/networks'

const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    analytics: true,
  }
})

modal.switchNetwork(polygon)

----------------------------------------

TITLE: Retrieving Subscriber Information with Reown Notify API using cURL
DESCRIPTION: Shows how to get subscriber information using the Reown Notify API with a cURL command. Includes the necessary headers and JSON payload.

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/subscribers' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029",
      "eip155:1:0x0000000000000000000000000000000000000000"
    ]
  }'

----------------------------------------

TITLE: Subscribing to Ethereum Provider Events in TypeScript
DESCRIPTION: Examples of subscribing to various events emitted by the Ethereum Provider.

LANGUAGE: typescript
CODE:
// chain changed
provider.on('chainChanged', handler)
// accounts changed
provider.on('accountsChanged', handler)
// session established
provider.on('connect', handler)
// session event - chainChanged/accountsChanged/custom events
provider.on('session_event', handler)
// connection uri
provider.on('display_uri', handler)
// session disconnected from the wallet - this won't be called when the disconnect function is called from the dapp.
provider.on('disconnect', handler)

----------------------------------------

TITLE: Flutter Deep Link Handler Implementation
DESCRIPTION: Implementation of Deep Link handling in Flutter for Phantom Wallet support.

LANGUAGE: javascript
CODE:
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:reown_appkit/modal/i_appkit_modal_impl.dart';

class DeepLinkHandler {
  static const _eventChannel = EventChannel('com.exampledapp/events');
  static late IReownAppKitModal _appKitModal;

  static void init(IReownAppKitModal appKitModal) {
    if (kIsWeb) return;

    try {
      _appKitModal = appKitModal;
      _eventChannel.receiveBroadcastStream().listen(_onLink, onError: _onError);
    } catch (e) {
      debugPrint('[SampleDapp] checkInitialLink $e');
    }
  }

  static void _onLink(dynamic link) async {
    try {
      _appKitModal.dispatchEnvelope(link);
    } catch (e) {
      print(e);
    }
  }

  static void _onError(dynamic error) {
    print(error);
  }
}

----------------------------------------

TITLE: Controlling Theme with useAppKitTheme in Vue
DESCRIPTION: Shows how to use the useAppKitTheme composable to control the modal's theme, including setting theme mode and variables.

LANGUAGE: typescript
CODE:
import { useAppKitTheme } from '@reown/appkit/vue'
const themeAction = useAppKitTheme()
// or 
// const { setThemeMode, setThemeVariables } = useAppKitTheme()

LANGUAGE: typescript
CODE:
setThemeMode('dark')


setThemeVariables({
  '--w3m-color-mix': '#00BB7F',
  '--w3m-color-mix-strength': 40
})

----------------------------------------

TITLE: Session Rejection Implementation
DESCRIPTION: Demonstrates implementation of session rejection with success and error handling.

LANGUAGE: kotlin
CODE:
WalletKit.rejectSession(reject,
    onSuccess = {
        //Session rejection response was sent successfully - update your UI
    },
    onError = { error ->
          //Error while sending session rejection - update your UI
    })

----------------------------------------

TITLE: Integrating AppKit Button Component in HTML
DESCRIPTION: This snippet shows how to include the AppKit button component in an HTML document. It demonstrates the basic structure of an HTML file with the <appkit-button> element and a reference to a JavaScript module.

LANGUAGE: tsx
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>HTML AppKit Example</title>
  </head>
  <body>
    <appkit-button />
    <script type="module" src="main.js"></script>
  </body>
</html>

----------------------------------------

TITLE: Configuring AppKit Theme Variables in TypeScript
DESCRIPTION: This snippet demonstrates how to override AppKit's default CSS styles by setting custom theme variables. It shows examples of changing the font family and accent color. Additional theme variables can be set using the same pattern.

LANGUAGE: typescript
CODE:
themeVariables: {
  "--w3m-font-family": "Roboto, sans-serif",
  "--w3m-accent-color": "#F5841F",
  // ...
};

----------------------------------------

TITLE: Handling Incoming App Links in Kotlin
DESCRIPTION: This code snippet shows how to handle incoming app links in your Android application. It extracts the URL from the intent and passes it to WalletKit for processing.

LANGUAGE: kotlin
CODE:
val url = intent.dataString
WalletKit.dispatchEnvelope(url) { error -> 
    //handle error
}

----------------------------------------

TITLE: Initializing WalletKit in JavaScript
DESCRIPTION: Update the initialization code to use WalletKit instead of Web3Wallet. This step ensures that the new WalletKit package is properly initialized in the application.

LANGUAGE: javascript
CODE:
await WalletKit.init()

----------------------------------------

TITLE: Sending a Dogecoin Transfer
DESCRIPTION: Example of using the sendTransfer method to transfer 1.23 DOGE (123000000 Satoshi) with an optional memo.

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "sendTransfer",
    "params": {
        "account": "DTyt9wHTgizR8CwK8HAsWDaoMMxcaRuLWJ",
        "recipient": "DBcZSePDaMMduBMLymWHXhkE5ArFEvkagU",
        "amount": "123000000",
        "memo": "636861726c6579206c6f766573206865"
    }
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "txid": "f007551f169722ce74104d6673bd46ce193c624b8550889526d1b93820d725f7"
    }
}

----------------------------------------

TITLE: Rendering React Player Component with Custom Styling
DESCRIPTION: JSX code block demonstrating how to render a ReactPlayer component with centered alignment using flexbox styling.

LANGUAGE: jsx
CODE:
<div style={{
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
}}>
<ReactPlayer url={useBaseUrl('/img/EVM.mp4')} playing loop width="100%" height="100%"/>
</div>

----------------------------------------

TITLE: Disconnecting WalletConnect Session in Swift
DESCRIPTION: Disconnects from a WalletConnect session using the specified topic.

LANGUAGE: swift
CODE:
try await AppKit.instance.disconnect(topic: topic)

----------------------------------------

TITLE: Switching Networks with AppKit in Vue
DESCRIPTION: This code snippet shows how to create an AppKit instance with specific networks and switch to a different network. It demonstrates the configuration of adapters, project ID, networks, and features for the AppKit instance.

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit/vue'
import { mainnet, arbitrum, polygon } from '@reown/appkit/networks'

const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    analytics: true,
  }
})

modal.switchNetwork(polygon)

----------------------------------------

TITLE: Triggering Modal in JavaScript/Vue
DESCRIPTION: Example of how to trigger the modal in JavaScript or Vue using Reown AppKit.

LANGUAGE: js
CODE:
document.getElementById('my-button').addEventListener('click', () => {
    modal.open()
})

<button id="my-button">Connect Wallet</button>

----------------------------------------

TITLE: Importing and Rendering Analytics Component in MDX
DESCRIPTION: Imports an Analytics component from a relative path and renders it using JSX syntax within an MDX document.

LANGUAGE: mdx
CODE:
---
title: Analytics
---

import Analytics from '../../../cloud/analytics.mdx'

<Analytics />

----------------------------------------

TITLE: Importing AppKit Components
DESCRIPTION: React/Next.js component imports for the AppKit documentation page including Container, Wrapper, Button, and W3MQuickStart components.

LANGUAGE: javascript
CODE:
import Container from '../components/Container.js'
import Wrapper from '../components/Home/Wrapper.js'
import Button from '../components/button/index.js'
import W3MQuickStart from '../components/W3MQuickStart.js'

----------------------------------------

TITLE: Handling Coinbase Wallet Deep Links in SwiftUI (Swift)
DESCRIPTION: This snippet demonstrates how to handle Coinbase Wallet deep links in a SwiftUI application. It shows the use of the onOpenURL modifier to process incoming URLs.

LANGUAGE: swift
CODE:
WindowGroup {
  YourView()
      .onOpenURL { url in
          AppKit.instance.handleDeeplink(url)
      }
}

----------------------------------------

TITLE: Defining Theme Mode Enum in Kotlin
DESCRIPTION: This Kotlin snippet defines an enum class for theme modes in Compose, including LIGHT, DARK, and AUTO options.

LANGUAGE: kotlin
CODE:
enum class Mode {
    LIGHT, DARK, AUTO
}

----------------------------------------

TITLE: Updating Configuration Method for WalletKit
DESCRIPTION: Replace Web3Wallet.configure() with WalletKit.configure() in Swift code for library configuration.

LANGUAGE: swift
CODE:
/* highlight-delete-start */
- Web3Wallet.configure(
-   ...
- )
/* highlight-delete-end */
/* highlight-add-start */
+ WalletKit.configure(
+   ...
+ )
/* highlight-add-end */

----------------------------------------

TITLE: Configuring AppKit Target Dependencies in Swift Package Manager
DESCRIPTION: Target configuration in Package.swift to specify AppKit as a dependency for a specific target.

LANGUAGE: swift
CODE:
.target(
  name: "MyTargetName",
  dependencies: [
    // The product(s) you want (most likely AppKit).
    .product(name: "AppKit", package: "AppKit"),
  ]
),

----------------------------------------

TITLE: Implementing NotifyMessageService for Android
DESCRIPTION: Implement the NotifyMessageService to handle push notifications in Android.

LANGUAGE: kotlin
CODE:
class CustomFirebaseService: NotifyMessageService() {

    override fun newToken(token: String) {
        // Handle new token
    }

    override fun registeringFailed(token: String, throwable: Throwable) {
        // Handle registration failure
    }

    override fun onMessage(message: Notify.Model.Message, originalMessage: RemoteMessage) {
        // Handle incoming message
    }

    override fun onDefaultBehavior(message: RemoteMessage) {
        // Handle default behavior
    }

    override fun onError(throwable: Throwable, defaultMessage: RemoteMessage) {
        // Handle error
    }
}

----------------------------------------

TITLE: Handling WalletConnect Session Requests in JavaScript
DESCRIPTION: Manage incoming session requests from dapps, specifically for Polkadot message and transaction signing. This example demonstrates how to validate the request, sign the payload, and respond to the dapp with the signature.

LANGUAGE: javascript
CODE:
walletKit.on('session_request', async requestEvent => {
  const { params, id } = requestEvent
  const { request } = params
  const address = request.params?.address

  // check that the request address is in your users list of wallets
  // Example:
  const wallet = getPolkadotWallet(address) //

  if (!wallet) {
    throw new Error('Polkadot wallet does not exist')
  }

  // handle supported methods (polkadot_signMessage, polkadot_signTransaction)
  switch (request.method) {
    case 'polkadot_signMessage':
      // call function used by wallet to sign message and return the signature
      const signature = await yourwallet.signMessage(request.params.message)

      // create the response containing the signature in the result
      const response = { id, result: { signature: signature }, jsonrpc: '2.0' }

      // respond to the dapp request with the response and topic
      await walletKit.respondSessionRequest({ topic, response })

    case 'polkadot_signTransaction':
      // call function used by wallet to sign transactions and return the signature
      const signature = await yourwallet.signTransaction(request.params.transactionPayload)

      // create the response containing the signature in the result
      const response = { id, result: { signature: signature }, jsonrpc: '2.0' }

      // respond to the dapp request with the response and topic
      await walletKit.respondSessionRequest({ topic, response })

    // throw error for methods your wallet doesn't support
    default:
      throw new Error(getSdkError('INVALID_METHOD').message)
  }
})

----------------------------------------

TITLE: Defining Token Symbol to Logo Mapping in TypeScript
DESCRIPTION: This code snippet defines an object that maps token symbols to their corresponding logo image file paths. It includes mappings for ETH (Ethereum) and AVAX (Avalanche) tokens. This configuration can be used to easily retrieve the correct logo for a given token symbol in a cryptocurrency-related application.

LANGUAGE: typescript
CODE:
tokenImages: {
  ETH: "/images/eth.webp",
  AVAX: "/images/avax.webp",
};

----------------------------------------

TITLE: Example Parameters for eth_signTypedData in Ethereum JSON-RPC
DESCRIPTION: This snippet provides an example of the parameters required for the eth_signTypedData method, including complex nested objects for types, domain, and message.

LANGUAGE: javascript
CODE:
[
  '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
  {
    types: {
      EIP712Domain: [
        {
          name: 'name',
          type: 'string'
        },
        {
          name: 'version',
          type: 'string'
        },
        {
          name: 'chainId',
          type: 'uint256'
        },
        {
          name: 'verifyingContract',
          type: 'address'
        }
      ],
      Person: [
        {
          name: 'name',
          type: 'string'
        },
        {
          name: 'wallet',
          type: 'address'
        }
      ],
      Mail: [
        {
          name: 'from',
          type: 'Person'
        },
        {
          name: 'to',
          type: 'Person'
        },
        {
          name: 'contents',
          type: 'string'
        }
      ]
    },
    primaryType: 'Mail',
    domain: {
      name: 'Ether Mail',
      version: '1',
      chainId: 1,
      verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC'
    },
    message: {
      from: {
        name: 'Cow',
        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826'
      },
      to: {
        name: 'Bob',
        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB'
      },
      contents: 'Hello, Bob!'
    }
  }
]

----------------------------------------

TITLE: Implementing Domain Verification in Wallet Authentication
DESCRIPTION: Code example showing how to handle domain verification using the verifyContext object in wallet authentication requests. It demonstrates handling different validation states (VALID, INVALID, UNKNOWN) and malicious domain detection through the isScam flag.

LANGUAGE: javascript
CODE:
walletKit.on("auth_request", async (authRequest) => {
  const { verifyContext } = authRequest
  const validation = verifyContext.verified.validation // can be VALID, INVALID or UNKNOWN
  const origin = verifyContext.verified.origin // the actual verified origin of the request
  const isScam = verifyContext.verified.isScam // true if the domain is flagged as malicious

  // if the domain is flagged as malicious, you should warn the user as they may lose their funds - check the `Threat` case for more info
  if(isScam) {
    // show a warning screen to the user
    // and proceed only if the user accepts the risk
  }

  switch(validation) {
    case "VALID":
      // proceed with the request - check the `Domain match` case for more info
      break
    case "INVALID":
      // show a warning dialog to the user - check the `Mismatch` case for more info
      // and proceed only if the user accepts the risk
      break
    case "UNKNOWN":
      // show a warning dialog to the user - check the `Unverified` case for more info
      // and proceed only if the user accepts the risk
      break
  }
})

----------------------------------------

TITLE: Disconnecting a Session in ReownWalletKit
DESCRIPTION: Initiates a session disconnect and optionally removes the pairing topic.

LANGUAGE: javascript
CODE:
await _walletKit.disconnectSession(
  topic: session.topic,
  reason: Errors.getSdkError(Errors.USER_DISCONNECTED).toSignError(),
);

// Optional: Remove pairing topic
await _walletKit.core.pairing.disconnect(
  topic: pairing.topic,
);

----------------------------------------

TITLE: Installing Reown AppKit for Vue
DESCRIPTION: Command to install Reown AppKit and its dependencies for a Vue project, replacing Web3Modal.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue

----------------------------------------

TITLE: Importing Platform Tab Components in React
DESCRIPTION: Imports for platform-specific tab components used to display different implementation options for iOS, Android, and web platforms.

LANGUAGE: jsx
CODE:
import PlatformTabs from '../../../components/PlatformTabs'
import PlatformTabItem from '../../../components/PlatformTabItem'

----------------------------------------

TITLE: Configuring Babel for React Native CLI
DESCRIPTION: Babel configuration for React Native CLI environment to resolve crypto-related dependencies.

LANGUAGE: javascript
CODE:
module.exports = {
  presets: ['module:metro-react-native-babel-preset'],
  plugins: [
   [
     'module-resolver',
     {
       alias: {
         'crypto': 'react-native-quick-crypto',
         'stream': 'stream-browserify',
         'buffer': '@craftzdog/react-native-buffer',
       },
     },
   ],
    ...
  ],
};

----------------------------------------

TITLE: Chain Abstraction Type Definitions
DESCRIPTION: Type definitions used in chain abstraction methods including FundingFrom, Transaction, CanFulfilResponse, and FulfilmentStatusResponse types.

LANGUAGE: typescript
CODE:
namespace ChainAbstractionTypes {
  type FundingFrom = {
    tokenContract: string;
    amount: string;
    chainId: string;
    symbol: string;
  };

  type Transaction = {
    from: string;
    to: string;
    value: string;
    chainId: string;
    gas?: string;
    gasPrice?: string;
    data?: string;
    nonce?: string;
    maxFeePerGas?: string;
    maxPriorityFeePerGas?: string;
  };

  type CanFulfilResponse =
    | {
        status: "not_required";
      }
    | {
        status: "available";
        data: {
          fulfilmentId: string;
          checkIn: number;
          transactions: Transaction[];
          funding: FundingFrom[];
        };
      }
    | {
        status: "error";
        reason: string; // reason can be insufficientFunds | insufficientGasFunds | noRoutesAvailable
      };

  type FulfilmentStatusResponse = {
    createdAt: number;
  } & (
    | {
        status: "completed";
      }
    | { status: "pending"; checkIn: number }
  );
}

----------------------------------------

TITLE: Subscribing to Provider Changes in TypeScript
DESCRIPTION: This snippet shows how to subscribe to changes in chainId, address, and provider using the subscribeProvider method from the Reown modal. It includes a callback function to handle the changes.

LANGUAGE: typescript
CODE:
function handleChange({ provider, providerType, address, error, chainId, isConnected }) {
  //...
}

modal.subscribeProvider(handleChange)

----------------------------------------

TITLE: Configuring Custom Wallet Logos in TypeScript
DESCRIPTION: Object configuration for mapping wallet IDs to custom logo image paths. Supports WalletGuide IDs, custom wallet IDs from mobileWallets/desktopWallets configs, and wagmi connector IDs.

LANGUAGE: typescript
CODE:
walletImages: {
  rainbow: "/images/rainbow.webp",
  metaMask: "/images/metamask.webp",
};

----------------------------------------

TITLE: Importing and Rendering Options Component in JSX/Markdown
DESCRIPTION: This snippet imports an Options component from a shared location and renders it within a Markdown document. It demonstrates the use of MDX to combine Markdown with JSX components.

LANGUAGE: jsx
CODE:
import Options from '../../shared/options.mdx'

# Options

<Options />

----------------------------------------

TITLE: Importing and Rendering Resources Component in MDX
DESCRIPTION: Imports a shared Resources component from a relative path and renders it within the page content. Uses MDX syntax to combine Markdown with JSX components.

LANGUAGE: mdx
CODE:
---
title: Resources
---

import Resources from '../../shared/resources.mdx'

# Resources

<Resources />

----------------------------------------

TITLE: Sending Notification with Reown Notify API using JavaScript
DESCRIPTION: Demonstrates how to send a notification using the Reown Notify API with JavaScript. It includes setting up the project ID and API secret, constructing the request body, and sending a POST request to the API endpoint.

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const response = await fetch(`https://notify.walletconnect.com/${PROJECT_ID}/notify`, {
  method: 'POST',
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    notification: {
      type: 'a1e53b95-18e5-4af8-9f03-9308ec87b687',
      title: 'The price of Ethereum has risen',
      body: 'The price of Ethereum has gone up 10%',
      url: 'https://app.example.com'
    },
    accounts: ['eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029']
  })
})

----------------------------------------

TITLE: Defining SendTransferParams Type in TypeScript
DESCRIPTION: This snippet defines the SendTransferParams type used for sending transfers. It includes the amount to be sent in satoshis and the recipient address.

LANGUAGE: typescript
CODE:
export type SendTransferParams = {
  /**
   * The amount to be sent in satoshis
   */
  amount: string
  /**
   * The address to send the transfer to
   */
  recipient: string
}

----------------------------------------

TITLE: Supported Chain IDs for WalletConnect RPC
DESCRIPTION: List of blockchain network IDs supported by the WalletConnect RPC service at https://rpc.walletconnect.com

LANGUAGE: plaintext
CODE:
1, 3, 4, 5, 10, 42, 56, 69, 97, 100, 137, 280, 324, 420, 42161, 42220, 43114, 80001, 421611, 421613, 1313161554, 1313161555

----------------------------------------

TITLE: Configuring Mobile Wallet Array Structure in TypeScript
DESCRIPTION: Defines the structure for configuring mobile wallets with their identifiers, names, and both native (deeplink) and universal link URLs. Requires corresponding wallet images to be added in walletImages directory.

LANGUAGE: typescript
CODE:
mobileWallets: [
  {
    id: string,
    name: string,
    links: {
      native: string
      universal: string,
    },
  },
];

----------------------------------------

TITLE: Importing Table Component in JSX
DESCRIPTION: This code imports a Table component from a relative path, likely used to render the variable documentation tables.

LANGUAGE: jsx
CODE:
import Table from '../../../components/Table'

----------------------------------------

TITLE: Creating AppKit Button Component in React/TSX
DESCRIPTION: Implements a simple React component that renders the global appkit-button web component. The component requires no imports since AppKit web components are globally available HTML elements.

LANGUAGE: tsx
CODE:
export default function ConnectButton() {
  return <appkit-button />
}

----------------------------------------

TITLE: Implementing WalletKit Pairing
DESCRIPTION: Demonstrates how to implement pairing between a wallet and dapp using WalletKit. Handles success and error callbacks for the pairing process.

LANGUAGE: kotlin
CODE:
val pairingParams = Wallet.Params.Pair(pairingUri)
WalletKit.pair(pairingParams, 
    onSuccess = {
        //Subscribed on the pairing topic successfully. Wallet should await for a session proposal
    },
    onError = { error ->
        //Some error happens while pairing - check Expected errors section
    }
}

----------------------------------------

TITLE: Creating WagmiAdapter for Reown AppKit
DESCRIPTION: Code snippet showing how to create a WagmiAdapter instance for use with Reown AppKit.

LANGUAGE: JavaScript
CODE:
const wagmiAdapter = new WagmiAdapter({
  networks: [mainnet, arbitrum],
  projectId
})

----------------------------------------

TITLE: Fetching Active Subscriptions in Notify API
DESCRIPTION: Retrieves the current list of active subscriptions for an account. Returns a map with the topic as the key and Notify.Model.Subscription as the value.

LANGUAGE: kotlin
CODE:
val account: String = // CAIP-10 account
val timeout: Duration? = // Optional. Timeout - min 5 sec, max 60 sec, default 60 sec
val params = Notify.Params.GetActiveSubscriptions(account, timeout)

try {
  val result: Map<String, Notify.Model.Subscription> = NotifyClient.getActiveSubscriptions(params)
} catch (e: Exception) {
  // callback for when the get active subscriptions request has failed
}

----------------------------------------

TITLE: Importing React Components for Wallet Integration
DESCRIPTION: Import statements for theming and button components used in wallet connection functionality.

LANGUAGE: javascript
CODE:
import Theming from '../../shared/theming.mdx'
import Button from '../../../components/button/index.js'

----------------------------------------

TITLE: Marking Notifications as Read in TypeScript
DESCRIPTION: Demonstrates various methods for marking notifications as read including single notification, multiple notifications, and all notifications. Includes examples for different account and domain combinations.

LANGUAGE: typescript
CODE:
// marking a single notification as read
await notifications[0].markAsRead()

// mark specific notifications as read for default account and under default domain
await markNotificationsAsRead(notifications.slice(2).map(n => n.id))

// mark specific notifications as read for specified account under default domain
await markNotificationsAsRead(
  notifications.slice(2).map(n => n.id),
  differentAccount
)

// mark specific notifications as read for default account under specified domain
await markNotificationsAsRead(
  notifications.slice(2).map(n => n.id),
  undefined,
  differentDomain
)

// mark specific notifications as read for specified account under specified domain
await markNotificationsAsRead(
  notifications.slice(2).map(n => n.id),
  differentAccount,
  differentDomain
)

----------------------------------------

TITLE: Retrieving Error State in TypeScript
DESCRIPTION: This snippet demonstrates how to get the current error state using the getError method from the Reown modal.

LANGUAGE: typescript
CODE:
const error = modal.getError()

----------------------------------------

TITLE: Configuring Modal Account View Visibility in TypeScript
DESCRIPTION: Boolean configuration option that controls whether the account view is displayed in the modal. When set to false, the account view will be hidden. The default value is true if not explicitly set.

LANGUAGE: typescript
CODE:
enableAccountView: false

----------------------------------------

TITLE: Importing and Rendering Verify Component in JSX
DESCRIPTION: This snippet imports a Verify component from a relative path and renders it within the current component. It uses JSX syntax to embed the component.

LANGUAGE: JSX
CODE:
import Verify from '../../../cloud/verify.mdx'

<Verify />

----------------------------------------

TITLE: Handling Session Requests in C#
DESCRIPTION: Handle incoming session requests in C# applications.

LANGUAGE: csharp
CODE:
walletClient.Engine.SessionRequestEvents<EthGetTransactionReceipt, TransactionReceipt>().OnRequest += OnEthTransactionReceiptRequest;

private Task OnEthTransactionReceiptRequest(RequestEventArgs<EthGetTransactionReceipt, TransactionReceipt> e)
{
    // Handle the request and set the response
    e.Response = ...
}

----------------------------------------

TITLE: Configuring Link Mode for AppKit in Swift
DESCRIPTION: This snippet illustrates how to configure Link Mode in AppKit, which is a low-latency mechanism for transporting 1-click auth requests and session requests over universal links. It shows how to set up AppMetadata.Redirect with a valid universal link and enable link mode.

LANGUAGE: swift
CODE:
let metadata = AppMetadata(
    ...
    redirect: try! AppMetadata.Redirect(native: "exampleApp://", universal: "https://example.com/example_dapp", linkMode: true)
)

AppKit.configure(
    ...
    metadata: metadata,
    ...
)

----------------------------------------

TITLE: Rendering Custom Components in React JSX
DESCRIPTION: This snippet shows the usage of custom components like WhatsNewBanner, Banner, and Wrapper to structure the documentation page. It includes various sections such as getting started, features, and a demo link.

LANGUAGE: jsx
CODE:
<WhatsNewBanner />

<Banner />

<Wrapper
  type="medium"
  items={[
    {
      name: 'Get Started',
      icon: 'reown/get-started.svg',
      href: '/appkit/overview',
      description: 'Get started with Reown AppKit',
    },
    {
      name: 'Upgrade to Reown',
      icon: 'reown/upgrade.svg',
      href: '/appkit/upgrade/from-w3m-to-reown',
      description: 'Upgrade to latest version of Reown AppKit',
    },
     {
      name: 'Features',
      icon: 'reown/features.svg',
      href: '/appkit/features/',
      description: 'Learn about the features Reown has to offer',
    },
    {
      name: 'Try AppKit Demo',
      icon: 'reown/demo.svg',
      href: 'https://demo.reown.com/?utm_source=navbar&utm_medium=docs&utm_campaign=backlinks',
      description: 'Try out the powerful Reown AppKit today',
    },
     {
      name: 'Migrate from Alternatives',
      icon: 'reown/migrate.svg',
      href: '/appkit/migration/',
      description: 'Migrate from other solutions to Reown AppKit',
    },
    {
      name: 'Browse our repositories',
      icon: 'reown/browse.svg',
      href: 'https://github.com/reown-com',
      description: 'Browse all our open-source repos',
    }
  ]}
/>

----------------------------------------

TITLE: Initializing AppKit with DefaultSIWX
DESCRIPTION: Basic setup for enabling SIWX in a decentralized application using the DefaultSIWX configuration.

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { DefaultSIWX } from '@reown/appkit-siwx'

const appkit = createAppKit({
  projectId,
  networks,
  metadata,
  siwx: new DefaultSIWX() // add this line to enable SIWX
})

----------------------------------------

TITLE: Configuring Wallet Exclusions in TypeScript
DESCRIPTION: Demonstrates how to configure wallet exclusions using either an array of specific wallet IDs or the 'ALL' option. The explorerExcludedWalletIds property accepts either an array of wallet ID strings or the string 'ALL' to exclude all wallets except those defined in explorerRecommendedWalletIds.

LANGUAGE: typescript
CODE:
explorerExcludedWalletIds: [
  '1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369',
  '4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0'
]
// -- or -- //
explorerExcludedWalletIds: 'ALL'

----------------------------------------

TITLE: Updating Configuration Method Call
DESCRIPTION: Demonstrates how to update the configuration method call from Web3Modal to AppKit.

LANGUAGE: swift
CODE:
AppKit.configure(
    ...
)

----------------------------------------

TITLE: Importing AppKit Notifications Components in React
DESCRIPTION: This code snippet shows how to import the installation and example usage components for AppKit Notifications in a React application using MDX.

LANGUAGE: jsx
CODE:
import Installation from '../../../shared/notifications/frontend-integration/usage/installation/react.mdx'
import Example from '../../../shared/notifications/frontend-integration/usage/example/react.mdx'

----------------------------------------

TITLE: Platform-Specific Tab Implementation
DESCRIPTION: JSX structure for platform tabs component showing implementation examples for Web, iOS, Android, React Native, Flutter, and Unity platforms.

LANGUAGE: jsx
CODE:
<PlatformTabs
	groupId="wcm"
	activeOptions={["web","ios","android", "react-native", "flutter", "unity"]}
>

----------------------------------------

TITLE: Smart Contract Interaction with Ethers in Next.js
DESCRIPTION: This code snippet shows how to use Ethers to interact with smart contracts in a Next.js application using AppKit.

LANGUAGE: tsx
CODE:
import { useAppKitProvider, useAppKitAccount } from "@reown/appkit/react"
import { BrowserProvider, Contract, formatUnits } from 'ethers'

const USDTAddress = '0x617f3112bf5397D0467D315cC709EF968D9ba546'

// The ERC-20 Contract ABI, which is a common contract interface
// for tokens (this is the Human-Readable ABI format)
const USDTAbi = [
  'function name() view returns (string)',
  'function symbol() view returns (string)',
  'function balanceOf(address) view returns (uint)',
  'function transfer(address to, uint amount)',
  'event Transfer(address indexed from, address indexed to, uint amount)'
]

function Components() {
  const { address, caipAddress, isConnected } = useAppKitAccount();
  const { walletProvider } = useAppKitProvider('eip155')

  async function getBalance() {
    if (!isConnected) throw Error('User disconnected')

    const ethersProvider = new BrowserProvider(walletProvider)
    const signer = await ethersProvider.getSigner()
    // The Contract object
    const USDTContract = new Contract(USDTAddress, USDTAbi, signer)
    const USDTBalance = await USDTContract.balanceOf(address)

    console.log(formatUnits(USDTBalance, 18))
  }

  return <button onClick={getBalance}>Get User Balance</button>
}

----------------------------------------

TITLE: Importing AppKit Button Component
DESCRIPTION: Basic import statement for the Button component used in the documentation example.

LANGUAGE: javascript
CODE:
import Button from '../../../components/button/index.js'

----------------------------------------

TITLE: Defining CAIP-2 Compliant Chain Array in TypeScript
DESCRIPTION: This snippet defines an array of CAIP-2 compliant chain identifiers for different blockchain networks. It includes identifiers for Ethereum (EIP-155), Solana, Cosmos, and Polkadot chains. These identifiers are used to specify which blockchain networks a modal should support.

LANGUAGE: typescript
CODE:
chains: [
  'eip155:1',
  'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp',
  'cosmos:cosmoshub-4',
  'polkadot:91b171bb158e2d3848fa23a9f1c25182'
]

----------------------------------------

TITLE: Installing SIWE Dependencies
DESCRIPTION: Commands for installing required packages for both One-Click Auth and legacy SIWE implementation.

LANGUAGE: bash
CODE:
npm i @reown/appkit-siwe next-auth

# Legacy approach
npm i @reown/appkit-siwe siwe next-auth viem

----------------------------------------

TITLE: Retrieving All Subscribers with Reown Notify API using cURL
DESCRIPTION: Illustrates how to retrieve all subscribers using the Reown Notify API with a cURL command. It includes the API endpoint and authorization header.

LANGUAGE: bash
CODE:
curl 'https://notify.walletconnect.com/<PROJECT_ID>/subscribers' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'

----------------------------------------

TITLE: Tenderly Virtual TestNet Chain Configuration
DESCRIPTION: Configuration file for setting up Tenderly Virtual TestNet as a custom chain

LANGUAGE: tsx
CODE:
import { defineChain } from '@reown/appkit/networks'

export const vTestnet = defineChain({
  id: 73571,
  caipNetworkId: 'eip155:73571',
  chainNamespace: 'eip155',
  name: 'Virtual Sepolia',
  nativeCurrency: { name: 'vSepolia', symbol: 'vETH', decimals: 18 },
  rpcUrls: {
    default:{
      http: [process.env.TENDERLY_VIRTUAL_TESTNET_RPC!],
    }
  },
  blockExplorers: {
    default:{
      name:'Tenderly Explorer',
      url: 'https://dashboard.tenderly.co/explorer/vnet/6a6910ba-5831-4758-9d89-1f8e3169433f',
    }
  },
  contracts: {
    ensRegistry: {
      address: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'
    },
    ensUniversalResolver: {
      address: '0xE4Acdd618deED4e6d2f03b9bf62dc6118FC9A4da',
      blockCreated: 16773775
    },
    multicall3: {
      address: '0xca11bde05977b3631167028862be2a173976ca11',
      blockCreated: 14353601
    }
  }
})

----------------------------------------

TITLE: Initializing ReownWalletKit with Link Mode Configuration
DESCRIPTION: Shows how to initialize ReownWalletKit with Link Mode enabled through PairingMetadata configuration. Includes setting up project ID, metadata, and redirect properties with universal linking.

LANGUAGE: javascript
CODE:
final _walletKit = ReownWalletKit(
  core: ReownCore(
    projectId: '{YOUR_PROJECT_ID}',
  ),
  metadata: PairingMetadata(
    name: 'Example Wallet',
    description: 'Example wallet description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect(
      native: 'examplewallet://',
      universal: 'https://example.com/wallet',
      linkMode: true,
    ),
  ),
);

----------------------------------------

TITLE: Importing and Rendering Verify Component in MDX
DESCRIPTION: Import statement for the Verify component from a relative path and subsequent rendering using JSX syntax. Uses frontmatter to define the page title.

LANGUAGE: mdx
CODE:
---
title: Verify
---

import Verify from '../../../cloud/verify.mdx'

<Verify />

----------------------------------------

TITLE: Initializing Network Switching with AppKit
DESCRIPTION: Demonstrates how to configure and use AppKit for switching between different blockchain networks like mainnet, arbitrum, and polygon. Includes adapter setup and project configuration.

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit/react'
import { mainnet, arbitrum, polygon } from '@reown/appkit/networks'

const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    analytics: true,
  }
})

modal.switchNetwork(polygon)

----------------------------------------

TITLE: Configuring Chain Logo Mappings in TypeScript
DESCRIPTION: Object mapping that associates blockchain network IDs with their corresponding logo image paths. The example shows mappings for Ethereum (chain ID 1) and Polygon (chain ID 137) networks to custom WebP image files.

LANGUAGE: typescript
CODE:
chainImages: {
  1: "/images/ethereum.webp",
  137: "/images/polygon.webp",
};

----------------------------------------

TITLE: Rendering Contribution Information in React JSX
DESCRIPTION: This snippet demonstrates how to display information about contributing to the documentation using custom HTML and CSS classes. It includes a link to the documentation repository on GitHub.

LANGUAGE: jsx
CODE:
<div className="cloud__wrapper" style={{ padding: '1.67rem' }}>
<div>
  <img src='/assets/home/bookLogo.png' />
  Every page footer has an "Edit this page" link.
  <br /> Change the Markdown, open a Pull Request and we'll merge it!
</div>
  <Link to="https://github.com/reown-com/reown-docs/" target="_blank">
    Docs Repo
  </Link>
</div>

----------------------------------------

TITLE: Handling Link Mode Responses in Flutter
DESCRIPTION: Shows how to handle incoming Universal/App Links by passing them to AppKit for processing.

LANGUAGE: javascript
CODE:
void _onLinkCaptured(String link) async {
  await _appKitModal.dispatchEnvelope(link);
}

----------------------------------------

TITLE: Enabling Network Selection View in TypeScript Configuration
DESCRIPTION: Boolean configuration option that enables or disables the network selection view when multiple chains are configured. When set to true, users will be presented with a network selection interface before proceeding to wallet selection.

LANGUAGE: typescript
CODE:
enableNetworkView: true

----------------------------------------

TITLE: AppKit Button Component Properties
DESCRIPTION: Custom button component with configurable properties for disabling, showing balance, size control, labels and namespace specification. Supports EVM, Solana and Bitcoin namespaces.

LANGUAGE: HTML
CODE:
<appkit-button
  disabled="boolean"
  balance="'show' | 'hide'"
  size="'md' | 'sm'"
  label="string"
  loadingLabel="string"
  namespace="'eip155' | 'solana' | 'bip122'"
/>

----------------------------------------

TITLE: Defining AccountAddress Type in TypeScript
DESCRIPTION: This snippet defines the AccountAddress type used for representing account addresses. It includes the address, optional public key and derivation path, and the purpose of the address.

LANGUAGE: typescript
CODE:
export type AccountAddress = {
  /**
   * Public address belonging to the account.
   */
  address: string
  /**
   * Public key for the derivation path in hex, without 0x prefix
   */
  publicKey?: string
  /**
   * The derivation path of the address e.g. "m/84'/0'/0'/0/0"
   */
  path?: string
  /**
   * The purpose of the address
   */
  purpose: 'payment' | 'ordinal' | 'stx'
}

----------------------------------------

TITLE: Importing and Rendering Verify Component in MDX
DESCRIPTION: Import statement for the Verify component from a relative path and subsequent rendering using JSX syntax. Uses frontmatter to define the page title.

LANGUAGE: mdx
CODE:
---
title: Verify
---

import Verify from '../../../cloud/verify.mdx'

<Verify />

----------------------------------------

TITLE: Signing Casper Message
DESCRIPTION: Example of using casper_sign_message method to request user signature for a message. The method takes an address and message as parameters and returns the signature. The message is prefixed with 'Casper Message:\n' for security.

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "casper_sign_message",
  "params": {
    "message": "CSPR.studio wants you to sign in with your Casper account:\n0x01953...808f3 \n\nIssued At: 07/21/2023 10:07:25\nnonce: 428b62e4",
    "address": "casper:casper-test:0202a8e3e5E32800792F37F738d95BF2610d86E97922D13ab97945bb062824ed9E8A"
  }
}

----------------------------------------

TITLE: Using useAppKitAccount Hook in React
DESCRIPTION: This snippet demonstrates how to use the useAppKitAccount hook to retrieve the client's information, including address, CAIP address, and connection status.

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from '@reown/appkit/react'

function Components() {
  const { address, caipAddress, isConnected } = useAppKitAccount();

  //...
}

----------------------------------------

TITLE: Configuring AppKit with SIWX for Travel Rule Compliance
DESCRIPTION: TypeScript code snippet demonstrating how to set up AppKit with SIWX enabled. This configuration is crucial for implementing Travel Rule compliance in your dApp.

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { DefaultSIWX } from '@reown/appkit-siwx'

const appkit = createAppKit({
  projectId,
  networks,
  metadata,
  siwx: new DefaultSIWX() // add this line to enable SIWX
})

----------------------------------------

TITLE: Rendering Supported Tokens Table
DESCRIPTION: This JSX snippet uses the Table component to display a table of supported tokens and networks for Chain Abstraction. It includes headers and data for different networks and their supported stablecoins.

LANGUAGE: jsx
CODE:
<Table
  headers={['Network', 'Supported tokens']}
  data={[
    {
      network: 'OP Mainnet',
      stablecoins: 'USDC, USDT'
    },
    {
      network: 'Base',
      stablecoins: 'USDC'
    },
    {
      network: 'Arbitrum',
      stablecoins: 'USDC'
    },
  ]}
/>

----------------------------------------

TITLE: Importing AppKit Notifications Components in JavaScript
DESCRIPTION: These import statements bring in the Installation and Example components from shared MDX files for the AppKit Notifications documentation.

LANGUAGE: JavaScript
CODE:
import Installation from '../../../shared/notifications/frontend-integration/usage/installation/javascript.mdx'
import Example from '../../../shared/notifications/frontend-integration/usage/example/javascript.mdx'

----------------------------------------

TITLE: Marking All Notifications as Read with Reown Notify API using JavaScript
DESCRIPTION: Demonstrates how to mark all notifications as read using the Reown Notify API with JavaScript. It includes setting up the project ID and API secret, and sending a POST request to the mark-all-as-read endpoint.

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const response = await fetch(`https://notify.walletconnect.com/v1/${PROJECT_ID}/mark-all-as-read`, {
  method: 'POST',
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`
  }
})

----------------------------------------

TITLE: Enabling Universal Links in iOS AppDelegate
DESCRIPTION: This Swift code snippet shows how to modify the AppDelegate.mm file to handle incoming Universal Links in an iOS app. It implements the necessary methods to process both deep links and universal links.

LANGUAGE: swift
CODE:
#import <React/RCTLinkingManager.h>

// Enable deeplinks
- (BOOL)application:(UIApplication *)application
   openURL:(NSURL *)url
   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options
{
  return [RCTLinkingManager application:application openURL:url options:options];
}

// Enable Universal Links
- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity
 restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler
{
 return [RCTLinkingManager application:application
                  continueUserActivity:userActivity
                    restorationHandler:restorationHandler];
}

----------------------------------------

TITLE: Initializing AppKit Configuration
DESCRIPTION: Example of initializing AppKit with the new configuration structure, replacing the old WalletConnectProjectConfig and Web3ModalConfig.

LANGUAGE: csharp
CODE:
private async void Start()
{
    await AppKit.InitializeAsync(
        new AppKitConfig(
            projectId: "Your Project ID from WalletConnectProjectConfig",
            new Metadata(
                name: "My Game",
                description: "Example description",
                url: "https://example.com",
                iconUrl: "Your icon URL"
            )
        )
    );
}

----------------------------------------

TITLE: Installing Expo-specific Dependency
DESCRIPTION: For Expo projects, installs the expo-application package which may be required for certain WalletKit functionalities in an Expo environment.

LANGUAGE: bash
CODE:
npx expo install expo-application

----------------------------------------

TITLE: Implementing WalletKit Pairing
DESCRIPTION: Demonstrates how to pair a wallet with a dapp using WalletKit client. The pairing establishes a connection with fixed permissions for session proposals.

LANGUAGE: typescript
CODE:
const uri = 'xxx'; // pairing uri
try {
    await walletKit.pair({ uri });
} catch (error) {
    // some error happens while pairing - check Expected errors section
}

----------------------------------------

TITLE: Implementing WalletKit Pairing
DESCRIPTION: Demonstrates how to pair a wallet with a dapp using WalletKit client. The pairing establishes a connection with fixed permissions for session proposals.

LANGUAGE: typescript
CODE:
const uri = 'xxx'; // pairing uri
try {
    await walletKit.pair({ uri });
} catch (error) {
    // some error happens while pairing - check Expected errors section
}

----------------------------------------

TITLE: Using AppKit Account Hook in React
DESCRIPTION: Demonstrates how to use the useAppKitAccount hook to access wallet account information including address, CAIP address, and connection status.

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from '@reown/appkit/react'

function Components() {
  const { address, caipAddress, isConnected } = useAppKitAccount();

  //...
}

----------------------------------------

TITLE: Importing grantPermissions Method in JavaScript
DESCRIPTION: Import statement for the grantPermissions method and SmartSessionGrantPermissionsRequest type from the @reown/appkit-experimental/smart-session package.

LANGUAGE: javascript
CODE:
import { grantPermissions, type SmartSessionGrantPermissionsRequest } from '@reown/appkit-experimental/smart-session'

----------------------------------------

TITLE: Initializing Coinbase Connector with Wagmi Configuration in TypeScript
DESCRIPTION: Demonstrates how to initialize a Coinbase Wallet connector and integrate it with wagmi configuration. The connector requires a redirect URL which can be either a universal link or custom app scheme, with universal links being preferred to avoid app verification warnings.

LANGUAGE: tsx
CODE:
import { coinbaseConnector } from '@reown/appkit-coinbase-wagmi-react-native'

const coinbase = coinbaseConnector({
  redirect: 'https://your-app-universal-link.com' || 'YOUR_APP_SCHEME://'
})

const wagmiConfig = defaultWagmiConfig({
  chains,
  projectId,
  metadata,
  extraConnectors: [coinbase]
})

----------------------------------------

TITLE: Importing and Rendering Verify Component in MDX
DESCRIPTION: Imports a Verify component from the cloud directory and renders it using MDX syntax. Uses frontmatter to define the page title.

LANGUAGE: mdx
CODE:
---
title: Verify
---

import Verify from '../../../cloud/verify.mdx'

<Verify />

----------------------------------------

TITLE: Preparing Transaction Data for Smart Contract Call
DESCRIPTION: Prepares the transaction data by encoding function parameters and creating a transaction object with value and destination.

LANGUAGE: typescript
CODE:
const purchaseDonutCallData = encodeFunctionData({
  abi: donutContractAbi,
  functionName: 'purchase',
  args: [1]
})

const TEST_TX = {
  to: donutContractaddress,
  value: parseEther('0.0001'),
  data: purchaseDonutCallData
}

----------------------------------------

TITLE: Handling Pairing State Changes
DESCRIPTION: Shows how to implement a CoreDelegate to handle pairing state changes in WalletKit.

LANGUAGE: kotlin
CODE:
val coreDelegate = object : CoreClient.CoreDelegate {
    override fun onPairingState(pairingState: Core.Model.PairingState) {
        //Here a pairing state is triggered
    }
    ...other callbacks
}

CoreClient.setDelegate(coreDelegate)

----------------------------------------

TITLE: Importing and Rendering Blockchain API Documentation in MDX
DESCRIPTION: This snippet imports the Blockchain API documentation component from a shared source and renders it within the current page. It uses MDX syntax to combine Markdown with JSX.

LANGUAGE: MDX
CODE:
import BlockchainAPI from '../../../cloud/blockchain-api.mdx'

<BlockchainAPI />

----------------------------------------

TITLE: Platform Navigation Wrapper Component Implementation
DESCRIPTION: JSX implementation of a navigation wrapper component that displays platform-specific cards for WalletKit integration documentation. Each card contains a platform name, description, icon, and documentation link.

LANGUAGE: jsx
CODE:
<Wrapper
  type="large"
  fit={false}
  items={[
    {
      name: 'Android',
      type: 'android',
      description: 'Get started with WalletKit in Android.',
      icon: androidLogo,
      href: '../android/verify'
    },
    {
      name: 'iOS',
      type: 'ios',
      description: 'Get started with WalletKit in iOS.',
      icon: iosLogo,
      href: '../ios/verify',
      isWhite: true
    },
    {
      name: 'Flutter',
      type: 'flutter',
      description: 'Get started with WalletKit in Flutter.',
      icon: flutterLogo,
      href: '../flutter/verify'
    },
    {
      name: 'React Native',
      type: 'react-native',
      description: 'Get started with WalletKit in React Native.',
      icon: rnLogo,
      href: '../react-native/verify'
    },
    {
      name: 'Web',
      type: 'javascript',
      description: 'Get started with WalletKit in Web.',
      icon: javascriptLogo,
      href: '../web/verify'
    },
    {
      name: '.NET',
      type: 'c-sharp',
      description: 'Get started with WalletKit in .NET.',
      icon: '/assets/home/dotnet.svg',
      href: '../c-sharp/verify'
    },
  ]}
/>

----------------------------------------

TITLE: Retrieving Active WalletConnect Sessions in Swift
DESCRIPTION: Gets a list of active WalletConnect sessions. Returns an array of Session objects.

LANGUAGE: swift
CODE:
AppKit.instance.getSessions()

----------------------------------------

TITLE: Configuring Associated Domains in iOS Entitlements
DESCRIPTION: This XML snippet shows the structure of the entitlements file for iOS apps, demonstrating how to add the associated domain for universal links. This configuration is necessary for the app to handle the specified universal link.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>com.apple.developer.associated-domains</key>
  <array>
    <string>applinks:example.com</string>
  </array>
</dict>
</plist>

----------------------------------------

TITLE: Updating Universal Wallet imports for Wagmi
DESCRIPTION: Update the import statement for the auth connector used in universal wallets. This change is necessary to use the new AppKit auth package.

LANGUAGE: tsx
CODE:
import { authConnector } from '@reown/appkit-auth-wagmi-react-native';

----------------------------------------

TITLE: Account Registration with SIWE in Swift
DESCRIPTION: Implements account registration using Sign-In with Ethereum (SIWE). Prepares registration parameters and handles message signing for account verification.

LANGUAGE: swift
CODE:
let params = try await Notify.instance.prepareRegistration(account: account, domain: "com.YOURAPPDOMAIN")
let signature = onSign(message: params.message) // Sign message with your signer
try await Notify.instance.register(params: params, signature: signature)

----------------------------------------

TITLE: Handling Session Proposal Expiry in TypeScript
DESCRIPTION: Demonstrates how to listen for and handle session proposal expiry events using WalletKit. This helps in removing expired proposal modals from the UI.

LANGUAGE: typescript
CODE:
walletKit.on("proposal_expire", (event) => {
    // proposal expired and any modal displaying it should be removed
    const { id } = event;
});

----------------------------------------

TITLE: Installing AppKit Dependencies for Ethers v6 in Next.js
DESCRIPTION: This command installs the necessary dependencies for using AppKit with Ethers v6 in a Next.js project.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-ethers ethers

----------------------------------------

TITLE: Installing Reown Appkit Experimental Package
DESCRIPTION: Command to install the @reown/appkit-experimental package using npm or yarn.

LANGUAGE: bash
CODE:
npm install @reown/appkit-experimental

----------------------------------------

TITLE: Setting WalletConnectModal Theme for Android (XML)
DESCRIPTION: This snippet shows how to define a custom theme for WalletConnectModal using XML in an Android application.

LANGUAGE: xml
CODE:
<style name="WalletConnectModalTheme">
    <item name="accentColor">#FF47A1FF</item>
    <item name="onAccentColor">#FFFFFFFF</item>
</style>

----------------------------------------

TITLE: Importing and Rendering Explorer Submission Component in MDX
DESCRIPTION: Imports the ExplorerSubmission component from the cloud directory and renders it within the page using MDX syntax.

LANGUAGE: mdx
CODE:
---
title: Explorer Submission
---

import ExplorerSubmission from '../../../cloud/explorer-submission.mdx'

<ExplorerSubmission />

----------------------------------------

TITLE: Setting Feature Configuration
DESCRIPTION: Configure various AppKit features including swaps, email authentication, and social login options.

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  features: {
    swaps: true,
    email: true,
    socials: ['x', 'discord', 'apple'],
    emailShowWallets: false
  }
})

----------------------------------------

TITLE: Android App Links Configuration
DESCRIPTION: XML configuration for Android manifest to enable App Links with auto-verification.

LANGUAGE: xml
CODE:
<intent-filter android:autoVerify="true">
  <action android:name="android.intent.action.VIEW" />

  <category android:name="android.intent.category.DEFAULT" />
  <category android:name="android.intent.category.BROWSABLE" />

  <data android:scheme="https" />
  <data android:host="your_wallet_universal_link.com" />
  <data android:pathPattern="/open" />
</intent-filter>

----------------------------------------

TITLE: Sign Request Handler Implementation
DESCRIPTION: Implementation of request handler for processing signing requests and redirecting back to the dapp.

LANGUAGE: javascript
CODE:
Future<void> personalSignRequestHandler(String topic, dynamic parameters) async {
  // Process signing requests
  // ...
  // With the given topic with retrieve the current session data
  final session = _walletKit.sessions.get(topic);
  // And we get the peer metadata to trigger dapp's redirect value
  try {
    await _walletKit.redirectToDapp(
      topic: topic,
      redirect: session!.peer.metadata.redirect,
    );
  } catch (e) {
    ...
  }
}

----------------------------------------

TITLE: Importing SIWX Default Component in MDX
DESCRIPTION: Shows how to import and use the default SIWX component documentation from a shared location in an MDX documentation file.

LANGUAGE: mdx
CODE:
import SiwxDefault from '../../shared/siwx/siwx-default.mdx'

# SIWX Default Usage

<SiwxDefault />

----------------------------------------

TITLE: Installing Reown Auth Packages
DESCRIPTION: Command to install required npm packages for Reown authentication including react-native-webview and the auth connector.

LANGUAGE: bash
CODE:
yarn add react-native-webview @reown/appkit-auth-ethers-react-native

----------------------------------------

TITLE: Updating App Component with AppKit Button
DESCRIPTION: Code snippet showing the replacement of WalletMultiButton with AppKit Button in the App component.

LANGUAGE: tsx
CODE:
const Content: FC = () => {
/* highlight-delete-start */
-   return <WalletMultiButton />;
/* highlight-delete-end */
/* highlight-add-start */
+   return <appkit-button />
/* highlight-add-end */
};

----------------------------------------

TITLE: Disconnecting a Pairing on Android
DESCRIPTION: Kotlin code for disconnecting from a pairing on Android.

LANGUAGE: kotlin
CODE:
CoreClient.Pairing.disconnect(topic = /*Pairing topic*/) { error -> }

----------------------------------------

TITLE: Adding Custom Buttons for AppKit Modal in HTML
DESCRIPTION: This HTML snippet demonstrates how to add custom buttons to open the AppKit modal and network view. It includes two button elements with specific IDs that will be used to attach event listeners in JavaScript.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>HTML Example</title>
  </head>
  <body>
    <div id="app">
      /* highlight-add-start */
      <button id="open-connect-modal">Open Modal</button>
      <button id="open-network-modal">Open Networks</button>
      /* highlight-add-end */
    </div>
    <script type="module" src="main.js"></script>
  </body>
</html>

----------------------------------------

TITLE: Installing Reown AppKit and Ethers for React Native
DESCRIPTION: This command installs the Reown AppKit for React Native and a specific version of ethers library. It's the primary dependency for integrating Reown functionality into a React Native project.

LANGUAGE: bash
CODE:
yarn add @reown/appkit-ethers5-react-native ethers@5.7.2

----------------------------------------

TITLE: Updating AppKit config import for Wagmi
DESCRIPTION: Update the import statement for creating the AppKit configuration. This change is necessary to use the new AppKit package instead of Web3Modal.

LANGUAGE: tsx
CODE:
import { createAppKit } from '@reown/appkit-wagmi-react-native';

----------------------------------------

TITLE: Installing iOS Dependencies
DESCRIPTION: Command to install iOS-specific dependencies using CocoaPods.

LANGUAGE: bash
CODE:
cd ios && pod install

----------------------------------------

TITLE: Pairing with WalletKit in Swift
DESCRIPTION: Demonstrates how to pair a wallet with a dapp using the WalletKit client. It parses a WalletConnect URI and initiates the pairing process asynchronously.

LANGUAGE: swift
CODE:
let uri = WalletConnectURI(string: urlString)

if let uri {
Task {
try await WalletKit.instance.pair(uri: uri)
}
}

----------------------------------------

TITLE: Rendering Wrapper Component for Framework Quick Start Links
DESCRIPTION: This JSX snippet uses a custom Wrapper component to display quick start links for various frameworks (React, Next.js, Vue, JavaScript) supported by AppKit for Solana integration.

LANGUAGE: jsx
CODE:
<Wrapper
  type="large"
  fit={false}
  items={[
    {
      name: 'React',
      type: 'react',
      description: 'Get started with AppKit in React.',
      icon: reactLogo,
      href: '../react/core/installation?platform=solana'
    },
    {
      name: 'Next.js',
      type: 'next',
      description: 'Get started with AppKit in Next.js.',
      icon: nextjsLogo,
      href: '../next/core/installation?platform=solana',
      isWhite: true
    },
    {
      name: 'Vue',
      type: 'vue',
      description: 'Get started with AppKit in Vue.',
      icon: vueLogo,
      href: '../vue/core/installation?platform=solana'
    },
    {
      name: 'JavaScript',
      type: 'javascript',
      description: 'Get started with AppKit in JavaScript.',
      icon: javascriptLogo,
      href: '../javascript/core/installation?platform=solana'
    }
  ]}
/>

----------------------------------------

TITLE: Installing Reown AppKit and Ethers for React Native
DESCRIPTION: This command installs the Reown AppKit for React Native and a specific version of ethers library. It's the primary dependency for integrating Reown functionality into a React Native project.

LANGUAGE: bash
CODE:
yarn add @reown/appkit-ethers5-react-native ethers@5.7.2

----------------------------------------

TITLE: Importing and Rendering Analytics Component in JSX
DESCRIPTION: This code snippet imports an Analytics component from a shared cloud documentation source and renders it within the current page. It allows for centralized management of analytics documentation across multiple projects.

LANGUAGE: JSX
CODE:
import Analytics from '../../../cloud/analytics.mdx'

<Analytics />

----------------------------------------

TITLE: SIWE Authentication Response Handler - Kotlin
DESCRIPTION: Implements callback for handling SIWE authentication responses in fallback scenarios where One-Click Auth is not supported.

LANGUAGE: kotlin
CODE:
override fun onSIWEAuthenticationResponse(response: Modal.Model.SIWEAuthenticateResponse) {
    if (response is Modal.Model.SIWEAuthenticateResponse.Result) {
        // message and signature
    } else {
        //error
    }
}

----------------------------------------

TITLE: Rendering SiwxCloudAuth Component in JSX
DESCRIPTION: This code shows how to render the imported SiwxCloudAuth component within a JSX file, which will display the cloud authentication interface for SIWX.

LANGUAGE: jsx
CODE:
<SiwxCloudAuth />

----------------------------------------

TITLE: Rendering SiwxCloudAuth Component in JSX
DESCRIPTION: This code shows how to render the imported SiwxCloudAuth component within a JSX file, which will display the cloud authentication interface for SIWX.

LANGUAGE: jsx
CODE:
<SiwxCloudAuth />

----------------------------------------

TITLE: Configuring Auth Provider
DESCRIPTION: TypeScript configuration for setting up the auth provider and adding it to the default config as an extra connector.

LANGUAGE: typescript
CODE:
import { AuthProvider } from '@reown/appkit-auth-ethers-react-native'

const authProvider = new AuthProvider({ projectId, metadata })

const config = defaultConfig({
  metadata,
  extraConnectors: [authProvider]
})

----------------------------------------

TITLE: Creating .env File for Project ID
DESCRIPTION: Example of the .env file content for storing the AppKit project ID.

LANGUAGE: bash
CODE:
VITE_PROJECT_ID=<Add_your_project_id>

----------------------------------------

TITLE: Rejecting a Session in ReownWalletKit
DESCRIPTION: Handles session rejection by providing an error code and reason according to protocol specifications.

LANGUAGE: javascript
CODE:
_walletKit.onSessionProposal.subscribe((SessionProposalEvent? event) async {
  // display a prompt for the user to approve or reject the session
  // ....
  // If rejected
  await _walletKit.rejectSession(
    id: event.id,
    reason: Errors.getSdkError(Errors.USER_REJECTED).toSignError(),
  );
});

----------------------------------------

TITLE: Handling Session Authentication Response - Kotlin
DESCRIPTION: Callback implementation for handling SIWE session authentication responses, including success and failure scenarios.

LANGUAGE: kotlin
CODE:
fun onSessionAuthenticateResponse(response: Modal.Model.SessionAuthenticateResponse) {
    if (response is Modal.Model.SessionAuthenticateResponse.Result) {
        if (response.session != null) {
            // Authentication successful, session established
        } else {
            // Authentication successful, but no session created (SIWE-only flow)
        }
    } else {
        // Authentication request was rejected or failed
    }
}

----------------------------------------

TITLE: Importing and Rendering Swaps MDX Component
DESCRIPTION: Imports a Swaps component from a shared directory and renders it using MDX syntax. The component is imported using a relative path and rendered using JSX-style self-closing tag notation.

LANGUAGE: mdx
CODE:
import Swaps from '../../shared/swaps.mdx'

# Swaps

<Swaps/>

----------------------------------------

TITLE: Getting Connection Type - Kotlin
DESCRIPTION: Returns information about the current connection type.

LANGUAGE: kotlin
CODE:
AppKit.getConnectorType()

----------------------------------------

TITLE: Configuring Solana Adapter with Custom Wallet Adapters in TypeScript
DESCRIPTION: This snippet demonstrates how to set up a Solana adapter with custom wallet adapters like Phantom and Solflare for use with AppKit. It includes importing necessary dependencies, creating the Solana adapter, and configuring AppKit with the adapter.

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit/vue'
import { SolanaAdapter } from '@reown/appkit-adapter-solana/vue'
import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'

import { SolflareWalletAdapter, PhantomWalletAdapter } from '@solana/wallet-adapter-wallets'

// 0. Set up Solana adapter
const solanaWeb3JsAdapter = new SolanaAdapter({
  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()]
})

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Set up the metadata
const metadata = {
  //...
}

// 3. Create the modal
const modal = createAppKit({
  adapters: [solanaWeb3JsAdapter],
  networks: [solana, solanaTestnet, solanaDevnet],
  metadata: metadata,
  projectId,
  features: {
    analytics: true,
  }
})

----------------------------------------

TITLE: Adding New AppKit Imports in App.tsx
DESCRIPTION: Code snippet showing the addition of new AppKit imports in App.tsx.

LANGUAGE: tsx
CODE:
/* highlight-add-start */
+ import { createWeb3Modal, defaultSolanaConfig, useWeb3ModalAccount, useWeb3ModalProvider } from '@web3modal/solana/react'
+ import { solana, solanaTestnet, solanaDevnet } from '@web3modal/solana/chains'
/* highlight-add-end */

----------------------------------------

TITLE: Message Signing with ever_signMessage
DESCRIPTION: Signs a message that can be later sent to the blockchain. Includes value transfer parameters and destination payload details.

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "ever_processMessage",
  "params": {
        "source_address": "0:695e42...b8d",
        "value": 1000000000,
        "bounce": False,
        "destAddress": "0:b38d96...708",
        "destPayload": {
            "abi": "",
            "method": "",
            "params": {}
        }
    }
}

----------------------------------------

TITLE: Approving a Session in ReownWalletKit
DESCRIPTION: Handles session proposal events and approves sessions using the generatedNamespaces or custom approved namespaces.

LANGUAGE: javascript
CODE:
_walletKit.onSessionProposal.subscribe((SessionProposalEvent? event) {
  // display a prompt for the user to approve or reject the session
  // ....
  // If approved
  _walletKit.approveSession(
    id: event.id,
    namespaces: // event.params.generatedNamespaces! or approvedNamespaces,
  );
});

----------------------------------------

TITLE: Importing and Rendering Smart Account Component in JSX
DESCRIPTION: This snippet imports a shared MDX component for smart accounts and renders it within the current page. It demonstrates how to reuse documentation components across multiple pages.

LANGUAGE: jsx
CODE:
import SmartAccount from '../../shared/smart-accounts.mdx'

<SmartAccount />

----------------------------------------

TITLE: Installing AppKit with Ethers v5 for Vue
DESCRIPTION: npm command to install AppKit with Ethers v5 adapter and related dependencies for Vue projects.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2

----------------------------------------

TITLE: Monitoring WebSocket Connection State
DESCRIPTION: Shows how to track WebSocket connection state with the relay server.

LANGUAGE: typescript
CODE:
core.relayer.on("relayer_connect", () => {
    // connection to the relay server is established
})

core.relayer.on("relayer_disconnect", () => {
// connection to the relay server is lost
})

----------------------------------------

TITLE: Adding Event Listeners for Web
DESCRIPTION: Set up event listeners for various Notify Client events.

LANGUAGE: javascript
CODE:
notifyClient.on('notify_subscription', async ({ params }) => {
  const { error } = params

  if (error) {
    console.error('Setting up subscription failed: ', error)
  } else {
    console.log(`Subscribed successfully.`)
  }
})

notifyClient.on('notify_message', ({ params }) => {
  const { message } = params
  // Handle incoming notification
})

notifyClient.on('notify_update', ({ params }) => {
  const { error } = params

  if (error) {
    console.error('Setting up subscription failed: ', error)
  } else {
    console.log(`Successfully updated subscription scope.`)
  }
})

notifyClient.on('notify_subscriptions_changed', ({ params }) => {
  const { subscriptions } = params
  // Handle subscription changes
})

----------------------------------------

TITLE: Importing and Rendering Smart Account Component in JSX
DESCRIPTION: This code snippet imports a shared component for Smart Accounts and renders it within the page. It uses JSX syntax to include the component in the page content.

LANGUAGE: jsx
CODE:
import SmartAccount from '../../shared/smart-accounts.mdx'

<SmartAccount />

----------------------------------------

TITLE: Responding to Session Requests
DESCRIPTION: Shows how to handle and respond to session requests like signing messages

LANGUAGE: javascript
CODE:
walletKit.on('session_request', async (event: WalletKitTypes.SessionRequest) => {
  const { topic, params, id } = event
  const { request } = params
  const requestParamsMessage = request.params[0]

  // convert `requestParamsMessage` by using a method like hexToUtf8
  const message = hexToUtf8(requestParamsMessage)

  // sign the message
  const signedMessage = await wallet.signMessage(message)

  const response = { id, result: signedMessage, jsonrpc: '2.0' }

  await walletKit.respondSessionRequest({ topic, response })
})

----------------------------------------

TITLE: Importing AppKit Wallet Button in React
DESCRIPTION: Import statement to include the appkit-wallet-button library in a React project.

LANGUAGE: tsx
CODE:
import '@reown/appkit-wallet-button/react'

----------------------------------------

TITLE: Implementing Message Signing with AppKit Provider
DESCRIPTION: Shows how to use useAppKitProvider hook to sign messages using a Solana wallet provider. Demonstrates error handling and message encoding process.

LANGUAGE: tsx
CODE:
import { useAppKitAccount, useAppKitProvider } from '@reown/appkit/react'
import type { Provider } from '@reown/appkit-adapter-solana'

function SignMessage() {
  // 0. Get account and provider
  const { address } = useAppKitAccount()
  const { walletProvider } = useAppKitProvider<Provider>('solana')

  // 1. Create a function to sign a message
  async function onSignMessage() {
    try {
      if (!walletProvider || !address) {
        throw Error('user is disconnected')
      }

      // 2. Encode message and sign it
      const encodedMessage = new TextEncoder().encode('Hello from AppKit')
      const signature = await walletProvider.signMessage(encodedMessage)

      console.log(signature)
    } catch (err) {
      // Handle Error Here
    }
  }

  // 3. Create a button to trigger the function
  return <button onClick={onSignMessage}>Sign Message</button>
}

----------------------------------------

TITLE: Platform Selection Component JSX
DESCRIPTION: JSX markup for the platform selection interface using a Wrapper component with configuration for different platform options

LANGUAGE: javascript
CODE:
<Wrapper
  type="large"
  fit={false}
  items={[
    {
      name: 'Web',
      type: 'react',
      description: 'Upgrade to WalletKit in Web.',
      icon: reactLogo,
      href: './from-web3wallet-web'
    },
    {
      name: 'React Native',
      type: 'react-native',
      description: 'Upgrade to WalletKit in React Native.',
      icon: rnLogo,
      href: './from-web3wallet-react-native'
    },
    {
      name: 'Flutter',
      type: 'flutter',
      description: 'Upgrade to WalletKit in Flutter.',
      icon: flutterLogo,
      href: './from-web3wallet-flutter'
    },
    {
      name: 'Android',
      type: 'android',
      description: 'Upgrade to WalletKit in Android.',
      icon: androidLogo,
      href: './from-web3wallet-android'
    },
    {
      name: 'iOS',
      type: 'ios',
      description: 'Migrate to WalletKit in iOS.',
      icon: iosLogo,
      href: './from-web3wallet-ios',
      isWhite: true
    },
    {
      name: '.NET',
      type: 'csharp',
      description: 'Upgrade to WalletKit in .NET.',
      icon: '/assets/home/dotnet.svg',
      href: './from-web3wallet-unity',
      isWhite: true
    }
  ]}
/>

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install the project dependencies after migration.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Importing and Rendering Chain Abstraction Component in JSX
DESCRIPTION: This snippet imports a shared Chain Abstraction component and renders it within the current file. It uses JSX syntax, which is commonly used in React applications.

LANGUAGE: jsx
CODE:
import ChainAbstraction from '../../shared/chain-abstraction.mdx'

<ChainAbstraction />

----------------------------------------

TITLE: Importing and Rendering Analytics Component in JSX
DESCRIPTION: This snippet imports an Analytics component from a shared location and renders it within the page content. It demonstrates how to integrate analytics functionality into a React-based project page.

LANGUAGE: jsx
CODE:
import Analytics from '../../../cloud/analytics.mdx'

<Analytics />

----------------------------------------

TITLE: Approving a Session Proposal in Swift
DESCRIPTION: Demonstrates how to approve a session proposal using WalletKit and handle the resulting session.

LANGUAGE: swift
CODE:
WalletKit.instance.approve(
    proposalId: "proposal_id",
    namespaces: sessionNamespaces
)

WalletKit.instance.sessionsPublishers
    .receive(on: DispatchQueue.main)
    .sink { [weak self] _ in
        self?.reloadSessions()
    }.store(in: &publishers)

----------------------------------------

TITLE: Importing and Rendering Analytics Component in JSX
DESCRIPTION: This snippet imports an Analytics component from a shared location and renders it within the page content. It demonstrates how to integrate analytics functionality into a React-based project page.

LANGUAGE: jsx
CODE:
import Analytics from '../../../cloud/analytics.mdx'

<Analytics />

----------------------------------------

TITLE: Installing Native Modules for iOS using CocoaPods
DESCRIPTION: This command uses CocoaPods to install the native modules required for iOS development. It should be run after adding the dependencies to ensure all native code is properly integrated into the iOS project.

LANGUAGE: bash
CODE:
npx pod-install

----------------------------------------

TITLE: Importing SIWX Cloud Auth Component in JSX
DESCRIPTION: This code snippet demonstrates how to import a shared component for SIWX Cloud Authentication. The component is likely to contain reusable logic and UI elements for implementing Sign-In with X in a cloud environment.

LANGUAGE: jsx
CODE:
import SiwxCloudAuth from '../../shared/siwx/siwx-cloud-auth.mdx'

----------------------------------------

TITLE: Installing Ethers v6 Dependencies
DESCRIPTION: NPM installation command for Ethers v6-based AppKit implementation.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-ethers ethers

----------------------------------------

TITLE: Building Session Namespaces with AutoNamespaces in Swift
DESCRIPTION: Uses the AutoNamespaces utility to construct session namespaces based on the session proposal and user's chains, methods, events, and accounts.

LANGUAGE: swift
CODE:
do {
    sessionNamespaces = try AutoNamespaces.build(
        sessionProposal: proposal,
        chains: [Blockchain("eip155:1")!, Blockchain("eip155:137")!],
        methods: ["eth_sendTransaction", "personal_sign"],
        events: ["accountsChanged", "chainChanged"],
        accounts: [
            Account(blockchain: Blockchain("eip155:1")!, address: "0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb")!,
            Account(blockchain: Blockchain("eip155:137")!, address: "0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb")!
        ]
    )
} catch let error as AutoNamespacesError {
    // reject session proposal if AutoNamespace build function threw
    try await reject(proposal: proposal, reason: RejectionReason(from: error))
    return
}
// approve session with sessionNamespaces
try await WalletKit.instance.approve(proposalId: proposal.id, namespaces: sessionNamespaces)

----------------------------------------

TITLE: Account Login and Registration in Notify API
DESCRIPTION: Checks if an account is registered, prepares registration if needed, and registers the account using a signed SIWE message.

LANGUAGE: kotlin
CODE:
val account: String = ""// The CAIP-10 account i.e. "eip155:1:0xAbC1234567890DefABC1234567890dEFABC12345"
val domain = BuildConfig.APPLICATION_ID

// Caution: This function is blocking and runs on the current thread. It is advised that this function be called from background operation
val isRegistered = NotifyClient.isRegistered(params = Notify.Params.IsRegistered(account = account, domain = domain))

if (!isRegistered) {
    NotifyClient.prepareRegistration(
        params = Notify.Params.PrepareRegistration(account = account, domain = domain),
        onSuccess = { cacaoPayloadWithIdentityPrivateKey, message ->

            // Pick one of the following methods to sign the message:

            // 1. Using CacaoSigner to sign the message
            val signature = CacaoSigner.sign(
              message,
              PRIVATE_KEY, // Private key used to signing a message,
              SignatureType.EIP191
            )

            // 2. Alternatively, you can use your own signing method
            /** Add imports:
                import com.reown.android.cacao.signature.SignatureType
                import com.reown.android.internal.common.signing.signature.Signature
                import com.reown.android.internal.common.signing.signature.toCacaoSignature
             */

            val signature: String = // Here developers provide signed message using their own signing method
            val cacaoSignature = Notify.Model.Cacao.Signature(SignatureType.EIP191.header, Signature.fromString(signature).toCacaoSignature())

            // Once the message has been signed, call the register function

            NotifyClient.register(
                params = Notify.Params.Register(cacaoPayloadWithIdentityPrivateKey = cacaoPayloadWithIdentityPrivateKey, signature = signature),
                onSuccess = {
                  // Registration was successful
                 },
                onError = {
                  // There was an error while trying to register the account
                }
            )

        },
        onError = {
          // There was an error while trying to prepare the registration
        }
    )
} else {
  // Great! Account is already registered
}

----------------------------------------

TITLE: Importing and Rendering Blockchain API Documentation in MDX
DESCRIPTION: Imports a blockchain API documentation component from a relative path and renders it on the page. Uses MDX syntax to combine Markdown with JSX components.

LANGUAGE: mdx
CODE:
---
title: Blockchain API
---

import BlockchainAPI from '../../../cloud/blockchain-api.mdx'

<BlockchainAPI />

----------------------------------------

TITLE: Implementing AppKit Button with Web Component in React
DESCRIPTION: This snippet demonstrates how to use the AppKit web component to create a connect button in a React component. It uses the <appkit-button> element, which is a global HTML element that doesn't require importing.

LANGUAGE: tsx
CODE:
export default function ConnectButton() {
  return <appkit-button />
}

----------------------------------------

TITLE: Initializing AppKit with Default Chain Using Wagmi
DESCRIPTION: Configure AppKit with a default blockchain network using the wagmi library. This example shows setting Ethereum mainnet as the default chain.

LANGUAGE: typescript
CODE:
import { mainnet } from '@wagmi/core/chains'

createAppKit({
  //...
  defaultChain: mainnet
})

----------------------------------------

TITLE: Initializing ReownWalletKit in JavaScript
DESCRIPTION: Creates a new instance of ReownWalletKit with core and metadata parameters. Requires a project ID from Reown Cloud.

LANGUAGE: javascript
CODE:
final _walletKit = ReownWalletKit(
  core: ReownCore(
    projectId: '{YOUR_PROJECT_ID}',
  ),
  metadata: PairingMetadata(
    name: 'Example Wallet',
    description: 'Example wallet description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect(
      native: 'examplewallet://',
      universal: 'https://reown.com/examplewallet',
    ),
  ),
);

----------------------------------------

TITLE: Initializing ReownWalletKit in JavaScript
DESCRIPTION: Creates a new instance of ReownWalletKit with core and metadata parameters. Requires a project ID from Reown Cloud.

LANGUAGE: javascript
CODE:
final _walletKit = ReownWalletKit(
  core: ReownCore(
    projectId: '{YOUR_PROJECT_ID}',
  ),
  metadata: PairingMetadata(
    name: 'Example Wallet',
    description: 'Example wallet description',
    url: 'https://example.com/',
    icons: ['https://example.com/logo.png'],
    redirect: Redirect(
      native: 'examplewallet://',
      universal: 'https://reown.com/examplewallet',
    ),
  ),
);

----------------------------------------

TITLE: Importing Smart Sessions MDX Component
DESCRIPTION: Imports a shared Smart Sessions component from the project's shared directory and renders it within the page. Uses MDX syntax to combine Markdown with JSX components.

LANGUAGE: mdx
CODE:
---
title: Smart Sessions
---

import SmartSessions from '../../shared/smart-sessions.mdx'

<SmartSessions />

----------------------------------------

TITLE: iOS Wallet Detection Configuration
DESCRIPTION: XML configuration for enabling installed wallet detection on iOS devices through LSApplicationQueriesSchemes.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
    <dict>
        ...

        <key>LSApplicationQueriesSchemes</key>
        <array>
            <string>metamask</string>
            <string>trust</string>
            <string>safe</string>
            <string>rainbow</string>
            <string>uniswap</string>
            <string>zerion</string>
            <string>imtokenv2</string>
            <string>spot</string>
            <string>omni</string>
            <string>dfw</string>
            <string>tpoutside</string>
            <string>robinhood-wallet</string>
        </array>

        ...
    </dict>
</plist>

----------------------------------------

TITLE: Defining SignPSBTParams Type in TypeScript
DESCRIPTION: This snippet defines the SignPSBTParams type used for signing PSBTs. It includes the PSBT to be signed, signing inputs, and an optional broadcast flag.

LANGUAGE: typescript
CODE:
export type SignPSBTParams = {
  /**
   * The PSBT to be signed, string base64 encoded
   */
  psbt: string
  signInputs: {
    /**
     * The address whose private key to use for signing.
     */
    address: string
    /**
     * Specifies which input to sign
     */
    index: number
    /**
     * Specifies which part(s) of the transaction the signature commits to
     */
    sighashTypes: number[]
  }[]

  /**
   * If `true`, the PSBT will be broadcasted after signing. Default is `false`.
   */
  broadcast?: boolean
}

----------------------------------------

TITLE: Implementing WalletConnectModal for React Native
DESCRIPTION: Sets up WalletConnectModal with project ID and provider metadata for React Native.

LANGUAGE: javascript
CODE:
import '@walletconnect/react-native-compat'
import { WalletConnectModal } from '@walletconnect/modal-react-native'

const projectId = 'YOUR_PROJECT_ID'

const providerMetadata = {
  name: 'YOUR_PROJECT_NAME',
  description: 'YOUR_PROJECT_DESCRIPTION',
  url: 'https://your-project-website.com/',
  icons: ['https://your-project-logo.com/'],
  redirect: {
    native: 'YOUR_APP_SCHEME://',
    universal: 'YOUR_APP_UNIVERSAL_LINK.com'
  }
}

function App() {
  return (
    <>
      <WalletConnectModal projectId={projectId} providerMetadata={providerMetadata} />
    </>
  )
}

----------------------------------------

TITLE: Installing AppKit Dependencies for Solana in Next.js
DESCRIPTION: This command installs the necessary dependencies for using AppKit with Solana in a Next.js project.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets

----------------------------------------

TITLE: Importing and Rendering Verify Component in MDX
DESCRIPTION: Imports a Verify component from the cloud directory and renders it using JSX syntax in an MDX file. The component is imported using a relative path and rendered as a self-closing tag.

LANGUAGE: jsx
CODE:
import Verify from '../../../cloud/verify.mdx'

<Verify />

----------------------------------------

TITLE: Token Asset Management with ever_addTokenAsset
DESCRIPTION: Adds TIP-3 or native token assets to a selected account. Requires root contract address for token assets.

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "ever_addTokenAsset",
  "params": {
        "sourceAddress": "0:695e42...b8d",
        "rootContract": "0:b38d96...708"
    }
}

----------------------------------------

TITLE: Importing Multichain and Platform Components in JSX
DESCRIPTION: This snippet imports the Multichain component from a shared file and platform-specific tab components. It sets up the structure for displaying Multichain documentation with potential platform-specific variations.

LANGUAGE: jsx
CODE:
import Multichain from '../../shared/multichain.mdx'
import PlatformTabs from '../../../components/PlatformTabs'
import PlatformTabItem from '../../../components/PlatformTabItem'

<Multichain />

----------------------------------------

TITLE: Importing Platform Tab Components in React
DESCRIPTION: Import statements for PlatformTabs and PlatformTabItem components used to create platform-specific navigation in the documentation.

LANGUAGE: jsx
CODE:
import PlatformTabs from '../../../components/PlatformTabs'
import PlatformTabItem from '../../../components/PlatformTabItem'

----------------------------------------

TITLE: Importing Platform Tab Components in React
DESCRIPTION: Import statements for PlatformTabs and PlatformTabItem components used to create platform-specific navigation in the documentation.

LANGUAGE: jsx
CODE:
import PlatformTabs from '../../../components/PlatformTabs'
import PlatformTabItem from '../../../components/PlatformTabItem'

----------------------------------------

TITLE: Installing Reown WalletKit via NuGet in .NET
DESCRIPTION: This command adds the Reown.WalletKit package to your .NET project using the dotnet CLI. It installs the WalletKit client package, which is necessary for integrating WalletKit functionality into your application.

LANGUAGE: bash
CODE:
dotnet add package Reown.WalletKit

----------------------------------------

TITLE: Getting Chain ID in TypeScript
DESCRIPTION: This snippet illustrates how to obtain the current chain ID using the Reown AppKit.

LANGUAGE: typescript
CODE:
const chainId = modal.getChainId()

----------------------------------------

TITLE: Chain Management Operations
DESCRIPTION: Methods for managing blockchain network chains, including setting and retrieving the active chain.

LANGUAGE: csharp
CODE:
Chain newChain = ChainConstants.Chains.Ethereum;
await AppKit.NetworkController.ChangeActiveChainAsync(newChain);

LANGUAGE: csharp
CODE:
Chain activeChain = AppKit.NetworkController.ActiveChain;

----------------------------------------

TITLE: Defining Request Body Type for Sending Notifications in TypeScript
DESCRIPTION: This snippet defines the TypeScript type for the request body when sending notifications. It includes fields for notification_id, notification details, and target accounts.

LANGUAGE: typescript
CODE:
type RequestBody = {
  notification_id?: string | null
  notification: {
    type: string
    title: string
    body: string
    url?: string | null
  }
  accounts: string[]
}

----------------------------------------

TITLE: Configuring themeVariables in AppKit
DESCRIPTION: This snippet shows how to set custom theme variables in the AppKit configuration. In this example, the 'accent' color is being set to a specific hex value. These variables allow for customization of various theme elements.

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  themeVariables: {
    accent: '#00BB7F'
  }
})

----------------------------------------

TITLE: Configuring WalletKit Networking with Keychain Group
DESCRIPTION: Swift code for configuring the Networking Client with a shared keychain group for secure communication between the main app and notification service.

LANGUAGE: swift
CODE:
Networking.configure(
    groupIdentifier: "group.com.walletconnect.sdk",
    projectId: InputConfig.projectId,
    socketFactory: DefaultSocketFactory()
)

----------------------------------------

TITLE: Retrieving All Subscribers with Reown Notify API using JavaScript
DESCRIPTION: Demonstrates how to get a list of all subscribed accounts using the Reown Notify API with JavaScript. Uses fetch to make a GET request with the necessary authorization header.

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const response = await fetch(`https://notify.walletconnect.com/${PROJECT_ID}/subscribers`, {
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`
  }
})
const subscribers: string[] = await response.json()

----------------------------------------

TITLE: Implementing Network Button Component
DESCRIPTION: Shows how to implement the NetworkButton component in both Compose and XML layouts. Requires AppKitState for managing button state and interactions.

LANGUAGE: kotlin
CODE:
YourAppScreen(navController: NavController) {
    val appKitState = rememberAppKitState(navController = navController)
    NetworkButton(state = appKitState)
}

LANGUAGE: xml
CODE:
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:gravity="center"
    android:orientation="vertical">

        <com.reown.appkit.ui.components.button.views.NetworkButton
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
        />
</LinearLayout>

----------------------------------------

TITLE: Defining Request Body Type for Sending Notifications in TypeScript
DESCRIPTION: This snippet defines the TypeScript type for the request body when sending notifications. It includes fields for notification_id, notification details, and target accounts.

LANGUAGE: typescript
CODE:
type RequestBody = {
  notification_id?: string | null
  notification: {
    type: string
    title: string
    body: string
    url?: string | null
  }
  accounts: string[]
}

----------------------------------------

TITLE: Setting Explorer Recommended Wallets in Android
DESCRIPTION: Example of setting recommended wallet IDs for the WalletConnect Modal in Android using Kotlin.

LANGUAGE: kotlin
CODE:
val recommendedWalletsIds = listOf<String>(
    "1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369",
    "4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0"
)

val initParams = Modal.Params.Init(core = CoreClient, recommendedWalletsIds = recommendedWalletsIds)

WalletConnectModal.initialize(
    init = initParams,
    onSuccess = {
        // Callback will be called if initialization is successful
    },
    onError = { error ->
        // Error will be thrown if there's an issue during initialization
    }
)

----------------------------------------

TITLE: Defining Notification Interface in TypeScript
DESCRIPTION: This code snippet defines the interface for the notification object received in the 'notify_message' event. It specifies the structure and types of the notification's properties.

LANGUAGE: typescript
CODE:
interface NotifyNotification {
  title: string
  sentAt: number
  body: string
  id: string
  url: string | null
  type: string
}

----------------------------------------

TITLE: Account Logout from Notify API
DESCRIPTION: Logs out an account from the Notify API, removing all subscriptions and messages for this account from the client's storage.

LANGUAGE: kotlin
CODE:
val params = Notify.Params.Unregistration(/*CAIP-10 account*/)
NotifyClient.unregister(
  params,
  onSuccess = {
      // callback for when the unregistration was successful
  },
  onError = { error ->
    // callback for when the unregistration has failed
  }
)

----------------------------------------

TITLE: Using Reown AppKit in Vue Component
DESCRIPTION: Example of how to use Reown AppKit in a Vue component to open the modal.

LANGUAGE: Vue
CODE:
<template>
  <div>
    <button @click="openAppKit">Open</button>
  </div>
</template>

<script>
import { useAppKit } from "@reown/appkit/vue";

export default {
  name: "AppKitButton",
  setup() {
    const { open } = useAppKit();
    const openAppKit = () => open();

    return {
      openAppKit,
    };
  },
};
</script>

----------------------------------------

TITLE: Importing and Rendering Chain Abstraction Component in JSX
DESCRIPTION: This snippet imports a shared MDX component for chain abstraction and renders it within the current page. It uses JSX syntax to include the component.

LANGUAGE: jsx
CODE:
import ChainAbstraction from '../../shared/chain-abstraction.mdx'

<ChainAbstraction />

----------------------------------------

TITLE: Rejecting Authentication Requests in Kotlin
DESCRIPTION: Demonstrates how to reject an authentication request using the rejectSessionAuthenticate method when the request cannot be approved or if the user chooses to reject it.

LANGUAGE: kotlin
CODE:
val rejectParams = Wallet.Params.RejectSessionAuthenticate(
    id = sessionAuthenticate.id,
    reason = "Reason"
)

WalletKit.rejectSessionAuthenticate(rejectParams,
  onSuccess = {
        //Success
  },
  onError = { error ->
      //Handle error
  }
)

----------------------------------------

TITLE: Configuring Ethereum Provider
DESCRIPTION: Example of configuring the Ethereum Provider, including project ID, metadata, and optional chain settings.

LANGUAGE: javascript
CODE:
import { EthereumProvider } from '@walletconnect/ethereum-provider'

const provider = await EthereumProvider.init({
  projectId: 'YOUR_PROJECT_ID',
  metadata: {
    name: 'My Website',
    description: 'My Website Description',
    url: 'https://mywebsite.com', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/37784886']
  },
  showQrModal: true,
  optionalChains: [1, 137, 2020],

  /*Optional - Add custom RPCs for each supported chain*/
  rpcMap: {
    1: 'mainnet.rpc...',
    137: 'polygon.rpc...'
  }
})


// Connect EthereumProvider, this will open modal
await provider.connect()

----------------------------------------

TITLE: Listening for Realtime Messages with Web3InboxClient in TypeScript
DESCRIPTION: This snippet demonstrates how to use the useWeb3InboxClient hook to set up a listener for 'notify_message' events. It logs the title of each received notification to the console.

LANGUAGE: typescript
CODE:
const { data: client } = useWeb3InboxClient()

client.on('notify_message', ({ message }) => {
  console.log(notification.title)
})

----------------------------------------

TITLE: WebSocket Connection State Handling
DESCRIPTION: Shows how to implement connection state change handling using WalletDelegate.

LANGUAGE: kotlin
CODE:
val walletDelegate = object : WalletKit.WalletDelegate {
    override fun onConnectionStateChange(state: Wallet.Model.ConnectionState) {
        //Here this event is triggered when a connection state has changed
    }
    ...other callbacks
}
WalletKit.setWalletDelegate(walletDelegate)

----------------------------------------

TITLE: Ethers.js Implementation
DESCRIPTION: Implementation of smart contract interaction using Ethers.js library with AppKit provider

LANGUAGE: jsx
CODE:
import { useAppKitProvider  } from '@reown/appkit/react'
import { Contract, BrowserProvider } from 'ethers'
import type { Provider } from '@reown/appkit/react'

const { walletProvider } = useAppKitProvider<Provider>('eip155')

LANGUAGE: jsx
CODE:
const handleReadSmartContract = async () => {
  const ethersProvider = new BrowserProvider(walletProvider);
  const signer = await ethersProvider.getSigner()
  const contract = new Contract(storageSC, storageABI, signer);
  const data = await contract.retrieve();
  console.log("data: ", data)
}

const handleWriteSmartContract = async () => {
  const ethersProvider = new BrowserProvider(walletProvider);
  const signer = await ethersProvider.getSigner()
  const contract = new Contract(storageSC, storageABI, signer);
  const data = await contract.store(1n);
  console.log("data: ", data)
}

----------------------------------------

TITLE: Registering for Push Notifications in iOS
DESCRIPTION: Register for push notifications and handle device token registration.

LANGUAGE: swift
CODE:
func registerForPushNotifications() {
    UNUserNotificationCenter.current()
        .requestAuthorization(
            options: [.alert, .sound, .badge]
        ) { granted, error in
            guard granted else { return }
            DispatchQueue.main.async {
                UIApplication.shared.registerForRemoteNotifications()
            }
        }
}

func application(
  _ application: UIApplication,
  didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data
) {
    Task(priority: .high) {
        try await Notify.instance.register(deviceToken: deviceToken)
    }
}

----------------------------------------

TITLE: Installing AppKit and Uninstalling ConnectKit Dependencies
DESCRIPTION: Command to install Reown AppKit packages and remove ConnectKit dependency using npm or yarn.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-wagmi && npm uninstall connectkit

----------------------------------------

TITLE: WagmiAdapter Configuration Setup
DESCRIPTION: Configuration for WagmiAdapter including network setup and transport configuration

LANGUAGE: tsx
CODE:
import { cookieStorage, createStorage, http } from '@wagmi/core'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { mainnet, arbitrum } from '@reown/appkit/networks'
import { vTestnet } from '@/app/tenderly.config'

export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID

if (!projectId) {
  throw new Error('Project ID is not defined')
}

export const networks = [mainnet, arbitrum, vTestnet]

export const wagmiAdapter = new WagmiAdapter({
  storage: createStorage({
    storage: cookieStorage
  }),
  ssr: true,
  transports: {
    [vTestnet.id]: http(process.env.TENDERLY_VIRTUAL_TESTNET_RPC!)
  },
  networks,
  projectId
})

export const config = wagmiAdapter.wagmiConfig

----------------------------------------

TITLE: Using useAppKitEventSubscription Hook with Wagmi in React Native
DESCRIPTION: Demonstrates how to use the useAppKitEventSubscription hook from the @reown/appkit-wagmi-react-native package to subscribe to specific modal events.

LANGUAGE: typescript
CODE:
import { useAppKitEventSubscription } from '@reown/appkit-wagmi-react-native'

useAppKitEventSubscription('MODAL_OPEN', newEvent => {
  // your code here
});

----------------------------------------

TITLE: Implementing Custom SIWXMessenger
DESCRIPTION: Example of creating a custom SIWXMessenger by extending the base class and implementing required methods.

LANGUAGE: typescript
CODE:
import { SIWXMessenger } from '@reown/appkit-siwx'
import type { SIWXMessage } from '@reown/appkit-core'

export class MyMessenger extends SIWXMessenger {
  protected readonly version = '1'

  protected override stringify(params: SIWXMessage.Data): string {
    // Implement your message format here
    return `My message for ${params.accountAddress} on ${params.chainId}`
  }
}

----------------------------------------

TITLE: Configuring Session Parameters in React Native
DESCRIPTION: Default configuration for sessionParams in React Native, including namespaces, methods, chains, and events.

LANGUAGE: typescript
CODE:
sessionParams = {
  namespaces: {
    eip155: {
      methods: ['eth_sendTransaction', 'personal_sign'],
      chains: ['eip155:1'],
      events: ['chainChanged', 'accountsChanged'],
      rpcMap: {}
    }
  }
}

----------------------------------------

TITLE: Importing Platform Assets in React/JSX
DESCRIPTION: Import statements for loading platform-specific logo assets used in the navigation interface.

LANGUAGE: javascript
CODE:
import Wrapper from '../../components/Home/Wrapper'

import androidLogo from '../../../static/assets/home/androidLogo.png'
import iosLogo from '../../../static/assets/home/iosLogo.png'
import rnLogo from '../../../static/assets/home/rnLogo.png'
import flutterLogo from '../../../static/assets/home/flutterLogo.png'
import javascriptLogo from '../../../static/assets/home/javascriptLogo.png'

----------------------------------------

TITLE: Initializing Notify Client in Kotlin
DESCRIPTION: Creates a Notify.Params.Init object with CoreClient and initializes the Notify client. Requires a project ID and app metadata.

LANGUAGE: kotlin
CODE:
val projectId = PROJECT_ID
val appMetaData = Core.Model.AppMetaData(
    name = /* The name of your project as a String */,
    description = /* A description of your project as a String */,
    url = /* A url for your project as a String */,
    icons = /* A list of URLs to icons related to your project as Strings */,
    redirect = /* A redirect URI used by Dapps to deeplink back to your wallet. This is a String value  */
)

CoreClient.initialize(projectId = projectId, connectionType = ConnectionType.AUTOMATIC, application = this, metaData = appMetaData)

Notify.initialize(init = Notify.Params.Init(core = CoreClient) { error: Notify.Model.Error ->
    // Error will be thrown if there's an issue during initialization
}

----------------------------------------

TITLE: Importing Components Documentation in MDX
DESCRIPTION: MDX file structure that imports a shared components documentation file and renders it within the page using the Components component.

LANGUAGE: mdx
CODE:
---
title: Components
---

import Components from '../../shared/components.mdx'

# Web Components

<Components />

----------------------------------------

TITLE: Importing and Rendering Social Media Component in MDX
DESCRIPTION: Imports a reusable Socials component from a shared directory and renders it on the page. Uses MDX syntax to combine markdown with JSX components.

LANGUAGE: mdx
CODE:
---
title: Email & Socials
---

import Socials from '../../shared/socials.mdx'

<Socials />

----------------------------------------

TITLE: Creating a Notifications Component with Web3Inbox in React
DESCRIPTION: This snippet shows how to create a Notifications component using Web3Inbox hooks. It displays the number of unread notifications and a list of notifications with options to mark them as read.

LANGUAGE: tsx
CODE:
// Notifications.tsx
import { useNotifications } from '@web3inbox/react'
import React from 'react'
import styles from '@/styles/Notifications.module.css'

function Notifications() {
  const { data: subscription } = useSubscription()
  const { data: notifications } = useNotifications(5)

  return (
    <div>
      <h2 className={styles.heading}>Notifications</h2>
      <p>You have {subscription.unreadCount} unread notifications.</p>
      <div className={styles.notificationsContainer}>
        {!notifications?.length ? (
          <p className={styles.fallbackText}>No notifications yet.</p>
        ) : (
          notifications.map(({ id, ...message }) => (
            <div key={id} className={styles.message}>
              <h3>{message.title}</h3>
              <p>{message.body}</p>
              <p>{message.isRead ? 'Read' : 'Unread'}</p>
              <button onClick={message.markAsRead}>Mark as read</button>
            </div>
          ))
        )}
      </div>
      <button onClick={nextPage}>Next page</button>
    </div>
  )
}

export default Notifications

----------------------------------------

TITLE: Registering Identity Key for Web
DESCRIPTION: Register an identity key for cross-device account syncing.

LANGUAGE: javascript
CODE:
const account = `eip155:1:0x63Be2c680685d2A9620c11b0068291261aa62d76`
const domain =  'app.mydomain.com'
const allApps =  false

if (notifyClient.isRegistered({ account, domain, allApps })) return;

const {registerParams, message}  = notifyClient.prepareRegistration({
  account,
  domain,
  allApps
});

const signature = await ethersWallet.signMessage(message);

await notifyClient.register({
  registerParams,
  signature,
})

----------------------------------------

TITLE: Installing Solana Web3 Dependencies
DESCRIPTION: Command to install the Solana web3.js library for blockchain interactions

LANGUAGE: bash
CODE:
npm install @solana/web3.js

----------------------------------------

TITLE: Subscription Type Definition in TypeScript for Reown Project
DESCRIPTION: This code snippet defines the structure of a subscription object in the Reown project. It includes properties such as topic, account, relay options, metadata, scope, expiry, symkey, and unread count.

LANGUAGE: typescript
CODE:
{
  topic: string
  account: string
  relay: relayertypes.protocoloptions
  metadata: Metadata
  scope: ScopeMap
  expiry: number
  symkey: string
  unreadCount: number
}

----------------------------------------

TITLE: Updating Repository URL in Swift Package Manager
DESCRIPTION: Update the Package.swift file to point to the new reown-swift repository instead of the old WalletConnectSwiftV2 repository.

LANGUAGE: swift
CODE:
/* highlight-delete-start */
- .package(url: "https://github.com/WalletConnect/WalletConnectSwiftV2", from: "1.0.0"),
/* highlight-delete-end */
/* highlight-add-start */
+ .package(url: "https://github.com/reown-com/reown-swift", from: "1.0.0"),
/* highlight-add-end */

----------------------------------------

TITLE: History Pagination in Swift
DESCRIPTION: Implements pagination for fetching notification history with support for limit and cursor-based navigation.

LANGUAGE: swift
CODE:
func fetchHistory(subscription: NotifySubscription, after: String?, limit: Int) async throws -> Bool

----------------------------------------

TITLE: Configuring AppKit Basic in React
DESCRIPTION: Example of creating and configuring AppKit Basic in a React application, including project ID, metadata, and network settings.

LANGUAGE: javascript
CODE:
import { createAppKit } from '@reown/appkit/react'
import { mainnet } from '@reown/appkit/networks'

const modal = createAppKit({
  adapters: [], //pass an empty array to only use WalletConnect QR
  projectId: 'YOUR_PROJECT_ID',
  metadata: {
    name: 'My Website',
    description: 'My Website Description',
    url: 'https://mywebsite.com', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/37784886']
  },
  networks: [mainnet]
})

----------------------------------------

TITLE: Using useAppKitState Hook with Ethers in React Native
DESCRIPTION: Demonstrates how to use the useAppKitState hook from the @reown/appkit-ethers-react-native package to get the current value of the modal's state.

LANGUAGE: typescript
CODE:
import { useAppKitState } from '@reown/appkit-ethers-react-native'

const { open, selectedNetworkId } = useAppKitState()

----------------------------------------

TITLE: Submitting Signed Transaction to Polkadot Network in JavaScript
DESCRIPTION: Send the signed transaction to the Polkadot network and handle transaction status updates.

LANGUAGE: javascript
CODE:
const rawUnsignedTransaction = api.registry.createType('ExtrinsicPayload', unsignedTransaction, {
  version: unsignedTransaction.version
})

tx.addSignature(selectedWalletConnectAddress, result.signature, rawUnsignedTransaction)

// send the signed transaction to the node
const unsub = await tx.send(({ status, events }) => {
  // optionally handle ready status, notify user of submission
  if (status.isReady) {
    // ...
  }

  // optionally handle in block status, notify user of in block
  if (status.isInBlock) {
    // ...
  }

  // let user know outcome of transaction
  if (status.isFinalized) {
    events.forEach(({ event: { method } }) => {
      // if success optionally notify/update state
      if (method === 'ExtrinsicSuccess') {
        // ...
        unsub() // unsubscribe from extrinsic
      } else if (method === 'ExtrinsicFailed') {
        // on failure optionally notify/update state
        // ...
        unsub() // unsubscribe from extrinsic
      }
    })
  }
})

----------------------------------------

TITLE: Session Request Response Handling
DESCRIPTION: Kotlin implementation for handling session request responses in a wallet application, including redirect URI extraction and deep link handling.

LANGUAGE: kotlin
CODE:
val redirect = WalletKit.getActiveSessionByTopic(sessionRequest.topic)?.redirect?.toUri()
WalletKit.respondSessionRequest(response,
        onSuccess = {
        // trigger deeplink: redirect
    }
)

----------------------------------------

TITLE: Initializing WalletConnectModal in TypeScript
DESCRIPTION: Example of initializing WalletConnectModal with a project ID in TypeScript.

LANGUAGE: typescript
CODE:
new WalletConnectModal({
  projectId: 'YOUR_PROJECT_ID'
})

----------------------------------------

TITLE: Importing and Rendering Resources Component in MDX
DESCRIPTION: A minimal MDX page setup that imports a Resources component from a shared directory and renders it within the page content.

LANGUAGE: mdx
CODE:
---
title: Resources
---

import Resources from '../../shared/resources.mdx'

# Resources

<Resources />

----------------------------------------

TITLE: Importing SIWX Custom Component in MDX
DESCRIPTION: MDX import statement that includes a shared SIWX custom component from a relative path for documentation purposes.

LANGUAGE: mdx
CODE:
import SiwxCustom from '../../shared/siwx/siwx-custom.mdx'

----------------------------------------

TITLE: Importing and Rendering SmartSessions Component in MDX
DESCRIPTION: This code snippet imports a shared SmartSessions component and renders it within the current MDX file. It demonstrates how to include reusable documentation components in a project.

LANGUAGE: jsx
CODE:
import SmartSessions from '../../shared/smart-sessions.mdx'

<SmartSessions />

----------------------------------------

TITLE: Implementing Message Signing Function
DESCRIPTION: Function to sign a message using the connected wallet through Ethers JsonRpcSigner

LANGUAGE: jsx
CODE:
const handleSignMsg = async () => {
    const provider = new BrowserProvider(walletProvider, chainId);
    const signer = new JsonRpcSigner(provider, address);
    const signature = await signer?.signMessage('Hello Reown AppKit!');
    console.log(signature);
}

----------------------------------------

TITLE: Installing AppKit SIWX Package
DESCRIPTION: Command to install the required AppKit SIWX package via npm or yarn

LANGUAGE: bash
CODE:
npm install @reown/appkit-siwx

----------------------------------------

TITLE: Importing and Rendering Analytics Component in MDX
DESCRIPTION: Imports an Analytics component from a relative path and renders it using JSX syntax within an MDX file. Uses frontmatter for page title definition.

LANGUAGE: mdx
CODE:
---
title: Analytics
---

import Analytics from '../../../cloud/analytics.mdx'

<Analytics />

----------------------------------------

TITLE: Installing Ethereum Provider Package
DESCRIPTION: Command to install the @walletconnect/ethereum-provider package using npm or yarn.

LANGUAGE: bash
CODE:
npm install @walletconnect/ethereum-provider

----------------------------------------

TITLE: Triggering Web3Modal in JavaScript
DESCRIPTION: This code snippet shows how to trigger the Web3Modal in a JavaScript environment using a button click event.

LANGUAGE: js
CODE:
document.getElementById('my-button').addEventListener('click', () => {
  modal.open()
})

<button id="my-button">Connect Wallet</button>

----------------------------------------

TITLE: Handling Authentication Requests in Kotlin
DESCRIPTION: Sets up the WalletKit.WalletDelegate to handle incoming authentication requests. The onSessionAuthenticate callback is used to process these requests.

LANGUAGE: kotlin
CODE:
override val onSessionAuthenticate: ((Wallet.Model.SessionAuthenticate, Wallet.Model.VerifyContext) -> Unit)
  get() = { sessionAuthenticate, verifyContext ->
      // Triggered when wallet receives the session authenticate sent by a Dapp
      // Process the authentication request here
      // This involves displaying UI to the user
}

----------------------------------------

TITLE: Importing Required Dependencies for AppKit and Ethers
DESCRIPTION: Initial imports for AppKit hooks and Ethers components needed for blockchain interactions

LANGUAGE: jsx
CODE:
import { useAppKitAccount, useAppKitProvider, useAppKitNetworkCore, type Provider  } from '@reown/appkit/react'
import { BrowserProvider, JsonRpcSigner, formatEther, parseUnits } from 'ethers'

----------------------------------------

TITLE: Extracting Chain ID from SIWE Message in TypeScript
DESCRIPTION: This code snippet shows how to use the getChainIdFromMessage function to extract the chain ID from a SIWE message. It imports the function and calls it with the message as an argument.

LANGUAGE: typescript
CODE:
import { getChainIdFromMessage } from '@reown/appkit-siwe-react-native'

const chainId = getChainIdFromMessage(message)

----------------------------------------

TITLE: Initializing CoinbaseProvider and Adding to Default Config in TypeScript
DESCRIPTION: This snippet demonstrates how to create a CoinbaseProvider instance with a redirect URL and RPC URL, and then incorporate it into the default configuration. It emphasizes the preference for using universal links over custom schemes to avoid app verification warnings in Coinbase Wallet.

LANGUAGE: tsx
CODE:
import { CoinbaseProvider } from '@reown/appkit-coinbase-ethers-react-native'

const coinbaseProvider = new CoinbaseProvider({
  redirect: 'https://your-app-universal-link.com' || 'YOUR_APP_SCHEME://'
  rpcUrl: mainnet.rpcUrl
})

const config = defaultConfig({
  metadata,
  coinbase: coinbaseProvider
})

----------------------------------------

TITLE: Extracting WalletConnect Account Addresses in JavaScript
DESCRIPTION: Parse the WalletConnect session to extract connected account addresses for use in transactions.

LANGUAGE: javascript
CODE:
const walletConnectAccount = Object.values(walletConnectSession.namespaces)
  .map(namespace => namespace.accounts)
  .flat()

// grab account addresses from CAIP account formatted accounts
const accounts = wcAccounts.map(wcAccount => {
  const address = wcAccount.split(':')[2]
  return address
})

----------------------------------------

TITLE: Importing and Rendering Blockchain API Documentation in JSX
DESCRIPTION: This snippet imports the BlockchainAPI component from a separate file and renders it within the current document. It uses JSX syntax to include the external component.

LANGUAGE: JSX
CODE:
import BlockchainAPI from '../../../cloud/blockchain-api.mdx'

<BlockchainAPI />

----------------------------------------

TITLE: Managing Subscriptions for Web
DESCRIPTION: Create, update, and delete subscriptions using the Notify Client.

LANGUAGE: javascript
CODE:
// Create subscription
const appDomain = new URL(fetchedExplorerDapp.platform_browser).hostname
await notifyClient.subscribe({
  account,
  appDomain
})

// Update subscription
await notifyClient.update({
  topic,
  scope: ['alerts']
})

// Delete subscription
await notifyClient.deleteSubscription({ topic })

// Get active subscriptions
const accountSubscriptions = notifyClient.getActiveSubscriptions({
  account: `eip155:1:0x63Be...`
})

// Get notification history
const messageHistory = notifyClient.getNotificationHistory({ topic })

----------------------------------------

TITLE: Initializing WalletKit with Link Mode in Kotlin
DESCRIPTION: This snippet demonstrates how to initialize WalletKit with Link Mode enabled. It configures the AppMetaData with a valid universal link and sets the linkMode property to true.

LANGUAGE: kotlin
CODE:
 val appMetaData = Core.Model.AppMetaData(
    ...
    /* highlight-add-start */
    appLink = "https://example.com/example_wallet",
    linkMode = true
    /* highlight-add-end */
)

CoreClient.initialize(
   metaData: appMetaData,
    ...
)

WalletKit.initialize(Wallet.Params.Init(core = CoreClient))

----------------------------------------

TITLE: Handling Authentication Requests in Kotlin
DESCRIPTION: Sets up the WalletKit.WalletDelegate to handle incoming authentication requests. The onSessionAuthenticate callback is used to process these requests.

LANGUAGE: kotlin
CODE:
override val onSessionAuthenticate: ((Wallet.Model.SessionAuthenticate, Wallet.Model.VerifyContext) -> Unit)
  get() = { sessionAuthenticate, verifyContext ->
      // Triggered when wallet receives the session authenticate sent by a Dapp
      // Process the authentication request here
      // This involves displaying UI to the user
}

----------------------------------------

TITLE: Importing List Component in JavaScript
DESCRIPTION: Imports the List component from a relative path, likely used to display the list of supported chains.

LANGUAGE: javascript
CODE:
import List from '../../components/List.js'

----------------------------------------

TITLE: Updating Imports for React Implementation
DESCRIPTION: Changes required in import statements when migrating from Web3Modal v5 to Reown AppKit in React.

LANGUAGE: tsx
CODE:
import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'
import { createAppKit } from '@reown/appkit/react'
import { SolanaAdapter } from '@reown/appkit-adapter-solana/react'

----------------------------------------

TITLE: Signing a Message with Bitcoin Wallet using AppKit in React
DESCRIPTION: Function to prompt the wallet for message signing using AppKit's walletProvider.

LANGUAGE: javascript
CODE:
const handleSignMsg = async () => {
    const signature = await walletProvider.signMessage({
      address,
      message: "Hello Reown AppKit!"
    });
 
    console.log(signature);
}

----------------------------------------

TITLE: Importing AppKit Hooks for Bitcoin Interaction in React
DESCRIPTION: Import necessary hooks from Reown AppKit to interact with Bitcoin wallets and blockchain.

LANGUAGE: javascript
CODE:
import { useAppKitProvider, useAppKitAccount } from '@reown/appkit/react';
import type { BitcoinConnector } from '@reown/appkit-adapter-bitcoin';

----------------------------------------

TITLE: Retrieving Errors with getError Function in Vue
DESCRIPTION: This code snippet demonstrates how to use the getError function from the modal object to retrieve error information in a Vue component.

LANGUAGE: ts
CODE:
function Components() {
  const error = modal.getError();
  //...
}

----------------------------------------

TITLE: Importing SIWX Cloud Auth Component in Markdown
DESCRIPTION: This snippet demonstrates how to import a custom React component for SIWX Cloud Authentication into a Markdown file. It uses the MDX format to combine Markdown with JSX.

LANGUAGE: markdown
CODE:
import SiwxCloudAuth from '../../shared/siwx/siwx-cloud-auth.mdx'

----------------------------------------

TITLE: Updating Coinbase Wallet import for Wagmi
DESCRIPTION: Update the import statement for the Coinbase connector. This change is necessary to use the new AppKit Coinbase package.

LANGUAGE: tsx
CODE:
import { coinbaseConnector } from '@reown/appkit-coinbase-wagmi-react-native';

----------------------------------------

TITLE: Configuring AppKit Link Mode - Kotlin
DESCRIPTION: Sets up link mode configuration for AppKit, enabling low-latency authentication via universal links.

LANGUAGE: kotlin
CODE:
val appMetaData = Core.Model.AppMetaData(
    ...
    appLink = "https://example.com/example_dapp",
    linkMode = true
)

CoreClient.initialize(
   metaData: appMetaData,
    ...
)

AppKit.initialize(Modal.Params.Init(core = CoreClient))

----------------------------------------

TITLE: Chain Abstraction Usage Example in Swift
DESCRIPTION: This code snippet demonstrates how to use the prepare and execute methods for chain abstraction. It includes error handling and signing of transaction hashes.

LANGUAGE: swift
CODE:
let routeResponseSuccess = try await WalletKit.instance.ChainAbstraction.prepare(
    chainId: selectedNetwork.chainId.absoluteString,
    from: myAccount.address,
    call: call,
    accounts: caip10Accounts,
    localCurrency: .usd
)

switch routeResponseSuccess {
case .success(let routeResponse):
    switch routeResponse {
    case .available(let UiFileds):
        // If the route is available, present a CA transaction flow
        for txnDetails in uiFields.route {
            let hash = txnDetails.transactionHashToSign
            let sig = try! signer.signHash(hash)
            routeTxnSigs.append(sig)
        }
        
        // sign initial transaction hash
        let initialTxHash = uiFields.initial.transactionHashToSign
        let initialTxnSig = try! signer.signHash(initialTxHash)      
        
        let executeDetails = try await WalletKit.instance.ChainAbstraction.execute(uiFields: uiFields, routeTxnSigs: routeTxnSigs, initialTxnSig: initialTxnSig)
        
    case .notRequired:
        // user does not need to move funds from other chains, sign and broadcast original transaction
        
    }
case .error(let routeResponseError):
    // Show an error
}


----------------------------------------

TITLE: Importing WalletConnect Dependencies in JavaScript
DESCRIPTION: Import the necessary WalletConnect modules for universal provider and modal functionality.

LANGUAGE: javascript
CODE:
import UniversalProvider from '@walletconnect/universal-provider'
import { WalletConnectModal } from '@walletconnect/modal'

----------------------------------------

TITLE: Initializing WalletConnectSignClient for C#
DESCRIPTION: Initialize the WalletConnectSignClient for C# applications.

LANGUAGE: csharp
CODE:
var walletOptions = new SignClientOptions()
{
    ProjectId = "39f3dc0a2c604ec9885799f9fc5feb7c",
    Metadata = new Metadata()
    {
        Description = "An example wallet to showcase WalletConnectSharpv2",
        Icons = new[] { "https://walletconnect.com/meta/favicon.ico" },
        Name = "WalletConnectSharpv2 Wallet Example",
        Url = "https://walletconnect.com"
    }
};

var walletClient = await WalletConnectSignClient.Init(walletOptions);

----------------------------------------

TITLE: Sending Messages with ever_sendMessage
DESCRIPTION: Creates and sends a message to the network, monitoring its processing and returning the transaction ID. Includes parameters for value transfer and destination details.

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "ever_sendMessage",
  "params": {
        "source_address": "0:695e42...b8d",
        "value": 1000000000,
        "bounce": False,
        "destAddress": "0:b38d96...708",
        "destPayload": {
            "abi": "",
            "method": "",
            "params": {}
        }
    }
}

----------------------------------------

TITLE: Rendering List Component in Markdown
DESCRIPTION: Renders the List component within the Markdown content, which will display the list of supported chains with interactive features.

LANGUAGE: markdown
CODE:
<List />

----------------------------------------

TITLE: Importing Smart Account Component in MDX
DESCRIPTION: Imports a reusable Smart Account component from a shared location and renders it in the current documentation page using MDX syntax.

LANGUAGE: mdx
CODE:
---
title: Smart Accounts
---

import SmartAccount from '../../shared/smart-accounts.mdx'

<SmartAccount />

----------------------------------------

TITLE: Configuring AppKit v5 with Advanced Settings in React
DESCRIPTION: This code snippet shows how to configure AppKit v5 using advanced custom settings in a React environment. It includes importing necessary modules, creating a custom Wagmi configuration with specific chains and connectors, and initializing the Web3Modal.

LANGUAGE: tsx
CODE:
import { createWeb3Modal } from '@web3modal/wagmi/react'
import { WagmiConfig, configureChains, createConfig } from 'wagmi'
import { http, createConfig, WagmiProvider } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'
import { walletConnect, injected, coinbaseWallet } from 'wagmi/connectors'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

const projectId = 'YOUR_PROJECT_ID'

const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://example.com',
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

const wagmiConfig = createConfig({
  chains: [mainnet, sepolia],
  transports: {
    [mainnet.id]: http(),
    [sepolia.id]: http()
  },
  connectors: [
    walletConnect({ projectId, metadata, showQrModal: false }),
    injected({ shimDisconnect: true }),
    coinbaseWallet({
      appName: metadata.name,
      appLogoUrl: metadata.icons[0]
    })
  ]
})

createWeb3Modal({
  wagmiConfig,
  projectId,
  enableAnalytics: true
})

export default function App() {
  return (
    <>
      <WagmiConfig config={wagmiConfig}>
        <QueryClientProvider client={queryClient}>
          <HomePage />
        </QueryClientProvider>
      </WagmiConfig>
    </>
  )
}

----------------------------------------

TITLE: Implementing Solana Transaction Function
DESCRIPTION: Function to create and send a Solana transaction using AppKit and web3.js.

LANGUAGE: tsx
CODE:
const handleSendTransaction = async () => {
  if (!walletProvider || !address || !connection) {
    // walletProvider, connection or address are undefined
    return
  }

  // Recipient address
  const recipientAddress = new PublicKey('DG1Bq6muEMqaW6MHzWZFfQ8MmHiwvEuQcjVefVmPoV3j')

  // Create a new transaction
  const transaction = new Transaction().add(
    SystemProgram.transfer({
      fromPubkey: walletProvider.publicKey,
      toPubkey: recipientAddress,
      lamports: 10000000 //0.01 SOL
    })
  )
  transaction.feePayer = walletProvider.publicKey

  const { blockhash } = await connection.getLatestBlockhash()
  transaction.recentBlockhash = blockhash
  const tx = await walletProvider.sendTransaction(transaction, connection as Connection)
}

----------------------------------------

TITLE: Chaining Conditional Checks in JSON Policy
DESCRIPTION: Demonstrates how to chain multiple conditional checks in a Reown Paymaster JSON policy, using 'ands' and 'ors' to create complex policy logic.

LANGUAGE: json
CODE:
{
  "params": {
    "key": "callData",
    "op": "callDataToEquals",
    "value": "0xa123cd918..."
  },
  "ands": [
    {
      "params": {
        "key": "callData",
        "op": "callDataMethodEquals",
        "value": "methodFoo"
      },
      "ors": [
        {
          "params": {
            "key": "callData",
            "op": "callDataMethodEquals",
            "value": "methodBar"
          }
        },
        {
          "params": {
            "key": "callData",
            "op": "callDataMethodEquals",
            "value": "methodBaz"
          }
        }
      ]
    }
  ]
}

----------------------------------------

TITLE: Starting the Migrated Solana AppKit Project
DESCRIPTION: Command to start the development server for the migrated Solana AppKit project.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Defining Color Attributes in XML for View System
DESCRIPTION: This XML snippet defines color attributes for the View system, allowing override of various theme colors including accent, foreground, background, and utility colors.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>

<resources>
    <attr name="modalAccent100" format="color"/>
    <attr name="modalAccent90" format="color"/>
    <attr name="modalAccent80" format="color"/>
    <attr name="modalForeground100" format="color"/>
    <attr name="modalForeground125" format="color"/>
    <attr name="modalForeground150" format="color"/>
    <attr name="modalForeground175" format="color"/>
    <attr name="modalForeground200" format="color"/>
    <attr name="modalForeground225" format="color"/>
    <attr name="modalForeground250" format="color"/>
    <attr name="modalForeground275" format="color"/>
    <attr name="modalForeground300" format="color"/>
    <attr name="modalBackground100" format="color"/>
    <attr name="modalBackground125" format="color"/>
    <attr name="modalBackground150" format="color"/>
    <attr name="modalBackground175" format="color"/>
    <attr name="modalBackground200" format="color"/>
    <attr name="modalBackground225" format="color"/>
    <attr name="modalBackground250" format="color"/>
    <attr name="modalBackground275" format="color"/>
    <attr name="modalBackground300" format="color"/>
    <attr name="modalGrayGlass" format="color"/>
    <attr name="modalSuccess" format="color"/>
    <attr name="modalError" format="color"/>

</resources>

----------------------------------------

TITLE: Configuring AppKit v5 with Default Settings in React
DESCRIPTION: This code snippet demonstrates how to configure AppKit v5 using default settings in a React environment. It includes importing necessary modules, creating a Wagmi configuration, and initializing the Web3Modal.

LANGUAGE: tsx
CODE:
import { createWeb3Modal } from '@web3modal/wagmi/react'
import { defaultWagmiConfig } from '@web3modal/wagmi/react/config'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { WagmiConfig } from 'wagmi'
import { arbitrum, mainnet } from 'viem/chains'

const chains = [arbitrum, mainnet]
const projectId = 'YOUR_PROJECT_ID'

const queryClient = new QueryClient()

const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://example.com',
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

const wagmiConfig = defaultWagmiConfig({ chains, projectId, metadata })

createWeb3Modal({ wagmiConfig, projectId, chains })

export default function App() {
  return (
    <>
      <WagmiConfig config={wagmiConfig}>
        <QueryClientProvider client={queryClient}>
          <HomePage />
        </QueryClientProvider>
      </WagmiConfig>
    </>
  )
}

----------------------------------------

TITLE: Defining AppKitTheme in XML for View System
DESCRIPTION: This XML snippet demonstrates how to define AppKitTheme in style.xml files for the View system. It shows how to set the modal mode and override colors.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <style name="AppKitTheme">
        <item name="modalMode">AUTO || LIGHT || DARK</item>
        /* Override colors */
    </style>
</resources>

----------------------------------------

TITLE: Importing Theming Component in MDX for reown Project
DESCRIPTION: This snippet imports a Theming component from a shared directory and includes it in the current MDX file. It sets up the structure for displaying theming documentation.

LANGUAGE: JavaScript
CODE:
import Theming from '../../shared/theming.mdx'

# Theming

<Theming />

----------------------------------------

TITLE: Importing and Rendering Relay Component in MDX
DESCRIPTION: Imports a Relay component from the cloud directory's relay.mdx file and renders it using JSX syntax. The component is imported using a relative path and then rendered using self-closing tag syntax.

LANGUAGE: mdx
CODE:
---
title: Relay
---

import Relay from '../../../cloud/relay.mdx'

<Relay />

----------------------------------------

TITLE: Configuring App Links in Android Manifest
DESCRIPTION: This XML snippet demonstrates how to configure App Links in the Android Manifest file. It sets up an intent filter with autoVerify set to true for handling HTTPS URLs.

LANGUAGE: xml
CODE:
<intent-filter android:autoVerify="true">
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />

    <data
        android:host="your_host"
        android:scheme="https">
</intent-filter>

----------------------------------------

TITLE: Retrieving Hedera Node Addresses with JSON-RPC
DESCRIPTION: Example of using the hedera_getNodeAddresses method to retrieve a list of Hedera network node addresses known to the controller. It shows the request format and the expected result format with an array of node addresses.

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "hedera_getNodeAddresses",
}

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": {
    "nodes": ["0.0.3", "0.0.4"]
  }
}

----------------------------------------

TITLE: Importing and Rendering Relay Documentation in React
DESCRIPTION: This code snippet imports a Relay component from a cloud source and renders it within the current component. It uses MDX syntax to integrate external documentation content.

LANGUAGE: jsx
CODE:
import Relay from '../../../cloud/relay.mdx'

<Relay />

----------------------------------------

TITLE: Setting up Event Listeners for Web
DESCRIPTION: Set up event listeners for various SignClient events in web applications.

LANGUAGE: javascript
CODE:
signClient.on('session_proposal', event => {
  // Handle session proposal
})

signClient.on('session_request', event => {
  // Handle session request
})

// Additional event listeners...

----------------------------------------

TITLE: Initializing WalletConnectModalService in Flutter
DESCRIPTION: Example of initializing WalletConnectModalService with a Web3App instance in Flutter.

LANGUAGE: javascript
CODE:
final Web3App web3App = await Web3App.createInstance(
  projectId: 'YOUR_PROJECT_ID',
  metadata: const PairingMetadata(
    name: 'Flutter Dapp Example',
    description: 'Flutter Dapp Example',
    url: 'https://www.walletconnect.com/',
    icons: ['https://walletconnect.com/walletconnect-logo.png'],
    redirect: Redirect(
      native: 'flutterdapp://',
      universal: 'https://www.walletconnect.com',
    ),
  ),
);

// Register callbacks on the Web3App you'd like to use

WalletConnectModalService service = WalletConnectModalService(
  web3App: web3App,
);

----------------------------------------

TITLE: Creating Next.js Application
DESCRIPTION: Command to create a new Next.js application named 'appkit-vTestnet-example'

LANGUAGE: bash
CODE:
npx create-next-app@latest appkit-vTestnet-example

----------------------------------------

TITLE: Telemetry Events Data Structure
DESCRIPTION: Example of error event telemetry data structure showing bundleId, timestamp and error properties tracked by the SDK.

LANGUAGE: json
CODE:
[
  {
    "eventId": "69e53f11-fd4b-4efc-8d36-1f60a9ac8207",
    "bundleId": "com.wallet.example",
    "timestamp": 1689611327943,
    "props": {
      "event": "ERROR",
      "type": "pairing_already_exists",
      "properties": {
        "topic": "topic1",
        "trace": [
          "pairing_started",
          "pairing_uri_validation_success",
          "pairing_uri_not_expired",
          "existing_pairing",
          "pairing_not_expired",
          "pairing_not_expired"
        ]
      }
    }
  },
  {
    "eventId": "69e53f11-fd4b-4efc-8d36-2321312fds",
    "bundleId": "com.wallet.example",
    "timestamp": 16896113234323,
    "props": {
      "event": "ERROR",
      "type": "session_approve_namespace_validation_failure",
      "properties": {
        "topic": "topic2",
        "trace": ["session_approve_started", "proposal_not_expired"]
      }
    }
  }
]

----------------------------------------

TITLE: Updating interface imports for WalletKit in JavaScript
DESCRIPTION: Replace the import statement for IWeb3Wallet with the new import for IWalletKit. This step updates any type definitions or interfaces used in the code to match the new WalletKit package.

LANGUAGE: javascript
CODE:
import { IWalletKit } from "@reown/walletkit";

----------------------------------------

TITLE: Importing and Rendering Analytics Component in JSX
DESCRIPTION: This snippet imports an Analytics component from a relative path and renders it within the current component. It uses JSX syntax, indicating it's part of a React application.

LANGUAGE: JSX
CODE:
import Analytics from '../../../cloud/analytics.mdx'

<Analytics />

----------------------------------------

TITLE: Importing and Rendering Analytics Component in JSX
DESCRIPTION: This snippet imports an Analytics component from a relative path and renders it within the current component. It uses JSX syntax, indicating it's part of a React application.

LANGUAGE: JSX
CODE:
import Analytics from '../../../cloud/analytics.mdx'

<Analytics />

----------------------------------------

TITLE: Updating Web3Provider Configuration
DESCRIPTION: Replacing ConnectKit provider configuration with Reown AppKit setup in the Web3Provider component. Includes WagmiAdapter configuration, network setup, and AppKit initialization.

LANGUAGE: tsx
CODE:
import React from 'react';

import { WagmiProvider, createConfig } from 'wagmi';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

// Include networks from AppKit
import { mainnet, arbitrum } from '@reown/appkit/networks'
import { createAppKit } from '@reown/appkit';
export const networks = [mainnet, arbitrum]

// If you were already using WalletConnect with ConnectKit, you can use the same projectId.
// If not, then get projectId from https://cloud.reown.com
export const projectId = "YOUR_PROJECT_ID";

//Set up the Wagmi Adapter (Config)
export const wagmiAdapter = new WagmiAdapter({
  networks,
  projectId
})

const queryClient = new QueryClient();

// Create the modal
const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
  }
})

export const Web3Provider = ({ children }: { children: React.ReactNode }) => {
  return (
    <WagmiProvider config={wagmiAdapter.wagmiConfig}>
      <QueryClientProvider client={queryClient}>
        {children}
      </QueryClientProvider>
    </WagmiProvider>
  );
};

----------------------------------------

TITLE: Updating AppKit Method Calls
DESCRIPTION: Examples showing how to update Web3Modal method calls to use the new AppKit syntax.

LANGUAGE: csharp
CODE:
AppKit.Open();

await AppKit.Evm.SendTransactionAsync(address, value);

----------------------------------------

TITLE: Importing Components and Assets in JavaScript/JSX
DESCRIPTION: This snippet demonstrates the import statements for various components and image assets used in the One-Click Auth documentation page. It includes imports for custom components, utility functions, and logo images for different frameworks and languages.

LANGUAGE: JavaScript
CODE:
import Button from '../../components/button/index.js'
import Container from '../../components/Container.js'
import Wrapper from '../../components/Home/Wrapper.js'
import W3MQuickStart from '../../components/W3MQuickStart.js'
import useBaseUrl from '@docusaurus/useBaseUrl'

import reactLogo from '../../../static/assets/home/reactLogo.png'
import nextjsLogo from '../../../static/assets/home/nextjsLogo.png'
import vueLogo from '../../../static/assets/home/vueLogo.png'
import javascriptLogo from '../../../static/assets/home/javascriptLogo.png'
import androidLogo from '../../../static/assets/home/androidLogo.png'
import iosLogo from '../../../static/assets/home/iosLogo.png'
import rnLogo from '../../../static/assets/home/rnLogo.png'
import flutterLogo from '../../../static/assets/home/flutterLogo.png'
import unityLogo from '../../../static/assets/home/unityLogo.png'

----------------------------------------

TITLE: Installing WalletConnect SDK via Cocoapods in Ruby
DESCRIPTION: This code snippet shows how to add the WalletConnect SDK to a Podfile for installation via Cocoapods. It includes two options: a simple pod declaration and an alternative with a specific git repository and version tag.

LANGUAGE: ruby
CODE:
pod 'reown-swift'

LANGUAGE: ruby
CODE:
pod 'reown-swift', :git => 'https://github.com/reown-com/reown-swift.git', :tag => '1.0.0'

----------------------------------------

TITLE: Updating Module Imports
DESCRIPTION: Shows how to update the import statement from Web3Wallet to WalletKit.

LANGUAGE: javascript
CODE:
import { WalletKit } from "@reown/walletkit";

----------------------------------------

TITLE: Error Handling with AppKit Modal
DESCRIPTION: Simple utility function to retrieve error state from AppKit modal instance.

LANGUAGE: typescript
CODE:
function Components() {
  const error = modal.getError();
  //...
}

----------------------------------------

TITLE: Subscription Management in Swift
DESCRIPTION: Handles dapp subscription functionality including subscribing, fetching active subscriptions, and managing notification history.

LANGUAGE: swift
CODE:
public func subscribe(appDomain: String, account: Account) async throws

public var subscriptionsPublisher: AnyPublisher<[NotifySubscription], Never>

public func getActiveSubscriptions(account: Account) -> [NotifySubscription]

public func getMessageHistory(topic: String) -> [NotifyMessageRecord]

----------------------------------------

TITLE: ProGuard Rules for Chain Abstraction in Android
DESCRIPTION: These ProGuard rules are necessary to prevent issues with minification when implementing chain abstraction in an Android application.

LANGUAGE: proguard
CODE:
-keepattributes *Annotation*

-keep class com.sun.jna.** { *; }
-keepclassmembers class com.sun.jna.** {
    native <methods>;
    *;
}

-keep class uniffi.** { *; }

# Preserve all public and protected fields and methods
-keepclassmembers class ** {
    public *;
    protected *;
}

-dontwarn uniffi.**
-dontwarn com.sun.jna.**

----------------------------------------

TITLE: Implementing AppKit Button Component in HTML Template
DESCRIPTION: Example showing how to use the appkit-button web component in an HTML template. The component is a global HTML element that doesn't require explicit importing.

LANGUAGE: html
CODE:
<template>
  <appkit-button />
</template>

----------------------------------------

TITLE: Updating package.json dependencies for WalletKit migration
DESCRIPTION: Replace the @walletconnect/web3wallet dependency with @reown/walletkit in the package.json file. This step updates the project's dependencies to use the new WalletKit package.

LANGUAGE: json
CODE:
{
"@reown/walletkit": "^1.0.0"
}

----------------------------------------

TITLE: Defining ENSProvider Interface in TypeScript
DESCRIPTION: Defines the interface for an ENS provider with methods to resolve ENS names to addresses and addresses to ENS names.

LANGUAGE: typescript
CODE:
export interface ENSProvider {
  getAddress(ensName: string): Promise<string>;
  getName(address: string): Promise<string>;
}

----------------------------------------

TITLE: Excluding Specific Wallets from AppKit Initialization in Kotlin
DESCRIPTION: This code snippet shows how to exclude specific wallets when initializing AppKit. It uses a list of wallet IDs to prevent certain wallets from appearing in the WalletGuide explorer.

LANGUAGE: kotlin
CODE:
val excludedWalletIds = listOf<String>(
    "1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369",
    "4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0"
)

val initParams = Modal.Params.Init(core = CoreClient, excludedWalletIds = excludedWalletIds)

AppKit.initialize(
    init = initParams,
    onSuccess = {
        // Callback will be called if initialization is successful
    },
    onError = { error ->
        // Error will be thrown if there's an issue during initialization
    }
)

----------------------------------------

TITLE: Installing React Native CLI Dependencies
DESCRIPTION: Command to install necessary packages for crypto functionality in React Native CLI environment.

LANGUAGE: bash
CODE:
yarn add react-native-quick-crypto react-native-quick-base64 stream-browserify @craftzdog/react-native-buffer babel-plugin-module-resolver

----------------------------------------

TITLE: Installing AppKit Wallet Button Package
DESCRIPTION: Command to install the appkit-wallet-button package using npm or yarn.

LANGUAGE: bash
CODE:
npm i @reown/appkit-wallet-button

----------------------------------------

TITLE: Updating Error Handling for WalletKit in TypeScript
DESCRIPTION: This snippet shows how to update error handling from the old Web3Wallet format to the new WalletKit format in TypeScript.

LANGUAGE: tsx
CODE:
/* highlight-delete-start */
Errors.getSdkError(Errors.USER_REJECTED);
/* highlight-delete-end */
/* highlight-add-start */
Errors.getSdkError(Errors.USER_REJECTED).toSignError();
/* highlight-add-end */

----------------------------------------

TITLE: Toggling Dark Mode in ReownAppKitModalTheme for Flutter
DESCRIPTION: Shows how to switch between light and dark themes using the isDarkMode parameter in ReownAppKitModalTheme.

LANGUAGE: javascript
CODE:
return ReownAppKitModalTheme(
  isDarkMode: _isDarkMode,
  child: MaterialApp(
    ...
  ),
);

----------------------------------------

TITLE: Installing WalletConnect for Android with Gradle
DESCRIPTION: Gradle configuration for installing WalletConnect v2 Sign protocol in Android projects. It includes repository setup in root build.gradle and dependency declarations in app build.gradle.

LANGUAGE: gradle
CODE:
allprojects {
 repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
 }
}

LANGUAGE: gradle
CODE:
implementation("com.walletconnect:android-core:release_version")
implementation("com.walletconnect:sign:release_version")

----------------------------------------

TITLE: Importing and Rendering Verify Component in JSX
DESCRIPTION: This snippet imports a Verify component from a relative path and renders it within JSX syntax. It demonstrates how to include a reusable component in a React-like environment.

LANGUAGE: JSX
CODE:
import Verify from '../../../cloud/verify.mdx'

<Verify />

----------------------------------------

TITLE: Theme Management
DESCRIPTION: Demonstrates theme-related functionality including setting/getting theme mode and variables, and subscribing to theme changes.

LANGUAGE: typescript
CODE:
const modal = createAppKit({ wagmiConfig, projectId })

modal.setThemeMode('dark')

const themeMode = modal.getThemeMode()

modal.setThemeVariables({ ... })

const themeMode = modal.getThemeVariables()

const unsubscribe = modal.subscribeTheme(newTheme => console.log(newTheme))

----------------------------------------

TITLE: Importing and Rendering Shared Resources Component in React
DESCRIPTION: This code snippet imports a shared Resources component from a relative path and renders it within a React functional component. It uses JSX syntax embedded in a Markdown file.

LANGUAGE: jsx
CODE:
import Resources from '../../shared/resources.mdx'

# Resources

<Resources />

----------------------------------------

TITLE: Importing and Rendering Relay Component in JSX
DESCRIPTION: This snippet imports the Relay component from a relative path and renders it within the current component. It uses JSX syntax, which is commonly used with React.

LANGUAGE: JSX
CODE:
import Relay from '../../../cloud/relay.mdx'

<Relay />

----------------------------------------

TITLE: Configuring Universal Links in iOS AppDelegate
DESCRIPTION: This Swift code snippet shows how to handle incoming Universal Links in the AppDelegate.mm file for an iOS app. It includes methods for handling both deep links and Universal Links.

LANGUAGE: swift
CODE:
#import <React/RCTLinkingManager.h>

// Enable deeplinks
- (BOOL)application:(UIApplication *)application
   openURL:(NSURL *)url
   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options
{
  return [RCTLinkingManager application:application openURL:url options:options];
}

// Enable Universal Links
- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity
 restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler
{
 return [RCTLinkingManager application:application
                  continueUserActivity:userActivity
                    restorationHandler:restorationHandler];
}

----------------------------------------

TITLE: Implementing AppKit Button Web Component in HTML Template
DESCRIPTION: Example showing the basic implementation of the AppKit button web component. This component is globally available and doesn't require explicit imports when using the AppKit framework.

LANGUAGE: html
CODE:
<template>
  <appkit-button />
</template>

----------------------------------------

TITLE: Subscribing to a New dApp with Notify API in JavaScript
DESCRIPTION: Shows how to subscribe to a new dApp to receive notifications, using the appDomain obtained from the Explorer API.

LANGUAGE: javascript
CODE:
const appDomain = new URL(fetchedExplorerDapp.platform_browser).hostname

await notifyClient.subscribe({
  account,
  appDomain
})

----------------------------------------

TITLE: Removing Old Imports in App.tsx
DESCRIPTION: Code snippet showing the removal of old Anza Adapter imports from App.tsx.

LANGUAGE: tsx
CODE:
/* highlight-delete-start */
- import { WalletAdapterNetwork } from '@solana/wallet-adapter-base';
- import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';
- import { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui';
/* highlight-delete-end */

----------------------------------------

TITLE: Customizing Reown AppKit Modal Buttons in Flutter
DESCRIPTION: This code demonstrates how to override the default AppKit Modal buttons with custom buttons in a Flutter application.

LANGUAGE: javascript
CODE:
AppKitModalConnectButton(
  appKit: _appKitModal,
  /* highlight-add-start */
  custom: MyCustomButton(
    onPressed: () {
      _appKitModal.openModalView();
    },
    child: const Text('CONNECT WALLET'),
  ),
  /* highlight-add-end */
),

----------------------------------------

TITLE: Importing CloudBanner and useBaseUrl in JavaScript
DESCRIPTION: Imports the CloudBanner component and useBaseUrl function from specific paths. These are likely used for rendering cloud-related UI elements and handling base URL functionality in a documentation site.

LANGUAGE: javascript
CODE:
import CloudBanner from '../../../components/CloudBanner'
import useBaseUrl from '@docusaurus/useBaseUrl'

----------------------------------------

TITLE: Initializing WalletKit in JavaScript
DESCRIPTION: Shows how to create a Core instance with a project ID, then initialize WalletKit with the core instance and metadata. This setup is essential for establishing connections between dapps and wallets.

LANGUAGE: javascript
CODE:
import { Core } from '@walletconnect/core'
import { WalletKit } from '@reown/walletkit'

const core = new Core({
  projectId: process.env.PROJECT_ID
})

const walletKit = await WalletKit.init({
  core, // <- pass the shared `core` instance
  metadata: {
    name: 'Demo React Native Wallet',
    description: 'Demo RN Wallet to interface with Dapps',
    url: 'www.walletconnect.com',
    icons: ['https://your_wallet_icon.png'],
    redirect: {
      native: 'yourwalletscheme://'
    }
  }
})

----------------------------------------

TITLE: Installing Solana Wallet Adapter Dependencies
DESCRIPTION: Command to install Solana wallet adapter package required for custom wallet integration.

LANGUAGE: bash
CODE:
npm install @solana/wallet-adapter-wallets

----------------------------------------

TITLE: Building Authentication Objects in Swift
DESCRIPTION: This function creates authentication objects for multiple blockchain networks. It generates payloads, formats messages, and signs them for each supported chain requested by the dApp. The function requires an authentication request, user account, and private key as inputs.

LANGUAGE: swift
CODE:
func buildAuthObjects(request: AuthenticationRequest, account: Account, privateKey: String) throws -> [AuthObject] {
    let requestedChains = Set(request.payload.chains.compactMap { Blockchain($0) })
    let supportedChains: Set<Blockchain> = [Blockchain("eip155:1")!, Blockchain("eip155:137")!, Blockchain("eip155:69")!]
    let commonChains = requestedChains.intersection(supportedChains)
    let supportedMethods = ["personal_sign", "eth_sendTransaction"]

    var authObjects = [AuthObject]()
    for chain in commonChains {
        let accountForChain = Account(blockchain: chain, address: account.address)!
        let supportedAuthPayload = try WalletKit.instance.buildAuthPayload(
            payload: request.payload,
            supportedEVMChains: Array(commonChains),
            supportedMethods: supportedMethods
        )
        let formattedMessage = try WalletKit.instance.formatAuthMessage(payload: supportedAuthPayload, account: accountForChain)
        let signature = // Assume `signMessage` is a function you've implemented to sign messages.
            signMessage(message: formattedMessage, privateKey: privateKey)

        let authObject = try WalletKit.instance.buildSignedAuthObject(
            authPayload: supportedAuthPayload,
            signature: signature,
            account: accountForChain
        )
        authObjects.append(authObject)
    }
    return authObjects
}

----------------------------------------

TITLE: Importing and Rendering Blockchain API Component in JSX
DESCRIPTION: This snippet imports a Blockchain API component from a relative path and renders it within the page. It uses JSX syntax to include the component.

LANGUAGE: jsx
CODE:
import BlockchainAPI from '../../../cloud/blockchain-api.mdx'

<BlockchainAPI />

----------------------------------------

TITLE: Opening AppKit Modal with Composables in HTML
DESCRIPTION: This snippet demonstrates how to use the useAppKit composable to open the AppKit modal. It includes two buttons: one to open the default connect modal and another to open the network modal specifically.

LANGUAGE: html
CODE:
<template>
  <button @click="modal.open()">Open Connect Modal</button>
  <button @click="modal.open({ view: 'Networks' })">Open Network Modal</button>
</template>

----------------------------------------

TITLE: Error Handling in AppKit
DESCRIPTION: Shows how to retrieve errors from the AppKit modal instance using the getError method.

LANGUAGE: ts
CODE:
function Components() {
  const error = modal.getError();
  //...
}

----------------------------------------

TITLE: Installing AppKit and Uninstalling RainbowKit
DESCRIPTION: Command to install AppKit and its wagmi adapter while uninstalling RainbowKit.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-wagmi && npm uninstall @rainbow-me/rainbowkit

----------------------------------------

TITLE: Updating Gradle Dependencies for AppKit in Android
DESCRIPTION: This snippet shows how to update the Gradle dependencies from Web3Modal to AppKit. It removes the old Web3Modal dependencies and adds the new AppKit dependencies.

LANGUAGE: groovy
CODE:
dependencies {
    implementation(platform("com.reown:android-bom:{BOM version}"))
    implementation("com.reown:android-core")
    implementation("com.reown:appkit")
}

----------------------------------------

TITLE: Importing and Rendering Analytics Component in JSX
DESCRIPTION: This snippet imports an Analytics component from a cloud-based MDX file and renders it within the current file. It demonstrates how to integrate external analytics functionality into the project.

LANGUAGE: JSX
CODE:
import Analytics from '../../../cloud/analytics.mdx'

<Analytics />

----------------------------------------

TITLE: Importing and Rendering Sponsored Transactions Component in React
DESCRIPTION: This code imports a shared MDX component for Sponsored Transactions and renders it within a Markdown-based documentation page. It demonstrates how to integrate reusable documentation components in a React-based documentation system.

LANGUAGE: javascript
CODE:
import SponsoredTransactions from '../../shared/sponsored-transactions.mdx'

# Sponsored Transactions

<SponsoredTransactions />

----------------------------------------

TITLE: Chain Switching Implementation
DESCRIPTION: Example of setting the default chain for the provider with optional RPC URL

LANGUAGE: typescript
CODE:
// set the default chain to 56
provider.setDefaultChain(`eip155:56`, rpcUrl?: string | undefined);

----------------------------------------

TITLE: Installing Legacy SIWE Packages in Node.js
DESCRIPTION: This command installs the packages required for implementing the legacy version of SIWE authentication in a Node.js environment. It includes additional dependencies compared to the One-Click Auth version.

LANGUAGE: bash
CODE:
npm i @reown/appkit-siwe siwe viem

----------------------------------------

TITLE: Installing Web3Inbox Widget Dependencies
DESCRIPTION: Command to install the required Web3Inbox core package and React widget component using npm or yarn package managers.

LANGUAGE: bash
CODE:
npm i @web3inbox/core @web3inbox/widget-react

----------------------------------------

TITLE: Managing Web3Inbox Accounts in TypeScript
DESCRIPTION: Illustrates the changes in account management, moving from setAccount to using the useWeb3InboxAccount hook. The new method returns account data directly.

LANGUAGE: typescript
CODE:
/* highlight-delete-start */
- import { useW3iAccount } from "@web3inbox/widget-react"
/* highlight-delete-end */
/* highlight-add-start */
+ import { useWeb3InboxAccount } from "@web3inbox/react"
/* highlight-add-end */

/* highlight-delete-start */
- const { setAccount } = useW3iAccount()

setAccount(`eip155:1:0x...`)
/* highlight-delete-end */
/* highlight-add-start */
+ const { data: account } = useWeb3InboxAccount(`eip155:1:0x...`)
/* highlight-add-end */

----------------------------------------

TITLE: Configuring Sign Client for iOS
DESCRIPTION: Configure the Sign client for iOS applications.

LANGUAGE: swift
CODE:
Sign.configure(crypto: CryptoProvider)

----------------------------------------

TITLE: Opening Block Explorer in ReownAppKit (Flutter)
DESCRIPTION: This snippet demonstrates how to open the block explorer for the selected chain using ReownAppKit.

LANGUAGE: javascript
CODE:
_appKitModal.launchBlockExplorer();

----------------------------------------

TITLE: React Component Imports
DESCRIPTION: Import statements for React components and assets used in the documentation page.

LANGUAGE: javascript
CODE:
import Button from '../../components/button'
import Wrapper from '../../components/Home/Wrapper'
import useBaseUrl from '@docusaurus/useBaseUrl'

import reactLogo from '../../../static/assets/home/reactLogo.png'
import nextjsLogo from '../../../static/assets/home/nextjsLogo.png'
import vueLogo from '../../../static/assets/home/vueLogo.png'
import javascriptLogo from '../../../static/assets/home/javascriptLogo.png'

----------------------------------------

TITLE: Initializing WalletConnectModal for Flutter
DESCRIPTION: Creates a WalletConnectModalService instance with project ID and metadata for Flutter.

LANGUAGE: javascript
CODE:
WalletConnectModalService service = WalletConnectModalService(
  projectId: 'YOUR_PROJECT_ID',
  metadata: const PairingMetadata(
    name: 'Flutter WalletConnect',
    description: 'Flutter WalletConnectModal Sign Example',
    url: 'https://walletconnect.com/',
    icons: ['https://walletconnect.com/walletconnect-logo.png'],
    redirect: Redirect(
      native: 'flutterdapp://',
      universal: 'https://www.walletconnect.com',
    ),
  ),
);
await service.init();

----------------------------------------

TITLE: Configuring ConnectOptions in Unity
DESCRIPTION: Example of setting up ConnectOptions with required namespaces for the WalletConnect Modal in Unity using C#.

LANGUAGE: csharp
CODE:
ConnectOptions = new ConnectOptions
{
    RequiredNamespaces = new RequiredNamespaces
    {
        {
            "eip155", new ProposedNamespace
            {
                Methods = new[]
                {
                    "eth_sendTransaction",
                    "personal_sign",
                    "eth_signTypedData"
                },
                Chains = new[]
                {
                    "eip155:1"
                },
                Events = new[]
                {
                    "chainChanged",
                    "accountsChanged"
                },
            }
        }
    }
}

----------------------------------------

TITLE: Unsubscribing from a dApp with Notify API in JavaScript
DESCRIPTION: Demonstrates how to unsubscribe from a dApp to stop receiving notifications.

LANGUAGE: javascript
CODE:
notifyClient.deleteSubscription({ topic: 'subscription_topic_to_unsubscribe_from' })

----------------------------------------

TITLE: Setting Up AppKit with Ethereum Provider in TypeScript
DESCRIPTION: Example of creating an AppKit instance to use with the Ethereum Provider, including network configuration.

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit'
import { mainnet, arbitrum, sepolia } from '@reown/appkit/networks'

// 1. Get projectId from https://cloud.reown.com
const projectId = 'YOUR_PROJECT_ID'

// 2. Create the AppKit instance
const modal = createAppKit({
  networks: [mainnet, arbitrum, sepolia],
  projectId
})

----------------------------------------

TITLE: Importing and Rendering Relay Component in JSX
DESCRIPTION: This code snippet imports the Relay component from a shared MDX file and renders it within the current page. It demonstrates how to reuse documentation across multiple pages in a React-based documentation site.

LANGUAGE: jsx
CODE:
import Relay from '../../../cloud/relay.mdx'

<Relay />

----------------------------------------

TITLE: Installing SIWE Dependencies
DESCRIPTION: Installation commands for setting up SIWE with AppKit, including the required dependencies for both One-Click Auth and legacy implementations.

LANGUAGE: bash
CODE:
npm i @reown/appkit-siwe siwe

----------------------------------------

TITLE: Retrieving Wallet Address in TypeScript
DESCRIPTION: This snippet demonstrates how to get the current wallet address using the Reown AppKit.

LANGUAGE: typescript
CODE:
const address = modal.getAddress()

----------------------------------------

TITLE: Creating Authentication Payloads
DESCRIPTION: Demonstrates how to create and format authentication payloads including supported chains and methods. Shows CAIP-10 address formatting and message preparation.

LANGUAGE: javascript
CODE:
final supportedChains = ['eip155:1', 'eip155:10', 'eip155:137'];
final supportedMethods = ['personal_sign', 'eth_sendTransaction'];
final SessionAuthPayload authPayload = AuthSignature.populateAuthPayload(
  authPayload: args.authPayload,
  chains: supportedChains,
  methods: supportedMethods,
);
final cacaoRequestPayload = CacaoRequestPayload.fromSessionAuthPayload(
  newAuthPayload,
);

// Prepare the user's address in CAIP10(https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md) format
final iss = 'eip155:1:0x59e2f66C0E96803206B6486cDb39029abAE834c0';
// Now you can use the authPayload to format the authentication message
final message = _walletKit!.formatAuthMessage(
  iss: iss,
  cacaoPayload: cacaoRequestPayload,
);

// Present the authentication message to the user
...

----------------------------------------

TITLE: Importing and Rendering Verify Component in React
DESCRIPTION: This snippet imports a Verify component from a specific path and renders it within the current component. It uses MDX syntax to include external content.

LANGUAGE: JSX
CODE:
import Verify from '../../../cloud/verify.mdx'

<Verify />

----------------------------------------

TITLE: Installing WalletConnect for Flutter
DESCRIPTION: Command to install the WalletConnect client package for Flutter applications using pub. It also includes platform-specific setup instructions for MacOS.

LANGUAGE: dart
CODE:
flutter pub add walletconnect_flutter_v2

LANGUAGE: xml
CODE:
<key>com.apple.security.network.client</key>
<true/>

----------------------------------------

TITLE: Swift Package Configuration
DESCRIPTION: Swift package manifest configuration for integrating WalletConnectModal in iOS applications.

LANGUAGE: swift
CODE:
dependencies: [
  .package(
    name: "WalletConnectV2",
    url: "https://github.com/WalletConnectV2/WalletConnectSwiftV2.git",
    .upToNextMajor(from: "1.6.4")
  ),
]

----------------------------------------

TITLE: Building Docusaurus Site with LLMSTXT Generation
DESCRIPTION: Command to build the complete Docusaurus site including LLMSTXT file generation in a single step.

LANGUAGE: bash
CODE:
pnpm run build

----------------------------------------

TITLE: Rendering ReactPlayer Component for Solana Demo Video
DESCRIPTION: This JSX snippet renders a ReactPlayer component to display a looping Solana demo video, centered within a flex container.

LANGUAGE: jsx
CODE:
<div style={{
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
}}>
<ReactPlayer url={useBaseUrl('/img/Solana.mp4')} loop playing width="100%" height="100%"/>
</div>

----------------------------------------

TITLE: Retrieving Solana Wallet Accounts
DESCRIPTION: Method to fetch available public keys from a Solana wallet. Returns an array of account objects containing public keys.

LANGUAGE: typescript
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "solana_getAccounts",
  "params": {}
}

// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": [{ "pubkey": "722RdWmHC5TGXBjTejzNjbc8xEiduVDLqZvoUGz6Xzbp" }]
}

----------------------------------------

TITLE: Modal Management in C#
DESCRIPTION: Methods for opening and closing modal windows with different view types.

LANGUAGE: csharp
CODE:
// Open default view
AppKit.OpenModal();

// Open network selection view
AppKit.OpenModal(ViewType.NetworkSearch);

// Open account view
AppKit.OpenModal(ViewType.Account);

LANGUAGE: csharp
CODE:
AppKit.CloseModal();

----------------------------------------

TITLE: Importing useBaseUrl in JSX
DESCRIPTION: Import statement for the useBaseUrl utility from Docusaurus, used for handling image URLs in the documentation.

LANGUAGE: jsx
CODE:
import useBaseUrl from '@docusaurus/useBaseUrl'

----------------------------------------

TITLE: Installing AppKit SIWX Package
DESCRIPTION: Command to install the AppKit SIWX package using npm or yarn. This is a prerequisite for implementing SIWX in your project.

LANGUAGE: bash
CODE:
npm install @reown/appkit-siwx

----------------------------------------

TITLE: Implementing ENS Provider Class in TypeScript
DESCRIPTION: This code defines an ENSProvider class that interacts with the Ethereum Name Service. It includes methods for resolving names, getting primary names, and checking name availability. The class uses ethers.js for Ethereum interactions and requires a provider instance.

LANGUAGE: typescript
CODE:
import { ethers } from 'ethers';
import { Provider } from '@ethersproject/abstract-provider';

const ENS_REGISTRY_ADDRESS = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e';
const ENS_REGISTRY_ABI = [
  'function resolver(bytes32 node) public view returns (address)',
];

const ENS_RESOLVER_ABI = [
  'function addr(bytes32 node) public view returns (address)',
  'function name(bytes32 node) public view returns (string memory)',
];

export class ENSProvider {
  private provider: Provider;
  private ensRegistry: ethers.Contract;

  constructor(provider: Provider) {
    this.provider = provider;
    this.ensRegistry = new ethers.Contract(
      ENS_REGISTRY_ADDRESS,
      ENS_REGISTRY_ABI,
      provider
    );
  }

  async resolveName(name: string): Promise<string | null> {
    try {
      const address = await this.provider.resolveName(name);
      return address;
    } catch (error) {
      console.error('Error resolving ENS name:', error);
      return null;
    }
  }

  async getPrimaryName(address: string): Promise<string | null> {
    try {
      const reverseName = address.toLowerCase().substring(2) + '.addr.reverse';
      const resolverAddress = await this.ensRegistry.resolver(
        ethers.utils.namehash(reverseName)
      );

      if (resolverAddress === ethers.constants.AddressZero) {
        return null;
      }

      const resolver = new ethers.Contract(
        resolverAddress,
        ENS_RESOLVER_ABI,
        this.provider
      );

      const name = await resolver.name(ethers.utils.namehash(reverseName));
      return name || null;
    } catch (error) {
      console.error('Error getting primary ENS name:', error);
      return null;
    }
  }

  async isNameAvailable(name: string): Promise<boolean> {
    try {
      const address = await this.resolveName(name);
      return address === null;
    } catch (error) {
      console.error('Error checking ENS name availability:', error);
      return false;
    }
  }
}

----------------------------------------

TITLE: Creating Authentication Payloads in Kotlin
DESCRIPTION: Demonstrates how to create authentication objects (Wallet.Model.Cacao) by generating payload params, formatting authentication messages, and signing them for each supported chain.

LANGUAGE: kotlin
CODE:
override val onSessionAuthenticate: ((Wallet.Model.SessionAuthenticate, Wallet.Model.VerifyContext) -> Unit)
  get() = { sessionAuthenticate, verifyContext ->
  val auths = mutableListOf<Wallet.Model.Cacao>()

  val authPayloadParams =
    WalletKit.generateAuthPayloadParams(
      sessionAuthenticate.payloadParams,
      supportedChains = listOf("eip155:1", "eip155:137", "eip155:56"), // Note: Only EVM chains are supported
      supportedMethods = listOf("personal_sign", "eth_signTypedData", "eth_sign")
  )

  authPayloadParams.chains.forEach { chain ->
    val issuer = "did:pkh:$chain:$address"
    val formattedMessage = WalletKit.formatAuthMessage(Wallet.Params.FormatAuthMessage(authPayloadParams, issuer))

    val signature = signMessage(message: formattedMessage, privateKey: privateKey) //Note: Assume `signMessage` is a function you've implemented to sign messages.
    val auth = WalletKit.generateAuthObject(authPayloadParams, issuer, signature)
    auths.add(auth)
  }
}

----------------------------------------

TITLE: Direct Signing of Cosmos Transactions
DESCRIPTION: Signs a transaction document using direct signing method. Requires signer address and sign document containing chain ID, account number, and encoded transaction data.

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "cosmos_signDirect",
    "params": {
        "signerAddress": "cosmos1sguafvgmel6f880ryvq8efh9522p8zvmrzlcrq",
        "signDoc":  {
            "chainId": "cosmoshub-4",
            "accountNumber": "1"
            "authInfoBytes": "CgoKABIECgIIARgBEhMKDQoFdWNvc20SBDIwMDAQwJoM",
            "bodyBytes": "CpABChwvY29zbW9zLmJhbmsudjFiZXRhMS5Nc2dTZW5kEnAKLWNvc21vczFwa3B0cmU3ZmRrbDZnZnJ6bGVzamp2aHhobGMzcjRnbW1rOHJzNhItY29zbW9zMXF5cHF4cHE5cWNyc3N6ZzJwdnhxNnJzMHpxZzN5eWM1bHp2N3h1GhAKBXVjb3NtEgcxMjM0NTY3"
        }
    }
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result":  {
        "signature": {
            "pub_key": {
                "type": "tendermint/PubKeySecp256k1",
                "value": "AgSEjOuOr991QlHCORRmdE5ahVKeyBrmtgoYepCpQGOW"
            },
            "signature": "AnTrXtS2lr9CBwhTpRa8ZlKcVR9PeIXGaTpvodyJU05QvRKVjIkQfOZl5JhdkfxCY+a6rhwCOYVcbKQTJlMw4w=="
        },
        "signed": {
            "chainId": "cosmoshub-4",
            "accountNumber": "1"
            "authInfoBytes": "CgoKABIECgIIARgBEhMKDQoFdWNvc20SBDIwMDAQwJoM",
            "bodyBytes": "CpABChwvY29zbW9zLmJhbmsudjFiZXRhMS5Nc2dTZW5kEnAKLWNvc21vczFwa3B0cmU3ZmRrbDZnZnJ6bGVzamp2aHhobGMzcjRnbW1rOHJzNhItY29zbW9zMXF5cHF4cHE5cWNyc3N6ZzJwdnhxNnJzMHpxZzN5eWM1bHp2N3h1GhAKBXVjb3NtEgcxMjM0NTY3"
        }
    }
}

----------------------------------------

TITLE: Importing Migration Component in JSX
DESCRIPTION: This code snippet imports a Migration component from a specific path. The component is likely used to display migration-related information in the document.

LANGUAGE: jsx
CODE:
import Migration from '../../../shared/notifications/frontend-integration/migration/javascript.mdx'

----------------------------------------

TITLE: Implementing AppKit Button Using Web Component
DESCRIPTION: Shows how to implement the AppKit button using the web component approach. Web components are global HTML elements that don't require importing.

LANGUAGE: tsx
CODE:
export default function ConnectButton() {
  return <appkit-button />
}

----------------------------------------

TITLE: Creating Authentication Payloads in Kotlin
DESCRIPTION: Demonstrates how to create authentication objects (Wallet.Model.Cacao) by generating payload params, formatting authentication messages, and signing them for each supported chain.

LANGUAGE: kotlin
CODE:
override val onSessionAuthenticate: ((Wallet.Model.SessionAuthenticate, Wallet.Model.VerifyContext) -> Unit)
  get() = { sessionAuthenticate, verifyContext ->
  val auths = mutableListOf<Wallet.Model.Cacao>()

  val authPayloadParams =
    WalletKit.generateAuthPayloadParams(
      sessionAuthenticate.payloadParams,
      supportedChains = listOf("eip155:1", "eip155:137", "eip155:56"), // Note: Only EVM chains are supported
      supportedMethods = listOf("personal_sign", "eth_signTypedData", "eth_sign")
  )

  authPayloadParams.chains.forEach { chain ->
    val issuer = "did:pkh:$chain:$address"
    val formattedMessage = WalletKit.formatAuthMessage(Wallet.Params.FormatAuthMessage(authPayloadParams, issuer))

    val signature = signMessage(message: formattedMessage, privateKey: privateKey) //Note: Assume `signMessage` is a function you've implemented to sign messages.
    val auth = WalletKit.generateAuthObject(authPayloadParams, issuer, signature)
    auths.add(auth)
  }
}

----------------------------------------

TITLE: iOS Associated Domains Configuration
DESCRIPTION: XML configuration for enabling Associated Domains Capability in iOS apps to support Universal Links.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>com.apple.developer.associated-domains</key>
  <array>
    <string>applinks:your_dapp_universal_link.com</string>
  </array>
</dict>
</plist>

----------------------------------------

TITLE: iOS Associated Domains Configuration
DESCRIPTION: XML configuration for enabling Associated Domains Capability in iOS apps to support Universal Links.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>com.apple.developer.associated-domains</key>
  <array>
    <string>applinks:your_dapp_universal_link.com</string>
  </array>
</dict>
</plist>

----------------------------------------

TITLE: Installing WalletConnect Sign Client for Web
DESCRIPTION: Installs the WalletConnect Sign Client package for web applications using npm or yarn. For Node.js, it also requires the lokijs package for internal storage management.

LANGUAGE: bash
CODE:
npm install @walletconnect/sign-client

LANGUAGE: bash
CODE:
npm install --save @walletconnect/sign-client lokijs@1.x

----------------------------------------

TITLE: Importing Components and Assets in JavaScript
DESCRIPTION: This code snippet imports necessary components and image assets for the Smart Accounts feature page. It includes Button and Wrapper components, as well as logo images for various technologies.

LANGUAGE: javascript
CODE:
import Button from '../../components/button'
import Wrapper from '../../components/Home/Wrapper'

import reactLogo from '../../../static/assets/home/reactLogo.png'
import nextjsLogo from '../../../static/assets/home/nextjsLogo.png'
import vueLogo from '../../../static/assets/home/vueLogo.png'
import javascriptLogo from '../../../static/assets/home/javascriptLogo.png'

----------------------------------------

TITLE: Signing Typed Data in Starknet using JSON-RPC
DESCRIPTION: This snippet shows how to sign typed data in Starknet using the 'starknet_signTypedData' method. It includes the request parameters and the expected response format with the signature.

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "starknet_signTypedData",
  "params": ["0x003a8278a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64", {see above}]
}


// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": { "signature" : ["0x3a8278a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64", "0x072e509b6502e2bbc4a649052eb6c299d53a04e16605b915621c", "0x07897a1b93efb0eca126b44df4646", "0x072e509b6502e2bbc4a649052eb6c299d53a04e16605b915621c"] }
}

----------------------------------------

TITLE: Accessing Modal State with useAppKitState in Vue
DESCRIPTION: Demonstrates how to use the useAppKitState composable to get the current value of the modal's state, including whether it's open and the selected network ID.

LANGUAGE: typescript
CODE:
import { useAppKitState } from '@reown/appkit/vue'

const stateData = useAppKitState()

----------------------------------------

TITLE: Importing and Rendering Options Component in MDX
DESCRIPTION: This snippet imports a shared Options component and renders it within the page. It uses MDX syntax to combine Markdown with JSX.

LANGUAGE: mdx
CODE:
---
title: Options
---

import Options from '../../shared/options.mdx'

# Options

<Options />

----------------------------------------

TITLE: Approving WalletConnect Session with WalletKit
DESCRIPTION: This code snippet shows how to approve a WalletConnect session using WalletKit. It demonstrates how to provide the session proposal ID and the approved namespaces when creating a session.

LANGUAGE: javascript
CODE:
const session = await walletKit.approveSession({
  id: proposal.id,
  namespaces: {
    polkadot: {
      accounts: [
        'polkadot:91b171bb158e2d3848fa23a9f1c25182:AZBEwbZhYeiofodZnM2iAoshP3pXRPNSJEKFqEPDmvv1mY7'
      ],
      methods: ['polkadot_signTransaction', 'polkadot_signMessage'],
      chains: ['polkadot:91b171bb158e2d3848fa23a9f1c25182'],
      events: ['chainChanged', 'accountsChanged']
    }
  }
})

----------------------------------------

TITLE: Invoking grantPermissions Method in TypeScript
DESCRIPTION: Example of calling the grantPermissions function with the request object to trigger the permission request via the connected wallet.

LANGUAGE: typescript
CODE:
const response = await grantPermissions(request)

----------------------------------------

TITLE: Using useAppKitProvider Hook for Message Signing in Vue.js
DESCRIPTION: This snippet shows how to use the useAppKitProvider hook to sign a message using a Solana wallet provider. It includes error handling and a button component to trigger the signing process.

LANGUAGE: tsx
CODE:
import { useAppKitAccount, useAppKitProvider } from '@reown/appkit/vue'
import type { Provider } from '@reown/appkit-adapter-solana'

function SignMessage() {
  // 0. Get account and provider
  const { address } = useAppKitAccount()
  const { walletProvider } = useAppKitProvider<Provider>('solana')

  // 1. Create a function to sign a message
  async function onSignMessage() {
    try {
      if (!walletProvider || !address) {
        throw Error('user is disconnected')
      }

      // 2. Encode message and sign it
      const encodedMessage = new TextEncoder().encode('Hello from AppKit')
      const signature = await walletProvider.signMessage(encodedMessage)

      console.log(signature)
    } catch (err) {
      // Handle Error Here
    }
  }

  // 3. Create a button to trigger the function
  return <button onClick={onSignMessage}>Sign Message</button>
}

----------------------------------------

TITLE: Implementing AppKit Web Components in HTML
DESCRIPTION: This HTML snippet demonstrates the integration of AppKit web components (<appkit-button> and <appkit-network-button>) alongside traditional HTML buttons. It includes the basic structure of an HTML document with a div containing buttons and AppKit components.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>HTML Example</title>
  </head>
  <body>
    <div id="app">
      <button id="open-connect-modal">Open Modal</button>
      <button id="open-network-modal">Open Networks</button>
      /* highlight-add-start */
      <appkit-button></appkit-button>
      <appkit-network-button></appkit-network-button>
      /* highlight-add-end */
    </div>
    <script type="module" src="main.js"></script>
  </body>
</html>

----------------------------------------

TITLE: Rejecting Authentication Requests in TypeScript
DESCRIPTION: Shows how to reject authentication requests using the walletKit library with appropriate error handling.

LANGUAGE: typescript
CODE:
import { getSdkError } from '@walletconnect/utils'

await walletKit.rejectSessionAuthenticate({
  id: payload.id,
  reason: getSdkError('USER_REJECTED') // or choose a different reason if applicable
})

----------------------------------------

TITLE: Importing and Rendering Analytics Component in JSX
DESCRIPTION: This snippet imports an Analytics component from a relative path and renders it within the page. It demonstrates how to integrate a pre-defined analytics component into a React-based project.

LANGUAGE: jsx
CODE:
import Analytics from '../../../cloud/analytics.mdx'

<Analytics />

----------------------------------------

TITLE: Importing SIWX Custom Component in MDX
DESCRIPTION: MDX configuration for importing and displaying a custom SIWX component with associated navigation metadata

LANGUAGE: mdx
CODE:
---
title: SIWX Custom
displayed_sidebar: AppKit_Next
pagination_prev: appkit/next/core/siwx-default
---

import SiwxCustom from '../../shared/siwx/siwx-custom.mdx'

# SIWX Custom Usage

<SiwxCustom />

----------------------------------------

TITLE: Importing SIWX Custom Component in MDX
DESCRIPTION: MDX configuration for importing and displaying a custom SIWX component with associated navigation metadata

LANGUAGE: mdx
CODE:
---
title: SIWX Custom
displayed_sidebar: AppKit_Next
pagination_prev: appkit/next/core/siwx-default
---

import SiwxCustom from '../../shared/siwx/siwx-custom.mdx'

# SIWX Custom Usage

<SiwxCustom />

----------------------------------------

TITLE: BIP122 Addresses Changed Event Example
DESCRIPTION: Example of a session event payload for address changes notification, showing the format for communicating updated account addresses to dapps.

LANGUAGE: javascript
CODE:
{
  "id": 1675759795769537,
  "topic": "95d6aca451b8e3c6d9d176761bf786f1cc0a6d38dffd31ed896306bb37f6ae8d",
  "params": {
    "event": {
      "name": "bip122_addressesChanged",
      "data": [
        {
            "address": "ltc1q8c6fshw2dlwun7ekn9qwf37cu2rn755u9ym7p0",
            "path": "m/84'/2'/0'/0/0"
        },
        {
            "address": "LXkGhTKmZpviAtYdDaxWbiJsdg4tA6EzrU",
            "path": "m/49'/2'/0'/0/7"
        },
        {
            "address": "ltc1qj4plcuyhuzw0sycf99gcayzhhcddfj6xkcke5g",
            "path": "m/84'/2'/0'/0/2"
        },
        {
            "address": "ltc1qsdxa6pseqekqg5d3uksaxnwrey2s2ujcx03alc",
            "path": "m/84'/2'/0'/0/3"
        },
        {
            "address": "ltc1qhuvt3sq8xmx9ktzdfznkzvjl5zup7mg9zpwllw",
            "path": "m/84'/2'/0'/0/4"
        },
        {
            "address": "ltc1qtjd3y5a2axpwzfjcj4y9zy50qfjuxwzm0vu5fq",
            "path": "m/84'/2'/0'/1/3"
        },
        {
            "address": "ltc1qp7ujtprgl0quvcg0dj335p37r2mc2cxdc8xumq",
            "path": "m/84'/2'/0'/1/4"
        }
      ]
    },
    "chainId": "bip122:12a765e31ffd4059bada1e25190f6e98"
  }
}

----------------------------------------

TITLE: Notification Interface Definition in TypeScript
DESCRIPTION: Defines the structure of a notification object including properties like title, body, read status, and methods for interaction.

LANGUAGE: typescript
CODE:
{
  title: string
  sentAt: number
  body: string
  id: string
  isRead: boolean
  url: string | null
  type: string
  markAsRead: () => Promise<void>
}

----------------------------------------

TITLE: Installing Reown AppKit and Core Dependencies
DESCRIPTION: This command installs the Reown AppKit for React Native, along with Wagmi, Viem, and React Query. These are the core packages needed for integrating Reown functionality into a React Native app.

LANGUAGE: bash
CODE:
yarn add @reown/appkit-wagmi-react-native wagmi viem @tanstack/react-query

----------------------------------------

TITLE: Implementing AppKit Button Component in React TSX
DESCRIPTION: Example of using the global appkit-button web component in a React functional component. The component doesn't require explicit importing since AppKit web components are globally available HTML elements.

LANGUAGE: tsx
CODE:
export default function ConnectButton() {
  return <appkit-button />
}

----------------------------------------

TITLE: Importing and Rendering SIWX Custom Component in JSX
DESCRIPTION: This code snippet imports a shared MDX component for SIWX custom usage and renders it within the page content. It demonstrates how to include reusable documentation in a React-based documentation site.

LANGUAGE: jsx
CODE:
import SiwxCustom from '../../shared/siwx/siwx-custom.mdx'

# SIWX Custom Usage

<SiwxCustom />

----------------------------------------

TITLE: APNs Encrypted Push Notification Payload Structure
DESCRIPTION: JSON structure of an encrypted push notification payload for Apple Push Notification service, including APS specific fields and encrypted message content.

LANGUAGE: json
CODE:
{
  "aps": {
    "content-available": 1,
    "mutable-content": 1
  },
  "message": "String",
  "topic": "String",
  "tag": "String"
}

----------------------------------------

TITLE: Implementing Message Signing with useSignMessage Hook
DESCRIPTION: Hook for signing messages with a connected blockchain account. Provides functionality for message signing with loading, success, and error states.

LANGUAGE: tsx
CODE:
import { View, Text, Pressable } from 'react-native'
import { useSignMessage } from 'wagmi'

function App() {
  const { data, isError, isPending, isSuccess, signMessage } = useSignMessage()

  return (
    <View>
      <Pressable disabled={isPending} onPress={() => signMessage({ message: 'hello world' })}>
        <Text>Sign message</Text>
      </Pressable>
      {isSuccess && <Text>Signature: {data}</Text>}
      {isError && <Text>Error signing message</Text>}
    </View>
  )
}

----------------------------------------

TITLE: Importing and Rendering Verify Component in JSX/MDX
DESCRIPTION: This code snippet imports a Verify component from a relative path and renders it within the current component. It uses MDX syntax to include the external component.

LANGUAGE: jsx
CODE:
import Verify from '../../../cloud/verify.mdx'

<Verify />

----------------------------------------

TITLE: Importing and Rendering Sponsored Transactions Component in MDX
DESCRIPTION: This snippet imports a shared MDX component for sponsored transactions and renders it within the current MDX file. It demonstrates how to reuse documentation content across different parts of the project.

LANGUAGE: JavaScript
CODE:
import SponsoredTransactions from '../../shared/sponsored-transactions.mdx'

# Sponsored Transactions

<SponsoredTransactions />

----------------------------------------

TITLE: Importing and Rendering Verify Component in JSX/MDX
DESCRIPTION: This code snippet imports a Verify component from a relative path and renders it within the current component. It uses MDX syntax to include the external component.

LANGUAGE: jsx
CODE:
import Verify from '../../../cloud/verify.mdx'

<Verify />

----------------------------------------

TITLE: Installing Reown AppKit Auth Packages
DESCRIPTION: Commands to install the required npm packages and iOS dependencies using yarn and CocoaPods.

LANGUAGE: bash
CODE:
yarn add @reown/appkit-auth-wagmi-react-native react-native-webview

LANGUAGE: bash
CODE:
npx pod-install

----------------------------------------

TITLE: Importing Platform Assets and Wrapper Component
DESCRIPTION: Imports the necessary logo assets and Wrapper component for displaying platform options for WalletKit integration.

LANGUAGE: javascript
CODE:
import Wrapper from '../../components/Home/Wrapper'

import androidLogo from '../../../static/assets/home/androidLogo.png'
import iosLogo from '../../../static/assets/home/iosLogo.png'
import rnLogo from '../../../static/assets/home/rnLogo.png'
import flutterLogo from '../../../static/assets/home/flutterLogo.png'
import csharpLogo from '../../../static/assets/home/csharpLogo.png'
import javascriptLogo from '../../../static/assets/home/javascriptLogo.png'

----------------------------------------

TITLE: Importing Components and Assets in React/JSX
DESCRIPTION: This snippet demonstrates importing various React components, utility functions, and image assets for use in the Solana documentation page.

LANGUAGE: jsx
CODE:
import Button from '../../components/button/index.js'
import Wrapper from '../../components/Home/Wrapper.js'
import useBaseUrl from '@docusaurus/useBaseUrl'

import reactLogo from '../../../static/assets/home/reactLogo.png'
import nextjsLogo from '../../../static/assets/home/nextjsLogo.png'
import vueLogo from '../../../static/assets/home/vueLogo.png'
import javascriptLogo from '../../../static/assets/home/javascriptLogo.png'
import ReactPlayer from 'react-player'

----------------------------------------

TITLE: Installing AppKit Dependencies for Bitcoin in Next.js
DESCRIPTION: This command installs the necessary dependencies for using AppKit with Bitcoin in a Next.js project.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-bitcoin

----------------------------------------

TITLE: Importing SIWX Cloud Auth Component in JSX
DESCRIPTION: This snippet demonstrates how to import a shared component for SIWX Cloud Authentication. The component is likely to contain reusable code for implementing Sign In With X functionality in a cloud environment.

LANGUAGE: jsx
CODE:
import SiwxCloudAuth from '../../shared/siwx/siwx-cloud-auth.mdx'

----------------------------------------

TITLE: Retrieving Cosmos Wallet Accounts
DESCRIPTION: Returns an array of available keypairs with their associated algorithms and blockchain addresses. No parameters required.

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "cosmos_getAccounts",
    "params": {}
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result":  [
        {
            "algo": "secp256k1",
            "address": "cosmos1sguafvgmel6f880ryvq8efh9522p8zvmrzlcrq",
            "pubkey": "AgSEjOuOr991QlHCORRmdE5ahVKeyBrmtgoYepCpQGOW"
        }
    ]
}

----------------------------------------

TITLE: Executing Pre-signed Hedera Transaction with JSON-RPC
DESCRIPTION: Example of using the hedera_executeTransaction method to submit an already signed transaction to the Hedera network. It includes the request format with the transactionList parameter and shows the expected successful result and error response formats.

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "hedera_executeTransaction",
  "params": {
    "transactionList": "Co8BKowBCocBChoKDAjchKWmBhDW..."
  }
}

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": {
    "nodeId": "0.0.3",
    "transactionHash": "252b8fd...",
    "transactionId": "0.0.12345678@1689281510.675369303"
  }
}

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "error": {
    "code": 9000,
    "message": "The transaction failed with precheck code...",
    "data": 6
  }
}

----------------------------------------

TITLE: iOS Associated Domains Configuration
DESCRIPTION: XML configuration for enabling Associated Domains Capability in iOS applications to support Universal Links.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>com.apple.developer.associated-domains</key>
  <array>
    <string>applinks:your_wallet_universal_link.com</string>
  </array>
</dict>
</plist>

----------------------------------------

TITLE: Installing Additional Dependencies
DESCRIPTION: Installs supporting packages for async storage, cryptographic functions, SVG rendering, modal components, network info, and WalletConnect compatibility

LANGUAGE: bash
CODE:
npx expo install @ethersproject/shims@5.7.0 @react-native-async-storage/async-storage react-native-get-random-values react-native-svg react-native-modal @react-native-community/netinfo @walletconnect/react-native-compat expo-application

----------------------------------------

TITLE: Installing Additional Support Packages
DESCRIPTION: Installs supplementary packages for async storage, cryptographic functions, SVG rendering, modal windows, network info, and WalletConnect compatibility in an Expo environment.

LANGUAGE: shell
CODE:
npx expo install @react-native-async-storage/async-storage react-native-get-random-values react-native-svg react-native-modal @react-native-community/netinfo @walletconnect/react-native-compat expo-application

----------------------------------------

TITLE: Importing Assets and Components for Web3 Notifications in React
DESCRIPTION: This snippet imports the necessary components and assets for rendering the Web3 Notifications getting started guide. It includes logos for various platforms and the Wrapper component for layout.

LANGUAGE: javascript
CODE:
import Wrapper from '../../components/Home/Wrapper'

import androidLogo from '../../../static/assets/home/androidLogo.png'
import iosLogo from '../../../static/assets/home/iosLogo.png'
import rnLogo from '../../../static/assets/home/rnLogo.png'
import flutterLogo from '../../../static/assets/home/flutterLogo.png'
import csharpLogo from '../../../static/assets/home/csharpLogo.png'
import javascriptLogo from '../../../static/assets/home/javascriptLogo.png'

----------------------------------------

TITLE: Using ConnectButton Component in React Native
DESCRIPTION: Example usage of the ConnectButton component with its available props. This component allows for customizing the button size, label, and loading label.

LANGUAGE: JavaScript
CODE:
<ConnectButton
  size="md"
  label="Connect Wallet"
  loadingLabel="Connecting..."
/>

----------------------------------------

TITLE: Replacing Dependencies in pubspec.yaml for Flutter
DESCRIPTION: This snippet shows how to replace the old walletconnect_flutter_v2 dependency with the new reown_walletkit package in the pubspec.yaml file.

LANGUAGE: dart
CODE:
/* highlight-delete-start */
walletconnect_flutter_v2: ^X.Y.Z
/* highlight-delete-end */
/* highlight-add-start */
reown_walletkit: ^1.0.0
/* highlight-add-end */

----------------------------------------

TITLE: Using AppKit Hooks to Open Connect Modal in React
DESCRIPTION: This example demonstrates how to use the useAppKit hook to open the AppKit modal in a React component. It shows two buttons: one to open the default connect modal and another to open the network modal specifically.

LANGUAGE: tsx
CODE:
import { useAppKit } from '@reown/appkit/react'

export default function ConnectButton() {
  // 4. Use modal hook
  const { open } = useAppKit()

  return (
    <>
      <button onClick={() => open()}>Open Connect Modal</button>
      <button onClick={() => open({ view: 'Networks' })}>Open Network Modal</button>
    </>
  )
}

----------------------------------------

TITLE: Importing and Rendering Options Component in MDX
DESCRIPTION: MDX page that imports an Options component from a shared directory and renders it. The page uses frontmatter for the title and renders a heading along with the component.

LANGUAGE: mdx
CODE:
---
title: Options
---

import Options from '../../shared/options.mdx'

# Options

<Options />

----------------------------------------

TITLE: Adding Signature to Extrinsic Payload in Polkadot JavaScript
DESCRIPTION: Create an extrinsic payload from the unsigned transaction and add the signature returned from WalletConnect.

LANGUAGE: javascript
CODE:
// create the extrinsic payload using the unsigned transaction
const rawUnsignedTransaction = api.registry.createType('ExtrinsicPayload', unsignedTransaction, {
  version: unsignedTransaction.version
})

// add the signature to the extrinsic payload
tx.addSignature(selectedWalletConnectAddress, result.signature, rawUnsignedTransaction)

----------------------------------------

TITLE: Configuring WalletConnectModal for iOS
DESCRIPTION: Sets up WalletConnectModal with project ID, metadata, and optional session parameters for iOS.

LANGUAGE: swift
CODE:
let metadata = AppMetadata(
    name: "Example Wallet",
    description: "Wallet description",
    url: "example.wallet",
    icons: ["https://avatars.githubusercontent.com/u/37784886"],
    verifyUrl: "verify.walletconnect.com"
)

WalletConnectModal.configure(
    projectId: PROJECT_ID,
    metadata: metadata
)

----------------------------------------

TITLE: Installing iOS Native Dependencies
DESCRIPTION: Command to install native dependencies using CocoaPods for iOS platform.

LANGUAGE: bash
CODE:
npx pod-install

----------------------------------------

TITLE: Pairing with a Dapp in ReownWalletKit
DESCRIPTION: Initiates a pairing process with a dapp using the provided URI from a QR code scan.

LANGUAGE: javascript
CODE:
Uri uri = Uri.parse(scannedUriString);
await _walletKit.pair(uri: uri);

----------------------------------------

TITLE: Custom WebSocketFactory with Origin Header in Swift
DESCRIPTION: Implementation of WebSocketFactory that includes a custom Origin header to handle allowed domains restrictions.

LANGUAGE: swift
CODE:
import Starscream

extension WebSocket: WebSocketConnecting { }

struct DefaultSocketFactory: WebSocketFactory {
    func create(with url: URL) -> WebSocketConnecting {
        var urlRequest = URLRequest(url: url)
        urlRequest.addValue("allowed.domain.com", forHTTPHeaderField: "Origin")
        return WebSocket(request: urlRequest)
    }
}

----------------------------------------

TITLE: Importing and Rendering Shared Sponsored Transactions Documentation in React
DESCRIPTION: This snippet imports a shared MDX component for sponsored transactions documentation and renders it within the page. It demonstrates how to reuse common documentation across different parts of the project.

LANGUAGE: JavaScript
CODE:
import SponsoredTransactions from '../../shared/sponsored-transactions.mdx'

# Sponsored Transactions

<SponsoredTransactions />

----------------------------------------

TITLE: Using useAppKitState Hook with Wagmi in React Native
DESCRIPTION: Shows how to use the useAppKitState hook from the @reown/appkit-wagmi-react-native package to get the current value of the modal's state.

LANGUAGE: typescript
CODE:
import { useAppKitState } from '@reown/appkit-wagmi-react-native'

const { open, selectedNetworkId } = useAppKitState()

----------------------------------------

TITLE: Creating crypto polyfill for Expo SDK 48
DESCRIPTION: This JavaScript code creates a polyfill for the crypto functionality, specifically the getRandomValues method, using the expo-crypto library. It defines a Crypto class and sets up the global crypto object if it doesn't exist.

LANGUAGE: javascript
CODE:
// src/crypto-polyfill.js

// Apply only with Expo SDK 48
import { getRandomValues as expoCryptoGetRandomValues } from 'expo-crypto'

class Crypto {
  getRandomValues = expoCryptoGetRandomValues
}

// eslint-disable-next-line no-undef
const webCrypto = typeof crypto !== 'undefined' ? crypto : new Crypto()

;(() => {
  if (typeof crypto === 'undefined') {
    Object.defineProperty(window, 'crypto', {
      configurable: true,
      enumerable: true,
      get: () => webCrypto
    })
  }
})()

----------------------------------------

TITLE: Updating Instance Access for WalletKit
DESCRIPTION: Replace Web3Wallet.instance with WalletKit.instance in Swift code to access the singleton instance.

LANGUAGE: swift
CODE:
/* highlight-delete-start */
- Web3Wallet.instance.authRequestPublisher.sink { (id, result) in
-    // Your code here
- }
/* highlight-delete-end */
/* highlight-add-start */
+ WalletKit.instance.authRequestPublisher.sink { (id, result) in
+     // Your code here
+ }
/* highlight-add-end */

----------------------------------------

TITLE: Defining Color Interface for AppKitTheme in Kotlin
DESCRIPTION: This Kotlin snippet defines the Colors interface for AppKitTheme, specifying customizable colors including accent, foreground, background, and utility colors.

LANGUAGE: kotlin
CODE:
interface Colors {
    val accent100: Color
    val accent90: Color
    val accent80: Color
    val foreground: ColorPalette
    val background: ColorPalette
    val grayGlass: Color
    val success: Color
    val error: Color
}

----------------------------------------

TITLE: Defining Color Interface for AppKitTheme in Kotlin
DESCRIPTION: This Kotlin snippet defines the Colors interface for AppKitTheme, specifying customizable colors including accent, foreground, background, and utility colors.

LANGUAGE: kotlin
CODE:
interface Colors {
    val accent100: Color
    val accent90: Color
    val accent80: Color
    val foreground: ColorPalette
    val background: ColorPalette
    val grayGlass: Color
    val success: Color
    val error: Color
}

----------------------------------------

TITLE: Marking All Notifications as Read using Fetch API in JavaScript
DESCRIPTION: This code snippet demonstrates how to mark all notifications as read using the Fetch API in JavaScript. It includes setting up the POST request with proper headers.

LANGUAGE: typescript
CODE:
const PROJECT_ID = '<PROJECT_ID>'
const NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'
const response = await fetch(`https://notify.walletconnect.com/v1/${PROJECT_ID}/mark-all-as-read`, {
  method: 'POST',
  headers: {
    Authorization: `Bearer ${NOTIFY_API_SECRET}`
  }
})

----------------------------------------

TITLE: Importing and Rendering Options Component in MDX
DESCRIPTION: This code snippet imports a shared Options component and renders it within an MDX file. It demonstrates how to combine Markdown with JSX to create documentation pages.

LANGUAGE: jsx
CODE:
import Options from '../../shared/options.mdx'

# Options

<Options />

----------------------------------------

TITLE: Configuring Custom Token Contracts for Ethereum and Polygon in TypeScript
DESCRIPTION: This code snippet defines a tokenContracts object that maps blockchain network IDs to specific token contract addresses. It overrides the default token addresses for Ethereum (chain ID 1) and Polygon (chain ID 137) networks, allowing the application to display custom token balances in the account view.

LANGUAGE: typescript
CODE:
tokenContracts: {
  1: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',
  137: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174'
}

----------------------------------------

TITLE: Importing Migration Component in React/MDX
DESCRIPTION: Import statement for a Migration component from a shared notifications frontend integration directory.

LANGUAGE: javascript
CODE:
import Migration from '../../../shared/notifications/frontend-integration/migration/react.mdx'

----------------------------------------

TITLE: Platform Tabs Implementation in MDX
DESCRIPTION: Demonstrates how to implement platform-specific tabbed content using PlatformTabs and PlatformTabItem components. Supports multiple platforms like web, iOS, and Android with customizable grouping.

LANGUAGE: mdx
CODE:
import PlatformTabs from '../components/PlatformTabs'
import PlatformTabItem from '../components/PlatformTabItem'

<PlatformTabs
	groupId="anyId"
	activeOptions={["web","ios","android"]}
>
<PlatformTabItem value="web">

#### Heading here

Information related to web

</PlatformTabItem>
<PlatformTabItem value="ios">

#### Heading here

Information related to ios

</PlatformTabItem>
<PlatformTabItem value="android">

#### Heading here

Information related to android

</PlatformTabItem>
</PlatformTabs>

----------------------------------------

TITLE: Setting Up Event Listeners for Notify Client in JavaScript
DESCRIPTION: Adds event listeners for subscription, message, update, and subscription change events on the Notify client.

LANGUAGE: javascript
CODE:
notifyClient.on('notify_subscription', async ({ params }) => {
  const { error } = params

  if (error) {
    console.error('Setting up subscription failed: ', error)
  } else {
    console.log(`Subscribed successfully.`)
  }
})

notifyClient.on('notify_message', ({ params }) => {
  const { message } = params
})

notifyClient.on('notify_update', ({ params }) => {
  const { error } = params

  if (error) {
    console.error('Setting up subscription failed: ', error)
  } else {
    console.log(`Successfully updated subscription scope.`)
  }
})

notifyClient.on('notify_subscriptions_changed', ({ params }) => {
  const { subscriptions } = params
})

----------------------------------------

TITLE: Installing Additional Dependencies for Expo React Native
DESCRIPTION: This command installs several additional packages to support async storage, polyfills, SVGs, modals, network information, and application details in an Expo React Native project.

LANGUAGE: bash
CODE:
npx expo install @react-native-async-storage/async-storage react-native-get-random-values react-native-svg react-native-modal @react-native-community/netinfo @walletconnect/react-native-compat expo-application

----------------------------------------

TITLE: Importing and Rendering Relay Component in JSX
DESCRIPTION: This code snippet imports the Relay component from a shared location and renders it within the current file. It demonstrates how to reuse documentation across multiple pages.

LANGUAGE: jsx
CODE:
import Relay from '../../../cloud/relay.mdx'

<Relay />

----------------------------------------

TITLE: Using useAppKitEventSubscription Hook with Ethers in React Native
DESCRIPTION: Shows how to use the useAppKitEventSubscription hook from the @reown/appkit-ethers-react-native package to subscribe to specific modal events.

LANGUAGE: typescript
CODE:
import { useAppKitEventSubscription } from '@reown/appkit-ethers-react-native'

useAppKitEventSubscription('MODAL_OPEN', newEvent => {
  // your code here
});

----------------------------------------

TITLE: Configuring AppKit Swap Feature in TypeScript
DESCRIPTION: Code example showing how to disable the default swap feature during AppKit initialization. The createAppKit function accepts a configuration object where the swaps feature can be toggled using a boolean flag.

LANGUAGE: typescript
CODE:
const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata: metadata,
  features: {
    swaps: false // Optional - true by default
  }
})

----------------------------------------

TITLE: Importing and Rendering Smart Account Component in MDX
DESCRIPTION: MDX page setup that imports a shared Smart Account component and renders it. Uses frontmatter for page title and MDX import/component syntax.

LANGUAGE: mdx
CODE:
---
title: Smart Accounts
---

import SmartAccount from '../../shared/smart-accounts.mdx'

<SmartAccount />

----------------------------------------

TITLE: Using Custom SIWX Components
DESCRIPTION: Example of configuring DefaultSIWX with a custom storage component while using default implementations for other components.

LANGUAGE: typescript
CODE:
import { DefaultSIWX, type SIWXStorage } from '@reown/appkit-siwx'

class MyDatabaseStorage implements SIWXStorage {
  // ...
}

const siwx = new DefaultSIWX({
  storage: new MyDatabaseStorage()
})

----------------------------------------

TITLE: Enabling Auth-Only Mode in TypeScript for reown Modal
DESCRIPTION: This configuration option enables auth-only mode for a modal component in the reown project. When set to true, it adjusts which wallets are fetched from the explorer, limiting the selection to authentication-capable wallets only.

LANGUAGE: typescript
CODE:
enableAuthMode: true

----------------------------------------

TITLE: Sending Requests with Ethereum Provider in TypeScript
DESCRIPTION: Examples of sending requests using the provider's request and sendAsync methods.

LANGUAGE: typescript
CODE:
const result = await provider.request({ method: 'eth_requestAccounts' })

// OR

provider.sendAsync({ method: 'eth_requestAccounts' }, CallBackFunction)

----------------------------------------

TITLE: Signing Messages with Wagmi signMessage
DESCRIPTION: Shows how to use the signMessage action from Wagmi core to sign messages with a connected Ethereum account. Takes a message string as input and returns the signature.

LANGUAGE: typescript
CODE:
import { signMessage } from '@wagmi/core'

const signature = await signMessage({
  message: 'gm wagmi frens'
})

----------------------------------------

TITLE: Setting ThemeMode in AppKit Configuration
DESCRIPTION: This snippet demonstrates how to override the default themeMode setting in the AppKit configuration. By default, themeMode is set to the user's system settings, but it can be explicitly set to 'light' or 'dark'.

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  themeMode: 'light'
})

----------------------------------------

TITLE: Cleaning Up WalletConnect Data in Swift
DESCRIPTION: Deletes all stored data including pairings, sessions, and keys for a specific topic.

LANGUAGE: swift
CODE:
AppKit.instance.cleanup(topic)

----------------------------------------

TITLE: Reading Smart Contract Data with Wagmi in Vue
DESCRIPTION: Vue component demonstrating how to read data from a smart contract using Wagmi actions.

LANGUAGE: html
CODE:
<script setup lang="ts">
  import { readContract } from '@wagmi/core'
  import { USDTAbi } from '../abi/USDTAbi'

  const USDTAddress = '0x...'

  const data = readContract({
    abi: USDTAbi,
    address: USDTAddress,
    functionName: 'symbol'
  })
</script>

----------------------------------------

TITLE: Initializing CoinbaseProvider in React Native with TypeScript
DESCRIPTION: Demonstrates how to create and configure a CoinbaseProvider instance and integrate it into the default configuration. The provider requires a redirect URL (preferably a universal link) and an RPC URL for the mainnet connection.

LANGUAGE: typescript
CODE:
import { CoinbaseProvider } from '@reown/appkit-coinbase-ethers-react-native'

const coinbaseProvider = new CoinbaseProvider({
  redirect: 'https://your-app-universal-link.com' || 'YOUR_APP_SCHEME://'
  rpcUrl: mainnet.rpcUrl
})

const config = defaultConfig({
  metadata,
  coinbase: coinbaseProvider
})

----------------------------------------

TITLE: Opening AppKit Modal with Web Component in Vue
DESCRIPTION: This snippet shows how to use the AppKit web component to open the modal. The appkit-button component is a global HTML element that doesn't require importing.

LANGUAGE: html
CODE:
<template>
  <appkit-button />
</template>

----------------------------------------

TITLE: Opening AppKit Modal with Hooks in React
DESCRIPTION: This snippet demonstrates how to use the useAppKit hook to open the AppKit modal in a React component. It shows two buttons: one to open the default connect modal and another to open the network modal.

LANGUAGE: tsx
CODE:
import { useAppKit } from '@reown/appkit/react'

export default function ConnectButton() {
  // 4. Use modal hook
  const { open } = useAppKit()

  return (
    <>
      <button onClick={() => open()}>Open Connect Modal</button>
      <button onClick={() => open({ view: 'Networks' })}>Open Network Modal</button>
    </>
  )
}

----------------------------------------

TITLE: Configuring WalletKit Metadata in C#
DESCRIPTION: Defines wallet metadata including name, description, icons and URL

LANGUAGE: csharp
CODE:
var metadata = new Metadata()
{
    Description = "An example wallet to showcase WalletKit",
    Icons = new[] { "https://walletconnect.com/meta/favicon.ico" },
    Name = $"wallet-csharp-test",
    Url = "https://walletconnect.com",
};

----------------------------------------

TITLE: Implementing Custom SIWXVerifier
DESCRIPTION: Example of creating a custom SIWXVerifier by extending the base class and implementing the verify method.

LANGUAGE: typescript
CODE:
import { SIWXVerifier } from '@reown/appkit-siwx'
import type { SIWXSession } from '@reown/appkit-core'

export class MyVerifier extends SIWXVerifier {
  public readonly chainNamespace = 'eip155' // set the chain namespace for your verifier

  public async verify(session: SIWXSession): Promise<boolean> {
    // Implement your verification logic here
    return true
  }
}

----------------------------------------

TITLE: Implementing AppKit Connect Button with Web Component in React
DESCRIPTION: This snippet shows how to use the AppKit web component to create a connect button in a React application. It utilizes the global 'appkit-button' element without requiring imports.

LANGUAGE: tsx
CODE:
export default function ConnectButton() {
  return <appkit-button />
}

----------------------------------------

TITLE: Setting Default Chain to Polygon in Wagmi (TypeScript)
DESCRIPTION: This code snippet shows how to configure the default chain for Wagmi to be Polygon. Setting a default chain prompts users to switch in their wallet if they are on a different network. If not set, it defaults to undefined.

LANGUAGE: typescript
CODE:
defaultChain: polygon

----------------------------------------

TITLE: Sending Notification with Reown Notify API using cURL
DESCRIPTION: Shows how to send a notification using the Reown Notify API with a cURL command. It includes the API endpoint, authorization header, and JSON payload for the notification details and recipient account.

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/<PROJECT_ID>/notify' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "notification": {
      "type": "a1e53b95-18e5-4af8-9f03-9308ec87b687",
      "title": "The price of Ethereum has risen",
      "body": "The price of Ethereum has gone up 10%",
      "url": "https://app.example.com"
    },
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029"
    ]
  }'

----------------------------------------

TITLE: Installing AppKit with Wagmi for Vue
DESCRIPTION: npm command to install AppKit with Wagmi adapter and related dependencies for Vue projects.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue viem

----------------------------------------

TITLE: Defining SIWE Message Types for App Authorization in Markdown
DESCRIPTION: This snippet lists the two types of SIWE messages that a user might be asked to sign when authorizing an app to manage notifications. It includes links to more detailed information about each message type.

LANGUAGE: markdown
CODE:
- [I authorize [...] this app](this-app)
- [I authorize [...] all apps](all-apps)

----------------------------------------

TITLE: Installing AppKit via Cocoapods
DESCRIPTION: Podfile configuration for adding AppKit using Cocoapods package manager, specifying git repository and version tag.

LANGUAGE: ruby
CODE:
pod 'reown-swift/ReownAppKit', :git => 'https://github.com/reown-com/reown-swift.git', :tag => '1.0.4'

----------------------------------------

TITLE: Installing Reown AppKit and Ethers in Expo React Native
DESCRIPTION: This command installs the Reown AppKit for Ethers and the Ethers library in an Expo React Native project using npx.

LANGUAGE: bash
CODE:
npx expo install @reown/appkit-ethers-react-native ethers

----------------------------------------

TITLE: Handling Deep Links for AppKit in Swift
DESCRIPTION: This code snippet demonstrates how to handle deep links (universal links) in your app and pass them to the AppKit client for processing. This is necessary when using Link Mode for authentication responses.

LANGUAGE: swift
CODE:
AppKit.instance.handleDeeplink(url)

----------------------------------------

TITLE: Configuring Authentication Features in AppKit for Solana
DESCRIPTION: This snippet illustrates how to configure the 'features' parameter in the createAppKit function to enable email and social login options for Solana using the solanaWeb3JsAdapter.

LANGUAGE: typescript
CODE:
const modal = createAppKit({
  adapters: [solanaWeb3JsAdapter],
  projectId,
  networks: [solana, solanaTestnet, solanaDevnet],
  metadata,
  /*highlight-add-start*/
  features: {
    email: true, // default to true
    socials: ['google', 'x', 'discord', 'farcaster', 'github', 'apple', 'facebook'],
    emailShowWallets: true, // default to true    
  },
  allWallets: 'SHOW', // default to SHOW
  /*highlight-add-end*/
})

----------------------------------------

TITLE: Initializing WalletKit Expo Project with NPX
DESCRIPTION: This command uses an experimental npx starter to create a new Expo project with WalletKit pre-installed. The 'newWallet' parameter represents the name of your project.

LANGUAGE: bash
CODE:
npx create-wc-wallet-expo@latest newWallet

----------------------------------------

TITLE: Importing Balance Check Dependencies
DESCRIPTION: Import statements for Solana balance checking functionality including AppKit hooks and Solana Web3 components

LANGUAGE: javascript
CODE:
import { useAppKitConnection } from '@reown/appkit-adapter-solana/react'
import { useAppKitAccount } from '@reown/appkit/react'
import { PublicKey, LAMPORTS_PER_SOL } from "@solana/web3.js";

----------------------------------------

TITLE: Registering Custom Modal View in C#
DESCRIPTION: This C# snippet shows how to register a custom modal view presenter with the RouterController.

LANGUAGE: csharp
CODE:
var modalController = (ModalControllerUtk)AppKit.ModalController;
if (modalController != null)
{
    var routerController = modalController.RouterController;

    var customAccountPresenter = new CustomAccountPresenter(routerController, routerController.RootVisualElement);
    routerController.RegisterModalView(ViewType.Account, customAccountPresenter);
}

----------------------------------------

TITLE: Integrating AppKit Web Components in HTML
DESCRIPTION: This snippet shows how to add AppKit web components to an HTML file. It includes the appkit-button and appkit-network-button elements, which are global HTML elements that don't require importing.

LANGUAGE: html
CODE:
  <body>
    <div id="app">
      /* highlight-add-start */
      <appkit-button></appkit-button>
      <appkit-network-button></appkit-network-button>
      /* highlight-add-end */
    </div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>

----------------------------------------

TITLE: XRPL Single-Signature Transaction Example
DESCRIPTION: Example of signing and submitting a DEX order transaction to sell 15,000 XRP for USD using xrpl_signTransaction method. Shows both the request parameters and response format including auto-filled fields and transaction signature.

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "xrpl_signTransaction",
    "params": {
        "tx_json": {
            "TransactionType": "OfferCreate",
            "Account": "rMBzp8CgpE441cp5PVyA9rpVV7oT8hP3ys",
            "Flags": 524288,
            "LastLedgerSequence": 7108682,
            "Expiration": 595640108,
            "TakerGets": "15000000000",
            "TakerPays": {
                "currency": "USD",
                "issuer": "rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B",
                "value": "7072.8"
            }
        }
    }
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "tx_json": {
            "Account": "rMBzp8CgpE441cp5PVyA9rpVV7oT8hP3ys",
            "Expiration": 595640108,
            "Fee": "10",
            "Flags": 524288,
            "OfferSequence": 1752791,
            "Sequence": 1752792,
            "LastLedgerSequence": 7108682,
            "SigningPubKey": "03EE83BB432547885C219634A1BC407A9DB0474145D69737D09CCDC63E1DEE7FE3",
            "TakerGets": "15000000000",
            "TakerPays": {
                "currency": "USD",
                "issuer": "rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B",
                "value": "7072.8"
            },
            "TransactionType": "OfferCreate",
            "TxnSignature": "30440220143759437C04F7B61F012563AFE90D8DAFC46E86035E1D965A9CED282C97D4CE02204CFD241E86F17E011298FC1A39B63386C74306A5DE047E213B0F29EFA4571C2C",
            "hash": "73734B611DDA23D3F5F62E20A173B78AB8406AC5015094DA53F53D39B9EDB06C"
        }
    }
}

----------------------------------------

TITLE: Marking All Notifications as Read with Reown Notify API using cURL
DESCRIPTION: Shows how to mark all existing notifications as read using the Reown Notify API with a cURL command. Includes the necessary authorization header.

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/mark-all-as-read' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'

----------------------------------------

TITLE: Preparing Chain Abstraction in Swift
DESCRIPTION: This method checks if chain abstraction is needed and returns necessary transactions. It requires chain ID, sender address, call details, account list, and local currency as inputs.

LANGUAGE: swift
CODE:
@available(*, message: "This method is experimental. Use with caution.")
public func prepare(chainId: String, from: FfiAddress, call: Call, accounts: [String], localCurrency: Currency) async throws -> PrepareDetailedResponse 
}

----------------------------------------

TITLE: Signing Single NEAR Transaction
DESCRIPTION: Shows how to sign a single transaction using near-api-js compatibility. Handles encoded transaction data and returns an encoded SignedTransaction.

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "near_signTransaction",
  "params": {
    "transaction": {
    "type": "Buffer",
      "data": [32, 0, 0, 0, 100, 101, 118, 45, 49, 54, 55, 49, 51, 56, 55, 51, 57, 56 ...]
    }
  }
}

// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": {
  "type": "Buffer",
    "data": [32, 0, 0, 0, 100, 101, 118, 45, 49, 54, 55, 49, 51, 56, 55, 51, 57, 56 ...]
  }
}

----------------------------------------

TITLE: Launching Connected Wallet in ReownAppKit (Flutter)
DESCRIPTION: This snippet shows how to launch the currently connected wallet app using ReownAppKit.

LANGUAGE: javascript
CODE:
_appKitModal.launchConnectedWallet();

----------------------------------------

TITLE: Using Pairing API in Web/JavaScript
DESCRIPTION: Examples of using the Pairing API methods in a web or JavaScript environment, including creating pairings, pairing with peers, and handling events.

LANGUAGE: typescript
CODE:
// Creates a new (inactive) pairing. Returns the URI for a peer to consume via `pair`, as well as the pairing topic.
const {topic, uri} = await sdkClient.core.pairing.create()

// Pair with a peer's proposed pairing, extracted from the provided `uri` parameter.
await sdkClient.core.pairing.pair({ uri: "wc:1b3eda3f4..." })

// Activate a previously created pairing (e.g. after the peer has paired), by providing the pairing topic.
await sdkClient.core.pairing.activate({ topic: "1b3eda3f4..." })

// Updates the expiry of an existing pairing, by providing the pairing topic and an `expiry` in seconds (e.g. `60` for one minute from now)
await sdkClient.core.pairing.updateExpiry({ topic: "1b3eda3f4...", expiry: 60 })

// Updates a pairing's metadata, by providing the pairing topic and the desired metadata.
await sdkClient.core.pairing.updateMetadata({ topic: "1b3eda3f4...", metadata: { name: "MyDapp", ... } })

// Returns an array of all existing pairings.
const pairings = sdkClient.core.pairing.getPairings()

// Pings a pairing's peer, by providing the pairing topic.
await sdkClient.core.pairing.ping({ topic: "1b3eda3f4..." })

// Disconnects/Removes a pairing, by providing the pairing topic.
await sdkClient.core.pairing.disconnect({ topic: "1b3eda3f4..." })

// Event listener example
sdkClient.core.pairing.events.on('pairing_delete', ({ id, topic }) => {
  // clean up after the pairing for `topic` was deleted.
})

----------------------------------------

TITLE: Configuring Authentication Features in AppKit with Ethers
DESCRIPTION: This snippet shows how to set up the 'features' parameter in the createAppKit function to enable email and social login options using the Ethers adapter. Note that ethers v5 does not support social logins.

LANGUAGE: typescript
CODE:
const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks: [mainnet, arbitrum],
  metadata,
  /* highlight-add-start */
  features: {
    email: true, // default to true
    socials: ['google', 'x', 'github', 'discord', 'apple', 'facebook', 'farcaster'],
    emailShowWallets: true, // default to true
  },
  allWallets: 'SHOW', // default to SHOW
  /* highlight-add-end */
})

----------------------------------------

TITLE: Implementing AppKit Button Using Web Component
DESCRIPTION: Shows how to implement the AppKit button using the web component approach. Web components are global HTML elements that don't require importing.

LANGUAGE: tsx
CODE:
export default function ConnectButton() {
  return <appkit-button />
}

----------------------------------------

TITLE: Handling FCM Token Refresh in React Native
DESCRIPTION: This snippet demonstrates how to handle token refresh events in Firebase Cloud Messaging. It ensures that the new token is registered with WalletKit when the device token is updated.

LANGUAGE: typescript
CODE:
import messaging from '@react-native-firebase/messaging';

messaging().onTokenRefresh(async token => {
    await walletKit.registerDeviceToken({
        token: await messaging().getToken(), // device token
        clientId: await walletKit.core.crypto.getClientId(), //your instance clientId
        notificationType: 'fcm', // notification type
        enableEncrypted: true // flag that enabled detailed notifications
    });
});

----------------------------------------

TITLE: Opening AppKit Modal with Web Component in HTML
DESCRIPTION: This snippet shows how to use the AppKit web component to open the modal. The appkit-button element is a global HTML element that doesn't require importing.

LANGUAGE: html
CODE:
<template>
  <appkit-button />
</template>

----------------------------------------

TITLE: Listing Wallet Call API Methods in Markdown
DESCRIPTION: This snippet lists the four main JSON-RPC methods provided by the Wallet Call API, along with brief descriptions of their functionalities. These methods are part of WalletConnect's implementation of EIP-5792.

LANGUAGE: markdown
CODE:
- `wallet_sendCalls`: Requests that a wallet submits a batch of calls.
- `wallet_getCallsStatus`: Returns the status of a call batch that was sent via wallet_sendCalls.
- `wallet_showCallsStatus`: Requests that a wallet shows information about a given call bundle that was sent with wallet_sendCalls.
- `wallet_getCapabilities`: This RPC allows an application to request capabilities from a wallet (e.g. batch transactions, paymaster communication).

----------------------------------------

TITLE: Setting ThemeMode in AppKit
DESCRIPTION: Example showing how to override the default theme mode setting in AppKit. By default, the theme follows system settings but can be explicitly set to 'light' or 'dark'.

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  themeMode: 'light'
})

----------------------------------------

TITLE: Account Types and Interfaces
DESCRIPTION: Type definitions for embedded wallet information and account return types.

LANGUAGE: typescript
CODE:
type EmbeddedWalletInfo {
  user: {
    username: string
    email: string
  },
  accountType: 'eoa' | 'smartAccount',
  authProvider: 'google' | 'apple' | 'facebook' | 'x' | 'discord' | 'farcaster' | 'github' | 'email',
  isSmartAccountDeployed: boolean
}

type ConnectionStatus = 'connected' | 'disconnected' | 'connecting' | 'reconnecting'

type UseAppKitAccountReturnType = {
  isConnected: boolean
  allAccounts: Account[]
  status?: ConnectionStatus
  address?: string
  caipAddress?: `${string}:${string}`
  embeddedWalletInfo?: EmbeddedWalletInfo
}

----------------------------------------

TITLE: Subscribing to Modal-specific Events in JavaScript
DESCRIPTION: This snippet demonstrates how to subscribe to modal-specific events such as connect, update, network change, disconnect, and error events. These events provide updates on the modal's connection status and any changes that occur.

LANGUAGE: javascript
CODE:
_appKitModal.onModalConnect.subscribe((ModalConnect? event) {});

_appKitModal.onModalUpdate.subscribe((ModalConnect? event) {});

_appKitModal.onModalNetworkChange.subscribe((ModalNetworkChange? event) {});

_appKitModal.onModalDisconnect.subscribe((ModalDisconnect? event) {});

_appKitModal.onModalError.subscribe((ModalError? event) {});

----------------------------------------

TITLE: DApp Deep Link Navigation
DESCRIPTION: Kotlin code for initiating deep link navigation from a DApp to a wallet using Android Intent.

LANGUAGE: kotlin
CODE:
requireActivity().startActivity(Intent(Intent.ACTION_VIEW, deeplinkPairingUri.toUri()))

----------------------------------------

TITLE: Verifying SIWE Signature in TypeScript
DESCRIPTION: This snippet demonstrates how to use the verifySignature function to verify a SIWE signature. It imports the function from the AppKit SIWE module and calls it with the necessary parameters.

LANGUAGE: typescript
CODE:
import { verifySignature } from '@reown/appkit-siwe-react-native'

const isValid = await verifySignature({ address, message, signature, chainId, projectId })

----------------------------------------

TITLE: Registering Device Token with WalletKit
DESCRIPTION: This code snippet shows how to register a device token with WalletKit for receiving push notifications. It includes parameters for the token, client ID, notification type, and encryption flag.

LANGUAGE: typescript
CODE:
walletKit.registerDeviceToken({
  token: await messaging().getToken(), // device token
  clientId: await walletKit.core.crypto.getClientId(), //your instance clientId
  notificationType: 'fcm', // notification type
  enableEncrypted: true // flag that enabled detailed notifications
})

----------------------------------------

TITLE: Transaction Sending Implementation
DESCRIPTION: Function to create and send a Solana transaction using AppKit and Web3.js

LANGUAGE: javascript
CODE:
const handleSendTx = () => {
    const latestBlockhash = await connection.getLatestBlockhash();
    const transaction= new Transaction({
        feePayer: wallet,
        recentBlockhash: latestBlockhash?.blockhash,
      }).add(
        SystemProgram.transfer({
          fromPubkey: wallet,
          toPubkey: new PublicKey(address),
          lamports: 1000,
        })
      );
    const signature = await walletProvider.sendTransaction(transaction, connection)
    console.log(signature);
}

----------------------------------------

TITLE: Updating CocoaPods Podspec for WalletKit
DESCRIPTION: Update the Podfile to use the new WalletKit library name instead of Web3Wallet for CocoaPods dependency management.

LANGUAGE: swift
CODE:
/* highlight-delete-start */
- pod 'Web3Wallet', '~> 1.0'
/* highlight-delete-end */
/* highlight-add-start */
+ pod 'WalletKit', '~> 1.0'
/* highlight-add-end */

----------------------------------------

TITLE: Configuring AppKit with SIWE
DESCRIPTION: TypeScript code showing how to initialize AppKit with SIWE configuration, including network settings and feature flags.

LANGUAGE: typescript
CODE:
const modal = createAppKit({
      adapters: [wagmiAdapter], //or your Ethers adapter
      projectId,
      networks: [mainnet, arbitrum],
      defaultNetwork: mainnet,
      features: {
        analytics: true, // Optional - defaults to your Cloud configuration
      },
      siweConfig: siweConfig // pass your siweConfig
  })

----------------------------------------

TITLE: Sending Notifications using cURL
DESCRIPTION: Example of sending notifications using cURL command with project ID and API secret authentication.

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/<PROJECT_ID>/notify' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "notification": {
      "type": "a1e53b95-18e5-4af8-9f03-9308ec87b687",
      "title": "The price of Ethereum has risen",
      "body": "The price of Ethereum has gone up 10%",
      "url": "https://app.example.com"
    },
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029"
    ]
  }'

----------------------------------------

TITLE: Listing Wallet Call API Methods in Markdown
DESCRIPTION: This snippet lists the four main JSON-RPC methods defined by the Wallet Call API. It includes wallet_sendCalls for submitting call batches, wallet_getCallsStatus for checking batch status, wallet_showCallsStatus for displaying call bundle information, and wallet_getCapabilities for querying wallet capabilities.

LANGUAGE: markdown
CODE:
- `wallet_sendCalls`: Requests that a wallet submits a batch of calls.
- `wallet_getCallsStatus`: Returns the status of a call batch that was sent via wallet_sendCalls.
- `wallet_showCallsStatus`: Requests that a wallet shows information about a given call bundle that was sent with wallet_sendCalls.
- `wallet_getCapabilities`: This RPC allows an application to request capabilities from a wallet (e.g. batch transactions, paymaster communication).

----------------------------------------

TITLE: Implementing AppKit Button Component in TSX
DESCRIPTION: Example of using the appkit-button web component in a template. The component is globally available and requires no explicit import.

LANGUAGE: tsx
CODE:
<template>
  <appkit-button />
</template>

----------------------------------------

TITLE: Installing Web3Inbox Widget Dependencies
DESCRIPTION: Command to install the required Web3Inbox core package and React widget component using npm or yarn package managers.

LANGUAGE: bash
CODE:
npm i @web3inbox/core @web3inbox/widget-react

----------------------------------------

TITLE: Configuring Universal Links in Android Manifest
DESCRIPTION: This XML snippet demonstrates how to configure the AndroidManifest.xml file to support Universal Links in an Android app. It sets up an intent filter with the necessary action, categories, and data elements for handling the universal link.

LANGUAGE: xml
CODE:
<intent-filter android:autoVerify="true">
  <action android:name="android.intent.action.VIEW" />

  <category android:name="android.intent.category.DEFAULT" />
  <category android:name="android.intent.category.BROWSABLE" />

  <data android:scheme="https" />
  <data android:host="example.com" />
  <data android:pathPattern="/example_wallet" />
</intent-filter>

----------------------------------------

TITLE: Importing and Rendering Swaps Component in JSX
DESCRIPTION: This code snippet imports a Swaps component from a shared directory and renders it within a page. It uses JSX syntax, likely in a React-based documentation framework.

LANGUAGE: jsx
CODE:
import Swaps from '../../shared/swaps.mdx'

# Swaps

<Swaps/>

----------------------------------------

TITLE: Embedding Video in Markdown
DESCRIPTION: This snippet demonstrates how to embed a video in Markdown using HTML. It includes a video element with controls and a source pointing to a demo video for Chain Abstraction.

LANGUAGE: markdown
CODE:
<video controls width="100%" height="100%" style={{ borderRadius: '10px' }}>
  <source src="/assets/chain-abstraction-demo.mp4" type="video/mp4" />
</video>

----------------------------------------

TITLE: Importing and Rendering Blockchain API Documentation in JSX
DESCRIPTION: This snippet imports a Blockchain API documentation component from a relative path and renders it within the current page. It uses JSX syntax, likely within a React or similar framework.

LANGUAGE: jsx
CODE:
import BlockchainAPI from '../../../cloud/blockchain-api.mdx'

<BlockchainAPI />

----------------------------------------

TITLE: Signing Casper Deploy Transaction
DESCRIPTION: Example of using casper_sign_deploy method to request user approval for signing a transaction. The method takes an address and deploy object as parameters and returns the deploy object with approval signature.

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "casper_sign_deploy",
  "params": {
    "deploy": {
      "hash": "a3301c9da7f0183f1c8904bed7fc72cf563454509462cada378b3f42a92f7b4f",
      "header": {
        "account": "02032E126170e5f28443775330B5B5Fe29dCE1a1dD3269910349525935ccbaf352EA",
        "timestamp": "2024-02-01T08:41:59.207Z",
        "ttl": "30m",
        "gas_price": 1,
        "body_hash": "188d88eedd3dc64b4ac3f8ca9b74be2b2fa588e2d537875d22b7e1a68658d19e",
        "dependencies": [],
        "chain_name": "casper-test"
      },
      "payment": {
        "ModuleBytes": {
          "module_bytes": "",
          "args": [["amount", { "bytes": "0400e1f505", "cl_type": "U512" }]]
        }
      },
      "session": {
        "Transfer": {
          "args": [
            ["amount", { "bytes": "0500f2052a01", "cl_type": "U512" }],
            [
              "target",
              {
                "bytes": "0202e99759649fa63a72c685b72e696b30c90f1deabb02d0d9b1de45eb371a73e5bb",
                "cl_type": "PublicKey"
              }
            ],
            ["id", { "bytes": "01d204000000000000", "cl_type": { "Option": "U64" } }]
          ]
        }
      },
      "approvals": []
    },
    "address": "casper:casper-test:02032E126170e5f28443775330B5B5Fe29dCE1a1dD3269910349525935ccbaf352EA"
  }
}

----------------------------------------

TITLE: Marking All Notifications as Read using cURL
DESCRIPTION: Example of marking all notifications as read using cURL command.

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/mark-all-as-read' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'

----------------------------------------

TITLE: Marking All Notifications as Read with Reown Notify API using cURL
DESCRIPTION: Shows how to mark all notifications as read using the Reown Notify API with a cURL command. It includes the API endpoint and authorization header.

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/mark-all-as-read' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'

----------------------------------------

TITLE: Installing WalletConnect Core SDK for C#
DESCRIPTION: Command to install the WalletConnect Core nuget package for C# projects.

LANGUAGE: shell
CODE:
dotnet add package WalletConnect.Core

----------------------------------------

TITLE: Coinbase Wallet Response Handler
DESCRIPTION: React Native code for handling Coinbase wallet responses using deep linking.

LANGUAGE: tsx
CODE:
import { handleResponse } from '@coinbase/wallet-mobile-sdk'

useEffect(() => {
  const sub = Linking.addEventListener('url', ({ url }) => {
    const handledBySdk = handleResponse(new URL(url))
    if (!handledBySdk) {
      // Handle other deeplinks
    }
  })

  return () => sub.remove()
}, [])

----------------------------------------

TITLE: Importing and Rendering Relay Component
DESCRIPTION: Imports the Relay component from ../../../cloud/relay.mdx path and renders it in the current document using MDX syntax.

LANGUAGE: jsx
CODE:
import Relay from '../../../cloud/relay.mdx'

<Relay />

----------------------------------------

TITLE: Importing Migration Component in MDX
DESCRIPTION: Import statement for the Migration component from the shared notifications frontend integration directory.

LANGUAGE: javascript
CODE:
import Migration from '../../../shared/notifications/frontend-integration/migration/javascript.mdx'

----------------------------------------

TITLE: Handling bip122_addressesChanged Event
DESCRIPTION: Example of a session_event payload for the bip122_addressesChanged event, notifying dapps about changes in connected account addresses.

LANGUAGE: javascript
CODE:
{
  "id": 1675759795769537,
  "topic": "95d6aca451b8e3c6d9d176761bf786f1cc0a6d38dffd31ed896306bb37f6ae8d",
  "params": {
    "event": {
      "name": "bip122_addressesChanged",
      "data": [
        {
            "address": "DTyt9wHTgizR8CwK8HAsWDaoMMxcaRuLWJ",
            "path": "m/44'/3'/0'/0/0"
        },
        {
            "address": "DA6rZ9aV3mkz9uxNvddzzbXEEcSPN8SCUS",
            "path": "m/44'/3'/0'/0/2"
        },
        {
            "address": "DDtQfA541GQU2KDrY3ofF5F5hsKxkFiUuG",
            "path": "m/44'/3'/0'/0/3"
        },
        {
            "address": "D5A6wPFhCNChUiQHGXftD8DiNgc2G7yT1L",
            "path": "m/44'/3'/0'/0/4"
        },
        {
            "address": "DFG9R8ENG4mK5gUiU1VRr3FBT13LfWJ4Fb",
            "path": "m/44'/3'/0'/1/3"
        },
        {
            "address": "D7rakaGgZvaBH1vGTxnsQ3ZdV7ejX57hRy",
            "path": "m/44'/3'/0'/1/4"
        }
      ]
    },
    "chainId": "bip122:1a91e3dace36e2be3bf030a65679fe821"
  }
}

----------------------------------------

TITLE: Setting up AppKit Hooks
DESCRIPTION: Implementation of AppKit hooks to access wallet address, connection status, chain ID, and provider

LANGUAGE: jsx
CODE:
const { address, isConnected } = useAppKitAccount();
const { chainId } = useAppKitNetworkCore();
const { walletProvider } = useAppKitProvider<Provider>('eip155');

----------------------------------------

TITLE: Importing CloudBanner and useBaseUrl in JavaScript
DESCRIPTION: This snippet imports the CloudBanner component and useBaseUrl function from Docusaurus, likely for use in a documentation page.

LANGUAGE: javascript
CODE:
import CloudBanner from '../../../components/CloudBanner'
import useBaseUrl from '@docusaurus/useBaseUrl'

----------------------------------------

TITLE: Configuring iOS Wallet Detection
DESCRIPTION: XML configuration for Info.plist to enable wallet detection on iOS devices by specifying wallet URL schemes.

LANGUAGE: xml
CODE:
<key>LSApplicationQueriesSchemes</key>
<array>
  <string>metamask</string>
  <string>trust</string>
  <string>safe</string>
  <string>rainbow</string>
  <string>uniswap</string>
  <!-- Add other wallet schemes names here -->
</array>

----------------------------------------

TITLE: Importing and Rendering Smart Sessions Component in React
DESCRIPTION: This snippet imports a shared Smart Sessions component and renders it within the current React component or page. It uses MDX syntax, allowing for a mix of Markdown and JSX.

LANGUAGE: jsx
CODE:
import SmartSessions from '../../shared/smart-sessions.mdx'

<SmartSessions />

----------------------------------------

TITLE: Importing and Rendering Analytics Component in JSX
DESCRIPTION: This snippet imports an Analytics component from a relative path and renders it within the current file. It uses JSX syntax to include the component.

LANGUAGE: jsx
CODE:
import Analytics from '../../../cloud/analytics.mdx'

<Analytics />

----------------------------------------

TITLE: Subscribing to Modal Events with useAppKitEvents in Vue
DESCRIPTION: Illustrates how to use the useAppKitEvents composable to subscribe to modal events and access event data.

LANGUAGE: typescript
CODE:
import { useAppKitEvents } from '@reown/appkit/vue'

const events = useAppKitEvents()

----------------------------------------

TITLE: Data Decryption with ever_decryptData
DESCRIPTION: Decrypts encrypted data using the ChaCha20Poly1305 algorithm with specified recipient public key and nonce.

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "ever_decryptData",
  "params": {
       "sourceAddress": "0:695e42...b8d",
       "algorithm": "ChaCha20Poly1305",
       "recipientPublicKey": "0x6e74...4e95",
       "data": "ZW5jRGF0YTE=",
       "nonce": "bm9uY2Ux"
  }
}

----------------------------------------

TITLE: NotifyNotification Interface Definition in TypeScript
DESCRIPTION: This snippet defines the TypeScript interface for the NotifyNotification object. It specifies the structure of the notification messages received by the Web3InboxClient.

LANGUAGE: typescript
CODE:
interface NotifyNotification {
  title: string
  sentAt: number
  body: string
  id: string
  url: string | null
  type: string
}

----------------------------------------

TITLE: Importing and Rendering Social Media Component in MDX
DESCRIPTION: Imports a shared socials component from a relative path and renders it within the page content using JSX syntax

LANGUAGE: mdx
CODE:
---
title: Email & Socials
---

import Socials from '../../shared/socials.mdx'

<Socials />

----------------------------------------

TITLE: Importing and Rendering Social Media Component in MDX
DESCRIPTION: Imports a shared socials component from a relative path and renders it within the page content using JSX syntax

LANGUAGE: mdx
CODE:
---
title: Email & Socials
---

import Socials from '../../shared/socials.mdx'

<Socials />

----------------------------------------

TITLE: Rendering Button Components in JSX
DESCRIPTION: This snippet demonstrates how to render Button components with specific props for the demo and guide links.

LANGUAGE: jsx
CODE:
<Button name="Try Demo" url="https://t.me/appkit_test_ggr_bot" /> <br/> <Button name="Check out the Telegram Mini Apps Guide" url="https://reown.com/blog/how-to-build-a-telegram-mini-app" />

----------------------------------------

TITLE: Session Request Response Implementation
DESCRIPTION: Shows how to implement session request response handling with success and error callbacks.

LANGUAGE: kotlin
CODE:
WalletKit.respondSessionRequest(Wallet.Params.SessionRequestResponse,
    onSuccess = {
        //Session request response was sent successfully - update your UI
    },
    onError = { error ->
        //Error while sending session response - update your UI
    })

----------------------------------------

TITLE: Executing Hedera Transaction with JSON-RPC
DESCRIPTION: Example of using the hedera_signAndExecuteTransaction method to sign and execute a transaction on the Hedera network. It includes the request format with signerAccountId and transactionList parameters, and shows the expected successful result and error response formats.

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "hedera_signAndExecuteTransaction",
  "params": {
    "signerAccountId": "hedera:testnet:0.0.12345",
    "transactionList": "Co8BKowBCocBChoKDAjchKWmBhDW..."
  }
}

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": {
    "nodeId": "0.0.3",
    "transactionHash": "252b8fd...",
    "transactionId": "0.0.12345678@1689281510.675369303"
  }
}

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "error": {
    "code": 9000,
    "message": "The transaction failed with precheck code...",
    "data": 6
  }
}

----------------------------------------

TITLE: Using Subscription Hooks in TypeScript
DESCRIPTION: Demonstrates how to use subscription-related hooks for managing subscriptions, including subscribing, unsubscribing, and retrieving subscription information. Shows examples of working with different accounts and dapp domains.

LANGUAGE: typescript
CODE:
const { subscribe, isLoading: isSubscribing } = useSubscribe()
const { unsubscribe, isLoading: isUnsubscribing } = useUnsubscribe()

// get subscription of current user to current dapp
const { data: subscription, getSubscription } = useSubscription()

// getSubscription can be used to get information about different dapps programmatically
const subscriptionToSameDappFromDifferentAccount = getSubscription(differentAccount)
const subscriptionToDifferentDappFromSameAccount = getSubscription(undefined, differentDappDomain)
const subscriptionToDifferentDappFromDifferentAccount = getSubscription(
  differentAccount,
  differentDappDomain
)

// subscribe to current dapp from current user
subscribe()
// subscribe to current dapp from different user
subscribe(differentAccount)
// subscribe to different dapp from current user
subscribe(undefined, differentDappDomain)
// subscribe to different dapp from different user
subscribe(differentAccount, differentDappDomain)

// unsubscribe from current dapp
unsubscribe()

// get all subscriptions for current account
const subscriptions = useAllSubscriptions()

const isSubscribed = Boolean(subscription)

----------------------------------------

TITLE: Installing AppKit CLI
DESCRIPTION: Command to install and run the AppKit CLI for easy project setup.

LANGUAGE: bash
CODE:
npx @reown/appkit-cli

----------------------------------------

TITLE: Defining SignPSBTResponse Type in TypeScript
DESCRIPTION: This snippet defines the SignPSBTResponse type used for the response of signing PSBTs. It includes the signed PSBT and an optional transaction ID if broadcasted.

LANGUAGE: typescript
CODE:
export type SignPSBTResponse = {
  /**
   * The signed PSBT, string base64 encoded
   */
  psbt: string
  /**
   * The `string` transaction id of the broadcasted transaction or `undefined` if not broadcasted
   */
  txid?: string
}

----------------------------------------

TITLE: Framework Selection Component
DESCRIPTION: JSX component implementation showing the framework selection interface with logos and descriptions for React, Next.js, Vue, and JavaScript integration options.

LANGUAGE: jsx
CODE:
<Wrapper
  type="large"
  fit={false}
  items={[
    {
      name: 'React',
      type: 'react',
      description: 'Get started with AppKit in React.',
      icon: reactLogo,
      href: '../react/transactions/swaps'
    },
    {
      name: 'Next.js',
      type: 'next',
      description: 'Get started with AppKit in Next.js.',
      icon: nextjsLogo,
      href: '../next/transactions/swaps',
      isWhite: true
    },
    {
      name: 'Vue',
      type: 'vue',
      description: 'Get started with AppKit in Vue.',
      icon: vueLogo,
      href: '../vue/transactions/swaps'
    },
    {
      name: 'JavaScript',
      type: 'javascript',
      description: 'Get started with AppKit in JavaScript.',
      icon: javascriptLogo,
      href: '../javascript/transactions/swaps'
    }
  ]}
/>

----------------------------------------

TITLE: Importing and Rendering Theming Component in MDX
DESCRIPTION: Imports a Theming component from a shared directory and renders it on the page.

LANGUAGE: mdx
CODE:
import Theming from '../../shared/theming.mdx'

# Theming

<Theming />

----------------------------------------

TITLE: Signing Hedera Message with JSON-RPC
DESCRIPTION: Example of using the hedera_signMessage method to sign a plain text message. It shows the request format with signerAccountId and message parameters, and the expected result format with the base64 encoded SignatureMap.

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "hedera_signMessage",
  "params": {
    "signerAccountId": "hedera:testnet:0.0.12345"
    "message": "Co8BKowBCocBChoKDAjchKWmBhDW..."
  }
}

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": {
    "signatureMap": "CAAQABjMrxoYABIGCAAQABgHGIDIr..."
  }
}

----------------------------------------

TITLE: Initializing Web3Inbox Client in TypeScript
DESCRIPTION: Demonstrates the change in initializing the Web3Inbox client from using a hook to a simple function call. The new method uses initWeb3InboxClient instead of useInitWeb3InboxClient.

LANGUAGE: typescript
CODE:
/* highlight-delete-start */
import { useInitWeb3InboxClient } from '@web3inbox/widget-react'
/* highlight-delete-end */
/* highlight-add-start */
import { initWeb3InboxClient } from '@web3inbox/react'
/* highlight-add-end */

/* highlight-delete-start */
useInitWeb3inboxClient({ projectId, domain, isLimited })
/* highlight-delete-end */
/* highlight-add-start */
initWeb3InboxClient({ projectId, domain, allApps })
/* highlight-add-end */

----------------------------------------

TITLE: Installing WalletConnect NotifyClient Dependencies
DESCRIPTION: Command to install the required WalletConnect packages for notification functionality.

LANGUAGE: bash
CODE:
yarn add @walletconnect/notify-client @walletconnect/react-native-compat

----------------------------------------

TITLE: Importing Blockchain API Documentation Component
DESCRIPTION: Imports a BlockchainAPI component from a relative cloud directory path and renders it on the page using MDX syntax.

LANGUAGE: mdx
CODE:
import BlockchainAPI from '../../../cloud/blockchain-api.mdx'

<BlockchainAPI />

----------------------------------------

TITLE: Initializing Notify Client for Android
DESCRIPTION: Initialize the Notify Client in the Android Application class.

LANGUAGE: kotlin
CODE:
val projectId = "" // Get Project ID at https://cloud.reown.com/
val connectionType = ConnectionType.AUTOMATIC or ConnectionType.MANUAL
val appMetaData = Core.Model.AppMetaData(
    name = "Wallet Name",
    description = "Wallet Description",
    url = "Wallet URL",
    icons = /*list of icon url strings*/,
    redirect = "kotlin-wallet-wc:/request" // Custom Redirect URI
)

CoreClient.initialize(projectId = projectId, connectionType = connectionType, application = this, metaData = appMetaData)

val init = Notify.Params.Init(CoreClient)

NotifyClient.initialize(init) { error ->
    // Error will be thrown if there's an issue during initialization
}

----------------------------------------

TITLE: Initializing Notify Client for Android
DESCRIPTION: Initialize the Notify Client in the Android Application class.

LANGUAGE: kotlin
CODE:
val projectId = "" // Get Project ID at https://cloud.reown.com/
val connectionType = ConnectionType.AUTOMATIC or ConnectionType.MANUAL
val appMetaData = Core.Model.AppMetaData(
    name = "Wallet Name",
    description = "Wallet Description",
    url = "Wallet URL",
    icons = /*list of icon url strings*/,
    redirect = "kotlin-wallet-wc:/request" // Custom Redirect URI
)

CoreClient.initialize(projectId = projectId, connectionType = connectionType, application = this, metaData = appMetaData)

val init = Notify.Params.Init(CoreClient)

NotifyClient.initialize(init) { error ->
    // Error will be thrown if there's an issue during initialization
}

----------------------------------------

TITLE: Importing and Rendering ExplorerSubmission Component in JSX/MDX
DESCRIPTION: This code snippet imports the ExplorerSubmission component from a relative path and renders it within the file. It uses MDX syntax to combine Markdown with JSX.

LANGUAGE: JSX
CODE:
import ExplorerSubmission from '../../../cloud/explorer-submission.mdx'

<ExplorerSubmission />

----------------------------------------

TITLE: Getting Account Addresses for Dynamic Wallet
DESCRIPTION: Example of retrieving account addresses from a dynamic wallet implementation, showing multiple addresses including unused change and receive addresses.

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "getAccountAddresses",
    "params": {
        "account": "ltc1q8c6fshw2dlwun7ekn9qwf37cu2rn755u9ym7p0"
    }
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result": [
        {
            "address": "ltc1q8c6fshw2dlwun7ekn9qwf37cu2rn755u9ym7p0",
            "path": "m/84'/2'/0'/0/0"
        },
        {
            "address": "LXkGhTKmZpviAtYdDaxWbiJsdg4tA6EzrU",
            "path": "m/49'/2'/0'/0/7"
        },
        {
            "address": "ltc1qj4plcuyhuzw0sycf99gcayzhhcddfj6xkcke5g",
            "path": "m/84'/2'/0'/0/2"
        },
        {
            "address": "ltc1qsdxa6pseqekqg5d3uksaxnwrey2s2ujcx03alc",
            "path": "m/84'/2'/0'/0/3"
        },
        {
            "address": "ltc1qhuvt3sq8xmx9ktzdfznkzvjl5zup7mg9zpwllw",
            "path": "m/84'/2'/0'/0/4"
        },
        {
            "address": "ltc1qtjd3y5a2axpwzfjcj4y9zy50qfjuxwzm0vu5fq",
            "path": "m/84'/2'/0'/1/3"
        },
        {
            "address": "ltc1qp7ujtprgl0quvcg0dj335p37r2mc2cxdc8xumq",
            "path": "m/84'/2'/0'/1/4"
        }
    ]
}

----------------------------------------

TITLE: Handling Web3Inbox Registration in TypeScript
DESCRIPTION: Demonstrates the new registration process using usePrepareRegistration and useRegister hooks. This approach separates the preparation and execution of registration, following the single responsibility principle.

LANGUAGE: typescript
CODE:
/* highlight-delete-start */
- const handleRegistration = () => {
-   register(signMessageAsync)
- }
/* highlight-delete-end */
/* highlight-add-start */
+ const { prepareRegistration } = usePrepareRegistration();
+ const { register, isLoading: isLoadingRegister } = useRegister();
+ const handleRegistration = async () => {
+   try {
+     const { message, registerParams } = await prepareRegistration();
+     const signature = await signMessageAsync({ message: message });
+     await register({ registerParams, signature });
+   } catch (registerIdentityError: any) {
+     console.error(registerIdentityError)
+   }
+ };
/* highlight-add-end */

----------------------------------------

TITLE: Detecting Smart Contract Wallets using ethers.js
DESCRIPTION: This code snippet demonstrates how to detect if an address belongs to a smart contract wallet using ethers.js. It retrieves the bytecode of the address and checks if it's non-empty.

LANGUAGE: javascript
CODE:
import { providers, utils } from 'ethers'

const provider = new providers.JsonRpcProvider(rpcUrl)

const bytecode = await provider.getCode(address)

const isSmartContract = bytecode && utils.hexStripZeros(bytecode) !== '0x'

----------------------------------------

TITLE: Importing useBaseUrl in JavaScript
DESCRIPTION: This code snippet imports the useBaseUrl function from the @docusaurus/useBaseUrl module. It's likely used for handling base URL paths in a Docusaurus-based documentation site.

LANGUAGE: javascript
CODE:
import useBaseUrl from '@docusaurus/useBaseUrl'

----------------------------------------

TITLE: Importing SIWX Default Component in React
DESCRIPTION: Demonstrates how to import and render the SIWX Default component from a shared directory location using MDX syntax.

LANGUAGE: jsx
CODE:
import SiwxDefault from '../../shared/siwx/siwx-default.mdx'

# SIWX Default Usage

<SiwxDefault />

----------------------------------------

TITLE: Subscribing to Notify Events in iOS
DESCRIPTION: Subscribe to various Notify events in iOS applications.

LANGUAGE: swift
CODE:
public var newSubscriptionPublisher: AnyPublisher<NotifySubscription, Never> {

public var notifyMessagePublisher: AnyPublisher<PushMessage, Never>

public var deleteSubscriptionPublisher: AnyPublisher<String, Never>

public var updateSubscriptionPublisher: AnyPublisher<Result<PushSubscription, Error>, Never> {

public var subscriptionsPublisher: AnyPublisher<[PushSubscription], Never>

----------------------------------------

TITLE: Subscribing to Notify Events in iOS
DESCRIPTION: Subscribe to various Notify events in iOS applications.

LANGUAGE: swift
CODE:
public var newSubscriptionPublisher: AnyPublisher<NotifySubscription, Never> {

public var notifyMessagePublisher: AnyPublisher<PushMessage, Never>

public var deleteSubscriptionPublisher: AnyPublisher<String, Never>

public var updateSubscriptionPublisher: AnyPublisher<Result<PushSubscription, Error>, Never> {

public var subscriptionsPublisher: AnyPublisher<[PushSubscription], Never>

----------------------------------------

TITLE: Configuring Android Manifest for Installed Wallet Detection
DESCRIPTION: This XML snippet shows how to configure the Android Manifest to enable detection of installed wallets. It uses the <queries> element to specify which wallet packages should be detectable.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <queries>
        <package android:name="..."/>
    </queries>

    <application>
        ...
    </application>
</manifest>

----------------------------------------

TITLE: Validating SIWE Message with Signature in JavaScript
DESCRIPTION: Method to validate a Sign-In with Ethereum message using the SIWE package. This ensures the message is valid, untampered, and properly signed by the wallet address.

LANGUAGE: javascript
CODE:
SiweMessage(message).validate(signature)

----------------------------------------

TITLE: Rejecting Authentication Requests in Swift
DESCRIPTION: This code demonstrates how to reject an authentication request using WalletKit. It takes a request ID as a parameter and rejects the associated session.

LANGUAGE: swift
CODE:
try await WalletKit.instance.rejectSession(requestId: requestId)

----------------------------------------

TITLE: Network Management Operations
DESCRIPTION: Examples of network management operations including adding EVM networks, removing Solana networks, and removing test networks.

LANGUAGE: javascript
CODE:
List<ReownAppKitModalNetworkInfo> extraChains = [...];
ReownAppKitModalNetworks.addSupportedNetworks('eip155', extraChains);

ReownAppKitModalNetworks.removeSupportedNetworks('solana');

ReownAppKitModalNetworks.removeTestNetworks();

----------------------------------------

TITLE: Configuring Notify Client for iOS
DESCRIPTION: Configure the Notify instance for iOS applications.

LANGUAGE: swift
CODE:
try Notify.configure(environment: APNSEnvironment, crypto: CryptoProvider)

----------------------------------------

TITLE: Configuring Notify Client for iOS
DESCRIPTION: Configure the Notify instance for iOS applications.

LANGUAGE: swift
CODE:
try Notify.configure(environment: APNSEnvironment, crypto: CryptoProvider)

----------------------------------------

TITLE: Configuring Excluded Wallet IDs
DESCRIPTION: Demonstrates how to exclude specific wallets from being displayed in the modal interface by providing their wallet IDs.

LANGUAGE: javascript
CODE:
final Set<String> excludedWalletIds = {
  'c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96', // MetaMask
  '4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0', // Trust
  'fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa', // Coinbase Wallet
}

----------------------------------------

TITLE: Example SIWX Implementation in TypeScript
DESCRIPTION: Practical example showing how to implement the SIWXConfig interface with basic method implementations and integrate it with AppKit.

LANGUAGE: typescript
CODE:
import { createAppKit, type SIWXConfig } from '@reown/appkit'

const siwx: SIWXConfig = {
  createMessage: async (input) => {
    // Implement your logic to create a message
    return 'my message'
  }
  addSession: async (session) => {
    // Implement your logic to add a session
  },
  revokeSession: async (chainId, address) => {
    // Implement your logic to revoke a session
  },
  setSessions: async (sessions) => {
    // Implement your logic to set sessions
  },
  getSessions: async (chainId, address) => {
    // Implement your logic to get sessions
    return []
  }
}

createAppKit({
  // ... your configuration
  siwx
})

----------------------------------------

TITLE: Handling Deep Links in Swift
DESCRIPTION: Processes deep links within the AppKit instance.

LANGUAGE: swift
CODE:
AppKit.instance.handleDeeplink(url)

----------------------------------------

TITLE: Importing and Rendering Relay Documentation in MDX
DESCRIPTION: Imports the Relay documentation component from a relative path and renders it inline. Uses MDX syntax to combine markdown with JSX components.

LANGUAGE: mdx
CODE:
---
title: Relay
---

import Relay from '../../../cloud/relay.mdx'

<Relay />

----------------------------------------

TITLE: Instantiating Hidden AppKit Buttons for Email & Social Wallet Support in Dart
DESCRIPTION: This code snippet shows how to instantiate and hide AppKitModalConnectButton and AppKitModalAccountButton, which are necessary for Email & Social Wallets to work properly when not using these buttons visibly in the UI.

LANGUAGE: dart
CODE:
AppKitModalConnectButton(
  appKit: _appKitModal,
  custom: SizedBox.shrink(), // Will make the button invisible
),
AppKitModalAccountButton(
  appKit: _appKitModal,
  custom: SizedBox.shrink(), // Will make the button invisible
),

----------------------------------------

TITLE: Running LLMSTXT Conversion via NPM Script
DESCRIPTION: Command to run the LLMSTXT conversion script using the project's npm script configuration.

LANGUAGE: bash
CODE:
pnpm run build-llmstxt

----------------------------------------

TITLE: Importing and Rendering Relay Documentation in MDX
DESCRIPTION: Imports the Relay documentation component from a relative path and renders it inline. Uses MDX syntax to combine markdown with JSX components.

LANGUAGE: mdx
CODE:
---
title: Relay
---

import Relay from '../../../cloud/relay.mdx'

<Relay />

----------------------------------------

TITLE: Smart Session Response Format in TypeScript
DESCRIPTION: Example of the response format returned after a successful grantPermissions call, including chainId, address, expiry, permissions, and context.

LANGUAGE: typescript
CODE:
{
  chainId: `0x14a34`
  address: `0x...`
  expiry: 1727824386
  permissions: [
    {
      type: 'contract-call',
      data: {
        address: '0x2E65BAfA07238666c3b239E94F32DaD3cDD6498D', // sample donut contract address
        abi: [
          {
            inputs: [{ internalType: 'uint256', name: 'amount', type: 'uint256' }],
            name: 'purchase',
            outputs: [],
            stateMutability: 'payable',
            type: 'function'
          }
        ],
        functions: [ {
          functionName: 'purchase'
        } ]
      }
    }
  ],
  context: '...'  // Context identifier for the session
}

----------------------------------------

TITLE: Defining Proposal Namespaces in JavaScript
DESCRIPTION: This code snippet demonstrates how to structure proposal namespaces for a dapp requesting access to Ethereum Mainnet, Polygon, and Cosmos Mainnet. It specifies the required chains, methods, and events for each namespace.

LANGUAGE: javascript
CODE:
{
  "eip155": {
    "chains": ["eip155:137", "eip155:1"],
    "methods": ["eth_sign"],
    "events": ["accountsChanged"]
  },
  "cosmos": {
    "chains": ["cosmos:cosmoshub-4"],
    "methods": ["cosmos_signDirect"],
    "events": ["someCosmosEvent"]
  }
}

----------------------------------------

TITLE: Importing and Rendering Verify Component in MDX
DESCRIPTION: Imports a Verify component from a relative path in the cloud directory and renders it using MDX syntax. The file uses frontmatter metadata to specify the title.

LANGUAGE: mdx
CODE:
---
title: Verify
---

import Verify from '../../../cloud/verify.mdx'

<Verify />

----------------------------------------

TITLE: Listening for Real-time Message Notifications in TypeScript
DESCRIPTION: This code snippet shows how to set up an event listener for 'notify_message' events using a WebSocket client. It logs the title of the received notification to the console.

LANGUAGE: typescript
CODE:
client.on('notify_message', ({ notification }) => {
  console.log(notification.title)
})

----------------------------------------

TITLE: Rendering Markdown Heading
DESCRIPTION: A simple markdown heading denoting the 'Graduation' section of documentation.

LANGUAGE: markdown
CODE:
# Graduation

----------------------------------------

TITLE: Installing AppKit with Ethers v5 for Ethereum
DESCRIPTION: Command to install AppKit and its dependencies for use with Ethers v5 and Ethereum.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2

----------------------------------------

TITLE: Importing AppKit Base Theme in CSS
DESCRIPTION: This CSS snippet shows how to import the AppKit Base Theme stylesheet into a custom theme file.

LANGUAGE: css
CODE:
@import url("/Packages/com.reown.appkit.unity/UI Toolkit/AppKit Base Theme.tss");

----------------------------------------

TITLE: Defining Session Namespace for Multiple Chains in JavaScript
DESCRIPTION: This code snippet shows an example of a session namespace that includes accounts, methods, and events for Polkadot, Ethereum/Polygon (EIP155), and Cosmos chains. It demonstrates how a wallet might respond to a proposal namespace.

LANGUAGE: javascript
CODE:
{
  "polkadot": {
    "accounts": [
        "polkadot:91b171bb158e2d3848fa23a9f1c25182:AZBEwbZhYeiofodZnM2iAoshP3pXRPNSJEKFqEPDmvv1mY7"
    ]
    "methods": ["polkadot_signMessage", "polkadot_signTransaction"],
    "events": ["accountsChanged"]
  },
  "eip155": {
    "accounts": [
      "eip155:137:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb",
      "eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb"
    ],
    "methods": ["eth_sign"],
    "events": ["accountsChanged"]
  },
  "cosmos": {
    "accounts": [
      "cosmos:cosmoshub-4:cosmos1t2uflqwqe0fsj0shcfkrvpukewcw40yjj6hdc0"
    ],
    "methods": ["cosmos_signDirect", "personal_sign"],
    "events": ["someCosmosEvent", "proofFinalized"]
  }
}

----------------------------------------

TITLE: Registering Device Token for Push Notifications in Swift
DESCRIPTION: Registers the device token with WalletKit to enable push notifications for the wallet application.

LANGUAGE: swift
CODE:
try await WalletKit.instance.register(deviceToken: deviceToken)

----------------------------------------

TITLE: Rendering Text Style Variables Table in JSX
DESCRIPTION: This JSX code renders another Table component to display text style variables. It includes headers and data for various text-related CSS variables used in Web3Modal.

LANGUAGE: jsx
CODE:
<Table
  headers={['Variable', 'Description', 'Example']}
  data={[
    {
      variable: { code: '--wcm-text-big-bold-size' },
      description: 'Font size of big-bold text variant (modal and page titles)',
      example: { code: '2rem' }
    },
    // ... (other data entries)
  ]}
/>

----------------------------------------

TITLE: Triggering AppKit Modal with Hooks in React Native
DESCRIPTION: This snippet shows how to use the useAppKit hook to programmatically open the AppKit modal in a React Native application. It demonstrates creating a custom button that triggers the modal when pressed.

LANGUAGE: tsx
CODE:
import { Pressable, Text } from 'react-native'
import { useAppKit } from '@reown/appkit-ethers5-react-native'

export default function ConnectView() {
  const { open } = useAppKit()

  return (
    <>
      <Pressable onClick={() => open()}>
        <Text>Open Connect Modal</Text>
      </Pressable>
    </>
  )
}

----------------------------------------

TITLE: Importing crypto polyfill in React Native App root file
DESCRIPTION: This code snippet shows how to import the crypto polyfill and other necessary modules in the main App.js file of a React Native project using Expo SDK 48.

LANGUAGE: javascript
CODE:
// src/App.js

import './crypto-polyfill.js'
import '@walletconnect/react-native-compat';
...
import { createAppKit } from '@reown/appkit-...'

----------------------------------------

TITLE: Uninstalling Anza Adapter Packages
DESCRIPTION: Command to uninstall the old Solana wallet adapter packages.

LANGUAGE: bash
CODE:
npm uninstall @solana/wallet-adapter-base @solana/wallet-adapter-react @solana/wallet-adapter-react-ui

----------------------------------------

TITLE: Uninstalling Anza Adapter Packages
DESCRIPTION: Command to uninstall the old Solana wallet adapter packages.

LANGUAGE: bash
CODE:
npm uninstall @solana/wallet-adapter-base @solana/wallet-adapter-react @solana/wallet-adapter-react-ui

----------------------------------------

TITLE: Installing Reown AppKit Dependencies
DESCRIPTION: Command to install Reown AppKit core and ethers adapter packages

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-ethers

----------------------------------------

TITLE: Handling Coinbase Wallet Deep Links in AppDelegate (Swift)
DESCRIPTION: This code snippet shows how to handle deep links for Coinbase Wallet integration in the AppDelegate. It's required for proper functioning of Coinbase Wallet with AppKit.

LANGUAGE: swift
CODE:
import CoinbaseWalletSDK

override func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
    AppKit.instance.handleDeeplink(url)
}

----------------------------------------

TITLE: Configuring URL Schemes in iOS Info.plist
DESCRIPTION: Configuration required in iOS Info.plist to enable deep linking capabilities for wallet apps. Defines custom URL scheme for the wallet application.

LANGUAGE: ruby
CODE:
<key>CFBundleURLTypes</key>
<array>
	<dict>
		<key>CFBundleTypeRole</key>
		<string>Editor</string>
		<key>CFBundleURLName</key>
		<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
		<key>CFBundleURLSchemes</key>
		<array>
			<string>examplewallet</string>
		</array>
	</dict>
</array>

----------------------------------------

TITLE: Rendering Platform-specific Content Tabs in JSX
DESCRIPTION: This JSX code creates a tabbed interface for displaying platform-specific content (iOS, Android, and web) related to wallet notifications and sample app links.

LANGUAGE: jsx
CODE:
<PlatformTabs
	groupId="w3iw"
	activeOptions={["ios", "android", "web"]}
>

<PlatformTabItem value="web">
- [React Native](../../../walletkit/react-native/notifications/notify/installation)

</PlatformTabItem>

<PlatformTabItem value="ios">

- [Swift](../../../walletkit/ios/notifications/notify/installation)
- [Testflight](https://testflight.apple.com/join/09bTAryp)

</PlatformTabItem>

<PlatformTabItem value="android">

- [Kotlin](../../../walletkit/android/notifications/notify/installation)
- [Firebase](https://appdistribution.firebase.dev/i/d2c86e879abd5a86)

</PlatformTabItem>
</PlatformTabs>

----------------------------------------

TITLE: Defining RequestBody Type for Notify API in TypeScript
DESCRIPTION: Defines the structure of the request body for sending notifications using the Reown Notify API. It includes fields for notification_id, notification details, and target accounts.

LANGUAGE: typescript
CODE:
type RequestBody = {
  notification_id?: string | null
  notification: {
    type: string
    title: string
    body: string
    url?: string | null
  }
  accounts: string[]
}

----------------------------------------

TITLE: Configuring Solana Adapter and Modal in React
DESCRIPTION: Setup for Solana Adapter and modal configuration in Reown AppKit for React.

LANGUAGE: tsx
CODE:
const solanaAdapter = new SolanaAdapter()

const modal = createAppKit({
  projectId,
  metadata,
  networks: [solana, solanaTestnet, solanaDevnet],
  adapters: [solanaAdapter],
})

----------------------------------------

TITLE: React Component Import Declarations
DESCRIPTION: Import statements for platform logo assets and wrapper component used in the platform selection interface

LANGUAGE: javascript
CODE:
import Wrapper from '../../components/Home/Wrapper.js'
import reactLogo from '../../../static/assets/home/reactLogo.png'
import nextjsLogo from '../../../static/assets/home/nextjsLogo.png'
import htmlLogo from '../../../static/assets/home/htmlLogo.png'
import vueLogo from '../../../static/assets/home/vueLogo.png'
import androidLogo from '../../../static/assets/home/androidLogo.png'
import iosLogo from '../../../static/assets/home/iosLogo.png'
import rnLogo from '../../../static/assets/home/rnLogo.png'
import flutterLogo from '../../../static/assets/home/flutterLogo.png'
import netLogo from '../../../static/assets/home/dotnet.svg'
import javascriptLogo from '../../../static/assets/home/javascriptLogo.png'

----------------------------------------

TITLE: Computing EIP-191 Compliant Hash using ethers.js
DESCRIPTION: This snippet demonstrates how to compute an EIP-191 compliant hash for message signing using ethers.js. It uses the utils.hashMessage function to generate the hash.

LANGUAGE: javascript
CODE:
import { utils } from 'ethers'

const hash = utils.hashMessage(message)

----------------------------------------

TITLE: WalletKit Client Initialization in C#
DESCRIPTION: Initializes the WalletKit client using core and metadata objects

LANGUAGE: csharp
CODE:
var sdk = await WalletKitClient.Init(core, metadata, metadata.Name);

----------------------------------------

TITLE: Importing Asset Images
DESCRIPTION: Import statements for various framework and platform logo images used in the documentation.

LANGUAGE: javascript
CODE:
import reactLogo from '../../static/assets/home/reactLogo.png'
import nextjsLogo from '../../static/assets/home/nextjsLogo.png'
import htmlLogo from '../../static/assets/home/htmlLogo.png'
import vueLogo from '../../static/assets/home/vueLogo.png'
import androidLogo from '../../static/assets/home/androidLogo.png'
import iosLogo from '../../static/assets/home/iosLogo.png'
import rnLogo from '../../static/assets/home/rnLogo.png'
import flutterLogo from '../../static/assets/home/flutterLogo.png'
import unityLogo from '../../static/assets/home/unityLogo.png'
import javascriptLogo from '../../static/assets/home/javascriptLogo.png'

----------------------------------------

TITLE: Importing Platform-specific Components in JSX
DESCRIPTION: This code snippet imports PlatformTabs and PlatformTabItem components, likely used for creating platform-specific tabs in the documentation.

LANGUAGE: jsx
CODE:
import PlatformTabs from '../../../components/PlatformTabs'
import PlatformTabItem from '../../../components/PlatformTabItem'

----------------------------------------

TITLE: Using useAppKitEventSubscription Hook with Ethers5 in React Native
DESCRIPTION: Illustrates how to use the useAppKitEventSubscription hook from the @reown/appkit-ethers5-react-native package to subscribe to specific modal events.

LANGUAGE: typescript
CODE:
import { useAppKitEventSubscription } from '@reown/appkit-ethers5-react-native'

useAppKitEventSubscription('MODAL_OPEN', newEvent => {
  // your code here
});

----------------------------------------

TITLE: Configuring Solana Adapter and Modal in Vue
DESCRIPTION: Setup for Solana Adapter and modal configuration in Reown AppKit for Vue.

LANGUAGE: tsx
CODE:
const solanaAdapter = new SolanaAdapter()

const modal = createAppKit({
  projectId,
  metadata,
  networks: [solana, solanaTestnet, solanaDevnet],
  adapters: [solanaAdapter],
})

----------------------------------------

TITLE: Sending Litecoin Transfer Request and Response
DESCRIPTION: Example of sending 1.23 LTC using the sendTransfer method, including account address, recipient address, amount in litoshis, and an optional memo field.

LANGUAGE: javascript
CODE:
// Request
{
    "id": 1,
    "jsonrpc": "2.0",
    "method": "sendTransfer",
    "params": {
        "account": "ltc1q8c6fshw2dlwun7ekn9qwf37cu2rn755u9ym7p0",
        "recipient": "ltc1qn9h77dt0s6ar78ptxq58t2ne7tyhvfnruc3e7d",
        "amount": "123000000",
        "memo": "636861726c6579206c6f766573206865"
    }
}

// Result
{
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "txid": "f007551f169722ce74104d6673bd46ce193c624b8550889526d1b93820d725f7"
    }
}

----------------------------------------

TITLE: Opening AppKit Modal with Web Component in React
DESCRIPTION: This snippet shows how to use the AppKit web component to create a connect button in a React component. The web component is a global HTML element that doesn't require importing.

LANGUAGE: tsx
CODE:
export default function ConnectButton() {
  return <appkit-button />
}

----------------------------------------

TITLE: Getting All Subscribers using cURL
DESCRIPTION: This cURL command shows how to retrieve all subscribers using the command line. It includes the necessary authorization header.

LANGUAGE: bash
CODE:
curl 'https://notify.walletconnect.com/<PROJECT_ID>/subscribers' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'

----------------------------------------

TITLE: Using useWalletInfo Hook with Ethers5 in React Native
DESCRIPTION: Illustrates how to use the useWalletInfo hook from the @reown/appkit-ethers5-react-native package to get metadata information from the connected wallet.

LANGUAGE: typescript
CODE:
import { useWalletInfo } from '@reown/appkit-ethers5-react-native'

const { walletInfo } = useWalletInfo()

----------------------------------------

TITLE: Managing Network Data with useAppKitNetwork in Vue
DESCRIPTION: Illustrates the usage of useAppKitNetwork composable for accessing network data and methods, including switching networks.

LANGUAGE: typescript
CODE:
import { useAppKitNetwork } from "@reown/appkit/vue";

export default Component(){
  const networkData = useAppKitNetwork()
}

LANGUAGE: typescript
CODE:
import { polygon } from '@reown/appkit/networks'

...

networkData.switchNetwork(polygon)

----------------------------------------

TITLE: Reading ERC20 Token Balance in C# using AppKit
DESCRIPTION: This snippet demonstrates how to read the balance of an ERC20 token for a specific address. It uses AppKit's Evm.ReadContractAsync method to call the balanceOf and decimals functions of the ERC20 contract, then calculates the final balance.

LANGUAGE: csharp
CODE:
const string contractAddress = "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984";
const string ownerAddress = "0x3D30B1aB88D487B0F3061F40De76845Bec3F1e94";
const string abi = "..."; // ABI of the ERC20 token contract

var evm = AppKit.Evm;
var balance = await evm.ReadContractAsync<BigInteger>(contractAddress, abi, "balanceOf", new object[]
{
    ownerAddress
});
var decimals = await evm.ReadContractAsync<BigInteger>(contractAddress, abi, "decimals");

var finalBalance = tokenBalance / BigInteger.Pow(10, tokenDecimal);

----------------------------------------

TITLE: Using useAppKitAccount Hook in Vue
DESCRIPTION: Demonstrates how to use the useAppKitAccount hook to retrieve client information such as address, status, and connection state.

LANGUAGE: tsx
CODE:
import { useAppKitAccount } from '@reown/appkit/vue'

const { address, status, isConnected } = useAppKitAccount()

----------------------------------------

TITLE: Default Account Types Configuration
DESCRIPTION: Configuration for setting default account types for different network types

LANGUAGE: typescript
CODE:
createAppKit({
  //...
  defaultAccountTypes: {eip155:'eoa'}
})

----------------------------------------

TITLE: Importing Multichain Component and Platform-specific Tabs in JSX/MDX
DESCRIPTION: This snippet demonstrates the import statements for the Multichain component and platform-specific tab components. It also shows the usage of the Multichain component.

LANGUAGE: jsx
CODE:
import Multichain from '../../shared/multichain.mdx'
import PlatformTabs from '../../../components/PlatformTabs'
import PlatformTabItem from '../../../components/PlatformTabItem'

<Multichain />

----------------------------------------

TITLE: Installing Additional React Native Dependencies
DESCRIPTION: Installs supplementary packages for async storage, cryptographic polyfills, SVG support, modals, network info and WalletConnect compatibility.

LANGUAGE: bash
CODE:
yarn add @react-native-async-storage/async-storage react-native-get-random-values react-native-svg react-native-modal @react-native-community/netinfo @walletconnect/react-native-compat

----------------------------------------

TITLE: Importing SiwxCloudAuth Component in JSX
DESCRIPTION: This snippet demonstrates how to import the SiwxCloudAuth component from a shared location for use in implementing cloud authentication with SIWX.

LANGUAGE: jsx
CODE:
import SiwxCloudAuth from '../../shared/siwx/siwx-cloud-auth.mdx'

----------------------------------------

TITLE: Configuring AppKit Link Mode in TypeScript
DESCRIPTION: This snippet demonstrates how to enable Link Mode in the app's metadata configuration. It sets up the necessary properties including the universal link and enables the linkMode feature.

LANGUAGE: typescript
CODE:
const metadata = {
  name: 'AppKit RN',
  description: 'AppKit RN Example',
  url: 'https://reown.com',
  icons: ['https://avatars.githubusercontent.com/u/179229932'],
  redirect: {
    native: 'YOUR_APP_SCHEME://',
    /* highlight-add-start */
    universal: 'https://example.com/example_dapp',
    linkMode: true
    /* highlight-add-end */
  }
}

const config = defaultConfig({ metadata })

----------------------------------------

TITLE: Configuring AppKit Link Mode in TypeScript
DESCRIPTION: This snippet demonstrates how to enable Link Mode in the app's metadata configuration. It sets up the necessary properties including the universal link and enables the linkMode feature.

LANGUAGE: typescript
CODE:
const metadata = {
  name: 'AppKit RN',
  description: 'AppKit RN Example',
  url: 'https://reown.com',
  icons: ['https://avatars.githubusercontent.com/u/179229932'],
  redirect: {
    native: 'YOUR_APP_SCHEME://',
    /* highlight-add-start */
    universal: 'https://example.com/example_dapp',
    linkMode: true
    /* highlight-add-end */
  }
}

const config = defaultConfig({ metadata })

----------------------------------------

TITLE: Importing SIWX Documentation Component in MDX
DESCRIPTION: MDX implementation showing the import and usage of a shared SIWX documentation component, including page metadata and title configuration.

LANGUAGE: mdx
CODE:
---
title: SIWX
pagination_next: appkit/vue/core/siwx-default
---

import SiwxIndex from '../../shared/siwx/index.mdx'

# Sign In With X

<SiwxIndex />

----------------------------------------

TITLE: Configuring Next.js for AppKit Compatibility
DESCRIPTION: This configuration in next.config.js is necessary to make AppKit work properly with Next.js SSR.

LANGUAGE: ts
CODE:
// Path: next.config.js
const nextConfig = {
  webpack: config => {
    config.externals.push('pino-pretty', 'lokijs', 'encoding')
    return config
  }
}

----------------------------------------

TITLE: Importing Sponsored Transactions MDX Component
DESCRIPTION: Imports a shared MDX component for sponsored transactions documentation and renders it on the page.

LANGUAGE: jsx
CODE:
import SponsoredTransactions from '../../shared/sponsored-transactions.mdx'

# Sponsored Transactions

<SponsoredTransactions />

----------------------------------------

TITLE: Implementing AppKit with Vue Composables
DESCRIPTION: Demonstrates how to use the AppKit composable to trigger modal functionality. Shows both basic modal opening and opening with specific view configuration.

LANGUAGE: html
CODE:
<script setup lang="ts">
  import { useAppKit } from '@reown/appkit/vue'

  // Use modal composable
  const modal = useAppKit()
</script>

<template>
  <button @click="modal.open()">Open Connect Modal</button>
  <button @click="modal.open({ view: 'Networks' })">Open Network Modal</button>
</template>

----------------------------------------

TITLE: Importing Platform Components
DESCRIPTION: React component imports for handling platform-specific implementations

LANGUAGE: javascript
CODE:
import PlatformTabs from '../../../components/PlatformTabs'
import PlatformTabItem from '../../../components/PlatformTabItem'

import WagmiImplementation from '../wagmi/email.mdx'
import EthersImplementation from '../ethers/email.mdx'

----------------------------------------

TITLE: Rendering Framework Options with Wrapper Component in JSX
DESCRIPTION: This code snippet shows the usage of a custom Wrapper component to display a grid of framework options for implementing One-Click Auth. Each item in the grid includes a name, description, icon, and link to the corresponding documentation.

LANGUAGE: JSX
CODE:
<Wrapper
  type="large"
  fit={false}
  items={[
    {
      name: 'React',
      type: 'react',
      description: 'Get started with AppKit in React.',
      icon: reactLogo,
      href: '../react/core/siwe'
    },
    {
      name: 'Next.js',
      type: 'next',
      description: 'Get started with AppKit in Next.js.',
      icon: nextjsLogo,
      href: '../next/core/siwe',
      isWhite: true
    },
    {
      name: 'Vue',
      type: 'vue',
      description: 'Get started with AppKit in Vue.',
      icon: vueLogo,
      href: '../vue/core/siwe'
    },
    {
      name: 'JavaScript',
      type: 'javascript',
      description: 'Get started with AppKit in JavaScript.',
      icon: javascriptLogo,
      href: '../javascript/core/siwe'
    },
    {
      name: 'React Native',
      type: 'react-native',
      description: 'Get started with AppKit in React Native.',
      icon: rnLogo,
      href: '../react-native/core/siwe'
    },
    {
      name: 'Flutter',
      type: 'flutter',
      description: 'Get started with AppKit in Flutter.',
      icon: flutterLogo,
      href: '../flutter/core/siwe'
    },
    {
      name: 'Android',
      type: 'android',
      description: 'Get started with AppKit in Android.',
      icon: androidLogo,
      href: '../android/core/one-click-auth'
    },
    {
      name: 'iOS',
      type: 'ios',
      description: 'Get started with AppKit in iOS.',
      icon: iosLogo,
      href: '../ios/core/one-click-auth',
      isWhite: true
    },
    {
      name: 'Unity',
      type: 'unity',
      description: 'Get started with AppKit in Unity.',
      icon: unityLogo,
      href: '../unity/core/siwe'
    }
  ]}
/>

----------------------------------------

TITLE: Importing and Rendering Resources Component in MDX
DESCRIPTION: Demonstrates importing a shared Resources component and rendering it within an MDX page structure

LANGUAGE: mdx
CODE:
---
title: Resources
---

import Resources from '../../shared/resources.mdx'

# Resources

<Resources />

----------------------------------------

TITLE: Fetching Available Notification Types with Notify API in TypeScript
DESCRIPTION: Demonstrates how to fetch the latest notification types specified by a dApp using the subscription's scope.

LANGUAGE: typescript
CODE:
const notificationTypes = notifyClient
  .getActiveSubscriptions({ account })
  .filter(subscription => subscription.topic === topic).scope

----------------------------------------

TITLE: Installing AppKit Dependencies for Ethers v5 in Next.js
DESCRIPTION: This command installs the necessary dependencies for using AppKit with Ethers v5 in a Next.js project.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2

----------------------------------------

TITLE: Registering PushMessagingService in AndroidManifest.xml
DESCRIPTION: This XML snippet shows how to register the PushMessagingService in the AndroidManifest.xml file. It sets up the service to handle Firebase Cloud Messaging events.

LANGUAGE: xml
CODE:
<application...>
    <service android:name=".SampleFirebaseService">
        <intent-filter>
            <action android:name="com.google.firebase.MESSAGING_EVENT" />
        </intent-filter>
    </service>
</application>

----------------------------------------

TITLE: Connecting to WalletConnect with Multiple Chain Namespaces in JavaScript
DESCRIPTION: Establish a WalletConnect session with support for multiple Polkadot-based chains and define required methods and events.

LANGUAGE: javascript
CODE:
const params = {
  requiredNamespaces: {
    polkadot: {
      methods: ['polkadot_signTransaction', 'polkadot_signMessage'],
      chains: [
        'polkadot:91b171bb158e2d3848fa23a9f1c25182', // polkadot
        'polkadot:afdc188f45c71dacbaa0b62e16a91f72', // hydradx
        'polkadot:0f62b701fb12d02237a33b84818c11f6' // turing network
      ],
      events: ['chainChanged", "accountsChanged']
    }
  }
}

const { uri, approval } = await provider.client.connect(params)

----------------------------------------

TITLE: Rendering Demo Button in JSX
DESCRIPTION: This snippet shows the usage of a custom Button component to create a 'Try Demo' button that links to an external demo page for the One-Click Auth feature.

LANGUAGE: JSX
CODE:
<Button name="Try Demo" url="https://appkit-lab.reown.com/library/wagmi-siwe/" />

----------------------------------------

TITLE: Installing Reown AppKit and Solana Adapter Packages
DESCRIPTION: Command to install the Reown AppKit and Solana wallet adapter packages.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-solana

----------------------------------------

TITLE: Importing Blockchain API Documentation
DESCRIPTION: Imports blockchain API documentation component from a relative path and renders it using MDX syntax.

LANGUAGE: mdx
CODE:
---
title: Blockchain API
---

import BlockchainAPI from '../../../cloud/blockchain-api.mdx'

<BlockchainAPI />

----------------------------------------

TITLE: Adding reown Dependencies in app build.gradle.kts
DESCRIPTION: Declares the required reown dependencies including the BOM (Bill of Materials), core library, and notify module.

LANGUAGE: gradle
CODE:
implementation(platform("com.reown:android-bom:release_version"))
implementation("com.reown:android-core")
implementation("com.reown:notify")

----------------------------------------

TITLE: Creating and Opening WalletConnect Modal in JavaScript
DESCRIPTION: Instantiate a WalletConnect modal and open it to allow users to scan the QR code or copy the connection URI.

LANGUAGE: javascript
CODE:
const walletConnectModal = new WalletConnectModal({
  projectId: '2ea3f3ghubh32b8ie2f2'
})

// if there is a URI from the client connect step open the modal
if (uri) {
  walletConnectModal.openModal({ uri })
}
// await session approval from the wallet app
const walletConnectSession = await approval()

----------------------------------------

TITLE: Using SIWX Cloud Auth Component in JSX
DESCRIPTION: This snippet shows how to use the imported SIWX cloud authentication component within a JSX file. The component is self-closing, indicating it likely renders the necessary configuration or UI elements for SIWX authentication.

LANGUAGE: jsx
CODE:
<SiwxCloudAuth />

----------------------------------------

TITLE: React Implementation with Reown AppKit
DESCRIPTION: Configuration code for setting up Reown AppKit in a React application, including imports, adapter setup, and initialization

LANGUAGE: typescript
CODE:
import { createAppKit } from '@reown/appkit/react'
import { arbitrum, mainnet } from '@reown/appkit/networks'
import { Ethers5Adapter } from '@reown/appkit-adapter-ethers5'

createAppKit({
 adapters: [new Ethers5Adapter()],
 networks: [mainnet, arbitrum],
 metadata,
 projectId,
 features: {
   analytics: true,
 }
})

----------------------------------------

TITLE: Importing and Rendering Analytics Component in MDX
DESCRIPTION: MDX code that defines a page with an Analytics component import from a cloud directory path and renders it using JSX syntax.

LANGUAGE: mdx
CODE:
---
title: Analytics
---

import Analytics from '../../../cloud/analytics.mdx'

<Analytics />

----------------------------------------

TITLE: Android App Links Manifest Configuration
DESCRIPTION: XML configuration for Android manifest to enable App Links with auto-verification and proper intent filtering.

LANGUAGE: xml
CODE:
<intent-filter android:autoVerify="true">
  <action android:name="android.intent.action.VIEW" />

  <category android:name="android.intent.category.DEFAULT" />
  <category android:name="android.intent.category.BROWSABLE" />

  <data android:scheme="https" />
  <data android:host="your_wallet_universal_link.com" />
  <data android:pathPattern="/open" />
</intent-filter>

----------------------------------------

TITLE: Implementing Custom Method in Wallet for Polkadot Signed Hex
DESCRIPTION: This code snippet demonstrates how to implement a custom method 'polkadot_getSignedHex' in a wallet to sign a transaction and return the signed hex. It shows how wallets can extend functionality based on dapp requirements.

LANGUAGE: javascript
CODE:
public async getSignedHex(payload: SignerPayloadJSON) {
    this.registry.setSignedExtensions(payload.signedExtensions)
    const txPayload = this.registry.createType('ExtrinsicPayload', payload, {
      version: payload.version
    });

    const { signature } = txPayload.sign(this.keypair)

    const extrinsic = registry.createType(
        'Extrinsic',
        { method: payload.method },
        { version: payload.version }
    );

    extrinsic.addSignature(unsigned.address, signature, unsigned);

    const hex = extrinsic.toHex();

    return { hex };
  }

----------------------------------------

TITLE: Setting Recommended Wallets for AppKit Initialization in Kotlin
DESCRIPTION: This snippet demonstrates how to set recommended wallets when initializing AppKit. It uses a list of wallet IDs to prioritize certain wallets in the WalletGuide explorer.

LANGUAGE: kotlin
CODE:
val recommendedWalletsIds = listOf<String>(
    "1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369",
    "4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0"
)

val initParams = Modal.Params.Init(core = CoreClient, recommendedWalletsIds = recommendedWalletsIds)

AppKit.initialize(
    init = initParams,
    onSuccess = {
        // Callback will be called if initialization is successful
    },
    onError = { error ->
        // Error will be thrown if there's an issue during initialization
    }
)

----------------------------------------

TITLE: WebGL Fullscreen Implementation
DESCRIPTION: JavaScript code for properly handling fullscreen mode in WebGL builds while maintaining modal visibility.

LANGUAGE: javascript
CODE:
document.querySelector('#canvas-container').requestFullscreen();

----------------------------------------

TITLE: Emitting WalletConnect Event for Account Change
DESCRIPTION: This code snippet shows how to emit a WalletConnect event for account changes. It demonstrates the use of the 'accountsChanged' event to notify connected parties about updates in the selected accounts.

LANGUAGE: javascript
CODE:
await signClient.emit({
  topic,
  event: {
    name: 'accountsChanged',
    data: ['AZBEwbZhYeiofodZnM2iAoshP3pXRPNSJEKFqEPDmvv1mY7']
  },
  chainId: 'polkadot:91b171bb158e2d3848fa23a9f1c25182'
})

----------------------------------------

TITLE: Handling URI Display in TypeScript
DESCRIPTION: Example of subscribing to the 'display_uri' event and handling the URI for connection without AppKit.

LANGUAGE: typescript
CODE:
function handleURI(uri: string) {
  //code...
}

provider.on('display_uri', handleURI)

await provider.connect()
// or
const accounts = await provider.enable()

----------------------------------------

TITLE: Configuring Supported Chains in AppKit
DESCRIPTION: Demonstrates how to configure supported blockchain networks using both predefined chain constants and custom chain objects.

LANGUAGE: csharp
CODE:
await AppKit.InitializeAsync(new AppKitConfig
{
    supportedChains = new[]
    {
        ChainConstants.Chains.Ethereum,
        ChainConstants.Chains.Polygon,
        ChainConstants.Chains.Ronin,

        new Chain(ChainConstants.Namespaces.Evm,
            chainReference: "713715",
            name: "Sei Devnet",
            nativeCurrency: new Currency("Sei", "SEI", 18),
            blockExplorer: new BlockExplorer("Seitrace", "https://seitrace.com"),
            rpcUrl: "https://evm-rpc-arctic-1.sei-apis.com",
            isTestnet: true,
            imageUrl: $"https://imagedelivery.net/_aTEfDRm7z3tKgu9JhfeKA/692ed6ba-e569-459a-556a-776476829e00/md"
        )
    }
});

----------------------------------------

TITLE: Marking All Notifications as Read in TypeScript
DESCRIPTION: Shows different ways to mark all notifications as read with various account and domain combinations using markAllNotificationsAsRead function.

LANGUAGE: typescript
CODE:
// mark all notifications as read for default account under default domain
await markAllNotificationsAsRead()

// mark all notifications as read for specified account under default domain
await markAllNotificationsAsRead(differentAccount)

// mark all notifications as read for default account under specified domain
await markAllNotificationsAsRead(undefined, differentDomain)

// mark all notifications as read for specified account under specified domain
await markAllNotificationsAsRead(differentAccount, differentDomain)

----------------------------------------

TITLE: Configuring URL Scheme for iOS in Info.plist
DESCRIPTION: This XML snippet shows how to add a custom URL scheme to the Info.plist file for iOS to enable deep linking in a Flutter app using Reown AppKit.

LANGUAGE: xml
CODE:
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleTypeRole</key>
    <string>Editor</string>
    <key>CFBundleURLName</key>
    <string>com.example.yourBundleId</string> <!-- Bundle ID of your app -->
    <key>CFBundleURLSchemes</key>
    <array>
      <!-- your own custom scheme -->
      <!-- Should be the same you set on Redirect.native on Flutter side -->
      <!-- Be mind of removing :// for this step -->
      <string>exampleapp</string>
    </array>
  </dict>
</array>

----------------------------------------

TITLE: Updating a Session in ReownWalletKit
DESCRIPTION: Updates an existing session with new accounts, chains, or methods using the updateSession method.

LANGUAGE: javascript
CODE:
await _walletKit.updateSession(topic: 'topic', namespaces: '{}')

----------------------------------------

TITLE: Rejecting a WalletConnect Session Proposal in JavaScript
DESCRIPTION: Handle the rejection of a session proposal when the user denies the connection or when the wallet doesn't support the requested functionality. This example uses a predefined error type from WalletConnect utilities.

LANGUAGE: javascript
CODE:
// Note: session_request is emitted when the client on the dapp end calls the request method
// import getSdkError to create predefined ErrorResponse types
import { getSdkError } from '@walletconnect/utils'

walletKit.on('session_proposal', async proposal => {
  // optionally show user a modal or way to reject or approve session
  showWalletConnectModal()

  // handle user reject action
  await walletKit.rejectSession({
    id: proposal.id,
    reason: getSdkError('USER_REJECTED')
  })
})

----------------------------------------

TITLE: Fetching All Listings with HTTP GET
DESCRIPTION: Endpoint to retrieve all paginated listings from the public cloud explorer. Requires a valid project ID.

LANGUAGE: http
CODE:
GET https://explorer-api.walletconnect.com/v3/all?projectId=YOUR_PROJECT_ID&entries=5&page=1

----------------------------------------

TITLE: Installing Core Reown Dependencies
DESCRIPTION: Installs the main Reown appkit and ethers.js dependencies using yarn package manager.

LANGUAGE: bash
CODE:
yarn add @reown/appkit-ethers-react-native ethers

----------------------------------------

TITLE: Importing Components and Assets in JSX
DESCRIPTION: This snippet shows the import statements for React components and image assets used in the documentation page.

LANGUAGE: jsx
CODE:
import Button from '../../components/button'
import Wrapper from '../../components/Home/Wrapper'

import reactLogo from '../../../static/assets/home/reactLogo.png'
import nextjsLogo from '../../../static/assets/home/nextjsLogo.png'
import vueLogo from '../../../static/assets/home/vueLogo.png'
import javascriptLogo from '../../../static/assets/home/javascriptLogo.png'

----------------------------------------

TITLE: Handling Pairing Expiration in Swift
DESCRIPTION: Illustrates how to subscribe to the pairing expiration publisher to handle expired pairings. It filters out active pairings and allows for UI updates on expiration.

LANGUAGE: swift
CODE:
WalletKit.instance.pairingExpirationPublisher
    .receive(on: DispatchQueue.main)
    .sink { pairing in
    guard !pairing.active else { return }
    // let user know that pairing has expired
}.store(in: &publishers)

----------------------------------------

TITLE: Example Parameters for eth_sendTransaction in Ethereum JSON-RPC
DESCRIPTION: This snippet provides an example of the parameters required for the eth_sendTransaction method, including transaction details such as from, to, data, gasPrice, gas, and value.

LANGUAGE: javascript
CODE:
[
  {
    from: '0xb60e8dd61c5d32be8058bb8eb970870f07233155',
    to: '0xBDE1EAE59cE082505bB73fedBa56252b1b9C60Ce',
    data: '0x',
    gasPrice: '0x029104e28c',
    gas: '0x5208',
    value: '0x00'
  }
]

----------------------------------------

TITLE: Importing AppKit Notifications Components in JavaScript
DESCRIPTION: These import statements bring in the Installation and Example components from shared MDX files, which are likely to contain code snippets for installation and usage examples of AppKit Notifications.

LANGUAGE: JavaScript
CODE:
import Installation from '../../../shared/notifications/frontend-integration/usage/installation/javascript.mdx'
import Example from '../../../shared/notifications/frontend-integration/usage/example/javascript.mdx'

----------------------------------------

TITLE: Retrieving Error Information with getError
DESCRIPTION: Shows how to use the getError function to retrieve error information from the AppKit modal.

LANGUAGE: ts
CODE:
function Components() {
  const error = modal.getError();
  //...
}

----------------------------------------

TITLE: Retrieving Error Information with getError
DESCRIPTION: Shows how to use the getError function to retrieve error information from the AppKit modal.

LANGUAGE: ts
CODE:
function Components() {
  const error = modal.getError();
  //...
}

----------------------------------------

TITLE: Using NetworkButton Component in React Native
DESCRIPTION: Example usage of the NetworkButton component with its available prop. This component can be enabled or disabled based on the application's requirements.

LANGUAGE: JavaScript
CODE:
<NetworkButton
  disabled={false}
/>

----------------------------------------

TITLE: React Component Import Declarations
DESCRIPTION: Import statements for custom Button and Wrapper components along with various framework logo assets.

LANGUAGE: jsx
CODE:
import Button from '../../components/button'
import Wrapper from '../../components/Home/Wrapper'

import reactLogo from '../../../static/assets/home/reactLogo.png'
import nextjsLogo from '../../../static/assets/home/nextjsLogo.png'
import vueLogo from '../../../static/assets/home/vueLogo.png'
import javascriptLogo from '../../../static/assets/home/javascriptLogo.png'

----------------------------------------

TITLE: Handling Session Proposal Expiration in Swift
DESCRIPTION: Illustrates how to subscribe to the session proposal expiration publisher to handle expired proposals. It allows for UI updates when a proposal expires.

LANGUAGE: swift
CODE:
WalletKit.instance.sessionProposalExpirationPublisher.sink { _ in
    // let user know that session proposal has expired, update UI
}.store(in: &publishers)

----------------------------------------

TITLE: Executing eth_signTransaction Method in Ethereum JSON-RPC
DESCRIPTION: This snippet demonstrates how to use the eth_signTransaction method to sign a transaction that can be submitted to the network later. It includes the request format with parameters and the expected result format.

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "eth_signTransaction",
  "params":[{see above}],
}

// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"
}

----------------------------------------

TITLE: Using AppKit Button Component in React Native
DESCRIPTION: This snippet demonstrates how to use the pre-built AppKitButton component to trigger the AppKit modal in a React Native application. It shows the import statement and basic usage within a component.

LANGUAGE: tsx
CODE:
import { AppKitButton } from '@reown/appkit-ethers5-react-native'

export default function ConnectView() {
  return (
    <>
      ...rest of your view
      <AppKitButton />
    </>
  )
}

----------------------------------------

TITLE: Using AppKit Button Component
DESCRIPTION: Implementation example using the pre-built AppKitButton component to trigger the connection modal.

LANGUAGE: tsx
CODE:
import { AppKitButton } from '@reown/appkit-ethers-react-native'

export default function ConnectView() {
  return (
    <>
      ...rest of your view
      <AppKitButton />
    </>
  )
}

----------------------------------------

TITLE: Adding JitPack Repository Configuration in Gradle
DESCRIPTION: Configuration to add the JitPack.io Maven repository to the root build.gradle.kts file, enabling access to WalletKit dependencies.

LANGUAGE: gradle
CODE:
allprojects {
 repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
 }
}

----------------------------------------

TITLE: Initializing Notify Client in Swift
DESCRIPTION: Configures the Notify instance with environment settings and crypto provider implementation. Requires environment specification (debug/release) and implementation of CryptoProvider protocol.

LANGUAGE: swift
CODE:
try Notify.configure(environment: APNSEnvironment, crypto: CryptoProvider)

----------------------------------------

TITLE: Initializing Ethereum Provider in TypeScript
DESCRIPTION: Example of initializing the EthereumProvider with required configuration options including projectId, metadata, and optional chain settings.

LANGUAGE: typescript
CODE:
import { EthereumProvider } from '@walletconnect/ethereum-provider'

const provider = await EthereumProvider.init({
  projectId: 'YOUR_PROJECT_ID',
  metadata: {
    name: 'My Website',
    description: 'My Website Description',
    url: 'https://mywebsite.com', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/37784886']
  },
  showQrModal: true,
  optionalChains: [1, 137, 2020],

  /*Optional - Add custom RPCs for each supported chain*/
  rpcMap: {
    1: 'mainnet.rpc...',
    137: 'polygon.rpc...'
  }
})

----------------------------------------

TITLE: Updating Package References in .NET Project File
DESCRIPTION: Shows how to replace the old WalletConnect.Web3Wallet package reference with the new Reown.WalletKit package in the project file.

LANGUAGE: xml
CODE:
<Project Sdk="Microsoft.NET.Sdk">

    <!-- ... -->

  <ItemGroup>
    <PackageReference Include="Reown.WalletKit" Version="1.0.0" />
  </ItemGroup>

</Project>

----------------------------------------

TITLE: Smart Contract Interaction with Wagmi in Next.js
DESCRIPTION: This code snippet demonstrates how to use Wagmi hooks to interact with smart contracts in a Next.js application using AppKit.

LANGUAGE: tsx
CODE:
import { useReadContract } from 'wagmi'
import { USDTAbi } from '../abi/USDTAbi'

const USDTAddress = '0x...'

function App() {
  const result = useReadContract({
    abi: USDTAbi,
    address: USDTAddress,
    functionName: 'totalSupply'
  })
}

----------------------------------------

TITLE: Smart Contract Interaction with Wagmi in Next.js
DESCRIPTION: This code snippet demonstrates how to use Wagmi hooks to interact with smart contracts in a Next.js application using AppKit.

LANGUAGE: tsx
CODE:
import { useReadContract } from 'wagmi'
import { USDTAbi } from '../abi/USDTAbi'

const USDTAddress = '0x...'

function App() {
  const result = useReadContract({
    abi: USDTAbi,
    address: USDTAddress,
    functionName: 'totalSupply'
  })
}

----------------------------------------

TITLE: Rendering Wrapper Component with Framework Options
DESCRIPTION: This snippet shows how to use the Wrapper component to display getting started options for different frameworks.

LANGUAGE: jsx
CODE:
<Wrapper
  type="large"
  fit={false}
  items={[
    {
      name: 'React',
      type: 'react',
      description: 'Get started with AppKit in React.',
      icon: reactLogo,
      href: '../react/core/installation'
    },
    {
      name: 'Next.js',
      type: 'next',
      description: 'Get started with AppKit in Next.js.',
      icon: nextjsLogo,
      href: '../next/core/installation',
      isWhite: true
    },
    {
      name: 'Vue',
      type: 'vue',
      description: 'Get started with AppKit in Vue.',
      icon: vueLogo,
      href: '../vue/core/installation'
    },
    {
      name: 'JavaScript',
      type: 'javascript',
      description: 'Get started with AppKit in JavaScript.',
      icon: javascriptLogo,
      href: '../javascript/core/installation'
    }
  ]}
/>

----------------------------------------

TITLE: Configuring Maven Repository in root build.gradle.kts
DESCRIPTION: Adds the JitPack.io Maven repository to the project's repository list to enable downloading reown dependencies.

LANGUAGE: gradle
CODE:
allprojects {
 repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
 }
}

----------------------------------------

TITLE: Installing WalletKit and WalletConnect Packages
DESCRIPTION: Installs the main WalletKit package and WalletConnect React Native compatibility package using Yarn.

LANGUAGE: bash
CODE:
yarn add @reown/walletkit @walletconnect/react-native-compat

----------------------------------------

TITLE: Installing Universal Provider with NPM
DESCRIPTION: Command to install the @walletconnect/universal-provider package using npm

LANGUAGE: bash
CODE:
npm install @walletconnect/universal-provider

----------------------------------------

TITLE: Applying Custom Theme to ReownAppKitModalTheme in Flutter
DESCRIPTION: Shows how to apply a custom theme by passing the themeData object to ReownAppKitModalTheme.

LANGUAGE: javascript
CODE:
return ReownAppKitModalTheme(
  isDarkMode: _isDarkMode,
  themeData: _themeData,
  child: MaterialApp(
    ...
  ),
);

----------------------------------------

TITLE: Wagmi Smart Contract Interaction
DESCRIPTION: Example of using Wagmi hooks to interact with smart contracts, specifically reading the total supply of a USDT contract.

LANGUAGE: tsx
CODE:
import { useReadContract } from 'wagmi'
import { USDTAbi } from '../abi/USDTAbi'

const USDTAddress = '0x...'

function App() {
  const result = useReadContract({
    abi: USDTAbi,
    address: USDTAddress,
    functionName: 'totalSupply'
  })
}

----------------------------------------

TITLE: Updating email wallet imports for Ethers
DESCRIPTION: Update the import statement for the AuthProvider used in email wallets with Ethers integration. This change is necessary to use the new AppKit auth package.

LANGUAGE: tsx
CODE:
import { AuthProvider } from '@reown/appkit-auth-ethers-react-native';

----------------------------------------

TITLE: Installing WalletKit via .NET CLI
DESCRIPTION: Commands to remove the old WalletConnect.Web3Wallet package and add the new Reown.WalletKit package using the .NET CLI.

LANGUAGE: bash
CODE:
# Remove the old package
dotnet remove package WalletConnect.Web3Wallet

# Add the new package
dotnet add package Reown.WalletKit

----------------------------------------

TITLE: Configuring WalletConnectModal Theme for Web
DESCRIPTION: This snippet demonstrates how to set the theme mode and custom theme variables for WalletConnectModal in a web environment.

LANGUAGE: tsx
CODE:
const modal = new WalletConnectModal({
  themeMode: 'dark'
})

LANGUAGE: tsx
CODE:
const modal = new WalletConnectModal({
  themeVariables: {
    '--wcm-font-family': 'Roboto, sans-serif',
    '--wcm-accent-color': '#F5841F'
  }
})

----------------------------------------

TITLE: Disabling Wallet Explorer in TypeScript Configuration
DESCRIPTION: This snippet shows how to disable the wallet explorer feature in the reown project configuration. By setting 'enableExplorer' to false, the project will not fetch wallets from WalletGuide.

LANGUAGE: typescript
CODE:
enableExplorer: false

----------------------------------------

TITLE: Implementing AppKit Button Web Component
DESCRIPTION: Shows how to use the AppKit button web component in a template. Web components are global HTML elements that don't require importing.

LANGUAGE: html
CODE:
<template>
  <appkit-button />
</template>

----------------------------------------

TITLE: Using AccountButton Component in React Native
DESCRIPTION: Example usage of the AccountButton component with its available props. This component allows for enabling/disabling the button and showing/hiding the user's balance.

LANGUAGE: JavaScript
CODE:
<AccountButton
  disabled={false}
  balance="show"
/>

----------------------------------------

TITLE: Installing AppKit v5 Dependencies for React
DESCRIPTION: This command installs the necessary dependencies for upgrading to AppKit v5 in a React environment, including the latest versions of @web3modal/wagmi, wagmi, viem, and @tanstack/react-query.

LANGUAGE: bash
CODE:
npm install @web3modal/wagmi@latest wagmi@2.x viem@2.x @tanstack/react-query@5.x

----------------------------------------

TITLE: Configuring Project ID Parameter in TypeScript
DESCRIPTION: Defines the projectId configuration parameter that uniquely identifies a Reown project. This ID must be obtained from cloud.reown.com and enables features like wallet logos, WalletConnect RPC, WalletGuide integration, and WalletConnect v2 support.

LANGUAGE: typescript
CODE:
projectId: string

----------------------------------------

TITLE: Configuring WalletConnectModal Theme for Flutter
DESCRIPTION: This snippet demonstrates how to wrap a MaterialApp with WalletConnectModalTheme and define a custom theme for WalletConnectModal in a Flutter application.

LANGUAGE: javascript
CODE:
return WalletConnectModalTheme(
  data: WalletConnectModalThemeData.darkMode,
  child: MaterialApp(
    title: 'Flutter Demo',
    theme: ThemeData(
      colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      useMaterial3: true,
    ),
    home: const MyHomePage(title: 'WalletConnectModal Sign Example'),
  ),
);

LANGUAGE: javascript
CODE:
// Dark Mode Theme
WalletConnectModalThemeData(
  primary100: Color(0xFF47A1FF),
  primary090: Color(0xFF59AAFF),
  primary080: Color(0xFF6CB4FF),
  overlay002: Color.fromARGB(5, 255, 255, 255),
  overlay005: Color.fromARGB(13, 255, 255, 255),
  overlay010: Color.fromARGB(26, 255, 255, 255),
  overlay020: Color.fromARGB(51, 255, 255, 255),
  overlay030: Color.fromARGB(77, 255, 255, 255),
  foreground100: Color(0xFFE4E7E7),
  foreground200: Color(0xFF949E9E),
  foreground275: Color(0xFF788181),
  foreground300: Color(0xFF6E7777),
  background100: Color(0xFF141414),
  background200: Color(0xFF272A2A),
  background300: Color(0xFF3B4040),
  inverse000: Color(0xFF000000),
  inverse100: Color(0xFFFFFFFF),
  error: Color(0xFFF25A67),
  success: Color(0xFF26D962),
  fontFamily: 'roboto',
  radius4XS: 6.0,
  radius3XS: 8.0,
  radius2XS: 12.0,
  radiusXS: 16.0,
  radiusS: 20.0,
  radiusM: 28.0,
  radiusL: 36.0,
  radius3XL: 80.0,
);

----------------------------------------

TITLE: Installing Reown AppKit Package
DESCRIPTION: Command to install the Reown AppKit package using npm or yarn.

LANGUAGE: bash
CODE:
npm install @reown/appkit

----------------------------------------

TITLE: Session Data Type Definitions
DESCRIPTION: Interface definitions for session namespaces and metadata structures

LANGUAGE: typescript
CODE:
interface Namespaces {
  chains?: string[]
  accounts: string[]
  methods: string[]
  events: string[]
}

interface Metadata {
  name: string
  description: string
  url: string
  icons: string[]
  verifyUrl?: string
  redirect?: {
    native?: string
    universal?: string
  }
}

----------------------------------------

TITLE: Approving Authentication Requests in TypeScript
DESCRIPTION: Demonstrates two approaches for approving authentication requests: single signature and multiple chain signatures.

LANGUAGE: typescript
CODE:
// Approach 1
// Sign the authentication message(s) to create a verifiable authentication object(s)
const signature = await cryptoWallet.signMessage(message, privateKey)
// Build the authentication object(s)
const auth = buildAuthObject(
  authPayload,
  {
    t: 'eip191',
    s: signature
  },
  iss
)

// Approve
await walletKit.approveSessionAuthenticate({
  id: payload.id,
  auths: [auth]
})

// Approach 2
// Note that you can also sign multiple messages for every requested chain/address pair
const auths = []
authPayload.chains.forEach(async chain => {
  const message = walletKit.formatAuthMessage({
    request: authPayload,
    iss: `${chain}:${cryptoWallet.address}`
  })
  const signature = await cryptoWallet.signMessage(message)
  const auth = buildAuthObject(
    authPayload,
    {
      t: 'eip191', // signature type
      s: signature
    },
    `${chain}:${cryptoWallet.address}`
  )
  auths.push(auth)
})

// Approve
await walletKit.approveSessionAuthenticate({
  id: payload.id,
  auths
})

----------------------------------------

TITLE: Subscribing to a Dapp in Notify API
DESCRIPTION: Demonstrates how to subscribe to a dapp to receive notifications. Users can opt-in and grant permission for the dapp to send notifications.

LANGUAGE: kotlin
CODE:
val appDomain: Uri = // Dapp uri. e.g. gm.walletconnect.com
val account: String = // CAIP-10 account
val timeout: Duration? = // Optional. Timeout - min 5 sec, max 60 sec, default 60 sec
val params = Notify.Params.Subscribe(appDomain, account, timeout)

NotifyClient.subscribe(params = params).let { result ->
    when (result) {
        is Notify.Result.Subscribe.Success -> {
          // callback for when the subscription request was successful
        }

        is Notify.Result.Subscribe.Error -> {
          // callback for when the subscription request has failed
        }

    }
}

----------------------------------------

TITLE: Installing WalletConnect Solana Adapter
DESCRIPTION: Command to install the WalletConnect Solana adapter package using npm or yarn.

LANGUAGE: bash
CODE:
npm install @walletconnect/solana-adapter

----------------------------------------

TITLE: Using useAppKitEvents Hook with Ethers5 in React Native
DESCRIPTION: Illustrates how to use the useAppKitEvents hook from the @reown/appkit-ethers5-react-native package to get the last tracked modal event and execute a callback function.

LANGUAGE: typescript
CODE:
import { useAppKitEvents } from '@reown/appkit-ethers5-react-native'

const event = useAppKitEvents(event => {
  // your code here
})

----------------------------------------

TITLE: Rendering SDK Information in React JSX
DESCRIPTION: This snippet displays information about Reown SDKs, specifically AppKit and WalletKit, using the Wrapper component. It provides brief descriptions and links for each SDK.

LANGUAGE: jsx
CODE:
<Wrapper
  type="centered"
  items={[
    {
      name: 'AppKit',
      icon: 'reown/appkit-logo.svg',
      href: '/appkit/overview',
      description: 'AppKit is a comprehensive SDK for creating seamless onchain UX, offering features like login (email & social), gas fee sponsorship, multi-chain support, onramps, swaps, user insights, and access to more than 600 wallets.',
    },
    {
      name: 'WalletKit',
      icon: 'reown/walletkit-logo.svg',
      href: '/walletkit/overview',
      description: 'WalletKit is an open-source SDK for seamless wallet connections across blockchains. It offers one-click authentication, secure transaction signing, phishing protection, advanced on-chain configurations like batch transactions and paymasters.',
    }
  ]}
/>

----------------------------------------

TITLE: Fetching Subscription Notifications in Notify API
DESCRIPTION: Retrieves notifications for a specific subscription by calling getNotificationHistory(). Allows specifying limits and starting points for pagination.

LANGUAGE: kotlin
CODE:
val topic: String = // active subscription topic
val limit: Int? = // Optional. Limit - min 1, max 50, default 10
val startingAfter: String? = // Optional. Id of the notification to start after
val timeout: Duration? = // Optional. Timeout - min 5 sec, max 60 sec, default 60 sec

val params = Notify.Params.GetNotificationHistory(topic, limit, startingAfter, timeout)

NotifyClient.getNotificationHistory(params).let { result ->
    when (result) {
        is Notify.Result.GetNotificationHistory.Success -> {
          // callback for when the get notification history request was successful
        }

        is Notify.Result.GetNotificationHistory.Error -> {
          // callback for when the get notification history request has failed
        }
    }
}

----------------------------------------

TITLE: Handling Pairing Expiry Events in TypeScript
DESCRIPTION: Shows how to listen for and handle pairing expiry events using the WalletKit core. This helps in updating the UI when a pairing expires.

LANGUAGE: typescript
CODE:
core.pairing.events.on("pairing_expire", (event) => {
    // pairing expired before user approved/rejected a session proposal
    const { topic } = topic;
});

----------------------------------------

TITLE: Handling Pairing Expiry Events in TypeScript
DESCRIPTION: Shows how to listen for and handle pairing expiry events using the WalletKit core. This helps in updating the UI when a pairing expires.

LANGUAGE: typescript
CODE:
core.pairing.events.on("pairing_expire", (event) => {
    // pairing expired before user approved/rejected a session proposal
    const { topic } = topic;
});

----------------------------------------

TITLE: Handling Pairing Expiry Events in TypeScript
DESCRIPTION: Shows how to listen for and handle pairing expiry events using the WalletKit core. This helps in updating the UI when a pairing expires.

LANGUAGE: typescript
CODE:
core.pairing.events.on("pairing_expire", (event) => {
    // pairing expired before user approved/rejected a session proposal
    const { topic } = topic;
});

----------------------------------------

TITLE: Installing AppKit Package
DESCRIPTION: Command to install the @reown/appkit package for using AppKit with the Ethereum Provider.

LANGUAGE: bash
CODE:
npm install @reown/appkit

----------------------------------------

TITLE: Importing and Rendering Relay Component in JSX/MDX
DESCRIPTION: This snippet imports the Relay component from a shared location and renders it within the current file. It uses MDX syntax to include an external component.

LANGUAGE: jsx
CODE:
import Relay from '../../../cloud/relay.mdx'

<Relay />

----------------------------------------

TITLE: Configuring UniversalProvider with AppKit
DESCRIPTION: Example of configuring UniversalProvider with AppKit, including project ID, metadata, and network settings.

LANGUAGE: javascript
CODE:
import { UniversalProvider } from '@walletconnect/universal-provider'
import { createAppKit } from '@reown/appkit'

const provider = await UniversalProvider.init({
  projectId: 'YOUR_PROJECT_ID',
  metadata: {
    name: 'My Website',
    description: 'My Website Description',
    url: 'https://mywebsite.com', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/37784886']
  },
})

const modal = createAppKit({
  projectId: 'YOUR_PROJECT_ID',
  networks: [mainnet, solana]
})


// listen to display_uri event and feed modal with uri
provider.on('display_uri', (uri: string) => {
  modal.open({ uri, view: 'ConnectingWalletConnectBasic' })
})

// Connect provider, this will trigger display_uri event
await provider.connect({
  optionalNamespaces: {
    eip155: {
      methods: [
        'eth_sendTransaction',
        'eth_signTransaction',
        'eth_sign',
        'personal_sign',
        'eth_signTypedData'
      ],
      chains: ['eip155:1'],
      events: ['chainChanged', 'accountsChanged']
    },
    solana: {
      methods: ['solana_signMessage', 'solana_signTransaction'],
      chains: ['solana:mainnet'],
      events: ['chainChanged', 'accountsChanged']
    }
  }
})

----------------------------------------

TITLE: Listing Wallet Call API Methods in Markdown
DESCRIPTION: This snippet lists the four main JSON-RPC methods supported by the Wallet Call API, including their names and brief descriptions of their functionalities.

LANGUAGE: markdown
CODE:
- `wallet_sendCalls`: Requests that a wallet submits a batch of calls.
- `wallet_getCallsStatus`: Returns the status of a call batch that was sent via wallet_sendCalls.
- `wallet_showCallsStatus`: Requests that a wallet shows information about a given call bundle that was sent with wallet_sendCalls.
- `wallet_getCapabilities`: This RPC allows an application to request capabilities from a wallet (e.g. batch transactions, paymaster communication).

----------------------------------------

TITLE: Rendering Button Component for Solana Demo
DESCRIPTION: This JSX snippet renders a Button component that links to the Solana demo page, using the custom Button component.

LANGUAGE: jsx
CODE:
<Button name="Try Demo" url="https://appkit-lab.reown.com/library/solana/" />

----------------------------------------

TITLE: Approving Session Proposal in Swift
DESCRIPTION: Demonstrates how to approve a session proposal using WalletKit. It handles the approval process asynchronously and includes error handling.

LANGUAGE: swift
CODE:
do {
    try await WalletKit.instance.approve(proposalId: proposal.id, namespaces: sessionNamespaces, sessionProperties: proposal.sessionProperties)
    // Update UI, remove loader
} catch {
    // present error
}

----------------------------------------

TITLE: Getting Subscribers using cURL
DESCRIPTION: Example of retrieving subscriber information using cURL command.

LANGUAGE: bash
CODE:
curl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/subscribers' \
  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \
  --header 'Content-Type: application/json' \
  --data '{
    "accounts": [
      "eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029",
      "eip155:1:0x0000000000000000000000000000000000000000"
    ]
  }'

----------------------------------------

TITLE: Listing Wallet Call API Methods in Markdown
DESCRIPTION: A list of the JSON-RPC methods defined by the Wallet Call API, including wallet_sendCalls, wallet_getCallsStatus, wallet_showCallsStatus, and wallet_getCapabilities. Each method is briefly described with its primary function.

LANGUAGE: markdown
CODE:
- `wallet_sendCalls`: Requests that a wallet submits a batch of calls.
- `wallet_getCallsStatus`: Returns the status of a call batch that was sent via wallet_sendCalls.
- `wallet_showCallsStatus`: Requests that a wallet shows information about a given call bundle that was sent with wallet_sendCalls.
- `wallet_getCapabilities`: This RPC allows an application to request capabilities from a wallet (e.g. batch transactions, paymaster communication).

----------------------------------------

TITLE: Constructing Unsigned Transaction for Polkadot in JavaScript
DESCRIPTION: Create an unsigned transaction object with chain metadata and transaction details using Polkadot.js API.

LANGUAGE: javascript
CODE:
// import api and wsprovider
import { ApiPromise, WsProvider } from '@polkadot/api'

//instantiate wsProvider and api
const wsProvider = new WsProvider('wss://rpc.polkadot.io')
const api = await ApiPromise.create({ provider: wsProvider })

const lastHeader = await api.rpc.chain.getHeader()
const blockNumber = api.registry.createType('BlockNumber', lastHeader.number.toNumber())
const tx = api.tx.balances.transfer(keyring.bob.publicKey, 100)

const method = api.createType('Call', tx)
const era = api.registry.createType('ExtrinsicEra', {
  current: lastHeader.number.toNumber(),
  period: 64
})

const accountNonce = getBalanceAccount(submitAddress)?.nonce || 0
const nonce = api.registry.createType('Compact<Index>', accountNonce)

const unsignedTransaction = {
  specVersion: api.runtimeVersion.specVersion.toHex(),
  transactionVersion: api.runtimeVersion.transactionVersion.toHex(),
  address: selectedWalletConnectAccountAddress,
  blockHash: lastHeader.hash.toHex(),
  blockNumber: blockNumber.toHex(),
  era: era.toHex(),
  genesisHash: api.genesisHash.toHex(),
  method: method.toHex(),
  nonce: nonce.toHex(),
  signedExtensions: [
    'CheckNonZeroSender',
    'CheckSpecVersion',
    'CheckTxVersion',
    'CheckGenesis',
    'CheckMortality',
    'CheckNonce',
    'CheckWeight',
    'ChargeTransactionPayment'
  ],
  tip: api.registry.createType('Compact<Balance>', 0).toHex(),
  version: tx.version
}

----------------------------------------

TITLE: Handling Session Request Expiry
DESCRIPTION: Shows how to handle session request expiry events. Expiry time is defined by the dapp between 5 minutes and 7 days.

LANGUAGE: typescript
CODE:
walletKit.on("session_request_expire", (event) => {
    // request expired and any modal displaying it should be removed
    const { id } = event;
});

----------------------------------------

TITLE: Configuring Solana Adapter and Modal in JavaScript
DESCRIPTION: Setup for Solana Adapter and modal configuration in Reown AppKit for JavaScript.

LANGUAGE: tsx
CODE:
const solanaAdapter = new SolanaAdapter()

const modal = createAppKit({
  projectId,
  metadata,
  networks: [solana, solanaTestnet, solanaDevnet],
  adapters: [solanaAdapter],
})

----------------------------------------

TITLE: Custom Tabs Implementation in MDX
DESCRIPTION: Shows how to create custom tabbed content using Docusaurus Tabs and TabItem components. Allows for flexible tab labeling and content organization.

LANGUAGE: mdx
CODE:
import Tabs from '@theme/Tabs'
import TabItem from '@theme/TabItem'

<Tabs>
<TabItem value="custom-a" label="Custom A">

#### Heading here

Here you can add all the information related to Custom A

</TabItem>
<TabItem value="custom-b" label="Custom B">

#### Heading here

Here you can add all the information related to Custom B

</TabItem>
</Tabs>

----------------------------------------

TITLE: Retrieving Approved Events in ReownAppKit (Flutter)
DESCRIPTION: This snippet demonstrates how to get a list of approved events by the connected wallet using ReownAppKit.

LANGUAGE: javascript
CODE:
_appKitModal.getApprovedEvents();

----------------------------------------

TITLE: Implementing WalletDelegate for Android
DESCRIPTION: Implement the WalletDelegate interface to handle various events in Android applications.

LANGUAGE: kotlin
CODE:
val walletDelegate = object : SignClient.WalletDelegate {
    override fun onSessionProposal(sessionProposal: Sign.Model.SessionProposal, verifyContext: Sign.Model.VerifyContext) {
        // Handle session proposal
    }

    // Additional delegate methods...
}

----------------------------------------

TITLE: Handling Session Proposal with Namespace Builder
DESCRIPTION: Demonstrates using the namespace builder utility to parse and approve session proposals

LANGUAGE: javascript
CODE:
import { WalletKit, WalletKitTypes } from '@reown/walletkit'
import { buildApprovedNamespaces, getSdkError } from '@walletconnect/utils'

async function onSessionProposal({ id, params }: WalletKitTypes.SessionProposal){
  try{
    const approvedNamespaces = buildApprovedNamespaces({
      proposal: params,
      supportedNamespaces: {
        eip155: {
          chains: ['eip155:1', 'eip155:137'],
          methods: ['eth_sendTransaction', 'personal_sign'],
          events: ['accountsChanged', 'chainChanged'],
          accounts: [
            'eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb',
            'eip155:137:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb'
          ]
        }
      }
    })

    const session = await walletKit.approveSession({
      id,
      namespaces: approvedNamespaces
    })
  }catch(error){
    await walletKit.rejectSession({
      id: proposal.id,
      reason: getSdkError("USER_REJECTED")
    })
  }
}

----------------------------------------

TITLE: Managing Web3Inbox Subscriptions in TypeScript
DESCRIPTION: Demonstrates the new approach to managing subscriptions using separate hooks for subscribing, unsubscribing, and retrieving subscription data. This replaces the previous useManageSubscription hook with more focused hooks.

LANGUAGE: typescript
CODE:
/* highlight-delete-start */
- import { useManageSubscription } from "@web3inbox/widget-react"
/* highlight-delete-end */
/* highlight-add-start */
+ import { useSubscribe, useUnsubscribe, useSubscription } from "@web3inbox/react"
/* highlight-add-end */

/* highlight-delete-start */
- const { subscribe, unsubscribe, isSubscribed } = useManageSubscription()
/* highlight-delete-end */
/* highlight-add-start */
+ const { subscribe } = useSubscribe()
+ const { unsubscribe } = useUnsubscribe()
+ const { data: subscription } = useSubscription()
/* highlight-add-end */

/* highlight-delete-start */
- const { subscriptions } = useSubscriptions()
/* highlight-delete-end */
/* highlight-add-start */
+ const { data: subscriptions } = useSubscriptions()
/* highlight-add-end */

----------------------------------------

TITLE: Defining ColorPalette Data Class in Kotlin
DESCRIPTION: This Kotlin snippet defines a ColorPalette data class used in the Colors interface, providing a range of color shades from 100 to 300.

LANGUAGE: kotlin
CODE:
data class ColorPalette(
    val color100: Color,
    val color125: Color,
    val color150: Color,
    val color175: Color,
    val color200: Color,
    val color225: Color,
    val color250: Color,
    val color275: Color,
    val color300: Color,
)

----------------------------------------

TITLE: Importing PlatformTabs and PlatformTabItem Components in JSX
DESCRIPTION: This code snippet imports custom components PlatformTabs and PlatformTabItem from relative paths. These components are likely used to create a tabbed interface for platform-specific content.

LANGUAGE: jsx
CODE:
import PlatformTabs from '../../../components/PlatformTabs'
import PlatformTabItem from '../../../components/PlatformTabItem'

----------------------------------------

TITLE: Using useAppKitState Hook with Ethers5 in React Native
DESCRIPTION: Shows how to use the useAppKitState hook from the @reown/appkit-ethers5-react-native package to get the current value of the modal's state.

LANGUAGE: typescript
CODE:
import { useAppKitState } from '@reown/appkit-ethers5-react-native'

const { open, selectedNetworkId } = useAppKitState()

----------------------------------------

TITLE: Importing Networks for Reown AppKit in JavaScript
DESCRIPTION: This code snippet shows how to import various network configurations from Reown AppKit, which are based on Viem networks for EVM chains.

LANGUAGE: javascript
CODE:
import { createAppKit } from '@reown/appkit'
/* highlight-add-start */
import { mainnet, arbitrum, base, scroll, polygon } from '@reown/appkit/networks'
/* highlight-add-end */

----------------------------------------

TITLE: Configuring Custom URL Scheme in iOS Info.plist
DESCRIPTION: This code snippet shows how to add a custom URL scheme to the Info.plist file for iOS applications. This is necessary for deep linking functionality in WalletConnect integration.

LANGUAGE: ruby
CODE:
<key>CFBundleURLTypes</key>
<array>
	<dict>
		<key>CFBundleTypeRole</key>
		<string>Editor</string>
		<key>CFBundleURLName</key>
		<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
		<key>CFBundleURLSchemes</key>
		<array>
			<string>examplewallet</string> <!-- your custom scheme goes here -->
		</array>
	</dict>
</array>

----------------------------------------

TITLE: Using AppKit Connection Hook for Solana
DESCRIPTION: Hook that provides access to the Solana connection object for blockchain interactions. Links to the Solana Web3.js Connection class documentation.

LANGUAGE: tsx
CODE:
import { useAppKitConnection } from '@reown/appkit-adapter-solana/react'

...

const { connection } = useAppKitConnection()

----------------------------------------

TITLE: JavaScript/Vue Modal Trigger Implementation
DESCRIPTION: Implementation of modal trigger functionality in JavaScript/Vue

LANGUAGE: javascript
CODE:
document.getElementById('my-button').addEventListener('click', () => {
    modal.open()
})

<button id="my-button">Connect Wallet</button>

----------------------------------------

TITLE: Configuring CSP Headers for WalletConnect AppKit
DESCRIPTION: Content Security Policy header configuration that specifies allowed content sources for WalletConnect's AppKit integration. Includes directives for scripts, styles, images, fonts, connections, and frames. Additional RPC endpoints may need to be added based on enabled blockchain networks.

LANGUAGE: plaintext
CODE:
default-src 'self';
script-src 'self';
style-src https://fonts.googleapis.com;
img-src * 'self' data: blob: https://walletconnect.org https://walletconnect.com https://secure.walletconnect.com https://secure.walletconnect.org https://tokens-data.1inch.io https://tokens.1inch.io https://ipfs.io https://cdn.zerion.io;
font-src 'self' https://fonts.gstatic.com;
connect-src 'self' https://rpc.walletconnect.com https://rpc.walletconnect.org https://relay.walletconnect.com https://relay.walletconnect.org wss://relay.walletconnect.com wss://relay.walletconnect.org https://pulse.walletconnect.com https://pulse.walletconnect.org https://api.web3modal.com https://api.web3modal.org https://keys.walletconnect.com https://keys.walletconnect.org https://notify.walletconnect.com https://notify.walletconnect.org https://echo.walletconnect.com https://echo.walletconnect.org https://push.walletconnect.com https://push.walletconnect.org wss://www.walletlink.org;
frame-src 'self' https://verify.walletconnect.com https://verify.walletconnect.org https://secure.walletconnect.com https://secure.walletconnect.org;

----------------------------------------

TITLE: Updating Subscription Notification Settings with Notify API in JavaScript
DESCRIPTION: Shows how to update the notification settings for a subscription, allowing users to filter the types of notifications they receive.

LANGUAGE: javascript
CODE:
await notifyClient.update({
  topic,
  scope: ['alerts']
})

----------------------------------------

TITLE: Initializing SignClient for Web
DESCRIPTION: Initialize the SignClient for web applications using your project ID and optional parameters.

LANGUAGE: javascript
CODE:
const signClient = await SignClient.init({
  projectId: '<YOUR PROJECT ID>',
  // optional parameters
  relayUrl: '<YOUR RELAY URL>',
  metadata: {
    name: 'Wallet name',
    description: 'A short description for your wallet',
    url: "<YOUR WALLET'S URL>",
    icons: ["<URL TO WALLET'S LOGO/ICON>"]
  }
})

----------------------------------------

TITLE: Unsubscribing from a Dapp in Notify API
DESCRIPTION: Demonstrates how to opt-out of receiving notifications from a dapp by unsubscribing.

LANGUAGE: kotlin
CODE:
val topic: String = // active subscription topic
val timeout: Duration? = // Optional. Timeout - min 5 sec, max 60 sec, default 60 sec
val params = Notify.Params.DeleteSubscription(topic)

NotifyClient.deleteSubscription(params).let { result ->
    when (result) {
        is Notify.Result.DeleteSubscription.Success -> {
          // callback for when the delete request was successful
        }

        is Notify.Result.DeleteSubscription.Error -> {
          // callback for when the delete request has failed
        }
    }
}

----------------------------------------

TITLE: Logging Out an Account from Notify API in JavaScript
DESCRIPTION: Shows how to log out an account from the Notify API, removing all subscriptions and messages for that account.

LANGUAGE: javascript
CODE:
const account = `eip155:1:0x63Be2c680685d2A9620c11b0068291261aa62d76`

await notifyClient.unregister({
  account
})

----------------------------------------

TITLE: Fetching Chain Data with HTTP GET
DESCRIPTION: Endpoint to retrieve chain data with optional filtering for testnets and namespaces. Requires a valid project ID.

LANGUAGE: http
CODE:
GET https://explorer-api.walletconnect.com/v3/chains?projectId=YOUR_PROJECT_ID&testnets=false&namespaces=eip155,cosmos

----------------------------------------

TITLE: Defining Basic JSON Policy Parameters
DESCRIPTION: Example of basic JSON policy parameters for Reown Paymaster, showing how to specify a key, operation, and value for policy evaluation.

LANGUAGE: json
CODE:
{
  "key": "some_key",
  "op": "equals",
  "value": "some_value"
}

----------------------------------------

TITLE: Configuring Sign Client with AppKit
DESCRIPTION: Example of using Sign Client with AppKit, including project ID, metadata, and connection setup.

LANGUAGE: javascript
CODE:
import { SignClient } from '@walletconnect/sign-client'
import { createAppKit } from '@reown/appkit'

const signClient = await SignClient.init({
  projectId: 'YOUR_PROJECT_ID',
  metadata: {
    name: 'My Website',
    description: 'My Website Description',
    url: 'https://mywebsite.com', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/37784886']
  },
})

const modal = createAppKit({
  projectId: 'YOUR_PROJECT_ID',
  networks: [mainnet]
})


// connect signClient and feed uri to modal
const { uri, approval } = await signClient.connect({
    requiredNamespaces: {
      eip155: {
        methods: [
          'eth_sendTransaction',
          'eth_signTransaction',
          'eth_sign',
          'personal_sign',
          'eth_signTypedData'
        ],
        chains: ['eip155:1'],
        events: ['chainChanged', 'accountsChanged']
      }
    }
  })

  if (uri) {
    modal.open({ uri, view: 'ConnectingWalletConnectBasic' })
    const session = await approval()
    modal.close()
  }

----------------------------------------

TITLE: Updating Class References from Web3Modal to AppKit in Kotlin
DESCRIPTION: This snippet shows how to update class references from Web3Modal to AppKit in Kotlin code. It replaces Web3Modal.initialize and Web3Modal.request with AppKit.initialize and AppKit.request respectively.

LANGUAGE: kotlin
CODE:
AppKit.initialize(Wallet.Params.Init(core = CoreClient), onSuccess, onError)
AppKit.request(request, onSuccess, onError)

----------------------------------------

TITLE: Updating Web3App instance access in Reown AppKit for Flutter
DESCRIPTION: Change the way of accessing the Web3App instance within the service, replacing w3mService.web3App with appKitModal.appKit.

LANGUAGE: dart
CODE:
_appKitModal.appKit!.getActiveSessions();

----------------------------------------

TITLE: Updating Hook imports for Ethers
DESCRIPTION: Update the import statements for various hooks used in the application with Ethers integration. This step ensures that the correct hooks from the new AppKit package are being used.

LANGUAGE: tsx
CODE:
import {
  useAppKit,
  useAppKitState,
  useAppKitEvents,
  useAppKitAccount,
  useAppKitProvider,
  useAppKitError,
  useWalletInfo,
} from '@reown/appkit-ethers-react-native';

----------------------------------------

TITLE: Updating Android Dependencies for WalletKit
DESCRIPTION: Demonstrates how to update the build.gradle dependencies from Web3Wallet to WalletKit implementation.

LANGUAGE: swift
CODE:
dependencies {
    implementation(platform("com.reown:android-bom:{BOM version}"))
    implementation("com.reown:android-core")
    implementation("com.reown:walletkit")
}

----------------------------------------

TITLE: Updating Initialization Code
DESCRIPTION: Demonstrates how to update the initialization code to use WalletKit instead of Web3Wallet.

LANGUAGE: javascript
CODE:
await WalletKit.init()

----------------------------------------

TITLE: Updating imports for WalletKit in JavaScript
DESCRIPTION: Replace the import statement for Web3Wallet with the new import for WalletKit. This step updates the code to use the new WalletKit package instead of the old Web3Wallet.

LANGUAGE: javascript
CODE:
import { WalletKit } from "@reown/walletkit";

----------------------------------------

TITLE: Configuring Universal Links in Android Manifest
DESCRIPTION: This XML snippet demonstrates how to configure Universal Links in the AndroidManifest.xml file for an Android app. It sets up an intent filter with autoVerify set to true for handling Universal Links.

LANGUAGE: xml
CODE:
<intent-filter android:autoVerify="true">
  <action android:name="android.intent.action.VIEW" />

  <category android:name="android.intent.category.DEFAULT" />
  <category android:name="android.intent.category.BROWSABLE" />

  <data android:scheme="https" />
  <data android:host="example.com" />
  <data android:pathPattern="/example_wallet" />
</intent-filter>

----------------------------------------

TITLE: Configuring Associated Domains in iOS Entitlements
DESCRIPTION: This XML snippet shows how to configure the Associated Domains in the iOS project's entitlements file. It adds the applinks domain for Universal Links support.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>com.apple.developer.associated-domains</key>
  <array>
    <string>applinks:example.com</string>
  </array>
</dict>
</plist>

----------------------------------------

TITLE: Handling Link Mode Request Dispatching
DESCRIPTION: Demonstrates how to handle and dispatch incoming Universal/App Links to WalletKit for request processing.

LANGUAGE: javascript
CODE:
void _onLinkCaptured(String link) async {
  await _walletKit.dispatchEnvelope(link);
}

----------------------------------------

TITLE: Rendering Platform-Specific Getting Started Links with React JSX
DESCRIPTION: This JSX code renders a Wrapper component that displays getting started links for implementing Web3 Notifications on Android, iOS, and React Native platforms. Each link includes a platform-specific logo, description, and href to the respective documentation.

LANGUAGE: jsx
CODE:
<Wrapper
  type="large"
  fit={false}
  items={[
    {
      name: 'Android',
      type: 'android',
      description: 'Get started with WalletKit in Android.',
      icon: androidLogo,
      href: '../android/notifications/notify/overview'
    },
    {
      name: 'iOS',
      type: 'ios',
      description: 'Get started with WalletKit in iOS.',
      icon: iosLogo,
      href: '../ios/notifications/notify/overview',
      isWhite: true
    },
    {
      name: 'React Native',
      type: 'react-native',
      description: 'Get started with WalletKit in React Native.',
      icon: rnLogo,
      href: '../react-native/notifications/notify/overview'
    }
  ]}
/>

----------------------------------------

TITLE: Monitoring Connection State Changes
DESCRIPTION: Examples of implementing connection state monitoring across different platforms to track relay server connectivity.

LANGUAGE: typescript
CODE:
core.relayer.on("relayer_connect", () => {
  // connection to the relay server is established
})

core.relayer.on("relayer_disconnect", () => {
  // connection to the relay server is lost
})

LANGUAGE: swift
CODE:
WalletKit.instance.socketConnectionStatusPublisher
  .receive(on: DispatchQueue.main)
  .sink { status in
  switch status {
  case .connected:
    // ...
  case .disconnected:
    // ...
  }
}.store(in: &publishers)

LANGUAGE: kotlin
CODE:
val walletDelegate = object : WalletKit.WalletDelegate {
  override fun onConnectionStateChange(state: Wallet.Model.ConnectionState) {
    // Here this event is triggered when a connection state has changed
  }
}

----------------------------------------

TITLE: Initializing Notify Client in JavaScript
DESCRIPTION: Creates a new NotifyClient instance and initializes it with a project ID from the Cloud platform.

LANGUAGE: javascript
CODE:
import { NotifyClient } from '@walletconnect/notify-client'

const notifyClient = await NotifyClient.init({
  projectId: '<YOUR PROJECT ID>'
})

----------------------------------------

TITLE: Initializing Notify Client in JavaScript
DESCRIPTION: Creates a new NotifyClient instance and initializes it with a project ID from the Cloud platform.

LANGUAGE: javascript
CODE:
import { NotifyClient } from '@walletconnect/notify-client'

const notifyClient = await NotifyClient.init({
  projectId: '<YOUR PROJECT ID>'
})

----------------------------------------

TITLE: Obtaining FCM Device Token in React Native
DESCRIPTION: This snippet demonstrates how to obtain a device token from Firebase Cloud Messaging in a React Native application. The token is required for registering the device to receive push notifications.

LANGUAGE: typescript
CODE:
import messaging from '@react-native-firebase/messaging'

const token = await messaging().getToken()

----------------------------------------

TITLE: Implementing React Native CLI Crypto Polyfill
DESCRIPTION: JavaScript code to implement crypto polyfill for React Native CLI environments, including app registration.

LANGUAGE: javascript
CODE:
import { AppRegistry } from 'react-native'
import App from './App'
import { name as appName } from './app.json'
import crypto from 'react-native-quick-crypto'

const polyfillDigest = async (algorithm, data) => {
  const algo = algorithm.replace('-', '').toLowerCase()
  const hash = crypto.createHash(algo)
  hash.update(data)
  return hash.digest()
}

globalThis.crypto = crypto
globalThis.crypto.subtle = {
  digest: polyfillDigest
}

AppRegistry.registerComponent(appName, () => App)

----------------------------------------

TITLE: Executing eth_signTypedData Method in Ethereum JSON-RPC
DESCRIPTION: This snippet demonstrates how to use the eth_signTypedData method to calculate an Ethereum-specific signature for typed data. It includes the request format with parameters and the expected result format.

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "eth_signTypedData",
  "params": ["0x9b2055d370f73ec7d8a03e965129118dc8f5bf83", {see above}],
}
'

// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": "0x4355c47d63924e8a72e509b65029052eb6c299d53a04e167c5775fd466751c9d07299936d304c153f6443dfa05f40ff007d72911b6f72307f996231605b915621c"
}

----------------------------------------

TITLE: Executing personal_sign Method in Ethereum JSON-RPC
DESCRIPTION: This snippet demonstrates how to use the personal_sign method to calculate an Ethereum-specific signature. It includes the request format with parameters and the expected result format.

LANGUAGE: javascript
CODE:
// Request
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "personal_sign",
  "params":["0xdeadbeaf","0x9b2055d370f73ec7d8a03e965129118dc8f5bf83"],
}

// Result
{
  "id": 1,
  "jsonrpc": "2.0",
  "result": "0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b"
}

----------------------------------------

TITLE: Message Broadcasting with ever_broadcastMessage
DESCRIPTION: Broadcasts an internal message without waiting for transaction completion. Includes value transfer and destination details.

LANGUAGE: json
CODE:
{
  "id": 1,
  "jsonrpc": "2.0",
  "method": "ever_broadcastMessage",
  "params": {
        "sourceAddress": "0:695e42...b8d",
        "value": 1000000000,
        "bounce": False,
        "destAddress": "0:b38d96...708",
        "destPayload": {
            "abi": "",
            "method": "",
            "params": {}
        }
    }
}

----------------------------------------

TITLE: Initializing WalletConnectModal for Unity
DESCRIPTION: Sets up WalletConnectModal and handles session resumption for Unity.

LANGUAGE: csharp
CODE:
private void Start()
{
    WalletConnectModal.Ready += (sender, args) =>
    {
        if (args.SessionResumed)
        {
            // Session has been resumed, proceed to the game
        }
        else
        {
            // Session hasn't been resumed

            // Define required namespaces for new session
            var requiredNamespaces = new RequiredNamespaces
            {
                {
                    "eip155", new ProposedNamespace
                    {
                        Methods = new[]
                        {
                            "eth_sendTransaction",
                            "personal_sign",
                            "eth_signTypedData"
                        },
                        Chains = new[]
                        {
                            "eip155:1"
                        },
                        Events = new[]
                        {
                            "chainChanged",
                            "accountsChanged"
                        }
                    }
                }
            };

            var connectOptions = new ConnectOptions
            {
                RequiredNamespaces = requiredNamespaces
            };

            // Open the modal
            WalletConnectModal.Open(new WalletConnectModalOptions
            {
                ConnectOptions = connectOptions
            });
        }
    };
}

----------------------------------------

TITLE: Pairing Wallet with Dapp on iOS
DESCRIPTION: Swift code for pairing a wallet with a dapp using a WalletConnectURI on iOS.

LANGUAGE: swift
CODE:
let uri WalletConnectURI(string: <String>)
try! await Pair.instance.pair(uri: uri)

----------------------------------------

TITLE: Getting Active Pairings on Android
DESCRIPTION: Kotlin code for retrieving a list of active pairings on Android.

LANGUAGE: kotlin
CODE:
val listOfActivePairings: List<Core.Model.Pairing> = CoreClient.Pairing.getPairings()

----------------------------------------

TITLE: Configuring Pairing for iOS
DESCRIPTION: Swift code for configuring the Pairing API with app metadata on iOS.

LANGUAGE: swift
CODE:
let metadata = AppMetadata(name: <String>,
                           description: <String>,
                           url: <String>,
                           icons: <[String]>,
                           redirect: AppMetadata.Redirect(native: "example://", universal: nil))

Pair.configure(metadata: metadata)

----------------------------------------

TITLE: Installing WalletConnect Core SDK for iOS
DESCRIPTION: Instructions for adding the WalletConnect Core SDK to an iOS project using Swift Package Manager.

LANGUAGE: swift
CODE:
// 1. Open XCode
// 2. Go to File -> Add Packages
// 3. Paste the repo GitHub URL: https://github.com/reown-com/reown-swift
// 4. Tap Add Package
// 5. Select WalletConnectPairing check mark

----------------------------------------

TITLE: Rendering Platform-specific Get Started Links
DESCRIPTION: This JSX snippet uses the Wrapper component to display platform-specific 'Get Started' links for Android, iOS, and React Native. It includes icons and descriptions for each platform.

LANGUAGE: jsx
CODE:
<Wrapper
  type="large"
  fit={false}
  items={[
    {
      name: 'Android',
      type: 'android',
      description: 'Get started with WalletKit in Android.',
      icon: androidLogo,
      href: '../../android/early-access/chain-abstraction'
    },
    {
      name: 'iOS',
      type: 'ios',
      description: 'Get started with WalletKit in iOS.',
      icon: iosLogo,
      href: '../../ios/early-access/chain-abstraction',
      isWhite: true
    },
    {
      name: 'React Native',
      type: 'react-native',
      description: 'Get started with WalletKit in React Native.',
      icon: rnLogo,
      href: '../../react-native/early-access/chain-abstraction'
    }
  ]}
/>

----------------------------------------

TITLE: Importing useBaseUrl in JSX
DESCRIPTION: This code snippet imports the useBaseUrl function from the @docusaurus/useBaseUrl module. It's typically used in Docusaurus projects to handle base URL paths for assets and links.

LANGUAGE: jsx
CODE:
import useBaseUrl from '@docusaurus/useBaseUrl'

----------------------------------------

TITLE: Updating Instance Access for Authentication
DESCRIPTION: Shows how to update the instance access and authentication response publisher from Web3Modal to AppKit.

LANGUAGE: swift
CODE:
AppKit.instance.authResponsePublisher.sink { (id, result) in
    // Your code here
}

----------------------------------------

TITLE: Installing Solana Wallet Adapter Package using npm or yarn
DESCRIPTION: This snippet shows the command to install the Solana wallet adapter package, which is a prerequisite for adding custom Solana wallet adapters.

LANGUAGE: bash
CODE:
npm install @solana/wallet-adapter-wallets

----------------------------------------

TITLE: Installing Reown AppKit for React
DESCRIPTION: Command to install Reown AppKit and its dependencies for a React project, replacing Web3Modal.

LANGUAGE: bash
CODE:
npm install @reown/appkit @reown/appkit-adapter-wagmi @tanstack/react-query

----------------------------------------

TITLE: Configuring SIWE Authentication Settings
DESCRIPTION: Configuration object for setting up Sign In With Ethereum authentication. Includes methods for nonce generation, message handling, verification, and session management.

LANGUAGE: javascript
CODE:
final _siweConfig = SIWEConfig(
  getNonce: () async {
    return await yourApi.getNonce();
  },
  getMessageParams: () async {
    return SIWEMessageArgs(
      domain: 'yourdomain.com',
      uri: 'https://yourdomain.com/login',
      statement: 'Please sign with your account',
      methods: ['personal_sign', 'eth_sendTransaction'],
    );
  },
  createMessage: (SIWECreateMessageArgs args) {
    return SIWEUtils.formatMessage(args);
  },
  verifyMessage: (SIWEVerifyMessageArgs args) async {
    try {
      final isValidMessage = await yourApi.verifyMessage(args.toJson());
      return isValidMessage;
    } catch (error) {
      return false;
    }
  },
  getSession: () async {
    try {
      final session = await yourApi.getSession();
      return SIWESession(address: session.address, chains: [session.chainId]);
    } catch (error) {
      rethrow;
    }
  },
  onSignIn: (SIWESession session) {
  },
  signOut: () async {
    try {
      final success = await yourApi.signOut();
      return success;
    } catch (error) {
      return false;
    }
  },
  onSignOut: () {
  }
);

----------------------------------------

TITLE: Android Wallet Detection Configuration
DESCRIPTION: AndroidManifest.xml configuration for wallet package queries to enable wallet detection.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <queries>
        <package android:name="io.metamask"/>
        <package android:name="com.wallet.crypto.trustapp"/>
        <package android:name="io.gnosis.safe"/>
        <package android:name="me.rainbow"/>
        <!-- Add other wallet schemes names here -->
    </queries>

    <application>
        ...
    </application>
</manifest>

----------------------------------------

TITLE: Adding WalletConnect SDK to iOS Project with Cocoapods
DESCRIPTION: Instructions for adding the WalletConnect SDK to an iOS project using Cocoapods. It includes steps to update Cocoapods spec repos, initialize Podfile, and install the WalletConnectSwiftV2 pod.

LANGUAGE: ruby
CODE:
pod 'WalletConnectSwiftV2'

LANGUAGE: ruby
CODE:
pod 'WalletConnectSwiftV2', :git => 'https://github.com/reown-com/reown-swift.git', :tag => '1.0.5'

----------------------------------------

TITLE: Wrapping MaterialApp with ReownAppKitModalTheme in Flutter
DESCRIPTION: Demonstrates how to wrap a MaterialApp widget with ReownAppKitModalTheme to apply theming to the ReownAppKitModal.

LANGUAGE: javascript
CODE:
return ReownAppKitModalTheme(
  child: MaterialApp(
    ...
  ),
);

----------------------------------------

TITLE: Installing Web3Inbox Core and React Packages
DESCRIPTION: Command to install both the Web3Inbox core package and its React integration package using npm or yarn. The npm2yarn annotation allows for automatic conversion between npm and yarn commands.

LANGUAGE: bash
CODE:
npm i @web3inbox/core @web3inbox/react

----------------------------------------

TITLE: Installing Legacy SIWE Dependencies
DESCRIPTION: Command to install legacy SIWE packages for basic implementation without One-Click Auth.

LANGUAGE: bash
CODE:
npm i @reown/appkit-siwe siwe