TITLE: Creating Redux Slice
DESCRIPTION: Implements a counter slice with state and reducers using createSlice from Redux Toolkit

LANGUAGE: javascript
CODE:
import { createSlice } from '@reduxjs/toolkit'

export const counterSlice = createSlice({
  name: 'counter',
  initialState: {
    value: 0
  },
  reducers: {
    increment: state => {
      state.value += 1
    },
    decrement: state => {
      state.value -= 1
    },
    incrementByAmount: (state, action) => {
      state.value += action.payload
    }
  }
})

export const { increment, decrement, incrementByAmount } = counterSlice.actions

export default counterSlice.reducer

----------------------------------------

TITLE: Configuring Redux Store
DESCRIPTION: Creates and exports a Redux store using configureStore API from Redux Toolkit

LANGUAGE: javascript
CODE:
import { configureStore } from '@reduxjs/toolkit'

export default configureStore({
  reducer: {}
})

----------------------------------------

TITLE: Configuring Redux Store with TypeScript
DESCRIPTION: Creates and configures a Redux store using Redux Toolkit's configureStore with TypeScript type definitions.

LANGUAGE: TypeScript
CODE:
import type { Action, ThunkAction } from '@reduxjs/toolkit'
import { configureStore } from '@reduxjs/toolkit'
import counterReducer from '@/features/counter/counterSlice'

export const store = configureStore({
  reducer: {
    counter: counterReducer
  }
})

export type AppStore = typeof store
export type RootState = ReturnType<AppStore['getState']>
export type AppDispatch = AppStore['dispatch']
export type AppThunk<ThunkReturnType = void> = ThunkAction<
  ThunkReturnType,
  RootState,
  unknown,
  Action
>

----------------------------------------

TITLE: Creating and Using a Redux Store
DESCRIPTION: Demonstrates how to create a Redux store using configureStore and interact with it using getState and dispatch methods.

LANGUAGE: javascript
CODE:
import { configureStore } from '@reduxjs/toolkit'

const store = configureStore({ reducer: counterReducer })

console.log(store.getState())
// {value: 0}

store.dispatch({ type: 'counter/increment' })

console.log(store.getState())
// {value: 1}

----------------------------------------

TITLE: Implementing React-Redux Counter Component
DESCRIPTION: Creates a React component that uses Redux state and actions through hooks

LANGUAGE: jsx
CODE:
import React from 'react'
import { useSelector, useDispatch } from 'react-redux'
import { decrement, increment } from './counterSlice'
import styles from './Counter.module.css'

export function Counter() {
  const count = useSelector(state => state.counter.value)
  const dispatch = useDispatch()

  return (
    <div>
      <div>
        <button
          aria-label="Increment value"
          onClick={() => dispatch(increment())}
        >
          Increment
        </button>
        <span>{count}</span>
        <button
          aria-label="Decrement value"
          onClick={() => dispatch(decrement())}
        >
          Decrement
        </button>
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Implementing Redux Slice with TypeScript
DESCRIPTION: Creates a Redux slice with TypeScript types for state and actions. Includes type definitions for state interface, action payloads, and selector functions.

LANGUAGE: typescript
CODE:
import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import type { RootState } from '../../app/store'

export interface CounterState {
  value: number
}

const initialState: CounterState = {
  value: 0
}

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  reducers: {
    increment: state => {
      state.value += 1
    },
    decrement: state => {
      state.value -= 1
    },
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload
    }
  }
})

export const { increment, decrement, incrementByAmount } = counterSlice.actions

export const selectCount = (state: RootState) => state.counter.value

export default counterSlice.reducer

----------------------------------------

TITLE: Configuring Redux Store with Redux Toolkit
DESCRIPTION: Shows how to set up a Redux store using configureStore from Redux Toolkit, which simplifies the store configuration process by automatically combining reducers and adding middleware.

LANGUAGE: JavaScript
CODE:
import { configureStore } from '@reduxjs/toolkit'

import todosReducer from './features/todos/todosSlice'
import filtersReducer from './features/filters/filtersSlice'

const store = configureStore({
  reducer: {
    todos: todosReducer,
    filters: filtersReducer
  }
})

export default store

----------------------------------------

TITLE: Creating Redux Store in JavaScript
DESCRIPTION: Creates a Redux store using the createStore function from the Redux library, passing in the counterReducer for state management.

LANGUAGE: javascript
CODE:
const store = Redux.createStore(counterReducer)

----------------------------------------

TITLE: Creating a Redux Slice with CreateSlice
DESCRIPTION: Demonstrates using createSlice to define a Redux slice including reducers, action creators and initial state in a more concise way with support for immutable updates via Immer.

LANGUAGE: JavaScript
CODE:
import { createSlice } from '@reduxjs/toolkit'

const initialState = {
  entities: [],
  status: null
}

const todosSlice = createSlice({
  name: 'todos',
  initialState,
  reducers: {
    todoAdded(state, action) {
      state.entities.push(action.payload)
    },
    todoToggled(state, action) {
      const todo = state.entities.find(todo => todo.id === action.payload)
      todo.completed = !todo.completed
    }
  }
})

export const { todoAdded, todoToggled } = todosSlice.actions

export default todosSlice.reducer

----------------------------------------

TITLE: Creating an Async Thunk with createAsyncThunk
DESCRIPTION: Example of creating an async thunk for fetching data using Redux Toolkit's createAsyncThunk with TypeScript

LANGUAGE: typescript
CODE:
export const fetchPosts = createAppAsyncThunk('posts/fetchPosts', async () => {
  const response = await client.get<Post[]>('/fakeApi/posts')
  return response.data
})

----------------------------------------

TITLE: Redux Root Reducer Composition
DESCRIPTION: Example of a root reducer that combines multiple reducers to manage the complete application state.

LANGUAGE: javascript
CODE:
function todoApp(state = {}, action) {
  return {
    todos: todos(state.todos, action),
    visibilityFilter: visibilityFilter(state.visibilityFilter, action)
  }
}

----------------------------------------

TITLE: Redux Toolkit Store Configuration
DESCRIPTION: Simplified store setup using Redux Toolkit's configureStore function.

LANGUAGE: javascript
CODE:
import { configureStore } from '@reduxjs/toolkit'

import monitorReducersEnhancer from './enhancers/monitorReducers'
import loggerMiddleware from './middleware/logger'
import rootReducer from './reducers'

export default function configureAppStore(preloadedState) {
  const store = configureStore({
    reducer: rootReducer,
    middleware: getDefaultMiddleware =>
      getDefaultMiddleware().prepend(loggerMiddleware),
    preloadedState,
    enhancers: [monitorReducersEnhancer]
  })

  if (process.env.NODE_ENV !== 'production' && module.hot) {
    module.hot.accept('./reducers', () => store.replaceReducer(rootReducer))
  }

  return store
}

----------------------------------------

TITLE: Modern Redux Implementation with Redux Toolkit
DESCRIPTION: Simplified Redux implementation using createSlice from Redux Toolkit. Shows how RTK reduces boilerplate and provides immutable updates using Immer.

LANGUAGE: javascript
CODE:
import { createSlice } from '@reduxjs/toolkit'

const todosSlice = createSlice({
  name: 'todos',
  initialState: [],
  reducers: {
    todoAdded(state, action) {
      state.push({
        id: action.payload.id,
        text: action.payload.text,
        completed: false
      })
    },
    todoToggled(state, action) {
      const todo = state.find(todo => todo.id === action.payload)
      todo.completed = !todo.completed
    }
  }
})

export const { todoAdded, todoToggled } = todosSlice.actions
export default todosSlice.reducer

----------------------------------------

TITLE: Normalizing Posts Data with createEntityAdapter in Redux
DESCRIPTION: Uses createEntityAdapter to normalize the posts data structure in the Redux store. This includes setting up the adapter, initializing state, and updating reducers to use adapter methods.

LANGUAGE: TypeScript
CODE:
const postsAdapter = createEntityAdapter<Post>({
  sortComparer: (a, b) => b.date.localeCompare(a.date)
})

const initialState: PostsState = postsAdapter.getInitialState({
  status: 'idle',
  error: null
})

const postsSlice = createSlice({
  name: 'posts',
  initialState,
  reducers: {
    postUpdated(state, action: PayloadAction<PostUpdate>) {
      const { id, title, content } = action.payload
      postsAdapter.updateOne(state, { id, changes: { title, content } })
    },
    // ...
  },
  extraReducers(builder) {
    builder
      .addCase(fetchPosts.fulfilled, (state, action) => {
        state.status = 'succeeded'
        postsAdapter.setAll(state, action.payload)
      })
      .addCase(addNewPost.fulfilled, postsAdapter.addOne)
  }
})

----------------------------------------

TITLE: Combining Redux Reducers
DESCRIPTION: Using Redux combineReducers to combine multiple slice reducers into a root reducer

LANGUAGE: javascript
CODE:
import { combineReducers } from 'redux'

import todosReducer from './features/todos/todosSlice'
import filtersReducer from './features/filters/filtersSlice'

const rootReducer = combineReducers({
  todos: todosReducer,
  filters: filtersReducer
})

export default rootReducer

----------------------------------------

TITLE: Adding Slice Reducer to Store
DESCRIPTION: Integrates the counter slice reducer into the Redux store configuration

LANGUAGE: javascript
CODE:
import { configureStore } from '@reduxjs/toolkit'
import counterReducer from '../features/counter/counterSlice'

export default configureStore({
  reducer: {
    counter: counterReducer
  }
})

----------------------------------------

TITLE: Defining an API Slice with RTK Query in TypeScript
DESCRIPTION: Sets up an API slice using createApi, defining endpoints for fetching posts and a single post. Uses fetchBaseQuery as the base query function.

LANGUAGE: TypeScript
CODE:
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'
import type { Post } from '@/features/posts/postsSlice'
export type { Post }

export const apiSlice = createApi({
  reducerPath: 'api',
  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),
  endpoints: builder => ({
    getPosts: builder.query<Post[], void>({
      query: () => '/posts'
    }),
    getPost: builder.query<Post, string>({
      query: postId => `/posts/${postId}`
    })
  })
})

export const { useGetPostsQuery, useGetPostQuery } = apiSlice

----------------------------------------

TITLE: Creating the Redux Store with configureStore
DESCRIPTION: Sets up the Redux store using configureStore from Redux Toolkit. Defines a root reducer with a counter slice as an example.

LANGUAGE: TypeScript
CODE:
import { configureStore } from '@reduxjs/toolkit'
import type { Action } from '@reduxjs/toolkit'

interface CounterState {
  value: number
}

function counterReducer(state: CounterState = { value: 0 }, action: Action) {
  switch (action.type) {
    // Handle actions here
    default: {
      return state
    }
  }
}

export const store = configureStore({
  reducer: {
    counter: counterReducer
  }
})

----------------------------------------

TITLE: Setting up Redux Provider
DESCRIPTION: Wraps the React application with Redux Provider to make store available to all components

LANGUAGE: javascript
CODE:
import React from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App'
import store from './app/store'
import { Provider } from 'react-redux'

const root = createRoot(document.getElementById('root')!)

root.render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>,
)

----------------------------------------

TITLE: Modern Redux Counter Example with Redux Toolkit
DESCRIPTION: Example showing how to create a counter application using modern Redux Toolkit patterns, including creating a slice and configuring the store.

LANGUAGE: javascript
CODE:
import { createSlice, configureStore } from '@reduxjs/toolkit'

const counterSlice = createSlice({
  name: 'counter',
  initialState: {
    value: 0
  },
  reducers: {
    incremented: state => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1
    },
    decremented: state => {
      state.value -= 1
    }
  }
})

export const { incremented, decremented } = counterSlice.actions

const store = configureStore({
  reducer: counterSlice.reducer
})

// Can still subscribe to the store
store.subscribe(() => console.log(store.getState()))

// Still pass action objects to `dispatch`, but they're created for us
store.dispatch(incremented())
// {value: 1}
store.dispatch(incremented())
// {value: 2}
store.dispatch(decremented())
// {value: 1}

----------------------------------------

TITLE: Basic Redux Store Configuration in React
DESCRIPTION: Initial setup of a Redux store with React, showing basic integration with Provider component.

LANGUAGE: javascript
CODE:
import React from 'react'
import { render } from 'react-dom'
import { Provider } from 'react-redux'
import { createStore } from 'redux'
import rootReducer from './reducers'
import App from './components/App'

const store = createStore(rootReducer)

render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
)

----------------------------------------

TITLE: Installing Redux Dependencies
DESCRIPTION: Command to install Redux Toolkit and React-Redux packages using npm

LANGUAGE: shell
CODE:
npm install @reduxjs/toolkit react-redux

----------------------------------------

TITLE: Redux Store Configuration with Redux Toolkit
DESCRIPTION: Example of simplified store setup using configureStore from Redux Toolkit. Demonstrates automatic middleware configuration and DevTools setup.

LANGUAGE: javascript
CODE:
import { configureStore } from '@reduxjs/toolkit'
import todosReducer from '../features/todos/todosSlice'
import filtersReducer from '../features/filters/filtersSlice'

export const store = configureStore({
  reducer: {
    todos: todosReducer,
    filters: filtersReducer
  }
})

----------------------------------------

TITLE: Configuring Redux Store with TypeScript
DESCRIPTION: Sets up a Redux store with TypeScript type definitions, including RootState and AppDispatch types. Demonstrates proper store configuration with multiple reducers and type exports.

LANGUAGE: typescript
CODE:
import { configureStore } from '@reduxjs/toolkit'

export const store = configureStore({
  reducer: {
    posts: postsReducer,
    comments: commentsReducer,
    users: usersReducer
  }
})

export type RootState = ReturnType<typeof store.getState>
export type AppDispatch = typeof store.dispatch
export type AppStore = typeof store

----------------------------------------

TITLE: Basic Redux UI Integration Example
DESCRIPTION: Example showing basic Redux store integration with a UI counter component, demonstrating store creation, subscription, state updates and dispatching actions.

LANGUAGE: javascript
CODE:
const store = Redux.createStore(counterReducer)

store.subscribe(render)

const valueEl = document.getElementById('value')

function render() {
  const state = store.getState()
  const newValue = state.value.toString()
  valueEl.innerHTML = newValue
}

render()

document.getElementById('increment').addEventListener('click', function () {
  store.dispatch({ type: 'counter/incremented' })
})

----------------------------------------

TITLE: Modern Redux Store Setup with Redux Toolkit
DESCRIPTION: Simplified store setup using Redux Toolkit's configureStore API which handles middleware and DevTools configuration automatically.

LANGUAGE: javascript
CODE:
import { configureStore } from '@reduxjs/toolkit'

import postsReducer from '../reducers/postsReducer'
import usersReducer from '../reducers/usersReducer'

const store = configureStore({
  reducer: {
    posts: postsReducer,
    users: usersReducer
  }
})

----------------------------------------

TITLE: Configuring Redux Store with Thunk Middleware
DESCRIPTION: This code snippet shows how to configure a Redux store with the Redux Thunk middleware to enable dispatching async functions.

LANGUAGE: javascript
CODE:
import { createStore, applyMiddleware } from 'redux'
import { thunk } from 'redux-thunk'
import { composeWithDevTools } from 'redux-devtools-extension'
import rootReducer from './reducer'

const composedEnhancer = composeWithDevTools(applyMiddleware(thunk))

// The store now has the ability to accept thunk functions in `dispatch`
const store = createStore(rootReducer, composedEnhancer)
export default store

----------------------------------------

TITLE: Providing the Redux Store to React Components
DESCRIPTION: Wraps the root React component with Redux Provider to make the store available throughout the component tree.

LANGUAGE: TypeScript
CODE:
import { createRoot } from 'react-dom/client'
import { Provider } from 'react-redux'

import App from './App'
import { store } from './app/store'

const root = createRoot(document.getElementById('root')!)

root.render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>
)

----------------------------------------

TITLE: Configuring Redux Store with TypeScript
DESCRIPTION: Setting up a Redux store with TypeScript using configureStore and defining root state and dispatch types

LANGUAGE: typescript
CODE:
import { configureStore } from '@reduxjs/toolkit'

export const store = configureStore({
  reducer: {
    posts: postsReducer,
    comments: commentsReducer,
    users: usersReducer
  }
})

export type AppStore = typeof store
export type RootState = ReturnType<AppStore['getState']>
export type AppDispatch = AppStore['dispatch']

----------------------------------------

TITLE: Setting Up a Custom Test Render Function for Redux
DESCRIPTION: Creates a reusable custom render function that wraps components with a Redux Provider and store for testing purposes. Allows specifying preloaded state or passing in a custom store instance.

LANGUAGE: typescript
CODE:
import React, { PropsWithChildren } from 'react'
import { render } from '@testing-library/react'
import type { RenderOptions } from '@testing-library/react'
import { Provider } from 'react-redux'

import { setupStore } from '../app/store'
import type { AppStore, RootState } from '../app/store'

interface ExtendedRenderOptions extends Omit<RenderOptions, 'queries'> {
  preloadedState?: Partial<RootState>
  store?: AppStore
}

export function renderWithProviders(
  ui: React.ReactElement,
  {
    preloadedState = {},
    store = setupStore(preloadedState),
    ...renderOptions
  }: ExtendedRenderOptions = {}
) {
  function Wrapper({ children }: PropsWithChildren<{}>): JSX.Element {
    return <Provider store={store}>{children}</Provider>
  }
  return { store, ...render(ui, { wrapper: Wrapper, ...renderOptions }) }
}

----------------------------------------

TITLE: Basic Redux Toolkit Example
DESCRIPTION: Demonstrates creating a slice, configuring the store, and dispatching actions using Redux Toolkit. It shows how to manage a simple counter state.

LANGUAGE: javascript
CODE:
import { createSlice, configureStore } from '@reduxjs/toolkit'

const counterSlice = createSlice({
  name: 'counter',
  initialState: {
    value: 0
  },
  reducers: {
    incremented: state => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1
    },
    decremented: state => {
      state.value -= 1
    }
  }
})

export const { incremented, decremented } = counterSlice.actions

const store = configureStore({
  reducer: counterSlice.reducer
})

// Can still subscribe to the store
store.subscribe(() => console.log(store.getState()))

// Still pass action objects to `dispatch`, but they're created for us
store.dispatch(incremented())
// {value: 1}
store.dispatch(incremented())
// {value: 2}
store.dispatch(decremented())
// {value: 1}

----------------------------------------

TITLE: Dispatching Actions in Redux Store
DESCRIPTION: This snippet demonstrates how to create a Redux store and dispatch actions to it. It shows the creation of a store using createStore, defining an action creator function, and dispatching multiple actions.

LANGUAGE: javascript
CODE:
import { createStore } from 'redux'
const store = createStore(todos, ['Use Redux'])

function addTodo(text) {
  return {
    type: 'ADD_TODO',
    text
  }
}

store.dispatch(addTodo('Read the docs'))
store.dispatch(addTodo('Read about the middleware'))

----------------------------------------

TITLE: Creating Typed Redux Hooks
DESCRIPTION: Defines typed versions of useDispatch and useSelector hooks for TypeScript usage. Creates custom hooks that incorporate Redux state and dispatch types for better type inference.

LANGUAGE: typescript
CODE:
import { useDispatch, useSelector } from 'react-redux'
import type { AppDispatch, RootState } from './store'

export const useAppDispatch = useDispatch.withTypes<AppDispatch>()
export const useAppSelector = useSelector.withTypes<RootState>()

----------------------------------------

TITLE: Implementing a Basic Redux Reducer Function
DESCRIPTION: This code demonstrates a simple Redux reducer function for a counter. It shows how to check the action type, make immutable updates, and return the new state.

LANGUAGE: js
CODE:
const initialState = { value: 0 }

function counterReducer(state = initialState, action) {
  // Check to see if the reducer cares about this action
  if (action.type === 'counter/incremented') {
    // If so, make a copy of `state`
    return {
      ...state,
      // and update the copy with the new value
      value: state.value + 1
    }
  }
  // otherwise return the existing state unchanged
  return state
}

----------------------------------------

TITLE: Defining an API with RTK Query
DESCRIPTION: An example of using RTK Query to define an API with endpoints for fetching and mutating data, demonstrating how to simplify data fetching and caching in Redux applications.

LANGUAGE: typescript
CODE:
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'
import type { Pokemon } from './types'

export const api = createApi({
  reducerPath: 'pokemonApi',
  baseQuery: fetchBaseQuery({ baseUrl: 'https://pokeapi.co/api/v2/' }),
  endpoints: builder => ({
    getPokemonByName: builder.query<Pokemon, string>({
      query: name => `pokemon/${name}`
    }),
    getPosts: builder.query<Post[], void>({
      query: () => '/posts'
    }),
    addNewPost: builder.mutation<void, Post>({
      query: initialPost => ({
        url: '/posts',
        method: 'POST',
        body: initialPost
      })
    })
  })
})

export const { useGetPokemonByNameQuery } = api

----------------------------------------

TITLE: React Counter Component with Redux Integration
DESCRIPTION: React component that connects to Redux store using hooks for state management and action dispatching.

LANGUAGE: TypeScript
CODE:
import { useState } from 'react'
import { useAppDispatch, useAppSelector } from '@/app/hooks'
import {
  decrement,
  increment,
  incrementAsync,
  incrementByAmount,
  selectCount,
  selectStatus
} from './counterSlice'

export function Counter() {
  const dispatch = useAppDispatch()
  const count = useAppSelector(selectCount)
  const status = useAppSelector(selectStatus)
  const [incrementAmount, setIncrementAmount] = useState('2')

  return (
    <div>
      <button onClick={() => dispatch(decrement())}>-</button>
      <span>{count}</span>
      <button onClick={() => dispatch(increment())}>+</button>
    </div>
  )
}

----------------------------------------

TITLE: Combining Reducers by Slice in Redux
DESCRIPTION: Final implementation using Redux's combineReducers utility to combine the slice reducers into a root reducer, demonstrating the complete refactored structure.

LANGUAGE: javascript
CODE:
function updateObject(oldObject, newValues) {
  return Object.assign({}, oldObject, newValues)
}

function updateItemInArray(array, itemId, updateItemCallback) {
  const updatedItems = array.map(item => {
    if (item.id !== itemId) {
      return item
    }
    const updatedItem = updateItemCallback(item)
    return updatedItem
  })

  return updatedItems
}

function createReducer(initialState, handlers) {
  return function reducer(state = initialState, action) {
    if (handlers.hasOwnProperty(action.type)) {
      return handlers[action.type](state, action)
    } else {
      return state
    }
  }
}

function setVisibilityFilter(visibilityState, action) {
  return action.filter
}

const visibilityReducer = createReducer('SHOW_ALL', {
  SET_VISIBILITY_FILTER: setVisibilityFilter
})

function addTodo(todosState, action) {
  const newTodos = todosState.concat({
    id: action.id,
    text: action.text,
    completed: false
  })

  return newTodos
}

function toggleTodo(todosState, action) {
  const newTodos = updateItemInArray(todosState, action.id, todo => {
    return updateObject(todo, { completed: !todo.completed })
  })

  return newTodos
}

function editTodo(todosState, action) {
  const newTodos = updateItemInArray(todosState, action.id, todo => {
    return updateObject(todo, { text: action.text })
  })

  return newTodos
}

const todosReducer = createReducer([], {
  ADD_TODO: addTodo,
  TOGGLE_TODO: toggleTodo,
  EDIT_TODO: editTodo
})

const appReducer = combineReducers({
  visibilityFilter: visibilityReducer,
  todos: todosReducer
})

----------------------------------------

TITLE: Configuring React Provider with Redux Store
DESCRIPTION: Example showing how to wrap a React root component with Redux Provider to enable Redux store access

LANGUAGE: jsx
CODE:
root.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
)

----------------------------------------

TITLE: Handling Async Actions in Redux Slice
DESCRIPTION: Implementation of reducer logic to handle async action states in a Redux slice including pending, fulfilled and rejected states

LANGUAGE: typescript
CODE:
extraReducers: builder => {
  builder
    .addCase(fetchPosts.pending, (state, action) => {
      state.status = 'pending'
    })
    .addCase(fetchPosts.fulfilled, (state, action) => {
      state.status = 'succeeded'
      state.posts.push(...action.payload)
    })
    .addCase(fetchPosts.rejected, (state, action) => {
      state.status = 'failed'
      state.error = action.error.message ?? 'Unknown Error'
    })
}

----------------------------------------

TITLE: Adding Middleware to Redux Store
DESCRIPTION: Shows how to apply middleware to a Redux store using applyMiddleware.

LANGUAGE: JavaScript
CODE:
import { createStore, applyMiddleware } from 'redux'
import rootReducer from './reducer'
import { print1, print2, print3 } from './exampleAddons/middleware'

const middlewareEnhancer = applyMiddleware(print1, print2, print3)

const store = createStore(rootReducer, middlewareEnhancer)

export default store

----------------------------------------

TITLE: Creating and Using a Redux Store with JavaScript
DESCRIPTION: This snippet demonstrates how to create a Redux store using createStore, define a reducer function, dispatch an action, and log the resulting state.

LANGUAGE: javascript
CODE:
import { createStore } from 'redux'

function todos(state = [], action) {
  switch (action.type) {
    case 'ADD_TODO':
      return state.concat([action.text])
    default:
      return state
  }
}

const store = createStore(todos, ['Use Redux'])

store.dispatch({
  type: 'ADD_TODO',
  text: 'Read the docs'
})

console.log(store.getState())
// [ 'Use Redux', 'Read the docs' ]

----------------------------------------

TITLE: Implementing Async Function Middleware in Redux
DESCRIPTION: This code snippet demonstrates how to create a custom Redux middleware that allows dispatching functions instead of plain action objects, enabling async logic.

LANGUAGE: javascript
CODE:
const asyncFunctionMiddleware = storeAPI => next => action => {
  // If the "action" is actually a function instead...
  if (typeof action === 'function') {
    // then call the function and pass `dispatch` and `getState` as arguments
    return action(storeAPI.dispatch, storeAPI.getState)
  }

  // Otherwise, it's a normal action - send it onwards
  return next(action)
}

----------------------------------------

TITLE: Implementing Fetch Todos Thunk in Redux
DESCRIPTION: This code snippet demonstrates how to create a thunk function to fetch todos from an API and dispatch an action with the received data.

LANGUAGE: javascript
CODE:
import { client } from '../../api/client'

export async function fetchTodos(dispatch, getState) {
  const response = await client.get('/fakeApi/todos')
  dispatch({ type: 'todos/todosLoaded', payload: response.todos })
}

----------------------------------------

TITLE: Header Component with useDispatch
DESCRIPTION: Example of a React Header component using the useDispatch hook to dispatch todo creation actions to the Redux store.

LANGUAGE: jsx
CODE:
import React, { useState } from 'react'
import { useDispatch } from 'react-redux'

const Header = () => {
  const [text, setText] = useState('')
  const dispatch = useDispatch()

  const handleChange = e => setText(e.target.value)

  const handleKeyDown = e => {
    const trimmedText = e.target.value.trim()
    if (e.key === 'Enter' && trimmedText) {
      dispatch({ type: 'todos/todoAdded', payload: trimmedText })
      setText('')
    }
  }

  return (
    <input
      type="text"
      placeholder="What needs to be done?"
      autoFocus={true}
      value={text}
      onChange={handleChange}
      onKeyDown={handleKeyDown}
    />
  )
}

----------------------------------------

TITLE: Implementing Delayed Action Middleware in Redux
DESCRIPTION: This code snippet demonstrates how to create a custom Redux middleware that delays specific actions by one second.

LANGUAGE: javascript
CODE:
const delayedActionMiddleware = storeAPI => next => action => {
  if (action.type === 'todos/todoAdded') {
    setTimeout(() => {
      // Delay this action by one second
      next(action)
    }, 1000)
    return
  }

  return next(action)
}

----------------------------------------

TITLE: Using createAsyncThunk for Fetching User Data
DESCRIPTION: An example of using Redux Toolkit's createAsyncThunk API to create a thunk for fetching user data, simplifying the process of handling async operations.

LANGUAGE: javascript
CODE:
const fetchUserById2 = createAsyncThunk('fetchUserById', async userId => {
  const user = await userApi.getUserById(userId)
  return user
})

----------------------------------------

TITLE: Implementing Authentication Flow in Redux
DESCRIPTION: A high-level overview of implementing authentication in Redux applications. Describes the process of creating action constants, action creators, async actions with middleware, and reducers for handling authentication states.

LANGUAGE: javascript
CODE:
// 1. Action Constants
const LOGIN_SUCCESS = 'LOGIN_SUCCESS'
const LOGIN_FAILURE = 'LOGIN_FAILURE'

// 2. Action Creators
const loginSuccess = (token) => ({
  type: LOGIN_SUCCESS,
  payload: token
})

const loginFailure = (error) => ({
  type: LOGIN_FAILURE,
  payload: error
})

// 3. Async Action Creator with Thunk
const login = (credentials) => async dispatch => {
  try {
    const token = await api.login(credentials)
    localStorage.setItem('token', token)
    dispatch(loginSuccess(token))
  } catch (error) {
    dispatch(loginFailure(error))
  }
}

// 4. Authentication Reducer
const authReducer = (state = initialState, action) => {
  switch (action.type) {
    case LOGIN_SUCCESS:
      return {
        ...state,
        token: action.payload,
        isAuthenticated: true
      }
    case LOGIN_FAILURE:
      return {
        ...state,
        error: action.payload,
        isAuthenticated: false
      }
    default:
      return state
  }
}

----------------------------------------

TITLE: Adding New Posts with useDispatch
DESCRIPTION: Implements a form component for adding new posts by dispatching actions to the Redux store using useDispatch.

LANGUAGE: TypeScript
CODE:
import React from 'react'
import { nanoid } from '@reduxjs/toolkit'

import { useAppDispatch } from '@/app/hooks'

import { type Post, postAdded } from './postsSlice'

export const AddPostForm = () => {
  const dispatch = useAppDispatch()

  const handleSubmit = (e: React.FormEvent<AddPostFormElements>) => {
    e.preventDefault()

    const { elements } = e.currentTarget
    const title = elements.postTitle.value
    const content = elements.postContent.value

    const newPost: Post = {
      id: nanoid(),
      title,
      content
    }
    dispatch(postAdded(newPost))

    e.currentTarget.reset()
  }

  return (
    <section>
      <h2>Add a New Post</h2>
      <form onSubmit={handleSubmit}>
        <label htmlFor="postTitle">Post Title:</label>
        <input type="text" id="postTitle" defaultValue="" required />
        <label htmlFor="postContent">Content:</label>
        <textarea
          id="postContent"
          name="postContent"
          defaultValue=""
          required
        />
        <button>Save Post</button>
      </form>
    </section>
  )
}

----------------------------------------

TITLE: Implementing Redux Thunk Middleware
DESCRIPTION: Example of Redux Thunk middleware that enables dispatching functions as actions. The middleware checks if the action is a function and if so, calls it with dispatch and getState as arguments.

LANGUAGE: typescript
CODE:
const middleware: ThunkMiddleware<State, BasicAction, ExtraThunkArg> =
  ({ dispatch, getState }) =>
  next =>
  action => {
    if (typeof action === 'function') {
      return action(dispatch, getState, extraArgument)
    }

    return next(action)
  }

----------------------------------------

TITLE: Creating Async Thunks with CreateAsyncThunk
DESCRIPTION: Shows how to use createAsyncThunk to generate async action creators and handle loading states for API calls automatically.

LANGUAGE: JavaScript
CODE:
export const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {
  const response = await client.get('/fakeApi/todos')
  return response.todos
})

export const saveNewTodo = createAsyncThunk('todos/saveNewTodo', async text => {
  const initialTodo = { text }
  const response = await client.post('/fakeApi/todos', { todo: initialTodo })
  return response.todo
})

----------------------------------------

TITLE: Creating Typed Redux Hooks
DESCRIPTION: Definition of pre-typed versions of React-Redux hooks for improved type safety when using Redux with TypeScript.

LANGUAGE: typescript
CODE:
import { useDispatch, useSelector, useStore } from 'react-redux'
import type { AppDispatch, AppStore, RootState } from './store'

export const useAppDispatch = useDispatch.withTypes<AppDispatch>()
export const useAppSelector = useSelector.withTypes<RootState>()
export const useAppStore = useStore.withTypes<AppStore>()

----------------------------------------

TITLE: Creating and Using a Redux Store
DESCRIPTION: This snippet shows how to create a Redux store using configureStore from Redux Toolkit, and how to use the getState and dispatch methods to interact with the store.

LANGUAGE: js
CODE:
import { configureStore } from '@reduxjs/toolkit'

const store = configureStore({ reducer: counterReducer })

console.log(store.getState())
// {value: 0}

store.dispatch({ type: 'counter/incremented' })

console.log(store.getState())
// {value: 1}

----------------------------------------

TITLE: Thunk Action Creator with Async Logic
DESCRIPTION: Example of a thunk action creator that makes an async API call and dispatches actions based on the result.

LANGUAGE: javascript
CODE:
export function fetchTodoById(todoId) {
  return async function fetchTodoByIdThunk(dispatch, getState) {
    const response = await client.get(`/fakeApi/todo/${todoId}`)
    dispatch(todosLoaded(response.todos))
  }
}

----------------------------------------

TITLE: Creating Redux Store Factory for Next.js
DESCRIPTION: Setup of a Redux store factory function that creates unique store instances per request, along with type definitions for store, state and dispatch.

LANGUAGE: typescript
CODE:
import { configureStore } from '@reduxjs/toolkit'

export const makeStore = () => {
  return configureStore({
    reducer: {}
  })
}

export type AppStore = ReturnType<typeof makeStore>
export type RootState = ReturnType<AppStore['getState']>
export type AppDispatch = AppStore['dispatch']

----------------------------------------

TITLE: Using Redux Undo Library to Implement Undo/Redo
DESCRIPTION: Example of how to use the Redux Undo library to add undo/redo functionality to a todos reducer.

LANGUAGE: javascript
CODE:
import undoable from 'redux-undo'

/* ... */

const todos = (state = [], action) => {
  /* ... */
}

const undoableTodos = undoable(todos)

export default undoableTodos

----------------------------------------

TITLE: Creating Typed Redux Hooks
DESCRIPTION: Defining pre-typed versions of useDispatch and useSelector hooks using withTypes method

LANGUAGE: typescript
CODE:
import { useDispatch, useSelector, useStore } from 'react-redux'
import type { AppDispatch, AppStore, RootState } from './store'

export const useAppDispatch = useDispatch.withTypes<AppDispatch>()
export const useAppSelector = useSelector.withTypes<RootState>()
export const useAppStore = useStore.withTypes<AppStore>()

----------------------------------------

TITLE: Updating Nested Objects in Redux Reducer (JavaScript)
DESCRIPTION: This snippet demonstrates how to correctly update deeply nested state in a Redux reducer by copying all levels of nested data. It updates state.first.second[someId].fourth with a new value.

LANGUAGE: javascript
CODE:
function updateVeryNestedField(state, action) {
  return {
    ...state,
    first: {
      ...state.first,
      second: {
        ...state.first.second,
        [action.someId]: {
          ...state.first.second[action.someId],
          fourth: action.someValue
        }
      }
    }
  }
}

----------------------------------------

TITLE: Redux Thunk Installation
DESCRIPTION: Command to install redux-thunk middleware for handling asynchronous actions.

LANGUAGE: shell
CODE:
npm install redux-thunk

----------------------------------------

TITLE: Implementing Normalized State Structure in JavaScript
DESCRIPTION: Demonstration of a normalized state structure for the blog post example. This structure separates posts, comments, and users into their own 'tables', using IDs for references between entities.

LANGUAGE: javascript
CODE:
{
    posts : {
        byId : {
            "post1" : {
                id : "post1",
				author : "user1",
				body : "......",
				comments : ["comment1", "comment2"]
            },
            "post2" : {
				id : "post2",
				author : "user2",
				body : "......",
				comments : ["comment3", "comment4", "comment5"]
            }
        },
        allIds : ["post1", "post2"]
    },
    comments : {
        byId : {
            "comment1" : {
                id : "comment1",
                author : "user2",
                comment : ".....",
            },
            "comment2" : {
                id : "comment2",
                author : "user3",
                comment : ".....",
            },
            "comment3" : {
                id : "comment3",
                author : "user3",
                comment : ".....",
            },
            "comment4" : {
                id : "comment4",
                author : "user1",
                comment : ".....",
            },
            "comment5" : {
                id : "comment5",
                author : "user3",
                comment : ".....",
            },
        },
        allIds : ["comment1", "comment2", "comment3", "comment4", "comment5"]
    },
    users : {
        byId : {
            "user1" : {
                username : "user1",
                name : "User 1",
            },
            "user2" : {
                username : "user2",
                name : "User 2",
            },
            "user3" : {
                username : "user3",
                name : "User 3",
            }
        },
        allIds : ["user1", "user2", "user3"]
    }
}

----------------------------------------

TITLE: Implementing a Basic Counter Reducer in JavaScript
DESCRIPTION: This snippet demonstrates a simple Redux reducer function for a counter. It handles INCREMENT and DECREMENT actions, and provides a default state value.

LANGUAGE: javascript
CODE:
function counter(state, action) {
  if (typeof state === 'undefined') {
    state = 0 // If state is undefined, initialize it with a default value
  }

  if (action.type === 'INCREMENT') {
    return state + 1
  } else if (action.type === 'DECREMENT') {
    return state - 1
  } else {
    return state // In case an action is passed in we don't understand
  }
}

----------------------------------------

TITLE: Setting Up Listener Middleware in Redux Toolkit
DESCRIPTION: Configures the createListenerMiddleware from Redux Toolkit to enable reactive logic in response to dispatched actions.

LANGUAGE: TypeScript
CODE:
import { createListenerMiddleware, addListener } from '@reduxjs/toolkit'
import type { RootState, AppDispatch } from './store'

export const listenerMiddleware = createListenerMiddleware()

export const startAppListening = listenerMiddleware.startListening.withTypes<
  RootState,
  AppDispatch
>()
export type AppStartListening = typeof startAppListening

export const addAppListener = addListener.withTypes<RootState, AppDispatch>()
export type AppAddListener = typeof addAppListener

----------------------------------------

TITLE: Configuring Redux Store with Compose
DESCRIPTION: Example showing how to use compose() to enhance a Redux store with middleware and DevTools. Demonstrates combining applyMiddleware with redux-devtools using functional composition.

LANGUAGE: javascript
CODE:
import { createStore, applyMiddleware, compose } from 'redux'
import { thunk } from 'redux-thunk'
import DevTools from './containers/DevTools'
import reducer from '../reducers'

const store = createStore(
  reducer,
  compose(applyMiddleware(thunk), DevTools.instrument())
)

----------------------------------------

TITLE: Configuring Redux Store with Enhancers
DESCRIPTION: Demonstrates how to use store enhancers to add functionality to a Redux store.

LANGUAGE: JavaScript
CODE:
import { createStore, compose } from 'redux'
import rootReducer from './reducer'
import {
  sayHiOnDispatch,
  includeMeaningOfLife
} from './exampleAddons/enhancers'

const composedEnhancer = compose(sayHiOnDispatch, includeMeaningOfLife)

const store = createStore(rootReducer, undefined, composedEnhancer)

export default store

----------------------------------------

TITLE: Implementing Thunk Middleware in Redux
DESCRIPTION: An example of how to implement the thunk middleware for Redux, which allows dispatching functions that can perform asynchronous operations.

LANGUAGE: javascript
CODE:
const thunkMiddleware =
  ({ dispatch, getState }) =>
  next =>
  action => {
    if (typeof action === 'function') {
      return action(dispatch, getState)
    }

    return next(action)
  }

----------------------------------------

TITLE: Implementing Listener Middleware in Redux Toolkit
DESCRIPTION: An example of using Redux Toolkit's createListenerMiddleware to create a listener for handling side effects in response to specific actions or state changes.

LANGUAGE: javascript
CODE:
const listenerMiddleware = createListenerMiddleware()

listenerMiddleware.startListening({
  actionCreator: todoAdded,
  effect: async (action, listenerApi) => {
    console.log('Todo added: ', action.payload.text)
    listenerApi.cancelActiveListeners()
    const data = await fetchData()
    listenerApi.dispatch(todoAdded('Buy pet food'))
  }
})

----------------------------------------

TITLE: Creating Redux Store with Multiple Middleware Chains
DESCRIPTION: Demonstrates the proper way to chain middleware in Redux using applyMiddleware. Shows how middleware functions can use next() to pass actions along or dispatch() to restart processing.

LANGUAGE: javascript
CODE:
// Example middleware structure
const middleware = store => next => action => {
  // Can either call next(action) to continue,
  // or dispatch(action) to restart the chain,
  // or do nothing to stop the action
  return next(action);
}

----------------------------------------

TITLE: Defining a Redux Action Object
DESCRIPTION: This snippet shows the structure of a typical Redux action object, with a type field and an optional payload containing additional information.

LANGUAGE: js
CODE:
const addTodoAction = {
  type: 'todos/todoAdded',
  payload: 'Buy milk'
}

----------------------------------------

TITLE: Configuring Redux Store with RTK Query Slice
DESCRIPTION: Updates the Redux store configuration to include the RTK Query API slice reducer and middleware.

LANGUAGE: TypeScript
CODE:
import { configureStore } from '@reduxjs/toolkit'
import { apiSlice } from '@/features/api/apiSlice'

export const store = configureStore({
  reducer: {
    [apiSlice.reducerPath]: apiSlice.reducer
  },
  middleware: getDefaultMiddleware =>
    getDefaultMiddleware()
      .concat(apiSlice.middleware)
})

----------------------------------------

TITLE: Dispatching Actions and Subscribing to Store
DESCRIPTION: Demonstrates dispatching actions to the Redux store and subscribing to state changes.

LANGUAGE: JavaScript
CODE:
console.log('Initial state: ', store.getState())

const unsubscribe = store.subscribe(() =>
  console.log('State after dispatch: ', store.getState())
)

store.dispatch({ type: 'todos/todoAdded', payload: 'Learn about actions' })
store.dispatch({ type: 'todos/todoAdded', payload: 'Learn about reducers' })
store.dispatch({ type: 'todos/todoAdded', payload: 'Learn about stores' })

store.dispatch({ type: 'todos/todoToggled', payload: 0 })
store.dispatch({ type: 'todos/todoToggled', payload: 1 })

store.dispatch({ type: 'filters/statusFilterChanged', payload: 'Active' })

store.dispatch({
  type: 'filters/colorFilterChanged',
  payload: { color: 'red', changeType: 'added' }
})

unsubscribe()

store.dispatch({ type: 'todos/todoAdded', payload: 'Try creating a store' })

----------------------------------------

TITLE: Subscribing to Redux Store Changes
DESCRIPTION: This example shows how to subscribe to changes in a Redux store. It defines a select function to access a specific part of the state, sets up a change handler, and demonstrates subscribing and unsubscribing from the store.

LANGUAGE: javascript
CODE:
function select(state) {
  return state.some.deep.property
}

let currentValue
function handleChange() {
  let previousValue = currentValue
  currentValue = select(store.getState())

  if (previousValue !== currentValue) {
    console.log(
      'Some deep nested property changed from',
      previousValue,
      'to',
      currentValue
    )
  }
}

const unsubscribe = store.subscribe(handleChange)
unsubscribe()

----------------------------------------

TITLE: Improved combineReducers Usage with Explicit Key Names in Redux
DESCRIPTION: Shows a better approach to using combineReducers by carefully renaming imports and explicitly specifying state keys. This results in cleaner, more meaningful state shape.

LANGUAGE: javascript
CODE:
import { combineReducers, createStore } from 'redux'

// Rename the default import to whatever name we want. We can also rename a named import.
import defaultState, {
  firstNamedReducer,
  secondNamedReducer as secondState
} from './reducers'

const rootReducer = combineReducers({
  defaultState, // key name same as the carefully renamed default export
  firstState: firstNamedReducer, // specific key name instead of the variable name
  secondState // key name same as the carefully renamed named export
})

const reducerInitializedStore = createStore(rootReducer)
console.log(reducerInitializedStore.getState())
// {defaultState : 0, firstState : 1, secondState : 2}

----------------------------------------

TITLE: Redux Reducer Basic Structure
DESCRIPTION: Example showing the fundamental structure of a Redux reducer function that takes state and action parameters and returns new state. This pattern shows how reducers should be pure functions that calculate the next state based on current state and an action.

LANGUAGE: javascript
CODE:
(state, action) => newState

----------------------------------------

TITLE: Memoized Selector with createSelector
DESCRIPTION: Shows how to create a memoized selector using Reselect's createSelector to efficiently derive filtered todo IDs.

LANGUAGE: javascript
CODE:
export const selectFilteredTodos = createSelector(
  state => state.todos,
  state => state.filters.status,
  (todos, status) => {
    if (status === StatusFilters.All) {
      return todos
    }
    const completedStatus = status === StatusFilters.Completed
    return todos.filter(todo => todo.completed === completedStatus)
  }
)

----------------------------------------

TITLE: Redux Store Subscribe Pattern
DESCRIPTION: Shows the basic pattern for subscribing to Redux store updates. Demonstrates how subscribers can access state changes through getState() after being notified of updates.

LANGUAGE: javascript
CODE:
store.subscribe(() => {
  // Subscriber logic
  const currentState = store.getState();
  // React to state changes
});

----------------------------------------

TITLE: Creating a Posts Slice with createSlice
DESCRIPTION: Defines a slice for posts data using createSlice from Redux Toolkit. Includes an initial state and a reducer for adding posts.

LANGUAGE: TypeScript
CODE:
import { createSlice, PayloadAction } from '@reduxjs/toolkit'

export interface Post {
  id: string
  title: string
  content: string
}

const initialState: Post[] = [
  { id: '1', title: 'First Post!', content: 'Hello!' },
  { id: '2', title: 'Second Post', content: 'More text' }
]

const postsSlice = createSlice({
  name: 'posts',
  initialState,
  reducers: {
    postAdded(state, action: PayloadAction<Post>) {
      state.push(action.payload)
    }
  }
})

export const { postAdded } = postsSlice.actions

export default postsSlice.reducer

----------------------------------------

TITLE: Redux DevTools Extension Setup
DESCRIPTION: Integration of Redux DevTools extension for enhanced debugging capabilities.

LANGUAGE: javascript
CODE:
import { applyMiddleware, createStore } from 'redux'
import { thunk } from 'redux-thunk'
import { composeWithDevTools } from 'redux-devtools-extension'

import monitorReducersEnhancer from './enhancers/monitorReducers'
import loggerMiddleware from './middleware/logger'
import rootReducer from './reducers'

export default function configureStore(preloadedState) {
  const middlewares = [loggerMiddleware, thunk]
  const middlewareEnhancer = applyMiddleware(...middlewares)

  const enhancers = [middlewareEnhancer, monitorReducersEnhancer]
  const composedEnhancers = composeWithDevTools(...enhancers)

  const store = createStore(rootReducer, preloadedState, composedEnhancers)

  return store
}

----------------------------------------

TITLE: Implementing Automatic Cache Invalidation with Tags
DESCRIPTION: Demonstrates how to use RTK Query tags to automatically invalidate and refetch data after a mutation.

LANGUAGE: TypeScript
CODE:
export const apiSlice = createApi({
  reducerPath: 'api',
  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),
  tagTypes: ['Post'],
  endpoints: builder => ({
    getPosts: builder.query<Post[], void>({
      query: () => '/posts',
      providesTags: ['Post']
    }),
    addNewPost: builder.mutation<Post, NewPost>({
      query: initialPost => ({
        url: '/posts',
        method: 'POST',
        body: initialPost
      }),
      invalidatesTags: ['Post']
    })
  })
})

----------------------------------------

TITLE: Selector Factory Pattern
DESCRIPTION: Example of creating a selector factory to generate unique selector instances for different use cases

LANGUAGE: javascript
CODE:
const makeSelectItemsByCategory = () => {
  const selectItemsByCategory = createSelector(
    [state => state.items, (state, category) => category],
    (items, category) => items.filter(item => item.category === category)
  )
  return selectItemsByCategory
}

----------------------------------------

TITLE: Setting Up Redux DevTools
DESCRIPTION: Configures the Redux store to work with the Redux DevTools browser extension.

LANGUAGE: JavaScript
CODE:
import { createStore, applyMiddleware } from 'redux'
import { composeWithDevTools } from 'redux-devtools-extension'
import rootReducer from './reducer'
import { print1, print2, print3 } from './exampleAddons/middleware'

const composedEnhancer = composeWithDevTools(
  applyMiddleware(print1, print2, print3)
)

const store = createStore(rootReducer, composedEnhancer)
export default store

----------------------------------------

TITLE: Task-Based Updates for Normalized Data in Redux
DESCRIPTION: This snippet demonstrates a task-based approach to updating normalized data in Redux. It uses dot-prop-immutable for nested updates and combine reducers with reduce-reducers for a more focused update logic.

LANGUAGE: javascript
CODE:
import posts from "./postsReducer";
import comments from "./commentsReducer";
import dotProp from "dot-prop-immutable";
import {combineReducers} from "redux";
import reduceReducers from "reduce-reducers";

const combinedReducer = combineReducers({
    posts,
    comments
});


function addComment(state, action) {
    const {payload} = action;
    const {postId, commentId, commentText} = payload;

    // State here is the entire combined state
    const updatedWithPostState = dotProp.set(
        state,
        `posts.byId.${postId}.comments`,
        comments => comments.concat(commentId)
    );

    const updatedWithCommentsTable = dotProp.set(
        updatedWithPostState,
        `comments.byId.${commentId}`,
        {id : commentId, text : commentText}
    );

    const updatedWithCommentsList = dotProp.set(
        updatedWithCommentsTable,
        `comments.allIds`,
        allIds => allIds.concat(commentId);
    );

    return updatedWithCommentsList;
}

const featureReducers = createReducer({}, {
    ADD_COMMENT : addComment,
});

const rootReducer = reduceReducers(
    combinedReducer,
    featureReducers
);

----------------------------------------

TITLE: Basic Selector Function Examples
DESCRIPTION: Examples of basic selector functions using different syntax approaches and patterns

LANGUAGE: javascript
CODE:
// Arrow function, direct lookup
const selectEntities = state => state.entities

// Function declaration, mapping over an array to derive values
function selectItemIds(state) {
  return state.items.map(item => item.id)
}

// Function declaration, encapsulating a deep lookup
function selectSomeSpecificField(state) {
  return state.some.deeply.nested.field
}

// Arrow function, deriving values from an array
const selectItemsWhoseNamesStartWith = (items, namePrefix) =>
  items.filter(item => item.name.startsWith(namePrefix))

----------------------------------------

TITLE: Logger Middleware Implementation
DESCRIPTION: Custom middleware that logs action dispatches and resulting state changes.

LANGUAGE: javascript
CODE:
const logger = store => next => action => {
  console.group(action.type)
  console.info('dispatching', action)
  let result = next(action)
  console.log('next state', store.getState())
  console.groupEnd()
  return result
}

export default logger

----------------------------------------

TITLE: Implementing an Improved Counter Reducer with Switch Statement in JavaScript
DESCRIPTION: This snippet shows an improved version of the counter reducer using a switch statement and default parameter value for initial state.

LANGUAGE: javascript
CODE:
function counter(state = 0, action) {
  switch (action.type) {
    case 'INCREMENT':
      return state + 1
    case 'DECREMENT':
      return state - 1
    default:
      return state
  }
}

----------------------------------------

TITLE: CreateSelector Basic Usage
DESCRIPTION: Example showing how to use Reselect's createSelector to create memoized selectors with input and output selectors

LANGUAGE: javascript
CODE:
const selectA = state => state.a
const selectB = state => state.b
const selectC = state => state.c

const selectABC = createSelector([selectA, selectB, selectC], (a, b, c) => {
  // do something with a, b, and c, and return a result
  return a + b + c
})

----------------------------------------

TITLE: Implementing a Self-Contained Redux Sub-App in React
DESCRIPTION: This snippet demonstrates how to create a self-contained Redux sub-app by wrapping it in a special component. The component initializes its own Redux store in the constructor, hiding Redux as an implementation detail.

LANGUAGE: javascript
CODE:
import React, { Component } from 'react'
import { Provider } from 'react-redux'
import { createStore } from 'redux'
import reducer from './reducers'
import App from './App'

class SubApp extends Component {
  constructor(props) {
    super(props)
    this.store = createStore(reducer)
  }

  render() {
    return (
      <Provider store={this.store}>
        <App />
      </Provider>
    )
  }
}

----------------------------------------

TITLE: Implementing combineReducers in Redux with JavaScript
DESCRIPTION: This snippet illustrates how combineReducers works internally, combining multiple reducer functions into a single reducer that manages a state object.

LANGUAGE: javascript
CODE:
// const combined = combineReducers({ a, b })
function combined(state = {}, action) {
  return {
    a: a(state.a, action),
    b: b(state.b, action)
  }
}

----------------------------------------

TITLE: Writing a Hand-written Thunk for Fetching User Data
DESCRIPTION: An example of a manually written thunk function for fetching user data, demonstrating how to handle async operations and dispatch actions based on the result.

LANGUAGE: javascript
CODE:
const fetchUserById = userId => {
  return async (dispatch, getState) => {
    dispatch(fetchUserStarted())
    let lastAction
    try {
      const user = await userApi.getUserById(userId)
      lastAction = fetchUserSucceeded(user)
    } catch (err) {
      lastAction = fetchUserFailed(err.message)
    }
    dispatch(lastAction)
  }
}

----------------------------------------

TITLE: Implementing Single Post Display in React & Redux
DESCRIPTION: Component for displaying individual post details using Redux state and React Router parameters

LANGUAGE: tsx
CODE:
import { useParams } from 'react-router-dom'

import { useAppSelector } from '@/app/hooks'

export const SinglePostPage = () => {
  const { postId } = useParams()

  const post = useAppSelector(state =>
    state.posts.find(post => post.id === postId)
  )

  if (!post) {
    return (
      <section>
        <h2>Post not found!</h2>
      </section>
    )
  }

  return (
    <section>
      <article className="post">
        <h2>{post.title}</h2>
        <p className="post-content">{post.content}</p>
      </article>
    </section>
  )
}

----------------------------------------

TITLE: Normalized State Structure Implementation
DESCRIPTION: Shows how to implement a normalized state structure for todos using an entities object with IDs as keys.

LANGUAGE: javascript
CODE:
const initialState = {
  status: 'idle',
  entities: {}
}

export default function todosReducer(state = initialState, action) {
  switch (action.type) {
    case 'todos/todoAdded': {
      const todo = action.payload
      return {
        ...state,
        entities: {
          ...state.entities,
          [todo.id]: todo
        }
      }
    }
    // ... other cases
  }
}

----------------------------------------

TITLE: Implementing Saga for Fetching User Data
DESCRIPTION: An example of using Redux-Saga to create a saga for fetching user data, demonstrating how to handle async operations and respond to specific actions.

LANGUAGE: javascript
CODE:
import { call, put, takeEvery } from 'redux-saga/effects'

function* fetchUser(action) {
  yield put(fetchUserStarted())
  try {
    const user = yield call(userApi.getUserById, action.payload.userId)
    yield put(fetchUserSucceeded(user))
  } catch (err) {
    yield put(fetchUserFailed(err.message))
  }
}

function* fetchUserWatcher() {
  yield takeEvery('USER_FETCH_REQUESTED', fetchUser)
}

----------------------------------------

TITLE: Post Reaction Management in Redux
DESCRIPTION: Redux slice configuration for managing post reactions with action creators and state updates

LANGUAGE: typescript
CODE:
export interface Reactions {
  thumbsUp: number
  tada: number
  heart: number
  rocket: number
  eyes: number
}

export type ReactionName = keyof Reactions

export interface Post {
  id: string
  title: string
  content: string
  user: string
  date: string
  reactions: Reactions
}

const initialReactions: Reactions = {
  thumbsUp: 0,
  tada: 0,
  heart: 0,
  rocket: 0,
  eyes: 0
}

const postsSlice = createSlice({
  name: 'posts',
  initialState,
  reducers: {
    reactionAdded(
      state,
      action: PayloadAction<{ postId: string; reaction: ReactionName }>
    ) {
      const { postId, reaction } = action.payload
      const existingPost = state.find(post => post.id === postId)
      if (existingPost) {
        existingPost.reactions[reaction]++
      }
    }
  }
})

----------------------------------------

TITLE: Composing Reducer Enhancement Functions
DESCRIPTION: Demonstrates how to compose multiple reducer enhancement functions to add features like undo capability and action filtering.

LANGUAGE: javascript
CODE:
const undoableFilteredSliceA = compose(
  undoReducer,
  filterReducer('ACTION_1', 'ACTION_2'),
  sliceReducerA
)
const rootReducer = combineReducers({
  a: undoableFilteredSliceA,
  b: normalSliceReducerB
})

----------------------------------------

TITLE: Implementing Side Effects Middleware in Redux (RTK Listener Example)
DESCRIPTION: Example implementation of RTK listener middleware that demonstrates handling side effects after action dispatch. The middleware manages listeners, tracks state changes, and executes callbacks based on predicates.

LANGUAGE: typescript
CODE:
const middleware: ListenerMiddleware<S, D, ExtraArgument> =
  api => next => action => {
    if (addListener.match(action)) {
      return startListening(action.payload)
    }

    if (clearAllListeners.match(action)) {
      clearListenerMiddleware()
      return
    }

    if (removeListener.match(action)) {
      return stopListening(action.payload)
    }

    let originalState: S | typeof INTERNAL_NIL_TOKEN = api.getState()

    const getOriginalState = (): S => {
      if (originalState === INTERNAL_NIL_TOKEN) {
        throw new Error(
          `${alm}: getOriginalState can only be called synchronously`
        )
      }

      return originalState as S
    }

    let result: unknown

    try {
      result = next(action)

      if (listenerMap.size > 0) {
        let currentState = api.getState()
        const listenerEntries = Array.from(listenerMap.values())
        for (let entry of listenerEntries) {
          let runListener = false

          try {
            runListener = entry.predicate(action, currentState, originalState)
          } catch (predicateError) {
            runListener = false

            safelyNotifyError(onError, predicateError, {
              raisedBy: 'predicate'
            })
          }

          if (!runListener) {
            continue
          }

          notifyListener(entry, action, api, getOriginalState)
        }
      }
    } finally {
      originalState = INTERNAL_NIL_TOKEN
    }

    return result
  }

----------------------------------------

TITLE: Authentication State Management in Redux
DESCRIPTION: Redux slice implementation for managing user authentication state

LANGUAGE: typescript
CODE:
import { createSlice, PayloadAction } from '@reduxjs/toolkit'

interface AuthState {
  username: string | null
}

const initialState: AuthState = {
  username: null
}

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    userLoggedIn(state, action: PayloadAction<string>) {
      state.username = action.payload
    },
    userLoggedOut(state) {
      state.username = null
    }
  }
})

export const { userLoggedIn, userLoggedOut } = authSlice.actions

export const selectCurrentUsername = (state: RootState) => state.auth.username

export default authSlice.reducer

----------------------------------------

TITLE: Using Mutation Hook in AddPostForm Component
DESCRIPTION: Shows how to use the RTK Query mutation hook useAddNewPostMutation to add a new post in a React component.

LANGUAGE: TSX
CODE:
import React from 'react'
import { useAddNewPostMutation } from '@/features/api/apiSlice'

export const AddPostForm = () => {
  const [addNewPost, { isLoading }] = useAddNewPostMutation()

  const handleSubmit = async (e: React.FormEvent<AddPostFormElements>) => {
    e.preventDefault()
    const { elements } = e.currentTarget
    const title = elements.postTitle.value
    const content = elements.postContent.value

    try {
      await addNewPost({ title, content, user: userId }).unwrap()
      form.reset()
    } catch (err) {
      console.error('Failed to save the post: ', err)
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      {/* form fields */}
      <button disabled={isLoading}>Save Post</button>
    </form>
  )
}

----------------------------------------

TITLE: Implementing Async Middleware Correctly
DESCRIPTION: Correct implementation of async middleware that maintains the original dispatch return value by moving async logic to a separate function.

LANGUAGE: typescript
CODE:
const middleware: Middleware = api => next => action => {
  const response = next(action)

  const afterState = api.getState()
  if (action.type === 'some/action') {
    void loadData(api)
  }

  return response
}

async function loadData(api) {
  const data = await fetchData()
  api.dispatch(dataFetchedAction(data))
}

----------------------------------------

TITLE: Basic Reducer Replacement in Redux
DESCRIPTION: Demonstrates the basic usage of store.replaceReducer to swap out the root reducer with a new combined reducer that includes additional slice reducers.

LANGUAGE: javascript
CODE:
const newRootReducer = combineReducers({
  existingSlice: existingSliceReducer,
  newSlice: newSliceReducer
})

store.replaceReducer(newRootReducer)

----------------------------------------

TITLE: Advanced Redux Middleware Examples
DESCRIPTION: Provides several examples of more complex Redux middleware implementations, including timeout scheduling, RAF scheduling, and promise handling.

LANGUAGE: javascript
CODE:
const timeoutScheduler = store => next => action => {
  if (!action.meta || !action.meta.delay) {
    return next(action)
  }

  const timeoutId = setTimeout(() => next(action), action.meta.delay)

  return function cancel() {
    clearTimeout(timeoutId)
  }
}

const rafScheduler = store => next => {
  const queuedActions = []
  let frame = null

  function loop() {
    frame = null
    try {
      if (queuedActions.length) {
        next(queuedActions.shift())
      }
    } finally {
      maybeRaf()
    }
  }

  function maybeRaf() {
    if (queuedActions.length && !frame) {
      frame = requestAnimationFrame(loop)
    }
  }

  return action => {
    if (!action.meta || !action.meta.raf) {
      return next(action)
    }

    queuedActions.push(action)
    maybeRaf()

    return function cancel() {
      queuedActions = queuedActions.filter(a => a !== action)
    }
  }
}

const vanillaPromise = store => next => action => {
  if (typeof action.then !== 'function') {
    return next(action)
  }

  return Promise.resolve(action).then(store.dispatch)
}

----------------------------------------

TITLE: Applying Redux Middleware to Store
DESCRIPTION: Demonstrates how to apply multiple middleware functions to a Redux store using applyMiddleware.

LANGUAGE: javascript
CODE:
import { createStore, combineReducers, applyMiddleware } from 'redux'

const todoApp = combineReducers(reducers)
const store = createStore(
  todoApp,
  applyMiddleware(logger, crashReporter)
)

----------------------------------------

TITLE: Configuring Injectable Redux Store
DESCRIPTION: Implementation of a configureStore function that creates a Redux store with support for injecting async reducers dynamically.

LANGUAGE: javascript
CODE:
import { createStore } from 'redux'

const staticReducers = {
  users: usersReducer,
  posts: postsReducer
}

export default function configureStore(initialState) {
  const store = createStore(createReducer(), initialState)

  store.asyncReducers = {}

  store.injectReducer = (key, asyncReducer) => {
    store.asyncReducers[key] = asyncReducer
    store.replaceReducer(createReducer(store.asyncReducers))
  }

  return store
}

function createReducer(asyncReducers) {
  return combineReducers({
    ...staticReducers,
    ...asyncReducers
  })
}

----------------------------------------

TITLE: Implementing Undoable Reducer Enhancer in Redux
DESCRIPTION: A reducer enhancer that adds undo/redo functionality to any existing reducer, handling UNDO and REDO actions.

LANGUAGE: javascript
CODE:
function undoable(reducer) {
  const initialState = {
    past: [],
    present: reducer(undefined, {}),
    future: []
  }

  return function (state = initialState, action) {
    const { past, present, future } = state

    switch (action.type) {
      case 'UNDO':
        const previous = past[past.length - 1]
        const newPast = past.slice(0, past.length - 1)
        return {
          past: newPast,
          present: previous,
          future: [present, ...future]
        }
      case 'REDO':
        const next = future[0]
        const newFuture = future.slice(1)
        return {
          past: [...past, present],
          present: next,
          future: newFuture
        }
      default:
        const newPresent = reducer(present, action)
        if (present === newPresent) {
          return state
        }
        return {
          past: [...past, present],
          present: newPresent,
          future: []
        }
    }
  }
}

----------------------------------------

TITLE: Writing Custom Redux Middleware
DESCRIPTION: Examples of writing custom Redux middleware functions.

LANGUAGE: JavaScript
CODE:
const loggerMiddleware = storeAPI => next => action => {
  console.log('dispatching', action)
  let result = next(action)
  console.log('next state', storeAPI.getState())
  return result
}

const delayedMessageMiddleware = storeAPI => next => action => {
  if (action.type === 'todos/todoAdded') {
    setTimeout(() => {
      console.log('Added a new todo: ', action.payload)
    }, 1000)
  }

  return next(action)
}

----------------------------------------

TITLE: Redux Reducer Manager Implementation
DESCRIPTION: Creates a reducer manager object that tracks registered reducers and provides methods to add/remove reducers dynamically while managing state cleanup.

LANGUAGE: javascript
CODE:
export function createReducerManager(initialReducers) {
  const reducers = { ...initialReducers }
  let combinedReducer = combineReducers(reducers)
  let keysToRemove = []

  return {
    getReducerMap: () => reducers,
    reduce: (state, action) => {
      if (keysToRemove.length > 0) {
        state = { ...state }
        for (let key of keysToRemove) {
          delete state[key]
        }
        keysToRemove = []
      }
      return combinedReducer(state, action)
    },
    add: (key, reducer) => {
      if (!key || reducers[key]) {
        return
      }
      reducers[key] = reducer
      combinedReducer = combineReducers(reducers)
    },
    remove: key => {
      if (!key || !reducers[key]) {
        return
      }
      delete reducers[key]
      keysToRemove.push(key)
      combinedReducer = combineReducers(reducers)
    }
  }
}

----------------------------------------

TITLE: Separating Data Handling by Domain in Redux Reducers
DESCRIPTION: Refactoring step where the reducer logic is split into separate functions for different domains (visibility filter and todos), improving separation of concerns.

LANGUAGE: javascript
CODE:
function setVisibilityFilter(visibilityState, action) {
  return action.filter
}

function visibilityReducer(visibilityState = 'SHOW_ALL', action) {
  switch (action.type) {
    case 'SET_VISIBILITY_FILTER':
      return setVisibilityFilter(visibilityState, action)
    default:
      return visibilityState
  }
}

function addTodo(todosState, action) {
  const newTodos = todosState.concat({
    id: action.id,
    text: action.text,
    completed: false
  })

  return newTodos
}

function toggleTodo(todosState, action) {
  const newTodos = updateItemInArray(todosState, action.id, todo => {
    return updateObject(todo, { completed: !todo.completed })
  })

  return newTodos
}

function editTodo(todosState, action) {
  const newTodos = updateItemInArray(todosState, action.id, todo => {
    return updateObject(todo, { text: action.text })
  })

  return newTodos
}

function todosReducer(todosState = [], action) {
  switch (action.type) {
    case 'ADD_TODO':
      return addTodo(todosState, action)
    case 'TOGGLE_TODO':
      return toggleTodo(todosState, action)
    case 'EDIT_TODO':
      return editTodo(todosState, action)
    default:
      return todosState
  }
}

function appReducer(state = initialState, action) {
  return {
    todos: todosReducer(state.todos, action),
    visibilityFilter: visibilityReducer(state.visibilityFilter, action)
  }
}

----------------------------------------

TITLE: Using CreateEntityAdapter for Normalized State
DESCRIPTION: Demonstrates using createEntityAdapter to manage normalized state with built-in CRUD operations and selectors.

LANGUAGE: JavaScript
CODE:
const todosAdapter = createEntityAdapter()

const initialState = todosAdapter.getInitialState({
  status: 'idle'
})

export const { selectAll: selectTodos, selectById: selectTodoById } = 
  todosAdapter.getSelectors(state => state.todos)

----------------------------------------

TITLE: Using a Redux Selector Function
DESCRIPTION: Shows how to create and use a selector function to extract specific data from the Redux store state.

LANGUAGE: javascript
CODE:
const selectCounterValue = state => state.value

const currentValue = selectCounterValue(store.getState())
console.log(currentValue)
// 2

----------------------------------------

TITLE: Generic Higher-Order Reducer Implementation
DESCRIPTION: Demonstrates a more flexible approach using a generic wrapper reducer that can work with any reducer function and identifier.

LANGUAGE: javascript
CODE:
function createFilteredReducer(reducerFunction, reducerPredicate) {
    return (state, action) => {
        const isInitializationCall = state === undefined;
        const shouldRunWrappedReducer = reducerPredicate(action) || isInitializationCall;
        return shouldRunWrappedReducer ? reducerFunction(state, action) : state;
    }
}

----------------------------------------

TITLE: Creating Memoized Selector with createSelector in Redux
DESCRIPTION: Uses createSelector to create a memoized selector function for selecting posts by user ID. This optimizes performance by only recalculating when inputs change.

LANGUAGE: TypeScript
CODE:
export const selectPostsByUser = createSelector(
  [selectAllPosts, (state: RootState, userId: string) => userId],
  (posts, userId) => posts.filter(post => post.user === userId)
)

----------------------------------------

TITLE: Implementing a Basic Redux Reducer Function
DESCRIPTION: Shows the structure of a simple Redux reducer function that handles a counter increment action.

LANGUAGE: javascript
CODE:
const initialState = { value: 0 }

function counterReducer(state = initialState, action) {
  // Check to see if the reducer cares about this action
  if (action.type === 'counter/increment') {
    // If so, make a copy of `state`
    return {
      ...state,
      // and update the copy with the new value
      value: state.value + 1
    }
  }
  // otherwise return the existing state unchanged
  return state
}

----------------------------------------

TITLE: Defining Store Creator Type in Redux
DESCRIPTION: Type definition for Redux store creator function that initializes a new store instance.

LANGUAGE: javascript
CODE:
type StoreCreator = (reducer: Reducer, preloadedState: ?State) => Store

----------------------------------------

TITLE: Adding a Mutation Endpoint for Creating Posts
DESCRIPTION: Extends the API slice to include a mutation endpoint for adding new posts using RTK Query.

LANGUAGE: TypeScript
CODE:
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'
import type { Post, NewPost } from '@/features/posts/postsSlice'

export const apiSlice = createApi({
  reducerPath: 'api',
  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),
  endpoints: builder => ({
    // ... existing query endpoints
    addNewPost: builder.mutation<Post, NewPost>({
      query: initialPost => ({
        url: '/posts',
        method: 'POST',
        body: initialPost
      })
    })
  })
})

export const { useGetPostsQuery, useGetPostQuery, useAddNewPostMutation } = apiSlice

----------------------------------------

TITLE: Immutable State Update in JavaScript
DESCRIPTION: Shows how to update objects and arrays immutably in JavaScript using the spread operator and array methods.

LANGUAGE: javascript
CODE:
const obj = {
  a: {
    // To safely update obj.a.c, we have to copy each piece
    c: 3
  },
  b: 2
}

const obj2 = {
  // copy obj
  ...obj,
  // overwrite a
  a: {
    // copy obj.a
    ...obj.a,
    // overwrite c
    c: 42
  }
}

const arr = ['a', 'b']
// Create a new copy of arr, with "c" appended to the end
const arr2 = arr.concat('c')

// or, we can make a copy of the original array:
const arr3 = arr.slice()
// and mutate the copy:
arr3.push('c')

----------------------------------------

TITLE: Using Redux-Observable for AJAX Requests
DESCRIPTION: An example of using Redux-Observable to create an epic for handling AJAX requests, demonstrating how to use RxJS operators for data fetching.

LANGUAGE: javascript
CODE:
const fetchUserEpic = action$ =>
  action$.pipe(
    filter(fetchUser.match),
    mergeMap(action =>
      ajax
        .getJSON(`https://api.github.com/users/${action.payload}`)
        .pipe(map(response => fetchUserFulfilled(response)))
    )
  )

----------------------------------------

TITLE: Using RTK Query Hook in PostsList Component
DESCRIPTION: Demonstrates how to use the RTK Query generated hook useGetPostsQuery to fetch and display posts in a React component.

LANGUAGE: TSX
CODE:
import React, { useMemo } from 'react'
import { useGetPostsQuery, Post } from '@/features/api/apiSlice'

export const PostsList = () => {
  const {
    data: posts = [],
    isLoading,
    isSuccess,
    isError,
    error
  } = useGetPostsQuery()

  const sortedPosts = useMemo(() => {
    const sortedPosts = posts.slice()
    sortedPosts.sort((a, b) => b.date.localeCompare(a.date))
    return sortedPosts
  }, [posts])

  let content

  if (isLoading) {
    content = <Spinner text="Loading..." />
  } else if (isSuccess) {
    content = sortedPosts.map(post => <PostExcerpt key={post.id} post={post} />)
  } else if (isError) {
    content = <div>{error.toString()}</div>
  }

  return (
    <section className="posts-list">
      <h2>Posts</h2>
      {content}
    </section>
  )
}

----------------------------------------

TITLE: Rendering Multiple Sub-Apps in React
DESCRIPTION: This snippet demonstrates how to render multiple independent sub-apps within a larger React component. Each SubApp is rendered as a separate instance.

LANGUAGE: javascript
CODE:
import React, { Component } from 'react'
import SubApp from './subapp'

class BigApp extends Component {
  render() {
    return (
      <div>
        <SubApp />
        <SubApp />
        <SubApp />
      </div>
    )
  }
}

----------------------------------------

TITLE: Handling Requests for Redux Server Rendering
DESCRIPTION: Function to handle incoming requests, create a Redux store, render the React app to a string, and send the rendered page back to the client.

LANGUAGE: js
CODE:
import { renderToString } from 'react-dom/server'

function handleRender(req, res) {
  // Create a new Redux store instance
  const store = createStore(counterApp)

  // Render the component to a string
  const html = renderToString(
    <Provider store={store}>
      <App />
    </Provider>
  )

  // Grab the initial state from our Redux store
  const preloadedState = store.getState()

  // Send the rendered page back to the client
  res.send(renderFullPage(html, preloadedState))
}

----------------------------------------

TITLE: Streaming Updates for Notifications
DESCRIPTION: Implements streaming updates for notifications using RTK Query's onCacheEntryAdded lifecycle

LANGUAGE: TypeScript
CODE:
getNotifications: builder.query<ServerNotification[], void>({
  query: () => '/notifications',
  async onCacheEntryAdded(arg, lifecycleApi) {
    const ws = new WebSocket('ws://localhost')
    try {
      await lifecycleApi.cacheDataLoaded

      const listener = (event: MessageEvent<string>) => {
        const message: {
          type: 'notifications'
          payload: ServerNotification[]
        } = JSON.parse(event.data)
        switch (message.type) {
          case 'notifications': {
            lifecycleApi.updateCachedData(draft => {
              draft.push(...message.payload)
              draft.sort((a, b) => b.date.localeCompare(a.date))
            })

            lifecycleApi.dispatch(notificationsReceived(message.payload))
            break
          }
          default:
            break
        }
      }

      ws.addEventListener('message', listener)
    } catch {}
    await lifecycleApi.cacheEntryRemoved
    ws.close()
  }
})

----------------------------------------

TITLE: Redux Performance Monitor Enhancer
DESCRIPTION: Store enhancer that monitors and logs reducer processing time for each action.

LANGUAGE: javascript
CODE:
const round = number => Math.round(number * 100) / 100

const monitorReducerEnhancer =
  createStore => (reducer, initialState, enhancer) => {
    const monitoredReducer = (state, action) => {
      const start = performance.now()
      const newState = reducer(state, action)
      const end = performance.now()
      const diff = round(end - start)

      console.log('reducer process time:', diff)

      return newState
    }

    return createStore(monitoredReducer, initialState, enhancer)
  }

export default monitorReducerEnhancer

----------------------------------------

TITLE: Reducing Boilerplate in Redux Reducers
DESCRIPTION: Final refactoring step using a createReducer function to simplify the reducer creation process and eliminate switch statements.

LANGUAGE: javascript
CODE:
function createReducer(initialState, handlers) {
  return function reducer(state = initialState, action) {
    if (handlers.hasOwnProperty(action.type)) {
      return handlers[action.type](state, action)
    } else {
      return state
    }
  }
}

const visibilityReducer = createReducer('SHOW_ALL', {
  SET_VISIBILITY_FILTER: setVisibilityFilter
})

const todosReducer = createReducer([], {
  ADD_TODO: addTodo,
  TOGGLE_TODO: toggleTodo,
  EDIT_TODO: editTodo
})

function appReducer(state = initialState, action) {
  return {
    todos: todosReducer(state.todos, action),
    visibilityFilter: visibilityReducer(state.visibilityFilter, action)
  }
}

----------------------------------------

TITLE: Rendering Full HTML Page with Redux Initial State
DESCRIPTION: Function to generate the full HTML page, including the rendered React app and the initial Redux state embedded as a script.

LANGUAGE: js
CODE:
function renderFullPage(html, preloadedState) {
  return `
    <!doctype html>
    <html>
      <head>
        <title>Redux Universal Example</title>
      </head>
      <body>
        <div id="root">${html}</div>
        <script>
          // WARNING: See the following for security issues around embedding JSON in HTML:
          // https://redux.js.org/usage/server-rendering#security-considerations
          window.__PRELOADED_STATE__ = ${JSON.stringify(preloadedState).replace(
            /</g,
            '\\u003c'
          )}
        </script>
        <script src="/static/bundle.js"></script>
      </body>
    </html>
    `
}

----------------------------------------

TITLE: Handling Async State Fetching for Redux Server Rendering
DESCRIPTION: Enhanced server-side rendering function that fetches initial state asynchronously before rendering.

LANGUAGE: js
CODE:
// Add this to our imports
import { fetchCounter } from './api/counter'
import { renderToString } from 'react-dom/server'

function handleRender(req, res) {
  // Query our mock API asynchronously
  fetchCounter(apiResult => {
    // Read the counter from the request, if provided
    const params = qs.parse(req.query)
    const counter = parseInt(params.counter, 10) || apiResult || 0

    // Compile an initial state
    let preloadedState = { counter }

    // Create a new Redux store instance
    const store = createStore(counterApp, preloadedState)

    // Render the component to a string
    const html = renderToString(
      <Provider store={store}>
        <App />
      </Provider>
    )

    // Grab the initial state from our Redux store
    const finalState = store.getState()

    // Send the rendered page back to the client
    res.send(renderFullPage(html, finalState))
  })
}

----------------------------------------

TITLE: Running Todos with Undo Example using Redux
DESCRIPTION: Steps to run the Todos with Undo example, showcasing how to add Undo/Redo functionality to a Redux app using Redux Undo.

LANGUAGE: sh
CODE:
git clone https://github.com/reduxjs/redux.git

cd redux/examples/todos-with-undo
npm install
npm start

----------------------------------------

TITLE: Setting Up Express Server for Redux Server Rendering
DESCRIPTION: Basic Express server setup for handling server-side rendering with Redux. Includes necessary imports and middleware configuration.

LANGUAGE: js
CODE:
import path from 'path'
import Express from 'express'
import React from 'react'
import { createStore } from 'redux'
import { Provider } from 'react-redux'
import counterApp from './reducers'
import App from './containers/App'

const app = Express()
const port = 3000

// Serve static files
app.use('/static', Express.static('static'))

// This is fired every time the server side receives a request
app.use(handleRender)

// We are going to fill these out in the sections to follow
function handleRender(req, res) {
  /* ... */
}
function renderFullPage(html, preloadedState) {
  /* ... */
}

app.listen(port)

----------------------------------------

TITLE: Legacy Redux Store Setup with Plain Redux
DESCRIPTION: Traditional Redux store setup code using createStore and manual middleware/enhancer configuration.

LANGUAGE: javascript
CODE:
import { createStore, applyMiddleware, combineReducers, compose } from 'redux'
import { thunk } from 'redux-thunk'

import postsReducer from '../reducers/postsReducer'
import usersReducer from '../reducers/usersReducer'

const rootReducer = combineReducers({
  posts: postsReducer,
  users: usersReducer
})

const middlewareEnhancer = applyMiddleware(thunk)

const composeWithDevTools =
  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose

const composedEnhancers = composeWithDevTools(middlewareEnhancer)

const store = createStore(rootReducer, composedEnhancers)

----------------------------------------

TITLE: Running Shopping Cart Example with Redux
DESCRIPTION: Steps to run the Shopping Cart example, demonstrating important Redux patterns for larger apps, including normalized entity storage and reducer composition.

LANGUAGE: sh
CODE:
git clone https://github.com/reduxjs/redux.git

cd redux/examples/shopping-cart
npm install
npm start

----------------------------------------

TITLE: Client-Side Redux Setup for Server Rendered App
DESCRIPTION: Client-side script to initialize Redux store with server-provided state and render the React app using hydration.

LANGUAGE: js
CODE:
import React from 'react'
import { hydrate } from 'react-dom'
import { createStore } from 'redux'
import { Provider } from 'react-redux'
import App from './containers/App'
import counterApp from './reducers'

// Create Redux store with state injected by the server
const store = createStore(counterApp, window.__PRELOADED_STATE__)

// Allow the passed state to be garbage-collected
delete window.__PRELOADED_STATE__

hydrate(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
)

----------------------------------------

TITLE: Incorrect Redux Reducer Implementation with State Mutation
DESCRIPTION: Example showing incorrect reducer implementation that mutates state directly, which violates Redux's principles of immutability.

LANGUAGE: javascript
CODE:
function todos(state = [], action) {
  switch (action.type) {
    case 'ADD_TODO':
      // Wrong! This mutates state
      state.push({
        text: action.text,
        completed: false
      })
      return state
    case 'COMPLETE_TODO':
      // Wrong! This mutates state[action.index].
      state[action.index].completed = true
      return state
    default:
      return state
  }
}

----------------------------------------

TITLE: Implementing Redux Reducers in JavaScript
DESCRIPTION: This snippet demonstrates how to implement Redux reducers for managing visibility filters and todos. It includes the creation of a store using combineReducers.

LANGUAGE: javascript
CODE:
function visibilityFilter(state = 'SHOW_ALL', action) {
  switch (action.type) {
    case 'SET_VISIBILITY_FILTER':
      return action.filter
    default:
      return state
  }
}

function todos(state = [], action) {
  switch (action.type) {
    case 'ADD_TODO':
      return [
        ...state,
        {
          text: action.text,
          completed: false
        }
      ]
    case 'COMPLETE_TODO':
      return state.map((todo, index) => {
        if (index === action.index) {
          return Object.assign({}, todo, {
            completed: true
          })
        }
        return todo
      })
    default:
      return state
  }
}

import { combineReducers, createStore } from 'redux'
const reducer = combineReducers({ visibilityFilter, todos })
const store = createStore(reducer)

----------------------------------------

TITLE: Handling Request Parameters for Initial Redux State
DESCRIPTION: Enhanced server-side rendering function that processes request parameters to set initial Redux state.

LANGUAGE: js
CODE:
import qs from 'qs' // Add this at the top of the file
import { renderToString } from 'react-dom/server'

function handleRender(req, res) {
  // Read the counter from the request, if provided
  const params = qs.parse(req.query)
  const counter = parseInt(params.counter, 10) || 0

  // Compile an initial state
  let preloadedState = { counter }

  // Create a new Redux store instance
  const store = createStore(counterApp, preloadedState)

  // Render the component to a string
  const html = renderToString(
    <Provider store={store}>
      <App />
    </Provider>
  )

  // Grab the initial state from our Redux store
  const finalState = store.getState()

  // Send the rendered page back to the client
  res.send(renderFullPage(html, finalState))
}

----------------------------------------

TITLE: Using Typed Redux Hooks in React Components
DESCRIPTION: Demonstrates how to use typed Redux hooks in a React component. Shows proper usage of useAppSelector and useAppDispatch with TypeScript type inference.

LANGUAGE: tsx
CODE:
import React from 'react'

import { useAppSelector, useAppDispatch } from 'app/hooks'

import { decrement, increment } from './counterSlice'

export function Counter() {
  const count = useAppSelector(state => state.counter.value)
  const dispatch = useAppDispatch()

  // omit rendering logic
}

----------------------------------------

TITLE: Running Async Example with Redux
DESCRIPTION: Steps to run the Async example, demonstrating asynchronous API calls, data fetching, loading indicators, and caching with Redux Thunk middleware.

LANGUAGE: sh
CODE:
git clone https://github.com/reduxjs/redux.git

cd redux/examples/async
npm install
npm start

----------------------------------------

TITLE: Using Redux-ORM Sessions for Updating Normalized Data
DESCRIPTION: This snippet shows how to use Redux-ORM sessions to update normalized data within a single case reducer. It demonstrates creating a new comment and accessing related models through the session interface.

LANGUAGE: javascript
CODE:
import { orm } from './models'

// Assume this case reducer is being used in our "entities" slice reducer,
// and we do not have reducers defined on our Redux-ORM Model subclasses
function addComment(entitiesState, action) {
  // Start an immutable session
  const session = orm.session(entitiesState)

  session.Comment.create(action.payload)

  // The internal state reference has now changed
  return session.state
}

const session = orm.session(store.getState().entities)
const comment = session.Comment.first() // Comment instance
const { post } = comment // Post instance
post.comments.filter(c => c.text === 'This is a comment').count() // 1

----------------------------------------

TITLE: Simplifying Immutable Updates with Redux Toolkit (JavaScript)
DESCRIPTION: This example demonstrates how to use Redux Toolkit's createReducer function to simplify immutable updates. It uses Immer internally, allowing for simpler syntax that appears to mutate state but actually applies updates immutably.

LANGUAGE: javascript
CODE:
import { createReducer } from '@reduxjs/toolkit'

const initialState = {
  first: {
    second: {
      id1: { fourth: 'a' },
      id2: { fourth: 'b' }
    }
  }
}

const reducer = createReducer(initialState, {
  UPDATE_ITEM: (state, action) => {
    state.first.second[action.someId].fourth = action.someValue
  }
})

----------------------------------------

TITLE: Running Universal Example with Redux
DESCRIPTION: Instructions for running the Universal example, which demonstrates server rendering with Redux and React, showing how to prepare and pass initial store state.

LANGUAGE: sh
CODE:
git clone https://github.com/reduxjs/redux.git

cd redux/examples/universal
npm install
npm start

----------------------------------------

TITLE: Using Redux-ORM for Normalized Data Management
DESCRIPTION: This code snippet demonstrates how to use Redux-ORM to manage normalized data in Redux. It includes model definitions, reducer logic, and examples of creating and relating Post and Comment instances.

LANGUAGE: javascript
CODE:
// models.js
import { Model, fk, attr, ORM } from 'redux-orm'

export class Post extends Model {
  static get fields() {
    return {
      id: attr(),
      name: attr()
    }
  }

  static reducer(action, Post, session) {
    switch (action.type) {
      case 'CREATE_POST': {
        Post.create(action.payload)
        break
      }
    }
  }
}
Post.modelName = 'Post'

export class Comment extends Model {
  static get fields() {
    return {
      id: attr(),
      text: attr(),
      // Define a foreign key relation - one Post can have many Comments
      postId: fk({
        to: 'Post', // must be the same as Post.modelName
        as: 'post', // name for accessor (comment.post)
        relatedName: 'comments' // name for backward accessor (post.comments)
      })
    }
  }

  static reducer(action, Comment, session) {
    switch (action.type) {
      case 'ADD_COMMENT': {
        Comment.create(action.payload)
        break
      }
    }
  }
}
Comment.modelName = 'Comment'

// Create an ORM instance and hook up the Post and Comment models
export const orm = new ORM()
orm.register(Post, Comment)

// main.js
import { createStore, combineReducers } from 'redux'
import { createReducer } from 'redux-orm'
import { orm } from './models'

const rootReducer = combineReducers({
  // Insert the auto-generated Redux-ORM reducer.  This will
  // initialize our model "tables", and hook up the reducer
  // logic we defined on each Model subclass
  entities: createReducer(orm)
})

// Dispatch an action to create a Post instance
store.dispatch({
  type: 'CREATE_POST',
  payload: {
    id: 1,
    name: 'Test Post Please Ignore'
  }
})

// Dispatch an action to create a Comment instance as a child of that Post
store.dispatch({
  type: 'ADD_COMMENT',
  payload: {
    id: 123,
    text: 'This is a comment',
    postId: 1
  }
})

----------------------------------------

TITLE: Dispatching Redux Actions in JavaScript
DESCRIPTION: Sets up event listeners for UI elements to dispatch increment and decrement actions to the Redux store, including conditional and asynchronous dispatches.

LANGUAGE: javascript
CODE:
document.getElementById('increment').addEventListener('click', function () {
  store.dispatch({ type: 'counter/incremented' })
})

document.getElementById('decrement').addEventListener('click', function () {
  store.dispatch({ type: 'counter/decremented' })
})

document.getElementById('incrementIfOdd').addEventListener('click', function () {
  if (store.getState().value % 2 !== 0) {
    store.dispatch({ type: 'counter/incremented' })
  }
})

document.getElementById('incrementAsync').addEventListener('click', function () {
  setTimeout(function () {
    store.dispatch({ type: 'counter/incremented' })
  }, 1000)
})

----------------------------------------

TITLE: Defining Multiple Redux Reducers in JavaScript
DESCRIPTION: This snippet shows two simple reducers that will be used to demonstrate the behavior of combineReducers with different initial state scenarios.

LANGUAGE: javascript
CODE:
function a(state = 'lol', action) {
  return state
}

function b(state = 'wat', action) {
  return state
}

----------------------------------------

TITLE: Slice Reducer Composition for Adding Comments in Redux
DESCRIPTION: This code snippet showcases how to implement slice reducer composition to add comments to posts in Redux. It includes action creators and reducers for both posts and comments, demonstrating how to update nested data structures.

LANGUAGE: javascript
CODE:
// actions.js
function addComment(postId, commentText) {
  // Generate a unique ID for this comment
  const commentId = generateId('comment')

  return {
    type: 'ADD_COMMENT',
    payload: {
      postId,
      commentId,
      commentText
    }
  }
}

// reducers/posts.js
function addComment(state, action) {
  const { payload } = action
  const { postId, commentId } = payload

  // Look up the correct post, to simplify the rest of the code
  const post = state[postId]

  return {
    ...state,
    // Update our Post object with a new "comments" array
    [postId]: {
      ...post,
      comments: post.comments.concat(commentId)
    }
  }
}

function postsById(state = {}, action) {
  switch (action.type) {
    case 'ADD_COMMENT':
      return addComment(state, action)
    default:
      return state
  }
}

function allPosts(state = [], action) {
  // omitted - no work to be done for this example
}

const postsReducer = combineReducers({
  byId: postsById,
  allIds: allPosts
})

// reducers/comments.js
function addCommentEntry(state, action) {
  const { payload } = action
  const { commentId, commentText } = payload

  // Create our new Comment object
  const comment = { id: commentId, text: commentText }

  // Insert the new Comment object into the updated lookup table
  return {
    ...state,
    [commentId]: comment
  }
}

function commentsById(state = {}, action) {
  switch (action.type) {
    case 'ADD_COMMENT':
      return addCommentEntry(state, action)
    default:
      return state
  }
}

function addCommentId(state, action) {
  const { payload } = action
  const { commentId } = payload
  // Just append the new Comment's ID to the list of all IDs
  return state.concat(commentId)
}

function allComments(state = [], action) {
  switch (action.type) {
    case 'ADD_COMMENT':
      return addCommentId(state, action)
    default:
      return state
  }
}

const commentsReducer = combineReducers({
  byId: commentsById,
  allIds: allComments
})

----------------------------------------

TITLE: Defining RTK Query API Slice with Cache Tags
DESCRIPTION: Creates an API slice using createApi with endpoints for posts, including cache tag invalidation

LANGUAGE: TypeScript
CODE:
export const apiSlice = createApi({
  reducerPath: 'api',
  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),
  tagTypes: ['Post'],
  endpoints: builder => ({
    getPosts: builder.query<Post[], void>({
      query: () => '/posts',
      providesTags: (result = [], error, arg) => [
        'Post',
        ...result.map(({ id }) => ({ type: 'Post', id }) as const)
      ]
    }),
    getPost: builder.query<Post, string>({
      query: postId => `/posts/${postId}`,
      providesTags: (result, error, arg) => [{ type: 'Post', id: arg }]
    }),
    addNewPost: builder.mutation<Post, NewPost>({
      query: initialPost => ({
        url: '/posts',
        method: 'POST',
        body: initialPost
      }),
      invalidatesTags: ['Post']
    }),
    editPost: builder.mutation<Post, PostUpdate>({
      query: post => ({
        url: `posts/${post.id}`,
        method: 'PATCH',
        body: post
      }),
      invalidatesTags: (result, error, arg) => [{ type: 'Post', id: arg.id }]
    })
  })
})

----------------------------------------

TITLE: Creating Composable Redux Reducer Transformers
DESCRIPTION: Example showing how to compose reducer transformers using redux-xforms

LANGUAGE: javascript
CODE:
const createByFilter = (predicate, mapActionToKey) =>
  compose(
    withInitialState({}), // inject initial state as {}
    withFilter(predicate), // let through if action has filterName
    updateSlice(mapActionToKey), // update a single key in the state
    isolateSlice(mapActionToKey) // run the reducer on a single state slice
  )

----------------------------------------

TITLE: Modeling Many-to-Many Relationships in Normalized Redux State
DESCRIPTION: Demonstration of how to represent many-to-many relationships in a normalized Redux state using a join table. This example shows the relationship between authors and books.

LANGUAGE: javascript
CODE:
{
    entities: {
        authors : { byId : {}, allIds : [] },
        books : { byId : {}, allIds : [] },
        authorBook : {
            byId : {
                1 : {
                    id : 1,
                    authorId : 5,
                    bookId : 22
                },
                2 : {
                    id : 2,
                    authorId : 5,
                    bookId : 15,
                },
                3 : {
                    id : 3,
                    authorId : 42,
                    bookId : 12
                }
            },
            allIds : [1, 2, 3]

        }
    }
}

----------------------------------------

TITLE: Project Setup Commands
DESCRIPTION: Shell commands for creating a new Redux Toolkit project using templates.

LANGUAGE: Shell
CODE:
npx degit reduxjs/redux-templates/packages/rtk-app-structure-example my-app

npx degit reduxjs/redux-templates/packages/vite-template-redux my-app

----------------------------------------

TITLE: Typical Redux State Shape Structure in JavaScript
DESCRIPTION: This snippet shows a general structure for organizing Redux state, separating domain data, app state, and UI state.

LANGUAGE: javascript
CODE:
{
    domainData1 : {},
    domainData2 : {},
    appState1 : {},
    appState2 : {},
    ui : {
        uiState1 : {},
        uiState2 : {},
    }
}

----------------------------------------

TITLE: Updating an Item in an Array Immutably (JavaScript)
DESCRIPTION: This function shows how to update a single item in an array immutably using Array.map(). It creates a new array with the updated item at the specified index.

LANGUAGE: javascript
CODE:
function updateObjectInArray(array, action) {
  return array.map((item, index) => {
    if (index !== action.index) {
      // This isn't the item we care about - keep it as-is
      return item
    }

    // Otherwise, this is the one we want - return an updated value
    return {
      ...item,
      ...action.item
    }
  })
}

----------------------------------------

TITLE: Action Creator Generation Utility
DESCRIPTION: Utility function to generate action creators automatically, reducing repetitive code. Demonstrates a more scalable approach to action creator definition.

LANGUAGE: javascript
CODE:
function makeActionCreator(type, ...argNames) {
  return function (...args) {
    const action = { type }
    argNames.forEach((arg, index) => {
      action[argNames[index]] = args[index]
    })
    return action
  }
}

----------------------------------------

TITLE: Defining Reducer Type in Redux
DESCRIPTION: Type definition for Redux reducers that accept state and action parameters and return a new state.

LANGUAGE: javascript
CODE:
type Reducer<S, A> = (state: S, action: A) => S

----------------------------------------

TITLE: Modern React-Redux Component with Hooks
DESCRIPTION: Modernized React-Redux component using the useSelector and useDispatch hooks.

LANGUAGE: javascript
CODE:
import { useState } from 'react'
import { useSelector, useDispatch } from 'react-redux'
import {
  todoAdded,
  todoToggled,
  selectTodoById,
  selectActiveTodoId
} from './todosSlice'

export function TodoListItem({ todoId }) {
  const dispatch = useDispatch()

  const activeTodoId = useSelector(selectActiveTodoId)
  const todo = useSelector(state => selectTodoById(state, todoId))

  const handleToggleClick = () => {
    dispatch(todoToggled(todoId))
  }

  const handleDeleteClick = () => {
    dispatch(todoDeleted(todoId))
  }

  // omit rendering logic
}

----------------------------------------

TITLE: Basic Thunk Dispatch Example
DESCRIPTION: Shows how to create and dispatch a basic thunk function that can access dispatch and getState.

LANGUAGE: javascript
CODE:
const thunkFunction = (dispatch, getState) => {
  // logic here that can dispatch actions or read state
}

store.dispatch(thunkFunction)

----------------------------------------

TITLE: Defining Store Type in Redux
DESCRIPTION: Type definition for Redux store interface including core methods for state management.

LANGUAGE: javascript
CODE:
type Store = {
  dispatch: Dispatch
  getState: () => State
  subscribe: (listener: () => void) => () => void
  replaceReducer: (reducer: Reducer) => void
}

----------------------------------------

TITLE: Legacy Redux Action and Reducer Code
DESCRIPTION: Traditional Redux code with separate action types, action creators and switch-case reducers.

LANGUAGE: javascript
CODE:
export const ADD_TODO = 'ADD_TODO'
export const TOGGLE_TODO = 'TOGGLE_TODO'

export const addTodo = (id, text) => ({
  type: ADD_TODO,
  text,
  id
})

export const toggleTodo = id => ({
  type: TOGGLE_TODO,
  id
})

LANGUAGE: javascript
CODE:
const initialState = []

export default function todosReducer(state = initialState, action) {
  switch (action.type) {
    case ADD_TODO: {
      return state.concat({
        id: action.id,
        text: action.text,
        completed: false
      })
    }
    case TOGGLE_TODO: {
      return state.map(todo => {
        if (todo.id !== action.id) {
          return todo
        }

        return {
          ...todo,
          completed: !todo.completed
        }
      })
    }
    default:
      return state
  }
}

----------------------------------------

TITLE: Installing Redux Core
DESCRIPTION: Commands for installing the Redux core library using NPM or Yarn.

LANGUAGE: bash
CODE:
# NPM
npm install redux

# Yarn
yarn add redux

----------------------------------------

TITLE: Redux Middleware Implementation with Currying
DESCRIPTION: Shows the final form of Redux middleware using arrow functions and currying for a cleaner syntax.

LANGUAGE: javascript
CODE:
const logger = store => next => action => {
  console.log('dispatching', action)
  let result = next(action)
  console.log('next state', store.getState())
  return result
}

const crashReporter = store => next => action => {
  try {
    return next(action)
  } catch (err) {
    console.error('Caught an exception!', err)
    Raven.captureException(err, {
      extra: {
        action,
        state: store.getState()
      }
    })
    throw err
  }
}

----------------------------------------

TITLE: Initializing Redux State and Reducer in JavaScript
DESCRIPTION: Defines the initial state and a reducer function for a counter application. The reducer handles 'increment' and 'decrement' actions to update the counter value.

LANGUAGE: javascript
CODE:
const initialState = {
  value: 0
}

function counterReducer(state = initialState, action) {
  switch (action.type) {
    case 'counter/incremented':
      return { ...state, value: state.value + 1 }
    case 'counter/decremented':
      return { ...state, value: state.value - 1 }
    default:
      return state
  }
}

----------------------------------------

TITLE: Creating Undo/Redo Buttons Component with Redux
DESCRIPTION: React component for undo/redo buttons, connected to Redux state to enable/disable based on undo/redo availability.

LANGUAGE: javascript
CODE:
import React from 'react'
import { ActionCreators as UndoActionCreators } from 'redux-undo'
import { connect } from 'react-redux'

let UndoRedo = ({ canUndo, canRedo, onUndo, onRedo }) => (
  <p>
    <button onClick={onUndo} disabled={!canUndo}>
      Undo
    </button>
    <button onClick={onRedo} disabled={!canRedo}>
      Redo
    </button>
  </p>
)

const mapStateToProps = state => {
  return {
    canUndo: state.todos.past.length > 0,
    canRedo: state.todos.future.length > 0
  }
}

const mapDispatchToProps = dispatch => {
  return {
    onUndo: () => dispatch(UndoActionCreators.undo()),
    onRedo: () => dispatch(UndoActionCreators.redo())
  }
}

UndoRedo = connect(mapStateToProps, mapDispatchToProps)(UndoRedo)

export default UndoRedo

----------------------------------------

TITLE: Migrating createReducer/createSlice Object Syntax to Builder Pattern
DESCRIPTION: Example showing how to migrate from the deprecated object syntax to the recommended builder callback pattern for createReducer and createSlice.extraReducers

LANGUAGE: typescript
CODE:
// Old syntax
const todoAdded = createAction('todos/todoAdded')

createReducer(initialState, {
  [todoAdded]: (state, action) => {}
})

createSlice({
  name,
  initialState,
  reducers: {
    /* case reducers here */
  },
  extraReducers: {
    [todoAdded]: (state, action) => {}
  }
})

LANGUAGE: typescript
CODE:
// New syntax
createReducer(initialState, builder => {
  builder.addCase(todoAdded, (state, action) => {})
})

createSlice({
  name,
  initialState,
  reducers: {
    /* case reducers here */
  },
  extraReducers: builder => {
    builder.addCase(todoAdded, (state, action) => {})
  }
})

----------------------------------------

TITLE: Defining and Using a Redux Selector Function
DESCRIPTION: This code demonstrates how to create and use a selector function to extract specific data from the Redux store state.

LANGUAGE: js
CODE:
const selectCounterValue = state => state.value

const currentValue = selectCounterValue(store.getState())
console.log(currentValue)
// 2

----------------------------------------

TITLE: Reducer Generation Utility
DESCRIPTION: Utility function to create reducers from an object mapping of action types to handlers. Provides a more declarative way to define reducers.

LANGUAGE: javascript
CODE:
function createReducer(initialState, handlers) {
  return function reducer(state = initialState, action) {
    if (handlers.hasOwnProperty(action.type)) {
      return handlers[action.type](state, action)
    } else {
      return state
    }
  }
}

----------------------------------------

TITLE: Implementing Logging and Crash Reporting Middleware
DESCRIPTION: Demonstrates how to create separate middleware functions for logging and crash reporting.

LANGUAGE: javascript
CODE:
function patchStoreToAddLogging(store) {
  const next = store.dispatch
  store.dispatch = function dispatchAndLog(action) {
    console.log('dispatching', action)
    let result = next(action)
    console.log('next state', store.getState())
    return result
  }
}

function patchStoreToAddCrashReporting(store) {
  const next = store.dispatch
  store.dispatch = function dispatchAndReportErrors(action) {
    try {
      return next(action)
    } catch (err) {
      console.error('Caught an exception!', err)
      Raven.captureException(err, {
        extra: {
          action,
          state: store.getState()
        }
      })
      throw err
    }
  }
}

----------------------------------------

TITLE: Creating a Basic Redux Store
DESCRIPTION: Creates a basic Redux store using createStore and a root reducer.

LANGUAGE: JavaScript
CODE:
import { createStore } from 'redux'
import rootReducer from './reducer'

const store = createStore(rootReducer)

export default store

----------------------------------------

TITLE: Custom API Middleware Implementation
DESCRIPTION: Implementation of custom middleware for handling API calls in a standardized way. Shows how to abstract common API calling patterns.

LANGUAGE: javascript
CODE:
function callAPIMiddleware({ dispatch, getState }) {
  return next => action => {
    const { types, callAPI, shouldCallAPI = () => true, payload = {} } = action

    if (!types) {
      return next(action)
    }

    if (
      !Array.isArray(types) ||
      types.length !== 3 ||
      !types.every(type => typeof type === 'string')
    ) {
      throw new Error('Expected an array of three string types.')
    }

    if (typeof callAPI !== 'function') {
      throw new Error('Expected callAPI to be a function.')
    }

    if (!shouldCallAPI(getState())) {
      return
    }

    const [requestType, successType, failureType] = types

    dispatch(
      Object.assign({}, payload, {
        type: requestType
      })
    )

    return callAPI().then(
      response =>
        dispatch(
          Object.assign({}, payload, {
            response,
            type: successType
          })
        ),
      error =>
        dispatch(
          Object.assign({}, payload, {
            error,
            type: failureType
          })
        )
    )
  }
}

----------------------------------------

TITLE: Example of Basic Redux State Shape for a Todo App in JavaScript
DESCRIPTION: This snippet illustrates a typical Redux state structure for a basic Todo application, showing how to organize domain data and app state.

LANGUAGE: javascript
CODE:
{
  visibilityFilter: 'SHOW_ALL',
  todos: [
    {
      text: 'Consider using Redux',
      completed: true,
    },
    {
      text: 'Keep all state in a single tree',
      completed: false
    }
  ]
}

----------------------------------------

TITLE: Inserting and Removing Items in Arrays Immutably (JavaScript)
DESCRIPTION: These functions demonstrate how to insert and remove items from an array immutably in Redux. They use the spread operator and array slicing to create new arrays with the desired changes.

LANGUAGE: javascript
CODE:
function insertItem(array, action) {
  return [
    ...array.slice(0, action.index),
    action.item,
    ...array.slice(action.index)
  ]
}

function removeItem(array, action) {
  return [...array.slice(0, action.index), ...array.slice(action.index + 1)]
}

----------------------------------------

TITLE: Action Creator with Thunk Middleware
DESCRIPTION: Enhanced action creator using redux-thunk middleware for conditional dispatching. Shows how to add business logic to action creation.

LANGUAGE: javascript
CODE:
function addTodoWithoutCheck(text) {
  return {
    type: 'ADD_TODO',
    text
  }
}

export function addTodo(text) {
  return function (dispatch, getState) {
    if (getState().todos.length === 3) {
      return
    }
    dispatch(addTodoWithoutCheck(text))
  }
}

----------------------------------------

TITLE: Implementing a Simple Redux Store
DESCRIPTION: A miniature example of a working Redux store implementation.

LANGUAGE: JavaScript
CODE:
function createStore(reducer, preloadedState) {
  let state = preloadedState
  const listeners = []

  function getState() {
    return state
  }

  function subscribe(listener) {
    listeners.push(listener)
    return function unsubscribe() {
      const index = listeners.indexOf(listener)
      listeners.splice(index, 1)
    }
  }

  function dispatch(action) {
    state = reducer(state, action)
    listeners.forEach(listener => listener())
  }

  dispatch({ type: '@@redux/INIT' })

  return { dispatch, subscribe, getState }
}

----------------------------------------

TITLE: Exporting Store Types for TypeScript
DESCRIPTION: Exports TypeScript types for the Redux store, dispatch function, and root state to be used throughout the app.

LANGUAGE: TypeScript
CODE:
export const store = configureStore({
  reducer: {
    counter: counterReducer
  }
})

export type AppStore = typeof store
export type AppDispatch = typeof store.dispatch
export type RootState = ReturnType<typeof store.getState>

----------------------------------------

TITLE: Basic Redux Action Objects
DESCRIPTION: Examples of basic Redux action objects that describe mutations in the application state. Actions are plain objects with a type property and optional payload data.

LANGUAGE: javascript
CODE:
{ type: 'ADD_TODO', text: 'Use Redux' }
{ type: 'REMOVE_TODO', id: 42 }
{ type: 'LOAD_ARTICLE', response: { ... } }

----------------------------------------

TITLE: Installing Redux Core Package
DESCRIPTION: Commands for installing the Redux core package by itself using NPM or Yarn package managers.

LANGUAGE: bash
CODE:
# NPM
npm install redux

# Yarn
yarn add redux

----------------------------------------

TITLE: Structuring Normalized Data with Entities in JavaScript
DESCRIPTION: Example of organizing normalized data in Redux state, using an 'entities' key to group relational data tables. This structure also includes non-relational and UI-specific data.

LANGUAGE: javascript
CODE:
{
    simpleDomainData1: {....},
    simpleDomainData2: {....},
    entities : {
        entityType1 : {....},
        entityType2 : {....}
    },
    ui : {
        uiSection1 : {....},
        uiSection2 : {....}
    }
}

----------------------------------------

TITLE: Displaying Posts List with useSelector
DESCRIPTION: Creates a React component to display the list of posts by selecting data from the Redux store using useSelector.

LANGUAGE: TypeScript
CODE:
import { useAppSelector } from '@/app/hooks'

export const PostsList = () => {
  const posts = useAppSelector(state => state.posts)

  const renderedPosts = posts.map(post => (
    <article className="post-excerpt" key={post.id}>
      <h3>{post.title}</h3>
      <p className="post-content">{post.content.substring(0, 100)}</p>
    </article>
  ))

  return (
    <section className="posts-list">
      <h2>Posts</h2>
      {renderedPosts}
    </section>
  )
}

----------------------------------------

TITLE: Dispatching Setter-Style Actions
DESCRIPTION: Example of dispatching multiple setter-style actions to update state in a restaurant ordering system.

LANGUAGE: javascript
CODE:
{
    type: "orders/setPizzasOrdered",
    payload: {
        amount: getState().orders.pizza + 1,
    }
}

{
    type: "orders/setCokesOrdered",
    payload: {
        amount: getState().orders.coke + 1,
    }
}

----------------------------------------

TITLE: Creating New Redux Applications
DESCRIPTION: Commands for creating new React applications with Redux using official templates for Vite and Next.js.

LANGUAGE: bash
CODE:
# Vite with our Redux+TS template
# (using the `degit` tool to clone and extract the template)
npx degit reduxjs/redux-templates/packages/vite-template-redux my-app

# Next.js using the `with-redux` template
npx create-next-app --example with-redux my-app

----------------------------------------

TITLE: Async Request Status Handling
DESCRIPTION: Demonstrates handling async request status using an enum state value and loading actions.

LANGUAGE: javascript
CODE:
case 'todos/todosLoading': {
  return {
    ...state,
    status: 'loading'
  }
}
case 'todos/todosLoaded': {
  return {
    ...state,
    status: 'idle',
    entities: action.payload
  }
}

----------------------------------------

TITLE: Dispatching an Event-Style Action
DESCRIPTION: Example of dispatching an action that models an event in a restaurant ordering system.

LANGUAGE: javascript
CODE:
{ type: "food/orderAdded",  payload: {pizza: 1, coke: 1} }

----------------------------------------

TITLE: Modern Redux Logic with createSlice
DESCRIPTION: Simplified Redux logic using Redux Toolkit's createSlice which combines actions and reducers with Immer immutable updates.

LANGUAGE: javascript
CODE:
import { createSlice } from '@reduxjs/toolkit'

const initialState = []

const todosSlice = createSlice({
  name: 'todos',
  initialState,
  reducers: {
    todoAdded(state, action) {
      const { id, text } = action.payload
      state.todos.push({
        id,
        text,
        completed: false
      })
    },
    todoToggled(state, action) {
      const matchingTodo = state.todos.find(todo => todo.id === action.payload)
      if (matchingTodo) {
        matchingTodo.completed = !matchingTodo.completed
      }
    }
  }
})

export const { todoAdded, todoToggled } = todosSlice.actions
export default todosSlice.reducer

----------------------------------------

TITLE: Basic combineReducers Usage with Object Shorthand in Redux
DESCRIPTION: Demonstrates how object literal shorthand syntax with combineReducers defines the state shape. Shows default and named reducer exports being combined into a root reducer.

LANGUAGE: javascript
CODE:
// reducers.js
export default theDefaultReducer = (state = 0, action) => state

export const firstNamedReducer = (state = 1, action) => state

export const secondNamedReducer = (state = 2, action) => state

// rootReducer.js
import { combineReducers, createStore } from 'redux'

import theDefaultReducer, {
  firstNamedReducer,
  secondNamedReducer
} from './reducers'

// Use object literal shorthand syntax to define the object shape
const rootReducer = combineReducers({
  theDefaultReducer,
  firstNamedReducer,
  secondNamedReducer
})

const store = createStore(rootReducer)
console.log(store.getState())
// {theDefaultReducer : 0, firstNamedReducer : 1, secondNamedReducer : 2}

----------------------------------------

TITLE: Creating a Finite State Reducer for User Fetching
DESCRIPTION: Example of a reducer that handles user fetching based on the current state and action, using a state machine approach.

LANGUAGE: javascript
CODE:
import {
  FETCH_USER,
  // ...
} from './actions'

const IDLE_STATUS = 'idle';
const LOADING_STATUS = 'loading';
const SUCCESS_STATUS = 'success';
const FAILURE_STATUS = 'failure';

const fetchIdleUserReducer = (state, action) => {
  // state.status is "idle"
  switch (action.type) {
    case FETCH_USER:
      return {
        ...state,
        status: LOADING_STATUS
      }
    }
    default:
      return state;
  }
}

// ... other reducers

const fetchUserReducer = (state, action) => {
  switch (state.status) {
    case IDLE_STATUS:
      return fetchIdleUserReducer(state, action);
    case LOADING_STATUS:
      return fetchLoadingUserReducer(state, action);
    case SUCCESS_STATUS:
      return fetchSuccessUserReducer(state, action);
    case FAILURE_STATUS:
      return fetchFailureUserReducer(state, action);
    default:
      // this should never be reached
      return state;
  }
}

----------------------------------------

TITLE: Extracting Case Reducers in Redux
DESCRIPTION: Further refactoring step where each specific case in the switch statement is extracted into its own function for better organization and readability.

LANGUAGE: javascript
CODE:
function setVisibilityFilter(state, action) {
  return updateObject(state, { visibilityFilter: action.filter })
}

function addTodo(state, action) {
  const newTodos = state.todos.concat({
    id: action.id,
    text: action.text,
    completed: false
  })

  return updateObject(state, { todos: newTodos })
}

function toggleTodo(state, action) {
  const newTodos = updateItemInArray(state.todos, action.id, todo => {
    return updateObject(todo, { completed: !todo.completed })
  })

  return updateObject(state, { todos: newTodos })
}

function editTodo(state, action) {
  const newTodos = updateItemInArray(state.todos, action.id, todo => {
    return updateObject(todo, { text: action.text })
  })

  return updateObject(state, { todos: newTodos })
}

function appReducer(state = initialState, action) {
  switch (action.type) {
    case 'SET_VISIBILITY_FILTER':
      return setVisibilityFilter(state, action)
    case 'ADD_TODO':
      return addTodo(state, action)
    case 'TOGGLE_TODO':
      return toggleTodo(state, action)
    case 'EDIT_TODO':
      return editTodo(state, action)
    default:
      return state
  }
}

----------------------------------------

TITLE: Merging Normalized Data with Lodash in Redux Reducer
DESCRIPTION: This snippet demonstrates how to use Lodash's merge function to update normalized comment data in a Redux reducer. It handles actions with partial items and merges them into the existing state.

LANGUAGE: javascript
CODE:
import merge from 'lodash/merge'

function commentsById(state = {}, action) {
  switch (action.type) {
    default: {
      if (action.entities && action.entities.comments) {
        return merge({}, state, action.entities.comments.byId)
      }
      return state
    }
  }
}

----------------------------------------

TITLE: Using reduce-reducers Utility
DESCRIPTION: Shows how to use the reduce-reducers utility to simplify the composition of multiple reducers.

LANGUAGE: javascript
CODE:
const rootReducer = reduceReducers(combinedReducers, crossSliceReducer)

----------------------------------------

TITLE: Installing Redux and Redux Toolkit
DESCRIPTION: Commands for installing Redux packages using NPM or Yarn package managers.

LANGUAGE: bash
CODE:
# NPM
npm install @reduxjs/toolkit

# Yarn
yarn add @reduxjs/toolkit

----------------------------------------

TITLE: Defining Nested Blog Post Data Structure in JavaScript
DESCRIPTION: Example of a nested data structure representing blog posts with authors and comments. This structure is used to illustrate the problems with deeply nested data in Redux state.

LANGUAGE: javascript
CODE:
const blogPosts = [
  {
    id: 'post1',
    author: { username: 'user1', name: 'User 1' },
    body: '......',
    comments: [
      {
        id: 'comment1',
        author: { username: 'user2', name: 'User 2' },
        comment: '.....'
      },
      {
        id: 'comment2',
        author: { username: 'user3', name: 'User 3' },
        comment: '.....'
      }
    ]
  },
  {
    id: 'post2',
    author: { username: 'user2', name: 'User 2' },
    body: '......',
    comments: [
      {
        id: 'comment3',
        author: { username: 'user3', name: 'User 3' },
        comment: '.....'
      },
      {
        id: 'comment4',
        author: { username: 'user1', name: 'User 1' },
        comment: '.....'
      },
      {
        id: 'comment5',
        author: { username: 'user3', name: 'User 3' },
        comment: '.....'
      }
    ]
  }
  // and repeat many times
]

----------------------------------------

TITLE: Combining Regular and Cross-Slice Reducers
DESCRIPTION: Demonstrates how to compose multiple reducers to handle both independent and shared state updates using combineReducers and a custom cross-slice reducer.

LANGUAGE: javascript
CODE:
const combinedReducer = combineReducers({
  a: sliceReducerA,
  b: sliceReducerB
})

function crossSliceReducer(state, action) {
  switch (action.type) {
    case 'SOME_SPECIAL_ACTION': {
      return {
        // specifically pass state.b as an additional argument
        a: handleSpecialCaseForA(state.a, action, state.b),
        b: sliceReducerB(state.b, action)
      }
    }
    default:
      return state
  }
}

function rootReducer(state, action) {
  const intermediateState = combinedReducer(state, action)
  const finalState = crossSliceReducer(intermediateState, action)
  return finalState
}

----------------------------------------

TITLE: Implementing Save New Todo Thunk in Redux
DESCRIPTION: This code snippet shows how to create a thunk function that saves a new todo item to the server and dispatches an action with the saved todo data.

LANGUAGE: javascript
CODE:
export function saveNewTodo(text) {
  return async function saveNewTodoThunk(dispatch, getState) {
    const initialTodo = { text }
    const response = await client.post('/fakeApi/todos', { todo: initialTodo })
    dispatch({ type: 'todos/todoAdded', payload: response.todo })
  }
}

----------------------------------------

TITLE: Implementing Custom Combined Reducer with Shared State
DESCRIPTION: Demonstrates a custom reducer implementation that allows sharing state between slice reducers by passing additional arguments based on action types.

LANGUAGE: javascript
CODE:
function combinedReducer(state, action) {
  switch (action.type) {
    case 'A_TYPICAL_ACTION': {
      return {
        a: sliceReducerA(state.a, action),
        b: sliceReducerB(state.b, action)
      }
    }
    case 'SOME_SPECIAL_ACTION': {
      return {
        // specifically pass state.b as an additional argument
        a: sliceReducerA(state.a, action, state.b),
        b: sliceReducerB(state.b, action)
      }
    }
    case 'ANOTHER_SPECIAL_ACTION': {
      return {
        a: sliceReducerA(state.a, action),
        // specifically pass the entire state as an additional argument
        b: sliceReducerB(state.b, action, state)
      }
    }
    default:
      return state
  }
}

----------------------------------------

TITLE: Loading Initial State into Redux Store
DESCRIPTION: Creates a Redux store with preloaded state from localStorage.

LANGUAGE: JavaScript
CODE:
import { createStore } from 'redux'
import rootReducer from './reducer'

let preloadedState
const persistedTodosString = localStorage.getItem('todos')

if (persistedTodosString) {
  preloadedState = {
    todos: JSON.parse(persistedTodosString)
  }
}

const store = createStore(rootReducer, preloadedState)

----------------------------------------

TITLE: Defining a Simple Redux Counter Reducer in JavaScript
DESCRIPTION: This snippet shows a basic Redux reducer for a counter, demonstrating how to specify a default state value and handle increment/decrement actions.

LANGUAGE: javascript
CODE:
function counter(state = 0, action) {
  switch (action.type) {
    case 'INCREMENT':
      return state + 1
    case 'DECREMENT':
      return state - 1
    default:
      return state
  }
}

----------------------------------------

TITLE: Writing an Integration Test for a Redux-Connected Component
DESCRIPTION: Demonstrates how to write an integration test for a component that uses Redux, including setting up MSW for API mocking and using the custom render function.

LANGUAGE: typescript
CODE:
import React from 'react'
import { http, HttpResponse, delay } from 'msw'
import { setupServer } from 'msw/node'
import { fireEvent, screen } from '@testing-library/react'
import { renderWithProviders } from '../../../utils/test-utils'
import UserDisplay from '../UserDisplay'

export const handlers = [
  http.get('/api/user', async () => {
    await delay(150)
    return HttpResponse.json('John Smith')
  })
]

const server = setupServer(...handlers)

beforeAll(() => server.listen())
aftereEach(() => server.resetHandlers())
afterAll(() => server.close())

test('fetches & receives a user after clicking the fetch user button', async () => {
  renderWithProviders(<UserDisplay />)

  expect(screen.getByText(/no user/i)).toBeInTheDocument()
  expect(screen.queryByText(/Fetching user\.\.\./i)).not.toBeInTheDocument()

  fireEvent.click(screen.getByRole('button', { name: /Fetch user/i }))
  expect(screen.getByText(/no user/i)).toBeInTheDocument()

  expect(await screen.findByText(/John Smith/i)).toBeInTheDocument()
  expect(screen.queryByText(/no user/i)).not.toBeInTheDocument()
  expect(screen.queryByText(/Fetching user\.\.\./i)).not.toBeInTheDocument()
})

----------------------------------------

TITLE: Defining Redux Reducer Function Signature
DESCRIPTION: Demonstrates the basic signature of a Redux reducer function, which takes the previous state and an action as arguments, and returns the new state.

LANGUAGE: javascript
CODE:
(previousState, action) => newState

----------------------------------------

TITLE: Mocking Asynchronous API for Redux Initial State
DESCRIPTION: Mock API function to simulate fetching initial counter value asynchronously.

LANGUAGE: js
CODE:
function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min)) + min
}

export function fetchCounter(callback) {
  setTimeout(() => {
    callback(getRandomInt(1, 100))
  }, 500)
}

----------------------------------------

TITLE: Testing Redux Middleware
DESCRIPTION: Demonstrates how to test a Redux middleware function by mocking the dispatch, getState, and next functions.

LANGUAGE: javascript
CODE:
const create = () => {
  const store = {
    getState: jest.fn(() => ({})),
    dispatch: jest.fn()
  }
  const next = jest.fn()

  const invoke = action => thunkMiddleware(store)(next)(action)

  return { store, next, invoke }
}

test('passes through non-function action', () => {
  const { next, invoke } = create()
  const action = { type: 'TEST' }
  invoke(action)
  expect(next).toHaveBeenCalledWith(action)
})

test('calls the function', () => {
  const { invoke } = create()
  const fn = jest.fn()
  invoke(fn)
  expect(fn).toHaveBeenCalled()
})

test('passes dispatch and getState', () => {
  const { store, invoke } = create()
  invoke((dispatch, getState) => {
    dispatch('TEST DISPATCH')
    getState()
  })
  expect(store.dispatch).toHaveBeenCalledWith('TEST DISPATCH')
  expect(store.getState).toHaveBeenCalled()
})

----------------------------------------

TITLE: Designing State Shape for Undo History in Redux
DESCRIPTION: Example of how to structure Redux state to support undo/redo functionality, including past, present, and future states.

LANGUAGE: javascript
CODE:
{
  counter: {
    past: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
    present: 10,
    future: []
  }
}

----------------------------------------

TITLE: Logging Redux Store State in JavaScript
DESCRIPTION: This snippet demonstrates how to log the current state of a Redux store, showing the structure of the state tree with visibility filter and todos.

LANGUAGE: javascript
CODE:
console.log(store.getState())

/* Prints
{
  visibilityFilter: 'SHOW_ALL',
  todos: [
    {
      text: 'Consider using Redux',
      completed: true,
    },
    {
      text: 'Keep all state in a single tree',
      completed: false
    }
  ]
}
*/

----------------------------------------

TITLE: Unit Testing a Redux Reducer
DESCRIPTION: Shows how to write unit tests for a Redux reducer function, testing different scenarios of state updates.

LANGUAGE: typescript
CODE:
import reducer, { todoAdded, Todo } from './todosSlice'

test('should return the initial state', () => {
  expect(reducer(undefined, { type: 'unknown' })).toEqual([
    { text: 'Use Redux', completed: false, id: 0 }
  ])
})

test('should handle a todo being added to an empty list', () => {
  const previousState: Todo[] = []

  expect(reducer(previousState, todoAdded('Run the tests'))).toEqual([
    { text: 'Run the tests', completed: false, id: 0 }
  ])
})

test('should handle a todo being added to an existing list', () => {
  const previousState: Todo[] = [
    { text: 'Run the tests', completed: true, id: 0 }
  ]

  expect(reducer(previousState, todoAdded('Use Redux'))).toEqual([
    { text: 'Run the tests', completed: true, id: 0 },
    { text: 'Use Redux', completed: false, id: 1 }
  ])
})

----------------------------------------

TITLE: Defining Dispatch Types in Redux
DESCRIPTION: Type definitions for Redux dispatch functions that handle both synchronous and asynchronous actions.

LANGUAGE: javascript
CODE:
type BaseDispatch = (a: Action) => Action
type Dispatch = (a: Action | AsyncAction) => any

----------------------------------------

TITLE: Exposing Redux Store as Observable in JavaScript
DESCRIPTION: This code snippet demonstrates how to expose a Redux store as an observable, allowing it to be used with reactive programming libraries like RxJS. It implements a subscribe method that returns an unsubscribe function.

LANGUAGE: javascript
CODE:
function toObservable(store) {
  return {
    subscribe({ next }) {
      const unsubscribe = store.subscribe(() => next(store.getState()))
      next(store.getState())
      return { unsubscribe }
    }
  }
}

----------------------------------------

TITLE: Connecting a Redux App Component
DESCRIPTION: This snippet shows a typical Redux-connected root component for a sub-app. It uses the connect function to map state to props.

LANGUAGE: javascript
CODE:
class App extends Component { ... }
export default connect(mapStateToProps)(App)

----------------------------------------

TITLE: Installing Redux Toolkit with Package Managers
DESCRIPTION: Commands for installing Redux Toolkit using NPM or Yarn package managers. Redux Toolkit includes the Redux core and essential packages like Redux Thunk and Reselect.

LANGUAGE: bash
CODE:
# NPM
npm install @reduxjs/toolkit

# Yarn
yarn add @reduxjs/toolkit

----------------------------------------

TITLE: Basic Logging with Redux Dispatch
DESCRIPTION: Demonstrates a simple approach to logging actions and state changes by wrapping the store.dispatch call.

LANGUAGE: javascript
CODE:
const action = addTodo('Use Redux')

console.log('dispatching', action)
store.dispatch(action)
console.log('next state', store.getState())

----------------------------------------

TITLE: Defining Store Enhancer Type in Redux
DESCRIPTION: Type definition for Redux store enhancer that composes store creators with additional capabilities.

LANGUAGE: javascript
CODE:
type StoreEnhancer = (next: StoreCreator) => StoreCreator

----------------------------------------

TITLE: React-Redux mapStateToProps Implementation
DESCRIPTION: Shows proper and improper ways to implement mapStateToProps with respect to object references and shallow equality checking.

LANGUAGE: javascript
CODE:
function mapStateToProps(state) {
  return {
    todos: state.todos, // prop value
    visibleTodos: getVisibleTodos(state) // selector
  }
}

export default connect(mapStateToProps)(TodoApp)

----------------------------------------

TITLE: Monkeypatching Redux Store Dispatch
DESCRIPTION: Illustrates how to modify the store's dispatch method to include logging functionality.

LANGUAGE: javascript
CODE:
const next = store.dispatch
store.dispatch = function dispatchAndLog(action) {
  console.log('dispatching', action)
  let result = next(action)
  console.log('next state', store.getState())
  return result
}

----------------------------------------

TITLE: Defining Action Creator Type in Redux
DESCRIPTION: Type definition for Redux action creators that generate actions with optional parameters.

LANGUAGE: javascript
CODE:
type ActionCreator<A, P extends any[] = any[]> = (...args: P) => Action | AsyncAction

----------------------------------------

TITLE: Dispatching Actions in Redux
DESCRIPTION: This snippet shows how to dispatch actions to change the state in Redux. It includes examples of completing a todo and setting a visibility filter.

LANGUAGE: javascript
CODE:
store.dispatch({
  type: 'COMPLETE_TODO',
  index: 1
})

store.dispatch({
  type: 'SET_VISIBILITY_FILTER',
  filter: 'SHOW_COMPLETED'
})

----------------------------------------

TITLE: Creating Redux Slice with TypeScript
DESCRIPTION: Defines a Redux slice using createSlice with TypeScript types, including reducer logic and async thunks.

LANGUAGE: TypeScript
CODE:
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import type { PayloadAction } from '@reduxjs/toolkit'

export interface CounterState {
  value: number
  status: 'idle' | 'loading' | 'failed'
}

const initialState: CounterState = {
  value: 0,
  status: 'idle'
}

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  reducers: {
    increment: state => {
      state.value += 1
    },
    decrement: state => {
      state.value -= 1
    },
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload
    }
  }
})

----------------------------------------

TITLE: Basic Action Creator Implementation
DESCRIPTION: Demonstrates creating a basic action creator function that returns an action object with type and payload.

LANGUAGE: javascript
CODE:
const todoAdded = text => {
  return {
    type: 'todos/todoAdded',
    payload: text
  }
}

----------------------------------------

TITLE: Creating a Redux Store with Combined Reducers in JavaScript
DESCRIPTION: These snippets show how to create a Redux store using combined reducers, first without preloaded state and then with partial preloaded state, demonstrating how initial values are determined.

LANGUAGE: javascript
CODE:
import { createStore } from 'redux'
const store = createStore(combined)
console.log(store.getState()) // { a: 'lol', b: 'wat' }

LANGUAGE: javascript
CODE:
import { createStore } from 'redux'
const store = createStore(combined, { a: 'horse' })
console.log(store.getState()) // { a: 'horse', b: 'wat' }

----------------------------------------

TITLE: Defining a Redux Action Object
DESCRIPTION: Illustrates the structure of a typical Redux action object with a type and payload field.

LANGUAGE: javascript
CODE:
const addTodoAction = {
  type: 'todos/todoAdded',
  payload: 'Buy milk'
}

----------------------------------------

TITLE: Implementing Fetch Todos Middleware in Redux
DESCRIPTION: This code snippet shows how to create a custom Redux middleware that makes an API call to fetch todos when a specific action is dispatched.

LANGUAGE: javascript
CODE:
const fetchTodosMiddleware = storeAPI => next => action => {
  if (action.type === 'todos/fetchTodos') {
    // Make an API call to fetch todos from the server
    client.get('todos').then(todos => {
      // Dispatch an action with the todos we received
      storeAPI.dispatch({ type: 'todos/todosLoaded', payload: todos })
    })
  }

  return next(action)
}

----------------------------------------

TITLE: Building Static Website Content
DESCRIPTION: Command to generate static website content in the build directory for deployment to static hosting services.

LANGUAGE: bash
CODE:
$ npm run build

----------------------------------------

TITLE: Creating a Redux Action Creator Function
DESCRIPTION: Demonstrates how to create an action creator function that returns an action object.

LANGUAGE: javascript
CODE:
const addTodo = text => {
  return {
    type: 'todos/todoAdded',
    payload: text
  }
}

----------------------------------------

TITLE: Demonstrating Immutability in JavaScript
DESCRIPTION: This code snippet shows how to update objects and arrays immutably in JavaScript using the spread operator and array methods that return new copies.

LANGUAGE: js
CODE:
const obj = {
  a: {
    // To safely update obj.a.c, we have to copy each piece
    c: 3
  },
  b: 2
}

const obj2 = {
  // copy obj
  ...obj,
  // overwrite a
  a: {
    // copy obj.a
    ...obj.a,
    // overwrite c
    c: 42
  }
}

const arr = ['a', 'b']
// Create a new copy of arr, with "c" appended to the end
const arr2 = arr.concat('c')

// or, we can make a copy of the original array:
const arr3 = arr.slice()
// and mutate the copy:
arr3.push('c')

----------------------------------------

TITLE: Ejecting Create React App Configuration
DESCRIPTION: Command to eject from Create React App and expose all configuration files. This is a one-way operation that gives full control over the build configuration.

LANGUAGE: bash
CODE:
npm run eject

----------------------------------------

TITLE: Redux Middleware Currying Pattern
DESCRIPTION: Demonstrates the standard curried function signature used for Redux middleware. The pattern enables closure-based state management and follows functional programming principles.

LANGUAGE: javascript
CODE:
const middleware = storeAPI => next => action => {}

----------------------------------------

TITLE: Legacy Redux Counter Example
DESCRIPTION: Example demonstrating a counter application using traditional Redux patterns without Redux Toolkit, showing manual action creation and reducer implementation.

LANGUAGE: javascript
CODE:
import { createStore } from 'redux'

/**
 * This is a reducer - a function that takes a current state value and an
 * action object describing "what happened", and returns a new state value.
 * A reducer's function signature is: (state, action) => newState
 *
 * The Redux state should contain only plain JS objects, arrays, and primitives.
 * The root state value is usually an object. It's important that you should
 * not mutate the state object, but return a new object if the state changes.
 *
 * You can use any conditional logic you want in a reducer. In this example,
 * we use a switch statement, but it's not required.
 */
function counterReducer(state = { value: 0 }, action) {
  switch (action.type) {
    case 'counter/incremented':
      return { value: state.value + 1 }
    case 'counter/decremented':
      return { value: state.value - 1 }
    default:
      return state
  }
}

// Create a Redux store holding the state of your app.
// Its API is { subscribe, dispatch, getState }.
let store = createStore(counterReducer)

// You can use subscribe() to update the UI in response to state changes.
// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.
// There may be additional use cases where it's helpful to subscribe as well.

store.subscribe(() => console.log(store.getState()))

// The only way to mutate the internal state is to dispatch an action.
// The actions can be serialized, logged or stored and later replayed.
store.dispatch({ type: 'counter/incremented' })
// {value: 1}
store.dispatch({ type: 'counter/incremented' })
// {value: 2}
store.dispatch({ type: 'counter/decremented' })
// {value: 1}

----------------------------------------

TITLE: Adding Listener for New Post Notifications in Redux
DESCRIPTION: Implements a listener using createListenerMiddleware to show a toast notification when a new post is successfully added.

LANGUAGE: TypeScript
CODE:
export const addPostsListeners = (startAppListening: AppStartListening) => {
  startAppListening({
    actionCreator: addNewPost.fulfilled,
    effect: async (action, listenerApi) => {
      const { toast } = await import('react-tiny-toast')

      const toastId = toast.show('New post added!', {
        variant: 'success',
        position: 'bottom-right',
        pause: true
      })

      await listenerApi.delay(5000)
      toast.remove(toastId)
    }
  })
}

----------------------------------------

TITLE: Defining User State with TypeScript
DESCRIPTION: Example of defining a user state object with TypeScript, including explicit finite state and user data.

LANGUAGE: typescript
CODE:
const initialUserState = {
  status: 'idle', // explicit finite state
  user: null,
  error: null
}

----------------------------------------

TITLE: Configuring Topological Reducer Combination in Redux
DESCRIPTION: Example showing how to use topologically-combine-reducers to define dependencies between reducer slices

LANGUAGE: javascript
CODE:
var masterReducer = topologicallyCombineReducers(
  { auth, users, todos },
  // define the dependency tree
  { auth: ['users'], todos: ['auth'] }
)

----------------------------------------

TITLE: Configuring Redux Thunk with TypeScript
DESCRIPTION: Basic configuration of a typed thunk function that demonstrates the core thunk pattern with TypeScript types

LANGUAGE: typescript
CODE:
const store = configureStore({ reducer: counterReducer })

const exampleThunkFunction = (
  dispatch: AppDispatch,
  getState: () => RootState
) => {
  const stateBefore = getState()
  console.log(`Counter before: ${stateBefore.counter}`)
  dispatch(increment())
  const stateAfter = getState()
  console.log(`Counter after: ${stateAfter.counter}`)
}

----------------------------------------

TITLE: Configuring Redux combineReducers with Multiple Reducers
DESCRIPTION: Example showing how to configure combineReducers by passing an object with state slice names mapped to their reducer functions.

LANGUAGE: javascript
CODE:
combineReducers({ todos: myTodosReducer, counter: myCounterReducer })

----------------------------------------

TITLE: Redux Action Examples
DESCRIPTION: Examples of Redux actions, showing different types of actions that can be dispatched to modify the application state.

LANGUAGE: javascript
CODE:
{ type: 'ADD_TODO', text: 'Go to swimming pool' }
{ type: 'TOGGLE_TODO', index: 1 }
{ type: 'SET_VISIBILITY_FILTER', filter: 'SHOW_ALL' }

----------------------------------------

TITLE: React Component with Async Thunk Dispatch
DESCRIPTION: Example of a React component that dispatches an async thunk and handles loading states

LANGUAGE: tsx
CODE:
export const AddPostForm = () => {
  const [addRequestStatus, setAddRequestStatus] = useState<'idle' | 'pending'>('idle')

  const handleSubmit = async (e: React.FormEvent<AddPostFormElements>) => {
    e.preventDefault()
    const { elements } = e.currentTarget
    const title = elements.postTitle.value
    const content = elements.postContent.value

    try {
      setAddRequestStatus('pending')
      await dispatch(addNewPost({ title, content, user: userId })).unwrap()
      form.reset()
    } catch (err) {
      console.error('Failed to save the post: ', err)
    } finally {
      setAddRequestStatus('idle')
    }
  }
}

----------------------------------------

TITLE: Inefficient MapStateToProps Example in React Redux
DESCRIPTION: Demonstrates an anti-pattern in mapStateToProps that creates new array references on each call, causing unnecessary re-renders in React Redux components.

LANGUAGE: javascript
CODE:
const mapStateToProps = state => {
  return {
    objects: state.objectIds.map(id => state.objects[id])
  }
}

----------------------------------------

TITLE: Using combineReducers in Redux
DESCRIPTION: Code snippet demonstrating how to use combineReducers utility function to manage state slices in Redux. This is a common pattern for organizing reducers, though not required. The function allows separate reducer functions to handle different portions of the state tree.

LANGUAGE: javascript
CODE:
combineReducers({...reducers})

----------------------------------------

TITLE: Running Todos Example with Redux
DESCRIPTION: Instructions for running the Todos example, which demonstrates how state updates work with components in Redux and shows reducer delegation and React Redux usage.

LANGUAGE: sh
CODE:
git clone https://github.com/reduxjs/redux.git

cd redux/examples/todos
npm install
npm start

----------------------------------------

TITLE: Installing Dependencies for Redux Server Rendering
DESCRIPTION: Command to install Express and React-Redux for server-side rendering setup.

LANGUAGE: sh
CODE:
npm install express react-redux

----------------------------------------

TITLE: CreateAsyncThunk Example
DESCRIPTION: Shows how to use Redux Toolkit's createAsyncThunk to simplify async request handling.

LANGUAGE: javascript
CODE:
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'

export const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {
  const response = await client.get('/fakeApi/todos')
  return response.todos
})

const todosSlice = createSlice({
  name: 'todos',
  initialState,
  reducers: {},
  extraReducers: builder => {
    builder
      .addCase(fetchTodos.pending, (state, action) => {
        state.status = 'loading'
      })
      .addCase(fetchTodos.fulfilled, (state, action) => {
        const newEntities = {}
        action.payload.forEach(todo => {
          newEntities[todo.id] = todo
        })
        state.entities = newEntities
        state.status = 'idle'
      })
  }
})

----------------------------------------

TITLE: Running TodoMVC Example with Redux
DESCRIPTION: Instructions for running the classical TodoMVC example implemented with Redux, covering similar points as the Todos example.

LANGUAGE: sh
CODE:
git clone https://github.com/reduxjs/redux.git

cd redux/examples/todomvc
npm install
npm start

----------------------------------------

TITLE: Running Tree View Example with Redux
DESCRIPTION: Instructions for running the Tree View example, which shows how to render a deeply nested tree view and represent its state in a normalized form for easy updates.

LANGUAGE: sh
CODE:
git clone https://github.com/reduxjs/redux.git

cd redux/examples/tree-view
npm install
npm start

----------------------------------------

TITLE: Initial Redux Reducer Implementation
DESCRIPTION: The starting point of the refactoring process, showing a single large reducer function handling multiple action types for a todo application.

LANGUAGE: javascript
CODE:
const initialState = {
  visibilityFilter: 'SHOW_ALL',
  todos: []
}

function appReducer(state = initialState, action) {
  switch (action.type) {
    case 'SET_VISIBILITY_FILTER': {
      return Object.assign({}, state, {
        visibilityFilter: action.filter
      })
    }
    case 'ADD_TODO': {
      return Object.assign({}, state, {
        todos: state.todos.concat({
          id: action.id,
          text: action.text,
          completed: false
        })
      })
    }
    case 'TOGGLE_TODO': {
      return Object.assign({}, state, {
        todos: state.todos.map(todo => {
          if (todo.id !== action.id) {
            return todo
          }

          return Object.assign({}, todo, {
            completed: !todo.completed
          })
        })
      })
    }
    case 'EDIT_TODO': {
      return Object.assign({}, state, {
        todos: state.todos.map(todo => {
          if (todo.id !== action.id) {
            return todo
          }

          return Object.assign({}, todo, {
            text: action.text
          })
        })
      })
    }
    default:
      return state
  }
}

----------------------------------------

TITLE: Redux State Structure Example
DESCRIPTION: Example of a Redux state object structure for a todo application, showing how application state is stored as a plain JavaScript object.

LANGUAGE: javascript
CODE:
{
  todos: [{
    text: 'Eat food',
    completed: true
  }, {
    text: 'Exercise',
    completed: false
  }],
  visibilityFilter: 'SHOW_COMPLETED'
}

----------------------------------------

TITLE: Running Real World Example with Redux
DESCRIPTION: Steps to run the advanced Real World example, covering complex scenarios like normalized caches, custom middleware, pagination, and routing with Redux.

LANGUAGE: sh
CODE:
git clone https://github.com/reduxjs/redux.git

cd redux/examples/real-world
npm install
npm start

----------------------------------------

TITLE: Higher-Order Reducers with Named Types
DESCRIPTION: Shows two approaches to create specialized counter reducers using higher-order functions: one using named action types and another using action metadata.

LANGUAGE: javascript
CODE:
function createCounterWithNamedType(counterName = '') {
  return function counter(state = 0, action) {
    switch (action.type) {
      case `INCREMENT_${counterName}`:
        return state + 1
      case `DECREMENT_${counterName}`:
        return state - 1
      default:
        return state
    }
  }
}

function createCounterWithNameData(counterName = '') {
  return function counter(state = 0, action) {
    const { name } = action
    if (name !== counterName) return state

    switch (action.type) {
      case `INCREMENT`:
        return state + 1
      case `DECREMENT`:
        return state - 1
      default:
        return state
    }
  }
}

----------------------------------------

TITLE: Redux Reducer Implementation
DESCRIPTION: Implementation of Redux reducers that handle state updates for visibility filters and todos, demonstrating how state is updated in response to actions.

LANGUAGE: javascript
CODE:
function visibilityFilter(state = 'SHOW_ALL', action) {
  if (action.type === 'SET_VISIBILITY_FILTER') {
    return action.filter
  } else {
    return state
  }
}

function todos(state = [], action) {
  switch (action.type) {
    case 'ADD_TODO':
      return state.concat([{ text: action.text, completed: false }])
    case 'TOGGLE_TODO':
      return state.map((todo, index) =>
        action.index === index
          ? { text: todo.text, completed: !todo.completed }
          : todo
      )
    default:
      return state
  }
}

----------------------------------------

TITLE: Injecting Redux Store for API Interceptors
DESCRIPTION: Demonstrates a pattern for injecting the Redux store into an API interceptor file to avoid circular dependencies. An injectStore function is exported and called during app initialization.

LANGUAGE: javascript
CODE:
let store

export const injectStore = _store => {
  store = _store
}

axiosInstance.interceptors.request.use(config => {
  config.headers.authorization = store.getState().auth.token
  return config
})

LANGUAGE: javascript
CODE:
import store from './app/store'
import { injectStore } from './common/api'
injectStore(store)

----------------------------------------

TITLE: Creating Redux Store Provider Component
DESCRIPTION: Implementation of a client-side Store Provider component that creates and maintains a single store instance per request.

LANGUAGE: tsx
CODE:
'use client'
import { useRef } from 'react'
import { Provider } from 'react-redux'
import { makeStore, AppStore } from '../lib/store'

export default function StoreProvider({
  children
}: {
  children: React.ReactNode
}) {
  const storeRef = useRef<AppStore | null>(null)
  if (!storeRef.current) {
    storeRef.current = makeStore()
  }

  return <Provider store={storeRef.current}>{children}</Provider>
}

----------------------------------------

TITLE: Creating Markdown Links for Redux Documentation Sections
DESCRIPTION: This snippet demonstrates how to create Markdown links for different sections of the Redux documentation. It includes links to Core Concepts, Learning Resources, Ecosystem, and Examples pages.

LANGUAGE: Markdown
CODE:
- [Core Concepts](CoreConcepts.md)
- [Learning Resources](LearningResources.md)
- [Ecosystem](Ecosystem.md)
- [Examples](Examples.md)

----------------------------------------

TITLE: Using Thunk Middleware for Async Actions in Redux
DESCRIPTION: This example illustrates how to use the redux-thunk middleware to handle asynchronous actions in Redux. It shows various action creators, including thunks, and demonstrates how to dispatch them with the middleware applied.

LANGUAGE: javascript
CODE:
import { createStore, combineReducers, applyMiddleware } from 'redux'
import { thunk } from 'redux-thunk'
import * as reducers from './reducers'

const reducer = combineReducers(reducers)
// applyMiddleware supercharges createStore with middleware:
const store = createStore(reducer, applyMiddleware(thunk))

function fetchSecretSauce() {
  return fetch('https://www.google.com/search?q=secret+sauce')
}

// These are the normal action creators you have seen so far.
// The actions they return can be dispatched without any middleware.
// However, they only express "facts" and not the "async flow".
function makeASandwich(forPerson, secretSauce) {
  return {
    type: 'MAKE_SANDWICH',
    forPerson,
    secretSauce
  }
}

function apologize(fromPerson, toPerson, error) {
  return {
    type: 'APOLOGIZE',
    fromPerson,
    toPerson,
    error
  }
}

function withdrawMoney(amount) {
  return {
    type: 'WITHDRAW',
    amount
  }
}

// Even without middleware, you can dispatch an action:
store.dispatch(withdrawMoney(100))

// But what do you do when you need to start an asynchronous action,
// such as an API call, or a router transition?

// Meet thunks.
// A thunk is a function that returns a function.
// This is a thunk.
function makeASandwichWithSecretSauce(forPerson) {
  // Invert control!
  // Return a function that accepts `dispatch` so we can dispatch later.
  // Thunk middleware knows how to turn thunk async actions into actions.
  return function (dispatch) {
    return fetchSecretSauce().then(
      sauce => dispatch(makeASandwich(forPerson, sauce)),
      error => dispatch(apologize('The Sandwich Shop', forPerson, error))
    )
  }
}

// Thunk middleware lets me dispatch thunk async actions
// as if they were actions!
store.dispatch(makeASandwichWithSecretSauce('Me'))

// It even takes care to return the thunk's return value
// from the dispatch, so I can chain Promises as long as I return them.
store.dispatch(makeASandwichWithSecretSauce('My wife')).then(() => {
  console.log('Done!')
})

// In fact I can write action creators that dispatch
// actions and async actions from other action creators,
// and I can build my control flow with Promises.
function makeSandwichesForEverybody() {
  return function (dispatch, getState) {
    if (!getState().sandwiches.isShopOpen) {
      // You don't have to return Promises, but it's a handy convention
      // so the caller can always call .then() on async dispatch result.
      return Promise.resolve()
    }

    // We can dispatch both plain object actions and other thunks,
    // which lets us compose the asynchronous actions in a single flow.
    return dispatch(makeASandwichWithSecretSauce('My Grandma'))
      .then(() =>
        Promise.all([
          dispatch(makeASandwichWithSecretSauce('Me')),
          dispatch(makeASandwichWithSecretSauce('My wife'))
        ])
      )
      .then(() => dispatch(makeASandwichWithSecretSauce('Our kids')))
      .then(() =>
        dispatch(
          getState().myMoney > 42
            ? withdrawMoney(42)
            : apologize('Me', 'The Sandwich Shop')
        )
      )
  }
}

// This is very useful for server side rendering, because I can wait
// until data is available, then synchronously render the app.

import { renderToString } from 'react-dom/server'

store
  .dispatch(makeSandwichesForEverybody())
  .then(() => response.send(renderToString(<MyApp store={store} />)))

// I can also dispatch a thunk async action from a component
// any time its props change to load the missing data.

import React from 'react'
import { connect } from 'react-redux'

function SandwichShop(props) {
  const { dispatch, forPerson } = props

  useEffect(() => {
    dispatch(makeASandwichWithSecretSauce(forPerson))
  }, [forPerson])

  return <p>{this.props.sandwiches.join('mustard')}</p>
}

export default connect(state => ({
  sandwiches: state.sandwiches
}))(SandwichShop)

----------------------------------------

TITLE: Configuring Redux Store and Dispatching Actions in JavaScript
DESCRIPTION: Demonstrates configuring a Redux store with combined reducers and dispatching an action to update state.

LANGUAGE: javascript
CODE:
import { configureStore } from '@reduxjs/toolkit'
import reducer from './reducers/index'

const store = configureStore({
  reducer
})
console.log(store.getState())
// {
//   counter: 0,
//   todos: []
// }

store.dispatch({
  type: 'ADD_TODO',
  text: 'Use Redux'
})
console.log(store.getState())
// {
//   counter: 0,
//   todos: [ 'Use Redux' ]
// }

----------------------------------------

TITLE: Example of Mutable Object Shallow Equality Check
DESCRIPTION: Demonstrates why shallow equality checking fails to detect mutations of mutable objects since the reference remains the same.

LANGUAGE: javascript
CODE:
function mutateObj(obj) {
  obj.key = 'newValue'
  return obj
}

const param = { key: 'originalValue' }
const returnVal = mutateObj(param)

param === returnVal
//> true

----------------------------------------

TITLE: Running Counter Example with Redux and React
DESCRIPTION: Steps to clone the Redux repository and run the Counter example. This basic example showcases Redux with React, manually re-rendering the component when the store changes.

LANGUAGE: sh
CODE:
git clone https://github.com/reduxjs/redux.git

cd redux/examples/counter
npm install
npm start

----------------------------------------

TITLE: Defining Counter Reducer in JavaScript
DESCRIPTION: Example of a simple counter reducer function that handles INCREMENT and DECREMENT actions.

LANGUAGE: javascript
CODE:
export default function counter(state = 0, action) {
  switch (action.type) {
    case 'INCREMENT':
      return state + 1
    case 'DECREMENT':
      return state - 1
    default:
      return state
  }
}

----------------------------------------

TITLE: Basic Redux Counter Example (ES5)
DESCRIPTION: Reference to a vanilla JavaScript implementation of Redux counter example that demonstrates Redux usage without modern build tools or frameworks. Shows Redux can be used with basic HTML and DOM manipulation.

LANGUAGE: html
CODE:
<script>\n  // Reference to counter-vanilla example\n  // See: https://github.com/reduxjs/redux/tree/master/examples/counter-vanilla\n</script>

----------------------------------------

TITLE: Composing Redux Reducers with reduce-reducers
DESCRIPTION: Example demonstrating sequential composition of reducers at the same level using reduce-reducers

LANGUAGE: javascript
CODE:
const combinedReducer = combineReducers({ users, posts, comments })
const rootReducer = reduceReducers(combinedReducer, otherTopLevelFeatureReducer)

----------------------------------------

TITLE: Configuring Redux Store with Slice Reducers in TypeScript
DESCRIPTION: Example of using configureStore to automatically combine slice reducers in Redux Toolkit.

LANGUAGE: typescript
CODE:
const store = configureStore({
  reducer: {
    posts: postsReducer,
    comments: commentsReducer
  }
})

----------------------------------------

TITLE: Alternative Non-Curried Middleware Pattern
DESCRIPTION: Shows the alternative non-curried middleware signature that was considered but not adopted. This pattern would provide direct access to store and next parameters.

LANGUAGE: javascript
CODE:
const middleware = (storeAPI, next, action) => {}

----------------------------------------

TITLE: Using createSlice with Built-in Thunks
DESCRIPTION: Example demonstrating the new callback syntax for defining thunks directly inside createSlice

LANGUAGE: typescript
CODE:
const createSliceWithThunks = buildCreateSlice({
  creators: { asyncThunk: asyncThunkCreator }
})

const todosSlice = createSliceWithThunks({
  name: 'todos',
  initialState: {
    loading: false,
    todos: [],
    error: null
  } as TodoState,
  reducers: create => ({
    // A normal "case reducer", same as always
    deleteTodo: create.reducer((state, action: PayloadAction<number>) => {
      state.todos.splice(action.payload, 1)
    }),
    // A case reducer with a "prepare callback" to customize the action
    addTodo: create.preparedReducer(
      (text: string) => {
        const id = nanoid()
        return { payload: { id, text } }
      },
      // action type is inferred from prepare callback
      (state, action) => {
        state.todos.push(action.payload)
      }
    ),
    // An async thunk
    fetchTodo: create.asyncThunk(
      async (id: string, thunkApi) => {
        const res = await fetch(`myApi/todos?id=${id}`)
        return (await res.json()) as Item
      },
      {
        pending: state => {
          state.loading = true
        },
        rejected: (state, action) => {
          state.error = action.payload ?? action.error
        },
        fulfilled: (state, action) => {
          state.todos.push(action.payload)
        },
        settled: (state, action) => {
          state.loading = false
        }
      }
    )
  })
})

----------------------------------------

TITLE: Using bindActionCreators with React and Redux
DESCRIPTION: This snippet demonstrates how to use bindActionCreators in a React component with Redux. It shows the creation of bound action creators and their usage in a component's lifecycle and rendering.

LANGUAGE: javascript
CODE:
import React from 'react'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'

import * as TodoActionCreators from './TodoActionCreators'
console.log(TodoActionCreators)
// {
//   addTodo: Function,
//   removeTodo: Function
// }

function TodoListContainer(props) {
  // Injected by react-redux:
  const { dispatch, todos } = props

  // Here's a good use case for bindActionCreators:
  // You want a child component to be completely unaware of Redux.
  // We create bound versions of these functions now so we can
  // pass them down to our child later.

  const boundActionCreators = useMemo(
    () => bindActionCreators(TodoActionCreators, dispatch),
    [dispatch]
  )
  console.log(boundActionCreators)
  // {
  //   addTodo: Function,
  //   removeTodo: Function
  // }

  useEffect(() => {
    // Note: this won't work:
    // TodoActionCreators.addTodo('Use Redux')

    // You're just calling a function that creates an action.
    // You must dispatch the action, too!

    // This will work:
    let action = TodoActionCreators.addTodo('Use Redux')
    dispatch(action)
  }, [])

  return <TodoList todos={todos} {...this.boundActionCreators} />

  // An alternative to bindActionCreators is to pass
  // just the dispatch function down, but then your child component
  // needs to import action creators and know about them.

  // return <TodoList todos={todos} dispatch={dispatch} />
}

export default connect(state => ({ todos: state.todos }))(TodoListContainer)

----------------------------------------

TITLE: Plain Object Validation with isPlainObject
DESCRIPTION: Utility function that checks if a given value is a plain JavaScript object, useful for Redux action and state validation.

LANGUAGE: typescript
CODE:
function isPlainObject(value: unknown): boolean {
  return typeof value === 'object' && value !== null && !Array.isArray(value);
}

----------------------------------------

TITLE: Incorrect Nested State Update in Redux Reducer (JavaScript)
DESCRIPTION: This snippet shows a common mistake when updating nested state in Redux. It directly modifies the existing object reference, which is incorrect and should be avoided.

LANGUAGE: javascript
CODE:
function updateNestedState(state, action) {
  let nestedState = state.nestedState
  // ERROR: this directly modifies the existing object reference - don't do this!
  nestedState.nestedField = action.data

  return {
    ...state,
    nestedState
  }
}

----------------------------------------

TITLE: Implementing Custom Logger Middleware in Redux
DESCRIPTION: This example demonstrates how to create a custom logger middleware that logs actions and state changes. It shows the middleware signature and how to apply it to a Redux store.

LANGUAGE: javascript
CODE:
import { createStore, applyMiddleware } from 'redux'
import todos from './reducers'

function logger({ getState }) {
  return next => action => {
    console.log('will dispatch', action)

    // Call the next dispatch method in the middleware chain.
    const returnValue = next(action)

    console.log('state after dispatch', getState())

    // This will likely be the action itself, unless
    // a middleware further in chain changed it.
    return returnValue
  }
}

const store = createStore(todos, ['Use Redux'], applyMiddleware(logger))

store.dispatch({
  type: 'ADD_TODO',
  text: 'Understand the middleware'
})
// (These lines will be logged by the middleware:)
// will dispatch: { type: 'ADD_TODO', text: 'Understand the middleware' }
// state after dispatch: [ 'Use Redux', 'Understand the middleware' ]

----------------------------------------

TITLE: Combining Reducers with Redux Toolkit in JavaScript
DESCRIPTION: Example of using combineReducers from Redux Toolkit to combine todos and counter reducers.

LANGUAGE: javascript
CODE:
import { combineReducers } from '@reduxjs/toolkit'
import todos from './todos'
import counter from './counter'

export default combineReducers({
  todos,
  counter
})

----------------------------------------

TITLE: Implementing a Counter Component with React useState
DESCRIPTION: This snippet demonstrates a simple React counter component using the useState hook for state management. It shows the basic structure of state, view, and actions in a React component.

LANGUAGE: jsx
CODE:
function Counter() {
  // State: a counter value
  const [counter, setCounter] = useState(0)

  // Action: code that causes an update to the state when something happens
  const increment = () => {
    setCounter(prevCounter => prevCounter + 1)
  }

  // View: the UI definition
  return (
    <div>
      Value: {counter} <button onClick={increment}>Increment</button>
    </div>
  )
}

----------------------------------------

TITLE: Running React Test Suite
DESCRIPTION: Command to launch the test runner in interactive watch mode for running unit tests.

LANGUAGE: bash
CODE:
npm test

----------------------------------------

TITLE: Defining Todo Reducer in JavaScript
DESCRIPTION: Example of a simple todos reducer function that handles ADD_TODO action.

LANGUAGE: javascript
CODE:
export default function todos(state = [], action) {
  switch (action.type) {
    case 'ADD_TODO':
      return state.concat([action.text])
    default:
      return state
  }
}

----------------------------------------

TITLE: Defining State Type in Redux
DESCRIPTION: Basic type definition for Redux state which can be any value but should remain serializable.

LANGUAGE: javascript
CODE:
type State = any

----------------------------------------

TITLE: Building React Production Bundle
DESCRIPTION: Command to create an optimized production build in the build folder with minified bundles and hashed filenames.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Defining Action Creators in JavaScript for Redux
DESCRIPTION: This snippet defines two action creators, addTodo and removeTodo, which return action objects for adding and removing todos respectively.

LANGUAGE: javascript
CODE:
export function addTodo(text) {
  return {
    type: 'ADD_TODO',
    text
  }
}

export function removeTodo(id) {
  return {
    type: 'REMOVE_TODO',
    id
  }
}

----------------------------------------

TITLE: Optimistic Updates for Post Reactions
DESCRIPTION: Implements optimistic updates for post reactions using RTK Query's onQueryStarted lifecycle

LANGUAGE: TypeScript
CODE:
addReaction: builder.mutation<
  Post,
  { postId: string; reaction: ReactionName }
>({
  query: ({ postId, reaction }) => ({
    url: `posts/${postId}/reactions`,
    method: 'POST',
    body: { reaction }
  }),
  async onQueryStarted({ postId, reaction }, lifecycleApi) {
    const getPostsPatchResult = lifecycleApi.dispatch(
      apiSlice.util.updateQueryData('getPosts', undefined, draft => {
        const post = draft.find(post => post.id === postId)
        if (post) {
          post.reactions[reaction]++
        }
      })
    )

    const getPostPatchResult = lifecycleApi.dispatch(
      apiSlice.util.updateQueryData('getPost', postId, draft => {
        draft.reactions[reaction]++
      })
    )

    try {
      await lifecycleApi.queryFulfilled
    } catch {
      getPostsPatchResult.undo()
      getPostPatchResult.undo()
    }
  }
})

----------------------------------------

TITLE: Running React Development Server
DESCRIPTION: Command to start the React development server on localhost:3000 with hot reload functionality enabled.

LANGUAGE: bash
CODE:
npm start

----------------------------------------

TITLE: Correct Redux Action Dispatch Implementation
DESCRIPTION: Proper implementation of Redux action dispatching using react-redux connect HOC for component integration.

LANGUAGE: jsx
CODE:
import React, { Component } from 'react'
import { connect } from 'react-redux'
import { addTodo } from './TodoActions'

class AddTodo extends Component {
  handleClick() {
    // Works!
    this.props.dispatch(addTodo('Fix the issue'))
  }

  render() {
    return <button onClick={() => this.handleClick()}>Add</button>
  }
}

// In addition to the state, `connect` puts `dispatch` in our props.
export default connect()(AddTodo)

----------------------------------------

TITLE: TodoList Component with useSelector
DESCRIPTION: Example of a React TodoList component using the useSelector hook to read todos from Redux store state.

LANGUAGE: jsx
CODE:
import React from 'react'
import { useSelector } from 'react-redux'
import TodoListItem from './TodoListItem'

const selectTodos = state => state.todos

const TodoList = () => {
  const todos = useSelector(selectTodos)

  const renderedListItems = todos.map(todo => {
    return <TodoListItem key={todo.id} todo={todo} />
  })

  return <ul className="todo-list">{renderedListItems}</ul>
}

----------------------------------------

TITLE: Testing Redux Examples - Shell
DESCRIPTION: Command to run tests for official Redux examples

LANGUAGE: sh
CODE:
yarn examples:test

----------------------------------------

TITLE: Incorrect Action Creator Usage Without Dispatch
DESCRIPTION: Example demonstrating incorrect usage of Redux action creators without proper dispatch implementation.

LANGUAGE: javascript
CODE:
export function addTodo(text) {
  return { type: 'ADD_TODO', text }
}

LANGUAGE: jsx
CODE:
import React, { Component } from 'react'
import { addTodo } from './TodoActions'

class AddTodo extends Component {
  handleClick() {
    // Won't work!
    addTodo('Fix the issue')
  }

  render() {
    return <button onClick={() => this.handleClick()}>Add</button>
  }
}

----------------------------------------

TITLE: Implementing Async Middleware with Promise Return Value (Anti-pattern)
DESCRIPTION: Example showing an incorrect implementation of async middleware that accidentally modifies the dispatch return value by making it a Promise.

LANGUAGE: typescript
CODE:
const middleware: Middleware = api => next => async action => {
  const response = next(action)

  const afterState = api.getState()
  if (action.type === 'some/action') {
    const data = await fetchData()
    api.dispatch(dataFetchedAction(data))
  }

  return response
}

----------------------------------------

TITLE: Testing and Linting Redux - Shell
DESCRIPTION: Commands for running linting, tests, and watch mode for testing

LANGUAGE: sh
CODE:
yarn lint

LANGUAGE: sh
CODE:
yarn test

LANGUAGE: sh
CODE:
yarn test:watch

----------------------------------------

TITLE: Extracting Utility Functions in Redux Reducer
DESCRIPTION: Refactoring step where common patterns are extracted into utility functions to reduce duplication and improve readability.

LANGUAGE: javascript
CODE:
function updateObject(oldObject, newValues) {
  return Object.assign({}, oldObject, newValues)
}

function updateItemInArray(array, itemId, updateItemCallback) {
  const updatedItems = array.map(item => {
    if (item.id !== itemId) {
      return item
    }
    const updatedItem = updateItemCallback(item)
    return updatedItem
  })

  return updatedItems
}

function appReducer(state = initialState, action) {
  switch (action.type) {
    case 'SET_VISIBILITY_FILTER': {
      return updateObject(state, { visibilityFilter: action.filter })
    }
    case 'ADD_TODO': {
      const newTodos = state.todos.concat({
        id: action.id,
        text: action.text,
        completed: false
      })

      return updateObject(state, { todos: newTodos })
    }
    case 'TOGGLE_TODO': {
      const newTodos = updateItemInArray(state.todos, action.id, todo => {
        return updateObject(todo, { completed: !todo.completed })
      })

      return updateObject(state, { todos: newTodos })
    }
    case 'EDIT_TODO': {
      const newTodos = updateItemInArray(state.todos, action.id, todo => {
        return updateObject(todo, { text: action.text })
      })

      return updateObject(state, { todos: newTodos })
    }
    default:
      return state
  }
}

----------------------------------------

TITLE: Defining Middleware Type in Redux
DESCRIPTION: Type definition for Redux middleware that composes dispatch functions with additional functionality.

LANGUAGE: javascript
CODE:
type MiddlewareAPI = { dispatch: Dispatch, getState: () => State }
type Middleware = (api: MiddlewareAPI) => (next: Dispatch) => Dispatch

----------------------------------------

TITLE: Installing Redux Core Library
DESCRIPTION: Command to install the Redux core library using npm.

LANGUAGE: bash
CODE:
npm install redux

----------------------------------------

TITLE: Basic Counter Reducer with combineReducers
DESCRIPTION: Demonstrates a simple counter reducer implementation with combineReducers, showing the limitation of updating all counters simultaneously.

LANGUAGE: javascript
CODE:
function counter(state = 0, action) {
  switch (action.type) {
    case 'INCREMENT':
      return state + 1
    case 'DECREMENT':
      return state - 1
    default:
      return state
  }
}

const rootReducer = combineReducers({
  counterA: counter,
  counterB: counter,
  counterC: counter
})

----------------------------------------

TITLE: Defining Async Action Type in Redux
DESCRIPTION: Type definition for Redux async actions that are processed by middleware before reaching reducers.

LANGUAGE: javascript
CODE:
type AsyncAction = any

----------------------------------------

TITLE: Installing Redux Toolkit and React-Redux
DESCRIPTION: Command to install Redux Toolkit and React-Redux using npm.

LANGUAGE: bash
CODE:
npm install @reduxjs/toolkit react-redux

----------------------------------------

TITLE: Configuring Middleware in configureStore
DESCRIPTION: Example showing the required callback syntax for configuring middleware in configureStore in RTK 2.0

LANGUAGE: typescript
CODE:
const store = configureStore({
  reducer,
  middleware: getDefaultMiddleware => {
    // WARNING: this means that _none_ of the default middleware are added!
    return [myMiddleware]
    // or for TS users, use:
    // return new Tuple(myMiddleware)
  }
})

----------------------------------------

TITLE: Configuring Default User-agent Access in Robots.txt
DESCRIPTION: Basic robots.txt configuration that sets global crawler access rules. References the robotstxt.org specification for standard formatting.

LANGUAGE: robotstxt
CODE:
# https://www.robotstxt.org/robotstxt.html
User-agent: *


----------------------------------------

TITLE: Defining Action Type in Redux
DESCRIPTION: Type definition for Redux actions which must be plain objects with a type field.

LANGUAGE: javascript
CODE:
type Action = Object

----------------------------------------

TITLE: Configuring Default User-agent Access in Robots.txt
DESCRIPTION: Basic robots.txt configuration that sets global crawler access rules. References the robotstxt.org specification for standard formatting.

LANGUAGE: robotstxt
CODE:
# https://www.robotstxt.org/robotstxt.html
User-agent: *


----------------------------------------

TITLE: Defining Redux Slice with TypeScript
DESCRIPTION: Creating a Redux slice with TypeScript including state interface, action types, and reducers

LANGUAGE: typescript
CODE:
import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import type { RootState } from '../../app/store'

interface CounterState {
  value: number
}

const initialState: CounterState = {
  value: 0
}

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  reducers: {
    increment: state => {
      state.value += 1
    },
    decrement: state => {
      state.value -= 1
    },
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload
    }
  }
})

----------------------------------------

TITLE: Running Counter Vanilla Example with Redux
DESCRIPTION: Instructions for cloning the Redux repository and running the Counter Vanilla example. This example demonstrates the raw Redux API used with ES5, without a build system or view framework.

LANGUAGE: sh
CODE:
git clone https://github.com/reduxjs/redux.git

cd redux/examples/counter-vanilla
open index.html

----------------------------------------

TITLE: Starting Local Development Server
DESCRIPTION: Command to start a local development server that provides live preview of changes and opens a browser window automatically.

LANGUAGE: bash
CODE:
$ npm run start

----------------------------------------

TITLE: Using Redux Batch API for Optimized Dispatching
DESCRIPTION: Example showing how to use the React-Redux batch API to combine multiple dispatch calls into a single render update. This helps minimize unnecessary re-renders when dispatching multiple actions consecutively.

LANGUAGE: javascript
CODE:
import { batch } from 'react-redux'

function myThunk() {
  return (dispatch, getState) => {
    // should only result in one combined re-render, not two
    batch(() => {
      dispatch(increment())
      dispatch(increment())
    })
  }
}

----------------------------------------

TITLE: Installing Redux Website Dependencies
DESCRIPTION: Command to install all required npm dependencies for the Redux documentation website.

LANGUAGE: bash
CODE:
$ npm install

----------------------------------------

TITLE: Collection/Item Reducer Pattern
DESCRIPTION: Shows how to implement reducers that manage collections of items, both for array and object-based state structures.

LANGUAGE: javascript
CODE:
function counterReducer(state, action) {
    switch(action.type) {
        case "INCREMENT" : return state + 1;
        case "DECREMENT" : return state - 1;
    }
}

function countersArrayReducer(state, action) {
    switch(action.type) {
        case "INCREMENT":
        case "DECREMENT":
            return state.map( (counter, index) => {
                if(index !== action.index) return counter;
                return counterReducer(counter, action);
            });
        default:
            return state;
    }
}

function countersMapReducer(state, action) {
    switch(action.type) {
        case "INCREMENT":
        case "DECREMENT":
            return {
                ...state,
                state[action.name] : counterReducer(state[action.name], action)
            };
        default:
            return state;
    }
}

----------------------------------------

TITLE: Legacy React-Redux Component with Connect
DESCRIPTION: Traditional React-Redux component using the connect HOC with mapState and mapDispatch.

LANGUAGE: javascript
CODE:
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'
import {
  todoToggled,
  todoDeleted,
  selectTodoById,
  selectActiveTodoId
} from './todosSlice'

const mapStateToProps = (state, ownProps) => {
  return {
    todo: selectTodoById(state, ownProps.todoId),
    activeTodoId: selectActiveTodoId(state)
  }
}

const mapDispatchToProps = dispatch => {
  return {
    todoDeleted: id => dispatch(todoDeleted(id)),
    todoToggled: id => dispatch(todoToggled(id))
  }
}

function TodoListItem({ todo, activeTodoId, todoDeleted, todoToggled }) {
  // rendering logic here
}

export default connect(mapStateToProps, mapDispatchToProps)(TodoListItem)

----------------------------------------

TITLE: Rendering Redux State in JavaScript and HTML
DESCRIPTION: Implements a render function to display the current state value in the UI and subscribes to store updates for automatic re-rendering.

LANGUAGE: javascript
CODE:
const valueEl = document.getElementById('value')

function render() {
  const state = store.getState()
  valueEl.innerHTML = state.value.toString()
}

render()
store.subscribe(render)

----------------------------------------

TITLE: Basic Redux State Structure Example
DESCRIPTION: Example showing the structure of a Redux state object for a todo application

LANGUAGE: javascript
CODE:
const todoAppState = {
  todos: [
    { id: 0, text: 'Learn React', completed: true },
    { id: 1, text: 'Learn Redux', completed: false, color: 'purple' },
    { id: 2, text: 'Build something fun!', completed: false, color: 'blue' }
  ],
  filters: {
    status: 'Active',
    colors: ['red', 'blue']
  }
}

----------------------------------------

TITLE: Installing React-Redux Bindings
DESCRIPTION: Command for installing React-Redux bindings package, which is essential for using Redux with React applications.

LANGUAGE: bash
CODE:
npm install react-redux

----------------------------------------

TITLE: Implementing a Simple React Counter Component
DESCRIPTION: Demonstrates a basic React counter component using local state to track and update a counter value when a button is clicked.

LANGUAGE: jsx
CODE:
function Counter() {
  // State: a counter value
  const [counter, setCounter] = useState(0)

  // Action: code that causes an update to the state when something happens
  const increment = () => {
    setCounter(prevCounter => prevCounter + 1)
  }

  // View: the UI definition
  return (
    <div>
      Value: {counter} <button onClick={increment}>Increment</button>
    </div>
  )
}

----------------------------------------

TITLE: Using Thunk for Shared State in Actions
DESCRIPTION: Shows how to share state between reducers by including additional data in the action itself using a thunk function.

LANGUAGE: javascript
CODE:
function someSpecialActionCreator() {
  return (dispatch, getState) => {
    const state = getState()
    const dataFromB = selectImportantDataFromB(state)

    dispatch({
      type: 'SOME_SPECIAL_ACTION',
      payload: {
        dataFromB
      }
    })
  }
}

----------------------------------------

TITLE: Building Redux Project - Shell
DESCRIPTION: Command to build Redux artifacts into the dist folder using Yarn

LANGUAGE: sh
CODE:
yarn build

----------------------------------------

TITLE: Deploying to GitHub Pages
DESCRIPTION: Command to build and deploy the website to GitHub Pages, requiring GitHub username and SSH configuration.

LANGUAGE: bash
CODE:
$ GIT_USER=<Your GitHub username> USE_SSH=1 npm run deploy

----------------------------------------

TITLE: Cloning Redux Repository - Shell
DESCRIPTION: Command to clone the Redux repository after forking

LANGUAGE: sh
CODE:
git clone https://github.com/your-username/redux.git

----------------------------------------

TITLE: Creating New Redux Applications with Templates
DESCRIPTION: Commands for creating new Redux applications using official templates for Vite (with Redux+TS) and Next.js with Redux configuration.

LANGUAGE: bash
CODE:
# Vite with our Redux+TS template
# (using the `degit` tool to clone and extract the template)
npx degit reduxjs/redux-templates/packages/vite-template-redux my-app

# Next.js using the `with-redux` template
npx create-next-app --example with-redux my-app

----------------------------------------

TITLE: Combining Reducers with State Namespacing in JavaScript
DESCRIPTION: Demonstrates how combineReducers namespaces state slices under their respective keys.

LANGUAGE: javascript
CODE:
rootReducer = combineReducers({potato: potatoReducer, tomato: tomatoReducer})
// This would produce the following state object
{
  potato: {
    // ... potatoes, and other state managed by the potatoReducer ...
  },
  tomato: {
    // ... tomatoes, and other state managed by the tomatoReducer, maybe some nice sauce? ...
  }
}

----------------------------------------

TITLE: Type Checking Redux Actions with isAction
DESCRIPTION: Utility function that validates if a parameter is a valid Redux action object by checking if it's a plain object with a string type field. Functions as a TypeScript type predicate.

LANGUAGE: typescript
CODE:
function isAction(action: unknown): action is Action<string> {
  return isPlainObject(action) && typeof action.type === 'string';
}